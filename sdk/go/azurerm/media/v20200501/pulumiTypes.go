// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200501

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type AccountEncryption struct {
	// The properties of the key used to encrypt the account.
	KeyVaultProperties *KeyVaultProperties `pulumi:"keyVaultProperties"`
	// The type of key used to encrypt the Account Key.
	Type string `pulumi:"type"`
}

// AccountEncryptionInput is an input type that accepts AccountEncryptionArgs and AccountEncryptionOutput values.
// You can construct a concrete instance of `AccountEncryptionInput` via:
//
//          AccountEncryptionArgs{...}
type AccountEncryptionInput interface {
	pulumi.Input

	ToAccountEncryptionOutput() AccountEncryptionOutput
	ToAccountEncryptionOutputWithContext(context.Context) AccountEncryptionOutput
}

type AccountEncryptionArgs struct {
	// The properties of the key used to encrypt the account.
	KeyVaultProperties KeyVaultPropertiesPtrInput `pulumi:"keyVaultProperties"`
	// The type of key used to encrypt the Account Key.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AccountEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountEncryption)(nil)).Elem()
}

func (i AccountEncryptionArgs) ToAccountEncryptionOutput() AccountEncryptionOutput {
	return i.ToAccountEncryptionOutputWithContext(context.Background())
}

func (i AccountEncryptionArgs) ToAccountEncryptionOutputWithContext(ctx context.Context) AccountEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountEncryptionOutput)
}

func (i AccountEncryptionArgs) ToAccountEncryptionPtrOutput() AccountEncryptionPtrOutput {
	return i.ToAccountEncryptionPtrOutputWithContext(context.Background())
}

func (i AccountEncryptionArgs) ToAccountEncryptionPtrOutputWithContext(ctx context.Context) AccountEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountEncryptionOutput).ToAccountEncryptionPtrOutputWithContext(ctx)
}

// AccountEncryptionPtrInput is an input type that accepts AccountEncryptionArgs, AccountEncryptionPtr and AccountEncryptionPtrOutput values.
// You can construct a concrete instance of `AccountEncryptionPtrInput` via:
//
//          AccountEncryptionArgs{...}
//
//  or:
//
//          nil
type AccountEncryptionPtrInput interface {
	pulumi.Input

	ToAccountEncryptionPtrOutput() AccountEncryptionPtrOutput
	ToAccountEncryptionPtrOutputWithContext(context.Context) AccountEncryptionPtrOutput
}

type accountEncryptionPtrType AccountEncryptionArgs

func AccountEncryptionPtr(v *AccountEncryptionArgs) AccountEncryptionPtrInput {
	return (*accountEncryptionPtrType)(v)
}

func (*accountEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountEncryption)(nil)).Elem()
}

func (i *accountEncryptionPtrType) ToAccountEncryptionPtrOutput() AccountEncryptionPtrOutput {
	return i.ToAccountEncryptionPtrOutputWithContext(context.Background())
}

func (i *accountEncryptionPtrType) ToAccountEncryptionPtrOutputWithContext(ctx context.Context) AccountEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountEncryptionPtrOutput)
}

type AccountEncryptionOutput struct{ *pulumi.OutputState }

func (AccountEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountEncryption)(nil)).Elem()
}

func (o AccountEncryptionOutput) ToAccountEncryptionOutput() AccountEncryptionOutput {
	return o
}

func (o AccountEncryptionOutput) ToAccountEncryptionOutputWithContext(ctx context.Context) AccountEncryptionOutput {
	return o
}

func (o AccountEncryptionOutput) ToAccountEncryptionPtrOutput() AccountEncryptionPtrOutput {
	return o.ToAccountEncryptionPtrOutputWithContext(context.Background())
}

func (o AccountEncryptionOutput) ToAccountEncryptionPtrOutputWithContext(ctx context.Context) AccountEncryptionPtrOutput {
	return o.ApplyT(func(v AccountEncryption) *AccountEncryption {
		return &v
	}).(AccountEncryptionPtrOutput)
}

// The properties of the key used to encrypt the account.
func (o AccountEncryptionOutput) KeyVaultProperties() KeyVaultPropertiesPtrOutput {
	return o.ApplyT(func(v AccountEncryption) *KeyVaultProperties { return v.KeyVaultProperties }).(KeyVaultPropertiesPtrOutput)
}

// The type of key used to encrypt the Account Key.
func (o AccountEncryptionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AccountEncryption) string { return v.Type }).(pulumi.StringOutput)
}

type AccountEncryptionPtrOutput struct{ *pulumi.OutputState }

func (AccountEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountEncryption)(nil)).Elem()
}

func (o AccountEncryptionPtrOutput) ToAccountEncryptionPtrOutput() AccountEncryptionPtrOutput {
	return o
}

func (o AccountEncryptionPtrOutput) ToAccountEncryptionPtrOutputWithContext(ctx context.Context) AccountEncryptionPtrOutput {
	return o
}

func (o AccountEncryptionPtrOutput) Elem() AccountEncryptionOutput {
	return o.ApplyT(func(v *AccountEncryption) AccountEncryption { return *v }).(AccountEncryptionOutput)
}

// The properties of the key used to encrypt the account.
func (o AccountEncryptionPtrOutput) KeyVaultProperties() KeyVaultPropertiesPtrOutput {
	return o.ApplyT(func(v *AccountEncryption) *KeyVaultProperties {
		if v == nil {
			return nil
		}
		return v.KeyVaultProperties
	}).(KeyVaultPropertiesPtrOutput)
}

// The type of key used to encrypt the Account Key.
func (o AccountEncryptionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type AccountEncryptionResponse struct {
	// The properties of the key used to encrypt the account.
	KeyVaultProperties *KeyVaultPropertiesResponse `pulumi:"keyVaultProperties"`
	// The type of key used to encrypt the Account Key.
	Type string `pulumi:"type"`
}

// AccountEncryptionResponseInput is an input type that accepts AccountEncryptionResponseArgs and AccountEncryptionResponseOutput values.
// You can construct a concrete instance of `AccountEncryptionResponseInput` via:
//
//          AccountEncryptionResponseArgs{...}
type AccountEncryptionResponseInput interface {
	pulumi.Input

	ToAccountEncryptionResponseOutput() AccountEncryptionResponseOutput
	ToAccountEncryptionResponseOutputWithContext(context.Context) AccountEncryptionResponseOutput
}

type AccountEncryptionResponseArgs struct {
	// The properties of the key used to encrypt the account.
	KeyVaultProperties KeyVaultPropertiesResponsePtrInput `pulumi:"keyVaultProperties"`
	// The type of key used to encrypt the Account Key.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AccountEncryptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountEncryptionResponse)(nil)).Elem()
}

func (i AccountEncryptionResponseArgs) ToAccountEncryptionResponseOutput() AccountEncryptionResponseOutput {
	return i.ToAccountEncryptionResponseOutputWithContext(context.Background())
}

func (i AccountEncryptionResponseArgs) ToAccountEncryptionResponseOutputWithContext(ctx context.Context) AccountEncryptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountEncryptionResponseOutput)
}

func (i AccountEncryptionResponseArgs) ToAccountEncryptionResponsePtrOutput() AccountEncryptionResponsePtrOutput {
	return i.ToAccountEncryptionResponsePtrOutputWithContext(context.Background())
}

func (i AccountEncryptionResponseArgs) ToAccountEncryptionResponsePtrOutputWithContext(ctx context.Context) AccountEncryptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountEncryptionResponseOutput).ToAccountEncryptionResponsePtrOutputWithContext(ctx)
}

// AccountEncryptionResponsePtrInput is an input type that accepts AccountEncryptionResponseArgs, AccountEncryptionResponsePtr and AccountEncryptionResponsePtrOutput values.
// You can construct a concrete instance of `AccountEncryptionResponsePtrInput` via:
//
//          AccountEncryptionResponseArgs{...}
//
//  or:
//
//          nil
type AccountEncryptionResponsePtrInput interface {
	pulumi.Input

	ToAccountEncryptionResponsePtrOutput() AccountEncryptionResponsePtrOutput
	ToAccountEncryptionResponsePtrOutputWithContext(context.Context) AccountEncryptionResponsePtrOutput
}

type accountEncryptionResponsePtrType AccountEncryptionResponseArgs

func AccountEncryptionResponsePtr(v *AccountEncryptionResponseArgs) AccountEncryptionResponsePtrInput {
	return (*accountEncryptionResponsePtrType)(v)
}

func (*accountEncryptionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountEncryptionResponse)(nil)).Elem()
}

func (i *accountEncryptionResponsePtrType) ToAccountEncryptionResponsePtrOutput() AccountEncryptionResponsePtrOutput {
	return i.ToAccountEncryptionResponsePtrOutputWithContext(context.Background())
}

func (i *accountEncryptionResponsePtrType) ToAccountEncryptionResponsePtrOutputWithContext(ctx context.Context) AccountEncryptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountEncryptionResponsePtrOutput)
}

type AccountEncryptionResponseOutput struct{ *pulumi.OutputState }

func (AccountEncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountEncryptionResponse)(nil)).Elem()
}

func (o AccountEncryptionResponseOutput) ToAccountEncryptionResponseOutput() AccountEncryptionResponseOutput {
	return o
}

func (o AccountEncryptionResponseOutput) ToAccountEncryptionResponseOutputWithContext(ctx context.Context) AccountEncryptionResponseOutput {
	return o
}

func (o AccountEncryptionResponseOutput) ToAccountEncryptionResponsePtrOutput() AccountEncryptionResponsePtrOutput {
	return o.ToAccountEncryptionResponsePtrOutputWithContext(context.Background())
}

func (o AccountEncryptionResponseOutput) ToAccountEncryptionResponsePtrOutputWithContext(ctx context.Context) AccountEncryptionResponsePtrOutput {
	return o.ApplyT(func(v AccountEncryptionResponse) *AccountEncryptionResponse {
		return &v
	}).(AccountEncryptionResponsePtrOutput)
}

// The properties of the key used to encrypt the account.
func (o AccountEncryptionResponseOutput) KeyVaultProperties() KeyVaultPropertiesResponsePtrOutput {
	return o.ApplyT(func(v AccountEncryptionResponse) *KeyVaultPropertiesResponse { return v.KeyVaultProperties }).(KeyVaultPropertiesResponsePtrOutput)
}

// The type of key used to encrypt the Account Key.
func (o AccountEncryptionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AccountEncryptionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AccountEncryptionResponsePtrOutput struct{ *pulumi.OutputState }

func (AccountEncryptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountEncryptionResponse)(nil)).Elem()
}

func (o AccountEncryptionResponsePtrOutput) ToAccountEncryptionResponsePtrOutput() AccountEncryptionResponsePtrOutput {
	return o
}

func (o AccountEncryptionResponsePtrOutput) ToAccountEncryptionResponsePtrOutputWithContext(ctx context.Context) AccountEncryptionResponsePtrOutput {
	return o
}

func (o AccountEncryptionResponsePtrOutput) Elem() AccountEncryptionResponseOutput {
	return o.ApplyT(func(v *AccountEncryptionResponse) AccountEncryptionResponse { return *v }).(AccountEncryptionResponseOutput)
}

// The properties of the key used to encrypt the account.
func (o AccountEncryptionResponsePtrOutput) KeyVaultProperties() KeyVaultPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *AccountEncryptionResponse) *KeyVaultPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.KeyVaultProperties
	}).(KeyVaultPropertiesResponsePtrOutput)
}

// The type of key used to encrypt the Account Key.
func (o AccountEncryptionResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountEncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// An Account Filter.
type AccountFilterType struct {
	// The name of the resource
	Name string `pulumi:"name"`
	// The Media Filter properties.
	Properties MediaFilterPropertiesResponse `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type string `pulumi:"type"`
}

// AccountFilterTypeInput is an input type that accepts AccountFilterTypeArgs and AccountFilterTypeOutput values.
// You can construct a concrete instance of `AccountFilterTypeInput` via:
//
//          AccountFilterTypeArgs{...}
type AccountFilterTypeInput interface {
	pulumi.Input

	ToAccountFilterTypeOutput() AccountFilterTypeOutput
	ToAccountFilterTypeOutputWithContext(context.Context) AccountFilterTypeOutput
}

// An Account Filter.
type AccountFilterTypeArgs struct {
	// The name of the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The Media Filter properties.
	Properties MediaFilterPropertiesResponseInput `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AccountFilterTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountFilterType)(nil)).Elem()
}

func (i AccountFilterTypeArgs) ToAccountFilterTypeOutput() AccountFilterTypeOutput {
	return i.ToAccountFilterTypeOutputWithContext(context.Background())
}

func (i AccountFilterTypeArgs) ToAccountFilterTypeOutputWithContext(ctx context.Context) AccountFilterTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountFilterTypeOutput)
}

// An Account Filter.
type AccountFilterTypeOutput struct{ *pulumi.OutputState }

func (AccountFilterTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountFilterType)(nil)).Elem()
}

func (o AccountFilterTypeOutput) ToAccountFilterTypeOutput() AccountFilterTypeOutput {
	return o
}

func (o AccountFilterTypeOutput) ToAccountFilterTypeOutputWithContext(ctx context.Context) AccountFilterTypeOutput {
	return o
}

// The name of the resource
func (o AccountFilterTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AccountFilterType) string { return v.Name }).(pulumi.StringOutput)
}

// The Media Filter properties.
func (o AccountFilterTypeOutput) Properties() MediaFilterPropertiesResponseOutput {
	return o.ApplyT(func(v AccountFilterType) MediaFilterPropertiesResponse { return v.Properties }).(MediaFilterPropertiesResponseOutput)
}

// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
func (o AccountFilterTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AccountFilterType) string { return v.Type }).(pulumi.StringOutput)
}

// Akamai access control
type AkamaiAccessControl struct {
	// authentication key list
	AkamaiSignatureHeaderAuthenticationKeyList []AkamaiSignatureHeaderAuthenticationKey `pulumi:"akamaiSignatureHeaderAuthenticationKeyList"`
}

// AkamaiAccessControlInput is an input type that accepts AkamaiAccessControlArgs and AkamaiAccessControlOutput values.
// You can construct a concrete instance of `AkamaiAccessControlInput` via:
//
//          AkamaiAccessControlArgs{...}
type AkamaiAccessControlInput interface {
	pulumi.Input

	ToAkamaiAccessControlOutput() AkamaiAccessControlOutput
	ToAkamaiAccessControlOutputWithContext(context.Context) AkamaiAccessControlOutput
}

// Akamai access control
type AkamaiAccessControlArgs struct {
	// authentication key list
	AkamaiSignatureHeaderAuthenticationKeyList AkamaiSignatureHeaderAuthenticationKeyArrayInput `pulumi:"akamaiSignatureHeaderAuthenticationKeyList"`
}

func (AkamaiAccessControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AkamaiAccessControl)(nil)).Elem()
}

func (i AkamaiAccessControlArgs) ToAkamaiAccessControlOutput() AkamaiAccessControlOutput {
	return i.ToAkamaiAccessControlOutputWithContext(context.Background())
}

func (i AkamaiAccessControlArgs) ToAkamaiAccessControlOutputWithContext(ctx context.Context) AkamaiAccessControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiAccessControlOutput)
}

func (i AkamaiAccessControlArgs) ToAkamaiAccessControlPtrOutput() AkamaiAccessControlPtrOutput {
	return i.ToAkamaiAccessControlPtrOutputWithContext(context.Background())
}

func (i AkamaiAccessControlArgs) ToAkamaiAccessControlPtrOutputWithContext(ctx context.Context) AkamaiAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiAccessControlOutput).ToAkamaiAccessControlPtrOutputWithContext(ctx)
}

// AkamaiAccessControlPtrInput is an input type that accepts AkamaiAccessControlArgs, AkamaiAccessControlPtr and AkamaiAccessControlPtrOutput values.
// You can construct a concrete instance of `AkamaiAccessControlPtrInput` via:
//
//          AkamaiAccessControlArgs{...}
//
//  or:
//
//          nil
type AkamaiAccessControlPtrInput interface {
	pulumi.Input

	ToAkamaiAccessControlPtrOutput() AkamaiAccessControlPtrOutput
	ToAkamaiAccessControlPtrOutputWithContext(context.Context) AkamaiAccessControlPtrOutput
}

type akamaiAccessControlPtrType AkamaiAccessControlArgs

func AkamaiAccessControlPtr(v *AkamaiAccessControlArgs) AkamaiAccessControlPtrInput {
	return (*akamaiAccessControlPtrType)(v)
}

func (*akamaiAccessControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AkamaiAccessControl)(nil)).Elem()
}

func (i *akamaiAccessControlPtrType) ToAkamaiAccessControlPtrOutput() AkamaiAccessControlPtrOutput {
	return i.ToAkamaiAccessControlPtrOutputWithContext(context.Background())
}

func (i *akamaiAccessControlPtrType) ToAkamaiAccessControlPtrOutputWithContext(ctx context.Context) AkamaiAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiAccessControlPtrOutput)
}

// Akamai access control
type AkamaiAccessControlOutput struct{ *pulumi.OutputState }

func (AkamaiAccessControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AkamaiAccessControl)(nil)).Elem()
}

func (o AkamaiAccessControlOutput) ToAkamaiAccessControlOutput() AkamaiAccessControlOutput {
	return o
}

func (o AkamaiAccessControlOutput) ToAkamaiAccessControlOutputWithContext(ctx context.Context) AkamaiAccessControlOutput {
	return o
}

func (o AkamaiAccessControlOutput) ToAkamaiAccessControlPtrOutput() AkamaiAccessControlPtrOutput {
	return o.ToAkamaiAccessControlPtrOutputWithContext(context.Background())
}

func (o AkamaiAccessControlOutput) ToAkamaiAccessControlPtrOutputWithContext(ctx context.Context) AkamaiAccessControlPtrOutput {
	return o.ApplyT(func(v AkamaiAccessControl) *AkamaiAccessControl {
		return &v
	}).(AkamaiAccessControlPtrOutput)
}

// authentication key list
func (o AkamaiAccessControlOutput) AkamaiSignatureHeaderAuthenticationKeyList() AkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return o.ApplyT(func(v AkamaiAccessControl) []AkamaiSignatureHeaderAuthenticationKey {
		return v.AkamaiSignatureHeaderAuthenticationKeyList
	}).(AkamaiSignatureHeaderAuthenticationKeyArrayOutput)
}

type AkamaiAccessControlPtrOutput struct{ *pulumi.OutputState }

func (AkamaiAccessControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AkamaiAccessControl)(nil)).Elem()
}

func (o AkamaiAccessControlPtrOutput) ToAkamaiAccessControlPtrOutput() AkamaiAccessControlPtrOutput {
	return o
}

func (o AkamaiAccessControlPtrOutput) ToAkamaiAccessControlPtrOutputWithContext(ctx context.Context) AkamaiAccessControlPtrOutput {
	return o
}

func (o AkamaiAccessControlPtrOutput) Elem() AkamaiAccessControlOutput {
	return o.ApplyT(func(v *AkamaiAccessControl) AkamaiAccessControl { return *v }).(AkamaiAccessControlOutput)
}

// authentication key list
func (o AkamaiAccessControlPtrOutput) AkamaiSignatureHeaderAuthenticationKeyList() AkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return o.ApplyT(func(v *AkamaiAccessControl) []AkamaiSignatureHeaderAuthenticationKey {
		if v == nil {
			return nil
		}
		return v.AkamaiSignatureHeaderAuthenticationKeyList
	}).(AkamaiSignatureHeaderAuthenticationKeyArrayOutput)
}

// Akamai access control
type AkamaiAccessControlResponse struct {
	// authentication key list
	AkamaiSignatureHeaderAuthenticationKeyList []AkamaiSignatureHeaderAuthenticationKeyResponse `pulumi:"akamaiSignatureHeaderAuthenticationKeyList"`
}

// AkamaiAccessControlResponseInput is an input type that accepts AkamaiAccessControlResponseArgs and AkamaiAccessControlResponseOutput values.
// You can construct a concrete instance of `AkamaiAccessControlResponseInput` via:
//
//          AkamaiAccessControlResponseArgs{...}
type AkamaiAccessControlResponseInput interface {
	pulumi.Input

	ToAkamaiAccessControlResponseOutput() AkamaiAccessControlResponseOutput
	ToAkamaiAccessControlResponseOutputWithContext(context.Context) AkamaiAccessControlResponseOutput
}

// Akamai access control
type AkamaiAccessControlResponseArgs struct {
	// authentication key list
	AkamaiSignatureHeaderAuthenticationKeyList AkamaiSignatureHeaderAuthenticationKeyResponseArrayInput `pulumi:"akamaiSignatureHeaderAuthenticationKeyList"`
}

func (AkamaiAccessControlResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AkamaiAccessControlResponse)(nil)).Elem()
}

func (i AkamaiAccessControlResponseArgs) ToAkamaiAccessControlResponseOutput() AkamaiAccessControlResponseOutput {
	return i.ToAkamaiAccessControlResponseOutputWithContext(context.Background())
}

func (i AkamaiAccessControlResponseArgs) ToAkamaiAccessControlResponseOutputWithContext(ctx context.Context) AkamaiAccessControlResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiAccessControlResponseOutput)
}

func (i AkamaiAccessControlResponseArgs) ToAkamaiAccessControlResponsePtrOutput() AkamaiAccessControlResponsePtrOutput {
	return i.ToAkamaiAccessControlResponsePtrOutputWithContext(context.Background())
}

func (i AkamaiAccessControlResponseArgs) ToAkamaiAccessControlResponsePtrOutputWithContext(ctx context.Context) AkamaiAccessControlResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiAccessControlResponseOutput).ToAkamaiAccessControlResponsePtrOutputWithContext(ctx)
}

// AkamaiAccessControlResponsePtrInput is an input type that accepts AkamaiAccessControlResponseArgs, AkamaiAccessControlResponsePtr and AkamaiAccessControlResponsePtrOutput values.
// You can construct a concrete instance of `AkamaiAccessControlResponsePtrInput` via:
//
//          AkamaiAccessControlResponseArgs{...}
//
//  or:
//
//          nil
type AkamaiAccessControlResponsePtrInput interface {
	pulumi.Input

	ToAkamaiAccessControlResponsePtrOutput() AkamaiAccessControlResponsePtrOutput
	ToAkamaiAccessControlResponsePtrOutputWithContext(context.Context) AkamaiAccessControlResponsePtrOutput
}

type akamaiAccessControlResponsePtrType AkamaiAccessControlResponseArgs

func AkamaiAccessControlResponsePtr(v *AkamaiAccessControlResponseArgs) AkamaiAccessControlResponsePtrInput {
	return (*akamaiAccessControlResponsePtrType)(v)
}

func (*akamaiAccessControlResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AkamaiAccessControlResponse)(nil)).Elem()
}

func (i *akamaiAccessControlResponsePtrType) ToAkamaiAccessControlResponsePtrOutput() AkamaiAccessControlResponsePtrOutput {
	return i.ToAkamaiAccessControlResponsePtrOutputWithContext(context.Background())
}

func (i *akamaiAccessControlResponsePtrType) ToAkamaiAccessControlResponsePtrOutputWithContext(ctx context.Context) AkamaiAccessControlResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiAccessControlResponsePtrOutput)
}

// Akamai access control
type AkamaiAccessControlResponseOutput struct{ *pulumi.OutputState }

func (AkamaiAccessControlResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AkamaiAccessControlResponse)(nil)).Elem()
}

func (o AkamaiAccessControlResponseOutput) ToAkamaiAccessControlResponseOutput() AkamaiAccessControlResponseOutput {
	return o
}

func (o AkamaiAccessControlResponseOutput) ToAkamaiAccessControlResponseOutputWithContext(ctx context.Context) AkamaiAccessControlResponseOutput {
	return o
}

func (o AkamaiAccessControlResponseOutput) ToAkamaiAccessControlResponsePtrOutput() AkamaiAccessControlResponsePtrOutput {
	return o.ToAkamaiAccessControlResponsePtrOutputWithContext(context.Background())
}

func (o AkamaiAccessControlResponseOutput) ToAkamaiAccessControlResponsePtrOutputWithContext(ctx context.Context) AkamaiAccessControlResponsePtrOutput {
	return o.ApplyT(func(v AkamaiAccessControlResponse) *AkamaiAccessControlResponse {
		return &v
	}).(AkamaiAccessControlResponsePtrOutput)
}

// authentication key list
func (o AkamaiAccessControlResponseOutput) AkamaiSignatureHeaderAuthenticationKeyList() AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput {
	return o.ApplyT(func(v AkamaiAccessControlResponse) []AkamaiSignatureHeaderAuthenticationKeyResponse {
		return v.AkamaiSignatureHeaderAuthenticationKeyList
	}).(AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput)
}

type AkamaiAccessControlResponsePtrOutput struct{ *pulumi.OutputState }

func (AkamaiAccessControlResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AkamaiAccessControlResponse)(nil)).Elem()
}

func (o AkamaiAccessControlResponsePtrOutput) ToAkamaiAccessControlResponsePtrOutput() AkamaiAccessControlResponsePtrOutput {
	return o
}

func (o AkamaiAccessControlResponsePtrOutput) ToAkamaiAccessControlResponsePtrOutputWithContext(ctx context.Context) AkamaiAccessControlResponsePtrOutput {
	return o
}

func (o AkamaiAccessControlResponsePtrOutput) Elem() AkamaiAccessControlResponseOutput {
	return o.ApplyT(func(v *AkamaiAccessControlResponse) AkamaiAccessControlResponse { return *v }).(AkamaiAccessControlResponseOutput)
}

// authentication key list
func (o AkamaiAccessControlResponsePtrOutput) AkamaiSignatureHeaderAuthenticationKeyList() AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput {
	return o.ApplyT(func(v *AkamaiAccessControlResponse) []AkamaiSignatureHeaderAuthenticationKeyResponse {
		if v == nil {
			return nil
		}
		return v.AkamaiSignatureHeaderAuthenticationKeyList
	}).(AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput)
}

// Akamai Signature Header authentication key.
type AkamaiSignatureHeaderAuthenticationKey struct {
	// authentication key
	Base64Key *string `pulumi:"base64Key"`
	// The expiration time of the authentication key.
	Expiration *string `pulumi:"expiration"`
	// identifier of the key
	Identifier *string `pulumi:"identifier"`
}

// AkamaiSignatureHeaderAuthenticationKeyInput is an input type that accepts AkamaiSignatureHeaderAuthenticationKeyArgs and AkamaiSignatureHeaderAuthenticationKeyOutput values.
// You can construct a concrete instance of `AkamaiSignatureHeaderAuthenticationKeyInput` via:
//
//          AkamaiSignatureHeaderAuthenticationKeyArgs{...}
type AkamaiSignatureHeaderAuthenticationKeyInput interface {
	pulumi.Input

	ToAkamaiSignatureHeaderAuthenticationKeyOutput() AkamaiSignatureHeaderAuthenticationKeyOutput
	ToAkamaiSignatureHeaderAuthenticationKeyOutputWithContext(context.Context) AkamaiSignatureHeaderAuthenticationKeyOutput
}

// Akamai Signature Header authentication key.
type AkamaiSignatureHeaderAuthenticationKeyArgs struct {
	// authentication key
	Base64Key pulumi.StringPtrInput `pulumi:"base64Key"`
	// The expiration time of the authentication key.
	Expiration pulumi.StringPtrInput `pulumi:"expiration"`
	// identifier of the key
	Identifier pulumi.StringPtrInput `pulumi:"identifier"`
}

func (AkamaiSignatureHeaderAuthenticationKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AkamaiSignatureHeaderAuthenticationKey)(nil)).Elem()
}

func (i AkamaiSignatureHeaderAuthenticationKeyArgs) ToAkamaiSignatureHeaderAuthenticationKeyOutput() AkamaiSignatureHeaderAuthenticationKeyOutput {
	return i.ToAkamaiSignatureHeaderAuthenticationKeyOutputWithContext(context.Background())
}

func (i AkamaiSignatureHeaderAuthenticationKeyArgs) ToAkamaiSignatureHeaderAuthenticationKeyOutputWithContext(ctx context.Context) AkamaiSignatureHeaderAuthenticationKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiSignatureHeaderAuthenticationKeyOutput)
}

// AkamaiSignatureHeaderAuthenticationKeyArrayInput is an input type that accepts AkamaiSignatureHeaderAuthenticationKeyArray and AkamaiSignatureHeaderAuthenticationKeyArrayOutput values.
// You can construct a concrete instance of `AkamaiSignatureHeaderAuthenticationKeyArrayInput` via:
//
//          AkamaiSignatureHeaderAuthenticationKeyArray{ AkamaiSignatureHeaderAuthenticationKeyArgs{...} }
type AkamaiSignatureHeaderAuthenticationKeyArrayInput interface {
	pulumi.Input

	ToAkamaiSignatureHeaderAuthenticationKeyArrayOutput() AkamaiSignatureHeaderAuthenticationKeyArrayOutput
	ToAkamaiSignatureHeaderAuthenticationKeyArrayOutputWithContext(context.Context) AkamaiSignatureHeaderAuthenticationKeyArrayOutput
}

type AkamaiSignatureHeaderAuthenticationKeyArray []AkamaiSignatureHeaderAuthenticationKeyInput

func (AkamaiSignatureHeaderAuthenticationKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AkamaiSignatureHeaderAuthenticationKey)(nil)).Elem()
}

func (i AkamaiSignatureHeaderAuthenticationKeyArray) ToAkamaiSignatureHeaderAuthenticationKeyArrayOutput() AkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return i.ToAkamaiSignatureHeaderAuthenticationKeyArrayOutputWithContext(context.Background())
}

func (i AkamaiSignatureHeaderAuthenticationKeyArray) ToAkamaiSignatureHeaderAuthenticationKeyArrayOutputWithContext(ctx context.Context) AkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiSignatureHeaderAuthenticationKeyArrayOutput)
}

// Akamai Signature Header authentication key.
type AkamaiSignatureHeaderAuthenticationKeyOutput struct{ *pulumi.OutputState }

func (AkamaiSignatureHeaderAuthenticationKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AkamaiSignatureHeaderAuthenticationKey)(nil)).Elem()
}

func (o AkamaiSignatureHeaderAuthenticationKeyOutput) ToAkamaiSignatureHeaderAuthenticationKeyOutput() AkamaiSignatureHeaderAuthenticationKeyOutput {
	return o
}

func (o AkamaiSignatureHeaderAuthenticationKeyOutput) ToAkamaiSignatureHeaderAuthenticationKeyOutputWithContext(ctx context.Context) AkamaiSignatureHeaderAuthenticationKeyOutput {
	return o
}

// authentication key
func (o AkamaiSignatureHeaderAuthenticationKeyOutput) Base64Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AkamaiSignatureHeaderAuthenticationKey) *string { return v.Base64Key }).(pulumi.StringPtrOutput)
}

// The expiration time of the authentication key.
func (o AkamaiSignatureHeaderAuthenticationKeyOutput) Expiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AkamaiSignatureHeaderAuthenticationKey) *string { return v.Expiration }).(pulumi.StringPtrOutput)
}

// identifier of the key
func (o AkamaiSignatureHeaderAuthenticationKeyOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AkamaiSignatureHeaderAuthenticationKey) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

type AkamaiSignatureHeaderAuthenticationKeyArrayOutput struct{ *pulumi.OutputState }

func (AkamaiSignatureHeaderAuthenticationKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AkamaiSignatureHeaderAuthenticationKey)(nil)).Elem()
}

func (o AkamaiSignatureHeaderAuthenticationKeyArrayOutput) ToAkamaiSignatureHeaderAuthenticationKeyArrayOutput() AkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return o
}

func (o AkamaiSignatureHeaderAuthenticationKeyArrayOutput) ToAkamaiSignatureHeaderAuthenticationKeyArrayOutputWithContext(ctx context.Context) AkamaiSignatureHeaderAuthenticationKeyArrayOutput {
	return o
}

func (o AkamaiSignatureHeaderAuthenticationKeyArrayOutput) Index(i pulumi.IntInput) AkamaiSignatureHeaderAuthenticationKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AkamaiSignatureHeaderAuthenticationKey {
		return vs[0].([]AkamaiSignatureHeaderAuthenticationKey)[vs[1].(int)]
	}).(AkamaiSignatureHeaderAuthenticationKeyOutput)
}

// Akamai Signature Header authentication key.
type AkamaiSignatureHeaderAuthenticationKeyResponse struct {
	// authentication key
	Base64Key *string `pulumi:"base64Key"`
	// The expiration time of the authentication key.
	Expiration *string `pulumi:"expiration"`
	// identifier of the key
	Identifier *string `pulumi:"identifier"`
}

// AkamaiSignatureHeaderAuthenticationKeyResponseInput is an input type that accepts AkamaiSignatureHeaderAuthenticationKeyResponseArgs and AkamaiSignatureHeaderAuthenticationKeyResponseOutput values.
// You can construct a concrete instance of `AkamaiSignatureHeaderAuthenticationKeyResponseInput` via:
//
//          AkamaiSignatureHeaderAuthenticationKeyResponseArgs{...}
type AkamaiSignatureHeaderAuthenticationKeyResponseInput interface {
	pulumi.Input

	ToAkamaiSignatureHeaderAuthenticationKeyResponseOutput() AkamaiSignatureHeaderAuthenticationKeyResponseOutput
	ToAkamaiSignatureHeaderAuthenticationKeyResponseOutputWithContext(context.Context) AkamaiSignatureHeaderAuthenticationKeyResponseOutput
}

// Akamai Signature Header authentication key.
type AkamaiSignatureHeaderAuthenticationKeyResponseArgs struct {
	// authentication key
	Base64Key pulumi.StringPtrInput `pulumi:"base64Key"`
	// The expiration time of the authentication key.
	Expiration pulumi.StringPtrInput `pulumi:"expiration"`
	// identifier of the key
	Identifier pulumi.StringPtrInput `pulumi:"identifier"`
}

func (AkamaiSignatureHeaderAuthenticationKeyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AkamaiSignatureHeaderAuthenticationKeyResponse)(nil)).Elem()
}

func (i AkamaiSignatureHeaderAuthenticationKeyResponseArgs) ToAkamaiSignatureHeaderAuthenticationKeyResponseOutput() AkamaiSignatureHeaderAuthenticationKeyResponseOutput {
	return i.ToAkamaiSignatureHeaderAuthenticationKeyResponseOutputWithContext(context.Background())
}

func (i AkamaiSignatureHeaderAuthenticationKeyResponseArgs) ToAkamaiSignatureHeaderAuthenticationKeyResponseOutputWithContext(ctx context.Context) AkamaiSignatureHeaderAuthenticationKeyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiSignatureHeaderAuthenticationKeyResponseOutput)
}

// AkamaiSignatureHeaderAuthenticationKeyResponseArrayInput is an input type that accepts AkamaiSignatureHeaderAuthenticationKeyResponseArray and AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput values.
// You can construct a concrete instance of `AkamaiSignatureHeaderAuthenticationKeyResponseArrayInput` via:
//
//          AkamaiSignatureHeaderAuthenticationKeyResponseArray{ AkamaiSignatureHeaderAuthenticationKeyResponseArgs{...} }
type AkamaiSignatureHeaderAuthenticationKeyResponseArrayInput interface {
	pulumi.Input

	ToAkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput() AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput
	ToAkamaiSignatureHeaderAuthenticationKeyResponseArrayOutputWithContext(context.Context) AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput
}

type AkamaiSignatureHeaderAuthenticationKeyResponseArray []AkamaiSignatureHeaderAuthenticationKeyResponseInput

func (AkamaiSignatureHeaderAuthenticationKeyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AkamaiSignatureHeaderAuthenticationKeyResponse)(nil)).Elem()
}

func (i AkamaiSignatureHeaderAuthenticationKeyResponseArray) ToAkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput() AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput {
	return i.ToAkamaiSignatureHeaderAuthenticationKeyResponseArrayOutputWithContext(context.Background())
}

func (i AkamaiSignatureHeaderAuthenticationKeyResponseArray) ToAkamaiSignatureHeaderAuthenticationKeyResponseArrayOutputWithContext(ctx context.Context) AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput)
}

// Akamai Signature Header authentication key.
type AkamaiSignatureHeaderAuthenticationKeyResponseOutput struct{ *pulumi.OutputState }

func (AkamaiSignatureHeaderAuthenticationKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AkamaiSignatureHeaderAuthenticationKeyResponse)(nil)).Elem()
}

func (o AkamaiSignatureHeaderAuthenticationKeyResponseOutput) ToAkamaiSignatureHeaderAuthenticationKeyResponseOutput() AkamaiSignatureHeaderAuthenticationKeyResponseOutput {
	return o
}

func (o AkamaiSignatureHeaderAuthenticationKeyResponseOutput) ToAkamaiSignatureHeaderAuthenticationKeyResponseOutputWithContext(ctx context.Context) AkamaiSignatureHeaderAuthenticationKeyResponseOutput {
	return o
}

// authentication key
func (o AkamaiSignatureHeaderAuthenticationKeyResponseOutput) Base64Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AkamaiSignatureHeaderAuthenticationKeyResponse) *string { return v.Base64Key }).(pulumi.StringPtrOutput)
}

// The expiration time of the authentication key.
func (o AkamaiSignatureHeaderAuthenticationKeyResponseOutput) Expiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AkamaiSignatureHeaderAuthenticationKeyResponse) *string { return v.Expiration }).(pulumi.StringPtrOutput)
}

// identifier of the key
func (o AkamaiSignatureHeaderAuthenticationKeyResponseOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AkamaiSignatureHeaderAuthenticationKeyResponse) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

type AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput struct{ *pulumi.OutputState }

func (AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AkamaiSignatureHeaderAuthenticationKeyResponse)(nil)).Elem()
}

func (o AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput) ToAkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput() AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput {
	return o
}

func (o AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput) ToAkamaiSignatureHeaderAuthenticationKeyResponseArrayOutputWithContext(ctx context.Context) AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput {
	return o
}

func (o AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput) Index(i pulumi.IntInput) AkamaiSignatureHeaderAuthenticationKeyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AkamaiSignatureHeaderAuthenticationKeyResponse {
		return vs[0].([]AkamaiSignatureHeaderAuthenticationKeyResponse)[vs[1].(int)]
	}).(AkamaiSignatureHeaderAuthenticationKeyResponseOutput)
}

// An Asset.
type AssetType struct {
	// The name of the resource
	Name string `pulumi:"name"`
	// The resource properties.
	Properties AssetPropertiesResponse `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type string `pulumi:"type"`
}

// AssetTypeInput is an input type that accepts AssetTypeArgs and AssetTypeOutput values.
// You can construct a concrete instance of `AssetTypeInput` via:
//
//          AssetTypeArgs{...}
type AssetTypeInput interface {
	pulumi.Input

	ToAssetTypeOutput() AssetTypeOutput
	ToAssetTypeOutputWithContext(context.Context) AssetTypeOutput
}

// An Asset.
type AssetTypeArgs struct {
	// The name of the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The resource properties.
	Properties AssetPropertiesResponseInput `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AssetTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetType)(nil)).Elem()
}

func (i AssetTypeArgs) ToAssetTypeOutput() AssetTypeOutput {
	return i.ToAssetTypeOutputWithContext(context.Background())
}

func (i AssetTypeArgs) ToAssetTypeOutputWithContext(ctx context.Context) AssetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetTypeOutput)
}

// An Asset.
type AssetTypeOutput struct{ *pulumi.OutputState }

func (AssetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetType)(nil)).Elem()
}

func (o AssetTypeOutput) ToAssetTypeOutput() AssetTypeOutput {
	return o
}

func (o AssetTypeOutput) ToAssetTypeOutputWithContext(ctx context.Context) AssetTypeOutput {
	return o
}

// The name of the resource
func (o AssetTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AssetType) string { return v.Name }).(pulumi.StringOutput)
}

// The resource properties.
func (o AssetTypeOutput) Properties() AssetPropertiesResponseOutput {
	return o.ApplyT(func(v AssetType) AssetPropertiesResponse { return v.Properties }).(AssetPropertiesResponseOutput)
}

// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
func (o AssetTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AssetType) string { return v.Type }).(pulumi.StringOutput)
}

// An Asset Filter.
type AssetFilterType struct {
	// The name of the resource
	Name string `pulumi:"name"`
	// The Media Filter properties.
	Properties MediaFilterPropertiesResponse `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type string `pulumi:"type"`
}

// AssetFilterTypeInput is an input type that accepts AssetFilterTypeArgs and AssetFilterTypeOutput values.
// You can construct a concrete instance of `AssetFilterTypeInput` via:
//
//          AssetFilterTypeArgs{...}
type AssetFilterTypeInput interface {
	pulumi.Input

	ToAssetFilterTypeOutput() AssetFilterTypeOutput
	ToAssetFilterTypeOutputWithContext(context.Context) AssetFilterTypeOutput
}

// An Asset Filter.
type AssetFilterTypeArgs struct {
	// The name of the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The Media Filter properties.
	Properties MediaFilterPropertiesResponseInput `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AssetFilterTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetFilterType)(nil)).Elem()
}

func (i AssetFilterTypeArgs) ToAssetFilterTypeOutput() AssetFilterTypeOutput {
	return i.ToAssetFilterTypeOutputWithContext(context.Background())
}

func (i AssetFilterTypeArgs) ToAssetFilterTypeOutputWithContext(ctx context.Context) AssetFilterTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetFilterTypeOutput)
}

// An Asset Filter.
type AssetFilterTypeOutput struct{ *pulumi.OutputState }

func (AssetFilterTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetFilterType)(nil)).Elem()
}

func (o AssetFilterTypeOutput) ToAssetFilterTypeOutput() AssetFilterTypeOutput {
	return o
}

func (o AssetFilterTypeOutput) ToAssetFilterTypeOutputWithContext(ctx context.Context) AssetFilterTypeOutput {
	return o
}

// The name of the resource
func (o AssetFilterTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AssetFilterType) string { return v.Name }).(pulumi.StringOutput)
}

// The Media Filter properties.
func (o AssetFilterTypeOutput) Properties() MediaFilterPropertiesResponseOutput {
	return o.ApplyT(func(v AssetFilterType) MediaFilterPropertiesResponse { return v.Properties }).(MediaFilterPropertiesResponseOutput)
}

// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
func (o AssetFilterTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AssetFilterType) string { return v.Type }).(pulumi.StringOutput)
}

// The Asset properties.
type AssetPropertiesResponse struct {
	// The alternate ID of the Asset.
	AlternateId *string `pulumi:"alternateId"`
	// The Asset ID.
	AssetId string `pulumi:"assetId"`
	// The name of the asset blob container.
	Container *string `pulumi:"container"`
	// The creation date of the Asset.
	Created string `pulumi:"created"`
	// The Asset description.
	Description *string `pulumi:"description"`
	// The last modified date of the Asset.
	LastModified string `pulumi:"lastModified"`
	// The name of the storage account.
	StorageAccountName *string `pulumi:"storageAccountName"`
	// The Asset encryption format. One of None or MediaStorageEncryption.
	StorageEncryptionFormat string `pulumi:"storageEncryptionFormat"`
}

// AssetPropertiesResponseInput is an input type that accepts AssetPropertiesResponseArgs and AssetPropertiesResponseOutput values.
// You can construct a concrete instance of `AssetPropertiesResponseInput` via:
//
//          AssetPropertiesResponseArgs{...}
type AssetPropertiesResponseInput interface {
	pulumi.Input

	ToAssetPropertiesResponseOutput() AssetPropertiesResponseOutput
	ToAssetPropertiesResponseOutputWithContext(context.Context) AssetPropertiesResponseOutput
}

// The Asset properties.
type AssetPropertiesResponseArgs struct {
	// The alternate ID of the Asset.
	AlternateId pulumi.StringPtrInput `pulumi:"alternateId"`
	// The Asset ID.
	AssetId pulumi.StringInput `pulumi:"assetId"`
	// The name of the asset blob container.
	Container pulumi.StringPtrInput `pulumi:"container"`
	// The creation date of the Asset.
	Created pulumi.StringInput `pulumi:"created"`
	// The Asset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The last modified date of the Asset.
	LastModified pulumi.StringInput `pulumi:"lastModified"`
	// The name of the storage account.
	StorageAccountName pulumi.StringPtrInput `pulumi:"storageAccountName"`
	// The Asset encryption format. One of None or MediaStorageEncryption.
	StorageEncryptionFormat pulumi.StringInput `pulumi:"storageEncryptionFormat"`
}

func (AssetPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetPropertiesResponse)(nil)).Elem()
}

func (i AssetPropertiesResponseArgs) ToAssetPropertiesResponseOutput() AssetPropertiesResponseOutput {
	return i.ToAssetPropertiesResponseOutputWithContext(context.Background())
}

func (i AssetPropertiesResponseArgs) ToAssetPropertiesResponseOutputWithContext(ctx context.Context) AssetPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetPropertiesResponseOutput)
}

func (i AssetPropertiesResponseArgs) ToAssetPropertiesResponsePtrOutput() AssetPropertiesResponsePtrOutput {
	return i.ToAssetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i AssetPropertiesResponseArgs) ToAssetPropertiesResponsePtrOutputWithContext(ctx context.Context) AssetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetPropertiesResponseOutput).ToAssetPropertiesResponsePtrOutputWithContext(ctx)
}

// AssetPropertiesResponsePtrInput is an input type that accepts AssetPropertiesResponseArgs, AssetPropertiesResponsePtr and AssetPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `AssetPropertiesResponsePtrInput` via:
//
//          AssetPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type AssetPropertiesResponsePtrInput interface {
	pulumi.Input

	ToAssetPropertiesResponsePtrOutput() AssetPropertiesResponsePtrOutput
	ToAssetPropertiesResponsePtrOutputWithContext(context.Context) AssetPropertiesResponsePtrOutput
}

type assetPropertiesResponsePtrType AssetPropertiesResponseArgs

func AssetPropertiesResponsePtr(v *AssetPropertiesResponseArgs) AssetPropertiesResponsePtrInput {
	return (*assetPropertiesResponsePtrType)(v)
}

func (*assetPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetPropertiesResponse)(nil)).Elem()
}

func (i *assetPropertiesResponsePtrType) ToAssetPropertiesResponsePtrOutput() AssetPropertiesResponsePtrOutput {
	return i.ToAssetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *assetPropertiesResponsePtrType) ToAssetPropertiesResponsePtrOutputWithContext(ctx context.Context) AssetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetPropertiesResponsePtrOutput)
}

// The Asset properties.
type AssetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (AssetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetPropertiesResponse)(nil)).Elem()
}

func (o AssetPropertiesResponseOutput) ToAssetPropertiesResponseOutput() AssetPropertiesResponseOutput {
	return o
}

func (o AssetPropertiesResponseOutput) ToAssetPropertiesResponseOutputWithContext(ctx context.Context) AssetPropertiesResponseOutput {
	return o
}

func (o AssetPropertiesResponseOutput) ToAssetPropertiesResponsePtrOutput() AssetPropertiesResponsePtrOutput {
	return o.ToAssetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o AssetPropertiesResponseOutput) ToAssetPropertiesResponsePtrOutputWithContext(ctx context.Context) AssetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v AssetPropertiesResponse) *AssetPropertiesResponse {
		return &v
	}).(AssetPropertiesResponsePtrOutput)
}

// The alternate ID of the Asset.
func (o AssetPropertiesResponseOutput) AlternateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssetPropertiesResponse) *string { return v.AlternateId }).(pulumi.StringPtrOutput)
}

// The Asset ID.
func (o AssetPropertiesResponseOutput) AssetId() pulumi.StringOutput {
	return o.ApplyT(func(v AssetPropertiesResponse) string { return v.AssetId }).(pulumi.StringOutput)
}

// The name of the asset blob container.
func (o AssetPropertiesResponseOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssetPropertiesResponse) *string { return v.Container }).(pulumi.StringPtrOutput)
}

// The creation date of the Asset.
func (o AssetPropertiesResponseOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v AssetPropertiesResponse) string { return v.Created }).(pulumi.StringOutput)
}

// The Asset description.
func (o AssetPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssetPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The last modified date of the Asset.
func (o AssetPropertiesResponseOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v AssetPropertiesResponse) string { return v.LastModified }).(pulumi.StringOutput)
}

// The name of the storage account.
func (o AssetPropertiesResponseOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssetPropertiesResponse) *string { return v.StorageAccountName }).(pulumi.StringPtrOutput)
}

// The Asset encryption format. One of None or MediaStorageEncryption.
func (o AssetPropertiesResponseOutput) StorageEncryptionFormat() pulumi.StringOutput {
	return o.ApplyT(func(v AssetPropertiesResponse) string { return v.StorageEncryptionFormat }).(pulumi.StringOutput)
}

type AssetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (AssetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssetPropertiesResponse)(nil)).Elem()
}

func (o AssetPropertiesResponsePtrOutput) ToAssetPropertiesResponsePtrOutput() AssetPropertiesResponsePtrOutput {
	return o
}

func (o AssetPropertiesResponsePtrOutput) ToAssetPropertiesResponsePtrOutputWithContext(ctx context.Context) AssetPropertiesResponsePtrOutput {
	return o
}

func (o AssetPropertiesResponsePtrOutput) Elem() AssetPropertiesResponseOutput {
	return o.ApplyT(func(v *AssetPropertiesResponse) AssetPropertiesResponse { return *v }).(AssetPropertiesResponseOutput)
}

// The alternate ID of the Asset.
func (o AssetPropertiesResponsePtrOutput) AlternateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AlternateId
	}).(pulumi.StringPtrOutput)
}

// The Asset ID.
func (o AssetPropertiesResponsePtrOutput) AssetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AssetId
	}).(pulumi.StringPtrOutput)
}

// The name of the asset blob container.
func (o AssetPropertiesResponsePtrOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Container
	}).(pulumi.StringPtrOutput)
}

// The creation date of the Asset.
func (o AssetPropertiesResponsePtrOutput) Created() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Created
	}).(pulumi.StringPtrOutput)
}

// The Asset description.
func (o AssetPropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The last modified date of the Asset.
func (o AssetPropertiesResponsePtrOutput) LastModified() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastModified
	}).(pulumi.StringPtrOutput)
}

// The name of the storage account.
func (o AssetPropertiesResponsePtrOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountName
	}).(pulumi.StringPtrOutput)
}

// The Asset encryption format. One of None or MediaStorageEncryption.
func (o AssetPropertiesResponsePtrOutput) StorageEncryptionFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StorageEncryptionFormat
	}).(pulumi.StringPtrOutput)
}

// Properties of the Streaming Locator.
type AssetStreamingLocatorResponse struct {
	// Asset Name.
	AssetName string `pulumi:"assetName"`
	// The creation time of the Streaming Locator.
	Created string `pulumi:"created"`
	// Name of the default ContentKeyPolicy used by this Streaming Locator.
	DefaultContentKeyPolicyName string `pulumi:"defaultContentKeyPolicyName"`
	// The end time of the Streaming Locator.
	EndTime string `pulumi:"endTime"`
	// Streaming Locator name.
	Name string `pulumi:"name"`
	// The start time of the Streaming Locator.
	StartTime string `pulumi:"startTime"`
	// StreamingLocatorId of the Streaming Locator.
	StreamingLocatorId string `pulumi:"streamingLocatorId"`
	// Name of the Streaming Policy used by this Streaming Locator.
	StreamingPolicyName string `pulumi:"streamingPolicyName"`
}

// AssetStreamingLocatorResponseInput is an input type that accepts AssetStreamingLocatorResponseArgs and AssetStreamingLocatorResponseOutput values.
// You can construct a concrete instance of `AssetStreamingLocatorResponseInput` via:
//
//          AssetStreamingLocatorResponseArgs{...}
type AssetStreamingLocatorResponseInput interface {
	pulumi.Input

	ToAssetStreamingLocatorResponseOutput() AssetStreamingLocatorResponseOutput
	ToAssetStreamingLocatorResponseOutputWithContext(context.Context) AssetStreamingLocatorResponseOutput
}

// Properties of the Streaming Locator.
type AssetStreamingLocatorResponseArgs struct {
	// Asset Name.
	AssetName pulumi.StringInput `pulumi:"assetName"`
	// The creation time of the Streaming Locator.
	Created pulumi.StringInput `pulumi:"created"`
	// Name of the default ContentKeyPolicy used by this Streaming Locator.
	DefaultContentKeyPolicyName pulumi.StringInput `pulumi:"defaultContentKeyPolicyName"`
	// The end time of the Streaming Locator.
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// Streaming Locator name.
	Name pulumi.StringInput `pulumi:"name"`
	// The start time of the Streaming Locator.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// StreamingLocatorId of the Streaming Locator.
	StreamingLocatorId pulumi.StringInput `pulumi:"streamingLocatorId"`
	// Name of the Streaming Policy used by this Streaming Locator.
	StreamingPolicyName pulumi.StringInput `pulumi:"streamingPolicyName"`
}

func (AssetStreamingLocatorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetStreamingLocatorResponse)(nil)).Elem()
}

func (i AssetStreamingLocatorResponseArgs) ToAssetStreamingLocatorResponseOutput() AssetStreamingLocatorResponseOutput {
	return i.ToAssetStreamingLocatorResponseOutputWithContext(context.Background())
}

func (i AssetStreamingLocatorResponseArgs) ToAssetStreamingLocatorResponseOutputWithContext(ctx context.Context) AssetStreamingLocatorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetStreamingLocatorResponseOutput)
}

// AssetStreamingLocatorResponseArrayInput is an input type that accepts AssetStreamingLocatorResponseArray and AssetStreamingLocatorResponseArrayOutput values.
// You can construct a concrete instance of `AssetStreamingLocatorResponseArrayInput` via:
//
//          AssetStreamingLocatorResponseArray{ AssetStreamingLocatorResponseArgs{...} }
type AssetStreamingLocatorResponseArrayInput interface {
	pulumi.Input

	ToAssetStreamingLocatorResponseArrayOutput() AssetStreamingLocatorResponseArrayOutput
	ToAssetStreamingLocatorResponseArrayOutputWithContext(context.Context) AssetStreamingLocatorResponseArrayOutput
}

type AssetStreamingLocatorResponseArray []AssetStreamingLocatorResponseInput

func (AssetStreamingLocatorResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssetStreamingLocatorResponse)(nil)).Elem()
}

func (i AssetStreamingLocatorResponseArray) ToAssetStreamingLocatorResponseArrayOutput() AssetStreamingLocatorResponseArrayOutput {
	return i.ToAssetStreamingLocatorResponseArrayOutputWithContext(context.Background())
}

func (i AssetStreamingLocatorResponseArray) ToAssetStreamingLocatorResponseArrayOutputWithContext(ctx context.Context) AssetStreamingLocatorResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetStreamingLocatorResponseArrayOutput)
}

// Properties of the Streaming Locator.
type AssetStreamingLocatorResponseOutput struct{ *pulumi.OutputState }

func (AssetStreamingLocatorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetStreamingLocatorResponse)(nil)).Elem()
}

func (o AssetStreamingLocatorResponseOutput) ToAssetStreamingLocatorResponseOutput() AssetStreamingLocatorResponseOutput {
	return o
}

func (o AssetStreamingLocatorResponseOutput) ToAssetStreamingLocatorResponseOutputWithContext(ctx context.Context) AssetStreamingLocatorResponseOutput {
	return o
}

// Asset Name.
func (o AssetStreamingLocatorResponseOutput) AssetName() pulumi.StringOutput {
	return o.ApplyT(func(v AssetStreamingLocatorResponse) string { return v.AssetName }).(pulumi.StringOutput)
}

// The creation time of the Streaming Locator.
func (o AssetStreamingLocatorResponseOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v AssetStreamingLocatorResponse) string { return v.Created }).(pulumi.StringOutput)
}

// Name of the default ContentKeyPolicy used by this Streaming Locator.
func (o AssetStreamingLocatorResponseOutput) DefaultContentKeyPolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v AssetStreamingLocatorResponse) string { return v.DefaultContentKeyPolicyName }).(pulumi.StringOutput)
}

// The end time of the Streaming Locator.
func (o AssetStreamingLocatorResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v AssetStreamingLocatorResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// Streaming Locator name.
func (o AssetStreamingLocatorResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AssetStreamingLocatorResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The start time of the Streaming Locator.
func (o AssetStreamingLocatorResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v AssetStreamingLocatorResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// StreamingLocatorId of the Streaming Locator.
func (o AssetStreamingLocatorResponseOutput) StreamingLocatorId() pulumi.StringOutput {
	return o.ApplyT(func(v AssetStreamingLocatorResponse) string { return v.StreamingLocatorId }).(pulumi.StringOutput)
}

// Name of the Streaming Policy used by this Streaming Locator.
func (o AssetStreamingLocatorResponseOutput) StreamingPolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v AssetStreamingLocatorResponse) string { return v.StreamingPolicyName }).(pulumi.StringOutput)
}

type AssetStreamingLocatorResponseArrayOutput struct{ *pulumi.OutputState }

func (AssetStreamingLocatorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssetStreamingLocatorResponse)(nil)).Elem()
}

func (o AssetStreamingLocatorResponseArrayOutput) ToAssetStreamingLocatorResponseArrayOutput() AssetStreamingLocatorResponseArrayOutput {
	return o
}

func (o AssetStreamingLocatorResponseArrayOutput) ToAssetStreamingLocatorResponseArrayOutputWithContext(ctx context.Context) AssetStreamingLocatorResponseArrayOutput {
	return o
}

func (o AssetStreamingLocatorResponseArrayOutput) Index(i pulumi.IntInput) AssetStreamingLocatorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssetStreamingLocatorResponse {
		return vs[0].([]AssetStreamingLocatorResponse)[vs[1].(int)]
	}).(AssetStreamingLocatorResponseOutput)
}

// Class to specify DRM configurations of CommonEncryptionCbcs scheme in Streaming Policy
type CbcsDrmConfiguration struct {
	// FairPlay configurations
	FairPlay *StreamingPolicyFairPlayConfiguration `pulumi:"fairPlay"`
	// PlayReady configurations
	PlayReady *StreamingPolicyPlayReadyConfiguration `pulumi:"playReady"`
	// Widevine configurations
	Widevine *StreamingPolicyWidevineConfiguration `pulumi:"widevine"`
}

// CbcsDrmConfigurationInput is an input type that accepts CbcsDrmConfigurationArgs and CbcsDrmConfigurationOutput values.
// You can construct a concrete instance of `CbcsDrmConfigurationInput` via:
//
//          CbcsDrmConfigurationArgs{...}
type CbcsDrmConfigurationInput interface {
	pulumi.Input

	ToCbcsDrmConfigurationOutput() CbcsDrmConfigurationOutput
	ToCbcsDrmConfigurationOutputWithContext(context.Context) CbcsDrmConfigurationOutput
}

// Class to specify DRM configurations of CommonEncryptionCbcs scheme in Streaming Policy
type CbcsDrmConfigurationArgs struct {
	// FairPlay configurations
	FairPlay StreamingPolicyFairPlayConfigurationPtrInput `pulumi:"fairPlay"`
	// PlayReady configurations
	PlayReady StreamingPolicyPlayReadyConfigurationPtrInput `pulumi:"playReady"`
	// Widevine configurations
	Widevine StreamingPolicyWidevineConfigurationPtrInput `pulumi:"widevine"`
}

func (CbcsDrmConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CbcsDrmConfiguration)(nil)).Elem()
}

func (i CbcsDrmConfigurationArgs) ToCbcsDrmConfigurationOutput() CbcsDrmConfigurationOutput {
	return i.ToCbcsDrmConfigurationOutputWithContext(context.Background())
}

func (i CbcsDrmConfigurationArgs) ToCbcsDrmConfigurationOutputWithContext(ctx context.Context) CbcsDrmConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbcsDrmConfigurationOutput)
}

func (i CbcsDrmConfigurationArgs) ToCbcsDrmConfigurationPtrOutput() CbcsDrmConfigurationPtrOutput {
	return i.ToCbcsDrmConfigurationPtrOutputWithContext(context.Background())
}

func (i CbcsDrmConfigurationArgs) ToCbcsDrmConfigurationPtrOutputWithContext(ctx context.Context) CbcsDrmConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbcsDrmConfigurationOutput).ToCbcsDrmConfigurationPtrOutputWithContext(ctx)
}

// CbcsDrmConfigurationPtrInput is an input type that accepts CbcsDrmConfigurationArgs, CbcsDrmConfigurationPtr and CbcsDrmConfigurationPtrOutput values.
// You can construct a concrete instance of `CbcsDrmConfigurationPtrInput` via:
//
//          CbcsDrmConfigurationArgs{...}
//
//  or:
//
//          nil
type CbcsDrmConfigurationPtrInput interface {
	pulumi.Input

	ToCbcsDrmConfigurationPtrOutput() CbcsDrmConfigurationPtrOutput
	ToCbcsDrmConfigurationPtrOutputWithContext(context.Context) CbcsDrmConfigurationPtrOutput
}

type cbcsDrmConfigurationPtrType CbcsDrmConfigurationArgs

func CbcsDrmConfigurationPtr(v *CbcsDrmConfigurationArgs) CbcsDrmConfigurationPtrInput {
	return (*cbcsDrmConfigurationPtrType)(v)
}

func (*cbcsDrmConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CbcsDrmConfiguration)(nil)).Elem()
}

func (i *cbcsDrmConfigurationPtrType) ToCbcsDrmConfigurationPtrOutput() CbcsDrmConfigurationPtrOutput {
	return i.ToCbcsDrmConfigurationPtrOutputWithContext(context.Background())
}

func (i *cbcsDrmConfigurationPtrType) ToCbcsDrmConfigurationPtrOutputWithContext(ctx context.Context) CbcsDrmConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbcsDrmConfigurationPtrOutput)
}

// Class to specify DRM configurations of CommonEncryptionCbcs scheme in Streaming Policy
type CbcsDrmConfigurationOutput struct{ *pulumi.OutputState }

func (CbcsDrmConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CbcsDrmConfiguration)(nil)).Elem()
}

func (o CbcsDrmConfigurationOutput) ToCbcsDrmConfigurationOutput() CbcsDrmConfigurationOutput {
	return o
}

func (o CbcsDrmConfigurationOutput) ToCbcsDrmConfigurationOutputWithContext(ctx context.Context) CbcsDrmConfigurationOutput {
	return o
}

func (o CbcsDrmConfigurationOutput) ToCbcsDrmConfigurationPtrOutput() CbcsDrmConfigurationPtrOutput {
	return o.ToCbcsDrmConfigurationPtrOutputWithContext(context.Background())
}

func (o CbcsDrmConfigurationOutput) ToCbcsDrmConfigurationPtrOutputWithContext(ctx context.Context) CbcsDrmConfigurationPtrOutput {
	return o.ApplyT(func(v CbcsDrmConfiguration) *CbcsDrmConfiguration {
		return &v
	}).(CbcsDrmConfigurationPtrOutput)
}

// FairPlay configurations
func (o CbcsDrmConfigurationOutput) FairPlay() StreamingPolicyFairPlayConfigurationPtrOutput {
	return o.ApplyT(func(v CbcsDrmConfiguration) *StreamingPolicyFairPlayConfiguration { return v.FairPlay }).(StreamingPolicyFairPlayConfigurationPtrOutput)
}

// PlayReady configurations
func (o CbcsDrmConfigurationOutput) PlayReady() StreamingPolicyPlayReadyConfigurationPtrOutput {
	return o.ApplyT(func(v CbcsDrmConfiguration) *StreamingPolicyPlayReadyConfiguration { return v.PlayReady }).(StreamingPolicyPlayReadyConfigurationPtrOutput)
}

// Widevine configurations
func (o CbcsDrmConfigurationOutput) Widevine() StreamingPolicyWidevineConfigurationPtrOutput {
	return o.ApplyT(func(v CbcsDrmConfiguration) *StreamingPolicyWidevineConfiguration { return v.Widevine }).(StreamingPolicyWidevineConfigurationPtrOutput)
}

type CbcsDrmConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CbcsDrmConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CbcsDrmConfiguration)(nil)).Elem()
}

func (o CbcsDrmConfigurationPtrOutput) ToCbcsDrmConfigurationPtrOutput() CbcsDrmConfigurationPtrOutput {
	return o
}

func (o CbcsDrmConfigurationPtrOutput) ToCbcsDrmConfigurationPtrOutputWithContext(ctx context.Context) CbcsDrmConfigurationPtrOutput {
	return o
}

func (o CbcsDrmConfigurationPtrOutput) Elem() CbcsDrmConfigurationOutput {
	return o.ApplyT(func(v *CbcsDrmConfiguration) CbcsDrmConfiguration { return *v }).(CbcsDrmConfigurationOutput)
}

// FairPlay configurations
func (o CbcsDrmConfigurationPtrOutput) FairPlay() StreamingPolicyFairPlayConfigurationPtrOutput {
	return o.ApplyT(func(v *CbcsDrmConfiguration) *StreamingPolicyFairPlayConfiguration {
		if v == nil {
			return nil
		}
		return v.FairPlay
	}).(StreamingPolicyFairPlayConfigurationPtrOutput)
}

// PlayReady configurations
func (o CbcsDrmConfigurationPtrOutput) PlayReady() StreamingPolicyPlayReadyConfigurationPtrOutput {
	return o.ApplyT(func(v *CbcsDrmConfiguration) *StreamingPolicyPlayReadyConfiguration {
		if v == nil {
			return nil
		}
		return v.PlayReady
	}).(StreamingPolicyPlayReadyConfigurationPtrOutput)
}

// Widevine configurations
func (o CbcsDrmConfigurationPtrOutput) Widevine() StreamingPolicyWidevineConfigurationPtrOutput {
	return o.ApplyT(func(v *CbcsDrmConfiguration) *StreamingPolicyWidevineConfiguration {
		if v == nil {
			return nil
		}
		return v.Widevine
	}).(StreamingPolicyWidevineConfigurationPtrOutput)
}

// Class to specify DRM configurations of CommonEncryptionCbcs scheme in Streaming Policy
type CbcsDrmConfigurationResponse struct {
	// FairPlay configurations
	FairPlay *StreamingPolicyFairPlayConfigurationResponse `pulumi:"fairPlay"`
	// PlayReady configurations
	PlayReady *StreamingPolicyPlayReadyConfigurationResponse `pulumi:"playReady"`
	// Widevine configurations
	Widevine *StreamingPolicyWidevineConfigurationResponse `pulumi:"widevine"`
}

// CbcsDrmConfigurationResponseInput is an input type that accepts CbcsDrmConfigurationResponseArgs and CbcsDrmConfigurationResponseOutput values.
// You can construct a concrete instance of `CbcsDrmConfigurationResponseInput` via:
//
//          CbcsDrmConfigurationResponseArgs{...}
type CbcsDrmConfigurationResponseInput interface {
	pulumi.Input

	ToCbcsDrmConfigurationResponseOutput() CbcsDrmConfigurationResponseOutput
	ToCbcsDrmConfigurationResponseOutputWithContext(context.Context) CbcsDrmConfigurationResponseOutput
}

// Class to specify DRM configurations of CommonEncryptionCbcs scheme in Streaming Policy
type CbcsDrmConfigurationResponseArgs struct {
	// FairPlay configurations
	FairPlay StreamingPolicyFairPlayConfigurationResponsePtrInput `pulumi:"fairPlay"`
	// PlayReady configurations
	PlayReady StreamingPolicyPlayReadyConfigurationResponsePtrInput `pulumi:"playReady"`
	// Widevine configurations
	Widevine StreamingPolicyWidevineConfigurationResponsePtrInput `pulumi:"widevine"`
}

func (CbcsDrmConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CbcsDrmConfigurationResponse)(nil)).Elem()
}

func (i CbcsDrmConfigurationResponseArgs) ToCbcsDrmConfigurationResponseOutput() CbcsDrmConfigurationResponseOutput {
	return i.ToCbcsDrmConfigurationResponseOutputWithContext(context.Background())
}

func (i CbcsDrmConfigurationResponseArgs) ToCbcsDrmConfigurationResponseOutputWithContext(ctx context.Context) CbcsDrmConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbcsDrmConfigurationResponseOutput)
}

func (i CbcsDrmConfigurationResponseArgs) ToCbcsDrmConfigurationResponsePtrOutput() CbcsDrmConfigurationResponsePtrOutput {
	return i.ToCbcsDrmConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i CbcsDrmConfigurationResponseArgs) ToCbcsDrmConfigurationResponsePtrOutputWithContext(ctx context.Context) CbcsDrmConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbcsDrmConfigurationResponseOutput).ToCbcsDrmConfigurationResponsePtrOutputWithContext(ctx)
}

// CbcsDrmConfigurationResponsePtrInput is an input type that accepts CbcsDrmConfigurationResponseArgs, CbcsDrmConfigurationResponsePtr and CbcsDrmConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `CbcsDrmConfigurationResponsePtrInput` via:
//
//          CbcsDrmConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type CbcsDrmConfigurationResponsePtrInput interface {
	pulumi.Input

	ToCbcsDrmConfigurationResponsePtrOutput() CbcsDrmConfigurationResponsePtrOutput
	ToCbcsDrmConfigurationResponsePtrOutputWithContext(context.Context) CbcsDrmConfigurationResponsePtrOutput
}

type cbcsDrmConfigurationResponsePtrType CbcsDrmConfigurationResponseArgs

func CbcsDrmConfigurationResponsePtr(v *CbcsDrmConfigurationResponseArgs) CbcsDrmConfigurationResponsePtrInput {
	return (*cbcsDrmConfigurationResponsePtrType)(v)
}

func (*cbcsDrmConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CbcsDrmConfigurationResponse)(nil)).Elem()
}

func (i *cbcsDrmConfigurationResponsePtrType) ToCbcsDrmConfigurationResponsePtrOutput() CbcsDrmConfigurationResponsePtrOutput {
	return i.ToCbcsDrmConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *cbcsDrmConfigurationResponsePtrType) ToCbcsDrmConfigurationResponsePtrOutputWithContext(ctx context.Context) CbcsDrmConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbcsDrmConfigurationResponsePtrOutput)
}

// Class to specify DRM configurations of CommonEncryptionCbcs scheme in Streaming Policy
type CbcsDrmConfigurationResponseOutput struct{ *pulumi.OutputState }

func (CbcsDrmConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CbcsDrmConfigurationResponse)(nil)).Elem()
}

func (o CbcsDrmConfigurationResponseOutput) ToCbcsDrmConfigurationResponseOutput() CbcsDrmConfigurationResponseOutput {
	return o
}

func (o CbcsDrmConfigurationResponseOutput) ToCbcsDrmConfigurationResponseOutputWithContext(ctx context.Context) CbcsDrmConfigurationResponseOutput {
	return o
}

func (o CbcsDrmConfigurationResponseOutput) ToCbcsDrmConfigurationResponsePtrOutput() CbcsDrmConfigurationResponsePtrOutput {
	return o.ToCbcsDrmConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o CbcsDrmConfigurationResponseOutput) ToCbcsDrmConfigurationResponsePtrOutputWithContext(ctx context.Context) CbcsDrmConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CbcsDrmConfigurationResponse) *CbcsDrmConfigurationResponse {
		return &v
	}).(CbcsDrmConfigurationResponsePtrOutput)
}

// FairPlay configurations
func (o CbcsDrmConfigurationResponseOutput) FairPlay() StreamingPolicyFairPlayConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CbcsDrmConfigurationResponse) *StreamingPolicyFairPlayConfigurationResponse { return v.FairPlay }).(StreamingPolicyFairPlayConfigurationResponsePtrOutput)
}

// PlayReady configurations
func (o CbcsDrmConfigurationResponseOutput) PlayReady() StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CbcsDrmConfigurationResponse) *StreamingPolicyPlayReadyConfigurationResponse {
		return v.PlayReady
	}).(StreamingPolicyPlayReadyConfigurationResponsePtrOutput)
}

// Widevine configurations
func (o CbcsDrmConfigurationResponseOutput) Widevine() StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CbcsDrmConfigurationResponse) *StreamingPolicyWidevineConfigurationResponse { return v.Widevine }).(StreamingPolicyWidevineConfigurationResponsePtrOutput)
}

type CbcsDrmConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (CbcsDrmConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CbcsDrmConfigurationResponse)(nil)).Elem()
}

func (o CbcsDrmConfigurationResponsePtrOutput) ToCbcsDrmConfigurationResponsePtrOutput() CbcsDrmConfigurationResponsePtrOutput {
	return o
}

func (o CbcsDrmConfigurationResponsePtrOutput) ToCbcsDrmConfigurationResponsePtrOutputWithContext(ctx context.Context) CbcsDrmConfigurationResponsePtrOutput {
	return o
}

func (o CbcsDrmConfigurationResponsePtrOutput) Elem() CbcsDrmConfigurationResponseOutput {
	return o.ApplyT(func(v *CbcsDrmConfigurationResponse) CbcsDrmConfigurationResponse { return *v }).(CbcsDrmConfigurationResponseOutput)
}

// FairPlay configurations
func (o CbcsDrmConfigurationResponsePtrOutput) FairPlay() StreamingPolicyFairPlayConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *CbcsDrmConfigurationResponse) *StreamingPolicyFairPlayConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.FairPlay
	}).(StreamingPolicyFairPlayConfigurationResponsePtrOutput)
}

// PlayReady configurations
func (o CbcsDrmConfigurationResponsePtrOutput) PlayReady() StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *CbcsDrmConfigurationResponse) *StreamingPolicyPlayReadyConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.PlayReady
	}).(StreamingPolicyPlayReadyConfigurationResponsePtrOutput)
}

// Widevine configurations
func (o CbcsDrmConfigurationResponsePtrOutput) Widevine() StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *CbcsDrmConfigurationResponse) *StreamingPolicyWidevineConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Widevine
	}).(StreamingPolicyWidevineConfigurationResponsePtrOutput)
}

// Class to specify DRM configurations of CommonEncryptionCenc scheme in Streaming Policy
type CencDrmConfiguration struct {
	// PlayReady configurations
	PlayReady *StreamingPolicyPlayReadyConfiguration `pulumi:"playReady"`
	// Widevine configurations
	Widevine *StreamingPolicyWidevineConfiguration `pulumi:"widevine"`
}

// CencDrmConfigurationInput is an input type that accepts CencDrmConfigurationArgs and CencDrmConfigurationOutput values.
// You can construct a concrete instance of `CencDrmConfigurationInput` via:
//
//          CencDrmConfigurationArgs{...}
type CencDrmConfigurationInput interface {
	pulumi.Input

	ToCencDrmConfigurationOutput() CencDrmConfigurationOutput
	ToCencDrmConfigurationOutputWithContext(context.Context) CencDrmConfigurationOutput
}

// Class to specify DRM configurations of CommonEncryptionCenc scheme in Streaming Policy
type CencDrmConfigurationArgs struct {
	// PlayReady configurations
	PlayReady StreamingPolicyPlayReadyConfigurationPtrInput `pulumi:"playReady"`
	// Widevine configurations
	Widevine StreamingPolicyWidevineConfigurationPtrInput `pulumi:"widevine"`
}

func (CencDrmConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CencDrmConfiguration)(nil)).Elem()
}

func (i CencDrmConfigurationArgs) ToCencDrmConfigurationOutput() CencDrmConfigurationOutput {
	return i.ToCencDrmConfigurationOutputWithContext(context.Background())
}

func (i CencDrmConfigurationArgs) ToCencDrmConfigurationOutputWithContext(ctx context.Context) CencDrmConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CencDrmConfigurationOutput)
}

func (i CencDrmConfigurationArgs) ToCencDrmConfigurationPtrOutput() CencDrmConfigurationPtrOutput {
	return i.ToCencDrmConfigurationPtrOutputWithContext(context.Background())
}

func (i CencDrmConfigurationArgs) ToCencDrmConfigurationPtrOutputWithContext(ctx context.Context) CencDrmConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CencDrmConfigurationOutput).ToCencDrmConfigurationPtrOutputWithContext(ctx)
}

// CencDrmConfigurationPtrInput is an input type that accepts CencDrmConfigurationArgs, CencDrmConfigurationPtr and CencDrmConfigurationPtrOutput values.
// You can construct a concrete instance of `CencDrmConfigurationPtrInput` via:
//
//          CencDrmConfigurationArgs{...}
//
//  or:
//
//          nil
type CencDrmConfigurationPtrInput interface {
	pulumi.Input

	ToCencDrmConfigurationPtrOutput() CencDrmConfigurationPtrOutput
	ToCencDrmConfigurationPtrOutputWithContext(context.Context) CencDrmConfigurationPtrOutput
}

type cencDrmConfigurationPtrType CencDrmConfigurationArgs

func CencDrmConfigurationPtr(v *CencDrmConfigurationArgs) CencDrmConfigurationPtrInput {
	return (*cencDrmConfigurationPtrType)(v)
}

func (*cencDrmConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CencDrmConfiguration)(nil)).Elem()
}

func (i *cencDrmConfigurationPtrType) ToCencDrmConfigurationPtrOutput() CencDrmConfigurationPtrOutput {
	return i.ToCencDrmConfigurationPtrOutputWithContext(context.Background())
}

func (i *cencDrmConfigurationPtrType) ToCencDrmConfigurationPtrOutputWithContext(ctx context.Context) CencDrmConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CencDrmConfigurationPtrOutput)
}

// Class to specify DRM configurations of CommonEncryptionCenc scheme in Streaming Policy
type CencDrmConfigurationOutput struct{ *pulumi.OutputState }

func (CencDrmConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CencDrmConfiguration)(nil)).Elem()
}

func (o CencDrmConfigurationOutput) ToCencDrmConfigurationOutput() CencDrmConfigurationOutput {
	return o
}

func (o CencDrmConfigurationOutput) ToCencDrmConfigurationOutputWithContext(ctx context.Context) CencDrmConfigurationOutput {
	return o
}

func (o CencDrmConfigurationOutput) ToCencDrmConfigurationPtrOutput() CencDrmConfigurationPtrOutput {
	return o.ToCencDrmConfigurationPtrOutputWithContext(context.Background())
}

func (o CencDrmConfigurationOutput) ToCencDrmConfigurationPtrOutputWithContext(ctx context.Context) CencDrmConfigurationPtrOutput {
	return o.ApplyT(func(v CencDrmConfiguration) *CencDrmConfiguration {
		return &v
	}).(CencDrmConfigurationPtrOutput)
}

// PlayReady configurations
func (o CencDrmConfigurationOutput) PlayReady() StreamingPolicyPlayReadyConfigurationPtrOutput {
	return o.ApplyT(func(v CencDrmConfiguration) *StreamingPolicyPlayReadyConfiguration { return v.PlayReady }).(StreamingPolicyPlayReadyConfigurationPtrOutput)
}

// Widevine configurations
func (o CencDrmConfigurationOutput) Widevine() StreamingPolicyWidevineConfigurationPtrOutput {
	return o.ApplyT(func(v CencDrmConfiguration) *StreamingPolicyWidevineConfiguration { return v.Widevine }).(StreamingPolicyWidevineConfigurationPtrOutput)
}

type CencDrmConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CencDrmConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CencDrmConfiguration)(nil)).Elem()
}

func (o CencDrmConfigurationPtrOutput) ToCencDrmConfigurationPtrOutput() CencDrmConfigurationPtrOutput {
	return o
}

func (o CencDrmConfigurationPtrOutput) ToCencDrmConfigurationPtrOutputWithContext(ctx context.Context) CencDrmConfigurationPtrOutput {
	return o
}

func (o CencDrmConfigurationPtrOutput) Elem() CencDrmConfigurationOutput {
	return o.ApplyT(func(v *CencDrmConfiguration) CencDrmConfiguration { return *v }).(CencDrmConfigurationOutput)
}

// PlayReady configurations
func (o CencDrmConfigurationPtrOutput) PlayReady() StreamingPolicyPlayReadyConfigurationPtrOutput {
	return o.ApplyT(func(v *CencDrmConfiguration) *StreamingPolicyPlayReadyConfiguration {
		if v == nil {
			return nil
		}
		return v.PlayReady
	}).(StreamingPolicyPlayReadyConfigurationPtrOutput)
}

// Widevine configurations
func (o CencDrmConfigurationPtrOutput) Widevine() StreamingPolicyWidevineConfigurationPtrOutput {
	return o.ApplyT(func(v *CencDrmConfiguration) *StreamingPolicyWidevineConfiguration {
		if v == nil {
			return nil
		}
		return v.Widevine
	}).(StreamingPolicyWidevineConfigurationPtrOutput)
}

// Class to specify DRM configurations of CommonEncryptionCenc scheme in Streaming Policy
type CencDrmConfigurationResponse struct {
	// PlayReady configurations
	PlayReady *StreamingPolicyPlayReadyConfigurationResponse `pulumi:"playReady"`
	// Widevine configurations
	Widevine *StreamingPolicyWidevineConfigurationResponse `pulumi:"widevine"`
}

// CencDrmConfigurationResponseInput is an input type that accepts CencDrmConfigurationResponseArgs and CencDrmConfigurationResponseOutput values.
// You can construct a concrete instance of `CencDrmConfigurationResponseInput` via:
//
//          CencDrmConfigurationResponseArgs{...}
type CencDrmConfigurationResponseInput interface {
	pulumi.Input

	ToCencDrmConfigurationResponseOutput() CencDrmConfigurationResponseOutput
	ToCencDrmConfigurationResponseOutputWithContext(context.Context) CencDrmConfigurationResponseOutput
}

// Class to specify DRM configurations of CommonEncryptionCenc scheme in Streaming Policy
type CencDrmConfigurationResponseArgs struct {
	// PlayReady configurations
	PlayReady StreamingPolicyPlayReadyConfigurationResponsePtrInput `pulumi:"playReady"`
	// Widevine configurations
	Widevine StreamingPolicyWidevineConfigurationResponsePtrInput `pulumi:"widevine"`
}

func (CencDrmConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CencDrmConfigurationResponse)(nil)).Elem()
}

func (i CencDrmConfigurationResponseArgs) ToCencDrmConfigurationResponseOutput() CencDrmConfigurationResponseOutput {
	return i.ToCencDrmConfigurationResponseOutputWithContext(context.Background())
}

func (i CencDrmConfigurationResponseArgs) ToCencDrmConfigurationResponseOutputWithContext(ctx context.Context) CencDrmConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CencDrmConfigurationResponseOutput)
}

func (i CencDrmConfigurationResponseArgs) ToCencDrmConfigurationResponsePtrOutput() CencDrmConfigurationResponsePtrOutput {
	return i.ToCencDrmConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i CencDrmConfigurationResponseArgs) ToCencDrmConfigurationResponsePtrOutputWithContext(ctx context.Context) CencDrmConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CencDrmConfigurationResponseOutput).ToCencDrmConfigurationResponsePtrOutputWithContext(ctx)
}

// CencDrmConfigurationResponsePtrInput is an input type that accepts CencDrmConfigurationResponseArgs, CencDrmConfigurationResponsePtr and CencDrmConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `CencDrmConfigurationResponsePtrInput` via:
//
//          CencDrmConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type CencDrmConfigurationResponsePtrInput interface {
	pulumi.Input

	ToCencDrmConfigurationResponsePtrOutput() CencDrmConfigurationResponsePtrOutput
	ToCencDrmConfigurationResponsePtrOutputWithContext(context.Context) CencDrmConfigurationResponsePtrOutput
}

type cencDrmConfigurationResponsePtrType CencDrmConfigurationResponseArgs

func CencDrmConfigurationResponsePtr(v *CencDrmConfigurationResponseArgs) CencDrmConfigurationResponsePtrInput {
	return (*cencDrmConfigurationResponsePtrType)(v)
}

func (*cencDrmConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CencDrmConfigurationResponse)(nil)).Elem()
}

func (i *cencDrmConfigurationResponsePtrType) ToCencDrmConfigurationResponsePtrOutput() CencDrmConfigurationResponsePtrOutput {
	return i.ToCencDrmConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *cencDrmConfigurationResponsePtrType) ToCencDrmConfigurationResponsePtrOutputWithContext(ctx context.Context) CencDrmConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CencDrmConfigurationResponsePtrOutput)
}

// Class to specify DRM configurations of CommonEncryptionCenc scheme in Streaming Policy
type CencDrmConfigurationResponseOutput struct{ *pulumi.OutputState }

func (CencDrmConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CencDrmConfigurationResponse)(nil)).Elem()
}

func (o CencDrmConfigurationResponseOutput) ToCencDrmConfigurationResponseOutput() CencDrmConfigurationResponseOutput {
	return o
}

func (o CencDrmConfigurationResponseOutput) ToCencDrmConfigurationResponseOutputWithContext(ctx context.Context) CencDrmConfigurationResponseOutput {
	return o
}

func (o CencDrmConfigurationResponseOutput) ToCencDrmConfigurationResponsePtrOutput() CencDrmConfigurationResponsePtrOutput {
	return o.ToCencDrmConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o CencDrmConfigurationResponseOutput) ToCencDrmConfigurationResponsePtrOutputWithContext(ctx context.Context) CencDrmConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CencDrmConfigurationResponse) *CencDrmConfigurationResponse {
		return &v
	}).(CencDrmConfigurationResponsePtrOutput)
}

// PlayReady configurations
func (o CencDrmConfigurationResponseOutput) PlayReady() StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CencDrmConfigurationResponse) *StreamingPolicyPlayReadyConfigurationResponse {
		return v.PlayReady
	}).(StreamingPolicyPlayReadyConfigurationResponsePtrOutput)
}

// Widevine configurations
func (o CencDrmConfigurationResponseOutput) Widevine() StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CencDrmConfigurationResponse) *StreamingPolicyWidevineConfigurationResponse { return v.Widevine }).(StreamingPolicyWidevineConfigurationResponsePtrOutput)
}

type CencDrmConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (CencDrmConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CencDrmConfigurationResponse)(nil)).Elem()
}

func (o CencDrmConfigurationResponsePtrOutput) ToCencDrmConfigurationResponsePtrOutput() CencDrmConfigurationResponsePtrOutput {
	return o
}

func (o CencDrmConfigurationResponsePtrOutput) ToCencDrmConfigurationResponsePtrOutputWithContext(ctx context.Context) CencDrmConfigurationResponsePtrOutput {
	return o
}

func (o CencDrmConfigurationResponsePtrOutput) Elem() CencDrmConfigurationResponseOutput {
	return o.ApplyT(func(v *CencDrmConfigurationResponse) CencDrmConfigurationResponse { return *v }).(CencDrmConfigurationResponseOutput)
}

// PlayReady configurations
func (o CencDrmConfigurationResponsePtrOutput) PlayReady() StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *CencDrmConfigurationResponse) *StreamingPolicyPlayReadyConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.PlayReady
	}).(StreamingPolicyPlayReadyConfigurationResponsePtrOutput)
}

// Widevine configurations
func (o CencDrmConfigurationResponsePtrOutput) Widevine() StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *CencDrmConfigurationResponse) *StreamingPolicyWidevineConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Widevine
	}).(StreamingPolicyWidevineConfigurationResponsePtrOutput)
}

// Class for CommonEncryptionCbcs encryption scheme
type CommonEncryptionCbcs struct {
	// Representing which tracks should not be encrypted
	ClearTracks []TrackSelection `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys *StreamingPolicyContentKeys `pulumi:"contentKeys"`
	// Configuration of DRMs for current encryption scheme
	Drm *CbcsDrmConfiguration `pulumi:"drm"`
	// Representing supported protocols
	EnabledProtocols *EnabledProtocols `pulumi:"enabledProtocols"`
}

// CommonEncryptionCbcsInput is an input type that accepts CommonEncryptionCbcsArgs and CommonEncryptionCbcsOutput values.
// You can construct a concrete instance of `CommonEncryptionCbcsInput` via:
//
//          CommonEncryptionCbcsArgs{...}
type CommonEncryptionCbcsInput interface {
	pulumi.Input

	ToCommonEncryptionCbcsOutput() CommonEncryptionCbcsOutput
	ToCommonEncryptionCbcsOutputWithContext(context.Context) CommonEncryptionCbcsOutput
}

// Class for CommonEncryptionCbcs encryption scheme
type CommonEncryptionCbcsArgs struct {
	// Representing which tracks should not be encrypted
	ClearTracks TrackSelectionArrayInput `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys StreamingPolicyContentKeysPtrInput `pulumi:"contentKeys"`
	// Configuration of DRMs for current encryption scheme
	Drm CbcsDrmConfigurationPtrInput `pulumi:"drm"`
	// Representing supported protocols
	EnabledProtocols EnabledProtocolsPtrInput `pulumi:"enabledProtocols"`
}

func (CommonEncryptionCbcsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonEncryptionCbcs)(nil)).Elem()
}

func (i CommonEncryptionCbcsArgs) ToCommonEncryptionCbcsOutput() CommonEncryptionCbcsOutput {
	return i.ToCommonEncryptionCbcsOutputWithContext(context.Background())
}

func (i CommonEncryptionCbcsArgs) ToCommonEncryptionCbcsOutputWithContext(ctx context.Context) CommonEncryptionCbcsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCbcsOutput)
}

func (i CommonEncryptionCbcsArgs) ToCommonEncryptionCbcsPtrOutput() CommonEncryptionCbcsPtrOutput {
	return i.ToCommonEncryptionCbcsPtrOutputWithContext(context.Background())
}

func (i CommonEncryptionCbcsArgs) ToCommonEncryptionCbcsPtrOutputWithContext(ctx context.Context) CommonEncryptionCbcsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCbcsOutput).ToCommonEncryptionCbcsPtrOutputWithContext(ctx)
}

// CommonEncryptionCbcsPtrInput is an input type that accepts CommonEncryptionCbcsArgs, CommonEncryptionCbcsPtr and CommonEncryptionCbcsPtrOutput values.
// You can construct a concrete instance of `CommonEncryptionCbcsPtrInput` via:
//
//          CommonEncryptionCbcsArgs{...}
//
//  or:
//
//          nil
type CommonEncryptionCbcsPtrInput interface {
	pulumi.Input

	ToCommonEncryptionCbcsPtrOutput() CommonEncryptionCbcsPtrOutput
	ToCommonEncryptionCbcsPtrOutputWithContext(context.Context) CommonEncryptionCbcsPtrOutput
}

type commonEncryptionCbcsPtrType CommonEncryptionCbcsArgs

func CommonEncryptionCbcsPtr(v *CommonEncryptionCbcsArgs) CommonEncryptionCbcsPtrInput {
	return (*commonEncryptionCbcsPtrType)(v)
}

func (*commonEncryptionCbcsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonEncryptionCbcs)(nil)).Elem()
}

func (i *commonEncryptionCbcsPtrType) ToCommonEncryptionCbcsPtrOutput() CommonEncryptionCbcsPtrOutput {
	return i.ToCommonEncryptionCbcsPtrOutputWithContext(context.Background())
}

func (i *commonEncryptionCbcsPtrType) ToCommonEncryptionCbcsPtrOutputWithContext(ctx context.Context) CommonEncryptionCbcsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCbcsPtrOutput)
}

// Class for CommonEncryptionCbcs encryption scheme
type CommonEncryptionCbcsOutput struct{ *pulumi.OutputState }

func (CommonEncryptionCbcsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonEncryptionCbcs)(nil)).Elem()
}

func (o CommonEncryptionCbcsOutput) ToCommonEncryptionCbcsOutput() CommonEncryptionCbcsOutput {
	return o
}

func (o CommonEncryptionCbcsOutput) ToCommonEncryptionCbcsOutputWithContext(ctx context.Context) CommonEncryptionCbcsOutput {
	return o
}

func (o CommonEncryptionCbcsOutput) ToCommonEncryptionCbcsPtrOutput() CommonEncryptionCbcsPtrOutput {
	return o.ToCommonEncryptionCbcsPtrOutputWithContext(context.Background())
}

func (o CommonEncryptionCbcsOutput) ToCommonEncryptionCbcsPtrOutputWithContext(ctx context.Context) CommonEncryptionCbcsPtrOutput {
	return o.ApplyT(func(v CommonEncryptionCbcs) *CommonEncryptionCbcs {
		return &v
	}).(CommonEncryptionCbcsPtrOutput)
}

// Representing which tracks should not be encrypted
func (o CommonEncryptionCbcsOutput) ClearTracks() TrackSelectionArrayOutput {
	return o.ApplyT(func(v CommonEncryptionCbcs) []TrackSelection { return v.ClearTracks }).(TrackSelectionArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o CommonEncryptionCbcsOutput) ContentKeys() StreamingPolicyContentKeysPtrOutput {
	return o.ApplyT(func(v CommonEncryptionCbcs) *StreamingPolicyContentKeys { return v.ContentKeys }).(StreamingPolicyContentKeysPtrOutput)
}

// Configuration of DRMs for current encryption scheme
func (o CommonEncryptionCbcsOutput) Drm() CbcsDrmConfigurationPtrOutput {
	return o.ApplyT(func(v CommonEncryptionCbcs) *CbcsDrmConfiguration { return v.Drm }).(CbcsDrmConfigurationPtrOutput)
}

// Representing supported protocols
func (o CommonEncryptionCbcsOutput) EnabledProtocols() EnabledProtocolsPtrOutput {
	return o.ApplyT(func(v CommonEncryptionCbcs) *EnabledProtocols { return v.EnabledProtocols }).(EnabledProtocolsPtrOutput)
}

type CommonEncryptionCbcsPtrOutput struct{ *pulumi.OutputState }

func (CommonEncryptionCbcsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonEncryptionCbcs)(nil)).Elem()
}

func (o CommonEncryptionCbcsPtrOutput) ToCommonEncryptionCbcsPtrOutput() CommonEncryptionCbcsPtrOutput {
	return o
}

func (o CommonEncryptionCbcsPtrOutput) ToCommonEncryptionCbcsPtrOutputWithContext(ctx context.Context) CommonEncryptionCbcsPtrOutput {
	return o
}

func (o CommonEncryptionCbcsPtrOutput) Elem() CommonEncryptionCbcsOutput {
	return o.ApplyT(func(v *CommonEncryptionCbcs) CommonEncryptionCbcs { return *v }).(CommonEncryptionCbcsOutput)
}

// Representing which tracks should not be encrypted
func (o CommonEncryptionCbcsPtrOutput) ClearTracks() TrackSelectionArrayOutput {
	return o.ApplyT(func(v *CommonEncryptionCbcs) []TrackSelection {
		if v == nil {
			return nil
		}
		return v.ClearTracks
	}).(TrackSelectionArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o CommonEncryptionCbcsPtrOutput) ContentKeys() StreamingPolicyContentKeysPtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCbcs) *StreamingPolicyContentKeys {
		if v == nil {
			return nil
		}
		return v.ContentKeys
	}).(StreamingPolicyContentKeysPtrOutput)
}

// Configuration of DRMs for current encryption scheme
func (o CommonEncryptionCbcsPtrOutput) Drm() CbcsDrmConfigurationPtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCbcs) *CbcsDrmConfiguration {
		if v == nil {
			return nil
		}
		return v.Drm
	}).(CbcsDrmConfigurationPtrOutput)
}

// Representing supported protocols
func (o CommonEncryptionCbcsPtrOutput) EnabledProtocols() EnabledProtocolsPtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCbcs) *EnabledProtocols {
		if v == nil {
			return nil
		}
		return v.EnabledProtocols
	}).(EnabledProtocolsPtrOutput)
}

// Class for CommonEncryptionCbcs encryption scheme
type CommonEncryptionCbcsResponse struct {
	// Representing which tracks should not be encrypted
	ClearTracks []TrackSelectionResponse `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys *StreamingPolicyContentKeysResponse `pulumi:"contentKeys"`
	// Configuration of DRMs for current encryption scheme
	Drm *CbcsDrmConfigurationResponse `pulumi:"drm"`
	// Representing supported protocols
	EnabledProtocols *EnabledProtocolsResponse `pulumi:"enabledProtocols"`
}

// CommonEncryptionCbcsResponseInput is an input type that accepts CommonEncryptionCbcsResponseArgs and CommonEncryptionCbcsResponseOutput values.
// You can construct a concrete instance of `CommonEncryptionCbcsResponseInput` via:
//
//          CommonEncryptionCbcsResponseArgs{...}
type CommonEncryptionCbcsResponseInput interface {
	pulumi.Input

	ToCommonEncryptionCbcsResponseOutput() CommonEncryptionCbcsResponseOutput
	ToCommonEncryptionCbcsResponseOutputWithContext(context.Context) CommonEncryptionCbcsResponseOutput
}

// Class for CommonEncryptionCbcs encryption scheme
type CommonEncryptionCbcsResponseArgs struct {
	// Representing which tracks should not be encrypted
	ClearTracks TrackSelectionResponseArrayInput `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys StreamingPolicyContentKeysResponsePtrInput `pulumi:"contentKeys"`
	// Configuration of DRMs for current encryption scheme
	Drm CbcsDrmConfigurationResponsePtrInput `pulumi:"drm"`
	// Representing supported protocols
	EnabledProtocols EnabledProtocolsResponsePtrInput `pulumi:"enabledProtocols"`
}

func (CommonEncryptionCbcsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonEncryptionCbcsResponse)(nil)).Elem()
}

func (i CommonEncryptionCbcsResponseArgs) ToCommonEncryptionCbcsResponseOutput() CommonEncryptionCbcsResponseOutput {
	return i.ToCommonEncryptionCbcsResponseOutputWithContext(context.Background())
}

func (i CommonEncryptionCbcsResponseArgs) ToCommonEncryptionCbcsResponseOutputWithContext(ctx context.Context) CommonEncryptionCbcsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCbcsResponseOutput)
}

func (i CommonEncryptionCbcsResponseArgs) ToCommonEncryptionCbcsResponsePtrOutput() CommonEncryptionCbcsResponsePtrOutput {
	return i.ToCommonEncryptionCbcsResponsePtrOutputWithContext(context.Background())
}

func (i CommonEncryptionCbcsResponseArgs) ToCommonEncryptionCbcsResponsePtrOutputWithContext(ctx context.Context) CommonEncryptionCbcsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCbcsResponseOutput).ToCommonEncryptionCbcsResponsePtrOutputWithContext(ctx)
}

// CommonEncryptionCbcsResponsePtrInput is an input type that accepts CommonEncryptionCbcsResponseArgs, CommonEncryptionCbcsResponsePtr and CommonEncryptionCbcsResponsePtrOutput values.
// You can construct a concrete instance of `CommonEncryptionCbcsResponsePtrInput` via:
//
//          CommonEncryptionCbcsResponseArgs{...}
//
//  or:
//
//          nil
type CommonEncryptionCbcsResponsePtrInput interface {
	pulumi.Input

	ToCommonEncryptionCbcsResponsePtrOutput() CommonEncryptionCbcsResponsePtrOutput
	ToCommonEncryptionCbcsResponsePtrOutputWithContext(context.Context) CommonEncryptionCbcsResponsePtrOutput
}

type commonEncryptionCbcsResponsePtrType CommonEncryptionCbcsResponseArgs

func CommonEncryptionCbcsResponsePtr(v *CommonEncryptionCbcsResponseArgs) CommonEncryptionCbcsResponsePtrInput {
	return (*commonEncryptionCbcsResponsePtrType)(v)
}

func (*commonEncryptionCbcsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonEncryptionCbcsResponse)(nil)).Elem()
}

func (i *commonEncryptionCbcsResponsePtrType) ToCommonEncryptionCbcsResponsePtrOutput() CommonEncryptionCbcsResponsePtrOutput {
	return i.ToCommonEncryptionCbcsResponsePtrOutputWithContext(context.Background())
}

func (i *commonEncryptionCbcsResponsePtrType) ToCommonEncryptionCbcsResponsePtrOutputWithContext(ctx context.Context) CommonEncryptionCbcsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCbcsResponsePtrOutput)
}

// Class for CommonEncryptionCbcs encryption scheme
type CommonEncryptionCbcsResponseOutput struct{ *pulumi.OutputState }

func (CommonEncryptionCbcsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonEncryptionCbcsResponse)(nil)).Elem()
}

func (o CommonEncryptionCbcsResponseOutput) ToCommonEncryptionCbcsResponseOutput() CommonEncryptionCbcsResponseOutput {
	return o
}

func (o CommonEncryptionCbcsResponseOutput) ToCommonEncryptionCbcsResponseOutputWithContext(ctx context.Context) CommonEncryptionCbcsResponseOutput {
	return o
}

func (o CommonEncryptionCbcsResponseOutput) ToCommonEncryptionCbcsResponsePtrOutput() CommonEncryptionCbcsResponsePtrOutput {
	return o.ToCommonEncryptionCbcsResponsePtrOutputWithContext(context.Background())
}

func (o CommonEncryptionCbcsResponseOutput) ToCommonEncryptionCbcsResponsePtrOutputWithContext(ctx context.Context) CommonEncryptionCbcsResponsePtrOutput {
	return o.ApplyT(func(v CommonEncryptionCbcsResponse) *CommonEncryptionCbcsResponse {
		return &v
	}).(CommonEncryptionCbcsResponsePtrOutput)
}

// Representing which tracks should not be encrypted
func (o CommonEncryptionCbcsResponseOutput) ClearTracks() TrackSelectionResponseArrayOutput {
	return o.ApplyT(func(v CommonEncryptionCbcsResponse) []TrackSelectionResponse { return v.ClearTracks }).(TrackSelectionResponseArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o CommonEncryptionCbcsResponseOutput) ContentKeys() StreamingPolicyContentKeysResponsePtrOutput {
	return o.ApplyT(func(v CommonEncryptionCbcsResponse) *StreamingPolicyContentKeysResponse { return v.ContentKeys }).(StreamingPolicyContentKeysResponsePtrOutput)
}

// Configuration of DRMs for current encryption scheme
func (o CommonEncryptionCbcsResponseOutput) Drm() CbcsDrmConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CommonEncryptionCbcsResponse) *CbcsDrmConfigurationResponse { return v.Drm }).(CbcsDrmConfigurationResponsePtrOutput)
}

// Representing supported protocols
func (o CommonEncryptionCbcsResponseOutput) EnabledProtocols() EnabledProtocolsResponsePtrOutput {
	return o.ApplyT(func(v CommonEncryptionCbcsResponse) *EnabledProtocolsResponse { return v.EnabledProtocols }).(EnabledProtocolsResponsePtrOutput)
}

type CommonEncryptionCbcsResponsePtrOutput struct{ *pulumi.OutputState }

func (CommonEncryptionCbcsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonEncryptionCbcsResponse)(nil)).Elem()
}

func (o CommonEncryptionCbcsResponsePtrOutput) ToCommonEncryptionCbcsResponsePtrOutput() CommonEncryptionCbcsResponsePtrOutput {
	return o
}

func (o CommonEncryptionCbcsResponsePtrOutput) ToCommonEncryptionCbcsResponsePtrOutputWithContext(ctx context.Context) CommonEncryptionCbcsResponsePtrOutput {
	return o
}

func (o CommonEncryptionCbcsResponsePtrOutput) Elem() CommonEncryptionCbcsResponseOutput {
	return o.ApplyT(func(v *CommonEncryptionCbcsResponse) CommonEncryptionCbcsResponse { return *v }).(CommonEncryptionCbcsResponseOutput)
}

// Representing which tracks should not be encrypted
func (o CommonEncryptionCbcsResponsePtrOutput) ClearTracks() TrackSelectionResponseArrayOutput {
	return o.ApplyT(func(v *CommonEncryptionCbcsResponse) []TrackSelectionResponse {
		if v == nil {
			return nil
		}
		return v.ClearTracks
	}).(TrackSelectionResponseArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o CommonEncryptionCbcsResponsePtrOutput) ContentKeys() StreamingPolicyContentKeysResponsePtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCbcsResponse) *StreamingPolicyContentKeysResponse {
		if v == nil {
			return nil
		}
		return v.ContentKeys
	}).(StreamingPolicyContentKeysResponsePtrOutput)
}

// Configuration of DRMs for current encryption scheme
func (o CommonEncryptionCbcsResponsePtrOutput) Drm() CbcsDrmConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCbcsResponse) *CbcsDrmConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Drm
	}).(CbcsDrmConfigurationResponsePtrOutput)
}

// Representing supported protocols
func (o CommonEncryptionCbcsResponsePtrOutput) EnabledProtocols() EnabledProtocolsResponsePtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCbcsResponse) *EnabledProtocolsResponse {
		if v == nil {
			return nil
		}
		return v.EnabledProtocols
	}).(EnabledProtocolsResponsePtrOutput)
}

// Class for envelope encryption scheme
type CommonEncryptionCenc struct {
	// Representing which tracks should not be encrypted
	ClearTracks []TrackSelection `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys *StreamingPolicyContentKeys `pulumi:"contentKeys"`
	// Configuration of DRMs for CommonEncryptionCenc encryption scheme
	Drm *CencDrmConfiguration `pulumi:"drm"`
	// Representing supported protocols
	EnabledProtocols *EnabledProtocols `pulumi:"enabledProtocols"`
}

// CommonEncryptionCencInput is an input type that accepts CommonEncryptionCencArgs and CommonEncryptionCencOutput values.
// You can construct a concrete instance of `CommonEncryptionCencInput` via:
//
//          CommonEncryptionCencArgs{...}
type CommonEncryptionCencInput interface {
	pulumi.Input

	ToCommonEncryptionCencOutput() CommonEncryptionCencOutput
	ToCommonEncryptionCencOutputWithContext(context.Context) CommonEncryptionCencOutput
}

// Class for envelope encryption scheme
type CommonEncryptionCencArgs struct {
	// Representing which tracks should not be encrypted
	ClearTracks TrackSelectionArrayInput `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys StreamingPolicyContentKeysPtrInput `pulumi:"contentKeys"`
	// Configuration of DRMs for CommonEncryptionCenc encryption scheme
	Drm CencDrmConfigurationPtrInput `pulumi:"drm"`
	// Representing supported protocols
	EnabledProtocols EnabledProtocolsPtrInput `pulumi:"enabledProtocols"`
}

func (CommonEncryptionCencArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonEncryptionCenc)(nil)).Elem()
}

func (i CommonEncryptionCencArgs) ToCommonEncryptionCencOutput() CommonEncryptionCencOutput {
	return i.ToCommonEncryptionCencOutputWithContext(context.Background())
}

func (i CommonEncryptionCencArgs) ToCommonEncryptionCencOutputWithContext(ctx context.Context) CommonEncryptionCencOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCencOutput)
}

func (i CommonEncryptionCencArgs) ToCommonEncryptionCencPtrOutput() CommonEncryptionCencPtrOutput {
	return i.ToCommonEncryptionCencPtrOutputWithContext(context.Background())
}

func (i CommonEncryptionCencArgs) ToCommonEncryptionCencPtrOutputWithContext(ctx context.Context) CommonEncryptionCencPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCencOutput).ToCommonEncryptionCencPtrOutputWithContext(ctx)
}

// CommonEncryptionCencPtrInput is an input type that accepts CommonEncryptionCencArgs, CommonEncryptionCencPtr and CommonEncryptionCencPtrOutput values.
// You can construct a concrete instance of `CommonEncryptionCencPtrInput` via:
//
//          CommonEncryptionCencArgs{...}
//
//  or:
//
//          nil
type CommonEncryptionCencPtrInput interface {
	pulumi.Input

	ToCommonEncryptionCencPtrOutput() CommonEncryptionCencPtrOutput
	ToCommonEncryptionCencPtrOutputWithContext(context.Context) CommonEncryptionCencPtrOutput
}

type commonEncryptionCencPtrType CommonEncryptionCencArgs

func CommonEncryptionCencPtr(v *CommonEncryptionCencArgs) CommonEncryptionCencPtrInput {
	return (*commonEncryptionCencPtrType)(v)
}

func (*commonEncryptionCencPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonEncryptionCenc)(nil)).Elem()
}

func (i *commonEncryptionCencPtrType) ToCommonEncryptionCencPtrOutput() CommonEncryptionCencPtrOutput {
	return i.ToCommonEncryptionCencPtrOutputWithContext(context.Background())
}

func (i *commonEncryptionCencPtrType) ToCommonEncryptionCencPtrOutputWithContext(ctx context.Context) CommonEncryptionCencPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCencPtrOutput)
}

// Class for envelope encryption scheme
type CommonEncryptionCencOutput struct{ *pulumi.OutputState }

func (CommonEncryptionCencOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonEncryptionCenc)(nil)).Elem()
}

func (o CommonEncryptionCencOutput) ToCommonEncryptionCencOutput() CommonEncryptionCencOutput {
	return o
}

func (o CommonEncryptionCencOutput) ToCommonEncryptionCencOutputWithContext(ctx context.Context) CommonEncryptionCencOutput {
	return o
}

func (o CommonEncryptionCencOutput) ToCommonEncryptionCencPtrOutput() CommonEncryptionCencPtrOutput {
	return o.ToCommonEncryptionCencPtrOutputWithContext(context.Background())
}

func (o CommonEncryptionCencOutput) ToCommonEncryptionCencPtrOutputWithContext(ctx context.Context) CommonEncryptionCencPtrOutput {
	return o.ApplyT(func(v CommonEncryptionCenc) *CommonEncryptionCenc {
		return &v
	}).(CommonEncryptionCencPtrOutput)
}

// Representing which tracks should not be encrypted
func (o CommonEncryptionCencOutput) ClearTracks() TrackSelectionArrayOutput {
	return o.ApplyT(func(v CommonEncryptionCenc) []TrackSelection { return v.ClearTracks }).(TrackSelectionArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o CommonEncryptionCencOutput) ContentKeys() StreamingPolicyContentKeysPtrOutput {
	return o.ApplyT(func(v CommonEncryptionCenc) *StreamingPolicyContentKeys { return v.ContentKeys }).(StreamingPolicyContentKeysPtrOutput)
}

// Configuration of DRMs for CommonEncryptionCenc encryption scheme
func (o CommonEncryptionCencOutput) Drm() CencDrmConfigurationPtrOutput {
	return o.ApplyT(func(v CommonEncryptionCenc) *CencDrmConfiguration { return v.Drm }).(CencDrmConfigurationPtrOutput)
}

// Representing supported protocols
func (o CommonEncryptionCencOutput) EnabledProtocols() EnabledProtocolsPtrOutput {
	return o.ApplyT(func(v CommonEncryptionCenc) *EnabledProtocols { return v.EnabledProtocols }).(EnabledProtocolsPtrOutput)
}

type CommonEncryptionCencPtrOutput struct{ *pulumi.OutputState }

func (CommonEncryptionCencPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonEncryptionCenc)(nil)).Elem()
}

func (o CommonEncryptionCencPtrOutput) ToCommonEncryptionCencPtrOutput() CommonEncryptionCencPtrOutput {
	return o
}

func (o CommonEncryptionCencPtrOutput) ToCommonEncryptionCencPtrOutputWithContext(ctx context.Context) CommonEncryptionCencPtrOutput {
	return o
}

func (o CommonEncryptionCencPtrOutput) Elem() CommonEncryptionCencOutput {
	return o.ApplyT(func(v *CommonEncryptionCenc) CommonEncryptionCenc { return *v }).(CommonEncryptionCencOutput)
}

// Representing which tracks should not be encrypted
func (o CommonEncryptionCencPtrOutput) ClearTracks() TrackSelectionArrayOutput {
	return o.ApplyT(func(v *CommonEncryptionCenc) []TrackSelection {
		if v == nil {
			return nil
		}
		return v.ClearTracks
	}).(TrackSelectionArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o CommonEncryptionCencPtrOutput) ContentKeys() StreamingPolicyContentKeysPtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCenc) *StreamingPolicyContentKeys {
		if v == nil {
			return nil
		}
		return v.ContentKeys
	}).(StreamingPolicyContentKeysPtrOutput)
}

// Configuration of DRMs for CommonEncryptionCenc encryption scheme
func (o CommonEncryptionCencPtrOutput) Drm() CencDrmConfigurationPtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCenc) *CencDrmConfiguration {
		if v == nil {
			return nil
		}
		return v.Drm
	}).(CencDrmConfigurationPtrOutput)
}

// Representing supported protocols
func (o CommonEncryptionCencPtrOutput) EnabledProtocols() EnabledProtocolsPtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCenc) *EnabledProtocols {
		if v == nil {
			return nil
		}
		return v.EnabledProtocols
	}).(EnabledProtocolsPtrOutput)
}

// Class for envelope encryption scheme
type CommonEncryptionCencResponse struct {
	// Representing which tracks should not be encrypted
	ClearTracks []TrackSelectionResponse `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys *StreamingPolicyContentKeysResponse `pulumi:"contentKeys"`
	// Configuration of DRMs for CommonEncryptionCenc encryption scheme
	Drm *CencDrmConfigurationResponse `pulumi:"drm"`
	// Representing supported protocols
	EnabledProtocols *EnabledProtocolsResponse `pulumi:"enabledProtocols"`
}

// CommonEncryptionCencResponseInput is an input type that accepts CommonEncryptionCencResponseArgs and CommonEncryptionCencResponseOutput values.
// You can construct a concrete instance of `CommonEncryptionCencResponseInput` via:
//
//          CommonEncryptionCencResponseArgs{...}
type CommonEncryptionCencResponseInput interface {
	pulumi.Input

	ToCommonEncryptionCencResponseOutput() CommonEncryptionCencResponseOutput
	ToCommonEncryptionCencResponseOutputWithContext(context.Context) CommonEncryptionCencResponseOutput
}

// Class for envelope encryption scheme
type CommonEncryptionCencResponseArgs struct {
	// Representing which tracks should not be encrypted
	ClearTracks TrackSelectionResponseArrayInput `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys StreamingPolicyContentKeysResponsePtrInput `pulumi:"contentKeys"`
	// Configuration of DRMs for CommonEncryptionCenc encryption scheme
	Drm CencDrmConfigurationResponsePtrInput `pulumi:"drm"`
	// Representing supported protocols
	EnabledProtocols EnabledProtocolsResponsePtrInput `pulumi:"enabledProtocols"`
}

func (CommonEncryptionCencResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonEncryptionCencResponse)(nil)).Elem()
}

func (i CommonEncryptionCencResponseArgs) ToCommonEncryptionCencResponseOutput() CommonEncryptionCencResponseOutput {
	return i.ToCommonEncryptionCencResponseOutputWithContext(context.Background())
}

func (i CommonEncryptionCencResponseArgs) ToCommonEncryptionCencResponseOutputWithContext(ctx context.Context) CommonEncryptionCencResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCencResponseOutput)
}

func (i CommonEncryptionCencResponseArgs) ToCommonEncryptionCencResponsePtrOutput() CommonEncryptionCencResponsePtrOutput {
	return i.ToCommonEncryptionCencResponsePtrOutputWithContext(context.Background())
}

func (i CommonEncryptionCencResponseArgs) ToCommonEncryptionCencResponsePtrOutputWithContext(ctx context.Context) CommonEncryptionCencResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCencResponseOutput).ToCommonEncryptionCencResponsePtrOutputWithContext(ctx)
}

// CommonEncryptionCencResponsePtrInput is an input type that accepts CommonEncryptionCencResponseArgs, CommonEncryptionCencResponsePtr and CommonEncryptionCencResponsePtrOutput values.
// You can construct a concrete instance of `CommonEncryptionCencResponsePtrInput` via:
//
//          CommonEncryptionCencResponseArgs{...}
//
//  or:
//
//          nil
type CommonEncryptionCencResponsePtrInput interface {
	pulumi.Input

	ToCommonEncryptionCencResponsePtrOutput() CommonEncryptionCencResponsePtrOutput
	ToCommonEncryptionCencResponsePtrOutputWithContext(context.Context) CommonEncryptionCencResponsePtrOutput
}

type commonEncryptionCencResponsePtrType CommonEncryptionCencResponseArgs

func CommonEncryptionCencResponsePtr(v *CommonEncryptionCencResponseArgs) CommonEncryptionCencResponsePtrInput {
	return (*commonEncryptionCencResponsePtrType)(v)
}

func (*commonEncryptionCencResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonEncryptionCencResponse)(nil)).Elem()
}

func (i *commonEncryptionCencResponsePtrType) ToCommonEncryptionCencResponsePtrOutput() CommonEncryptionCencResponsePtrOutput {
	return i.ToCommonEncryptionCencResponsePtrOutputWithContext(context.Background())
}

func (i *commonEncryptionCencResponsePtrType) ToCommonEncryptionCencResponsePtrOutputWithContext(ctx context.Context) CommonEncryptionCencResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonEncryptionCencResponsePtrOutput)
}

// Class for envelope encryption scheme
type CommonEncryptionCencResponseOutput struct{ *pulumi.OutputState }

func (CommonEncryptionCencResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonEncryptionCencResponse)(nil)).Elem()
}

func (o CommonEncryptionCencResponseOutput) ToCommonEncryptionCencResponseOutput() CommonEncryptionCencResponseOutput {
	return o
}

func (o CommonEncryptionCencResponseOutput) ToCommonEncryptionCencResponseOutputWithContext(ctx context.Context) CommonEncryptionCencResponseOutput {
	return o
}

func (o CommonEncryptionCencResponseOutput) ToCommonEncryptionCencResponsePtrOutput() CommonEncryptionCencResponsePtrOutput {
	return o.ToCommonEncryptionCencResponsePtrOutputWithContext(context.Background())
}

func (o CommonEncryptionCencResponseOutput) ToCommonEncryptionCencResponsePtrOutputWithContext(ctx context.Context) CommonEncryptionCencResponsePtrOutput {
	return o.ApplyT(func(v CommonEncryptionCencResponse) *CommonEncryptionCencResponse {
		return &v
	}).(CommonEncryptionCencResponsePtrOutput)
}

// Representing which tracks should not be encrypted
func (o CommonEncryptionCencResponseOutput) ClearTracks() TrackSelectionResponseArrayOutput {
	return o.ApplyT(func(v CommonEncryptionCencResponse) []TrackSelectionResponse { return v.ClearTracks }).(TrackSelectionResponseArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o CommonEncryptionCencResponseOutput) ContentKeys() StreamingPolicyContentKeysResponsePtrOutput {
	return o.ApplyT(func(v CommonEncryptionCencResponse) *StreamingPolicyContentKeysResponse { return v.ContentKeys }).(StreamingPolicyContentKeysResponsePtrOutput)
}

// Configuration of DRMs for CommonEncryptionCenc encryption scheme
func (o CommonEncryptionCencResponseOutput) Drm() CencDrmConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CommonEncryptionCencResponse) *CencDrmConfigurationResponse { return v.Drm }).(CencDrmConfigurationResponsePtrOutput)
}

// Representing supported protocols
func (o CommonEncryptionCencResponseOutput) EnabledProtocols() EnabledProtocolsResponsePtrOutput {
	return o.ApplyT(func(v CommonEncryptionCencResponse) *EnabledProtocolsResponse { return v.EnabledProtocols }).(EnabledProtocolsResponsePtrOutput)
}

type CommonEncryptionCencResponsePtrOutput struct{ *pulumi.OutputState }

func (CommonEncryptionCencResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonEncryptionCencResponse)(nil)).Elem()
}

func (o CommonEncryptionCencResponsePtrOutput) ToCommonEncryptionCencResponsePtrOutput() CommonEncryptionCencResponsePtrOutput {
	return o
}

func (o CommonEncryptionCencResponsePtrOutput) ToCommonEncryptionCencResponsePtrOutputWithContext(ctx context.Context) CommonEncryptionCencResponsePtrOutput {
	return o
}

func (o CommonEncryptionCencResponsePtrOutput) Elem() CommonEncryptionCencResponseOutput {
	return o.ApplyT(func(v *CommonEncryptionCencResponse) CommonEncryptionCencResponse { return *v }).(CommonEncryptionCencResponseOutput)
}

// Representing which tracks should not be encrypted
func (o CommonEncryptionCencResponsePtrOutput) ClearTracks() TrackSelectionResponseArrayOutput {
	return o.ApplyT(func(v *CommonEncryptionCencResponse) []TrackSelectionResponse {
		if v == nil {
			return nil
		}
		return v.ClearTracks
	}).(TrackSelectionResponseArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o CommonEncryptionCencResponsePtrOutput) ContentKeys() StreamingPolicyContentKeysResponsePtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCencResponse) *StreamingPolicyContentKeysResponse {
		if v == nil {
			return nil
		}
		return v.ContentKeys
	}).(StreamingPolicyContentKeysResponsePtrOutput)
}

// Configuration of DRMs for CommonEncryptionCenc encryption scheme
func (o CommonEncryptionCencResponsePtrOutput) Drm() CencDrmConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCencResponse) *CencDrmConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Drm
	}).(CencDrmConfigurationResponsePtrOutput)
}

// Representing supported protocols
func (o CommonEncryptionCencResponsePtrOutput) EnabledProtocols() EnabledProtocolsResponsePtrOutput {
	return o.ApplyT(func(v *CommonEncryptionCencResponse) *EnabledProtocolsResponse {
		if v == nil {
			return nil
		}
		return v.EnabledProtocols
	}).(EnabledProtocolsResponsePtrOutput)
}

// A Content Key Policy resource.
type ContentKeyPolicyType struct {
	// The name of the resource
	Name string `pulumi:"name"`
	// The properties of the Content Key Policy.
	Properties ContentKeyPolicyPropertiesResponse `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type string `pulumi:"type"`
}

// ContentKeyPolicyTypeInput is an input type that accepts ContentKeyPolicyTypeArgs and ContentKeyPolicyTypeOutput values.
// You can construct a concrete instance of `ContentKeyPolicyTypeInput` via:
//
//          ContentKeyPolicyTypeArgs{...}
type ContentKeyPolicyTypeInput interface {
	pulumi.Input

	ToContentKeyPolicyTypeOutput() ContentKeyPolicyTypeOutput
	ToContentKeyPolicyTypeOutputWithContext(context.Context) ContentKeyPolicyTypeOutput
}

// A Content Key Policy resource.
type ContentKeyPolicyTypeArgs struct {
	// The name of the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of the Content Key Policy.
	Properties ContentKeyPolicyPropertiesResponseInput `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ContentKeyPolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyType)(nil)).Elem()
}

func (i ContentKeyPolicyTypeArgs) ToContentKeyPolicyTypeOutput() ContentKeyPolicyTypeOutput {
	return i.ToContentKeyPolicyTypeOutputWithContext(context.Background())
}

func (i ContentKeyPolicyTypeArgs) ToContentKeyPolicyTypeOutputWithContext(ctx context.Context) ContentKeyPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyTypeOutput)
}

// A Content Key Policy resource.
type ContentKeyPolicyTypeOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyType)(nil)).Elem()
}

func (o ContentKeyPolicyTypeOutput) ToContentKeyPolicyTypeOutput() ContentKeyPolicyTypeOutput {
	return o
}

func (o ContentKeyPolicyTypeOutput) ToContentKeyPolicyTypeOutputWithContext(ctx context.Context) ContentKeyPolicyTypeOutput {
	return o
}

// The name of the resource
func (o ContentKeyPolicyTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of the Content Key Policy.
func (o ContentKeyPolicyTypeOutput) Properties() ContentKeyPolicyPropertiesResponseOutput {
	return o.ApplyT(func(v ContentKeyPolicyType) ContentKeyPolicyPropertiesResponse { return v.Properties }).(ContentKeyPolicyPropertiesResponseOutput)
}

// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
func (o ContentKeyPolicyTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyType) string { return v.Type }).(pulumi.StringOutput)
}

// Base class for Content Key Policy configuration. A derived class must be used to create a configuration.
type ContentKeyPolicyConfiguration struct {
}

// ContentKeyPolicyConfigurationInput is an input type that accepts ContentKeyPolicyConfigurationArgs and ContentKeyPolicyConfigurationOutput values.
// You can construct a concrete instance of `ContentKeyPolicyConfigurationInput` via:
//
//          ContentKeyPolicyConfigurationArgs{...}
type ContentKeyPolicyConfigurationInput interface {
	pulumi.Input

	ToContentKeyPolicyConfigurationOutput() ContentKeyPolicyConfigurationOutput
	ToContentKeyPolicyConfigurationOutputWithContext(context.Context) ContentKeyPolicyConfigurationOutput
}

// Base class for Content Key Policy configuration. A derived class must be used to create a configuration.
type ContentKeyPolicyConfigurationArgs struct {
}

func (ContentKeyPolicyConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyConfiguration)(nil)).Elem()
}

func (i ContentKeyPolicyConfigurationArgs) ToContentKeyPolicyConfigurationOutput() ContentKeyPolicyConfigurationOutput {
	return i.ToContentKeyPolicyConfigurationOutputWithContext(context.Background())
}

func (i ContentKeyPolicyConfigurationArgs) ToContentKeyPolicyConfigurationOutputWithContext(ctx context.Context) ContentKeyPolicyConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyConfigurationOutput)
}

// Base class for Content Key Policy configuration. A derived class must be used to create a configuration.
type ContentKeyPolicyConfigurationOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyConfiguration)(nil)).Elem()
}

func (o ContentKeyPolicyConfigurationOutput) ToContentKeyPolicyConfigurationOutput() ContentKeyPolicyConfigurationOutput {
	return o
}

func (o ContentKeyPolicyConfigurationOutput) ToContentKeyPolicyConfigurationOutputWithContext(ctx context.Context) ContentKeyPolicyConfigurationOutput {
	return o
}

// Base class for Content Key Policy configuration. A derived class must be used to create a configuration.
type ContentKeyPolicyConfigurationResponse struct {
}

// ContentKeyPolicyConfigurationResponseInput is an input type that accepts ContentKeyPolicyConfigurationResponseArgs and ContentKeyPolicyConfigurationResponseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyConfigurationResponseInput` via:
//
//          ContentKeyPolicyConfigurationResponseArgs{...}
type ContentKeyPolicyConfigurationResponseInput interface {
	pulumi.Input

	ToContentKeyPolicyConfigurationResponseOutput() ContentKeyPolicyConfigurationResponseOutput
	ToContentKeyPolicyConfigurationResponseOutputWithContext(context.Context) ContentKeyPolicyConfigurationResponseOutput
}

// Base class for Content Key Policy configuration. A derived class must be used to create a configuration.
type ContentKeyPolicyConfigurationResponseArgs struct {
}

func (ContentKeyPolicyConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyConfigurationResponse)(nil)).Elem()
}

func (i ContentKeyPolicyConfigurationResponseArgs) ToContentKeyPolicyConfigurationResponseOutput() ContentKeyPolicyConfigurationResponseOutput {
	return i.ToContentKeyPolicyConfigurationResponseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyConfigurationResponseArgs) ToContentKeyPolicyConfigurationResponseOutputWithContext(ctx context.Context) ContentKeyPolicyConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyConfigurationResponseOutput)
}

// Base class for Content Key Policy configuration. A derived class must be used to create a configuration.
type ContentKeyPolicyConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyConfigurationResponse)(nil)).Elem()
}

func (o ContentKeyPolicyConfigurationResponseOutput) ToContentKeyPolicyConfigurationResponseOutput() ContentKeyPolicyConfigurationResponseOutput {
	return o
}

func (o ContentKeyPolicyConfigurationResponseOutput) ToContentKeyPolicyConfigurationResponseOutputWithContext(ctx context.Context) ContentKeyPolicyConfigurationResponseOutput {
	return o
}

// Represents a policy option.
type ContentKeyPolicyOption struct {
	// The key delivery configuration.
	Configuration ContentKeyPolicyConfiguration `pulumi:"configuration"`
	// The Policy Option description.
	Name *string `pulumi:"name"`
	// The requirements that must be met to deliver keys with this configuration
	Restriction ContentKeyPolicyRestriction `pulumi:"restriction"`
}

// ContentKeyPolicyOptionInput is an input type that accepts ContentKeyPolicyOptionArgs and ContentKeyPolicyOptionOutput values.
// You can construct a concrete instance of `ContentKeyPolicyOptionInput` via:
//
//          ContentKeyPolicyOptionArgs{...}
type ContentKeyPolicyOptionInput interface {
	pulumi.Input

	ToContentKeyPolicyOptionOutput() ContentKeyPolicyOptionOutput
	ToContentKeyPolicyOptionOutputWithContext(context.Context) ContentKeyPolicyOptionOutput
}

// Represents a policy option.
type ContentKeyPolicyOptionArgs struct {
	// The key delivery configuration.
	Configuration ContentKeyPolicyConfigurationInput `pulumi:"configuration"`
	// The Policy Option description.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The requirements that must be met to deliver keys with this configuration
	Restriction ContentKeyPolicyRestrictionInput `pulumi:"restriction"`
}

func (ContentKeyPolicyOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyOption)(nil)).Elem()
}

func (i ContentKeyPolicyOptionArgs) ToContentKeyPolicyOptionOutput() ContentKeyPolicyOptionOutput {
	return i.ToContentKeyPolicyOptionOutputWithContext(context.Background())
}

func (i ContentKeyPolicyOptionArgs) ToContentKeyPolicyOptionOutputWithContext(ctx context.Context) ContentKeyPolicyOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyOptionOutput)
}

// ContentKeyPolicyOptionArrayInput is an input type that accepts ContentKeyPolicyOptionArray and ContentKeyPolicyOptionArrayOutput values.
// You can construct a concrete instance of `ContentKeyPolicyOptionArrayInput` via:
//
//          ContentKeyPolicyOptionArray{ ContentKeyPolicyOptionArgs{...} }
type ContentKeyPolicyOptionArrayInput interface {
	pulumi.Input

	ToContentKeyPolicyOptionArrayOutput() ContentKeyPolicyOptionArrayOutput
	ToContentKeyPolicyOptionArrayOutputWithContext(context.Context) ContentKeyPolicyOptionArrayOutput
}

type ContentKeyPolicyOptionArray []ContentKeyPolicyOptionInput

func (ContentKeyPolicyOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyOption)(nil)).Elem()
}

func (i ContentKeyPolicyOptionArray) ToContentKeyPolicyOptionArrayOutput() ContentKeyPolicyOptionArrayOutput {
	return i.ToContentKeyPolicyOptionArrayOutputWithContext(context.Background())
}

func (i ContentKeyPolicyOptionArray) ToContentKeyPolicyOptionArrayOutputWithContext(ctx context.Context) ContentKeyPolicyOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyOptionArrayOutput)
}

// Represents a policy option.
type ContentKeyPolicyOptionOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyOption)(nil)).Elem()
}

func (o ContentKeyPolicyOptionOutput) ToContentKeyPolicyOptionOutput() ContentKeyPolicyOptionOutput {
	return o
}

func (o ContentKeyPolicyOptionOutput) ToContentKeyPolicyOptionOutputWithContext(ctx context.Context) ContentKeyPolicyOptionOutput {
	return o
}

// The key delivery configuration.
func (o ContentKeyPolicyOptionOutput) Configuration() ContentKeyPolicyConfigurationOutput {
	return o.ApplyT(func(v ContentKeyPolicyOption) ContentKeyPolicyConfiguration { return v.Configuration }).(ContentKeyPolicyConfigurationOutput)
}

// The Policy Option description.
func (o ContentKeyPolicyOptionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyOption) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The requirements that must be met to deliver keys with this configuration
func (o ContentKeyPolicyOptionOutput) Restriction() ContentKeyPolicyRestrictionOutput {
	return o.ApplyT(func(v ContentKeyPolicyOption) ContentKeyPolicyRestriction { return v.Restriction }).(ContentKeyPolicyRestrictionOutput)
}

type ContentKeyPolicyOptionArrayOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyOption)(nil)).Elem()
}

func (o ContentKeyPolicyOptionArrayOutput) ToContentKeyPolicyOptionArrayOutput() ContentKeyPolicyOptionArrayOutput {
	return o
}

func (o ContentKeyPolicyOptionArrayOutput) ToContentKeyPolicyOptionArrayOutputWithContext(ctx context.Context) ContentKeyPolicyOptionArrayOutput {
	return o
}

func (o ContentKeyPolicyOptionArrayOutput) Index(i pulumi.IntInput) ContentKeyPolicyOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContentKeyPolicyOption {
		return vs[0].([]ContentKeyPolicyOption)[vs[1].(int)]
	}).(ContentKeyPolicyOptionOutput)
}

// Represents a policy option.
type ContentKeyPolicyOptionResponse struct {
	// The key delivery configuration.
	Configuration ContentKeyPolicyConfigurationResponse `pulumi:"configuration"`
	// The Policy Option description.
	Name *string `pulumi:"name"`
	// The legacy Policy Option ID.
	PolicyOptionId string `pulumi:"policyOptionId"`
	// The requirements that must be met to deliver keys with this configuration
	Restriction ContentKeyPolicyRestrictionResponse `pulumi:"restriction"`
}

// ContentKeyPolicyOptionResponseInput is an input type that accepts ContentKeyPolicyOptionResponseArgs and ContentKeyPolicyOptionResponseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyOptionResponseInput` via:
//
//          ContentKeyPolicyOptionResponseArgs{...}
type ContentKeyPolicyOptionResponseInput interface {
	pulumi.Input

	ToContentKeyPolicyOptionResponseOutput() ContentKeyPolicyOptionResponseOutput
	ToContentKeyPolicyOptionResponseOutputWithContext(context.Context) ContentKeyPolicyOptionResponseOutput
}

// Represents a policy option.
type ContentKeyPolicyOptionResponseArgs struct {
	// The key delivery configuration.
	Configuration ContentKeyPolicyConfigurationResponseInput `pulumi:"configuration"`
	// The Policy Option description.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The legacy Policy Option ID.
	PolicyOptionId pulumi.StringInput `pulumi:"policyOptionId"`
	// The requirements that must be met to deliver keys with this configuration
	Restriction ContentKeyPolicyRestrictionResponseInput `pulumi:"restriction"`
}

func (ContentKeyPolicyOptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyOptionResponse)(nil)).Elem()
}

func (i ContentKeyPolicyOptionResponseArgs) ToContentKeyPolicyOptionResponseOutput() ContentKeyPolicyOptionResponseOutput {
	return i.ToContentKeyPolicyOptionResponseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyOptionResponseArgs) ToContentKeyPolicyOptionResponseOutputWithContext(ctx context.Context) ContentKeyPolicyOptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyOptionResponseOutput)
}

// ContentKeyPolicyOptionResponseArrayInput is an input type that accepts ContentKeyPolicyOptionResponseArray and ContentKeyPolicyOptionResponseArrayOutput values.
// You can construct a concrete instance of `ContentKeyPolicyOptionResponseArrayInput` via:
//
//          ContentKeyPolicyOptionResponseArray{ ContentKeyPolicyOptionResponseArgs{...} }
type ContentKeyPolicyOptionResponseArrayInput interface {
	pulumi.Input

	ToContentKeyPolicyOptionResponseArrayOutput() ContentKeyPolicyOptionResponseArrayOutput
	ToContentKeyPolicyOptionResponseArrayOutputWithContext(context.Context) ContentKeyPolicyOptionResponseArrayOutput
}

type ContentKeyPolicyOptionResponseArray []ContentKeyPolicyOptionResponseInput

func (ContentKeyPolicyOptionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyOptionResponse)(nil)).Elem()
}

func (i ContentKeyPolicyOptionResponseArray) ToContentKeyPolicyOptionResponseArrayOutput() ContentKeyPolicyOptionResponseArrayOutput {
	return i.ToContentKeyPolicyOptionResponseArrayOutputWithContext(context.Background())
}

func (i ContentKeyPolicyOptionResponseArray) ToContentKeyPolicyOptionResponseArrayOutputWithContext(ctx context.Context) ContentKeyPolicyOptionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyOptionResponseArrayOutput)
}

// Represents a policy option.
type ContentKeyPolicyOptionResponseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyOptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyOptionResponse)(nil)).Elem()
}

func (o ContentKeyPolicyOptionResponseOutput) ToContentKeyPolicyOptionResponseOutput() ContentKeyPolicyOptionResponseOutput {
	return o
}

func (o ContentKeyPolicyOptionResponseOutput) ToContentKeyPolicyOptionResponseOutputWithContext(ctx context.Context) ContentKeyPolicyOptionResponseOutput {
	return o
}

// The key delivery configuration.
func (o ContentKeyPolicyOptionResponseOutput) Configuration() ContentKeyPolicyConfigurationResponseOutput {
	return o.ApplyT(func(v ContentKeyPolicyOptionResponse) ContentKeyPolicyConfigurationResponse { return v.Configuration }).(ContentKeyPolicyConfigurationResponseOutput)
}

// The Policy Option description.
func (o ContentKeyPolicyOptionResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyOptionResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The legacy Policy Option ID.
func (o ContentKeyPolicyOptionResponseOutput) PolicyOptionId() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyOptionResponse) string { return v.PolicyOptionId }).(pulumi.StringOutput)
}

// The requirements that must be met to deliver keys with this configuration
func (o ContentKeyPolicyOptionResponseOutput) Restriction() ContentKeyPolicyRestrictionResponseOutput {
	return o.ApplyT(func(v ContentKeyPolicyOptionResponse) ContentKeyPolicyRestrictionResponse { return v.Restriction }).(ContentKeyPolicyRestrictionResponseOutput)
}

type ContentKeyPolicyOptionResponseArrayOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyOptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContentKeyPolicyOptionResponse)(nil)).Elem()
}

func (o ContentKeyPolicyOptionResponseArrayOutput) ToContentKeyPolicyOptionResponseArrayOutput() ContentKeyPolicyOptionResponseArrayOutput {
	return o
}

func (o ContentKeyPolicyOptionResponseArrayOutput) ToContentKeyPolicyOptionResponseArrayOutputWithContext(ctx context.Context) ContentKeyPolicyOptionResponseArrayOutput {
	return o
}

func (o ContentKeyPolicyOptionResponseArrayOutput) Index(i pulumi.IntInput) ContentKeyPolicyOptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContentKeyPolicyOptionResponse {
		return vs[0].([]ContentKeyPolicyOptionResponse)[vs[1].(int)]
	}).(ContentKeyPolicyOptionResponseOutput)
}

// The properties of the Content Key Policy.
type ContentKeyPolicyPropertiesResponse struct {
	// The creation date of the Policy
	Created string `pulumi:"created"`
	// A description for the Policy.
	Description *string `pulumi:"description"`
	// The last modified date of the Policy
	LastModified string `pulumi:"lastModified"`
	// The Key Policy options.
	Options []ContentKeyPolicyOptionResponse `pulumi:"options"`
	// The legacy Policy ID.
	PolicyId string `pulumi:"policyId"`
}

// ContentKeyPolicyPropertiesResponseInput is an input type that accepts ContentKeyPolicyPropertiesResponseArgs and ContentKeyPolicyPropertiesResponseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPropertiesResponseInput` via:
//
//          ContentKeyPolicyPropertiesResponseArgs{...}
type ContentKeyPolicyPropertiesResponseInput interface {
	pulumi.Input

	ToContentKeyPolicyPropertiesResponseOutput() ContentKeyPolicyPropertiesResponseOutput
	ToContentKeyPolicyPropertiesResponseOutputWithContext(context.Context) ContentKeyPolicyPropertiesResponseOutput
}

// The properties of the Content Key Policy.
type ContentKeyPolicyPropertiesResponseArgs struct {
	// The creation date of the Policy
	Created pulumi.StringInput `pulumi:"created"`
	// A description for the Policy.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The last modified date of the Policy
	LastModified pulumi.StringInput `pulumi:"lastModified"`
	// The Key Policy options.
	Options ContentKeyPolicyOptionResponseArrayInput `pulumi:"options"`
	// The legacy Policy ID.
	PolicyId pulumi.StringInput `pulumi:"policyId"`
}

func (ContentKeyPolicyPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPropertiesResponse)(nil)).Elem()
}

func (i ContentKeyPolicyPropertiesResponseArgs) ToContentKeyPolicyPropertiesResponseOutput() ContentKeyPolicyPropertiesResponseOutput {
	return i.ToContentKeyPolicyPropertiesResponseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPropertiesResponseArgs) ToContentKeyPolicyPropertiesResponseOutputWithContext(ctx context.Context) ContentKeyPolicyPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPropertiesResponseOutput)
}

func (i ContentKeyPolicyPropertiesResponseArgs) ToContentKeyPolicyPropertiesResponsePtrOutput() ContentKeyPolicyPropertiesResponsePtrOutput {
	return i.ToContentKeyPolicyPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i ContentKeyPolicyPropertiesResponseArgs) ToContentKeyPolicyPropertiesResponsePtrOutputWithContext(ctx context.Context) ContentKeyPolicyPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPropertiesResponseOutput).ToContentKeyPolicyPropertiesResponsePtrOutputWithContext(ctx)
}

// ContentKeyPolicyPropertiesResponsePtrInput is an input type that accepts ContentKeyPolicyPropertiesResponseArgs, ContentKeyPolicyPropertiesResponsePtr and ContentKeyPolicyPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `ContentKeyPolicyPropertiesResponsePtrInput` via:
//
//          ContentKeyPolicyPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type ContentKeyPolicyPropertiesResponsePtrInput interface {
	pulumi.Input

	ToContentKeyPolicyPropertiesResponsePtrOutput() ContentKeyPolicyPropertiesResponsePtrOutput
	ToContentKeyPolicyPropertiesResponsePtrOutputWithContext(context.Context) ContentKeyPolicyPropertiesResponsePtrOutput
}

type contentKeyPolicyPropertiesResponsePtrType ContentKeyPolicyPropertiesResponseArgs

func ContentKeyPolicyPropertiesResponsePtr(v *ContentKeyPolicyPropertiesResponseArgs) ContentKeyPolicyPropertiesResponsePtrInput {
	return (*contentKeyPolicyPropertiesResponsePtrType)(v)
}

func (*contentKeyPolicyPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPropertiesResponse)(nil)).Elem()
}

func (i *contentKeyPolicyPropertiesResponsePtrType) ToContentKeyPolicyPropertiesResponsePtrOutput() ContentKeyPolicyPropertiesResponsePtrOutput {
	return i.ToContentKeyPolicyPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *contentKeyPolicyPropertiesResponsePtrType) ToContentKeyPolicyPropertiesResponsePtrOutputWithContext(ctx context.Context) ContentKeyPolicyPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyPropertiesResponsePtrOutput)
}

// The properties of the Content Key Policy.
type ContentKeyPolicyPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyPropertiesResponse)(nil)).Elem()
}

func (o ContentKeyPolicyPropertiesResponseOutput) ToContentKeyPolicyPropertiesResponseOutput() ContentKeyPolicyPropertiesResponseOutput {
	return o
}

func (o ContentKeyPolicyPropertiesResponseOutput) ToContentKeyPolicyPropertiesResponseOutputWithContext(ctx context.Context) ContentKeyPolicyPropertiesResponseOutput {
	return o
}

func (o ContentKeyPolicyPropertiesResponseOutput) ToContentKeyPolicyPropertiesResponsePtrOutput() ContentKeyPolicyPropertiesResponsePtrOutput {
	return o.ToContentKeyPolicyPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ContentKeyPolicyPropertiesResponseOutput) ToContentKeyPolicyPropertiesResponsePtrOutputWithContext(ctx context.Context) ContentKeyPolicyPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPropertiesResponse) *ContentKeyPolicyPropertiesResponse {
		return &v
	}).(ContentKeyPolicyPropertiesResponsePtrOutput)
}

// The creation date of the Policy
func (o ContentKeyPolicyPropertiesResponseOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyPropertiesResponse) string { return v.Created }).(pulumi.StringOutput)
}

// A description for the Policy.
func (o ContentKeyPolicyPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentKeyPolicyPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The last modified date of the Policy
func (o ContentKeyPolicyPropertiesResponseOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyPropertiesResponse) string { return v.LastModified }).(pulumi.StringOutput)
}

// The Key Policy options.
func (o ContentKeyPolicyPropertiesResponseOutput) Options() ContentKeyPolicyOptionResponseArrayOutput {
	return o.ApplyT(func(v ContentKeyPolicyPropertiesResponse) []ContentKeyPolicyOptionResponse { return v.Options }).(ContentKeyPolicyOptionResponseArrayOutput)
}

// The legacy Policy ID.
func (o ContentKeyPolicyPropertiesResponseOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v ContentKeyPolicyPropertiesResponse) string { return v.PolicyId }).(pulumi.StringOutput)
}

type ContentKeyPolicyPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentKeyPolicyPropertiesResponse)(nil)).Elem()
}

func (o ContentKeyPolicyPropertiesResponsePtrOutput) ToContentKeyPolicyPropertiesResponsePtrOutput() ContentKeyPolicyPropertiesResponsePtrOutput {
	return o
}

func (o ContentKeyPolicyPropertiesResponsePtrOutput) ToContentKeyPolicyPropertiesResponsePtrOutputWithContext(ctx context.Context) ContentKeyPolicyPropertiesResponsePtrOutput {
	return o
}

func (o ContentKeyPolicyPropertiesResponsePtrOutput) Elem() ContentKeyPolicyPropertiesResponseOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPropertiesResponse) ContentKeyPolicyPropertiesResponse { return *v }).(ContentKeyPolicyPropertiesResponseOutput)
}

// The creation date of the Policy
func (o ContentKeyPolicyPropertiesResponsePtrOutput) Created() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Created
	}).(pulumi.StringPtrOutput)
}

// A description for the Policy.
func (o ContentKeyPolicyPropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The last modified date of the Policy
func (o ContentKeyPolicyPropertiesResponsePtrOutput) LastModified() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastModified
	}).(pulumi.StringPtrOutput)
}

// The Key Policy options.
func (o ContentKeyPolicyPropertiesResponsePtrOutput) Options() ContentKeyPolicyOptionResponseArrayOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPropertiesResponse) []ContentKeyPolicyOptionResponse {
		if v == nil {
			return nil
		}
		return v.Options
	}).(ContentKeyPolicyOptionResponseArrayOutput)
}

// The legacy Policy ID.
func (o ContentKeyPolicyPropertiesResponsePtrOutput) PolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContentKeyPolicyPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PolicyId
	}).(pulumi.StringPtrOutput)
}

// Base class for Content Key Policy restrictions. A derived class must be used to create a restriction.
type ContentKeyPolicyRestriction struct {
}

// ContentKeyPolicyRestrictionInput is an input type that accepts ContentKeyPolicyRestrictionArgs and ContentKeyPolicyRestrictionOutput values.
// You can construct a concrete instance of `ContentKeyPolicyRestrictionInput` via:
//
//          ContentKeyPolicyRestrictionArgs{...}
type ContentKeyPolicyRestrictionInput interface {
	pulumi.Input

	ToContentKeyPolicyRestrictionOutput() ContentKeyPolicyRestrictionOutput
	ToContentKeyPolicyRestrictionOutputWithContext(context.Context) ContentKeyPolicyRestrictionOutput
}

// Base class for Content Key Policy restrictions. A derived class must be used to create a restriction.
type ContentKeyPolicyRestrictionArgs struct {
}

func (ContentKeyPolicyRestrictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyRestriction)(nil)).Elem()
}

func (i ContentKeyPolicyRestrictionArgs) ToContentKeyPolicyRestrictionOutput() ContentKeyPolicyRestrictionOutput {
	return i.ToContentKeyPolicyRestrictionOutputWithContext(context.Background())
}

func (i ContentKeyPolicyRestrictionArgs) ToContentKeyPolicyRestrictionOutputWithContext(ctx context.Context) ContentKeyPolicyRestrictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyRestrictionOutput)
}

// Base class for Content Key Policy restrictions. A derived class must be used to create a restriction.
type ContentKeyPolicyRestrictionOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyRestrictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyRestriction)(nil)).Elem()
}

func (o ContentKeyPolicyRestrictionOutput) ToContentKeyPolicyRestrictionOutput() ContentKeyPolicyRestrictionOutput {
	return o
}

func (o ContentKeyPolicyRestrictionOutput) ToContentKeyPolicyRestrictionOutputWithContext(ctx context.Context) ContentKeyPolicyRestrictionOutput {
	return o
}

// Base class for Content Key Policy restrictions. A derived class must be used to create a restriction.
type ContentKeyPolicyRestrictionResponse struct {
}

// ContentKeyPolicyRestrictionResponseInput is an input type that accepts ContentKeyPolicyRestrictionResponseArgs and ContentKeyPolicyRestrictionResponseOutput values.
// You can construct a concrete instance of `ContentKeyPolicyRestrictionResponseInput` via:
//
//          ContentKeyPolicyRestrictionResponseArgs{...}
type ContentKeyPolicyRestrictionResponseInput interface {
	pulumi.Input

	ToContentKeyPolicyRestrictionResponseOutput() ContentKeyPolicyRestrictionResponseOutput
	ToContentKeyPolicyRestrictionResponseOutputWithContext(context.Context) ContentKeyPolicyRestrictionResponseOutput
}

// Base class for Content Key Policy restrictions. A derived class must be used to create a restriction.
type ContentKeyPolicyRestrictionResponseArgs struct {
}

func (ContentKeyPolicyRestrictionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyRestrictionResponse)(nil)).Elem()
}

func (i ContentKeyPolicyRestrictionResponseArgs) ToContentKeyPolicyRestrictionResponseOutput() ContentKeyPolicyRestrictionResponseOutput {
	return i.ToContentKeyPolicyRestrictionResponseOutputWithContext(context.Background())
}

func (i ContentKeyPolicyRestrictionResponseArgs) ToContentKeyPolicyRestrictionResponseOutputWithContext(ctx context.Context) ContentKeyPolicyRestrictionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentKeyPolicyRestrictionResponseOutput)
}

// Base class for Content Key Policy restrictions. A derived class must be used to create a restriction.
type ContentKeyPolicyRestrictionResponseOutput struct{ *pulumi.OutputState }

func (ContentKeyPolicyRestrictionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentKeyPolicyRestrictionResponse)(nil)).Elem()
}

func (o ContentKeyPolicyRestrictionResponseOutput) ToContentKeyPolicyRestrictionResponseOutput() ContentKeyPolicyRestrictionResponseOutput {
	return o
}

func (o ContentKeyPolicyRestrictionResponseOutput) ToContentKeyPolicyRestrictionResponseOutputWithContext(ctx context.Context) ContentKeyPolicyRestrictionResponseOutput {
	return o
}

// The client access policy.
type CrossSiteAccessPolicies struct {
	// The content of clientaccesspolicy.xml used by Silverlight.
	ClientAccessPolicy *string `pulumi:"clientAccessPolicy"`
	// The content of crossdomain.xml used by Silverlight.
	CrossDomainPolicy *string `pulumi:"crossDomainPolicy"`
}

// CrossSiteAccessPoliciesInput is an input type that accepts CrossSiteAccessPoliciesArgs and CrossSiteAccessPoliciesOutput values.
// You can construct a concrete instance of `CrossSiteAccessPoliciesInput` via:
//
//          CrossSiteAccessPoliciesArgs{...}
type CrossSiteAccessPoliciesInput interface {
	pulumi.Input

	ToCrossSiteAccessPoliciesOutput() CrossSiteAccessPoliciesOutput
	ToCrossSiteAccessPoliciesOutputWithContext(context.Context) CrossSiteAccessPoliciesOutput
}

// The client access policy.
type CrossSiteAccessPoliciesArgs struct {
	// The content of clientaccesspolicy.xml used by Silverlight.
	ClientAccessPolicy pulumi.StringPtrInput `pulumi:"clientAccessPolicy"`
	// The content of crossdomain.xml used by Silverlight.
	CrossDomainPolicy pulumi.StringPtrInput `pulumi:"crossDomainPolicy"`
}

func (CrossSiteAccessPoliciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrossSiteAccessPolicies)(nil)).Elem()
}

func (i CrossSiteAccessPoliciesArgs) ToCrossSiteAccessPoliciesOutput() CrossSiteAccessPoliciesOutput {
	return i.ToCrossSiteAccessPoliciesOutputWithContext(context.Background())
}

func (i CrossSiteAccessPoliciesArgs) ToCrossSiteAccessPoliciesOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossSiteAccessPoliciesOutput)
}

func (i CrossSiteAccessPoliciesArgs) ToCrossSiteAccessPoliciesPtrOutput() CrossSiteAccessPoliciesPtrOutput {
	return i.ToCrossSiteAccessPoliciesPtrOutputWithContext(context.Background())
}

func (i CrossSiteAccessPoliciesArgs) ToCrossSiteAccessPoliciesPtrOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossSiteAccessPoliciesOutput).ToCrossSiteAccessPoliciesPtrOutputWithContext(ctx)
}

// CrossSiteAccessPoliciesPtrInput is an input type that accepts CrossSiteAccessPoliciesArgs, CrossSiteAccessPoliciesPtr and CrossSiteAccessPoliciesPtrOutput values.
// You can construct a concrete instance of `CrossSiteAccessPoliciesPtrInput` via:
//
//          CrossSiteAccessPoliciesArgs{...}
//
//  or:
//
//          nil
type CrossSiteAccessPoliciesPtrInput interface {
	pulumi.Input

	ToCrossSiteAccessPoliciesPtrOutput() CrossSiteAccessPoliciesPtrOutput
	ToCrossSiteAccessPoliciesPtrOutputWithContext(context.Context) CrossSiteAccessPoliciesPtrOutput
}

type crossSiteAccessPoliciesPtrType CrossSiteAccessPoliciesArgs

func CrossSiteAccessPoliciesPtr(v *CrossSiteAccessPoliciesArgs) CrossSiteAccessPoliciesPtrInput {
	return (*crossSiteAccessPoliciesPtrType)(v)
}

func (*crossSiteAccessPoliciesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossSiteAccessPolicies)(nil)).Elem()
}

func (i *crossSiteAccessPoliciesPtrType) ToCrossSiteAccessPoliciesPtrOutput() CrossSiteAccessPoliciesPtrOutput {
	return i.ToCrossSiteAccessPoliciesPtrOutputWithContext(context.Background())
}

func (i *crossSiteAccessPoliciesPtrType) ToCrossSiteAccessPoliciesPtrOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossSiteAccessPoliciesPtrOutput)
}

// The client access policy.
type CrossSiteAccessPoliciesOutput struct{ *pulumi.OutputState }

func (CrossSiteAccessPoliciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrossSiteAccessPolicies)(nil)).Elem()
}

func (o CrossSiteAccessPoliciesOutput) ToCrossSiteAccessPoliciesOutput() CrossSiteAccessPoliciesOutput {
	return o
}

func (o CrossSiteAccessPoliciesOutput) ToCrossSiteAccessPoliciesOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesOutput {
	return o
}

func (o CrossSiteAccessPoliciesOutput) ToCrossSiteAccessPoliciesPtrOutput() CrossSiteAccessPoliciesPtrOutput {
	return o.ToCrossSiteAccessPoliciesPtrOutputWithContext(context.Background())
}

func (o CrossSiteAccessPoliciesOutput) ToCrossSiteAccessPoliciesPtrOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesPtrOutput {
	return o.ApplyT(func(v CrossSiteAccessPolicies) *CrossSiteAccessPolicies {
		return &v
	}).(CrossSiteAccessPoliciesPtrOutput)
}

// The content of clientaccesspolicy.xml used by Silverlight.
func (o CrossSiteAccessPoliciesOutput) ClientAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossSiteAccessPolicies) *string { return v.ClientAccessPolicy }).(pulumi.StringPtrOutput)
}

// The content of crossdomain.xml used by Silverlight.
func (o CrossSiteAccessPoliciesOutput) CrossDomainPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossSiteAccessPolicies) *string { return v.CrossDomainPolicy }).(pulumi.StringPtrOutput)
}

type CrossSiteAccessPoliciesPtrOutput struct{ *pulumi.OutputState }

func (CrossSiteAccessPoliciesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossSiteAccessPolicies)(nil)).Elem()
}

func (o CrossSiteAccessPoliciesPtrOutput) ToCrossSiteAccessPoliciesPtrOutput() CrossSiteAccessPoliciesPtrOutput {
	return o
}

func (o CrossSiteAccessPoliciesPtrOutput) ToCrossSiteAccessPoliciesPtrOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesPtrOutput {
	return o
}

func (o CrossSiteAccessPoliciesPtrOutput) Elem() CrossSiteAccessPoliciesOutput {
	return o.ApplyT(func(v *CrossSiteAccessPolicies) CrossSiteAccessPolicies { return *v }).(CrossSiteAccessPoliciesOutput)
}

// The content of clientaccesspolicy.xml used by Silverlight.
func (o CrossSiteAccessPoliciesPtrOutput) ClientAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossSiteAccessPolicies) *string {
		if v == nil {
			return nil
		}
		return v.ClientAccessPolicy
	}).(pulumi.StringPtrOutput)
}

// The content of crossdomain.xml used by Silverlight.
func (o CrossSiteAccessPoliciesPtrOutput) CrossDomainPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossSiteAccessPolicies) *string {
		if v == nil {
			return nil
		}
		return v.CrossDomainPolicy
	}).(pulumi.StringPtrOutput)
}

// The client access policy.
type CrossSiteAccessPoliciesResponse struct {
	// The content of clientaccesspolicy.xml used by Silverlight.
	ClientAccessPolicy *string `pulumi:"clientAccessPolicy"`
	// The content of crossdomain.xml used by Silverlight.
	CrossDomainPolicy *string `pulumi:"crossDomainPolicy"`
}

// CrossSiteAccessPoliciesResponseInput is an input type that accepts CrossSiteAccessPoliciesResponseArgs and CrossSiteAccessPoliciesResponseOutput values.
// You can construct a concrete instance of `CrossSiteAccessPoliciesResponseInput` via:
//
//          CrossSiteAccessPoliciesResponseArgs{...}
type CrossSiteAccessPoliciesResponseInput interface {
	pulumi.Input

	ToCrossSiteAccessPoliciesResponseOutput() CrossSiteAccessPoliciesResponseOutput
	ToCrossSiteAccessPoliciesResponseOutputWithContext(context.Context) CrossSiteAccessPoliciesResponseOutput
}

// The client access policy.
type CrossSiteAccessPoliciesResponseArgs struct {
	// The content of clientaccesspolicy.xml used by Silverlight.
	ClientAccessPolicy pulumi.StringPtrInput `pulumi:"clientAccessPolicy"`
	// The content of crossdomain.xml used by Silverlight.
	CrossDomainPolicy pulumi.StringPtrInput `pulumi:"crossDomainPolicy"`
}

func (CrossSiteAccessPoliciesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CrossSiteAccessPoliciesResponse)(nil)).Elem()
}

func (i CrossSiteAccessPoliciesResponseArgs) ToCrossSiteAccessPoliciesResponseOutput() CrossSiteAccessPoliciesResponseOutput {
	return i.ToCrossSiteAccessPoliciesResponseOutputWithContext(context.Background())
}

func (i CrossSiteAccessPoliciesResponseArgs) ToCrossSiteAccessPoliciesResponseOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossSiteAccessPoliciesResponseOutput)
}

func (i CrossSiteAccessPoliciesResponseArgs) ToCrossSiteAccessPoliciesResponsePtrOutput() CrossSiteAccessPoliciesResponsePtrOutput {
	return i.ToCrossSiteAccessPoliciesResponsePtrOutputWithContext(context.Background())
}

func (i CrossSiteAccessPoliciesResponseArgs) ToCrossSiteAccessPoliciesResponsePtrOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossSiteAccessPoliciesResponseOutput).ToCrossSiteAccessPoliciesResponsePtrOutputWithContext(ctx)
}

// CrossSiteAccessPoliciesResponsePtrInput is an input type that accepts CrossSiteAccessPoliciesResponseArgs, CrossSiteAccessPoliciesResponsePtr and CrossSiteAccessPoliciesResponsePtrOutput values.
// You can construct a concrete instance of `CrossSiteAccessPoliciesResponsePtrInput` via:
//
//          CrossSiteAccessPoliciesResponseArgs{...}
//
//  or:
//
//          nil
type CrossSiteAccessPoliciesResponsePtrInput interface {
	pulumi.Input

	ToCrossSiteAccessPoliciesResponsePtrOutput() CrossSiteAccessPoliciesResponsePtrOutput
	ToCrossSiteAccessPoliciesResponsePtrOutputWithContext(context.Context) CrossSiteAccessPoliciesResponsePtrOutput
}

type crossSiteAccessPoliciesResponsePtrType CrossSiteAccessPoliciesResponseArgs

func CrossSiteAccessPoliciesResponsePtr(v *CrossSiteAccessPoliciesResponseArgs) CrossSiteAccessPoliciesResponsePtrInput {
	return (*crossSiteAccessPoliciesResponsePtrType)(v)
}

func (*crossSiteAccessPoliciesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossSiteAccessPoliciesResponse)(nil)).Elem()
}

func (i *crossSiteAccessPoliciesResponsePtrType) ToCrossSiteAccessPoliciesResponsePtrOutput() CrossSiteAccessPoliciesResponsePtrOutput {
	return i.ToCrossSiteAccessPoliciesResponsePtrOutputWithContext(context.Background())
}

func (i *crossSiteAccessPoliciesResponsePtrType) ToCrossSiteAccessPoliciesResponsePtrOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CrossSiteAccessPoliciesResponsePtrOutput)
}

// The client access policy.
type CrossSiteAccessPoliciesResponseOutput struct{ *pulumi.OutputState }

func (CrossSiteAccessPoliciesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CrossSiteAccessPoliciesResponse)(nil)).Elem()
}

func (o CrossSiteAccessPoliciesResponseOutput) ToCrossSiteAccessPoliciesResponseOutput() CrossSiteAccessPoliciesResponseOutput {
	return o
}

func (o CrossSiteAccessPoliciesResponseOutput) ToCrossSiteAccessPoliciesResponseOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesResponseOutput {
	return o
}

func (o CrossSiteAccessPoliciesResponseOutput) ToCrossSiteAccessPoliciesResponsePtrOutput() CrossSiteAccessPoliciesResponsePtrOutput {
	return o.ToCrossSiteAccessPoliciesResponsePtrOutputWithContext(context.Background())
}

func (o CrossSiteAccessPoliciesResponseOutput) ToCrossSiteAccessPoliciesResponsePtrOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesResponsePtrOutput {
	return o.ApplyT(func(v CrossSiteAccessPoliciesResponse) *CrossSiteAccessPoliciesResponse {
		return &v
	}).(CrossSiteAccessPoliciesResponsePtrOutput)
}

// The content of clientaccesspolicy.xml used by Silverlight.
func (o CrossSiteAccessPoliciesResponseOutput) ClientAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossSiteAccessPoliciesResponse) *string { return v.ClientAccessPolicy }).(pulumi.StringPtrOutput)
}

// The content of crossdomain.xml used by Silverlight.
func (o CrossSiteAccessPoliciesResponseOutput) CrossDomainPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CrossSiteAccessPoliciesResponse) *string { return v.CrossDomainPolicy }).(pulumi.StringPtrOutput)
}

type CrossSiteAccessPoliciesResponsePtrOutput struct{ *pulumi.OutputState }

func (CrossSiteAccessPoliciesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CrossSiteAccessPoliciesResponse)(nil)).Elem()
}

func (o CrossSiteAccessPoliciesResponsePtrOutput) ToCrossSiteAccessPoliciesResponsePtrOutput() CrossSiteAccessPoliciesResponsePtrOutput {
	return o
}

func (o CrossSiteAccessPoliciesResponsePtrOutput) ToCrossSiteAccessPoliciesResponsePtrOutputWithContext(ctx context.Context) CrossSiteAccessPoliciesResponsePtrOutput {
	return o
}

func (o CrossSiteAccessPoliciesResponsePtrOutput) Elem() CrossSiteAccessPoliciesResponseOutput {
	return o.ApplyT(func(v *CrossSiteAccessPoliciesResponse) CrossSiteAccessPoliciesResponse { return *v }).(CrossSiteAccessPoliciesResponseOutput)
}

// The content of clientaccesspolicy.xml used by Silverlight.
func (o CrossSiteAccessPoliciesResponsePtrOutput) ClientAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossSiteAccessPoliciesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientAccessPolicy
	}).(pulumi.StringPtrOutput)
}

// The content of crossdomain.xml used by Silverlight.
func (o CrossSiteAccessPoliciesResponsePtrOutput) CrossDomainPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CrossSiteAccessPoliciesResponse) *string {
		if v == nil {
			return nil
		}
		return v.CrossDomainPolicy
	}).(pulumi.StringPtrOutput)
}

// Class to specify properties of default content key for each encryption scheme
type DefaultKey struct {
	// Label can be used to specify Content Key when creating a Streaming Locator
	Label *string `pulumi:"label"`
	// Policy used by Default Key
	PolicyName *string `pulumi:"policyName"`
}

// DefaultKeyInput is an input type that accepts DefaultKeyArgs and DefaultKeyOutput values.
// You can construct a concrete instance of `DefaultKeyInput` via:
//
//          DefaultKeyArgs{...}
type DefaultKeyInput interface {
	pulumi.Input

	ToDefaultKeyOutput() DefaultKeyOutput
	ToDefaultKeyOutputWithContext(context.Context) DefaultKeyOutput
}

// Class to specify properties of default content key for each encryption scheme
type DefaultKeyArgs struct {
	// Label can be used to specify Content Key when creating a Streaming Locator
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Policy used by Default Key
	PolicyName pulumi.StringPtrInput `pulumi:"policyName"`
}

func (DefaultKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultKey)(nil)).Elem()
}

func (i DefaultKeyArgs) ToDefaultKeyOutput() DefaultKeyOutput {
	return i.ToDefaultKeyOutputWithContext(context.Background())
}

func (i DefaultKeyArgs) ToDefaultKeyOutputWithContext(ctx context.Context) DefaultKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultKeyOutput)
}

func (i DefaultKeyArgs) ToDefaultKeyPtrOutput() DefaultKeyPtrOutput {
	return i.ToDefaultKeyPtrOutputWithContext(context.Background())
}

func (i DefaultKeyArgs) ToDefaultKeyPtrOutputWithContext(ctx context.Context) DefaultKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultKeyOutput).ToDefaultKeyPtrOutputWithContext(ctx)
}

// DefaultKeyPtrInput is an input type that accepts DefaultKeyArgs, DefaultKeyPtr and DefaultKeyPtrOutput values.
// You can construct a concrete instance of `DefaultKeyPtrInput` via:
//
//          DefaultKeyArgs{...}
//
//  or:
//
//          nil
type DefaultKeyPtrInput interface {
	pulumi.Input

	ToDefaultKeyPtrOutput() DefaultKeyPtrOutput
	ToDefaultKeyPtrOutputWithContext(context.Context) DefaultKeyPtrOutput
}

type defaultKeyPtrType DefaultKeyArgs

func DefaultKeyPtr(v *DefaultKeyArgs) DefaultKeyPtrInput {
	return (*defaultKeyPtrType)(v)
}

func (*defaultKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultKey)(nil)).Elem()
}

func (i *defaultKeyPtrType) ToDefaultKeyPtrOutput() DefaultKeyPtrOutput {
	return i.ToDefaultKeyPtrOutputWithContext(context.Background())
}

func (i *defaultKeyPtrType) ToDefaultKeyPtrOutputWithContext(ctx context.Context) DefaultKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultKeyPtrOutput)
}

// Class to specify properties of default content key for each encryption scheme
type DefaultKeyOutput struct{ *pulumi.OutputState }

func (DefaultKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultKey)(nil)).Elem()
}

func (o DefaultKeyOutput) ToDefaultKeyOutput() DefaultKeyOutput {
	return o
}

func (o DefaultKeyOutput) ToDefaultKeyOutputWithContext(ctx context.Context) DefaultKeyOutput {
	return o
}

func (o DefaultKeyOutput) ToDefaultKeyPtrOutput() DefaultKeyPtrOutput {
	return o.ToDefaultKeyPtrOutputWithContext(context.Background())
}

func (o DefaultKeyOutput) ToDefaultKeyPtrOutputWithContext(ctx context.Context) DefaultKeyPtrOutput {
	return o.ApplyT(func(v DefaultKey) *DefaultKey {
		return &v
	}).(DefaultKeyPtrOutput)
}

// Label can be used to specify Content Key when creating a Streaming Locator
func (o DefaultKeyOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefaultKey) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Policy used by Default Key
func (o DefaultKeyOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefaultKey) *string { return v.PolicyName }).(pulumi.StringPtrOutput)
}

type DefaultKeyPtrOutput struct{ *pulumi.OutputState }

func (DefaultKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultKey)(nil)).Elem()
}

func (o DefaultKeyPtrOutput) ToDefaultKeyPtrOutput() DefaultKeyPtrOutput {
	return o
}

func (o DefaultKeyPtrOutput) ToDefaultKeyPtrOutputWithContext(ctx context.Context) DefaultKeyPtrOutput {
	return o
}

func (o DefaultKeyPtrOutput) Elem() DefaultKeyOutput {
	return o.ApplyT(func(v *DefaultKey) DefaultKey { return *v }).(DefaultKeyOutput)
}

// Label can be used to specify Content Key when creating a Streaming Locator
func (o DefaultKeyPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefaultKey) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// Policy used by Default Key
func (o DefaultKeyPtrOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefaultKey) *string {
		if v == nil {
			return nil
		}
		return v.PolicyName
	}).(pulumi.StringPtrOutput)
}

// Class to specify properties of default content key for each encryption scheme
type DefaultKeyResponse struct {
	// Label can be used to specify Content Key when creating a Streaming Locator
	Label *string `pulumi:"label"`
	// Policy used by Default Key
	PolicyName *string `pulumi:"policyName"`
}

// DefaultKeyResponseInput is an input type that accepts DefaultKeyResponseArgs and DefaultKeyResponseOutput values.
// You can construct a concrete instance of `DefaultKeyResponseInput` via:
//
//          DefaultKeyResponseArgs{...}
type DefaultKeyResponseInput interface {
	pulumi.Input

	ToDefaultKeyResponseOutput() DefaultKeyResponseOutput
	ToDefaultKeyResponseOutputWithContext(context.Context) DefaultKeyResponseOutput
}

// Class to specify properties of default content key for each encryption scheme
type DefaultKeyResponseArgs struct {
	// Label can be used to specify Content Key when creating a Streaming Locator
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Policy used by Default Key
	PolicyName pulumi.StringPtrInput `pulumi:"policyName"`
}

func (DefaultKeyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultKeyResponse)(nil)).Elem()
}

func (i DefaultKeyResponseArgs) ToDefaultKeyResponseOutput() DefaultKeyResponseOutput {
	return i.ToDefaultKeyResponseOutputWithContext(context.Background())
}

func (i DefaultKeyResponseArgs) ToDefaultKeyResponseOutputWithContext(ctx context.Context) DefaultKeyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultKeyResponseOutput)
}

func (i DefaultKeyResponseArgs) ToDefaultKeyResponsePtrOutput() DefaultKeyResponsePtrOutput {
	return i.ToDefaultKeyResponsePtrOutputWithContext(context.Background())
}

func (i DefaultKeyResponseArgs) ToDefaultKeyResponsePtrOutputWithContext(ctx context.Context) DefaultKeyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultKeyResponseOutput).ToDefaultKeyResponsePtrOutputWithContext(ctx)
}

// DefaultKeyResponsePtrInput is an input type that accepts DefaultKeyResponseArgs, DefaultKeyResponsePtr and DefaultKeyResponsePtrOutput values.
// You can construct a concrete instance of `DefaultKeyResponsePtrInput` via:
//
//          DefaultKeyResponseArgs{...}
//
//  or:
//
//          nil
type DefaultKeyResponsePtrInput interface {
	pulumi.Input

	ToDefaultKeyResponsePtrOutput() DefaultKeyResponsePtrOutput
	ToDefaultKeyResponsePtrOutputWithContext(context.Context) DefaultKeyResponsePtrOutput
}

type defaultKeyResponsePtrType DefaultKeyResponseArgs

func DefaultKeyResponsePtr(v *DefaultKeyResponseArgs) DefaultKeyResponsePtrInput {
	return (*defaultKeyResponsePtrType)(v)
}

func (*defaultKeyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultKeyResponse)(nil)).Elem()
}

func (i *defaultKeyResponsePtrType) ToDefaultKeyResponsePtrOutput() DefaultKeyResponsePtrOutput {
	return i.ToDefaultKeyResponsePtrOutputWithContext(context.Background())
}

func (i *defaultKeyResponsePtrType) ToDefaultKeyResponsePtrOutputWithContext(ctx context.Context) DefaultKeyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultKeyResponsePtrOutput)
}

// Class to specify properties of default content key for each encryption scheme
type DefaultKeyResponseOutput struct{ *pulumi.OutputState }

func (DefaultKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultKeyResponse)(nil)).Elem()
}

func (o DefaultKeyResponseOutput) ToDefaultKeyResponseOutput() DefaultKeyResponseOutput {
	return o
}

func (o DefaultKeyResponseOutput) ToDefaultKeyResponseOutputWithContext(ctx context.Context) DefaultKeyResponseOutput {
	return o
}

func (o DefaultKeyResponseOutput) ToDefaultKeyResponsePtrOutput() DefaultKeyResponsePtrOutput {
	return o.ToDefaultKeyResponsePtrOutputWithContext(context.Background())
}

func (o DefaultKeyResponseOutput) ToDefaultKeyResponsePtrOutputWithContext(ctx context.Context) DefaultKeyResponsePtrOutput {
	return o.ApplyT(func(v DefaultKeyResponse) *DefaultKeyResponse {
		return &v
	}).(DefaultKeyResponsePtrOutput)
}

// Label can be used to specify Content Key when creating a Streaming Locator
func (o DefaultKeyResponseOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefaultKeyResponse) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Policy used by Default Key
func (o DefaultKeyResponseOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DefaultKeyResponse) *string { return v.PolicyName }).(pulumi.StringPtrOutput)
}

type DefaultKeyResponsePtrOutput struct{ *pulumi.OutputState }

func (DefaultKeyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultKeyResponse)(nil)).Elem()
}

func (o DefaultKeyResponsePtrOutput) ToDefaultKeyResponsePtrOutput() DefaultKeyResponsePtrOutput {
	return o
}

func (o DefaultKeyResponsePtrOutput) ToDefaultKeyResponsePtrOutputWithContext(ctx context.Context) DefaultKeyResponsePtrOutput {
	return o
}

func (o DefaultKeyResponsePtrOutput) Elem() DefaultKeyResponseOutput {
	return o.ApplyT(func(v *DefaultKeyResponse) DefaultKeyResponse { return *v }).(DefaultKeyResponseOutput)
}

// Label can be used to specify Content Key when creating a Streaming Locator
func (o DefaultKeyResponsePtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefaultKeyResponse) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// Policy used by Default Key
func (o DefaultKeyResponsePtrOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefaultKeyResponse) *string {
		if v == nil {
			return nil
		}
		return v.PolicyName
	}).(pulumi.StringPtrOutput)
}

type EdgeUsageDataCollectionPolicyResponse struct {
	// Usage data collection frequency in ISO 8601 duration format e.g. PT10M , PT5H.
	DataCollectionFrequency *string `pulumi:"dataCollectionFrequency"`
	// Usage data reporting frequency in ISO 8601 duration format e.g. PT10M , PT5H.
	DataReportingFrequency *string `pulumi:"dataReportingFrequency"`
	// Details of Event Hub where the usage will be reported.
	EventHubDetails *EdgeUsageDataEventHubResponse `pulumi:"eventHubDetails"`
	// Maximum time for which the functionality of the device will not be hampered for not reporting the usage data.
	MaxAllowedUnreportedUsageDuration *string `pulumi:"maxAllowedUnreportedUsageDuration"`
}

// EdgeUsageDataCollectionPolicyResponseInput is an input type that accepts EdgeUsageDataCollectionPolicyResponseArgs and EdgeUsageDataCollectionPolicyResponseOutput values.
// You can construct a concrete instance of `EdgeUsageDataCollectionPolicyResponseInput` via:
//
//          EdgeUsageDataCollectionPolicyResponseArgs{...}
type EdgeUsageDataCollectionPolicyResponseInput interface {
	pulumi.Input

	ToEdgeUsageDataCollectionPolicyResponseOutput() EdgeUsageDataCollectionPolicyResponseOutput
	ToEdgeUsageDataCollectionPolicyResponseOutputWithContext(context.Context) EdgeUsageDataCollectionPolicyResponseOutput
}

type EdgeUsageDataCollectionPolicyResponseArgs struct {
	// Usage data collection frequency in ISO 8601 duration format e.g. PT10M , PT5H.
	DataCollectionFrequency pulumi.StringPtrInput `pulumi:"dataCollectionFrequency"`
	// Usage data reporting frequency in ISO 8601 duration format e.g. PT10M , PT5H.
	DataReportingFrequency pulumi.StringPtrInput `pulumi:"dataReportingFrequency"`
	// Details of Event Hub where the usage will be reported.
	EventHubDetails EdgeUsageDataEventHubResponsePtrInput `pulumi:"eventHubDetails"`
	// Maximum time for which the functionality of the device will not be hampered for not reporting the usage data.
	MaxAllowedUnreportedUsageDuration pulumi.StringPtrInput `pulumi:"maxAllowedUnreportedUsageDuration"`
}

func (EdgeUsageDataCollectionPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeUsageDataCollectionPolicyResponse)(nil)).Elem()
}

func (i EdgeUsageDataCollectionPolicyResponseArgs) ToEdgeUsageDataCollectionPolicyResponseOutput() EdgeUsageDataCollectionPolicyResponseOutput {
	return i.ToEdgeUsageDataCollectionPolicyResponseOutputWithContext(context.Background())
}

func (i EdgeUsageDataCollectionPolicyResponseArgs) ToEdgeUsageDataCollectionPolicyResponseOutputWithContext(ctx context.Context) EdgeUsageDataCollectionPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeUsageDataCollectionPolicyResponseOutput)
}

type EdgeUsageDataCollectionPolicyResponseOutput struct{ *pulumi.OutputState }

func (EdgeUsageDataCollectionPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeUsageDataCollectionPolicyResponse)(nil)).Elem()
}

func (o EdgeUsageDataCollectionPolicyResponseOutput) ToEdgeUsageDataCollectionPolicyResponseOutput() EdgeUsageDataCollectionPolicyResponseOutput {
	return o
}

func (o EdgeUsageDataCollectionPolicyResponseOutput) ToEdgeUsageDataCollectionPolicyResponseOutputWithContext(ctx context.Context) EdgeUsageDataCollectionPolicyResponseOutput {
	return o
}

// Usage data collection frequency in ISO 8601 duration format e.g. PT10M , PT5H.
func (o EdgeUsageDataCollectionPolicyResponseOutput) DataCollectionFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeUsageDataCollectionPolicyResponse) *string { return v.DataCollectionFrequency }).(pulumi.StringPtrOutput)
}

// Usage data reporting frequency in ISO 8601 duration format e.g. PT10M , PT5H.
func (o EdgeUsageDataCollectionPolicyResponseOutput) DataReportingFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeUsageDataCollectionPolicyResponse) *string { return v.DataReportingFrequency }).(pulumi.StringPtrOutput)
}

// Details of Event Hub where the usage will be reported.
func (o EdgeUsageDataCollectionPolicyResponseOutput) EventHubDetails() EdgeUsageDataEventHubResponsePtrOutput {
	return o.ApplyT(func(v EdgeUsageDataCollectionPolicyResponse) *EdgeUsageDataEventHubResponse { return v.EventHubDetails }).(EdgeUsageDataEventHubResponsePtrOutput)
}

// Maximum time for which the functionality of the device will not be hampered for not reporting the usage data.
func (o EdgeUsageDataCollectionPolicyResponseOutput) MaxAllowedUnreportedUsageDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeUsageDataCollectionPolicyResponse) *string { return v.MaxAllowedUnreportedUsageDuration }).(pulumi.StringPtrOutput)
}

type EdgeUsageDataEventHubResponse struct {
	// Name of the Event Hub where usage will be reported.
	Name *string `pulumi:"name"`
	// Namespace of the Event Hub where usage will be reported.
	Namespace *string `pulumi:"namespace"`
	// SAS token needed to interact with Event Hub.
	Token *string `pulumi:"token"`
}

// EdgeUsageDataEventHubResponseInput is an input type that accepts EdgeUsageDataEventHubResponseArgs and EdgeUsageDataEventHubResponseOutput values.
// You can construct a concrete instance of `EdgeUsageDataEventHubResponseInput` via:
//
//          EdgeUsageDataEventHubResponseArgs{...}
type EdgeUsageDataEventHubResponseInput interface {
	pulumi.Input

	ToEdgeUsageDataEventHubResponseOutput() EdgeUsageDataEventHubResponseOutput
	ToEdgeUsageDataEventHubResponseOutputWithContext(context.Context) EdgeUsageDataEventHubResponseOutput
}

type EdgeUsageDataEventHubResponseArgs struct {
	// Name of the Event Hub where usage will be reported.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the Event Hub where usage will be reported.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// SAS token needed to interact with Event Hub.
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (EdgeUsageDataEventHubResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeUsageDataEventHubResponse)(nil)).Elem()
}

func (i EdgeUsageDataEventHubResponseArgs) ToEdgeUsageDataEventHubResponseOutput() EdgeUsageDataEventHubResponseOutput {
	return i.ToEdgeUsageDataEventHubResponseOutputWithContext(context.Background())
}

func (i EdgeUsageDataEventHubResponseArgs) ToEdgeUsageDataEventHubResponseOutputWithContext(ctx context.Context) EdgeUsageDataEventHubResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeUsageDataEventHubResponseOutput)
}

func (i EdgeUsageDataEventHubResponseArgs) ToEdgeUsageDataEventHubResponsePtrOutput() EdgeUsageDataEventHubResponsePtrOutput {
	return i.ToEdgeUsageDataEventHubResponsePtrOutputWithContext(context.Background())
}

func (i EdgeUsageDataEventHubResponseArgs) ToEdgeUsageDataEventHubResponsePtrOutputWithContext(ctx context.Context) EdgeUsageDataEventHubResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeUsageDataEventHubResponseOutput).ToEdgeUsageDataEventHubResponsePtrOutputWithContext(ctx)
}

// EdgeUsageDataEventHubResponsePtrInput is an input type that accepts EdgeUsageDataEventHubResponseArgs, EdgeUsageDataEventHubResponsePtr and EdgeUsageDataEventHubResponsePtrOutput values.
// You can construct a concrete instance of `EdgeUsageDataEventHubResponsePtrInput` via:
//
//          EdgeUsageDataEventHubResponseArgs{...}
//
//  or:
//
//          nil
type EdgeUsageDataEventHubResponsePtrInput interface {
	pulumi.Input

	ToEdgeUsageDataEventHubResponsePtrOutput() EdgeUsageDataEventHubResponsePtrOutput
	ToEdgeUsageDataEventHubResponsePtrOutputWithContext(context.Context) EdgeUsageDataEventHubResponsePtrOutput
}

type edgeUsageDataEventHubResponsePtrType EdgeUsageDataEventHubResponseArgs

func EdgeUsageDataEventHubResponsePtr(v *EdgeUsageDataEventHubResponseArgs) EdgeUsageDataEventHubResponsePtrInput {
	return (*edgeUsageDataEventHubResponsePtrType)(v)
}

func (*edgeUsageDataEventHubResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeUsageDataEventHubResponse)(nil)).Elem()
}

func (i *edgeUsageDataEventHubResponsePtrType) ToEdgeUsageDataEventHubResponsePtrOutput() EdgeUsageDataEventHubResponsePtrOutput {
	return i.ToEdgeUsageDataEventHubResponsePtrOutputWithContext(context.Background())
}

func (i *edgeUsageDataEventHubResponsePtrType) ToEdgeUsageDataEventHubResponsePtrOutputWithContext(ctx context.Context) EdgeUsageDataEventHubResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeUsageDataEventHubResponsePtrOutput)
}

type EdgeUsageDataEventHubResponseOutput struct{ *pulumi.OutputState }

func (EdgeUsageDataEventHubResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeUsageDataEventHubResponse)(nil)).Elem()
}

func (o EdgeUsageDataEventHubResponseOutput) ToEdgeUsageDataEventHubResponseOutput() EdgeUsageDataEventHubResponseOutput {
	return o
}

func (o EdgeUsageDataEventHubResponseOutput) ToEdgeUsageDataEventHubResponseOutputWithContext(ctx context.Context) EdgeUsageDataEventHubResponseOutput {
	return o
}

func (o EdgeUsageDataEventHubResponseOutput) ToEdgeUsageDataEventHubResponsePtrOutput() EdgeUsageDataEventHubResponsePtrOutput {
	return o.ToEdgeUsageDataEventHubResponsePtrOutputWithContext(context.Background())
}

func (o EdgeUsageDataEventHubResponseOutput) ToEdgeUsageDataEventHubResponsePtrOutputWithContext(ctx context.Context) EdgeUsageDataEventHubResponsePtrOutput {
	return o.ApplyT(func(v EdgeUsageDataEventHubResponse) *EdgeUsageDataEventHubResponse {
		return &v
	}).(EdgeUsageDataEventHubResponsePtrOutput)
}

// Name of the Event Hub where usage will be reported.
func (o EdgeUsageDataEventHubResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeUsageDataEventHubResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the Event Hub where usage will be reported.
func (o EdgeUsageDataEventHubResponseOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeUsageDataEventHubResponse) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// SAS token needed to interact with Event Hub.
func (o EdgeUsageDataEventHubResponseOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeUsageDataEventHubResponse) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type EdgeUsageDataEventHubResponsePtrOutput struct{ *pulumi.OutputState }

func (EdgeUsageDataEventHubResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeUsageDataEventHubResponse)(nil)).Elem()
}

func (o EdgeUsageDataEventHubResponsePtrOutput) ToEdgeUsageDataEventHubResponsePtrOutput() EdgeUsageDataEventHubResponsePtrOutput {
	return o
}

func (o EdgeUsageDataEventHubResponsePtrOutput) ToEdgeUsageDataEventHubResponsePtrOutputWithContext(ctx context.Context) EdgeUsageDataEventHubResponsePtrOutput {
	return o
}

func (o EdgeUsageDataEventHubResponsePtrOutput) Elem() EdgeUsageDataEventHubResponseOutput {
	return o.ApplyT(func(v *EdgeUsageDataEventHubResponse) EdgeUsageDataEventHubResponse { return *v }).(EdgeUsageDataEventHubResponseOutput)
}

// Name of the Event Hub where usage will be reported.
func (o EdgeUsageDataEventHubResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeUsageDataEventHubResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the Event Hub where usage will be reported.
func (o EdgeUsageDataEventHubResponsePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeUsageDataEventHubResponse) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// SAS token needed to interact with Event Hub.
func (o EdgeUsageDataEventHubResponsePtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeUsageDataEventHubResponse) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

// Class to specify which protocols are enabled
type EnabledProtocols struct {
	// Enable DASH protocol or not
	Dash bool `pulumi:"dash"`
	// Enable Download protocol or not
	Download bool `pulumi:"download"`
	// Enable HLS protocol or not
	Hls bool `pulumi:"hls"`
	// Enable SmoothStreaming protocol or not
	SmoothStreaming bool `pulumi:"smoothStreaming"`
}

// EnabledProtocolsInput is an input type that accepts EnabledProtocolsArgs and EnabledProtocolsOutput values.
// You can construct a concrete instance of `EnabledProtocolsInput` via:
//
//          EnabledProtocolsArgs{...}
type EnabledProtocolsInput interface {
	pulumi.Input

	ToEnabledProtocolsOutput() EnabledProtocolsOutput
	ToEnabledProtocolsOutputWithContext(context.Context) EnabledProtocolsOutput
}

// Class to specify which protocols are enabled
type EnabledProtocolsArgs struct {
	// Enable DASH protocol or not
	Dash pulumi.BoolInput `pulumi:"dash"`
	// Enable Download protocol or not
	Download pulumi.BoolInput `pulumi:"download"`
	// Enable HLS protocol or not
	Hls pulumi.BoolInput `pulumi:"hls"`
	// Enable SmoothStreaming protocol or not
	SmoothStreaming pulumi.BoolInput `pulumi:"smoothStreaming"`
}

func (EnabledProtocolsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnabledProtocols)(nil)).Elem()
}

func (i EnabledProtocolsArgs) ToEnabledProtocolsOutput() EnabledProtocolsOutput {
	return i.ToEnabledProtocolsOutputWithContext(context.Background())
}

func (i EnabledProtocolsArgs) ToEnabledProtocolsOutputWithContext(ctx context.Context) EnabledProtocolsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnabledProtocolsOutput)
}

func (i EnabledProtocolsArgs) ToEnabledProtocolsPtrOutput() EnabledProtocolsPtrOutput {
	return i.ToEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (i EnabledProtocolsArgs) ToEnabledProtocolsPtrOutputWithContext(ctx context.Context) EnabledProtocolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnabledProtocolsOutput).ToEnabledProtocolsPtrOutputWithContext(ctx)
}

// EnabledProtocolsPtrInput is an input type that accepts EnabledProtocolsArgs, EnabledProtocolsPtr and EnabledProtocolsPtrOutput values.
// You can construct a concrete instance of `EnabledProtocolsPtrInput` via:
//
//          EnabledProtocolsArgs{...}
//
//  or:
//
//          nil
type EnabledProtocolsPtrInput interface {
	pulumi.Input

	ToEnabledProtocolsPtrOutput() EnabledProtocolsPtrOutput
	ToEnabledProtocolsPtrOutputWithContext(context.Context) EnabledProtocolsPtrOutput
}

type enabledProtocolsPtrType EnabledProtocolsArgs

func EnabledProtocolsPtr(v *EnabledProtocolsArgs) EnabledProtocolsPtrInput {
	return (*enabledProtocolsPtrType)(v)
}

func (*enabledProtocolsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnabledProtocols)(nil)).Elem()
}

func (i *enabledProtocolsPtrType) ToEnabledProtocolsPtrOutput() EnabledProtocolsPtrOutput {
	return i.ToEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (i *enabledProtocolsPtrType) ToEnabledProtocolsPtrOutputWithContext(ctx context.Context) EnabledProtocolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnabledProtocolsPtrOutput)
}

// Class to specify which protocols are enabled
type EnabledProtocolsOutput struct{ *pulumi.OutputState }

func (EnabledProtocolsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnabledProtocols)(nil)).Elem()
}

func (o EnabledProtocolsOutput) ToEnabledProtocolsOutput() EnabledProtocolsOutput {
	return o
}

func (o EnabledProtocolsOutput) ToEnabledProtocolsOutputWithContext(ctx context.Context) EnabledProtocolsOutput {
	return o
}

func (o EnabledProtocolsOutput) ToEnabledProtocolsPtrOutput() EnabledProtocolsPtrOutput {
	return o.ToEnabledProtocolsPtrOutputWithContext(context.Background())
}

func (o EnabledProtocolsOutput) ToEnabledProtocolsPtrOutputWithContext(ctx context.Context) EnabledProtocolsPtrOutput {
	return o.ApplyT(func(v EnabledProtocols) *EnabledProtocols {
		return &v
	}).(EnabledProtocolsPtrOutput)
}

// Enable DASH protocol or not
func (o EnabledProtocolsOutput) Dash() pulumi.BoolOutput {
	return o.ApplyT(func(v EnabledProtocols) bool { return v.Dash }).(pulumi.BoolOutput)
}

// Enable Download protocol or not
func (o EnabledProtocolsOutput) Download() pulumi.BoolOutput {
	return o.ApplyT(func(v EnabledProtocols) bool { return v.Download }).(pulumi.BoolOutput)
}

// Enable HLS protocol or not
func (o EnabledProtocolsOutput) Hls() pulumi.BoolOutput {
	return o.ApplyT(func(v EnabledProtocols) bool { return v.Hls }).(pulumi.BoolOutput)
}

// Enable SmoothStreaming protocol or not
func (o EnabledProtocolsOutput) SmoothStreaming() pulumi.BoolOutput {
	return o.ApplyT(func(v EnabledProtocols) bool { return v.SmoothStreaming }).(pulumi.BoolOutput)
}

type EnabledProtocolsPtrOutput struct{ *pulumi.OutputState }

func (EnabledProtocolsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnabledProtocols)(nil)).Elem()
}

func (o EnabledProtocolsPtrOutput) ToEnabledProtocolsPtrOutput() EnabledProtocolsPtrOutput {
	return o
}

func (o EnabledProtocolsPtrOutput) ToEnabledProtocolsPtrOutputWithContext(ctx context.Context) EnabledProtocolsPtrOutput {
	return o
}

func (o EnabledProtocolsPtrOutput) Elem() EnabledProtocolsOutput {
	return o.ApplyT(func(v *EnabledProtocols) EnabledProtocols { return *v }).(EnabledProtocolsOutput)
}

// Enable DASH protocol or not
func (o EnabledProtocolsPtrOutput) Dash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return &v.Dash
	}).(pulumi.BoolPtrOutput)
}

// Enable Download protocol or not
func (o EnabledProtocolsPtrOutput) Download() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return &v.Download
	}).(pulumi.BoolPtrOutput)
}

// Enable HLS protocol or not
func (o EnabledProtocolsPtrOutput) Hls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return &v.Hls
	}).(pulumi.BoolPtrOutput)
}

// Enable SmoothStreaming protocol or not
func (o EnabledProtocolsPtrOutput) SmoothStreaming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnabledProtocols) *bool {
		if v == nil {
			return nil
		}
		return &v.SmoothStreaming
	}).(pulumi.BoolPtrOutput)
}

// Class to specify which protocols are enabled
type EnabledProtocolsResponse struct {
	// Enable DASH protocol or not
	Dash bool `pulumi:"dash"`
	// Enable Download protocol or not
	Download bool `pulumi:"download"`
	// Enable HLS protocol or not
	Hls bool `pulumi:"hls"`
	// Enable SmoothStreaming protocol or not
	SmoothStreaming bool `pulumi:"smoothStreaming"`
}

// EnabledProtocolsResponseInput is an input type that accepts EnabledProtocolsResponseArgs and EnabledProtocolsResponseOutput values.
// You can construct a concrete instance of `EnabledProtocolsResponseInput` via:
//
//          EnabledProtocolsResponseArgs{...}
type EnabledProtocolsResponseInput interface {
	pulumi.Input

	ToEnabledProtocolsResponseOutput() EnabledProtocolsResponseOutput
	ToEnabledProtocolsResponseOutputWithContext(context.Context) EnabledProtocolsResponseOutput
}

// Class to specify which protocols are enabled
type EnabledProtocolsResponseArgs struct {
	// Enable DASH protocol or not
	Dash pulumi.BoolInput `pulumi:"dash"`
	// Enable Download protocol or not
	Download pulumi.BoolInput `pulumi:"download"`
	// Enable HLS protocol or not
	Hls pulumi.BoolInput `pulumi:"hls"`
	// Enable SmoothStreaming protocol or not
	SmoothStreaming pulumi.BoolInput `pulumi:"smoothStreaming"`
}

func (EnabledProtocolsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnabledProtocolsResponse)(nil)).Elem()
}

func (i EnabledProtocolsResponseArgs) ToEnabledProtocolsResponseOutput() EnabledProtocolsResponseOutput {
	return i.ToEnabledProtocolsResponseOutputWithContext(context.Background())
}

func (i EnabledProtocolsResponseArgs) ToEnabledProtocolsResponseOutputWithContext(ctx context.Context) EnabledProtocolsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnabledProtocolsResponseOutput)
}

func (i EnabledProtocolsResponseArgs) ToEnabledProtocolsResponsePtrOutput() EnabledProtocolsResponsePtrOutput {
	return i.ToEnabledProtocolsResponsePtrOutputWithContext(context.Background())
}

func (i EnabledProtocolsResponseArgs) ToEnabledProtocolsResponsePtrOutputWithContext(ctx context.Context) EnabledProtocolsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnabledProtocolsResponseOutput).ToEnabledProtocolsResponsePtrOutputWithContext(ctx)
}

// EnabledProtocolsResponsePtrInput is an input type that accepts EnabledProtocolsResponseArgs, EnabledProtocolsResponsePtr and EnabledProtocolsResponsePtrOutput values.
// You can construct a concrete instance of `EnabledProtocolsResponsePtrInput` via:
//
//          EnabledProtocolsResponseArgs{...}
//
//  or:
//
//          nil
type EnabledProtocolsResponsePtrInput interface {
	pulumi.Input

	ToEnabledProtocolsResponsePtrOutput() EnabledProtocolsResponsePtrOutput
	ToEnabledProtocolsResponsePtrOutputWithContext(context.Context) EnabledProtocolsResponsePtrOutput
}

type enabledProtocolsResponsePtrType EnabledProtocolsResponseArgs

func EnabledProtocolsResponsePtr(v *EnabledProtocolsResponseArgs) EnabledProtocolsResponsePtrInput {
	return (*enabledProtocolsResponsePtrType)(v)
}

func (*enabledProtocolsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnabledProtocolsResponse)(nil)).Elem()
}

func (i *enabledProtocolsResponsePtrType) ToEnabledProtocolsResponsePtrOutput() EnabledProtocolsResponsePtrOutput {
	return i.ToEnabledProtocolsResponsePtrOutputWithContext(context.Background())
}

func (i *enabledProtocolsResponsePtrType) ToEnabledProtocolsResponsePtrOutputWithContext(ctx context.Context) EnabledProtocolsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnabledProtocolsResponsePtrOutput)
}

// Class to specify which protocols are enabled
type EnabledProtocolsResponseOutput struct{ *pulumi.OutputState }

func (EnabledProtocolsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnabledProtocolsResponse)(nil)).Elem()
}

func (o EnabledProtocolsResponseOutput) ToEnabledProtocolsResponseOutput() EnabledProtocolsResponseOutput {
	return o
}

func (o EnabledProtocolsResponseOutput) ToEnabledProtocolsResponseOutputWithContext(ctx context.Context) EnabledProtocolsResponseOutput {
	return o
}

func (o EnabledProtocolsResponseOutput) ToEnabledProtocolsResponsePtrOutput() EnabledProtocolsResponsePtrOutput {
	return o.ToEnabledProtocolsResponsePtrOutputWithContext(context.Background())
}

func (o EnabledProtocolsResponseOutput) ToEnabledProtocolsResponsePtrOutputWithContext(ctx context.Context) EnabledProtocolsResponsePtrOutput {
	return o.ApplyT(func(v EnabledProtocolsResponse) *EnabledProtocolsResponse {
		return &v
	}).(EnabledProtocolsResponsePtrOutput)
}

// Enable DASH protocol or not
func (o EnabledProtocolsResponseOutput) Dash() pulumi.BoolOutput {
	return o.ApplyT(func(v EnabledProtocolsResponse) bool { return v.Dash }).(pulumi.BoolOutput)
}

// Enable Download protocol or not
func (o EnabledProtocolsResponseOutput) Download() pulumi.BoolOutput {
	return o.ApplyT(func(v EnabledProtocolsResponse) bool { return v.Download }).(pulumi.BoolOutput)
}

// Enable HLS protocol or not
func (o EnabledProtocolsResponseOutput) Hls() pulumi.BoolOutput {
	return o.ApplyT(func(v EnabledProtocolsResponse) bool { return v.Hls }).(pulumi.BoolOutput)
}

// Enable SmoothStreaming protocol or not
func (o EnabledProtocolsResponseOutput) SmoothStreaming() pulumi.BoolOutput {
	return o.ApplyT(func(v EnabledProtocolsResponse) bool { return v.SmoothStreaming }).(pulumi.BoolOutput)
}

type EnabledProtocolsResponsePtrOutput struct{ *pulumi.OutputState }

func (EnabledProtocolsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnabledProtocolsResponse)(nil)).Elem()
}

func (o EnabledProtocolsResponsePtrOutput) ToEnabledProtocolsResponsePtrOutput() EnabledProtocolsResponsePtrOutput {
	return o
}

func (o EnabledProtocolsResponsePtrOutput) ToEnabledProtocolsResponsePtrOutputWithContext(ctx context.Context) EnabledProtocolsResponsePtrOutput {
	return o
}

func (o EnabledProtocolsResponsePtrOutput) Elem() EnabledProtocolsResponseOutput {
	return o.ApplyT(func(v *EnabledProtocolsResponse) EnabledProtocolsResponse { return *v }).(EnabledProtocolsResponseOutput)
}

// Enable DASH protocol or not
func (o EnabledProtocolsResponsePtrOutput) Dash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnabledProtocolsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Dash
	}).(pulumi.BoolPtrOutput)
}

// Enable Download protocol or not
func (o EnabledProtocolsResponsePtrOutput) Download() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnabledProtocolsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Download
	}).(pulumi.BoolPtrOutput)
}

// Enable HLS protocol or not
func (o EnabledProtocolsResponsePtrOutput) Hls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnabledProtocolsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Hls
	}).(pulumi.BoolPtrOutput)
}

// Enable SmoothStreaming protocol or not
func (o EnabledProtocolsResponsePtrOutput) SmoothStreaming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnabledProtocolsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.SmoothStreaming
	}).(pulumi.BoolPtrOutput)
}

// Class for EnvelopeEncryption encryption scheme
type EnvelopeEncryption struct {
	// Representing which tracks should not be encrypted
	ClearTracks []TrackSelection `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys *StreamingPolicyContentKeys `pulumi:"contentKeys"`
	// Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomKeyAcquisitionUrlTemplate *string `pulumi:"customKeyAcquisitionUrlTemplate"`
	// Representing supported protocols
	EnabledProtocols *EnabledProtocols `pulumi:"enabledProtocols"`
}

// EnvelopeEncryptionInput is an input type that accepts EnvelopeEncryptionArgs and EnvelopeEncryptionOutput values.
// You can construct a concrete instance of `EnvelopeEncryptionInput` via:
//
//          EnvelopeEncryptionArgs{...}
type EnvelopeEncryptionInput interface {
	pulumi.Input

	ToEnvelopeEncryptionOutput() EnvelopeEncryptionOutput
	ToEnvelopeEncryptionOutputWithContext(context.Context) EnvelopeEncryptionOutput
}

// Class for EnvelopeEncryption encryption scheme
type EnvelopeEncryptionArgs struct {
	// Representing which tracks should not be encrypted
	ClearTracks TrackSelectionArrayInput `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys StreamingPolicyContentKeysPtrInput `pulumi:"contentKeys"`
	// Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomKeyAcquisitionUrlTemplate pulumi.StringPtrInput `pulumi:"customKeyAcquisitionUrlTemplate"`
	// Representing supported protocols
	EnabledProtocols EnabledProtocolsPtrInput `pulumi:"enabledProtocols"`
}

func (EnvelopeEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvelopeEncryption)(nil)).Elem()
}

func (i EnvelopeEncryptionArgs) ToEnvelopeEncryptionOutput() EnvelopeEncryptionOutput {
	return i.ToEnvelopeEncryptionOutputWithContext(context.Background())
}

func (i EnvelopeEncryptionArgs) ToEnvelopeEncryptionOutputWithContext(ctx context.Context) EnvelopeEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeEncryptionOutput)
}

func (i EnvelopeEncryptionArgs) ToEnvelopeEncryptionPtrOutput() EnvelopeEncryptionPtrOutput {
	return i.ToEnvelopeEncryptionPtrOutputWithContext(context.Background())
}

func (i EnvelopeEncryptionArgs) ToEnvelopeEncryptionPtrOutputWithContext(ctx context.Context) EnvelopeEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeEncryptionOutput).ToEnvelopeEncryptionPtrOutputWithContext(ctx)
}

// EnvelopeEncryptionPtrInput is an input type that accepts EnvelopeEncryptionArgs, EnvelopeEncryptionPtr and EnvelopeEncryptionPtrOutput values.
// You can construct a concrete instance of `EnvelopeEncryptionPtrInput` via:
//
//          EnvelopeEncryptionArgs{...}
//
//  or:
//
//          nil
type EnvelopeEncryptionPtrInput interface {
	pulumi.Input

	ToEnvelopeEncryptionPtrOutput() EnvelopeEncryptionPtrOutput
	ToEnvelopeEncryptionPtrOutputWithContext(context.Context) EnvelopeEncryptionPtrOutput
}

type envelopeEncryptionPtrType EnvelopeEncryptionArgs

func EnvelopeEncryptionPtr(v *EnvelopeEncryptionArgs) EnvelopeEncryptionPtrInput {
	return (*envelopeEncryptionPtrType)(v)
}

func (*envelopeEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvelopeEncryption)(nil)).Elem()
}

func (i *envelopeEncryptionPtrType) ToEnvelopeEncryptionPtrOutput() EnvelopeEncryptionPtrOutput {
	return i.ToEnvelopeEncryptionPtrOutputWithContext(context.Background())
}

func (i *envelopeEncryptionPtrType) ToEnvelopeEncryptionPtrOutputWithContext(ctx context.Context) EnvelopeEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeEncryptionPtrOutput)
}

// Class for EnvelopeEncryption encryption scheme
type EnvelopeEncryptionOutput struct{ *pulumi.OutputState }

func (EnvelopeEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvelopeEncryption)(nil)).Elem()
}

func (o EnvelopeEncryptionOutput) ToEnvelopeEncryptionOutput() EnvelopeEncryptionOutput {
	return o
}

func (o EnvelopeEncryptionOutput) ToEnvelopeEncryptionOutputWithContext(ctx context.Context) EnvelopeEncryptionOutput {
	return o
}

func (o EnvelopeEncryptionOutput) ToEnvelopeEncryptionPtrOutput() EnvelopeEncryptionPtrOutput {
	return o.ToEnvelopeEncryptionPtrOutputWithContext(context.Background())
}

func (o EnvelopeEncryptionOutput) ToEnvelopeEncryptionPtrOutputWithContext(ctx context.Context) EnvelopeEncryptionPtrOutput {
	return o.ApplyT(func(v EnvelopeEncryption) *EnvelopeEncryption {
		return &v
	}).(EnvelopeEncryptionPtrOutput)
}

// Representing which tracks should not be encrypted
func (o EnvelopeEncryptionOutput) ClearTracks() TrackSelectionArrayOutput {
	return o.ApplyT(func(v EnvelopeEncryption) []TrackSelection { return v.ClearTracks }).(TrackSelectionArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o EnvelopeEncryptionOutput) ContentKeys() StreamingPolicyContentKeysPtrOutput {
	return o.ApplyT(func(v EnvelopeEncryption) *StreamingPolicyContentKeys { return v.ContentKeys }).(StreamingPolicyContentKeysPtrOutput)
}

// Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o EnvelopeEncryptionOutput) CustomKeyAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvelopeEncryption) *string { return v.CustomKeyAcquisitionUrlTemplate }).(pulumi.StringPtrOutput)
}

// Representing supported protocols
func (o EnvelopeEncryptionOutput) EnabledProtocols() EnabledProtocolsPtrOutput {
	return o.ApplyT(func(v EnvelopeEncryption) *EnabledProtocols { return v.EnabledProtocols }).(EnabledProtocolsPtrOutput)
}

type EnvelopeEncryptionPtrOutput struct{ *pulumi.OutputState }

func (EnvelopeEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvelopeEncryption)(nil)).Elem()
}

func (o EnvelopeEncryptionPtrOutput) ToEnvelopeEncryptionPtrOutput() EnvelopeEncryptionPtrOutput {
	return o
}

func (o EnvelopeEncryptionPtrOutput) ToEnvelopeEncryptionPtrOutputWithContext(ctx context.Context) EnvelopeEncryptionPtrOutput {
	return o
}

func (o EnvelopeEncryptionPtrOutput) Elem() EnvelopeEncryptionOutput {
	return o.ApplyT(func(v *EnvelopeEncryption) EnvelopeEncryption { return *v }).(EnvelopeEncryptionOutput)
}

// Representing which tracks should not be encrypted
func (o EnvelopeEncryptionPtrOutput) ClearTracks() TrackSelectionArrayOutput {
	return o.ApplyT(func(v *EnvelopeEncryption) []TrackSelection {
		if v == nil {
			return nil
		}
		return v.ClearTracks
	}).(TrackSelectionArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o EnvelopeEncryptionPtrOutput) ContentKeys() StreamingPolicyContentKeysPtrOutput {
	return o.ApplyT(func(v *EnvelopeEncryption) *StreamingPolicyContentKeys {
		if v == nil {
			return nil
		}
		return v.ContentKeys
	}).(StreamingPolicyContentKeysPtrOutput)
}

// Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o EnvelopeEncryptionPtrOutput) CustomKeyAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvelopeEncryption) *string {
		if v == nil {
			return nil
		}
		return v.CustomKeyAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// Representing supported protocols
func (o EnvelopeEncryptionPtrOutput) EnabledProtocols() EnabledProtocolsPtrOutput {
	return o.ApplyT(func(v *EnvelopeEncryption) *EnabledProtocols {
		if v == nil {
			return nil
		}
		return v.EnabledProtocols
	}).(EnabledProtocolsPtrOutput)
}

// Class for EnvelopeEncryption encryption scheme
type EnvelopeEncryptionResponse struct {
	// Representing which tracks should not be encrypted
	ClearTracks []TrackSelectionResponse `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys *StreamingPolicyContentKeysResponse `pulumi:"contentKeys"`
	// Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomKeyAcquisitionUrlTemplate *string `pulumi:"customKeyAcquisitionUrlTemplate"`
	// Representing supported protocols
	EnabledProtocols *EnabledProtocolsResponse `pulumi:"enabledProtocols"`
}

// EnvelopeEncryptionResponseInput is an input type that accepts EnvelopeEncryptionResponseArgs and EnvelopeEncryptionResponseOutput values.
// You can construct a concrete instance of `EnvelopeEncryptionResponseInput` via:
//
//          EnvelopeEncryptionResponseArgs{...}
type EnvelopeEncryptionResponseInput interface {
	pulumi.Input

	ToEnvelopeEncryptionResponseOutput() EnvelopeEncryptionResponseOutput
	ToEnvelopeEncryptionResponseOutputWithContext(context.Context) EnvelopeEncryptionResponseOutput
}

// Class for EnvelopeEncryption encryption scheme
type EnvelopeEncryptionResponseArgs struct {
	// Representing which tracks should not be encrypted
	ClearTracks TrackSelectionResponseArrayInput `pulumi:"clearTracks"`
	// Representing default content key for each encryption scheme and separate content keys for specific tracks
	ContentKeys StreamingPolicyContentKeysResponsePtrInput `pulumi:"contentKeys"`
	// Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomKeyAcquisitionUrlTemplate pulumi.StringPtrInput `pulumi:"customKeyAcquisitionUrlTemplate"`
	// Representing supported protocols
	EnabledProtocols EnabledProtocolsResponsePtrInput `pulumi:"enabledProtocols"`
}

func (EnvelopeEncryptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvelopeEncryptionResponse)(nil)).Elem()
}

func (i EnvelopeEncryptionResponseArgs) ToEnvelopeEncryptionResponseOutput() EnvelopeEncryptionResponseOutput {
	return i.ToEnvelopeEncryptionResponseOutputWithContext(context.Background())
}

func (i EnvelopeEncryptionResponseArgs) ToEnvelopeEncryptionResponseOutputWithContext(ctx context.Context) EnvelopeEncryptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeEncryptionResponseOutput)
}

func (i EnvelopeEncryptionResponseArgs) ToEnvelopeEncryptionResponsePtrOutput() EnvelopeEncryptionResponsePtrOutput {
	return i.ToEnvelopeEncryptionResponsePtrOutputWithContext(context.Background())
}

func (i EnvelopeEncryptionResponseArgs) ToEnvelopeEncryptionResponsePtrOutputWithContext(ctx context.Context) EnvelopeEncryptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeEncryptionResponseOutput).ToEnvelopeEncryptionResponsePtrOutputWithContext(ctx)
}

// EnvelopeEncryptionResponsePtrInput is an input type that accepts EnvelopeEncryptionResponseArgs, EnvelopeEncryptionResponsePtr and EnvelopeEncryptionResponsePtrOutput values.
// You can construct a concrete instance of `EnvelopeEncryptionResponsePtrInput` via:
//
//          EnvelopeEncryptionResponseArgs{...}
//
//  or:
//
//          nil
type EnvelopeEncryptionResponsePtrInput interface {
	pulumi.Input

	ToEnvelopeEncryptionResponsePtrOutput() EnvelopeEncryptionResponsePtrOutput
	ToEnvelopeEncryptionResponsePtrOutputWithContext(context.Context) EnvelopeEncryptionResponsePtrOutput
}

type envelopeEncryptionResponsePtrType EnvelopeEncryptionResponseArgs

func EnvelopeEncryptionResponsePtr(v *EnvelopeEncryptionResponseArgs) EnvelopeEncryptionResponsePtrInput {
	return (*envelopeEncryptionResponsePtrType)(v)
}

func (*envelopeEncryptionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvelopeEncryptionResponse)(nil)).Elem()
}

func (i *envelopeEncryptionResponsePtrType) ToEnvelopeEncryptionResponsePtrOutput() EnvelopeEncryptionResponsePtrOutput {
	return i.ToEnvelopeEncryptionResponsePtrOutputWithContext(context.Background())
}

func (i *envelopeEncryptionResponsePtrType) ToEnvelopeEncryptionResponsePtrOutputWithContext(ctx context.Context) EnvelopeEncryptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvelopeEncryptionResponsePtrOutput)
}

// Class for EnvelopeEncryption encryption scheme
type EnvelopeEncryptionResponseOutput struct{ *pulumi.OutputState }

func (EnvelopeEncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvelopeEncryptionResponse)(nil)).Elem()
}

func (o EnvelopeEncryptionResponseOutput) ToEnvelopeEncryptionResponseOutput() EnvelopeEncryptionResponseOutput {
	return o
}

func (o EnvelopeEncryptionResponseOutput) ToEnvelopeEncryptionResponseOutputWithContext(ctx context.Context) EnvelopeEncryptionResponseOutput {
	return o
}

func (o EnvelopeEncryptionResponseOutput) ToEnvelopeEncryptionResponsePtrOutput() EnvelopeEncryptionResponsePtrOutput {
	return o.ToEnvelopeEncryptionResponsePtrOutputWithContext(context.Background())
}

func (o EnvelopeEncryptionResponseOutput) ToEnvelopeEncryptionResponsePtrOutputWithContext(ctx context.Context) EnvelopeEncryptionResponsePtrOutput {
	return o.ApplyT(func(v EnvelopeEncryptionResponse) *EnvelopeEncryptionResponse {
		return &v
	}).(EnvelopeEncryptionResponsePtrOutput)
}

// Representing which tracks should not be encrypted
func (o EnvelopeEncryptionResponseOutput) ClearTracks() TrackSelectionResponseArrayOutput {
	return o.ApplyT(func(v EnvelopeEncryptionResponse) []TrackSelectionResponse { return v.ClearTracks }).(TrackSelectionResponseArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o EnvelopeEncryptionResponseOutput) ContentKeys() StreamingPolicyContentKeysResponsePtrOutput {
	return o.ApplyT(func(v EnvelopeEncryptionResponse) *StreamingPolicyContentKeysResponse { return v.ContentKeys }).(StreamingPolicyContentKeysResponsePtrOutput)
}

// Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o EnvelopeEncryptionResponseOutput) CustomKeyAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvelopeEncryptionResponse) *string { return v.CustomKeyAcquisitionUrlTemplate }).(pulumi.StringPtrOutput)
}

// Representing supported protocols
func (o EnvelopeEncryptionResponseOutput) EnabledProtocols() EnabledProtocolsResponsePtrOutput {
	return o.ApplyT(func(v EnvelopeEncryptionResponse) *EnabledProtocolsResponse { return v.EnabledProtocols }).(EnabledProtocolsResponsePtrOutput)
}

type EnvelopeEncryptionResponsePtrOutput struct{ *pulumi.OutputState }

func (EnvelopeEncryptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvelopeEncryptionResponse)(nil)).Elem()
}

func (o EnvelopeEncryptionResponsePtrOutput) ToEnvelopeEncryptionResponsePtrOutput() EnvelopeEncryptionResponsePtrOutput {
	return o
}

func (o EnvelopeEncryptionResponsePtrOutput) ToEnvelopeEncryptionResponsePtrOutputWithContext(ctx context.Context) EnvelopeEncryptionResponsePtrOutput {
	return o
}

func (o EnvelopeEncryptionResponsePtrOutput) Elem() EnvelopeEncryptionResponseOutput {
	return o.ApplyT(func(v *EnvelopeEncryptionResponse) EnvelopeEncryptionResponse { return *v }).(EnvelopeEncryptionResponseOutput)
}

// Representing which tracks should not be encrypted
func (o EnvelopeEncryptionResponsePtrOutput) ClearTracks() TrackSelectionResponseArrayOutput {
	return o.ApplyT(func(v *EnvelopeEncryptionResponse) []TrackSelectionResponse {
		if v == nil {
			return nil
		}
		return v.ClearTracks
	}).(TrackSelectionResponseArrayOutput)
}

// Representing default content key for each encryption scheme and separate content keys for specific tracks
func (o EnvelopeEncryptionResponsePtrOutput) ContentKeys() StreamingPolicyContentKeysResponsePtrOutput {
	return o.ApplyT(func(v *EnvelopeEncryptionResponse) *StreamingPolicyContentKeysResponse {
		if v == nil {
			return nil
		}
		return v.ContentKeys
	}).(StreamingPolicyContentKeysResponsePtrOutput)
}

// Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o EnvelopeEncryptionResponsePtrOutput) CustomKeyAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvelopeEncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomKeyAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// Representing supported protocols
func (o EnvelopeEncryptionResponsePtrOutput) EnabledProtocols() EnabledProtocolsResponsePtrOutput {
	return o.ApplyT(func(v *EnvelopeEncryptionResponse) *EnabledProtocolsResponse {
		if v == nil {
			return nil
		}
		return v.EnabledProtocols
	}).(EnabledProtocolsResponsePtrOutput)
}

// The class to specify one track property condition.
type FilterTrackPropertyCondition struct {
	// The track property condition operation.
	Operation string `pulumi:"operation"`
	// The track property type.
	Property string `pulumi:"property"`
	// The track property value.
	Value string `pulumi:"value"`
}

// FilterTrackPropertyConditionInput is an input type that accepts FilterTrackPropertyConditionArgs and FilterTrackPropertyConditionOutput values.
// You can construct a concrete instance of `FilterTrackPropertyConditionInput` via:
//
//          FilterTrackPropertyConditionArgs{...}
type FilterTrackPropertyConditionInput interface {
	pulumi.Input

	ToFilterTrackPropertyConditionOutput() FilterTrackPropertyConditionOutput
	ToFilterTrackPropertyConditionOutputWithContext(context.Context) FilterTrackPropertyConditionOutput
}

// The class to specify one track property condition.
type FilterTrackPropertyConditionArgs struct {
	// The track property condition operation.
	Operation pulumi.StringInput `pulumi:"operation"`
	// The track property type.
	Property pulumi.StringInput `pulumi:"property"`
	// The track property value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (FilterTrackPropertyConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterTrackPropertyCondition)(nil)).Elem()
}

func (i FilterTrackPropertyConditionArgs) ToFilterTrackPropertyConditionOutput() FilterTrackPropertyConditionOutput {
	return i.ToFilterTrackPropertyConditionOutputWithContext(context.Background())
}

func (i FilterTrackPropertyConditionArgs) ToFilterTrackPropertyConditionOutputWithContext(ctx context.Context) FilterTrackPropertyConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterTrackPropertyConditionOutput)
}

// FilterTrackPropertyConditionArrayInput is an input type that accepts FilterTrackPropertyConditionArray and FilterTrackPropertyConditionArrayOutput values.
// You can construct a concrete instance of `FilterTrackPropertyConditionArrayInput` via:
//
//          FilterTrackPropertyConditionArray{ FilterTrackPropertyConditionArgs{...} }
type FilterTrackPropertyConditionArrayInput interface {
	pulumi.Input

	ToFilterTrackPropertyConditionArrayOutput() FilterTrackPropertyConditionArrayOutput
	ToFilterTrackPropertyConditionArrayOutputWithContext(context.Context) FilterTrackPropertyConditionArrayOutput
}

type FilterTrackPropertyConditionArray []FilterTrackPropertyConditionInput

func (FilterTrackPropertyConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilterTrackPropertyCondition)(nil)).Elem()
}

func (i FilterTrackPropertyConditionArray) ToFilterTrackPropertyConditionArrayOutput() FilterTrackPropertyConditionArrayOutput {
	return i.ToFilterTrackPropertyConditionArrayOutputWithContext(context.Background())
}

func (i FilterTrackPropertyConditionArray) ToFilterTrackPropertyConditionArrayOutputWithContext(ctx context.Context) FilterTrackPropertyConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterTrackPropertyConditionArrayOutput)
}

// The class to specify one track property condition.
type FilterTrackPropertyConditionOutput struct{ *pulumi.OutputState }

func (FilterTrackPropertyConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterTrackPropertyCondition)(nil)).Elem()
}

func (o FilterTrackPropertyConditionOutput) ToFilterTrackPropertyConditionOutput() FilterTrackPropertyConditionOutput {
	return o
}

func (o FilterTrackPropertyConditionOutput) ToFilterTrackPropertyConditionOutputWithContext(ctx context.Context) FilterTrackPropertyConditionOutput {
	return o
}

// The track property condition operation.
func (o FilterTrackPropertyConditionOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v FilterTrackPropertyCondition) string { return v.Operation }).(pulumi.StringOutput)
}

// The track property type.
func (o FilterTrackPropertyConditionOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v FilterTrackPropertyCondition) string { return v.Property }).(pulumi.StringOutput)
}

// The track property value.
func (o FilterTrackPropertyConditionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v FilterTrackPropertyCondition) string { return v.Value }).(pulumi.StringOutput)
}

type FilterTrackPropertyConditionArrayOutput struct{ *pulumi.OutputState }

func (FilterTrackPropertyConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilterTrackPropertyCondition)(nil)).Elem()
}

func (o FilterTrackPropertyConditionArrayOutput) ToFilterTrackPropertyConditionArrayOutput() FilterTrackPropertyConditionArrayOutput {
	return o
}

func (o FilterTrackPropertyConditionArrayOutput) ToFilterTrackPropertyConditionArrayOutputWithContext(ctx context.Context) FilterTrackPropertyConditionArrayOutput {
	return o
}

func (o FilterTrackPropertyConditionArrayOutput) Index(i pulumi.IntInput) FilterTrackPropertyConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FilterTrackPropertyCondition {
		return vs[0].([]FilterTrackPropertyCondition)[vs[1].(int)]
	}).(FilterTrackPropertyConditionOutput)
}

// The class to specify one track property condition.
type FilterTrackPropertyConditionResponse struct {
	// The track property condition operation.
	Operation string `pulumi:"operation"`
	// The track property type.
	Property string `pulumi:"property"`
	// The track property value.
	Value string `pulumi:"value"`
}

// FilterTrackPropertyConditionResponseInput is an input type that accepts FilterTrackPropertyConditionResponseArgs and FilterTrackPropertyConditionResponseOutput values.
// You can construct a concrete instance of `FilterTrackPropertyConditionResponseInput` via:
//
//          FilterTrackPropertyConditionResponseArgs{...}
type FilterTrackPropertyConditionResponseInput interface {
	pulumi.Input

	ToFilterTrackPropertyConditionResponseOutput() FilterTrackPropertyConditionResponseOutput
	ToFilterTrackPropertyConditionResponseOutputWithContext(context.Context) FilterTrackPropertyConditionResponseOutput
}

// The class to specify one track property condition.
type FilterTrackPropertyConditionResponseArgs struct {
	// The track property condition operation.
	Operation pulumi.StringInput `pulumi:"operation"`
	// The track property type.
	Property pulumi.StringInput `pulumi:"property"`
	// The track property value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (FilterTrackPropertyConditionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterTrackPropertyConditionResponse)(nil)).Elem()
}

func (i FilterTrackPropertyConditionResponseArgs) ToFilterTrackPropertyConditionResponseOutput() FilterTrackPropertyConditionResponseOutput {
	return i.ToFilterTrackPropertyConditionResponseOutputWithContext(context.Background())
}

func (i FilterTrackPropertyConditionResponseArgs) ToFilterTrackPropertyConditionResponseOutputWithContext(ctx context.Context) FilterTrackPropertyConditionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterTrackPropertyConditionResponseOutput)
}

// FilterTrackPropertyConditionResponseArrayInput is an input type that accepts FilterTrackPropertyConditionResponseArray and FilterTrackPropertyConditionResponseArrayOutput values.
// You can construct a concrete instance of `FilterTrackPropertyConditionResponseArrayInput` via:
//
//          FilterTrackPropertyConditionResponseArray{ FilterTrackPropertyConditionResponseArgs{...} }
type FilterTrackPropertyConditionResponseArrayInput interface {
	pulumi.Input

	ToFilterTrackPropertyConditionResponseArrayOutput() FilterTrackPropertyConditionResponseArrayOutput
	ToFilterTrackPropertyConditionResponseArrayOutputWithContext(context.Context) FilterTrackPropertyConditionResponseArrayOutput
}

type FilterTrackPropertyConditionResponseArray []FilterTrackPropertyConditionResponseInput

func (FilterTrackPropertyConditionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilterTrackPropertyConditionResponse)(nil)).Elem()
}

func (i FilterTrackPropertyConditionResponseArray) ToFilterTrackPropertyConditionResponseArrayOutput() FilterTrackPropertyConditionResponseArrayOutput {
	return i.ToFilterTrackPropertyConditionResponseArrayOutputWithContext(context.Background())
}

func (i FilterTrackPropertyConditionResponseArray) ToFilterTrackPropertyConditionResponseArrayOutputWithContext(ctx context.Context) FilterTrackPropertyConditionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterTrackPropertyConditionResponseArrayOutput)
}

// The class to specify one track property condition.
type FilterTrackPropertyConditionResponseOutput struct{ *pulumi.OutputState }

func (FilterTrackPropertyConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterTrackPropertyConditionResponse)(nil)).Elem()
}

func (o FilterTrackPropertyConditionResponseOutput) ToFilterTrackPropertyConditionResponseOutput() FilterTrackPropertyConditionResponseOutput {
	return o
}

func (o FilterTrackPropertyConditionResponseOutput) ToFilterTrackPropertyConditionResponseOutputWithContext(ctx context.Context) FilterTrackPropertyConditionResponseOutput {
	return o
}

// The track property condition operation.
func (o FilterTrackPropertyConditionResponseOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v FilterTrackPropertyConditionResponse) string { return v.Operation }).(pulumi.StringOutput)
}

// The track property type.
func (o FilterTrackPropertyConditionResponseOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v FilterTrackPropertyConditionResponse) string { return v.Property }).(pulumi.StringOutput)
}

// The track property value.
func (o FilterTrackPropertyConditionResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v FilterTrackPropertyConditionResponse) string { return v.Value }).(pulumi.StringOutput)
}

type FilterTrackPropertyConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (FilterTrackPropertyConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilterTrackPropertyConditionResponse)(nil)).Elem()
}

func (o FilterTrackPropertyConditionResponseArrayOutput) ToFilterTrackPropertyConditionResponseArrayOutput() FilterTrackPropertyConditionResponseArrayOutput {
	return o
}

func (o FilterTrackPropertyConditionResponseArrayOutput) ToFilterTrackPropertyConditionResponseArrayOutputWithContext(ctx context.Context) FilterTrackPropertyConditionResponseArrayOutput {
	return o
}

func (o FilterTrackPropertyConditionResponseArrayOutput) Index(i pulumi.IntInput) FilterTrackPropertyConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FilterTrackPropertyConditionResponse {
		return vs[0].([]FilterTrackPropertyConditionResponse)[vs[1].(int)]
	}).(FilterTrackPropertyConditionResponseOutput)
}

// Representing a list of FilterTrackPropertyConditions to select a track.  The filters are combined using a logical AND operation.
type FilterTrackSelection struct {
	// The track selections.
	TrackSelections []FilterTrackPropertyCondition `pulumi:"trackSelections"`
}

// FilterTrackSelectionInput is an input type that accepts FilterTrackSelectionArgs and FilterTrackSelectionOutput values.
// You can construct a concrete instance of `FilterTrackSelectionInput` via:
//
//          FilterTrackSelectionArgs{...}
type FilterTrackSelectionInput interface {
	pulumi.Input

	ToFilterTrackSelectionOutput() FilterTrackSelectionOutput
	ToFilterTrackSelectionOutputWithContext(context.Context) FilterTrackSelectionOutput
}

// Representing a list of FilterTrackPropertyConditions to select a track.  The filters are combined using a logical AND operation.
type FilterTrackSelectionArgs struct {
	// The track selections.
	TrackSelections FilterTrackPropertyConditionArrayInput `pulumi:"trackSelections"`
}

func (FilterTrackSelectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterTrackSelection)(nil)).Elem()
}

func (i FilterTrackSelectionArgs) ToFilterTrackSelectionOutput() FilterTrackSelectionOutput {
	return i.ToFilterTrackSelectionOutputWithContext(context.Background())
}

func (i FilterTrackSelectionArgs) ToFilterTrackSelectionOutputWithContext(ctx context.Context) FilterTrackSelectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterTrackSelectionOutput)
}

// FilterTrackSelectionArrayInput is an input type that accepts FilterTrackSelectionArray and FilterTrackSelectionArrayOutput values.
// You can construct a concrete instance of `FilterTrackSelectionArrayInput` via:
//
//          FilterTrackSelectionArray{ FilterTrackSelectionArgs{...} }
type FilterTrackSelectionArrayInput interface {
	pulumi.Input

	ToFilterTrackSelectionArrayOutput() FilterTrackSelectionArrayOutput
	ToFilterTrackSelectionArrayOutputWithContext(context.Context) FilterTrackSelectionArrayOutput
}

type FilterTrackSelectionArray []FilterTrackSelectionInput

func (FilterTrackSelectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilterTrackSelection)(nil)).Elem()
}

func (i FilterTrackSelectionArray) ToFilterTrackSelectionArrayOutput() FilterTrackSelectionArrayOutput {
	return i.ToFilterTrackSelectionArrayOutputWithContext(context.Background())
}

func (i FilterTrackSelectionArray) ToFilterTrackSelectionArrayOutputWithContext(ctx context.Context) FilterTrackSelectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterTrackSelectionArrayOutput)
}

// Representing a list of FilterTrackPropertyConditions to select a track.  The filters are combined using a logical AND operation.
type FilterTrackSelectionOutput struct{ *pulumi.OutputState }

func (FilterTrackSelectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterTrackSelection)(nil)).Elem()
}

func (o FilterTrackSelectionOutput) ToFilterTrackSelectionOutput() FilterTrackSelectionOutput {
	return o
}

func (o FilterTrackSelectionOutput) ToFilterTrackSelectionOutputWithContext(ctx context.Context) FilterTrackSelectionOutput {
	return o
}

// The track selections.
func (o FilterTrackSelectionOutput) TrackSelections() FilterTrackPropertyConditionArrayOutput {
	return o.ApplyT(func(v FilterTrackSelection) []FilterTrackPropertyCondition { return v.TrackSelections }).(FilterTrackPropertyConditionArrayOutput)
}

type FilterTrackSelectionArrayOutput struct{ *pulumi.OutputState }

func (FilterTrackSelectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilterTrackSelection)(nil)).Elem()
}

func (o FilterTrackSelectionArrayOutput) ToFilterTrackSelectionArrayOutput() FilterTrackSelectionArrayOutput {
	return o
}

func (o FilterTrackSelectionArrayOutput) ToFilterTrackSelectionArrayOutputWithContext(ctx context.Context) FilterTrackSelectionArrayOutput {
	return o
}

func (o FilterTrackSelectionArrayOutput) Index(i pulumi.IntInput) FilterTrackSelectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FilterTrackSelection {
		return vs[0].([]FilterTrackSelection)[vs[1].(int)]
	}).(FilterTrackSelectionOutput)
}

// Representing a list of FilterTrackPropertyConditions to select a track.  The filters are combined using a logical AND operation.
type FilterTrackSelectionResponse struct {
	// The track selections.
	TrackSelections []FilterTrackPropertyConditionResponse `pulumi:"trackSelections"`
}

// FilterTrackSelectionResponseInput is an input type that accepts FilterTrackSelectionResponseArgs and FilterTrackSelectionResponseOutput values.
// You can construct a concrete instance of `FilterTrackSelectionResponseInput` via:
//
//          FilterTrackSelectionResponseArgs{...}
type FilterTrackSelectionResponseInput interface {
	pulumi.Input

	ToFilterTrackSelectionResponseOutput() FilterTrackSelectionResponseOutput
	ToFilterTrackSelectionResponseOutputWithContext(context.Context) FilterTrackSelectionResponseOutput
}

// Representing a list of FilterTrackPropertyConditions to select a track.  The filters are combined using a logical AND operation.
type FilterTrackSelectionResponseArgs struct {
	// The track selections.
	TrackSelections FilterTrackPropertyConditionResponseArrayInput `pulumi:"trackSelections"`
}

func (FilterTrackSelectionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterTrackSelectionResponse)(nil)).Elem()
}

func (i FilterTrackSelectionResponseArgs) ToFilterTrackSelectionResponseOutput() FilterTrackSelectionResponseOutput {
	return i.ToFilterTrackSelectionResponseOutputWithContext(context.Background())
}

func (i FilterTrackSelectionResponseArgs) ToFilterTrackSelectionResponseOutputWithContext(ctx context.Context) FilterTrackSelectionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterTrackSelectionResponseOutput)
}

// FilterTrackSelectionResponseArrayInput is an input type that accepts FilterTrackSelectionResponseArray and FilterTrackSelectionResponseArrayOutput values.
// You can construct a concrete instance of `FilterTrackSelectionResponseArrayInput` via:
//
//          FilterTrackSelectionResponseArray{ FilterTrackSelectionResponseArgs{...} }
type FilterTrackSelectionResponseArrayInput interface {
	pulumi.Input

	ToFilterTrackSelectionResponseArrayOutput() FilterTrackSelectionResponseArrayOutput
	ToFilterTrackSelectionResponseArrayOutputWithContext(context.Context) FilterTrackSelectionResponseArrayOutput
}

type FilterTrackSelectionResponseArray []FilterTrackSelectionResponseInput

func (FilterTrackSelectionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilterTrackSelectionResponse)(nil)).Elem()
}

func (i FilterTrackSelectionResponseArray) ToFilterTrackSelectionResponseArrayOutput() FilterTrackSelectionResponseArrayOutput {
	return i.ToFilterTrackSelectionResponseArrayOutputWithContext(context.Background())
}

func (i FilterTrackSelectionResponseArray) ToFilterTrackSelectionResponseArrayOutputWithContext(ctx context.Context) FilterTrackSelectionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterTrackSelectionResponseArrayOutput)
}

// Representing a list of FilterTrackPropertyConditions to select a track.  The filters are combined using a logical AND operation.
type FilterTrackSelectionResponseOutput struct{ *pulumi.OutputState }

func (FilterTrackSelectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterTrackSelectionResponse)(nil)).Elem()
}

func (o FilterTrackSelectionResponseOutput) ToFilterTrackSelectionResponseOutput() FilterTrackSelectionResponseOutput {
	return o
}

func (o FilterTrackSelectionResponseOutput) ToFilterTrackSelectionResponseOutputWithContext(ctx context.Context) FilterTrackSelectionResponseOutput {
	return o
}

// The track selections.
func (o FilterTrackSelectionResponseOutput) TrackSelections() FilterTrackPropertyConditionResponseArrayOutput {
	return o.ApplyT(func(v FilterTrackSelectionResponse) []FilterTrackPropertyConditionResponse { return v.TrackSelections }).(FilterTrackPropertyConditionResponseArrayOutput)
}

type FilterTrackSelectionResponseArrayOutput struct{ *pulumi.OutputState }

func (FilterTrackSelectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilterTrackSelectionResponse)(nil)).Elem()
}

func (o FilterTrackSelectionResponseArrayOutput) ToFilterTrackSelectionResponseArrayOutput() FilterTrackSelectionResponseArrayOutput {
	return o
}

func (o FilterTrackSelectionResponseArrayOutput) ToFilterTrackSelectionResponseArrayOutputWithContext(ctx context.Context) FilterTrackSelectionResponseArrayOutput {
	return o
}

func (o FilterTrackSelectionResponseArrayOutput) Index(i pulumi.IntInput) FilterTrackSelectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FilterTrackSelectionResponse {
		return vs[0].([]FilterTrackSelectionResponse)[vs[1].(int)]
	}).(FilterTrackSelectionResponseOutput)
}

// Filter First Quality
type FirstQuality struct {
	// The first quality bitrate.
	Bitrate int `pulumi:"bitrate"`
}

// FirstQualityInput is an input type that accepts FirstQualityArgs and FirstQualityOutput values.
// You can construct a concrete instance of `FirstQualityInput` via:
//
//          FirstQualityArgs{...}
type FirstQualityInput interface {
	pulumi.Input

	ToFirstQualityOutput() FirstQualityOutput
	ToFirstQualityOutputWithContext(context.Context) FirstQualityOutput
}

// Filter First Quality
type FirstQualityArgs struct {
	// The first quality bitrate.
	Bitrate pulumi.IntInput `pulumi:"bitrate"`
}

func (FirstQualityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirstQuality)(nil)).Elem()
}

func (i FirstQualityArgs) ToFirstQualityOutput() FirstQualityOutput {
	return i.ToFirstQualityOutputWithContext(context.Background())
}

func (i FirstQualityArgs) ToFirstQualityOutputWithContext(ctx context.Context) FirstQualityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirstQualityOutput)
}

func (i FirstQualityArgs) ToFirstQualityPtrOutput() FirstQualityPtrOutput {
	return i.ToFirstQualityPtrOutputWithContext(context.Background())
}

func (i FirstQualityArgs) ToFirstQualityPtrOutputWithContext(ctx context.Context) FirstQualityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirstQualityOutput).ToFirstQualityPtrOutputWithContext(ctx)
}

// FirstQualityPtrInput is an input type that accepts FirstQualityArgs, FirstQualityPtr and FirstQualityPtrOutput values.
// You can construct a concrete instance of `FirstQualityPtrInput` via:
//
//          FirstQualityArgs{...}
//
//  or:
//
//          nil
type FirstQualityPtrInput interface {
	pulumi.Input

	ToFirstQualityPtrOutput() FirstQualityPtrOutput
	ToFirstQualityPtrOutputWithContext(context.Context) FirstQualityPtrOutput
}

type firstQualityPtrType FirstQualityArgs

func FirstQualityPtr(v *FirstQualityArgs) FirstQualityPtrInput {
	return (*firstQualityPtrType)(v)
}

func (*firstQualityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirstQuality)(nil)).Elem()
}

func (i *firstQualityPtrType) ToFirstQualityPtrOutput() FirstQualityPtrOutput {
	return i.ToFirstQualityPtrOutputWithContext(context.Background())
}

func (i *firstQualityPtrType) ToFirstQualityPtrOutputWithContext(ctx context.Context) FirstQualityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirstQualityPtrOutput)
}

// Filter First Quality
type FirstQualityOutput struct{ *pulumi.OutputState }

func (FirstQualityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirstQuality)(nil)).Elem()
}

func (o FirstQualityOutput) ToFirstQualityOutput() FirstQualityOutput {
	return o
}

func (o FirstQualityOutput) ToFirstQualityOutputWithContext(ctx context.Context) FirstQualityOutput {
	return o
}

func (o FirstQualityOutput) ToFirstQualityPtrOutput() FirstQualityPtrOutput {
	return o.ToFirstQualityPtrOutputWithContext(context.Background())
}

func (o FirstQualityOutput) ToFirstQualityPtrOutputWithContext(ctx context.Context) FirstQualityPtrOutput {
	return o.ApplyT(func(v FirstQuality) *FirstQuality {
		return &v
	}).(FirstQualityPtrOutput)
}

// The first quality bitrate.
func (o FirstQualityOutput) Bitrate() pulumi.IntOutput {
	return o.ApplyT(func(v FirstQuality) int { return v.Bitrate }).(pulumi.IntOutput)
}

type FirstQualityPtrOutput struct{ *pulumi.OutputState }

func (FirstQualityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirstQuality)(nil)).Elem()
}

func (o FirstQualityPtrOutput) ToFirstQualityPtrOutput() FirstQualityPtrOutput {
	return o
}

func (o FirstQualityPtrOutput) ToFirstQualityPtrOutputWithContext(ctx context.Context) FirstQualityPtrOutput {
	return o
}

func (o FirstQualityPtrOutput) Elem() FirstQualityOutput {
	return o.ApplyT(func(v *FirstQuality) FirstQuality { return *v }).(FirstQualityOutput)
}

// The first quality bitrate.
func (o FirstQualityPtrOutput) Bitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirstQuality) *int {
		if v == nil {
			return nil
		}
		return &v.Bitrate
	}).(pulumi.IntPtrOutput)
}

// Filter First Quality
type FirstQualityResponse struct {
	// The first quality bitrate.
	Bitrate int `pulumi:"bitrate"`
}

// FirstQualityResponseInput is an input type that accepts FirstQualityResponseArgs and FirstQualityResponseOutput values.
// You can construct a concrete instance of `FirstQualityResponseInput` via:
//
//          FirstQualityResponseArgs{...}
type FirstQualityResponseInput interface {
	pulumi.Input

	ToFirstQualityResponseOutput() FirstQualityResponseOutput
	ToFirstQualityResponseOutputWithContext(context.Context) FirstQualityResponseOutput
}

// Filter First Quality
type FirstQualityResponseArgs struct {
	// The first quality bitrate.
	Bitrate pulumi.IntInput `pulumi:"bitrate"`
}

func (FirstQualityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirstQualityResponse)(nil)).Elem()
}

func (i FirstQualityResponseArgs) ToFirstQualityResponseOutput() FirstQualityResponseOutput {
	return i.ToFirstQualityResponseOutputWithContext(context.Background())
}

func (i FirstQualityResponseArgs) ToFirstQualityResponseOutputWithContext(ctx context.Context) FirstQualityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirstQualityResponseOutput)
}

func (i FirstQualityResponseArgs) ToFirstQualityResponsePtrOutput() FirstQualityResponsePtrOutput {
	return i.ToFirstQualityResponsePtrOutputWithContext(context.Background())
}

func (i FirstQualityResponseArgs) ToFirstQualityResponsePtrOutputWithContext(ctx context.Context) FirstQualityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirstQualityResponseOutput).ToFirstQualityResponsePtrOutputWithContext(ctx)
}

// FirstQualityResponsePtrInput is an input type that accepts FirstQualityResponseArgs, FirstQualityResponsePtr and FirstQualityResponsePtrOutput values.
// You can construct a concrete instance of `FirstQualityResponsePtrInput` via:
//
//          FirstQualityResponseArgs{...}
//
//  or:
//
//          nil
type FirstQualityResponsePtrInput interface {
	pulumi.Input

	ToFirstQualityResponsePtrOutput() FirstQualityResponsePtrOutput
	ToFirstQualityResponsePtrOutputWithContext(context.Context) FirstQualityResponsePtrOutput
}

type firstQualityResponsePtrType FirstQualityResponseArgs

func FirstQualityResponsePtr(v *FirstQualityResponseArgs) FirstQualityResponsePtrInput {
	return (*firstQualityResponsePtrType)(v)
}

func (*firstQualityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirstQualityResponse)(nil)).Elem()
}

func (i *firstQualityResponsePtrType) ToFirstQualityResponsePtrOutput() FirstQualityResponsePtrOutput {
	return i.ToFirstQualityResponsePtrOutputWithContext(context.Background())
}

func (i *firstQualityResponsePtrType) ToFirstQualityResponsePtrOutputWithContext(ctx context.Context) FirstQualityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirstQualityResponsePtrOutput)
}

// Filter First Quality
type FirstQualityResponseOutput struct{ *pulumi.OutputState }

func (FirstQualityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirstQualityResponse)(nil)).Elem()
}

func (o FirstQualityResponseOutput) ToFirstQualityResponseOutput() FirstQualityResponseOutput {
	return o
}

func (o FirstQualityResponseOutput) ToFirstQualityResponseOutputWithContext(ctx context.Context) FirstQualityResponseOutput {
	return o
}

func (o FirstQualityResponseOutput) ToFirstQualityResponsePtrOutput() FirstQualityResponsePtrOutput {
	return o.ToFirstQualityResponsePtrOutputWithContext(context.Background())
}

func (o FirstQualityResponseOutput) ToFirstQualityResponsePtrOutputWithContext(ctx context.Context) FirstQualityResponsePtrOutput {
	return o.ApplyT(func(v FirstQualityResponse) *FirstQualityResponse {
		return &v
	}).(FirstQualityResponsePtrOutput)
}

// The first quality bitrate.
func (o FirstQualityResponseOutput) Bitrate() pulumi.IntOutput {
	return o.ApplyT(func(v FirstQualityResponse) int { return v.Bitrate }).(pulumi.IntOutput)
}

type FirstQualityResponsePtrOutput struct{ *pulumi.OutputState }

func (FirstQualityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirstQualityResponse)(nil)).Elem()
}

func (o FirstQualityResponsePtrOutput) ToFirstQualityResponsePtrOutput() FirstQualityResponsePtrOutput {
	return o
}

func (o FirstQualityResponsePtrOutput) ToFirstQualityResponsePtrOutputWithContext(ctx context.Context) FirstQualityResponsePtrOutput {
	return o
}

func (o FirstQualityResponsePtrOutput) Elem() FirstQualityResponseOutput {
	return o.ApplyT(func(v *FirstQualityResponse) FirstQualityResponse { return *v }).(FirstQualityResponseOutput)
}

// The first quality bitrate.
func (o FirstQualityResponsePtrOutput) Bitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirstQualityResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Bitrate
	}).(pulumi.IntPtrOutput)
}

// The HLS configuration.
type Hls struct {
	// The amount of fragments per HTTP Live Streaming (HLS) segment.
	FragmentsPerTsSegment *int `pulumi:"fragmentsPerTsSegment"`
}

// HlsInput is an input type that accepts HlsArgs and HlsOutput values.
// You can construct a concrete instance of `HlsInput` via:
//
//          HlsArgs{...}
type HlsInput interface {
	pulumi.Input

	ToHlsOutput() HlsOutput
	ToHlsOutputWithContext(context.Context) HlsOutput
}

// The HLS configuration.
type HlsArgs struct {
	// The amount of fragments per HTTP Live Streaming (HLS) segment.
	FragmentsPerTsSegment pulumi.IntPtrInput `pulumi:"fragmentsPerTsSegment"`
}

func (HlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Hls)(nil)).Elem()
}

func (i HlsArgs) ToHlsOutput() HlsOutput {
	return i.ToHlsOutputWithContext(context.Background())
}

func (i HlsArgs) ToHlsOutputWithContext(ctx context.Context) HlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HlsOutput)
}

func (i HlsArgs) ToHlsPtrOutput() HlsPtrOutput {
	return i.ToHlsPtrOutputWithContext(context.Background())
}

func (i HlsArgs) ToHlsPtrOutputWithContext(ctx context.Context) HlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HlsOutput).ToHlsPtrOutputWithContext(ctx)
}

// HlsPtrInput is an input type that accepts HlsArgs, HlsPtr and HlsPtrOutput values.
// You can construct a concrete instance of `HlsPtrInput` via:
//
//          HlsArgs{...}
//
//  or:
//
//          nil
type HlsPtrInput interface {
	pulumi.Input

	ToHlsPtrOutput() HlsPtrOutput
	ToHlsPtrOutputWithContext(context.Context) HlsPtrOutput
}

type hlsPtrType HlsArgs

func HlsPtr(v *HlsArgs) HlsPtrInput {
	return (*hlsPtrType)(v)
}

func (*hlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Hls)(nil)).Elem()
}

func (i *hlsPtrType) ToHlsPtrOutput() HlsPtrOutput {
	return i.ToHlsPtrOutputWithContext(context.Background())
}

func (i *hlsPtrType) ToHlsPtrOutputWithContext(ctx context.Context) HlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HlsPtrOutput)
}

// The HLS configuration.
type HlsOutput struct{ *pulumi.OutputState }

func (HlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hls)(nil)).Elem()
}

func (o HlsOutput) ToHlsOutput() HlsOutput {
	return o
}

func (o HlsOutput) ToHlsOutputWithContext(ctx context.Context) HlsOutput {
	return o
}

func (o HlsOutput) ToHlsPtrOutput() HlsPtrOutput {
	return o.ToHlsPtrOutputWithContext(context.Background())
}

func (o HlsOutput) ToHlsPtrOutputWithContext(ctx context.Context) HlsPtrOutput {
	return o.ApplyT(func(v Hls) *Hls {
		return &v
	}).(HlsPtrOutput)
}

// The amount of fragments per HTTP Live Streaming (HLS) segment.
func (o HlsOutput) FragmentsPerTsSegment() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Hls) *int { return v.FragmentsPerTsSegment }).(pulumi.IntPtrOutput)
}

type HlsPtrOutput struct{ *pulumi.OutputState }

func (HlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hls)(nil)).Elem()
}

func (o HlsPtrOutput) ToHlsPtrOutput() HlsPtrOutput {
	return o
}

func (o HlsPtrOutput) ToHlsPtrOutputWithContext(ctx context.Context) HlsPtrOutput {
	return o
}

func (o HlsPtrOutput) Elem() HlsOutput {
	return o.ApplyT(func(v *Hls) Hls { return *v }).(HlsOutput)
}

// The amount of fragments per HTTP Live Streaming (HLS) segment.
func (o HlsPtrOutput) FragmentsPerTsSegment() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Hls) *int {
		if v == nil {
			return nil
		}
		return v.FragmentsPerTsSegment
	}).(pulumi.IntPtrOutput)
}

// The HLS configuration.
type HlsResponse struct {
	// The amount of fragments per HTTP Live Streaming (HLS) segment.
	FragmentsPerTsSegment *int `pulumi:"fragmentsPerTsSegment"`
}

// HlsResponseInput is an input type that accepts HlsResponseArgs and HlsResponseOutput values.
// You can construct a concrete instance of `HlsResponseInput` via:
//
//          HlsResponseArgs{...}
type HlsResponseInput interface {
	pulumi.Input

	ToHlsResponseOutput() HlsResponseOutput
	ToHlsResponseOutputWithContext(context.Context) HlsResponseOutput
}

// The HLS configuration.
type HlsResponseArgs struct {
	// The amount of fragments per HTTP Live Streaming (HLS) segment.
	FragmentsPerTsSegment pulumi.IntPtrInput `pulumi:"fragmentsPerTsSegment"`
}

func (HlsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HlsResponse)(nil)).Elem()
}

func (i HlsResponseArgs) ToHlsResponseOutput() HlsResponseOutput {
	return i.ToHlsResponseOutputWithContext(context.Background())
}

func (i HlsResponseArgs) ToHlsResponseOutputWithContext(ctx context.Context) HlsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HlsResponseOutput)
}

func (i HlsResponseArgs) ToHlsResponsePtrOutput() HlsResponsePtrOutput {
	return i.ToHlsResponsePtrOutputWithContext(context.Background())
}

func (i HlsResponseArgs) ToHlsResponsePtrOutputWithContext(ctx context.Context) HlsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HlsResponseOutput).ToHlsResponsePtrOutputWithContext(ctx)
}

// HlsResponsePtrInput is an input type that accepts HlsResponseArgs, HlsResponsePtr and HlsResponsePtrOutput values.
// You can construct a concrete instance of `HlsResponsePtrInput` via:
//
//          HlsResponseArgs{...}
//
//  or:
//
//          nil
type HlsResponsePtrInput interface {
	pulumi.Input

	ToHlsResponsePtrOutput() HlsResponsePtrOutput
	ToHlsResponsePtrOutputWithContext(context.Context) HlsResponsePtrOutput
}

type hlsResponsePtrType HlsResponseArgs

func HlsResponsePtr(v *HlsResponseArgs) HlsResponsePtrInput {
	return (*hlsResponsePtrType)(v)
}

func (*hlsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HlsResponse)(nil)).Elem()
}

func (i *hlsResponsePtrType) ToHlsResponsePtrOutput() HlsResponsePtrOutput {
	return i.ToHlsResponsePtrOutputWithContext(context.Background())
}

func (i *hlsResponsePtrType) ToHlsResponsePtrOutputWithContext(ctx context.Context) HlsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HlsResponsePtrOutput)
}

// The HLS configuration.
type HlsResponseOutput struct{ *pulumi.OutputState }

func (HlsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HlsResponse)(nil)).Elem()
}

func (o HlsResponseOutput) ToHlsResponseOutput() HlsResponseOutput {
	return o
}

func (o HlsResponseOutput) ToHlsResponseOutputWithContext(ctx context.Context) HlsResponseOutput {
	return o
}

func (o HlsResponseOutput) ToHlsResponsePtrOutput() HlsResponsePtrOutput {
	return o.ToHlsResponsePtrOutputWithContext(context.Background())
}

func (o HlsResponseOutput) ToHlsResponsePtrOutputWithContext(ctx context.Context) HlsResponsePtrOutput {
	return o.ApplyT(func(v HlsResponse) *HlsResponse {
		return &v
	}).(HlsResponsePtrOutput)
}

// The amount of fragments per HTTP Live Streaming (HLS) segment.
func (o HlsResponseOutput) FragmentsPerTsSegment() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HlsResponse) *int { return v.FragmentsPerTsSegment }).(pulumi.IntPtrOutput)
}

type HlsResponsePtrOutput struct{ *pulumi.OutputState }

func (HlsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HlsResponse)(nil)).Elem()
}

func (o HlsResponsePtrOutput) ToHlsResponsePtrOutput() HlsResponsePtrOutput {
	return o
}

func (o HlsResponsePtrOutput) ToHlsResponsePtrOutputWithContext(ctx context.Context) HlsResponsePtrOutput {
	return o
}

func (o HlsResponsePtrOutput) Elem() HlsResponseOutput {
	return o.ApplyT(func(v *HlsResponse) HlsResponse { return *v }).(HlsResponseOutput)
}

// The amount of fragments per HTTP Live Streaming (HLS) segment.
func (o HlsResponsePtrOutput) FragmentsPerTsSegment() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HlsResponse) *int {
		if v == nil {
			return nil
		}
		return v.FragmentsPerTsSegment
	}).(pulumi.IntPtrOutput)
}

// The IP access control.
type IPAccessControl struct {
	// The IP allow list.
	Allow []IPRange `pulumi:"allow"`
}

// IPAccessControlInput is an input type that accepts IPAccessControlArgs and IPAccessControlOutput values.
// You can construct a concrete instance of `IPAccessControlInput` via:
//
//          IPAccessControlArgs{...}
type IPAccessControlInput interface {
	pulumi.Input

	ToIPAccessControlOutput() IPAccessControlOutput
	ToIPAccessControlOutputWithContext(context.Context) IPAccessControlOutput
}

// The IP access control.
type IPAccessControlArgs struct {
	// The IP allow list.
	Allow IPRangeArrayInput `pulumi:"allow"`
}

func (IPAccessControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAccessControl)(nil)).Elem()
}

func (i IPAccessControlArgs) ToIPAccessControlOutput() IPAccessControlOutput {
	return i.ToIPAccessControlOutputWithContext(context.Background())
}

func (i IPAccessControlArgs) ToIPAccessControlOutputWithContext(ctx context.Context) IPAccessControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAccessControlOutput)
}

func (i IPAccessControlArgs) ToIPAccessControlPtrOutput() IPAccessControlPtrOutput {
	return i.ToIPAccessControlPtrOutputWithContext(context.Background())
}

func (i IPAccessControlArgs) ToIPAccessControlPtrOutputWithContext(ctx context.Context) IPAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAccessControlOutput).ToIPAccessControlPtrOutputWithContext(ctx)
}

// IPAccessControlPtrInput is an input type that accepts IPAccessControlArgs, IPAccessControlPtr and IPAccessControlPtrOutput values.
// You can construct a concrete instance of `IPAccessControlPtrInput` via:
//
//          IPAccessControlArgs{...}
//
//  or:
//
//          nil
type IPAccessControlPtrInput interface {
	pulumi.Input

	ToIPAccessControlPtrOutput() IPAccessControlPtrOutput
	ToIPAccessControlPtrOutputWithContext(context.Context) IPAccessControlPtrOutput
}

type ipaccessControlPtrType IPAccessControlArgs

func IPAccessControlPtr(v *IPAccessControlArgs) IPAccessControlPtrInput {
	return (*ipaccessControlPtrType)(v)
}

func (*ipaccessControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAccessControl)(nil)).Elem()
}

func (i *ipaccessControlPtrType) ToIPAccessControlPtrOutput() IPAccessControlPtrOutput {
	return i.ToIPAccessControlPtrOutputWithContext(context.Background())
}

func (i *ipaccessControlPtrType) ToIPAccessControlPtrOutputWithContext(ctx context.Context) IPAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAccessControlPtrOutput)
}

// The IP access control.
type IPAccessControlOutput struct{ *pulumi.OutputState }

func (IPAccessControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAccessControl)(nil)).Elem()
}

func (o IPAccessControlOutput) ToIPAccessControlOutput() IPAccessControlOutput {
	return o
}

func (o IPAccessControlOutput) ToIPAccessControlOutputWithContext(ctx context.Context) IPAccessControlOutput {
	return o
}

func (o IPAccessControlOutput) ToIPAccessControlPtrOutput() IPAccessControlPtrOutput {
	return o.ToIPAccessControlPtrOutputWithContext(context.Background())
}

func (o IPAccessControlOutput) ToIPAccessControlPtrOutputWithContext(ctx context.Context) IPAccessControlPtrOutput {
	return o.ApplyT(func(v IPAccessControl) *IPAccessControl {
		return &v
	}).(IPAccessControlPtrOutput)
}

// The IP allow list.
func (o IPAccessControlOutput) Allow() IPRangeArrayOutput {
	return o.ApplyT(func(v IPAccessControl) []IPRange { return v.Allow }).(IPRangeArrayOutput)
}

type IPAccessControlPtrOutput struct{ *pulumi.OutputState }

func (IPAccessControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAccessControl)(nil)).Elem()
}

func (o IPAccessControlPtrOutput) ToIPAccessControlPtrOutput() IPAccessControlPtrOutput {
	return o
}

func (o IPAccessControlPtrOutput) ToIPAccessControlPtrOutputWithContext(ctx context.Context) IPAccessControlPtrOutput {
	return o
}

func (o IPAccessControlPtrOutput) Elem() IPAccessControlOutput {
	return o.ApplyT(func(v *IPAccessControl) IPAccessControl { return *v }).(IPAccessControlOutput)
}

// The IP allow list.
func (o IPAccessControlPtrOutput) Allow() IPRangeArrayOutput {
	return o.ApplyT(func(v *IPAccessControl) []IPRange {
		if v == nil {
			return nil
		}
		return v.Allow
	}).(IPRangeArrayOutput)
}

// The IP access control.
type IPAccessControlResponse struct {
	// The IP allow list.
	Allow []IPRangeResponse `pulumi:"allow"`
}

// IPAccessControlResponseInput is an input type that accepts IPAccessControlResponseArgs and IPAccessControlResponseOutput values.
// You can construct a concrete instance of `IPAccessControlResponseInput` via:
//
//          IPAccessControlResponseArgs{...}
type IPAccessControlResponseInput interface {
	pulumi.Input

	ToIPAccessControlResponseOutput() IPAccessControlResponseOutput
	ToIPAccessControlResponseOutputWithContext(context.Context) IPAccessControlResponseOutput
}

// The IP access control.
type IPAccessControlResponseArgs struct {
	// The IP allow list.
	Allow IPRangeResponseArrayInput `pulumi:"allow"`
}

func (IPAccessControlResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAccessControlResponse)(nil)).Elem()
}

func (i IPAccessControlResponseArgs) ToIPAccessControlResponseOutput() IPAccessControlResponseOutput {
	return i.ToIPAccessControlResponseOutputWithContext(context.Background())
}

func (i IPAccessControlResponseArgs) ToIPAccessControlResponseOutputWithContext(ctx context.Context) IPAccessControlResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAccessControlResponseOutput)
}

func (i IPAccessControlResponseArgs) ToIPAccessControlResponsePtrOutput() IPAccessControlResponsePtrOutput {
	return i.ToIPAccessControlResponsePtrOutputWithContext(context.Background())
}

func (i IPAccessControlResponseArgs) ToIPAccessControlResponsePtrOutputWithContext(ctx context.Context) IPAccessControlResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAccessControlResponseOutput).ToIPAccessControlResponsePtrOutputWithContext(ctx)
}

// IPAccessControlResponsePtrInput is an input type that accepts IPAccessControlResponseArgs, IPAccessControlResponsePtr and IPAccessControlResponsePtrOutput values.
// You can construct a concrete instance of `IPAccessControlResponsePtrInput` via:
//
//          IPAccessControlResponseArgs{...}
//
//  or:
//
//          nil
type IPAccessControlResponsePtrInput interface {
	pulumi.Input

	ToIPAccessControlResponsePtrOutput() IPAccessControlResponsePtrOutput
	ToIPAccessControlResponsePtrOutputWithContext(context.Context) IPAccessControlResponsePtrOutput
}

type ipaccessControlResponsePtrType IPAccessControlResponseArgs

func IPAccessControlResponsePtr(v *IPAccessControlResponseArgs) IPAccessControlResponsePtrInput {
	return (*ipaccessControlResponsePtrType)(v)
}

func (*ipaccessControlResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAccessControlResponse)(nil)).Elem()
}

func (i *ipaccessControlResponsePtrType) ToIPAccessControlResponsePtrOutput() IPAccessControlResponsePtrOutput {
	return i.ToIPAccessControlResponsePtrOutputWithContext(context.Background())
}

func (i *ipaccessControlResponsePtrType) ToIPAccessControlResponsePtrOutputWithContext(ctx context.Context) IPAccessControlResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAccessControlResponsePtrOutput)
}

// The IP access control.
type IPAccessControlResponseOutput struct{ *pulumi.OutputState }

func (IPAccessControlResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAccessControlResponse)(nil)).Elem()
}

func (o IPAccessControlResponseOutput) ToIPAccessControlResponseOutput() IPAccessControlResponseOutput {
	return o
}

func (o IPAccessControlResponseOutput) ToIPAccessControlResponseOutputWithContext(ctx context.Context) IPAccessControlResponseOutput {
	return o
}

func (o IPAccessControlResponseOutput) ToIPAccessControlResponsePtrOutput() IPAccessControlResponsePtrOutput {
	return o.ToIPAccessControlResponsePtrOutputWithContext(context.Background())
}

func (o IPAccessControlResponseOutput) ToIPAccessControlResponsePtrOutputWithContext(ctx context.Context) IPAccessControlResponsePtrOutput {
	return o.ApplyT(func(v IPAccessControlResponse) *IPAccessControlResponse {
		return &v
	}).(IPAccessControlResponsePtrOutput)
}

// The IP allow list.
func (o IPAccessControlResponseOutput) Allow() IPRangeResponseArrayOutput {
	return o.ApplyT(func(v IPAccessControlResponse) []IPRangeResponse { return v.Allow }).(IPRangeResponseArrayOutput)
}

type IPAccessControlResponsePtrOutput struct{ *pulumi.OutputState }

func (IPAccessControlResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAccessControlResponse)(nil)).Elem()
}

func (o IPAccessControlResponsePtrOutput) ToIPAccessControlResponsePtrOutput() IPAccessControlResponsePtrOutput {
	return o
}

func (o IPAccessControlResponsePtrOutput) ToIPAccessControlResponsePtrOutputWithContext(ctx context.Context) IPAccessControlResponsePtrOutput {
	return o
}

func (o IPAccessControlResponsePtrOutput) Elem() IPAccessControlResponseOutput {
	return o.ApplyT(func(v *IPAccessControlResponse) IPAccessControlResponse { return *v }).(IPAccessControlResponseOutput)
}

// The IP allow list.
func (o IPAccessControlResponsePtrOutput) Allow() IPRangeResponseArrayOutput {
	return o.ApplyT(func(v *IPAccessControlResponse) []IPRangeResponse {
		if v == nil {
			return nil
		}
		return v.Allow
	}).(IPRangeResponseArrayOutput)
}

// The IP address range in the CIDR scheme.
type IPRange struct {
	// The IP address.
	Address *string `pulumi:"address"`
	// The friendly name for the IP address range.
	Name *string `pulumi:"name"`
	// The subnet mask prefix length (see CIDR notation).
	SubnetPrefixLength *int `pulumi:"subnetPrefixLength"`
}

// IPRangeInput is an input type that accepts IPRangeArgs and IPRangeOutput values.
// You can construct a concrete instance of `IPRangeInput` via:
//
//          IPRangeArgs{...}
type IPRangeInput interface {
	pulumi.Input

	ToIPRangeOutput() IPRangeOutput
	ToIPRangeOutputWithContext(context.Context) IPRangeOutput
}

// The IP address range in the CIDR scheme.
type IPRangeArgs struct {
	// The IP address.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The friendly name for the IP address range.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The subnet mask prefix length (see CIDR notation).
	SubnetPrefixLength pulumi.IntPtrInput `pulumi:"subnetPrefixLength"`
}

func (IPRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPRange)(nil)).Elem()
}

func (i IPRangeArgs) ToIPRangeOutput() IPRangeOutput {
	return i.ToIPRangeOutputWithContext(context.Background())
}

func (i IPRangeArgs) ToIPRangeOutputWithContext(ctx context.Context) IPRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPRangeOutput)
}

// IPRangeArrayInput is an input type that accepts IPRangeArray and IPRangeArrayOutput values.
// You can construct a concrete instance of `IPRangeArrayInput` via:
//
//          IPRangeArray{ IPRangeArgs{...} }
type IPRangeArrayInput interface {
	pulumi.Input

	ToIPRangeArrayOutput() IPRangeArrayOutput
	ToIPRangeArrayOutputWithContext(context.Context) IPRangeArrayOutput
}

type IPRangeArray []IPRangeInput

func (IPRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPRange)(nil)).Elem()
}

func (i IPRangeArray) ToIPRangeArrayOutput() IPRangeArrayOutput {
	return i.ToIPRangeArrayOutputWithContext(context.Background())
}

func (i IPRangeArray) ToIPRangeArrayOutputWithContext(ctx context.Context) IPRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPRangeArrayOutput)
}

// The IP address range in the CIDR scheme.
type IPRangeOutput struct{ *pulumi.OutputState }

func (IPRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPRange)(nil)).Elem()
}

func (o IPRangeOutput) ToIPRangeOutput() IPRangeOutput {
	return o
}

func (o IPRangeOutput) ToIPRangeOutputWithContext(ctx context.Context) IPRangeOutput {
	return o
}

// The IP address.
func (o IPRangeOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPRange) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The friendly name for the IP address range.
func (o IPRangeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPRange) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The subnet mask prefix length (see CIDR notation).
func (o IPRangeOutput) SubnetPrefixLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IPRange) *int { return v.SubnetPrefixLength }).(pulumi.IntPtrOutput)
}

type IPRangeArrayOutput struct{ *pulumi.OutputState }

func (IPRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPRange)(nil)).Elem()
}

func (o IPRangeArrayOutput) ToIPRangeArrayOutput() IPRangeArrayOutput {
	return o
}

func (o IPRangeArrayOutput) ToIPRangeArrayOutputWithContext(ctx context.Context) IPRangeArrayOutput {
	return o
}

func (o IPRangeArrayOutput) Index(i pulumi.IntInput) IPRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IPRange {
		return vs[0].([]IPRange)[vs[1].(int)]
	}).(IPRangeOutput)
}

// The IP address range in the CIDR scheme.
type IPRangeResponse struct {
	// The IP address.
	Address *string `pulumi:"address"`
	// The friendly name for the IP address range.
	Name *string `pulumi:"name"`
	// The subnet mask prefix length (see CIDR notation).
	SubnetPrefixLength *int `pulumi:"subnetPrefixLength"`
}

// IPRangeResponseInput is an input type that accepts IPRangeResponseArgs and IPRangeResponseOutput values.
// You can construct a concrete instance of `IPRangeResponseInput` via:
//
//          IPRangeResponseArgs{...}
type IPRangeResponseInput interface {
	pulumi.Input

	ToIPRangeResponseOutput() IPRangeResponseOutput
	ToIPRangeResponseOutputWithContext(context.Context) IPRangeResponseOutput
}

// The IP address range in the CIDR scheme.
type IPRangeResponseArgs struct {
	// The IP address.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The friendly name for the IP address range.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The subnet mask prefix length (see CIDR notation).
	SubnetPrefixLength pulumi.IntPtrInput `pulumi:"subnetPrefixLength"`
}

func (IPRangeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPRangeResponse)(nil)).Elem()
}

func (i IPRangeResponseArgs) ToIPRangeResponseOutput() IPRangeResponseOutput {
	return i.ToIPRangeResponseOutputWithContext(context.Background())
}

func (i IPRangeResponseArgs) ToIPRangeResponseOutputWithContext(ctx context.Context) IPRangeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPRangeResponseOutput)
}

// IPRangeResponseArrayInput is an input type that accepts IPRangeResponseArray and IPRangeResponseArrayOutput values.
// You can construct a concrete instance of `IPRangeResponseArrayInput` via:
//
//          IPRangeResponseArray{ IPRangeResponseArgs{...} }
type IPRangeResponseArrayInput interface {
	pulumi.Input

	ToIPRangeResponseArrayOutput() IPRangeResponseArrayOutput
	ToIPRangeResponseArrayOutputWithContext(context.Context) IPRangeResponseArrayOutput
}

type IPRangeResponseArray []IPRangeResponseInput

func (IPRangeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPRangeResponse)(nil)).Elem()
}

func (i IPRangeResponseArray) ToIPRangeResponseArrayOutput() IPRangeResponseArrayOutput {
	return i.ToIPRangeResponseArrayOutputWithContext(context.Background())
}

func (i IPRangeResponseArray) ToIPRangeResponseArrayOutputWithContext(ctx context.Context) IPRangeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPRangeResponseArrayOutput)
}

// The IP address range in the CIDR scheme.
type IPRangeResponseOutput struct{ *pulumi.OutputState }

func (IPRangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPRangeResponse)(nil)).Elem()
}

func (o IPRangeResponseOutput) ToIPRangeResponseOutput() IPRangeResponseOutput {
	return o
}

func (o IPRangeResponseOutput) ToIPRangeResponseOutputWithContext(ctx context.Context) IPRangeResponseOutput {
	return o
}

// The IP address.
func (o IPRangeResponseOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPRangeResponse) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The friendly name for the IP address range.
func (o IPRangeResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPRangeResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The subnet mask prefix length (see CIDR notation).
func (o IPRangeResponseOutput) SubnetPrefixLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IPRangeResponse) *int { return v.SubnetPrefixLength }).(pulumi.IntPtrOutput)
}

type IPRangeResponseArrayOutput struct{ *pulumi.OutputState }

func (IPRangeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPRangeResponse)(nil)).Elem()
}

func (o IPRangeResponseArrayOutput) ToIPRangeResponseArrayOutput() IPRangeResponseArrayOutput {
	return o
}

func (o IPRangeResponseArrayOutput) ToIPRangeResponseArrayOutputWithContext(ctx context.Context) IPRangeResponseArrayOutput {
	return o
}

func (o IPRangeResponseArrayOutput) Index(i pulumi.IntInput) IPRangeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IPRangeResponse {
		return vs[0].([]IPRangeResponse)[vs[1].(int)]
	}).(IPRangeResponseOutput)
}

// A Job resource type. The progress and state can be obtained by polling a Job or subscribing to events using EventGrid.
type JobType struct {
	// The name of the resource
	Name string `pulumi:"name"`
	// The resource properties.
	Properties JobPropertiesResponse `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type string `pulumi:"type"`
}

// JobTypeInput is an input type that accepts JobTypeArgs and JobTypeOutput values.
// You can construct a concrete instance of `JobTypeInput` via:
//
//          JobTypeArgs{...}
type JobTypeInput interface {
	pulumi.Input

	ToJobTypeOutput() JobTypeOutput
	ToJobTypeOutputWithContext(context.Context) JobTypeOutput
}

// A Job resource type. The progress and state can be obtained by polling a Job or subscribing to events using EventGrid.
type JobTypeArgs struct {
	// The name of the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The resource properties.
	Properties JobPropertiesResponseInput `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JobTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobType)(nil)).Elem()
}

func (i JobTypeArgs) ToJobTypeOutput() JobTypeOutput {
	return i.ToJobTypeOutputWithContext(context.Background())
}

func (i JobTypeArgs) ToJobTypeOutputWithContext(ctx context.Context) JobTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTypeOutput)
}

// A Job resource type. The progress and state can be obtained by polling a Job or subscribing to events using EventGrid.
type JobTypeOutput struct{ *pulumi.OutputState }

func (JobTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobType)(nil)).Elem()
}

func (o JobTypeOutput) ToJobTypeOutput() JobTypeOutput {
	return o
}

func (o JobTypeOutput) ToJobTypeOutputWithContext(ctx context.Context) JobTypeOutput {
	return o
}

// The name of the resource
func (o JobTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v JobType) string { return v.Name }).(pulumi.StringOutput)
}

// The resource properties.
func (o JobTypeOutput) Properties() JobPropertiesResponseOutput {
	return o.ApplyT(func(v JobType) JobPropertiesResponse { return v.Properties }).(JobPropertiesResponseOutput)
}

// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
func (o JobTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JobType) string { return v.Type }).(pulumi.StringOutput)
}

// Details of JobOutput errors.
type JobError struct {
}

// JobErrorInput is an input type that accepts JobErrorArgs and JobErrorOutput values.
// You can construct a concrete instance of `JobErrorInput` via:
//
//          JobErrorArgs{...}
type JobErrorInput interface {
	pulumi.Input

	ToJobErrorOutput() JobErrorOutput
	ToJobErrorOutputWithContext(context.Context) JobErrorOutput
}

// Details of JobOutput errors.
type JobErrorArgs struct {
}

func (JobErrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobError)(nil)).Elem()
}

func (i JobErrorArgs) ToJobErrorOutput() JobErrorOutput {
	return i.ToJobErrorOutputWithContext(context.Background())
}

func (i JobErrorArgs) ToJobErrorOutputWithContext(ctx context.Context) JobErrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobErrorOutput)
}

// Details of JobOutput errors.
type JobErrorOutput struct{ *pulumi.OutputState }

func (JobErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobError)(nil)).Elem()
}

func (o JobErrorOutput) ToJobErrorOutput() JobErrorOutput {
	return o
}

func (o JobErrorOutput) ToJobErrorOutputWithContext(ctx context.Context) JobErrorOutput {
	return o
}

// Details of JobOutput errors.
type JobErrorDetail struct {
}

// JobErrorDetailInput is an input type that accepts JobErrorDetailArgs and JobErrorDetailOutput values.
// You can construct a concrete instance of `JobErrorDetailInput` via:
//
//          JobErrorDetailArgs{...}
type JobErrorDetailInput interface {
	pulumi.Input

	ToJobErrorDetailOutput() JobErrorDetailOutput
	ToJobErrorDetailOutputWithContext(context.Context) JobErrorDetailOutput
}

// Details of JobOutput errors.
type JobErrorDetailArgs struct {
}

func (JobErrorDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobErrorDetail)(nil)).Elem()
}

func (i JobErrorDetailArgs) ToJobErrorDetailOutput() JobErrorDetailOutput {
	return i.ToJobErrorDetailOutputWithContext(context.Background())
}

func (i JobErrorDetailArgs) ToJobErrorDetailOutputWithContext(ctx context.Context) JobErrorDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobErrorDetailOutput)
}

// Details of JobOutput errors.
type JobErrorDetailOutput struct{ *pulumi.OutputState }

func (JobErrorDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobErrorDetail)(nil)).Elem()
}

func (o JobErrorDetailOutput) ToJobErrorDetailOutput() JobErrorDetailOutput {
	return o
}

func (o JobErrorDetailOutput) ToJobErrorDetailOutputWithContext(ctx context.Context) JobErrorDetailOutput {
	return o
}

// Details of JobOutput errors.
type JobErrorDetailResponse struct {
	// Code describing the error detail.
	Code string `pulumi:"code"`
	// A human-readable representation of the error.
	Message string `pulumi:"message"`
}

// JobErrorDetailResponseInput is an input type that accepts JobErrorDetailResponseArgs and JobErrorDetailResponseOutput values.
// You can construct a concrete instance of `JobErrorDetailResponseInput` via:
//
//          JobErrorDetailResponseArgs{...}
type JobErrorDetailResponseInput interface {
	pulumi.Input

	ToJobErrorDetailResponseOutput() JobErrorDetailResponseOutput
	ToJobErrorDetailResponseOutputWithContext(context.Context) JobErrorDetailResponseOutput
}

// Details of JobOutput errors.
type JobErrorDetailResponseArgs struct {
	// Code describing the error detail.
	Code pulumi.StringInput `pulumi:"code"`
	// A human-readable representation of the error.
	Message pulumi.StringInput `pulumi:"message"`
}

func (JobErrorDetailResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobErrorDetailResponse)(nil)).Elem()
}

func (i JobErrorDetailResponseArgs) ToJobErrorDetailResponseOutput() JobErrorDetailResponseOutput {
	return i.ToJobErrorDetailResponseOutputWithContext(context.Background())
}

func (i JobErrorDetailResponseArgs) ToJobErrorDetailResponseOutputWithContext(ctx context.Context) JobErrorDetailResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobErrorDetailResponseOutput)
}

// JobErrorDetailResponseArrayInput is an input type that accepts JobErrorDetailResponseArray and JobErrorDetailResponseArrayOutput values.
// You can construct a concrete instance of `JobErrorDetailResponseArrayInput` via:
//
//          JobErrorDetailResponseArray{ JobErrorDetailResponseArgs{...} }
type JobErrorDetailResponseArrayInput interface {
	pulumi.Input

	ToJobErrorDetailResponseArrayOutput() JobErrorDetailResponseArrayOutput
	ToJobErrorDetailResponseArrayOutputWithContext(context.Context) JobErrorDetailResponseArrayOutput
}

type JobErrorDetailResponseArray []JobErrorDetailResponseInput

func (JobErrorDetailResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobErrorDetailResponse)(nil)).Elem()
}

func (i JobErrorDetailResponseArray) ToJobErrorDetailResponseArrayOutput() JobErrorDetailResponseArrayOutput {
	return i.ToJobErrorDetailResponseArrayOutputWithContext(context.Background())
}

func (i JobErrorDetailResponseArray) ToJobErrorDetailResponseArrayOutputWithContext(ctx context.Context) JobErrorDetailResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobErrorDetailResponseArrayOutput)
}

// Details of JobOutput errors.
type JobErrorDetailResponseOutput struct{ *pulumi.OutputState }

func (JobErrorDetailResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobErrorDetailResponse)(nil)).Elem()
}

func (o JobErrorDetailResponseOutput) ToJobErrorDetailResponseOutput() JobErrorDetailResponseOutput {
	return o
}

func (o JobErrorDetailResponseOutput) ToJobErrorDetailResponseOutputWithContext(ctx context.Context) JobErrorDetailResponseOutput {
	return o
}

// Code describing the error detail.
func (o JobErrorDetailResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v JobErrorDetailResponse) string { return v.Code }).(pulumi.StringOutput)
}

// A human-readable representation of the error.
func (o JobErrorDetailResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v JobErrorDetailResponse) string { return v.Message }).(pulumi.StringOutput)
}

type JobErrorDetailResponseArrayOutput struct{ *pulumi.OutputState }

func (JobErrorDetailResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobErrorDetailResponse)(nil)).Elem()
}

func (o JobErrorDetailResponseArrayOutput) ToJobErrorDetailResponseArrayOutput() JobErrorDetailResponseArrayOutput {
	return o
}

func (o JobErrorDetailResponseArrayOutput) ToJobErrorDetailResponseArrayOutputWithContext(ctx context.Context) JobErrorDetailResponseArrayOutput {
	return o
}

func (o JobErrorDetailResponseArrayOutput) Index(i pulumi.IntInput) JobErrorDetailResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobErrorDetailResponse {
		return vs[0].([]JobErrorDetailResponse)[vs[1].(int)]
	}).(JobErrorDetailResponseOutput)
}

// Details of JobOutput errors.
type JobErrorResponse struct {
	// Helps with categorization of errors.
	Category string `pulumi:"category"`
	// Error code describing the error.
	Code string `pulumi:"code"`
	// An array of details about specific errors that led to this reported error.
	Details []JobErrorDetailResponse `pulumi:"details"`
	// A human-readable language-dependent representation of the error.
	Message string `pulumi:"message"`
	// Indicates that it may be possible to retry the Job. If retry is unsuccessful, please contact Azure support via Azure Portal.
	Retry string `pulumi:"retry"`
}

// JobErrorResponseInput is an input type that accepts JobErrorResponseArgs and JobErrorResponseOutput values.
// You can construct a concrete instance of `JobErrorResponseInput` via:
//
//          JobErrorResponseArgs{...}
type JobErrorResponseInput interface {
	pulumi.Input

	ToJobErrorResponseOutput() JobErrorResponseOutput
	ToJobErrorResponseOutputWithContext(context.Context) JobErrorResponseOutput
}

// Details of JobOutput errors.
type JobErrorResponseArgs struct {
	// Helps with categorization of errors.
	Category pulumi.StringInput `pulumi:"category"`
	// Error code describing the error.
	Code pulumi.StringInput `pulumi:"code"`
	// An array of details about specific errors that led to this reported error.
	Details JobErrorDetailResponseArrayInput `pulumi:"details"`
	// A human-readable language-dependent representation of the error.
	Message pulumi.StringInput `pulumi:"message"`
	// Indicates that it may be possible to retry the Job. If retry is unsuccessful, please contact Azure support via Azure Portal.
	Retry pulumi.StringInput `pulumi:"retry"`
}

func (JobErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobErrorResponse)(nil)).Elem()
}

func (i JobErrorResponseArgs) ToJobErrorResponseOutput() JobErrorResponseOutput {
	return i.ToJobErrorResponseOutputWithContext(context.Background())
}

func (i JobErrorResponseArgs) ToJobErrorResponseOutputWithContext(ctx context.Context) JobErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobErrorResponseOutput)
}

// Details of JobOutput errors.
type JobErrorResponseOutput struct{ *pulumi.OutputState }

func (JobErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobErrorResponse)(nil)).Elem()
}

func (o JobErrorResponseOutput) ToJobErrorResponseOutput() JobErrorResponseOutput {
	return o
}

func (o JobErrorResponseOutput) ToJobErrorResponseOutputWithContext(ctx context.Context) JobErrorResponseOutput {
	return o
}

// Helps with categorization of errors.
func (o JobErrorResponseOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v JobErrorResponse) string { return v.Category }).(pulumi.StringOutput)
}

// Error code describing the error.
func (o JobErrorResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v JobErrorResponse) string { return v.Code }).(pulumi.StringOutput)
}

// An array of details about specific errors that led to this reported error.
func (o JobErrorResponseOutput) Details() JobErrorDetailResponseArrayOutput {
	return o.ApplyT(func(v JobErrorResponse) []JobErrorDetailResponse { return v.Details }).(JobErrorDetailResponseArrayOutput)
}

// A human-readable language-dependent representation of the error.
func (o JobErrorResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v JobErrorResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Indicates that it may be possible to retry the Job. If retry is unsuccessful, please contact Azure support via Azure Portal.
func (o JobErrorResponseOutput) Retry() pulumi.StringOutput {
	return o.ApplyT(func(v JobErrorResponse) string { return v.Retry }).(pulumi.StringOutput)
}

// Base class for inputs to a Job.
type JobInput struct {
}

// JobInputInput is an input type that accepts JobInputArgs and JobInputOutput values.
// You can construct a concrete instance of `JobInputInput` via:
//
//          JobInputArgs{...}
type JobInputInput interface {
	pulumi.Input

	ToJobInputOutput() JobInputOutput
	ToJobInputOutputWithContext(context.Context) JobInputOutput
}

// Base class for inputs to a Job.
type JobInputArgs struct {
}

func (JobInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobInput)(nil)).Elem()
}

func (i JobInputArgs) ToJobInputOutput() JobInputOutput {
	return i.ToJobInputOutputWithContext(context.Background())
}

func (i JobInputArgs) ToJobInputOutputWithContext(ctx context.Context) JobInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobInputOutput)
}

func (i JobInputArgs) ToJobInputPtrOutput() JobInputPtrOutput {
	return i.ToJobInputPtrOutputWithContext(context.Background())
}

func (i JobInputArgs) ToJobInputPtrOutputWithContext(ctx context.Context) JobInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobInputOutput).ToJobInputPtrOutputWithContext(ctx)
}

// JobInputPtrInput is an input type that accepts JobInputArgs, JobInputPtr and JobInputPtrOutput values.
// You can construct a concrete instance of `JobInputPtrInput` via:
//
//          JobInputArgs{...}
//
//  or:
//
//          nil
type JobInputPtrInput interface {
	pulumi.Input

	ToJobInputPtrOutput() JobInputPtrOutput
	ToJobInputPtrOutputWithContext(context.Context) JobInputPtrOutput
}

type jobInputPtrType JobInputArgs

func JobInputPtr(v *JobInputArgs) JobInputPtrInput {
	return (*jobInputPtrType)(v)
}

func (*jobInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobInput)(nil)).Elem()
}

func (i *jobInputPtrType) ToJobInputPtrOutput() JobInputPtrOutput {
	return i.ToJobInputPtrOutputWithContext(context.Background())
}

func (i *jobInputPtrType) ToJobInputPtrOutputWithContext(ctx context.Context) JobInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobInputPtrOutput)
}

// Base class for inputs to a Job.
type JobInputOutput struct{ *pulumi.OutputState }

func (JobInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobInput)(nil)).Elem()
}

func (o JobInputOutput) ToJobInputOutput() JobInputOutput {
	return o
}

func (o JobInputOutput) ToJobInputOutputWithContext(ctx context.Context) JobInputOutput {
	return o
}

func (o JobInputOutput) ToJobInputPtrOutput() JobInputPtrOutput {
	return o.ToJobInputPtrOutputWithContext(context.Background())
}

func (o JobInputOutput) ToJobInputPtrOutputWithContext(ctx context.Context) JobInputPtrOutput {
	return o.ApplyT(func(v JobInput) *JobInput {
		return &v
	}).(JobInputPtrOutput)
}

type JobInputPtrOutput struct{ *pulumi.OutputState }

func (JobInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobInput)(nil)).Elem()
}

func (o JobInputPtrOutput) ToJobInputPtrOutput() JobInputPtrOutput {
	return o
}

func (o JobInputPtrOutput) ToJobInputPtrOutputWithContext(ctx context.Context) JobInputPtrOutput {
	return o
}

func (o JobInputPtrOutput) Elem() JobInputOutput {
	return o.ApplyT(func(v *JobInput) JobInput { return *v }).(JobInputOutput)
}

// Base class for inputs to a Job.
type JobInputResponse struct {
}

// JobInputResponseInput is an input type that accepts JobInputResponseArgs and JobInputResponseOutput values.
// You can construct a concrete instance of `JobInputResponseInput` via:
//
//          JobInputResponseArgs{...}
type JobInputResponseInput interface {
	pulumi.Input

	ToJobInputResponseOutput() JobInputResponseOutput
	ToJobInputResponseOutputWithContext(context.Context) JobInputResponseOutput
}

// Base class for inputs to a Job.
type JobInputResponseArgs struct {
}

func (JobInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobInputResponse)(nil)).Elem()
}

func (i JobInputResponseArgs) ToJobInputResponseOutput() JobInputResponseOutput {
	return i.ToJobInputResponseOutputWithContext(context.Background())
}

func (i JobInputResponseArgs) ToJobInputResponseOutputWithContext(ctx context.Context) JobInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobInputResponseOutput)
}

func (i JobInputResponseArgs) ToJobInputResponsePtrOutput() JobInputResponsePtrOutput {
	return i.ToJobInputResponsePtrOutputWithContext(context.Background())
}

func (i JobInputResponseArgs) ToJobInputResponsePtrOutputWithContext(ctx context.Context) JobInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobInputResponseOutput).ToJobInputResponsePtrOutputWithContext(ctx)
}

// JobInputResponsePtrInput is an input type that accepts JobInputResponseArgs, JobInputResponsePtr and JobInputResponsePtrOutput values.
// You can construct a concrete instance of `JobInputResponsePtrInput` via:
//
//          JobInputResponseArgs{...}
//
//  or:
//
//          nil
type JobInputResponsePtrInput interface {
	pulumi.Input

	ToJobInputResponsePtrOutput() JobInputResponsePtrOutput
	ToJobInputResponsePtrOutputWithContext(context.Context) JobInputResponsePtrOutput
}

type jobInputResponsePtrType JobInputResponseArgs

func JobInputResponsePtr(v *JobInputResponseArgs) JobInputResponsePtrInput {
	return (*jobInputResponsePtrType)(v)
}

func (*jobInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobInputResponse)(nil)).Elem()
}

func (i *jobInputResponsePtrType) ToJobInputResponsePtrOutput() JobInputResponsePtrOutput {
	return i.ToJobInputResponsePtrOutputWithContext(context.Background())
}

func (i *jobInputResponsePtrType) ToJobInputResponsePtrOutputWithContext(ctx context.Context) JobInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobInputResponsePtrOutput)
}

// Base class for inputs to a Job.
type JobInputResponseOutput struct{ *pulumi.OutputState }

func (JobInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobInputResponse)(nil)).Elem()
}

func (o JobInputResponseOutput) ToJobInputResponseOutput() JobInputResponseOutput {
	return o
}

func (o JobInputResponseOutput) ToJobInputResponseOutputWithContext(ctx context.Context) JobInputResponseOutput {
	return o
}

func (o JobInputResponseOutput) ToJobInputResponsePtrOutput() JobInputResponsePtrOutput {
	return o.ToJobInputResponsePtrOutputWithContext(context.Background())
}

func (o JobInputResponseOutput) ToJobInputResponsePtrOutputWithContext(ctx context.Context) JobInputResponsePtrOutput {
	return o.ApplyT(func(v JobInputResponse) *JobInputResponse {
		return &v
	}).(JobInputResponsePtrOutput)
}

type JobInputResponsePtrOutput struct{ *pulumi.OutputState }

func (JobInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobInputResponse)(nil)).Elem()
}

func (o JobInputResponsePtrOutput) ToJobInputResponsePtrOutput() JobInputResponsePtrOutput {
	return o
}

func (o JobInputResponsePtrOutput) ToJobInputResponsePtrOutputWithContext(ctx context.Context) JobInputResponsePtrOutput {
	return o
}

func (o JobInputResponsePtrOutput) Elem() JobInputResponseOutput {
	return o.ApplyT(func(v *JobInputResponse) JobInputResponse { return *v }).(JobInputResponseOutput)
}

// Describes all the properties of a JobOutput.
type JobOutput struct {
	// A label that is assigned to a JobOutput in order to help uniquely identify it. This is useful when your Transform has more than one TransformOutput, whereby your Job has more than one JobOutput. In such cases, when you submit the Job, you will add two or more JobOutputs, in the same order as TransformOutputs in the Transform. Subsequently, when you retrieve the Job, either through events or on a GET request, you can use the label to easily identify the JobOutput. If a label is not provided, a default value of '{presetName}_{outputIndex}' will be used, where the preset name is the name of the preset in the corresponding TransformOutput and the output index is the relative index of the this JobOutput within the Job. Note that this index is the same as the relative index of the corresponding TransformOutput within its Transform.
	Label *string `pulumi:"label"`
}

// JobOutputInput is an input type that accepts JobOutputArgs and JobOutputOutput values.
// You can construct a concrete instance of `JobOutputInput` via:
//
//          JobOutputArgs{...}
type JobOutputInput interface {
	pulumi.Input

	ToJobOutputOutput() JobOutputOutput
	ToJobOutputOutputWithContext(context.Context) JobOutputOutput
}

// Describes all the properties of a JobOutput.
type JobOutputArgs struct {
	// A label that is assigned to a JobOutput in order to help uniquely identify it. This is useful when your Transform has more than one TransformOutput, whereby your Job has more than one JobOutput. In such cases, when you submit the Job, you will add two or more JobOutputs, in the same order as TransformOutputs in the Transform. Subsequently, when you retrieve the Job, either through events or on a GET request, you can use the label to easily identify the JobOutput. If a label is not provided, a default value of '{presetName}_{outputIndex}' will be used, where the preset name is the name of the preset in the corresponding TransformOutput and the output index is the relative index of the this JobOutput within the Job. Note that this index is the same as the relative index of the corresponding TransformOutput within its Transform.
	Label pulumi.StringPtrInput `pulumi:"label"`
}

func (JobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobOutput)(nil)).Elem()
}

func (i JobOutputArgs) ToJobOutputOutput() JobOutputOutput {
	return i.ToJobOutputOutputWithContext(context.Background())
}

func (i JobOutputArgs) ToJobOutputOutputWithContext(ctx context.Context) JobOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutputOutput)
}

// JobOutputArrayInput is an input type that accepts JobOutputArray and JobOutputArrayOutput values.
// You can construct a concrete instance of `JobOutputArrayInput` via:
//
//          JobOutputArray{ JobOutputArgs{...} }
type JobOutputArrayInput interface {
	pulumi.Input

	ToJobOutputArrayOutput() JobOutputArrayOutput
	ToJobOutputArrayOutputWithContext(context.Context) JobOutputArrayOutput
}

type JobOutputArray []JobOutputInput

func (JobOutputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobOutput)(nil)).Elem()
}

func (i JobOutputArray) ToJobOutputArrayOutput() JobOutputArrayOutput {
	return i.ToJobOutputArrayOutputWithContext(context.Background())
}

func (i JobOutputArray) ToJobOutputArrayOutputWithContext(ctx context.Context) JobOutputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutputArrayOutput)
}

// Describes all the properties of a JobOutput.
type JobOutputOutput struct{ *pulumi.OutputState }

func (JobOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobOutput)(nil)).Elem()
}

func (o JobOutputOutput) ToJobOutputOutput() JobOutputOutput {
	return o
}

func (o JobOutputOutput) ToJobOutputOutputWithContext(ctx context.Context) JobOutputOutput {
	return o
}

// A label that is assigned to a JobOutput in order to help uniquely identify it. This is useful when your Transform has more than one TransformOutput, whereby your Job has more than one JobOutput. In such cases, when you submit the Job, you will add two or more JobOutputs, in the same order as TransformOutputs in the Transform. Subsequently, when you retrieve the Job, either through events or on a GET request, you can use the label to easily identify the JobOutput. If a label is not provided, a default value of '{presetName}_{outputIndex}' will be used, where the preset name is the name of the preset in the corresponding TransformOutput and the output index is the relative index of the this JobOutput within the Job. Note that this index is the same as the relative index of the corresponding TransformOutput within its Transform.
func (o JobOutputOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobOutput) *string { return v.Label }).(pulumi.StringPtrOutput)
}

type JobOutputArrayOutput struct{ *pulumi.OutputState }

func (JobOutputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobOutput)(nil)).Elem()
}

func (o JobOutputArrayOutput) ToJobOutputArrayOutput() JobOutputArrayOutput {
	return o
}

func (o JobOutputArrayOutput) ToJobOutputArrayOutputWithContext(ctx context.Context) JobOutputArrayOutput {
	return o
}

func (o JobOutputArrayOutput) Index(i pulumi.IntInput) JobOutputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobOutput {
		return vs[0].([]JobOutput)[vs[1].(int)]
	}).(JobOutputOutput)
}

// Describes all the properties of a JobOutput.
type JobOutputResponse struct {
	// The UTC date and time at which this Job Output finished processing.
	EndTime string `pulumi:"endTime"`
	// If the JobOutput is in the Error state, it contains the details of the error.
	Error JobErrorResponse `pulumi:"error"`
	// A label that is assigned to a JobOutput in order to help uniquely identify it. This is useful when your Transform has more than one TransformOutput, whereby your Job has more than one JobOutput. In such cases, when you submit the Job, you will add two or more JobOutputs, in the same order as TransformOutputs in the Transform. Subsequently, when you retrieve the Job, either through events or on a GET request, you can use the label to easily identify the JobOutput. If a label is not provided, a default value of '{presetName}_{outputIndex}' will be used, where the preset name is the name of the preset in the corresponding TransformOutput and the output index is the relative index of the this JobOutput within the Job. Note that this index is the same as the relative index of the corresponding TransformOutput within its Transform.
	Label *string `pulumi:"label"`
	// If the JobOutput is in a Processing state, this contains the Job completion percentage. The value is an estimate and not intended to be used to predict Job completion times. To determine if the JobOutput is complete, use the State property.
	Progress int `pulumi:"progress"`
	// The UTC date and time at which this Job Output began processing.
	StartTime string `pulumi:"startTime"`
	// Describes the state of the JobOutput.
	State string `pulumi:"state"`
}

// JobOutputResponseInput is an input type that accepts JobOutputResponseArgs and JobOutputResponseOutput values.
// You can construct a concrete instance of `JobOutputResponseInput` via:
//
//          JobOutputResponseArgs{...}
type JobOutputResponseInput interface {
	pulumi.Input

	ToJobOutputResponseOutput() JobOutputResponseOutput
	ToJobOutputResponseOutputWithContext(context.Context) JobOutputResponseOutput
}

// Describes all the properties of a JobOutput.
type JobOutputResponseArgs struct {
	// The UTC date and time at which this Job Output finished processing.
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// If the JobOutput is in the Error state, it contains the details of the error.
	Error JobErrorResponseInput `pulumi:"error"`
	// A label that is assigned to a JobOutput in order to help uniquely identify it. This is useful when your Transform has more than one TransformOutput, whereby your Job has more than one JobOutput. In such cases, when you submit the Job, you will add two or more JobOutputs, in the same order as TransformOutputs in the Transform. Subsequently, when you retrieve the Job, either through events or on a GET request, you can use the label to easily identify the JobOutput. If a label is not provided, a default value of '{presetName}_{outputIndex}' will be used, where the preset name is the name of the preset in the corresponding TransformOutput and the output index is the relative index of the this JobOutput within the Job. Note that this index is the same as the relative index of the corresponding TransformOutput within its Transform.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// If the JobOutput is in a Processing state, this contains the Job completion percentage. The value is an estimate and not intended to be used to predict Job completion times. To determine if the JobOutput is complete, use the State property.
	Progress pulumi.IntInput `pulumi:"progress"`
	// The UTC date and time at which this Job Output began processing.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// Describes the state of the JobOutput.
	State pulumi.StringInput `pulumi:"state"`
}

func (JobOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobOutputResponse)(nil)).Elem()
}

func (i JobOutputResponseArgs) ToJobOutputResponseOutput() JobOutputResponseOutput {
	return i.ToJobOutputResponseOutputWithContext(context.Background())
}

func (i JobOutputResponseArgs) ToJobOutputResponseOutputWithContext(ctx context.Context) JobOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutputResponseOutput)
}

// JobOutputResponseArrayInput is an input type that accepts JobOutputResponseArray and JobOutputResponseArrayOutput values.
// You can construct a concrete instance of `JobOutputResponseArrayInput` via:
//
//          JobOutputResponseArray{ JobOutputResponseArgs{...} }
type JobOutputResponseArrayInput interface {
	pulumi.Input

	ToJobOutputResponseArrayOutput() JobOutputResponseArrayOutput
	ToJobOutputResponseArrayOutputWithContext(context.Context) JobOutputResponseArrayOutput
}

type JobOutputResponseArray []JobOutputResponseInput

func (JobOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobOutputResponse)(nil)).Elem()
}

func (i JobOutputResponseArray) ToJobOutputResponseArrayOutput() JobOutputResponseArrayOutput {
	return i.ToJobOutputResponseArrayOutputWithContext(context.Background())
}

func (i JobOutputResponseArray) ToJobOutputResponseArrayOutputWithContext(ctx context.Context) JobOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutputResponseArrayOutput)
}

// Describes all the properties of a JobOutput.
type JobOutputResponseOutput struct{ *pulumi.OutputState }

func (JobOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobOutputResponse)(nil)).Elem()
}

func (o JobOutputResponseOutput) ToJobOutputResponseOutput() JobOutputResponseOutput {
	return o
}

func (o JobOutputResponseOutput) ToJobOutputResponseOutputWithContext(ctx context.Context) JobOutputResponseOutput {
	return o
}

// The UTC date and time at which this Job Output finished processing.
func (o JobOutputResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v JobOutputResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// If the JobOutput is in the Error state, it contains the details of the error.
func (o JobOutputResponseOutput) Error() JobErrorResponseOutput {
	return o.ApplyT(func(v JobOutputResponse) JobErrorResponse { return v.Error }).(JobErrorResponseOutput)
}

// A label that is assigned to a JobOutput in order to help uniquely identify it. This is useful when your Transform has more than one TransformOutput, whereby your Job has more than one JobOutput. In such cases, when you submit the Job, you will add two or more JobOutputs, in the same order as TransformOutputs in the Transform. Subsequently, when you retrieve the Job, either through events or on a GET request, you can use the label to easily identify the JobOutput. If a label is not provided, a default value of '{presetName}_{outputIndex}' will be used, where the preset name is the name of the preset in the corresponding TransformOutput and the output index is the relative index of the this JobOutput within the Job. Note that this index is the same as the relative index of the corresponding TransformOutput within its Transform.
func (o JobOutputResponseOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobOutputResponse) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// If the JobOutput is in a Processing state, this contains the Job completion percentage. The value is an estimate and not intended to be used to predict Job completion times. To determine if the JobOutput is complete, use the State property.
func (o JobOutputResponseOutput) Progress() pulumi.IntOutput {
	return o.ApplyT(func(v JobOutputResponse) int { return v.Progress }).(pulumi.IntOutput)
}

// The UTC date and time at which this Job Output began processing.
func (o JobOutputResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v JobOutputResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Describes the state of the JobOutput.
func (o JobOutputResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v JobOutputResponse) string { return v.State }).(pulumi.StringOutput)
}

type JobOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (JobOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobOutputResponse)(nil)).Elem()
}

func (o JobOutputResponseArrayOutput) ToJobOutputResponseArrayOutput() JobOutputResponseArrayOutput {
	return o
}

func (o JobOutputResponseArrayOutput) ToJobOutputResponseArrayOutputWithContext(ctx context.Context) JobOutputResponseArrayOutput {
	return o
}

func (o JobOutputResponseArrayOutput) Index(i pulumi.IntInput) JobOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobOutputResponse {
		return vs[0].([]JobOutputResponse)[vs[1].(int)]
	}).(JobOutputResponseOutput)
}

// Properties of the Job.
type JobPropertiesResponse struct {
	// Customer provided key, value pairs that will be returned in Job and JobOutput state events.
	CorrelationData map[string]string `pulumi:"correlationData"`
	// The UTC date and time when the Job was created, in 'YYYY-MM-DDThh:mm:ssZ' format.
	Created string `pulumi:"created"`
	// Optional customer supplied description of the Job.
	Description *string `pulumi:"description"`
	// The UTC date and time at which this Job finished processing.
	EndTime string `pulumi:"endTime"`
	// The inputs for the Job.
	Input JobInputResponse `pulumi:"input"`
	// The UTC date and time when the Job was last updated, in 'YYYY-MM-DDThh:mm:ssZ' format.
	LastModified string `pulumi:"lastModified"`
	// The outputs for the Job.
	Outputs []JobOutputResponse `pulumi:"outputs"`
	// Priority with which the job should be processed. Higher priority jobs are processed before lower priority jobs. If not set, the default is normal.
	Priority *string `pulumi:"priority"`
	// The UTC date and time at which this Job began processing.
	StartTime string `pulumi:"startTime"`
	// The current state of the job.
	State string `pulumi:"state"`
}

// JobPropertiesResponseInput is an input type that accepts JobPropertiesResponseArgs and JobPropertiesResponseOutput values.
// You can construct a concrete instance of `JobPropertiesResponseInput` via:
//
//          JobPropertiesResponseArgs{...}
type JobPropertiesResponseInput interface {
	pulumi.Input

	ToJobPropertiesResponseOutput() JobPropertiesResponseOutput
	ToJobPropertiesResponseOutputWithContext(context.Context) JobPropertiesResponseOutput
}

// Properties of the Job.
type JobPropertiesResponseArgs struct {
	// Customer provided key, value pairs that will be returned in Job and JobOutput state events.
	CorrelationData pulumi.StringMapInput `pulumi:"correlationData"`
	// The UTC date and time when the Job was created, in 'YYYY-MM-DDThh:mm:ssZ' format.
	Created pulumi.StringInput `pulumi:"created"`
	// Optional customer supplied description of the Job.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The UTC date and time at which this Job finished processing.
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// The inputs for the Job.
	Input JobInputResponseInput `pulumi:"input"`
	// The UTC date and time when the Job was last updated, in 'YYYY-MM-DDThh:mm:ssZ' format.
	LastModified pulumi.StringInput `pulumi:"lastModified"`
	// The outputs for the Job.
	Outputs JobOutputResponseArrayInput `pulumi:"outputs"`
	// Priority with which the job should be processed. Higher priority jobs are processed before lower priority jobs. If not set, the default is normal.
	Priority pulumi.StringPtrInput `pulumi:"priority"`
	// The UTC date and time at which this Job began processing.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// The current state of the job.
	State pulumi.StringInput `pulumi:"state"`
}

func (JobPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobPropertiesResponse)(nil)).Elem()
}

func (i JobPropertiesResponseArgs) ToJobPropertiesResponseOutput() JobPropertiesResponseOutput {
	return i.ToJobPropertiesResponseOutputWithContext(context.Background())
}

func (i JobPropertiesResponseArgs) ToJobPropertiesResponseOutputWithContext(ctx context.Context) JobPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPropertiesResponseOutput)
}

func (i JobPropertiesResponseArgs) ToJobPropertiesResponsePtrOutput() JobPropertiesResponsePtrOutput {
	return i.ToJobPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i JobPropertiesResponseArgs) ToJobPropertiesResponsePtrOutputWithContext(ctx context.Context) JobPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPropertiesResponseOutput).ToJobPropertiesResponsePtrOutputWithContext(ctx)
}

// JobPropertiesResponsePtrInput is an input type that accepts JobPropertiesResponseArgs, JobPropertiesResponsePtr and JobPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `JobPropertiesResponsePtrInput` via:
//
//          JobPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type JobPropertiesResponsePtrInput interface {
	pulumi.Input

	ToJobPropertiesResponsePtrOutput() JobPropertiesResponsePtrOutput
	ToJobPropertiesResponsePtrOutputWithContext(context.Context) JobPropertiesResponsePtrOutput
}

type jobPropertiesResponsePtrType JobPropertiesResponseArgs

func JobPropertiesResponsePtr(v *JobPropertiesResponseArgs) JobPropertiesResponsePtrInput {
	return (*jobPropertiesResponsePtrType)(v)
}

func (*jobPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobPropertiesResponse)(nil)).Elem()
}

func (i *jobPropertiesResponsePtrType) ToJobPropertiesResponsePtrOutput() JobPropertiesResponsePtrOutput {
	return i.ToJobPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *jobPropertiesResponsePtrType) ToJobPropertiesResponsePtrOutputWithContext(ctx context.Context) JobPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobPropertiesResponsePtrOutput)
}

// Properties of the Job.
type JobPropertiesResponseOutput struct{ *pulumi.OutputState }

func (JobPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobPropertiesResponse)(nil)).Elem()
}

func (o JobPropertiesResponseOutput) ToJobPropertiesResponseOutput() JobPropertiesResponseOutput {
	return o
}

func (o JobPropertiesResponseOutput) ToJobPropertiesResponseOutputWithContext(ctx context.Context) JobPropertiesResponseOutput {
	return o
}

func (o JobPropertiesResponseOutput) ToJobPropertiesResponsePtrOutput() JobPropertiesResponsePtrOutput {
	return o.ToJobPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o JobPropertiesResponseOutput) ToJobPropertiesResponsePtrOutputWithContext(ctx context.Context) JobPropertiesResponsePtrOutput {
	return o.ApplyT(func(v JobPropertiesResponse) *JobPropertiesResponse {
		return &v
	}).(JobPropertiesResponsePtrOutput)
}

// Customer provided key, value pairs that will be returned in Job and JobOutput state events.
func (o JobPropertiesResponseOutput) CorrelationData() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobPropertiesResponse) map[string]string { return v.CorrelationData }).(pulumi.StringMapOutput)
}

// The UTC date and time when the Job was created, in 'YYYY-MM-DDThh:mm:ssZ' format.
func (o JobPropertiesResponseOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v JobPropertiesResponse) string { return v.Created }).(pulumi.StringOutput)
}

// Optional customer supplied description of the Job.
func (o JobPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The UTC date and time at which this Job finished processing.
func (o JobPropertiesResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v JobPropertiesResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// The inputs for the Job.
func (o JobPropertiesResponseOutput) Input() JobInputResponseOutput {
	return o.ApplyT(func(v JobPropertiesResponse) JobInputResponse { return v.Input }).(JobInputResponseOutput)
}

// The UTC date and time when the Job was last updated, in 'YYYY-MM-DDThh:mm:ssZ' format.
func (o JobPropertiesResponseOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v JobPropertiesResponse) string { return v.LastModified }).(pulumi.StringOutput)
}

// The outputs for the Job.
func (o JobPropertiesResponseOutput) Outputs() JobOutputResponseArrayOutput {
	return o.ApplyT(func(v JobPropertiesResponse) []JobOutputResponse { return v.Outputs }).(JobOutputResponseArrayOutput)
}

// Priority with which the job should be processed. Higher priority jobs are processed before lower priority jobs. If not set, the default is normal.
func (o JobPropertiesResponseOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobPropertiesResponse) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

// The UTC date and time at which this Job began processing.
func (o JobPropertiesResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v JobPropertiesResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// The current state of the job.
func (o JobPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v JobPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

type JobPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (JobPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobPropertiesResponse)(nil)).Elem()
}

func (o JobPropertiesResponsePtrOutput) ToJobPropertiesResponsePtrOutput() JobPropertiesResponsePtrOutput {
	return o
}

func (o JobPropertiesResponsePtrOutput) ToJobPropertiesResponsePtrOutputWithContext(ctx context.Context) JobPropertiesResponsePtrOutput {
	return o
}

func (o JobPropertiesResponsePtrOutput) Elem() JobPropertiesResponseOutput {
	return o.ApplyT(func(v *JobPropertiesResponse) JobPropertiesResponse { return *v }).(JobPropertiesResponseOutput)
}

// Customer provided key, value pairs that will be returned in Job and JobOutput state events.
func (o JobPropertiesResponsePtrOutput) CorrelationData() pulumi.StringMapOutput {
	return o.ApplyT(func(v *JobPropertiesResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.CorrelationData
	}).(pulumi.StringMapOutput)
}

// The UTC date and time when the Job was created, in 'YYYY-MM-DDThh:mm:ssZ' format.
func (o JobPropertiesResponsePtrOutput) Created() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Created
	}).(pulumi.StringPtrOutput)
}

// Optional customer supplied description of the Job.
func (o JobPropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The UTC date and time at which this Job finished processing.
func (o JobPropertiesResponsePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndTime
	}).(pulumi.StringPtrOutput)
}

// The inputs for the Job.
func (o JobPropertiesResponsePtrOutput) Input() JobInputResponsePtrOutput {
	return o.ApplyT(func(v *JobPropertiesResponse) *JobInputResponse {
		if v == nil {
			return nil
		}
		return &v.Input
	}).(JobInputResponsePtrOutput)
}

// The UTC date and time when the Job was last updated, in 'YYYY-MM-DDThh:mm:ssZ' format.
func (o JobPropertiesResponsePtrOutput) LastModified() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastModified
	}).(pulumi.StringPtrOutput)
}

// The outputs for the Job.
func (o JobPropertiesResponsePtrOutput) Outputs() JobOutputResponseArrayOutput {
	return o.ApplyT(func(v *JobPropertiesResponse) []JobOutputResponse {
		if v == nil {
			return nil
		}
		return v.Outputs
	}).(JobOutputResponseArrayOutput)
}

// Priority with which the job should be processed. Higher priority jobs are processed before lower priority jobs. If not set, the default is normal.
func (o JobPropertiesResponsePtrOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.StringPtrOutput)
}

// The UTC date and time at which this Job began processing.
func (o JobPropertiesResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The current state of the job.
func (o JobPropertiesResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.State
	}).(pulumi.StringPtrOutput)
}

type KeyVaultProperties struct {
	// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).
	KeyIdentifier *string `pulumi:"keyIdentifier"`
}

// KeyVaultPropertiesInput is an input type that accepts KeyVaultPropertiesArgs and KeyVaultPropertiesOutput values.
// You can construct a concrete instance of `KeyVaultPropertiesInput` via:
//
//          KeyVaultPropertiesArgs{...}
type KeyVaultPropertiesInput interface {
	pulumi.Input

	ToKeyVaultPropertiesOutput() KeyVaultPropertiesOutput
	ToKeyVaultPropertiesOutputWithContext(context.Context) KeyVaultPropertiesOutput
}

type KeyVaultPropertiesArgs struct {
	// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).
	KeyIdentifier pulumi.StringPtrInput `pulumi:"keyIdentifier"`
}

func (KeyVaultPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultProperties)(nil)).Elem()
}

func (i KeyVaultPropertiesArgs) ToKeyVaultPropertiesOutput() KeyVaultPropertiesOutput {
	return i.ToKeyVaultPropertiesOutputWithContext(context.Background())
}

func (i KeyVaultPropertiesArgs) ToKeyVaultPropertiesOutputWithContext(ctx context.Context) KeyVaultPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesOutput)
}

func (i KeyVaultPropertiesArgs) ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput {
	return i.ToKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (i KeyVaultPropertiesArgs) ToKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesOutput).ToKeyVaultPropertiesPtrOutputWithContext(ctx)
}

// KeyVaultPropertiesPtrInput is an input type that accepts KeyVaultPropertiesArgs, KeyVaultPropertiesPtr and KeyVaultPropertiesPtrOutput values.
// You can construct a concrete instance of `KeyVaultPropertiesPtrInput` via:
//
//          KeyVaultPropertiesArgs{...}
//
//  or:
//
//          nil
type KeyVaultPropertiesPtrInput interface {
	pulumi.Input

	ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput
	ToKeyVaultPropertiesPtrOutputWithContext(context.Context) KeyVaultPropertiesPtrOutput
}

type keyVaultPropertiesPtrType KeyVaultPropertiesArgs

func KeyVaultPropertiesPtr(v *KeyVaultPropertiesArgs) KeyVaultPropertiesPtrInput {
	return (*keyVaultPropertiesPtrType)(v)
}

func (*keyVaultPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultProperties)(nil)).Elem()
}

func (i *keyVaultPropertiesPtrType) ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput {
	return i.ToKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (i *keyVaultPropertiesPtrType) ToKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesPtrOutput)
}

type KeyVaultPropertiesOutput struct{ *pulumi.OutputState }

func (KeyVaultPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultProperties)(nil)).Elem()
}

func (o KeyVaultPropertiesOutput) ToKeyVaultPropertiesOutput() KeyVaultPropertiesOutput {
	return o
}

func (o KeyVaultPropertiesOutput) ToKeyVaultPropertiesOutputWithContext(ctx context.Context) KeyVaultPropertiesOutput {
	return o
}

func (o KeyVaultPropertiesOutput) ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput {
	return o.ToKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (o KeyVaultPropertiesOutput) ToKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultPropertiesPtrOutput {
	return o.ApplyT(func(v KeyVaultProperties) *KeyVaultProperties {
		return &v
	}).(KeyVaultPropertiesPtrOutput)
}

// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).
func (o KeyVaultPropertiesOutput) KeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultProperties) *string { return v.KeyIdentifier }).(pulumi.StringPtrOutput)
}

type KeyVaultPropertiesPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultProperties)(nil)).Elem()
}

func (o KeyVaultPropertiesPtrOutput) ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput {
	return o
}

func (o KeyVaultPropertiesPtrOutput) ToKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultPropertiesPtrOutput {
	return o
}

func (o KeyVaultPropertiesPtrOutput) Elem() KeyVaultPropertiesOutput {
	return o.ApplyT(func(v *KeyVaultProperties) KeyVaultProperties { return *v }).(KeyVaultPropertiesOutput)
}

// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).
func (o KeyVaultPropertiesPtrOutput) KeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultProperties) *string {
		if v == nil {
			return nil
		}
		return v.KeyIdentifier
	}).(pulumi.StringPtrOutput)
}

type KeyVaultPropertiesResponse struct {
	// The current key used to encrypt the Media Services account, including the key version.
	CurrentKeyIdentifier string `pulumi:"currentKeyIdentifier"`
	// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).
	KeyIdentifier *string `pulumi:"keyIdentifier"`
}

// KeyVaultPropertiesResponseInput is an input type that accepts KeyVaultPropertiesResponseArgs and KeyVaultPropertiesResponseOutput values.
// You can construct a concrete instance of `KeyVaultPropertiesResponseInput` via:
//
//          KeyVaultPropertiesResponseArgs{...}
type KeyVaultPropertiesResponseInput interface {
	pulumi.Input

	ToKeyVaultPropertiesResponseOutput() KeyVaultPropertiesResponseOutput
	ToKeyVaultPropertiesResponseOutputWithContext(context.Context) KeyVaultPropertiesResponseOutput
}

type KeyVaultPropertiesResponseArgs struct {
	// The current key used to encrypt the Media Services account, including the key version.
	CurrentKeyIdentifier pulumi.StringInput `pulumi:"currentKeyIdentifier"`
	// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).
	KeyIdentifier pulumi.StringPtrInput `pulumi:"keyIdentifier"`
}

func (KeyVaultPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultPropertiesResponse)(nil)).Elem()
}

func (i KeyVaultPropertiesResponseArgs) ToKeyVaultPropertiesResponseOutput() KeyVaultPropertiesResponseOutput {
	return i.ToKeyVaultPropertiesResponseOutputWithContext(context.Background())
}

func (i KeyVaultPropertiesResponseArgs) ToKeyVaultPropertiesResponseOutputWithContext(ctx context.Context) KeyVaultPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesResponseOutput)
}

func (i KeyVaultPropertiesResponseArgs) ToKeyVaultPropertiesResponsePtrOutput() KeyVaultPropertiesResponsePtrOutput {
	return i.ToKeyVaultPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i KeyVaultPropertiesResponseArgs) ToKeyVaultPropertiesResponsePtrOutputWithContext(ctx context.Context) KeyVaultPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesResponseOutput).ToKeyVaultPropertiesResponsePtrOutputWithContext(ctx)
}

// KeyVaultPropertiesResponsePtrInput is an input type that accepts KeyVaultPropertiesResponseArgs, KeyVaultPropertiesResponsePtr and KeyVaultPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `KeyVaultPropertiesResponsePtrInput` via:
//
//          KeyVaultPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type KeyVaultPropertiesResponsePtrInput interface {
	pulumi.Input

	ToKeyVaultPropertiesResponsePtrOutput() KeyVaultPropertiesResponsePtrOutput
	ToKeyVaultPropertiesResponsePtrOutputWithContext(context.Context) KeyVaultPropertiesResponsePtrOutput
}

type keyVaultPropertiesResponsePtrType KeyVaultPropertiesResponseArgs

func KeyVaultPropertiesResponsePtr(v *KeyVaultPropertiesResponseArgs) KeyVaultPropertiesResponsePtrInput {
	return (*keyVaultPropertiesResponsePtrType)(v)
}

func (*keyVaultPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultPropertiesResponse)(nil)).Elem()
}

func (i *keyVaultPropertiesResponsePtrType) ToKeyVaultPropertiesResponsePtrOutput() KeyVaultPropertiesResponsePtrOutput {
	return i.ToKeyVaultPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *keyVaultPropertiesResponsePtrType) ToKeyVaultPropertiesResponsePtrOutputWithContext(ctx context.Context) KeyVaultPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesResponsePtrOutput)
}

type KeyVaultPropertiesResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultPropertiesResponse)(nil)).Elem()
}

func (o KeyVaultPropertiesResponseOutput) ToKeyVaultPropertiesResponseOutput() KeyVaultPropertiesResponseOutput {
	return o
}

func (o KeyVaultPropertiesResponseOutput) ToKeyVaultPropertiesResponseOutputWithContext(ctx context.Context) KeyVaultPropertiesResponseOutput {
	return o
}

func (o KeyVaultPropertiesResponseOutput) ToKeyVaultPropertiesResponsePtrOutput() KeyVaultPropertiesResponsePtrOutput {
	return o.ToKeyVaultPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o KeyVaultPropertiesResponseOutput) ToKeyVaultPropertiesResponsePtrOutputWithContext(ctx context.Context) KeyVaultPropertiesResponsePtrOutput {
	return o.ApplyT(func(v KeyVaultPropertiesResponse) *KeyVaultPropertiesResponse {
		return &v
	}).(KeyVaultPropertiesResponsePtrOutput)
}

// The current key used to encrypt the Media Services account, including the key version.
func (o KeyVaultPropertiesResponseOutput) CurrentKeyIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultPropertiesResponse) string { return v.CurrentKeyIdentifier }).(pulumi.StringOutput)
}

// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).
func (o KeyVaultPropertiesResponseOutput) KeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultPropertiesResponse) *string { return v.KeyIdentifier }).(pulumi.StringPtrOutput)
}

type KeyVaultPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultPropertiesResponse)(nil)).Elem()
}

func (o KeyVaultPropertiesResponsePtrOutput) ToKeyVaultPropertiesResponsePtrOutput() KeyVaultPropertiesResponsePtrOutput {
	return o
}

func (o KeyVaultPropertiesResponsePtrOutput) ToKeyVaultPropertiesResponsePtrOutputWithContext(ctx context.Context) KeyVaultPropertiesResponsePtrOutput {
	return o
}

func (o KeyVaultPropertiesResponsePtrOutput) Elem() KeyVaultPropertiesResponseOutput {
	return o.ApplyT(func(v *KeyVaultPropertiesResponse) KeyVaultPropertiesResponse { return *v }).(KeyVaultPropertiesResponseOutput)
}

// The current key used to encrypt the Media Services account, including the key version.
func (o KeyVaultPropertiesResponsePtrOutput) CurrentKeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CurrentKeyIdentifier
	}).(pulumi.StringPtrOutput)
}

// The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey).
func (o KeyVaultPropertiesResponsePtrOutput) KeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyIdentifier
	}).(pulumi.StringPtrOutput)
}

// The Live Event.
type LiveEventType struct {
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The Live Event properties.
	Properties LiveEventPropertiesResponse `pulumi:"properties"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type string `pulumi:"type"`
}

// LiveEventTypeInput is an input type that accepts LiveEventTypeArgs and LiveEventTypeOutput values.
// You can construct a concrete instance of `LiveEventTypeInput` via:
//
//          LiveEventTypeArgs{...}
type LiveEventTypeInput interface {
	pulumi.Input

	ToLiveEventTypeOutput() LiveEventTypeOutput
	ToLiveEventTypeOutputWithContext(context.Context) LiveEventTypeOutput
}

// The Live Event.
type LiveEventTypeArgs struct {
	// The geo-location where the resource lives
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The Live Event properties.
	Properties LiveEventPropertiesResponseInput `pulumi:"properties"`
	// Resource tags.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LiveEventTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventType)(nil)).Elem()
}

func (i LiveEventTypeArgs) ToLiveEventTypeOutput() LiveEventTypeOutput {
	return i.ToLiveEventTypeOutputWithContext(context.Background())
}

func (i LiveEventTypeArgs) ToLiveEventTypeOutputWithContext(ctx context.Context) LiveEventTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventTypeOutput)
}

// The Live Event.
type LiveEventTypeOutput struct{ *pulumi.OutputState }

func (LiveEventTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventType)(nil)).Elem()
}

func (o LiveEventTypeOutput) ToLiveEventTypeOutput() LiveEventTypeOutput {
	return o
}

func (o LiveEventTypeOutput) ToLiveEventTypeOutputWithContext(ctx context.Context) LiveEventTypeOutput {
	return o
}

// The geo-location where the resource lives
func (o LiveEventTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LiveEventType) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o LiveEventTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LiveEventType) string { return v.Name }).(pulumi.StringOutput)
}

// The Live Event properties.
func (o LiveEventTypeOutput) Properties() LiveEventPropertiesResponseOutput {
	return o.ApplyT(func(v LiveEventType) LiveEventPropertiesResponse { return v.Properties }).(LiveEventPropertiesResponseOutput)
}

// Resource tags.
func (o LiveEventTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LiveEventType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
func (o LiveEventTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LiveEventType) string { return v.Type }).(pulumi.StringOutput)
}

// The Live Event encoding.
type LiveEventEncoding struct {
	// The encoding type for Live Event. This value is specified at creation time and cannot be updated. When encodingType is set to None, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bit rates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. The encodingType of Basic is obsolete – if specified, the service will treat this as a Standard Live Event.
	EncodingType *string `pulumi:"encodingType"`
	// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
	PresetName *string `pulumi:"presetName"`
}

// LiveEventEncodingInput is an input type that accepts LiveEventEncodingArgs and LiveEventEncodingOutput values.
// You can construct a concrete instance of `LiveEventEncodingInput` via:
//
//          LiveEventEncodingArgs{...}
type LiveEventEncodingInput interface {
	pulumi.Input

	ToLiveEventEncodingOutput() LiveEventEncodingOutput
	ToLiveEventEncodingOutputWithContext(context.Context) LiveEventEncodingOutput
}

// The Live Event encoding.
type LiveEventEncodingArgs struct {
	// The encoding type for Live Event. This value is specified at creation time and cannot be updated. When encodingType is set to None, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bit rates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. The encodingType of Basic is obsolete – if specified, the service will treat this as a Standard Live Event.
	EncodingType pulumi.StringPtrInput `pulumi:"encodingType"`
	// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
	PresetName pulumi.StringPtrInput `pulumi:"presetName"`
}

func (LiveEventEncodingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEncoding)(nil)).Elem()
}

func (i LiveEventEncodingArgs) ToLiveEventEncodingOutput() LiveEventEncodingOutput {
	return i.ToLiveEventEncodingOutputWithContext(context.Background())
}

func (i LiveEventEncodingArgs) ToLiveEventEncodingOutputWithContext(ctx context.Context) LiveEventEncodingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEncodingOutput)
}

func (i LiveEventEncodingArgs) ToLiveEventEncodingPtrOutput() LiveEventEncodingPtrOutput {
	return i.ToLiveEventEncodingPtrOutputWithContext(context.Background())
}

func (i LiveEventEncodingArgs) ToLiveEventEncodingPtrOutputWithContext(ctx context.Context) LiveEventEncodingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEncodingOutput).ToLiveEventEncodingPtrOutputWithContext(ctx)
}

// LiveEventEncodingPtrInput is an input type that accepts LiveEventEncodingArgs, LiveEventEncodingPtr and LiveEventEncodingPtrOutput values.
// You can construct a concrete instance of `LiveEventEncodingPtrInput` via:
//
//          LiveEventEncodingArgs{...}
//
//  or:
//
//          nil
type LiveEventEncodingPtrInput interface {
	pulumi.Input

	ToLiveEventEncodingPtrOutput() LiveEventEncodingPtrOutput
	ToLiveEventEncodingPtrOutputWithContext(context.Context) LiveEventEncodingPtrOutput
}

type liveEventEncodingPtrType LiveEventEncodingArgs

func LiveEventEncodingPtr(v *LiveEventEncodingArgs) LiveEventEncodingPtrInput {
	return (*liveEventEncodingPtrType)(v)
}

func (*liveEventEncodingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventEncoding)(nil)).Elem()
}

func (i *liveEventEncodingPtrType) ToLiveEventEncodingPtrOutput() LiveEventEncodingPtrOutput {
	return i.ToLiveEventEncodingPtrOutputWithContext(context.Background())
}

func (i *liveEventEncodingPtrType) ToLiveEventEncodingPtrOutputWithContext(ctx context.Context) LiveEventEncodingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEncodingPtrOutput)
}

// The Live Event encoding.
type LiveEventEncodingOutput struct{ *pulumi.OutputState }

func (LiveEventEncodingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEncoding)(nil)).Elem()
}

func (o LiveEventEncodingOutput) ToLiveEventEncodingOutput() LiveEventEncodingOutput {
	return o
}

func (o LiveEventEncodingOutput) ToLiveEventEncodingOutputWithContext(ctx context.Context) LiveEventEncodingOutput {
	return o
}

func (o LiveEventEncodingOutput) ToLiveEventEncodingPtrOutput() LiveEventEncodingPtrOutput {
	return o.ToLiveEventEncodingPtrOutputWithContext(context.Background())
}

func (o LiveEventEncodingOutput) ToLiveEventEncodingPtrOutputWithContext(ctx context.Context) LiveEventEncodingPtrOutput {
	return o.ApplyT(func(v LiveEventEncoding) *LiveEventEncoding {
		return &v
	}).(LiveEventEncodingPtrOutput)
}

// The encoding type for Live Event. This value is specified at creation time and cannot be updated. When encodingType is set to None, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bit rates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. The encodingType of Basic is obsolete – if specified, the service will treat this as a Standard Live Event.
func (o LiveEventEncodingOutput) EncodingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncoding) *string { return v.EncodingType }).(pulumi.StringPtrOutput)
}

// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
func (o LiveEventEncodingOutput) PresetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncoding) *string { return v.PresetName }).(pulumi.StringPtrOutput)
}

type LiveEventEncodingPtrOutput struct{ *pulumi.OutputState }

func (LiveEventEncodingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventEncoding)(nil)).Elem()
}

func (o LiveEventEncodingPtrOutput) ToLiveEventEncodingPtrOutput() LiveEventEncodingPtrOutput {
	return o
}

func (o LiveEventEncodingPtrOutput) ToLiveEventEncodingPtrOutputWithContext(ctx context.Context) LiveEventEncodingPtrOutput {
	return o
}

func (o LiveEventEncodingPtrOutput) Elem() LiveEventEncodingOutput {
	return o.ApplyT(func(v *LiveEventEncoding) LiveEventEncoding { return *v }).(LiveEventEncodingOutput)
}

// The encoding type for Live Event. This value is specified at creation time and cannot be updated. When encodingType is set to None, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bit rates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. The encodingType of Basic is obsolete – if specified, the service will treat this as a Standard Live Event.
func (o LiveEventEncodingPtrOutput) EncodingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncoding) *string {
		if v == nil {
			return nil
		}
		return v.EncodingType
	}).(pulumi.StringPtrOutput)
}

// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
func (o LiveEventEncodingPtrOutput) PresetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncoding) *string {
		if v == nil {
			return nil
		}
		return v.PresetName
	}).(pulumi.StringPtrOutput)
}

// The Live Event encoding.
type LiveEventEncodingResponse struct {
	// The encoding type for Live Event. This value is specified at creation time and cannot be updated. When encodingType is set to None, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bit rates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. The encodingType of Basic is obsolete – if specified, the service will treat this as a Standard Live Event.
	EncodingType *string `pulumi:"encodingType"`
	// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
	PresetName *string `pulumi:"presetName"`
}

// LiveEventEncodingResponseInput is an input type that accepts LiveEventEncodingResponseArgs and LiveEventEncodingResponseOutput values.
// You can construct a concrete instance of `LiveEventEncodingResponseInput` via:
//
//          LiveEventEncodingResponseArgs{...}
type LiveEventEncodingResponseInput interface {
	pulumi.Input

	ToLiveEventEncodingResponseOutput() LiveEventEncodingResponseOutput
	ToLiveEventEncodingResponseOutputWithContext(context.Context) LiveEventEncodingResponseOutput
}

// The Live Event encoding.
type LiveEventEncodingResponseArgs struct {
	// The encoding type for Live Event. This value is specified at creation time and cannot be updated. When encodingType is set to None, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bit rates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. The encodingType of Basic is obsolete – if specified, the service will treat this as a Standard Live Event.
	EncodingType pulumi.StringPtrInput `pulumi:"encodingType"`
	// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
	PresetName pulumi.StringPtrInput `pulumi:"presetName"`
}

func (LiveEventEncodingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEncodingResponse)(nil)).Elem()
}

func (i LiveEventEncodingResponseArgs) ToLiveEventEncodingResponseOutput() LiveEventEncodingResponseOutput {
	return i.ToLiveEventEncodingResponseOutputWithContext(context.Background())
}

func (i LiveEventEncodingResponseArgs) ToLiveEventEncodingResponseOutputWithContext(ctx context.Context) LiveEventEncodingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEncodingResponseOutput)
}

func (i LiveEventEncodingResponseArgs) ToLiveEventEncodingResponsePtrOutput() LiveEventEncodingResponsePtrOutput {
	return i.ToLiveEventEncodingResponsePtrOutputWithContext(context.Background())
}

func (i LiveEventEncodingResponseArgs) ToLiveEventEncodingResponsePtrOutputWithContext(ctx context.Context) LiveEventEncodingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEncodingResponseOutput).ToLiveEventEncodingResponsePtrOutputWithContext(ctx)
}

// LiveEventEncodingResponsePtrInput is an input type that accepts LiveEventEncodingResponseArgs, LiveEventEncodingResponsePtr and LiveEventEncodingResponsePtrOutput values.
// You can construct a concrete instance of `LiveEventEncodingResponsePtrInput` via:
//
//          LiveEventEncodingResponseArgs{...}
//
//  or:
//
//          nil
type LiveEventEncodingResponsePtrInput interface {
	pulumi.Input

	ToLiveEventEncodingResponsePtrOutput() LiveEventEncodingResponsePtrOutput
	ToLiveEventEncodingResponsePtrOutputWithContext(context.Context) LiveEventEncodingResponsePtrOutput
}

type liveEventEncodingResponsePtrType LiveEventEncodingResponseArgs

func LiveEventEncodingResponsePtr(v *LiveEventEncodingResponseArgs) LiveEventEncodingResponsePtrInput {
	return (*liveEventEncodingResponsePtrType)(v)
}

func (*liveEventEncodingResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventEncodingResponse)(nil)).Elem()
}

func (i *liveEventEncodingResponsePtrType) ToLiveEventEncodingResponsePtrOutput() LiveEventEncodingResponsePtrOutput {
	return i.ToLiveEventEncodingResponsePtrOutputWithContext(context.Background())
}

func (i *liveEventEncodingResponsePtrType) ToLiveEventEncodingResponsePtrOutputWithContext(ctx context.Context) LiveEventEncodingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEncodingResponsePtrOutput)
}

// The Live Event encoding.
type LiveEventEncodingResponseOutput struct{ *pulumi.OutputState }

func (LiveEventEncodingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEncodingResponse)(nil)).Elem()
}

func (o LiveEventEncodingResponseOutput) ToLiveEventEncodingResponseOutput() LiveEventEncodingResponseOutput {
	return o
}

func (o LiveEventEncodingResponseOutput) ToLiveEventEncodingResponseOutputWithContext(ctx context.Context) LiveEventEncodingResponseOutput {
	return o
}

func (o LiveEventEncodingResponseOutput) ToLiveEventEncodingResponsePtrOutput() LiveEventEncodingResponsePtrOutput {
	return o.ToLiveEventEncodingResponsePtrOutputWithContext(context.Background())
}

func (o LiveEventEncodingResponseOutput) ToLiveEventEncodingResponsePtrOutputWithContext(ctx context.Context) LiveEventEncodingResponsePtrOutput {
	return o.ApplyT(func(v LiveEventEncodingResponse) *LiveEventEncodingResponse {
		return &v
	}).(LiveEventEncodingResponsePtrOutput)
}

// The encoding type for Live Event. This value is specified at creation time and cannot be updated. When encodingType is set to None, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bit rates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. The encodingType of Basic is obsolete – if specified, the service will treat this as a Standard Live Event.
func (o LiveEventEncodingResponseOutput) EncodingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncodingResponse) *string { return v.EncodingType }).(pulumi.StringPtrOutput)
}

// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
func (o LiveEventEncodingResponseOutput) PresetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEncodingResponse) *string { return v.PresetName }).(pulumi.StringPtrOutput)
}

type LiveEventEncodingResponsePtrOutput struct{ *pulumi.OutputState }

func (LiveEventEncodingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventEncodingResponse)(nil)).Elem()
}

func (o LiveEventEncodingResponsePtrOutput) ToLiveEventEncodingResponsePtrOutput() LiveEventEncodingResponsePtrOutput {
	return o
}

func (o LiveEventEncodingResponsePtrOutput) ToLiveEventEncodingResponsePtrOutputWithContext(ctx context.Context) LiveEventEncodingResponsePtrOutput {
	return o
}

func (o LiveEventEncodingResponsePtrOutput) Elem() LiveEventEncodingResponseOutput {
	return o.ApplyT(func(v *LiveEventEncodingResponse) LiveEventEncodingResponse { return *v }).(LiveEventEncodingResponseOutput)
}

// The encoding type for Live Event. This value is specified at creation time and cannot be updated. When encodingType is set to None, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bit rates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. The encodingType of Basic is obsolete – if specified, the service will treat this as a Standard Live Event.
func (o LiveEventEncodingResponsePtrOutput) EncodingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncodingResponse) *string {
		if v == nil {
			return nil
		}
		return v.EncodingType
	}).(pulumi.StringPtrOutput)
}

// The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
func (o LiveEventEncodingResponsePtrOutput) PresetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventEncodingResponse) *string {
		if v == nil {
			return nil
		}
		return v.PresetName
	}).(pulumi.StringPtrOutput)
}

// The Live Event endpoint.
type LiveEventEndpoint struct {
	// The endpoint protocol.
	Protocol *string `pulumi:"protocol"`
	// The endpoint URL.
	Url *string `pulumi:"url"`
}

// LiveEventEndpointInput is an input type that accepts LiveEventEndpointArgs and LiveEventEndpointOutput values.
// You can construct a concrete instance of `LiveEventEndpointInput` via:
//
//          LiveEventEndpointArgs{...}
type LiveEventEndpointInput interface {
	pulumi.Input

	ToLiveEventEndpointOutput() LiveEventEndpointOutput
	ToLiveEventEndpointOutputWithContext(context.Context) LiveEventEndpointOutput
}

// The Live Event endpoint.
type LiveEventEndpointArgs struct {
	// The endpoint protocol.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// The endpoint URL.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (LiveEventEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEndpoint)(nil)).Elem()
}

func (i LiveEventEndpointArgs) ToLiveEventEndpointOutput() LiveEventEndpointOutput {
	return i.ToLiveEventEndpointOutputWithContext(context.Background())
}

func (i LiveEventEndpointArgs) ToLiveEventEndpointOutputWithContext(ctx context.Context) LiveEventEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEndpointOutput)
}

// LiveEventEndpointArrayInput is an input type that accepts LiveEventEndpointArray and LiveEventEndpointArrayOutput values.
// You can construct a concrete instance of `LiveEventEndpointArrayInput` via:
//
//          LiveEventEndpointArray{ LiveEventEndpointArgs{...} }
type LiveEventEndpointArrayInput interface {
	pulumi.Input

	ToLiveEventEndpointArrayOutput() LiveEventEndpointArrayOutput
	ToLiveEventEndpointArrayOutputWithContext(context.Context) LiveEventEndpointArrayOutput
}

type LiveEventEndpointArray []LiveEventEndpointInput

func (LiveEventEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventEndpoint)(nil)).Elem()
}

func (i LiveEventEndpointArray) ToLiveEventEndpointArrayOutput() LiveEventEndpointArrayOutput {
	return i.ToLiveEventEndpointArrayOutputWithContext(context.Background())
}

func (i LiveEventEndpointArray) ToLiveEventEndpointArrayOutputWithContext(ctx context.Context) LiveEventEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEndpointArrayOutput)
}

// The Live Event endpoint.
type LiveEventEndpointOutput struct{ *pulumi.OutputState }

func (LiveEventEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEndpoint)(nil)).Elem()
}

func (o LiveEventEndpointOutput) ToLiveEventEndpointOutput() LiveEventEndpointOutput {
	return o
}

func (o LiveEventEndpointOutput) ToLiveEventEndpointOutputWithContext(ctx context.Context) LiveEventEndpointOutput {
	return o
}

// The endpoint protocol.
func (o LiveEventEndpointOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEndpoint) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The endpoint URL.
func (o LiveEventEndpointOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEndpoint) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type LiveEventEndpointArrayOutput struct{ *pulumi.OutputState }

func (LiveEventEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventEndpoint)(nil)).Elem()
}

func (o LiveEventEndpointArrayOutput) ToLiveEventEndpointArrayOutput() LiveEventEndpointArrayOutput {
	return o
}

func (o LiveEventEndpointArrayOutput) ToLiveEventEndpointArrayOutputWithContext(ctx context.Context) LiveEventEndpointArrayOutput {
	return o
}

func (o LiveEventEndpointArrayOutput) Index(i pulumi.IntInput) LiveEventEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventEndpoint {
		return vs[0].([]LiveEventEndpoint)[vs[1].(int)]
	}).(LiveEventEndpointOutput)
}

// The Live Event endpoint.
type LiveEventEndpointResponse struct {
	// The endpoint protocol.
	Protocol *string `pulumi:"protocol"`
	// The endpoint URL.
	Url *string `pulumi:"url"`
}

// LiveEventEndpointResponseInput is an input type that accepts LiveEventEndpointResponseArgs and LiveEventEndpointResponseOutput values.
// You can construct a concrete instance of `LiveEventEndpointResponseInput` via:
//
//          LiveEventEndpointResponseArgs{...}
type LiveEventEndpointResponseInput interface {
	pulumi.Input

	ToLiveEventEndpointResponseOutput() LiveEventEndpointResponseOutput
	ToLiveEventEndpointResponseOutputWithContext(context.Context) LiveEventEndpointResponseOutput
}

// The Live Event endpoint.
type LiveEventEndpointResponseArgs struct {
	// The endpoint protocol.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// The endpoint URL.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (LiveEventEndpointResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEndpointResponse)(nil)).Elem()
}

func (i LiveEventEndpointResponseArgs) ToLiveEventEndpointResponseOutput() LiveEventEndpointResponseOutput {
	return i.ToLiveEventEndpointResponseOutputWithContext(context.Background())
}

func (i LiveEventEndpointResponseArgs) ToLiveEventEndpointResponseOutputWithContext(ctx context.Context) LiveEventEndpointResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEndpointResponseOutput)
}

// LiveEventEndpointResponseArrayInput is an input type that accepts LiveEventEndpointResponseArray and LiveEventEndpointResponseArrayOutput values.
// You can construct a concrete instance of `LiveEventEndpointResponseArrayInput` via:
//
//          LiveEventEndpointResponseArray{ LiveEventEndpointResponseArgs{...} }
type LiveEventEndpointResponseArrayInput interface {
	pulumi.Input

	ToLiveEventEndpointResponseArrayOutput() LiveEventEndpointResponseArrayOutput
	ToLiveEventEndpointResponseArrayOutputWithContext(context.Context) LiveEventEndpointResponseArrayOutput
}

type LiveEventEndpointResponseArray []LiveEventEndpointResponseInput

func (LiveEventEndpointResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventEndpointResponse)(nil)).Elem()
}

func (i LiveEventEndpointResponseArray) ToLiveEventEndpointResponseArrayOutput() LiveEventEndpointResponseArrayOutput {
	return i.ToLiveEventEndpointResponseArrayOutputWithContext(context.Background())
}

func (i LiveEventEndpointResponseArray) ToLiveEventEndpointResponseArrayOutputWithContext(ctx context.Context) LiveEventEndpointResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventEndpointResponseArrayOutput)
}

// The Live Event endpoint.
type LiveEventEndpointResponseOutput struct{ *pulumi.OutputState }

func (LiveEventEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventEndpointResponse)(nil)).Elem()
}

func (o LiveEventEndpointResponseOutput) ToLiveEventEndpointResponseOutput() LiveEventEndpointResponseOutput {
	return o
}

func (o LiveEventEndpointResponseOutput) ToLiveEventEndpointResponseOutputWithContext(ctx context.Context) LiveEventEndpointResponseOutput {
	return o
}

// The endpoint protocol.
func (o LiveEventEndpointResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEndpointResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The endpoint URL.
func (o LiveEventEndpointResponseOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventEndpointResponse) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type LiveEventEndpointResponseArrayOutput struct{ *pulumi.OutputState }

func (LiveEventEndpointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LiveEventEndpointResponse)(nil)).Elem()
}

func (o LiveEventEndpointResponseArrayOutput) ToLiveEventEndpointResponseArrayOutput() LiveEventEndpointResponseArrayOutput {
	return o
}

func (o LiveEventEndpointResponseArrayOutput) ToLiveEventEndpointResponseArrayOutputWithContext(ctx context.Context) LiveEventEndpointResponseArrayOutput {
	return o
}

func (o LiveEventEndpointResponseArrayOutput) Index(i pulumi.IntInput) LiveEventEndpointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LiveEventEndpointResponse {
		return vs[0].([]LiveEventEndpointResponse)[vs[1].(int)]
	}).(LiveEventEndpointResponseOutput)
}

// The Live Event input.
type LiveEventInput struct {
	// The access control for LiveEvent Input.
	AccessControl *LiveEventInputAccessControl `pulumi:"accessControl"`
	// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated.  If omitted, the service will generate a unique value.
	AccessToken *string `pulumi:"accessToken"`
	// The input endpoints for the Live Event.
	Endpoints []LiveEventEndpoint `pulumi:"endpoints"`
	// ISO 8601 timespan duration of the key frame interval duration.
	KeyFrameIntervalDuration *string `pulumi:"keyFrameIntervalDuration"`
	// The streaming protocol for the Live Event.  This is specified at creation time and cannot be updated.
	StreamingProtocol string `pulumi:"streamingProtocol"`
}

// LiveEventInputInput is an input type that accepts LiveEventInputArgs and LiveEventInputOutput values.
// You can construct a concrete instance of `LiveEventInputInput` via:
//
//          LiveEventInputArgs{...}
type LiveEventInputInput interface {
	pulumi.Input

	ToLiveEventInputOutput() LiveEventInputOutput
	ToLiveEventInputOutputWithContext(context.Context) LiveEventInputOutput
}

// The Live Event input.
type LiveEventInputArgs struct {
	// The access control for LiveEvent Input.
	AccessControl LiveEventInputAccessControlPtrInput `pulumi:"accessControl"`
	// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated.  If omitted, the service will generate a unique value.
	AccessToken pulumi.StringPtrInput `pulumi:"accessToken"`
	// The input endpoints for the Live Event.
	Endpoints LiveEventEndpointArrayInput `pulumi:"endpoints"`
	// ISO 8601 timespan duration of the key frame interval duration.
	KeyFrameIntervalDuration pulumi.StringPtrInput `pulumi:"keyFrameIntervalDuration"`
	// The streaming protocol for the Live Event.  This is specified at creation time and cannot be updated.
	StreamingProtocol pulumi.StringInput `pulumi:"streamingProtocol"`
}

func (LiveEventInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInput)(nil)).Elem()
}

func (i LiveEventInputArgs) ToLiveEventInputOutput() LiveEventInputOutput {
	return i.ToLiveEventInputOutputWithContext(context.Background())
}

func (i LiveEventInputArgs) ToLiveEventInputOutputWithContext(ctx context.Context) LiveEventInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputOutput)
}

func (i LiveEventInputArgs) ToLiveEventInputPtrOutput() LiveEventInputPtrOutput {
	return i.ToLiveEventInputPtrOutputWithContext(context.Background())
}

func (i LiveEventInputArgs) ToLiveEventInputPtrOutputWithContext(ctx context.Context) LiveEventInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputOutput).ToLiveEventInputPtrOutputWithContext(ctx)
}

// LiveEventInputPtrInput is an input type that accepts LiveEventInputArgs, LiveEventInputPtr and LiveEventInputPtrOutput values.
// You can construct a concrete instance of `LiveEventInputPtrInput` via:
//
//          LiveEventInputArgs{...}
//
//  or:
//
//          nil
type LiveEventInputPtrInput interface {
	pulumi.Input

	ToLiveEventInputPtrOutput() LiveEventInputPtrOutput
	ToLiveEventInputPtrOutputWithContext(context.Context) LiveEventInputPtrOutput
}

type liveEventInputPtrType LiveEventInputArgs

func LiveEventInputPtr(v *LiveEventInputArgs) LiveEventInputPtrInput {
	return (*liveEventInputPtrType)(v)
}

func (*liveEventInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventInput)(nil)).Elem()
}

func (i *liveEventInputPtrType) ToLiveEventInputPtrOutput() LiveEventInputPtrOutput {
	return i.ToLiveEventInputPtrOutputWithContext(context.Background())
}

func (i *liveEventInputPtrType) ToLiveEventInputPtrOutputWithContext(ctx context.Context) LiveEventInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputPtrOutput)
}

// The Live Event input.
type LiveEventInputOutput struct{ *pulumi.OutputState }

func (LiveEventInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInput)(nil)).Elem()
}

func (o LiveEventInputOutput) ToLiveEventInputOutput() LiveEventInputOutput {
	return o
}

func (o LiveEventInputOutput) ToLiveEventInputOutputWithContext(ctx context.Context) LiveEventInputOutput {
	return o
}

func (o LiveEventInputOutput) ToLiveEventInputPtrOutput() LiveEventInputPtrOutput {
	return o.ToLiveEventInputPtrOutputWithContext(context.Background())
}

func (o LiveEventInputOutput) ToLiveEventInputPtrOutputWithContext(ctx context.Context) LiveEventInputPtrOutput {
	return o.ApplyT(func(v LiveEventInput) *LiveEventInput {
		return &v
	}).(LiveEventInputPtrOutput)
}

// The access control for LiveEvent Input.
func (o LiveEventInputOutput) AccessControl() LiveEventInputAccessControlPtrOutput {
	return o.ApplyT(func(v LiveEventInput) *LiveEventInputAccessControl { return v.AccessControl }).(LiveEventInputAccessControlPtrOutput)
}

// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated.  If omitted, the service will generate a unique value.
func (o LiveEventInputOutput) AccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInput) *string { return v.AccessToken }).(pulumi.StringPtrOutput)
}

// The input endpoints for the Live Event.
func (o LiveEventInputOutput) Endpoints() LiveEventEndpointArrayOutput {
	return o.ApplyT(func(v LiveEventInput) []LiveEventEndpoint { return v.Endpoints }).(LiveEventEndpointArrayOutput)
}

// ISO 8601 timespan duration of the key frame interval duration.
func (o LiveEventInputOutput) KeyFrameIntervalDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInput) *string { return v.KeyFrameIntervalDuration }).(pulumi.StringPtrOutput)
}

// The streaming protocol for the Live Event.  This is specified at creation time and cannot be updated.
func (o LiveEventInputOutput) StreamingProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LiveEventInput) string { return v.StreamingProtocol }).(pulumi.StringOutput)
}

type LiveEventInputPtrOutput struct{ *pulumi.OutputState }

func (LiveEventInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventInput)(nil)).Elem()
}

func (o LiveEventInputPtrOutput) ToLiveEventInputPtrOutput() LiveEventInputPtrOutput {
	return o
}

func (o LiveEventInputPtrOutput) ToLiveEventInputPtrOutputWithContext(ctx context.Context) LiveEventInputPtrOutput {
	return o
}

func (o LiveEventInputPtrOutput) Elem() LiveEventInputOutput {
	return o.ApplyT(func(v *LiveEventInput) LiveEventInput { return *v }).(LiveEventInputOutput)
}

// The access control for LiveEvent Input.
func (o LiveEventInputPtrOutput) AccessControl() LiveEventInputAccessControlPtrOutput {
	return o.ApplyT(func(v *LiveEventInput) *LiveEventInputAccessControl {
		if v == nil {
			return nil
		}
		return v.AccessControl
	}).(LiveEventInputAccessControlPtrOutput)
}

// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated.  If omitted, the service will generate a unique value.
func (o LiveEventInputPtrOutput) AccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventInput) *string {
		if v == nil {
			return nil
		}
		return v.AccessToken
	}).(pulumi.StringPtrOutput)
}

// The input endpoints for the Live Event.
func (o LiveEventInputPtrOutput) Endpoints() LiveEventEndpointArrayOutput {
	return o.ApplyT(func(v *LiveEventInput) []LiveEventEndpoint {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(LiveEventEndpointArrayOutput)
}

// ISO 8601 timespan duration of the key frame interval duration.
func (o LiveEventInputPtrOutput) KeyFrameIntervalDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventInput) *string {
		if v == nil {
			return nil
		}
		return v.KeyFrameIntervalDuration
	}).(pulumi.StringPtrOutput)
}

// The streaming protocol for the Live Event.  This is specified at creation time and cannot be updated.
func (o LiveEventInputPtrOutput) StreamingProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventInput) *string {
		if v == nil {
			return nil
		}
		return &v.StreamingProtocol
	}).(pulumi.StringPtrOutput)
}

// The IP access control for Live Event Input.
type LiveEventInputAccessControl struct {
	// The IP access control properties.
	Ip *IPAccessControl `pulumi:"ip"`
}

// LiveEventInputAccessControlInput is an input type that accepts LiveEventInputAccessControlArgs and LiveEventInputAccessControlOutput values.
// You can construct a concrete instance of `LiveEventInputAccessControlInput` via:
//
//          LiveEventInputAccessControlArgs{...}
type LiveEventInputAccessControlInput interface {
	pulumi.Input

	ToLiveEventInputAccessControlOutput() LiveEventInputAccessControlOutput
	ToLiveEventInputAccessControlOutputWithContext(context.Context) LiveEventInputAccessControlOutput
}

// The IP access control for Live Event Input.
type LiveEventInputAccessControlArgs struct {
	// The IP access control properties.
	Ip IPAccessControlPtrInput `pulumi:"ip"`
}

func (LiveEventInputAccessControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputAccessControl)(nil)).Elem()
}

func (i LiveEventInputAccessControlArgs) ToLiveEventInputAccessControlOutput() LiveEventInputAccessControlOutput {
	return i.ToLiveEventInputAccessControlOutputWithContext(context.Background())
}

func (i LiveEventInputAccessControlArgs) ToLiveEventInputAccessControlOutputWithContext(ctx context.Context) LiveEventInputAccessControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputAccessControlOutput)
}

func (i LiveEventInputAccessControlArgs) ToLiveEventInputAccessControlPtrOutput() LiveEventInputAccessControlPtrOutput {
	return i.ToLiveEventInputAccessControlPtrOutputWithContext(context.Background())
}

func (i LiveEventInputAccessControlArgs) ToLiveEventInputAccessControlPtrOutputWithContext(ctx context.Context) LiveEventInputAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputAccessControlOutput).ToLiveEventInputAccessControlPtrOutputWithContext(ctx)
}

// LiveEventInputAccessControlPtrInput is an input type that accepts LiveEventInputAccessControlArgs, LiveEventInputAccessControlPtr and LiveEventInputAccessControlPtrOutput values.
// You can construct a concrete instance of `LiveEventInputAccessControlPtrInput` via:
//
//          LiveEventInputAccessControlArgs{...}
//
//  or:
//
//          nil
type LiveEventInputAccessControlPtrInput interface {
	pulumi.Input

	ToLiveEventInputAccessControlPtrOutput() LiveEventInputAccessControlPtrOutput
	ToLiveEventInputAccessControlPtrOutputWithContext(context.Context) LiveEventInputAccessControlPtrOutput
}

type liveEventInputAccessControlPtrType LiveEventInputAccessControlArgs

func LiveEventInputAccessControlPtr(v *LiveEventInputAccessControlArgs) LiveEventInputAccessControlPtrInput {
	return (*liveEventInputAccessControlPtrType)(v)
}

func (*liveEventInputAccessControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventInputAccessControl)(nil)).Elem()
}

func (i *liveEventInputAccessControlPtrType) ToLiveEventInputAccessControlPtrOutput() LiveEventInputAccessControlPtrOutput {
	return i.ToLiveEventInputAccessControlPtrOutputWithContext(context.Background())
}

func (i *liveEventInputAccessControlPtrType) ToLiveEventInputAccessControlPtrOutputWithContext(ctx context.Context) LiveEventInputAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputAccessControlPtrOutput)
}

// The IP access control for Live Event Input.
type LiveEventInputAccessControlOutput struct{ *pulumi.OutputState }

func (LiveEventInputAccessControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputAccessControl)(nil)).Elem()
}

func (o LiveEventInputAccessControlOutput) ToLiveEventInputAccessControlOutput() LiveEventInputAccessControlOutput {
	return o
}

func (o LiveEventInputAccessControlOutput) ToLiveEventInputAccessControlOutputWithContext(ctx context.Context) LiveEventInputAccessControlOutput {
	return o
}

func (o LiveEventInputAccessControlOutput) ToLiveEventInputAccessControlPtrOutput() LiveEventInputAccessControlPtrOutput {
	return o.ToLiveEventInputAccessControlPtrOutputWithContext(context.Background())
}

func (o LiveEventInputAccessControlOutput) ToLiveEventInputAccessControlPtrOutputWithContext(ctx context.Context) LiveEventInputAccessControlPtrOutput {
	return o.ApplyT(func(v LiveEventInputAccessControl) *LiveEventInputAccessControl {
		return &v
	}).(LiveEventInputAccessControlPtrOutput)
}

// The IP access control properties.
func (o LiveEventInputAccessControlOutput) Ip() IPAccessControlPtrOutput {
	return o.ApplyT(func(v LiveEventInputAccessControl) *IPAccessControl { return v.Ip }).(IPAccessControlPtrOutput)
}

type LiveEventInputAccessControlPtrOutput struct{ *pulumi.OutputState }

func (LiveEventInputAccessControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventInputAccessControl)(nil)).Elem()
}

func (o LiveEventInputAccessControlPtrOutput) ToLiveEventInputAccessControlPtrOutput() LiveEventInputAccessControlPtrOutput {
	return o
}

func (o LiveEventInputAccessControlPtrOutput) ToLiveEventInputAccessControlPtrOutputWithContext(ctx context.Context) LiveEventInputAccessControlPtrOutput {
	return o
}

func (o LiveEventInputAccessControlPtrOutput) Elem() LiveEventInputAccessControlOutput {
	return o.ApplyT(func(v *LiveEventInputAccessControl) LiveEventInputAccessControl { return *v }).(LiveEventInputAccessControlOutput)
}

// The IP access control properties.
func (o LiveEventInputAccessControlPtrOutput) Ip() IPAccessControlPtrOutput {
	return o.ApplyT(func(v *LiveEventInputAccessControl) *IPAccessControl {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(IPAccessControlPtrOutput)
}

// The IP access control for Live Event Input.
type LiveEventInputAccessControlResponse struct {
	// The IP access control properties.
	Ip *IPAccessControlResponse `pulumi:"ip"`
}

// LiveEventInputAccessControlResponseInput is an input type that accepts LiveEventInputAccessControlResponseArgs and LiveEventInputAccessControlResponseOutput values.
// You can construct a concrete instance of `LiveEventInputAccessControlResponseInput` via:
//
//          LiveEventInputAccessControlResponseArgs{...}
type LiveEventInputAccessControlResponseInput interface {
	pulumi.Input

	ToLiveEventInputAccessControlResponseOutput() LiveEventInputAccessControlResponseOutput
	ToLiveEventInputAccessControlResponseOutputWithContext(context.Context) LiveEventInputAccessControlResponseOutput
}

// The IP access control for Live Event Input.
type LiveEventInputAccessControlResponseArgs struct {
	// The IP access control properties.
	Ip IPAccessControlResponsePtrInput `pulumi:"ip"`
}

func (LiveEventInputAccessControlResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputAccessControlResponse)(nil)).Elem()
}

func (i LiveEventInputAccessControlResponseArgs) ToLiveEventInputAccessControlResponseOutput() LiveEventInputAccessControlResponseOutput {
	return i.ToLiveEventInputAccessControlResponseOutputWithContext(context.Background())
}

func (i LiveEventInputAccessControlResponseArgs) ToLiveEventInputAccessControlResponseOutputWithContext(ctx context.Context) LiveEventInputAccessControlResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputAccessControlResponseOutput)
}

func (i LiveEventInputAccessControlResponseArgs) ToLiveEventInputAccessControlResponsePtrOutput() LiveEventInputAccessControlResponsePtrOutput {
	return i.ToLiveEventInputAccessControlResponsePtrOutputWithContext(context.Background())
}

func (i LiveEventInputAccessControlResponseArgs) ToLiveEventInputAccessControlResponsePtrOutputWithContext(ctx context.Context) LiveEventInputAccessControlResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputAccessControlResponseOutput).ToLiveEventInputAccessControlResponsePtrOutputWithContext(ctx)
}

// LiveEventInputAccessControlResponsePtrInput is an input type that accepts LiveEventInputAccessControlResponseArgs, LiveEventInputAccessControlResponsePtr and LiveEventInputAccessControlResponsePtrOutput values.
// You can construct a concrete instance of `LiveEventInputAccessControlResponsePtrInput` via:
//
//          LiveEventInputAccessControlResponseArgs{...}
//
//  or:
//
//          nil
type LiveEventInputAccessControlResponsePtrInput interface {
	pulumi.Input

	ToLiveEventInputAccessControlResponsePtrOutput() LiveEventInputAccessControlResponsePtrOutput
	ToLiveEventInputAccessControlResponsePtrOutputWithContext(context.Context) LiveEventInputAccessControlResponsePtrOutput
}

type liveEventInputAccessControlResponsePtrType LiveEventInputAccessControlResponseArgs

func LiveEventInputAccessControlResponsePtr(v *LiveEventInputAccessControlResponseArgs) LiveEventInputAccessControlResponsePtrInput {
	return (*liveEventInputAccessControlResponsePtrType)(v)
}

func (*liveEventInputAccessControlResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventInputAccessControlResponse)(nil)).Elem()
}

func (i *liveEventInputAccessControlResponsePtrType) ToLiveEventInputAccessControlResponsePtrOutput() LiveEventInputAccessControlResponsePtrOutput {
	return i.ToLiveEventInputAccessControlResponsePtrOutputWithContext(context.Background())
}

func (i *liveEventInputAccessControlResponsePtrType) ToLiveEventInputAccessControlResponsePtrOutputWithContext(ctx context.Context) LiveEventInputAccessControlResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputAccessControlResponsePtrOutput)
}

// The IP access control for Live Event Input.
type LiveEventInputAccessControlResponseOutput struct{ *pulumi.OutputState }

func (LiveEventInputAccessControlResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputAccessControlResponse)(nil)).Elem()
}

func (o LiveEventInputAccessControlResponseOutput) ToLiveEventInputAccessControlResponseOutput() LiveEventInputAccessControlResponseOutput {
	return o
}

func (o LiveEventInputAccessControlResponseOutput) ToLiveEventInputAccessControlResponseOutputWithContext(ctx context.Context) LiveEventInputAccessControlResponseOutput {
	return o
}

func (o LiveEventInputAccessControlResponseOutput) ToLiveEventInputAccessControlResponsePtrOutput() LiveEventInputAccessControlResponsePtrOutput {
	return o.ToLiveEventInputAccessControlResponsePtrOutputWithContext(context.Background())
}

func (o LiveEventInputAccessControlResponseOutput) ToLiveEventInputAccessControlResponsePtrOutputWithContext(ctx context.Context) LiveEventInputAccessControlResponsePtrOutput {
	return o.ApplyT(func(v LiveEventInputAccessControlResponse) *LiveEventInputAccessControlResponse {
		return &v
	}).(LiveEventInputAccessControlResponsePtrOutput)
}

// The IP access control properties.
func (o LiveEventInputAccessControlResponseOutput) Ip() IPAccessControlResponsePtrOutput {
	return o.ApplyT(func(v LiveEventInputAccessControlResponse) *IPAccessControlResponse { return v.Ip }).(IPAccessControlResponsePtrOutput)
}

type LiveEventInputAccessControlResponsePtrOutput struct{ *pulumi.OutputState }

func (LiveEventInputAccessControlResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventInputAccessControlResponse)(nil)).Elem()
}

func (o LiveEventInputAccessControlResponsePtrOutput) ToLiveEventInputAccessControlResponsePtrOutput() LiveEventInputAccessControlResponsePtrOutput {
	return o
}

func (o LiveEventInputAccessControlResponsePtrOutput) ToLiveEventInputAccessControlResponsePtrOutputWithContext(ctx context.Context) LiveEventInputAccessControlResponsePtrOutput {
	return o
}

func (o LiveEventInputAccessControlResponsePtrOutput) Elem() LiveEventInputAccessControlResponseOutput {
	return o.ApplyT(func(v *LiveEventInputAccessControlResponse) LiveEventInputAccessControlResponse { return *v }).(LiveEventInputAccessControlResponseOutput)
}

// The IP access control properties.
func (o LiveEventInputAccessControlResponsePtrOutput) Ip() IPAccessControlResponsePtrOutput {
	return o.ApplyT(func(v *LiveEventInputAccessControlResponse) *IPAccessControlResponse {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(IPAccessControlResponsePtrOutput)
}

// The Live Event input.
type LiveEventInputResponse struct {
	// The access control for LiveEvent Input.
	AccessControl *LiveEventInputAccessControlResponse `pulumi:"accessControl"`
	// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated.  If omitted, the service will generate a unique value.
	AccessToken *string `pulumi:"accessToken"`
	// The input endpoints for the Live Event.
	Endpoints []LiveEventEndpointResponse `pulumi:"endpoints"`
	// ISO 8601 timespan duration of the key frame interval duration.
	KeyFrameIntervalDuration *string `pulumi:"keyFrameIntervalDuration"`
	// The streaming protocol for the Live Event.  This is specified at creation time and cannot be updated.
	StreamingProtocol string `pulumi:"streamingProtocol"`
}

// LiveEventInputResponseInput is an input type that accepts LiveEventInputResponseArgs and LiveEventInputResponseOutput values.
// You can construct a concrete instance of `LiveEventInputResponseInput` via:
//
//          LiveEventInputResponseArgs{...}
type LiveEventInputResponseInput interface {
	pulumi.Input

	ToLiveEventInputResponseOutput() LiveEventInputResponseOutput
	ToLiveEventInputResponseOutputWithContext(context.Context) LiveEventInputResponseOutput
}

// The Live Event input.
type LiveEventInputResponseArgs struct {
	// The access control for LiveEvent Input.
	AccessControl LiveEventInputAccessControlResponsePtrInput `pulumi:"accessControl"`
	// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated.  If omitted, the service will generate a unique value.
	AccessToken pulumi.StringPtrInput `pulumi:"accessToken"`
	// The input endpoints for the Live Event.
	Endpoints LiveEventEndpointResponseArrayInput `pulumi:"endpoints"`
	// ISO 8601 timespan duration of the key frame interval duration.
	KeyFrameIntervalDuration pulumi.StringPtrInput `pulumi:"keyFrameIntervalDuration"`
	// The streaming protocol for the Live Event.  This is specified at creation time and cannot be updated.
	StreamingProtocol pulumi.StringInput `pulumi:"streamingProtocol"`
}

func (LiveEventInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputResponse)(nil)).Elem()
}

func (i LiveEventInputResponseArgs) ToLiveEventInputResponseOutput() LiveEventInputResponseOutput {
	return i.ToLiveEventInputResponseOutputWithContext(context.Background())
}

func (i LiveEventInputResponseArgs) ToLiveEventInputResponseOutputWithContext(ctx context.Context) LiveEventInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputResponseOutput)
}

func (i LiveEventInputResponseArgs) ToLiveEventInputResponsePtrOutput() LiveEventInputResponsePtrOutput {
	return i.ToLiveEventInputResponsePtrOutputWithContext(context.Background())
}

func (i LiveEventInputResponseArgs) ToLiveEventInputResponsePtrOutputWithContext(ctx context.Context) LiveEventInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputResponseOutput).ToLiveEventInputResponsePtrOutputWithContext(ctx)
}

// LiveEventInputResponsePtrInput is an input type that accepts LiveEventInputResponseArgs, LiveEventInputResponsePtr and LiveEventInputResponsePtrOutput values.
// You can construct a concrete instance of `LiveEventInputResponsePtrInput` via:
//
//          LiveEventInputResponseArgs{...}
//
//  or:
//
//          nil
type LiveEventInputResponsePtrInput interface {
	pulumi.Input

	ToLiveEventInputResponsePtrOutput() LiveEventInputResponsePtrOutput
	ToLiveEventInputResponsePtrOutputWithContext(context.Context) LiveEventInputResponsePtrOutput
}

type liveEventInputResponsePtrType LiveEventInputResponseArgs

func LiveEventInputResponsePtr(v *LiveEventInputResponseArgs) LiveEventInputResponsePtrInput {
	return (*liveEventInputResponsePtrType)(v)
}

func (*liveEventInputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventInputResponse)(nil)).Elem()
}

func (i *liveEventInputResponsePtrType) ToLiveEventInputResponsePtrOutput() LiveEventInputResponsePtrOutput {
	return i.ToLiveEventInputResponsePtrOutputWithContext(context.Background())
}

func (i *liveEventInputResponsePtrType) ToLiveEventInputResponsePtrOutputWithContext(ctx context.Context) LiveEventInputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventInputResponsePtrOutput)
}

// The Live Event input.
type LiveEventInputResponseOutput struct{ *pulumi.OutputState }

func (LiveEventInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventInputResponse)(nil)).Elem()
}

func (o LiveEventInputResponseOutput) ToLiveEventInputResponseOutput() LiveEventInputResponseOutput {
	return o
}

func (o LiveEventInputResponseOutput) ToLiveEventInputResponseOutputWithContext(ctx context.Context) LiveEventInputResponseOutput {
	return o
}

func (o LiveEventInputResponseOutput) ToLiveEventInputResponsePtrOutput() LiveEventInputResponsePtrOutput {
	return o.ToLiveEventInputResponsePtrOutputWithContext(context.Background())
}

func (o LiveEventInputResponseOutput) ToLiveEventInputResponsePtrOutputWithContext(ctx context.Context) LiveEventInputResponsePtrOutput {
	return o.ApplyT(func(v LiveEventInputResponse) *LiveEventInputResponse {
		return &v
	}).(LiveEventInputResponsePtrOutput)
}

// The access control for LiveEvent Input.
func (o LiveEventInputResponseOutput) AccessControl() LiveEventInputAccessControlResponsePtrOutput {
	return o.ApplyT(func(v LiveEventInputResponse) *LiveEventInputAccessControlResponse { return v.AccessControl }).(LiveEventInputAccessControlResponsePtrOutput)
}

// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated.  If omitted, the service will generate a unique value.
func (o LiveEventInputResponseOutput) AccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputResponse) *string { return v.AccessToken }).(pulumi.StringPtrOutput)
}

// The input endpoints for the Live Event.
func (o LiveEventInputResponseOutput) Endpoints() LiveEventEndpointResponseArrayOutput {
	return o.ApplyT(func(v LiveEventInputResponse) []LiveEventEndpointResponse { return v.Endpoints }).(LiveEventEndpointResponseArrayOutput)
}

// ISO 8601 timespan duration of the key frame interval duration.
func (o LiveEventInputResponseOutput) KeyFrameIntervalDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventInputResponse) *string { return v.KeyFrameIntervalDuration }).(pulumi.StringPtrOutput)
}

// The streaming protocol for the Live Event.  This is specified at creation time and cannot be updated.
func (o LiveEventInputResponseOutput) StreamingProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LiveEventInputResponse) string { return v.StreamingProtocol }).(pulumi.StringOutput)
}

type LiveEventInputResponsePtrOutput struct{ *pulumi.OutputState }

func (LiveEventInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventInputResponse)(nil)).Elem()
}

func (o LiveEventInputResponsePtrOutput) ToLiveEventInputResponsePtrOutput() LiveEventInputResponsePtrOutput {
	return o
}

func (o LiveEventInputResponsePtrOutput) ToLiveEventInputResponsePtrOutputWithContext(ctx context.Context) LiveEventInputResponsePtrOutput {
	return o
}

func (o LiveEventInputResponsePtrOutput) Elem() LiveEventInputResponseOutput {
	return o.ApplyT(func(v *LiveEventInputResponse) LiveEventInputResponse { return *v }).(LiveEventInputResponseOutput)
}

// The access control for LiveEvent Input.
func (o LiveEventInputResponsePtrOutput) AccessControl() LiveEventInputAccessControlResponsePtrOutput {
	return o.ApplyT(func(v *LiveEventInputResponse) *LiveEventInputAccessControlResponse {
		if v == nil {
			return nil
		}
		return v.AccessControl
	}).(LiveEventInputAccessControlResponsePtrOutput)
}

// A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated.  If omitted, the service will generate a unique value.
func (o LiveEventInputResponsePtrOutput) AccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccessToken
	}).(pulumi.StringPtrOutput)
}

// The input endpoints for the Live Event.
func (o LiveEventInputResponsePtrOutput) Endpoints() LiveEventEndpointResponseArrayOutput {
	return o.ApplyT(func(v *LiveEventInputResponse) []LiveEventEndpointResponse {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(LiveEventEndpointResponseArrayOutput)
}

// ISO 8601 timespan duration of the key frame interval duration.
func (o LiveEventInputResponsePtrOutput) KeyFrameIntervalDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyFrameIntervalDuration
	}).(pulumi.StringPtrOutput)
}

// The streaming protocol for the Live Event.  This is specified at creation time and cannot be updated.
func (o LiveEventInputResponsePtrOutput) StreamingProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StreamingProtocol
	}).(pulumi.StringPtrOutput)
}

// The Live Event preview.
type LiveEventPreview struct {
	// The access control for LiveEvent preview.
	AccessControl *LiveEventPreviewAccessControl `pulumi:"accessControl"`
	// An Alternative Media Identifier associated with the StreamingLocator created for the preview.  This value is specified at creation time and cannot be updated.  The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
	AlternativeMediaId *string `pulumi:"alternativeMediaId"`
	// The endpoints for preview.
	Endpoints []LiveEventEndpoint `pulumi:"endpoints"`
	// The identifier of the preview locator in Guid format.  Specifying this at creation time allows the caller to know the preview locator url before the event is created.  If omitted, the service will generate a random identifier.  This value cannot be updated once the live event is created.
	PreviewLocator *string `pulumi:"previewLocator"`
	// The name of streaming policy used for the LiveEvent preview.  This value is specified at creation time and cannot be updated.
	StreamingPolicyName *string `pulumi:"streamingPolicyName"`
}

// LiveEventPreviewInput is an input type that accepts LiveEventPreviewArgs and LiveEventPreviewOutput values.
// You can construct a concrete instance of `LiveEventPreviewInput` via:
//
//          LiveEventPreviewArgs{...}
type LiveEventPreviewInput interface {
	pulumi.Input

	ToLiveEventPreviewOutput() LiveEventPreviewOutput
	ToLiveEventPreviewOutputWithContext(context.Context) LiveEventPreviewOutput
}

// The Live Event preview.
type LiveEventPreviewArgs struct {
	// The access control for LiveEvent preview.
	AccessControl LiveEventPreviewAccessControlPtrInput `pulumi:"accessControl"`
	// An Alternative Media Identifier associated with the StreamingLocator created for the preview.  This value is specified at creation time and cannot be updated.  The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
	AlternativeMediaId pulumi.StringPtrInput `pulumi:"alternativeMediaId"`
	// The endpoints for preview.
	Endpoints LiveEventEndpointArrayInput `pulumi:"endpoints"`
	// The identifier of the preview locator in Guid format.  Specifying this at creation time allows the caller to know the preview locator url before the event is created.  If omitted, the service will generate a random identifier.  This value cannot be updated once the live event is created.
	PreviewLocator pulumi.StringPtrInput `pulumi:"previewLocator"`
	// The name of streaming policy used for the LiveEvent preview.  This value is specified at creation time and cannot be updated.
	StreamingPolicyName pulumi.StringPtrInput `pulumi:"streamingPolicyName"`
}

func (LiveEventPreviewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreview)(nil)).Elem()
}

func (i LiveEventPreviewArgs) ToLiveEventPreviewOutput() LiveEventPreviewOutput {
	return i.ToLiveEventPreviewOutputWithContext(context.Background())
}

func (i LiveEventPreviewArgs) ToLiveEventPreviewOutputWithContext(ctx context.Context) LiveEventPreviewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewOutput)
}

func (i LiveEventPreviewArgs) ToLiveEventPreviewPtrOutput() LiveEventPreviewPtrOutput {
	return i.ToLiveEventPreviewPtrOutputWithContext(context.Background())
}

func (i LiveEventPreviewArgs) ToLiveEventPreviewPtrOutputWithContext(ctx context.Context) LiveEventPreviewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewOutput).ToLiveEventPreviewPtrOutputWithContext(ctx)
}

// LiveEventPreviewPtrInput is an input type that accepts LiveEventPreviewArgs, LiveEventPreviewPtr and LiveEventPreviewPtrOutput values.
// You can construct a concrete instance of `LiveEventPreviewPtrInput` via:
//
//          LiveEventPreviewArgs{...}
//
//  or:
//
//          nil
type LiveEventPreviewPtrInput interface {
	pulumi.Input

	ToLiveEventPreviewPtrOutput() LiveEventPreviewPtrOutput
	ToLiveEventPreviewPtrOutputWithContext(context.Context) LiveEventPreviewPtrOutput
}

type liveEventPreviewPtrType LiveEventPreviewArgs

func LiveEventPreviewPtr(v *LiveEventPreviewArgs) LiveEventPreviewPtrInput {
	return (*liveEventPreviewPtrType)(v)
}

func (*liveEventPreviewPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreview)(nil)).Elem()
}

func (i *liveEventPreviewPtrType) ToLiveEventPreviewPtrOutput() LiveEventPreviewPtrOutput {
	return i.ToLiveEventPreviewPtrOutputWithContext(context.Background())
}

func (i *liveEventPreviewPtrType) ToLiveEventPreviewPtrOutputWithContext(ctx context.Context) LiveEventPreviewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewPtrOutput)
}

// The Live Event preview.
type LiveEventPreviewOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreview)(nil)).Elem()
}

func (o LiveEventPreviewOutput) ToLiveEventPreviewOutput() LiveEventPreviewOutput {
	return o
}

func (o LiveEventPreviewOutput) ToLiveEventPreviewOutputWithContext(ctx context.Context) LiveEventPreviewOutput {
	return o
}

func (o LiveEventPreviewOutput) ToLiveEventPreviewPtrOutput() LiveEventPreviewPtrOutput {
	return o.ToLiveEventPreviewPtrOutputWithContext(context.Background())
}

func (o LiveEventPreviewOutput) ToLiveEventPreviewPtrOutputWithContext(ctx context.Context) LiveEventPreviewPtrOutput {
	return o.ApplyT(func(v LiveEventPreview) *LiveEventPreview {
		return &v
	}).(LiveEventPreviewPtrOutput)
}

// The access control for LiveEvent preview.
func (o LiveEventPreviewOutput) AccessControl() LiveEventPreviewAccessControlPtrOutput {
	return o.ApplyT(func(v LiveEventPreview) *LiveEventPreviewAccessControl { return v.AccessControl }).(LiveEventPreviewAccessControlPtrOutput)
}

// An Alternative Media Identifier associated with the StreamingLocator created for the preview.  This value is specified at creation time and cannot be updated.  The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
func (o LiveEventPreviewOutput) AlternativeMediaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreview) *string { return v.AlternativeMediaId }).(pulumi.StringPtrOutput)
}

// The endpoints for preview.
func (o LiveEventPreviewOutput) Endpoints() LiveEventEndpointArrayOutput {
	return o.ApplyT(func(v LiveEventPreview) []LiveEventEndpoint { return v.Endpoints }).(LiveEventEndpointArrayOutput)
}

// The identifier of the preview locator in Guid format.  Specifying this at creation time allows the caller to know the preview locator url before the event is created.  If omitted, the service will generate a random identifier.  This value cannot be updated once the live event is created.
func (o LiveEventPreviewOutput) PreviewLocator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreview) *string { return v.PreviewLocator }).(pulumi.StringPtrOutput)
}

// The name of streaming policy used for the LiveEvent preview.  This value is specified at creation time and cannot be updated.
func (o LiveEventPreviewOutput) StreamingPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreview) *string { return v.StreamingPolicyName }).(pulumi.StringPtrOutput)
}

type LiveEventPreviewPtrOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreview)(nil)).Elem()
}

func (o LiveEventPreviewPtrOutput) ToLiveEventPreviewPtrOutput() LiveEventPreviewPtrOutput {
	return o
}

func (o LiveEventPreviewPtrOutput) ToLiveEventPreviewPtrOutputWithContext(ctx context.Context) LiveEventPreviewPtrOutput {
	return o
}

func (o LiveEventPreviewPtrOutput) Elem() LiveEventPreviewOutput {
	return o.ApplyT(func(v *LiveEventPreview) LiveEventPreview { return *v }).(LiveEventPreviewOutput)
}

// The access control for LiveEvent preview.
func (o LiveEventPreviewPtrOutput) AccessControl() LiveEventPreviewAccessControlPtrOutput {
	return o.ApplyT(func(v *LiveEventPreview) *LiveEventPreviewAccessControl {
		if v == nil {
			return nil
		}
		return v.AccessControl
	}).(LiveEventPreviewAccessControlPtrOutput)
}

// An Alternative Media Identifier associated with the StreamingLocator created for the preview.  This value is specified at creation time and cannot be updated.  The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
func (o LiveEventPreviewPtrOutput) AlternativeMediaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPreview) *string {
		if v == nil {
			return nil
		}
		return v.AlternativeMediaId
	}).(pulumi.StringPtrOutput)
}

// The endpoints for preview.
func (o LiveEventPreviewPtrOutput) Endpoints() LiveEventEndpointArrayOutput {
	return o.ApplyT(func(v *LiveEventPreview) []LiveEventEndpoint {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(LiveEventEndpointArrayOutput)
}

// The identifier of the preview locator in Guid format.  Specifying this at creation time allows the caller to know the preview locator url before the event is created.  If omitted, the service will generate a random identifier.  This value cannot be updated once the live event is created.
func (o LiveEventPreviewPtrOutput) PreviewLocator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPreview) *string {
		if v == nil {
			return nil
		}
		return v.PreviewLocator
	}).(pulumi.StringPtrOutput)
}

// The name of streaming policy used for the LiveEvent preview.  This value is specified at creation time and cannot be updated.
func (o LiveEventPreviewPtrOutput) StreamingPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPreview) *string {
		if v == nil {
			return nil
		}
		return v.StreamingPolicyName
	}).(pulumi.StringPtrOutput)
}

// The IP access control for Live Event preview.
type LiveEventPreviewAccessControl struct {
	// The IP access control properties.
	Ip *IPAccessControl `pulumi:"ip"`
}

// LiveEventPreviewAccessControlInput is an input type that accepts LiveEventPreviewAccessControlArgs and LiveEventPreviewAccessControlOutput values.
// You can construct a concrete instance of `LiveEventPreviewAccessControlInput` via:
//
//          LiveEventPreviewAccessControlArgs{...}
type LiveEventPreviewAccessControlInput interface {
	pulumi.Input

	ToLiveEventPreviewAccessControlOutput() LiveEventPreviewAccessControlOutput
	ToLiveEventPreviewAccessControlOutputWithContext(context.Context) LiveEventPreviewAccessControlOutput
}

// The IP access control for Live Event preview.
type LiveEventPreviewAccessControlArgs struct {
	// The IP access control properties.
	Ip IPAccessControlPtrInput `pulumi:"ip"`
}

func (LiveEventPreviewAccessControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreviewAccessControl)(nil)).Elem()
}

func (i LiveEventPreviewAccessControlArgs) ToLiveEventPreviewAccessControlOutput() LiveEventPreviewAccessControlOutput {
	return i.ToLiveEventPreviewAccessControlOutputWithContext(context.Background())
}

func (i LiveEventPreviewAccessControlArgs) ToLiveEventPreviewAccessControlOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewAccessControlOutput)
}

func (i LiveEventPreviewAccessControlArgs) ToLiveEventPreviewAccessControlPtrOutput() LiveEventPreviewAccessControlPtrOutput {
	return i.ToLiveEventPreviewAccessControlPtrOutputWithContext(context.Background())
}

func (i LiveEventPreviewAccessControlArgs) ToLiveEventPreviewAccessControlPtrOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewAccessControlOutput).ToLiveEventPreviewAccessControlPtrOutputWithContext(ctx)
}

// LiveEventPreviewAccessControlPtrInput is an input type that accepts LiveEventPreviewAccessControlArgs, LiveEventPreviewAccessControlPtr and LiveEventPreviewAccessControlPtrOutput values.
// You can construct a concrete instance of `LiveEventPreviewAccessControlPtrInput` via:
//
//          LiveEventPreviewAccessControlArgs{...}
//
//  or:
//
//          nil
type LiveEventPreviewAccessControlPtrInput interface {
	pulumi.Input

	ToLiveEventPreviewAccessControlPtrOutput() LiveEventPreviewAccessControlPtrOutput
	ToLiveEventPreviewAccessControlPtrOutputWithContext(context.Context) LiveEventPreviewAccessControlPtrOutput
}

type liveEventPreviewAccessControlPtrType LiveEventPreviewAccessControlArgs

func LiveEventPreviewAccessControlPtr(v *LiveEventPreviewAccessControlArgs) LiveEventPreviewAccessControlPtrInput {
	return (*liveEventPreviewAccessControlPtrType)(v)
}

func (*liveEventPreviewAccessControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreviewAccessControl)(nil)).Elem()
}

func (i *liveEventPreviewAccessControlPtrType) ToLiveEventPreviewAccessControlPtrOutput() LiveEventPreviewAccessControlPtrOutput {
	return i.ToLiveEventPreviewAccessControlPtrOutputWithContext(context.Background())
}

func (i *liveEventPreviewAccessControlPtrType) ToLiveEventPreviewAccessControlPtrOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewAccessControlPtrOutput)
}

// The IP access control for Live Event preview.
type LiveEventPreviewAccessControlOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewAccessControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreviewAccessControl)(nil)).Elem()
}

func (o LiveEventPreviewAccessControlOutput) ToLiveEventPreviewAccessControlOutput() LiveEventPreviewAccessControlOutput {
	return o
}

func (o LiveEventPreviewAccessControlOutput) ToLiveEventPreviewAccessControlOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlOutput {
	return o
}

func (o LiveEventPreviewAccessControlOutput) ToLiveEventPreviewAccessControlPtrOutput() LiveEventPreviewAccessControlPtrOutput {
	return o.ToLiveEventPreviewAccessControlPtrOutputWithContext(context.Background())
}

func (o LiveEventPreviewAccessControlOutput) ToLiveEventPreviewAccessControlPtrOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlPtrOutput {
	return o.ApplyT(func(v LiveEventPreviewAccessControl) *LiveEventPreviewAccessControl {
		return &v
	}).(LiveEventPreviewAccessControlPtrOutput)
}

// The IP access control properties.
func (o LiveEventPreviewAccessControlOutput) Ip() IPAccessControlPtrOutput {
	return o.ApplyT(func(v LiveEventPreviewAccessControl) *IPAccessControl { return v.Ip }).(IPAccessControlPtrOutput)
}

type LiveEventPreviewAccessControlPtrOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewAccessControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreviewAccessControl)(nil)).Elem()
}

func (o LiveEventPreviewAccessControlPtrOutput) ToLiveEventPreviewAccessControlPtrOutput() LiveEventPreviewAccessControlPtrOutput {
	return o
}

func (o LiveEventPreviewAccessControlPtrOutput) ToLiveEventPreviewAccessControlPtrOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlPtrOutput {
	return o
}

func (o LiveEventPreviewAccessControlPtrOutput) Elem() LiveEventPreviewAccessControlOutput {
	return o.ApplyT(func(v *LiveEventPreviewAccessControl) LiveEventPreviewAccessControl { return *v }).(LiveEventPreviewAccessControlOutput)
}

// The IP access control properties.
func (o LiveEventPreviewAccessControlPtrOutput) Ip() IPAccessControlPtrOutput {
	return o.ApplyT(func(v *LiveEventPreviewAccessControl) *IPAccessControl {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(IPAccessControlPtrOutput)
}

// The IP access control for Live Event preview.
type LiveEventPreviewAccessControlResponse struct {
	// The IP access control properties.
	Ip *IPAccessControlResponse `pulumi:"ip"`
}

// LiveEventPreviewAccessControlResponseInput is an input type that accepts LiveEventPreviewAccessControlResponseArgs and LiveEventPreviewAccessControlResponseOutput values.
// You can construct a concrete instance of `LiveEventPreviewAccessControlResponseInput` via:
//
//          LiveEventPreviewAccessControlResponseArgs{...}
type LiveEventPreviewAccessControlResponseInput interface {
	pulumi.Input

	ToLiveEventPreviewAccessControlResponseOutput() LiveEventPreviewAccessControlResponseOutput
	ToLiveEventPreviewAccessControlResponseOutputWithContext(context.Context) LiveEventPreviewAccessControlResponseOutput
}

// The IP access control for Live Event preview.
type LiveEventPreviewAccessControlResponseArgs struct {
	// The IP access control properties.
	Ip IPAccessControlResponsePtrInput `pulumi:"ip"`
}

func (LiveEventPreviewAccessControlResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreviewAccessControlResponse)(nil)).Elem()
}

func (i LiveEventPreviewAccessControlResponseArgs) ToLiveEventPreviewAccessControlResponseOutput() LiveEventPreviewAccessControlResponseOutput {
	return i.ToLiveEventPreviewAccessControlResponseOutputWithContext(context.Background())
}

func (i LiveEventPreviewAccessControlResponseArgs) ToLiveEventPreviewAccessControlResponseOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewAccessControlResponseOutput)
}

func (i LiveEventPreviewAccessControlResponseArgs) ToLiveEventPreviewAccessControlResponsePtrOutput() LiveEventPreviewAccessControlResponsePtrOutput {
	return i.ToLiveEventPreviewAccessControlResponsePtrOutputWithContext(context.Background())
}

func (i LiveEventPreviewAccessControlResponseArgs) ToLiveEventPreviewAccessControlResponsePtrOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewAccessControlResponseOutput).ToLiveEventPreviewAccessControlResponsePtrOutputWithContext(ctx)
}

// LiveEventPreviewAccessControlResponsePtrInput is an input type that accepts LiveEventPreviewAccessControlResponseArgs, LiveEventPreviewAccessControlResponsePtr and LiveEventPreviewAccessControlResponsePtrOutput values.
// You can construct a concrete instance of `LiveEventPreviewAccessControlResponsePtrInput` via:
//
//          LiveEventPreviewAccessControlResponseArgs{...}
//
//  or:
//
//          nil
type LiveEventPreviewAccessControlResponsePtrInput interface {
	pulumi.Input

	ToLiveEventPreviewAccessControlResponsePtrOutput() LiveEventPreviewAccessControlResponsePtrOutput
	ToLiveEventPreviewAccessControlResponsePtrOutputWithContext(context.Context) LiveEventPreviewAccessControlResponsePtrOutput
}

type liveEventPreviewAccessControlResponsePtrType LiveEventPreviewAccessControlResponseArgs

func LiveEventPreviewAccessControlResponsePtr(v *LiveEventPreviewAccessControlResponseArgs) LiveEventPreviewAccessControlResponsePtrInput {
	return (*liveEventPreviewAccessControlResponsePtrType)(v)
}

func (*liveEventPreviewAccessControlResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreviewAccessControlResponse)(nil)).Elem()
}

func (i *liveEventPreviewAccessControlResponsePtrType) ToLiveEventPreviewAccessControlResponsePtrOutput() LiveEventPreviewAccessControlResponsePtrOutput {
	return i.ToLiveEventPreviewAccessControlResponsePtrOutputWithContext(context.Background())
}

func (i *liveEventPreviewAccessControlResponsePtrType) ToLiveEventPreviewAccessControlResponsePtrOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewAccessControlResponsePtrOutput)
}

// The IP access control for Live Event preview.
type LiveEventPreviewAccessControlResponseOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewAccessControlResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreviewAccessControlResponse)(nil)).Elem()
}

func (o LiveEventPreviewAccessControlResponseOutput) ToLiveEventPreviewAccessControlResponseOutput() LiveEventPreviewAccessControlResponseOutput {
	return o
}

func (o LiveEventPreviewAccessControlResponseOutput) ToLiveEventPreviewAccessControlResponseOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlResponseOutput {
	return o
}

func (o LiveEventPreviewAccessControlResponseOutput) ToLiveEventPreviewAccessControlResponsePtrOutput() LiveEventPreviewAccessControlResponsePtrOutput {
	return o.ToLiveEventPreviewAccessControlResponsePtrOutputWithContext(context.Background())
}

func (o LiveEventPreviewAccessControlResponseOutput) ToLiveEventPreviewAccessControlResponsePtrOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlResponsePtrOutput {
	return o.ApplyT(func(v LiveEventPreviewAccessControlResponse) *LiveEventPreviewAccessControlResponse {
		return &v
	}).(LiveEventPreviewAccessControlResponsePtrOutput)
}

// The IP access control properties.
func (o LiveEventPreviewAccessControlResponseOutput) Ip() IPAccessControlResponsePtrOutput {
	return o.ApplyT(func(v LiveEventPreviewAccessControlResponse) *IPAccessControlResponse { return v.Ip }).(IPAccessControlResponsePtrOutput)
}

type LiveEventPreviewAccessControlResponsePtrOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewAccessControlResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreviewAccessControlResponse)(nil)).Elem()
}

func (o LiveEventPreviewAccessControlResponsePtrOutput) ToLiveEventPreviewAccessControlResponsePtrOutput() LiveEventPreviewAccessControlResponsePtrOutput {
	return o
}

func (o LiveEventPreviewAccessControlResponsePtrOutput) ToLiveEventPreviewAccessControlResponsePtrOutputWithContext(ctx context.Context) LiveEventPreviewAccessControlResponsePtrOutput {
	return o
}

func (o LiveEventPreviewAccessControlResponsePtrOutput) Elem() LiveEventPreviewAccessControlResponseOutput {
	return o.ApplyT(func(v *LiveEventPreviewAccessControlResponse) LiveEventPreviewAccessControlResponse { return *v }).(LiveEventPreviewAccessControlResponseOutput)
}

// The IP access control properties.
func (o LiveEventPreviewAccessControlResponsePtrOutput) Ip() IPAccessControlResponsePtrOutput {
	return o.ApplyT(func(v *LiveEventPreviewAccessControlResponse) *IPAccessControlResponse {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(IPAccessControlResponsePtrOutput)
}

// The Live Event preview.
type LiveEventPreviewResponse struct {
	// The access control for LiveEvent preview.
	AccessControl *LiveEventPreviewAccessControlResponse `pulumi:"accessControl"`
	// An Alternative Media Identifier associated with the StreamingLocator created for the preview.  This value is specified at creation time and cannot be updated.  The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
	AlternativeMediaId *string `pulumi:"alternativeMediaId"`
	// The endpoints for preview.
	Endpoints []LiveEventEndpointResponse `pulumi:"endpoints"`
	// The identifier of the preview locator in Guid format.  Specifying this at creation time allows the caller to know the preview locator url before the event is created.  If omitted, the service will generate a random identifier.  This value cannot be updated once the live event is created.
	PreviewLocator *string `pulumi:"previewLocator"`
	// The name of streaming policy used for the LiveEvent preview.  This value is specified at creation time and cannot be updated.
	StreamingPolicyName *string `pulumi:"streamingPolicyName"`
}

// LiveEventPreviewResponseInput is an input type that accepts LiveEventPreviewResponseArgs and LiveEventPreviewResponseOutput values.
// You can construct a concrete instance of `LiveEventPreviewResponseInput` via:
//
//          LiveEventPreviewResponseArgs{...}
type LiveEventPreviewResponseInput interface {
	pulumi.Input

	ToLiveEventPreviewResponseOutput() LiveEventPreviewResponseOutput
	ToLiveEventPreviewResponseOutputWithContext(context.Context) LiveEventPreviewResponseOutput
}

// The Live Event preview.
type LiveEventPreviewResponseArgs struct {
	// The access control for LiveEvent preview.
	AccessControl LiveEventPreviewAccessControlResponsePtrInput `pulumi:"accessControl"`
	// An Alternative Media Identifier associated with the StreamingLocator created for the preview.  This value is specified at creation time and cannot be updated.  The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
	AlternativeMediaId pulumi.StringPtrInput `pulumi:"alternativeMediaId"`
	// The endpoints for preview.
	Endpoints LiveEventEndpointResponseArrayInput `pulumi:"endpoints"`
	// The identifier of the preview locator in Guid format.  Specifying this at creation time allows the caller to know the preview locator url before the event is created.  If omitted, the service will generate a random identifier.  This value cannot be updated once the live event is created.
	PreviewLocator pulumi.StringPtrInput `pulumi:"previewLocator"`
	// The name of streaming policy used for the LiveEvent preview.  This value is specified at creation time and cannot be updated.
	StreamingPolicyName pulumi.StringPtrInput `pulumi:"streamingPolicyName"`
}

func (LiveEventPreviewResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreviewResponse)(nil)).Elem()
}

func (i LiveEventPreviewResponseArgs) ToLiveEventPreviewResponseOutput() LiveEventPreviewResponseOutput {
	return i.ToLiveEventPreviewResponseOutputWithContext(context.Background())
}

func (i LiveEventPreviewResponseArgs) ToLiveEventPreviewResponseOutputWithContext(ctx context.Context) LiveEventPreviewResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewResponseOutput)
}

func (i LiveEventPreviewResponseArgs) ToLiveEventPreviewResponsePtrOutput() LiveEventPreviewResponsePtrOutput {
	return i.ToLiveEventPreviewResponsePtrOutputWithContext(context.Background())
}

func (i LiveEventPreviewResponseArgs) ToLiveEventPreviewResponsePtrOutputWithContext(ctx context.Context) LiveEventPreviewResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewResponseOutput).ToLiveEventPreviewResponsePtrOutputWithContext(ctx)
}

// LiveEventPreviewResponsePtrInput is an input type that accepts LiveEventPreviewResponseArgs, LiveEventPreviewResponsePtr and LiveEventPreviewResponsePtrOutput values.
// You can construct a concrete instance of `LiveEventPreviewResponsePtrInput` via:
//
//          LiveEventPreviewResponseArgs{...}
//
//  or:
//
//          nil
type LiveEventPreviewResponsePtrInput interface {
	pulumi.Input

	ToLiveEventPreviewResponsePtrOutput() LiveEventPreviewResponsePtrOutput
	ToLiveEventPreviewResponsePtrOutputWithContext(context.Context) LiveEventPreviewResponsePtrOutput
}

type liveEventPreviewResponsePtrType LiveEventPreviewResponseArgs

func LiveEventPreviewResponsePtr(v *LiveEventPreviewResponseArgs) LiveEventPreviewResponsePtrInput {
	return (*liveEventPreviewResponsePtrType)(v)
}

func (*liveEventPreviewResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreviewResponse)(nil)).Elem()
}

func (i *liveEventPreviewResponsePtrType) ToLiveEventPreviewResponsePtrOutput() LiveEventPreviewResponsePtrOutput {
	return i.ToLiveEventPreviewResponsePtrOutputWithContext(context.Background())
}

func (i *liveEventPreviewResponsePtrType) ToLiveEventPreviewResponsePtrOutputWithContext(ctx context.Context) LiveEventPreviewResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPreviewResponsePtrOutput)
}

// The Live Event preview.
type LiveEventPreviewResponseOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPreviewResponse)(nil)).Elem()
}

func (o LiveEventPreviewResponseOutput) ToLiveEventPreviewResponseOutput() LiveEventPreviewResponseOutput {
	return o
}

func (o LiveEventPreviewResponseOutput) ToLiveEventPreviewResponseOutputWithContext(ctx context.Context) LiveEventPreviewResponseOutput {
	return o
}

func (o LiveEventPreviewResponseOutput) ToLiveEventPreviewResponsePtrOutput() LiveEventPreviewResponsePtrOutput {
	return o.ToLiveEventPreviewResponsePtrOutputWithContext(context.Background())
}

func (o LiveEventPreviewResponseOutput) ToLiveEventPreviewResponsePtrOutputWithContext(ctx context.Context) LiveEventPreviewResponsePtrOutput {
	return o.ApplyT(func(v LiveEventPreviewResponse) *LiveEventPreviewResponse {
		return &v
	}).(LiveEventPreviewResponsePtrOutput)
}

// The access control for LiveEvent preview.
func (o LiveEventPreviewResponseOutput) AccessControl() LiveEventPreviewAccessControlResponsePtrOutput {
	return o.ApplyT(func(v LiveEventPreviewResponse) *LiveEventPreviewAccessControlResponse { return v.AccessControl }).(LiveEventPreviewAccessControlResponsePtrOutput)
}

// An Alternative Media Identifier associated with the StreamingLocator created for the preview.  This value is specified at creation time and cannot be updated.  The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
func (o LiveEventPreviewResponseOutput) AlternativeMediaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreviewResponse) *string { return v.AlternativeMediaId }).(pulumi.StringPtrOutput)
}

// The endpoints for preview.
func (o LiveEventPreviewResponseOutput) Endpoints() LiveEventEndpointResponseArrayOutput {
	return o.ApplyT(func(v LiveEventPreviewResponse) []LiveEventEndpointResponse { return v.Endpoints }).(LiveEventEndpointResponseArrayOutput)
}

// The identifier of the preview locator in Guid format.  Specifying this at creation time allows the caller to know the preview locator url before the event is created.  If omitted, the service will generate a random identifier.  This value cannot be updated once the live event is created.
func (o LiveEventPreviewResponseOutput) PreviewLocator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreviewResponse) *string { return v.PreviewLocator }).(pulumi.StringPtrOutput)
}

// The name of streaming policy used for the LiveEvent preview.  This value is specified at creation time and cannot be updated.
func (o LiveEventPreviewResponseOutput) StreamingPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPreviewResponse) *string { return v.StreamingPolicyName }).(pulumi.StringPtrOutput)
}

type LiveEventPreviewResponsePtrOutput struct{ *pulumi.OutputState }

func (LiveEventPreviewResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPreviewResponse)(nil)).Elem()
}

func (o LiveEventPreviewResponsePtrOutput) ToLiveEventPreviewResponsePtrOutput() LiveEventPreviewResponsePtrOutput {
	return o
}

func (o LiveEventPreviewResponsePtrOutput) ToLiveEventPreviewResponsePtrOutputWithContext(ctx context.Context) LiveEventPreviewResponsePtrOutput {
	return o
}

func (o LiveEventPreviewResponsePtrOutput) Elem() LiveEventPreviewResponseOutput {
	return o.ApplyT(func(v *LiveEventPreviewResponse) LiveEventPreviewResponse { return *v }).(LiveEventPreviewResponseOutput)
}

// The access control for LiveEvent preview.
func (o LiveEventPreviewResponsePtrOutput) AccessControl() LiveEventPreviewAccessControlResponsePtrOutput {
	return o.ApplyT(func(v *LiveEventPreviewResponse) *LiveEventPreviewAccessControlResponse {
		if v == nil {
			return nil
		}
		return v.AccessControl
	}).(LiveEventPreviewAccessControlResponsePtrOutput)
}

// An Alternative Media Identifier associated with the StreamingLocator created for the preview.  This value is specified at creation time and cannot be updated.  The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
func (o LiveEventPreviewResponsePtrOutput) AlternativeMediaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPreviewResponse) *string {
		if v == nil {
			return nil
		}
		return v.AlternativeMediaId
	}).(pulumi.StringPtrOutput)
}

// The endpoints for preview.
func (o LiveEventPreviewResponsePtrOutput) Endpoints() LiveEventEndpointResponseArrayOutput {
	return o.ApplyT(func(v *LiveEventPreviewResponse) []LiveEventEndpointResponse {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(LiveEventEndpointResponseArrayOutput)
}

// The identifier of the preview locator in Guid format.  Specifying this at creation time allows the caller to know the preview locator url before the event is created.  If omitted, the service will generate a random identifier.  This value cannot be updated once the live event is created.
func (o LiveEventPreviewResponsePtrOutput) PreviewLocator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPreviewResponse) *string {
		if v == nil {
			return nil
		}
		return v.PreviewLocator
	}).(pulumi.StringPtrOutput)
}

// The name of streaming policy used for the LiveEvent preview.  This value is specified at creation time and cannot be updated.
func (o LiveEventPreviewResponsePtrOutput) StreamingPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPreviewResponse) *string {
		if v == nil {
			return nil
		}
		return v.StreamingPolicyName
	}).(pulumi.StringPtrOutput)
}

// The Live Event properties.
type LiveEventPropertiesResponse struct {
	// The exact time the Live Event was created.
	Created string `pulumi:"created"`
	// The Live Event access policies.
	CrossSiteAccessPolicies *CrossSiteAccessPoliciesResponse `pulumi:"crossSiteAccessPolicies"`
	// The Live Event description.
	Description *string `pulumi:"description"`
	// The Live Event encoding.
	Encoding *LiveEventEncodingResponse `pulumi:"encoding"`
	// The Live Event input.
	Input LiveEventInputResponse `pulumi:"input"`
	// The exact time the Live Event was last modified.
	LastModified string `pulumi:"lastModified"`
	// The Live Event preview.
	Preview *LiveEventPreviewResponse `pulumi:"preview"`
	// The provisioning state of the Live Event.
	ProvisioningState string `pulumi:"provisioningState"`
	// The resource state of the Live Event.
	ResourceState string `pulumi:"resourceState"`
	// The options to use for the LiveEvent.  This value is specified at creation time and cannot be updated. The valid values for the array entry values are 'Default' and 'LowLatency'.
	StreamOptions []string `pulumi:"streamOptions"`
	// Specifies whether to use a vanity url with the Live Event.  This value is specified at creation time and cannot be updated.
	UseStaticHostname *bool `pulumi:"useStaticHostname"`
}

// LiveEventPropertiesResponseInput is an input type that accepts LiveEventPropertiesResponseArgs and LiveEventPropertiesResponseOutput values.
// You can construct a concrete instance of `LiveEventPropertiesResponseInput` via:
//
//          LiveEventPropertiesResponseArgs{...}
type LiveEventPropertiesResponseInput interface {
	pulumi.Input

	ToLiveEventPropertiesResponseOutput() LiveEventPropertiesResponseOutput
	ToLiveEventPropertiesResponseOutputWithContext(context.Context) LiveEventPropertiesResponseOutput
}

// The Live Event properties.
type LiveEventPropertiesResponseArgs struct {
	// The exact time the Live Event was created.
	Created pulumi.StringInput `pulumi:"created"`
	// The Live Event access policies.
	CrossSiteAccessPolicies CrossSiteAccessPoliciesResponsePtrInput `pulumi:"crossSiteAccessPolicies"`
	// The Live Event description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The Live Event encoding.
	Encoding LiveEventEncodingResponsePtrInput `pulumi:"encoding"`
	// The Live Event input.
	Input LiveEventInputResponseInput `pulumi:"input"`
	// The exact time the Live Event was last modified.
	LastModified pulumi.StringInput `pulumi:"lastModified"`
	// The Live Event preview.
	Preview LiveEventPreviewResponsePtrInput `pulumi:"preview"`
	// The provisioning state of the Live Event.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// The resource state of the Live Event.
	ResourceState pulumi.StringInput `pulumi:"resourceState"`
	// The options to use for the LiveEvent.  This value is specified at creation time and cannot be updated. The valid values for the array entry values are 'Default' and 'LowLatency'.
	StreamOptions pulumi.StringArrayInput `pulumi:"streamOptions"`
	// Specifies whether to use a vanity url with the Live Event.  This value is specified at creation time and cannot be updated.
	UseStaticHostname pulumi.BoolPtrInput `pulumi:"useStaticHostname"`
}

func (LiveEventPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPropertiesResponse)(nil)).Elem()
}

func (i LiveEventPropertiesResponseArgs) ToLiveEventPropertiesResponseOutput() LiveEventPropertiesResponseOutput {
	return i.ToLiveEventPropertiesResponseOutputWithContext(context.Background())
}

func (i LiveEventPropertiesResponseArgs) ToLiveEventPropertiesResponseOutputWithContext(ctx context.Context) LiveEventPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPropertiesResponseOutput)
}

func (i LiveEventPropertiesResponseArgs) ToLiveEventPropertiesResponsePtrOutput() LiveEventPropertiesResponsePtrOutput {
	return i.ToLiveEventPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i LiveEventPropertiesResponseArgs) ToLiveEventPropertiesResponsePtrOutputWithContext(ctx context.Context) LiveEventPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPropertiesResponseOutput).ToLiveEventPropertiesResponsePtrOutputWithContext(ctx)
}

// LiveEventPropertiesResponsePtrInput is an input type that accepts LiveEventPropertiesResponseArgs, LiveEventPropertiesResponsePtr and LiveEventPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `LiveEventPropertiesResponsePtrInput` via:
//
//          LiveEventPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type LiveEventPropertiesResponsePtrInput interface {
	pulumi.Input

	ToLiveEventPropertiesResponsePtrOutput() LiveEventPropertiesResponsePtrOutput
	ToLiveEventPropertiesResponsePtrOutputWithContext(context.Context) LiveEventPropertiesResponsePtrOutput
}

type liveEventPropertiesResponsePtrType LiveEventPropertiesResponseArgs

func LiveEventPropertiesResponsePtr(v *LiveEventPropertiesResponseArgs) LiveEventPropertiesResponsePtrInput {
	return (*liveEventPropertiesResponsePtrType)(v)
}

func (*liveEventPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPropertiesResponse)(nil)).Elem()
}

func (i *liveEventPropertiesResponsePtrType) ToLiveEventPropertiesResponsePtrOutput() LiveEventPropertiesResponsePtrOutput {
	return i.ToLiveEventPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *liveEventPropertiesResponsePtrType) ToLiveEventPropertiesResponsePtrOutputWithContext(ctx context.Context) LiveEventPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveEventPropertiesResponsePtrOutput)
}

// The Live Event properties.
type LiveEventPropertiesResponseOutput struct{ *pulumi.OutputState }

func (LiveEventPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveEventPropertiesResponse)(nil)).Elem()
}

func (o LiveEventPropertiesResponseOutput) ToLiveEventPropertiesResponseOutput() LiveEventPropertiesResponseOutput {
	return o
}

func (o LiveEventPropertiesResponseOutput) ToLiveEventPropertiesResponseOutputWithContext(ctx context.Context) LiveEventPropertiesResponseOutput {
	return o
}

func (o LiveEventPropertiesResponseOutput) ToLiveEventPropertiesResponsePtrOutput() LiveEventPropertiesResponsePtrOutput {
	return o.ToLiveEventPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o LiveEventPropertiesResponseOutput) ToLiveEventPropertiesResponsePtrOutputWithContext(ctx context.Context) LiveEventPropertiesResponsePtrOutput {
	return o.ApplyT(func(v LiveEventPropertiesResponse) *LiveEventPropertiesResponse {
		return &v
	}).(LiveEventPropertiesResponsePtrOutput)
}

// The exact time the Live Event was created.
func (o LiveEventPropertiesResponseOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v LiveEventPropertiesResponse) string { return v.Created }).(pulumi.StringOutput)
}

// The Live Event access policies.
func (o LiveEventPropertiesResponseOutput) CrossSiteAccessPolicies() CrossSiteAccessPoliciesResponsePtrOutput {
	return o.ApplyT(func(v LiveEventPropertiesResponse) *CrossSiteAccessPoliciesResponse { return v.CrossSiteAccessPolicies }).(CrossSiteAccessPoliciesResponsePtrOutput)
}

// The Live Event description.
func (o LiveEventPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveEventPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The Live Event encoding.
func (o LiveEventPropertiesResponseOutput) Encoding() LiveEventEncodingResponsePtrOutput {
	return o.ApplyT(func(v LiveEventPropertiesResponse) *LiveEventEncodingResponse { return v.Encoding }).(LiveEventEncodingResponsePtrOutput)
}

// The Live Event input.
func (o LiveEventPropertiesResponseOutput) Input() LiveEventInputResponseOutput {
	return o.ApplyT(func(v LiveEventPropertiesResponse) LiveEventInputResponse { return v.Input }).(LiveEventInputResponseOutput)
}

// The exact time the Live Event was last modified.
func (o LiveEventPropertiesResponseOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v LiveEventPropertiesResponse) string { return v.LastModified }).(pulumi.StringOutput)
}

// The Live Event preview.
func (o LiveEventPropertiesResponseOutput) Preview() LiveEventPreviewResponsePtrOutput {
	return o.ApplyT(func(v LiveEventPropertiesResponse) *LiveEventPreviewResponse { return v.Preview }).(LiveEventPreviewResponsePtrOutput)
}

// The provisioning state of the Live Event.
func (o LiveEventPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LiveEventPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The resource state of the Live Event.
func (o LiveEventPropertiesResponseOutput) ResourceState() pulumi.StringOutput {
	return o.ApplyT(func(v LiveEventPropertiesResponse) string { return v.ResourceState }).(pulumi.StringOutput)
}

// The options to use for the LiveEvent.  This value is specified at creation time and cannot be updated. The valid values for the array entry values are 'Default' and 'LowLatency'.
func (o LiveEventPropertiesResponseOutput) StreamOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LiveEventPropertiesResponse) []string { return v.StreamOptions }).(pulumi.StringArrayOutput)
}

// Specifies whether to use a vanity url with the Live Event.  This value is specified at creation time and cannot be updated.
func (o LiveEventPropertiesResponseOutput) UseStaticHostname() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LiveEventPropertiesResponse) *bool { return v.UseStaticHostname }).(pulumi.BoolPtrOutput)
}

type LiveEventPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (LiveEventPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveEventPropertiesResponse)(nil)).Elem()
}

func (o LiveEventPropertiesResponsePtrOutput) ToLiveEventPropertiesResponsePtrOutput() LiveEventPropertiesResponsePtrOutput {
	return o
}

func (o LiveEventPropertiesResponsePtrOutput) ToLiveEventPropertiesResponsePtrOutputWithContext(ctx context.Context) LiveEventPropertiesResponsePtrOutput {
	return o
}

func (o LiveEventPropertiesResponsePtrOutput) Elem() LiveEventPropertiesResponseOutput {
	return o.ApplyT(func(v *LiveEventPropertiesResponse) LiveEventPropertiesResponse { return *v }).(LiveEventPropertiesResponseOutput)
}

// The exact time the Live Event was created.
func (o LiveEventPropertiesResponsePtrOutput) Created() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Created
	}).(pulumi.StringPtrOutput)
}

// The Live Event access policies.
func (o LiveEventPropertiesResponsePtrOutput) CrossSiteAccessPolicies() CrossSiteAccessPoliciesResponsePtrOutput {
	return o.ApplyT(func(v *LiveEventPropertiesResponse) *CrossSiteAccessPoliciesResponse {
		if v == nil {
			return nil
		}
		return v.CrossSiteAccessPolicies
	}).(CrossSiteAccessPoliciesResponsePtrOutput)
}

// The Live Event description.
func (o LiveEventPropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The Live Event encoding.
func (o LiveEventPropertiesResponsePtrOutput) Encoding() LiveEventEncodingResponsePtrOutput {
	return o.ApplyT(func(v *LiveEventPropertiesResponse) *LiveEventEncodingResponse {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(LiveEventEncodingResponsePtrOutput)
}

// The Live Event input.
func (o LiveEventPropertiesResponsePtrOutput) Input() LiveEventInputResponsePtrOutput {
	return o.ApplyT(func(v *LiveEventPropertiesResponse) *LiveEventInputResponse {
		if v == nil {
			return nil
		}
		return &v.Input
	}).(LiveEventInputResponsePtrOutput)
}

// The exact time the Live Event was last modified.
func (o LiveEventPropertiesResponsePtrOutput) LastModified() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastModified
	}).(pulumi.StringPtrOutput)
}

// The Live Event preview.
func (o LiveEventPropertiesResponsePtrOutput) Preview() LiveEventPreviewResponsePtrOutput {
	return o.ApplyT(func(v *LiveEventPropertiesResponse) *LiveEventPreviewResponse {
		if v == nil {
			return nil
		}
		return v.Preview
	}).(LiveEventPreviewResponsePtrOutput)
}

// The provisioning state of the Live Event.
func (o LiveEventPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The resource state of the Live Event.
func (o LiveEventPropertiesResponsePtrOutput) ResourceState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveEventPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceState
	}).(pulumi.StringPtrOutput)
}

// The options to use for the LiveEvent.  This value is specified at creation time and cannot be updated. The valid values for the array entry values are 'Default' and 'LowLatency'.
func (o LiveEventPropertiesResponsePtrOutput) StreamOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LiveEventPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.StreamOptions
	}).(pulumi.StringArrayOutput)
}

// Specifies whether to use a vanity url with the Live Event.  This value is specified at creation time and cannot be updated.
func (o LiveEventPropertiesResponsePtrOutput) UseStaticHostname() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LiveEventPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.UseStaticHostname
	}).(pulumi.BoolPtrOutput)
}

// The Live Output.
type LiveOutputType struct {
	// The name of the resource
	Name string `pulumi:"name"`
	// The Live Output properties.
	Properties LiveOutputPropertiesResponse `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type string `pulumi:"type"`
}

// LiveOutputTypeInput is an input type that accepts LiveOutputTypeArgs and LiveOutputTypeOutput values.
// You can construct a concrete instance of `LiveOutputTypeInput` via:
//
//          LiveOutputTypeArgs{...}
type LiveOutputTypeInput interface {
	pulumi.Input

	ToLiveOutputTypeOutput() LiveOutputTypeOutput
	ToLiveOutputTypeOutputWithContext(context.Context) LiveOutputTypeOutput
}

// The Live Output.
type LiveOutputTypeArgs struct {
	// The name of the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The Live Output properties.
	Properties LiveOutputPropertiesResponseInput `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LiveOutputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveOutputType)(nil)).Elem()
}

func (i LiveOutputTypeArgs) ToLiveOutputTypeOutput() LiveOutputTypeOutput {
	return i.ToLiveOutputTypeOutputWithContext(context.Background())
}

func (i LiveOutputTypeArgs) ToLiveOutputTypeOutputWithContext(ctx context.Context) LiveOutputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveOutputTypeOutput)
}

// The Live Output.
type LiveOutputTypeOutput struct{ *pulumi.OutputState }

func (LiveOutputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveOutputType)(nil)).Elem()
}

func (o LiveOutputTypeOutput) ToLiveOutputTypeOutput() LiveOutputTypeOutput {
	return o
}

func (o LiveOutputTypeOutput) ToLiveOutputTypeOutputWithContext(ctx context.Context) LiveOutputTypeOutput {
	return o
}

// The name of the resource
func (o LiveOutputTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LiveOutputType) string { return v.Name }).(pulumi.StringOutput)
}

// The Live Output properties.
func (o LiveOutputTypeOutput) Properties() LiveOutputPropertiesResponseOutput {
	return o.ApplyT(func(v LiveOutputType) LiveOutputPropertiesResponse { return v.Properties }).(LiveOutputPropertiesResponseOutput)
}

// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
func (o LiveOutputTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LiveOutputType) string { return v.Type }).(pulumi.StringOutput)
}

// The JSON object that contains the properties required to create a Live Output.
type LiveOutputPropertiesResponse struct {
	// ISO 8601 timespan duration of the archive window length. This is duration that customer want to retain the recorded content.
	ArchiveWindowLength string `pulumi:"archiveWindowLength"`
	// The asset name.
	AssetName string `pulumi:"assetName"`
	// The exact time the Live Output was created.
	Created string `pulumi:"created"`
	// The description of the Live Output.
	Description *string `pulumi:"description"`
	// The HLS configuration.
	Hls *HlsResponse `pulumi:"hls"`
	// The exact time the Live Output was last modified.
	LastModified string `pulumi:"lastModified"`
	// The manifest file name.  If not provided, the service will generate one automatically.
	ManifestName *string `pulumi:"manifestName"`
	// The output snapshot time.
	OutputSnapTime *int `pulumi:"outputSnapTime"`
	// The provisioning state of the Live Output.
	ProvisioningState string `pulumi:"provisioningState"`
	// The resource state of the Live Output.
	ResourceState string `pulumi:"resourceState"`
}

// LiveOutputPropertiesResponseInput is an input type that accepts LiveOutputPropertiesResponseArgs and LiveOutputPropertiesResponseOutput values.
// You can construct a concrete instance of `LiveOutputPropertiesResponseInput` via:
//
//          LiveOutputPropertiesResponseArgs{...}
type LiveOutputPropertiesResponseInput interface {
	pulumi.Input

	ToLiveOutputPropertiesResponseOutput() LiveOutputPropertiesResponseOutput
	ToLiveOutputPropertiesResponseOutputWithContext(context.Context) LiveOutputPropertiesResponseOutput
}

// The JSON object that contains the properties required to create a Live Output.
type LiveOutputPropertiesResponseArgs struct {
	// ISO 8601 timespan duration of the archive window length. This is duration that customer want to retain the recorded content.
	ArchiveWindowLength pulumi.StringInput `pulumi:"archiveWindowLength"`
	// The asset name.
	AssetName pulumi.StringInput `pulumi:"assetName"`
	// The exact time the Live Output was created.
	Created pulumi.StringInput `pulumi:"created"`
	// The description of the Live Output.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The HLS configuration.
	Hls HlsResponsePtrInput `pulumi:"hls"`
	// The exact time the Live Output was last modified.
	LastModified pulumi.StringInput `pulumi:"lastModified"`
	// The manifest file name.  If not provided, the service will generate one automatically.
	ManifestName pulumi.StringPtrInput `pulumi:"manifestName"`
	// The output snapshot time.
	OutputSnapTime pulumi.IntPtrInput `pulumi:"outputSnapTime"`
	// The provisioning state of the Live Output.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// The resource state of the Live Output.
	ResourceState pulumi.StringInput `pulumi:"resourceState"`
}

func (LiveOutputPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveOutputPropertiesResponse)(nil)).Elem()
}

func (i LiveOutputPropertiesResponseArgs) ToLiveOutputPropertiesResponseOutput() LiveOutputPropertiesResponseOutput {
	return i.ToLiveOutputPropertiesResponseOutputWithContext(context.Background())
}

func (i LiveOutputPropertiesResponseArgs) ToLiveOutputPropertiesResponseOutputWithContext(ctx context.Context) LiveOutputPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveOutputPropertiesResponseOutput)
}

func (i LiveOutputPropertiesResponseArgs) ToLiveOutputPropertiesResponsePtrOutput() LiveOutputPropertiesResponsePtrOutput {
	return i.ToLiveOutputPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i LiveOutputPropertiesResponseArgs) ToLiveOutputPropertiesResponsePtrOutputWithContext(ctx context.Context) LiveOutputPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveOutputPropertiesResponseOutput).ToLiveOutputPropertiesResponsePtrOutputWithContext(ctx)
}

// LiveOutputPropertiesResponsePtrInput is an input type that accepts LiveOutputPropertiesResponseArgs, LiveOutputPropertiesResponsePtr and LiveOutputPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `LiveOutputPropertiesResponsePtrInput` via:
//
//          LiveOutputPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type LiveOutputPropertiesResponsePtrInput interface {
	pulumi.Input

	ToLiveOutputPropertiesResponsePtrOutput() LiveOutputPropertiesResponsePtrOutput
	ToLiveOutputPropertiesResponsePtrOutputWithContext(context.Context) LiveOutputPropertiesResponsePtrOutput
}

type liveOutputPropertiesResponsePtrType LiveOutputPropertiesResponseArgs

func LiveOutputPropertiesResponsePtr(v *LiveOutputPropertiesResponseArgs) LiveOutputPropertiesResponsePtrInput {
	return (*liveOutputPropertiesResponsePtrType)(v)
}

func (*liveOutputPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveOutputPropertiesResponse)(nil)).Elem()
}

func (i *liveOutputPropertiesResponsePtrType) ToLiveOutputPropertiesResponsePtrOutput() LiveOutputPropertiesResponsePtrOutput {
	return i.ToLiveOutputPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *liveOutputPropertiesResponsePtrType) ToLiveOutputPropertiesResponsePtrOutputWithContext(ctx context.Context) LiveOutputPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveOutputPropertiesResponsePtrOutput)
}

// The JSON object that contains the properties required to create a Live Output.
type LiveOutputPropertiesResponseOutput struct{ *pulumi.OutputState }

func (LiveOutputPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiveOutputPropertiesResponse)(nil)).Elem()
}

func (o LiveOutputPropertiesResponseOutput) ToLiveOutputPropertiesResponseOutput() LiveOutputPropertiesResponseOutput {
	return o
}

func (o LiveOutputPropertiesResponseOutput) ToLiveOutputPropertiesResponseOutputWithContext(ctx context.Context) LiveOutputPropertiesResponseOutput {
	return o
}

func (o LiveOutputPropertiesResponseOutput) ToLiveOutputPropertiesResponsePtrOutput() LiveOutputPropertiesResponsePtrOutput {
	return o.ToLiveOutputPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o LiveOutputPropertiesResponseOutput) ToLiveOutputPropertiesResponsePtrOutputWithContext(ctx context.Context) LiveOutputPropertiesResponsePtrOutput {
	return o.ApplyT(func(v LiveOutputPropertiesResponse) *LiveOutputPropertiesResponse {
		return &v
	}).(LiveOutputPropertiesResponsePtrOutput)
}

// ISO 8601 timespan duration of the archive window length. This is duration that customer want to retain the recorded content.
func (o LiveOutputPropertiesResponseOutput) ArchiveWindowLength() pulumi.StringOutput {
	return o.ApplyT(func(v LiveOutputPropertiesResponse) string { return v.ArchiveWindowLength }).(pulumi.StringOutput)
}

// The asset name.
func (o LiveOutputPropertiesResponseOutput) AssetName() pulumi.StringOutput {
	return o.ApplyT(func(v LiveOutputPropertiesResponse) string { return v.AssetName }).(pulumi.StringOutput)
}

// The exact time the Live Output was created.
func (o LiveOutputPropertiesResponseOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v LiveOutputPropertiesResponse) string { return v.Created }).(pulumi.StringOutput)
}

// The description of the Live Output.
func (o LiveOutputPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveOutputPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The HLS configuration.
func (o LiveOutputPropertiesResponseOutput) Hls() HlsResponsePtrOutput {
	return o.ApplyT(func(v LiveOutputPropertiesResponse) *HlsResponse { return v.Hls }).(HlsResponsePtrOutput)
}

// The exact time the Live Output was last modified.
func (o LiveOutputPropertiesResponseOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v LiveOutputPropertiesResponse) string { return v.LastModified }).(pulumi.StringOutput)
}

// The manifest file name.  If not provided, the service will generate one automatically.
func (o LiveOutputPropertiesResponseOutput) ManifestName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiveOutputPropertiesResponse) *string { return v.ManifestName }).(pulumi.StringPtrOutput)
}

// The output snapshot time.
func (o LiveOutputPropertiesResponseOutput) OutputSnapTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LiveOutputPropertiesResponse) *int { return v.OutputSnapTime }).(pulumi.IntPtrOutput)
}

// The provisioning state of the Live Output.
func (o LiveOutputPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LiveOutputPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The resource state of the Live Output.
func (o LiveOutputPropertiesResponseOutput) ResourceState() pulumi.StringOutput {
	return o.ApplyT(func(v LiveOutputPropertiesResponse) string { return v.ResourceState }).(pulumi.StringOutput)
}

type LiveOutputPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (LiveOutputPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveOutputPropertiesResponse)(nil)).Elem()
}

func (o LiveOutputPropertiesResponsePtrOutput) ToLiveOutputPropertiesResponsePtrOutput() LiveOutputPropertiesResponsePtrOutput {
	return o
}

func (o LiveOutputPropertiesResponsePtrOutput) ToLiveOutputPropertiesResponsePtrOutputWithContext(ctx context.Context) LiveOutputPropertiesResponsePtrOutput {
	return o
}

func (o LiveOutputPropertiesResponsePtrOutput) Elem() LiveOutputPropertiesResponseOutput {
	return o.ApplyT(func(v *LiveOutputPropertiesResponse) LiveOutputPropertiesResponse { return *v }).(LiveOutputPropertiesResponseOutput)
}

// ISO 8601 timespan duration of the archive window length. This is duration that customer want to retain the recorded content.
func (o LiveOutputPropertiesResponsePtrOutput) ArchiveWindowLength() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveOutputPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ArchiveWindowLength
	}).(pulumi.StringPtrOutput)
}

// The asset name.
func (o LiveOutputPropertiesResponsePtrOutput) AssetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveOutputPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AssetName
	}).(pulumi.StringPtrOutput)
}

// The exact time the Live Output was created.
func (o LiveOutputPropertiesResponsePtrOutput) Created() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveOutputPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Created
	}).(pulumi.StringPtrOutput)
}

// The description of the Live Output.
func (o LiveOutputPropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveOutputPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The HLS configuration.
func (o LiveOutputPropertiesResponsePtrOutput) Hls() HlsResponsePtrOutput {
	return o.ApplyT(func(v *LiveOutputPropertiesResponse) *HlsResponse {
		if v == nil {
			return nil
		}
		return v.Hls
	}).(HlsResponsePtrOutput)
}

// The exact time the Live Output was last modified.
func (o LiveOutputPropertiesResponsePtrOutput) LastModified() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveOutputPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastModified
	}).(pulumi.StringPtrOutput)
}

// The manifest file name.  If not provided, the service will generate one automatically.
func (o LiveOutputPropertiesResponsePtrOutput) ManifestName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveOutputPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ManifestName
	}).(pulumi.StringPtrOutput)
}

// The output snapshot time.
func (o LiveOutputPropertiesResponsePtrOutput) OutputSnapTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LiveOutputPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.OutputSnapTime
	}).(pulumi.IntPtrOutput)
}

// The provisioning state of the Live Output.
func (o LiveOutputPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveOutputPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The resource state of the Live Output.
func (o LiveOutputPropertiesResponsePtrOutput) ResourceState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveOutputPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceState
	}).(pulumi.StringPtrOutput)
}

// The Media Filter properties.
type MediaFilterPropertiesResponse struct {
	// The first quality.
	FirstQuality *FirstQualityResponse `pulumi:"firstQuality"`
	// The presentation time range.
	PresentationTimeRange *PresentationTimeRangeResponse `pulumi:"presentationTimeRange"`
	// The tracks selection conditions.
	Tracks []FilterTrackSelectionResponse `pulumi:"tracks"`
}

// MediaFilterPropertiesResponseInput is an input type that accepts MediaFilterPropertiesResponseArgs and MediaFilterPropertiesResponseOutput values.
// You can construct a concrete instance of `MediaFilterPropertiesResponseInput` via:
//
//          MediaFilterPropertiesResponseArgs{...}
type MediaFilterPropertiesResponseInput interface {
	pulumi.Input

	ToMediaFilterPropertiesResponseOutput() MediaFilterPropertiesResponseOutput
	ToMediaFilterPropertiesResponseOutputWithContext(context.Context) MediaFilterPropertiesResponseOutput
}

// The Media Filter properties.
type MediaFilterPropertiesResponseArgs struct {
	// The first quality.
	FirstQuality FirstQualityResponsePtrInput `pulumi:"firstQuality"`
	// The presentation time range.
	PresentationTimeRange PresentationTimeRangeResponsePtrInput `pulumi:"presentationTimeRange"`
	// The tracks selection conditions.
	Tracks FilterTrackSelectionResponseArrayInput `pulumi:"tracks"`
}

func (MediaFilterPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaFilterPropertiesResponse)(nil)).Elem()
}

func (i MediaFilterPropertiesResponseArgs) ToMediaFilterPropertiesResponseOutput() MediaFilterPropertiesResponseOutput {
	return i.ToMediaFilterPropertiesResponseOutputWithContext(context.Background())
}

func (i MediaFilterPropertiesResponseArgs) ToMediaFilterPropertiesResponseOutputWithContext(ctx context.Context) MediaFilterPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaFilterPropertiesResponseOutput)
}

func (i MediaFilterPropertiesResponseArgs) ToMediaFilterPropertiesResponsePtrOutput() MediaFilterPropertiesResponsePtrOutput {
	return i.ToMediaFilterPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i MediaFilterPropertiesResponseArgs) ToMediaFilterPropertiesResponsePtrOutputWithContext(ctx context.Context) MediaFilterPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaFilterPropertiesResponseOutput).ToMediaFilterPropertiesResponsePtrOutputWithContext(ctx)
}

// MediaFilterPropertiesResponsePtrInput is an input type that accepts MediaFilterPropertiesResponseArgs, MediaFilterPropertiesResponsePtr and MediaFilterPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `MediaFilterPropertiesResponsePtrInput` via:
//
//          MediaFilterPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type MediaFilterPropertiesResponsePtrInput interface {
	pulumi.Input

	ToMediaFilterPropertiesResponsePtrOutput() MediaFilterPropertiesResponsePtrOutput
	ToMediaFilterPropertiesResponsePtrOutputWithContext(context.Context) MediaFilterPropertiesResponsePtrOutput
}

type mediaFilterPropertiesResponsePtrType MediaFilterPropertiesResponseArgs

func MediaFilterPropertiesResponsePtr(v *MediaFilterPropertiesResponseArgs) MediaFilterPropertiesResponsePtrInput {
	return (*mediaFilterPropertiesResponsePtrType)(v)
}

func (*mediaFilterPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaFilterPropertiesResponse)(nil)).Elem()
}

func (i *mediaFilterPropertiesResponsePtrType) ToMediaFilterPropertiesResponsePtrOutput() MediaFilterPropertiesResponsePtrOutput {
	return i.ToMediaFilterPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *mediaFilterPropertiesResponsePtrType) ToMediaFilterPropertiesResponsePtrOutputWithContext(ctx context.Context) MediaFilterPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaFilterPropertiesResponsePtrOutput)
}

// The Media Filter properties.
type MediaFilterPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MediaFilterPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaFilterPropertiesResponse)(nil)).Elem()
}

func (o MediaFilterPropertiesResponseOutput) ToMediaFilterPropertiesResponseOutput() MediaFilterPropertiesResponseOutput {
	return o
}

func (o MediaFilterPropertiesResponseOutput) ToMediaFilterPropertiesResponseOutputWithContext(ctx context.Context) MediaFilterPropertiesResponseOutput {
	return o
}

func (o MediaFilterPropertiesResponseOutput) ToMediaFilterPropertiesResponsePtrOutput() MediaFilterPropertiesResponsePtrOutput {
	return o.ToMediaFilterPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o MediaFilterPropertiesResponseOutput) ToMediaFilterPropertiesResponsePtrOutputWithContext(ctx context.Context) MediaFilterPropertiesResponsePtrOutput {
	return o.ApplyT(func(v MediaFilterPropertiesResponse) *MediaFilterPropertiesResponse {
		return &v
	}).(MediaFilterPropertiesResponsePtrOutput)
}

// The first quality.
func (o MediaFilterPropertiesResponseOutput) FirstQuality() FirstQualityResponsePtrOutput {
	return o.ApplyT(func(v MediaFilterPropertiesResponse) *FirstQualityResponse { return v.FirstQuality }).(FirstQualityResponsePtrOutput)
}

// The presentation time range.
func (o MediaFilterPropertiesResponseOutput) PresentationTimeRange() PresentationTimeRangeResponsePtrOutput {
	return o.ApplyT(func(v MediaFilterPropertiesResponse) *PresentationTimeRangeResponse { return v.PresentationTimeRange }).(PresentationTimeRangeResponsePtrOutput)
}

// The tracks selection conditions.
func (o MediaFilterPropertiesResponseOutput) Tracks() FilterTrackSelectionResponseArrayOutput {
	return o.ApplyT(func(v MediaFilterPropertiesResponse) []FilterTrackSelectionResponse { return v.Tracks }).(FilterTrackSelectionResponseArrayOutput)
}

type MediaFilterPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (MediaFilterPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaFilterPropertiesResponse)(nil)).Elem()
}

func (o MediaFilterPropertiesResponsePtrOutput) ToMediaFilterPropertiesResponsePtrOutput() MediaFilterPropertiesResponsePtrOutput {
	return o
}

func (o MediaFilterPropertiesResponsePtrOutput) ToMediaFilterPropertiesResponsePtrOutputWithContext(ctx context.Context) MediaFilterPropertiesResponsePtrOutput {
	return o
}

func (o MediaFilterPropertiesResponsePtrOutput) Elem() MediaFilterPropertiesResponseOutput {
	return o.ApplyT(func(v *MediaFilterPropertiesResponse) MediaFilterPropertiesResponse { return *v }).(MediaFilterPropertiesResponseOutput)
}

// The first quality.
func (o MediaFilterPropertiesResponsePtrOutput) FirstQuality() FirstQualityResponsePtrOutput {
	return o.ApplyT(func(v *MediaFilterPropertiesResponse) *FirstQualityResponse {
		if v == nil {
			return nil
		}
		return v.FirstQuality
	}).(FirstQualityResponsePtrOutput)
}

// The presentation time range.
func (o MediaFilterPropertiesResponsePtrOutput) PresentationTimeRange() PresentationTimeRangeResponsePtrOutput {
	return o.ApplyT(func(v *MediaFilterPropertiesResponse) *PresentationTimeRangeResponse {
		if v == nil {
			return nil
		}
		return v.PresentationTimeRange
	}).(PresentationTimeRangeResponsePtrOutput)
}

// The tracks selection conditions.
func (o MediaFilterPropertiesResponsePtrOutput) Tracks() FilterTrackSelectionResponseArrayOutput {
	return o.ApplyT(func(v *MediaFilterPropertiesResponse) []FilterTrackSelectionResponse {
		if v == nil {
			return nil
		}
		return v.Tracks
	}).(FilterTrackSelectionResponseArrayOutput)
}

// A Media Services account.
type MediaServiceType struct {
	// The Managed Identity for the Media Services account.
	Identity *MediaServiceIdentityResponse `pulumi:"identity"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The resource properties.
	Properties MediaServicePropertiesResponse `pulumi:"properties"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type string `pulumi:"type"`
}

// MediaServiceTypeInput is an input type that accepts MediaServiceTypeArgs and MediaServiceTypeOutput values.
// You can construct a concrete instance of `MediaServiceTypeInput` via:
//
//          MediaServiceTypeArgs{...}
type MediaServiceTypeInput interface {
	pulumi.Input

	ToMediaServiceTypeOutput() MediaServiceTypeOutput
	ToMediaServiceTypeOutputWithContext(context.Context) MediaServiceTypeOutput
}

// A Media Services account.
type MediaServiceTypeArgs struct {
	// The Managed Identity for the Media Services account.
	Identity MediaServiceIdentityResponsePtrInput `pulumi:"identity"`
	// The geo-location where the resource lives
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The resource properties.
	Properties MediaServicePropertiesResponseInput `pulumi:"properties"`
	// Resource tags.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MediaServiceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaServiceType)(nil)).Elem()
}

func (i MediaServiceTypeArgs) ToMediaServiceTypeOutput() MediaServiceTypeOutput {
	return i.ToMediaServiceTypeOutputWithContext(context.Background())
}

func (i MediaServiceTypeArgs) ToMediaServiceTypeOutputWithContext(ctx context.Context) MediaServiceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaServiceTypeOutput)
}

// A Media Services account.
type MediaServiceTypeOutput struct{ *pulumi.OutputState }

func (MediaServiceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaServiceType)(nil)).Elem()
}

func (o MediaServiceTypeOutput) ToMediaServiceTypeOutput() MediaServiceTypeOutput {
	return o
}

func (o MediaServiceTypeOutput) ToMediaServiceTypeOutputWithContext(ctx context.Context) MediaServiceTypeOutput {
	return o
}

// The Managed Identity for the Media Services account.
func (o MediaServiceTypeOutput) Identity() MediaServiceIdentityResponsePtrOutput {
	return o.ApplyT(func(v MediaServiceType) *MediaServiceIdentityResponse { return v.Identity }).(MediaServiceIdentityResponsePtrOutput)
}

// The geo-location where the resource lives
func (o MediaServiceTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v MediaServiceType) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o MediaServiceTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MediaServiceType) string { return v.Name }).(pulumi.StringOutput)
}

// The resource properties.
func (o MediaServiceTypeOutput) Properties() MediaServicePropertiesResponseOutput {
	return o.ApplyT(func(v MediaServiceType) MediaServicePropertiesResponse { return v.Properties }).(MediaServicePropertiesResponseOutput)
}

// Resource tags.
func (o MediaServiceTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v MediaServiceType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
func (o MediaServiceTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MediaServiceType) string { return v.Type }).(pulumi.StringOutput)
}

type MediaServiceIdentity struct {
	// The identity type.
	Type string `pulumi:"type"`
}

// MediaServiceIdentityInput is an input type that accepts MediaServiceIdentityArgs and MediaServiceIdentityOutput values.
// You can construct a concrete instance of `MediaServiceIdentityInput` via:
//
//          MediaServiceIdentityArgs{...}
type MediaServiceIdentityInput interface {
	pulumi.Input

	ToMediaServiceIdentityOutput() MediaServiceIdentityOutput
	ToMediaServiceIdentityOutputWithContext(context.Context) MediaServiceIdentityOutput
}

type MediaServiceIdentityArgs struct {
	// The identity type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MediaServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaServiceIdentity)(nil)).Elem()
}

func (i MediaServiceIdentityArgs) ToMediaServiceIdentityOutput() MediaServiceIdentityOutput {
	return i.ToMediaServiceIdentityOutputWithContext(context.Background())
}

func (i MediaServiceIdentityArgs) ToMediaServiceIdentityOutputWithContext(ctx context.Context) MediaServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaServiceIdentityOutput)
}

func (i MediaServiceIdentityArgs) ToMediaServiceIdentityPtrOutput() MediaServiceIdentityPtrOutput {
	return i.ToMediaServiceIdentityPtrOutputWithContext(context.Background())
}

func (i MediaServiceIdentityArgs) ToMediaServiceIdentityPtrOutputWithContext(ctx context.Context) MediaServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaServiceIdentityOutput).ToMediaServiceIdentityPtrOutputWithContext(ctx)
}

// MediaServiceIdentityPtrInput is an input type that accepts MediaServiceIdentityArgs, MediaServiceIdentityPtr and MediaServiceIdentityPtrOutput values.
// You can construct a concrete instance of `MediaServiceIdentityPtrInput` via:
//
//          MediaServiceIdentityArgs{...}
//
//  or:
//
//          nil
type MediaServiceIdentityPtrInput interface {
	pulumi.Input

	ToMediaServiceIdentityPtrOutput() MediaServiceIdentityPtrOutput
	ToMediaServiceIdentityPtrOutputWithContext(context.Context) MediaServiceIdentityPtrOutput
}

type mediaServiceIdentityPtrType MediaServiceIdentityArgs

func MediaServiceIdentityPtr(v *MediaServiceIdentityArgs) MediaServiceIdentityPtrInput {
	return (*mediaServiceIdentityPtrType)(v)
}

func (*mediaServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaServiceIdentity)(nil)).Elem()
}

func (i *mediaServiceIdentityPtrType) ToMediaServiceIdentityPtrOutput() MediaServiceIdentityPtrOutput {
	return i.ToMediaServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *mediaServiceIdentityPtrType) ToMediaServiceIdentityPtrOutputWithContext(ctx context.Context) MediaServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaServiceIdentityPtrOutput)
}

type MediaServiceIdentityOutput struct{ *pulumi.OutputState }

func (MediaServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaServiceIdentity)(nil)).Elem()
}

func (o MediaServiceIdentityOutput) ToMediaServiceIdentityOutput() MediaServiceIdentityOutput {
	return o
}

func (o MediaServiceIdentityOutput) ToMediaServiceIdentityOutputWithContext(ctx context.Context) MediaServiceIdentityOutput {
	return o
}

func (o MediaServiceIdentityOutput) ToMediaServiceIdentityPtrOutput() MediaServiceIdentityPtrOutput {
	return o.ToMediaServiceIdentityPtrOutputWithContext(context.Background())
}

func (o MediaServiceIdentityOutput) ToMediaServiceIdentityPtrOutputWithContext(ctx context.Context) MediaServiceIdentityPtrOutput {
	return o.ApplyT(func(v MediaServiceIdentity) *MediaServiceIdentity {
		return &v
	}).(MediaServiceIdentityPtrOutput)
}

// The identity type.
func (o MediaServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MediaServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type MediaServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (MediaServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaServiceIdentity)(nil)).Elem()
}

func (o MediaServiceIdentityPtrOutput) ToMediaServiceIdentityPtrOutput() MediaServiceIdentityPtrOutput {
	return o
}

func (o MediaServiceIdentityPtrOutput) ToMediaServiceIdentityPtrOutputWithContext(ctx context.Context) MediaServiceIdentityPtrOutput {
	return o
}

func (o MediaServiceIdentityPtrOutput) Elem() MediaServiceIdentityOutput {
	return o.ApplyT(func(v *MediaServiceIdentity) MediaServiceIdentity { return *v }).(MediaServiceIdentityOutput)
}

// The identity type.
func (o MediaServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type MediaServiceIdentityResponse struct {
	// The Principal ID of the identity.
	PrincipalId string `pulumi:"principalId"`
	// The Tenant ID of the identity.
	TenantId string `pulumi:"tenantId"`
	// The identity type.
	Type string `pulumi:"type"`
}

// MediaServiceIdentityResponseInput is an input type that accepts MediaServiceIdentityResponseArgs and MediaServiceIdentityResponseOutput values.
// You can construct a concrete instance of `MediaServiceIdentityResponseInput` via:
//
//          MediaServiceIdentityResponseArgs{...}
type MediaServiceIdentityResponseInput interface {
	pulumi.Input

	ToMediaServiceIdentityResponseOutput() MediaServiceIdentityResponseOutput
	ToMediaServiceIdentityResponseOutputWithContext(context.Context) MediaServiceIdentityResponseOutput
}

type MediaServiceIdentityResponseArgs struct {
	// The Principal ID of the identity.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The Tenant ID of the identity.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The identity type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MediaServiceIdentityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaServiceIdentityResponse)(nil)).Elem()
}

func (i MediaServiceIdentityResponseArgs) ToMediaServiceIdentityResponseOutput() MediaServiceIdentityResponseOutput {
	return i.ToMediaServiceIdentityResponseOutputWithContext(context.Background())
}

func (i MediaServiceIdentityResponseArgs) ToMediaServiceIdentityResponseOutputWithContext(ctx context.Context) MediaServiceIdentityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaServiceIdentityResponseOutput)
}

func (i MediaServiceIdentityResponseArgs) ToMediaServiceIdentityResponsePtrOutput() MediaServiceIdentityResponsePtrOutput {
	return i.ToMediaServiceIdentityResponsePtrOutputWithContext(context.Background())
}

func (i MediaServiceIdentityResponseArgs) ToMediaServiceIdentityResponsePtrOutputWithContext(ctx context.Context) MediaServiceIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaServiceIdentityResponseOutput).ToMediaServiceIdentityResponsePtrOutputWithContext(ctx)
}

// MediaServiceIdentityResponsePtrInput is an input type that accepts MediaServiceIdentityResponseArgs, MediaServiceIdentityResponsePtr and MediaServiceIdentityResponsePtrOutput values.
// You can construct a concrete instance of `MediaServiceIdentityResponsePtrInput` via:
//
//          MediaServiceIdentityResponseArgs{...}
//
//  or:
//
//          nil
type MediaServiceIdentityResponsePtrInput interface {
	pulumi.Input

	ToMediaServiceIdentityResponsePtrOutput() MediaServiceIdentityResponsePtrOutput
	ToMediaServiceIdentityResponsePtrOutputWithContext(context.Context) MediaServiceIdentityResponsePtrOutput
}

type mediaServiceIdentityResponsePtrType MediaServiceIdentityResponseArgs

func MediaServiceIdentityResponsePtr(v *MediaServiceIdentityResponseArgs) MediaServiceIdentityResponsePtrInput {
	return (*mediaServiceIdentityResponsePtrType)(v)
}

func (*mediaServiceIdentityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaServiceIdentityResponse)(nil)).Elem()
}

func (i *mediaServiceIdentityResponsePtrType) ToMediaServiceIdentityResponsePtrOutput() MediaServiceIdentityResponsePtrOutput {
	return i.ToMediaServiceIdentityResponsePtrOutputWithContext(context.Background())
}

func (i *mediaServiceIdentityResponsePtrType) ToMediaServiceIdentityResponsePtrOutputWithContext(ctx context.Context) MediaServiceIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaServiceIdentityResponsePtrOutput)
}

type MediaServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (MediaServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaServiceIdentityResponse)(nil)).Elem()
}

func (o MediaServiceIdentityResponseOutput) ToMediaServiceIdentityResponseOutput() MediaServiceIdentityResponseOutput {
	return o
}

func (o MediaServiceIdentityResponseOutput) ToMediaServiceIdentityResponseOutputWithContext(ctx context.Context) MediaServiceIdentityResponseOutput {
	return o
}

func (o MediaServiceIdentityResponseOutput) ToMediaServiceIdentityResponsePtrOutput() MediaServiceIdentityResponsePtrOutput {
	return o.ToMediaServiceIdentityResponsePtrOutputWithContext(context.Background())
}

func (o MediaServiceIdentityResponseOutput) ToMediaServiceIdentityResponsePtrOutputWithContext(ctx context.Context) MediaServiceIdentityResponsePtrOutput {
	return o.ApplyT(func(v MediaServiceIdentityResponse) *MediaServiceIdentityResponse {
		return &v
	}).(MediaServiceIdentityResponsePtrOutput)
}

// The Principal ID of the identity.
func (o MediaServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v MediaServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The Tenant ID of the identity.
func (o MediaServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v MediaServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type.
func (o MediaServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MediaServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

type MediaServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (MediaServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaServiceIdentityResponse)(nil)).Elem()
}

func (o MediaServiceIdentityResponsePtrOutput) ToMediaServiceIdentityResponsePtrOutput() MediaServiceIdentityResponsePtrOutput {
	return o
}

func (o MediaServiceIdentityResponsePtrOutput) ToMediaServiceIdentityResponsePtrOutputWithContext(ctx context.Context) MediaServiceIdentityResponsePtrOutput {
	return o
}

func (o MediaServiceIdentityResponsePtrOutput) Elem() MediaServiceIdentityResponseOutput {
	return o.ApplyT(func(v *MediaServiceIdentityResponse) MediaServiceIdentityResponse { return *v }).(MediaServiceIdentityResponseOutput)
}

// The Principal ID of the identity.
func (o MediaServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID of the identity.
func (o MediaServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type.
func (o MediaServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Properties of the Media Services account.
type MediaServicePropertiesResponse struct {
	// The account encryption properties.
	Encryption *AccountEncryptionResponse `pulumi:"encryption"`
	// The Media Services account ID.
	MediaServiceId string `pulumi:"mediaServiceId"`
	// The storage accounts for this resource.
	StorageAccounts       []StorageAccountResponse `pulumi:"storageAccounts"`
	StorageAuthentication *string                  `pulumi:"storageAuthentication"`
}

// MediaServicePropertiesResponseInput is an input type that accepts MediaServicePropertiesResponseArgs and MediaServicePropertiesResponseOutput values.
// You can construct a concrete instance of `MediaServicePropertiesResponseInput` via:
//
//          MediaServicePropertiesResponseArgs{...}
type MediaServicePropertiesResponseInput interface {
	pulumi.Input

	ToMediaServicePropertiesResponseOutput() MediaServicePropertiesResponseOutput
	ToMediaServicePropertiesResponseOutputWithContext(context.Context) MediaServicePropertiesResponseOutput
}

// Properties of the Media Services account.
type MediaServicePropertiesResponseArgs struct {
	// The account encryption properties.
	Encryption AccountEncryptionResponsePtrInput `pulumi:"encryption"`
	// The Media Services account ID.
	MediaServiceId pulumi.StringInput `pulumi:"mediaServiceId"`
	// The storage accounts for this resource.
	StorageAccounts       StorageAccountResponseArrayInput `pulumi:"storageAccounts"`
	StorageAuthentication pulumi.StringPtrInput            `pulumi:"storageAuthentication"`
}

func (MediaServicePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaServicePropertiesResponse)(nil)).Elem()
}

func (i MediaServicePropertiesResponseArgs) ToMediaServicePropertiesResponseOutput() MediaServicePropertiesResponseOutput {
	return i.ToMediaServicePropertiesResponseOutputWithContext(context.Background())
}

func (i MediaServicePropertiesResponseArgs) ToMediaServicePropertiesResponseOutputWithContext(ctx context.Context) MediaServicePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaServicePropertiesResponseOutput)
}

func (i MediaServicePropertiesResponseArgs) ToMediaServicePropertiesResponsePtrOutput() MediaServicePropertiesResponsePtrOutput {
	return i.ToMediaServicePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i MediaServicePropertiesResponseArgs) ToMediaServicePropertiesResponsePtrOutputWithContext(ctx context.Context) MediaServicePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaServicePropertiesResponseOutput).ToMediaServicePropertiesResponsePtrOutputWithContext(ctx)
}

// MediaServicePropertiesResponsePtrInput is an input type that accepts MediaServicePropertiesResponseArgs, MediaServicePropertiesResponsePtr and MediaServicePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `MediaServicePropertiesResponsePtrInput` via:
//
//          MediaServicePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type MediaServicePropertiesResponsePtrInput interface {
	pulumi.Input

	ToMediaServicePropertiesResponsePtrOutput() MediaServicePropertiesResponsePtrOutput
	ToMediaServicePropertiesResponsePtrOutputWithContext(context.Context) MediaServicePropertiesResponsePtrOutput
}

type mediaServicePropertiesResponsePtrType MediaServicePropertiesResponseArgs

func MediaServicePropertiesResponsePtr(v *MediaServicePropertiesResponseArgs) MediaServicePropertiesResponsePtrInput {
	return (*mediaServicePropertiesResponsePtrType)(v)
}

func (*mediaServicePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaServicePropertiesResponse)(nil)).Elem()
}

func (i *mediaServicePropertiesResponsePtrType) ToMediaServicePropertiesResponsePtrOutput() MediaServicePropertiesResponsePtrOutput {
	return i.ToMediaServicePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *mediaServicePropertiesResponsePtrType) ToMediaServicePropertiesResponsePtrOutputWithContext(ctx context.Context) MediaServicePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaServicePropertiesResponsePtrOutput)
}

// Properties of the Media Services account.
type MediaServicePropertiesResponseOutput struct{ *pulumi.OutputState }

func (MediaServicePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaServicePropertiesResponse)(nil)).Elem()
}

func (o MediaServicePropertiesResponseOutput) ToMediaServicePropertiesResponseOutput() MediaServicePropertiesResponseOutput {
	return o
}

func (o MediaServicePropertiesResponseOutput) ToMediaServicePropertiesResponseOutputWithContext(ctx context.Context) MediaServicePropertiesResponseOutput {
	return o
}

func (o MediaServicePropertiesResponseOutput) ToMediaServicePropertiesResponsePtrOutput() MediaServicePropertiesResponsePtrOutput {
	return o.ToMediaServicePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o MediaServicePropertiesResponseOutput) ToMediaServicePropertiesResponsePtrOutputWithContext(ctx context.Context) MediaServicePropertiesResponsePtrOutput {
	return o.ApplyT(func(v MediaServicePropertiesResponse) *MediaServicePropertiesResponse {
		return &v
	}).(MediaServicePropertiesResponsePtrOutput)
}

// The account encryption properties.
func (o MediaServicePropertiesResponseOutput) Encryption() AccountEncryptionResponsePtrOutput {
	return o.ApplyT(func(v MediaServicePropertiesResponse) *AccountEncryptionResponse { return v.Encryption }).(AccountEncryptionResponsePtrOutput)
}

// The Media Services account ID.
func (o MediaServicePropertiesResponseOutput) MediaServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v MediaServicePropertiesResponse) string { return v.MediaServiceId }).(pulumi.StringOutput)
}

// The storage accounts for this resource.
func (o MediaServicePropertiesResponseOutput) StorageAccounts() StorageAccountResponseArrayOutput {
	return o.ApplyT(func(v MediaServicePropertiesResponse) []StorageAccountResponse { return v.StorageAccounts }).(StorageAccountResponseArrayOutput)
}

func (o MediaServicePropertiesResponseOutput) StorageAuthentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaServicePropertiesResponse) *string { return v.StorageAuthentication }).(pulumi.StringPtrOutput)
}

type MediaServicePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (MediaServicePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaServicePropertiesResponse)(nil)).Elem()
}

func (o MediaServicePropertiesResponsePtrOutput) ToMediaServicePropertiesResponsePtrOutput() MediaServicePropertiesResponsePtrOutput {
	return o
}

func (o MediaServicePropertiesResponsePtrOutput) ToMediaServicePropertiesResponsePtrOutputWithContext(ctx context.Context) MediaServicePropertiesResponsePtrOutput {
	return o
}

func (o MediaServicePropertiesResponsePtrOutput) Elem() MediaServicePropertiesResponseOutput {
	return o.ApplyT(func(v *MediaServicePropertiesResponse) MediaServicePropertiesResponse { return *v }).(MediaServicePropertiesResponseOutput)
}

// The account encryption properties.
func (o MediaServicePropertiesResponsePtrOutput) Encryption() AccountEncryptionResponsePtrOutput {
	return o.ApplyT(func(v *MediaServicePropertiesResponse) *AccountEncryptionResponse {
		if v == nil {
			return nil
		}
		return v.Encryption
	}).(AccountEncryptionResponsePtrOutput)
}

// The Media Services account ID.
func (o MediaServicePropertiesResponsePtrOutput) MediaServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaServicePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MediaServiceId
	}).(pulumi.StringPtrOutput)
}

// The storage accounts for this resource.
func (o MediaServicePropertiesResponsePtrOutput) StorageAccounts() StorageAccountResponseArrayOutput {
	return o.ApplyT(func(v *MediaServicePropertiesResponse) []StorageAccountResponse {
		if v == nil {
			return nil
		}
		return v.StorageAccounts
	}).(StorageAccountResponseArrayOutput)
}

func (o MediaServicePropertiesResponsePtrOutput) StorageAuthentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaServicePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAuthentication
	}).(pulumi.StringPtrOutput)
}

// Class for NoEncryption scheme
type NoEncryption struct {
	// Representing supported protocols
	EnabledProtocols *EnabledProtocols `pulumi:"enabledProtocols"`
}

// NoEncryptionInput is an input type that accepts NoEncryptionArgs and NoEncryptionOutput values.
// You can construct a concrete instance of `NoEncryptionInput` via:
//
//          NoEncryptionArgs{...}
type NoEncryptionInput interface {
	pulumi.Input

	ToNoEncryptionOutput() NoEncryptionOutput
	ToNoEncryptionOutputWithContext(context.Context) NoEncryptionOutput
}

// Class for NoEncryption scheme
type NoEncryptionArgs struct {
	// Representing supported protocols
	EnabledProtocols EnabledProtocolsPtrInput `pulumi:"enabledProtocols"`
}

func (NoEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NoEncryption)(nil)).Elem()
}

func (i NoEncryptionArgs) ToNoEncryptionOutput() NoEncryptionOutput {
	return i.ToNoEncryptionOutputWithContext(context.Background())
}

func (i NoEncryptionArgs) ToNoEncryptionOutputWithContext(ctx context.Context) NoEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoEncryptionOutput)
}

func (i NoEncryptionArgs) ToNoEncryptionPtrOutput() NoEncryptionPtrOutput {
	return i.ToNoEncryptionPtrOutputWithContext(context.Background())
}

func (i NoEncryptionArgs) ToNoEncryptionPtrOutputWithContext(ctx context.Context) NoEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoEncryptionOutput).ToNoEncryptionPtrOutputWithContext(ctx)
}

// NoEncryptionPtrInput is an input type that accepts NoEncryptionArgs, NoEncryptionPtr and NoEncryptionPtrOutput values.
// You can construct a concrete instance of `NoEncryptionPtrInput` via:
//
//          NoEncryptionArgs{...}
//
//  or:
//
//          nil
type NoEncryptionPtrInput interface {
	pulumi.Input

	ToNoEncryptionPtrOutput() NoEncryptionPtrOutput
	ToNoEncryptionPtrOutputWithContext(context.Context) NoEncryptionPtrOutput
}

type noEncryptionPtrType NoEncryptionArgs

func NoEncryptionPtr(v *NoEncryptionArgs) NoEncryptionPtrInput {
	return (*noEncryptionPtrType)(v)
}

func (*noEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NoEncryption)(nil)).Elem()
}

func (i *noEncryptionPtrType) ToNoEncryptionPtrOutput() NoEncryptionPtrOutput {
	return i.ToNoEncryptionPtrOutputWithContext(context.Background())
}

func (i *noEncryptionPtrType) ToNoEncryptionPtrOutputWithContext(ctx context.Context) NoEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoEncryptionPtrOutput)
}

// Class for NoEncryption scheme
type NoEncryptionOutput struct{ *pulumi.OutputState }

func (NoEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoEncryption)(nil)).Elem()
}

func (o NoEncryptionOutput) ToNoEncryptionOutput() NoEncryptionOutput {
	return o
}

func (o NoEncryptionOutput) ToNoEncryptionOutputWithContext(ctx context.Context) NoEncryptionOutput {
	return o
}

func (o NoEncryptionOutput) ToNoEncryptionPtrOutput() NoEncryptionPtrOutput {
	return o.ToNoEncryptionPtrOutputWithContext(context.Background())
}

func (o NoEncryptionOutput) ToNoEncryptionPtrOutputWithContext(ctx context.Context) NoEncryptionPtrOutput {
	return o.ApplyT(func(v NoEncryption) *NoEncryption {
		return &v
	}).(NoEncryptionPtrOutput)
}

// Representing supported protocols
func (o NoEncryptionOutput) EnabledProtocols() EnabledProtocolsPtrOutput {
	return o.ApplyT(func(v NoEncryption) *EnabledProtocols { return v.EnabledProtocols }).(EnabledProtocolsPtrOutput)
}

type NoEncryptionPtrOutput struct{ *pulumi.OutputState }

func (NoEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NoEncryption)(nil)).Elem()
}

func (o NoEncryptionPtrOutput) ToNoEncryptionPtrOutput() NoEncryptionPtrOutput {
	return o
}

func (o NoEncryptionPtrOutput) ToNoEncryptionPtrOutputWithContext(ctx context.Context) NoEncryptionPtrOutput {
	return o
}

func (o NoEncryptionPtrOutput) Elem() NoEncryptionOutput {
	return o.ApplyT(func(v *NoEncryption) NoEncryption { return *v }).(NoEncryptionOutput)
}

// Representing supported protocols
func (o NoEncryptionPtrOutput) EnabledProtocols() EnabledProtocolsPtrOutput {
	return o.ApplyT(func(v *NoEncryption) *EnabledProtocols {
		if v == nil {
			return nil
		}
		return v.EnabledProtocols
	}).(EnabledProtocolsPtrOutput)
}

// Class for NoEncryption scheme
type NoEncryptionResponse struct {
	// Representing supported protocols
	EnabledProtocols *EnabledProtocolsResponse `pulumi:"enabledProtocols"`
}

// NoEncryptionResponseInput is an input type that accepts NoEncryptionResponseArgs and NoEncryptionResponseOutput values.
// You can construct a concrete instance of `NoEncryptionResponseInput` via:
//
//          NoEncryptionResponseArgs{...}
type NoEncryptionResponseInput interface {
	pulumi.Input

	ToNoEncryptionResponseOutput() NoEncryptionResponseOutput
	ToNoEncryptionResponseOutputWithContext(context.Context) NoEncryptionResponseOutput
}

// Class for NoEncryption scheme
type NoEncryptionResponseArgs struct {
	// Representing supported protocols
	EnabledProtocols EnabledProtocolsResponsePtrInput `pulumi:"enabledProtocols"`
}

func (NoEncryptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NoEncryptionResponse)(nil)).Elem()
}

func (i NoEncryptionResponseArgs) ToNoEncryptionResponseOutput() NoEncryptionResponseOutput {
	return i.ToNoEncryptionResponseOutputWithContext(context.Background())
}

func (i NoEncryptionResponseArgs) ToNoEncryptionResponseOutputWithContext(ctx context.Context) NoEncryptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoEncryptionResponseOutput)
}

func (i NoEncryptionResponseArgs) ToNoEncryptionResponsePtrOutput() NoEncryptionResponsePtrOutput {
	return i.ToNoEncryptionResponsePtrOutputWithContext(context.Background())
}

func (i NoEncryptionResponseArgs) ToNoEncryptionResponsePtrOutputWithContext(ctx context.Context) NoEncryptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoEncryptionResponseOutput).ToNoEncryptionResponsePtrOutputWithContext(ctx)
}

// NoEncryptionResponsePtrInput is an input type that accepts NoEncryptionResponseArgs, NoEncryptionResponsePtr and NoEncryptionResponsePtrOutput values.
// You can construct a concrete instance of `NoEncryptionResponsePtrInput` via:
//
//          NoEncryptionResponseArgs{...}
//
//  or:
//
//          nil
type NoEncryptionResponsePtrInput interface {
	pulumi.Input

	ToNoEncryptionResponsePtrOutput() NoEncryptionResponsePtrOutput
	ToNoEncryptionResponsePtrOutputWithContext(context.Context) NoEncryptionResponsePtrOutput
}

type noEncryptionResponsePtrType NoEncryptionResponseArgs

func NoEncryptionResponsePtr(v *NoEncryptionResponseArgs) NoEncryptionResponsePtrInput {
	return (*noEncryptionResponsePtrType)(v)
}

func (*noEncryptionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NoEncryptionResponse)(nil)).Elem()
}

func (i *noEncryptionResponsePtrType) ToNoEncryptionResponsePtrOutput() NoEncryptionResponsePtrOutput {
	return i.ToNoEncryptionResponsePtrOutputWithContext(context.Background())
}

func (i *noEncryptionResponsePtrType) ToNoEncryptionResponsePtrOutputWithContext(ctx context.Context) NoEncryptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoEncryptionResponsePtrOutput)
}

// Class for NoEncryption scheme
type NoEncryptionResponseOutput struct{ *pulumi.OutputState }

func (NoEncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoEncryptionResponse)(nil)).Elem()
}

func (o NoEncryptionResponseOutput) ToNoEncryptionResponseOutput() NoEncryptionResponseOutput {
	return o
}

func (o NoEncryptionResponseOutput) ToNoEncryptionResponseOutputWithContext(ctx context.Context) NoEncryptionResponseOutput {
	return o
}

func (o NoEncryptionResponseOutput) ToNoEncryptionResponsePtrOutput() NoEncryptionResponsePtrOutput {
	return o.ToNoEncryptionResponsePtrOutputWithContext(context.Background())
}

func (o NoEncryptionResponseOutput) ToNoEncryptionResponsePtrOutputWithContext(ctx context.Context) NoEncryptionResponsePtrOutput {
	return o.ApplyT(func(v NoEncryptionResponse) *NoEncryptionResponse {
		return &v
	}).(NoEncryptionResponsePtrOutput)
}

// Representing supported protocols
func (o NoEncryptionResponseOutput) EnabledProtocols() EnabledProtocolsResponsePtrOutput {
	return o.ApplyT(func(v NoEncryptionResponse) *EnabledProtocolsResponse { return v.EnabledProtocols }).(EnabledProtocolsResponsePtrOutput)
}

type NoEncryptionResponsePtrOutput struct{ *pulumi.OutputState }

func (NoEncryptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NoEncryptionResponse)(nil)).Elem()
}

func (o NoEncryptionResponsePtrOutput) ToNoEncryptionResponsePtrOutput() NoEncryptionResponsePtrOutput {
	return o
}

func (o NoEncryptionResponsePtrOutput) ToNoEncryptionResponsePtrOutputWithContext(ctx context.Context) NoEncryptionResponsePtrOutput {
	return o
}

func (o NoEncryptionResponsePtrOutput) Elem() NoEncryptionResponseOutput {
	return o.ApplyT(func(v *NoEncryptionResponse) NoEncryptionResponse { return *v }).(NoEncryptionResponseOutput)
}

// Representing supported protocols
func (o NoEncryptionResponsePtrOutput) EnabledProtocols() EnabledProtocolsResponsePtrOutput {
	return o.ApplyT(func(v *NoEncryptionResponse) *EnabledProtocolsResponse {
		if v == nil {
			return nil
		}
		return v.EnabledProtocols
	}).(EnabledProtocolsResponsePtrOutput)
}

// The presentation time range, this is asset related and not recommended for Account Filter.
type PresentationTimeRange struct {
	// The absolute end time boundary.
	EndTimestamp *int `pulumi:"endTimestamp"`
	// The indicator of forcing existing of end time stamp.
	ForceEndTimestamp *bool `pulumi:"forceEndTimestamp"`
	// The relative to end right edge.
	LiveBackoffDuration *int `pulumi:"liveBackoffDuration"`
	// The relative to end sliding window.
	PresentationWindowDuration *int `pulumi:"presentationWindowDuration"`
	// The absolute start time boundary.
	StartTimestamp *int `pulumi:"startTimestamp"`
	// The time scale of time stamps.
	Timescale *int `pulumi:"timescale"`
}

// PresentationTimeRangeInput is an input type that accepts PresentationTimeRangeArgs and PresentationTimeRangeOutput values.
// You can construct a concrete instance of `PresentationTimeRangeInput` via:
//
//          PresentationTimeRangeArgs{...}
type PresentationTimeRangeInput interface {
	pulumi.Input

	ToPresentationTimeRangeOutput() PresentationTimeRangeOutput
	ToPresentationTimeRangeOutputWithContext(context.Context) PresentationTimeRangeOutput
}

// The presentation time range, this is asset related and not recommended for Account Filter.
type PresentationTimeRangeArgs struct {
	// The absolute end time boundary.
	EndTimestamp pulumi.IntPtrInput `pulumi:"endTimestamp"`
	// The indicator of forcing existing of end time stamp.
	ForceEndTimestamp pulumi.BoolPtrInput `pulumi:"forceEndTimestamp"`
	// The relative to end right edge.
	LiveBackoffDuration pulumi.IntPtrInput `pulumi:"liveBackoffDuration"`
	// The relative to end sliding window.
	PresentationWindowDuration pulumi.IntPtrInput `pulumi:"presentationWindowDuration"`
	// The absolute start time boundary.
	StartTimestamp pulumi.IntPtrInput `pulumi:"startTimestamp"`
	// The time scale of time stamps.
	Timescale pulumi.IntPtrInput `pulumi:"timescale"`
}

func (PresentationTimeRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresentationTimeRange)(nil)).Elem()
}

func (i PresentationTimeRangeArgs) ToPresentationTimeRangeOutput() PresentationTimeRangeOutput {
	return i.ToPresentationTimeRangeOutputWithContext(context.Background())
}

func (i PresentationTimeRangeArgs) ToPresentationTimeRangeOutputWithContext(ctx context.Context) PresentationTimeRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresentationTimeRangeOutput)
}

func (i PresentationTimeRangeArgs) ToPresentationTimeRangePtrOutput() PresentationTimeRangePtrOutput {
	return i.ToPresentationTimeRangePtrOutputWithContext(context.Background())
}

func (i PresentationTimeRangeArgs) ToPresentationTimeRangePtrOutputWithContext(ctx context.Context) PresentationTimeRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresentationTimeRangeOutput).ToPresentationTimeRangePtrOutputWithContext(ctx)
}

// PresentationTimeRangePtrInput is an input type that accepts PresentationTimeRangeArgs, PresentationTimeRangePtr and PresentationTimeRangePtrOutput values.
// You can construct a concrete instance of `PresentationTimeRangePtrInput` via:
//
//          PresentationTimeRangeArgs{...}
//
//  or:
//
//          nil
type PresentationTimeRangePtrInput interface {
	pulumi.Input

	ToPresentationTimeRangePtrOutput() PresentationTimeRangePtrOutput
	ToPresentationTimeRangePtrOutputWithContext(context.Context) PresentationTimeRangePtrOutput
}

type presentationTimeRangePtrType PresentationTimeRangeArgs

func PresentationTimeRangePtr(v *PresentationTimeRangeArgs) PresentationTimeRangePtrInput {
	return (*presentationTimeRangePtrType)(v)
}

func (*presentationTimeRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PresentationTimeRange)(nil)).Elem()
}

func (i *presentationTimeRangePtrType) ToPresentationTimeRangePtrOutput() PresentationTimeRangePtrOutput {
	return i.ToPresentationTimeRangePtrOutputWithContext(context.Background())
}

func (i *presentationTimeRangePtrType) ToPresentationTimeRangePtrOutputWithContext(ctx context.Context) PresentationTimeRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresentationTimeRangePtrOutput)
}

// The presentation time range, this is asset related and not recommended for Account Filter.
type PresentationTimeRangeOutput struct{ *pulumi.OutputState }

func (PresentationTimeRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresentationTimeRange)(nil)).Elem()
}

func (o PresentationTimeRangeOutput) ToPresentationTimeRangeOutput() PresentationTimeRangeOutput {
	return o
}

func (o PresentationTimeRangeOutput) ToPresentationTimeRangeOutputWithContext(ctx context.Context) PresentationTimeRangeOutput {
	return o
}

func (o PresentationTimeRangeOutput) ToPresentationTimeRangePtrOutput() PresentationTimeRangePtrOutput {
	return o.ToPresentationTimeRangePtrOutputWithContext(context.Background())
}

func (o PresentationTimeRangeOutput) ToPresentationTimeRangePtrOutputWithContext(ctx context.Context) PresentationTimeRangePtrOutput {
	return o.ApplyT(func(v PresentationTimeRange) *PresentationTimeRange {
		return &v
	}).(PresentationTimeRangePtrOutput)
}

// The absolute end time boundary.
func (o PresentationTimeRangeOutput) EndTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PresentationTimeRange) *int { return v.EndTimestamp }).(pulumi.IntPtrOutput)
}

// The indicator of forcing existing of end time stamp.
func (o PresentationTimeRangeOutput) ForceEndTimestamp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PresentationTimeRange) *bool { return v.ForceEndTimestamp }).(pulumi.BoolPtrOutput)
}

// The relative to end right edge.
func (o PresentationTimeRangeOutput) LiveBackoffDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PresentationTimeRange) *int { return v.LiveBackoffDuration }).(pulumi.IntPtrOutput)
}

// The relative to end sliding window.
func (o PresentationTimeRangeOutput) PresentationWindowDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PresentationTimeRange) *int { return v.PresentationWindowDuration }).(pulumi.IntPtrOutput)
}

// The absolute start time boundary.
func (o PresentationTimeRangeOutput) StartTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PresentationTimeRange) *int { return v.StartTimestamp }).(pulumi.IntPtrOutput)
}

// The time scale of time stamps.
func (o PresentationTimeRangeOutput) Timescale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PresentationTimeRange) *int { return v.Timescale }).(pulumi.IntPtrOutput)
}

type PresentationTimeRangePtrOutput struct{ *pulumi.OutputState }

func (PresentationTimeRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PresentationTimeRange)(nil)).Elem()
}

func (o PresentationTimeRangePtrOutput) ToPresentationTimeRangePtrOutput() PresentationTimeRangePtrOutput {
	return o
}

func (o PresentationTimeRangePtrOutput) ToPresentationTimeRangePtrOutputWithContext(ctx context.Context) PresentationTimeRangePtrOutput {
	return o
}

func (o PresentationTimeRangePtrOutput) Elem() PresentationTimeRangeOutput {
	return o.ApplyT(func(v *PresentationTimeRange) PresentationTimeRange { return *v }).(PresentationTimeRangeOutput)
}

// The absolute end time boundary.
func (o PresentationTimeRangePtrOutput) EndTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRange) *int {
		if v == nil {
			return nil
		}
		return v.EndTimestamp
	}).(pulumi.IntPtrOutput)
}

// The indicator of forcing existing of end time stamp.
func (o PresentationTimeRangePtrOutput) ForceEndTimestamp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRange) *bool {
		if v == nil {
			return nil
		}
		return v.ForceEndTimestamp
	}).(pulumi.BoolPtrOutput)
}

// The relative to end right edge.
func (o PresentationTimeRangePtrOutput) LiveBackoffDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRange) *int {
		if v == nil {
			return nil
		}
		return v.LiveBackoffDuration
	}).(pulumi.IntPtrOutput)
}

// The relative to end sliding window.
func (o PresentationTimeRangePtrOutput) PresentationWindowDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRange) *int {
		if v == nil {
			return nil
		}
		return v.PresentationWindowDuration
	}).(pulumi.IntPtrOutput)
}

// The absolute start time boundary.
func (o PresentationTimeRangePtrOutput) StartTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRange) *int {
		if v == nil {
			return nil
		}
		return v.StartTimestamp
	}).(pulumi.IntPtrOutput)
}

// The time scale of time stamps.
func (o PresentationTimeRangePtrOutput) Timescale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRange) *int {
		if v == nil {
			return nil
		}
		return v.Timescale
	}).(pulumi.IntPtrOutput)
}

// The presentation time range, this is asset related and not recommended for Account Filter.
type PresentationTimeRangeResponse struct {
	// The absolute end time boundary.
	EndTimestamp *int `pulumi:"endTimestamp"`
	// The indicator of forcing existing of end time stamp.
	ForceEndTimestamp *bool `pulumi:"forceEndTimestamp"`
	// The relative to end right edge.
	LiveBackoffDuration *int `pulumi:"liveBackoffDuration"`
	// The relative to end sliding window.
	PresentationWindowDuration *int `pulumi:"presentationWindowDuration"`
	// The absolute start time boundary.
	StartTimestamp *int `pulumi:"startTimestamp"`
	// The time scale of time stamps.
	Timescale *int `pulumi:"timescale"`
}

// PresentationTimeRangeResponseInput is an input type that accepts PresentationTimeRangeResponseArgs and PresentationTimeRangeResponseOutput values.
// You can construct a concrete instance of `PresentationTimeRangeResponseInput` via:
//
//          PresentationTimeRangeResponseArgs{...}
type PresentationTimeRangeResponseInput interface {
	pulumi.Input

	ToPresentationTimeRangeResponseOutput() PresentationTimeRangeResponseOutput
	ToPresentationTimeRangeResponseOutputWithContext(context.Context) PresentationTimeRangeResponseOutput
}

// The presentation time range, this is asset related and not recommended for Account Filter.
type PresentationTimeRangeResponseArgs struct {
	// The absolute end time boundary.
	EndTimestamp pulumi.IntPtrInput `pulumi:"endTimestamp"`
	// The indicator of forcing existing of end time stamp.
	ForceEndTimestamp pulumi.BoolPtrInput `pulumi:"forceEndTimestamp"`
	// The relative to end right edge.
	LiveBackoffDuration pulumi.IntPtrInput `pulumi:"liveBackoffDuration"`
	// The relative to end sliding window.
	PresentationWindowDuration pulumi.IntPtrInput `pulumi:"presentationWindowDuration"`
	// The absolute start time boundary.
	StartTimestamp pulumi.IntPtrInput `pulumi:"startTimestamp"`
	// The time scale of time stamps.
	Timescale pulumi.IntPtrInput `pulumi:"timescale"`
}

func (PresentationTimeRangeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresentationTimeRangeResponse)(nil)).Elem()
}

func (i PresentationTimeRangeResponseArgs) ToPresentationTimeRangeResponseOutput() PresentationTimeRangeResponseOutput {
	return i.ToPresentationTimeRangeResponseOutputWithContext(context.Background())
}

func (i PresentationTimeRangeResponseArgs) ToPresentationTimeRangeResponseOutputWithContext(ctx context.Context) PresentationTimeRangeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresentationTimeRangeResponseOutput)
}

func (i PresentationTimeRangeResponseArgs) ToPresentationTimeRangeResponsePtrOutput() PresentationTimeRangeResponsePtrOutput {
	return i.ToPresentationTimeRangeResponsePtrOutputWithContext(context.Background())
}

func (i PresentationTimeRangeResponseArgs) ToPresentationTimeRangeResponsePtrOutputWithContext(ctx context.Context) PresentationTimeRangeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresentationTimeRangeResponseOutput).ToPresentationTimeRangeResponsePtrOutputWithContext(ctx)
}

// PresentationTimeRangeResponsePtrInput is an input type that accepts PresentationTimeRangeResponseArgs, PresentationTimeRangeResponsePtr and PresentationTimeRangeResponsePtrOutput values.
// You can construct a concrete instance of `PresentationTimeRangeResponsePtrInput` via:
//
//          PresentationTimeRangeResponseArgs{...}
//
//  or:
//
//          nil
type PresentationTimeRangeResponsePtrInput interface {
	pulumi.Input

	ToPresentationTimeRangeResponsePtrOutput() PresentationTimeRangeResponsePtrOutput
	ToPresentationTimeRangeResponsePtrOutputWithContext(context.Context) PresentationTimeRangeResponsePtrOutput
}

type presentationTimeRangeResponsePtrType PresentationTimeRangeResponseArgs

func PresentationTimeRangeResponsePtr(v *PresentationTimeRangeResponseArgs) PresentationTimeRangeResponsePtrInput {
	return (*presentationTimeRangeResponsePtrType)(v)
}

func (*presentationTimeRangeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PresentationTimeRangeResponse)(nil)).Elem()
}

func (i *presentationTimeRangeResponsePtrType) ToPresentationTimeRangeResponsePtrOutput() PresentationTimeRangeResponsePtrOutput {
	return i.ToPresentationTimeRangeResponsePtrOutputWithContext(context.Background())
}

func (i *presentationTimeRangeResponsePtrType) ToPresentationTimeRangeResponsePtrOutputWithContext(ctx context.Context) PresentationTimeRangeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresentationTimeRangeResponsePtrOutput)
}

// The presentation time range, this is asset related and not recommended for Account Filter.
type PresentationTimeRangeResponseOutput struct{ *pulumi.OutputState }

func (PresentationTimeRangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresentationTimeRangeResponse)(nil)).Elem()
}

func (o PresentationTimeRangeResponseOutput) ToPresentationTimeRangeResponseOutput() PresentationTimeRangeResponseOutput {
	return o
}

func (o PresentationTimeRangeResponseOutput) ToPresentationTimeRangeResponseOutputWithContext(ctx context.Context) PresentationTimeRangeResponseOutput {
	return o
}

func (o PresentationTimeRangeResponseOutput) ToPresentationTimeRangeResponsePtrOutput() PresentationTimeRangeResponsePtrOutput {
	return o.ToPresentationTimeRangeResponsePtrOutputWithContext(context.Background())
}

func (o PresentationTimeRangeResponseOutput) ToPresentationTimeRangeResponsePtrOutputWithContext(ctx context.Context) PresentationTimeRangeResponsePtrOutput {
	return o.ApplyT(func(v PresentationTimeRangeResponse) *PresentationTimeRangeResponse {
		return &v
	}).(PresentationTimeRangeResponsePtrOutput)
}

// The absolute end time boundary.
func (o PresentationTimeRangeResponseOutput) EndTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PresentationTimeRangeResponse) *int { return v.EndTimestamp }).(pulumi.IntPtrOutput)
}

// The indicator of forcing existing of end time stamp.
func (o PresentationTimeRangeResponseOutput) ForceEndTimestamp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PresentationTimeRangeResponse) *bool { return v.ForceEndTimestamp }).(pulumi.BoolPtrOutput)
}

// The relative to end right edge.
func (o PresentationTimeRangeResponseOutput) LiveBackoffDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PresentationTimeRangeResponse) *int { return v.LiveBackoffDuration }).(pulumi.IntPtrOutput)
}

// The relative to end sliding window.
func (o PresentationTimeRangeResponseOutput) PresentationWindowDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PresentationTimeRangeResponse) *int { return v.PresentationWindowDuration }).(pulumi.IntPtrOutput)
}

// The absolute start time boundary.
func (o PresentationTimeRangeResponseOutput) StartTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PresentationTimeRangeResponse) *int { return v.StartTimestamp }).(pulumi.IntPtrOutput)
}

// The time scale of time stamps.
func (o PresentationTimeRangeResponseOutput) Timescale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PresentationTimeRangeResponse) *int { return v.Timescale }).(pulumi.IntPtrOutput)
}

type PresentationTimeRangeResponsePtrOutput struct{ *pulumi.OutputState }

func (PresentationTimeRangeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PresentationTimeRangeResponse)(nil)).Elem()
}

func (o PresentationTimeRangeResponsePtrOutput) ToPresentationTimeRangeResponsePtrOutput() PresentationTimeRangeResponsePtrOutput {
	return o
}

func (o PresentationTimeRangeResponsePtrOutput) ToPresentationTimeRangeResponsePtrOutputWithContext(ctx context.Context) PresentationTimeRangeResponsePtrOutput {
	return o
}

func (o PresentationTimeRangeResponsePtrOutput) Elem() PresentationTimeRangeResponseOutput {
	return o.ApplyT(func(v *PresentationTimeRangeResponse) PresentationTimeRangeResponse { return *v }).(PresentationTimeRangeResponseOutput)
}

// The absolute end time boundary.
func (o PresentationTimeRangeResponsePtrOutput) EndTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRangeResponse) *int {
		if v == nil {
			return nil
		}
		return v.EndTimestamp
	}).(pulumi.IntPtrOutput)
}

// The indicator of forcing existing of end time stamp.
func (o PresentationTimeRangeResponsePtrOutput) ForceEndTimestamp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRangeResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ForceEndTimestamp
	}).(pulumi.BoolPtrOutput)
}

// The relative to end right edge.
func (o PresentationTimeRangeResponsePtrOutput) LiveBackoffDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRangeResponse) *int {
		if v == nil {
			return nil
		}
		return v.LiveBackoffDuration
	}).(pulumi.IntPtrOutput)
}

// The relative to end sliding window.
func (o PresentationTimeRangeResponsePtrOutput) PresentationWindowDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRangeResponse) *int {
		if v == nil {
			return nil
		}
		return v.PresentationWindowDuration
	}).(pulumi.IntPtrOutput)
}

// The absolute start time boundary.
func (o PresentationTimeRangeResponsePtrOutput) StartTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRangeResponse) *int {
		if v == nil {
			return nil
		}
		return v.StartTimestamp
	}).(pulumi.IntPtrOutput)
}

// The time scale of time stamps.
func (o PresentationTimeRangeResponsePtrOutput) Timescale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PresentationTimeRangeResponse) *int {
		if v == nil {
			return nil
		}
		return v.Timescale
	}).(pulumi.IntPtrOutput)
}

// Base type for all Presets, which define the recipe or instructions on how the input media files should be processed.
type Preset struct {
}

// PresetInput is an input type that accepts PresetArgs and PresetOutput values.
// You can construct a concrete instance of `PresetInput` via:
//
//          PresetArgs{...}
type PresetInput interface {
	pulumi.Input

	ToPresetOutput() PresetOutput
	ToPresetOutputWithContext(context.Context) PresetOutput
}

// Base type for all Presets, which define the recipe or instructions on how the input media files should be processed.
type PresetArgs struct {
}

func (PresetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Preset)(nil)).Elem()
}

func (i PresetArgs) ToPresetOutput() PresetOutput {
	return i.ToPresetOutputWithContext(context.Background())
}

func (i PresetArgs) ToPresetOutputWithContext(ctx context.Context) PresetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetOutput)
}

// Base type for all Presets, which define the recipe or instructions on how the input media files should be processed.
type PresetOutput struct{ *pulumi.OutputState }

func (PresetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Preset)(nil)).Elem()
}

func (o PresetOutput) ToPresetOutput() PresetOutput {
	return o
}

func (o PresetOutput) ToPresetOutputWithContext(ctx context.Context) PresetOutput {
	return o
}

// Base type for all Presets, which define the recipe or instructions on how the input media files should be processed.
type PresetResponse struct {
}

// PresetResponseInput is an input type that accepts PresetResponseArgs and PresetResponseOutput values.
// You can construct a concrete instance of `PresetResponseInput` via:
//
//          PresetResponseArgs{...}
type PresetResponseInput interface {
	pulumi.Input

	ToPresetResponseOutput() PresetResponseOutput
	ToPresetResponseOutputWithContext(context.Context) PresetResponseOutput
}

// Base type for all Presets, which define the recipe or instructions on how the input media files should be processed.
type PresetResponseArgs struct {
}

func (PresetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetResponse)(nil)).Elem()
}

func (i PresetResponseArgs) ToPresetResponseOutput() PresetResponseOutput {
	return i.ToPresetResponseOutputWithContext(context.Background())
}

func (i PresetResponseArgs) ToPresetResponseOutputWithContext(ctx context.Context) PresetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PresetResponseOutput)
}

// Base type for all Presets, which define the recipe or instructions on how the input media files should be processed.
type PresetResponseOutput struct{ *pulumi.OutputState }

func (PresetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PresetResponse)(nil)).Elem()
}

func (o PresetResponseOutput) ToPresetResponseOutput() PresetResponseOutput {
	return o
}

func (o PresetResponseOutput) ToPresetResponseOutputWithContext(ctx context.Context) PresetResponseOutput {
	return o
}

// The Private Endpoint resource.
type PrivateEndpoint struct {
}

// PrivateEndpointInput is an input type that accepts PrivateEndpointArgs and PrivateEndpointOutput values.
// You can construct a concrete instance of `PrivateEndpointInput` via:
//
//          PrivateEndpointArgs{...}
type PrivateEndpointInput interface {
	pulumi.Input

	ToPrivateEndpointOutput() PrivateEndpointOutput
	ToPrivateEndpointOutputWithContext(context.Context) PrivateEndpointOutput
}

// The Private Endpoint resource.
type PrivateEndpointArgs struct {
}

func (PrivateEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpoint)(nil)).Elem()
}

func (i PrivateEndpointArgs) ToPrivateEndpointOutput() PrivateEndpointOutput {
	return i.ToPrivateEndpointOutputWithContext(context.Background())
}

func (i PrivateEndpointArgs) ToPrivateEndpointOutputWithContext(ctx context.Context) PrivateEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutput)
}

func (i PrivateEndpointArgs) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return i.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (i PrivateEndpointArgs) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutput).ToPrivateEndpointPtrOutputWithContext(ctx)
}

// PrivateEndpointPtrInput is an input type that accepts PrivateEndpointArgs, PrivateEndpointPtr and PrivateEndpointPtrOutput values.
// You can construct a concrete instance of `PrivateEndpointPtrInput` via:
//
//          PrivateEndpointArgs{...}
//
//  or:
//
//          nil
type PrivateEndpointPtrInput interface {
	pulumi.Input

	ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput
	ToPrivateEndpointPtrOutputWithContext(context.Context) PrivateEndpointPtrOutput
}

type privateEndpointPtrType PrivateEndpointArgs

func PrivateEndpointPtr(v *PrivateEndpointArgs) PrivateEndpointPtrInput {
	return (*privateEndpointPtrType)(v)
}

func (*privateEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpoint)(nil)).Elem()
}

func (i *privateEndpointPtrType) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return i.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (i *privateEndpointPtrType) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointPtrOutput)
}

// The Private Endpoint resource.
type PrivateEndpointOutput struct{ *pulumi.OutputState }

func (PrivateEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpoint)(nil)).Elem()
}

func (o PrivateEndpointOutput) ToPrivateEndpointOutput() PrivateEndpointOutput {
	return o
}

func (o PrivateEndpointOutput) ToPrivateEndpointOutputWithContext(ctx context.Context) PrivateEndpointOutput {
	return o
}

func (o PrivateEndpointOutput) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return o.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (o PrivateEndpointOutput) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return o.ApplyT(func(v PrivateEndpoint) *PrivateEndpoint {
		return &v
	}).(PrivateEndpointPtrOutput)
}

type PrivateEndpointPtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpoint)(nil)).Elem()
}

func (o PrivateEndpointPtrOutput) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return o
}

func (o PrivateEndpointPtrOutput) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return o
}

func (o PrivateEndpointPtrOutput) Elem() PrivateEndpointOutput {
	return o.ApplyT(func(v *PrivateEndpoint) PrivateEndpoint { return *v }).(PrivateEndpointOutput)
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionType struct {
	// The name of the resource
	Name string `pulumi:"name"`
	// Resource properties.
	Properties PrivateEndpointConnectionPropertiesResponse `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type string `pulumi:"type"`
}

// PrivateEndpointConnectionTypeInput is an input type that accepts PrivateEndpointConnectionTypeArgs and PrivateEndpointConnectionTypeOutput values.
// You can construct a concrete instance of `PrivateEndpointConnectionTypeInput` via:
//
//          PrivateEndpointConnectionTypeArgs{...}
type PrivateEndpointConnectionTypeInput interface {
	pulumi.Input

	ToPrivateEndpointConnectionTypeOutput() PrivateEndpointConnectionTypeOutput
	ToPrivateEndpointConnectionTypeOutputWithContext(context.Context) PrivateEndpointConnectionTypeOutput
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionTypeArgs struct {
	// The name of the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Resource properties.
	Properties PrivateEndpointConnectionPropertiesResponseInput `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PrivateEndpointConnectionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionType)(nil)).Elem()
}

func (i PrivateEndpointConnectionTypeArgs) ToPrivateEndpointConnectionTypeOutput() PrivateEndpointConnectionTypeOutput {
	return i.ToPrivateEndpointConnectionTypeOutputWithContext(context.Background())
}

func (i PrivateEndpointConnectionTypeArgs) ToPrivateEndpointConnectionTypeOutputWithContext(ctx context.Context) PrivateEndpointConnectionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointConnectionTypeOutput)
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionTypeOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionType)(nil)).Elem()
}

func (o PrivateEndpointConnectionTypeOutput) ToPrivateEndpointConnectionTypeOutput() PrivateEndpointConnectionTypeOutput {
	return o
}

func (o PrivateEndpointConnectionTypeOutput) ToPrivateEndpointConnectionTypeOutputWithContext(ctx context.Context) PrivateEndpointConnectionTypeOutput {
	return o
}

// The name of the resource
func (o PrivateEndpointConnectionTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionType) string { return v.Name }).(pulumi.StringOutput)
}

// Resource properties.
func (o PrivateEndpointConnectionTypeOutput) Properties() PrivateEndpointConnectionPropertiesResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionType) PrivateEndpointConnectionPropertiesResponse { return v.Properties }).(PrivateEndpointConnectionPropertiesResponseOutput)
}

// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
func (o PrivateEndpointConnectionTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionType) string { return v.Type }).(pulumi.StringOutput)
}

// Properties of the PrivateEndpointConnectProperties.
type PrivateEndpointConnectionPropertiesResponse struct {
	// The resource of private end point.
	PrivateEndpoint *PrivateEndpointResponse `pulumi:"privateEndpoint"`
	// A collection of information about the state of the connection between service consumer and provider.
	PrivateLinkServiceConnectionState PrivateLinkServiceConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	// The provisioning state of the private endpoint connection resource.
	ProvisioningState *string `pulumi:"provisioningState"`
}

// PrivateEndpointConnectionPropertiesResponseInput is an input type that accepts PrivateEndpointConnectionPropertiesResponseArgs and PrivateEndpointConnectionPropertiesResponseOutput values.
// You can construct a concrete instance of `PrivateEndpointConnectionPropertiesResponseInput` via:
//
//          PrivateEndpointConnectionPropertiesResponseArgs{...}
type PrivateEndpointConnectionPropertiesResponseInput interface {
	pulumi.Input

	ToPrivateEndpointConnectionPropertiesResponseOutput() PrivateEndpointConnectionPropertiesResponseOutput
	ToPrivateEndpointConnectionPropertiesResponseOutputWithContext(context.Context) PrivateEndpointConnectionPropertiesResponseOutput
}

// Properties of the PrivateEndpointConnectProperties.
type PrivateEndpointConnectionPropertiesResponseArgs struct {
	// The resource of private end point.
	PrivateEndpoint PrivateEndpointResponsePtrInput `pulumi:"privateEndpoint"`
	// A collection of information about the state of the connection between service consumer and provider.
	PrivateLinkServiceConnectionState PrivateLinkServiceConnectionStateResponseInput `pulumi:"privateLinkServiceConnectionState"`
	// The provisioning state of the private endpoint connection resource.
	ProvisioningState pulumi.StringPtrInput `pulumi:"provisioningState"`
}

func (PrivateEndpointConnectionPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionPropertiesResponse)(nil)).Elem()
}

func (i PrivateEndpointConnectionPropertiesResponseArgs) ToPrivateEndpointConnectionPropertiesResponseOutput() PrivateEndpointConnectionPropertiesResponseOutput {
	return i.ToPrivateEndpointConnectionPropertiesResponseOutputWithContext(context.Background())
}

func (i PrivateEndpointConnectionPropertiesResponseArgs) ToPrivateEndpointConnectionPropertiesResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointConnectionPropertiesResponseOutput)
}

func (i PrivateEndpointConnectionPropertiesResponseArgs) ToPrivateEndpointConnectionPropertiesResponsePtrOutput() PrivateEndpointConnectionPropertiesResponsePtrOutput {
	return i.ToPrivateEndpointConnectionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i PrivateEndpointConnectionPropertiesResponseArgs) ToPrivateEndpointConnectionPropertiesResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointConnectionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointConnectionPropertiesResponseOutput).ToPrivateEndpointConnectionPropertiesResponsePtrOutputWithContext(ctx)
}

// PrivateEndpointConnectionPropertiesResponsePtrInput is an input type that accepts PrivateEndpointConnectionPropertiesResponseArgs, PrivateEndpointConnectionPropertiesResponsePtr and PrivateEndpointConnectionPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `PrivateEndpointConnectionPropertiesResponsePtrInput` via:
//
//          PrivateEndpointConnectionPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type PrivateEndpointConnectionPropertiesResponsePtrInput interface {
	pulumi.Input

	ToPrivateEndpointConnectionPropertiesResponsePtrOutput() PrivateEndpointConnectionPropertiesResponsePtrOutput
	ToPrivateEndpointConnectionPropertiesResponsePtrOutputWithContext(context.Context) PrivateEndpointConnectionPropertiesResponsePtrOutput
}

type privateEndpointConnectionPropertiesResponsePtrType PrivateEndpointConnectionPropertiesResponseArgs

func PrivateEndpointConnectionPropertiesResponsePtr(v *PrivateEndpointConnectionPropertiesResponseArgs) PrivateEndpointConnectionPropertiesResponsePtrInput {
	return (*privateEndpointConnectionPropertiesResponsePtrType)(v)
}

func (*privateEndpointConnectionPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointConnectionPropertiesResponse)(nil)).Elem()
}

func (i *privateEndpointConnectionPropertiesResponsePtrType) ToPrivateEndpointConnectionPropertiesResponsePtrOutput() PrivateEndpointConnectionPropertiesResponsePtrOutput {
	return i.ToPrivateEndpointConnectionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *privateEndpointConnectionPropertiesResponsePtrType) ToPrivateEndpointConnectionPropertiesResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointConnectionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointConnectionPropertiesResponsePtrOutput)
}

// Properties of the PrivateEndpointConnectProperties.
type PrivateEndpointConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionPropertiesResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionPropertiesResponseOutput) ToPrivateEndpointConnectionPropertiesResponseOutput() PrivateEndpointConnectionPropertiesResponseOutput {
	return o
}

func (o PrivateEndpointConnectionPropertiesResponseOutput) ToPrivateEndpointConnectionPropertiesResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionPropertiesResponseOutput {
	return o
}

func (o PrivateEndpointConnectionPropertiesResponseOutput) ToPrivateEndpointConnectionPropertiesResponsePtrOutput() PrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o.ToPrivateEndpointConnectionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o PrivateEndpointConnectionPropertiesResponseOutput) ToPrivateEndpointConnectionPropertiesResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionPropertiesResponse) *PrivateEndpointConnectionPropertiesResponse {
		return &v
	}).(PrivateEndpointConnectionPropertiesResponsePtrOutput)
}

// The resource of private end point.
func (o PrivateEndpointConnectionPropertiesResponseOutput) PrivateEndpoint() PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionPropertiesResponse) *PrivateEndpointResponse { return v.PrivateEndpoint }).(PrivateEndpointResponsePtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
func (o PrivateEndpointConnectionPropertiesResponseOutput) PrivateLinkServiceConnectionState() PrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionPropertiesResponse) PrivateLinkServiceConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkServiceConnectionStateResponseOutput)
}

// The provisioning state of the private endpoint connection resource.
func (o PrivateEndpointConnectionPropertiesResponseOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionPropertiesResponse) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

type PrivateEndpointConnectionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointConnectionPropertiesResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) ToPrivateEndpointConnectionPropertiesResponsePtrOutput() PrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o
}

func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) ToPrivateEndpointConnectionPropertiesResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o
}

func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) Elem() PrivateEndpointConnectionPropertiesResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointConnectionPropertiesResponse) PrivateEndpointConnectionPropertiesResponse {
		return *v
	}).(PrivateEndpointConnectionPropertiesResponseOutput)
}

// The resource of private end point.
func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) PrivateEndpoint() PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v *PrivateEndpointConnectionPropertiesResponse) *PrivateEndpointResponse {
		if v == nil {
			return nil
		}
		return v.PrivateEndpoint
	}).(PrivateEndpointResponsePtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) PrivateLinkServiceConnectionState() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v *PrivateEndpointConnectionPropertiesResponse) *PrivateLinkServiceConnectionStateResponse {
		if v == nil {
			return nil
		}
		return &v.PrivateLinkServiceConnectionState
	}).(PrivateLinkServiceConnectionStateResponsePtrOutput)
}

// The provisioning state of the private endpoint connection resource.
func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointConnectionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The Private Endpoint resource.
type PrivateEndpointResponse struct {
	// The ARM identifier for Private Endpoint
	Id string `pulumi:"id"`
}

// PrivateEndpointResponseInput is an input type that accepts PrivateEndpointResponseArgs and PrivateEndpointResponseOutput values.
// You can construct a concrete instance of `PrivateEndpointResponseInput` via:
//
//          PrivateEndpointResponseArgs{...}
type PrivateEndpointResponseInput interface {
	pulumi.Input

	ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput
	ToPrivateEndpointResponseOutputWithContext(context.Context) PrivateEndpointResponseOutput
}

// The Private Endpoint resource.
type PrivateEndpointResponseArgs struct {
	// The ARM identifier for Private Endpoint
	Id pulumi.StringInput `pulumi:"id"`
}

func (PrivateEndpointResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (i PrivateEndpointResponseArgs) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return i.ToPrivateEndpointResponseOutputWithContext(context.Background())
}

func (i PrivateEndpointResponseArgs) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResponseOutput)
}

func (i PrivateEndpointResponseArgs) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return i.ToPrivateEndpointResponsePtrOutputWithContext(context.Background())
}

func (i PrivateEndpointResponseArgs) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResponseOutput).ToPrivateEndpointResponsePtrOutputWithContext(ctx)
}

// PrivateEndpointResponsePtrInput is an input type that accepts PrivateEndpointResponseArgs, PrivateEndpointResponsePtr and PrivateEndpointResponsePtrOutput values.
// You can construct a concrete instance of `PrivateEndpointResponsePtrInput` via:
//
//          PrivateEndpointResponseArgs{...}
//
//  or:
//
//          nil
type PrivateEndpointResponsePtrInput interface {
	pulumi.Input

	ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput
	ToPrivateEndpointResponsePtrOutputWithContext(context.Context) PrivateEndpointResponsePtrOutput
}

type privateEndpointResponsePtrType PrivateEndpointResponseArgs

func PrivateEndpointResponsePtr(v *PrivateEndpointResponseArgs) PrivateEndpointResponsePtrInput {
	return (*privateEndpointResponsePtrType)(v)
}

func (*privateEndpointResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (i *privateEndpointResponsePtrType) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return i.ToPrivateEndpointResponsePtrOutputWithContext(context.Background())
}

func (i *privateEndpointResponsePtrType) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResponsePtrOutput)
}

// The Private Endpoint resource.
type PrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o.ToPrivateEndpointResponsePtrOutputWithContext(context.Background())
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) *PrivateEndpointResponse {
		return &v
	}).(PrivateEndpointResponsePtrOutput)
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) string { return v.Id }).(pulumi.StringOutput)
}

type PrivateEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) Elem() PrivateEndpointResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) PrivateEndpointResponse { return *v }).(PrivateEndpointResponseOutput)
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// PrivateLinkServiceConnectionStateInput is an input type that accepts PrivateLinkServiceConnectionStateArgs and PrivateLinkServiceConnectionStateOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateInput` via:
//
//          PrivateLinkServiceConnectionStateArgs{...}
type PrivateLinkServiceConnectionStateInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput
	ToPrivateLinkServiceConnectionStateOutputWithContext(context.Context) PrivateLinkServiceConnectionStateOutput
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateArgs struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkServiceConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return i.ToPrivateLinkServiceConnectionStateOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput)
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return i.ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput).ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx)
}

// PrivateLinkServiceConnectionStatePtrInput is an input type that accepts PrivateLinkServiceConnectionStateArgs, PrivateLinkServiceConnectionStatePtr and PrivateLinkServiceConnectionStatePtrOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStatePtrInput` via:
//
//          PrivateLinkServiceConnectionStateArgs{...}
//
//  or:
//
//          nil
type PrivateLinkServiceConnectionStatePtrInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput
	ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Context) PrivateLinkServiceConnectionStatePtrOutput
}

type privateLinkServiceConnectionStatePtrType PrivateLinkServiceConnectionStateArgs

func PrivateLinkServiceConnectionStatePtr(v *PrivateLinkServiceConnectionStateArgs) PrivateLinkServiceConnectionStatePtrInput {
	return (*privateLinkServiceConnectionStatePtrType)(v)
}

func (*privateLinkServiceConnectionStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i *privateLinkServiceConnectionStatePtrType) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return i.ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (i *privateLinkServiceConnectionStatePtrType) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStatePtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return o.ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *PrivateLinkServiceConnectionState {
		return &v
	}).(PrivateLinkServiceConnectionStatePtrOutput)
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type PrivateLinkServiceConnectionStatePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStatePtrOutput) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStatePtrOutput) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStatePtrOutput) Elem() PrivateLinkServiceConnectionStateOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) PrivateLinkServiceConnectionState { return *v }).(PrivateLinkServiceConnectionStateOutput)
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStatePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStatePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStatePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponse struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// PrivateLinkServiceConnectionStateResponseInput is an input type that accepts PrivateLinkServiceConnectionStateResponseArgs and PrivateLinkServiceConnectionStateResponseOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateResponseInput` via:
//
//          PrivateLinkServiceConnectionStateResponseArgs{...}
type PrivateLinkServiceConnectionStateResponseInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput
	ToPrivateLinkServiceConnectionStateResponseOutputWithContext(context.Context) PrivateLinkServiceConnectionStateResponseOutput
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponseArgs struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkServiceConnectionStateResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionStateResponseArgs) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return i.ToPrivateLinkServiceConnectionStateResponseOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateResponseArgs) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateResponseOutput)
}

func (i PrivateLinkServiceConnectionStateResponseArgs) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return i.ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateResponseArgs) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateResponseOutput).ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx)
}

// PrivateLinkServiceConnectionStateResponsePtrInput is an input type that accepts PrivateLinkServiceConnectionStateResponseArgs, PrivateLinkServiceConnectionStateResponsePtr and PrivateLinkServiceConnectionStateResponsePtrOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateResponsePtrInput` via:
//
//          PrivateLinkServiceConnectionStateResponseArgs{...}
//
//  or:
//
//          nil
type PrivateLinkServiceConnectionStateResponsePtrInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput
	ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput
}

type privateLinkServiceConnectionStateResponsePtrType PrivateLinkServiceConnectionStateResponseArgs

func PrivateLinkServiceConnectionStateResponsePtr(v *PrivateLinkServiceConnectionStateResponseArgs) PrivateLinkServiceConnectionStateResponsePtrInput {
	return (*privateLinkServiceConnectionStateResponsePtrType)(v)
}

func (*privateLinkServiceConnectionStateResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (i *privateLinkServiceConnectionStateResponsePtrType) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return i.ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(context.Background())
}

func (i *privateLinkServiceConnectionStateResponsePtrType) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateResponsePtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(context.Background())
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *PrivateLinkServiceConnectionStateResponse {
		return &v
	}).(PrivateLinkServiceConnectionStateResponsePtrOutput)
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type PrivateLinkServiceConnectionStateResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Elem() PrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) PrivateLinkServiceConnectionStateResponse {
		return *v
	}).(PrivateLinkServiceConnectionStateResponseOutput)
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The storage account details.
type StorageAccount struct {
	// The ID of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts.
	Id *string `pulumi:"id"`
	// The type of the storage account.
	Type string `pulumi:"type"`
}

// StorageAccountInput is an input type that accepts StorageAccountArgs and StorageAccountOutput values.
// You can construct a concrete instance of `StorageAccountInput` via:
//
//          StorageAccountArgs{...}
type StorageAccountInput interface {
	pulumi.Input

	ToStorageAccountOutput() StorageAccountOutput
	ToStorageAccountOutputWithContext(context.Context) StorageAccountOutput
}

// The storage account details.
type StorageAccountArgs struct {
	// The ID of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of the storage account.
	Type pulumi.StringInput `pulumi:"type"`
}

func (StorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccount)(nil)).Elem()
}

func (i StorageAccountArgs) ToStorageAccountOutput() StorageAccountOutput {
	return i.ToStorageAccountOutputWithContext(context.Background())
}

func (i StorageAccountArgs) ToStorageAccountOutputWithContext(ctx context.Context) StorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountOutput)
}

// StorageAccountArrayInput is an input type that accepts StorageAccountArray and StorageAccountArrayOutput values.
// You can construct a concrete instance of `StorageAccountArrayInput` via:
//
//          StorageAccountArray{ StorageAccountArgs{...} }
type StorageAccountArrayInput interface {
	pulumi.Input

	ToStorageAccountArrayOutput() StorageAccountArrayOutput
	ToStorageAccountArrayOutputWithContext(context.Context) StorageAccountArrayOutput
}

type StorageAccountArray []StorageAccountInput

func (StorageAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccount)(nil)).Elem()
}

func (i StorageAccountArray) ToStorageAccountArrayOutput() StorageAccountArrayOutput {
	return i.ToStorageAccountArrayOutputWithContext(context.Background())
}

func (i StorageAccountArray) ToStorageAccountArrayOutputWithContext(ctx context.Context) StorageAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountArrayOutput)
}

// The storage account details.
type StorageAccountOutput struct{ *pulumi.OutputState }

func (StorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccount)(nil)).Elem()
}

func (o StorageAccountOutput) ToStorageAccountOutput() StorageAccountOutput {
	return o
}

func (o StorageAccountOutput) ToStorageAccountOutputWithContext(ctx context.Context) StorageAccountOutput {
	return o
}

// The ID of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts.
func (o StorageAccountOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccount) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of the storage account.
func (o StorageAccountOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StorageAccount) string { return v.Type }).(pulumi.StringOutput)
}

type StorageAccountArrayOutput struct{ *pulumi.OutputState }

func (StorageAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccount)(nil)).Elem()
}

func (o StorageAccountArrayOutput) ToStorageAccountArrayOutput() StorageAccountArrayOutput {
	return o
}

func (o StorageAccountArrayOutput) ToStorageAccountArrayOutputWithContext(ctx context.Context) StorageAccountArrayOutput {
	return o
}

func (o StorageAccountArrayOutput) Index(i pulumi.IntInput) StorageAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageAccount {
		return vs[0].([]StorageAccount)[vs[1].(int)]
	}).(StorageAccountOutput)
}

// The storage account details.
type StorageAccountResponse struct {
	// The ID of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts.
	Id *string `pulumi:"id"`
	// The type of the storage account.
	Type string `pulumi:"type"`
}

// StorageAccountResponseInput is an input type that accepts StorageAccountResponseArgs and StorageAccountResponseOutput values.
// You can construct a concrete instance of `StorageAccountResponseInput` via:
//
//          StorageAccountResponseArgs{...}
type StorageAccountResponseInput interface {
	pulumi.Input

	ToStorageAccountResponseOutput() StorageAccountResponseOutput
	ToStorageAccountResponseOutputWithContext(context.Context) StorageAccountResponseOutput
}

// The storage account details.
type StorageAccountResponseArgs struct {
	// The ID of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of the storage account.
	Type pulumi.StringInput `pulumi:"type"`
}

func (StorageAccountResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountResponse)(nil)).Elem()
}

func (i StorageAccountResponseArgs) ToStorageAccountResponseOutput() StorageAccountResponseOutput {
	return i.ToStorageAccountResponseOutputWithContext(context.Background())
}

func (i StorageAccountResponseArgs) ToStorageAccountResponseOutputWithContext(ctx context.Context) StorageAccountResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountResponseOutput)
}

// StorageAccountResponseArrayInput is an input type that accepts StorageAccountResponseArray and StorageAccountResponseArrayOutput values.
// You can construct a concrete instance of `StorageAccountResponseArrayInput` via:
//
//          StorageAccountResponseArray{ StorageAccountResponseArgs{...} }
type StorageAccountResponseArrayInput interface {
	pulumi.Input

	ToStorageAccountResponseArrayOutput() StorageAccountResponseArrayOutput
	ToStorageAccountResponseArrayOutputWithContext(context.Context) StorageAccountResponseArrayOutput
}

type StorageAccountResponseArray []StorageAccountResponseInput

func (StorageAccountResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccountResponse)(nil)).Elem()
}

func (i StorageAccountResponseArray) ToStorageAccountResponseArrayOutput() StorageAccountResponseArrayOutput {
	return i.ToStorageAccountResponseArrayOutputWithContext(context.Background())
}

func (i StorageAccountResponseArray) ToStorageAccountResponseArrayOutputWithContext(ctx context.Context) StorageAccountResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountResponseArrayOutput)
}

// The storage account details.
type StorageAccountResponseOutput struct{ *pulumi.OutputState }

func (StorageAccountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountResponse)(nil)).Elem()
}

func (o StorageAccountResponseOutput) ToStorageAccountResponseOutput() StorageAccountResponseOutput {
	return o
}

func (o StorageAccountResponseOutput) ToStorageAccountResponseOutputWithContext(ctx context.Context) StorageAccountResponseOutput {
	return o
}

// The ID of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts.
func (o StorageAccountResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccountResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of the storage account.
func (o StorageAccountResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StorageAccountResponse) string { return v.Type }).(pulumi.StringOutput)
}

type StorageAccountResponseArrayOutput struct{ *pulumi.OutputState }

func (StorageAccountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccountResponse)(nil)).Elem()
}

func (o StorageAccountResponseArrayOutput) ToStorageAccountResponseArrayOutput() StorageAccountResponseArrayOutput {
	return o
}

func (o StorageAccountResponseArrayOutput) ToStorageAccountResponseArrayOutputWithContext(ctx context.Context) StorageAccountResponseArrayOutput {
	return o
}

func (o StorageAccountResponseArrayOutput) Index(i pulumi.IntInput) StorageAccountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageAccountResponse {
		return vs[0].([]StorageAccountResponse)[vs[1].(int)]
	}).(StorageAccountResponseOutput)
}

// The StreamingEndpoint.
type StreamingEndpointType struct {
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The StreamingEndpoint properties.
	Properties StreamingEndpointPropertiesResponse `pulumi:"properties"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type string `pulumi:"type"`
}

// StreamingEndpointTypeInput is an input type that accepts StreamingEndpointTypeArgs and StreamingEndpointTypeOutput values.
// You can construct a concrete instance of `StreamingEndpointTypeInput` via:
//
//          StreamingEndpointTypeArgs{...}
type StreamingEndpointTypeInput interface {
	pulumi.Input

	ToStreamingEndpointTypeOutput() StreamingEndpointTypeOutput
	ToStreamingEndpointTypeOutputWithContext(context.Context) StreamingEndpointTypeOutput
}

// The StreamingEndpoint.
type StreamingEndpointTypeArgs struct {
	// The geo-location where the resource lives
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The StreamingEndpoint properties.
	Properties StreamingEndpointPropertiesResponseInput `pulumi:"properties"`
	// Resource tags.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringInput `pulumi:"type"`
}

func (StreamingEndpointTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointType)(nil)).Elem()
}

func (i StreamingEndpointTypeArgs) ToStreamingEndpointTypeOutput() StreamingEndpointTypeOutput {
	return i.ToStreamingEndpointTypeOutputWithContext(context.Background())
}

func (i StreamingEndpointTypeArgs) ToStreamingEndpointTypeOutputWithContext(ctx context.Context) StreamingEndpointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointTypeOutput)
}

// The StreamingEndpoint.
type StreamingEndpointTypeOutput struct{ *pulumi.OutputState }

func (StreamingEndpointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointType)(nil)).Elem()
}

func (o StreamingEndpointTypeOutput) ToStreamingEndpointTypeOutput() StreamingEndpointTypeOutput {
	return o
}

func (o StreamingEndpointTypeOutput) ToStreamingEndpointTypeOutputWithContext(ctx context.Context) StreamingEndpointTypeOutput {
	return o
}

// The geo-location where the resource lives
func (o StreamingEndpointTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingEndpointType) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o StreamingEndpointTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingEndpointType) string { return v.Name }).(pulumi.StringOutput)
}

// The StreamingEndpoint properties.
func (o StreamingEndpointTypeOutput) Properties() StreamingEndpointPropertiesResponseOutput {
	return o.ApplyT(func(v StreamingEndpointType) StreamingEndpointPropertiesResponse { return v.Properties }).(StreamingEndpointPropertiesResponseOutput)
}

// Resource tags.
func (o StreamingEndpointTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v StreamingEndpointType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
func (o StreamingEndpointTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingEndpointType) string { return v.Type }).(pulumi.StringOutput)
}

// StreamingEndpoint access control definition.
type StreamingEndpointAccessControl struct {
	// The access control of Akamai
	Akamai *AkamaiAccessControl `pulumi:"akamai"`
	// The IP access control of the StreamingEndpoint.
	Ip *IPAccessControl `pulumi:"ip"`
}

// StreamingEndpointAccessControlInput is an input type that accepts StreamingEndpointAccessControlArgs and StreamingEndpointAccessControlOutput values.
// You can construct a concrete instance of `StreamingEndpointAccessControlInput` via:
//
//          StreamingEndpointAccessControlArgs{...}
type StreamingEndpointAccessControlInput interface {
	pulumi.Input

	ToStreamingEndpointAccessControlOutput() StreamingEndpointAccessControlOutput
	ToStreamingEndpointAccessControlOutputWithContext(context.Context) StreamingEndpointAccessControlOutput
}

// StreamingEndpoint access control definition.
type StreamingEndpointAccessControlArgs struct {
	// The access control of Akamai
	Akamai AkamaiAccessControlPtrInput `pulumi:"akamai"`
	// The IP access control of the StreamingEndpoint.
	Ip IPAccessControlPtrInput `pulumi:"ip"`
}

func (StreamingEndpointAccessControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointAccessControl)(nil)).Elem()
}

func (i StreamingEndpointAccessControlArgs) ToStreamingEndpointAccessControlOutput() StreamingEndpointAccessControlOutput {
	return i.ToStreamingEndpointAccessControlOutputWithContext(context.Background())
}

func (i StreamingEndpointAccessControlArgs) ToStreamingEndpointAccessControlOutputWithContext(ctx context.Context) StreamingEndpointAccessControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlOutput)
}

func (i StreamingEndpointAccessControlArgs) ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput {
	return i.ToStreamingEndpointAccessControlPtrOutputWithContext(context.Background())
}

func (i StreamingEndpointAccessControlArgs) ToStreamingEndpointAccessControlPtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlOutput).ToStreamingEndpointAccessControlPtrOutputWithContext(ctx)
}

// StreamingEndpointAccessControlPtrInput is an input type that accepts StreamingEndpointAccessControlArgs, StreamingEndpointAccessControlPtr and StreamingEndpointAccessControlPtrOutput values.
// You can construct a concrete instance of `StreamingEndpointAccessControlPtrInput` via:
//
//          StreamingEndpointAccessControlArgs{...}
//
//  or:
//
//          nil
type StreamingEndpointAccessControlPtrInput interface {
	pulumi.Input

	ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput
	ToStreamingEndpointAccessControlPtrOutputWithContext(context.Context) StreamingEndpointAccessControlPtrOutput
}

type streamingEndpointAccessControlPtrType StreamingEndpointAccessControlArgs

func StreamingEndpointAccessControlPtr(v *StreamingEndpointAccessControlArgs) StreamingEndpointAccessControlPtrInput {
	return (*streamingEndpointAccessControlPtrType)(v)
}

func (*streamingEndpointAccessControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingEndpointAccessControl)(nil)).Elem()
}

func (i *streamingEndpointAccessControlPtrType) ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput {
	return i.ToStreamingEndpointAccessControlPtrOutputWithContext(context.Background())
}

func (i *streamingEndpointAccessControlPtrType) ToStreamingEndpointAccessControlPtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlPtrOutput)
}

// StreamingEndpoint access control definition.
type StreamingEndpointAccessControlOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointAccessControl)(nil)).Elem()
}

func (o StreamingEndpointAccessControlOutput) ToStreamingEndpointAccessControlOutput() StreamingEndpointAccessControlOutput {
	return o
}

func (o StreamingEndpointAccessControlOutput) ToStreamingEndpointAccessControlOutputWithContext(ctx context.Context) StreamingEndpointAccessControlOutput {
	return o
}

func (o StreamingEndpointAccessControlOutput) ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput {
	return o.ToStreamingEndpointAccessControlPtrOutputWithContext(context.Background())
}

func (o StreamingEndpointAccessControlOutput) ToStreamingEndpointAccessControlPtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlPtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControl) *StreamingEndpointAccessControl {
		return &v
	}).(StreamingEndpointAccessControlPtrOutput)
}

// The access control of Akamai
func (o StreamingEndpointAccessControlOutput) Akamai() AkamaiAccessControlPtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControl) *AkamaiAccessControl { return v.Akamai }).(AkamaiAccessControlPtrOutput)
}

// The IP access control of the StreamingEndpoint.
func (o StreamingEndpointAccessControlOutput) Ip() IPAccessControlPtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControl) *IPAccessControl { return v.Ip }).(IPAccessControlPtrOutput)
}

type StreamingEndpointAccessControlPtrOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingEndpointAccessControl)(nil)).Elem()
}

func (o StreamingEndpointAccessControlPtrOutput) ToStreamingEndpointAccessControlPtrOutput() StreamingEndpointAccessControlPtrOutput {
	return o
}

func (o StreamingEndpointAccessControlPtrOutput) ToStreamingEndpointAccessControlPtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlPtrOutput {
	return o
}

func (o StreamingEndpointAccessControlPtrOutput) Elem() StreamingEndpointAccessControlOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControl) StreamingEndpointAccessControl { return *v }).(StreamingEndpointAccessControlOutput)
}

// The access control of Akamai
func (o StreamingEndpointAccessControlPtrOutput) Akamai() AkamaiAccessControlPtrOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControl) *AkamaiAccessControl {
		if v == nil {
			return nil
		}
		return v.Akamai
	}).(AkamaiAccessControlPtrOutput)
}

// The IP access control of the StreamingEndpoint.
func (o StreamingEndpointAccessControlPtrOutput) Ip() IPAccessControlPtrOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControl) *IPAccessControl {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(IPAccessControlPtrOutput)
}

// StreamingEndpoint access control definition.
type StreamingEndpointAccessControlResponse struct {
	// The access control of Akamai
	Akamai *AkamaiAccessControlResponse `pulumi:"akamai"`
	// The IP access control of the StreamingEndpoint.
	Ip *IPAccessControlResponse `pulumi:"ip"`
}

// StreamingEndpointAccessControlResponseInput is an input type that accepts StreamingEndpointAccessControlResponseArgs and StreamingEndpointAccessControlResponseOutput values.
// You can construct a concrete instance of `StreamingEndpointAccessControlResponseInput` via:
//
//          StreamingEndpointAccessControlResponseArgs{...}
type StreamingEndpointAccessControlResponseInput interface {
	pulumi.Input

	ToStreamingEndpointAccessControlResponseOutput() StreamingEndpointAccessControlResponseOutput
	ToStreamingEndpointAccessControlResponseOutputWithContext(context.Context) StreamingEndpointAccessControlResponseOutput
}

// StreamingEndpoint access control definition.
type StreamingEndpointAccessControlResponseArgs struct {
	// The access control of Akamai
	Akamai AkamaiAccessControlResponsePtrInput `pulumi:"akamai"`
	// The IP access control of the StreamingEndpoint.
	Ip IPAccessControlResponsePtrInput `pulumi:"ip"`
}

func (StreamingEndpointAccessControlResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointAccessControlResponse)(nil)).Elem()
}

func (i StreamingEndpointAccessControlResponseArgs) ToStreamingEndpointAccessControlResponseOutput() StreamingEndpointAccessControlResponseOutput {
	return i.ToStreamingEndpointAccessControlResponseOutputWithContext(context.Background())
}

func (i StreamingEndpointAccessControlResponseArgs) ToStreamingEndpointAccessControlResponseOutputWithContext(ctx context.Context) StreamingEndpointAccessControlResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlResponseOutput)
}

func (i StreamingEndpointAccessControlResponseArgs) ToStreamingEndpointAccessControlResponsePtrOutput() StreamingEndpointAccessControlResponsePtrOutput {
	return i.ToStreamingEndpointAccessControlResponsePtrOutputWithContext(context.Background())
}

func (i StreamingEndpointAccessControlResponseArgs) ToStreamingEndpointAccessControlResponsePtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlResponseOutput).ToStreamingEndpointAccessControlResponsePtrOutputWithContext(ctx)
}

// StreamingEndpointAccessControlResponsePtrInput is an input type that accepts StreamingEndpointAccessControlResponseArgs, StreamingEndpointAccessControlResponsePtr and StreamingEndpointAccessControlResponsePtrOutput values.
// You can construct a concrete instance of `StreamingEndpointAccessControlResponsePtrInput` via:
//
//          StreamingEndpointAccessControlResponseArgs{...}
//
//  or:
//
//          nil
type StreamingEndpointAccessControlResponsePtrInput interface {
	pulumi.Input

	ToStreamingEndpointAccessControlResponsePtrOutput() StreamingEndpointAccessControlResponsePtrOutput
	ToStreamingEndpointAccessControlResponsePtrOutputWithContext(context.Context) StreamingEndpointAccessControlResponsePtrOutput
}

type streamingEndpointAccessControlResponsePtrType StreamingEndpointAccessControlResponseArgs

func StreamingEndpointAccessControlResponsePtr(v *StreamingEndpointAccessControlResponseArgs) StreamingEndpointAccessControlResponsePtrInput {
	return (*streamingEndpointAccessControlResponsePtrType)(v)
}

func (*streamingEndpointAccessControlResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingEndpointAccessControlResponse)(nil)).Elem()
}

func (i *streamingEndpointAccessControlResponsePtrType) ToStreamingEndpointAccessControlResponsePtrOutput() StreamingEndpointAccessControlResponsePtrOutput {
	return i.ToStreamingEndpointAccessControlResponsePtrOutputWithContext(context.Background())
}

func (i *streamingEndpointAccessControlResponsePtrType) ToStreamingEndpointAccessControlResponsePtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointAccessControlResponsePtrOutput)
}

// StreamingEndpoint access control definition.
type StreamingEndpointAccessControlResponseOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointAccessControlResponse)(nil)).Elem()
}

func (o StreamingEndpointAccessControlResponseOutput) ToStreamingEndpointAccessControlResponseOutput() StreamingEndpointAccessControlResponseOutput {
	return o
}

func (o StreamingEndpointAccessControlResponseOutput) ToStreamingEndpointAccessControlResponseOutputWithContext(ctx context.Context) StreamingEndpointAccessControlResponseOutput {
	return o
}

func (o StreamingEndpointAccessControlResponseOutput) ToStreamingEndpointAccessControlResponsePtrOutput() StreamingEndpointAccessControlResponsePtrOutput {
	return o.ToStreamingEndpointAccessControlResponsePtrOutputWithContext(context.Background())
}

func (o StreamingEndpointAccessControlResponseOutput) ToStreamingEndpointAccessControlResponsePtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlResponsePtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControlResponse) *StreamingEndpointAccessControlResponse {
		return &v
	}).(StreamingEndpointAccessControlResponsePtrOutput)
}

// The access control of Akamai
func (o StreamingEndpointAccessControlResponseOutput) Akamai() AkamaiAccessControlResponsePtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControlResponse) *AkamaiAccessControlResponse { return v.Akamai }).(AkamaiAccessControlResponsePtrOutput)
}

// The IP access control of the StreamingEndpoint.
func (o StreamingEndpointAccessControlResponseOutput) Ip() IPAccessControlResponsePtrOutput {
	return o.ApplyT(func(v StreamingEndpointAccessControlResponse) *IPAccessControlResponse { return v.Ip }).(IPAccessControlResponsePtrOutput)
}

type StreamingEndpointAccessControlResponsePtrOutput struct{ *pulumi.OutputState }

func (StreamingEndpointAccessControlResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingEndpointAccessControlResponse)(nil)).Elem()
}

func (o StreamingEndpointAccessControlResponsePtrOutput) ToStreamingEndpointAccessControlResponsePtrOutput() StreamingEndpointAccessControlResponsePtrOutput {
	return o
}

func (o StreamingEndpointAccessControlResponsePtrOutput) ToStreamingEndpointAccessControlResponsePtrOutputWithContext(ctx context.Context) StreamingEndpointAccessControlResponsePtrOutput {
	return o
}

func (o StreamingEndpointAccessControlResponsePtrOutput) Elem() StreamingEndpointAccessControlResponseOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControlResponse) StreamingEndpointAccessControlResponse { return *v }).(StreamingEndpointAccessControlResponseOutput)
}

// The access control of Akamai
func (o StreamingEndpointAccessControlResponsePtrOutput) Akamai() AkamaiAccessControlResponsePtrOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControlResponse) *AkamaiAccessControlResponse {
		if v == nil {
			return nil
		}
		return v.Akamai
	}).(AkamaiAccessControlResponsePtrOutput)
}

// The IP access control of the StreamingEndpoint.
func (o StreamingEndpointAccessControlResponsePtrOutput) Ip() IPAccessControlResponsePtrOutput {
	return o.ApplyT(func(v *StreamingEndpointAccessControlResponse) *IPAccessControlResponse {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(IPAccessControlResponsePtrOutput)
}

// The StreamingEndpoint properties.
type StreamingEndpointPropertiesResponse struct {
	// The access control definition of the StreamingEndpoint.
	AccessControl *StreamingEndpointAccessControlResponse `pulumi:"accessControl"`
	// The name of the AvailabilitySet used with this StreamingEndpoint for high availability streaming.  This value can only be set at creation time.
	AvailabilitySetName *string `pulumi:"availabilitySetName"`
	// The CDN enabled flag.
	CdnEnabled *bool `pulumi:"cdnEnabled"`
	// The CDN profile name.
	CdnProfile *string `pulumi:"cdnProfile"`
	// The CDN provider name.
	CdnProvider *string `pulumi:"cdnProvider"`
	// The exact time the StreamingEndpoint was created.
	Created string `pulumi:"created"`
	// The StreamingEndpoint access policies.
	CrossSiteAccessPolicies *CrossSiteAccessPoliciesResponse `pulumi:"crossSiteAccessPolicies"`
	// The custom host names of the StreamingEndpoint
	CustomHostNames []string `pulumi:"customHostNames"`
	// The StreamingEndpoint description.
	Description *string `pulumi:"description"`
	// The free trial expiration time.
	FreeTrialEndTime string `pulumi:"freeTrialEndTime"`
	// The StreamingEndpoint host name.
	HostName string `pulumi:"hostName"`
	// The exact time the StreamingEndpoint was last modified.
	LastModified string `pulumi:"lastModified"`
	// Max cache age
	MaxCacheAge *int `pulumi:"maxCacheAge"`
	// The provisioning state of the StreamingEndpoint.
	ProvisioningState string `pulumi:"provisioningState"`
	// The resource state of the StreamingEndpoint.
	ResourceState string `pulumi:"resourceState"`
	// The number of scale units.  Use the Scale operation to adjust this value.
	ScaleUnits int `pulumi:"scaleUnits"`
}

// StreamingEndpointPropertiesResponseInput is an input type that accepts StreamingEndpointPropertiesResponseArgs and StreamingEndpointPropertiesResponseOutput values.
// You can construct a concrete instance of `StreamingEndpointPropertiesResponseInput` via:
//
//          StreamingEndpointPropertiesResponseArgs{...}
type StreamingEndpointPropertiesResponseInput interface {
	pulumi.Input

	ToStreamingEndpointPropertiesResponseOutput() StreamingEndpointPropertiesResponseOutput
	ToStreamingEndpointPropertiesResponseOutputWithContext(context.Context) StreamingEndpointPropertiesResponseOutput
}

// The StreamingEndpoint properties.
type StreamingEndpointPropertiesResponseArgs struct {
	// The access control definition of the StreamingEndpoint.
	AccessControl StreamingEndpointAccessControlResponsePtrInput `pulumi:"accessControl"`
	// The name of the AvailabilitySet used with this StreamingEndpoint for high availability streaming.  This value can only be set at creation time.
	AvailabilitySetName pulumi.StringPtrInput `pulumi:"availabilitySetName"`
	// The CDN enabled flag.
	CdnEnabled pulumi.BoolPtrInput `pulumi:"cdnEnabled"`
	// The CDN profile name.
	CdnProfile pulumi.StringPtrInput `pulumi:"cdnProfile"`
	// The CDN provider name.
	CdnProvider pulumi.StringPtrInput `pulumi:"cdnProvider"`
	// The exact time the StreamingEndpoint was created.
	Created pulumi.StringInput `pulumi:"created"`
	// The StreamingEndpoint access policies.
	CrossSiteAccessPolicies CrossSiteAccessPoliciesResponsePtrInput `pulumi:"crossSiteAccessPolicies"`
	// The custom host names of the StreamingEndpoint
	CustomHostNames pulumi.StringArrayInput `pulumi:"customHostNames"`
	// The StreamingEndpoint description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The free trial expiration time.
	FreeTrialEndTime pulumi.StringInput `pulumi:"freeTrialEndTime"`
	// The StreamingEndpoint host name.
	HostName pulumi.StringInput `pulumi:"hostName"`
	// The exact time the StreamingEndpoint was last modified.
	LastModified pulumi.StringInput `pulumi:"lastModified"`
	// Max cache age
	MaxCacheAge pulumi.IntPtrInput `pulumi:"maxCacheAge"`
	// The provisioning state of the StreamingEndpoint.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// The resource state of the StreamingEndpoint.
	ResourceState pulumi.StringInput `pulumi:"resourceState"`
	// The number of scale units.  Use the Scale operation to adjust this value.
	ScaleUnits pulumi.IntInput `pulumi:"scaleUnits"`
}

func (StreamingEndpointPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointPropertiesResponse)(nil)).Elem()
}

func (i StreamingEndpointPropertiesResponseArgs) ToStreamingEndpointPropertiesResponseOutput() StreamingEndpointPropertiesResponseOutput {
	return i.ToStreamingEndpointPropertiesResponseOutputWithContext(context.Background())
}

func (i StreamingEndpointPropertiesResponseArgs) ToStreamingEndpointPropertiesResponseOutputWithContext(ctx context.Context) StreamingEndpointPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointPropertiesResponseOutput)
}

func (i StreamingEndpointPropertiesResponseArgs) ToStreamingEndpointPropertiesResponsePtrOutput() StreamingEndpointPropertiesResponsePtrOutput {
	return i.ToStreamingEndpointPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i StreamingEndpointPropertiesResponseArgs) ToStreamingEndpointPropertiesResponsePtrOutputWithContext(ctx context.Context) StreamingEndpointPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointPropertiesResponseOutput).ToStreamingEndpointPropertiesResponsePtrOutputWithContext(ctx)
}

// StreamingEndpointPropertiesResponsePtrInput is an input type that accepts StreamingEndpointPropertiesResponseArgs, StreamingEndpointPropertiesResponsePtr and StreamingEndpointPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `StreamingEndpointPropertiesResponsePtrInput` via:
//
//          StreamingEndpointPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type StreamingEndpointPropertiesResponsePtrInput interface {
	pulumi.Input

	ToStreamingEndpointPropertiesResponsePtrOutput() StreamingEndpointPropertiesResponsePtrOutput
	ToStreamingEndpointPropertiesResponsePtrOutputWithContext(context.Context) StreamingEndpointPropertiesResponsePtrOutput
}

type streamingEndpointPropertiesResponsePtrType StreamingEndpointPropertiesResponseArgs

func StreamingEndpointPropertiesResponsePtr(v *StreamingEndpointPropertiesResponseArgs) StreamingEndpointPropertiesResponsePtrInput {
	return (*streamingEndpointPropertiesResponsePtrType)(v)
}

func (*streamingEndpointPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingEndpointPropertiesResponse)(nil)).Elem()
}

func (i *streamingEndpointPropertiesResponsePtrType) ToStreamingEndpointPropertiesResponsePtrOutput() StreamingEndpointPropertiesResponsePtrOutput {
	return i.ToStreamingEndpointPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *streamingEndpointPropertiesResponsePtrType) ToStreamingEndpointPropertiesResponsePtrOutputWithContext(ctx context.Context) StreamingEndpointPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingEndpointPropertiesResponsePtrOutput)
}

// The StreamingEndpoint properties.
type StreamingEndpointPropertiesResponseOutput struct{ *pulumi.OutputState }

func (StreamingEndpointPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingEndpointPropertiesResponse)(nil)).Elem()
}

func (o StreamingEndpointPropertiesResponseOutput) ToStreamingEndpointPropertiesResponseOutput() StreamingEndpointPropertiesResponseOutput {
	return o
}

func (o StreamingEndpointPropertiesResponseOutput) ToStreamingEndpointPropertiesResponseOutputWithContext(ctx context.Context) StreamingEndpointPropertiesResponseOutput {
	return o
}

func (o StreamingEndpointPropertiesResponseOutput) ToStreamingEndpointPropertiesResponsePtrOutput() StreamingEndpointPropertiesResponsePtrOutput {
	return o.ToStreamingEndpointPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o StreamingEndpointPropertiesResponseOutput) ToStreamingEndpointPropertiesResponsePtrOutputWithContext(ctx context.Context) StreamingEndpointPropertiesResponsePtrOutput {
	return o.ApplyT(func(v StreamingEndpointPropertiesResponse) *StreamingEndpointPropertiesResponse {
		return &v
	}).(StreamingEndpointPropertiesResponsePtrOutput)
}

// The access control definition of the StreamingEndpoint.
func (o StreamingEndpointPropertiesResponseOutput) AccessControl() StreamingEndpointAccessControlResponsePtrOutput {
	return o.ApplyT(func(v StreamingEndpointPropertiesResponse) *StreamingEndpointAccessControlResponse {
		return v.AccessControl
	}).(StreamingEndpointAccessControlResponsePtrOutput)
}

// The name of the AvailabilitySet used with this StreamingEndpoint for high availability streaming.  This value can only be set at creation time.
func (o StreamingEndpointPropertiesResponseOutput) AvailabilitySetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingEndpointPropertiesResponse) *string { return v.AvailabilitySetName }).(pulumi.StringPtrOutput)
}

// The CDN enabled flag.
func (o StreamingEndpointPropertiesResponseOutput) CdnEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StreamingEndpointPropertiesResponse) *bool { return v.CdnEnabled }).(pulumi.BoolPtrOutput)
}

// The CDN profile name.
func (o StreamingEndpointPropertiesResponseOutput) CdnProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingEndpointPropertiesResponse) *string { return v.CdnProfile }).(pulumi.StringPtrOutput)
}

// The CDN provider name.
func (o StreamingEndpointPropertiesResponseOutput) CdnProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingEndpointPropertiesResponse) *string { return v.CdnProvider }).(pulumi.StringPtrOutput)
}

// The exact time the StreamingEndpoint was created.
func (o StreamingEndpointPropertiesResponseOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingEndpointPropertiesResponse) string { return v.Created }).(pulumi.StringOutput)
}

// The StreamingEndpoint access policies.
func (o StreamingEndpointPropertiesResponseOutput) CrossSiteAccessPolicies() CrossSiteAccessPoliciesResponsePtrOutput {
	return o.ApplyT(func(v StreamingEndpointPropertiesResponse) *CrossSiteAccessPoliciesResponse {
		return v.CrossSiteAccessPolicies
	}).(CrossSiteAccessPoliciesResponsePtrOutput)
}

// The custom host names of the StreamingEndpoint
func (o StreamingEndpointPropertiesResponseOutput) CustomHostNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StreamingEndpointPropertiesResponse) []string { return v.CustomHostNames }).(pulumi.StringArrayOutput)
}

// The StreamingEndpoint description.
func (o StreamingEndpointPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingEndpointPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The free trial expiration time.
func (o StreamingEndpointPropertiesResponseOutput) FreeTrialEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingEndpointPropertiesResponse) string { return v.FreeTrialEndTime }).(pulumi.StringOutput)
}

// The StreamingEndpoint host name.
func (o StreamingEndpointPropertiesResponseOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingEndpointPropertiesResponse) string { return v.HostName }).(pulumi.StringOutput)
}

// The exact time the StreamingEndpoint was last modified.
func (o StreamingEndpointPropertiesResponseOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingEndpointPropertiesResponse) string { return v.LastModified }).(pulumi.StringOutput)
}

// Max cache age
func (o StreamingEndpointPropertiesResponseOutput) MaxCacheAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamingEndpointPropertiesResponse) *int { return v.MaxCacheAge }).(pulumi.IntPtrOutput)
}

// The provisioning state of the StreamingEndpoint.
func (o StreamingEndpointPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingEndpointPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The resource state of the StreamingEndpoint.
func (o StreamingEndpointPropertiesResponseOutput) ResourceState() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingEndpointPropertiesResponse) string { return v.ResourceState }).(pulumi.StringOutput)
}

// The number of scale units.  Use the Scale operation to adjust this value.
func (o StreamingEndpointPropertiesResponseOutput) ScaleUnits() pulumi.IntOutput {
	return o.ApplyT(func(v StreamingEndpointPropertiesResponse) int { return v.ScaleUnits }).(pulumi.IntOutput)
}

type StreamingEndpointPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (StreamingEndpointPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingEndpointPropertiesResponse)(nil)).Elem()
}

func (o StreamingEndpointPropertiesResponsePtrOutput) ToStreamingEndpointPropertiesResponsePtrOutput() StreamingEndpointPropertiesResponsePtrOutput {
	return o
}

func (o StreamingEndpointPropertiesResponsePtrOutput) ToStreamingEndpointPropertiesResponsePtrOutputWithContext(ctx context.Context) StreamingEndpointPropertiesResponsePtrOutput {
	return o
}

func (o StreamingEndpointPropertiesResponsePtrOutput) Elem() StreamingEndpointPropertiesResponseOutput {
	return o.ApplyT(func(v *StreamingEndpointPropertiesResponse) StreamingEndpointPropertiesResponse { return *v }).(StreamingEndpointPropertiesResponseOutput)
}

// The access control definition of the StreamingEndpoint.
func (o StreamingEndpointPropertiesResponsePtrOutput) AccessControl() StreamingEndpointAccessControlResponsePtrOutput {
	return o.ApplyT(func(v *StreamingEndpointPropertiesResponse) *StreamingEndpointAccessControlResponse {
		if v == nil {
			return nil
		}
		return v.AccessControl
	}).(StreamingEndpointAccessControlResponsePtrOutput)
}

// The name of the AvailabilitySet used with this StreamingEndpoint for high availability streaming.  This value can only be set at creation time.
func (o StreamingEndpointPropertiesResponsePtrOutput) AvailabilitySetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingEndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilitySetName
	}).(pulumi.StringPtrOutput)
}

// The CDN enabled flag.
func (o StreamingEndpointPropertiesResponsePtrOutput) CdnEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingEndpointPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CdnEnabled
	}).(pulumi.BoolPtrOutput)
}

// The CDN profile name.
func (o StreamingEndpointPropertiesResponsePtrOutput) CdnProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingEndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.CdnProfile
	}).(pulumi.StringPtrOutput)
}

// The CDN provider name.
func (o StreamingEndpointPropertiesResponsePtrOutput) CdnProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingEndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.CdnProvider
	}).(pulumi.StringPtrOutput)
}

// The exact time the StreamingEndpoint was created.
func (o StreamingEndpointPropertiesResponsePtrOutput) Created() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingEndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Created
	}).(pulumi.StringPtrOutput)
}

// The StreamingEndpoint access policies.
func (o StreamingEndpointPropertiesResponsePtrOutput) CrossSiteAccessPolicies() CrossSiteAccessPoliciesResponsePtrOutput {
	return o.ApplyT(func(v *StreamingEndpointPropertiesResponse) *CrossSiteAccessPoliciesResponse {
		if v == nil {
			return nil
		}
		return v.CrossSiteAccessPolicies
	}).(CrossSiteAccessPoliciesResponsePtrOutput)
}

// The custom host names of the StreamingEndpoint
func (o StreamingEndpointPropertiesResponsePtrOutput) CustomHostNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StreamingEndpointPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.CustomHostNames
	}).(pulumi.StringArrayOutput)
}

// The StreamingEndpoint description.
func (o StreamingEndpointPropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingEndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The free trial expiration time.
func (o StreamingEndpointPropertiesResponsePtrOutput) FreeTrialEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingEndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.FreeTrialEndTime
	}).(pulumi.StringPtrOutput)
}

// The StreamingEndpoint host name.
func (o StreamingEndpointPropertiesResponsePtrOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingEndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.HostName
	}).(pulumi.StringPtrOutput)
}

// The exact time the StreamingEndpoint was last modified.
func (o StreamingEndpointPropertiesResponsePtrOutput) LastModified() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingEndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastModified
	}).(pulumi.StringPtrOutput)
}

// Max cache age
func (o StreamingEndpointPropertiesResponsePtrOutput) MaxCacheAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StreamingEndpointPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxCacheAge
	}).(pulumi.IntPtrOutput)
}

// The provisioning state of the StreamingEndpoint.
func (o StreamingEndpointPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingEndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The resource state of the StreamingEndpoint.
func (o StreamingEndpointPropertiesResponsePtrOutput) ResourceState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingEndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceState
	}).(pulumi.StringPtrOutput)
}

// The number of scale units.  Use the Scale operation to adjust this value.
func (o StreamingEndpointPropertiesResponsePtrOutput) ScaleUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StreamingEndpointPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ScaleUnits
	}).(pulumi.IntPtrOutput)
}

// A Streaming Locator resource
type StreamingLocatorType struct {
	// The name of the resource
	Name string `pulumi:"name"`
	// Properties of the Streaming Locator.
	Properties StreamingLocatorPropertiesResponse `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type string `pulumi:"type"`
}

// StreamingLocatorTypeInput is an input type that accepts StreamingLocatorTypeArgs and StreamingLocatorTypeOutput values.
// You can construct a concrete instance of `StreamingLocatorTypeInput` via:
//
//          StreamingLocatorTypeArgs{...}
type StreamingLocatorTypeInput interface {
	pulumi.Input

	ToStreamingLocatorTypeOutput() StreamingLocatorTypeOutput
	ToStreamingLocatorTypeOutputWithContext(context.Context) StreamingLocatorTypeOutput
}

// A Streaming Locator resource
type StreamingLocatorTypeArgs struct {
	// The name of the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Properties of the Streaming Locator.
	Properties StreamingLocatorPropertiesResponseInput `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringInput `pulumi:"type"`
}

func (StreamingLocatorTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingLocatorType)(nil)).Elem()
}

func (i StreamingLocatorTypeArgs) ToStreamingLocatorTypeOutput() StreamingLocatorTypeOutput {
	return i.ToStreamingLocatorTypeOutputWithContext(context.Background())
}

func (i StreamingLocatorTypeArgs) ToStreamingLocatorTypeOutputWithContext(ctx context.Context) StreamingLocatorTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingLocatorTypeOutput)
}

// A Streaming Locator resource
type StreamingLocatorTypeOutput struct{ *pulumi.OutputState }

func (StreamingLocatorTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingLocatorType)(nil)).Elem()
}

func (o StreamingLocatorTypeOutput) ToStreamingLocatorTypeOutput() StreamingLocatorTypeOutput {
	return o
}

func (o StreamingLocatorTypeOutput) ToStreamingLocatorTypeOutputWithContext(ctx context.Context) StreamingLocatorTypeOutput {
	return o
}

// The name of the resource
func (o StreamingLocatorTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingLocatorType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of the Streaming Locator.
func (o StreamingLocatorTypeOutput) Properties() StreamingLocatorPropertiesResponseOutput {
	return o.ApplyT(func(v StreamingLocatorType) StreamingLocatorPropertiesResponse { return v.Properties }).(StreamingLocatorPropertiesResponseOutput)
}

// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
func (o StreamingLocatorTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingLocatorType) string { return v.Type }).(pulumi.StringOutput)
}

// Class for content key in Streaming Locator
type StreamingLocatorContentKey struct {
	// ID of Content Key
	Id string `pulumi:"id"`
	// Label of Content Key as specified in the Streaming Policy
	LabelReferenceInStreamingPolicy *string `pulumi:"labelReferenceInStreamingPolicy"`
	// Value of Content Key
	Value *string `pulumi:"value"`
}

// StreamingLocatorContentKeyInput is an input type that accepts StreamingLocatorContentKeyArgs and StreamingLocatorContentKeyOutput values.
// You can construct a concrete instance of `StreamingLocatorContentKeyInput` via:
//
//          StreamingLocatorContentKeyArgs{...}
type StreamingLocatorContentKeyInput interface {
	pulumi.Input

	ToStreamingLocatorContentKeyOutput() StreamingLocatorContentKeyOutput
	ToStreamingLocatorContentKeyOutputWithContext(context.Context) StreamingLocatorContentKeyOutput
}

// Class for content key in Streaming Locator
type StreamingLocatorContentKeyArgs struct {
	// ID of Content Key
	Id pulumi.StringInput `pulumi:"id"`
	// Label of Content Key as specified in the Streaming Policy
	LabelReferenceInStreamingPolicy pulumi.StringPtrInput `pulumi:"labelReferenceInStreamingPolicy"`
	// Value of Content Key
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (StreamingLocatorContentKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingLocatorContentKey)(nil)).Elem()
}

func (i StreamingLocatorContentKeyArgs) ToStreamingLocatorContentKeyOutput() StreamingLocatorContentKeyOutput {
	return i.ToStreamingLocatorContentKeyOutputWithContext(context.Background())
}

func (i StreamingLocatorContentKeyArgs) ToStreamingLocatorContentKeyOutputWithContext(ctx context.Context) StreamingLocatorContentKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingLocatorContentKeyOutput)
}

// StreamingLocatorContentKeyArrayInput is an input type that accepts StreamingLocatorContentKeyArray and StreamingLocatorContentKeyArrayOutput values.
// You can construct a concrete instance of `StreamingLocatorContentKeyArrayInput` via:
//
//          StreamingLocatorContentKeyArray{ StreamingLocatorContentKeyArgs{...} }
type StreamingLocatorContentKeyArrayInput interface {
	pulumi.Input

	ToStreamingLocatorContentKeyArrayOutput() StreamingLocatorContentKeyArrayOutput
	ToStreamingLocatorContentKeyArrayOutputWithContext(context.Context) StreamingLocatorContentKeyArrayOutput
}

type StreamingLocatorContentKeyArray []StreamingLocatorContentKeyInput

func (StreamingLocatorContentKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingLocatorContentKey)(nil)).Elem()
}

func (i StreamingLocatorContentKeyArray) ToStreamingLocatorContentKeyArrayOutput() StreamingLocatorContentKeyArrayOutput {
	return i.ToStreamingLocatorContentKeyArrayOutputWithContext(context.Background())
}

func (i StreamingLocatorContentKeyArray) ToStreamingLocatorContentKeyArrayOutputWithContext(ctx context.Context) StreamingLocatorContentKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingLocatorContentKeyArrayOutput)
}

// Class for content key in Streaming Locator
type StreamingLocatorContentKeyOutput struct{ *pulumi.OutputState }

func (StreamingLocatorContentKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingLocatorContentKey)(nil)).Elem()
}

func (o StreamingLocatorContentKeyOutput) ToStreamingLocatorContentKeyOutput() StreamingLocatorContentKeyOutput {
	return o
}

func (o StreamingLocatorContentKeyOutput) ToStreamingLocatorContentKeyOutputWithContext(ctx context.Context) StreamingLocatorContentKeyOutput {
	return o
}

// ID of Content Key
func (o StreamingLocatorContentKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingLocatorContentKey) string { return v.Id }).(pulumi.StringOutput)
}

// Label of Content Key as specified in the Streaming Policy
func (o StreamingLocatorContentKeyOutput) LabelReferenceInStreamingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingLocatorContentKey) *string { return v.LabelReferenceInStreamingPolicy }).(pulumi.StringPtrOutput)
}

// Value of Content Key
func (o StreamingLocatorContentKeyOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingLocatorContentKey) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type StreamingLocatorContentKeyArrayOutput struct{ *pulumi.OutputState }

func (StreamingLocatorContentKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingLocatorContentKey)(nil)).Elem()
}

func (o StreamingLocatorContentKeyArrayOutput) ToStreamingLocatorContentKeyArrayOutput() StreamingLocatorContentKeyArrayOutput {
	return o
}

func (o StreamingLocatorContentKeyArrayOutput) ToStreamingLocatorContentKeyArrayOutputWithContext(ctx context.Context) StreamingLocatorContentKeyArrayOutput {
	return o
}

func (o StreamingLocatorContentKeyArrayOutput) Index(i pulumi.IntInput) StreamingLocatorContentKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingLocatorContentKey {
		return vs[0].([]StreamingLocatorContentKey)[vs[1].(int)]
	}).(StreamingLocatorContentKeyOutput)
}

// Class for content key in Streaming Locator
type StreamingLocatorContentKeyResponse struct {
	// ID of Content Key
	Id string `pulumi:"id"`
	// Label of Content Key as specified in the Streaming Policy
	LabelReferenceInStreamingPolicy *string `pulumi:"labelReferenceInStreamingPolicy"`
	// ContentKeyPolicy used by Content Key
	PolicyName string `pulumi:"policyName"`
	// Tracks which use this Content Key
	Tracks []TrackSelectionResponse `pulumi:"tracks"`
	// Encryption type of Content Key
	Type string `pulumi:"type"`
	// Value of Content Key
	Value *string `pulumi:"value"`
}

// StreamingLocatorContentKeyResponseInput is an input type that accepts StreamingLocatorContentKeyResponseArgs and StreamingLocatorContentKeyResponseOutput values.
// You can construct a concrete instance of `StreamingLocatorContentKeyResponseInput` via:
//
//          StreamingLocatorContentKeyResponseArgs{...}
type StreamingLocatorContentKeyResponseInput interface {
	pulumi.Input

	ToStreamingLocatorContentKeyResponseOutput() StreamingLocatorContentKeyResponseOutput
	ToStreamingLocatorContentKeyResponseOutputWithContext(context.Context) StreamingLocatorContentKeyResponseOutput
}

// Class for content key in Streaming Locator
type StreamingLocatorContentKeyResponseArgs struct {
	// ID of Content Key
	Id pulumi.StringInput `pulumi:"id"`
	// Label of Content Key as specified in the Streaming Policy
	LabelReferenceInStreamingPolicy pulumi.StringPtrInput `pulumi:"labelReferenceInStreamingPolicy"`
	// ContentKeyPolicy used by Content Key
	PolicyName pulumi.StringInput `pulumi:"policyName"`
	// Tracks which use this Content Key
	Tracks TrackSelectionResponseArrayInput `pulumi:"tracks"`
	// Encryption type of Content Key
	Type pulumi.StringInput `pulumi:"type"`
	// Value of Content Key
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (StreamingLocatorContentKeyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingLocatorContentKeyResponse)(nil)).Elem()
}

func (i StreamingLocatorContentKeyResponseArgs) ToStreamingLocatorContentKeyResponseOutput() StreamingLocatorContentKeyResponseOutput {
	return i.ToStreamingLocatorContentKeyResponseOutputWithContext(context.Background())
}

func (i StreamingLocatorContentKeyResponseArgs) ToStreamingLocatorContentKeyResponseOutputWithContext(ctx context.Context) StreamingLocatorContentKeyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingLocatorContentKeyResponseOutput)
}

// StreamingLocatorContentKeyResponseArrayInput is an input type that accepts StreamingLocatorContentKeyResponseArray and StreamingLocatorContentKeyResponseArrayOutput values.
// You can construct a concrete instance of `StreamingLocatorContentKeyResponseArrayInput` via:
//
//          StreamingLocatorContentKeyResponseArray{ StreamingLocatorContentKeyResponseArgs{...} }
type StreamingLocatorContentKeyResponseArrayInput interface {
	pulumi.Input

	ToStreamingLocatorContentKeyResponseArrayOutput() StreamingLocatorContentKeyResponseArrayOutput
	ToStreamingLocatorContentKeyResponseArrayOutputWithContext(context.Context) StreamingLocatorContentKeyResponseArrayOutput
}

type StreamingLocatorContentKeyResponseArray []StreamingLocatorContentKeyResponseInput

func (StreamingLocatorContentKeyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingLocatorContentKeyResponse)(nil)).Elem()
}

func (i StreamingLocatorContentKeyResponseArray) ToStreamingLocatorContentKeyResponseArrayOutput() StreamingLocatorContentKeyResponseArrayOutput {
	return i.ToStreamingLocatorContentKeyResponseArrayOutputWithContext(context.Background())
}

func (i StreamingLocatorContentKeyResponseArray) ToStreamingLocatorContentKeyResponseArrayOutputWithContext(ctx context.Context) StreamingLocatorContentKeyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingLocatorContentKeyResponseArrayOutput)
}

// Class for content key in Streaming Locator
type StreamingLocatorContentKeyResponseOutput struct{ *pulumi.OutputState }

func (StreamingLocatorContentKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingLocatorContentKeyResponse)(nil)).Elem()
}

func (o StreamingLocatorContentKeyResponseOutput) ToStreamingLocatorContentKeyResponseOutput() StreamingLocatorContentKeyResponseOutput {
	return o
}

func (o StreamingLocatorContentKeyResponseOutput) ToStreamingLocatorContentKeyResponseOutputWithContext(ctx context.Context) StreamingLocatorContentKeyResponseOutput {
	return o
}

// ID of Content Key
func (o StreamingLocatorContentKeyResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingLocatorContentKeyResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Label of Content Key as specified in the Streaming Policy
func (o StreamingLocatorContentKeyResponseOutput) LabelReferenceInStreamingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingLocatorContentKeyResponse) *string { return v.LabelReferenceInStreamingPolicy }).(pulumi.StringPtrOutput)
}

// ContentKeyPolicy used by Content Key
func (o StreamingLocatorContentKeyResponseOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingLocatorContentKeyResponse) string { return v.PolicyName }).(pulumi.StringOutput)
}

// Tracks which use this Content Key
func (o StreamingLocatorContentKeyResponseOutput) Tracks() TrackSelectionResponseArrayOutput {
	return o.ApplyT(func(v StreamingLocatorContentKeyResponse) []TrackSelectionResponse { return v.Tracks }).(TrackSelectionResponseArrayOutput)
}

// Encryption type of Content Key
func (o StreamingLocatorContentKeyResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingLocatorContentKeyResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Value of Content Key
func (o StreamingLocatorContentKeyResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingLocatorContentKeyResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type StreamingLocatorContentKeyResponseArrayOutput struct{ *pulumi.OutputState }

func (StreamingLocatorContentKeyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingLocatorContentKeyResponse)(nil)).Elem()
}

func (o StreamingLocatorContentKeyResponseArrayOutput) ToStreamingLocatorContentKeyResponseArrayOutput() StreamingLocatorContentKeyResponseArrayOutput {
	return o
}

func (o StreamingLocatorContentKeyResponseArrayOutput) ToStreamingLocatorContentKeyResponseArrayOutputWithContext(ctx context.Context) StreamingLocatorContentKeyResponseArrayOutput {
	return o
}

func (o StreamingLocatorContentKeyResponseArrayOutput) Index(i pulumi.IntInput) StreamingLocatorContentKeyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingLocatorContentKeyResponse {
		return vs[0].([]StreamingLocatorContentKeyResponse)[vs[1].(int)]
	}).(StreamingLocatorContentKeyResponseOutput)
}

// Properties of the Streaming Locator.
type StreamingLocatorPropertiesResponse struct {
	// Alternative Media ID of this Streaming Locator
	AlternativeMediaId *string `pulumi:"alternativeMediaId"`
	// Asset Name
	AssetName string `pulumi:"assetName"`
	// The ContentKeys used by this Streaming Locator.
	ContentKeys []StreamingLocatorContentKeyResponse `pulumi:"contentKeys"`
	// The creation time of the Streaming Locator.
	Created string `pulumi:"created"`
	// Name of the default ContentKeyPolicy used by this Streaming Locator.
	DefaultContentKeyPolicyName *string `pulumi:"defaultContentKeyPolicyName"`
	// The end time of the Streaming Locator.
	EndTime *string `pulumi:"endTime"`
	// A list of asset or account filters which apply to this streaming locator
	Filters []string `pulumi:"filters"`
	// The start time of the Streaming Locator.
	StartTime *string `pulumi:"startTime"`
	// The StreamingLocatorId of the Streaming Locator.
	StreamingLocatorId *string `pulumi:"streamingLocatorId"`
	// Name of the Streaming Policy used by this Streaming Locator. Either specify the name of Streaming Policy you created or use one of the predefined Streaming Policies. The predefined Streaming Policies available are: 'Predefined_DownloadOnly', 'Predefined_ClearStreamingOnly', 'Predefined_DownloadAndClearStreaming', 'Predefined_ClearKey', 'Predefined_MultiDrmCencStreaming' and 'Predefined_MultiDrmStreaming'
	StreamingPolicyName string `pulumi:"streamingPolicyName"`
}

// StreamingLocatorPropertiesResponseInput is an input type that accepts StreamingLocatorPropertiesResponseArgs and StreamingLocatorPropertiesResponseOutput values.
// You can construct a concrete instance of `StreamingLocatorPropertiesResponseInput` via:
//
//          StreamingLocatorPropertiesResponseArgs{...}
type StreamingLocatorPropertiesResponseInput interface {
	pulumi.Input

	ToStreamingLocatorPropertiesResponseOutput() StreamingLocatorPropertiesResponseOutput
	ToStreamingLocatorPropertiesResponseOutputWithContext(context.Context) StreamingLocatorPropertiesResponseOutput
}

// Properties of the Streaming Locator.
type StreamingLocatorPropertiesResponseArgs struct {
	// Alternative Media ID of this Streaming Locator
	AlternativeMediaId pulumi.StringPtrInput `pulumi:"alternativeMediaId"`
	// Asset Name
	AssetName pulumi.StringInput `pulumi:"assetName"`
	// The ContentKeys used by this Streaming Locator.
	ContentKeys StreamingLocatorContentKeyResponseArrayInput `pulumi:"contentKeys"`
	// The creation time of the Streaming Locator.
	Created pulumi.StringInput `pulumi:"created"`
	// Name of the default ContentKeyPolicy used by this Streaming Locator.
	DefaultContentKeyPolicyName pulumi.StringPtrInput `pulumi:"defaultContentKeyPolicyName"`
	// The end time of the Streaming Locator.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// A list of asset or account filters which apply to this streaming locator
	Filters pulumi.StringArrayInput `pulumi:"filters"`
	// The start time of the Streaming Locator.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// The StreamingLocatorId of the Streaming Locator.
	StreamingLocatorId pulumi.StringPtrInput `pulumi:"streamingLocatorId"`
	// Name of the Streaming Policy used by this Streaming Locator. Either specify the name of Streaming Policy you created or use one of the predefined Streaming Policies. The predefined Streaming Policies available are: 'Predefined_DownloadOnly', 'Predefined_ClearStreamingOnly', 'Predefined_DownloadAndClearStreaming', 'Predefined_ClearKey', 'Predefined_MultiDrmCencStreaming' and 'Predefined_MultiDrmStreaming'
	StreamingPolicyName pulumi.StringInput `pulumi:"streamingPolicyName"`
}

func (StreamingLocatorPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingLocatorPropertiesResponse)(nil)).Elem()
}

func (i StreamingLocatorPropertiesResponseArgs) ToStreamingLocatorPropertiesResponseOutput() StreamingLocatorPropertiesResponseOutput {
	return i.ToStreamingLocatorPropertiesResponseOutputWithContext(context.Background())
}

func (i StreamingLocatorPropertiesResponseArgs) ToStreamingLocatorPropertiesResponseOutputWithContext(ctx context.Context) StreamingLocatorPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingLocatorPropertiesResponseOutput)
}

func (i StreamingLocatorPropertiesResponseArgs) ToStreamingLocatorPropertiesResponsePtrOutput() StreamingLocatorPropertiesResponsePtrOutput {
	return i.ToStreamingLocatorPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i StreamingLocatorPropertiesResponseArgs) ToStreamingLocatorPropertiesResponsePtrOutputWithContext(ctx context.Context) StreamingLocatorPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingLocatorPropertiesResponseOutput).ToStreamingLocatorPropertiesResponsePtrOutputWithContext(ctx)
}

// StreamingLocatorPropertiesResponsePtrInput is an input type that accepts StreamingLocatorPropertiesResponseArgs, StreamingLocatorPropertiesResponsePtr and StreamingLocatorPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `StreamingLocatorPropertiesResponsePtrInput` via:
//
//          StreamingLocatorPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type StreamingLocatorPropertiesResponsePtrInput interface {
	pulumi.Input

	ToStreamingLocatorPropertiesResponsePtrOutput() StreamingLocatorPropertiesResponsePtrOutput
	ToStreamingLocatorPropertiesResponsePtrOutputWithContext(context.Context) StreamingLocatorPropertiesResponsePtrOutput
}

type streamingLocatorPropertiesResponsePtrType StreamingLocatorPropertiesResponseArgs

func StreamingLocatorPropertiesResponsePtr(v *StreamingLocatorPropertiesResponseArgs) StreamingLocatorPropertiesResponsePtrInput {
	return (*streamingLocatorPropertiesResponsePtrType)(v)
}

func (*streamingLocatorPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingLocatorPropertiesResponse)(nil)).Elem()
}

func (i *streamingLocatorPropertiesResponsePtrType) ToStreamingLocatorPropertiesResponsePtrOutput() StreamingLocatorPropertiesResponsePtrOutput {
	return i.ToStreamingLocatorPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *streamingLocatorPropertiesResponsePtrType) ToStreamingLocatorPropertiesResponsePtrOutputWithContext(ctx context.Context) StreamingLocatorPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingLocatorPropertiesResponsePtrOutput)
}

// Properties of the Streaming Locator.
type StreamingLocatorPropertiesResponseOutput struct{ *pulumi.OutputState }

func (StreamingLocatorPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingLocatorPropertiesResponse)(nil)).Elem()
}

func (o StreamingLocatorPropertiesResponseOutput) ToStreamingLocatorPropertiesResponseOutput() StreamingLocatorPropertiesResponseOutput {
	return o
}

func (o StreamingLocatorPropertiesResponseOutput) ToStreamingLocatorPropertiesResponseOutputWithContext(ctx context.Context) StreamingLocatorPropertiesResponseOutput {
	return o
}

func (o StreamingLocatorPropertiesResponseOutput) ToStreamingLocatorPropertiesResponsePtrOutput() StreamingLocatorPropertiesResponsePtrOutput {
	return o.ToStreamingLocatorPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o StreamingLocatorPropertiesResponseOutput) ToStreamingLocatorPropertiesResponsePtrOutputWithContext(ctx context.Context) StreamingLocatorPropertiesResponsePtrOutput {
	return o.ApplyT(func(v StreamingLocatorPropertiesResponse) *StreamingLocatorPropertiesResponse {
		return &v
	}).(StreamingLocatorPropertiesResponsePtrOutput)
}

// Alternative Media ID of this Streaming Locator
func (o StreamingLocatorPropertiesResponseOutput) AlternativeMediaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingLocatorPropertiesResponse) *string { return v.AlternativeMediaId }).(pulumi.StringPtrOutput)
}

// Asset Name
func (o StreamingLocatorPropertiesResponseOutput) AssetName() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingLocatorPropertiesResponse) string { return v.AssetName }).(pulumi.StringOutput)
}

// The ContentKeys used by this Streaming Locator.
func (o StreamingLocatorPropertiesResponseOutput) ContentKeys() StreamingLocatorContentKeyResponseArrayOutput {
	return o.ApplyT(func(v StreamingLocatorPropertiesResponse) []StreamingLocatorContentKeyResponse { return v.ContentKeys }).(StreamingLocatorContentKeyResponseArrayOutput)
}

// The creation time of the Streaming Locator.
func (o StreamingLocatorPropertiesResponseOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingLocatorPropertiesResponse) string { return v.Created }).(pulumi.StringOutput)
}

// Name of the default ContentKeyPolicy used by this Streaming Locator.
func (o StreamingLocatorPropertiesResponseOutput) DefaultContentKeyPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingLocatorPropertiesResponse) *string { return v.DefaultContentKeyPolicyName }).(pulumi.StringPtrOutput)
}

// The end time of the Streaming Locator.
func (o StreamingLocatorPropertiesResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingLocatorPropertiesResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// A list of asset or account filters which apply to this streaming locator
func (o StreamingLocatorPropertiesResponseOutput) Filters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StreamingLocatorPropertiesResponse) []string { return v.Filters }).(pulumi.StringArrayOutput)
}

// The start time of the Streaming Locator.
func (o StreamingLocatorPropertiesResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingLocatorPropertiesResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The StreamingLocatorId of the Streaming Locator.
func (o StreamingLocatorPropertiesResponseOutput) StreamingLocatorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingLocatorPropertiesResponse) *string { return v.StreamingLocatorId }).(pulumi.StringPtrOutput)
}

// Name of the Streaming Policy used by this Streaming Locator. Either specify the name of Streaming Policy you created or use one of the predefined Streaming Policies. The predefined Streaming Policies available are: 'Predefined_DownloadOnly', 'Predefined_ClearStreamingOnly', 'Predefined_DownloadAndClearStreaming', 'Predefined_ClearKey', 'Predefined_MultiDrmCencStreaming' and 'Predefined_MultiDrmStreaming'
func (o StreamingLocatorPropertiesResponseOutput) StreamingPolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingLocatorPropertiesResponse) string { return v.StreamingPolicyName }).(pulumi.StringOutput)
}

type StreamingLocatorPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (StreamingLocatorPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingLocatorPropertiesResponse)(nil)).Elem()
}

func (o StreamingLocatorPropertiesResponsePtrOutput) ToStreamingLocatorPropertiesResponsePtrOutput() StreamingLocatorPropertiesResponsePtrOutput {
	return o
}

func (o StreamingLocatorPropertiesResponsePtrOutput) ToStreamingLocatorPropertiesResponsePtrOutputWithContext(ctx context.Context) StreamingLocatorPropertiesResponsePtrOutput {
	return o
}

func (o StreamingLocatorPropertiesResponsePtrOutput) Elem() StreamingLocatorPropertiesResponseOutput {
	return o.ApplyT(func(v *StreamingLocatorPropertiesResponse) StreamingLocatorPropertiesResponse { return *v }).(StreamingLocatorPropertiesResponseOutput)
}

// Alternative Media ID of this Streaming Locator
func (o StreamingLocatorPropertiesResponsePtrOutput) AlternativeMediaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingLocatorPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AlternativeMediaId
	}).(pulumi.StringPtrOutput)
}

// Asset Name
func (o StreamingLocatorPropertiesResponsePtrOutput) AssetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingLocatorPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AssetName
	}).(pulumi.StringPtrOutput)
}

// The ContentKeys used by this Streaming Locator.
func (o StreamingLocatorPropertiesResponsePtrOutput) ContentKeys() StreamingLocatorContentKeyResponseArrayOutput {
	return o.ApplyT(func(v *StreamingLocatorPropertiesResponse) []StreamingLocatorContentKeyResponse {
		if v == nil {
			return nil
		}
		return v.ContentKeys
	}).(StreamingLocatorContentKeyResponseArrayOutput)
}

// The creation time of the Streaming Locator.
func (o StreamingLocatorPropertiesResponsePtrOutput) Created() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingLocatorPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Created
	}).(pulumi.StringPtrOutput)
}

// Name of the default ContentKeyPolicy used by this Streaming Locator.
func (o StreamingLocatorPropertiesResponsePtrOutput) DefaultContentKeyPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingLocatorPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DefaultContentKeyPolicyName
	}).(pulumi.StringPtrOutput)
}

// The end time of the Streaming Locator.
func (o StreamingLocatorPropertiesResponsePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingLocatorPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// A list of asset or account filters which apply to this streaming locator
func (o StreamingLocatorPropertiesResponsePtrOutput) Filters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StreamingLocatorPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.Filters
	}).(pulumi.StringArrayOutput)
}

// The start time of the Streaming Locator.
func (o StreamingLocatorPropertiesResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingLocatorPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The StreamingLocatorId of the Streaming Locator.
func (o StreamingLocatorPropertiesResponsePtrOutput) StreamingLocatorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingLocatorPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.StreamingLocatorId
	}).(pulumi.StringPtrOutput)
}

// Name of the Streaming Policy used by this Streaming Locator. Either specify the name of Streaming Policy you created or use one of the predefined Streaming Policies. The predefined Streaming Policies available are: 'Predefined_DownloadOnly', 'Predefined_ClearStreamingOnly', 'Predefined_DownloadAndClearStreaming', 'Predefined_ClearKey', 'Predefined_MultiDrmCencStreaming' and 'Predefined_MultiDrmStreaming'
func (o StreamingLocatorPropertiesResponsePtrOutput) StreamingPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingLocatorPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StreamingPolicyName
	}).(pulumi.StringPtrOutput)
}

// Class of paths for streaming
type StreamingPathResponse struct {
	// Encryption scheme
	EncryptionScheme string `pulumi:"encryptionScheme"`
	// Streaming paths for each protocol and encryptionScheme pair
	Paths []string `pulumi:"paths"`
	// Streaming protocol
	StreamingProtocol string `pulumi:"streamingProtocol"`
}

// StreamingPathResponseInput is an input type that accepts StreamingPathResponseArgs and StreamingPathResponseOutput values.
// You can construct a concrete instance of `StreamingPathResponseInput` via:
//
//          StreamingPathResponseArgs{...}
type StreamingPathResponseInput interface {
	pulumi.Input

	ToStreamingPathResponseOutput() StreamingPathResponseOutput
	ToStreamingPathResponseOutputWithContext(context.Context) StreamingPathResponseOutput
}

// Class of paths for streaming
type StreamingPathResponseArgs struct {
	// Encryption scheme
	EncryptionScheme pulumi.StringInput `pulumi:"encryptionScheme"`
	// Streaming paths for each protocol and encryptionScheme pair
	Paths pulumi.StringArrayInput `pulumi:"paths"`
	// Streaming protocol
	StreamingProtocol pulumi.StringInput `pulumi:"streamingProtocol"`
}

func (StreamingPathResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPathResponse)(nil)).Elem()
}

func (i StreamingPathResponseArgs) ToStreamingPathResponseOutput() StreamingPathResponseOutput {
	return i.ToStreamingPathResponseOutputWithContext(context.Background())
}

func (i StreamingPathResponseArgs) ToStreamingPathResponseOutputWithContext(ctx context.Context) StreamingPathResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPathResponseOutput)
}

// StreamingPathResponseArrayInput is an input type that accepts StreamingPathResponseArray and StreamingPathResponseArrayOutput values.
// You can construct a concrete instance of `StreamingPathResponseArrayInput` via:
//
//          StreamingPathResponseArray{ StreamingPathResponseArgs{...} }
type StreamingPathResponseArrayInput interface {
	pulumi.Input

	ToStreamingPathResponseArrayOutput() StreamingPathResponseArrayOutput
	ToStreamingPathResponseArrayOutputWithContext(context.Context) StreamingPathResponseArrayOutput
}

type StreamingPathResponseArray []StreamingPathResponseInput

func (StreamingPathResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingPathResponse)(nil)).Elem()
}

func (i StreamingPathResponseArray) ToStreamingPathResponseArrayOutput() StreamingPathResponseArrayOutput {
	return i.ToStreamingPathResponseArrayOutputWithContext(context.Background())
}

func (i StreamingPathResponseArray) ToStreamingPathResponseArrayOutputWithContext(ctx context.Context) StreamingPathResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPathResponseArrayOutput)
}

// Class of paths for streaming
type StreamingPathResponseOutput struct{ *pulumi.OutputState }

func (StreamingPathResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPathResponse)(nil)).Elem()
}

func (o StreamingPathResponseOutput) ToStreamingPathResponseOutput() StreamingPathResponseOutput {
	return o
}

func (o StreamingPathResponseOutput) ToStreamingPathResponseOutputWithContext(ctx context.Context) StreamingPathResponseOutput {
	return o
}

// Encryption scheme
func (o StreamingPathResponseOutput) EncryptionScheme() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingPathResponse) string { return v.EncryptionScheme }).(pulumi.StringOutput)
}

// Streaming paths for each protocol and encryptionScheme pair
func (o StreamingPathResponseOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StreamingPathResponse) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

// Streaming protocol
func (o StreamingPathResponseOutput) StreamingProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingPathResponse) string { return v.StreamingProtocol }).(pulumi.StringOutput)
}

type StreamingPathResponseArrayOutput struct{ *pulumi.OutputState }

func (StreamingPathResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingPathResponse)(nil)).Elem()
}

func (o StreamingPathResponseArrayOutput) ToStreamingPathResponseArrayOutput() StreamingPathResponseArrayOutput {
	return o
}

func (o StreamingPathResponseArrayOutput) ToStreamingPathResponseArrayOutputWithContext(ctx context.Context) StreamingPathResponseArrayOutput {
	return o
}

func (o StreamingPathResponseArrayOutput) Index(i pulumi.IntInput) StreamingPathResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingPathResponse {
		return vs[0].([]StreamingPathResponse)[vs[1].(int)]
	}).(StreamingPathResponseOutput)
}

// A Streaming Policy resource
type StreamingPolicyType struct {
	// The name of the resource
	Name string `pulumi:"name"`
	// Class to specify properties of Streaming Policy
	Properties StreamingPolicyPropertiesResponse `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type string `pulumi:"type"`
}

// StreamingPolicyTypeInput is an input type that accepts StreamingPolicyTypeArgs and StreamingPolicyTypeOutput values.
// You can construct a concrete instance of `StreamingPolicyTypeInput` via:
//
//          StreamingPolicyTypeArgs{...}
type StreamingPolicyTypeInput interface {
	pulumi.Input

	ToStreamingPolicyTypeOutput() StreamingPolicyTypeOutput
	ToStreamingPolicyTypeOutputWithContext(context.Context) StreamingPolicyTypeOutput
}

// A Streaming Policy resource
type StreamingPolicyTypeArgs struct {
	// The name of the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Class to specify properties of Streaming Policy
	Properties StreamingPolicyPropertiesResponseInput `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringInput `pulumi:"type"`
}

func (StreamingPolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyType)(nil)).Elem()
}

func (i StreamingPolicyTypeArgs) ToStreamingPolicyTypeOutput() StreamingPolicyTypeOutput {
	return i.ToStreamingPolicyTypeOutputWithContext(context.Background())
}

func (i StreamingPolicyTypeArgs) ToStreamingPolicyTypeOutputWithContext(ctx context.Context) StreamingPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyTypeOutput)
}

// A Streaming Policy resource
type StreamingPolicyTypeOutput struct{ *pulumi.OutputState }

func (StreamingPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyType)(nil)).Elem()
}

func (o StreamingPolicyTypeOutput) ToStreamingPolicyTypeOutput() StreamingPolicyTypeOutput {
	return o
}

func (o StreamingPolicyTypeOutput) ToStreamingPolicyTypeOutputWithContext(ctx context.Context) StreamingPolicyTypeOutput {
	return o
}

// The name of the resource
func (o StreamingPolicyTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingPolicyType) string { return v.Name }).(pulumi.StringOutput)
}

// Class to specify properties of Streaming Policy
func (o StreamingPolicyTypeOutput) Properties() StreamingPolicyPropertiesResponseOutput {
	return o.ApplyT(func(v StreamingPolicyType) StreamingPolicyPropertiesResponse { return v.Properties }).(StreamingPolicyPropertiesResponseOutput)
}

// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
func (o StreamingPolicyTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingPolicyType) string { return v.Type }).(pulumi.StringOutput)
}

// Class to specify properties of content key
type StreamingPolicyContentKey struct {
	// Label can be used to specify Content Key when creating a Streaming Locator
	Label *string `pulumi:"label"`
	// Policy used by Content Key
	PolicyName *string `pulumi:"policyName"`
	// Tracks which use this content key
	Tracks []TrackSelection `pulumi:"tracks"`
}

// StreamingPolicyContentKeyInput is an input type that accepts StreamingPolicyContentKeyArgs and StreamingPolicyContentKeyOutput values.
// You can construct a concrete instance of `StreamingPolicyContentKeyInput` via:
//
//          StreamingPolicyContentKeyArgs{...}
type StreamingPolicyContentKeyInput interface {
	pulumi.Input

	ToStreamingPolicyContentKeyOutput() StreamingPolicyContentKeyOutput
	ToStreamingPolicyContentKeyOutputWithContext(context.Context) StreamingPolicyContentKeyOutput
}

// Class to specify properties of content key
type StreamingPolicyContentKeyArgs struct {
	// Label can be used to specify Content Key when creating a Streaming Locator
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Policy used by Content Key
	PolicyName pulumi.StringPtrInput `pulumi:"policyName"`
	// Tracks which use this content key
	Tracks TrackSelectionArrayInput `pulumi:"tracks"`
}

func (StreamingPolicyContentKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyContentKey)(nil)).Elem()
}

func (i StreamingPolicyContentKeyArgs) ToStreamingPolicyContentKeyOutput() StreamingPolicyContentKeyOutput {
	return i.ToStreamingPolicyContentKeyOutputWithContext(context.Background())
}

func (i StreamingPolicyContentKeyArgs) ToStreamingPolicyContentKeyOutputWithContext(ctx context.Context) StreamingPolicyContentKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyContentKeyOutput)
}

// StreamingPolicyContentKeyArrayInput is an input type that accepts StreamingPolicyContentKeyArray and StreamingPolicyContentKeyArrayOutput values.
// You can construct a concrete instance of `StreamingPolicyContentKeyArrayInput` via:
//
//          StreamingPolicyContentKeyArray{ StreamingPolicyContentKeyArgs{...} }
type StreamingPolicyContentKeyArrayInput interface {
	pulumi.Input

	ToStreamingPolicyContentKeyArrayOutput() StreamingPolicyContentKeyArrayOutput
	ToStreamingPolicyContentKeyArrayOutputWithContext(context.Context) StreamingPolicyContentKeyArrayOutput
}

type StreamingPolicyContentKeyArray []StreamingPolicyContentKeyInput

func (StreamingPolicyContentKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingPolicyContentKey)(nil)).Elem()
}

func (i StreamingPolicyContentKeyArray) ToStreamingPolicyContentKeyArrayOutput() StreamingPolicyContentKeyArrayOutput {
	return i.ToStreamingPolicyContentKeyArrayOutputWithContext(context.Background())
}

func (i StreamingPolicyContentKeyArray) ToStreamingPolicyContentKeyArrayOutputWithContext(ctx context.Context) StreamingPolicyContentKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyContentKeyArrayOutput)
}

// Class to specify properties of content key
type StreamingPolicyContentKeyOutput struct{ *pulumi.OutputState }

func (StreamingPolicyContentKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyContentKey)(nil)).Elem()
}

func (o StreamingPolicyContentKeyOutput) ToStreamingPolicyContentKeyOutput() StreamingPolicyContentKeyOutput {
	return o
}

func (o StreamingPolicyContentKeyOutput) ToStreamingPolicyContentKeyOutputWithContext(ctx context.Context) StreamingPolicyContentKeyOutput {
	return o
}

// Label can be used to specify Content Key when creating a Streaming Locator
func (o StreamingPolicyContentKeyOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyContentKey) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Policy used by Content Key
func (o StreamingPolicyContentKeyOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyContentKey) *string { return v.PolicyName }).(pulumi.StringPtrOutput)
}

// Tracks which use this content key
func (o StreamingPolicyContentKeyOutput) Tracks() TrackSelectionArrayOutput {
	return o.ApplyT(func(v StreamingPolicyContentKey) []TrackSelection { return v.Tracks }).(TrackSelectionArrayOutput)
}

type StreamingPolicyContentKeyArrayOutput struct{ *pulumi.OutputState }

func (StreamingPolicyContentKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingPolicyContentKey)(nil)).Elem()
}

func (o StreamingPolicyContentKeyArrayOutput) ToStreamingPolicyContentKeyArrayOutput() StreamingPolicyContentKeyArrayOutput {
	return o
}

func (o StreamingPolicyContentKeyArrayOutput) ToStreamingPolicyContentKeyArrayOutputWithContext(ctx context.Context) StreamingPolicyContentKeyArrayOutput {
	return o
}

func (o StreamingPolicyContentKeyArrayOutput) Index(i pulumi.IntInput) StreamingPolicyContentKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingPolicyContentKey {
		return vs[0].([]StreamingPolicyContentKey)[vs[1].(int)]
	}).(StreamingPolicyContentKeyOutput)
}

// Class to specify properties of content key
type StreamingPolicyContentKeyResponse struct {
	// Label can be used to specify Content Key when creating a Streaming Locator
	Label *string `pulumi:"label"`
	// Policy used by Content Key
	PolicyName *string `pulumi:"policyName"`
	// Tracks which use this content key
	Tracks []TrackSelectionResponse `pulumi:"tracks"`
}

// StreamingPolicyContentKeyResponseInput is an input type that accepts StreamingPolicyContentKeyResponseArgs and StreamingPolicyContentKeyResponseOutput values.
// You can construct a concrete instance of `StreamingPolicyContentKeyResponseInput` via:
//
//          StreamingPolicyContentKeyResponseArgs{...}
type StreamingPolicyContentKeyResponseInput interface {
	pulumi.Input

	ToStreamingPolicyContentKeyResponseOutput() StreamingPolicyContentKeyResponseOutput
	ToStreamingPolicyContentKeyResponseOutputWithContext(context.Context) StreamingPolicyContentKeyResponseOutput
}

// Class to specify properties of content key
type StreamingPolicyContentKeyResponseArgs struct {
	// Label can be used to specify Content Key when creating a Streaming Locator
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Policy used by Content Key
	PolicyName pulumi.StringPtrInput `pulumi:"policyName"`
	// Tracks which use this content key
	Tracks TrackSelectionResponseArrayInput `pulumi:"tracks"`
}

func (StreamingPolicyContentKeyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyContentKeyResponse)(nil)).Elem()
}

func (i StreamingPolicyContentKeyResponseArgs) ToStreamingPolicyContentKeyResponseOutput() StreamingPolicyContentKeyResponseOutput {
	return i.ToStreamingPolicyContentKeyResponseOutputWithContext(context.Background())
}

func (i StreamingPolicyContentKeyResponseArgs) ToStreamingPolicyContentKeyResponseOutputWithContext(ctx context.Context) StreamingPolicyContentKeyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyContentKeyResponseOutput)
}

// StreamingPolicyContentKeyResponseArrayInput is an input type that accepts StreamingPolicyContentKeyResponseArray and StreamingPolicyContentKeyResponseArrayOutput values.
// You can construct a concrete instance of `StreamingPolicyContentKeyResponseArrayInput` via:
//
//          StreamingPolicyContentKeyResponseArray{ StreamingPolicyContentKeyResponseArgs{...} }
type StreamingPolicyContentKeyResponseArrayInput interface {
	pulumi.Input

	ToStreamingPolicyContentKeyResponseArrayOutput() StreamingPolicyContentKeyResponseArrayOutput
	ToStreamingPolicyContentKeyResponseArrayOutputWithContext(context.Context) StreamingPolicyContentKeyResponseArrayOutput
}

type StreamingPolicyContentKeyResponseArray []StreamingPolicyContentKeyResponseInput

func (StreamingPolicyContentKeyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingPolicyContentKeyResponse)(nil)).Elem()
}

func (i StreamingPolicyContentKeyResponseArray) ToStreamingPolicyContentKeyResponseArrayOutput() StreamingPolicyContentKeyResponseArrayOutput {
	return i.ToStreamingPolicyContentKeyResponseArrayOutputWithContext(context.Background())
}

func (i StreamingPolicyContentKeyResponseArray) ToStreamingPolicyContentKeyResponseArrayOutputWithContext(ctx context.Context) StreamingPolicyContentKeyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyContentKeyResponseArrayOutput)
}

// Class to specify properties of content key
type StreamingPolicyContentKeyResponseOutput struct{ *pulumi.OutputState }

func (StreamingPolicyContentKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyContentKeyResponse)(nil)).Elem()
}

func (o StreamingPolicyContentKeyResponseOutput) ToStreamingPolicyContentKeyResponseOutput() StreamingPolicyContentKeyResponseOutput {
	return o
}

func (o StreamingPolicyContentKeyResponseOutput) ToStreamingPolicyContentKeyResponseOutputWithContext(ctx context.Context) StreamingPolicyContentKeyResponseOutput {
	return o
}

// Label can be used to specify Content Key when creating a Streaming Locator
func (o StreamingPolicyContentKeyResponseOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyContentKeyResponse) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Policy used by Content Key
func (o StreamingPolicyContentKeyResponseOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyContentKeyResponse) *string { return v.PolicyName }).(pulumi.StringPtrOutput)
}

// Tracks which use this content key
func (o StreamingPolicyContentKeyResponseOutput) Tracks() TrackSelectionResponseArrayOutput {
	return o.ApplyT(func(v StreamingPolicyContentKeyResponse) []TrackSelectionResponse { return v.Tracks }).(TrackSelectionResponseArrayOutput)
}

type StreamingPolicyContentKeyResponseArrayOutput struct{ *pulumi.OutputState }

func (StreamingPolicyContentKeyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingPolicyContentKeyResponse)(nil)).Elem()
}

func (o StreamingPolicyContentKeyResponseArrayOutput) ToStreamingPolicyContentKeyResponseArrayOutput() StreamingPolicyContentKeyResponseArrayOutput {
	return o
}

func (o StreamingPolicyContentKeyResponseArrayOutput) ToStreamingPolicyContentKeyResponseArrayOutputWithContext(ctx context.Context) StreamingPolicyContentKeyResponseArrayOutput {
	return o
}

func (o StreamingPolicyContentKeyResponseArrayOutput) Index(i pulumi.IntInput) StreamingPolicyContentKeyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingPolicyContentKeyResponse {
		return vs[0].([]StreamingPolicyContentKeyResponse)[vs[1].(int)]
	}).(StreamingPolicyContentKeyResponseOutput)
}

// Class to specify properties of all content keys in Streaming Policy
type StreamingPolicyContentKeys struct {
	// Default content key for an encryption scheme
	DefaultKey *DefaultKey `pulumi:"defaultKey"`
	// Representing tracks needs separate content key
	KeyToTrackMappings []StreamingPolicyContentKey `pulumi:"keyToTrackMappings"`
}

// StreamingPolicyContentKeysInput is an input type that accepts StreamingPolicyContentKeysArgs and StreamingPolicyContentKeysOutput values.
// You can construct a concrete instance of `StreamingPolicyContentKeysInput` via:
//
//          StreamingPolicyContentKeysArgs{...}
type StreamingPolicyContentKeysInput interface {
	pulumi.Input

	ToStreamingPolicyContentKeysOutput() StreamingPolicyContentKeysOutput
	ToStreamingPolicyContentKeysOutputWithContext(context.Context) StreamingPolicyContentKeysOutput
}

// Class to specify properties of all content keys in Streaming Policy
type StreamingPolicyContentKeysArgs struct {
	// Default content key for an encryption scheme
	DefaultKey DefaultKeyPtrInput `pulumi:"defaultKey"`
	// Representing tracks needs separate content key
	KeyToTrackMappings StreamingPolicyContentKeyArrayInput `pulumi:"keyToTrackMappings"`
}

func (StreamingPolicyContentKeysArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyContentKeys)(nil)).Elem()
}

func (i StreamingPolicyContentKeysArgs) ToStreamingPolicyContentKeysOutput() StreamingPolicyContentKeysOutput {
	return i.ToStreamingPolicyContentKeysOutputWithContext(context.Background())
}

func (i StreamingPolicyContentKeysArgs) ToStreamingPolicyContentKeysOutputWithContext(ctx context.Context) StreamingPolicyContentKeysOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyContentKeysOutput)
}

func (i StreamingPolicyContentKeysArgs) ToStreamingPolicyContentKeysPtrOutput() StreamingPolicyContentKeysPtrOutput {
	return i.ToStreamingPolicyContentKeysPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyContentKeysArgs) ToStreamingPolicyContentKeysPtrOutputWithContext(ctx context.Context) StreamingPolicyContentKeysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyContentKeysOutput).ToStreamingPolicyContentKeysPtrOutputWithContext(ctx)
}

// StreamingPolicyContentKeysPtrInput is an input type that accepts StreamingPolicyContentKeysArgs, StreamingPolicyContentKeysPtr and StreamingPolicyContentKeysPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyContentKeysPtrInput` via:
//
//          StreamingPolicyContentKeysArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyContentKeysPtrInput interface {
	pulumi.Input

	ToStreamingPolicyContentKeysPtrOutput() StreamingPolicyContentKeysPtrOutput
	ToStreamingPolicyContentKeysPtrOutputWithContext(context.Context) StreamingPolicyContentKeysPtrOutput
}

type streamingPolicyContentKeysPtrType StreamingPolicyContentKeysArgs

func StreamingPolicyContentKeysPtr(v *StreamingPolicyContentKeysArgs) StreamingPolicyContentKeysPtrInput {
	return (*streamingPolicyContentKeysPtrType)(v)
}

func (*streamingPolicyContentKeysPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyContentKeys)(nil)).Elem()
}

func (i *streamingPolicyContentKeysPtrType) ToStreamingPolicyContentKeysPtrOutput() StreamingPolicyContentKeysPtrOutput {
	return i.ToStreamingPolicyContentKeysPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyContentKeysPtrType) ToStreamingPolicyContentKeysPtrOutputWithContext(ctx context.Context) StreamingPolicyContentKeysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyContentKeysPtrOutput)
}

// Class to specify properties of all content keys in Streaming Policy
type StreamingPolicyContentKeysOutput struct{ *pulumi.OutputState }

func (StreamingPolicyContentKeysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyContentKeys)(nil)).Elem()
}

func (o StreamingPolicyContentKeysOutput) ToStreamingPolicyContentKeysOutput() StreamingPolicyContentKeysOutput {
	return o
}

func (o StreamingPolicyContentKeysOutput) ToStreamingPolicyContentKeysOutputWithContext(ctx context.Context) StreamingPolicyContentKeysOutput {
	return o
}

func (o StreamingPolicyContentKeysOutput) ToStreamingPolicyContentKeysPtrOutput() StreamingPolicyContentKeysPtrOutput {
	return o.ToStreamingPolicyContentKeysPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyContentKeysOutput) ToStreamingPolicyContentKeysPtrOutputWithContext(ctx context.Context) StreamingPolicyContentKeysPtrOutput {
	return o.ApplyT(func(v StreamingPolicyContentKeys) *StreamingPolicyContentKeys {
		return &v
	}).(StreamingPolicyContentKeysPtrOutput)
}

// Default content key for an encryption scheme
func (o StreamingPolicyContentKeysOutput) DefaultKey() DefaultKeyPtrOutput {
	return o.ApplyT(func(v StreamingPolicyContentKeys) *DefaultKey { return v.DefaultKey }).(DefaultKeyPtrOutput)
}

// Representing tracks needs separate content key
func (o StreamingPolicyContentKeysOutput) KeyToTrackMappings() StreamingPolicyContentKeyArrayOutput {
	return o.ApplyT(func(v StreamingPolicyContentKeys) []StreamingPolicyContentKey { return v.KeyToTrackMappings }).(StreamingPolicyContentKeyArrayOutput)
}

type StreamingPolicyContentKeysPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyContentKeysPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyContentKeys)(nil)).Elem()
}

func (o StreamingPolicyContentKeysPtrOutput) ToStreamingPolicyContentKeysPtrOutput() StreamingPolicyContentKeysPtrOutput {
	return o
}

func (o StreamingPolicyContentKeysPtrOutput) ToStreamingPolicyContentKeysPtrOutputWithContext(ctx context.Context) StreamingPolicyContentKeysPtrOutput {
	return o
}

func (o StreamingPolicyContentKeysPtrOutput) Elem() StreamingPolicyContentKeysOutput {
	return o.ApplyT(func(v *StreamingPolicyContentKeys) StreamingPolicyContentKeys { return *v }).(StreamingPolicyContentKeysOutput)
}

// Default content key for an encryption scheme
func (o StreamingPolicyContentKeysPtrOutput) DefaultKey() DefaultKeyPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyContentKeys) *DefaultKey {
		if v == nil {
			return nil
		}
		return v.DefaultKey
	}).(DefaultKeyPtrOutput)
}

// Representing tracks needs separate content key
func (o StreamingPolicyContentKeysPtrOutput) KeyToTrackMappings() StreamingPolicyContentKeyArrayOutput {
	return o.ApplyT(func(v *StreamingPolicyContentKeys) []StreamingPolicyContentKey {
		if v == nil {
			return nil
		}
		return v.KeyToTrackMappings
	}).(StreamingPolicyContentKeyArrayOutput)
}

// Class to specify properties of all content keys in Streaming Policy
type StreamingPolicyContentKeysResponse struct {
	// Default content key for an encryption scheme
	DefaultKey *DefaultKeyResponse `pulumi:"defaultKey"`
	// Representing tracks needs separate content key
	KeyToTrackMappings []StreamingPolicyContentKeyResponse `pulumi:"keyToTrackMappings"`
}

// StreamingPolicyContentKeysResponseInput is an input type that accepts StreamingPolicyContentKeysResponseArgs and StreamingPolicyContentKeysResponseOutput values.
// You can construct a concrete instance of `StreamingPolicyContentKeysResponseInput` via:
//
//          StreamingPolicyContentKeysResponseArgs{...}
type StreamingPolicyContentKeysResponseInput interface {
	pulumi.Input

	ToStreamingPolicyContentKeysResponseOutput() StreamingPolicyContentKeysResponseOutput
	ToStreamingPolicyContentKeysResponseOutputWithContext(context.Context) StreamingPolicyContentKeysResponseOutput
}

// Class to specify properties of all content keys in Streaming Policy
type StreamingPolicyContentKeysResponseArgs struct {
	// Default content key for an encryption scheme
	DefaultKey DefaultKeyResponsePtrInput `pulumi:"defaultKey"`
	// Representing tracks needs separate content key
	KeyToTrackMappings StreamingPolicyContentKeyResponseArrayInput `pulumi:"keyToTrackMappings"`
}

func (StreamingPolicyContentKeysResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyContentKeysResponse)(nil)).Elem()
}

func (i StreamingPolicyContentKeysResponseArgs) ToStreamingPolicyContentKeysResponseOutput() StreamingPolicyContentKeysResponseOutput {
	return i.ToStreamingPolicyContentKeysResponseOutputWithContext(context.Background())
}

func (i StreamingPolicyContentKeysResponseArgs) ToStreamingPolicyContentKeysResponseOutputWithContext(ctx context.Context) StreamingPolicyContentKeysResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyContentKeysResponseOutput)
}

func (i StreamingPolicyContentKeysResponseArgs) ToStreamingPolicyContentKeysResponsePtrOutput() StreamingPolicyContentKeysResponsePtrOutput {
	return i.ToStreamingPolicyContentKeysResponsePtrOutputWithContext(context.Background())
}

func (i StreamingPolicyContentKeysResponseArgs) ToStreamingPolicyContentKeysResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyContentKeysResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyContentKeysResponseOutput).ToStreamingPolicyContentKeysResponsePtrOutputWithContext(ctx)
}

// StreamingPolicyContentKeysResponsePtrInput is an input type that accepts StreamingPolicyContentKeysResponseArgs, StreamingPolicyContentKeysResponsePtr and StreamingPolicyContentKeysResponsePtrOutput values.
// You can construct a concrete instance of `StreamingPolicyContentKeysResponsePtrInput` via:
//
//          StreamingPolicyContentKeysResponseArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyContentKeysResponsePtrInput interface {
	pulumi.Input

	ToStreamingPolicyContentKeysResponsePtrOutput() StreamingPolicyContentKeysResponsePtrOutput
	ToStreamingPolicyContentKeysResponsePtrOutputWithContext(context.Context) StreamingPolicyContentKeysResponsePtrOutput
}

type streamingPolicyContentKeysResponsePtrType StreamingPolicyContentKeysResponseArgs

func StreamingPolicyContentKeysResponsePtr(v *StreamingPolicyContentKeysResponseArgs) StreamingPolicyContentKeysResponsePtrInput {
	return (*streamingPolicyContentKeysResponsePtrType)(v)
}

func (*streamingPolicyContentKeysResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyContentKeysResponse)(nil)).Elem()
}

func (i *streamingPolicyContentKeysResponsePtrType) ToStreamingPolicyContentKeysResponsePtrOutput() StreamingPolicyContentKeysResponsePtrOutput {
	return i.ToStreamingPolicyContentKeysResponsePtrOutputWithContext(context.Background())
}

func (i *streamingPolicyContentKeysResponsePtrType) ToStreamingPolicyContentKeysResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyContentKeysResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyContentKeysResponsePtrOutput)
}

// Class to specify properties of all content keys in Streaming Policy
type StreamingPolicyContentKeysResponseOutput struct{ *pulumi.OutputState }

func (StreamingPolicyContentKeysResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyContentKeysResponse)(nil)).Elem()
}

func (o StreamingPolicyContentKeysResponseOutput) ToStreamingPolicyContentKeysResponseOutput() StreamingPolicyContentKeysResponseOutput {
	return o
}

func (o StreamingPolicyContentKeysResponseOutput) ToStreamingPolicyContentKeysResponseOutputWithContext(ctx context.Context) StreamingPolicyContentKeysResponseOutput {
	return o
}

func (o StreamingPolicyContentKeysResponseOutput) ToStreamingPolicyContentKeysResponsePtrOutput() StreamingPolicyContentKeysResponsePtrOutput {
	return o.ToStreamingPolicyContentKeysResponsePtrOutputWithContext(context.Background())
}

func (o StreamingPolicyContentKeysResponseOutput) ToStreamingPolicyContentKeysResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyContentKeysResponsePtrOutput {
	return o.ApplyT(func(v StreamingPolicyContentKeysResponse) *StreamingPolicyContentKeysResponse {
		return &v
	}).(StreamingPolicyContentKeysResponsePtrOutput)
}

// Default content key for an encryption scheme
func (o StreamingPolicyContentKeysResponseOutput) DefaultKey() DefaultKeyResponsePtrOutput {
	return o.ApplyT(func(v StreamingPolicyContentKeysResponse) *DefaultKeyResponse { return v.DefaultKey }).(DefaultKeyResponsePtrOutput)
}

// Representing tracks needs separate content key
func (o StreamingPolicyContentKeysResponseOutput) KeyToTrackMappings() StreamingPolicyContentKeyResponseArrayOutput {
	return o.ApplyT(func(v StreamingPolicyContentKeysResponse) []StreamingPolicyContentKeyResponse {
		return v.KeyToTrackMappings
	}).(StreamingPolicyContentKeyResponseArrayOutput)
}

type StreamingPolicyContentKeysResponsePtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyContentKeysResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyContentKeysResponse)(nil)).Elem()
}

func (o StreamingPolicyContentKeysResponsePtrOutput) ToStreamingPolicyContentKeysResponsePtrOutput() StreamingPolicyContentKeysResponsePtrOutput {
	return o
}

func (o StreamingPolicyContentKeysResponsePtrOutput) ToStreamingPolicyContentKeysResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyContentKeysResponsePtrOutput {
	return o
}

func (o StreamingPolicyContentKeysResponsePtrOutput) Elem() StreamingPolicyContentKeysResponseOutput {
	return o.ApplyT(func(v *StreamingPolicyContentKeysResponse) StreamingPolicyContentKeysResponse { return *v }).(StreamingPolicyContentKeysResponseOutput)
}

// Default content key for an encryption scheme
func (o StreamingPolicyContentKeysResponsePtrOutput) DefaultKey() DefaultKeyResponsePtrOutput {
	return o.ApplyT(func(v *StreamingPolicyContentKeysResponse) *DefaultKeyResponse {
		if v == nil {
			return nil
		}
		return v.DefaultKey
	}).(DefaultKeyResponsePtrOutput)
}

// Representing tracks needs separate content key
func (o StreamingPolicyContentKeysResponsePtrOutput) KeyToTrackMappings() StreamingPolicyContentKeyResponseArrayOutput {
	return o.ApplyT(func(v *StreamingPolicyContentKeysResponse) []StreamingPolicyContentKeyResponse {
		if v == nil {
			return nil
		}
		return v.KeyToTrackMappings
	}).(StreamingPolicyContentKeyResponseArrayOutput)
}

// Class to specify configurations of FairPlay in Streaming Policy
type StreamingPolicyFairPlayConfiguration struct {
	// All license to be persistent or not
	AllowPersistentLicense bool `pulumi:"allowPersistentLicense"`
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate *string `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

// StreamingPolicyFairPlayConfigurationInput is an input type that accepts StreamingPolicyFairPlayConfigurationArgs and StreamingPolicyFairPlayConfigurationOutput values.
// You can construct a concrete instance of `StreamingPolicyFairPlayConfigurationInput` via:
//
//          StreamingPolicyFairPlayConfigurationArgs{...}
type StreamingPolicyFairPlayConfigurationInput interface {
	pulumi.Input

	ToStreamingPolicyFairPlayConfigurationOutput() StreamingPolicyFairPlayConfigurationOutput
	ToStreamingPolicyFairPlayConfigurationOutputWithContext(context.Context) StreamingPolicyFairPlayConfigurationOutput
}

// Class to specify configurations of FairPlay in Streaming Policy
type StreamingPolicyFairPlayConfigurationArgs struct {
	// All license to be persistent or not
	AllowPersistentLicense pulumi.BoolInput `pulumi:"allowPersistentLicense"`
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate pulumi.StringPtrInput `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

func (StreamingPolicyFairPlayConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyFairPlayConfiguration)(nil)).Elem()
}

func (i StreamingPolicyFairPlayConfigurationArgs) ToStreamingPolicyFairPlayConfigurationOutput() StreamingPolicyFairPlayConfigurationOutput {
	return i.ToStreamingPolicyFairPlayConfigurationOutputWithContext(context.Background())
}

func (i StreamingPolicyFairPlayConfigurationArgs) ToStreamingPolicyFairPlayConfigurationOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyFairPlayConfigurationOutput)
}

func (i StreamingPolicyFairPlayConfigurationArgs) ToStreamingPolicyFairPlayConfigurationPtrOutput() StreamingPolicyFairPlayConfigurationPtrOutput {
	return i.ToStreamingPolicyFairPlayConfigurationPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyFairPlayConfigurationArgs) ToStreamingPolicyFairPlayConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyFairPlayConfigurationOutput).ToStreamingPolicyFairPlayConfigurationPtrOutputWithContext(ctx)
}

// StreamingPolicyFairPlayConfigurationPtrInput is an input type that accepts StreamingPolicyFairPlayConfigurationArgs, StreamingPolicyFairPlayConfigurationPtr and StreamingPolicyFairPlayConfigurationPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyFairPlayConfigurationPtrInput` via:
//
//          StreamingPolicyFairPlayConfigurationArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyFairPlayConfigurationPtrInput interface {
	pulumi.Input

	ToStreamingPolicyFairPlayConfigurationPtrOutput() StreamingPolicyFairPlayConfigurationPtrOutput
	ToStreamingPolicyFairPlayConfigurationPtrOutputWithContext(context.Context) StreamingPolicyFairPlayConfigurationPtrOutput
}

type streamingPolicyFairPlayConfigurationPtrType StreamingPolicyFairPlayConfigurationArgs

func StreamingPolicyFairPlayConfigurationPtr(v *StreamingPolicyFairPlayConfigurationArgs) StreamingPolicyFairPlayConfigurationPtrInput {
	return (*streamingPolicyFairPlayConfigurationPtrType)(v)
}

func (*streamingPolicyFairPlayConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyFairPlayConfiguration)(nil)).Elem()
}

func (i *streamingPolicyFairPlayConfigurationPtrType) ToStreamingPolicyFairPlayConfigurationPtrOutput() StreamingPolicyFairPlayConfigurationPtrOutput {
	return i.ToStreamingPolicyFairPlayConfigurationPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyFairPlayConfigurationPtrType) ToStreamingPolicyFairPlayConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyFairPlayConfigurationPtrOutput)
}

// Class to specify configurations of FairPlay in Streaming Policy
type StreamingPolicyFairPlayConfigurationOutput struct{ *pulumi.OutputState }

func (StreamingPolicyFairPlayConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyFairPlayConfiguration)(nil)).Elem()
}

func (o StreamingPolicyFairPlayConfigurationOutput) ToStreamingPolicyFairPlayConfigurationOutput() StreamingPolicyFairPlayConfigurationOutput {
	return o
}

func (o StreamingPolicyFairPlayConfigurationOutput) ToStreamingPolicyFairPlayConfigurationOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationOutput {
	return o
}

func (o StreamingPolicyFairPlayConfigurationOutput) ToStreamingPolicyFairPlayConfigurationPtrOutput() StreamingPolicyFairPlayConfigurationPtrOutput {
	return o.ToStreamingPolicyFairPlayConfigurationPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyFairPlayConfigurationOutput) ToStreamingPolicyFairPlayConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationPtrOutput {
	return o.ApplyT(func(v StreamingPolicyFairPlayConfiguration) *StreamingPolicyFairPlayConfiguration {
		return &v
	}).(StreamingPolicyFairPlayConfigurationPtrOutput)
}

// All license to be persistent or not
func (o StreamingPolicyFairPlayConfigurationOutput) AllowPersistentLicense() pulumi.BoolOutput {
	return o.ApplyT(func(v StreamingPolicyFairPlayConfiguration) bool { return v.AllowPersistentLicense }).(pulumi.BoolOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyFairPlayConfigurationOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyFairPlayConfiguration) *string { return v.CustomLicenseAcquisitionUrlTemplate }).(pulumi.StringPtrOutput)
}

type StreamingPolicyFairPlayConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyFairPlayConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyFairPlayConfiguration)(nil)).Elem()
}

func (o StreamingPolicyFairPlayConfigurationPtrOutput) ToStreamingPolicyFairPlayConfigurationPtrOutput() StreamingPolicyFairPlayConfigurationPtrOutput {
	return o
}

func (o StreamingPolicyFairPlayConfigurationPtrOutput) ToStreamingPolicyFairPlayConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationPtrOutput {
	return o
}

func (o StreamingPolicyFairPlayConfigurationPtrOutput) Elem() StreamingPolicyFairPlayConfigurationOutput {
	return o.ApplyT(func(v *StreamingPolicyFairPlayConfiguration) StreamingPolicyFairPlayConfiguration { return *v }).(StreamingPolicyFairPlayConfigurationOutput)
}

// All license to be persistent or not
func (o StreamingPolicyFairPlayConfigurationPtrOutput) AllowPersistentLicense() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyFairPlayConfiguration) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowPersistentLicense
	}).(pulumi.BoolPtrOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyFairPlayConfigurationPtrOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyFairPlayConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// Class to specify configurations of FairPlay in Streaming Policy
type StreamingPolicyFairPlayConfigurationResponse struct {
	// All license to be persistent or not
	AllowPersistentLicense bool `pulumi:"allowPersistentLicense"`
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate *string `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

// StreamingPolicyFairPlayConfigurationResponseInput is an input type that accepts StreamingPolicyFairPlayConfigurationResponseArgs and StreamingPolicyFairPlayConfigurationResponseOutput values.
// You can construct a concrete instance of `StreamingPolicyFairPlayConfigurationResponseInput` via:
//
//          StreamingPolicyFairPlayConfigurationResponseArgs{...}
type StreamingPolicyFairPlayConfigurationResponseInput interface {
	pulumi.Input

	ToStreamingPolicyFairPlayConfigurationResponseOutput() StreamingPolicyFairPlayConfigurationResponseOutput
	ToStreamingPolicyFairPlayConfigurationResponseOutputWithContext(context.Context) StreamingPolicyFairPlayConfigurationResponseOutput
}

// Class to specify configurations of FairPlay in Streaming Policy
type StreamingPolicyFairPlayConfigurationResponseArgs struct {
	// All license to be persistent or not
	AllowPersistentLicense pulumi.BoolInput `pulumi:"allowPersistentLicense"`
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate pulumi.StringPtrInput `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

func (StreamingPolicyFairPlayConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyFairPlayConfigurationResponse)(nil)).Elem()
}

func (i StreamingPolicyFairPlayConfigurationResponseArgs) ToStreamingPolicyFairPlayConfigurationResponseOutput() StreamingPolicyFairPlayConfigurationResponseOutput {
	return i.ToStreamingPolicyFairPlayConfigurationResponseOutputWithContext(context.Background())
}

func (i StreamingPolicyFairPlayConfigurationResponseArgs) ToStreamingPolicyFairPlayConfigurationResponseOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyFairPlayConfigurationResponseOutput)
}

func (i StreamingPolicyFairPlayConfigurationResponseArgs) ToStreamingPolicyFairPlayConfigurationResponsePtrOutput() StreamingPolicyFairPlayConfigurationResponsePtrOutput {
	return i.ToStreamingPolicyFairPlayConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i StreamingPolicyFairPlayConfigurationResponseArgs) ToStreamingPolicyFairPlayConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyFairPlayConfigurationResponseOutput).ToStreamingPolicyFairPlayConfigurationResponsePtrOutputWithContext(ctx)
}

// StreamingPolicyFairPlayConfigurationResponsePtrInput is an input type that accepts StreamingPolicyFairPlayConfigurationResponseArgs, StreamingPolicyFairPlayConfigurationResponsePtr and StreamingPolicyFairPlayConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `StreamingPolicyFairPlayConfigurationResponsePtrInput` via:
//
//          StreamingPolicyFairPlayConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyFairPlayConfigurationResponsePtrInput interface {
	pulumi.Input

	ToStreamingPolicyFairPlayConfigurationResponsePtrOutput() StreamingPolicyFairPlayConfigurationResponsePtrOutput
	ToStreamingPolicyFairPlayConfigurationResponsePtrOutputWithContext(context.Context) StreamingPolicyFairPlayConfigurationResponsePtrOutput
}

type streamingPolicyFairPlayConfigurationResponsePtrType StreamingPolicyFairPlayConfigurationResponseArgs

func StreamingPolicyFairPlayConfigurationResponsePtr(v *StreamingPolicyFairPlayConfigurationResponseArgs) StreamingPolicyFairPlayConfigurationResponsePtrInput {
	return (*streamingPolicyFairPlayConfigurationResponsePtrType)(v)
}

func (*streamingPolicyFairPlayConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyFairPlayConfigurationResponse)(nil)).Elem()
}

func (i *streamingPolicyFairPlayConfigurationResponsePtrType) ToStreamingPolicyFairPlayConfigurationResponsePtrOutput() StreamingPolicyFairPlayConfigurationResponsePtrOutput {
	return i.ToStreamingPolicyFairPlayConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *streamingPolicyFairPlayConfigurationResponsePtrType) ToStreamingPolicyFairPlayConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyFairPlayConfigurationResponsePtrOutput)
}

// Class to specify configurations of FairPlay in Streaming Policy
type StreamingPolicyFairPlayConfigurationResponseOutput struct{ *pulumi.OutputState }

func (StreamingPolicyFairPlayConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyFairPlayConfigurationResponse)(nil)).Elem()
}

func (o StreamingPolicyFairPlayConfigurationResponseOutput) ToStreamingPolicyFairPlayConfigurationResponseOutput() StreamingPolicyFairPlayConfigurationResponseOutput {
	return o
}

func (o StreamingPolicyFairPlayConfigurationResponseOutput) ToStreamingPolicyFairPlayConfigurationResponseOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationResponseOutput {
	return o
}

func (o StreamingPolicyFairPlayConfigurationResponseOutput) ToStreamingPolicyFairPlayConfigurationResponsePtrOutput() StreamingPolicyFairPlayConfigurationResponsePtrOutput {
	return o.ToStreamingPolicyFairPlayConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o StreamingPolicyFairPlayConfigurationResponseOutput) ToStreamingPolicyFairPlayConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationResponsePtrOutput {
	return o.ApplyT(func(v StreamingPolicyFairPlayConfigurationResponse) *StreamingPolicyFairPlayConfigurationResponse {
		return &v
	}).(StreamingPolicyFairPlayConfigurationResponsePtrOutput)
}

// All license to be persistent or not
func (o StreamingPolicyFairPlayConfigurationResponseOutput) AllowPersistentLicense() pulumi.BoolOutput {
	return o.ApplyT(func(v StreamingPolicyFairPlayConfigurationResponse) bool { return v.AllowPersistentLicense }).(pulumi.BoolOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyFairPlayConfigurationResponseOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyFairPlayConfigurationResponse) *string {
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

type StreamingPolicyFairPlayConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyFairPlayConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyFairPlayConfigurationResponse)(nil)).Elem()
}

func (o StreamingPolicyFairPlayConfigurationResponsePtrOutput) ToStreamingPolicyFairPlayConfigurationResponsePtrOutput() StreamingPolicyFairPlayConfigurationResponsePtrOutput {
	return o
}

func (o StreamingPolicyFairPlayConfigurationResponsePtrOutput) ToStreamingPolicyFairPlayConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyFairPlayConfigurationResponsePtrOutput {
	return o
}

func (o StreamingPolicyFairPlayConfigurationResponsePtrOutput) Elem() StreamingPolicyFairPlayConfigurationResponseOutput {
	return o.ApplyT(func(v *StreamingPolicyFairPlayConfigurationResponse) StreamingPolicyFairPlayConfigurationResponse {
		return *v
	}).(StreamingPolicyFairPlayConfigurationResponseOutput)
}

// All license to be persistent or not
func (o StreamingPolicyFairPlayConfigurationResponsePtrOutput) AllowPersistentLicense() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyFairPlayConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowPersistentLicense
	}).(pulumi.BoolPtrOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyFairPlayConfigurationResponsePtrOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyFairPlayConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// Class to specify configurations of PlayReady in Streaming Policy
type StreamingPolicyPlayReadyConfiguration struct {
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate *string `pulumi:"customLicenseAcquisitionUrlTemplate"`
	// Custom attributes for PlayReady
	PlayReadyCustomAttributes *string `pulumi:"playReadyCustomAttributes"`
}

// StreamingPolicyPlayReadyConfigurationInput is an input type that accepts StreamingPolicyPlayReadyConfigurationArgs and StreamingPolicyPlayReadyConfigurationOutput values.
// You can construct a concrete instance of `StreamingPolicyPlayReadyConfigurationInput` via:
//
//          StreamingPolicyPlayReadyConfigurationArgs{...}
type StreamingPolicyPlayReadyConfigurationInput interface {
	pulumi.Input

	ToStreamingPolicyPlayReadyConfigurationOutput() StreamingPolicyPlayReadyConfigurationOutput
	ToStreamingPolicyPlayReadyConfigurationOutputWithContext(context.Context) StreamingPolicyPlayReadyConfigurationOutput
}

// Class to specify configurations of PlayReady in Streaming Policy
type StreamingPolicyPlayReadyConfigurationArgs struct {
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate pulumi.StringPtrInput `pulumi:"customLicenseAcquisitionUrlTemplate"`
	// Custom attributes for PlayReady
	PlayReadyCustomAttributes pulumi.StringPtrInput `pulumi:"playReadyCustomAttributes"`
}

func (StreamingPolicyPlayReadyConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyPlayReadyConfiguration)(nil)).Elem()
}

func (i StreamingPolicyPlayReadyConfigurationArgs) ToStreamingPolicyPlayReadyConfigurationOutput() StreamingPolicyPlayReadyConfigurationOutput {
	return i.ToStreamingPolicyPlayReadyConfigurationOutputWithContext(context.Background())
}

func (i StreamingPolicyPlayReadyConfigurationArgs) ToStreamingPolicyPlayReadyConfigurationOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyPlayReadyConfigurationOutput)
}

func (i StreamingPolicyPlayReadyConfigurationArgs) ToStreamingPolicyPlayReadyConfigurationPtrOutput() StreamingPolicyPlayReadyConfigurationPtrOutput {
	return i.ToStreamingPolicyPlayReadyConfigurationPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyPlayReadyConfigurationArgs) ToStreamingPolicyPlayReadyConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyPlayReadyConfigurationOutput).ToStreamingPolicyPlayReadyConfigurationPtrOutputWithContext(ctx)
}

// StreamingPolicyPlayReadyConfigurationPtrInput is an input type that accepts StreamingPolicyPlayReadyConfigurationArgs, StreamingPolicyPlayReadyConfigurationPtr and StreamingPolicyPlayReadyConfigurationPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyPlayReadyConfigurationPtrInput` via:
//
//          StreamingPolicyPlayReadyConfigurationArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyPlayReadyConfigurationPtrInput interface {
	pulumi.Input

	ToStreamingPolicyPlayReadyConfigurationPtrOutput() StreamingPolicyPlayReadyConfigurationPtrOutput
	ToStreamingPolicyPlayReadyConfigurationPtrOutputWithContext(context.Context) StreamingPolicyPlayReadyConfigurationPtrOutput
}

type streamingPolicyPlayReadyConfigurationPtrType StreamingPolicyPlayReadyConfigurationArgs

func StreamingPolicyPlayReadyConfigurationPtr(v *StreamingPolicyPlayReadyConfigurationArgs) StreamingPolicyPlayReadyConfigurationPtrInput {
	return (*streamingPolicyPlayReadyConfigurationPtrType)(v)
}

func (*streamingPolicyPlayReadyConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyPlayReadyConfiguration)(nil)).Elem()
}

func (i *streamingPolicyPlayReadyConfigurationPtrType) ToStreamingPolicyPlayReadyConfigurationPtrOutput() StreamingPolicyPlayReadyConfigurationPtrOutput {
	return i.ToStreamingPolicyPlayReadyConfigurationPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyPlayReadyConfigurationPtrType) ToStreamingPolicyPlayReadyConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyPlayReadyConfigurationPtrOutput)
}

// Class to specify configurations of PlayReady in Streaming Policy
type StreamingPolicyPlayReadyConfigurationOutput struct{ *pulumi.OutputState }

func (StreamingPolicyPlayReadyConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyPlayReadyConfiguration)(nil)).Elem()
}

func (o StreamingPolicyPlayReadyConfigurationOutput) ToStreamingPolicyPlayReadyConfigurationOutput() StreamingPolicyPlayReadyConfigurationOutput {
	return o
}

func (o StreamingPolicyPlayReadyConfigurationOutput) ToStreamingPolicyPlayReadyConfigurationOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationOutput {
	return o
}

func (o StreamingPolicyPlayReadyConfigurationOutput) ToStreamingPolicyPlayReadyConfigurationPtrOutput() StreamingPolicyPlayReadyConfigurationPtrOutput {
	return o.ToStreamingPolicyPlayReadyConfigurationPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyPlayReadyConfigurationOutput) ToStreamingPolicyPlayReadyConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationPtrOutput {
	return o.ApplyT(func(v StreamingPolicyPlayReadyConfiguration) *StreamingPolicyPlayReadyConfiguration {
		return &v
	}).(StreamingPolicyPlayReadyConfigurationPtrOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyPlayReadyConfigurationOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyPlayReadyConfiguration) *string { return v.CustomLicenseAcquisitionUrlTemplate }).(pulumi.StringPtrOutput)
}

// Custom attributes for PlayReady
func (o StreamingPolicyPlayReadyConfigurationOutput) PlayReadyCustomAttributes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyPlayReadyConfiguration) *string { return v.PlayReadyCustomAttributes }).(pulumi.StringPtrOutput)
}

type StreamingPolicyPlayReadyConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyPlayReadyConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyPlayReadyConfiguration)(nil)).Elem()
}

func (o StreamingPolicyPlayReadyConfigurationPtrOutput) ToStreamingPolicyPlayReadyConfigurationPtrOutput() StreamingPolicyPlayReadyConfigurationPtrOutput {
	return o
}

func (o StreamingPolicyPlayReadyConfigurationPtrOutput) ToStreamingPolicyPlayReadyConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationPtrOutput {
	return o
}

func (o StreamingPolicyPlayReadyConfigurationPtrOutput) Elem() StreamingPolicyPlayReadyConfigurationOutput {
	return o.ApplyT(func(v *StreamingPolicyPlayReadyConfiguration) StreamingPolicyPlayReadyConfiguration { return *v }).(StreamingPolicyPlayReadyConfigurationOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyPlayReadyConfigurationPtrOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyPlayReadyConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// Custom attributes for PlayReady
func (o StreamingPolicyPlayReadyConfigurationPtrOutput) PlayReadyCustomAttributes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyPlayReadyConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.PlayReadyCustomAttributes
	}).(pulumi.StringPtrOutput)
}

// Class to specify configurations of PlayReady in Streaming Policy
type StreamingPolicyPlayReadyConfigurationResponse struct {
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate *string `pulumi:"customLicenseAcquisitionUrlTemplate"`
	// Custom attributes for PlayReady
	PlayReadyCustomAttributes *string `pulumi:"playReadyCustomAttributes"`
}

// StreamingPolicyPlayReadyConfigurationResponseInput is an input type that accepts StreamingPolicyPlayReadyConfigurationResponseArgs and StreamingPolicyPlayReadyConfigurationResponseOutput values.
// You can construct a concrete instance of `StreamingPolicyPlayReadyConfigurationResponseInput` via:
//
//          StreamingPolicyPlayReadyConfigurationResponseArgs{...}
type StreamingPolicyPlayReadyConfigurationResponseInput interface {
	pulumi.Input

	ToStreamingPolicyPlayReadyConfigurationResponseOutput() StreamingPolicyPlayReadyConfigurationResponseOutput
	ToStreamingPolicyPlayReadyConfigurationResponseOutputWithContext(context.Context) StreamingPolicyPlayReadyConfigurationResponseOutput
}

// Class to specify configurations of PlayReady in Streaming Policy
type StreamingPolicyPlayReadyConfigurationResponseArgs struct {
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate pulumi.StringPtrInput `pulumi:"customLicenseAcquisitionUrlTemplate"`
	// Custom attributes for PlayReady
	PlayReadyCustomAttributes pulumi.StringPtrInput `pulumi:"playReadyCustomAttributes"`
}

func (StreamingPolicyPlayReadyConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyPlayReadyConfigurationResponse)(nil)).Elem()
}

func (i StreamingPolicyPlayReadyConfigurationResponseArgs) ToStreamingPolicyPlayReadyConfigurationResponseOutput() StreamingPolicyPlayReadyConfigurationResponseOutput {
	return i.ToStreamingPolicyPlayReadyConfigurationResponseOutputWithContext(context.Background())
}

func (i StreamingPolicyPlayReadyConfigurationResponseArgs) ToStreamingPolicyPlayReadyConfigurationResponseOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyPlayReadyConfigurationResponseOutput)
}

func (i StreamingPolicyPlayReadyConfigurationResponseArgs) ToStreamingPolicyPlayReadyConfigurationResponsePtrOutput() StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return i.ToStreamingPolicyPlayReadyConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i StreamingPolicyPlayReadyConfigurationResponseArgs) ToStreamingPolicyPlayReadyConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyPlayReadyConfigurationResponseOutput).ToStreamingPolicyPlayReadyConfigurationResponsePtrOutputWithContext(ctx)
}

// StreamingPolicyPlayReadyConfigurationResponsePtrInput is an input type that accepts StreamingPolicyPlayReadyConfigurationResponseArgs, StreamingPolicyPlayReadyConfigurationResponsePtr and StreamingPolicyPlayReadyConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `StreamingPolicyPlayReadyConfigurationResponsePtrInput` via:
//
//          StreamingPolicyPlayReadyConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyPlayReadyConfigurationResponsePtrInput interface {
	pulumi.Input

	ToStreamingPolicyPlayReadyConfigurationResponsePtrOutput() StreamingPolicyPlayReadyConfigurationResponsePtrOutput
	ToStreamingPolicyPlayReadyConfigurationResponsePtrOutputWithContext(context.Context) StreamingPolicyPlayReadyConfigurationResponsePtrOutput
}

type streamingPolicyPlayReadyConfigurationResponsePtrType StreamingPolicyPlayReadyConfigurationResponseArgs

func StreamingPolicyPlayReadyConfigurationResponsePtr(v *StreamingPolicyPlayReadyConfigurationResponseArgs) StreamingPolicyPlayReadyConfigurationResponsePtrInput {
	return (*streamingPolicyPlayReadyConfigurationResponsePtrType)(v)
}

func (*streamingPolicyPlayReadyConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyPlayReadyConfigurationResponse)(nil)).Elem()
}

func (i *streamingPolicyPlayReadyConfigurationResponsePtrType) ToStreamingPolicyPlayReadyConfigurationResponsePtrOutput() StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return i.ToStreamingPolicyPlayReadyConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *streamingPolicyPlayReadyConfigurationResponsePtrType) ToStreamingPolicyPlayReadyConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyPlayReadyConfigurationResponsePtrOutput)
}

// Class to specify configurations of PlayReady in Streaming Policy
type StreamingPolicyPlayReadyConfigurationResponseOutput struct{ *pulumi.OutputState }

func (StreamingPolicyPlayReadyConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyPlayReadyConfigurationResponse)(nil)).Elem()
}

func (o StreamingPolicyPlayReadyConfigurationResponseOutput) ToStreamingPolicyPlayReadyConfigurationResponseOutput() StreamingPolicyPlayReadyConfigurationResponseOutput {
	return o
}

func (o StreamingPolicyPlayReadyConfigurationResponseOutput) ToStreamingPolicyPlayReadyConfigurationResponseOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationResponseOutput {
	return o
}

func (o StreamingPolicyPlayReadyConfigurationResponseOutput) ToStreamingPolicyPlayReadyConfigurationResponsePtrOutput() StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return o.ToStreamingPolicyPlayReadyConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o StreamingPolicyPlayReadyConfigurationResponseOutput) ToStreamingPolicyPlayReadyConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return o.ApplyT(func(v StreamingPolicyPlayReadyConfigurationResponse) *StreamingPolicyPlayReadyConfigurationResponse {
		return &v
	}).(StreamingPolicyPlayReadyConfigurationResponsePtrOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyPlayReadyConfigurationResponseOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyPlayReadyConfigurationResponse) *string {
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// Custom attributes for PlayReady
func (o StreamingPolicyPlayReadyConfigurationResponseOutput) PlayReadyCustomAttributes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyPlayReadyConfigurationResponse) *string { return v.PlayReadyCustomAttributes }).(pulumi.StringPtrOutput)
}

type StreamingPolicyPlayReadyConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyPlayReadyConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyPlayReadyConfigurationResponse)(nil)).Elem()
}

func (o StreamingPolicyPlayReadyConfigurationResponsePtrOutput) ToStreamingPolicyPlayReadyConfigurationResponsePtrOutput() StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return o
}

func (o StreamingPolicyPlayReadyConfigurationResponsePtrOutput) ToStreamingPolicyPlayReadyConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyPlayReadyConfigurationResponsePtrOutput {
	return o
}

func (o StreamingPolicyPlayReadyConfigurationResponsePtrOutput) Elem() StreamingPolicyPlayReadyConfigurationResponseOutput {
	return o.ApplyT(func(v *StreamingPolicyPlayReadyConfigurationResponse) StreamingPolicyPlayReadyConfigurationResponse {
		return *v
	}).(StreamingPolicyPlayReadyConfigurationResponseOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyPlayReadyConfigurationResponsePtrOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyPlayReadyConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// Custom attributes for PlayReady
func (o StreamingPolicyPlayReadyConfigurationResponsePtrOutput) PlayReadyCustomAttributes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyPlayReadyConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.PlayReadyCustomAttributes
	}).(pulumi.StringPtrOutput)
}

// Class to specify properties of Streaming Policy
type StreamingPolicyPropertiesResponse struct {
	// Configuration of CommonEncryptionCbcs
	CommonEncryptionCbcs *CommonEncryptionCbcsResponse `pulumi:"commonEncryptionCbcs"`
	// Configuration of CommonEncryptionCenc
	CommonEncryptionCenc *CommonEncryptionCencResponse `pulumi:"commonEncryptionCenc"`
	// Creation time of Streaming Policy
	Created string `pulumi:"created"`
	// Default ContentKey used by current Streaming Policy
	DefaultContentKeyPolicyName *string `pulumi:"defaultContentKeyPolicyName"`
	// Configuration of EnvelopeEncryption
	EnvelopeEncryption *EnvelopeEncryptionResponse `pulumi:"envelopeEncryption"`
	// Configurations of NoEncryption
	NoEncryption *NoEncryptionResponse `pulumi:"noEncryption"`
}

// StreamingPolicyPropertiesResponseInput is an input type that accepts StreamingPolicyPropertiesResponseArgs and StreamingPolicyPropertiesResponseOutput values.
// You can construct a concrete instance of `StreamingPolicyPropertiesResponseInput` via:
//
//          StreamingPolicyPropertiesResponseArgs{...}
type StreamingPolicyPropertiesResponseInput interface {
	pulumi.Input

	ToStreamingPolicyPropertiesResponseOutput() StreamingPolicyPropertiesResponseOutput
	ToStreamingPolicyPropertiesResponseOutputWithContext(context.Context) StreamingPolicyPropertiesResponseOutput
}

// Class to specify properties of Streaming Policy
type StreamingPolicyPropertiesResponseArgs struct {
	// Configuration of CommonEncryptionCbcs
	CommonEncryptionCbcs CommonEncryptionCbcsResponsePtrInput `pulumi:"commonEncryptionCbcs"`
	// Configuration of CommonEncryptionCenc
	CommonEncryptionCenc CommonEncryptionCencResponsePtrInput `pulumi:"commonEncryptionCenc"`
	// Creation time of Streaming Policy
	Created pulumi.StringInput `pulumi:"created"`
	// Default ContentKey used by current Streaming Policy
	DefaultContentKeyPolicyName pulumi.StringPtrInput `pulumi:"defaultContentKeyPolicyName"`
	// Configuration of EnvelopeEncryption
	EnvelopeEncryption EnvelopeEncryptionResponsePtrInput `pulumi:"envelopeEncryption"`
	// Configurations of NoEncryption
	NoEncryption NoEncryptionResponsePtrInput `pulumi:"noEncryption"`
}

func (StreamingPolicyPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyPropertiesResponse)(nil)).Elem()
}

func (i StreamingPolicyPropertiesResponseArgs) ToStreamingPolicyPropertiesResponseOutput() StreamingPolicyPropertiesResponseOutput {
	return i.ToStreamingPolicyPropertiesResponseOutputWithContext(context.Background())
}

func (i StreamingPolicyPropertiesResponseArgs) ToStreamingPolicyPropertiesResponseOutputWithContext(ctx context.Context) StreamingPolicyPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyPropertiesResponseOutput)
}

func (i StreamingPolicyPropertiesResponseArgs) ToStreamingPolicyPropertiesResponsePtrOutput() StreamingPolicyPropertiesResponsePtrOutput {
	return i.ToStreamingPolicyPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i StreamingPolicyPropertiesResponseArgs) ToStreamingPolicyPropertiesResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyPropertiesResponseOutput).ToStreamingPolicyPropertiesResponsePtrOutputWithContext(ctx)
}

// StreamingPolicyPropertiesResponsePtrInput is an input type that accepts StreamingPolicyPropertiesResponseArgs, StreamingPolicyPropertiesResponsePtr and StreamingPolicyPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `StreamingPolicyPropertiesResponsePtrInput` via:
//
//          StreamingPolicyPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyPropertiesResponsePtrInput interface {
	pulumi.Input

	ToStreamingPolicyPropertiesResponsePtrOutput() StreamingPolicyPropertiesResponsePtrOutput
	ToStreamingPolicyPropertiesResponsePtrOutputWithContext(context.Context) StreamingPolicyPropertiesResponsePtrOutput
}

type streamingPolicyPropertiesResponsePtrType StreamingPolicyPropertiesResponseArgs

func StreamingPolicyPropertiesResponsePtr(v *StreamingPolicyPropertiesResponseArgs) StreamingPolicyPropertiesResponsePtrInput {
	return (*streamingPolicyPropertiesResponsePtrType)(v)
}

func (*streamingPolicyPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyPropertiesResponse)(nil)).Elem()
}

func (i *streamingPolicyPropertiesResponsePtrType) ToStreamingPolicyPropertiesResponsePtrOutput() StreamingPolicyPropertiesResponsePtrOutput {
	return i.ToStreamingPolicyPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *streamingPolicyPropertiesResponsePtrType) ToStreamingPolicyPropertiesResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyPropertiesResponsePtrOutput)
}

// Class to specify properties of Streaming Policy
type StreamingPolicyPropertiesResponseOutput struct{ *pulumi.OutputState }

func (StreamingPolicyPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyPropertiesResponse)(nil)).Elem()
}

func (o StreamingPolicyPropertiesResponseOutput) ToStreamingPolicyPropertiesResponseOutput() StreamingPolicyPropertiesResponseOutput {
	return o
}

func (o StreamingPolicyPropertiesResponseOutput) ToStreamingPolicyPropertiesResponseOutputWithContext(ctx context.Context) StreamingPolicyPropertiesResponseOutput {
	return o
}

func (o StreamingPolicyPropertiesResponseOutput) ToStreamingPolicyPropertiesResponsePtrOutput() StreamingPolicyPropertiesResponsePtrOutput {
	return o.ToStreamingPolicyPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o StreamingPolicyPropertiesResponseOutput) ToStreamingPolicyPropertiesResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyPropertiesResponsePtrOutput {
	return o.ApplyT(func(v StreamingPolicyPropertiesResponse) *StreamingPolicyPropertiesResponse {
		return &v
	}).(StreamingPolicyPropertiesResponsePtrOutput)
}

// Configuration of CommonEncryptionCbcs
func (o StreamingPolicyPropertiesResponseOutput) CommonEncryptionCbcs() CommonEncryptionCbcsResponsePtrOutput {
	return o.ApplyT(func(v StreamingPolicyPropertiesResponse) *CommonEncryptionCbcsResponse { return v.CommonEncryptionCbcs }).(CommonEncryptionCbcsResponsePtrOutput)
}

// Configuration of CommonEncryptionCenc
func (o StreamingPolicyPropertiesResponseOutput) CommonEncryptionCenc() CommonEncryptionCencResponsePtrOutput {
	return o.ApplyT(func(v StreamingPolicyPropertiesResponse) *CommonEncryptionCencResponse { return v.CommonEncryptionCenc }).(CommonEncryptionCencResponsePtrOutput)
}

// Creation time of Streaming Policy
func (o StreamingPolicyPropertiesResponseOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingPolicyPropertiesResponse) string { return v.Created }).(pulumi.StringOutput)
}

// Default ContentKey used by current Streaming Policy
func (o StreamingPolicyPropertiesResponseOutput) DefaultContentKeyPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyPropertiesResponse) *string { return v.DefaultContentKeyPolicyName }).(pulumi.StringPtrOutput)
}

// Configuration of EnvelopeEncryption
func (o StreamingPolicyPropertiesResponseOutput) EnvelopeEncryption() EnvelopeEncryptionResponsePtrOutput {
	return o.ApplyT(func(v StreamingPolicyPropertiesResponse) *EnvelopeEncryptionResponse { return v.EnvelopeEncryption }).(EnvelopeEncryptionResponsePtrOutput)
}

// Configurations of NoEncryption
func (o StreamingPolicyPropertiesResponseOutput) NoEncryption() NoEncryptionResponsePtrOutput {
	return o.ApplyT(func(v StreamingPolicyPropertiesResponse) *NoEncryptionResponse { return v.NoEncryption }).(NoEncryptionResponsePtrOutput)
}

type StreamingPolicyPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyPropertiesResponse)(nil)).Elem()
}

func (o StreamingPolicyPropertiesResponsePtrOutput) ToStreamingPolicyPropertiesResponsePtrOutput() StreamingPolicyPropertiesResponsePtrOutput {
	return o
}

func (o StreamingPolicyPropertiesResponsePtrOutput) ToStreamingPolicyPropertiesResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyPropertiesResponsePtrOutput {
	return o
}

func (o StreamingPolicyPropertiesResponsePtrOutput) Elem() StreamingPolicyPropertiesResponseOutput {
	return o.ApplyT(func(v *StreamingPolicyPropertiesResponse) StreamingPolicyPropertiesResponse { return *v }).(StreamingPolicyPropertiesResponseOutput)
}

// Configuration of CommonEncryptionCbcs
func (o StreamingPolicyPropertiesResponsePtrOutput) CommonEncryptionCbcs() CommonEncryptionCbcsResponsePtrOutput {
	return o.ApplyT(func(v *StreamingPolicyPropertiesResponse) *CommonEncryptionCbcsResponse {
		if v == nil {
			return nil
		}
		return v.CommonEncryptionCbcs
	}).(CommonEncryptionCbcsResponsePtrOutput)
}

// Configuration of CommonEncryptionCenc
func (o StreamingPolicyPropertiesResponsePtrOutput) CommonEncryptionCenc() CommonEncryptionCencResponsePtrOutput {
	return o.ApplyT(func(v *StreamingPolicyPropertiesResponse) *CommonEncryptionCencResponse {
		if v == nil {
			return nil
		}
		return v.CommonEncryptionCenc
	}).(CommonEncryptionCencResponsePtrOutput)
}

// Creation time of Streaming Policy
func (o StreamingPolicyPropertiesResponsePtrOutput) Created() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Created
	}).(pulumi.StringPtrOutput)
}

// Default ContentKey used by current Streaming Policy
func (o StreamingPolicyPropertiesResponsePtrOutput) DefaultContentKeyPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DefaultContentKeyPolicyName
	}).(pulumi.StringPtrOutput)
}

// Configuration of EnvelopeEncryption
func (o StreamingPolicyPropertiesResponsePtrOutput) EnvelopeEncryption() EnvelopeEncryptionResponsePtrOutput {
	return o.ApplyT(func(v *StreamingPolicyPropertiesResponse) *EnvelopeEncryptionResponse {
		if v == nil {
			return nil
		}
		return v.EnvelopeEncryption
	}).(EnvelopeEncryptionResponsePtrOutput)
}

// Configurations of NoEncryption
func (o StreamingPolicyPropertiesResponsePtrOutput) NoEncryption() NoEncryptionResponsePtrOutput {
	return o.ApplyT(func(v *StreamingPolicyPropertiesResponse) *NoEncryptionResponse {
		if v == nil {
			return nil
		}
		return v.NoEncryption
	}).(NoEncryptionResponsePtrOutput)
}

// Class to specify configurations of Widevine in Streaming Policy
type StreamingPolicyWidevineConfiguration struct {
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate *string `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

// StreamingPolicyWidevineConfigurationInput is an input type that accepts StreamingPolicyWidevineConfigurationArgs and StreamingPolicyWidevineConfigurationOutput values.
// You can construct a concrete instance of `StreamingPolicyWidevineConfigurationInput` via:
//
//          StreamingPolicyWidevineConfigurationArgs{...}
type StreamingPolicyWidevineConfigurationInput interface {
	pulumi.Input

	ToStreamingPolicyWidevineConfigurationOutput() StreamingPolicyWidevineConfigurationOutput
	ToStreamingPolicyWidevineConfigurationOutputWithContext(context.Context) StreamingPolicyWidevineConfigurationOutput
}

// Class to specify configurations of Widevine in Streaming Policy
type StreamingPolicyWidevineConfigurationArgs struct {
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate pulumi.StringPtrInput `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

func (StreamingPolicyWidevineConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyWidevineConfiguration)(nil)).Elem()
}

func (i StreamingPolicyWidevineConfigurationArgs) ToStreamingPolicyWidevineConfigurationOutput() StreamingPolicyWidevineConfigurationOutput {
	return i.ToStreamingPolicyWidevineConfigurationOutputWithContext(context.Background())
}

func (i StreamingPolicyWidevineConfigurationArgs) ToStreamingPolicyWidevineConfigurationOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyWidevineConfigurationOutput)
}

func (i StreamingPolicyWidevineConfigurationArgs) ToStreamingPolicyWidevineConfigurationPtrOutput() StreamingPolicyWidevineConfigurationPtrOutput {
	return i.ToStreamingPolicyWidevineConfigurationPtrOutputWithContext(context.Background())
}

func (i StreamingPolicyWidevineConfigurationArgs) ToStreamingPolicyWidevineConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyWidevineConfigurationOutput).ToStreamingPolicyWidevineConfigurationPtrOutputWithContext(ctx)
}

// StreamingPolicyWidevineConfigurationPtrInput is an input type that accepts StreamingPolicyWidevineConfigurationArgs, StreamingPolicyWidevineConfigurationPtr and StreamingPolicyWidevineConfigurationPtrOutput values.
// You can construct a concrete instance of `StreamingPolicyWidevineConfigurationPtrInput` via:
//
//          StreamingPolicyWidevineConfigurationArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyWidevineConfigurationPtrInput interface {
	pulumi.Input

	ToStreamingPolicyWidevineConfigurationPtrOutput() StreamingPolicyWidevineConfigurationPtrOutput
	ToStreamingPolicyWidevineConfigurationPtrOutputWithContext(context.Context) StreamingPolicyWidevineConfigurationPtrOutput
}

type streamingPolicyWidevineConfigurationPtrType StreamingPolicyWidevineConfigurationArgs

func StreamingPolicyWidevineConfigurationPtr(v *StreamingPolicyWidevineConfigurationArgs) StreamingPolicyWidevineConfigurationPtrInput {
	return (*streamingPolicyWidevineConfigurationPtrType)(v)
}

func (*streamingPolicyWidevineConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyWidevineConfiguration)(nil)).Elem()
}

func (i *streamingPolicyWidevineConfigurationPtrType) ToStreamingPolicyWidevineConfigurationPtrOutput() StreamingPolicyWidevineConfigurationPtrOutput {
	return i.ToStreamingPolicyWidevineConfigurationPtrOutputWithContext(context.Background())
}

func (i *streamingPolicyWidevineConfigurationPtrType) ToStreamingPolicyWidevineConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyWidevineConfigurationPtrOutput)
}

// Class to specify configurations of Widevine in Streaming Policy
type StreamingPolicyWidevineConfigurationOutput struct{ *pulumi.OutputState }

func (StreamingPolicyWidevineConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyWidevineConfiguration)(nil)).Elem()
}

func (o StreamingPolicyWidevineConfigurationOutput) ToStreamingPolicyWidevineConfigurationOutput() StreamingPolicyWidevineConfigurationOutput {
	return o
}

func (o StreamingPolicyWidevineConfigurationOutput) ToStreamingPolicyWidevineConfigurationOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationOutput {
	return o
}

func (o StreamingPolicyWidevineConfigurationOutput) ToStreamingPolicyWidevineConfigurationPtrOutput() StreamingPolicyWidevineConfigurationPtrOutput {
	return o.ToStreamingPolicyWidevineConfigurationPtrOutputWithContext(context.Background())
}

func (o StreamingPolicyWidevineConfigurationOutput) ToStreamingPolicyWidevineConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationPtrOutput {
	return o.ApplyT(func(v StreamingPolicyWidevineConfiguration) *StreamingPolicyWidevineConfiguration {
		return &v
	}).(StreamingPolicyWidevineConfigurationPtrOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyWidevineConfigurationOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyWidevineConfiguration) *string { return v.CustomLicenseAcquisitionUrlTemplate }).(pulumi.StringPtrOutput)
}

type StreamingPolicyWidevineConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyWidevineConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyWidevineConfiguration)(nil)).Elem()
}

func (o StreamingPolicyWidevineConfigurationPtrOutput) ToStreamingPolicyWidevineConfigurationPtrOutput() StreamingPolicyWidevineConfigurationPtrOutput {
	return o
}

func (o StreamingPolicyWidevineConfigurationPtrOutput) ToStreamingPolicyWidevineConfigurationPtrOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationPtrOutput {
	return o
}

func (o StreamingPolicyWidevineConfigurationPtrOutput) Elem() StreamingPolicyWidevineConfigurationOutput {
	return o.ApplyT(func(v *StreamingPolicyWidevineConfiguration) StreamingPolicyWidevineConfiguration { return *v }).(StreamingPolicyWidevineConfigurationOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyWidevineConfigurationPtrOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyWidevineConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// Class to specify configurations of Widevine in Streaming Policy
type StreamingPolicyWidevineConfigurationResponse struct {
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate *string `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

// StreamingPolicyWidevineConfigurationResponseInput is an input type that accepts StreamingPolicyWidevineConfigurationResponseArgs and StreamingPolicyWidevineConfigurationResponseOutput values.
// You can construct a concrete instance of `StreamingPolicyWidevineConfigurationResponseInput` via:
//
//          StreamingPolicyWidevineConfigurationResponseArgs{...}
type StreamingPolicyWidevineConfigurationResponseInput interface {
	pulumi.Input

	ToStreamingPolicyWidevineConfigurationResponseOutput() StreamingPolicyWidevineConfigurationResponseOutput
	ToStreamingPolicyWidevineConfigurationResponseOutputWithContext(context.Context) StreamingPolicyWidevineConfigurationResponseOutput
}

// Class to specify configurations of Widevine in Streaming Policy
type StreamingPolicyWidevineConfigurationResponseArgs struct {
	// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
	CustomLicenseAcquisitionUrlTemplate pulumi.StringPtrInput `pulumi:"customLicenseAcquisitionUrlTemplate"`
}

func (StreamingPolicyWidevineConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyWidevineConfigurationResponse)(nil)).Elem()
}

func (i StreamingPolicyWidevineConfigurationResponseArgs) ToStreamingPolicyWidevineConfigurationResponseOutput() StreamingPolicyWidevineConfigurationResponseOutput {
	return i.ToStreamingPolicyWidevineConfigurationResponseOutputWithContext(context.Background())
}

func (i StreamingPolicyWidevineConfigurationResponseArgs) ToStreamingPolicyWidevineConfigurationResponseOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyWidevineConfigurationResponseOutput)
}

func (i StreamingPolicyWidevineConfigurationResponseArgs) ToStreamingPolicyWidevineConfigurationResponsePtrOutput() StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return i.ToStreamingPolicyWidevineConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i StreamingPolicyWidevineConfigurationResponseArgs) ToStreamingPolicyWidevineConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyWidevineConfigurationResponseOutput).ToStreamingPolicyWidevineConfigurationResponsePtrOutputWithContext(ctx)
}

// StreamingPolicyWidevineConfigurationResponsePtrInput is an input type that accepts StreamingPolicyWidevineConfigurationResponseArgs, StreamingPolicyWidevineConfigurationResponsePtr and StreamingPolicyWidevineConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `StreamingPolicyWidevineConfigurationResponsePtrInput` via:
//
//          StreamingPolicyWidevineConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type StreamingPolicyWidevineConfigurationResponsePtrInput interface {
	pulumi.Input

	ToStreamingPolicyWidevineConfigurationResponsePtrOutput() StreamingPolicyWidevineConfigurationResponsePtrOutput
	ToStreamingPolicyWidevineConfigurationResponsePtrOutputWithContext(context.Context) StreamingPolicyWidevineConfigurationResponsePtrOutput
}

type streamingPolicyWidevineConfigurationResponsePtrType StreamingPolicyWidevineConfigurationResponseArgs

func StreamingPolicyWidevineConfigurationResponsePtr(v *StreamingPolicyWidevineConfigurationResponseArgs) StreamingPolicyWidevineConfigurationResponsePtrInput {
	return (*streamingPolicyWidevineConfigurationResponsePtrType)(v)
}

func (*streamingPolicyWidevineConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyWidevineConfigurationResponse)(nil)).Elem()
}

func (i *streamingPolicyWidevineConfigurationResponsePtrType) ToStreamingPolicyWidevineConfigurationResponsePtrOutput() StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return i.ToStreamingPolicyWidevineConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *streamingPolicyWidevineConfigurationResponsePtrType) ToStreamingPolicyWidevineConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingPolicyWidevineConfigurationResponsePtrOutput)
}

// Class to specify configurations of Widevine in Streaming Policy
type StreamingPolicyWidevineConfigurationResponseOutput struct{ *pulumi.OutputState }

func (StreamingPolicyWidevineConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingPolicyWidevineConfigurationResponse)(nil)).Elem()
}

func (o StreamingPolicyWidevineConfigurationResponseOutput) ToStreamingPolicyWidevineConfigurationResponseOutput() StreamingPolicyWidevineConfigurationResponseOutput {
	return o
}

func (o StreamingPolicyWidevineConfigurationResponseOutput) ToStreamingPolicyWidevineConfigurationResponseOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationResponseOutput {
	return o
}

func (o StreamingPolicyWidevineConfigurationResponseOutput) ToStreamingPolicyWidevineConfigurationResponsePtrOutput() StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return o.ToStreamingPolicyWidevineConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o StreamingPolicyWidevineConfigurationResponseOutput) ToStreamingPolicyWidevineConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return o.ApplyT(func(v StreamingPolicyWidevineConfigurationResponse) *StreamingPolicyWidevineConfigurationResponse {
		return &v
	}).(StreamingPolicyWidevineConfigurationResponsePtrOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyWidevineConfigurationResponseOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamingPolicyWidevineConfigurationResponse) *string {
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

type StreamingPolicyWidevineConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (StreamingPolicyWidevineConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingPolicyWidevineConfigurationResponse)(nil)).Elem()
}

func (o StreamingPolicyWidevineConfigurationResponsePtrOutput) ToStreamingPolicyWidevineConfigurationResponsePtrOutput() StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return o
}

func (o StreamingPolicyWidevineConfigurationResponsePtrOutput) ToStreamingPolicyWidevineConfigurationResponsePtrOutputWithContext(ctx context.Context) StreamingPolicyWidevineConfigurationResponsePtrOutput {
	return o
}

func (o StreamingPolicyWidevineConfigurationResponsePtrOutput) Elem() StreamingPolicyWidevineConfigurationResponseOutput {
	return o.ApplyT(func(v *StreamingPolicyWidevineConfigurationResponse) StreamingPolicyWidevineConfigurationResponse {
		return *v
	}).(StreamingPolicyWidevineConfigurationResponseOutput)
}

// Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
func (o StreamingPolicyWidevineConfigurationResponsePtrOutput) CustomLicenseAcquisitionUrlTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamingPolicyWidevineConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomLicenseAcquisitionUrlTemplate
	}).(pulumi.StringPtrOutput)
}

// Class to specify one track property condition
type TrackPropertyCondition struct {
	// Track property condition operation
	Operation string `pulumi:"operation"`
	// Track property type
	Property string `pulumi:"property"`
	// Track property value
	Value *string `pulumi:"value"`
}

// TrackPropertyConditionInput is an input type that accepts TrackPropertyConditionArgs and TrackPropertyConditionOutput values.
// You can construct a concrete instance of `TrackPropertyConditionInput` via:
//
//          TrackPropertyConditionArgs{...}
type TrackPropertyConditionInput interface {
	pulumi.Input

	ToTrackPropertyConditionOutput() TrackPropertyConditionOutput
	ToTrackPropertyConditionOutputWithContext(context.Context) TrackPropertyConditionOutput
}

// Class to specify one track property condition
type TrackPropertyConditionArgs struct {
	// Track property condition operation
	Operation pulumi.StringInput `pulumi:"operation"`
	// Track property type
	Property pulumi.StringInput `pulumi:"property"`
	// Track property value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TrackPropertyConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackPropertyCondition)(nil)).Elem()
}

func (i TrackPropertyConditionArgs) ToTrackPropertyConditionOutput() TrackPropertyConditionOutput {
	return i.ToTrackPropertyConditionOutputWithContext(context.Background())
}

func (i TrackPropertyConditionArgs) ToTrackPropertyConditionOutputWithContext(ctx context.Context) TrackPropertyConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackPropertyConditionOutput)
}

// TrackPropertyConditionArrayInput is an input type that accepts TrackPropertyConditionArray and TrackPropertyConditionArrayOutput values.
// You can construct a concrete instance of `TrackPropertyConditionArrayInput` via:
//
//          TrackPropertyConditionArray{ TrackPropertyConditionArgs{...} }
type TrackPropertyConditionArrayInput interface {
	pulumi.Input

	ToTrackPropertyConditionArrayOutput() TrackPropertyConditionArrayOutput
	ToTrackPropertyConditionArrayOutputWithContext(context.Context) TrackPropertyConditionArrayOutput
}

type TrackPropertyConditionArray []TrackPropertyConditionInput

func (TrackPropertyConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrackPropertyCondition)(nil)).Elem()
}

func (i TrackPropertyConditionArray) ToTrackPropertyConditionArrayOutput() TrackPropertyConditionArrayOutput {
	return i.ToTrackPropertyConditionArrayOutputWithContext(context.Background())
}

func (i TrackPropertyConditionArray) ToTrackPropertyConditionArrayOutputWithContext(ctx context.Context) TrackPropertyConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackPropertyConditionArrayOutput)
}

// Class to specify one track property condition
type TrackPropertyConditionOutput struct{ *pulumi.OutputState }

func (TrackPropertyConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackPropertyCondition)(nil)).Elem()
}

func (o TrackPropertyConditionOutput) ToTrackPropertyConditionOutput() TrackPropertyConditionOutput {
	return o
}

func (o TrackPropertyConditionOutput) ToTrackPropertyConditionOutputWithContext(ctx context.Context) TrackPropertyConditionOutput {
	return o
}

// Track property condition operation
func (o TrackPropertyConditionOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v TrackPropertyCondition) string { return v.Operation }).(pulumi.StringOutput)
}

// Track property type
func (o TrackPropertyConditionOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v TrackPropertyCondition) string { return v.Property }).(pulumi.StringOutput)
}

// Track property value
func (o TrackPropertyConditionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrackPropertyCondition) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TrackPropertyConditionArrayOutput struct{ *pulumi.OutputState }

func (TrackPropertyConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrackPropertyCondition)(nil)).Elem()
}

func (o TrackPropertyConditionArrayOutput) ToTrackPropertyConditionArrayOutput() TrackPropertyConditionArrayOutput {
	return o
}

func (o TrackPropertyConditionArrayOutput) ToTrackPropertyConditionArrayOutputWithContext(ctx context.Context) TrackPropertyConditionArrayOutput {
	return o
}

func (o TrackPropertyConditionArrayOutput) Index(i pulumi.IntInput) TrackPropertyConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrackPropertyCondition {
		return vs[0].([]TrackPropertyCondition)[vs[1].(int)]
	}).(TrackPropertyConditionOutput)
}

// Class to specify one track property condition
type TrackPropertyConditionResponse struct {
	// Track property condition operation
	Operation string `pulumi:"operation"`
	// Track property type
	Property string `pulumi:"property"`
	// Track property value
	Value *string `pulumi:"value"`
}

// TrackPropertyConditionResponseInput is an input type that accepts TrackPropertyConditionResponseArgs and TrackPropertyConditionResponseOutput values.
// You can construct a concrete instance of `TrackPropertyConditionResponseInput` via:
//
//          TrackPropertyConditionResponseArgs{...}
type TrackPropertyConditionResponseInput interface {
	pulumi.Input

	ToTrackPropertyConditionResponseOutput() TrackPropertyConditionResponseOutput
	ToTrackPropertyConditionResponseOutputWithContext(context.Context) TrackPropertyConditionResponseOutput
}

// Class to specify one track property condition
type TrackPropertyConditionResponseArgs struct {
	// Track property condition operation
	Operation pulumi.StringInput `pulumi:"operation"`
	// Track property type
	Property pulumi.StringInput `pulumi:"property"`
	// Track property value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TrackPropertyConditionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackPropertyConditionResponse)(nil)).Elem()
}

func (i TrackPropertyConditionResponseArgs) ToTrackPropertyConditionResponseOutput() TrackPropertyConditionResponseOutput {
	return i.ToTrackPropertyConditionResponseOutputWithContext(context.Background())
}

func (i TrackPropertyConditionResponseArgs) ToTrackPropertyConditionResponseOutputWithContext(ctx context.Context) TrackPropertyConditionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackPropertyConditionResponseOutput)
}

// TrackPropertyConditionResponseArrayInput is an input type that accepts TrackPropertyConditionResponseArray and TrackPropertyConditionResponseArrayOutput values.
// You can construct a concrete instance of `TrackPropertyConditionResponseArrayInput` via:
//
//          TrackPropertyConditionResponseArray{ TrackPropertyConditionResponseArgs{...} }
type TrackPropertyConditionResponseArrayInput interface {
	pulumi.Input

	ToTrackPropertyConditionResponseArrayOutput() TrackPropertyConditionResponseArrayOutput
	ToTrackPropertyConditionResponseArrayOutputWithContext(context.Context) TrackPropertyConditionResponseArrayOutput
}

type TrackPropertyConditionResponseArray []TrackPropertyConditionResponseInput

func (TrackPropertyConditionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrackPropertyConditionResponse)(nil)).Elem()
}

func (i TrackPropertyConditionResponseArray) ToTrackPropertyConditionResponseArrayOutput() TrackPropertyConditionResponseArrayOutput {
	return i.ToTrackPropertyConditionResponseArrayOutputWithContext(context.Background())
}

func (i TrackPropertyConditionResponseArray) ToTrackPropertyConditionResponseArrayOutputWithContext(ctx context.Context) TrackPropertyConditionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackPropertyConditionResponseArrayOutput)
}

// Class to specify one track property condition
type TrackPropertyConditionResponseOutput struct{ *pulumi.OutputState }

func (TrackPropertyConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackPropertyConditionResponse)(nil)).Elem()
}

func (o TrackPropertyConditionResponseOutput) ToTrackPropertyConditionResponseOutput() TrackPropertyConditionResponseOutput {
	return o
}

func (o TrackPropertyConditionResponseOutput) ToTrackPropertyConditionResponseOutputWithContext(ctx context.Context) TrackPropertyConditionResponseOutput {
	return o
}

// Track property condition operation
func (o TrackPropertyConditionResponseOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v TrackPropertyConditionResponse) string { return v.Operation }).(pulumi.StringOutput)
}

// Track property type
func (o TrackPropertyConditionResponseOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v TrackPropertyConditionResponse) string { return v.Property }).(pulumi.StringOutput)
}

// Track property value
func (o TrackPropertyConditionResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrackPropertyConditionResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TrackPropertyConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (TrackPropertyConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrackPropertyConditionResponse)(nil)).Elem()
}

func (o TrackPropertyConditionResponseArrayOutput) ToTrackPropertyConditionResponseArrayOutput() TrackPropertyConditionResponseArrayOutput {
	return o
}

func (o TrackPropertyConditionResponseArrayOutput) ToTrackPropertyConditionResponseArrayOutputWithContext(ctx context.Context) TrackPropertyConditionResponseArrayOutput {
	return o
}

func (o TrackPropertyConditionResponseArrayOutput) Index(i pulumi.IntInput) TrackPropertyConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrackPropertyConditionResponse {
		return vs[0].([]TrackPropertyConditionResponse)[vs[1].(int)]
	}).(TrackPropertyConditionResponseOutput)
}

// Class to select a track
type TrackSelection struct {
	// TrackSelections is a track property condition list which can specify track(s)
	TrackSelections []TrackPropertyCondition `pulumi:"trackSelections"`
}

// TrackSelectionInput is an input type that accepts TrackSelectionArgs and TrackSelectionOutput values.
// You can construct a concrete instance of `TrackSelectionInput` via:
//
//          TrackSelectionArgs{...}
type TrackSelectionInput interface {
	pulumi.Input

	ToTrackSelectionOutput() TrackSelectionOutput
	ToTrackSelectionOutputWithContext(context.Context) TrackSelectionOutput
}

// Class to select a track
type TrackSelectionArgs struct {
	// TrackSelections is a track property condition list which can specify track(s)
	TrackSelections TrackPropertyConditionArrayInput `pulumi:"trackSelections"`
}

func (TrackSelectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackSelection)(nil)).Elem()
}

func (i TrackSelectionArgs) ToTrackSelectionOutput() TrackSelectionOutput {
	return i.ToTrackSelectionOutputWithContext(context.Background())
}

func (i TrackSelectionArgs) ToTrackSelectionOutputWithContext(ctx context.Context) TrackSelectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackSelectionOutput)
}

// TrackSelectionArrayInput is an input type that accepts TrackSelectionArray and TrackSelectionArrayOutput values.
// You can construct a concrete instance of `TrackSelectionArrayInput` via:
//
//          TrackSelectionArray{ TrackSelectionArgs{...} }
type TrackSelectionArrayInput interface {
	pulumi.Input

	ToTrackSelectionArrayOutput() TrackSelectionArrayOutput
	ToTrackSelectionArrayOutputWithContext(context.Context) TrackSelectionArrayOutput
}

type TrackSelectionArray []TrackSelectionInput

func (TrackSelectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrackSelection)(nil)).Elem()
}

func (i TrackSelectionArray) ToTrackSelectionArrayOutput() TrackSelectionArrayOutput {
	return i.ToTrackSelectionArrayOutputWithContext(context.Background())
}

func (i TrackSelectionArray) ToTrackSelectionArrayOutputWithContext(ctx context.Context) TrackSelectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackSelectionArrayOutput)
}

// Class to select a track
type TrackSelectionOutput struct{ *pulumi.OutputState }

func (TrackSelectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackSelection)(nil)).Elem()
}

func (o TrackSelectionOutput) ToTrackSelectionOutput() TrackSelectionOutput {
	return o
}

func (o TrackSelectionOutput) ToTrackSelectionOutputWithContext(ctx context.Context) TrackSelectionOutput {
	return o
}

// TrackSelections is a track property condition list which can specify track(s)
func (o TrackSelectionOutput) TrackSelections() TrackPropertyConditionArrayOutput {
	return o.ApplyT(func(v TrackSelection) []TrackPropertyCondition { return v.TrackSelections }).(TrackPropertyConditionArrayOutput)
}

type TrackSelectionArrayOutput struct{ *pulumi.OutputState }

func (TrackSelectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrackSelection)(nil)).Elem()
}

func (o TrackSelectionArrayOutput) ToTrackSelectionArrayOutput() TrackSelectionArrayOutput {
	return o
}

func (o TrackSelectionArrayOutput) ToTrackSelectionArrayOutputWithContext(ctx context.Context) TrackSelectionArrayOutput {
	return o
}

func (o TrackSelectionArrayOutput) Index(i pulumi.IntInput) TrackSelectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrackSelection {
		return vs[0].([]TrackSelection)[vs[1].(int)]
	}).(TrackSelectionOutput)
}

// Class to select a track
type TrackSelectionResponse struct {
	// TrackSelections is a track property condition list which can specify track(s)
	TrackSelections []TrackPropertyConditionResponse `pulumi:"trackSelections"`
}

// TrackSelectionResponseInput is an input type that accepts TrackSelectionResponseArgs and TrackSelectionResponseOutput values.
// You can construct a concrete instance of `TrackSelectionResponseInput` via:
//
//          TrackSelectionResponseArgs{...}
type TrackSelectionResponseInput interface {
	pulumi.Input

	ToTrackSelectionResponseOutput() TrackSelectionResponseOutput
	ToTrackSelectionResponseOutputWithContext(context.Context) TrackSelectionResponseOutput
}

// Class to select a track
type TrackSelectionResponseArgs struct {
	// TrackSelections is a track property condition list which can specify track(s)
	TrackSelections TrackPropertyConditionResponseArrayInput `pulumi:"trackSelections"`
}

func (TrackSelectionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackSelectionResponse)(nil)).Elem()
}

func (i TrackSelectionResponseArgs) ToTrackSelectionResponseOutput() TrackSelectionResponseOutput {
	return i.ToTrackSelectionResponseOutputWithContext(context.Background())
}

func (i TrackSelectionResponseArgs) ToTrackSelectionResponseOutputWithContext(ctx context.Context) TrackSelectionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackSelectionResponseOutput)
}

// TrackSelectionResponseArrayInput is an input type that accepts TrackSelectionResponseArray and TrackSelectionResponseArrayOutput values.
// You can construct a concrete instance of `TrackSelectionResponseArrayInput` via:
//
//          TrackSelectionResponseArray{ TrackSelectionResponseArgs{...} }
type TrackSelectionResponseArrayInput interface {
	pulumi.Input

	ToTrackSelectionResponseArrayOutput() TrackSelectionResponseArrayOutput
	ToTrackSelectionResponseArrayOutputWithContext(context.Context) TrackSelectionResponseArrayOutput
}

type TrackSelectionResponseArray []TrackSelectionResponseInput

func (TrackSelectionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrackSelectionResponse)(nil)).Elem()
}

func (i TrackSelectionResponseArray) ToTrackSelectionResponseArrayOutput() TrackSelectionResponseArrayOutput {
	return i.ToTrackSelectionResponseArrayOutputWithContext(context.Background())
}

func (i TrackSelectionResponseArray) ToTrackSelectionResponseArrayOutputWithContext(ctx context.Context) TrackSelectionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackSelectionResponseArrayOutput)
}

// Class to select a track
type TrackSelectionResponseOutput struct{ *pulumi.OutputState }

func (TrackSelectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackSelectionResponse)(nil)).Elem()
}

func (o TrackSelectionResponseOutput) ToTrackSelectionResponseOutput() TrackSelectionResponseOutput {
	return o
}

func (o TrackSelectionResponseOutput) ToTrackSelectionResponseOutputWithContext(ctx context.Context) TrackSelectionResponseOutput {
	return o
}

// TrackSelections is a track property condition list which can specify track(s)
func (o TrackSelectionResponseOutput) TrackSelections() TrackPropertyConditionResponseArrayOutput {
	return o.ApplyT(func(v TrackSelectionResponse) []TrackPropertyConditionResponse { return v.TrackSelections }).(TrackPropertyConditionResponseArrayOutput)
}

type TrackSelectionResponseArrayOutput struct{ *pulumi.OutputState }

func (TrackSelectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrackSelectionResponse)(nil)).Elem()
}

func (o TrackSelectionResponseArrayOutput) ToTrackSelectionResponseArrayOutput() TrackSelectionResponseArrayOutput {
	return o
}

func (o TrackSelectionResponseArrayOutput) ToTrackSelectionResponseArrayOutputWithContext(ctx context.Context) TrackSelectionResponseArrayOutput {
	return o
}

func (o TrackSelectionResponseArrayOutput) Index(i pulumi.IntInput) TrackSelectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrackSelectionResponse {
		return vs[0].([]TrackSelectionResponse)[vs[1].(int)]
	}).(TrackSelectionResponseOutput)
}

// A Transform encapsulates the rules or instructions for generating desired outputs from input media, such as by transcoding or by extracting insights. After the Transform is created, it can be applied to input media by creating Jobs.
type TransformType struct {
	// The name of the resource
	Name string `pulumi:"name"`
	// The resource properties.
	Properties TransformPropertiesResponse `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type string `pulumi:"type"`
}

// TransformTypeInput is an input type that accepts TransformTypeArgs and TransformTypeOutput values.
// You can construct a concrete instance of `TransformTypeInput` via:
//
//          TransformTypeArgs{...}
type TransformTypeInput interface {
	pulumi.Input

	ToTransformTypeOutput() TransformTypeOutput
	ToTransformTypeOutputWithContext(context.Context) TransformTypeOutput
}

// A Transform encapsulates the rules or instructions for generating desired outputs from input media, such as by transcoding or by extracting insights. After the Transform is created, it can be applied to input media by creating Jobs.
type TransformTypeArgs struct {
	// The name of the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The resource properties.
	Properties TransformPropertiesResponseInput `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TransformTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformType)(nil)).Elem()
}

func (i TransformTypeArgs) ToTransformTypeOutput() TransformTypeOutput {
	return i.ToTransformTypeOutputWithContext(context.Background())
}

func (i TransformTypeArgs) ToTransformTypeOutputWithContext(ctx context.Context) TransformTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformTypeOutput)
}

// A Transform encapsulates the rules or instructions for generating desired outputs from input media, such as by transcoding or by extracting insights. After the Transform is created, it can be applied to input media by creating Jobs.
type TransformTypeOutput struct{ *pulumi.OutputState }

func (TransformTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformType)(nil)).Elem()
}

func (o TransformTypeOutput) ToTransformTypeOutput() TransformTypeOutput {
	return o
}

func (o TransformTypeOutput) ToTransformTypeOutputWithContext(ctx context.Context) TransformTypeOutput {
	return o
}

// The name of the resource
func (o TransformTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TransformType) string { return v.Name }).(pulumi.StringOutput)
}

// The resource properties.
func (o TransformTypeOutput) Properties() TransformPropertiesResponseOutput {
	return o.ApplyT(func(v TransformType) TransformPropertiesResponse { return v.Properties }).(TransformPropertiesResponseOutput)
}

// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
func (o TransformTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TransformType) string { return v.Type }).(pulumi.StringOutput)
}

// Describes the properties of a TransformOutput, which are the rules to be applied while generating the desired output.
type TransformOutput struct {
	// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.
	OnError *string `pulumi:"onError"`
	// Preset that describes the operations that will be used to modify, transcode, or extract insights from the source file to generate the output.
	Preset Preset `pulumi:"preset"`
	// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
	RelativePriority *string `pulumi:"relativePriority"`
}

// TransformOutputInput is an input type that accepts TransformOutputArgs and TransformOutputOutput values.
// You can construct a concrete instance of `TransformOutputInput` via:
//
//          TransformOutputArgs{...}
type TransformOutputInput interface {
	pulumi.Input

	ToTransformOutputOutput() TransformOutputOutput
	ToTransformOutputOutputWithContext(context.Context) TransformOutputOutput
}

// Describes the properties of a TransformOutput, which are the rules to be applied while generating the desired output.
type TransformOutputArgs struct {
	// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.
	OnError pulumi.StringPtrInput `pulumi:"onError"`
	// Preset that describes the operations that will be used to modify, transcode, or extract insights from the source file to generate the output.
	Preset PresetInput `pulumi:"preset"`
	// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
	RelativePriority pulumi.StringPtrInput `pulumi:"relativePriority"`
}

func (TransformOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutput)(nil)).Elem()
}

func (i TransformOutputArgs) ToTransformOutputOutput() TransformOutputOutput {
	return i.ToTransformOutputOutputWithContext(context.Background())
}

func (i TransformOutputArgs) ToTransformOutputOutputWithContext(ctx context.Context) TransformOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputOutput)
}

// TransformOutputArrayInput is an input type that accepts TransformOutputArray and TransformOutputArrayOutput values.
// You can construct a concrete instance of `TransformOutputArrayInput` via:
//
//          TransformOutputArray{ TransformOutputArgs{...} }
type TransformOutputArrayInput interface {
	pulumi.Input

	ToTransformOutputArrayOutput() TransformOutputArrayOutput
	ToTransformOutputArrayOutputWithContext(context.Context) TransformOutputArrayOutput
}

type TransformOutputArray []TransformOutputInput

func (TransformOutputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutput)(nil)).Elem()
}

func (i TransformOutputArray) ToTransformOutputArrayOutput() TransformOutputArrayOutput {
	return i.ToTransformOutputArrayOutputWithContext(context.Background())
}

func (i TransformOutputArray) ToTransformOutputArrayOutputWithContext(ctx context.Context) TransformOutputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputArrayOutput)
}

// Describes the properties of a TransformOutput, which are the rules to be applied while generating the desired output.
type TransformOutputOutput struct{ *pulumi.OutputState }

func (TransformOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutput)(nil)).Elem()
}

func (o TransformOutputOutput) ToTransformOutputOutput() TransformOutputOutput {
	return o
}

func (o TransformOutputOutput) ToTransformOutputOutputWithContext(ctx context.Context) TransformOutputOutput {
	return o
}

// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.
func (o TransformOutputOutput) OnError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutput) *string { return v.OnError }).(pulumi.StringPtrOutput)
}

// Preset that describes the operations that will be used to modify, transcode, or extract insights from the source file to generate the output.
func (o TransformOutputOutput) Preset() PresetOutput {
	return o.ApplyT(func(v TransformOutput) Preset { return v.Preset }).(PresetOutput)
}

// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
func (o TransformOutputOutput) RelativePriority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutput) *string { return v.RelativePriority }).(pulumi.StringPtrOutput)
}

type TransformOutputArrayOutput struct{ *pulumi.OutputState }

func (TransformOutputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutput)(nil)).Elem()
}

func (o TransformOutputArrayOutput) ToTransformOutputArrayOutput() TransformOutputArrayOutput {
	return o
}

func (o TransformOutputArrayOutput) ToTransformOutputArrayOutputWithContext(ctx context.Context) TransformOutputArrayOutput {
	return o
}

func (o TransformOutputArrayOutput) Index(i pulumi.IntInput) TransformOutputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformOutput {
		return vs[0].([]TransformOutput)[vs[1].(int)]
	}).(TransformOutputOutput)
}

// Describes the properties of a TransformOutput, which are the rules to be applied while generating the desired output.
type TransformOutputResponse struct {
	// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.
	OnError *string `pulumi:"onError"`
	// Preset that describes the operations that will be used to modify, transcode, or extract insights from the source file to generate the output.
	Preset PresetResponse `pulumi:"preset"`
	// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
	RelativePriority *string `pulumi:"relativePriority"`
}

// TransformOutputResponseInput is an input type that accepts TransformOutputResponseArgs and TransformOutputResponseOutput values.
// You can construct a concrete instance of `TransformOutputResponseInput` via:
//
//          TransformOutputResponseArgs{...}
type TransformOutputResponseInput interface {
	pulumi.Input

	ToTransformOutputResponseOutput() TransformOutputResponseOutput
	ToTransformOutputResponseOutputWithContext(context.Context) TransformOutputResponseOutput
}

// Describes the properties of a TransformOutput, which are the rules to be applied while generating the desired output.
type TransformOutputResponseArgs struct {
	// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.
	OnError pulumi.StringPtrInput `pulumi:"onError"`
	// Preset that describes the operations that will be used to modify, transcode, or extract insights from the source file to generate the output.
	Preset PresetResponseInput `pulumi:"preset"`
	// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
	RelativePriority pulumi.StringPtrInput `pulumi:"relativePriority"`
}

func (TransformOutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputResponse)(nil)).Elem()
}

func (i TransformOutputResponseArgs) ToTransformOutputResponseOutput() TransformOutputResponseOutput {
	return i.ToTransformOutputResponseOutputWithContext(context.Background())
}

func (i TransformOutputResponseArgs) ToTransformOutputResponseOutputWithContext(ctx context.Context) TransformOutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputResponseOutput)
}

// TransformOutputResponseArrayInput is an input type that accepts TransformOutputResponseArray and TransformOutputResponseArrayOutput values.
// You can construct a concrete instance of `TransformOutputResponseArrayInput` via:
//
//          TransformOutputResponseArray{ TransformOutputResponseArgs{...} }
type TransformOutputResponseArrayInput interface {
	pulumi.Input

	ToTransformOutputResponseArrayOutput() TransformOutputResponseArrayOutput
	ToTransformOutputResponseArrayOutputWithContext(context.Context) TransformOutputResponseArrayOutput
}

type TransformOutputResponseArray []TransformOutputResponseInput

func (TransformOutputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputResponse)(nil)).Elem()
}

func (i TransformOutputResponseArray) ToTransformOutputResponseArrayOutput() TransformOutputResponseArrayOutput {
	return i.ToTransformOutputResponseArrayOutputWithContext(context.Background())
}

func (i TransformOutputResponseArray) ToTransformOutputResponseArrayOutputWithContext(ctx context.Context) TransformOutputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformOutputResponseArrayOutput)
}

// Describes the properties of a TransformOutput, which are the rules to be applied while generating the desired output.
type TransformOutputResponseOutput struct{ *pulumi.OutputState }

func (TransformOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformOutputResponse)(nil)).Elem()
}

func (o TransformOutputResponseOutput) ToTransformOutputResponseOutput() TransformOutputResponseOutput {
	return o
}

func (o TransformOutputResponseOutput) ToTransformOutputResponseOutputWithContext(ctx context.Context) TransformOutputResponseOutput {
	return o
}

// A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.
func (o TransformOutputResponseOutput) OnError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputResponse) *string { return v.OnError }).(pulumi.StringPtrOutput)
}

// Preset that describes the operations that will be used to modify, transcode, or extract insights from the source file to generate the output.
func (o TransformOutputResponseOutput) Preset() PresetResponseOutput {
	return o.ApplyT(func(v TransformOutputResponse) PresetResponse { return v.Preset }).(PresetResponseOutput)
}

// Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
func (o TransformOutputResponseOutput) RelativePriority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformOutputResponse) *string { return v.RelativePriority }).(pulumi.StringPtrOutput)
}

type TransformOutputResponseArrayOutput struct{ *pulumi.OutputState }

func (TransformOutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformOutputResponse)(nil)).Elem()
}

func (o TransformOutputResponseArrayOutput) ToTransformOutputResponseArrayOutput() TransformOutputResponseArrayOutput {
	return o
}

func (o TransformOutputResponseArrayOutput) ToTransformOutputResponseArrayOutputWithContext(ctx context.Context) TransformOutputResponseArrayOutput {
	return o
}

func (o TransformOutputResponseArrayOutput) Index(i pulumi.IntInput) TransformOutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformOutputResponse {
		return vs[0].([]TransformOutputResponse)[vs[1].(int)]
	}).(TransformOutputResponseOutput)
}

// A Transform.
type TransformPropertiesResponse struct {
	// The UTC date and time when the Transform was created, in 'YYYY-MM-DDThh:mm:ssZ' format.
	Created string `pulumi:"created"`
	// An optional verbose description of the Transform.
	Description *string `pulumi:"description"`
	// The UTC date and time when the Transform was last updated, in 'YYYY-MM-DDThh:mm:ssZ' format.
	LastModified string `pulumi:"lastModified"`
	// An array of one or more TransformOutputs that the Transform should generate.
	Outputs []TransformOutputResponse `pulumi:"outputs"`
}

// TransformPropertiesResponseInput is an input type that accepts TransformPropertiesResponseArgs and TransformPropertiesResponseOutput values.
// You can construct a concrete instance of `TransformPropertiesResponseInput` via:
//
//          TransformPropertiesResponseArgs{...}
type TransformPropertiesResponseInput interface {
	pulumi.Input

	ToTransformPropertiesResponseOutput() TransformPropertiesResponseOutput
	ToTransformPropertiesResponseOutputWithContext(context.Context) TransformPropertiesResponseOutput
}

// A Transform.
type TransformPropertiesResponseArgs struct {
	// The UTC date and time when the Transform was created, in 'YYYY-MM-DDThh:mm:ssZ' format.
	Created pulumi.StringInput `pulumi:"created"`
	// An optional verbose description of the Transform.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The UTC date and time when the Transform was last updated, in 'YYYY-MM-DDThh:mm:ssZ' format.
	LastModified pulumi.StringInput `pulumi:"lastModified"`
	// An array of one or more TransformOutputs that the Transform should generate.
	Outputs TransformOutputResponseArrayInput `pulumi:"outputs"`
}

func (TransformPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformPropertiesResponse)(nil)).Elem()
}

func (i TransformPropertiesResponseArgs) ToTransformPropertiesResponseOutput() TransformPropertiesResponseOutput {
	return i.ToTransformPropertiesResponseOutputWithContext(context.Background())
}

func (i TransformPropertiesResponseArgs) ToTransformPropertiesResponseOutputWithContext(ctx context.Context) TransformPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformPropertiesResponseOutput)
}

func (i TransformPropertiesResponseArgs) ToTransformPropertiesResponsePtrOutput() TransformPropertiesResponsePtrOutput {
	return i.ToTransformPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i TransformPropertiesResponseArgs) ToTransformPropertiesResponsePtrOutputWithContext(ctx context.Context) TransformPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformPropertiesResponseOutput).ToTransformPropertiesResponsePtrOutputWithContext(ctx)
}

// TransformPropertiesResponsePtrInput is an input type that accepts TransformPropertiesResponseArgs, TransformPropertiesResponsePtr and TransformPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `TransformPropertiesResponsePtrInput` via:
//
//          TransformPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type TransformPropertiesResponsePtrInput interface {
	pulumi.Input

	ToTransformPropertiesResponsePtrOutput() TransformPropertiesResponsePtrOutput
	ToTransformPropertiesResponsePtrOutputWithContext(context.Context) TransformPropertiesResponsePtrOutput
}

type transformPropertiesResponsePtrType TransformPropertiesResponseArgs

func TransformPropertiesResponsePtr(v *TransformPropertiesResponseArgs) TransformPropertiesResponsePtrInput {
	return (*transformPropertiesResponsePtrType)(v)
}

func (*transformPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformPropertiesResponse)(nil)).Elem()
}

func (i *transformPropertiesResponsePtrType) ToTransformPropertiesResponsePtrOutput() TransformPropertiesResponsePtrOutput {
	return i.ToTransformPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *transformPropertiesResponsePtrType) ToTransformPropertiesResponsePtrOutputWithContext(ctx context.Context) TransformPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformPropertiesResponsePtrOutput)
}

// A Transform.
type TransformPropertiesResponseOutput struct{ *pulumi.OutputState }

func (TransformPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformPropertiesResponse)(nil)).Elem()
}

func (o TransformPropertiesResponseOutput) ToTransformPropertiesResponseOutput() TransformPropertiesResponseOutput {
	return o
}

func (o TransformPropertiesResponseOutput) ToTransformPropertiesResponseOutputWithContext(ctx context.Context) TransformPropertiesResponseOutput {
	return o
}

func (o TransformPropertiesResponseOutput) ToTransformPropertiesResponsePtrOutput() TransformPropertiesResponsePtrOutput {
	return o.ToTransformPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o TransformPropertiesResponseOutput) ToTransformPropertiesResponsePtrOutputWithContext(ctx context.Context) TransformPropertiesResponsePtrOutput {
	return o.ApplyT(func(v TransformPropertiesResponse) *TransformPropertiesResponse {
		return &v
	}).(TransformPropertiesResponsePtrOutput)
}

// The UTC date and time when the Transform was created, in 'YYYY-MM-DDThh:mm:ssZ' format.
func (o TransformPropertiesResponseOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v TransformPropertiesResponse) string { return v.Created }).(pulumi.StringOutput)
}

// An optional verbose description of the Transform.
func (o TransformPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The UTC date and time when the Transform was last updated, in 'YYYY-MM-DDThh:mm:ssZ' format.
func (o TransformPropertiesResponseOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v TransformPropertiesResponse) string { return v.LastModified }).(pulumi.StringOutput)
}

// An array of one or more TransformOutputs that the Transform should generate.
func (o TransformPropertiesResponseOutput) Outputs() TransformOutputResponseArrayOutput {
	return o.ApplyT(func(v TransformPropertiesResponse) []TransformOutputResponse { return v.Outputs }).(TransformOutputResponseArrayOutput)
}

type TransformPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (TransformPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformPropertiesResponse)(nil)).Elem()
}

func (o TransformPropertiesResponsePtrOutput) ToTransformPropertiesResponsePtrOutput() TransformPropertiesResponsePtrOutput {
	return o
}

func (o TransformPropertiesResponsePtrOutput) ToTransformPropertiesResponsePtrOutputWithContext(ctx context.Context) TransformPropertiesResponsePtrOutput {
	return o
}

func (o TransformPropertiesResponsePtrOutput) Elem() TransformPropertiesResponseOutput {
	return o.ApplyT(func(v *TransformPropertiesResponse) TransformPropertiesResponse { return *v }).(TransformPropertiesResponseOutput)
}

// The UTC date and time when the Transform was created, in 'YYYY-MM-DDThh:mm:ssZ' format.
func (o TransformPropertiesResponsePtrOutput) Created() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Created
	}).(pulumi.StringPtrOutput)
}

// An optional verbose description of the Transform.
func (o TransformPropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The UTC date and time when the Transform was last updated, in 'YYYY-MM-DDThh:mm:ssZ' format.
func (o TransformPropertiesResponsePtrOutput) LastModified() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastModified
	}).(pulumi.StringPtrOutput)
}

// An array of one or more TransformOutputs that the Transform should generate.
func (o TransformPropertiesResponsePtrOutput) Outputs() TransformOutputResponseArrayOutput {
	return o.ApplyT(func(v *TransformPropertiesResponse) []TransformOutputResponse {
		if v == nil {
			return nil
		}
		return v.Outputs
	}).(TransformOutputResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(AccountEncryptionOutput{})
	pulumi.RegisterOutputType(AccountEncryptionPtrOutput{})
	pulumi.RegisterOutputType(AccountEncryptionResponseOutput{})
	pulumi.RegisterOutputType(AccountEncryptionResponsePtrOutput{})
	pulumi.RegisterOutputType(AccountFilterTypeOutput{})
	pulumi.RegisterOutputType(AkamaiAccessControlOutput{})
	pulumi.RegisterOutputType(AkamaiAccessControlPtrOutput{})
	pulumi.RegisterOutputType(AkamaiAccessControlResponseOutput{})
	pulumi.RegisterOutputType(AkamaiAccessControlResponsePtrOutput{})
	pulumi.RegisterOutputType(AkamaiSignatureHeaderAuthenticationKeyOutput{})
	pulumi.RegisterOutputType(AkamaiSignatureHeaderAuthenticationKeyArrayOutput{})
	pulumi.RegisterOutputType(AkamaiSignatureHeaderAuthenticationKeyResponseOutput{})
	pulumi.RegisterOutputType(AkamaiSignatureHeaderAuthenticationKeyResponseArrayOutput{})
	pulumi.RegisterOutputType(AssetTypeOutput{})
	pulumi.RegisterOutputType(AssetFilterTypeOutput{})
	pulumi.RegisterOutputType(AssetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(AssetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(AssetStreamingLocatorResponseOutput{})
	pulumi.RegisterOutputType(AssetStreamingLocatorResponseArrayOutput{})
	pulumi.RegisterOutputType(CbcsDrmConfigurationOutput{})
	pulumi.RegisterOutputType(CbcsDrmConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CbcsDrmConfigurationResponseOutput{})
	pulumi.RegisterOutputType(CbcsDrmConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(CencDrmConfigurationOutput{})
	pulumi.RegisterOutputType(CencDrmConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CencDrmConfigurationResponseOutput{})
	pulumi.RegisterOutputType(CencDrmConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(CommonEncryptionCbcsOutput{})
	pulumi.RegisterOutputType(CommonEncryptionCbcsPtrOutput{})
	pulumi.RegisterOutputType(CommonEncryptionCbcsResponseOutput{})
	pulumi.RegisterOutputType(CommonEncryptionCbcsResponsePtrOutput{})
	pulumi.RegisterOutputType(CommonEncryptionCencOutput{})
	pulumi.RegisterOutputType(CommonEncryptionCencPtrOutput{})
	pulumi.RegisterOutputType(CommonEncryptionCencResponseOutput{})
	pulumi.RegisterOutputType(CommonEncryptionCencResponsePtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyTypeOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyConfigurationOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyOptionOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyOptionArrayOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyOptionResponseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyOptionResponseArrayOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyRestrictionOutput{})
	pulumi.RegisterOutputType(ContentKeyPolicyRestrictionResponseOutput{})
	pulumi.RegisterOutputType(CrossSiteAccessPoliciesOutput{})
	pulumi.RegisterOutputType(CrossSiteAccessPoliciesPtrOutput{})
	pulumi.RegisterOutputType(CrossSiteAccessPoliciesResponseOutput{})
	pulumi.RegisterOutputType(CrossSiteAccessPoliciesResponsePtrOutput{})
	pulumi.RegisterOutputType(DefaultKeyOutput{})
	pulumi.RegisterOutputType(DefaultKeyPtrOutput{})
	pulumi.RegisterOutputType(DefaultKeyResponseOutput{})
	pulumi.RegisterOutputType(DefaultKeyResponsePtrOutput{})
	pulumi.RegisterOutputType(EdgeUsageDataCollectionPolicyResponseOutput{})
	pulumi.RegisterOutputType(EdgeUsageDataEventHubResponseOutput{})
	pulumi.RegisterOutputType(EdgeUsageDataEventHubResponsePtrOutput{})
	pulumi.RegisterOutputType(EnabledProtocolsOutput{})
	pulumi.RegisterOutputType(EnabledProtocolsPtrOutput{})
	pulumi.RegisterOutputType(EnabledProtocolsResponseOutput{})
	pulumi.RegisterOutputType(EnabledProtocolsResponsePtrOutput{})
	pulumi.RegisterOutputType(EnvelopeEncryptionOutput{})
	pulumi.RegisterOutputType(EnvelopeEncryptionPtrOutput{})
	pulumi.RegisterOutputType(EnvelopeEncryptionResponseOutput{})
	pulumi.RegisterOutputType(EnvelopeEncryptionResponsePtrOutput{})
	pulumi.RegisterOutputType(FilterTrackPropertyConditionOutput{})
	pulumi.RegisterOutputType(FilterTrackPropertyConditionArrayOutput{})
	pulumi.RegisterOutputType(FilterTrackPropertyConditionResponseOutput{})
	pulumi.RegisterOutputType(FilterTrackPropertyConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(FilterTrackSelectionOutput{})
	pulumi.RegisterOutputType(FilterTrackSelectionArrayOutput{})
	pulumi.RegisterOutputType(FilterTrackSelectionResponseOutput{})
	pulumi.RegisterOutputType(FilterTrackSelectionResponseArrayOutput{})
	pulumi.RegisterOutputType(FirstQualityOutput{})
	pulumi.RegisterOutputType(FirstQualityPtrOutput{})
	pulumi.RegisterOutputType(FirstQualityResponseOutput{})
	pulumi.RegisterOutputType(FirstQualityResponsePtrOutput{})
	pulumi.RegisterOutputType(HlsOutput{})
	pulumi.RegisterOutputType(HlsPtrOutput{})
	pulumi.RegisterOutputType(HlsResponseOutput{})
	pulumi.RegisterOutputType(HlsResponsePtrOutput{})
	pulumi.RegisterOutputType(IPAccessControlOutput{})
	pulumi.RegisterOutputType(IPAccessControlPtrOutput{})
	pulumi.RegisterOutputType(IPAccessControlResponseOutput{})
	pulumi.RegisterOutputType(IPAccessControlResponsePtrOutput{})
	pulumi.RegisterOutputType(IPRangeOutput{})
	pulumi.RegisterOutputType(IPRangeArrayOutput{})
	pulumi.RegisterOutputType(IPRangeResponseOutput{})
	pulumi.RegisterOutputType(IPRangeResponseArrayOutput{})
	pulumi.RegisterOutputType(JobTypeOutput{})
	pulumi.RegisterOutputType(JobErrorOutput{})
	pulumi.RegisterOutputType(JobErrorDetailOutput{})
	pulumi.RegisterOutputType(JobErrorDetailResponseOutput{})
	pulumi.RegisterOutputType(JobErrorDetailResponseArrayOutput{})
	pulumi.RegisterOutputType(JobErrorResponseOutput{})
	pulumi.RegisterOutputType(JobInputOutput{})
	pulumi.RegisterOutputType(JobInputPtrOutput{})
	pulumi.RegisterOutputType(JobInputResponseOutput{})
	pulumi.RegisterOutputType(JobInputResponsePtrOutput{})
	pulumi.RegisterOutputType(JobOutputOutput{})
	pulumi.RegisterOutputType(JobOutputArrayOutput{})
	pulumi.RegisterOutputType(JobOutputResponseOutput{})
	pulumi.RegisterOutputType(JobOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(JobPropertiesResponseOutput{})
	pulumi.RegisterOutputType(JobPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultPropertiesOutput{})
	pulumi.RegisterOutputType(KeyVaultPropertiesPtrOutput{})
	pulumi.RegisterOutputType(KeyVaultPropertiesResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(LiveEventTypeOutput{})
	pulumi.RegisterOutputType(LiveEventEncodingOutput{})
	pulumi.RegisterOutputType(LiveEventEncodingPtrOutput{})
	pulumi.RegisterOutputType(LiveEventEncodingResponseOutput{})
	pulumi.RegisterOutputType(LiveEventEncodingResponsePtrOutput{})
	pulumi.RegisterOutputType(LiveEventEndpointOutput{})
	pulumi.RegisterOutputType(LiveEventEndpointArrayOutput{})
	pulumi.RegisterOutputType(LiveEventEndpointResponseOutput{})
	pulumi.RegisterOutputType(LiveEventEndpointResponseArrayOutput{})
	pulumi.RegisterOutputType(LiveEventInputOutput{})
	pulumi.RegisterOutputType(LiveEventInputPtrOutput{})
	pulumi.RegisterOutputType(LiveEventInputAccessControlOutput{})
	pulumi.RegisterOutputType(LiveEventInputAccessControlPtrOutput{})
	pulumi.RegisterOutputType(LiveEventInputAccessControlResponseOutput{})
	pulumi.RegisterOutputType(LiveEventInputAccessControlResponsePtrOutput{})
	pulumi.RegisterOutputType(LiveEventInputResponseOutput{})
	pulumi.RegisterOutputType(LiveEventInputResponsePtrOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewPtrOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewAccessControlOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewAccessControlPtrOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewAccessControlResponseOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewAccessControlResponsePtrOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewResponseOutput{})
	pulumi.RegisterOutputType(LiveEventPreviewResponsePtrOutput{})
	pulumi.RegisterOutputType(LiveEventPropertiesResponseOutput{})
	pulumi.RegisterOutputType(LiveEventPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(LiveOutputTypeOutput{})
	pulumi.RegisterOutputType(LiveOutputPropertiesResponseOutput{})
	pulumi.RegisterOutputType(LiveOutputPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(MediaFilterPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MediaFilterPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(MediaServiceTypeOutput{})
	pulumi.RegisterOutputType(MediaServiceIdentityOutput{})
	pulumi.RegisterOutputType(MediaServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(MediaServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(MediaServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(MediaServicePropertiesResponseOutput{})
	pulumi.RegisterOutputType(MediaServicePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(NoEncryptionOutput{})
	pulumi.RegisterOutputType(NoEncryptionPtrOutput{})
	pulumi.RegisterOutputType(NoEncryptionResponseOutput{})
	pulumi.RegisterOutputType(NoEncryptionResponsePtrOutput{})
	pulumi.RegisterOutputType(PresentationTimeRangeOutput{})
	pulumi.RegisterOutputType(PresentationTimeRangePtrOutput{})
	pulumi.RegisterOutputType(PresentationTimeRangeResponseOutput{})
	pulumi.RegisterOutputType(PresentationTimeRangeResponsePtrOutput{})
	pulumi.RegisterOutputType(PresetOutput{})
	pulumi.RegisterOutputType(PresetResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointOutput{})
	pulumi.RegisterOutputType(PrivateEndpointPtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionTypeOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStatePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponsePtrOutput{})
	pulumi.RegisterOutputType(StorageAccountOutput{})
	pulumi.RegisterOutputType(StorageAccountArrayOutput{})
	pulumi.RegisterOutputType(StorageAccountResponseOutput{})
	pulumi.RegisterOutputType(StorageAccountResponseArrayOutput{})
	pulumi.RegisterOutputType(StreamingEndpointTypeOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlPtrOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlResponseOutput{})
	pulumi.RegisterOutputType(StreamingEndpointAccessControlResponsePtrOutput{})
	pulumi.RegisterOutputType(StreamingEndpointPropertiesResponseOutput{})
	pulumi.RegisterOutputType(StreamingEndpointPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(StreamingLocatorTypeOutput{})
	pulumi.RegisterOutputType(StreamingLocatorContentKeyOutput{})
	pulumi.RegisterOutputType(StreamingLocatorContentKeyArrayOutput{})
	pulumi.RegisterOutputType(StreamingLocatorContentKeyResponseOutput{})
	pulumi.RegisterOutputType(StreamingLocatorContentKeyResponseArrayOutput{})
	pulumi.RegisterOutputType(StreamingLocatorPropertiesResponseOutput{})
	pulumi.RegisterOutputType(StreamingLocatorPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(StreamingPathResponseOutput{})
	pulumi.RegisterOutputType(StreamingPathResponseArrayOutput{})
	pulumi.RegisterOutputType(StreamingPolicyTypeOutput{})
	pulumi.RegisterOutputType(StreamingPolicyContentKeyOutput{})
	pulumi.RegisterOutputType(StreamingPolicyContentKeyArrayOutput{})
	pulumi.RegisterOutputType(StreamingPolicyContentKeyResponseOutput{})
	pulumi.RegisterOutputType(StreamingPolicyContentKeyResponseArrayOutput{})
	pulumi.RegisterOutputType(StreamingPolicyContentKeysOutput{})
	pulumi.RegisterOutputType(StreamingPolicyContentKeysPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyContentKeysResponseOutput{})
	pulumi.RegisterOutputType(StreamingPolicyContentKeysResponsePtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyFairPlayConfigurationOutput{})
	pulumi.RegisterOutputType(StreamingPolicyFairPlayConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyFairPlayConfigurationResponseOutput{})
	pulumi.RegisterOutputType(StreamingPolicyFairPlayConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyPlayReadyConfigurationOutput{})
	pulumi.RegisterOutputType(StreamingPolicyPlayReadyConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyPlayReadyConfigurationResponseOutput{})
	pulumi.RegisterOutputType(StreamingPolicyPlayReadyConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyPropertiesResponseOutput{})
	pulumi.RegisterOutputType(StreamingPolicyPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyWidevineConfigurationOutput{})
	pulumi.RegisterOutputType(StreamingPolicyWidevineConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StreamingPolicyWidevineConfigurationResponseOutput{})
	pulumi.RegisterOutputType(StreamingPolicyWidevineConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(TrackPropertyConditionOutput{})
	pulumi.RegisterOutputType(TrackPropertyConditionArrayOutput{})
	pulumi.RegisterOutputType(TrackPropertyConditionResponseOutput{})
	pulumi.RegisterOutputType(TrackPropertyConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(TrackSelectionOutput{})
	pulumi.RegisterOutputType(TrackSelectionArrayOutput{})
	pulumi.RegisterOutputType(TrackSelectionResponseOutput{})
	pulumi.RegisterOutputType(TrackSelectionResponseArrayOutput{})
	pulumi.RegisterOutputType(TransformTypeOutput{})
	pulumi.RegisterOutputType(TransformOutputOutput{})
	pulumi.RegisterOutputType(TransformOutputArrayOutput{})
	pulumi.RegisterOutputType(TransformOutputResponseOutput{})
	pulumi.RegisterOutputType(TransformOutputResponseArrayOutput{})
	pulumi.RegisterOutputType(TransformPropertiesResponseOutput{})
	pulumi.RegisterOutputType(TransformPropertiesResponsePtrOutput{})
}
