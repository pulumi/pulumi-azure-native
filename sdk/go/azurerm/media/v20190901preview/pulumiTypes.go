// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190901preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Media Sink
type MediaGraphSink struct {
	// Sink inputs
	Inputs []string `pulumi:"inputs"`
	// Sink name
	Name string `pulumi:"name"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// MediaGraphSinkInput is an input type that accepts MediaGraphSinkArgs and MediaGraphSinkOutput values.
// You can construct a concrete instance of `MediaGraphSinkInput` via:
//
//          MediaGraphSinkArgs{...}
type MediaGraphSinkInput interface {
	pulumi.Input

	ToMediaGraphSinkOutput() MediaGraphSinkOutput
	ToMediaGraphSinkOutputWithContext(context.Context) MediaGraphSinkOutput
}

// Media Sink
type MediaGraphSinkArgs struct {
	// Sink inputs
	Inputs pulumi.StringArrayInput `pulumi:"inputs"`
	// Sink name
	Name pulumi.StringInput `pulumi:"name"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (MediaGraphSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaGraphSink)(nil)).Elem()
}

func (i MediaGraphSinkArgs) ToMediaGraphSinkOutput() MediaGraphSinkOutput {
	return i.ToMediaGraphSinkOutputWithContext(context.Background())
}

func (i MediaGraphSinkArgs) ToMediaGraphSinkOutputWithContext(ctx context.Context) MediaGraphSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaGraphSinkOutput)
}

// MediaGraphSinkArrayInput is an input type that accepts MediaGraphSinkArray and MediaGraphSinkArrayOutput values.
// You can construct a concrete instance of `MediaGraphSinkArrayInput` via:
//
//          MediaGraphSinkArray{ MediaGraphSinkArgs{...} }
type MediaGraphSinkArrayInput interface {
	pulumi.Input

	ToMediaGraphSinkArrayOutput() MediaGraphSinkArrayOutput
	ToMediaGraphSinkArrayOutputWithContext(context.Context) MediaGraphSinkArrayOutput
}

type MediaGraphSinkArray []MediaGraphSinkInput

func (MediaGraphSinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MediaGraphSink)(nil)).Elem()
}

func (i MediaGraphSinkArray) ToMediaGraphSinkArrayOutput() MediaGraphSinkArrayOutput {
	return i.ToMediaGraphSinkArrayOutputWithContext(context.Background())
}

func (i MediaGraphSinkArray) ToMediaGraphSinkArrayOutputWithContext(ctx context.Context) MediaGraphSinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaGraphSinkArrayOutput)
}

// Media Sink
type MediaGraphSinkOutput struct{ *pulumi.OutputState }

func (MediaGraphSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaGraphSink)(nil)).Elem()
}

func (o MediaGraphSinkOutput) ToMediaGraphSinkOutput() MediaGraphSinkOutput {
	return o
}

func (o MediaGraphSinkOutput) ToMediaGraphSinkOutputWithContext(ctx context.Context) MediaGraphSinkOutput {
	return o
}

// Sink inputs
func (o MediaGraphSinkOutput) Inputs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MediaGraphSink) []string { return v.Inputs }).(pulumi.StringArrayOutput)
}

// Sink name
func (o MediaGraphSinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MediaGraphSink) string { return v.Name }).(pulumi.StringOutput)
}

// The discriminator for derived types.
func (o MediaGraphSinkOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v MediaGraphSink) string { return v.OdataType }).(pulumi.StringOutput)
}

type MediaGraphSinkArrayOutput struct{ *pulumi.OutputState }

func (MediaGraphSinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MediaGraphSink)(nil)).Elem()
}

func (o MediaGraphSinkArrayOutput) ToMediaGraphSinkArrayOutput() MediaGraphSinkArrayOutput {
	return o
}

func (o MediaGraphSinkArrayOutput) ToMediaGraphSinkArrayOutputWithContext(ctx context.Context) MediaGraphSinkArrayOutput {
	return o
}

func (o MediaGraphSinkArrayOutput) Index(i pulumi.IntInput) MediaGraphSinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MediaGraphSink {
		return vs[0].([]MediaGraphSink)[vs[1].(int)]
	}).(MediaGraphSinkOutput)
}

// Media Sink
type MediaGraphSinkResponse struct {
	// Sink inputs
	Inputs []string `pulumi:"inputs"`
	// Sink name
	Name string `pulumi:"name"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// MediaGraphSinkResponseInput is an input type that accepts MediaGraphSinkResponseArgs and MediaGraphSinkResponseOutput values.
// You can construct a concrete instance of `MediaGraphSinkResponseInput` via:
//
//          MediaGraphSinkResponseArgs{...}
type MediaGraphSinkResponseInput interface {
	pulumi.Input

	ToMediaGraphSinkResponseOutput() MediaGraphSinkResponseOutput
	ToMediaGraphSinkResponseOutputWithContext(context.Context) MediaGraphSinkResponseOutput
}

// Media Sink
type MediaGraphSinkResponseArgs struct {
	// Sink inputs
	Inputs pulumi.StringArrayInput `pulumi:"inputs"`
	// Sink name
	Name pulumi.StringInput `pulumi:"name"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (MediaGraphSinkResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaGraphSinkResponse)(nil)).Elem()
}

func (i MediaGraphSinkResponseArgs) ToMediaGraphSinkResponseOutput() MediaGraphSinkResponseOutput {
	return i.ToMediaGraphSinkResponseOutputWithContext(context.Background())
}

func (i MediaGraphSinkResponseArgs) ToMediaGraphSinkResponseOutputWithContext(ctx context.Context) MediaGraphSinkResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaGraphSinkResponseOutput)
}

// MediaGraphSinkResponseArrayInput is an input type that accepts MediaGraphSinkResponseArray and MediaGraphSinkResponseArrayOutput values.
// You can construct a concrete instance of `MediaGraphSinkResponseArrayInput` via:
//
//          MediaGraphSinkResponseArray{ MediaGraphSinkResponseArgs{...} }
type MediaGraphSinkResponseArrayInput interface {
	pulumi.Input

	ToMediaGraphSinkResponseArrayOutput() MediaGraphSinkResponseArrayOutput
	ToMediaGraphSinkResponseArrayOutputWithContext(context.Context) MediaGraphSinkResponseArrayOutput
}

type MediaGraphSinkResponseArray []MediaGraphSinkResponseInput

func (MediaGraphSinkResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MediaGraphSinkResponse)(nil)).Elem()
}

func (i MediaGraphSinkResponseArray) ToMediaGraphSinkResponseArrayOutput() MediaGraphSinkResponseArrayOutput {
	return i.ToMediaGraphSinkResponseArrayOutputWithContext(context.Background())
}

func (i MediaGraphSinkResponseArray) ToMediaGraphSinkResponseArrayOutputWithContext(ctx context.Context) MediaGraphSinkResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaGraphSinkResponseArrayOutput)
}

// Media Sink
type MediaGraphSinkResponseOutput struct{ *pulumi.OutputState }

func (MediaGraphSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaGraphSinkResponse)(nil)).Elem()
}

func (o MediaGraphSinkResponseOutput) ToMediaGraphSinkResponseOutput() MediaGraphSinkResponseOutput {
	return o
}

func (o MediaGraphSinkResponseOutput) ToMediaGraphSinkResponseOutputWithContext(ctx context.Context) MediaGraphSinkResponseOutput {
	return o
}

// Sink inputs
func (o MediaGraphSinkResponseOutput) Inputs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MediaGraphSinkResponse) []string { return v.Inputs }).(pulumi.StringArrayOutput)
}

// Sink name
func (o MediaGraphSinkResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MediaGraphSinkResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The discriminator for derived types.
func (o MediaGraphSinkResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v MediaGraphSinkResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

type MediaGraphSinkResponseArrayOutput struct{ *pulumi.OutputState }

func (MediaGraphSinkResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MediaGraphSinkResponse)(nil)).Elem()
}

func (o MediaGraphSinkResponseArrayOutput) ToMediaGraphSinkResponseArrayOutput() MediaGraphSinkResponseArrayOutput {
	return o
}

func (o MediaGraphSinkResponseArrayOutput) ToMediaGraphSinkResponseArrayOutputWithContext(ctx context.Context) MediaGraphSinkResponseArrayOutput {
	return o
}

func (o MediaGraphSinkResponseArrayOutput) Index(i pulumi.IntInput) MediaGraphSinkResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MediaGraphSinkResponse {
		return vs[0].([]MediaGraphSinkResponse)[vs[1].(int)]
	}).(MediaGraphSinkResponseOutput)
}

// Media source
type MediaGraphSource struct {
	// Source name
	Name string `pulumi:"name"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// MediaGraphSourceInput is an input type that accepts MediaGraphSourceArgs and MediaGraphSourceOutput values.
// You can construct a concrete instance of `MediaGraphSourceInput` via:
//
//          MediaGraphSourceArgs{...}
type MediaGraphSourceInput interface {
	pulumi.Input

	ToMediaGraphSourceOutput() MediaGraphSourceOutput
	ToMediaGraphSourceOutputWithContext(context.Context) MediaGraphSourceOutput
}

// Media source
type MediaGraphSourceArgs struct {
	// Source name
	Name pulumi.StringInput `pulumi:"name"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (MediaGraphSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaGraphSource)(nil)).Elem()
}

func (i MediaGraphSourceArgs) ToMediaGraphSourceOutput() MediaGraphSourceOutput {
	return i.ToMediaGraphSourceOutputWithContext(context.Background())
}

func (i MediaGraphSourceArgs) ToMediaGraphSourceOutputWithContext(ctx context.Context) MediaGraphSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaGraphSourceOutput)
}

// MediaGraphSourceArrayInput is an input type that accepts MediaGraphSourceArray and MediaGraphSourceArrayOutput values.
// You can construct a concrete instance of `MediaGraphSourceArrayInput` via:
//
//          MediaGraphSourceArray{ MediaGraphSourceArgs{...} }
type MediaGraphSourceArrayInput interface {
	pulumi.Input

	ToMediaGraphSourceArrayOutput() MediaGraphSourceArrayOutput
	ToMediaGraphSourceArrayOutputWithContext(context.Context) MediaGraphSourceArrayOutput
}

type MediaGraphSourceArray []MediaGraphSourceInput

func (MediaGraphSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MediaGraphSource)(nil)).Elem()
}

func (i MediaGraphSourceArray) ToMediaGraphSourceArrayOutput() MediaGraphSourceArrayOutput {
	return i.ToMediaGraphSourceArrayOutputWithContext(context.Background())
}

func (i MediaGraphSourceArray) ToMediaGraphSourceArrayOutputWithContext(ctx context.Context) MediaGraphSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaGraphSourceArrayOutput)
}

// Media source
type MediaGraphSourceOutput struct{ *pulumi.OutputState }

func (MediaGraphSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaGraphSource)(nil)).Elem()
}

func (o MediaGraphSourceOutput) ToMediaGraphSourceOutput() MediaGraphSourceOutput {
	return o
}

func (o MediaGraphSourceOutput) ToMediaGraphSourceOutputWithContext(ctx context.Context) MediaGraphSourceOutput {
	return o
}

// Source name
func (o MediaGraphSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MediaGraphSource) string { return v.Name }).(pulumi.StringOutput)
}

// The discriminator for derived types.
func (o MediaGraphSourceOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v MediaGraphSource) string { return v.OdataType }).(pulumi.StringOutput)
}

type MediaGraphSourceArrayOutput struct{ *pulumi.OutputState }

func (MediaGraphSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MediaGraphSource)(nil)).Elem()
}

func (o MediaGraphSourceArrayOutput) ToMediaGraphSourceArrayOutput() MediaGraphSourceArrayOutput {
	return o
}

func (o MediaGraphSourceArrayOutput) ToMediaGraphSourceArrayOutputWithContext(ctx context.Context) MediaGraphSourceArrayOutput {
	return o
}

func (o MediaGraphSourceArrayOutput) Index(i pulumi.IntInput) MediaGraphSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MediaGraphSource {
		return vs[0].([]MediaGraphSource)[vs[1].(int)]
	}).(MediaGraphSourceOutput)
}

// Media source
type MediaGraphSourceResponse struct {
	// Source name
	Name string `pulumi:"name"`
	// The discriminator for derived types.
	OdataType string `pulumi:"odataType"`
}

// MediaGraphSourceResponseInput is an input type that accepts MediaGraphSourceResponseArgs and MediaGraphSourceResponseOutput values.
// You can construct a concrete instance of `MediaGraphSourceResponseInput` via:
//
//          MediaGraphSourceResponseArgs{...}
type MediaGraphSourceResponseInput interface {
	pulumi.Input

	ToMediaGraphSourceResponseOutput() MediaGraphSourceResponseOutput
	ToMediaGraphSourceResponseOutputWithContext(context.Context) MediaGraphSourceResponseOutput
}

// Media source
type MediaGraphSourceResponseArgs struct {
	// Source name
	Name pulumi.StringInput `pulumi:"name"`
	// The discriminator for derived types.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (MediaGraphSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaGraphSourceResponse)(nil)).Elem()
}

func (i MediaGraphSourceResponseArgs) ToMediaGraphSourceResponseOutput() MediaGraphSourceResponseOutput {
	return i.ToMediaGraphSourceResponseOutputWithContext(context.Background())
}

func (i MediaGraphSourceResponseArgs) ToMediaGraphSourceResponseOutputWithContext(ctx context.Context) MediaGraphSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaGraphSourceResponseOutput)
}

// MediaGraphSourceResponseArrayInput is an input type that accepts MediaGraphSourceResponseArray and MediaGraphSourceResponseArrayOutput values.
// You can construct a concrete instance of `MediaGraphSourceResponseArrayInput` via:
//
//          MediaGraphSourceResponseArray{ MediaGraphSourceResponseArgs{...} }
type MediaGraphSourceResponseArrayInput interface {
	pulumi.Input

	ToMediaGraphSourceResponseArrayOutput() MediaGraphSourceResponseArrayOutput
	ToMediaGraphSourceResponseArrayOutputWithContext(context.Context) MediaGraphSourceResponseArrayOutput
}

type MediaGraphSourceResponseArray []MediaGraphSourceResponseInput

func (MediaGraphSourceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MediaGraphSourceResponse)(nil)).Elem()
}

func (i MediaGraphSourceResponseArray) ToMediaGraphSourceResponseArrayOutput() MediaGraphSourceResponseArrayOutput {
	return i.ToMediaGraphSourceResponseArrayOutputWithContext(context.Background())
}

func (i MediaGraphSourceResponseArray) ToMediaGraphSourceResponseArrayOutputWithContext(ctx context.Context) MediaGraphSourceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaGraphSourceResponseArrayOutput)
}

// Media source
type MediaGraphSourceResponseOutput struct{ *pulumi.OutputState }

func (MediaGraphSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaGraphSourceResponse)(nil)).Elem()
}

func (o MediaGraphSourceResponseOutput) ToMediaGraphSourceResponseOutput() MediaGraphSourceResponseOutput {
	return o
}

func (o MediaGraphSourceResponseOutput) ToMediaGraphSourceResponseOutputWithContext(ctx context.Context) MediaGraphSourceResponseOutput {
	return o
}

// Source name
func (o MediaGraphSourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MediaGraphSourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The discriminator for derived types.
func (o MediaGraphSourceResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v MediaGraphSourceResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

type MediaGraphSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (MediaGraphSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MediaGraphSourceResponse)(nil)).Elem()
}

func (o MediaGraphSourceResponseArrayOutput) ToMediaGraphSourceResponseArrayOutput() MediaGraphSourceResponseArrayOutput {
	return o
}

func (o MediaGraphSourceResponseArrayOutput) ToMediaGraphSourceResponseArrayOutputWithContext(ctx context.Context) MediaGraphSourceResponseArrayOutput {
	return o
}

func (o MediaGraphSourceResponseArrayOutput) Index(i pulumi.IntInput) MediaGraphSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MediaGraphSourceResponse {
		return vs[0].([]MediaGraphSourceResponse)[vs[1].(int)]
	}).(MediaGraphSourceResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(MediaGraphSinkOutput{})
	pulumi.RegisterOutputType(MediaGraphSinkArrayOutput{})
	pulumi.RegisterOutputType(MediaGraphSinkResponseOutput{})
	pulumi.RegisterOutputType(MediaGraphSinkResponseArrayOutput{})
	pulumi.RegisterOutputType(MediaGraphSourceOutput{})
	pulumi.RegisterOutputType(MediaGraphSourceArrayOutput{})
	pulumi.RegisterOutputType(MediaGraphSourceResponseOutput{})
	pulumi.RegisterOutputType(MediaGraphSourceResponseArrayOutput{})
}
