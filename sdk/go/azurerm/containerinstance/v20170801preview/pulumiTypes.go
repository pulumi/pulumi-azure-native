// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20170801preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The properties of the Azure File volume. Azure File shares are mounted as volumes.
type AzureFileVolume struct {
	// The flag indicating whether the Azure File shared mounted as a volume is read-only.
	ReadOnly *bool `pulumi:"readOnly"`
	// The name of the Azure File share to be mounted as a volume.
	ShareName string `pulumi:"shareName"`
	// The storage account access key used to access the Azure File share.
	StorageAccountKey *string `pulumi:"storageAccountKey"`
	// The name of the storage account that contains the Azure File share.
	StorageAccountName string `pulumi:"storageAccountName"`
}

// AzureFileVolumeInput is an input type that accepts AzureFileVolumeArgs and AzureFileVolumeOutput values.
// You can construct a concrete instance of `AzureFileVolumeInput` via:
//
//          AzureFileVolumeArgs{...}
type AzureFileVolumeInput interface {
	pulumi.Input

	ToAzureFileVolumeOutput() AzureFileVolumeOutput
	ToAzureFileVolumeOutputWithContext(context.Context) AzureFileVolumeOutput
}

// The properties of the Azure File volume. Azure File shares are mounted as volumes.
type AzureFileVolumeArgs struct {
	// The flag indicating whether the Azure File shared mounted as a volume is read-only.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// The name of the Azure File share to be mounted as a volume.
	ShareName pulumi.StringInput `pulumi:"shareName"`
	// The storage account access key used to access the Azure File share.
	StorageAccountKey pulumi.StringPtrInput `pulumi:"storageAccountKey"`
	// The name of the storage account that contains the Azure File share.
	StorageAccountName pulumi.StringInput `pulumi:"storageAccountName"`
}

func (AzureFileVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileVolume)(nil)).Elem()
}

func (i AzureFileVolumeArgs) ToAzureFileVolumeOutput() AzureFileVolumeOutput {
	return i.ToAzureFileVolumeOutputWithContext(context.Background())
}

func (i AzureFileVolumeArgs) ToAzureFileVolumeOutputWithContext(ctx context.Context) AzureFileVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileVolumeOutput)
}

// The properties of the Azure File volume. Azure File shares are mounted as volumes.
type AzureFileVolumeResponse struct {
	// The flag indicating whether the Azure File shared mounted as a volume is read-only.
	ReadOnly *bool `pulumi:"readOnly"`
	// The name of the Azure File share to be mounted as a volume.
	ShareName string `pulumi:"shareName"`
	// The storage account access key used to access the Azure File share.
	StorageAccountKey *string `pulumi:"storageAccountKey"`
	// The name of the storage account that contains the Azure File share.
	StorageAccountName string `pulumi:"storageAccountName"`
}

// The properties of the Azure File volume. Azure File shares are mounted as volumes.
type AzureFileVolumeResponseOutput struct{ *pulumi.OutputState }

func (AzureFileVolumeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileVolumeResponse)(nil)).Elem()
}

func (o AzureFileVolumeResponseOutput) ToAzureFileVolumeResponseOutput() AzureFileVolumeResponseOutput {
	return o
}

func (o AzureFileVolumeResponseOutput) ToAzureFileVolumeResponseOutputWithContext(ctx context.Context) AzureFileVolumeResponseOutput {
	return o
}

// The flag indicating whether the Azure File shared mounted as a volume is read-only.
func (o AzureFileVolumeResponseOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureFileVolumeResponse) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// The name of the Azure File share to be mounted as a volume.
func (o AzureFileVolumeResponseOutput) ShareName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileVolumeResponse) string { return v.ShareName }).(pulumi.StringOutput)
}

// The storage account access key used to access the Azure File share.
func (o AzureFileVolumeResponseOutput) StorageAccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileVolumeResponse) *string { return v.StorageAccountKey }).(pulumi.StringPtrOutput)
}

// The name of the storage account that contains the Azure File share.
func (o AzureFileVolumeResponseOutput) StorageAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileVolumeResponse) string { return v.StorageAccountName }).(pulumi.StringOutput)
}

// A container instance.
type Container struct {
	// The commands to execute within the container instance in exec form.
	Command []string `pulumi:"command"`
	// The environment variables to set in the container instance.
	EnvironmentVariables []EnvironmentVariable `pulumi:"environmentVariables"`
	// The name of the image used to create the container instance.
	Image string `pulumi:"image"`
	// The user-provided name of the container instance.
	Name string `pulumi:"name"`
	// The exposed ports on the container instance.
	Ports []ContainerPort `pulumi:"ports"`
	// The resource requirements of the container instance.
	Resources ResourceRequirements `pulumi:"resources"`
	// The volume mounts available to the container instance.
	VolumeMounts []VolumeMount `pulumi:"volumeMounts"`
}

// ContainerInput is an input type that accepts ContainerArgs and ContainerOutput values.
// You can construct a concrete instance of `ContainerInput` via:
//
//          ContainerArgs{...}
type ContainerInput interface {
	pulumi.Input

	ToContainerOutput() ContainerOutput
	ToContainerOutputWithContext(context.Context) ContainerOutput
}

// A container instance.
type ContainerArgs struct {
	// The commands to execute within the container instance in exec form.
	Command pulumi.StringArrayInput `pulumi:"command"`
	// The environment variables to set in the container instance.
	EnvironmentVariables EnvironmentVariableArrayInput `pulumi:"environmentVariables"`
	// The name of the image used to create the container instance.
	Image pulumi.StringInput `pulumi:"image"`
	// The user-provided name of the container instance.
	Name pulumi.StringInput `pulumi:"name"`
	// The exposed ports on the container instance.
	Ports ContainerPortArrayInput `pulumi:"ports"`
	// The resource requirements of the container instance.
	Resources ResourceRequirementsInput `pulumi:"resources"`
	// The volume mounts available to the container instance.
	VolumeMounts VolumeMountArrayInput `pulumi:"volumeMounts"`
}

func (ContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Container)(nil)).Elem()
}

func (i ContainerArgs) ToContainerOutput() ContainerOutput {
	return i.ToContainerOutputWithContext(context.Background())
}

func (i ContainerArgs) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerOutput)
}

// ContainerArrayInput is an input type that accepts ContainerArray and ContainerArrayOutput values.
// You can construct a concrete instance of `ContainerArrayInput` via:
//
//          ContainerArray{ ContainerArgs{...} }
type ContainerArrayInput interface {
	pulumi.Input

	ToContainerArrayOutput() ContainerArrayOutput
	ToContainerArrayOutputWithContext(context.Context) ContainerArrayOutput
}

type ContainerArray []ContainerInput

func (ContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Container)(nil)).Elem()
}

func (i ContainerArray) ToContainerArrayOutput() ContainerArrayOutput {
	return i.ToContainerArrayOutputWithContext(context.Background())
}

func (i ContainerArray) ToContainerArrayOutputWithContext(ctx context.Context) ContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerArrayOutput)
}

// A container instance event.
type ContainerEventResponse struct {
	// The count of the event.
	Count *int `pulumi:"count"`
	// The date-time of the earliest logged event.
	FirstTimestamp *string `pulumi:"firstTimestamp"`
	// The date-time of the latest logged event.
	LastTimestamp *string `pulumi:"lastTimestamp"`
	// The event message.
	Message *string `pulumi:"message"`
	// The event type.
	Type *string `pulumi:"type"`
}

// A container instance event.
type ContainerEventResponseOutput struct{ *pulumi.OutputState }

func (ContainerEventResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerEventResponse)(nil)).Elem()
}

func (o ContainerEventResponseOutput) ToContainerEventResponseOutput() ContainerEventResponseOutput {
	return o
}

func (o ContainerEventResponseOutput) ToContainerEventResponseOutputWithContext(ctx context.Context) ContainerEventResponseOutput {
	return o
}

// The count of the event.
func (o ContainerEventResponseOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerEventResponse) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// The date-time of the earliest logged event.
func (o ContainerEventResponseOutput) FirstTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerEventResponse) *string { return v.FirstTimestamp }).(pulumi.StringPtrOutput)
}

// The date-time of the latest logged event.
func (o ContainerEventResponseOutput) LastTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerEventResponse) *string { return v.LastTimestamp }).(pulumi.StringPtrOutput)
}

// The event message.
func (o ContainerEventResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerEventResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The event type.
func (o ContainerEventResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerEventResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ContainerEventResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerEventResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerEventResponse)(nil)).Elem()
}

func (o ContainerEventResponseArrayOutput) ToContainerEventResponseArrayOutput() ContainerEventResponseArrayOutput {
	return o
}

func (o ContainerEventResponseArrayOutput) ToContainerEventResponseArrayOutputWithContext(ctx context.Context) ContainerEventResponseArrayOutput {
	return o
}

func (o ContainerEventResponseArrayOutput) Index(i pulumi.IntInput) ContainerEventResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerEventResponse {
		return vs[0].([]ContainerEventResponse)[vs[1].(int)]
	}).(ContainerEventResponseOutput)
}

// The port exposed on the container instance.
type ContainerPort struct {
	// The port number exposed within the container group.
	Port int `pulumi:"port"`
}

// ContainerPortInput is an input type that accepts ContainerPortArgs and ContainerPortOutput values.
// You can construct a concrete instance of `ContainerPortInput` via:
//
//          ContainerPortArgs{...}
type ContainerPortInput interface {
	pulumi.Input

	ToContainerPortOutput() ContainerPortOutput
	ToContainerPortOutputWithContext(context.Context) ContainerPortOutput
}

// The port exposed on the container instance.
type ContainerPortArgs struct {
	// The port number exposed within the container group.
	Port pulumi.IntInput `pulumi:"port"`
}

func (ContainerPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPort)(nil)).Elem()
}

func (i ContainerPortArgs) ToContainerPortOutput() ContainerPortOutput {
	return i.ToContainerPortOutputWithContext(context.Background())
}

func (i ContainerPortArgs) ToContainerPortOutputWithContext(ctx context.Context) ContainerPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPortOutput)
}

// ContainerPortArrayInput is an input type that accepts ContainerPortArray and ContainerPortArrayOutput values.
// You can construct a concrete instance of `ContainerPortArrayInput` via:
//
//          ContainerPortArray{ ContainerPortArgs{...} }
type ContainerPortArrayInput interface {
	pulumi.Input

	ToContainerPortArrayOutput() ContainerPortArrayOutput
	ToContainerPortArrayOutputWithContext(context.Context) ContainerPortArrayOutput
}

type ContainerPortArray []ContainerPortInput

func (ContainerPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPort)(nil)).Elem()
}

func (i ContainerPortArray) ToContainerPortArrayOutput() ContainerPortArrayOutput {
	return i.ToContainerPortArrayOutputWithContext(context.Background())
}

func (i ContainerPortArray) ToContainerPortArrayOutputWithContext(ctx context.Context) ContainerPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPortArrayOutput)
}

// The port exposed on the container instance.
type ContainerPortResponse struct {
	// The port number exposed within the container group.
	Port int `pulumi:"port"`
}

// The port exposed on the container instance.
type ContainerPortResponseOutput struct{ *pulumi.OutputState }

func (ContainerPortResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPortResponse)(nil)).Elem()
}

func (o ContainerPortResponseOutput) ToContainerPortResponseOutput() ContainerPortResponseOutput {
	return o
}

func (o ContainerPortResponseOutput) ToContainerPortResponseOutputWithContext(ctx context.Context) ContainerPortResponseOutput {
	return o
}

// The port number exposed within the container group.
func (o ContainerPortResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerPortResponse) int { return v.Port }).(pulumi.IntOutput)
}

type ContainerPortResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerPortResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPortResponse)(nil)).Elem()
}

func (o ContainerPortResponseArrayOutput) ToContainerPortResponseArrayOutput() ContainerPortResponseArrayOutput {
	return o
}

func (o ContainerPortResponseArrayOutput) ToContainerPortResponseArrayOutputWithContext(ctx context.Context) ContainerPortResponseArrayOutput {
	return o
}

func (o ContainerPortResponseArrayOutput) Index(i pulumi.IntInput) ContainerPortResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerPortResponse {
		return vs[0].([]ContainerPortResponse)[vs[1].(int)]
	}).(ContainerPortResponseOutput)
}

// The instance view of the container instance. Only valid in response.
type ContainerPropertiesResponseInstanceView struct {
	// Current container instance state.
	CurrentState *ContainerStateResponse `pulumi:"currentState"`
	// The events of the container instance.
	Events []ContainerEventResponse `pulumi:"events"`
	// Previous container instance state.
	PreviousState *ContainerStateResponse `pulumi:"previousState"`
	// The number of times that the container instance has been restarted.
	RestartCount *int `pulumi:"restartCount"`
}

// The instance view of the container instance. Only valid in response.
type ContainerPropertiesResponseInstanceViewOutput struct{ *pulumi.OutputState }

func (ContainerPropertiesResponseInstanceViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPropertiesResponseInstanceView)(nil)).Elem()
}

func (o ContainerPropertiesResponseInstanceViewOutput) ToContainerPropertiesResponseInstanceViewOutput() ContainerPropertiesResponseInstanceViewOutput {
	return o
}

func (o ContainerPropertiesResponseInstanceViewOutput) ToContainerPropertiesResponseInstanceViewOutputWithContext(ctx context.Context) ContainerPropertiesResponseInstanceViewOutput {
	return o
}

// Current container instance state.
func (o ContainerPropertiesResponseInstanceViewOutput) CurrentState() ContainerStateResponsePtrOutput {
	return o.ApplyT(func(v ContainerPropertiesResponseInstanceView) *ContainerStateResponse { return v.CurrentState }).(ContainerStateResponsePtrOutput)
}

// The events of the container instance.
func (o ContainerPropertiesResponseInstanceViewOutput) Events() ContainerEventResponseArrayOutput {
	return o.ApplyT(func(v ContainerPropertiesResponseInstanceView) []ContainerEventResponse { return v.Events }).(ContainerEventResponseArrayOutput)
}

// Previous container instance state.
func (o ContainerPropertiesResponseInstanceViewOutput) PreviousState() ContainerStateResponsePtrOutput {
	return o.ApplyT(func(v ContainerPropertiesResponseInstanceView) *ContainerStateResponse { return v.PreviousState }).(ContainerStateResponsePtrOutput)
}

// The number of times that the container instance has been restarted.
func (o ContainerPropertiesResponseInstanceViewOutput) RestartCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerPropertiesResponseInstanceView) *int { return v.RestartCount }).(pulumi.IntPtrOutput)
}

// A container instance.
type ContainerResponse struct {
	// The commands to execute within the container instance in exec form.
	Command []string `pulumi:"command"`
	// The environment variables to set in the container instance.
	EnvironmentVariables []EnvironmentVariableResponse `pulumi:"environmentVariables"`
	// The name of the image used to create the container instance.
	Image string `pulumi:"image"`
	// The instance view of the container instance. Only valid in response.
	InstanceView ContainerPropertiesResponseInstanceView `pulumi:"instanceView"`
	// The user-provided name of the container instance.
	Name string `pulumi:"name"`
	// The exposed ports on the container instance.
	Ports []ContainerPortResponse `pulumi:"ports"`
	// The resource requirements of the container instance.
	Resources ResourceRequirementsResponse `pulumi:"resources"`
	// The volume mounts available to the container instance.
	VolumeMounts []VolumeMountResponse `pulumi:"volumeMounts"`
}

// A container instance.
type ContainerResponseOutput struct{ *pulumi.OutputState }

func (ContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResponse)(nil)).Elem()
}

func (o ContainerResponseOutput) ToContainerResponseOutput() ContainerResponseOutput {
	return o
}

func (o ContainerResponseOutput) ToContainerResponseOutputWithContext(ctx context.Context) ContainerResponseOutput {
	return o
}

// The commands to execute within the container instance in exec form.
func (o ContainerResponseOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// The environment variables to set in the container instance.
func (o ContainerResponseOutput) EnvironmentVariables() EnvironmentVariableResponseArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []EnvironmentVariableResponse { return v.EnvironmentVariables }).(EnvironmentVariableResponseArrayOutput)
}

// The name of the image used to create the container instance.
func (o ContainerResponseOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerResponse) string { return v.Image }).(pulumi.StringOutput)
}

// The instance view of the container instance. Only valid in response.
func (o ContainerResponseOutput) InstanceView() ContainerPropertiesResponseInstanceViewOutput {
	return o.ApplyT(func(v ContainerResponse) ContainerPropertiesResponseInstanceView { return v.InstanceView }).(ContainerPropertiesResponseInstanceViewOutput)
}

// The user-provided name of the container instance.
func (o ContainerResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The exposed ports on the container instance.
func (o ContainerResponseOutput) Ports() ContainerPortResponseArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []ContainerPortResponse { return v.Ports }).(ContainerPortResponseArrayOutput)
}

// The resource requirements of the container instance.
func (o ContainerResponseOutput) Resources() ResourceRequirementsResponseOutput {
	return o.ApplyT(func(v ContainerResponse) ResourceRequirementsResponse { return v.Resources }).(ResourceRequirementsResponseOutput)
}

// The volume mounts available to the container instance.
func (o ContainerResponseOutput) VolumeMounts() VolumeMountResponseArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []VolumeMountResponse { return v.VolumeMounts }).(VolumeMountResponseArrayOutput)
}

type ContainerResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerResponse)(nil)).Elem()
}

func (o ContainerResponseArrayOutput) ToContainerResponseArrayOutput() ContainerResponseArrayOutput {
	return o
}

func (o ContainerResponseArrayOutput) ToContainerResponseArrayOutputWithContext(ctx context.Context) ContainerResponseArrayOutput {
	return o
}

func (o ContainerResponseArrayOutput) Index(i pulumi.IntInput) ContainerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerResponse {
		return vs[0].([]ContainerResponse)[vs[1].(int)]
	}).(ContainerResponseOutput)
}

// The container instance state.
type ContainerStateResponse struct {
	// The human-readable status of the container instance state.
	DetailStatus *string `pulumi:"detailStatus"`
	// The container instance exit codes correspond to those from the `docker run` command.
	ExitCode *int `pulumi:"exitCode"`
	// The date-time when the container instance state finished.
	FinishTime *string `pulumi:"finishTime"`
	// The date-time when the container instance state started.
	StartTime *string `pulumi:"startTime"`
	// The state of the container instance.
	State *string `pulumi:"state"`
}

// The container instance state.
type ContainerStateResponseOutput struct{ *pulumi.OutputState }

func (ContainerStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStateResponse)(nil)).Elem()
}

func (o ContainerStateResponseOutput) ToContainerStateResponseOutput() ContainerStateResponseOutput {
	return o
}

func (o ContainerStateResponseOutput) ToContainerStateResponseOutputWithContext(ctx context.Context) ContainerStateResponseOutput {
	return o
}

func (o ContainerStateResponseOutput) ToContainerStateResponsePtrOutput() ContainerStateResponsePtrOutput {
	return o.ToContainerStateResponsePtrOutputWithContext(context.Background())
}

func (o ContainerStateResponseOutput) ToContainerStateResponsePtrOutputWithContext(ctx context.Context) ContainerStateResponsePtrOutput {
	return o.ApplyT(func(v ContainerStateResponse) *ContainerStateResponse {
		return &v
	}).(ContainerStateResponsePtrOutput)
}

// The human-readable status of the container instance state.
func (o ContainerStateResponseOutput) DetailStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateResponse) *string { return v.DetailStatus }).(pulumi.StringPtrOutput)
}

// The container instance exit codes correspond to those from the `docker run` command.
func (o ContainerStateResponseOutput) ExitCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerStateResponse) *int { return v.ExitCode }).(pulumi.IntPtrOutput)
}

// The date-time when the container instance state finished.
func (o ContainerStateResponseOutput) FinishTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateResponse) *string { return v.FinishTime }).(pulumi.StringPtrOutput)
}

// The date-time when the container instance state started.
func (o ContainerStateResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The state of the container instance.
func (o ContainerStateResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerStateResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

type ContainerStateResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerStateResponse)(nil)).Elem()
}

func (o ContainerStateResponsePtrOutput) ToContainerStateResponsePtrOutput() ContainerStateResponsePtrOutput {
	return o
}

func (o ContainerStateResponsePtrOutput) ToContainerStateResponsePtrOutputWithContext(ctx context.Context) ContainerStateResponsePtrOutput {
	return o
}

func (o ContainerStateResponsePtrOutput) Elem() ContainerStateResponseOutput {
	return o.ApplyT(func(v *ContainerStateResponse) ContainerStateResponse { return *v }).(ContainerStateResponseOutput)
}

// The human-readable status of the container instance state.
func (o ContainerStateResponsePtrOutput) DetailStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.DetailStatus
	}).(pulumi.StringPtrOutput)
}

// The container instance exit codes correspond to those from the `docker run` command.
func (o ContainerStateResponsePtrOutput) ExitCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerStateResponse) *int {
		if v == nil {
			return nil
		}
		return v.ExitCode
	}).(pulumi.IntPtrOutput)
}

// The date-time when the container instance state finished.
func (o ContainerStateResponsePtrOutput) FinishTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.FinishTime
	}).(pulumi.StringPtrOutput)
}

// The date-time when the container instance state started.
func (o ContainerStateResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The state of the container instance.
func (o ContainerStateResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// The environment variable to set within the container instance.
type EnvironmentVariable struct {
	// The name of the environment variable.
	Name string `pulumi:"name"`
	// The value of the environment variable.
	Value string `pulumi:"value"`
}

// EnvironmentVariableInput is an input type that accepts EnvironmentVariableArgs and EnvironmentVariableOutput values.
// You can construct a concrete instance of `EnvironmentVariableInput` via:
//
//          EnvironmentVariableArgs{...}
type EnvironmentVariableInput interface {
	pulumi.Input

	ToEnvironmentVariableOutput() EnvironmentVariableOutput
	ToEnvironmentVariableOutputWithContext(context.Context) EnvironmentVariableOutput
}

// The environment variable to set within the container instance.
type EnvironmentVariableArgs struct {
	// The name of the environment variable.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the environment variable.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EnvironmentVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariable)(nil)).Elem()
}

func (i EnvironmentVariableArgs) ToEnvironmentVariableOutput() EnvironmentVariableOutput {
	return i.ToEnvironmentVariableOutputWithContext(context.Background())
}

func (i EnvironmentVariableArgs) ToEnvironmentVariableOutputWithContext(ctx context.Context) EnvironmentVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableOutput)
}

// EnvironmentVariableArrayInput is an input type that accepts EnvironmentVariableArray and EnvironmentVariableArrayOutput values.
// You can construct a concrete instance of `EnvironmentVariableArrayInput` via:
//
//          EnvironmentVariableArray{ EnvironmentVariableArgs{...} }
type EnvironmentVariableArrayInput interface {
	pulumi.Input

	ToEnvironmentVariableArrayOutput() EnvironmentVariableArrayOutput
	ToEnvironmentVariableArrayOutputWithContext(context.Context) EnvironmentVariableArrayOutput
}

type EnvironmentVariableArray []EnvironmentVariableInput

func (EnvironmentVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariable)(nil)).Elem()
}

func (i EnvironmentVariableArray) ToEnvironmentVariableArrayOutput() EnvironmentVariableArrayOutput {
	return i.ToEnvironmentVariableArrayOutputWithContext(context.Background())
}

func (i EnvironmentVariableArray) ToEnvironmentVariableArrayOutputWithContext(ctx context.Context) EnvironmentVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableArrayOutput)
}

// The environment variable to set within the container instance.
type EnvironmentVariableResponse struct {
	// The name of the environment variable.
	Name string `pulumi:"name"`
	// The value of the environment variable.
	Value string `pulumi:"value"`
}

// The environment variable to set within the container instance.
type EnvironmentVariableResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableResponse)(nil)).Elem()
}

func (o EnvironmentVariableResponseOutput) ToEnvironmentVariableResponseOutput() EnvironmentVariableResponseOutput {
	return o
}

func (o EnvironmentVariableResponseOutput) ToEnvironmentVariableResponseOutputWithContext(ctx context.Context) EnvironmentVariableResponseOutput {
	return o
}

// The name of the environment variable.
func (o EnvironmentVariableResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the environment variable.
func (o EnvironmentVariableResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableResponse) string { return v.Value }).(pulumi.StringOutput)
}

type EnvironmentVariableResponseArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariableResponse)(nil)).Elem()
}

func (o EnvironmentVariableResponseArrayOutput) ToEnvironmentVariableResponseArrayOutput() EnvironmentVariableResponseArrayOutput {
	return o
}

func (o EnvironmentVariableResponseArrayOutput) ToEnvironmentVariableResponseArrayOutputWithContext(ctx context.Context) EnvironmentVariableResponseArrayOutput {
	return o
}

func (o EnvironmentVariableResponseArrayOutput) Index(i pulumi.IntInput) EnvironmentVariableResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentVariableResponse {
		return vs[0].([]EnvironmentVariableResponse)[vs[1].(int)]
	}).(EnvironmentVariableResponseOutput)
}

// Image registry credential.
type ImageRegistryCredential struct {
	// The password for the private registry.
	Password *string `pulumi:"password"`
	// The Docker image registry server without a protocol such as "http" and "https".
	Server string `pulumi:"server"`
	// The username for the private registry.
	Username string `pulumi:"username"`
}

// ImageRegistryCredentialInput is an input type that accepts ImageRegistryCredentialArgs and ImageRegistryCredentialOutput values.
// You can construct a concrete instance of `ImageRegistryCredentialInput` via:
//
//          ImageRegistryCredentialArgs{...}
type ImageRegistryCredentialInput interface {
	pulumi.Input

	ToImageRegistryCredentialOutput() ImageRegistryCredentialOutput
	ToImageRegistryCredentialOutputWithContext(context.Context) ImageRegistryCredentialOutput
}

// Image registry credential.
type ImageRegistryCredentialArgs struct {
	// The password for the private registry.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The Docker image registry server without a protocol such as "http" and "https".
	Server pulumi.StringInput `pulumi:"server"`
	// The username for the private registry.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ImageRegistryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRegistryCredential)(nil)).Elem()
}

func (i ImageRegistryCredentialArgs) ToImageRegistryCredentialOutput() ImageRegistryCredentialOutput {
	return i.ToImageRegistryCredentialOutputWithContext(context.Background())
}

func (i ImageRegistryCredentialArgs) ToImageRegistryCredentialOutputWithContext(ctx context.Context) ImageRegistryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRegistryCredentialOutput)
}

// ImageRegistryCredentialArrayInput is an input type that accepts ImageRegistryCredentialArray and ImageRegistryCredentialArrayOutput values.
// You can construct a concrete instance of `ImageRegistryCredentialArrayInput` via:
//
//          ImageRegistryCredentialArray{ ImageRegistryCredentialArgs{...} }
type ImageRegistryCredentialArrayInput interface {
	pulumi.Input

	ToImageRegistryCredentialArrayOutput() ImageRegistryCredentialArrayOutput
	ToImageRegistryCredentialArrayOutputWithContext(context.Context) ImageRegistryCredentialArrayOutput
}

type ImageRegistryCredentialArray []ImageRegistryCredentialInput

func (ImageRegistryCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRegistryCredential)(nil)).Elem()
}

func (i ImageRegistryCredentialArray) ToImageRegistryCredentialArrayOutput() ImageRegistryCredentialArrayOutput {
	return i.ToImageRegistryCredentialArrayOutputWithContext(context.Background())
}

func (i ImageRegistryCredentialArray) ToImageRegistryCredentialArrayOutputWithContext(ctx context.Context) ImageRegistryCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRegistryCredentialArrayOutput)
}

// Image registry credential.
type ImageRegistryCredentialResponse struct {
	// The password for the private registry.
	Password *string `pulumi:"password"`
	// The Docker image registry server without a protocol such as "http" and "https".
	Server string `pulumi:"server"`
	// The username for the private registry.
	Username string `pulumi:"username"`
}

// Image registry credential.
type ImageRegistryCredentialResponseOutput struct{ *pulumi.OutputState }

func (ImageRegistryCredentialResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRegistryCredentialResponse)(nil)).Elem()
}

func (o ImageRegistryCredentialResponseOutput) ToImageRegistryCredentialResponseOutput() ImageRegistryCredentialResponseOutput {
	return o
}

func (o ImageRegistryCredentialResponseOutput) ToImageRegistryCredentialResponseOutputWithContext(ctx context.Context) ImageRegistryCredentialResponseOutput {
	return o
}

// The password for the private registry.
func (o ImageRegistryCredentialResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRegistryCredentialResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The Docker image registry server without a protocol such as "http" and "https".
func (o ImageRegistryCredentialResponseOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRegistryCredentialResponse) string { return v.Server }).(pulumi.StringOutput)
}

// The username for the private registry.
func (o ImageRegistryCredentialResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRegistryCredentialResponse) string { return v.Username }).(pulumi.StringOutput)
}

type ImageRegistryCredentialResponseArrayOutput struct{ *pulumi.OutputState }

func (ImageRegistryCredentialResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRegistryCredentialResponse)(nil)).Elem()
}

func (o ImageRegistryCredentialResponseArrayOutput) ToImageRegistryCredentialResponseArrayOutput() ImageRegistryCredentialResponseArrayOutput {
	return o
}

func (o ImageRegistryCredentialResponseArrayOutput) ToImageRegistryCredentialResponseArrayOutputWithContext(ctx context.Context) ImageRegistryCredentialResponseArrayOutput {
	return o
}

func (o ImageRegistryCredentialResponseArrayOutput) Index(i pulumi.IntInput) ImageRegistryCredentialResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageRegistryCredentialResponse {
		return vs[0].([]ImageRegistryCredentialResponse)[vs[1].(int)]
	}).(ImageRegistryCredentialResponseOutput)
}

// IP address for the container group.
type IpAddress struct {
	// The IP exposed to the public internet.
	Ip *string `pulumi:"ip"`
	// The list of ports exposed on the container group.
	Ports []Port `pulumi:"ports"`
	// Specifies if the IP is exposed to the public internet.
	Type string `pulumi:"type"`
}

// IpAddressInput is an input type that accepts IpAddressArgs and IpAddressOutput values.
// You can construct a concrete instance of `IpAddressInput` via:
//
//          IpAddressArgs{...}
type IpAddressInput interface {
	pulumi.Input

	ToIpAddressOutput() IpAddressOutput
	ToIpAddressOutputWithContext(context.Context) IpAddressOutput
}

// IP address for the container group.
type IpAddressArgs struct {
	// The IP exposed to the public internet.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// The list of ports exposed on the container group.
	Ports PortArrayInput `pulumi:"ports"`
	// Specifies if the IP is exposed to the public internet.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IpAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpAddress)(nil)).Elem()
}

func (i IpAddressArgs) ToIpAddressOutput() IpAddressOutput {
	return i.ToIpAddressOutputWithContext(context.Background())
}

func (i IpAddressArgs) ToIpAddressOutputWithContext(ctx context.Context) IpAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressOutput)
}

func (i IpAddressArgs) ToIpAddressPtrOutput() IpAddressPtrOutput {
	return i.ToIpAddressPtrOutputWithContext(context.Background())
}

func (i IpAddressArgs) ToIpAddressPtrOutputWithContext(ctx context.Context) IpAddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressOutput).ToIpAddressPtrOutputWithContext(ctx)
}

// IpAddressPtrInput is an input type that accepts IpAddressArgs, IpAddressPtr and IpAddressPtrOutput values.
// You can construct a concrete instance of `IpAddressPtrInput` via:
//
//          IpAddressArgs{...}
//
//  or:
//
//          nil
type IpAddressPtrInput interface {
	pulumi.Input

	ToIpAddressPtrOutput() IpAddressPtrOutput
	ToIpAddressPtrOutputWithContext(context.Context) IpAddressPtrOutput
}

type ipAddressPtrType IpAddressArgs

func IpAddressPtr(v *IpAddressArgs) IpAddressPtrInput {
	return (*ipAddressPtrType)(v)
}

func (*ipAddressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IpAddress)(nil)).Elem()
}

func (i *ipAddressPtrType) ToIpAddressPtrOutput() IpAddressPtrOutput {
	return i.ToIpAddressPtrOutputWithContext(context.Background())
}

func (i *ipAddressPtrType) ToIpAddressPtrOutputWithContext(ctx context.Context) IpAddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressPtrOutput)
}

// IP address for the container group.
type IpAddressResponse struct {
	// The IP exposed to the public internet.
	Ip *string `pulumi:"ip"`
	// The list of ports exposed on the container group.
	Ports []PortResponse `pulumi:"ports"`
	// Specifies if the IP is exposed to the public internet.
	Type string `pulumi:"type"`
}

// IP address for the container group.
type IpAddressResponseOutput struct{ *pulumi.OutputState }

func (IpAddressResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpAddressResponse)(nil)).Elem()
}

func (o IpAddressResponseOutput) ToIpAddressResponseOutput() IpAddressResponseOutput {
	return o
}

func (o IpAddressResponseOutput) ToIpAddressResponseOutputWithContext(ctx context.Context) IpAddressResponseOutput {
	return o
}

func (o IpAddressResponseOutput) ToIpAddressResponsePtrOutput() IpAddressResponsePtrOutput {
	return o.ToIpAddressResponsePtrOutputWithContext(context.Background())
}

func (o IpAddressResponseOutput) ToIpAddressResponsePtrOutputWithContext(ctx context.Context) IpAddressResponsePtrOutput {
	return o.ApplyT(func(v IpAddressResponse) *IpAddressResponse {
		return &v
	}).(IpAddressResponsePtrOutput)
}

// The IP exposed to the public internet.
func (o IpAddressResponseOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpAddressResponse) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// The list of ports exposed on the container group.
func (o IpAddressResponseOutput) Ports() PortResponseArrayOutput {
	return o.ApplyT(func(v IpAddressResponse) []PortResponse { return v.Ports }).(PortResponseArrayOutput)
}

// Specifies if the IP is exposed to the public internet.
func (o IpAddressResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IpAddressResponse) string { return v.Type }).(pulumi.StringOutput)
}

type IpAddressResponsePtrOutput struct{ *pulumi.OutputState }

func (IpAddressResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpAddressResponse)(nil)).Elem()
}

func (o IpAddressResponsePtrOutput) ToIpAddressResponsePtrOutput() IpAddressResponsePtrOutput {
	return o
}

func (o IpAddressResponsePtrOutput) ToIpAddressResponsePtrOutputWithContext(ctx context.Context) IpAddressResponsePtrOutput {
	return o
}

func (o IpAddressResponsePtrOutput) Elem() IpAddressResponseOutput {
	return o.ApplyT(func(v *IpAddressResponse) IpAddressResponse { return *v }).(IpAddressResponseOutput)
}

// The IP exposed to the public internet.
func (o IpAddressResponsePtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddressResponse) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

// The list of ports exposed on the container group.
func (o IpAddressResponsePtrOutput) Ports() PortResponseArrayOutput {
	return o.ApplyT(func(v *IpAddressResponse) []PortResponse {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(PortResponseArrayOutput)
}

// Specifies if the IP is exposed to the public internet.
func (o IpAddressResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddressResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The port exposed on the container group.
type Port struct {
	// The port number.
	Port int `pulumi:"port"`
	// The protocol associated with the port.
	Protocol *string `pulumi:"protocol"`
}

// PortInput is an input type that accepts PortArgs and PortOutput values.
// You can construct a concrete instance of `PortInput` via:
//
//          PortArgs{...}
type PortInput interface {
	pulumi.Input

	ToPortOutput() PortOutput
	ToPortOutputWithContext(context.Context) PortOutput
}

// The port exposed on the container group.
type PortArgs struct {
	// The port number.
	Port pulumi.IntInput `pulumi:"port"`
	// The protocol associated with the port.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (PortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Port)(nil)).Elem()
}

func (i PortArgs) ToPortOutput() PortOutput {
	return i.ToPortOutputWithContext(context.Background())
}

func (i PortArgs) ToPortOutputWithContext(ctx context.Context) PortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortOutput)
}

// PortArrayInput is an input type that accepts PortArray and PortArrayOutput values.
// You can construct a concrete instance of `PortArrayInput` via:
//
//          PortArray{ PortArgs{...} }
type PortArrayInput interface {
	pulumi.Input

	ToPortArrayOutput() PortArrayOutput
	ToPortArrayOutputWithContext(context.Context) PortArrayOutput
}

type PortArray []PortInput

func (PortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Port)(nil)).Elem()
}

func (i PortArray) ToPortArrayOutput() PortArrayOutput {
	return i.ToPortArrayOutputWithContext(context.Background())
}

func (i PortArray) ToPortArrayOutputWithContext(ctx context.Context) PortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortArrayOutput)
}

// The port exposed on the container group.
type PortResponse struct {
	// The port number.
	Port int `pulumi:"port"`
	// The protocol associated with the port.
	Protocol *string `pulumi:"protocol"`
}

// The port exposed on the container group.
type PortResponseOutput struct{ *pulumi.OutputState }

func (PortResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortResponse)(nil)).Elem()
}

func (o PortResponseOutput) ToPortResponseOutput() PortResponseOutput {
	return o
}

func (o PortResponseOutput) ToPortResponseOutputWithContext(ctx context.Context) PortResponseOutput {
	return o
}

// The port number.
func (o PortResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v PortResponse) int { return v.Port }).(pulumi.IntOutput)
}

// The protocol associated with the port.
func (o PortResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type PortResponseArrayOutput struct{ *pulumi.OutputState }

func (PortResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortResponse)(nil)).Elem()
}

func (o PortResponseArrayOutput) ToPortResponseArrayOutput() PortResponseArrayOutput {
	return o
}

func (o PortResponseArrayOutput) ToPortResponseArrayOutputWithContext(ctx context.Context) PortResponseArrayOutput {
	return o
}

func (o PortResponseArrayOutput) Index(i pulumi.IntInput) PortResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PortResponse {
		return vs[0].([]PortResponse)[vs[1].(int)]
	}).(PortResponseOutput)
}

// The resource limits.
type ResourceLimits struct {
	// The CPU limit of this container instance.
	Cpu *float64 `pulumi:"cpu"`
	// The memory limit in GB of this container instance.
	MemoryInGB *float64 `pulumi:"memoryInGB"`
}

// ResourceLimitsInput is an input type that accepts ResourceLimitsArgs and ResourceLimitsOutput values.
// You can construct a concrete instance of `ResourceLimitsInput` via:
//
//          ResourceLimitsArgs{...}
type ResourceLimitsInput interface {
	pulumi.Input

	ToResourceLimitsOutput() ResourceLimitsOutput
	ToResourceLimitsOutputWithContext(context.Context) ResourceLimitsOutput
}

// The resource limits.
type ResourceLimitsArgs struct {
	// The CPU limit of this container instance.
	Cpu pulumi.Float64PtrInput `pulumi:"cpu"`
	// The memory limit in GB of this container instance.
	MemoryInGB pulumi.Float64PtrInput `pulumi:"memoryInGB"`
}

func (ResourceLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimits)(nil)).Elem()
}

func (i ResourceLimitsArgs) ToResourceLimitsOutput() ResourceLimitsOutput {
	return i.ToResourceLimitsOutputWithContext(context.Background())
}

func (i ResourceLimitsArgs) ToResourceLimitsOutputWithContext(ctx context.Context) ResourceLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitsOutput)
}

func (i ResourceLimitsArgs) ToResourceLimitsPtrOutput() ResourceLimitsPtrOutput {
	return i.ToResourceLimitsPtrOutputWithContext(context.Background())
}

func (i ResourceLimitsArgs) ToResourceLimitsPtrOutputWithContext(ctx context.Context) ResourceLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitsOutput).ToResourceLimitsPtrOutputWithContext(ctx)
}

// ResourceLimitsPtrInput is an input type that accepts ResourceLimitsArgs, ResourceLimitsPtr and ResourceLimitsPtrOutput values.
// You can construct a concrete instance of `ResourceLimitsPtrInput` via:
//
//          ResourceLimitsArgs{...}
//
//  or:
//
//          nil
type ResourceLimitsPtrInput interface {
	pulumi.Input

	ToResourceLimitsPtrOutput() ResourceLimitsPtrOutput
	ToResourceLimitsPtrOutputWithContext(context.Context) ResourceLimitsPtrOutput
}

type resourceLimitsPtrType ResourceLimitsArgs

func ResourceLimitsPtr(v *ResourceLimitsArgs) ResourceLimitsPtrInput {
	return (*resourceLimitsPtrType)(v)
}

func (*resourceLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLimits)(nil)).Elem()
}

func (i *resourceLimitsPtrType) ToResourceLimitsPtrOutput() ResourceLimitsPtrOutput {
	return i.ToResourceLimitsPtrOutputWithContext(context.Background())
}

func (i *resourceLimitsPtrType) ToResourceLimitsPtrOutputWithContext(ctx context.Context) ResourceLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitsPtrOutput)
}

// The resource limits.
type ResourceLimitsResponse struct {
	// The CPU limit of this container instance.
	Cpu *float64 `pulumi:"cpu"`
	// The memory limit in GB of this container instance.
	MemoryInGB *float64 `pulumi:"memoryInGB"`
}

// The resource limits.
type ResourceLimitsResponseOutput struct{ *pulumi.OutputState }

func (ResourceLimitsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimitsResponse)(nil)).Elem()
}

func (o ResourceLimitsResponseOutput) ToResourceLimitsResponseOutput() ResourceLimitsResponseOutput {
	return o
}

func (o ResourceLimitsResponseOutput) ToResourceLimitsResponseOutputWithContext(ctx context.Context) ResourceLimitsResponseOutput {
	return o
}

func (o ResourceLimitsResponseOutput) ToResourceLimitsResponsePtrOutput() ResourceLimitsResponsePtrOutput {
	return o.ToResourceLimitsResponsePtrOutputWithContext(context.Background())
}

func (o ResourceLimitsResponseOutput) ToResourceLimitsResponsePtrOutputWithContext(ctx context.Context) ResourceLimitsResponsePtrOutput {
	return o.ApplyT(func(v ResourceLimitsResponse) *ResourceLimitsResponse {
		return &v
	}).(ResourceLimitsResponsePtrOutput)
}

// The CPU limit of this container instance.
func (o ResourceLimitsResponseOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ResourceLimitsResponse) *float64 { return v.Cpu }).(pulumi.Float64PtrOutput)
}

// The memory limit in GB of this container instance.
func (o ResourceLimitsResponseOutput) MemoryInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ResourceLimitsResponse) *float64 { return v.MemoryInGB }).(pulumi.Float64PtrOutput)
}

type ResourceLimitsResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceLimitsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLimitsResponse)(nil)).Elem()
}

func (o ResourceLimitsResponsePtrOutput) ToResourceLimitsResponsePtrOutput() ResourceLimitsResponsePtrOutput {
	return o
}

func (o ResourceLimitsResponsePtrOutput) ToResourceLimitsResponsePtrOutputWithContext(ctx context.Context) ResourceLimitsResponsePtrOutput {
	return o
}

func (o ResourceLimitsResponsePtrOutput) Elem() ResourceLimitsResponseOutput {
	return o.ApplyT(func(v *ResourceLimitsResponse) ResourceLimitsResponse { return *v }).(ResourceLimitsResponseOutput)
}

// The CPU limit of this container instance.
func (o ResourceLimitsResponsePtrOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ResourceLimitsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.Float64PtrOutput)
}

// The memory limit in GB of this container instance.
func (o ResourceLimitsResponsePtrOutput) MemoryInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ResourceLimitsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.MemoryInGB
	}).(pulumi.Float64PtrOutput)
}

// The resource requests.
type ResourceRequests struct {
	// The CPU request of this container instance.
	Cpu float64 `pulumi:"cpu"`
	// The memory request in GB of this container instance.
	MemoryInGB float64 `pulumi:"memoryInGB"`
}

// ResourceRequestsInput is an input type that accepts ResourceRequestsArgs and ResourceRequestsOutput values.
// You can construct a concrete instance of `ResourceRequestsInput` via:
//
//          ResourceRequestsArgs{...}
type ResourceRequestsInput interface {
	pulumi.Input

	ToResourceRequestsOutput() ResourceRequestsOutput
	ToResourceRequestsOutputWithContext(context.Context) ResourceRequestsOutput
}

// The resource requests.
type ResourceRequestsArgs struct {
	// The CPU request of this container instance.
	Cpu pulumi.Float64Input `pulumi:"cpu"`
	// The memory request in GB of this container instance.
	MemoryInGB pulumi.Float64Input `pulumi:"memoryInGB"`
}

func (ResourceRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequests)(nil)).Elem()
}

func (i ResourceRequestsArgs) ToResourceRequestsOutput() ResourceRequestsOutput {
	return i.ToResourceRequestsOutputWithContext(context.Background())
}

func (i ResourceRequestsArgs) ToResourceRequestsOutputWithContext(ctx context.Context) ResourceRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequestsOutput)
}

// The resource requests.
type ResourceRequestsResponse struct {
	// The CPU request of this container instance.
	Cpu float64 `pulumi:"cpu"`
	// The memory request in GB of this container instance.
	MemoryInGB float64 `pulumi:"memoryInGB"`
}

// The resource requests.
type ResourceRequestsResponseOutput struct{ *pulumi.OutputState }

func (ResourceRequestsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequestsResponse)(nil)).Elem()
}

func (o ResourceRequestsResponseOutput) ToResourceRequestsResponseOutput() ResourceRequestsResponseOutput {
	return o
}

func (o ResourceRequestsResponseOutput) ToResourceRequestsResponseOutputWithContext(ctx context.Context) ResourceRequestsResponseOutput {
	return o
}

// The CPU request of this container instance.
func (o ResourceRequestsResponseOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v ResourceRequestsResponse) float64 { return v.Cpu }).(pulumi.Float64Output)
}

// The memory request in GB of this container instance.
func (o ResourceRequestsResponseOutput) MemoryInGB() pulumi.Float64Output {
	return o.ApplyT(func(v ResourceRequestsResponse) float64 { return v.MemoryInGB }).(pulumi.Float64Output)
}

// The resource requirements.
type ResourceRequirements struct {
	// The resource limits of this container instance.
	Limits *ResourceLimits `pulumi:"limits"`
	// The resource requests of this container instance.
	Requests ResourceRequests `pulumi:"requests"`
}

// ResourceRequirementsInput is an input type that accepts ResourceRequirementsArgs and ResourceRequirementsOutput values.
// You can construct a concrete instance of `ResourceRequirementsInput` via:
//
//          ResourceRequirementsArgs{...}
type ResourceRequirementsInput interface {
	pulumi.Input

	ToResourceRequirementsOutput() ResourceRequirementsOutput
	ToResourceRequirementsOutputWithContext(context.Context) ResourceRequirementsOutput
}

// The resource requirements.
type ResourceRequirementsArgs struct {
	// The resource limits of this container instance.
	Limits ResourceLimitsPtrInput `pulumi:"limits"`
	// The resource requests of this container instance.
	Requests ResourceRequestsInput `pulumi:"requests"`
}

func (ResourceRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirements)(nil)).Elem()
}

func (i ResourceRequirementsArgs) ToResourceRequirementsOutput() ResourceRequirementsOutput {
	return i.ToResourceRequirementsOutputWithContext(context.Background())
}

func (i ResourceRequirementsArgs) ToResourceRequirementsOutputWithContext(ctx context.Context) ResourceRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequirementsOutput)
}

// The resource requirements.
type ResourceRequirementsResponse struct {
	// The resource limits of this container instance.
	Limits *ResourceLimitsResponse `pulumi:"limits"`
	// The resource requests of this container instance.
	Requests ResourceRequestsResponse `pulumi:"requests"`
}

// The resource requirements.
type ResourceRequirementsResponseOutput struct{ *pulumi.OutputState }

func (ResourceRequirementsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirementsResponse)(nil)).Elem()
}

func (o ResourceRequirementsResponseOutput) ToResourceRequirementsResponseOutput() ResourceRequirementsResponseOutput {
	return o
}

func (o ResourceRequirementsResponseOutput) ToResourceRequirementsResponseOutputWithContext(ctx context.Context) ResourceRequirementsResponseOutput {
	return o
}

// The resource limits of this container instance.
func (o ResourceRequirementsResponseOutput) Limits() ResourceLimitsResponsePtrOutput {
	return o.ApplyT(func(v ResourceRequirementsResponse) *ResourceLimitsResponse { return v.Limits }).(ResourceLimitsResponsePtrOutput)
}

// The resource requests of this container instance.
func (o ResourceRequirementsResponseOutput) Requests() ResourceRequestsResponseOutput {
	return o.ApplyT(func(v ResourceRequirementsResponse) ResourceRequestsResponse { return v.Requests }).(ResourceRequestsResponseOutput)
}

// The properties of the volume.
type Volume struct {
	// The name of the Azure File volume.
	AzureFile AzureFileVolume `pulumi:"azureFile"`
	// The name of the volume.
	Name string `pulumi:"name"`
}

// VolumeInput is an input type that accepts VolumeArgs and VolumeOutput values.
// You can construct a concrete instance of `VolumeInput` via:
//
//          VolumeArgs{...}
type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(context.Context) VolumeOutput
}

// The properties of the volume.
type VolumeArgs struct {
	// The name of the Azure File volume.
	AzureFile AzureFileVolumeInput `pulumi:"azureFile"`
	// The name of the volume.
	Name pulumi.StringInput `pulumi:"name"`
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil)).Elem()
}

func (i VolumeArgs) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i VolumeArgs) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//          VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Volume)(nil)).Elem()
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

// The properties of the volume mount.
type VolumeMount struct {
	// The path within the container where the volume should be mounted. Must not contain colon (:).
	MountPath string `pulumi:"mountPath"`
	// The name of the volume mount.
	Name string `pulumi:"name"`
	// The flag indicating whether the volume mount is read-only.
	ReadOnly *bool `pulumi:"readOnly"`
}

// VolumeMountInput is an input type that accepts VolumeMountArgs and VolumeMountOutput values.
// You can construct a concrete instance of `VolumeMountInput` via:
//
//          VolumeMountArgs{...}
type VolumeMountInput interface {
	pulumi.Input

	ToVolumeMountOutput() VolumeMountOutput
	ToVolumeMountOutputWithContext(context.Context) VolumeMountOutput
}

// The properties of the volume mount.
type VolumeMountArgs struct {
	// The path within the container where the volume should be mounted. Must not contain colon (:).
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// The name of the volume mount.
	Name pulumi.StringInput `pulumi:"name"`
	// The flag indicating whether the volume mount is read-only.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (VolumeMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMount)(nil)).Elem()
}

func (i VolumeMountArgs) ToVolumeMountOutput() VolumeMountOutput {
	return i.ToVolumeMountOutputWithContext(context.Background())
}

func (i VolumeMountArgs) ToVolumeMountOutputWithContext(ctx context.Context) VolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountOutput)
}

// VolumeMountArrayInput is an input type that accepts VolumeMountArray and VolumeMountArrayOutput values.
// You can construct a concrete instance of `VolumeMountArrayInput` via:
//
//          VolumeMountArray{ VolumeMountArgs{...} }
type VolumeMountArrayInput interface {
	pulumi.Input

	ToVolumeMountArrayOutput() VolumeMountArrayOutput
	ToVolumeMountArrayOutputWithContext(context.Context) VolumeMountArrayOutput
}

type VolumeMountArray []VolumeMountInput

func (VolumeMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMount)(nil)).Elem()
}

func (i VolumeMountArray) ToVolumeMountArrayOutput() VolumeMountArrayOutput {
	return i.ToVolumeMountArrayOutputWithContext(context.Background())
}

func (i VolumeMountArray) ToVolumeMountArrayOutputWithContext(ctx context.Context) VolumeMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountArrayOutput)
}

// The properties of the volume mount.
type VolumeMountResponse struct {
	// The path within the container where the volume should be mounted. Must not contain colon (:).
	MountPath string `pulumi:"mountPath"`
	// The name of the volume mount.
	Name string `pulumi:"name"`
	// The flag indicating whether the volume mount is read-only.
	ReadOnly *bool `pulumi:"readOnly"`
}

// The properties of the volume mount.
type VolumeMountResponseOutput struct{ *pulumi.OutputState }

func (VolumeMountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMountResponse)(nil)).Elem()
}

func (o VolumeMountResponseOutput) ToVolumeMountResponseOutput() VolumeMountResponseOutput {
	return o
}

func (o VolumeMountResponseOutput) ToVolumeMountResponseOutputWithContext(ctx context.Context) VolumeMountResponseOutput {
	return o
}

// The path within the container where the volume should be mounted. Must not contain colon (:).
func (o VolumeMountResponseOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeMountResponse) string { return v.MountPath }).(pulumi.StringOutput)
}

// The name of the volume mount.
func (o VolumeMountResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeMountResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The flag indicating whether the volume mount is read-only.
func (o VolumeMountResponseOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeMountResponse) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type VolumeMountResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeMountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMountResponse)(nil)).Elem()
}

func (o VolumeMountResponseArrayOutput) ToVolumeMountResponseArrayOutput() VolumeMountResponseArrayOutput {
	return o
}

func (o VolumeMountResponseArrayOutput) ToVolumeMountResponseArrayOutputWithContext(ctx context.Context) VolumeMountResponseArrayOutput {
	return o
}

func (o VolumeMountResponseArrayOutput) Index(i pulumi.IntInput) VolumeMountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeMountResponse {
		return vs[0].([]VolumeMountResponse)[vs[1].(int)]
	}).(VolumeMountResponseOutput)
}

// The properties of the volume.
type VolumeResponse struct {
	// The name of the Azure File volume.
	AzureFile AzureFileVolumeResponse `pulumi:"azureFile"`
	// The name of the volume.
	Name string `pulumi:"name"`
}

// The properties of the volume.
type VolumeResponseOutput struct{ *pulumi.OutputState }

func (VolumeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeResponse)(nil)).Elem()
}

func (o VolumeResponseOutput) ToVolumeResponseOutput() VolumeResponseOutput {
	return o
}

func (o VolumeResponseOutput) ToVolumeResponseOutputWithContext(ctx context.Context) VolumeResponseOutput {
	return o
}

// The name of the Azure File volume.
func (o VolumeResponseOutput) AzureFile() AzureFileVolumeResponseOutput {
	return o.ApplyT(func(v VolumeResponse) AzureFileVolumeResponse { return v.AzureFile }).(AzureFileVolumeResponseOutput)
}

// The name of the volume.
func (o VolumeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.Name }).(pulumi.StringOutput)
}

type VolumeResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeResponse)(nil)).Elem()
}

func (o VolumeResponseArrayOutput) ToVolumeResponseArrayOutput() VolumeResponseArrayOutput {
	return o
}

func (o VolumeResponseArrayOutput) ToVolumeResponseArrayOutputWithContext(ctx context.Context) VolumeResponseArrayOutput {
	return o
}

func (o VolumeResponseArrayOutput) Index(i pulumi.IntInput) VolumeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeResponse {
		return vs[0].([]VolumeResponse)[vs[1].(int)]
	}).(VolumeResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AzureFileVolumeOutput{})
	pulumi.RegisterOutputType(AzureFileVolumeResponseOutput{})
	pulumi.RegisterOutputType(ContainerOutput{})
	pulumi.RegisterOutputType(ContainerArrayOutput{})
	pulumi.RegisterOutputType(ContainerEventResponseOutput{})
	pulumi.RegisterOutputType(ContainerEventResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerPortOutput{})
	pulumi.RegisterOutputType(ContainerPortArrayOutput{})
	pulumi.RegisterOutputType(ContainerPortResponseOutput{})
	pulumi.RegisterOutputType(ContainerPortResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerPropertiesResponseInstanceViewOutput{})
	pulumi.RegisterOutputType(ContainerResponseOutput{})
	pulumi.RegisterOutputType(ContainerResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerStateResponseOutput{})
	pulumi.RegisterOutputType(ContainerStateResponsePtrOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableResponseArrayOutput{})
	pulumi.RegisterOutputType(ImageRegistryCredentialOutput{})
	pulumi.RegisterOutputType(ImageRegistryCredentialArrayOutput{})
	pulumi.RegisterOutputType(ImageRegistryCredentialResponseOutput{})
	pulumi.RegisterOutputType(ImageRegistryCredentialResponseArrayOutput{})
	pulumi.RegisterOutputType(IpAddressOutput{})
	pulumi.RegisterOutputType(IpAddressPtrOutput{})
	pulumi.RegisterOutputType(IpAddressResponseOutput{})
	pulumi.RegisterOutputType(IpAddressResponsePtrOutput{})
	pulumi.RegisterOutputType(PortOutput{})
	pulumi.RegisterOutputType(PortArrayOutput{})
	pulumi.RegisterOutputType(PortResponseOutput{})
	pulumi.RegisterOutputType(PortResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceLimitsOutput{})
	pulumi.RegisterOutputType(ResourceLimitsPtrOutput{})
	pulumi.RegisterOutputType(ResourceLimitsResponseOutput{})
	pulumi.RegisterOutputType(ResourceLimitsResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceRequestsOutput{})
	pulumi.RegisterOutputType(ResourceRequestsResponseOutput{})
	pulumi.RegisterOutputType(ResourceRequirementsOutput{})
	pulumi.RegisterOutputType(ResourceRequirementsResponseOutput{})
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeMountOutput{})
	pulumi.RegisterOutputType(VolumeMountArrayOutput{})
	pulumi.RegisterOutputType(VolumeMountResponseOutput{})
	pulumi.RegisterOutputType(VolumeMountResponseArrayOutput{})
	pulumi.RegisterOutputType(VolumeResponseOutput{})
	pulumi.RegisterOutputType(VolumeResponseArrayOutput{})
}
