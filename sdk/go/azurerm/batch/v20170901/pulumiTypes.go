// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20170901

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ApplicationPackageReference struct {
	Id string `pulumi:"id"`
	// If this is omitted, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences. If you are calling the REST API directly, the HTTP status code is 409.
	Version *string `pulumi:"version"`
}

// ApplicationPackageReferenceInput is an input type that accepts ApplicationPackageReferenceArgs and ApplicationPackageReferenceOutput values.
// You can construct a concrete instance of `ApplicationPackageReferenceInput` via:
//
//          ApplicationPackageReferenceArgs{...}
type ApplicationPackageReferenceInput interface {
	pulumi.Input

	ToApplicationPackageReferenceOutput() ApplicationPackageReferenceOutput
	ToApplicationPackageReferenceOutputWithContext(context.Context) ApplicationPackageReferenceOutput
}

type ApplicationPackageReferenceArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
	// If this is omitted, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences. If you are calling the REST API directly, the HTTP status code is 409.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ApplicationPackageReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationPackageReference)(nil)).Elem()
}

func (i ApplicationPackageReferenceArgs) ToApplicationPackageReferenceOutput() ApplicationPackageReferenceOutput {
	return i.ToApplicationPackageReferenceOutputWithContext(context.Background())
}

func (i ApplicationPackageReferenceArgs) ToApplicationPackageReferenceOutputWithContext(ctx context.Context) ApplicationPackageReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPackageReferenceOutput)
}

// ApplicationPackageReferenceArrayInput is an input type that accepts ApplicationPackageReferenceArray and ApplicationPackageReferenceArrayOutput values.
// You can construct a concrete instance of `ApplicationPackageReferenceArrayInput` via:
//
//          ApplicationPackageReferenceArray{ ApplicationPackageReferenceArgs{...} }
type ApplicationPackageReferenceArrayInput interface {
	pulumi.Input

	ToApplicationPackageReferenceArrayOutput() ApplicationPackageReferenceArrayOutput
	ToApplicationPackageReferenceArrayOutputWithContext(context.Context) ApplicationPackageReferenceArrayOutput
}

type ApplicationPackageReferenceArray []ApplicationPackageReferenceInput

func (ApplicationPackageReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationPackageReference)(nil)).Elem()
}

func (i ApplicationPackageReferenceArray) ToApplicationPackageReferenceArrayOutput() ApplicationPackageReferenceArrayOutput {
	return i.ToApplicationPackageReferenceArrayOutputWithContext(context.Background())
}

func (i ApplicationPackageReferenceArray) ToApplicationPackageReferenceArrayOutputWithContext(ctx context.Context) ApplicationPackageReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPackageReferenceArrayOutput)
}

type ApplicationPackageReferenceResponse struct {
	Id string `pulumi:"id"`
	// If this is omitted, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences. If you are calling the REST API directly, the HTTP status code is 409.
	Version *string `pulumi:"version"`
}

type ApplicationPackageReferenceResponseOutput struct{ *pulumi.OutputState }

func (ApplicationPackageReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationPackageReferenceResponse)(nil)).Elem()
}

func (o ApplicationPackageReferenceResponseOutput) ToApplicationPackageReferenceResponseOutput() ApplicationPackageReferenceResponseOutput {
	return o
}

func (o ApplicationPackageReferenceResponseOutput) ToApplicationPackageReferenceResponseOutputWithContext(ctx context.Context) ApplicationPackageReferenceResponseOutput {
	return o
}

func (o ApplicationPackageReferenceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationPackageReferenceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// If this is omitted, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences. If you are calling the REST API directly, the HTTP status code is 409.
func (o ApplicationPackageReferenceResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationPackageReferenceResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ApplicationPackageReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (ApplicationPackageReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationPackageReferenceResponse)(nil)).Elem()
}

func (o ApplicationPackageReferenceResponseArrayOutput) ToApplicationPackageReferenceResponseArrayOutput() ApplicationPackageReferenceResponseArrayOutput {
	return o
}

func (o ApplicationPackageReferenceResponseArrayOutput) ToApplicationPackageReferenceResponseArrayOutputWithContext(ctx context.Context) ApplicationPackageReferenceResponseArrayOutput {
	return o
}

func (o ApplicationPackageReferenceResponseArrayOutput) Index(i pulumi.IntInput) ApplicationPackageReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationPackageReferenceResponse {
		return vs[0].([]ApplicationPackageReferenceResponse)[vs[1].(int)]
	}).(ApplicationPackageReferenceResponseOutput)
}

// An application package which represents a particular version of an application.
type ApplicationPackageResponse struct {
	// The format of the application package, if the package is active.
	Format string `pulumi:"format"`
	// The ID of the application.
	Id string `pulumi:"id"`
	// The time at which the package was last activated, if the package is active.
	LastActivationTime string `pulumi:"lastActivationTime"`
	// The current state of the application package.
	State string `pulumi:"state"`
	// The URL for the application package in Azure Storage.
	StorageUrl string `pulumi:"storageUrl"`
	// The UTC time at which the Azure Storage URL will expire.
	StorageUrlExpiry string `pulumi:"storageUrlExpiry"`
	// The version of the application package.
	Version string `pulumi:"version"`
}

// An application package which represents a particular version of an application.
type ApplicationPackageResponseOutput struct{ *pulumi.OutputState }

func (ApplicationPackageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationPackageResponse)(nil)).Elem()
}

func (o ApplicationPackageResponseOutput) ToApplicationPackageResponseOutput() ApplicationPackageResponseOutput {
	return o
}

func (o ApplicationPackageResponseOutput) ToApplicationPackageResponseOutputWithContext(ctx context.Context) ApplicationPackageResponseOutput {
	return o
}

// The format of the application package, if the package is active.
func (o ApplicationPackageResponseOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationPackageResponse) string { return v.Format }).(pulumi.StringOutput)
}

// The ID of the application.
func (o ApplicationPackageResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationPackageResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The time at which the package was last activated, if the package is active.
func (o ApplicationPackageResponseOutput) LastActivationTime() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationPackageResponse) string { return v.LastActivationTime }).(pulumi.StringOutput)
}

// The current state of the application package.
func (o ApplicationPackageResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationPackageResponse) string { return v.State }).(pulumi.StringOutput)
}

// The URL for the application package in Azure Storage.
func (o ApplicationPackageResponseOutput) StorageUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationPackageResponse) string { return v.StorageUrl }).(pulumi.StringOutput)
}

// The UTC time at which the Azure Storage URL will expire.
func (o ApplicationPackageResponseOutput) StorageUrlExpiry() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationPackageResponse) string { return v.StorageUrlExpiry }).(pulumi.StringOutput)
}

// The version of the application package.
func (o ApplicationPackageResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationPackageResponse) string { return v.Version }).(pulumi.StringOutput)
}

type ApplicationPackageResponseArrayOutput struct{ *pulumi.OutputState }

func (ApplicationPackageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationPackageResponse)(nil)).Elem()
}

func (o ApplicationPackageResponseArrayOutput) ToApplicationPackageResponseArrayOutput() ApplicationPackageResponseArrayOutput {
	return o
}

func (o ApplicationPackageResponseArrayOutput) ToApplicationPackageResponseArrayOutputWithContext(ctx context.Context) ApplicationPackageResponseArrayOutput {
	return o
}

func (o ApplicationPackageResponseArrayOutput) Index(i pulumi.IntInput) ApplicationPackageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationPackageResponse {
		return vs[0].([]ApplicationPackageResponse)[vs[1].(int)]
	}).(ApplicationPackageResponseOutput)
}

type AutoScaleRunErrorResponse struct {
	// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
	Code    string                      `pulumi:"code"`
	Details []AutoScaleRunErrorResponse `pulumi:"details"`
	// A message describing the error, intended to be suitable for display in a user interface.
	Message string `pulumi:"message"`
}

type AutoScaleRunErrorResponseOutput struct{ *pulumi.OutputState }

func (AutoScaleRunErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScaleRunErrorResponse)(nil)).Elem()
}

func (o AutoScaleRunErrorResponseOutput) ToAutoScaleRunErrorResponseOutput() AutoScaleRunErrorResponseOutput {
	return o
}

func (o AutoScaleRunErrorResponseOutput) ToAutoScaleRunErrorResponseOutputWithContext(ctx context.Context) AutoScaleRunErrorResponseOutput {
	return o
}

func (o AutoScaleRunErrorResponseOutput) ToAutoScaleRunErrorResponsePtrOutput() AutoScaleRunErrorResponsePtrOutput {
	return o.ToAutoScaleRunErrorResponsePtrOutputWithContext(context.Background())
}

func (o AutoScaleRunErrorResponseOutput) ToAutoScaleRunErrorResponsePtrOutputWithContext(ctx context.Context) AutoScaleRunErrorResponsePtrOutput {
	return o.ApplyT(func(v AutoScaleRunErrorResponse) *AutoScaleRunErrorResponse {
		return &v
	}).(AutoScaleRunErrorResponsePtrOutput)
}

// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
func (o AutoScaleRunErrorResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v AutoScaleRunErrorResponse) string { return v.Code }).(pulumi.StringOutput)
}

func (o AutoScaleRunErrorResponseOutput) Details() AutoScaleRunErrorResponseArrayOutput {
	return o.ApplyT(func(v AutoScaleRunErrorResponse) []AutoScaleRunErrorResponse { return v.Details }).(AutoScaleRunErrorResponseArrayOutput)
}

// A message describing the error, intended to be suitable for display in a user interface.
func (o AutoScaleRunErrorResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v AutoScaleRunErrorResponse) string { return v.Message }).(pulumi.StringOutput)
}

type AutoScaleRunErrorResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoScaleRunErrorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScaleRunErrorResponse)(nil)).Elem()
}

func (o AutoScaleRunErrorResponsePtrOutput) ToAutoScaleRunErrorResponsePtrOutput() AutoScaleRunErrorResponsePtrOutput {
	return o
}

func (o AutoScaleRunErrorResponsePtrOutput) ToAutoScaleRunErrorResponsePtrOutputWithContext(ctx context.Context) AutoScaleRunErrorResponsePtrOutput {
	return o
}

func (o AutoScaleRunErrorResponsePtrOutput) Elem() AutoScaleRunErrorResponseOutput {
	return o.ApplyT(func(v *AutoScaleRunErrorResponse) AutoScaleRunErrorResponse { return *v }).(AutoScaleRunErrorResponseOutput)
}

// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
func (o AutoScaleRunErrorResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoScaleRunErrorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.StringPtrOutput)
}

func (o AutoScaleRunErrorResponsePtrOutput) Details() AutoScaleRunErrorResponseArrayOutput {
	return o.ApplyT(func(v *AutoScaleRunErrorResponse) []AutoScaleRunErrorResponse {
		if v == nil {
			return nil
		}
		return v.Details
	}).(AutoScaleRunErrorResponseArrayOutput)
}

// A message describing the error, intended to be suitable for display in a user interface.
func (o AutoScaleRunErrorResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoScaleRunErrorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

type AutoScaleRunErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (AutoScaleRunErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoScaleRunErrorResponse)(nil)).Elem()
}

func (o AutoScaleRunErrorResponseArrayOutput) ToAutoScaleRunErrorResponseArrayOutput() AutoScaleRunErrorResponseArrayOutput {
	return o
}

func (o AutoScaleRunErrorResponseArrayOutput) ToAutoScaleRunErrorResponseArrayOutputWithContext(ctx context.Context) AutoScaleRunErrorResponseArrayOutput {
	return o
}

func (o AutoScaleRunErrorResponseArrayOutput) Index(i pulumi.IntInput) AutoScaleRunErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutoScaleRunErrorResponse {
		return vs[0].([]AutoScaleRunErrorResponse)[vs[1].(int)]
	}).(AutoScaleRunErrorResponseOutput)
}

type AutoScaleRunResponse struct {
	Error          *AutoScaleRunErrorResponse `pulumi:"error"`
	EvaluationTime string                     `pulumi:"evaluationTime"`
	// Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
	Results *string `pulumi:"results"`
}

type AutoScaleRunResponseOutput struct{ *pulumi.OutputState }

func (AutoScaleRunResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScaleRunResponse)(nil)).Elem()
}

func (o AutoScaleRunResponseOutput) ToAutoScaleRunResponseOutput() AutoScaleRunResponseOutput {
	return o
}

func (o AutoScaleRunResponseOutput) ToAutoScaleRunResponseOutputWithContext(ctx context.Context) AutoScaleRunResponseOutput {
	return o
}

func (o AutoScaleRunResponseOutput) ToAutoScaleRunResponsePtrOutput() AutoScaleRunResponsePtrOutput {
	return o.ToAutoScaleRunResponsePtrOutputWithContext(context.Background())
}

func (o AutoScaleRunResponseOutput) ToAutoScaleRunResponsePtrOutputWithContext(ctx context.Context) AutoScaleRunResponsePtrOutput {
	return o.ApplyT(func(v AutoScaleRunResponse) *AutoScaleRunResponse {
		return &v
	}).(AutoScaleRunResponsePtrOutput)
}
func (o AutoScaleRunResponseOutput) Error() AutoScaleRunErrorResponsePtrOutput {
	return o.ApplyT(func(v AutoScaleRunResponse) *AutoScaleRunErrorResponse { return v.Error }).(AutoScaleRunErrorResponsePtrOutput)
}

func (o AutoScaleRunResponseOutput) EvaluationTime() pulumi.StringOutput {
	return o.ApplyT(func(v AutoScaleRunResponse) string { return v.EvaluationTime }).(pulumi.StringOutput)
}

// Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
func (o AutoScaleRunResponseOutput) Results() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoScaleRunResponse) *string { return v.Results }).(pulumi.StringPtrOutput)
}

type AutoScaleRunResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoScaleRunResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScaleRunResponse)(nil)).Elem()
}

func (o AutoScaleRunResponsePtrOutput) ToAutoScaleRunResponsePtrOutput() AutoScaleRunResponsePtrOutput {
	return o
}

func (o AutoScaleRunResponsePtrOutput) ToAutoScaleRunResponsePtrOutputWithContext(ctx context.Context) AutoScaleRunResponsePtrOutput {
	return o
}

func (o AutoScaleRunResponsePtrOutput) Elem() AutoScaleRunResponseOutput {
	return o.ApplyT(func(v *AutoScaleRunResponse) AutoScaleRunResponse { return *v }).(AutoScaleRunResponseOutput)
}

func (o AutoScaleRunResponsePtrOutput) Error() AutoScaleRunErrorResponsePtrOutput {
	return o.ApplyT(func(v *AutoScaleRunResponse) *AutoScaleRunErrorResponse {
		if v == nil {
			return nil
		}
		return v.Error
	}).(AutoScaleRunErrorResponsePtrOutput)
}

func (o AutoScaleRunResponsePtrOutput) EvaluationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoScaleRunResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EvaluationTime
	}).(pulumi.StringPtrOutput)
}

// Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
func (o AutoScaleRunResponsePtrOutput) Results() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoScaleRunResponse) *string {
		if v == nil {
			return nil
		}
		return v.Results
	}).(pulumi.StringPtrOutput)
}

type AutoScaleSettings struct {
	// If omitted, the default value is 15 minutes (PT15M).
	EvaluationInterval *string `pulumi:"evaluationInterval"`
	Formula            string  `pulumi:"formula"`
}

// AutoScaleSettingsInput is an input type that accepts AutoScaleSettingsArgs and AutoScaleSettingsOutput values.
// You can construct a concrete instance of `AutoScaleSettingsInput` via:
//
//          AutoScaleSettingsArgs{...}
type AutoScaleSettingsInput interface {
	pulumi.Input

	ToAutoScaleSettingsOutput() AutoScaleSettingsOutput
	ToAutoScaleSettingsOutputWithContext(context.Context) AutoScaleSettingsOutput
}

type AutoScaleSettingsArgs struct {
	// If omitted, the default value is 15 minutes (PT15M).
	EvaluationInterval pulumi.StringPtrInput `pulumi:"evaluationInterval"`
	Formula            pulumi.StringInput    `pulumi:"formula"`
}

func (AutoScaleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScaleSettings)(nil)).Elem()
}

func (i AutoScaleSettingsArgs) ToAutoScaleSettingsOutput() AutoScaleSettingsOutput {
	return i.ToAutoScaleSettingsOutputWithContext(context.Background())
}

func (i AutoScaleSettingsArgs) ToAutoScaleSettingsOutputWithContext(ctx context.Context) AutoScaleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleSettingsOutput)
}

func (i AutoScaleSettingsArgs) ToAutoScaleSettingsPtrOutput() AutoScaleSettingsPtrOutput {
	return i.ToAutoScaleSettingsPtrOutputWithContext(context.Background())
}

func (i AutoScaleSettingsArgs) ToAutoScaleSettingsPtrOutputWithContext(ctx context.Context) AutoScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleSettingsOutput).ToAutoScaleSettingsPtrOutputWithContext(ctx)
}

// AutoScaleSettingsPtrInput is an input type that accepts AutoScaleSettingsArgs, AutoScaleSettingsPtr and AutoScaleSettingsPtrOutput values.
// You can construct a concrete instance of `AutoScaleSettingsPtrInput` via:
//
//          AutoScaleSettingsArgs{...}
//
//  or:
//
//          nil
type AutoScaleSettingsPtrInput interface {
	pulumi.Input

	ToAutoScaleSettingsPtrOutput() AutoScaleSettingsPtrOutput
	ToAutoScaleSettingsPtrOutputWithContext(context.Context) AutoScaleSettingsPtrOutput
}

type autoScaleSettingsPtrType AutoScaleSettingsArgs

func AutoScaleSettingsPtr(v *AutoScaleSettingsArgs) AutoScaleSettingsPtrInput {
	return (*autoScaleSettingsPtrType)(v)
}

func (*autoScaleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScaleSettings)(nil)).Elem()
}

func (i *autoScaleSettingsPtrType) ToAutoScaleSettingsPtrOutput() AutoScaleSettingsPtrOutput {
	return i.ToAutoScaleSettingsPtrOutputWithContext(context.Background())
}

func (i *autoScaleSettingsPtrType) ToAutoScaleSettingsPtrOutputWithContext(ctx context.Context) AutoScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScaleSettingsPtrOutput)
}

type AutoScaleSettingsResponse struct {
	// If omitted, the default value is 15 minutes (PT15M).
	EvaluationInterval *string `pulumi:"evaluationInterval"`
	Formula            string  `pulumi:"formula"`
}

type AutoScaleSettingsResponseOutput struct{ *pulumi.OutputState }

func (AutoScaleSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScaleSettingsResponse)(nil)).Elem()
}

func (o AutoScaleSettingsResponseOutput) ToAutoScaleSettingsResponseOutput() AutoScaleSettingsResponseOutput {
	return o
}

func (o AutoScaleSettingsResponseOutput) ToAutoScaleSettingsResponseOutputWithContext(ctx context.Context) AutoScaleSettingsResponseOutput {
	return o
}

func (o AutoScaleSettingsResponseOutput) ToAutoScaleSettingsResponsePtrOutput() AutoScaleSettingsResponsePtrOutput {
	return o.ToAutoScaleSettingsResponsePtrOutputWithContext(context.Background())
}

func (o AutoScaleSettingsResponseOutput) ToAutoScaleSettingsResponsePtrOutputWithContext(ctx context.Context) AutoScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v AutoScaleSettingsResponse) *AutoScaleSettingsResponse {
		return &v
	}).(AutoScaleSettingsResponsePtrOutput)
}

// If omitted, the default value is 15 minutes (PT15M).
func (o AutoScaleSettingsResponseOutput) EvaluationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoScaleSettingsResponse) *string { return v.EvaluationInterval }).(pulumi.StringPtrOutput)
}

func (o AutoScaleSettingsResponseOutput) Formula() pulumi.StringOutput {
	return o.ApplyT(func(v AutoScaleSettingsResponse) string { return v.Formula }).(pulumi.StringOutput)
}

type AutoScaleSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoScaleSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScaleSettingsResponse)(nil)).Elem()
}

func (o AutoScaleSettingsResponsePtrOutput) ToAutoScaleSettingsResponsePtrOutput() AutoScaleSettingsResponsePtrOutput {
	return o
}

func (o AutoScaleSettingsResponsePtrOutput) ToAutoScaleSettingsResponsePtrOutputWithContext(ctx context.Context) AutoScaleSettingsResponsePtrOutput {
	return o
}

func (o AutoScaleSettingsResponsePtrOutput) Elem() AutoScaleSettingsResponseOutput {
	return o.ApplyT(func(v *AutoScaleSettingsResponse) AutoScaleSettingsResponse { return *v }).(AutoScaleSettingsResponseOutput)
}

// If omitted, the default value is 15 minutes (PT15M).
func (o AutoScaleSettingsResponsePtrOutput) EvaluationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoScaleSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.EvaluationInterval
	}).(pulumi.StringPtrOutput)
}

func (o AutoScaleSettingsResponsePtrOutput) Formula() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoScaleSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Formula
	}).(pulumi.StringPtrOutput)
}

// The properties related to the auto-storage account.
type AutoStorageBaseProperties struct {
	// The resource ID of the storage account to be used for auto-storage account.
	StorageAccountId string `pulumi:"storageAccountId"`
}

// AutoStorageBasePropertiesInput is an input type that accepts AutoStorageBasePropertiesArgs and AutoStorageBasePropertiesOutput values.
// You can construct a concrete instance of `AutoStorageBasePropertiesInput` via:
//
//          AutoStorageBasePropertiesArgs{...}
type AutoStorageBasePropertiesInput interface {
	pulumi.Input

	ToAutoStorageBasePropertiesOutput() AutoStorageBasePropertiesOutput
	ToAutoStorageBasePropertiesOutputWithContext(context.Context) AutoStorageBasePropertiesOutput
}

// The properties related to the auto-storage account.
type AutoStorageBasePropertiesArgs struct {
	// The resource ID of the storage account to be used for auto-storage account.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
}

func (AutoStorageBasePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoStorageBaseProperties)(nil)).Elem()
}

func (i AutoStorageBasePropertiesArgs) ToAutoStorageBasePropertiesOutput() AutoStorageBasePropertiesOutput {
	return i.ToAutoStorageBasePropertiesOutputWithContext(context.Background())
}

func (i AutoStorageBasePropertiesArgs) ToAutoStorageBasePropertiesOutputWithContext(ctx context.Context) AutoStorageBasePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoStorageBasePropertiesOutput)
}

func (i AutoStorageBasePropertiesArgs) ToAutoStorageBasePropertiesPtrOutput() AutoStorageBasePropertiesPtrOutput {
	return i.ToAutoStorageBasePropertiesPtrOutputWithContext(context.Background())
}

func (i AutoStorageBasePropertiesArgs) ToAutoStorageBasePropertiesPtrOutputWithContext(ctx context.Context) AutoStorageBasePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoStorageBasePropertiesOutput).ToAutoStorageBasePropertiesPtrOutputWithContext(ctx)
}

// AutoStorageBasePropertiesPtrInput is an input type that accepts AutoStorageBasePropertiesArgs, AutoStorageBasePropertiesPtr and AutoStorageBasePropertiesPtrOutput values.
// You can construct a concrete instance of `AutoStorageBasePropertiesPtrInput` via:
//
//          AutoStorageBasePropertiesArgs{...}
//
//  or:
//
//          nil
type AutoStorageBasePropertiesPtrInput interface {
	pulumi.Input

	ToAutoStorageBasePropertiesPtrOutput() AutoStorageBasePropertiesPtrOutput
	ToAutoStorageBasePropertiesPtrOutputWithContext(context.Context) AutoStorageBasePropertiesPtrOutput
}

type autoStorageBasePropertiesPtrType AutoStorageBasePropertiesArgs

func AutoStorageBasePropertiesPtr(v *AutoStorageBasePropertiesArgs) AutoStorageBasePropertiesPtrInput {
	return (*autoStorageBasePropertiesPtrType)(v)
}

func (*autoStorageBasePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoStorageBaseProperties)(nil)).Elem()
}

func (i *autoStorageBasePropertiesPtrType) ToAutoStorageBasePropertiesPtrOutput() AutoStorageBasePropertiesPtrOutput {
	return i.ToAutoStorageBasePropertiesPtrOutputWithContext(context.Background())
}

func (i *autoStorageBasePropertiesPtrType) ToAutoStorageBasePropertiesPtrOutputWithContext(ctx context.Context) AutoStorageBasePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoStorageBasePropertiesPtrOutput)
}

// Contains information about the auto-storage account associated with a Batch account.
type AutoStoragePropertiesResponse struct {
	// The UTC time at which storage keys were last synchronized with the Batch account.
	LastKeySync string `pulumi:"lastKeySync"`
	// The resource ID of the storage account to be used for auto-storage account.
	StorageAccountId string `pulumi:"storageAccountId"`
}

// Contains information about the auto-storage account associated with a Batch account.
type AutoStoragePropertiesResponseOutput struct{ *pulumi.OutputState }

func (AutoStoragePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoStoragePropertiesResponse)(nil)).Elem()
}

func (o AutoStoragePropertiesResponseOutput) ToAutoStoragePropertiesResponseOutput() AutoStoragePropertiesResponseOutput {
	return o
}

func (o AutoStoragePropertiesResponseOutput) ToAutoStoragePropertiesResponseOutputWithContext(ctx context.Context) AutoStoragePropertiesResponseOutput {
	return o
}

func (o AutoStoragePropertiesResponseOutput) ToAutoStoragePropertiesResponsePtrOutput() AutoStoragePropertiesResponsePtrOutput {
	return o.ToAutoStoragePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o AutoStoragePropertiesResponseOutput) ToAutoStoragePropertiesResponsePtrOutputWithContext(ctx context.Context) AutoStoragePropertiesResponsePtrOutput {
	return o.ApplyT(func(v AutoStoragePropertiesResponse) *AutoStoragePropertiesResponse {
		return &v
	}).(AutoStoragePropertiesResponsePtrOutput)
}

// The UTC time at which storage keys were last synchronized with the Batch account.
func (o AutoStoragePropertiesResponseOutput) LastKeySync() pulumi.StringOutput {
	return o.ApplyT(func(v AutoStoragePropertiesResponse) string { return v.LastKeySync }).(pulumi.StringOutput)
}

// The resource ID of the storage account to be used for auto-storage account.
func (o AutoStoragePropertiesResponseOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v AutoStoragePropertiesResponse) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

type AutoStoragePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoStoragePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoStoragePropertiesResponse)(nil)).Elem()
}

func (o AutoStoragePropertiesResponsePtrOutput) ToAutoStoragePropertiesResponsePtrOutput() AutoStoragePropertiesResponsePtrOutput {
	return o
}

func (o AutoStoragePropertiesResponsePtrOutput) ToAutoStoragePropertiesResponsePtrOutputWithContext(ctx context.Context) AutoStoragePropertiesResponsePtrOutput {
	return o
}

func (o AutoStoragePropertiesResponsePtrOutput) Elem() AutoStoragePropertiesResponseOutput {
	return o.ApplyT(func(v *AutoStoragePropertiesResponse) AutoStoragePropertiesResponse { return *v }).(AutoStoragePropertiesResponseOutput)
}

// The UTC time at which storage keys were last synchronized with the Batch account.
func (o AutoStoragePropertiesResponsePtrOutput) LastKeySync() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoStoragePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastKeySync
	}).(pulumi.StringPtrOutput)
}

// The resource ID of the storage account to be used for auto-storage account.
func (o AutoStoragePropertiesResponsePtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoStoragePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

type AutoUserSpecification struct {
	// nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
	ElevationLevel *string `pulumi:"elevationLevel"`
	// pool - specifies that the task runs as the common auto user account which is created on every node in a pool. task - specifies that the service should create a new user for the task. The default value is task.
	Scope *string `pulumi:"scope"`
}

// AutoUserSpecificationInput is an input type that accepts AutoUserSpecificationArgs and AutoUserSpecificationOutput values.
// You can construct a concrete instance of `AutoUserSpecificationInput` via:
//
//          AutoUserSpecificationArgs{...}
type AutoUserSpecificationInput interface {
	pulumi.Input

	ToAutoUserSpecificationOutput() AutoUserSpecificationOutput
	ToAutoUserSpecificationOutputWithContext(context.Context) AutoUserSpecificationOutput
}

type AutoUserSpecificationArgs struct {
	// nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
	ElevationLevel pulumi.StringPtrInput `pulumi:"elevationLevel"`
	// pool - specifies that the task runs as the common auto user account which is created on every node in a pool. task - specifies that the service should create a new user for the task. The default value is task.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (AutoUserSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoUserSpecification)(nil)).Elem()
}

func (i AutoUserSpecificationArgs) ToAutoUserSpecificationOutput() AutoUserSpecificationOutput {
	return i.ToAutoUserSpecificationOutputWithContext(context.Background())
}

func (i AutoUserSpecificationArgs) ToAutoUserSpecificationOutputWithContext(ctx context.Context) AutoUserSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUserSpecificationOutput)
}

func (i AutoUserSpecificationArgs) ToAutoUserSpecificationPtrOutput() AutoUserSpecificationPtrOutput {
	return i.ToAutoUserSpecificationPtrOutputWithContext(context.Background())
}

func (i AutoUserSpecificationArgs) ToAutoUserSpecificationPtrOutputWithContext(ctx context.Context) AutoUserSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUserSpecificationOutput).ToAutoUserSpecificationPtrOutputWithContext(ctx)
}

// AutoUserSpecificationPtrInput is an input type that accepts AutoUserSpecificationArgs, AutoUserSpecificationPtr and AutoUserSpecificationPtrOutput values.
// You can construct a concrete instance of `AutoUserSpecificationPtrInput` via:
//
//          AutoUserSpecificationArgs{...}
//
//  or:
//
//          nil
type AutoUserSpecificationPtrInput interface {
	pulumi.Input

	ToAutoUserSpecificationPtrOutput() AutoUserSpecificationPtrOutput
	ToAutoUserSpecificationPtrOutputWithContext(context.Context) AutoUserSpecificationPtrOutput
}

type autoUserSpecificationPtrType AutoUserSpecificationArgs

func AutoUserSpecificationPtr(v *AutoUserSpecificationArgs) AutoUserSpecificationPtrInput {
	return (*autoUserSpecificationPtrType)(v)
}

func (*autoUserSpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoUserSpecification)(nil)).Elem()
}

func (i *autoUserSpecificationPtrType) ToAutoUserSpecificationPtrOutput() AutoUserSpecificationPtrOutput {
	return i.ToAutoUserSpecificationPtrOutputWithContext(context.Background())
}

func (i *autoUserSpecificationPtrType) ToAutoUserSpecificationPtrOutputWithContext(ctx context.Context) AutoUserSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUserSpecificationPtrOutput)
}

type AutoUserSpecificationResponse struct {
	// nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
	ElevationLevel *string `pulumi:"elevationLevel"`
	// pool - specifies that the task runs as the common auto user account which is created on every node in a pool. task - specifies that the service should create a new user for the task. The default value is task.
	Scope *string `pulumi:"scope"`
}

type AutoUserSpecificationResponseOutput struct{ *pulumi.OutputState }

func (AutoUserSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoUserSpecificationResponse)(nil)).Elem()
}

func (o AutoUserSpecificationResponseOutput) ToAutoUserSpecificationResponseOutput() AutoUserSpecificationResponseOutput {
	return o
}

func (o AutoUserSpecificationResponseOutput) ToAutoUserSpecificationResponseOutputWithContext(ctx context.Context) AutoUserSpecificationResponseOutput {
	return o
}

func (o AutoUserSpecificationResponseOutput) ToAutoUserSpecificationResponsePtrOutput() AutoUserSpecificationResponsePtrOutput {
	return o.ToAutoUserSpecificationResponsePtrOutputWithContext(context.Background())
}

func (o AutoUserSpecificationResponseOutput) ToAutoUserSpecificationResponsePtrOutputWithContext(ctx context.Context) AutoUserSpecificationResponsePtrOutput {
	return o.ApplyT(func(v AutoUserSpecificationResponse) *AutoUserSpecificationResponse {
		return &v
	}).(AutoUserSpecificationResponsePtrOutput)
}

// nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
func (o AutoUserSpecificationResponseOutput) ElevationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoUserSpecificationResponse) *string { return v.ElevationLevel }).(pulumi.StringPtrOutput)
}

// pool - specifies that the task runs as the common auto user account which is created on every node in a pool. task - specifies that the service should create a new user for the task. The default value is task.
func (o AutoUserSpecificationResponseOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoUserSpecificationResponse) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type AutoUserSpecificationResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoUserSpecificationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoUserSpecificationResponse)(nil)).Elem()
}

func (o AutoUserSpecificationResponsePtrOutput) ToAutoUserSpecificationResponsePtrOutput() AutoUserSpecificationResponsePtrOutput {
	return o
}

func (o AutoUserSpecificationResponsePtrOutput) ToAutoUserSpecificationResponsePtrOutputWithContext(ctx context.Context) AutoUserSpecificationResponsePtrOutput {
	return o
}

func (o AutoUserSpecificationResponsePtrOutput) Elem() AutoUserSpecificationResponseOutput {
	return o.ApplyT(func(v *AutoUserSpecificationResponse) AutoUserSpecificationResponse { return *v }).(AutoUserSpecificationResponseOutput)
}

// nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
func (o AutoUserSpecificationResponsePtrOutput) ElevationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoUserSpecificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ElevationLevel
	}).(pulumi.StringPtrOutput)
}

// pool - specifies that the task runs as the common auto user account which is created on every node in a pool. task - specifies that the service should create a new user for the task. The default value is task.
func (o AutoUserSpecificationResponsePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoUserSpecificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

type CertificateReference struct {
	Id string `pulumi:"id"`
	// The default value is currentUser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
	StoreLocation *string `pulumi:"storeLocation"`
	// This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
	StoreName *string `pulumi:"storeName"`
	// Values are:
	//
	//  starttask - The user account under which the start task is run.
	//  task - The accounts under which job tasks are run.
	//  remoteuser - The accounts under which users remotely access the node.
	//
	//  You can specify more than one visibility in this collection. The default is all accounts.
	Visibility []string `pulumi:"visibility"`
}

// CertificateReferenceInput is an input type that accepts CertificateReferenceArgs and CertificateReferenceOutput values.
// You can construct a concrete instance of `CertificateReferenceInput` via:
//
//          CertificateReferenceArgs{...}
type CertificateReferenceInput interface {
	pulumi.Input

	ToCertificateReferenceOutput() CertificateReferenceOutput
	ToCertificateReferenceOutputWithContext(context.Context) CertificateReferenceOutput
}

type CertificateReferenceArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
	// The default value is currentUser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
	StoreLocation pulumi.StringPtrInput `pulumi:"storeLocation"`
	// This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
	StoreName pulumi.StringPtrInput `pulumi:"storeName"`
	// Values are:
	//
	//  starttask - The user account under which the start task is run.
	//  task - The accounts under which job tasks are run.
	//  remoteuser - The accounts under which users remotely access the node.
	//
	//  You can specify more than one visibility in this collection. The default is all accounts.
	Visibility pulumi.StringArrayInput `pulumi:"visibility"`
}

func (CertificateReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateReference)(nil)).Elem()
}

func (i CertificateReferenceArgs) ToCertificateReferenceOutput() CertificateReferenceOutput {
	return i.ToCertificateReferenceOutputWithContext(context.Background())
}

func (i CertificateReferenceArgs) ToCertificateReferenceOutputWithContext(ctx context.Context) CertificateReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateReferenceOutput)
}

// CertificateReferenceArrayInput is an input type that accepts CertificateReferenceArray and CertificateReferenceArrayOutput values.
// You can construct a concrete instance of `CertificateReferenceArrayInput` via:
//
//          CertificateReferenceArray{ CertificateReferenceArgs{...} }
type CertificateReferenceArrayInput interface {
	pulumi.Input

	ToCertificateReferenceArrayOutput() CertificateReferenceArrayOutput
	ToCertificateReferenceArrayOutputWithContext(context.Context) CertificateReferenceArrayOutput
}

type CertificateReferenceArray []CertificateReferenceInput

func (CertificateReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateReference)(nil)).Elem()
}

func (i CertificateReferenceArray) ToCertificateReferenceArrayOutput() CertificateReferenceArrayOutput {
	return i.ToCertificateReferenceArrayOutputWithContext(context.Background())
}

func (i CertificateReferenceArray) ToCertificateReferenceArrayOutputWithContext(ctx context.Context) CertificateReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateReferenceArrayOutput)
}

type CertificateReferenceResponse struct {
	Id string `pulumi:"id"`
	// The default value is currentUser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
	StoreLocation *string `pulumi:"storeLocation"`
	// This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
	StoreName *string `pulumi:"storeName"`
	// Values are:
	//
	//  starttask - The user account under which the start task is run.
	//  task - The accounts under which job tasks are run.
	//  remoteuser - The accounts under which users remotely access the node.
	//
	//  You can specify more than one visibility in this collection. The default is all accounts.
	Visibility []string `pulumi:"visibility"`
}

type CertificateReferenceResponseOutput struct{ *pulumi.OutputState }

func (CertificateReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateReferenceResponse)(nil)).Elem()
}

func (o CertificateReferenceResponseOutput) ToCertificateReferenceResponseOutput() CertificateReferenceResponseOutput {
	return o
}

func (o CertificateReferenceResponseOutput) ToCertificateReferenceResponseOutputWithContext(ctx context.Context) CertificateReferenceResponseOutput {
	return o
}

func (o CertificateReferenceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateReferenceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The default value is currentUser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
func (o CertificateReferenceResponseOutput) StoreLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateReferenceResponse) *string { return v.StoreLocation }).(pulumi.StringPtrOutput)
}

// This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
func (o CertificateReferenceResponseOutput) StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateReferenceResponse) *string { return v.StoreName }).(pulumi.StringPtrOutput)
}

// Values are:
//
//  starttask - The user account under which the start task is run.
//  task - The accounts under which job tasks are run.
//  remoteuser - The accounts under which users remotely access the node.
//
//  You can specify more than one visibility in this collection. The default is all accounts.
func (o CertificateReferenceResponseOutput) Visibility() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateReferenceResponse) []string { return v.Visibility }).(pulumi.StringArrayOutput)
}

type CertificateReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (CertificateReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateReferenceResponse)(nil)).Elem()
}

func (o CertificateReferenceResponseArrayOutput) ToCertificateReferenceResponseArrayOutput() CertificateReferenceResponseArrayOutput {
	return o
}

func (o CertificateReferenceResponseArrayOutput) ToCertificateReferenceResponseArrayOutputWithContext(ctx context.Context) CertificateReferenceResponseArrayOutput {
	return o
}

func (o CertificateReferenceResponseArrayOutput) Index(i pulumi.IntInput) CertificateReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateReferenceResponse {
		return vs[0].([]CertificateReferenceResponse)[vs[1].(int)]
	}).(CertificateReferenceResponseOutput)
}

type CloudServiceConfiguration struct {
	// This may differ from targetOSVersion if the pool state is Upgrading. In this case some virtual machines may be on the targetOSVersion and some may be on the currentOSVersion during the upgrade process. Once all virtual machines have upgraded, currentOSVersion is updated to be the same as targetOSVersion.
	CurrentOSVersion *string `pulumi:"currentOSVersion"`
	// Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
	OsFamily string `pulumi:"osFamily"`
	// The default value is * which specifies the latest operating system version for the specified OS family.
	TargetOSVersion *string `pulumi:"targetOSVersion"`
}

// CloudServiceConfigurationInput is an input type that accepts CloudServiceConfigurationArgs and CloudServiceConfigurationOutput values.
// You can construct a concrete instance of `CloudServiceConfigurationInput` via:
//
//          CloudServiceConfigurationArgs{...}
type CloudServiceConfigurationInput interface {
	pulumi.Input

	ToCloudServiceConfigurationOutput() CloudServiceConfigurationOutput
	ToCloudServiceConfigurationOutputWithContext(context.Context) CloudServiceConfigurationOutput
}

type CloudServiceConfigurationArgs struct {
	// This may differ from targetOSVersion if the pool state is Upgrading. In this case some virtual machines may be on the targetOSVersion and some may be on the currentOSVersion during the upgrade process. Once all virtual machines have upgraded, currentOSVersion is updated to be the same as targetOSVersion.
	CurrentOSVersion pulumi.StringPtrInput `pulumi:"currentOSVersion"`
	// Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
	OsFamily pulumi.StringInput `pulumi:"osFamily"`
	// The default value is * which specifies the latest operating system version for the specified OS family.
	TargetOSVersion pulumi.StringPtrInput `pulumi:"targetOSVersion"`
}

func (CloudServiceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceConfiguration)(nil)).Elem()
}

func (i CloudServiceConfigurationArgs) ToCloudServiceConfigurationOutput() CloudServiceConfigurationOutput {
	return i.ToCloudServiceConfigurationOutputWithContext(context.Background())
}

func (i CloudServiceConfigurationArgs) ToCloudServiceConfigurationOutputWithContext(ctx context.Context) CloudServiceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceConfigurationOutput)
}

func (i CloudServiceConfigurationArgs) ToCloudServiceConfigurationPtrOutput() CloudServiceConfigurationPtrOutput {
	return i.ToCloudServiceConfigurationPtrOutputWithContext(context.Background())
}

func (i CloudServiceConfigurationArgs) ToCloudServiceConfigurationPtrOutputWithContext(ctx context.Context) CloudServiceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceConfigurationOutput).ToCloudServiceConfigurationPtrOutputWithContext(ctx)
}

// CloudServiceConfigurationPtrInput is an input type that accepts CloudServiceConfigurationArgs, CloudServiceConfigurationPtr and CloudServiceConfigurationPtrOutput values.
// You can construct a concrete instance of `CloudServiceConfigurationPtrInput` via:
//
//          CloudServiceConfigurationArgs{...}
//
//  or:
//
//          nil
type CloudServiceConfigurationPtrInput interface {
	pulumi.Input

	ToCloudServiceConfigurationPtrOutput() CloudServiceConfigurationPtrOutput
	ToCloudServiceConfigurationPtrOutputWithContext(context.Context) CloudServiceConfigurationPtrOutput
}

type cloudServiceConfigurationPtrType CloudServiceConfigurationArgs

func CloudServiceConfigurationPtr(v *CloudServiceConfigurationArgs) CloudServiceConfigurationPtrInput {
	return (*cloudServiceConfigurationPtrType)(v)
}

func (*cloudServiceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceConfiguration)(nil)).Elem()
}

func (i *cloudServiceConfigurationPtrType) ToCloudServiceConfigurationPtrOutput() CloudServiceConfigurationPtrOutput {
	return i.ToCloudServiceConfigurationPtrOutputWithContext(context.Background())
}

func (i *cloudServiceConfigurationPtrType) ToCloudServiceConfigurationPtrOutputWithContext(ctx context.Context) CloudServiceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceConfigurationPtrOutput)
}

type CloudServiceConfigurationResponse struct {
	// This may differ from targetOSVersion if the pool state is Upgrading. In this case some virtual machines may be on the targetOSVersion and some may be on the currentOSVersion during the upgrade process. Once all virtual machines have upgraded, currentOSVersion is updated to be the same as targetOSVersion.
	CurrentOSVersion *string `pulumi:"currentOSVersion"`
	// Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
	OsFamily string `pulumi:"osFamily"`
	// The default value is * which specifies the latest operating system version for the specified OS family.
	TargetOSVersion *string `pulumi:"targetOSVersion"`
}

type CloudServiceConfigurationResponseOutput struct{ *pulumi.OutputState }

func (CloudServiceConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceConfigurationResponse)(nil)).Elem()
}

func (o CloudServiceConfigurationResponseOutput) ToCloudServiceConfigurationResponseOutput() CloudServiceConfigurationResponseOutput {
	return o
}

func (o CloudServiceConfigurationResponseOutput) ToCloudServiceConfigurationResponseOutputWithContext(ctx context.Context) CloudServiceConfigurationResponseOutput {
	return o
}

func (o CloudServiceConfigurationResponseOutput) ToCloudServiceConfigurationResponsePtrOutput() CloudServiceConfigurationResponsePtrOutput {
	return o.ToCloudServiceConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o CloudServiceConfigurationResponseOutput) ToCloudServiceConfigurationResponsePtrOutputWithContext(ctx context.Context) CloudServiceConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CloudServiceConfigurationResponse) *CloudServiceConfigurationResponse {
		return &v
	}).(CloudServiceConfigurationResponsePtrOutput)
}

// This may differ from targetOSVersion if the pool state is Upgrading. In this case some virtual machines may be on the targetOSVersion and some may be on the currentOSVersion during the upgrade process. Once all virtual machines have upgraded, currentOSVersion is updated to be the same as targetOSVersion.
func (o CloudServiceConfigurationResponseOutput) CurrentOSVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceConfigurationResponse) *string { return v.CurrentOSVersion }).(pulumi.StringPtrOutput)
}

// Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
func (o CloudServiceConfigurationResponseOutput) OsFamily() pulumi.StringOutput {
	return o.ApplyT(func(v CloudServiceConfigurationResponse) string { return v.OsFamily }).(pulumi.StringOutput)
}

// The default value is * which specifies the latest operating system version for the specified OS family.
func (o CloudServiceConfigurationResponseOutput) TargetOSVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceConfigurationResponse) *string { return v.TargetOSVersion }).(pulumi.StringPtrOutput)
}

type CloudServiceConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (CloudServiceConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceConfigurationResponse)(nil)).Elem()
}

func (o CloudServiceConfigurationResponsePtrOutput) ToCloudServiceConfigurationResponsePtrOutput() CloudServiceConfigurationResponsePtrOutput {
	return o
}

func (o CloudServiceConfigurationResponsePtrOutput) ToCloudServiceConfigurationResponsePtrOutputWithContext(ctx context.Context) CloudServiceConfigurationResponsePtrOutput {
	return o
}

func (o CloudServiceConfigurationResponsePtrOutput) Elem() CloudServiceConfigurationResponseOutput {
	return o.ApplyT(func(v *CloudServiceConfigurationResponse) CloudServiceConfigurationResponse { return *v }).(CloudServiceConfigurationResponseOutput)
}

// This may differ from targetOSVersion if the pool state is Upgrading. In this case some virtual machines may be on the targetOSVersion and some may be on the currentOSVersion during the upgrade process. Once all virtual machines have upgraded, currentOSVersion is updated to be the same as targetOSVersion.
func (o CloudServiceConfigurationResponsePtrOutput) CurrentOSVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CurrentOSVersion
	}).(pulumi.StringPtrOutput)
}

// Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
func (o CloudServiceConfigurationResponsePtrOutput) OsFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.OsFamily
	}).(pulumi.StringPtrOutput)
}

// The default value is * which specifies the latest operating system version for the specified OS family.
func (o CloudServiceConfigurationResponsePtrOutput) TargetOSVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.TargetOSVersion
	}).(pulumi.StringPtrOutput)
}

// Data Disk settings which will be used by the data disks associated to Compute Nodes in the pool.
type DataDisk struct {
	// Values are:
	//
	//  none - The caching mode for the disk is not enabled.
	//  readOnly - The caching mode for the disk is read only.
	//  readWrite - The caching mode for the disk is read and write.
	//
	//  The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
	Caching    *string `pulumi:"caching"`
	DiskSizeGB int     `pulumi:"diskSizeGB"`
	// The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun.
	Lun int `pulumi:"lun"`
	// If omitted, the default is "Standard_LRS". Values are:
	//
	//  Standard_LRS - The data disk should use standard locally redundant storage.
	//  Premium_LRS - The data disk should use premium locally redundant storage.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// DataDiskInput is an input type that accepts DataDiskArgs and DataDiskOutput values.
// You can construct a concrete instance of `DataDiskInput` via:
//
//          DataDiskArgs{...}
type DataDiskInput interface {
	pulumi.Input

	ToDataDiskOutput() DataDiskOutput
	ToDataDiskOutputWithContext(context.Context) DataDiskOutput
}

// Data Disk settings which will be used by the data disks associated to Compute Nodes in the pool.
type DataDiskArgs struct {
	// Values are:
	//
	//  none - The caching mode for the disk is not enabled.
	//  readOnly - The caching mode for the disk is read only.
	//  readWrite - The caching mode for the disk is read and write.
	//
	//  The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
	Caching    pulumi.StringPtrInput `pulumi:"caching"`
	DiskSizeGB pulumi.IntInput       `pulumi:"diskSizeGB"`
	// The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun.
	Lun pulumi.IntInput `pulumi:"lun"`
	// If omitted, the default is "Standard_LRS". Values are:
	//
	//  Standard_LRS - The data disk should use standard locally redundant storage.
	//  Premium_LRS - The data disk should use premium locally redundant storage.
	StorageAccountType pulumi.StringPtrInput `pulumi:"storageAccountType"`
}

func (DataDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDisk)(nil)).Elem()
}

func (i DataDiskArgs) ToDataDiskOutput() DataDiskOutput {
	return i.ToDataDiskOutputWithContext(context.Background())
}

func (i DataDiskArgs) ToDataDiskOutputWithContext(ctx context.Context) DataDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDiskOutput)
}

// DataDiskArrayInput is an input type that accepts DataDiskArray and DataDiskArrayOutput values.
// You can construct a concrete instance of `DataDiskArrayInput` via:
//
//          DataDiskArray{ DataDiskArgs{...} }
type DataDiskArrayInput interface {
	pulumi.Input

	ToDataDiskArrayOutput() DataDiskArrayOutput
	ToDataDiskArrayOutputWithContext(context.Context) DataDiskArrayOutput
}

type DataDiskArray []DataDiskInput

func (DataDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataDisk)(nil)).Elem()
}

func (i DataDiskArray) ToDataDiskArrayOutput() DataDiskArrayOutput {
	return i.ToDataDiskArrayOutputWithContext(context.Background())
}

func (i DataDiskArray) ToDataDiskArrayOutputWithContext(ctx context.Context) DataDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDiskArrayOutput)
}

// Data Disk settings which will be used by the data disks associated to Compute Nodes in the pool.
type DataDiskResponse struct {
	// Values are:
	//
	//  none - The caching mode for the disk is not enabled.
	//  readOnly - The caching mode for the disk is read only.
	//  readWrite - The caching mode for the disk is read and write.
	//
	//  The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
	Caching    *string `pulumi:"caching"`
	DiskSizeGB int     `pulumi:"diskSizeGB"`
	// The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun.
	Lun int `pulumi:"lun"`
	// If omitted, the default is "Standard_LRS". Values are:
	//
	//  Standard_LRS - The data disk should use standard locally redundant storage.
	//  Premium_LRS - The data disk should use premium locally redundant storage.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// Data Disk settings which will be used by the data disks associated to Compute Nodes in the pool.
type DataDiskResponseOutput struct{ *pulumi.OutputState }

func (DataDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDiskResponse)(nil)).Elem()
}

func (o DataDiskResponseOutput) ToDataDiskResponseOutput() DataDiskResponseOutput {
	return o
}

func (o DataDiskResponseOutput) ToDataDiskResponseOutputWithContext(ctx context.Context) DataDiskResponseOutput {
	return o
}

// Values are:
//
//  none - The caching mode for the disk is not enabled.
//  readOnly - The caching mode for the disk is read only.
//  readWrite - The caching mode for the disk is read and write.
//
//  The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
func (o DataDiskResponseOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataDiskResponse) *string { return v.Caching }).(pulumi.StringPtrOutput)
}

func (o DataDiskResponseOutput) DiskSizeGB() pulumi.IntOutput {
	return o.ApplyT(func(v DataDiskResponse) int { return v.DiskSizeGB }).(pulumi.IntOutput)
}

// The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun.
func (o DataDiskResponseOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v DataDiskResponse) int { return v.Lun }).(pulumi.IntOutput)
}

// If omitted, the default is "Standard_LRS". Values are:
//
//  Standard_LRS - The data disk should use standard locally redundant storage.
//  Premium_LRS - The data disk should use premium locally redundant storage.
func (o DataDiskResponseOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataDiskResponse) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type DataDiskResponseArrayOutput struct{ *pulumi.OutputState }

func (DataDiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataDiskResponse)(nil)).Elem()
}

func (o DataDiskResponseArrayOutput) ToDataDiskResponseArrayOutput() DataDiskResponseArrayOutput {
	return o
}

func (o DataDiskResponseArrayOutput) ToDataDiskResponseArrayOutputWithContext(ctx context.Context) DataDiskResponseArrayOutput {
	return o
}

func (o DataDiskResponseArrayOutput) Index(i pulumi.IntInput) DataDiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataDiskResponse {
		return vs[0].([]DataDiskResponse)[vs[1].(int)]
	}).(DataDiskResponseOutput)
}

// An error response from the Batch service.
type DeleteCertificateErrorResponse struct {
	// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
	Code string `pulumi:"code"`
	// A list of additional details about the error.
	Details []DeleteCertificateErrorResponse `pulumi:"details"`
	// A message describing the error, intended to be suitable for display in a user interface.
	Message string `pulumi:"message"`
	// The target of the particular error. For example, the name of the property in error.
	Target *string `pulumi:"target"`
}

// An error response from the Batch service.
type DeleteCertificateErrorResponseOutput struct{ *pulumi.OutputState }

func (DeleteCertificateErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeleteCertificateErrorResponse)(nil)).Elem()
}

func (o DeleteCertificateErrorResponseOutput) ToDeleteCertificateErrorResponseOutput() DeleteCertificateErrorResponseOutput {
	return o
}

func (o DeleteCertificateErrorResponseOutput) ToDeleteCertificateErrorResponseOutputWithContext(ctx context.Context) DeleteCertificateErrorResponseOutput {
	return o
}

func (o DeleteCertificateErrorResponseOutput) ToDeleteCertificateErrorResponsePtrOutput() DeleteCertificateErrorResponsePtrOutput {
	return o.ToDeleteCertificateErrorResponsePtrOutputWithContext(context.Background())
}

func (o DeleteCertificateErrorResponseOutput) ToDeleteCertificateErrorResponsePtrOutputWithContext(ctx context.Context) DeleteCertificateErrorResponsePtrOutput {
	return o.ApplyT(func(v DeleteCertificateErrorResponse) *DeleteCertificateErrorResponse {
		return &v
	}).(DeleteCertificateErrorResponsePtrOutput)
}

// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
func (o DeleteCertificateErrorResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v DeleteCertificateErrorResponse) string { return v.Code }).(pulumi.StringOutput)
}

// A list of additional details about the error.
func (o DeleteCertificateErrorResponseOutput) Details() DeleteCertificateErrorResponseArrayOutput {
	return o.ApplyT(func(v DeleteCertificateErrorResponse) []DeleteCertificateErrorResponse { return v.Details }).(DeleteCertificateErrorResponseArrayOutput)
}

// A message describing the error, intended to be suitable for display in a user interface.
func (o DeleteCertificateErrorResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v DeleteCertificateErrorResponse) string { return v.Message }).(pulumi.StringOutput)
}

// The target of the particular error. For example, the name of the property in error.
func (o DeleteCertificateErrorResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeleteCertificateErrorResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type DeleteCertificateErrorResponsePtrOutput struct{ *pulumi.OutputState }

func (DeleteCertificateErrorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeleteCertificateErrorResponse)(nil)).Elem()
}

func (o DeleteCertificateErrorResponsePtrOutput) ToDeleteCertificateErrorResponsePtrOutput() DeleteCertificateErrorResponsePtrOutput {
	return o
}

func (o DeleteCertificateErrorResponsePtrOutput) ToDeleteCertificateErrorResponsePtrOutputWithContext(ctx context.Context) DeleteCertificateErrorResponsePtrOutput {
	return o
}

func (o DeleteCertificateErrorResponsePtrOutput) Elem() DeleteCertificateErrorResponseOutput {
	return o.ApplyT(func(v *DeleteCertificateErrorResponse) DeleteCertificateErrorResponse { return *v }).(DeleteCertificateErrorResponseOutput)
}

// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
func (o DeleteCertificateErrorResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeleteCertificateErrorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.StringPtrOutput)
}

// A list of additional details about the error.
func (o DeleteCertificateErrorResponsePtrOutput) Details() DeleteCertificateErrorResponseArrayOutput {
	return o.ApplyT(func(v *DeleteCertificateErrorResponse) []DeleteCertificateErrorResponse {
		if v == nil {
			return nil
		}
		return v.Details
	}).(DeleteCertificateErrorResponseArrayOutput)
}

// A message describing the error, intended to be suitable for display in a user interface.
func (o DeleteCertificateErrorResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeleteCertificateErrorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

// The target of the particular error. For example, the name of the property in error.
func (o DeleteCertificateErrorResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeleteCertificateErrorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

type DeleteCertificateErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (DeleteCertificateErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeleteCertificateErrorResponse)(nil)).Elem()
}

func (o DeleteCertificateErrorResponseArrayOutput) ToDeleteCertificateErrorResponseArrayOutput() DeleteCertificateErrorResponseArrayOutput {
	return o
}

func (o DeleteCertificateErrorResponseArrayOutput) ToDeleteCertificateErrorResponseArrayOutputWithContext(ctx context.Context) DeleteCertificateErrorResponseArrayOutput {
	return o
}

func (o DeleteCertificateErrorResponseArrayOutput) Index(i pulumi.IntInput) DeleteCertificateErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeleteCertificateErrorResponse {
		return vs[0].([]DeleteCertificateErrorResponse)[vs[1].(int)]
	}).(DeleteCertificateErrorResponseOutput)
}

type DeploymentConfiguration struct {
	// This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch account was created with its poolAllocationMode property set to 'UserSubscription'.
	CloudServiceConfiguration *CloudServiceConfiguration `pulumi:"cloudServiceConfiguration"`
	// This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
	VirtualMachineConfiguration *VirtualMachineConfiguration `pulumi:"virtualMachineConfiguration"`
}

// DeploymentConfigurationInput is an input type that accepts DeploymentConfigurationArgs and DeploymentConfigurationOutput values.
// You can construct a concrete instance of `DeploymentConfigurationInput` via:
//
//          DeploymentConfigurationArgs{...}
type DeploymentConfigurationInput interface {
	pulumi.Input

	ToDeploymentConfigurationOutput() DeploymentConfigurationOutput
	ToDeploymentConfigurationOutputWithContext(context.Context) DeploymentConfigurationOutput
}

type DeploymentConfigurationArgs struct {
	// This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch account was created with its poolAllocationMode property set to 'UserSubscription'.
	CloudServiceConfiguration CloudServiceConfigurationPtrInput `pulumi:"cloudServiceConfiguration"`
	// This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
	VirtualMachineConfiguration VirtualMachineConfigurationPtrInput `pulumi:"virtualMachineConfiguration"`
}

func (DeploymentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfiguration)(nil)).Elem()
}

func (i DeploymentConfigurationArgs) ToDeploymentConfigurationOutput() DeploymentConfigurationOutput {
	return i.ToDeploymentConfigurationOutputWithContext(context.Background())
}

func (i DeploymentConfigurationArgs) ToDeploymentConfigurationOutputWithContext(ctx context.Context) DeploymentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigurationOutput)
}

func (i DeploymentConfigurationArgs) ToDeploymentConfigurationPtrOutput() DeploymentConfigurationPtrOutput {
	return i.ToDeploymentConfigurationPtrOutputWithContext(context.Background())
}

func (i DeploymentConfigurationArgs) ToDeploymentConfigurationPtrOutputWithContext(ctx context.Context) DeploymentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigurationOutput).ToDeploymentConfigurationPtrOutputWithContext(ctx)
}

// DeploymentConfigurationPtrInput is an input type that accepts DeploymentConfigurationArgs, DeploymentConfigurationPtr and DeploymentConfigurationPtrOutput values.
// You can construct a concrete instance of `DeploymentConfigurationPtrInput` via:
//
//          DeploymentConfigurationArgs{...}
//
//  or:
//
//          nil
type DeploymentConfigurationPtrInput interface {
	pulumi.Input

	ToDeploymentConfigurationPtrOutput() DeploymentConfigurationPtrOutput
	ToDeploymentConfigurationPtrOutputWithContext(context.Context) DeploymentConfigurationPtrOutput
}

type deploymentConfigurationPtrType DeploymentConfigurationArgs

func DeploymentConfigurationPtr(v *DeploymentConfigurationArgs) DeploymentConfigurationPtrInput {
	return (*deploymentConfigurationPtrType)(v)
}

func (*deploymentConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentConfiguration)(nil)).Elem()
}

func (i *deploymentConfigurationPtrType) ToDeploymentConfigurationPtrOutput() DeploymentConfigurationPtrOutput {
	return i.ToDeploymentConfigurationPtrOutputWithContext(context.Background())
}

func (i *deploymentConfigurationPtrType) ToDeploymentConfigurationPtrOutputWithContext(ctx context.Context) DeploymentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigurationPtrOutput)
}

type DeploymentConfigurationResponse struct {
	// This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch account was created with its poolAllocationMode property set to 'UserSubscription'.
	CloudServiceConfiguration *CloudServiceConfigurationResponse `pulumi:"cloudServiceConfiguration"`
	// This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
	VirtualMachineConfiguration *VirtualMachineConfigurationResponse `pulumi:"virtualMachineConfiguration"`
}

type DeploymentConfigurationResponseOutput struct{ *pulumi.OutputState }

func (DeploymentConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigurationResponse)(nil)).Elem()
}

func (o DeploymentConfigurationResponseOutput) ToDeploymentConfigurationResponseOutput() DeploymentConfigurationResponseOutput {
	return o
}

func (o DeploymentConfigurationResponseOutput) ToDeploymentConfigurationResponseOutputWithContext(ctx context.Context) DeploymentConfigurationResponseOutput {
	return o
}

func (o DeploymentConfigurationResponseOutput) ToDeploymentConfigurationResponsePtrOutput() DeploymentConfigurationResponsePtrOutput {
	return o.ToDeploymentConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o DeploymentConfigurationResponseOutput) ToDeploymentConfigurationResponsePtrOutputWithContext(ctx context.Context) DeploymentConfigurationResponsePtrOutput {
	return o.ApplyT(func(v DeploymentConfigurationResponse) *DeploymentConfigurationResponse {
		return &v
	}).(DeploymentConfigurationResponsePtrOutput)
}

// This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch account was created with its poolAllocationMode property set to 'UserSubscription'.
func (o DeploymentConfigurationResponseOutput) CloudServiceConfiguration() CloudServiceConfigurationResponsePtrOutput {
	return o.ApplyT(func(v DeploymentConfigurationResponse) *CloudServiceConfigurationResponse {
		return v.CloudServiceConfiguration
	}).(CloudServiceConfigurationResponsePtrOutput)
}

// This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
func (o DeploymentConfigurationResponseOutput) VirtualMachineConfiguration() VirtualMachineConfigurationResponsePtrOutput {
	return o.ApplyT(func(v DeploymentConfigurationResponse) *VirtualMachineConfigurationResponse {
		return v.VirtualMachineConfiguration
	}).(VirtualMachineConfigurationResponsePtrOutput)
}

type DeploymentConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (DeploymentConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentConfigurationResponse)(nil)).Elem()
}

func (o DeploymentConfigurationResponsePtrOutput) ToDeploymentConfigurationResponsePtrOutput() DeploymentConfigurationResponsePtrOutput {
	return o
}

func (o DeploymentConfigurationResponsePtrOutput) ToDeploymentConfigurationResponsePtrOutputWithContext(ctx context.Context) DeploymentConfigurationResponsePtrOutput {
	return o
}

func (o DeploymentConfigurationResponsePtrOutput) Elem() DeploymentConfigurationResponseOutput {
	return o.ApplyT(func(v *DeploymentConfigurationResponse) DeploymentConfigurationResponse { return *v }).(DeploymentConfigurationResponseOutput)
}

// This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch account was created with its poolAllocationMode property set to 'UserSubscription'.
func (o DeploymentConfigurationResponsePtrOutput) CloudServiceConfiguration() CloudServiceConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *DeploymentConfigurationResponse) *CloudServiceConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.CloudServiceConfiguration
	}).(CloudServiceConfigurationResponsePtrOutput)
}

// This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
func (o DeploymentConfigurationResponsePtrOutput) VirtualMachineConfiguration() VirtualMachineConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *DeploymentConfigurationResponse) *VirtualMachineConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.VirtualMachineConfiguration
	}).(VirtualMachineConfigurationResponsePtrOutput)
}

type EnvironmentSetting struct {
	Name  string  `pulumi:"name"`
	Value *string `pulumi:"value"`
}

// EnvironmentSettingInput is an input type that accepts EnvironmentSettingArgs and EnvironmentSettingOutput values.
// You can construct a concrete instance of `EnvironmentSettingInput` via:
//
//          EnvironmentSettingArgs{...}
type EnvironmentSettingInput interface {
	pulumi.Input

	ToEnvironmentSettingOutput() EnvironmentSettingOutput
	ToEnvironmentSettingOutputWithContext(context.Context) EnvironmentSettingOutput
}

type EnvironmentSettingArgs struct {
	Name  pulumi.StringInput    `pulumi:"name"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (EnvironmentSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentSetting)(nil)).Elem()
}

func (i EnvironmentSettingArgs) ToEnvironmentSettingOutput() EnvironmentSettingOutput {
	return i.ToEnvironmentSettingOutputWithContext(context.Background())
}

func (i EnvironmentSettingArgs) ToEnvironmentSettingOutputWithContext(ctx context.Context) EnvironmentSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentSettingOutput)
}

// EnvironmentSettingArrayInput is an input type that accepts EnvironmentSettingArray and EnvironmentSettingArrayOutput values.
// You can construct a concrete instance of `EnvironmentSettingArrayInput` via:
//
//          EnvironmentSettingArray{ EnvironmentSettingArgs{...} }
type EnvironmentSettingArrayInput interface {
	pulumi.Input

	ToEnvironmentSettingArrayOutput() EnvironmentSettingArrayOutput
	ToEnvironmentSettingArrayOutputWithContext(context.Context) EnvironmentSettingArrayOutput
}

type EnvironmentSettingArray []EnvironmentSettingInput

func (EnvironmentSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentSetting)(nil)).Elem()
}

func (i EnvironmentSettingArray) ToEnvironmentSettingArrayOutput() EnvironmentSettingArrayOutput {
	return i.ToEnvironmentSettingArrayOutputWithContext(context.Background())
}

func (i EnvironmentSettingArray) ToEnvironmentSettingArrayOutputWithContext(ctx context.Context) EnvironmentSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentSettingArrayOutput)
}

type EnvironmentSettingResponse struct {
	Name  string  `pulumi:"name"`
	Value *string `pulumi:"value"`
}

type EnvironmentSettingResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentSettingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentSettingResponse)(nil)).Elem()
}

func (o EnvironmentSettingResponseOutput) ToEnvironmentSettingResponseOutput() EnvironmentSettingResponseOutput {
	return o
}

func (o EnvironmentSettingResponseOutput) ToEnvironmentSettingResponseOutputWithContext(ctx context.Context) EnvironmentSettingResponseOutput {
	return o
}

func (o EnvironmentSettingResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentSettingResponse) string { return v.Name }).(pulumi.StringOutput)
}

func (o EnvironmentSettingResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentSettingResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EnvironmentSettingResponseArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentSettingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentSettingResponse)(nil)).Elem()
}

func (o EnvironmentSettingResponseArrayOutput) ToEnvironmentSettingResponseArrayOutput() EnvironmentSettingResponseArrayOutput {
	return o
}

func (o EnvironmentSettingResponseArrayOutput) ToEnvironmentSettingResponseArrayOutputWithContext(ctx context.Context) EnvironmentSettingResponseArrayOutput {
	return o
}

func (o EnvironmentSettingResponseArrayOutput) Index(i pulumi.IntInput) EnvironmentSettingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentSettingResponse {
		return vs[0].([]EnvironmentSettingResponse)[vs[1].(int)]
	}).(EnvironmentSettingResponseOutput)
}

type FixedScaleSettings struct {
	// If omitted, the default value is Requeue.
	NodeDeallocationOption *string `pulumi:"nodeDeallocationOption"`
	// The default value is 15 minutes. Timeout values use ISO 8601 format. For example, use PT10M for 10 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
	ResizeTimeout *string `pulumi:"resizeTimeout"`
	// At least one of targetDedicatedNodes, targetLowPriority nodes must be set.
	TargetDedicatedNodes *int `pulumi:"targetDedicatedNodes"`
	// At least one of targetDedicatedNodes, targetLowPriority nodes must be set.
	TargetLowPriorityNodes *int `pulumi:"targetLowPriorityNodes"`
}

// FixedScaleSettingsInput is an input type that accepts FixedScaleSettingsArgs and FixedScaleSettingsOutput values.
// You can construct a concrete instance of `FixedScaleSettingsInput` via:
//
//          FixedScaleSettingsArgs{...}
type FixedScaleSettingsInput interface {
	pulumi.Input

	ToFixedScaleSettingsOutput() FixedScaleSettingsOutput
	ToFixedScaleSettingsOutputWithContext(context.Context) FixedScaleSettingsOutput
}

type FixedScaleSettingsArgs struct {
	// If omitted, the default value is Requeue.
	NodeDeallocationOption pulumi.StringPtrInput `pulumi:"nodeDeallocationOption"`
	// The default value is 15 minutes. Timeout values use ISO 8601 format. For example, use PT10M for 10 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
	ResizeTimeout pulumi.StringPtrInput `pulumi:"resizeTimeout"`
	// At least one of targetDedicatedNodes, targetLowPriority nodes must be set.
	TargetDedicatedNodes pulumi.IntPtrInput `pulumi:"targetDedicatedNodes"`
	// At least one of targetDedicatedNodes, targetLowPriority nodes must be set.
	TargetLowPriorityNodes pulumi.IntPtrInput `pulumi:"targetLowPriorityNodes"`
}

func (FixedScaleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedScaleSettings)(nil)).Elem()
}

func (i FixedScaleSettingsArgs) ToFixedScaleSettingsOutput() FixedScaleSettingsOutput {
	return i.ToFixedScaleSettingsOutputWithContext(context.Background())
}

func (i FixedScaleSettingsArgs) ToFixedScaleSettingsOutputWithContext(ctx context.Context) FixedScaleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedScaleSettingsOutput)
}

func (i FixedScaleSettingsArgs) ToFixedScaleSettingsPtrOutput() FixedScaleSettingsPtrOutput {
	return i.ToFixedScaleSettingsPtrOutputWithContext(context.Background())
}

func (i FixedScaleSettingsArgs) ToFixedScaleSettingsPtrOutputWithContext(ctx context.Context) FixedScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedScaleSettingsOutput).ToFixedScaleSettingsPtrOutputWithContext(ctx)
}

// FixedScaleSettingsPtrInput is an input type that accepts FixedScaleSettingsArgs, FixedScaleSettingsPtr and FixedScaleSettingsPtrOutput values.
// You can construct a concrete instance of `FixedScaleSettingsPtrInput` via:
//
//          FixedScaleSettingsArgs{...}
//
//  or:
//
//          nil
type FixedScaleSettingsPtrInput interface {
	pulumi.Input

	ToFixedScaleSettingsPtrOutput() FixedScaleSettingsPtrOutput
	ToFixedScaleSettingsPtrOutputWithContext(context.Context) FixedScaleSettingsPtrOutput
}

type fixedScaleSettingsPtrType FixedScaleSettingsArgs

func FixedScaleSettingsPtr(v *FixedScaleSettingsArgs) FixedScaleSettingsPtrInput {
	return (*fixedScaleSettingsPtrType)(v)
}

func (*fixedScaleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FixedScaleSettings)(nil)).Elem()
}

func (i *fixedScaleSettingsPtrType) ToFixedScaleSettingsPtrOutput() FixedScaleSettingsPtrOutput {
	return i.ToFixedScaleSettingsPtrOutputWithContext(context.Background())
}

func (i *fixedScaleSettingsPtrType) ToFixedScaleSettingsPtrOutputWithContext(ctx context.Context) FixedScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedScaleSettingsPtrOutput)
}

type FixedScaleSettingsResponse struct {
	// If omitted, the default value is Requeue.
	NodeDeallocationOption *string `pulumi:"nodeDeallocationOption"`
	// The default value is 15 minutes. Timeout values use ISO 8601 format. For example, use PT10M for 10 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
	ResizeTimeout *string `pulumi:"resizeTimeout"`
	// At least one of targetDedicatedNodes, targetLowPriority nodes must be set.
	TargetDedicatedNodes *int `pulumi:"targetDedicatedNodes"`
	// At least one of targetDedicatedNodes, targetLowPriority nodes must be set.
	TargetLowPriorityNodes *int `pulumi:"targetLowPriorityNodes"`
}

type FixedScaleSettingsResponseOutput struct{ *pulumi.OutputState }

func (FixedScaleSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedScaleSettingsResponse)(nil)).Elem()
}

func (o FixedScaleSettingsResponseOutput) ToFixedScaleSettingsResponseOutput() FixedScaleSettingsResponseOutput {
	return o
}

func (o FixedScaleSettingsResponseOutput) ToFixedScaleSettingsResponseOutputWithContext(ctx context.Context) FixedScaleSettingsResponseOutput {
	return o
}

func (o FixedScaleSettingsResponseOutput) ToFixedScaleSettingsResponsePtrOutput() FixedScaleSettingsResponsePtrOutput {
	return o.ToFixedScaleSettingsResponsePtrOutputWithContext(context.Background())
}

func (o FixedScaleSettingsResponseOutput) ToFixedScaleSettingsResponsePtrOutputWithContext(ctx context.Context) FixedScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v FixedScaleSettingsResponse) *FixedScaleSettingsResponse {
		return &v
	}).(FixedScaleSettingsResponsePtrOutput)
}

// If omitted, the default value is Requeue.
func (o FixedScaleSettingsResponseOutput) NodeDeallocationOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FixedScaleSettingsResponse) *string { return v.NodeDeallocationOption }).(pulumi.StringPtrOutput)
}

// The default value is 15 minutes. Timeout values use ISO 8601 format. For example, use PT10M for 10 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
func (o FixedScaleSettingsResponseOutput) ResizeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FixedScaleSettingsResponse) *string { return v.ResizeTimeout }).(pulumi.StringPtrOutput)
}

// At least one of targetDedicatedNodes, targetLowPriority nodes must be set.
func (o FixedScaleSettingsResponseOutput) TargetDedicatedNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FixedScaleSettingsResponse) *int { return v.TargetDedicatedNodes }).(pulumi.IntPtrOutput)
}

// At least one of targetDedicatedNodes, targetLowPriority nodes must be set.
func (o FixedScaleSettingsResponseOutput) TargetLowPriorityNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FixedScaleSettingsResponse) *int { return v.TargetLowPriorityNodes }).(pulumi.IntPtrOutput)
}

type FixedScaleSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (FixedScaleSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FixedScaleSettingsResponse)(nil)).Elem()
}

func (o FixedScaleSettingsResponsePtrOutput) ToFixedScaleSettingsResponsePtrOutput() FixedScaleSettingsResponsePtrOutput {
	return o
}

func (o FixedScaleSettingsResponsePtrOutput) ToFixedScaleSettingsResponsePtrOutputWithContext(ctx context.Context) FixedScaleSettingsResponsePtrOutput {
	return o
}

func (o FixedScaleSettingsResponsePtrOutput) Elem() FixedScaleSettingsResponseOutput {
	return o.ApplyT(func(v *FixedScaleSettingsResponse) FixedScaleSettingsResponse { return *v }).(FixedScaleSettingsResponseOutput)
}

// If omitted, the default value is Requeue.
func (o FixedScaleSettingsResponsePtrOutput) NodeDeallocationOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FixedScaleSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.NodeDeallocationOption
	}).(pulumi.StringPtrOutput)
}

// The default value is 15 minutes. Timeout values use ISO 8601 format. For example, use PT10M for 10 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
func (o FixedScaleSettingsResponsePtrOutput) ResizeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FixedScaleSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResizeTimeout
	}).(pulumi.StringPtrOutput)
}

// At least one of targetDedicatedNodes, targetLowPriority nodes must be set.
func (o FixedScaleSettingsResponsePtrOutput) TargetDedicatedNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FixedScaleSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.TargetDedicatedNodes
	}).(pulumi.IntPtrOutput)
}

// At least one of targetDedicatedNodes, targetLowPriority nodes must be set.
func (o FixedScaleSettingsResponsePtrOutput) TargetLowPriorityNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FixedScaleSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.TargetLowPriorityNodes
	}).(pulumi.IntPtrOutput)
}

type ImageReference struct {
	// This property is mutually exclusive with other properties. The virtual machine image must be in the same region and subscription as the Azure Batch account. For information about the firewall settings for Batch node agent to communicate with Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration .
	Id *string `pulumi:"id"`
	// For example, UbuntuServer or WindowsServer.
	Offer *string `pulumi:"offer"`
	// For example, Canonical or MicrosoftWindowsServer.
	Publisher *string `pulumi:"publisher"`
	// For example, 14.04.0-LTS or 2012-R2-Datacenter.
	Sku *string `pulumi:"sku"`
	// A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
	Version *string `pulumi:"version"`
}

// ImageReferenceInput is an input type that accepts ImageReferenceArgs and ImageReferenceOutput values.
// You can construct a concrete instance of `ImageReferenceInput` via:
//
//          ImageReferenceArgs{...}
type ImageReferenceInput interface {
	pulumi.Input

	ToImageReferenceOutput() ImageReferenceOutput
	ToImageReferenceOutputWithContext(context.Context) ImageReferenceOutput
}

type ImageReferenceArgs struct {
	// This property is mutually exclusive with other properties. The virtual machine image must be in the same region and subscription as the Azure Batch account. For information about the firewall settings for Batch node agent to communicate with Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration .
	Id pulumi.StringPtrInput `pulumi:"id"`
	// For example, UbuntuServer or WindowsServer.
	Offer pulumi.StringPtrInput `pulumi:"offer"`
	// For example, Canonical or MicrosoftWindowsServer.
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
	// For example, 14.04.0-LTS or 2012-R2-Datacenter.
	Sku pulumi.StringPtrInput `pulumi:"sku"`
	// A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ImageReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReference)(nil)).Elem()
}

func (i ImageReferenceArgs) ToImageReferenceOutput() ImageReferenceOutput {
	return i.ToImageReferenceOutputWithContext(context.Background())
}

func (i ImageReferenceArgs) ToImageReferenceOutputWithContext(ctx context.Context) ImageReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceOutput)
}

func (i ImageReferenceArgs) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return i.ToImageReferencePtrOutputWithContext(context.Background())
}

func (i ImageReferenceArgs) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceOutput).ToImageReferencePtrOutputWithContext(ctx)
}

// ImageReferencePtrInput is an input type that accepts ImageReferenceArgs, ImageReferencePtr and ImageReferencePtrOutput values.
// You can construct a concrete instance of `ImageReferencePtrInput` via:
//
//          ImageReferenceArgs{...}
//
//  or:
//
//          nil
type ImageReferencePtrInput interface {
	pulumi.Input

	ToImageReferencePtrOutput() ImageReferencePtrOutput
	ToImageReferencePtrOutputWithContext(context.Context) ImageReferencePtrOutput
}

type imageReferencePtrType ImageReferenceArgs

func ImageReferencePtr(v *ImageReferenceArgs) ImageReferencePtrInput {
	return (*imageReferencePtrType)(v)
}

func (*imageReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReference)(nil)).Elem()
}

func (i *imageReferencePtrType) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return i.ToImageReferencePtrOutputWithContext(context.Background())
}

func (i *imageReferencePtrType) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferencePtrOutput)
}

type ImageReferenceResponse struct {
	// This property is mutually exclusive with other properties. The virtual machine image must be in the same region and subscription as the Azure Batch account. For information about the firewall settings for Batch node agent to communicate with Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration .
	Id *string `pulumi:"id"`
	// For example, UbuntuServer or WindowsServer.
	Offer *string `pulumi:"offer"`
	// For example, Canonical or MicrosoftWindowsServer.
	Publisher *string `pulumi:"publisher"`
	// For example, 14.04.0-LTS or 2012-R2-Datacenter.
	Sku *string `pulumi:"sku"`
	// A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
	Version *string `pulumi:"version"`
}

type ImageReferenceResponseOutput struct{ *pulumi.OutputState }

func (ImageReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReferenceResponse)(nil)).Elem()
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponseOutput() ImageReferenceResponseOutput {
	return o
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponseOutputWithContext(ctx context.Context) ImageReferenceResponseOutput {
	return o
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponsePtrOutput() ImageReferenceResponsePtrOutput {
	return o.ToImageReferenceResponsePtrOutputWithContext(context.Background())
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponsePtrOutputWithContext(ctx context.Context) ImageReferenceResponsePtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *ImageReferenceResponse {
		return &v
	}).(ImageReferenceResponsePtrOutput)
}

// This property is mutually exclusive with other properties. The virtual machine image must be in the same region and subscription as the Azure Batch account. For information about the firewall settings for Batch node agent to communicate with Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration .
func (o ImageReferenceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// For example, UbuntuServer or WindowsServer.
func (o ImageReferenceResponseOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Offer }).(pulumi.StringPtrOutput)
}

// For example, Canonical or MicrosoftWindowsServer.
func (o ImageReferenceResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// For example, 14.04.0-LTS or 2012-R2-Datacenter.
func (o ImageReferenceResponseOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Sku }).(pulumi.StringPtrOutput)
}

// A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
func (o ImageReferenceResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ImageReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReferenceResponse)(nil)).Elem()
}

func (o ImageReferenceResponsePtrOutput) ToImageReferenceResponsePtrOutput() ImageReferenceResponsePtrOutput {
	return o
}

func (o ImageReferenceResponsePtrOutput) ToImageReferenceResponsePtrOutputWithContext(ctx context.Context) ImageReferenceResponsePtrOutput {
	return o
}

func (o ImageReferenceResponsePtrOutput) Elem() ImageReferenceResponseOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) ImageReferenceResponse { return *v }).(ImageReferenceResponseOutput)
}

// This property is mutually exclusive with other properties. The virtual machine image must be in the same region and subscription as the Azure Batch account. For information about the firewall settings for Batch node agent to communicate with Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration .
func (o ImageReferenceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// For example, UbuntuServer or WindowsServer.
func (o ImageReferenceResponsePtrOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Offer
	}).(pulumi.StringPtrOutput)
}

// For example, Canonical or MicrosoftWindowsServer.
func (o ImageReferenceResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

// For example, 14.04.0-LTS or 2012-R2-Datacenter.
func (o ImageReferenceResponsePtrOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Sku
	}).(pulumi.StringPtrOutput)
}

// A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'.
func (o ImageReferenceResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type InboundNatPool struct {
	// This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
	BackendPort int `pulumi:"backendPort"`
	// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
	FrontendPortRangeEnd int `pulumi:"frontendPortRangeEnd"`
	// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
	FrontendPortRangeStart int `pulumi:"frontendPortRangeStart"`
	// The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
	Name string `pulumi:"name"`
	// The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
	NetworkSecurityGroupRules []NetworkSecurityGroupRule `pulumi:"networkSecurityGroupRules"`
	Protocol                  string                     `pulumi:"protocol"`
}

// InboundNatPoolInput is an input type that accepts InboundNatPoolArgs and InboundNatPoolOutput values.
// You can construct a concrete instance of `InboundNatPoolInput` via:
//
//          InboundNatPoolArgs{...}
type InboundNatPoolInput interface {
	pulumi.Input

	ToInboundNatPoolOutput() InboundNatPoolOutput
	ToInboundNatPoolOutputWithContext(context.Context) InboundNatPoolOutput
}

type InboundNatPoolArgs struct {
	// This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
	BackendPort pulumi.IntInput `pulumi:"backendPort"`
	// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
	FrontendPortRangeEnd pulumi.IntInput `pulumi:"frontendPortRangeEnd"`
	// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
	FrontendPortRangeStart pulumi.IntInput `pulumi:"frontendPortRangeStart"`
	// The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
	Name pulumi.StringInput `pulumi:"name"`
	// The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
	NetworkSecurityGroupRules NetworkSecurityGroupRuleArrayInput `pulumi:"networkSecurityGroupRules"`
	Protocol                  pulumi.StringInput                 `pulumi:"protocol"`
}

func (InboundNatPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InboundNatPool)(nil)).Elem()
}

func (i InboundNatPoolArgs) ToInboundNatPoolOutput() InboundNatPoolOutput {
	return i.ToInboundNatPoolOutputWithContext(context.Background())
}

func (i InboundNatPoolArgs) ToInboundNatPoolOutputWithContext(ctx context.Context) InboundNatPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundNatPoolOutput)
}

// InboundNatPoolArrayInput is an input type that accepts InboundNatPoolArray and InboundNatPoolArrayOutput values.
// You can construct a concrete instance of `InboundNatPoolArrayInput` via:
//
//          InboundNatPoolArray{ InboundNatPoolArgs{...} }
type InboundNatPoolArrayInput interface {
	pulumi.Input

	ToInboundNatPoolArrayOutput() InboundNatPoolArrayOutput
	ToInboundNatPoolArrayOutputWithContext(context.Context) InboundNatPoolArrayOutput
}

type InboundNatPoolArray []InboundNatPoolInput

func (InboundNatPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InboundNatPool)(nil)).Elem()
}

func (i InboundNatPoolArray) ToInboundNatPoolArrayOutput() InboundNatPoolArrayOutput {
	return i.ToInboundNatPoolArrayOutputWithContext(context.Background())
}

func (i InboundNatPoolArray) ToInboundNatPoolArrayOutputWithContext(ctx context.Context) InboundNatPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundNatPoolArrayOutput)
}

type InboundNatPoolResponse struct {
	// This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
	BackendPort int `pulumi:"backendPort"`
	// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
	FrontendPortRangeEnd int `pulumi:"frontendPortRangeEnd"`
	// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
	FrontendPortRangeStart int `pulumi:"frontendPortRangeStart"`
	// The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
	Name string `pulumi:"name"`
	// The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
	NetworkSecurityGroupRules []NetworkSecurityGroupRuleResponse `pulumi:"networkSecurityGroupRules"`
	Protocol                  string                             `pulumi:"protocol"`
}

type InboundNatPoolResponseOutput struct{ *pulumi.OutputState }

func (InboundNatPoolResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InboundNatPoolResponse)(nil)).Elem()
}

func (o InboundNatPoolResponseOutput) ToInboundNatPoolResponseOutput() InboundNatPoolResponseOutput {
	return o
}

func (o InboundNatPoolResponseOutput) ToInboundNatPoolResponseOutputWithContext(ctx context.Context) InboundNatPoolResponseOutput {
	return o
}

// This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
func (o InboundNatPoolResponseOutput) BackendPort() pulumi.IntOutput {
	return o.ApplyT(func(v InboundNatPoolResponse) int { return v.BackendPort }).(pulumi.IntOutput)
}

// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
func (o InboundNatPoolResponseOutput) FrontendPortRangeEnd() pulumi.IntOutput {
	return o.ApplyT(func(v InboundNatPoolResponse) int { return v.FrontendPortRangeEnd }).(pulumi.IntOutput)
}

// Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
func (o InboundNatPoolResponseOutput) FrontendPortRangeStart() pulumi.IntOutput {
	return o.ApplyT(func(v InboundNatPoolResponse) int { return v.FrontendPortRangeStart }).(pulumi.IntOutput)
}

// The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
func (o InboundNatPoolResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InboundNatPoolResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
func (o InboundNatPoolResponseOutput) NetworkSecurityGroupRules() NetworkSecurityGroupRuleResponseArrayOutput {
	return o.ApplyT(func(v InboundNatPoolResponse) []NetworkSecurityGroupRuleResponse { return v.NetworkSecurityGroupRules }).(NetworkSecurityGroupRuleResponseArrayOutput)
}

func (o InboundNatPoolResponseOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v InboundNatPoolResponse) string { return v.Protocol }).(pulumi.StringOutput)
}

type InboundNatPoolResponseArrayOutput struct{ *pulumi.OutputState }

func (InboundNatPoolResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InboundNatPoolResponse)(nil)).Elem()
}

func (o InboundNatPoolResponseArrayOutput) ToInboundNatPoolResponseArrayOutput() InboundNatPoolResponseArrayOutput {
	return o
}

func (o InboundNatPoolResponseArrayOutput) ToInboundNatPoolResponseArrayOutputWithContext(ctx context.Context) InboundNatPoolResponseArrayOutput {
	return o
}

func (o InboundNatPoolResponseArrayOutput) Index(i pulumi.IntInput) InboundNatPoolResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InboundNatPoolResponse {
		return vs[0].([]InboundNatPoolResponse)[vs[1].(int)]
	}).(InboundNatPoolResponseOutput)
}

// Identifies the Azure key vault associated with a Batch account.
type KeyVaultReference struct {
	// The resource ID of the Azure key vault associated with the Batch account.
	Id string `pulumi:"id"`
	// The URL of the Azure key vault associated with the Batch account.
	Url string `pulumi:"url"`
}

// KeyVaultReferenceInput is an input type that accepts KeyVaultReferenceArgs and KeyVaultReferenceOutput values.
// You can construct a concrete instance of `KeyVaultReferenceInput` via:
//
//          KeyVaultReferenceArgs{...}
type KeyVaultReferenceInput interface {
	pulumi.Input

	ToKeyVaultReferenceOutput() KeyVaultReferenceOutput
	ToKeyVaultReferenceOutputWithContext(context.Context) KeyVaultReferenceOutput
}

// Identifies the Azure key vault associated with a Batch account.
type KeyVaultReferenceArgs struct {
	// The resource ID of the Azure key vault associated with the Batch account.
	Id pulumi.StringInput `pulumi:"id"`
	// The URL of the Azure key vault associated with the Batch account.
	Url pulumi.StringInput `pulumi:"url"`
}

func (KeyVaultReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultReference)(nil)).Elem()
}

func (i KeyVaultReferenceArgs) ToKeyVaultReferenceOutput() KeyVaultReferenceOutput {
	return i.ToKeyVaultReferenceOutputWithContext(context.Background())
}

func (i KeyVaultReferenceArgs) ToKeyVaultReferenceOutputWithContext(ctx context.Context) KeyVaultReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultReferenceOutput)
}

func (i KeyVaultReferenceArgs) ToKeyVaultReferencePtrOutput() KeyVaultReferencePtrOutput {
	return i.ToKeyVaultReferencePtrOutputWithContext(context.Background())
}

func (i KeyVaultReferenceArgs) ToKeyVaultReferencePtrOutputWithContext(ctx context.Context) KeyVaultReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultReferenceOutput).ToKeyVaultReferencePtrOutputWithContext(ctx)
}

// KeyVaultReferencePtrInput is an input type that accepts KeyVaultReferenceArgs, KeyVaultReferencePtr and KeyVaultReferencePtrOutput values.
// You can construct a concrete instance of `KeyVaultReferencePtrInput` via:
//
//          KeyVaultReferenceArgs{...}
//
//  or:
//
//          nil
type KeyVaultReferencePtrInput interface {
	pulumi.Input

	ToKeyVaultReferencePtrOutput() KeyVaultReferencePtrOutput
	ToKeyVaultReferencePtrOutputWithContext(context.Context) KeyVaultReferencePtrOutput
}

type keyVaultReferencePtrType KeyVaultReferenceArgs

func KeyVaultReferencePtr(v *KeyVaultReferenceArgs) KeyVaultReferencePtrInput {
	return (*keyVaultReferencePtrType)(v)
}

func (*keyVaultReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultReference)(nil)).Elem()
}

func (i *keyVaultReferencePtrType) ToKeyVaultReferencePtrOutput() KeyVaultReferencePtrOutput {
	return i.ToKeyVaultReferencePtrOutputWithContext(context.Background())
}

func (i *keyVaultReferencePtrType) ToKeyVaultReferencePtrOutputWithContext(ctx context.Context) KeyVaultReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultReferencePtrOutput)
}

// Identifies the Azure key vault associated with a Batch account.
type KeyVaultReferenceResponse struct {
	// The resource ID of the Azure key vault associated with the Batch account.
	Id string `pulumi:"id"`
	// The URL of the Azure key vault associated with the Batch account.
	Url string `pulumi:"url"`
}

// Identifies the Azure key vault associated with a Batch account.
type KeyVaultReferenceResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultReferenceResponse)(nil)).Elem()
}

func (o KeyVaultReferenceResponseOutput) ToKeyVaultReferenceResponseOutput() KeyVaultReferenceResponseOutput {
	return o
}

func (o KeyVaultReferenceResponseOutput) ToKeyVaultReferenceResponseOutputWithContext(ctx context.Context) KeyVaultReferenceResponseOutput {
	return o
}

func (o KeyVaultReferenceResponseOutput) ToKeyVaultReferenceResponsePtrOutput() KeyVaultReferenceResponsePtrOutput {
	return o.ToKeyVaultReferenceResponsePtrOutputWithContext(context.Background())
}

func (o KeyVaultReferenceResponseOutput) ToKeyVaultReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultReferenceResponsePtrOutput {
	return o.ApplyT(func(v KeyVaultReferenceResponse) *KeyVaultReferenceResponse {
		return &v
	}).(KeyVaultReferenceResponsePtrOutput)
}

// The resource ID of the Azure key vault associated with the Batch account.
func (o KeyVaultReferenceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultReferenceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The URL of the Azure key vault associated with the Batch account.
func (o KeyVaultReferenceResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultReferenceResponse) string { return v.Url }).(pulumi.StringOutput)
}

type KeyVaultReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultReferenceResponse)(nil)).Elem()
}

func (o KeyVaultReferenceResponsePtrOutput) ToKeyVaultReferenceResponsePtrOutput() KeyVaultReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultReferenceResponsePtrOutput) ToKeyVaultReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultReferenceResponsePtrOutput) Elem() KeyVaultReferenceResponseOutput {
	return o.ApplyT(func(v *KeyVaultReferenceResponse) KeyVaultReferenceResponse { return *v }).(KeyVaultReferenceResponseOutput)
}

// The resource ID of the Azure key vault associated with the Batch account.
func (o KeyVaultReferenceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The URL of the Azure key vault associated with the Batch account.
func (o KeyVaultReferenceResponsePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type LinuxUserConfiguration struct {
	// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
	Gid *int `pulumi:"gid"`
	// The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
	SshPrivateKey *string `pulumi:"sshPrivateKey"`
	// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
	Uid *int `pulumi:"uid"`
}

// LinuxUserConfigurationInput is an input type that accepts LinuxUserConfigurationArgs and LinuxUserConfigurationOutput values.
// You can construct a concrete instance of `LinuxUserConfigurationInput` via:
//
//          LinuxUserConfigurationArgs{...}
type LinuxUserConfigurationInput interface {
	pulumi.Input

	ToLinuxUserConfigurationOutput() LinuxUserConfigurationOutput
	ToLinuxUserConfigurationOutputWithContext(context.Context) LinuxUserConfigurationOutput
}

type LinuxUserConfigurationArgs struct {
	// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
	Gid pulumi.IntPtrInput `pulumi:"gid"`
	// The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
	SshPrivateKey pulumi.StringPtrInput `pulumi:"sshPrivateKey"`
	// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
	Uid pulumi.IntPtrInput `pulumi:"uid"`
}

func (LinuxUserConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxUserConfiguration)(nil)).Elem()
}

func (i LinuxUserConfigurationArgs) ToLinuxUserConfigurationOutput() LinuxUserConfigurationOutput {
	return i.ToLinuxUserConfigurationOutputWithContext(context.Background())
}

func (i LinuxUserConfigurationArgs) ToLinuxUserConfigurationOutputWithContext(ctx context.Context) LinuxUserConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxUserConfigurationOutput)
}

func (i LinuxUserConfigurationArgs) ToLinuxUserConfigurationPtrOutput() LinuxUserConfigurationPtrOutput {
	return i.ToLinuxUserConfigurationPtrOutputWithContext(context.Background())
}

func (i LinuxUserConfigurationArgs) ToLinuxUserConfigurationPtrOutputWithContext(ctx context.Context) LinuxUserConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxUserConfigurationOutput).ToLinuxUserConfigurationPtrOutputWithContext(ctx)
}

// LinuxUserConfigurationPtrInput is an input type that accepts LinuxUserConfigurationArgs, LinuxUserConfigurationPtr and LinuxUserConfigurationPtrOutput values.
// You can construct a concrete instance of `LinuxUserConfigurationPtrInput` via:
//
//          LinuxUserConfigurationArgs{...}
//
//  or:
//
//          nil
type LinuxUserConfigurationPtrInput interface {
	pulumi.Input

	ToLinuxUserConfigurationPtrOutput() LinuxUserConfigurationPtrOutput
	ToLinuxUserConfigurationPtrOutputWithContext(context.Context) LinuxUserConfigurationPtrOutput
}

type linuxUserConfigurationPtrType LinuxUserConfigurationArgs

func LinuxUserConfigurationPtr(v *LinuxUserConfigurationArgs) LinuxUserConfigurationPtrInput {
	return (*linuxUserConfigurationPtrType)(v)
}

func (*linuxUserConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxUserConfiguration)(nil)).Elem()
}

func (i *linuxUserConfigurationPtrType) ToLinuxUserConfigurationPtrOutput() LinuxUserConfigurationPtrOutput {
	return i.ToLinuxUserConfigurationPtrOutputWithContext(context.Background())
}

func (i *linuxUserConfigurationPtrType) ToLinuxUserConfigurationPtrOutputWithContext(ctx context.Context) LinuxUserConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxUserConfigurationPtrOutput)
}

type LinuxUserConfigurationResponse struct {
	// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
	Gid *int `pulumi:"gid"`
	// The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
	SshPrivateKey *string `pulumi:"sshPrivateKey"`
	// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
	Uid *int `pulumi:"uid"`
}

type LinuxUserConfigurationResponseOutput struct{ *pulumi.OutputState }

func (LinuxUserConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxUserConfigurationResponse)(nil)).Elem()
}

func (o LinuxUserConfigurationResponseOutput) ToLinuxUserConfigurationResponseOutput() LinuxUserConfigurationResponseOutput {
	return o
}

func (o LinuxUserConfigurationResponseOutput) ToLinuxUserConfigurationResponseOutputWithContext(ctx context.Context) LinuxUserConfigurationResponseOutput {
	return o
}

func (o LinuxUserConfigurationResponseOutput) ToLinuxUserConfigurationResponsePtrOutput() LinuxUserConfigurationResponsePtrOutput {
	return o.ToLinuxUserConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o LinuxUserConfigurationResponseOutput) ToLinuxUserConfigurationResponsePtrOutputWithContext(ctx context.Context) LinuxUserConfigurationResponsePtrOutput {
	return o.ApplyT(func(v LinuxUserConfigurationResponse) *LinuxUserConfigurationResponse {
		return &v
	}).(LinuxUserConfigurationResponsePtrOutput)
}

// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
func (o LinuxUserConfigurationResponseOutput) Gid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LinuxUserConfigurationResponse) *int { return v.Gid }).(pulumi.IntPtrOutput)
}

// The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
func (o LinuxUserConfigurationResponseOutput) SshPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxUserConfigurationResponse) *string { return v.SshPrivateKey }).(pulumi.StringPtrOutput)
}

// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
func (o LinuxUserConfigurationResponseOutput) Uid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LinuxUserConfigurationResponse) *int { return v.Uid }).(pulumi.IntPtrOutput)
}

type LinuxUserConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (LinuxUserConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxUserConfigurationResponse)(nil)).Elem()
}

func (o LinuxUserConfigurationResponsePtrOutput) ToLinuxUserConfigurationResponsePtrOutput() LinuxUserConfigurationResponsePtrOutput {
	return o
}

func (o LinuxUserConfigurationResponsePtrOutput) ToLinuxUserConfigurationResponsePtrOutputWithContext(ctx context.Context) LinuxUserConfigurationResponsePtrOutput {
	return o
}

func (o LinuxUserConfigurationResponsePtrOutput) Elem() LinuxUserConfigurationResponseOutput {
	return o.ApplyT(func(v *LinuxUserConfigurationResponse) LinuxUserConfigurationResponse { return *v }).(LinuxUserConfigurationResponseOutput)
}

// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
func (o LinuxUserConfigurationResponsePtrOutput) Gid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LinuxUserConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.Gid
	}).(pulumi.IntPtrOutput)
}

// The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done).
func (o LinuxUserConfigurationResponsePtrOutput) SshPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxUserConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.SshPrivateKey
	}).(pulumi.StringPtrOutput)
}

// The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
func (o LinuxUserConfigurationResponsePtrOutput) Uid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LinuxUserConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.IntPtrOutput)
}

// The Batch service does not assign any meaning to this metadata; it is solely for the use of user code.
type MetadataItem struct {
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// MetadataItemInput is an input type that accepts MetadataItemArgs and MetadataItemOutput values.
// You can construct a concrete instance of `MetadataItemInput` via:
//
//          MetadataItemArgs{...}
type MetadataItemInput interface {
	pulumi.Input

	ToMetadataItemOutput() MetadataItemOutput
	ToMetadataItemOutputWithContext(context.Context) MetadataItemOutput
}

// The Batch service does not assign any meaning to this metadata; it is solely for the use of user code.
type MetadataItemArgs struct {
	Name  pulumi.StringInput `pulumi:"name"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (MetadataItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataItem)(nil)).Elem()
}

func (i MetadataItemArgs) ToMetadataItemOutput() MetadataItemOutput {
	return i.ToMetadataItemOutputWithContext(context.Background())
}

func (i MetadataItemArgs) ToMetadataItemOutputWithContext(ctx context.Context) MetadataItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataItemOutput)
}

// MetadataItemArrayInput is an input type that accepts MetadataItemArray and MetadataItemArrayOutput values.
// You can construct a concrete instance of `MetadataItemArrayInput` via:
//
//          MetadataItemArray{ MetadataItemArgs{...} }
type MetadataItemArrayInput interface {
	pulumi.Input

	ToMetadataItemArrayOutput() MetadataItemArrayOutput
	ToMetadataItemArrayOutputWithContext(context.Context) MetadataItemArrayOutput
}

type MetadataItemArray []MetadataItemInput

func (MetadataItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataItem)(nil)).Elem()
}

func (i MetadataItemArray) ToMetadataItemArrayOutput() MetadataItemArrayOutput {
	return i.ToMetadataItemArrayOutputWithContext(context.Background())
}

func (i MetadataItemArray) ToMetadataItemArrayOutputWithContext(ctx context.Context) MetadataItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataItemArrayOutput)
}

// The Batch service does not assign any meaning to this metadata; it is solely for the use of user code.
type MetadataItemResponse struct {
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// The Batch service does not assign any meaning to this metadata; it is solely for the use of user code.
type MetadataItemResponseOutput struct{ *pulumi.OutputState }

func (MetadataItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataItemResponse)(nil)).Elem()
}

func (o MetadataItemResponseOutput) ToMetadataItemResponseOutput() MetadataItemResponseOutput {
	return o
}

func (o MetadataItemResponseOutput) ToMetadataItemResponseOutputWithContext(ctx context.Context) MetadataItemResponseOutput {
	return o
}

func (o MetadataItemResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataItemResponse) string { return v.Name }).(pulumi.StringOutput)
}

func (o MetadataItemResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataItemResponse) string { return v.Value }).(pulumi.StringOutput)
}

type MetadataItemResponseArrayOutput struct{ *pulumi.OutputState }

func (MetadataItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataItemResponse)(nil)).Elem()
}

func (o MetadataItemResponseArrayOutput) ToMetadataItemResponseArrayOutput() MetadataItemResponseArrayOutput {
	return o
}

func (o MetadataItemResponseArrayOutput) ToMetadataItemResponseArrayOutputWithContext(ctx context.Context) MetadataItemResponseArrayOutput {
	return o
}

func (o MetadataItemResponseArrayOutput) Index(i pulumi.IntInput) MetadataItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetadataItemResponse {
		return vs[0].([]MetadataItemResponse)[vs[1].(int)]
	}).(MetadataItemResponseOutput)
}

// The network configuration for a pool.
type NetworkConfiguration struct {
	// Pool endpoint configuration is only supported on pools with the virtualMachineConfiguration property.
	EndpointConfiguration *PoolEndpointConfiguration `pulumi:"endpointConfiguration"`
	// The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes, and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. For pools created via virtualMachineConfiguration the Batch account must have poolAllocationMode userSubscription in order to use a VNet. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
	SubnetId *string `pulumi:"subnetId"`
}

// NetworkConfigurationInput is an input type that accepts NetworkConfigurationArgs and NetworkConfigurationOutput values.
// You can construct a concrete instance of `NetworkConfigurationInput` via:
//
//          NetworkConfigurationArgs{...}
type NetworkConfigurationInput interface {
	pulumi.Input

	ToNetworkConfigurationOutput() NetworkConfigurationOutput
	ToNetworkConfigurationOutputWithContext(context.Context) NetworkConfigurationOutput
}

// The network configuration for a pool.
type NetworkConfigurationArgs struct {
	// Pool endpoint configuration is only supported on pools with the virtualMachineConfiguration property.
	EndpointConfiguration PoolEndpointConfigurationPtrInput `pulumi:"endpointConfiguration"`
	// The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes, and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. For pools created via virtualMachineConfiguration the Batch account must have poolAllocationMode userSubscription in order to use a VNet. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (NetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfiguration)(nil)).Elem()
}

func (i NetworkConfigurationArgs) ToNetworkConfigurationOutput() NetworkConfigurationOutput {
	return i.ToNetworkConfigurationOutputWithContext(context.Background())
}

func (i NetworkConfigurationArgs) ToNetworkConfigurationOutputWithContext(ctx context.Context) NetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigurationOutput)
}

func (i NetworkConfigurationArgs) ToNetworkConfigurationPtrOutput() NetworkConfigurationPtrOutput {
	return i.ToNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i NetworkConfigurationArgs) ToNetworkConfigurationPtrOutputWithContext(ctx context.Context) NetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigurationOutput).ToNetworkConfigurationPtrOutputWithContext(ctx)
}

// NetworkConfigurationPtrInput is an input type that accepts NetworkConfigurationArgs, NetworkConfigurationPtr and NetworkConfigurationPtrOutput values.
// You can construct a concrete instance of `NetworkConfigurationPtrInput` via:
//
//          NetworkConfigurationArgs{...}
//
//  or:
//
//          nil
type NetworkConfigurationPtrInput interface {
	pulumi.Input

	ToNetworkConfigurationPtrOutput() NetworkConfigurationPtrOutput
	ToNetworkConfigurationPtrOutputWithContext(context.Context) NetworkConfigurationPtrOutput
}

type networkConfigurationPtrType NetworkConfigurationArgs

func NetworkConfigurationPtr(v *NetworkConfigurationArgs) NetworkConfigurationPtrInput {
	return (*networkConfigurationPtrType)(v)
}

func (*networkConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfiguration)(nil)).Elem()
}

func (i *networkConfigurationPtrType) ToNetworkConfigurationPtrOutput() NetworkConfigurationPtrOutput {
	return i.ToNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i *networkConfigurationPtrType) ToNetworkConfigurationPtrOutputWithContext(ctx context.Context) NetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigurationPtrOutput)
}

// The network configuration for a pool.
type NetworkConfigurationResponse struct {
	// Pool endpoint configuration is only supported on pools with the virtualMachineConfiguration property.
	EndpointConfiguration *PoolEndpointConfigurationResponse `pulumi:"endpointConfiguration"`
	// The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes, and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. For pools created via virtualMachineConfiguration the Batch account must have poolAllocationMode userSubscription in order to use a VNet. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
	SubnetId *string `pulumi:"subnetId"`
}

// The network configuration for a pool.
type NetworkConfigurationResponseOutput struct{ *pulumi.OutputState }

func (NetworkConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfigurationResponse)(nil)).Elem()
}

func (o NetworkConfigurationResponseOutput) ToNetworkConfigurationResponseOutput() NetworkConfigurationResponseOutput {
	return o
}

func (o NetworkConfigurationResponseOutput) ToNetworkConfigurationResponseOutputWithContext(ctx context.Context) NetworkConfigurationResponseOutput {
	return o
}

func (o NetworkConfigurationResponseOutput) ToNetworkConfigurationResponsePtrOutput() NetworkConfigurationResponsePtrOutput {
	return o.ToNetworkConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o NetworkConfigurationResponseOutput) ToNetworkConfigurationResponsePtrOutputWithContext(ctx context.Context) NetworkConfigurationResponsePtrOutput {
	return o.ApplyT(func(v NetworkConfigurationResponse) *NetworkConfigurationResponse {
		return &v
	}).(NetworkConfigurationResponsePtrOutput)
}

// Pool endpoint configuration is only supported on pools with the virtualMachineConfiguration property.
func (o NetworkConfigurationResponseOutput) EndpointConfiguration() PoolEndpointConfigurationResponsePtrOutput {
	return o.ApplyT(func(v NetworkConfigurationResponse) *PoolEndpointConfigurationResponse {
		return v.EndpointConfiguration
	}).(PoolEndpointConfigurationResponsePtrOutput)
}

// The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes, and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. For pools created via virtualMachineConfiguration the Batch account must have poolAllocationMode userSubscription in order to use a VNet. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
func (o NetworkConfigurationResponseOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfigurationResponse) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type NetworkConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (NetworkConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfigurationResponse)(nil)).Elem()
}

func (o NetworkConfigurationResponsePtrOutput) ToNetworkConfigurationResponsePtrOutput() NetworkConfigurationResponsePtrOutput {
	return o
}

func (o NetworkConfigurationResponsePtrOutput) ToNetworkConfigurationResponsePtrOutputWithContext(ctx context.Context) NetworkConfigurationResponsePtrOutput {
	return o
}

func (o NetworkConfigurationResponsePtrOutput) Elem() NetworkConfigurationResponseOutput {
	return o.ApplyT(func(v *NetworkConfigurationResponse) NetworkConfigurationResponse { return *v }).(NetworkConfigurationResponseOutput)
}

// Pool endpoint configuration is only supported on pools with the virtualMachineConfiguration property.
func (o NetworkConfigurationResponsePtrOutput) EndpointConfiguration() PoolEndpointConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *NetworkConfigurationResponse) *PoolEndpointConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.EndpointConfiguration
	}).(PoolEndpointConfigurationResponsePtrOutput)
}

// The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes, and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. For pools created via virtualMachineConfiguration the Batch account must have poolAllocationMode userSubscription in order to use a VNet. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
func (o NetworkConfigurationResponsePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

type NetworkSecurityGroupRule struct {
	Access string `pulumi:"access"`
	// Priorities within a pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 3500. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
	Priority int `pulumi:"priority"`
	// Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
	SourceAddressPrefix string `pulumi:"sourceAddressPrefix"`
}

// NetworkSecurityGroupRuleInput is an input type that accepts NetworkSecurityGroupRuleArgs and NetworkSecurityGroupRuleOutput values.
// You can construct a concrete instance of `NetworkSecurityGroupRuleInput` via:
//
//          NetworkSecurityGroupRuleArgs{...}
type NetworkSecurityGroupRuleInput interface {
	pulumi.Input

	ToNetworkSecurityGroupRuleOutput() NetworkSecurityGroupRuleOutput
	ToNetworkSecurityGroupRuleOutputWithContext(context.Context) NetworkSecurityGroupRuleOutput
}

type NetworkSecurityGroupRuleArgs struct {
	Access pulumi.StringInput `pulumi:"access"`
	// Priorities within a pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 3500. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
	Priority pulumi.IntInput `pulumi:"priority"`
	// Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
	SourceAddressPrefix pulumi.StringInput `pulumi:"sourceAddressPrefix"`
}

func (NetworkSecurityGroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkSecurityGroupRule)(nil)).Elem()
}

func (i NetworkSecurityGroupRuleArgs) ToNetworkSecurityGroupRuleOutput() NetworkSecurityGroupRuleOutput {
	return i.ToNetworkSecurityGroupRuleOutputWithContext(context.Background())
}

func (i NetworkSecurityGroupRuleArgs) ToNetworkSecurityGroupRuleOutputWithContext(ctx context.Context) NetworkSecurityGroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSecurityGroupRuleOutput)
}

// NetworkSecurityGroupRuleArrayInput is an input type that accepts NetworkSecurityGroupRuleArray and NetworkSecurityGroupRuleArrayOutput values.
// You can construct a concrete instance of `NetworkSecurityGroupRuleArrayInput` via:
//
//          NetworkSecurityGroupRuleArray{ NetworkSecurityGroupRuleArgs{...} }
type NetworkSecurityGroupRuleArrayInput interface {
	pulumi.Input

	ToNetworkSecurityGroupRuleArrayOutput() NetworkSecurityGroupRuleArrayOutput
	ToNetworkSecurityGroupRuleArrayOutputWithContext(context.Context) NetworkSecurityGroupRuleArrayOutput
}

type NetworkSecurityGroupRuleArray []NetworkSecurityGroupRuleInput

func (NetworkSecurityGroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkSecurityGroupRule)(nil)).Elem()
}

func (i NetworkSecurityGroupRuleArray) ToNetworkSecurityGroupRuleArrayOutput() NetworkSecurityGroupRuleArrayOutput {
	return i.ToNetworkSecurityGroupRuleArrayOutputWithContext(context.Background())
}

func (i NetworkSecurityGroupRuleArray) ToNetworkSecurityGroupRuleArrayOutputWithContext(ctx context.Context) NetworkSecurityGroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSecurityGroupRuleArrayOutput)
}

type NetworkSecurityGroupRuleResponse struct {
	Access string `pulumi:"access"`
	// Priorities within a pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 3500. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
	Priority int `pulumi:"priority"`
	// Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
	SourceAddressPrefix string `pulumi:"sourceAddressPrefix"`
}

type NetworkSecurityGroupRuleResponseOutput struct{ *pulumi.OutputState }

func (NetworkSecurityGroupRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkSecurityGroupRuleResponse)(nil)).Elem()
}

func (o NetworkSecurityGroupRuleResponseOutput) ToNetworkSecurityGroupRuleResponseOutput() NetworkSecurityGroupRuleResponseOutput {
	return o
}

func (o NetworkSecurityGroupRuleResponseOutput) ToNetworkSecurityGroupRuleResponseOutputWithContext(ctx context.Context) NetworkSecurityGroupRuleResponseOutput {
	return o
}

func (o NetworkSecurityGroupRuleResponseOutput) Access() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkSecurityGroupRuleResponse) string { return v.Access }).(pulumi.StringOutput)
}

// Priorities within a pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 3500. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
func (o NetworkSecurityGroupRuleResponseOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v NetworkSecurityGroupRuleResponse) int { return v.Priority }).(pulumi.IntOutput)
}

// Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
func (o NetworkSecurityGroupRuleResponseOutput) SourceAddressPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkSecurityGroupRuleResponse) string { return v.SourceAddressPrefix }).(pulumi.StringOutput)
}

type NetworkSecurityGroupRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkSecurityGroupRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkSecurityGroupRuleResponse)(nil)).Elem()
}

func (o NetworkSecurityGroupRuleResponseArrayOutput) ToNetworkSecurityGroupRuleResponseArrayOutput() NetworkSecurityGroupRuleResponseArrayOutput {
	return o
}

func (o NetworkSecurityGroupRuleResponseArrayOutput) ToNetworkSecurityGroupRuleResponseArrayOutputWithContext(ctx context.Context) NetworkSecurityGroupRuleResponseArrayOutput {
	return o
}

func (o NetworkSecurityGroupRuleResponseArrayOutput) Index(i pulumi.IntInput) NetworkSecurityGroupRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkSecurityGroupRuleResponse {
		return vs[0].([]NetworkSecurityGroupRuleResponse)[vs[1].(int)]
	}).(NetworkSecurityGroupRuleResponseOutput)
}

type OSDisk struct {
	// Default value is none.
	Caching *string `pulumi:"caching"`
}

// OSDiskInput is an input type that accepts OSDiskArgs and OSDiskOutput values.
// You can construct a concrete instance of `OSDiskInput` via:
//
//          OSDiskArgs{...}
type OSDiskInput interface {
	pulumi.Input

	ToOSDiskOutput() OSDiskOutput
	ToOSDiskOutputWithContext(context.Context) OSDiskOutput
}

type OSDiskArgs struct {
	// Default value is none.
	Caching pulumi.StringPtrInput `pulumi:"caching"`
}

func (OSDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSDisk)(nil)).Elem()
}

func (i OSDiskArgs) ToOSDiskOutput() OSDiskOutput {
	return i.ToOSDiskOutputWithContext(context.Background())
}

func (i OSDiskArgs) ToOSDiskOutputWithContext(ctx context.Context) OSDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSDiskOutput)
}

func (i OSDiskArgs) ToOSDiskPtrOutput() OSDiskPtrOutput {
	return i.ToOSDiskPtrOutputWithContext(context.Background())
}

func (i OSDiskArgs) ToOSDiskPtrOutputWithContext(ctx context.Context) OSDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSDiskOutput).ToOSDiskPtrOutputWithContext(ctx)
}

// OSDiskPtrInput is an input type that accepts OSDiskArgs, OSDiskPtr and OSDiskPtrOutput values.
// You can construct a concrete instance of `OSDiskPtrInput` via:
//
//          OSDiskArgs{...}
//
//  or:
//
//          nil
type OSDiskPtrInput interface {
	pulumi.Input

	ToOSDiskPtrOutput() OSDiskPtrOutput
	ToOSDiskPtrOutputWithContext(context.Context) OSDiskPtrOutput
}

type osdiskPtrType OSDiskArgs

func OSDiskPtr(v *OSDiskArgs) OSDiskPtrInput {
	return (*osdiskPtrType)(v)
}

func (*osdiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSDisk)(nil)).Elem()
}

func (i *osdiskPtrType) ToOSDiskPtrOutput() OSDiskPtrOutput {
	return i.ToOSDiskPtrOutputWithContext(context.Background())
}

func (i *osdiskPtrType) ToOSDiskPtrOutputWithContext(ctx context.Context) OSDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSDiskPtrOutput)
}

type OSDiskResponse struct {
	// Default value is none.
	Caching *string `pulumi:"caching"`
}

type OSDiskResponseOutput struct{ *pulumi.OutputState }

func (OSDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSDiskResponse)(nil)).Elem()
}

func (o OSDiskResponseOutput) ToOSDiskResponseOutput() OSDiskResponseOutput {
	return o
}

func (o OSDiskResponseOutput) ToOSDiskResponseOutputWithContext(ctx context.Context) OSDiskResponseOutput {
	return o
}

func (o OSDiskResponseOutput) ToOSDiskResponsePtrOutput() OSDiskResponsePtrOutput {
	return o.ToOSDiskResponsePtrOutputWithContext(context.Background())
}

func (o OSDiskResponseOutput) ToOSDiskResponsePtrOutputWithContext(ctx context.Context) OSDiskResponsePtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *OSDiskResponse {
		return &v
	}).(OSDiskResponsePtrOutput)
}

// Default value is none.
func (o OSDiskResponseOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *string { return v.Caching }).(pulumi.StringPtrOutput)
}

type OSDiskResponsePtrOutput struct{ *pulumi.OutputState }

func (OSDiskResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSDiskResponse)(nil)).Elem()
}

func (o OSDiskResponsePtrOutput) ToOSDiskResponsePtrOutput() OSDiskResponsePtrOutput {
	return o
}

func (o OSDiskResponsePtrOutput) ToOSDiskResponsePtrOutputWithContext(ctx context.Context) OSDiskResponsePtrOutput {
	return o
}

func (o OSDiskResponsePtrOutput) Elem() OSDiskResponseOutput {
	return o.ApplyT(func(v *OSDiskResponse) OSDiskResponse { return *v }).(OSDiskResponseOutput)
}

// Default value is none.
func (o OSDiskResponsePtrOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.Caching
	}).(pulumi.StringPtrOutput)
}

type PoolEndpointConfiguration struct {
	// The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400.
	InboundNatPools []InboundNatPool `pulumi:"inboundNatPools"`
}

// PoolEndpointConfigurationInput is an input type that accepts PoolEndpointConfigurationArgs and PoolEndpointConfigurationOutput values.
// You can construct a concrete instance of `PoolEndpointConfigurationInput` via:
//
//          PoolEndpointConfigurationArgs{...}
type PoolEndpointConfigurationInput interface {
	pulumi.Input

	ToPoolEndpointConfigurationOutput() PoolEndpointConfigurationOutput
	ToPoolEndpointConfigurationOutputWithContext(context.Context) PoolEndpointConfigurationOutput
}

type PoolEndpointConfigurationArgs struct {
	// The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400.
	InboundNatPools InboundNatPoolArrayInput `pulumi:"inboundNatPools"`
}

func (PoolEndpointConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolEndpointConfiguration)(nil)).Elem()
}

func (i PoolEndpointConfigurationArgs) ToPoolEndpointConfigurationOutput() PoolEndpointConfigurationOutput {
	return i.ToPoolEndpointConfigurationOutputWithContext(context.Background())
}

func (i PoolEndpointConfigurationArgs) ToPoolEndpointConfigurationOutputWithContext(ctx context.Context) PoolEndpointConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolEndpointConfigurationOutput)
}

func (i PoolEndpointConfigurationArgs) ToPoolEndpointConfigurationPtrOutput() PoolEndpointConfigurationPtrOutput {
	return i.ToPoolEndpointConfigurationPtrOutputWithContext(context.Background())
}

func (i PoolEndpointConfigurationArgs) ToPoolEndpointConfigurationPtrOutputWithContext(ctx context.Context) PoolEndpointConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolEndpointConfigurationOutput).ToPoolEndpointConfigurationPtrOutputWithContext(ctx)
}

// PoolEndpointConfigurationPtrInput is an input type that accepts PoolEndpointConfigurationArgs, PoolEndpointConfigurationPtr and PoolEndpointConfigurationPtrOutput values.
// You can construct a concrete instance of `PoolEndpointConfigurationPtrInput` via:
//
//          PoolEndpointConfigurationArgs{...}
//
//  or:
//
//          nil
type PoolEndpointConfigurationPtrInput interface {
	pulumi.Input

	ToPoolEndpointConfigurationPtrOutput() PoolEndpointConfigurationPtrOutput
	ToPoolEndpointConfigurationPtrOutputWithContext(context.Context) PoolEndpointConfigurationPtrOutput
}

type poolEndpointConfigurationPtrType PoolEndpointConfigurationArgs

func PoolEndpointConfigurationPtr(v *PoolEndpointConfigurationArgs) PoolEndpointConfigurationPtrInput {
	return (*poolEndpointConfigurationPtrType)(v)
}

func (*poolEndpointConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolEndpointConfiguration)(nil)).Elem()
}

func (i *poolEndpointConfigurationPtrType) ToPoolEndpointConfigurationPtrOutput() PoolEndpointConfigurationPtrOutput {
	return i.ToPoolEndpointConfigurationPtrOutputWithContext(context.Background())
}

func (i *poolEndpointConfigurationPtrType) ToPoolEndpointConfigurationPtrOutputWithContext(ctx context.Context) PoolEndpointConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolEndpointConfigurationPtrOutput)
}

type PoolEndpointConfigurationResponse struct {
	// The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400.
	InboundNatPools []InboundNatPoolResponse `pulumi:"inboundNatPools"`
}

type PoolEndpointConfigurationResponseOutput struct{ *pulumi.OutputState }

func (PoolEndpointConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolEndpointConfigurationResponse)(nil)).Elem()
}

func (o PoolEndpointConfigurationResponseOutput) ToPoolEndpointConfigurationResponseOutput() PoolEndpointConfigurationResponseOutput {
	return o
}

func (o PoolEndpointConfigurationResponseOutput) ToPoolEndpointConfigurationResponseOutputWithContext(ctx context.Context) PoolEndpointConfigurationResponseOutput {
	return o
}

func (o PoolEndpointConfigurationResponseOutput) ToPoolEndpointConfigurationResponsePtrOutput() PoolEndpointConfigurationResponsePtrOutput {
	return o.ToPoolEndpointConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o PoolEndpointConfigurationResponseOutput) ToPoolEndpointConfigurationResponsePtrOutputWithContext(ctx context.Context) PoolEndpointConfigurationResponsePtrOutput {
	return o.ApplyT(func(v PoolEndpointConfigurationResponse) *PoolEndpointConfigurationResponse {
		return &v
	}).(PoolEndpointConfigurationResponsePtrOutput)
}

// The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400.
func (o PoolEndpointConfigurationResponseOutput) InboundNatPools() InboundNatPoolResponseArrayOutput {
	return o.ApplyT(func(v PoolEndpointConfigurationResponse) []InboundNatPoolResponse { return v.InboundNatPools }).(InboundNatPoolResponseArrayOutput)
}

type PoolEndpointConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (PoolEndpointConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolEndpointConfigurationResponse)(nil)).Elem()
}

func (o PoolEndpointConfigurationResponsePtrOutput) ToPoolEndpointConfigurationResponsePtrOutput() PoolEndpointConfigurationResponsePtrOutput {
	return o
}

func (o PoolEndpointConfigurationResponsePtrOutput) ToPoolEndpointConfigurationResponsePtrOutputWithContext(ctx context.Context) PoolEndpointConfigurationResponsePtrOutput {
	return o
}

func (o PoolEndpointConfigurationResponsePtrOutput) Elem() PoolEndpointConfigurationResponseOutput {
	return o.ApplyT(func(v *PoolEndpointConfigurationResponse) PoolEndpointConfigurationResponse { return *v }).(PoolEndpointConfigurationResponseOutput)
}

// The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400.
func (o PoolEndpointConfigurationResponsePtrOutput) InboundNatPools() InboundNatPoolResponseArrayOutput {
	return o.ApplyT(func(v *PoolEndpointConfigurationResponse) []InboundNatPoolResponse {
		if v == nil {
			return nil
		}
		return v.InboundNatPools
	}).(InboundNatPoolResponseArrayOutput)
}

type ResizeErrorResponse struct {
	// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
	Code    string                `pulumi:"code"`
	Details []ResizeErrorResponse `pulumi:"details"`
	// A message describing the error, intended to be suitable for display in a user interface.
	Message string `pulumi:"message"`
}

type ResizeErrorResponseOutput struct{ *pulumi.OutputState }

func (ResizeErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResizeErrorResponse)(nil)).Elem()
}

func (o ResizeErrorResponseOutput) ToResizeErrorResponseOutput() ResizeErrorResponseOutput {
	return o
}

func (o ResizeErrorResponseOutput) ToResizeErrorResponseOutputWithContext(ctx context.Context) ResizeErrorResponseOutput {
	return o
}

// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
func (o ResizeErrorResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ResizeErrorResponse) string { return v.Code }).(pulumi.StringOutput)
}

func (o ResizeErrorResponseOutput) Details() ResizeErrorResponseArrayOutput {
	return o.ApplyT(func(v ResizeErrorResponse) []ResizeErrorResponse { return v.Details }).(ResizeErrorResponseArrayOutput)
}

// A message describing the error, intended to be suitable for display in a user interface.
func (o ResizeErrorResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ResizeErrorResponse) string { return v.Message }).(pulumi.StringOutput)
}

type ResizeErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (ResizeErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResizeErrorResponse)(nil)).Elem()
}

func (o ResizeErrorResponseArrayOutput) ToResizeErrorResponseArrayOutput() ResizeErrorResponseArrayOutput {
	return o
}

func (o ResizeErrorResponseArrayOutput) ToResizeErrorResponseArrayOutputWithContext(ctx context.Context) ResizeErrorResponseArrayOutput {
	return o
}

func (o ResizeErrorResponseArrayOutput) Index(i pulumi.IntInput) ResizeErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResizeErrorResponse {
		return vs[0].([]ResizeErrorResponse)[vs[1].(int)]
	}).(ResizeErrorResponseOutput)
}

// Describes either the current operation (if the pool AllocationState is Resizing) or the previously completed operation (if the AllocationState is Steady).
type ResizeOperationStatusResponse struct {
	// This property is set only if an error occurred during the last pool resize, and only when the pool allocationState is Steady.
	Errors []ResizeErrorResponse `pulumi:"errors"`
	// The default value is requeue.
	NodeDeallocationOption *string `pulumi:"nodeDeallocationOption"`
	// The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
	ResizeTimeout          *string `pulumi:"resizeTimeout"`
	StartTime              *string `pulumi:"startTime"`
	TargetDedicatedNodes   *int    `pulumi:"targetDedicatedNodes"`
	TargetLowPriorityNodes *int    `pulumi:"targetLowPriorityNodes"`
}

// Describes either the current operation (if the pool AllocationState is Resizing) or the previously completed operation (if the AllocationState is Steady).
type ResizeOperationStatusResponseOutput struct{ *pulumi.OutputState }

func (ResizeOperationStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResizeOperationStatusResponse)(nil)).Elem()
}

func (o ResizeOperationStatusResponseOutput) ToResizeOperationStatusResponseOutput() ResizeOperationStatusResponseOutput {
	return o
}

func (o ResizeOperationStatusResponseOutput) ToResizeOperationStatusResponseOutputWithContext(ctx context.Context) ResizeOperationStatusResponseOutput {
	return o
}

func (o ResizeOperationStatusResponseOutput) ToResizeOperationStatusResponsePtrOutput() ResizeOperationStatusResponsePtrOutput {
	return o.ToResizeOperationStatusResponsePtrOutputWithContext(context.Background())
}

func (o ResizeOperationStatusResponseOutput) ToResizeOperationStatusResponsePtrOutputWithContext(ctx context.Context) ResizeOperationStatusResponsePtrOutput {
	return o.ApplyT(func(v ResizeOperationStatusResponse) *ResizeOperationStatusResponse {
		return &v
	}).(ResizeOperationStatusResponsePtrOutput)
}

// This property is set only if an error occurred during the last pool resize, and only when the pool allocationState is Steady.
func (o ResizeOperationStatusResponseOutput) Errors() ResizeErrorResponseArrayOutput {
	return o.ApplyT(func(v ResizeOperationStatusResponse) []ResizeErrorResponse { return v.Errors }).(ResizeErrorResponseArrayOutput)
}

// The default value is requeue.
func (o ResizeOperationStatusResponseOutput) NodeDeallocationOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResizeOperationStatusResponse) *string { return v.NodeDeallocationOption }).(pulumi.StringPtrOutput)
}

// The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
func (o ResizeOperationStatusResponseOutput) ResizeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResizeOperationStatusResponse) *string { return v.ResizeTimeout }).(pulumi.StringPtrOutput)
}

func (o ResizeOperationStatusResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResizeOperationStatusResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

func (o ResizeOperationStatusResponseOutput) TargetDedicatedNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResizeOperationStatusResponse) *int { return v.TargetDedicatedNodes }).(pulumi.IntPtrOutput)
}

func (o ResizeOperationStatusResponseOutput) TargetLowPriorityNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResizeOperationStatusResponse) *int { return v.TargetLowPriorityNodes }).(pulumi.IntPtrOutput)
}

type ResizeOperationStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (ResizeOperationStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResizeOperationStatusResponse)(nil)).Elem()
}

func (o ResizeOperationStatusResponsePtrOutput) ToResizeOperationStatusResponsePtrOutput() ResizeOperationStatusResponsePtrOutput {
	return o
}

func (o ResizeOperationStatusResponsePtrOutput) ToResizeOperationStatusResponsePtrOutputWithContext(ctx context.Context) ResizeOperationStatusResponsePtrOutput {
	return o
}

func (o ResizeOperationStatusResponsePtrOutput) Elem() ResizeOperationStatusResponseOutput {
	return o.ApplyT(func(v *ResizeOperationStatusResponse) ResizeOperationStatusResponse { return *v }).(ResizeOperationStatusResponseOutput)
}

// This property is set only if an error occurred during the last pool resize, and only when the pool allocationState is Steady.
func (o ResizeOperationStatusResponsePtrOutput) Errors() ResizeErrorResponseArrayOutput {
	return o.ApplyT(func(v *ResizeOperationStatusResponse) []ResizeErrorResponse {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(ResizeErrorResponseArrayOutput)
}

// The default value is requeue.
func (o ResizeOperationStatusResponsePtrOutput) NodeDeallocationOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResizeOperationStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.NodeDeallocationOption
	}).(pulumi.StringPtrOutput)
}

// The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
func (o ResizeOperationStatusResponsePtrOutput) ResizeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResizeOperationStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResizeTimeout
	}).(pulumi.StringPtrOutput)
}

func (o ResizeOperationStatusResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResizeOperationStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

func (o ResizeOperationStatusResponsePtrOutput) TargetDedicatedNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResizeOperationStatusResponse) *int {
		if v == nil {
			return nil
		}
		return v.TargetDedicatedNodes
	}).(pulumi.IntPtrOutput)
}

func (o ResizeOperationStatusResponsePtrOutput) TargetLowPriorityNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResizeOperationStatusResponse) *int {
		if v == nil {
			return nil
		}
		return v.TargetLowPriorityNodes
	}).(pulumi.IntPtrOutput)
}

type ResourceFile struct {
	// This URL must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
	BlobSource string `pulumi:"blobSource"`
	// This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.
	FileMode *string `pulumi:"fileMode"`
	FilePath string  `pulumi:"filePath"`
}

// ResourceFileInput is an input type that accepts ResourceFileArgs and ResourceFileOutput values.
// You can construct a concrete instance of `ResourceFileInput` via:
//
//          ResourceFileArgs{...}
type ResourceFileInput interface {
	pulumi.Input

	ToResourceFileOutput() ResourceFileOutput
	ToResourceFileOutputWithContext(context.Context) ResourceFileOutput
}

type ResourceFileArgs struct {
	// This URL must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
	BlobSource pulumi.StringInput `pulumi:"blobSource"`
	// This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.
	FileMode pulumi.StringPtrInput `pulumi:"fileMode"`
	FilePath pulumi.StringInput    `pulumi:"filePath"`
}

func (ResourceFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceFile)(nil)).Elem()
}

func (i ResourceFileArgs) ToResourceFileOutput() ResourceFileOutput {
	return i.ToResourceFileOutputWithContext(context.Background())
}

func (i ResourceFileArgs) ToResourceFileOutputWithContext(ctx context.Context) ResourceFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceFileOutput)
}

// ResourceFileArrayInput is an input type that accepts ResourceFileArray and ResourceFileArrayOutput values.
// You can construct a concrete instance of `ResourceFileArrayInput` via:
//
//          ResourceFileArray{ ResourceFileArgs{...} }
type ResourceFileArrayInput interface {
	pulumi.Input

	ToResourceFileArrayOutput() ResourceFileArrayOutput
	ToResourceFileArrayOutputWithContext(context.Context) ResourceFileArrayOutput
}

type ResourceFileArray []ResourceFileInput

func (ResourceFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceFile)(nil)).Elem()
}

func (i ResourceFileArray) ToResourceFileArrayOutput() ResourceFileArrayOutput {
	return i.ToResourceFileArrayOutputWithContext(context.Background())
}

func (i ResourceFileArray) ToResourceFileArrayOutputWithContext(ctx context.Context) ResourceFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceFileArrayOutput)
}

type ResourceFileResponse struct {
	// This URL must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
	BlobSource string `pulumi:"blobSource"`
	// This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.
	FileMode *string `pulumi:"fileMode"`
	FilePath string  `pulumi:"filePath"`
}

type ResourceFileResponseOutput struct{ *pulumi.OutputState }

func (ResourceFileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceFileResponse)(nil)).Elem()
}

func (o ResourceFileResponseOutput) ToResourceFileResponseOutput() ResourceFileResponseOutput {
	return o
}

func (o ResourceFileResponseOutput) ToResourceFileResponseOutputWithContext(ctx context.Context) ResourceFileResponseOutput {
	return o
}

// This URL must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
func (o ResourceFileResponseOutput) BlobSource() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceFileResponse) string { return v.BlobSource }).(pulumi.StringOutput)
}

// This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.
func (o ResourceFileResponseOutput) FileMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceFileResponse) *string { return v.FileMode }).(pulumi.StringPtrOutput)
}

func (o ResourceFileResponseOutput) FilePath() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceFileResponse) string { return v.FilePath }).(pulumi.StringOutput)
}

type ResourceFileResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourceFileResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceFileResponse)(nil)).Elem()
}

func (o ResourceFileResponseArrayOutput) ToResourceFileResponseArrayOutput() ResourceFileResponseArrayOutput {
	return o
}

func (o ResourceFileResponseArrayOutput) ToResourceFileResponseArrayOutputWithContext(ctx context.Context) ResourceFileResponseArrayOutput {
	return o
}

func (o ResourceFileResponseArrayOutput) Index(i pulumi.IntInput) ResourceFileResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceFileResponse {
		return vs[0].([]ResourceFileResponse)[vs[1].(int)]
	}).(ResourceFileResponseOutput)
}

// Defines the desired size of the pool. This can either be 'fixedScale' where the requested targetDedicatedNodes is specified, or 'autoScale' which defines a formula which is periodically reevaluated. If this property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes.
type ScaleSettings struct {
	// This property and fixedScale are mutually exclusive and one of the properties must be specified.
	AutoScale *AutoScaleSettings `pulumi:"autoScale"`
	// This property and autoScale are mutually exclusive and one of the properties must be specified.
	FixedScale *FixedScaleSettings `pulumi:"fixedScale"`
}

// ScaleSettingsInput is an input type that accepts ScaleSettingsArgs and ScaleSettingsOutput values.
// You can construct a concrete instance of `ScaleSettingsInput` via:
//
//          ScaleSettingsArgs{...}
type ScaleSettingsInput interface {
	pulumi.Input

	ToScaleSettingsOutput() ScaleSettingsOutput
	ToScaleSettingsOutputWithContext(context.Context) ScaleSettingsOutput
}

// Defines the desired size of the pool. This can either be 'fixedScale' where the requested targetDedicatedNodes is specified, or 'autoScale' which defines a formula which is periodically reevaluated. If this property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes.
type ScaleSettingsArgs struct {
	// This property and fixedScale are mutually exclusive and one of the properties must be specified.
	AutoScale AutoScaleSettingsPtrInput `pulumi:"autoScale"`
	// This property and autoScale are mutually exclusive and one of the properties must be specified.
	FixedScale FixedScaleSettingsPtrInput `pulumi:"fixedScale"`
}

func (ScaleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSettings)(nil)).Elem()
}

func (i ScaleSettingsArgs) ToScaleSettingsOutput() ScaleSettingsOutput {
	return i.ToScaleSettingsOutputWithContext(context.Background())
}

func (i ScaleSettingsArgs) ToScaleSettingsOutputWithContext(ctx context.Context) ScaleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSettingsOutput)
}

func (i ScaleSettingsArgs) ToScaleSettingsPtrOutput() ScaleSettingsPtrOutput {
	return i.ToScaleSettingsPtrOutputWithContext(context.Background())
}

func (i ScaleSettingsArgs) ToScaleSettingsPtrOutputWithContext(ctx context.Context) ScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSettingsOutput).ToScaleSettingsPtrOutputWithContext(ctx)
}

// ScaleSettingsPtrInput is an input type that accepts ScaleSettingsArgs, ScaleSettingsPtr and ScaleSettingsPtrOutput values.
// You can construct a concrete instance of `ScaleSettingsPtrInput` via:
//
//          ScaleSettingsArgs{...}
//
//  or:
//
//          nil
type ScaleSettingsPtrInput interface {
	pulumi.Input

	ToScaleSettingsPtrOutput() ScaleSettingsPtrOutput
	ToScaleSettingsPtrOutputWithContext(context.Context) ScaleSettingsPtrOutput
}

type scaleSettingsPtrType ScaleSettingsArgs

func ScaleSettingsPtr(v *ScaleSettingsArgs) ScaleSettingsPtrInput {
	return (*scaleSettingsPtrType)(v)
}

func (*scaleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSettings)(nil)).Elem()
}

func (i *scaleSettingsPtrType) ToScaleSettingsPtrOutput() ScaleSettingsPtrOutput {
	return i.ToScaleSettingsPtrOutputWithContext(context.Background())
}

func (i *scaleSettingsPtrType) ToScaleSettingsPtrOutputWithContext(ctx context.Context) ScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSettingsPtrOutput)
}

// Defines the desired size of the pool. This can either be 'fixedScale' where the requested targetDedicatedNodes is specified, or 'autoScale' which defines a formula which is periodically reevaluated. If this property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes.
type ScaleSettingsResponse struct {
	// This property and fixedScale are mutually exclusive and one of the properties must be specified.
	AutoScale *AutoScaleSettingsResponse `pulumi:"autoScale"`
	// This property and autoScale are mutually exclusive and one of the properties must be specified.
	FixedScale *FixedScaleSettingsResponse `pulumi:"fixedScale"`
}

// Defines the desired size of the pool. This can either be 'fixedScale' where the requested targetDedicatedNodes is specified, or 'autoScale' which defines a formula which is periodically reevaluated. If this property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes.
type ScaleSettingsResponseOutput struct{ *pulumi.OutputState }

func (ScaleSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSettingsResponse)(nil)).Elem()
}

func (o ScaleSettingsResponseOutput) ToScaleSettingsResponseOutput() ScaleSettingsResponseOutput {
	return o
}

func (o ScaleSettingsResponseOutput) ToScaleSettingsResponseOutputWithContext(ctx context.Context) ScaleSettingsResponseOutput {
	return o
}

func (o ScaleSettingsResponseOutput) ToScaleSettingsResponsePtrOutput() ScaleSettingsResponsePtrOutput {
	return o.ToScaleSettingsResponsePtrOutputWithContext(context.Background())
}

func (o ScaleSettingsResponseOutput) ToScaleSettingsResponsePtrOutputWithContext(ctx context.Context) ScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v ScaleSettingsResponse) *ScaleSettingsResponse {
		return &v
	}).(ScaleSettingsResponsePtrOutput)
}

// This property and fixedScale are mutually exclusive and one of the properties must be specified.
func (o ScaleSettingsResponseOutput) AutoScale() AutoScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v ScaleSettingsResponse) *AutoScaleSettingsResponse { return v.AutoScale }).(AutoScaleSettingsResponsePtrOutput)
}

// This property and autoScale are mutually exclusive and one of the properties must be specified.
func (o ScaleSettingsResponseOutput) FixedScale() FixedScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v ScaleSettingsResponse) *FixedScaleSettingsResponse { return v.FixedScale }).(FixedScaleSettingsResponsePtrOutput)
}

type ScaleSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ScaleSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSettingsResponse)(nil)).Elem()
}

func (o ScaleSettingsResponsePtrOutput) ToScaleSettingsResponsePtrOutput() ScaleSettingsResponsePtrOutput {
	return o
}

func (o ScaleSettingsResponsePtrOutput) ToScaleSettingsResponsePtrOutputWithContext(ctx context.Context) ScaleSettingsResponsePtrOutput {
	return o
}

func (o ScaleSettingsResponsePtrOutput) Elem() ScaleSettingsResponseOutput {
	return o.ApplyT(func(v *ScaleSettingsResponse) ScaleSettingsResponse { return *v }).(ScaleSettingsResponseOutput)
}

// This property and fixedScale are mutually exclusive and one of the properties must be specified.
func (o ScaleSettingsResponsePtrOutput) AutoScale() AutoScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ScaleSettingsResponse) *AutoScaleSettingsResponse {
		if v == nil {
			return nil
		}
		return v.AutoScale
	}).(AutoScaleSettingsResponsePtrOutput)
}

// This property and autoScale are mutually exclusive and one of the properties must be specified.
func (o ScaleSettingsResponsePtrOutput) FixedScale() FixedScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ScaleSettingsResponse) *FixedScaleSettingsResponse {
		if v == nil {
			return nil
		}
		return v.FixedScale
	}).(FixedScaleSettingsResponsePtrOutput)
}

type StartTask struct {
	// The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if any other properties of the startTask are specified.
	CommandLine         *string              `pulumi:"commandLine"`
	EnvironmentSettings []EnvironmentSetting `pulumi:"environmentSettings"`
	// The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
	MaxTaskRetryCount *int           `pulumi:"maxTaskRetryCount"`
	ResourceFiles     []ResourceFile `pulumi:"resourceFiles"`
	// If omitted, the task runs as a non-administrative user unique to the task.
	UserIdentity *UserIdentity `pulumi:"userIdentity"`
	// If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false.
	WaitForSuccess *bool `pulumi:"waitForSuccess"`
}

// StartTaskInput is an input type that accepts StartTaskArgs and StartTaskOutput values.
// You can construct a concrete instance of `StartTaskInput` via:
//
//          StartTaskArgs{...}
type StartTaskInput interface {
	pulumi.Input

	ToStartTaskOutput() StartTaskOutput
	ToStartTaskOutputWithContext(context.Context) StartTaskOutput
}

type StartTaskArgs struct {
	// The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if any other properties of the startTask are specified.
	CommandLine         pulumi.StringPtrInput        `pulumi:"commandLine"`
	EnvironmentSettings EnvironmentSettingArrayInput `pulumi:"environmentSettings"`
	// The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
	MaxTaskRetryCount pulumi.IntPtrInput     `pulumi:"maxTaskRetryCount"`
	ResourceFiles     ResourceFileArrayInput `pulumi:"resourceFiles"`
	// If omitted, the task runs as a non-administrative user unique to the task.
	UserIdentity UserIdentityPtrInput `pulumi:"userIdentity"`
	// If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false.
	WaitForSuccess pulumi.BoolPtrInput `pulumi:"waitForSuccess"`
}

func (StartTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StartTask)(nil)).Elem()
}

func (i StartTaskArgs) ToStartTaskOutput() StartTaskOutput {
	return i.ToStartTaskOutputWithContext(context.Background())
}

func (i StartTaskArgs) ToStartTaskOutputWithContext(ctx context.Context) StartTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartTaskOutput)
}

func (i StartTaskArgs) ToStartTaskPtrOutput() StartTaskPtrOutput {
	return i.ToStartTaskPtrOutputWithContext(context.Background())
}

func (i StartTaskArgs) ToStartTaskPtrOutputWithContext(ctx context.Context) StartTaskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartTaskOutput).ToStartTaskPtrOutputWithContext(ctx)
}

// StartTaskPtrInput is an input type that accepts StartTaskArgs, StartTaskPtr and StartTaskPtrOutput values.
// You can construct a concrete instance of `StartTaskPtrInput` via:
//
//          StartTaskArgs{...}
//
//  or:
//
//          nil
type StartTaskPtrInput interface {
	pulumi.Input

	ToStartTaskPtrOutput() StartTaskPtrOutput
	ToStartTaskPtrOutputWithContext(context.Context) StartTaskPtrOutput
}

type startTaskPtrType StartTaskArgs

func StartTaskPtr(v *StartTaskArgs) StartTaskPtrInput {
	return (*startTaskPtrType)(v)
}

func (*startTaskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StartTask)(nil)).Elem()
}

func (i *startTaskPtrType) ToStartTaskPtrOutput() StartTaskPtrOutput {
	return i.ToStartTaskPtrOutputWithContext(context.Background())
}

func (i *startTaskPtrType) ToStartTaskPtrOutputWithContext(ctx context.Context) StartTaskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartTaskPtrOutput)
}

type StartTaskResponse struct {
	// The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if any other properties of the startTask are specified.
	CommandLine         *string                      `pulumi:"commandLine"`
	EnvironmentSettings []EnvironmentSettingResponse `pulumi:"environmentSettings"`
	// The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
	MaxTaskRetryCount *int                   `pulumi:"maxTaskRetryCount"`
	ResourceFiles     []ResourceFileResponse `pulumi:"resourceFiles"`
	// If omitted, the task runs as a non-administrative user unique to the task.
	UserIdentity *UserIdentityResponse `pulumi:"userIdentity"`
	// If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false.
	WaitForSuccess *bool `pulumi:"waitForSuccess"`
}

type StartTaskResponseOutput struct{ *pulumi.OutputState }

func (StartTaskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StartTaskResponse)(nil)).Elem()
}

func (o StartTaskResponseOutput) ToStartTaskResponseOutput() StartTaskResponseOutput {
	return o
}

func (o StartTaskResponseOutput) ToStartTaskResponseOutputWithContext(ctx context.Context) StartTaskResponseOutput {
	return o
}

func (o StartTaskResponseOutput) ToStartTaskResponsePtrOutput() StartTaskResponsePtrOutput {
	return o.ToStartTaskResponsePtrOutputWithContext(context.Background())
}

func (o StartTaskResponseOutput) ToStartTaskResponsePtrOutputWithContext(ctx context.Context) StartTaskResponsePtrOutput {
	return o.ApplyT(func(v StartTaskResponse) *StartTaskResponse {
		return &v
	}).(StartTaskResponsePtrOutput)
}

// The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if any other properties of the startTask are specified.
func (o StartTaskResponseOutput) CommandLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StartTaskResponse) *string { return v.CommandLine }).(pulumi.StringPtrOutput)
}

func (o StartTaskResponseOutput) EnvironmentSettings() EnvironmentSettingResponseArrayOutput {
	return o.ApplyT(func(v StartTaskResponse) []EnvironmentSettingResponse { return v.EnvironmentSettings }).(EnvironmentSettingResponseArrayOutput)
}

// The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
func (o StartTaskResponseOutput) MaxTaskRetryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StartTaskResponse) *int { return v.MaxTaskRetryCount }).(pulumi.IntPtrOutput)
}

func (o StartTaskResponseOutput) ResourceFiles() ResourceFileResponseArrayOutput {
	return o.ApplyT(func(v StartTaskResponse) []ResourceFileResponse { return v.ResourceFiles }).(ResourceFileResponseArrayOutput)
}

// If omitted, the task runs as a non-administrative user unique to the task.
func (o StartTaskResponseOutput) UserIdentity() UserIdentityResponsePtrOutput {
	return o.ApplyT(func(v StartTaskResponse) *UserIdentityResponse { return v.UserIdentity }).(UserIdentityResponsePtrOutput)
}

// If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false.
func (o StartTaskResponseOutput) WaitForSuccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StartTaskResponse) *bool { return v.WaitForSuccess }).(pulumi.BoolPtrOutput)
}

type StartTaskResponsePtrOutput struct{ *pulumi.OutputState }

func (StartTaskResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StartTaskResponse)(nil)).Elem()
}

func (o StartTaskResponsePtrOutput) ToStartTaskResponsePtrOutput() StartTaskResponsePtrOutput {
	return o
}

func (o StartTaskResponsePtrOutput) ToStartTaskResponsePtrOutputWithContext(ctx context.Context) StartTaskResponsePtrOutput {
	return o
}

func (o StartTaskResponsePtrOutput) Elem() StartTaskResponseOutput {
	return o.ApplyT(func(v *StartTaskResponse) StartTaskResponse { return *v }).(StartTaskResponseOutput)
}

// The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if any other properties of the startTask are specified.
func (o StartTaskResponsePtrOutput) CommandLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StartTaskResponse) *string {
		if v == nil {
			return nil
		}
		return v.CommandLine
	}).(pulumi.StringPtrOutput)
}

func (o StartTaskResponsePtrOutput) EnvironmentSettings() EnvironmentSettingResponseArrayOutput {
	return o.ApplyT(func(v *StartTaskResponse) []EnvironmentSettingResponse {
		if v == nil {
			return nil
		}
		return v.EnvironmentSettings
	}).(EnvironmentSettingResponseArrayOutput)
}

// The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
func (o StartTaskResponsePtrOutput) MaxTaskRetryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StartTaskResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxTaskRetryCount
	}).(pulumi.IntPtrOutput)
}

func (o StartTaskResponsePtrOutput) ResourceFiles() ResourceFileResponseArrayOutput {
	return o.ApplyT(func(v *StartTaskResponse) []ResourceFileResponse {
		if v == nil {
			return nil
		}
		return v.ResourceFiles
	}).(ResourceFileResponseArrayOutput)
}

// If omitted, the task runs as a non-administrative user unique to the task.
func (o StartTaskResponsePtrOutput) UserIdentity() UserIdentityResponsePtrOutput {
	return o.ApplyT(func(v *StartTaskResponse) *UserIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserIdentity
	}).(UserIdentityResponsePtrOutput)
}

// If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false.
func (o StartTaskResponsePtrOutput) WaitForSuccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StartTaskResponse) *bool {
		if v == nil {
			return nil
		}
		return v.WaitForSuccess
	}).(pulumi.BoolPtrOutput)
}

type TaskSchedulingPolicy struct {
	NodeFillType string `pulumi:"nodeFillType"`
}

// TaskSchedulingPolicyInput is an input type that accepts TaskSchedulingPolicyArgs and TaskSchedulingPolicyOutput values.
// You can construct a concrete instance of `TaskSchedulingPolicyInput` via:
//
//          TaskSchedulingPolicyArgs{...}
type TaskSchedulingPolicyInput interface {
	pulumi.Input

	ToTaskSchedulingPolicyOutput() TaskSchedulingPolicyOutput
	ToTaskSchedulingPolicyOutputWithContext(context.Context) TaskSchedulingPolicyOutput
}

type TaskSchedulingPolicyArgs struct {
	NodeFillType pulumi.StringInput `pulumi:"nodeFillType"`
}

func (TaskSchedulingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSchedulingPolicy)(nil)).Elem()
}

func (i TaskSchedulingPolicyArgs) ToTaskSchedulingPolicyOutput() TaskSchedulingPolicyOutput {
	return i.ToTaskSchedulingPolicyOutputWithContext(context.Background())
}

func (i TaskSchedulingPolicyArgs) ToTaskSchedulingPolicyOutputWithContext(ctx context.Context) TaskSchedulingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSchedulingPolicyOutput)
}

func (i TaskSchedulingPolicyArgs) ToTaskSchedulingPolicyPtrOutput() TaskSchedulingPolicyPtrOutput {
	return i.ToTaskSchedulingPolicyPtrOutputWithContext(context.Background())
}

func (i TaskSchedulingPolicyArgs) ToTaskSchedulingPolicyPtrOutputWithContext(ctx context.Context) TaskSchedulingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSchedulingPolicyOutput).ToTaskSchedulingPolicyPtrOutputWithContext(ctx)
}

// TaskSchedulingPolicyPtrInput is an input type that accepts TaskSchedulingPolicyArgs, TaskSchedulingPolicyPtr and TaskSchedulingPolicyPtrOutput values.
// You can construct a concrete instance of `TaskSchedulingPolicyPtrInput` via:
//
//          TaskSchedulingPolicyArgs{...}
//
//  or:
//
//          nil
type TaskSchedulingPolicyPtrInput interface {
	pulumi.Input

	ToTaskSchedulingPolicyPtrOutput() TaskSchedulingPolicyPtrOutput
	ToTaskSchedulingPolicyPtrOutputWithContext(context.Context) TaskSchedulingPolicyPtrOutput
}

type taskSchedulingPolicyPtrType TaskSchedulingPolicyArgs

func TaskSchedulingPolicyPtr(v *TaskSchedulingPolicyArgs) TaskSchedulingPolicyPtrInput {
	return (*taskSchedulingPolicyPtrType)(v)
}

func (*taskSchedulingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSchedulingPolicy)(nil)).Elem()
}

func (i *taskSchedulingPolicyPtrType) ToTaskSchedulingPolicyPtrOutput() TaskSchedulingPolicyPtrOutput {
	return i.ToTaskSchedulingPolicyPtrOutputWithContext(context.Background())
}

func (i *taskSchedulingPolicyPtrType) ToTaskSchedulingPolicyPtrOutputWithContext(ctx context.Context) TaskSchedulingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskSchedulingPolicyPtrOutput)
}

type TaskSchedulingPolicyResponse struct {
	NodeFillType string `pulumi:"nodeFillType"`
}

type TaskSchedulingPolicyResponseOutput struct{ *pulumi.OutputState }

func (TaskSchedulingPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSchedulingPolicyResponse)(nil)).Elem()
}

func (o TaskSchedulingPolicyResponseOutput) ToTaskSchedulingPolicyResponseOutput() TaskSchedulingPolicyResponseOutput {
	return o
}

func (o TaskSchedulingPolicyResponseOutput) ToTaskSchedulingPolicyResponseOutputWithContext(ctx context.Context) TaskSchedulingPolicyResponseOutput {
	return o
}

func (o TaskSchedulingPolicyResponseOutput) ToTaskSchedulingPolicyResponsePtrOutput() TaskSchedulingPolicyResponsePtrOutput {
	return o.ToTaskSchedulingPolicyResponsePtrOutputWithContext(context.Background())
}

func (o TaskSchedulingPolicyResponseOutput) ToTaskSchedulingPolicyResponsePtrOutputWithContext(ctx context.Context) TaskSchedulingPolicyResponsePtrOutput {
	return o.ApplyT(func(v TaskSchedulingPolicyResponse) *TaskSchedulingPolicyResponse {
		return &v
	}).(TaskSchedulingPolicyResponsePtrOutput)
}
func (o TaskSchedulingPolicyResponseOutput) NodeFillType() pulumi.StringOutput {
	return o.ApplyT(func(v TaskSchedulingPolicyResponse) string { return v.NodeFillType }).(pulumi.StringOutput)
}

type TaskSchedulingPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (TaskSchedulingPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskSchedulingPolicyResponse)(nil)).Elem()
}

func (o TaskSchedulingPolicyResponsePtrOutput) ToTaskSchedulingPolicyResponsePtrOutput() TaskSchedulingPolicyResponsePtrOutput {
	return o
}

func (o TaskSchedulingPolicyResponsePtrOutput) ToTaskSchedulingPolicyResponsePtrOutputWithContext(ctx context.Context) TaskSchedulingPolicyResponsePtrOutput {
	return o
}

func (o TaskSchedulingPolicyResponsePtrOutput) Elem() TaskSchedulingPolicyResponseOutput {
	return o.ApplyT(func(v *TaskSchedulingPolicyResponse) TaskSchedulingPolicyResponse { return *v }).(TaskSchedulingPolicyResponseOutput)
}

func (o TaskSchedulingPolicyResponsePtrOutput) NodeFillType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskSchedulingPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NodeFillType
	}).(pulumi.StringPtrOutput)
}

type UserAccount struct {
	// nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
	ElevationLevel *string `pulumi:"elevationLevel"`
	// This property is ignored if specified on a Windows pool. If not specified, the user is created with the default options.
	LinuxUserConfiguration *LinuxUserConfiguration `pulumi:"linuxUserConfiguration"`
	Name                   string                  `pulumi:"name"`
	Password               string                  `pulumi:"password"`
}

// UserAccountInput is an input type that accepts UserAccountArgs and UserAccountOutput values.
// You can construct a concrete instance of `UserAccountInput` via:
//
//          UserAccountArgs{...}
type UserAccountInput interface {
	pulumi.Input

	ToUserAccountOutput() UserAccountOutput
	ToUserAccountOutputWithContext(context.Context) UserAccountOutput
}

type UserAccountArgs struct {
	// nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
	ElevationLevel pulumi.StringPtrInput `pulumi:"elevationLevel"`
	// This property is ignored if specified on a Windows pool. If not specified, the user is created with the default options.
	LinuxUserConfiguration LinuxUserConfigurationPtrInput `pulumi:"linuxUserConfiguration"`
	Name                   pulumi.StringInput             `pulumi:"name"`
	Password               pulumi.StringInput             `pulumi:"password"`
}

func (UserAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAccount)(nil)).Elem()
}

func (i UserAccountArgs) ToUserAccountOutput() UserAccountOutput {
	return i.ToUserAccountOutputWithContext(context.Background())
}

func (i UserAccountArgs) ToUserAccountOutputWithContext(ctx context.Context) UserAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAccountOutput)
}

// UserAccountArrayInput is an input type that accepts UserAccountArray and UserAccountArrayOutput values.
// You can construct a concrete instance of `UserAccountArrayInput` via:
//
//          UserAccountArray{ UserAccountArgs{...} }
type UserAccountArrayInput interface {
	pulumi.Input

	ToUserAccountArrayOutput() UserAccountArrayOutput
	ToUserAccountArrayOutputWithContext(context.Context) UserAccountArrayOutput
}

type UserAccountArray []UserAccountInput

func (UserAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserAccount)(nil)).Elem()
}

func (i UserAccountArray) ToUserAccountArrayOutput() UserAccountArrayOutput {
	return i.ToUserAccountArrayOutputWithContext(context.Background())
}

func (i UserAccountArray) ToUserAccountArrayOutputWithContext(ctx context.Context) UserAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAccountArrayOutput)
}

type UserAccountResponse struct {
	// nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
	ElevationLevel *string `pulumi:"elevationLevel"`
	// This property is ignored if specified on a Windows pool. If not specified, the user is created with the default options.
	LinuxUserConfiguration *LinuxUserConfigurationResponse `pulumi:"linuxUserConfiguration"`
	Name                   string                          `pulumi:"name"`
	Password               string                          `pulumi:"password"`
}

type UserAccountResponseOutput struct{ *pulumi.OutputState }

func (UserAccountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAccountResponse)(nil)).Elem()
}

func (o UserAccountResponseOutput) ToUserAccountResponseOutput() UserAccountResponseOutput {
	return o
}

func (o UserAccountResponseOutput) ToUserAccountResponseOutputWithContext(ctx context.Context) UserAccountResponseOutput {
	return o
}

// nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin.
func (o UserAccountResponseOutput) ElevationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccountResponse) *string { return v.ElevationLevel }).(pulumi.StringPtrOutput)
}

// This property is ignored if specified on a Windows pool. If not specified, the user is created with the default options.
func (o UserAccountResponseOutput) LinuxUserConfiguration() LinuxUserConfigurationResponsePtrOutput {
	return o.ApplyT(func(v UserAccountResponse) *LinuxUserConfigurationResponse { return v.LinuxUserConfiguration }).(LinuxUserConfigurationResponsePtrOutput)
}

func (o UserAccountResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UserAccountResponse) string { return v.Name }).(pulumi.StringOutput)
}

func (o UserAccountResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v UserAccountResponse) string { return v.Password }).(pulumi.StringOutput)
}

type UserAccountResponseArrayOutput struct{ *pulumi.OutputState }

func (UserAccountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserAccountResponse)(nil)).Elem()
}

func (o UserAccountResponseArrayOutput) ToUserAccountResponseArrayOutput() UserAccountResponseArrayOutput {
	return o
}

func (o UserAccountResponseArrayOutput) ToUserAccountResponseArrayOutputWithContext(ctx context.Context) UserAccountResponseArrayOutput {
	return o
}

func (o UserAccountResponseArrayOutput) Index(i pulumi.IntInput) UserAccountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserAccountResponse {
		return vs[0].([]UserAccountResponse)[vs[1].(int)]
	}).(UserAccountResponseOutput)
}

// Specify either the userName or autoUser property, but not both.
type UserIdentity struct {
	// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
	AutoUser *AutoUserSpecification `pulumi:"autoUser"`
	// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
	UserName *string `pulumi:"userName"`
}

// UserIdentityInput is an input type that accepts UserIdentityArgs and UserIdentityOutput values.
// You can construct a concrete instance of `UserIdentityInput` via:
//
//          UserIdentityArgs{...}
type UserIdentityInput interface {
	pulumi.Input

	ToUserIdentityOutput() UserIdentityOutput
	ToUserIdentityOutputWithContext(context.Context) UserIdentityOutput
}

// Specify either the userName or autoUser property, but not both.
type UserIdentityArgs struct {
	// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
	AutoUser AutoUserSpecificationPtrInput `pulumi:"autoUser"`
	// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (UserIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentity)(nil)).Elem()
}

func (i UserIdentityArgs) ToUserIdentityOutput() UserIdentityOutput {
	return i.ToUserIdentityOutputWithContext(context.Background())
}

func (i UserIdentityArgs) ToUserIdentityOutputWithContext(ctx context.Context) UserIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityOutput)
}

func (i UserIdentityArgs) ToUserIdentityPtrOutput() UserIdentityPtrOutput {
	return i.ToUserIdentityPtrOutputWithContext(context.Background())
}

func (i UserIdentityArgs) ToUserIdentityPtrOutputWithContext(ctx context.Context) UserIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityOutput).ToUserIdentityPtrOutputWithContext(ctx)
}

// UserIdentityPtrInput is an input type that accepts UserIdentityArgs, UserIdentityPtr and UserIdentityPtrOutput values.
// You can construct a concrete instance of `UserIdentityPtrInput` via:
//
//          UserIdentityArgs{...}
//
//  or:
//
//          nil
type UserIdentityPtrInput interface {
	pulumi.Input

	ToUserIdentityPtrOutput() UserIdentityPtrOutput
	ToUserIdentityPtrOutputWithContext(context.Context) UserIdentityPtrOutput
}

type userIdentityPtrType UserIdentityArgs

func UserIdentityPtr(v *UserIdentityArgs) UserIdentityPtrInput {
	return (*userIdentityPtrType)(v)
}

func (*userIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserIdentity)(nil)).Elem()
}

func (i *userIdentityPtrType) ToUserIdentityPtrOutput() UserIdentityPtrOutput {
	return i.ToUserIdentityPtrOutputWithContext(context.Background())
}

func (i *userIdentityPtrType) ToUserIdentityPtrOutputWithContext(ctx context.Context) UserIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityPtrOutput)
}

// Specify either the userName or autoUser property, but not both.
type UserIdentityResponse struct {
	// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
	AutoUser *AutoUserSpecificationResponse `pulumi:"autoUser"`
	// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
	UserName *string `pulumi:"userName"`
}

// Specify either the userName or autoUser property, but not both.
type UserIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityResponse)(nil)).Elem()
}

func (o UserIdentityResponseOutput) ToUserIdentityResponseOutput() UserIdentityResponseOutput {
	return o
}

func (o UserIdentityResponseOutput) ToUserIdentityResponseOutputWithContext(ctx context.Context) UserIdentityResponseOutput {
	return o
}

func (o UserIdentityResponseOutput) ToUserIdentityResponsePtrOutput() UserIdentityResponsePtrOutput {
	return o.ToUserIdentityResponsePtrOutputWithContext(context.Background())
}

func (o UserIdentityResponseOutput) ToUserIdentityResponsePtrOutputWithContext(ctx context.Context) UserIdentityResponsePtrOutput {
	return o.ApplyT(func(v UserIdentityResponse) *UserIdentityResponse {
		return &v
	}).(UserIdentityResponsePtrOutput)
}

// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
func (o UserIdentityResponseOutput) AutoUser() AutoUserSpecificationResponsePtrOutput {
	return o.ApplyT(func(v UserIdentityResponse) *AutoUserSpecificationResponse { return v.AutoUser }).(AutoUserSpecificationResponsePtrOutput)
}

// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
func (o UserIdentityResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentityResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type UserIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (UserIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserIdentityResponse)(nil)).Elem()
}

func (o UserIdentityResponsePtrOutput) ToUserIdentityResponsePtrOutput() UserIdentityResponsePtrOutput {
	return o
}

func (o UserIdentityResponsePtrOutput) ToUserIdentityResponsePtrOutputWithContext(ctx context.Context) UserIdentityResponsePtrOutput {
	return o
}

func (o UserIdentityResponsePtrOutput) Elem() UserIdentityResponseOutput {
	return o.ApplyT(func(v *UserIdentityResponse) UserIdentityResponse { return *v }).(UserIdentityResponseOutput)
}

// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
func (o UserIdentityResponsePtrOutput) AutoUser() AutoUserSpecificationResponsePtrOutput {
	return o.ApplyT(func(v *UserIdentityResponse) *AutoUserSpecificationResponse {
		if v == nil {
			return nil
		}
		return v.AutoUser
	}).(AutoUserSpecificationResponsePtrOutput)
}

// The userName and autoUser properties are mutually exclusive; you must specify one but not both.
func (o UserIdentityResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineConfiguration struct {
	// This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
	DataDisks      []DataDisk     `pulumi:"dataDisks"`
	ImageReference ImageReference `pulumi:"imageReference"`
	// This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
	//
	//  Windows_Server - The on-premises license is for Windows Server.
	//  Windows_Client - The on-premises license is for Windows Client.
	LicenseType *string `pulumi:"licenseType"`
	// The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
	NodeAgentSkuId string  `pulumi:"nodeAgentSkuId"`
	OsDisk         *OSDisk `pulumi:"osDisk"`
	// This property must not be specified if the imageReference specifies a Linux OS image.
	WindowsConfiguration *WindowsConfiguration `pulumi:"windowsConfiguration"`
}

// VirtualMachineConfigurationInput is an input type that accepts VirtualMachineConfigurationArgs and VirtualMachineConfigurationOutput values.
// You can construct a concrete instance of `VirtualMachineConfigurationInput` via:
//
//          VirtualMachineConfigurationArgs{...}
type VirtualMachineConfigurationInput interface {
	pulumi.Input

	ToVirtualMachineConfigurationOutput() VirtualMachineConfigurationOutput
	ToVirtualMachineConfigurationOutputWithContext(context.Context) VirtualMachineConfigurationOutput
}

type VirtualMachineConfigurationArgs struct {
	// This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
	DataDisks      DataDiskArrayInput  `pulumi:"dataDisks"`
	ImageReference ImageReferenceInput `pulumi:"imageReference"`
	// This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
	//
	//  Windows_Server - The on-premises license is for Windows Server.
	//  Windows_Client - The on-premises license is for Windows Client.
	LicenseType pulumi.StringPtrInput `pulumi:"licenseType"`
	// The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
	NodeAgentSkuId pulumi.StringInput `pulumi:"nodeAgentSkuId"`
	OsDisk         OSDiskPtrInput     `pulumi:"osDisk"`
	// This property must not be specified if the imageReference specifies a Linux OS image.
	WindowsConfiguration WindowsConfigurationPtrInput `pulumi:"windowsConfiguration"`
}

func (VirtualMachineConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineConfiguration)(nil)).Elem()
}

func (i VirtualMachineConfigurationArgs) ToVirtualMachineConfigurationOutput() VirtualMachineConfigurationOutput {
	return i.ToVirtualMachineConfigurationOutputWithContext(context.Background())
}

func (i VirtualMachineConfigurationArgs) ToVirtualMachineConfigurationOutputWithContext(ctx context.Context) VirtualMachineConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationOutput)
}

func (i VirtualMachineConfigurationArgs) ToVirtualMachineConfigurationPtrOutput() VirtualMachineConfigurationPtrOutput {
	return i.ToVirtualMachineConfigurationPtrOutputWithContext(context.Background())
}

func (i VirtualMachineConfigurationArgs) ToVirtualMachineConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationOutput).ToVirtualMachineConfigurationPtrOutputWithContext(ctx)
}

// VirtualMachineConfigurationPtrInput is an input type that accepts VirtualMachineConfigurationArgs, VirtualMachineConfigurationPtr and VirtualMachineConfigurationPtrOutput values.
// You can construct a concrete instance of `VirtualMachineConfigurationPtrInput` via:
//
//          VirtualMachineConfigurationArgs{...}
//
//  or:
//
//          nil
type VirtualMachineConfigurationPtrInput interface {
	pulumi.Input

	ToVirtualMachineConfigurationPtrOutput() VirtualMachineConfigurationPtrOutput
	ToVirtualMachineConfigurationPtrOutputWithContext(context.Context) VirtualMachineConfigurationPtrOutput
}

type virtualMachineConfigurationPtrType VirtualMachineConfigurationArgs

func VirtualMachineConfigurationPtr(v *VirtualMachineConfigurationArgs) VirtualMachineConfigurationPtrInput {
	return (*virtualMachineConfigurationPtrType)(v)
}

func (*virtualMachineConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineConfiguration)(nil)).Elem()
}

func (i *virtualMachineConfigurationPtrType) ToVirtualMachineConfigurationPtrOutput() VirtualMachineConfigurationPtrOutput {
	return i.ToVirtualMachineConfigurationPtrOutputWithContext(context.Background())
}

func (i *virtualMachineConfigurationPtrType) ToVirtualMachineConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationPtrOutput)
}

type VirtualMachineConfigurationResponse struct {
	// This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
	DataDisks      []DataDiskResponse     `pulumi:"dataDisks"`
	ImageReference ImageReferenceResponse `pulumi:"imageReference"`
	// This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
	//
	//  Windows_Server - The on-premises license is for Windows Server.
	//  Windows_Client - The on-premises license is for Windows Client.
	LicenseType *string `pulumi:"licenseType"`
	// The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
	NodeAgentSkuId string          `pulumi:"nodeAgentSkuId"`
	OsDisk         *OSDiskResponse `pulumi:"osDisk"`
	// This property must not be specified if the imageReference specifies a Linux OS image.
	WindowsConfiguration *WindowsConfigurationResponse `pulumi:"windowsConfiguration"`
}

type VirtualMachineConfigurationResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineConfigurationResponseOutput) ToVirtualMachineConfigurationResponseOutput() VirtualMachineConfigurationResponseOutput {
	return o
}

func (o VirtualMachineConfigurationResponseOutput) ToVirtualMachineConfigurationResponseOutputWithContext(ctx context.Context) VirtualMachineConfigurationResponseOutput {
	return o
}

func (o VirtualMachineConfigurationResponseOutput) ToVirtualMachineConfigurationResponsePtrOutput() VirtualMachineConfigurationResponsePtrOutput {
	return o.ToVirtualMachineConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o VirtualMachineConfigurationResponseOutput) ToVirtualMachineConfigurationResponsePtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineConfigurationResponse) *VirtualMachineConfigurationResponse {
		return &v
	}).(VirtualMachineConfigurationResponsePtrOutput)
}

// This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
func (o VirtualMachineConfigurationResponseOutput) DataDisks() DataDiskResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineConfigurationResponse) []DataDiskResponse { return v.DataDisks }).(DataDiskResponseArrayOutput)
}

func (o VirtualMachineConfigurationResponseOutput) ImageReference() ImageReferenceResponseOutput {
	return o.ApplyT(func(v VirtualMachineConfigurationResponse) ImageReferenceResponse { return v.ImageReference }).(ImageReferenceResponseOutput)
}

// This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
//
//  Windows_Server - The on-premises license is for Windows Server.
//  Windows_Client - The on-premises license is for Windows Client.
func (o VirtualMachineConfigurationResponseOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineConfigurationResponse) *string { return v.LicenseType }).(pulumi.StringPtrOutput)
}

// The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
func (o VirtualMachineConfigurationResponseOutput) NodeAgentSkuId() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineConfigurationResponse) string { return v.NodeAgentSkuId }).(pulumi.StringOutput)
}

func (o VirtualMachineConfigurationResponseOutput) OsDisk() OSDiskResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineConfigurationResponse) *OSDiskResponse { return v.OsDisk }).(OSDiskResponsePtrOutput)
}

// This property must not be specified if the imageReference specifies a Linux OS image.
func (o VirtualMachineConfigurationResponseOutput) WindowsConfiguration() WindowsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineConfigurationResponse) *WindowsConfigurationResponse {
		return v.WindowsConfiguration
	}).(WindowsConfigurationResponsePtrOutput)
}

type VirtualMachineConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineConfigurationResponsePtrOutput) ToVirtualMachineConfigurationResponsePtrOutput() VirtualMachineConfigurationResponsePtrOutput {
	return o
}

func (o VirtualMachineConfigurationResponsePtrOutput) ToVirtualMachineConfigurationResponsePtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationResponsePtrOutput {
	return o
}

func (o VirtualMachineConfigurationResponsePtrOutput) Elem() VirtualMachineConfigurationResponseOutput {
	return o.ApplyT(func(v *VirtualMachineConfigurationResponse) VirtualMachineConfigurationResponse { return *v }).(VirtualMachineConfigurationResponseOutput)
}

// This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
func (o VirtualMachineConfigurationResponsePtrOutput) DataDisks() DataDiskResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineConfigurationResponse) []DataDiskResponse {
		if v == nil {
			return nil
		}
		return v.DataDisks
	}).(DataDiskResponseArrayOutput)
}

func (o VirtualMachineConfigurationResponsePtrOutput) ImageReference() ImageReferenceResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfigurationResponse) *ImageReferenceResponse {
		if v == nil {
			return nil
		}
		return &v.ImageReference
	}).(ImageReferenceResponsePtrOutput)
}

// This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
//
//  Windows_Server - The on-premises license is for Windows Server.
//  Windows_Client - The on-premises license is for Windows Client.
func (o VirtualMachineConfigurationResponsePtrOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.LicenseType
	}).(pulumi.StringPtrOutput)
}

// The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
func (o VirtualMachineConfigurationResponsePtrOutput) NodeAgentSkuId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NodeAgentSkuId
	}).(pulumi.StringPtrOutput)
}

func (o VirtualMachineConfigurationResponsePtrOutput) OsDisk() OSDiskResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfigurationResponse) *OSDiskResponse {
		if v == nil {
			return nil
		}
		return v.OsDisk
	}).(OSDiskResponsePtrOutput)
}

// This property must not be specified if the imageReference specifies a Linux OS image.
func (o VirtualMachineConfigurationResponsePtrOutput) WindowsConfiguration() WindowsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfigurationResponse) *WindowsConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.WindowsConfiguration
	}).(WindowsConfigurationResponsePtrOutput)
}

type WindowsConfiguration struct {
	// If omitted, the default value is true.
	EnableAutomaticUpdates *bool `pulumi:"enableAutomaticUpdates"`
}

// WindowsConfigurationInput is an input type that accepts WindowsConfigurationArgs and WindowsConfigurationOutput values.
// You can construct a concrete instance of `WindowsConfigurationInput` via:
//
//          WindowsConfigurationArgs{...}
type WindowsConfigurationInput interface {
	pulumi.Input

	ToWindowsConfigurationOutput() WindowsConfigurationOutput
	ToWindowsConfigurationOutputWithContext(context.Context) WindowsConfigurationOutput
}

type WindowsConfigurationArgs struct {
	// If omitted, the default value is true.
	EnableAutomaticUpdates pulumi.BoolPtrInput `pulumi:"enableAutomaticUpdates"`
}

func (WindowsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsConfiguration)(nil)).Elem()
}

func (i WindowsConfigurationArgs) ToWindowsConfigurationOutput() WindowsConfigurationOutput {
	return i.ToWindowsConfigurationOutputWithContext(context.Background())
}

func (i WindowsConfigurationArgs) ToWindowsConfigurationOutputWithContext(ctx context.Context) WindowsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsConfigurationOutput)
}

func (i WindowsConfigurationArgs) ToWindowsConfigurationPtrOutput() WindowsConfigurationPtrOutput {
	return i.ToWindowsConfigurationPtrOutputWithContext(context.Background())
}

func (i WindowsConfigurationArgs) ToWindowsConfigurationPtrOutputWithContext(ctx context.Context) WindowsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsConfigurationOutput).ToWindowsConfigurationPtrOutputWithContext(ctx)
}

// WindowsConfigurationPtrInput is an input type that accepts WindowsConfigurationArgs, WindowsConfigurationPtr and WindowsConfigurationPtrOutput values.
// You can construct a concrete instance of `WindowsConfigurationPtrInput` via:
//
//          WindowsConfigurationArgs{...}
//
//  or:
//
//          nil
type WindowsConfigurationPtrInput interface {
	pulumi.Input

	ToWindowsConfigurationPtrOutput() WindowsConfigurationPtrOutput
	ToWindowsConfigurationPtrOutputWithContext(context.Context) WindowsConfigurationPtrOutput
}

type windowsConfigurationPtrType WindowsConfigurationArgs

func WindowsConfigurationPtr(v *WindowsConfigurationArgs) WindowsConfigurationPtrInput {
	return (*windowsConfigurationPtrType)(v)
}

func (*windowsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsConfiguration)(nil)).Elem()
}

func (i *windowsConfigurationPtrType) ToWindowsConfigurationPtrOutput() WindowsConfigurationPtrOutput {
	return i.ToWindowsConfigurationPtrOutputWithContext(context.Background())
}

func (i *windowsConfigurationPtrType) ToWindowsConfigurationPtrOutputWithContext(ctx context.Context) WindowsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsConfigurationPtrOutput)
}

type WindowsConfigurationResponse struct {
	// If omitted, the default value is true.
	EnableAutomaticUpdates *bool `pulumi:"enableAutomaticUpdates"`
}

type WindowsConfigurationResponseOutput struct{ *pulumi.OutputState }

func (WindowsConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsConfigurationResponse)(nil)).Elem()
}

func (o WindowsConfigurationResponseOutput) ToWindowsConfigurationResponseOutput() WindowsConfigurationResponseOutput {
	return o
}

func (o WindowsConfigurationResponseOutput) ToWindowsConfigurationResponseOutputWithContext(ctx context.Context) WindowsConfigurationResponseOutput {
	return o
}

func (o WindowsConfigurationResponseOutput) ToWindowsConfigurationResponsePtrOutput() WindowsConfigurationResponsePtrOutput {
	return o.ToWindowsConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o WindowsConfigurationResponseOutput) ToWindowsConfigurationResponsePtrOutputWithContext(ctx context.Context) WindowsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v WindowsConfigurationResponse) *WindowsConfigurationResponse {
		return &v
	}).(WindowsConfigurationResponsePtrOutput)
}

// If omitted, the default value is true.
func (o WindowsConfigurationResponseOutput) EnableAutomaticUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WindowsConfigurationResponse) *bool { return v.EnableAutomaticUpdates }).(pulumi.BoolPtrOutput)
}

type WindowsConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (WindowsConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsConfigurationResponse)(nil)).Elem()
}

func (o WindowsConfigurationResponsePtrOutput) ToWindowsConfigurationResponsePtrOutput() WindowsConfigurationResponsePtrOutput {
	return o
}

func (o WindowsConfigurationResponsePtrOutput) ToWindowsConfigurationResponsePtrOutputWithContext(ctx context.Context) WindowsConfigurationResponsePtrOutput {
	return o
}

func (o WindowsConfigurationResponsePtrOutput) Elem() WindowsConfigurationResponseOutput {
	return o.ApplyT(func(v *WindowsConfigurationResponse) WindowsConfigurationResponse { return *v }).(WindowsConfigurationResponseOutput)
}

// If omitted, the default value is true.
func (o WindowsConfigurationResponsePtrOutput) EnableAutomaticUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAutomaticUpdates
	}).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ApplicationPackageReferenceOutput{})
	pulumi.RegisterOutputType(ApplicationPackageReferenceArrayOutput{})
	pulumi.RegisterOutputType(ApplicationPackageReferenceResponseOutput{})
	pulumi.RegisterOutputType(ApplicationPackageReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(ApplicationPackageResponseOutput{})
	pulumi.RegisterOutputType(ApplicationPackageResponseArrayOutput{})
	pulumi.RegisterOutputType(AutoScaleRunErrorResponseOutput{})
	pulumi.RegisterOutputType(AutoScaleRunErrorResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoScaleRunErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(AutoScaleRunResponseOutput{})
	pulumi.RegisterOutputType(AutoScaleRunResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoScaleSettingsOutput{})
	pulumi.RegisterOutputType(AutoScaleSettingsPtrOutput{})
	pulumi.RegisterOutputType(AutoScaleSettingsResponseOutput{})
	pulumi.RegisterOutputType(AutoScaleSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoStorageBasePropertiesOutput{})
	pulumi.RegisterOutputType(AutoStorageBasePropertiesPtrOutput{})
	pulumi.RegisterOutputType(AutoStoragePropertiesResponseOutput{})
	pulumi.RegisterOutputType(AutoStoragePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoUserSpecificationOutput{})
	pulumi.RegisterOutputType(AutoUserSpecificationPtrOutput{})
	pulumi.RegisterOutputType(AutoUserSpecificationResponseOutput{})
	pulumi.RegisterOutputType(AutoUserSpecificationResponsePtrOutput{})
	pulumi.RegisterOutputType(CertificateReferenceOutput{})
	pulumi.RegisterOutputType(CertificateReferenceArrayOutput{})
	pulumi.RegisterOutputType(CertificateReferenceResponseOutput{})
	pulumi.RegisterOutputType(CertificateReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(CloudServiceConfigurationOutput{})
	pulumi.RegisterOutputType(CloudServiceConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CloudServiceConfigurationResponseOutput{})
	pulumi.RegisterOutputType(CloudServiceConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(DataDiskOutput{})
	pulumi.RegisterOutputType(DataDiskArrayOutput{})
	pulumi.RegisterOutputType(DataDiskResponseOutput{})
	pulumi.RegisterOutputType(DataDiskResponseArrayOutput{})
	pulumi.RegisterOutputType(DeleteCertificateErrorResponseOutput{})
	pulumi.RegisterOutputType(DeleteCertificateErrorResponsePtrOutput{})
	pulumi.RegisterOutputType(DeleteCertificateErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(DeploymentConfigurationOutput{})
	pulumi.RegisterOutputType(DeploymentConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DeploymentConfigurationResponseOutput{})
	pulumi.RegisterOutputType(DeploymentConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(EnvironmentSettingOutput{})
	pulumi.RegisterOutputType(EnvironmentSettingArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentSettingResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentSettingResponseArrayOutput{})
	pulumi.RegisterOutputType(FixedScaleSettingsOutput{})
	pulumi.RegisterOutputType(FixedScaleSettingsPtrOutput{})
	pulumi.RegisterOutputType(FixedScaleSettingsResponseOutput{})
	pulumi.RegisterOutputType(FixedScaleSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageReferenceOutput{})
	pulumi.RegisterOutputType(ImageReferencePtrOutput{})
	pulumi.RegisterOutputType(ImageReferenceResponseOutput{})
	pulumi.RegisterOutputType(ImageReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(InboundNatPoolOutput{})
	pulumi.RegisterOutputType(InboundNatPoolArrayOutput{})
	pulumi.RegisterOutputType(InboundNatPoolResponseOutput{})
	pulumi.RegisterOutputType(InboundNatPoolResponseArrayOutput{})
	pulumi.RegisterOutputType(KeyVaultReferenceOutput{})
	pulumi.RegisterOutputType(KeyVaultReferencePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultReferenceResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(LinuxUserConfigurationOutput{})
	pulumi.RegisterOutputType(LinuxUserConfigurationPtrOutput{})
	pulumi.RegisterOutputType(LinuxUserConfigurationResponseOutput{})
	pulumi.RegisterOutputType(LinuxUserConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(MetadataItemOutput{})
	pulumi.RegisterOutputType(MetadataItemArrayOutput{})
	pulumi.RegisterOutputType(MetadataItemResponseOutput{})
	pulumi.RegisterOutputType(MetadataItemResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkConfigurationOutput{})
	pulumi.RegisterOutputType(NetworkConfigurationPtrOutput{})
	pulumi.RegisterOutputType(NetworkConfigurationResponseOutput{})
	pulumi.RegisterOutputType(NetworkConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(NetworkSecurityGroupRuleOutput{})
	pulumi.RegisterOutputType(NetworkSecurityGroupRuleArrayOutput{})
	pulumi.RegisterOutputType(NetworkSecurityGroupRuleResponseOutput{})
	pulumi.RegisterOutputType(NetworkSecurityGroupRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(OSDiskOutput{})
	pulumi.RegisterOutputType(OSDiskPtrOutput{})
	pulumi.RegisterOutputType(OSDiskResponseOutput{})
	pulumi.RegisterOutputType(OSDiskResponsePtrOutput{})
	pulumi.RegisterOutputType(PoolEndpointConfigurationOutput{})
	pulumi.RegisterOutputType(PoolEndpointConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PoolEndpointConfigurationResponseOutput{})
	pulumi.RegisterOutputType(PoolEndpointConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ResizeErrorResponseOutput{})
	pulumi.RegisterOutputType(ResizeErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(ResizeOperationStatusResponseOutput{})
	pulumi.RegisterOutputType(ResizeOperationStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceFileOutput{})
	pulumi.RegisterOutputType(ResourceFileArrayOutput{})
	pulumi.RegisterOutputType(ResourceFileResponseOutput{})
	pulumi.RegisterOutputType(ResourceFileResponseArrayOutput{})
	pulumi.RegisterOutputType(ScaleSettingsOutput{})
	pulumi.RegisterOutputType(ScaleSettingsPtrOutput{})
	pulumi.RegisterOutputType(ScaleSettingsResponseOutput{})
	pulumi.RegisterOutputType(ScaleSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(StartTaskOutput{})
	pulumi.RegisterOutputType(StartTaskPtrOutput{})
	pulumi.RegisterOutputType(StartTaskResponseOutput{})
	pulumi.RegisterOutputType(StartTaskResponsePtrOutput{})
	pulumi.RegisterOutputType(TaskSchedulingPolicyOutput{})
	pulumi.RegisterOutputType(TaskSchedulingPolicyPtrOutput{})
	pulumi.RegisterOutputType(TaskSchedulingPolicyResponseOutput{})
	pulumi.RegisterOutputType(TaskSchedulingPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(UserAccountOutput{})
	pulumi.RegisterOutputType(UserAccountArrayOutput{})
	pulumi.RegisterOutputType(UserAccountResponseOutput{})
	pulumi.RegisterOutputType(UserAccountResponseArrayOutput{})
	pulumi.RegisterOutputType(UserIdentityOutput{})
	pulumi.RegisterOutputType(UserIdentityPtrOutput{})
	pulumi.RegisterOutputType(UserIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineConfigurationOutput{})
	pulumi.RegisterOutputType(VirtualMachineConfigurationPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineConfigurationResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(WindowsConfigurationOutput{})
	pulumi.RegisterOutputType(WindowsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(WindowsConfigurationResponseOutput{})
	pulumi.RegisterOutputType(WindowsConfigurationResponsePtrOutput{})
}
