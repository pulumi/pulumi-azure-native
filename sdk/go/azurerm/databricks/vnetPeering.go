// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package databricks

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Peerings in a VirtualNetwork resource
type VNetPeering struct {
	pulumi.CustomResourceState

	// Name of the virtual network peering resource
	Name pulumi.StringOutput `pulumi:"name"`
	// List of properties for vNet Peering
	Properties VirtualNetworkPeeringPropertiesFormatResponseOutput `pulumi:"properties"`
	// type of the virtual network peering resource
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewVNetPeering registers a new resource with the given unique name, arguments, and options.
func NewVNetPeering(ctx *pulumi.Context,
	name string, args *VNetPeeringArgs, opts ...pulumi.ResourceOption) (*VNetPeering, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.Properties == nil {
		return nil, errors.New("missing required argument 'Properties'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.WorkspaceName == nil {
		return nil, errors.New("missing required argument 'WorkspaceName'")
	}
	if args == nil {
		args = &VNetPeeringArgs{}
	}
	var resource VNetPeering
	err := ctx.RegisterResource("azurerm:databricks:vNetPeering", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVNetPeering gets an existing VNetPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVNetPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VNetPeeringState, opts ...pulumi.ResourceOption) (*VNetPeering, error) {
	var resource VNetPeering
	err := ctx.ReadResource("azurerm:databricks:vNetPeering", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VNetPeering resources.
type vnetPeeringState struct {
	// Name of the virtual network peering resource
	Name *string `pulumi:"name"`
	// List of properties for vNet Peering
	Properties *VirtualNetworkPeeringPropertiesFormatResponse `pulumi:"properties"`
	// type of the virtual network peering resource
	Type *string `pulumi:"type"`
}

type VNetPeeringState struct {
	// Name of the virtual network peering resource
	Name pulumi.StringPtrInput
	// List of properties for vNet Peering
	Properties VirtualNetworkPeeringPropertiesFormatResponsePtrInput
	// type of the virtual network peering resource
	Type pulumi.StringPtrInput
}

func (VNetPeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*vnetPeeringState)(nil)).Elem()
}

type vnetPeeringArgs struct {
	// The name of the workspace vNet peering.
	Name string `pulumi:"name"`
	// List of properties for vNet Peering
	Properties VirtualNetworkPeeringPropertiesFormat `pulumi:"properties"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the workspace.
	WorkspaceName string `pulumi:"workspaceName"`
}

// The set of arguments for constructing a VNetPeering resource.
type VNetPeeringArgs struct {
	// The name of the workspace vNet peering.
	Name pulumi.StringInput
	// List of properties for vNet Peering
	Properties VirtualNetworkPeeringPropertiesFormatInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the workspace.
	WorkspaceName pulumi.StringInput
}

func (VNetPeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vnetPeeringArgs)(nil)).Elem()
}
