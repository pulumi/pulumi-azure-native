// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20191001

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The destination information for the delivery of the export.
type ExportDeliveryDestination struct {
	// The name of the container where exports will be uploaded.
	Container string `pulumi:"container"`
	// The resource id of the storage account where exports will be delivered.
	ResourceId string `pulumi:"resourceId"`
	// The name of the directory where exports will be uploaded.
	RootFolderPath *string `pulumi:"rootFolderPath"`
}

// ExportDeliveryDestinationInput is an input type that accepts ExportDeliveryDestinationArgs and ExportDeliveryDestinationOutput values.
// You can construct a concrete instance of `ExportDeliveryDestinationInput` via:
//
//          ExportDeliveryDestinationArgs{...}
type ExportDeliveryDestinationInput interface {
	pulumi.Input

	ToExportDeliveryDestinationOutput() ExportDeliveryDestinationOutput
	ToExportDeliveryDestinationOutputWithContext(context.Context) ExportDeliveryDestinationOutput
}

// The destination information for the delivery of the export.
type ExportDeliveryDestinationArgs struct {
	// The name of the container where exports will be uploaded.
	Container pulumi.StringInput `pulumi:"container"`
	// The resource id of the storage account where exports will be delivered.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// The name of the directory where exports will be uploaded.
	RootFolderPath pulumi.StringPtrInput `pulumi:"rootFolderPath"`
}

func (ExportDeliveryDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryDestination)(nil)).Elem()
}

func (i ExportDeliveryDestinationArgs) ToExportDeliveryDestinationOutput() ExportDeliveryDestinationOutput {
	return i.ToExportDeliveryDestinationOutputWithContext(context.Background())
}

func (i ExportDeliveryDestinationArgs) ToExportDeliveryDestinationOutputWithContext(ctx context.Context) ExportDeliveryDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryDestinationOutput)
}

func (i ExportDeliveryDestinationArgs) ToExportDeliveryDestinationPtrOutput() ExportDeliveryDestinationPtrOutput {
	return i.ToExportDeliveryDestinationPtrOutputWithContext(context.Background())
}

func (i ExportDeliveryDestinationArgs) ToExportDeliveryDestinationPtrOutputWithContext(ctx context.Context) ExportDeliveryDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryDestinationOutput).ToExportDeliveryDestinationPtrOutputWithContext(ctx)
}

// ExportDeliveryDestinationPtrInput is an input type that accepts ExportDeliveryDestinationArgs, ExportDeliveryDestinationPtr and ExportDeliveryDestinationPtrOutput values.
// You can construct a concrete instance of `ExportDeliveryDestinationPtrInput` via:
//
//          ExportDeliveryDestinationArgs{...}
//
//  or:
//
//          nil
type ExportDeliveryDestinationPtrInput interface {
	pulumi.Input

	ToExportDeliveryDestinationPtrOutput() ExportDeliveryDestinationPtrOutput
	ToExportDeliveryDestinationPtrOutputWithContext(context.Context) ExportDeliveryDestinationPtrOutput
}

type exportDeliveryDestinationPtrType ExportDeliveryDestinationArgs

func ExportDeliveryDestinationPtr(v *ExportDeliveryDestinationArgs) ExportDeliveryDestinationPtrInput {
	return (*exportDeliveryDestinationPtrType)(v)
}

func (*exportDeliveryDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDeliveryDestination)(nil)).Elem()
}

func (i *exportDeliveryDestinationPtrType) ToExportDeliveryDestinationPtrOutput() ExportDeliveryDestinationPtrOutput {
	return i.ToExportDeliveryDestinationPtrOutputWithContext(context.Background())
}

func (i *exportDeliveryDestinationPtrType) ToExportDeliveryDestinationPtrOutputWithContext(ctx context.Context) ExportDeliveryDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryDestinationPtrOutput)
}

// The destination information for the delivery of the export.
type ExportDeliveryDestinationResponse struct {
	// The name of the container where exports will be uploaded.
	Container string `pulumi:"container"`
	// The resource id of the storage account where exports will be delivered.
	ResourceId string `pulumi:"resourceId"`
	// The name of the directory where exports will be uploaded.
	RootFolderPath *string `pulumi:"rootFolderPath"`
}

// The destination information for the delivery of the export.
type ExportDeliveryDestinationResponseOutput struct{ *pulumi.OutputState }

func (ExportDeliveryDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryDestinationResponse)(nil)).Elem()
}

func (o ExportDeliveryDestinationResponseOutput) ToExportDeliveryDestinationResponseOutput() ExportDeliveryDestinationResponseOutput {
	return o
}

func (o ExportDeliveryDestinationResponseOutput) ToExportDeliveryDestinationResponseOutputWithContext(ctx context.Context) ExportDeliveryDestinationResponseOutput {
	return o
}

func (o ExportDeliveryDestinationResponseOutput) ToExportDeliveryDestinationResponsePtrOutput() ExportDeliveryDestinationResponsePtrOutput {
	return o.ToExportDeliveryDestinationResponsePtrOutputWithContext(context.Background())
}

func (o ExportDeliveryDestinationResponseOutput) ToExportDeliveryDestinationResponsePtrOutputWithContext(ctx context.Context) ExportDeliveryDestinationResponsePtrOutput {
	return o.ApplyT(func(v ExportDeliveryDestinationResponse) *ExportDeliveryDestinationResponse {
		return &v
	}).(ExportDeliveryDestinationResponsePtrOutput)
}

// The name of the container where exports will be uploaded.
func (o ExportDeliveryDestinationResponseOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v ExportDeliveryDestinationResponse) string { return v.Container }).(pulumi.StringOutput)
}

// The resource id of the storage account where exports will be delivered.
func (o ExportDeliveryDestinationResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ExportDeliveryDestinationResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The name of the directory where exports will be uploaded.
func (o ExportDeliveryDestinationResponseOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportDeliveryDestinationResponse) *string { return v.RootFolderPath }).(pulumi.StringPtrOutput)
}

type ExportDeliveryDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportDeliveryDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDeliveryDestinationResponse)(nil)).Elem()
}

func (o ExportDeliveryDestinationResponsePtrOutput) ToExportDeliveryDestinationResponsePtrOutput() ExportDeliveryDestinationResponsePtrOutput {
	return o
}

func (o ExportDeliveryDestinationResponsePtrOutput) ToExportDeliveryDestinationResponsePtrOutputWithContext(ctx context.Context) ExportDeliveryDestinationResponsePtrOutput {
	return o
}

func (o ExportDeliveryDestinationResponsePtrOutput) Elem() ExportDeliveryDestinationResponseOutput {
	return o.ApplyT(func(v *ExportDeliveryDestinationResponse) ExportDeliveryDestinationResponse { return *v }).(ExportDeliveryDestinationResponseOutput)
}

// The name of the container where exports will be uploaded.
func (o ExportDeliveryDestinationResponsePtrOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportDeliveryDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Container
	}).(pulumi.StringPtrOutput)
}

// The resource id of the storage account where exports will be delivered.
func (o ExportDeliveryDestinationResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportDeliveryDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// The name of the directory where exports will be uploaded.
func (o ExportDeliveryDestinationResponsePtrOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportDeliveryDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.RootFolderPath
	}).(pulumi.StringPtrOutput)
}

// The delivery information associated with a export.
type ExportDeliveryInfo struct {
	// Has destination for the export being delivered.
	Destination ExportDeliveryDestination `pulumi:"destination"`
}

// ExportDeliveryInfoInput is an input type that accepts ExportDeliveryInfoArgs and ExportDeliveryInfoOutput values.
// You can construct a concrete instance of `ExportDeliveryInfoInput` via:
//
//          ExportDeliveryInfoArgs{...}
type ExportDeliveryInfoInput interface {
	pulumi.Input

	ToExportDeliveryInfoOutput() ExportDeliveryInfoOutput
	ToExportDeliveryInfoOutputWithContext(context.Context) ExportDeliveryInfoOutput
}

// The delivery information associated with a export.
type ExportDeliveryInfoArgs struct {
	// Has destination for the export being delivered.
	Destination ExportDeliveryDestinationInput `pulumi:"destination"`
}

func (ExportDeliveryInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryInfo)(nil)).Elem()
}

func (i ExportDeliveryInfoArgs) ToExportDeliveryInfoOutput() ExportDeliveryInfoOutput {
	return i.ToExportDeliveryInfoOutputWithContext(context.Background())
}

func (i ExportDeliveryInfoArgs) ToExportDeliveryInfoOutputWithContext(ctx context.Context) ExportDeliveryInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryInfoOutput)
}

func (i ExportDeliveryInfoArgs) ToExportDeliveryInfoPtrOutput() ExportDeliveryInfoPtrOutput {
	return i.ToExportDeliveryInfoPtrOutputWithContext(context.Background())
}

func (i ExportDeliveryInfoArgs) ToExportDeliveryInfoPtrOutputWithContext(ctx context.Context) ExportDeliveryInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryInfoOutput).ToExportDeliveryInfoPtrOutputWithContext(ctx)
}

// ExportDeliveryInfoPtrInput is an input type that accepts ExportDeliveryInfoArgs, ExportDeliveryInfoPtr and ExportDeliveryInfoPtrOutput values.
// You can construct a concrete instance of `ExportDeliveryInfoPtrInput` via:
//
//          ExportDeliveryInfoArgs{...}
//
//  or:
//
//          nil
type ExportDeliveryInfoPtrInput interface {
	pulumi.Input

	ToExportDeliveryInfoPtrOutput() ExportDeliveryInfoPtrOutput
	ToExportDeliveryInfoPtrOutputWithContext(context.Context) ExportDeliveryInfoPtrOutput
}

type exportDeliveryInfoPtrType ExportDeliveryInfoArgs

func ExportDeliveryInfoPtr(v *ExportDeliveryInfoArgs) ExportDeliveryInfoPtrInput {
	return (*exportDeliveryInfoPtrType)(v)
}

func (*exportDeliveryInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDeliveryInfo)(nil)).Elem()
}

func (i *exportDeliveryInfoPtrType) ToExportDeliveryInfoPtrOutput() ExportDeliveryInfoPtrOutput {
	return i.ToExportDeliveryInfoPtrOutputWithContext(context.Background())
}

func (i *exportDeliveryInfoPtrType) ToExportDeliveryInfoPtrOutputWithContext(ctx context.Context) ExportDeliveryInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryInfoPtrOutput)
}

// The delivery information associated with a export.
type ExportDeliveryInfoResponse struct {
	// Has destination for the export being delivered.
	Destination ExportDeliveryDestinationResponse `pulumi:"destination"`
}

// The delivery information associated with a export.
type ExportDeliveryInfoResponseOutput struct{ *pulumi.OutputState }

func (ExportDeliveryInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryInfoResponse)(nil)).Elem()
}

func (o ExportDeliveryInfoResponseOutput) ToExportDeliveryInfoResponseOutput() ExportDeliveryInfoResponseOutput {
	return o
}

func (o ExportDeliveryInfoResponseOutput) ToExportDeliveryInfoResponseOutputWithContext(ctx context.Context) ExportDeliveryInfoResponseOutput {
	return o
}

func (o ExportDeliveryInfoResponseOutput) ToExportDeliveryInfoResponsePtrOutput() ExportDeliveryInfoResponsePtrOutput {
	return o.ToExportDeliveryInfoResponsePtrOutputWithContext(context.Background())
}

func (o ExportDeliveryInfoResponseOutput) ToExportDeliveryInfoResponsePtrOutputWithContext(ctx context.Context) ExportDeliveryInfoResponsePtrOutput {
	return o.ApplyT(func(v ExportDeliveryInfoResponse) *ExportDeliveryInfoResponse {
		return &v
	}).(ExportDeliveryInfoResponsePtrOutput)
}

// Has destination for the export being delivered.
func (o ExportDeliveryInfoResponseOutput) Destination() ExportDeliveryDestinationResponseOutput {
	return o.ApplyT(func(v ExportDeliveryInfoResponse) ExportDeliveryDestinationResponse { return v.Destination }).(ExportDeliveryDestinationResponseOutput)
}

type ExportDeliveryInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportDeliveryInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDeliveryInfoResponse)(nil)).Elem()
}

func (o ExportDeliveryInfoResponsePtrOutput) ToExportDeliveryInfoResponsePtrOutput() ExportDeliveryInfoResponsePtrOutput {
	return o
}

func (o ExportDeliveryInfoResponsePtrOutput) ToExportDeliveryInfoResponsePtrOutputWithContext(ctx context.Context) ExportDeliveryInfoResponsePtrOutput {
	return o
}

func (o ExportDeliveryInfoResponsePtrOutput) Elem() ExportDeliveryInfoResponseOutput {
	return o.ApplyT(func(v *ExportDeliveryInfoResponse) ExportDeliveryInfoResponse { return *v }).(ExportDeliveryInfoResponseOutput)
}

// Has destination for the export being delivered.
func (o ExportDeliveryInfoResponsePtrOutput) Destination() ExportDeliveryDestinationResponsePtrOutput {
	return o.ApplyT(func(v *ExportDeliveryInfoResponse) *ExportDeliveryDestinationResponse {
		if v == nil {
			return nil
		}
		return &v.Destination
	}).(ExportDeliveryDestinationResponsePtrOutput)
}

// The start and end date for recurrence schedule.
type ExportRecurrencePeriod struct {
	// The start date of recurrence.
	From string `pulumi:"from"`
	// The end date of recurrence.
	To *string `pulumi:"to"`
}

// ExportRecurrencePeriodInput is an input type that accepts ExportRecurrencePeriodArgs and ExportRecurrencePeriodOutput values.
// You can construct a concrete instance of `ExportRecurrencePeriodInput` via:
//
//          ExportRecurrencePeriodArgs{...}
type ExportRecurrencePeriodInput interface {
	pulumi.Input

	ToExportRecurrencePeriodOutput() ExportRecurrencePeriodOutput
	ToExportRecurrencePeriodOutputWithContext(context.Context) ExportRecurrencePeriodOutput
}

// The start and end date for recurrence schedule.
type ExportRecurrencePeriodArgs struct {
	// The start date of recurrence.
	From pulumi.StringInput `pulumi:"from"`
	// The end date of recurrence.
	To pulumi.StringPtrInput `pulumi:"to"`
}

func (ExportRecurrencePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportRecurrencePeriod)(nil)).Elem()
}

func (i ExportRecurrencePeriodArgs) ToExportRecurrencePeriodOutput() ExportRecurrencePeriodOutput {
	return i.ToExportRecurrencePeriodOutputWithContext(context.Background())
}

func (i ExportRecurrencePeriodArgs) ToExportRecurrencePeriodOutputWithContext(ctx context.Context) ExportRecurrencePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRecurrencePeriodOutput)
}

func (i ExportRecurrencePeriodArgs) ToExportRecurrencePeriodPtrOutput() ExportRecurrencePeriodPtrOutput {
	return i.ToExportRecurrencePeriodPtrOutputWithContext(context.Background())
}

func (i ExportRecurrencePeriodArgs) ToExportRecurrencePeriodPtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRecurrencePeriodOutput).ToExportRecurrencePeriodPtrOutputWithContext(ctx)
}

// ExportRecurrencePeriodPtrInput is an input type that accepts ExportRecurrencePeriodArgs, ExportRecurrencePeriodPtr and ExportRecurrencePeriodPtrOutput values.
// You can construct a concrete instance of `ExportRecurrencePeriodPtrInput` via:
//
//          ExportRecurrencePeriodArgs{...}
//
//  or:
//
//          nil
type ExportRecurrencePeriodPtrInput interface {
	pulumi.Input

	ToExportRecurrencePeriodPtrOutput() ExportRecurrencePeriodPtrOutput
	ToExportRecurrencePeriodPtrOutputWithContext(context.Context) ExportRecurrencePeriodPtrOutput
}

type exportRecurrencePeriodPtrType ExportRecurrencePeriodArgs

func ExportRecurrencePeriodPtr(v *ExportRecurrencePeriodArgs) ExportRecurrencePeriodPtrInput {
	return (*exportRecurrencePeriodPtrType)(v)
}

func (*exportRecurrencePeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportRecurrencePeriod)(nil)).Elem()
}

func (i *exportRecurrencePeriodPtrType) ToExportRecurrencePeriodPtrOutput() ExportRecurrencePeriodPtrOutput {
	return i.ToExportRecurrencePeriodPtrOutputWithContext(context.Background())
}

func (i *exportRecurrencePeriodPtrType) ToExportRecurrencePeriodPtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRecurrencePeriodPtrOutput)
}

// The start and end date for recurrence schedule.
type ExportRecurrencePeriodResponse struct {
	// The start date of recurrence.
	From string `pulumi:"from"`
	// The end date of recurrence.
	To *string `pulumi:"to"`
}

// The start and end date for recurrence schedule.
type ExportRecurrencePeriodResponseOutput struct{ *pulumi.OutputState }

func (ExportRecurrencePeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportRecurrencePeriodResponse)(nil)).Elem()
}

func (o ExportRecurrencePeriodResponseOutput) ToExportRecurrencePeriodResponseOutput() ExportRecurrencePeriodResponseOutput {
	return o
}

func (o ExportRecurrencePeriodResponseOutput) ToExportRecurrencePeriodResponseOutputWithContext(ctx context.Context) ExportRecurrencePeriodResponseOutput {
	return o
}

func (o ExportRecurrencePeriodResponseOutput) ToExportRecurrencePeriodResponsePtrOutput() ExportRecurrencePeriodResponsePtrOutput {
	return o.ToExportRecurrencePeriodResponsePtrOutputWithContext(context.Background())
}

func (o ExportRecurrencePeriodResponseOutput) ToExportRecurrencePeriodResponsePtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodResponsePtrOutput {
	return o.ApplyT(func(v ExportRecurrencePeriodResponse) *ExportRecurrencePeriodResponse {
		return &v
	}).(ExportRecurrencePeriodResponsePtrOutput)
}

// The start date of recurrence.
func (o ExportRecurrencePeriodResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ExportRecurrencePeriodResponse) string { return v.From }).(pulumi.StringOutput)
}

// The end date of recurrence.
func (o ExportRecurrencePeriodResponseOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportRecurrencePeriodResponse) *string { return v.To }).(pulumi.StringPtrOutput)
}

type ExportRecurrencePeriodResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportRecurrencePeriodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportRecurrencePeriodResponse)(nil)).Elem()
}

func (o ExportRecurrencePeriodResponsePtrOutput) ToExportRecurrencePeriodResponsePtrOutput() ExportRecurrencePeriodResponsePtrOutput {
	return o
}

func (o ExportRecurrencePeriodResponsePtrOutput) ToExportRecurrencePeriodResponsePtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodResponsePtrOutput {
	return o
}

func (o ExportRecurrencePeriodResponsePtrOutput) Elem() ExportRecurrencePeriodResponseOutput {
	return o.ApplyT(func(v *ExportRecurrencePeriodResponse) ExportRecurrencePeriodResponse { return *v }).(ExportRecurrencePeriodResponseOutput)
}

// The start date of recurrence.
func (o ExportRecurrencePeriodResponsePtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportRecurrencePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date of recurrence.
func (o ExportRecurrencePeriodResponsePtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportRecurrencePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return v.To
	}).(pulumi.StringPtrOutput)
}

// The schedule associated with a export.
type ExportSchedule struct {
	// The schedule recurrence.
	Recurrence string `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod *ExportRecurrencePeriod `pulumi:"recurrencePeriod"`
	// The status of the schedule. Whether active or not. If inactive, the export's scheduled execution is paused.
	Status *string `pulumi:"status"`
}

// ExportScheduleInput is an input type that accepts ExportScheduleArgs and ExportScheduleOutput values.
// You can construct a concrete instance of `ExportScheduleInput` via:
//
//          ExportScheduleArgs{...}
type ExportScheduleInput interface {
	pulumi.Input

	ToExportScheduleOutput() ExportScheduleOutput
	ToExportScheduleOutputWithContext(context.Context) ExportScheduleOutput
}

// The schedule associated with a export.
type ExportScheduleArgs struct {
	// The schedule recurrence.
	Recurrence pulumi.StringInput `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod ExportRecurrencePeriodPtrInput `pulumi:"recurrencePeriod"`
	// The status of the schedule. Whether active or not. If inactive, the export's scheduled execution is paused.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ExportScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportSchedule)(nil)).Elem()
}

func (i ExportScheduleArgs) ToExportScheduleOutput() ExportScheduleOutput {
	return i.ToExportScheduleOutputWithContext(context.Background())
}

func (i ExportScheduleArgs) ToExportScheduleOutputWithContext(ctx context.Context) ExportScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportScheduleOutput)
}

func (i ExportScheduleArgs) ToExportSchedulePtrOutput() ExportSchedulePtrOutput {
	return i.ToExportSchedulePtrOutputWithContext(context.Background())
}

func (i ExportScheduleArgs) ToExportSchedulePtrOutputWithContext(ctx context.Context) ExportSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportScheduleOutput).ToExportSchedulePtrOutputWithContext(ctx)
}

// ExportSchedulePtrInput is an input type that accepts ExportScheduleArgs, ExportSchedulePtr and ExportSchedulePtrOutput values.
// You can construct a concrete instance of `ExportSchedulePtrInput` via:
//
//          ExportScheduleArgs{...}
//
//  or:
//
//          nil
type ExportSchedulePtrInput interface {
	pulumi.Input

	ToExportSchedulePtrOutput() ExportSchedulePtrOutput
	ToExportSchedulePtrOutputWithContext(context.Context) ExportSchedulePtrOutput
}

type exportSchedulePtrType ExportScheduleArgs

func ExportSchedulePtr(v *ExportScheduleArgs) ExportSchedulePtrInput {
	return (*exportSchedulePtrType)(v)
}

func (*exportSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportSchedule)(nil)).Elem()
}

func (i *exportSchedulePtrType) ToExportSchedulePtrOutput() ExportSchedulePtrOutput {
	return i.ToExportSchedulePtrOutputWithContext(context.Background())
}

func (i *exportSchedulePtrType) ToExportSchedulePtrOutputWithContext(ctx context.Context) ExportSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportSchedulePtrOutput)
}

// The schedule associated with a export.
type ExportScheduleResponse struct {
	// The schedule recurrence.
	Recurrence string `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod *ExportRecurrencePeriodResponse `pulumi:"recurrencePeriod"`
	// The status of the schedule. Whether active or not. If inactive, the export's scheduled execution is paused.
	Status *string `pulumi:"status"`
}

// The schedule associated with a export.
type ExportScheduleResponseOutput struct{ *pulumi.OutputState }

func (ExportScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportScheduleResponse)(nil)).Elem()
}

func (o ExportScheduleResponseOutput) ToExportScheduleResponseOutput() ExportScheduleResponseOutput {
	return o
}

func (o ExportScheduleResponseOutput) ToExportScheduleResponseOutputWithContext(ctx context.Context) ExportScheduleResponseOutput {
	return o
}

func (o ExportScheduleResponseOutput) ToExportScheduleResponsePtrOutput() ExportScheduleResponsePtrOutput {
	return o.ToExportScheduleResponsePtrOutputWithContext(context.Background())
}

func (o ExportScheduleResponseOutput) ToExportScheduleResponsePtrOutputWithContext(ctx context.Context) ExportScheduleResponsePtrOutput {
	return o.ApplyT(func(v ExportScheduleResponse) *ExportScheduleResponse {
		return &v
	}).(ExportScheduleResponsePtrOutput)
}

// The schedule recurrence.
func (o ExportScheduleResponseOutput) Recurrence() pulumi.StringOutput {
	return o.ApplyT(func(v ExportScheduleResponse) string { return v.Recurrence }).(pulumi.StringOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ExportScheduleResponseOutput) RecurrencePeriod() ExportRecurrencePeriodResponsePtrOutput {
	return o.ApplyT(func(v ExportScheduleResponse) *ExportRecurrencePeriodResponse { return v.RecurrencePeriod }).(ExportRecurrencePeriodResponsePtrOutput)
}

// The status of the schedule. Whether active or not. If inactive, the export's scheduled execution is paused.
func (o ExportScheduleResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportScheduleResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ExportScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportScheduleResponse)(nil)).Elem()
}

func (o ExportScheduleResponsePtrOutput) ToExportScheduleResponsePtrOutput() ExportScheduleResponsePtrOutput {
	return o
}

func (o ExportScheduleResponsePtrOutput) ToExportScheduleResponsePtrOutputWithContext(ctx context.Context) ExportScheduleResponsePtrOutput {
	return o
}

func (o ExportScheduleResponsePtrOutput) Elem() ExportScheduleResponseOutput {
	return o.ApplyT(func(v *ExportScheduleResponse) ExportScheduleResponse { return *v }).(ExportScheduleResponseOutput)
}

// The schedule recurrence.
func (o ExportScheduleResponsePtrOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Recurrence
	}).(pulumi.StringPtrOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ExportScheduleResponsePtrOutput) RecurrencePeriod() ExportRecurrencePeriodResponsePtrOutput {
	return o.ApplyT(func(v *ExportScheduleResponse) *ExportRecurrencePeriodResponse {
		if v == nil {
			return nil
		}
		return v.RecurrencePeriod
	}).(ExportRecurrencePeriodResponsePtrOutput)
}

// The status of the schedule. Whether active or not. If inactive, the export's scheduled execution is paused.
func (o ExportScheduleResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The aggregation expression to be used in the query.
type QueryAggregation struct {
	// The name of the aggregation function to use.
	Function string `pulumi:"function"`
	// The name of the column to aggregate.
	Name string `pulumi:"name"`
}

// QueryAggregationInput is an input type that accepts QueryAggregationArgs and QueryAggregationOutput values.
// You can construct a concrete instance of `QueryAggregationInput` via:
//
//          QueryAggregationArgs{...}
type QueryAggregationInput interface {
	pulumi.Input

	ToQueryAggregationOutput() QueryAggregationOutput
	ToQueryAggregationOutputWithContext(context.Context) QueryAggregationOutput
}

// The aggregation expression to be used in the query.
type QueryAggregationArgs struct {
	// The name of the aggregation function to use.
	Function pulumi.StringInput `pulumi:"function"`
	// The name of the column to aggregate.
	Name pulumi.StringInput `pulumi:"name"`
}

func (QueryAggregationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryAggregation)(nil)).Elem()
}

func (i QueryAggregationArgs) ToQueryAggregationOutput() QueryAggregationOutput {
	return i.ToQueryAggregationOutputWithContext(context.Background())
}

func (i QueryAggregationArgs) ToQueryAggregationOutputWithContext(ctx context.Context) QueryAggregationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryAggregationOutput)
}

// QueryAggregationMapInput is an input type that accepts QueryAggregationMap and QueryAggregationMapOutput values.
// You can construct a concrete instance of `QueryAggregationMapInput` via:
//
//          QueryAggregationMap{ "key": QueryAggregationArgs{...} }
type QueryAggregationMapInput interface {
	pulumi.Input

	ToQueryAggregationMapOutput() QueryAggregationMapOutput
	ToQueryAggregationMapOutputWithContext(context.Context) QueryAggregationMapOutput
}

type QueryAggregationMap map[string]QueryAggregationInput

func (QueryAggregationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]QueryAggregation)(nil)).Elem()
}

func (i QueryAggregationMap) ToQueryAggregationMapOutput() QueryAggregationMapOutput {
	return i.ToQueryAggregationMapOutputWithContext(context.Background())
}

func (i QueryAggregationMap) ToQueryAggregationMapOutputWithContext(ctx context.Context) QueryAggregationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryAggregationMapOutput)
}

// The aggregation expression to be used in the query.
type QueryAggregationResponse struct {
	// The name of the aggregation function to use.
	Function string `pulumi:"function"`
	// The name of the column to aggregate.
	Name string `pulumi:"name"`
}

// The aggregation expression to be used in the query.
type QueryAggregationResponseOutput struct{ *pulumi.OutputState }

func (QueryAggregationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryAggregationResponse)(nil)).Elem()
}

func (o QueryAggregationResponseOutput) ToQueryAggregationResponseOutput() QueryAggregationResponseOutput {
	return o
}

func (o QueryAggregationResponseOutput) ToQueryAggregationResponseOutputWithContext(ctx context.Context) QueryAggregationResponseOutput {
	return o
}

// The name of the aggregation function to use.
func (o QueryAggregationResponseOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v QueryAggregationResponse) string { return v.Function }).(pulumi.StringOutput)
}

// The name of the column to aggregate.
func (o QueryAggregationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v QueryAggregationResponse) string { return v.Name }).(pulumi.StringOutput)
}

type QueryAggregationResponseMapOutput struct{ *pulumi.OutputState }

func (QueryAggregationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]QueryAggregationResponse)(nil)).Elem()
}

func (o QueryAggregationResponseMapOutput) ToQueryAggregationResponseMapOutput() QueryAggregationResponseMapOutput {
	return o
}

func (o QueryAggregationResponseMapOutput) ToQueryAggregationResponseMapOutputWithContext(ctx context.Context) QueryAggregationResponseMapOutput {
	return o
}

func (o QueryAggregationResponseMapOutput) MapIndex(k pulumi.StringInput) QueryAggregationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) QueryAggregationResponse {
		return vs[0].(map[string]QueryAggregationResponse)[vs[1].(string)]
	}).(QueryAggregationResponseOutput)
}

// The comparison expression to be used in the query.
type QueryComparisonExpression struct {
	// The name of the column to use in comparison.
	Name string `pulumi:"name"`
	// The operator to use for comparison.
	Operator string `pulumi:"operator"`
	// Array of values to use for comparison
	Values []string `pulumi:"values"`
}

// QueryComparisonExpressionInput is an input type that accepts QueryComparisonExpressionArgs and QueryComparisonExpressionOutput values.
// You can construct a concrete instance of `QueryComparisonExpressionInput` via:
//
//          QueryComparisonExpressionArgs{...}
type QueryComparisonExpressionInput interface {
	pulumi.Input

	ToQueryComparisonExpressionOutput() QueryComparisonExpressionOutput
	ToQueryComparisonExpressionOutputWithContext(context.Context) QueryComparisonExpressionOutput
}

// The comparison expression to be used in the query.
type QueryComparisonExpressionArgs struct {
	// The name of the column to use in comparison.
	Name pulumi.StringInput `pulumi:"name"`
	// The operator to use for comparison.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Array of values to use for comparison
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (QueryComparisonExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryComparisonExpression)(nil)).Elem()
}

func (i QueryComparisonExpressionArgs) ToQueryComparisonExpressionOutput() QueryComparisonExpressionOutput {
	return i.ToQueryComparisonExpressionOutputWithContext(context.Background())
}

func (i QueryComparisonExpressionArgs) ToQueryComparisonExpressionOutputWithContext(ctx context.Context) QueryComparisonExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryComparisonExpressionOutput)
}

func (i QueryComparisonExpressionArgs) ToQueryComparisonExpressionPtrOutput() QueryComparisonExpressionPtrOutput {
	return i.ToQueryComparisonExpressionPtrOutputWithContext(context.Background())
}

func (i QueryComparisonExpressionArgs) ToQueryComparisonExpressionPtrOutputWithContext(ctx context.Context) QueryComparisonExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryComparisonExpressionOutput).ToQueryComparisonExpressionPtrOutputWithContext(ctx)
}

// QueryComparisonExpressionPtrInput is an input type that accepts QueryComparisonExpressionArgs, QueryComparisonExpressionPtr and QueryComparisonExpressionPtrOutput values.
// You can construct a concrete instance of `QueryComparisonExpressionPtrInput` via:
//
//          QueryComparisonExpressionArgs{...}
//
//  or:
//
//          nil
type QueryComparisonExpressionPtrInput interface {
	pulumi.Input

	ToQueryComparisonExpressionPtrOutput() QueryComparisonExpressionPtrOutput
	ToQueryComparisonExpressionPtrOutputWithContext(context.Context) QueryComparisonExpressionPtrOutput
}

type queryComparisonExpressionPtrType QueryComparisonExpressionArgs

func QueryComparisonExpressionPtr(v *QueryComparisonExpressionArgs) QueryComparisonExpressionPtrInput {
	return (*queryComparisonExpressionPtrType)(v)
}

func (*queryComparisonExpressionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryComparisonExpression)(nil)).Elem()
}

func (i *queryComparisonExpressionPtrType) ToQueryComparisonExpressionPtrOutput() QueryComparisonExpressionPtrOutput {
	return i.ToQueryComparisonExpressionPtrOutputWithContext(context.Background())
}

func (i *queryComparisonExpressionPtrType) ToQueryComparisonExpressionPtrOutputWithContext(ctx context.Context) QueryComparisonExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryComparisonExpressionPtrOutput)
}

// The comparison expression to be used in the query.
type QueryComparisonExpressionResponse struct {
	// The name of the column to use in comparison.
	Name string `pulumi:"name"`
	// The operator to use for comparison.
	Operator string `pulumi:"operator"`
	// Array of values to use for comparison
	Values []string `pulumi:"values"`
}

// The comparison expression to be used in the query.
type QueryComparisonExpressionResponseOutput struct{ *pulumi.OutputState }

func (QueryComparisonExpressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryComparisonExpressionResponse)(nil)).Elem()
}

func (o QueryComparisonExpressionResponseOutput) ToQueryComparisonExpressionResponseOutput() QueryComparisonExpressionResponseOutput {
	return o
}

func (o QueryComparisonExpressionResponseOutput) ToQueryComparisonExpressionResponseOutputWithContext(ctx context.Context) QueryComparisonExpressionResponseOutput {
	return o
}

func (o QueryComparisonExpressionResponseOutput) ToQueryComparisonExpressionResponsePtrOutput() QueryComparisonExpressionResponsePtrOutput {
	return o.ToQueryComparisonExpressionResponsePtrOutputWithContext(context.Background())
}

func (o QueryComparisonExpressionResponseOutput) ToQueryComparisonExpressionResponsePtrOutputWithContext(ctx context.Context) QueryComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v QueryComparisonExpressionResponse) *QueryComparisonExpressionResponse {
		return &v
	}).(QueryComparisonExpressionResponsePtrOutput)
}

// The name of the column to use in comparison.
func (o QueryComparisonExpressionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v QueryComparisonExpressionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The operator to use for comparison.
func (o QueryComparisonExpressionResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v QueryComparisonExpressionResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Array of values to use for comparison
func (o QueryComparisonExpressionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v QueryComparisonExpressionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type QueryComparisonExpressionResponsePtrOutput struct{ *pulumi.OutputState }

func (QueryComparisonExpressionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryComparisonExpressionResponse)(nil)).Elem()
}

func (o QueryComparisonExpressionResponsePtrOutput) ToQueryComparisonExpressionResponsePtrOutput() QueryComparisonExpressionResponsePtrOutput {
	return o
}

func (o QueryComparisonExpressionResponsePtrOutput) ToQueryComparisonExpressionResponsePtrOutputWithContext(ctx context.Context) QueryComparisonExpressionResponsePtrOutput {
	return o
}

func (o QueryComparisonExpressionResponsePtrOutput) Elem() QueryComparisonExpressionResponseOutput {
	return o.ApplyT(func(v *QueryComparisonExpressionResponse) QueryComparisonExpressionResponse { return *v }).(QueryComparisonExpressionResponseOutput)
}

// The name of the column to use in comparison.
func (o QueryComparisonExpressionResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryComparisonExpressionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The operator to use for comparison.
func (o QueryComparisonExpressionResponsePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryComparisonExpressionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Array of values to use for comparison
func (o QueryComparisonExpressionResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *QueryComparisonExpressionResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// The definition of data present in the query.
type QueryDataset struct {
	// Dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.
	Aggregation map[string]QueryAggregation `pulumi:"aggregation"`
	// Has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping are provided.
	Configuration *QueryDatasetConfiguration `pulumi:"configuration"`
	// Has filter expression to use in the query.
	Filter *QueryFilter `pulumi:"filter"`
	// The granularity of rows in the query.
	Granularity *string `pulumi:"granularity"`
	// Array of group by expression to use in the query. Query can have up to 2 group by clauses.
	Grouping []QueryGrouping `pulumi:"grouping"`
	// Array of sorting by columns in query.
	Sorting []QuerySortingConfiguration `pulumi:"sorting"`
}

// QueryDatasetInput is an input type that accepts QueryDatasetArgs and QueryDatasetOutput values.
// You can construct a concrete instance of `QueryDatasetInput` via:
//
//          QueryDatasetArgs{...}
type QueryDatasetInput interface {
	pulumi.Input

	ToQueryDatasetOutput() QueryDatasetOutput
	ToQueryDatasetOutputWithContext(context.Context) QueryDatasetOutput
}

// The definition of data present in the query.
type QueryDatasetArgs struct {
	// Dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.
	Aggregation QueryAggregationMapInput `pulumi:"aggregation"`
	// Has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping are provided.
	Configuration QueryDatasetConfigurationPtrInput `pulumi:"configuration"`
	// Has filter expression to use in the query.
	Filter QueryFilterPtrInput `pulumi:"filter"`
	// The granularity of rows in the query.
	Granularity pulumi.StringPtrInput `pulumi:"granularity"`
	// Array of group by expression to use in the query. Query can have up to 2 group by clauses.
	Grouping QueryGroupingArrayInput `pulumi:"grouping"`
	// Array of sorting by columns in query.
	Sorting QuerySortingConfigurationArrayInput `pulumi:"sorting"`
}

func (QueryDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDataset)(nil)).Elem()
}

func (i QueryDatasetArgs) ToQueryDatasetOutput() QueryDatasetOutput {
	return i.ToQueryDatasetOutputWithContext(context.Background())
}

func (i QueryDatasetArgs) ToQueryDatasetOutputWithContext(ctx context.Context) QueryDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetOutput)
}

func (i QueryDatasetArgs) ToQueryDatasetPtrOutput() QueryDatasetPtrOutput {
	return i.ToQueryDatasetPtrOutputWithContext(context.Background())
}

func (i QueryDatasetArgs) ToQueryDatasetPtrOutputWithContext(ctx context.Context) QueryDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetOutput).ToQueryDatasetPtrOutputWithContext(ctx)
}

// QueryDatasetPtrInput is an input type that accepts QueryDatasetArgs, QueryDatasetPtr and QueryDatasetPtrOutput values.
// You can construct a concrete instance of `QueryDatasetPtrInput` via:
//
//          QueryDatasetArgs{...}
//
//  or:
//
//          nil
type QueryDatasetPtrInput interface {
	pulumi.Input

	ToQueryDatasetPtrOutput() QueryDatasetPtrOutput
	ToQueryDatasetPtrOutputWithContext(context.Context) QueryDatasetPtrOutput
}

type queryDatasetPtrType QueryDatasetArgs

func QueryDatasetPtr(v *QueryDatasetArgs) QueryDatasetPtrInput {
	return (*queryDatasetPtrType)(v)
}

func (*queryDatasetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryDataset)(nil)).Elem()
}

func (i *queryDatasetPtrType) ToQueryDatasetPtrOutput() QueryDatasetPtrOutput {
	return i.ToQueryDatasetPtrOutputWithContext(context.Background())
}

func (i *queryDatasetPtrType) ToQueryDatasetPtrOutputWithContext(ctx context.Context) QueryDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetPtrOutput)
}

// The configuration of dataset in the query.
type QueryDatasetConfiguration struct {
	// Array of column names to be included in the query. Any valid query column name is allowed. If not provided, then query includes all columns.
	Columns []string `pulumi:"columns"`
}

// QueryDatasetConfigurationInput is an input type that accepts QueryDatasetConfigurationArgs and QueryDatasetConfigurationOutput values.
// You can construct a concrete instance of `QueryDatasetConfigurationInput` via:
//
//          QueryDatasetConfigurationArgs{...}
type QueryDatasetConfigurationInput interface {
	pulumi.Input

	ToQueryDatasetConfigurationOutput() QueryDatasetConfigurationOutput
	ToQueryDatasetConfigurationOutputWithContext(context.Context) QueryDatasetConfigurationOutput
}

// The configuration of dataset in the query.
type QueryDatasetConfigurationArgs struct {
	// Array of column names to be included in the query. Any valid query column name is allowed. If not provided, then query includes all columns.
	Columns pulumi.StringArrayInput `pulumi:"columns"`
}

func (QueryDatasetConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDatasetConfiguration)(nil)).Elem()
}

func (i QueryDatasetConfigurationArgs) ToQueryDatasetConfigurationOutput() QueryDatasetConfigurationOutput {
	return i.ToQueryDatasetConfigurationOutputWithContext(context.Background())
}

func (i QueryDatasetConfigurationArgs) ToQueryDatasetConfigurationOutputWithContext(ctx context.Context) QueryDatasetConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetConfigurationOutput)
}

func (i QueryDatasetConfigurationArgs) ToQueryDatasetConfigurationPtrOutput() QueryDatasetConfigurationPtrOutput {
	return i.ToQueryDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (i QueryDatasetConfigurationArgs) ToQueryDatasetConfigurationPtrOutputWithContext(ctx context.Context) QueryDatasetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetConfigurationOutput).ToQueryDatasetConfigurationPtrOutputWithContext(ctx)
}

// QueryDatasetConfigurationPtrInput is an input type that accepts QueryDatasetConfigurationArgs, QueryDatasetConfigurationPtr and QueryDatasetConfigurationPtrOutput values.
// You can construct a concrete instance of `QueryDatasetConfigurationPtrInput` via:
//
//          QueryDatasetConfigurationArgs{...}
//
//  or:
//
//          nil
type QueryDatasetConfigurationPtrInput interface {
	pulumi.Input

	ToQueryDatasetConfigurationPtrOutput() QueryDatasetConfigurationPtrOutput
	ToQueryDatasetConfigurationPtrOutputWithContext(context.Context) QueryDatasetConfigurationPtrOutput
}

type queryDatasetConfigurationPtrType QueryDatasetConfigurationArgs

func QueryDatasetConfigurationPtr(v *QueryDatasetConfigurationArgs) QueryDatasetConfigurationPtrInput {
	return (*queryDatasetConfigurationPtrType)(v)
}

func (*queryDatasetConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryDatasetConfiguration)(nil)).Elem()
}

func (i *queryDatasetConfigurationPtrType) ToQueryDatasetConfigurationPtrOutput() QueryDatasetConfigurationPtrOutput {
	return i.ToQueryDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (i *queryDatasetConfigurationPtrType) ToQueryDatasetConfigurationPtrOutputWithContext(ctx context.Context) QueryDatasetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDatasetConfigurationPtrOutput)
}

// The configuration of dataset in the query.
type QueryDatasetConfigurationResponse struct {
	// Array of column names to be included in the query. Any valid query column name is allowed. If not provided, then query includes all columns.
	Columns []string `pulumi:"columns"`
}

// The configuration of dataset in the query.
type QueryDatasetConfigurationResponseOutput struct{ *pulumi.OutputState }

func (QueryDatasetConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDatasetConfigurationResponse)(nil)).Elem()
}

func (o QueryDatasetConfigurationResponseOutput) ToQueryDatasetConfigurationResponseOutput() QueryDatasetConfigurationResponseOutput {
	return o
}

func (o QueryDatasetConfigurationResponseOutput) ToQueryDatasetConfigurationResponseOutputWithContext(ctx context.Context) QueryDatasetConfigurationResponseOutput {
	return o
}

func (o QueryDatasetConfigurationResponseOutput) ToQueryDatasetConfigurationResponsePtrOutput() QueryDatasetConfigurationResponsePtrOutput {
	return o.ToQueryDatasetConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o QueryDatasetConfigurationResponseOutput) ToQueryDatasetConfigurationResponsePtrOutputWithContext(ctx context.Context) QueryDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v QueryDatasetConfigurationResponse) *QueryDatasetConfigurationResponse {
		return &v
	}).(QueryDatasetConfigurationResponsePtrOutput)
}

// Array of column names to be included in the query. Any valid query column name is allowed. If not provided, then query includes all columns.
func (o QueryDatasetConfigurationResponseOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v QueryDatasetConfigurationResponse) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

type QueryDatasetConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (QueryDatasetConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryDatasetConfigurationResponse)(nil)).Elem()
}

func (o QueryDatasetConfigurationResponsePtrOutput) ToQueryDatasetConfigurationResponsePtrOutput() QueryDatasetConfigurationResponsePtrOutput {
	return o
}

func (o QueryDatasetConfigurationResponsePtrOutput) ToQueryDatasetConfigurationResponsePtrOutputWithContext(ctx context.Context) QueryDatasetConfigurationResponsePtrOutput {
	return o
}

func (o QueryDatasetConfigurationResponsePtrOutput) Elem() QueryDatasetConfigurationResponseOutput {
	return o.ApplyT(func(v *QueryDatasetConfigurationResponse) QueryDatasetConfigurationResponse { return *v }).(QueryDatasetConfigurationResponseOutput)
}

// Array of column names to be included in the query. Any valid query column name is allowed. If not provided, then query includes all columns.
func (o QueryDatasetConfigurationResponsePtrOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *QueryDatasetConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(pulumi.StringArrayOutput)
}

// The definition of data present in the query.
type QueryDatasetResponse struct {
	// Dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.
	Aggregation map[string]QueryAggregationResponse `pulumi:"aggregation"`
	// Has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping are provided.
	Configuration *QueryDatasetConfigurationResponse `pulumi:"configuration"`
	// Has filter expression to use in the query.
	Filter *QueryFilterResponse `pulumi:"filter"`
	// The granularity of rows in the query.
	Granularity *string `pulumi:"granularity"`
	// Array of group by expression to use in the query. Query can have up to 2 group by clauses.
	Grouping []QueryGroupingResponse `pulumi:"grouping"`
	// Array of sorting by columns in query.
	Sorting []QuerySortingConfigurationResponse `pulumi:"sorting"`
}

// The definition of data present in the query.
type QueryDatasetResponseOutput struct{ *pulumi.OutputState }

func (QueryDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDatasetResponse)(nil)).Elem()
}

func (o QueryDatasetResponseOutput) ToQueryDatasetResponseOutput() QueryDatasetResponseOutput {
	return o
}

func (o QueryDatasetResponseOutput) ToQueryDatasetResponseOutputWithContext(ctx context.Context) QueryDatasetResponseOutput {
	return o
}

func (o QueryDatasetResponseOutput) ToQueryDatasetResponsePtrOutput() QueryDatasetResponsePtrOutput {
	return o.ToQueryDatasetResponsePtrOutputWithContext(context.Background())
}

func (o QueryDatasetResponseOutput) ToQueryDatasetResponsePtrOutputWithContext(ctx context.Context) QueryDatasetResponsePtrOutput {
	return o.ApplyT(func(v QueryDatasetResponse) *QueryDatasetResponse {
		return &v
	}).(QueryDatasetResponsePtrOutput)
}

// Dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.
func (o QueryDatasetResponseOutput) Aggregation() QueryAggregationResponseMapOutput {
	return o.ApplyT(func(v QueryDatasetResponse) map[string]QueryAggregationResponse { return v.Aggregation }).(QueryAggregationResponseMapOutput)
}

// Has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping are provided.
func (o QueryDatasetResponseOutput) Configuration() QueryDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v QueryDatasetResponse) *QueryDatasetConfigurationResponse { return v.Configuration }).(QueryDatasetConfigurationResponsePtrOutput)
}

// Has filter expression to use in the query.
func (o QueryDatasetResponseOutput) Filter() QueryFilterResponsePtrOutput {
	return o.ApplyT(func(v QueryDatasetResponse) *QueryFilterResponse { return v.Filter }).(QueryFilterResponsePtrOutput)
}

// The granularity of rows in the query.
func (o QueryDatasetResponseOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueryDatasetResponse) *string { return v.Granularity }).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the query. Query can have up to 2 group by clauses.
func (o QueryDatasetResponseOutput) Grouping() QueryGroupingResponseArrayOutput {
	return o.ApplyT(func(v QueryDatasetResponse) []QueryGroupingResponse { return v.Grouping }).(QueryGroupingResponseArrayOutput)
}

// Array of sorting by columns in query.
func (o QueryDatasetResponseOutput) Sorting() QuerySortingConfigurationResponseArrayOutput {
	return o.ApplyT(func(v QueryDatasetResponse) []QuerySortingConfigurationResponse { return v.Sorting }).(QuerySortingConfigurationResponseArrayOutput)
}

type QueryDatasetResponsePtrOutput struct{ *pulumi.OutputState }

func (QueryDatasetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryDatasetResponse)(nil)).Elem()
}

func (o QueryDatasetResponsePtrOutput) ToQueryDatasetResponsePtrOutput() QueryDatasetResponsePtrOutput {
	return o
}

func (o QueryDatasetResponsePtrOutput) ToQueryDatasetResponsePtrOutputWithContext(ctx context.Context) QueryDatasetResponsePtrOutput {
	return o
}

func (o QueryDatasetResponsePtrOutput) Elem() QueryDatasetResponseOutput {
	return o.ApplyT(func(v *QueryDatasetResponse) QueryDatasetResponse { return *v }).(QueryDatasetResponseOutput)
}

// Dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.
func (o QueryDatasetResponsePtrOutput) Aggregation() QueryAggregationResponseMapOutput {
	return o.ApplyT(func(v *QueryDatasetResponse) map[string]QueryAggregationResponse {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(QueryAggregationResponseMapOutput)
}

// Has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping are provided.
func (o QueryDatasetResponsePtrOutput) Configuration() QueryDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *QueryDatasetResponse) *QueryDatasetConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(QueryDatasetConfigurationResponsePtrOutput)
}

// Has filter expression to use in the query.
func (o QueryDatasetResponsePtrOutput) Filter() QueryFilterResponsePtrOutput {
	return o.ApplyT(func(v *QueryDatasetResponse) *QueryFilterResponse {
		if v == nil {
			return nil
		}
		return v.Filter
	}).(QueryFilterResponsePtrOutput)
}

// The granularity of rows in the query.
func (o QueryDatasetResponsePtrOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryDatasetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Granularity
	}).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the query. Query can have up to 2 group by clauses.
func (o QueryDatasetResponsePtrOutput) Grouping() QueryGroupingResponseArrayOutput {
	return o.ApplyT(func(v *QueryDatasetResponse) []QueryGroupingResponse {
		if v == nil {
			return nil
		}
		return v.Grouping
	}).(QueryGroupingResponseArrayOutput)
}

// Array of sorting by columns in query.
func (o QueryDatasetResponsePtrOutput) Sorting() QuerySortingConfigurationResponseArrayOutput {
	return o.ApplyT(func(v *QueryDatasetResponse) []QuerySortingConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Sorting
	}).(QuerySortingConfigurationResponseArrayOutput)
}

// The definition of a query.
type QueryDefinition struct {
	// Has definition for data in this query.
	Dataset *QueryDataset `pulumi:"dataset"`
	// Has time period for pulling data for the query.
	TimePeriod *QueryTimePeriod `pulumi:"timePeriod"`
	// The time frame for pulling data for the query. If custom, then a specific time period must be provided.
	Timeframe string `pulumi:"timeframe"`
	// The type of the query.
	Type string `pulumi:"type"`
}

// QueryDefinitionInput is an input type that accepts QueryDefinitionArgs and QueryDefinitionOutput values.
// You can construct a concrete instance of `QueryDefinitionInput` via:
//
//          QueryDefinitionArgs{...}
type QueryDefinitionInput interface {
	pulumi.Input

	ToQueryDefinitionOutput() QueryDefinitionOutput
	ToQueryDefinitionOutputWithContext(context.Context) QueryDefinitionOutput
}

// The definition of a query.
type QueryDefinitionArgs struct {
	// Has definition for data in this query.
	Dataset QueryDatasetPtrInput `pulumi:"dataset"`
	// Has time period for pulling data for the query.
	TimePeriod QueryTimePeriodPtrInput `pulumi:"timePeriod"`
	// The time frame for pulling data for the query. If custom, then a specific time period must be provided.
	Timeframe pulumi.StringInput `pulumi:"timeframe"`
	// The type of the query.
	Type pulumi.StringInput `pulumi:"type"`
}

func (QueryDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDefinition)(nil)).Elem()
}

func (i QueryDefinitionArgs) ToQueryDefinitionOutput() QueryDefinitionOutput {
	return i.ToQueryDefinitionOutputWithContext(context.Background())
}

func (i QueryDefinitionArgs) ToQueryDefinitionOutputWithContext(ctx context.Context) QueryDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDefinitionOutput)
}

func (i QueryDefinitionArgs) ToQueryDefinitionPtrOutput() QueryDefinitionPtrOutput {
	return i.ToQueryDefinitionPtrOutputWithContext(context.Background())
}

func (i QueryDefinitionArgs) ToQueryDefinitionPtrOutputWithContext(ctx context.Context) QueryDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDefinitionOutput).ToQueryDefinitionPtrOutputWithContext(ctx)
}

// QueryDefinitionPtrInput is an input type that accepts QueryDefinitionArgs, QueryDefinitionPtr and QueryDefinitionPtrOutput values.
// You can construct a concrete instance of `QueryDefinitionPtrInput` via:
//
//          QueryDefinitionArgs{...}
//
//  or:
//
//          nil
type QueryDefinitionPtrInput interface {
	pulumi.Input

	ToQueryDefinitionPtrOutput() QueryDefinitionPtrOutput
	ToQueryDefinitionPtrOutputWithContext(context.Context) QueryDefinitionPtrOutput
}

type queryDefinitionPtrType QueryDefinitionArgs

func QueryDefinitionPtr(v *QueryDefinitionArgs) QueryDefinitionPtrInput {
	return (*queryDefinitionPtrType)(v)
}

func (*queryDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryDefinition)(nil)).Elem()
}

func (i *queryDefinitionPtrType) ToQueryDefinitionPtrOutput() QueryDefinitionPtrOutput {
	return i.ToQueryDefinitionPtrOutputWithContext(context.Background())
}

func (i *queryDefinitionPtrType) ToQueryDefinitionPtrOutputWithContext(ctx context.Context) QueryDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryDefinitionPtrOutput)
}

// The definition of a query.
type QueryDefinitionResponse struct {
	// Has definition for data in this query.
	Dataset *QueryDatasetResponse `pulumi:"dataset"`
	// Has time period for pulling data for the query.
	TimePeriod *QueryTimePeriodResponse `pulumi:"timePeriod"`
	// The time frame for pulling data for the query. If custom, then a specific time period must be provided.
	Timeframe string `pulumi:"timeframe"`
	// The type of the query.
	Type string `pulumi:"type"`
}

// The definition of a query.
type QueryDefinitionResponseOutput struct{ *pulumi.OutputState }

func (QueryDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryDefinitionResponse)(nil)).Elem()
}

func (o QueryDefinitionResponseOutput) ToQueryDefinitionResponseOutput() QueryDefinitionResponseOutput {
	return o
}

func (o QueryDefinitionResponseOutput) ToQueryDefinitionResponseOutputWithContext(ctx context.Context) QueryDefinitionResponseOutput {
	return o
}

func (o QueryDefinitionResponseOutput) ToQueryDefinitionResponsePtrOutput() QueryDefinitionResponsePtrOutput {
	return o.ToQueryDefinitionResponsePtrOutputWithContext(context.Background())
}

func (o QueryDefinitionResponseOutput) ToQueryDefinitionResponsePtrOutputWithContext(ctx context.Context) QueryDefinitionResponsePtrOutput {
	return o.ApplyT(func(v QueryDefinitionResponse) *QueryDefinitionResponse {
		return &v
	}).(QueryDefinitionResponsePtrOutput)
}

// Has definition for data in this query.
func (o QueryDefinitionResponseOutput) Dataset() QueryDatasetResponsePtrOutput {
	return o.ApplyT(func(v QueryDefinitionResponse) *QueryDatasetResponse { return v.Dataset }).(QueryDatasetResponsePtrOutput)
}

// Has time period for pulling data for the query.
func (o QueryDefinitionResponseOutput) TimePeriod() QueryTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v QueryDefinitionResponse) *QueryTimePeriodResponse { return v.TimePeriod }).(QueryTimePeriodResponsePtrOutput)
}

// The time frame for pulling data for the query. If custom, then a specific time period must be provided.
func (o QueryDefinitionResponseOutput) Timeframe() pulumi.StringOutput {
	return o.ApplyT(func(v QueryDefinitionResponse) string { return v.Timeframe }).(pulumi.StringOutput)
}

// The type of the query.
func (o QueryDefinitionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QueryDefinitionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type QueryDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (QueryDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryDefinitionResponse)(nil)).Elem()
}

func (o QueryDefinitionResponsePtrOutput) ToQueryDefinitionResponsePtrOutput() QueryDefinitionResponsePtrOutput {
	return o
}

func (o QueryDefinitionResponsePtrOutput) ToQueryDefinitionResponsePtrOutputWithContext(ctx context.Context) QueryDefinitionResponsePtrOutput {
	return o
}

func (o QueryDefinitionResponsePtrOutput) Elem() QueryDefinitionResponseOutput {
	return o.ApplyT(func(v *QueryDefinitionResponse) QueryDefinitionResponse { return *v }).(QueryDefinitionResponseOutput)
}

// Has definition for data in this query.
func (o QueryDefinitionResponsePtrOutput) Dataset() QueryDatasetResponsePtrOutput {
	return o.ApplyT(func(v *QueryDefinitionResponse) *QueryDatasetResponse {
		if v == nil {
			return nil
		}
		return v.Dataset
	}).(QueryDatasetResponsePtrOutput)
}

// Has time period for pulling data for the query.
func (o QueryDefinitionResponsePtrOutput) TimePeriod() QueryTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v *QueryDefinitionResponse) *QueryTimePeriodResponse {
		if v == nil {
			return nil
		}
		return v.TimePeriod
	}).(QueryTimePeriodResponsePtrOutput)
}

// The time frame for pulling data for the query. If custom, then a specific time period must be provided.
func (o QueryDefinitionResponsePtrOutput) Timeframe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Timeframe
	}).(pulumi.StringPtrOutput)
}

// The type of the query.
func (o QueryDefinitionResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The filter expression to be used in the export.
type QueryFilter struct {
	// The logical "AND" expression. Must have at least 2 items.
	And []QueryFilter `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimension *QueryComparisonExpression `pulumi:"dimension"`
	// The logical "NOT" expression.
	Not *QueryFilter `pulumi:"not"`
	// The logical "OR" expression. Must have at least 2 items.
	Or []QueryFilter `pulumi:"or"`
	// Has comparison expression for a tag
	Tag *QueryComparisonExpression `pulumi:"tag"`
}

// QueryFilterInput is an input type that accepts QueryFilterArgs and QueryFilterOutput values.
// You can construct a concrete instance of `QueryFilterInput` via:
//
//          QueryFilterArgs{...}
type QueryFilterInput interface {
	pulumi.Input

	ToQueryFilterOutput() QueryFilterOutput
	ToQueryFilterOutputWithContext(context.Context) QueryFilterOutput
}

// The filter expression to be used in the export.
type QueryFilterArgs struct {
	// The logical "AND" expression. Must have at least 2 items.
	And QueryFilterArrayInput `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimension QueryComparisonExpressionPtrInput `pulumi:"dimension"`
	// The logical "NOT" expression.
	Not QueryFilterPtrInput `pulumi:"not"`
	// The logical "OR" expression. Must have at least 2 items.
	Or QueryFilterArrayInput `pulumi:"or"`
	// Has comparison expression for a tag
	Tag QueryComparisonExpressionPtrInput `pulumi:"tag"`
}

func (QueryFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryFilter)(nil)).Elem()
}

func (i QueryFilterArgs) ToQueryFilterOutput() QueryFilterOutput {
	return i.ToQueryFilterOutputWithContext(context.Background())
}

func (i QueryFilterArgs) ToQueryFilterOutputWithContext(ctx context.Context) QueryFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryFilterOutput)
}

func (i QueryFilterArgs) ToQueryFilterPtrOutput() QueryFilterPtrOutput {
	return i.ToQueryFilterPtrOutputWithContext(context.Background())
}

func (i QueryFilterArgs) ToQueryFilterPtrOutputWithContext(ctx context.Context) QueryFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryFilterOutput).ToQueryFilterPtrOutputWithContext(ctx)
}

// QueryFilterPtrInput is an input type that accepts QueryFilterArgs, QueryFilterPtr and QueryFilterPtrOutput values.
// You can construct a concrete instance of `QueryFilterPtrInput` via:
//
//          QueryFilterArgs{...}
//
//  or:
//
//          nil
type QueryFilterPtrInput interface {
	pulumi.Input

	ToQueryFilterPtrOutput() QueryFilterPtrOutput
	ToQueryFilterPtrOutputWithContext(context.Context) QueryFilterPtrOutput
}

type queryFilterPtrType QueryFilterArgs

func QueryFilterPtr(v *QueryFilterArgs) QueryFilterPtrInput {
	return (*queryFilterPtrType)(v)
}

func (*queryFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryFilter)(nil)).Elem()
}

func (i *queryFilterPtrType) ToQueryFilterPtrOutput() QueryFilterPtrOutput {
	return i.ToQueryFilterPtrOutputWithContext(context.Background())
}

func (i *queryFilterPtrType) ToQueryFilterPtrOutputWithContext(ctx context.Context) QueryFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryFilterPtrOutput)
}

// QueryFilterArrayInput is an input type that accepts QueryFilterArray and QueryFilterArrayOutput values.
// You can construct a concrete instance of `QueryFilterArrayInput` via:
//
//          QueryFilterArray{ QueryFilterArgs{...} }
type QueryFilterArrayInput interface {
	pulumi.Input

	ToQueryFilterArrayOutput() QueryFilterArrayOutput
	ToQueryFilterArrayOutputWithContext(context.Context) QueryFilterArrayOutput
}

type QueryFilterArray []QueryFilterInput

func (QueryFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryFilter)(nil)).Elem()
}

func (i QueryFilterArray) ToQueryFilterArrayOutput() QueryFilterArrayOutput {
	return i.ToQueryFilterArrayOutputWithContext(context.Background())
}

func (i QueryFilterArray) ToQueryFilterArrayOutputWithContext(ctx context.Context) QueryFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryFilterArrayOutput)
}

// The filter expression to be used in the export.
type QueryFilterResponse struct {
	// The logical "AND" expression. Must have at least 2 items.
	And []QueryFilterResponse `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimension *QueryComparisonExpressionResponse `pulumi:"dimension"`
	// The logical "NOT" expression.
	Not *QueryFilterResponse `pulumi:"not"`
	// The logical "OR" expression. Must have at least 2 items.
	Or []QueryFilterResponse `pulumi:"or"`
	// Has comparison expression for a tag
	Tag *QueryComparisonExpressionResponse `pulumi:"tag"`
}

// The filter expression to be used in the export.
type QueryFilterResponseOutput struct{ *pulumi.OutputState }

func (QueryFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryFilterResponse)(nil)).Elem()
}

func (o QueryFilterResponseOutput) ToQueryFilterResponseOutput() QueryFilterResponseOutput {
	return o
}

func (o QueryFilterResponseOutput) ToQueryFilterResponseOutputWithContext(ctx context.Context) QueryFilterResponseOutput {
	return o
}

func (o QueryFilterResponseOutput) ToQueryFilterResponsePtrOutput() QueryFilterResponsePtrOutput {
	return o.ToQueryFilterResponsePtrOutputWithContext(context.Background())
}

func (o QueryFilterResponseOutput) ToQueryFilterResponsePtrOutputWithContext(ctx context.Context) QueryFilterResponsePtrOutput {
	return o.ApplyT(func(v QueryFilterResponse) *QueryFilterResponse {
		return &v
	}).(QueryFilterResponsePtrOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o QueryFilterResponseOutput) And() QueryFilterResponseArrayOutput {
	return o.ApplyT(func(v QueryFilterResponse) []QueryFilterResponse { return v.And }).(QueryFilterResponseArrayOutput)
}

// Has comparison expression for a dimension
func (o QueryFilterResponseOutput) Dimension() QueryComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v QueryFilterResponse) *QueryComparisonExpressionResponse { return v.Dimension }).(QueryComparisonExpressionResponsePtrOutput)
}

// The logical "NOT" expression.
func (o QueryFilterResponseOutput) Not() QueryFilterResponsePtrOutput {
	return o.ApplyT(func(v QueryFilterResponse) *QueryFilterResponse { return v.Not }).(QueryFilterResponsePtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o QueryFilterResponseOutput) Or() QueryFilterResponseArrayOutput {
	return o.ApplyT(func(v QueryFilterResponse) []QueryFilterResponse { return v.Or }).(QueryFilterResponseArrayOutput)
}

// Has comparison expression for a tag
func (o QueryFilterResponseOutput) Tag() QueryComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v QueryFilterResponse) *QueryComparisonExpressionResponse { return v.Tag }).(QueryComparisonExpressionResponsePtrOutput)
}

type QueryFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (QueryFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryFilterResponse)(nil)).Elem()
}

func (o QueryFilterResponsePtrOutput) ToQueryFilterResponsePtrOutput() QueryFilterResponsePtrOutput {
	return o
}

func (o QueryFilterResponsePtrOutput) ToQueryFilterResponsePtrOutputWithContext(ctx context.Context) QueryFilterResponsePtrOutput {
	return o
}

func (o QueryFilterResponsePtrOutput) Elem() QueryFilterResponseOutput {
	return o.ApplyT(func(v *QueryFilterResponse) QueryFilterResponse { return *v }).(QueryFilterResponseOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o QueryFilterResponsePtrOutput) And() QueryFilterResponseArrayOutput {
	return o.ApplyT(func(v *QueryFilterResponse) []QueryFilterResponse {
		if v == nil {
			return nil
		}
		return v.And
	}).(QueryFilterResponseArrayOutput)
}

// Has comparison expression for a dimension
func (o QueryFilterResponsePtrOutput) Dimension() QueryComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *QueryFilterResponse) *QueryComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.Dimension
	}).(QueryComparisonExpressionResponsePtrOutput)
}

// The logical "NOT" expression.
func (o QueryFilterResponsePtrOutput) Not() QueryFilterResponsePtrOutput {
	return o.ApplyT(func(v *QueryFilterResponse) *QueryFilterResponse {
		if v == nil {
			return nil
		}
		return v.Not
	}).(QueryFilterResponsePtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o QueryFilterResponsePtrOutput) Or() QueryFilterResponseArrayOutput {
	return o.ApplyT(func(v *QueryFilterResponse) []QueryFilterResponse {
		if v == nil {
			return nil
		}
		return v.Or
	}).(QueryFilterResponseArrayOutput)
}

// Has comparison expression for a tag
func (o QueryFilterResponsePtrOutput) Tag() QueryComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *QueryFilterResponse) *QueryComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(QueryComparisonExpressionResponsePtrOutput)
}

type QueryFilterResponseArrayOutput struct{ *pulumi.OutputState }

func (QueryFilterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryFilterResponse)(nil)).Elem()
}

func (o QueryFilterResponseArrayOutput) ToQueryFilterResponseArrayOutput() QueryFilterResponseArrayOutput {
	return o
}

func (o QueryFilterResponseArrayOutput) ToQueryFilterResponseArrayOutputWithContext(ctx context.Context) QueryFilterResponseArrayOutput {
	return o
}

func (o QueryFilterResponseArrayOutput) Index(i pulumi.IntInput) QueryFilterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryFilterResponse {
		return vs[0].([]QueryFilterResponse)[vs[1].(int)]
	}).(QueryFilterResponseOutput)
}

// The group by expression to be used in the query.
type QueryGrouping struct {
	// The name of the column to group.
	Name string `pulumi:"name"`
	// Has type of the column to group.
	Type string `pulumi:"type"`
}

// QueryGroupingInput is an input type that accepts QueryGroupingArgs and QueryGroupingOutput values.
// You can construct a concrete instance of `QueryGroupingInput` via:
//
//          QueryGroupingArgs{...}
type QueryGroupingInput interface {
	pulumi.Input

	ToQueryGroupingOutput() QueryGroupingOutput
	ToQueryGroupingOutputWithContext(context.Context) QueryGroupingOutput
}

// The group by expression to be used in the query.
type QueryGroupingArgs struct {
	// The name of the column to group.
	Name pulumi.StringInput `pulumi:"name"`
	// Has type of the column to group.
	Type pulumi.StringInput `pulumi:"type"`
}

func (QueryGroupingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryGrouping)(nil)).Elem()
}

func (i QueryGroupingArgs) ToQueryGroupingOutput() QueryGroupingOutput {
	return i.ToQueryGroupingOutputWithContext(context.Background())
}

func (i QueryGroupingArgs) ToQueryGroupingOutputWithContext(ctx context.Context) QueryGroupingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryGroupingOutput)
}

// QueryGroupingArrayInput is an input type that accepts QueryGroupingArray and QueryGroupingArrayOutput values.
// You can construct a concrete instance of `QueryGroupingArrayInput` via:
//
//          QueryGroupingArray{ QueryGroupingArgs{...} }
type QueryGroupingArrayInput interface {
	pulumi.Input

	ToQueryGroupingArrayOutput() QueryGroupingArrayOutput
	ToQueryGroupingArrayOutputWithContext(context.Context) QueryGroupingArrayOutput
}

type QueryGroupingArray []QueryGroupingInput

func (QueryGroupingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryGrouping)(nil)).Elem()
}

func (i QueryGroupingArray) ToQueryGroupingArrayOutput() QueryGroupingArrayOutput {
	return i.ToQueryGroupingArrayOutputWithContext(context.Background())
}

func (i QueryGroupingArray) ToQueryGroupingArrayOutputWithContext(ctx context.Context) QueryGroupingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryGroupingArrayOutput)
}

// The group by expression to be used in the query.
type QueryGroupingResponse struct {
	// The name of the column to group.
	Name string `pulumi:"name"`
	// Has type of the column to group.
	Type string `pulumi:"type"`
}

// The group by expression to be used in the query.
type QueryGroupingResponseOutput struct{ *pulumi.OutputState }

func (QueryGroupingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryGroupingResponse)(nil)).Elem()
}

func (o QueryGroupingResponseOutput) ToQueryGroupingResponseOutput() QueryGroupingResponseOutput {
	return o
}

func (o QueryGroupingResponseOutput) ToQueryGroupingResponseOutputWithContext(ctx context.Context) QueryGroupingResponseOutput {
	return o
}

// The name of the column to group.
func (o QueryGroupingResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v QueryGroupingResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Has type of the column to group.
func (o QueryGroupingResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QueryGroupingResponse) string { return v.Type }).(pulumi.StringOutput)
}

type QueryGroupingResponseArrayOutput struct{ *pulumi.OutputState }

func (QueryGroupingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryGroupingResponse)(nil)).Elem()
}

func (o QueryGroupingResponseArrayOutput) ToQueryGroupingResponseArrayOutput() QueryGroupingResponseArrayOutput {
	return o
}

func (o QueryGroupingResponseArrayOutput) ToQueryGroupingResponseArrayOutputWithContext(ctx context.Context) QueryGroupingResponseArrayOutput {
	return o
}

func (o QueryGroupingResponseArrayOutput) Index(i pulumi.IntInput) QueryGroupingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryGroupingResponse {
		return vs[0].([]QueryGroupingResponse)[vs[1].(int)]
	}).(QueryGroupingResponseOutput)
}

// The configuration for sorting in the query.
type QuerySortingConfiguration struct {
	// The name of the column to use in sorting.
	Name *string `pulumi:"name"`
	// The sorting direction
	QuerySortingDirection *string `pulumi:"querySortingDirection"`
}

// QuerySortingConfigurationInput is an input type that accepts QuerySortingConfigurationArgs and QuerySortingConfigurationOutput values.
// You can construct a concrete instance of `QuerySortingConfigurationInput` via:
//
//          QuerySortingConfigurationArgs{...}
type QuerySortingConfigurationInput interface {
	pulumi.Input

	ToQuerySortingConfigurationOutput() QuerySortingConfigurationOutput
	ToQuerySortingConfigurationOutputWithContext(context.Context) QuerySortingConfigurationOutput
}

// The configuration for sorting in the query.
type QuerySortingConfigurationArgs struct {
	// The name of the column to use in sorting.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The sorting direction
	QuerySortingDirection pulumi.StringPtrInput `pulumi:"querySortingDirection"`
}

func (QuerySortingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuerySortingConfiguration)(nil)).Elem()
}

func (i QuerySortingConfigurationArgs) ToQuerySortingConfigurationOutput() QuerySortingConfigurationOutput {
	return i.ToQuerySortingConfigurationOutputWithContext(context.Background())
}

func (i QuerySortingConfigurationArgs) ToQuerySortingConfigurationOutputWithContext(ctx context.Context) QuerySortingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuerySortingConfigurationOutput)
}

// QuerySortingConfigurationArrayInput is an input type that accepts QuerySortingConfigurationArray and QuerySortingConfigurationArrayOutput values.
// You can construct a concrete instance of `QuerySortingConfigurationArrayInput` via:
//
//          QuerySortingConfigurationArray{ QuerySortingConfigurationArgs{...} }
type QuerySortingConfigurationArrayInput interface {
	pulumi.Input

	ToQuerySortingConfigurationArrayOutput() QuerySortingConfigurationArrayOutput
	ToQuerySortingConfigurationArrayOutputWithContext(context.Context) QuerySortingConfigurationArrayOutput
}

type QuerySortingConfigurationArray []QuerySortingConfigurationInput

func (QuerySortingConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuerySortingConfiguration)(nil)).Elem()
}

func (i QuerySortingConfigurationArray) ToQuerySortingConfigurationArrayOutput() QuerySortingConfigurationArrayOutput {
	return i.ToQuerySortingConfigurationArrayOutputWithContext(context.Background())
}

func (i QuerySortingConfigurationArray) ToQuerySortingConfigurationArrayOutputWithContext(ctx context.Context) QuerySortingConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuerySortingConfigurationArrayOutput)
}

// The configuration for sorting in the query.
type QuerySortingConfigurationResponse struct {
	// The name of the column to use in sorting.
	Name *string `pulumi:"name"`
	// The sorting direction
	QuerySortingDirection *string `pulumi:"querySortingDirection"`
}

// The configuration for sorting in the query.
type QuerySortingConfigurationResponseOutput struct{ *pulumi.OutputState }

func (QuerySortingConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuerySortingConfigurationResponse)(nil)).Elem()
}

func (o QuerySortingConfigurationResponseOutput) ToQuerySortingConfigurationResponseOutput() QuerySortingConfigurationResponseOutput {
	return o
}

func (o QuerySortingConfigurationResponseOutput) ToQuerySortingConfigurationResponseOutputWithContext(ctx context.Context) QuerySortingConfigurationResponseOutput {
	return o
}

// The name of the column to use in sorting.
func (o QuerySortingConfigurationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuerySortingConfigurationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The sorting direction
func (o QuerySortingConfigurationResponseOutput) QuerySortingDirection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuerySortingConfigurationResponse) *string { return v.QuerySortingDirection }).(pulumi.StringPtrOutput)
}

type QuerySortingConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (QuerySortingConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuerySortingConfigurationResponse)(nil)).Elem()
}

func (o QuerySortingConfigurationResponseArrayOutput) ToQuerySortingConfigurationResponseArrayOutput() QuerySortingConfigurationResponseArrayOutput {
	return o
}

func (o QuerySortingConfigurationResponseArrayOutput) ToQuerySortingConfigurationResponseArrayOutputWithContext(ctx context.Context) QuerySortingConfigurationResponseArrayOutput {
	return o
}

func (o QuerySortingConfigurationResponseArrayOutput) Index(i pulumi.IntInput) QuerySortingConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QuerySortingConfigurationResponse {
		return vs[0].([]QuerySortingConfigurationResponse)[vs[1].(int)]
	}).(QuerySortingConfigurationResponseOutput)
}

// The start and end date for pulling data for the query.
type QueryTimePeriod struct {
	// The start date to pull data from.
	From string `pulumi:"from"`
	// The end date to pull data to.
	To string `pulumi:"to"`
}

// QueryTimePeriodInput is an input type that accepts QueryTimePeriodArgs and QueryTimePeriodOutput values.
// You can construct a concrete instance of `QueryTimePeriodInput` via:
//
//          QueryTimePeriodArgs{...}
type QueryTimePeriodInput interface {
	pulumi.Input

	ToQueryTimePeriodOutput() QueryTimePeriodOutput
	ToQueryTimePeriodOutputWithContext(context.Context) QueryTimePeriodOutput
}

// The start and end date for pulling data for the query.
type QueryTimePeriodArgs struct {
	// The start date to pull data from.
	From pulumi.StringInput `pulumi:"from"`
	// The end date to pull data to.
	To pulumi.StringInput `pulumi:"to"`
}

func (QueryTimePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryTimePeriod)(nil)).Elem()
}

func (i QueryTimePeriodArgs) ToQueryTimePeriodOutput() QueryTimePeriodOutput {
	return i.ToQueryTimePeriodOutputWithContext(context.Background())
}

func (i QueryTimePeriodArgs) ToQueryTimePeriodOutputWithContext(ctx context.Context) QueryTimePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryTimePeriodOutput)
}

func (i QueryTimePeriodArgs) ToQueryTimePeriodPtrOutput() QueryTimePeriodPtrOutput {
	return i.ToQueryTimePeriodPtrOutputWithContext(context.Background())
}

func (i QueryTimePeriodArgs) ToQueryTimePeriodPtrOutputWithContext(ctx context.Context) QueryTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryTimePeriodOutput).ToQueryTimePeriodPtrOutputWithContext(ctx)
}

// QueryTimePeriodPtrInput is an input type that accepts QueryTimePeriodArgs, QueryTimePeriodPtr and QueryTimePeriodPtrOutput values.
// You can construct a concrete instance of `QueryTimePeriodPtrInput` via:
//
//          QueryTimePeriodArgs{...}
//
//  or:
//
//          nil
type QueryTimePeriodPtrInput interface {
	pulumi.Input

	ToQueryTimePeriodPtrOutput() QueryTimePeriodPtrOutput
	ToQueryTimePeriodPtrOutputWithContext(context.Context) QueryTimePeriodPtrOutput
}

type queryTimePeriodPtrType QueryTimePeriodArgs

func QueryTimePeriodPtr(v *QueryTimePeriodArgs) QueryTimePeriodPtrInput {
	return (*queryTimePeriodPtrType)(v)
}

func (*queryTimePeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryTimePeriod)(nil)).Elem()
}

func (i *queryTimePeriodPtrType) ToQueryTimePeriodPtrOutput() QueryTimePeriodPtrOutput {
	return i.ToQueryTimePeriodPtrOutputWithContext(context.Background())
}

func (i *queryTimePeriodPtrType) ToQueryTimePeriodPtrOutputWithContext(ctx context.Context) QueryTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryTimePeriodPtrOutput)
}

// The start and end date for pulling data for the query.
type QueryTimePeriodResponse struct {
	// The start date to pull data from.
	From string `pulumi:"from"`
	// The end date to pull data to.
	To string `pulumi:"to"`
}

// The start and end date for pulling data for the query.
type QueryTimePeriodResponseOutput struct{ *pulumi.OutputState }

func (QueryTimePeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryTimePeriodResponse)(nil)).Elem()
}

func (o QueryTimePeriodResponseOutput) ToQueryTimePeriodResponseOutput() QueryTimePeriodResponseOutput {
	return o
}

func (o QueryTimePeriodResponseOutput) ToQueryTimePeriodResponseOutputWithContext(ctx context.Context) QueryTimePeriodResponseOutput {
	return o
}

func (o QueryTimePeriodResponseOutput) ToQueryTimePeriodResponsePtrOutput() QueryTimePeriodResponsePtrOutput {
	return o.ToQueryTimePeriodResponsePtrOutputWithContext(context.Background())
}

func (o QueryTimePeriodResponseOutput) ToQueryTimePeriodResponsePtrOutputWithContext(ctx context.Context) QueryTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v QueryTimePeriodResponse) *QueryTimePeriodResponse {
		return &v
	}).(QueryTimePeriodResponsePtrOutput)
}

// The start date to pull data from.
func (o QueryTimePeriodResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v QueryTimePeriodResponse) string { return v.From }).(pulumi.StringOutput)
}

// The end date to pull data to.
func (o QueryTimePeriodResponseOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v QueryTimePeriodResponse) string { return v.To }).(pulumi.StringOutput)
}

type QueryTimePeriodResponsePtrOutput struct{ *pulumi.OutputState }

func (QueryTimePeriodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryTimePeriodResponse)(nil)).Elem()
}

func (o QueryTimePeriodResponsePtrOutput) ToQueryTimePeriodResponsePtrOutput() QueryTimePeriodResponsePtrOutput {
	return o
}

func (o QueryTimePeriodResponsePtrOutput) ToQueryTimePeriodResponsePtrOutputWithContext(ctx context.Context) QueryTimePeriodResponsePtrOutput {
	return o
}

func (o QueryTimePeriodResponsePtrOutput) Elem() QueryTimePeriodResponseOutput {
	return o.ApplyT(func(v *QueryTimePeriodResponse) QueryTimePeriodResponse { return *v }).(QueryTimePeriodResponseOutput)
}

// The start date to pull data from.
func (o QueryTimePeriodResponsePtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date to pull data to.
func (o QueryTimePeriodResponsePtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.To
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ExportDeliveryDestinationOutput{})
	pulumi.RegisterOutputType(ExportDeliveryDestinationPtrOutput{})
	pulumi.RegisterOutputType(ExportDeliveryDestinationResponseOutput{})
	pulumi.RegisterOutputType(ExportDeliveryDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportDeliveryInfoOutput{})
	pulumi.RegisterOutputType(ExportDeliveryInfoPtrOutput{})
	pulumi.RegisterOutputType(ExportDeliveryInfoResponseOutput{})
	pulumi.RegisterOutputType(ExportDeliveryInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportRecurrencePeriodOutput{})
	pulumi.RegisterOutputType(ExportRecurrencePeriodPtrOutput{})
	pulumi.RegisterOutputType(ExportRecurrencePeriodResponseOutput{})
	pulumi.RegisterOutputType(ExportRecurrencePeriodResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportScheduleOutput{})
	pulumi.RegisterOutputType(ExportSchedulePtrOutput{})
	pulumi.RegisterOutputType(ExportScheduleResponseOutput{})
	pulumi.RegisterOutputType(ExportScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(QueryAggregationOutput{})
	pulumi.RegisterOutputType(QueryAggregationMapOutput{})
	pulumi.RegisterOutputType(QueryAggregationResponseOutput{})
	pulumi.RegisterOutputType(QueryAggregationResponseMapOutput{})
	pulumi.RegisterOutputType(QueryComparisonExpressionOutput{})
	pulumi.RegisterOutputType(QueryComparisonExpressionPtrOutput{})
	pulumi.RegisterOutputType(QueryComparisonExpressionResponseOutput{})
	pulumi.RegisterOutputType(QueryComparisonExpressionResponsePtrOutput{})
	pulumi.RegisterOutputType(QueryDatasetOutput{})
	pulumi.RegisterOutputType(QueryDatasetPtrOutput{})
	pulumi.RegisterOutputType(QueryDatasetConfigurationOutput{})
	pulumi.RegisterOutputType(QueryDatasetConfigurationPtrOutput{})
	pulumi.RegisterOutputType(QueryDatasetConfigurationResponseOutput{})
	pulumi.RegisterOutputType(QueryDatasetConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(QueryDatasetResponseOutput{})
	pulumi.RegisterOutputType(QueryDatasetResponsePtrOutput{})
	pulumi.RegisterOutputType(QueryDefinitionOutput{})
	pulumi.RegisterOutputType(QueryDefinitionPtrOutput{})
	pulumi.RegisterOutputType(QueryDefinitionResponseOutput{})
	pulumi.RegisterOutputType(QueryDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(QueryFilterOutput{})
	pulumi.RegisterOutputType(QueryFilterPtrOutput{})
	pulumi.RegisterOutputType(QueryFilterArrayOutput{})
	pulumi.RegisterOutputType(QueryFilterResponseOutput{})
	pulumi.RegisterOutputType(QueryFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(QueryFilterResponseArrayOutput{})
	pulumi.RegisterOutputType(QueryGroupingOutput{})
	pulumi.RegisterOutputType(QueryGroupingArrayOutput{})
	pulumi.RegisterOutputType(QueryGroupingResponseOutput{})
	pulumi.RegisterOutputType(QueryGroupingResponseArrayOutput{})
	pulumi.RegisterOutputType(QuerySortingConfigurationOutput{})
	pulumi.RegisterOutputType(QuerySortingConfigurationArrayOutput{})
	pulumi.RegisterOutputType(QuerySortingConfigurationResponseOutput{})
	pulumi.RegisterOutputType(QuerySortingConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(QueryTimePeriodOutput{})
	pulumi.RegisterOutputType(QueryTimePeriodPtrOutput{})
	pulumi.RegisterOutputType(QueryTimePeriodResponseOutput{})
	pulumi.RegisterOutputType(QueryTimePeriodResponsePtrOutput{})
}
