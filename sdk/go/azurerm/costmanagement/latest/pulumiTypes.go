// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package latest

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The common properties of the export.
type CommonExportPropertiesResponse struct {
	// Has the definition for the export.
	Definition ExportDefinitionResponse `pulumi:"definition"`
	// Has delivery information for the export.
	DeliveryInfo ExportDeliveryInfoResponse `pulumi:"deliveryInfo"`
	// The format of the export being delivered. Currently only 'Csv' is supported.
	Format *string `pulumi:"format"`
	// If the export has an active schedule, provides an estimate of the next execution time.
	NextRunTimeEstimate string `pulumi:"nextRunTimeEstimate"`
	// If requested, has the most recent execution history for the export.
	RunHistory *ExportExecutionListResultResponse `pulumi:"runHistory"`
}

// The common properties of the export.
type CommonExportPropertiesResponseOutput struct{ *pulumi.OutputState }

func (CommonExportPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonExportPropertiesResponse)(nil)).Elem()
}

func (o CommonExportPropertiesResponseOutput) ToCommonExportPropertiesResponseOutput() CommonExportPropertiesResponseOutput {
	return o
}

func (o CommonExportPropertiesResponseOutput) ToCommonExportPropertiesResponseOutputWithContext(ctx context.Context) CommonExportPropertiesResponseOutput {
	return o
}

func (o CommonExportPropertiesResponseOutput) ToCommonExportPropertiesResponsePtrOutput() CommonExportPropertiesResponsePtrOutput {
	return o.ToCommonExportPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o CommonExportPropertiesResponseOutput) ToCommonExportPropertiesResponsePtrOutputWithContext(ctx context.Context) CommonExportPropertiesResponsePtrOutput {
	return o.ApplyT(func(v CommonExportPropertiesResponse) *CommonExportPropertiesResponse {
		return &v
	}).(CommonExportPropertiesResponsePtrOutput)
}

// Has the definition for the export.
func (o CommonExportPropertiesResponseOutput) Definition() ExportDefinitionResponseOutput {
	return o.ApplyT(func(v CommonExportPropertiesResponse) ExportDefinitionResponse { return v.Definition }).(ExportDefinitionResponseOutput)
}

// Has delivery information for the export.
func (o CommonExportPropertiesResponseOutput) DeliveryInfo() ExportDeliveryInfoResponseOutput {
	return o.ApplyT(func(v CommonExportPropertiesResponse) ExportDeliveryInfoResponse { return v.DeliveryInfo }).(ExportDeliveryInfoResponseOutput)
}

// The format of the export being delivered. Currently only 'Csv' is supported.
func (o CommonExportPropertiesResponseOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommonExportPropertiesResponse) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// If the export has an active schedule, provides an estimate of the next execution time.
func (o CommonExportPropertiesResponseOutput) NextRunTimeEstimate() pulumi.StringOutput {
	return o.ApplyT(func(v CommonExportPropertiesResponse) string { return v.NextRunTimeEstimate }).(pulumi.StringOutput)
}

// If requested, has the most recent execution history for the export.
func (o CommonExportPropertiesResponseOutput) RunHistory() ExportExecutionListResultResponsePtrOutput {
	return o.ApplyT(func(v CommonExportPropertiesResponse) *ExportExecutionListResultResponse { return v.RunHistory }).(ExportExecutionListResultResponsePtrOutput)
}

type CommonExportPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (CommonExportPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonExportPropertiesResponse)(nil)).Elem()
}

func (o CommonExportPropertiesResponsePtrOutput) ToCommonExportPropertiesResponsePtrOutput() CommonExportPropertiesResponsePtrOutput {
	return o
}

func (o CommonExportPropertiesResponsePtrOutput) ToCommonExportPropertiesResponsePtrOutputWithContext(ctx context.Context) CommonExportPropertiesResponsePtrOutput {
	return o
}

func (o CommonExportPropertiesResponsePtrOutput) Elem() CommonExportPropertiesResponseOutput {
	return o.ApplyT(func(v *CommonExportPropertiesResponse) CommonExportPropertiesResponse { return *v }).(CommonExportPropertiesResponseOutput)
}

// Has the definition for the export.
func (o CommonExportPropertiesResponsePtrOutput) Definition() ExportDefinitionResponsePtrOutput {
	return o.ApplyT(func(v *CommonExportPropertiesResponse) *ExportDefinitionResponse {
		if v == nil {
			return nil
		}
		return &v.Definition
	}).(ExportDefinitionResponsePtrOutput)
}

// Has delivery information for the export.
func (o CommonExportPropertiesResponsePtrOutput) DeliveryInfo() ExportDeliveryInfoResponsePtrOutput {
	return o.ApplyT(func(v *CommonExportPropertiesResponse) *ExportDeliveryInfoResponse {
		if v == nil {
			return nil
		}
		return &v.DeliveryInfo
	}).(ExportDeliveryInfoResponsePtrOutput)
}

// The format of the export being delivered. Currently only 'Csv' is supported.
func (o CommonExportPropertiesResponsePtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommonExportPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Format
	}).(pulumi.StringPtrOutput)
}

// If the export has an active schedule, provides an estimate of the next execution time.
func (o CommonExportPropertiesResponsePtrOutput) NextRunTimeEstimate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommonExportPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NextRunTimeEstimate
	}).(pulumi.StringPtrOutput)
}

// If requested, has the most recent execution history for the export.
func (o CommonExportPropertiesResponsePtrOutput) RunHistory() ExportExecutionListResultResponsePtrOutput {
	return o.ApplyT(func(v *CommonExportPropertiesResponse) *ExportExecutionListResultResponse {
		if v == nil {
			return nil
		}
		return v.RunHistory
	}).(ExportExecutionListResultResponsePtrOutput)
}

// The details of the error.
type ErrorDetailsResponse struct {
	// Error code.
	Code string `pulumi:"code"`
	// Error message indicating why the operation failed.
	Message string `pulumi:"message"`
}

// The details of the error.
type ErrorDetailsResponseOutput struct{ *pulumi.OutputState }

func (ErrorDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorDetailsResponse)(nil)).Elem()
}

func (o ErrorDetailsResponseOutput) ToErrorDetailsResponseOutput() ErrorDetailsResponseOutput {
	return o
}

func (o ErrorDetailsResponseOutput) ToErrorDetailsResponseOutputWithContext(ctx context.Context) ErrorDetailsResponseOutput {
	return o
}

func (o ErrorDetailsResponseOutput) ToErrorDetailsResponsePtrOutput() ErrorDetailsResponsePtrOutput {
	return o.ToErrorDetailsResponsePtrOutputWithContext(context.Background())
}

func (o ErrorDetailsResponseOutput) ToErrorDetailsResponsePtrOutputWithContext(ctx context.Context) ErrorDetailsResponsePtrOutput {
	return o.ApplyT(func(v ErrorDetailsResponse) *ErrorDetailsResponse {
		return &v
	}).(ErrorDetailsResponsePtrOutput)
}

// Error code.
func (o ErrorDetailsResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailsResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Error message indicating why the operation failed.
func (o ErrorDetailsResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailsResponse) string { return v.Message }).(pulumi.StringOutput)
}

type ErrorDetailsResponsePtrOutput struct{ *pulumi.OutputState }

func (ErrorDetailsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ErrorDetailsResponse)(nil)).Elem()
}

func (o ErrorDetailsResponsePtrOutput) ToErrorDetailsResponsePtrOutput() ErrorDetailsResponsePtrOutput {
	return o
}

func (o ErrorDetailsResponsePtrOutput) ToErrorDetailsResponsePtrOutputWithContext(ctx context.Context) ErrorDetailsResponsePtrOutput {
	return o
}

func (o ErrorDetailsResponsePtrOutput) Elem() ErrorDetailsResponseOutput {
	return o.ApplyT(func(v *ErrorDetailsResponse) ErrorDetailsResponse { return *v }).(ErrorDetailsResponseOutput)
}

// Error code.
func (o ErrorDetailsResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.StringPtrOutput)
}

// Error message indicating why the operation failed.
func (o ErrorDetailsResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

// The definition for data in the export.
type ExportDataset struct {
	// The export dataset configuration.
	Configuration *ExportDatasetConfiguration `pulumi:"configuration"`
	// The granularity of rows in the export. Currently only 'Daily' is supported.
	Granularity *string `pulumi:"granularity"`
}

// ExportDatasetInput is an input type that accepts ExportDatasetArgs and ExportDatasetOutput values.
// You can construct a concrete instance of `ExportDatasetInput` via:
//
//          ExportDatasetArgs{...}
type ExportDatasetInput interface {
	pulumi.Input

	ToExportDatasetOutput() ExportDatasetOutput
	ToExportDatasetOutputWithContext(context.Context) ExportDatasetOutput
}

// The definition for data in the export.
type ExportDatasetArgs struct {
	// The export dataset configuration.
	Configuration ExportDatasetConfigurationPtrInput `pulumi:"configuration"`
	// The granularity of rows in the export. Currently only 'Daily' is supported.
	Granularity pulumi.StringPtrInput `pulumi:"granularity"`
}

func (ExportDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDataset)(nil)).Elem()
}

func (i ExportDatasetArgs) ToExportDatasetOutput() ExportDatasetOutput {
	return i.ToExportDatasetOutputWithContext(context.Background())
}

func (i ExportDatasetArgs) ToExportDatasetOutputWithContext(ctx context.Context) ExportDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDatasetOutput)
}

func (i ExportDatasetArgs) ToExportDatasetPtrOutput() ExportDatasetPtrOutput {
	return i.ToExportDatasetPtrOutputWithContext(context.Background())
}

func (i ExportDatasetArgs) ToExportDatasetPtrOutputWithContext(ctx context.Context) ExportDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDatasetOutput).ToExportDatasetPtrOutputWithContext(ctx)
}

// ExportDatasetPtrInput is an input type that accepts ExportDatasetArgs, ExportDatasetPtr and ExportDatasetPtrOutput values.
// You can construct a concrete instance of `ExportDatasetPtrInput` via:
//
//          ExportDatasetArgs{...}
//
//  or:
//
//          nil
type ExportDatasetPtrInput interface {
	pulumi.Input

	ToExportDatasetPtrOutput() ExportDatasetPtrOutput
	ToExportDatasetPtrOutputWithContext(context.Context) ExportDatasetPtrOutput
}

type exportDatasetPtrType ExportDatasetArgs

func ExportDatasetPtr(v *ExportDatasetArgs) ExportDatasetPtrInput {
	return (*exportDatasetPtrType)(v)
}

func (*exportDatasetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDataset)(nil)).Elem()
}

func (i *exportDatasetPtrType) ToExportDatasetPtrOutput() ExportDatasetPtrOutput {
	return i.ToExportDatasetPtrOutputWithContext(context.Background())
}

func (i *exportDatasetPtrType) ToExportDatasetPtrOutputWithContext(ctx context.Context) ExportDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDatasetPtrOutput)
}

// The export dataset configuration. Allows columns to be selected for the export. If not provided then the export will include all available columns.
type ExportDatasetConfiguration struct {
	// Array of column names to be included in the export. If not provided then the export will include all available columns. The available columns can vary by customer channel (see examples).
	Columns []string `pulumi:"columns"`
}

// ExportDatasetConfigurationInput is an input type that accepts ExportDatasetConfigurationArgs and ExportDatasetConfigurationOutput values.
// You can construct a concrete instance of `ExportDatasetConfigurationInput` via:
//
//          ExportDatasetConfigurationArgs{...}
type ExportDatasetConfigurationInput interface {
	pulumi.Input

	ToExportDatasetConfigurationOutput() ExportDatasetConfigurationOutput
	ToExportDatasetConfigurationOutputWithContext(context.Context) ExportDatasetConfigurationOutput
}

// The export dataset configuration. Allows columns to be selected for the export. If not provided then the export will include all available columns.
type ExportDatasetConfigurationArgs struct {
	// Array of column names to be included in the export. If not provided then the export will include all available columns. The available columns can vary by customer channel (see examples).
	Columns pulumi.StringArrayInput `pulumi:"columns"`
}

func (ExportDatasetConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDatasetConfiguration)(nil)).Elem()
}

func (i ExportDatasetConfigurationArgs) ToExportDatasetConfigurationOutput() ExportDatasetConfigurationOutput {
	return i.ToExportDatasetConfigurationOutputWithContext(context.Background())
}

func (i ExportDatasetConfigurationArgs) ToExportDatasetConfigurationOutputWithContext(ctx context.Context) ExportDatasetConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDatasetConfigurationOutput)
}

func (i ExportDatasetConfigurationArgs) ToExportDatasetConfigurationPtrOutput() ExportDatasetConfigurationPtrOutput {
	return i.ToExportDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (i ExportDatasetConfigurationArgs) ToExportDatasetConfigurationPtrOutputWithContext(ctx context.Context) ExportDatasetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDatasetConfigurationOutput).ToExportDatasetConfigurationPtrOutputWithContext(ctx)
}

// ExportDatasetConfigurationPtrInput is an input type that accepts ExportDatasetConfigurationArgs, ExportDatasetConfigurationPtr and ExportDatasetConfigurationPtrOutput values.
// You can construct a concrete instance of `ExportDatasetConfigurationPtrInput` via:
//
//          ExportDatasetConfigurationArgs{...}
//
//  or:
//
//          nil
type ExportDatasetConfigurationPtrInput interface {
	pulumi.Input

	ToExportDatasetConfigurationPtrOutput() ExportDatasetConfigurationPtrOutput
	ToExportDatasetConfigurationPtrOutputWithContext(context.Context) ExportDatasetConfigurationPtrOutput
}

type exportDatasetConfigurationPtrType ExportDatasetConfigurationArgs

func ExportDatasetConfigurationPtr(v *ExportDatasetConfigurationArgs) ExportDatasetConfigurationPtrInput {
	return (*exportDatasetConfigurationPtrType)(v)
}

func (*exportDatasetConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDatasetConfiguration)(nil)).Elem()
}

func (i *exportDatasetConfigurationPtrType) ToExportDatasetConfigurationPtrOutput() ExportDatasetConfigurationPtrOutput {
	return i.ToExportDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (i *exportDatasetConfigurationPtrType) ToExportDatasetConfigurationPtrOutputWithContext(ctx context.Context) ExportDatasetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDatasetConfigurationPtrOutput)
}

// The export dataset configuration. Allows columns to be selected for the export. If not provided then the export will include all available columns.
type ExportDatasetConfigurationResponse struct {
	// Array of column names to be included in the export. If not provided then the export will include all available columns. The available columns can vary by customer channel (see examples).
	Columns []string `pulumi:"columns"`
}

// The export dataset configuration. Allows columns to be selected for the export. If not provided then the export will include all available columns.
type ExportDatasetConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ExportDatasetConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDatasetConfigurationResponse)(nil)).Elem()
}

func (o ExportDatasetConfigurationResponseOutput) ToExportDatasetConfigurationResponseOutput() ExportDatasetConfigurationResponseOutput {
	return o
}

func (o ExportDatasetConfigurationResponseOutput) ToExportDatasetConfigurationResponseOutputWithContext(ctx context.Context) ExportDatasetConfigurationResponseOutput {
	return o
}

func (o ExportDatasetConfigurationResponseOutput) ToExportDatasetConfigurationResponsePtrOutput() ExportDatasetConfigurationResponsePtrOutput {
	return o.ToExportDatasetConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o ExportDatasetConfigurationResponseOutput) ToExportDatasetConfigurationResponsePtrOutputWithContext(ctx context.Context) ExportDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ExportDatasetConfigurationResponse) *ExportDatasetConfigurationResponse {
		return &v
	}).(ExportDatasetConfigurationResponsePtrOutput)
}

// Array of column names to be included in the export. If not provided then the export will include all available columns. The available columns can vary by customer channel (see examples).
func (o ExportDatasetConfigurationResponseOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExportDatasetConfigurationResponse) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

type ExportDatasetConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportDatasetConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDatasetConfigurationResponse)(nil)).Elem()
}

func (o ExportDatasetConfigurationResponsePtrOutput) ToExportDatasetConfigurationResponsePtrOutput() ExportDatasetConfigurationResponsePtrOutput {
	return o
}

func (o ExportDatasetConfigurationResponsePtrOutput) ToExportDatasetConfigurationResponsePtrOutputWithContext(ctx context.Context) ExportDatasetConfigurationResponsePtrOutput {
	return o
}

func (o ExportDatasetConfigurationResponsePtrOutput) Elem() ExportDatasetConfigurationResponseOutput {
	return o.ApplyT(func(v *ExportDatasetConfigurationResponse) ExportDatasetConfigurationResponse { return *v }).(ExportDatasetConfigurationResponseOutput)
}

// Array of column names to be included in the export. If not provided then the export will include all available columns. The available columns can vary by customer channel (see examples).
func (o ExportDatasetConfigurationResponsePtrOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ExportDatasetConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(pulumi.StringArrayOutput)
}

// The definition for data in the export.
type ExportDatasetResponse struct {
	// The export dataset configuration.
	Configuration *ExportDatasetConfigurationResponse `pulumi:"configuration"`
	// The granularity of rows in the export. Currently only 'Daily' is supported.
	Granularity *string `pulumi:"granularity"`
}

// The definition for data in the export.
type ExportDatasetResponseOutput struct{ *pulumi.OutputState }

func (ExportDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDatasetResponse)(nil)).Elem()
}

func (o ExportDatasetResponseOutput) ToExportDatasetResponseOutput() ExportDatasetResponseOutput {
	return o
}

func (o ExportDatasetResponseOutput) ToExportDatasetResponseOutputWithContext(ctx context.Context) ExportDatasetResponseOutput {
	return o
}

func (o ExportDatasetResponseOutput) ToExportDatasetResponsePtrOutput() ExportDatasetResponsePtrOutput {
	return o.ToExportDatasetResponsePtrOutputWithContext(context.Background())
}

func (o ExportDatasetResponseOutput) ToExportDatasetResponsePtrOutputWithContext(ctx context.Context) ExportDatasetResponsePtrOutput {
	return o.ApplyT(func(v ExportDatasetResponse) *ExportDatasetResponse {
		return &v
	}).(ExportDatasetResponsePtrOutput)
}

// The export dataset configuration.
func (o ExportDatasetResponseOutput) Configuration() ExportDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ExportDatasetResponse) *ExportDatasetConfigurationResponse { return v.Configuration }).(ExportDatasetConfigurationResponsePtrOutput)
}

// The granularity of rows in the export. Currently only 'Daily' is supported.
func (o ExportDatasetResponseOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportDatasetResponse) *string { return v.Granularity }).(pulumi.StringPtrOutput)
}

type ExportDatasetResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportDatasetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDatasetResponse)(nil)).Elem()
}

func (o ExportDatasetResponsePtrOutput) ToExportDatasetResponsePtrOutput() ExportDatasetResponsePtrOutput {
	return o
}

func (o ExportDatasetResponsePtrOutput) ToExportDatasetResponsePtrOutputWithContext(ctx context.Context) ExportDatasetResponsePtrOutput {
	return o
}

func (o ExportDatasetResponsePtrOutput) Elem() ExportDatasetResponseOutput {
	return o.ApplyT(func(v *ExportDatasetResponse) ExportDatasetResponse { return *v }).(ExportDatasetResponseOutput)
}

// The export dataset configuration.
func (o ExportDatasetResponsePtrOutput) Configuration() ExportDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *ExportDatasetResponse) *ExportDatasetConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(ExportDatasetConfigurationResponsePtrOutput)
}

// The granularity of rows in the export. Currently only 'Daily' is supported.
func (o ExportDatasetResponsePtrOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportDatasetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Granularity
	}).(pulumi.StringPtrOutput)
}

// The definition of an export.
type ExportDefinition struct {
	// The definition for data in the export.
	DataSet *ExportDataset `pulumi:"dataSet"`
	// Has time period for pulling data for the export.
	TimePeriod *ExportTimePeriod `pulumi:"timePeriod"`
	// The time frame for pulling data for the export. If custom, then a specific time period must be provided.
	Timeframe string `pulumi:"timeframe"`
	// The type of the export. Note that 'Usage' is equivalent to 'ActualCost' and is applicable to exports that do not yet provide data for charges or amortization for service reservations.
	Type string `pulumi:"type"`
}

// ExportDefinitionInput is an input type that accepts ExportDefinitionArgs and ExportDefinitionOutput values.
// You can construct a concrete instance of `ExportDefinitionInput` via:
//
//          ExportDefinitionArgs{...}
type ExportDefinitionInput interface {
	pulumi.Input

	ToExportDefinitionOutput() ExportDefinitionOutput
	ToExportDefinitionOutputWithContext(context.Context) ExportDefinitionOutput
}

// The definition of an export.
type ExportDefinitionArgs struct {
	// The definition for data in the export.
	DataSet ExportDatasetPtrInput `pulumi:"dataSet"`
	// Has time period for pulling data for the export.
	TimePeriod ExportTimePeriodPtrInput `pulumi:"timePeriod"`
	// The time frame for pulling data for the export. If custom, then a specific time period must be provided.
	Timeframe pulumi.StringInput `pulumi:"timeframe"`
	// The type of the export. Note that 'Usage' is equivalent to 'ActualCost' and is applicable to exports that do not yet provide data for charges or amortization for service reservations.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExportDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDefinition)(nil)).Elem()
}

func (i ExportDefinitionArgs) ToExportDefinitionOutput() ExportDefinitionOutput {
	return i.ToExportDefinitionOutputWithContext(context.Background())
}

func (i ExportDefinitionArgs) ToExportDefinitionOutputWithContext(ctx context.Context) ExportDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDefinitionOutput)
}

func (i ExportDefinitionArgs) ToExportDefinitionPtrOutput() ExportDefinitionPtrOutput {
	return i.ToExportDefinitionPtrOutputWithContext(context.Background())
}

func (i ExportDefinitionArgs) ToExportDefinitionPtrOutputWithContext(ctx context.Context) ExportDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDefinitionOutput).ToExportDefinitionPtrOutputWithContext(ctx)
}

// ExportDefinitionPtrInput is an input type that accepts ExportDefinitionArgs, ExportDefinitionPtr and ExportDefinitionPtrOutput values.
// You can construct a concrete instance of `ExportDefinitionPtrInput` via:
//
//          ExportDefinitionArgs{...}
//
//  or:
//
//          nil
type ExportDefinitionPtrInput interface {
	pulumi.Input

	ToExportDefinitionPtrOutput() ExportDefinitionPtrOutput
	ToExportDefinitionPtrOutputWithContext(context.Context) ExportDefinitionPtrOutput
}

type exportDefinitionPtrType ExportDefinitionArgs

func ExportDefinitionPtr(v *ExportDefinitionArgs) ExportDefinitionPtrInput {
	return (*exportDefinitionPtrType)(v)
}

func (*exportDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDefinition)(nil)).Elem()
}

func (i *exportDefinitionPtrType) ToExportDefinitionPtrOutput() ExportDefinitionPtrOutput {
	return i.ToExportDefinitionPtrOutputWithContext(context.Background())
}

func (i *exportDefinitionPtrType) ToExportDefinitionPtrOutputWithContext(ctx context.Context) ExportDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDefinitionPtrOutput)
}

// The definition of an export.
type ExportDefinitionResponse struct {
	// The definition for data in the export.
	DataSet *ExportDatasetResponse `pulumi:"dataSet"`
	// Has time period for pulling data for the export.
	TimePeriod *ExportTimePeriodResponse `pulumi:"timePeriod"`
	// The time frame for pulling data for the export. If custom, then a specific time period must be provided.
	Timeframe string `pulumi:"timeframe"`
	// The type of the export. Note that 'Usage' is equivalent to 'ActualCost' and is applicable to exports that do not yet provide data for charges or amortization for service reservations.
	Type string `pulumi:"type"`
}

// The definition of an export.
type ExportDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ExportDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDefinitionResponse)(nil)).Elem()
}

func (o ExportDefinitionResponseOutput) ToExportDefinitionResponseOutput() ExportDefinitionResponseOutput {
	return o
}

func (o ExportDefinitionResponseOutput) ToExportDefinitionResponseOutputWithContext(ctx context.Context) ExportDefinitionResponseOutput {
	return o
}

func (o ExportDefinitionResponseOutput) ToExportDefinitionResponsePtrOutput() ExportDefinitionResponsePtrOutput {
	return o.ToExportDefinitionResponsePtrOutputWithContext(context.Background())
}

func (o ExportDefinitionResponseOutput) ToExportDefinitionResponsePtrOutputWithContext(ctx context.Context) ExportDefinitionResponsePtrOutput {
	return o.ApplyT(func(v ExportDefinitionResponse) *ExportDefinitionResponse {
		return &v
	}).(ExportDefinitionResponsePtrOutput)
}

// The definition for data in the export.
func (o ExportDefinitionResponseOutput) DataSet() ExportDatasetResponsePtrOutput {
	return o.ApplyT(func(v ExportDefinitionResponse) *ExportDatasetResponse { return v.DataSet }).(ExportDatasetResponsePtrOutput)
}

// Has time period for pulling data for the export.
func (o ExportDefinitionResponseOutput) TimePeriod() ExportTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v ExportDefinitionResponse) *ExportTimePeriodResponse { return v.TimePeriod }).(ExportTimePeriodResponsePtrOutput)
}

// The time frame for pulling data for the export. If custom, then a specific time period must be provided.
func (o ExportDefinitionResponseOutput) Timeframe() pulumi.StringOutput {
	return o.ApplyT(func(v ExportDefinitionResponse) string { return v.Timeframe }).(pulumi.StringOutput)
}

// The type of the export. Note that 'Usage' is equivalent to 'ActualCost' and is applicable to exports that do not yet provide data for charges or amortization for service reservations.
func (o ExportDefinitionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExportDefinitionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ExportDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDefinitionResponse)(nil)).Elem()
}

func (o ExportDefinitionResponsePtrOutput) ToExportDefinitionResponsePtrOutput() ExportDefinitionResponsePtrOutput {
	return o
}

func (o ExportDefinitionResponsePtrOutput) ToExportDefinitionResponsePtrOutputWithContext(ctx context.Context) ExportDefinitionResponsePtrOutput {
	return o
}

func (o ExportDefinitionResponsePtrOutput) Elem() ExportDefinitionResponseOutput {
	return o.ApplyT(func(v *ExportDefinitionResponse) ExportDefinitionResponse { return *v }).(ExportDefinitionResponseOutput)
}

// The definition for data in the export.
func (o ExportDefinitionResponsePtrOutput) DataSet() ExportDatasetResponsePtrOutput {
	return o.ApplyT(func(v *ExportDefinitionResponse) *ExportDatasetResponse {
		if v == nil {
			return nil
		}
		return v.DataSet
	}).(ExportDatasetResponsePtrOutput)
}

// Has time period for pulling data for the export.
func (o ExportDefinitionResponsePtrOutput) TimePeriod() ExportTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v *ExportDefinitionResponse) *ExportTimePeriodResponse {
		if v == nil {
			return nil
		}
		return v.TimePeriod
	}).(ExportTimePeriodResponsePtrOutput)
}

// The time frame for pulling data for the export. If custom, then a specific time period must be provided.
func (o ExportDefinitionResponsePtrOutput) Timeframe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Timeframe
	}).(pulumi.StringPtrOutput)
}

// The type of the export. Note that 'Usage' is equivalent to 'ActualCost' and is applicable to exports that do not yet provide data for charges or amortization for service reservations.
func (o ExportDefinitionResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The destination information for the delivery of the export. To allow access to a storage account, you must register the account's subscription with the Microsoft.CostManagementExports resource provider. This is required once per subscription. When creating an export in the Azure portal, it is done automatically, however API users need to register the subscription. For more information see https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-supported-services .
type ExportDeliveryDestination struct {
	// The name of the container where exports will be uploaded.
	Container string `pulumi:"container"`
	// The resource id of the storage account where exports will be delivered.
	ResourceId string `pulumi:"resourceId"`
	// The name of the directory where exports will be uploaded.
	RootFolderPath *string `pulumi:"rootFolderPath"`
}

// ExportDeliveryDestinationInput is an input type that accepts ExportDeliveryDestinationArgs and ExportDeliveryDestinationOutput values.
// You can construct a concrete instance of `ExportDeliveryDestinationInput` via:
//
//          ExportDeliveryDestinationArgs{...}
type ExportDeliveryDestinationInput interface {
	pulumi.Input

	ToExportDeliveryDestinationOutput() ExportDeliveryDestinationOutput
	ToExportDeliveryDestinationOutputWithContext(context.Context) ExportDeliveryDestinationOutput
}

// The destination information for the delivery of the export. To allow access to a storage account, you must register the account's subscription with the Microsoft.CostManagementExports resource provider. This is required once per subscription. When creating an export in the Azure portal, it is done automatically, however API users need to register the subscription. For more information see https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-supported-services .
type ExportDeliveryDestinationArgs struct {
	// The name of the container where exports will be uploaded.
	Container pulumi.StringInput `pulumi:"container"`
	// The resource id of the storage account where exports will be delivered.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// The name of the directory where exports will be uploaded.
	RootFolderPath pulumi.StringPtrInput `pulumi:"rootFolderPath"`
}

func (ExportDeliveryDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryDestination)(nil)).Elem()
}

func (i ExportDeliveryDestinationArgs) ToExportDeliveryDestinationOutput() ExportDeliveryDestinationOutput {
	return i.ToExportDeliveryDestinationOutputWithContext(context.Background())
}

func (i ExportDeliveryDestinationArgs) ToExportDeliveryDestinationOutputWithContext(ctx context.Context) ExportDeliveryDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryDestinationOutput)
}

func (i ExportDeliveryDestinationArgs) ToExportDeliveryDestinationPtrOutput() ExportDeliveryDestinationPtrOutput {
	return i.ToExportDeliveryDestinationPtrOutputWithContext(context.Background())
}

func (i ExportDeliveryDestinationArgs) ToExportDeliveryDestinationPtrOutputWithContext(ctx context.Context) ExportDeliveryDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryDestinationOutput).ToExportDeliveryDestinationPtrOutputWithContext(ctx)
}

// ExportDeliveryDestinationPtrInput is an input type that accepts ExportDeliveryDestinationArgs, ExportDeliveryDestinationPtr and ExportDeliveryDestinationPtrOutput values.
// You can construct a concrete instance of `ExportDeliveryDestinationPtrInput` via:
//
//          ExportDeliveryDestinationArgs{...}
//
//  or:
//
//          nil
type ExportDeliveryDestinationPtrInput interface {
	pulumi.Input

	ToExportDeliveryDestinationPtrOutput() ExportDeliveryDestinationPtrOutput
	ToExportDeliveryDestinationPtrOutputWithContext(context.Context) ExportDeliveryDestinationPtrOutput
}

type exportDeliveryDestinationPtrType ExportDeliveryDestinationArgs

func ExportDeliveryDestinationPtr(v *ExportDeliveryDestinationArgs) ExportDeliveryDestinationPtrInput {
	return (*exportDeliveryDestinationPtrType)(v)
}

func (*exportDeliveryDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDeliveryDestination)(nil)).Elem()
}

func (i *exportDeliveryDestinationPtrType) ToExportDeliveryDestinationPtrOutput() ExportDeliveryDestinationPtrOutput {
	return i.ToExportDeliveryDestinationPtrOutputWithContext(context.Background())
}

func (i *exportDeliveryDestinationPtrType) ToExportDeliveryDestinationPtrOutputWithContext(ctx context.Context) ExportDeliveryDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryDestinationPtrOutput)
}

// The destination information for the delivery of the export. To allow access to a storage account, you must register the account's subscription with the Microsoft.CostManagementExports resource provider. This is required once per subscription. When creating an export in the Azure portal, it is done automatically, however API users need to register the subscription. For more information see https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-supported-services .
type ExportDeliveryDestinationResponse struct {
	// The name of the container where exports will be uploaded.
	Container string `pulumi:"container"`
	// The resource id of the storage account where exports will be delivered.
	ResourceId string `pulumi:"resourceId"`
	// The name of the directory where exports will be uploaded.
	RootFolderPath *string `pulumi:"rootFolderPath"`
}

// The destination information for the delivery of the export. To allow access to a storage account, you must register the account's subscription with the Microsoft.CostManagementExports resource provider. This is required once per subscription. When creating an export in the Azure portal, it is done automatically, however API users need to register the subscription. For more information see https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-supported-services .
type ExportDeliveryDestinationResponseOutput struct{ *pulumi.OutputState }

func (ExportDeliveryDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryDestinationResponse)(nil)).Elem()
}

func (o ExportDeliveryDestinationResponseOutput) ToExportDeliveryDestinationResponseOutput() ExportDeliveryDestinationResponseOutput {
	return o
}

func (o ExportDeliveryDestinationResponseOutput) ToExportDeliveryDestinationResponseOutputWithContext(ctx context.Context) ExportDeliveryDestinationResponseOutput {
	return o
}

func (o ExportDeliveryDestinationResponseOutput) ToExportDeliveryDestinationResponsePtrOutput() ExportDeliveryDestinationResponsePtrOutput {
	return o.ToExportDeliveryDestinationResponsePtrOutputWithContext(context.Background())
}

func (o ExportDeliveryDestinationResponseOutput) ToExportDeliveryDestinationResponsePtrOutputWithContext(ctx context.Context) ExportDeliveryDestinationResponsePtrOutput {
	return o.ApplyT(func(v ExportDeliveryDestinationResponse) *ExportDeliveryDestinationResponse {
		return &v
	}).(ExportDeliveryDestinationResponsePtrOutput)
}

// The name of the container where exports will be uploaded.
func (o ExportDeliveryDestinationResponseOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v ExportDeliveryDestinationResponse) string { return v.Container }).(pulumi.StringOutput)
}

// The resource id of the storage account where exports will be delivered.
func (o ExportDeliveryDestinationResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ExportDeliveryDestinationResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The name of the directory where exports will be uploaded.
func (o ExportDeliveryDestinationResponseOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportDeliveryDestinationResponse) *string { return v.RootFolderPath }).(pulumi.StringPtrOutput)
}

type ExportDeliveryDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportDeliveryDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDeliveryDestinationResponse)(nil)).Elem()
}

func (o ExportDeliveryDestinationResponsePtrOutput) ToExportDeliveryDestinationResponsePtrOutput() ExportDeliveryDestinationResponsePtrOutput {
	return o
}

func (o ExportDeliveryDestinationResponsePtrOutput) ToExportDeliveryDestinationResponsePtrOutputWithContext(ctx context.Context) ExportDeliveryDestinationResponsePtrOutput {
	return o
}

func (o ExportDeliveryDestinationResponsePtrOutput) Elem() ExportDeliveryDestinationResponseOutput {
	return o.ApplyT(func(v *ExportDeliveryDestinationResponse) ExportDeliveryDestinationResponse { return *v }).(ExportDeliveryDestinationResponseOutput)
}

// The name of the container where exports will be uploaded.
func (o ExportDeliveryDestinationResponsePtrOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportDeliveryDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Container
	}).(pulumi.StringPtrOutput)
}

// The resource id of the storage account where exports will be delivered.
func (o ExportDeliveryDestinationResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportDeliveryDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// The name of the directory where exports will be uploaded.
func (o ExportDeliveryDestinationResponsePtrOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportDeliveryDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.RootFolderPath
	}).(pulumi.StringPtrOutput)
}

// The delivery information associated with a export.
type ExportDeliveryInfo struct {
	// Has destination for the export being delivered.
	Destination ExportDeliveryDestination `pulumi:"destination"`
}

// ExportDeliveryInfoInput is an input type that accepts ExportDeliveryInfoArgs and ExportDeliveryInfoOutput values.
// You can construct a concrete instance of `ExportDeliveryInfoInput` via:
//
//          ExportDeliveryInfoArgs{...}
type ExportDeliveryInfoInput interface {
	pulumi.Input

	ToExportDeliveryInfoOutput() ExportDeliveryInfoOutput
	ToExportDeliveryInfoOutputWithContext(context.Context) ExportDeliveryInfoOutput
}

// The delivery information associated with a export.
type ExportDeliveryInfoArgs struct {
	// Has destination for the export being delivered.
	Destination ExportDeliveryDestinationInput `pulumi:"destination"`
}

func (ExportDeliveryInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryInfo)(nil)).Elem()
}

func (i ExportDeliveryInfoArgs) ToExportDeliveryInfoOutput() ExportDeliveryInfoOutput {
	return i.ToExportDeliveryInfoOutputWithContext(context.Background())
}

func (i ExportDeliveryInfoArgs) ToExportDeliveryInfoOutputWithContext(ctx context.Context) ExportDeliveryInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryInfoOutput)
}

func (i ExportDeliveryInfoArgs) ToExportDeliveryInfoPtrOutput() ExportDeliveryInfoPtrOutput {
	return i.ToExportDeliveryInfoPtrOutputWithContext(context.Background())
}

func (i ExportDeliveryInfoArgs) ToExportDeliveryInfoPtrOutputWithContext(ctx context.Context) ExportDeliveryInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryInfoOutput).ToExportDeliveryInfoPtrOutputWithContext(ctx)
}

// ExportDeliveryInfoPtrInput is an input type that accepts ExportDeliveryInfoArgs, ExportDeliveryInfoPtr and ExportDeliveryInfoPtrOutput values.
// You can construct a concrete instance of `ExportDeliveryInfoPtrInput` via:
//
//          ExportDeliveryInfoArgs{...}
//
//  or:
//
//          nil
type ExportDeliveryInfoPtrInput interface {
	pulumi.Input

	ToExportDeliveryInfoPtrOutput() ExportDeliveryInfoPtrOutput
	ToExportDeliveryInfoPtrOutputWithContext(context.Context) ExportDeliveryInfoPtrOutput
}

type exportDeliveryInfoPtrType ExportDeliveryInfoArgs

func ExportDeliveryInfoPtr(v *ExportDeliveryInfoArgs) ExportDeliveryInfoPtrInput {
	return (*exportDeliveryInfoPtrType)(v)
}

func (*exportDeliveryInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDeliveryInfo)(nil)).Elem()
}

func (i *exportDeliveryInfoPtrType) ToExportDeliveryInfoPtrOutput() ExportDeliveryInfoPtrOutput {
	return i.ToExportDeliveryInfoPtrOutputWithContext(context.Background())
}

func (i *exportDeliveryInfoPtrType) ToExportDeliveryInfoPtrOutputWithContext(ctx context.Context) ExportDeliveryInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportDeliveryInfoPtrOutput)
}

// The delivery information associated with a export.
type ExportDeliveryInfoResponse struct {
	// Has destination for the export being delivered.
	Destination ExportDeliveryDestinationResponse `pulumi:"destination"`
}

// The delivery information associated with a export.
type ExportDeliveryInfoResponseOutput struct{ *pulumi.OutputState }

func (ExportDeliveryInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDeliveryInfoResponse)(nil)).Elem()
}

func (o ExportDeliveryInfoResponseOutput) ToExportDeliveryInfoResponseOutput() ExportDeliveryInfoResponseOutput {
	return o
}

func (o ExportDeliveryInfoResponseOutput) ToExportDeliveryInfoResponseOutputWithContext(ctx context.Context) ExportDeliveryInfoResponseOutput {
	return o
}

func (o ExportDeliveryInfoResponseOutput) ToExportDeliveryInfoResponsePtrOutput() ExportDeliveryInfoResponsePtrOutput {
	return o.ToExportDeliveryInfoResponsePtrOutputWithContext(context.Background())
}

func (o ExportDeliveryInfoResponseOutput) ToExportDeliveryInfoResponsePtrOutputWithContext(ctx context.Context) ExportDeliveryInfoResponsePtrOutput {
	return o.ApplyT(func(v ExportDeliveryInfoResponse) *ExportDeliveryInfoResponse {
		return &v
	}).(ExportDeliveryInfoResponsePtrOutput)
}

// Has destination for the export being delivered.
func (o ExportDeliveryInfoResponseOutput) Destination() ExportDeliveryDestinationResponseOutput {
	return o.ApplyT(func(v ExportDeliveryInfoResponse) ExportDeliveryDestinationResponse { return v.Destination }).(ExportDeliveryDestinationResponseOutput)
}

type ExportDeliveryInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportDeliveryInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportDeliveryInfoResponse)(nil)).Elem()
}

func (o ExportDeliveryInfoResponsePtrOutput) ToExportDeliveryInfoResponsePtrOutput() ExportDeliveryInfoResponsePtrOutput {
	return o
}

func (o ExportDeliveryInfoResponsePtrOutput) ToExportDeliveryInfoResponsePtrOutputWithContext(ctx context.Context) ExportDeliveryInfoResponsePtrOutput {
	return o
}

func (o ExportDeliveryInfoResponsePtrOutput) Elem() ExportDeliveryInfoResponseOutput {
	return o.ApplyT(func(v *ExportDeliveryInfoResponse) ExportDeliveryInfoResponse { return *v }).(ExportDeliveryInfoResponseOutput)
}

// Has destination for the export being delivered.
func (o ExportDeliveryInfoResponsePtrOutput) Destination() ExportDeliveryDestinationResponsePtrOutput {
	return o.ApplyT(func(v *ExportDeliveryInfoResponse) *ExportDeliveryDestinationResponse {
		if v == nil {
			return nil
		}
		return &v.Destination
	}).(ExportDeliveryDestinationResponsePtrOutput)
}

// Result of listing the execution history of an export.
type ExportExecutionListResultResponse struct {
	// A list of export executions.
	Value []ExportExecutionResponse `pulumi:"value"`
}

// Result of listing the execution history of an export.
type ExportExecutionListResultResponseOutput struct{ *pulumi.OutputState }

func (ExportExecutionListResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportExecutionListResultResponse)(nil)).Elem()
}

func (o ExportExecutionListResultResponseOutput) ToExportExecutionListResultResponseOutput() ExportExecutionListResultResponseOutput {
	return o
}

func (o ExportExecutionListResultResponseOutput) ToExportExecutionListResultResponseOutputWithContext(ctx context.Context) ExportExecutionListResultResponseOutput {
	return o
}

func (o ExportExecutionListResultResponseOutput) ToExportExecutionListResultResponsePtrOutput() ExportExecutionListResultResponsePtrOutput {
	return o.ToExportExecutionListResultResponsePtrOutputWithContext(context.Background())
}

func (o ExportExecutionListResultResponseOutput) ToExportExecutionListResultResponsePtrOutputWithContext(ctx context.Context) ExportExecutionListResultResponsePtrOutput {
	return o.ApplyT(func(v ExportExecutionListResultResponse) *ExportExecutionListResultResponse {
		return &v
	}).(ExportExecutionListResultResponsePtrOutput)
}

// A list of export executions.
func (o ExportExecutionListResultResponseOutput) Value() ExportExecutionResponseArrayOutput {
	return o.ApplyT(func(v ExportExecutionListResultResponse) []ExportExecutionResponse { return v.Value }).(ExportExecutionResponseArrayOutput)
}

type ExportExecutionListResultResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportExecutionListResultResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportExecutionListResultResponse)(nil)).Elem()
}

func (o ExportExecutionListResultResponsePtrOutput) ToExportExecutionListResultResponsePtrOutput() ExportExecutionListResultResponsePtrOutput {
	return o
}

func (o ExportExecutionListResultResponsePtrOutput) ToExportExecutionListResultResponsePtrOutputWithContext(ctx context.Context) ExportExecutionListResultResponsePtrOutput {
	return o
}

func (o ExportExecutionListResultResponsePtrOutput) Elem() ExportExecutionListResultResponseOutput {
	return o.ApplyT(func(v *ExportExecutionListResultResponse) ExportExecutionListResultResponse { return *v }).(ExportExecutionListResultResponseOutput)
}

// A list of export executions.
func (o ExportExecutionListResultResponsePtrOutput) Value() ExportExecutionResponseArrayOutput {
	return o.ApplyT(func(v *ExportExecutionListResultResponse) []ExportExecutionResponse {
		if v == nil {
			return nil
		}
		return v.Value
	}).(ExportExecutionResponseArrayOutput)
}

// An export execution.
type ExportExecutionResponse struct {
	// The details of any error.
	Error *ErrorDetailsResponse `pulumi:"error"`
	// The type of the export execution.
	ExecutionType *string `pulumi:"executionType"`
	// The name of the exported file.
	FileName *string `pulumi:"fileName"`
	// Resource Id.
	Id string `pulumi:"id"`
	// Resource name.
	Name string `pulumi:"name"`
	// The time when the export execution finished.
	ProcessingEndTime *string `pulumi:"processingEndTime"`
	// The time when export was picked up to be executed.
	ProcessingStartTime *string `pulumi:"processingStartTime"`
	// The export settings that were in effect for this execution.
	RunSettings *CommonExportPropertiesResponse `pulumi:"runSettings"`
	// The last known status of the export execution.
	Status *string `pulumi:"status"`
	// The identifier for the entity that executed the export. For OnDemand executions it is the user email. For scheduled executions it is 'System'.
	SubmittedBy *string `pulumi:"submittedBy"`
	// The time when export was queued to be executed.
	SubmittedTime *string `pulumi:"submittedTime"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Resource type.
	Type string `pulumi:"type"`
}

// An export execution.
type ExportExecutionResponseOutput struct{ *pulumi.OutputState }

func (ExportExecutionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportExecutionResponse)(nil)).Elem()
}

func (o ExportExecutionResponseOutput) ToExportExecutionResponseOutput() ExportExecutionResponseOutput {
	return o
}

func (o ExportExecutionResponseOutput) ToExportExecutionResponseOutputWithContext(ctx context.Context) ExportExecutionResponseOutput {
	return o
}

// The details of any error.
func (o ExportExecutionResponseOutput) Error() ErrorDetailsResponsePtrOutput {
	return o.ApplyT(func(v ExportExecutionResponse) *ErrorDetailsResponse { return v.Error }).(ErrorDetailsResponsePtrOutput)
}

// The type of the export execution.
func (o ExportExecutionResponseOutput) ExecutionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportExecutionResponse) *string { return v.ExecutionType }).(pulumi.StringPtrOutput)
}

// The name of the exported file.
func (o ExportExecutionResponseOutput) FileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportExecutionResponse) *string { return v.FileName }).(pulumi.StringPtrOutput)
}

// Resource Id.
func (o ExportExecutionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ExportExecutionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Resource name.
func (o ExportExecutionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExportExecutionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The time when the export execution finished.
func (o ExportExecutionResponseOutput) ProcessingEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportExecutionResponse) *string { return v.ProcessingEndTime }).(pulumi.StringPtrOutput)
}

// The time when export was picked up to be executed.
func (o ExportExecutionResponseOutput) ProcessingStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportExecutionResponse) *string { return v.ProcessingStartTime }).(pulumi.StringPtrOutput)
}

// The export settings that were in effect for this execution.
func (o ExportExecutionResponseOutput) RunSettings() CommonExportPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ExportExecutionResponse) *CommonExportPropertiesResponse { return v.RunSettings }).(CommonExportPropertiesResponsePtrOutput)
}

// The last known status of the export execution.
func (o ExportExecutionResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportExecutionResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The identifier for the entity that executed the export. For OnDemand executions it is the user email. For scheduled executions it is 'System'.
func (o ExportExecutionResponseOutput) SubmittedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportExecutionResponse) *string { return v.SubmittedBy }).(pulumi.StringPtrOutput)
}

// The time when export was queued to be executed.
func (o ExportExecutionResponseOutput) SubmittedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportExecutionResponse) *string { return v.SubmittedTime }).(pulumi.StringPtrOutput)
}

// Resource tags.
func (o ExportExecutionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ExportExecutionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type.
func (o ExportExecutionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExportExecutionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ExportExecutionResponseArrayOutput struct{ *pulumi.OutputState }

func (ExportExecutionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExportExecutionResponse)(nil)).Elem()
}

func (o ExportExecutionResponseArrayOutput) ToExportExecutionResponseArrayOutput() ExportExecutionResponseArrayOutput {
	return o
}

func (o ExportExecutionResponseArrayOutput) ToExportExecutionResponseArrayOutputWithContext(ctx context.Context) ExportExecutionResponseArrayOutput {
	return o
}

func (o ExportExecutionResponseArrayOutput) Index(i pulumi.IntInput) ExportExecutionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExportExecutionResponse {
		return vs[0].([]ExportExecutionResponse)[vs[1].(int)]
	}).(ExportExecutionResponseOutput)
}

// The start and end date for recurrence schedule.
type ExportRecurrencePeriod struct {
	// The start date of recurrence.
	From string `pulumi:"from"`
	// The end date of recurrence.
	To *string `pulumi:"to"`
}

// ExportRecurrencePeriodInput is an input type that accepts ExportRecurrencePeriodArgs and ExportRecurrencePeriodOutput values.
// You can construct a concrete instance of `ExportRecurrencePeriodInput` via:
//
//          ExportRecurrencePeriodArgs{...}
type ExportRecurrencePeriodInput interface {
	pulumi.Input

	ToExportRecurrencePeriodOutput() ExportRecurrencePeriodOutput
	ToExportRecurrencePeriodOutputWithContext(context.Context) ExportRecurrencePeriodOutput
}

// The start and end date for recurrence schedule.
type ExportRecurrencePeriodArgs struct {
	// The start date of recurrence.
	From pulumi.StringInput `pulumi:"from"`
	// The end date of recurrence.
	To pulumi.StringPtrInput `pulumi:"to"`
}

func (ExportRecurrencePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportRecurrencePeriod)(nil)).Elem()
}

func (i ExportRecurrencePeriodArgs) ToExportRecurrencePeriodOutput() ExportRecurrencePeriodOutput {
	return i.ToExportRecurrencePeriodOutputWithContext(context.Background())
}

func (i ExportRecurrencePeriodArgs) ToExportRecurrencePeriodOutputWithContext(ctx context.Context) ExportRecurrencePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRecurrencePeriodOutput)
}

func (i ExportRecurrencePeriodArgs) ToExportRecurrencePeriodPtrOutput() ExportRecurrencePeriodPtrOutput {
	return i.ToExportRecurrencePeriodPtrOutputWithContext(context.Background())
}

func (i ExportRecurrencePeriodArgs) ToExportRecurrencePeriodPtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRecurrencePeriodOutput).ToExportRecurrencePeriodPtrOutputWithContext(ctx)
}

// ExportRecurrencePeriodPtrInput is an input type that accepts ExportRecurrencePeriodArgs, ExportRecurrencePeriodPtr and ExportRecurrencePeriodPtrOutput values.
// You can construct a concrete instance of `ExportRecurrencePeriodPtrInput` via:
//
//          ExportRecurrencePeriodArgs{...}
//
//  or:
//
//          nil
type ExportRecurrencePeriodPtrInput interface {
	pulumi.Input

	ToExportRecurrencePeriodPtrOutput() ExportRecurrencePeriodPtrOutput
	ToExportRecurrencePeriodPtrOutputWithContext(context.Context) ExportRecurrencePeriodPtrOutput
}

type exportRecurrencePeriodPtrType ExportRecurrencePeriodArgs

func ExportRecurrencePeriodPtr(v *ExportRecurrencePeriodArgs) ExportRecurrencePeriodPtrInput {
	return (*exportRecurrencePeriodPtrType)(v)
}

func (*exportRecurrencePeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportRecurrencePeriod)(nil)).Elem()
}

func (i *exportRecurrencePeriodPtrType) ToExportRecurrencePeriodPtrOutput() ExportRecurrencePeriodPtrOutput {
	return i.ToExportRecurrencePeriodPtrOutputWithContext(context.Background())
}

func (i *exportRecurrencePeriodPtrType) ToExportRecurrencePeriodPtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportRecurrencePeriodPtrOutput)
}

// The start and end date for recurrence schedule.
type ExportRecurrencePeriodResponse struct {
	// The start date of recurrence.
	From string `pulumi:"from"`
	// The end date of recurrence.
	To *string `pulumi:"to"`
}

// The start and end date for recurrence schedule.
type ExportRecurrencePeriodResponseOutput struct{ *pulumi.OutputState }

func (ExportRecurrencePeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportRecurrencePeriodResponse)(nil)).Elem()
}

func (o ExportRecurrencePeriodResponseOutput) ToExportRecurrencePeriodResponseOutput() ExportRecurrencePeriodResponseOutput {
	return o
}

func (o ExportRecurrencePeriodResponseOutput) ToExportRecurrencePeriodResponseOutputWithContext(ctx context.Context) ExportRecurrencePeriodResponseOutput {
	return o
}

func (o ExportRecurrencePeriodResponseOutput) ToExportRecurrencePeriodResponsePtrOutput() ExportRecurrencePeriodResponsePtrOutput {
	return o.ToExportRecurrencePeriodResponsePtrOutputWithContext(context.Background())
}

func (o ExportRecurrencePeriodResponseOutput) ToExportRecurrencePeriodResponsePtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodResponsePtrOutput {
	return o.ApplyT(func(v ExportRecurrencePeriodResponse) *ExportRecurrencePeriodResponse {
		return &v
	}).(ExportRecurrencePeriodResponsePtrOutput)
}

// The start date of recurrence.
func (o ExportRecurrencePeriodResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ExportRecurrencePeriodResponse) string { return v.From }).(pulumi.StringOutput)
}

// The end date of recurrence.
func (o ExportRecurrencePeriodResponseOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportRecurrencePeriodResponse) *string { return v.To }).(pulumi.StringPtrOutput)
}

type ExportRecurrencePeriodResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportRecurrencePeriodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportRecurrencePeriodResponse)(nil)).Elem()
}

func (o ExportRecurrencePeriodResponsePtrOutput) ToExportRecurrencePeriodResponsePtrOutput() ExportRecurrencePeriodResponsePtrOutput {
	return o
}

func (o ExportRecurrencePeriodResponsePtrOutput) ToExportRecurrencePeriodResponsePtrOutputWithContext(ctx context.Context) ExportRecurrencePeriodResponsePtrOutput {
	return o
}

func (o ExportRecurrencePeriodResponsePtrOutput) Elem() ExportRecurrencePeriodResponseOutput {
	return o.ApplyT(func(v *ExportRecurrencePeriodResponse) ExportRecurrencePeriodResponse { return *v }).(ExportRecurrencePeriodResponseOutput)
}

// The start date of recurrence.
func (o ExportRecurrencePeriodResponsePtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportRecurrencePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date of recurrence.
func (o ExportRecurrencePeriodResponsePtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportRecurrencePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return v.To
	}).(pulumi.StringPtrOutput)
}

// The schedule associated with the export.
type ExportSchedule struct {
	// The schedule recurrence.
	Recurrence string `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod *ExportRecurrencePeriod `pulumi:"recurrencePeriod"`
	// The status of the export's schedule. If 'Inactive', the export's schedule is paused.
	Status *string `pulumi:"status"`
}

// ExportScheduleInput is an input type that accepts ExportScheduleArgs and ExportScheduleOutput values.
// You can construct a concrete instance of `ExportScheduleInput` via:
//
//          ExportScheduleArgs{...}
type ExportScheduleInput interface {
	pulumi.Input

	ToExportScheduleOutput() ExportScheduleOutput
	ToExportScheduleOutputWithContext(context.Context) ExportScheduleOutput
}

// The schedule associated with the export.
type ExportScheduleArgs struct {
	// The schedule recurrence.
	Recurrence pulumi.StringInput `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod ExportRecurrencePeriodPtrInput `pulumi:"recurrencePeriod"`
	// The status of the export's schedule. If 'Inactive', the export's schedule is paused.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ExportScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportSchedule)(nil)).Elem()
}

func (i ExportScheduleArgs) ToExportScheduleOutput() ExportScheduleOutput {
	return i.ToExportScheduleOutputWithContext(context.Background())
}

func (i ExportScheduleArgs) ToExportScheduleOutputWithContext(ctx context.Context) ExportScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportScheduleOutput)
}

func (i ExportScheduleArgs) ToExportSchedulePtrOutput() ExportSchedulePtrOutput {
	return i.ToExportSchedulePtrOutputWithContext(context.Background())
}

func (i ExportScheduleArgs) ToExportSchedulePtrOutputWithContext(ctx context.Context) ExportSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportScheduleOutput).ToExportSchedulePtrOutputWithContext(ctx)
}

// ExportSchedulePtrInput is an input type that accepts ExportScheduleArgs, ExportSchedulePtr and ExportSchedulePtrOutput values.
// You can construct a concrete instance of `ExportSchedulePtrInput` via:
//
//          ExportScheduleArgs{...}
//
//  or:
//
//          nil
type ExportSchedulePtrInput interface {
	pulumi.Input

	ToExportSchedulePtrOutput() ExportSchedulePtrOutput
	ToExportSchedulePtrOutputWithContext(context.Context) ExportSchedulePtrOutput
}

type exportSchedulePtrType ExportScheduleArgs

func ExportSchedulePtr(v *ExportScheduleArgs) ExportSchedulePtrInput {
	return (*exportSchedulePtrType)(v)
}

func (*exportSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportSchedule)(nil)).Elem()
}

func (i *exportSchedulePtrType) ToExportSchedulePtrOutput() ExportSchedulePtrOutput {
	return i.ToExportSchedulePtrOutputWithContext(context.Background())
}

func (i *exportSchedulePtrType) ToExportSchedulePtrOutputWithContext(ctx context.Context) ExportSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportSchedulePtrOutput)
}

// The schedule associated with the export.
type ExportScheduleResponse struct {
	// The schedule recurrence.
	Recurrence string `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod *ExportRecurrencePeriodResponse `pulumi:"recurrencePeriod"`
	// The status of the export's schedule. If 'Inactive', the export's schedule is paused.
	Status *string `pulumi:"status"`
}

// The schedule associated with the export.
type ExportScheduleResponseOutput struct{ *pulumi.OutputState }

func (ExportScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportScheduleResponse)(nil)).Elem()
}

func (o ExportScheduleResponseOutput) ToExportScheduleResponseOutput() ExportScheduleResponseOutput {
	return o
}

func (o ExportScheduleResponseOutput) ToExportScheduleResponseOutputWithContext(ctx context.Context) ExportScheduleResponseOutput {
	return o
}

func (o ExportScheduleResponseOutput) ToExportScheduleResponsePtrOutput() ExportScheduleResponsePtrOutput {
	return o.ToExportScheduleResponsePtrOutputWithContext(context.Background())
}

func (o ExportScheduleResponseOutput) ToExportScheduleResponsePtrOutputWithContext(ctx context.Context) ExportScheduleResponsePtrOutput {
	return o.ApplyT(func(v ExportScheduleResponse) *ExportScheduleResponse {
		return &v
	}).(ExportScheduleResponsePtrOutput)
}

// The schedule recurrence.
func (o ExportScheduleResponseOutput) Recurrence() pulumi.StringOutput {
	return o.ApplyT(func(v ExportScheduleResponse) string { return v.Recurrence }).(pulumi.StringOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ExportScheduleResponseOutput) RecurrencePeriod() ExportRecurrencePeriodResponsePtrOutput {
	return o.ApplyT(func(v ExportScheduleResponse) *ExportRecurrencePeriodResponse { return v.RecurrencePeriod }).(ExportRecurrencePeriodResponsePtrOutput)
}

// The status of the export's schedule. If 'Inactive', the export's schedule is paused.
func (o ExportScheduleResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportScheduleResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ExportScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportScheduleResponse)(nil)).Elem()
}

func (o ExportScheduleResponsePtrOutput) ToExportScheduleResponsePtrOutput() ExportScheduleResponsePtrOutput {
	return o
}

func (o ExportScheduleResponsePtrOutput) ToExportScheduleResponsePtrOutputWithContext(ctx context.Context) ExportScheduleResponsePtrOutput {
	return o
}

func (o ExportScheduleResponsePtrOutput) Elem() ExportScheduleResponseOutput {
	return o.ApplyT(func(v *ExportScheduleResponse) ExportScheduleResponse { return *v }).(ExportScheduleResponseOutput)
}

// The schedule recurrence.
func (o ExportScheduleResponsePtrOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Recurrence
	}).(pulumi.StringPtrOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ExportScheduleResponsePtrOutput) RecurrencePeriod() ExportRecurrencePeriodResponsePtrOutput {
	return o.ApplyT(func(v *ExportScheduleResponse) *ExportRecurrencePeriodResponse {
		if v == nil {
			return nil
		}
		return v.RecurrencePeriod
	}).(ExportRecurrencePeriodResponsePtrOutput)
}

// The status of the export's schedule. If 'Inactive', the export's schedule is paused.
func (o ExportScheduleResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The date range for data in the export. This should only be specified with timeFrame set to 'Custom'. The maximum date range is 3 months.
type ExportTimePeriod struct {
	// The start date for export data.
	From string `pulumi:"from"`
	// The end date for export data.
	To string `pulumi:"to"`
}

// ExportTimePeriodInput is an input type that accepts ExportTimePeriodArgs and ExportTimePeriodOutput values.
// You can construct a concrete instance of `ExportTimePeriodInput` via:
//
//          ExportTimePeriodArgs{...}
type ExportTimePeriodInput interface {
	pulumi.Input

	ToExportTimePeriodOutput() ExportTimePeriodOutput
	ToExportTimePeriodOutputWithContext(context.Context) ExportTimePeriodOutput
}

// The date range for data in the export. This should only be specified with timeFrame set to 'Custom'. The maximum date range is 3 months.
type ExportTimePeriodArgs struct {
	// The start date for export data.
	From pulumi.StringInput `pulumi:"from"`
	// The end date for export data.
	To pulumi.StringInput `pulumi:"to"`
}

func (ExportTimePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportTimePeriod)(nil)).Elem()
}

func (i ExportTimePeriodArgs) ToExportTimePeriodOutput() ExportTimePeriodOutput {
	return i.ToExportTimePeriodOutputWithContext(context.Background())
}

func (i ExportTimePeriodArgs) ToExportTimePeriodOutputWithContext(ctx context.Context) ExportTimePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportTimePeriodOutput)
}

func (i ExportTimePeriodArgs) ToExportTimePeriodPtrOutput() ExportTimePeriodPtrOutput {
	return i.ToExportTimePeriodPtrOutputWithContext(context.Background())
}

func (i ExportTimePeriodArgs) ToExportTimePeriodPtrOutputWithContext(ctx context.Context) ExportTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportTimePeriodOutput).ToExportTimePeriodPtrOutputWithContext(ctx)
}

// ExportTimePeriodPtrInput is an input type that accepts ExportTimePeriodArgs, ExportTimePeriodPtr and ExportTimePeriodPtrOutput values.
// You can construct a concrete instance of `ExportTimePeriodPtrInput` via:
//
//          ExportTimePeriodArgs{...}
//
//  or:
//
//          nil
type ExportTimePeriodPtrInput interface {
	pulumi.Input

	ToExportTimePeriodPtrOutput() ExportTimePeriodPtrOutput
	ToExportTimePeriodPtrOutputWithContext(context.Context) ExportTimePeriodPtrOutput
}

type exportTimePeriodPtrType ExportTimePeriodArgs

func ExportTimePeriodPtr(v *ExportTimePeriodArgs) ExportTimePeriodPtrInput {
	return (*exportTimePeriodPtrType)(v)
}

func (*exportTimePeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportTimePeriod)(nil)).Elem()
}

func (i *exportTimePeriodPtrType) ToExportTimePeriodPtrOutput() ExportTimePeriodPtrOutput {
	return i.ToExportTimePeriodPtrOutputWithContext(context.Background())
}

func (i *exportTimePeriodPtrType) ToExportTimePeriodPtrOutputWithContext(ctx context.Context) ExportTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportTimePeriodPtrOutput)
}

// The date range for data in the export. This should only be specified with timeFrame set to 'Custom'. The maximum date range is 3 months.
type ExportTimePeriodResponse struct {
	// The start date for export data.
	From string `pulumi:"from"`
	// The end date for export data.
	To string `pulumi:"to"`
}

// The date range for data in the export. This should only be specified with timeFrame set to 'Custom'. The maximum date range is 3 months.
type ExportTimePeriodResponseOutput struct{ *pulumi.OutputState }

func (ExportTimePeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportTimePeriodResponse)(nil)).Elem()
}

func (o ExportTimePeriodResponseOutput) ToExportTimePeriodResponseOutput() ExportTimePeriodResponseOutput {
	return o
}

func (o ExportTimePeriodResponseOutput) ToExportTimePeriodResponseOutputWithContext(ctx context.Context) ExportTimePeriodResponseOutput {
	return o
}

func (o ExportTimePeriodResponseOutput) ToExportTimePeriodResponsePtrOutput() ExportTimePeriodResponsePtrOutput {
	return o.ToExportTimePeriodResponsePtrOutputWithContext(context.Background())
}

func (o ExportTimePeriodResponseOutput) ToExportTimePeriodResponsePtrOutputWithContext(ctx context.Context) ExportTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v ExportTimePeriodResponse) *ExportTimePeriodResponse {
		return &v
	}).(ExportTimePeriodResponsePtrOutput)
}

// The start date for export data.
func (o ExportTimePeriodResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ExportTimePeriodResponse) string { return v.From }).(pulumi.StringOutput)
}

// The end date for export data.
func (o ExportTimePeriodResponseOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v ExportTimePeriodResponse) string { return v.To }).(pulumi.StringOutput)
}

type ExportTimePeriodResponsePtrOutput struct{ *pulumi.OutputState }

func (ExportTimePeriodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportTimePeriodResponse)(nil)).Elem()
}

func (o ExportTimePeriodResponsePtrOutput) ToExportTimePeriodResponsePtrOutput() ExportTimePeriodResponsePtrOutput {
	return o
}

func (o ExportTimePeriodResponsePtrOutput) ToExportTimePeriodResponsePtrOutputWithContext(ctx context.Context) ExportTimePeriodResponsePtrOutput {
	return o
}

func (o ExportTimePeriodResponsePtrOutput) Elem() ExportTimePeriodResponseOutput {
	return o.ApplyT(func(v *ExportTimePeriodResponse) ExportTimePeriodResponse { return *v }).(ExportTimePeriodResponseOutput)
}

// The start date for export data.
func (o ExportTimePeriodResponsePtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date for export data.
func (o ExportTimePeriodResponsePtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.To
	}).(pulumi.StringPtrOutput)
}

// Each KPI must contain a 'type' and 'enabled' key.
type KpiProperties struct {
	// show the KPI in the UI?
	Enabled *bool `pulumi:"enabled"`
	// ID of resource related to metric (budget).
	Id *string `pulumi:"id"`
	// KPI type (Forecast, Budget).
	Type *string `pulumi:"type"`
}

// KpiPropertiesInput is an input type that accepts KpiPropertiesArgs and KpiPropertiesOutput values.
// You can construct a concrete instance of `KpiPropertiesInput` via:
//
//          KpiPropertiesArgs{...}
type KpiPropertiesInput interface {
	pulumi.Input

	ToKpiPropertiesOutput() KpiPropertiesOutput
	ToKpiPropertiesOutputWithContext(context.Context) KpiPropertiesOutput
}

// Each KPI must contain a 'type' and 'enabled' key.
type KpiPropertiesArgs struct {
	// show the KPI in the UI?
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// ID of resource related to metric (budget).
	Id pulumi.StringPtrInput `pulumi:"id"`
	// KPI type (Forecast, Budget).
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KpiPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiProperties)(nil)).Elem()
}

func (i KpiPropertiesArgs) ToKpiPropertiesOutput() KpiPropertiesOutput {
	return i.ToKpiPropertiesOutputWithContext(context.Background())
}

func (i KpiPropertiesArgs) ToKpiPropertiesOutputWithContext(ctx context.Context) KpiPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiPropertiesOutput)
}

// KpiPropertiesArrayInput is an input type that accepts KpiPropertiesArray and KpiPropertiesArrayOutput values.
// You can construct a concrete instance of `KpiPropertiesArrayInput` via:
//
//          KpiPropertiesArray{ KpiPropertiesArgs{...} }
type KpiPropertiesArrayInput interface {
	pulumi.Input

	ToKpiPropertiesArrayOutput() KpiPropertiesArrayOutput
	ToKpiPropertiesArrayOutputWithContext(context.Context) KpiPropertiesArrayOutput
}

type KpiPropertiesArray []KpiPropertiesInput

func (KpiPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KpiProperties)(nil)).Elem()
}

func (i KpiPropertiesArray) ToKpiPropertiesArrayOutput() KpiPropertiesArrayOutput {
	return i.ToKpiPropertiesArrayOutputWithContext(context.Background())
}

func (i KpiPropertiesArray) ToKpiPropertiesArrayOutputWithContext(ctx context.Context) KpiPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpiPropertiesArrayOutput)
}

// Each KPI must contain a 'type' and 'enabled' key.
type KpiPropertiesResponse struct {
	// show the KPI in the UI?
	Enabled *bool `pulumi:"enabled"`
	// ID of resource related to metric (budget).
	Id *string `pulumi:"id"`
	// KPI type (Forecast, Budget).
	Type *string `pulumi:"type"`
}

// Each KPI must contain a 'type' and 'enabled' key.
type KpiPropertiesResponseOutput struct{ *pulumi.OutputState }

func (KpiPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KpiPropertiesResponse)(nil)).Elem()
}

func (o KpiPropertiesResponseOutput) ToKpiPropertiesResponseOutput() KpiPropertiesResponseOutput {
	return o
}

func (o KpiPropertiesResponseOutput) ToKpiPropertiesResponseOutputWithContext(ctx context.Context) KpiPropertiesResponseOutput {
	return o
}

// show the KPI in the UI?
func (o KpiPropertiesResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KpiPropertiesResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// ID of resource related to metric (budget).
func (o KpiPropertiesResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KpiPropertiesResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// KPI type (Forecast, Budget).
func (o KpiPropertiesResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KpiPropertiesResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KpiPropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (KpiPropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KpiPropertiesResponse)(nil)).Elem()
}

func (o KpiPropertiesResponseArrayOutput) ToKpiPropertiesResponseArrayOutput() KpiPropertiesResponseArrayOutput {
	return o
}

func (o KpiPropertiesResponseArrayOutput) ToKpiPropertiesResponseArrayOutputWithContext(ctx context.Context) KpiPropertiesResponseArrayOutput {
	return o
}

func (o KpiPropertiesResponseArrayOutput) Index(i pulumi.IntInput) KpiPropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KpiPropertiesResponse {
		return vs[0].([]KpiPropertiesResponse)[vs[1].(int)]
	}).(KpiPropertiesResponseOutput)
}

// Each pivot must contain a 'type' and 'name'.
type PivotProperties struct {
	// Data field to show in view.
	Name *string `pulumi:"name"`
	// Data type to show in view.
	Type *string `pulumi:"type"`
}

// PivotPropertiesInput is an input type that accepts PivotPropertiesArgs and PivotPropertiesOutput values.
// You can construct a concrete instance of `PivotPropertiesInput` via:
//
//          PivotPropertiesArgs{...}
type PivotPropertiesInput interface {
	pulumi.Input

	ToPivotPropertiesOutput() PivotPropertiesOutput
	ToPivotPropertiesOutputWithContext(context.Context) PivotPropertiesOutput
}

// Each pivot must contain a 'type' and 'name'.
type PivotPropertiesArgs struct {
	// Data field to show in view.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Data type to show in view.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PivotPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PivotProperties)(nil)).Elem()
}

func (i PivotPropertiesArgs) ToPivotPropertiesOutput() PivotPropertiesOutput {
	return i.ToPivotPropertiesOutputWithContext(context.Background())
}

func (i PivotPropertiesArgs) ToPivotPropertiesOutputWithContext(ctx context.Context) PivotPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PivotPropertiesOutput)
}

// PivotPropertiesArrayInput is an input type that accepts PivotPropertiesArray and PivotPropertiesArrayOutput values.
// You can construct a concrete instance of `PivotPropertiesArrayInput` via:
//
//          PivotPropertiesArray{ PivotPropertiesArgs{...} }
type PivotPropertiesArrayInput interface {
	pulumi.Input

	ToPivotPropertiesArrayOutput() PivotPropertiesArrayOutput
	ToPivotPropertiesArrayOutputWithContext(context.Context) PivotPropertiesArrayOutput
}

type PivotPropertiesArray []PivotPropertiesInput

func (PivotPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PivotProperties)(nil)).Elem()
}

func (i PivotPropertiesArray) ToPivotPropertiesArrayOutput() PivotPropertiesArrayOutput {
	return i.ToPivotPropertiesArrayOutputWithContext(context.Background())
}

func (i PivotPropertiesArray) ToPivotPropertiesArrayOutputWithContext(ctx context.Context) PivotPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PivotPropertiesArrayOutput)
}

// Each pivot must contain a 'type' and 'name'.
type PivotPropertiesResponse struct {
	// Data field to show in view.
	Name *string `pulumi:"name"`
	// Data type to show in view.
	Type *string `pulumi:"type"`
}

// Each pivot must contain a 'type' and 'name'.
type PivotPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PivotPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PivotPropertiesResponse)(nil)).Elem()
}

func (o PivotPropertiesResponseOutput) ToPivotPropertiesResponseOutput() PivotPropertiesResponseOutput {
	return o
}

func (o PivotPropertiesResponseOutput) ToPivotPropertiesResponseOutputWithContext(ctx context.Context) PivotPropertiesResponseOutput {
	return o
}

// Data field to show in view.
func (o PivotPropertiesResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PivotPropertiesResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Data type to show in view.
func (o PivotPropertiesResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PivotPropertiesResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PivotPropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (PivotPropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PivotPropertiesResponse)(nil)).Elem()
}

func (o PivotPropertiesResponseArrayOutput) ToPivotPropertiesResponseArrayOutput() PivotPropertiesResponseArrayOutput {
	return o
}

func (o PivotPropertiesResponseArrayOutput) ToPivotPropertiesResponseArrayOutputWithContext(ctx context.Context) PivotPropertiesResponseArrayOutput {
	return o
}

func (o PivotPropertiesResponseArrayOutput) Index(i pulumi.IntInput) PivotPropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PivotPropertiesResponse {
		return vs[0].([]PivotPropertiesResponse)[vs[1].(int)]
	}).(PivotPropertiesResponseOutput)
}

// The aggregation expression to be used in the report.
type ReportConfigAggregation struct {
	// The name of the aggregation function to use.
	Function string `pulumi:"function"`
	// The name of the column to aggregate.
	Name string `pulumi:"name"`
}

// ReportConfigAggregationInput is an input type that accepts ReportConfigAggregationArgs and ReportConfigAggregationOutput values.
// You can construct a concrete instance of `ReportConfigAggregationInput` via:
//
//          ReportConfigAggregationArgs{...}
type ReportConfigAggregationInput interface {
	pulumi.Input

	ToReportConfigAggregationOutput() ReportConfigAggregationOutput
	ToReportConfigAggregationOutputWithContext(context.Context) ReportConfigAggregationOutput
}

// The aggregation expression to be used in the report.
type ReportConfigAggregationArgs struct {
	// The name of the aggregation function to use.
	Function pulumi.StringInput `pulumi:"function"`
	// The name of the column to aggregate.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ReportConfigAggregationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigAggregation)(nil)).Elem()
}

func (i ReportConfigAggregationArgs) ToReportConfigAggregationOutput() ReportConfigAggregationOutput {
	return i.ToReportConfigAggregationOutputWithContext(context.Background())
}

func (i ReportConfigAggregationArgs) ToReportConfigAggregationOutputWithContext(ctx context.Context) ReportConfigAggregationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigAggregationOutput)
}

// ReportConfigAggregationMapInput is an input type that accepts ReportConfigAggregationMap and ReportConfigAggregationMapOutput values.
// You can construct a concrete instance of `ReportConfigAggregationMapInput` via:
//
//          ReportConfigAggregationMap{ "key": ReportConfigAggregationArgs{...} }
type ReportConfigAggregationMapInput interface {
	pulumi.Input

	ToReportConfigAggregationMapOutput() ReportConfigAggregationMapOutput
	ToReportConfigAggregationMapOutputWithContext(context.Context) ReportConfigAggregationMapOutput
}

type ReportConfigAggregationMap map[string]ReportConfigAggregationInput

func (ReportConfigAggregationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ReportConfigAggregation)(nil)).Elem()
}

func (i ReportConfigAggregationMap) ToReportConfigAggregationMapOutput() ReportConfigAggregationMapOutput {
	return i.ToReportConfigAggregationMapOutputWithContext(context.Background())
}

func (i ReportConfigAggregationMap) ToReportConfigAggregationMapOutputWithContext(ctx context.Context) ReportConfigAggregationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigAggregationMapOutput)
}

// The aggregation expression to be used in the report.
type ReportConfigAggregationResponse struct {
	// The name of the aggregation function to use.
	Function string `pulumi:"function"`
	// The name of the column to aggregate.
	Name string `pulumi:"name"`
}

// The aggregation expression to be used in the report.
type ReportConfigAggregationResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigAggregationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigAggregationResponse)(nil)).Elem()
}

func (o ReportConfigAggregationResponseOutput) ToReportConfigAggregationResponseOutput() ReportConfigAggregationResponseOutput {
	return o
}

func (o ReportConfigAggregationResponseOutput) ToReportConfigAggregationResponseOutputWithContext(ctx context.Context) ReportConfigAggregationResponseOutput {
	return o
}

// The name of the aggregation function to use.
func (o ReportConfigAggregationResponseOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigAggregationResponse) string { return v.Function }).(pulumi.StringOutput)
}

// The name of the column to aggregate.
func (o ReportConfigAggregationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigAggregationResponse) string { return v.Name }).(pulumi.StringOutput)
}

type ReportConfigAggregationResponseMapOutput struct{ *pulumi.OutputState }

func (ReportConfigAggregationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ReportConfigAggregationResponse)(nil)).Elem()
}

func (o ReportConfigAggregationResponseMapOutput) ToReportConfigAggregationResponseMapOutput() ReportConfigAggregationResponseMapOutput {
	return o
}

func (o ReportConfigAggregationResponseMapOutput) ToReportConfigAggregationResponseMapOutputWithContext(ctx context.Context) ReportConfigAggregationResponseMapOutput {
	return o
}

func (o ReportConfigAggregationResponseMapOutput) MapIndex(k pulumi.StringInput) ReportConfigAggregationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ReportConfigAggregationResponse {
		return vs[0].(map[string]ReportConfigAggregationResponse)[vs[1].(string)]
	}).(ReportConfigAggregationResponseOutput)
}

// The comparison expression to be used in the report.
type ReportConfigComparisonExpression struct {
	// The name of the column to use in comparison.
	Name string `pulumi:"name"`
	// The operator to use for comparison.
	Operator string `pulumi:"operator"`
	// Array of values to use for comparison
	Values []string `pulumi:"values"`
}

// ReportConfigComparisonExpressionInput is an input type that accepts ReportConfigComparisonExpressionArgs and ReportConfigComparisonExpressionOutput values.
// You can construct a concrete instance of `ReportConfigComparisonExpressionInput` via:
//
//          ReportConfigComparisonExpressionArgs{...}
type ReportConfigComparisonExpressionInput interface {
	pulumi.Input

	ToReportConfigComparisonExpressionOutput() ReportConfigComparisonExpressionOutput
	ToReportConfigComparisonExpressionOutputWithContext(context.Context) ReportConfigComparisonExpressionOutput
}

// The comparison expression to be used in the report.
type ReportConfigComparisonExpressionArgs struct {
	// The name of the column to use in comparison.
	Name pulumi.StringInput `pulumi:"name"`
	// The operator to use for comparison.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Array of values to use for comparison
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ReportConfigComparisonExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigComparisonExpression)(nil)).Elem()
}

func (i ReportConfigComparisonExpressionArgs) ToReportConfigComparisonExpressionOutput() ReportConfigComparisonExpressionOutput {
	return i.ToReportConfigComparisonExpressionOutputWithContext(context.Background())
}

func (i ReportConfigComparisonExpressionArgs) ToReportConfigComparisonExpressionOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigComparisonExpressionOutput)
}

func (i ReportConfigComparisonExpressionArgs) ToReportConfigComparisonExpressionPtrOutput() ReportConfigComparisonExpressionPtrOutput {
	return i.ToReportConfigComparisonExpressionPtrOutputWithContext(context.Background())
}

func (i ReportConfigComparisonExpressionArgs) ToReportConfigComparisonExpressionPtrOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigComparisonExpressionOutput).ToReportConfigComparisonExpressionPtrOutputWithContext(ctx)
}

// ReportConfigComparisonExpressionPtrInput is an input type that accepts ReportConfigComparisonExpressionArgs, ReportConfigComparisonExpressionPtr and ReportConfigComparisonExpressionPtrOutput values.
// You can construct a concrete instance of `ReportConfigComparisonExpressionPtrInput` via:
//
//          ReportConfigComparisonExpressionArgs{...}
//
//  or:
//
//          nil
type ReportConfigComparisonExpressionPtrInput interface {
	pulumi.Input

	ToReportConfigComparisonExpressionPtrOutput() ReportConfigComparisonExpressionPtrOutput
	ToReportConfigComparisonExpressionPtrOutputWithContext(context.Context) ReportConfigComparisonExpressionPtrOutput
}

type reportConfigComparisonExpressionPtrType ReportConfigComparisonExpressionArgs

func ReportConfigComparisonExpressionPtr(v *ReportConfigComparisonExpressionArgs) ReportConfigComparisonExpressionPtrInput {
	return (*reportConfigComparisonExpressionPtrType)(v)
}

func (*reportConfigComparisonExpressionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigComparisonExpression)(nil)).Elem()
}

func (i *reportConfigComparisonExpressionPtrType) ToReportConfigComparisonExpressionPtrOutput() ReportConfigComparisonExpressionPtrOutput {
	return i.ToReportConfigComparisonExpressionPtrOutputWithContext(context.Background())
}

func (i *reportConfigComparisonExpressionPtrType) ToReportConfigComparisonExpressionPtrOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigComparisonExpressionPtrOutput)
}

// The comparison expression to be used in the report.
type ReportConfigComparisonExpressionResponse struct {
	// The name of the column to use in comparison.
	Name string `pulumi:"name"`
	// The operator to use for comparison.
	Operator string `pulumi:"operator"`
	// Array of values to use for comparison
	Values []string `pulumi:"values"`
}

// The comparison expression to be used in the report.
type ReportConfigComparisonExpressionResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigComparisonExpressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigComparisonExpressionResponse)(nil)).Elem()
}

func (o ReportConfigComparisonExpressionResponseOutput) ToReportConfigComparisonExpressionResponseOutput() ReportConfigComparisonExpressionResponseOutput {
	return o
}

func (o ReportConfigComparisonExpressionResponseOutput) ToReportConfigComparisonExpressionResponseOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionResponseOutput {
	return o
}

func (o ReportConfigComparisonExpressionResponseOutput) ToReportConfigComparisonExpressionResponsePtrOutput() ReportConfigComparisonExpressionResponsePtrOutput {
	return o.ToReportConfigComparisonExpressionResponsePtrOutputWithContext(context.Background())
}

func (o ReportConfigComparisonExpressionResponseOutput) ToReportConfigComparisonExpressionResponsePtrOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigComparisonExpressionResponse) *ReportConfigComparisonExpressionResponse {
		return &v
	}).(ReportConfigComparisonExpressionResponsePtrOutput)
}

// The name of the column to use in comparison.
func (o ReportConfigComparisonExpressionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigComparisonExpressionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The operator to use for comparison.
func (o ReportConfigComparisonExpressionResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigComparisonExpressionResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Array of values to use for comparison
func (o ReportConfigComparisonExpressionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReportConfigComparisonExpressionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ReportConfigComparisonExpressionResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigComparisonExpressionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigComparisonExpressionResponse)(nil)).Elem()
}

func (o ReportConfigComparisonExpressionResponsePtrOutput) ToReportConfigComparisonExpressionResponsePtrOutput() ReportConfigComparisonExpressionResponsePtrOutput {
	return o
}

func (o ReportConfigComparisonExpressionResponsePtrOutput) ToReportConfigComparisonExpressionResponsePtrOutputWithContext(ctx context.Context) ReportConfigComparisonExpressionResponsePtrOutput {
	return o
}

func (o ReportConfigComparisonExpressionResponsePtrOutput) Elem() ReportConfigComparisonExpressionResponseOutput {
	return o.ApplyT(func(v *ReportConfigComparisonExpressionResponse) ReportConfigComparisonExpressionResponse { return *v }).(ReportConfigComparisonExpressionResponseOutput)
}

// The name of the column to use in comparison.
func (o ReportConfigComparisonExpressionResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigComparisonExpressionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The operator to use for comparison.
func (o ReportConfigComparisonExpressionResponsePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigComparisonExpressionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Array of values to use for comparison
func (o ReportConfigComparisonExpressionResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReportConfigComparisonExpressionResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// The definition of data present in the report.
type ReportConfigDataset struct {
	// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
	Aggregation map[string]ReportConfigAggregation `pulumi:"aggregation"`
	// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
	Configuration *ReportConfigDatasetConfiguration `pulumi:"configuration"`
	// Has filter expression to use in the report.
	Filter *ReportConfigFilter `pulumi:"filter"`
	// The granularity of rows in the report.
	Granularity *string `pulumi:"granularity"`
	// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
	Grouping []ReportConfigGrouping `pulumi:"grouping"`
	// Array of order by expression to use in the report.
	Sorting []ReportConfigSorting `pulumi:"sorting"`
}

// ReportConfigDatasetInput is an input type that accepts ReportConfigDatasetArgs and ReportConfigDatasetOutput values.
// You can construct a concrete instance of `ReportConfigDatasetInput` via:
//
//          ReportConfigDatasetArgs{...}
type ReportConfigDatasetInput interface {
	pulumi.Input

	ToReportConfigDatasetOutput() ReportConfigDatasetOutput
	ToReportConfigDatasetOutputWithContext(context.Context) ReportConfigDatasetOutput
}

// The definition of data present in the report.
type ReportConfigDatasetArgs struct {
	// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
	Aggregation ReportConfigAggregationMapInput `pulumi:"aggregation"`
	// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
	Configuration ReportConfigDatasetConfigurationPtrInput `pulumi:"configuration"`
	// Has filter expression to use in the report.
	Filter ReportConfigFilterPtrInput `pulumi:"filter"`
	// The granularity of rows in the report.
	Granularity pulumi.StringPtrInput `pulumi:"granularity"`
	// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
	Grouping ReportConfigGroupingArrayInput `pulumi:"grouping"`
	// Array of order by expression to use in the report.
	Sorting ReportConfigSortingArrayInput `pulumi:"sorting"`
}

func (ReportConfigDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDataset)(nil)).Elem()
}

func (i ReportConfigDatasetArgs) ToReportConfigDatasetOutput() ReportConfigDatasetOutput {
	return i.ToReportConfigDatasetOutputWithContext(context.Background())
}

func (i ReportConfigDatasetArgs) ToReportConfigDatasetOutputWithContext(ctx context.Context) ReportConfigDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetOutput)
}

func (i ReportConfigDatasetArgs) ToReportConfigDatasetPtrOutput() ReportConfigDatasetPtrOutput {
	return i.ToReportConfigDatasetPtrOutputWithContext(context.Background())
}

func (i ReportConfigDatasetArgs) ToReportConfigDatasetPtrOutputWithContext(ctx context.Context) ReportConfigDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetOutput).ToReportConfigDatasetPtrOutputWithContext(ctx)
}

// ReportConfigDatasetPtrInput is an input type that accepts ReportConfigDatasetArgs, ReportConfigDatasetPtr and ReportConfigDatasetPtrOutput values.
// You can construct a concrete instance of `ReportConfigDatasetPtrInput` via:
//
//          ReportConfigDatasetArgs{...}
//
//  or:
//
//          nil
type ReportConfigDatasetPtrInput interface {
	pulumi.Input

	ToReportConfigDatasetPtrOutput() ReportConfigDatasetPtrOutput
	ToReportConfigDatasetPtrOutputWithContext(context.Context) ReportConfigDatasetPtrOutput
}

type reportConfigDatasetPtrType ReportConfigDatasetArgs

func ReportConfigDatasetPtr(v *ReportConfigDatasetArgs) ReportConfigDatasetPtrInput {
	return (*reportConfigDatasetPtrType)(v)
}

func (*reportConfigDatasetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDataset)(nil)).Elem()
}

func (i *reportConfigDatasetPtrType) ToReportConfigDatasetPtrOutput() ReportConfigDatasetPtrOutput {
	return i.ToReportConfigDatasetPtrOutputWithContext(context.Background())
}

func (i *reportConfigDatasetPtrType) ToReportConfigDatasetPtrOutputWithContext(ctx context.Context) ReportConfigDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetPtrOutput)
}

// The configuration of dataset in the report.
type ReportConfigDatasetConfiguration struct {
	// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
	Columns []string `pulumi:"columns"`
}

// ReportConfigDatasetConfigurationInput is an input type that accepts ReportConfigDatasetConfigurationArgs and ReportConfigDatasetConfigurationOutput values.
// You can construct a concrete instance of `ReportConfigDatasetConfigurationInput` via:
//
//          ReportConfigDatasetConfigurationArgs{...}
type ReportConfigDatasetConfigurationInput interface {
	pulumi.Input

	ToReportConfigDatasetConfigurationOutput() ReportConfigDatasetConfigurationOutput
	ToReportConfigDatasetConfigurationOutputWithContext(context.Context) ReportConfigDatasetConfigurationOutput
}

// The configuration of dataset in the report.
type ReportConfigDatasetConfigurationArgs struct {
	// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
	Columns pulumi.StringArrayInput `pulumi:"columns"`
}

func (ReportConfigDatasetConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDatasetConfiguration)(nil)).Elem()
}

func (i ReportConfigDatasetConfigurationArgs) ToReportConfigDatasetConfigurationOutput() ReportConfigDatasetConfigurationOutput {
	return i.ToReportConfigDatasetConfigurationOutputWithContext(context.Background())
}

func (i ReportConfigDatasetConfigurationArgs) ToReportConfigDatasetConfigurationOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetConfigurationOutput)
}

func (i ReportConfigDatasetConfigurationArgs) ToReportConfigDatasetConfigurationPtrOutput() ReportConfigDatasetConfigurationPtrOutput {
	return i.ToReportConfigDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (i ReportConfigDatasetConfigurationArgs) ToReportConfigDatasetConfigurationPtrOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetConfigurationOutput).ToReportConfigDatasetConfigurationPtrOutputWithContext(ctx)
}

// ReportConfigDatasetConfigurationPtrInput is an input type that accepts ReportConfigDatasetConfigurationArgs, ReportConfigDatasetConfigurationPtr and ReportConfigDatasetConfigurationPtrOutput values.
// You can construct a concrete instance of `ReportConfigDatasetConfigurationPtrInput` via:
//
//          ReportConfigDatasetConfigurationArgs{...}
//
//  or:
//
//          nil
type ReportConfigDatasetConfigurationPtrInput interface {
	pulumi.Input

	ToReportConfigDatasetConfigurationPtrOutput() ReportConfigDatasetConfigurationPtrOutput
	ToReportConfigDatasetConfigurationPtrOutputWithContext(context.Context) ReportConfigDatasetConfigurationPtrOutput
}

type reportConfigDatasetConfigurationPtrType ReportConfigDatasetConfigurationArgs

func ReportConfigDatasetConfigurationPtr(v *ReportConfigDatasetConfigurationArgs) ReportConfigDatasetConfigurationPtrInput {
	return (*reportConfigDatasetConfigurationPtrType)(v)
}

func (*reportConfigDatasetConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDatasetConfiguration)(nil)).Elem()
}

func (i *reportConfigDatasetConfigurationPtrType) ToReportConfigDatasetConfigurationPtrOutput() ReportConfigDatasetConfigurationPtrOutput {
	return i.ToReportConfigDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (i *reportConfigDatasetConfigurationPtrType) ToReportConfigDatasetConfigurationPtrOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDatasetConfigurationPtrOutput)
}

// The configuration of dataset in the report.
type ReportConfigDatasetConfigurationResponse struct {
	// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
	Columns []string `pulumi:"columns"`
}

// The configuration of dataset in the report.
type ReportConfigDatasetConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigDatasetConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDatasetConfigurationResponse)(nil)).Elem()
}

func (o ReportConfigDatasetConfigurationResponseOutput) ToReportConfigDatasetConfigurationResponseOutput() ReportConfigDatasetConfigurationResponseOutput {
	return o
}

func (o ReportConfigDatasetConfigurationResponseOutput) ToReportConfigDatasetConfigurationResponseOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationResponseOutput {
	return o
}

func (o ReportConfigDatasetConfigurationResponseOutput) ToReportConfigDatasetConfigurationResponsePtrOutput() ReportConfigDatasetConfigurationResponsePtrOutput {
	return o.ToReportConfigDatasetConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o ReportConfigDatasetConfigurationResponseOutput) ToReportConfigDatasetConfigurationResponsePtrOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigDatasetConfigurationResponse) *ReportConfigDatasetConfigurationResponse {
		return &v
	}).(ReportConfigDatasetConfigurationResponsePtrOutput)
}

// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
func (o ReportConfigDatasetConfigurationResponseOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReportConfigDatasetConfigurationResponse) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

type ReportConfigDatasetConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigDatasetConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDatasetConfigurationResponse)(nil)).Elem()
}

func (o ReportConfigDatasetConfigurationResponsePtrOutput) ToReportConfigDatasetConfigurationResponsePtrOutput() ReportConfigDatasetConfigurationResponsePtrOutput {
	return o
}

func (o ReportConfigDatasetConfigurationResponsePtrOutput) ToReportConfigDatasetConfigurationResponsePtrOutputWithContext(ctx context.Context) ReportConfigDatasetConfigurationResponsePtrOutput {
	return o
}

func (o ReportConfigDatasetConfigurationResponsePtrOutput) Elem() ReportConfigDatasetConfigurationResponseOutput {
	return o.ApplyT(func(v *ReportConfigDatasetConfigurationResponse) ReportConfigDatasetConfigurationResponse { return *v }).(ReportConfigDatasetConfigurationResponseOutput)
}

// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
func (o ReportConfigDatasetConfigurationResponsePtrOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReportConfigDatasetConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(pulumi.StringArrayOutput)
}

// The definition of data present in the report.
type ReportConfigDatasetResponse struct {
	// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
	Aggregation map[string]ReportConfigAggregationResponse `pulumi:"aggregation"`
	// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
	Configuration *ReportConfigDatasetConfigurationResponse `pulumi:"configuration"`
	// Has filter expression to use in the report.
	Filter *ReportConfigFilterResponse `pulumi:"filter"`
	// The granularity of rows in the report.
	Granularity *string `pulumi:"granularity"`
	// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
	Grouping []ReportConfigGroupingResponse `pulumi:"grouping"`
	// Array of order by expression to use in the report.
	Sorting []ReportConfigSortingResponse `pulumi:"sorting"`
}

// The definition of data present in the report.
type ReportConfigDatasetResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDatasetResponse)(nil)).Elem()
}

func (o ReportConfigDatasetResponseOutput) ToReportConfigDatasetResponseOutput() ReportConfigDatasetResponseOutput {
	return o
}

func (o ReportConfigDatasetResponseOutput) ToReportConfigDatasetResponseOutputWithContext(ctx context.Context) ReportConfigDatasetResponseOutput {
	return o
}

func (o ReportConfigDatasetResponseOutput) ToReportConfigDatasetResponsePtrOutput() ReportConfigDatasetResponsePtrOutput {
	return o.ToReportConfigDatasetResponsePtrOutputWithContext(context.Background())
}

func (o ReportConfigDatasetResponseOutput) ToReportConfigDatasetResponsePtrOutputWithContext(ctx context.Context) ReportConfigDatasetResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigDatasetResponse) *ReportConfigDatasetResponse {
		return &v
	}).(ReportConfigDatasetResponsePtrOutput)
}

// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
func (o ReportConfigDatasetResponseOutput) Aggregation() ReportConfigAggregationResponseMapOutput {
	return o.ApplyT(func(v ReportConfigDatasetResponse) map[string]ReportConfigAggregationResponse { return v.Aggregation }).(ReportConfigAggregationResponseMapOutput)
}

// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
func (o ReportConfigDatasetResponseOutput) Configuration() ReportConfigDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigDatasetResponse) *ReportConfigDatasetConfigurationResponse { return v.Configuration }).(ReportConfigDatasetConfigurationResponsePtrOutput)
}

// Has filter expression to use in the report.
func (o ReportConfigDatasetResponseOutput) Filter() ReportConfigFilterResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigDatasetResponse) *ReportConfigFilterResponse { return v.Filter }).(ReportConfigFilterResponsePtrOutput)
}

// The granularity of rows in the report.
func (o ReportConfigDatasetResponseOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportConfigDatasetResponse) *string { return v.Granularity }).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
func (o ReportConfigDatasetResponseOutput) Grouping() ReportConfigGroupingResponseArrayOutput {
	return o.ApplyT(func(v ReportConfigDatasetResponse) []ReportConfigGroupingResponse { return v.Grouping }).(ReportConfigGroupingResponseArrayOutput)
}

// Array of order by expression to use in the report.
func (o ReportConfigDatasetResponseOutput) Sorting() ReportConfigSortingResponseArrayOutput {
	return o.ApplyT(func(v ReportConfigDatasetResponse) []ReportConfigSortingResponse { return v.Sorting }).(ReportConfigSortingResponseArrayOutput)
}

type ReportConfigDatasetResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigDatasetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDatasetResponse)(nil)).Elem()
}

func (o ReportConfigDatasetResponsePtrOutput) ToReportConfigDatasetResponsePtrOutput() ReportConfigDatasetResponsePtrOutput {
	return o
}

func (o ReportConfigDatasetResponsePtrOutput) ToReportConfigDatasetResponsePtrOutputWithContext(ctx context.Context) ReportConfigDatasetResponsePtrOutput {
	return o
}

func (o ReportConfigDatasetResponsePtrOutput) Elem() ReportConfigDatasetResponseOutput {
	return o.ApplyT(func(v *ReportConfigDatasetResponse) ReportConfigDatasetResponse { return *v }).(ReportConfigDatasetResponseOutput)
}

// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
func (o ReportConfigDatasetResponsePtrOutput) Aggregation() ReportConfigAggregationResponseMapOutput {
	return o.ApplyT(func(v *ReportConfigDatasetResponse) map[string]ReportConfigAggregationResponse {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(ReportConfigAggregationResponseMapOutput)
}

// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
func (o ReportConfigDatasetResponsePtrOutput) Configuration() ReportConfigDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigDatasetResponse) *ReportConfigDatasetConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(ReportConfigDatasetConfigurationResponsePtrOutput)
}

// Has filter expression to use in the report.
func (o ReportConfigDatasetResponsePtrOutput) Filter() ReportConfigFilterResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigDatasetResponse) *ReportConfigFilterResponse {
		if v == nil {
			return nil
		}
		return v.Filter
	}).(ReportConfigFilterResponsePtrOutput)
}

// The granularity of rows in the report.
func (o ReportConfigDatasetResponsePtrOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigDatasetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Granularity
	}).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
func (o ReportConfigDatasetResponsePtrOutput) Grouping() ReportConfigGroupingResponseArrayOutput {
	return o.ApplyT(func(v *ReportConfigDatasetResponse) []ReportConfigGroupingResponse {
		if v == nil {
			return nil
		}
		return v.Grouping
	}).(ReportConfigGroupingResponseArrayOutput)
}

// Array of order by expression to use in the report.
func (o ReportConfigDatasetResponsePtrOutput) Sorting() ReportConfigSortingResponseArrayOutput {
	return o.ApplyT(func(v *ReportConfigDatasetResponse) []ReportConfigSortingResponse {
		if v == nil {
			return nil
		}
		return v.Sorting
	}).(ReportConfigSortingResponseArrayOutput)
}

// The definition of a report config.
type ReportConfigDefinition struct {
	// Has definition for data in this report config.
	Dataset *ReportConfigDataset `pulumi:"dataset"`
	// Has time period for pulling data for the report.
	TimePeriod *ReportConfigTimePeriod `pulumi:"timePeriod"`
	// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
	Timeframe string `pulumi:"timeframe"`
	// The type of the report.
	Type string `pulumi:"type"`
}

// ReportConfigDefinitionInput is an input type that accepts ReportConfigDefinitionArgs and ReportConfigDefinitionOutput values.
// You can construct a concrete instance of `ReportConfigDefinitionInput` via:
//
//          ReportConfigDefinitionArgs{...}
type ReportConfigDefinitionInput interface {
	pulumi.Input

	ToReportConfigDefinitionOutput() ReportConfigDefinitionOutput
	ToReportConfigDefinitionOutputWithContext(context.Context) ReportConfigDefinitionOutput
}

// The definition of a report config.
type ReportConfigDefinitionArgs struct {
	// Has definition for data in this report config.
	Dataset ReportConfigDatasetPtrInput `pulumi:"dataset"`
	// Has time period for pulling data for the report.
	TimePeriod ReportConfigTimePeriodPtrInput `pulumi:"timePeriod"`
	// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
	Timeframe pulumi.StringInput `pulumi:"timeframe"`
	// The type of the report.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ReportConfigDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDefinition)(nil)).Elem()
}

func (i ReportConfigDefinitionArgs) ToReportConfigDefinitionOutput() ReportConfigDefinitionOutput {
	return i.ToReportConfigDefinitionOutputWithContext(context.Background())
}

func (i ReportConfigDefinitionArgs) ToReportConfigDefinitionOutputWithContext(ctx context.Context) ReportConfigDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDefinitionOutput)
}

func (i ReportConfigDefinitionArgs) ToReportConfigDefinitionPtrOutput() ReportConfigDefinitionPtrOutput {
	return i.ToReportConfigDefinitionPtrOutputWithContext(context.Background())
}

func (i ReportConfigDefinitionArgs) ToReportConfigDefinitionPtrOutputWithContext(ctx context.Context) ReportConfigDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDefinitionOutput).ToReportConfigDefinitionPtrOutputWithContext(ctx)
}

// ReportConfigDefinitionPtrInput is an input type that accepts ReportConfigDefinitionArgs, ReportConfigDefinitionPtr and ReportConfigDefinitionPtrOutput values.
// You can construct a concrete instance of `ReportConfigDefinitionPtrInput` via:
//
//          ReportConfigDefinitionArgs{...}
//
//  or:
//
//          nil
type ReportConfigDefinitionPtrInput interface {
	pulumi.Input

	ToReportConfigDefinitionPtrOutput() ReportConfigDefinitionPtrOutput
	ToReportConfigDefinitionPtrOutputWithContext(context.Context) ReportConfigDefinitionPtrOutput
}

type reportConfigDefinitionPtrType ReportConfigDefinitionArgs

func ReportConfigDefinitionPtr(v *ReportConfigDefinitionArgs) ReportConfigDefinitionPtrInput {
	return (*reportConfigDefinitionPtrType)(v)
}

func (*reportConfigDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDefinition)(nil)).Elem()
}

func (i *reportConfigDefinitionPtrType) ToReportConfigDefinitionPtrOutput() ReportConfigDefinitionPtrOutput {
	return i.ToReportConfigDefinitionPtrOutputWithContext(context.Background())
}

func (i *reportConfigDefinitionPtrType) ToReportConfigDefinitionPtrOutputWithContext(ctx context.Context) ReportConfigDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDefinitionPtrOutput)
}

// The definition of a report config.
type ReportConfigDefinitionResponse struct {
	// Has definition for data in this report config.
	Dataset *ReportConfigDatasetResponse `pulumi:"dataset"`
	// Has time period for pulling data for the report.
	TimePeriod *ReportConfigTimePeriodResponse `pulumi:"timePeriod"`
	// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
	Timeframe string `pulumi:"timeframe"`
	// The type of the report.
	Type string `pulumi:"type"`
}

// The definition of a report config.
type ReportConfigDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDefinitionResponse)(nil)).Elem()
}

func (o ReportConfigDefinitionResponseOutput) ToReportConfigDefinitionResponseOutput() ReportConfigDefinitionResponseOutput {
	return o
}

func (o ReportConfigDefinitionResponseOutput) ToReportConfigDefinitionResponseOutputWithContext(ctx context.Context) ReportConfigDefinitionResponseOutput {
	return o
}

func (o ReportConfigDefinitionResponseOutput) ToReportConfigDefinitionResponsePtrOutput() ReportConfigDefinitionResponsePtrOutput {
	return o.ToReportConfigDefinitionResponsePtrOutputWithContext(context.Background())
}

func (o ReportConfigDefinitionResponseOutput) ToReportConfigDefinitionResponsePtrOutputWithContext(ctx context.Context) ReportConfigDefinitionResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigDefinitionResponse) *ReportConfigDefinitionResponse {
		return &v
	}).(ReportConfigDefinitionResponsePtrOutput)
}

// Has definition for data in this report config.
func (o ReportConfigDefinitionResponseOutput) Dataset() ReportConfigDatasetResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigDefinitionResponse) *ReportConfigDatasetResponse { return v.Dataset }).(ReportConfigDatasetResponsePtrOutput)
}

// Has time period for pulling data for the report.
func (o ReportConfigDefinitionResponseOutput) TimePeriod() ReportConfigTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigDefinitionResponse) *ReportConfigTimePeriodResponse { return v.TimePeriod }).(ReportConfigTimePeriodResponsePtrOutput)
}

// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
func (o ReportConfigDefinitionResponseOutput) Timeframe() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigDefinitionResponse) string { return v.Timeframe }).(pulumi.StringOutput)
}

// The type of the report.
func (o ReportConfigDefinitionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigDefinitionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ReportConfigDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDefinitionResponse)(nil)).Elem()
}

func (o ReportConfigDefinitionResponsePtrOutput) ToReportConfigDefinitionResponsePtrOutput() ReportConfigDefinitionResponsePtrOutput {
	return o
}

func (o ReportConfigDefinitionResponsePtrOutput) ToReportConfigDefinitionResponsePtrOutputWithContext(ctx context.Context) ReportConfigDefinitionResponsePtrOutput {
	return o
}

func (o ReportConfigDefinitionResponsePtrOutput) Elem() ReportConfigDefinitionResponseOutput {
	return o.ApplyT(func(v *ReportConfigDefinitionResponse) ReportConfigDefinitionResponse { return *v }).(ReportConfigDefinitionResponseOutput)
}

// Has definition for data in this report config.
func (o ReportConfigDefinitionResponsePtrOutput) Dataset() ReportConfigDatasetResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigDefinitionResponse) *ReportConfigDatasetResponse {
		if v == nil {
			return nil
		}
		return v.Dataset
	}).(ReportConfigDatasetResponsePtrOutput)
}

// Has time period for pulling data for the report.
func (o ReportConfigDefinitionResponsePtrOutput) TimePeriod() ReportConfigTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigDefinitionResponse) *ReportConfigTimePeriodResponse {
		if v == nil {
			return nil
		}
		return v.TimePeriod
	}).(ReportConfigTimePeriodResponsePtrOutput)
}

// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
func (o ReportConfigDefinitionResponsePtrOutput) Timeframe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Timeframe
	}).(pulumi.StringPtrOutput)
}

// The type of the report.
func (o ReportConfigDefinitionResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The destination information for the delivery of the report.
type ReportConfigDeliveryDestination struct {
	// The name of the container where reports will be uploaded.
	Container string `pulumi:"container"`
	// The resource id of the storage account where reports will be delivered.
	ResourceId string `pulumi:"resourceId"`
	// The name of the directory where reports will be uploaded.
	RootFolderPath *string `pulumi:"rootFolderPath"`
}

// ReportConfigDeliveryDestinationInput is an input type that accepts ReportConfigDeliveryDestinationArgs and ReportConfigDeliveryDestinationOutput values.
// You can construct a concrete instance of `ReportConfigDeliveryDestinationInput` via:
//
//          ReportConfigDeliveryDestinationArgs{...}
type ReportConfigDeliveryDestinationInput interface {
	pulumi.Input

	ToReportConfigDeliveryDestinationOutput() ReportConfigDeliveryDestinationOutput
	ToReportConfigDeliveryDestinationOutputWithContext(context.Context) ReportConfigDeliveryDestinationOutput
}

// The destination information for the delivery of the report.
type ReportConfigDeliveryDestinationArgs struct {
	// The name of the container where reports will be uploaded.
	Container pulumi.StringInput `pulumi:"container"`
	// The resource id of the storage account where reports will be delivered.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// The name of the directory where reports will be uploaded.
	RootFolderPath pulumi.StringPtrInput `pulumi:"rootFolderPath"`
}

func (ReportConfigDeliveryDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDeliveryDestination)(nil)).Elem()
}

func (i ReportConfigDeliveryDestinationArgs) ToReportConfigDeliveryDestinationOutput() ReportConfigDeliveryDestinationOutput {
	return i.ToReportConfigDeliveryDestinationOutputWithContext(context.Background())
}

func (i ReportConfigDeliveryDestinationArgs) ToReportConfigDeliveryDestinationOutputWithContext(ctx context.Context) ReportConfigDeliveryDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDeliveryDestinationOutput)
}

func (i ReportConfigDeliveryDestinationArgs) ToReportConfigDeliveryDestinationPtrOutput() ReportConfigDeliveryDestinationPtrOutput {
	return i.ToReportConfigDeliveryDestinationPtrOutputWithContext(context.Background())
}

func (i ReportConfigDeliveryDestinationArgs) ToReportConfigDeliveryDestinationPtrOutputWithContext(ctx context.Context) ReportConfigDeliveryDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDeliveryDestinationOutput).ToReportConfigDeliveryDestinationPtrOutputWithContext(ctx)
}

// ReportConfigDeliveryDestinationPtrInput is an input type that accepts ReportConfigDeliveryDestinationArgs, ReportConfigDeliveryDestinationPtr and ReportConfigDeliveryDestinationPtrOutput values.
// You can construct a concrete instance of `ReportConfigDeliveryDestinationPtrInput` via:
//
//          ReportConfigDeliveryDestinationArgs{...}
//
//  or:
//
//          nil
type ReportConfigDeliveryDestinationPtrInput interface {
	pulumi.Input

	ToReportConfigDeliveryDestinationPtrOutput() ReportConfigDeliveryDestinationPtrOutput
	ToReportConfigDeliveryDestinationPtrOutputWithContext(context.Context) ReportConfigDeliveryDestinationPtrOutput
}

type reportConfigDeliveryDestinationPtrType ReportConfigDeliveryDestinationArgs

func ReportConfigDeliveryDestinationPtr(v *ReportConfigDeliveryDestinationArgs) ReportConfigDeliveryDestinationPtrInput {
	return (*reportConfigDeliveryDestinationPtrType)(v)
}

func (*reportConfigDeliveryDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDeliveryDestination)(nil)).Elem()
}

func (i *reportConfigDeliveryDestinationPtrType) ToReportConfigDeliveryDestinationPtrOutput() ReportConfigDeliveryDestinationPtrOutput {
	return i.ToReportConfigDeliveryDestinationPtrOutputWithContext(context.Background())
}

func (i *reportConfigDeliveryDestinationPtrType) ToReportConfigDeliveryDestinationPtrOutputWithContext(ctx context.Context) ReportConfigDeliveryDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDeliveryDestinationPtrOutput)
}

// The destination information for the delivery of the report.
type ReportConfigDeliveryDestinationResponse struct {
	// The name of the container where reports will be uploaded.
	Container string `pulumi:"container"`
	// The resource id of the storage account where reports will be delivered.
	ResourceId string `pulumi:"resourceId"`
	// The name of the directory where reports will be uploaded.
	RootFolderPath *string `pulumi:"rootFolderPath"`
}

// The destination information for the delivery of the report.
type ReportConfigDeliveryDestinationResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigDeliveryDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDeliveryDestinationResponse)(nil)).Elem()
}

func (o ReportConfigDeliveryDestinationResponseOutput) ToReportConfigDeliveryDestinationResponseOutput() ReportConfigDeliveryDestinationResponseOutput {
	return o
}

func (o ReportConfigDeliveryDestinationResponseOutput) ToReportConfigDeliveryDestinationResponseOutputWithContext(ctx context.Context) ReportConfigDeliveryDestinationResponseOutput {
	return o
}

func (o ReportConfigDeliveryDestinationResponseOutput) ToReportConfigDeliveryDestinationResponsePtrOutput() ReportConfigDeliveryDestinationResponsePtrOutput {
	return o.ToReportConfigDeliveryDestinationResponsePtrOutputWithContext(context.Background())
}

func (o ReportConfigDeliveryDestinationResponseOutput) ToReportConfigDeliveryDestinationResponsePtrOutputWithContext(ctx context.Context) ReportConfigDeliveryDestinationResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigDeliveryDestinationResponse) *ReportConfigDeliveryDestinationResponse {
		return &v
	}).(ReportConfigDeliveryDestinationResponsePtrOutput)
}

// The name of the container where reports will be uploaded.
func (o ReportConfigDeliveryDestinationResponseOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigDeliveryDestinationResponse) string { return v.Container }).(pulumi.StringOutput)
}

// The resource id of the storage account where reports will be delivered.
func (o ReportConfigDeliveryDestinationResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigDeliveryDestinationResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The name of the directory where reports will be uploaded.
func (o ReportConfigDeliveryDestinationResponseOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportConfigDeliveryDestinationResponse) *string { return v.RootFolderPath }).(pulumi.StringPtrOutput)
}

type ReportConfigDeliveryDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigDeliveryDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDeliveryDestinationResponse)(nil)).Elem()
}

func (o ReportConfigDeliveryDestinationResponsePtrOutput) ToReportConfigDeliveryDestinationResponsePtrOutput() ReportConfigDeliveryDestinationResponsePtrOutput {
	return o
}

func (o ReportConfigDeliveryDestinationResponsePtrOutput) ToReportConfigDeliveryDestinationResponsePtrOutputWithContext(ctx context.Context) ReportConfigDeliveryDestinationResponsePtrOutput {
	return o
}

func (o ReportConfigDeliveryDestinationResponsePtrOutput) Elem() ReportConfigDeliveryDestinationResponseOutput {
	return o.ApplyT(func(v *ReportConfigDeliveryDestinationResponse) ReportConfigDeliveryDestinationResponse { return *v }).(ReportConfigDeliveryDestinationResponseOutput)
}

// The name of the container where reports will be uploaded.
func (o ReportConfigDeliveryDestinationResponsePtrOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigDeliveryDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Container
	}).(pulumi.StringPtrOutput)
}

// The resource id of the storage account where reports will be delivered.
func (o ReportConfigDeliveryDestinationResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigDeliveryDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// The name of the directory where reports will be uploaded.
func (o ReportConfigDeliveryDestinationResponsePtrOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigDeliveryDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.RootFolderPath
	}).(pulumi.StringPtrOutput)
}

// The delivery information associated with a report config.
type ReportConfigDeliveryInfo struct {
	// Has destination for the report being delivered.
	Destination ReportConfigDeliveryDestination `pulumi:"destination"`
}

// ReportConfigDeliveryInfoInput is an input type that accepts ReportConfigDeliveryInfoArgs and ReportConfigDeliveryInfoOutput values.
// You can construct a concrete instance of `ReportConfigDeliveryInfoInput` via:
//
//          ReportConfigDeliveryInfoArgs{...}
type ReportConfigDeliveryInfoInput interface {
	pulumi.Input

	ToReportConfigDeliveryInfoOutput() ReportConfigDeliveryInfoOutput
	ToReportConfigDeliveryInfoOutputWithContext(context.Context) ReportConfigDeliveryInfoOutput
}

// The delivery information associated with a report config.
type ReportConfigDeliveryInfoArgs struct {
	// Has destination for the report being delivered.
	Destination ReportConfigDeliveryDestinationInput `pulumi:"destination"`
}

func (ReportConfigDeliveryInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDeliveryInfo)(nil)).Elem()
}

func (i ReportConfigDeliveryInfoArgs) ToReportConfigDeliveryInfoOutput() ReportConfigDeliveryInfoOutput {
	return i.ToReportConfigDeliveryInfoOutputWithContext(context.Background())
}

func (i ReportConfigDeliveryInfoArgs) ToReportConfigDeliveryInfoOutputWithContext(ctx context.Context) ReportConfigDeliveryInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDeliveryInfoOutput)
}

func (i ReportConfigDeliveryInfoArgs) ToReportConfigDeliveryInfoPtrOutput() ReportConfigDeliveryInfoPtrOutput {
	return i.ToReportConfigDeliveryInfoPtrOutputWithContext(context.Background())
}

func (i ReportConfigDeliveryInfoArgs) ToReportConfigDeliveryInfoPtrOutputWithContext(ctx context.Context) ReportConfigDeliveryInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDeliveryInfoOutput).ToReportConfigDeliveryInfoPtrOutputWithContext(ctx)
}

// ReportConfigDeliveryInfoPtrInput is an input type that accepts ReportConfigDeliveryInfoArgs, ReportConfigDeliveryInfoPtr and ReportConfigDeliveryInfoPtrOutput values.
// You can construct a concrete instance of `ReportConfigDeliveryInfoPtrInput` via:
//
//          ReportConfigDeliveryInfoArgs{...}
//
//  or:
//
//          nil
type ReportConfigDeliveryInfoPtrInput interface {
	pulumi.Input

	ToReportConfigDeliveryInfoPtrOutput() ReportConfigDeliveryInfoPtrOutput
	ToReportConfigDeliveryInfoPtrOutputWithContext(context.Context) ReportConfigDeliveryInfoPtrOutput
}

type reportConfigDeliveryInfoPtrType ReportConfigDeliveryInfoArgs

func ReportConfigDeliveryInfoPtr(v *ReportConfigDeliveryInfoArgs) ReportConfigDeliveryInfoPtrInput {
	return (*reportConfigDeliveryInfoPtrType)(v)
}

func (*reportConfigDeliveryInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDeliveryInfo)(nil)).Elem()
}

func (i *reportConfigDeliveryInfoPtrType) ToReportConfigDeliveryInfoPtrOutput() ReportConfigDeliveryInfoPtrOutput {
	return i.ToReportConfigDeliveryInfoPtrOutputWithContext(context.Background())
}

func (i *reportConfigDeliveryInfoPtrType) ToReportConfigDeliveryInfoPtrOutputWithContext(ctx context.Context) ReportConfigDeliveryInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigDeliveryInfoPtrOutput)
}

// The delivery information associated with a report config.
type ReportConfigDeliveryInfoResponse struct {
	// Has destination for the report being delivered.
	Destination ReportConfigDeliveryDestinationResponse `pulumi:"destination"`
}

// The delivery information associated with a report config.
type ReportConfigDeliveryInfoResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigDeliveryInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigDeliveryInfoResponse)(nil)).Elem()
}

func (o ReportConfigDeliveryInfoResponseOutput) ToReportConfigDeliveryInfoResponseOutput() ReportConfigDeliveryInfoResponseOutput {
	return o
}

func (o ReportConfigDeliveryInfoResponseOutput) ToReportConfigDeliveryInfoResponseOutputWithContext(ctx context.Context) ReportConfigDeliveryInfoResponseOutput {
	return o
}

func (o ReportConfigDeliveryInfoResponseOutput) ToReportConfigDeliveryInfoResponsePtrOutput() ReportConfigDeliveryInfoResponsePtrOutput {
	return o.ToReportConfigDeliveryInfoResponsePtrOutputWithContext(context.Background())
}

func (o ReportConfigDeliveryInfoResponseOutput) ToReportConfigDeliveryInfoResponsePtrOutputWithContext(ctx context.Context) ReportConfigDeliveryInfoResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigDeliveryInfoResponse) *ReportConfigDeliveryInfoResponse {
		return &v
	}).(ReportConfigDeliveryInfoResponsePtrOutput)
}

// Has destination for the report being delivered.
func (o ReportConfigDeliveryInfoResponseOutput) Destination() ReportConfigDeliveryDestinationResponseOutput {
	return o.ApplyT(func(v ReportConfigDeliveryInfoResponse) ReportConfigDeliveryDestinationResponse { return v.Destination }).(ReportConfigDeliveryDestinationResponseOutput)
}

type ReportConfigDeliveryInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigDeliveryInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigDeliveryInfoResponse)(nil)).Elem()
}

func (o ReportConfigDeliveryInfoResponsePtrOutput) ToReportConfigDeliveryInfoResponsePtrOutput() ReportConfigDeliveryInfoResponsePtrOutput {
	return o
}

func (o ReportConfigDeliveryInfoResponsePtrOutput) ToReportConfigDeliveryInfoResponsePtrOutputWithContext(ctx context.Context) ReportConfigDeliveryInfoResponsePtrOutput {
	return o
}

func (o ReportConfigDeliveryInfoResponsePtrOutput) Elem() ReportConfigDeliveryInfoResponseOutput {
	return o.ApplyT(func(v *ReportConfigDeliveryInfoResponse) ReportConfigDeliveryInfoResponse { return *v }).(ReportConfigDeliveryInfoResponseOutput)
}

// Has destination for the report being delivered.
func (o ReportConfigDeliveryInfoResponsePtrOutput) Destination() ReportConfigDeliveryDestinationResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigDeliveryInfoResponse) *ReportConfigDeliveryDestinationResponse {
		if v == nil {
			return nil
		}
		return &v.Destination
	}).(ReportConfigDeliveryDestinationResponsePtrOutput)
}

// The filter expression to be used in the report.
type ReportConfigFilter struct {
	// The logical "AND" expression. Must have at least 2 items.
	And []ReportConfigFilter `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimension *ReportConfigComparisonExpression `pulumi:"dimension"`
	// The logical "NOT" expression.
	Not *ReportConfigFilter `pulumi:"not"`
	// The logical "OR" expression. Must have at least 2 items.
	Or []ReportConfigFilter `pulumi:"or"`
	// Has comparison expression for a tag
	Tag *ReportConfigComparisonExpression `pulumi:"tag"`
}

// ReportConfigFilterInput is an input type that accepts ReportConfigFilterArgs and ReportConfigFilterOutput values.
// You can construct a concrete instance of `ReportConfigFilterInput` via:
//
//          ReportConfigFilterArgs{...}
type ReportConfigFilterInput interface {
	pulumi.Input

	ToReportConfigFilterOutput() ReportConfigFilterOutput
	ToReportConfigFilterOutputWithContext(context.Context) ReportConfigFilterOutput
}

// The filter expression to be used in the report.
type ReportConfigFilterArgs struct {
	// The logical "AND" expression. Must have at least 2 items.
	And ReportConfigFilterArrayInput `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimension ReportConfigComparisonExpressionPtrInput `pulumi:"dimension"`
	// The logical "NOT" expression.
	Not ReportConfigFilterPtrInput `pulumi:"not"`
	// The logical "OR" expression. Must have at least 2 items.
	Or ReportConfigFilterArrayInput `pulumi:"or"`
	// Has comparison expression for a tag
	Tag ReportConfigComparisonExpressionPtrInput `pulumi:"tag"`
}

func (ReportConfigFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigFilter)(nil)).Elem()
}

func (i ReportConfigFilterArgs) ToReportConfigFilterOutput() ReportConfigFilterOutput {
	return i.ToReportConfigFilterOutputWithContext(context.Background())
}

func (i ReportConfigFilterArgs) ToReportConfigFilterOutputWithContext(ctx context.Context) ReportConfigFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigFilterOutput)
}

func (i ReportConfigFilterArgs) ToReportConfigFilterPtrOutput() ReportConfigFilterPtrOutput {
	return i.ToReportConfigFilterPtrOutputWithContext(context.Background())
}

func (i ReportConfigFilterArgs) ToReportConfigFilterPtrOutputWithContext(ctx context.Context) ReportConfigFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigFilterOutput).ToReportConfigFilterPtrOutputWithContext(ctx)
}

// ReportConfigFilterPtrInput is an input type that accepts ReportConfigFilterArgs, ReportConfigFilterPtr and ReportConfigFilterPtrOutput values.
// You can construct a concrete instance of `ReportConfigFilterPtrInput` via:
//
//          ReportConfigFilterArgs{...}
//
//  or:
//
//          nil
type ReportConfigFilterPtrInput interface {
	pulumi.Input

	ToReportConfigFilterPtrOutput() ReportConfigFilterPtrOutput
	ToReportConfigFilterPtrOutputWithContext(context.Context) ReportConfigFilterPtrOutput
}

type reportConfigFilterPtrType ReportConfigFilterArgs

func ReportConfigFilterPtr(v *ReportConfigFilterArgs) ReportConfigFilterPtrInput {
	return (*reportConfigFilterPtrType)(v)
}

func (*reportConfigFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigFilter)(nil)).Elem()
}

func (i *reportConfigFilterPtrType) ToReportConfigFilterPtrOutput() ReportConfigFilterPtrOutput {
	return i.ToReportConfigFilterPtrOutputWithContext(context.Background())
}

func (i *reportConfigFilterPtrType) ToReportConfigFilterPtrOutputWithContext(ctx context.Context) ReportConfigFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigFilterPtrOutput)
}

// ReportConfigFilterArrayInput is an input type that accepts ReportConfigFilterArray and ReportConfigFilterArrayOutput values.
// You can construct a concrete instance of `ReportConfigFilterArrayInput` via:
//
//          ReportConfigFilterArray{ ReportConfigFilterArgs{...} }
type ReportConfigFilterArrayInput interface {
	pulumi.Input

	ToReportConfigFilterArrayOutput() ReportConfigFilterArrayOutput
	ToReportConfigFilterArrayOutputWithContext(context.Context) ReportConfigFilterArrayOutput
}

type ReportConfigFilterArray []ReportConfigFilterInput

func (ReportConfigFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigFilter)(nil)).Elem()
}

func (i ReportConfigFilterArray) ToReportConfigFilterArrayOutput() ReportConfigFilterArrayOutput {
	return i.ToReportConfigFilterArrayOutputWithContext(context.Background())
}

func (i ReportConfigFilterArray) ToReportConfigFilterArrayOutputWithContext(ctx context.Context) ReportConfigFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigFilterArrayOutput)
}

// The filter expression to be used in the report.
type ReportConfigFilterResponse struct {
	// The logical "AND" expression. Must have at least 2 items.
	And []ReportConfigFilterResponse `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimension *ReportConfigComparisonExpressionResponse `pulumi:"dimension"`
	// The logical "NOT" expression.
	Not *ReportConfigFilterResponse `pulumi:"not"`
	// The logical "OR" expression. Must have at least 2 items.
	Or []ReportConfigFilterResponse `pulumi:"or"`
	// Has comparison expression for a tag
	Tag *ReportConfigComparisonExpressionResponse `pulumi:"tag"`
}

// The filter expression to be used in the report.
type ReportConfigFilterResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigFilterResponse)(nil)).Elem()
}

func (o ReportConfigFilterResponseOutput) ToReportConfigFilterResponseOutput() ReportConfigFilterResponseOutput {
	return o
}

func (o ReportConfigFilterResponseOutput) ToReportConfigFilterResponseOutputWithContext(ctx context.Context) ReportConfigFilterResponseOutput {
	return o
}

func (o ReportConfigFilterResponseOutput) ToReportConfigFilterResponsePtrOutput() ReportConfigFilterResponsePtrOutput {
	return o.ToReportConfigFilterResponsePtrOutputWithContext(context.Background())
}

func (o ReportConfigFilterResponseOutput) ToReportConfigFilterResponsePtrOutputWithContext(ctx context.Context) ReportConfigFilterResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigFilterResponse) *ReportConfigFilterResponse {
		return &v
	}).(ReportConfigFilterResponsePtrOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o ReportConfigFilterResponseOutput) And() ReportConfigFilterResponseArrayOutput {
	return o.ApplyT(func(v ReportConfigFilterResponse) []ReportConfigFilterResponse { return v.And }).(ReportConfigFilterResponseArrayOutput)
}

// Has comparison expression for a dimension
func (o ReportConfigFilterResponseOutput) Dimension() ReportConfigComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigFilterResponse) *ReportConfigComparisonExpressionResponse { return v.Dimension }).(ReportConfigComparisonExpressionResponsePtrOutput)
}

// The logical "NOT" expression.
func (o ReportConfigFilterResponseOutput) Not() ReportConfigFilterResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigFilterResponse) *ReportConfigFilterResponse { return v.Not }).(ReportConfigFilterResponsePtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o ReportConfigFilterResponseOutput) Or() ReportConfigFilterResponseArrayOutput {
	return o.ApplyT(func(v ReportConfigFilterResponse) []ReportConfigFilterResponse { return v.Or }).(ReportConfigFilterResponseArrayOutput)
}

// Has comparison expression for a tag
func (o ReportConfigFilterResponseOutput) Tag() ReportConfigComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigFilterResponse) *ReportConfigComparisonExpressionResponse { return v.Tag }).(ReportConfigComparisonExpressionResponsePtrOutput)
}

type ReportConfigFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigFilterResponse)(nil)).Elem()
}

func (o ReportConfigFilterResponsePtrOutput) ToReportConfigFilterResponsePtrOutput() ReportConfigFilterResponsePtrOutput {
	return o
}

func (o ReportConfigFilterResponsePtrOutput) ToReportConfigFilterResponsePtrOutputWithContext(ctx context.Context) ReportConfigFilterResponsePtrOutput {
	return o
}

func (o ReportConfigFilterResponsePtrOutput) Elem() ReportConfigFilterResponseOutput {
	return o.ApplyT(func(v *ReportConfigFilterResponse) ReportConfigFilterResponse { return *v }).(ReportConfigFilterResponseOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o ReportConfigFilterResponsePtrOutput) And() ReportConfigFilterResponseArrayOutput {
	return o.ApplyT(func(v *ReportConfigFilterResponse) []ReportConfigFilterResponse {
		if v == nil {
			return nil
		}
		return v.And
	}).(ReportConfigFilterResponseArrayOutput)
}

// Has comparison expression for a dimension
func (o ReportConfigFilterResponsePtrOutput) Dimension() ReportConfigComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigFilterResponse) *ReportConfigComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.Dimension
	}).(ReportConfigComparisonExpressionResponsePtrOutput)
}

// The logical "NOT" expression.
func (o ReportConfigFilterResponsePtrOutput) Not() ReportConfigFilterResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigFilterResponse) *ReportConfigFilterResponse {
		if v == nil {
			return nil
		}
		return v.Not
	}).(ReportConfigFilterResponsePtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o ReportConfigFilterResponsePtrOutput) Or() ReportConfigFilterResponseArrayOutput {
	return o.ApplyT(func(v *ReportConfigFilterResponse) []ReportConfigFilterResponse {
		if v == nil {
			return nil
		}
		return v.Or
	}).(ReportConfigFilterResponseArrayOutput)
}

// Has comparison expression for a tag
func (o ReportConfigFilterResponsePtrOutput) Tag() ReportConfigComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigFilterResponse) *ReportConfigComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(ReportConfigComparisonExpressionResponsePtrOutput)
}

type ReportConfigFilterResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportConfigFilterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigFilterResponse)(nil)).Elem()
}

func (o ReportConfigFilterResponseArrayOutput) ToReportConfigFilterResponseArrayOutput() ReportConfigFilterResponseArrayOutput {
	return o
}

func (o ReportConfigFilterResponseArrayOutput) ToReportConfigFilterResponseArrayOutputWithContext(ctx context.Context) ReportConfigFilterResponseArrayOutput {
	return o
}

func (o ReportConfigFilterResponseArrayOutput) Index(i pulumi.IntInput) ReportConfigFilterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportConfigFilterResponse {
		return vs[0].([]ReportConfigFilterResponse)[vs[1].(int)]
	}).(ReportConfigFilterResponseOutput)
}

// The group by expression to be used in the report.
type ReportConfigGrouping struct {
	// The name of the column to group. This version supports subscription lowest possible grain.
	Name string `pulumi:"name"`
	// Has type of the column to group.
	Type string `pulumi:"type"`
}

// ReportConfigGroupingInput is an input type that accepts ReportConfigGroupingArgs and ReportConfigGroupingOutput values.
// You can construct a concrete instance of `ReportConfigGroupingInput` via:
//
//          ReportConfigGroupingArgs{...}
type ReportConfigGroupingInput interface {
	pulumi.Input

	ToReportConfigGroupingOutput() ReportConfigGroupingOutput
	ToReportConfigGroupingOutputWithContext(context.Context) ReportConfigGroupingOutput
}

// The group by expression to be used in the report.
type ReportConfigGroupingArgs struct {
	// The name of the column to group. This version supports subscription lowest possible grain.
	Name pulumi.StringInput `pulumi:"name"`
	// Has type of the column to group.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ReportConfigGroupingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigGrouping)(nil)).Elem()
}

func (i ReportConfigGroupingArgs) ToReportConfigGroupingOutput() ReportConfigGroupingOutput {
	return i.ToReportConfigGroupingOutputWithContext(context.Background())
}

func (i ReportConfigGroupingArgs) ToReportConfigGroupingOutputWithContext(ctx context.Context) ReportConfigGroupingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigGroupingOutput)
}

// ReportConfigGroupingArrayInput is an input type that accepts ReportConfigGroupingArray and ReportConfigGroupingArrayOutput values.
// You can construct a concrete instance of `ReportConfigGroupingArrayInput` via:
//
//          ReportConfigGroupingArray{ ReportConfigGroupingArgs{...} }
type ReportConfigGroupingArrayInput interface {
	pulumi.Input

	ToReportConfigGroupingArrayOutput() ReportConfigGroupingArrayOutput
	ToReportConfigGroupingArrayOutputWithContext(context.Context) ReportConfigGroupingArrayOutput
}

type ReportConfigGroupingArray []ReportConfigGroupingInput

func (ReportConfigGroupingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigGrouping)(nil)).Elem()
}

func (i ReportConfigGroupingArray) ToReportConfigGroupingArrayOutput() ReportConfigGroupingArrayOutput {
	return i.ToReportConfigGroupingArrayOutputWithContext(context.Background())
}

func (i ReportConfigGroupingArray) ToReportConfigGroupingArrayOutputWithContext(ctx context.Context) ReportConfigGroupingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigGroupingArrayOutput)
}

// The group by expression to be used in the report.
type ReportConfigGroupingResponse struct {
	// The name of the column to group. This version supports subscription lowest possible grain.
	Name string `pulumi:"name"`
	// Has type of the column to group.
	Type string `pulumi:"type"`
}

// The group by expression to be used in the report.
type ReportConfigGroupingResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigGroupingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigGroupingResponse)(nil)).Elem()
}

func (o ReportConfigGroupingResponseOutput) ToReportConfigGroupingResponseOutput() ReportConfigGroupingResponseOutput {
	return o
}

func (o ReportConfigGroupingResponseOutput) ToReportConfigGroupingResponseOutputWithContext(ctx context.Context) ReportConfigGroupingResponseOutput {
	return o
}

// The name of the column to group. This version supports subscription lowest possible grain.
func (o ReportConfigGroupingResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigGroupingResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Has type of the column to group.
func (o ReportConfigGroupingResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigGroupingResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ReportConfigGroupingResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportConfigGroupingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigGroupingResponse)(nil)).Elem()
}

func (o ReportConfigGroupingResponseArrayOutput) ToReportConfigGroupingResponseArrayOutput() ReportConfigGroupingResponseArrayOutput {
	return o
}

func (o ReportConfigGroupingResponseArrayOutput) ToReportConfigGroupingResponseArrayOutputWithContext(ctx context.Context) ReportConfigGroupingResponseArrayOutput {
	return o
}

func (o ReportConfigGroupingResponseArrayOutput) Index(i pulumi.IntInput) ReportConfigGroupingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportConfigGroupingResponse {
		return vs[0].([]ReportConfigGroupingResponse)[vs[1].(int)]
	}).(ReportConfigGroupingResponseOutput)
}

// The start and end date for recurrence schedule.
type ReportConfigRecurrencePeriod struct {
	// The start date of recurrence.
	From string `pulumi:"from"`
	// The end date of recurrence. If not provided, we default this to 10 years from the start date.
	To *string `pulumi:"to"`
}

// ReportConfigRecurrencePeriodInput is an input type that accepts ReportConfigRecurrencePeriodArgs and ReportConfigRecurrencePeriodOutput values.
// You can construct a concrete instance of `ReportConfigRecurrencePeriodInput` via:
//
//          ReportConfigRecurrencePeriodArgs{...}
type ReportConfigRecurrencePeriodInput interface {
	pulumi.Input

	ToReportConfigRecurrencePeriodOutput() ReportConfigRecurrencePeriodOutput
	ToReportConfigRecurrencePeriodOutputWithContext(context.Context) ReportConfigRecurrencePeriodOutput
}

// The start and end date for recurrence schedule.
type ReportConfigRecurrencePeriodArgs struct {
	// The start date of recurrence.
	From pulumi.StringInput `pulumi:"from"`
	// The end date of recurrence. If not provided, we default this to 10 years from the start date.
	To pulumi.StringPtrInput `pulumi:"to"`
}

func (ReportConfigRecurrencePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigRecurrencePeriod)(nil)).Elem()
}

func (i ReportConfigRecurrencePeriodArgs) ToReportConfigRecurrencePeriodOutput() ReportConfigRecurrencePeriodOutput {
	return i.ToReportConfigRecurrencePeriodOutputWithContext(context.Background())
}

func (i ReportConfigRecurrencePeriodArgs) ToReportConfigRecurrencePeriodOutputWithContext(ctx context.Context) ReportConfigRecurrencePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigRecurrencePeriodOutput)
}

func (i ReportConfigRecurrencePeriodArgs) ToReportConfigRecurrencePeriodPtrOutput() ReportConfigRecurrencePeriodPtrOutput {
	return i.ToReportConfigRecurrencePeriodPtrOutputWithContext(context.Background())
}

func (i ReportConfigRecurrencePeriodArgs) ToReportConfigRecurrencePeriodPtrOutputWithContext(ctx context.Context) ReportConfigRecurrencePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigRecurrencePeriodOutput).ToReportConfigRecurrencePeriodPtrOutputWithContext(ctx)
}

// ReportConfigRecurrencePeriodPtrInput is an input type that accepts ReportConfigRecurrencePeriodArgs, ReportConfigRecurrencePeriodPtr and ReportConfigRecurrencePeriodPtrOutput values.
// You can construct a concrete instance of `ReportConfigRecurrencePeriodPtrInput` via:
//
//          ReportConfigRecurrencePeriodArgs{...}
//
//  or:
//
//          nil
type ReportConfigRecurrencePeriodPtrInput interface {
	pulumi.Input

	ToReportConfigRecurrencePeriodPtrOutput() ReportConfigRecurrencePeriodPtrOutput
	ToReportConfigRecurrencePeriodPtrOutputWithContext(context.Context) ReportConfigRecurrencePeriodPtrOutput
}

type reportConfigRecurrencePeriodPtrType ReportConfigRecurrencePeriodArgs

func ReportConfigRecurrencePeriodPtr(v *ReportConfigRecurrencePeriodArgs) ReportConfigRecurrencePeriodPtrInput {
	return (*reportConfigRecurrencePeriodPtrType)(v)
}

func (*reportConfigRecurrencePeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigRecurrencePeriod)(nil)).Elem()
}

func (i *reportConfigRecurrencePeriodPtrType) ToReportConfigRecurrencePeriodPtrOutput() ReportConfigRecurrencePeriodPtrOutput {
	return i.ToReportConfigRecurrencePeriodPtrOutputWithContext(context.Background())
}

func (i *reportConfigRecurrencePeriodPtrType) ToReportConfigRecurrencePeriodPtrOutputWithContext(ctx context.Context) ReportConfigRecurrencePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigRecurrencePeriodPtrOutput)
}

// The start and end date for recurrence schedule.
type ReportConfigRecurrencePeriodResponse struct {
	// The start date of recurrence.
	From string `pulumi:"from"`
	// The end date of recurrence. If not provided, we default this to 10 years from the start date.
	To *string `pulumi:"to"`
}

// The start and end date for recurrence schedule.
type ReportConfigRecurrencePeriodResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigRecurrencePeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigRecurrencePeriodResponse)(nil)).Elem()
}

func (o ReportConfigRecurrencePeriodResponseOutput) ToReportConfigRecurrencePeriodResponseOutput() ReportConfigRecurrencePeriodResponseOutput {
	return o
}

func (o ReportConfigRecurrencePeriodResponseOutput) ToReportConfigRecurrencePeriodResponseOutputWithContext(ctx context.Context) ReportConfigRecurrencePeriodResponseOutput {
	return o
}

func (o ReportConfigRecurrencePeriodResponseOutput) ToReportConfigRecurrencePeriodResponsePtrOutput() ReportConfigRecurrencePeriodResponsePtrOutput {
	return o.ToReportConfigRecurrencePeriodResponsePtrOutputWithContext(context.Background())
}

func (o ReportConfigRecurrencePeriodResponseOutput) ToReportConfigRecurrencePeriodResponsePtrOutputWithContext(ctx context.Context) ReportConfigRecurrencePeriodResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigRecurrencePeriodResponse) *ReportConfigRecurrencePeriodResponse {
		return &v
	}).(ReportConfigRecurrencePeriodResponsePtrOutput)
}

// The start date of recurrence.
func (o ReportConfigRecurrencePeriodResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigRecurrencePeriodResponse) string { return v.From }).(pulumi.StringOutput)
}

// The end date of recurrence. If not provided, we default this to 10 years from the start date.
func (o ReportConfigRecurrencePeriodResponseOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportConfigRecurrencePeriodResponse) *string { return v.To }).(pulumi.StringPtrOutput)
}

type ReportConfigRecurrencePeriodResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigRecurrencePeriodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigRecurrencePeriodResponse)(nil)).Elem()
}

func (o ReportConfigRecurrencePeriodResponsePtrOutput) ToReportConfigRecurrencePeriodResponsePtrOutput() ReportConfigRecurrencePeriodResponsePtrOutput {
	return o
}

func (o ReportConfigRecurrencePeriodResponsePtrOutput) ToReportConfigRecurrencePeriodResponsePtrOutputWithContext(ctx context.Context) ReportConfigRecurrencePeriodResponsePtrOutput {
	return o
}

func (o ReportConfigRecurrencePeriodResponsePtrOutput) Elem() ReportConfigRecurrencePeriodResponseOutput {
	return o.ApplyT(func(v *ReportConfigRecurrencePeriodResponse) ReportConfigRecurrencePeriodResponse { return *v }).(ReportConfigRecurrencePeriodResponseOutput)
}

// The start date of recurrence.
func (o ReportConfigRecurrencePeriodResponsePtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigRecurrencePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date of recurrence. If not provided, we default this to 10 years from the start date.
func (o ReportConfigRecurrencePeriodResponsePtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigRecurrencePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return v.To
	}).(pulumi.StringPtrOutput)
}

// The schedule associated with a report config.
type ReportConfigSchedule struct {
	// The schedule recurrence.
	Recurrence string `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod ReportConfigRecurrencePeriod `pulumi:"recurrencePeriod"`
	// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
	Status *string `pulumi:"status"`
}

// ReportConfigScheduleInput is an input type that accepts ReportConfigScheduleArgs and ReportConfigScheduleOutput values.
// You can construct a concrete instance of `ReportConfigScheduleInput` via:
//
//          ReportConfigScheduleArgs{...}
type ReportConfigScheduleInput interface {
	pulumi.Input

	ToReportConfigScheduleOutput() ReportConfigScheduleOutput
	ToReportConfigScheduleOutputWithContext(context.Context) ReportConfigScheduleOutput
}

// The schedule associated with a report config.
type ReportConfigScheduleArgs struct {
	// The schedule recurrence.
	Recurrence pulumi.StringInput `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod ReportConfigRecurrencePeriodInput `pulumi:"recurrencePeriod"`
	// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ReportConfigScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigSchedule)(nil)).Elem()
}

func (i ReportConfigScheduleArgs) ToReportConfigScheduleOutput() ReportConfigScheduleOutput {
	return i.ToReportConfigScheduleOutputWithContext(context.Background())
}

func (i ReportConfigScheduleArgs) ToReportConfigScheduleOutputWithContext(ctx context.Context) ReportConfigScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigScheduleOutput)
}

func (i ReportConfigScheduleArgs) ToReportConfigSchedulePtrOutput() ReportConfigSchedulePtrOutput {
	return i.ToReportConfigSchedulePtrOutputWithContext(context.Background())
}

func (i ReportConfigScheduleArgs) ToReportConfigSchedulePtrOutputWithContext(ctx context.Context) ReportConfigSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigScheduleOutput).ToReportConfigSchedulePtrOutputWithContext(ctx)
}

// ReportConfigSchedulePtrInput is an input type that accepts ReportConfigScheduleArgs, ReportConfigSchedulePtr and ReportConfigSchedulePtrOutput values.
// You can construct a concrete instance of `ReportConfigSchedulePtrInput` via:
//
//          ReportConfigScheduleArgs{...}
//
//  or:
//
//          nil
type ReportConfigSchedulePtrInput interface {
	pulumi.Input

	ToReportConfigSchedulePtrOutput() ReportConfigSchedulePtrOutput
	ToReportConfigSchedulePtrOutputWithContext(context.Context) ReportConfigSchedulePtrOutput
}

type reportConfigSchedulePtrType ReportConfigScheduleArgs

func ReportConfigSchedulePtr(v *ReportConfigScheduleArgs) ReportConfigSchedulePtrInput {
	return (*reportConfigSchedulePtrType)(v)
}

func (*reportConfigSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigSchedule)(nil)).Elem()
}

func (i *reportConfigSchedulePtrType) ToReportConfigSchedulePtrOutput() ReportConfigSchedulePtrOutput {
	return i.ToReportConfigSchedulePtrOutputWithContext(context.Background())
}

func (i *reportConfigSchedulePtrType) ToReportConfigSchedulePtrOutputWithContext(ctx context.Context) ReportConfigSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigSchedulePtrOutput)
}

// The schedule associated with a report config.
type ReportConfigScheduleResponse struct {
	// The schedule recurrence.
	Recurrence string `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod ReportConfigRecurrencePeriodResponse `pulumi:"recurrencePeriod"`
	// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
	Status *string `pulumi:"status"`
}

// The schedule associated with a report config.
type ReportConfigScheduleResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigScheduleResponse)(nil)).Elem()
}

func (o ReportConfigScheduleResponseOutput) ToReportConfigScheduleResponseOutput() ReportConfigScheduleResponseOutput {
	return o
}

func (o ReportConfigScheduleResponseOutput) ToReportConfigScheduleResponseOutputWithContext(ctx context.Context) ReportConfigScheduleResponseOutput {
	return o
}

func (o ReportConfigScheduleResponseOutput) ToReportConfigScheduleResponsePtrOutput() ReportConfigScheduleResponsePtrOutput {
	return o.ToReportConfigScheduleResponsePtrOutputWithContext(context.Background())
}

func (o ReportConfigScheduleResponseOutput) ToReportConfigScheduleResponsePtrOutputWithContext(ctx context.Context) ReportConfigScheduleResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigScheduleResponse) *ReportConfigScheduleResponse {
		return &v
	}).(ReportConfigScheduleResponsePtrOutput)
}

// The schedule recurrence.
func (o ReportConfigScheduleResponseOutput) Recurrence() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigScheduleResponse) string { return v.Recurrence }).(pulumi.StringOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ReportConfigScheduleResponseOutput) RecurrencePeriod() ReportConfigRecurrencePeriodResponseOutput {
	return o.ApplyT(func(v ReportConfigScheduleResponse) ReportConfigRecurrencePeriodResponse { return v.RecurrencePeriod }).(ReportConfigRecurrencePeriodResponseOutput)
}

// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
func (o ReportConfigScheduleResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportConfigScheduleResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ReportConfigScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigScheduleResponse)(nil)).Elem()
}

func (o ReportConfigScheduleResponsePtrOutput) ToReportConfigScheduleResponsePtrOutput() ReportConfigScheduleResponsePtrOutput {
	return o
}

func (o ReportConfigScheduleResponsePtrOutput) ToReportConfigScheduleResponsePtrOutputWithContext(ctx context.Context) ReportConfigScheduleResponsePtrOutput {
	return o
}

func (o ReportConfigScheduleResponsePtrOutput) Elem() ReportConfigScheduleResponseOutput {
	return o.ApplyT(func(v *ReportConfigScheduleResponse) ReportConfigScheduleResponse { return *v }).(ReportConfigScheduleResponseOutput)
}

// The schedule recurrence.
func (o ReportConfigScheduleResponsePtrOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Recurrence
	}).(pulumi.StringPtrOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ReportConfigScheduleResponsePtrOutput) RecurrencePeriod() ReportConfigRecurrencePeriodResponsePtrOutput {
	return o.ApplyT(func(v *ReportConfigScheduleResponse) *ReportConfigRecurrencePeriodResponse {
		if v == nil {
			return nil
		}
		return &v.RecurrencePeriod
	}).(ReportConfigRecurrencePeriodResponsePtrOutput)
}

// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
func (o ReportConfigScheduleResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The order by expression to be used in the report.
type ReportConfigSorting struct {
	// Direction of sort.
	Direction *string `pulumi:"direction"`
	// The name of the column to sort.
	Name string `pulumi:"name"`
}

// ReportConfigSortingInput is an input type that accepts ReportConfigSortingArgs and ReportConfigSortingOutput values.
// You can construct a concrete instance of `ReportConfigSortingInput` via:
//
//          ReportConfigSortingArgs{...}
type ReportConfigSortingInput interface {
	pulumi.Input

	ToReportConfigSortingOutput() ReportConfigSortingOutput
	ToReportConfigSortingOutputWithContext(context.Context) ReportConfigSortingOutput
}

// The order by expression to be used in the report.
type ReportConfigSortingArgs struct {
	// Direction of sort.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// The name of the column to sort.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ReportConfigSortingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigSorting)(nil)).Elem()
}

func (i ReportConfigSortingArgs) ToReportConfigSortingOutput() ReportConfigSortingOutput {
	return i.ToReportConfigSortingOutputWithContext(context.Background())
}

func (i ReportConfigSortingArgs) ToReportConfigSortingOutputWithContext(ctx context.Context) ReportConfigSortingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigSortingOutput)
}

// ReportConfigSortingArrayInput is an input type that accepts ReportConfigSortingArray and ReportConfigSortingArrayOutput values.
// You can construct a concrete instance of `ReportConfigSortingArrayInput` via:
//
//          ReportConfigSortingArray{ ReportConfigSortingArgs{...} }
type ReportConfigSortingArrayInput interface {
	pulumi.Input

	ToReportConfigSortingArrayOutput() ReportConfigSortingArrayOutput
	ToReportConfigSortingArrayOutputWithContext(context.Context) ReportConfigSortingArrayOutput
}

type ReportConfigSortingArray []ReportConfigSortingInput

func (ReportConfigSortingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigSorting)(nil)).Elem()
}

func (i ReportConfigSortingArray) ToReportConfigSortingArrayOutput() ReportConfigSortingArrayOutput {
	return i.ToReportConfigSortingArrayOutputWithContext(context.Background())
}

func (i ReportConfigSortingArray) ToReportConfigSortingArrayOutputWithContext(ctx context.Context) ReportConfigSortingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigSortingArrayOutput)
}

// The order by expression to be used in the report.
type ReportConfigSortingResponse struct {
	// Direction of sort.
	Direction *string `pulumi:"direction"`
	// The name of the column to sort.
	Name string `pulumi:"name"`
}

// The order by expression to be used in the report.
type ReportConfigSortingResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigSortingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigSortingResponse)(nil)).Elem()
}

func (o ReportConfigSortingResponseOutput) ToReportConfigSortingResponseOutput() ReportConfigSortingResponseOutput {
	return o
}

func (o ReportConfigSortingResponseOutput) ToReportConfigSortingResponseOutputWithContext(ctx context.Context) ReportConfigSortingResponseOutput {
	return o
}

// Direction of sort.
func (o ReportConfigSortingResponseOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportConfigSortingResponse) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// The name of the column to sort.
func (o ReportConfigSortingResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigSortingResponse) string { return v.Name }).(pulumi.StringOutput)
}

type ReportConfigSortingResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportConfigSortingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigSortingResponse)(nil)).Elem()
}

func (o ReportConfigSortingResponseArrayOutput) ToReportConfigSortingResponseArrayOutput() ReportConfigSortingResponseArrayOutput {
	return o
}

func (o ReportConfigSortingResponseArrayOutput) ToReportConfigSortingResponseArrayOutputWithContext(ctx context.Context) ReportConfigSortingResponseArrayOutput {
	return o
}

func (o ReportConfigSortingResponseArrayOutput) Index(i pulumi.IntInput) ReportConfigSortingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportConfigSortingResponse {
		return vs[0].([]ReportConfigSortingResponse)[vs[1].(int)]
	}).(ReportConfigSortingResponseOutput)
}

// The start and end date for pulling data for the report.
type ReportConfigTimePeriod struct {
	// The start date to pull data from.
	From string `pulumi:"from"`
	// The end date to pull data to.
	To string `pulumi:"to"`
}

// ReportConfigTimePeriodInput is an input type that accepts ReportConfigTimePeriodArgs and ReportConfigTimePeriodOutput values.
// You can construct a concrete instance of `ReportConfigTimePeriodInput` via:
//
//          ReportConfigTimePeriodArgs{...}
type ReportConfigTimePeriodInput interface {
	pulumi.Input

	ToReportConfigTimePeriodOutput() ReportConfigTimePeriodOutput
	ToReportConfigTimePeriodOutputWithContext(context.Context) ReportConfigTimePeriodOutput
}

// The start and end date for pulling data for the report.
type ReportConfigTimePeriodArgs struct {
	// The start date to pull data from.
	From pulumi.StringInput `pulumi:"from"`
	// The end date to pull data to.
	To pulumi.StringInput `pulumi:"to"`
}

func (ReportConfigTimePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigTimePeriod)(nil)).Elem()
}

func (i ReportConfigTimePeriodArgs) ToReportConfigTimePeriodOutput() ReportConfigTimePeriodOutput {
	return i.ToReportConfigTimePeriodOutputWithContext(context.Background())
}

func (i ReportConfigTimePeriodArgs) ToReportConfigTimePeriodOutputWithContext(ctx context.Context) ReportConfigTimePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigTimePeriodOutput)
}

func (i ReportConfigTimePeriodArgs) ToReportConfigTimePeriodPtrOutput() ReportConfigTimePeriodPtrOutput {
	return i.ToReportConfigTimePeriodPtrOutputWithContext(context.Background())
}

func (i ReportConfigTimePeriodArgs) ToReportConfigTimePeriodPtrOutputWithContext(ctx context.Context) ReportConfigTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigTimePeriodOutput).ToReportConfigTimePeriodPtrOutputWithContext(ctx)
}

// ReportConfigTimePeriodPtrInput is an input type that accepts ReportConfigTimePeriodArgs, ReportConfigTimePeriodPtr and ReportConfigTimePeriodPtrOutput values.
// You can construct a concrete instance of `ReportConfigTimePeriodPtrInput` via:
//
//          ReportConfigTimePeriodArgs{...}
//
//  or:
//
//          nil
type ReportConfigTimePeriodPtrInput interface {
	pulumi.Input

	ToReportConfigTimePeriodPtrOutput() ReportConfigTimePeriodPtrOutput
	ToReportConfigTimePeriodPtrOutputWithContext(context.Context) ReportConfigTimePeriodPtrOutput
}

type reportConfigTimePeriodPtrType ReportConfigTimePeriodArgs

func ReportConfigTimePeriodPtr(v *ReportConfigTimePeriodArgs) ReportConfigTimePeriodPtrInput {
	return (*reportConfigTimePeriodPtrType)(v)
}

func (*reportConfigTimePeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigTimePeriod)(nil)).Elem()
}

func (i *reportConfigTimePeriodPtrType) ToReportConfigTimePeriodPtrOutput() ReportConfigTimePeriodPtrOutput {
	return i.ToReportConfigTimePeriodPtrOutputWithContext(context.Background())
}

func (i *reportConfigTimePeriodPtrType) ToReportConfigTimePeriodPtrOutputWithContext(ctx context.Context) ReportConfigTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigTimePeriodPtrOutput)
}

// The start and end date for pulling data for the report.
type ReportConfigTimePeriodResponse struct {
	// The start date to pull data from.
	From string `pulumi:"from"`
	// The end date to pull data to.
	To string `pulumi:"to"`
}

// The start and end date for pulling data for the report.
type ReportConfigTimePeriodResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigTimePeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigTimePeriodResponse)(nil)).Elem()
}

func (o ReportConfigTimePeriodResponseOutput) ToReportConfigTimePeriodResponseOutput() ReportConfigTimePeriodResponseOutput {
	return o
}

func (o ReportConfigTimePeriodResponseOutput) ToReportConfigTimePeriodResponseOutputWithContext(ctx context.Context) ReportConfigTimePeriodResponseOutput {
	return o
}

func (o ReportConfigTimePeriodResponseOutput) ToReportConfigTimePeriodResponsePtrOutput() ReportConfigTimePeriodResponsePtrOutput {
	return o.ToReportConfigTimePeriodResponsePtrOutputWithContext(context.Background())
}

func (o ReportConfigTimePeriodResponseOutput) ToReportConfigTimePeriodResponsePtrOutputWithContext(ctx context.Context) ReportConfigTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v ReportConfigTimePeriodResponse) *ReportConfigTimePeriodResponse {
		return &v
	}).(ReportConfigTimePeriodResponsePtrOutput)
}

// The start date to pull data from.
func (o ReportConfigTimePeriodResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigTimePeriodResponse) string { return v.From }).(pulumi.StringOutput)
}

// The end date to pull data to.
func (o ReportConfigTimePeriodResponseOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigTimePeriodResponse) string { return v.To }).(pulumi.StringOutput)
}

type ReportConfigTimePeriodResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportConfigTimePeriodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfigTimePeriodResponse)(nil)).Elem()
}

func (o ReportConfigTimePeriodResponsePtrOutput) ToReportConfigTimePeriodResponsePtrOutput() ReportConfigTimePeriodResponsePtrOutput {
	return o
}

func (o ReportConfigTimePeriodResponsePtrOutput) ToReportConfigTimePeriodResponsePtrOutputWithContext(ctx context.Context) ReportConfigTimePeriodResponsePtrOutput {
	return o
}

func (o ReportConfigTimePeriodResponsePtrOutput) Elem() ReportConfigTimePeriodResponseOutput {
	return o.ApplyT(func(v *ReportConfigTimePeriodResponse) ReportConfigTimePeriodResponse { return *v }).(ReportConfigTimePeriodResponseOutput)
}

// The start date to pull data from.
func (o ReportConfigTimePeriodResponsePtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date to pull data to.
func (o ReportConfigTimePeriodResponsePtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfigTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.To
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CommonExportPropertiesResponseOutput{})
	pulumi.RegisterOutputType(CommonExportPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ErrorDetailsResponseOutput{})
	pulumi.RegisterOutputType(ErrorDetailsResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportDatasetOutput{})
	pulumi.RegisterOutputType(ExportDatasetPtrOutput{})
	pulumi.RegisterOutputType(ExportDatasetConfigurationOutput{})
	pulumi.RegisterOutputType(ExportDatasetConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ExportDatasetConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ExportDatasetConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportDatasetResponseOutput{})
	pulumi.RegisterOutputType(ExportDatasetResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportDefinitionOutput{})
	pulumi.RegisterOutputType(ExportDefinitionPtrOutput{})
	pulumi.RegisterOutputType(ExportDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ExportDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportDeliveryDestinationOutput{})
	pulumi.RegisterOutputType(ExportDeliveryDestinationPtrOutput{})
	pulumi.RegisterOutputType(ExportDeliveryDestinationResponseOutput{})
	pulumi.RegisterOutputType(ExportDeliveryDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportDeliveryInfoOutput{})
	pulumi.RegisterOutputType(ExportDeliveryInfoPtrOutput{})
	pulumi.RegisterOutputType(ExportDeliveryInfoResponseOutput{})
	pulumi.RegisterOutputType(ExportDeliveryInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportExecutionListResultResponseOutput{})
	pulumi.RegisterOutputType(ExportExecutionListResultResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportExecutionResponseOutput{})
	pulumi.RegisterOutputType(ExportExecutionResponseArrayOutput{})
	pulumi.RegisterOutputType(ExportRecurrencePeriodOutput{})
	pulumi.RegisterOutputType(ExportRecurrencePeriodPtrOutput{})
	pulumi.RegisterOutputType(ExportRecurrencePeriodResponseOutput{})
	pulumi.RegisterOutputType(ExportRecurrencePeriodResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportScheduleOutput{})
	pulumi.RegisterOutputType(ExportSchedulePtrOutput{})
	pulumi.RegisterOutputType(ExportScheduleResponseOutput{})
	pulumi.RegisterOutputType(ExportScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(ExportTimePeriodOutput{})
	pulumi.RegisterOutputType(ExportTimePeriodPtrOutput{})
	pulumi.RegisterOutputType(ExportTimePeriodResponseOutput{})
	pulumi.RegisterOutputType(ExportTimePeriodResponsePtrOutput{})
	pulumi.RegisterOutputType(KpiPropertiesOutput{})
	pulumi.RegisterOutputType(KpiPropertiesArrayOutput{})
	pulumi.RegisterOutputType(KpiPropertiesResponseOutput{})
	pulumi.RegisterOutputType(KpiPropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(PivotPropertiesOutput{})
	pulumi.RegisterOutputType(PivotPropertiesArrayOutput{})
	pulumi.RegisterOutputType(PivotPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PivotPropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportConfigAggregationOutput{})
	pulumi.RegisterOutputType(ReportConfigAggregationMapOutput{})
	pulumi.RegisterOutputType(ReportConfigAggregationResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigAggregationResponseMapOutput{})
	pulumi.RegisterOutputType(ReportConfigComparisonExpressionOutput{})
	pulumi.RegisterOutputType(ReportConfigComparisonExpressionPtrOutput{})
	pulumi.RegisterOutputType(ReportConfigComparisonExpressionResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigComparisonExpressionResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetPtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetConfigurationOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigDatasetResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDefinitionOutput{})
	pulumi.RegisterOutputType(ReportConfigDefinitionPtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDeliveryDestinationOutput{})
	pulumi.RegisterOutputType(ReportConfigDeliveryDestinationPtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDeliveryDestinationResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigDeliveryDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDeliveryInfoOutput{})
	pulumi.RegisterOutputType(ReportConfigDeliveryInfoPtrOutput{})
	pulumi.RegisterOutputType(ReportConfigDeliveryInfoResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigDeliveryInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigFilterOutput{})
	pulumi.RegisterOutputType(ReportConfigFilterPtrOutput{})
	pulumi.RegisterOutputType(ReportConfigFilterArrayOutput{})
	pulumi.RegisterOutputType(ReportConfigFilterResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigFilterResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportConfigGroupingOutput{})
	pulumi.RegisterOutputType(ReportConfigGroupingArrayOutput{})
	pulumi.RegisterOutputType(ReportConfigGroupingResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigGroupingResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportConfigRecurrencePeriodOutput{})
	pulumi.RegisterOutputType(ReportConfigRecurrencePeriodPtrOutput{})
	pulumi.RegisterOutputType(ReportConfigRecurrencePeriodResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigRecurrencePeriodResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigScheduleOutput{})
	pulumi.RegisterOutputType(ReportConfigSchedulePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigScheduleResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportConfigSortingOutput{})
	pulumi.RegisterOutputType(ReportConfigSortingArrayOutput{})
	pulumi.RegisterOutputType(ReportConfigSortingResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigSortingResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportConfigTimePeriodOutput{})
	pulumi.RegisterOutputType(ReportConfigTimePeriodPtrOutput{})
	pulumi.RegisterOutputType(ReportConfigTimePeriodResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigTimePeriodResponsePtrOutput{})
}
