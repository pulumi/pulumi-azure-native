// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190801

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Cosmos DB capability object
type Capability struct {
	// Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also include "EnableTable" and "EnableGremlin".
	Name *string `pulumi:"name"`
}

// CapabilityInput is an input type that accepts CapabilityArgs and CapabilityOutput values.
// You can construct a concrete instance of `CapabilityInput` via:
//
//          CapabilityArgs{...}
type CapabilityInput interface {
	pulumi.Input

	ToCapabilityOutput() CapabilityOutput
	ToCapabilityOutputWithContext(context.Context) CapabilityOutput
}

// Cosmos DB capability object
type CapabilityArgs struct {
	// Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also include "EnableTable" and "EnableGremlin".
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CapabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Capability)(nil)).Elem()
}

func (i CapabilityArgs) ToCapabilityOutput() CapabilityOutput {
	return i.ToCapabilityOutputWithContext(context.Background())
}

func (i CapabilityArgs) ToCapabilityOutputWithContext(ctx context.Context) CapabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityOutput)
}

// CapabilityArrayInput is an input type that accepts CapabilityArray and CapabilityArrayOutput values.
// You can construct a concrete instance of `CapabilityArrayInput` via:
//
//          CapabilityArray{ CapabilityArgs{...} }
type CapabilityArrayInput interface {
	pulumi.Input

	ToCapabilityArrayOutput() CapabilityArrayOutput
	ToCapabilityArrayOutputWithContext(context.Context) CapabilityArrayOutput
}

type CapabilityArray []CapabilityInput

func (CapabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Capability)(nil)).Elem()
}

func (i CapabilityArray) ToCapabilityArrayOutput() CapabilityArrayOutput {
	return i.ToCapabilityArrayOutputWithContext(context.Background())
}

func (i CapabilityArray) ToCapabilityArrayOutputWithContext(ctx context.Context) CapabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityArrayOutput)
}

// Cosmos DB capability object
type CapabilityOutput struct{ *pulumi.OutputState }

func (CapabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Capability)(nil)).Elem()
}

func (o CapabilityOutput) ToCapabilityOutput() CapabilityOutput {
	return o
}

func (o CapabilityOutput) ToCapabilityOutputWithContext(ctx context.Context) CapabilityOutput {
	return o
}

// Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also include "EnableTable" and "EnableGremlin".
func (o CapabilityOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Capability) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CapabilityArrayOutput struct{ *pulumi.OutputState }

func (CapabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Capability)(nil)).Elem()
}

func (o CapabilityArrayOutput) ToCapabilityArrayOutput() CapabilityArrayOutput {
	return o
}

func (o CapabilityArrayOutput) ToCapabilityArrayOutputWithContext(ctx context.Context) CapabilityArrayOutput {
	return o
}

func (o CapabilityArrayOutput) Index(i pulumi.IntInput) CapabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Capability {
		return vs[0].([]Capability)[vs[1].(int)]
	}).(CapabilityOutput)
}

// Cosmos DB capability object
type CapabilityResponse struct {
	// Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also include "EnableTable" and "EnableGremlin".
	Name *string `pulumi:"name"`
}

// CapabilityResponseInput is an input type that accepts CapabilityResponseArgs and CapabilityResponseOutput values.
// You can construct a concrete instance of `CapabilityResponseInput` via:
//
//          CapabilityResponseArgs{...}
type CapabilityResponseInput interface {
	pulumi.Input

	ToCapabilityResponseOutput() CapabilityResponseOutput
	ToCapabilityResponseOutputWithContext(context.Context) CapabilityResponseOutput
}

// Cosmos DB capability object
type CapabilityResponseArgs struct {
	// Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also include "EnableTable" and "EnableGremlin".
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CapabilityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityResponse)(nil)).Elem()
}

func (i CapabilityResponseArgs) ToCapabilityResponseOutput() CapabilityResponseOutput {
	return i.ToCapabilityResponseOutputWithContext(context.Background())
}

func (i CapabilityResponseArgs) ToCapabilityResponseOutputWithContext(ctx context.Context) CapabilityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityResponseOutput)
}

// CapabilityResponseArrayInput is an input type that accepts CapabilityResponseArray and CapabilityResponseArrayOutput values.
// You can construct a concrete instance of `CapabilityResponseArrayInput` via:
//
//          CapabilityResponseArray{ CapabilityResponseArgs{...} }
type CapabilityResponseArrayInput interface {
	pulumi.Input

	ToCapabilityResponseArrayOutput() CapabilityResponseArrayOutput
	ToCapabilityResponseArrayOutputWithContext(context.Context) CapabilityResponseArrayOutput
}

type CapabilityResponseArray []CapabilityResponseInput

func (CapabilityResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CapabilityResponse)(nil)).Elem()
}

func (i CapabilityResponseArray) ToCapabilityResponseArrayOutput() CapabilityResponseArrayOutput {
	return i.ToCapabilityResponseArrayOutputWithContext(context.Background())
}

func (i CapabilityResponseArray) ToCapabilityResponseArrayOutputWithContext(ctx context.Context) CapabilityResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityResponseArrayOutput)
}

// Cosmos DB capability object
type CapabilityResponseOutput struct{ *pulumi.OutputState }

func (CapabilityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityResponse)(nil)).Elem()
}

func (o CapabilityResponseOutput) ToCapabilityResponseOutput() CapabilityResponseOutput {
	return o
}

func (o CapabilityResponseOutput) ToCapabilityResponseOutputWithContext(ctx context.Context) CapabilityResponseOutput {
	return o
}

// Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also include "EnableTable" and "EnableGremlin".
func (o CapabilityResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CapabilityResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CapabilityResponseArrayOutput struct{ *pulumi.OutputState }

func (CapabilityResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CapabilityResponse)(nil)).Elem()
}

func (o CapabilityResponseArrayOutput) ToCapabilityResponseArrayOutput() CapabilityResponseArrayOutput {
	return o
}

func (o CapabilityResponseArrayOutput) ToCapabilityResponseArrayOutputWithContext(ctx context.Context) CapabilityResponseArrayOutput {
	return o
}

func (o CapabilityResponseArrayOutput) Index(i pulumi.IntInput) CapabilityResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CapabilityResponse {
		return vs[0].([]CapabilityResponse)[vs[1].(int)]
	}).(CapabilityResponseOutput)
}

// The properties of an Azure Cosmos DB Cassandra keyspace
type CassandraKeyspaceGetPropertiesResponse struct {
	Resource map[string]interface{} `pulumi:"resource"`
}

// CassandraKeyspaceGetPropertiesResponseInput is an input type that accepts CassandraKeyspaceGetPropertiesResponseArgs and CassandraKeyspaceGetPropertiesResponseOutput values.
// You can construct a concrete instance of `CassandraKeyspaceGetPropertiesResponseInput` via:
//
//          CassandraKeyspaceGetPropertiesResponseArgs{...}
type CassandraKeyspaceGetPropertiesResponseInput interface {
	pulumi.Input

	ToCassandraKeyspaceGetPropertiesResponseOutput() CassandraKeyspaceGetPropertiesResponseOutput
	ToCassandraKeyspaceGetPropertiesResponseOutputWithContext(context.Context) CassandraKeyspaceGetPropertiesResponseOutput
}

// The properties of an Azure Cosmos DB Cassandra keyspace
type CassandraKeyspaceGetPropertiesResponseArgs struct {
	Resource pulumi.MapInput `pulumi:"resource"`
}

func (CassandraKeyspaceGetPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraKeyspaceGetPropertiesResponse)(nil)).Elem()
}

func (i CassandraKeyspaceGetPropertiesResponseArgs) ToCassandraKeyspaceGetPropertiesResponseOutput() CassandraKeyspaceGetPropertiesResponseOutput {
	return i.ToCassandraKeyspaceGetPropertiesResponseOutputWithContext(context.Background())
}

func (i CassandraKeyspaceGetPropertiesResponseArgs) ToCassandraKeyspaceGetPropertiesResponseOutputWithContext(ctx context.Context) CassandraKeyspaceGetPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraKeyspaceGetPropertiesResponseOutput)
}

func (i CassandraKeyspaceGetPropertiesResponseArgs) ToCassandraKeyspaceGetPropertiesResponsePtrOutput() CassandraKeyspaceGetPropertiesResponsePtrOutput {
	return i.ToCassandraKeyspaceGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i CassandraKeyspaceGetPropertiesResponseArgs) ToCassandraKeyspaceGetPropertiesResponsePtrOutputWithContext(ctx context.Context) CassandraKeyspaceGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraKeyspaceGetPropertiesResponseOutput).ToCassandraKeyspaceGetPropertiesResponsePtrOutputWithContext(ctx)
}

// CassandraKeyspaceGetPropertiesResponsePtrInput is an input type that accepts CassandraKeyspaceGetPropertiesResponseArgs, CassandraKeyspaceGetPropertiesResponsePtr and CassandraKeyspaceGetPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `CassandraKeyspaceGetPropertiesResponsePtrInput` via:
//
//          CassandraKeyspaceGetPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type CassandraKeyspaceGetPropertiesResponsePtrInput interface {
	pulumi.Input

	ToCassandraKeyspaceGetPropertiesResponsePtrOutput() CassandraKeyspaceGetPropertiesResponsePtrOutput
	ToCassandraKeyspaceGetPropertiesResponsePtrOutputWithContext(context.Context) CassandraKeyspaceGetPropertiesResponsePtrOutput
}

type cassandraKeyspaceGetPropertiesResponsePtrType CassandraKeyspaceGetPropertiesResponseArgs

func CassandraKeyspaceGetPropertiesResponsePtr(v *CassandraKeyspaceGetPropertiesResponseArgs) CassandraKeyspaceGetPropertiesResponsePtrInput {
	return (*cassandraKeyspaceGetPropertiesResponsePtrType)(v)
}

func (*cassandraKeyspaceGetPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraKeyspaceGetPropertiesResponse)(nil)).Elem()
}

func (i *cassandraKeyspaceGetPropertiesResponsePtrType) ToCassandraKeyspaceGetPropertiesResponsePtrOutput() CassandraKeyspaceGetPropertiesResponsePtrOutput {
	return i.ToCassandraKeyspaceGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *cassandraKeyspaceGetPropertiesResponsePtrType) ToCassandraKeyspaceGetPropertiesResponsePtrOutputWithContext(ctx context.Context) CassandraKeyspaceGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraKeyspaceGetPropertiesResponsePtrOutput)
}

// The properties of an Azure Cosmos DB Cassandra keyspace
type CassandraKeyspaceGetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (CassandraKeyspaceGetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraKeyspaceGetPropertiesResponse)(nil)).Elem()
}

func (o CassandraKeyspaceGetPropertiesResponseOutput) ToCassandraKeyspaceGetPropertiesResponseOutput() CassandraKeyspaceGetPropertiesResponseOutput {
	return o
}

func (o CassandraKeyspaceGetPropertiesResponseOutput) ToCassandraKeyspaceGetPropertiesResponseOutputWithContext(ctx context.Context) CassandraKeyspaceGetPropertiesResponseOutput {
	return o
}

func (o CassandraKeyspaceGetPropertiesResponseOutput) ToCassandraKeyspaceGetPropertiesResponsePtrOutput() CassandraKeyspaceGetPropertiesResponsePtrOutput {
	return o.ToCassandraKeyspaceGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o CassandraKeyspaceGetPropertiesResponseOutput) ToCassandraKeyspaceGetPropertiesResponsePtrOutputWithContext(ctx context.Context) CassandraKeyspaceGetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v CassandraKeyspaceGetPropertiesResponse) *CassandraKeyspaceGetPropertiesResponse {
		return &v
	}).(CassandraKeyspaceGetPropertiesResponsePtrOutput)
}
func (o CassandraKeyspaceGetPropertiesResponseOutput) Resource() pulumi.MapOutput {
	return o.ApplyT(func(v CassandraKeyspaceGetPropertiesResponse) map[string]interface{} { return v.Resource }).(pulumi.MapOutput)
}

type CassandraKeyspaceGetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (CassandraKeyspaceGetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraKeyspaceGetPropertiesResponse)(nil)).Elem()
}

func (o CassandraKeyspaceGetPropertiesResponsePtrOutput) ToCassandraKeyspaceGetPropertiesResponsePtrOutput() CassandraKeyspaceGetPropertiesResponsePtrOutput {
	return o
}

func (o CassandraKeyspaceGetPropertiesResponsePtrOutput) ToCassandraKeyspaceGetPropertiesResponsePtrOutputWithContext(ctx context.Context) CassandraKeyspaceGetPropertiesResponsePtrOutput {
	return o
}

func (o CassandraKeyspaceGetPropertiesResponsePtrOutput) Elem() CassandraKeyspaceGetPropertiesResponseOutput {
	return o.ApplyT(func(v *CassandraKeyspaceGetPropertiesResponse) CassandraKeyspaceGetPropertiesResponse { return *v }).(CassandraKeyspaceGetPropertiesResponseOutput)
}

func (o CassandraKeyspaceGetPropertiesResponsePtrOutput) Resource() pulumi.MapOutput {
	return o.ApplyT(func(v *CassandraKeyspaceGetPropertiesResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.MapOutput)
}

// Cosmos DB Cassandra keyspace resource object
type CassandraKeyspaceResource struct {
	// Name of the Cosmos DB Cassandra keyspace
	Id string `pulumi:"id"`
}

// CassandraKeyspaceResourceInput is an input type that accepts CassandraKeyspaceResourceArgs and CassandraKeyspaceResourceOutput values.
// You can construct a concrete instance of `CassandraKeyspaceResourceInput` via:
//
//          CassandraKeyspaceResourceArgs{...}
type CassandraKeyspaceResourceInput interface {
	pulumi.Input

	ToCassandraKeyspaceResourceOutput() CassandraKeyspaceResourceOutput
	ToCassandraKeyspaceResourceOutputWithContext(context.Context) CassandraKeyspaceResourceOutput
}

// Cosmos DB Cassandra keyspace resource object
type CassandraKeyspaceResourceArgs struct {
	// Name of the Cosmos DB Cassandra keyspace
	Id pulumi.StringInput `pulumi:"id"`
}

func (CassandraKeyspaceResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraKeyspaceResource)(nil)).Elem()
}

func (i CassandraKeyspaceResourceArgs) ToCassandraKeyspaceResourceOutput() CassandraKeyspaceResourceOutput {
	return i.ToCassandraKeyspaceResourceOutputWithContext(context.Background())
}

func (i CassandraKeyspaceResourceArgs) ToCassandraKeyspaceResourceOutputWithContext(ctx context.Context) CassandraKeyspaceResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraKeyspaceResourceOutput)
}

func (i CassandraKeyspaceResourceArgs) ToCassandraKeyspaceResourcePtrOutput() CassandraKeyspaceResourcePtrOutput {
	return i.ToCassandraKeyspaceResourcePtrOutputWithContext(context.Background())
}

func (i CassandraKeyspaceResourceArgs) ToCassandraKeyspaceResourcePtrOutputWithContext(ctx context.Context) CassandraKeyspaceResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraKeyspaceResourceOutput).ToCassandraKeyspaceResourcePtrOutputWithContext(ctx)
}

// CassandraKeyspaceResourcePtrInput is an input type that accepts CassandraKeyspaceResourceArgs, CassandraKeyspaceResourcePtr and CassandraKeyspaceResourcePtrOutput values.
// You can construct a concrete instance of `CassandraKeyspaceResourcePtrInput` via:
//
//          CassandraKeyspaceResourceArgs{...}
//
//  or:
//
//          nil
type CassandraKeyspaceResourcePtrInput interface {
	pulumi.Input

	ToCassandraKeyspaceResourcePtrOutput() CassandraKeyspaceResourcePtrOutput
	ToCassandraKeyspaceResourcePtrOutputWithContext(context.Context) CassandraKeyspaceResourcePtrOutput
}

type cassandraKeyspaceResourcePtrType CassandraKeyspaceResourceArgs

func CassandraKeyspaceResourcePtr(v *CassandraKeyspaceResourceArgs) CassandraKeyspaceResourcePtrInput {
	return (*cassandraKeyspaceResourcePtrType)(v)
}

func (*cassandraKeyspaceResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraKeyspaceResource)(nil)).Elem()
}

func (i *cassandraKeyspaceResourcePtrType) ToCassandraKeyspaceResourcePtrOutput() CassandraKeyspaceResourcePtrOutput {
	return i.ToCassandraKeyspaceResourcePtrOutputWithContext(context.Background())
}

func (i *cassandraKeyspaceResourcePtrType) ToCassandraKeyspaceResourcePtrOutputWithContext(ctx context.Context) CassandraKeyspaceResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraKeyspaceResourcePtrOutput)
}

// Cosmos DB Cassandra keyspace resource object
type CassandraKeyspaceResourceOutput struct{ *pulumi.OutputState }

func (CassandraKeyspaceResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraKeyspaceResource)(nil)).Elem()
}

func (o CassandraKeyspaceResourceOutput) ToCassandraKeyspaceResourceOutput() CassandraKeyspaceResourceOutput {
	return o
}

func (o CassandraKeyspaceResourceOutput) ToCassandraKeyspaceResourceOutputWithContext(ctx context.Context) CassandraKeyspaceResourceOutput {
	return o
}

func (o CassandraKeyspaceResourceOutput) ToCassandraKeyspaceResourcePtrOutput() CassandraKeyspaceResourcePtrOutput {
	return o.ToCassandraKeyspaceResourcePtrOutputWithContext(context.Background())
}

func (o CassandraKeyspaceResourceOutput) ToCassandraKeyspaceResourcePtrOutputWithContext(ctx context.Context) CassandraKeyspaceResourcePtrOutput {
	return o.ApplyT(func(v CassandraKeyspaceResource) *CassandraKeyspaceResource {
		return &v
	}).(CassandraKeyspaceResourcePtrOutput)
}

// Name of the Cosmos DB Cassandra keyspace
func (o CassandraKeyspaceResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v CassandraKeyspaceResource) string { return v.Id }).(pulumi.StringOutput)
}

type CassandraKeyspaceResourcePtrOutput struct{ *pulumi.OutputState }

func (CassandraKeyspaceResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraKeyspaceResource)(nil)).Elem()
}

func (o CassandraKeyspaceResourcePtrOutput) ToCassandraKeyspaceResourcePtrOutput() CassandraKeyspaceResourcePtrOutput {
	return o
}

func (o CassandraKeyspaceResourcePtrOutput) ToCassandraKeyspaceResourcePtrOutputWithContext(ctx context.Context) CassandraKeyspaceResourcePtrOutput {
	return o
}

func (o CassandraKeyspaceResourcePtrOutput) Elem() CassandraKeyspaceResourceOutput {
	return o.ApplyT(func(v *CassandraKeyspaceResource) CassandraKeyspaceResource { return *v }).(CassandraKeyspaceResourceOutput)
}

// Name of the Cosmos DB Cassandra keyspace
func (o CassandraKeyspaceResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CassandraKeyspaceResource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Cosmos DB Cassandra table partition key
type CassandraPartitionKey struct {
	// Name of the Cosmos DB Cassandra table partition key
	Name *string `pulumi:"name"`
}

// CassandraPartitionKeyInput is an input type that accepts CassandraPartitionKeyArgs and CassandraPartitionKeyOutput values.
// You can construct a concrete instance of `CassandraPartitionKeyInput` via:
//
//          CassandraPartitionKeyArgs{...}
type CassandraPartitionKeyInput interface {
	pulumi.Input

	ToCassandraPartitionKeyOutput() CassandraPartitionKeyOutput
	ToCassandraPartitionKeyOutputWithContext(context.Context) CassandraPartitionKeyOutput
}

// Cosmos DB Cassandra table partition key
type CassandraPartitionKeyArgs struct {
	// Name of the Cosmos DB Cassandra table partition key
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CassandraPartitionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraPartitionKey)(nil)).Elem()
}

func (i CassandraPartitionKeyArgs) ToCassandraPartitionKeyOutput() CassandraPartitionKeyOutput {
	return i.ToCassandraPartitionKeyOutputWithContext(context.Background())
}

func (i CassandraPartitionKeyArgs) ToCassandraPartitionKeyOutputWithContext(ctx context.Context) CassandraPartitionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraPartitionKeyOutput)
}

// CassandraPartitionKeyArrayInput is an input type that accepts CassandraPartitionKeyArray and CassandraPartitionKeyArrayOutput values.
// You can construct a concrete instance of `CassandraPartitionKeyArrayInput` via:
//
//          CassandraPartitionKeyArray{ CassandraPartitionKeyArgs{...} }
type CassandraPartitionKeyArrayInput interface {
	pulumi.Input

	ToCassandraPartitionKeyArrayOutput() CassandraPartitionKeyArrayOutput
	ToCassandraPartitionKeyArrayOutputWithContext(context.Context) CassandraPartitionKeyArrayOutput
}

type CassandraPartitionKeyArray []CassandraPartitionKeyInput

func (CassandraPartitionKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CassandraPartitionKey)(nil)).Elem()
}

func (i CassandraPartitionKeyArray) ToCassandraPartitionKeyArrayOutput() CassandraPartitionKeyArrayOutput {
	return i.ToCassandraPartitionKeyArrayOutputWithContext(context.Background())
}

func (i CassandraPartitionKeyArray) ToCassandraPartitionKeyArrayOutputWithContext(ctx context.Context) CassandraPartitionKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraPartitionKeyArrayOutput)
}

// Cosmos DB Cassandra table partition key
type CassandraPartitionKeyOutput struct{ *pulumi.OutputState }

func (CassandraPartitionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraPartitionKey)(nil)).Elem()
}

func (o CassandraPartitionKeyOutput) ToCassandraPartitionKeyOutput() CassandraPartitionKeyOutput {
	return o
}

func (o CassandraPartitionKeyOutput) ToCassandraPartitionKeyOutputWithContext(ctx context.Context) CassandraPartitionKeyOutput {
	return o
}

// Name of the Cosmos DB Cassandra table partition key
func (o CassandraPartitionKeyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CassandraPartitionKey) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CassandraPartitionKeyArrayOutput struct{ *pulumi.OutputState }

func (CassandraPartitionKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CassandraPartitionKey)(nil)).Elem()
}

func (o CassandraPartitionKeyArrayOutput) ToCassandraPartitionKeyArrayOutput() CassandraPartitionKeyArrayOutput {
	return o
}

func (o CassandraPartitionKeyArrayOutput) ToCassandraPartitionKeyArrayOutputWithContext(ctx context.Context) CassandraPartitionKeyArrayOutput {
	return o
}

func (o CassandraPartitionKeyArrayOutput) Index(i pulumi.IntInput) CassandraPartitionKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CassandraPartitionKey {
		return vs[0].([]CassandraPartitionKey)[vs[1].(int)]
	}).(CassandraPartitionKeyOutput)
}

// An Azure Cosmos DB Cassandra keyspace.
type CassandraResourceCassandraKeyspaceType struct {
	// The location of the resource group to which the resource belongs.
	Location *string `pulumi:"location"`
	// The name of the ARM resource.
	Name string `pulumi:"name"`
	// The properties of an Azure Cosmos DB Cassandra keyspace
	Properties CassandraKeyspaceGetPropertiesResponse `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags *TagsResponse `pulumi:"tags"`
	// The type of Azure resource.
	Type string `pulumi:"type"`
}

// CassandraResourceCassandraKeyspaceTypeInput is an input type that accepts CassandraResourceCassandraKeyspaceTypeArgs and CassandraResourceCassandraKeyspaceTypeOutput values.
// You can construct a concrete instance of `CassandraResourceCassandraKeyspaceTypeInput` via:
//
//          CassandraResourceCassandraKeyspaceTypeArgs{...}
type CassandraResourceCassandraKeyspaceTypeInput interface {
	pulumi.Input

	ToCassandraResourceCassandraKeyspaceTypeOutput() CassandraResourceCassandraKeyspaceTypeOutput
	ToCassandraResourceCassandraKeyspaceTypeOutputWithContext(context.Context) CassandraResourceCassandraKeyspaceTypeOutput
}

// An Azure Cosmos DB Cassandra keyspace.
type CassandraResourceCassandraKeyspaceTypeArgs struct {
	// The location of the resource group to which the resource belongs.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the ARM resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of an Azure Cosmos DB Cassandra keyspace
	Properties CassandraKeyspaceGetPropertiesResponseInput `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags TagsResponsePtrInput `pulumi:"tags"`
	// The type of Azure resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CassandraResourceCassandraKeyspaceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraResourceCassandraKeyspaceType)(nil)).Elem()
}

func (i CassandraResourceCassandraKeyspaceTypeArgs) ToCassandraResourceCassandraKeyspaceTypeOutput() CassandraResourceCassandraKeyspaceTypeOutput {
	return i.ToCassandraResourceCassandraKeyspaceTypeOutputWithContext(context.Background())
}

func (i CassandraResourceCassandraKeyspaceTypeArgs) ToCassandraResourceCassandraKeyspaceTypeOutputWithContext(ctx context.Context) CassandraResourceCassandraKeyspaceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraResourceCassandraKeyspaceTypeOutput)
}

// An Azure Cosmos DB Cassandra keyspace.
type CassandraResourceCassandraKeyspaceTypeOutput struct{ *pulumi.OutputState }

func (CassandraResourceCassandraKeyspaceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraResourceCassandraKeyspaceType)(nil)).Elem()
}

func (o CassandraResourceCassandraKeyspaceTypeOutput) ToCassandraResourceCassandraKeyspaceTypeOutput() CassandraResourceCassandraKeyspaceTypeOutput {
	return o
}

func (o CassandraResourceCassandraKeyspaceTypeOutput) ToCassandraResourceCassandraKeyspaceTypeOutputWithContext(ctx context.Context) CassandraResourceCassandraKeyspaceTypeOutput {
	return o
}

// The location of the resource group to which the resource belongs.
func (o CassandraResourceCassandraKeyspaceTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CassandraResourceCassandraKeyspaceType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the ARM resource.
func (o CassandraResourceCassandraKeyspaceTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CassandraResourceCassandraKeyspaceType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of an Azure Cosmos DB Cassandra keyspace
func (o CassandraResourceCassandraKeyspaceTypeOutput) Properties() CassandraKeyspaceGetPropertiesResponseOutput {
	return o.ApplyT(func(v CassandraResourceCassandraKeyspaceType) CassandraKeyspaceGetPropertiesResponse {
		return v.Properties
	}).(CassandraKeyspaceGetPropertiesResponseOutput)
}

// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
func (o CassandraResourceCassandraKeyspaceTypeOutput) Tags() TagsResponsePtrOutput {
	return o.ApplyT(func(v CassandraResourceCassandraKeyspaceType) *TagsResponse { return v.Tags }).(TagsResponsePtrOutput)
}

// The type of Azure resource.
func (o CassandraResourceCassandraKeyspaceTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CassandraResourceCassandraKeyspaceType) string { return v.Type }).(pulumi.StringOutput)
}

// An Azure Cosmos DB Cassandra table.
type CassandraResourceCassandraTableType struct {
	// The location of the resource group to which the resource belongs.
	Location *string `pulumi:"location"`
	// The name of the ARM resource.
	Name string `pulumi:"name"`
	// The properties of an Azure Cosmos DB Cassandra table
	Properties CassandraTableGetPropertiesResponse `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags *TagsResponse `pulumi:"tags"`
	// The type of Azure resource.
	Type string `pulumi:"type"`
}

// CassandraResourceCassandraTableTypeInput is an input type that accepts CassandraResourceCassandraTableTypeArgs and CassandraResourceCassandraTableTypeOutput values.
// You can construct a concrete instance of `CassandraResourceCassandraTableTypeInput` via:
//
//          CassandraResourceCassandraTableTypeArgs{...}
type CassandraResourceCassandraTableTypeInput interface {
	pulumi.Input

	ToCassandraResourceCassandraTableTypeOutput() CassandraResourceCassandraTableTypeOutput
	ToCassandraResourceCassandraTableTypeOutputWithContext(context.Context) CassandraResourceCassandraTableTypeOutput
}

// An Azure Cosmos DB Cassandra table.
type CassandraResourceCassandraTableTypeArgs struct {
	// The location of the resource group to which the resource belongs.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the ARM resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of an Azure Cosmos DB Cassandra table
	Properties CassandraTableGetPropertiesResponseInput `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags TagsResponsePtrInput `pulumi:"tags"`
	// The type of Azure resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CassandraResourceCassandraTableTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraResourceCassandraTableType)(nil)).Elem()
}

func (i CassandraResourceCassandraTableTypeArgs) ToCassandraResourceCassandraTableTypeOutput() CassandraResourceCassandraTableTypeOutput {
	return i.ToCassandraResourceCassandraTableTypeOutputWithContext(context.Background())
}

func (i CassandraResourceCassandraTableTypeArgs) ToCassandraResourceCassandraTableTypeOutputWithContext(ctx context.Context) CassandraResourceCassandraTableTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraResourceCassandraTableTypeOutput)
}

// An Azure Cosmos DB Cassandra table.
type CassandraResourceCassandraTableTypeOutput struct{ *pulumi.OutputState }

func (CassandraResourceCassandraTableTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraResourceCassandraTableType)(nil)).Elem()
}

func (o CassandraResourceCassandraTableTypeOutput) ToCassandraResourceCassandraTableTypeOutput() CassandraResourceCassandraTableTypeOutput {
	return o
}

func (o CassandraResourceCassandraTableTypeOutput) ToCassandraResourceCassandraTableTypeOutputWithContext(ctx context.Context) CassandraResourceCassandraTableTypeOutput {
	return o
}

// The location of the resource group to which the resource belongs.
func (o CassandraResourceCassandraTableTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CassandraResourceCassandraTableType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the ARM resource.
func (o CassandraResourceCassandraTableTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CassandraResourceCassandraTableType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of an Azure Cosmos DB Cassandra table
func (o CassandraResourceCassandraTableTypeOutput) Properties() CassandraTableGetPropertiesResponseOutput {
	return o.ApplyT(func(v CassandraResourceCassandraTableType) CassandraTableGetPropertiesResponse { return v.Properties }).(CassandraTableGetPropertiesResponseOutput)
}

// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
func (o CassandraResourceCassandraTableTypeOutput) Tags() TagsResponsePtrOutput {
	return o.ApplyT(func(v CassandraResourceCassandraTableType) *TagsResponse { return v.Tags }).(TagsResponsePtrOutput)
}

// The type of Azure resource.
func (o CassandraResourceCassandraTableTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CassandraResourceCassandraTableType) string { return v.Type }).(pulumi.StringOutput)
}

// Cosmos DB Cassandra table schema
type CassandraSchema struct {
	// List of cluster key.
	ClusterKeys []ClusterKey `pulumi:"clusterKeys"`
	// List of Cassandra table columns.
	Columns []Column `pulumi:"columns"`
	// List of partition key.
	PartitionKeys []CassandraPartitionKey `pulumi:"partitionKeys"`
}

// CassandraSchemaInput is an input type that accepts CassandraSchemaArgs and CassandraSchemaOutput values.
// You can construct a concrete instance of `CassandraSchemaInput` via:
//
//          CassandraSchemaArgs{...}
type CassandraSchemaInput interface {
	pulumi.Input

	ToCassandraSchemaOutput() CassandraSchemaOutput
	ToCassandraSchemaOutputWithContext(context.Context) CassandraSchemaOutput
}

// Cosmos DB Cassandra table schema
type CassandraSchemaArgs struct {
	// List of cluster key.
	ClusterKeys ClusterKeyArrayInput `pulumi:"clusterKeys"`
	// List of Cassandra table columns.
	Columns ColumnArrayInput `pulumi:"columns"`
	// List of partition key.
	PartitionKeys CassandraPartitionKeyArrayInput `pulumi:"partitionKeys"`
}

func (CassandraSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraSchema)(nil)).Elem()
}

func (i CassandraSchemaArgs) ToCassandraSchemaOutput() CassandraSchemaOutput {
	return i.ToCassandraSchemaOutputWithContext(context.Background())
}

func (i CassandraSchemaArgs) ToCassandraSchemaOutputWithContext(ctx context.Context) CassandraSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraSchemaOutput)
}

func (i CassandraSchemaArgs) ToCassandraSchemaPtrOutput() CassandraSchemaPtrOutput {
	return i.ToCassandraSchemaPtrOutputWithContext(context.Background())
}

func (i CassandraSchemaArgs) ToCassandraSchemaPtrOutputWithContext(ctx context.Context) CassandraSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraSchemaOutput).ToCassandraSchemaPtrOutputWithContext(ctx)
}

// CassandraSchemaPtrInput is an input type that accepts CassandraSchemaArgs, CassandraSchemaPtr and CassandraSchemaPtrOutput values.
// You can construct a concrete instance of `CassandraSchemaPtrInput` via:
//
//          CassandraSchemaArgs{...}
//
//  or:
//
//          nil
type CassandraSchemaPtrInput interface {
	pulumi.Input

	ToCassandraSchemaPtrOutput() CassandraSchemaPtrOutput
	ToCassandraSchemaPtrOutputWithContext(context.Context) CassandraSchemaPtrOutput
}

type cassandraSchemaPtrType CassandraSchemaArgs

func CassandraSchemaPtr(v *CassandraSchemaArgs) CassandraSchemaPtrInput {
	return (*cassandraSchemaPtrType)(v)
}

func (*cassandraSchemaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraSchema)(nil)).Elem()
}

func (i *cassandraSchemaPtrType) ToCassandraSchemaPtrOutput() CassandraSchemaPtrOutput {
	return i.ToCassandraSchemaPtrOutputWithContext(context.Background())
}

func (i *cassandraSchemaPtrType) ToCassandraSchemaPtrOutputWithContext(ctx context.Context) CassandraSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraSchemaPtrOutput)
}

// Cosmos DB Cassandra table schema
type CassandraSchemaOutput struct{ *pulumi.OutputState }

func (CassandraSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraSchema)(nil)).Elem()
}

func (o CassandraSchemaOutput) ToCassandraSchemaOutput() CassandraSchemaOutput {
	return o
}

func (o CassandraSchemaOutput) ToCassandraSchemaOutputWithContext(ctx context.Context) CassandraSchemaOutput {
	return o
}

func (o CassandraSchemaOutput) ToCassandraSchemaPtrOutput() CassandraSchemaPtrOutput {
	return o.ToCassandraSchemaPtrOutputWithContext(context.Background())
}

func (o CassandraSchemaOutput) ToCassandraSchemaPtrOutputWithContext(ctx context.Context) CassandraSchemaPtrOutput {
	return o.ApplyT(func(v CassandraSchema) *CassandraSchema {
		return &v
	}).(CassandraSchemaPtrOutput)
}

// List of cluster key.
func (o CassandraSchemaOutput) ClusterKeys() ClusterKeyArrayOutput {
	return o.ApplyT(func(v CassandraSchema) []ClusterKey { return v.ClusterKeys }).(ClusterKeyArrayOutput)
}

// List of Cassandra table columns.
func (o CassandraSchemaOutput) Columns() ColumnArrayOutput {
	return o.ApplyT(func(v CassandraSchema) []Column { return v.Columns }).(ColumnArrayOutput)
}

// List of partition key.
func (o CassandraSchemaOutput) PartitionKeys() CassandraPartitionKeyArrayOutput {
	return o.ApplyT(func(v CassandraSchema) []CassandraPartitionKey { return v.PartitionKeys }).(CassandraPartitionKeyArrayOutput)
}

type CassandraSchemaPtrOutput struct{ *pulumi.OutputState }

func (CassandraSchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraSchema)(nil)).Elem()
}

func (o CassandraSchemaPtrOutput) ToCassandraSchemaPtrOutput() CassandraSchemaPtrOutput {
	return o
}

func (o CassandraSchemaPtrOutput) ToCassandraSchemaPtrOutputWithContext(ctx context.Context) CassandraSchemaPtrOutput {
	return o
}

func (o CassandraSchemaPtrOutput) Elem() CassandraSchemaOutput {
	return o.ApplyT(func(v *CassandraSchema) CassandraSchema { return *v }).(CassandraSchemaOutput)
}

// List of cluster key.
func (o CassandraSchemaPtrOutput) ClusterKeys() ClusterKeyArrayOutput {
	return o.ApplyT(func(v *CassandraSchema) []ClusterKey {
		if v == nil {
			return nil
		}
		return v.ClusterKeys
	}).(ClusterKeyArrayOutput)
}

// List of Cassandra table columns.
func (o CassandraSchemaPtrOutput) Columns() ColumnArrayOutput {
	return o.ApplyT(func(v *CassandraSchema) []Column {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(ColumnArrayOutput)
}

// List of partition key.
func (o CassandraSchemaPtrOutput) PartitionKeys() CassandraPartitionKeyArrayOutput {
	return o.ApplyT(func(v *CassandraSchema) []CassandraPartitionKey {
		if v == nil {
			return nil
		}
		return v.PartitionKeys
	}).(CassandraPartitionKeyArrayOutput)
}

// The properties of an Azure Cosmos DB Cassandra table
type CassandraTableGetPropertiesResponse struct {
	Resource map[string]interface{} `pulumi:"resource"`
}

// CassandraTableGetPropertiesResponseInput is an input type that accepts CassandraTableGetPropertiesResponseArgs and CassandraTableGetPropertiesResponseOutput values.
// You can construct a concrete instance of `CassandraTableGetPropertiesResponseInput` via:
//
//          CassandraTableGetPropertiesResponseArgs{...}
type CassandraTableGetPropertiesResponseInput interface {
	pulumi.Input

	ToCassandraTableGetPropertiesResponseOutput() CassandraTableGetPropertiesResponseOutput
	ToCassandraTableGetPropertiesResponseOutputWithContext(context.Context) CassandraTableGetPropertiesResponseOutput
}

// The properties of an Azure Cosmos DB Cassandra table
type CassandraTableGetPropertiesResponseArgs struct {
	Resource pulumi.MapInput `pulumi:"resource"`
}

func (CassandraTableGetPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraTableGetPropertiesResponse)(nil)).Elem()
}

func (i CassandraTableGetPropertiesResponseArgs) ToCassandraTableGetPropertiesResponseOutput() CassandraTableGetPropertiesResponseOutput {
	return i.ToCassandraTableGetPropertiesResponseOutputWithContext(context.Background())
}

func (i CassandraTableGetPropertiesResponseArgs) ToCassandraTableGetPropertiesResponseOutputWithContext(ctx context.Context) CassandraTableGetPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraTableGetPropertiesResponseOutput)
}

func (i CassandraTableGetPropertiesResponseArgs) ToCassandraTableGetPropertiesResponsePtrOutput() CassandraTableGetPropertiesResponsePtrOutput {
	return i.ToCassandraTableGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i CassandraTableGetPropertiesResponseArgs) ToCassandraTableGetPropertiesResponsePtrOutputWithContext(ctx context.Context) CassandraTableGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraTableGetPropertiesResponseOutput).ToCassandraTableGetPropertiesResponsePtrOutputWithContext(ctx)
}

// CassandraTableGetPropertiesResponsePtrInput is an input type that accepts CassandraTableGetPropertiesResponseArgs, CassandraTableGetPropertiesResponsePtr and CassandraTableGetPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `CassandraTableGetPropertiesResponsePtrInput` via:
//
//          CassandraTableGetPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type CassandraTableGetPropertiesResponsePtrInput interface {
	pulumi.Input

	ToCassandraTableGetPropertiesResponsePtrOutput() CassandraTableGetPropertiesResponsePtrOutput
	ToCassandraTableGetPropertiesResponsePtrOutputWithContext(context.Context) CassandraTableGetPropertiesResponsePtrOutput
}

type cassandraTableGetPropertiesResponsePtrType CassandraTableGetPropertiesResponseArgs

func CassandraTableGetPropertiesResponsePtr(v *CassandraTableGetPropertiesResponseArgs) CassandraTableGetPropertiesResponsePtrInput {
	return (*cassandraTableGetPropertiesResponsePtrType)(v)
}

func (*cassandraTableGetPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraTableGetPropertiesResponse)(nil)).Elem()
}

func (i *cassandraTableGetPropertiesResponsePtrType) ToCassandraTableGetPropertiesResponsePtrOutput() CassandraTableGetPropertiesResponsePtrOutput {
	return i.ToCassandraTableGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *cassandraTableGetPropertiesResponsePtrType) ToCassandraTableGetPropertiesResponsePtrOutputWithContext(ctx context.Context) CassandraTableGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraTableGetPropertiesResponsePtrOutput)
}

// The properties of an Azure Cosmos DB Cassandra table
type CassandraTableGetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (CassandraTableGetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraTableGetPropertiesResponse)(nil)).Elem()
}

func (o CassandraTableGetPropertiesResponseOutput) ToCassandraTableGetPropertiesResponseOutput() CassandraTableGetPropertiesResponseOutput {
	return o
}

func (o CassandraTableGetPropertiesResponseOutput) ToCassandraTableGetPropertiesResponseOutputWithContext(ctx context.Context) CassandraTableGetPropertiesResponseOutput {
	return o
}

func (o CassandraTableGetPropertiesResponseOutput) ToCassandraTableGetPropertiesResponsePtrOutput() CassandraTableGetPropertiesResponsePtrOutput {
	return o.ToCassandraTableGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o CassandraTableGetPropertiesResponseOutput) ToCassandraTableGetPropertiesResponsePtrOutputWithContext(ctx context.Context) CassandraTableGetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v CassandraTableGetPropertiesResponse) *CassandraTableGetPropertiesResponse {
		return &v
	}).(CassandraTableGetPropertiesResponsePtrOutput)
}
func (o CassandraTableGetPropertiesResponseOutput) Resource() pulumi.MapOutput {
	return o.ApplyT(func(v CassandraTableGetPropertiesResponse) map[string]interface{} { return v.Resource }).(pulumi.MapOutput)
}

type CassandraTableGetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (CassandraTableGetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraTableGetPropertiesResponse)(nil)).Elem()
}

func (o CassandraTableGetPropertiesResponsePtrOutput) ToCassandraTableGetPropertiesResponsePtrOutput() CassandraTableGetPropertiesResponsePtrOutput {
	return o
}

func (o CassandraTableGetPropertiesResponsePtrOutput) ToCassandraTableGetPropertiesResponsePtrOutputWithContext(ctx context.Context) CassandraTableGetPropertiesResponsePtrOutput {
	return o
}

func (o CassandraTableGetPropertiesResponsePtrOutput) Elem() CassandraTableGetPropertiesResponseOutput {
	return o.ApplyT(func(v *CassandraTableGetPropertiesResponse) CassandraTableGetPropertiesResponse { return *v }).(CassandraTableGetPropertiesResponseOutput)
}

func (o CassandraTableGetPropertiesResponsePtrOutput) Resource() pulumi.MapOutput {
	return o.ApplyT(func(v *CassandraTableGetPropertiesResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.MapOutput)
}

// Cosmos DB Cassandra table resource object
type CassandraTableResource struct {
	// Time to live of the Cosmos DB Cassandra table
	DefaultTtl *int `pulumi:"defaultTtl"`
	// Name of the Cosmos DB Cassandra table
	Id string `pulumi:"id"`
	// Schema of the Cosmos DB Cassandra table
	Schema *CassandraSchema `pulumi:"schema"`
}

// CassandraTableResourceInput is an input type that accepts CassandraTableResourceArgs and CassandraTableResourceOutput values.
// You can construct a concrete instance of `CassandraTableResourceInput` via:
//
//          CassandraTableResourceArgs{...}
type CassandraTableResourceInput interface {
	pulumi.Input

	ToCassandraTableResourceOutput() CassandraTableResourceOutput
	ToCassandraTableResourceOutputWithContext(context.Context) CassandraTableResourceOutput
}

// Cosmos DB Cassandra table resource object
type CassandraTableResourceArgs struct {
	// Time to live of the Cosmos DB Cassandra table
	DefaultTtl pulumi.IntPtrInput `pulumi:"defaultTtl"`
	// Name of the Cosmos DB Cassandra table
	Id pulumi.StringInput `pulumi:"id"`
	// Schema of the Cosmos DB Cassandra table
	Schema CassandraSchemaPtrInput `pulumi:"schema"`
}

func (CassandraTableResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraTableResource)(nil)).Elem()
}

func (i CassandraTableResourceArgs) ToCassandraTableResourceOutput() CassandraTableResourceOutput {
	return i.ToCassandraTableResourceOutputWithContext(context.Background())
}

func (i CassandraTableResourceArgs) ToCassandraTableResourceOutputWithContext(ctx context.Context) CassandraTableResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraTableResourceOutput)
}

func (i CassandraTableResourceArgs) ToCassandraTableResourcePtrOutput() CassandraTableResourcePtrOutput {
	return i.ToCassandraTableResourcePtrOutputWithContext(context.Background())
}

func (i CassandraTableResourceArgs) ToCassandraTableResourcePtrOutputWithContext(ctx context.Context) CassandraTableResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraTableResourceOutput).ToCassandraTableResourcePtrOutputWithContext(ctx)
}

// CassandraTableResourcePtrInput is an input type that accepts CassandraTableResourceArgs, CassandraTableResourcePtr and CassandraTableResourcePtrOutput values.
// You can construct a concrete instance of `CassandraTableResourcePtrInput` via:
//
//          CassandraTableResourceArgs{...}
//
//  or:
//
//          nil
type CassandraTableResourcePtrInput interface {
	pulumi.Input

	ToCassandraTableResourcePtrOutput() CassandraTableResourcePtrOutput
	ToCassandraTableResourcePtrOutputWithContext(context.Context) CassandraTableResourcePtrOutput
}

type cassandraTableResourcePtrType CassandraTableResourceArgs

func CassandraTableResourcePtr(v *CassandraTableResourceArgs) CassandraTableResourcePtrInput {
	return (*cassandraTableResourcePtrType)(v)
}

func (*cassandraTableResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraTableResource)(nil)).Elem()
}

func (i *cassandraTableResourcePtrType) ToCassandraTableResourcePtrOutput() CassandraTableResourcePtrOutput {
	return i.ToCassandraTableResourcePtrOutputWithContext(context.Background())
}

func (i *cassandraTableResourcePtrType) ToCassandraTableResourcePtrOutputWithContext(ctx context.Context) CassandraTableResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraTableResourcePtrOutput)
}

// Cosmos DB Cassandra table resource object
type CassandraTableResourceOutput struct{ *pulumi.OutputState }

func (CassandraTableResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraTableResource)(nil)).Elem()
}

func (o CassandraTableResourceOutput) ToCassandraTableResourceOutput() CassandraTableResourceOutput {
	return o
}

func (o CassandraTableResourceOutput) ToCassandraTableResourceOutputWithContext(ctx context.Context) CassandraTableResourceOutput {
	return o
}

func (o CassandraTableResourceOutput) ToCassandraTableResourcePtrOutput() CassandraTableResourcePtrOutput {
	return o.ToCassandraTableResourcePtrOutputWithContext(context.Background())
}

func (o CassandraTableResourceOutput) ToCassandraTableResourcePtrOutputWithContext(ctx context.Context) CassandraTableResourcePtrOutput {
	return o.ApplyT(func(v CassandraTableResource) *CassandraTableResource {
		return &v
	}).(CassandraTableResourcePtrOutput)
}

// Time to live of the Cosmos DB Cassandra table
func (o CassandraTableResourceOutput) DefaultTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CassandraTableResource) *int { return v.DefaultTtl }).(pulumi.IntPtrOutput)
}

// Name of the Cosmos DB Cassandra table
func (o CassandraTableResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v CassandraTableResource) string { return v.Id }).(pulumi.StringOutput)
}

// Schema of the Cosmos DB Cassandra table
func (o CassandraTableResourceOutput) Schema() CassandraSchemaPtrOutput {
	return o.ApplyT(func(v CassandraTableResource) *CassandraSchema { return v.Schema }).(CassandraSchemaPtrOutput)
}

type CassandraTableResourcePtrOutput struct{ *pulumi.OutputState }

func (CassandraTableResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CassandraTableResource)(nil)).Elem()
}

func (o CassandraTableResourcePtrOutput) ToCassandraTableResourcePtrOutput() CassandraTableResourcePtrOutput {
	return o
}

func (o CassandraTableResourcePtrOutput) ToCassandraTableResourcePtrOutputWithContext(ctx context.Context) CassandraTableResourcePtrOutput {
	return o
}

func (o CassandraTableResourcePtrOutput) Elem() CassandraTableResourceOutput {
	return o.ApplyT(func(v *CassandraTableResource) CassandraTableResource { return *v }).(CassandraTableResourceOutput)
}

// Time to live of the Cosmos DB Cassandra table
func (o CassandraTableResourcePtrOutput) DefaultTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CassandraTableResource) *int {
		if v == nil {
			return nil
		}
		return v.DefaultTtl
	}).(pulumi.IntPtrOutput)
}

// Name of the Cosmos DB Cassandra table
func (o CassandraTableResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CassandraTableResource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Schema of the Cosmos DB Cassandra table
func (o CassandraTableResourcePtrOutput) Schema() CassandraSchemaPtrOutput {
	return o.ApplyT(func(v *CassandraTableResource) *CassandraSchema {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(CassandraSchemaPtrOutput)
}

// Cosmos DB Cassandra table cluster key
type ClusterKey struct {
	// Name of the Cosmos DB Cassandra table cluster key
	Name *string `pulumi:"name"`
	// Order of the Cosmos DB Cassandra table cluster key, only support "Asc" and "Desc"
	OrderBy *string `pulumi:"orderBy"`
}

// ClusterKeyInput is an input type that accepts ClusterKeyArgs and ClusterKeyOutput values.
// You can construct a concrete instance of `ClusterKeyInput` via:
//
//          ClusterKeyArgs{...}
type ClusterKeyInput interface {
	pulumi.Input

	ToClusterKeyOutput() ClusterKeyOutput
	ToClusterKeyOutputWithContext(context.Context) ClusterKeyOutput
}

// Cosmos DB Cassandra table cluster key
type ClusterKeyArgs struct {
	// Name of the Cosmos DB Cassandra table cluster key
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Order of the Cosmos DB Cassandra table cluster key, only support "Asc" and "Desc"
	OrderBy pulumi.StringPtrInput `pulumi:"orderBy"`
}

func (ClusterKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterKey)(nil)).Elem()
}

func (i ClusterKeyArgs) ToClusterKeyOutput() ClusterKeyOutput {
	return i.ToClusterKeyOutputWithContext(context.Background())
}

func (i ClusterKeyArgs) ToClusterKeyOutputWithContext(ctx context.Context) ClusterKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterKeyOutput)
}

// ClusterKeyArrayInput is an input type that accepts ClusterKeyArray and ClusterKeyArrayOutput values.
// You can construct a concrete instance of `ClusterKeyArrayInput` via:
//
//          ClusterKeyArray{ ClusterKeyArgs{...} }
type ClusterKeyArrayInput interface {
	pulumi.Input

	ToClusterKeyArrayOutput() ClusterKeyArrayOutput
	ToClusterKeyArrayOutputWithContext(context.Context) ClusterKeyArrayOutput
}

type ClusterKeyArray []ClusterKeyInput

func (ClusterKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterKey)(nil)).Elem()
}

func (i ClusterKeyArray) ToClusterKeyArrayOutput() ClusterKeyArrayOutput {
	return i.ToClusterKeyArrayOutputWithContext(context.Background())
}

func (i ClusterKeyArray) ToClusterKeyArrayOutputWithContext(ctx context.Context) ClusterKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterKeyArrayOutput)
}

// Cosmos DB Cassandra table cluster key
type ClusterKeyOutput struct{ *pulumi.OutputState }

func (ClusterKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterKey)(nil)).Elem()
}

func (o ClusterKeyOutput) ToClusterKeyOutput() ClusterKeyOutput {
	return o
}

func (o ClusterKeyOutput) ToClusterKeyOutputWithContext(ctx context.Context) ClusterKeyOutput {
	return o
}

// Name of the Cosmos DB Cassandra table cluster key
func (o ClusterKeyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterKey) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Order of the Cosmos DB Cassandra table cluster key, only support "Asc" and "Desc"
func (o ClusterKeyOutput) OrderBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterKey) *string { return v.OrderBy }).(pulumi.StringPtrOutput)
}

type ClusterKeyArrayOutput struct{ *pulumi.OutputState }

func (ClusterKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterKey)(nil)).Elem()
}

func (o ClusterKeyArrayOutput) ToClusterKeyArrayOutput() ClusterKeyArrayOutput {
	return o
}

func (o ClusterKeyArrayOutput) ToClusterKeyArrayOutputWithContext(ctx context.Context) ClusterKeyArrayOutput {
	return o
}

func (o ClusterKeyArrayOutput) Index(i pulumi.IntInput) ClusterKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterKey {
		return vs[0].([]ClusterKey)[vs[1].(int)]
	}).(ClusterKeyOutput)
}

// Cosmos DB Cassandra table column
type Column struct {
	// Name of the Cosmos DB Cassandra table column
	Name *string `pulumi:"name"`
	// Type of the Cosmos DB Cassandra table column
	Type *string `pulumi:"type"`
}

// ColumnInput is an input type that accepts ColumnArgs and ColumnOutput values.
// You can construct a concrete instance of `ColumnInput` via:
//
//          ColumnArgs{...}
type ColumnInput interface {
	pulumi.Input

	ToColumnOutput() ColumnOutput
	ToColumnOutputWithContext(context.Context) ColumnOutput
}

// Cosmos DB Cassandra table column
type ColumnArgs struct {
	// Name of the Cosmos DB Cassandra table column
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Type of the Cosmos DB Cassandra table column
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Column)(nil)).Elem()
}

func (i ColumnArgs) ToColumnOutput() ColumnOutput {
	return i.ToColumnOutputWithContext(context.Background())
}

func (i ColumnArgs) ToColumnOutputWithContext(ctx context.Context) ColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColumnOutput)
}

// ColumnArrayInput is an input type that accepts ColumnArray and ColumnArrayOutput values.
// You can construct a concrete instance of `ColumnArrayInput` via:
//
//          ColumnArray{ ColumnArgs{...} }
type ColumnArrayInput interface {
	pulumi.Input

	ToColumnArrayOutput() ColumnArrayOutput
	ToColumnArrayOutputWithContext(context.Context) ColumnArrayOutput
}

type ColumnArray []ColumnInput

func (ColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Column)(nil)).Elem()
}

func (i ColumnArray) ToColumnArrayOutput() ColumnArrayOutput {
	return i.ToColumnArrayOutputWithContext(context.Background())
}

func (i ColumnArray) ToColumnArrayOutputWithContext(ctx context.Context) ColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColumnArrayOutput)
}

// Cosmos DB Cassandra table column
type ColumnOutput struct{ *pulumi.OutputState }

func (ColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Column)(nil)).Elem()
}

func (o ColumnOutput) ToColumnOutput() ColumnOutput {
	return o
}

func (o ColumnOutput) ToColumnOutputWithContext(ctx context.Context) ColumnOutput {
	return o
}

// Name of the Cosmos DB Cassandra table column
func (o ColumnOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Column) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type of the Cosmos DB Cassandra table column
func (o ColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Column) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ColumnArrayOutput struct{ *pulumi.OutputState }

func (ColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Column)(nil)).Elem()
}

func (o ColumnArrayOutput) ToColumnArrayOutput() ColumnArrayOutput {
	return o
}

func (o ColumnArrayOutput) ToColumnArrayOutputWithContext(ctx context.Context) ColumnArrayOutput {
	return o
}

func (o ColumnArrayOutput) Index(i pulumi.IntInput) ColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Column {
		return vs[0].([]Column)[vs[1].(int)]
	}).(ColumnOutput)
}

// List of composite path
type CompositePathList struct {
}

// CompositePathListInput is an input type that accepts CompositePathListArgs and CompositePathListOutput values.
// You can construct a concrete instance of `CompositePathListInput` via:
//
//          CompositePathListArgs{...}
type CompositePathListInput interface {
	pulumi.Input

	ToCompositePathListOutput() CompositePathListOutput
	ToCompositePathListOutputWithContext(context.Context) CompositePathListOutput
}

// List of composite path
type CompositePathListArgs struct {
}

func (CompositePathListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositePathList)(nil)).Elem()
}

func (i CompositePathListArgs) ToCompositePathListOutput() CompositePathListOutput {
	return i.ToCompositePathListOutputWithContext(context.Background())
}

func (i CompositePathListArgs) ToCompositePathListOutputWithContext(ctx context.Context) CompositePathListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositePathListOutput)
}

// CompositePathListArrayInput is an input type that accepts CompositePathListArray and CompositePathListArrayOutput values.
// You can construct a concrete instance of `CompositePathListArrayInput` via:
//
//          CompositePathListArray{ CompositePathListArgs{...} }
type CompositePathListArrayInput interface {
	pulumi.Input

	ToCompositePathListArrayOutput() CompositePathListArrayOutput
	ToCompositePathListArrayOutputWithContext(context.Context) CompositePathListArrayOutput
}

type CompositePathListArray []CompositePathListInput

func (CompositePathListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CompositePathList)(nil)).Elem()
}

func (i CompositePathListArray) ToCompositePathListArrayOutput() CompositePathListArrayOutput {
	return i.ToCompositePathListArrayOutputWithContext(context.Background())
}

func (i CompositePathListArray) ToCompositePathListArrayOutputWithContext(ctx context.Context) CompositePathListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompositePathListArrayOutput)
}

// List of composite path
type CompositePathListOutput struct{ *pulumi.OutputState }

func (CompositePathListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompositePathList)(nil)).Elem()
}

func (o CompositePathListOutput) ToCompositePathListOutput() CompositePathListOutput {
	return o
}

func (o CompositePathListOutput) ToCompositePathListOutputWithContext(ctx context.Context) CompositePathListOutput {
	return o
}

type CompositePathListArrayOutput struct{ *pulumi.OutputState }

func (CompositePathListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CompositePathList)(nil)).Elem()
}

func (o CompositePathListArrayOutput) ToCompositePathListArrayOutput() CompositePathListArrayOutput {
	return o
}

func (o CompositePathListArrayOutput) ToCompositePathListArrayOutputWithContext(ctx context.Context) CompositePathListArrayOutput {
	return o
}

func (o CompositePathListArrayOutput) Index(i pulumi.IntInput) CompositePathListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CompositePathList {
		return vs[0].([]CompositePathList)[vs[1].(int)]
	}).(CompositePathListOutput)
}

// The conflict resolution policy for the container.
type ConflictResolutionPolicy struct {
	// The conflict resolution path in the case of LastWriterWins mode.
	ConflictResolutionPath *string `pulumi:"conflictResolutionPath"`
	// The procedure to resolve conflicts in the case of custom mode.
	ConflictResolutionProcedure *string `pulumi:"conflictResolutionProcedure"`
	// Indicates the conflict resolution mode.
	Mode *string `pulumi:"mode"`
}

// ConflictResolutionPolicyInput is an input type that accepts ConflictResolutionPolicyArgs and ConflictResolutionPolicyOutput values.
// You can construct a concrete instance of `ConflictResolutionPolicyInput` via:
//
//          ConflictResolutionPolicyArgs{...}
type ConflictResolutionPolicyInput interface {
	pulumi.Input

	ToConflictResolutionPolicyOutput() ConflictResolutionPolicyOutput
	ToConflictResolutionPolicyOutputWithContext(context.Context) ConflictResolutionPolicyOutput
}

// The conflict resolution policy for the container.
type ConflictResolutionPolicyArgs struct {
	// The conflict resolution path in the case of LastWriterWins mode.
	ConflictResolutionPath pulumi.StringPtrInput `pulumi:"conflictResolutionPath"`
	// The procedure to resolve conflicts in the case of custom mode.
	ConflictResolutionProcedure pulumi.StringPtrInput `pulumi:"conflictResolutionProcedure"`
	// Indicates the conflict resolution mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (ConflictResolutionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConflictResolutionPolicy)(nil)).Elem()
}

func (i ConflictResolutionPolicyArgs) ToConflictResolutionPolicyOutput() ConflictResolutionPolicyOutput {
	return i.ToConflictResolutionPolicyOutputWithContext(context.Background())
}

func (i ConflictResolutionPolicyArgs) ToConflictResolutionPolicyOutputWithContext(ctx context.Context) ConflictResolutionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConflictResolutionPolicyOutput)
}

func (i ConflictResolutionPolicyArgs) ToConflictResolutionPolicyPtrOutput() ConflictResolutionPolicyPtrOutput {
	return i.ToConflictResolutionPolicyPtrOutputWithContext(context.Background())
}

func (i ConflictResolutionPolicyArgs) ToConflictResolutionPolicyPtrOutputWithContext(ctx context.Context) ConflictResolutionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConflictResolutionPolicyOutput).ToConflictResolutionPolicyPtrOutputWithContext(ctx)
}

// ConflictResolutionPolicyPtrInput is an input type that accepts ConflictResolutionPolicyArgs, ConflictResolutionPolicyPtr and ConflictResolutionPolicyPtrOutput values.
// You can construct a concrete instance of `ConflictResolutionPolicyPtrInput` via:
//
//          ConflictResolutionPolicyArgs{...}
//
//  or:
//
//          nil
type ConflictResolutionPolicyPtrInput interface {
	pulumi.Input

	ToConflictResolutionPolicyPtrOutput() ConflictResolutionPolicyPtrOutput
	ToConflictResolutionPolicyPtrOutputWithContext(context.Context) ConflictResolutionPolicyPtrOutput
}

type conflictResolutionPolicyPtrType ConflictResolutionPolicyArgs

func ConflictResolutionPolicyPtr(v *ConflictResolutionPolicyArgs) ConflictResolutionPolicyPtrInput {
	return (*conflictResolutionPolicyPtrType)(v)
}

func (*conflictResolutionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConflictResolutionPolicy)(nil)).Elem()
}

func (i *conflictResolutionPolicyPtrType) ToConflictResolutionPolicyPtrOutput() ConflictResolutionPolicyPtrOutput {
	return i.ToConflictResolutionPolicyPtrOutputWithContext(context.Background())
}

func (i *conflictResolutionPolicyPtrType) ToConflictResolutionPolicyPtrOutputWithContext(ctx context.Context) ConflictResolutionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConflictResolutionPolicyPtrOutput)
}

// The conflict resolution policy for the container.
type ConflictResolutionPolicyOutput struct{ *pulumi.OutputState }

func (ConflictResolutionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConflictResolutionPolicy)(nil)).Elem()
}

func (o ConflictResolutionPolicyOutput) ToConflictResolutionPolicyOutput() ConflictResolutionPolicyOutput {
	return o
}

func (o ConflictResolutionPolicyOutput) ToConflictResolutionPolicyOutputWithContext(ctx context.Context) ConflictResolutionPolicyOutput {
	return o
}

func (o ConflictResolutionPolicyOutput) ToConflictResolutionPolicyPtrOutput() ConflictResolutionPolicyPtrOutput {
	return o.ToConflictResolutionPolicyPtrOutputWithContext(context.Background())
}

func (o ConflictResolutionPolicyOutput) ToConflictResolutionPolicyPtrOutputWithContext(ctx context.Context) ConflictResolutionPolicyPtrOutput {
	return o.ApplyT(func(v ConflictResolutionPolicy) *ConflictResolutionPolicy {
		return &v
	}).(ConflictResolutionPolicyPtrOutput)
}

// The conflict resolution path in the case of LastWriterWins mode.
func (o ConflictResolutionPolicyOutput) ConflictResolutionPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConflictResolutionPolicy) *string { return v.ConflictResolutionPath }).(pulumi.StringPtrOutput)
}

// The procedure to resolve conflicts in the case of custom mode.
func (o ConflictResolutionPolicyOutput) ConflictResolutionProcedure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConflictResolutionPolicy) *string { return v.ConflictResolutionProcedure }).(pulumi.StringPtrOutput)
}

// Indicates the conflict resolution mode.
func (o ConflictResolutionPolicyOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConflictResolutionPolicy) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type ConflictResolutionPolicyPtrOutput struct{ *pulumi.OutputState }

func (ConflictResolutionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConflictResolutionPolicy)(nil)).Elem()
}

func (o ConflictResolutionPolicyPtrOutput) ToConflictResolutionPolicyPtrOutput() ConflictResolutionPolicyPtrOutput {
	return o
}

func (o ConflictResolutionPolicyPtrOutput) ToConflictResolutionPolicyPtrOutputWithContext(ctx context.Context) ConflictResolutionPolicyPtrOutput {
	return o
}

func (o ConflictResolutionPolicyPtrOutput) Elem() ConflictResolutionPolicyOutput {
	return o.ApplyT(func(v *ConflictResolutionPolicy) ConflictResolutionPolicy { return *v }).(ConflictResolutionPolicyOutput)
}

// The conflict resolution path in the case of LastWriterWins mode.
func (o ConflictResolutionPolicyPtrOutput) ConflictResolutionPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConflictResolutionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ConflictResolutionPath
	}).(pulumi.StringPtrOutput)
}

// The procedure to resolve conflicts in the case of custom mode.
func (o ConflictResolutionPolicyPtrOutput) ConflictResolutionProcedure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConflictResolutionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ConflictResolutionProcedure
	}).(pulumi.StringPtrOutput)
}

// Indicates the conflict resolution mode.
func (o ConflictResolutionPolicyPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConflictResolutionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// The consistency policy for the Cosmos DB database account.
type ConsistencyPolicy struct {
	// The default consistency level and configuration settings of the Cosmos DB account.
	DefaultConsistencyLevel string `pulumi:"defaultConsistencyLevel"`
	// When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
	MaxIntervalInSeconds *int `pulumi:"maxIntervalInSeconds"`
	// When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
	MaxStalenessPrefix *int `pulumi:"maxStalenessPrefix"`
}

// ConsistencyPolicyInput is an input type that accepts ConsistencyPolicyArgs and ConsistencyPolicyOutput values.
// You can construct a concrete instance of `ConsistencyPolicyInput` via:
//
//          ConsistencyPolicyArgs{...}
type ConsistencyPolicyInput interface {
	pulumi.Input

	ToConsistencyPolicyOutput() ConsistencyPolicyOutput
	ToConsistencyPolicyOutputWithContext(context.Context) ConsistencyPolicyOutput
}

// The consistency policy for the Cosmos DB database account.
type ConsistencyPolicyArgs struct {
	// The default consistency level and configuration settings of the Cosmos DB account.
	DefaultConsistencyLevel pulumi.StringInput `pulumi:"defaultConsistencyLevel"`
	// When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
	MaxIntervalInSeconds pulumi.IntPtrInput `pulumi:"maxIntervalInSeconds"`
	// When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
	MaxStalenessPrefix pulumi.IntPtrInput `pulumi:"maxStalenessPrefix"`
}

func (ConsistencyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsistencyPolicy)(nil)).Elem()
}

func (i ConsistencyPolicyArgs) ToConsistencyPolicyOutput() ConsistencyPolicyOutput {
	return i.ToConsistencyPolicyOutputWithContext(context.Background())
}

func (i ConsistencyPolicyArgs) ToConsistencyPolicyOutputWithContext(ctx context.Context) ConsistencyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistencyPolicyOutput)
}

func (i ConsistencyPolicyArgs) ToConsistencyPolicyPtrOutput() ConsistencyPolicyPtrOutput {
	return i.ToConsistencyPolicyPtrOutputWithContext(context.Background())
}

func (i ConsistencyPolicyArgs) ToConsistencyPolicyPtrOutputWithContext(ctx context.Context) ConsistencyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistencyPolicyOutput).ToConsistencyPolicyPtrOutputWithContext(ctx)
}

// ConsistencyPolicyPtrInput is an input type that accepts ConsistencyPolicyArgs, ConsistencyPolicyPtr and ConsistencyPolicyPtrOutput values.
// You can construct a concrete instance of `ConsistencyPolicyPtrInput` via:
//
//          ConsistencyPolicyArgs{...}
//
//  or:
//
//          nil
type ConsistencyPolicyPtrInput interface {
	pulumi.Input

	ToConsistencyPolicyPtrOutput() ConsistencyPolicyPtrOutput
	ToConsistencyPolicyPtrOutputWithContext(context.Context) ConsistencyPolicyPtrOutput
}

type consistencyPolicyPtrType ConsistencyPolicyArgs

func ConsistencyPolicyPtr(v *ConsistencyPolicyArgs) ConsistencyPolicyPtrInput {
	return (*consistencyPolicyPtrType)(v)
}

func (*consistencyPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsistencyPolicy)(nil)).Elem()
}

func (i *consistencyPolicyPtrType) ToConsistencyPolicyPtrOutput() ConsistencyPolicyPtrOutput {
	return i.ToConsistencyPolicyPtrOutputWithContext(context.Background())
}

func (i *consistencyPolicyPtrType) ToConsistencyPolicyPtrOutputWithContext(ctx context.Context) ConsistencyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistencyPolicyPtrOutput)
}

// The consistency policy for the Cosmos DB database account.
type ConsistencyPolicyOutput struct{ *pulumi.OutputState }

func (ConsistencyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsistencyPolicy)(nil)).Elem()
}

func (o ConsistencyPolicyOutput) ToConsistencyPolicyOutput() ConsistencyPolicyOutput {
	return o
}

func (o ConsistencyPolicyOutput) ToConsistencyPolicyOutputWithContext(ctx context.Context) ConsistencyPolicyOutput {
	return o
}

func (o ConsistencyPolicyOutput) ToConsistencyPolicyPtrOutput() ConsistencyPolicyPtrOutput {
	return o.ToConsistencyPolicyPtrOutputWithContext(context.Background())
}

func (o ConsistencyPolicyOutput) ToConsistencyPolicyPtrOutputWithContext(ctx context.Context) ConsistencyPolicyPtrOutput {
	return o.ApplyT(func(v ConsistencyPolicy) *ConsistencyPolicy {
		return &v
	}).(ConsistencyPolicyPtrOutput)
}

// The default consistency level and configuration settings of the Cosmos DB account.
func (o ConsistencyPolicyOutput) DefaultConsistencyLevel() pulumi.StringOutput {
	return o.ApplyT(func(v ConsistencyPolicy) string { return v.DefaultConsistencyLevel }).(pulumi.StringOutput)
}

// When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
func (o ConsistencyPolicyOutput) MaxIntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConsistencyPolicy) *int { return v.MaxIntervalInSeconds }).(pulumi.IntPtrOutput)
}

// When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
func (o ConsistencyPolicyOutput) MaxStalenessPrefix() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConsistencyPolicy) *int { return v.MaxStalenessPrefix }).(pulumi.IntPtrOutput)
}

type ConsistencyPolicyPtrOutput struct{ *pulumi.OutputState }

func (ConsistencyPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsistencyPolicy)(nil)).Elem()
}

func (o ConsistencyPolicyPtrOutput) ToConsistencyPolicyPtrOutput() ConsistencyPolicyPtrOutput {
	return o
}

func (o ConsistencyPolicyPtrOutput) ToConsistencyPolicyPtrOutputWithContext(ctx context.Context) ConsistencyPolicyPtrOutput {
	return o
}

func (o ConsistencyPolicyPtrOutput) Elem() ConsistencyPolicyOutput {
	return o.ApplyT(func(v *ConsistencyPolicy) ConsistencyPolicy { return *v }).(ConsistencyPolicyOutput)
}

// The default consistency level and configuration settings of the Cosmos DB account.
func (o ConsistencyPolicyPtrOutput) DefaultConsistencyLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsistencyPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.DefaultConsistencyLevel
	}).(pulumi.StringPtrOutput)
}

// When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
func (o ConsistencyPolicyPtrOutput) MaxIntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConsistencyPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxIntervalInSeconds
	}).(pulumi.IntPtrOutput)
}

// When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
func (o ConsistencyPolicyPtrOutput) MaxStalenessPrefix() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConsistencyPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxStalenessPrefix
	}).(pulumi.IntPtrOutput)
}

// The consistency policy for the Cosmos DB database account.
type ConsistencyPolicyResponse struct {
	// The default consistency level and configuration settings of the Cosmos DB account.
	DefaultConsistencyLevel string `pulumi:"defaultConsistencyLevel"`
	// When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
	MaxIntervalInSeconds *int `pulumi:"maxIntervalInSeconds"`
	// When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
	MaxStalenessPrefix *int `pulumi:"maxStalenessPrefix"`
}

// ConsistencyPolicyResponseInput is an input type that accepts ConsistencyPolicyResponseArgs and ConsistencyPolicyResponseOutput values.
// You can construct a concrete instance of `ConsistencyPolicyResponseInput` via:
//
//          ConsistencyPolicyResponseArgs{...}
type ConsistencyPolicyResponseInput interface {
	pulumi.Input

	ToConsistencyPolicyResponseOutput() ConsistencyPolicyResponseOutput
	ToConsistencyPolicyResponseOutputWithContext(context.Context) ConsistencyPolicyResponseOutput
}

// The consistency policy for the Cosmos DB database account.
type ConsistencyPolicyResponseArgs struct {
	// The default consistency level and configuration settings of the Cosmos DB account.
	DefaultConsistencyLevel pulumi.StringInput `pulumi:"defaultConsistencyLevel"`
	// When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
	MaxIntervalInSeconds pulumi.IntPtrInput `pulumi:"maxIntervalInSeconds"`
	// When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
	MaxStalenessPrefix pulumi.IntPtrInput `pulumi:"maxStalenessPrefix"`
}

func (ConsistencyPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsistencyPolicyResponse)(nil)).Elem()
}

func (i ConsistencyPolicyResponseArgs) ToConsistencyPolicyResponseOutput() ConsistencyPolicyResponseOutput {
	return i.ToConsistencyPolicyResponseOutputWithContext(context.Background())
}

func (i ConsistencyPolicyResponseArgs) ToConsistencyPolicyResponseOutputWithContext(ctx context.Context) ConsistencyPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistencyPolicyResponseOutput)
}

func (i ConsistencyPolicyResponseArgs) ToConsistencyPolicyResponsePtrOutput() ConsistencyPolicyResponsePtrOutput {
	return i.ToConsistencyPolicyResponsePtrOutputWithContext(context.Background())
}

func (i ConsistencyPolicyResponseArgs) ToConsistencyPolicyResponsePtrOutputWithContext(ctx context.Context) ConsistencyPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistencyPolicyResponseOutput).ToConsistencyPolicyResponsePtrOutputWithContext(ctx)
}

// ConsistencyPolicyResponsePtrInput is an input type that accepts ConsistencyPolicyResponseArgs, ConsistencyPolicyResponsePtr and ConsistencyPolicyResponsePtrOutput values.
// You can construct a concrete instance of `ConsistencyPolicyResponsePtrInput` via:
//
//          ConsistencyPolicyResponseArgs{...}
//
//  or:
//
//          nil
type ConsistencyPolicyResponsePtrInput interface {
	pulumi.Input

	ToConsistencyPolicyResponsePtrOutput() ConsistencyPolicyResponsePtrOutput
	ToConsistencyPolicyResponsePtrOutputWithContext(context.Context) ConsistencyPolicyResponsePtrOutput
}

type consistencyPolicyResponsePtrType ConsistencyPolicyResponseArgs

func ConsistencyPolicyResponsePtr(v *ConsistencyPolicyResponseArgs) ConsistencyPolicyResponsePtrInput {
	return (*consistencyPolicyResponsePtrType)(v)
}

func (*consistencyPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsistencyPolicyResponse)(nil)).Elem()
}

func (i *consistencyPolicyResponsePtrType) ToConsistencyPolicyResponsePtrOutput() ConsistencyPolicyResponsePtrOutput {
	return i.ToConsistencyPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *consistencyPolicyResponsePtrType) ToConsistencyPolicyResponsePtrOutputWithContext(ctx context.Context) ConsistencyPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistencyPolicyResponsePtrOutput)
}

// The consistency policy for the Cosmos DB database account.
type ConsistencyPolicyResponseOutput struct{ *pulumi.OutputState }

func (ConsistencyPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsistencyPolicyResponse)(nil)).Elem()
}

func (o ConsistencyPolicyResponseOutput) ToConsistencyPolicyResponseOutput() ConsistencyPolicyResponseOutput {
	return o
}

func (o ConsistencyPolicyResponseOutput) ToConsistencyPolicyResponseOutputWithContext(ctx context.Context) ConsistencyPolicyResponseOutput {
	return o
}

func (o ConsistencyPolicyResponseOutput) ToConsistencyPolicyResponsePtrOutput() ConsistencyPolicyResponsePtrOutput {
	return o.ToConsistencyPolicyResponsePtrOutputWithContext(context.Background())
}

func (o ConsistencyPolicyResponseOutput) ToConsistencyPolicyResponsePtrOutputWithContext(ctx context.Context) ConsistencyPolicyResponsePtrOutput {
	return o.ApplyT(func(v ConsistencyPolicyResponse) *ConsistencyPolicyResponse {
		return &v
	}).(ConsistencyPolicyResponsePtrOutput)
}

// The default consistency level and configuration settings of the Cosmos DB account.
func (o ConsistencyPolicyResponseOutput) DefaultConsistencyLevel() pulumi.StringOutput {
	return o.ApplyT(func(v ConsistencyPolicyResponse) string { return v.DefaultConsistencyLevel }).(pulumi.StringOutput)
}

// When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
func (o ConsistencyPolicyResponseOutput) MaxIntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConsistencyPolicyResponse) *int { return v.MaxIntervalInSeconds }).(pulumi.IntPtrOutput)
}

// When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
func (o ConsistencyPolicyResponseOutput) MaxStalenessPrefix() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConsistencyPolicyResponse) *int { return v.MaxStalenessPrefix }).(pulumi.IntPtrOutput)
}

type ConsistencyPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ConsistencyPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsistencyPolicyResponse)(nil)).Elem()
}

func (o ConsistencyPolicyResponsePtrOutput) ToConsistencyPolicyResponsePtrOutput() ConsistencyPolicyResponsePtrOutput {
	return o
}

func (o ConsistencyPolicyResponsePtrOutput) ToConsistencyPolicyResponsePtrOutputWithContext(ctx context.Context) ConsistencyPolicyResponsePtrOutput {
	return o
}

func (o ConsistencyPolicyResponsePtrOutput) Elem() ConsistencyPolicyResponseOutput {
	return o.ApplyT(func(v *ConsistencyPolicyResponse) ConsistencyPolicyResponse { return *v }).(ConsistencyPolicyResponseOutput)
}

// The default consistency level and configuration settings of the Cosmos DB account.
func (o ConsistencyPolicyResponsePtrOutput) DefaultConsistencyLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsistencyPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DefaultConsistencyLevel
	}).(pulumi.StringPtrOutput)
}

// When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
func (o ConsistencyPolicyResponsePtrOutput) MaxIntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConsistencyPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxIntervalInSeconds
	}).(pulumi.IntPtrOutput)
}

// When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'.
func (o ConsistencyPolicyResponsePtrOutput) MaxStalenessPrefix() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConsistencyPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxStalenessPrefix
	}).(pulumi.IntPtrOutput)
}

// The configuration of the partition key to be used for partitioning data into multiple partitions
type ContainerPartitionKey struct {
	// Indicates the kind of algorithm used for partitioning
	Kind *string `pulumi:"kind"`
	// List of paths using which data within the container can be partitioned
	Paths []string `pulumi:"paths"`
	// Indicates the version of the partition key definition
	Version *int `pulumi:"version"`
}

// ContainerPartitionKeyInput is an input type that accepts ContainerPartitionKeyArgs and ContainerPartitionKeyOutput values.
// You can construct a concrete instance of `ContainerPartitionKeyInput` via:
//
//          ContainerPartitionKeyArgs{...}
type ContainerPartitionKeyInput interface {
	pulumi.Input

	ToContainerPartitionKeyOutput() ContainerPartitionKeyOutput
	ToContainerPartitionKeyOutputWithContext(context.Context) ContainerPartitionKeyOutput
}

// The configuration of the partition key to be used for partitioning data into multiple partitions
type ContainerPartitionKeyArgs struct {
	// Indicates the kind of algorithm used for partitioning
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// List of paths using which data within the container can be partitioned
	Paths pulumi.StringArrayInput `pulumi:"paths"`
	// Indicates the version of the partition key definition
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (ContainerPartitionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPartitionKey)(nil)).Elem()
}

func (i ContainerPartitionKeyArgs) ToContainerPartitionKeyOutput() ContainerPartitionKeyOutput {
	return i.ToContainerPartitionKeyOutputWithContext(context.Background())
}

func (i ContainerPartitionKeyArgs) ToContainerPartitionKeyOutputWithContext(ctx context.Context) ContainerPartitionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPartitionKeyOutput)
}

func (i ContainerPartitionKeyArgs) ToContainerPartitionKeyPtrOutput() ContainerPartitionKeyPtrOutput {
	return i.ToContainerPartitionKeyPtrOutputWithContext(context.Background())
}

func (i ContainerPartitionKeyArgs) ToContainerPartitionKeyPtrOutputWithContext(ctx context.Context) ContainerPartitionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPartitionKeyOutput).ToContainerPartitionKeyPtrOutputWithContext(ctx)
}

// ContainerPartitionKeyPtrInput is an input type that accepts ContainerPartitionKeyArgs, ContainerPartitionKeyPtr and ContainerPartitionKeyPtrOutput values.
// You can construct a concrete instance of `ContainerPartitionKeyPtrInput` via:
//
//          ContainerPartitionKeyArgs{...}
//
//  or:
//
//          nil
type ContainerPartitionKeyPtrInput interface {
	pulumi.Input

	ToContainerPartitionKeyPtrOutput() ContainerPartitionKeyPtrOutput
	ToContainerPartitionKeyPtrOutputWithContext(context.Context) ContainerPartitionKeyPtrOutput
}

type containerPartitionKeyPtrType ContainerPartitionKeyArgs

func ContainerPartitionKeyPtr(v *ContainerPartitionKeyArgs) ContainerPartitionKeyPtrInput {
	return (*containerPartitionKeyPtrType)(v)
}

func (*containerPartitionKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerPartitionKey)(nil)).Elem()
}

func (i *containerPartitionKeyPtrType) ToContainerPartitionKeyPtrOutput() ContainerPartitionKeyPtrOutput {
	return i.ToContainerPartitionKeyPtrOutputWithContext(context.Background())
}

func (i *containerPartitionKeyPtrType) ToContainerPartitionKeyPtrOutputWithContext(ctx context.Context) ContainerPartitionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPartitionKeyPtrOutput)
}

// The configuration of the partition key to be used for partitioning data into multiple partitions
type ContainerPartitionKeyOutput struct{ *pulumi.OutputState }

func (ContainerPartitionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPartitionKey)(nil)).Elem()
}

func (o ContainerPartitionKeyOutput) ToContainerPartitionKeyOutput() ContainerPartitionKeyOutput {
	return o
}

func (o ContainerPartitionKeyOutput) ToContainerPartitionKeyOutputWithContext(ctx context.Context) ContainerPartitionKeyOutput {
	return o
}

func (o ContainerPartitionKeyOutput) ToContainerPartitionKeyPtrOutput() ContainerPartitionKeyPtrOutput {
	return o.ToContainerPartitionKeyPtrOutputWithContext(context.Background())
}

func (o ContainerPartitionKeyOutput) ToContainerPartitionKeyPtrOutputWithContext(ctx context.Context) ContainerPartitionKeyPtrOutput {
	return o.ApplyT(func(v ContainerPartitionKey) *ContainerPartitionKey {
		return &v
	}).(ContainerPartitionKeyPtrOutput)
}

// Indicates the kind of algorithm used for partitioning
func (o ContainerPartitionKeyOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPartitionKey) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// List of paths using which data within the container can be partitioned
func (o ContainerPartitionKeyOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerPartitionKey) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

// Indicates the version of the partition key definition
func (o ContainerPartitionKeyOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerPartitionKey) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type ContainerPartitionKeyPtrOutput struct{ *pulumi.OutputState }

func (ContainerPartitionKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerPartitionKey)(nil)).Elem()
}

func (o ContainerPartitionKeyPtrOutput) ToContainerPartitionKeyPtrOutput() ContainerPartitionKeyPtrOutput {
	return o
}

func (o ContainerPartitionKeyPtrOutput) ToContainerPartitionKeyPtrOutputWithContext(ctx context.Context) ContainerPartitionKeyPtrOutput {
	return o
}

func (o ContainerPartitionKeyPtrOutput) Elem() ContainerPartitionKeyOutput {
	return o.ApplyT(func(v *ContainerPartitionKey) ContainerPartitionKey { return *v }).(ContainerPartitionKeyOutput)
}

// Indicates the kind of algorithm used for partitioning
func (o ContainerPartitionKeyPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerPartitionKey) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// List of paths using which data within the container can be partitioned
func (o ContainerPartitionKeyPtrOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerPartitionKey) []string {
		if v == nil {
			return nil
		}
		return v.Paths
	}).(pulumi.StringArrayOutput)
}

// Indicates the version of the partition key definition
func (o ContainerPartitionKeyPtrOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerPartitionKey) *int {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.IntPtrOutput)
}

// CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and "Throughput"
type CreateUpdateOptions struct {
}

// CreateUpdateOptionsInput is an input type that accepts CreateUpdateOptionsArgs and CreateUpdateOptionsOutput values.
// You can construct a concrete instance of `CreateUpdateOptionsInput` via:
//
//          CreateUpdateOptionsArgs{...}
type CreateUpdateOptionsInput interface {
	pulumi.Input

	ToCreateUpdateOptionsOutput() CreateUpdateOptionsOutput
	ToCreateUpdateOptionsOutputWithContext(context.Context) CreateUpdateOptionsOutput
}

// CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and "Throughput"
type CreateUpdateOptionsArgs struct {
}

func (CreateUpdateOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CreateUpdateOptions)(nil)).Elem()
}

func (i CreateUpdateOptionsArgs) ToCreateUpdateOptionsOutput() CreateUpdateOptionsOutput {
	return i.ToCreateUpdateOptionsOutputWithContext(context.Background())
}

func (i CreateUpdateOptionsArgs) ToCreateUpdateOptionsOutputWithContext(ctx context.Context) CreateUpdateOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreateUpdateOptionsOutput)
}

func (i CreateUpdateOptionsArgs) ToCreateUpdateOptionsPtrOutput() CreateUpdateOptionsPtrOutput {
	return i.ToCreateUpdateOptionsPtrOutputWithContext(context.Background())
}

func (i CreateUpdateOptionsArgs) ToCreateUpdateOptionsPtrOutputWithContext(ctx context.Context) CreateUpdateOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreateUpdateOptionsOutput).ToCreateUpdateOptionsPtrOutputWithContext(ctx)
}

// CreateUpdateOptionsPtrInput is an input type that accepts CreateUpdateOptionsArgs, CreateUpdateOptionsPtr and CreateUpdateOptionsPtrOutput values.
// You can construct a concrete instance of `CreateUpdateOptionsPtrInput` via:
//
//          CreateUpdateOptionsArgs{...}
//
//  or:
//
//          nil
type CreateUpdateOptionsPtrInput interface {
	pulumi.Input

	ToCreateUpdateOptionsPtrOutput() CreateUpdateOptionsPtrOutput
	ToCreateUpdateOptionsPtrOutputWithContext(context.Context) CreateUpdateOptionsPtrOutput
}

type createUpdateOptionsPtrType CreateUpdateOptionsArgs

func CreateUpdateOptionsPtr(v *CreateUpdateOptionsArgs) CreateUpdateOptionsPtrInput {
	return (*createUpdateOptionsPtrType)(v)
}

func (*createUpdateOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CreateUpdateOptions)(nil)).Elem()
}

func (i *createUpdateOptionsPtrType) ToCreateUpdateOptionsPtrOutput() CreateUpdateOptionsPtrOutput {
	return i.ToCreateUpdateOptionsPtrOutputWithContext(context.Background())
}

func (i *createUpdateOptionsPtrType) ToCreateUpdateOptionsPtrOutputWithContext(ctx context.Context) CreateUpdateOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreateUpdateOptionsPtrOutput)
}

// CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and "Throughput"
type CreateUpdateOptionsOutput struct{ *pulumi.OutputState }

func (CreateUpdateOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreateUpdateOptions)(nil)).Elem()
}

func (o CreateUpdateOptionsOutput) ToCreateUpdateOptionsOutput() CreateUpdateOptionsOutput {
	return o
}

func (o CreateUpdateOptionsOutput) ToCreateUpdateOptionsOutputWithContext(ctx context.Context) CreateUpdateOptionsOutput {
	return o
}

func (o CreateUpdateOptionsOutput) ToCreateUpdateOptionsPtrOutput() CreateUpdateOptionsPtrOutput {
	return o.ToCreateUpdateOptionsPtrOutputWithContext(context.Background())
}

func (o CreateUpdateOptionsOutput) ToCreateUpdateOptionsPtrOutputWithContext(ctx context.Context) CreateUpdateOptionsPtrOutput {
	return o.ApplyT(func(v CreateUpdateOptions) *CreateUpdateOptions {
		return &v
	}).(CreateUpdateOptionsPtrOutput)
}

type CreateUpdateOptionsPtrOutput struct{ *pulumi.OutputState }

func (CreateUpdateOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CreateUpdateOptions)(nil)).Elem()
}

func (o CreateUpdateOptionsPtrOutput) ToCreateUpdateOptionsPtrOutput() CreateUpdateOptionsPtrOutput {
	return o
}

func (o CreateUpdateOptionsPtrOutput) ToCreateUpdateOptionsPtrOutputWithContext(ctx context.Context) CreateUpdateOptionsPtrOutput {
	return o
}

func (o CreateUpdateOptionsPtrOutput) Elem() CreateUpdateOptionsOutput {
	return o.ApplyT(func(v *CreateUpdateOptions) CreateUpdateOptions { return *v }).(CreateUpdateOptionsOutput)
}

// An Azure Cosmos DB database account.
type DatabaseAccountType struct {
	// Indicates the type of database account. This can only be set at database account creation.
	Kind *string `pulumi:"kind"`
	// The location of the resource group to which the resource belongs.
	Location *string `pulumi:"location"`
	// The name of the ARM resource.
	Name string `pulumi:"name"`
	// Properties for the database account.
	Properties DatabaseAccountGetPropertiesResponse `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags *TagsResponse `pulumi:"tags"`
	// The type of Azure resource.
	Type string `pulumi:"type"`
}

// DatabaseAccountTypeInput is an input type that accepts DatabaseAccountTypeArgs and DatabaseAccountTypeOutput values.
// You can construct a concrete instance of `DatabaseAccountTypeInput` via:
//
//          DatabaseAccountTypeArgs{...}
type DatabaseAccountTypeInput interface {
	pulumi.Input

	ToDatabaseAccountTypeOutput() DatabaseAccountTypeOutput
	ToDatabaseAccountTypeOutputWithContext(context.Context) DatabaseAccountTypeOutput
}

// An Azure Cosmos DB database account.
type DatabaseAccountTypeArgs struct {
	// Indicates the type of database account. This can only be set at database account creation.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The location of the resource group to which the resource belongs.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the ARM resource.
	Name pulumi.StringInput `pulumi:"name"`
	// Properties for the database account.
	Properties DatabaseAccountGetPropertiesResponseInput `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags TagsResponsePtrInput `pulumi:"tags"`
	// The type of Azure resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatabaseAccountTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseAccountType)(nil)).Elem()
}

func (i DatabaseAccountTypeArgs) ToDatabaseAccountTypeOutput() DatabaseAccountTypeOutput {
	return i.ToDatabaseAccountTypeOutputWithContext(context.Background())
}

func (i DatabaseAccountTypeArgs) ToDatabaseAccountTypeOutputWithContext(ctx context.Context) DatabaseAccountTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseAccountTypeOutput)
}

// An Azure Cosmos DB database account.
type DatabaseAccountTypeOutput struct{ *pulumi.OutputState }

func (DatabaseAccountTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseAccountType)(nil)).Elem()
}

func (o DatabaseAccountTypeOutput) ToDatabaseAccountTypeOutput() DatabaseAccountTypeOutput {
	return o
}

func (o DatabaseAccountTypeOutput) ToDatabaseAccountTypeOutputWithContext(ctx context.Context) DatabaseAccountTypeOutput {
	return o
}

// Indicates the type of database account. This can only be set at database account creation.
func (o DatabaseAccountTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseAccountType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The location of the resource group to which the resource belongs.
func (o DatabaseAccountTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseAccountType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the ARM resource.
func (o DatabaseAccountTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseAccountType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties for the database account.
func (o DatabaseAccountTypeOutput) Properties() DatabaseAccountGetPropertiesResponseOutput {
	return o.ApplyT(func(v DatabaseAccountType) DatabaseAccountGetPropertiesResponse { return v.Properties }).(DatabaseAccountGetPropertiesResponseOutput)
}

// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
func (o DatabaseAccountTypeOutput) Tags() TagsResponsePtrOutput {
	return o.ApplyT(func(v DatabaseAccountType) *TagsResponse { return v.Tags }).(TagsResponsePtrOutput)
}

// The type of Azure resource.
func (o DatabaseAccountTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseAccountType) string { return v.Type }).(pulumi.StringOutput)
}

// Connection string for the Cosmos DB account
type DatabaseAccountConnectionStringResponse struct {
	// Value of the connection string
	ConnectionString string `pulumi:"connectionString"`
	// Description of the connection string
	Description string `pulumi:"description"`
}

// DatabaseAccountConnectionStringResponseInput is an input type that accepts DatabaseAccountConnectionStringResponseArgs and DatabaseAccountConnectionStringResponseOutput values.
// You can construct a concrete instance of `DatabaseAccountConnectionStringResponseInput` via:
//
//          DatabaseAccountConnectionStringResponseArgs{...}
type DatabaseAccountConnectionStringResponseInput interface {
	pulumi.Input

	ToDatabaseAccountConnectionStringResponseOutput() DatabaseAccountConnectionStringResponseOutput
	ToDatabaseAccountConnectionStringResponseOutputWithContext(context.Context) DatabaseAccountConnectionStringResponseOutput
}

// Connection string for the Cosmos DB account
type DatabaseAccountConnectionStringResponseArgs struct {
	// Value of the connection string
	ConnectionString pulumi.StringInput `pulumi:"connectionString"`
	// Description of the connection string
	Description pulumi.StringInput `pulumi:"description"`
}

func (DatabaseAccountConnectionStringResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseAccountConnectionStringResponse)(nil)).Elem()
}

func (i DatabaseAccountConnectionStringResponseArgs) ToDatabaseAccountConnectionStringResponseOutput() DatabaseAccountConnectionStringResponseOutput {
	return i.ToDatabaseAccountConnectionStringResponseOutputWithContext(context.Background())
}

func (i DatabaseAccountConnectionStringResponseArgs) ToDatabaseAccountConnectionStringResponseOutputWithContext(ctx context.Context) DatabaseAccountConnectionStringResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseAccountConnectionStringResponseOutput)
}

// DatabaseAccountConnectionStringResponseArrayInput is an input type that accepts DatabaseAccountConnectionStringResponseArray and DatabaseAccountConnectionStringResponseArrayOutput values.
// You can construct a concrete instance of `DatabaseAccountConnectionStringResponseArrayInput` via:
//
//          DatabaseAccountConnectionStringResponseArray{ DatabaseAccountConnectionStringResponseArgs{...} }
type DatabaseAccountConnectionStringResponseArrayInput interface {
	pulumi.Input

	ToDatabaseAccountConnectionStringResponseArrayOutput() DatabaseAccountConnectionStringResponseArrayOutput
	ToDatabaseAccountConnectionStringResponseArrayOutputWithContext(context.Context) DatabaseAccountConnectionStringResponseArrayOutput
}

type DatabaseAccountConnectionStringResponseArray []DatabaseAccountConnectionStringResponseInput

func (DatabaseAccountConnectionStringResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseAccountConnectionStringResponse)(nil)).Elem()
}

func (i DatabaseAccountConnectionStringResponseArray) ToDatabaseAccountConnectionStringResponseArrayOutput() DatabaseAccountConnectionStringResponseArrayOutput {
	return i.ToDatabaseAccountConnectionStringResponseArrayOutputWithContext(context.Background())
}

func (i DatabaseAccountConnectionStringResponseArray) ToDatabaseAccountConnectionStringResponseArrayOutputWithContext(ctx context.Context) DatabaseAccountConnectionStringResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseAccountConnectionStringResponseArrayOutput)
}

// Connection string for the Cosmos DB account
type DatabaseAccountConnectionStringResponseOutput struct{ *pulumi.OutputState }

func (DatabaseAccountConnectionStringResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseAccountConnectionStringResponse)(nil)).Elem()
}

func (o DatabaseAccountConnectionStringResponseOutput) ToDatabaseAccountConnectionStringResponseOutput() DatabaseAccountConnectionStringResponseOutput {
	return o
}

func (o DatabaseAccountConnectionStringResponseOutput) ToDatabaseAccountConnectionStringResponseOutputWithContext(ctx context.Context) DatabaseAccountConnectionStringResponseOutput {
	return o
}

// Value of the connection string
func (o DatabaseAccountConnectionStringResponseOutput) ConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseAccountConnectionStringResponse) string { return v.ConnectionString }).(pulumi.StringOutput)
}

// Description of the connection string
func (o DatabaseAccountConnectionStringResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseAccountConnectionStringResponse) string { return v.Description }).(pulumi.StringOutput)
}

type DatabaseAccountConnectionStringResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseAccountConnectionStringResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseAccountConnectionStringResponse)(nil)).Elem()
}

func (o DatabaseAccountConnectionStringResponseArrayOutput) ToDatabaseAccountConnectionStringResponseArrayOutput() DatabaseAccountConnectionStringResponseArrayOutput {
	return o
}

func (o DatabaseAccountConnectionStringResponseArrayOutput) ToDatabaseAccountConnectionStringResponseArrayOutputWithContext(ctx context.Context) DatabaseAccountConnectionStringResponseArrayOutput {
	return o
}

func (o DatabaseAccountConnectionStringResponseArrayOutput) Index(i pulumi.IntInput) DatabaseAccountConnectionStringResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseAccountConnectionStringResponse {
		return vs[0].([]DatabaseAccountConnectionStringResponse)[vs[1].(int)]
	}).(DatabaseAccountConnectionStringResponseOutput)
}

// Properties for the database account.
type DatabaseAccountGetPropertiesResponse struct {
	// List of Cosmos DB capabilities for the account
	Capabilities []CapabilityResponse `pulumi:"capabilities"`
	// The cassandra connector offer type for the Cosmos DB database C* account.
	ConnectorOffer *string `pulumi:"connectorOffer"`
	// The consistency policy for the Cosmos DB database account.
	ConsistencyPolicy *ConsistencyPolicyResponse `pulumi:"consistencyPolicy"`
	// The offer type for the Cosmos DB database account. Default value: Standard.
	DatabaseAccountOfferType string `pulumi:"databaseAccountOfferType"`
	// Disable write operations on metadata resources (databases, containers, throughput) via account keys
	DisableKeyBasedMetadataWriteAccess *bool `pulumi:"disableKeyBasedMetadataWriteAccess"`
	// The connection endpoint for the Cosmos DB database account.
	DocumentEndpoint string `pulumi:"documentEndpoint"`
	// Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.
	EnableAutomaticFailover *bool `pulumi:"enableAutomaticFailover"`
	// Enables the cassandra connector on the Cosmos DB C* account
	EnableCassandraConnector *bool `pulumi:"enableCassandraConnector"`
	// Enables the account to write in multiple locations
	EnableMultipleWriteLocations *bool `pulumi:"enableMultipleWriteLocations"`
	// An array that contains the regions ordered by their failover priorities.
	FailoverPolicies []FailoverPolicyResponse `pulumi:"failoverPolicies"`
	// Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.
	IpRangeFilter *string `pulumi:"ipRangeFilter"`
	// Flag to indicate whether to enable/disable Virtual Network ACL rules.
	IsVirtualNetworkFilterEnabled *bool `pulumi:"isVirtualNetworkFilterEnabled"`
	// An array that contains all of the locations enabled for the Cosmos DB account.
	Locations []LocationResponse `pulumi:"locations"`
	// The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' – the Cosmos DB account deletion failed.
	ProvisioningState *string `pulumi:"provisioningState"`
	// An array that contains of the read locations enabled for the Cosmos DB account.
	ReadLocations []LocationResponse `pulumi:"readLocations"`
	// List of Virtual Network ACL rules configured for the Cosmos DB account.
	VirtualNetworkRules []VirtualNetworkRuleResponse `pulumi:"virtualNetworkRules"`
	// An array that contains the write location for the Cosmos DB account.
	WriteLocations []LocationResponse `pulumi:"writeLocations"`
}

// DatabaseAccountGetPropertiesResponseInput is an input type that accepts DatabaseAccountGetPropertiesResponseArgs and DatabaseAccountGetPropertiesResponseOutput values.
// You can construct a concrete instance of `DatabaseAccountGetPropertiesResponseInput` via:
//
//          DatabaseAccountGetPropertiesResponseArgs{...}
type DatabaseAccountGetPropertiesResponseInput interface {
	pulumi.Input

	ToDatabaseAccountGetPropertiesResponseOutput() DatabaseAccountGetPropertiesResponseOutput
	ToDatabaseAccountGetPropertiesResponseOutputWithContext(context.Context) DatabaseAccountGetPropertiesResponseOutput
}

// Properties for the database account.
type DatabaseAccountGetPropertiesResponseArgs struct {
	// List of Cosmos DB capabilities for the account
	Capabilities CapabilityResponseArrayInput `pulumi:"capabilities"`
	// The cassandra connector offer type for the Cosmos DB database C* account.
	ConnectorOffer pulumi.StringPtrInput `pulumi:"connectorOffer"`
	// The consistency policy for the Cosmos DB database account.
	ConsistencyPolicy ConsistencyPolicyResponsePtrInput `pulumi:"consistencyPolicy"`
	// The offer type for the Cosmos DB database account. Default value: Standard.
	DatabaseAccountOfferType pulumi.StringInput `pulumi:"databaseAccountOfferType"`
	// Disable write operations on metadata resources (databases, containers, throughput) via account keys
	DisableKeyBasedMetadataWriteAccess pulumi.BoolPtrInput `pulumi:"disableKeyBasedMetadataWriteAccess"`
	// The connection endpoint for the Cosmos DB database account.
	DocumentEndpoint pulumi.StringInput `pulumi:"documentEndpoint"`
	// Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.
	EnableAutomaticFailover pulumi.BoolPtrInput `pulumi:"enableAutomaticFailover"`
	// Enables the cassandra connector on the Cosmos DB C* account
	EnableCassandraConnector pulumi.BoolPtrInput `pulumi:"enableCassandraConnector"`
	// Enables the account to write in multiple locations
	EnableMultipleWriteLocations pulumi.BoolPtrInput `pulumi:"enableMultipleWriteLocations"`
	// An array that contains the regions ordered by their failover priorities.
	FailoverPolicies FailoverPolicyResponseArrayInput `pulumi:"failoverPolicies"`
	// Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.
	IpRangeFilter pulumi.StringPtrInput `pulumi:"ipRangeFilter"`
	// Flag to indicate whether to enable/disable Virtual Network ACL rules.
	IsVirtualNetworkFilterEnabled pulumi.BoolPtrInput `pulumi:"isVirtualNetworkFilterEnabled"`
	// An array that contains all of the locations enabled for the Cosmos DB account.
	Locations LocationResponseArrayInput `pulumi:"locations"`
	// The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' – the Cosmos DB account deletion failed.
	ProvisioningState pulumi.StringPtrInput `pulumi:"provisioningState"`
	// An array that contains of the read locations enabled for the Cosmos DB account.
	ReadLocations LocationResponseArrayInput `pulumi:"readLocations"`
	// List of Virtual Network ACL rules configured for the Cosmos DB account.
	VirtualNetworkRules VirtualNetworkRuleResponseArrayInput `pulumi:"virtualNetworkRules"`
	// An array that contains the write location for the Cosmos DB account.
	WriteLocations LocationResponseArrayInput `pulumi:"writeLocations"`
}

func (DatabaseAccountGetPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseAccountGetPropertiesResponse)(nil)).Elem()
}

func (i DatabaseAccountGetPropertiesResponseArgs) ToDatabaseAccountGetPropertiesResponseOutput() DatabaseAccountGetPropertiesResponseOutput {
	return i.ToDatabaseAccountGetPropertiesResponseOutputWithContext(context.Background())
}

func (i DatabaseAccountGetPropertiesResponseArgs) ToDatabaseAccountGetPropertiesResponseOutputWithContext(ctx context.Context) DatabaseAccountGetPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseAccountGetPropertiesResponseOutput)
}

func (i DatabaseAccountGetPropertiesResponseArgs) ToDatabaseAccountGetPropertiesResponsePtrOutput() DatabaseAccountGetPropertiesResponsePtrOutput {
	return i.ToDatabaseAccountGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i DatabaseAccountGetPropertiesResponseArgs) ToDatabaseAccountGetPropertiesResponsePtrOutputWithContext(ctx context.Context) DatabaseAccountGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseAccountGetPropertiesResponseOutput).ToDatabaseAccountGetPropertiesResponsePtrOutputWithContext(ctx)
}

// DatabaseAccountGetPropertiesResponsePtrInput is an input type that accepts DatabaseAccountGetPropertiesResponseArgs, DatabaseAccountGetPropertiesResponsePtr and DatabaseAccountGetPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `DatabaseAccountGetPropertiesResponsePtrInput` via:
//
//          DatabaseAccountGetPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type DatabaseAccountGetPropertiesResponsePtrInput interface {
	pulumi.Input

	ToDatabaseAccountGetPropertiesResponsePtrOutput() DatabaseAccountGetPropertiesResponsePtrOutput
	ToDatabaseAccountGetPropertiesResponsePtrOutputWithContext(context.Context) DatabaseAccountGetPropertiesResponsePtrOutput
}

type databaseAccountGetPropertiesResponsePtrType DatabaseAccountGetPropertiesResponseArgs

func DatabaseAccountGetPropertiesResponsePtr(v *DatabaseAccountGetPropertiesResponseArgs) DatabaseAccountGetPropertiesResponsePtrInput {
	return (*databaseAccountGetPropertiesResponsePtrType)(v)
}

func (*databaseAccountGetPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseAccountGetPropertiesResponse)(nil)).Elem()
}

func (i *databaseAccountGetPropertiesResponsePtrType) ToDatabaseAccountGetPropertiesResponsePtrOutput() DatabaseAccountGetPropertiesResponsePtrOutput {
	return i.ToDatabaseAccountGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *databaseAccountGetPropertiesResponsePtrType) ToDatabaseAccountGetPropertiesResponsePtrOutputWithContext(ctx context.Context) DatabaseAccountGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseAccountGetPropertiesResponsePtrOutput)
}

// Properties for the database account.
type DatabaseAccountGetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (DatabaseAccountGetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseAccountGetPropertiesResponse)(nil)).Elem()
}

func (o DatabaseAccountGetPropertiesResponseOutput) ToDatabaseAccountGetPropertiesResponseOutput() DatabaseAccountGetPropertiesResponseOutput {
	return o
}

func (o DatabaseAccountGetPropertiesResponseOutput) ToDatabaseAccountGetPropertiesResponseOutputWithContext(ctx context.Context) DatabaseAccountGetPropertiesResponseOutput {
	return o
}

func (o DatabaseAccountGetPropertiesResponseOutput) ToDatabaseAccountGetPropertiesResponsePtrOutput() DatabaseAccountGetPropertiesResponsePtrOutput {
	return o.ToDatabaseAccountGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o DatabaseAccountGetPropertiesResponseOutput) ToDatabaseAccountGetPropertiesResponsePtrOutputWithContext(ctx context.Context) DatabaseAccountGetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v DatabaseAccountGetPropertiesResponse) *DatabaseAccountGetPropertiesResponse {
		return &v
	}).(DatabaseAccountGetPropertiesResponsePtrOutput)
}

// List of Cosmos DB capabilities for the account
func (o DatabaseAccountGetPropertiesResponseOutput) Capabilities() CapabilityResponseArrayOutput {
	return o.ApplyT(func(v DatabaseAccountGetPropertiesResponse) []CapabilityResponse { return v.Capabilities }).(CapabilityResponseArrayOutput)
}

// The cassandra connector offer type for the Cosmos DB database C* account.
func (o DatabaseAccountGetPropertiesResponseOutput) ConnectorOffer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseAccountGetPropertiesResponse) *string { return v.ConnectorOffer }).(pulumi.StringPtrOutput)
}

// The consistency policy for the Cosmos DB database account.
func (o DatabaseAccountGetPropertiesResponseOutput) ConsistencyPolicy() ConsistencyPolicyResponsePtrOutput {
	return o.ApplyT(func(v DatabaseAccountGetPropertiesResponse) *ConsistencyPolicyResponse { return v.ConsistencyPolicy }).(ConsistencyPolicyResponsePtrOutput)
}

// The offer type for the Cosmos DB database account. Default value: Standard.
func (o DatabaseAccountGetPropertiesResponseOutput) DatabaseAccountOfferType() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseAccountGetPropertiesResponse) string { return v.DatabaseAccountOfferType }).(pulumi.StringOutput)
}

// Disable write operations on metadata resources (databases, containers, throughput) via account keys
func (o DatabaseAccountGetPropertiesResponseOutput) DisableKeyBasedMetadataWriteAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseAccountGetPropertiesResponse) *bool { return v.DisableKeyBasedMetadataWriteAccess }).(pulumi.BoolPtrOutput)
}

// The connection endpoint for the Cosmos DB database account.
func (o DatabaseAccountGetPropertiesResponseOutput) DocumentEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseAccountGetPropertiesResponse) string { return v.DocumentEndpoint }).(pulumi.StringOutput)
}

// Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.
func (o DatabaseAccountGetPropertiesResponseOutput) EnableAutomaticFailover() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseAccountGetPropertiesResponse) *bool { return v.EnableAutomaticFailover }).(pulumi.BoolPtrOutput)
}

// Enables the cassandra connector on the Cosmos DB C* account
func (o DatabaseAccountGetPropertiesResponseOutput) EnableCassandraConnector() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseAccountGetPropertiesResponse) *bool { return v.EnableCassandraConnector }).(pulumi.BoolPtrOutput)
}

// Enables the account to write in multiple locations
func (o DatabaseAccountGetPropertiesResponseOutput) EnableMultipleWriteLocations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseAccountGetPropertiesResponse) *bool { return v.EnableMultipleWriteLocations }).(pulumi.BoolPtrOutput)
}

// An array that contains the regions ordered by their failover priorities.
func (o DatabaseAccountGetPropertiesResponseOutput) FailoverPolicies() FailoverPolicyResponseArrayOutput {
	return o.ApplyT(func(v DatabaseAccountGetPropertiesResponse) []FailoverPolicyResponse { return v.FailoverPolicies }).(FailoverPolicyResponseArrayOutput)
}

// Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.
func (o DatabaseAccountGetPropertiesResponseOutput) IpRangeFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseAccountGetPropertiesResponse) *string { return v.IpRangeFilter }).(pulumi.StringPtrOutput)
}

// Flag to indicate whether to enable/disable Virtual Network ACL rules.
func (o DatabaseAccountGetPropertiesResponseOutput) IsVirtualNetworkFilterEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabaseAccountGetPropertiesResponse) *bool { return v.IsVirtualNetworkFilterEnabled }).(pulumi.BoolPtrOutput)
}

// An array that contains all of the locations enabled for the Cosmos DB account.
func (o DatabaseAccountGetPropertiesResponseOutput) Locations() LocationResponseArrayOutput {
	return o.ApplyT(func(v DatabaseAccountGetPropertiesResponse) []LocationResponse { return v.Locations }).(LocationResponseArrayOutput)
}

// The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' – the Cosmos DB account deletion failed.
func (o DatabaseAccountGetPropertiesResponseOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseAccountGetPropertiesResponse) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// An array that contains of the read locations enabled for the Cosmos DB account.
func (o DatabaseAccountGetPropertiesResponseOutput) ReadLocations() LocationResponseArrayOutput {
	return o.ApplyT(func(v DatabaseAccountGetPropertiesResponse) []LocationResponse { return v.ReadLocations }).(LocationResponseArrayOutput)
}

// List of Virtual Network ACL rules configured for the Cosmos DB account.
func (o DatabaseAccountGetPropertiesResponseOutput) VirtualNetworkRules() VirtualNetworkRuleResponseArrayOutput {
	return o.ApplyT(func(v DatabaseAccountGetPropertiesResponse) []VirtualNetworkRuleResponse {
		return v.VirtualNetworkRules
	}).(VirtualNetworkRuleResponseArrayOutput)
}

// An array that contains the write location for the Cosmos DB account.
func (o DatabaseAccountGetPropertiesResponseOutput) WriteLocations() LocationResponseArrayOutput {
	return o.ApplyT(func(v DatabaseAccountGetPropertiesResponse) []LocationResponse { return v.WriteLocations }).(LocationResponseArrayOutput)
}

type DatabaseAccountGetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (DatabaseAccountGetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseAccountGetPropertiesResponse)(nil)).Elem()
}

func (o DatabaseAccountGetPropertiesResponsePtrOutput) ToDatabaseAccountGetPropertiesResponsePtrOutput() DatabaseAccountGetPropertiesResponsePtrOutput {
	return o
}

func (o DatabaseAccountGetPropertiesResponsePtrOutput) ToDatabaseAccountGetPropertiesResponsePtrOutputWithContext(ctx context.Context) DatabaseAccountGetPropertiesResponsePtrOutput {
	return o
}

func (o DatabaseAccountGetPropertiesResponsePtrOutput) Elem() DatabaseAccountGetPropertiesResponseOutput {
	return o.ApplyT(func(v *DatabaseAccountGetPropertiesResponse) DatabaseAccountGetPropertiesResponse { return *v }).(DatabaseAccountGetPropertiesResponseOutput)
}

// List of Cosmos DB capabilities for the account
func (o DatabaseAccountGetPropertiesResponsePtrOutput) Capabilities() CapabilityResponseArrayOutput {
	return o.ApplyT(func(v *DatabaseAccountGetPropertiesResponse) []CapabilityResponse {
		if v == nil {
			return nil
		}
		return v.Capabilities
	}).(CapabilityResponseArrayOutput)
}

// The cassandra connector offer type for the Cosmos DB database C* account.
func (o DatabaseAccountGetPropertiesResponsePtrOutput) ConnectorOffer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseAccountGetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ConnectorOffer
	}).(pulumi.StringPtrOutput)
}

// The consistency policy for the Cosmos DB database account.
func (o DatabaseAccountGetPropertiesResponsePtrOutput) ConsistencyPolicy() ConsistencyPolicyResponsePtrOutput {
	return o.ApplyT(func(v *DatabaseAccountGetPropertiesResponse) *ConsistencyPolicyResponse {
		if v == nil {
			return nil
		}
		return v.ConsistencyPolicy
	}).(ConsistencyPolicyResponsePtrOutput)
}

// The offer type for the Cosmos DB database account. Default value: Standard.
func (o DatabaseAccountGetPropertiesResponsePtrOutput) DatabaseAccountOfferType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseAccountGetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DatabaseAccountOfferType
	}).(pulumi.StringPtrOutput)
}

// Disable write operations on metadata resources (databases, containers, throughput) via account keys
func (o DatabaseAccountGetPropertiesResponsePtrOutput) DisableKeyBasedMetadataWriteAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseAccountGetPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.DisableKeyBasedMetadataWriteAccess
	}).(pulumi.BoolPtrOutput)
}

// The connection endpoint for the Cosmos DB database account.
func (o DatabaseAccountGetPropertiesResponsePtrOutput) DocumentEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseAccountGetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DocumentEndpoint
	}).(pulumi.StringPtrOutput)
}

// Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.
func (o DatabaseAccountGetPropertiesResponsePtrOutput) EnableAutomaticFailover() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseAccountGetPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAutomaticFailover
	}).(pulumi.BoolPtrOutput)
}

// Enables the cassandra connector on the Cosmos DB C* account
func (o DatabaseAccountGetPropertiesResponsePtrOutput) EnableCassandraConnector() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseAccountGetPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableCassandraConnector
	}).(pulumi.BoolPtrOutput)
}

// Enables the account to write in multiple locations
func (o DatabaseAccountGetPropertiesResponsePtrOutput) EnableMultipleWriteLocations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseAccountGetPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableMultipleWriteLocations
	}).(pulumi.BoolPtrOutput)
}

// An array that contains the regions ordered by their failover priorities.
func (o DatabaseAccountGetPropertiesResponsePtrOutput) FailoverPolicies() FailoverPolicyResponseArrayOutput {
	return o.ApplyT(func(v *DatabaseAccountGetPropertiesResponse) []FailoverPolicyResponse {
		if v == nil {
			return nil
		}
		return v.FailoverPolicies
	}).(FailoverPolicyResponseArrayOutput)
}

// Cosmos DB Firewall Support: This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account. IP addresses/ranges must be comma separated and must not contain any spaces.
func (o DatabaseAccountGetPropertiesResponsePtrOutput) IpRangeFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseAccountGetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.IpRangeFilter
	}).(pulumi.StringPtrOutput)
}

// Flag to indicate whether to enable/disable Virtual Network ACL rules.
func (o DatabaseAccountGetPropertiesResponsePtrOutput) IsVirtualNetworkFilterEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseAccountGetPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsVirtualNetworkFilterEnabled
	}).(pulumi.BoolPtrOutput)
}

// An array that contains all of the locations enabled for the Cosmos DB account.
func (o DatabaseAccountGetPropertiesResponsePtrOutput) Locations() LocationResponseArrayOutput {
	return o.ApplyT(func(v *DatabaseAccountGetPropertiesResponse) []LocationResponse {
		if v == nil {
			return nil
		}
		return v.Locations
	}).(LocationResponseArrayOutput)
}

// The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' – the Cosmos DB account deletion failed.
func (o DatabaseAccountGetPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseAccountGetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// An array that contains of the read locations enabled for the Cosmos DB account.
func (o DatabaseAccountGetPropertiesResponsePtrOutput) ReadLocations() LocationResponseArrayOutput {
	return o.ApplyT(func(v *DatabaseAccountGetPropertiesResponse) []LocationResponse {
		if v == nil {
			return nil
		}
		return v.ReadLocations
	}).(LocationResponseArrayOutput)
}

// List of Virtual Network ACL rules configured for the Cosmos DB account.
func (o DatabaseAccountGetPropertiesResponsePtrOutput) VirtualNetworkRules() VirtualNetworkRuleResponseArrayOutput {
	return o.ApplyT(func(v *DatabaseAccountGetPropertiesResponse) []VirtualNetworkRuleResponse {
		if v == nil {
			return nil
		}
		return v.VirtualNetworkRules
	}).(VirtualNetworkRuleResponseArrayOutput)
}

// An array that contains the write location for the Cosmos DB account.
func (o DatabaseAccountGetPropertiesResponsePtrOutput) WriteLocations() LocationResponseArrayOutput {
	return o.ApplyT(func(v *DatabaseAccountGetPropertiesResponse) []LocationResponse {
		if v == nil {
			return nil
		}
		return v.WriteLocations
	}).(LocationResponseArrayOutput)
}

type ExcludedPath struct {
	// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
	Path *string `pulumi:"path"`
}

// ExcludedPathInput is an input type that accepts ExcludedPathArgs and ExcludedPathOutput values.
// You can construct a concrete instance of `ExcludedPathInput` via:
//
//          ExcludedPathArgs{...}
type ExcludedPathInput interface {
	pulumi.Input

	ToExcludedPathOutput() ExcludedPathOutput
	ToExcludedPathOutputWithContext(context.Context) ExcludedPathOutput
}

type ExcludedPathArgs struct {
	// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ExcludedPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExcludedPath)(nil)).Elem()
}

func (i ExcludedPathArgs) ToExcludedPathOutput() ExcludedPathOutput {
	return i.ToExcludedPathOutputWithContext(context.Background())
}

func (i ExcludedPathArgs) ToExcludedPathOutputWithContext(ctx context.Context) ExcludedPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExcludedPathOutput)
}

// ExcludedPathArrayInput is an input type that accepts ExcludedPathArray and ExcludedPathArrayOutput values.
// You can construct a concrete instance of `ExcludedPathArrayInput` via:
//
//          ExcludedPathArray{ ExcludedPathArgs{...} }
type ExcludedPathArrayInput interface {
	pulumi.Input

	ToExcludedPathArrayOutput() ExcludedPathArrayOutput
	ToExcludedPathArrayOutputWithContext(context.Context) ExcludedPathArrayOutput
}

type ExcludedPathArray []ExcludedPathInput

func (ExcludedPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExcludedPath)(nil)).Elem()
}

func (i ExcludedPathArray) ToExcludedPathArrayOutput() ExcludedPathArrayOutput {
	return i.ToExcludedPathArrayOutputWithContext(context.Background())
}

func (i ExcludedPathArray) ToExcludedPathArrayOutputWithContext(ctx context.Context) ExcludedPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExcludedPathArrayOutput)
}

type ExcludedPathOutput struct{ *pulumi.OutputState }

func (ExcludedPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExcludedPath)(nil)).Elem()
}

func (o ExcludedPathOutput) ToExcludedPathOutput() ExcludedPathOutput {
	return o
}

func (o ExcludedPathOutput) ToExcludedPathOutputWithContext(ctx context.Context) ExcludedPathOutput {
	return o
}

// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
func (o ExcludedPathOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExcludedPath) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ExcludedPathArrayOutput struct{ *pulumi.OutputState }

func (ExcludedPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExcludedPath)(nil)).Elem()
}

func (o ExcludedPathArrayOutput) ToExcludedPathArrayOutput() ExcludedPathArrayOutput {
	return o
}

func (o ExcludedPathArrayOutput) ToExcludedPathArrayOutputWithContext(ctx context.Context) ExcludedPathArrayOutput {
	return o
}

func (o ExcludedPathArrayOutput) Index(i pulumi.IntInput) ExcludedPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExcludedPath {
		return vs[0].([]ExcludedPath)[vs[1].(int)]
	}).(ExcludedPathOutput)
}

// The failover policy for a given region of a database account.
type FailoverPolicyResponse struct {
	// The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
	FailoverPriority *int `pulumi:"failoverPriority"`
	// The unique identifier of the region in which the database account replicates to. Example: &lt;accountName&gt;-&lt;locationName&gt;.
	Id string `pulumi:"id"`
	// The name of the region in which the database account exists.
	LocationName *string `pulumi:"locationName"`
}

// FailoverPolicyResponseInput is an input type that accepts FailoverPolicyResponseArgs and FailoverPolicyResponseOutput values.
// You can construct a concrete instance of `FailoverPolicyResponseInput` via:
//
//          FailoverPolicyResponseArgs{...}
type FailoverPolicyResponseInput interface {
	pulumi.Input

	ToFailoverPolicyResponseOutput() FailoverPolicyResponseOutput
	ToFailoverPolicyResponseOutputWithContext(context.Context) FailoverPolicyResponseOutput
}

// The failover policy for a given region of a database account.
type FailoverPolicyResponseArgs struct {
	// The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
	FailoverPriority pulumi.IntPtrInput `pulumi:"failoverPriority"`
	// The unique identifier of the region in which the database account replicates to. Example: &lt;accountName&gt;-&lt;locationName&gt;.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the region in which the database account exists.
	LocationName pulumi.StringPtrInput `pulumi:"locationName"`
}

func (FailoverPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverPolicyResponse)(nil)).Elem()
}

func (i FailoverPolicyResponseArgs) ToFailoverPolicyResponseOutput() FailoverPolicyResponseOutput {
	return i.ToFailoverPolicyResponseOutputWithContext(context.Background())
}

func (i FailoverPolicyResponseArgs) ToFailoverPolicyResponseOutputWithContext(ctx context.Context) FailoverPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverPolicyResponseOutput)
}

// FailoverPolicyResponseArrayInput is an input type that accepts FailoverPolicyResponseArray and FailoverPolicyResponseArrayOutput values.
// You can construct a concrete instance of `FailoverPolicyResponseArrayInput` via:
//
//          FailoverPolicyResponseArray{ FailoverPolicyResponseArgs{...} }
type FailoverPolicyResponseArrayInput interface {
	pulumi.Input

	ToFailoverPolicyResponseArrayOutput() FailoverPolicyResponseArrayOutput
	ToFailoverPolicyResponseArrayOutputWithContext(context.Context) FailoverPolicyResponseArrayOutput
}

type FailoverPolicyResponseArray []FailoverPolicyResponseInput

func (FailoverPolicyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FailoverPolicyResponse)(nil)).Elem()
}

func (i FailoverPolicyResponseArray) ToFailoverPolicyResponseArrayOutput() FailoverPolicyResponseArrayOutput {
	return i.ToFailoverPolicyResponseArrayOutputWithContext(context.Background())
}

func (i FailoverPolicyResponseArray) ToFailoverPolicyResponseArrayOutputWithContext(ctx context.Context) FailoverPolicyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverPolicyResponseArrayOutput)
}

// The failover policy for a given region of a database account.
type FailoverPolicyResponseOutput struct{ *pulumi.OutputState }

func (FailoverPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverPolicyResponse)(nil)).Elem()
}

func (o FailoverPolicyResponseOutput) ToFailoverPolicyResponseOutput() FailoverPolicyResponseOutput {
	return o
}

func (o FailoverPolicyResponseOutput) ToFailoverPolicyResponseOutputWithContext(ctx context.Context) FailoverPolicyResponseOutput {
	return o
}

// The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
func (o FailoverPolicyResponseOutput) FailoverPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FailoverPolicyResponse) *int { return v.FailoverPriority }).(pulumi.IntPtrOutput)
}

// The unique identifier of the region in which the database account replicates to. Example: &lt;accountName&gt;-&lt;locationName&gt;.
func (o FailoverPolicyResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v FailoverPolicyResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the region in which the database account exists.
func (o FailoverPolicyResponseOutput) LocationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FailoverPolicyResponse) *string { return v.LocationName }).(pulumi.StringPtrOutput)
}

type FailoverPolicyResponseArrayOutput struct{ *pulumi.OutputState }

func (FailoverPolicyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FailoverPolicyResponse)(nil)).Elem()
}

func (o FailoverPolicyResponseArrayOutput) ToFailoverPolicyResponseArrayOutput() FailoverPolicyResponseArrayOutput {
	return o
}

func (o FailoverPolicyResponseArrayOutput) ToFailoverPolicyResponseArrayOutputWithContext(ctx context.Context) FailoverPolicyResponseArrayOutput {
	return o
}

func (o FailoverPolicyResponseArrayOutput) Index(i pulumi.IntInput) FailoverPolicyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FailoverPolicyResponse {
		return vs[0].([]FailoverPolicyResponse)[vs[1].(int)]
	}).(FailoverPolicyResponseOutput)
}

// The properties of an Azure Cosmos DB SQL database
type GremlinDatabaseGetPropertiesResponse struct {
	Resource map[string]interface{} `pulumi:"resource"`
}

// GremlinDatabaseGetPropertiesResponseInput is an input type that accepts GremlinDatabaseGetPropertiesResponseArgs and GremlinDatabaseGetPropertiesResponseOutput values.
// You can construct a concrete instance of `GremlinDatabaseGetPropertiesResponseInput` via:
//
//          GremlinDatabaseGetPropertiesResponseArgs{...}
type GremlinDatabaseGetPropertiesResponseInput interface {
	pulumi.Input

	ToGremlinDatabaseGetPropertiesResponseOutput() GremlinDatabaseGetPropertiesResponseOutput
	ToGremlinDatabaseGetPropertiesResponseOutputWithContext(context.Context) GremlinDatabaseGetPropertiesResponseOutput
}

// The properties of an Azure Cosmos DB SQL database
type GremlinDatabaseGetPropertiesResponseArgs struct {
	Resource pulumi.MapInput `pulumi:"resource"`
}

func (GremlinDatabaseGetPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GremlinDatabaseGetPropertiesResponse)(nil)).Elem()
}

func (i GremlinDatabaseGetPropertiesResponseArgs) ToGremlinDatabaseGetPropertiesResponseOutput() GremlinDatabaseGetPropertiesResponseOutput {
	return i.ToGremlinDatabaseGetPropertiesResponseOutputWithContext(context.Background())
}

func (i GremlinDatabaseGetPropertiesResponseArgs) ToGremlinDatabaseGetPropertiesResponseOutputWithContext(ctx context.Context) GremlinDatabaseGetPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GremlinDatabaseGetPropertiesResponseOutput)
}

func (i GremlinDatabaseGetPropertiesResponseArgs) ToGremlinDatabaseGetPropertiesResponsePtrOutput() GremlinDatabaseGetPropertiesResponsePtrOutput {
	return i.ToGremlinDatabaseGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i GremlinDatabaseGetPropertiesResponseArgs) ToGremlinDatabaseGetPropertiesResponsePtrOutputWithContext(ctx context.Context) GremlinDatabaseGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GremlinDatabaseGetPropertiesResponseOutput).ToGremlinDatabaseGetPropertiesResponsePtrOutputWithContext(ctx)
}

// GremlinDatabaseGetPropertiesResponsePtrInput is an input type that accepts GremlinDatabaseGetPropertiesResponseArgs, GremlinDatabaseGetPropertiesResponsePtr and GremlinDatabaseGetPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `GremlinDatabaseGetPropertiesResponsePtrInput` via:
//
//          GremlinDatabaseGetPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type GremlinDatabaseGetPropertiesResponsePtrInput interface {
	pulumi.Input

	ToGremlinDatabaseGetPropertiesResponsePtrOutput() GremlinDatabaseGetPropertiesResponsePtrOutput
	ToGremlinDatabaseGetPropertiesResponsePtrOutputWithContext(context.Context) GremlinDatabaseGetPropertiesResponsePtrOutput
}

type gremlinDatabaseGetPropertiesResponsePtrType GremlinDatabaseGetPropertiesResponseArgs

func GremlinDatabaseGetPropertiesResponsePtr(v *GremlinDatabaseGetPropertiesResponseArgs) GremlinDatabaseGetPropertiesResponsePtrInput {
	return (*gremlinDatabaseGetPropertiesResponsePtrType)(v)
}

func (*gremlinDatabaseGetPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GremlinDatabaseGetPropertiesResponse)(nil)).Elem()
}

func (i *gremlinDatabaseGetPropertiesResponsePtrType) ToGremlinDatabaseGetPropertiesResponsePtrOutput() GremlinDatabaseGetPropertiesResponsePtrOutput {
	return i.ToGremlinDatabaseGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *gremlinDatabaseGetPropertiesResponsePtrType) ToGremlinDatabaseGetPropertiesResponsePtrOutputWithContext(ctx context.Context) GremlinDatabaseGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GremlinDatabaseGetPropertiesResponsePtrOutput)
}

// The properties of an Azure Cosmos DB SQL database
type GremlinDatabaseGetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GremlinDatabaseGetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GremlinDatabaseGetPropertiesResponse)(nil)).Elem()
}

func (o GremlinDatabaseGetPropertiesResponseOutput) ToGremlinDatabaseGetPropertiesResponseOutput() GremlinDatabaseGetPropertiesResponseOutput {
	return o
}

func (o GremlinDatabaseGetPropertiesResponseOutput) ToGremlinDatabaseGetPropertiesResponseOutputWithContext(ctx context.Context) GremlinDatabaseGetPropertiesResponseOutput {
	return o
}

func (o GremlinDatabaseGetPropertiesResponseOutput) ToGremlinDatabaseGetPropertiesResponsePtrOutput() GremlinDatabaseGetPropertiesResponsePtrOutput {
	return o.ToGremlinDatabaseGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o GremlinDatabaseGetPropertiesResponseOutput) ToGremlinDatabaseGetPropertiesResponsePtrOutputWithContext(ctx context.Context) GremlinDatabaseGetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v GremlinDatabaseGetPropertiesResponse) *GremlinDatabaseGetPropertiesResponse {
		return &v
	}).(GremlinDatabaseGetPropertiesResponsePtrOutput)
}
func (o GremlinDatabaseGetPropertiesResponseOutput) Resource() pulumi.MapOutput {
	return o.ApplyT(func(v GremlinDatabaseGetPropertiesResponse) map[string]interface{} { return v.Resource }).(pulumi.MapOutput)
}

type GremlinDatabaseGetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (GremlinDatabaseGetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GremlinDatabaseGetPropertiesResponse)(nil)).Elem()
}

func (o GremlinDatabaseGetPropertiesResponsePtrOutput) ToGremlinDatabaseGetPropertiesResponsePtrOutput() GremlinDatabaseGetPropertiesResponsePtrOutput {
	return o
}

func (o GremlinDatabaseGetPropertiesResponsePtrOutput) ToGremlinDatabaseGetPropertiesResponsePtrOutputWithContext(ctx context.Context) GremlinDatabaseGetPropertiesResponsePtrOutput {
	return o
}

func (o GremlinDatabaseGetPropertiesResponsePtrOutput) Elem() GremlinDatabaseGetPropertiesResponseOutput {
	return o.ApplyT(func(v *GremlinDatabaseGetPropertiesResponse) GremlinDatabaseGetPropertiesResponse { return *v }).(GremlinDatabaseGetPropertiesResponseOutput)
}

func (o GremlinDatabaseGetPropertiesResponsePtrOutput) Resource() pulumi.MapOutput {
	return o.ApplyT(func(v *GremlinDatabaseGetPropertiesResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.MapOutput)
}

// Cosmos DB Gremlin database resource object
type GremlinDatabaseResource struct {
	// Name of the Cosmos DB Gremlin database
	Id string `pulumi:"id"`
}

// GremlinDatabaseResourceInput is an input type that accepts GremlinDatabaseResourceArgs and GremlinDatabaseResourceOutput values.
// You can construct a concrete instance of `GremlinDatabaseResourceInput` via:
//
//          GremlinDatabaseResourceArgs{...}
type GremlinDatabaseResourceInput interface {
	pulumi.Input

	ToGremlinDatabaseResourceOutput() GremlinDatabaseResourceOutput
	ToGremlinDatabaseResourceOutputWithContext(context.Context) GremlinDatabaseResourceOutput
}

// Cosmos DB Gremlin database resource object
type GremlinDatabaseResourceArgs struct {
	// Name of the Cosmos DB Gremlin database
	Id pulumi.StringInput `pulumi:"id"`
}

func (GremlinDatabaseResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GremlinDatabaseResource)(nil)).Elem()
}

func (i GremlinDatabaseResourceArgs) ToGremlinDatabaseResourceOutput() GremlinDatabaseResourceOutput {
	return i.ToGremlinDatabaseResourceOutputWithContext(context.Background())
}

func (i GremlinDatabaseResourceArgs) ToGremlinDatabaseResourceOutputWithContext(ctx context.Context) GremlinDatabaseResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GremlinDatabaseResourceOutput)
}

func (i GremlinDatabaseResourceArgs) ToGremlinDatabaseResourcePtrOutput() GremlinDatabaseResourcePtrOutput {
	return i.ToGremlinDatabaseResourcePtrOutputWithContext(context.Background())
}

func (i GremlinDatabaseResourceArgs) ToGremlinDatabaseResourcePtrOutputWithContext(ctx context.Context) GremlinDatabaseResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GremlinDatabaseResourceOutput).ToGremlinDatabaseResourcePtrOutputWithContext(ctx)
}

// GremlinDatabaseResourcePtrInput is an input type that accepts GremlinDatabaseResourceArgs, GremlinDatabaseResourcePtr and GremlinDatabaseResourcePtrOutput values.
// You can construct a concrete instance of `GremlinDatabaseResourcePtrInput` via:
//
//          GremlinDatabaseResourceArgs{...}
//
//  or:
//
//          nil
type GremlinDatabaseResourcePtrInput interface {
	pulumi.Input

	ToGremlinDatabaseResourcePtrOutput() GremlinDatabaseResourcePtrOutput
	ToGremlinDatabaseResourcePtrOutputWithContext(context.Context) GremlinDatabaseResourcePtrOutput
}

type gremlinDatabaseResourcePtrType GremlinDatabaseResourceArgs

func GremlinDatabaseResourcePtr(v *GremlinDatabaseResourceArgs) GremlinDatabaseResourcePtrInput {
	return (*gremlinDatabaseResourcePtrType)(v)
}

func (*gremlinDatabaseResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GremlinDatabaseResource)(nil)).Elem()
}

func (i *gremlinDatabaseResourcePtrType) ToGremlinDatabaseResourcePtrOutput() GremlinDatabaseResourcePtrOutput {
	return i.ToGremlinDatabaseResourcePtrOutputWithContext(context.Background())
}

func (i *gremlinDatabaseResourcePtrType) ToGremlinDatabaseResourcePtrOutputWithContext(ctx context.Context) GremlinDatabaseResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GremlinDatabaseResourcePtrOutput)
}

// Cosmos DB Gremlin database resource object
type GremlinDatabaseResourceOutput struct{ *pulumi.OutputState }

func (GremlinDatabaseResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GremlinDatabaseResource)(nil)).Elem()
}

func (o GremlinDatabaseResourceOutput) ToGremlinDatabaseResourceOutput() GremlinDatabaseResourceOutput {
	return o
}

func (o GremlinDatabaseResourceOutput) ToGremlinDatabaseResourceOutputWithContext(ctx context.Context) GremlinDatabaseResourceOutput {
	return o
}

func (o GremlinDatabaseResourceOutput) ToGremlinDatabaseResourcePtrOutput() GremlinDatabaseResourcePtrOutput {
	return o.ToGremlinDatabaseResourcePtrOutputWithContext(context.Background())
}

func (o GremlinDatabaseResourceOutput) ToGremlinDatabaseResourcePtrOutputWithContext(ctx context.Context) GremlinDatabaseResourcePtrOutput {
	return o.ApplyT(func(v GremlinDatabaseResource) *GremlinDatabaseResource {
		return &v
	}).(GremlinDatabaseResourcePtrOutput)
}

// Name of the Cosmos DB Gremlin database
func (o GremlinDatabaseResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GremlinDatabaseResource) string { return v.Id }).(pulumi.StringOutput)
}

type GremlinDatabaseResourcePtrOutput struct{ *pulumi.OutputState }

func (GremlinDatabaseResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GremlinDatabaseResource)(nil)).Elem()
}

func (o GremlinDatabaseResourcePtrOutput) ToGremlinDatabaseResourcePtrOutput() GremlinDatabaseResourcePtrOutput {
	return o
}

func (o GremlinDatabaseResourcePtrOutput) ToGremlinDatabaseResourcePtrOutputWithContext(ctx context.Context) GremlinDatabaseResourcePtrOutput {
	return o
}

func (o GremlinDatabaseResourcePtrOutput) Elem() GremlinDatabaseResourceOutput {
	return o.ApplyT(func(v *GremlinDatabaseResource) GremlinDatabaseResource { return *v }).(GremlinDatabaseResourceOutput)
}

// Name of the Cosmos DB Gremlin database
func (o GremlinDatabaseResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GremlinDatabaseResource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The properties of an Azure Cosmos DB Gremlin graph
type GremlinGraphGetPropertiesResponse struct {
	Resource map[string]interface{} `pulumi:"resource"`
}

// GremlinGraphGetPropertiesResponseInput is an input type that accepts GremlinGraphGetPropertiesResponseArgs and GremlinGraphGetPropertiesResponseOutput values.
// You can construct a concrete instance of `GremlinGraphGetPropertiesResponseInput` via:
//
//          GremlinGraphGetPropertiesResponseArgs{...}
type GremlinGraphGetPropertiesResponseInput interface {
	pulumi.Input

	ToGremlinGraphGetPropertiesResponseOutput() GremlinGraphGetPropertiesResponseOutput
	ToGremlinGraphGetPropertiesResponseOutputWithContext(context.Context) GremlinGraphGetPropertiesResponseOutput
}

// The properties of an Azure Cosmos DB Gremlin graph
type GremlinGraphGetPropertiesResponseArgs struct {
	Resource pulumi.MapInput `pulumi:"resource"`
}

func (GremlinGraphGetPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GremlinGraphGetPropertiesResponse)(nil)).Elem()
}

func (i GremlinGraphGetPropertiesResponseArgs) ToGremlinGraphGetPropertiesResponseOutput() GremlinGraphGetPropertiesResponseOutput {
	return i.ToGremlinGraphGetPropertiesResponseOutputWithContext(context.Background())
}

func (i GremlinGraphGetPropertiesResponseArgs) ToGremlinGraphGetPropertiesResponseOutputWithContext(ctx context.Context) GremlinGraphGetPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GremlinGraphGetPropertiesResponseOutput)
}

func (i GremlinGraphGetPropertiesResponseArgs) ToGremlinGraphGetPropertiesResponsePtrOutput() GremlinGraphGetPropertiesResponsePtrOutput {
	return i.ToGremlinGraphGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i GremlinGraphGetPropertiesResponseArgs) ToGremlinGraphGetPropertiesResponsePtrOutputWithContext(ctx context.Context) GremlinGraphGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GremlinGraphGetPropertiesResponseOutput).ToGremlinGraphGetPropertiesResponsePtrOutputWithContext(ctx)
}

// GremlinGraphGetPropertiesResponsePtrInput is an input type that accepts GremlinGraphGetPropertiesResponseArgs, GremlinGraphGetPropertiesResponsePtr and GremlinGraphGetPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `GremlinGraphGetPropertiesResponsePtrInput` via:
//
//          GremlinGraphGetPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type GremlinGraphGetPropertiesResponsePtrInput interface {
	pulumi.Input

	ToGremlinGraphGetPropertiesResponsePtrOutput() GremlinGraphGetPropertiesResponsePtrOutput
	ToGremlinGraphGetPropertiesResponsePtrOutputWithContext(context.Context) GremlinGraphGetPropertiesResponsePtrOutput
}

type gremlinGraphGetPropertiesResponsePtrType GremlinGraphGetPropertiesResponseArgs

func GremlinGraphGetPropertiesResponsePtr(v *GremlinGraphGetPropertiesResponseArgs) GremlinGraphGetPropertiesResponsePtrInput {
	return (*gremlinGraphGetPropertiesResponsePtrType)(v)
}

func (*gremlinGraphGetPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GremlinGraphGetPropertiesResponse)(nil)).Elem()
}

func (i *gremlinGraphGetPropertiesResponsePtrType) ToGremlinGraphGetPropertiesResponsePtrOutput() GremlinGraphGetPropertiesResponsePtrOutput {
	return i.ToGremlinGraphGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *gremlinGraphGetPropertiesResponsePtrType) ToGremlinGraphGetPropertiesResponsePtrOutputWithContext(ctx context.Context) GremlinGraphGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GremlinGraphGetPropertiesResponsePtrOutput)
}

// The properties of an Azure Cosmos DB Gremlin graph
type GremlinGraphGetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GremlinGraphGetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GremlinGraphGetPropertiesResponse)(nil)).Elem()
}

func (o GremlinGraphGetPropertiesResponseOutput) ToGremlinGraphGetPropertiesResponseOutput() GremlinGraphGetPropertiesResponseOutput {
	return o
}

func (o GremlinGraphGetPropertiesResponseOutput) ToGremlinGraphGetPropertiesResponseOutputWithContext(ctx context.Context) GremlinGraphGetPropertiesResponseOutput {
	return o
}

func (o GremlinGraphGetPropertiesResponseOutput) ToGremlinGraphGetPropertiesResponsePtrOutput() GremlinGraphGetPropertiesResponsePtrOutput {
	return o.ToGremlinGraphGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o GremlinGraphGetPropertiesResponseOutput) ToGremlinGraphGetPropertiesResponsePtrOutputWithContext(ctx context.Context) GremlinGraphGetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v GremlinGraphGetPropertiesResponse) *GremlinGraphGetPropertiesResponse {
		return &v
	}).(GremlinGraphGetPropertiesResponsePtrOutput)
}
func (o GremlinGraphGetPropertiesResponseOutput) Resource() pulumi.MapOutput {
	return o.ApplyT(func(v GremlinGraphGetPropertiesResponse) map[string]interface{} { return v.Resource }).(pulumi.MapOutput)
}

type GremlinGraphGetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (GremlinGraphGetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GremlinGraphGetPropertiesResponse)(nil)).Elem()
}

func (o GremlinGraphGetPropertiesResponsePtrOutput) ToGremlinGraphGetPropertiesResponsePtrOutput() GremlinGraphGetPropertiesResponsePtrOutput {
	return o
}

func (o GremlinGraphGetPropertiesResponsePtrOutput) ToGremlinGraphGetPropertiesResponsePtrOutputWithContext(ctx context.Context) GremlinGraphGetPropertiesResponsePtrOutput {
	return o
}

func (o GremlinGraphGetPropertiesResponsePtrOutput) Elem() GremlinGraphGetPropertiesResponseOutput {
	return o.ApplyT(func(v *GremlinGraphGetPropertiesResponse) GremlinGraphGetPropertiesResponse { return *v }).(GremlinGraphGetPropertiesResponseOutput)
}

func (o GremlinGraphGetPropertiesResponsePtrOutput) Resource() pulumi.MapOutput {
	return o.ApplyT(func(v *GremlinGraphGetPropertiesResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.MapOutput)
}

// Cosmos DB Gremlin graph resource object
type GremlinGraphResource struct {
	// The conflict resolution policy for the graph.
	ConflictResolutionPolicy *ConflictResolutionPolicy `pulumi:"conflictResolutionPolicy"`
	// Default time to live
	DefaultTtl *int `pulumi:"defaultTtl"`
	// Name of the Cosmos DB Gremlin graph
	Id string `pulumi:"id"`
	// The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the graph
	IndexingPolicy *IndexingPolicy `pulumi:"indexingPolicy"`
	// The configuration of the partition key to be used for partitioning data into multiple partitions
	PartitionKey *ContainerPartitionKey `pulumi:"partitionKey"`
	// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
	UniqueKeyPolicy *UniqueKeyPolicy `pulumi:"uniqueKeyPolicy"`
}

// GremlinGraphResourceInput is an input type that accepts GremlinGraphResourceArgs and GremlinGraphResourceOutput values.
// You can construct a concrete instance of `GremlinGraphResourceInput` via:
//
//          GremlinGraphResourceArgs{...}
type GremlinGraphResourceInput interface {
	pulumi.Input

	ToGremlinGraphResourceOutput() GremlinGraphResourceOutput
	ToGremlinGraphResourceOutputWithContext(context.Context) GremlinGraphResourceOutput
}

// Cosmos DB Gremlin graph resource object
type GremlinGraphResourceArgs struct {
	// The conflict resolution policy for the graph.
	ConflictResolutionPolicy ConflictResolutionPolicyPtrInput `pulumi:"conflictResolutionPolicy"`
	// Default time to live
	DefaultTtl pulumi.IntPtrInput `pulumi:"defaultTtl"`
	// Name of the Cosmos DB Gremlin graph
	Id pulumi.StringInput `pulumi:"id"`
	// The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the graph
	IndexingPolicy IndexingPolicyPtrInput `pulumi:"indexingPolicy"`
	// The configuration of the partition key to be used for partitioning data into multiple partitions
	PartitionKey ContainerPartitionKeyPtrInput `pulumi:"partitionKey"`
	// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
	UniqueKeyPolicy UniqueKeyPolicyPtrInput `pulumi:"uniqueKeyPolicy"`
}

func (GremlinGraphResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GremlinGraphResource)(nil)).Elem()
}

func (i GremlinGraphResourceArgs) ToGremlinGraphResourceOutput() GremlinGraphResourceOutput {
	return i.ToGremlinGraphResourceOutputWithContext(context.Background())
}

func (i GremlinGraphResourceArgs) ToGremlinGraphResourceOutputWithContext(ctx context.Context) GremlinGraphResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GremlinGraphResourceOutput)
}

func (i GremlinGraphResourceArgs) ToGremlinGraphResourcePtrOutput() GremlinGraphResourcePtrOutput {
	return i.ToGremlinGraphResourcePtrOutputWithContext(context.Background())
}

func (i GremlinGraphResourceArgs) ToGremlinGraphResourcePtrOutputWithContext(ctx context.Context) GremlinGraphResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GremlinGraphResourceOutput).ToGremlinGraphResourcePtrOutputWithContext(ctx)
}

// GremlinGraphResourcePtrInput is an input type that accepts GremlinGraphResourceArgs, GremlinGraphResourcePtr and GremlinGraphResourcePtrOutput values.
// You can construct a concrete instance of `GremlinGraphResourcePtrInput` via:
//
//          GremlinGraphResourceArgs{...}
//
//  or:
//
//          nil
type GremlinGraphResourcePtrInput interface {
	pulumi.Input

	ToGremlinGraphResourcePtrOutput() GremlinGraphResourcePtrOutput
	ToGremlinGraphResourcePtrOutputWithContext(context.Context) GremlinGraphResourcePtrOutput
}

type gremlinGraphResourcePtrType GremlinGraphResourceArgs

func GremlinGraphResourcePtr(v *GremlinGraphResourceArgs) GremlinGraphResourcePtrInput {
	return (*gremlinGraphResourcePtrType)(v)
}

func (*gremlinGraphResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GremlinGraphResource)(nil)).Elem()
}

func (i *gremlinGraphResourcePtrType) ToGremlinGraphResourcePtrOutput() GremlinGraphResourcePtrOutput {
	return i.ToGremlinGraphResourcePtrOutputWithContext(context.Background())
}

func (i *gremlinGraphResourcePtrType) ToGremlinGraphResourcePtrOutputWithContext(ctx context.Context) GremlinGraphResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GremlinGraphResourcePtrOutput)
}

// Cosmos DB Gremlin graph resource object
type GremlinGraphResourceOutput struct{ *pulumi.OutputState }

func (GremlinGraphResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GremlinGraphResource)(nil)).Elem()
}

func (o GremlinGraphResourceOutput) ToGremlinGraphResourceOutput() GremlinGraphResourceOutput {
	return o
}

func (o GremlinGraphResourceOutput) ToGremlinGraphResourceOutputWithContext(ctx context.Context) GremlinGraphResourceOutput {
	return o
}

func (o GremlinGraphResourceOutput) ToGremlinGraphResourcePtrOutput() GremlinGraphResourcePtrOutput {
	return o.ToGremlinGraphResourcePtrOutputWithContext(context.Background())
}

func (o GremlinGraphResourceOutput) ToGremlinGraphResourcePtrOutputWithContext(ctx context.Context) GremlinGraphResourcePtrOutput {
	return o.ApplyT(func(v GremlinGraphResource) *GremlinGraphResource {
		return &v
	}).(GremlinGraphResourcePtrOutput)
}

// The conflict resolution policy for the graph.
func (o GremlinGraphResourceOutput) ConflictResolutionPolicy() ConflictResolutionPolicyPtrOutput {
	return o.ApplyT(func(v GremlinGraphResource) *ConflictResolutionPolicy { return v.ConflictResolutionPolicy }).(ConflictResolutionPolicyPtrOutput)
}

// Default time to live
func (o GremlinGraphResourceOutput) DefaultTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GremlinGraphResource) *int { return v.DefaultTtl }).(pulumi.IntPtrOutput)
}

// Name of the Cosmos DB Gremlin graph
func (o GremlinGraphResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GremlinGraphResource) string { return v.Id }).(pulumi.StringOutput)
}

// The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the graph
func (o GremlinGraphResourceOutput) IndexingPolicy() IndexingPolicyPtrOutput {
	return o.ApplyT(func(v GremlinGraphResource) *IndexingPolicy { return v.IndexingPolicy }).(IndexingPolicyPtrOutput)
}

// The configuration of the partition key to be used for partitioning data into multiple partitions
func (o GremlinGraphResourceOutput) PartitionKey() ContainerPartitionKeyPtrOutput {
	return o.ApplyT(func(v GremlinGraphResource) *ContainerPartitionKey { return v.PartitionKey }).(ContainerPartitionKeyPtrOutput)
}

// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
func (o GremlinGraphResourceOutput) UniqueKeyPolicy() UniqueKeyPolicyPtrOutput {
	return o.ApplyT(func(v GremlinGraphResource) *UniqueKeyPolicy { return v.UniqueKeyPolicy }).(UniqueKeyPolicyPtrOutput)
}

type GremlinGraphResourcePtrOutput struct{ *pulumi.OutputState }

func (GremlinGraphResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GremlinGraphResource)(nil)).Elem()
}

func (o GremlinGraphResourcePtrOutput) ToGremlinGraphResourcePtrOutput() GremlinGraphResourcePtrOutput {
	return o
}

func (o GremlinGraphResourcePtrOutput) ToGremlinGraphResourcePtrOutputWithContext(ctx context.Context) GremlinGraphResourcePtrOutput {
	return o
}

func (o GremlinGraphResourcePtrOutput) Elem() GremlinGraphResourceOutput {
	return o.ApplyT(func(v *GremlinGraphResource) GremlinGraphResource { return *v }).(GremlinGraphResourceOutput)
}

// The conflict resolution policy for the graph.
func (o GremlinGraphResourcePtrOutput) ConflictResolutionPolicy() ConflictResolutionPolicyPtrOutput {
	return o.ApplyT(func(v *GremlinGraphResource) *ConflictResolutionPolicy {
		if v == nil {
			return nil
		}
		return v.ConflictResolutionPolicy
	}).(ConflictResolutionPolicyPtrOutput)
}

// Default time to live
func (o GremlinGraphResourcePtrOutput) DefaultTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GremlinGraphResource) *int {
		if v == nil {
			return nil
		}
		return v.DefaultTtl
	}).(pulumi.IntPtrOutput)
}

// Name of the Cosmos DB Gremlin graph
func (o GremlinGraphResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GremlinGraphResource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the graph
func (o GremlinGraphResourcePtrOutput) IndexingPolicy() IndexingPolicyPtrOutput {
	return o.ApplyT(func(v *GremlinGraphResource) *IndexingPolicy {
		if v == nil {
			return nil
		}
		return v.IndexingPolicy
	}).(IndexingPolicyPtrOutput)
}

// The configuration of the partition key to be used for partitioning data into multiple partitions
func (o GremlinGraphResourcePtrOutput) PartitionKey() ContainerPartitionKeyPtrOutput {
	return o.ApplyT(func(v *GremlinGraphResource) *ContainerPartitionKey {
		if v == nil {
			return nil
		}
		return v.PartitionKey
	}).(ContainerPartitionKeyPtrOutput)
}

// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
func (o GremlinGraphResourcePtrOutput) UniqueKeyPolicy() UniqueKeyPolicyPtrOutput {
	return o.ApplyT(func(v *GremlinGraphResource) *UniqueKeyPolicy {
		if v == nil {
			return nil
		}
		return v.UniqueKeyPolicy
	}).(UniqueKeyPolicyPtrOutput)
}

// An Azure Cosmos DB Gremlin database.
type GremlinResourceGremlinDatabaseType struct {
	// The location of the resource group to which the resource belongs.
	Location *string `pulumi:"location"`
	// The name of the ARM resource.
	Name string `pulumi:"name"`
	// The properties of an Azure Cosmos DB SQL database
	Properties GremlinDatabaseGetPropertiesResponse `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags *TagsResponse `pulumi:"tags"`
	// The type of Azure resource.
	Type string `pulumi:"type"`
}

// GremlinResourceGremlinDatabaseTypeInput is an input type that accepts GremlinResourceGremlinDatabaseTypeArgs and GremlinResourceGremlinDatabaseTypeOutput values.
// You can construct a concrete instance of `GremlinResourceGremlinDatabaseTypeInput` via:
//
//          GremlinResourceGremlinDatabaseTypeArgs{...}
type GremlinResourceGremlinDatabaseTypeInput interface {
	pulumi.Input

	ToGremlinResourceGremlinDatabaseTypeOutput() GremlinResourceGremlinDatabaseTypeOutput
	ToGremlinResourceGremlinDatabaseTypeOutputWithContext(context.Context) GremlinResourceGremlinDatabaseTypeOutput
}

// An Azure Cosmos DB Gremlin database.
type GremlinResourceGremlinDatabaseTypeArgs struct {
	// The location of the resource group to which the resource belongs.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the ARM resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of an Azure Cosmos DB SQL database
	Properties GremlinDatabaseGetPropertiesResponseInput `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags TagsResponsePtrInput `pulumi:"tags"`
	// The type of Azure resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GremlinResourceGremlinDatabaseTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GremlinResourceGremlinDatabaseType)(nil)).Elem()
}

func (i GremlinResourceGremlinDatabaseTypeArgs) ToGremlinResourceGremlinDatabaseTypeOutput() GremlinResourceGremlinDatabaseTypeOutput {
	return i.ToGremlinResourceGremlinDatabaseTypeOutputWithContext(context.Background())
}

func (i GremlinResourceGremlinDatabaseTypeArgs) ToGremlinResourceGremlinDatabaseTypeOutputWithContext(ctx context.Context) GremlinResourceGremlinDatabaseTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GremlinResourceGremlinDatabaseTypeOutput)
}

// An Azure Cosmos DB Gremlin database.
type GremlinResourceGremlinDatabaseTypeOutput struct{ *pulumi.OutputState }

func (GremlinResourceGremlinDatabaseTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GremlinResourceGremlinDatabaseType)(nil)).Elem()
}

func (o GremlinResourceGremlinDatabaseTypeOutput) ToGremlinResourceGremlinDatabaseTypeOutput() GremlinResourceGremlinDatabaseTypeOutput {
	return o
}

func (o GremlinResourceGremlinDatabaseTypeOutput) ToGremlinResourceGremlinDatabaseTypeOutputWithContext(ctx context.Context) GremlinResourceGremlinDatabaseTypeOutput {
	return o
}

// The location of the resource group to which the resource belongs.
func (o GremlinResourceGremlinDatabaseTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GremlinResourceGremlinDatabaseType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the ARM resource.
func (o GremlinResourceGremlinDatabaseTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GremlinResourceGremlinDatabaseType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of an Azure Cosmos DB SQL database
func (o GremlinResourceGremlinDatabaseTypeOutput) Properties() GremlinDatabaseGetPropertiesResponseOutput {
	return o.ApplyT(func(v GremlinResourceGremlinDatabaseType) GremlinDatabaseGetPropertiesResponse { return v.Properties }).(GremlinDatabaseGetPropertiesResponseOutput)
}

// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
func (o GremlinResourceGremlinDatabaseTypeOutput) Tags() TagsResponsePtrOutput {
	return o.ApplyT(func(v GremlinResourceGremlinDatabaseType) *TagsResponse { return v.Tags }).(TagsResponsePtrOutput)
}

// The type of Azure resource.
func (o GremlinResourceGremlinDatabaseTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GremlinResourceGremlinDatabaseType) string { return v.Type }).(pulumi.StringOutput)
}

// An Azure Cosmos DB Gremlin graph.
type GremlinResourceGremlinGraphType struct {
	// The location of the resource group to which the resource belongs.
	Location *string `pulumi:"location"`
	// The name of the ARM resource.
	Name string `pulumi:"name"`
	// The properties of an Azure Cosmos DB Gremlin graph
	Properties GremlinGraphGetPropertiesResponse `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags *TagsResponse `pulumi:"tags"`
	// The type of Azure resource.
	Type string `pulumi:"type"`
}

// GremlinResourceGremlinGraphTypeInput is an input type that accepts GremlinResourceGremlinGraphTypeArgs and GremlinResourceGremlinGraphTypeOutput values.
// You can construct a concrete instance of `GremlinResourceGremlinGraphTypeInput` via:
//
//          GremlinResourceGremlinGraphTypeArgs{...}
type GremlinResourceGremlinGraphTypeInput interface {
	pulumi.Input

	ToGremlinResourceGremlinGraphTypeOutput() GremlinResourceGremlinGraphTypeOutput
	ToGremlinResourceGremlinGraphTypeOutputWithContext(context.Context) GremlinResourceGremlinGraphTypeOutput
}

// An Azure Cosmos DB Gremlin graph.
type GremlinResourceGremlinGraphTypeArgs struct {
	// The location of the resource group to which the resource belongs.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the ARM resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of an Azure Cosmos DB Gremlin graph
	Properties GremlinGraphGetPropertiesResponseInput `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags TagsResponsePtrInput `pulumi:"tags"`
	// The type of Azure resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GremlinResourceGremlinGraphTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GremlinResourceGremlinGraphType)(nil)).Elem()
}

func (i GremlinResourceGremlinGraphTypeArgs) ToGremlinResourceGremlinGraphTypeOutput() GremlinResourceGremlinGraphTypeOutput {
	return i.ToGremlinResourceGremlinGraphTypeOutputWithContext(context.Background())
}

func (i GremlinResourceGremlinGraphTypeArgs) ToGremlinResourceGremlinGraphTypeOutputWithContext(ctx context.Context) GremlinResourceGremlinGraphTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GremlinResourceGremlinGraphTypeOutput)
}

// An Azure Cosmos DB Gremlin graph.
type GremlinResourceGremlinGraphTypeOutput struct{ *pulumi.OutputState }

func (GremlinResourceGremlinGraphTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GremlinResourceGremlinGraphType)(nil)).Elem()
}

func (o GremlinResourceGremlinGraphTypeOutput) ToGremlinResourceGremlinGraphTypeOutput() GremlinResourceGremlinGraphTypeOutput {
	return o
}

func (o GremlinResourceGremlinGraphTypeOutput) ToGremlinResourceGremlinGraphTypeOutputWithContext(ctx context.Context) GremlinResourceGremlinGraphTypeOutput {
	return o
}

// The location of the resource group to which the resource belongs.
func (o GremlinResourceGremlinGraphTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GremlinResourceGremlinGraphType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the ARM resource.
func (o GremlinResourceGremlinGraphTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GremlinResourceGremlinGraphType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of an Azure Cosmos DB Gremlin graph
func (o GremlinResourceGremlinGraphTypeOutput) Properties() GremlinGraphGetPropertiesResponseOutput {
	return o.ApplyT(func(v GremlinResourceGremlinGraphType) GremlinGraphGetPropertiesResponse { return v.Properties }).(GremlinGraphGetPropertiesResponseOutput)
}

// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
func (o GremlinResourceGremlinGraphTypeOutput) Tags() TagsResponsePtrOutput {
	return o.ApplyT(func(v GremlinResourceGremlinGraphType) *TagsResponse { return v.Tags }).(TagsResponsePtrOutput)
}

// The type of Azure resource.
func (o GremlinResourceGremlinGraphTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GremlinResourceGremlinGraphType) string { return v.Type }).(pulumi.StringOutput)
}

// The paths that are included in indexing
type IncludedPath struct {
	// List of indexes for this path
	Indexes []Indexes `pulumi:"indexes"`
	// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
	Path *string `pulumi:"path"`
}

// IncludedPathInput is an input type that accepts IncludedPathArgs and IncludedPathOutput values.
// You can construct a concrete instance of `IncludedPathInput` via:
//
//          IncludedPathArgs{...}
type IncludedPathInput interface {
	pulumi.Input

	ToIncludedPathOutput() IncludedPathOutput
	ToIncludedPathOutputWithContext(context.Context) IncludedPathOutput
}

// The paths that are included in indexing
type IncludedPathArgs struct {
	// List of indexes for this path
	Indexes IndexesArrayInput `pulumi:"indexes"`
	// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (IncludedPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IncludedPath)(nil)).Elem()
}

func (i IncludedPathArgs) ToIncludedPathOutput() IncludedPathOutput {
	return i.ToIncludedPathOutputWithContext(context.Background())
}

func (i IncludedPathArgs) ToIncludedPathOutputWithContext(ctx context.Context) IncludedPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncludedPathOutput)
}

// IncludedPathArrayInput is an input type that accepts IncludedPathArray and IncludedPathArrayOutput values.
// You can construct a concrete instance of `IncludedPathArrayInput` via:
//
//          IncludedPathArray{ IncludedPathArgs{...} }
type IncludedPathArrayInput interface {
	pulumi.Input

	ToIncludedPathArrayOutput() IncludedPathArrayOutput
	ToIncludedPathArrayOutputWithContext(context.Context) IncludedPathArrayOutput
}

type IncludedPathArray []IncludedPathInput

func (IncludedPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncludedPath)(nil)).Elem()
}

func (i IncludedPathArray) ToIncludedPathArrayOutput() IncludedPathArrayOutput {
	return i.ToIncludedPathArrayOutputWithContext(context.Background())
}

func (i IncludedPathArray) ToIncludedPathArrayOutputWithContext(ctx context.Context) IncludedPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncludedPathArrayOutput)
}

// The paths that are included in indexing
type IncludedPathOutput struct{ *pulumi.OutputState }

func (IncludedPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncludedPath)(nil)).Elem()
}

func (o IncludedPathOutput) ToIncludedPathOutput() IncludedPathOutput {
	return o
}

func (o IncludedPathOutput) ToIncludedPathOutputWithContext(ctx context.Context) IncludedPathOutput {
	return o
}

// List of indexes for this path
func (o IncludedPathOutput) Indexes() IndexesArrayOutput {
	return o.ApplyT(func(v IncludedPath) []Indexes { return v.Indexes }).(IndexesArrayOutput)
}

// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
func (o IncludedPathOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IncludedPath) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type IncludedPathArrayOutput struct{ *pulumi.OutputState }

func (IncludedPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncludedPath)(nil)).Elem()
}

func (o IncludedPathArrayOutput) ToIncludedPathArrayOutput() IncludedPathArrayOutput {
	return o
}

func (o IncludedPathArrayOutput) ToIncludedPathArrayOutputWithContext(ctx context.Context) IncludedPathArrayOutput {
	return o
}

func (o IncludedPathArrayOutput) Index(i pulumi.IntInput) IncludedPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IncludedPath {
		return vs[0].([]IncludedPath)[vs[1].(int)]
	}).(IncludedPathOutput)
}

// The indexes for the path.
type Indexes struct {
	// The datatype for which the indexing behavior is applied to.
	DataType *string `pulumi:"dataType"`
	// Indicates the type of index.
	Kind *string `pulumi:"kind"`
	// The precision of the index. -1 is maximum precision.
	Precision *int `pulumi:"precision"`
}

// IndexesInput is an input type that accepts IndexesArgs and IndexesOutput values.
// You can construct a concrete instance of `IndexesInput` via:
//
//          IndexesArgs{...}
type IndexesInput interface {
	pulumi.Input

	ToIndexesOutput() IndexesOutput
	ToIndexesOutputWithContext(context.Context) IndexesOutput
}

// The indexes for the path.
type IndexesArgs struct {
	// The datatype for which the indexing behavior is applied to.
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// Indicates the type of index.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The precision of the index. -1 is maximum precision.
	Precision pulumi.IntPtrInput `pulumi:"precision"`
}

func (IndexesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Indexes)(nil)).Elem()
}

func (i IndexesArgs) ToIndexesOutput() IndexesOutput {
	return i.ToIndexesOutputWithContext(context.Background())
}

func (i IndexesArgs) ToIndexesOutputWithContext(ctx context.Context) IndexesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexesOutput)
}

// IndexesArrayInput is an input type that accepts IndexesArray and IndexesArrayOutput values.
// You can construct a concrete instance of `IndexesArrayInput` via:
//
//          IndexesArray{ IndexesArgs{...} }
type IndexesArrayInput interface {
	pulumi.Input

	ToIndexesArrayOutput() IndexesArrayOutput
	ToIndexesArrayOutputWithContext(context.Context) IndexesArrayOutput
}

type IndexesArray []IndexesInput

func (IndexesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Indexes)(nil)).Elem()
}

func (i IndexesArray) ToIndexesArrayOutput() IndexesArrayOutput {
	return i.ToIndexesArrayOutputWithContext(context.Background())
}

func (i IndexesArray) ToIndexesArrayOutputWithContext(ctx context.Context) IndexesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexesArrayOutput)
}

// The indexes for the path.
type IndexesOutput struct{ *pulumi.OutputState }

func (IndexesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Indexes)(nil)).Elem()
}

func (o IndexesOutput) ToIndexesOutput() IndexesOutput {
	return o
}

func (o IndexesOutput) ToIndexesOutputWithContext(ctx context.Context) IndexesOutput {
	return o
}

// The datatype for which the indexing behavior is applied to.
func (o IndexesOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Indexes) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Indicates the type of index.
func (o IndexesOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Indexes) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The precision of the index. -1 is maximum precision.
func (o IndexesOutput) Precision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Indexes) *int { return v.Precision }).(pulumi.IntPtrOutput)
}

type IndexesArrayOutput struct{ *pulumi.OutputState }

func (IndexesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Indexes)(nil)).Elem()
}

func (o IndexesArrayOutput) ToIndexesArrayOutput() IndexesArrayOutput {
	return o
}

func (o IndexesArrayOutput) ToIndexesArrayOutputWithContext(ctx context.Context) IndexesArrayOutput {
	return o
}

func (o IndexesArrayOutput) Index(i pulumi.IntInput) IndexesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Indexes {
		return vs[0].([]Indexes)[vs[1].(int)]
	}).(IndexesOutput)
}

// Cosmos DB indexing policy
type IndexingPolicy struct {
	// Indicates if the indexing policy is automatic
	Automatic *bool `pulumi:"automatic"`
	// List of composite path list
	CompositeIndexes []CompositePathList `pulumi:"compositeIndexes"`
	// List of paths to exclude from indexing
	ExcludedPaths []ExcludedPath `pulumi:"excludedPaths"`
	// List of paths to include in the indexing
	IncludedPaths []IncludedPath `pulumi:"includedPaths"`
	// Indicates the indexing mode.
	IndexingMode *string `pulumi:"indexingMode"`
	// List of spatial specifics
	SpatialIndexes []SpatialSpec `pulumi:"spatialIndexes"`
}

// IndexingPolicyInput is an input type that accepts IndexingPolicyArgs and IndexingPolicyOutput values.
// You can construct a concrete instance of `IndexingPolicyInput` via:
//
//          IndexingPolicyArgs{...}
type IndexingPolicyInput interface {
	pulumi.Input

	ToIndexingPolicyOutput() IndexingPolicyOutput
	ToIndexingPolicyOutputWithContext(context.Context) IndexingPolicyOutput
}

// Cosmos DB indexing policy
type IndexingPolicyArgs struct {
	// Indicates if the indexing policy is automatic
	Automatic pulumi.BoolPtrInput `pulumi:"automatic"`
	// List of composite path list
	CompositeIndexes CompositePathListArrayInput `pulumi:"compositeIndexes"`
	// List of paths to exclude from indexing
	ExcludedPaths ExcludedPathArrayInput `pulumi:"excludedPaths"`
	// List of paths to include in the indexing
	IncludedPaths IncludedPathArrayInput `pulumi:"includedPaths"`
	// Indicates the indexing mode.
	IndexingMode pulumi.StringPtrInput `pulumi:"indexingMode"`
	// List of spatial specifics
	SpatialIndexes SpatialSpecArrayInput `pulumi:"spatialIndexes"`
}

func (IndexingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexingPolicy)(nil)).Elem()
}

func (i IndexingPolicyArgs) ToIndexingPolicyOutput() IndexingPolicyOutput {
	return i.ToIndexingPolicyOutputWithContext(context.Background())
}

func (i IndexingPolicyArgs) ToIndexingPolicyOutputWithContext(ctx context.Context) IndexingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexingPolicyOutput)
}

func (i IndexingPolicyArgs) ToIndexingPolicyPtrOutput() IndexingPolicyPtrOutput {
	return i.ToIndexingPolicyPtrOutputWithContext(context.Background())
}

func (i IndexingPolicyArgs) ToIndexingPolicyPtrOutputWithContext(ctx context.Context) IndexingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexingPolicyOutput).ToIndexingPolicyPtrOutputWithContext(ctx)
}

// IndexingPolicyPtrInput is an input type that accepts IndexingPolicyArgs, IndexingPolicyPtr and IndexingPolicyPtrOutput values.
// You can construct a concrete instance of `IndexingPolicyPtrInput` via:
//
//          IndexingPolicyArgs{...}
//
//  or:
//
//          nil
type IndexingPolicyPtrInput interface {
	pulumi.Input

	ToIndexingPolicyPtrOutput() IndexingPolicyPtrOutput
	ToIndexingPolicyPtrOutputWithContext(context.Context) IndexingPolicyPtrOutput
}

type indexingPolicyPtrType IndexingPolicyArgs

func IndexingPolicyPtr(v *IndexingPolicyArgs) IndexingPolicyPtrInput {
	return (*indexingPolicyPtrType)(v)
}

func (*indexingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexingPolicy)(nil)).Elem()
}

func (i *indexingPolicyPtrType) ToIndexingPolicyPtrOutput() IndexingPolicyPtrOutput {
	return i.ToIndexingPolicyPtrOutputWithContext(context.Background())
}

func (i *indexingPolicyPtrType) ToIndexingPolicyPtrOutputWithContext(ctx context.Context) IndexingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexingPolicyPtrOutput)
}

// Cosmos DB indexing policy
type IndexingPolicyOutput struct{ *pulumi.OutputState }

func (IndexingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexingPolicy)(nil)).Elem()
}

func (o IndexingPolicyOutput) ToIndexingPolicyOutput() IndexingPolicyOutput {
	return o
}

func (o IndexingPolicyOutput) ToIndexingPolicyOutputWithContext(ctx context.Context) IndexingPolicyOutput {
	return o
}

func (o IndexingPolicyOutput) ToIndexingPolicyPtrOutput() IndexingPolicyPtrOutput {
	return o.ToIndexingPolicyPtrOutputWithContext(context.Background())
}

func (o IndexingPolicyOutput) ToIndexingPolicyPtrOutputWithContext(ctx context.Context) IndexingPolicyPtrOutput {
	return o.ApplyT(func(v IndexingPolicy) *IndexingPolicy {
		return &v
	}).(IndexingPolicyPtrOutput)
}

// Indicates if the indexing policy is automatic
func (o IndexingPolicyOutput) Automatic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IndexingPolicy) *bool { return v.Automatic }).(pulumi.BoolPtrOutput)
}

// List of composite path list
func (o IndexingPolicyOutput) CompositeIndexes() CompositePathListArrayOutput {
	return o.ApplyT(func(v IndexingPolicy) []CompositePathList { return v.CompositeIndexes }).(CompositePathListArrayOutput)
}

// List of paths to exclude from indexing
func (o IndexingPolicyOutput) ExcludedPaths() ExcludedPathArrayOutput {
	return o.ApplyT(func(v IndexingPolicy) []ExcludedPath { return v.ExcludedPaths }).(ExcludedPathArrayOutput)
}

// List of paths to include in the indexing
func (o IndexingPolicyOutput) IncludedPaths() IncludedPathArrayOutput {
	return o.ApplyT(func(v IndexingPolicy) []IncludedPath { return v.IncludedPaths }).(IncludedPathArrayOutput)
}

// Indicates the indexing mode.
func (o IndexingPolicyOutput) IndexingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexingPolicy) *string { return v.IndexingMode }).(pulumi.StringPtrOutput)
}

// List of spatial specifics
func (o IndexingPolicyOutput) SpatialIndexes() SpatialSpecArrayOutput {
	return o.ApplyT(func(v IndexingPolicy) []SpatialSpec { return v.SpatialIndexes }).(SpatialSpecArrayOutput)
}

type IndexingPolicyPtrOutput struct{ *pulumi.OutputState }

func (IndexingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexingPolicy)(nil)).Elem()
}

func (o IndexingPolicyPtrOutput) ToIndexingPolicyPtrOutput() IndexingPolicyPtrOutput {
	return o
}

func (o IndexingPolicyPtrOutput) ToIndexingPolicyPtrOutputWithContext(ctx context.Context) IndexingPolicyPtrOutput {
	return o
}

func (o IndexingPolicyPtrOutput) Elem() IndexingPolicyOutput {
	return o.ApplyT(func(v *IndexingPolicy) IndexingPolicy { return *v }).(IndexingPolicyOutput)
}

// Indicates if the indexing policy is automatic
func (o IndexingPolicyPtrOutput) Automatic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IndexingPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Automatic
	}).(pulumi.BoolPtrOutput)
}

// List of composite path list
func (o IndexingPolicyPtrOutput) CompositeIndexes() CompositePathListArrayOutput {
	return o.ApplyT(func(v *IndexingPolicy) []CompositePathList {
		if v == nil {
			return nil
		}
		return v.CompositeIndexes
	}).(CompositePathListArrayOutput)
}

// List of paths to exclude from indexing
func (o IndexingPolicyPtrOutput) ExcludedPaths() ExcludedPathArrayOutput {
	return o.ApplyT(func(v *IndexingPolicy) []ExcludedPath {
		if v == nil {
			return nil
		}
		return v.ExcludedPaths
	}).(ExcludedPathArrayOutput)
}

// List of paths to include in the indexing
func (o IndexingPolicyPtrOutput) IncludedPaths() IncludedPathArrayOutput {
	return o.ApplyT(func(v *IndexingPolicy) []IncludedPath {
		if v == nil {
			return nil
		}
		return v.IncludedPaths
	}).(IncludedPathArrayOutput)
}

// Indicates the indexing mode.
func (o IndexingPolicyPtrOutput) IndexingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IndexingPolicy) *string {
		if v == nil {
			return nil
		}
		return v.IndexingMode
	}).(pulumi.StringPtrOutput)
}

// List of spatial specifics
func (o IndexingPolicyPtrOutput) SpatialIndexes() SpatialSpecArrayOutput {
	return o.ApplyT(func(v *IndexingPolicy) []SpatialSpec {
		if v == nil {
			return nil
		}
		return v.SpatialIndexes
	}).(SpatialSpecArrayOutput)
}

// A region in which the Azure Cosmos DB database account is deployed.
type Location struct {
	// The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
	FailoverPriority *int `pulumi:"failoverPriority"`
	// Flag to indicate whether or not this region is an AvailabilityZone region
	IsZoneRedundant *bool `pulumi:"isZoneRedundant"`
	// The name of the region.
	LocationName *string `pulumi:"locationName"`
	// The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' – the Cosmos DB account deletion failed.
	ProvisioningState *string `pulumi:"provisioningState"`
}

// LocationInput is an input type that accepts LocationArgs and LocationOutput values.
// You can construct a concrete instance of `LocationInput` via:
//
//          LocationArgs{...}
type LocationInput interface {
	pulumi.Input

	ToLocationOutput() LocationOutput
	ToLocationOutputWithContext(context.Context) LocationOutput
}

// A region in which the Azure Cosmos DB database account is deployed.
type LocationArgs struct {
	// The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
	FailoverPriority pulumi.IntPtrInput `pulumi:"failoverPriority"`
	// Flag to indicate whether or not this region is an AvailabilityZone region
	IsZoneRedundant pulumi.BoolPtrInput `pulumi:"isZoneRedundant"`
	// The name of the region.
	LocationName pulumi.StringPtrInput `pulumi:"locationName"`
	// The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' – the Cosmos DB account deletion failed.
	ProvisioningState pulumi.StringPtrInput `pulumi:"provisioningState"`
}

func (LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Location)(nil)).Elem()
}

func (i LocationArgs) ToLocationOutput() LocationOutput {
	return i.ToLocationOutputWithContext(context.Background())
}

func (i LocationArgs) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationOutput)
}

// LocationArrayInput is an input type that accepts LocationArray and LocationArrayOutput values.
// You can construct a concrete instance of `LocationArrayInput` via:
//
//          LocationArray{ LocationArgs{...} }
type LocationArrayInput interface {
	pulumi.Input

	ToLocationArrayOutput() LocationArrayOutput
	ToLocationArrayOutputWithContext(context.Context) LocationArrayOutput
}

type LocationArray []LocationInput

func (LocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Location)(nil)).Elem()
}

func (i LocationArray) ToLocationArrayOutput() LocationArrayOutput {
	return i.ToLocationArrayOutputWithContext(context.Background())
}

func (i LocationArray) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationArrayOutput)
}

// A region in which the Azure Cosmos DB database account is deployed.
type LocationOutput struct{ *pulumi.OutputState }

func (LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Location)(nil)).Elem()
}

func (o LocationOutput) ToLocationOutput() LocationOutput {
	return o
}

func (o LocationOutput) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return o
}

// The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
func (o LocationOutput) FailoverPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Location) *int { return v.FailoverPriority }).(pulumi.IntPtrOutput)
}

// Flag to indicate whether or not this region is an AvailabilityZone region
func (o LocationOutput) IsZoneRedundant() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Location) *bool { return v.IsZoneRedundant }).(pulumi.BoolPtrOutput)
}

// The name of the region.
func (o LocationOutput) LocationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Location) *string { return v.LocationName }).(pulumi.StringPtrOutput)
}

// The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' – the Cosmos DB account deletion failed.
func (o LocationOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Location) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

type LocationArrayOutput struct{ *pulumi.OutputState }

func (LocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Location)(nil)).Elem()
}

func (o LocationArrayOutput) ToLocationArrayOutput() LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) Index(i pulumi.IntInput) LocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Location {
		return vs[0].([]Location)[vs[1].(int)]
	}).(LocationOutput)
}

// A region in which the Azure Cosmos DB database account is deployed.
type LocationResponse struct {
	// The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/
	DocumentEndpoint string `pulumi:"documentEndpoint"`
	// The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
	FailoverPriority *int `pulumi:"failoverPriority"`
	// The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.
	Id string `pulumi:"id"`
	// Flag to indicate whether or not this region is an AvailabilityZone region
	IsZoneRedundant *bool `pulumi:"isZoneRedundant"`
	// The name of the region.
	LocationName *string `pulumi:"locationName"`
	// The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' – the Cosmos DB account deletion failed.
	ProvisioningState *string `pulumi:"provisioningState"`
}

// LocationResponseInput is an input type that accepts LocationResponseArgs and LocationResponseOutput values.
// You can construct a concrete instance of `LocationResponseInput` via:
//
//          LocationResponseArgs{...}
type LocationResponseInput interface {
	pulumi.Input

	ToLocationResponseOutput() LocationResponseOutput
	ToLocationResponseOutputWithContext(context.Context) LocationResponseOutput
}

// A region in which the Azure Cosmos DB database account is deployed.
type LocationResponseArgs struct {
	// The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/
	DocumentEndpoint pulumi.StringInput `pulumi:"documentEndpoint"`
	// The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
	FailoverPriority pulumi.IntPtrInput `pulumi:"failoverPriority"`
	// The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.
	Id pulumi.StringInput `pulumi:"id"`
	// Flag to indicate whether or not this region is an AvailabilityZone region
	IsZoneRedundant pulumi.BoolPtrInput `pulumi:"isZoneRedundant"`
	// The name of the region.
	LocationName pulumi.StringPtrInput `pulumi:"locationName"`
	// The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' – the Cosmos DB account deletion failed.
	ProvisioningState pulumi.StringPtrInput `pulumi:"provisioningState"`
}

func (LocationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationResponse)(nil)).Elem()
}

func (i LocationResponseArgs) ToLocationResponseOutput() LocationResponseOutput {
	return i.ToLocationResponseOutputWithContext(context.Background())
}

func (i LocationResponseArgs) ToLocationResponseOutputWithContext(ctx context.Context) LocationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationResponseOutput)
}

// LocationResponseArrayInput is an input type that accepts LocationResponseArray and LocationResponseArrayOutput values.
// You can construct a concrete instance of `LocationResponseArrayInput` via:
//
//          LocationResponseArray{ LocationResponseArgs{...} }
type LocationResponseArrayInput interface {
	pulumi.Input

	ToLocationResponseArrayOutput() LocationResponseArrayOutput
	ToLocationResponseArrayOutputWithContext(context.Context) LocationResponseArrayOutput
}

type LocationResponseArray []LocationResponseInput

func (LocationResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationResponse)(nil)).Elem()
}

func (i LocationResponseArray) ToLocationResponseArrayOutput() LocationResponseArrayOutput {
	return i.ToLocationResponseArrayOutputWithContext(context.Background())
}

func (i LocationResponseArray) ToLocationResponseArrayOutputWithContext(ctx context.Context) LocationResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationResponseArrayOutput)
}

// A region in which the Azure Cosmos DB database account is deployed.
type LocationResponseOutput struct{ *pulumi.OutputState }

func (LocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationResponse)(nil)).Elem()
}

func (o LocationResponseOutput) ToLocationResponseOutput() LocationResponseOutput {
	return o
}

func (o LocationResponseOutput) ToLocationResponseOutputWithContext(ctx context.Context) LocationResponseOutput {
	return o
}

// The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/
func (o LocationResponseOutput) DocumentEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LocationResponse) string { return v.DocumentEndpoint }).(pulumi.StringOutput)
}

// The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
func (o LocationResponseOutput) FailoverPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LocationResponse) *int { return v.FailoverPriority }).(pulumi.IntPtrOutput)
}

// The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.
func (o LocationResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LocationResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Flag to indicate whether or not this region is an AvailabilityZone region
func (o LocationResponseOutput) IsZoneRedundant() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LocationResponse) *bool { return v.IsZoneRedundant }).(pulumi.BoolPtrOutput)
}

// The name of the region.
func (o LocationResponseOutput) LocationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationResponse) *string { return v.LocationName }).(pulumi.StringPtrOutput)
}

// The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'Offline' - the Cosmos DB account is not active. 'DeletionFailed' – the Cosmos DB account deletion failed.
func (o LocationResponseOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationResponse) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

type LocationResponseArrayOutput struct{ *pulumi.OutputState }

func (LocationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationResponse)(nil)).Elem()
}

func (o LocationResponseArrayOutput) ToLocationResponseArrayOutput() LocationResponseArrayOutput {
	return o
}

func (o LocationResponseArrayOutput) ToLocationResponseArrayOutputWithContext(ctx context.Context) LocationResponseArrayOutput {
	return o
}

func (o LocationResponseArrayOutput) Index(i pulumi.IntInput) LocationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationResponse {
		return vs[0].([]LocationResponse)[vs[1].(int)]
	}).(LocationResponseOutput)
}

// The properties of an Azure Cosmos DB MongoDB collection
type MongoDBCollectionGetPropertiesResponse struct {
	Resource map[string]interface{} `pulumi:"resource"`
}

// MongoDBCollectionGetPropertiesResponseInput is an input type that accepts MongoDBCollectionGetPropertiesResponseArgs and MongoDBCollectionGetPropertiesResponseOutput values.
// You can construct a concrete instance of `MongoDBCollectionGetPropertiesResponseInput` via:
//
//          MongoDBCollectionGetPropertiesResponseArgs{...}
type MongoDBCollectionGetPropertiesResponseInput interface {
	pulumi.Input

	ToMongoDBCollectionGetPropertiesResponseOutput() MongoDBCollectionGetPropertiesResponseOutput
	ToMongoDBCollectionGetPropertiesResponseOutputWithContext(context.Context) MongoDBCollectionGetPropertiesResponseOutput
}

// The properties of an Azure Cosmos DB MongoDB collection
type MongoDBCollectionGetPropertiesResponseArgs struct {
	Resource pulumi.MapInput `pulumi:"resource"`
}

func (MongoDBCollectionGetPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDBCollectionGetPropertiesResponse)(nil)).Elem()
}

func (i MongoDBCollectionGetPropertiesResponseArgs) ToMongoDBCollectionGetPropertiesResponseOutput() MongoDBCollectionGetPropertiesResponseOutput {
	return i.ToMongoDBCollectionGetPropertiesResponseOutputWithContext(context.Background())
}

func (i MongoDBCollectionGetPropertiesResponseArgs) ToMongoDBCollectionGetPropertiesResponseOutputWithContext(ctx context.Context) MongoDBCollectionGetPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDBCollectionGetPropertiesResponseOutput)
}

func (i MongoDBCollectionGetPropertiesResponseArgs) ToMongoDBCollectionGetPropertiesResponsePtrOutput() MongoDBCollectionGetPropertiesResponsePtrOutput {
	return i.ToMongoDBCollectionGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i MongoDBCollectionGetPropertiesResponseArgs) ToMongoDBCollectionGetPropertiesResponsePtrOutputWithContext(ctx context.Context) MongoDBCollectionGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDBCollectionGetPropertiesResponseOutput).ToMongoDBCollectionGetPropertiesResponsePtrOutputWithContext(ctx)
}

// MongoDBCollectionGetPropertiesResponsePtrInput is an input type that accepts MongoDBCollectionGetPropertiesResponseArgs, MongoDBCollectionGetPropertiesResponsePtr and MongoDBCollectionGetPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `MongoDBCollectionGetPropertiesResponsePtrInput` via:
//
//          MongoDBCollectionGetPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type MongoDBCollectionGetPropertiesResponsePtrInput interface {
	pulumi.Input

	ToMongoDBCollectionGetPropertiesResponsePtrOutput() MongoDBCollectionGetPropertiesResponsePtrOutput
	ToMongoDBCollectionGetPropertiesResponsePtrOutputWithContext(context.Context) MongoDBCollectionGetPropertiesResponsePtrOutput
}

type mongoDBCollectionGetPropertiesResponsePtrType MongoDBCollectionGetPropertiesResponseArgs

func MongoDBCollectionGetPropertiesResponsePtr(v *MongoDBCollectionGetPropertiesResponseArgs) MongoDBCollectionGetPropertiesResponsePtrInput {
	return (*mongoDBCollectionGetPropertiesResponsePtrType)(v)
}

func (*mongoDBCollectionGetPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDBCollectionGetPropertiesResponse)(nil)).Elem()
}

func (i *mongoDBCollectionGetPropertiesResponsePtrType) ToMongoDBCollectionGetPropertiesResponsePtrOutput() MongoDBCollectionGetPropertiesResponsePtrOutput {
	return i.ToMongoDBCollectionGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *mongoDBCollectionGetPropertiesResponsePtrType) ToMongoDBCollectionGetPropertiesResponsePtrOutputWithContext(ctx context.Context) MongoDBCollectionGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDBCollectionGetPropertiesResponsePtrOutput)
}

// The properties of an Azure Cosmos DB MongoDB collection
type MongoDBCollectionGetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MongoDBCollectionGetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDBCollectionGetPropertiesResponse)(nil)).Elem()
}

func (o MongoDBCollectionGetPropertiesResponseOutput) ToMongoDBCollectionGetPropertiesResponseOutput() MongoDBCollectionGetPropertiesResponseOutput {
	return o
}

func (o MongoDBCollectionGetPropertiesResponseOutput) ToMongoDBCollectionGetPropertiesResponseOutputWithContext(ctx context.Context) MongoDBCollectionGetPropertiesResponseOutput {
	return o
}

func (o MongoDBCollectionGetPropertiesResponseOutput) ToMongoDBCollectionGetPropertiesResponsePtrOutput() MongoDBCollectionGetPropertiesResponsePtrOutput {
	return o.ToMongoDBCollectionGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o MongoDBCollectionGetPropertiesResponseOutput) ToMongoDBCollectionGetPropertiesResponsePtrOutputWithContext(ctx context.Context) MongoDBCollectionGetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v MongoDBCollectionGetPropertiesResponse) *MongoDBCollectionGetPropertiesResponse {
		return &v
	}).(MongoDBCollectionGetPropertiesResponsePtrOutput)
}
func (o MongoDBCollectionGetPropertiesResponseOutput) Resource() pulumi.MapOutput {
	return o.ApplyT(func(v MongoDBCollectionGetPropertiesResponse) map[string]interface{} { return v.Resource }).(pulumi.MapOutput)
}

type MongoDBCollectionGetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (MongoDBCollectionGetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDBCollectionGetPropertiesResponse)(nil)).Elem()
}

func (o MongoDBCollectionGetPropertiesResponsePtrOutput) ToMongoDBCollectionGetPropertiesResponsePtrOutput() MongoDBCollectionGetPropertiesResponsePtrOutput {
	return o
}

func (o MongoDBCollectionGetPropertiesResponsePtrOutput) ToMongoDBCollectionGetPropertiesResponsePtrOutputWithContext(ctx context.Context) MongoDBCollectionGetPropertiesResponsePtrOutput {
	return o
}

func (o MongoDBCollectionGetPropertiesResponsePtrOutput) Elem() MongoDBCollectionGetPropertiesResponseOutput {
	return o.ApplyT(func(v *MongoDBCollectionGetPropertiesResponse) MongoDBCollectionGetPropertiesResponse { return *v }).(MongoDBCollectionGetPropertiesResponseOutput)
}

func (o MongoDBCollectionGetPropertiesResponsePtrOutput) Resource() pulumi.MapOutput {
	return o.ApplyT(func(v *MongoDBCollectionGetPropertiesResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.MapOutput)
}

// Cosmos DB MongoDB collection resource object
type MongoDBCollectionResource struct {
	// Name of the Cosmos DB MongoDB collection
	Id string `pulumi:"id"`
	// List of index keys
	Indexes []MongoIndex `pulumi:"indexes"`
	// A key-value pair of shard keys to be applied for the request.
	ShardKey *ShardKeys `pulumi:"shardKey"`
}

// MongoDBCollectionResourceInput is an input type that accepts MongoDBCollectionResourceArgs and MongoDBCollectionResourceOutput values.
// You can construct a concrete instance of `MongoDBCollectionResourceInput` via:
//
//          MongoDBCollectionResourceArgs{...}
type MongoDBCollectionResourceInput interface {
	pulumi.Input

	ToMongoDBCollectionResourceOutput() MongoDBCollectionResourceOutput
	ToMongoDBCollectionResourceOutputWithContext(context.Context) MongoDBCollectionResourceOutput
}

// Cosmos DB MongoDB collection resource object
type MongoDBCollectionResourceArgs struct {
	// Name of the Cosmos DB MongoDB collection
	Id pulumi.StringInput `pulumi:"id"`
	// List of index keys
	Indexes MongoIndexArrayInput `pulumi:"indexes"`
	// A key-value pair of shard keys to be applied for the request.
	ShardKey ShardKeysPtrInput `pulumi:"shardKey"`
}

func (MongoDBCollectionResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDBCollectionResource)(nil)).Elem()
}

func (i MongoDBCollectionResourceArgs) ToMongoDBCollectionResourceOutput() MongoDBCollectionResourceOutput {
	return i.ToMongoDBCollectionResourceOutputWithContext(context.Background())
}

func (i MongoDBCollectionResourceArgs) ToMongoDBCollectionResourceOutputWithContext(ctx context.Context) MongoDBCollectionResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDBCollectionResourceOutput)
}

func (i MongoDBCollectionResourceArgs) ToMongoDBCollectionResourcePtrOutput() MongoDBCollectionResourcePtrOutput {
	return i.ToMongoDBCollectionResourcePtrOutputWithContext(context.Background())
}

func (i MongoDBCollectionResourceArgs) ToMongoDBCollectionResourcePtrOutputWithContext(ctx context.Context) MongoDBCollectionResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDBCollectionResourceOutput).ToMongoDBCollectionResourcePtrOutputWithContext(ctx)
}

// MongoDBCollectionResourcePtrInput is an input type that accepts MongoDBCollectionResourceArgs, MongoDBCollectionResourcePtr and MongoDBCollectionResourcePtrOutput values.
// You can construct a concrete instance of `MongoDBCollectionResourcePtrInput` via:
//
//          MongoDBCollectionResourceArgs{...}
//
//  or:
//
//          nil
type MongoDBCollectionResourcePtrInput interface {
	pulumi.Input

	ToMongoDBCollectionResourcePtrOutput() MongoDBCollectionResourcePtrOutput
	ToMongoDBCollectionResourcePtrOutputWithContext(context.Context) MongoDBCollectionResourcePtrOutput
}

type mongoDBCollectionResourcePtrType MongoDBCollectionResourceArgs

func MongoDBCollectionResourcePtr(v *MongoDBCollectionResourceArgs) MongoDBCollectionResourcePtrInput {
	return (*mongoDBCollectionResourcePtrType)(v)
}

func (*mongoDBCollectionResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDBCollectionResource)(nil)).Elem()
}

func (i *mongoDBCollectionResourcePtrType) ToMongoDBCollectionResourcePtrOutput() MongoDBCollectionResourcePtrOutput {
	return i.ToMongoDBCollectionResourcePtrOutputWithContext(context.Background())
}

func (i *mongoDBCollectionResourcePtrType) ToMongoDBCollectionResourcePtrOutputWithContext(ctx context.Context) MongoDBCollectionResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDBCollectionResourcePtrOutput)
}

// Cosmos DB MongoDB collection resource object
type MongoDBCollectionResourceOutput struct{ *pulumi.OutputState }

func (MongoDBCollectionResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDBCollectionResource)(nil)).Elem()
}

func (o MongoDBCollectionResourceOutput) ToMongoDBCollectionResourceOutput() MongoDBCollectionResourceOutput {
	return o
}

func (o MongoDBCollectionResourceOutput) ToMongoDBCollectionResourceOutputWithContext(ctx context.Context) MongoDBCollectionResourceOutput {
	return o
}

func (o MongoDBCollectionResourceOutput) ToMongoDBCollectionResourcePtrOutput() MongoDBCollectionResourcePtrOutput {
	return o.ToMongoDBCollectionResourcePtrOutputWithContext(context.Background())
}

func (o MongoDBCollectionResourceOutput) ToMongoDBCollectionResourcePtrOutputWithContext(ctx context.Context) MongoDBCollectionResourcePtrOutput {
	return o.ApplyT(func(v MongoDBCollectionResource) *MongoDBCollectionResource {
		return &v
	}).(MongoDBCollectionResourcePtrOutput)
}

// Name of the Cosmos DB MongoDB collection
func (o MongoDBCollectionResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDBCollectionResource) string { return v.Id }).(pulumi.StringOutput)
}

// List of index keys
func (o MongoDBCollectionResourceOutput) Indexes() MongoIndexArrayOutput {
	return o.ApplyT(func(v MongoDBCollectionResource) []MongoIndex { return v.Indexes }).(MongoIndexArrayOutput)
}

// A key-value pair of shard keys to be applied for the request.
func (o MongoDBCollectionResourceOutput) ShardKey() ShardKeysPtrOutput {
	return o.ApplyT(func(v MongoDBCollectionResource) *ShardKeys { return v.ShardKey }).(ShardKeysPtrOutput)
}

type MongoDBCollectionResourcePtrOutput struct{ *pulumi.OutputState }

func (MongoDBCollectionResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDBCollectionResource)(nil)).Elem()
}

func (o MongoDBCollectionResourcePtrOutput) ToMongoDBCollectionResourcePtrOutput() MongoDBCollectionResourcePtrOutput {
	return o
}

func (o MongoDBCollectionResourcePtrOutput) ToMongoDBCollectionResourcePtrOutputWithContext(ctx context.Context) MongoDBCollectionResourcePtrOutput {
	return o
}

func (o MongoDBCollectionResourcePtrOutput) Elem() MongoDBCollectionResourceOutput {
	return o.ApplyT(func(v *MongoDBCollectionResource) MongoDBCollectionResource { return *v }).(MongoDBCollectionResourceOutput)
}

// Name of the Cosmos DB MongoDB collection
func (o MongoDBCollectionResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDBCollectionResource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// List of index keys
func (o MongoDBCollectionResourcePtrOutput) Indexes() MongoIndexArrayOutput {
	return o.ApplyT(func(v *MongoDBCollectionResource) []MongoIndex {
		if v == nil {
			return nil
		}
		return v.Indexes
	}).(MongoIndexArrayOutput)
}

// A key-value pair of shard keys to be applied for the request.
func (o MongoDBCollectionResourcePtrOutput) ShardKey() ShardKeysPtrOutput {
	return o.ApplyT(func(v *MongoDBCollectionResource) *ShardKeys {
		if v == nil {
			return nil
		}
		return v.ShardKey
	}).(ShardKeysPtrOutput)
}

// The properties of an Azure Cosmos DB MongoDB database
type MongoDBDatabaseGetPropertiesResponse struct {
	Resource map[string]interface{} `pulumi:"resource"`
}

// MongoDBDatabaseGetPropertiesResponseInput is an input type that accepts MongoDBDatabaseGetPropertiesResponseArgs and MongoDBDatabaseGetPropertiesResponseOutput values.
// You can construct a concrete instance of `MongoDBDatabaseGetPropertiesResponseInput` via:
//
//          MongoDBDatabaseGetPropertiesResponseArgs{...}
type MongoDBDatabaseGetPropertiesResponseInput interface {
	pulumi.Input

	ToMongoDBDatabaseGetPropertiesResponseOutput() MongoDBDatabaseGetPropertiesResponseOutput
	ToMongoDBDatabaseGetPropertiesResponseOutputWithContext(context.Context) MongoDBDatabaseGetPropertiesResponseOutput
}

// The properties of an Azure Cosmos DB MongoDB database
type MongoDBDatabaseGetPropertiesResponseArgs struct {
	Resource pulumi.MapInput `pulumi:"resource"`
}

func (MongoDBDatabaseGetPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDBDatabaseGetPropertiesResponse)(nil)).Elem()
}

func (i MongoDBDatabaseGetPropertiesResponseArgs) ToMongoDBDatabaseGetPropertiesResponseOutput() MongoDBDatabaseGetPropertiesResponseOutput {
	return i.ToMongoDBDatabaseGetPropertiesResponseOutputWithContext(context.Background())
}

func (i MongoDBDatabaseGetPropertiesResponseArgs) ToMongoDBDatabaseGetPropertiesResponseOutputWithContext(ctx context.Context) MongoDBDatabaseGetPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDBDatabaseGetPropertiesResponseOutput)
}

func (i MongoDBDatabaseGetPropertiesResponseArgs) ToMongoDBDatabaseGetPropertiesResponsePtrOutput() MongoDBDatabaseGetPropertiesResponsePtrOutput {
	return i.ToMongoDBDatabaseGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i MongoDBDatabaseGetPropertiesResponseArgs) ToMongoDBDatabaseGetPropertiesResponsePtrOutputWithContext(ctx context.Context) MongoDBDatabaseGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDBDatabaseGetPropertiesResponseOutput).ToMongoDBDatabaseGetPropertiesResponsePtrOutputWithContext(ctx)
}

// MongoDBDatabaseGetPropertiesResponsePtrInput is an input type that accepts MongoDBDatabaseGetPropertiesResponseArgs, MongoDBDatabaseGetPropertiesResponsePtr and MongoDBDatabaseGetPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `MongoDBDatabaseGetPropertiesResponsePtrInput` via:
//
//          MongoDBDatabaseGetPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type MongoDBDatabaseGetPropertiesResponsePtrInput interface {
	pulumi.Input

	ToMongoDBDatabaseGetPropertiesResponsePtrOutput() MongoDBDatabaseGetPropertiesResponsePtrOutput
	ToMongoDBDatabaseGetPropertiesResponsePtrOutputWithContext(context.Context) MongoDBDatabaseGetPropertiesResponsePtrOutput
}

type mongoDBDatabaseGetPropertiesResponsePtrType MongoDBDatabaseGetPropertiesResponseArgs

func MongoDBDatabaseGetPropertiesResponsePtr(v *MongoDBDatabaseGetPropertiesResponseArgs) MongoDBDatabaseGetPropertiesResponsePtrInput {
	return (*mongoDBDatabaseGetPropertiesResponsePtrType)(v)
}

func (*mongoDBDatabaseGetPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDBDatabaseGetPropertiesResponse)(nil)).Elem()
}

func (i *mongoDBDatabaseGetPropertiesResponsePtrType) ToMongoDBDatabaseGetPropertiesResponsePtrOutput() MongoDBDatabaseGetPropertiesResponsePtrOutput {
	return i.ToMongoDBDatabaseGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *mongoDBDatabaseGetPropertiesResponsePtrType) ToMongoDBDatabaseGetPropertiesResponsePtrOutputWithContext(ctx context.Context) MongoDBDatabaseGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDBDatabaseGetPropertiesResponsePtrOutput)
}

// The properties of an Azure Cosmos DB MongoDB database
type MongoDBDatabaseGetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MongoDBDatabaseGetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDBDatabaseGetPropertiesResponse)(nil)).Elem()
}

func (o MongoDBDatabaseGetPropertiesResponseOutput) ToMongoDBDatabaseGetPropertiesResponseOutput() MongoDBDatabaseGetPropertiesResponseOutput {
	return o
}

func (o MongoDBDatabaseGetPropertiesResponseOutput) ToMongoDBDatabaseGetPropertiesResponseOutputWithContext(ctx context.Context) MongoDBDatabaseGetPropertiesResponseOutput {
	return o
}

func (o MongoDBDatabaseGetPropertiesResponseOutput) ToMongoDBDatabaseGetPropertiesResponsePtrOutput() MongoDBDatabaseGetPropertiesResponsePtrOutput {
	return o.ToMongoDBDatabaseGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o MongoDBDatabaseGetPropertiesResponseOutput) ToMongoDBDatabaseGetPropertiesResponsePtrOutputWithContext(ctx context.Context) MongoDBDatabaseGetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v MongoDBDatabaseGetPropertiesResponse) *MongoDBDatabaseGetPropertiesResponse {
		return &v
	}).(MongoDBDatabaseGetPropertiesResponsePtrOutput)
}
func (o MongoDBDatabaseGetPropertiesResponseOutput) Resource() pulumi.MapOutput {
	return o.ApplyT(func(v MongoDBDatabaseGetPropertiesResponse) map[string]interface{} { return v.Resource }).(pulumi.MapOutput)
}

type MongoDBDatabaseGetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (MongoDBDatabaseGetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDBDatabaseGetPropertiesResponse)(nil)).Elem()
}

func (o MongoDBDatabaseGetPropertiesResponsePtrOutput) ToMongoDBDatabaseGetPropertiesResponsePtrOutput() MongoDBDatabaseGetPropertiesResponsePtrOutput {
	return o
}

func (o MongoDBDatabaseGetPropertiesResponsePtrOutput) ToMongoDBDatabaseGetPropertiesResponsePtrOutputWithContext(ctx context.Context) MongoDBDatabaseGetPropertiesResponsePtrOutput {
	return o
}

func (o MongoDBDatabaseGetPropertiesResponsePtrOutput) Elem() MongoDBDatabaseGetPropertiesResponseOutput {
	return o.ApplyT(func(v *MongoDBDatabaseGetPropertiesResponse) MongoDBDatabaseGetPropertiesResponse { return *v }).(MongoDBDatabaseGetPropertiesResponseOutput)
}

func (o MongoDBDatabaseGetPropertiesResponsePtrOutput) Resource() pulumi.MapOutput {
	return o.ApplyT(func(v *MongoDBDatabaseGetPropertiesResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.MapOutput)
}

// Cosmos DB MongoDB database resource object
type MongoDBDatabaseResource struct {
	// Name of the Cosmos DB MongoDB database
	Id string `pulumi:"id"`
}

// MongoDBDatabaseResourceInput is an input type that accepts MongoDBDatabaseResourceArgs and MongoDBDatabaseResourceOutput values.
// You can construct a concrete instance of `MongoDBDatabaseResourceInput` via:
//
//          MongoDBDatabaseResourceArgs{...}
type MongoDBDatabaseResourceInput interface {
	pulumi.Input

	ToMongoDBDatabaseResourceOutput() MongoDBDatabaseResourceOutput
	ToMongoDBDatabaseResourceOutputWithContext(context.Context) MongoDBDatabaseResourceOutput
}

// Cosmos DB MongoDB database resource object
type MongoDBDatabaseResourceArgs struct {
	// Name of the Cosmos DB MongoDB database
	Id pulumi.StringInput `pulumi:"id"`
}

func (MongoDBDatabaseResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDBDatabaseResource)(nil)).Elem()
}

func (i MongoDBDatabaseResourceArgs) ToMongoDBDatabaseResourceOutput() MongoDBDatabaseResourceOutput {
	return i.ToMongoDBDatabaseResourceOutputWithContext(context.Background())
}

func (i MongoDBDatabaseResourceArgs) ToMongoDBDatabaseResourceOutputWithContext(ctx context.Context) MongoDBDatabaseResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDBDatabaseResourceOutput)
}

func (i MongoDBDatabaseResourceArgs) ToMongoDBDatabaseResourcePtrOutput() MongoDBDatabaseResourcePtrOutput {
	return i.ToMongoDBDatabaseResourcePtrOutputWithContext(context.Background())
}

func (i MongoDBDatabaseResourceArgs) ToMongoDBDatabaseResourcePtrOutputWithContext(ctx context.Context) MongoDBDatabaseResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDBDatabaseResourceOutput).ToMongoDBDatabaseResourcePtrOutputWithContext(ctx)
}

// MongoDBDatabaseResourcePtrInput is an input type that accepts MongoDBDatabaseResourceArgs, MongoDBDatabaseResourcePtr and MongoDBDatabaseResourcePtrOutput values.
// You can construct a concrete instance of `MongoDBDatabaseResourcePtrInput` via:
//
//          MongoDBDatabaseResourceArgs{...}
//
//  or:
//
//          nil
type MongoDBDatabaseResourcePtrInput interface {
	pulumi.Input

	ToMongoDBDatabaseResourcePtrOutput() MongoDBDatabaseResourcePtrOutput
	ToMongoDBDatabaseResourcePtrOutputWithContext(context.Context) MongoDBDatabaseResourcePtrOutput
}

type mongoDBDatabaseResourcePtrType MongoDBDatabaseResourceArgs

func MongoDBDatabaseResourcePtr(v *MongoDBDatabaseResourceArgs) MongoDBDatabaseResourcePtrInput {
	return (*mongoDBDatabaseResourcePtrType)(v)
}

func (*mongoDBDatabaseResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDBDatabaseResource)(nil)).Elem()
}

func (i *mongoDBDatabaseResourcePtrType) ToMongoDBDatabaseResourcePtrOutput() MongoDBDatabaseResourcePtrOutput {
	return i.ToMongoDBDatabaseResourcePtrOutputWithContext(context.Background())
}

func (i *mongoDBDatabaseResourcePtrType) ToMongoDBDatabaseResourcePtrOutputWithContext(ctx context.Context) MongoDBDatabaseResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDBDatabaseResourcePtrOutput)
}

// Cosmos DB MongoDB database resource object
type MongoDBDatabaseResourceOutput struct{ *pulumi.OutputState }

func (MongoDBDatabaseResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDBDatabaseResource)(nil)).Elem()
}

func (o MongoDBDatabaseResourceOutput) ToMongoDBDatabaseResourceOutput() MongoDBDatabaseResourceOutput {
	return o
}

func (o MongoDBDatabaseResourceOutput) ToMongoDBDatabaseResourceOutputWithContext(ctx context.Context) MongoDBDatabaseResourceOutput {
	return o
}

func (o MongoDBDatabaseResourceOutput) ToMongoDBDatabaseResourcePtrOutput() MongoDBDatabaseResourcePtrOutput {
	return o.ToMongoDBDatabaseResourcePtrOutputWithContext(context.Background())
}

func (o MongoDBDatabaseResourceOutput) ToMongoDBDatabaseResourcePtrOutputWithContext(ctx context.Context) MongoDBDatabaseResourcePtrOutput {
	return o.ApplyT(func(v MongoDBDatabaseResource) *MongoDBDatabaseResource {
		return &v
	}).(MongoDBDatabaseResourcePtrOutput)
}

// Name of the Cosmos DB MongoDB database
func (o MongoDBDatabaseResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDBDatabaseResource) string { return v.Id }).(pulumi.StringOutput)
}

type MongoDBDatabaseResourcePtrOutput struct{ *pulumi.OutputState }

func (MongoDBDatabaseResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDBDatabaseResource)(nil)).Elem()
}

func (o MongoDBDatabaseResourcePtrOutput) ToMongoDBDatabaseResourcePtrOutput() MongoDBDatabaseResourcePtrOutput {
	return o
}

func (o MongoDBDatabaseResourcePtrOutput) ToMongoDBDatabaseResourcePtrOutputWithContext(ctx context.Context) MongoDBDatabaseResourcePtrOutput {
	return o
}

func (o MongoDBDatabaseResourcePtrOutput) Elem() MongoDBDatabaseResourceOutput {
	return o.ApplyT(func(v *MongoDBDatabaseResource) MongoDBDatabaseResource { return *v }).(MongoDBDatabaseResourceOutput)
}

// Name of the Cosmos DB MongoDB database
func (o MongoDBDatabaseResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDBDatabaseResource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// An Azure Cosmos DB MongoDB collection.
type MongoDBResourceMongoDBCollectionType struct {
	// The location of the resource group to which the resource belongs.
	Location *string `pulumi:"location"`
	// The name of the ARM resource.
	Name string `pulumi:"name"`
	// The properties of an Azure Cosmos DB MongoDB collection
	Properties MongoDBCollectionGetPropertiesResponse `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags *TagsResponse `pulumi:"tags"`
	// The type of Azure resource.
	Type string `pulumi:"type"`
}

// MongoDBResourceMongoDBCollectionTypeInput is an input type that accepts MongoDBResourceMongoDBCollectionTypeArgs and MongoDBResourceMongoDBCollectionTypeOutput values.
// You can construct a concrete instance of `MongoDBResourceMongoDBCollectionTypeInput` via:
//
//          MongoDBResourceMongoDBCollectionTypeArgs{...}
type MongoDBResourceMongoDBCollectionTypeInput interface {
	pulumi.Input

	ToMongoDBResourceMongoDBCollectionTypeOutput() MongoDBResourceMongoDBCollectionTypeOutput
	ToMongoDBResourceMongoDBCollectionTypeOutputWithContext(context.Context) MongoDBResourceMongoDBCollectionTypeOutput
}

// An Azure Cosmos DB MongoDB collection.
type MongoDBResourceMongoDBCollectionTypeArgs struct {
	// The location of the resource group to which the resource belongs.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the ARM resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of an Azure Cosmos DB MongoDB collection
	Properties MongoDBCollectionGetPropertiesResponseInput `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags TagsResponsePtrInput `pulumi:"tags"`
	// The type of Azure resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MongoDBResourceMongoDBCollectionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDBResourceMongoDBCollectionType)(nil)).Elem()
}

func (i MongoDBResourceMongoDBCollectionTypeArgs) ToMongoDBResourceMongoDBCollectionTypeOutput() MongoDBResourceMongoDBCollectionTypeOutput {
	return i.ToMongoDBResourceMongoDBCollectionTypeOutputWithContext(context.Background())
}

func (i MongoDBResourceMongoDBCollectionTypeArgs) ToMongoDBResourceMongoDBCollectionTypeOutputWithContext(ctx context.Context) MongoDBResourceMongoDBCollectionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDBResourceMongoDBCollectionTypeOutput)
}

// An Azure Cosmos DB MongoDB collection.
type MongoDBResourceMongoDBCollectionTypeOutput struct{ *pulumi.OutputState }

func (MongoDBResourceMongoDBCollectionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDBResourceMongoDBCollectionType)(nil)).Elem()
}

func (o MongoDBResourceMongoDBCollectionTypeOutput) ToMongoDBResourceMongoDBCollectionTypeOutput() MongoDBResourceMongoDBCollectionTypeOutput {
	return o
}

func (o MongoDBResourceMongoDBCollectionTypeOutput) ToMongoDBResourceMongoDBCollectionTypeOutputWithContext(ctx context.Context) MongoDBResourceMongoDBCollectionTypeOutput {
	return o
}

// The location of the resource group to which the resource belongs.
func (o MongoDBResourceMongoDBCollectionTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDBResourceMongoDBCollectionType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the ARM resource.
func (o MongoDBResourceMongoDBCollectionTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDBResourceMongoDBCollectionType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of an Azure Cosmos DB MongoDB collection
func (o MongoDBResourceMongoDBCollectionTypeOutput) Properties() MongoDBCollectionGetPropertiesResponseOutput {
	return o.ApplyT(func(v MongoDBResourceMongoDBCollectionType) MongoDBCollectionGetPropertiesResponse {
		return v.Properties
	}).(MongoDBCollectionGetPropertiesResponseOutput)
}

// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
func (o MongoDBResourceMongoDBCollectionTypeOutput) Tags() TagsResponsePtrOutput {
	return o.ApplyT(func(v MongoDBResourceMongoDBCollectionType) *TagsResponse { return v.Tags }).(TagsResponsePtrOutput)
}

// The type of Azure resource.
func (o MongoDBResourceMongoDBCollectionTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDBResourceMongoDBCollectionType) string { return v.Type }).(pulumi.StringOutput)
}

// An Azure Cosmos DB MongoDB database.
type MongoDBResourceMongoDBDatabaseType struct {
	// The location of the resource group to which the resource belongs.
	Location *string `pulumi:"location"`
	// The name of the ARM resource.
	Name string `pulumi:"name"`
	// The properties of an Azure Cosmos DB MongoDB database
	Properties MongoDBDatabaseGetPropertiesResponse `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags *TagsResponse `pulumi:"tags"`
	// The type of Azure resource.
	Type string `pulumi:"type"`
}

// MongoDBResourceMongoDBDatabaseTypeInput is an input type that accepts MongoDBResourceMongoDBDatabaseTypeArgs and MongoDBResourceMongoDBDatabaseTypeOutput values.
// You can construct a concrete instance of `MongoDBResourceMongoDBDatabaseTypeInput` via:
//
//          MongoDBResourceMongoDBDatabaseTypeArgs{...}
type MongoDBResourceMongoDBDatabaseTypeInput interface {
	pulumi.Input

	ToMongoDBResourceMongoDBDatabaseTypeOutput() MongoDBResourceMongoDBDatabaseTypeOutput
	ToMongoDBResourceMongoDBDatabaseTypeOutputWithContext(context.Context) MongoDBResourceMongoDBDatabaseTypeOutput
}

// An Azure Cosmos DB MongoDB database.
type MongoDBResourceMongoDBDatabaseTypeArgs struct {
	// The location of the resource group to which the resource belongs.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the ARM resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of an Azure Cosmos DB MongoDB database
	Properties MongoDBDatabaseGetPropertiesResponseInput `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags TagsResponsePtrInput `pulumi:"tags"`
	// The type of Azure resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MongoDBResourceMongoDBDatabaseTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDBResourceMongoDBDatabaseType)(nil)).Elem()
}

func (i MongoDBResourceMongoDBDatabaseTypeArgs) ToMongoDBResourceMongoDBDatabaseTypeOutput() MongoDBResourceMongoDBDatabaseTypeOutput {
	return i.ToMongoDBResourceMongoDBDatabaseTypeOutputWithContext(context.Background())
}

func (i MongoDBResourceMongoDBDatabaseTypeArgs) ToMongoDBResourceMongoDBDatabaseTypeOutputWithContext(ctx context.Context) MongoDBResourceMongoDBDatabaseTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDBResourceMongoDBDatabaseTypeOutput)
}

// An Azure Cosmos DB MongoDB database.
type MongoDBResourceMongoDBDatabaseTypeOutput struct{ *pulumi.OutputState }

func (MongoDBResourceMongoDBDatabaseTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDBResourceMongoDBDatabaseType)(nil)).Elem()
}

func (o MongoDBResourceMongoDBDatabaseTypeOutput) ToMongoDBResourceMongoDBDatabaseTypeOutput() MongoDBResourceMongoDBDatabaseTypeOutput {
	return o
}

func (o MongoDBResourceMongoDBDatabaseTypeOutput) ToMongoDBResourceMongoDBDatabaseTypeOutputWithContext(ctx context.Context) MongoDBResourceMongoDBDatabaseTypeOutput {
	return o
}

// The location of the resource group to which the resource belongs.
func (o MongoDBResourceMongoDBDatabaseTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDBResourceMongoDBDatabaseType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the ARM resource.
func (o MongoDBResourceMongoDBDatabaseTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDBResourceMongoDBDatabaseType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of an Azure Cosmos DB MongoDB database
func (o MongoDBResourceMongoDBDatabaseTypeOutput) Properties() MongoDBDatabaseGetPropertiesResponseOutput {
	return o.ApplyT(func(v MongoDBResourceMongoDBDatabaseType) MongoDBDatabaseGetPropertiesResponse { return v.Properties }).(MongoDBDatabaseGetPropertiesResponseOutput)
}

// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
func (o MongoDBResourceMongoDBDatabaseTypeOutput) Tags() TagsResponsePtrOutput {
	return o.ApplyT(func(v MongoDBResourceMongoDBDatabaseType) *TagsResponse { return v.Tags }).(TagsResponsePtrOutput)
}

// The type of Azure resource.
func (o MongoDBResourceMongoDBDatabaseTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDBResourceMongoDBDatabaseType) string { return v.Type }).(pulumi.StringOutput)
}

// Cosmos DB MongoDB collection index key
type MongoIndex struct {
	// Cosmos DB MongoDB collection index keys
	Key *MongoIndexKeys `pulumi:"key"`
	// Cosmos DB MongoDB collection index key options
	Options *MongoIndexOptions `pulumi:"options"`
}

// MongoIndexInput is an input type that accepts MongoIndexArgs and MongoIndexOutput values.
// You can construct a concrete instance of `MongoIndexInput` via:
//
//          MongoIndexArgs{...}
type MongoIndexInput interface {
	pulumi.Input

	ToMongoIndexOutput() MongoIndexOutput
	ToMongoIndexOutputWithContext(context.Context) MongoIndexOutput
}

// Cosmos DB MongoDB collection index key
type MongoIndexArgs struct {
	// Cosmos DB MongoDB collection index keys
	Key MongoIndexKeysPtrInput `pulumi:"key"`
	// Cosmos DB MongoDB collection index key options
	Options MongoIndexOptionsPtrInput `pulumi:"options"`
}

func (MongoIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoIndex)(nil)).Elem()
}

func (i MongoIndexArgs) ToMongoIndexOutput() MongoIndexOutput {
	return i.ToMongoIndexOutputWithContext(context.Background())
}

func (i MongoIndexArgs) ToMongoIndexOutputWithContext(ctx context.Context) MongoIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexOutput)
}

// MongoIndexArrayInput is an input type that accepts MongoIndexArray and MongoIndexArrayOutput values.
// You can construct a concrete instance of `MongoIndexArrayInput` via:
//
//          MongoIndexArray{ MongoIndexArgs{...} }
type MongoIndexArrayInput interface {
	pulumi.Input

	ToMongoIndexArrayOutput() MongoIndexArrayOutput
	ToMongoIndexArrayOutputWithContext(context.Context) MongoIndexArrayOutput
}

type MongoIndexArray []MongoIndexInput

func (MongoIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoIndex)(nil)).Elem()
}

func (i MongoIndexArray) ToMongoIndexArrayOutput() MongoIndexArrayOutput {
	return i.ToMongoIndexArrayOutputWithContext(context.Background())
}

func (i MongoIndexArray) ToMongoIndexArrayOutputWithContext(ctx context.Context) MongoIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexArrayOutput)
}

// Cosmos DB MongoDB collection index key
type MongoIndexOutput struct{ *pulumi.OutputState }

func (MongoIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoIndex)(nil)).Elem()
}

func (o MongoIndexOutput) ToMongoIndexOutput() MongoIndexOutput {
	return o
}

func (o MongoIndexOutput) ToMongoIndexOutputWithContext(ctx context.Context) MongoIndexOutput {
	return o
}

// Cosmos DB MongoDB collection index keys
func (o MongoIndexOutput) Key() MongoIndexKeysPtrOutput {
	return o.ApplyT(func(v MongoIndex) *MongoIndexKeys { return v.Key }).(MongoIndexKeysPtrOutput)
}

// Cosmos DB MongoDB collection index key options
func (o MongoIndexOutput) Options() MongoIndexOptionsPtrOutput {
	return o.ApplyT(func(v MongoIndex) *MongoIndexOptions { return v.Options }).(MongoIndexOptionsPtrOutput)
}

type MongoIndexArrayOutput struct{ *pulumi.OutputState }

func (MongoIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoIndex)(nil)).Elem()
}

func (o MongoIndexArrayOutput) ToMongoIndexArrayOutput() MongoIndexArrayOutput {
	return o
}

func (o MongoIndexArrayOutput) ToMongoIndexArrayOutputWithContext(ctx context.Context) MongoIndexArrayOutput {
	return o
}

func (o MongoIndexArrayOutput) Index(i pulumi.IntInput) MongoIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MongoIndex {
		return vs[0].([]MongoIndex)[vs[1].(int)]
	}).(MongoIndexOutput)
}

// Cosmos DB MongoDB collection resource object
type MongoIndexKeys struct {
	// List of keys for each MongoDB collection in the Azure Cosmos DB service
	Keys []string `pulumi:"keys"`
}

// MongoIndexKeysInput is an input type that accepts MongoIndexKeysArgs and MongoIndexKeysOutput values.
// You can construct a concrete instance of `MongoIndexKeysInput` via:
//
//          MongoIndexKeysArgs{...}
type MongoIndexKeysInput interface {
	pulumi.Input

	ToMongoIndexKeysOutput() MongoIndexKeysOutput
	ToMongoIndexKeysOutputWithContext(context.Context) MongoIndexKeysOutput
}

// Cosmos DB MongoDB collection resource object
type MongoIndexKeysArgs struct {
	// List of keys for each MongoDB collection in the Azure Cosmos DB service
	Keys pulumi.StringArrayInput `pulumi:"keys"`
}

func (MongoIndexKeysArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoIndexKeys)(nil)).Elem()
}

func (i MongoIndexKeysArgs) ToMongoIndexKeysOutput() MongoIndexKeysOutput {
	return i.ToMongoIndexKeysOutputWithContext(context.Background())
}

func (i MongoIndexKeysArgs) ToMongoIndexKeysOutputWithContext(ctx context.Context) MongoIndexKeysOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexKeysOutput)
}

func (i MongoIndexKeysArgs) ToMongoIndexKeysPtrOutput() MongoIndexKeysPtrOutput {
	return i.ToMongoIndexKeysPtrOutputWithContext(context.Background())
}

func (i MongoIndexKeysArgs) ToMongoIndexKeysPtrOutputWithContext(ctx context.Context) MongoIndexKeysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexKeysOutput).ToMongoIndexKeysPtrOutputWithContext(ctx)
}

// MongoIndexKeysPtrInput is an input type that accepts MongoIndexKeysArgs, MongoIndexKeysPtr and MongoIndexKeysPtrOutput values.
// You can construct a concrete instance of `MongoIndexKeysPtrInput` via:
//
//          MongoIndexKeysArgs{...}
//
//  or:
//
//          nil
type MongoIndexKeysPtrInput interface {
	pulumi.Input

	ToMongoIndexKeysPtrOutput() MongoIndexKeysPtrOutput
	ToMongoIndexKeysPtrOutputWithContext(context.Context) MongoIndexKeysPtrOutput
}

type mongoIndexKeysPtrType MongoIndexKeysArgs

func MongoIndexKeysPtr(v *MongoIndexKeysArgs) MongoIndexKeysPtrInput {
	return (*mongoIndexKeysPtrType)(v)
}

func (*mongoIndexKeysPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoIndexKeys)(nil)).Elem()
}

func (i *mongoIndexKeysPtrType) ToMongoIndexKeysPtrOutput() MongoIndexKeysPtrOutput {
	return i.ToMongoIndexKeysPtrOutputWithContext(context.Background())
}

func (i *mongoIndexKeysPtrType) ToMongoIndexKeysPtrOutputWithContext(ctx context.Context) MongoIndexKeysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexKeysPtrOutput)
}

// Cosmos DB MongoDB collection resource object
type MongoIndexKeysOutput struct{ *pulumi.OutputState }

func (MongoIndexKeysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoIndexKeys)(nil)).Elem()
}

func (o MongoIndexKeysOutput) ToMongoIndexKeysOutput() MongoIndexKeysOutput {
	return o
}

func (o MongoIndexKeysOutput) ToMongoIndexKeysOutputWithContext(ctx context.Context) MongoIndexKeysOutput {
	return o
}

func (o MongoIndexKeysOutput) ToMongoIndexKeysPtrOutput() MongoIndexKeysPtrOutput {
	return o.ToMongoIndexKeysPtrOutputWithContext(context.Background())
}

func (o MongoIndexKeysOutput) ToMongoIndexKeysPtrOutputWithContext(ctx context.Context) MongoIndexKeysPtrOutput {
	return o.ApplyT(func(v MongoIndexKeys) *MongoIndexKeys {
		return &v
	}).(MongoIndexKeysPtrOutput)
}

// List of keys for each MongoDB collection in the Azure Cosmos DB service
func (o MongoIndexKeysOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MongoIndexKeys) []string { return v.Keys }).(pulumi.StringArrayOutput)
}

type MongoIndexKeysPtrOutput struct{ *pulumi.OutputState }

func (MongoIndexKeysPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoIndexKeys)(nil)).Elem()
}

func (o MongoIndexKeysPtrOutput) ToMongoIndexKeysPtrOutput() MongoIndexKeysPtrOutput {
	return o
}

func (o MongoIndexKeysPtrOutput) ToMongoIndexKeysPtrOutputWithContext(ctx context.Context) MongoIndexKeysPtrOutput {
	return o
}

func (o MongoIndexKeysPtrOutput) Elem() MongoIndexKeysOutput {
	return o.ApplyT(func(v *MongoIndexKeys) MongoIndexKeys { return *v }).(MongoIndexKeysOutput)
}

// List of keys for each MongoDB collection in the Azure Cosmos DB service
func (o MongoIndexKeysPtrOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MongoIndexKeys) []string {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.StringArrayOutput)
}

// Cosmos DB MongoDB collection index options
type MongoIndexOptions struct {
	// Expire after seconds
	ExpireAfterSeconds *int `pulumi:"expireAfterSeconds"`
	// Is unique or not
	Unique *bool `pulumi:"unique"`
}

// MongoIndexOptionsInput is an input type that accepts MongoIndexOptionsArgs and MongoIndexOptionsOutput values.
// You can construct a concrete instance of `MongoIndexOptionsInput` via:
//
//          MongoIndexOptionsArgs{...}
type MongoIndexOptionsInput interface {
	pulumi.Input

	ToMongoIndexOptionsOutput() MongoIndexOptionsOutput
	ToMongoIndexOptionsOutputWithContext(context.Context) MongoIndexOptionsOutput
}

// Cosmos DB MongoDB collection index options
type MongoIndexOptionsArgs struct {
	// Expire after seconds
	ExpireAfterSeconds pulumi.IntPtrInput `pulumi:"expireAfterSeconds"`
	// Is unique or not
	Unique pulumi.BoolPtrInput `pulumi:"unique"`
}

func (MongoIndexOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoIndexOptions)(nil)).Elem()
}

func (i MongoIndexOptionsArgs) ToMongoIndexOptionsOutput() MongoIndexOptionsOutput {
	return i.ToMongoIndexOptionsOutputWithContext(context.Background())
}

func (i MongoIndexOptionsArgs) ToMongoIndexOptionsOutputWithContext(ctx context.Context) MongoIndexOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexOptionsOutput)
}

func (i MongoIndexOptionsArgs) ToMongoIndexOptionsPtrOutput() MongoIndexOptionsPtrOutput {
	return i.ToMongoIndexOptionsPtrOutputWithContext(context.Background())
}

func (i MongoIndexOptionsArgs) ToMongoIndexOptionsPtrOutputWithContext(ctx context.Context) MongoIndexOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexOptionsOutput).ToMongoIndexOptionsPtrOutputWithContext(ctx)
}

// MongoIndexOptionsPtrInput is an input type that accepts MongoIndexOptionsArgs, MongoIndexOptionsPtr and MongoIndexOptionsPtrOutput values.
// You can construct a concrete instance of `MongoIndexOptionsPtrInput` via:
//
//          MongoIndexOptionsArgs{...}
//
//  or:
//
//          nil
type MongoIndexOptionsPtrInput interface {
	pulumi.Input

	ToMongoIndexOptionsPtrOutput() MongoIndexOptionsPtrOutput
	ToMongoIndexOptionsPtrOutputWithContext(context.Context) MongoIndexOptionsPtrOutput
}

type mongoIndexOptionsPtrType MongoIndexOptionsArgs

func MongoIndexOptionsPtr(v *MongoIndexOptionsArgs) MongoIndexOptionsPtrInput {
	return (*mongoIndexOptionsPtrType)(v)
}

func (*mongoIndexOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoIndexOptions)(nil)).Elem()
}

func (i *mongoIndexOptionsPtrType) ToMongoIndexOptionsPtrOutput() MongoIndexOptionsPtrOutput {
	return i.ToMongoIndexOptionsPtrOutputWithContext(context.Background())
}

func (i *mongoIndexOptionsPtrType) ToMongoIndexOptionsPtrOutputWithContext(ctx context.Context) MongoIndexOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoIndexOptionsPtrOutput)
}

// Cosmos DB MongoDB collection index options
type MongoIndexOptionsOutput struct{ *pulumi.OutputState }

func (MongoIndexOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoIndexOptions)(nil)).Elem()
}

func (o MongoIndexOptionsOutput) ToMongoIndexOptionsOutput() MongoIndexOptionsOutput {
	return o
}

func (o MongoIndexOptionsOutput) ToMongoIndexOptionsOutputWithContext(ctx context.Context) MongoIndexOptionsOutput {
	return o
}

func (o MongoIndexOptionsOutput) ToMongoIndexOptionsPtrOutput() MongoIndexOptionsPtrOutput {
	return o.ToMongoIndexOptionsPtrOutputWithContext(context.Background())
}

func (o MongoIndexOptionsOutput) ToMongoIndexOptionsPtrOutputWithContext(ctx context.Context) MongoIndexOptionsPtrOutput {
	return o.ApplyT(func(v MongoIndexOptions) *MongoIndexOptions {
		return &v
	}).(MongoIndexOptionsPtrOutput)
}

// Expire after seconds
func (o MongoIndexOptionsOutput) ExpireAfterSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MongoIndexOptions) *int { return v.ExpireAfterSeconds }).(pulumi.IntPtrOutput)
}

// Is unique or not
func (o MongoIndexOptionsOutput) Unique() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MongoIndexOptions) *bool { return v.Unique }).(pulumi.BoolPtrOutput)
}

type MongoIndexOptionsPtrOutput struct{ *pulumi.OutputState }

func (MongoIndexOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoIndexOptions)(nil)).Elem()
}

func (o MongoIndexOptionsPtrOutput) ToMongoIndexOptionsPtrOutput() MongoIndexOptionsPtrOutput {
	return o
}

func (o MongoIndexOptionsPtrOutput) ToMongoIndexOptionsPtrOutputWithContext(ctx context.Context) MongoIndexOptionsPtrOutput {
	return o
}

func (o MongoIndexOptionsPtrOutput) Elem() MongoIndexOptionsOutput {
	return o.ApplyT(func(v *MongoIndexOptions) MongoIndexOptions { return *v }).(MongoIndexOptionsOutput)
}

// Expire after seconds
func (o MongoIndexOptionsPtrOutput) ExpireAfterSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MongoIndexOptions) *int {
		if v == nil {
			return nil
		}
		return v.ExpireAfterSeconds
	}).(pulumi.IntPtrOutput)
}

// Is unique or not
func (o MongoIndexOptionsPtrOutput) Unique() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MongoIndexOptions) *bool {
		if v == nil {
			return nil
		}
		return v.Unique
	}).(pulumi.BoolPtrOutput)
}

// A notebook workspace resource
type NotebookWorkspaceType struct {
	// The name of the database account.
	Name string `pulumi:"name"`
	// Resource properties.
	Properties NotebookWorkspacePropertiesResponse `pulumi:"properties"`
	// The type of Azure resource.
	Type string `pulumi:"type"`
}

// NotebookWorkspaceTypeInput is an input type that accepts NotebookWorkspaceTypeArgs and NotebookWorkspaceTypeOutput values.
// You can construct a concrete instance of `NotebookWorkspaceTypeInput` via:
//
//          NotebookWorkspaceTypeArgs{...}
type NotebookWorkspaceTypeInput interface {
	pulumi.Input

	ToNotebookWorkspaceTypeOutput() NotebookWorkspaceTypeOutput
	ToNotebookWorkspaceTypeOutputWithContext(context.Context) NotebookWorkspaceTypeOutput
}

// A notebook workspace resource
type NotebookWorkspaceTypeArgs struct {
	// The name of the database account.
	Name pulumi.StringInput `pulumi:"name"`
	// Resource properties.
	Properties NotebookWorkspacePropertiesResponseInput `pulumi:"properties"`
	// The type of Azure resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NotebookWorkspaceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotebookWorkspaceType)(nil)).Elem()
}

func (i NotebookWorkspaceTypeArgs) ToNotebookWorkspaceTypeOutput() NotebookWorkspaceTypeOutput {
	return i.ToNotebookWorkspaceTypeOutputWithContext(context.Background())
}

func (i NotebookWorkspaceTypeArgs) ToNotebookWorkspaceTypeOutputWithContext(ctx context.Context) NotebookWorkspaceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotebookWorkspaceTypeOutput)
}

// A notebook workspace resource
type NotebookWorkspaceTypeOutput struct{ *pulumi.OutputState }

func (NotebookWorkspaceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotebookWorkspaceType)(nil)).Elem()
}

func (o NotebookWorkspaceTypeOutput) ToNotebookWorkspaceTypeOutput() NotebookWorkspaceTypeOutput {
	return o
}

func (o NotebookWorkspaceTypeOutput) ToNotebookWorkspaceTypeOutputWithContext(ctx context.Context) NotebookWorkspaceTypeOutput {
	return o
}

// The name of the database account.
func (o NotebookWorkspaceTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NotebookWorkspaceType) string { return v.Name }).(pulumi.StringOutput)
}

// Resource properties.
func (o NotebookWorkspaceTypeOutput) Properties() NotebookWorkspacePropertiesResponseOutput {
	return o.ApplyT(func(v NotebookWorkspaceType) NotebookWorkspacePropertiesResponse { return v.Properties }).(NotebookWorkspacePropertiesResponseOutput)
}

// The type of Azure resource.
func (o NotebookWorkspaceTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NotebookWorkspaceType) string { return v.Type }).(pulumi.StringOutput)
}

// Properties of a notebook workspace resource.
type NotebookWorkspacePropertiesResponse struct {
	// Specifies the endpoint of Notebook server.
	NotebookServerEndpoint string `pulumi:"notebookServerEndpoint"`
	// Status of the notebook workspace. Possible values are: Creating, Online, Deleting, Failed, Updating.
	Status string `pulumi:"status"`
}

// NotebookWorkspacePropertiesResponseInput is an input type that accepts NotebookWorkspacePropertiesResponseArgs and NotebookWorkspacePropertiesResponseOutput values.
// You can construct a concrete instance of `NotebookWorkspacePropertiesResponseInput` via:
//
//          NotebookWorkspacePropertiesResponseArgs{...}
type NotebookWorkspacePropertiesResponseInput interface {
	pulumi.Input

	ToNotebookWorkspacePropertiesResponseOutput() NotebookWorkspacePropertiesResponseOutput
	ToNotebookWorkspacePropertiesResponseOutputWithContext(context.Context) NotebookWorkspacePropertiesResponseOutput
}

// Properties of a notebook workspace resource.
type NotebookWorkspacePropertiesResponseArgs struct {
	// Specifies the endpoint of Notebook server.
	NotebookServerEndpoint pulumi.StringInput `pulumi:"notebookServerEndpoint"`
	// Status of the notebook workspace. Possible values are: Creating, Online, Deleting, Failed, Updating.
	Status pulumi.StringInput `pulumi:"status"`
}

func (NotebookWorkspacePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotebookWorkspacePropertiesResponse)(nil)).Elem()
}

func (i NotebookWorkspacePropertiesResponseArgs) ToNotebookWorkspacePropertiesResponseOutput() NotebookWorkspacePropertiesResponseOutput {
	return i.ToNotebookWorkspacePropertiesResponseOutputWithContext(context.Background())
}

func (i NotebookWorkspacePropertiesResponseArgs) ToNotebookWorkspacePropertiesResponseOutputWithContext(ctx context.Context) NotebookWorkspacePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotebookWorkspacePropertiesResponseOutput)
}

func (i NotebookWorkspacePropertiesResponseArgs) ToNotebookWorkspacePropertiesResponsePtrOutput() NotebookWorkspacePropertiesResponsePtrOutput {
	return i.ToNotebookWorkspacePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i NotebookWorkspacePropertiesResponseArgs) ToNotebookWorkspacePropertiesResponsePtrOutputWithContext(ctx context.Context) NotebookWorkspacePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotebookWorkspacePropertiesResponseOutput).ToNotebookWorkspacePropertiesResponsePtrOutputWithContext(ctx)
}

// NotebookWorkspacePropertiesResponsePtrInput is an input type that accepts NotebookWorkspacePropertiesResponseArgs, NotebookWorkspacePropertiesResponsePtr and NotebookWorkspacePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `NotebookWorkspacePropertiesResponsePtrInput` via:
//
//          NotebookWorkspacePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type NotebookWorkspacePropertiesResponsePtrInput interface {
	pulumi.Input

	ToNotebookWorkspacePropertiesResponsePtrOutput() NotebookWorkspacePropertiesResponsePtrOutput
	ToNotebookWorkspacePropertiesResponsePtrOutputWithContext(context.Context) NotebookWorkspacePropertiesResponsePtrOutput
}

type notebookWorkspacePropertiesResponsePtrType NotebookWorkspacePropertiesResponseArgs

func NotebookWorkspacePropertiesResponsePtr(v *NotebookWorkspacePropertiesResponseArgs) NotebookWorkspacePropertiesResponsePtrInput {
	return (*notebookWorkspacePropertiesResponsePtrType)(v)
}

func (*notebookWorkspacePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NotebookWorkspacePropertiesResponse)(nil)).Elem()
}

func (i *notebookWorkspacePropertiesResponsePtrType) ToNotebookWorkspacePropertiesResponsePtrOutput() NotebookWorkspacePropertiesResponsePtrOutput {
	return i.ToNotebookWorkspacePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *notebookWorkspacePropertiesResponsePtrType) ToNotebookWorkspacePropertiesResponsePtrOutputWithContext(ctx context.Context) NotebookWorkspacePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotebookWorkspacePropertiesResponsePtrOutput)
}

// Properties of a notebook workspace resource.
type NotebookWorkspacePropertiesResponseOutput struct{ *pulumi.OutputState }

func (NotebookWorkspacePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotebookWorkspacePropertiesResponse)(nil)).Elem()
}

func (o NotebookWorkspacePropertiesResponseOutput) ToNotebookWorkspacePropertiesResponseOutput() NotebookWorkspacePropertiesResponseOutput {
	return o
}

func (o NotebookWorkspacePropertiesResponseOutput) ToNotebookWorkspacePropertiesResponseOutputWithContext(ctx context.Context) NotebookWorkspacePropertiesResponseOutput {
	return o
}

func (o NotebookWorkspacePropertiesResponseOutput) ToNotebookWorkspacePropertiesResponsePtrOutput() NotebookWorkspacePropertiesResponsePtrOutput {
	return o.ToNotebookWorkspacePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o NotebookWorkspacePropertiesResponseOutput) ToNotebookWorkspacePropertiesResponsePtrOutputWithContext(ctx context.Context) NotebookWorkspacePropertiesResponsePtrOutput {
	return o.ApplyT(func(v NotebookWorkspacePropertiesResponse) *NotebookWorkspacePropertiesResponse {
		return &v
	}).(NotebookWorkspacePropertiesResponsePtrOutput)
}

// Specifies the endpoint of Notebook server.
func (o NotebookWorkspacePropertiesResponseOutput) NotebookServerEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v NotebookWorkspacePropertiesResponse) string { return v.NotebookServerEndpoint }).(pulumi.StringOutput)
}

// Status of the notebook workspace. Possible values are: Creating, Online, Deleting, Failed, Updating.
func (o NotebookWorkspacePropertiesResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v NotebookWorkspacePropertiesResponse) string { return v.Status }).(pulumi.StringOutput)
}

type NotebookWorkspacePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (NotebookWorkspacePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotebookWorkspacePropertiesResponse)(nil)).Elem()
}

func (o NotebookWorkspacePropertiesResponsePtrOutput) ToNotebookWorkspacePropertiesResponsePtrOutput() NotebookWorkspacePropertiesResponsePtrOutput {
	return o
}

func (o NotebookWorkspacePropertiesResponsePtrOutput) ToNotebookWorkspacePropertiesResponsePtrOutputWithContext(ctx context.Context) NotebookWorkspacePropertiesResponsePtrOutput {
	return o
}

func (o NotebookWorkspacePropertiesResponsePtrOutput) Elem() NotebookWorkspacePropertiesResponseOutput {
	return o.ApplyT(func(v *NotebookWorkspacePropertiesResponse) NotebookWorkspacePropertiesResponse { return *v }).(NotebookWorkspacePropertiesResponseOutput)
}

// Specifies the endpoint of Notebook server.
func (o NotebookWorkspacePropertiesResponsePtrOutput) NotebookServerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotebookWorkspacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NotebookServerEndpoint
	}).(pulumi.StringPtrOutput)
}

// Status of the notebook workspace. Possible values are: Creating, Online, Deleting, Failed, Updating.
func (o NotebookWorkspacePropertiesResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotebookWorkspacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// The shard key and partition kind pair, only support "Hash" partition kind
type ShardKeys struct {
}

// ShardKeysInput is an input type that accepts ShardKeysArgs and ShardKeysOutput values.
// You can construct a concrete instance of `ShardKeysInput` via:
//
//          ShardKeysArgs{...}
type ShardKeysInput interface {
	pulumi.Input

	ToShardKeysOutput() ShardKeysOutput
	ToShardKeysOutputWithContext(context.Context) ShardKeysOutput
}

// The shard key and partition kind pair, only support "Hash" partition kind
type ShardKeysArgs struct {
}

func (ShardKeysArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShardKeys)(nil)).Elem()
}

func (i ShardKeysArgs) ToShardKeysOutput() ShardKeysOutput {
	return i.ToShardKeysOutputWithContext(context.Background())
}

func (i ShardKeysArgs) ToShardKeysOutputWithContext(ctx context.Context) ShardKeysOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShardKeysOutput)
}

func (i ShardKeysArgs) ToShardKeysPtrOutput() ShardKeysPtrOutput {
	return i.ToShardKeysPtrOutputWithContext(context.Background())
}

func (i ShardKeysArgs) ToShardKeysPtrOutputWithContext(ctx context.Context) ShardKeysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShardKeysOutput).ToShardKeysPtrOutputWithContext(ctx)
}

// ShardKeysPtrInput is an input type that accepts ShardKeysArgs, ShardKeysPtr and ShardKeysPtrOutput values.
// You can construct a concrete instance of `ShardKeysPtrInput` via:
//
//          ShardKeysArgs{...}
//
//  or:
//
//          nil
type ShardKeysPtrInput interface {
	pulumi.Input

	ToShardKeysPtrOutput() ShardKeysPtrOutput
	ToShardKeysPtrOutputWithContext(context.Context) ShardKeysPtrOutput
}

type shardKeysPtrType ShardKeysArgs

func ShardKeysPtr(v *ShardKeysArgs) ShardKeysPtrInput {
	return (*shardKeysPtrType)(v)
}

func (*shardKeysPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShardKeys)(nil)).Elem()
}

func (i *shardKeysPtrType) ToShardKeysPtrOutput() ShardKeysPtrOutput {
	return i.ToShardKeysPtrOutputWithContext(context.Background())
}

func (i *shardKeysPtrType) ToShardKeysPtrOutputWithContext(ctx context.Context) ShardKeysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShardKeysPtrOutput)
}

// The shard key and partition kind pair, only support "Hash" partition kind
type ShardKeysOutput struct{ *pulumi.OutputState }

func (ShardKeysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShardKeys)(nil)).Elem()
}

func (o ShardKeysOutput) ToShardKeysOutput() ShardKeysOutput {
	return o
}

func (o ShardKeysOutput) ToShardKeysOutputWithContext(ctx context.Context) ShardKeysOutput {
	return o
}

func (o ShardKeysOutput) ToShardKeysPtrOutput() ShardKeysPtrOutput {
	return o.ToShardKeysPtrOutputWithContext(context.Background())
}

func (o ShardKeysOutput) ToShardKeysPtrOutputWithContext(ctx context.Context) ShardKeysPtrOutput {
	return o.ApplyT(func(v ShardKeys) *ShardKeys {
		return &v
	}).(ShardKeysPtrOutput)
}

type ShardKeysPtrOutput struct{ *pulumi.OutputState }

func (ShardKeysPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShardKeys)(nil)).Elem()
}

func (o ShardKeysPtrOutput) ToShardKeysPtrOutput() ShardKeysPtrOutput {
	return o
}

func (o ShardKeysPtrOutput) ToShardKeysPtrOutputWithContext(ctx context.Context) ShardKeysPtrOutput {
	return o
}

func (o ShardKeysPtrOutput) Elem() ShardKeysOutput {
	return o.ApplyT(func(v *ShardKeys) ShardKeys { return *v }).(ShardKeysOutput)
}

type SpatialSpec struct {
	// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
	Path *string `pulumi:"path"`
	// List of path's spatial type
	Types []string `pulumi:"types"`
}

// SpatialSpecInput is an input type that accepts SpatialSpecArgs and SpatialSpecOutput values.
// You can construct a concrete instance of `SpatialSpecInput` via:
//
//          SpatialSpecArgs{...}
type SpatialSpecInput interface {
	pulumi.Input

	ToSpatialSpecOutput() SpatialSpecOutput
	ToSpatialSpecOutputWithContext(context.Context) SpatialSpecOutput
}

type SpatialSpecArgs struct {
	// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
	Path pulumi.StringPtrInput `pulumi:"path"`
	// List of path's spatial type
	Types pulumi.StringArrayInput `pulumi:"types"`
}

func (SpatialSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpatialSpec)(nil)).Elem()
}

func (i SpatialSpecArgs) ToSpatialSpecOutput() SpatialSpecOutput {
	return i.ToSpatialSpecOutputWithContext(context.Background())
}

func (i SpatialSpecArgs) ToSpatialSpecOutputWithContext(ctx context.Context) SpatialSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpatialSpecOutput)
}

// SpatialSpecArrayInput is an input type that accepts SpatialSpecArray and SpatialSpecArrayOutput values.
// You can construct a concrete instance of `SpatialSpecArrayInput` via:
//
//          SpatialSpecArray{ SpatialSpecArgs{...} }
type SpatialSpecArrayInput interface {
	pulumi.Input

	ToSpatialSpecArrayOutput() SpatialSpecArrayOutput
	ToSpatialSpecArrayOutputWithContext(context.Context) SpatialSpecArrayOutput
}

type SpatialSpecArray []SpatialSpecInput

func (SpatialSpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpatialSpec)(nil)).Elem()
}

func (i SpatialSpecArray) ToSpatialSpecArrayOutput() SpatialSpecArrayOutput {
	return i.ToSpatialSpecArrayOutputWithContext(context.Background())
}

func (i SpatialSpecArray) ToSpatialSpecArrayOutputWithContext(ctx context.Context) SpatialSpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpatialSpecArrayOutput)
}

type SpatialSpecOutput struct{ *pulumi.OutputState }

func (SpatialSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpatialSpec)(nil)).Elem()
}

func (o SpatialSpecOutput) ToSpatialSpecOutput() SpatialSpecOutput {
	return o
}

func (o SpatialSpecOutput) ToSpatialSpecOutputWithContext(ctx context.Context) SpatialSpecOutput {
	return o
}

// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
func (o SpatialSpecOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpatialSpec) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// List of path's spatial type
func (o SpatialSpecOutput) Types() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SpatialSpec) []string { return v.Types }).(pulumi.StringArrayOutput)
}

type SpatialSpecArrayOutput struct{ *pulumi.OutputState }

func (SpatialSpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpatialSpec)(nil)).Elem()
}

func (o SpatialSpecArrayOutput) ToSpatialSpecArrayOutput() SpatialSpecArrayOutput {
	return o
}

func (o SpatialSpecArrayOutput) ToSpatialSpecArrayOutputWithContext(ctx context.Context) SpatialSpecArrayOutput {
	return o
}

func (o SpatialSpecArrayOutput) Index(i pulumi.IntInput) SpatialSpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpatialSpec {
		return vs[0].([]SpatialSpec)[vs[1].(int)]
	}).(SpatialSpecOutput)
}

// The properties of an Azure Cosmos DB container
type SqlContainerGetPropertiesResponse struct {
	Resource map[string]interface{} `pulumi:"resource"`
}

// SqlContainerGetPropertiesResponseInput is an input type that accepts SqlContainerGetPropertiesResponseArgs and SqlContainerGetPropertiesResponseOutput values.
// You can construct a concrete instance of `SqlContainerGetPropertiesResponseInput` via:
//
//          SqlContainerGetPropertiesResponseArgs{...}
type SqlContainerGetPropertiesResponseInput interface {
	pulumi.Input

	ToSqlContainerGetPropertiesResponseOutput() SqlContainerGetPropertiesResponseOutput
	ToSqlContainerGetPropertiesResponseOutputWithContext(context.Context) SqlContainerGetPropertiesResponseOutput
}

// The properties of an Azure Cosmos DB container
type SqlContainerGetPropertiesResponseArgs struct {
	Resource pulumi.MapInput `pulumi:"resource"`
}

func (SqlContainerGetPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlContainerGetPropertiesResponse)(nil)).Elem()
}

func (i SqlContainerGetPropertiesResponseArgs) ToSqlContainerGetPropertiesResponseOutput() SqlContainerGetPropertiesResponseOutput {
	return i.ToSqlContainerGetPropertiesResponseOutputWithContext(context.Background())
}

func (i SqlContainerGetPropertiesResponseArgs) ToSqlContainerGetPropertiesResponseOutputWithContext(ctx context.Context) SqlContainerGetPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlContainerGetPropertiesResponseOutput)
}

func (i SqlContainerGetPropertiesResponseArgs) ToSqlContainerGetPropertiesResponsePtrOutput() SqlContainerGetPropertiesResponsePtrOutput {
	return i.ToSqlContainerGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i SqlContainerGetPropertiesResponseArgs) ToSqlContainerGetPropertiesResponsePtrOutputWithContext(ctx context.Context) SqlContainerGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlContainerGetPropertiesResponseOutput).ToSqlContainerGetPropertiesResponsePtrOutputWithContext(ctx)
}

// SqlContainerGetPropertiesResponsePtrInput is an input type that accepts SqlContainerGetPropertiesResponseArgs, SqlContainerGetPropertiesResponsePtr and SqlContainerGetPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `SqlContainerGetPropertiesResponsePtrInput` via:
//
//          SqlContainerGetPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type SqlContainerGetPropertiesResponsePtrInput interface {
	pulumi.Input

	ToSqlContainerGetPropertiesResponsePtrOutput() SqlContainerGetPropertiesResponsePtrOutput
	ToSqlContainerGetPropertiesResponsePtrOutputWithContext(context.Context) SqlContainerGetPropertiesResponsePtrOutput
}

type sqlContainerGetPropertiesResponsePtrType SqlContainerGetPropertiesResponseArgs

func SqlContainerGetPropertiesResponsePtr(v *SqlContainerGetPropertiesResponseArgs) SqlContainerGetPropertiesResponsePtrInput {
	return (*sqlContainerGetPropertiesResponsePtrType)(v)
}

func (*sqlContainerGetPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlContainerGetPropertiesResponse)(nil)).Elem()
}

func (i *sqlContainerGetPropertiesResponsePtrType) ToSqlContainerGetPropertiesResponsePtrOutput() SqlContainerGetPropertiesResponsePtrOutput {
	return i.ToSqlContainerGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *sqlContainerGetPropertiesResponsePtrType) ToSqlContainerGetPropertiesResponsePtrOutputWithContext(ctx context.Context) SqlContainerGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlContainerGetPropertiesResponsePtrOutput)
}

// The properties of an Azure Cosmos DB container
type SqlContainerGetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (SqlContainerGetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlContainerGetPropertiesResponse)(nil)).Elem()
}

func (o SqlContainerGetPropertiesResponseOutput) ToSqlContainerGetPropertiesResponseOutput() SqlContainerGetPropertiesResponseOutput {
	return o
}

func (o SqlContainerGetPropertiesResponseOutput) ToSqlContainerGetPropertiesResponseOutputWithContext(ctx context.Context) SqlContainerGetPropertiesResponseOutput {
	return o
}

func (o SqlContainerGetPropertiesResponseOutput) ToSqlContainerGetPropertiesResponsePtrOutput() SqlContainerGetPropertiesResponsePtrOutput {
	return o.ToSqlContainerGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o SqlContainerGetPropertiesResponseOutput) ToSqlContainerGetPropertiesResponsePtrOutputWithContext(ctx context.Context) SqlContainerGetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v SqlContainerGetPropertiesResponse) *SqlContainerGetPropertiesResponse {
		return &v
	}).(SqlContainerGetPropertiesResponsePtrOutput)
}
func (o SqlContainerGetPropertiesResponseOutput) Resource() pulumi.MapOutput {
	return o.ApplyT(func(v SqlContainerGetPropertiesResponse) map[string]interface{} { return v.Resource }).(pulumi.MapOutput)
}

type SqlContainerGetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (SqlContainerGetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlContainerGetPropertiesResponse)(nil)).Elem()
}

func (o SqlContainerGetPropertiesResponsePtrOutput) ToSqlContainerGetPropertiesResponsePtrOutput() SqlContainerGetPropertiesResponsePtrOutput {
	return o
}

func (o SqlContainerGetPropertiesResponsePtrOutput) ToSqlContainerGetPropertiesResponsePtrOutputWithContext(ctx context.Context) SqlContainerGetPropertiesResponsePtrOutput {
	return o
}

func (o SqlContainerGetPropertiesResponsePtrOutput) Elem() SqlContainerGetPropertiesResponseOutput {
	return o.ApplyT(func(v *SqlContainerGetPropertiesResponse) SqlContainerGetPropertiesResponse { return *v }).(SqlContainerGetPropertiesResponseOutput)
}

func (o SqlContainerGetPropertiesResponsePtrOutput) Resource() pulumi.MapOutput {
	return o.ApplyT(func(v *SqlContainerGetPropertiesResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.MapOutput)
}

// Cosmos DB SQL container resource object
type SqlContainerResource struct {
	// The conflict resolution policy for the container.
	ConflictResolutionPolicy *ConflictResolutionPolicy `pulumi:"conflictResolutionPolicy"`
	// Default time to live
	DefaultTtl *int `pulumi:"defaultTtl"`
	// Name of the Cosmos DB SQL container
	Id string `pulumi:"id"`
	// The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container
	IndexingPolicy *IndexingPolicy `pulumi:"indexingPolicy"`
	// The configuration of the partition key to be used for partitioning data into multiple partitions
	PartitionKey *ContainerPartitionKey `pulumi:"partitionKey"`
	// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
	UniqueKeyPolicy *UniqueKeyPolicy `pulumi:"uniqueKeyPolicy"`
}

// SqlContainerResourceInput is an input type that accepts SqlContainerResourceArgs and SqlContainerResourceOutput values.
// You can construct a concrete instance of `SqlContainerResourceInput` via:
//
//          SqlContainerResourceArgs{...}
type SqlContainerResourceInput interface {
	pulumi.Input

	ToSqlContainerResourceOutput() SqlContainerResourceOutput
	ToSqlContainerResourceOutputWithContext(context.Context) SqlContainerResourceOutput
}

// Cosmos DB SQL container resource object
type SqlContainerResourceArgs struct {
	// The conflict resolution policy for the container.
	ConflictResolutionPolicy ConflictResolutionPolicyPtrInput `pulumi:"conflictResolutionPolicy"`
	// Default time to live
	DefaultTtl pulumi.IntPtrInput `pulumi:"defaultTtl"`
	// Name of the Cosmos DB SQL container
	Id pulumi.StringInput `pulumi:"id"`
	// The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container
	IndexingPolicy IndexingPolicyPtrInput `pulumi:"indexingPolicy"`
	// The configuration of the partition key to be used for partitioning data into multiple partitions
	PartitionKey ContainerPartitionKeyPtrInput `pulumi:"partitionKey"`
	// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
	UniqueKeyPolicy UniqueKeyPolicyPtrInput `pulumi:"uniqueKeyPolicy"`
}

func (SqlContainerResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlContainerResource)(nil)).Elem()
}

func (i SqlContainerResourceArgs) ToSqlContainerResourceOutput() SqlContainerResourceOutput {
	return i.ToSqlContainerResourceOutputWithContext(context.Background())
}

func (i SqlContainerResourceArgs) ToSqlContainerResourceOutputWithContext(ctx context.Context) SqlContainerResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlContainerResourceOutput)
}

func (i SqlContainerResourceArgs) ToSqlContainerResourcePtrOutput() SqlContainerResourcePtrOutput {
	return i.ToSqlContainerResourcePtrOutputWithContext(context.Background())
}

func (i SqlContainerResourceArgs) ToSqlContainerResourcePtrOutputWithContext(ctx context.Context) SqlContainerResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlContainerResourceOutput).ToSqlContainerResourcePtrOutputWithContext(ctx)
}

// SqlContainerResourcePtrInput is an input type that accepts SqlContainerResourceArgs, SqlContainerResourcePtr and SqlContainerResourcePtrOutput values.
// You can construct a concrete instance of `SqlContainerResourcePtrInput` via:
//
//          SqlContainerResourceArgs{...}
//
//  or:
//
//          nil
type SqlContainerResourcePtrInput interface {
	pulumi.Input

	ToSqlContainerResourcePtrOutput() SqlContainerResourcePtrOutput
	ToSqlContainerResourcePtrOutputWithContext(context.Context) SqlContainerResourcePtrOutput
}

type sqlContainerResourcePtrType SqlContainerResourceArgs

func SqlContainerResourcePtr(v *SqlContainerResourceArgs) SqlContainerResourcePtrInput {
	return (*sqlContainerResourcePtrType)(v)
}

func (*sqlContainerResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlContainerResource)(nil)).Elem()
}

func (i *sqlContainerResourcePtrType) ToSqlContainerResourcePtrOutput() SqlContainerResourcePtrOutput {
	return i.ToSqlContainerResourcePtrOutputWithContext(context.Background())
}

func (i *sqlContainerResourcePtrType) ToSqlContainerResourcePtrOutputWithContext(ctx context.Context) SqlContainerResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlContainerResourcePtrOutput)
}

// Cosmos DB SQL container resource object
type SqlContainerResourceOutput struct{ *pulumi.OutputState }

func (SqlContainerResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlContainerResource)(nil)).Elem()
}

func (o SqlContainerResourceOutput) ToSqlContainerResourceOutput() SqlContainerResourceOutput {
	return o
}

func (o SqlContainerResourceOutput) ToSqlContainerResourceOutputWithContext(ctx context.Context) SqlContainerResourceOutput {
	return o
}

func (o SqlContainerResourceOutput) ToSqlContainerResourcePtrOutput() SqlContainerResourcePtrOutput {
	return o.ToSqlContainerResourcePtrOutputWithContext(context.Background())
}

func (o SqlContainerResourceOutput) ToSqlContainerResourcePtrOutputWithContext(ctx context.Context) SqlContainerResourcePtrOutput {
	return o.ApplyT(func(v SqlContainerResource) *SqlContainerResource {
		return &v
	}).(SqlContainerResourcePtrOutput)
}

// The conflict resolution policy for the container.
func (o SqlContainerResourceOutput) ConflictResolutionPolicy() ConflictResolutionPolicyPtrOutput {
	return o.ApplyT(func(v SqlContainerResource) *ConflictResolutionPolicy { return v.ConflictResolutionPolicy }).(ConflictResolutionPolicyPtrOutput)
}

// Default time to live
func (o SqlContainerResourceOutput) DefaultTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SqlContainerResource) *int { return v.DefaultTtl }).(pulumi.IntPtrOutput)
}

// Name of the Cosmos DB SQL container
func (o SqlContainerResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SqlContainerResource) string { return v.Id }).(pulumi.StringOutput)
}

// The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container
func (o SqlContainerResourceOutput) IndexingPolicy() IndexingPolicyPtrOutput {
	return o.ApplyT(func(v SqlContainerResource) *IndexingPolicy { return v.IndexingPolicy }).(IndexingPolicyPtrOutput)
}

// The configuration of the partition key to be used for partitioning data into multiple partitions
func (o SqlContainerResourceOutput) PartitionKey() ContainerPartitionKeyPtrOutput {
	return o.ApplyT(func(v SqlContainerResource) *ContainerPartitionKey { return v.PartitionKey }).(ContainerPartitionKeyPtrOutput)
}

// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
func (o SqlContainerResourceOutput) UniqueKeyPolicy() UniqueKeyPolicyPtrOutput {
	return o.ApplyT(func(v SqlContainerResource) *UniqueKeyPolicy { return v.UniqueKeyPolicy }).(UniqueKeyPolicyPtrOutput)
}

type SqlContainerResourcePtrOutput struct{ *pulumi.OutputState }

func (SqlContainerResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlContainerResource)(nil)).Elem()
}

func (o SqlContainerResourcePtrOutput) ToSqlContainerResourcePtrOutput() SqlContainerResourcePtrOutput {
	return o
}

func (o SqlContainerResourcePtrOutput) ToSqlContainerResourcePtrOutputWithContext(ctx context.Context) SqlContainerResourcePtrOutput {
	return o
}

func (o SqlContainerResourcePtrOutput) Elem() SqlContainerResourceOutput {
	return o.ApplyT(func(v *SqlContainerResource) SqlContainerResource { return *v }).(SqlContainerResourceOutput)
}

// The conflict resolution policy for the container.
func (o SqlContainerResourcePtrOutput) ConflictResolutionPolicy() ConflictResolutionPolicyPtrOutput {
	return o.ApplyT(func(v *SqlContainerResource) *ConflictResolutionPolicy {
		if v == nil {
			return nil
		}
		return v.ConflictResolutionPolicy
	}).(ConflictResolutionPolicyPtrOutput)
}

// Default time to live
func (o SqlContainerResourcePtrOutput) DefaultTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlContainerResource) *int {
		if v == nil {
			return nil
		}
		return v.DefaultTtl
	}).(pulumi.IntPtrOutput)
}

// Name of the Cosmos DB SQL container
func (o SqlContainerResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlContainerResource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container
func (o SqlContainerResourcePtrOutput) IndexingPolicy() IndexingPolicyPtrOutput {
	return o.ApplyT(func(v *SqlContainerResource) *IndexingPolicy {
		if v == nil {
			return nil
		}
		return v.IndexingPolicy
	}).(IndexingPolicyPtrOutput)
}

// The configuration of the partition key to be used for partitioning data into multiple partitions
func (o SqlContainerResourcePtrOutput) PartitionKey() ContainerPartitionKeyPtrOutput {
	return o.ApplyT(func(v *SqlContainerResource) *ContainerPartitionKey {
		if v == nil {
			return nil
		}
		return v.PartitionKey
	}).(ContainerPartitionKeyPtrOutput)
}

// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
func (o SqlContainerResourcePtrOutput) UniqueKeyPolicy() UniqueKeyPolicyPtrOutput {
	return o.ApplyT(func(v *SqlContainerResource) *UniqueKeyPolicy {
		if v == nil {
			return nil
		}
		return v.UniqueKeyPolicy
	}).(UniqueKeyPolicyPtrOutput)
}

// The properties of an Azure Cosmos DB SQL database
type SqlDatabaseGetPropertiesResponse struct {
	Resource *SqlDatabaseGetPropertiesResponseProperties `pulumi:"resource"`
}

// SqlDatabaseGetPropertiesResponseInput is an input type that accepts SqlDatabaseGetPropertiesResponseArgs and SqlDatabaseGetPropertiesResponseOutput values.
// You can construct a concrete instance of `SqlDatabaseGetPropertiesResponseInput` via:
//
//          SqlDatabaseGetPropertiesResponseArgs{...}
type SqlDatabaseGetPropertiesResponseInput interface {
	pulumi.Input

	ToSqlDatabaseGetPropertiesResponseOutput() SqlDatabaseGetPropertiesResponseOutput
	ToSqlDatabaseGetPropertiesResponseOutputWithContext(context.Context) SqlDatabaseGetPropertiesResponseOutput
}

// The properties of an Azure Cosmos DB SQL database
type SqlDatabaseGetPropertiesResponseArgs struct {
	Resource SqlDatabaseGetPropertiesResponsePropertiesPtrInput `pulumi:"resource"`
}

func (SqlDatabaseGetPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlDatabaseGetPropertiesResponse)(nil)).Elem()
}

func (i SqlDatabaseGetPropertiesResponseArgs) ToSqlDatabaseGetPropertiesResponseOutput() SqlDatabaseGetPropertiesResponseOutput {
	return i.ToSqlDatabaseGetPropertiesResponseOutputWithContext(context.Background())
}

func (i SqlDatabaseGetPropertiesResponseArgs) ToSqlDatabaseGetPropertiesResponseOutputWithContext(ctx context.Context) SqlDatabaseGetPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlDatabaseGetPropertiesResponseOutput)
}

func (i SqlDatabaseGetPropertiesResponseArgs) ToSqlDatabaseGetPropertiesResponsePtrOutput() SqlDatabaseGetPropertiesResponsePtrOutput {
	return i.ToSqlDatabaseGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i SqlDatabaseGetPropertiesResponseArgs) ToSqlDatabaseGetPropertiesResponsePtrOutputWithContext(ctx context.Context) SqlDatabaseGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlDatabaseGetPropertiesResponseOutput).ToSqlDatabaseGetPropertiesResponsePtrOutputWithContext(ctx)
}

// SqlDatabaseGetPropertiesResponsePtrInput is an input type that accepts SqlDatabaseGetPropertiesResponseArgs, SqlDatabaseGetPropertiesResponsePtr and SqlDatabaseGetPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `SqlDatabaseGetPropertiesResponsePtrInput` via:
//
//          SqlDatabaseGetPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type SqlDatabaseGetPropertiesResponsePtrInput interface {
	pulumi.Input

	ToSqlDatabaseGetPropertiesResponsePtrOutput() SqlDatabaseGetPropertiesResponsePtrOutput
	ToSqlDatabaseGetPropertiesResponsePtrOutputWithContext(context.Context) SqlDatabaseGetPropertiesResponsePtrOutput
}

type sqlDatabaseGetPropertiesResponsePtrType SqlDatabaseGetPropertiesResponseArgs

func SqlDatabaseGetPropertiesResponsePtr(v *SqlDatabaseGetPropertiesResponseArgs) SqlDatabaseGetPropertiesResponsePtrInput {
	return (*sqlDatabaseGetPropertiesResponsePtrType)(v)
}

func (*sqlDatabaseGetPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlDatabaseGetPropertiesResponse)(nil)).Elem()
}

func (i *sqlDatabaseGetPropertiesResponsePtrType) ToSqlDatabaseGetPropertiesResponsePtrOutput() SqlDatabaseGetPropertiesResponsePtrOutput {
	return i.ToSqlDatabaseGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *sqlDatabaseGetPropertiesResponsePtrType) ToSqlDatabaseGetPropertiesResponsePtrOutputWithContext(ctx context.Context) SqlDatabaseGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlDatabaseGetPropertiesResponsePtrOutput)
}

// The properties of an Azure Cosmos DB SQL database
type SqlDatabaseGetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (SqlDatabaseGetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlDatabaseGetPropertiesResponse)(nil)).Elem()
}

func (o SqlDatabaseGetPropertiesResponseOutput) ToSqlDatabaseGetPropertiesResponseOutput() SqlDatabaseGetPropertiesResponseOutput {
	return o
}

func (o SqlDatabaseGetPropertiesResponseOutput) ToSqlDatabaseGetPropertiesResponseOutputWithContext(ctx context.Context) SqlDatabaseGetPropertiesResponseOutput {
	return o
}

func (o SqlDatabaseGetPropertiesResponseOutput) ToSqlDatabaseGetPropertiesResponsePtrOutput() SqlDatabaseGetPropertiesResponsePtrOutput {
	return o.ToSqlDatabaseGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o SqlDatabaseGetPropertiesResponseOutput) ToSqlDatabaseGetPropertiesResponsePtrOutputWithContext(ctx context.Context) SqlDatabaseGetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v SqlDatabaseGetPropertiesResponse) *SqlDatabaseGetPropertiesResponse {
		return &v
	}).(SqlDatabaseGetPropertiesResponsePtrOutput)
}
func (o SqlDatabaseGetPropertiesResponseOutput) Resource() SqlDatabaseGetPropertiesResponsePropertiesPtrOutput {
	return o.ApplyT(func(v SqlDatabaseGetPropertiesResponse) *SqlDatabaseGetPropertiesResponseProperties {
		return v.Resource
	}).(SqlDatabaseGetPropertiesResponsePropertiesPtrOutput)
}

type SqlDatabaseGetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (SqlDatabaseGetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlDatabaseGetPropertiesResponse)(nil)).Elem()
}

func (o SqlDatabaseGetPropertiesResponsePtrOutput) ToSqlDatabaseGetPropertiesResponsePtrOutput() SqlDatabaseGetPropertiesResponsePtrOutput {
	return o
}

func (o SqlDatabaseGetPropertiesResponsePtrOutput) ToSqlDatabaseGetPropertiesResponsePtrOutputWithContext(ctx context.Context) SqlDatabaseGetPropertiesResponsePtrOutput {
	return o
}

func (o SqlDatabaseGetPropertiesResponsePtrOutput) Elem() SqlDatabaseGetPropertiesResponseOutput {
	return o.ApplyT(func(v *SqlDatabaseGetPropertiesResponse) SqlDatabaseGetPropertiesResponse { return *v }).(SqlDatabaseGetPropertiesResponseOutput)
}

func (o SqlDatabaseGetPropertiesResponsePtrOutput) Resource() SqlDatabaseGetPropertiesResponsePropertiesPtrOutput {
	return o.ApplyT(func(v *SqlDatabaseGetPropertiesResponse) *SqlDatabaseGetPropertiesResponseProperties {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(SqlDatabaseGetPropertiesResponsePropertiesPtrOutput)
}

type SqlDatabaseGetPropertiesResponseProperties struct {
	// A system generated property that specified the addressable path of the collections resource.
	_colls *string `pulumi:"_colls"`
	// A system generated property representing the resource etag required for optimistic concurrency control.
	_etag string `pulumi:"_etag"`
	// A system generated property. A unique identifier.
	_rid string `pulumi:"_rid"`
	// A system generated property that denotes the last updated timestamp of the resource.
	_ts map[string]interface{} `pulumi:"_ts"`
	// A system generated property that specifies the addressable path of the users resource.
	_users *string `pulumi:"_users"`
	// Name of the Cosmos DB SQL database
	Id string `pulumi:"id"`
}

// SqlDatabaseGetPropertiesResponsePropertiesInput is an input type that accepts SqlDatabaseGetPropertiesResponsePropertiesArgs and SqlDatabaseGetPropertiesResponsePropertiesOutput values.
// You can construct a concrete instance of `SqlDatabaseGetPropertiesResponsePropertiesInput` via:
//
//          SqlDatabaseGetPropertiesResponsePropertiesArgs{...}
type SqlDatabaseGetPropertiesResponsePropertiesInput interface {
	pulumi.Input

	ToSqlDatabaseGetPropertiesResponsePropertiesOutput() SqlDatabaseGetPropertiesResponsePropertiesOutput
	ToSqlDatabaseGetPropertiesResponsePropertiesOutputWithContext(context.Context) SqlDatabaseGetPropertiesResponsePropertiesOutput
}

type SqlDatabaseGetPropertiesResponsePropertiesArgs struct {
	// A system generated property that specified the addressable path of the collections resource.
	_colls pulumi.StringPtrInput `pulumi:"_colls"`
	// A system generated property representing the resource etag required for optimistic concurrency control.
	_etag pulumi.StringInput `pulumi:"_etag"`
	// A system generated property. A unique identifier.
	_rid pulumi.StringInput `pulumi:"_rid"`
	// A system generated property that denotes the last updated timestamp of the resource.
	_ts pulumi.MapInput `pulumi:"_ts"`
	// A system generated property that specifies the addressable path of the users resource.
	_users pulumi.StringPtrInput `pulumi:"_users"`
	// Name of the Cosmos DB SQL database
	Id pulumi.StringInput `pulumi:"id"`
}

func (SqlDatabaseGetPropertiesResponsePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlDatabaseGetPropertiesResponseProperties)(nil)).Elem()
}

func (i SqlDatabaseGetPropertiesResponsePropertiesArgs) ToSqlDatabaseGetPropertiesResponsePropertiesOutput() SqlDatabaseGetPropertiesResponsePropertiesOutput {
	return i.ToSqlDatabaseGetPropertiesResponsePropertiesOutputWithContext(context.Background())
}

func (i SqlDatabaseGetPropertiesResponsePropertiesArgs) ToSqlDatabaseGetPropertiesResponsePropertiesOutputWithContext(ctx context.Context) SqlDatabaseGetPropertiesResponsePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlDatabaseGetPropertiesResponsePropertiesOutput)
}

func (i SqlDatabaseGetPropertiesResponsePropertiesArgs) ToSqlDatabaseGetPropertiesResponsePropertiesPtrOutput() SqlDatabaseGetPropertiesResponsePropertiesPtrOutput {
	return i.ToSqlDatabaseGetPropertiesResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i SqlDatabaseGetPropertiesResponsePropertiesArgs) ToSqlDatabaseGetPropertiesResponsePropertiesPtrOutputWithContext(ctx context.Context) SqlDatabaseGetPropertiesResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlDatabaseGetPropertiesResponsePropertiesOutput).ToSqlDatabaseGetPropertiesResponsePropertiesPtrOutputWithContext(ctx)
}

// SqlDatabaseGetPropertiesResponsePropertiesPtrInput is an input type that accepts SqlDatabaseGetPropertiesResponsePropertiesArgs, SqlDatabaseGetPropertiesResponsePropertiesPtr and SqlDatabaseGetPropertiesResponsePropertiesPtrOutput values.
// You can construct a concrete instance of `SqlDatabaseGetPropertiesResponsePropertiesPtrInput` via:
//
//          SqlDatabaseGetPropertiesResponsePropertiesArgs{...}
//
//  or:
//
//          nil
type SqlDatabaseGetPropertiesResponsePropertiesPtrInput interface {
	pulumi.Input

	ToSqlDatabaseGetPropertiesResponsePropertiesPtrOutput() SqlDatabaseGetPropertiesResponsePropertiesPtrOutput
	ToSqlDatabaseGetPropertiesResponsePropertiesPtrOutputWithContext(context.Context) SqlDatabaseGetPropertiesResponsePropertiesPtrOutput
}

type sqlDatabaseGetPropertiesResponsePropertiesPtrType SqlDatabaseGetPropertiesResponsePropertiesArgs

func SqlDatabaseGetPropertiesResponsePropertiesPtr(v *SqlDatabaseGetPropertiesResponsePropertiesArgs) SqlDatabaseGetPropertiesResponsePropertiesPtrInput {
	return (*sqlDatabaseGetPropertiesResponsePropertiesPtrType)(v)
}

func (*sqlDatabaseGetPropertiesResponsePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlDatabaseGetPropertiesResponseProperties)(nil)).Elem()
}

func (i *sqlDatabaseGetPropertiesResponsePropertiesPtrType) ToSqlDatabaseGetPropertiesResponsePropertiesPtrOutput() SqlDatabaseGetPropertiesResponsePropertiesPtrOutput {
	return i.ToSqlDatabaseGetPropertiesResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i *sqlDatabaseGetPropertiesResponsePropertiesPtrType) ToSqlDatabaseGetPropertiesResponsePropertiesPtrOutputWithContext(ctx context.Context) SqlDatabaseGetPropertiesResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlDatabaseGetPropertiesResponsePropertiesPtrOutput)
}

type SqlDatabaseGetPropertiesResponsePropertiesOutput struct{ *pulumi.OutputState }

func (SqlDatabaseGetPropertiesResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlDatabaseGetPropertiesResponseProperties)(nil)).Elem()
}

func (o SqlDatabaseGetPropertiesResponsePropertiesOutput) ToSqlDatabaseGetPropertiesResponsePropertiesOutput() SqlDatabaseGetPropertiesResponsePropertiesOutput {
	return o
}

func (o SqlDatabaseGetPropertiesResponsePropertiesOutput) ToSqlDatabaseGetPropertiesResponsePropertiesOutputWithContext(ctx context.Context) SqlDatabaseGetPropertiesResponsePropertiesOutput {
	return o
}

func (o SqlDatabaseGetPropertiesResponsePropertiesOutput) ToSqlDatabaseGetPropertiesResponsePropertiesPtrOutput() SqlDatabaseGetPropertiesResponsePropertiesPtrOutput {
	return o.ToSqlDatabaseGetPropertiesResponsePropertiesPtrOutputWithContext(context.Background())
}

func (o SqlDatabaseGetPropertiesResponsePropertiesOutput) ToSqlDatabaseGetPropertiesResponsePropertiesPtrOutputWithContext(ctx context.Context) SqlDatabaseGetPropertiesResponsePropertiesPtrOutput {
	return o.ApplyT(func(v SqlDatabaseGetPropertiesResponseProperties) *SqlDatabaseGetPropertiesResponseProperties {
		return &v
	}).(SqlDatabaseGetPropertiesResponsePropertiesPtrOutput)
}

// A system generated property that specified the addressable path of the collections resource.
func (o SqlDatabaseGetPropertiesResponsePropertiesOutput) _colls() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlDatabaseGetPropertiesResponseProperties) *string { return v._colls }).(pulumi.StringPtrOutput)
}

// A system generated property representing the resource etag required for optimistic concurrency control.
func (o SqlDatabaseGetPropertiesResponsePropertiesOutput) _etag() pulumi.StringOutput {
	return o.ApplyT(func(v SqlDatabaseGetPropertiesResponseProperties) string { return v._etag }).(pulumi.StringOutput)
}

// A system generated property. A unique identifier.
func (o SqlDatabaseGetPropertiesResponsePropertiesOutput) _rid() pulumi.StringOutput {
	return o.ApplyT(func(v SqlDatabaseGetPropertiesResponseProperties) string { return v._rid }).(pulumi.StringOutput)
}

// A system generated property that denotes the last updated timestamp of the resource.
func (o SqlDatabaseGetPropertiesResponsePropertiesOutput) _ts() pulumi.MapOutput {
	return o.ApplyT(func(v SqlDatabaseGetPropertiesResponseProperties) map[string]interface{} { return v._ts }).(pulumi.MapOutput)
}

// A system generated property that specifies the addressable path of the users resource.
func (o SqlDatabaseGetPropertiesResponsePropertiesOutput) _users() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlDatabaseGetPropertiesResponseProperties) *string { return v._users }).(pulumi.StringPtrOutput)
}

// Name of the Cosmos DB SQL database
func (o SqlDatabaseGetPropertiesResponsePropertiesOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SqlDatabaseGetPropertiesResponseProperties) string { return v.Id }).(pulumi.StringOutput)
}

type SqlDatabaseGetPropertiesResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (SqlDatabaseGetPropertiesResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlDatabaseGetPropertiesResponseProperties)(nil)).Elem()
}

func (o SqlDatabaseGetPropertiesResponsePropertiesPtrOutput) ToSqlDatabaseGetPropertiesResponsePropertiesPtrOutput() SqlDatabaseGetPropertiesResponsePropertiesPtrOutput {
	return o
}

func (o SqlDatabaseGetPropertiesResponsePropertiesPtrOutput) ToSqlDatabaseGetPropertiesResponsePropertiesPtrOutputWithContext(ctx context.Context) SqlDatabaseGetPropertiesResponsePropertiesPtrOutput {
	return o
}

func (o SqlDatabaseGetPropertiesResponsePropertiesPtrOutput) Elem() SqlDatabaseGetPropertiesResponsePropertiesOutput {
	return o.ApplyT(func(v *SqlDatabaseGetPropertiesResponseProperties) SqlDatabaseGetPropertiesResponseProperties {
		return *v
	}).(SqlDatabaseGetPropertiesResponsePropertiesOutput)
}

// A system generated property that specified the addressable path of the collections resource.
func (o SqlDatabaseGetPropertiesResponsePropertiesPtrOutput) _colls() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlDatabaseGetPropertiesResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v._colls
	}).(pulumi.StringPtrOutput)
}

// A system generated property representing the resource etag required for optimistic concurrency control.
func (o SqlDatabaseGetPropertiesResponsePropertiesPtrOutput) _etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlDatabaseGetPropertiesResponseProperties) *string {
		if v == nil {
			return nil
		}
		return &v._etag
	}).(pulumi.StringPtrOutput)
}

// A system generated property. A unique identifier.
func (o SqlDatabaseGetPropertiesResponsePropertiesPtrOutput) _rid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlDatabaseGetPropertiesResponseProperties) *string {
		if v == nil {
			return nil
		}
		return &v._rid
	}).(pulumi.StringPtrOutput)
}

// A system generated property that denotes the last updated timestamp of the resource.
func (o SqlDatabaseGetPropertiesResponsePropertiesPtrOutput) _ts() pulumi.MapOutput {
	return o.ApplyT(func(v *SqlDatabaseGetPropertiesResponseProperties) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v._ts
	}).(pulumi.MapOutput)
}

// A system generated property that specifies the addressable path of the users resource.
func (o SqlDatabaseGetPropertiesResponsePropertiesPtrOutput) _users() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlDatabaseGetPropertiesResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v._users
	}).(pulumi.StringPtrOutput)
}

// Name of the Cosmos DB SQL database
func (o SqlDatabaseGetPropertiesResponsePropertiesPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlDatabaseGetPropertiesResponseProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Cosmos DB SQL database resource object
type SqlDatabaseResource struct {
	// Name of the Cosmos DB SQL database
	Id string `pulumi:"id"`
}

// SqlDatabaseResourceInput is an input type that accepts SqlDatabaseResourceArgs and SqlDatabaseResourceOutput values.
// You can construct a concrete instance of `SqlDatabaseResourceInput` via:
//
//          SqlDatabaseResourceArgs{...}
type SqlDatabaseResourceInput interface {
	pulumi.Input

	ToSqlDatabaseResourceOutput() SqlDatabaseResourceOutput
	ToSqlDatabaseResourceOutputWithContext(context.Context) SqlDatabaseResourceOutput
}

// Cosmos DB SQL database resource object
type SqlDatabaseResourceArgs struct {
	// Name of the Cosmos DB SQL database
	Id pulumi.StringInput `pulumi:"id"`
}

func (SqlDatabaseResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlDatabaseResource)(nil)).Elem()
}

func (i SqlDatabaseResourceArgs) ToSqlDatabaseResourceOutput() SqlDatabaseResourceOutput {
	return i.ToSqlDatabaseResourceOutputWithContext(context.Background())
}

func (i SqlDatabaseResourceArgs) ToSqlDatabaseResourceOutputWithContext(ctx context.Context) SqlDatabaseResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlDatabaseResourceOutput)
}

func (i SqlDatabaseResourceArgs) ToSqlDatabaseResourcePtrOutput() SqlDatabaseResourcePtrOutput {
	return i.ToSqlDatabaseResourcePtrOutputWithContext(context.Background())
}

func (i SqlDatabaseResourceArgs) ToSqlDatabaseResourcePtrOutputWithContext(ctx context.Context) SqlDatabaseResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlDatabaseResourceOutput).ToSqlDatabaseResourcePtrOutputWithContext(ctx)
}

// SqlDatabaseResourcePtrInput is an input type that accepts SqlDatabaseResourceArgs, SqlDatabaseResourcePtr and SqlDatabaseResourcePtrOutput values.
// You can construct a concrete instance of `SqlDatabaseResourcePtrInput` via:
//
//          SqlDatabaseResourceArgs{...}
//
//  or:
//
//          nil
type SqlDatabaseResourcePtrInput interface {
	pulumi.Input

	ToSqlDatabaseResourcePtrOutput() SqlDatabaseResourcePtrOutput
	ToSqlDatabaseResourcePtrOutputWithContext(context.Context) SqlDatabaseResourcePtrOutput
}

type sqlDatabaseResourcePtrType SqlDatabaseResourceArgs

func SqlDatabaseResourcePtr(v *SqlDatabaseResourceArgs) SqlDatabaseResourcePtrInput {
	return (*sqlDatabaseResourcePtrType)(v)
}

func (*sqlDatabaseResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlDatabaseResource)(nil)).Elem()
}

func (i *sqlDatabaseResourcePtrType) ToSqlDatabaseResourcePtrOutput() SqlDatabaseResourcePtrOutput {
	return i.ToSqlDatabaseResourcePtrOutputWithContext(context.Background())
}

func (i *sqlDatabaseResourcePtrType) ToSqlDatabaseResourcePtrOutputWithContext(ctx context.Context) SqlDatabaseResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlDatabaseResourcePtrOutput)
}

// Cosmos DB SQL database resource object
type SqlDatabaseResourceOutput struct{ *pulumi.OutputState }

func (SqlDatabaseResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlDatabaseResource)(nil)).Elem()
}

func (o SqlDatabaseResourceOutput) ToSqlDatabaseResourceOutput() SqlDatabaseResourceOutput {
	return o
}

func (o SqlDatabaseResourceOutput) ToSqlDatabaseResourceOutputWithContext(ctx context.Context) SqlDatabaseResourceOutput {
	return o
}

func (o SqlDatabaseResourceOutput) ToSqlDatabaseResourcePtrOutput() SqlDatabaseResourcePtrOutput {
	return o.ToSqlDatabaseResourcePtrOutputWithContext(context.Background())
}

func (o SqlDatabaseResourceOutput) ToSqlDatabaseResourcePtrOutputWithContext(ctx context.Context) SqlDatabaseResourcePtrOutput {
	return o.ApplyT(func(v SqlDatabaseResource) *SqlDatabaseResource {
		return &v
	}).(SqlDatabaseResourcePtrOutput)
}

// Name of the Cosmos DB SQL database
func (o SqlDatabaseResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SqlDatabaseResource) string { return v.Id }).(pulumi.StringOutput)
}

type SqlDatabaseResourcePtrOutput struct{ *pulumi.OutputState }

func (SqlDatabaseResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlDatabaseResource)(nil)).Elem()
}

func (o SqlDatabaseResourcePtrOutput) ToSqlDatabaseResourcePtrOutput() SqlDatabaseResourcePtrOutput {
	return o
}

func (o SqlDatabaseResourcePtrOutput) ToSqlDatabaseResourcePtrOutputWithContext(ctx context.Context) SqlDatabaseResourcePtrOutput {
	return o
}

func (o SqlDatabaseResourcePtrOutput) Elem() SqlDatabaseResourceOutput {
	return o.ApplyT(func(v *SqlDatabaseResource) SqlDatabaseResource { return *v }).(SqlDatabaseResourceOutput)
}

// Name of the Cosmos DB SQL database
func (o SqlDatabaseResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlDatabaseResource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// An Azure Cosmos DB container.
type SqlResourceSqlContainerType struct {
	// The location of the resource group to which the resource belongs.
	Location *string `pulumi:"location"`
	// The name of the ARM resource.
	Name string `pulumi:"name"`
	// The properties of an Azure Cosmos DB container
	Properties SqlContainerGetPropertiesResponse `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags *TagsResponse `pulumi:"tags"`
	// The type of Azure resource.
	Type string `pulumi:"type"`
}

// SqlResourceSqlContainerTypeInput is an input type that accepts SqlResourceSqlContainerTypeArgs and SqlResourceSqlContainerTypeOutput values.
// You can construct a concrete instance of `SqlResourceSqlContainerTypeInput` via:
//
//          SqlResourceSqlContainerTypeArgs{...}
type SqlResourceSqlContainerTypeInput interface {
	pulumi.Input

	ToSqlResourceSqlContainerTypeOutput() SqlResourceSqlContainerTypeOutput
	ToSqlResourceSqlContainerTypeOutputWithContext(context.Context) SqlResourceSqlContainerTypeOutput
}

// An Azure Cosmos DB container.
type SqlResourceSqlContainerTypeArgs struct {
	// The location of the resource group to which the resource belongs.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the ARM resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of an Azure Cosmos DB container
	Properties SqlContainerGetPropertiesResponseInput `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags TagsResponsePtrInput `pulumi:"tags"`
	// The type of Azure resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SqlResourceSqlContainerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlResourceSqlContainerType)(nil)).Elem()
}

func (i SqlResourceSqlContainerTypeArgs) ToSqlResourceSqlContainerTypeOutput() SqlResourceSqlContainerTypeOutput {
	return i.ToSqlResourceSqlContainerTypeOutputWithContext(context.Background())
}

func (i SqlResourceSqlContainerTypeArgs) ToSqlResourceSqlContainerTypeOutputWithContext(ctx context.Context) SqlResourceSqlContainerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlResourceSqlContainerTypeOutput)
}

// An Azure Cosmos DB container.
type SqlResourceSqlContainerTypeOutput struct{ *pulumi.OutputState }

func (SqlResourceSqlContainerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlResourceSqlContainerType)(nil)).Elem()
}

func (o SqlResourceSqlContainerTypeOutput) ToSqlResourceSqlContainerTypeOutput() SqlResourceSqlContainerTypeOutput {
	return o
}

func (o SqlResourceSqlContainerTypeOutput) ToSqlResourceSqlContainerTypeOutputWithContext(ctx context.Context) SqlResourceSqlContainerTypeOutput {
	return o
}

// The location of the resource group to which the resource belongs.
func (o SqlResourceSqlContainerTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlResourceSqlContainerType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the ARM resource.
func (o SqlResourceSqlContainerTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SqlResourceSqlContainerType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of an Azure Cosmos DB container
func (o SqlResourceSqlContainerTypeOutput) Properties() SqlContainerGetPropertiesResponseOutput {
	return o.ApplyT(func(v SqlResourceSqlContainerType) SqlContainerGetPropertiesResponse { return v.Properties }).(SqlContainerGetPropertiesResponseOutput)
}

// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
func (o SqlResourceSqlContainerTypeOutput) Tags() TagsResponsePtrOutput {
	return o.ApplyT(func(v SqlResourceSqlContainerType) *TagsResponse { return v.Tags }).(TagsResponsePtrOutput)
}

// The type of Azure resource.
func (o SqlResourceSqlContainerTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlResourceSqlContainerType) string { return v.Type }).(pulumi.StringOutput)
}

// An Azure Cosmos DB SQL database.
type SqlResourceSqlDatabaseType struct {
	// The location of the resource group to which the resource belongs.
	Location *string `pulumi:"location"`
	// The name of the ARM resource.
	Name string `pulumi:"name"`
	// The properties of an Azure Cosmos DB SQL database
	Properties SqlDatabaseGetPropertiesResponse `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags *TagsResponse `pulumi:"tags"`
	// The type of Azure resource.
	Type string `pulumi:"type"`
}

// SqlResourceSqlDatabaseTypeInput is an input type that accepts SqlResourceSqlDatabaseTypeArgs and SqlResourceSqlDatabaseTypeOutput values.
// You can construct a concrete instance of `SqlResourceSqlDatabaseTypeInput` via:
//
//          SqlResourceSqlDatabaseTypeArgs{...}
type SqlResourceSqlDatabaseTypeInput interface {
	pulumi.Input

	ToSqlResourceSqlDatabaseTypeOutput() SqlResourceSqlDatabaseTypeOutput
	ToSqlResourceSqlDatabaseTypeOutputWithContext(context.Context) SqlResourceSqlDatabaseTypeOutput
}

// An Azure Cosmos DB SQL database.
type SqlResourceSqlDatabaseTypeArgs struct {
	// The location of the resource group to which the resource belongs.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the ARM resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of an Azure Cosmos DB SQL database
	Properties SqlDatabaseGetPropertiesResponseInput `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags TagsResponsePtrInput `pulumi:"tags"`
	// The type of Azure resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SqlResourceSqlDatabaseTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlResourceSqlDatabaseType)(nil)).Elem()
}

func (i SqlResourceSqlDatabaseTypeArgs) ToSqlResourceSqlDatabaseTypeOutput() SqlResourceSqlDatabaseTypeOutput {
	return i.ToSqlResourceSqlDatabaseTypeOutputWithContext(context.Background())
}

func (i SqlResourceSqlDatabaseTypeArgs) ToSqlResourceSqlDatabaseTypeOutputWithContext(ctx context.Context) SqlResourceSqlDatabaseTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlResourceSqlDatabaseTypeOutput)
}

// An Azure Cosmos DB SQL database.
type SqlResourceSqlDatabaseTypeOutput struct{ *pulumi.OutputState }

func (SqlResourceSqlDatabaseTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlResourceSqlDatabaseType)(nil)).Elem()
}

func (o SqlResourceSqlDatabaseTypeOutput) ToSqlResourceSqlDatabaseTypeOutput() SqlResourceSqlDatabaseTypeOutput {
	return o
}

func (o SqlResourceSqlDatabaseTypeOutput) ToSqlResourceSqlDatabaseTypeOutputWithContext(ctx context.Context) SqlResourceSqlDatabaseTypeOutput {
	return o
}

// The location of the resource group to which the resource belongs.
func (o SqlResourceSqlDatabaseTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlResourceSqlDatabaseType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the ARM resource.
func (o SqlResourceSqlDatabaseTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SqlResourceSqlDatabaseType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of an Azure Cosmos DB SQL database
func (o SqlResourceSqlDatabaseTypeOutput) Properties() SqlDatabaseGetPropertiesResponseOutput {
	return o.ApplyT(func(v SqlResourceSqlDatabaseType) SqlDatabaseGetPropertiesResponse { return v.Properties }).(SqlDatabaseGetPropertiesResponseOutput)
}

// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
func (o SqlResourceSqlDatabaseTypeOutput) Tags() TagsResponsePtrOutput {
	return o.ApplyT(func(v SqlResourceSqlDatabaseType) *TagsResponse { return v.Tags }).(TagsResponsePtrOutput)
}

// The type of Azure resource.
func (o SqlResourceSqlDatabaseTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlResourceSqlDatabaseType) string { return v.Type }).(pulumi.StringOutput)
}

// An Azure Cosmos DB storedProcedure.
type SqlResourceSqlStoredProcedureType struct {
	// The location of the resource group to which the resource belongs.
	Location *string `pulumi:"location"`
	// The name of the ARM resource.
	Name string `pulumi:"name"`
	// The properties of an Azure Cosmos DB storedProcedure
	Properties SqlStoredProcedureGetPropertiesResponse `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags *TagsResponse `pulumi:"tags"`
	// The type of Azure resource.
	Type string `pulumi:"type"`
}

// SqlResourceSqlStoredProcedureTypeInput is an input type that accepts SqlResourceSqlStoredProcedureTypeArgs and SqlResourceSqlStoredProcedureTypeOutput values.
// You can construct a concrete instance of `SqlResourceSqlStoredProcedureTypeInput` via:
//
//          SqlResourceSqlStoredProcedureTypeArgs{...}
type SqlResourceSqlStoredProcedureTypeInput interface {
	pulumi.Input

	ToSqlResourceSqlStoredProcedureTypeOutput() SqlResourceSqlStoredProcedureTypeOutput
	ToSqlResourceSqlStoredProcedureTypeOutputWithContext(context.Context) SqlResourceSqlStoredProcedureTypeOutput
}

// An Azure Cosmos DB storedProcedure.
type SqlResourceSqlStoredProcedureTypeArgs struct {
	// The location of the resource group to which the resource belongs.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the ARM resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of an Azure Cosmos DB storedProcedure
	Properties SqlStoredProcedureGetPropertiesResponseInput `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags TagsResponsePtrInput `pulumi:"tags"`
	// The type of Azure resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SqlResourceSqlStoredProcedureTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlResourceSqlStoredProcedureType)(nil)).Elem()
}

func (i SqlResourceSqlStoredProcedureTypeArgs) ToSqlResourceSqlStoredProcedureTypeOutput() SqlResourceSqlStoredProcedureTypeOutput {
	return i.ToSqlResourceSqlStoredProcedureTypeOutputWithContext(context.Background())
}

func (i SqlResourceSqlStoredProcedureTypeArgs) ToSqlResourceSqlStoredProcedureTypeOutputWithContext(ctx context.Context) SqlResourceSqlStoredProcedureTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlResourceSqlStoredProcedureTypeOutput)
}

// An Azure Cosmos DB storedProcedure.
type SqlResourceSqlStoredProcedureTypeOutput struct{ *pulumi.OutputState }

func (SqlResourceSqlStoredProcedureTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlResourceSqlStoredProcedureType)(nil)).Elem()
}

func (o SqlResourceSqlStoredProcedureTypeOutput) ToSqlResourceSqlStoredProcedureTypeOutput() SqlResourceSqlStoredProcedureTypeOutput {
	return o
}

func (o SqlResourceSqlStoredProcedureTypeOutput) ToSqlResourceSqlStoredProcedureTypeOutputWithContext(ctx context.Context) SqlResourceSqlStoredProcedureTypeOutput {
	return o
}

// The location of the resource group to which the resource belongs.
func (o SqlResourceSqlStoredProcedureTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlResourceSqlStoredProcedureType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the ARM resource.
func (o SqlResourceSqlStoredProcedureTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SqlResourceSqlStoredProcedureType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of an Azure Cosmos DB storedProcedure
func (o SqlResourceSqlStoredProcedureTypeOutput) Properties() SqlStoredProcedureGetPropertiesResponseOutput {
	return o.ApplyT(func(v SqlResourceSqlStoredProcedureType) SqlStoredProcedureGetPropertiesResponse { return v.Properties }).(SqlStoredProcedureGetPropertiesResponseOutput)
}

// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
func (o SqlResourceSqlStoredProcedureTypeOutput) Tags() TagsResponsePtrOutput {
	return o.ApplyT(func(v SqlResourceSqlStoredProcedureType) *TagsResponse { return v.Tags }).(TagsResponsePtrOutput)
}

// The type of Azure resource.
func (o SqlResourceSqlStoredProcedureTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlResourceSqlStoredProcedureType) string { return v.Type }).(pulumi.StringOutput)
}

// An Azure Cosmos DB trigger.
type SqlResourceSqlTriggerType struct {
	// The location of the resource group to which the resource belongs.
	Location *string `pulumi:"location"`
	// The name of the ARM resource.
	Name string `pulumi:"name"`
	// The properties of an Azure Cosmos DB trigger
	Properties SqlTriggerGetPropertiesResponse `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags *TagsResponse `pulumi:"tags"`
	// The type of Azure resource.
	Type string `pulumi:"type"`
}

// SqlResourceSqlTriggerTypeInput is an input type that accepts SqlResourceSqlTriggerTypeArgs and SqlResourceSqlTriggerTypeOutput values.
// You can construct a concrete instance of `SqlResourceSqlTriggerTypeInput` via:
//
//          SqlResourceSqlTriggerTypeArgs{...}
type SqlResourceSqlTriggerTypeInput interface {
	pulumi.Input

	ToSqlResourceSqlTriggerTypeOutput() SqlResourceSqlTriggerTypeOutput
	ToSqlResourceSqlTriggerTypeOutputWithContext(context.Context) SqlResourceSqlTriggerTypeOutput
}

// An Azure Cosmos DB trigger.
type SqlResourceSqlTriggerTypeArgs struct {
	// The location of the resource group to which the resource belongs.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the ARM resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of an Azure Cosmos DB trigger
	Properties SqlTriggerGetPropertiesResponseInput `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags TagsResponsePtrInput `pulumi:"tags"`
	// The type of Azure resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SqlResourceSqlTriggerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlResourceSqlTriggerType)(nil)).Elem()
}

func (i SqlResourceSqlTriggerTypeArgs) ToSqlResourceSqlTriggerTypeOutput() SqlResourceSqlTriggerTypeOutput {
	return i.ToSqlResourceSqlTriggerTypeOutputWithContext(context.Background())
}

func (i SqlResourceSqlTriggerTypeArgs) ToSqlResourceSqlTriggerTypeOutputWithContext(ctx context.Context) SqlResourceSqlTriggerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlResourceSqlTriggerTypeOutput)
}

// An Azure Cosmos DB trigger.
type SqlResourceSqlTriggerTypeOutput struct{ *pulumi.OutputState }

func (SqlResourceSqlTriggerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlResourceSqlTriggerType)(nil)).Elem()
}

func (o SqlResourceSqlTriggerTypeOutput) ToSqlResourceSqlTriggerTypeOutput() SqlResourceSqlTriggerTypeOutput {
	return o
}

func (o SqlResourceSqlTriggerTypeOutput) ToSqlResourceSqlTriggerTypeOutputWithContext(ctx context.Context) SqlResourceSqlTriggerTypeOutput {
	return o
}

// The location of the resource group to which the resource belongs.
func (o SqlResourceSqlTriggerTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlResourceSqlTriggerType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the ARM resource.
func (o SqlResourceSqlTriggerTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SqlResourceSqlTriggerType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of an Azure Cosmos DB trigger
func (o SqlResourceSqlTriggerTypeOutput) Properties() SqlTriggerGetPropertiesResponseOutput {
	return o.ApplyT(func(v SqlResourceSqlTriggerType) SqlTriggerGetPropertiesResponse { return v.Properties }).(SqlTriggerGetPropertiesResponseOutput)
}

// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
func (o SqlResourceSqlTriggerTypeOutput) Tags() TagsResponsePtrOutput {
	return o.ApplyT(func(v SqlResourceSqlTriggerType) *TagsResponse { return v.Tags }).(TagsResponsePtrOutput)
}

// The type of Azure resource.
func (o SqlResourceSqlTriggerTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlResourceSqlTriggerType) string { return v.Type }).(pulumi.StringOutput)
}

// An Azure Cosmos DB userDefinedFunction.
type SqlResourceSqlUserDefinedFunctionType struct {
	// The location of the resource group to which the resource belongs.
	Location *string `pulumi:"location"`
	// The name of the ARM resource.
	Name string `pulumi:"name"`
	// The properties of an Azure Cosmos DB userDefinedFunction
	Properties SqlUserDefinedFunctionGetPropertiesResponse `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags *TagsResponse `pulumi:"tags"`
	// The type of Azure resource.
	Type string `pulumi:"type"`
}

// SqlResourceSqlUserDefinedFunctionTypeInput is an input type that accepts SqlResourceSqlUserDefinedFunctionTypeArgs and SqlResourceSqlUserDefinedFunctionTypeOutput values.
// You can construct a concrete instance of `SqlResourceSqlUserDefinedFunctionTypeInput` via:
//
//          SqlResourceSqlUserDefinedFunctionTypeArgs{...}
type SqlResourceSqlUserDefinedFunctionTypeInput interface {
	pulumi.Input

	ToSqlResourceSqlUserDefinedFunctionTypeOutput() SqlResourceSqlUserDefinedFunctionTypeOutput
	ToSqlResourceSqlUserDefinedFunctionTypeOutputWithContext(context.Context) SqlResourceSqlUserDefinedFunctionTypeOutput
}

// An Azure Cosmos DB userDefinedFunction.
type SqlResourceSqlUserDefinedFunctionTypeArgs struct {
	// The location of the resource group to which the resource belongs.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the ARM resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of an Azure Cosmos DB userDefinedFunction
	Properties SqlUserDefinedFunctionGetPropertiesResponseInput `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags TagsResponsePtrInput `pulumi:"tags"`
	// The type of Azure resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SqlResourceSqlUserDefinedFunctionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlResourceSqlUserDefinedFunctionType)(nil)).Elem()
}

func (i SqlResourceSqlUserDefinedFunctionTypeArgs) ToSqlResourceSqlUserDefinedFunctionTypeOutput() SqlResourceSqlUserDefinedFunctionTypeOutput {
	return i.ToSqlResourceSqlUserDefinedFunctionTypeOutputWithContext(context.Background())
}

func (i SqlResourceSqlUserDefinedFunctionTypeArgs) ToSqlResourceSqlUserDefinedFunctionTypeOutputWithContext(ctx context.Context) SqlResourceSqlUserDefinedFunctionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlResourceSqlUserDefinedFunctionTypeOutput)
}

// An Azure Cosmos DB userDefinedFunction.
type SqlResourceSqlUserDefinedFunctionTypeOutput struct{ *pulumi.OutputState }

func (SqlResourceSqlUserDefinedFunctionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlResourceSqlUserDefinedFunctionType)(nil)).Elem()
}

func (o SqlResourceSqlUserDefinedFunctionTypeOutput) ToSqlResourceSqlUserDefinedFunctionTypeOutput() SqlResourceSqlUserDefinedFunctionTypeOutput {
	return o
}

func (o SqlResourceSqlUserDefinedFunctionTypeOutput) ToSqlResourceSqlUserDefinedFunctionTypeOutputWithContext(ctx context.Context) SqlResourceSqlUserDefinedFunctionTypeOutput {
	return o
}

// The location of the resource group to which the resource belongs.
func (o SqlResourceSqlUserDefinedFunctionTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlResourceSqlUserDefinedFunctionType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the ARM resource.
func (o SqlResourceSqlUserDefinedFunctionTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SqlResourceSqlUserDefinedFunctionType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of an Azure Cosmos DB userDefinedFunction
func (o SqlResourceSqlUserDefinedFunctionTypeOutput) Properties() SqlUserDefinedFunctionGetPropertiesResponseOutput {
	return o.ApplyT(func(v SqlResourceSqlUserDefinedFunctionType) SqlUserDefinedFunctionGetPropertiesResponse {
		return v.Properties
	}).(SqlUserDefinedFunctionGetPropertiesResponseOutput)
}

// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
func (o SqlResourceSqlUserDefinedFunctionTypeOutput) Tags() TagsResponsePtrOutput {
	return o.ApplyT(func(v SqlResourceSqlUserDefinedFunctionType) *TagsResponse { return v.Tags }).(TagsResponsePtrOutput)
}

// The type of Azure resource.
func (o SqlResourceSqlUserDefinedFunctionTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlResourceSqlUserDefinedFunctionType) string { return v.Type }).(pulumi.StringOutput)
}

// The properties of an Azure Cosmos DB StoredProcedure
type SqlStoredProcedureGetPropertiesResponse struct {
	Resource map[string]interface{} `pulumi:"resource"`
}

// SqlStoredProcedureGetPropertiesResponseInput is an input type that accepts SqlStoredProcedureGetPropertiesResponseArgs and SqlStoredProcedureGetPropertiesResponseOutput values.
// You can construct a concrete instance of `SqlStoredProcedureGetPropertiesResponseInput` via:
//
//          SqlStoredProcedureGetPropertiesResponseArgs{...}
type SqlStoredProcedureGetPropertiesResponseInput interface {
	pulumi.Input

	ToSqlStoredProcedureGetPropertiesResponseOutput() SqlStoredProcedureGetPropertiesResponseOutput
	ToSqlStoredProcedureGetPropertiesResponseOutputWithContext(context.Context) SqlStoredProcedureGetPropertiesResponseOutput
}

// The properties of an Azure Cosmos DB StoredProcedure
type SqlStoredProcedureGetPropertiesResponseArgs struct {
	Resource pulumi.MapInput `pulumi:"resource"`
}

func (SqlStoredProcedureGetPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlStoredProcedureGetPropertiesResponse)(nil)).Elem()
}

func (i SqlStoredProcedureGetPropertiesResponseArgs) ToSqlStoredProcedureGetPropertiesResponseOutput() SqlStoredProcedureGetPropertiesResponseOutput {
	return i.ToSqlStoredProcedureGetPropertiesResponseOutputWithContext(context.Background())
}

func (i SqlStoredProcedureGetPropertiesResponseArgs) ToSqlStoredProcedureGetPropertiesResponseOutputWithContext(ctx context.Context) SqlStoredProcedureGetPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlStoredProcedureGetPropertiesResponseOutput)
}

func (i SqlStoredProcedureGetPropertiesResponseArgs) ToSqlStoredProcedureGetPropertiesResponsePtrOutput() SqlStoredProcedureGetPropertiesResponsePtrOutput {
	return i.ToSqlStoredProcedureGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i SqlStoredProcedureGetPropertiesResponseArgs) ToSqlStoredProcedureGetPropertiesResponsePtrOutputWithContext(ctx context.Context) SqlStoredProcedureGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlStoredProcedureGetPropertiesResponseOutput).ToSqlStoredProcedureGetPropertiesResponsePtrOutputWithContext(ctx)
}

// SqlStoredProcedureGetPropertiesResponsePtrInput is an input type that accepts SqlStoredProcedureGetPropertiesResponseArgs, SqlStoredProcedureGetPropertiesResponsePtr and SqlStoredProcedureGetPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `SqlStoredProcedureGetPropertiesResponsePtrInput` via:
//
//          SqlStoredProcedureGetPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type SqlStoredProcedureGetPropertiesResponsePtrInput interface {
	pulumi.Input

	ToSqlStoredProcedureGetPropertiesResponsePtrOutput() SqlStoredProcedureGetPropertiesResponsePtrOutput
	ToSqlStoredProcedureGetPropertiesResponsePtrOutputWithContext(context.Context) SqlStoredProcedureGetPropertiesResponsePtrOutput
}

type sqlStoredProcedureGetPropertiesResponsePtrType SqlStoredProcedureGetPropertiesResponseArgs

func SqlStoredProcedureGetPropertiesResponsePtr(v *SqlStoredProcedureGetPropertiesResponseArgs) SqlStoredProcedureGetPropertiesResponsePtrInput {
	return (*sqlStoredProcedureGetPropertiesResponsePtrType)(v)
}

func (*sqlStoredProcedureGetPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlStoredProcedureGetPropertiesResponse)(nil)).Elem()
}

func (i *sqlStoredProcedureGetPropertiesResponsePtrType) ToSqlStoredProcedureGetPropertiesResponsePtrOutput() SqlStoredProcedureGetPropertiesResponsePtrOutput {
	return i.ToSqlStoredProcedureGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *sqlStoredProcedureGetPropertiesResponsePtrType) ToSqlStoredProcedureGetPropertiesResponsePtrOutputWithContext(ctx context.Context) SqlStoredProcedureGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlStoredProcedureGetPropertiesResponsePtrOutput)
}

// The properties of an Azure Cosmos DB StoredProcedure
type SqlStoredProcedureGetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (SqlStoredProcedureGetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlStoredProcedureGetPropertiesResponse)(nil)).Elem()
}

func (o SqlStoredProcedureGetPropertiesResponseOutput) ToSqlStoredProcedureGetPropertiesResponseOutput() SqlStoredProcedureGetPropertiesResponseOutput {
	return o
}

func (o SqlStoredProcedureGetPropertiesResponseOutput) ToSqlStoredProcedureGetPropertiesResponseOutputWithContext(ctx context.Context) SqlStoredProcedureGetPropertiesResponseOutput {
	return o
}

func (o SqlStoredProcedureGetPropertiesResponseOutput) ToSqlStoredProcedureGetPropertiesResponsePtrOutput() SqlStoredProcedureGetPropertiesResponsePtrOutput {
	return o.ToSqlStoredProcedureGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o SqlStoredProcedureGetPropertiesResponseOutput) ToSqlStoredProcedureGetPropertiesResponsePtrOutputWithContext(ctx context.Context) SqlStoredProcedureGetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v SqlStoredProcedureGetPropertiesResponse) *SqlStoredProcedureGetPropertiesResponse {
		return &v
	}).(SqlStoredProcedureGetPropertiesResponsePtrOutput)
}
func (o SqlStoredProcedureGetPropertiesResponseOutput) Resource() pulumi.MapOutput {
	return o.ApplyT(func(v SqlStoredProcedureGetPropertiesResponse) map[string]interface{} { return v.Resource }).(pulumi.MapOutput)
}

type SqlStoredProcedureGetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (SqlStoredProcedureGetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlStoredProcedureGetPropertiesResponse)(nil)).Elem()
}

func (o SqlStoredProcedureGetPropertiesResponsePtrOutput) ToSqlStoredProcedureGetPropertiesResponsePtrOutput() SqlStoredProcedureGetPropertiesResponsePtrOutput {
	return o
}

func (o SqlStoredProcedureGetPropertiesResponsePtrOutput) ToSqlStoredProcedureGetPropertiesResponsePtrOutputWithContext(ctx context.Context) SqlStoredProcedureGetPropertiesResponsePtrOutput {
	return o
}

func (o SqlStoredProcedureGetPropertiesResponsePtrOutput) Elem() SqlStoredProcedureGetPropertiesResponseOutput {
	return o.ApplyT(func(v *SqlStoredProcedureGetPropertiesResponse) SqlStoredProcedureGetPropertiesResponse { return *v }).(SqlStoredProcedureGetPropertiesResponseOutput)
}

func (o SqlStoredProcedureGetPropertiesResponsePtrOutput) Resource() pulumi.MapOutput {
	return o.ApplyT(func(v *SqlStoredProcedureGetPropertiesResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.MapOutput)
}

// Cosmos DB SQL storedProcedure resource object
type SqlStoredProcedureResource struct {
	// Body of the Stored Procedure
	Body *string `pulumi:"body"`
	// Name of the Cosmos DB SQL storedProcedure
	Id string `pulumi:"id"`
}

// SqlStoredProcedureResourceInput is an input type that accepts SqlStoredProcedureResourceArgs and SqlStoredProcedureResourceOutput values.
// You can construct a concrete instance of `SqlStoredProcedureResourceInput` via:
//
//          SqlStoredProcedureResourceArgs{...}
type SqlStoredProcedureResourceInput interface {
	pulumi.Input

	ToSqlStoredProcedureResourceOutput() SqlStoredProcedureResourceOutput
	ToSqlStoredProcedureResourceOutputWithContext(context.Context) SqlStoredProcedureResourceOutput
}

// Cosmos DB SQL storedProcedure resource object
type SqlStoredProcedureResourceArgs struct {
	// Body of the Stored Procedure
	Body pulumi.StringPtrInput `pulumi:"body"`
	// Name of the Cosmos DB SQL storedProcedure
	Id pulumi.StringInput `pulumi:"id"`
}

func (SqlStoredProcedureResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlStoredProcedureResource)(nil)).Elem()
}

func (i SqlStoredProcedureResourceArgs) ToSqlStoredProcedureResourceOutput() SqlStoredProcedureResourceOutput {
	return i.ToSqlStoredProcedureResourceOutputWithContext(context.Background())
}

func (i SqlStoredProcedureResourceArgs) ToSqlStoredProcedureResourceOutputWithContext(ctx context.Context) SqlStoredProcedureResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlStoredProcedureResourceOutput)
}

func (i SqlStoredProcedureResourceArgs) ToSqlStoredProcedureResourcePtrOutput() SqlStoredProcedureResourcePtrOutput {
	return i.ToSqlStoredProcedureResourcePtrOutputWithContext(context.Background())
}

func (i SqlStoredProcedureResourceArgs) ToSqlStoredProcedureResourcePtrOutputWithContext(ctx context.Context) SqlStoredProcedureResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlStoredProcedureResourceOutput).ToSqlStoredProcedureResourcePtrOutputWithContext(ctx)
}

// SqlStoredProcedureResourcePtrInput is an input type that accepts SqlStoredProcedureResourceArgs, SqlStoredProcedureResourcePtr and SqlStoredProcedureResourcePtrOutput values.
// You can construct a concrete instance of `SqlStoredProcedureResourcePtrInput` via:
//
//          SqlStoredProcedureResourceArgs{...}
//
//  or:
//
//          nil
type SqlStoredProcedureResourcePtrInput interface {
	pulumi.Input

	ToSqlStoredProcedureResourcePtrOutput() SqlStoredProcedureResourcePtrOutput
	ToSqlStoredProcedureResourcePtrOutputWithContext(context.Context) SqlStoredProcedureResourcePtrOutput
}

type sqlStoredProcedureResourcePtrType SqlStoredProcedureResourceArgs

func SqlStoredProcedureResourcePtr(v *SqlStoredProcedureResourceArgs) SqlStoredProcedureResourcePtrInput {
	return (*sqlStoredProcedureResourcePtrType)(v)
}

func (*sqlStoredProcedureResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlStoredProcedureResource)(nil)).Elem()
}

func (i *sqlStoredProcedureResourcePtrType) ToSqlStoredProcedureResourcePtrOutput() SqlStoredProcedureResourcePtrOutput {
	return i.ToSqlStoredProcedureResourcePtrOutputWithContext(context.Background())
}

func (i *sqlStoredProcedureResourcePtrType) ToSqlStoredProcedureResourcePtrOutputWithContext(ctx context.Context) SqlStoredProcedureResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlStoredProcedureResourcePtrOutput)
}

// Cosmos DB SQL storedProcedure resource object
type SqlStoredProcedureResourceOutput struct{ *pulumi.OutputState }

func (SqlStoredProcedureResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlStoredProcedureResource)(nil)).Elem()
}

func (o SqlStoredProcedureResourceOutput) ToSqlStoredProcedureResourceOutput() SqlStoredProcedureResourceOutput {
	return o
}

func (o SqlStoredProcedureResourceOutput) ToSqlStoredProcedureResourceOutputWithContext(ctx context.Context) SqlStoredProcedureResourceOutput {
	return o
}

func (o SqlStoredProcedureResourceOutput) ToSqlStoredProcedureResourcePtrOutput() SqlStoredProcedureResourcePtrOutput {
	return o.ToSqlStoredProcedureResourcePtrOutputWithContext(context.Background())
}

func (o SqlStoredProcedureResourceOutput) ToSqlStoredProcedureResourcePtrOutputWithContext(ctx context.Context) SqlStoredProcedureResourcePtrOutput {
	return o.ApplyT(func(v SqlStoredProcedureResource) *SqlStoredProcedureResource {
		return &v
	}).(SqlStoredProcedureResourcePtrOutput)
}

// Body of the Stored Procedure
func (o SqlStoredProcedureResourceOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlStoredProcedureResource) *string { return v.Body }).(pulumi.StringPtrOutput)
}

// Name of the Cosmos DB SQL storedProcedure
func (o SqlStoredProcedureResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SqlStoredProcedureResource) string { return v.Id }).(pulumi.StringOutput)
}

type SqlStoredProcedureResourcePtrOutput struct{ *pulumi.OutputState }

func (SqlStoredProcedureResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlStoredProcedureResource)(nil)).Elem()
}

func (o SqlStoredProcedureResourcePtrOutput) ToSqlStoredProcedureResourcePtrOutput() SqlStoredProcedureResourcePtrOutput {
	return o
}

func (o SqlStoredProcedureResourcePtrOutput) ToSqlStoredProcedureResourcePtrOutputWithContext(ctx context.Context) SqlStoredProcedureResourcePtrOutput {
	return o
}

func (o SqlStoredProcedureResourcePtrOutput) Elem() SqlStoredProcedureResourceOutput {
	return o.ApplyT(func(v *SqlStoredProcedureResource) SqlStoredProcedureResource { return *v }).(SqlStoredProcedureResourceOutput)
}

// Body of the Stored Procedure
func (o SqlStoredProcedureResourcePtrOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlStoredProcedureResource) *string {
		if v == nil {
			return nil
		}
		return v.Body
	}).(pulumi.StringPtrOutput)
}

// Name of the Cosmos DB SQL storedProcedure
func (o SqlStoredProcedureResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlStoredProcedureResource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The properties of an Azure Cosmos DB trigger
type SqlTriggerGetPropertiesResponse struct {
	Resource map[string]interface{} `pulumi:"resource"`
}

// SqlTriggerGetPropertiesResponseInput is an input type that accepts SqlTriggerGetPropertiesResponseArgs and SqlTriggerGetPropertiesResponseOutput values.
// You can construct a concrete instance of `SqlTriggerGetPropertiesResponseInput` via:
//
//          SqlTriggerGetPropertiesResponseArgs{...}
type SqlTriggerGetPropertiesResponseInput interface {
	pulumi.Input

	ToSqlTriggerGetPropertiesResponseOutput() SqlTriggerGetPropertiesResponseOutput
	ToSqlTriggerGetPropertiesResponseOutputWithContext(context.Context) SqlTriggerGetPropertiesResponseOutput
}

// The properties of an Azure Cosmos DB trigger
type SqlTriggerGetPropertiesResponseArgs struct {
	Resource pulumi.MapInput `pulumi:"resource"`
}

func (SqlTriggerGetPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlTriggerGetPropertiesResponse)(nil)).Elem()
}

func (i SqlTriggerGetPropertiesResponseArgs) ToSqlTriggerGetPropertiesResponseOutput() SqlTriggerGetPropertiesResponseOutput {
	return i.ToSqlTriggerGetPropertiesResponseOutputWithContext(context.Background())
}

func (i SqlTriggerGetPropertiesResponseArgs) ToSqlTriggerGetPropertiesResponseOutputWithContext(ctx context.Context) SqlTriggerGetPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlTriggerGetPropertiesResponseOutput)
}

func (i SqlTriggerGetPropertiesResponseArgs) ToSqlTriggerGetPropertiesResponsePtrOutput() SqlTriggerGetPropertiesResponsePtrOutput {
	return i.ToSqlTriggerGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i SqlTriggerGetPropertiesResponseArgs) ToSqlTriggerGetPropertiesResponsePtrOutputWithContext(ctx context.Context) SqlTriggerGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlTriggerGetPropertiesResponseOutput).ToSqlTriggerGetPropertiesResponsePtrOutputWithContext(ctx)
}

// SqlTriggerGetPropertiesResponsePtrInput is an input type that accepts SqlTriggerGetPropertiesResponseArgs, SqlTriggerGetPropertiesResponsePtr and SqlTriggerGetPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `SqlTriggerGetPropertiesResponsePtrInput` via:
//
//          SqlTriggerGetPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type SqlTriggerGetPropertiesResponsePtrInput interface {
	pulumi.Input

	ToSqlTriggerGetPropertiesResponsePtrOutput() SqlTriggerGetPropertiesResponsePtrOutput
	ToSqlTriggerGetPropertiesResponsePtrOutputWithContext(context.Context) SqlTriggerGetPropertiesResponsePtrOutput
}

type sqlTriggerGetPropertiesResponsePtrType SqlTriggerGetPropertiesResponseArgs

func SqlTriggerGetPropertiesResponsePtr(v *SqlTriggerGetPropertiesResponseArgs) SqlTriggerGetPropertiesResponsePtrInput {
	return (*sqlTriggerGetPropertiesResponsePtrType)(v)
}

func (*sqlTriggerGetPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlTriggerGetPropertiesResponse)(nil)).Elem()
}

func (i *sqlTriggerGetPropertiesResponsePtrType) ToSqlTriggerGetPropertiesResponsePtrOutput() SqlTriggerGetPropertiesResponsePtrOutput {
	return i.ToSqlTriggerGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *sqlTriggerGetPropertiesResponsePtrType) ToSqlTriggerGetPropertiesResponsePtrOutputWithContext(ctx context.Context) SqlTriggerGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlTriggerGetPropertiesResponsePtrOutput)
}

// The properties of an Azure Cosmos DB trigger
type SqlTriggerGetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (SqlTriggerGetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlTriggerGetPropertiesResponse)(nil)).Elem()
}

func (o SqlTriggerGetPropertiesResponseOutput) ToSqlTriggerGetPropertiesResponseOutput() SqlTriggerGetPropertiesResponseOutput {
	return o
}

func (o SqlTriggerGetPropertiesResponseOutput) ToSqlTriggerGetPropertiesResponseOutputWithContext(ctx context.Context) SqlTriggerGetPropertiesResponseOutput {
	return o
}

func (o SqlTriggerGetPropertiesResponseOutput) ToSqlTriggerGetPropertiesResponsePtrOutput() SqlTriggerGetPropertiesResponsePtrOutput {
	return o.ToSqlTriggerGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o SqlTriggerGetPropertiesResponseOutput) ToSqlTriggerGetPropertiesResponsePtrOutputWithContext(ctx context.Context) SqlTriggerGetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v SqlTriggerGetPropertiesResponse) *SqlTriggerGetPropertiesResponse {
		return &v
	}).(SqlTriggerGetPropertiesResponsePtrOutput)
}
func (o SqlTriggerGetPropertiesResponseOutput) Resource() pulumi.MapOutput {
	return o.ApplyT(func(v SqlTriggerGetPropertiesResponse) map[string]interface{} { return v.Resource }).(pulumi.MapOutput)
}

type SqlTriggerGetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (SqlTriggerGetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlTriggerGetPropertiesResponse)(nil)).Elem()
}

func (o SqlTriggerGetPropertiesResponsePtrOutput) ToSqlTriggerGetPropertiesResponsePtrOutput() SqlTriggerGetPropertiesResponsePtrOutput {
	return o
}

func (o SqlTriggerGetPropertiesResponsePtrOutput) ToSqlTriggerGetPropertiesResponsePtrOutputWithContext(ctx context.Context) SqlTriggerGetPropertiesResponsePtrOutput {
	return o
}

func (o SqlTriggerGetPropertiesResponsePtrOutput) Elem() SqlTriggerGetPropertiesResponseOutput {
	return o.ApplyT(func(v *SqlTriggerGetPropertiesResponse) SqlTriggerGetPropertiesResponse { return *v }).(SqlTriggerGetPropertiesResponseOutput)
}

func (o SqlTriggerGetPropertiesResponsePtrOutput) Resource() pulumi.MapOutput {
	return o.ApplyT(func(v *SqlTriggerGetPropertiesResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.MapOutput)
}

// Cosmos DB SQL trigger resource object
type SqlTriggerResource struct {
	// Body of the Trigger
	Body *string `pulumi:"body"`
	// Name of the Cosmos DB SQL trigger
	Id string `pulumi:"id"`
	// The operation the trigger is associated with
	TriggerOperation *string `pulumi:"triggerOperation"`
	// Type of the Trigger
	TriggerType *string `pulumi:"triggerType"`
}

// SqlTriggerResourceInput is an input type that accepts SqlTriggerResourceArgs and SqlTriggerResourceOutput values.
// You can construct a concrete instance of `SqlTriggerResourceInput` via:
//
//          SqlTriggerResourceArgs{...}
type SqlTriggerResourceInput interface {
	pulumi.Input

	ToSqlTriggerResourceOutput() SqlTriggerResourceOutput
	ToSqlTriggerResourceOutputWithContext(context.Context) SqlTriggerResourceOutput
}

// Cosmos DB SQL trigger resource object
type SqlTriggerResourceArgs struct {
	// Body of the Trigger
	Body pulumi.StringPtrInput `pulumi:"body"`
	// Name of the Cosmos DB SQL trigger
	Id pulumi.StringInput `pulumi:"id"`
	// The operation the trigger is associated with
	TriggerOperation pulumi.StringPtrInput `pulumi:"triggerOperation"`
	// Type of the Trigger
	TriggerType pulumi.StringPtrInput `pulumi:"triggerType"`
}

func (SqlTriggerResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlTriggerResource)(nil)).Elem()
}

func (i SqlTriggerResourceArgs) ToSqlTriggerResourceOutput() SqlTriggerResourceOutput {
	return i.ToSqlTriggerResourceOutputWithContext(context.Background())
}

func (i SqlTriggerResourceArgs) ToSqlTriggerResourceOutputWithContext(ctx context.Context) SqlTriggerResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlTriggerResourceOutput)
}

func (i SqlTriggerResourceArgs) ToSqlTriggerResourcePtrOutput() SqlTriggerResourcePtrOutput {
	return i.ToSqlTriggerResourcePtrOutputWithContext(context.Background())
}

func (i SqlTriggerResourceArgs) ToSqlTriggerResourcePtrOutputWithContext(ctx context.Context) SqlTriggerResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlTriggerResourceOutput).ToSqlTriggerResourcePtrOutputWithContext(ctx)
}

// SqlTriggerResourcePtrInput is an input type that accepts SqlTriggerResourceArgs, SqlTriggerResourcePtr and SqlTriggerResourcePtrOutput values.
// You can construct a concrete instance of `SqlTriggerResourcePtrInput` via:
//
//          SqlTriggerResourceArgs{...}
//
//  or:
//
//          nil
type SqlTriggerResourcePtrInput interface {
	pulumi.Input

	ToSqlTriggerResourcePtrOutput() SqlTriggerResourcePtrOutput
	ToSqlTriggerResourcePtrOutputWithContext(context.Context) SqlTriggerResourcePtrOutput
}

type sqlTriggerResourcePtrType SqlTriggerResourceArgs

func SqlTriggerResourcePtr(v *SqlTriggerResourceArgs) SqlTriggerResourcePtrInput {
	return (*sqlTriggerResourcePtrType)(v)
}

func (*sqlTriggerResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlTriggerResource)(nil)).Elem()
}

func (i *sqlTriggerResourcePtrType) ToSqlTriggerResourcePtrOutput() SqlTriggerResourcePtrOutput {
	return i.ToSqlTriggerResourcePtrOutputWithContext(context.Background())
}

func (i *sqlTriggerResourcePtrType) ToSqlTriggerResourcePtrOutputWithContext(ctx context.Context) SqlTriggerResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlTriggerResourcePtrOutput)
}

// Cosmos DB SQL trigger resource object
type SqlTriggerResourceOutput struct{ *pulumi.OutputState }

func (SqlTriggerResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlTriggerResource)(nil)).Elem()
}

func (o SqlTriggerResourceOutput) ToSqlTriggerResourceOutput() SqlTriggerResourceOutput {
	return o
}

func (o SqlTriggerResourceOutput) ToSqlTriggerResourceOutputWithContext(ctx context.Context) SqlTriggerResourceOutput {
	return o
}

func (o SqlTriggerResourceOutput) ToSqlTriggerResourcePtrOutput() SqlTriggerResourcePtrOutput {
	return o.ToSqlTriggerResourcePtrOutputWithContext(context.Background())
}

func (o SqlTriggerResourceOutput) ToSqlTriggerResourcePtrOutputWithContext(ctx context.Context) SqlTriggerResourcePtrOutput {
	return o.ApplyT(func(v SqlTriggerResource) *SqlTriggerResource {
		return &v
	}).(SqlTriggerResourcePtrOutput)
}

// Body of the Trigger
func (o SqlTriggerResourceOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlTriggerResource) *string { return v.Body }).(pulumi.StringPtrOutput)
}

// Name of the Cosmos DB SQL trigger
func (o SqlTriggerResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SqlTriggerResource) string { return v.Id }).(pulumi.StringOutput)
}

// The operation the trigger is associated with
func (o SqlTriggerResourceOutput) TriggerOperation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlTriggerResource) *string { return v.TriggerOperation }).(pulumi.StringPtrOutput)
}

// Type of the Trigger
func (o SqlTriggerResourceOutput) TriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlTriggerResource) *string { return v.TriggerType }).(pulumi.StringPtrOutput)
}

type SqlTriggerResourcePtrOutput struct{ *pulumi.OutputState }

func (SqlTriggerResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlTriggerResource)(nil)).Elem()
}

func (o SqlTriggerResourcePtrOutput) ToSqlTriggerResourcePtrOutput() SqlTriggerResourcePtrOutput {
	return o
}

func (o SqlTriggerResourcePtrOutput) ToSqlTriggerResourcePtrOutputWithContext(ctx context.Context) SqlTriggerResourcePtrOutput {
	return o
}

func (o SqlTriggerResourcePtrOutput) Elem() SqlTriggerResourceOutput {
	return o.ApplyT(func(v *SqlTriggerResource) SqlTriggerResource { return *v }).(SqlTriggerResourceOutput)
}

// Body of the Trigger
func (o SqlTriggerResourcePtrOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlTriggerResource) *string {
		if v == nil {
			return nil
		}
		return v.Body
	}).(pulumi.StringPtrOutput)
}

// Name of the Cosmos DB SQL trigger
func (o SqlTriggerResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlTriggerResource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The operation the trigger is associated with
func (o SqlTriggerResourcePtrOutput) TriggerOperation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlTriggerResource) *string {
		if v == nil {
			return nil
		}
		return v.TriggerOperation
	}).(pulumi.StringPtrOutput)
}

// Type of the Trigger
func (o SqlTriggerResourcePtrOutput) TriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlTriggerResource) *string {
		if v == nil {
			return nil
		}
		return v.TriggerType
	}).(pulumi.StringPtrOutput)
}

// The properties of an Azure Cosmos DB userDefinedFunction
type SqlUserDefinedFunctionGetPropertiesResponse struct {
	Resource map[string]interface{} `pulumi:"resource"`
}

// SqlUserDefinedFunctionGetPropertiesResponseInput is an input type that accepts SqlUserDefinedFunctionGetPropertiesResponseArgs and SqlUserDefinedFunctionGetPropertiesResponseOutput values.
// You can construct a concrete instance of `SqlUserDefinedFunctionGetPropertiesResponseInput` via:
//
//          SqlUserDefinedFunctionGetPropertiesResponseArgs{...}
type SqlUserDefinedFunctionGetPropertiesResponseInput interface {
	pulumi.Input

	ToSqlUserDefinedFunctionGetPropertiesResponseOutput() SqlUserDefinedFunctionGetPropertiesResponseOutput
	ToSqlUserDefinedFunctionGetPropertiesResponseOutputWithContext(context.Context) SqlUserDefinedFunctionGetPropertiesResponseOutput
}

// The properties of an Azure Cosmos DB userDefinedFunction
type SqlUserDefinedFunctionGetPropertiesResponseArgs struct {
	Resource pulumi.MapInput `pulumi:"resource"`
}

func (SqlUserDefinedFunctionGetPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlUserDefinedFunctionGetPropertiesResponse)(nil)).Elem()
}

func (i SqlUserDefinedFunctionGetPropertiesResponseArgs) ToSqlUserDefinedFunctionGetPropertiesResponseOutput() SqlUserDefinedFunctionGetPropertiesResponseOutput {
	return i.ToSqlUserDefinedFunctionGetPropertiesResponseOutputWithContext(context.Background())
}

func (i SqlUserDefinedFunctionGetPropertiesResponseArgs) ToSqlUserDefinedFunctionGetPropertiesResponseOutputWithContext(ctx context.Context) SqlUserDefinedFunctionGetPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlUserDefinedFunctionGetPropertiesResponseOutput)
}

func (i SqlUserDefinedFunctionGetPropertiesResponseArgs) ToSqlUserDefinedFunctionGetPropertiesResponsePtrOutput() SqlUserDefinedFunctionGetPropertiesResponsePtrOutput {
	return i.ToSqlUserDefinedFunctionGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i SqlUserDefinedFunctionGetPropertiesResponseArgs) ToSqlUserDefinedFunctionGetPropertiesResponsePtrOutputWithContext(ctx context.Context) SqlUserDefinedFunctionGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlUserDefinedFunctionGetPropertiesResponseOutput).ToSqlUserDefinedFunctionGetPropertiesResponsePtrOutputWithContext(ctx)
}

// SqlUserDefinedFunctionGetPropertiesResponsePtrInput is an input type that accepts SqlUserDefinedFunctionGetPropertiesResponseArgs, SqlUserDefinedFunctionGetPropertiesResponsePtr and SqlUserDefinedFunctionGetPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `SqlUserDefinedFunctionGetPropertiesResponsePtrInput` via:
//
//          SqlUserDefinedFunctionGetPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type SqlUserDefinedFunctionGetPropertiesResponsePtrInput interface {
	pulumi.Input

	ToSqlUserDefinedFunctionGetPropertiesResponsePtrOutput() SqlUserDefinedFunctionGetPropertiesResponsePtrOutput
	ToSqlUserDefinedFunctionGetPropertiesResponsePtrOutputWithContext(context.Context) SqlUserDefinedFunctionGetPropertiesResponsePtrOutput
}

type sqlUserDefinedFunctionGetPropertiesResponsePtrType SqlUserDefinedFunctionGetPropertiesResponseArgs

func SqlUserDefinedFunctionGetPropertiesResponsePtr(v *SqlUserDefinedFunctionGetPropertiesResponseArgs) SqlUserDefinedFunctionGetPropertiesResponsePtrInput {
	return (*sqlUserDefinedFunctionGetPropertiesResponsePtrType)(v)
}

func (*sqlUserDefinedFunctionGetPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlUserDefinedFunctionGetPropertiesResponse)(nil)).Elem()
}

func (i *sqlUserDefinedFunctionGetPropertiesResponsePtrType) ToSqlUserDefinedFunctionGetPropertiesResponsePtrOutput() SqlUserDefinedFunctionGetPropertiesResponsePtrOutput {
	return i.ToSqlUserDefinedFunctionGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *sqlUserDefinedFunctionGetPropertiesResponsePtrType) ToSqlUserDefinedFunctionGetPropertiesResponsePtrOutputWithContext(ctx context.Context) SqlUserDefinedFunctionGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlUserDefinedFunctionGetPropertiesResponsePtrOutput)
}

// The properties of an Azure Cosmos DB userDefinedFunction
type SqlUserDefinedFunctionGetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (SqlUserDefinedFunctionGetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlUserDefinedFunctionGetPropertiesResponse)(nil)).Elem()
}

func (o SqlUserDefinedFunctionGetPropertiesResponseOutput) ToSqlUserDefinedFunctionGetPropertiesResponseOutput() SqlUserDefinedFunctionGetPropertiesResponseOutput {
	return o
}

func (o SqlUserDefinedFunctionGetPropertiesResponseOutput) ToSqlUserDefinedFunctionGetPropertiesResponseOutputWithContext(ctx context.Context) SqlUserDefinedFunctionGetPropertiesResponseOutput {
	return o
}

func (o SqlUserDefinedFunctionGetPropertiesResponseOutput) ToSqlUserDefinedFunctionGetPropertiesResponsePtrOutput() SqlUserDefinedFunctionGetPropertiesResponsePtrOutput {
	return o.ToSqlUserDefinedFunctionGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o SqlUserDefinedFunctionGetPropertiesResponseOutput) ToSqlUserDefinedFunctionGetPropertiesResponsePtrOutputWithContext(ctx context.Context) SqlUserDefinedFunctionGetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v SqlUserDefinedFunctionGetPropertiesResponse) *SqlUserDefinedFunctionGetPropertiesResponse {
		return &v
	}).(SqlUserDefinedFunctionGetPropertiesResponsePtrOutput)
}
func (o SqlUserDefinedFunctionGetPropertiesResponseOutput) Resource() pulumi.MapOutput {
	return o.ApplyT(func(v SqlUserDefinedFunctionGetPropertiesResponse) map[string]interface{} { return v.Resource }).(pulumi.MapOutput)
}

type SqlUserDefinedFunctionGetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (SqlUserDefinedFunctionGetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlUserDefinedFunctionGetPropertiesResponse)(nil)).Elem()
}

func (o SqlUserDefinedFunctionGetPropertiesResponsePtrOutput) ToSqlUserDefinedFunctionGetPropertiesResponsePtrOutput() SqlUserDefinedFunctionGetPropertiesResponsePtrOutput {
	return o
}

func (o SqlUserDefinedFunctionGetPropertiesResponsePtrOutput) ToSqlUserDefinedFunctionGetPropertiesResponsePtrOutputWithContext(ctx context.Context) SqlUserDefinedFunctionGetPropertiesResponsePtrOutput {
	return o
}

func (o SqlUserDefinedFunctionGetPropertiesResponsePtrOutput) Elem() SqlUserDefinedFunctionGetPropertiesResponseOutput {
	return o.ApplyT(func(v *SqlUserDefinedFunctionGetPropertiesResponse) SqlUserDefinedFunctionGetPropertiesResponse {
		return *v
	}).(SqlUserDefinedFunctionGetPropertiesResponseOutput)
}

func (o SqlUserDefinedFunctionGetPropertiesResponsePtrOutput) Resource() pulumi.MapOutput {
	return o.ApplyT(func(v *SqlUserDefinedFunctionGetPropertiesResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.MapOutput)
}

// Cosmos DB SQL userDefinedFunction resource object
type SqlUserDefinedFunctionResource struct {
	// Body of the User Defined Function
	Body *string `pulumi:"body"`
	// Name of the Cosmos DB SQL userDefinedFunction
	Id string `pulumi:"id"`
}

// SqlUserDefinedFunctionResourceInput is an input type that accepts SqlUserDefinedFunctionResourceArgs and SqlUserDefinedFunctionResourceOutput values.
// You can construct a concrete instance of `SqlUserDefinedFunctionResourceInput` via:
//
//          SqlUserDefinedFunctionResourceArgs{...}
type SqlUserDefinedFunctionResourceInput interface {
	pulumi.Input

	ToSqlUserDefinedFunctionResourceOutput() SqlUserDefinedFunctionResourceOutput
	ToSqlUserDefinedFunctionResourceOutputWithContext(context.Context) SqlUserDefinedFunctionResourceOutput
}

// Cosmos DB SQL userDefinedFunction resource object
type SqlUserDefinedFunctionResourceArgs struct {
	// Body of the User Defined Function
	Body pulumi.StringPtrInput `pulumi:"body"`
	// Name of the Cosmos DB SQL userDefinedFunction
	Id pulumi.StringInput `pulumi:"id"`
}

func (SqlUserDefinedFunctionResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlUserDefinedFunctionResource)(nil)).Elem()
}

func (i SqlUserDefinedFunctionResourceArgs) ToSqlUserDefinedFunctionResourceOutput() SqlUserDefinedFunctionResourceOutput {
	return i.ToSqlUserDefinedFunctionResourceOutputWithContext(context.Background())
}

func (i SqlUserDefinedFunctionResourceArgs) ToSqlUserDefinedFunctionResourceOutputWithContext(ctx context.Context) SqlUserDefinedFunctionResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlUserDefinedFunctionResourceOutput)
}

func (i SqlUserDefinedFunctionResourceArgs) ToSqlUserDefinedFunctionResourcePtrOutput() SqlUserDefinedFunctionResourcePtrOutput {
	return i.ToSqlUserDefinedFunctionResourcePtrOutputWithContext(context.Background())
}

func (i SqlUserDefinedFunctionResourceArgs) ToSqlUserDefinedFunctionResourcePtrOutputWithContext(ctx context.Context) SqlUserDefinedFunctionResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlUserDefinedFunctionResourceOutput).ToSqlUserDefinedFunctionResourcePtrOutputWithContext(ctx)
}

// SqlUserDefinedFunctionResourcePtrInput is an input type that accepts SqlUserDefinedFunctionResourceArgs, SqlUserDefinedFunctionResourcePtr and SqlUserDefinedFunctionResourcePtrOutput values.
// You can construct a concrete instance of `SqlUserDefinedFunctionResourcePtrInput` via:
//
//          SqlUserDefinedFunctionResourceArgs{...}
//
//  or:
//
//          nil
type SqlUserDefinedFunctionResourcePtrInput interface {
	pulumi.Input

	ToSqlUserDefinedFunctionResourcePtrOutput() SqlUserDefinedFunctionResourcePtrOutput
	ToSqlUserDefinedFunctionResourcePtrOutputWithContext(context.Context) SqlUserDefinedFunctionResourcePtrOutput
}

type sqlUserDefinedFunctionResourcePtrType SqlUserDefinedFunctionResourceArgs

func SqlUserDefinedFunctionResourcePtr(v *SqlUserDefinedFunctionResourceArgs) SqlUserDefinedFunctionResourcePtrInput {
	return (*sqlUserDefinedFunctionResourcePtrType)(v)
}

func (*sqlUserDefinedFunctionResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlUserDefinedFunctionResource)(nil)).Elem()
}

func (i *sqlUserDefinedFunctionResourcePtrType) ToSqlUserDefinedFunctionResourcePtrOutput() SqlUserDefinedFunctionResourcePtrOutput {
	return i.ToSqlUserDefinedFunctionResourcePtrOutputWithContext(context.Background())
}

func (i *sqlUserDefinedFunctionResourcePtrType) ToSqlUserDefinedFunctionResourcePtrOutputWithContext(ctx context.Context) SqlUserDefinedFunctionResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlUserDefinedFunctionResourcePtrOutput)
}

// Cosmos DB SQL userDefinedFunction resource object
type SqlUserDefinedFunctionResourceOutput struct{ *pulumi.OutputState }

func (SqlUserDefinedFunctionResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlUserDefinedFunctionResource)(nil)).Elem()
}

func (o SqlUserDefinedFunctionResourceOutput) ToSqlUserDefinedFunctionResourceOutput() SqlUserDefinedFunctionResourceOutput {
	return o
}

func (o SqlUserDefinedFunctionResourceOutput) ToSqlUserDefinedFunctionResourceOutputWithContext(ctx context.Context) SqlUserDefinedFunctionResourceOutput {
	return o
}

func (o SqlUserDefinedFunctionResourceOutput) ToSqlUserDefinedFunctionResourcePtrOutput() SqlUserDefinedFunctionResourcePtrOutput {
	return o.ToSqlUserDefinedFunctionResourcePtrOutputWithContext(context.Background())
}

func (o SqlUserDefinedFunctionResourceOutput) ToSqlUserDefinedFunctionResourcePtrOutputWithContext(ctx context.Context) SqlUserDefinedFunctionResourcePtrOutput {
	return o.ApplyT(func(v SqlUserDefinedFunctionResource) *SqlUserDefinedFunctionResource {
		return &v
	}).(SqlUserDefinedFunctionResourcePtrOutput)
}

// Body of the User Defined Function
func (o SqlUserDefinedFunctionResourceOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlUserDefinedFunctionResource) *string { return v.Body }).(pulumi.StringPtrOutput)
}

// Name of the Cosmos DB SQL userDefinedFunction
func (o SqlUserDefinedFunctionResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SqlUserDefinedFunctionResource) string { return v.Id }).(pulumi.StringOutput)
}

type SqlUserDefinedFunctionResourcePtrOutput struct{ *pulumi.OutputState }

func (SqlUserDefinedFunctionResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlUserDefinedFunctionResource)(nil)).Elem()
}

func (o SqlUserDefinedFunctionResourcePtrOutput) ToSqlUserDefinedFunctionResourcePtrOutput() SqlUserDefinedFunctionResourcePtrOutput {
	return o
}

func (o SqlUserDefinedFunctionResourcePtrOutput) ToSqlUserDefinedFunctionResourcePtrOutputWithContext(ctx context.Context) SqlUserDefinedFunctionResourcePtrOutput {
	return o
}

func (o SqlUserDefinedFunctionResourcePtrOutput) Elem() SqlUserDefinedFunctionResourceOutput {
	return o.ApplyT(func(v *SqlUserDefinedFunctionResource) SqlUserDefinedFunctionResource { return *v }).(SqlUserDefinedFunctionResourceOutput)
}

// Body of the User Defined Function
func (o SqlUserDefinedFunctionResourcePtrOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlUserDefinedFunctionResource) *string {
		if v == nil {
			return nil
		}
		return v.Body
	}).(pulumi.StringPtrOutput)
}

// Name of the Cosmos DB SQL userDefinedFunction
func (o SqlUserDefinedFunctionResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlUserDefinedFunctionResource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The properties of an Azure Cosmos Table
type TableGetPropertiesResponse struct {
	Resource map[string]interface{} `pulumi:"resource"`
}

// TableGetPropertiesResponseInput is an input type that accepts TableGetPropertiesResponseArgs and TableGetPropertiesResponseOutput values.
// You can construct a concrete instance of `TableGetPropertiesResponseInput` via:
//
//          TableGetPropertiesResponseArgs{...}
type TableGetPropertiesResponseInput interface {
	pulumi.Input

	ToTableGetPropertiesResponseOutput() TableGetPropertiesResponseOutput
	ToTableGetPropertiesResponseOutputWithContext(context.Context) TableGetPropertiesResponseOutput
}

// The properties of an Azure Cosmos Table
type TableGetPropertiesResponseArgs struct {
	Resource pulumi.MapInput `pulumi:"resource"`
}

func (TableGetPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableGetPropertiesResponse)(nil)).Elem()
}

func (i TableGetPropertiesResponseArgs) ToTableGetPropertiesResponseOutput() TableGetPropertiesResponseOutput {
	return i.ToTableGetPropertiesResponseOutputWithContext(context.Background())
}

func (i TableGetPropertiesResponseArgs) ToTableGetPropertiesResponseOutputWithContext(ctx context.Context) TableGetPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableGetPropertiesResponseOutput)
}

func (i TableGetPropertiesResponseArgs) ToTableGetPropertiesResponsePtrOutput() TableGetPropertiesResponsePtrOutput {
	return i.ToTableGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i TableGetPropertiesResponseArgs) ToTableGetPropertiesResponsePtrOutputWithContext(ctx context.Context) TableGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableGetPropertiesResponseOutput).ToTableGetPropertiesResponsePtrOutputWithContext(ctx)
}

// TableGetPropertiesResponsePtrInput is an input type that accepts TableGetPropertiesResponseArgs, TableGetPropertiesResponsePtr and TableGetPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `TableGetPropertiesResponsePtrInput` via:
//
//          TableGetPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type TableGetPropertiesResponsePtrInput interface {
	pulumi.Input

	ToTableGetPropertiesResponsePtrOutput() TableGetPropertiesResponsePtrOutput
	ToTableGetPropertiesResponsePtrOutputWithContext(context.Context) TableGetPropertiesResponsePtrOutput
}

type tableGetPropertiesResponsePtrType TableGetPropertiesResponseArgs

func TableGetPropertiesResponsePtr(v *TableGetPropertiesResponseArgs) TableGetPropertiesResponsePtrInput {
	return (*tableGetPropertiesResponsePtrType)(v)
}

func (*tableGetPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableGetPropertiesResponse)(nil)).Elem()
}

func (i *tableGetPropertiesResponsePtrType) ToTableGetPropertiesResponsePtrOutput() TableGetPropertiesResponsePtrOutput {
	return i.ToTableGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *tableGetPropertiesResponsePtrType) ToTableGetPropertiesResponsePtrOutputWithContext(ctx context.Context) TableGetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableGetPropertiesResponsePtrOutput)
}

// The properties of an Azure Cosmos Table
type TableGetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (TableGetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableGetPropertiesResponse)(nil)).Elem()
}

func (o TableGetPropertiesResponseOutput) ToTableGetPropertiesResponseOutput() TableGetPropertiesResponseOutput {
	return o
}

func (o TableGetPropertiesResponseOutput) ToTableGetPropertiesResponseOutputWithContext(ctx context.Context) TableGetPropertiesResponseOutput {
	return o
}

func (o TableGetPropertiesResponseOutput) ToTableGetPropertiesResponsePtrOutput() TableGetPropertiesResponsePtrOutput {
	return o.ToTableGetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o TableGetPropertiesResponseOutput) ToTableGetPropertiesResponsePtrOutputWithContext(ctx context.Context) TableGetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v TableGetPropertiesResponse) *TableGetPropertiesResponse {
		return &v
	}).(TableGetPropertiesResponsePtrOutput)
}
func (o TableGetPropertiesResponseOutput) Resource() pulumi.MapOutput {
	return o.ApplyT(func(v TableGetPropertiesResponse) map[string]interface{} { return v.Resource }).(pulumi.MapOutput)
}

type TableGetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (TableGetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableGetPropertiesResponse)(nil)).Elem()
}

func (o TableGetPropertiesResponsePtrOutput) ToTableGetPropertiesResponsePtrOutput() TableGetPropertiesResponsePtrOutput {
	return o
}

func (o TableGetPropertiesResponsePtrOutput) ToTableGetPropertiesResponsePtrOutputWithContext(ctx context.Context) TableGetPropertiesResponsePtrOutput {
	return o
}

func (o TableGetPropertiesResponsePtrOutput) Elem() TableGetPropertiesResponseOutput {
	return o.ApplyT(func(v *TableGetPropertiesResponse) TableGetPropertiesResponse { return *v }).(TableGetPropertiesResponseOutput)
}

func (o TableGetPropertiesResponsePtrOutput) Resource() pulumi.MapOutput {
	return o.ApplyT(func(v *TableGetPropertiesResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.MapOutput)
}

// Cosmos DB table resource object
type TableResource struct {
	// Name of the Cosmos DB table
	Id string `pulumi:"id"`
}

// TableResourceInput is an input type that accepts TableResourceArgs and TableResourceOutput values.
// You can construct a concrete instance of `TableResourceInput` via:
//
//          TableResourceArgs{...}
type TableResourceInput interface {
	pulumi.Input

	ToTableResourceOutput() TableResourceOutput
	ToTableResourceOutputWithContext(context.Context) TableResourceOutput
}

// Cosmos DB table resource object
type TableResourceArgs struct {
	// Name of the Cosmos DB table
	Id pulumi.StringInput `pulumi:"id"`
}

func (TableResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableResource)(nil)).Elem()
}

func (i TableResourceArgs) ToTableResourceOutput() TableResourceOutput {
	return i.ToTableResourceOutputWithContext(context.Background())
}

func (i TableResourceArgs) ToTableResourceOutputWithContext(ctx context.Context) TableResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableResourceOutput)
}

func (i TableResourceArgs) ToTableResourcePtrOutput() TableResourcePtrOutput {
	return i.ToTableResourcePtrOutputWithContext(context.Background())
}

func (i TableResourceArgs) ToTableResourcePtrOutputWithContext(ctx context.Context) TableResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableResourceOutput).ToTableResourcePtrOutputWithContext(ctx)
}

// TableResourcePtrInput is an input type that accepts TableResourceArgs, TableResourcePtr and TableResourcePtrOutput values.
// You can construct a concrete instance of `TableResourcePtrInput` via:
//
//          TableResourceArgs{...}
//
//  or:
//
//          nil
type TableResourcePtrInput interface {
	pulumi.Input

	ToTableResourcePtrOutput() TableResourcePtrOutput
	ToTableResourcePtrOutputWithContext(context.Context) TableResourcePtrOutput
}

type tableResourcePtrType TableResourceArgs

func TableResourcePtr(v *TableResourceArgs) TableResourcePtrInput {
	return (*tableResourcePtrType)(v)
}

func (*tableResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableResource)(nil)).Elem()
}

func (i *tableResourcePtrType) ToTableResourcePtrOutput() TableResourcePtrOutput {
	return i.ToTableResourcePtrOutputWithContext(context.Background())
}

func (i *tableResourcePtrType) ToTableResourcePtrOutputWithContext(ctx context.Context) TableResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableResourcePtrOutput)
}

// Cosmos DB table resource object
type TableResourceOutput struct{ *pulumi.OutputState }

func (TableResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableResource)(nil)).Elem()
}

func (o TableResourceOutput) ToTableResourceOutput() TableResourceOutput {
	return o
}

func (o TableResourceOutput) ToTableResourceOutputWithContext(ctx context.Context) TableResourceOutput {
	return o
}

func (o TableResourceOutput) ToTableResourcePtrOutput() TableResourcePtrOutput {
	return o.ToTableResourcePtrOutputWithContext(context.Background())
}

func (o TableResourceOutput) ToTableResourcePtrOutputWithContext(ctx context.Context) TableResourcePtrOutput {
	return o.ApplyT(func(v TableResource) *TableResource {
		return &v
	}).(TableResourcePtrOutput)
}

// Name of the Cosmos DB table
func (o TableResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v TableResource) string { return v.Id }).(pulumi.StringOutput)
}

type TableResourcePtrOutput struct{ *pulumi.OutputState }

func (TableResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableResource)(nil)).Elem()
}

func (o TableResourcePtrOutput) ToTableResourcePtrOutput() TableResourcePtrOutput {
	return o
}

func (o TableResourcePtrOutput) ToTableResourcePtrOutputWithContext(ctx context.Context) TableResourcePtrOutput {
	return o
}

func (o TableResourcePtrOutput) Elem() TableResourceOutput {
	return o.ApplyT(func(v *TableResource) TableResource { return *v }).(TableResourceOutput)
}

// Name of the Cosmos DB table
func (o TableResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableResource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// An Azure Cosmos DB Table.
type TableResourceTableType struct {
	// The location of the resource group to which the resource belongs.
	Location *string `pulumi:"location"`
	// The name of the ARM resource.
	Name string `pulumi:"name"`
	// The properties of an Azure Cosmos DB Table
	Properties TableGetPropertiesResponse `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags *TagsResponse `pulumi:"tags"`
	// The type of Azure resource.
	Type string `pulumi:"type"`
}

// TableResourceTableTypeInput is an input type that accepts TableResourceTableTypeArgs and TableResourceTableTypeOutput values.
// You can construct a concrete instance of `TableResourceTableTypeInput` via:
//
//          TableResourceTableTypeArgs{...}
type TableResourceTableTypeInput interface {
	pulumi.Input

	ToTableResourceTableTypeOutput() TableResourceTableTypeOutput
	ToTableResourceTableTypeOutputWithContext(context.Context) TableResourceTableTypeOutput
}

// An Azure Cosmos DB Table.
type TableResourceTableTypeArgs struct {
	// The location of the resource group to which the resource belongs.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the ARM resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of an Azure Cosmos DB Table
	Properties TableGetPropertiesResponseInput `pulumi:"properties"`
	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags TagsResponsePtrInput `pulumi:"tags"`
	// The type of Azure resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TableResourceTableTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableResourceTableType)(nil)).Elem()
}

func (i TableResourceTableTypeArgs) ToTableResourceTableTypeOutput() TableResourceTableTypeOutput {
	return i.ToTableResourceTableTypeOutputWithContext(context.Background())
}

func (i TableResourceTableTypeArgs) ToTableResourceTableTypeOutputWithContext(ctx context.Context) TableResourceTableTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableResourceTableTypeOutput)
}

// An Azure Cosmos DB Table.
type TableResourceTableTypeOutput struct{ *pulumi.OutputState }

func (TableResourceTableTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableResourceTableType)(nil)).Elem()
}

func (o TableResourceTableTypeOutput) ToTableResourceTableTypeOutput() TableResourceTableTypeOutput {
	return o
}

func (o TableResourceTableTypeOutput) ToTableResourceTableTypeOutputWithContext(ctx context.Context) TableResourceTableTypeOutput {
	return o
}

// The location of the resource group to which the resource belongs.
func (o TableResourceTableTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableResourceTableType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the ARM resource.
func (o TableResourceTableTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableResourceTableType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of an Azure Cosmos DB Table
func (o TableResourceTableTypeOutput) Properties() TableGetPropertiesResponseOutput {
	return o.ApplyT(func(v TableResourceTableType) TableGetPropertiesResponse { return v.Properties }).(TableGetPropertiesResponseOutput)
}

// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
func (o TableResourceTableTypeOutput) Tags() TagsResponsePtrOutput {
	return o.ApplyT(func(v TableResourceTableType) *TagsResponse { return v.Tags }).(TagsResponsePtrOutput)
}

// The type of Azure resource.
func (o TableResourceTableTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableResourceTableType) string { return v.Type }).(pulumi.StringOutput)
}

// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
type Tags struct {
}

// TagsInput is an input type that accepts TagsArgs and TagsOutput values.
// You can construct a concrete instance of `TagsInput` via:
//
//          TagsArgs{...}
type TagsInput interface {
	pulumi.Input

	ToTagsOutput() TagsOutput
	ToTagsOutputWithContext(context.Context) TagsOutput
}

// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
type TagsArgs struct {
}

func (TagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Tags)(nil)).Elem()
}

func (i TagsArgs) ToTagsOutput() TagsOutput {
	return i.ToTagsOutputWithContext(context.Background())
}

func (i TagsArgs) ToTagsOutputWithContext(ctx context.Context) TagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsOutput)
}

func (i TagsArgs) ToTagsPtrOutput() TagsPtrOutput {
	return i.ToTagsPtrOutputWithContext(context.Background())
}

func (i TagsArgs) ToTagsPtrOutputWithContext(ctx context.Context) TagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsOutput).ToTagsPtrOutputWithContext(ctx)
}

// TagsPtrInput is an input type that accepts TagsArgs, TagsPtr and TagsPtrOutput values.
// You can construct a concrete instance of `TagsPtrInput` via:
//
//          TagsArgs{...}
//
//  or:
//
//          nil
type TagsPtrInput interface {
	pulumi.Input

	ToTagsPtrOutput() TagsPtrOutput
	ToTagsPtrOutputWithContext(context.Context) TagsPtrOutput
}

type tagsPtrType TagsArgs

func TagsPtr(v *TagsArgs) TagsPtrInput {
	return (*tagsPtrType)(v)
}

func (*tagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Tags)(nil)).Elem()
}

func (i *tagsPtrType) ToTagsPtrOutput() TagsPtrOutput {
	return i.ToTagsPtrOutputWithContext(context.Background())
}

func (i *tagsPtrType) ToTagsPtrOutputWithContext(ctx context.Context) TagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsPtrOutput)
}

// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
type TagsOutput struct{ *pulumi.OutputState }

func (TagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Tags)(nil)).Elem()
}

func (o TagsOutput) ToTagsOutput() TagsOutput {
	return o
}

func (o TagsOutput) ToTagsOutputWithContext(ctx context.Context) TagsOutput {
	return o
}

func (o TagsOutput) ToTagsPtrOutput() TagsPtrOutput {
	return o.ToTagsPtrOutputWithContext(context.Background())
}

func (o TagsOutput) ToTagsPtrOutputWithContext(ctx context.Context) TagsPtrOutput {
	return o.ApplyT(func(v Tags) *Tags {
		return &v
	}).(TagsPtrOutput)
}

type TagsPtrOutput struct{ *pulumi.OutputState }

func (TagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tags)(nil)).Elem()
}

func (o TagsPtrOutput) ToTagsPtrOutput() TagsPtrOutput {
	return o
}

func (o TagsPtrOutput) ToTagsPtrOutputWithContext(ctx context.Context) TagsPtrOutput {
	return o
}

func (o TagsPtrOutput) Elem() TagsOutput {
	return o.ApplyT(func(v *Tags) Tags { return *v }).(TagsOutput)
}

// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
type TagsResponse struct {
}

// TagsResponseInput is an input type that accepts TagsResponseArgs and TagsResponseOutput values.
// You can construct a concrete instance of `TagsResponseInput` via:
//
//          TagsResponseArgs{...}
type TagsResponseInput interface {
	pulumi.Input

	ToTagsResponseOutput() TagsResponseOutput
	ToTagsResponseOutputWithContext(context.Context) TagsResponseOutput
}

// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
type TagsResponseArgs struct {
}

func (TagsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TagsResponse)(nil)).Elem()
}

func (i TagsResponseArgs) ToTagsResponseOutput() TagsResponseOutput {
	return i.ToTagsResponseOutputWithContext(context.Background())
}

func (i TagsResponseArgs) ToTagsResponseOutputWithContext(ctx context.Context) TagsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsResponseOutput)
}

func (i TagsResponseArgs) ToTagsResponsePtrOutput() TagsResponsePtrOutput {
	return i.ToTagsResponsePtrOutputWithContext(context.Background())
}

func (i TagsResponseArgs) ToTagsResponsePtrOutputWithContext(ctx context.Context) TagsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsResponseOutput).ToTagsResponsePtrOutputWithContext(ctx)
}

// TagsResponsePtrInput is an input type that accepts TagsResponseArgs, TagsResponsePtr and TagsResponsePtrOutput values.
// You can construct a concrete instance of `TagsResponsePtrInput` via:
//
//          TagsResponseArgs{...}
//
//  or:
//
//          nil
type TagsResponsePtrInput interface {
	pulumi.Input

	ToTagsResponsePtrOutput() TagsResponsePtrOutput
	ToTagsResponsePtrOutputWithContext(context.Context) TagsResponsePtrOutput
}

type tagsResponsePtrType TagsResponseArgs

func TagsResponsePtr(v *TagsResponseArgs) TagsResponsePtrInput {
	return (*tagsResponsePtrType)(v)
}

func (*tagsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TagsResponse)(nil)).Elem()
}

func (i *tagsResponsePtrType) ToTagsResponsePtrOutput() TagsResponsePtrOutput {
	return i.ToTagsResponsePtrOutputWithContext(context.Background())
}

func (i *tagsResponsePtrType) ToTagsResponsePtrOutputWithContext(ctx context.Context) TagsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsResponsePtrOutput)
}

// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
type TagsResponseOutput struct{ *pulumi.OutputState }

func (TagsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagsResponse)(nil)).Elem()
}

func (o TagsResponseOutput) ToTagsResponseOutput() TagsResponseOutput {
	return o
}

func (o TagsResponseOutput) ToTagsResponseOutputWithContext(ctx context.Context) TagsResponseOutput {
	return o
}

func (o TagsResponseOutput) ToTagsResponsePtrOutput() TagsResponsePtrOutput {
	return o.ToTagsResponsePtrOutputWithContext(context.Background())
}

func (o TagsResponseOutput) ToTagsResponsePtrOutputWithContext(ctx context.Context) TagsResponsePtrOutput {
	return o.ApplyT(func(v TagsResponse) *TagsResponse {
		return &v
	}).(TagsResponsePtrOutput)
}

type TagsResponsePtrOutput struct{ *pulumi.OutputState }

func (TagsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagsResponse)(nil)).Elem()
}

func (o TagsResponsePtrOutput) ToTagsResponsePtrOutput() TagsResponsePtrOutput {
	return o
}

func (o TagsResponsePtrOutput) ToTagsResponsePtrOutputWithContext(ctx context.Context) TagsResponsePtrOutput {
	return o
}

func (o TagsResponsePtrOutput) Elem() TagsResponseOutput {
	return o.ApplyT(func(v *TagsResponse) TagsResponse { return *v }).(TagsResponseOutput)
}

// The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
type UniqueKey struct {
	// List of paths must be unique for each document in the Azure Cosmos DB service
	Paths []string `pulumi:"paths"`
}

// UniqueKeyInput is an input type that accepts UniqueKeyArgs and UniqueKeyOutput values.
// You can construct a concrete instance of `UniqueKeyInput` via:
//
//          UniqueKeyArgs{...}
type UniqueKeyInput interface {
	pulumi.Input

	ToUniqueKeyOutput() UniqueKeyOutput
	ToUniqueKeyOutputWithContext(context.Context) UniqueKeyOutput
}

// The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
type UniqueKeyArgs struct {
	// List of paths must be unique for each document in the Azure Cosmos DB service
	Paths pulumi.StringArrayInput `pulumi:"paths"`
}

func (UniqueKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UniqueKey)(nil)).Elem()
}

func (i UniqueKeyArgs) ToUniqueKeyOutput() UniqueKeyOutput {
	return i.ToUniqueKeyOutputWithContext(context.Background())
}

func (i UniqueKeyArgs) ToUniqueKeyOutputWithContext(ctx context.Context) UniqueKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UniqueKeyOutput)
}

// UniqueKeyArrayInput is an input type that accepts UniqueKeyArray and UniqueKeyArrayOutput values.
// You can construct a concrete instance of `UniqueKeyArrayInput` via:
//
//          UniqueKeyArray{ UniqueKeyArgs{...} }
type UniqueKeyArrayInput interface {
	pulumi.Input

	ToUniqueKeyArrayOutput() UniqueKeyArrayOutput
	ToUniqueKeyArrayOutputWithContext(context.Context) UniqueKeyArrayOutput
}

type UniqueKeyArray []UniqueKeyInput

func (UniqueKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UniqueKey)(nil)).Elem()
}

func (i UniqueKeyArray) ToUniqueKeyArrayOutput() UniqueKeyArrayOutput {
	return i.ToUniqueKeyArrayOutputWithContext(context.Background())
}

func (i UniqueKeyArray) ToUniqueKeyArrayOutputWithContext(ctx context.Context) UniqueKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UniqueKeyArrayOutput)
}

// The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
type UniqueKeyOutput struct{ *pulumi.OutputState }

func (UniqueKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UniqueKey)(nil)).Elem()
}

func (o UniqueKeyOutput) ToUniqueKeyOutput() UniqueKeyOutput {
	return o
}

func (o UniqueKeyOutput) ToUniqueKeyOutputWithContext(ctx context.Context) UniqueKeyOutput {
	return o
}

// List of paths must be unique for each document in the Azure Cosmos DB service
func (o UniqueKeyOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UniqueKey) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

type UniqueKeyArrayOutput struct{ *pulumi.OutputState }

func (UniqueKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UniqueKey)(nil)).Elem()
}

func (o UniqueKeyArrayOutput) ToUniqueKeyArrayOutput() UniqueKeyArrayOutput {
	return o
}

func (o UniqueKeyArrayOutput) ToUniqueKeyArrayOutputWithContext(ctx context.Context) UniqueKeyArrayOutput {
	return o
}

func (o UniqueKeyArrayOutput) Index(i pulumi.IntInput) UniqueKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UniqueKey {
		return vs[0].([]UniqueKey)[vs[1].(int)]
	}).(UniqueKeyOutput)
}

// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
type UniqueKeyPolicy struct {
	// List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
	UniqueKeys []UniqueKey `pulumi:"uniqueKeys"`
}

// UniqueKeyPolicyInput is an input type that accepts UniqueKeyPolicyArgs and UniqueKeyPolicyOutput values.
// You can construct a concrete instance of `UniqueKeyPolicyInput` via:
//
//          UniqueKeyPolicyArgs{...}
type UniqueKeyPolicyInput interface {
	pulumi.Input

	ToUniqueKeyPolicyOutput() UniqueKeyPolicyOutput
	ToUniqueKeyPolicyOutputWithContext(context.Context) UniqueKeyPolicyOutput
}

// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
type UniqueKeyPolicyArgs struct {
	// List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
	UniqueKeys UniqueKeyArrayInput `pulumi:"uniqueKeys"`
}

func (UniqueKeyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UniqueKeyPolicy)(nil)).Elem()
}

func (i UniqueKeyPolicyArgs) ToUniqueKeyPolicyOutput() UniqueKeyPolicyOutput {
	return i.ToUniqueKeyPolicyOutputWithContext(context.Background())
}

func (i UniqueKeyPolicyArgs) ToUniqueKeyPolicyOutputWithContext(ctx context.Context) UniqueKeyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UniqueKeyPolicyOutput)
}

func (i UniqueKeyPolicyArgs) ToUniqueKeyPolicyPtrOutput() UniqueKeyPolicyPtrOutput {
	return i.ToUniqueKeyPolicyPtrOutputWithContext(context.Background())
}

func (i UniqueKeyPolicyArgs) ToUniqueKeyPolicyPtrOutputWithContext(ctx context.Context) UniqueKeyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UniqueKeyPolicyOutput).ToUniqueKeyPolicyPtrOutputWithContext(ctx)
}

// UniqueKeyPolicyPtrInput is an input type that accepts UniqueKeyPolicyArgs, UniqueKeyPolicyPtr and UniqueKeyPolicyPtrOutput values.
// You can construct a concrete instance of `UniqueKeyPolicyPtrInput` via:
//
//          UniqueKeyPolicyArgs{...}
//
//  or:
//
//          nil
type UniqueKeyPolicyPtrInput interface {
	pulumi.Input

	ToUniqueKeyPolicyPtrOutput() UniqueKeyPolicyPtrOutput
	ToUniqueKeyPolicyPtrOutputWithContext(context.Context) UniqueKeyPolicyPtrOutput
}

type uniqueKeyPolicyPtrType UniqueKeyPolicyArgs

func UniqueKeyPolicyPtr(v *UniqueKeyPolicyArgs) UniqueKeyPolicyPtrInput {
	return (*uniqueKeyPolicyPtrType)(v)
}

func (*uniqueKeyPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UniqueKeyPolicy)(nil)).Elem()
}

func (i *uniqueKeyPolicyPtrType) ToUniqueKeyPolicyPtrOutput() UniqueKeyPolicyPtrOutput {
	return i.ToUniqueKeyPolicyPtrOutputWithContext(context.Background())
}

func (i *uniqueKeyPolicyPtrType) ToUniqueKeyPolicyPtrOutputWithContext(ctx context.Context) UniqueKeyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UniqueKeyPolicyPtrOutput)
}

// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
type UniqueKeyPolicyOutput struct{ *pulumi.OutputState }

func (UniqueKeyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UniqueKeyPolicy)(nil)).Elem()
}

func (o UniqueKeyPolicyOutput) ToUniqueKeyPolicyOutput() UniqueKeyPolicyOutput {
	return o
}

func (o UniqueKeyPolicyOutput) ToUniqueKeyPolicyOutputWithContext(ctx context.Context) UniqueKeyPolicyOutput {
	return o
}

func (o UniqueKeyPolicyOutput) ToUniqueKeyPolicyPtrOutput() UniqueKeyPolicyPtrOutput {
	return o.ToUniqueKeyPolicyPtrOutputWithContext(context.Background())
}

func (o UniqueKeyPolicyOutput) ToUniqueKeyPolicyPtrOutputWithContext(ctx context.Context) UniqueKeyPolicyPtrOutput {
	return o.ApplyT(func(v UniqueKeyPolicy) *UniqueKeyPolicy {
		return &v
	}).(UniqueKeyPolicyPtrOutput)
}

// List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
func (o UniqueKeyPolicyOutput) UniqueKeys() UniqueKeyArrayOutput {
	return o.ApplyT(func(v UniqueKeyPolicy) []UniqueKey { return v.UniqueKeys }).(UniqueKeyArrayOutput)
}

type UniqueKeyPolicyPtrOutput struct{ *pulumi.OutputState }

func (UniqueKeyPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UniqueKeyPolicy)(nil)).Elem()
}

func (o UniqueKeyPolicyPtrOutput) ToUniqueKeyPolicyPtrOutput() UniqueKeyPolicyPtrOutput {
	return o
}

func (o UniqueKeyPolicyPtrOutput) ToUniqueKeyPolicyPtrOutputWithContext(ctx context.Context) UniqueKeyPolicyPtrOutput {
	return o
}

func (o UniqueKeyPolicyPtrOutput) Elem() UniqueKeyPolicyOutput {
	return o.ApplyT(func(v *UniqueKeyPolicy) UniqueKeyPolicy { return *v }).(UniqueKeyPolicyOutput)
}

// List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
func (o UniqueKeyPolicyPtrOutput) UniqueKeys() UniqueKeyArrayOutput {
	return o.ApplyT(func(v *UniqueKeyPolicy) []UniqueKey {
		if v == nil {
			return nil
		}
		return v.UniqueKeys
	}).(UniqueKeyArrayOutput)
}

// Virtual Network ACL Rule object
type VirtualNetworkRule struct {
	// Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
	Id *string `pulumi:"id"`
	// Create firewall rule before the virtual network has vnet service endpoint enabled.
	IgnoreMissingVNetServiceEndpoint *bool `pulumi:"ignoreMissingVNetServiceEndpoint"`
}

// VirtualNetworkRuleInput is an input type that accepts VirtualNetworkRuleArgs and VirtualNetworkRuleOutput values.
// You can construct a concrete instance of `VirtualNetworkRuleInput` via:
//
//          VirtualNetworkRuleArgs{...}
type VirtualNetworkRuleInput interface {
	pulumi.Input

	ToVirtualNetworkRuleOutput() VirtualNetworkRuleOutput
	ToVirtualNetworkRuleOutputWithContext(context.Context) VirtualNetworkRuleOutput
}

// Virtual Network ACL Rule object
type VirtualNetworkRuleArgs struct {
	// Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Create firewall rule before the virtual network has vnet service endpoint enabled.
	IgnoreMissingVNetServiceEndpoint pulumi.BoolPtrInput `pulumi:"ignoreMissingVNetServiceEndpoint"`
}

func (VirtualNetworkRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkRule)(nil)).Elem()
}

func (i VirtualNetworkRuleArgs) ToVirtualNetworkRuleOutput() VirtualNetworkRuleOutput {
	return i.ToVirtualNetworkRuleOutputWithContext(context.Background())
}

func (i VirtualNetworkRuleArgs) ToVirtualNetworkRuleOutputWithContext(ctx context.Context) VirtualNetworkRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkRuleOutput)
}

// VirtualNetworkRuleArrayInput is an input type that accepts VirtualNetworkRuleArray and VirtualNetworkRuleArrayOutput values.
// You can construct a concrete instance of `VirtualNetworkRuleArrayInput` via:
//
//          VirtualNetworkRuleArray{ VirtualNetworkRuleArgs{...} }
type VirtualNetworkRuleArrayInput interface {
	pulumi.Input

	ToVirtualNetworkRuleArrayOutput() VirtualNetworkRuleArrayOutput
	ToVirtualNetworkRuleArrayOutputWithContext(context.Context) VirtualNetworkRuleArrayOutput
}

type VirtualNetworkRuleArray []VirtualNetworkRuleInput

func (VirtualNetworkRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNetworkRule)(nil)).Elem()
}

func (i VirtualNetworkRuleArray) ToVirtualNetworkRuleArrayOutput() VirtualNetworkRuleArrayOutput {
	return i.ToVirtualNetworkRuleArrayOutputWithContext(context.Background())
}

func (i VirtualNetworkRuleArray) ToVirtualNetworkRuleArrayOutputWithContext(ctx context.Context) VirtualNetworkRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkRuleArrayOutput)
}

// Virtual Network ACL Rule object
type VirtualNetworkRuleOutput struct{ *pulumi.OutputState }

func (VirtualNetworkRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkRule)(nil)).Elem()
}

func (o VirtualNetworkRuleOutput) ToVirtualNetworkRuleOutput() VirtualNetworkRuleOutput {
	return o
}

func (o VirtualNetworkRuleOutput) ToVirtualNetworkRuleOutputWithContext(ctx context.Context) VirtualNetworkRuleOutput {
	return o
}

// Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
func (o VirtualNetworkRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Create firewall rule before the virtual network has vnet service endpoint enabled.
func (o VirtualNetworkRuleOutput) IgnoreMissingVNetServiceEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualNetworkRule) *bool { return v.IgnoreMissingVNetServiceEndpoint }).(pulumi.BoolPtrOutput)
}

type VirtualNetworkRuleArrayOutput struct{ *pulumi.OutputState }

func (VirtualNetworkRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNetworkRule)(nil)).Elem()
}

func (o VirtualNetworkRuleArrayOutput) ToVirtualNetworkRuleArrayOutput() VirtualNetworkRuleArrayOutput {
	return o
}

func (o VirtualNetworkRuleArrayOutput) ToVirtualNetworkRuleArrayOutputWithContext(ctx context.Context) VirtualNetworkRuleArrayOutput {
	return o
}

func (o VirtualNetworkRuleArrayOutput) Index(i pulumi.IntInput) VirtualNetworkRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualNetworkRule {
		return vs[0].([]VirtualNetworkRule)[vs[1].(int)]
	}).(VirtualNetworkRuleOutput)
}

// Virtual Network ACL Rule object
type VirtualNetworkRuleResponse struct {
	// Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
	Id *string `pulumi:"id"`
	// Create firewall rule before the virtual network has vnet service endpoint enabled.
	IgnoreMissingVNetServiceEndpoint *bool `pulumi:"ignoreMissingVNetServiceEndpoint"`
}

// VirtualNetworkRuleResponseInput is an input type that accepts VirtualNetworkRuleResponseArgs and VirtualNetworkRuleResponseOutput values.
// You can construct a concrete instance of `VirtualNetworkRuleResponseInput` via:
//
//          VirtualNetworkRuleResponseArgs{...}
type VirtualNetworkRuleResponseInput interface {
	pulumi.Input

	ToVirtualNetworkRuleResponseOutput() VirtualNetworkRuleResponseOutput
	ToVirtualNetworkRuleResponseOutputWithContext(context.Context) VirtualNetworkRuleResponseOutput
}

// Virtual Network ACL Rule object
type VirtualNetworkRuleResponseArgs struct {
	// Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Create firewall rule before the virtual network has vnet service endpoint enabled.
	IgnoreMissingVNetServiceEndpoint pulumi.BoolPtrInput `pulumi:"ignoreMissingVNetServiceEndpoint"`
}

func (VirtualNetworkRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkRuleResponse)(nil)).Elem()
}

func (i VirtualNetworkRuleResponseArgs) ToVirtualNetworkRuleResponseOutput() VirtualNetworkRuleResponseOutput {
	return i.ToVirtualNetworkRuleResponseOutputWithContext(context.Background())
}

func (i VirtualNetworkRuleResponseArgs) ToVirtualNetworkRuleResponseOutputWithContext(ctx context.Context) VirtualNetworkRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkRuleResponseOutput)
}

// VirtualNetworkRuleResponseArrayInput is an input type that accepts VirtualNetworkRuleResponseArray and VirtualNetworkRuleResponseArrayOutput values.
// You can construct a concrete instance of `VirtualNetworkRuleResponseArrayInput` via:
//
//          VirtualNetworkRuleResponseArray{ VirtualNetworkRuleResponseArgs{...} }
type VirtualNetworkRuleResponseArrayInput interface {
	pulumi.Input

	ToVirtualNetworkRuleResponseArrayOutput() VirtualNetworkRuleResponseArrayOutput
	ToVirtualNetworkRuleResponseArrayOutputWithContext(context.Context) VirtualNetworkRuleResponseArrayOutput
}

type VirtualNetworkRuleResponseArray []VirtualNetworkRuleResponseInput

func (VirtualNetworkRuleResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNetworkRuleResponse)(nil)).Elem()
}

func (i VirtualNetworkRuleResponseArray) ToVirtualNetworkRuleResponseArrayOutput() VirtualNetworkRuleResponseArrayOutput {
	return i.ToVirtualNetworkRuleResponseArrayOutputWithContext(context.Background())
}

func (i VirtualNetworkRuleResponseArray) ToVirtualNetworkRuleResponseArrayOutputWithContext(ctx context.Context) VirtualNetworkRuleResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkRuleResponseArrayOutput)
}

// Virtual Network ACL Rule object
type VirtualNetworkRuleResponseOutput struct{ *pulumi.OutputState }

func (VirtualNetworkRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkRuleResponse)(nil)).Elem()
}

func (o VirtualNetworkRuleResponseOutput) ToVirtualNetworkRuleResponseOutput() VirtualNetworkRuleResponseOutput {
	return o
}

func (o VirtualNetworkRuleResponseOutput) ToVirtualNetworkRuleResponseOutputWithContext(ctx context.Context) VirtualNetworkRuleResponseOutput {
	return o
}

// Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
func (o VirtualNetworkRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Create firewall rule before the virtual network has vnet service endpoint enabled.
func (o VirtualNetworkRuleResponseOutput) IgnoreMissingVNetServiceEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualNetworkRuleResponse) *bool { return v.IgnoreMissingVNetServiceEndpoint }).(pulumi.BoolPtrOutput)
}

type VirtualNetworkRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualNetworkRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualNetworkRuleResponse)(nil)).Elem()
}

func (o VirtualNetworkRuleResponseArrayOutput) ToVirtualNetworkRuleResponseArrayOutput() VirtualNetworkRuleResponseArrayOutput {
	return o
}

func (o VirtualNetworkRuleResponseArrayOutput) ToVirtualNetworkRuleResponseArrayOutputWithContext(ctx context.Context) VirtualNetworkRuleResponseArrayOutput {
	return o
}

func (o VirtualNetworkRuleResponseArrayOutput) Index(i pulumi.IntInput) VirtualNetworkRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualNetworkRuleResponse {
		return vs[0].([]VirtualNetworkRuleResponse)[vs[1].(int)]
	}).(VirtualNetworkRuleResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(CapabilityOutput{})
	pulumi.RegisterOutputType(CapabilityArrayOutput{})
	pulumi.RegisterOutputType(CapabilityResponseOutput{})
	pulumi.RegisterOutputType(CapabilityResponseArrayOutput{})
	pulumi.RegisterOutputType(CassandraKeyspaceGetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(CassandraKeyspaceGetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(CassandraKeyspaceResourceOutput{})
	pulumi.RegisterOutputType(CassandraKeyspaceResourcePtrOutput{})
	pulumi.RegisterOutputType(CassandraPartitionKeyOutput{})
	pulumi.RegisterOutputType(CassandraPartitionKeyArrayOutput{})
	pulumi.RegisterOutputType(CassandraResourceCassandraKeyspaceTypeOutput{})
	pulumi.RegisterOutputType(CassandraResourceCassandraTableTypeOutput{})
	pulumi.RegisterOutputType(CassandraSchemaOutput{})
	pulumi.RegisterOutputType(CassandraSchemaPtrOutput{})
	pulumi.RegisterOutputType(CassandraTableGetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(CassandraTableGetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(CassandraTableResourceOutput{})
	pulumi.RegisterOutputType(CassandraTableResourcePtrOutput{})
	pulumi.RegisterOutputType(ClusterKeyOutput{})
	pulumi.RegisterOutputType(ClusterKeyArrayOutput{})
	pulumi.RegisterOutputType(ColumnOutput{})
	pulumi.RegisterOutputType(ColumnArrayOutput{})
	pulumi.RegisterOutputType(CompositePathListOutput{})
	pulumi.RegisterOutputType(CompositePathListArrayOutput{})
	pulumi.RegisterOutputType(ConflictResolutionPolicyOutput{})
	pulumi.RegisterOutputType(ConflictResolutionPolicyPtrOutput{})
	pulumi.RegisterOutputType(ConsistencyPolicyOutput{})
	pulumi.RegisterOutputType(ConsistencyPolicyPtrOutput{})
	pulumi.RegisterOutputType(ConsistencyPolicyResponseOutput{})
	pulumi.RegisterOutputType(ConsistencyPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerPartitionKeyOutput{})
	pulumi.RegisterOutputType(ContainerPartitionKeyPtrOutput{})
	pulumi.RegisterOutputType(CreateUpdateOptionsOutput{})
	pulumi.RegisterOutputType(CreateUpdateOptionsPtrOutput{})
	pulumi.RegisterOutputType(DatabaseAccountTypeOutput{})
	pulumi.RegisterOutputType(DatabaseAccountConnectionStringResponseOutput{})
	pulumi.RegisterOutputType(DatabaseAccountConnectionStringResponseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseAccountGetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(DatabaseAccountGetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ExcludedPathOutput{})
	pulumi.RegisterOutputType(ExcludedPathArrayOutput{})
	pulumi.RegisterOutputType(FailoverPolicyResponseOutput{})
	pulumi.RegisterOutputType(FailoverPolicyResponseArrayOutput{})
	pulumi.RegisterOutputType(GremlinDatabaseGetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(GremlinDatabaseGetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(GremlinDatabaseResourceOutput{})
	pulumi.RegisterOutputType(GremlinDatabaseResourcePtrOutput{})
	pulumi.RegisterOutputType(GremlinGraphGetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(GremlinGraphGetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(GremlinGraphResourceOutput{})
	pulumi.RegisterOutputType(GremlinGraphResourcePtrOutput{})
	pulumi.RegisterOutputType(GremlinResourceGremlinDatabaseTypeOutput{})
	pulumi.RegisterOutputType(GremlinResourceGremlinGraphTypeOutput{})
	pulumi.RegisterOutputType(IncludedPathOutput{})
	pulumi.RegisterOutputType(IncludedPathArrayOutput{})
	pulumi.RegisterOutputType(IndexesOutput{})
	pulumi.RegisterOutputType(IndexesArrayOutput{})
	pulumi.RegisterOutputType(IndexingPolicyOutput{})
	pulumi.RegisterOutputType(IndexingPolicyPtrOutput{})
	pulumi.RegisterOutputType(LocationOutput{})
	pulumi.RegisterOutputType(LocationArrayOutput{})
	pulumi.RegisterOutputType(LocationResponseOutput{})
	pulumi.RegisterOutputType(LocationResponseArrayOutput{})
	pulumi.RegisterOutputType(MongoDBCollectionGetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MongoDBCollectionGetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(MongoDBCollectionResourceOutput{})
	pulumi.RegisterOutputType(MongoDBCollectionResourcePtrOutput{})
	pulumi.RegisterOutputType(MongoDBDatabaseGetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MongoDBDatabaseGetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(MongoDBDatabaseResourceOutput{})
	pulumi.RegisterOutputType(MongoDBDatabaseResourcePtrOutput{})
	pulumi.RegisterOutputType(MongoDBResourceMongoDBCollectionTypeOutput{})
	pulumi.RegisterOutputType(MongoDBResourceMongoDBDatabaseTypeOutput{})
	pulumi.RegisterOutputType(MongoIndexOutput{})
	pulumi.RegisterOutputType(MongoIndexArrayOutput{})
	pulumi.RegisterOutputType(MongoIndexKeysOutput{})
	pulumi.RegisterOutputType(MongoIndexKeysPtrOutput{})
	pulumi.RegisterOutputType(MongoIndexOptionsOutput{})
	pulumi.RegisterOutputType(MongoIndexOptionsPtrOutput{})
	pulumi.RegisterOutputType(NotebookWorkspaceTypeOutput{})
	pulumi.RegisterOutputType(NotebookWorkspacePropertiesResponseOutput{})
	pulumi.RegisterOutputType(NotebookWorkspacePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ShardKeysOutput{})
	pulumi.RegisterOutputType(ShardKeysPtrOutput{})
	pulumi.RegisterOutputType(SpatialSpecOutput{})
	pulumi.RegisterOutputType(SpatialSpecArrayOutput{})
	pulumi.RegisterOutputType(SqlContainerGetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(SqlContainerGetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SqlContainerResourceOutput{})
	pulumi.RegisterOutputType(SqlContainerResourcePtrOutput{})
	pulumi.RegisterOutputType(SqlDatabaseGetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(SqlDatabaseGetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SqlDatabaseGetPropertiesResponsePropertiesOutput{})
	pulumi.RegisterOutputType(SqlDatabaseGetPropertiesResponsePropertiesPtrOutput{})
	pulumi.RegisterOutputType(SqlDatabaseResourceOutput{})
	pulumi.RegisterOutputType(SqlDatabaseResourcePtrOutput{})
	pulumi.RegisterOutputType(SqlResourceSqlContainerTypeOutput{})
	pulumi.RegisterOutputType(SqlResourceSqlDatabaseTypeOutput{})
	pulumi.RegisterOutputType(SqlResourceSqlStoredProcedureTypeOutput{})
	pulumi.RegisterOutputType(SqlResourceSqlTriggerTypeOutput{})
	pulumi.RegisterOutputType(SqlResourceSqlUserDefinedFunctionTypeOutput{})
	pulumi.RegisterOutputType(SqlStoredProcedureGetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(SqlStoredProcedureGetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SqlStoredProcedureResourceOutput{})
	pulumi.RegisterOutputType(SqlStoredProcedureResourcePtrOutput{})
	pulumi.RegisterOutputType(SqlTriggerGetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(SqlTriggerGetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SqlTriggerResourceOutput{})
	pulumi.RegisterOutputType(SqlTriggerResourcePtrOutput{})
	pulumi.RegisterOutputType(SqlUserDefinedFunctionGetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(SqlUserDefinedFunctionGetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SqlUserDefinedFunctionResourceOutput{})
	pulumi.RegisterOutputType(SqlUserDefinedFunctionResourcePtrOutput{})
	pulumi.RegisterOutputType(TableGetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(TableGetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(TableResourceOutput{})
	pulumi.RegisterOutputType(TableResourcePtrOutput{})
	pulumi.RegisterOutputType(TableResourceTableTypeOutput{})
	pulumi.RegisterOutputType(TagsOutput{})
	pulumi.RegisterOutputType(TagsPtrOutput{})
	pulumi.RegisterOutputType(TagsResponseOutput{})
	pulumi.RegisterOutputType(TagsResponsePtrOutput{})
	pulumi.RegisterOutputType(UniqueKeyOutput{})
	pulumi.RegisterOutputType(UniqueKeyArrayOutput{})
	pulumi.RegisterOutputType(UniqueKeyPolicyOutput{})
	pulumi.RegisterOutputType(UniqueKeyPolicyPtrOutput{})
	pulumi.RegisterOutputType(VirtualNetworkRuleOutput{})
	pulumi.RegisterOutputType(VirtualNetworkRuleArrayOutput{})
	pulumi.RegisterOutputType(VirtualNetworkRuleResponseOutput{})
	pulumi.RegisterOutputType(VirtualNetworkRuleResponseArrayOutput{})
}
