// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package relay

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Authorization rule properties.
type AuthorizationRuleProperties struct {
	// The rights associated with the rule.
	Rights []string `pulumi:"rights"`
}

// AuthorizationRulePropertiesInput is an input type that accepts AuthorizationRulePropertiesArgs and AuthorizationRulePropertiesOutput values.
// You can construct a concrete instance of `AuthorizationRulePropertiesInput` via:
//
//          AuthorizationRulePropertiesArgs{...}
type AuthorizationRulePropertiesInput interface {
	pulumi.Input

	ToAuthorizationRulePropertiesOutput() AuthorizationRulePropertiesOutput
	ToAuthorizationRulePropertiesOutputWithContext(context.Context) AuthorizationRulePropertiesOutput
}

// Authorization rule properties.
type AuthorizationRulePropertiesArgs struct {
	// The rights associated with the rule.
	Rights pulumi.StringArrayInput `pulumi:"rights"`
}

func (AuthorizationRulePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationRuleProperties)(nil)).Elem()
}

func (i AuthorizationRulePropertiesArgs) ToAuthorizationRulePropertiesOutput() AuthorizationRulePropertiesOutput {
	return i.ToAuthorizationRulePropertiesOutputWithContext(context.Background())
}

func (i AuthorizationRulePropertiesArgs) ToAuthorizationRulePropertiesOutputWithContext(ctx context.Context) AuthorizationRulePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationRulePropertiesOutput)
}

func (i AuthorizationRulePropertiesArgs) ToAuthorizationRulePropertiesPtrOutput() AuthorizationRulePropertiesPtrOutput {
	return i.ToAuthorizationRulePropertiesPtrOutputWithContext(context.Background())
}

func (i AuthorizationRulePropertiesArgs) ToAuthorizationRulePropertiesPtrOutputWithContext(ctx context.Context) AuthorizationRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationRulePropertiesOutput).ToAuthorizationRulePropertiesPtrOutputWithContext(ctx)
}

// AuthorizationRulePropertiesPtrInput is an input type that accepts AuthorizationRulePropertiesArgs, AuthorizationRulePropertiesPtr and AuthorizationRulePropertiesPtrOutput values.
// You can construct a concrete instance of `AuthorizationRulePropertiesPtrInput` via:
//
//          AuthorizationRulePropertiesArgs{...}
//
//  or:
//
//          nil
type AuthorizationRulePropertiesPtrInput interface {
	pulumi.Input

	ToAuthorizationRulePropertiesPtrOutput() AuthorizationRulePropertiesPtrOutput
	ToAuthorizationRulePropertiesPtrOutputWithContext(context.Context) AuthorizationRulePropertiesPtrOutput
}

type authorizationRulePropertiesPtrType AuthorizationRulePropertiesArgs

func AuthorizationRulePropertiesPtr(v *AuthorizationRulePropertiesArgs) AuthorizationRulePropertiesPtrInput {
	return (*authorizationRulePropertiesPtrType)(v)
}

func (*authorizationRulePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationRuleProperties)(nil)).Elem()
}

func (i *authorizationRulePropertiesPtrType) ToAuthorizationRulePropertiesPtrOutput() AuthorizationRulePropertiesPtrOutput {
	return i.ToAuthorizationRulePropertiesPtrOutputWithContext(context.Background())
}

func (i *authorizationRulePropertiesPtrType) ToAuthorizationRulePropertiesPtrOutputWithContext(ctx context.Context) AuthorizationRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationRulePropertiesPtrOutput)
}

// Authorization rule properties.
type AuthorizationRulePropertiesOutput struct{ *pulumi.OutputState }

func (AuthorizationRulePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationRuleProperties)(nil)).Elem()
}

func (o AuthorizationRulePropertiesOutput) ToAuthorizationRulePropertiesOutput() AuthorizationRulePropertiesOutput {
	return o
}

func (o AuthorizationRulePropertiesOutput) ToAuthorizationRulePropertiesOutputWithContext(ctx context.Context) AuthorizationRulePropertiesOutput {
	return o
}

func (o AuthorizationRulePropertiesOutput) ToAuthorizationRulePropertiesPtrOutput() AuthorizationRulePropertiesPtrOutput {
	return o.ToAuthorizationRulePropertiesPtrOutputWithContext(context.Background())
}

func (o AuthorizationRulePropertiesOutput) ToAuthorizationRulePropertiesPtrOutputWithContext(ctx context.Context) AuthorizationRulePropertiesPtrOutput {
	return o.ApplyT(func(v AuthorizationRuleProperties) *AuthorizationRuleProperties {
		return &v
	}).(AuthorizationRulePropertiesPtrOutput)
}

// The rights associated with the rule.
func (o AuthorizationRulePropertiesOutput) Rights() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthorizationRuleProperties) []string { return v.Rights }).(pulumi.StringArrayOutput)
}

type AuthorizationRulePropertiesPtrOutput struct{ *pulumi.OutputState }

func (AuthorizationRulePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationRuleProperties)(nil)).Elem()
}

func (o AuthorizationRulePropertiesPtrOutput) ToAuthorizationRulePropertiesPtrOutput() AuthorizationRulePropertiesPtrOutput {
	return o
}

func (o AuthorizationRulePropertiesPtrOutput) ToAuthorizationRulePropertiesPtrOutputWithContext(ctx context.Context) AuthorizationRulePropertiesPtrOutput {
	return o
}

func (o AuthorizationRulePropertiesPtrOutput) Elem() AuthorizationRulePropertiesOutput {
	return o.ApplyT(func(v *AuthorizationRuleProperties) AuthorizationRuleProperties { return *v }).(AuthorizationRulePropertiesOutput)
}

// The rights associated with the rule.
func (o AuthorizationRulePropertiesPtrOutput) Rights() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthorizationRuleProperties) []string {
		if v == nil {
			return nil
		}
		return v.Rights
	}).(pulumi.StringArrayOutput)
}

// Authorization rule properties.
type AuthorizationRuleResponseProperties struct {
	// The rights associated with the rule.
	Rights []string `pulumi:"rights"`
}

// AuthorizationRuleResponsePropertiesInput is an input type that accepts AuthorizationRuleResponsePropertiesArgs and AuthorizationRuleResponsePropertiesOutput values.
// You can construct a concrete instance of `AuthorizationRuleResponsePropertiesInput` via:
//
//          AuthorizationRuleResponsePropertiesArgs{...}
type AuthorizationRuleResponsePropertiesInput interface {
	pulumi.Input

	ToAuthorizationRuleResponsePropertiesOutput() AuthorizationRuleResponsePropertiesOutput
	ToAuthorizationRuleResponsePropertiesOutputWithContext(context.Context) AuthorizationRuleResponsePropertiesOutput
}

// Authorization rule properties.
type AuthorizationRuleResponsePropertiesArgs struct {
	// The rights associated with the rule.
	Rights pulumi.StringArrayInput `pulumi:"rights"`
}

func (AuthorizationRuleResponsePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationRuleResponseProperties)(nil)).Elem()
}

func (i AuthorizationRuleResponsePropertiesArgs) ToAuthorizationRuleResponsePropertiesOutput() AuthorizationRuleResponsePropertiesOutput {
	return i.ToAuthorizationRuleResponsePropertiesOutputWithContext(context.Background())
}

func (i AuthorizationRuleResponsePropertiesArgs) ToAuthorizationRuleResponsePropertiesOutputWithContext(ctx context.Context) AuthorizationRuleResponsePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationRuleResponsePropertiesOutput)
}

func (i AuthorizationRuleResponsePropertiesArgs) ToAuthorizationRuleResponsePropertiesPtrOutput() AuthorizationRuleResponsePropertiesPtrOutput {
	return i.ToAuthorizationRuleResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i AuthorizationRuleResponsePropertiesArgs) ToAuthorizationRuleResponsePropertiesPtrOutputWithContext(ctx context.Context) AuthorizationRuleResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationRuleResponsePropertiesOutput).ToAuthorizationRuleResponsePropertiesPtrOutputWithContext(ctx)
}

// AuthorizationRuleResponsePropertiesPtrInput is an input type that accepts AuthorizationRuleResponsePropertiesArgs, AuthorizationRuleResponsePropertiesPtr and AuthorizationRuleResponsePropertiesPtrOutput values.
// You can construct a concrete instance of `AuthorizationRuleResponsePropertiesPtrInput` via:
//
//          AuthorizationRuleResponsePropertiesArgs{...}
//
//  or:
//
//          nil
type AuthorizationRuleResponsePropertiesPtrInput interface {
	pulumi.Input

	ToAuthorizationRuleResponsePropertiesPtrOutput() AuthorizationRuleResponsePropertiesPtrOutput
	ToAuthorizationRuleResponsePropertiesPtrOutputWithContext(context.Context) AuthorizationRuleResponsePropertiesPtrOutput
}

type authorizationRuleResponsePropertiesPtrType AuthorizationRuleResponsePropertiesArgs

func AuthorizationRuleResponsePropertiesPtr(v *AuthorizationRuleResponsePropertiesArgs) AuthorizationRuleResponsePropertiesPtrInput {
	return (*authorizationRuleResponsePropertiesPtrType)(v)
}

func (*authorizationRuleResponsePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationRuleResponseProperties)(nil)).Elem()
}

func (i *authorizationRuleResponsePropertiesPtrType) ToAuthorizationRuleResponsePropertiesPtrOutput() AuthorizationRuleResponsePropertiesPtrOutput {
	return i.ToAuthorizationRuleResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i *authorizationRuleResponsePropertiesPtrType) ToAuthorizationRuleResponsePropertiesPtrOutputWithContext(ctx context.Context) AuthorizationRuleResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationRuleResponsePropertiesPtrOutput)
}

// Authorization rule properties.
type AuthorizationRuleResponsePropertiesOutput struct{ *pulumi.OutputState }

func (AuthorizationRuleResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationRuleResponseProperties)(nil)).Elem()
}

func (o AuthorizationRuleResponsePropertiesOutput) ToAuthorizationRuleResponsePropertiesOutput() AuthorizationRuleResponsePropertiesOutput {
	return o
}

func (o AuthorizationRuleResponsePropertiesOutput) ToAuthorizationRuleResponsePropertiesOutputWithContext(ctx context.Context) AuthorizationRuleResponsePropertiesOutput {
	return o
}

func (o AuthorizationRuleResponsePropertiesOutput) ToAuthorizationRuleResponsePropertiesPtrOutput() AuthorizationRuleResponsePropertiesPtrOutput {
	return o.ToAuthorizationRuleResponsePropertiesPtrOutputWithContext(context.Background())
}

func (o AuthorizationRuleResponsePropertiesOutput) ToAuthorizationRuleResponsePropertiesPtrOutputWithContext(ctx context.Context) AuthorizationRuleResponsePropertiesPtrOutput {
	return o.ApplyT(func(v AuthorizationRuleResponseProperties) *AuthorizationRuleResponseProperties {
		return &v
	}).(AuthorizationRuleResponsePropertiesPtrOutput)
}

// The rights associated with the rule.
func (o AuthorizationRuleResponsePropertiesOutput) Rights() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthorizationRuleResponseProperties) []string { return v.Rights }).(pulumi.StringArrayOutput)
}

type AuthorizationRuleResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (AuthorizationRuleResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationRuleResponseProperties)(nil)).Elem()
}

func (o AuthorizationRuleResponsePropertiesPtrOutput) ToAuthorizationRuleResponsePropertiesPtrOutput() AuthorizationRuleResponsePropertiesPtrOutput {
	return o
}

func (o AuthorizationRuleResponsePropertiesPtrOutput) ToAuthorizationRuleResponsePropertiesPtrOutputWithContext(ctx context.Context) AuthorizationRuleResponsePropertiesPtrOutput {
	return o
}

func (o AuthorizationRuleResponsePropertiesPtrOutput) Elem() AuthorizationRuleResponsePropertiesOutput {
	return o.ApplyT(func(v *AuthorizationRuleResponseProperties) AuthorizationRuleResponseProperties { return *v }).(AuthorizationRuleResponsePropertiesOutput)
}

// The rights associated with the rule.
func (o AuthorizationRuleResponsePropertiesPtrOutput) Rights() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthorizationRuleResponseProperties) []string {
		if v == nil {
			return nil
		}
		return v.Rights
	}).(pulumi.StringArrayOutput)
}

// Properties of the HybridConnection.
type HybridConnectionProperties struct {
	// Returns true if client authorization is needed for this hybrid connection; otherwise, false.
	RequiresClientAuthorization *bool `pulumi:"requiresClientAuthorization"`
	// The usermetadata is a placeholder to store user-defined string data for the hybrid connection endpoint. For example, it can be used to store descriptive data, such as a list of teams and their contact information. Also, user-defined configuration settings can be stored.
	UserMetadata *string `pulumi:"userMetadata"`
}

// HybridConnectionPropertiesInput is an input type that accepts HybridConnectionPropertiesArgs and HybridConnectionPropertiesOutput values.
// You can construct a concrete instance of `HybridConnectionPropertiesInput` via:
//
//          HybridConnectionPropertiesArgs{...}
type HybridConnectionPropertiesInput interface {
	pulumi.Input

	ToHybridConnectionPropertiesOutput() HybridConnectionPropertiesOutput
	ToHybridConnectionPropertiesOutputWithContext(context.Context) HybridConnectionPropertiesOutput
}

// Properties of the HybridConnection.
type HybridConnectionPropertiesArgs struct {
	// Returns true if client authorization is needed for this hybrid connection; otherwise, false.
	RequiresClientAuthorization pulumi.BoolPtrInput `pulumi:"requiresClientAuthorization"`
	// The usermetadata is a placeholder to store user-defined string data for the hybrid connection endpoint. For example, it can be used to store descriptive data, such as a list of teams and their contact information. Also, user-defined configuration settings can be stored.
	UserMetadata pulumi.StringPtrInput `pulumi:"userMetadata"`
}

func (HybridConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridConnectionProperties)(nil)).Elem()
}

func (i HybridConnectionPropertiesArgs) ToHybridConnectionPropertiesOutput() HybridConnectionPropertiesOutput {
	return i.ToHybridConnectionPropertiesOutputWithContext(context.Background())
}

func (i HybridConnectionPropertiesArgs) ToHybridConnectionPropertiesOutputWithContext(ctx context.Context) HybridConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionPropertiesOutput)
}

func (i HybridConnectionPropertiesArgs) ToHybridConnectionPropertiesPtrOutput() HybridConnectionPropertiesPtrOutput {
	return i.ToHybridConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (i HybridConnectionPropertiesArgs) ToHybridConnectionPropertiesPtrOutputWithContext(ctx context.Context) HybridConnectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionPropertiesOutput).ToHybridConnectionPropertiesPtrOutputWithContext(ctx)
}

// HybridConnectionPropertiesPtrInput is an input type that accepts HybridConnectionPropertiesArgs, HybridConnectionPropertiesPtr and HybridConnectionPropertiesPtrOutput values.
// You can construct a concrete instance of `HybridConnectionPropertiesPtrInput` via:
//
//          HybridConnectionPropertiesArgs{...}
//
//  or:
//
//          nil
type HybridConnectionPropertiesPtrInput interface {
	pulumi.Input

	ToHybridConnectionPropertiesPtrOutput() HybridConnectionPropertiesPtrOutput
	ToHybridConnectionPropertiesPtrOutputWithContext(context.Context) HybridConnectionPropertiesPtrOutput
}

type hybridConnectionPropertiesPtrType HybridConnectionPropertiesArgs

func HybridConnectionPropertiesPtr(v *HybridConnectionPropertiesArgs) HybridConnectionPropertiesPtrInput {
	return (*hybridConnectionPropertiesPtrType)(v)
}

func (*hybridConnectionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridConnectionProperties)(nil)).Elem()
}

func (i *hybridConnectionPropertiesPtrType) ToHybridConnectionPropertiesPtrOutput() HybridConnectionPropertiesPtrOutput {
	return i.ToHybridConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (i *hybridConnectionPropertiesPtrType) ToHybridConnectionPropertiesPtrOutputWithContext(ctx context.Context) HybridConnectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionPropertiesPtrOutput)
}

// Properties of the HybridConnection.
type HybridConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (HybridConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridConnectionProperties)(nil)).Elem()
}

func (o HybridConnectionPropertiesOutput) ToHybridConnectionPropertiesOutput() HybridConnectionPropertiesOutput {
	return o
}

func (o HybridConnectionPropertiesOutput) ToHybridConnectionPropertiesOutputWithContext(ctx context.Context) HybridConnectionPropertiesOutput {
	return o
}

func (o HybridConnectionPropertiesOutput) ToHybridConnectionPropertiesPtrOutput() HybridConnectionPropertiesPtrOutput {
	return o.ToHybridConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (o HybridConnectionPropertiesOutput) ToHybridConnectionPropertiesPtrOutputWithContext(ctx context.Context) HybridConnectionPropertiesPtrOutput {
	return o.ApplyT(func(v HybridConnectionProperties) *HybridConnectionProperties {
		return &v
	}).(HybridConnectionPropertiesPtrOutput)
}

// Returns true if client authorization is needed for this hybrid connection; otherwise, false.
func (o HybridConnectionPropertiesOutput) RequiresClientAuthorization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HybridConnectionProperties) *bool { return v.RequiresClientAuthorization }).(pulumi.BoolPtrOutput)
}

// The usermetadata is a placeholder to store user-defined string data for the hybrid connection endpoint. For example, it can be used to store descriptive data, such as a list of teams and their contact information. Also, user-defined configuration settings can be stored.
func (o HybridConnectionPropertiesOutput) UserMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HybridConnectionProperties) *string { return v.UserMetadata }).(pulumi.StringPtrOutput)
}

type HybridConnectionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (HybridConnectionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridConnectionProperties)(nil)).Elem()
}

func (o HybridConnectionPropertiesPtrOutput) ToHybridConnectionPropertiesPtrOutput() HybridConnectionPropertiesPtrOutput {
	return o
}

func (o HybridConnectionPropertiesPtrOutput) ToHybridConnectionPropertiesPtrOutputWithContext(ctx context.Context) HybridConnectionPropertiesPtrOutput {
	return o
}

func (o HybridConnectionPropertiesPtrOutput) Elem() HybridConnectionPropertiesOutput {
	return o.ApplyT(func(v *HybridConnectionProperties) HybridConnectionProperties { return *v }).(HybridConnectionPropertiesOutput)
}

// Returns true if client authorization is needed for this hybrid connection; otherwise, false.
func (o HybridConnectionPropertiesPtrOutput) RequiresClientAuthorization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HybridConnectionProperties) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresClientAuthorization
	}).(pulumi.BoolPtrOutput)
}

// The usermetadata is a placeholder to store user-defined string data for the hybrid connection endpoint. For example, it can be used to store descriptive data, such as a list of teams and their contact information. Also, user-defined configuration settings can be stored.
func (o HybridConnectionPropertiesPtrOutput) UserMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HybridConnectionProperties) *string {
		if v == nil {
			return nil
		}
		return v.UserMetadata
	}).(pulumi.StringPtrOutput)
}

// Properties of the HybridConnection.
type HybridConnectionResponseProperties struct {
	// The time the hybrid connection was created.
	CreatedAt string `pulumi:"createdAt"`
	// The number of listeners for this hybrid connection. Note that min : 1 and max:25 are supported.
	ListenerCount int `pulumi:"listenerCount"`
	// Returns true if client authorization is needed for this hybrid connection; otherwise, false.
	RequiresClientAuthorization *bool `pulumi:"requiresClientAuthorization"`
	// The time the namespace was updated.
	UpdatedAt string `pulumi:"updatedAt"`
	// The usermetadata is a placeholder to store user-defined string data for the hybrid connection endpoint. For example, it can be used to store descriptive data, such as a list of teams and their contact information. Also, user-defined configuration settings can be stored.
	UserMetadata *string `pulumi:"userMetadata"`
}

// HybridConnectionResponsePropertiesInput is an input type that accepts HybridConnectionResponsePropertiesArgs and HybridConnectionResponsePropertiesOutput values.
// You can construct a concrete instance of `HybridConnectionResponsePropertiesInput` via:
//
//          HybridConnectionResponsePropertiesArgs{...}
type HybridConnectionResponsePropertiesInput interface {
	pulumi.Input

	ToHybridConnectionResponsePropertiesOutput() HybridConnectionResponsePropertiesOutput
	ToHybridConnectionResponsePropertiesOutputWithContext(context.Context) HybridConnectionResponsePropertiesOutput
}

// Properties of the HybridConnection.
type HybridConnectionResponsePropertiesArgs struct {
	// The time the hybrid connection was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The number of listeners for this hybrid connection. Note that min : 1 and max:25 are supported.
	ListenerCount pulumi.IntInput `pulumi:"listenerCount"`
	// Returns true if client authorization is needed for this hybrid connection; otherwise, false.
	RequiresClientAuthorization pulumi.BoolPtrInput `pulumi:"requiresClientAuthorization"`
	// The time the namespace was updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The usermetadata is a placeholder to store user-defined string data for the hybrid connection endpoint. For example, it can be used to store descriptive data, such as a list of teams and their contact information. Also, user-defined configuration settings can be stored.
	UserMetadata pulumi.StringPtrInput `pulumi:"userMetadata"`
}

func (HybridConnectionResponsePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridConnectionResponseProperties)(nil)).Elem()
}

func (i HybridConnectionResponsePropertiesArgs) ToHybridConnectionResponsePropertiesOutput() HybridConnectionResponsePropertiesOutput {
	return i.ToHybridConnectionResponsePropertiesOutputWithContext(context.Background())
}

func (i HybridConnectionResponsePropertiesArgs) ToHybridConnectionResponsePropertiesOutputWithContext(ctx context.Context) HybridConnectionResponsePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionResponsePropertiesOutput)
}

func (i HybridConnectionResponsePropertiesArgs) ToHybridConnectionResponsePropertiesPtrOutput() HybridConnectionResponsePropertiesPtrOutput {
	return i.ToHybridConnectionResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i HybridConnectionResponsePropertiesArgs) ToHybridConnectionResponsePropertiesPtrOutputWithContext(ctx context.Context) HybridConnectionResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionResponsePropertiesOutput).ToHybridConnectionResponsePropertiesPtrOutputWithContext(ctx)
}

// HybridConnectionResponsePropertiesPtrInput is an input type that accepts HybridConnectionResponsePropertiesArgs, HybridConnectionResponsePropertiesPtr and HybridConnectionResponsePropertiesPtrOutput values.
// You can construct a concrete instance of `HybridConnectionResponsePropertiesPtrInput` via:
//
//          HybridConnectionResponsePropertiesArgs{...}
//
//  or:
//
//          nil
type HybridConnectionResponsePropertiesPtrInput interface {
	pulumi.Input

	ToHybridConnectionResponsePropertiesPtrOutput() HybridConnectionResponsePropertiesPtrOutput
	ToHybridConnectionResponsePropertiesPtrOutputWithContext(context.Context) HybridConnectionResponsePropertiesPtrOutput
}

type hybridConnectionResponsePropertiesPtrType HybridConnectionResponsePropertiesArgs

func HybridConnectionResponsePropertiesPtr(v *HybridConnectionResponsePropertiesArgs) HybridConnectionResponsePropertiesPtrInput {
	return (*hybridConnectionResponsePropertiesPtrType)(v)
}

func (*hybridConnectionResponsePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridConnectionResponseProperties)(nil)).Elem()
}

func (i *hybridConnectionResponsePropertiesPtrType) ToHybridConnectionResponsePropertiesPtrOutput() HybridConnectionResponsePropertiesPtrOutput {
	return i.ToHybridConnectionResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i *hybridConnectionResponsePropertiesPtrType) ToHybridConnectionResponsePropertiesPtrOutputWithContext(ctx context.Context) HybridConnectionResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionResponsePropertiesPtrOutput)
}

// Properties of the HybridConnection.
type HybridConnectionResponsePropertiesOutput struct{ *pulumi.OutputState }

func (HybridConnectionResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridConnectionResponseProperties)(nil)).Elem()
}

func (o HybridConnectionResponsePropertiesOutput) ToHybridConnectionResponsePropertiesOutput() HybridConnectionResponsePropertiesOutput {
	return o
}

func (o HybridConnectionResponsePropertiesOutput) ToHybridConnectionResponsePropertiesOutputWithContext(ctx context.Context) HybridConnectionResponsePropertiesOutput {
	return o
}

func (o HybridConnectionResponsePropertiesOutput) ToHybridConnectionResponsePropertiesPtrOutput() HybridConnectionResponsePropertiesPtrOutput {
	return o.ToHybridConnectionResponsePropertiesPtrOutputWithContext(context.Background())
}

func (o HybridConnectionResponsePropertiesOutput) ToHybridConnectionResponsePropertiesPtrOutputWithContext(ctx context.Context) HybridConnectionResponsePropertiesPtrOutput {
	return o.ApplyT(func(v HybridConnectionResponseProperties) *HybridConnectionResponseProperties {
		return &v
	}).(HybridConnectionResponsePropertiesPtrOutput)
}

// The time the hybrid connection was created.
func (o HybridConnectionResponsePropertiesOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v HybridConnectionResponseProperties) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The number of listeners for this hybrid connection. Note that min : 1 and max:25 are supported.
func (o HybridConnectionResponsePropertiesOutput) ListenerCount() pulumi.IntOutput {
	return o.ApplyT(func(v HybridConnectionResponseProperties) int { return v.ListenerCount }).(pulumi.IntOutput)
}

// Returns true if client authorization is needed for this hybrid connection; otherwise, false.
func (o HybridConnectionResponsePropertiesOutput) RequiresClientAuthorization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HybridConnectionResponseProperties) *bool { return v.RequiresClientAuthorization }).(pulumi.BoolPtrOutput)
}

// The time the namespace was updated.
func (o HybridConnectionResponsePropertiesOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v HybridConnectionResponseProperties) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The usermetadata is a placeholder to store user-defined string data for the hybrid connection endpoint. For example, it can be used to store descriptive data, such as a list of teams and their contact information. Also, user-defined configuration settings can be stored.
func (o HybridConnectionResponsePropertiesOutput) UserMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HybridConnectionResponseProperties) *string { return v.UserMetadata }).(pulumi.StringPtrOutput)
}

type HybridConnectionResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (HybridConnectionResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridConnectionResponseProperties)(nil)).Elem()
}

func (o HybridConnectionResponsePropertiesPtrOutput) ToHybridConnectionResponsePropertiesPtrOutput() HybridConnectionResponsePropertiesPtrOutput {
	return o
}

func (o HybridConnectionResponsePropertiesPtrOutput) ToHybridConnectionResponsePropertiesPtrOutputWithContext(ctx context.Context) HybridConnectionResponsePropertiesPtrOutput {
	return o
}

func (o HybridConnectionResponsePropertiesPtrOutput) Elem() HybridConnectionResponsePropertiesOutput {
	return o.ApplyT(func(v *HybridConnectionResponseProperties) HybridConnectionResponseProperties { return *v }).(HybridConnectionResponsePropertiesOutput)
}

// The time the hybrid connection was created.
func (o HybridConnectionResponsePropertiesPtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HybridConnectionResponseProperties) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// The number of listeners for this hybrid connection. Note that min : 1 and max:25 are supported.
func (o HybridConnectionResponsePropertiesPtrOutput) ListenerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HybridConnectionResponseProperties) *int {
		if v == nil {
			return nil
		}
		return &v.ListenerCount
	}).(pulumi.IntPtrOutput)
}

// Returns true if client authorization is needed for this hybrid connection; otherwise, false.
func (o HybridConnectionResponsePropertiesPtrOutput) RequiresClientAuthorization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HybridConnectionResponseProperties) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresClientAuthorization
	}).(pulumi.BoolPtrOutput)
}

// The time the namespace was updated.
func (o HybridConnectionResponsePropertiesPtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HybridConnectionResponseProperties) *string {
		if v == nil {
			return nil
		}
		return &v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

// The usermetadata is a placeholder to store user-defined string data for the hybrid connection endpoint. For example, it can be used to store descriptive data, such as a list of teams and their contact information. Also, user-defined configuration settings can be stored.
func (o HybridConnectionResponsePropertiesPtrOutput) UserMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HybridConnectionResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.UserMetadata
	}).(pulumi.StringPtrOutput)
}

// Description of a namespace resource.
type NamespaceType struct {
	// Resource location.
	Location string `pulumi:"location"`
	// Resource name.
	Name string `pulumi:"name"`
	// Description of Relay namespace
	Properties RelayNamespacePropertiesResponse `pulumi:"properties"`
	// SKU of the namespace.
	Sku *SkuResponse `pulumi:"sku"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Resource type.
	Type string `pulumi:"type"`
}

// NamespaceTypeInput is an input type that accepts NamespaceTypeArgs and NamespaceTypeOutput values.
// You can construct a concrete instance of `NamespaceTypeInput` via:
//
//          NamespaceTypeArgs{...}
type NamespaceTypeInput interface {
	pulumi.Input

	ToNamespaceTypeOutput() NamespaceTypeOutput
	ToNamespaceTypeOutputWithContext(context.Context) NamespaceTypeOutput
}

// Description of a namespace resource.
type NamespaceTypeArgs struct {
	// Resource location.
	Location pulumi.StringInput `pulumi:"location"`
	// Resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// Description of Relay namespace
	Properties RelayNamespacePropertiesResponseInput `pulumi:"properties"`
	// SKU of the namespace.
	Sku SkuResponsePtrInput `pulumi:"sku"`
	// Resource tags.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NamespaceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceType)(nil)).Elem()
}

func (i NamespaceTypeArgs) ToNamespaceTypeOutput() NamespaceTypeOutput {
	return i.ToNamespaceTypeOutputWithContext(context.Background())
}

func (i NamespaceTypeArgs) ToNamespaceTypeOutputWithContext(ctx context.Context) NamespaceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceTypeOutput)
}

// Description of a namespace resource.
type NamespaceTypeOutput struct{ *pulumi.OutputState }

func (NamespaceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceType)(nil)).Elem()
}

func (o NamespaceTypeOutput) ToNamespaceTypeOutput() NamespaceTypeOutput {
	return o
}

func (o NamespaceTypeOutput) ToNamespaceTypeOutputWithContext(ctx context.Context) NamespaceTypeOutput {
	return o
}

// Resource location.
func (o NamespaceTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceType) string { return v.Location }).(pulumi.StringOutput)
}

// Resource name.
func (o NamespaceTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceType) string { return v.Name }).(pulumi.StringOutput)
}

// Description of Relay namespace
func (o NamespaceTypeOutput) Properties() RelayNamespacePropertiesResponseOutput {
	return o.ApplyT(func(v NamespaceType) RelayNamespacePropertiesResponse { return v.Properties }).(RelayNamespacePropertiesResponseOutput)
}

// SKU of the namespace.
func (o NamespaceTypeOutput) Sku() SkuResponsePtrOutput {
	return o.ApplyT(func(v NamespaceType) *SkuResponse { return v.Sku }).(SkuResponsePtrOutput)
}

// Resource tags.
func (o NamespaceTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v NamespaceType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type.
func (o NamespaceTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceType) string { return v.Type }).(pulumi.StringOutput)
}

// Description of a namespace authorization rule.
type NamespaceAuthorizationRuleType struct {
	// Resource name.
	Name string `pulumi:"name"`
	// Authorization rule properties.
	Properties AuthorizationRuleResponseProperties `pulumi:"properties"`
	// Resource type.
	Type string `pulumi:"type"`
}

// NamespaceAuthorizationRuleTypeInput is an input type that accepts NamespaceAuthorizationRuleTypeArgs and NamespaceAuthorizationRuleTypeOutput values.
// You can construct a concrete instance of `NamespaceAuthorizationRuleTypeInput` via:
//
//          NamespaceAuthorizationRuleTypeArgs{...}
type NamespaceAuthorizationRuleTypeInput interface {
	pulumi.Input

	ToNamespaceAuthorizationRuleTypeOutput() NamespaceAuthorizationRuleTypeOutput
	ToNamespaceAuthorizationRuleTypeOutputWithContext(context.Context) NamespaceAuthorizationRuleTypeOutput
}

// Description of a namespace authorization rule.
type NamespaceAuthorizationRuleTypeArgs struct {
	// Resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// Authorization rule properties.
	Properties AuthorizationRuleResponsePropertiesInput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NamespaceAuthorizationRuleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceAuthorizationRuleType)(nil)).Elem()
}

func (i NamespaceAuthorizationRuleTypeArgs) ToNamespaceAuthorizationRuleTypeOutput() NamespaceAuthorizationRuleTypeOutput {
	return i.ToNamespaceAuthorizationRuleTypeOutputWithContext(context.Background())
}

func (i NamespaceAuthorizationRuleTypeArgs) ToNamespaceAuthorizationRuleTypeOutputWithContext(ctx context.Context) NamespaceAuthorizationRuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceAuthorizationRuleTypeOutput)
}

// Description of a namespace authorization rule.
type NamespaceAuthorizationRuleTypeOutput struct{ *pulumi.OutputState }

func (NamespaceAuthorizationRuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceAuthorizationRuleType)(nil)).Elem()
}

func (o NamespaceAuthorizationRuleTypeOutput) ToNamespaceAuthorizationRuleTypeOutput() NamespaceAuthorizationRuleTypeOutput {
	return o
}

func (o NamespaceAuthorizationRuleTypeOutput) ToNamespaceAuthorizationRuleTypeOutputWithContext(ctx context.Context) NamespaceAuthorizationRuleTypeOutput {
	return o
}

// Resource name.
func (o NamespaceAuthorizationRuleTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceAuthorizationRuleType) string { return v.Name }).(pulumi.StringOutput)
}

// Authorization rule properties.
func (o NamespaceAuthorizationRuleTypeOutput) Properties() AuthorizationRuleResponsePropertiesOutput {
	return o.ApplyT(func(v NamespaceAuthorizationRuleType) AuthorizationRuleResponseProperties { return v.Properties }).(AuthorizationRuleResponsePropertiesOutput)
}

// Resource type.
func (o NamespaceAuthorizationRuleTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceAuthorizationRuleType) string { return v.Type }).(pulumi.StringOutput)
}

// Description of hybrid connection resource.
type NamespaceHybridConnectionType struct {
	// Resource name.
	Name string `pulumi:"name"`
	// Properties of the HybridConnection.
	Properties HybridConnectionResponseProperties `pulumi:"properties"`
	// Resource type.
	Type string `pulumi:"type"`
}

// NamespaceHybridConnectionTypeInput is an input type that accepts NamespaceHybridConnectionTypeArgs and NamespaceHybridConnectionTypeOutput values.
// You can construct a concrete instance of `NamespaceHybridConnectionTypeInput` via:
//
//          NamespaceHybridConnectionTypeArgs{...}
type NamespaceHybridConnectionTypeInput interface {
	pulumi.Input

	ToNamespaceHybridConnectionTypeOutput() NamespaceHybridConnectionTypeOutput
	ToNamespaceHybridConnectionTypeOutputWithContext(context.Context) NamespaceHybridConnectionTypeOutput
}

// Description of hybrid connection resource.
type NamespaceHybridConnectionTypeArgs struct {
	// Resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// Properties of the HybridConnection.
	Properties HybridConnectionResponsePropertiesInput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NamespaceHybridConnectionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceHybridConnectionType)(nil)).Elem()
}

func (i NamespaceHybridConnectionTypeArgs) ToNamespaceHybridConnectionTypeOutput() NamespaceHybridConnectionTypeOutput {
	return i.ToNamespaceHybridConnectionTypeOutputWithContext(context.Background())
}

func (i NamespaceHybridConnectionTypeArgs) ToNamespaceHybridConnectionTypeOutputWithContext(ctx context.Context) NamespaceHybridConnectionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceHybridConnectionTypeOutput)
}

// Description of hybrid connection resource.
type NamespaceHybridConnectionTypeOutput struct{ *pulumi.OutputState }

func (NamespaceHybridConnectionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceHybridConnectionType)(nil)).Elem()
}

func (o NamespaceHybridConnectionTypeOutput) ToNamespaceHybridConnectionTypeOutput() NamespaceHybridConnectionTypeOutput {
	return o
}

func (o NamespaceHybridConnectionTypeOutput) ToNamespaceHybridConnectionTypeOutputWithContext(ctx context.Context) NamespaceHybridConnectionTypeOutput {
	return o
}

// Resource name.
func (o NamespaceHybridConnectionTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceHybridConnectionType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of the HybridConnection.
func (o NamespaceHybridConnectionTypeOutput) Properties() HybridConnectionResponsePropertiesOutput {
	return o.ApplyT(func(v NamespaceHybridConnectionType) HybridConnectionResponseProperties { return v.Properties }).(HybridConnectionResponsePropertiesOutput)
}

// Resource type.
func (o NamespaceHybridConnectionTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceHybridConnectionType) string { return v.Type }).(pulumi.StringOutput)
}

// Description of a namespace authorization rule.
type NamespaceHybridConnectionAuthorizationRuleType struct {
	// Resource name.
	Name string `pulumi:"name"`
	// Authorization rule properties.
	Properties AuthorizationRuleResponseProperties `pulumi:"properties"`
	// Resource type.
	Type string `pulumi:"type"`
}

// NamespaceHybridConnectionAuthorizationRuleTypeInput is an input type that accepts NamespaceHybridConnectionAuthorizationRuleTypeArgs and NamespaceHybridConnectionAuthorizationRuleTypeOutput values.
// You can construct a concrete instance of `NamespaceHybridConnectionAuthorizationRuleTypeInput` via:
//
//          NamespaceHybridConnectionAuthorizationRuleTypeArgs{...}
type NamespaceHybridConnectionAuthorizationRuleTypeInput interface {
	pulumi.Input

	ToNamespaceHybridConnectionAuthorizationRuleTypeOutput() NamespaceHybridConnectionAuthorizationRuleTypeOutput
	ToNamespaceHybridConnectionAuthorizationRuleTypeOutputWithContext(context.Context) NamespaceHybridConnectionAuthorizationRuleTypeOutput
}

// Description of a namespace authorization rule.
type NamespaceHybridConnectionAuthorizationRuleTypeArgs struct {
	// Resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// Authorization rule properties.
	Properties AuthorizationRuleResponsePropertiesInput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NamespaceHybridConnectionAuthorizationRuleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceHybridConnectionAuthorizationRuleType)(nil)).Elem()
}

func (i NamespaceHybridConnectionAuthorizationRuleTypeArgs) ToNamespaceHybridConnectionAuthorizationRuleTypeOutput() NamespaceHybridConnectionAuthorizationRuleTypeOutput {
	return i.ToNamespaceHybridConnectionAuthorizationRuleTypeOutputWithContext(context.Background())
}

func (i NamespaceHybridConnectionAuthorizationRuleTypeArgs) ToNamespaceHybridConnectionAuthorizationRuleTypeOutputWithContext(ctx context.Context) NamespaceHybridConnectionAuthorizationRuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceHybridConnectionAuthorizationRuleTypeOutput)
}

// Description of a namespace authorization rule.
type NamespaceHybridConnectionAuthorizationRuleTypeOutput struct{ *pulumi.OutputState }

func (NamespaceHybridConnectionAuthorizationRuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceHybridConnectionAuthorizationRuleType)(nil)).Elem()
}

func (o NamespaceHybridConnectionAuthorizationRuleTypeOutput) ToNamespaceHybridConnectionAuthorizationRuleTypeOutput() NamespaceHybridConnectionAuthorizationRuleTypeOutput {
	return o
}

func (o NamespaceHybridConnectionAuthorizationRuleTypeOutput) ToNamespaceHybridConnectionAuthorizationRuleTypeOutputWithContext(ctx context.Context) NamespaceHybridConnectionAuthorizationRuleTypeOutput {
	return o
}

// Resource name.
func (o NamespaceHybridConnectionAuthorizationRuleTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceHybridConnectionAuthorizationRuleType) string { return v.Name }).(pulumi.StringOutput)
}

// Authorization rule properties.
func (o NamespaceHybridConnectionAuthorizationRuleTypeOutput) Properties() AuthorizationRuleResponsePropertiesOutput {
	return o.ApplyT(func(v NamespaceHybridConnectionAuthorizationRuleType) AuthorizationRuleResponseProperties {
		return v.Properties
	}).(AuthorizationRuleResponsePropertiesOutput)
}

// Resource type.
func (o NamespaceHybridConnectionAuthorizationRuleTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceHybridConnectionAuthorizationRuleType) string { return v.Type }).(pulumi.StringOutput)
}

// Description of the WCF relay resource.
type NamespaceWcfRelayType struct {
	// Resource name.
	Name string `pulumi:"name"`
	// Properties of the WCF relay.
	Properties WcfRelayResponseProperties `pulumi:"properties"`
	// Resource type.
	Type string `pulumi:"type"`
}

// NamespaceWcfRelayTypeInput is an input type that accepts NamespaceWcfRelayTypeArgs and NamespaceWcfRelayTypeOutput values.
// You can construct a concrete instance of `NamespaceWcfRelayTypeInput` via:
//
//          NamespaceWcfRelayTypeArgs{...}
type NamespaceWcfRelayTypeInput interface {
	pulumi.Input

	ToNamespaceWcfRelayTypeOutput() NamespaceWcfRelayTypeOutput
	ToNamespaceWcfRelayTypeOutputWithContext(context.Context) NamespaceWcfRelayTypeOutput
}

// Description of the WCF relay resource.
type NamespaceWcfRelayTypeArgs struct {
	// Resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// Properties of the WCF relay.
	Properties WcfRelayResponsePropertiesInput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NamespaceWcfRelayTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceWcfRelayType)(nil)).Elem()
}

func (i NamespaceWcfRelayTypeArgs) ToNamespaceWcfRelayTypeOutput() NamespaceWcfRelayTypeOutput {
	return i.ToNamespaceWcfRelayTypeOutputWithContext(context.Background())
}

func (i NamespaceWcfRelayTypeArgs) ToNamespaceWcfRelayTypeOutputWithContext(ctx context.Context) NamespaceWcfRelayTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceWcfRelayTypeOutput)
}

// Description of the WCF relay resource.
type NamespaceWcfRelayTypeOutput struct{ *pulumi.OutputState }

func (NamespaceWcfRelayTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceWcfRelayType)(nil)).Elem()
}

func (o NamespaceWcfRelayTypeOutput) ToNamespaceWcfRelayTypeOutput() NamespaceWcfRelayTypeOutput {
	return o
}

func (o NamespaceWcfRelayTypeOutput) ToNamespaceWcfRelayTypeOutputWithContext(ctx context.Context) NamespaceWcfRelayTypeOutput {
	return o
}

// Resource name.
func (o NamespaceWcfRelayTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceWcfRelayType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of the WCF relay.
func (o NamespaceWcfRelayTypeOutput) Properties() WcfRelayResponsePropertiesOutput {
	return o.ApplyT(func(v NamespaceWcfRelayType) WcfRelayResponseProperties { return v.Properties }).(WcfRelayResponsePropertiesOutput)
}

// Resource type.
func (o NamespaceWcfRelayTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceWcfRelayType) string { return v.Type }).(pulumi.StringOutput)
}

// Description of a namespace authorization rule.
type NamespaceWcfRelayAuthorizationRuleType struct {
	// Resource name.
	Name string `pulumi:"name"`
	// Authorization rule properties.
	Properties AuthorizationRuleResponseProperties `pulumi:"properties"`
	// Resource type.
	Type string `pulumi:"type"`
}

// NamespaceWcfRelayAuthorizationRuleTypeInput is an input type that accepts NamespaceWcfRelayAuthorizationRuleTypeArgs and NamespaceWcfRelayAuthorizationRuleTypeOutput values.
// You can construct a concrete instance of `NamespaceWcfRelayAuthorizationRuleTypeInput` via:
//
//          NamespaceWcfRelayAuthorizationRuleTypeArgs{...}
type NamespaceWcfRelayAuthorizationRuleTypeInput interface {
	pulumi.Input

	ToNamespaceWcfRelayAuthorizationRuleTypeOutput() NamespaceWcfRelayAuthorizationRuleTypeOutput
	ToNamespaceWcfRelayAuthorizationRuleTypeOutputWithContext(context.Context) NamespaceWcfRelayAuthorizationRuleTypeOutput
}

// Description of a namespace authorization rule.
type NamespaceWcfRelayAuthorizationRuleTypeArgs struct {
	// Resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// Authorization rule properties.
	Properties AuthorizationRuleResponsePropertiesInput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NamespaceWcfRelayAuthorizationRuleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceWcfRelayAuthorizationRuleType)(nil)).Elem()
}

func (i NamespaceWcfRelayAuthorizationRuleTypeArgs) ToNamespaceWcfRelayAuthorizationRuleTypeOutput() NamespaceWcfRelayAuthorizationRuleTypeOutput {
	return i.ToNamespaceWcfRelayAuthorizationRuleTypeOutputWithContext(context.Background())
}

func (i NamespaceWcfRelayAuthorizationRuleTypeArgs) ToNamespaceWcfRelayAuthorizationRuleTypeOutputWithContext(ctx context.Context) NamespaceWcfRelayAuthorizationRuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceWcfRelayAuthorizationRuleTypeOutput)
}

// Description of a namespace authorization rule.
type NamespaceWcfRelayAuthorizationRuleTypeOutput struct{ *pulumi.OutputState }

func (NamespaceWcfRelayAuthorizationRuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceWcfRelayAuthorizationRuleType)(nil)).Elem()
}

func (o NamespaceWcfRelayAuthorizationRuleTypeOutput) ToNamespaceWcfRelayAuthorizationRuleTypeOutput() NamespaceWcfRelayAuthorizationRuleTypeOutput {
	return o
}

func (o NamespaceWcfRelayAuthorizationRuleTypeOutput) ToNamespaceWcfRelayAuthorizationRuleTypeOutputWithContext(ctx context.Context) NamespaceWcfRelayAuthorizationRuleTypeOutput {
	return o
}

// Resource name.
func (o NamespaceWcfRelayAuthorizationRuleTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceWcfRelayAuthorizationRuleType) string { return v.Name }).(pulumi.StringOutput)
}

// Authorization rule properties.
func (o NamespaceWcfRelayAuthorizationRuleTypeOutput) Properties() AuthorizationRuleResponsePropertiesOutput {
	return o.ApplyT(func(v NamespaceWcfRelayAuthorizationRuleType) AuthorizationRuleResponseProperties {
		return v.Properties
	}).(AuthorizationRuleResponsePropertiesOutput)
}

// Resource type.
func (o NamespaceWcfRelayAuthorizationRuleTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceWcfRelayAuthorizationRuleType) string { return v.Type }).(pulumi.StringOutput)
}

// Properties of the namespace.
type RelayNamespaceProperties struct {
}

// RelayNamespacePropertiesInput is an input type that accepts RelayNamespacePropertiesArgs and RelayNamespacePropertiesOutput values.
// You can construct a concrete instance of `RelayNamespacePropertiesInput` via:
//
//          RelayNamespacePropertiesArgs{...}
type RelayNamespacePropertiesInput interface {
	pulumi.Input

	ToRelayNamespacePropertiesOutput() RelayNamespacePropertiesOutput
	ToRelayNamespacePropertiesOutputWithContext(context.Context) RelayNamespacePropertiesOutput
}

// Properties of the namespace.
type RelayNamespacePropertiesArgs struct {
}

func (RelayNamespacePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelayNamespaceProperties)(nil)).Elem()
}

func (i RelayNamespacePropertiesArgs) ToRelayNamespacePropertiesOutput() RelayNamespacePropertiesOutput {
	return i.ToRelayNamespacePropertiesOutputWithContext(context.Background())
}

func (i RelayNamespacePropertiesArgs) ToRelayNamespacePropertiesOutputWithContext(ctx context.Context) RelayNamespacePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelayNamespacePropertiesOutput)
}

func (i RelayNamespacePropertiesArgs) ToRelayNamespacePropertiesPtrOutput() RelayNamespacePropertiesPtrOutput {
	return i.ToRelayNamespacePropertiesPtrOutputWithContext(context.Background())
}

func (i RelayNamespacePropertiesArgs) ToRelayNamespacePropertiesPtrOutputWithContext(ctx context.Context) RelayNamespacePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelayNamespacePropertiesOutput).ToRelayNamespacePropertiesPtrOutputWithContext(ctx)
}

// RelayNamespacePropertiesPtrInput is an input type that accepts RelayNamespacePropertiesArgs, RelayNamespacePropertiesPtr and RelayNamespacePropertiesPtrOutput values.
// You can construct a concrete instance of `RelayNamespacePropertiesPtrInput` via:
//
//          RelayNamespacePropertiesArgs{...}
//
//  or:
//
//          nil
type RelayNamespacePropertiesPtrInput interface {
	pulumi.Input

	ToRelayNamespacePropertiesPtrOutput() RelayNamespacePropertiesPtrOutput
	ToRelayNamespacePropertiesPtrOutputWithContext(context.Context) RelayNamespacePropertiesPtrOutput
}

type relayNamespacePropertiesPtrType RelayNamespacePropertiesArgs

func RelayNamespacePropertiesPtr(v *RelayNamespacePropertiesArgs) RelayNamespacePropertiesPtrInput {
	return (*relayNamespacePropertiesPtrType)(v)
}

func (*relayNamespacePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RelayNamespaceProperties)(nil)).Elem()
}

func (i *relayNamespacePropertiesPtrType) ToRelayNamespacePropertiesPtrOutput() RelayNamespacePropertiesPtrOutput {
	return i.ToRelayNamespacePropertiesPtrOutputWithContext(context.Background())
}

func (i *relayNamespacePropertiesPtrType) ToRelayNamespacePropertiesPtrOutputWithContext(ctx context.Context) RelayNamespacePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelayNamespacePropertiesPtrOutput)
}

// Properties of the namespace.
type RelayNamespacePropertiesOutput struct{ *pulumi.OutputState }

func (RelayNamespacePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelayNamespaceProperties)(nil)).Elem()
}

func (o RelayNamespacePropertiesOutput) ToRelayNamespacePropertiesOutput() RelayNamespacePropertiesOutput {
	return o
}

func (o RelayNamespacePropertiesOutput) ToRelayNamespacePropertiesOutputWithContext(ctx context.Context) RelayNamespacePropertiesOutput {
	return o
}

func (o RelayNamespacePropertiesOutput) ToRelayNamespacePropertiesPtrOutput() RelayNamespacePropertiesPtrOutput {
	return o.ToRelayNamespacePropertiesPtrOutputWithContext(context.Background())
}

func (o RelayNamespacePropertiesOutput) ToRelayNamespacePropertiesPtrOutputWithContext(ctx context.Context) RelayNamespacePropertiesPtrOutput {
	return o.ApplyT(func(v RelayNamespaceProperties) *RelayNamespaceProperties {
		return &v
	}).(RelayNamespacePropertiesPtrOutput)
}

type RelayNamespacePropertiesPtrOutput struct{ *pulumi.OutputState }

func (RelayNamespacePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RelayNamespaceProperties)(nil)).Elem()
}

func (o RelayNamespacePropertiesPtrOutput) ToRelayNamespacePropertiesPtrOutput() RelayNamespacePropertiesPtrOutput {
	return o
}

func (o RelayNamespacePropertiesPtrOutput) ToRelayNamespacePropertiesPtrOutputWithContext(ctx context.Context) RelayNamespacePropertiesPtrOutput {
	return o
}

func (o RelayNamespacePropertiesPtrOutput) Elem() RelayNamespacePropertiesOutput {
	return o.ApplyT(func(v *RelayNamespaceProperties) RelayNamespaceProperties { return *v }).(RelayNamespacePropertiesOutput)
}

// Properties of the namespace.
type RelayNamespacePropertiesResponse struct {
	// The time the namespace was created.
	CreatedAt string `pulumi:"createdAt"`
	// Identifier for Azure Insights metrics.
	MetricId          string `pulumi:"metricId"`
	ProvisioningState string `pulumi:"provisioningState"`
	// Endpoint you can use to perform Service Bus operations.
	ServiceBusEndpoint string `pulumi:"serviceBusEndpoint"`
	// The time the namespace was updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

// RelayNamespacePropertiesResponseInput is an input type that accepts RelayNamespacePropertiesResponseArgs and RelayNamespacePropertiesResponseOutput values.
// You can construct a concrete instance of `RelayNamespacePropertiesResponseInput` via:
//
//          RelayNamespacePropertiesResponseArgs{...}
type RelayNamespacePropertiesResponseInput interface {
	pulumi.Input

	ToRelayNamespacePropertiesResponseOutput() RelayNamespacePropertiesResponseOutput
	ToRelayNamespacePropertiesResponseOutputWithContext(context.Context) RelayNamespacePropertiesResponseOutput
}

// Properties of the namespace.
type RelayNamespacePropertiesResponseArgs struct {
	// The time the namespace was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Identifier for Azure Insights metrics.
	MetricId          pulumi.StringInput `pulumi:"metricId"`
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// Endpoint you can use to perform Service Bus operations.
	ServiceBusEndpoint pulumi.StringInput `pulumi:"serviceBusEndpoint"`
	// The time the namespace was updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (RelayNamespacePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelayNamespacePropertiesResponse)(nil)).Elem()
}

func (i RelayNamespacePropertiesResponseArgs) ToRelayNamespacePropertiesResponseOutput() RelayNamespacePropertiesResponseOutput {
	return i.ToRelayNamespacePropertiesResponseOutputWithContext(context.Background())
}

func (i RelayNamespacePropertiesResponseArgs) ToRelayNamespacePropertiesResponseOutputWithContext(ctx context.Context) RelayNamespacePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelayNamespacePropertiesResponseOutput)
}

func (i RelayNamespacePropertiesResponseArgs) ToRelayNamespacePropertiesResponsePtrOutput() RelayNamespacePropertiesResponsePtrOutput {
	return i.ToRelayNamespacePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i RelayNamespacePropertiesResponseArgs) ToRelayNamespacePropertiesResponsePtrOutputWithContext(ctx context.Context) RelayNamespacePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelayNamespacePropertiesResponseOutput).ToRelayNamespacePropertiesResponsePtrOutputWithContext(ctx)
}

// RelayNamespacePropertiesResponsePtrInput is an input type that accepts RelayNamespacePropertiesResponseArgs, RelayNamespacePropertiesResponsePtr and RelayNamespacePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `RelayNamespacePropertiesResponsePtrInput` via:
//
//          RelayNamespacePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type RelayNamespacePropertiesResponsePtrInput interface {
	pulumi.Input

	ToRelayNamespacePropertiesResponsePtrOutput() RelayNamespacePropertiesResponsePtrOutput
	ToRelayNamespacePropertiesResponsePtrOutputWithContext(context.Context) RelayNamespacePropertiesResponsePtrOutput
}

type relayNamespacePropertiesResponsePtrType RelayNamespacePropertiesResponseArgs

func RelayNamespacePropertiesResponsePtr(v *RelayNamespacePropertiesResponseArgs) RelayNamespacePropertiesResponsePtrInput {
	return (*relayNamespacePropertiesResponsePtrType)(v)
}

func (*relayNamespacePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RelayNamespacePropertiesResponse)(nil)).Elem()
}

func (i *relayNamespacePropertiesResponsePtrType) ToRelayNamespacePropertiesResponsePtrOutput() RelayNamespacePropertiesResponsePtrOutput {
	return i.ToRelayNamespacePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *relayNamespacePropertiesResponsePtrType) ToRelayNamespacePropertiesResponsePtrOutputWithContext(ctx context.Context) RelayNamespacePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelayNamespacePropertiesResponsePtrOutput)
}

// Properties of the namespace.
type RelayNamespacePropertiesResponseOutput struct{ *pulumi.OutputState }

func (RelayNamespacePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelayNamespacePropertiesResponse)(nil)).Elem()
}

func (o RelayNamespacePropertiesResponseOutput) ToRelayNamespacePropertiesResponseOutput() RelayNamespacePropertiesResponseOutput {
	return o
}

func (o RelayNamespacePropertiesResponseOutput) ToRelayNamespacePropertiesResponseOutputWithContext(ctx context.Context) RelayNamespacePropertiesResponseOutput {
	return o
}

func (o RelayNamespacePropertiesResponseOutput) ToRelayNamespacePropertiesResponsePtrOutput() RelayNamespacePropertiesResponsePtrOutput {
	return o.ToRelayNamespacePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o RelayNamespacePropertiesResponseOutput) ToRelayNamespacePropertiesResponsePtrOutputWithContext(ctx context.Context) RelayNamespacePropertiesResponsePtrOutput {
	return o.ApplyT(func(v RelayNamespacePropertiesResponse) *RelayNamespacePropertiesResponse {
		return &v
	}).(RelayNamespacePropertiesResponsePtrOutput)
}

// The time the namespace was created.
func (o RelayNamespacePropertiesResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v RelayNamespacePropertiesResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Identifier for Azure Insights metrics.
func (o RelayNamespacePropertiesResponseOutput) MetricId() pulumi.StringOutput {
	return o.ApplyT(func(v RelayNamespacePropertiesResponse) string { return v.MetricId }).(pulumi.StringOutput)
}

func (o RelayNamespacePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v RelayNamespacePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Endpoint you can use to perform Service Bus operations.
func (o RelayNamespacePropertiesResponseOutput) ServiceBusEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v RelayNamespacePropertiesResponse) string { return v.ServiceBusEndpoint }).(pulumi.StringOutput)
}

// The time the namespace was updated.
func (o RelayNamespacePropertiesResponseOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v RelayNamespacePropertiesResponse) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type RelayNamespacePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (RelayNamespacePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RelayNamespacePropertiesResponse)(nil)).Elem()
}

func (o RelayNamespacePropertiesResponsePtrOutput) ToRelayNamespacePropertiesResponsePtrOutput() RelayNamespacePropertiesResponsePtrOutput {
	return o
}

func (o RelayNamespacePropertiesResponsePtrOutput) ToRelayNamespacePropertiesResponsePtrOutputWithContext(ctx context.Context) RelayNamespacePropertiesResponsePtrOutput {
	return o
}

func (o RelayNamespacePropertiesResponsePtrOutput) Elem() RelayNamespacePropertiesResponseOutput {
	return o.ApplyT(func(v *RelayNamespacePropertiesResponse) RelayNamespacePropertiesResponse { return *v }).(RelayNamespacePropertiesResponseOutput)
}

// The time the namespace was created.
func (o RelayNamespacePropertiesResponsePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelayNamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// Identifier for Azure Insights metrics.
func (o RelayNamespacePropertiesResponsePtrOutput) MetricId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelayNamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MetricId
	}).(pulumi.StringPtrOutput)
}

func (o RelayNamespacePropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelayNamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Endpoint you can use to perform Service Bus operations.
func (o RelayNamespacePropertiesResponsePtrOutput) ServiceBusEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelayNamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceBusEndpoint
	}).(pulumi.StringPtrOutput)
}

// The time the namespace was updated.
func (o RelayNamespacePropertiesResponsePtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelayNamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

// SKU of the namespace.
type Sku struct {
	// Name of this SKU.
	Name string `pulumi:"name"`
	// The tier of this SKU.
	Tier *string `pulumi:"tier"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//          SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// SKU of the namespace.
type SkuArgs struct {
	// Name of this SKU.
	Name pulumi.StringInput `pulumi:"name"`
	// The tier of this SKU.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//          SkuArgs{...}
//
//  or:
//
//          nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// SKU of the namespace.
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyT(func(v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// Name of this SKU.
func (o SkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Name }).(pulumi.StringOutput)
}

// The tier of this SKU.
func (o SkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku { return *v }).(SkuOutput)
}

// Name of this SKU.
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The tier of this SKU.
func (o SkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// SKU of the namespace.
type SkuResponse struct {
	// Name of this SKU.
	Name string `pulumi:"name"`
	// The tier of this SKU.
	Tier *string `pulumi:"tier"`
}

// SkuResponseInput is an input type that accepts SkuResponseArgs and SkuResponseOutput values.
// You can construct a concrete instance of `SkuResponseInput` via:
//
//          SkuResponseArgs{...}
type SkuResponseInput interface {
	pulumi.Input

	ToSkuResponseOutput() SkuResponseOutput
	ToSkuResponseOutputWithContext(context.Context) SkuResponseOutput
}

// SKU of the namespace.
type SkuResponseArgs struct {
	// Name of this SKU.
	Name pulumi.StringInput `pulumi:"name"`
	// The tier of this SKU.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (SkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (i SkuResponseArgs) ToSkuResponseOutput() SkuResponseOutput {
	return i.ToSkuResponseOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput)
}

func (i SkuResponseArgs) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput).ToSkuResponsePtrOutputWithContext(ctx)
}

// SkuResponsePtrInput is an input type that accepts SkuResponseArgs, SkuResponsePtr and SkuResponsePtrOutput values.
// You can construct a concrete instance of `SkuResponsePtrInput` via:
//
//          SkuResponseArgs{...}
//
//  or:
//
//          nil
type SkuResponsePtrInput interface {
	pulumi.Input

	ToSkuResponsePtrOutput() SkuResponsePtrOutput
	ToSkuResponsePtrOutputWithContext(context.Context) SkuResponsePtrOutput
}

type skuResponsePtrType SkuResponseArgs

func SkuResponsePtr(v *SkuResponseArgs) SkuResponsePtrInput {
	return (*skuResponsePtrType)(v)
}

func (*skuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponsePtrOutput)
}

// SKU of the namespace.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (o SkuResponseOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o.ApplyT(func(v SkuResponse) *SkuResponse {
		return &v
	}).(SkuResponsePtrOutput)
}

// Name of this SKU.
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The tier of this SKU.
func (o SkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse { return *v }).(SkuResponseOutput)
}

// Name of this SKU.
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The tier of this SKU.
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Properties of the WCF relay.
type WcfRelayProperties struct {
	// WCF relay type.
	RelayType *string `pulumi:"relayType"`
	// Returns true if client authorization is needed for this relay; otherwise, false.
	RequiresClientAuthorization *bool `pulumi:"requiresClientAuthorization"`
	// Returns true if transport security is needed for this relay; otherwise, false.
	RequiresTransportSecurity *bool `pulumi:"requiresTransportSecurity"`
	// The usermetadata is a placeholder to store user-defined string data for the WCF Relay endpoint. For example, it can be used to store descriptive data, such as list of teams and their contact information. Also, user-defined configuration settings can be stored.
	UserMetadata *string `pulumi:"userMetadata"`
}

// WcfRelayPropertiesInput is an input type that accepts WcfRelayPropertiesArgs and WcfRelayPropertiesOutput values.
// You can construct a concrete instance of `WcfRelayPropertiesInput` via:
//
//          WcfRelayPropertiesArgs{...}
type WcfRelayPropertiesInput interface {
	pulumi.Input

	ToWcfRelayPropertiesOutput() WcfRelayPropertiesOutput
	ToWcfRelayPropertiesOutputWithContext(context.Context) WcfRelayPropertiesOutput
}

// Properties of the WCF relay.
type WcfRelayPropertiesArgs struct {
	// WCF relay type.
	RelayType pulumi.StringPtrInput `pulumi:"relayType"`
	// Returns true if client authorization is needed for this relay; otherwise, false.
	RequiresClientAuthorization pulumi.BoolPtrInput `pulumi:"requiresClientAuthorization"`
	// Returns true if transport security is needed for this relay; otherwise, false.
	RequiresTransportSecurity pulumi.BoolPtrInput `pulumi:"requiresTransportSecurity"`
	// The usermetadata is a placeholder to store user-defined string data for the WCF Relay endpoint. For example, it can be used to store descriptive data, such as list of teams and their contact information. Also, user-defined configuration settings can be stored.
	UserMetadata pulumi.StringPtrInput `pulumi:"userMetadata"`
}

func (WcfRelayPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WcfRelayProperties)(nil)).Elem()
}

func (i WcfRelayPropertiesArgs) ToWcfRelayPropertiesOutput() WcfRelayPropertiesOutput {
	return i.ToWcfRelayPropertiesOutputWithContext(context.Background())
}

func (i WcfRelayPropertiesArgs) ToWcfRelayPropertiesOutputWithContext(ctx context.Context) WcfRelayPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WcfRelayPropertiesOutput)
}

func (i WcfRelayPropertiesArgs) ToWcfRelayPropertiesPtrOutput() WcfRelayPropertiesPtrOutput {
	return i.ToWcfRelayPropertiesPtrOutputWithContext(context.Background())
}

func (i WcfRelayPropertiesArgs) ToWcfRelayPropertiesPtrOutputWithContext(ctx context.Context) WcfRelayPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WcfRelayPropertiesOutput).ToWcfRelayPropertiesPtrOutputWithContext(ctx)
}

// WcfRelayPropertiesPtrInput is an input type that accepts WcfRelayPropertiesArgs, WcfRelayPropertiesPtr and WcfRelayPropertiesPtrOutput values.
// You can construct a concrete instance of `WcfRelayPropertiesPtrInput` via:
//
//          WcfRelayPropertiesArgs{...}
//
//  or:
//
//          nil
type WcfRelayPropertiesPtrInput interface {
	pulumi.Input

	ToWcfRelayPropertiesPtrOutput() WcfRelayPropertiesPtrOutput
	ToWcfRelayPropertiesPtrOutputWithContext(context.Context) WcfRelayPropertiesPtrOutput
}

type wcfRelayPropertiesPtrType WcfRelayPropertiesArgs

func WcfRelayPropertiesPtr(v *WcfRelayPropertiesArgs) WcfRelayPropertiesPtrInput {
	return (*wcfRelayPropertiesPtrType)(v)
}

func (*wcfRelayPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WcfRelayProperties)(nil)).Elem()
}

func (i *wcfRelayPropertiesPtrType) ToWcfRelayPropertiesPtrOutput() WcfRelayPropertiesPtrOutput {
	return i.ToWcfRelayPropertiesPtrOutputWithContext(context.Background())
}

func (i *wcfRelayPropertiesPtrType) ToWcfRelayPropertiesPtrOutputWithContext(ctx context.Context) WcfRelayPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WcfRelayPropertiesPtrOutput)
}

// Properties of the WCF relay.
type WcfRelayPropertiesOutput struct{ *pulumi.OutputState }

func (WcfRelayPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WcfRelayProperties)(nil)).Elem()
}

func (o WcfRelayPropertiesOutput) ToWcfRelayPropertiesOutput() WcfRelayPropertiesOutput {
	return o
}

func (o WcfRelayPropertiesOutput) ToWcfRelayPropertiesOutputWithContext(ctx context.Context) WcfRelayPropertiesOutput {
	return o
}

func (o WcfRelayPropertiesOutput) ToWcfRelayPropertiesPtrOutput() WcfRelayPropertiesPtrOutput {
	return o.ToWcfRelayPropertiesPtrOutputWithContext(context.Background())
}

func (o WcfRelayPropertiesOutput) ToWcfRelayPropertiesPtrOutputWithContext(ctx context.Context) WcfRelayPropertiesPtrOutput {
	return o.ApplyT(func(v WcfRelayProperties) *WcfRelayProperties {
		return &v
	}).(WcfRelayPropertiesPtrOutput)
}

// WCF relay type.
func (o WcfRelayPropertiesOutput) RelayType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WcfRelayProperties) *string { return v.RelayType }).(pulumi.StringPtrOutput)
}

// Returns true if client authorization is needed for this relay; otherwise, false.
func (o WcfRelayPropertiesOutput) RequiresClientAuthorization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WcfRelayProperties) *bool { return v.RequiresClientAuthorization }).(pulumi.BoolPtrOutput)
}

// Returns true if transport security is needed for this relay; otherwise, false.
func (o WcfRelayPropertiesOutput) RequiresTransportSecurity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WcfRelayProperties) *bool { return v.RequiresTransportSecurity }).(pulumi.BoolPtrOutput)
}

// The usermetadata is a placeholder to store user-defined string data for the WCF Relay endpoint. For example, it can be used to store descriptive data, such as list of teams and their contact information. Also, user-defined configuration settings can be stored.
func (o WcfRelayPropertiesOutput) UserMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WcfRelayProperties) *string { return v.UserMetadata }).(pulumi.StringPtrOutput)
}

type WcfRelayPropertiesPtrOutput struct{ *pulumi.OutputState }

func (WcfRelayPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WcfRelayProperties)(nil)).Elem()
}

func (o WcfRelayPropertiesPtrOutput) ToWcfRelayPropertiesPtrOutput() WcfRelayPropertiesPtrOutput {
	return o
}

func (o WcfRelayPropertiesPtrOutput) ToWcfRelayPropertiesPtrOutputWithContext(ctx context.Context) WcfRelayPropertiesPtrOutput {
	return o
}

func (o WcfRelayPropertiesPtrOutput) Elem() WcfRelayPropertiesOutput {
	return o.ApplyT(func(v *WcfRelayProperties) WcfRelayProperties { return *v }).(WcfRelayPropertiesOutput)
}

// WCF relay type.
func (o WcfRelayPropertiesPtrOutput) RelayType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WcfRelayProperties) *string {
		if v == nil {
			return nil
		}
		return v.RelayType
	}).(pulumi.StringPtrOutput)
}

// Returns true if client authorization is needed for this relay; otherwise, false.
func (o WcfRelayPropertiesPtrOutput) RequiresClientAuthorization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WcfRelayProperties) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresClientAuthorization
	}).(pulumi.BoolPtrOutput)
}

// Returns true if transport security is needed for this relay; otherwise, false.
func (o WcfRelayPropertiesPtrOutput) RequiresTransportSecurity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WcfRelayProperties) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresTransportSecurity
	}).(pulumi.BoolPtrOutput)
}

// The usermetadata is a placeholder to store user-defined string data for the WCF Relay endpoint. For example, it can be used to store descriptive data, such as list of teams and their contact information. Also, user-defined configuration settings can be stored.
func (o WcfRelayPropertiesPtrOutput) UserMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WcfRelayProperties) *string {
		if v == nil {
			return nil
		}
		return v.UserMetadata
	}).(pulumi.StringPtrOutput)
}

// Properties of the WCF relay.
type WcfRelayResponseProperties struct {
	// The time the WCF relay was created.
	CreatedAt string `pulumi:"createdAt"`
	// Returns true if the relay is dynamic; otherwise, false.
	IsDynamic bool `pulumi:"isDynamic"`
	// The number of listeners for this relay. Note that min :1 and max:25 are supported.
	ListenerCount int `pulumi:"listenerCount"`
	// WCF relay type.
	RelayType *string `pulumi:"relayType"`
	// Returns true if client authorization is needed for this relay; otherwise, false.
	RequiresClientAuthorization *bool `pulumi:"requiresClientAuthorization"`
	// Returns true if transport security is needed for this relay; otherwise, false.
	RequiresTransportSecurity *bool `pulumi:"requiresTransportSecurity"`
	// The time the namespace was updated.
	UpdatedAt string `pulumi:"updatedAt"`
	// The usermetadata is a placeholder to store user-defined string data for the WCF Relay endpoint. For example, it can be used to store descriptive data, such as list of teams and their contact information. Also, user-defined configuration settings can be stored.
	UserMetadata *string `pulumi:"userMetadata"`
}

// WcfRelayResponsePropertiesInput is an input type that accepts WcfRelayResponsePropertiesArgs and WcfRelayResponsePropertiesOutput values.
// You can construct a concrete instance of `WcfRelayResponsePropertiesInput` via:
//
//          WcfRelayResponsePropertiesArgs{...}
type WcfRelayResponsePropertiesInput interface {
	pulumi.Input

	ToWcfRelayResponsePropertiesOutput() WcfRelayResponsePropertiesOutput
	ToWcfRelayResponsePropertiesOutputWithContext(context.Context) WcfRelayResponsePropertiesOutput
}

// Properties of the WCF relay.
type WcfRelayResponsePropertiesArgs struct {
	// The time the WCF relay was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Returns true if the relay is dynamic; otherwise, false.
	IsDynamic pulumi.BoolInput `pulumi:"isDynamic"`
	// The number of listeners for this relay. Note that min :1 and max:25 are supported.
	ListenerCount pulumi.IntInput `pulumi:"listenerCount"`
	// WCF relay type.
	RelayType pulumi.StringPtrInput `pulumi:"relayType"`
	// Returns true if client authorization is needed for this relay; otherwise, false.
	RequiresClientAuthorization pulumi.BoolPtrInput `pulumi:"requiresClientAuthorization"`
	// Returns true if transport security is needed for this relay; otherwise, false.
	RequiresTransportSecurity pulumi.BoolPtrInput `pulumi:"requiresTransportSecurity"`
	// The time the namespace was updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The usermetadata is a placeholder to store user-defined string data for the WCF Relay endpoint. For example, it can be used to store descriptive data, such as list of teams and their contact information. Also, user-defined configuration settings can be stored.
	UserMetadata pulumi.StringPtrInput `pulumi:"userMetadata"`
}

func (WcfRelayResponsePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WcfRelayResponseProperties)(nil)).Elem()
}

func (i WcfRelayResponsePropertiesArgs) ToWcfRelayResponsePropertiesOutput() WcfRelayResponsePropertiesOutput {
	return i.ToWcfRelayResponsePropertiesOutputWithContext(context.Background())
}

func (i WcfRelayResponsePropertiesArgs) ToWcfRelayResponsePropertiesOutputWithContext(ctx context.Context) WcfRelayResponsePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WcfRelayResponsePropertiesOutput)
}

func (i WcfRelayResponsePropertiesArgs) ToWcfRelayResponsePropertiesPtrOutput() WcfRelayResponsePropertiesPtrOutput {
	return i.ToWcfRelayResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i WcfRelayResponsePropertiesArgs) ToWcfRelayResponsePropertiesPtrOutputWithContext(ctx context.Context) WcfRelayResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WcfRelayResponsePropertiesOutput).ToWcfRelayResponsePropertiesPtrOutputWithContext(ctx)
}

// WcfRelayResponsePropertiesPtrInput is an input type that accepts WcfRelayResponsePropertiesArgs, WcfRelayResponsePropertiesPtr and WcfRelayResponsePropertiesPtrOutput values.
// You can construct a concrete instance of `WcfRelayResponsePropertiesPtrInput` via:
//
//          WcfRelayResponsePropertiesArgs{...}
//
//  or:
//
//          nil
type WcfRelayResponsePropertiesPtrInput interface {
	pulumi.Input

	ToWcfRelayResponsePropertiesPtrOutput() WcfRelayResponsePropertiesPtrOutput
	ToWcfRelayResponsePropertiesPtrOutputWithContext(context.Context) WcfRelayResponsePropertiesPtrOutput
}

type wcfRelayResponsePropertiesPtrType WcfRelayResponsePropertiesArgs

func WcfRelayResponsePropertiesPtr(v *WcfRelayResponsePropertiesArgs) WcfRelayResponsePropertiesPtrInput {
	return (*wcfRelayResponsePropertiesPtrType)(v)
}

func (*wcfRelayResponsePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WcfRelayResponseProperties)(nil)).Elem()
}

func (i *wcfRelayResponsePropertiesPtrType) ToWcfRelayResponsePropertiesPtrOutput() WcfRelayResponsePropertiesPtrOutput {
	return i.ToWcfRelayResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i *wcfRelayResponsePropertiesPtrType) ToWcfRelayResponsePropertiesPtrOutputWithContext(ctx context.Context) WcfRelayResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WcfRelayResponsePropertiesPtrOutput)
}

// Properties of the WCF relay.
type WcfRelayResponsePropertiesOutput struct{ *pulumi.OutputState }

func (WcfRelayResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WcfRelayResponseProperties)(nil)).Elem()
}

func (o WcfRelayResponsePropertiesOutput) ToWcfRelayResponsePropertiesOutput() WcfRelayResponsePropertiesOutput {
	return o
}

func (o WcfRelayResponsePropertiesOutput) ToWcfRelayResponsePropertiesOutputWithContext(ctx context.Context) WcfRelayResponsePropertiesOutput {
	return o
}

func (o WcfRelayResponsePropertiesOutput) ToWcfRelayResponsePropertiesPtrOutput() WcfRelayResponsePropertiesPtrOutput {
	return o.ToWcfRelayResponsePropertiesPtrOutputWithContext(context.Background())
}

func (o WcfRelayResponsePropertiesOutput) ToWcfRelayResponsePropertiesPtrOutputWithContext(ctx context.Context) WcfRelayResponsePropertiesPtrOutput {
	return o.ApplyT(func(v WcfRelayResponseProperties) *WcfRelayResponseProperties {
		return &v
	}).(WcfRelayResponsePropertiesPtrOutput)
}

// The time the WCF relay was created.
func (o WcfRelayResponsePropertiesOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v WcfRelayResponseProperties) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Returns true if the relay is dynamic; otherwise, false.
func (o WcfRelayResponsePropertiesOutput) IsDynamic() pulumi.BoolOutput {
	return o.ApplyT(func(v WcfRelayResponseProperties) bool { return v.IsDynamic }).(pulumi.BoolOutput)
}

// The number of listeners for this relay. Note that min :1 and max:25 are supported.
func (o WcfRelayResponsePropertiesOutput) ListenerCount() pulumi.IntOutput {
	return o.ApplyT(func(v WcfRelayResponseProperties) int { return v.ListenerCount }).(pulumi.IntOutput)
}

// WCF relay type.
func (o WcfRelayResponsePropertiesOutput) RelayType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WcfRelayResponseProperties) *string { return v.RelayType }).(pulumi.StringPtrOutput)
}

// Returns true if client authorization is needed for this relay; otherwise, false.
func (o WcfRelayResponsePropertiesOutput) RequiresClientAuthorization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WcfRelayResponseProperties) *bool { return v.RequiresClientAuthorization }).(pulumi.BoolPtrOutput)
}

// Returns true if transport security is needed for this relay; otherwise, false.
func (o WcfRelayResponsePropertiesOutput) RequiresTransportSecurity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WcfRelayResponseProperties) *bool { return v.RequiresTransportSecurity }).(pulumi.BoolPtrOutput)
}

// The time the namespace was updated.
func (o WcfRelayResponsePropertiesOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v WcfRelayResponseProperties) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The usermetadata is a placeholder to store user-defined string data for the WCF Relay endpoint. For example, it can be used to store descriptive data, such as list of teams and their contact information. Also, user-defined configuration settings can be stored.
func (o WcfRelayResponsePropertiesOutput) UserMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WcfRelayResponseProperties) *string { return v.UserMetadata }).(pulumi.StringPtrOutput)
}

type WcfRelayResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (WcfRelayResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WcfRelayResponseProperties)(nil)).Elem()
}

func (o WcfRelayResponsePropertiesPtrOutput) ToWcfRelayResponsePropertiesPtrOutput() WcfRelayResponsePropertiesPtrOutput {
	return o
}

func (o WcfRelayResponsePropertiesPtrOutput) ToWcfRelayResponsePropertiesPtrOutputWithContext(ctx context.Context) WcfRelayResponsePropertiesPtrOutput {
	return o
}

func (o WcfRelayResponsePropertiesPtrOutput) Elem() WcfRelayResponsePropertiesOutput {
	return o.ApplyT(func(v *WcfRelayResponseProperties) WcfRelayResponseProperties { return *v }).(WcfRelayResponsePropertiesOutput)
}

// The time the WCF relay was created.
func (o WcfRelayResponsePropertiesPtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WcfRelayResponseProperties) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// Returns true if the relay is dynamic; otherwise, false.
func (o WcfRelayResponsePropertiesPtrOutput) IsDynamic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WcfRelayResponseProperties) *bool {
		if v == nil {
			return nil
		}
		return &v.IsDynamic
	}).(pulumi.BoolPtrOutput)
}

// The number of listeners for this relay. Note that min :1 and max:25 are supported.
func (o WcfRelayResponsePropertiesPtrOutput) ListenerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WcfRelayResponseProperties) *int {
		if v == nil {
			return nil
		}
		return &v.ListenerCount
	}).(pulumi.IntPtrOutput)
}

// WCF relay type.
func (o WcfRelayResponsePropertiesPtrOutput) RelayType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WcfRelayResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.RelayType
	}).(pulumi.StringPtrOutput)
}

// Returns true if client authorization is needed for this relay; otherwise, false.
func (o WcfRelayResponsePropertiesPtrOutput) RequiresClientAuthorization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WcfRelayResponseProperties) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresClientAuthorization
	}).(pulumi.BoolPtrOutput)
}

// Returns true if transport security is needed for this relay; otherwise, false.
func (o WcfRelayResponsePropertiesPtrOutput) RequiresTransportSecurity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WcfRelayResponseProperties) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresTransportSecurity
	}).(pulumi.BoolPtrOutput)
}

// The time the namespace was updated.
func (o WcfRelayResponsePropertiesPtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WcfRelayResponseProperties) *string {
		if v == nil {
			return nil
		}
		return &v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

// The usermetadata is a placeholder to store user-defined string data for the WCF Relay endpoint. For example, it can be used to store descriptive data, such as list of teams and their contact information. Also, user-defined configuration settings can be stored.
func (o WcfRelayResponsePropertiesPtrOutput) UserMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WcfRelayResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.UserMetadata
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AuthorizationRulePropertiesOutput{})
	pulumi.RegisterOutputType(AuthorizationRulePropertiesPtrOutput{})
	pulumi.RegisterOutputType(AuthorizationRuleResponsePropertiesOutput{})
	pulumi.RegisterOutputType(AuthorizationRuleResponsePropertiesPtrOutput{})
	pulumi.RegisterOutputType(HybridConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(HybridConnectionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(HybridConnectionResponsePropertiesOutput{})
	pulumi.RegisterOutputType(HybridConnectionResponsePropertiesPtrOutput{})
	pulumi.RegisterOutputType(NamespaceTypeOutput{})
	pulumi.RegisterOutputType(NamespaceAuthorizationRuleTypeOutput{})
	pulumi.RegisterOutputType(NamespaceHybridConnectionTypeOutput{})
	pulumi.RegisterOutputType(NamespaceHybridConnectionAuthorizationRuleTypeOutput{})
	pulumi.RegisterOutputType(NamespaceWcfRelayTypeOutput{})
	pulumi.RegisterOutputType(NamespaceWcfRelayAuthorizationRuleTypeOutput{})
	pulumi.RegisterOutputType(RelayNamespacePropertiesOutput{})
	pulumi.RegisterOutputType(RelayNamespacePropertiesPtrOutput{})
	pulumi.RegisterOutputType(RelayNamespacePropertiesResponseOutput{})
	pulumi.RegisterOutputType(RelayNamespacePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
	pulumi.RegisterOutputType(WcfRelayPropertiesOutput{})
	pulumi.RegisterOutputType(WcfRelayPropertiesPtrOutput{})
	pulumi.RegisterOutputType(WcfRelayResponsePropertiesOutput{})
	pulumi.RegisterOutputType(WcfRelayResponsePropertiesPtrOutput{})
}
