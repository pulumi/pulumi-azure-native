// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20170401

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Authorization rule properties.
type AuthorizationRuleResponseProperties struct {
	// The rights associated with the rule.
	Rights []string `pulumi:"rights"`
}

// AuthorizationRuleResponsePropertiesInput is an input type that accepts AuthorizationRuleResponsePropertiesArgs and AuthorizationRuleResponsePropertiesOutput values.
// You can construct a concrete instance of `AuthorizationRuleResponsePropertiesInput` via:
//
//          AuthorizationRuleResponsePropertiesArgs{...}
type AuthorizationRuleResponsePropertiesInput interface {
	pulumi.Input

	ToAuthorizationRuleResponsePropertiesOutput() AuthorizationRuleResponsePropertiesOutput
	ToAuthorizationRuleResponsePropertiesOutputWithContext(context.Context) AuthorizationRuleResponsePropertiesOutput
}

// Authorization rule properties.
type AuthorizationRuleResponsePropertiesArgs struct {
	// The rights associated with the rule.
	Rights pulumi.StringArrayInput `pulumi:"rights"`
}

func (AuthorizationRuleResponsePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationRuleResponseProperties)(nil)).Elem()
}

func (i AuthorizationRuleResponsePropertiesArgs) ToAuthorizationRuleResponsePropertiesOutput() AuthorizationRuleResponsePropertiesOutput {
	return i.ToAuthorizationRuleResponsePropertiesOutputWithContext(context.Background())
}

func (i AuthorizationRuleResponsePropertiesArgs) ToAuthorizationRuleResponsePropertiesOutputWithContext(ctx context.Context) AuthorizationRuleResponsePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationRuleResponsePropertiesOutput)
}

func (i AuthorizationRuleResponsePropertiesArgs) ToAuthorizationRuleResponsePropertiesPtrOutput() AuthorizationRuleResponsePropertiesPtrOutput {
	return i.ToAuthorizationRuleResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i AuthorizationRuleResponsePropertiesArgs) ToAuthorizationRuleResponsePropertiesPtrOutputWithContext(ctx context.Context) AuthorizationRuleResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationRuleResponsePropertiesOutput).ToAuthorizationRuleResponsePropertiesPtrOutputWithContext(ctx)
}

// AuthorizationRuleResponsePropertiesPtrInput is an input type that accepts AuthorizationRuleResponsePropertiesArgs, AuthorizationRuleResponsePropertiesPtr and AuthorizationRuleResponsePropertiesPtrOutput values.
// You can construct a concrete instance of `AuthorizationRuleResponsePropertiesPtrInput` via:
//
//          AuthorizationRuleResponsePropertiesArgs{...}
//
//  or:
//
//          nil
type AuthorizationRuleResponsePropertiesPtrInput interface {
	pulumi.Input

	ToAuthorizationRuleResponsePropertiesPtrOutput() AuthorizationRuleResponsePropertiesPtrOutput
	ToAuthorizationRuleResponsePropertiesPtrOutputWithContext(context.Context) AuthorizationRuleResponsePropertiesPtrOutput
}

type authorizationRuleResponsePropertiesPtrType AuthorizationRuleResponsePropertiesArgs

func AuthorizationRuleResponsePropertiesPtr(v *AuthorizationRuleResponsePropertiesArgs) AuthorizationRuleResponsePropertiesPtrInput {
	return (*authorizationRuleResponsePropertiesPtrType)(v)
}

func (*authorizationRuleResponsePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationRuleResponseProperties)(nil)).Elem()
}

func (i *authorizationRuleResponsePropertiesPtrType) ToAuthorizationRuleResponsePropertiesPtrOutput() AuthorizationRuleResponsePropertiesPtrOutput {
	return i.ToAuthorizationRuleResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i *authorizationRuleResponsePropertiesPtrType) ToAuthorizationRuleResponsePropertiesPtrOutputWithContext(ctx context.Context) AuthorizationRuleResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationRuleResponsePropertiesPtrOutput)
}

// Authorization rule properties.
type AuthorizationRuleResponsePropertiesOutput struct{ *pulumi.OutputState }

func (AuthorizationRuleResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationRuleResponseProperties)(nil)).Elem()
}

func (o AuthorizationRuleResponsePropertiesOutput) ToAuthorizationRuleResponsePropertiesOutput() AuthorizationRuleResponsePropertiesOutput {
	return o
}

func (o AuthorizationRuleResponsePropertiesOutput) ToAuthorizationRuleResponsePropertiesOutputWithContext(ctx context.Context) AuthorizationRuleResponsePropertiesOutput {
	return o
}

func (o AuthorizationRuleResponsePropertiesOutput) ToAuthorizationRuleResponsePropertiesPtrOutput() AuthorizationRuleResponsePropertiesPtrOutput {
	return o.ToAuthorizationRuleResponsePropertiesPtrOutputWithContext(context.Background())
}

func (o AuthorizationRuleResponsePropertiesOutput) ToAuthorizationRuleResponsePropertiesPtrOutputWithContext(ctx context.Context) AuthorizationRuleResponsePropertiesPtrOutput {
	return o.ApplyT(func(v AuthorizationRuleResponseProperties) *AuthorizationRuleResponseProperties {
		return &v
	}).(AuthorizationRuleResponsePropertiesPtrOutput)
}

// The rights associated with the rule.
func (o AuthorizationRuleResponsePropertiesOutput) Rights() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthorizationRuleResponseProperties) []string { return v.Rights }).(pulumi.StringArrayOutput)
}

type AuthorizationRuleResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (AuthorizationRuleResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationRuleResponseProperties)(nil)).Elem()
}

func (o AuthorizationRuleResponsePropertiesPtrOutput) ToAuthorizationRuleResponsePropertiesPtrOutput() AuthorizationRuleResponsePropertiesPtrOutput {
	return o
}

func (o AuthorizationRuleResponsePropertiesPtrOutput) ToAuthorizationRuleResponsePropertiesPtrOutputWithContext(ctx context.Context) AuthorizationRuleResponsePropertiesPtrOutput {
	return o
}

func (o AuthorizationRuleResponsePropertiesPtrOutput) Elem() AuthorizationRuleResponsePropertiesOutput {
	return o.ApplyT(func(v *AuthorizationRuleResponseProperties) AuthorizationRuleResponseProperties { return *v }).(AuthorizationRuleResponsePropertiesOutput)
}

// The rights associated with the rule.
func (o AuthorizationRuleResponsePropertiesPtrOutput) Rights() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthorizationRuleResponseProperties) []string {
		if v == nil {
			return nil
		}
		return v.Rights
	}).(pulumi.StringArrayOutput)
}

// Properties of the HybridConnection.
type HybridConnectionResponseProperties struct {
	// The time the hybrid connection was created.
	CreatedAt string `pulumi:"createdAt"`
	// The number of listeners for this hybrid connection. Note that min : 1 and max:25 are supported.
	ListenerCount int `pulumi:"listenerCount"`
	// Returns true if client authorization is needed for this hybrid connection; otherwise, false.
	RequiresClientAuthorization *bool `pulumi:"requiresClientAuthorization"`
	// The time the namespace was updated.
	UpdatedAt string `pulumi:"updatedAt"`
	// The usermetadata is a placeholder to store user-defined string data for the hybrid connection endpoint. For example, it can be used to store descriptive data, such as a list of teams and their contact information. Also, user-defined configuration settings can be stored.
	UserMetadata *string `pulumi:"userMetadata"`
}

// HybridConnectionResponsePropertiesInput is an input type that accepts HybridConnectionResponsePropertiesArgs and HybridConnectionResponsePropertiesOutput values.
// You can construct a concrete instance of `HybridConnectionResponsePropertiesInput` via:
//
//          HybridConnectionResponsePropertiesArgs{...}
type HybridConnectionResponsePropertiesInput interface {
	pulumi.Input

	ToHybridConnectionResponsePropertiesOutput() HybridConnectionResponsePropertiesOutput
	ToHybridConnectionResponsePropertiesOutputWithContext(context.Context) HybridConnectionResponsePropertiesOutput
}

// Properties of the HybridConnection.
type HybridConnectionResponsePropertiesArgs struct {
	// The time the hybrid connection was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The number of listeners for this hybrid connection. Note that min : 1 and max:25 are supported.
	ListenerCount pulumi.IntInput `pulumi:"listenerCount"`
	// Returns true if client authorization is needed for this hybrid connection; otherwise, false.
	RequiresClientAuthorization pulumi.BoolPtrInput `pulumi:"requiresClientAuthorization"`
	// The time the namespace was updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The usermetadata is a placeholder to store user-defined string data for the hybrid connection endpoint. For example, it can be used to store descriptive data, such as a list of teams and their contact information. Also, user-defined configuration settings can be stored.
	UserMetadata pulumi.StringPtrInput `pulumi:"userMetadata"`
}

func (HybridConnectionResponsePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridConnectionResponseProperties)(nil)).Elem()
}

func (i HybridConnectionResponsePropertiesArgs) ToHybridConnectionResponsePropertiesOutput() HybridConnectionResponsePropertiesOutput {
	return i.ToHybridConnectionResponsePropertiesOutputWithContext(context.Background())
}

func (i HybridConnectionResponsePropertiesArgs) ToHybridConnectionResponsePropertiesOutputWithContext(ctx context.Context) HybridConnectionResponsePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionResponsePropertiesOutput)
}

func (i HybridConnectionResponsePropertiesArgs) ToHybridConnectionResponsePropertiesPtrOutput() HybridConnectionResponsePropertiesPtrOutput {
	return i.ToHybridConnectionResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i HybridConnectionResponsePropertiesArgs) ToHybridConnectionResponsePropertiesPtrOutputWithContext(ctx context.Context) HybridConnectionResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionResponsePropertiesOutput).ToHybridConnectionResponsePropertiesPtrOutputWithContext(ctx)
}

// HybridConnectionResponsePropertiesPtrInput is an input type that accepts HybridConnectionResponsePropertiesArgs, HybridConnectionResponsePropertiesPtr and HybridConnectionResponsePropertiesPtrOutput values.
// You can construct a concrete instance of `HybridConnectionResponsePropertiesPtrInput` via:
//
//          HybridConnectionResponsePropertiesArgs{...}
//
//  or:
//
//          nil
type HybridConnectionResponsePropertiesPtrInput interface {
	pulumi.Input

	ToHybridConnectionResponsePropertiesPtrOutput() HybridConnectionResponsePropertiesPtrOutput
	ToHybridConnectionResponsePropertiesPtrOutputWithContext(context.Context) HybridConnectionResponsePropertiesPtrOutput
}

type hybridConnectionResponsePropertiesPtrType HybridConnectionResponsePropertiesArgs

func HybridConnectionResponsePropertiesPtr(v *HybridConnectionResponsePropertiesArgs) HybridConnectionResponsePropertiesPtrInput {
	return (*hybridConnectionResponsePropertiesPtrType)(v)
}

func (*hybridConnectionResponsePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridConnectionResponseProperties)(nil)).Elem()
}

func (i *hybridConnectionResponsePropertiesPtrType) ToHybridConnectionResponsePropertiesPtrOutput() HybridConnectionResponsePropertiesPtrOutput {
	return i.ToHybridConnectionResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i *hybridConnectionResponsePropertiesPtrType) ToHybridConnectionResponsePropertiesPtrOutputWithContext(ctx context.Context) HybridConnectionResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionResponsePropertiesPtrOutput)
}

// Properties of the HybridConnection.
type HybridConnectionResponsePropertiesOutput struct{ *pulumi.OutputState }

func (HybridConnectionResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridConnectionResponseProperties)(nil)).Elem()
}

func (o HybridConnectionResponsePropertiesOutput) ToHybridConnectionResponsePropertiesOutput() HybridConnectionResponsePropertiesOutput {
	return o
}

func (o HybridConnectionResponsePropertiesOutput) ToHybridConnectionResponsePropertiesOutputWithContext(ctx context.Context) HybridConnectionResponsePropertiesOutput {
	return o
}

func (o HybridConnectionResponsePropertiesOutput) ToHybridConnectionResponsePropertiesPtrOutput() HybridConnectionResponsePropertiesPtrOutput {
	return o.ToHybridConnectionResponsePropertiesPtrOutputWithContext(context.Background())
}

func (o HybridConnectionResponsePropertiesOutput) ToHybridConnectionResponsePropertiesPtrOutputWithContext(ctx context.Context) HybridConnectionResponsePropertiesPtrOutput {
	return o.ApplyT(func(v HybridConnectionResponseProperties) *HybridConnectionResponseProperties {
		return &v
	}).(HybridConnectionResponsePropertiesPtrOutput)
}

// The time the hybrid connection was created.
func (o HybridConnectionResponsePropertiesOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v HybridConnectionResponseProperties) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The number of listeners for this hybrid connection. Note that min : 1 and max:25 are supported.
func (o HybridConnectionResponsePropertiesOutput) ListenerCount() pulumi.IntOutput {
	return o.ApplyT(func(v HybridConnectionResponseProperties) int { return v.ListenerCount }).(pulumi.IntOutput)
}

// Returns true if client authorization is needed for this hybrid connection; otherwise, false.
func (o HybridConnectionResponsePropertiesOutput) RequiresClientAuthorization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HybridConnectionResponseProperties) *bool { return v.RequiresClientAuthorization }).(pulumi.BoolPtrOutput)
}

// The time the namespace was updated.
func (o HybridConnectionResponsePropertiesOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v HybridConnectionResponseProperties) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The usermetadata is a placeholder to store user-defined string data for the hybrid connection endpoint. For example, it can be used to store descriptive data, such as a list of teams and their contact information. Also, user-defined configuration settings can be stored.
func (o HybridConnectionResponsePropertiesOutput) UserMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HybridConnectionResponseProperties) *string { return v.UserMetadata }).(pulumi.StringPtrOutput)
}

type HybridConnectionResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (HybridConnectionResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridConnectionResponseProperties)(nil)).Elem()
}

func (o HybridConnectionResponsePropertiesPtrOutput) ToHybridConnectionResponsePropertiesPtrOutput() HybridConnectionResponsePropertiesPtrOutput {
	return o
}

func (o HybridConnectionResponsePropertiesPtrOutput) ToHybridConnectionResponsePropertiesPtrOutputWithContext(ctx context.Context) HybridConnectionResponsePropertiesPtrOutput {
	return o
}

func (o HybridConnectionResponsePropertiesPtrOutput) Elem() HybridConnectionResponsePropertiesOutput {
	return o.ApplyT(func(v *HybridConnectionResponseProperties) HybridConnectionResponseProperties { return *v }).(HybridConnectionResponsePropertiesOutput)
}

// The time the hybrid connection was created.
func (o HybridConnectionResponsePropertiesPtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HybridConnectionResponseProperties) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// The number of listeners for this hybrid connection. Note that min : 1 and max:25 are supported.
func (o HybridConnectionResponsePropertiesPtrOutput) ListenerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HybridConnectionResponseProperties) *int {
		if v == nil {
			return nil
		}
		return &v.ListenerCount
	}).(pulumi.IntPtrOutput)
}

// Returns true if client authorization is needed for this hybrid connection; otherwise, false.
func (o HybridConnectionResponsePropertiesPtrOutput) RequiresClientAuthorization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HybridConnectionResponseProperties) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresClientAuthorization
	}).(pulumi.BoolPtrOutput)
}

// The time the namespace was updated.
func (o HybridConnectionResponsePropertiesPtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HybridConnectionResponseProperties) *string {
		if v == nil {
			return nil
		}
		return &v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

// The usermetadata is a placeholder to store user-defined string data for the hybrid connection endpoint. For example, it can be used to store descriptive data, such as a list of teams and their contact information. Also, user-defined configuration settings can be stored.
func (o HybridConnectionResponsePropertiesPtrOutput) UserMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HybridConnectionResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.UserMetadata
	}).(pulumi.StringPtrOutput)
}

// Properties of the namespace.
type RelayNamespacePropertiesResponse struct {
	// The time the namespace was created.
	CreatedAt string `pulumi:"createdAt"`
	// Identifier for Azure Insights metrics.
	MetricId          string `pulumi:"metricId"`
	ProvisioningState string `pulumi:"provisioningState"`
	// Endpoint you can use to perform Service Bus operations.
	ServiceBusEndpoint string `pulumi:"serviceBusEndpoint"`
	// The time the namespace was updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

// RelayNamespacePropertiesResponseInput is an input type that accepts RelayNamespacePropertiesResponseArgs and RelayNamespacePropertiesResponseOutput values.
// You can construct a concrete instance of `RelayNamespacePropertiesResponseInput` via:
//
//          RelayNamespacePropertiesResponseArgs{...}
type RelayNamespacePropertiesResponseInput interface {
	pulumi.Input

	ToRelayNamespacePropertiesResponseOutput() RelayNamespacePropertiesResponseOutput
	ToRelayNamespacePropertiesResponseOutputWithContext(context.Context) RelayNamespacePropertiesResponseOutput
}

// Properties of the namespace.
type RelayNamespacePropertiesResponseArgs struct {
	// The time the namespace was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Identifier for Azure Insights metrics.
	MetricId          pulumi.StringInput `pulumi:"metricId"`
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// Endpoint you can use to perform Service Bus operations.
	ServiceBusEndpoint pulumi.StringInput `pulumi:"serviceBusEndpoint"`
	// The time the namespace was updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (RelayNamespacePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelayNamespacePropertiesResponse)(nil)).Elem()
}

func (i RelayNamespacePropertiesResponseArgs) ToRelayNamespacePropertiesResponseOutput() RelayNamespacePropertiesResponseOutput {
	return i.ToRelayNamespacePropertiesResponseOutputWithContext(context.Background())
}

func (i RelayNamespacePropertiesResponseArgs) ToRelayNamespacePropertiesResponseOutputWithContext(ctx context.Context) RelayNamespacePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelayNamespacePropertiesResponseOutput)
}

func (i RelayNamespacePropertiesResponseArgs) ToRelayNamespacePropertiesResponsePtrOutput() RelayNamespacePropertiesResponsePtrOutput {
	return i.ToRelayNamespacePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i RelayNamespacePropertiesResponseArgs) ToRelayNamespacePropertiesResponsePtrOutputWithContext(ctx context.Context) RelayNamespacePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelayNamespacePropertiesResponseOutput).ToRelayNamespacePropertiesResponsePtrOutputWithContext(ctx)
}

// RelayNamespacePropertiesResponsePtrInput is an input type that accepts RelayNamespacePropertiesResponseArgs, RelayNamespacePropertiesResponsePtr and RelayNamespacePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `RelayNamespacePropertiesResponsePtrInput` via:
//
//          RelayNamespacePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type RelayNamespacePropertiesResponsePtrInput interface {
	pulumi.Input

	ToRelayNamespacePropertiesResponsePtrOutput() RelayNamespacePropertiesResponsePtrOutput
	ToRelayNamespacePropertiesResponsePtrOutputWithContext(context.Context) RelayNamespacePropertiesResponsePtrOutput
}

type relayNamespacePropertiesResponsePtrType RelayNamespacePropertiesResponseArgs

func RelayNamespacePropertiesResponsePtr(v *RelayNamespacePropertiesResponseArgs) RelayNamespacePropertiesResponsePtrInput {
	return (*relayNamespacePropertiesResponsePtrType)(v)
}

func (*relayNamespacePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RelayNamespacePropertiesResponse)(nil)).Elem()
}

func (i *relayNamespacePropertiesResponsePtrType) ToRelayNamespacePropertiesResponsePtrOutput() RelayNamespacePropertiesResponsePtrOutput {
	return i.ToRelayNamespacePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *relayNamespacePropertiesResponsePtrType) ToRelayNamespacePropertiesResponsePtrOutputWithContext(ctx context.Context) RelayNamespacePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelayNamespacePropertiesResponsePtrOutput)
}

// Properties of the namespace.
type RelayNamespacePropertiesResponseOutput struct{ *pulumi.OutputState }

func (RelayNamespacePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelayNamespacePropertiesResponse)(nil)).Elem()
}

func (o RelayNamespacePropertiesResponseOutput) ToRelayNamespacePropertiesResponseOutput() RelayNamespacePropertiesResponseOutput {
	return o
}

func (o RelayNamespacePropertiesResponseOutput) ToRelayNamespacePropertiesResponseOutputWithContext(ctx context.Context) RelayNamespacePropertiesResponseOutput {
	return o
}

func (o RelayNamespacePropertiesResponseOutput) ToRelayNamespacePropertiesResponsePtrOutput() RelayNamespacePropertiesResponsePtrOutput {
	return o.ToRelayNamespacePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o RelayNamespacePropertiesResponseOutput) ToRelayNamespacePropertiesResponsePtrOutputWithContext(ctx context.Context) RelayNamespacePropertiesResponsePtrOutput {
	return o.ApplyT(func(v RelayNamespacePropertiesResponse) *RelayNamespacePropertiesResponse {
		return &v
	}).(RelayNamespacePropertiesResponsePtrOutput)
}

// The time the namespace was created.
func (o RelayNamespacePropertiesResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v RelayNamespacePropertiesResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Identifier for Azure Insights metrics.
func (o RelayNamespacePropertiesResponseOutput) MetricId() pulumi.StringOutput {
	return o.ApplyT(func(v RelayNamespacePropertiesResponse) string { return v.MetricId }).(pulumi.StringOutput)
}

func (o RelayNamespacePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v RelayNamespacePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Endpoint you can use to perform Service Bus operations.
func (o RelayNamespacePropertiesResponseOutput) ServiceBusEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v RelayNamespacePropertiesResponse) string { return v.ServiceBusEndpoint }).(pulumi.StringOutput)
}

// The time the namespace was updated.
func (o RelayNamespacePropertiesResponseOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v RelayNamespacePropertiesResponse) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type RelayNamespacePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (RelayNamespacePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RelayNamespacePropertiesResponse)(nil)).Elem()
}

func (o RelayNamespacePropertiesResponsePtrOutput) ToRelayNamespacePropertiesResponsePtrOutput() RelayNamespacePropertiesResponsePtrOutput {
	return o
}

func (o RelayNamespacePropertiesResponsePtrOutput) ToRelayNamespacePropertiesResponsePtrOutputWithContext(ctx context.Context) RelayNamespacePropertiesResponsePtrOutput {
	return o
}

func (o RelayNamespacePropertiesResponsePtrOutput) Elem() RelayNamespacePropertiesResponseOutput {
	return o.ApplyT(func(v *RelayNamespacePropertiesResponse) RelayNamespacePropertiesResponse { return *v }).(RelayNamespacePropertiesResponseOutput)
}

// The time the namespace was created.
func (o RelayNamespacePropertiesResponsePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelayNamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// Identifier for Azure Insights metrics.
func (o RelayNamespacePropertiesResponsePtrOutput) MetricId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelayNamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MetricId
	}).(pulumi.StringPtrOutput)
}

func (o RelayNamespacePropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelayNamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Endpoint you can use to perform Service Bus operations.
func (o RelayNamespacePropertiesResponsePtrOutput) ServiceBusEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelayNamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceBusEndpoint
	}).(pulumi.StringPtrOutput)
}

// The time the namespace was updated.
func (o RelayNamespacePropertiesResponsePtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelayNamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

// SKU of the namespace.
type Sku struct {
	// Name of this SKU.
	Name string `pulumi:"name"`
	// The tier of this SKU.
	Tier *string `pulumi:"tier"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//          SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// SKU of the namespace.
type SkuArgs struct {
	// Name of this SKU.
	Name pulumi.StringInput `pulumi:"name"`
	// The tier of this SKU.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//          SkuArgs{...}
//
//  or:
//
//          nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// SKU of the namespace.
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyT(func(v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// Name of this SKU.
func (o SkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Name }).(pulumi.StringOutput)
}

// The tier of this SKU.
func (o SkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku { return *v }).(SkuOutput)
}

// Name of this SKU.
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The tier of this SKU.
func (o SkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// SKU of the namespace.
type SkuResponse struct {
	// Name of this SKU.
	Name string `pulumi:"name"`
	// The tier of this SKU.
	Tier *string `pulumi:"tier"`
}

// SkuResponseInput is an input type that accepts SkuResponseArgs and SkuResponseOutput values.
// You can construct a concrete instance of `SkuResponseInput` via:
//
//          SkuResponseArgs{...}
type SkuResponseInput interface {
	pulumi.Input

	ToSkuResponseOutput() SkuResponseOutput
	ToSkuResponseOutputWithContext(context.Context) SkuResponseOutput
}

// SKU of the namespace.
type SkuResponseArgs struct {
	// Name of this SKU.
	Name pulumi.StringInput `pulumi:"name"`
	// The tier of this SKU.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (SkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (i SkuResponseArgs) ToSkuResponseOutput() SkuResponseOutput {
	return i.ToSkuResponseOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput)
}

func (i SkuResponseArgs) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput).ToSkuResponsePtrOutputWithContext(ctx)
}

// SkuResponsePtrInput is an input type that accepts SkuResponseArgs, SkuResponsePtr and SkuResponsePtrOutput values.
// You can construct a concrete instance of `SkuResponsePtrInput` via:
//
//          SkuResponseArgs{...}
//
//  or:
//
//          nil
type SkuResponsePtrInput interface {
	pulumi.Input

	ToSkuResponsePtrOutput() SkuResponsePtrOutput
	ToSkuResponsePtrOutputWithContext(context.Context) SkuResponsePtrOutput
}

type skuResponsePtrType SkuResponseArgs

func SkuResponsePtr(v *SkuResponseArgs) SkuResponsePtrInput {
	return (*skuResponsePtrType)(v)
}

func (*skuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponsePtrOutput)
}

// SKU of the namespace.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (o SkuResponseOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o.ApplyT(func(v SkuResponse) *SkuResponse {
		return &v
	}).(SkuResponsePtrOutput)
}

// Name of this SKU.
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The tier of this SKU.
func (o SkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse { return *v }).(SkuResponseOutput)
}

// Name of this SKU.
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The tier of this SKU.
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Properties of the WCF relay.
type WcfRelayResponseProperties struct {
	// The time the WCF relay was created.
	CreatedAt string `pulumi:"createdAt"`
	// Returns true if the relay is dynamic; otherwise, false.
	IsDynamic bool `pulumi:"isDynamic"`
	// The number of listeners for this relay. Note that min :1 and max:25 are supported.
	ListenerCount int `pulumi:"listenerCount"`
	// WCF relay type.
	RelayType *string `pulumi:"relayType"`
	// Returns true if client authorization is needed for this relay; otherwise, false.
	RequiresClientAuthorization *bool `pulumi:"requiresClientAuthorization"`
	// Returns true if transport security is needed for this relay; otherwise, false.
	RequiresTransportSecurity *bool `pulumi:"requiresTransportSecurity"`
	// The time the namespace was updated.
	UpdatedAt string `pulumi:"updatedAt"`
	// The usermetadata is a placeholder to store user-defined string data for the WCF Relay endpoint. For example, it can be used to store descriptive data, such as list of teams and their contact information. Also, user-defined configuration settings can be stored.
	UserMetadata *string `pulumi:"userMetadata"`
}

// WcfRelayResponsePropertiesInput is an input type that accepts WcfRelayResponsePropertiesArgs and WcfRelayResponsePropertiesOutput values.
// You can construct a concrete instance of `WcfRelayResponsePropertiesInput` via:
//
//          WcfRelayResponsePropertiesArgs{...}
type WcfRelayResponsePropertiesInput interface {
	pulumi.Input

	ToWcfRelayResponsePropertiesOutput() WcfRelayResponsePropertiesOutput
	ToWcfRelayResponsePropertiesOutputWithContext(context.Context) WcfRelayResponsePropertiesOutput
}

// Properties of the WCF relay.
type WcfRelayResponsePropertiesArgs struct {
	// The time the WCF relay was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Returns true if the relay is dynamic; otherwise, false.
	IsDynamic pulumi.BoolInput `pulumi:"isDynamic"`
	// The number of listeners for this relay. Note that min :1 and max:25 are supported.
	ListenerCount pulumi.IntInput `pulumi:"listenerCount"`
	// WCF relay type.
	RelayType pulumi.StringPtrInput `pulumi:"relayType"`
	// Returns true if client authorization is needed for this relay; otherwise, false.
	RequiresClientAuthorization pulumi.BoolPtrInput `pulumi:"requiresClientAuthorization"`
	// Returns true if transport security is needed for this relay; otherwise, false.
	RequiresTransportSecurity pulumi.BoolPtrInput `pulumi:"requiresTransportSecurity"`
	// The time the namespace was updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The usermetadata is a placeholder to store user-defined string data for the WCF Relay endpoint. For example, it can be used to store descriptive data, such as list of teams and their contact information. Also, user-defined configuration settings can be stored.
	UserMetadata pulumi.StringPtrInput `pulumi:"userMetadata"`
}

func (WcfRelayResponsePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WcfRelayResponseProperties)(nil)).Elem()
}

func (i WcfRelayResponsePropertiesArgs) ToWcfRelayResponsePropertiesOutput() WcfRelayResponsePropertiesOutput {
	return i.ToWcfRelayResponsePropertiesOutputWithContext(context.Background())
}

func (i WcfRelayResponsePropertiesArgs) ToWcfRelayResponsePropertiesOutputWithContext(ctx context.Context) WcfRelayResponsePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WcfRelayResponsePropertiesOutput)
}

func (i WcfRelayResponsePropertiesArgs) ToWcfRelayResponsePropertiesPtrOutput() WcfRelayResponsePropertiesPtrOutput {
	return i.ToWcfRelayResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i WcfRelayResponsePropertiesArgs) ToWcfRelayResponsePropertiesPtrOutputWithContext(ctx context.Context) WcfRelayResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WcfRelayResponsePropertiesOutput).ToWcfRelayResponsePropertiesPtrOutputWithContext(ctx)
}

// WcfRelayResponsePropertiesPtrInput is an input type that accepts WcfRelayResponsePropertiesArgs, WcfRelayResponsePropertiesPtr and WcfRelayResponsePropertiesPtrOutput values.
// You can construct a concrete instance of `WcfRelayResponsePropertiesPtrInput` via:
//
//          WcfRelayResponsePropertiesArgs{...}
//
//  or:
//
//          nil
type WcfRelayResponsePropertiesPtrInput interface {
	pulumi.Input

	ToWcfRelayResponsePropertiesPtrOutput() WcfRelayResponsePropertiesPtrOutput
	ToWcfRelayResponsePropertiesPtrOutputWithContext(context.Context) WcfRelayResponsePropertiesPtrOutput
}

type wcfRelayResponsePropertiesPtrType WcfRelayResponsePropertiesArgs

func WcfRelayResponsePropertiesPtr(v *WcfRelayResponsePropertiesArgs) WcfRelayResponsePropertiesPtrInput {
	return (*wcfRelayResponsePropertiesPtrType)(v)
}

func (*wcfRelayResponsePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WcfRelayResponseProperties)(nil)).Elem()
}

func (i *wcfRelayResponsePropertiesPtrType) ToWcfRelayResponsePropertiesPtrOutput() WcfRelayResponsePropertiesPtrOutput {
	return i.ToWcfRelayResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i *wcfRelayResponsePropertiesPtrType) ToWcfRelayResponsePropertiesPtrOutputWithContext(ctx context.Context) WcfRelayResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WcfRelayResponsePropertiesPtrOutput)
}

// Properties of the WCF relay.
type WcfRelayResponsePropertiesOutput struct{ *pulumi.OutputState }

func (WcfRelayResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WcfRelayResponseProperties)(nil)).Elem()
}

func (o WcfRelayResponsePropertiesOutput) ToWcfRelayResponsePropertiesOutput() WcfRelayResponsePropertiesOutput {
	return o
}

func (o WcfRelayResponsePropertiesOutput) ToWcfRelayResponsePropertiesOutputWithContext(ctx context.Context) WcfRelayResponsePropertiesOutput {
	return o
}

func (o WcfRelayResponsePropertiesOutput) ToWcfRelayResponsePropertiesPtrOutput() WcfRelayResponsePropertiesPtrOutput {
	return o.ToWcfRelayResponsePropertiesPtrOutputWithContext(context.Background())
}

func (o WcfRelayResponsePropertiesOutput) ToWcfRelayResponsePropertiesPtrOutputWithContext(ctx context.Context) WcfRelayResponsePropertiesPtrOutput {
	return o.ApplyT(func(v WcfRelayResponseProperties) *WcfRelayResponseProperties {
		return &v
	}).(WcfRelayResponsePropertiesPtrOutput)
}

// The time the WCF relay was created.
func (o WcfRelayResponsePropertiesOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v WcfRelayResponseProperties) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Returns true if the relay is dynamic; otherwise, false.
func (o WcfRelayResponsePropertiesOutput) IsDynamic() pulumi.BoolOutput {
	return o.ApplyT(func(v WcfRelayResponseProperties) bool { return v.IsDynamic }).(pulumi.BoolOutput)
}

// The number of listeners for this relay. Note that min :1 and max:25 are supported.
func (o WcfRelayResponsePropertiesOutput) ListenerCount() pulumi.IntOutput {
	return o.ApplyT(func(v WcfRelayResponseProperties) int { return v.ListenerCount }).(pulumi.IntOutput)
}

// WCF relay type.
func (o WcfRelayResponsePropertiesOutput) RelayType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WcfRelayResponseProperties) *string { return v.RelayType }).(pulumi.StringPtrOutput)
}

// Returns true if client authorization is needed for this relay; otherwise, false.
func (o WcfRelayResponsePropertiesOutput) RequiresClientAuthorization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WcfRelayResponseProperties) *bool { return v.RequiresClientAuthorization }).(pulumi.BoolPtrOutput)
}

// Returns true if transport security is needed for this relay; otherwise, false.
func (o WcfRelayResponsePropertiesOutput) RequiresTransportSecurity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WcfRelayResponseProperties) *bool { return v.RequiresTransportSecurity }).(pulumi.BoolPtrOutput)
}

// The time the namespace was updated.
func (o WcfRelayResponsePropertiesOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v WcfRelayResponseProperties) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The usermetadata is a placeholder to store user-defined string data for the WCF Relay endpoint. For example, it can be used to store descriptive data, such as list of teams and their contact information. Also, user-defined configuration settings can be stored.
func (o WcfRelayResponsePropertiesOutput) UserMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WcfRelayResponseProperties) *string { return v.UserMetadata }).(pulumi.StringPtrOutput)
}

type WcfRelayResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (WcfRelayResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WcfRelayResponseProperties)(nil)).Elem()
}

func (o WcfRelayResponsePropertiesPtrOutput) ToWcfRelayResponsePropertiesPtrOutput() WcfRelayResponsePropertiesPtrOutput {
	return o
}

func (o WcfRelayResponsePropertiesPtrOutput) ToWcfRelayResponsePropertiesPtrOutputWithContext(ctx context.Context) WcfRelayResponsePropertiesPtrOutput {
	return o
}

func (o WcfRelayResponsePropertiesPtrOutput) Elem() WcfRelayResponsePropertiesOutput {
	return o.ApplyT(func(v *WcfRelayResponseProperties) WcfRelayResponseProperties { return *v }).(WcfRelayResponsePropertiesOutput)
}

// The time the WCF relay was created.
func (o WcfRelayResponsePropertiesPtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WcfRelayResponseProperties) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// Returns true if the relay is dynamic; otherwise, false.
func (o WcfRelayResponsePropertiesPtrOutput) IsDynamic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WcfRelayResponseProperties) *bool {
		if v == nil {
			return nil
		}
		return &v.IsDynamic
	}).(pulumi.BoolPtrOutput)
}

// The number of listeners for this relay. Note that min :1 and max:25 are supported.
func (o WcfRelayResponsePropertiesPtrOutput) ListenerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WcfRelayResponseProperties) *int {
		if v == nil {
			return nil
		}
		return &v.ListenerCount
	}).(pulumi.IntPtrOutput)
}

// WCF relay type.
func (o WcfRelayResponsePropertiesPtrOutput) RelayType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WcfRelayResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.RelayType
	}).(pulumi.StringPtrOutput)
}

// Returns true if client authorization is needed for this relay; otherwise, false.
func (o WcfRelayResponsePropertiesPtrOutput) RequiresClientAuthorization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WcfRelayResponseProperties) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresClientAuthorization
	}).(pulumi.BoolPtrOutput)
}

// Returns true if transport security is needed for this relay; otherwise, false.
func (o WcfRelayResponsePropertiesPtrOutput) RequiresTransportSecurity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WcfRelayResponseProperties) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresTransportSecurity
	}).(pulumi.BoolPtrOutput)
}

// The time the namespace was updated.
func (o WcfRelayResponsePropertiesPtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WcfRelayResponseProperties) *string {
		if v == nil {
			return nil
		}
		return &v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

// The usermetadata is a placeholder to store user-defined string data for the WCF Relay endpoint. For example, it can be used to store descriptive data, such as list of teams and their contact information. Also, user-defined configuration settings can be stored.
func (o WcfRelayResponsePropertiesPtrOutput) UserMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WcfRelayResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.UserMetadata
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AuthorizationRuleResponsePropertiesOutput{})
	pulumi.RegisterOutputType(AuthorizationRuleResponsePropertiesPtrOutput{})
	pulumi.RegisterOutputType(HybridConnectionResponsePropertiesOutput{})
	pulumi.RegisterOutputType(HybridConnectionResponsePropertiesPtrOutput{})
	pulumi.RegisterOutputType(RelayNamespacePropertiesResponseOutput{})
	pulumi.RegisterOutputType(RelayNamespacePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
	pulumi.RegisterOutputType(WcfRelayResponsePropertiesOutput{})
	pulumi.RegisterOutputType(WcfRelayResponsePropertiesPtrOutput{})
}
