// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20160701

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// AuthorizationRule properties.
type AuthorizationRuleProperties struct {
	// The rights associated with the rule.
	Rights []string `pulumi:"rights"`
}

// AuthorizationRulePropertiesInput is an input type that accepts AuthorizationRulePropertiesArgs and AuthorizationRulePropertiesOutput values.
// You can construct a concrete instance of `AuthorizationRulePropertiesInput` via:
//
//          AuthorizationRulePropertiesArgs{...}
type AuthorizationRulePropertiesInput interface {
	pulumi.Input

	ToAuthorizationRulePropertiesOutput() AuthorizationRulePropertiesOutput
	ToAuthorizationRulePropertiesOutputWithContext(context.Context) AuthorizationRulePropertiesOutput
}

// AuthorizationRule properties.
type AuthorizationRulePropertiesArgs struct {
	// The rights associated with the rule.
	Rights pulumi.StringArrayInput `pulumi:"rights"`
}

func (AuthorizationRulePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationRuleProperties)(nil)).Elem()
}

func (i AuthorizationRulePropertiesArgs) ToAuthorizationRulePropertiesOutput() AuthorizationRulePropertiesOutput {
	return i.ToAuthorizationRulePropertiesOutputWithContext(context.Background())
}

func (i AuthorizationRulePropertiesArgs) ToAuthorizationRulePropertiesOutputWithContext(ctx context.Context) AuthorizationRulePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationRulePropertiesOutput)
}

func (i AuthorizationRulePropertiesArgs) ToAuthorizationRulePropertiesPtrOutput() AuthorizationRulePropertiesPtrOutput {
	return i.ToAuthorizationRulePropertiesPtrOutputWithContext(context.Background())
}

func (i AuthorizationRulePropertiesArgs) ToAuthorizationRulePropertiesPtrOutputWithContext(ctx context.Context) AuthorizationRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationRulePropertiesOutput).ToAuthorizationRulePropertiesPtrOutputWithContext(ctx)
}

// AuthorizationRulePropertiesPtrInput is an input type that accepts AuthorizationRulePropertiesArgs, AuthorizationRulePropertiesPtr and AuthorizationRulePropertiesPtrOutput values.
// You can construct a concrete instance of `AuthorizationRulePropertiesPtrInput` via:
//
//          AuthorizationRulePropertiesArgs{...}
//
//  or:
//
//          nil
type AuthorizationRulePropertiesPtrInput interface {
	pulumi.Input

	ToAuthorizationRulePropertiesPtrOutput() AuthorizationRulePropertiesPtrOutput
	ToAuthorizationRulePropertiesPtrOutputWithContext(context.Context) AuthorizationRulePropertiesPtrOutput
}

type authorizationRulePropertiesPtrType AuthorizationRulePropertiesArgs

func AuthorizationRulePropertiesPtr(v *AuthorizationRulePropertiesArgs) AuthorizationRulePropertiesPtrInput {
	return (*authorizationRulePropertiesPtrType)(v)
}

func (*authorizationRulePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationRuleProperties)(nil)).Elem()
}

func (i *authorizationRulePropertiesPtrType) ToAuthorizationRulePropertiesPtrOutput() AuthorizationRulePropertiesPtrOutput {
	return i.ToAuthorizationRulePropertiesPtrOutputWithContext(context.Background())
}

func (i *authorizationRulePropertiesPtrType) ToAuthorizationRulePropertiesPtrOutputWithContext(ctx context.Context) AuthorizationRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationRulePropertiesPtrOutput)
}

// AuthorizationRule properties.
type AuthorizationRulePropertiesOutput struct{ *pulumi.OutputState }

func (AuthorizationRulePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationRuleProperties)(nil)).Elem()
}

func (o AuthorizationRulePropertiesOutput) ToAuthorizationRulePropertiesOutput() AuthorizationRulePropertiesOutput {
	return o
}

func (o AuthorizationRulePropertiesOutput) ToAuthorizationRulePropertiesOutputWithContext(ctx context.Context) AuthorizationRulePropertiesOutput {
	return o
}

func (o AuthorizationRulePropertiesOutput) ToAuthorizationRulePropertiesPtrOutput() AuthorizationRulePropertiesPtrOutput {
	return o.ToAuthorizationRulePropertiesPtrOutputWithContext(context.Background())
}

func (o AuthorizationRulePropertiesOutput) ToAuthorizationRulePropertiesPtrOutputWithContext(ctx context.Context) AuthorizationRulePropertiesPtrOutput {
	return o.ApplyT(func(v AuthorizationRuleProperties) *AuthorizationRuleProperties {
		return &v
	}).(AuthorizationRulePropertiesPtrOutput)
}

// The rights associated with the rule.
func (o AuthorizationRulePropertiesOutput) Rights() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthorizationRuleProperties) []string { return v.Rights }).(pulumi.StringArrayOutput)
}

type AuthorizationRulePropertiesPtrOutput struct{ *pulumi.OutputState }

func (AuthorizationRulePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationRuleProperties)(nil)).Elem()
}

func (o AuthorizationRulePropertiesPtrOutput) ToAuthorizationRulePropertiesPtrOutput() AuthorizationRulePropertiesPtrOutput {
	return o
}

func (o AuthorizationRulePropertiesPtrOutput) ToAuthorizationRulePropertiesPtrOutputWithContext(ctx context.Context) AuthorizationRulePropertiesPtrOutput {
	return o
}

func (o AuthorizationRulePropertiesPtrOutput) Elem() AuthorizationRulePropertiesOutput {
	return o.ApplyT(func(v *AuthorizationRuleProperties) AuthorizationRuleProperties { return *v }).(AuthorizationRulePropertiesOutput)
}

// The rights associated with the rule.
func (o AuthorizationRulePropertiesPtrOutput) Rights() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthorizationRuleProperties) []string {
		if v == nil {
			return nil
		}
		return v.Rights
	}).(pulumi.StringArrayOutput)
}

// AuthorizationRule properties.
type AuthorizationRulePropertiesResponse struct {
	// The rights associated with the rule.
	Rights []string `pulumi:"rights"`
}

// AuthorizationRulePropertiesResponseInput is an input type that accepts AuthorizationRulePropertiesResponseArgs and AuthorizationRulePropertiesResponseOutput values.
// You can construct a concrete instance of `AuthorizationRulePropertiesResponseInput` via:
//
//          AuthorizationRulePropertiesResponseArgs{...}
type AuthorizationRulePropertiesResponseInput interface {
	pulumi.Input

	ToAuthorizationRulePropertiesResponseOutput() AuthorizationRulePropertiesResponseOutput
	ToAuthorizationRulePropertiesResponseOutputWithContext(context.Context) AuthorizationRulePropertiesResponseOutput
}

// AuthorizationRule properties.
type AuthorizationRulePropertiesResponseArgs struct {
	// The rights associated with the rule.
	Rights pulumi.StringArrayInput `pulumi:"rights"`
}

func (AuthorizationRulePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationRulePropertiesResponse)(nil)).Elem()
}

func (i AuthorizationRulePropertiesResponseArgs) ToAuthorizationRulePropertiesResponseOutput() AuthorizationRulePropertiesResponseOutput {
	return i.ToAuthorizationRulePropertiesResponseOutputWithContext(context.Background())
}

func (i AuthorizationRulePropertiesResponseArgs) ToAuthorizationRulePropertiesResponseOutputWithContext(ctx context.Context) AuthorizationRulePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationRulePropertiesResponseOutput)
}

func (i AuthorizationRulePropertiesResponseArgs) ToAuthorizationRulePropertiesResponsePtrOutput() AuthorizationRulePropertiesResponsePtrOutput {
	return i.ToAuthorizationRulePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i AuthorizationRulePropertiesResponseArgs) ToAuthorizationRulePropertiesResponsePtrOutputWithContext(ctx context.Context) AuthorizationRulePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationRulePropertiesResponseOutput).ToAuthorizationRulePropertiesResponsePtrOutputWithContext(ctx)
}

// AuthorizationRulePropertiesResponsePtrInput is an input type that accepts AuthorizationRulePropertiesResponseArgs, AuthorizationRulePropertiesResponsePtr and AuthorizationRulePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `AuthorizationRulePropertiesResponsePtrInput` via:
//
//          AuthorizationRulePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type AuthorizationRulePropertiesResponsePtrInput interface {
	pulumi.Input

	ToAuthorizationRulePropertiesResponsePtrOutput() AuthorizationRulePropertiesResponsePtrOutput
	ToAuthorizationRulePropertiesResponsePtrOutputWithContext(context.Context) AuthorizationRulePropertiesResponsePtrOutput
}

type authorizationRulePropertiesResponsePtrType AuthorizationRulePropertiesResponseArgs

func AuthorizationRulePropertiesResponsePtr(v *AuthorizationRulePropertiesResponseArgs) AuthorizationRulePropertiesResponsePtrInput {
	return (*authorizationRulePropertiesResponsePtrType)(v)
}

func (*authorizationRulePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationRulePropertiesResponse)(nil)).Elem()
}

func (i *authorizationRulePropertiesResponsePtrType) ToAuthorizationRulePropertiesResponsePtrOutput() AuthorizationRulePropertiesResponsePtrOutput {
	return i.ToAuthorizationRulePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *authorizationRulePropertiesResponsePtrType) ToAuthorizationRulePropertiesResponsePtrOutputWithContext(ctx context.Context) AuthorizationRulePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationRulePropertiesResponsePtrOutput)
}

// AuthorizationRule properties.
type AuthorizationRulePropertiesResponseOutput struct{ *pulumi.OutputState }

func (AuthorizationRulePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationRulePropertiesResponse)(nil)).Elem()
}

func (o AuthorizationRulePropertiesResponseOutput) ToAuthorizationRulePropertiesResponseOutput() AuthorizationRulePropertiesResponseOutput {
	return o
}

func (o AuthorizationRulePropertiesResponseOutput) ToAuthorizationRulePropertiesResponseOutputWithContext(ctx context.Context) AuthorizationRulePropertiesResponseOutput {
	return o
}

func (o AuthorizationRulePropertiesResponseOutput) ToAuthorizationRulePropertiesResponsePtrOutput() AuthorizationRulePropertiesResponsePtrOutput {
	return o.ToAuthorizationRulePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o AuthorizationRulePropertiesResponseOutput) ToAuthorizationRulePropertiesResponsePtrOutputWithContext(ctx context.Context) AuthorizationRulePropertiesResponsePtrOutput {
	return o.ApplyT(func(v AuthorizationRulePropertiesResponse) *AuthorizationRulePropertiesResponse {
		return &v
	}).(AuthorizationRulePropertiesResponsePtrOutput)
}

// The rights associated with the rule.
func (o AuthorizationRulePropertiesResponseOutput) Rights() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthorizationRulePropertiesResponse) []string { return v.Rights }).(pulumi.StringArrayOutput)
}

type AuthorizationRulePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (AuthorizationRulePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationRulePropertiesResponse)(nil)).Elem()
}

func (o AuthorizationRulePropertiesResponsePtrOutput) ToAuthorizationRulePropertiesResponsePtrOutput() AuthorizationRulePropertiesResponsePtrOutput {
	return o
}

func (o AuthorizationRulePropertiesResponsePtrOutput) ToAuthorizationRulePropertiesResponsePtrOutputWithContext(ctx context.Context) AuthorizationRulePropertiesResponsePtrOutput {
	return o
}

func (o AuthorizationRulePropertiesResponsePtrOutput) Elem() AuthorizationRulePropertiesResponseOutput {
	return o.ApplyT(func(v *AuthorizationRulePropertiesResponse) AuthorizationRulePropertiesResponse { return *v }).(AuthorizationRulePropertiesResponseOutput)
}

// The rights associated with the rule.
func (o AuthorizationRulePropertiesResponsePtrOutput) Rights() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthorizationRulePropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.Rights
	}).(pulumi.StringArrayOutput)
}

// Description of HybridConnection Resource.
type HybridConnectionType struct {
	// Resource name
	Name string `pulumi:"name"`
	// Properties of HybridConnection
	Properties HybridConnectionPropertiesResponse `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// HybridConnectionTypeInput is an input type that accepts HybridConnectionTypeArgs and HybridConnectionTypeOutput values.
// You can construct a concrete instance of `HybridConnectionTypeInput` via:
//
//          HybridConnectionTypeArgs{...}
type HybridConnectionTypeInput interface {
	pulumi.Input

	ToHybridConnectionTypeOutput() HybridConnectionTypeOutput
	ToHybridConnectionTypeOutputWithContext(context.Context) HybridConnectionTypeOutput
}

// Description of HybridConnection Resource.
type HybridConnectionTypeArgs struct {
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// Properties of HybridConnection
	Properties HybridConnectionPropertiesResponseInput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (HybridConnectionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridConnectionType)(nil)).Elem()
}

func (i HybridConnectionTypeArgs) ToHybridConnectionTypeOutput() HybridConnectionTypeOutput {
	return i.ToHybridConnectionTypeOutputWithContext(context.Background())
}

func (i HybridConnectionTypeArgs) ToHybridConnectionTypeOutputWithContext(ctx context.Context) HybridConnectionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionTypeOutput)
}

// Description of HybridConnection Resource.
type HybridConnectionTypeOutput struct{ *pulumi.OutputState }

func (HybridConnectionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridConnectionType)(nil)).Elem()
}

func (o HybridConnectionTypeOutput) ToHybridConnectionTypeOutput() HybridConnectionTypeOutput {
	return o
}

func (o HybridConnectionTypeOutput) ToHybridConnectionTypeOutputWithContext(ctx context.Context) HybridConnectionTypeOutput {
	return o
}

// Resource name
func (o HybridConnectionTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HybridConnectionType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of HybridConnection
func (o HybridConnectionTypeOutput) Properties() HybridConnectionPropertiesResponseOutput {
	return o.ApplyT(func(v HybridConnectionType) HybridConnectionPropertiesResponse { return v.Properties }).(HybridConnectionPropertiesResponseOutput)
}

// Resource type
func (o HybridConnectionTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HybridConnectionType) string { return v.Type }).(pulumi.StringOutput)
}

// Description of a Namespace AuthorizationRules.
type HybridConnectionAuthorizationRuleType struct {
	// Resource name
	Name string `pulumi:"name"`
	// Authorization Rule properties
	Properties AuthorizationRulePropertiesResponse `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// HybridConnectionAuthorizationRuleTypeInput is an input type that accepts HybridConnectionAuthorizationRuleTypeArgs and HybridConnectionAuthorizationRuleTypeOutput values.
// You can construct a concrete instance of `HybridConnectionAuthorizationRuleTypeInput` via:
//
//          HybridConnectionAuthorizationRuleTypeArgs{...}
type HybridConnectionAuthorizationRuleTypeInput interface {
	pulumi.Input

	ToHybridConnectionAuthorizationRuleTypeOutput() HybridConnectionAuthorizationRuleTypeOutput
	ToHybridConnectionAuthorizationRuleTypeOutputWithContext(context.Context) HybridConnectionAuthorizationRuleTypeOutput
}

// Description of a Namespace AuthorizationRules.
type HybridConnectionAuthorizationRuleTypeArgs struct {
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// Authorization Rule properties
	Properties AuthorizationRulePropertiesResponseInput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (HybridConnectionAuthorizationRuleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridConnectionAuthorizationRuleType)(nil)).Elem()
}

func (i HybridConnectionAuthorizationRuleTypeArgs) ToHybridConnectionAuthorizationRuleTypeOutput() HybridConnectionAuthorizationRuleTypeOutput {
	return i.ToHybridConnectionAuthorizationRuleTypeOutputWithContext(context.Background())
}

func (i HybridConnectionAuthorizationRuleTypeArgs) ToHybridConnectionAuthorizationRuleTypeOutputWithContext(ctx context.Context) HybridConnectionAuthorizationRuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionAuthorizationRuleTypeOutput)
}

// Description of a Namespace AuthorizationRules.
type HybridConnectionAuthorizationRuleTypeOutput struct{ *pulumi.OutputState }

func (HybridConnectionAuthorizationRuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridConnectionAuthorizationRuleType)(nil)).Elem()
}

func (o HybridConnectionAuthorizationRuleTypeOutput) ToHybridConnectionAuthorizationRuleTypeOutput() HybridConnectionAuthorizationRuleTypeOutput {
	return o
}

func (o HybridConnectionAuthorizationRuleTypeOutput) ToHybridConnectionAuthorizationRuleTypeOutputWithContext(ctx context.Context) HybridConnectionAuthorizationRuleTypeOutput {
	return o
}

// Resource name
func (o HybridConnectionAuthorizationRuleTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HybridConnectionAuthorizationRuleType) string { return v.Name }).(pulumi.StringOutput)
}

// Authorization Rule properties
func (o HybridConnectionAuthorizationRuleTypeOutput) Properties() AuthorizationRulePropertiesResponseOutput {
	return o.ApplyT(func(v HybridConnectionAuthorizationRuleType) AuthorizationRulePropertiesResponse { return v.Properties }).(AuthorizationRulePropertiesResponseOutput)
}

// Resource type
func (o HybridConnectionAuthorizationRuleTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HybridConnectionAuthorizationRuleType) string { return v.Type }).(pulumi.StringOutput)
}

// Properties of the HybridConnection.
type HybridConnectionProperties struct {
	// true if client authorization is needed for this HybridConnection; otherwise, false.
	RequiresClientAuthorization *bool `pulumi:"requiresClientAuthorization"`
	// usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
	UserMetadata *string `pulumi:"userMetadata"`
}

// HybridConnectionPropertiesInput is an input type that accepts HybridConnectionPropertiesArgs and HybridConnectionPropertiesOutput values.
// You can construct a concrete instance of `HybridConnectionPropertiesInput` via:
//
//          HybridConnectionPropertiesArgs{...}
type HybridConnectionPropertiesInput interface {
	pulumi.Input

	ToHybridConnectionPropertiesOutput() HybridConnectionPropertiesOutput
	ToHybridConnectionPropertiesOutputWithContext(context.Context) HybridConnectionPropertiesOutput
}

// Properties of the HybridConnection.
type HybridConnectionPropertiesArgs struct {
	// true if client authorization is needed for this HybridConnection; otherwise, false.
	RequiresClientAuthorization pulumi.BoolPtrInput `pulumi:"requiresClientAuthorization"`
	// usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
	UserMetadata pulumi.StringPtrInput `pulumi:"userMetadata"`
}

func (HybridConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridConnectionProperties)(nil)).Elem()
}

func (i HybridConnectionPropertiesArgs) ToHybridConnectionPropertiesOutput() HybridConnectionPropertiesOutput {
	return i.ToHybridConnectionPropertiesOutputWithContext(context.Background())
}

func (i HybridConnectionPropertiesArgs) ToHybridConnectionPropertiesOutputWithContext(ctx context.Context) HybridConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionPropertiesOutput)
}

func (i HybridConnectionPropertiesArgs) ToHybridConnectionPropertiesPtrOutput() HybridConnectionPropertiesPtrOutput {
	return i.ToHybridConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (i HybridConnectionPropertiesArgs) ToHybridConnectionPropertiesPtrOutputWithContext(ctx context.Context) HybridConnectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionPropertiesOutput).ToHybridConnectionPropertiesPtrOutputWithContext(ctx)
}

// HybridConnectionPropertiesPtrInput is an input type that accepts HybridConnectionPropertiesArgs, HybridConnectionPropertiesPtr and HybridConnectionPropertiesPtrOutput values.
// You can construct a concrete instance of `HybridConnectionPropertiesPtrInput` via:
//
//          HybridConnectionPropertiesArgs{...}
//
//  or:
//
//          nil
type HybridConnectionPropertiesPtrInput interface {
	pulumi.Input

	ToHybridConnectionPropertiesPtrOutput() HybridConnectionPropertiesPtrOutput
	ToHybridConnectionPropertiesPtrOutputWithContext(context.Context) HybridConnectionPropertiesPtrOutput
}

type hybridConnectionPropertiesPtrType HybridConnectionPropertiesArgs

func HybridConnectionPropertiesPtr(v *HybridConnectionPropertiesArgs) HybridConnectionPropertiesPtrInput {
	return (*hybridConnectionPropertiesPtrType)(v)
}

func (*hybridConnectionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridConnectionProperties)(nil)).Elem()
}

func (i *hybridConnectionPropertiesPtrType) ToHybridConnectionPropertiesPtrOutput() HybridConnectionPropertiesPtrOutput {
	return i.ToHybridConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (i *hybridConnectionPropertiesPtrType) ToHybridConnectionPropertiesPtrOutputWithContext(ctx context.Context) HybridConnectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionPropertiesPtrOutput)
}

// Properties of the HybridConnection.
type HybridConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (HybridConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridConnectionProperties)(nil)).Elem()
}

func (o HybridConnectionPropertiesOutput) ToHybridConnectionPropertiesOutput() HybridConnectionPropertiesOutput {
	return o
}

func (o HybridConnectionPropertiesOutput) ToHybridConnectionPropertiesOutputWithContext(ctx context.Context) HybridConnectionPropertiesOutput {
	return o
}

func (o HybridConnectionPropertiesOutput) ToHybridConnectionPropertiesPtrOutput() HybridConnectionPropertiesPtrOutput {
	return o.ToHybridConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (o HybridConnectionPropertiesOutput) ToHybridConnectionPropertiesPtrOutputWithContext(ctx context.Context) HybridConnectionPropertiesPtrOutput {
	return o.ApplyT(func(v HybridConnectionProperties) *HybridConnectionProperties {
		return &v
	}).(HybridConnectionPropertiesPtrOutput)
}

// true if client authorization is needed for this HybridConnection; otherwise, false.
func (o HybridConnectionPropertiesOutput) RequiresClientAuthorization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HybridConnectionProperties) *bool { return v.RequiresClientAuthorization }).(pulumi.BoolPtrOutput)
}

// usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
func (o HybridConnectionPropertiesOutput) UserMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HybridConnectionProperties) *string { return v.UserMetadata }).(pulumi.StringPtrOutput)
}

type HybridConnectionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (HybridConnectionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridConnectionProperties)(nil)).Elem()
}

func (o HybridConnectionPropertiesPtrOutput) ToHybridConnectionPropertiesPtrOutput() HybridConnectionPropertiesPtrOutput {
	return o
}

func (o HybridConnectionPropertiesPtrOutput) ToHybridConnectionPropertiesPtrOutputWithContext(ctx context.Context) HybridConnectionPropertiesPtrOutput {
	return o
}

func (o HybridConnectionPropertiesPtrOutput) Elem() HybridConnectionPropertiesOutput {
	return o.ApplyT(func(v *HybridConnectionProperties) HybridConnectionProperties { return *v }).(HybridConnectionPropertiesOutput)
}

// true if client authorization is needed for this HybridConnection; otherwise, false.
func (o HybridConnectionPropertiesPtrOutput) RequiresClientAuthorization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HybridConnectionProperties) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresClientAuthorization
	}).(pulumi.BoolPtrOutput)
}

// usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
func (o HybridConnectionPropertiesPtrOutput) UserMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HybridConnectionProperties) *string {
		if v == nil {
			return nil
		}
		return v.UserMetadata
	}).(pulumi.StringPtrOutput)
}

// Properties of the HybridConnection.
type HybridConnectionPropertiesResponse struct {
	// The time the HybridConnection was created.
	CreatedAt string `pulumi:"createdAt"`
	// The number of listeners for this HybridConnection. min : 1 and max:25 supported
	ListenerCount int `pulumi:"listenerCount"`
	// true if client authorization is needed for this HybridConnection; otherwise, false.
	RequiresClientAuthorization *bool `pulumi:"requiresClientAuthorization"`
	// The time the namespace was updated.
	UpdatedAt string `pulumi:"updatedAt"`
	// usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
	UserMetadata *string `pulumi:"userMetadata"`
}

// HybridConnectionPropertiesResponseInput is an input type that accepts HybridConnectionPropertiesResponseArgs and HybridConnectionPropertiesResponseOutput values.
// You can construct a concrete instance of `HybridConnectionPropertiesResponseInput` via:
//
//          HybridConnectionPropertiesResponseArgs{...}
type HybridConnectionPropertiesResponseInput interface {
	pulumi.Input

	ToHybridConnectionPropertiesResponseOutput() HybridConnectionPropertiesResponseOutput
	ToHybridConnectionPropertiesResponseOutputWithContext(context.Context) HybridConnectionPropertiesResponseOutput
}

// Properties of the HybridConnection.
type HybridConnectionPropertiesResponseArgs struct {
	// The time the HybridConnection was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The number of listeners for this HybridConnection. min : 1 and max:25 supported
	ListenerCount pulumi.IntInput `pulumi:"listenerCount"`
	// true if client authorization is needed for this HybridConnection; otherwise, false.
	RequiresClientAuthorization pulumi.BoolPtrInput `pulumi:"requiresClientAuthorization"`
	// The time the namespace was updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
	UserMetadata pulumi.StringPtrInput `pulumi:"userMetadata"`
}

func (HybridConnectionPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridConnectionPropertiesResponse)(nil)).Elem()
}

func (i HybridConnectionPropertiesResponseArgs) ToHybridConnectionPropertiesResponseOutput() HybridConnectionPropertiesResponseOutput {
	return i.ToHybridConnectionPropertiesResponseOutputWithContext(context.Background())
}

func (i HybridConnectionPropertiesResponseArgs) ToHybridConnectionPropertiesResponseOutputWithContext(ctx context.Context) HybridConnectionPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionPropertiesResponseOutput)
}

func (i HybridConnectionPropertiesResponseArgs) ToHybridConnectionPropertiesResponsePtrOutput() HybridConnectionPropertiesResponsePtrOutput {
	return i.ToHybridConnectionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i HybridConnectionPropertiesResponseArgs) ToHybridConnectionPropertiesResponsePtrOutputWithContext(ctx context.Context) HybridConnectionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionPropertiesResponseOutput).ToHybridConnectionPropertiesResponsePtrOutputWithContext(ctx)
}

// HybridConnectionPropertiesResponsePtrInput is an input type that accepts HybridConnectionPropertiesResponseArgs, HybridConnectionPropertiesResponsePtr and HybridConnectionPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `HybridConnectionPropertiesResponsePtrInput` via:
//
//          HybridConnectionPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type HybridConnectionPropertiesResponsePtrInput interface {
	pulumi.Input

	ToHybridConnectionPropertiesResponsePtrOutput() HybridConnectionPropertiesResponsePtrOutput
	ToHybridConnectionPropertiesResponsePtrOutputWithContext(context.Context) HybridConnectionPropertiesResponsePtrOutput
}

type hybridConnectionPropertiesResponsePtrType HybridConnectionPropertiesResponseArgs

func HybridConnectionPropertiesResponsePtr(v *HybridConnectionPropertiesResponseArgs) HybridConnectionPropertiesResponsePtrInput {
	return (*hybridConnectionPropertiesResponsePtrType)(v)
}

func (*hybridConnectionPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridConnectionPropertiesResponse)(nil)).Elem()
}

func (i *hybridConnectionPropertiesResponsePtrType) ToHybridConnectionPropertiesResponsePtrOutput() HybridConnectionPropertiesResponsePtrOutput {
	return i.ToHybridConnectionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *hybridConnectionPropertiesResponsePtrType) ToHybridConnectionPropertiesResponsePtrOutputWithContext(ctx context.Context) HybridConnectionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionPropertiesResponsePtrOutput)
}

// Properties of the HybridConnection.
type HybridConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (HybridConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridConnectionPropertiesResponse)(nil)).Elem()
}

func (o HybridConnectionPropertiesResponseOutput) ToHybridConnectionPropertiesResponseOutput() HybridConnectionPropertiesResponseOutput {
	return o
}

func (o HybridConnectionPropertiesResponseOutput) ToHybridConnectionPropertiesResponseOutputWithContext(ctx context.Context) HybridConnectionPropertiesResponseOutput {
	return o
}

func (o HybridConnectionPropertiesResponseOutput) ToHybridConnectionPropertiesResponsePtrOutput() HybridConnectionPropertiesResponsePtrOutput {
	return o.ToHybridConnectionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o HybridConnectionPropertiesResponseOutput) ToHybridConnectionPropertiesResponsePtrOutputWithContext(ctx context.Context) HybridConnectionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v HybridConnectionPropertiesResponse) *HybridConnectionPropertiesResponse {
		return &v
	}).(HybridConnectionPropertiesResponsePtrOutput)
}

// The time the HybridConnection was created.
func (o HybridConnectionPropertiesResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v HybridConnectionPropertiesResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The number of listeners for this HybridConnection. min : 1 and max:25 supported
func (o HybridConnectionPropertiesResponseOutput) ListenerCount() pulumi.IntOutput {
	return o.ApplyT(func(v HybridConnectionPropertiesResponse) int { return v.ListenerCount }).(pulumi.IntOutput)
}

// true if client authorization is needed for this HybridConnection; otherwise, false.
func (o HybridConnectionPropertiesResponseOutput) RequiresClientAuthorization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HybridConnectionPropertiesResponse) *bool { return v.RequiresClientAuthorization }).(pulumi.BoolPtrOutput)
}

// The time the namespace was updated.
func (o HybridConnectionPropertiesResponseOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v HybridConnectionPropertiesResponse) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
func (o HybridConnectionPropertiesResponseOutput) UserMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HybridConnectionPropertiesResponse) *string { return v.UserMetadata }).(pulumi.StringPtrOutput)
}

type HybridConnectionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (HybridConnectionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridConnectionPropertiesResponse)(nil)).Elem()
}

func (o HybridConnectionPropertiesResponsePtrOutput) ToHybridConnectionPropertiesResponsePtrOutput() HybridConnectionPropertiesResponsePtrOutput {
	return o
}

func (o HybridConnectionPropertiesResponsePtrOutput) ToHybridConnectionPropertiesResponsePtrOutputWithContext(ctx context.Context) HybridConnectionPropertiesResponsePtrOutput {
	return o
}

func (o HybridConnectionPropertiesResponsePtrOutput) Elem() HybridConnectionPropertiesResponseOutput {
	return o.ApplyT(func(v *HybridConnectionPropertiesResponse) HybridConnectionPropertiesResponse { return *v }).(HybridConnectionPropertiesResponseOutput)
}

// The time the HybridConnection was created.
func (o HybridConnectionPropertiesResponsePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HybridConnectionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// The number of listeners for this HybridConnection. min : 1 and max:25 supported
func (o HybridConnectionPropertiesResponsePtrOutput) ListenerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HybridConnectionPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ListenerCount
	}).(pulumi.IntPtrOutput)
}

// true if client authorization is needed for this HybridConnection; otherwise, false.
func (o HybridConnectionPropertiesResponsePtrOutput) RequiresClientAuthorization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HybridConnectionPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresClientAuthorization
	}).(pulumi.BoolPtrOutput)
}

// The time the namespace was updated.
func (o HybridConnectionPropertiesResponsePtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HybridConnectionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

// usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
func (o HybridConnectionPropertiesResponsePtrOutput) UserMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HybridConnectionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserMetadata
	}).(pulumi.StringPtrOutput)
}

// Description of a Namespace resource.
type NamespaceType struct {
	// Resource location
	Location string `pulumi:"location"`
	// Resource name
	Name string `pulumi:"name"`
	// Description of Relay Namespace
	Properties RelayNamespacePropertiesResponse `pulumi:"properties"`
	// Sku of the Namespace.
	Sku *SkuResponse `pulumi:"sku"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type string `pulumi:"type"`
}

// NamespaceTypeInput is an input type that accepts NamespaceTypeArgs and NamespaceTypeOutput values.
// You can construct a concrete instance of `NamespaceTypeInput` via:
//
//          NamespaceTypeArgs{...}
type NamespaceTypeInput interface {
	pulumi.Input

	ToNamespaceTypeOutput() NamespaceTypeOutput
	ToNamespaceTypeOutputWithContext(context.Context) NamespaceTypeOutput
}

// Description of a Namespace resource.
type NamespaceTypeArgs struct {
	// Resource location
	Location pulumi.StringInput `pulumi:"location"`
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// Description of Relay Namespace
	Properties RelayNamespacePropertiesResponseInput `pulumi:"properties"`
	// Sku of the Namespace.
	Sku SkuResponsePtrInput `pulumi:"sku"`
	// Resource tags
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (NamespaceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceType)(nil)).Elem()
}

func (i NamespaceTypeArgs) ToNamespaceTypeOutput() NamespaceTypeOutput {
	return i.ToNamespaceTypeOutputWithContext(context.Background())
}

func (i NamespaceTypeArgs) ToNamespaceTypeOutputWithContext(ctx context.Context) NamespaceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceTypeOutput)
}

// Description of a Namespace resource.
type NamespaceTypeOutput struct{ *pulumi.OutputState }

func (NamespaceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceType)(nil)).Elem()
}

func (o NamespaceTypeOutput) ToNamespaceTypeOutput() NamespaceTypeOutput {
	return o
}

func (o NamespaceTypeOutput) ToNamespaceTypeOutputWithContext(ctx context.Context) NamespaceTypeOutput {
	return o
}

// Resource location
func (o NamespaceTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceType) string { return v.Location }).(pulumi.StringOutput)
}

// Resource name
func (o NamespaceTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceType) string { return v.Name }).(pulumi.StringOutput)
}

// Description of Relay Namespace
func (o NamespaceTypeOutput) Properties() RelayNamespacePropertiesResponseOutput {
	return o.ApplyT(func(v NamespaceType) RelayNamespacePropertiesResponse { return v.Properties }).(RelayNamespacePropertiesResponseOutput)
}

// Sku of the Namespace.
func (o NamespaceTypeOutput) Sku() SkuResponsePtrOutput {
	return o.ApplyT(func(v NamespaceType) *SkuResponse { return v.Sku }).(SkuResponsePtrOutput)
}

// Resource tags
func (o NamespaceTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v NamespaceType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o NamespaceTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceType) string { return v.Type }).(pulumi.StringOutput)
}

// Description of a Namespace AuthorizationRules.
type NamespaceAuthorizationRuleType struct {
	// Resource name
	Name string `pulumi:"name"`
	// Authorization Rule properties
	Properties AuthorizationRulePropertiesResponse `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// NamespaceAuthorizationRuleTypeInput is an input type that accepts NamespaceAuthorizationRuleTypeArgs and NamespaceAuthorizationRuleTypeOutput values.
// You can construct a concrete instance of `NamespaceAuthorizationRuleTypeInput` via:
//
//          NamespaceAuthorizationRuleTypeArgs{...}
type NamespaceAuthorizationRuleTypeInput interface {
	pulumi.Input

	ToNamespaceAuthorizationRuleTypeOutput() NamespaceAuthorizationRuleTypeOutput
	ToNamespaceAuthorizationRuleTypeOutputWithContext(context.Context) NamespaceAuthorizationRuleTypeOutput
}

// Description of a Namespace AuthorizationRules.
type NamespaceAuthorizationRuleTypeArgs struct {
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// Authorization Rule properties
	Properties AuthorizationRulePropertiesResponseInput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (NamespaceAuthorizationRuleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceAuthorizationRuleType)(nil)).Elem()
}

func (i NamespaceAuthorizationRuleTypeArgs) ToNamespaceAuthorizationRuleTypeOutput() NamespaceAuthorizationRuleTypeOutput {
	return i.ToNamespaceAuthorizationRuleTypeOutputWithContext(context.Background())
}

func (i NamespaceAuthorizationRuleTypeArgs) ToNamespaceAuthorizationRuleTypeOutputWithContext(ctx context.Context) NamespaceAuthorizationRuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceAuthorizationRuleTypeOutput)
}

// Description of a Namespace AuthorizationRules.
type NamespaceAuthorizationRuleTypeOutput struct{ *pulumi.OutputState }

func (NamespaceAuthorizationRuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceAuthorizationRuleType)(nil)).Elem()
}

func (o NamespaceAuthorizationRuleTypeOutput) ToNamespaceAuthorizationRuleTypeOutput() NamespaceAuthorizationRuleTypeOutput {
	return o
}

func (o NamespaceAuthorizationRuleTypeOutput) ToNamespaceAuthorizationRuleTypeOutputWithContext(ctx context.Context) NamespaceAuthorizationRuleTypeOutput {
	return o
}

// Resource name
func (o NamespaceAuthorizationRuleTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceAuthorizationRuleType) string { return v.Name }).(pulumi.StringOutput)
}

// Authorization Rule properties
func (o NamespaceAuthorizationRuleTypeOutput) Properties() AuthorizationRulePropertiesResponseOutput {
	return o.ApplyT(func(v NamespaceAuthorizationRuleType) AuthorizationRulePropertiesResponse { return v.Properties }).(AuthorizationRulePropertiesResponseOutput)
}

// Resource type
func (o NamespaceAuthorizationRuleTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceAuthorizationRuleType) string { return v.Type }).(pulumi.StringOutput)
}

// Properties of the Namespace.
type RelayNamespaceProperties struct {
}

// RelayNamespacePropertiesInput is an input type that accepts RelayNamespacePropertiesArgs and RelayNamespacePropertiesOutput values.
// You can construct a concrete instance of `RelayNamespacePropertiesInput` via:
//
//          RelayNamespacePropertiesArgs{...}
type RelayNamespacePropertiesInput interface {
	pulumi.Input

	ToRelayNamespacePropertiesOutput() RelayNamespacePropertiesOutput
	ToRelayNamespacePropertiesOutputWithContext(context.Context) RelayNamespacePropertiesOutput
}

// Properties of the Namespace.
type RelayNamespacePropertiesArgs struct {
}

func (RelayNamespacePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelayNamespaceProperties)(nil)).Elem()
}

func (i RelayNamespacePropertiesArgs) ToRelayNamespacePropertiesOutput() RelayNamespacePropertiesOutput {
	return i.ToRelayNamespacePropertiesOutputWithContext(context.Background())
}

func (i RelayNamespacePropertiesArgs) ToRelayNamespacePropertiesOutputWithContext(ctx context.Context) RelayNamespacePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelayNamespacePropertiesOutput)
}

func (i RelayNamespacePropertiesArgs) ToRelayNamespacePropertiesPtrOutput() RelayNamespacePropertiesPtrOutput {
	return i.ToRelayNamespacePropertiesPtrOutputWithContext(context.Background())
}

func (i RelayNamespacePropertiesArgs) ToRelayNamespacePropertiesPtrOutputWithContext(ctx context.Context) RelayNamespacePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelayNamespacePropertiesOutput).ToRelayNamespacePropertiesPtrOutputWithContext(ctx)
}

// RelayNamespacePropertiesPtrInput is an input type that accepts RelayNamespacePropertiesArgs, RelayNamespacePropertiesPtr and RelayNamespacePropertiesPtrOutput values.
// You can construct a concrete instance of `RelayNamespacePropertiesPtrInput` via:
//
//          RelayNamespacePropertiesArgs{...}
//
//  or:
//
//          nil
type RelayNamespacePropertiesPtrInput interface {
	pulumi.Input

	ToRelayNamespacePropertiesPtrOutput() RelayNamespacePropertiesPtrOutput
	ToRelayNamespacePropertiesPtrOutputWithContext(context.Context) RelayNamespacePropertiesPtrOutput
}

type relayNamespacePropertiesPtrType RelayNamespacePropertiesArgs

func RelayNamespacePropertiesPtr(v *RelayNamespacePropertiesArgs) RelayNamespacePropertiesPtrInput {
	return (*relayNamespacePropertiesPtrType)(v)
}

func (*relayNamespacePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RelayNamespaceProperties)(nil)).Elem()
}

func (i *relayNamespacePropertiesPtrType) ToRelayNamespacePropertiesPtrOutput() RelayNamespacePropertiesPtrOutput {
	return i.ToRelayNamespacePropertiesPtrOutputWithContext(context.Background())
}

func (i *relayNamespacePropertiesPtrType) ToRelayNamespacePropertiesPtrOutputWithContext(ctx context.Context) RelayNamespacePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelayNamespacePropertiesPtrOutput)
}

// Properties of the Namespace.
type RelayNamespacePropertiesOutput struct{ *pulumi.OutputState }

func (RelayNamespacePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelayNamespaceProperties)(nil)).Elem()
}

func (o RelayNamespacePropertiesOutput) ToRelayNamespacePropertiesOutput() RelayNamespacePropertiesOutput {
	return o
}

func (o RelayNamespacePropertiesOutput) ToRelayNamespacePropertiesOutputWithContext(ctx context.Context) RelayNamespacePropertiesOutput {
	return o
}

func (o RelayNamespacePropertiesOutput) ToRelayNamespacePropertiesPtrOutput() RelayNamespacePropertiesPtrOutput {
	return o.ToRelayNamespacePropertiesPtrOutputWithContext(context.Background())
}

func (o RelayNamespacePropertiesOutput) ToRelayNamespacePropertiesPtrOutputWithContext(ctx context.Context) RelayNamespacePropertiesPtrOutput {
	return o.ApplyT(func(v RelayNamespaceProperties) *RelayNamespaceProperties {
		return &v
	}).(RelayNamespacePropertiesPtrOutput)
}

type RelayNamespacePropertiesPtrOutput struct{ *pulumi.OutputState }

func (RelayNamespacePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RelayNamespaceProperties)(nil)).Elem()
}

func (o RelayNamespacePropertiesPtrOutput) ToRelayNamespacePropertiesPtrOutput() RelayNamespacePropertiesPtrOutput {
	return o
}

func (o RelayNamespacePropertiesPtrOutput) ToRelayNamespacePropertiesPtrOutputWithContext(ctx context.Context) RelayNamespacePropertiesPtrOutput {
	return o
}

func (o RelayNamespacePropertiesPtrOutput) Elem() RelayNamespacePropertiesOutput {
	return o.ApplyT(func(v *RelayNamespaceProperties) RelayNamespaceProperties { return *v }).(RelayNamespacePropertiesOutput)
}

// Properties of the Namespace.
type RelayNamespacePropertiesResponse struct {
	// The time the namespace was created.
	CreatedAt string `pulumi:"createdAt"`
	// Identifier for Azure Insights metrics
	MetricId string `pulumi:"metricId"`
	// Provisioning state of the namespace.
	ProvisioningState string `pulumi:"provisioningState"`
	// Endpoint you can use to perform Service Bus operations.
	ServiceBusEndpoint string `pulumi:"serviceBusEndpoint"`
	// The time the namespace was updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

// RelayNamespacePropertiesResponseInput is an input type that accepts RelayNamespacePropertiesResponseArgs and RelayNamespacePropertiesResponseOutput values.
// You can construct a concrete instance of `RelayNamespacePropertiesResponseInput` via:
//
//          RelayNamespacePropertiesResponseArgs{...}
type RelayNamespacePropertiesResponseInput interface {
	pulumi.Input

	ToRelayNamespacePropertiesResponseOutput() RelayNamespacePropertiesResponseOutput
	ToRelayNamespacePropertiesResponseOutputWithContext(context.Context) RelayNamespacePropertiesResponseOutput
}

// Properties of the Namespace.
type RelayNamespacePropertiesResponseArgs struct {
	// The time the namespace was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Identifier for Azure Insights metrics
	MetricId pulumi.StringInput `pulumi:"metricId"`
	// Provisioning state of the namespace.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// Endpoint you can use to perform Service Bus operations.
	ServiceBusEndpoint pulumi.StringInput `pulumi:"serviceBusEndpoint"`
	// The time the namespace was updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (RelayNamespacePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelayNamespacePropertiesResponse)(nil)).Elem()
}

func (i RelayNamespacePropertiesResponseArgs) ToRelayNamespacePropertiesResponseOutput() RelayNamespacePropertiesResponseOutput {
	return i.ToRelayNamespacePropertiesResponseOutputWithContext(context.Background())
}

func (i RelayNamespacePropertiesResponseArgs) ToRelayNamespacePropertiesResponseOutputWithContext(ctx context.Context) RelayNamespacePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelayNamespacePropertiesResponseOutput)
}

func (i RelayNamespacePropertiesResponseArgs) ToRelayNamespacePropertiesResponsePtrOutput() RelayNamespacePropertiesResponsePtrOutput {
	return i.ToRelayNamespacePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i RelayNamespacePropertiesResponseArgs) ToRelayNamespacePropertiesResponsePtrOutputWithContext(ctx context.Context) RelayNamespacePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelayNamespacePropertiesResponseOutput).ToRelayNamespacePropertiesResponsePtrOutputWithContext(ctx)
}

// RelayNamespacePropertiesResponsePtrInput is an input type that accepts RelayNamespacePropertiesResponseArgs, RelayNamespacePropertiesResponsePtr and RelayNamespacePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `RelayNamespacePropertiesResponsePtrInput` via:
//
//          RelayNamespacePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type RelayNamespacePropertiesResponsePtrInput interface {
	pulumi.Input

	ToRelayNamespacePropertiesResponsePtrOutput() RelayNamespacePropertiesResponsePtrOutput
	ToRelayNamespacePropertiesResponsePtrOutputWithContext(context.Context) RelayNamespacePropertiesResponsePtrOutput
}

type relayNamespacePropertiesResponsePtrType RelayNamespacePropertiesResponseArgs

func RelayNamespacePropertiesResponsePtr(v *RelayNamespacePropertiesResponseArgs) RelayNamespacePropertiesResponsePtrInput {
	return (*relayNamespacePropertiesResponsePtrType)(v)
}

func (*relayNamespacePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RelayNamespacePropertiesResponse)(nil)).Elem()
}

func (i *relayNamespacePropertiesResponsePtrType) ToRelayNamespacePropertiesResponsePtrOutput() RelayNamespacePropertiesResponsePtrOutput {
	return i.ToRelayNamespacePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *relayNamespacePropertiesResponsePtrType) ToRelayNamespacePropertiesResponsePtrOutputWithContext(ctx context.Context) RelayNamespacePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelayNamespacePropertiesResponsePtrOutput)
}

// Properties of the Namespace.
type RelayNamespacePropertiesResponseOutput struct{ *pulumi.OutputState }

func (RelayNamespacePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelayNamespacePropertiesResponse)(nil)).Elem()
}

func (o RelayNamespacePropertiesResponseOutput) ToRelayNamespacePropertiesResponseOutput() RelayNamespacePropertiesResponseOutput {
	return o
}

func (o RelayNamespacePropertiesResponseOutput) ToRelayNamespacePropertiesResponseOutputWithContext(ctx context.Context) RelayNamespacePropertiesResponseOutput {
	return o
}

func (o RelayNamespacePropertiesResponseOutput) ToRelayNamespacePropertiesResponsePtrOutput() RelayNamespacePropertiesResponsePtrOutput {
	return o.ToRelayNamespacePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o RelayNamespacePropertiesResponseOutput) ToRelayNamespacePropertiesResponsePtrOutputWithContext(ctx context.Context) RelayNamespacePropertiesResponsePtrOutput {
	return o.ApplyT(func(v RelayNamespacePropertiesResponse) *RelayNamespacePropertiesResponse {
		return &v
	}).(RelayNamespacePropertiesResponsePtrOutput)
}

// The time the namespace was created.
func (o RelayNamespacePropertiesResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v RelayNamespacePropertiesResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Identifier for Azure Insights metrics
func (o RelayNamespacePropertiesResponseOutput) MetricId() pulumi.StringOutput {
	return o.ApplyT(func(v RelayNamespacePropertiesResponse) string { return v.MetricId }).(pulumi.StringOutput)
}

// Provisioning state of the namespace.
func (o RelayNamespacePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v RelayNamespacePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Endpoint you can use to perform Service Bus operations.
func (o RelayNamespacePropertiesResponseOutput) ServiceBusEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v RelayNamespacePropertiesResponse) string { return v.ServiceBusEndpoint }).(pulumi.StringOutput)
}

// The time the namespace was updated.
func (o RelayNamespacePropertiesResponseOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v RelayNamespacePropertiesResponse) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type RelayNamespacePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (RelayNamespacePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RelayNamespacePropertiesResponse)(nil)).Elem()
}

func (o RelayNamespacePropertiesResponsePtrOutput) ToRelayNamespacePropertiesResponsePtrOutput() RelayNamespacePropertiesResponsePtrOutput {
	return o
}

func (o RelayNamespacePropertiesResponsePtrOutput) ToRelayNamespacePropertiesResponsePtrOutputWithContext(ctx context.Context) RelayNamespacePropertiesResponsePtrOutput {
	return o
}

func (o RelayNamespacePropertiesResponsePtrOutput) Elem() RelayNamespacePropertiesResponseOutput {
	return o.ApplyT(func(v *RelayNamespacePropertiesResponse) RelayNamespacePropertiesResponse { return *v }).(RelayNamespacePropertiesResponseOutput)
}

// The time the namespace was created.
func (o RelayNamespacePropertiesResponsePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelayNamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// Identifier for Azure Insights metrics
func (o RelayNamespacePropertiesResponsePtrOutput) MetricId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelayNamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MetricId
	}).(pulumi.StringPtrOutput)
}

// Provisioning state of the namespace.
func (o RelayNamespacePropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelayNamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Endpoint you can use to perform Service Bus operations.
func (o RelayNamespacePropertiesResponsePtrOutput) ServiceBusEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelayNamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceBusEndpoint
	}).(pulumi.StringPtrOutput)
}

// The time the namespace was updated.
func (o RelayNamespacePropertiesResponsePtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelayNamespacePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

// Sku of the Namespace.
type Sku struct {
	// Name of this Sku
	Name string `pulumi:"name"`
	// The tier of this particular SKU
	Tier string `pulumi:"tier"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//          SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// Sku of the Namespace.
type SkuArgs struct {
	// Name of this Sku
	Name pulumi.StringInput `pulumi:"name"`
	// The tier of this particular SKU
	Tier pulumi.StringInput `pulumi:"tier"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//          SkuArgs{...}
//
//  or:
//
//          nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// Sku of the Namespace.
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyT(func(v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// Name of this Sku
func (o SkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Name }).(pulumi.StringOutput)
}

// The tier of this particular SKU
func (o SkuOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Tier }).(pulumi.StringOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku { return *v }).(SkuOutput)
}

// Name of this Sku
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The tier of this particular SKU
func (o SkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Tier
	}).(pulumi.StringPtrOutput)
}

// Sku of the Namespace.
type SkuResponse struct {
	// Name of this Sku
	Name string `pulumi:"name"`
	// The tier of this particular SKU
	Tier string `pulumi:"tier"`
}

// SkuResponseInput is an input type that accepts SkuResponseArgs and SkuResponseOutput values.
// You can construct a concrete instance of `SkuResponseInput` via:
//
//          SkuResponseArgs{...}
type SkuResponseInput interface {
	pulumi.Input

	ToSkuResponseOutput() SkuResponseOutput
	ToSkuResponseOutputWithContext(context.Context) SkuResponseOutput
}

// Sku of the Namespace.
type SkuResponseArgs struct {
	// Name of this Sku
	Name pulumi.StringInput `pulumi:"name"`
	// The tier of this particular SKU
	Tier pulumi.StringInput `pulumi:"tier"`
}

func (SkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (i SkuResponseArgs) ToSkuResponseOutput() SkuResponseOutput {
	return i.ToSkuResponseOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput)
}

func (i SkuResponseArgs) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput).ToSkuResponsePtrOutputWithContext(ctx)
}

// SkuResponsePtrInput is an input type that accepts SkuResponseArgs, SkuResponsePtr and SkuResponsePtrOutput values.
// You can construct a concrete instance of `SkuResponsePtrInput` via:
//
//          SkuResponseArgs{...}
//
//  or:
//
//          nil
type SkuResponsePtrInput interface {
	pulumi.Input

	ToSkuResponsePtrOutput() SkuResponsePtrOutput
	ToSkuResponsePtrOutputWithContext(context.Context) SkuResponsePtrOutput
}

type skuResponsePtrType SkuResponseArgs

func SkuResponsePtr(v *SkuResponseArgs) SkuResponsePtrInput {
	return (*skuResponsePtrType)(v)
}

func (*skuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponsePtrOutput)
}

// Sku of the Namespace.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (o SkuResponseOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o.ApplyT(func(v SkuResponse) *SkuResponse {
		return &v
	}).(SkuResponsePtrOutput)
}

// Name of this Sku
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The tier of this particular SKU
func (o SkuResponseOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Tier }).(pulumi.StringOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse { return *v }).(SkuResponseOutput)
}

// Name of this Sku
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The tier of this particular SKU
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Tier
	}).(pulumi.StringPtrOutput)
}

// Description of WcfRelays Resource.
type WCFRelayType struct {
	// Resource name
	Name string `pulumi:"name"`
	// Properties of WcfRelay
	Properties WcfRelayPropertiesResponse `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// WCFRelayTypeInput is an input type that accepts WCFRelayTypeArgs and WCFRelayTypeOutput values.
// You can construct a concrete instance of `WCFRelayTypeInput` via:
//
//          WCFRelayTypeArgs{...}
type WCFRelayTypeInput interface {
	pulumi.Input

	ToWCFRelayTypeOutput() WCFRelayTypeOutput
	ToWCFRelayTypeOutputWithContext(context.Context) WCFRelayTypeOutput
}

// Description of WcfRelays Resource.
type WCFRelayTypeArgs struct {
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// Properties of WcfRelay
	Properties WcfRelayPropertiesResponseInput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (WCFRelayTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WCFRelayType)(nil)).Elem()
}

func (i WCFRelayTypeArgs) ToWCFRelayTypeOutput() WCFRelayTypeOutput {
	return i.ToWCFRelayTypeOutputWithContext(context.Background())
}

func (i WCFRelayTypeArgs) ToWCFRelayTypeOutputWithContext(ctx context.Context) WCFRelayTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WCFRelayTypeOutput)
}

// Description of WcfRelays Resource.
type WCFRelayTypeOutput struct{ *pulumi.OutputState }

func (WCFRelayTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WCFRelayType)(nil)).Elem()
}

func (o WCFRelayTypeOutput) ToWCFRelayTypeOutput() WCFRelayTypeOutput {
	return o
}

func (o WCFRelayTypeOutput) ToWCFRelayTypeOutputWithContext(ctx context.Context) WCFRelayTypeOutput {
	return o
}

// Resource name
func (o WCFRelayTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WCFRelayType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of WcfRelay
func (o WCFRelayTypeOutput) Properties() WcfRelayPropertiesResponseOutput {
	return o.ApplyT(func(v WCFRelayType) WcfRelayPropertiesResponse { return v.Properties }).(WcfRelayPropertiesResponseOutput)
}

// Resource type
func (o WCFRelayTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WCFRelayType) string { return v.Type }).(pulumi.StringOutput)
}

// Description of a Namespace AuthorizationRules.
type WCFRelayAuthorizationRuleType struct {
	// Resource name
	Name string `pulumi:"name"`
	// Authorization Rule properties
	Properties AuthorizationRulePropertiesResponse `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// WCFRelayAuthorizationRuleTypeInput is an input type that accepts WCFRelayAuthorizationRuleTypeArgs and WCFRelayAuthorizationRuleTypeOutput values.
// You can construct a concrete instance of `WCFRelayAuthorizationRuleTypeInput` via:
//
//          WCFRelayAuthorizationRuleTypeArgs{...}
type WCFRelayAuthorizationRuleTypeInput interface {
	pulumi.Input

	ToWCFRelayAuthorizationRuleTypeOutput() WCFRelayAuthorizationRuleTypeOutput
	ToWCFRelayAuthorizationRuleTypeOutputWithContext(context.Context) WCFRelayAuthorizationRuleTypeOutput
}

// Description of a Namespace AuthorizationRules.
type WCFRelayAuthorizationRuleTypeArgs struct {
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// Authorization Rule properties
	Properties AuthorizationRulePropertiesResponseInput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (WCFRelayAuthorizationRuleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WCFRelayAuthorizationRuleType)(nil)).Elem()
}

func (i WCFRelayAuthorizationRuleTypeArgs) ToWCFRelayAuthorizationRuleTypeOutput() WCFRelayAuthorizationRuleTypeOutput {
	return i.ToWCFRelayAuthorizationRuleTypeOutputWithContext(context.Background())
}

func (i WCFRelayAuthorizationRuleTypeArgs) ToWCFRelayAuthorizationRuleTypeOutputWithContext(ctx context.Context) WCFRelayAuthorizationRuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WCFRelayAuthorizationRuleTypeOutput)
}

// Description of a Namespace AuthorizationRules.
type WCFRelayAuthorizationRuleTypeOutput struct{ *pulumi.OutputState }

func (WCFRelayAuthorizationRuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WCFRelayAuthorizationRuleType)(nil)).Elem()
}

func (o WCFRelayAuthorizationRuleTypeOutput) ToWCFRelayAuthorizationRuleTypeOutput() WCFRelayAuthorizationRuleTypeOutput {
	return o
}

func (o WCFRelayAuthorizationRuleTypeOutput) ToWCFRelayAuthorizationRuleTypeOutputWithContext(ctx context.Context) WCFRelayAuthorizationRuleTypeOutput {
	return o
}

// Resource name
func (o WCFRelayAuthorizationRuleTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WCFRelayAuthorizationRuleType) string { return v.Name }).(pulumi.StringOutput)
}

// Authorization Rule properties
func (o WCFRelayAuthorizationRuleTypeOutput) Properties() AuthorizationRulePropertiesResponseOutput {
	return o.ApplyT(func(v WCFRelayAuthorizationRuleType) AuthorizationRulePropertiesResponse { return v.Properties }).(AuthorizationRulePropertiesResponseOutput)
}

// Resource type
func (o WCFRelayAuthorizationRuleTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WCFRelayAuthorizationRuleType) string { return v.Type }).(pulumi.StringOutput)
}

// Properties of the WcfRelay Properties.
type WcfRelayProperties struct {
	// WCFRelay Type.
	RelayType *string `pulumi:"relayType"`
	// true if client authorization is needed for this relay; otherwise, false.
	RequiresClientAuthorization *bool `pulumi:"requiresClientAuthorization"`
	// true if transport security is needed for this relay; otherwise, false.
	RequiresTransportSecurity *bool `pulumi:"requiresTransportSecurity"`
	// usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
	UserMetadata *string `pulumi:"userMetadata"`
}

// WcfRelayPropertiesInput is an input type that accepts WcfRelayPropertiesArgs and WcfRelayPropertiesOutput values.
// You can construct a concrete instance of `WcfRelayPropertiesInput` via:
//
//          WcfRelayPropertiesArgs{...}
type WcfRelayPropertiesInput interface {
	pulumi.Input

	ToWcfRelayPropertiesOutput() WcfRelayPropertiesOutput
	ToWcfRelayPropertiesOutputWithContext(context.Context) WcfRelayPropertiesOutput
}

// Properties of the WcfRelay Properties.
type WcfRelayPropertiesArgs struct {
	// WCFRelay Type.
	RelayType pulumi.StringPtrInput `pulumi:"relayType"`
	// true if client authorization is needed for this relay; otherwise, false.
	RequiresClientAuthorization pulumi.BoolPtrInput `pulumi:"requiresClientAuthorization"`
	// true if transport security is needed for this relay; otherwise, false.
	RequiresTransportSecurity pulumi.BoolPtrInput `pulumi:"requiresTransportSecurity"`
	// usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
	UserMetadata pulumi.StringPtrInput `pulumi:"userMetadata"`
}

func (WcfRelayPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WcfRelayProperties)(nil)).Elem()
}

func (i WcfRelayPropertiesArgs) ToWcfRelayPropertiesOutput() WcfRelayPropertiesOutput {
	return i.ToWcfRelayPropertiesOutputWithContext(context.Background())
}

func (i WcfRelayPropertiesArgs) ToWcfRelayPropertiesOutputWithContext(ctx context.Context) WcfRelayPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WcfRelayPropertiesOutput)
}

func (i WcfRelayPropertiesArgs) ToWcfRelayPropertiesPtrOutput() WcfRelayPropertiesPtrOutput {
	return i.ToWcfRelayPropertiesPtrOutputWithContext(context.Background())
}

func (i WcfRelayPropertiesArgs) ToWcfRelayPropertiesPtrOutputWithContext(ctx context.Context) WcfRelayPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WcfRelayPropertiesOutput).ToWcfRelayPropertiesPtrOutputWithContext(ctx)
}

// WcfRelayPropertiesPtrInput is an input type that accepts WcfRelayPropertiesArgs, WcfRelayPropertiesPtr and WcfRelayPropertiesPtrOutput values.
// You can construct a concrete instance of `WcfRelayPropertiesPtrInput` via:
//
//          WcfRelayPropertiesArgs{...}
//
//  or:
//
//          nil
type WcfRelayPropertiesPtrInput interface {
	pulumi.Input

	ToWcfRelayPropertiesPtrOutput() WcfRelayPropertiesPtrOutput
	ToWcfRelayPropertiesPtrOutputWithContext(context.Context) WcfRelayPropertiesPtrOutput
}

type wcfRelayPropertiesPtrType WcfRelayPropertiesArgs

func WcfRelayPropertiesPtr(v *WcfRelayPropertiesArgs) WcfRelayPropertiesPtrInput {
	return (*wcfRelayPropertiesPtrType)(v)
}

func (*wcfRelayPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WcfRelayProperties)(nil)).Elem()
}

func (i *wcfRelayPropertiesPtrType) ToWcfRelayPropertiesPtrOutput() WcfRelayPropertiesPtrOutput {
	return i.ToWcfRelayPropertiesPtrOutputWithContext(context.Background())
}

func (i *wcfRelayPropertiesPtrType) ToWcfRelayPropertiesPtrOutputWithContext(ctx context.Context) WcfRelayPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WcfRelayPropertiesPtrOutput)
}

// Properties of the WcfRelay Properties.
type WcfRelayPropertiesOutput struct{ *pulumi.OutputState }

func (WcfRelayPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WcfRelayProperties)(nil)).Elem()
}

func (o WcfRelayPropertiesOutput) ToWcfRelayPropertiesOutput() WcfRelayPropertiesOutput {
	return o
}

func (o WcfRelayPropertiesOutput) ToWcfRelayPropertiesOutputWithContext(ctx context.Context) WcfRelayPropertiesOutput {
	return o
}

func (o WcfRelayPropertiesOutput) ToWcfRelayPropertiesPtrOutput() WcfRelayPropertiesPtrOutput {
	return o.ToWcfRelayPropertiesPtrOutputWithContext(context.Background())
}

func (o WcfRelayPropertiesOutput) ToWcfRelayPropertiesPtrOutputWithContext(ctx context.Context) WcfRelayPropertiesPtrOutput {
	return o.ApplyT(func(v WcfRelayProperties) *WcfRelayProperties {
		return &v
	}).(WcfRelayPropertiesPtrOutput)
}

// WCFRelay Type.
func (o WcfRelayPropertiesOutput) RelayType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WcfRelayProperties) *string { return v.RelayType }).(pulumi.StringPtrOutput)
}

// true if client authorization is needed for this relay; otherwise, false.
func (o WcfRelayPropertiesOutput) RequiresClientAuthorization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WcfRelayProperties) *bool { return v.RequiresClientAuthorization }).(pulumi.BoolPtrOutput)
}

// true if transport security is needed for this relay; otherwise, false.
func (o WcfRelayPropertiesOutput) RequiresTransportSecurity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WcfRelayProperties) *bool { return v.RequiresTransportSecurity }).(pulumi.BoolPtrOutput)
}

// usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
func (o WcfRelayPropertiesOutput) UserMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WcfRelayProperties) *string { return v.UserMetadata }).(pulumi.StringPtrOutput)
}

type WcfRelayPropertiesPtrOutput struct{ *pulumi.OutputState }

func (WcfRelayPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WcfRelayProperties)(nil)).Elem()
}

func (o WcfRelayPropertiesPtrOutput) ToWcfRelayPropertiesPtrOutput() WcfRelayPropertiesPtrOutput {
	return o
}

func (o WcfRelayPropertiesPtrOutput) ToWcfRelayPropertiesPtrOutputWithContext(ctx context.Context) WcfRelayPropertiesPtrOutput {
	return o
}

func (o WcfRelayPropertiesPtrOutput) Elem() WcfRelayPropertiesOutput {
	return o.ApplyT(func(v *WcfRelayProperties) WcfRelayProperties { return *v }).(WcfRelayPropertiesOutput)
}

// WCFRelay Type.
func (o WcfRelayPropertiesPtrOutput) RelayType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WcfRelayProperties) *string {
		if v == nil {
			return nil
		}
		return v.RelayType
	}).(pulumi.StringPtrOutput)
}

// true if client authorization is needed for this relay; otherwise, false.
func (o WcfRelayPropertiesPtrOutput) RequiresClientAuthorization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WcfRelayProperties) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresClientAuthorization
	}).(pulumi.BoolPtrOutput)
}

// true if transport security is needed for this relay; otherwise, false.
func (o WcfRelayPropertiesPtrOutput) RequiresTransportSecurity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WcfRelayProperties) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresTransportSecurity
	}).(pulumi.BoolPtrOutput)
}

// usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
func (o WcfRelayPropertiesPtrOutput) UserMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WcfRelayProperties) *string {
		if v == nil {
			return nil
		}
		return v.UserMetadata
	}).(pulumi.StringPtrOutput)
}

// Properties of the WcfRelay Properties.
type WcfRelayPropertiesResponse struct {
	// The time the WCFRelay was created.
	CreatedAt string `pulumi:"createdAt"`
	// true if the relay is dynamic; otherwise, false.
	IsDynamic bool `pulumi:"isDynamic"`
	// The number of listeners for this relay. min : 1 and max:25 supported
	ListenerCount int `pulumi:"listenerCount"`
	// WCFRelay Type.
	RelayType *string `pulumi:"relayType"`
	// true if client authorization is needed for this relay; otherwise, false.
	RequiresClientAuthorization *bool `pulumi:"requiresClientAuthorization"`
	// true if transport security is needed for this relay; otherwise, false.
	RequiresTransportSecurity *bool `pulumi:"requiresTransportSecurity"`
	// The time the namespace was updated.
	UpdatedAt string `pulumi:"updatedAt"`
	// usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
	UserMetadata *string `pulumi:"userMetadata"`
}

// WcfRelayPropertiesResponseInput is an input type that accepts WcfRelayPropertiesResponseArgs and WcfRelayPropertiesResponseOutput values.
// You can construct a concrete instance of `WcfRelayPropertiesResponseInput` via:
//
//          WcfRelayPropertiesResponseArgs{...}
type WcfRelayPropertiesResponseInput interface {
	pulumi.Input

	ToWcfRelayPropertiesResponseOutput() WcfRelayPropertiesResponseOutput
	ToWcfRelayPropertiesResponseOutputWithContext(context.Context) WcfRelayPropertiesResponseOutput
}

// Properties of the WcfRelay Properties.
type WcfRelayPropertiesResponseArgs struct {
	// The time the WCFRelay was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// true if the relay is dynamic; otherwise, false.
	IsDynamic pulumi.BoolInput `pulumi:"isDynamic"`
	// The number of listeners for this relay. min : 1 and max:25 supported
	ListenerCount pulumi.IntInput `pulumi:"listenerCount"`
	// WCFRelay Type.
	RelayType pulumi.StringPtrInput `pulumi:"relayType"`
	// true if client authorization is needed for this relay; otherwise, false.
	RequiresClientAuthorization pulumi.BoolPtrInput `pulumi:"requiresClientAuthorization"`
	// true if transport security is needed for this relay; otherwise, false.
	RequiresTransportSecurity pulumi.BoolPtrInput `pulumi:"requiresTransportSecurity"`
	// The time the namespace was updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
	UserMetadata pulumi.StringPtrInput `pulumi:"userMetadata"`
}

func (WcfRelayPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WcfRelayPropertiesResponse)(nil)).Elem()
}

func (i WcfRelayPropertiesResponseArgs) ToWcfRelayPropertiesResponseOutput() WcfRelayPropertiesResponseOutput {
	return i.ToWcfRelayPropertiesResponseOutputWithContext(context.Background())
}

func (i WcfRelayPropertiesResponseArgs) ToWcfRelayPropertiesResponseOutputWithContext(ctx context.Context) WcfRelayPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WcfRelayPropertiesResponseOutput)
}

func (i WcfRelayPropertiesResponseArgs) ToWcfRelayPropertiesResponsePtrOutput() WcfRelayPropertiesResponsePtrOutput {
	return i.ToWcfRelayPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i WcfRelayPropertiesResponseArgs) ToWcfRelayPropertiesResponsePtrOutputWithContext(ctx context.Context) WcfRelayPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WcfRelayPropertiesResponseOutput).ToWcfRelayPropertiesResponsePtrOutputWithContext(ctx)
}

// WcfRelayPropertiesResponsePtrInput is an input type that accepts WcfRelayPropertiesResponseArgs, WcfRelayPropertiesResponsePtr and WcfRelayPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `WcfRelayPropertiesResponsePtrInput` via:
//
//          WcfRelayPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type WcfRelayPropertiesResponsePtrInput interface {
	pulumi.Input

	ToWcfRelayPropertiesResponsePtrOutput() WcfRelayPropertiesResponsePtrOutput
	ToWcfRelayPropertiesResponsePtrOutputWithContext(context.Context) WcfRelayPropertiesResponsePtrOutput
}

type wcfRelayPropertiesResponsePtrType WcfRelayPropertiesResponseArgs

func WcfRelayPropertiesResponsePtr(v *WcfRelayPropertiesResponseArgs) WcfRelayPropertiesResponsePtrInput {
	return (*wcfRelayPropertiesResponsePtrType)(v)
}

func (*wcfRelayPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WcfRelayPropertiesResponse)(nil)).Elem()
}

func (i *wcfRelayPropertiesResponsePtrType) ToWcfRelayPropertiesResponsePtrOutput() WcfRelayPropertiesResponsePtrOutput {
	return i.ToWcfRelayPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *wcfRelayPropertiesResponsePtrType) ToWcfRelayPropertiesResponsePtrOutputWithContext(ctx context.Context) WcfRelayPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WcfRelayPropertiesResponsePtrOutput)
}

// Properties of the WcfRelay Properties.
type WcfRelayPropertiesResponseOutput struct{ *pulumi.OutputState }

func (WcfRelayPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WcfRelayPropertiesResponse)(nil)).Elem()
}

func (o WcfRelayPropertiesResponseOutput) ToWcfRelayPropertiesResponseOutput() WcfRelayPropertiesResponseOutput {
	return o
}

func (o WcfRelayPropertiesResponseOutput) ToWcfRelayPropertiesResponseOutputWithContext(ctx context.Context) WcfRelayPropertiesResponseOutput {
	return o
}

func (o WcfRelayPropertiesResponseOutput) ToWcfRelayPropertiesResponsePtrOutput() WcfRelayPropertiesResponsePtrOutput {
	return o.ToWcfRelayPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o WcfRelayPropertiesResponseOutput) ToWcfRelayPropertiesResponsePtrOutputWithContext(ctx context.Context) WcfRelayPropertiesResponsePtrOutput {
	return o.ApplyT(func(v WcfRelayPropertiesResponse) *WcfRelayPropertiesResponse {
		return &v
	}).(WcfRelayPropertiesResponsePtrOutput)
}

// The time the WCFRelay was created.
func (o WcfRelayPropertiesResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v WcfRelayPropertiesResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// true if the relay is dynamic; otherwise, false.
func (o WcfRelayPropertiesResponseOutput) IsDynamic() pulumi.BoolOutput {
	return o.ApplyT(func(v WcfRelayPropertiesResponse) bool { return v.IsDynamic }).(pulumi.BoolOutput)
}

// The number of listeners for this relay. min : 1 and max:25 supported
func (o WcfRelayPropertiesResponseOutput) ListenerCount() pulumi.IntOutput {
	return o.ApplyT(func(v WcfRelayPropertiesResponse) int { return v.ListenerCount }).(pulumi.IntOutput)
}

// WCFRelay Type.
func (o WcfRelayPropertiesResponseOutput) RelayType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WcfRelayPropertiesResponse) *string { return v.RelayType }).(pulumi.StringPtrOutput)
}

// true if client authorization is needed for this relay; otherwise, false.
func (o WcfRelayPropertiesResponseOutput) RequiresClientAuthorization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WcfRelayPropertiesResponse) *bool { return v.RequiresClientAuthorization }).(pulumi.BoolPtrOutput)
}

// true if transport security is needed for this relay; otherwise, false.
func (o WcfRelayPropertiesResponseOutput) RequiresTransportSecurity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WcfRelayPropertiesResponse) *bool { return v.RequiresTransportSecurity }).(pulumi.BoolPtrOutput)
}

// The time the namespace was updated.
func (o WcfRelayPropertiesResponseOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v WcfRelayPropertiesResponse) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
func (o WcfRelayPropertiesResponseOutput) UserMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WcfRelayPropertiesResponse) *string { return v.UserMetadata }).(pulumi.StringPtrOutput)
}

type WcfRelayPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (WcfRelayPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WcfRelayPropertiesResponse)(nil)).Elem()
}

func (o WcfRelayPropertiesResponsePtrOutput) ToWcfRelayPropertiesResponsePtrOutput() WcfRelayPropertiesResponsePtrOutput {
	return o
}

func (o WcfRelayPropertiesResponsePtrOutput) ToWcfRelayPropertiesResponsePtrOutputWithContext(ctx context.Context) WcfRelayPropertiesResponsePtrOutput {
	return o
}

func (o WcfRelayPropertiesResponsePtrOutput) Elem() WcfRelayPropertiesResponseOutput {
	return o.ApplyT(func(v *WcfRelayPropertiesResponse) WcfRelayPropertiesResponse { return *v }).(WcfRelayPropertiesResponseOutput)
}

// The time the WCFRelay was created.
func (o WcfRelayPropertiesResponsePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WcfRelayPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// true if the relay is dynamic; otherwise, false.
func (o WcfRelayPropertiesResponsePtrOutput) IsDynamic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WcfRelayPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IsDynamic
	}).(pulumi.BoolPtrOutput)
}

// The number of listeners for this relay. min : 1 and max:25 supported
func (o WcfRelayPropertiesResponsePtrOutput) ListenerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WcfRelayPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ListenerCount
	}).(pulumi.IntPtrOutput)
}

// WCFRelay Type.
func (o WcfRelayPropertiesResponsePtrOutput) RelayType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WcfRelayPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.RelayType
	}).(pulumi.StringPtrOutput)
}

// true if client authorization is needed for this relay; otherwise, false.
func (o WcfRelayPropertiesResponsePtrOutput) RequiresClientAuthorization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WcfRelayPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresClientAuthorization
	}).(pulumi.BoolPtrOutput)
}

// true if transport security is needed for this relay; otherwise, false.
func (o WcfRelayPropertiesResponsePtrOutput) RequiresTransportSecurity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WcfRelayPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresTransportSecurity
	}).(pulumi.BoolPtrOutput)
}

// The time the namespace was updated.
func (o WcfRelayPropertiesResponsePtrOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WcfRelayPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpdatedAt
	}).(pulumi.StringPtrOutput)
}

// usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
func (o WcfRelayPropertiesResponsePtrOutput) UserMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WcfRelayPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserMetadata
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AuthorizationRulePropertiesOutput{})
	pulumi.RegisterOutputType(AuthorizationRulePropertiesPtrOutput{})
	pulumi.RegisterOutputType(AuthorizationRulePropertiesResponseOutput{})
	pulumi.RegisterOutputType(AuthorizationRulePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(HybridConnectionTypeOutput{})
	pulumi.RegisterOutputType(HybridConnectionAuthorizationRuleTypeOutput{})
	pulumi.RegisterOutputType(HybridConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(HybridConnectionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(HybridConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(HybridConnectionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(NamespaceTypeOutput{})
	pulumi.RegisterOutputType(NamespaceAuthorizationRuleTypeOutput{})
	pulumi.RegisterOutputType(RelayNamespacePropertiesOutput{})
	pulumi.RegisterOutputType(RelayNamespacePropertiesPtrOutput{})
	pulumi.RegisterOutputType(RelayNamespacePropertiesResponseOutput{})
	pulumi.RegisterOutputType(RelayNamespacePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
	pulumi.RegisterOutputType(WCFRelayTypeOutput{})
	pulumi.RegisterOutputType(WCFRelayAuthorizationRuleTypeOutput{})
	pulumi.RegisterOutputType(WcfRelayPropertiesOutput{})
	pulumi.RegisterOutputType(WcfRelayPropertiesPtrOutput{})
	pulumi.RegisterOutputType(WcfRelayPropertiesResponseOutput{})
	pulumi.RegisterOutputType(WcfRelayPropertiesResponsePtrOutput{})
}
