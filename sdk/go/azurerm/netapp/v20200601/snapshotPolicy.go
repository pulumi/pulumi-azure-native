// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200601

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Snapshot policy information
type SnapshotPolicy struct {
	pulumi.CustomResourceState

	// Schedule for daily snapshots
	DailySchedule pulumi.MapOutput `pulumi:"dailySchedule"`
	// The property to decide policy is enabled or not
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Schedule for hourly snapshots
	HourlySchedule pulumi.MapOutput `pulumi:"hourlySchedule"`
	// Resource location
	Location pulumi.StringOutput `pulumi:"location"`
	// Schedule for monthly snapshots
	MonthlySchedule pulumi.MapOutput `pulumi:"monthlySchedule"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
	// Schedule for weekly snapshots
	WeeklySchedule pulumi.MapOutput `pulumi:"weeklySchedule"`
}

// NewSnapshotPolicy registers a new resource with the given unique name, arguments, and options.
func NewSnapshotPolicy(ctx *pulumi.Context,
	name string, args *SnapshotPolicyArgs, opts ...pulumi.ResourceOption) (*SnapshotPolicy, error) {
	if args == nil || args.AccountName == nil {
		return nil, errors.New("missing required argument 'AccountName'")
	}
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.SnapshotPolicyName == nil {
		return nil, errors.New("missing required argument 'SnapshotPolicyName'")
	}
	if args == nil {
		args = &SnapshotPolicyArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azurerm:netapp/latest:snapshotPolicy"),
		},
		{
			Type: pulumi.String("azurerm:netapp/preview:snapshotPolicy"),
		},
	})
	opts = append(opts, aliases)
	var resource SnapshotPolicy
	err := ctx.RegisterResource("azurerm:netapp/v20200601:snapshotPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshotPolicy gets an existing SnapshotPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshotPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotPolicyState, opts ...pulumi.ResourceOption) (*SnapshotPolicy, error) {
	var resource SnapshotPolicy
	err := ctx.ReadResource("azurerm:netapp/v20200601:snapshotPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnapshotPolicy resources.
type snapshotPolicyState struct {
	// Schedule for daily snapshots
	DailySchedule map[string]interface{} `pulumi:"dailySchedule"`
	// The property to decide policy is enabled or not
	Enabled *bool `pulumi:"enabled"`
	// Schedule for hourly snapshots
	HourlySchedule map[string]interface{} `pulumi:"hourlySchedule"`
	// Resource location
	Location *string `pulumi:"location"`
	// Schedule for monthly snapshots
	MonthlySchedule map[string]interface{} `pulumi:"monthlySchedule"`
	// Resource name
	Name *string `pulumi:"name"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type *string `pulumi:"type"`
	// Schedule for weekly snapshots
	WeeklySchedule map[string]interface{} `pulumi:"weeklySchedule"`
}

type SnapshotPolicyState struct {
	// Schedule for daily snapshots
	DailySchedule pulumi.MapInput
	// The property to decide policy is enabled or not
	Enabled pulumi.BoolPtrInput
	// Schedule for hourly snapshots
	HourlySchedule pulumi.MapInput
	// Resource location
	Location pulumi.StringPtrInput
	// Schedule for monthly snapshots
	MonthlySchedule pulumi.MapInput
	// Resource name
	Name pulumi.StringPtrInput
	// Resource tags
	Tags pulumi.StringMapInput
	// Resource type
	Type pulumi.StringPtrInput
	// Schedule for weekly snapshots
	WeeklySchedule pulumi.MapInput
}

func (SnapshotPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotPolicyState)(nil)).Elem()
}

type snapshotPolicyArgs struct {
	// The name of the NetApp account
	AccountName string `pulumi:"accountName"`
	// Schedule for daily snapshots
	DailySchedule map[string]interface{} `pulumi:"dailySchedule"`
	// The property to decide policy is enabled or not
	Enabled *bool `pulumi:"enabled"`
	// Schedule for hourly snapshots
	HourlySchedule map[string]interface{} `pulumi:"hourlySchedule"`
	// Resource location
	Location string `pulumi:"location"`
	// Schedule for monthly snapshots
	MonthlySchedule map[string]interface{} `pulumi:"monthlySchedule"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the snapshot policy target
	SnapshotPolicyName string `pulumi:"snapshotPolicyName"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Schedule for weekly snapshots
	WeeklySchedule map[string]interface{} `pulumi:"weeklySchedule"`
}

// The set of arguments for constructing a SnapshotPolicy resource.
type SnapshotPolicyArgs struct {
	// The name of the NetApp account
	AccountName pulumi.StringInput
	// Schedule for daily snapshots
	DailySchedule pulumi.MapInput
	// The property to decide policy is enabled or not
	Enabled pulumi.BoolPtrInput
	// Schedule for hourly snapshots
	HourlySchedule pulumi.MapInput
	// Resource location
	Location pulumi.StringInput
	// Schedule for monthly snapshots
	MonthlySchedule pulumi.MapInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The name of the snapshot policy target
	SnapshotPolicyName pulumi.StringInput
	// Resource tags
	Tags pulumi.StringMapInput
	// Schedule for weekly snapshots
	WeeklySchedule pulumi.MapInput
}

func (SnapshotPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotPolicyArgs)(nil)).Elem()
}
