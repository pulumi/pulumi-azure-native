// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190601

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// An arm role receiver.
type ArmRoleReceiver struct {
	// The name of the arm role receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The arm role id.
	RoleId string `pulumi:"roleId"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema bool `pulumi:"useCommonAlertSchema"`
}

// ArmRoleReceiverInput is an input type that accepts ArmRoleReceiverArgs and ArmRoleReceiverOutput values.
// You can construct a concrete instance of `ArmRoleReceiverInput` via:
//
//          ArmRoleReceiverArgs{...}
type ArmRoleReceiverInput interface {
	pulumi.Input

	ToArmRoleReceiverOutput() ArmRoleReceiverOutput
	ToArmRoleReceiverOutputWithContext(context.Context) ArmRoleReceiverOutput
}

// An arm role receiver.
type ArmRoleReceiverArgs struct {
	// The name of the arm role receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The arm role id.
	RoleId pulumi.StringInput `pulumi:"roleId"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema pulumi.BoolInput `pulumi:"useCommonAlertSchema"`
}

func (ArmRoleReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmRoleReceiver)(nil)).Elem()
}

func (i ArmRoleReceiverArgs) ToArmRoleReceiverOutput() ArmRoleReceiverOutput {
	return i.ToArmRoleReceiverOutputWithContext(context.Background())
}

func (i ArmRoleReceiverArgs) ToArmRoleReceiverOutputWithContext(ctx context.Context) ArmRoleReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmRoleReceiverOutput)
}

// ArmRoleReceiverArrayInput is an input type that accepts ArmRoleReceiverArray and ArmRoleReceiverArrayOutput values.
// You can construct a concrete instance of `ArmRoleReceiverArrayInput` via:
//
//          ArmRoleReceiverArray{ ArmRoleReceiverArgs{...} }
type ArmRoleReceiverArrayInput interface {
	pulumi.Input

	ToArmRoleReceiverArrayOutput() ArmRoleReceiverArrayOutput
	ToArmRoleReceiverArrayOutputWithContext(context.Context) ArmRoleReceiverArrayOutput
}

type ArmRoleReceiverArray []ArmRoleReceiverInput

func (ArmRoleReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArmRoleReceiver)(nil)).Elem()
}

func (i ArmRoleReceiverArray) ToArmRoleReceiverArrayOutput() ArmRoleReceiverArrayOutput {
	return i.ToArmRoleReceiverArrayOutputWithContext(context.Background())
}

func (i ArmRoleReceiverArray) ToArmRoleReceiverArrayOutputWithContext(ctx context.Context) ArmRoleReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmRoleReceiverArrayOutput)
}

// An arm role receiver.
type ArmRoleReceiverResponse struct {
	// The name of the arm role receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The arm role id.
	RoleId string `pulumi:"roleId"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema bool `pulumi:"useCommonAlertSchema"`
}

// An arm role receiver.
type ArmRoleReceiverResponseOutput struct{ *pulumi.OutputState }

func (ArmRoleReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmRoleReceiverResponse)(nil)).Elem()
}

func (o ArmRoleReceiverResponseOutput) ToArmRoleReceiverResponseOutput() ArmRoleReceiverResponseOutput {
	return o
}

func (o ArmRoleReceiverResponseOutput) ToArmRoleReceiverResponseOutputWithContext(ctx context.Context) ArmRoleReceiverResponseOutput {
	return o
}

// The name of the arm role receiver. Names must be unique across all receivers within an action group.
func (o ArmRoleReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ArmRoleReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The arm role id.
func (o ArmRoleReceiverResponseOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v ArmRoleReceiverResponse) string { return v.RoleId }).(pulumi.StringOutput)
}

// Indicates whether to use common alert schema.
func (o ArmRoleReceiverResponseOutput) UseCommonAlertSchema() pulumi.BoolOutput {
	return o.ApplyT(func(v ArmRoleReceiverResponse) bool { return v.UseCommonAlertSchema }).(pulumi.BoolOutput)
}

type ArmRoleReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (ArmRoleReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArmRoleReceiverResponse)(nil)).Elem()
}

func (o ArmRoleReceiverResponseArrayOutput) ToArmRoleReceiverResponseArrayOutput() ArmRoleReceiverResponseArrayOutput {
	return o
}

func (o ArmRoleReceiverResponseArrayOutput) ToArmRoleReceiverResponseArrayOutputWithContext(ctx context.Context) ArmRoleReceiverResponseArrayOutput {
	return o
}

func (o ArmRoleReceiverResponseArrayOutput) Index(i pulumi.IntInput) ArmRoleReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArmRoleReceiverResponse {
		return vs[0].([]ArmRoleReceiverResponse)[vs[1].(int)]
	}).(ArmRoleReceiverResponseOutput)
}

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiver struct {
	// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
	AutomationAccountId string `pulumi:"automationAccountId"`
	// Indicates whether this instance is global runbook.
	IsGlobalRunbook bool `pulumi:"isGlobalRunbook"`
	// Indicates name of the webhook.
	Name *string `pulumi:"name"`
	// The name for this runbook.
	RunbookName string `pulumi:"runbookName"`
	// The URI where webhooks should be sent.
	ServiceUri *string `pulumi:"serviceUri"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema bool `pulumi:"useCommonAlertSchema"`
	// The resource id for webhook linked to this runbook.
	WebhookResourceId string `pulumi:"webhookResourceId"`
}

// AutomationRunbookReceiverInput is an input type that accepts AutomationRunbookReceiverArgs and AutomationRunbookReceiverOutput values.
// You can construct a concrete instance of `AutomationRunbookReceiverInput` via:
//
//          AutomationRunbookReceiverArgs{...}
type AutomationRunbookReceiverInput interface {
	pulumi.Input

	ToAutomationRunbookReceiverOutput() AutomationRunbookReceiverOutput
	ToAutomationRunbookReceiverOutputWithContext(context.Context) AutomationRunbookReceiverOutput
}

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiverArgs struct {
	// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
	AutomationAccountId pulumi.StringInput `pulumi:"automationAccountId"`
	// Indicates whether this instance is global runbook.
	IsGlobalRunbook pulumi.BoolInput `pulumi:"isGlobalRunbook"`
	// Indicates name of the webhook.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The name for this runbook.
	RunbookName pulumi.StringInput `pulumi:"runbookName"`
	// The URI where webhooks should be sent.
	ServiceUri pulumi.StringPtrInput `pulumi:"serviceUri"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema pulumi.BoolInput `pulumi:"useCommonAlertSchema"`
	// The resource id for webhook linked to this runbook.
	WebhookResourceId pulumi.StringInput `pulumi:"webhookResourceId"`
}

func (AutomationRunbookReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRunbookReceiver)(nil)).Elem()
}

func (i AutomationRunbookReceiverArgs) ToAutomationRunbookReceiverOutput() AutomationRunbookReceiverOutput {
	return i.ToAutomationRunbookReceiverOutputWithContext(context.Background())
}

func (i AutomationRunbookReceiverArgs) ToAutomationRunbookReceiverOutputWithContext(ctx context.Context) AutomationRunbookReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationRunbookReceiverOutput)
}

// AutomationRunbookReceiverArrayInput is an input type that accepts AutomationRunbookReceiverArray and AutomationRunbookReceiverArrayOutput values.
// You can construct a concrete instance of `AutomationRunbookReceiverArrayInput` via:
//
//          AutomationRunbookReceiverArray{ AutomationRunbookReceiverArgs{...} }
type AutomationRunbookReceiverArrayInput interface {
	pulumi.Input

	ToAutomationRunbookReceiverArrayOutput() AutomationRunbookReceiverArrayOutput
	ToAutomationRunbookReceiverArrayOutputWithContext(context.Context) AutomationRunbookReceiverArrayOutput
}

type AutomationRunbookReceiverArray []AutomationRunbookReceiverInput

func (AutomationRunbookReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationRunbookReceiver)(nil)).Elem()
}

func (i AutomationRunbookReceiverArray) ToAutomationRunbookReceiverArrayOutput() AutomationRunbookReceiverArrayOutput {
	return i.ToAutomationRunbookReceiverArrayOutputWithContext(context.Background())
}

func (i AutomationRunbookReceiverArray) ToAutomationRunbookReceiverArrayOutputWithContext(ctx context.Context) AutomationRunbookReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationRunbookReceiverArrayOutput)
}

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiverResponse struct {
	// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
	AutomationAccountId string `pulumi:"automationAccountId"`
	// Indicates whether this instance is global runbook.
	IsGlobalRunbook bool `pulumi:"isGlobalRunbook"`
	// Indicates name of the webhook.
	Name *string `pulumi:"name"`
	// The name for this runbook.
	RunbookName string `pulumi:"runbookName"`
	// The URI where webhooks should be sent.
	ServiceUri *string `pulumi:"serviceUri"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema bool `pulumi:"useCommonAlertSchema"`
	// The resource id for webhook linked to this runbook.
	WebhookResourceId string `pulumi:"webhookResourceId"`
}

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiverResponseOutput struct{ *pulumi.OutputState }

func (AutomationRunbookReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRunbookReceiverResponse)(nil)).Elem()
}

func (o AutomationRunbookReceiverResponseOutput) ToAutomationRunbookReceiverResponseOutput() AutomationRunbookReceiverResponseOutput {
	return o
}

func (o AutomationRunbookReceiverResponseOutput) ToAutomationRunbookReceiverResponseOutputWithContext(ctx context.Context) AutomationRunbookReceiverResponseOutput {
	return o
}

// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
func (o AutomationRunbookReceiverResponseOutput) AutomationAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) string { return v.AutomationAccountId }).(pulumi.StringOutput)
}

// Indicates whether this instance is global runbook.
func (o AutomationRunbookReceiverResponseOutput) IsGlobalRunbook() pulumi.BoolOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) bool { return v.IsGlobalRunbook }).(pulumi.BoolOutput)
}

// Indicates name of the webhook.
func (o AutomationRunbookReceiverResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The name for this runbook.
func (o AutomationRunbookReceiverResponseOutput) RunbookName() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) string { return v.RunbookName }).(pulumi.StringOutput)
}

// The URI where webhooks should be sent.
func (o AutomationRunbookReceiverResponseOutput) ServiceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) *string { return v.ServiceUri }).(pulumi.StringPtrOutput)
}

// Indicates whether to use common alert schema.
func (o AutomationRunbookReceiverResponseOutput) UseCommonAlertSchema() pulumi.BoolOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) bool { return v.UseCommonAlertSchema }).(pulumi.BoolOutput)
}

// The resource id for webhook linked to this runbook.
func (o AutomationRunbookReceiverResponseOutput) WebhookResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) string { return v.WebhookResourceId }).(pulumi.StringOutput)
}

type AutomationRunbookReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (AutomationRunbookReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationRunbookReceiverResponse)(nil)).Elem()
}

func (o AutomationRunbookReceiverResponseArrayOutput) ToAutomationRunbookReceiverResponseArrayOutput() AutomationRunbookReceiverResponseArrayOutput {
	return o
}

func (o AutomationRunbookReceiverResponseArrayOutput) ToAutomationRunbookReceiverResponseArrayOutputWithContext(ctx context.Context) AutomationRunbookReceiverResponseArrayOutput {
	return o
}

func (o AutomationRunbookReceiverResponseArrayOutput) Index(i pulumi.IntInput) AutomationRunbookReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationRunbookReceiverResponse {
		return vs[0].([]AutomationRunbookReceiverResponse)[vs[1].(int)]
	}).(AutomationRunbookReceiverResponseOutput)
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiver struct {
	// The email address registered for the Azure mobile app.
	EmailAddress string `pulumi:"emailAddress"`
	// The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
}

// AzureAppPushReceiverInput is an input type that accepts AzureAppPushReceiverArgs and AzureAppPushReceiverOutput values.
// You can construct a concrete instance of `AzureAppPushReceiverInput` via:
//
//          AzureAppPushReceiverArgs{...}
type AzureAppPushReceiverInput interface {
	pulumi.Input

	ToAzureAppPushReceiverOutput() AzureAppPushReceiverOutput
	ToAzureAppPushReceiverOutputWithContext(context.Context) AzureAppPushReceiverOutput
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiverArgs struct {
	// The email address registered for the Azure mobile app.
	EmailAddress pulumi.StringInput `pulumi:"emailAddress"`
	// The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (AzureAppPushReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureAppPushReceiver)(nil)).Elem()
}

func (i AzureAppPushReceiverArgs) ToAzureAppPushReceiverOutput() AzureAppPushReceiverOutput {
	return i.ToAzureAppPushReceiverOutputWithContext(context.Background())
}

func (i AzureAppPushReceiverArgs) ToAzureAppPushReceiverOutputWithContext(ctx context.Context) AzureAppPushReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureAppPushReceiverOutput)
}

// AzureAppPushReceiverArrayInput is an input type that accepts AzureAppPushReceiverArray and AzureAppPushReceiverArrayOutput values.
// You can construct a concrete instance of `AzureAppPushReceiverArrayInput` via:
//
//          AzureAppPushReceiverArray{ AzureAppPushReceiverArgs{...} }
type AzureAppPushReceiverArrayInput interface {
	pulumi.Input

	ToAzureAppPushReceiverArrayOutput() AzureAppPushReceiverArrayOutput
	ToAzureAppPushReceiverArrayOutputWithContext(context.Context) AzureAppPushReceiverArrayOutput
}

type AzureAppPushReceiverArray []AzureAppPushReceiverInput

func (AzureAppPushReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureAppPushReceiver)(nil)).Elem()
}

func (i AzureAppPushReceiverArray) ToAzureAppPushReceiverArrayOutput() AzureAppPushReceiverArrayOutput {
	return i.ToAzureAppPushReceiverArrayOutputWithContext(context.Background())
}

func (i AzureAppPushReceiverArray) ToAzureAppPushReceiverArrayOutputWithContext(ctx context.Context) AzureAppPushReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureAppPushReceiverArrayOutput)
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiverResponse struct {
	// The email address registered for the Azure mobile app.
	EmailAddress string `pulumi:"emailAddress"`
	// The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiverResponseOutput struct{ *pulumi.OutputState }

func (AzureAppPushReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureAppPushReceiverResponse)(nil)).Elem()
}

func (o AzureAppPushReceiverResponseOutput) ToAzureAppPushReceiverResponseOutput() AzureAppPushReceiverResponseOutput {
	return o
}

func (o AzureAppPushReceiverResponseOutput) ToAzureAppPushReceiverResponseOutputWithContext(ctx context.Context) AzureAppPushReceiverResponseOutput {
	return o
}

// The email address registered for the Azure mobile app.
func (o AzureAppPushReceiverResponseOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v AzureAppPushReceiverResponse) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// The name of the Azure mobile app push receiver. Names must be unique across all receivers within an action group.
func (o AzureAppPushReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureAppPushReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

type AzureAppPushReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (AzureAppPushReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureAppPushReceiverResponse)(nil)).Elem()
}

func (o AzureAppPushReceiverResponseArrayOutput) ToAzureAppPushReceiverResponseArrayOutput() AzureAppPushReceiverResponseArrayOutput {
	return o
}

func (o AzureAppPushReceiverResponseArrayOutput) ToAzureAppPushReceiverResponseArrayOutputWithContext(ctx context.Context) AzureAppPushReceiverResponseArrayOutput {
	return o
}

func (o AzureAppPushReceiverResponseArrayOutput) Index(i pulumi.IntInput) AzureAppPushReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureAppPushReceiverResponse {
		return vs[0].([]AzureAppPushReceiverResponse)[vs[1].(int)]
	}).(AzureAppPushReceiverResponseOutput)
}

// An azure function receiver.
type AzureFunctionReceiver struct {
	// The azure resource id of the function app.
	FunctionAppResourceId string `pulumi:"functionAppResourceId"`
	// The function name in the function app.
	FunctionName string `pulumi:"functionName"`
	// The http trigger url where http request sent to.
	HttpTriggerUrl string `pulumi:"httpTriggerUrl"`
	// The name of the azure function receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema bool `pulumi:"useCommonAlertSchema"`
}

// AzureFunctionReceiverInput is an input type that accepts AzureFunctionReceiverArgs and AzureFunctionReceiverOutput values.
// You can construct a concrete instance of `AzureFunctionReceiverInput` via:
//
//          AzureFunctionReceiverArgs{...}
type AzureFunctionReceiverInput interface {
	pulumi.Input

	ToAzureFunctionReceiverOutput() AzureFunctionReceiverOutput
	ToAzureFunctionReceiverOutputWithContext(context.Context) AzureFunctionReceiverOutput
}

// An azure function receiver.
type AzureFunctionReceiverArgs struct {
	// The azure resource id of the function app.
	FunctionAppResourceId pulumi.StringInput `pulumi:"functionAppResourceId"`
	// The function name in the function app.
	FunctionName pulumi.StringInput `pulumi:"functionName"`
	// The http trigger url where http request sent to.
	HttpTriggerUrl pulumi.StringInput `pulumi:"httpTriggerUrl"`
	// The name of the azure function receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema pulumi.BoolInput `pulumi:"useCommonAlertSchema"`
}

func (AzureFunctionReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionReceiver)(nil)).Elem()
}

func (i AzureFunctionReceiverArgs) ToAzureFunctionReceiverOutput() AzureFunctionReceiverOutput {
	return i.ToAzureFunctionReceiverOutputWithContext(context.Background())
}

func (i AzureFunctionReceiverArgs) ToAzureFunctionReceiverOutputWithContext(ctx context.Context) AzureFunctionReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionReceiverOutput)
}

// AzureFunctionReceiverArrayInput is an input type that accepts AzureFunctionReceiverArray and AzureFunctionReceiverArrayOutput values.
// You can construct a concrete instance of `AzureFunctionReceiverArrayInput` via:
//
//          AzureFunctionReceiverArray{ AzureFunctionReceiverArgs{...} }
type AzureFunctionReceiverArrayInput interface {
	pulumi.Input

	ToAzureFunctionReceiverArrayOutput() AzureFunctionReceiverArrayOutput
	ToAzureFunctionReceiverArrayOutputWithContext(context.Context) AzureFunctionReceiverArrayOutput
}

type AzureFunctionReceiverArray []AzureFunctionReceiverInput

func (AzureFunctionReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureFunctionReceiver)(nil)).Elem()
}

func (i AzureFunctionReceiverArray) ToAzureFunctionReceiverArrayOutput() AzureFunctionReceiverArrayOutput {
	return i.ToAzureFunctionReceiverArrayOutputWithContext(context.Background())
}

func (i AzureFunctionReceiverArray) ToAzureFunctionReceiverArrayOutputWithContext(ctx context.Context) AzureFunctionReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionReceiverArrayOutput)
}

// An azure function receiver.
type AzureFunctionReceiverResponse struct {
	// The azure resource id of the function app.
	FunctionAppResourceId string `pulumi:"functionAppResourceId"`
	// The function name in the function app.
	FunctionName string `pulumi:"functionName"`
	// The http trigger url where http request sent to.
	HttpTriggerUrl string `pulumi:"httpTriggerUrl"`
	// The name of the azure function receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema bool `pulumi:"useCommonAlertSchema"`
}

// An azure function receiver.
type AzureFunctionReceiverResponseOutput struct{ *pulumi.OutputState }

func (AzureFunctionReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionReceiverResponse)(nil)).Elem()
}

func (o AzureFunctionReceiverResponseOutput) ToAzureFunctionReceiverResponseOutput() AzureFunctionReceiverResponseOutput {
	return o
}

func (o AzureFunctionReceiverResponseOutput) ToAzureFunctionReceiverResponseOutputWithContext(ctx context.Context) AzureFunctionReceiverResponseOutput {
	return o
}

// The azure resource id of the function app.
func (o AzureFunctionReceiverResponseOutput) FunctionAppResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiverResponse) string { return v.FunctionAppResourceId }).(pulumi.StringOutput)
}

// The function name in the function app.
func (o AzureFunctionReceiverResponseOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiverResponse) string { return v.FunctionName }).(pulumi.StringOutput)
}

// The http trigger url where http request sent to.
func (o AzureFunctionReceiverResponseOutput) HttpTriggerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiverResponse) string { return v.HttpTriggerUrl }).(pulumi.StringOutput)
}

// The name of the azure function receiver. Names must be unique across all receivers within an action group.
func (o AzureFunctionReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates whether to use common alert schema.
func (o AzureFunctionReceiverResponseOutput) UseCommonAlertSchema() pulumi.BoolOutput {
	return o.ApplyT(func(v AzureFunctionReceiverResponse) bool { return v.UseCommonAlertSchema }).(pulumi.BoolOutput)
}

type AzureFunctionReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (AzureFunctionReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureFunctionReceiverResponse)(nil)).Elem()
}

func (o AzureFunctionReceiverResponseArrayOutput) ToAzureFunctionReceiverResponseArrayOutput() AzureFunctionReceiverResponseArrayOutput {
	return o
}

func (o AzureFunctionReceiverResponseArrayOutput) ToAzureFunctionReceiverResponseArrayOutputWithContext(ctx context.Context) AzureFunctionReceiverResponseArrayOutput {
	return o
}

func (o AzureFunctionReceiverResponseArrayOutput) Index(i pulumi.IntInput) AzureFunctionReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureFunctionReceiverResponse {
		return vs[0].([]AzureFunctionReceiverResponse)[vs[1].(int)]
	}).(AzureFunctionReceiverResponseOutput)
}

// An email receiver.
type EmailReceiver struct {
	// The email address of this receiver.
	EmailAddress string `pulumi:"emailAddress"`
	// The name of the email receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema bool `pulumi:"useCommonAlertSchema"`
}

// EmailReceiverInput is an input type that accepts EmailReceiverArgs and EmailReceiverOutput values.
// You can construct a concrete instance of `EmailReceiverInput` via:
//
//          EmailReceiverArgs{...}
type EmailReceiverInput interface {
	pulumi.Input

	ToEmailReceiverOutput() EmailReceiverOutput
	ToEmailReceiverOutputWithContext(context.Context) EmailReceiverOutput
}

// An email receiver.
type EmailReceiverArgs struct {
	// The email address of this receiver.
	EmailAddress pulumi.StringInput `pulumi:"emailAddress"`
	// The name of the email receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema pulumi.BoolInput `pulumi:"useCommonAlertSchema"`
}

func (EmailReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailReceiver)(nil)).Elem()
}

func (i EmailReceiverArgs) ToEmailReceiverOutput() EmailReceiverOutput {
	return i.ToEmailReceiverOutputWithContext(context.Background())
}

func (i EmailReceiverArgs) ToEmailReceiverOutputWithContext(ctx context.Context) EmailReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailReceiverOutput)
}

// EmailReceiverArrayInput is an input type that accepts EmailReceiverArray and EmailReceiverArrayOutput values.
// You can construct a concrete instance of `EmailReceiverArrayInput` via:
//
//          EmailReceiverArray{ EmailReceiverArgs{...} }
type EmailReceiverArrayInput interface {
	pulumi.Input

	ToEmailReceiverArrayOutput() EmailReceiverArrayOutput
	ToEmailReceiverArrayOutputWithContext(context.Context) EmailReceiverArrayOutput
}

type EmailReceiverArray []EmailReceiverInput

func (EmailReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EmailReceiver)(nil)).Elem()
}

func (i EmailReceiverArray) ToEmailReceiverArrayOutput() EmailReceiverArrayOutput {
	return i.ToEmailReceiverArrayOutputWithContext(context.Background())
}

func (i EmailReceiverArray) ToEmailReceiverArrayOutputWithContext(ctx context.Context) EmailReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailReceiverArrayOutput)
}

// An email receiver.
type EmailReceiverResponse struct {
	// The email address of this receiver.
	EmailAddress string `pulumi:"emailAddress"`
	// The name of the email receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The receiver status of the e-mail.
	Status string `pulumi:"status"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema bool `pulumi:"useCommonAlertSchema"`
}

// An email receiver.
type EmailReceiverResponseOutput struct{ *pulumi.OutputState }

func (EmailReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailReceiverResponse)(nil)).Elem()
}

func (o EmailReceiverResponseOutput) ToEmailReceiverResponseOutput() EmailReceiverResponseOutput {
	return o
}

func (o EmailReceiverResponseOutput) ToEmailReceiverResponseOutputWithContext(ctx context.Context) EmailReceiverResponseOutput {
	return o
}

// The email address of this receiver.
func (o EmailReceiverResponseOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v EmailReceiverResponse) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// The name of the email receiver. Names must be unique across all receivers within an action group.
func (o EmailReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EmailReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The receiver status of the e-mail.
func (o EmailReceiverResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v EmailReceiverResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Indicates whether to use common alert schema.
func (o EmailReceiverResponseOutput) UseCommonAlertSchema() pulumi.BoolOutput {
	return o.ApplyT(func(v EmailReceiverResponse) bool { return v.UseCommonAlertSchema }).(pulumi.BoolOutput)
}

type EmailReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (EmailReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EmailReceiverResponse)(nil)).Elem()
}

func (o EmailReceiverResponseArrayOutput) ToEmailReceiverResponseArrayOutput() EmailReceiverResponseArrayOutput {
	return o
}

func (o EmailReceiverResponseArrayOutput) ToEmailReceiverResponseArrayOutputWithContext(ctx context.Context) EmailReceiverResponseArrayOutput {
	return o
}

func (o EmailReceiverResponseArrayOutput) Index(i pulumi.IntInput) EmailReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EmailReceiverResponse {
		return vs[0].([]EmailReceiverResponse)[vs[1].(int)]
	}).(EmailReceiverResponseOutput)
}

// An Itsm receiver.
type ItsmReceiver struct {
	// Unique identification of ITSM connection among multiple defined in above workspace.
	ConnectionId string `pulumi:"connectionId"`
	// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
	Region string `pulumi:"region"`
	// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
	TicketConfiguration string `pulumi:"ticketConfiguration"`
	// OMS LA instance identifier.
	WorkspaceId string `pulumi:"workspaceId"`
}

// ItsmReceiverInput is an input type that accepts ItsmReceiverArgs and ItsmReceiverOutput values.
// You can construct a concrete instance of `ItsmReceiverInput` via:
//
//          ItsmReceiverArgs{...}
type ItsmReceiverInput interface {
	pulumi.Input

	ToItsmReceiverOutput() ItsmReceiverOutput
	ToItsmReceiverOutputWithContext(context.Context) ItsmReceiverOutput
}

// An Itsm receiver.
type ItsmReceiverArgs struct {
	// Unique identification of ITSM connection among multiple defined in above workspace.
	ConnectionId pulumi.StringInput `pulumi:"connectionId"`
	// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
	Region pulumi.StringInput `pulumi:"region"`
	// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
	TicketConfiguration pulumi.StringInput `pulumi:"ticketConfiguration"`
	// OMS LA instance identifier.
	WorkspaceId pulumi.StringInput `pulumi:"workspaceId"`
}

func (ItsmReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ItsmReceiver)(nil)).Elem()
}

func (i ItsmReceiverArgs) ToItsmReceiverOutput() ItsmReceiverOutput {
	return i.ToItsmReceiverOutputWithContext(context.Background())
}

func (i ItsmReceiverArgs) ToItsmReceiverOutputWithContext(ctx context.Context) ItsmReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ItsmReceiverOutput)
}

// ItsmReceiverArrayInput is an input type that accepts ItsmReceiverArray and ItsmReceiverArrayOutput values.
// You can construct a concrete instance of `ItsmReceiverArrayInput` via:
//
//          ItsmReceiverArray{ ItsmReceiverArgs{...} }
type ItsmReceiverArrayInput interface {
	pulumi.Input

	ToItsmReceiverArrayOutput() ItsmReceiverArrayOutput
	ToItsmReceiverArrayOutputWithContext(context.Context) ItsmReceiverArrayOutput
}

type ItsmReceiverArray []ItsmReceiverInput

func (ItsmReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ItsmReceiver)(nil)).Elem()
}

func (i ItsmReceiverArray) ToItsmReceiverArrayOutput() ItsmReceiverArrayOutput {
	return i.ToItsmReceiverArrayOutputWithContext(context.Background())
}

func (i ItsmReceiverArray) ToItsmReceiverArrayOutputWithContext(ctx context.Context) ItsmReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ItsmReceiverArrayOutput)
}

// An Itsm receiver.
type ItsmReceiverResponse struct {
	// Unique identification of ITSM connection among multiple defined in above workspace.
	ConnectionId string `pulumi:"connectionId"`
	// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
	Region string `pulumi:"region"`
	// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
	TicketConfiguration string `pulumi:"ticketConfiguration"`
	// OMS LA instance identifier.
	WorkspaceId string `pulumi:"workspaceId"`
}

// An Itsm receiver.
type ItsmReceiverResponseOutput struct{ *pulumi.OutputState }

func (ItsmReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ItsmReceiverResponse)(nil)).Elem()
}

func (o ItsmReceiverResponseOutput) ToItsmReceiverResponseOutput() ItsmReceiverResponseOutput {
	return o
}

func (o ItsmReceiverResponseOutput) ToItsmReceiverResponseOutputWithContext(ctx context.Context) ItsmReceiverResponseOutput {
	return o
}

// Unique identification of ITSM connection among multiple defined in above workspace.
func (o ItsmReceiverResponseOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverResponse) string { return v.ConnectionId }).(pulumi.StringOutput)
}

// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
func (o ItsmReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
func (o ItsmReceiverResponseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverResponse) string { return v.Region }).(pulumi.StringOutput)
}

// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
func (o ItsmReceiverResponseOutput) TicketConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverResponse) string { return v.TicketConfiguration }).(pulumi.StringOutput)
}

// OMS LA instance identifier.
func (o ItsmReceiverResponseOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverResponse) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

type ItsmReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (ItsmReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ItsmReceiverResponse)(nil)).Elem()
}

func (o ItsmReceiverResponseArrayOutput) ToItsmReceiverResponseArrayOutput() ItsmReceiverResponseArrayOutput {
	return o
}

func (o ItsmReceiverResponseArrayOutput) ToItsmReceiverResponseArrayOutputWithContext(ctx context.Context) ItsmReceiverResponseArrayOutput {
	return o
}

func (o ItsmReceiverResponseArrayOutput) Index(i pulumi.IntInput) ItsmReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ItsmReceiverResponse {
		return vs[0].([]ItsmReceiverResponse)[vs[1].(int)]
	}).(ItsmReceiverResponseOutput)
}

// A logic app receiver.
type LogicAppReceiver struct {
	// The callback url where http request sent to.
	CallbackUrl string `pulumi:"callbackUrl"`
	// The name of the logic app receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The azure resource id of the logic app receiver.
	ResourceId string `pulumi:"resourceId"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema bool `pulumi:"useCommonAlertSchema"`
}

// LogicAppReceiverInput is an input type that accepts LogicAppReceiverArgs and LogicAppReceiverOutput values.
// You can construct a concrete instance of `LogicAppReceiverInput` via:
//
//          LogicAppReceiverArgs{...}
type LogicAppReceiverInput interface {
	pulumi.Input

	ToLogicAppReceiverOutput() LogicAppReceiverOutput
	ToLogicAppReceiverOutputWithContext(context.Context) LogicAppReceiverOutput
}

// A logic app receiver.
type LogicAppReceiverArgs struct {
	// The callback url where http request sent to.
	CallbackUrl pulumi.StringInput `pulumi:"callbackUrl"`
	// The name of the logic app receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The azure resource id of the logic app receiver.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema pulumi.BoolInput `pulumi:"useCommonAlertSchema"`
}

func (LogicAppReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogicAppReceiver)(nil)).Elem()
}

func (i LogicAppReceiverArgs) ToLogicAppReceiverOutput() LogicAppReceiverOutput {
	return i.ToLogicAppReceiverOutputWithContext(context.Background())
}

func (i LogicAppReceiverArgs) ToLogicAppReceiverOutputWithContext(ctx context.Context) LogicAppReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicAppReceiverOutput)
}

// LogicAppReceiverArrayInput is an input type that accepts LogicAppReceiverArray and LogicAppReceiverArrayOutput values.
// You can construct a concrete instance of `LogicAppReceiverArrayInput` via:
//
//          LogicAppReceiverArray{ LogicAppReceiverArgs{...} }
type LogicAppReceiverArrayInput interface {
	pulumi.Input

	ToLogicAppReceiverArrayOutput() LogicAppReceiverArrayOutput
	ToLogicAppReceiverArrayOutputWithContext(context.Context) LogicAppReceiverArrayOutput
}

type LogicAppReceiverArray []LogicAppReceiverInput

func (LogicAppReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogicAppReceiver)(nil)).Elem()
}

func (i LogicAppReceiverArray) ToLogicAppReceiverArrayOutput() LogicAppReceiverArrayOutput {
	return i.ToLogicAppReceiverArrayOutputWithContext(context.Background())
}

func (i LogicAppReceiverArray) ToLogicAppReceiverArrayOutputWithContext(ctx context.Context) LogicAppReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicAppReceiverArrayOutput)
}

// A logic app receiver.
type LogicAppReceiverResponse struct {
	// The callback url where http request sent to.
	CallbackUrl string `pulumi:"callbackUrl"`
	// The name of the logic app receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The azure resource id of the logic app receiver.
	ResourceId string `pulumi:"resourceId"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema bool `pulumi:"useCommonAlertSchema"`
}

// A logic app receiver.
type LogicAppReceiverResponseOutput struct{ *pulumi.OutputState }

func (LogicAppReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogicAppReceiverResponse)(nil)).Elem()
}

func (o LogicAppReceiverResponseOutput) ToLogicAppReceiverResponseOutput() LogicAppReceiverResponseOutput {
	return o
}

func (o LogicAppReceiverResponseOutput) ToLogicAppReceiverResponseOutputWithContext(ctx context.Context) LogicAppReceiverResponseOutput {
	return o
}

// The callback url where http request sent to.
func (o LogicAppReceiverResponseOutput) CallbackUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiverResponse) string { return v.CallbackUrl }).(pulumi.StringOutput)
}

// The name of the logic app receiver. Names must be unique across all receivers within an action group.
func (o LogicAppReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The azure resource id of the logic app receiver.
func (o LogicAppReceiverResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiverResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

// Indicates whether to use common alert schema.
func (o LogicAppReceiverResponseOutput) UseCommonAlertSchema() pulumi.BoolOutput {
	return o.ApplyT(func(v LogicAppReceiverResponse) bool { return v.UseCommonAlertSchema }).(pulumi.BoolOutput)
}

type LogicAppReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (LogicAppReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogicAppReceiverResponse)(nil)).Elem()
}

func (o LogicAppReceiverResponseArrayOutput) ToLogicAppReceiverResponseArrayOutput() LogicAppReceiverResponseArrayOutput {
	return o
}

func (o LogicAppReceiverResponseArrayOutput) ToLogicAppReceiverResponseArrayOutputWithContext(ctx context.Context) LogicAppReceiverResponseArrayOutput {
	return o
}

func (o LogicAppReceiverResponseArrayOutput) Index(i pulumi.IntInput) LogicAppReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogicAppReceiverResponse {
		return vs[0].([]LogicAppReceiverResponse)[vs[1].(int)]
	}).(LogicAppReceiverResponseOutput)
}

// An SMS receiver.
type SmsReceiver struct {
	// The country code of the SMS receiver.
	CountryCode string `pulumi:"countryCode"`
	// The name of the SMS receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The phone number of the SMS receiver.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// SmsReceiverInput is an input type that accepts SmsReceiverArgs and SmsReceiverOutput values.
// You can construct a concrete instance of `SmsReceiverInput` via:
//
//          SmsReceiverArgs{...}
type SmsReceiverInput interface {
	pulumi.Input

	ToSmsReceiverOutput() SmsReceiverOutput
	ToSmsReceiverOutputWithContext(context.Context) SmsReceiverOutput
}

// An SMS receiver.
type SmsReceiverArgs struct {
	// The country code of the SMS receiver.
	CountryCode pulumi.StringInput `pulumi:"countryCode"`
	// The name of the SMS receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The phone number of the SMS receiver.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (SmsReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SmsReceiver)(nil)).Elem()
}

func (i SmsReceiverArgs) ToSmsReceiverOutput() SmsReceiverOutput {
	return i.ToSmsReceiverOutputWithContext(context.Background())
}

func (i SmsReceiverArgs) ToSmsReceiverOutputWithContext(ctx context.Context) SmsReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmsReceiverOutput)
}

// SmsReceiverArrayInput is an input type that accepts SmsReceiverArray and SmsReceiverArrayOutput values.
// You can construct a concrete instance of `SmsReceiverArrayInput` via:
//
//          SmsReceiverArray{ SmsReceiverArgs{...} }
type SmsReceiverArrayInput interface {
	pulumi.Input

	ToSmsReceiverArrayOutput() SmsReceiverArrayOutput
	ToSmsReceiverArrayOutputWithContext(context.Context) SmsReceiverArrayOutput
}

type SmsReceiverArray []SmsReceiverInput

func (SmsReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SmsReceiver)(nil)).Elem()
}

func (i SmsReceiverArray) ToSmsReceiverArrayOutput() SmsReceiverArrayOutput {
	return i.ToSmsReceiverArrayOutputWithContext(context.Background())
}

func (i SmsReceiverArray) ToSmsReceiverArrayOutputWithContext(ctx context.Context) SmsReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmsReceiverArrayOutput)
}

// An SMS receiver.
type SmsReceiverResponse struct {
	// The country code of the SMS receiver.
	CountryCode string `pulumi:"countryCode"`
	// The name of the SMS receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The phone number of the SMS receiver.
	PhoneNumber string `pulumi:"phoneNumber"`
	// The status of the receiver.
	Status string `pulumi:"status"`
}

// An SMS receiver.
type SmsReceiverResponseOutput struct{ *pulumi.OutputState }

func (SmsReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SmsReceiverResponse)(nil)).Elem()
}

func (o SmsReceiverResponseOutput) ToSmsReceiverResponseOutput() SmsReceiverResponseOutput {
	return o
}

func (o SmsReceiverResponseOutput) ToSmsReceiverResponseOutputWithContext(ctx context.Context) SmsReceiverResponseOutput {
	return o
}

// The country code of the SMS receiver.
func (o SmsReceiverResponseOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiverResponse) string { return v.CountryCode }).(pulumi.StringOutput)
}

// The name of the SMS receiver. Names must be unique across all receivers within an action group.
func (o SmsReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The phone number of the SMS receiver.
func (o SmsReceiverResponseOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiverResponse) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

// The status of the receiver.
func (o SmsReceiverResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiverResponse) string { return v.Status }).(pulumi.StringOutput)
}

type SmsReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (SmsReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SmsReceiverResponse)(nil)).Elem()
}

func (o SmsReceiverResponseArrayOutput) ToSmsReceiverResponseArrayOutput() SmsReceiverResponseArrayOutput {
	return o
}

func (o SmsReceiverResponseArrayOutput) ToSmsReceiverResponseArrayOutputWithContext(ctx context.Context) SmsReceiverResponseArrayOutput {
	return o
}

func (o SmsReceiverResponseArrayOutput) Index(i pulumi.IntInput) SmsReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SmsReceiverResponse {
		return vs[0].([]SmsReceiverResponse)[vs[1].(int)]
	}).(SmsReceiverResponseOutput)
}

// A voice receiver.
type VoiceReceiver struct {
	// The country code of the voice receiver.
	CountryCode string `pulumi:"countryCode"`
	// The name of the voice receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The phone number of the voice receiver.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// VoiceReceiverInput is an input type that accepts VoiceReceiverArgs and VoiceReceiverOutput values.
// You can construct a concrete instance of `VoiceReceiverInput` via:
//
//          VoiceReceiverArgs{...}
type VoiceReceiverInput interface {
	pulumi.Input

	ToVoiceReceiverOutput() VoiceReceiverOutput
	ToVoiceReceiverOutputWithContext(context.Context) VoiceReceiverOutput
}

// A voice receiver.
type VoiceReceiverArgs struct {
	// The country code of the voice receiver.
	CountryCode pulumi.StringInput `pulumi:"countryCode"`
	// The name of the voice receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The phone number of the voice receiver.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (VoiceReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VoiceReceiver)(nil)).Elem()
}

func (i VoiceReceiverArgs) ToVoiceReceiverOutput() VoiceReceiverOutput {
	return i.ToVoiceReceiverOutputWithContext(context.Background())
}

func (i VoiceReceiverArgs) ToVoiceReceiverOutputWithContext(ctx context.Context) VoiceReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VoiceReceiverOutput)
}

// VoiceReceiverArrayInput is an input type that accepts VoiceReceiverArray and VoiceReceiverArrayOutput values.
// You can construct a concrete instance of `VoiceReceiverArrayInput` via:
//
//          VoiceReceiverArray{ VoiceReceiverArgs{...} }
type VoiceReceiverArrayInput interface {
	pulumi.Input

	ToVoiceReceiverArrayOutput() VoiceReceiverArrayOutput
	ToVoiceReceiverArrayOutputWithContext(context.Context) VoiceReceiverArrayOutput
}

type VoiceReceiverArray []VoiceReceiverInput

func (VoiceReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VoiceReceiver)(nil)).Elem()
}

func (i VoiceReceiverArray) ToVoiceReceiverArrayOutput() VoiceReceiverArrayOutput {
	return i.ToVoiceReceiverArrayOutputWithContext(context.Background())
}

func (i VoiceReceiverArray) ToVoiceReceiverArrayOutputWithContext(ctx context.Context) VoiceReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VoiceReceiverArrayOutput)
}

// A voice receiver.
type VoiceReceiverResponse struct {
	// The country code of the voice receiver.
	CountryCode string `pulumi:"countryCode"`
	// The name of the voice receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The phone number of the voice receiver.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// A voice receiver.
type VoiceReceiverResponseOutput struct{ *pulumi.OutputState }

func (VoiceReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VoiceReceiverResponse)(nil)).Elem()
}

func (o VoiceReceiverResponseOutput) ToVoiceReceiverResponseOutput() VoiceReceiverResponseOutput {
	return o
}

func (o VoiceReceiverResponseOutput) ToVoiceReceiverResponseOutputWithContext(ctx context.Context) VoiceReceiverResponseOutput {
	return o
}

// The country code of the voice receiver.
func (o VoiceReceiverResponseOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiverResponse) string { return v.CountryCode }).(pulumi.StringOutput)
}

// The name of the voice receiver. Names must be unique across all receivers within an action group.
func (o VoiceReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The phone number of the voice receiver.
func (o VoiceReceiverResponseOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiverResponse) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type VoiceReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (VoiceReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VoiceReceiverResponse)(nil)).Elem()
}

func (o VoiceReceiverResponseArrayOutput) ToVoiceReceiverResponseArrayOutput() VoiceReceiverResponseArrayOutput {
	return o
}

func (o VoiceReceiverResponseArrayOutput) ToVoiceReceiverResponseArrayOutputWithContext(ctx context.Context) VoiceReceiverResponseArrayOutput {
	return o
}

func (o VoiceReceiverResponseArrayOutput) Index(i pulumi.IntInput) VoiceReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VoiceReceiverResponse {
		return vs[0].([]VoiceReceiverResponse)[vs[1].(int)]
	}).(VoiceReceiverResponseOutput)
}

// A webhook receiver.
type WebhookReceiver struct {
	// Indicates the identifier uri for aad auth.
	IdentifierUri *string `pulumi:"identifierUri"`
	// The name of the webhook receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// Indicates the webhook app object Id for aad auth.
	ObjectId *string `pulumi:"objectId"`
	// The URI where webhooks should be sent.
	ServiceUri string `pulumi:"serviceUri"`
	// Indicates the tenant id for aad auth.
	TenantId *string `pulumi:"tenantId"`
	// Indicates whether or not use AAD authentication.
	UseAadAuth *bool `pulumi:"useAadAuth"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema bool `pulumi:"useCommonAlertSchema"`
}

// WebhookReceiverInput is an input type that accepts WebhookReceiverArgs and WebhookReceiverOutput values.
// You can construct a concrete instance of `WebhookReceiverInput` via:
//
//          WebhookReceiverArgs{...}
type WebhookReceiverInput interface {
	pulumi.Input

	ToWebhookReceiverOutput() WebhookReceiverOutput
	ToWebhookReceiverOutputWithContext(context.Context) WebhookReceiverOutput
}

// A webhook receiver.
type WebhookReceiverArgs struct {
	// Indicates the identifier uri for aad auth.
	IdentifierUri pulumi.StringPtrInput `pulumi:"identifierUri"`
	// The name of the webhook receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// Indicates the webhook app object Id for aad auth.
	ObjectId pulumi.StringPtrInput `pulumi:"objectId"`
	// The URI where webhooks should be sent.
	ServiceUri pulumi.StringInput `pulumi:"serviceUri"`
	// Indicates the tenant id for aad auth.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Indicates whether or not use AAD authentication.
	UseAadAuth pulumi.BoolPtrInput `pulumi:"useAadAuth"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema pulumi.BoolInput `pulumi:"useCommonAlertSchema"`
}

func (WebhookReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookReceiver)(nil)).Elem()
}

func (i WebhookReceiverArgs) ToWebhookReceiverOutput() WebhookReceiverOutput {
	return i.ToWebhookReceiverOutputWithContext(context.Background())
}

func (i WebhookReceiverArgs) ToWebhookReceiverOutputWithContext(ctx context.Context) WebhookReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookReceiverOutput)
}

// WebhookReceiverArrayInput is an input type that accepts WebhookReceiverArray and WebhookReceiverArrayOutput values.
// You can construct a concrete instance of `WebhookReceiverArrayInput` via:
//
//          WebhookReceiverArray{ WebhookReceiverArgs{...} }
type WebhookReceiverArrayInput interface {
	pulumi.Input

	ToWebhookReceiverArrayOutput() WebhookReceiverArrayOutput
	ToWebhookReceiverArrayOutputWithContext(context.Context) WebhookReceiverArrayOutput
}

type WebhookReceiverArray []WebhookReceiverInput

func (WebhookReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookReceiver)(nil)).Elem()
}

func (i WebhookReceiverArray) ToWebhookReceiverArrayOutput() WebhookReceiverArrayOutput {
	return i.ToWebhookReceiverArrayOutputWithContext(context.Background())
}

func (i WebhookReceiverArray) ToWebhookReceiverArrayOutputWithContext(ctx context.Context) WebhookReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookReceiverArrayOutput)
}

// A webhook receiver.
type WebhookReceiverResponse struct {
	// Indicates the identifier uri for aad auth.
	IdentifierUri *string `pulumi:"identifierUri"`
	// The name of the webhook receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// Indicates the webhook app object Id for aad auth.
	ObjectId *string `pulumi:"objectId"`
	// The URI where webhooks should be sent.
	ServiceUri string `pulumi:"serviceUri"`
	// Indicates the tenant id for aad auth.
	TenantId *string `pulumi:"tenantId"`
	// Indicates whether or not use AAD authentication.
	UseAadAuth *bool `pulumi:"useAadAuth"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema bool `pulumi:"useCommonAlertSchema"`
}

// A webhook receiver.
type WebhookReceiverResponseOutput struct{ *pulumi.OutputState }

func (WebhookReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookReceiverResponse)(nil)).Elem()
}

func (o WebhookReceiverResponseOutput) ToWebhookReceiverResponseOutput() WebhookReceiverResponseOutput {
	return o
}

func (o WebhookReceiverResponseOutput) ToWebhookReceiverResponseOutputWithContext(ctx context.Context) WebhookReceiverResponseOutput {
	return o
}

// Indicates the identifier uri for aad auth.
func (o WebhookReceiverResponseOutput) IdentifierUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookReceiverResponse) *string { return v.IdentifierUri }).(pulumi.StringPtrOutput)
}

// The name of the webhook receiver. Names must be unique across all receivers within an action group.
func (o WebhookReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates the webhook app object Id for aad auth.
func (o WebhookReceiverResponseOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookReceiverResponse) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

// The URI where webhooks should be sent.
func (o WebhookReceiverResponseOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookReceiverResponse) string { return v.ServiceUri }).(pulumi.StringOutput)
}

// Indicates the tenant id for aad auth.
func (o WebhookReceiverResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookReceiverResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Indicates whether or not use AAD authentication.
func (o WebhookReceiverResponseOutput) UseAadAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebhookReceiverResponse) *bool { return v.UseAadAuth }).(pulumi.BoolPtrOutput)
}

// Indicates whether to use common alert schema.
func (o WebhookReceiverResponseOutput) UseCommonAlertSchema() pulumi.BoolOutput {
	return o.ApplyT(func(v WebhookReceiverResponse) bool { return v.UseCommonAlertSchema }).(pulumi.BoolOutput)
}

type WebhookReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (WebhookReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookReceiverResponse)(nil)).Elem()
}

func (o WebhookReceiverResponseArrayOutput) ToWebhookReceiverResponseArrayOutput() WebhookReceiverResponseArrayOutput {
	return o
}

func (o WebhookReceiverResponseArrayOutput) ToWebhookReceiverResponseArrayOutputWithContext(ctx context.Context) WebhookReceiverResponseArrayOutput {
	return o
}

func (o WebhookReceiverResponseArrayOutput) Index(i pulumi.IntInput) WebhookReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebhookReceiverResponse {
		return vs[0].([]WebhookReceiverResponse)[vs[1].(int)]
	}).(WebhookReceiverResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(ArmRoleReceiverOutput{})
	pulumi.RegisterOutputType(ArmRoleReceiverArrayOutput{})
	pulumi.RegisterOutputType(ArmRoleReceiverResponseOutput{})
	pulumi.RegisterOutputType(ArmRoleReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(AutomationRunbookReceiverOutput{})
	pulumi.RegisterOutputType(AutomationRunbookReceiverArrayOutput{})
	pulumi.RegisterOutputType(AutomationRunbookReceiverResponseOutput{})
	pulumi.RegisterOutputType(AutomationRunbookReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(AzureAppPushReceiverOutput{})
	pulumi.RegisterOutputType(AzureAppPushReceiverArrayOutput{})
	pulumi.RegisterOutputType(AzureAppPushReceiverResponseOutput{})
	pulumi.RegisterOutputType(AzureAppPushReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(AzureFunctionReceiverOutput{})
	pulumi.RegisterOutputType(AzureFunctionReceiverArrayOutput{})
	pulumi.RegisterOutputType(AzureFunctionReceiverResponseOutput{})
	pulumi.RegisterOutputType(AzureFunctionReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(EmailReceiverOutput{})
	pulumi.RegisterOutputType(EmailReceiverArrayOutput{})
	pulumi.RegisterOutputType(EmailReceiverResponseOutput{})
	pulumi.RegisterOutputType(EmailReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(ItsmReceiverOutput{})
	pulumi.RegisterOutputType(ItsmReceiverArrayOutput{})
	pulumi.RegisterOutputType(ItsmReceiverResponseOutput{})
	pulumi.RegisterOutputType(ItsmReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(LogicAppReceiverOutput{})
	pulumi.RegisterOutputType(LogicAppReceiverArrayOutput{})
	pulumi.RegisterOutputType(LogicAppReceiverResponseOutput{})
	pulumi.RegisterOutputType(LogicAppReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(SmsReceiverOutput{})
	pulumi.RegisterOutputType(SmsReceiverArrayOutput{})
	pulumi.RegisterOutputType(SmsReceiverResponseOutput{})
	pulumi.RegisterOutputType(SmsReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(VoiceReceiverOutput{})
	pulumi.RegisterOutputType(VoiceReceiverArrayOutput{})
	pulumi.RegisterOutputType(VoiceReceiverResponseOutput{})
	pulumi.RegisterOutputType(VoiceReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(WebhookReceiverOutput{})
	pulumi.RegisterOutputType(WebhookReceiverArrayOutput{})
	pulumi.RegisterOutputType(WebhookReceiverResponseOutput{})
	pulumi.RegisterOutputType(WebhookReceiverResponseArrayOutput{})
}
