// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package insights

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Properties that define an Application Insights component resource.
type ApplicationInsightsComponentProperties struct {
	// Type of application being monitored.
	Application_Type string `pulumi:"Application_Type"`
	// Disable IP masking.
	DisableIpMasking *bool `pulumi:"DisableIpMasking"`
	// Used by the Application Insights system to determine what kind of flow this component was created by. This is to be set to 'Bluefield' when creating/updating a component via the REST API.
	Flow_Type *string `pulumi:"Flow_Type"`
	// The unique application ID created when a new application is added to HockeyApp, used for communications with HockeyApp.
	HockeyAppId *string `pulumi:"HockeyAppId"`
	// Purge data immediately after 30 days.
	ImmediatePurgeDataOn30Days *bool `pulumi:"ImmediatePurgeDataOn30Days"`
	// Indicates the flow of the ingestion.
	IngestionMode *string `pulumi:"IngestionMode"`
	// Describes what tool created this Application Insights component. Customers using this API should set this to the default 'rest'.
	Request_Source *string `pulumi:"Request_Source"`
	// Retention period in days.
	RetentionInDays *int `pulumi:"RetentionInDays"`
	// Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry.
	SamplingPercentage *float64 `pulumi:"SamplingPercentage"`
}

// ApplicationInsightsComponentPropertiesInput is an input type that accepts ApplicationInsightsComponentPropertiesArgs and ApplicationInsightsComponentPropertiesOutput values.
// You can construct a concrete instance of `ApplicationInsightsComponentPropertiesInput` via:
//
//          ApplicationInsightsComponentPropertiesArgs{...}
type ApplicationInsightsComponentPropertiesInput interface {
	pulumi.Input

	ToApplicationInsightsComponentPropertiesOutput() ApplicationInsightsComponentPropertiesOutput
	ToApplicationInsightsComponentPropertiesOutputWithContext(context.Context) ApplicationInsightsComponentPropertiesOutput
}

// Properties that define an Application Insights component resource.
type ApplicationInsightsComponentPropertiesArgs struct {
	// Type of application being monitored.
	Application_Type pulumi.StringInput `pulumi:"Application_Type"`
	// Disable IP masking.
	DisableIpMasking pulumi.BoolPtrInput `pulumi:"DisableIpMasking"`
	// Used by the Application Insights system to determine what kind of flow this component was created by. This is to be set to 'Bluefield' when creating/updating a component via the REST API.
	Flow_Type pulumi.StringPtrInput `pulumi:"Flow_Type"`
	// The unique application ID created when a new application is added to HockeyApp, used for communications with HockeyApp.
	HockeyAppId pulumi.StringPtrInput `pulumi:"HockeyAppId"`
	// Purge data immediately after 30 days.
	ImmediatePurgeDataOn30Days pulumi.BoolPtrInput `pulumi:"ImmediatePurgeDataOn30Days"`
	// Indicates the flow of the ingestion.
	IngestionMode pulumi.StringPtrInput `pulumi:"IngestionMode"`
	// Describes what tool created this Application Insights component. Customers using this API should set this to the default 'rest'.
	Request_Source pulumi.StringPtrInput `pulumi:"Request_Source"`
	// Retention period in days.
	RetentionInDays pulumi.IntPtrInput `pulumi:"RetentionInDays"`
	// Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry.
	SamplingPercentage pulumi.Float64PtrInput `pulumi:"SamplingPercentage"`
}

func (ApplicationInsightsComponentPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInsightsComponentProperties)(nil)).Elem()
}

func (i ApplicationInsightsComponentPropertiesArgs) ToApplicationInsightsComponentPropertiesOutput() ApplicationInsightsComponentPropertiesOutput {
	return i.ToApplicationInsightsComponentPropertiesOutputWithContext(context.Background())
}

func (i ApplicationInsightsComponentPropertiesArgs) ToApplicationInsightsComponentPropertiesOutputWithContext(ctx context.Context) ApplicationInsightsComponentPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInsightsComponentPropertiesOutput)
}

func (i ApplicationInsightsComponentPropertiesArgs) ToApplicationInsightsComponentPropertiesPtrOutput() ApplicationInsightsComponentPropertiesPtrOutput {
	return i.ToApplicationInsightsComponentPropertiesPtrOutputWithContext(context.Background())
}

func (i ApplicationInsightsComponentPropertiesArgs) ToApplicationInsightsComponentPropertiesPtrOutputWithContext(ctx context.Context) ApplicationInsightsComponentPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInsightsComponentPropertiesOutput).ToApplicationInsightsComponentPropertiesPtrOutputWithContext(ctx)
}

// ApplicationInsightsComponentPropertiesPtrInput is an input type that accepts ApplicationInsightsComponentPropertiesArgs, ApplicationInsightsComponentPropertiesPtr and ApplicationInsightsComponentPropertiesPtrOutput values.
// You can construct a concrete instance of `ApplicationInsightsComponentPropertiesPtrInput` via:
//
//          ApplicationInsightsComponentPropertiesArgs{...}
//
//  or:
//
//          nil
type ApplicationInsightsComponentPropertiesPtrInput interface {
	pulumi.Input

	ToApplicationInsightsComponentPropertiesPtrOutput() ApplicationInsightsComponentPropertiesPtrOutput
	ToApplicationInsightsComponentPropertiesPtrOutputWithContext(context.Context) ApplicationInsightsComponentPropertiesPtrOutput
}

type applicationInsightsComponentPropertiesPtrType ApplicationInsightsComponentPropertiesArgs

func ApplicationInsightsComponentPropertiesPtr(v *ApplicationInsightsComponentPropertiesArgs) ApplicationInsightsComponentPropertiesPtrInput {
	return (*applicationInsightsComponentPropertiesPtrType)(v)
}

func (*applicationInsightsComponentPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationInsightsComponentProperties)(nil)).Elem()
}

func (i *applicationInsightsComponentPropertiesPtrType) ToApplicationInsightsComponentPropertiesPtrOutput() ApplicationInsightsComponentPropertiesPtrOutput {
	return i.ToApplicationInsightsComponentPropertiesPtrOutputWithContext(context.Background())
}

func (i *applicationInsightsComponentPropertiesPtrType) ToApplicationInsightsComponentPropertiesPtrOutputWithContext(ctx context.Context) ApplicationInsightsComponentPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInsightsComponentPropertiesPtrOutput)
}

// Properties that define an Application Insights component resource.
type ApplicationInsightsComponentPropertiesOutput struct{ *pulumi.OutputState }

func (ApplicationInsightsComponentPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInsightsComponentProperties)(nil)).Elem()
}

func (o ApplicationInsightsComponentPropertiesOutput) ToApplicationInsightsComponentPropertiesOutput() ApplicationInsightsComponentPropertiesOutput {
	return o
}

func (o ApplicationInsightsComponentPropertiesOutput) ToApplicationInsightsComponentPropertiesOutputWithContext(ctx context.Context) ApplicationInsightsComponentPropertiesOutput {
	return o
}

func (o ApplicationInsightsComponentPropertiesOutput) ToApplicationInsightsComponentPropertiesPtrOutput() ApplicationInsightsComponentPropertiesPtrOutput {
	return o.ToApplicationInsightsComponentPropertiesPtrOutputWithContext(context.Background())
}

func (o ApplicationInsightsComponentPropertiesOutput) ToApplicationInsightsComponentPropertiesPtrOutputWithContext(ctx context.Context) ApplicationInsightsComponentPropertiesPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProperties) *ApplicationInsightsComponentProperties {
		return &v
	}).(ApplicationInsightsComponentPropertiesPtrOutput)
}

// Type of application being monitored.
func (o ApplicationInsightsComponentPropertiesOutput) Application_Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProperties) string { return v.Application_Type }).(pulumi.StringOutput)
}

// Disable IP masking.
func (o ApplicationInsightsComponentPropertiesOutput) DisableIpMasking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProperties) *bool { return v.DisableIpMasking }).(pulumi.BoolPtrOutput)
}

// Used by the Application Insights system to determine what kind of flow this component was created by. This is to be set to 'Bluefield' when creating/updating a component via the REST API.
func (o ApplicationInsightsComponentPropertiesOutput) Flow_Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProperties) *string { return v.Flow_Type }).(pulumi.StringPtrOutput)
}

// The unique application ID created when a new application is added to HockeyApp, used for communications with HockeyApp.
func (o ApplicationInsightsComponentPropertiesOutput) HockeyAppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProperties) *string { return v.HockeyAppId }).(pulumi.StringPtrOutput)
}

// Purge data immediately after 30 days.
func (o ApplicationInsightsComponentPropertiesOutput) ImmediatePurgeDataOn30Days() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProperties) *bool { return v.ImmediatePurgeDataOn30Days }).(pulumi.BoolPtrOutput)
}

// Indicates the flow of the ingestion.
func (o ApplicationInsightsComponentPropertiesOutput) IngestionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProperties) *string { return v.IngestionMode }).(pulumi.StringPtrOutput)
}

// Describes what tool created this Application Insights component. Customers using this API should set this to the default 'rest'.
func (o ApplicationInsightsComponentPropertiesOutput) Request_Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProperties) *string { return v.Request_Source }).(pulumi.StringPtrOutput)
}

// Retention period in days.
func (o ApplicationInsightsComponentPropertiesOutput) RetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProperties) *int { return v.RetentionInDays }).(pulumi.IntPtrOutput)
}

// Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry.
func (o ApplicationInsightsComponentPropertiesOutput) SamplingPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentProperties) *float64 { return v.SamplingPercentage }).(pulumi.Float64PtrOutput)
}

type ApplicationInsightsComponentPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ApplicationInsightsComponentPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationInsightsComponentProperties)(nil)).Elem()
}

func (o ApplicationInsightsComponentPropertiesPtrOutput) ToApplicationInsightsComponentPropertiesPtrOutput() ApplicationInsightsComponentPropertiesPtrOutput {
	return o
}

func (o ApplicationInsightsComponentPropertiesPtrOutput) ToApplicationInsightsComponentPropertiesPtrOutputWithContext(ctx context.Context) ApplicationInsightsComponentPropertiesPtrOutput {
	return o
}

func (o ApplicationInsightsComponentPropertiesPtrOutput) Elem() ApplicationInsightsComponentPropertiesOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProperties) ApplicationInsightsComponentProperties { return *v }).(ApplicationInsightsComponentPropertiesOutput)
}

// Type of application being monitored.
func (o ApplicationInsightsComponentPropertiesPtrOutput) Application_Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Application_Type
	}).(pulumi.StringPtrOutput)
}

// Disable IP masking.
func (o ApplicationInsightsComponentPropertiesPtrOutput) DisableIpMasking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProperties) *bool {
		if v == nil {
			return nil
		}
		return v.DisableIpMasking
	}).(pulumi.BoolPtrOutput)
}

// Used by the Application Insights system to determine what kind of flow this component was created by. This is to be set to 'Bluefield' when creating/updating a component via the REST API.
func (o ApplicationInsightsComponentPropertiesPtrOutput) Flow_Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProperties) *string {
		if v == nil {
			return nil
		}
		return v.Flow_Type
	}).(pulumi.StringPtrOutput)
}

// The unique application ID created when a new application is added to HockeyApp, used for communications with HockeyApp.
func (o ApplicationInsightsComponentPropertiesPtrOutput) HockeyAppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProperties) *string {
		if v == nil {
			return nil
		}
		return v.HockeyAppId
	}).(pulumi.StringPtrOutput)
}

// Purge data immediately after 30 days.
func (o ApplicationInsightsComponentPropertiesPtrOutput) ImmediatePurgeDataOn30Days() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProperties) *bool {
		if v == nil {
			return nil
		}
		return v.ImmediatePurgeDataOn30Days
	}).(pulumi.BoolPtrOutput)
}

// Indicates the flow of the ingestion.
func (o ApplicationInsightsComponentPropertiesPtrOutput) IngestionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProperties) *string {
		if v == nil {
			return nil
		}
		return v.IngestionMode
	}).(pulumi.StringPtrOutput)
}

// Describes what tool created this Application Insights component. Customers using this API should set this to the default 'rest'.
func (o ApplicationInsightsComponentPropertiesPtrOutput) Request_Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProperties) *string {
		if v == nil {
			return nil
		}
		return v.Request_Source
	}).(pulumi.StringPtrOutput)
}

// Retention period in days.
func (o ApplicationInsightsComponentPropertiesPtrOutput) RetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProperties) *int {
		if v == nil {
			return nil
		}
		return v.RetentionInDays
	}).(pulumi.IntPtrOutput)
}

// Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry.
func (o ApplicationInsightsComponentPropertiesPtrOutput) SamplingPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.SamplingPercentage
	}).(pulumi.Float64PtrOutput)
}

// Properties that define an Application Insights component resource.
type ApplicationInsightsComponentPropertiesResponse struct {
	// Application Insights Unique ID for your Application.
	AppId string `pulumi:"AppId"`
	// The unique ID of your application. This field mirrors the 'Name' field and cannot be changed.
	ApplicationId string `pulumi:"ApplicationId"`
	// Type of application being monitored.
	Application_Type string `pulumi:"Application_Type"`
	// Application Insights component connection string.
	ConnectionString string `pulumi:"ConnectionString"`
	// Creation Date for the Application Insights component, in ISO 8601 format.
	CreationDate string `pulumi:"CreationDate"`
	// Disable IP masking.
	DisableIpMasking *bool `pulumi:"DisableIpMasking"`
	// Used by the Application Insights system to determine what kind of flow this component was created by. This is to be set to 'Bluefield' when creating/updating a component via the REST API.
	Flow_Type *string `pulumi:"Flow_Type"`
	// The unique application ID created when a new application is added to HockeyApp, used for communications with HockeyApp.
	HockeyAppId *string `pulumi:"HockeyAppId"`
	// Token used to authenticate communications with between Application Insights and HockeyApp.
	HockeyAppToken string `pulumi:"HockeyAppToken"`
	// Purge data immediately after 30 days.
	ImmediatePurgeDataOn30Days *bool `pulumi:"ImmediatePurgeDataOn30Days"`
	// Indicates the flow of the ingestion.
	IngestionMode *string `pulumi:"IngestionMode"`
	// Application Insights Instrumentation key. A read-only value that applications can use to identify the destination for all telemetry sent to Azure Application Insights. This value will be supplied upon construction of each new Application Insights component.
	InstrumentationKey string `pulumi:"InstrumentationKey"`
	// List of linked private link scope resources.
	PrivateLinkScopedResources []PrivateLinkScopedResourceResponse `pulumi:"PrivateLinkScopedResources"`
	// Describes what tool created this Application Insights component. Customers using this API should set this to the default 'rest'.
	Request_Source *string `pulumi:"Request_Source"`
	// Retention period in days.
	RetentionInDays *int `pulumi:"RetentionInDays"`
	// Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry.
	SamplingPercentage *float64 `pulumi:"SamplingPercentage"`
	// Azure Tenant Id.
	TenantId string `pulumi:"TenantId"`
	// Current state of this component: whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
}

// ApplicationInsightsComponentPropertiesResponseInput is an input type that accepts ApplicationInsightsComponentPropertiesResponseArgs and ApplicationInsightsComponentPropertiesResponseOutput values.
// You can construct a concrete instance of `ApplicationInsightsComponentPropertiesResponseInput` via:
//
//          ApplicationInsightsComponentPropertiesResponseArgs{...}
type ApplicationInsightsComponentPropertiesResponseInput interface {
	pulumi.Input

	ToApplicationInsightsComponentPropertiesResponseOutput() ApplicationInsightsComponentPropertiesResponseOutput
	ToApplicationInsightsComponentPropertiesResponseOutputWithContext(context.Context) ApplicationInsightsComponentPropertiesResponseOutput
}

// Properties that define an Application Insights component resource.
type ApplicationInsightsComponentPropertiesResponseArgs struct {
	// Application Insights Unique ID for your Application.
	AppId pulumi.StringInput `pulumi:"AppId"`
	// The unique ID of your application. This field mirrors the 'Name' field and cannot be changed.
	ApplicationId pulumi.StringInput `pulumi:"ApplicationId"`
	// Type of application being monitored.
	Application_Type pulumi.StringInput `pulumi:"Application_Type"`
	// Application Insights component connection string.
	ConnectionString pulumi.StringInput `pulumi:"ConnectionString"`
	// Creation Date for the Application Insights component, in ISO 8601 format.
	CreationDate pulumi.StringInput `pulumi:"CreationDate"`
	// Disable IP masking.
	DisableIpMasking pulumi.BoolPtrInput `pulumi:"DisableIpMasking"`
	// Used by the Application Insights system to determine what kind of flow this component was created by. This is to be set to 'Bluefield' when creating/updating a component via the REST API.
	Flow_Type pulumi.StringPtrInput `pulumi:"Flow_Type"`
	// The unique application ID created when a new application is added to HockeyApp, used for communications with HockeyApp.
	HockeyAppId pulumi.StringPtrInput `pulumi:"HockeyAppId"`
	// Token used to authenticate communications with between Application Insights and HockeyApp.
	HockeyAppToken pulumi.StringInput `pulumi:"HockeyAppToken"`
	// Purge data immediately after 30 days.
	ImmediatePurgeDataOn30Days pulumi.BoolPtrInput `pulumi:"ImmediatePurgeDataOn30Days"`
	// Indicates the flow of the ingestion.
	IngestionMode pulumi.StringPtrInput `pulumi:"IngestionMode"`
	// Application Insights Instrumentation key. A read-only value that applications can use to identify the destination for all telemetry sent to Azure Application Insights. This value will be supplied upon construction of each new Application Insights component.
	InstrumentationKey pulumi.StringInput `pulumi:"InstrumentationKey"`
	// List of linked private link scope resources.
	PrivateLinkScopedResources PrivateLinkScopedResourceResponseArrayInput `pulumi:"PrivateLinkScopedResources"`
	// Describes what tool created this Application Insights component. Customers using this API should set this to the default 'rest'.
	Request_Source pulumi.StringPtrInput `pulumi:"Request_Source"`
	// Retention period in days.
	RetentionInDays pulumi.IntPtrInput `pulumi:"RetentionInDays"`
	// Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry.
	SamplingPercentage pulumi.Float64PtrInput `pulumi:"SamplingPercentage"`
	// Azure Tenant Id.
	TenantId pulumi.StringInput `pulumi:"TenantId"`
	// Current state of this component: whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
}

func (ApplicationInsightsComponentPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInsightsComponentPropertiesResponse)(nil)).Elem()
}

func (i ApplicationInsightsComponentPropertiesResponseArgs) ToApplicationInsightsComponentPropertiesResponseOutput() ApplicationInsightsComponentPropertiesResponseOutput {
	return i.ToApplicationInsightsComponentPropertiesResponseOutputWithContext(context.Background())
}

func (i ApplicationInsightsComponentPropertiesResponseArgs) ToApplicationInsightsComponentPropertiesResponseOutputWithContext(ctx context.Context) ApplicationInsightsComponentPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInsightsComponentPropertiesResponseOutput)
}

func (i ApplicationInsightsComponentPropertiesResponseArgs) ToApplicationInsightsComponentPropertiesResponsePtrOutput() ApplicationInsightsComponentPropertiesResponsePtrOutput {
	return i.ToApplicationInsightsComponentPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i ApplicationInsightsComponentPropertiesResponseArgs) ToApplicationInsightsComponentPropertiesResponsePtrOutputWithContext(ctx context.Context) ApplicationInsightsComponentPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInsightsComponentPropertiesResponseOutput).ToApplicationInsightsComponentPropertiesResponsePtrOutputWithContext(ctx)
}

// ApplicationInsightsComponentPropertiesResponsePtrInput is an input type that accepts ApplicationInsightsComponentPropertiesResponseArgs, ApplicationInsightsComponentPropertiesResponsePtr and ApplicationInsightsComponentPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `ApplicationInsightsComponentPropertiesResponsePtrInput` via:
//
//          ApplicationInsightsComponentPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type ApplicationInsightsComponentPropertiesResponsePtrInput interface {
	pulumi.Input

	ToApplicationInsightsComponentPropertiesResponsePtrOutput() ApplicationInsightsComponentPropertiesResponsePtrOutput
	ToApplicationInsightsComponentPropertiesResponsePtrOutputWithContext(context.Context) ApplicationInsightsComponentPropertiesResponsePtrOutput
}

type applicationInsightsComponentPropertiesResponsePtrType ApplicationInsightsComponentPropertiesResponseArgs

func ApplicationInsightsComponentPropertiesResponsePtr(v *ApplicationInsightsComponentPropertiesResponseArgs) ApplicationInsightsComponentPropertiesResponsePtrInput {
	return (*applicationInsightsComponentPropertiesResponsePtrType)(v)
}

func (*applicationInsightsComponentPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationInsightsComponentPropertiesResponse)(nil)).Elem()
}

func (i *applicationInsightsComponentPropertiesResponsePtrType) ToApplicationInsightsComponentPropertiesResponsePtrOutput() ApplicationInsightsComponentPropertiesResponsePtrOutput {
	return i.ToApplicationInsightsComponentPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *applicationInsightsComponentPropertiesResponsePtrType) ToApplicationInsightsComponentPropertiesResponsePtrOutputWithContext(ctx context.Context) ApplicationInsightsComponentPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInsightsComponentPropertiesResponsePtrOutput)
}

// Properties that define an Application Insights component resource.
type ApplicationInsightsComponentPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ApplicationInsightsComponentPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInsightsComponentPropertiesResponse)(nil)).Elem()
}

func (o ApplicationInsightsComponentPropertiesResponseOutput) ToApplicationInsightsComponentPropertiesResponseOutput() ApplicationInsightsComponentPropertiesResponseOutput {
	return o
}

func (o ApplicationInsightsComponentPropertiesResponseOutput) ToApplicationInsightsComponentPropertiesResponseOutputWithContext(ctx context.Context) ApplicationInsightsComponentPropertiesResponseOutput {
	return o
}

func (o ApplicationInsightsComponentPropertiesResponseOutput) ToApplicationInsightsComponentPropertiesResponsePtrOutput() ApplicationInsightsComponentPropertiesResponsePtrOutput {
	return o.ToApplicationInsightsComponentPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ApplicationInsightsComponentPropertiesResponseOutput) ToApplicationInsightsComponentPropertiesResponsePtrOutputWithContext(ctx context.Context) ApplicationInsightsComponentPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentPropertiesResponse) *ApplicationInsightsComponentPropertiesResponse {
		return &v
	}).(ApplicationInsightsComponentPropertiesResponsePtrOutput)
}

// Application Insights Unique ID for your Application.
func (o ApplicationInsightsComponentPropertiesResponseOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentPropertiesResponse) string { return v.AppId }).(pulumi.StringOutput)
}

// The unique ID of your application. This field mirrors the 'Name' field and cannot be changed.
func (o ApplicationInsightsComponentPropertiesResponseOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentPropertiesResponse) string { return v.ApplicationId }).(pulumi.StringOutput)
}

// Type of application being monitored.
func (o ApplicationInsightsComponentPropertiesResponseOutput) Application_Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentPropertiesResponse) string { return v.Application_Type }).(pulumi.StringOutput)
}

// Application Insights component connection string.
func (o ApplicationInsightsComponentPropertiesResponseOutput) ConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentPropertiesResponse) string { return v.ConnectionString }).(pulumi.StringOutput)
}

// Creation Date for the Application Insights component, in ISO 8601 format.
func (o ApplicationInsightsComponentPropertiesResponseOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentPropertiesResponse) string { return v.CreationDate }).(pulumi.StringOutput)
}

// Disable IP masking.
func (o ApplicationInsightsComponentPropertiesResponseOutput) DisableIpMasking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentPropertiesResponse) *bool { return v.DisableIpMasking }).(pulumi.BoolPtrOutput)
}

// Used by the Application Insights system to determine what kind of flow this component was created by. This is to be set to 'Bluefield' when creating/updating a component via the REST API.
func (o ApplicationInsightsComponentPropertiesResponseOutput) Flow_Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentPropertiesResponse) *string { return v.Flow_Type }).(pulumi.StringPtrOutput)
}

// The unique application ID created when a new application is added to HockeyApp, used for communications with HockeyApp.
func (o ApplicationInsightsComponentPropertiesResponseOutput) HockeyAppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentPropertiesResponse) *string { return v.HockeyAppId }).(pulumi.StringPtrOutput)
}

// Token used to authenticate communications with between Application Insights and HockeyApp.
func (o ApplicationInsightsComponentPropertiesResponseOutput) HockeyAppToken() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentPropertiesResponse) string { return v.HockeyAppToken }).(pulumi.StringOutput)
}

// Purge data immediately after 30 days.
func (o ApplicationInsightsComponentPropertiesResponseOutput) ImmediatePurgeDataOn30Days() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentPropertiesResponse) *bool { return v.ImmediatePurgeDataOn30Days }).(pulumi.BoolPtrOutput)
}

// Indicates the flow of the ingestion.
func (o ApplicationInsightsComponentPropertiesResponseOutput) IngestionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentPropertiesResponse) *string { return v.IngestionMode }).(pulumi.StringPtrOutput)
}

// Application Insights Instrumentation key. A read-only value that applications can use to identify the destination for all telemetry sent to Azure Application Insights. This value will be supplied upon construction of each new Application Insights component.
func (o ApplicationInsightsComponentPropertiesResponseOutput) InstrumentationKey() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentPropertiesResponse) string { return v.InstrumentationKey }).(pulumi.StringOutput)
}

// List of linked private link scope resources.
func (o ApplicationInsightsComponentPropertiesResponseOutput) PrivateLinkScopedResources() PrivateLinkScopedResourceResponseArrayOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentPropertiesResponse) []PrivateLinkScopedResourceResponse {
		return v.PrivateLinkScopedResources
	}).(PrivateLinkScopedResourceResponseArrayOutput)
}

// Describes what tool created this Application Insights component. Customers using this API should set this to the default 'rest'.
func (o ApplicationInsightsComponentPropertiesResponseOutput) Request_Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentPropertiesResponse) *string { return v.Request_Source }).(pulumi.StringPtrOutput)
}

// Retention period in days.
func (o ApplicationInsightsComponentPropertiesResponseOutput) RetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentPropertiesResponse) *int { return v.RetentionInDays }).(pulumi.IntPtrOutput)
}

// Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry.
func (o ApplicationInsightsComponentPropertiesResponseOutput) SamplingPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentPropertiesResponse) *float64 { return v.SamplingPercentage }).(pulumi.Float64PtrOutput)
}

// Azure Tenant Id.
func (o ApplicationInsightsComponentPropertiesResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentPropertiesResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Current state of this component: whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.
func (o ApplicationInsightsComponentPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInsightsComponentPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type ApplicationInsightsComponentPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ApplicationInsightsComponentPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationInsightsComponentPropertiesResponse)(nil)).Elem()
}

func (o ApplicationInsightsComponentPropertiesResponsePtrOutput) ToApplicationInsightsComponentPropertiesResponsePtrOutput() ApplicationInsightsComponentPropertiesResponsePtrOutput {
	return o
}

func (o ApplicationInsightsComponentPropertiesResponsePtrOutput) ToApplicationInsightsComponentPropertiesResponsePtrOutputWithContext(ctx context.Context) ApplicationInsightsComponentPropertiesResponsePtrOutput {
	return o
}

func (o ApplicationInsightsComponentPropertiesResponsePtrOutput) Elem() ApplicationInsightsComponentPropertiesResponseOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentPropertiesResponse) ApplicationInsightsComponentPropertiesResponse {
		return *v
	}).(ApplicationInsightsComponentPropertiesResponseOutput)
}

// Application Insights Unique ID for your Application.
func (o ApplicationInsightsComponentPropertiesResponsePtrOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AppId
	}).(pulumi.StringPtrOutput)
}

// The unique ID of your application. This field mirrors the 'Name' field and cannot be changed.
func (o ApplicationInsightsComponentPropertiesResponsePtrOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ApplicationId
	}).(pulumi.StringPtrOutput)
}

// Type of application being monitored.
func (o ApplicationInsightsComponentPropertiesResponsePtrOutput) Application_Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Application_Type
	}).(pulumi.StringPtrOutput)
}

// Application Insights component connection string.
func (o ApplicationInsightsComponentPropertiesResponsePtrOutput) ConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ConnectionString
	}).(pulumi.StringPtrOutput)
}

// Creation Date for the Application Insights component, in ISO 8601 format.
func (o ApplicationInsightsComponentPropertiesResponsePtrOutput) CreationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreationDate
	}).(pulumi.StringPtrOutput)
}

// Disable IP masking.
func (o ApplicationInsightsComponentPropertiesResponsePtrOutput) DisableIpMasking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.DisableIpMasking
	}).(pulumi.BoolPtrOutput)
}

// Used by the Application Insights system to determine what kind of flow this component was created by. This is to be set to 'Bluefield' when creating/updating a component via the REST API.
func (o ApplicationInsightsComponentPropertiesResponsePtrOutput) Flow_Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Flow_Type
	}).(pulumi.StringPtrOutput)
}

// The unique application ID created when a new application is added to HockeyApp, used for communications with HockeyApp.
func (o ApplicationInsightsComponentPropertiesResponsePtrOutput) HockeyAppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.HockeyAppId
	}).(pulumi.StringPtrOutput)
}

// Token used to authenticate communications with between Application Insights and HockeyApp.
func (o ApplicationInsightsComponentPropertiesResponsePtrOutput) HockeyAppToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.HockeyAppToken
	}).(pulumi.StringPtrOutput)
}

// Purge data immediately after 30 days.
func (o ApplicationInsightsComponentPropertiesResponsePtrOutput) ImmediatePurgeDataOn30Days() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ImmediatePurgeDataOn30Days
	}).(pulumi.BoolPtrOutput)
}

// Indicates the flow of the ingestion.
func (o ApplicationInsightsComponentPropertiesResponsePtrOutput) IngestionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.IngestionMode
	}).(pulumi.StringPtrOutput)
}

// Application Insights Instrumentation key. A read-only value that applications can use to identify the destination for all telemetry sent to Azure Application Insights. This value will be supplied upon construction of each new Application Insights component.
func (o ApplicationInsightsComponentPropertiesResponsePtrOutput) InstrumentationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.InstrumentationKey
	}).(pulumi.StringPtrOutput)
}

// List of linked private link scope resources.
func (o ApplicationInsightsComponentPropertiesResponsePtrOutput) PrivateLinkScopedResources() PrivateLinkScopedResourceResponseArrayOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentPropertiesResponse) []PrivateLinkScopedResourceResponse {
		if v == nil {
			return nil
		}
		return v.PrivateLinkScopedResources
	}).(PrivateLinkScopedResourceResponseArrayOutput)
}

// Describes what tool created this Application Insights component. Customers using this API should set this to the default 'rest'.
func (o ApplicationInsightsComponentPropertiesResponsePtrOutput) Request_Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Request_Source
	}).(pulumi.StringPtrOutput)
}

// Retention period in days.
func (o ApplicationInsightsComponentPropertiesResponsePtrOutput) RetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.RetentionInDays
	}).(pulumi.IntPtrOutput)
}

// Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry.
func (o ApplicationInsightsComponentPropertiesResponsePtrOutput) SamplingPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentPropertiesResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.SamplingPercentage
	}).(pulumi.Float64PtrOutput)
}

// Azure Tenant Id.
func (o ApplicationInsightsComponentPropertiesResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Current state of this component: whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.
func (o ApplicationInsightsComponentPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsComponentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// An Application Insights component definition.
type ComponentType struct {
	// The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone.
	Kind string `pulumi:"kind"`
	// Resource location
	Location string `pulumi:"location"`
	// Azure resource name
	Name string `pulumi:"name"`
	// Properties that define an Application Insights component resource.
	Properties ApplicationInsightsComponentPropertiesResponse `pulumi:"properties"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Azure resource type
	Type string `pulumi:"type"`
}

// ComponentTypeInput is an input type that accepts ComponentTypeArgs and ComponentTypeOutput values.
// You can construct a concrete instance of `ComponentTypeInput` via:
//
//          ComponentTypeArgs{...}
type ComponentTypeInput interface {
	pulumi.Input

	ToComponentTypeOutput() ComponentTypeOutput
	ToComponentTypeOutputWithContext(context.Context) ComponentTypeOutput
}

// An Application Insights component definition.
type ComponentTypeArgs struct {
	// The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone.
	Kind pulumi.StringInput `pulumi:"kind"`
	// Resource location
	Location pulumi.StringInput `pulumi:"location"`
	// Azure resource name
	Name pulumi.StringInput `pulumi:"name"`
	// Properties that define an Application Insights component resource.
	Properties ApplicationInsightsComponentPropertiesResponseInput `pulumi:"properties"`
	// Resource tags
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Azure resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (ComponentTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentType)(nil)).Elem()
}

func (i ComponentTypeArgs) ToComponentTypeOutput() ComponentTypeOutput {
	return i.ToComponentTypeOutputWithContext(context.Background())
}

func (i ComponentTypeArgs) ToComponentTypeOutputWithContext(ctx context.Context) ComponentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTypeOutput)
}

// An Application Insights component definition.
type ComponentTypeOutput struct{ *pulumi.OutputState }

func (ComponentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentType)(nil)).Elem()
}

func (o ComponentTypeOutput) ToComponentTypeOutput() ComponentTypeOutput {
	return o
}

func (o ComponentTypeOutput) ToComponentTypeOutputWithContext(ctx context.Context) ComponentTypeOutput {
	return o
}

// The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone.
func (o ComponentTypeOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentType) string { return v.Kind }).(pulumi.StringOutput)
}

// Resource location
func (o ComponentTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentType) string { return v.Location }).(pulumi.StringOutput)
}

// Azure resource name
func (o ComponentTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties that define an Application Insights component resource.
func (o ComponentTypeOutput) Properties() ApplicationInsightsComponentPropertiesResponseOutput {
	return o.ApplyT(func(v ComponentType) ApplicationInsightsComponentPropertiesResponse { return v.Properties }).(ApplicationInsightsComponentPropertiesResponseOutput)
}

// Resource tags
func (o ComponentTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure resource type
func (o ComponentTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentType) string { return v.Type }).(pulumi.StringOutput)
}

// Properties that define a Continuous Export configuration.
type ComponentExportconfigurationType struct {
	// The name of the Application Insights component.
	ApplicationName string `pulumi:"ApplicationName"`
	// The name of the destination storage container.
	ContainerName string `pulumi:"ContainerName"`
	// The name of destination account.
	DestinationAccountId string `pulumi:"DestinationAccountId"`
	// The destination account location ID.
	DestinationStorageLocationId string `pulumi:"DestinationStorageLocationId"`
	// The destination storage account subscription ID.
	DestinationStorageSubscriptionId string `pulumi:"DestinationStorageSubscriptionId"`
	// The destination type.
	DestinationType string `pulumi:"DestinationType"`
	// The unique ID of the export configuration inside an Application Insights component. It is auto generated when the Continuous Export configuration is created.
	ExportId string `pulumi:"ExportId"`
	// This indicates current Continuous Export configuration status. The possible values are 'Preparing', 'Success', 'Failure'.
	ExportStatus string `pulumi:"ExportStatus"`
	// The instrumentation key of the Application Insights component.
	InstrumentationKey string `pulumi:"InstrumentationKey"`
	// This will be 'true' if the Continuous Export configuration is enabled, otherwise it will be 'false'.
	IsUserEnabled string `pulumi:"IsUserEnabled"`
	// The last time the Continuous Export configuration started failing.
	LastGapTime string `pulumi:"LastGapTime"`
	// The last time data was successfully delivered to the destination storage container for this Continuous Export configuration.
	LastSuccessTime string `pulumi:"LastSuccessTime"`
	// Last time the Continuous Export configuration was updated.
	LastUserUpdate string `pulumi:"LastUserUpdate"`
	// Deprecated
	NotificationQueueEnabled *string `pulumi:"NotificationQueueEnabled"`
	// This is the reason the Continuous Export configuration started failing. It can be 'AzureStorageNotFound' or 'AzureStorageAccessDenied'.
	PermanentErrorReason string `pulumi:"PermanentErrorReason"`
	// This comma separated list of document types that will be exported. The possible values include 'Requests', 'Event', 'Exceptions', 'Metrics', 'PageViews', 'PageViewPerformance', 'Rdd', 'PerformanceCounters', 'Availability', 'Messages'.
	RecordTypes *string `pulumi:"RecordTypes"`
	// The resource group of the Application Insights component.
	ResourceGroup string `pulumi:"ResourceGroup"`
	// The name of the destination storage account.
	StorageName string `pulumi:"StorageName"`
	// The subscription of the Application Insights component.
	SubscriptionId string `pulumi:"SubscriptionId"`
}

// ComponentExportconfigurationTypeInput is an input type that accepts ComponentExportconfigurationTypeArgs and ComponentExportconfigurationTypeOutput values.
// You can construct a concrete instance of `ComponentExportconfigurationTypeInput` via:
//
//          ComponentExportconfigurationTypeArgs{...}
type ComponentExportconfigurationTypeInput interface {
	pulumi.Input

	ToComponentExportconfigurationTypeOutput() ComponentExportconfigurationTypeOutput
	ToComponentExportconfigurationTypeOutputWithContext(context.Context) ComponentExportconfigurationTypeOutput
}

// Properties that define a Continuous Export configuration.
type ComponentExportconfigurationTypeArgs struct {
	// The name of the Application Insights component.
	ApplicationName pulumi.StringInput `pulumi:"ApplicationName"`
	// The name of the destination storage container.
	ContainerName pulumi.StringInput `pulumi:"ContainerName"`
	// The name of destination account.
	DestinationAccountId pulumi.StringInput `pulumi:"DestinationAccountId"`
	// The destination account location ID.
	DestinationStorageLocationId pulumi.StringInput `pulumi:"DestinationStorageLocationId"`
	// The destination storage account subscription ID.
	DestinationStorageSubscriptionId pulumi.StringInput `pulumi:"DestinationStorageSubscriptionId"`
	// The destination type.
	DestinationType pulumi.StringInput `pulumi:"DestinationType"`
	// The unique ID of the export configuration inside an Application Insights component. It is auto generated when the Continuous Export configuration is created.
	ExportId pulumi.StringInput `pulumi:"ExportId"`
	// This indicates current Continuous Export configuration status. The possible values are 'Preparing', 'Success', 'Failure'.
	ExportStatus pulumi.StringInput `pulumi:"ExportStatus"`
	// The instrumentation key of the Application Insights component.
	InstrumentationKey pulumi.StringInput `pulumi:"InstrumentationKey"`
	// This will be 'true' if the Continuous Export configuration is enabled, otherwise it will be 'false'.
	IsUserEnabled pulumi.StringInput `pulumi:"IsUserEnabled"`
	// The last time the Continuous Export configuration started failing.
	LastGapTime pulumi.StringInput `pulumi:"LastGapTime"`
	// The last time data was successfully delivered to the destination storage container for this Continuous Export configuration.
	LastSuccessTime pulumi.StringInput `pulumi:"LastSuccessTime"`
	// Last time the Continuous Export configuration was updated.
	LastUserUpdate pulumi.StringInput `pulumi:"LastUserUpdate"`
	// Deprecated
	NotificationQueueEnabled pulumi.StringPtrInput `pulumi:"NotificationQueueEnabled"`
	// This is the reason the Continuous Export configuration started failing. It can be 'AzureStorageNotFound' or 'AzureStorageAccessDenied'.
	PermanentErrorReason pulumi.StringInput `pulumi:"PermanentErrorReason"`
	// This comma separated list of document types that will be exported. The possible values include 'Requests', 'Event', 'Exceptions', 'Metrics', 'PageViews', 'PageViewPerformance', 'Rdd', 'PerformanceCounters', 'Availability', 'Messages'.
	RecordTypes pulumi.StringPtrInput `pulumi:"RecordTypes"`
	// The resource group of the Application Insights component.
	ResourceGroup pulumi.StringInput `pulumi:"ResourceGroup"`
	// The name of the destination storage account.
	StorageName pulumi.StringInput `pulumi:"StorageName"`
	// The subscription of the Application Insights component.
	SubscriptionId pulumi.StringInput `pulumi:"SubscriptionId"`
}

func (ComponentExportconfigurationTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentExportconfigurationType)(nil)).Elem()
}

func (i ComponentExportconfigurationTypeArgs) ToComponentExportconfigurationTypeOutput() ComponentExportconfigurationTypeOutput {
	return i.ToComponentExportconfigurationTypeOutputWithContext(context.Background())
}

func (i ComponentExportconfigurationTypeArgs) ToComponentExportconfigurationTypeOutputWithContext(ctx context.Context) ComponentExportconfigurationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentExportconfigurationTypeOutput)
}

// Properties that define a Continuous Export configuration.
type ComponentExportconfigurationTypeOutput struct{ *pulumi.OutputState }

func (ComponentExportconfigurationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentExportconfigurationType)(nil)).Elem()
}

func (o ComponentExportconfigurationTypeOutput) ToComponentExportconfigurationTypeOutput() ComponentExportconfigurationTypeOutput {
	return o
}

func (o ComponentExportconfigurationTypeOutput) ToComponentExportconfigurationTypeOutputWithContext(ctx context.Context) ComponentExportconfigurationTypeOutput {
	return o
}

// The name of the Application Insights component.
func (o ComponentExportconfigurationTypeOutput) ApplicationName() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentExportconfigurationType) string { return v.ApplicationName }).(pulumi.StringOutput)
}

// The name of the destination storage container.
func (o ComponentExportconfigurationTypeOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentExportconfigurationType) string { return v.ContainerName }).(pulumi.StringOutput)
}

// The name of destination account.
func (o ComponentExportconfigurationTypeOutput) DestinationAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentExportconfigurationType) string { return v.DestinationAccountId }).(pulumi.StringOutput)
}

// The destination account location ID.
func (o ComponentExportconfigurationTypeOutput) DestinationStorageLocationId() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentExportconfigurationType) string { return v.DestinationStorageLocationId }).(pulumi.StringOutput)
}

// The destination storage account subscription ID.
func (o ComponentExportconfigurationTypeOutput) DestinationStorageSubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentExportconfigurationType) string { return v.DestinationStorageSubscriptionId }).(pulumi.StringOutput)
}

// The destination type.
func (o ComponentExportconfigurationTypeOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentExportconfigurationType) string { return v.DestinationType }).(pulumi.StringOutput)
}

// The unique ID of the export configuration inside an Application Insights component. It is auto generated when the Continuous Export configuration is created.
func (o ComponentExportconfigurationTypeOutput) ExportId() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentExportconfigurationType) string { return v.ExportId }).(pulumi.StringOutput)
}

// This indicates current Continuous Export configuration status. The possible values are 'Preparing', 'Success', 'Failure'.
func (o ComponentExportconfigurationTypeOutput) ExportStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentExportconfigurationType) string { return v.ExportStatus }).(pulumi.StringOutput)
}

// The instrumentation key of the Application Insights component.
func (o ComponentExportconfigurationTypeOutput) InstrumentationKey() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentExportconfigurationType) string { return v.InstrumentationKey }).(pulumi.StringOutput)
}

// This will be 'true' if the Continuous Export configuration is enabled, otherwise it will be 'false'.
func (o ComponentExportconfigurationTypeOutput) IsUserEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentExportconfigurationType) string { return v.IsUserEnabled }).(pulumi.StringOutput)
}

// The last time the Continuous Export configuration started failing.
func (o ComponentExportconfigurationTypeOutput) LastGapTime() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentExportconfigurationType) string { return v.LastGapTime }).(pulumi.StringOutput)
}

// The last time data was successfully delivered to the destination storage container for this Continuous Export configuration.
func (o ComponentExportconfigurationTypeOutput) LastSuccessTime() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentExportconfigurationType) string { return v.LastSuccessTime }).(pulumi.StringOutput)
}

// Last time the Continuous Export configuration was updated.
func (o ComponentExportconfigurationTypeOutput) LastUserUpdate() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentExportconfigurationType) string { return v.LastUserUpdate }).(pulumi.StringOutput)
}

// Deprecated
func (o ComponentExportconfigurationTypeOutput) NotificationQueueEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentExportconfigurationType) *string { return v.NotificationQueueEnabled }).(pulumi.StringPtrOutput)
}

// This is the reason the Continuous Export configuration started failing. It can be 'AzureStorageNotFound' or 'AzureStorageAccessDenied'.
func (o ComponentExportconfigurationTypeOutput) PermanentErrorReason() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentExportconfigurationType) string { return v.PermanentErrorReason }).(pulumi.StringOutput)
}

// This comma separated list of document types that will be exported. The possible values include 'Requests', 'Event', 'Exceptions', 'Metrics', 'PageViews', 'PageViewPerformance', 'Rdd', 'PerformanceCounters', 'Availability', 'Messages'.
func (o ComponentExportconfigurationTypeOutput) RecordTypes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentExportconfigurationType) *string { return v.RecordTypes }).(pulumi.StringPtrOutput)
}

// The resource group of the Application Insights component.
func (o ComponentExportconfigurationTypeOutput) ResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentExportconfigurationType) string { return v.ResourceGroup }).(pulumi.StringOutput)
}

// The name of the destination storage account.
func (o ComponentExportconfigurationTypeOutput) StorageName() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentExportconfigurationType) string { return v.StorageName }).(pulumi.StringOutput)
}

// The subscription of the Application Insights component.
func (o ComponentExportconfigurationTypeOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentExportconfigurationType) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

// Properties that define a favorite that is associated to an Application Insights component.
type ComponentFavoriteType struct {
	// Favorite category, as defined by the user at creation time.
	Category *string `pulumi:"Category"`
	// Configuration of this particular favorite, which are driven by the Azure portal UX. Configuration data is a string containing valid JSON
	Config *string `pulumi:"Config"`
	// Internally assigned unique id of the favorite definition.
	FavoriteId string `pulumi:"FavoriteId"`
	// Enum indicating if this favorite definition is owned by a specific user or is shared between all users with access to the Application Insights component.
	FavoriteType *string `pulumi:"FavoriteType"`
	// Flag denoting wether or not this favorite was generated from a template.
	IsGeneratedFromTemplate *bool `pulumi:"IsGeneratedFromTemplate"`
	// The user-defined name of the favorite.
	Name *string `pulumi:"Name"`
	// The source of the favorite definition.
	SourceType *string `pulumi:"SourceType"`
	// A list of 0 or more tags that are associated with this favorite definition
	Tags []string `pulumi:"Tags"`
	// Date and time in UTC of the last modification that was made to this favorite definition.
	TimeModified string `pulumi:"TimeModified"`
	// Unique user id of the specific user that owns this favorite.
	UserId string `pulumi:"UserId"`
	// This instance's version of the data model. This can change as new features are added that can be marked favorite. Current examples include MetricsExplorer (ME) and Search.
	Version *string `pulumi:"Version"`
}

// ComponentFavoriteTypeInput is an input type that accepts ComponentFavoriteTypeArgs and ComponentFavoriteTypeOutput values.
// You can construct a concrete instance of `ComponentFavoriteTypeInput` via:
//
//          ComponentFavoriteTypeArgs{...}
type ComponentFavoriteTypeInput interface {
	pulumi.Input

	ToComponentFavoriteTypeOutput() ComponentFavoriteTypeOutput
	ToComponentFavoriteTypeOutputWithContext(context.Context) ComponentFavoriteTypeOutput
}

// Properties that define a favorite that is associated to an Application Insights component.
type ComponentFavoriteTypeArgs struct {
	// Favorite category, as defined by the user at creation time.
	Category pulumi.StringPtrInput `pulumi:"Category"`
	// Configuration of this particular favorite, which are driven by the Azure portal UX. Configuration data is a string containing valid JSON
	Config pulumi.StringPtrInput `pulumi:"Config"`
	// Internally assigned unique id of the favorite definition.
	FavoriteId pulumi.StringInput `pulumi:"FavoriteId"`
	// Enum indicating if this favorite definition is owned by a specific user or is shared between all users with access to the Application Insights component.
	FavoriteType pulumi.StringPtrInput `pulumi:"FavoriteType"`
	// Flag denoting wether or not this favorite was generated from a template.
	IsGeneratedFromTemplate pulumi.BoolPtrInput `pulumi:"IsGeneratedFromTemplate"`
	// The user-defined name of the favorite.
	Name pulumi.StringPtrInput `pulumi:"Name"`
	// The source of the favorite definition.
	SourceType pulumi.StringPtrInput `pulumi:"SourceType"`
	// A list of 0 or more tags that are associated with this favorite definition
	Tags pulumi.StringArrayInput `pulumi:"Tags"`
	// Date and time in UTC of the last modification that was made to this favorite definition.
	TimeModified pulumi.StringInput `pulumi:"TimeModified"`
	// Unique user id of the specific user that owns this favorite.
	UserId pulumi.StringInput `pulumi:"UserId"`
	// This instance's version of the data model. This can change as new features are added that can be marked favorite. Current examples include MetricsExplorer (ME) and Search.
	Version pulumi.StringPtrInput `pulumi:"Version"`
}

func (ComponentFavoriteTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentFavoriteType)(nil)).Elem()
}

func (i ComponentFavoriteTypeArgs) ToComponentFavoriteTypeOutput() ComponentFavoriteTypeOutput {
	return i.ToComponentFavoriteTypeOutputWithContext(context.Background())
}

func (i ComponentFavoriteTypeArgs) ToComponentFavoriteTypeOutputWithContext(ctx context.Context) ComponentFavoriteTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentFavoriteTypeOutput)
}

// Properties that define a favorite that is associated to an Application Insights component.
type ComponentFavoriteTypeOutput struct{ *pulumi.OutputState }

func (ComponentFavoriteTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentFavoriteType)(nil)).Elem()
}

func (o ComponentFavoriteTypeOutput) ToComponentFavoriteTypeOutput() ComponentFavoriteTypeOutput {
	return o
}

func (o ComponentFavoriteTypeOutput) ToComponentFavoriteTypeOutputWithContext(ctx context.Context) ComponentFavoriteTypeOutput {
	return o
}

// Favorite category, as defined by the user at creation time.
func (o ComponentFavoriteTypeOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentFavoriteType) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Configuration of this particular favorite, which are driven by the Azure portal UX. Configuration data is a string containing valid JSON
func (o ComponentFavoriteTypeOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentFavoriteType) *string { return v.Config }).(pulumi.StringPtrOutput)
}

// Internally assigned unique id of the favorite definition.
func (o ComponentFavoriteTypeOutput) FavoriteId() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentFavoriteType) string { return v.FavoriteId }).(pulumi.StringOutput)
}

// Enum indicating if this favorite definition is owned by a specific user or is shared between all users with access to the Application Insights component.
func (o ComponentFavoriteTypeOutput) FavoriteType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentFavoriteType) *string { return v.FavoriteType }).(pulumi.StringPtrOutput)
}

// Flag denoting wether or not this favorite was generated from a template.
func (o ComponentFavoriteTypeOutput) IsGeneratedFromTemplate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentFavoriteType) *bool { return v.IsGeneratedFromTemplate }).(pulumi.BoolPtrOutput)
}

// The user-defined name of the favorite.
func (o ComponentFavoriteTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentFavoriteType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The source of the favorite definition.
func (o ComponentFavoriteTypeOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentFavoriteType) *string { return v.SourceType }).(pulumi.StringPtrOutput)
}

// A list of 0 or more tags that are associated with this favorite definition
func (o ComponentFavoriteTypeOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComponentFavoriteType) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Date and time in UTC of the last modification that was made to this favorite definition.
func (o ComponentFavoriteTypeOutput) TimeModified() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentFavoriteType) string { return v.TimeModified }).(pulumi.StringOutput)
}

// Unique user id of the specific user that owns this favorite.
func (o ComponentFavoriteTypeOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentFavoriteType) string { return v.UserId }).(pulumi.StringOutput)
}

// This instance's version of the data model. This can change as new features are added that can be marked favorite. Current examples include MetricsExplorer (ME) and Search.
func (o ComponentFavoriteTypeOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentFavoriteType) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// The metric alert resource.
type MetricAlertType struct {
	// Resource location
	Location string `pulumi:"location"`
	// Azure resource name
	Name string `pulumi:"name"`
	// The alert rule properties of the resource.
	Properties MetricAlertPropertiesResponse `pulumi:"properties"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Azure resource type
	Type string `pulumi:"type"`
}

// MetricAlertTypeInput is an input type that accepts MetricAlertTypeArgs and MetricAlertTypeOutput values.
// You can construct a concrete instance of `MetricAlertTypeInput` via:
//
//          MetricAlertTypeArgs{...}
type MetricAlertTypeInput interface {
	pulumi.Input

	ToMetricAlertTypeOutput() MetricAlertTypeOutput
	ToMetricAlertTypeOutputWithContext(context.Context) MetricAlertTypeOutput
}

// The metric alert resource.
type MetricAlertTypeArgs struct {
	// Resource location
	Location pulumi.StringInput `pulumi:"location"`
	// Azure resource name
	Name pulumi.StringInput `pulumi:"name"`
	// The alert rule properties of the resource.
	Properties MetricAlertPropertiesResponseInput `pulumi:"properties"`
	// Resource tags
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Azure resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (MetricAlertTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertType)(nil)).Elem()
}

func (i MetricAlertTypeArgs) ToMetricAlertTypeOutput() MetricAlertTypeOutput {
	return i.ToMetricAlertTypeOutputWithContext(context.Background())
}

func (i MetricAlertTypeArgs) ToMetricAlertTypeOutputWithContext(ctx context.Context) MetricAlertTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertTypeOutput)
}

// The metric alert resource.
type MetricAlertTypeOutput struct{ *pulumi.OutputState }

func (MetricAlertTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertType)(nil)).Elem()
}

func (o MetricAlertTypeOutput) ToMetricAlertTypeOutput() MetricAlertTypeOutput {
	return o
}

func (o MetricAlertTypeOutput) ToMetricAlertTypeOutputWithContext(ctx context.Context) MetricAlertTypeOutput {
	return o
}

// Resource location
func (o MetricAlertTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertType) string { return v.Location }).(pulumi.StringOutput)
}

// Azure resource name
func (o MetricAlertTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertType) string { return v.Name }).(pulumi.StringOutput)
}

// The alert rule properties of the resource.
func (o MetricAlertTypeOutput) Properties() MetricAlertPropertiesResponseOutput {
	return o.ApplyT(func(v MetricAlertType) MetricAlertPropertiesResponse { return v.Properties }).(MetricAlertPropertiesResponseOutput)
}

// Resource tags
func (o MetricAlertTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v MetricAlertType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure resource type
func (o MetricAlertTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertType) string { return v.Type }).(pulumi.StringOutput)
}

// An alert action.
type MetricAlertAction struct {
	// the id of the action group to use.
	ActionGroupId *string `pulumi:"actionGroupId"`
	// The properties of a webhook object.
	WebHookProperties map[string]string `pulumi:"webHookProperties"`
}

// MetricAlertActionInput is an input type that accepts MetricAlertActionArgs and MetricAlertActionOutput values.
// You can construct a concrete instance of `MetricAlertActionInput` via:
//
//          MetricAlertActionArgs{...}
type MetricAlertActionInput interface {
	pulumi.Input

	ToMetricAlertActionOutput() MetricAlertActionOutput
	ToMetricAlertActionOutputWithContext(context.Context) MetricAlertActionOutput
}

// An alert action.
type MetricAlertActionArgs struct {
	// the id of the action group to use.
	ActionGroupId pulumi.StringPtrInput `pulumi:"actionGroupId"`
	// The properties of a webhook object.
	WebHookProperties pulumi.StringMapInput `pulumi:"webHookProperties"`
}

func (MetricAlertActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertAction)(nil)).Elem()
}

func (i MetricAlertActionArgs) ToMetricAlertActionOutput() MetricAlertActionOutput {
	return i.ToMetricAlertActionOutputWithContext(context.Background())
}

func (i MetricAlertActionArgs) ToMetricAlertActionOutputWithContext(ctx context.Context) MetricAlertActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertActionOutput)
}

// MetricAlertActionArrayInput is an input type that accepts MetricAlertActionArray and MetricAlertActionArrayOutput values.
// You can construct a concrete instance of `MetricAlertActionArrayInput` via:
//
//          MetricAlertActionArray{ MetricAlertActionArgs{...} }
type MetricAlertActionArrayInput interface {
	pulumi.Input

	ToMetricAlertActionArrayOutput() MetricAlertActionArrayOutput
	ToMetricAlertActionArrayOutputWithContext(context.Context) MetricAlertActionArrayOutput
}

type MetricAlertActionArray []MetricAlertActionInput

func (MetricAlertActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertAction)(nil)).Elem()
}

func (i MetricAlertActionArray) ToMetricAlertActionArrayOutput() MetricAlertActionArrayOutput {
	return i.ToMetricAlertActionArrayOutputWithContext(context.Background())
}

func (i MetricAlertActionArray) ToMetricAlertActionArrayOutputWithContext(ctx context.Context) MetricAlertActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertActionArrayOutput)
}

// An alert action.
type MetricAlertActionOutput struct{ *pulumi.OutputState }

func (MetricAlertActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertAction)(nil)).Elem()
}

func (o MetricAlertActionOutput) ToMetricAlertActionOutput() MetricAlertActionOutput {
	return o
}

func (o MetricAlertActionOutput) ToMetricAlertActionOutputWithContext(ctx context.Context) MetricAlertActionOutput {
	return o
}

// the id of the action group to use.
func (o MetricAlertActionOutput) ActionGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlertAction) *string { return v.ActionGroupId }).(pulumi.StringPtrOutput)
}

// The properties of a webhook object.
func (o MetricAlertActionOutput) WebHookProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v MetricAlertAction) map[string]string { return v.WebHookProperties }).(pulumi.StringMapOutput)
}

type MetricAlertActionArrayOutput struct{ *pulumi.OutputState }

func (MetricAlertActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertAction)(nil)).Elem()
}

func (o MetricAlertActionArrayOutput) ToMetricAlertActionArrayOutput() MetricAlertActionArrayOutput {
	return o
}

func (o MetricAlertActionArrayOutput) ToMetricAlertActionArrayOutputWithContext(ctx context.Context) MetricAlertActionArrayOutput {
	return o
}

func (o MetricAlertActionArrayOutput) Index(i pulumi.IntInput) MetricAlertActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricAlertAction {
		return vs[0].([]MetricAlertAction)[vs[1].(int)]
	}).(MetricAlertActionOutput)
}

// An alert action.
type MetricAlertActionResponse struct {
	// the id of the action group to use.
	ActionGroupId *string `pulumi:"actionGroupId"`
	// The properties of a webhook object.
	WebHookProperties map[string]string `pulumi:"webHookProperties"`
}

// MetricAlertActionResponseInput is an input type that accepts MetricAlertActionResponseArgs and MetricAlertActionResponseOutput values.
// You can construct a concrete instance of `MetricAlertActionResponseInput` via:
//
//          MetricAlertActionResponseArgs{...}
type MetricAlertActionResponseInput interface {
	pulumi.Input

	ToMetricAlertActionResponseOutput() MetricAlertActionResponseOutput
	ToMetricAlertActionResponseOutputWithContext(context.Context) MetricAlertActionResponseOutput
}

// An alert action.
type MetricAlertActionResponseArgs struct {
	// the id of the action group to use.
	ActionGroupId pulumi.StringPtrInput `pulumi:"actionGroupId"`
	// The properties of a webhook object.
	WebHookProperties pulumi.StringMapInput `pulumi:"webHookProperties"`
}

func (MetricAlertActionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertActionResponse)(nil)).Elem()
}

func (i MetricAlertActionResponseArgs) ToMetricAlertActionResponseOutput() MetricAlertActionResponseOutput {
	return i.ToMetricAlertActionResponseOutputWithContext(context.Background())
}

func (i MetricAlertActionResponseArgs) ToMetricAlertActionResponseOutputWithContext(ctx context.Context) MetricAlertActionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertActionResponseOutput)
}

// MetricAlertActionResponseArrayInput is an input type that accepts MetricAlertActionResponseArray and MetricAlertActionResponseArrayOutput values.
// You can construct a concrete instance of `MetricAlertActionResponseArrayInput` via:
//
//          MetricAlertActionResponseArray{ MetricAlertActionResponseArgs{...} }
type MetricAlertActionResponseArrayInput interface {
	pulumi.Input

	ToMetricAlertActionResponseArrayOutput() MetricAlertActionResponseArrayOutput
	ToMetricAlertActionResponseArrayOutputWithContext(context.Context) MetricAlertActionResponseArrayOutput
}

type MetricAlertActionResponseArray []MetricAlertActionResponseInput

func (MetricAlertActionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertActionResponse)(nil)).Elem()
}

func (i MetricAlertActionResponseArray) ToMetricAlertActionResponseArrayOutput() MetricAlertActionResponseArrayOutput {
	return i.ToMetricAlertActionResponseArrayOutputWithContext(context.Background())
}

func (i MetricAlertActionResponseArray) ToMetricAlertActionResponseArrayOutputWithContext(ctx context.Context) MetricAlertActionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertActionResponseArrayOutput)
}

// An alert action.
type MetricAlertActionResponseOutput struct{ *pulumi.OutputState }

func (MetricAlertActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertActionResponse)(nil)).Elem()
}

func (o MetricAlertActionResponseOutput) ToMetricAlertActionResponseOutput() MetricAlertActionResponseOutput {
	return o
}

func (o MetricAlertActionResponseOutput) ToMetricAlertActionResponseOutputWithContext(ctx context.Context) MetricAlertActionResponseOutput {
	return o
}

// the id of the action group to use.
func (o MetricAlertActionResponseOutput) ActionGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlertActionResponse) *string { return v.ActionGroupId }).(pulumi.StringPtrOutput)
}

// The properties of a webhook object.
func (o MetricAlertActionResponseOutput) WebHookProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v MetricAlertActionResponse) map[string]string { return v.WebHookProperties }).(pulumi.StringMapOutput)
}

type MetricAlertActionResponseArrayOutput struct{ *pulumi.OutputState }

func (MetricAlertActionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertActionResponse)(nil)).Elem()
}

func (o MetricAlertActionResponseArrayOutput) ToMetricAlertActionResponseArrayOutput() MetricAlertActionResponseArrayOutput {
	return o
}

func (o MetricAlertActionResponseArrayOutput) ToMetricAlertActionResponseArrayOutputWithContext(ctx context.Context) MetricAlertActionResponseArrayOutput {
	return o
}

func (o MetricAlertActionResponseArrayOutput) Index(i pulumi.IntInput) MetricAlertActionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricAlertActionResponse {
		return vs[0].([]MetricAlertActionResponse)[vs[1].(int)]
	}).(MetricAlertActionResponseOutput)
}

// The rule criteria that defines the conditions of the alert rule.
type MetricAlertCriteria struct {
}

// MetricAlertCriteriaInput is an input type that accepts MetricAlertCriteriaArgs and MetricAlertCriteriaOutput values.
// You can construct a concrete instance of `MetricAlertCriteriaInput` via:
//
//          MetricAlertCriteriaArgs{...}
type MetricAlertCriteriaInput interface {
	pulumi.Input

	ToMetricAlertCriteriaOutput() MetricAlertCriteriaOutput
	ToMetricAlertCriteriaOutputWithContext(context.Context) MetricAlertCriteriaOutput
}

// The rule criteria that defines the conditions of the alert rule.
type MetricAlertCriteriaArgs struct {
}

func (MetricAlertCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertCriteria)(nil)).Elem()
}

func (i MetricAlertCriteriaArgs) ToMetricAlertCriteriaOutput() MetricAlertCriteriaOutput {
	return i.ToMetricAlertCriteriaOutputWithContext(context.Background())
}

func (i MetricAlertCriteriaArgs) ToMetricAlertCriteriaOutputWithContext(ctx context.Context) MetricAlertCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertCriteriaOutput)
}

func (i MetricAlertCriteriaArgs) ToMetricAlertCriteriaPtrOutput() MetricAlertCriteriaPtrOutput {
	return i.ToMetricAlertCriteriaPtrOutputWithContext(context.Background())
}

func (i MetricAlertCriteriaArgs) ToMetricAlertCriteriaPtrOutputWithContext(ctx context.Context) MetricAlertCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertCriteriaOutput).ToMetricAlertCriteriaPtrOutputWithContext(ctx)
}

// MetricAlertCriteriaPtrInput is an input type that accepts MetricAlertCriteriaArgs, MetricAlertCriteriaPtr and MetricAlertCriteriaPtrOutput values.
// You can construct a concrete instance of `MetricAlertCriteriaPtrInput` via:
//
//          MetricAlertCriteriaArgs{...}
//
//  or:
//
//          nil
type MetricAlertCriteriaPtrInput interface {
	pulumi.Input

	ToMetricAlertCriteriaPtrOutput() MetricAlertCriteriaPtrOutput
	ToMetricAlertCriteriaPtrOutputWithContext(context.Context) MetricAlertCriteriaPtrOutput
}

type metricAlertCriteriaPtrType MetricAlertCriteriaArgs

func MetricAlertCriteriaPtr(v *MetricAlertCriteriaArgs) MetricAlertCriteriaPtrInput {
	return (*metricAlertCriteriaPtrType)(v)
}

func (*metricAlertCriteriaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlertCriteria)(nil)).Elem()
}

func (i *metricAlertCriteriaPtrType) ToMetricAlertCriteriaPtrOutput() MetricAlertCriteriaPtrOutput {
	return i.ToMetricAlertCriteriaPtrOutputWithContext(context.Background())
}

func (i *metricAlertCriteriaPtrType) ToMetricAlertCriteriaPtrOutputWithContext(ctx context.Context) MetricAlertCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertCriteriaPtrOutput)
}

// The rule criteria that defines the conditions of the alert rule.
type MetricAlertCriteriaOutput struct{ *pulumi.OutputState }

func (MetricAlertCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertCriteria)(nil)).Elem()
}

func (o MetricAlertCriteriaOutput) ToMetricAlertCriteriaOutput() MetricAlertCriteriaOutput {
	return o
}

func (o MetricAlertCriteriaOutput) ToMetricAlertCriteriaOutputWithContext(ctx context.Context) MetricAlertCriteriaOutput {
	return o
}

func (o MetricAlertCriteriaOutput) ToMetricAlertCriteriaPtrOutput() MetricAlertCriteriaPtrOutput {
	return o.ToMetricAlertCriteriaPtrOutputWithContext(context.Background())
}

func (o MetricAlertCriteriaOutput) ToMetricAlertCriteriaPtrOutputWithContext(ctx context.Context) MetricAlertCriteriaPtrOutput {
	return o.ApplyT(func(v MetricAlertCriteria) *MetricAlertCriteria {
		return &v
	}).(MetricAlertCriteriaPtrOutput)
}

type MetricAlertCriteriaPtrOutput struct{ *pulumi.OutputState }

func (MetricAlertCriteriaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlertCriteria)(nil)).Elem()
}

func (o MetricAlertCriteriaPtrOutput) ToMetricAlertCriteriaPtrOutput() MetricAlertCriteriaPtrOutput {
	return o
}

func (o MetricAlertCriteriaPtrOutput) ToMetricAlertCriteriaPtrOutputWithContext(ctx context.Context) MetricAlertCriteriaPtrOutput {
	return o
}

func (o MetricAlertCriteriaPtrOutput) Elem() MetricAlertCriteriaOutput {
	return o.ApplyT(func(v *MetricAlertCriteria) MetricAlertCriteria { return *v }).(MetricAlertCriteriaOutput)
}

// The rule criteria that defines the conditions of the alert rule.
type MetricAlertCriteriaResponse struct {
}

// MetricAlertCriteriaResponseInput is an input type that accepts MetricAlertCriteriaResponseArgs and MetricAlertCriteriaResponseOutput values.
// You can construct a concrete instance of `MetricAlertCriteriaResponseInput` via:
//
//          MetricAlertCriteriaResponseArgs{...}
type MetricAlertCriteriaResponseInput interface {
	pulumi.Input

	ToMetricAlertCriteriaResponseOutput() MetricAlertCriteriaResponseOutput
	ToMetricAlertCriteriaResponseOutputWithContext(context.Context) MetricAlertCriteriaResponseOutput
}

// The rule criteria that defines the conditions of the alert rule.
type MetricAlertCriteriaResponseArgs struct {
}

func (MetricAlertCriteriaResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertCriteriaResponse)(nil)).Elem()
}

func (i MetricAlertCriteriaResponseArgs) ToMetricAlertCriteriaResponseOutput() MetricAlertCriteriaResponseOutput {
	return i.ToMetricAlertCriteriaResponseOutputWithContext(context.Background())
}

func (i MetricAlertCriteriaResponseArgs) ToMetricAlertCriteriaResponseOutputWithContext(ctx context.Context) MetricAlertCriteriaResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertCriteriaResponseOutput)
}

func (i MetricAlertCriteriaResponseArgs) ToMetricAlertCriteriaResponsePtrOutput() MetricAlertCriteriaResponsePtrOutput {
	return i.ToMetricAlertCriteriaResponsePtrOutputWithContext(context.Background())
}

func (i MetricAlertCriteriaResponseArgs) ToMetricAlertCriteriaResponsePtrOutputWithContext(ctx context.Context) MetricAlertCriteriaResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertCriteriaResponseOutput).ToMetricAlertCriteriaResponsePtrOutputWithContext(ctx)
}

// MetricAlertCriteriaResponsePtrInput is an input type that accepts MetricAlertCriteriaResponseArgs, MetricAlertCriteriaResponsePtr and MetricAlertCriteriaResponsePtrOutput values.
// You can construct a concrete instance of `MetricAlertCriteriaResponsePtrInput` via:
//
//          MetricAlertCriteriaResponseArgs{...}
//
//  or:
//
//          nil
type MetricAlertCriteriaResponsePtrInput interface {
	pulumi.Input

	ToMetricAlertCriteriaResponsePtrOutput() MetricAlertCriteriaResponsePtrOutput
	ToMetricAlertCriteriaResponsePtrOutputWithContext(context.Context) MetricAlertCriteriaResponsePtrOutput
}

type metricAlertCriteriaResponsePtrType MetricAlertCriteriaResponseArgs

func MetricAlertCriteriaResponsePtr(v *MetricAlertCriteriaResponseArgs) MetricAlertCriteriaResponsePtrInput {
	return (*metricAlertCriteriaResponsePtrType)(v)
}

func (*metricAlertCriteriaResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlertCriteriaResponse)(nil)).Elem()
}

func (i *metricAlertCriteriaResponsePtrType) ToMetricAlertCriteriaResponsePtrOutput() MetricAlertCriteriaResponsePtrOutput {
	return i.ToMetricAlertCriteriaResponsePtrOutputWithContext(context.Background())
}

func (i *metricAlertCriteriaResponsePtrType) ToMetricAlertCriteriaResponsePtrOutputWithContext(ctx context.Context) MetricAlertCriteriaResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertCriteriaResponsePtrOutput)
}

// The rule criteria that defines the conditions of the alert rule.
type MetricAlertCriteriaResponseOutput struct{ *pulumi.OutputState }

func (MetricAlertCriteriaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertCriteriaResponse)(nil)).Elem()
}

func (o MetricAlertCriteriaResponseOutput) ToMetricAlertCriteriaResponseOutput() MetricAlertCriteriaResponseOutput {
	return o
}

func (o MetricAlertCriteriaResponseOutput) ToMetricAlertCriteriaResponseOutputWithContext(ctx context.Context) MetricAlertCriteriaResponseOutput {
	return o
}

func (o MetricAlertCriteriaResponseOutput) ToMetricAlertCriteriaResponsePtrOutput() MetricAlertCriteriaResponsePtrOutput {
	return o.ToMetricAlertCriteriaResponsePtrOutputWithContext(context.Background())
}

func (o MetricAlertCriteriaResponseOutput) ToMetricAlertCriteriaResponsePtrOutputWithContext(ctx context.Context) MetricAlertCriteriaResponsePtrOutput {
	return o.ApplyT(func(v MetricAlertCriteriaResponse) *MetricAlertCriteriaResponse {
		return &v
	}).(MetricAlertCriteriaResponsePtrOutput)
}

type MetricAlertCriteriaResponsePtrOutput struct{ *pulumi.OutputState }

func (MetricAlertCriteriaResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlertCriteriaResponse)(nil)).Elem()
}

func (o MetricAlertCriteriaResponsePtrOutput) ToMetricAlertCriteriaResponsePtrOutput() MetricAlertCriteriaResponsePtrOutput {
	return o
}

func (o MetricAlertCriteriaResponsePtrOutput) ToMetricAlertCriteriaResponsePtrOutputWithContext(ctx context.Context) MetricAlertCriteriaResponsePtrOutput {
	return o
}

func (o MetricAlertCriteriaResponsePtrOutput) Elem() MetricAlertCriteriaResponseOutput {
	return o.ApplyT(func(v *MetricAlertCriteriaResponse) MetricAlertCriteriaResponse { return *v }).(MetricAlertCriteriaResponseOutput)
}

// An alert rule.
type MetricAlertProperties struct {
	// the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
	Actions []MetricAlertAction `pulumi:"actions"`
	// the flag that indicates whether the alert should be auto resolved or not. The default is true.
	AutoMitigate *bool `pulumi:"autoMitigate"`
	// defines the specific alert criteria information.
	Criteria MetricAlertCriteria `pulumi:"criteria"`
	// the description of the metric alert that will be included in the alert email.
	Description string `pulumi:"description"`
	// the flag that indicates whether the metric alert is enabled.
	Enabled bool `pulumi:"enabled"`
	// how often the metric alert is evaluated represented in ISO 8601 duration format.
	EvaluationFrequency string `pulumi:"evaluationFrequency"`
	// the list of resource id's that this metric alert is scoped to.
	Scopes []string `pulumi:"scopes"`
	// Alert severity {0, 1, 2, 3, 4}
	Severity int `pulumi:"severity"`
	// the region of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
	TargetResourceRegion *string `pulumi:"targetResourceRegion"`
	// the resource type of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
	TargetResourceType *string `pulumi:"targetResourceType"`
	// the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
	WindowSize string `pulumi:"windowSize"`
}

// MetricAlertPropertiesInput is an input type that accepts MetricAlertPropertiesArgs and MetricAlertPropertiesOutput values.
// You can construct a concrete instance of `MetricAlertPropertiesInput` via:
//
//          MetricAlertPropertiesArgs{...}
type MetricAlertPropertiesInput interface {
	pulumi.Input

	ToMetricAlertPropertiesOutput() MetricAlertPropertiesOutput
	ToMetricAlertPropertiesOutputWithContext(context.Context) MetricAlertPropertiesOutput
}

// An alert rule.
type MetricAlertPropertiesArgs struct {
	// the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
	Actions MetricAlertActionArrayInput `pulumi:"actions"`
	// the flag that indicates whether the alert should be auto resolved or not. The default is true.
	AutoMitigate pulumi.BoolPtrInput `pulumi:"autoMitigate"`
	// defines the specific alert criteria information.
	Criteria MetricAlertCriteriaInput `pulumi:"criteria"`
	// the description of the metric alert that will be included in the alert email.
	Description pulumi.StringInput `pulumi:"description"`
	// the flag that indicates whether the metric alert is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// how often the metric alert is evaluated represented in ISO 8601 duration format.
	EvaluationFrequency pulumi.StringInput `pulumi:"evaluationFrequency"`
	// the list of resource id's that this metric alert is scoped to.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
	// Alert severity {0, 1, 2, 3, 4}
	Severity pulumi.IntInput `pulumi:"severity"`
	// the region of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
	TargetResourceRegion pulumi.StringPtrInput `pulumi:"targetResourceRegion"`
	// the resource type of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
	TargetResourceType pulumi.StringPtrInput `pulumi:"targetResourceType"`
	// the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
	WindowSize pulumi.StringInput `pulumi:"windowSize"`
}

func (MetricAlertPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertProperties)(nil)).Elem()
}

func (i MetricAlertPropertiesArgs) ToMetricAlertPropertiesOutput() MetricAlertPropertiesOutput {
	return i.ToMetricAlertPropertiesOutputWithContext(context.Background())
}

func (i MetricAlertPropertiesArgs) ToMetricAlertPropertiesOutputWithContext(ctx context.Context) MetricAlertPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertPropertiesOutput)
}

func (i MetricAlertPropertiesArgs) ToMetricAlertPropertiesPtrOutput() MetricAlertPropertiesPtrOutput {
	return i.ToMetricAlertPropertiesPtrOutputWithContext(context.Background())
}

func (i MetricAlertPropertiesArgs) ToMetricAlertPropertiesPtrOutputWithContext(ctx context.Context) MetricAlertPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertPropertiesOutput).ToMetricAlertPropertiesPtrOutputWithContext(ctx)
}

// MetricAlertPropertiesPtrInput is an input type that accepts MetricAlertPropertiesArgs, MetricAlertPropertiesPtr and MetricAlertPropertiesPtrOutput values.
// You can construct a concrete instance of `MetricAlertPropertiesPtrInput` via:
//
//          MetricAlertPropertiesArgs{...}
//
//  or:
//
//          nil
type MetricAlertPropertiesPtrInput interface {
	pulumi.Input

	ToMetricAlertPropertiesPtrOutput() MetricAlertPropertiesPtrOutput
	ToMetricAlertPropertiesPtrOutputWithContext(context.Context) MetricAlertPropertiesPtrOutput
}

type metricAlertPropertiesPtrType MetricAlertPropertiesArgs

func MetricAlertPropertiesPtr(v *MetricAlertPropertiesArgs) MetricAlertPropertiesPtrInput {
	return (*metricAlertPropertiesPtrType)(v)
}

func (*metricAlertPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlertProperties)(nil)).Elem()
}

func (i *metricAlertPropertiesPtrType) ToMetricAlertPropertiesPtrOutput() MetricAlertPropertiesPtrOutput {
	return i.ToMetricAlertPropertiesPtrOutputWithContext(context.Background())
}

func (i *metricAlertPropertiesPtrType) ToMetricAlertPropertiesPtrOutputWithContext(ctx context.Context) MetricAlertPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertPropertiesPtrOutput)
}

// An alert rule.
type MetricAlertPropertiesOutput struct{ *pulumi.OutputState }

func (MetricAlertPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertProperties)(nil)).Elem()
}

func (o MetricAlertPropertiesOutput) ToMetricAlertPropertiesOutput() MetricAlertPropertiesOutput {
	return o
}

func (o MetricAlertPropertiesOutput) ToMetricAlertPropertiesOutputWithContext(ctx context.Context) MetricAlertPropertiesOutput {
	return o
}

func (o MetricAlertPropertiesOutput) ToMetricAlertPropertiesPtrOutput() MetricAlertPropertiesPtrOutput {
	return o.ToMetricAlertPropertiesPtrOutputWithContext(context.Background())
}

func (o MetricAlertPropertiesOutput) ToMetricAlertPropertiesPtrOutputWithContext(ctx context.Context) MetricAlertPropertiesPtrOutput {
	return o.ApplyT(func(v MetricAlertProperties) *MetricAlertProperties {
		return &v
	}).(MetricAlertPropertiesPtrOutput)
}

// the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
func (o MetricAlertPropertiesOutput) Actions() MetricAlertActionArrayOutput {
	return o.ApplyT(func(v MetricAlertProperties) []MetricAlertAction { return v.Actions }).(MetricAlertActionArrayOutput)
}

// the flag that indicates whether the alert should be auto resolved or not. The default is true.
func (o MetricAlertPropertiesOutput) AutoMitigate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetricAlertProperties) *bool { return v.AutoMitigate }).(pulumi.BoolPtrOutput)
}

// defines the specific alert criteria information.
func (o MetricAlertPropertiesOutput) Criteria() MetricAlertCriteriaOutput {
	return o.ApplyT(func(v MetricAlertProperties) MetricAlertCriteria { return v.Criteria }).(MetricAlertCriteriaOutput)
}

// the description of the metric alert that will be included in the alert email.
func (o MetricAlertPropertiesOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertProperties) string { return v.Description }).(pulumi.StringOutput)
}

// the flag that indicates whether the metric alert is enabled.
func (o MetricAlertPropertiesOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v MetricAlertProperties) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// how often the metric alert is evaluated represented in ISO 8601 duration format.
func (o MetricAlertPropertiesOutput) EvaluationFrequency() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertProperties) string { return v.EvaluationFrequency }).(pulumi.StringOutput)
}

// the list of resource id's that this metric alert is scoped to.
func (o MetricAlertPropertiesOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetricAlertProperties) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// Alert severity {0, 1, 2, 3, 4}
func (o MetricAlertPropertiesOutput) Severity() pulumi.IntOutput {
	return o.ApplyT(func(v MetricAlertProperties) int { return v.Severity }).(pulumi.IntOutput)
}

// the region of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
func (o MetricAlertPropertiesOutput) TargetResourceRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlertProperties) *string { return v.TargetResourceRegion }).(pulumi.StringPtrOutput)
}

// the resource type of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
func (o MetricAlertPropertiesOutput) TargetResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlertProperties) *string { return v.TargetResourceType }).(pulumi.StringPtrOutput)
}

// the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
func (o MetricAlertPropertiesOutput) WindowSize() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertProperties) string { return v.WindowSize }).(pulumi.StringOutput)
}

type MetricAlertPropertiesPtrOutput struct{ *pulumi.OutputState }

func (MetricAlertPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlertProperties)(nil)).Elem()
}

func (o MetricAlertPropertiesPtrOutput) ToMetricAlertPropertiesPtrOutput() MetricAlertPropertiesPtrOutput {
	return o
}

func (o MetricAlertPropertiesPtrOutput) ToMetricAlertPropertiesPtrOutputWithContext(ctx context.Context) MetricAlertPropertiesPtrOutput {
	return o
}

func (o MetricAlertPropertiesPtrOutput) Elem() MetricAlertPropertiesOutput {
	return o.ApplyT(func(v *MetricAlertProperties) MetricAlertProperties { return *v }).(MetricAlertPropertiesOutput)
}

// the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
func (o MetricAlertPropertiesPtrOutput) Actions() MetricAlertActionArrayOutput {
	return o.ApplyT(func(v *MetricAlertProperties) []MetricAlertAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(MetricAlertActionArrayOutput)
}

// the flag that indicates whether the alert should be auto resolved or not. The default is true.
func (o MetricAlertPropertiesPtrOutput) AutoMitigate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MetricAlertProperties) *bool {
		if v == nil {
			return nil
		}
		return v.AutoMitigate
	}).(pulumi.BoolPtrOutput)
}

// defines the specific alert criteria information.
func (o MetricAlertPropertiesPtrOutput) Criteria() MetricAlertCriteriaPtrOutput {
	return o.ApplyT(func(v *MetricAlertProperties) *MetricAlertCriteria {
		if v == nil {
			return nil
		}
		return &v.Criteria
	}).(MetricAlertCriteriaPtrOutput)
}

// the description of the metric alert that will be included in the alert email.
func (o MetricAlertPropertiesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlertProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Description
	}).(pulumi.StringPtrOutput)
}

// the flag that indicates whether the metric alert is enabled.
func (o MetricAlertPropertiesPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MetricAlertProperties) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// how often the metric alert is evaluated represented in ISO 8601 duration format.
func (o MetricAlertPropertiesPtrOutput) EvaluationFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlertProperties) *string {
		if v == nil {
			return nil
		}
		return &v.EvaluationFrequency
	}).(pulumi.StringPtrOutput)
}

// the list of resource id's that this metric alert is scoped to.
func (o MetricAlertPropertiesPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetricAlertProperties) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// Alert severity {0, 1, 2, 3, 4}
func (o MetricAlertPropertiesPtrOutput) Severity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MetricAlertProperties) *int {
		if v == nil {
			return nil
		}
		return &v.Severity
	}).(pulumi.IntPtrOutput)
}

// the region of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
func (o MetricAlertPropertiesPtrOutput) TargetResourceRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlertProperties) *string {
		if v == nil {
			return nil
		}
		return v.TargetResourceRegion
	}).(pulumi.StringPtrOutput)
}

// the resource type of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
func (o MetricAlertPropertiesPtrOutput) TargetResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlertProperties) *string {
		if v == nil {
			return nil
		}
		return v.TargetResourceType
	}).(pulumi.StringPtrOutput)
}

// the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
func (o MetricAlertPropertiesPtrOutput) WindowSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlertProperties) *string {
		if v == nil {
			return nil
		}
		return &v.WindowSize
	}).(pulumi.StringPtrOutput)
}

// An alert rule.
type MetricAlertPropertiesResponse struct {
	// the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
	Actions []MetricAlertActionResponse `pulumi:"actions"`
	// the flag that indicates whether the alert should be auto resolved or not. The default is true.
	AutoMitigate *bool `pulumi:"autoMitigate"`
	// defines the specific alert criteria information.
	Criteria MetricAlertCriteriaResponse `pulumi:"criteria"`
	// the description of the metric alert that will be included in the alert email.
	Description string `pulumi:"description"`
	// the flag that indicates whether the metric alert is enabled.
	Enabled bool `pulumi:"enabled"`
	// how often the metric alert is evaluated represented in ISO 8601 duration format.
	EvaluationFrequency string `pulumi:"evaluationFrequency"`
	// Last time the rule was updated in ISO8601 format.
	LastUpdatedTime string `pulumi:"lastUpdatedTime"`
	// the list of resource id's that this metric alert is scoped to.
	Scopes []string `pulumi:"scopes"`
	// Alert severity {0, 1, 2, 3, 4}
	Severity int `pulumi:"severity"`
	// the region of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
	TargetResourceRegion *string `pulumi:"targetResourceRegion"`
	// the resource type of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
	TargetResourceType *string `pulumi:"targetResourceType"`
	// the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
	WindowSize string `pulumi:"windowSize"`
}

// MetricAlertPropertiesResponseInput is an input type that accepts MetricAlertPropertiesResponseArgs and MetricAlertPropertiesResponseOutput values.
// You can construct a concrete instance of `MetricAlertPropertiesResponseInput` via:
//
//          MetricAlertPropertiesResponseArgs{...}
type MetricAlertPropertiesResponseInput interface {
	pulumi.Input

	ToMetricAlertPropertiesResponseOutput() MetricAlertPropertiesResponseOutput
	ToMetricAlertPropertiesResponseOutputWithContext(context.Context) MetricAlertPropertiesResponseOutput
}

// An alert rule.
type MetricAlertPropertiesResponseArgs struct {
	// the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
	Actions MetricAlertActionResponseArrayInput `pulumi:"actions"`
	// the flag that indicates whether the alert should be auto resolved or not. The default is true.
	AutoMitigate pulumi.BoolPtrInput `pulumi:"autoMitigate"`
	// defines the specific alert criteria information.
	Criteria MetricAlertCriteriaResponseInput `pulumi:"criteria"`
	// the description of the metric alert that will be included in the alert email.
	Description pulumi.StringInput `pulumi:"description"`
	// the flag that indicates whether the metric alert is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// how often the metric alert is evaluated represented in ISO 8601 duration format.
	EvaluationFrequency pulumi.StringInput `pulumi:"evaluationFrequency"`
	// Last time the rule was updated in ISO8601 format.
	LastUpdatedTime pulumi.StringInput `pulumi:"lastUpdatedTime"`
	// the list of resource id's that this metric alert is scoped to.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
	// Alert severity {0, 1, 2, 3, 4}
	Severity pulumi.IntInput `pulumi:"severity"`
	// the region of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
	TargetResourceRegion pulumi.StringPtrInput `pulumi:"targetResourceRegion"`
	// the resource type of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
	TargetResourceType pulumi.StringPtrInput `pulumi:"targetResourceType"`
	// the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
	WindowSize pulumi.StringInput `pulumi:"windowSize"`
}

func (MetricAlertPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertPropertiesResponse)(nil)).Elem()
}

func (i MetricAlertPropertiesResponseArgs) ToMetricAlertPropertiesResponseOutput() MetricAlertPropertiesResponseOutput {
	return i.ToMetricAlertPropertiesResponseOutputWithContext(context.Background())
}

func (i MetricAlertPropertiesResponseArgs) ToMetricAlertPropertiesResponseOutputWithContext(ctx context.Context) MetricAlertPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertPropertiesResponseOutput)
}

func (i MetricAlertPropertiesResponseArgs) ToMetricAlertPropertiesResponsePtrOutput() MetricAlertPropertiesResponsePtrOutput {
	return i.ToMetricAlertPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i MetricAlertPropertiesResponseArgs) ToMetricAlertPropertiesResponsePtrOutputWithContext(ctx context.Context) MetricAlertPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertPropertiesResponseOutput).ToMetricAlertPropertiesResponsePtrOutputWithContext(ctx)
}

// MetricAlertPropertiesResponsePtrInput is an input type that accepts MetricAlertPropertiesResponseArgs, MetricAlertPropertiesResponsePtr and MetricAlertPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `MetricAlertPropertiesResponsePtrInput` via:
//
//          MetricAlertPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type MetricAlertPropertiesResponsePtrInput interface {
	pulumi.Input

	ToMetricAlertPropertiesResponsePtrOutput() MetricAlertPropertiesResponsePtrOutput
	ToMetricAlertPropertiesResponsePtrOutputWithContext(context.Context) MetricAlertPropertiesResponsePtrOutput
}

type metricAlertPropertiesResponsePtrType MetricAlertPropertiesResponseArgs

func MetricAlertPropertiesResponsePtr(v *MetricAlertPropertiesResponseArgs) MetricAlertPropertiesResponsePtrInput {
	return (*metricAlertPropertiesResponsePtrType)(v)
}

func (*metricAlertPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlertPropertiesResponse)(nil)).Elem()
}

func (i *metricAlertPropertiesResponsePtrType) ToMetricAlertPropertiesResponsePtrOutput() MetricAlertPropertiesResponsePtrOutput {
	return i.ToMetricAlertPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *metricAlertPropertiesResponsePtrType) ToMetricAlertPropertiesResponsePtrOutputWithContext(ctx context.Context) MetricAlertPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertPropertiesResponsePtrOutput)
}

// An alert rule.
type MetricAlertPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MetricAlertPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertPropertiesResponse)(nil)).Elem()
}

func (o MetricAlertPropertiesResponseOutput) ToMetricAlertPropertiesResponseOutput() MetricAlertPropertiesResponseOutput {
	return o
}

func (o MetricAlertPropertiesResponseOutput) ToMetricAlertPropertiesResponseOutputWithContext(ctx context.Context) MetricAlertPropertiesResponseOutput {
	return o
}

func (o MetricAlertPropertiesResponseOutput) ToMetricAlertPropertiesResponsePtrOutput() MetricAlertPropertiesResponsePtrOutput {
	return o.ToMetricAlertPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o MetricAlertPropertiesResponseOutput) ToMetricAlertPropertiesResponsePtrOutputWithContext(ctx context.Context) MetricAlertPropertiesResponsePtrOutput {
	return o.ApplyT(func(v MetricAlertPropertiesResponse) *MetricAlertPropertiesResponse {
		return &v
	}).(MetricAlertPropertiesResponsePtrOutput)
}

// the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
func (o MetricAlertPropertiesResponseOutput) Actions() MetricAlertActionResponseArrayOutput {
	return o.ApplyT(func(v MetricAlertPropertiesResponse) []MetricAlertActionResponse { return v.Actions }).(MetricAlertActionResponseArrayOutput)
}

// the flag that indicates whether the alert should be auto resolved or not. The default is true.
func (o MetricAlertPropertiesResponseOutput) AutoMitigate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetricAlertPropertiesResponse) *bool { return v.AutoMitigate }).(pulumi.BoolPtrOutput)
}

// defines the specific alert criteria information.
func (o MetricAlertPropertiesResponseOutput) Criteria() MetricAlertCriteriaResponseOutput {
	return o.ApplyT(func(v MetricAlertPropertiesResponse) MetricAlertCriteriaResponse { return v.Criteria }).(MetricAlertCriteriaResponseOutput)
}

// the description of the metric alert that will be included in the alert email.
func (o MetricAlertPropertiesResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertPropertiesResponse) string { return v.Description }).(pulumi.StringOutput)
}

// the flag that indicates whether the metric alert is enabled.
func (o MetricAlertPropertiesResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v MetricAlertPropertiesResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// how often the metric alert is evaluated represented in ISO 8601 duration format.
func (o MetricAlertPropertiesResponseOutput) EvaluationFrequency() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertPropertiesResponse) string { return v.EvaluationFrequency }).(pulumi.StringOutput)
}

// Last time the rule was updated in ISO8601 format.
func (o MetricAlertPropertiesResponseOutput) LastUpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertPropertiesResponse) string { return v.LastUpdatedTime }).(pulumi.StringOutput)
}

// the list of resource id's that this metric alert is scoped to.
func (o MetricAlertPropertiesResponseOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetricAlertPropertiesResponse) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// Alert severity {0, 1, 2, 3, 4}
func (o MetricAlertPropertiesResponseOutput) Severity() pulumi.IntOutput {
	return o.ApplyT(func(v MetricAlertPropertiesResponse) int { return v.Severity }).(pulumi.IntOutput)
}

// the region of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
func (o MetricAlertPropertiesResponseOutput) TargetResourceRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlertPropertiesResponse) *string { return v.TargetResourceRegion }).(pulumi.StringPtrOutput)
}

// the resource type of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
func (o MetricAlertPropertiesResponseOutput) TargetResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlertPropertiesResponse) *string { return v.TargetResourceType }).(pulumi.StringPtrOutput)
}

// the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
func (o MetricAlertPropertiesResponseOutput) WindowSize() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertPropertiesResponse) string { return v.WindowSize }).(pulumi.StringOutput)
}

type MetricAlertPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (MetricAlertPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlertPropertiesResponse)(nil)).Elem()
}

func (o MetricAlertPropertiesResponsePtrOutput) ToMetricAlertPropertiesResponsePtrOutput() MetricAlertPropertiesResponsePtrOutput {
	return o
}

func (o MetricAlertPropertiesResponsePtrOutput) ToMetricAlertPropertiesResponsePtrOutputWithContext(ctx context.Context) MetricAlertPropertiesResponsePtrOutput {
	return o
}

func (o MetricAlertPropertiesResponsePtrOutput) Elem() MetricAlertPropertiesResponseOutput {
	return o.ApplyT(func(v *MetricAlertPropertiesResponse) MetricAlertPropertiesResponse { return *v }).(MetricAlertPropertiesResponseOutput)
}

// the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
func (o MetricAlertPropertiesResponsePtrOutput) Actions() MetricAlertActionResponseArrayOutput {
	return o.ApplyT(func(v *MetricAlertPropertiesResponse) []MetricAlertActionResponse {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(MetricAlertActionResponseArrayOutput)
}

// the flag that indicates whether the alert should be auto resolved or not. The default is true.
func (o MetricAlertPropertiesResponsePtrOutput) AutoMitigate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MetricAlertPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AutoMitigate
	}).(pulumi.BoolPtrOutput)
}

// defines the specific alert criteria information.
func (o MetricAlertPropertiesResponsePtrOutput) Criteria() MetricAlertCriteriaResponsePtrOutput {
	return o.ApplyT(func(v *MetricAlertPropertiesResponse) *MetricAlertCriteriaResponse {
		if v == nil {
			return nil
		}
		return &v.Criteria
	}).(MetricAlertCriteriaResponsePtrOutput)
}

// the description of the metric alert that will be included in the alert email.
func (o MetricAlertPropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlertPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Description
	}).(pulumi.StringPtrOutput)
}

// the flag that indicates whether the metric alert is enabled.
func (o MetricAlertPropertiesResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MetricAlertPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// how often the metric alert is evaluated represented in ISO 8601 duration format.
func (o MetricAlertPropertiesResponsePtrOutput) EvaluationFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlertPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EvaluationFrequency
	}).(pulumi.StringPtrOutput)
}

// Last time the rule was updated in ISO8601 format.
func (o MetricAlertPropertiesResponsePtrOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlertPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastUpdatedTime
	}).(pulumi.StringPtrOutput)
}

// the list of resource id's that this metric alert is scoped to.
func (o MetricAlertPropertiesResponsePtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetricAlertPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// Alert severity {0, 1, 2, 3, 4}
func (o MetricAlertPropertiesResponsePtrOutput) Severity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MetricAlertPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Severity
	}).(pulumi.IntPtrOutput)
}

// the region of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
func (o MetricAlertPropertiesResponsePtrOutput) TargetResourceRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlertPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.TargetResourceRegion
	}).(pulumi.StringPtrOutput)
}

// the resource type of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
func (o MetricAlertPropertiesResponsePtrOutput) TargetResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlertPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.TargetResourceType
	}).(pulumi.StringPtrOutput)
}

// the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
func (o MetricAlertPropertiesResponsePtrOutput) WindowSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlertPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.WindowSize
	}).(pulumi.StringPtrOutput)
}

// The private link scope resource reference.
type PrivateLinkScopedResource struct {
	// The full resource Id of the private link scope resource.
	ResourceId *string `pulumi:"ResourceId"`
	// The private link scope unique Identifier.
	ScopeId *string `pulumi:"ScopeId"`
}

// PrivateLinkScopedResourceInput is an input type that accepts PrivateLinkScopedResourceArgs and PrivateLinkScopedResourceOutput values.
// You can construct a concrete instance of `PrivateLinkScopedResourceInput` via:
//
//          PrivateLinkScopedResourceArgs{...}
type PrivateLinkScopedResourceInput interface {
	pulumi.Input

	ToPrivateLinkScopedResourceOutput() PrivateLinkScopedResourceOutput
	ToPrivateLinkScopedResourceOutputWithContext(context.Context) PrivateLinkScopedResourceOutput
}

// The private link scope resource reference.
type PrivateLinkScopedResourceArgs struct {
	// The full resource Id of the private link scope resource.
	ResourceId pulumi.StringPtrInput `pulumi:"ResourceId"`
	// The private link scope unique Identifier.
	ScopeId pulumi.StringPtrInput `pulumi:"ScopeId"`
}

func (PrivateLinkScopedResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkScopedResource)(nil)).Elem()
}

func (i PrivateLinkScopedResourceArgs) ToPrivateLinkScopedResourceOutput() PrivateLinkScopedResourceOutput {
	return i.ToPrivateLinkScopedResourceOutputWithContext(context.Background())
}

func (i PrivateLinkScopedResourceArgs) ToPrivateLinkScopedResourceOutputWithContext(ctx context.Context) PrivateLinkScopedResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkScopedResourceOutput)
}

// The private link scope resource reference.
type PrivateLinkScopedResourceOutput struct{ *pulumi.OutputState }

func (PrivateLinkScopedResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkScopedResource)(nil)).Elem()
}

func (o PrivateLinkScopedResourceOutput) ToPrivateLinkScopedResourceOutput() PrivateLinkScopedResourceOutput {
	return o
}

func (o PrivateLinkScopedResourceOutput) ToPrivateLinkScopedResourceOutputWithContext(ctx context.Context) PrivateLinkScopedResourceOutput {
	return o
}

// The full resource Id of the private link scope resource.
func (o PrivateLinkScopedResourceOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkScopedResource) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// The private link scope unique Identifier.
func (o PrivateLinkScopedResourceOutput) ScopeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkScopedResource) *string { return v.ScopeId }).(pulumi.StringPtrOutput)
}

// The private link scope resource reference.
type PrivateLinkScopedResourceResponse struct {
	// The full resource Id of the private link scope resource.
	ResourceId *string `pulumi:"ResourceId"`
	// The private link scope unique Identifier.
	ScopeId *string `pulumi:"ScopeId"`
}

// PrivateLinkScopedResourceResponseInput is an input type that accepts PrivateLinkScopedResourceResponseArgs and PrivateLinkScopedResourceResponseOutput values.
// You can construct a concrete instance of `PrivateLinkScopedResourceResponseInput` via:
//
//          PrivateLinkScopedResourceResponseArgs{...}
type PrivateLinkScopedResourceResponseInput interface {
	pulumi.Input

	ToPrivateLinkScopedResourceResponseOutput() PrivateLinkScopedResourceResponseOutput
	ToPrivateLinkScopedResourceResponseOutputWithContext(context.Context) PrivateLinkScopedResourceResponseOutput
}

// The private link scope resource reference.
type PrivateLinkScopedResourceResponseArgs struct {
	// The full resource Id of the private link scope resource.
	ResourceId pulumi.StringPtrInput `pulumi:"ResourceId"`
	// The private link scope unique Identifier.
	ScopeId pulumi.StringPtrInput `pulumi:"ScopeId"`
}

func (PrivateLinkScopedResourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkScopedResourceResponse)(nil)).Elem()
}

func (i PrivateLinkScopedResourceResponseArgs) ToPrivateLinkScopedResourceResponseOutput() PrivateLinkScopedResourceResponseOutput {
	return i.ToPrivateLinkScopedResourceResponseOutputWithContext(context.Background())
}

func (i PrivateLinkScopedResourceResponseArgs) ToPrivateLinkScopedResourceResponseOutputWithContext(ctx context.Context) PrivateLinkScopedResourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkScopedResourceResponseOutput)
}

// PrivateLinkScopedResourceResponseArrayInput is an input type that accepts PrivateLinkScopedResourceResponseArray and PrivateLinkScopedResourceResponseArrayOutput values.
// You can construct a concrete instance of `PrivateLinkScopedResourceResponseArrayInput` via:
//
//          PrivateLinkScopedResourceResponseArray{ PrivateLinkScopedResourceResponseArgs{...} }
type PrivateLinkScopedResourceResponseArrayInput interface {
	pulumi.Input

	ToPrivateLinkScopedResourceResponseArrayOutput() PrivateLinkScopedResourceResponseArrayOutput
	ToPrivateLinkScopedResourceResponseArrayOutputWithContext(context.Context) PrivateLinkScopedResourceResponseArrayOutput
}

type PrivateLinkScopedResourceResponseArray []PrivateLinkScopedResourceResponseInput

func (PrivateLinkScopedResourceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateLinkScopedResourceResponse)(nil)).Elem()
}

func (i PrivateLinkScopedResourceResponseArray) ToPrivateLinkScopedResourceResponseArrayOutput() PrivateLinkScopedResourceResponseArrayOutput {
	return i.ToPrivateLinkScopedResourceResponseArrayOutputWithContext(context.Background())
}

func (i PrivateLinkScopedResourceResponseArray) ToPrivateLinkScopedResourceResponseArrayOutputWithContext(ctx context.Context) PrivateLinkScopedResourceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkScopedResourceResponseArrayOutput)
}

// The private link scope resource reference.
type PrivateLinkScopedResourceResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkScopedResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkScopedResourceResponse)(nil)).Elem()
}

func (o PrivateLinkScopedResourceResponseOutput) ToPrivateLinkScopedResourceResponseOutput() PrivateLinkScopedResourceResponseOutput {
	return o
}

func (o PrivateLinkScopedResourceResponseOutput) ToPrivateLinkScopedResourceResponseOutputWithContext(ctx context.Context) PrivateLinkScopedResourceResponseOutput {
	return o
}

// The full resource Id of the private link scope resource.
func (o PrivateLinkScopedResourceResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkScopedResourceResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// The private link scope unique Identifier.
func (o PrivateLinkScopedResourceResponseOutput) ScopeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkScopedResourceResponse) *string { return v.ScopeId }).(pulumi.StringPtrOutput)
}

type PrivateLinkScopedResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateLinkScopedResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateLinkScopedResourceResponse)(nil)).Elem()
}

func (o PrivateLinkScopedResourceResponseArrayOutput) ToPrivateLinkScopedResourceResponseArrayOutput() PrivateLinkScopedResourceResponseArrayOutput {
	return o
}

func (o PrivateLinkScopedResourceResponseArrayOutput) ToPrivateLinkScopedResourceResponseArrayOutputWithContext(ctx context.Context) PrivateLinkScopedResourceResponseArrayOutput {
	return o
}

func (o PrivateLinkScopedResourceResponseArrayOutput) Index(i pulumi.IntInput) PrivateLinkScopedResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateLinkScopedResourceResponse {
		return vs[0].([]PrivateLinkScopedResourceResponse)[vs[1].(int)]
	}).(PrivateLinkScopedResourceResponseOutput)
}

// Geo-physical location to run a web test from. You must specify one or more locations for the test to run from.
type WebTestGeolocation struct {
	// Location ID for the webtest to run from.
	Id *string `pulumi:"Id"`
}

// WebTestGeolocationInput is an input type that accepts WebTestGeolocationArgs and WebTestGeolocationOutput values.
// You can construct a concrete instance of `WebTestGeolocationInput` via:
//
//          WebTestGeolocationArgs{...}
type WebTestGeolocationInput interface {
	pulumi.Input

	ToWebTestGeolocationOutput() WebTestGeolocationOutput
	ToWebTestGeolocationOutputWithContext(context.Context) WebTestGeolocationOutput
}

// Geo-physical location to run a web test from. You must specify one or more locations for the test to run from.
type WebTestGeolocationArgs struct {
	// Location ID for the webtest to run from.
	Id pulumi.StringPtrInput `pulumi:"Id"`
}

func (WebTestGeolocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestGeolocation)(nil)).Elem()
}

func (i WebTestGeolocationArgs) ToWebTestGeolocationOutput() WebTestGeolocationOutput {
	return i.ToWebTestGeolocationOutputWithContext(context.Background())
}

func (i WebTestGeolocationArgs) ToWebTestGeolocationOutputWithContext(ctx context.Context) WebTestGeolocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestGeolocationOutput)
}

// WebTestGeolocationArrayInput is an input type that accepts WebTestGeolocationArray and WebTestGeolocationArrayOutput values.
// You can construct a concrete instance of `WebTestGeolocationArrayInput` via:
//
//          WebTestGeolocationArray{ WebTestGeolocationArgs{...} }
type WebTestGeolocationArrayInput interface {
	pulumi.Input

	ToWebTestGeolocationArrayOutput() WebTestGeolocationArrayOutput
	ToWebTestGeolocationArrayOutputWithContext(context.Context) WebTestGeolocationArrayOutput
}

type WebTestGeolocationArray []WebTestGeolocationInput

func (WebTestGeolocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebTestGeolocation)(nil)).Elem()
}

func (i WebTestGeolocationArray) ToWebTestGeolocationArrayOutput() WebTestGeolocationArrayOutput {
	return i.ToWebTestGeolocationArrayOutputWithContext(context.Background())
}

func (i WebTestGeolocationArray) ToWebTestGeolocationArrayOutputWithContext(ctx context.Context) WebTestGeolocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestGeolocationArrayOutput)
}

// Geo-physical location to run a web test from. You must specify one or more locations for the test to run from.
type WebTestGeolocationOutput struct{ *pulumi.OutputState }

func (WebTestGeolocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestGeolocation)(nil)).Elem()
}

func (o WebTestGeolocationOutput) ToWebTestGeolocationOutput() WebTestGeolocationOutput {
	return o
}

func (o WebTestGeolocationOutput) ToWebTestGeolocationOutputWithContext(ctx context.Context) WebTestGeolocationOutput {
	return o
}

// Location ID for the webtest to run from.
func (o WebTestGeolocationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestGeolocation) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type WebTestGeolocationArrayOutput struct{ *pulumi.OutputState }

func (WebTestGeolocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebTestGeolocation)(nil)).Elem()
}

func (o WebTestGeolocationArrayOutput) ToWebTestGeolocationArrayOutput() WebTestGeolocationArrayOutput {
	return o
}

func (o WebTestGeolocationArrayOutput) ToWebTestGeolocationArrayOutputWithContext(ctx context.Context) WebTestGeolocationArrayOutput {
	return o
}

func (o WebTestGeolocationArrayOutput) Index(i pulumi.IntInput) WebTestGeolocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebTestGeolocation {
		return vs[0].([]WebTestGeolocation)[vs[1].(int)]
	}).(WebTestGeolocationOutput)
}

// Geo-physical location to run a web test from. You must specify one or more locations for the test to run from.
type WebTestGeolocationResponse struct {
	// Location ID for the webtest to run from.
	Id *string `pulumi:"Id"`
}

// WebTestGeolocationResponseInput is an input type that accepts WebTestGeolocationResponseArgs and WebTestGeolocationResponseOutput values.
// You can construct a concrete instance of `WebTestGeolocationResponseInput` via:
//
//          WebTestGeolocationResponseArgs{...}
type WebTestGeolocationResponseInput interface {
	pulumi.Input

	ToWebTestGeolocationResponseOutput() WebTestGeolocationResponseOutput
	ToWebTestGeolocationResponseOutputWithContext(context.Context) WebTestGeolocationResponseOutput
}

// Geo-physical location to run a web test from. You must specify one or more locations for the test to run from.
type WebTestGeolocationResponseArgs struct {
	// Location ID for the webtest to run from.
	Id pulumi.StringPtrInput `pulumi:"Id"`
}

func (WebTestGeolocationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestGeolocationResponse)(nil)).Elem()
}

func (i WebTestGeolocationResponseArgs) ToWebTestGeolocationResponseOutput() WebTestGeolocationResponseOutput {
	return i.ToWebTestGeolocationResponseOutputWithContext(context.Background())
}

func (i WebTestGeolocationResponseArgs) ToWebTestGeolocationResponseOutputWithContext(ctx context.Context) WebTestGeolocationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestGeolocationResponseOutput)
}

// WebTestGeolocationResponseArrayInput is an input type that accepts WebTestGeolocationResponseArray and WebTestGeolocationResponseArrayOutput values.
// You can construct a concrete instance of `WebTestGeolocationResponseArrayInput` via:
//
//          WebTestGeolocationResponseArray{ WebTestGeolocationResponseArgs{...} }
type WebTestGeolocationResponseArrayInput interface {
	pulumi.Input

	ToWebTestGeolocationResponseArrayOutput() WebTestGeolocationResponseArrayOutput
	ToWebTestGeolocationResponseArrayOutputWithContext(context.Context) WebTestGeolocationResponseArrayOutput
}

type WebTestGeolocationResponseArray []WebTestGeolocationResponseInput

func (WebTestGeolocationResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebTestGeolocationResponse)(nil)).Elem()
}

func (i WebTestGeolocationResponseArray) ToWebTestGeolocationResponseArrayOutput() WebTestGeolocationResponseArrayOutput {
	return i.ToWebTestGeolocationResponseArrayOutputWithContext(context.Background())
}

func (i WebTestGeolocationResponseArray) ToWebTestGeolocationResponseArrayOutputWithContext(ctx context.Context) WebTestGeolocationResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestGeolocationResponseArrayOutput)
}

// Geo-physical location to run a web test from. You must specify one or more locations for the test to run from.
type WebTestGeolocationResponseOutput struct{ *pulumi.OutputState }

func (WebTestGeolocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestGeolocationResponse)(nil)).Elem()
}

func (o WebTestGeolocationResponseOutput) ToWebTestGeolocationResponseOutput() WebTestGeolocationResponseOutput {
	return o
}

func (o WebTestGeolocationResponseOutput) ToWebTestGeolocationResponseOutputWithContext(ctx context.Context) WebTestGeolocationResponseOutput {
	return o
}

// Location ID for the webtest to run from.
func (o WebTestGeolocationResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestGeolocationResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type WebTestGeolocationResponseArrayOutput struct{ *pulumi.OutputState }

func (WebTestGeolocationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebTestGeolocationResponse)(nil)).Elem()
}

func (o WebTestGeolocationResponseArrayOutput) ToWebTestGeolocationResponseArrayOutput() WebTestGeolocationResponseArrayOutput {
	return o
}

func (o WebTestGeolocationResponseArrayOutput) ToWebTestGeolocationResponseArrayOutputWithContext(ctx context.Context) WebTestGeolocationResponseArrayOutput {
	return o
}

func (o WebTestGeolocationResponseArrayOutput) Index(i pulumi.IntInput) WebTestGeolocationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebTestGeolocationResponse {
		return vs[0].([]WebTestGeolocationResponse)[vs[1].(int)]
	}).(WebTestGeolocationResponseOutput)
}

// Metadata describing a web test for an Azure resource.
type WebTestProperties struct {
	// An XML configuration specification for a WebTest.
	Configuration *WebTestPropertiesProperties `pulumi:"Configuration"`
	// Purpose/user defined descriptive test for this WebTest.
	Description *string `pulumi:"Description"`
	// Is the test actively being monitored.
	Enabled *bool `pulumi:"Enabled"`
	// Interval in seconds between test runs for this WebTest. Default value is 300.
	Frequency *int `pulumi:"Frequency"`
	// The kind of web test this is, valid choices are ping and multistep.
	Kind string `pulumi:"Kind"`
	// A list of where to physically run the tests from to give global coverage for accessibility of your application.
	Locations []WebTestGeolocation `pulumi:"Locations"`
	// User defined name if this WebTest.
	Name string `pulumi:"Name"`
	// Allow for retries should this WebTest fail.
	RetryEnabled *bool `pulumi:"RetryEnabled"`
	// Unique ID of this WebTest. This is typically the same value as the Name field.
	SyntheticMonitorId string `pulumi:"SyntheticMonitorId"`
	// Seconds until this WebTest will timeout and fail. Default value is 30.
	Timeout *int `pulumi:"Timeout"`
}

// WebTestPropertiesInput is an input type that accepts WebTestPropertiesArgs and WebTestPropertiesOutput values.
// You can construct a concrete instance of `WebTestPropertiesInput` via:
//
//          WebTestPropertiesArgs{...}
type WebTestPropertiesInput interface {
	pulumi.Input

	ToWebTestPropertiesOutput() WebTestPropertiesOutput
	ToWebTestPropertiesOutputWithContext(context.Context) WebTestPropertiesOutput
}

// Metadata describing a web test for an Azure resource.
type WebTestPropertiesArgs struct {
	// An XML configuration specification for a WebTest.
	Configuration WebTestPropertiesPropertiesPtrInput `pulumi:"Configuration"`
	// Purpose/user defined descriptive test for this WebTest.
	Description pulumi.StringPtrInput `pulumi:"Description"`
	// Is the test actively being monitored.
	Enabled pulumi.BoolPtrInput `pulumi:"Enabled"`
	// Interval in seconds between test runs for this WebTest. Default value is 300.
	Frequency pulumi.IntPtrInput `pulumi:"Frequency"`
	// The kind of web test this is, valid choices are ping and multistep.
	Kind pulumi.StringInput `pulumi:"Kind"`
	// A list of where to physically run the tests from to give global coverage for accessibility of your application.
	Locations WebTestGeolocationArrayInput `pulumi:"Locations"`
	// User defined name if this WebTest.
	Name pulumi.StringInput `pulumi:"Name"`
	// Allow for retries should this WebTest fail.
	RetryEnabled pulumi.BoolPtrInput `pulumi:"RetryEnabled"`
	// Unique ID of this WebTest. This is typically the same value as the Name field.
	SyntheticMonitorId pulumi.StringInput `pulumi:"SyntheticMonitorId"`
	// Seconds until this WebTest will timeout and fail. Default value is 30.
	Timeout pulumi.IntPtrInput `pulumi:"Timeout"`
}

func (WebTestPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestProperties)(nil)).Elem()
}

func (i WebTestPropertiesArgs) ToWebTestPropertiesOutput() WebTestPropertiesOutput {
	return i.ToWebTestPropertiesOutputWithContext(context.Background())
}

func (i WebTestPropertiesArgs) ToWebTestPropertiesOutputWithContext(ctx context.Context) WebTestPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesOutput)
}

func (i WebTestPropertiesArgs) ToWebTestPropertiesPtrOutput() WebTestPropertiesPtrOutput {
	return i.ToWebTestPropertiesPtrOutputWithContext(context.Background())
}

func (i WebTestPropertiesArgs) ToWebTestPropertiesPtrOutputWithContext(ctx context.Context) WebTestPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesOutput).ToWebTestPropertiesPtrOutputWithContext(ctx)
}

// WebTestPropertiesPtrInput is an input type that accepts WebTestPropertiesArgs, WebTestPropertiesPtr and WebTestPropertiesPtrOutput values.
// You can construct a concrete instance of `WebTestPropertiesPtrInput` via:
//
//          WebTestPropertiesArgs{...}
//
//  or:
//
//          nil
type WebTestPropertiesPtrInput interface {
	pulumi.Input

	ToWebTestPropertiesPtrOutput() WebTestPropertiesPtrOutput
	ToWebTestPropertiesPtrOutputWithContext(context.Context) WebTestPropertiesPtrOutput
}

type webTestPropertiesPtrType WebTestPropertiesArgs

func WebTestPropertiesPtr(v *WebTestPropertiesArgs) WebTestPropertiesPtrInput {
	return (*webTestPropertiesPtrType)(v)
}

func (*webTestPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestProperties)(nil)).Elem()
}

func (i *webTestPropertiesPtrType) ToWebTestPropertiesPtrOutput() WebTestPropertiesPtrOutput {
	return i.ToWebTestPropertiesPtrOutputWithContext(context.Background())
}

func (i *webTestPropertiesPtrType) ToWebTestPropertiesPtrOutputWithContext(ctx context.Context) WebTestPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesPtrOutput)
}

// Metadata describing a web test for an Azure resource.
type WebTestPropertiesOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestProperties)(nil)).Elem()
}

func (o WebTestPropertiesOutput) ToWebTestPropertiesOutput() WebTestPropertiesOutput {
	return o
}

func (o WebTestPropertiesOutput) ToWebTestPropertiesOutputWithContext(ctx context.Context) WebTestPropertiesOutput {
	return o
}

func (o WebTestPropertiesOutput) ToWebTestPropertiesPtrOutput() WebTestPropertiesPtrOutput {
	return o.ToWebTestPropertiesPtrOutputWithContext(context.Background())
}

func (o WebTestPropertiesOutput) ToWebTestPropertiesPtrOutputWithContext(ctx context.Context) WebTestPropertiesPtrOutput {
	return o.ApplyT(func(v WebTestProperties) *WebTestProperties {
		return &v
	}).(WebTestPropertiesPtrOutput)
}

// An XML configuration specification for a WebTest.
func (o WebTestPropertiesOutput) Configuration() WebTestPropertiesPropertiesPtrOutput {
	return o.ApplyT(func(v WebTestProperties) *WebTestPropertiesProperties { return v.Configuration }).(WebTestPropertiesPropertiesPtrOutput)
}

// Purpose/user defined descriptive test for this WebTest.
func (o WebTestPropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestProperties) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the test actively being monitored.
func (o WebTestPropertiesOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestProperties) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Interval in seconds between test runs for this WebTest. Default value is 300.
func (o WebTestPropertiesOutput) Frequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WebTestProperties) *int { return v.Frequency }).(pulumi.IntPtrOutput)
}

// The kind of web test this is, valid choices are ping and multistep.
func (o WebTestPropertiesOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v WebTestProperties) string { return v.Kind }).(pulumi.StringOutput)
}

// A list of where to physically run the tests from to give global coverage for accessibility of your application.
func (o WebTestPropertiesOutput) Locations() WebTestGeolocationArrayOutput {
	return o.ApplyT(func(v WebTestProperties) []WebTestGeolocation { return v.Locations }).(WebTestGeolocationArrayOutput)
}

// User defined name if this WebTest.
func (o WebTestPropertiesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WebTestProperties) string { return v.Name }).(pulumi.StringOutput)
}

// Allow for retries should this WebTest fail.
func (o WebTestPropertiesOutput) RetryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestProperties) *bool { return v.RetryEnabled }).(pulumi.BoolPtrOutput)
}

// Unique ID of this WebTest. This is typically the same value as the Name field.
func (o WebTestPropertiesOutput) SyntheticMonitorId() pulumi.StringOutput {
	return o.ApplyT(func(v WebTestProperties) string { return v.SyntheticMonitorId }).(pulumi.StringOutput)
}

// Seconds until this WebTest will timeout and fail. Default value is 30.
func (o WebTestPropertiesOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WebTestProperties) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type WebTestPropertiesPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestProperties)(nil)).Elem()
}

func (o WebTestPropertiesPtrOutput) ToWebTestPropertiesPtrOutput() WebTestPropertiesPtrOutput {
	return o
}

func (o WebTestPropertiesPtrOutput) ToWebTestPropertiesPtrOutputWithContext(ctx context.Context) WebTestPropertiesPtrOutput {
	return o
}

func (o WebTestPropertiesPtrOutput) Elem() WebTestPropertiesOutput {
	return o.ApplyT(func(v *WebTestProperties) WebTestProperties { return *v }).(WebTestPropertiesOutput)
}

// An XML configuration specification for a WebTest.
func (o WebTestPropertiesPtrOutput) Configuration() WebTestPropertiesPropertiesPtrOutput {
	return o.ApplyT(func(v *WebTestProperties) *WebTestPropertiesProperties {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(WebTestPropertiesPropertiesPtrOutput)
}

// Purpose/user defined descriptive test for this WebTest.
func (o WebTestPropertiesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestProperties) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Is the test actively being monitored.
func (o WebTestPropertiesPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestProperties) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Interval in seconds between test runs for this WebTest. Default value is 300.
func (o WebTestPropertiesPtrOutput) Frequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WebTestProperties) *int {
		if v == nil {
			return nil
		}
		return v.Frequency
	}).(pulumi.IntPtrOutput)
}

// The kind of web test this is, valid choices are ping and multistep.
func (o WebTestPropertiesPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// A list of where to physically run the tests from to give global coverage for accessibility of your application.
func (o WebTestPropertiesPtrOutput) Locations() WebTestGeolocationArrayOutput {
	return o.ApplyT(func(v *WebTestProperties) []WebTestGeolocation {
		if v == nil {
			return nil
		}
		return v.Locations
	}).(WebTestGeolocationArrayOutput)
}

// User defined name if this WebTest.
func (o WebTestPropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Allow for retries should this WebTest fail.
func (o WebTestPropertiesPtrOutput) RetryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestProperties) *bool {
		if v == nil {
			return nil
		}
		return v.RetryEnabled
	}).(pulumi.BoolPtrOutput)
}

// Unique ID of this WebTest. This is typically the same value as the Name field.
func (o WebTestPropertiesPtrOutput) SyntheticMonitorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestProperties) *string {
		if v == nil {
			return nil
		}
		return &v.SyntheticMonitorId
	}).(pulumi.StringPtrOutput)
}

// Seconds until this WebTest will timeout and fail. Default value is 30.
func (o WebTestPropertiesPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WebTestProperties) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// An XML configuration specification for a WebTest.
type WebTestPropertiesProperties struct {
	// The XML specification of a WebTest to run against an application.
	WebTest *string `pulumi:"WebTest"`
}

// WebTestPropertiesPropertiesInput is an input type that accepts WebTestPropertiesPropertiesArgs and WebTestPropertiesPropertiesOutput values.
// You can construct a concrete instance of `WebTestPropertiesPropertiesInput` via:
//
//          WebTestPropertiesPropertiesArgs{...}
type WebTestPropertiesPropertiesInput interface {
	pulumi.Input

	ToWebTestPropertiesPropertiesOutput() WebTestPropertiesPropertiesOutput
	ToWebTestPropertiesPropertiesOutputWithContext(context.Context) WebTestPropertiesPropertiesOutput
}

// An XML configuration specification for a WebTest.
type WebTestPropertiesPropertiesArgs struct {
	// The XML specification of a WebTest to run against an application.
	WebTest pulumi.StringPtrInput `pulumi:"WebTest"`
}

func (WebTestPropertiesPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesProperties)(nil)).Elem()
}

func (i WebTestPropertiesPropertiesArgs) ToWebTestPropertiesPropertiesOutput() WebTestPropertiesPropertiesOutput {
	return i.ToWebTestPropertiesPropertiesOutputWithContext(context.Background())
}

func (i WebTestPropertiesPropertiesArgs) ToWebTestPropertiesPropertiesOutputWithContext(ctx context.Context) WebTestPropertiesPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesPropertiesOutput)
}

func (i WebTestPropertiesPropertiesArgs) ToWebTestPropertiesPropertiesPtrOutput() WebTestPropertiesPropertiesPtrOutput {
	return i.ToWebTestPropertiesPropertiesPtrOutputWithContext(context.Background())
}

func (i WebTestPropertiesPropertiesArgs) ToWebTestPropertiesPropertiesPtrOutputWithContext(ctx context.Context) WebTestPropertiesPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesPropertiesOutput).ToWebTestPropertiesPropertiesPtrOutputWithContext(ctx)
}

// WebTestPropertiesPropertiesPtrInput is an input type that accepts WebTestPropertiesPropertiesArgs, WebTestPropertiesPropertiesPtr and WebTestPropertiesPropertiesPtrOutput values.
// You can construct a concrete instance of `WebTestPropertiesPropertiesPtrInput` via:
//
//          WebTestPropertiesPropertiesArgs{...}
//
//  or:
//
//          nil
type WebTestPropertiesPropertiesPtrInput interface {
	pulumi.Input

	ToWebTestPropertiesPropertiesPtrOutput() WebTestPropertiesPropertiesPtrOutput
	ToWebTestPropertiesPropertiesPtrOutputWithContext(context.Context) WebTestPropertiesPropertiesPtrOutput
}

type webTestPropertiesPropertiesPtrType WebTestPropertiesPropertiesArgs

func WebTestPropertiesPropertiesPtr(v *WebTestPropertiesPropertiesArgs) WebTestPropertiesPropertiesPtrInput {
	return (*webTestPropertiesPropertiesPtrType)(v)
}

func (*webTestPropertiesPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesProperties)(nil)).Elem()
}

func (i *webTestPropertiesPropertiesPtrType) ToWebTestPropertiesPropertiesPtrOutput() WebTestPropertiesPropertiesPtrOutput {
	return i.ToWebTestPropertiesPropertiesPtrOutputWithContext(context.Background())
}

func (i *webTestPropertiesPropertiesPtrType) ToWebTestPropertiesPropertiesPtrOutputWithContext(ctx context.Context) WebTestPropertiesPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesPropertiesPtrOutput)
}

// An XML configuration specification for a WebTest.
type WebTestPropertiesPropertiesOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesProperties)(nil)).Elem()
}

func (o WebTestPropertiesPropertiesOutput) ToWebTestPropertiesPropertiesOutput() WebTestPropertiesPropertiesOutput {
	return o
}

func (o WebTestPropertiesPropertiesOutput) ToWebTestPropertiesPropertiesOutputWithContext(ctx context.Context) WebTestPropertiesPropertiesOutput {
	return o
}

func (o WebTestPropertiesPropertiesOutput) ToWebTestPropertiesPropertiesPtrOutput() WebTestPropertiesPropertiesPtrOutput {
	return o.ToWebTestPropertiesPropertiesPtrOutputWithContext(context.Background())
}

func (o WebTestPropertiesPropertiesOutput) ToWebTestPropertiesPropertiesPtrOutputWithContext(ctx context.Context) WebTestPropertiesPropertiesPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesProperties) *WebTestPropertiesProperties {
		return &v
	}).(WebTestPropertiesPropertiesPtrOutput)
}

// The XML specification of a WebTest to run against an application.
func (o WebTestPropertiesPropertiesOutput) WebTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesProperties) *string { return v.WebTest }).(pulumi.StringPtrOutput)
}

type WebTestPropertiesPropertiesPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesProperties)(nil)).Elem()
}

func (o WebTestPropertiesPropertiesPtrOutput) ToWebTestPropertiesPropertiesPtrOutput() WebTestPropertiesPropertiesPtrOutput {
	return o
}

func (o WebTestPropertiesPropertiesPtrOutput) ToWebTestPropertiesPropertiesPtrOutputWithContext(ctx context.Context) WebTestPropertiesPropertiesPtrOutput {
	return o
}

func (o WebTestPropertiesPropertiesPtrOutput) Elem() WebTestPropertiesPropertiesOutput {
	return o.ApplyT(func(v *WebTestPropertiesProperties) WebTestPropertiesProperties { return *v }).(WebTestPropertiesPropertiesOutput)
}

// The XML specification of a WebTest to run against an application.
func (o WebTestPropertiesPropertiesPtrOutput) WebTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesProperties) *string {
		if v == nil {
			return nil
		}
		return v.WebTest
	}).(pulumi.StringPtrOutput)
}

// Metadata describing a web test for an Azure resource.
type WebTestPropertiesResponse struct {
	// An XML configuration specification for a WebTest.
	Configuration *WebTestPropertiesResponseProperties `pulumi:"Configuration"`
	// Purpose/user defined descriptive test for this WebTest.
	Description *string `pulumi:"Description"`
	// Is the test actively being monitored.
	Enabled *bool `pulumi:"Enabled"`
	// Interval in seconds between test runs for this WebTest. Default value is 300.
	Frequency *int `pulumi:"Frequency"`
	// The kind of web test this is, valid choices are ping and multistep.
	Kind string `pulumi:"Kind"`
	// A list of where to physically run the tests from to give global coverage for accessibility of your application.
	Locations []WebTestGeolocationResponse `pulumi:"Locations"`
	// User defined name if this WebTest.
	Name string `pulumi:"Name"`
	// Allow for retries should this WebTest fail.
	RetryEnabled *bool `pulumi:"RetryEnabled"`
	// Unique ID of this WebTest. This is typically the same value as the Name field.
	SyntheticMonitorId string `pulumi:"SyntheticMonitorId"`
	// Seconds until this WebTest will timeout and fail. Default value is 30.
	Timeout *int `pulumi:"Timeout"`
	// Current state of this component, whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
}

// WebTestPropertiesResponseInput is an input type that accepts WebTestPropertiesResponseArgs and WebTestPropertiesResponseOutput values.
// You can construct a concrete instance of `WebTestPropertiesResponseInput` via:
//
//          WebTestPropertiesResponseArgs{...}
type WebTestPropertiesResponseInput interface {
	pulumi.Input

	ToWebTestPropertiesResponseOutput() WebTestPropertiesResponseOutput
	ToWebTestPropertiesResponseOutputWithContext(context.Context) WebTestPropertiesResponseOutput
}

// Metadata describing a web test for an Azure resource.
type WebTestPropertiesResponseArgs struct {
	// An XML configuration specification for a WebTest.
	Configuration WebTestPropertiesResponsePropertiesPtrInput `pulumi:"Configuration"`
	// Purpose/user defined descriptive test for this WebTest.
	Description pulumi.StringPtrInput `pulumi:"Description"`
	// Is the test actively being monitored.
	Enabled pulumi.BoolPtrInput `pulumi:"Enabled"`
	// Interval in seconds between test runs for this WebTest. Default value is 300.
	Frequency pulumi.IntPtrInput `pulumi:"Frequency"`
	// The kind of web test this is, valid choices are ping and multistep.
	Kind pulumi.StringInput `pulumi:"Kind"`
	// A list of where to physically run the tests from to give global coverage for accessibility of your application.
	Locations WebTestGeolocationResponseArrayInput `pulumi:"Locations"`
	// User defined name if this WebTest.
	Name pulumi.StringInput `pulumi:"Name"`
	// Allow for retries should this WebTest fail.
	RetryEnabled pulumi.BoolPtrInput `pulumi:"RetryEnabled"`
	// Unique ID of this WebTest. This is typically the same value as the Name field.
	SyntheticMonitorId pulumi.StringInput `pulumi:"SyntheticMonitorId"`
	// Seconds until this WebTest will timeout and fail. Default value is 30.
	Timeout pulumi.IntPtrInput `pulumi:"Timeout"`
	// Current state of this component, whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
}

func (WebTestPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesResponse)(nil)).Elem()
}

func (i WebTestPropertiesResponseArgs) ToWebTestPropertiesResponseOutput() WebTestPropertiesResponseOutput {
	return i.ToWebTestPropertiesResponseOutputWithContext(context.Background())
}

func (i WebTestPropertiesResponseArgs) ToWebTestPropertiesResponseOutputWithContext(ctx context.Context) WebTestPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesResponseOutput)
}

func (i WebTestPropertiesResponseArgs) ToWebTestPropertiesResponsePtrOutput() WebTestPropertiesResponsePtrOutput {
	return i.ToWebTestPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i WebTestPropertiesResponseArgs) ToWebTestPropertiesResponsePtrOutputWithContext(ctx context.Context) WebTestPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesResponseOutput).ToWebTestPropertiesResponsePtrOutputWithContext(ctx)
}

// WebTestPropertiesResponsePtrInput is an input type that accepts WebTestPropertiesResponseArgs, WebTestPropertiesResponsePtr and WebTestPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `WebTestPropertiesResponsePtrInput` via:
//
//          WebTestPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type WebTestPropertiesResponsePtrInput interface {
	pulumi.Input

	ToWebTestPropertiesResponsePtrOutput() WebTestPropertiesResponsePtrOutput
	ToWebTestPropertiesResponsePtrOutputWithContext(context.Context) WebTestPropertiesResponsePtrOutput
}

type webTestPropertiesResponsePtrType WebTestPropertiesResponseArgs

func WebTestPropertiesResponsePtr(v *WebTestPropertiesResponseArgs) WebTestPropertiesResponsePtrInput {
	return (*webTestPropertiesResponsePtrType)(v)
}

func (*webTestPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesResponse)(nil)).Elem()
}

func (i *webTestPropertiesResponsePtrType) ToWebTestPropertiesResponsePtrOutput() WebTestPropertiesResponsePtrOutput {
	return i.ToWebTestPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *webTestPropertiesResponsePtrType) ToWebTestPropertiesResponsePtrOutputWithContext(ctx context.Context) WebTestPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesResponsePtrOutput)
}

// Metadata describing a web test for an Azure resource.
type WebTestPropertiesResponseOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesResponse)(nil)).Elem()
}

func (o WebTestPropertiesResponseOutput) ToWebTestPropertiesResponseOutput() WebTestPropertiesResponseOutput {
	return o
}

func (o WebTestPropertiesResponseOutput) ToWebTestPropertiesResponseOutputWithContext(ctx context.Context) WebTestPropertiesResponseOutput {
	return o
}

func (o WebTestPropertiesResponseOutput) ToWebTestPropertiesResponsePtrOutput() WebTestPropertiesResponsePtrOutput {
	return o.ToWebTestPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o WebTestPropertiesResponseOutput) ToWebTestPropertiesResponsePtrOutputWithContext(ctx context.Context) WebTestPropertiesResponsePtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponse) *WebTestPropertiesResponse {
		return &v
	}).(WebTestPropertiesResponsePtrOutput)
}

// An XML configuration specification for a WebTest.
func (o WebTestPropertiesResponseOutput) Configuration() WebTestPropertiesResponsePropertiesPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponse) *WebTestPropertiesResponseProperties { return v.Configuration }).(WebTestPropertiesResponsePropertiesPtrOutput)
}

// Purpose/user defined descriptive test for this WebTest.
func (o WebTestPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the test actively being monitored.
func (o WebTestPropertiesResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Interval in seconds between test runs for this WebTest. Default value is 300.
func (o WebTestPropertiesResponseOutput) Frequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponse) *int { return v.Frequency }).(pulumi.IntPtrOutput)
}

// The kind of web test this is, valid choices are ping and multistep.
func (o WebTestPropertiesResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v WebTestPropertiesResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// A list of where to physically run the tests from to give global coverage for accessibility of your application.
func (o WebTestPropertiesResponseOutput) Locations() WebTestGeolocationResponseArrayOutput {
	return o.ApplyT(func(v WebTestPropertiesResponse) []WebTestGeolocationResponse { return v.Locations }).(WebTestGeolocationResponseArrayOutput)
}

// User defined name if this WebTest.
func (o WebTestPropertiesResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WebTestPropertiesResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Allow for retries should this WebTest fail.
func (o WebTestPropertiesResponseOutput) RetryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponse) *bool { return v.RetryEnabled }).(pulumi.BoolPtrOutput)
}

// Unique ID of this WebTest. This is typically the same value as the Name field.
func (o WebTestPropertiesResponseOutput) SyntheticMonitorId() pulumi.StringOutput {
	return o.ApplyT(func(v WebTestPropertiesResponse) string { return v.SyntheticMonitorId }).(pulumi.StringOutput)
}

// Seconds until this WebTest will timeout and fail. Default value is 30.
func (o WebTestPropertiesResponseOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponse) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// Current state of this component, whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.
func (o WebTestPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v WebTestPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type WebTestPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesResponse)(nil)).Elem()
}

func (o WebTestPropertiesResponsePtrOutput) ToWebTestPropertiesResponsePtrOutput() WebTestPropertiesResponsePtrOutput {
	return o
}

func (o WebTestPropertiesResponsePtrOutput) ToWebTestPropertiesResponsePtrOutputWithContext(ctx context.Context) WebTestPropertiesResponsePtrOutput {
	return o
}

func (o WebTestPropertiesResponsePtrOutput) Elem() WebTestPropertiesResponseOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponse) WebTestPropertiesResponse { return *v }).(WebTestPropertiesResponseOutput)
}

// An XML configuration specification for a WebTest.
func (o WebTestPropertiesResponsePtrOutput) Configuration() WebTestPropertiesResponsePropertiesPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponse) *WebTestPropertiesResponseProperties {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(WebTestPropertiesResponsePropertiesPtrOutput)
}

// Purpose/user defined descriptive test for this WebTest.
func (o WebTestPropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Is the test actively being monitored.
func (o WebTestPropertiesResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Interval in seconds between test runs for this WebTest. Default value is 300.
func (o WebTestPropertiesResponsePtrOutput) Frequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.Frequency
	}).(pulumi.IntPtrOutput)
}

// The kind of web test this is, valid choices are ping and multistep.
func (o WebTestPropertiesResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// A list of where to physically run the tests from to give global coverage for accessibility of your application.
func (o WebTestPropertiesResponsePtrOutput) Locations() WebTestGeolocationResponseArrayOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponse) []WebTestGeolocationResponse {
		if v == nil {
			return nil
		}
		return v.Locations
	}).(WebTestGeolocationResponseArrayOutput)
}

// User defined name if this WebTest.
func (o WebTestPropertiesResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Allow for retries should this WebTest fail.
func (o WebTestPropertiesResponsePtrOutput) RetryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RetryEnabled
	}).(pulumi.BoolPtrOutput)
}

// Unique ID of this WebTest. This is typically the same value as the Name field.
func (o WebTestPropertiesResponsePtrOutput) SyntheticMonitorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SyntheticMonitorId
	}).(pulumi.StringPtrOutput)
}

// Seconds until this WebTest will timeout and fail. Default value is 30.
func (o WebTestPropertiesResponsePtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// Current state of this component, whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.
func (o WebTestPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// An XML configuration specification for a WebTest.
type WebTestPropertiesResponseProperties struct {
	// The XML specification of a WebTest to run against an application.
	WebTest *string `pulumi:"WebTest"`
}

// WebTestPropertiesResponsePropertiesInput is an input type that accepts WebTestPropertiesResponsePropertiesArgs and WebTestPropertiesResponsePropertiesOutput values.
// You can construct a concrete instance of `WebTestPropertiesResponsePropertiesInput` via:
//
//          WebTestPropertiesResponsePropertiesArgs{...}
type WebTestPropertiesResponsePropertiesInput interface {
	pulumi.Input

	ToWebTestPropertiesResponsePropertiesOutput() WebTestPropertiesResponsePropertiesOutput
	ToWebTestPropertiesResponsePropertiesOutputWithContext(context.Context) WebTestPropertiesResponsePropertiesOutput
}

// An XML configuration specification for a WebTest.
type WebTestPropertiesResponsePropertiesArgs struct {
	// The XML specification of a WebTest to run against an application.
	WebTest pulumi.StringPtrInput `pulumi:"WebTest"`
}

func (WebTestPropertiesResponsePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesResponseProperties)(nil)).Elem()
}

func (i WebTestPropertiesResponsePropertiesArgs) ToWebTestPropertiesResponsePropertiesOutput() WebTestPropertiesResponsePropertiesOutput {
	return i.ToWebTestPropertiesResponsePropertiesOutputWithContext(context.Background())
}

func (i WebTestPropertiesResponsePropertiesArgs) ToWebTestPropertiesResponsePropertiesOutputWithContext(ctx context.Context) WebTestPropertiesResponsePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesResponsePropertiesOutput)
}

func (i WebTestPropertiesResponsePropertiesArgs) ToWebTestPropertiesResponsePropertiesPtrOutput() WebTestPropertiesResponsePropertiesPtrOutput {
	return i.ToWebTestPropertiesResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i WebTestPropertiesResponsePropertiesArgs) ToWebTestPropertiesResponsePropertiesPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesResponsePropertiesOutput).ToWebTestPropertiesResponsePropertiesPtrOutputWithContext(ctx)
}

// WebTestPropertiesResponsePropertiesPtrInput is an input type that accepts WebTestPropertiesResponsePropertiesArgs, WebTestPropertiesResponsePropertiesPtr and WebTestPropertiesResponsePropertiesPtrOutput values.
// You can construct a concrete instance of `WebTestPropertiesResponsePropertiesPtrInput` via:
//
//          WebTestPropertiesResponsePropertiesArgs{...}
//
//  or:
//
//          nil
type WebTestPropertiesResponsePropertiesPtrInput interface {
	pulumi.Input

	ToWebTestPropertiesResponsePropertiesPtrOutput() WebTestPropertiesResponsePropertiesPtrOutput
	ToWebTestPropertiesResponsePropertiesPtrOutputWithContext(context.Context) WebTestPropertiesResponsePropertiesPtrOutput
}

type webTestPropertiesResponsePropertiesPtrType WebTestPropertiesResponsePropertiesArgs

func WebTestPropertiesResponsePropertiesPtr(v *WebTestPropertiesResponsePropertiesArgs) WebTestPropertiesResponsePropertiesPtrInput {
	return (*webTestPropertiesResponsePropertiesPtrType)(v)
}

func (*webTestPropertiesResponsePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesResponseProperties)(nil)).Elem()
}

func (i *webTestPropertiesResponsePropertiesPtrType) ToWebTestPropertiesResponsePropertiesPtrOutput() WebTestPropertiesResponsePropertiesPtrOutput {
	return i.ToWebTestPropertiesResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i *webTestPropertiesResponsePropertiesPtrType) ToWebTestPropertiesResponsePropertiesPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesResponsePropertiesPtrOutput)
}

// An XML configuration specification for a WebTest.
type WebTestPropertiesResponsePropertiesOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesResponseProperties)(nil)).Elem()
}

func (o WebTestPropertiesResponsePropertiesOutput) ToWebTestPropertiesResponsePropertiesOutput() WebTestPropertiesResponsePropertiesOutput {
	return o
}

func (o WebTestPropertiesResponsePropertiesOutput) ToWebTestPropertiesResponsePropertiesOutputWithContext(ctx context.Context) WebTestPropertiesResponsePropertiesOutput {
	return o
}

func (o WebTestPropertiesResponsePropertiesOutput) ToWebTestPropertiesResponsePropertiesPtrOutput() WebTestPropertiesResponsePropertiesPtrOutput {
	return o.ToWebTestPropertiesResponsePropertiesPtrOutputWithContext(context.Background())
}

func (o WebTestPropertiesResponsePropertiesOutput) ToWebTestPropertiesResponsePropertiesPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponsePropertiesPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseProperties) *WebTestPropertiesResponseProperties {
		return &v
	}).(WebTestPropertiesResponsePropertiesPtrOutput)
}

// The XML specification of a WebTest to run against an application.
func (o WebTestPropertiesResponsePropertiesOutput) WebTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseProperties) *string { return v.WebTest }).(pulumi.StringPtrOutput)
}

type WebTestPropertiesResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesResponseProperties)(nil)).Elem()
}

func (o WebTestPropertiesResponsePropertiesPtrOutput) ToWebTestPropertiesResponsePropertiesPtrOutput() WebTestPropertiesResponsePropertiesPtrOutput {
	return o
}

func (o WebTestPropertiesResponsePropertiesPtrOutput) ToWebTestPropertiesResponsePropertiesPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponsePropertiesPtrOutput {
	return o
}

func (o WebTestPropertiesResponsePropertiesPtrOutput) Elem() WebTestPropertiesResponsePropertiesOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseProperties) WebTestPropertiesResponseProperties { return *v }).(WebTestPropertiesResponsePropertiesOutput)
}

// The XML specification of a WebTest to run against an application.
func (o WebTestPropertiesResponsePropertiesPtrOutput) WebTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.WebTest
	}).(pulumi.StringPtrOutput)
}

// An Application Insights web test definition.
type WebtestType struct {
	// The kind of web test that this web test watches. Choices are ping and multistep.
	Kind *string `pulumi:"kind"`
	// Resource location
	Location string `pulumi:"location"`
	// Azure resource name
	Name string `pulumi:"name"`
	// Metadata describing a web test for an Azure resource.
	Properties WebTestPropertiesResponse `pulumi:"properties"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Azure resource type
	Type string `pulumi:"type"`
}

// WebtestTypeInput is an input type that accepts WebtestTypeArgs and WebtestTypeOutput values.
// You can construct a concrete instance of `WebtestTypeInput` via:
//
//          WebtestTypeArgs{...}
type WebtestTypeInput interface {
	pulumi.Input

	ToWebtestTypeOutput() WebtestTypeOutput
	ToWebtestTypeOutputWithContext(context.Context) WebtestTypeOutput
}

// An Application Insights web test definition.
type WebtestTypeArgs struct {
	// The kind of web test that this web test watches. Choices are ping and multistep.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Resource location
	Location pulumi.StringInput `pulumi:"location"`
	// Azure resource name
	Name pulumi.StringInput `pulumi:"name"`
	// Metadata describing a web test for an Azure resource.
	Properties WebTestPropertiesResponseInput `pulumi:"properties"`
	// Resource tags
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Azure resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (WebtestTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebtestType)(nil)).Elem()
}

func (i WebtestTypeArgs) ToWebtestTypeOutput() WebtestTypeOutput {
	return i.ToWebtestTypeOutputWithContext(context.Background())
}

func (i WebtestTypeArgs) ToWebtestTypeOutputWithContext(ctx context.Context) WebtestTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebtestTypeOutput)
}

// An Application Insights web test definition.
type WebtestTypeOutput struct{ *pulumi.OutputState }

func (WebtestTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebtestType)(nil)).Elem()
}

func (o WebtestTypeOutput) ToWebtestTypeOutput() WebtestTypeOutput {
	return o
}

func (o WebtestTypeOutput) ToWebtestTypeOutputWithContext(ctx context.Context) WebtestTypeOutput {
	return o
}

// The kind of web test that this web test watches. Choices are ping and multistep.
func (o WebtestTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebtestType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource location
func (o WebtestTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v WebtestType) string { return v.Location }).(pulumi.StringOutput)
}

// Azure resource name
func (o WebtestTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WebtestType) string { return v.Name }).(pulumi.StringOutput)
}

// Metadata describing a web test for an Azure resource.
func (o WebtestTypeOutput) Properties() WebTestPropertiesResponseOutput {
	return o.ApplyT(func(v WebtestType) WebTestPropertiesResponse { return v.Properties }).(WebTestPropertiesResponseOutput)
}

// Resource tags
func (o WebtestTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v WebtestType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure resource type
func (o WebtestTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebtestType) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ApplicationInsightsComponentPropertiesOutput{})
	pulumi.RegisterOutputType(ApplicationInsightsComponentPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ApplicationInsightsComponentPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ApplicationInsightsComponentPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ComponentTypeOutput{})
	pulumi.RegisterOutputType(ComponentExportconfigurationTypeOutput{})
	pulumi.RegisterOutputType(ComponentFavoriteTypeOutput{})
	pulumi.RegisterOutputType(MetricAlertTypeOutput{})
	pulumi.RegisterOutputType(MetricAlertActionOutput{})
	pulumi.RegisterOutputType(MetricAlertActionArrayOutput{})
	pulumi.RegisterOutputType(MetricAlertActionResponseOutput{})
	pulumi.RegisterOutputType(MetricAlertActionResponseArrayOutput{})
	pulumi.RegisterOutputType(MetricAlertCriteriaOutput{})
	pulumi.RegisterOutputType(MetricAlertCriteriaPtrOutput{})
	pulumi.RegisterOutputType(MetricAlertCriteriaResponseOutput{})
	pulumi.RegisterOutputType(MetricAlertCriteriaResponsePtrOutput{})
	pulumi.RegisterOutputType(MetricAlertPropertiesOutput{})
	pulumi.RegisterOutputType(MetricAlertPropertiesPtrOutput{})
	pulumi.RegisterOutputType(MetricAlertPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MetricAlertPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkScopedResourceOutput{})
	pulumi.RegisterOutputType(PrivateLinkScopedResourceResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkScopedResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(WebTestGeolocationOutput{})
	pulumi.RegisterOutputType(WebTestGeolocationArrayOutput{})
	pulumi.RegisterOutputType(WebTestGeolocationResponseOutput{})
	pulumi.RegisterOutputType(WebTestGeolocationResponseArrayOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesPtrOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesPropertiesOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesPropertiesPtrOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponseOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponsePropertiesOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponsePropertiesPtrOutput{})
	pulumi.RegisterOutputType(WebtestTypeOutput{})
}
