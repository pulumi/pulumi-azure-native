// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180416

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Specify action need to be taken when rule type is Alert
type AlertingAction struct {
	// Azure action group reference.
	AznsAction *AzNsActionGroup `pulumi:"aznsAction"`
	// Specifies the action. Supported values - AlertingAction, LogToMetricAction
	OdataType string `pulumi:"odataType"`
	// Severity of the alert
	Severity string `pulumi:"severity"`
	// time (in minutes) for which Alerts should be throttled or suppressed.
	ThrottlingInMin *int `pulumi:"throttlingInMin"`
	// The trigger condition that results in the alert rule being.
	Trigger TriggerCondition `pulumi:"trigger"`
}

// AlertingActionInput is an input type that accepts AlertingActionArgs and AlertingActionOutput values.
// You can construct a concrete instance of `AlertingActionInput` via:
//
//          AlertingActionArgs{...}
type AlertingActionInput interface {
	pulumi.Input

	ToAlertingActionOutput() AlertingActionOutput
	ToAlertingActionOutputWithContext(context.Context) AlertingActionOutput
}

// Specify action need to be taken when rule type is Alert
type AlertingActionArgs struct {
	// Azure action group reference.
	AznsAction AzNsActionGroupPtrInput `pulumi:"aznsAction"`
	// Specifies the action. Supported values - AlertingAction, LogToMetricAction
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// Severity of the alert
	Severity pulumi.StringInput `pulumi:"severity"`
	// time (in minutes) for which Alerts should be throttled or suppressed.
	ThrottlingInMin pulumi.IntPtrInput `pulumi:"throttlingInMin"`
	// The trigger condition that results in the alert rule being.
	Trigger TriggerConditionInput `pulumi:"trigger"`
}

func (AlertingActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertingAction)(nil)).Elem()
}

func (i AlertingActionArgs) ToAlertingActionOutput() AlertingActionOutput {
	return i.ToAlertingActionOutputWithContext(context.Background())
}

func (i AlertingActionArgs) ToAlertingActionOutputWithContext(ctx context.Context) AlertingActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertingActionOutput)
}

// Specify action need to be taken when rule type is Alert
type AlertingActionResponse struct {
	// Azure action group reference.
	AznsAction *AzNsActionGroupResponse `pulumi:"aznsAction"`
	// Specifies the action. Supported values - AlertingAction, LogToMetricAction
	OdataType string `pulumi:"odataType"`
	// Severity of the alert
	Severity string `pulumi:"severity"`
	// time (in minutes) for which Alerts should be throttled or suppressed.
	ThrottlingInMin *int `pulumi:"throttlingInMin"`
	// The trigger condition that results in the alert rule being.
	Trigger TriggerConditionResponse `pulumi:"trigger"`
}

// Specify action need to be taken when rule type is Alert
type AlertingActionResponseOutput struct{ *pulumi.OutputState }

func (AlertingActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertingActionResponse)(nil)).Elem()
}

func (o AlertingActionResponseOutput) ToAlertingActionResponseOutput() AlertingActionResponseOutput {
	return o
}

func (o AlertingActionResponseOutput) ToAlertingActionResponseOutputWithContext(ctx context.Context) AlertingActionResponseOutput {
	return o
}

// Azure action group reference.
func (o AlertingActionResponseOutput) AznsAction() AzNsActionGroupResponsePtrOutput {
	return o.ApplyT(func(v AlertingActionResponse) *AzNsActionGroupResponse { return v.AznsAction }).(AzNsActionGroupResponsePtrOutput)
}

// Specifies the action. Supported values - AlertingAction, LogToMetricAction
func (o AlertingActionResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v AlertingActionResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// Severity of the alert
func (o AlertingActionResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v AlertingActionResponse) string { return v.Severity }).(pulumi.StringOutput)
}

// time (in minutes) for which Alerts should be throttled or suppressed.
func (o AlertingActionResponseOutput) ThrottlingInMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertingActionResponse) *int { return v.ThrottlingInMin }).(pulumi.IntPtrOutput)
}

// The trigger condition that results in the alert rule being.
func (o AlertingActionResponseOutput) Trigger() TriggerConditionResponseOutput {
	return o.ApplyT(func(v AlertingActionResponse) TriggerConditionResponse { return v.Trigger }).(TriggerConditionResponseOutput)
}

// Azure action group
type AzNsActionGroup struct {
	// Azure Action Group reference.
	ActionGroup []string `pulumi:"actionGroup"`
	// Custom payload to be sent for all webhook URI in Azure action group
	CustomWebhookPayload *string `pulumi:"customWebhookPayload"`
	// Custom subject override for all email ids in Azure action group
	EmailSubject *string `pulumi:"emailSubject"`
}

// AzNsActionGroupInput is an input type that accepts AzNsActionGroupArgs and AzNsActionGroupOutput values.
// You can construct a concrete instance of `AzNsActionGroupInput` via:
//
//          AzNsActionGroupArgs{...}
type AzNsActionGroupInput interface {
	pulumi.Input

	ToAzNsActionGroupOutput() AzNsActionGroupOutput
	ToAzNsActionGroupOutputWithContext(context.Context) AzNsActionGroupOutput
}

// Azure action group
type AzNsActionGroupArgs struct {
	// Azure Action Group reference.
	ActionGroup pulumi.StringArrayInput `pulumi:"actionGroup"`
	// Custom payload to be sent for all webhook URI in Azure action group
	CustomWebhookPayload pulumi.StringPtrInput `pulumi:"customWebhookPayload"`
	// Custom subject override for all email ids in Azure action group
	EmailSubject pulumi.StringPtrInput `pulumi:"emailSubject"`
}

func (AzNsActionGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzNsActionGroup)(nil)).Elem()
}

func (i AzNsActionGroupArgs) ToAzNsActionGroupOutput() AzNsActionGroupOutput {
	return i.ToAzNsActionGroupOutputWithContext(context.Background())
}

func (i AzNsActionGroupArgs) ToAzNsActionGroupOutputWithContext(ctx context.Context) AzNsActionGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzNsActionGroupOutput)
}

func (i AzNsActionGroupArgs) ToAzNsActionGroupPtrOutput() AzNsActionGroupPtrOutput {
	return i.ToAzNsActionGroupPtrOutputWithContext(context.Background())
}

func (i AzNsActionGroupArgs) ToAzNsActionGroupPtrOutputWithContext(ctx context.Context) AzNsActionGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzNsActionGroupOutput).ToAzNsActionGroupPtrOutputWithContext(ctx)
}

// AzNsActionGroupPtrInput is an input type that accepts AzNsActionGroupArgs, AzNsActionGroupPtr and AzNsActionGroupPtrOutput values.
// You can construct a concrete instance of `AzNsActionGroupPtrInput` via:
//
//          AzNsActionGroupArgs{...}
//
//  or:
//
//          nil
type AzNsActionGroupPtrInput interface {
	pulumi.Input

	ToAzNsActionGroupPtrOutput() AzNsActionGroupPtrOutput
	ToAzNsActionGroupPtrOutputWithContext(context.Context) AzNsActionGroupPtrOutput
}

type azNsActionGroupPtrType AzNsActionGroupArgs

func AzNsActionGroupPtr(v *AzNsActionGroupArgs) AzNsActionGroupPtrInput {
	return (*azNsActionGroupPtrType)(v)
}

func (*azNsActionGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzNsActionGroup)(nil)).Elem()
}

func (i *azNsActionGroupPtrType) ToAzNsActionGroupPtrOutput() AzNsActionGroupPtrOutput {
	return i.ToAzNsActionGroupPtrOutputWithContext(context.Background())
}

func (i *azNsActionGroupPtrType) ToAzNsActionGroupPtrOutputWithContext(ctx context.Context) AzNsActionGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzNsActionGroupPtrOutput)
}

// Azure action group
type AzNsActionGroupResponse struct {
	// Azure Action Group reference.
	ActionGroup []string `pulumi:"actionGroup"`
	// Custom payload to be sent for all webhook URI in Azure action group
	CustomWebhookPayload *string `pulumi:"customWebhookPayload"`
	// Custom subject override for all email ids in Azure action group
	EmailSubject *string `pulumi:"emailSubject"`
}

// Azure action group
type AzNsActionGroupResponseOutput struct{ *pulumi.OutputState }

func (AzNsActionGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzNsActionGroupResponse)(nil)).Elem()
}

func (o AzNsActionGroupResponseOutput) ToAzNsActionGroupResponseOutput() AzNsActionGroupResponseOutput {
	return o
}

func (o AzNsActionGroupResponseOutput) ToAzNsActionGroupResponseOutputWithContext(ctx context.Context) AzNsActionGroupResponseOutput {
	return o
}

func (o AzNsActionGroupResponseOutput) ToAzNsActionGroupResponsePtrOutput() AzNsActionGroupResponsePtrOutput {
	return o.ToAzNsActionGroupResponsePtrOutputWithContext(context.Background())
}

func (o AzNsActionGroupResponseOutput) ToAzNsActionGroupResponsePtrOutputWithContext(ctx context.Context) AzNsActionGroupResponsePtrOutput {
	return o.ApplyT(func(v AzNsActionGroupResponse) *AzNsActionGroupResponse {
		return &v
	}).(AzNsActionGroupResponsePtrOutput)
}

// Azure Action Group reference.
func (o AzNsActionGroupResponseOutput) ActionGroup() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AzNsActionGroupResponse) []string { return v.ActionGroup }).(pulumi.StringArrayOutput)
}

// Custom payload to be sent for all webhook URI in Azure action group
func (o AzNsActionGroupResponseOutput) CustomWebhookPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzNsActionGroupResponse) *string { return v.CustomWebhookPayload }).(pulumi.StringPtrOutput)
}

// Custom subject override for all email ids in Azure action group
func (o AzNsActionGroupResponseOutput) EmailSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzNsActionGroupResponse) *string { return v.EmailSubject }).(pulumi.StringPtrOutput)
}

type AzNsActionGroupResponsePtrOutput struct{ *pulumi.OutputState }

func (AzNsActionGroupResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzNsActionGroupResponse)(nil)).Elem()
}

func (o AzNsActionGroupResponsePtrOutput) ToAzNsActionGroupResponsePtrOutput() AzNsActionGroupResponsePtrOutput {
	return o
}

func (o AzNsActionGroupResponsePtrOutput) ToAzNsActionGroupResponsePtrOutputWithContext(ctx context.Context) AzNsActionGroupResponsePtrOutput {
	return o
}

func (o AzNsActionGroupResponsePtrOutput) Elem() AzNsActionGroupResponseOutput {
	return o.ApplyT(func(v *AzNsActionGroupResponse) AzNsActionGroupResponse { return *v }).(AzNsActionGroupResponseOutput)
}

// Azure Action Group reference.
func (o AzNsActionGroupResponsePtrOutput) ActionGroup() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AzNsActionGroupResponse) []string {
		if v == nil {
			return nil
		}
		return v.ActionGroup
	}).(pulumi.StringArrayOutput)
}

// Custom payload to be sent for all webhook URI in Azure action group
func (o AzNsActionGroupResponsePtrOutput) CustomWebhookPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzNsActionGroupResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomWebhookPayload
	}).(pulumi.StringPtrOutput)
}

// Custom subject override for all email ids in Azure action group
func (o AzNsActionGroupResponsePtrOutput) EmailSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzNsActionGroupResponse) *string {
		if v == nil {
			return nil
		}
		return v.EmailSubject
	}).(pulumi.StringPtrOutput)
}

// Specifies the criteria for converting log to metric.
type Criteria struct {
	// List of Dimensions for creating metric
	Dimensions []Dimension `pulumi:"dimensions"`
	// Name of the metric
	MetricName string `pulumi:"metricName"`
}

// CriteriaInput is an input type that accepts CriteriaArgs and CriteriaOutput values.
// You can construct a concrete instance of `CriteriaInput` via:
//
//          CriteriaArgs{...}
type CriteriaInput interface {
	pulumi.Input

	ToCriteriaOutput() CriteriaOutput
	ToCriteriaOutputWithContext(context.Context) CriteriaOutput
}

// Specifies the criteria for converting log to metric.
type CriteriaArgs struct {
	// List of Dimensions for creating metric
	Dimensions DimensionArrayInput `pulumi:"dimensions"`
	// Name of the metric
	MetricName pulumi.StringInput `pulumi:"metricName"`
}

func (CriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Criteria)(nil)).Elem()
}

func (i CriteriaArgs) ToCriteriaOutput() CriteriaOutput {
	return i.ToCriteriaOutputWithContext(context.Background())
}

func (i CriteriaArgs) ToCriteriaOutputWithContext(ctx context.Context) CriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CriteriaOutput)
}

// CriteriaArrayInput is an input type that accepts CriteriaArray and CriteriaArrayOutput values.
// You can construct a concrete instance of `CriteriaArrayInput` via:
//
//          CriteriaArray{ CriteriaArgs{...} }
type CriteriaArrayInput interface {
	pulumi.Input

	ToCriteriaArrayOutput() CriteriaArrayOutput
	ToCriteriaArrayOutputWithContext(context.Context) CriteriaArrayOutput
}

type CriteriaArray []CriteriaInput

func (CriteriaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Criteria)(nil)).Elem()
}

func (i CriteriaArray) ToCriteriaArrayOutput() CriteriaArrayOutput {
	return i.ToCriteriaArrayOutputWithContext(context.Background())
}

func (i CriteriaArray) ToCriteriaArrayOutputWithContext(ctx context.Context) CriteriaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CriteriaArrayOutput)
}

// Specifies the criteria for converting log to metric.
type CriteriaResponse struct {
	// List of Dimensions for creating metric
	Dimensions []DimensionResponse `pulumi:"dimensions"`
	// Name of the metric
	MetricName string `pulumi:"metricName"`
}

// Specifies the criteria for converting log to metric.
type CriteriaResponseOutput struct{ *pulumi.OutputState }

func (CriteriaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CriteriaResponse)(nil)).Elem()
}

func (o CriteriaResponseOutput) ToCriteriaResponseOutput() CriteriaResponseOutput {
	return o
}

func (o CriteriaResponseOutput) ToCriteriaResponseOutputWithContext(ctx context.Context) CriteriaResponseOutput {
	return o
}

// List of Dimensions for creating metric
func (o CriteriaResponseOutput) Dimensions() DimensionResponseArrayOutput {
	return o.ApplyT(func(v CriteriaResponse) []DimensionResponse { return v.Dimensions }).(DimensionResponseArrayOutput)
}

// Name of the metric
func (o CriteriaResponseOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v CriteriaResponse) string { return v.MetricName }).(pulumi.StringOutput)
}

type CriteriaResponseArrayOutput struct{ *pulumi.OutputState }

func (CriteriaResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CriteriaResponse)(nil)).Elem()
}

func (o CriteriaResponseArrayOutput) ToCriteriaResponseArrayOutput() CriteriaResponseArrayOutput {
	return o
}

func (o CriteriaResponseArrayOutput) ToCriteriaResponseArrayOutputWithContext(ctx context.Context) CriteriaResponseArrayOutput {
	return o
}

func (o CriteriaResponseArrayOutput) Index(i pulumi.IntInput) CriteriaResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CriteriaResponse {
		return vs[0].([]CriteriaResponse)[vs[1].(int)]
	}).(CriteriaResponseOutput)
}

// Specifies the criteria for converting log to metric.
type Dimension struct {
	// Name of the dimension
	Name string `pulumi:"name"`
	// Operator for dimension values
	Operator string `pulumi:"operator"`
	// List of dimension values
	Values []string `pulumi:"values"`
}

// DimensionInput is an input type that accepts DimensionArgs and DimensionOutput values.
// You can construct a concrete instance of `DimensionInput` via:
//
//          DimensionArgs{...}
type DimensionInput interface {
	pulumi.Input

	ToDimensionOutput() DimensionOutput
	ToDimensionOutputWithContext(context.Context) DimensionOutput
}

// Specifies the criteria for converting log to metric.
type DimensionArgs struct {
	// Name of the dimension
	Name pulumi.StringInput `pulumi:"name"`
	// Operator for dimension values
	Operator pulumi.StringInput `pulumi:"operator"`
	// List of dimension values
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Dimension)(nil)).Elem()
}

func (i DimensionArgs) ToDimensionOutput() DimensionOutput {
	return i.ToDimensionOutputWithContext(context.Background())
}

func (i DimensionArgs) ToDimensionOutputWithContext(ctx context.Context) DimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DimensionOutput)
}

// DimensionArrayInput is an input type that accepts DimensionArray and DimensionArrayOutput values.
// You can construct a concrete instance of `DimensionArrayInput` via:
//
//          DimensionArray{ DimensionArgs{...} }
type DimensionArrayInput interface {
	pulumi.Input

	ToDimensionArrayOutput() DimensionArrayOutput
	ToDimensionArrayOutputWithContext(context.Context) DimensionArrayOutput
}

type DimensionArray []DimensionInput

func (DimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Dimension)(nil)).Elem()
}

func (i DimensionArray) ToDimensionArrayOutput() DimensionArrayOutput {
	return i.ToDimensionArrayOutputWithContext(context.Background())
}

func (i DimensionArray) ToDimensionArrayOutputWithContext(ctx context.Context) DimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DimensionArrayOutput)
}

// Specifies the criteria for converting log to metric.
type DimensionResponse struct {
	// Name of the dimension
	Name string `pulumi:"name"`
	// Operator for dimension values
	Operator string `pulumi:"operator"`
	// List of dimension values
	Values []string `pulumi:"values"`
}

// Specifies the criteria for converting log to metric.
type DimensionResponseOutput struct{ *pulumi.OutputState }

func (DimensionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DimensionResponse)(nil)).Elem()
}

func (o DimensionResponseOutput) ToDimensionResponseOutput() DimensionResponseOutput {
	return o
}

func (o DimensionResponseOutput) ToDimensionResponseOutputWithContext(ctx context.Context) DimensionResponseOutput {
	return o
}

// Name of the dimension
func (o DimensionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DimensionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Operator for dimension values
func (o DimensionResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v DimensionResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// List of dimension values
func (o DimensionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DimensionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DimensionResponseArrayOutput struct{ *pulumi.OutputState }

func (DimensionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DimensionResponse)(nil)).Elem()
}

func (o DimensionResponseArrayOutput) ToDimensionResponseArrayOutput() DimensionResponseArrayOutput {
	return o
}

func (o DimensionResponseArrayOutput) ToDimensionResponseArrayOutputWithContext(ctx context.Context) DimensionResponseArrayOutput {
	return o
}

func (o DimensionResponseArrayOutput) Index(i pulumi.IntInput) DimensionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DimensionResponse {
		return vs[0].([]DimensionResponse)[vs[1].(int)]
	}).(DimensionResponseOutput)
}

// A log metrics trigger descriptor.
type LogMetricTrigger struct {
	// Evaluation of metric on a particular column
	MetricColumn *string `pulumi:"metricColumn"`
	// Metric Trigger Type - 'Consecutive' or 'Total'
	MetricTriggerType *string `pulumi:"metricTriggerType"`
	// The threshold of the metric trigger.
	Threshold *float64 `pulumi:"threshold"`
	// Evaluation operation for Metric -'GreaterThan' or 'LessThan' or 'Equal'.
	ThresholdOperator *string `pulumi:"thresholdOperator"`
}

// LogMetricTriggerInput is an input type that accepts LogMetricTriggerArgs and LogMetricTriggerOutput values.
// You can construct a concrete instance of `LogMetricTriggerInput` via:
//
//          LogMetricTriggerArgs{...}
type LogMetricTriggerInput interface {
	pulumi.Input

	ToLogMetricTriggerOutput() LogMetricTriggerOutput
	ToLogMetricTriggerOutputWithContext(context.Context) LogMetricTriggerOutput
}

// A log metrics trigger descriptor.
type LogMetricTriggerArgs struct {
	// Evaluation of metric on a particular column
	MetricColumn pulumi.StringPtrInput `pulumi:"metricColumn"`
	// Metric Trigger Type - 'Consecutive' or 'Total'
	MetricTriggerType pulumi.StringPtrInput `pulumi:"metricTriggerType"`
	// The threshold of the metric trigger.
	Threshold pulumi.Float64PtrInput `pulumi:"threshold"`
	// Evaluation operation for Metric -'GreaterThan' or 'LessThan' or 'Equal'.
	ThresholdOperator pulumi.StringPtrInput `pulumi:"thresholdOperator"`
}

func (LogMetricTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogMetricTrigger)(nil)).Elem()
}

func (i LogMetricTriggerArgs) ToLogMetricTriggerOutput() LogMetricTriggerOutput {
	return i.ToLogMetricTriggerOutputWithContext(context.Background())
}

func (i LogMetricTriggerArgs) ToLogMetricTriggerOutputWithContext(ctx context.Context) LogMetricTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricTriggerOutput)
}

func (i LogMetricTriggerArgs) ToLogMetricTriggerPtrOutput() LogMetricTriggerPtrOutput {
	return i.ToLogMetricTriggerPtrOutputWithContext(context.Background())
}

func (i LogMetricTriggerArgs) ToLogMetricTriggerPtrOutputWithContext(ctx context.Context) LogMetricTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricTriggerOutput).ToLogMetricTriggerPtrOutputWithContext(ctx)
}

// LogMetricTriggerPtrInput is an input type that accepts LogMetricTriggerArgs, LogMetricTriggerPtr and LogMetricTriggerPtrOutput values.
// You can construct a concrete instance of `LogMetricTriggerPtrInput` via:
//
//          LogMetricTriggerArgs{...}
//
//  or:
//
//          nil
type LogMetricTriggerPtrInput interface {
	pulumi.Input

	ToLogMetricTriggerPtrOutput() LogMetricTriggerPtrOutput
	ToLogMetricTriggerPtrOutputWithContext(context.Context) LogMetricTriggerPtrOutput
}

type logMetricTriggerPtrType LogMetricTriggerArgs

func LogMetricTriggerPtr(v *LogMetricTriggerArgs) LogMetricTriggerPtrInput {
	return (*logMetricTriggerPtrType)(v)
}

func (*logMetricTriggerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogMetricTrigger)(nil)).Elem()
}

func (i *logMetricTriggerPtrType) ToLogMetricTriggerPtrOutput() LogMetricTriggerPtrOutput {
	return i.ToLogMetricTriggerPtrOutputWithContext(context.Background())
}

func (i *logMetricTriggerPtrType) ToLogMetricTriggerPtrOutputWithContext(ctx context.Context) LogMetricTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogMetricTriggerPtrOutput)
}

// A log metrics trigger descriptor.
type LogMetricTriggerResponse struct {
	// Evaluation of metric on a particular column
	MetricColumn *string `pulumi:"metricColumn"`
	// Metric Trigger Type - 'Consecutive' or 'Total'
	MetricTriggerType *string `pulumi:"metricTriggerType"`
	// The threshold of the metric trigger.
	Threshold *float64 `pulumi:"threshold"`
	// Evaluation operation for Metric -'GreaterThan' or 'LessThan' or 'Equal'.
	ThresholdOperator *string `pulumi:"thresholdOperator"`
}

// A log metrics trigger descriptor.
type LogMetricTriggerResponseOutput struct{ *pulumi.OutputState }

func (LogMetricTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogMetricTriggerResponse)(nil)).Elem()
}

func (o LogMetricTriggerResponseOutput) ToLogMetricTriggerResponseOutput() LogMetricTriggerResponseOutput {
	return o
}

func (o LogMetricTriggerResponseOutput) ToLogMetricTriggerResponseOutputWithContext(ctx context.Context) LogMetricTriggerResponseOutput {
	return o
}

func (o LogMetricTriggerResponseOutput) ToLogMetricTriggerResponsePtrOutput() LogMetricTriggerResponsePtrOutput {
	return o.ToLogMetricTriggerResponsePtrOutputWithContext(context.Background())
}

func (o LogMetricTriggerResponseOutput) ToLogMetricTriggerResponsePtrOutputWithContext(ctx context.Context) LogMetricTriggerResponsePtrOutput {
	return o.ApplyT(func(v LogMetricTriggerResponse) *LogMetricTriggerResponse {
		return &v
	}).(LogMetricTriggerResponsePtrOutput)
}

// Evaluation of metric on a particular column
func (o LogMetricTriggerResponseOutput) MetricColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogMetricTriggerResponse) *string { return v.MetricColumn }).(pulumi.StringPtrOutput)
}

// Metric Trigger Type - 'Consecutive' or 'Total'
func (o LogMetricTriggerResponseOutput) MetricTriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogMetricTriggerResponse) *string { return v.MetricTriggerType }).(pulumi.StringPtrOutput)
}

// The threshold of the metric trigger.
func (o LogMetricTriggerResponseOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LogMetricTriggerResponse) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

// Evaluation operation for Metric -'GreaterThan' or 'LessThan' or 'Equal'.
func (o LogMetricTriggerResponseOutput) ThresholdOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogMetricTriggerResponse) *string { return v.ThresholdOperator }).(pulumi.StringPtrOutput)
}

type LogMetricTriggerResponsePtrOutput struct{ *pulumi.OutputState }

func (LogMetricTriggerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogMetricTriggerResponse)(nil)).Elem()
}

func (o LogMetricTriggerResponsePtrOutput) ToLogMetricTriggerResponsePtrOutput() LogMetricTriggerResponsePtrOutput {
	return o
}

func (o LogMetricTriggerResponsePtrOutput) ToLogMetricTriggerResponsePtrOutputWithContext(ctx context.Context) LogMetricTriggerResponsePtrOutput {
	return o
}

func (o LogMetricTriggerResponsePtrOutput) Elem() LogMetricTriggerResponseOutput {
	return o.ApplyT(func(v *LogMetricTriggerResponse) LogMetricTriggerResponse { return *v }).(LogMetricTriggerResponseOutput)
}

// Evaluation of metric on a particular column
func (o LogMetricTriggerResponsePtrOutput) MetricColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogMetricTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.MetricColumn
	}).(pulumi.StringPtrOutput)
}

// Metric Trigger Type - 'Consecutive' or 'Total'
func (o LogMetricTriggerResponsePtrOutput) MetricTriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogMetricTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.MetricTriggerType
	}).(pulumi.StringPtrOutput)
}

// The threshold of the metric trigger.
func (o LogMetricTriggerResponsePtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LogMetricTriggerResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.Float64PtrOutput)
}

// Evaluation operation for Metric -'GreaterThan' or 'LessThan' or 'Equal'.
func (o LogMetricTriggerResponsePtrOutput) ThresholdOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogMetricTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.ThresholdOperator
	}).(pulumi.StringPtrOutput)
}

// Specify action need to be taken when rule type is converting log to metric
type LogToMetricAction struct {
	// Criteria of Metric
	Criteria []Criteria `pulumi:"criteria"`
	// Specifies the action. Supported values - AlertingAction, LogToMetricAction
	OdataType string `pulumi:"odataType"`
}

// LogToMetricActionInput is an input type that accepts LogToMetricActionArgs and LogToMetricActionOutput values.
// You can construct a concrete instance of `LogToMetricActionInput` via:
//
//          LogToMetricActionArgs{...}
type LogToMetricActionInput interface {
	pulumi.Input

	ToLogToMetricActionOutput() LogToMetricActionOutput
	ToLogToMetricActionOutputWithContext(context.Context) LogToMetricActionOutput
}

// Specify action need to be taken when rule type is converting log to metric
type LogToMetricActionArgs struct {
	// Criteria of Metric
	Criteria CriteriaArrayInput `pulumi:"criteria"`
	// Specifies the action. Supported values - AlertingAction, LogToMetricAction
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (LogToMetricActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogToMetricAction)(nil)).Elem()
}

func (i LogToMetricActionArgs) ToLogToMetricActionOutput() LogToMetricActionOutput {
	return i.ToLogToMetricActionOutputWithContext(context.Background())
}

func (i LogToMetricActionArgs) ToLogToMetricActionOutputWithContext(ctx context.Context) LogToMetricActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogToMetricActionOutput)
}

// Specify action need to be taken when rule type is converting log to metric
type LogToMetricActionResponse struct {
	// Criteria of Metric
	Criteria []CriteriaResponse `pulumi:"criteria"`
	// Specifies the action. Supported values - AlertingAction, LogToMetricAction
	OdataType string `pulumi:"odataType"`
}

// Specify action need to be taken when rule type is converting log to metric
type LogToMetricActionResponseOutput struct{ *pulumi.OutputState }

func (LogToMetricActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogToMetricActionResponse)(nil)).Elem()
}

func (o LogToMetricActionResponseOutput) ToLogToMetricActionResponseOutput() LogToMetricActionResponseOutput {
	return o
}

func (o LogToMetricActionResponseOutput) ToLogToMetricActionResponseOutputWithContext(ctx context.Context) LogToMetricActionResponseOutput {
	return o
}

// Criteria of Metric
func (o LogToMetricActionResponseOutput) Criteria() CriteriaResponseArrayOutput {
	return o.ApplyT(func(v LogToMetricActionResponse) []CriteriaResponse { return v.Criteria }).(CriteriaResponseArrayOutput)
}

// Specifies the action. Supported values - AlertingAction, LogToMetricAction
func (o LogToMetricActionResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v LogToMetricActionResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// Defines how often to run the search and the time interval.
type Schedule struct {
	// frequency (in minutes) at which rule condition should be evaluated.
	FrequencyInMinutes int `pulumi:"frequencyInMinutes"`
	// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
	TimeWindowInMinutes int `pulumi:"timeWindowInMinutes"`
}

// ScheduleInput is an input type that accepts ScheduleArgs and ScheduleOutput values.
// You can construct a concrete instance of `ScheduleInput` via:
//
//          ScheduleArgs{...}
type ScheduleInput interface {
	pulumi.Input

	ToScheduleOutput() ScheduleOutput
	ToScheduleOutputWithContext(context.Context) ScheduleOutput
}

// Defines how often to run the search and the time interval.
type ScheduleArgs struct {
	// frequency (in minutes) at which rule condition should be evaluated.
	FrequencyInMinutes pulumi.IntInput `pulumi:"frequencyInMinutes"`
	// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
	TimeWindowInMinutes pulumi.IntInput `pulumi:"timeWindowInMinutes"`
}

func (ScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Schedule)(nil)).Elem()
}

func (i ScheduleArgs) ToScheduleOutput() ScheduleOutput {
	return i.ToScheduleOutputWithContext(context.Background())
}

func (i ScheduleArgs) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput)
}

func (i ScheduleArgs) ToSchedulePtrOutput() SchedulePtrOutput {
	return i.ToSchedulePtrOutputWithContext(context.Background())
}

func (i ScheduleArgs) ToSchedulePtrOutputWithContext(ctx context.Context) SchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput).ToSchedulePtrOutputWithContext(ctx)
}

// SchedulePtrInput is an input type that accepts ScheduleArgs, SchedulePtr and SchedulePtrOutput values.
// You can construct a concrete instance of `SchedulePtrInput` via:
//
//          ScheduleArgs{...}
//
//  or:
//
//          nil
type SchedulePtrInput interface {
	pulumi.Input

	ToSchedulePtrOutput() SchedulePtrOutput
	ToSchedulePtrOutputWithContext(context.Context) SchedulePtrOutput
}

type schedulePtrType ScheduleArgs

func SchedulePtr(v *ScheduleArgs) SchedulePtrInput {
	return (*schedulePtrType)(v)
}

func (*schedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (i *schedulePtrType) ToSchedulePtrOutput() SchedulePtrOutput {
	return i.ToSchedulePtrOutputWithContext(context.Background())
}

func (i *schedulePtrType) ToSchedulePtrOutputWithContext(ctx context.Context) SchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulePtrOutput)
}

// Defines how often to run the search and the time interval.
type ScheduleResponse struct {
	// frequency (in minutes) at which rule condition should be evaluated.
	FrequencyInMinutes int `pulumi:"frequencyInMinutes"`
	// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
	TimeWindowInMinutes int `pulumi:"timeWindowInMinutes"`
}

// Defines how often to run the search and the time interval.
type ScheduleResponseOutput struct{ *pulumi.OutputState }

func (ScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleResponse)(nil)).Elem()
}

func (o ScheduleResponseOutput) ToScheduleResponseOutput() ScheduleResponseOutput {
	return o
}

func (o ScheduleResponseOutput) ToScheduleResponseOutputWithContext(ctx context.Context) ScheduleResponseOutput {
	return o
}

func (o ScheduleResponseOutput) ToScheduleResponsePtrOutput() ScheduleResponsePtrOutput {
	return o.ToScheduleResponsePtrOutputWithContext(context.Background())
}

func (o ScheduleResponseOutput) ToScheduleResponsePtrOutputWithContext(ctx context.Context) ScheduleResponsePtrOutput {
	return o.ApplyT(func(v ScheduleResponse) *ScheduleResponse {
		return &v
	}).(ScheduleResponsePtrOutput)
}

// frequency (in minutes) at which rule condition should be evaluated.
func (o ScheduleResponseOutput) FrequencyInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleResponse) int { return v.FrequencyInMinutes }).(pulumi.IntOutput)
}

// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
func (o ScheduleResponseOutput) TimeWindowInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleResponse) int { return v.TimeWindowInMinutes }).(pulumi.IntOutput)
}

type ScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (ScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleResponse)(nil)).Elem()
}

func (o ScheduleResponsePtrOutput) ToScheduleResponsePtrOutput() ScheduleResponsePtrOutput {
	return o
}

func (o ScheduleResponsePtrOutput) ToScheduleResponsePtrOutputWithContext(ctx context.Context) ScheduleResponsePtrOutput {
	return o
}

func (o ScheduleResponsePtrOutput) Elem() ScheduleResponseOutput {
	return o.ApplyT(func(v *ScheduleResponse) ScheduleResponse { return *v }).(ScheduleResponseOutput)
}

// frequency (in minutes) at which rule condition should be evaluated.
func (o ScheduleResponsePtrOutput) FrequencyInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return &v.FrequencyInMinutes
	}).(pulumi.IntPtrOutput)
}

// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
func (o ScheduleResponsePtrOutput) TimeWindowInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return &v.TimeWindowInMinutes
	}).(pulumi.IntPtrOutput)
}

// Specifies the log search query.
type Source struct {
	// List of  Resource referred into query
	AuthorizedResources []string `pulumi:"authorizedResources"`
	// The resource uri over which log search query is to be run.
	DataSourceId string `pulumi:"dataSourceId"`
	// Log search query. Required for action type - AlertingAction
	Query *string `pulumi:"query"`
	// Set value to 'ResultCount' .
	QueryType *string `pulumi:"queryType"`
}

// SourceInput is an input type that accepts SourceArgs and SourceOutput values.
// You can construct a concrete instance of `SourceInput` via:
//
//          SourceArgs{...}
type SourceInput interface {
	pulumi.Input

	ToSourceOutput() SourceOutput
	ToSourceOutputWithContext(context.Context) SourceOutput
}

// Specifies the log search query.
type SourceArgs struct {
	// List of  Resource referred into query
	AuthorizedResources pulumi.StringArrayInput `pulumi:"authorizedResources"`
	// The resource uri over which log search query is to be run.
	DataSourceId pulumi.StringInput `pulumi:"dataSourceId"`
	// Log search query. Required for action type - AlertingAction
	Query pulumi.StringPtrInput `pulumi:"query"`
	// Set value to 'ResultCount' .
	QueryType pulumi.StringPtrInput `pulumi:"queryType"`
}

func (SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (i SourceArgs) ToSourceOutput() SourceOutput {
	return i.ToSourceOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput)
}

func (i SourceArgs) ToSourcePtrOutput() SourcePtrOutput {
	return i.ToSourcePtrOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput).ToSourcePtrOutputWithContext(ctx)
}

// SourcePtrInput is an input type that accepts SourceArgs, SourcePtr and SourcePtrOutput values.
// You can construct a concrete instance of `SourcePtrInput` via:
//
//          SourceArgs{...}
//
//  or:
//
//          nil
type SourcePtrInput interface {
	pulumi.Input

	ToSourcePtrOutput() SourcePtrOutput
	ToSourcePtrOutputWithContext(context.Context) SourcePtrOutput
}

type sourcePtrType SourceArgs

func SourcePtr(v *SourceArgs) SourcePtrInput {
	return (*sourcePtrType)(v)
}

func (*sourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (i *sourcePtrType) ToSourcePtrOutput() SourcePtrOutput {
	return i.ToSourcePtrOutputWithContext(context.Background())
}

func (i *sourcePtrType) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePtrOutput)
}

// Specifies the log search query.
type SourceResponse struct {
	// List of  Resource referred into query
	AuthorizedResources []string `pulumi:"authorizedResources"`
	// The resource uri over which log search query is to be run.
	DataSourceId string `pulumi:"dataSourceId"`
	// Log search query. Required for action type - AlertingAction
	Query *string `pulumi:"query"`
	// Set value to 'ResultCount' .
	QueryType *string `pulumi:"queryType"`
}

// Specifies the log search query.
type SourceResponseOutput struct{ *pulumi.OutputState }

func (SourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceResponse)(nil)).Elem()
}

func (o SourceResponseOutput) ToSourceResponseOutput() SourceResponseOutput {
	return o
}

func (o SourceResponseOutput) ToSourceResponseOutputWithContext(ctx context.Context) SourceResponseOutput {
	return o
}

func (o SourceResponseOutput) ToSourceResponsePtrOutput() SourceResponsePtrOutput {
	return o.ToSourceResponsePtrOutputWithContext(context.Background())
}

func (o SourceResponseOutput) ToSourceResponsePtrOutputWithContext(ctx context.Context) SourceResponsePtrOutput {
	return o.ApplyT(func(v SourceResponse) *SourceResponse {
		return &v
	}).(SourceResponsePtrOutput)
}

// List of  Resource referred into query
func (o SourceResponseOutput) AuthorizedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SourceResponse) []string { return v.AuthorizedResources }).(pulumi.StringArrayOutput)
}

// The resource uri over which log search query is to be run.
func (o SourceResponseOutput) DataSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v SourceResponse) string { return v.DataSourceId }).(pulumi.StringOutput)
}

// Log search query. Required for action type - AlertingAction
func (o SourceResponseOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceResponse) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// Set value to 'ResultCount' .
func (o SourceResponseOutput) QueryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceResponse) *string { return v.QueryType }).(pulumi.StringPtrOutput)
}

type SourceResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceResponse)(nil)).Elem()
}

func (o SourceResponsePtrOutput) ToSourceResponsePtrOutput() SourceResponsePtrOutput {
	return o
}

func (o SourceResponsePtrOutput) ToSourceResponsePtrOutputWithContext(ctx context.Context) SourceResponsePtrOutput {
	return o
}

func (o SourceResponsePtrOutput) Elem() SourceResponseOutput {
	return o.ApplyT(func(v *SourceResponse) SourceResponse { return *v }).(SourceResponseOutput)
}

// List of  Resource referred into query
func (o SourceResponsePtrOutput) AuthorizedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SourceResponse) []string {
		if v == nil {
			return nil
		}
		return v.AuthorizedResources
	}).(pulumi.StringArrayOutput)
}

// The resource uri over which log search query is to be run.
func (o SourceResponsePtrOutput) DataSourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataSourceId
	}).(pulumi.StringPtrOutput)
}

// Log search query. Required for action type - AlertingAction
func (o SourceResponsePtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringPtrOutput)
}

// Set value to 'ResultCount' .
func (o SourceResponsePtrOutput) QueryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.QueryType
	}).(pulumi.StringPtrOutput)
}

// The condition that results in the Log Search rule.
type TriggerCondition struct {
	// Trigger condition for metric query rule
	MetricTrigger *LogMetricTrigger `pulumi:"metricTrigger"`
	// Result or count threshold based on which rule should be triggered.
	Threshold float64 `pulumi:"threshold"`
	// Evaluation operation for rule - 'GreaterThan' or 'LessThan.
	ThresholdOperator string `pulumi:"thresholdOperator"`
}

// TriggerConditionInput is an input type that accepts TriggerConditionArgs and TriggerConditionOutput values.
// You can construct a concrete instance of `TriggerConditionInput` via:
//
//          TriggerConditionArgs{...}
type TriggerConditionInput interface {
	pulumi.Input

	ToTriggerConditionOutput() TriggerConditionOutput
	ToTriggerConditionOutputWithContext(context.Context) TriggerConditionOutput
}

// The condition that results in the Log Search rule.
type TriggerConditionArgs struct {
	// Trigger condition for metric query rule
	MetricTrigger LogMetricTriggerPtrInput `pulumi:"metricTrigger"`
	// Result or count threshold based on which rule should be triggered.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// Evaluation operation for rule - 'GreaterThan' or 'LessThan.
	ThresholdOperator pulumi.StringInput `pulumi:"thresholdOperator"`
}

func (TriggerConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerCondition)(nil)).Elem()
}

func (i TriggerConditionArgs) ToTriggerConditionOutput() TriggerConditionOutput {
	return i.ToTriggerConditionOutputWithContext(context.Background())
}

func (i TriggerConditionArgs) ToTriggerConditionOutputWithContext(ctx context.Context) TriggerConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerConditionOutput)
}

// The condition that results in the Log Search rule.
type TriggerConditionResponse struct {
	// Trigger condition for metric query rule
	MetricTrigger *LogMetricTriggerResponse `pulumi:"metricTrigger"`
	// Result or count threshold based on which rule should be triggered.
	Threshold float64 `pulumi:"threshold"`
	// Evaluation operation for rule - 'GreaterThan' or 'LessThan.
	ThresholdOperator string `pulumi:"thresholdOperator"`
}

// The condition that results in the Log Search rule.
type TriggerConditionResponseOutput struct{ *pulumi.OutputState }

func (TriggerConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerConditionResponse)(nil)).Elem()
}

func (o TriggerConditionResponseOutput) ToTriggerConditionResponseOutput() TriggerConditionResponseOutput {
	return o
}

func (o TriggerConditionResponseOutput) ToTriggerConditionResponseOutputWithContext(ctx context.Context) TriggerConditionResponseOutput {
	return o
}

// Trigger condition for metric query rule
func (o TriggerConditionResponseOutput) MetricTrigger() LogMetricTriggerResponsePtrOutput {
	return o.ApplyT(func(v TriggerConditionResponse) *LogMetricTriggerResponse { return v.MetricTrigger }).(LogMetricTriggerResponsePtrOutput)
}

// Result or count threshold based on which rule should be triggered.
func (o TriggerConditionResponseOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v TriggerConditionResponse) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// Evaluation operation for rule - 'GreaterThan' or 'LessThan.
func (o TriggerConditionResponseOutput) ThresholdOperator() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerConditionResponse) string { return v.ThresholdOperator }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(AlertingActionOutput{})
	pulumi.RegisterOutputType(AlertingActionResponseOutput{})
	pulumi.RegisterOutputType(AzNsActionGroupOutput{})
	pulumi.RegisterOutputType(AzNsActionGroupPtrOutput{})
	pulumi.RegisterOutputType(AzNsActionGroupResponseOutput{})
	pulumi.RegisterOutputType(AzNsActionGroupResponsePtrOutput{})
	pulumi.RegisterOutputType(CriteriaOutput{})
	pulumi.RegisterOutputType(CriteriaArrayOutput{})
	pulumi.RegisterOutputType(CriteriaResponseOutput{})
	pulumi.RegisterOutputType(CriteriaResponseArrayOutput{})
	pulumi.RegisterOutputType(DimensionOutput{})
	pulumi.RegisterOutputType(DimensionArrayOutput{})
	pulumi.RegisterOutputType(DimensionResponseOutput{})
	pulumi.RegisterOutputType(DimensionResponseArrayOutput{})
	pulumi.RegisterOutputType(LogMetricTriggerOutput{})
	pulumi.RegisterOutputType(LogMetricTriggerPtrOutput{})
	pulumi.RegisterOutputType(LogMetricTriggerResponseOutput{})
	pulumi.RegisterOutputType(LogMetricTriggerResponsePtrOutput{})
	pulumi.RegisterOutputType(LogToMetricActionOutput{})
	pulumi.RegisterOutputType(LogToMetricActionResponseOutput{})
	pulumi.RegisterOutputType(ScheduleOutput{})
	pulumi.RegisterOutputType(SchedulePtrOutput{})
	pulumi.RegisterOutputType(ScheduleResponseOutput{})
	pulumi.RegisterOutputType(ScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceOutput{})
	pulumi.RegisterOutputType(SourcePtrOutput{})
	pulumi.RegisterOutputType(SourceResponseOutput{})
	pulumi.RegisterOutputType(SourceResponsePtrOutput{})
	pulumi.RegisterOutputType(TriggerConditionOutput{})
	pulumi.RegisterOutputType(TriggerConditionResponseOutput{})
}
