// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180416

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Action descriptor.
type Action struct {
}

// ActionInput is an input type that accepts ActionArgs and ActionOutput values.
// You can construct a concrete instance of `ActionInput` via:
//
//          ActionArgs{...}
type ActionInput interface {
	pulumi.Input

	ToActionOutput() ActionOutput
	ToActionOutputWithContext(context.Context) ActionOutput
}

// Action descriptor.
type ActionArgs struct {
}

func (ActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Action)(nil)).Elem()
}

func (i ActionArgs) ToActionOutput() ActionOutput {
	return i.ToActionOutputWithContext(context.Background())
}

func (i ActionArgs) ToActionOutputWithContext(ctx context.Context) ActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionOutput)
}

func (i ActionArgs) ToActionPtrOutput() ActionPtrOutput {
	return i.ToActionPtrOutputWithContext(context.Background())
}

func (i ActionArgs) ToActionPtrOutputWithContext(ctx context.Context) ActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionOutput).ToActionPtrOutputWithContext(ctx)
}

// ActionPtrInput is an input type that accepts ActionArgs, ActionPtr and ActionPtrOutput values.
// You can construct a concrete instance of `ActionPtrInput` via:
//
//          ActionArgs{...}
//
//  or:
//
//          nil
type ActionPtrInput interface {
	pulumi.Input

	ToActionPtrOutput() ActionPtrOutput
	ToActionPtrOutputWithContext(context.Context) ActionPtrOutput
}

type actionPtrType ActionArgs

func ActionPtr(v *ActionArgs) ActionPtrInput {
	return (*actionPtrType)(v)
}

func (*actionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Action)(nil)).Elem()
}

func (i *actionPtrType) ToActionPtrOutput() ActionPtrOutput {
	return i.ToActionPtrOutputWithContext(context.Background())
}

func (i *actionPtrType) ToActionPtrOutputWithContext(ctx context.Context) ActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionPtrOutput)
}

// Action descriptor.
type ActionOutput struct{ *pulumi.OutputState }

func (ActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Action)(nil)).Elem()
}

func (o ActionOutput) ToActionOutput() ActionOutput {
	return o
}

func (o ActionOutput) ToActionOutputWithContext(ctx context.Context) ActionOutput {
	return o
}

func (o ActionOutput) ToActionPtrOutput() ActionPtrOutput {
	return o.ToActionPtrOutputWithContext(context.Background())
}

func (o ActionOutput) ToActionPtrOutputWithContext(ctx context.Context) ActionPtrOutput {
	return o.ApplyT(func(v Action) *Action {
		return &v
	}).(ActionPtrOutput)
}

type ActionPtrOutput struct{ *pulumi.OutputState }

func (ActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Action)(nil)).Elem()
}

func (o ActionPtrOutput) ToActionPtrOutput() ActionPtrOutput {
	return o
}

func (o ActionPtrOutput) ToActionPtrOutputWithContext(ctx context.Context) ActionPtrOutput {
	return o
}

func (o ActionPtrOutput) Elem() ActionOutput {
	return o.ApplyT(func(v *Action) Action { return *v }).(ActionOutput)
}

// Action descriptor.
type ActionResponse struct {
}

// ActionResponseInput is an input type that accepts ActionResponseArgs and ActionResponseOutput values.
// You can construct a concrete instance of `ActionResponseInput` via:
//
//          ActionResponseArgs{...}
type ActionResponseInput interface {
	pulumi.Input

	ToActionResponseOutput() ActionResponseOutput
	ToActionResponseOutputWithContext(context.Context) ActionResponseOutput
}

// Action descriptor.
type ActionResponseArgs struct {
}

func (ActionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionResponse)(nil)).Elem()
}

func (i ActionResponseArgs) ToActionResponseOutput() ActionResponseOutput {
	return i.ToActionResponseOutputWithContext(context.Background())
}

func (i ActionResponseArgs) ToActionResponseOutputWithContext(ctx context.Context) ActionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionResponseOutput)
}

func (i ActionResponseArgs) ToActionResponsePtrOutput() ActionResponsePtrOutput {
	return i.ToActionResponsePtrOutputWithContext(context.Background())
}

func (i ActionResponseArgs) ToActionResponsePtrOutputWithContext(ctx context.Context) ActionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionResponseOutput).ToActionResponsePtrOutputWithContext(ctx)
}

// ActionResponsePtrInput is an input type that accepts ActionResponseArgs, ActionResponsePtr and ActionResponsePtrOutput values.
// You can construct a concrete instance of `ActionResponsePtrInput` via:
//
//          ActionResponseArgs{...}
//
//  or:
//
//          nil
type ActionResponsePtrInput interface {
	pulumi.Input

	ToActionResponsePtrOutput() ActionResponsePtrOutput
	ToActionResponsePtrOutputWithContext(context.Context) ActionResponsePtrOutput
}

type actionResponsePtrType ActionResponseArgs

func ActionResponsePtr(v *ActionResponseArgs) ActionResponsePtrInput {
	return (*actionResponsePtrType)(v)
}

func (*actionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionResponse)(nil)).Elem()
}

func (i *actionResponsePtrType) ToActionResponsePtrOutput() ActionResponsePtrOutput {
	return i.ToActionResponsePtrOutputWithContext(context.Background())
}

func (i *actionResponsePtrType) ToActionResponsePtrOutputWithContext(ctx context.Context) ActionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionResponsePtrOutput)
}

// Action descriptor.
type ActionResponseOutput struct{ *pulumi.OutputState }

func (ActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionResponse)(nil)).Elem()
}

func (o ActionResponseOutput) ToActionResponseOutput() ActionResponseOutput {
	return o
}

func (o ActionResponseOutput) ToActionResponseOutputWithContext(ctx context.Context) ActionResponseOutput {
	return o
}

func (o ActionResponseOutput) ToActionResponsePtrOutput() ActionResponsePtrOutput {
	return o.ToActionResponsePtrOutputWithContext(context.Background())
}

func (o ActionResponseOutput) ToActionResponsePtrOutputWithContext(ctx context.Context) ActionResponsePtrOutput {
	return o.ApplyT(func(v ActionResponse) *ActionResponse {
		return &v
	}).(ActionResponsePtrOutput)
}

type ActionResponsePtrOutput struct{ *pulumi.OutputState }

func (ActionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionResponse)(nil)).Elem()
}

func (o ActionResponsePtrOutput) ToActionResponsePtrOutput() ActionResponsePtrOutput {
	return o
}

func (o ActionResponsePtrOutput) ToActionResponsePtrOutputWithContext(ctx context.Context) ActionResponsePtrOutput {
	return o
}

func (o ActionResponsePtrOutput) Elem() ActionResponseOutput {
	return o.ApplyT(func(v *ActionResponse) ActionResponse { return *v }).(ActionResponseOutput)
}

// Log Search Rule Definition
type LogSearchRuleResponse struct {
	// Action needs to be taken on rule execution.
	Action ActionResponse `pulumi:"action"`
	// The description of the Log Search rule.
	Description *string `pulumi:"description"`
	// The flag which indicates whether the Log Search rule is enabled. Value should be true or false
	Enabled *string `pulumi:"enabled"`
	// Last time the rule was updated in IS08601 format.
	LastUpdatedTime string `pulumi:"lastUpdatedTime"`
	// Provisioning state of the scheduled query rule
	ProvisioningState string `pulumi:"provisioningState"`
	// Schedule (Frequency, Time Window) for rule. Required for action type - AlertingAction
	Schedule *ScheduleResponse `pulumi:"schedule"`
	// Data Source against which rule will Query Data
	Source SourceResponse `pulumi:"source"`
}

// LogSearchRuleResponseInput is an input type that accepts LogSearchRuleResponseArgs and LogSearchRuleResponseOutput values.
// You can construct a concrete instance of `LogSearchRuleResponseInput` via:
//
//          LogSearchRuleResponseArgs{...}
type LogSearchRuleResponseInput interface {
	pulumi.Input

	ToLogSearchRuleResponseOutput() LogSearchRuleResponseOutput
	ToLogSearchRuleResponseOutputWithContext(context.Context) LogSearchRuleResponseOutput
}

// Log Search Rule Definition
type LogSearchRuleResponseArgs struct {
	// Action needs to be taken on rule execution.
	Action ActionResponseInput `pulumi:"action"`
	// The description of the Log Search rule.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The flag which indicates whether the Log Search rule is enabled. Value should be true or false
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
	// Last time the rule was updated in IS08601 format.
	LastUpdatedTime pulumi.StringInput `pulumi:"lastUpdatedTime"`
	// Provisioning state of the scheduled query rule
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// Schedule (Frequency, Time Window) for rule. Required for action type - AlertingAction
	Schedule ScheduleResponsePtrInput `pulumi:"schedule"`
	// Data Source against which rule will Query Data
	Source SourceResponseInput `pulumi:"source"`
}

func (LogSearchRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogSearchRuleResponse)(nil)).Elem()
}

func (i LogSearchRuleResponseArgs) ToLogSearchRuleResponseOutput() LogSearchRuleResponseOutput {
	return i.ToLogSearchRuleResponseOutputWithContext(context.Background())
}

func (i LogSearchRuleResponseArgs) ToLogSearchRuleResponseOutputWithContext(ctx context.Context) LogSearchRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSearchRuleResponseOutput)
}

func (i LogSearchRuleResponseArgs) ToLogSearchRuleResponsePtrOutput() LogSearchRuleResponsePtrOutput {
	return i.ToLogSearchRuleResponsePtrOutputWithContext(context.Background())
}

func (i LogSearchRuleResponseArgs) ToLogSearchRuleResponsePtrOutputWithContext(ctx context.Context) LogSearchRuleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSearchRuleResponseOutput).ToLogSearchRuleResponsePtrOutputWithContext(ctx)
}

// LogSearchRuleResponsePtrInput is an input type that accepts LogSearchRuleResponseArgs, LogSearchRuleResponsePtr and LogSearchRuleResponsePtrOutput values.
// You can construct a concrete instance of `LogSearchRuleResponsePtrInput` via:
//
//          LogSearchRuleResponseArgs{...}
//
//  or:
//
//          nil
type LogSearchRuleResponsePtrInput interface {
	pulumi.Input

	ToLogSearchRuleResponsePtrOutput() LogSearchRuleResponsePtrOutput
	ToLogSearchRuleResponsePtrOutputWithContext(context.Context) LogSearchRuleResponsePtrOutput
}

type logSearchRuleResponsePtrType LogSearchRuleResponseArgs

func LogSearchRuleResponsePtr(v *LogSearchRuleResponseArgs) LogSearchRuleResponsePtrInput {
	return (*logSearchRuleResponsePtrType)(v)
}

func (*logSearchRuleResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogSearchRuleResponse)(nil)).Elem()
}

func (i *logSearchRuleResponsePtrType) ToLogSearchRuleResponsePtrOutput() LogSearchRuleResponsePtrOutput {
	return i.ToLogSearchRuleResponsePtrOutputWithContext(context.Background())
}

func (i *logSearchRuleResponsePtrType) ToLogSearchRuleResponsePtrOutputWithContext(ctx context.Context) LogSearchRuleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSearchRuleResponsePtrOutput)
}

// Log Search Rule Definition
type LogSearchRuleResponseOutput struct{ *pulumi.OutputState }

func (LogSearchRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogSearchRuleResponse)(nil)).Elem()
}

func (o LogSearchRuleResponseOutput) ToLogSearchRuleResponseOutput() LogSearchRuleResponseOutput {
	return o
}

func (o LogSearchRuleResponseOutput) ToLogSearchRuleResponseOutputWithContext(ctx context.Context) LogSearchRuleResponseOutput {
	return o
}

func (o LogSearchRuleResponseOutput) ToLogSearchRuleResponsePtrOutput() LogSearchRuleResponsePtrOutput {
	return o.ToLogSearchRuleResponsePtrOutputWithContext(context.Background())
}

func (o LogSearchRuleResponseOutput) ToLogSearchRuleResponsePtrOutputWithContext(ctx context.Context) LogSearchRuleResponsePtrOutput {
	return o.ApplyT(func(v LogSearchRuleResponse) *LogSearchRuleResponse {
		return &v
	}).(LogSearchRuleResponsePtrOutput)
}

// Action needs to be taken on rule execution.
func (o LogSearchRuleResponseOutput) Action() ActionResponseOutput {
	return o.ApplyT(func(v LogSearchRuleResponse) ActionResponse { return v.Action }).(ActionResponseOutput)
}

// The description of the Log Search rule.
func (o LogSearchRuleResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogSearchRuleResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The flag which indicates whether the Log Search rule is enabled. Value should be true or false
func (o LogSearchRuleResponseOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogSearchRuleResponse) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

// Last time the rule was updated in IS08601 format.
func (o LogSearchRuleResponseOutput) LastUpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LogSearchRuleResponse) string { return v.LastUpdatedTime }).(pulumi.StringOutput)
}

// Provisioning state of the scheduled query rule
func (o LogSearchRuleResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LogSearchRuleResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Schedule (Frequency, Time Window) for rule. Required for action type - AlertingAction
func (o LogSearchRuleResponseOutput) Schedule() ScheduleResponsePtrOutput {
	return o.ApplyT(func(v LogSearchRuleResponse) *ScheduleResponse { return v.Schedule }).(ScheduleResponsePtrOutput)
}

// Data Source against which rule will Query Data
func (o LogSearchRuleResponseOutput) Source() SourceResponseOutput {
	return o.ApplyT(func(v LogSearchRuleResponse) SourceResponse { return v.Source }).(SourceResponseOutput)
}

type LogSearchRuleResponsePtrOutput struct{ *pulumi.OutputState }

func (LogSearchRuleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogSearchRuleResponse)(nil)).Elem()
}

func (o LogSearchRuleResponsePtrOutput) ToLogSearchRuleResponsePtrOutput() LogSearchRuleResponsePtrOutput {
	return o
}

func (o LogSearchRuleResponsePtrOutput) ToLogSearchRuleResponsePtrOutputWithContext(ctx context.Context) LogSearchRuleResponsePtrOutput {
	return o
}

func (o LogSearchRuleResponsePtrOutput) Elem() LogSearchRuleResponseOutput {
	return o.ApplyT(func(v *LogSearchRuleResponse) LogSearchRuleResponse { return *v }).(LogSearchRuleResponseOutput)
}

// Action needs to be taken on rule execution.
func (o LogSearchRuleResponsePtrOutput) Action() ActionResponsePtrOutput {
	return o.ApplyT(func(v *LogSearchRuleResponse) *ActionResponse {
		if v == nil {
			return nil
		}
		return &v.Action
	}).(ActionResponsePtrOutput)
}

// The description of the Log Search rule.
func (o LogSearchRuleResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogSearchRuleResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The flag which indicates whether the Log Search rule is enabled. Value should be true or false
func (o LogSearchRuleResponsePtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogSearchRuleResponse) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// Last time the rule was updated in IS08601 format.
func (o LogSearchRuleResponsePtrOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogSearchRuleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastUpdatedTime
	}).(pulumi.StringPtrOutput)
}

// Provisioning state of the scheduled query rule
func (o LogSearchRuleResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogSearchRuleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Schedule (Frequency, Time Window) for rule. Required for action type - AlertingAction
func (o LogSearchRuleResponsePtrOutput) Schedule() ScheduleResponsePtrOutput {
	return o.ApplyT(func(v *LogSearchRuleResponse) *ScheduleResponse {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(ScheduleResponsePtrOutput)
}

// Data Source against which rule will Query Data
func (o LogSearchRuleResponsePtrOutput) Source() SourceResponsePtrOutput {
	return o.ApplyT(func(v *LogSearchRuleResponse) *SourceResponse {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(SourceResponsePtrOutput)
}

// Defines how often to run the search and the time interval.
type Schedule struct {
	// frequency (in minutes) at which rule condition should be evaluated.
	FrequencyInMinutes int `pulumi:"frequencyInMinutes"`
	// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
	TimeWindowInMinutes int `pulumi:"timeWindowInMinutes"`
}

// ScheduleInput is an input type that accepts ScheduleArgs and ScheduleOutput values.
// You can construct a concrete instance of `ScheduleInput` via:
//
//          ScheduleArgs{...}
type ScheduleInput interface {
	pulumi.Input

	ToScheduleOutput() ScheduleOutput
	ToScheduleOutputWithContext(context.Context) ScheduleOutput
}

// Defines how often to run the search and the time interval.
type ScheduleArgs struct {
	// frequency (in minutes) at which rule condition should be evaluated.
	FrequencyInMinutes pulumi.IntInput `pulumi:"frequencyInMinutes"`
	// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
	TimeWindowInMinutes pulumi.IntInput `pulumi:"timeWindowInMinutes"`
}

func (ScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Schedule)(nil)).Elem()
}

func (i ScheduleArgs) ToScheduleOutput() ScheduleOutput {
	return i.ToScheduleOutputWithContext(context.Background())
}

func (i ScheduleArgs) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput)
}

func (i ScheduleArgs) ToSchedulePtrOutput() SchedulePtrOutput {
	return i.ToSchedulePtrOutputWithContext(context.Background())
}

func (i ScheduleArgs) ToSchedulePtrOutputWithContext(ctx context.Context) SchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput).ToSchedulePtrOutputWithContext(ctx)
}

// SchedulePtrInput is an input type that accepts ScheduleArgs, SchedulePtr and SchedulePtrOutput values.
// You can construct a concrete instance of `SchedulePtrInput` via:
//
//          ScheduleArgs{...}
//
//  or:
//
//          nil
type SchedulePtrInput interface {
	pulumi.Input

	ToSchedulePtrOutput() SchedulePtrOutput
	ToSchedulePtrOutputWithContext(context.Context) SchedulePtrOutput
}

type schedulePtrType ScheduleArgs

func SchedulePtr(v *ScheduleArgs) SchedulePtrInput {
	return (*schedulePtrType)(v)
}

func (*schedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (i *schedulePtrType) ToSchedulePtrOutput() SchedulePtrOutput {
	return i.ToSchedulePtrOutputWithContext(context.Background())
}

func (i *schedulePtrType) ToSchedulePtrOutputWithContext(ctx context.Context) SchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulePtrOutput)
}

// Defines how often to run the search and the time interval.
type ScheduleOutput struct{ *pulumi.OutputState }

func (ScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Schedule)(nil)).Elem()
}

func (o ScheduleOutput) ToScheduleOutput() ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToSchedulePtrOutput() SchedulePtrOutput {
	return o.ToSchedulePtrOutputWithContext(context.Background())
}

func (o ScheduleOutput) ToSchedulePtrOutputWithContext(ctx context.Context) SchedulePtrOutput {
	return o.ApplyT(func(v Schedule) *Schedule {
		return &v
	}).(SchedulePtrOutput)
}

// frequency (in minutes) at which rule condition should be evaluated.
func (o ScheduleOutput) FrequencyInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v Schedule) int { return v.FrequencyInMinutes }).(pulumi.IntOutput)
}

// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
func (o ScheduleOutput) TimeWindowInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v Schedule) int { return v.TimeWindowInMinutes }).(pulumi.IntOutput)
}

type SchedulePtrOutput struct{ *pulumi.OutputState }

func (SchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (o SchedulePtrOutput) ToSchedulePtrOutput() SchedulePtrOutput {
	return o
}

func (o SchedulePtrOutput) ToSchedulePtrOutputWithContext(ctx context.Context) SchedulePtrOutput {
	return o
}

func (o SchedulePtrOutput) Elem() ScheduleOutput {
	return o.ApplyT(func(v *Schedule) Schedule { return *v }).(ScheduleOutput)
}

// frequency (in minutes) at which rule condition should be evaluated.
func (o SchedulePtrOutput) FrequencyInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Schedule) *int {
		if v == nil {
			return nil
		}
		return &v.FrequencyInMinutes
	}).(pulumi.IntPtrOutput)
}

// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
func (o SchedulePtrOutput) TimeWindowInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Schedule) *int {
		if v == nil {
			return nil
		}
		return &v.TimeWindowInMinutes
	}).(pulumi.IntPtrOutput)
}

// Defines how often to run the search and the time interval.
type ScheduleResponse struct {
	// frequency (in minutes) at which rule condition should be evaluated.
	FrequencyInMinutes int `pulumi:"frequencyInMinutes"`
	// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
	TimeWindowInMinutes int `pulumi:"timeWindowInMinutes"`
}

// ScheduleResponseInput is an input type that accepts ScheduleResponseArgs and ScheduleResponseOutput values.
// You can construct a concrete instance of `ScheduleResponseInput` via:
//
//          ScheduleResponseArgs{...}
type ScheduleResponseInput interface {
	pulumi.Input

	ToScheduleResponseOutput() ScheduleResponseOutput
	ToScheduleResponseOutputWithContext(context.Context) ScheduleResponseOutput
}

// Defines how often to run the search and the time interval.
type ScheduleResponseArgs struct {
	// frequency (in minutes) at which rule condition should be evaluated.
	FrequencyInMinutes pulumi.IntInput `pulumi:"frequencyInMinutes"`
	// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
	TimeWindowInMinutes pulumi.IntInput `pulumi:"timeWindowInMinutes"`
}

func (ScheduleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleResponse)(nil)).Elem()
}

func (i ScheduleResponseArgs) ToScheduleResponseOutput() ScheduleResponseOutput {
	return i.ToScheduleResponseOutputWithContext(context.Background())
}

func (i ScheduleResponseArgs) ToScheduleResponseOutputWithContext(ctx context.Context) ScheduleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleResponseOutput)
}

func (i ScheduleResponseArgs) ToScheduleResponsePtrOutput() ScheduleResponsePtrOutput {
	return i.ToScheduleResponsePtrOutputWithContext(context.Background())
}

func (i ScheduleResponseArgs) ToScheduleResponsePtrOutputWithContext(ctx context.Context) ScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleResponseOutput).ToScheduleResponsePtrOutputWithContext(ctx)
}

// ScheduleResponsePtrInput is an input type that accepts ScheduleResponseArgs, ScheduleResponsePtr and ScheduleResponsePtrOutput values.
// You can construct a concrete instance of `ScheduleResponsePtrInput` via:
//
//          ScheduleResponseArgs{...}
//
//  or:
//
//          nil
type ScheduleResponsePtrInput interface {
	pulumi.Input

	ToScheduleResponsePtrOutput() ScheduleResponsePtrOutput
	ToScheduleResponsePtrOutputWithContext(context.Context) ScheduleResponsePtrOutput
}

type scheduleResponsePtrType ScheduleResponseArgs

func ScheduleResponsePtr(v *ScheduleResponseArgs) ScheduleResponsePtrInput {
	return (*scheduleResponsePtrType)(v)
}

func (*scheduleResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleResponse)(nil)).Elem()
}

func (i *scheduleResponsePtrType) ToScheduleResponsePtrOutput() ScheduleResponsePtrOutput {
	return i.ToScheduleResponsePtrOutputWithContext(context.Background())
}

func (i *scheduleResponsePtrType) ToScheduleResponsePtrOutputWithContext(ctx context.Context) ScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleResponsePtrOutput)
}

// Defines how often to run the search and the time interval.
type ScheduleResponseOutput struct{ *pulumi.OutputState }

func (ScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleResponse)(nil)).Elem()
}

func (o ScheduleResponseOutput) ToScheduleResponseOutput() ScheduleResponseOutput {
	return o
}

func (o ScheduleResponseOutput) ToScheduleResponseOutputWithContext(ctx context.Context) ScheduleResponseOutput {
	return o
}

func (o ScheduleResponseOutput) ToScheduleResponsePtrOutput() ScheduleResponsePtrOutput {
	return o.ToScheduleResponsePtrOutputWithContext(context.Background())
}

func (o ScheduleResponseOutput) ToScheduleResponsePtrOutputWithContext(ctx context.Context) ScheduleResponsePtrOutput {
	return o.ApplyT(func(v ScheduleResponse) *ScheduleResponse {
		return &v
	}).(ScheduleResponsePtrOutput)
}

// frequency (in minutes) at which rule condition should be evaluated.
func (o ScheduleResponseOutput) FrequencyInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleResponse) int { return v.FrequencyInMinutes }).(pulumi.IntOutput)
}

// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
func (o ScheduleResponseOutput) TimeWindowInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleResponse) int { return v.TimeWindowInMinutes }).(pulumi.IntOutput)
}

type ScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (ScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleResponse)(nil)).Elem()
}

func (o ScheduleResponsePtrOutput) ToScheduleResponsePtrOutput() ScheduleResponsePtrOutput {
	return o
}

func (o ScheduleResponsePtrOutput) ToScheduleResponsePtrOutputWithContext(ctx context.Context) ScheduleResponsePtrOutput {
	return o
}

func (o ScheduleResponsePtrOutput) Elem() ScheduleResponseOutput {
	return o.ApplyT(func(v *ScheduleResponse) ScheduleResponse { return *v }).(ScheduleResponseOutput)
}

// frequency (in minutes) at which rule condition should be evaluated.
func (o ScheduleResponsePtrOutput) FrequencyInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return &v.FrequencyInMinutes
	}).(pulumi.IntPtrOutput)
}

// Time window for which data needs to be fetched for query (should be greater than or equal to frequencyInMinutes).
func (o ScheduleResponsePtrOutput) TimeWindowInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return &v.TimeWindowInMinutes
	}).(pulumi.IntPtrOutput)
}

// The Log Search Rule resource.
type ScheduledQueryRuleType struct {
	// Resource location
	Location string `pulumi:"location"`
	// Azure resource name
	Name string `pulumi:"name"`
	// The rule properties of the resource.
	Properties LogSearchRuleResponse `pulumi:"properties"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Azure resource type
	Type string `pulumi:"type"`
}

// ScheduledQueryRuleTypeInput is an input type that accepts ScheduledQueryRuleTypeArgs and ScheduledQueryRuleTypeOutput values.
// You can construct a concrete instance of `ScheduledQueryRuleTypeInput` via:
//
//          ScheduledQueryRuleTypeArgs{...}
type ScheduledQueryRuleTypeInput interface {
	pulumi.Input

	ToScheduledQueryRuleTypeOutput() ScheduledQueryRuleTypeOutput
	ToScheduledQueryRuleTypeOutputWithContext(context.Context) ScheduledQueryRuleTypeOutput
}

// The Log Search Rule resource.
type ScheduledQueryRuleTypeArgs struct {
	// Resource location
	Location pulumi.StringInput `pulumi:"location"`
	// Azure resource name
	Name pulumi.StringInput `pulumi:"name"`
	// The rule properties of the resource.
	Properties LogSearchRuleResponseInput `pulumi:"properties"`
	// Resource tags
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Azure resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (ScheduledQueryRuleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRuleType)(nil)).Elem()
}

func (i ScheduledQueryRuleTypeArgs) ToScheduledQueryRuleTypeOutput() ScheduledQueryRuleTypeOutput {
	return i.ToScheduledQueryRuleTypeOutputWithContext(context.Background())
}

func (i ScheduledQueryRuleTypeArgs) ToScheduledQueryRuleTypeOutputWithContext(ctx context.Context) ScheduledQueryRuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRuleTypeOutput)
}

// The Log Search Rule resource.
type ScheduledQueryRuleTypeOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRuleType)(nil)).Elem()
}

func (o ScheduledQueryRuleTypeOutput) ToScheduledQueryRuleTypeOutput() ScheduledQueryRuleTypeOutput {
	return o
}

func (o ScheduledQueryRuleTypeOutput) ToScheduledQueryRuleTypeOutputWithContext(ctx context.Context) ScheduledQueryRuleTypeOutput {
	return o
}

// Resource location
func (o ScheduledQueryRuleTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduledQueryRuleType) string { return v.Location }).(pulumi.StringOutput)
}

// Azure resource name
func (o ScheduledQueryRuleTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduledQueryRuleType) string { return v.Name }).(pulumi.StringOutput)
}

// The rule properties of the resource.
func (o ScheduledQueryRuleTypeOutput) Properties() LogSearchRuleResponseOutput {
	return o.ApplyT(func(v ScheduledQueryRuleType) LogSearchRuleResponse { return v.Properties }).(LogSearchRuleResponseOutput)
}

// Resource tags
func (o ScheduledQueryRuleTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ScheduledQueryRuleType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure resource type
func (o ScheduledQueryRuleTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduledQueryRuleType) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies the log search query.
type Source struct {
	// List of  Resource referred into query
	AuthorizedResources []string `pulumi:"authorizedResources"`
	// The resource uri over which log search query is to be run.
	DataSourceId string `pulumi:"dataSourceId"`
	// Log search query. Required for action type - AlertingAction
	Query *string `pulumi:"query"`
	// Set value to 'ResultCount' .
	QueryType *string `pulumi:"queryType"`
}

// SourceInput is an input type that accepts SourceArgs and SourceOutput values.
// You can construct a concrete instance of `SourceInput` via:
//
//          SourceArgs{...}
type SourceInput interface {
	pulumi.Input

	ToSourceOutput() SourceOutput
	ToSourceOutputWithContext(context.Context) SourceOutput
}

// Specifies the log search query.
type SourceArgs struct {
	// List of  Resource referred into query
	AuthorizedResources pulumi.StringArrayInput `pulumi:"authorizedResources"`
	// The resource uri over which log search query is to be run.
	DataSourceId pulumi.StringInput `pulumi:"dataSourceId"`
	// Log search query. Required for action type - AlertingAction
	Query pulumi.StringPtrInput `pulumi:"query"`
	// Set value to 'ResultCount' .
	QueryType pulumi.StringPtrInput `pulumi:"queryType"`
}

func (SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (i SourceArgs) ToSourceOutput() SourceOutput {
	return i.ToSourceOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput)
}

func (i SourceArgs) ToSourcePtrOutput() SourcePtrOutput {
	return i.ToSourcePtrOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput).ToSourcePtrOutputWithContext(ctx)
}

// SourcePtrInput is an input type that accepts SourceArgs, SourcePtr and SourcePtrOutput values.
// You can construct a concrete instance of `SourcePtrInput` via:
//
//          SourceArgs{...}
//
//  or:
//
//          nil
type SourcePtrInput interface {
	pulumi.Input

	ToSourcePtrOutput() SourcePtrOutput
	ToSourcePtrOutputWithContext(context.Context) SourcePtrOutput
}

type sourcePtrType SourceArgs

func SourcePtr(v *SourceArgs) SourcePtrInput {
	return (*sourcePtrType)(v)
}

func (*sourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (i *sourcePtrType) ToSourcePtrOutput() SourcePtrOutput {
	return i.ToSourcePtrOutputWithContext(context.Background())
}

func (i *sourcePtrType) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePtrOutput)
}

// Specifies the log search query.
type SourceOutput struct{ *pulumi.OutputState }

func (SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (o SourceOutput) ToSourceOutput() SourceOutput {
	return o
}

func (o SourceOutput) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return o
}

func (o SourceOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o.ToSourcePtrOutputWithContext(context.Background())
}

func (o SourceOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o.ApplyT(func(v Source) *Source {
		return &v
	}).(SourcePtrOutput)
}

// List of  Resource referred into query
func (o SourceOutput) AuthorizedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Source) []string { return v.AuthorizedResources }).(pulumi.StringArrayOutput)
}

// The resource uri over which log search query is to be run.
func (o SourceOutput) DataSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v Source) string { return v.DataSourceId }).(pulumi.StringOutput)
}

// Log search query. Required for action type - AlertingAction
func (o SourceOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Source) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// Set value to 'ResultCount' .
func (o SourceOutput) QueryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Source) *string { return v.QueryType }).(pulumi.StringPtrOutput)
}

type SourcePtrOutput struct{ *pulumi.OutputState }

func (SourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (o SourcePtrOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) Elem() SourceOutput {
	return o.ApplyT(func(v *Source) Source { return *v }).(SourceOutput)
}

// List of  Resource referred into query
func (o SourcePtrOutput) AuthorizedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Source) []string {
		if v == nil {
			return nil
		}
		return v.AuthorizedResources
	}).(pulumi.StringArrayOutput)
}

// The resource uri over which log search query is to be run.
func (o SourcePtrOutput) DataSourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Source) *string {
		if v == nil {
			return nil
		}
		return &v.DataSourceId
	}).(pulumi.StringPtrOutput)
}

// Log search query. Required for action type - AlertingAction
func (o SourcePtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Source) *string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringPtrOutput)
}

// Set value to 'ResultCount' .
func (o SourcePtrOutput) QueryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Source) *string {
		if v == nil {
			return nil
		}
		return v.QueryType
	}).(pulumi.StringPtrOutput)
}

// Specifies the log search query.
type SourceResponse struct {
	// List of  Resource referred into query
	AuthorizedResources []string `pulumi:"authorizedResources"`
	// The resource uri over which log search query is to be run.
	DataSourceId string `pulumi:"dataSourceId"`
	// Log search query. Required for action type - AlertingAction
	Query *string `pulumi:"query"`
	// Set value to 'ResultCount' .
	QueryType *string `pulumi:"queryType"`
}

// SourceResponseInput is an input type that accepts SourceResponseArgs and SourceResponseOutput values.
// You can construct a concrete instance of `SourceResponseInput` via:
//
//          SourceResponseArgs{...}
type SourceResponseInput interface {
	pulumi.Input

	ToSourceResponseOutput() SourceResponseOutput
	ToSourceResponseOutputWithContext(context.Context) SourceResponseOutput
}

// Specifies the log search query.
type SourceResponseArgs struct {
	// List of  Resource referred into query
	AuthorizedResources pulumi.StringArrayInput `pulumi:"authorizedResources"`
	// The resource uri over which log search query is to be run.
	DataSourceId pulumi.StringInput `pulumi:"dataSourceId"`
	// Log search query. Required for action type - AlertingAction
	Query pulumi.StringPtrInput `pulumi:"query"`
	// Set value to 'ResultCount' .
	QueryType pulumi.StringPtrInput `pulumi:"queryType"`
}

func (SourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceResponse)(nil)).Elem()
}

func (i SourceResponseArgs) ToSourceResponseOutput() SourceResponseOutput {
	return i.ToSourceResponseOutputWithContext(context.Background())
}

func (i SourceResponseArgs) ToSourceResponseOutputWithContext(ctx context.Context) SourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceResponseOutput)
}

func (i SourceResponseArgs) ToSourceResponsePtrOutput() SourceResponsePtrOutput {
	return i.ToSourceResponsePtrOutputWithContext(context.Background())
}

func (i SourceResponseArgs) ToSourceResponsePtrOutputWithContext(ctx context.Context) SourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceResponseOutput).ToSourceResponsePtrOutputWithContext(ctx)
}

// SourceResponsePtrInput is an input type that accepts SourceResponseArgs, SourceResponsePtr and SourceResponsePtrOutput values.
// You can construct a concrete instance of `SourceResponsePtrInput` via:
//
//          SourceResponseArgs{...}
//
//  or:
//
//          nil
type SourceResponsePtrInput interface {
	pulumi.Input

	ToSourceResponsePtrOutput() SourceResponsePtrOutput
	ToSourceResponsePtrOutputWithContext(context.Context) SourceResponsePtrOutput
}

type sourceResponsePtrType SourceResponseArgs

func SourceResponsePtr(v *SourceResponseArgs) SourceResponsePtrInput {
	return (*sourceResponsePtrType)(v)
}

func (*sourceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceResponse)(nil)).Elem()
}

func (i *sourceResponsePtrType) ToSourceResponsePtrOutput() SourceResponsePtrOutput {
	return i.ToSourceResponsePtrOutputWithContext(context.Background())
}

func (i *sourceResponsePtrType) ToSourceResponsePtrOutputWithContext(ctx context.Context) SourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceResponsePtrOutput)
}

// Specifies the log search query.
type SourceResponseOutput struct{ *pulumi.OutputState }

func (SourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceResponse)(nil)).Elem()
}

func (o SourceResponseOutput) ToSourceResponseOutput() SourceResponseOutput {
	return o
}

func (o SourceResponseOutput) ToSourceResponseOutputWithContext(ctx context.Context) SourceResponseOutput {
	return o
}

func (o SourceResponseOutput) ToSourceResponsePtrOutput() SourceResponsePtrOutput {
	return o.ToSourceResponsePtrOutputWithContext(context.Background())
}

func (o SourceResponseOutput) ToSourceResponsePtrOutputWithContext(ctx context.Context) SourceResponsePtrOutput {
	return o.ApplyT(func(v SourceResponse) *SourceResponse {
		return &v
	}).(SourceResponsePtrOutput)
}

// List of  Resource referred into query
func (o SourceResponseOutput) AuthorizedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SourceResponse) []string { return v.AuthorizedResources }).(pulumi.StringArrayOutput)
}

// The resource uri over which log search query is to be run.
func (o SourceResponseOutput) DataSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v SourceResponse) string { return v.DataSourceId }).(pulumi.StringOutput)
}

// Log search query. Required for action type - AlertingAction
func (o SourceResponseOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceResponse) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// Set value to 'ResultCount' .
func (o SourceResponseOutput) QueryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceResponse) *string { return v.QueryType }).(pulumi.StringPtrOutput)
}

type SourceResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceResponse)(nil)).Elem()
}

func (o SourceResponsePtrOutput) ToSourceResponsePtrOutput() SourceResponsePtrOutput {
	return o
}

func (o SourceResponsePtrOutput) ToSourceResponsePtrOutputWithContext(ctx context.Context) SourceResponsePtrOutput {
	return o
}

func (o SourceResponsePtrOutput) Elem() SourceResponseOutput {
	return o.ApplyT(func(v *SourceResponse) SourceResponse { return *v }).(SourceResponseOutput)
}

// List of  Resource referred into query
func (o SourceResponsePtrOutput) AuthorizedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SourceResponse) []string {
		if v == nil {
			return nil
		}
		return v.AuthorizedResources
	}).(pulumi.StringArrayOutput)
}

// The resource uri over which log search query is to be run.
func (o SourceResponsePtrOutput) DataSourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataSourceId
	}).(pulumi.StringPtrOutput)
}

// Log search query. Required for action type - AlertingAction
func (o SourceResponsePtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringPtrOutput)
}

// Set value to 'ResultCount' .
func (o SourceResponsePtrOutput) QueryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.QueryType
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ActionOutput{})
	pulumi.RegisterOutputType(ActionPtrOutput{})
	pulumi.RegisterOutputType(ActionResponseOutput{})
	pulumi.RegisterOutputType(ActionResponsePtrOutput{})
	pulumi.RegisterOutputType(LogSearchRuleResponseOutput{})
	pulumi.RegisterOutputType(LogSearchRuleResponsePtrOutput{})
	pulumi.RegisterOutputType(ScheduleOutput{})
	pulumi.RegisterOutputType(SchedulePtrOutput{})
	pulumi.RegisterOutputType(ScheduleResponseOutput{})
	pulumi.RegisterOutputType(ScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRuleTypeOutput{})
	pulumi.RegisterOutputType(SourceOutput{})
	pulumi.RegisterOutputType(SourcePtrOutput{})
	pulumi.RegisterOutputType(SourceResponseOutput{})
	pulumi.RegisterOutputType(SourceResponsePtrOutput{})
}
