// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20160301

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The alert rule resource.
type AlertRuleType struct {
	// Resource location
	Location string `pulumi:"location"`
	// Azure resource name
	Name string `pulumi:"name"`
	// The alert rule properties of the resource.
	Properties AlertRuleResponse `pulumi:"properties"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Azure resource type
	Type string `pulumi:"type"`
}

// AlertRuleTypeInput is an input type that accepts AlertRuleTypeArgs and AlertRuleTypeOutput values.
// You can construct a concrete instance of `AlertRuleTypeInput` via:
//
//          AlertRuleTypeArgs{...}
type AlertRuleTypeInput interface {
	pulumi.Input

	ToAlertRuleTypeOutput() AlertRuleTypeOutput
	ToAlertRuleTypeOutputWithContext(context.Context) AlertRuleTypeOutput
}

// The alert rule resource.
type AlertRuleTypeArgs struct {
	// Resource location
	Location pulumi.StringInput `pulumi:"location"`
	// Azure resource name
	Name pulumi.StringInput `pulumi:"name"`
	// The alert rule properties of the resource.
	Properties AlertRuleResponseInput `pulumi:"properties"`
	// Resource tags
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Azure resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (AlertRuleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertRuleType)(nil)).Elem()
}

func (i AlertRuleTypeArgs) ToAlertRuleTypeOutput() AlertRuleTypeOutput {
	return i.ToAlertRuleTypeOutputWithContext(context.Background())
}

func (i AlertRuleTypeArgs) ToAlertRuleTypeOutputWithContext(ctx context.Context) AlertRuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertRuleTypeOutput)
}

// The alert rule resource.
type AlertRuleTypeOutput struct{ *pulumi.OutputState }

func (AlertRuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertRuleType)(nil)).Elem()
}

func (o AlertRuleTypeOutput) ToAlertRuleTypeOutput() AlertRuleTypeOutput {
	return o
}

func (o AlertRuleTypeOutput) ToAlertRuleTypeOutputWithContext(ctx context.Context) AlertRuleTypeOutput {
	return o
}

// Resource location
func (o AlertRuleTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v AlertRuleType) string { return v.Location }).(pulumi.StringOutput)
}

// Azure resource name
func (o AlertRuleTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertRuleType) string { return v.Name }).(pulumi.StringOutput)
}

// The alert rule properties of the resource.
func (o AlertRuleTypeOutput) Properties() AlertRuleResponseOutput {
	return o.ApplyT(func(v AlertRuleType) AlertRuleResponse { return v.Properties }).(AlertRuleResponseOutput)
}

// Resource tags
func (o AlertRuleTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertRuleType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure resource type
func (o AlertRuleTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AlertRuleType) string { return v.Type }).(pulumi.StringOutput)
}

// An alert rule.
type AlertRuleDefinition struct {
	// the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
	Actions []RuleAction `pulumi:"actions"`
	// the condition that results in the alert rule being activated.
	Condition RuleCondition `pulumi:"condition"`
	// the description of the alert rule that will be included in the alert email.
	Description *string `pulumi:"description"`
	// the flag that indicates whether the alert rule is enabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// the name of the alert rule.
	Name string `pulumi:"name"`
}

// AlertRuleDefinitionInput is an input type that accepts AlertRuleDefinitionArgs and AlertRuleDefinitionOutput values.
// You can construct a concrete instance of `AlertRuleDefinitionInput` via:
//
//          AlertRuleDefinitionArgs{...}
type AlertRuleDefinitionInput interface {
	pulumi.Input

	ToAlertRuleDefinitionOutput() AlertRuleDefinitionOutput
	ToAlertRuleDefinitionOutputWithContext(context.Context) AlertRuleDefinitionOutput
}

// An alert rule.
type AlertRuleDefinitionArgs struct {
	// the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
	Actions RuleActionArrayInput `pulumi:"actions"`
	// the condition that results in the alert rule being activated.
	Condition RuleConditionInput `pulumi:"condition"`
	// the description of the alert rule that will be included in the alert email.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// the flag that indicates whether the alert rule is enabled.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// the name of the alert rule.
	Name pulumi.StringInput `pulumi:"name"`
}

func (AlertRuleDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertRuleDefinition)(nil)).Elem()
}

func (i AlertRuleDefinitionArgs) ToAlertRuleDefinitionOutput() AlertRuleDefinitionOutput {
	return i.ToAlertRuleDefinitionOutputWithContext(context.Background())
}

func (i AlertRuleDefinitionArgs) ToAlertRuleDefinitionOutputWithContext(ctx context.Context) AlertRuleDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertRuleDefinitionOutput)
}

func (i AlertRuleDefinitionArgs) ToAlertRuleDefinitionPtrOutput() AlertRuleDefinitionPtrOutput {
	return i.ToAlertRuleDefinitionPtrOutputWithContext(context.Background())
}

func (i AlertRuleDefinitionArgs) ToAlertRuleDefinitionPtrOutputWithContext(ctx context.Context) AlertRuleDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertRuleDefinitionOutput).ToAlertRuleDefinitionPtrOutputWithContext(ctx)
}

// AlertRuleDefinitionPtrInput is an input type that accepts AlertRuleDefinitionArgs, AlertRuleDefinitionPtr and AlertRuleDefinitionPtrOutput values.
// You can construct a concrete instance of `AlertRuleDefinitionPtrInput` via:
//
//          AlertRuleDefinitionArgs{...}
//
//  or:
//
//          nil
type AlertRuleDefinitionPtrInput interface {
	pulumi.Input

	ToAlertRuleDefinitionPtrOutput() AlertRuleDefinitionPtrOutput
	ToAlertRuleDefinitionPtrOutputWithContext(context.Context) AlertRuleDefinitionPtrOutput
}

type alertRuleDefinitionPtrType AlertRuleDefinitionArgs

func AlertRuleDefinitionPtr(v *AlertRuleDefinitionArgs) AlertRuleDefinitionPtrInput {
	return (*alertRuleDefinitionPtrType)(v)
}

func (*alertRuleDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertRuleDefinition)(nil)).Elem()
}

func (i *alertRuleDefinitionPtrType) ToAlertRuleDefinitionPtrOutput() AlertRuleDefinitionPtrOutput {
	return i.ToAlertRuleDefinitionPtrOutputWithContext(context.Background())
}

func (i *alertRuleDefinitionPtrType) ToAlertRuleDefinitionPtrOutputWithContext(ctx context.Context) AlertRuleDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertRuleDefinitionPtrOutput)
}

// An alert rule.
type AlertRuleDefinitionOutput struct{ *pulumi.OutputState }

func (AlertRuleDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertRuleDefinition)(nil)).Elem()
}

func (o AlertRuleDefinitionOutput) ToAlertRuleDefinitionOutput() AlertRuleDefinitionOutput {
	return o
}

func (o AlertRuleDefinitionOutput) ToAlertRuleDefinitionOutputWithContext(ctx context.Context) AlertRuleDefinitionOutput {
	return o
}

func (o AlertRuleDefinitionOutput) ToAlertRuleDefinitionPtrOutput() AlertRuleDefinitionPtrOutput {
	return o.ToAlertRuleDefinitionPtrOutputWithContext(context.Background())
}

func (o AlertRuleDefinitionOutput) ToAlertRuleDefinitionPtrOutputWithContext(ctx context.Context) AlertRuleDefinitionPtrOutput {
	return o.ApplyT(func(v AlertRuleDefinition) *AlertRuleDefinition {
		return &v
	}).(AlertRuleDefinitionPtrOutput)
}

// the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
func (o AlertRuleDefinitionOutput) Actions() RuleActionArrayOutput {
	return o.ApplyT(func(v AlertRuleDefinition) []RuleAction { return v.Actions }).(RuleActionArrayOutput)
}

// the condition that results in the alert rule being activated.
func (o AlertRuleDefinitionOutput) Condition() RuleConditionOutput {
	return o.ApplyT(func(v AlertRuleDefinition) RuleCondition { return v.Condition }).(RuleConditionOutput)
}

// the description of the alert rule that will be included in the alert email.
func (o AlertRuleDefinitionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertRuleDefinition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// the flag that indicates whether the alert rule is enabled.
func (o AlertRuleDefinitionOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v AlertRuleDefinition) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// the name of the alert rule.
func (o AlertRuleDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertRuleDefinition) string { return v.Name }).(pulumi.StringOutput)
}

type AlertRuleDefinitionPtrOutput struct{ *pulumi.OutputState }

func (AlertRuleDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertRuleDefinition)(nil)).Elem()
}

func (o AlertRuleDefinitionPtrOutput) ToAlertRuleDefinitionPtrOutput() AlertRuleDefinitionPtrOutput {
	return o
}

func (o AlertRuleDefinitionPtrOutput) ToAlertRuleDefinitionPtrOutputWithContext(ctx context.Context) AlertRuleDefinitionPtrOutput {
	return o
}

func (o AlertRuleDefinitionPtrOutput) Elem() AlertRuleDefinitionOutput {
	return o.ApplyT(func(v *AlertRuleDefinition) AlertRuleDefinition { return *v }).(AlertRuleDefinitionOutput)
}

// the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
func (o AlertRuleDefinitionPtrOutput) Actions() RuleActionArrayOutput {
	return o.ApplyT(func(v *AlertRuleDefinition) []RuleAction {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(RuleActionArrayOutput)
}

// the condition that results in the alert rule being activated.
func (o AlertRuleDefinitionPtrOutput) Condition() RuleConditionPtrOutput {
	return o.ApplyT(func(v *AlertRuleDefinition) *RuleCondition {
		if v == nil {
			return nil
		}
		return &v.Condition
	}).(RuleConditionPtrOutput)
}

// the description of the alert rule that will be included in the alert email.
func (o AlertRuleDefinitionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertRuleDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// the flag that indicates whether the alert rule is enabled.
func (o AlertRuleDefinitionPtrOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertRuleDefinition) *bool {
		if v == nil {
			return nil
		}
		return &v.IsEnabled
	}).(pulumi.BoolPtrOutput)
}

// the name of the alert rule.
func (o AlertRuleDefinitionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertRuleDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// An alert rule.
type AlertRuleResponse struct {
	// the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
	Actions []RuleActionResponse `pulumi:"actions"`
	// the condition that results in the alert rule being activated.
	Condition RuleConditionResponse `pulumi:"condition"`
	// the description of the alert rule that will be included in the alert email.
	Description *string `pulumi:"description"`
	// the flag that indicates whether the alert rule is enabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// Last time the rule was updated in ISO8601 format.
	LastUpdatedTime string `pulumi:"lastUpdatedTime"`
	// the name of the alert rule.
	Name string `pulumi:"name"`
}

// AlertRuleResponseInput is an input type that accepts AlertRuleResponseArgs and AlertRuleResponseOutput values.
// You can construct a concrete instance of `AlertRuleResponseInput` via:
//
//          AlertRuleResponseArgs{...}
type AlertRuleResponseInput interface {
	pulumi.Input

	ToAlertRuleResponseOutput() AlertRuleResponseOutput
	ToAlertRuleResponseOutputWithContext(context.Context) AlertRuleResponseOutput
}

// An alert rule.
type AlertRuleResponseArgs struct {
	// the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
	Actions RuleActionResponseArrayInput `pulumi:"actions"`
	// the condition that results in the alert rule being activated.
	Condition RuleConditionResponseInput `pulumi:"condition"`
	// the description of the alert rule that will be included in the alert email.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// the flag that indicates whether the alert rule is enabled.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// Last time the rule was updated in ISO8601 format.
	LastUpdatedTime pulumi.StringInput `pulumi:"lastUpdatedTime"`
	// the name of the alert rule.
	Name pulumi.StringInput `pulumi:"name"`
}

func (AlertRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertRuleResponse)(nil)).Elem()
}

func (i AlertRuleResponseArgs) ToAlertRuleResponseOutput() AlertRuleResponseOutput {
	return i.ToAlertRuleResponseOutputWithContext(context.Background())
}

func (i AlertRuleResponseArgs) ToAlertRuleResponseOutputWithContext(ctx context.Context) AlertRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertRuleResponseOutput)
}

func (i AlertRuleResponseArgs) ToAlertRuleResponsePtrOutput() AlertRuleResponsePtrOutput {
	return i.ToAlertRuleResponsePtrOutputWithContext(context.Background())
}

func (i AlertRuleResponseArgs) ToAlertRuleResponsePtrOutputWithContext(ctx context.Context) AlertRuleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertRuleResponseOutput).ToAlertRuleResponsePtrOutputWithContext(ctx)
}

// AlertRuleResponsePtrInput is an input type that accepts AlertRuleResponseArgs, AlertRuleResponsePtr and AlertRuleResponsePtrOutput values.
// You can construct a concrete instance of `AlertRuleResponsePtrInput` via:
//
//          AlertRuleResponseArgs{...}
//
//  or:
//
//          nil
type AlertRuleResponsePtrInput interface {
	pulumi.Input

	ToAlertRuleResponsePtrOutput() AlertRuleResponsePtrOutput
	ToAlertRuleResponsePtrOutputWithContext(context.Context) AlertRuleResponsePtrOutput
}

type alertRuleResponsePtrType AlertRuleResponseArgs

func AlertRuleResponsePtr(v *AlertRuleResponseArgs) AlertRuleResponsePtrInput {
	return (*alertRuleResponsePtrType)(v)
}

func (*alertRuleResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertRuleResponse)(nil)).Elem()
}

func (i *alertRuleResponsePtrType) ToAlertRuleResponsePtrOutput() AlertRuleResponsePtrOutput {
	return i.ToAlertRuleResponsePtrOutputWithContext(context.Background())
}

func (i *alertRuleResponsePtrType) ToAlertRuleResponsePtrOutputWithContext(ctx context.Context) AlertRuleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertRuleResponsePtrOutput)
}

// An alert rule.
type AlertRuleResponseOutput struct{ *pulumi.OutputState }

func (AlertRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertRuleResponse)(nil)).Elem()
}

func (o AlertRuleResponseOutput) ToAlertRuleResponseOutput() AlertRuleResponseOutput {
	return o
}

func (o AlertRuleResponseOutput) ToAlertRuleResponseOutputWithContext(ctx context.Context) AlertRuleResponseOutput {
	return o
}

func (o AlertRuleResponseOutput) ToAlertRuleResponsePtrOutput() AlertRuleResponsePtrOutput {
	return o.ToAlertRuleResponsePtrOutputWithContext(context.Background())
}

func (o AlertRuleResponseOutput) ToAlertRuleResponsePtrOutputWithContext(ctx context.Context) AlertRuleResponsePtrOutput {
	return o.ApplyT(func(v AlertRuleResponse) *AlertRuleResponse {
		return &v
	}).(AlertRuleResponsePtrOutput)
}

// the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
func (o AlertRuleResponseOutput) Actions() RuleActionResponseArrayOutput {
	return o.ApplyT(func(v AlertRuleResponse) []RuleActionResponse { return v.Actions }).(RuleActionResponseArrayOutput)
}

// the condition that results in the alert rule being activated.
func (o AlertRuleResponseOutput) Condition() RuleConditionResponseOutput {
	return o.ApplyT(func(v AlertRuleResponse) RuleConditionResponse { return v.Condition }).(RuleConditionResponseOutput)
}

// the description of the alert rule that will be included in the alert email.
func (o AlertRuleResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertRuleResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// the flag that indicates whether the alert rule is enabled.
func (o AlertRuleResponseOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v AlertRuleResponse) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Last time the rule was updated in ISO8601 format.
func (o AlertRuleResponseOutput) LastUpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v AlertRuleResponse) string { return v.LastUpdatedTime }).(pulumi.StringOutput)
}

// the name of the alert rule.
func (o AlertRuleResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertRuleResponse) string { return v.Name }).(pulumi.StringOutput)
}

type AlertRuleResponsePtrOutput struct{ *pulumi.OutputState }

func (AlertRuleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertRuleResponse)(nil)).Elem()
}

func (o AlertRuleResponsePtrOutput) ToAlertRuleResponsePtrOutput() AlertRuleResponsePtrOutput {
	return o
}

func (o AlertRuleResponsePtrOutput) ToAlertRuleResponsePtrOutputWithContext(ctx context.Context) AlertRuleResponsePtrOutput {
	return o
}

func (o AlertRuleResponsePtrOutput) Elem() AlertRuleResponseOutput {
	return o.ApplyT(func(v *AlertRuleResponse) AlertRuleResponse { return *v }).(AlertRuleResponseOutput)
}

// the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
func (o AlertRuleResponsePtrOutput) Actions() RuleActionResponseArrayOutput {
	return o.ApplyT(func(v *AlertRuleResponse) []RuleActionResponse {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(RuleActionResponseArrayOutput)
}

// the condition that results in the alert rule being activated.
func (o AlertRuleResponsePtrOutput) Condition() RuleConditionResponsePtrOutput {
	return o.ApplyT(func(v *AlertRuleResponse) *RuleConditionResponse {
		if v == nil {
			return nil
		}
		return &v.Condition
	}).(RuleConditionResponsePtrOutput)
}

// the description of the alert rule that will be included in the alert email.
func (o AlertRuleResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertRuleResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// the flag that indicates whether the alert rule is enabled.
func (o AlertRuleResponsePtrOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertRuleResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Last time the rule was updated in ISO8601 format.
func (o AlertRuleResponsePtrOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertRuleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastUpdatedTime
	}).(pulumi.StringPtrOutput)
}

// the name of the alert rule.
func (o AlertRuleResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertRuleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The log profile resource.
type LogProfileType struct {
	// Resource location
	Location string `pulumi:"location"`
	// Azure resource name
	Name string `pulumi:"name"`
	// The log profile properties of the resource.
	Properties LogProfilePropertiesResponse `pulumi:"properties"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Azure resource type
	Type string `pulumi:"type"`
}

// LogProfileTypeInput is an input type that accepts LogProfileTypeArgs and LogProfileTypeOutput values.
// You can construct a concrete instance of `LogProfileTypeInput` via:
//
//          LogProfileTypeArgs{...}
type LogProfileTypeInput interface {
	pulumi.Input

	ToLogProfileTypeOutput() LogProfileTypeOutput
	ToLogProfileTypeOutputWithContext(context.Context) LogProfileTypeOutput
}

// The log profile resource.
type LogProfileTypeArgs struct {
	// Resource location
	Location pulumi.StringInput `pulumi:"location"`
	// Azure resource name
	Name pulumi.StringInput `pulumi:"name"`
	// The log profile properties of the resource.
	Properties LogProfilePropertiesResponseInput `pulumi:"properties"`
	// Resource tags
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Azure resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (LogProfileTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogProfileType)(nil)).Elem()
}

func (i LogProfileTypeArgs) ToLogProfileTypeOutput() LogProfileTypeOutput {
	return i.ToLogProfileTypeOutputWithContext(context.Background())
}

func (i LogProfileTypeArgs) ToLogProfileTypeOutputWithContext(ctx context.Context) LogProfileTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogProfileTypeOutput)
}

// The log profile resource.
type LogProfileTypeOutput struct{ *pulumi.OutputState }

func (LogProfileTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogProfileType)(nil)).Elem()
}

func (o LogProfileTypeOutput) ToLogProfileTypeOutput() LogProfileTypeOutput {
	return o
}

func (o LogProfileTypeOutput) ToLogProfileTypeOutputWithContext(ctx context.Context) LogProfileTypeOutput {
	return o
}

// Resource location
func (o LogProfileTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LogProfileType) string { return v.Location }).(pulumi.StringOutput)
}

// Azure resource name
func (o LogProfileTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LogProfileType) string { return v.Name }).(pulumi.StringOutput)
}

// The log profile properties of the resource.
func (o LogProfileTypeOutput) Properties() LogProfilePropertiesResponseOutput {
	return o.ApplyT(func(v LogProfileType) LogProfilePropertiesResponse { return v.Properties }).(LogProfilePropertiesResponseOutput)
}

// Resource tags
func (o LogProfileTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LogProfileType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure resource type
func (o LogProfileTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LogProfileType) string { return v.Type }).(pulumi.StringOutput)
}

// The log profile properties.
type LogProfileProperties struct {
	// the categories of the logs. These categories are created as is convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'
	Categories []string `pulumi:"categories"`
	// List of regions for which Activity Log events should be stored or streamed. It is a comma separated list of valid ARM locations including the 'global' location.
	Locations []string `pulumi:"locations"`
	// the retention policy for the events in the log.
	RetentionPolicy RetentionPolicy `pulumi:"retentionPolicy"`
	// The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'.
	ServiceBusRuleId *string `pulumi:"serviceBusRuleId"`
	// the resource id of the storage account to which you would like to send the Activity Log.
	StorageAccountId *string `pulumi:"storageAccountId"`
}

// LogProfilePropertiesInput is an input type that accepts LogProfilePropertiesArgs and LogProfilePropertiesOutput values.
// You can construct a concrete instance of `LogProfilePropertiesInput` via:
//
//          LogProfilePropertiesArgs{...}
type LogProfilePropertiesInput interface {
	pulumi.Input

	ToLogProfilePropertiesOutput() LogProfilePropertiesOutput
	ToLogProfilePropertiesOutputWithContext(context.Context) LogProfilePropertiesOutput
}

// The log profile properties.
type LogProfilePropertiesArgs struct {
	// the categories of the logs. These categories are created as is convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'
	Categories pulumi.StringArrayInput `pulumi:"categories"`
	// List of regions for which Activity Log events should be stored or streamed. It is a comma separated list of valid ARM locations including the 'global' location.
	Locations pulumi.StringArrayInput `pulumi:"locations"`
	// the retention policy for the events in the log.
	RetentionPolicy RetentionPolicyInput `pulumi:"retentionPolicy"`
	// The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'.
	ServiceBusRuleId pulumi.StringPtrInput `pulumi:"serviceBusRuleId"`
	// the resource id of the storage account to which you would like to send the Activity Log.
	StorageAccountId pulumi.StringPtrInput `pulumi:"storageAccountId"`
}

func (LogProfilePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogProfileProperties)(nil)).Elem()
}

func (i LogProfilePropertiesArgs) ToLogProfilePropertiesOutput() LogProfilePropertiesOutput {
	return i.ToLogProfilePropertiesOutputWithContext(context.Background())
}

func (i LogProfilePropertiesArgs) ToLogProfilePropertiesOutputWithContext(ctx context.Context) LogProfilePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogProfilePropertiesOutput)
}

func (i LogProfilePropertiesArgs) ToLogProfilePropertiesPtrOutput() LogProfilePropertiesPtrOutput {
	return i.ToLogProfilePropertiesPtrOutputWithContext(context.Background())
}

func (i LogProfilePropertiesArgs) ToLogProfilePropertiesPtrOutputWithContext(ctx context.Context) LogProfilePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogProfilePropertiesOutput).ToLogProfilePropertiesPtrOutputWithContext(ctx)
}

// LogProfilePropertiesPtrInput is an input type that accepts LogProfilePropertiesArgs, LogProfilePropertiesPtr and LogProfilePropertiesPtrOutput values.
// You can construct a concrete instance of `LogProfilePropertiesPtrInput` via:
//
//          LogProfilePropertiesArgs{...}
//
//  or:
//
//          nil
type LogProfilePropertiesPtrInput interface {
	pulumi.Input

	ToLogProfilePropertiesPtrOutput() LogProfilePropertiesPtrOutput
	ToLogProfilePropertiesPtrOutputWithContext(context.Context) LogProfilePropertiesPtrOutput
}

type logProfilePropertiesPtrType LogProfilePropertiesArgs

func LogProfilePropertiesPtr(v *LogProfilePropertiesArgs) LogProfilePropertiesPtrInput {
	return (*logProfilePropertiesPtrType)(v)
}

func (*logProfilePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogProfileProperties)(nil)).Elem()
}

func (i *logProfilePropertiesPtrType) ToLogProfilePropertiesPtrOutput() LogProfilePropertiesPtrOutput {
	return i.ToLogProfilePropertiesPtrOutputWithContext(context.Background())
}

func (i *logProfilePropertiesPtrType) ToLogProfilePropertiesPtrOutputWithContext(ctx context.Context) LogProfilePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogProfilePropertiesPtrOutput)
}

// The log profile properties.
type LogProfilePropertiesOutput struct{ *pulumi.OutputState }

func (LogProfilePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogProfileProperties)(nil)).Elem()
}

func (o LogProfilePropertiesOutput) ToLogProfilePropertiesOutput() LogProfilePropertiesOutput {
	return o
}

func (o LogProfilePropertiesOutput) ToLogProfilePropertiesOutputWithContext(ctx context.Context) LogProfilePropertiesOutput {
	return o
}

func (o LogProfilePropertiesOutput) ToLogProfilePropertiesPtrOutput() LogProfilePropertiesPtrOutput {
	return o.ToLogProfilePropertiesPtrOutputWithContext(context.Background())
}

func (o LogProfilePropertiesOutput) ToLogProfilePropertiesPtrOutputWithContext(ctx context.Context) LogProfilePropertiesPtrOutput {
	return o.ApplyT(func(v LogProfileProperties) *LogProfileProperties {
		return &v
	}).(LogProfilePropertiesPtrOutput)
}

// the categories of the logs. These categories are created as is convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'
func (o LogProfilePropertiesOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LogProfileProperties) []string { return v.Categories }).(pulumi.StringArrayOutput)
}

// List of regions for which Activity Log events should be stored or streamed. It is a comma separated list of valid ARM locations including the 'global' location.
func (o LogProfilePropertiesOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LogProfileProperties) []string { return v.Locations }).(pulumi.StringArrayOutput)
}

// the retention policy for the events in the log.
func (o LogProfilePropertiesOutput) RetentionPolicy() RetentionPolicyOutput {
	return o.ApplyT(func(v LogProfileProperties) RetentionPolicy { return v.RetentionPolicy }).(RetentionPolicyOutput)
}

// The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'.
func (o LogProfilePropertiesOutput) ServiceBusRuleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogProfileProperties) *string { return v.ServiceBusRuleId }).(pulumi.StringPtrOutput)
}

// the resource id of the storage account to which you would like to send the Activity Log.
func (o LogProfilePropertiesOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogProfileProperties) *string { return v.StorageAccountId }).(pulumi.StringPtrOutput)
}

type LogProfilePropertiesPtrOutput struct{ *pulumi.OutputState }

func (LogProfilePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogProfileProperties)(nil)).Elem()
}

func (o LogProfilePropertiesPtrOutput) ToLogProfilePropertiesPtrOutput() LogProfilePropertiesPtrOutput {
	return o
}

func (o LogProfilePropertiesPtrOutput) ToLogProfilePropertiesPtrOutputWithContext(ctx context.Context) LogProfilePropertiesPtrOutput {
	return o
}

func (o LogProfilePropertiesPtrOutput) Elem() LogProfilePropertiesOutput {
	return o.ApplyT(func(v *LogProfileProperties) LogProfileProperties { return *v }).(LogProfilePropertiesOutput)
}

// the categories of the logs. These categories are created as is convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'
func (o LogProfilePropertiesPtrOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LogProfileProperties) []string {
		if v == nil {
			return nil
		}
		return v.Categories
	}).(pulumi.StringArrayOutput)
}

// List of regions for which Activity Log events should be stored or streamed. It is a comma separated list of valid ARM locations including the 'global' location.
func (o LogProfilePropertiesPtrOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LogProfileProperties) []string {
		if v == nil {
			return nil
		}
		return v.Locations
	}).(pulumi.StringArrayOutput)
}

// the retention policy for the events in the log.
func (o LogProfilePropertiesPtrOutput) RetentionPolicy() RetentionPolicyPtrOutput {
	return o.ApplyT(func(v *LogProfileProperties) *RetentionPolicy {
		if v == nil {
			return nil
		}
		return &v.RetentionPolicy
	}).(RetentionPolicyPtrOutput)
}

// The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'.
func (o LogProfilePropertiesPtrOutput) ServiceBusRuleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogProfileProperties) *string {
		if v == nil {
			return nil
		}
		return v.ServiceBusRuleId
	}).(pulumi.StringPtrOutput)
}

// the resource id of the storage account to which you would like to send the Activity Log.
func (o LogProfilePropertiesPtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogProfileProperties) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

// The log profile properties.
type LogProfilePropertiesResponse struct {
	// the categories of the logs. These categories are created as is convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'
	Categories []string `pulumi:"categories"`
	// List of regions for which Activity Log events should be stored or streamed. It is a comma separated list of valid ARM locations including the 'global' location.
	Locations []string `pulumi:"locations"`
	// the retention policy for the events in the log.
	RetentionPolicy RetentionPolicyResponse `pulumi:"retentionPolicy"`
	// The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'.
	ServiceBusRuleId *string `pulumi:"serviceBusRuleId"`
	// the resource id of the storage account to which you would like to send the Activity Log.
	StorageAccountId *string `pulumi:"storageAccountId"`
}

// LogProfilePropertiesResponseInput is an input type that accepts LogProfilePropertiesResponseArgs and LogProfilePropertiesResponseOutput values.
// You can construct a concrete instance of `LogProfilePropertiesResponseInput` via:
//
//          LogProfilePropertiesResponseArgs{...}
type LogProfilePropertiesResponseInput interface {
	pulumi.Input

	ToLogProfilePropertiesResponseOutput() LogProfilePropertiesResponseOutput
	ToLogProfilePropertiesResponseOutputWithContext(context.Context) LogProfilePropertiesResponseOutput
}

// The log profile properties.
type LogProfilePropertiesResponseArgs struct {
	// the categories of the logs. These categories are created as is convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'
	Categories pulumi.StringArrayInput `pulumi:"categories"`
	// List of regions for which Activity Log events should be stored or streamed. It is a comma separated list of valid ARM locations including the 'global' location.
	Locations pulumi.StringArrayInput `pulumi:"locations"`
	// the retention policy for the events in the log.
	RetentionPolicy RetentionPolicyResponseInput `pulumi:"retentionPolicy"`
	// The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'.
	ServiceBusRuleId pulumi.StringPtrInput `pulumi:"serviceBusRuleId"`
	// the resource id of the storage account to which you would like to send the Activity Log.
	StorageAccountId pulumi.StringPtrInput `pulumi:"storageAccountId"`
}

func (LogProfilePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogProfilePropertiesResponse)(nil)).Elem()
}

func (i LogProfilePropertiesResponseArgs) ToLogProfilePropertiesResponseOutput() LogProfilePropertiesResponseOutput {
	return i.ToLogProfilePropertiesResponseOutputWithContext(context.Background())
}

func (i LogProfilePropertiesResponseArgs) ToLogProfilePropertiesResponseOutputWithContext(ctx context.Context) LogProfilePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogProfilePropertiesResponseOutput)
}

func (i LogProfilePropertiesResponseArgs) ToLogProfilePropertiesResponsePtrOutput() LogProfilePropertiesResponsePtrOutput {
	return i.ToLogProfilePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i LogProfilePropertiesResponseArgs) ToLogProfilePropertiesResponsePtrOutputWithContext(ctx context.Context) LogProfilePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogProfilePropertiesResponseOutput).ToLogProfilePropertiesResponsePtrOutputWithContext(ctx)
}

// LogProfilePropertiesResponsePtrInput is an input type that accepts LogProfilePropertiesResponseArgs, LogProfilePropertiesResponsePtr and LogProfilePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `LogProfilePropertiesResponsePtrInput` via:
//
//          LogProfilePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type LogProfilePropertiesResponsePtrInput interface {
	pulumi.Input

	ToLogProfilePropertiesResponsePtrOutput() LogProfilePropertiesResponsePtrOutput
	ToLogProfilePropertiesResponsePtrOutputWithContext(context.Context) LogProfilePropertiesResponsePtrOutput
}

type logProfilePropertiesResponsePtrType LogProfilePropertiesResponseArgs

func LogProfilePropertiesResponsePtr(v *LogProfilePropertiesResponseArgs) LogProfilePropertiesResponsePtrInput {
	return (*logProfilePropertiesResponsePtrType)(v)
}

func (*logProfilePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogProfilePropertiesResponse)(nil)).Elem()
}

func (i *logProfilePropertiesResponsePtrType) ToLogProfilePropertiesResponsePtrOutput() LogProfilePropertiesResponsePtrOutput {
	return i.ToLogProfilePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *logProfilePropertiesResponsePtrType) ToLogProfilePropertiesResponsePtrOutputWithContext(ctx context.Context) LogProfilePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogProfilePropertiesResponsePtrOutput)
}

// The log profile properties.
type LogProfilePropertiesResponseOutput struct{ *pulumi.OutputState }

func (LogProfilePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogProfilePropertiesResponse)(nil)).Elem()
}

func (o LogProfilePropertiesResponseOutput) ToLogProfilePropertiesResponseOutput() LogProfilePropertiesResponseOutput {
	return o
}

func (o LogProfilePropertiesResponseOutput) ToLogProfilePropertiesResponseOutputWithContext(ctx context.Context) LogProfilePropertiesResponseOutput {
	return o
}

func (o LogProfilePropertiesResponseOutput) ToLogProfilePropertiesResponsePtrOutput() LogProfilePropertiesResponsePtrOutput {
	return o.ToLogProfilePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o LogProfilePropertiesResponseOutput) ToLogProfilePropertiesResponsePtrOutputWithContext(ctx context.Context) LogProfilePropertiesResponsePtrOutput {
	return o.ApplyT(func(v LogProfilePropertiesResponse) *LogProfilePropertiesResponse {
		return &v
	}).(LogProfilePropertiesResponsePtrOutput)
}

// the categories of the logs. These categories are created as is convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'
func (o LogProfilePropertiesResponseOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LogProfilePropertiesResponse) []string { return v.Categories }).(pulumi.StringArrayOutput)
}

// List of regions for which Activity Log events should be stored or streamed. It is a comma separated list of valid ARM locations including the 'global' location.
func (o LogProfilePropertiesResponseOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LogProfilePropertiesResponse) []string { return v.Locations }).(pulumi.StringArrayOutput)
}

// the retention policy for the events in the log.
func (o LogProfilePropertiesResponseOutput) RetentionPolicy() RetentionPolicyResponseOutput {
	return o.ApplyT(func(v LogProfilePropertiesResponse) RetentionPolicyResponse { return v.RetentionPolicy }).(RetentionPolicyResponseOutput)
}

// The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'.
func (o LogProfilePropertiesResponseOutput) ServiceBusRuleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogProfilePropertiesResponse) *string { return v.ServiceBusRuleId }).(pulumi.StringPtrOutput)
}

// the resource id of the storage account to which you would like to send the Activity Log.
func (o LogProfilePropertiesResponseOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogProfilePropertiesResponse) *string { return v.StorageAccountId }).(pulumi.StringPtrOutput)
}

type LogProfilePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (LogProfilePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogProfilePropertiesResponse)(nil)).Elem()
}

func (o LogProfilePropertiesResponsePtrOutput) ToLogProfilePropertiesResponsePtrOutput() LogProfilePropertiesResponsePtrOutput {
	return o
}

func (o LogProfilePropertiesResponsePtrOutput) ToLogProfilePropertiesResponsePtrOutputWithContext(ctx context.Context) LogProfilePropertiesResponsePtrOutput {
	return o
}

func (o LogProfilePropertiesResponsePtrOutput) Elem() LogProfilePropertiesResponseOutput {
	return o.ApplyT(func(v *LogProfilePropertiesResponse) LogProfilePropertiesResponse { return *v }).(LogProfilePropertiesResponseOutput)
}

// the categories of the logs. These categories are created as is convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'
func (o LogProfilePropertiesResponsePtrOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LogProfilePropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.Categories
	}).(pulumi.StringArrayOutput)
}

// List of regions for which Activity Log events should be stored or streamed. It is a comma separated list of valid ARM locations including the 'global' location.
func (o LogProfilePropertiesResponsePtrOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LogProfilePropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.Locations
	}).(pulumi.StringArrayOutput)
}

// the retention policy for the events in the log.
func (o LogProfilePropertiesResponsePtrOutput) RetentionPolicy() RetentionPolicyResponsePtrOutput {
	return o.ApplyT(func(v *LogProfilePropertiesResponse) *RetentionPolicyResponse {
		if v == nil {
			return nil
		}
		return &v.RetentionPolicy
	}).(RetentionPolicyResponsePtrOutput)
}

// The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'.
func (o LogProfilePropertiesResponsePtrOutput) ServiceBusRuleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogProfilePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceBusRuleId
	}).(pulumi.StringPtrOutput)
}

// the resource id of the storage account to which you would like to send the Activity Log.
func (o LogProfilePropertiesResponsePtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogProfilePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

// Specifies the retention policy for the log.
type RetentionPolicy struct {
	// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
	Days int `pulumi:"days"`
	// a value indicating whether the retention policy is enabled.
	Enabled bool `pulumi:"enabled"`
}

// RetentionPolicyInput is an input type that accepts RetentionPolicyArgs and RetentionPolicyOutput values.
// You can construct a concrete instance of `RetentionPolicyInput` via:
//
//          RetentionPolicyArgs{...}
type RetentionPolicyInput interface {
	pulumi.Input

	ToRetentionPolicyOutput() RetentionPolicyOutput
	ToRetentionPolicyOutputWithContext(context.Context) RetentionPolicyOutput
}

// Specifies the retention policy for the log.
type RetentionPolicyArgs struct {
	// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
	Days pulumi.IntInput `pulumi:"days"`
	// a value indicating whether the retention policy is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (RetentionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionPolicy)(nil)).Elem()
}

func (i RetentionPolicyArgs) ToRetentionPolicyOutput() RetentionPolicyOutput {
	return i.ToRetentionPolicyOutputWithContext(context.Background())
}

func (i RetentionPolicyArgs) ToRetentionPolicyOutputWithContext(ctx context.Context) RetentionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyOutput)
}

func (i RetentionPolicyArgs) ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput {
	return i.ToRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i RetentionPolicyArgs) ToRetentionPolicyPtrOutputWithContext(ctx context.Context) RetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyOutput).ToRetentionPolicyPtrOutputWithContext(ctx)
}

// RetentionPolicyPtrInput is an input type that accepts RetentionPolicyArgs, RetentionPolicyPtr and RetentionPolicyPtrOutput values.
// You can construct a concrete instance of `RetentionPolicyPtrInput` via:
//
//          RetentionPolicyArgs{...}
//
//  or:
//
//          nil
type RetentionPolicyPtrInput interface {
	pulumi.Input

	ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput
	ToRetentionPolicyPtrOutputWithContext(context.Context) RetentionPolicyPtrOutput
}

type retentionPolicyPtrType RetentionPolicyArgs

func RetentionPolicyPtr(v *RetentionPolicyArgs) RetentionPolicyPtrInput {
	return (*retentionPolicyPtrType)(v)
}

func (*retentionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionPolicy)(nil)).Elem()
}

func (i *retentionPolicyPtrType) ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput {
	return i.ToRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i *retentionPolicyPtrType) ToRetentionPolicyPtrOutputWithContext(ctx context.Context) RetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyPtrOutput)
}

// Specifies the retention policy for the log.
type RetentionPolicyOutput struct{ *pulumi.OutputState }

func (RetentionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionPolicy)(nil)).Elem()
}

func (o RetentionPolicyOutput) ToRetentionPolicyOutput() RetentionPolicyOutput {
	return o
}

func (o RetentionPolicyOutput) ToRetentionPolicyOutputWithContext(ctx context.Context) RetentionPolicyOutput {
	return o
}

func (o RetentionPolicyOutput) ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput {
	return o.ToRetentionPolicyPtrOutputWithContext(context.Background())
}

func (o RetentionPolicyOutput) ToRetentionPolicyPtrOutputWithContext(ctx context.Context) RetentionPolicyPtrOutput {
	return o.ApplyT(func(v RetentionPolicy) *RetentionPolicy {
		return &v
	}).(RetentionPolicyPtrOutput)
}

// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
func (o RetentionPolicyOutput) Days() pulumi.IntOutput {
	return o.ApplyT(func(v RetentionPolicy) int { return v.Days }).(pulumi.IntOutput)
}

// a value indicating whether the retention policy is enabled.
func (o RetentionPolicyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v RetentionPolicy) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type RetentionPolicyPtrOutput struct{ *pulumi.OutputState }

func (RetentionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionPolicy)(nil)).Elem()
}

func (o RetentionPolicyPtrOutput) ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput {
	return o
}

func (o RetentionPolicyPtrOutput) ToRetentionPolicyPtrOutputWithContext(ctx context.Context) RetentionPolicyPtrOutput {
	return o
}

func (o RetentionPolicyPtrOutput) Elem() RetentionPolicyOutput {
	return o.ApplyT(func(v *RetentionPolicy) RetentionPolicy { return *v }).(RetentionPolicyOutput)
}

// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
func (o RetentionPolicyPtrOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetentionPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.Days
	}).(pulumi.IntPtrOutput)
}

// a value indicating whether the retention policy is enabled.
func (o RetentionPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RetentionPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the retention policy for the log.
type RetentionPolicyResponse struct {
	// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
	Days int `pulumi:"days"`
	// a value indicating whether the retention policy is enabled.
	Enabled bool `pulumi:"enabled"`
}

// RetentionPolicyResponseInput is an input type that accepts RetentionPolicyResponseArgs and RetentionPolicyResponseOutput values.
// You can construct a concrete instance of `RetentionPolicyResponseInput` via:
//
//          RetentionPolicyResponseArgs{...}
type RetentionPolicyResponseInput interface {
	pulumi.Input

	ToRetentionPolicyResponseOutput() RetentionPolicyResponseOutput
	ToRetentionPolicyResponseOutputWithContext(context.Context) RetentionPolicyResponseOutput
}

// Specifies the retention policy for the log.
type RetentionPolicyResponseArgs struct {
	// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
	Days pulumi.IntInput `pulumi:"days"`
	// a value indicating whether the retention policy is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (RetentionPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionPolicyResponse)(nil)).Elem()
}

func (i RetentionPolicyResponseArgs) ToRetentionPolicyResponseOutput() RetentionPolicyResponseOutput {
	return i.ToRetentionPolicyResponseOutputWithContext(context.Background())
}

func (i RetentionPolicyResponseArgs) ToRetentionPolicyResponseOutputWithContext(ctx context.Context) RetentionPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyResponseOutput)
}

func (i RetentionPolicyResponseArgs) ToRetentionPolicyResponsePtrOutput() RetentionPolicyResponsePtrOutput {
	return i.ToRetentionPolicyResponsePtrOutputWithContext(context.Background())
}

func (i RetentionPolicyResponseArgs) ToRetentionPolicyResponsePtrOutputWithContext(ctx context.Context) RetentionPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyResponseOutput).ToRetentionPolicyResponsePtrOutputWithContext(ctx)
}

// RetentionPolicyResponsePtrInput is an input type that accepts RetentionPolicyResponseArgs, RetentionPolicyResponsePtr and RetentionPolicyResponsePtrOutput values.
// You can construct a concrete instance of `RetentionPolicyResponsePtrInput` via:
//
//          RetentionPolicyResponseArgs{...}
//
//  or:
//
//          nil
type RetentionPolicyResponsePtrInput interface {
	pulumi.Input

	ToRetentionPolicyResponsePtrOutput() RetentionPolicyResponsePtrOutput
	ToRetentionPolicyResponsePtrOutputWithContext(context.Context) RetentionPolicyResponsePtrOutput
}

type retentionPolicyResponsePtrType RetentionPolicyResponseArgs

func RetentionPolicyResponsePtr(v *RetentionPolicyResponseArgs) RetentionPolicyResponsePtrInput {
	return (*retentionPolicyResponsePtrType)(v)
}

func (*retentionPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionPolicyResponse)(nil)).Elem()
}

func (i *retentionPolicyResponsePtrType) ToRetentionPolicyResponsePtrOutput() RetentionPolicyResponsePtrOutput {
	return i.ToRetentionPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *retentionPolicyResponsePtrType) ToRetentionPolicyResponsePtrOutputWithContext(ctx context.Context) RetentionPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyResponsePtrOutput)
}

// Specifies the retention policy for the log.
type RetentionPolicyResponseOutput struct{ *pulumi.OutputState }

func (RetentionPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionPolicyResponse)(nil)).Elem()
}

func (o RetentionPolicyResponseOutput) ToRetentionPolicyResponseOutput() RetentionPolicyResponseOutput {
	return o
}

func (o RetentionPolicyResponseOutput) ToRetentionPolicyResponseOutputWithContext(ctx context.Context) RetentionPolicyResponseOutput {
	return o
}

func (o RetentionPolicyResponseOutput) ToRetentionPolicyResponsePtrOutput() RetentionPolicyResponsePtrOutput {
	return o.ToRetentionPolicyResponsePtrOutputWithContext(context.Background())
}

func (o RetentionPolicyResponseOutput) ToRetentionPolicyResponsePtrOutputWithContext(ctx context.Context) RetentionPolicyResponsePtrOutput {
	return o.ApplyT(func(v RetentionPolicyResponse) *RetentionPolicyResponse {
		return &v
	}).(RetentionPolicyResponsePtrOutput)
}

// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
func (o RetentionPolicyResponseOutput) Days() pulumi.IntOutput {
	return o.ApplyT(func(v RetentionPolicyResponse) int { return v.Days }).(pulumi.IntOutput)
}

// a value indicating whether the retention policy is enabled.
func (o RetentionPolicyResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v RetentionPolicyResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type RetentionPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (RetentionPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionPolicyResponse)(nil)).Elem()
}

func (o RetentionPolicyResponsePtrOutput) ToRetentionPolicyResponsePtrOutput() RetentionPolicyResponsePtrOutput {
	return o
}

func (o RetentionPolicyResponsePtrOutput) ToRetentionPolicyResponsePtrOutputWithContext(ctx context.Context) RetentionPolicyResponsePtrOutput {
	return o
}

func (o RetentionPolicyResponsePtrOutput) Elem() RetentionPolicyResponseOutput {
	return o.ApplyT(func(v *RetentionPolicyResponse) RetentionPolicyResponse { return *v }).(RetentionPolicyResponseOutput)
}

// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
func (o RetentionPolicyResponsePtrOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetentionPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Days
	}).(pulumi.IntPtrOutput)
}

// a value indicating whether the retention policy is enabled.
func (o RetentionPolicyResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RetentionPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The action that is performed when the alert rule becomes active, and when an alert condition is resolved.
type RuleAction struct {
}

// RuleActionInput is an input type that accepts RuleActionArgs and RuleActionOutput values.
// You can construct a concrete instance of `RuleActionInput` via:
//
//          RuleActionArgs{...}
type RuleActionInput interface {
	pulumi.Input

	ToRuleActionOutput() RuleActionOutput
	ToRuleActionOutputWithContext(context.Context) RuleActionOutput
}

// The action that is performed when the alert rule becomes active, and when an alert condition is resolved.
type RuleActionArgs struct {
}

func (RuleActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleAction)(nil)).Elem()
}

func (i RuleActionArgs) ToRuleActionOutput() RuleActionOutput {
	return i.ToRuleActionOutputWithContext(context.Background())
}

func (i RuleActionArgs) ToRuleActionOutputWithContext(ctx context.Context) RuleActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleActionOutput)
}

// RuleActionArrayInput is an input type that accepts RuleActionArray and RuleActionArrayOutput values.
// You can construct a concrete instance of `RuleActionArrayInput` via:
//
//          RuleActionArray{ RuleActionArgs{...} }
type RuleActionArrayInput interface {
	pulumi.Input

	ToRuleActionArrayOutput() RuleActionArrayOutput
	ToRuleActionArrayOutputWithContext(context.Context) RuleActionArrayOutput
}

type RuleActionArray []RuleActionInput

func (RuleActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleAction)(nil)).Elem()
}

func (i RuleActionArray) ToRuleActionArrayOutput() RuleActionArrayOutput {
	return i.ToRuleActionArrayOutputWithContext(context.Background())
}

func (i RuleActionArray) ToRuleActionArrayOutputWithContext(ctx context.Context) RuleActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleActionArrayOutput)
}

// The action that is performed when the alert rule becomes active, and when an alert condition is resolved.
type RuleActionOutput struct{ *pulumi.OutputState }

func (RuleActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleAction)(nil)).Elem()
}

func (o RuleActionOutput) ToRuleActionOutput() RuleActionOutput {
	return o
}

func (o RuleActionOutput) ToRuleActionOutputWithContext(ctx context.Context) RuleActionOutput {
	return o
}

type RuleActionArrayOutput struct{ *pulumi.OutputState }

func (RuleActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleAction)(nil)).Elem()
}

func (o RuleActionArrayOutput) ToRuleActionArrayOutput() RuleActionArrayOutput {
	return o
}

func (o RuleActionArrayOutput) ToRuleActionArrayOutputWithContext(ctx context.Context) RuleActionArrayOutput {
	return o
}

func (o RuleActionArrayOutput) Index(i pulumi.IntInput) RuleActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleAction {
		return vs[0].([]RuleAction)[vs[1].(int)]
	}).(RuleActionOutput)
}

// The action that is performed when the alert rule becomes active, and when an alert condition is resolved.
type RuleActionResponse struct {
}

// RuleActionResponseInput is an input type that accepts RuleActionResponseArgs and RuleActionResponseOutput values.
// You can construct a concrete instance of `RuleActionResponseInput` via:
//
//          RuleActionResponseArgs{...}
type RuleActionResponseInput interface {
	pulumi.Input

	ToRuleActionResponseOutput() RuleActionResponseOutput
	ToRuleActionResponseOutputWithContext(context.Context) RuleActionResponseOutput
}

// The action that is performed when the alert rule becomes active, and when an alert condition is resolved.
type RuleActionResponseArgs struct {
}

func (RuleActionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleActionResponse)(nil)).Elem()
}

func (i RuleActionResponseArgs) ToRuleActionResponseOutput() RuleActionResponseOutput {
	return i.ToRuleActionResponseOutputWithContext(context.Background())
}

func (i RuleActionResponseArgs) ToRuleActionResponseOutputWithContext(ctx context.Context) RuleActionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleActionResponseOutput)
}

// RuleActionResponseArrayInput is an input type that accepts RuleActionResponseArray and RuleActionResponseArrayOutput values.
// You can construct a concrete instance of `RuleActionResponseArrayInput` via:
//
//          RuleActionResponseArray{ RuleActionResponseArgs{...} }
type RuleActionResponseArrayInput interface {
	pulumi.Input

	ToRuleActionResponseArrayOutput() RuleActionResponseArrayOutput
	ToRuleActionResponseArrayOutputWithContext(context.Context) RuleActionResponseArrayOutput
}

type RuleActionResponseArray []RuleActionResponseInput

func (RuleActionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleActionResponse)(nil)).Elem()
}

func (i RuleActionResponseArray) ToRuleActionResponseArrayOutput() RuleActionResponseArrayOutput {
	return i.ToRuleActionResponseArrayOutputWithContext(context.Background())
}

func (i RuleActionResponseArray) ToRuleActionResponseArrayOutputWithContext(ctx context.Context) RuleActionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleActionResponseArrayOutput)
}

// The action that is performed when the alert rule becomes active, and when an alert condition is resolved.
type RuleActionResponseOutput struct{ *pulumi.OutputState }

func (RuleActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleActionResponse)(nil)).Elem()
}

func (o RuleActionResponseOutput) ToRuleActionResponseOutput() RuleActionResponseOutput {
	return o
}

func (o RuleActionResponseOutput) ToRuleActionResponseOutputWithContext(ctx context.Context) RuleActionResponseOutput {
	return o
}

type RuleActionResponseArrayOutput struct{ *pulumi.OutputState }

func (RuleActionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleActionResponse)(nil)).Elem()
}

func (o RuleActionResponseArrayOutput) ToRuleActionResponseArrayOutput() RuleActionResponseArrayOutput {
	return o
}

func (o RuleActionResponseArrayOutput) ToRuleActionResponseArrayOutputWithContext(ctx context.Context) RuleActionResponseArrayOutput {
	return o
}

func (o RuleActionResponseArrayOutput) Index(i pulumi.IntInput) RuleActionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleActionResponse {
		return vs[0].([]RuleActionResponse)[vs[1].(int)]
	}).(RuleActionResponseOutput)
}

// The condition that results in the alert rule being activated.
type RuleCondition struct {
	// the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
	DataSource *RuleDataSource `pulumi:"dataSource"`
}

// RuleConditionInput is an input type that accepts RuleConditionArgs and RuleConditionOutput values.
// You can construct a concrete instance of `RuleConditionInput` via:
//
//          RuleConditionArgs{...}
type RuleConditionInput interface {
	pulumi.Input

	ToRuleConditionOutput() RuleConditionOutput
	ToRuleConditionOutputWithContext(context.Context) RuleConditionOutput
}

// The condition that results in the alert rule being activated.
type RuleConditionArgs struct {
	// the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
	DataSource RuleDataSourcePtrInput `pulumi:"dataSource"`
}

func (RuleConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleCondition)(nil)).Elem()
}

func (i RuleConditionArgs) ToRuleConditionOutput() RuleConditionOutput {
	return i.ToRuleConditionOutputWithContext(context.Background())
}

func (i RuleConditionArgs) ToRuleConditionOutputWithContext(ctx context.Context) RuleConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleConditionOutput)
}

func (i RuleConditionArgs) ToRuleConditionPtrOutput() RuleConditionPtrOutput {
	return i.ToRuleConditionPtrOutputWithContext(context.Background())
}

func (i RuleConditionArgs) ToRuleConditionPtrOutputWithContext(ctx context.Context) RuleConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleConditionOutput).ToRuleConditionPtrOutputWithContext(ctx)
}

// RuleConditionPtrInput is an input type that accepts RuleConditionArgs, RuleConditionPtr and RuleConditionPtrOutput values.
// You can construct a concrete instance of `RuleConditionPtrInput` via:
//
//          RuleConditionArgs{...}
//
//  or:
//
//          nil
type RuleConditionPtrInput interface {
	pulumi.Input

	ToRuleConditionPtrOutput() RuleConditionPtrOutput
	ToRuleConditionPtrOutputWithContext(context.Context) RuleConditionPtrOutput
}

type ruleConditionPtrType RuleConditionArgs

func RuleConditionPtr(v *RuleConditionArgs) RuleConditionPtrInput {
	return (*ruleConditionPtrType)(v)
}

func (*ruleConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleCondition)(nil)).Elem()
}

func (i *ruleConditionPtrType) ToRuleConditionPtrOutput() RuleConditionPtrOutput {
	return i.ToRuleConditionPtrOutputWithContext(context.Background())
}

func (i *ruleConditionPtrType) ToRuleConditionPtrOutputWithContext(ctx context.Context) RuleConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleConditionPtrOutput)
}

// The condition that results in the alert rule being activated.
type RuleConditionOutput struct{ *pulumi.OutputState }

func (RuleConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleCondition)(nil)).Elem()
}

func (o RuleConditionOutput) ToRuleConditionOutput() RuleConditionOutput {
	return o
}

func (o RuleConditionOutput) ToRuleConditionOutputWithContext(ctx context.Context) RuleConditionOutput {
	return o
}

func (o RuleConditionOutput) ToRuleConditionPtrOutput() RuleConditionPtrOutput {
	return o.ToRuleConditionPtrOutputWithContext(context.Background())
}

func (o RuleConditionOutput) ToRuleConditionPtrOutputWithContext(ctx context.Context) RuleConditionPtrOutput {
	return o.ApplyT(func(v RuleCondition) *RuleCondition {
		return &v
	}).(RuleConditionPtrOutput)
}

// the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
func (o RuleConditionOutput) DataSource() RuleDataSourcePtrOutput {
	return o.ApplyT(func(v RuleCondition) *RuleDataSource { return v.DataSource }).(RuleDataSourcePtrOutput)
}

type RuleConditionPtrOutput struct{ *pulumi.OutputState }

func (RuleConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleCondition)(nil)).Elem()
}

func (o RuleConditionPtrOutput) ToRuleConditionPtrOutput() RuleConditionPtrOutput {
	return o
}

func (o RuleConditionPtrOutput) ToRuleConditionPtrOutputWithContext(ctx context.Context) RuleConditionPtrOutput {
	return o
}

func (o RuleConditionPtrOutput) Elem() RuleConditionOutput {
	return o.ApplyT(func(v *RuleCondition) RuleCondition { return *v }).(RuleConditionOutput)
}

// the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
func (o RuleConditionPtrOutput) DataSource() RuleDataSourcePtrOutput {
	return o.ApplyT(func(v *RuleCondition) *RuleDataSource {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(RuleDataSourcePtrOutput)
}

// The condition that results in the alert rule being activated.
type RuleConditionResponse struct {
	// the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
	DataSource *RuleDataSourceResponse `pulumi:"dataSource"`
}

// RuleConditionResponseInput is an input type that accepts RuleConditionResponseArgs and RuleConditionResponseOutput values.
// You can construct a concrete instance of `RuleConditionResponseInput` via:
//
//          RuleConditionResponseArgs{...}
type RuleConditionResponseInput interface {
	pulumi.Input

	ToRuleConditionResponseOutput() RuleConditionResponseOutput
	ToRuleConditionResponseOutputWithContext(context.Context) RuleConditionResponseOutput
}

// The condition that results in the alert rule being activated.
type RuleConditionResponseArgs struct {
	// the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
	DataSource RuleDataSourceResponsePtrInput `pulumi:"dataSource"`
}

func (RuleConditionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleConditionResponse)(nil)).Elem()
}

func (i RuleConditionResponseArgs) ToRuleConditionResponseOutput() RuleConditionResponseOutput {
	return i.ToRuleConditionResponseOutputWithContext(context.Background())
}

func (i RuleConditionResponseArgs) ToRuleConditionResponseOutputWithContext(ctx context.Context) RuleConditionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleConditionResponseOutput)
}

func (i RuleConditionResponseArgs) ToRuleConditionResponsePtrOutput() RuleConditionResponsePtrOutput {
	return i.ToRuleConditionResponsePtrOutputWithContext(context.Background())
}

func (i RuleConditionResponseArgs) ToRuleConditionResponsePtrOutputWithContext(ctx context.Context) RuleConditionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleConditionResponseOutput).ToRuleConditionResponsePtrOutputWithContext(ctx)
}

// RuleConditionResponsePtrInput is an input type that accepts RuleConditionResponseArgs, RuleConditionResponsePtr and RuleConditionResponsePtrOutput values.
// You can construct a concrete instance of `RuleConditionResponsePtrInput` via:
//
//          RuleConditionResponseArgs{...}
//
//  or:
//
//          nil
type RuleConditionResponsePtrInput interface {
	pulumi.Input

	ToRuleConditionResponsePtrOutput() RuleConditionResponsePtrOutput
	ToRuleConditionResponsePtrOutputWithContext(context.Context) RuleConditionResponsePtrOutput
}

type ruleConditionResponsePtrType RuleConditionResponseArgs

func RuleConditionResponsePtr(v *RuleConditionResponseArgs) RuleConditionResponsePtrInput {
	return (*ruleConditionResponsePtrType)(v)
}

func (*ruleConditionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleConditionResponse)(nil)).Elem()
}

func (i *ruleConditionResponsePtrType) ToRuleConditionResponsePtrOutput() RuleConditionResponsePtrOutput {
	return i.ToRuleConditionResponsePtrOutputWithContext(context.Background())
}

func (i *ruleConditionResponsePtrType) ToRuleConditionResponsePtrOutputWithContext(ctx context.Context) RuleConditionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleConditionResponsePtrOutput)
}

// The condition that results in the alert rule being activated.
type RuleConditionResponseOutput struct{ *pulumi.OutputState }

func (RuleConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleConditionResponse)(nil)).Elem()
}

func (o RuleConditionResponseOutput) ToRuleConditionResponseOutput() RuleConditionResponseOutput {
	return o
}

func (o RuleConditionResponseOutput) ToRuleConditionResponseOutputWithContext(ctx context.Context) RuleConditionResponseOutput {
	return o
}

func (o RuleConditionResponseOutput) ToRuleConditionResponsePtrOutput() RuleConditionResponsePtrOutput {
	return o.ToRuleConditionResponsePtrOutputWithContext(context.Background())
}

func (o RuleConditionResponseOutput) ToRuleConditionResponsePtrOutputWithContext(ctx context.Context) RuleConditionResponsePtrOutput {
	return o.ApplyT(func(v RuleConditionResponse) *RuleConditionResponse {
		return &v
	}).(RuleConditionResponsePtrOutput)
}

// the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
func (o RuleConditionResponseOutput) DataSource() RuleDataSourceResponsePtrOutput {
	return o.ApplyT(func(v RuleConditionResponse) *RuleDataSourceResponse { return v.DataSource }).(RuleDataSourceResponsePtrOutput)
}

type RuleConditionResponsePtrOutput struct{ *pulumi.OutputState }

func (RuleConditionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleConditionResponse)(nil)).Elem()
}

func (o RuleConditionResponsePtrOutput) ToRuleConditionResponsePtrOutput() RuleConditionResponsePtrOutput {
	return o
}

func (o RuleConditionResponsePtrOutput) ToRuleConditionResponsePtrOutputWithContext(ctx context.Context) RuleConditionResponsePtrOutput {
	return o
}

func (o RuleConditionResponsePtrOutput) Elem() RuleConditionResponseOutput {
	return o.ApplyT(func(v *RuleConditionResponse) RuleConditionResponse { return *v }).(RuleConditionResponseOutput)
}

// the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
func (o RuleConditionResponsePtrOutput) DataSource() RuleDataSourceResponsePtrOutput {
	return o.ApplyT(func(v *RuleConditionResponse) *RuleDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(RuleDataSourceResponsePtrOutput)
}

// The resource from which the rule collects its data.
type RuleDataSource struct {
	// the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
	ResourceUri *string `pulumi:"resourceUri"`
}

// RuleDataSourceInput is an input type that accepts RuleDataSourceArgs and RuleDataSourceOutput values.
// You can construct a concrete instance of `RuleDataSourceInput` via:
//
//          RuleDataSourceArgs{...}
type RuleDataSourceInput interface {
	pulumi.Input

	ToRuleDataSourceOutput() RuleDataSourceOutput
	ToRuleDataSourceOutputWithContext(context.Context) RuleDataSourceOutput
}

// The resource from which the rule collects its data.
type RuleDataSourceArgs struct {
	// the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
	ResourceUri pulumi.StringPtrInput `pulumi:"resourceUri"`
}

func (RuleDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleDataSource)(nil)).Elem()
}

func (i RuleDataSourceArgs) ToRuleDataSourceOutput() RuleDataSourceOutput {
	return i.ToRuleDataSourceOutputWithContext(context.Background())
}

func (i RuleDataSourceArgs) ToRuleDataSourceOutputWithContext(ctx context.Context) RuleDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleDataSourceOutput)
}

func (i RuleDataSourceArgs) ToRuleDataSourcePtrOutput() RuleDataSourcePtrOutput {
	return i.ToRuleDataSourcePtrOutputWithContext(context.Background())
}

func (i RuleDataSourceArgs) ToRuleDataSourcePtrOutputWithContext(ctx context.Context) RuleDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleDataSourceOutput).ToRuleDataSourcePtrOutputWithContext(ctx)
}

// RuleDataSourcePtrInput is an input type that accepts RuleDataSourceArgs, RuleDataSourcePtr and RuleDataSourcePtrOutput values.
// You can construct a concrete instance of `RuleDataSourcePtrInput` via:
//
//          RuleDataSourceArgs{...}
//
//  or:
//
//          nil
type RuleDataSourcePtrInput interface {
	pulumi.Input

	ToRuleDataSourcePtrOutput() RuleDataSourcePtrOutput
	ToRuleDataSourcePtrOutputWithContext(context.Context) RuleDataSourcePtrOutput
}

type ruleDataSourcePtrType RuleDataSourceArgs

func RuleDataSourcePtr(v *RuleDataSourceArgs) RuleDataSourcePtrInput {
	return (*ruleDataSourcePtrType)(v)
}

func (*ruleDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleDataSource)(nil)).Elem()
}

func (i *ruleDataSourcePtrType) ToRuleDataSourcePtrOutput() RuleDataSourcePtrOutput {
	return i.ToRuleDataSourcePtrOutputWithContext(context.Background())
}

func (i *ruleDataSourcePtrType) ToRuleDataSourcePtrOutputWithContext(ctx context.Context) RuleDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleDataSourcePtrOutput)
}

// The resource from which the rule collects its data.
type RuleDataSourceOutput struct{ *pulumi.OutputState }

func (RuleDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleDataSource)(nil)).Elem()
}

func (o RuleDataSourceOutput) ToRuleDataSourceOutput() RuleDataSourceOutput {
	return o
}

func (o RuleDataSourceOutput) ToRuleDataSourceOutputWithContext(ctx context.Context) RuleDataSourceOutput {
	return o
}

func (o RuleDataSourceOutput) ToRuleDataSourcePtrOutput() RuleDataSourcePtrOutput {
	return o.ToRuleDataSourcePtrOutputWithContext(context.Background())
}

func (o RuleDataSourceOutput) ToRuleDataSourcePtrOutputWithContext(ctx context.Context) RuleDataSourcePtrOutput {
	return o.ApplyT(func(v RuleDataSource) *RuleDataSource {
		return &v
	}).(RuleDataSourcePtrOutput)
}

// the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
func (o RuleDataSourceOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleDataSource) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

type RuleDataSourcePtrOutput struct{ *pulumi.OutputState }

func (RuleDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleDataSource)(nil)).Elem()
}

func (o RuleDataSourcePtrOutput) ToRuleDataSourcePtrOutput() RuleDataSourcePtrOutput {
	return o
}

func (o RuleDataSourcePtrOutput) ToRuleDataSourcePtrOutputWithContext(ctx context.Context) RuleDataSourcePtrOutput {
	return o
}

func (o RuleDataSourcePtrOutput) Elem() RuleDataSourceOutput {
	return o.ApplyT(func(v *RuleDataSource) RuleDataSource { return *v }).(RuleDataSourceOutput)
}

// the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
func (o RuleDataSourcePtrOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringPtrOutput)
}

// The resource from which the rule collects its data.
type RuleDataSourceResponse struct {
	// the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
	ResourceUri *string `pulumi:"resourceUri"`
}

// RuleDataSourceResponseInput is an input type that accepts RuleDataSourceResponseArgs and RuleDataSourceResponseOutput values.
// You can construct a concrete instance of `RuleDataSourceResponseInput` via:
//
//          RuleDataSourceResponseArgs{...}
type RuleDataSourceResponseInput interface {
	pulumi.Input

	ToRuleDataSourceResponseOutput() RuleDataSourceResponseOutput
	ToRuleDataSourceResponseOutputWithContext(context.Context) RuleDataSourceResponseOutput
}

// The resource from which the rule collects its data.
type RuleDataSourceResponseArgs struct {
	// the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
	ResourceUri pulumi.StringPtrInput `pulumi:"resourceUri"`
}

func (RuleDataSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleDataSourceResponse)(nil)).Elem()
}

func (i RuleDataSourceResponseArgs) ToRuleDataSourceResponseOutput() RuleDataSourceResponseOutput {
	return i.ToRuleDataSourceResponseOutputWithContext(context.Background())
}

func (i RuleDataSourceResponseArgs) ToRuleDataSourceResponseOutputWithContext(ctx context.Context) RuleDataSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleDataSourceResponseOutput)
}

func (i RuleDataSourceResponseArgs) ToRuleDataSourceResponsePtrOutput() RuleDataSourceResponsePtrOutput {
	return i.ToRuleDataSourceResponsePtrOutputWithContext(context.Background())
}

func (i RuleDataSourceResponseArgs) ToRuleDataSourceResponsePtrOutputWithContext(ctx context.Context) RuleDataSourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleDataSourceResponseOutput).ToRuleDataSourceResponsePtrOutputWithContext(ctx)
}

// RuleDataSourceResponsePtrInput is an input type that accepts RuleDataSourceResponseArgs, RuleDataSourceResponsePtr and RuleDataSourceResponsePtrOutput values.
// You can construct a concrete instance of `RuleDataSourceResponsePtrInput` via:
//
//          RuleDataSourceResponseArgs{...}
//
//  or:
//
//          nil
type RuleDataSourceResponsePtrInput interface {
	pulumi.Input

	ToRuleDataSourceResponsePtrOutput() RuleDataSourceResponsePtrOutput
	ToRuleDataSourceResponsePtrOutputWithContext(context.Context) RuleDataSourceResponsePtrOutput
}

type ruleDataSourceResponsePtrType RuleDataSourceResponseArgs

func RuleDataSourceResponsePtr(v *RuleDataSourceResponseArgs) RuleDataSourceResponsePtrInput {
	return (*ruleDataSourceResponsePtrType)(v)
}

func (*ruleDataSourceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleDataSourceResponse)(nil)).Elem()
}

func (i *ruleDataSourceResponsePtrType) ToRuleDataSourceResponsePtrOutput() RuleDataSourceResponsePtrOutput {
	return i.ToRuleDataSourceResponsePtrOutputWithContext(context.Background())
}

func (i *ruleDataSourceResponsePtrType) ToRuleDataSourceResponsePtrOutputWithContext(ctx context.Context) RuleDataSourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleDataSourceResponsePtrOutput)
}

// The resource from which the rule collects its data.
type RuleDataSourceResponseOutput struct{ *pulumi.OutputState }

func (RuleDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleDataSourceResponse)(nil)).Elem()
}

func (o RuleDataSourceResponseOutput) ToRuleDataSourceResponseOutput() RuleDataSourceResponseOutput {
	return o
}

func (o RuleDataSourceResponseOutput) ToRuleDataSourceResponseOutputWithContext(ctx context.Context) RuleDataSourceResponseOutput {
	return o
}

func (o RuleDataSourceResponseOutput) ToRuleDataSourceResponsePtrOutput() RuleDataSourceResponsePtrOutput {
	return o.ToRuleDataSourceResponsePtrOutputWithContext(context.Background())
}

func (o RuleDataSourceResponseOutput) ToRuleDataSourceResponsePtrOutputWithContext(ctx context.Context) RuleDataSourceResponsePtrOutput {
	return o.ApplyT(func(v RuleDataSourceResponse) *RuleDataSourceResponse {
		return &v
	}).(RuleDataSourceResponsePtrOutput)
}

// the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
func (o RuleDataSourceResponseOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleDataSourceResponse) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

type RuleDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (RuleDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleDataSourceResponse)(nil)).Elem()
}

func (o RuleDataSourceResponsePtrOutput) ToRuleDataSourceResponsePtrOutput() RuleDataSourceResponsePtrOutput {
	return o
}

func (o RuleDataSourceResponsePtrOutput) ToRuleDataSourceResponsePtrOutputWithContext(ctx context.Context) RuleDataSourceResponsePtrOutput {
	return o
}

func (o RuleDataSourceResponsePtrOutput) Elem() RuleDataSourceResponseOutput {
	return o.ApplyT(func(v *RuleDataSourceResponse) RuleDataSourceResponse { return *v }).(RuleDataSourceResponseOutput)
}

// the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
func (o RuleDataSourceResponsePtrOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AlertRuleTypeOutput{})
	pulumi.RegisterOutputType(AlertRuleDefinitionOutput{})
	pulumi.RegisterOutputType(AlertRuleDefinitionPtrOutput{})
	pulumi.RegisterOutputType(AlertRuleResponseOutput{})
	pulumi.RegisterOutputType(AlertRuleResponsePtrOutput{})
	pulumi.RegisterOutputType(LogProfileTypeOutput{})
	pulumi.RegisterOutputType(LogProfilePropertiesOutput{})
	pulumi.RegisterOutputType(LogProfilePropertiesPtrOutput{})
	pulumi.RegisterOutputType(LogProfilePropertiesResponseOutput{})
	pulumi.RegisterOutputType(LogProfilePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(RetentionPolicyOutput{})
	pulumi.RegisterOutputType(RetentionPolicyPtrOutput{})
	pulumi.RegisterOutputType(RetentionPolicyResponseOutput{})
	pulumi.RegisterOutputType(RetentionPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(RuleActionOutput{})
	pulumi.RegisterOutputType(RuleActionArrayOutput{})
	pulumi.RegisterOutputType(RuleActionResponseOutput{})
	pulumi.RegisterOutputType(RuleActionResponseArrayOutput{})
	pulumi.RegisterOutputType(RuleConditionOutput{})
	pulumi.RegisterOutputType(RuleConditionPtrOutput{})
	pulumi.RegisterOutputType(RuleConditionResponseOutput{})
	pulumi.RegisterOutputType(RuleConditionResponsePtrOutput{})
	pulumi.RegisterOutputType(RuleDataSourceOutput{})
	pulumi.RegisterOutputType(RuleDataSourcePtrOutput{})
	pulumi.RegisterOutputType(RuleDataSourceResponseOutput{})
	pulumi.RegisterOutputType(RuleDataSourceResponsePtrOutput{})
}
