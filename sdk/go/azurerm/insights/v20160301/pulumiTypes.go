// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20160301

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Specifies the retention policy for the log.
type RetentionPolicy struct {
	// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
	Days int `pulumi:"days"`
	// a value indicating whether the retention policy is enabled.
	Enabled bool `pulumi:"enabled"`
}

// RetentionPolicyInput is an input type that accepts RetentionPolicyArgs and RetentionPolicyOutput values.
// You can construct a concrete instance of `RetentionPolicyInput` via:
//
//          RetentionPolicyArgs{...}
type RetentionPolicyInput interface {
	pulumi.Input

	ToRetentionPolicyOutput() RetentionPolicyOutput
	ToRetentionPolicyOutputWithContext(context.Context) RetentionPolicyOutput
}

// Specifies the retention policy for the log.
type RetentionPolicyArgs struct {
	// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
	Days pulumi.IntInput `pulumi:"days"`
	// a value indicating whether the retention policy is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (RetentionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionPolicy)(nil)).Elem()
}

func (i RetentionPolicyArgs) ToRetentionPolicyOutput() RetentionPolicyOutput {
	return i.ToRetentionPolicyOutputWithContext(context.Background())
}

func (i RetentionPolicyArgs) ToRetentionPolicyOutputWithContext(ctx context.Context) RetentionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyOutput)
}

func (i RetentionPolicyArgs) ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput {
	return i.ToRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i RetentionPolicyArgs) ToRetentionPolicyPtrOutputWithContext(ctx context.Context) RetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyOutput).ToRetentionPolicyPtrOutputWithContext(ctx)
}

// RetentionPolicyPtrInput is an input type that accepts RetentionPolicyArgs, RetentionPolicyPtr and RetentionPolicyPtrOutput values.
// You can construct a concrete instance of `RetentionPolicyPtrInput` via:
//
//          RetentionPolicyArgs{...}
//
//  or:
//
//          nil
type RetentionPolicyPtrInput interface {
	pulumi.Input

	ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput
	ToRetentionPolicyPtrOutputWithContext(context.Context) RetentionPolicyPtrOutput
}

type retentionPolicyPtrType RetentionPolicyArgs

func RetentionPolicyPtr(v *RetentionPolicyArgs) RetentionPolicyPtrInput {
	return (*retentionPolicyPtrType)(v)
}

func (*retentionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionPolicy)(nil)).Elem()
}

func (i *retentionPolicyPtrType) ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput {
	return i.ToRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i *retentionPolicyPtrType) ToRetentionPolicyPtrOutputWithContext(ctx context.Context) RetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyPtrOutput)
}

// Specifies the retention policy for the log.
type RetentionPolicyOutput struct{ *pulumi.OutputState }

func (RetentionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionPolicy)(nil)).Elem()
}

func (o RetentionPolicyOutput) ToRetentionPolicyOutput() RetentionPolicyOutput {
	return o
}

func (o RetentionPolicyOutput) ToRetentionPolicyOutputWithContext(ctx context.Context) RetentionPolicyOutput {
	return o
}

func (o RetentionPolicyOutput) ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput {
	return o.ToRetentionPolicyPtrOutputWithContext(context.Background())
}

func (o RetentionPolicyOutput) ToRetentionPolicyPtrOutputWithContext(ctx context.Context) RetentionPolicyPtrOutput {
	return o.ApplyT(func(v RetentionPolicy) *RetentionPolicy {
		return &v
	}).(RetentionPolicyPtrOutput)
}

// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
func (o RetentionPolicyOutput) Days() pulumi.IntOutput {
	return o.ApplyT(func(v RetentionPolicy) int { return v.Days }).(pulumi.IntOutput)
}

// a value indicating whether the retention policy is enabled.
func (o RetentionPolicyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v RetentionPolicy) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type RetentionPolicyPtrOutput struct{ *pulumi.OutputState }

func (RetentionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionPolicy)(nil)).Elem()
}

func (o RetentionPolicyPtrOutput) ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput {
	return o
}

func (o RetentionPolicyPtrOutput) ToRetentionPolicyPtrOutputWithContext(ctx context.Context) RetentionPolicyPtrOutput {
	return o
}

func (o RetentionPolicyPtrOutput) Elem() RetentionPolicyOutput {
	return o.ApplyT(func(v *RetentionPolicy) RetentionPolicy { return *v }).(RetentionPolicyOutput)
}

// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
func (o RetentionPolicyPtrOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetentionPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.Days
	}).(pulumi.IntPtrOutput)
}

// a value indicating whether the retention policy is enabled.
func (o RetentionPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RetentionPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the retention policy for the log.
type RetentionPolicyResponse struct {
	// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
	Days int `pulumi:"days"`
	// a value indicating whether the retention policy is enabled.
	Enabled bool `pulumi:"enabled"`
}

// RetentionPolicyResponseInput is an input type that accepts RetentionPolicyResponseArgs and RetentionPolicyResponseOutput values.
// You can construct a concrete instance of `RetentionPolicyResponseInput` via:
//
//          RetentionPolicyResponseArgs{...}
type RetentionPolicyResponseInput interface {
	pulumi.Input

	ToRetentionPolicyResponseOutput() RetentionPolicyResponseOutput
	ToRetentionPolicyResponseOutputWithContext(context.Context) RetentionPolicyResponseOutput
}

// Specifies the retention policy for the log.
type RetentionPolicyResponseArgs struct {
	// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
	Days pulumi.IntInput `pulumi:"days"`
	// a value indicating whether the retention policy is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (RetentionPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionPolicyResponse)(nil)).Elem()
}

func (i RetentionPolicyResponseArgs) ToRetentionPolicyResponseOutput() RetentionPolicyResponseOutput {
	return i.ToRetentionPolicyResponseOutputWithContext(context.Background())
}

func (i RetentionPolicyResponseArgs) ToRetentionPolicyResponseOutputWithContext(ctx context.Context) RetentionPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyResponseOutput)
}

func (i RetentionPolicyResponseArgs) ToRetentionPolicyResponsePtrOutput() RetentionPolicyResponsePtrOutput {
	return i.ToRetentionPolicyResponsePtrOutputWithContext(context.Background())
}

func (i RetentionPolicyResponseArgs) ToRetentionPolicyResponsePtrOutputWithContext(ctx context.Context) RetentionPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyResponseOutput).ToRetentionPolicyResponsePtrOutputWithContext(ctx)
}

// RetentionPolicyResponsePtrInput is an input type that accepts RetentionPolicyResponseArgs, RetentionPolicyResponsePtr and RetentionPolicyResponsePtrOutput values.
// You can construct a concrete instance of `RetentionPolicyResponsePtrInput` via:
//
//          RetentionPolicyResponseArgs{...}
//
//  or:
//
//          nil
type RetentionPolicyResponsePtrInput interface {
	pulumi.Input

	ToRetentionPolicyResponsePtrOutput() RetentionPolicyResponsePtrOutput
	ToRetentionPolicyResponsePtrOutputWithContext(context.Context) RetentionPolicyResponsePtrOutput
}

type retentionPolicyResponsePtrType RetentionPolicyResponseArgs

func RetentionPolicyResponsePtr(v *RetentionPolicyResponseArgs) RetentionPolicyResponsePtrInput {
	return (*retentionPolicyResponsePtrType)(v)
}

func (*retentionPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionPolicyResponse)(nil)).Elem()
}

func (i *retentionPolicyResponsePtrType) ToRetentionPolicyResponsePtrOutput() RetentionPolicyResponsePtrOutput {
	return i.ToRetentionPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *retentionPolicyResponsePtrType) ToRetentionPolicyResponsePtrOutputWithContext(ctx context.Context) RetentionPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyResponsePtrOutput)
}

// Specifies the retention policy for the log.
type RetentionPolicyResponseOutput struct{ *pulumi.OutputState }

func (RetentionPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionPolicyResponse)(nil)).Elem()
}

func (o RetentionPolicyResponseOutput) ToRetentionPolicyResponseOutput() RetentionPolicyResponseOutput {
	return o
}

func (o RetentionPolicyResponseOutput) ToRetentionPolicyResponseOutputWithContext(ctx context.Context) RetentionPolicyResponseOutput {
	return o
}

func (o RetentionPolicyResponseOutput) ToRetentionPolicyResponsePtrOutput() RetentionPolicyResponsePtrOutput {
	return o.ToRetentionPolicyResponsePtrOutputWithContext(context.Background())
}

func (o RetentionPolicyResponseOutput) ToRetentionPolicyResponsePtrOutputWithContext(ctx context.Context) RetentionPolicyResponsePtrOutput {
	return o.ApplyT(func(v RetentionPolicyResponse) *RetentionPolicyResponse {
		return &v
	}).(RetentionPolicyResponsePtrOutput)
}

// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
func (o RetentionPolicyResponseOutput) Days() pulumi.IntOutput {
	return o.ApplyT(func(v RetentionPolicyResponse) int { return v.Days }).(pulumi.IntOutput)
}

// a value indicating whether the retention policy is enabled.
func (o RetentionPolicyResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v RetentionPolicyResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type RetentionPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (RetentionPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionPolicyResponse)(nil)).Elem()
}

func (o RetentionPolicyResponsePtrOutput) ToRetentionPolicyResponsePtrOutput() RetentionPolicyResponsePtrOutput {
	return o
}

func (o RetentionPolicyResponsePtrOutput) ToRetentionPolicyResponsePtrOutputWithContext(ctx context.Context) RetentionPolicyResponsePtrOutput {
	return o
}

func (o RetentionPolicyResponsePtrOutput) Elem() RetentionPolicyResponseOutput {
	return o.ApplyT(func(v *RetentionPolicyResponse) RetentionPolicyResponse { return *v }).(RetentionPolicyResponseOutput)
}

// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
func (o RetentionPolicyResponsePtrOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetentionPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Days
	}).(pulumi.IntPtrOutput)
}

// a value indicating whether the retention policy is enabled.
func (o RetentionPolicyResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RetentionPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The condition that results in the alert rule being activated.
type RuleCondition struct {
	// the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
	DataSource *RuleDataSource `pulumi:"dataSource"`
}

// RuleConditionInput is an input type that accepts RuleConditionArgs and RuleConditionOutput values.
// You can construct a concrete instance of `RuleConditionInput` via:
//
//          RuleConditionArgs{...}
type RuleConditionInput interface {
	pulumi.Input

	ToRuleConditionOutput() RuleConditionOutput
	ToRuleConditionOutputWithContext(context.Context) RuleConditionOutput
}

// The condition that results in the alert rule being activated.
type RuleConditionArgs struct {
	// the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
	DataSource RuleDataSourcePtrInput `pulumi:"dataSource"`
}

func (RuleConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleCondition)(nil)).Elem()
}

func (i RuleConditionArgs) ToRuleConditionOutput() RuleConditionOutput {
	return i.ToRuleConditionOutputWithContext(context.Background())
}

func (i RuleConditionArgs) ToRuleConditionOutputWithContext(ctx context.Context) RuleConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleConditionOutput)
}

func (i RuleConditionArgs) ToRuleConditionPtrOutput() RuleConditionPtrOutput {
	return i.ToRuleConditionPtrOutputWithContext(context.Background())
}

func (i RuleConditionArgs) ToRuleConditionPtrOutputWithContext(ctx context.Context) RuleConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleConditionOutput).ToRuleConditionPtrOutputWithContext(ctx)
}

// RuleConditionPtrInput is an input type that accepts RuleConditionArgs, RuleConditionPtr and RuleConditionPtrOutput values.
// You can construct a concrete instance of `RuleConditionPtrInput` via:
//
//          RuleConditionArgs{...}
//
//  or:
//
//          nil
type RuleConditionPtrInput interface {
	pulumi.Input

	ToRuleConditionPtrOutput() RuleConditionPtrOutput
	ToRuleConditionPtrOutputWithContext(context.Context) RuleConditionPtrOutput
}

type ruleConditionPtrType RuleConditionArgs

func RuleConditionPtr(v *RuleConditionArgs) RuleConditionPtrInput {
	return (*ruleConditionPtrType)(v)
}

func (*ruleConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleCondition)(nil)).Elem()
}

func (i *ruleConditionPtrType) ToRuleConditionPtrOutput() RuleConditionPtrOutput {
	return i.ToRuleConditionPtrOutputWithContext(context.Background())
}

func (i *ruleConditionPtrType) ToRuleConditionPtrOutputWithContext(ctx context.Context) RuleConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleConditionPtrOutput)
}

// The condition that results in the alert rule being activated.
type RuleConditionOutput struct{ *pulumi.OutputState }

func (RuleConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleCondition)(nil)).Elem()
}

func (o RuleConditionOutput) ToRuleConditionOutput() RuleConditionOutput {
	return o
}

func (o RuleConditionOutput) ToRuleConditionOutputWithContext(ctx context.Context) RuleConditionOutput {
	return o
}

func (o RuleConditionOutput) ToRuleConditionPtrOutput() RuleConditionPtrOutput {
	return o.ToRuleConditionPtrOutputWithContext(context.Background())
}

func (o RuleConditionOutput) ToRuleConditionPtrOutputWithContext(ctx context.Context) RuleConditionPtrOutput {
	return o.ApplyT(func(v RuleCondition) *RuleCondition {
		return &v
	}).(RuleConditionPtrOutput)
}

// the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
func (o RuleConditionOutput) DataSource() RuleDataSourcePtrOutput {
	return o.ApplyT(func(v RuleCondition) *RuleDataSource { return v.DataSource }).(RuleDataSourcePtrOutput)
}

type RuleConditionPtrOutput struct{ *pulumi.OutputState }

func (RuleConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleCondition)(nil)).Elem()
}

func (o RuleConditionPtrOutput) ToRuleConditionPtrOutput() RuleConditionPtrOutput {
	return o
}

func (o RuleConditionPtrOutput) ToRuleConditionPtrOutputWithContext(ctx context.Context) RuleConditionPtrOutput {
	return o
}

func (o RuleConditionPtrOutput) Elem() RuleConditionOutput {
	return o.ApplyT(func(v *RuleCondition) RuleCondition { return *v }).(RuleConditionOutput)
}

// the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
func (o RuleConditionPtrOutput) DataSource() RuleDataSourcePtrOutput {
	return o.ApplyT(func(v *RuleCondition) *RuleDataSource {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(RuleDataSourcePtrOutput)
}

// The condition that results in the alert rule being activated.
type RuleConditionResponse struct {
	// the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
	DataSource *RuleDataSourceResponse `pulumi:"dataSource"`
}

// RuleConditionResponseInput is an input type that accepts RuleConditionResponseArgs and RuleConditionResponseOutput values.
// You can construct a concrete instance of `RuleConditionResponseInput` via:
//
//          RuleConditionResponseArgs{...}
type RuleConditionResponseInput interface {
	pulumi.Input

	ToRuleConditionResponseOutput() RuleConditionResponseOutput
	ToRuleConditionResponseOutputWithContext(context.Context) RuleConditionResponseOutput
}

// The condition that results in the alert rule being activated.
type RuleConditionResponseArgs struct {
	// the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
	DataSource RuleDataSourceResponsePtrInput `pulumi:"dataSource"`
}

func (RuleConditionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleConditionResponse)(nil)).Elem()
}

func (i RuleConditionResponseArgs) ToRuleConditionResponseOutput() RuleConditionResponseOutput {
	return i.ToRuleConditionResponseOutputWithContext(context.Background())
}

func (i RuleConditionResponseArgs) ToRuleConditionResponseOutputWithContext(ctx context.Context) RuleConditionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleConditionResponseOutput)
}

func (i RuleConditionResponseArgs) ToRuleConditionResponsePtrOutput() RuleConditionResponsePtrOutput {
	return i.ToRuleConditionResponsePtrOutputWithContext(context.Background())
}

func (i RuleConditionResponseArgs) ToRuleConditionResponsePtrOutputWithContext(ctx context.Context) RuleConditionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleConditionResponseOutput).ToRuleConditionResponsePtrOutputWithContext(ctx)
}

// RuleConditionResponsePtrInput is an input type that accepts RuleConditionResponseArgs, RuleConditionResponsePtr and RuleConditionResponsePtrOutput values.
// You can construct a concrete instance of `RuleConditionResponsePtrInput` via:
//
//          RuleConditionResponseArgs{...}
//
//  or:
//
//          nil
type RuleConditionResponsePtrInput interface {
	pulumi.Input

	ToRuleConditionResponsePtrOutput() RuleConditionResponsePtrOutput
	ToRuleConditionResponsePtrOutputWithContext(context.Context) RuleConditionResponsePtrOutput
}

type ruleConditionResponsePtrType RuleConditionResponseArgs

func RuleConditionResponsePtr(v *RuleConditionResponseArgs) RuleConditionResponsePtrInput {
	return (*ruleConditionResponsePtrType)(v)
}

func (*ruleConditionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleConditionResponse)(nil)).Elem()
}

func (i *ruleConditionResponsePtrType) ToRuleConditionResponsePtrOutput() RuleConditionResponsePtrOutput {
	return i.ToRuleConditionResponsePtrOutputWithContext(context.Background())
}

func (i *ruleConditionResponsePtrType) ToRuleConditionResponsePtrOutputWithContext(ctx context.Context) RuleConditionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleConditionResponsePtrOutput)
}

// The condition that results in the alert rule being activated.
type RuleConditionResponseOutput struct{ *pulumi.OutputState }

func (RuleConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleConditionResponse)(nil)).Elem()
}

func (o RuleConditionResponseOutput) ToRuleConditionResponseOutput() RuleConditionResponseOutput {
	return o
}

func (o RuleConditionResponseOutput) ToRuleConditionResponseOutputWithContext(ctx context.Context) RuleConditionResponseOutput {
	return o
}

func (o RuleConditionResponseOutput) ToRuleConditionResponsePtrOutput() RuleConditionResponsePtrOutput {
	return o.ToRuleConditionResponsePtrOutputWithContext(context.Background())
}

func (o RuleConditionResponseOutput) ToRuleConditionResponsePtrOutputWithContext(ctx context.Context) RuleConditionResponsePtrOutput {
	return o.ApplyT(func(v RuleConditionResponse) *RuleConditionResponse {
		return &v
	}).(RuleConditionResponsePtrOutput)
}

// the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
func (o RuleConditionResponseOutput) DataSource() RuleDataSourceResponsePtrOutput {
	return o.ApplyT(func(v RuleConditionResponse) *RuleDataSourceResponse { return v.DataSource }).(RuleDataSourceResponsePtrOutput)
}

type RuleConditionResponsePtrOutput struct{ *pulumi.OutputState }

func (RuleConditionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleConditionResponse)(nil)).Elem()
}

func (o RuleConditionResponsePtrOutput) ToRuleConditionResponsePtrOutput() RuleConditionResponsePtrOutput {
	return o
}

func (o RuleConditionResponsePtrOutput) ToRuleConditionResponsePtrOutputWithContext(ctx context.Context) RuleConditionResponsePtrOutput {
	return o
}

func (o RuleConditionResponsePtrOutput) Elem() RuleConditionResponseOutput {
	return o.ApplyT(func(v *RuleConditionResponse) RuleConditionResponse { return *v }).(RuleConditionResponseOutput)
}

// the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
func (o RuleConditionResponsePtrOutput) DataSource() RuleDataSourceResponsePtrOutput {
	return o.ApplyT(func(v *RuleConditionResponse) *RuleDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(RuleDataSourceResponsePtrOutput)
}

// The resource from which the rule collects its data.
type RuleDataSource struct {
	// the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
	ResourceUri *string `pulumi:"resourceUri"`
}

// RuleDataSourceInput is an input type that accepts RuleDataSourceArgs and RuleDataSourceOutput values.
// You can construct a concrete instance of `RuleDataSourceInput` via:
//
//          RuleDataSourceArgs{...}
type RuleDataSourceInput interface {
	pulumi.Input

	ToRuleDataSourceOutput() RuleDataSourceOutput
	ToRuleDataSourceOutputWithContext(context.Context) RuleDataSourceOutput
}

// The resource from which the rule collects its data.
type RuleDataSourceArgs struct {
	// the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
	ResourceUri pulumi.StringPtrInput `pulumi:"resourceUri"`
}

func (RuleDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleDataSource)(nil)).Elem()
}

func (i RuleDataSourceArgs) ToRuleDataSourceOutput() RuleDataSourceOutput {
	return i.ToRuleDataSourceOutputWithContext(context.Background())
}

func (i RuleDataSourceArgs) ToRuleDataSourceOutputWithContext(ctx context.Context) RuleDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleDataSourceOutput)
}

func (i RuleDataSourceArgs) ToRuleDataSourcePtrOutput() RuleDataSourcePtrOutput {
	return i.ToRuleDataSourcePtrOutputWithContext(context.Background())
}

func (i RuleDataSourceArgs) ToRuleDataSourcePtrOutputWithContext(ctx context.Context) RuleDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleDataSourceOutput).ToRuleDataSourcePtrOutputWithContext(ctx)
}

// RuleDataSourcePtrInput is an input type that accepts RuleDataSourceArgs, RuleDataSourcePtr and RuleDataSourcePtrOutput values.
// You can construct a concrete instance of `RuleDataSourcePtrInput` via:
//
//          RuleDataSourceArgs{...}
//
//  or:
//
//          nil
type RuleDataSourcePtrInput interface {
	pulumi.Input

	ToRuleDataSourcePtrOutput() RuleDataSourcePtrOutput
	ToRuleDataSourcePtrOutputWithContext(context.Context) RuleDataSourcePtrOutput
}

type ruleDataSourcePtrType RuleDataSourceArgs

func RuleDataSourcePtr(v *RuleDataSourceArgs) RuleDataSourcePtrInput {
	return (*ruleDataSourcePtrType)(v)
}

func (*ruleDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleDataSource)(nil)).Elem()
}

func (i *ruleDataSourcePtrType) ToRuleDataSourcePtrOutput() RuleDataSourcePtrOutput {
	return i.ToRuleDataSourcePtrOutputWithContext(context.Background())
}

func (i *ruleDataSourcePtrType) ToRuleDataSourcePtrOutputWithContext(ctx context.Context) RuleDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleDataSourcePtrOutput)
}

// The resource from which the rule collects its data.
type RuleDataSourceOutput struct{ *pulumi.OutputState }

func (RuleDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleDataSource)(nil)).Elem()
}

func (o RuleDataSourceOutput) ToRuleDataSourceOutput() RuleDataSourceOutput {
	return o
}

func (o RuleDataSourceOutput) ToRuleDataSourceOutputWithContext(ctx context.Context) RuleDataSourceOutput {
	return o
}

func (o RuleDataSourceOutput) ToRuleDataSourcePtrOutput() RuleDataSourcePtrOutput {
	return o.ToRuleDataSourcePtrOutputWithContext(context.Background())
}

func (o RuleDataSourceOutput) ToRuleDataSourcePtrOutputWithContext(ctx context.Context) RuleDataSourcePtrOutput {
	return o.ApplyT(func(v RuleDataSource) *RuleDataSource {
		return &v
	}).(RuleDataSourcePtrOutput)
}

// the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
func (o RuleDataSourceOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleDataSource) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

type RuleDataSourcePtrOutput struct{ *pulumi.OutputState }

func (RuleDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleDataSource)(nil)).Elem()
}

func (o RuleDataSourcePtrOutput) ToRuleDataSourcePtrOutput() RuleDataSourcePtrOutput {
	return o
}

func (o RuleDataSourcePtrOutput) ToRuleDataSourcePtrOutputWithContext(ctx context.Context) RuleDataSourcePtrOutput {
	return o
}

func (o RuleDataSourcePtrOutput) Elem() RuleDataSourceOutput {
	return o.ApplyT(func(v *RuleDataSource) RuleDataSource { return *v }).(RuleDataSourceOutput)
}

// the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
func (o RuleDataSourcePtrOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringPtrOutput)
}

// The resource from which the rule collects its data.
type RuleDataSourceResponse struct {
	// the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
	ResourceUri *string `pulumi:"resourceUri"`
}

// RuleDataSourceResponseInput is an input type that accepts RuleDataSourceResponseArgs and RuleDataSourceResponseOutput values.
// You can construct a concrete instance of `RuleDataSourceResponseInput` via:
//
//          RuleDataSourceResponseArgs{...}
type RuleDataSourceResponseInput interface {
	pulumi.Input

	ToRuleDataSourceResponseOutput() RuleDataSourceResponseOutput
	ToRuleDataSourceResponseOutputWithContext(context.Context) RuleDataSourceResponseOutput
}

// The resource from which the rule collects its data.
type RuleDataSourceResponseArgs struct {
	// the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
	ResourceUri pulumi.StringPtrInput `pulumi:"resourceUri"`
}

func (RuleDataSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleDataSourceResponse)(nil)).Elem()
}

func (i RuleDataSourceResponseArgs) ToRuleDataSourceResponseOutput() RuleDataSourceResponseOutput {
	return i.ToRuleDataSourceResponseOutputWithContext(context.Background())
}

func (i RuleDataSourceResponseArgs) ToRuleDataSourceResponseOutputWithContext(ctx context.Context) RuleDataSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleDataSourceResponseOutput)
}

func (i RuleDataSourceResponseArgs) ToRuleDataSourceResponsePtrOutput() RuleDataSourceResponsePtrOutput {
	return i.ToRuleDataSourceResponsePtrOutputWithContext(context.Background())
}

func (i RuleDataSourceResponseArgs) ToRuleDataSourceResponsePtrOutputWithContext(ctx context.Context) RuleDataSourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleDataSourceResponseOutput).ToRuleDataSourceResponsePtrOutputWithContext(ctx)
}

// RuleDataSourceResponsePtrInput is an input type that accepts RuleDataSourceResponseArgs, RuleDataSourceResponsePtr and RuleDataSourceResponsePtrOutput values.
// You can construct a concrete instance of `RuleDataSourceResponsePtrInput` via:
//
//          RuleDataSourceResponseArgs{...}
//
//  or:
//
//          nil
type RuleDataSourceResponsePtrInput interface {
	pulumi.Input

	ToRuleDataSourceResponsePtrOutput() RuleDataSourceResponsePtrOutput
	ToRuleDataSourceResponsePtrOutputWithContext(context.Context) RuleDataSourceResponsePtrOutput
}

type ruleDataSourceResponsePtrType RuleDataSourceResponseArgs

func RuleDataSourceResponsePtr(v *RuleDataSourceResponseArgs) RuleDataSourceResponsePtrInput {
	return (*ruleDataSourceResponsePtrType)(v)
}

func (*ruleDataSourceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleDataSourceResponse)(nil)).Elem()
}

func (i *ruleDataSourceResponsePtrType) ToRuleDataSourceResponsePtrOutput() RuleDataSourceResponsePtrOutput {
	return i.ToRuleDataSourceResponsePtrOutputWithContext(context.Background())
}

func (i *ruleDataSourceResponsePtrType) ToRuleDataSourceResponsePtrOutputWithContext(ctx context.Context) RuleDataSourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleDataSourceResponsePtrOutput)
}

// The resource from which the rule collects its data.
type RuleDataSourceResponseOutput struct{ *pulumi.OutputState }

func (RuleDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleDataSourceResponse)(nil)).Elem()
}

func (o RuleDataSourceResponseOutput) ToRuleDataSourceResponseOutput() RuleDataSourceResponseOutput {
	return o
}

func (o RuleDataSourceResponseOutput) ToRuleDataSourceResponseOutputWithContext(ctx context.Context) RuleDataSourceResponseOutput {
	return o
}

func (o RuleDataSourceResponseOutput) ToRuleDataSourceResponsePtrOutput() RuleDataSourceResponsePtrOutput {
	return o.ToRuleDataSourceResponsePtrOutputWithContext(context.Background())
}

func (o RuleDataSourceResponseOutput) ToRuleDataSourceResponsePtrOutputWithContext(ctx context.Context) RuleDataSourceResponsePtrOutput {
	return o.ApplyT(func(v RuleDataSourceResponse) *RuleDataSourceResponse {
		return &v
	}).(RuleDataSourceResponsePtrOutput)
}

// the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
func (o RuleDataSourceResponseOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleDataSourceResponse) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

type RuleDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (RuleDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleDataSourceResponse)(nil)).Elem()
}

func (o RuleDataSourceResponsePtrOutput) ToRuleDataSourceResponsePtrOutput() RuleDataSourceResponsePtrOutput {
	return o
}

func (o RuleDataSourceResponsePtrOutput) ToRuleDataSourceResponsePtrOutputWithContext(ctx context.Context) RuleDataSourceResponsePtrOutput {
	return o
}

func (o RuleDataSourceResponsePtrOutput) Elem() RuleDataSourceResponseOutput {
	return o.ApplyT(func(v *RuleDataSourceResponse) RuleDataSourceResponse { return *v }).(RuleDataSourceResponseOutput)
}

// the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
func (o RuleDataSourceResponsePtrOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(RetentionPolicyOutput{})
	pulumi.RegisterOutputType(RetentionPolicyPtrOutput{})
	pulumi.RegisterOutputType(RetentionPolicyResponseOutput{})
	pulumi.RegisterOutputType(RetentionPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(RuleConditionOutput{})
	pulumi.RegisterOutputType(RuleConditionPtrOutput{})
	pulumi.RegisterOutputType(RuleConditionResponseOutput{})
	pulumi.RegisterOutputType(RuleConditionResponsePtrOutput{})
	pulumi.RegisterOutputType(RuleDataSourceOutput{})
	pulumi.RegisterOutputType(RuleDataSourcePtrOutput{})
	pulumi.RegisterOutputType(RuleDataSourceResponseOutput{})
	pulumi.RegisterOutputType(RuleDataSourceResponsePtrOutput{})
}
