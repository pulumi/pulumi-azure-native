// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Details of the Azure plan.
type AzurePlanResponse struct {
	// The sku description.
	SkuDescription string `pulumi:"skuDescription"`
	// The sku id.
	SkuId *string `pulumi:"skuId"`
}

// AzurePlanResponseInput is an input type that accepts AzurePlanResponseArgs and AzurePlanResponseOutput values.
// You can construct a concrete instance of `AzurePlanResponseInput` via:
//
//          AzurePlanResponseArgs{...}
type AzurePlanResponseInput interface {
	pulumi.Input

	ToAzurePlanResponseOutput() AzurePlanResponseOutput
	ToAzurePlanResponseOutputWithContext(context.Context) AzurePlanResponseOutput
}

// Details of the Azure plan.
type AzurePlanResponseArgs struct {
	// The sku description.
	SkuDescription pulumi.StringInput `pulumi:"skuDescription"`
	// The sku id.
	SkuId pulumi.StringPtrInput `pulumi:"skuId"`
}

func (AzurePlanResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePlanResponse)(nil)).Elem()
}

func (i AzurePlanResponseArgs) ToAzurePlanResponseOutput() AzurePlanResponseOutput {
	return i.ToAzurePlanResponseOutputWithContext(context.Background())
}

func (i AzurePlanResponseArgs) ToAzurePlanResponseOutputWithContext(ctx context.Context) AzurePlanResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzurePlanResponseOutput)
}

// AzurePlanResponseArrayInput is an input type that accepts AzurePlanResponseArray and AzurePlanResponseArrayOutput values.
// You can construct a concrete instance of `AzurePlanResponseArrayInput` via:
//
//          AzurePlanResponseArray{ AzurePlanResponseArgs{...} }
type AzurePlanResponseArrayInput interface {
	pulumi.Input

	ToAzurePlanResponseArrayOutput() AzurePlanResponseArrayOutput
	ToAzurePlanResponseArrayOutputWithContext(context.Context) AzurePlanResponseArrayOutput
}

type AzurePlanResponseArray []AzurePlanResponseInput

func (AzurePlanResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzurePlanResponse)(nil)).Elem()
}

func (i AzurePlanResponseArray) ToAzurePlanResponseArrayOutput() AzurePlanResponseArrayOutput {
	return i.ToAzurePlanResponseArrayOutputWithContext(context.Background())
}

func (i AzurePlanResponseArray) ToAzurePlanResponseArrayOutputWithContext(ctx context.Context) AzurePlanResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzurePlanResponseArrayOutput)
}

// Details of the Azure plan.
type AzurePlanResponseOutput struct{ *pulumi.OutputState }

func (AzurePlanResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePlanResponse)(nil)).Elem()
}

func (o AzurePlanResponseOutput) ToAzurePlanResponseOutput() AzurePlanResponseOutput {
	return o
}

func (o AzurePlanResponseOutput) ToAzurePlanResponseOutputWithContext(ctx context.Context) AzurePlanResponseOutput {
	return o
}

// The sku description.
func (o AzurePlanResponseOutput) SkuDescription() pulumi.StringOutput {
	return o.ApplyT(func(v AzurePlanResponse) string { return v.SkuDescription }).(pulumi.StringOutput)
}

// The sku id.
func (o AzurePlanResponseOutput) SkuId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePlanResponse) *string { return v.SkuId }).(pulumi.StringPtrOutput)
}

type AzurePlanResponseArrayOutput struct{ *pulumi.OutputState }

func (AzurePlanResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzurePlanResponse)(nil)).Elem()
}

func (o AzurePlanResponseArrayOutput) ToAzurePlanResponseArrayOutput() AzurePlanResponseArrayOutput {
	return o
}

func (o AzurePlanResponseArrayOutput) ToAzurePlanResponseArrayOutputWithContext(ctx context.Context) AzurePlanResponseArrayOutput {
	return o
}

func (o AzurePlanResponseArrayOutput) Index(i pulumi.IntInput) AzurePlanResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzurePlanResponse {
		return vs[0].([]AzurePlanResponse)[vs[1].(int)]
	}).(AzurePlanResponseOutput)
}

// Target resources and allocation
type CostAllocationProportion struct {
	// Target resource for cost allocation
	Name string `pulumi:"name"`
	// Percentage of source cost to allocate to this resource. This value can be specified to two decimal places and the total percentage of all resources in this rule must sum to 100.00.
	Percentage float64 `pulumi:"percentage"`
}

// CostAllocationProportionInput is an input type that accepts CostAllocationProportionArgs and CostAllocationProportionOutput values.
// You can construct a concrete instance of `CostAllocationProportionInput` via:
//
//          CostAllocationProportionArgs{...}
type CostAllocationProportionInput interface {
	pulumi.Input

	ToCostAllocationProportionOutput() CostAllocationProportionOutput
	ToCostAllocationProportionOutputWithContext(context.Context) CostAllocationProportionOutput
}

// Target resources and allocation
type CostAllocationProportionArgs struct {
	// Target resource for cost allocation
	Name pulumi.StringInput `pulumi:"name"`
	// Percentage of source cost to allocate to this resource. This value can be specified to two decimal places and the total percentage of all resources in this rule must sum to 100.00.
	Percentage pulumi.Float64Input `pulumi:"percentage"`
}

func (CostAllocationProportionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationProportion)(nil)).Elem()
}

func (i CostAllocationProportionArgs) ToCostAllocationProportionOutput() CostAllocationProportionOutput {
	return i.ToCostAllocationProportionOutputWithContext(context.Background())
}

func (i CostAllocationProportionArgs) ToCostAllocationProportionOutputWithContext(ctx context.Context) CostAllocationProportionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationProportionOutput)
}

// CostAllocationProportionArrayInput is an input type that accepts CostAllocationProportionArray and CostAllocationProportionArrayOutput values.
// You can construct a concrete instance of `CostAllocationProportionArrayInput` via:
//
//          CostAllocationProportionArray{ CostAllocationProportionArgs{...} }
type CostAllocationProportionArrayInput interface {
	pulumi.Input

	ToCostAllocationProportionArrayOutput() CostAllocationProportionArrayOutput
	ToCostAllocationProportionArrayOutputWithContext(context.Context) CostAllocationProportionArrayOutput
}

type CostAllocationProportionArray []CostAllocationProportionInput

func (CostAllocationProportionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CostAllocationProportion)(nil)).Elem()
}

func (i CostAllocationProportionArray) ToCostAllocationProportionArrayOutput() CostAllocationProportionArrayOutput {
	return i.ToCostAllocationProportionArrayOutputWithContext(context.Background())
}

func (i CostAllocationProportionArray) ToCostAllocationProportionArrayOutputWithContext(ctx context.Context) CostAllocationProportionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationProportionArrayOutput)
}

// Target resources and allocation
type CostAllocationProportionOutput struct{ *pulumi.OutputState }

func (CostAllocationProportionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationProportion)(nil)).Elem()
}

func (o CostAllocationProportionOutput) ToCostAllocationProportionOutput() CostAllocationProportionOutput {
	return o
}

func (o CostAllocationProportionOutput) ToCostAllocationProportionOutputWithContext(ctx context.Context) CostAllocationProportionOutput {
	return o
}

// Target resource for cost allocation
func (o CostAllocationProportionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CostAllocationProportion) string { return v.Name }).(pulumi.StringOutput)
}

// Percentage of source cost to allocate to this resource. This value can be specified to two decimal places and the total percentage of all resources in this rule must sum to 100.00.
func (o CostAllocationProportionOutput) Percentage() pulumi.Float64Output {
	return o.ApplyT(func(v CostAllocationProportion) float64 { return v.Percentage }).(pulumi.Float64Output)
}

type CostAllocationProportionArrayOutput struct{ *pulumi.OutputState }

func (CostAllocationProportionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CostAllocationProportion)(nil)).Elem()
}

func (o CostAllocationProportionArrayOutput) ToCostAllocationProportionArrayOutput() CostAllocationProportionArrayOutput {
	return o
}

func (o CostAllocationProportionArrayOutput) ToCostAllocationProportionArrayOutputWithContext(ctx context.Context) CostAllocationProportionArrayOutput {
	return o
}

func (o CostAllocationProportionArrayOutput) Index(i pulumi.IntInput) CostAllocationProportionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CostAllocationProportion {
		return vs[0].([]CostAllocationProportion)[vs[1].(int)]
	}).(CostAllocationProportionOutput)
}

// Target resources and allocation
type CostAllocationProportionResponse struct {
	// Target resource for cost allocation
	Name string `pulumi:"name"`
	// Percentage of source cost to allocate to this resource. This value can be specified to two decimal places and the total percentage of all resources in this rule must sum to 100.00.
	Percentage float64 `pulumi:"percentage"`
}

// CostAllocationProportionResponseInput is an input type that accepts CostAllocationProportionResponseArgs and CostAllocationProportionResponseOutput values.
// You can construct a concrete instance of `CostAllocationProportionResponseInput` via:
//
//          CostAllocationProportionResponseArgs{...}
type CostAllocationProportionResponseInput interface {
	pulumi.Input

	ToCostAllocationProportionResponseOutput() CostAllocationProportionResponseOutput
	ToCostAllocationProportionResponseOutputWithContext(context.Context) CostAllocationProportionResponseOutput
}

// Target resources and allocation
type CostAllocationProportionResponseArgs struct {
	// Target resource for cost allocation
	Name pulumi.StringInput `pulumi:"name"`
	// Percentage of source cost to allocate to this resource. This value can be specified to two decimal places and the total percentage of all resources in this rule must sum to 100.00.
	Percentage pulumi.Float64Input `pulumi:"percentage"`
}

func (CostAllocationProportionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationProportionResponse)(nil)).Elem()
}

func (i CostAllocationProportionResponseArgs) ToCostAllocationProportionResponseOutput() CostAllocationProportionResponseOutput {
	return i.ToCostAllocationProportionResponseOutputWithContext(context.Background())
}

func (i CostAllocationProportionResponseArgs) ToCostAllocationProportionResponseOutputWithContext(ctx context.Context) CostAllocationProportionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationProportionResponseOutput)
}

// CostAllocationProportionResponseArrayInput is an input type that accepts CostAllocationProportionResponseArray and CostAllocationProportionResponseArrayOutput values.
// You can construct a concrete instance of `CostAllocationProportionResponseArrayInput` via:
//
//          CostAllocationProportionResponseArray{ CostAllocationProportionResponseArgs{...} }
type CostAllocationProportionResponseArrayInput interface {
	pulumi.Input

	ToCostAllocationProportionResponseArrayOutput() CostAllocationProportionResponseArrayOutput
	ToCostAllocationProportionResponseArrayOutputWithContext(context.Context) CostAllocationProportionResponseArrayOutput
}

type CostAllocationProportionResponseArray []CostAllocationProportionResponseInput

func (CostAllocationProportionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CostAllocationProportionResponse)(nil)).Elem()
}

func (i CostAllocationProportionResponseArray) ToCostAllocationProportionResponseArrayOutput() CostAllocationProportionResponseArrayOutput {
	return i.ToCostAllocationProportionResponseArrayOutputWithContext(context.Background())
}

func (i CostAllocationProportionResponseArray) ToCostAllocationProportionResponseArrayOutputWithContext(ctx context.Context) CostAllocationProportionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationProportionResponseArrayOutput)
}

// Target resources and allocation
type CostAllocationProportionResponseOutput struct{ *pulumi.OutputState }

func (CostAllocationProportionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationProportionResponse)(nil)).Elem()
}

func (o CostAllocationProportionResponseOutput) ToCostAllocationProportionResponseOutput() CostAllocationProportionResponseOutput {
	return o
}

func (o CostAllocationProportionResponseOutput) ToCostAllocationProportionResponseOutputWithContext(ctx context.Context) CostAllocationProportionResponseOutput {
	return o
}

// Target resource for cost allocation
func (o CostAllocationProportionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CostAllocationProportionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Percentage of source cost to allocate to this resource. This value can be specified to two decimal places and the total percentage of all resources in this rule must sum to 100.00.
func (o CostAllocationProportionResponseOutput) Percentage() pulumi.Float64Output {
	return o.ApplyT(func(v CostAllocationProportionResponse) float64 { return v.Percentage }).(pulumi.Float64Output)
}

type CostAllocationProportionResponseArrayOutput struct{ *pulumi.OutputState }

func (CostAllocationProportionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CostAllocationProportionResponse)(nil)).Elem()
}

func (o CostAllocationProportionResponseArrayOutput) ToCostAllocationProportionResponseArrayOutput() CostAllocationProportionResponseArrayOutput {
	return o
}

func (o CostAllocationProportionResponseArrayOutput) ToCostAllocationProportionResponseArrayOutputWithContext(ctx context.Context) CostAllocationProportionResponseArrayOutput {
	return o
}

func (o CostAllocationProportionResponseArrayOutput) Index(i pulumi.IntInput) CostAllocationProportionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CostAllocationProportionResponse {
		return vs[0].([]CostAllocationProportionResponse)[vs[1].(int)]
	}).(CostAllocationProportionResponseOutput)
}

// Resource details of the cost allocation rule
type CostAllocationRuleDetails struct {
	// Source resources for cost allocation. At this time, this list can contain no more than one element.
	SourceResources []SourceCostAllocationResource `pulumi:"sourceResources"`
	// Target resources for cost allocation. At this time, this list can contain no more than one element.
	TargetResources []TargetCostAllocationResource `pulumi:"targetResources"`
}

// CostAllocationRuleDetailsInput is an input type that accepts CostAllocationRuleDetailsArgs and CostAllocationRuleDetailsOutput values.
// You can construct a concrete instance of `CostAllocationRuleDetailsInput` via:
//
//          CostAllocationRuleDetailsArgs{...}
type CostAllocationRuleDetailsInput interface {
	pulumi.Input

	ToCostAllocationRuleDetailsOutput() CostAllocationRuleDetailsOutput
	ToCostAllocationRuleDetailsOutputWithContext(context.Context) CostAllocationRuleDetailsOutput
}

// Resource details of the cost allocation rule
type CostAllocationRuleDetailsArgs struct {
	// Source resources for cost allocation. At this time, this list can contain no more than one element.
	SourceResources SourceCostAllocationResourceArrayInput `pulumi:"sourceResources"`
	// Target resources for cost allocation. At this time, this list can contain no more than one element.
	TargetResources TargetCostAllocationResourceArrayInput `pulumi:"targetResources"`
}

func (CostAllocationRuleDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationRuleDetails)(nil)).Elem()
}

func (i CostAllocationRuleDetailsArgs) ToCostAllocationRuleDetailsOutput() CostAllocationRuleDetailsOutput {
	return i.ToCostAllocationRuleDetailsOutputWithContext(context.Background())
}

func (i CostAllocationRuleDetailsArgs) ToCostAllocationRuleDetailsOutputWithContext(ctx context.Context) CostAllocationRuleDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationRuleDetailsOutput)
}

func (i CostAllocationRuleDetailsArgs) ToCostAllocationRuleDetailsPtrOutput() CostAllocationRuleDetailsPtrOutput {
	return i.ToCostAllocationRuleDetailsPtrOutputWithContext(context.Background())
}

func (i CostAllocationRuleDetailsArgs) ToCostAllocationRuleDetailsPtrOutputWithContext(ctx context.Context) CostAllocationRuleDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationRuleDetailsOutput).ToCostAllocationRuleDetailsPtrOutputWithContext(ctx)
}

// CostAllocationRuleDetailsPtrInput is an input type that accepts CostAllocationRuleDetailsArgs, CostAllocationRuleDetailsPtr and CostAllocationRuleDetailsPtrOutput values.
// You can construct a concrete instance of `CostAllocationRuleDetailsPtrInput` via:
//
//          CostAllocationRuleDetailsArgs{...}
//
//  or:
//
//          nil
type CostAllocationRuleDetailsPtrInput interface {
	pulumi.Input

	ToCostAllocationRuleDetailsPtrOutput() CostAllocationRuleDetailsPtrOutput
	ToCostAllocationRuleDetailsPtrOutputWithContext(context.Context) CostAllocationRuleDetailsPtrOutput
}

type costAllocationRuleDetailsPtrType CostAllocationRuleDetailsArgs

func CostAllocationRuleDetailsPtr(v *CostAllocationRuleDetailsArgs) CostAllocationRuleDetailsPtrInput {
	return (*costAllocationRuleDetailsPtrType)(v)
}

func (*costAllocationRuleDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CostAllocationRuleDetails)(nil)).Elem()
}

func (i *costAllocationRuleDetailsPtrType) ToCostAllocationRuleDetailsPtrOutput() CostAllocationRuleDetailsPtrOutput {
	return i.ToCostAllocationRuleDetailsPtrOutputWithContext(context.Background())
}

func (i *costAllocationRuleDetailsPtrType) ToCostAllocationRuleDetailsPtrOutputWithContext(ctx context.Context) CostAllocationRuleDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationRuleDetailsPtrOutput)
}

// Resource details of the cost allocation rule
type CostAllocationRuleDetailsOutput struct{ *pulumi.OutputState }

func (CostAllocationRuleDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationRuleDetails)(nil)).Elem()
}

func (o CostAllocationRuleDetailsOutput) ToCostAllocationRuleDetailsOutput() CostAllocationRuleDetailsOutput {
	return o
}

func (o CostAllocationRuleDetailsOutput) ToCostAllocationRuleDetailsOutputWithContext(ctx context.Context) CostAllocationRuleDetailsOutput {
	return o
}

func (o CostAllocationRuleDetailsOutput) ToCostAllocationRuleDetailsPtrOutput() CostAllocationRuleDetailsPtrOutput {
	return o.ToCostAllocationRuleDetailsPtrOutputWithContext(context.Background())
}

func (o CostAllocationRuleDetailsOutput) ToCostAllocationRuleDetailsPtrOutputWithContext(ctx context.Context) CostAllocationRuleDetailsPtrOutput {
	return o.ApplyT(func(v CostAllocationRuleDetails) *CostAllocationRuleDetails {
		return &v
	}).(CostAllocationRuleDetailsPtrOutput)
}

// Source resources for cost allocation. At this time, this list can contain no more than one element.
func (o CostAllocationRuleDetailsOutput) SourceResources() SourceCostAllocationResourceArrayOutput {
	return o.ApplyT(func(v CostAllocationRuleDetails) []SourceCostAllocationResource { return v.SourceResources }).(SourceCostAllocationResourceArrayOutput)
}

// Target resources for cost allocation. At this time, this list can contain no more than one element.
func (o CostAllocationRuleDetailsOutput) TargetResources() TargetCostAllocationResourceArrayOutput {
	return o.ApplyT(func(v CostAllocationRuleDetails) []TargetCostAllocationResource { return v.TargetResources }).(TargetCostAllocationResourceArrayOutput)
}

type CostAllocationRuleDetailsPtrOutput struct{ *pulumi.OutputState }

func (CostAllocationRuleDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostAllocationRuleDetails)(nil)).Elem()
}

func (o CostAllocationRuleDetailsPtrOutput) ToCostAllocationRuleDetailsPtrOutput() CostAllocationRuleDetailsPtrOutput {
	return o
}

func (o CostAllocationRuleDetailsPtrOutput) ToCostAllocationRuleDetailsPtrOutputWithContext(ctx context.Context) CostAllocationRuleDetailsPtrOutput {
	return o
}

func (o CostAllocationRuleDetailsPtrOutput) Elem() CostAllocationRuleDetailsOutput {
	return o.ApplyT(func(v *CostAllocationRuleDetails) CostAllocationRuleDetails { return *v }).(CostAllocationRuleDetailsOutput)
}

// Source resources for cost allocation. At this time, this list can contain no more than one element.
func (o CostAllocationRuleDetailsPtrOutput) SourceResources() SourceCostAllocationResourceArrayOutput {
	return o.ApplyT(func(v *CostAllocationRuleDetails) []SourceCostAllocationResource {
		if v == nil {
			return nil
		}
		return v.SourceResources
	}).(SourceCostAllocationResourceArrayOutput)
}

// Target resources for cost allocation. At this time, this list can contain no more than one element.
func (o CostAllocationRuleDetailsPtrOutput) TargetResources() TargetCostAllocationResourceArrayOutput {
	return o.ApplyT(func(v *CostAllocationRuleDetails) []TargetCostAllocationResource {
		if v == nil {
			return nil
		}
		return v.TargetResources
	}).(TargetCostAllocationResourceArrayOutput)
}

// Resource details of the cost allocation rule
type CostAllocationRuleDetailsResponse struct {
	// Source resources for cost allocation. At this time, this list can contain no more than one element.
	SourceResources []SourceCostAllocationResourceResponse `pulumi:"sourceResources"`
	// Target resources for cost allocation. At this time, this list can contain no more than one element.
	TargetResources []TargetCostAllocationResourceResponse `pulumi:"targetResources"`
}

// CostAllocationRuleDetailsResponseInput is an input type that accepts CostAllocationRuleDetailsResponseArgs and CostAllocationRuleDetailsResponseOutput values.
// You can construct a concrete instance of `CostAllocationRuleDetailsResponseInput` via:
//
//          CostAllocationRuleDetailsResponseArgs{...}
type CostAllocationRuleDetailsResponseInput interface {
	pulumi.Input

	ToCostAllocationRuleDetailsResponseOutput() CostAllocationRuleDetailsResponseOutput
	ToCostAllocationRuleDetailsResponseOutputWithContext(context.Context) CostAllocationRuleDetailsResponseOutput
}

// Resource details of the cost allocation rule
type CostAllocationRuleDetailsResponseArgs struct {
	// Source resources for cost allocation. At this time, this list can contain no more than one element.
	SourceResources SourceCostAllocationResourceResponseArrayInput `pulumi:"sourceResources"`
	// Target resources for cost allocation. At this time, this list can contain no more than one element.
	TargetResources TargetCostAllocationResourceResponseArrayInput `pulumi:"targetResources"`
}

func (CostAllocationRuleDetailsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationRuleDetailsResponse)(nil)).Elem()
}

func (i CostAllocationRuleDetailsResponseArgs) ToCostAllocationRuleDetailsResponseOutput() CostAllocationRuleDetailsResponseOutput {
	return i.ToCostAllocationRuleDetailsResponseOutputWithContext(context.Background())
}

func (i CostAllocationRuleDetailsResponseArgs) ToCostAllocationRuleDetailsResponseOutputWithContext(ctx context.Context) CostAllocationRuleDetailsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationRuleDetailsResponseOutput)
}

func (i CostAllocationRuleDetailsResponseArgs) ToCostAllocationRuleDetailsResponsePtrOutput() CostAllocationRuleDetailsResponsePtrOutput {
	return i.ToCostAllocationRuleDetailsResponsePtrOutputWithContext(context.Background())
}

func (i CostAllocationRuleDetailsResponseArgs) ToCostAllocationRuleDetailsResponsePtrOutputWithContext(ctx context.Context) CostAllocationRuleDetailsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationRuleDetailsResponseOutput).ToCostAllocationRuleDetailsResponsePtrOutputWithContext(ctx)
}

// CostAllocationRuleDetailsResponsePtrInput is an input type that accepts CostAllocationRuleDetailsResponseArgs, CostAllocationRuleDetailsResponsePtr and CostAllocationRuleDetailsResponsePtrOutput values.
// You can construct a concrete instance of `CostAllocationRuleDetailsResponsePtrInput` via:
//
//          CostAllocationRuleDetailsResponseArgs{...}
//
//  or:
//
//          nil
type CostAllocationRuleDetailsResponsePtrInput interface {
	pulumi.Input

	ToCostAllocationRuleDetailsResponsePtrOutput() CostAllocationRuleDetailsResponsePtrOutput
	ToCostAllocationRuleDetailsResponsePtrOutputWithContext(context.Context) CostAllocationRuleDetailsResponsePtrOutput
}

type costAllocationRuleDetailsResponsePtrType CostAllocationRuleDetailsResponseArgs

func CostAllocationRuleDetailsResponsePtr(v *CostAllocationRuleDetailsResponseArgs) CostAllocationRuleDetailsResponsePtrInput {
	return (*costAllocationRuleDetailsResponsePtrType)(v)
}

func (*costAllocationRuleDetailsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CostAllocationRuleDetailsResponse)(nil)).Elem()
}

func (i *costAllocationRuleDetailsResponsePtrType) ToCostAllocationRuleDetailsResponsePtrOutput() CostAllocationRuleDetailsResponsePtrOutput {
	return i.ToCostAllocationRuleDetailsResponsePtrOutputWithContext(context.Background())
}

func (i *costAllocationRuleDetailsResponsePtrType) ToCostAllocationRuleDetailsResponsePtrOutputWithContext(ctx context.Context) CostAllocationRuleDetailsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationRuleDetailsResponsePtrOutput)
}

// Resource details of the cost allocation rule
type CostAllocationRuleDetailsResponseOutput struct{ *pulumi.OutputState }

func (CostAllocationRuleDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationRuleDetailsResponse)(nil)).Elem()
}

func (o CostAllocationRuleDetailsResponseOutput) ToCostAllocationRuleDetailsResponseOutput() CostAllocationRuleDetailsResponseOutput {
	return o
}

func (o CostAllocationRuleDetailsResponseOutput) ToCostAllocationRuleDetailsResponseOutputWithContext(ctx context.Context) CostAllocationRuleDetailsResponseOutput {
	return o
}

func (o CostAllocationRuleDetailsResponseOutput) ToCostAllocationRuleDetailsResponsePtrOutput() CostAllocationRuleDetailsResponsePtrOutput {
	return o.ToCostAllocationRuleDetailsResponsePtrOutputWithContext(context.Background())
}

func (o CostAllocationRuleDetailsResponseOutput) ToCostAllocationRuleDetailsResponsePtrOutputWithContext(ctx context.Context) CostAllocationRuleDetailsResponsePtrOutput {
	return o.ApplyT(func(v CostAllocationRuleDetailsResponse) *CostAllocationRuleDetailsResponse {
		return &v
	}).(CostAllocationRuleDetailsResponsePtrOutput)
}

// Source resources for cost allocation. At this time, this list can contain no more than one element.
func (o CostAllocationRuleDetailsResponseOutput) SourceResources() SourceCostAllocationResourceResponseArrayOutput {
	return o.ApplyT(func(v CostAllocationRuleDetailsResponse) []SourceCostAllocationResourceResponse {
		return v.SourceResources
	}).(SourceCostAllocationResourceResponseArrayOutput)
}

// Target resources for cost allocation. At this time, this list can contain no more than one element.
func (o CostAllocationRuleDetailsResponseOutput) TargetResources() TargetCostAllocationResourceResponseArrayOutput {
	return o.ApplyT(func(v CostAllocationRuleDetailsResponse) []TargetCostAllocationResourceResponse {
		return v.TargetResources
	}).(TargetCostAllocationResourceResponseArrayOutput)
}

type CostAllocationRuleDetailsResponsePtrOutput struct{ *pulumi.OutputState }

func (CostAllocationRuleDetailsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostAllocationRuleDetailsResponse)(nil)).Elem()
}

func (o CostAllocationRuleDetailsResponsePtrOutput) ToCostAllocationRuleDetailsResponsePtrOutput() CostAllocationRuleDetailsResponsePtrOutput {
	return o
}

func (o CostAllocationRuleDetailsResponsePtrOutput) ToCostAllocationRuleDetailsResponsePtrOutputWithContext(ctx context.Context) CostAllocationRuleDetailsResponsePtrOutput {
	return o
}

func (o CostAllocationRuleDetailsResponsePtrOutput) Elem() CostAllocationRuleDetailsResponseOutput {
	return o.ApplyT(func(v *CostAllocationRuleDetailsResponse) CostAllocationRuleDetailsResponse { return *v }).(CostAllocationRuleDetailsResponseOutput)
}

// Source resources for cost allocation. At this time, this list can contain no more than one element.
func (o CostAllocationRuleDetailsResponsePtrOutput) SourceResources() SourceCostAllocationResourceResponseArrayOutput {
	return o.ApplyT(func(v *CostAllocationRuleDetailsResponse) []SourceCostAllocationResourceResponse {
		if v == nil {
			return nil
		}
		return v.SourceResources
	}).(SourceCostAllocationResourceResponseArrayOutput)
}

// Target resources for cost allocation. At this time, this list can contain no more than one element.
func (o CostAllocationRuleDetailsResponsePtrOutput) TargetResources() TargetCostAllocationResourceResponseArrayOutput {
	return o.ApplyT(func(v *CostAllocationRuleDetailsResponse) []TargetCostAllocationResourceResponse {
		if v == nil {
			return nil
		}
		return v.TargetResources
	}).(TargetCostAllocationResourceResponseArrayOutput)
}

// The properties of a cost allocation rule
type CostAllocationRuleProperties struct {
	// Description of a cost allocation rule.
	Description *string `pulumi:"description"`
	// Resource information for the cost allocation rule
	Details CostAllocationRuleDetails `pulumi:"details"`
	// Status of the rule
	Status string `pulumi:"status"`
}

// CostAllocationRulePropertiesInput is an input type that accepts CostAllocationRulePropertiesArgs and CostAllocationRulePropertiesOutput values.
// You can construct a concrete instance of `CostAllocationRulePropertiesInput` via:
//
//          CostAllocationRulePropertiesArgs{...}
type CostAllocationRulePropertiesInput interface {
	pulumi.Input

	ToCostAllocationRulePropertiesOutput() CostAllocationRulePropertiesOutput
	ToCostAllocationRulePropertiesOutputWithContext(context.Context) CostAllocationRulePropertiesOutput
}

// The properties of a cost allocation rule
type CostAllocationRulePropertiesArgs struct {
	// Description of a cost allocation rule.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Resource information for the cost allocation rule
	Details CostAllocationRuleDetailsInput `pulumi:"details"`
	// Status of the rule
	Status pulumi.StringInput `pulumi:"status"`
}

func (CostAllocationRulePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationRuleProperties)(nil)).Elem()
}

func (i CostAllocationRulePropertiesArgs) ToCostAllocationRulePropertiesOutput() CostAllocationRulePropertiesOutput {
	return i.ToCostAllocationRulePropertiesOutputWithContext(context.Background())
}

func (i CostAllocationRulePropertiesArgs) ToCostAllocationRulePropertiesOutputWithContext(ctx context.Context) CostAllocationRulePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationRulePropertiesOutput)
}

func (i CostAllocationRulePropertiesArgs) ToCostAllocationRulePropertiesPtrOutput() CostAllocationRulePropertiesPtrOutput {
	return i.ToCostAllocationRulePropertiesPtrOutputWithContext(context.Background())
}

func (i CostAllocationRulePropertiesArgs) ToCostAllocationRulePropertiesPtrOutputWithContext(ctx context.Context) CostAllocationRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationRulePropertiesOutput).ToCostAllocationRulePropertiesPtrOutputWithContext(ctx)
}

// CostAllocationRulePropertiesPtrInput is an input type that accepts CostAllocationRulePropertiesArgs, CostAllocationRulePropertiesPtr and CostAllocationRulePropertiesPtrOutput values.
// You can construct a concrete instance of `CostAllocationRulePropertiesPtrInput` via:
//
//          CostAllocationRulePropertiesArgs{...}
//
//  or:
//
//          nil
type CostAllocationRulePropertiesPtrInput interface {
	pulumi.Input

	ToCostAllocationRulePropertiesPtrOutput() CostAllocationRulePropertiesPtrOutput
	ToCostAllocationRulePropertiesPtrOutputWithContext(context.Context) CostAllocationRulePropertiesPtrOutput
}

type costAllocationRulePropertiesPtrType CostAllocationRulePropertiesArgs

func CostAllocationRulePropertiesPtr(v *CostAllocationRulePropertiesArgs) CostAllocationRulePropertiesPtrInput {
	return (*costAllocationRulePropertiesPtrType)(v)
}

func (*costAllocationRulePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CostAllocationRuleProperties)(nil)).Elem()
}

func (i *costAllocationRulePropertiesPtrType) ToCostAllocationRulePropertiesPtrOutput() CostAllocationRulePropertiesPtrOutput {
	return i.ToCostAllocationRulePropertiesPtrOutputWithContext(context.Background())
}

func (i *costAllocationRulePropertiesPtrType) ToCostAllocationRulePropertiesPtrOutputWithContext(ctx context.Context) CostAllocationRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationRulePropertiesPtrOutput)
}

// The properties of a cost allocation rule
type CostAllocationRulePropertiesOutput struct{ *pulumi.OutputState }

func (CostAllocationRulePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationRuleProperties)(nil)).Elem()
}

func (o CostAllocationRulePropertiesOutput) ToCostAllocationRulePropertiesOutput() CostAllocationRulePropertiesOutput {
	return o
}

func (o CostAllocationRulePropertiesOutput) ToCostAllocationRulePropertiesOutputWithContext(ctx context.Context) CostAllocationRulePropertiesOutput {
	return o
}

func (o CostAllocationRulePropertiesOutput) ToCostAllocationRulePropertiesPtrOutput() CostAllocationRulePropertiesPtrOutput {
	return o.ToCostAllocationRulePropertiesPtrOutputWithContext(context.Background())
}

func (o CostAllocationRulePropertiesOutput) ToCostAllocationRulePropertiesPtrOutputWithContext(ctx context.Context) CostAllocationRulePropertiesPtrOutput {
	return o.ApplyT(func(v CostAllocationRuleProperties) *CostAllocationRuleProperties {
		return &v
	}).(CostAllocationRulePropertiesPtrOutput)
}

// Description of a cost allocation rule.
func (o CostAllocationRulePropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CostAllocationRuleProperties) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Resource information for the cost allocation rule
func (o CostAllocationRulePropertiesOutput) Details() CostAllocationRuleDetailsOutput {
	return o.ApplyT(func(v CostAllocationRuleProperties) CostAllocationRuleDetails { return v.Details }).(CostAllocationRuleDetailsOutput)
}

// Status of the rule
func (o CostAllocationRulePropertiesOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v CostAllocationRuleProperties) string { return v.Status }).(pulumi.StringOutput)
}

type CostAllocationRulePropertiesPtrOutput struct{ *pulumi.OutputState }

func (CostAllocationRulePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostAllocationRuleProperties)(nil)).Elem()
}

func (o CostAllocationRulePropertiesPtrOutput) ToCostAllocationRulePropertiesPtrOutput() CostAllocationRulePropertiesPtrOutput {
	return o
}

func (o CostAllocationRulePropertiesPtrOutput) ToCostAllocationRulePropertiesPtrOutputWithContext(ctx context.Context) CostAllocationRulePropertiesPtrOutput {
	return o
}

func (o CostAllocationRulePropertiesPtrOutput) Elem() CostAllocationRulePropertiesOutput {
	return o.ApplyT(func(v *CostAllocationRuleProperties) CostAllocationRuleProperties { return *v }).(CostAllocationRulePropertiesOutput)
}

// Description of a cost allocation rule.
func (o CostAllocationRulePropertiesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostAllocationRuleProperties) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Resource information for the cost allocation rule
func (o CostAllocationRulePropertiesPtrOutput) Details() CostAllocationRuleDetailsPtrOutput {
	return o.ApplyT(func(v *CostAllocationRuleProperties) *CostAllocationRuleDetails {
		if v == nil {
			return nil
		}
		return &v.Details
	}).(CostAllocationRuleDetailsPtrOutput)
}

// Status of the rule
func (o CostAllocationRulePropertiesPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostAllocationRuleProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// The properties of a cost allocation rule
type CostAllocationRulePropertiesResponse struct {
	// Time at which the rule was created. Rules that change cost for the same resource are applied in order of creation.
	CreatedDate string `pulumi:"createdDate"`
	// Description of a cost allocation rule.
	Description *string `pulumi:"description"`
	// Resource information for the cost allocation rule
	Details CostAllocationRuleDetailsResponse `pulumi:"details"`
	// Status of the rule
	Status string `pulumi:"status"`
	// Time at which the rule was last updated.
	UpdatedDate string `pulumi:"updatedDate"`
}

// CostAllocationRulePropertiesResponseInput is an input type that accepts CostAllocationRulePropertiesResponseArgs and CostAllocationRulePropertiesResponseOutput values.
// You can construct a concrete instance of `CostAllocationRulePropertiesResponseInput` via:
//
//          CostAllocationRulePropertiesResponseArgs{...}
type CostAllocationRulePropertiesResponseInput interface {
	pulumi.Input

	ToCostAllocationRulePropertiesResponseOutput() CostAllocationRulePropertiesResponseOutput
	ToCostAllocationRulePropertiesResponseOutputWithContext(context.Context) CostAllocationRulePropertiesResponseOutput
}

// The properties of a cost allocation rule
type CostAllocationRulePropertiesResponseArgs struct {
	// Time at which the rule was created. Rules that change cost for the same resource are applied in order of creation.
	CreatedDate pulumi.StringInput `pulumi:"createdDate"`
	// Description of a cost allocation rule.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Resource information for the cost allocation rule
	Details CostAllocationRuleDetailsResponseInput `pulumi:"details"`
	// Status of the rule
	Status pulumi.StringInput `pulumi:"status"`
	// Time at which the rule was last updated.
	UpdatedDate pulumi.StringInput `pulumi:"updatedDate"`
}

func (CostAllocationRulePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationRulePropertiesResponse)(nil)).Elem()
}

func (i CostAllocationRulePropertiesResponseArgs) ToCostAllocationRulePropertiesResponseOutput() CostAllocationRulePropertiesResponseOutput {
	return i.ToCostAllocationRulePropertiesResponseOutputWithContext(context.Background())
}

func (i CostAllocationRulePropertiesResponseArgs) ToCostAllocationRulePropertiesResponseOutputWithContext(ctx context.Context) CostAllocationRulePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationRulePropertiesResponseOutput)
}

func (i CostAllocationRulePropertiesResponseArgs) ToCostAllocationRulePropertiesResponsePtrOutput() CostAllocationRulePropertiesResponsePtrOutput {
	return i.ToCostAllocationRulePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i CostAllocationRulePropertiesResponseArgs) ToCostAllocationRulePropertiesResponsePtrOutputWithContext(ctx context.Context) CostAllocationRulePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationRulePropertiesResponseOutput).ToCostAllocationRulePropertiesResponsePtrOutputWithContext(ctx)
}

// CostAllocationRulePropertiesResponsePtrInput is an input type that accepts CostAllocationRulePropertiesResponseArgs, CostAllocationRulePropertiesResponsePtr and CostAllocationRulePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `CostAllocationRulePropertiesResponsePtrInput` via:
//
//          CostAllocationRulePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type CostAllocationRulePropertiesResponsePtrInput interface {
	pulumi.Input

	ToCostAllocationRulePropertiesResponsePtrOutput() CostAllocationRulePropertiesResponsePtrOutput
	ToCostAllocationRulePropertiesResponsePtrOutputWithContext(context.Context) CostAllocationRulePropertiesResponsePtrOutput
}

type costAllocationRulePropertiesResponsePtrType CostAllocationRulePropertiesResponseArgs

func CostAllocationRulePropertiesResponsePtr(v *CostAllocationRulePropertiesResponseArgs) CostAllocationRulePropertiesResponsePtrInput {
	return (*costAllocationRulePropertiesResponsePtrType)(v)
}

func (*costAllocationRulePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CostAllocationRulePropertiesResponse)(nil)).Elem()
}

func (i *costAllocationRulePropertiesResponsePtrType) ToCostAllocationRulePropertiesResponsePtrOutput() CostAllocationRulePropertiesResponsePtrOutput {
	return i.ToCostAllocationRulePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *costAllocationRulePropertiesResponsePtrType) ToCostAllocationRulePropertiesResponsePtrOutputWithContext(ctx context.Context) CostAllocationRulePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostAllocationRulePropertiesResponsePtrOutput)
}

// The properties of a cost allocation rule
type CostAllocationRulePropertiesResponseOutput struct{ *pulumi.OutputState }

func (CostAllocationRulePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostAllocationRulePropertiesResponse)(nil)).Elem()
}

func (o CostAllocationRulePropertiesResponseOutput) ToCostAllocationRulePropertiesResponseOutput() CostAllocationRulePropertiesResponseOutput {
	return o
}

func (o CostAllocationRulePropertiesResponseOutput) ToCostAllocationRulePropertiesResponseOutputWithContext(ctx context.Context) CostAllocationRulePropertiesResponseOutput {
	return o
}

func (o CostAllocationRulePropertiesResponseOutput) ToCostAllocationRulePropertiesResponsePtrOutput() CostAllocationRulePropertiesResponsePtrOutput {
	return o.ToCostAllocationRulePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o CostAllocationRulePropertiesResponseOutput) ToCostAllocationRulePropertiesResponsePtrOutputWithContext(ctx context.Context) CostAllocationRulePropertiesResponsePtrOutput {
	return o.ApplyT(func(v CostAllocationRulePropertiesResponse) *CostAllocationRulePropertiesResponse {
		return &v
	}).(CostAllocationRulePropertiesResponsePtrOutput)
}

// Time at which the rule was created. Rules that change cost for the same resource are applied in order of creation.
func (o CostAllocationRulePropertiesResponseOutput) CreatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v CostAllocationRulePropertiesResponse) string { return v.CreatedDate }).(pulumi.StringOutput)
}

// Description of a cost allocation rule.
func (o CostAllocationRulePropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CostAllocationRulePropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Resource information for the cost allocation rule
func (o CostAllocationRulePropertiesResponseOutput) Details() CostAllocationRuleDetailsResponseOutput {
	return o.ApplyT(func(v CostAllocationRulePropertiesResponse) CostAllocationRuleDetailsResponse { return v.Details }).(CostAllocationRuleDetailsResponseOutput)
}

// Status of the rule
func (o CostAllocationRulePropertiesResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v CostAllocationRulePropertiesResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Time at which the rule was last updated.
func (o CostAllocationRulePropertiesResponseOutput) UpdatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v CostAllocationRulePropertiesResponse) string { return v.UpdatedDate }).(pulumi.StringOutput)
}

type CostAllocationRulePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (CostAllocationRulePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostAllocationRulePropertiesResponse)(nil)).Elem()
}

func (o CostAllocationRulePropertiesResponsePtrOutput) ToCostAllocationRulePropertiesResponsePtrOutput() CostAllocationRulePropertiesResponsePtrOutput {
	return o
}

func (o CostAllocationRulePropertiesResponsePtrOutput) ToCostAllocationRulePropertiesResponsePtrOutputWithContext(ctx context.Context) CostAllocationRulePropertiesResponsePtrOutput {
	return o
}

func (o CostAllocationRulePropertiesResponsePtrOutput) Elem() CostAllocationRulePropertiesResponseOutput {
	return o.ApplyT(func(v *CostAllocationRulePropertiesResponse) CostAllocationRulePropertiesResponse { return *v }).(CostAllocationRulePropertiesResponseOutput)
}

// Time at which the rule was created. Rules that change cost for the same resource are applied in order of creation.
func (o CostAllocationRulePropertiesResponsePtrOutput) CreatedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostAllocationRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedDate
	}).(pulumi.StringPtrOutput)
}

// Description of a cost allocation rule.
func (o CostAllocationRulePropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostAllocationRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Resource information for the cost allocation rule
func (o CostAllocationRulePropertiesResponsePtrOutput) Details() CostAllocationRuleDetailsResponsePtrOutput {
	return o.ApplyT(func(v *CostAllocationRulePropertiesResponse) *CostAllocationRuleDetailsResponse {
		if v == nil {
			return nil
		}
		return &v.Details
	}).(CostAllocationRuleDetailsResponsePtrOutput)
}

// Status of the rule
func (o CostAllocationRulePropertiesResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostAllocationRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Time at which the rule was last updated.
func (o CostAllocationRulePropertiesResponsePtrOutput) UpdatedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CostAllocationRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpdatedDate
	}).(pulumi.StringPtrOutput)
}

// Invoice section properties with create subscription permission.
type InvoiceSectionWithCreateSubPermissionResponse struct {
	// The name of the billing profile for the invoice section.
	BillingProfileDisplayName string `pulumi:"billingProfileDisplayName"`
	// The ID of the billing profile for the invoice section.
	BillingProfileId string `pulumi:"billingProfileId"`
	// The billing profile spending limit.
	BillingProfileSpendingLimit string `pulumi:"billingProfileSpendingLimit"`
	// The status of the billing profile.
	BillingProfileStatus string `pulumi:"billingProfileStatus"`
	// Reason for the specified billing profile status.
	BillingProfileStatusReasonCode string `pulumi:"billingProfileStatusReasonCode"`
	// The system generated unique identifier for a billing profile.
	BillingProfileSystemId string `pulumi:"billingProfileSystemId"`
	// Enabled azure plans for the associated billing profile.
	EnabledAzurePlans []AzurePlanResponse `pulumi:"enabledAzurePlans"`
	// The name of the invoice section.
	InvoiceSectionDisplayName string `pulumi:"invoiceSectionDisplayName"`
	// The ID of the invoice section.
	InvoiceSectionId string `pulumi:"invoiceSectionId"`
	// The system generated unique identifier for an invoice section.
	InvoiceSectionSystemId string `pulumi:"invoiceSectionSystemId"`
}

// InvoiceSectionWithCreateSubPermissionResponseInput is an input type that accepts InvoiceSectionWithCreateSubPermissionResponseArgs and InvoiceSectionWithCreateSubPermissionResponseOutput values.
// You can construct a concrete instance of `InvoiceSectionWithCreateSubPermissionResponseInput` via:
//
//          InvoiceSectionWithCreateSubPermissionResponseArgs{...}
type InvoiceSectionWithCreateSubPermissionResponseInput interface {
	pulumi.Input

	ToInvoiceSectionWithCreateSubPermissionResponseOutput() InvoiceSectionWithCreateSubPermissionResponseOutput
	ToInvoiceSectionWithCreateSubPermissionResponseOutputWithContext(context.Context) InvoiceSectionWithCreateSubPermissionResponseOutput
}

// Invoice section properties with create subscription permission.
type InvoiceSectionWithCreateSubPermissionResponseArgs struct {
	// The name of the billing profile for the invoice section.
	BillingProfileDisplayName pulumi.StringInput `pulumi:"billingProfileDisplayName"`
	// The ID of the billing profile for the invoice section.
	BillingProfileId pulumi.StringInput `pulumi:"billingProfileId"`
	// The billing profile spending limit.
	BillingProfileSpendingLimit pulumi.StringInput `pulumi:"billingProfileSpendingLimit"`
	// The status of the billing profile.
	BillingProfileStatus pulumi.StringInput `pulumi:"billingProfileStatus"`
	// Reason for the specified billing profile status.
	BillingProfileStatusReasonCode pulumi.StringInput `pulumi:"billingProfileStatusReasonCode"`
	// The system generated unique identifier for a billing profile.
	BillingProfileSystemId pulumi.StringInput `pulumi:"billingProfileSystemId"`
	// Enabled azure plans for the associated billing profile.
	EnabledAzurePlans AzurePlanResponseArrayInput `pulumi:"enabledAzurePlans"`
	// The name of the invoice section.
	InvoiceSectionDisplayName pulumi.StringInput `pulumi:"invoiceSectionDisplayName"`
	// The ID of the invoice section.
	InvoiceSectionId pulumi.StringInput `pulumi:"invoiceSectionId"`
	// The system generated unique identifier for an invoice section.
	InvoiceSectionSystemId pulumi.StringInput `pulumi:"invoiceSectionSystemId"`
}

func (InvoiceSectionWithCreateSubPermissionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InvoiceSectionWithCreateSubPermissionResponse)(nil)).Elem()
}

func (i InvoiceSectionWithCreateSubPermissionResponseArgs) ToInvoiceSectionWithCreateSubPermissionResponseOutput() InvoiceSectionWithCreateSubPermissionResponseOutput {
	return i.ToInvoiceSectionWithCreateSubPermissionResponseOutputWithContext(context.Background())
}

func (i InvoiceSectionWithCreateSubPermissionResponseArgs) ToInvoiceSectionWithCreateSubPermissionResponseOutputWithContext(ctx context.Context) InvoiceSectionWithCreateSubPermissionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvoiceSectionWithCreateSubPermissionResponseOutput)
}

// InvoiceSectionWithCreateSubPermissionResponseArrayInput is an input type that accepts InvoiceSectionWithCreateSubPermissionResponseArray and InvoiceSectionWithCreateSubPermissionResponseArrayOutput values.
// You can construct a concrete instance of `InvoiceSectionWithCreateSubPermissionResponseArrayInput` via:
//
//          InvoiceSectionWithCreateSubPermissionResponseArray{ InvoiceSectionWithCreateSubPermissionResponseArgs{...} }
type InvoiceSectionWithCreateSubPermissionResponseArrayInput interface {
	pulumi.Input

	ToInvoiceSectionWithCreateSubPermissionResponseArrayOutput() InvoiceSectionWithCreateSubPermissionResponseArrayOutput
	ToInvoiceSectionWithCreateSubPermissionResponseArrayOutputWithContext(context.Context) InvoiceSectionWithCreateSubPermissionResponseArrayOutput
}

type InvoiceSectionWithCreateSubPermissionResponseArray []InvoiceSectionWithCreateSubPermissionResponseInput

func (InvoiceSectionWithCreateSubPermissionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvoiceSectionWithCreateSubPermissionResponse)(nil)).Elem()
}

func (i InvoiceSectionWithCreateSubPermissionResponseArray) ToInvoiceSectionWithCreateSubPermissionResponseArrayOutput() InvoiceSectionWithCreateSubPermissionResponseArrayOutput {
	return i.ToInvoiceSectionWithCreateSubPermissionResponseArrayOutputWithContext(context.Background())
}

func (i InvoiceSectionWithCreateSubPermissionResponseArray) ToInvoiceSectionWithCreateSubPermissionResponseArrayOutputWithContext(ctx context.Context) InvoiceSectionWithCreateSubPermissionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvoiceSectionWithCreateSubPermissionResponseArrayOutput)
}

// Invoice section properties with create subscription permission.
type InvoiceSectionWithCreateSubPermissionResponseOutput struct{ *pulumi.OutputState }

func (InvoiceSectionWithCreateSubPermissionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InvoiceSectionWithCreateSubPermissionResponse)(nil)).Elem()
}

func (o InvoiceSectionWithCreateSubPermissionResponseOutput) ToInvoiceSectionWithCreateSubPermissionResponseOutput() InvoiceSectionWithCreateSubPermissionResponseOutput {
	return o
}

func (o InvoiceSectionWithCreateSubPermissionResponseOutput) ToInvoiceSectionWithCreateSubPermissionResponseOutputWithContext(ctx context.Context) InvoiceSectionWithCreateSubPermissionResponseOutput {
	return o
}

// The name of the billing profile for the invoice section.
func (o InvoiceSectionWithCreateSubPermissionResponseOutput) BillingProfileDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v InvoiceSectionWithCreateSubPermissionResponse) string { return v.BillingProfileDisplayName }).(pulumi.StringOutput)
}

// The ID of the billing profile for the invoice section.
func (o InvoiceSectionWithCreateSubPermissionResponseOutput) BillingProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v InvoiceSectionWithCreateSubPermissionResponse) string { return v.BillingProfileId }).(pulumi.StringOutput)
}

// The billing profile spending limit.
func (o InvoiceSectionWithCreateSubPermissionResponseOutput) BillingProfileSpendingLimit() pulumi.StringOutput {
	return o.ApplyT(func(v InvoiceSectionWithCreateSubPermissionResponse) string { return v.BillingProfileSpendingLimit }).(pulumi.StringOutput)
}

// The status of the billing profile.
func (o InvoiceSectionWithCreateSubPermissionResponseOutput) BillingProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InvoiceSectionWithCreateSubPermissionResponse) string { return v.BillingProfileStatus }).(pulumi.StringOutput)
}

// Reason for the specified billing profile status.
func (o InvoiceSectionWithCreateSubPermissionResponseOutput) BillingProfileStatusReasonCode() pulumi.StringOutput {
	return o.ApplyT(func(v InvoiceSectionWithCreateSubPermissionResponse) string { return v.BillingProfileStatusReasonCode }).(pulumi.StringOutput)
}

// The system generated unique identifier for a billing profile.
func (o InvoiceSectionWithCreateSubPermissionResponseOutput) BillingProfileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v InvoiceSectionWithCreateSubPermissionResponse) string { return v.BillingProfileSystemId }).(pulumi.StringOutput)
}

// Enabled azure plans for the associated billing profile.
func (o InvoiceSectionWithCreateSubPermissionResponseOutput) EnabledAzurePlans() AzurePlanResponseArrayOutput {
	return o.ApplyT(func(v InvoiceSectionWithCreateSubPermissionResponse) []AzurePlanResponse { return v.EnabledAzurePlans }).(AzurePlanResponseArrayOutput)
}

// The name of the invoice section.
func (o InvoiceSectionWithCreateSubPermissionResponseOutput) InvoiceSectionDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v InvoiceSectionWithCreateSubPermissionResponse) string { return v.InvoiceSectionDisplayName }).(pulumi.StringOutput)
}

// The ID of the invoice section.
func (o InvoiceSectionWithCreateSubPermissionResponseOutput) InvoiceSectionId() pulumi.StringOutput {
	return o.ApplyT(func(v InvoiceSectionWithCreateSubPermissionResponse) string { return v.InvoiceSectionId }).(pulumi.StringOutput)
}

// The system generated unique identifier for an invoice section.
func (o InvoiceSectionWithCreateSubPermissionResponseOutput) InvoiceSectionSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v InvoiceSectionWithCreateSubPermissionResponse) string { return v.InvoiceSectionSystemId }).(pulumi.StringOutput)
}

type InvoiceSectionWithCreateSubPermissionResponseArrayOutput struct{ *pulumi.OutputState }

func (InvoiceSectionWithCreateSubPermissionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvoiceSectionWithCreateSubPermissionResponse)(nil)).Elem()
}

func (o InvoiceSectionWithCreateSubPermissionResponseArrayOutput) ToInvoiceSectionWithCreateSubPermissionResponseArrayOutput() InvoiceSectionWithCreateSubPermissionResponseArrayOutput {
	return o
}

func (o InvoiceSectionWithCreateSubPermissionResponseArrayOutput) ToInvoiceSectionWithCreateSubPermissionResponseArrayOutputWithContext(ctx context.Context) InvoiceSectionWithCreateSubPermissionResponseArrayOutput {
	return o
}

func (o InvoiceSectionWithCreateSubPermissionResponseArrayOutput) Index(i pulumi.IntInput) InvoiceSectionWithCreateSubPermissionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InvoiceSectionWithCreateSubPermissionResponse {
		return vs[0].([]InvoiceSectionWithCreateSubPermissionResponse)[vs[1].(int)]
	}).(InvoiceSectionWithCreateSubPermissionResponseOutput)
}

// The aggregation expression to be used in the report.
type ReportAggregation struct {
	// The name of the aggregation function to use.
	Function string `pulumi:"function"`
	// The name of the column to aggregate.
	Name string `pulumi:"name"`
}

// ReportAggregationInput is an input type that accepts ReportAggregationArgs and ReportAggregationOutput values.
// You can construct a concrete instance of `ReportAggregationInput` via:
//
//          ReportAggregationArgs{...}
type ReportAggregationInput interface {
	pulumi.Input

	ToReportAggregationOutput() ReportAggregationOutput
	ToReportAggregationOutputWithContext(context.Context) ReportAggregationOutput
}

// The aggregation expression to be used in the report.
type ReportAggregationArgs struct {
	// The name of the aggregation function to use.
	Function pulumi.StringInput `pulumi:"function"`
	// The name of the column to aggregate.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ReportAggregationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportAggregation)(nil)).Elem()
}

func (i ReportAggregationArgs) ToReportAggregationOutput() ReportAggregationOutput {
	return i.ToReportAggregationOutputWithContext(context.Background())
}

func (i ReportAggregationArgs) ToReportAggregationOutputWithContext(ctx context.Context) ReportAggregationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportAggregationOutput)
}

// ReportAggregationMapInput is an input type that accepts ReportAggregationMap and ReportAggregationMapOutput values.
// You can construct a concrete instance of `ReportAggregationMapInput` via:
//
//          ReportAggregationMap{ "key": ReportAggregationArgs{...} }
type ReportAggregationMapInput interface {
	pulumi.Input

	ToReportAggregationMapOutput() ReportAggregationMapOutput
	ToReportAggregationMapOutputWithContext(context.Context) ReportAggregationMapOutput
}

type ReportAggregationMap map[string]ReportAggregationInput

func (ReportAggregationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ReportAggregation)(nil)).Elem()
}

func (i ReportAggregationMap) ToReportAggregationMapOutput() ReportAggregationMapOutput {
	return i.ToReportAggregationMapOutputWithContext(context.Background())
}

func (i ReportAggregationMap) ToReportAggregationMapOutputWithContext(ctx context.Context) ReportAggregationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportAggregationMapOutput)
}

// The aggregation expression to be used in the report.
type ReportAggregationOutput struct{ *pulumi.OutputState }

func (ReportAggregationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportAggregation)(nil)).Elem()
}

func (o ReportAggregationOutput) ToReportAggregationOutput() ReportAggregationOutput {
	return o
}

func (o ReportAggregationOutput) ToReportAggregationOutputWithContext(ctx context.Context) ReportAggregationOutput {
	return o
}

// The name of the aggregation function to use.
func (o ReportAggregationOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v ReportAggregation) string { return v.Function }).(pulumi.StringOutput)
}

// The name of the column to aggregate.
func (o ReportAggregationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportAggregation) string { return v.Name }).(pulumi.StringOutput)
}

type ReportAggregationMapOutput struct{ *pulumi.OutputState }

func (ReportAggregationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ReportAggregation)(nil)).Elem()
}

func (o ReportAggregationMapOutput) ToReportAggregationMapOutput() ReportAggregationMapOutput {
	return o
}

func (o ReportAggregationMapOutput) ToReportAggregationMapOutputWithContext(ctx context.Context) ReportAggregationMapOutput {
	return o
}

func (o ReportAggregationMapOutput) MapIndex(k pulumi.StringInput) ReportAggregationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ReportAggregation {
		return vs[0].(map[string]ReportAggregation)[vs[1].(string)]
	}).(ReportAggregationOutput)
}

// The aggregation expression to be used in the report.
type ReportAggregationResponse struct {
	// The name of the aggregation function to use.
	Function string `pulumi:"function"`
	// The name of the column to aggregate.
	Name string `pulumi:"name"`
}

// ReportAggregationResponseInput is an input type that accepts ReportAggregationResponseArgs and ReportAggregationResponseOutput values.
// You can construct a concrete instance of `ReportAggregationResponseInput` via:
//
//          ReportAggregationResponseArgs{...}
type ReportAggregationResponseInput interface {
	pulumi.Input

	ToReportAggregationResponseOutput() ReportAggregationResponseOutput
	ToReportAggregationResponseOutputWithContext(context.Context) ReportAggregationResponseOutput
}

// The aggregation expression to be used in the report.
type ReportAggregationResponseArgs struct {
	// The name of the aggregation function to use.
	Function pulumi.StringInput `pulumi:"function"`
	// The name of the column to aggregate.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ReportAggregationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportAggregationResponse)(nil)).Elem()
}

func (i ReportAggregationResponseArgs) ToReportAggregationResponseOutput() ReportAggregationResponseOutput {
	return i.ToReportAggregationResponseOutputWithContext(context.Background())
}

func (i ReportAggregationResponseArgs) ToReportAggregationResponseOutputWithContext(ctx context.Context) ReportAggregationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportAggregationResponseOutput)
}

// ReportAggregationResponseMapInput is an input type that accepts ReportAggregationResponseMap and ReportAggregationResponseMapOutput values.
// You can construct a concrete instance of `ReportAggregationResponseMapInput` via:
//
//          ReportAggregationResponseMap{ "key": ReportAggregationResponseArgs{...} }
type ReportAggregationResponseMapInput interface {
	pulumi.Input

	ToReportAggregationResponseMapOutput() ReportAggregationResponseMapOutput
	ToReportAggregationResponseMapOutputWithContext(context.Context) ReportAggregationResponseMapOutput
}

type ReportAggregationResponseMap map[string]ReportAggregationResponseInput

func (ReportAggregationResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ReportAggregationResponse)(nil)).Elem()
}

func (i ReportAggregationResponseMap) ToReportAggregationResponseMapOutput() ReportAggregationResponseMapOutput {
	return i.ToReportAggregationResponseMapOutputWithContext(context.Background())
}

func (i ReportAggregationResponseMap) ToReportAggregationResponseMapOutputWithContext(ctx context.Context) ReportAggregationResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportAggregationResponseMapOutput)
}

// The aggregation expression to be used in the report.
type ReportAggregationResponseOutput struct{ *pulumi.OutputState }

func (ReportAggregationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportAggregationResponse)(nil)).Elem()
}

func (o ReportAggregationResponseOutput) ToReportAggregationResponseOutput() ReportAggregationResponseOutput {
	return o
}

func (o ReportAggregationResponseOutput) ToReportAggregationResponseOutputWithContext(ctx context.Context) ReportAggregationResponseOutput {
	return o
}

// The name of the aggregation function to use.
func (o ReportAggregationResponseOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v ReportAggregationResponse) string { return v.Function }).(pulumi.StringOutput)
}

// The name of the column to aggregate.
func (o ReportAggregationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportAggregationResponse) string { return v.Name }).(pulumi.StringOutput)
}

type ReportAggregationResponseMapOutput struct{ *pulumi.OutputState }

func (ReportAggregationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ReportAggregationResponse)(nil)).Elem()
}

func (o ReportAggregationResponseMapOutput) ToReportAggregationResponseMapOutput() ReportAggregationResponseMapOutput {
	return o
}

func (o ReportAggregationResponseMapOutput) ToReportAggregationResponseMapOutputWithContext(ctx context.Context) ReportAggregationResponseMapOutput {
	return o
}

func (o ReportAggregationResponseMapOutput) MapIndex(k pulumi.StringInput) ReportAggregationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ReportAggregationResponse {
		return vs[0].(map[string]ReportAggregationResponse)[vs[1].(string)]
	}).(ReportAggregationResponseOutput)
}

// The comparison expression to be used in the report.
type ReportComparisonExpression struct {
	// The name of the column to use in comparison.
	Name string `pulumi:"name"`
	// The operator to use for comparison.
	Operator string `pulumi:"operator"`
	// Array of values to use for comparison
	Values []string `pulumi:"values"`
}

// ReportComparisonExpressionInput is an input type that accepts ReportComparisonExpressionArgs and ReportComparisonExpressionOutput values.
// You can construct a concrete instance of `ReportComparisonExpressionInput` via:
//
//          ReportComparisonExpressionArgs{...}
type ReportComparisonExpressionInput interface {
	pulumi.Input

	ToReportComparisonExpressionOutput() ReportComparisonExpressionOutput
	ToReportComparisonExpressionOutputWithContext(context.Context) ReportComparisonExpressionOutput
}

// The comparison expression to be used in the report.
type ReportComparisonExpressionArgs struct {
	// The name of the column to use in comparison.
	Name pulumi.StringInput `pulumi:"name"`
	// The operator to use for comparison.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Array of values to use for comparison
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ReportComparisonExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportComparisonExpression)(nil)).Elem()
}

func (i ReportComparisonExpressionArgs) ToReportComparisonExpressionOutput() ReportComparisonExpressionOutput {
	return i.ToReportComparisonExpressionOutputWithContext(context.Background())
}

func (i ReportComparisonExpressionArgs) ToReportComparisonExpressionOutputWithContext(ctx context.Context) ReportComparisonExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportComparisonExpressionOutput)
}

func (i ReportComparisonExpressionArgs) ToReportComparisonExpressionPtrOutput() ReportComparisonExpressionPtrOutput {
	return i.ToReportComparisonExpressionPtrOutputWithContext(context.Background())
}

func (i ReportComparisonExpressionArgs) ToReportComparisonExpressionPtrOutputWithContext(ctx context.Context) ReportComparisonExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportComparisonExpressionOutput).ToReportComparisonExpressionPtrOutputWithContext(ctx)
}

// ReportComparisonExpressionPtrInput is an input type that accepts ReportComparisonExpressionArgs, ReportComparisonExpressionPtr and ReportComparisonExpressionPtrOutput values.
// You can construct a concrete instance of `ReportComparisonExpressionPtrInput` via:
//
//          ReportComparisonExpressionArgs{...}
//
//  or:
//
//          nil
type ReportComparisonExpressionPtrInput interface {
	pulumi.Input

	ToReportComparisonExpressionPtrOutput() ReportComparisonExpressionPtrOutput
	ToReportComparisonExpressionPtrOutputWithContext(context.Context) ReportComparisonExpressionPtrOutput
}

type reportComparisonExpressionPtrType ReportComparisonExpressionArgs

func ReportComparisonExpressionPtr(v *ReportComparisonExpressionArgs) ReportComparisonExpressionPtrInput {
	return (*reportComparisonExpressionPtrType)(v)
}

func (*reportComparisonExpressionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportComparisonExpression)(nil)).Elem()
}

func (i *reportComparisonExpressionPtrType) ToReportComparisonExpressionPtrOutput() ReportComparisonExpressionPtrOutput {
	return i.ToReportComparisonExpressionPtrOutputWithContext(context.Background())
}

func (i *reportComparisonExpressionPtrType) ToReportComparisonExpressionPtrOutputWithContext(ctx context.Context) ReportComparisonExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportComparisonExpressionPtrOutput)
}

// The comparison expression to be used in the report.
type ReportComparisonExpressionOutput struct{ *pulumi.OutputState }

func (ReportComparisonExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportComparisonExpression)(nil)).Elem()
}

func (o ReportComparisonExpressionOutput) ToReportComparisonExpressionOutput() ReportComparisonExpressionOutput {
	return o
}

func (o ReportComparisonExpressionOutput) ToReportComparisonExpressionOutputWithContext(ctx context.Context) ReportComparisonExpressionOutput {
	return o
}

func (o ReportComparisonExpressionOutput) ToReportComparisonExpressionPtrOutput() ReportComparisonExpressionPtrOutput {
	return o.ToReportComparisonExpressionPtrOutputWithContext(context.Background())
}

func (o ReportComparisonExpressionOutput) ToReportComparisonExpressionPtrOutputWithContext(ctx context.Context) ReportComparisonExpressionPtrOutput {
	return o.ApplyT(func(v ReportComparisonExpression) *ReportComparisonExpression {
		return &v
	}).(ReportComparisonExpressionPtrOutput)
}

// The name of the column to use in comparison.
func (o ReportComparisonExpressionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportComparisonExpression) string { return v.Name }).(pulumi.StringOutput)
}

// The operator to use for comparison.
func (o ReportComparisonExpressionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ReportComparisonExpression) string { return v.Operator }).(pulumi.StringOutput)
}

// Array of values to use for comparison
func (o ReportComparisonExpressionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReportComparisonExpression) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ReportComparisonExpressionPtrOutput struct{ *pulumi.OutputState }

func (ReportComparisonExpressionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportComparisonExpression)(nil)).Elem()
}

func (o ReportComparisonExpressionPtrOutput) ToReportComparisonExpressionPtrOutput() ReportComparisonExpressionPtrOutput {
	return o
}

func (o ReportComparisonExpressionPtrOutput) ToReportComparisonExpressionPtrOutputWithContext(ctx context.Context) ReportComparisonExpressionPtrOutput {
	return o
}

func (o ReportComparisonExpressionPtrOutput) Elem() ReportComparisonExpressionOutput {
	return o.ApplyT(func(v *ReportComparisonExpression) ReportComparisonExpression { return *v }).(ReportComparisonExpressionOutput)
}

// The name of the column to use in comparison.
func (o ReportComparisonExpressionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportComparisonExpression) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The operator to use for comparison.
func (o ReportComparisonExpressionPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportComparisonExpression) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Array of values to use for comparison
func (o ReportComparisonExpressionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReportComparisonExpression) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// The comparison expression to be used in the report.
type ReportComparisonExpressionResponse struct {
	// The name of the column to use in comparison.
	Name string `pulumi:"name"`
	// The operator to use for comparison.
	Operator string `pulumi:"operator"`
	// Array of values to use for comparison
	Values []string `pulumi:"values"`
}

// ReportComparisonExpressionResponseInput is an input type that accepts ReportComparisonExpressionResponseArgs and ReportComparisonExpressionResponseOutput values.
// You can construct a concrete instance of `ReportComparisonExpressionResponseInput` via:
//
//          ReportComparisonExpressionResponseArgs{...}
type ReportComparisonExpressionResponseInput interface {
	pulumi.Input

	ToReportComparisonExpressionResponseOutput() ReportComparisonExpressionResponseOutput
	ToReportComparisonExpressionResponseOutputWithContext(context.Context) ReportComparisonExpressionResponseOutput
}

// The comparison expression to be used in the report.
type ReportComparisonExpressionResponseArgs struct {
	// The name of the column to use in comparison.
	Name pulumi.StringInput `pulumi:"name"`
	// The operator to use for comparison.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Array of values to use for comparison
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ReportComparisonExpressionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportComparisonExpressionResponse)(nil)).Elem()
}

func (i ReportComparisonExpressionResponseArgs) ToReportComparisonExpressionResponseOutput() ReportComparisonExpressionResponseOutput {
	return i.ToReportComparisonExpressionResponseOutputWithContext(context.Background())
}

func (i ReportComparisonExpressionResponseArgs) ToReportComparisonExpressionResponseOutputWithContext(ctx context.Context) ReportComparisonExpressionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportComparisonExpressionResponseOutput)
}

func (i ReportComparisonExpressionResponseArgs) ToReportComparisonExpressionResponsePtrOutput() ReportComparisonExpressionResponsePtrOutput {
	return i.ToReportComparisonExpressionResponsePtrOutputWithContext(context.Background())
}

func (i ReportComparisonExpressionResponseArgs) ToReportComparisonExpressionResponsePtrOutputWithContext(ctx context.Context) ReportComparisonExpressionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportComparisonExpressionResponseOutput).ToReportComparisonExpressionResponsePtrOutputWithContext(ctx)
}

// ReportComparisonExpressionResponsePtrInput is an input type that accepts ReportComparisonExpressionResponseArgs, ReportComparisonExpressionResponsePtr and ReportComparisonExpressionResponsePtrOutput values.
// You can construct a concrete instance of `ReportComparisonExpressionResponsePtrInput` via:
//
//          ReportComparisonExpressionResponseArgs{...}
//
//  or:
//
//          nil
type ReportComparisonExpressionResponsePtrInput interface {
	pulumi.Input

	ToReportComparisonExpressionResponsePtrOutput() ReportComparisonExpressionResponsePtrOutput
	ToReportComparisonExpressionResponsePtrOutputWithContext(context.Context) ReportComparisonExpressionResponsePtrOutput
}

type reportComparisonExpressionResponsePtrType ReportComparisonExpressionResponseArgs

func ReportComparisonExpressionResponsePtr(v *ReportComparisonExpressionResponseArgs) ReportComparisonExpressionResponsePtrInput {
	return (*reportComparisonExpressionResponsePtrType)(v)
}

func (*reportComparisonExpressionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportComparisonExpressionResponse)(nil)).Elem()
}

func (i *reportComparisonExpressionResponsePtrType) ToReportComparisonExpressionResponsePtrOutput() ReportComparisonExpressionResponsePtrOutput {
	return i.ToReportComparisonExpressionResponsePtrOutputWithContext(context.Background())
}

func (i *reportComparisonExpressionResponsePtrType) ToReportComparisonExpressionResponsePtrOutputWithContext(ctx context.Context) ReportComparisonExpressionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportComparisonExpressionResponsePtrOutput)
}

// The comparison expression to be used in the report.
type ReportComparisonExpressionResponseOutput struct{ *pulumi.OutputState }

func (ReportComparisonExpressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportComparisonExpressionResponse)(nil)).Elem()
}

func (o ReportComparisonExpressionResponseOutput) ToReportComparisonExpressionResponseOutput() ReportComparisonExpressionResponseOutput {
	return o
}

func (o ReportComparisonExpressionResponseOutput) ToReportComparisonExpressionResponseOutputWithContext(ctx context.Context) ReportComparisonExpressionResponseOutput {
	return o
}

func (o ReportComparisonExpressionResponseOutput) ToReportComparisonExpressionResponsePtrOutput() ReportComparisonExpressionResponsePtrOutput {
	return o.ToReportComparisonExpressionResponsePtrOutputWithContext(context.Background())
}

func (o ReportComparisonExpressionResponseOutput) ToReportComparisonExpressionResponsePtrOutputWithContext(ctx context.Context) ReportComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v ReportComparisonExpressionResponse) *ReportComparisonExpressionResponse {
		return &v
	}).(ReportComparisonExpressionResponsePtrOutput)
}

// The name of the column to use in comparison.
func (o ReportComparisonExpressionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportComparisonExpressionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The operator to use for comparison.
func (o ReportComparisonExpressionResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ReportComparisonExpressionResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Array of values to use for comparison
func (o ReportComparisonExpressionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReportComparisonExpressionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ReportComparisonExpressionResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportComparisonExpressionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportComparisonExpressionResponse)(nil)).Elem()
}

func (o ReportComparisonExpressionResponsePtrOutput) ToReportComparisonExpressionResponsePtrOutput() ReportComparisonExpressionResponsePtrOutput {
	return o
}

func (o ReportComparisonExpressionResponsePtrOutput) ToReportComparisonExpressionResponsePtrOutputWithContext(ctx context.Context) ReportComparisonExpressionResponsePtrOutput {
	return o
}

func (o ReportComparisonExpressionResponsePtrOutput) Elem() ReportComparisonExpressionResponseOutput {
	return o.ApplyT(func(v *ReportComparisonExpressionResponse) ReportComparisonExpressionResponse { return *v }).(ReportComparisonExpressionResponseOutput)
}

// The name of the column to use in comparison.
func (o ReportComparisonExpressionResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportComparisonExpressionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The operator to use for comparison.
func (o ReportComparisonExpressionResponsePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportComparisonExpressionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Array of values to use for comparison
func (o ReportComparisonExpressionResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReportComparisonExpressionResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// The definition of data present in the report.
type ReportDataset struct {
	// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
	Aggregation map[string]ReportAggregation `pulumi:"aggregation"`
	// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
	Configuration *ReportDatasetConfiguration `pulumi:"configuration"`
	// Has filter expression to use in the report.
	Filter *ReportFilter `pulumi:"filter"`
	// The granularity of rows in the report.
	Granularity *string `pulumi:"granularity"`
	// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
	Grouping []ReportGrouping `pulumi:"grouping"`
}

// ReportDatasetInput is an input type that accepts ReportDatasetArgs and ReportDatasetOutput values.
// You can construct a concrete instance of `ReportDatasetInput` via:
//
//          ReportDatasetArgs{...}
type ReportDatasetInput interface {
	pulumi.Input

	ToReportDatasetOutput() ReportDatasetOutput
	ToReportDatasetOutputWithContext(context.Context) ReportDatasetOutput
}

// The definition of data present in the report.
type ReportDatasetArgs struct {
	// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
	Aggregation ReportAggregationMapInput `pulumi:"aggregation"`
	// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
	Configuration ReportDatasetConfigurationPtrInput `pulumi:"configuration"`
	// Has filter expression to use in the report.
	Filter ReportFilterPtrInput `pulumi:"filter"`
	// The granularity of rows in the report.
	Granularity pulumi.StringPtrInput `pulumi:"granularity"`
	// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
	Grouping ReportGroupingArrayInput `pulumi:"grouping"`
}

func (ReportDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDataset)(nil)).Elem()
}

func (i ReportDatasetArgs) ToReportDatasetOutput() ReportDatasetOutput {
	return i.ToReportDatasetOutputWithContext(context.Background())
}

func (i ReportDatasetArgs) ToReportDatasetOutputWithContext(ctx context.Context) ReportDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetOutput)
}

func (i ReportDatasetArgs) ToReportDatasetPtrOutput() ReportDatasetPtrOutput {
	return i.ToReportDatasetPtrOutputWithContext(context.Background())
}

func (i ReportDatasetArgs) ToReportDatasetPtrOutputWithContext(ctx context.Context) ReportDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetOutput).ToReportDatasetPtrOutputWithContext(ctx)
}

// ReportDatasetPtrInput is an input type that accepts ReportDatasetArgs, ReportDatasetPtr and ReportDatasetPtrOutput values.
// You can construct a concrete instance of `ReportDatasetPtrInput` via:
//
//          ReportDatasetArgs{...}
//
//  or:
//
//          nil
type ReportDatasetPtrInput interface {
	pulumi.Input

	ToReportDatasetPtrOutput() ReportDatasetPtrOutput
	ToReportDatasetPtrOutputWithContext(context.Context) ReportDatasetPtrOutput
}

type reportDatasetPtrType ReportDatasetArgs

func ReportDatasetPtr(v *ReportDatasetArgs) ReportDatasetPtrInput {
	return (*reportDatasetPtrType)(v)
}

func (*reportDatasetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDataset)(nil)).Elem()
}

func (i *reportDatasetPtrType) ToReportDatasetPtrOutput() ReportDatasetPtrOutput {
	return i.ToReportDatasetPtrOutputWithContext(context.Background())
}

func (i *reportDatasetPtrType) ToReportDatasetPtrOutputWithContext(ctx context.Context) ReportDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetPtrOutput)
}

// The definition of data present in the report.
type ReportDatasetOutput struct{ *pulumi.OutputState }

func (ReportDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDataset)(nil)).Elem()
}

func (o ReportDatasetOutput) ToReportDatasetOutput() ReportDatasetOutput {
	return o
}

func (o ReportDatasetOutput) ToReportDatasetOutputWithContext(ctx context.Context) ReportDatasetOutput {
	return o
}

func (o ReportDatasetOutput) ToReportDatasetPtrOutput() ReportDatasetPtrOutput {
	return o.ToReportDatasetPtrOutputWithContext(context.Background())
}

func (o ReportDatasetOutput) ToReportDatasetPtrOutputWithContext(ctx context.Context) ReportDatasetPtrOutput {
	return o.ApplyT(func(v ReportDataset) *ReportDataset {
		return &v
	}).(ReportDatasetPtrOutput)
}

// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
func (o ReportDatasetOutput) Aggregation() ReportAggregationMapOutput {
	return o.ApplyT(func(v ReportDataset) map[string]ReportAggregation { return v.Aggregation }).(ReportAggregationMapOutput)
}

// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
func (o ReportDatasetOutput) Configuration() ReportDatasetConfigurationPtrOutput {
	return o.ApplyT(func(v ReportDataset) *ReportDatasetConfiguration { return v.Configuration }).(ReportDatasetConfigurationPtrOutput)
}

// Has filter expression to use in the report.
func (o ReportDatasetOutput) Filter() ReportFilterPtrOutput {
	return o.ApplyT(func(v ReportDataset) *ReportFilter { return v.Filter }).(ReportFilterPtrOutput)
}

// The granularity of rows in the report.
func (o ReportDatasetOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportDataset) *string { return v.Granularity }).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
func (o ReportDatasetOutput) Grouping() ReportGroupingArrayOutput {
	return o.ApplyT(func(v ReportDataset) []ReportGrouping { return v.Grouping }).(ReportGroupingArrayOutput)
}

type ReportDatasetPtrOutput struct{ *pulumi.OutputState }

func (ReportDatasetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDataset)(nil)).Elem()
}

func (o ReportDatasetPtrOutput) ToReportDatasetPtrOutput() ReportDatasetPtrOutput {
	return o
}

func (o ReportDatasetPtrOutput) ToReportDatasetPtrOutputWithContext(ctx context.Context) ReportDatasetPtrOutput {
	return o
}

func (o ReportDatasetPtrOutput) Elem() ReportDatasetOutput {
	return o.ApplyT(func(v *ReportDataset) ReportDataset { return *v }).(ReportDatasetOutput)
}

// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
func (o ReportDatasetPtrOutput) Aggregation() ReportAggregationMapOutput {
	return o.ApplyT(func(v *ReportDataset) map[string]ReportAggregation {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(ReportAggregationMapOutput)
}

// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
func (o ReportDatasetPtrOutput) Configuration() ReportDatasetConfigurationPtrOutput {
	return o.ApplyT(func(v *ReportDataset) *ReportDatasetConfiguration {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(ReportDatasetConfigurationPtrOutput)
}

// Has filter expression to use in the report.
func (o ReportDatasetPtrOutput) Filter() ReportFilterPtrOutput {
	return o.ApplyT(func(v *ReportDataset) *ReportFilter {
		if v == nil {
			return nil
		}
		return v.Filter
	}).(ReportFilterPtrOutput)
}

// The granularity of rows in the report.
func (o ReportDatasetPtrOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportDataset) *string {
		if v == nil {
			return nil
		}
		return v.Granularity
	}).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
func (o ReportDatasetPtrOutput) Grouping() ReportGroupingArrayOutput {
	return o.ApplyT(func(v *ReportDataset) []ReportGrouping {
		if v == nil {
			return nil
		}
		return v.Grouping
	}).(ReportGroupingArrayOutput)
}

// The configuration of dataset in the report.
type ReportDatasetConfiguration struct {
	// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
	Columns []string `pulumi:"columns"`
}

// ReportDatasetConfigurationInput is an input type that accepts ReportDatasetConfigurationArgs and ReportDatasetConfigurationOutput values.
// You can construct a concrete instance of `ReportDatasetConfigurationInput` via:
//
//          ReportDatasetConfigurationArgs{...}
type ReportDatasetConfigurationInput interface {
	pulumi.Input

	ToReportDatasetConfigurationOutput() ReportDatasetConfigurationOutput
	ToReportDatasetConfigurationOutputWithContext(context.Context) ReportDatasetConfigurationOutput
}

// The configuration of dataset in the report.
type ReportDatasetConfigurationArgs struct {
	// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
	Columns pulumi.StringArrayInput `pulumi:"columns"`
}

func (ReportDatasetConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDatasetConfiguration)(nil)).Elem()
}

func (i ReportDatasetConfigurationArgs) ToReportDatasetConfigurationOutput() ReportDatasetConfigurationOutput {
	return i.ToReportDatasetConfigurationOutputWithContext(context.Background())
}

func (i ReportDatasetConfigurationArgs) ToReportDatasetConfigurationOutputWithContext(ctx context.Context) ReportDatasetConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetConfigurationOutput)
}

func (i ReportDatasetConfigurationArgs) ToReportDatasetConfigurationPtrOutput() ReportDatasetConfigurationPtrOutput {
	return i.ToReportDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (i ReportDatasetConfigurationArgs) ToReportDatasetConfigurationPtrOutputWithContext(ctx context.Context) ReportDatasetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetConfigurationOutput).ToReportDatasetConfigurationPtrOutputWithContext(ctx)
}

// ReportDatasetConfigurationPtrInput is an input type that accepts ReportDatasetConfigurationArgs, ReportDatasetConfigurationPtr and ReportDatasetConfigurationPtrOutput values.
// You can construct a concrete instance of `ReportDatasetConfigurationPtrInput` via:
//
//          ReportDatasetConfigurationArgs{...}
//
//  or:
//
//          nil
type ReportDatasetConfigurationPtrInput interface {
	pulumi.Input

	ToReportDatasetConfigurationPtrOutput() ReportDatasetConfigurationPtrOutput
	ToReportDatasetConfigurationPtrOutputWithContext(context.Context) ReportDatasetConfigurationPtrOutput
}

type reportDatasetConfigurationPtrType ReportDatasetConfigurationArgs

func ReportDatasetConfigurationPtr(v *ReportDatasetConfigurationArgs) ReportDatasetConfigurationPtrInput {
	return (*reportDatasetConfigurationPtrType)(v)
}

func (*reportDatasetConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDatasetConfiguration)(nil)).Elem()
}

func (i *reportDatasetConfigurationPtrType) ToReportDatasetConfigurationPtrOutput() ReportDatasetConfigurationPtrOutput {
	return i.ToReportDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (i *reportDatasetConfigurationPtrType) ToReportDatasetConfigurationPtrOutputWithContext(ctx context.Context) ReportDatasetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetConfigurationPtrOutput)
}

// The configuration of dataset in the report.
type ReportDatasetConfigurationOutput struct{ *pulumi.OutputState }

func (ReportDatasetConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDatasetConfiguration)(nil)).Elem()
}

func (o ReportDatasetConfigurationOutput) ToReportDatasetConfigurationOutput() ReportDatasetConfigurationOutput {
	return o
}

func (o ReportDatasetConfigurationOutput) ToReportDatasetConfigurationOutputWithContext(ctx context.Context) ReportDatasetConfigurationOutput {
	return o
}

func (o ReportDatasetConfigurationOutput) ToReportDatasetConfigurationPtrOutput() ReportDatasetConfigurationPtrOutput {
	return o.ToReportDatasetConfigurationPtrOutputWithContext(context.Background())
}

func (o ReportDatasetConfigurationOutput) ToReportDatasetConfigurationPtrOutputWithContext(ctx context.Context) ReportDatasetConfigurationPtrOutput {
	return o.ApplyT(func(v ReportDatasetConfiguration) *ReportDatasetConfiguration {
		return &v
	}).(ReportDatasetConfigurationPtrOutput)
}

// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
func (o ReportDatasetConfigurationOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReportDatasetConfiguration) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

type ReportDatasetConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ReportDatasetConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDatasetConfiguration)(nil)).Elem()
}

func (o ReportDatasetConfigurationPtrOutput) ToReportDatasetConfigurationPtrOutput() ReportDatasetConfigurationPtrOutput {
	return o
}

func (o ReportDatasetConfigurationPtrOutput) ToReportDatasetConfigurationPtrOutputWithContext(ctx context.Context) ReportDatasetConfigurationPtrOutput {
	return o
}

func (o ReportDatasetConfigurationPtrOutput) Elem() ReportDatasetConfigurationOutput {
	return o.ApplyT(func(v *ReportDatasetConfiguration) ReportDatasetConfiguration { return *v }).(ReportDatasetConfigurationOutput)
}

// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
func (o ReportDatasetConfigurationPtrOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReportDatasetConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(pulumi.StringArrayOutput)
}

// The configuration of dataset in the report.
type ReportDatasetConfigurationResponse struct {
	// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
	Columns []string `pulumi:"columns"`
}

// ReportDatasetConfigurationResponseInput is an input type that accepts ReportDatasetConfigurationResponseArgs and ReportDatasetConfigurationResponseOutput values.
// You can construct a concrete instance of `ReportDatasetConfigurationResponseInput` via:
//
//          ReportDatasetConfigurationResponseArgs{...}
type ReportDatasetConfigurationResponseInput interface {
	pulumi.Input

	ToReportDatasetConfigurationResponseOutput() ReportDatasetConfigurationResponseOutput
	ToReportDatasetConfigurationResponseOutputWithContext(context.Context) ReportDatasetConfigurationResponseOutput
}

// The configuration of dataset in the report.
type ReportDatasetConfigurationResponseArgs struct {
	// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
	Columns pulumi.StringArrayInput `pulumi:"columns"`
}

func (ReportDatasetConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDatasetConfigurationResponse)(nil)).Elem()
}

func (i ReportDatasetConfigurationResponseArgs) ToReportDatasetConfigurationResponseOutput() ReportDatasetConfigurationResponseOutput {
	return i.ToReportDatasetConfigurationResponseOutputWithContext(context.Background())
}

func (i ReportDatasetConfigurationResponseArgs) ToReportDatasetConfigurationResponseOutputWithContext(ctx context.Context) ReportDatasetConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetConfigurationResponseOutput)
}

func (i ReportDatasetConfigurationResponseArgs) ToReportDatasetConfigurationResponsePtrOutput() ReportDatasetConfigurationResponsePtrOutput {
	return i.ToReportDatasetConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i ReportDatasetConfigurationResponseArgs) ToReportDatasetConfigurationResponsePtrOutputWithContext(ctx context.Context) ReportDatasetConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetConfigurationResponseOutput).ToReportDatasetConfigurationResponsePtrOutputWithContext(ctx)
}

// ReportDatasetConfigurationResponsePtrInput is an input type that accepts ReportDatasetConfigurationResponseArgs, ReportDatasetConfigurationResponsePtr and ReportDatasetConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `ReportDatasetConfigurationResponsePtrInput` via:
//
//          ReportDatasetConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type ReportDatasetConfigurationResponsePtrInput interface {
	pulumi.Input

	ToReportDatasetConfigurationResponsePtrOutput() ReportDatasetConfigurationResponsePtrOutput
	ToReportDatasetConfigurationResponsePtrOutputWithContext(context.Context) ReportDatasetConfigurationResponsePtrOutput
}

type reportDatasetConfigurationResponsePtrType ReportDatasetConfigurationResponseArgs

func ReportDatasetConfigurationResponsePtr(v *ReportDatasetConfigurationResponseArgs) ReportDatasetConfigurationResponsePtrInput {
	return (*reportDatasetConfigurationResponsePtrType)(v)
}

func (*reportDatasetConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDatasetConfigurationResponse)(nil)).Elem()
}

func (i *reportDatasetConfigurationResponsePtrType) ToReportDatasetConfigurationResponsePtrOutput() ReportDatasetConfigurationResponsePtrOutput {
	return i.ToReportDatasetConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *reportDatasetConfigurationResponsePtrType) ToReportDatasetConfigurationResponsePtrOutputWithContext(ctx context.Context) ReportDatasetConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetConfigurationResponsePtrOutput)
}

// The configuration of dataset in the report.
type ReportDatasetConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ReportDatasetConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDatasetConfigurationResponse)(nil)).Elem()
}

func (o ReportDatasetConfigurationResponseOutput) ToReportDatasetConfigurationResponseOutput() ReportDatasetConfigurationResponseOutput {
	return o
}

func (o ReportDatasetConfigurationResponseOutput) ToReportDatasetConfigurationResponseOutputWithContext(ctx context.Context) ReportDatasetConfigurationResponseOutput {
	return o
}

func (o ReportDatasetConfigurationResponseOutput) ToReportDatasetConfigurationResponsePtrOutput() ReportDatasetConfigurationResponsePtrOutput {
	return o.ToReportDatasetConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o ReportDatasetConfigurationResponseOutput) ToReportDatasetConfigurationResponsePtrOutputWithContext(ctx context.Context) ReportDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ReportDatasetConfigurationResponse) *ReportDatasetConfigurationResponse {
		return &v
	}).(ReportDatasetConfigurationResponsePtrOutput)
}

// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
func (o ReportDatasetConfigurationResponseOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReportDatasetConfigurationResponse) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

type ReportDatasetConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportDatasetConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDatasetConfigurationResponse)(nil)).Elem()
}

func (o ReportDatasetConfigurationResponsePtrOutput) ToReportDatasetConfigurationResponsePtrOutput() ReportDatasetConfigurationResponsePtrOutput {
	return o
}

func (o ReportDatasetConfigurationResponsePtrOutput) ToReportDatasetConfigurationResponsePtrOutputWithContext(ctx context.Context) ReportDatasetConfigurationResponsePtrOutput {
	return o
}

func (o ReportDatasetConfigurationResponsePtrOutput) Elem() ReportDatasetConfigurationResponseOutput {
	return o.ApplyT(func(v *ReportDatasetConfigurationResponse) ReportDatasetConfigurationResponse { return *v }).(ReportDatasetConfigurationResponseOutput)
}

// Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns.
func (o ReportDatasetConfigurationResponsePtrOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReportDatasetConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(pulumi.StringArrayOutput)
}

// The definition of data present in the report.
type ReportDatasetResponse struct {
	// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
	Aggregation map[string]ReportAggregationResponse `pulumi:"aggregation"`
	// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
	Configuration *ReportDatasetConfigurationResponse `pulumi:"configuration"`
	// Has filter expression to use in the report.
	Filter *ReportFilterResponse `pulumi:"filter"`
	// The granularity of rows in the report.
	Granularity *string `pulumi:"granularity"`
	// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
	Grouping []ReportGroupingResponse `pulumi:"grouping"`
}

// ReportDatasetResponseInput is an input type that accepts ReportDatasetResponseArgs and ReportDatasetResponseOutput values.
// You can construct a concrete instance of `ReportDatasetResponseInput` via:
//
//          ReportDatasetResponseArgs{...}
type ReportDatasetResponseInput interface {
	pulumi.Input

	ToReportDatasetResponseOutput() ReportDatasetResponseOutput
	ToReportDatasetResponseOutputWithContext(context.Context) ReportDatasetResponseOutput
}

// The definition of data present in the report.
type ReportDatasetResponseArgs struct {
	// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
	Aggregation ReportAggregationResponseMapInput `pulumi:"aggregation"`
	// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
	Configuration ReportDatasetConfigurationResponsePtrInput `pulumi:"configuration"`
	// Has filter expression to use in the report.
	Filter ReportFilterResponsePtrInput `pulumi:"filter"`
	// The granularity of rows in the report.
	Granularity pulumi.StringPtrInput `pulumi:"granularity"`
	// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
	Grouping ReportGroupingResponseArrayInput `pulumi:"grouping"`
}

func (ReportDatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDatasetResponse)(nil)).Elem()
}

func (i ReportDatasetResponseArgs) ToReportDatasetResponseOutput() ReportDatasetResponseOutput {
	return i.ToReportDatasetResponseOutputWithContext(context.Background())
}

func (i ReportDatasetResponseArgs) ToReportDatasetResponseOutputWithContext(ctx context.Context) ReportDatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetResponseOutput)
}

func (i ReportDatasetResponseArgs) ToReportDatasetResponsePtrOutput() ReportDatasetResponsePtrOutput {
	return i.ToReportDatasetResponsePtrOutputWithContext(context.Background())
}

func (i ReportDatasetResponseArgs) ToReportDatasetResponsePtrOutputWithContext(ctx context.Context) ReportDatasetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetResponseOutput).ToReportDatasetResponsePtrOutputWithContext(ctx)
}

// ReportDatasetResponsePtrInput is an input type that accepts ReportDatasetResponseArgs, ReportDatasetResponsePtr and ReportDatasetResponsePtrOutput values.
// You can construct a concrete instance of `ReportDatasetResponsePtrInput` via:
//
//          ReportDatasetResponseArgs{...}
//
//  or:
//
//          nil
type ReportDatasetResponsePtrInput interface {
	pulumi.Input

	ToReportDatasetResponsePtrOutput() ReportDatasetResponsePtrOutput
	ToReportDatasetResponsePtrOutputWithContext(context.Context) ReportDatasetResponsePtrOutput
}

type reportDatasetResponsePtrType ReportDatasetResponseArgs

func ReportDatasetResponsePtr(v *ReportDatasetResponseArgs) ReportDatasetResponsePtrInput {
	return (*reportDatasetResponsePtrType)(v)
}

func (*reportDatasetResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDatasetResponse)(nil)).Elem()
}

func (i *reportDatasetResponsePtrType) ToReportDatasetResponsePtrOutput() ReportDatasetResponsePtrOutput {
	return i.ToReportDatasetResponsePtrOutputWithContext(context.Background())
}

func (i *reportDatasetResponsePtrType) ToReportDatasetResponsePtrOutputWithContext(ctx context.Context) ReportDatasetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDatasetResponsePtrOutput)
}

// The definition of data present in the report.
type ReportDatasetResponseOutput struct{ *pulumi.OutputState }

func (ReportDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDatasetResponse)(nil)).Elem()
}

func (o ReportDatasetResponseOutput) ToReportDatasetResponseOutput() ReportDatasetResponseOutput {
	return o
}

func (o ReportDatasetResponseOutput) ToReportDatasetResponseOutputWithContext(ctx context.Context) ReportDatasetResponseOutput {
	return o
}

func (o ReportDatasetResponseOutput) ToReportDatasetResponsePtrOutput() ReportDatasetResponsePtrOutput {
	return o.ToReportDatasetResponsePtrOutputWithContext(context.Background())
}

func (o ReportDatasetResponseOutput) ToReportDatasetResponsePtrOutputWithContext(ctx context.Context) ReportDatasetResponsePtrOutput {
	return o.ApplyT(func(v ReportDatasetResponse) *ReportDatasetResponse {
		return &v
	}).(ReportDatasetResponsePtrOutput)
}

// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
func (o ReportDatasetResponseOutput) Aggregation() ReportAggregationResponseMapOutput {
	return o.ApplyT(func(v ReportDatasetResponse) map[string]ReportAggregationResponse { return v.Aggregation }).(ReportAggregationResponseMapOutput)
}

// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
func (o ReportDatasetResponseOutput) Configuration() ReportDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ReportDatasetResponse) *ReportDatasetConfigurationResponse { return v.Configuration }).(ReportDatasetConfigurationResponsePtrOutput)
}

// Has filter expression to use in the report.
func (o ReportDatasetResponseOutput) Filter() ReportFilterResponsePtrOutput {
	return o.ApplyT(func(v ReportDatasetResponse) *ReportFilterResponse { return v.Filter }).(ReportFilterResponsePtrOutput)
}

// The granularity of rows in the report.
func (o ReportDatasetResponseOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportDatasetResponse) *string { return v.Granularity }).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
func (o ReportDatasetResponseOutput) Grouping() ReportGroupingResponseArrayOutput {
	return o.ApplyT(func(v ReportDatasetResponse) []ReportGroupingResponse { return v.Grouping }).(ReportGroupingResponseArrayOutput)
}

type ReportDatasetResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportDatasetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDatasetResponse)(nil)).Elem()
}

func (o ReportDatasetResponsePtrOutput) ToReportDatasetResponsePtrOutput() ReportDatasetResponsePtrOutput {
	return o
}

func (o ReportDatasetResponsePtrOutput) ToReportDatasetResponsePtrOutputWithContext(ctx context.Context) ReportDatasetResponsePtrOutput {
	return o
}

func (o ReportDatasetResponsePtrOutput) Elem() ReportDatasetResponseOutput {
	return o.ApplyT(func(v *ReportDatasetResponse) ReportDatasetResponse { return *v }).(ReportDatasetResponseOutput)
}

// Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
func (o ReportDatasetResponsePtrOutput) Aggregation() ReportAggregationResponseMapOutput {
	return o.ApplyT(func(v *ReportDatasetResponse) map[string]ReportAggregationResponse {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(ReportAggregationResponseMapOutput)
}

// Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
func (o ReportDatasetResponsePtrOutput) Configuration() ReportDatasetConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *ReportDatasetResponse) *ReportDatasetConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(ReportDatasetConfigurationResponsePtrOutput)
}

// Has filter expression to use in the report.
func (o ReportDatasetResponsePtrOutput) Filter() ReportFilterResponsePtrOutput {
	return o.ApplyT(func(v *ReportDatasetResponse) *ReportFilterResponse {
		if v == nil {
			return nil
		}
		return v.Filter
	}).(ReportFilterResponsePtrOutput)
}

// The granularity of rows in the report.
func (o ReportDatasetResponsePtrOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportDatasetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Granularity
	}).(pulumi.StringPtrOutput)
}

// Array of group by expression to use in the report. Report can have up to 2 group by clauses.
func (o ReportDatasetResponsePtrOutput) Grouping() ReportGroupingResponseArrayOutput {
	return o.ApplyT(func(v *ReportDatasetResponse) []ReportGroupingResponse {
		if v == nil {
			return nil
		}
		return v.Grouping
	}).(ReportGroupingResponseArrayOutput)
}

// The definition of a report.
type ReportDefinition struct {
	// Has definition for data in this report.
	Dataset *ReportDataset `pulumi:"dataset"`
	// Has time period for pulling data for the report.
	TimePeriod *ReportTimePeriod `pulumi:"timePeriod"`
	// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
	Timeframe string `pulumi:"timeframe"`
	// The type of the report.
	Type string `pulumi:"type"`
}

// ReportDefinitionInput is an input type that accepts ReportDefinitionArgs and ReportDefinitionOutput values.
// You can construct a concrete instance of `ReportDefinitionInput` via:
//
//          ReportDefinitionArgs{...}
type ReportDefinitionInput interface {
	pulumi.Input

	ToReportDefinitionOutput() ReportDefinitionOutput
	ToReportDefinitionOutputWithContext(context.Context) ReportDefinitionOutput
}

// The definition of a report.
type ReportDefinitionArgs struct {
	// Has definition for data in this report.
	Dataset ReportDatasetPtrInput `pulumi:"dataset"`
	// Has time period for pulling data for the report.
	TimePeriod ReportTimePeriodPtrInput `pulumi:"timePeriod"`
	// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
	Timeframe pulumi.StringInput `pulumi:"timeframe"`
	// The type of the report.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ReportDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDefinition)(nil)).Elem()
}

func (i ReportDefinitionArgs) ToReportDefinitionOutput() ReportDefinitionOutput {
	return i.ToReportDefinitionOutputWithContext(context.Background())
}

func (i ReportDefinitionArgs) ToReportDefinitionOutputWithContext(ctx context.Context) ReportDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDefinitionOutput)
}

func (i ReportDefinitionArgs) ToReportDefinitionPtrOutput() ReportDefinitionPtrOutput {
	return i.ToReportDefinitionPtrOutputWithContext(context.Background())
}

func (i ReportDefinitionArgs) ToReportDefinitionPtrOutputWithContext(ctx context.Context) ReportDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDefinitionOutput).ToReportDefinitionPtrOutputWithContext(ctx)
}

// ReportDefinitionPtrInput is an input type that accepts ReportDefinitionArgs, ReportDefinitionPtr and ReportDefinitionPtrOutput values.
// You can construct a concrete instance of `ReportDefinitionPtrInput` via:
//
//          ReportDefinitionArgs{...}
//
//  or:
//
//          nil
type ReportDefinitionPtrInput interface {
	pulumi.Input

	ToReportDefinitionPtrOutput() ReportDefinitionPtrOutput
	ToReportDefinitionPtrOutputWithContext(context.Context) ReportDefinitionPtrOutput
}

type reportDefinitionPtrType ReportDefinitionArgs

func ReportDefinitionPtr(v *ReportDefinitionArgs) ReportDefinitionPtrInput {
	return (*reportDefinitionPtrType)(v)
}

func (*reportDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDefinition)(nil)).Elem()
}

func (i *reportDefinitionPtrType) ToReportDefinitionPtrOutput() ReportDefinitionPtrOutput {
	return i.ToReportDefinitionPtrOutputWithContext(context.Background())
}

func (i *reportDefinitionPtrType) ToReportDefinitionPtrOutputWithContext(ctx context.Context) ReportDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDefinitionPtrOutput)
}

// The definition of a report.
type ReportDefinitionOutput struct{ *pulumi.OutputState }

func (ReportDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDefinition)(nil)).Elem()
}

func (o ReportDefinitionOutput) ToReportDefinitionOutput() ReportDefinitionOutput {
	return o
}

func (o ReportDefinitionOutput) ToReportDefinitionOutputWithContext(ctx context.Context) ReportDefinitionOutput {
	return o
}

func (o ReportDefinitionOutput) ToReportDefinitionPtrOutput() ReportDefinitionPtrOutput {
	return o.ToReportDefinitionPtrOutputWithContext(context.Background())
}

func (o ReportDefinitionOutput) ToReportDefinitionPtrOutputWithContext(ctx context.Context) ReportDefinitionPtrOutput {
	return o.ApplyT(func(v ReportDefinition) *ReportDefinition {
		return &v
	}).(ReportDefinitionPtrOutput)
}

// Has definition for data in this report.
func (o ReportDefinitionOutput) Dataset() ReportDatasetPtrOutput {
	return o.ApplyT(func(v ReportDefinition) *ReportDataset { return v.Dataset }).(ReportDatasetPtrOutput)
}

// Has time period for pulling data for the report.
func (o ReportDefinitionOutput) TimePeriod() ReportTimePeriodPtrOutput {
	return o.ApplyT(func(v ReportDefinition) *ReportTimePeriod { return v.TimePeriod }).(ReportTimePeriodPtrOutput)
}

// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
func (o ReportDefinitionOutput) Timeframe() pulumi.StringOutput {
	return o.ApplyT(func(v ReportDefinition) string { return v.Timeframe }).(pulumi.StringOutput)
}

// The type of the report.
func (o ReportDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReportDefinition) string { return v.Type }).(pulumi.StringOutput)
}

type ReportDefinitionPtrOutput struct{ *pulumi.OutputState }

func (ReportDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDefinition)(nil)).Elem()
}

func (o ReportDefinitionPtrOutput) ToReportDefinitionPtrOutput() ReportDefinitionPtrOutput {
	return o
}

func (o ReportDefinitionPtrOutput) ToReportDefinitionPtrOutputWithContext(ctx context.Context) ReportDefinitionPtrOutput {
	return o
}

func (o ReportDefinitionPtrOutput) Elem() ReportDefinitionOutput {
	return o.ApplyT(func(v *ReportDefinition) ReportDefinition { return *v }).(ReportDefinitionOutput)
}

// Has definition for data in this report.
func (o ReportDefinitionPtrOutput) Dataset() ReportDatasetPtrOutput {
	return o.ApplyT(func(v *ReportDefinition) *ReportDataset {
		if v == nil {
			return nil
		}
		return v.Dataset
	}).(ReportDatasetPtrOutput)
}

// Has time period for pulling data for the report.
func (o ReportDefinitionPtrOutput) TimePeriod() ReportTimePeriodPtrOutput {
	return o.ApplyT(func(v *ReportDefinition) *ReportTimePeriod {
		if v == nil {
			return nil
		}
		return v.TimePeriod
	}).(ReportTimePeriodPtrOutput)
}

// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
func (o ReportDefinitionPtrOutput) Timeframe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.Timeframe
	}).(pulumi.StringPtrOutput)
}

// The type of the report.
func (o ReportDefinitionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The definition of a report.
type ReportDefinitionResponse struct {
	// Has definition for data in this report.
	Dataset *ReportDatasetResponse `pulumi:"dataset"`
	// Has time period for pulling data for the report.
	TimePeriod *ReportTimePeriodResponse `pulumi:"timePeriod"`
	// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
	Timeframe string `pulumi:"timeframe"`
	// The type of the report.
	Type string `pulumi:"type"`
}

// ReportDefinitionResponseInput is an input type that accepts ReportDefinitionResponseArgs and ReportDefinitionResponseOutput values.
// You can construct a concrete instance of `ReportDefinitionResponseInput` via:
//
//          ReportDefinitionResponseArgs{...}
type ReportDefinitionResponseInput interface {
	pulumi.Input

	ToReportDefinitionResponseOutput() ReportDefinitionResponseOutput
	ToReportDefinitionResponseOutputWithContext(context.Context) ReportDefinitionResponseOutput
}

// The definition of a report.
type ReportDefinitionResponseArgs struct {
	// Has definition for data in this report.
	Dataset ReportDatasetResponsePtrInput `pulumi:"dataset"`
	// Has time period for pulling data for the report.
	TimePeriod ReportTimePeriodResponsePtrInput `pulumi:"timePeriod"`
	// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
	Timeframe pulumi.StringInput `pulumi:"timeframe"`
	// The type of the report.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ReportDefinitionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDefinitionResponse)(nil)).Elem()
}

func (i ReportDefinitionResponseArgs) ToReportDefinitionResponseOutput() ReportDefinitionResponseOutput {
	return i.ToReportDefinitionResponseOutputWithContext(context.Background())
}

func (i ReportDefinitionResponseArgs) ToReportDefinitionResponseOutputWithContext(ctx context.Context) ReportDefinitionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDefinitionResponseOutput)
}

func (i ReportDefinitionResponseArgs) ToReportDefinitionResponsePtrOutput() ReportDefinitionResponsePtrOutput {
	return i.ToReportDefinitionResponsePtrOutputWithContext(context.Background())
}

func (i ReportDefinitionResponseArgs) ToReportDefinitionResponsePtrOutputWithContext(ctx context.Context) ReportDefinitionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDefinitionResponseOutput).ToReportDefinitionResponsePtrOutputWithContext(ctx)
}

// ReportDefinitionResponsePtrInput is an input type that accepts ReportDefinitionResponseArgs, ReportDefinitionResponsePtr and ReportDefinitionResponsePtrOutput values.
// You can construct a concrete instance of `ReportDefinitionResponsePtrInput` via:
//
//          ReportDefinitionResponseArgs{...}
//
//  or:
//
//          nil
type ReportDefinitionResponsePtrInput interface {
	pulumi.Input

	ToReportDefinitionResponsePtrOutput() ReportDefinitionResponsePtrOutput
	ToReportDefinitionResponsePtrOutputWithContext(context.Context) ReportDefinitionResponsePtrOutput
}

type reportDefinitionResponsePtrType ReportDefinitionResponseArgs

func ReportDefinitionResponsePtr(v *ReportDefinitionResponseArgs) ReportDefinitionResponsePtrInput {
	return (*reportDefinitionResponsePtrType)(v)
}

func (*reportDefinitionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDefinitionResponse)(nil)).Elem()
}

func (i *reportDefinitionResponsePtrType) ToReportDefinitionResponsePtrOutput() ReportDefinitionResponsePtrOutput {
	return i.ToReportDefinitionResponsePtrOutputWithContext(context.Background())
}

func (i *reportDefinitionResponsePtrType) ToReportDefinitionResponsePtrOutputWithContext(ctx context.Context) ReportDefinitionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDefinitionResponsePtrOutput)
}

// The definition of a report.
type ReportDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ReportDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDefinitionResponse)(nil)).Elem()
}

func (o ReportDefinitionResponseOutput) ToReportDefinitionResponseOutput() ReportDefinitionResponseOutput {
	return o
}

func (o ReportDefinitionResponseOutput) ToReportDefinitionResponseOutputWithContext(ctx context.Context) ReportDefinitionResponseOutput {
	return o
}

func (o ReportDefinitionResponseOutput) ToReportDefinitionResponsePtrOutput() ReportDefinitionResponsePtrOutput {
	return o.ToReportDefinitionResponsePtrOutputWithContext(context.Background())
}

func (o ReportDefinitionResponseOutput) ToReportDefinitionResponsePtrOutputWithContext(ctx context.Context) ReportDefinitionResponsePtrOutput {
	return o.ApplyT(func(v ReportDefinitionResponse) *ReportDefinitionResponse {
		return &v
	}).(ReportDefinitionResponsePtrOutput)
}

// Has definition for data in this report.
func (o ReportDefinitionResponseOutput) Dataset() ReportDatasetResponsePtrOutput {
	return o.ApplyT(func(v ReportDefinitionResponse) *ReportDatasetResponse { return v.Dataset }).(ReportDatasetResponsePtrOutput)
}

// Has time period for pulling data for the report.
func (o ReportDefinitionResponseOutput) TimePeriod() ReportTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v ReportDefinitionResponse) *ReportTimePeriodResponse { return v.TimePeriod }).(ReportTimePeriodResponsePtrOutput)
}

// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
func (o ReportDefinitionResponseOutput) Timeframe() pulumi.StringOutput {
	return o.ApplyT(func(v ReportDefinitionResponse) string { return v.Timeframe }).(pulumi.StringOutput)
}

// The type of the report.
func (o ReportDefinitionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReportDefinitionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ReportDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDefinitionResponse)(nil)).Elem()
}

func (o ReportDefinitionResponsePtrOutput) ToReportDefinitionResponsePtrOutput() ReportDefinitionResponsePtrOutput {
	return o
}

func (o ReportDefinitionResponsePtrOutput) ToReportDefinitionResponsePtrOutputWithContext(ctx context.Context) ReportDefinitionResponsePtrOutput {
	return o
}

func (o ReportDefinitionResponsePtrOutput) Elem() ReportDefinitionResponseOutput {
	return o.ApplyT(func(v *ReportDefinitionResponse) ReportDefinitionResponse { return *v }).(ReportDefinitionResponseOutput)
}

// Has definition for data in this report.
func (o ReportDefinitionResponsePtrOutput) Dataset() ReportDatasetResponsePtrOutput {
	return o.ApplyT(func(v *ReportDefinitionResponse) *ReportDatasetResponse {
		if v == nil {
			return nil
		}
		return v.Dataset
	}).(ReportDatasetResponsePtrOutput)
}

// Has time period for pulling data for the report.
func (o ReportDefinitionResponsePtrOutput) TimePeriod() ReportTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v *ReportDefinitionResponse) *ReportTimePeriodResponse {
		if v == nil {
			return nil
		}
		return v.TimePeriod
	}).(ReportTimePeriodResponsePtrOutput)
}

// The time frame for pulling data for the report. If custom, then a specific time period must be provided.
func (o ReportDefinitionResponsePtrOutput) Timeframe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Timeframe
	}).(pulumi.StringPtrOutput)
}

// The type of the report.
func (o ReportDefinitionResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The destination information for the delivery of the report.
type ReportDeliveryDestination struct {
	// The name of the container where reports will be uploaded.
	Container string `pulumi:"container"`
	// The resource id of the storage account where reports will be delivered.
	ResourceId string `pulumi:"resourceId"`
	// The name of the directory where reports will be uploaded.
	RootFolderPath *string `pulumi:"rootFolderPath"`
}

// ReportDeliveryDestinationInput is an input type that accepts ReportDeliveryDestinationArgs and ReportDeliveryDestinationOutput values.
// You can construct a concrete instance of `ReportDeliveryDestinationInput` via:
//
//          ReportDeliveryDestinationArgs{...}
type ReportDeliveryDestinationInput interface {
	pulumi.Input

	ToReportDeliveryDestinationOutput() ReportDeliveryDestinationOutput
	ToReportDeliveryDestinationOutputWithContext(context.Context) ReportDeliveryDestinationOutput
}

// The destination information for the delivery of the report.
type ReportDeliveryDestinationArgs struct {
	// The name of the container where reports will be uploaded.
	Container pulumi.StringInput `pulumi:"container"`
	// The resource id of the storage account where reports will be delivered.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// The name of the directory where reports will be uploaded.
	RootFolderPath pulumi.StringPtrInput `pulumi:"rootFolderPath"`
}

func (ReportDeliveryDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDeliveryDestination)(nil)).Elem()
}

func (i ReportDeliveryDestinationArgs) ToReportDeliveryDestinationOutput() ReportDeliveryDestinationOutput {
	return i.ToReportDeliveryDestinationOutputWithContext(context.Background())
}

func (i ReportDeliveryDestinationArgs) ToReportDeliveryDestinationOutputWithContext(ctx context.Context) ReportDeliveryDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDeliveryDestinationOutput)
}

func (i ReportDeliveryDestinationArgs) ToReportDeliveryDestinationPtrOutput() ReportDeliveryDestinationPtrOutput {
	return i.ToReportDeliveryDestinationPtrOutputWithContext(context.Background())
}

func (i ReportDeliveryDestinationArgs) ToReportDeliveryDestinationPtrOutputWithContext(ctx context.Context) ReportDeliveryDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDeliveryDestinationOutput).ToReportDeliveryDestinationPtrOutputWithContext(ctx)
}

// ReportDeliveryDestinationPtrInput is an input type that accepts ReportDeliveryDestinationArgs, ReportDeliveryDestinationPtr and ReportDeliveryDestinationPtrOutput values.
// You can construct a concrete instance of `ReportDeliveryDestinationPtrInput` via:
//
//          ReportDeliveryDestinationArgs{...}
//
//  or:
//
//          nil
type ReportDeliveryDestinationPtrInput interface {
	pulumi.Input

	ToReportDeliveryDestinationPtrOutput() ReportDeliveryDestinationPtrOutput
	ToReportDeliveryDestinationPtrOutputWithContext(context.Context) ReportDeliveryDestinationPtrOutput
}

type reportDeliveryDestinationPtrType ReportDeliveryDestinationArgs

func ReportDeliveryDestinationPtr(v *ReportDeliveryDestinationArgs) ReportDeliveryDestinationPtrInput {
	return (*reportDeliveryDestinationPtrType)(v)
}

func (*reportDeliveryDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDeliveryDestination)(nil)).Elem()
}

func (i *reportDeliveryDestinationPtrType) ToReportDeliveryDestinationPtrOutput() ReportDeliveryDestinationPtrOutput {
	return i.ToReportDeliveryDestinationPtrOutputWithContext(context.Background())
}

func (i *reportDeliveryDestinationPtrType) ToReportDeliveryDestinationPtrOutputWithContext(ctx context.Context) ReportDeliveryDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDeliveryDestinationPtrOutput)
}

// The destination information for the delivery of the report.
type ReportDeliveryDestinationOutput struct{ *pulumi.OutputState }

func (ReportDeliveryDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDeliveryDestination)(nil)).Elem()
}

func (o ReportDeliveryDestinationOutput) ToReportDeliveryDestinationOutput() ReportDeliveryDestinationOutput {
	return o
}

func (o ReportDeliveryDestinationOutput) ToReportDeliveryDestinationOutputWithContext(ctx context.Context) ReportDeliveryDestinationOutput {
	return o
}

func (o ReportDeliveryDestinationOutput) ToReportDeliveryDestinationPtrOutput() ReportDeliveryDestinationPtrOutput {
	return o.ToReportDeliveryDestinationPtrOutputWithContext(context.Background())
}

func (o ReportDeliveryDestinationOutput) ToReportDeliveryDestinationPtrOutputWithContext(ctx context.Context) ReportDeliveryDestinationPtrOutput {
	return o.ApplyT(func(v ReportDeliveryDestination) *ReportDeliveryDestination {
		return &v
	}).(ReportDeliveryDestinationPtrOutput)
}

// The name of the container where reports will be uploaded.
func (o ReportDeliveryDestinationOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v ReportDeliveryDestination) string { return v.Container }).(pulumi.StringOutput)
}

// The resource id of the storage account where reports will be delivered.
func (o ReportDeliveryDestinationOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ReportDeliveryDestination) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The name of the directory where reports will be uploaded.
func (o ReportDeliveryDestinationOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportDeliveryDestination) *string { return v.RootFolderPath }).(pulumi.StringPtrOutput)
}

type ReportDeliveryDestinationPtrOutput struct{ *pulumi.OutputState }

func (ReportDeliveryDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDeliveryDestination)(nil)).Elem()
}

func (o ReportDeliveryDestinationPtrOutput) ToReportDeliveryDestinationPtrOutput() ReportDeliveryDestinationPtrOutput {
	return o
}

func (o ReportDeliveryDestinationPtrOutput) ToReportDeliveryDestinationPtrOutputWithContext(ctx context.Context) ReportDeliveryDestinationPtrOutput {
	return o
}

func (o ReportDeliveryDestinationPtrOutput) Elem() ReportDeliveryDestinationOutput {
	return o.ApplyT(func(v *ReportDeliveryDestination) ReportDeliveryDestination { return *v }).(ReportDeliveryDestinationOutput)
}

// The name of the container where reports will be uploaded.
func (o ReportDeliveryDestinationPtrOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportDeliveryDestination) *string {
		if v == nil {
			return nil
		}
		return &v.Container
	}).(pulumi.StringPtrOutput)
}

// The resource id of the storage account where reports will be delivered.
func (o ReportDeliveryDestinationPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportDeliveryDestination) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// The name of the directory where reports will be uploaded.
func (o ReportDeliveryDestinationPtrOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportDeliveryDestination) *string {
		if v == nil {
			return nil
		}
		return v.RootFolderPath
	}).(pulumi.StringPtrOutput)
}

// The destination information for the delivery of the report.
type ReportDeliveryDestinationResponse struct {
	// The name of the container where reports will be uploaded.
	Container string `pulumi:"container"`
	// The resource id of the storage account where reports will be delivered.
	ResourceId string `pulumi:"resourceId"`
	// The name of the directory where reports will be uploaded.
	RootFolderPath *string `pulumi:"rootFolderPath"`
}

// ReportDeliveryDestinationResponseInput is an input type that accepts ReportDeliveryDestinationResponseArgs and ReportDeliveryDestinationResponseOutput values.
// You can construct a concrete instance of `ReportDeliveryDestinationResponseInput` via:
//
//          ReportDeliveryDestinationResponseArgs{...}
type ReportDeliveryDestinationResponseInput interface {
	pulumi.Input

	ToReportDeliveryDestinationResponseOutput() ReportDeliveryDestinationResponseOutput
	ToReportDeliveryDestinationResponseOutputWithContext(context.Context) ReportDeliveryDestinationResponseOutput
}

// The destination information for the delivery of the report.
type ReportDeliveryDestinationResponseArgs struct {
	// The name of the container where reports will be uploaded.
	Container pulumi.StringInput `pulumi:"container"`
	// The resource id of the storage account where reports will be delivered.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// The name of the directory where reports will be uploaded.
	RootFolderPath pulumi.StringPtrInput `pulumi:"rootFolderPath"`
}

func (ReportDeliveryDestinationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDeliveryDestinationResponse)(nil)).Elem()
}

func (i ReportDeliveryDestinationResponseArgs) ToReportDeliveryDestinationResponseOutput() ReportDeliveryDestinationResponseOutput {
	return i.ToReportDeliveryDestinationResponseOutputWithContext(context.Background())
}

func (i ReportDeliveryDestinationResponseArgs) ToReportDeliveryDestinationResponseOutputWithContext(ctx context.Context) ReportDeliveryDestinationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDeliveryDestinationResponseOutput)
}

func (i ReportDeliveryDestinationResponseArgs) ToReportDeliveryDestinationResponsePtrOutput() ReportDeliveryDestinationResponsePtrOutput {
	return i.ToReportDeliveryDestinationResponsePtrOutputWithContext(context.Background())
}

func (i ReportDeliveryDestinationResponseArgs) ToReportDeliveryDestinationResponsePtrOutputWithContext(ctx context.Context) ReportDeliveryDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDeliveryDestinationResponseOutput).ToReportDeliveryDestinationResponsePtrOutputWithContext(ctx)
}

// ReportDeliveryDestinationResponsePtrInput is an input type that accepts ReportDeliveryDestinationResponseArgs, ReportDeliveryDestinationResponsePtr and ReportDeliveryDestinationResponsePtrOutput values.
// You can construct a concrete instance of `ReportDeliveryDestinationResponsePtrInput` via:
//
//          ReportDeliveryDestinationResponseArgs{...}
//
//  or:
//
//          nil
type ReportDeliveryDestinationResponsePtrInput interface {
	pulumi.Input

	ToReportDeliveryDestinationResponsePtrOutput() ReportDeliveryDestinationResponsePtrOutput
	ToReportDeliveryDestinationResponsePtrOutputWithContext(context.Context) ReportDeliveryDestinationResponsePtrOutput
}

type reportDeliveryDestinationResponsePtrType ReportDeliveryDestinationResponseArgs

func ReportDeliveryDestinationResponsePtr(v *ReportDeliveryDestinationResponseArgs) ReportDeliveryDestinationResponsePtrInput {
	return (*reportDeliveryDestinationResponsePtrType)(v)
}

func (*reportDeliveryDestinationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDeliveryDestinationResponse)(nil)).Elem()
}

func (i *reportDeliveryDestinationResponsePtrType) ToReportDeliveryDestinationResponsePtrOutput() ReportDeliveryDestinationResponsePtrOutput {
	return i.ToReportDeliveryDestinationResponsePtrOutputWithContext(context.Background())
}

func (i *reportDeliveryDestinationResponsePtrType) ToReportDeliveryDestinationResponsePtrOutputWithContext(ctx context.Context) ReportDeliveryDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDeliveryDestinationResponsePtrOutput)
}

// The destination information for the delivery of the report.
type ReportDeliveryDestinationResponseOutput struct{ *pulumi.OutputState }

func (ReportDeliveryDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDeliveryDestinationResponse)(nil)).Elem()
}

func (o ReportDeliveryDestinationResponseOutput) ToReportDeliveryDestinationResponseOutput() ReportDeliveryDestinationResponseOutput {
	return o
}

func (o ReportDeliveryDestinationResponseOutput) ToReportDeliveryDestinationResponseOutputWithContext(ctx context.Context) ReportDeliveryDestinationResponseOutput {
	return o
}

func (o ReportDeliveryDestinationResponseOutput) ToReportDeliveryDestinationResponsePtrOutput() ReportDeliveryDestinationResponsePtrOutput {
	return o.ToReportDeliveryDestinationResponsePtrOutputWithContext(context.Background())
}

func (o ReportDeliveryDestinationResponseOutput) ToReportDeliveryDestinationResponsePtrOutputWithContext(ctx context.Context) ReportDeliveryDestinationResponsePtrOutput {
	return o.ApplyT(func(v ReportDeliveryDestinationResponse) *ReportDeliveryDestinationResponse {
		return &v
	}).(ReportDeliveryDestinationResponsePtrOutput)
}

// The name of the container where reports will be uploaded.
func (o ReportDeliveryDestinationResponseOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v ReportDeliveryDestinationResponse) string { return v.Container }).(pulumi.StringOutput)
}

// The resource id of the storage account where reports will be delivered.
func (o ReportDeliveryDestinationResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ReportDeliveryDestinationResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The name of the directory where reports will be uploaded.
func (o ReportDeliveryDestinationResponseOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportDeliveryDestinationResponse) *string { return v.RootFolderPath }).(pulumi.StringPtrOutput)
}

type ReportDeliveryDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportDeliveryDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDeliveryDestinationResponse)(nil)).Elem()
}

func (o ReportDeliveryDestinationResponsePtrOutput) ToReportDeliveryDestinationResponsePtrOutput() ReportDeliveryDestinationResponsePtrOutput {
	return o
}

func (o ReportDeliveryDestinationResponsePtrOutput) ToReportDeliveryDestinationResponsePtrOutputWithContext(ctx context.Context) ReportDeliveryDestinationResponsePtrOutput {
	return o
}

func (o ReportDeliveryDestinationResponsePtrOutput) Elem() ReportDeliveryDestinationResponseOutput {
	return o.ApplyT(func(v *ReportDeliveryDestinationResponse) ReportDeliveryDestinationResponse { return *v }).(ReportDeliveryDestinationResponseOutput)
}

// The name of the container where reports will be uploaded.
func (o ReportDeliveryDestinationResponsePtrOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportDeliveryDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Container
	}).(pulumi.StringPtrOutput)
}

// The resource id of the storage account where reports will be delivered.
func (o ReportDeliveryDestinationResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportDeliveryDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// The name of the directory where reports will be uploaded.
func (o ReportDeliveryDestinationResponsePtrOutput) RootFolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportDeliveryDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.RootFolderPath
	}).(pulumi.StringPtrOutput)
}

// The delivery information associated with a report.
type ReportDeliveryInfo struct {
	// Has destination for the report being delivered.
	Destination ReportDeliveryDestination `pulumi:"destination"`
}

// ReportDeliveryInfoInput is an input type that accepts ReportDeliveryInfoArgs and ReportDeliveryInfoOutput values.
// You can construct a concrete instance of `ReportDeliveryInfoInput` via:
//
//          ReportDeliveryInfoArgs{...}
type ReportDeliveryInfoInput interface {
	pulumi.Input

	ToReportDeliveryInfoOutput() ReportDeliveryInfoOutput
	ToReportDeliveryInfoOutputWithContext(context.Context) ReportDeliveryInfoOutput
}

// The delivery information associated with a report.
type ReportDeliveryInfoArgs struct {
	// Has destination for the report being delivered.
	Destination ReportDeliveryDestinationInput `pulumi:"destination"`
}

func (ReportDeliveryInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDeliveryInfo)(nil)).Elem()
}

func (i ReportDeliveryInfoArgs) ToReportDeliveryInfoOutput() ReportDeliveryInfoOutput {
	return i.ToReportDeliveryInfoOutputWithContext(context.Background())
}

func (i ReportDeliveryInfoArgs) ToReportDeliveryInfoOutputWithContext(ctx context.Context) ReportDeliveryInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDeliveryInfoOutput)
}

func (i ReportDeliveryInfoArgs) ToReportDeliveryInfoPtrOutput() ReportDeliveryInfoPtrOutput {
	return i.ToReportDeliveryInfoPtrOutputWithContext(context.Background())
}

func (i ReportDeliveryInfoArgs) ToReportDeliveryInfoPtrOutputWithContext(ctx context.Context) ReportDeliveryInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDeliveryInfoOutput).ToReportDeliveryInfoPtrOutputWithContext(ctx)
}

// ReportDeliveryInfoPtrInput is an input type that accepts ReportDeliveryInfoArgs, ReportDeliveryInfoPtr and ReportDeliveryInfoPtrOutput values.
// You can construct a concrete instance of `ReportDeliveryInfoPtrInput` via:
//
//          ReportDeliveryInfoArgs{...}
//
//  or:
//
//          nil
type ReportDeliveryInfoPtrInput interface {
	pulumi.Input

	ToReportDeliveryInfoPtrOutput() ReportDeliveryInfoPtrOutput
	ToReportDeliveryInfoPtrOutputWithContext(context.Context) ReportDeliveryInfoPtrOutput
}

type reportDeliveryInfoPtrType ReportDeliveryInfoArgs

func ReportDeliveryInfoPtr(v *ReportDeliveryInfoArgs) ReportDeliveryInfoPtrInput {
	return (*reportDeliveryInfoPtrType)(v)
}

func (*reportDeliveryInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDeliveryInfo)(nil)).Elem()
}

func (i *reportDeliveryInfoPtrType) ToReportDeliveryInfoPtrOutput() ReportDeliveryInfoPtrOutput {
	return i.ToReportDeliveryInfoPtrOutputWithContext(context.Background())
}

func (i *reportDeliveryInfoPtrType) ToReportDeliveryInfoPtrOutputWithContext(ctx context.Context) ReportDeliveryInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDeliveryInfoPtrOutput)
}

// The delivery information associated with a report.
type ReportDeliveryInfoOutput struct{ *pulumi.OutputState }

func (ReportDeliveryInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDeliveryInfo)(nil)).Elem()
}

func (o ReportDeliveryInfoOutput) ToReportDeliveryInfoOutput() ReportDeliveryInfoOutput {
	return o
}

func (o ReportDeliveryInfoOutput) ToReportDeliveryInfoOutputWithContext(ctx context.Context) ReportDeliveryInfoOutput {
	return o
}

func (o ReportDeliveryInfoOutput) ToReportDeliveryInfoPtrOutput() ReportDeliveryInfoPtrOutput {
	return o.ToReportDeliveryInfoPtrOutputWithContext(context.Background())
}

func (o ReportDeliveryInfoOutput) ToReportDeliveryInfoPtrOutputWithContext(ctx context.Context) ReportDeliveryInfoPtrOutput {
	return o.ApplyT(func(v ReportDeliveryInfo) *ReportDeliveryInfo {
		return &v
	}).(ReportDeliveryInfoPtrOutput)
}

// Has destination for the report being delivered.
func (o ReportDeliveryInfoOutput) Destination() ReportDeliveryDestinationOutput {
	return o.ApplyT(func(v ReportDeliveryInfo) ReportDeliveryDestination { return v.Destination }).(ReportDeliveryDestinationOutput)
}

type ReportDeliveryInfoPtrOutput struct{ *pulumi.OutputState }

func (ReportDeliveryInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDeliveryInfo)(nil)).Elem()
}

func (o ReportDeliveryInfoPtrOutput) ToReportDeliveryInfoPtrOutput() ReportDeliveryInfoPtrOutput {
	return o
}

func (o ReportDeliveryInfoPtrOutput) ToReportDeliveryInfoPtrOutputWithContext(ctx context.Context) ReportDeliveryInfoPtrOutput {
	return o
}

func (o ReportDeliveryInfoPtrOutput) Elem() ReportDeliveryInfoOutput {
	return o.ApplyT(func(v *ReportDeliveryInfo) ReportDeliveryInfo { return *v }).(ReportDeliveryInfoOutput)
}

// Has destination for the report being delivered.
func (o ReportDeliveryInfoPtrOutput) Destination() ReportDeliveryDestinationPtrOutput {
	return o.ApplyT(func(v *ReportDeliveryInfo) *ReportDeliveryDestination {
		if v == nil {
			return nil
		}
		return &v.Destination
	}).(ReportDeliveryDestinationPtrOutput)
}

// The delivery information associated with a report.
type ReportDeliveryInfoResponse struct {
	// Has destination for the report being delivered.
	Destination ReportDeliveryDestinationResponse `pulumi:"destination"`
}

// ReportDeliveryInfoResponseInput is an input type that accepts ReportDeliveryInfoResponseArgs and ReportDeliveryInfoResponseOutput values.
// You can construct a concrete instance of `ReportDeliveryInfoResponseInput` via:
//
//          ReportDeliveryInfoResponseArgs{...}
type ReportDeliveryInfoResponseInput interface {
	pulumi.Input

	ToReportDeliveryInfoResponseOutput() ReportDeliveryInfoResponseOutput
	ToReportDeliveryInfoResponseOutputWithContext(context.Context) ReportDeliveryInfoResponseOutput
}

// The delivery information associated with a report.
type ReportDeliveryInfoResponseArgs struct {
	// Has destination for the report being delivered.
	Destination ReportDeliveryDestinationResponseInput `pulumi:"destination"`
}

func (ReportDeliveryInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDeliveryInfoResponse)(nil)).Elem()
}

func (i ReportDeliveryInfoResponseArgs) ToReportDeliveryInfoResponseOutput() ReportDeliveryInfoResponseOutput {
	return i.ToReportDeliveryInfoResponseOutputWithContext(context.Background())
}

func (i ReportDeliveryInfoResponseArgs) ToReportDeliveryInfoResponseOutputWithContext(ctx context.Context) ReportDeliveryInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDeliveryInfoResponseOutput)
}

func (i ReportDeliveryInfoResponseArgs) ToReportDeliveryInfoResponsePtrOutput() ReportDeliveryInfoResponsePtrOutput {
	return i.ToReportDeliveryInfoResponsePtrOutputWithContext(context.Background())
}

func (i ReportDeliveryInfoResponseArgs) ToReportDeliveryInfoResponsePtrOutputWithContext(ctx context.Context) ReportDeliveryInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDeliveryInfoResponseOutput).ToReportDeliveryInfoResponsePtrOutputWithContext(ctx)
}

// ReportDeliveryInfoResponsePtrInput is an input type that accepts ReportDeliveryInfoResponseArgs, ReportDeliveryInfoResponsePtr and ReportDeliveryInfoResponsePtrOutput values.
// You can construct a concrete instance of `ReportDeliveryInfoResponsePtrInput` via:
//
//          ReportDeliveryInfoResponseArgs{...}
//
//  or:
//
//          nil
type ReportDeliveryInfoResponsePtrInput interface {
	pulumi.Input

	ToReportDeliveryInfoResponsePtrOutput() ReportDeliveryInfoResponsePtrOutput
	ToReportDeliveryInfoResponsePtrOutputWithContext(context.Context) ReportDeliveryInfoResponsePtrOutput
}

type reportDeliveryInfoResponsePtrType ReportDeliveryInfoResponseArgs

func ReportDeliveryInfoResponsePtr(v *ReportDeliveryInfoResponseArgs) ReportDeliveryInfoResponsePtrInput {
	return (*reportDeliveryInfoResponsePtrType)(v)
}

func (*reportDeliveryInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDeliveryInfoResponse)(nil)).Elem()
}

func (i *reportDeliveryInfoResponsePtrType) ToReportDeliveryInfoResponsePtrOutput() ReportDeliveryInfoResponsePtrOutput {
	return i.ToReportDeliveryInfoResponsePtrOutputWithContext(context.Background())
}

func (i *reportDeliveryInfoResponsePtrType) ToReportDeliveryInfoResponsePtrOutputWithContext(ctx context.Context) ReportDeliveryInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDeliveryInfoResponsePtrOutput)
}

// The delivery information associated with a report.
type ReportDeliveryInfoResponseOutput struct{ *pulumi.OutputState }

func (ReportDeliveryInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDeliveryInfoResponse)(nil)).Elem()
}

func (o ReportDeliveryInfoResponseOutput) ToReportDeliveryInfoResponseOutput() ReportDeliveryInfoResponseOutput {
	return o
}

func (o ReportDeliveryInfoResponseOutput) ToReportDeliveryInfoResponseOutputWithContext(ctx context.Context) ReportDeliveryInfoResponseOutput {
	return o
}

func (o ReportDeliveryInfoResponseOutput) ToReportDeliveryInfoResponsePtrOutput() ReportDeliveryInfoResponsePtrOutput {
	return o.ToReportDeliveryInfoResponsePtrOutputWithContext(context.Background())
}

func (o ReportDeliveryInfoResponseOutput) ToReportDeliveryInfoResponsePtrOutputWithContext(ctx context.Context) ReportDeliveryInfoResponsePtrOutput {
	return o.ApplyT(func(v ReportDeliveryInfoResponse) *ReportDeliveryInfoResponse {
		return &v
	}).(ReportDeliveryInfoResponsePtrOutput)
}

// Has destination for the report being delivered.
func (o ReportDeliveryInfoResponseOutput) Destination() ReportDeliveryDestinationResponseOutput {
	return o.ApplyT(func(v ReportDeliveryInfoResponse) ReportDeliveryDestinationResponse { return v.Destination }).(ReportDeliveryDestinationResponseOutput)
}

type ReportDeliveryInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportDeliveryInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDeliveryInfoResponse)(nil)).Elem()
}

func (o ReportDeliveryInfoResponsePtrOutput) ToReportDeliveryInfoResponsePtrOutput() ReportDeliveryInfoResponsePtrOutput {
	return o
}

func (o ReportDeliveryInfoResponsePtrOutput) ToReportDeliveryInfoResponsePtrOutputWithContext(ctx context.Context) ReportDeliveryInfoResponsePtrOutput {
	return o
}

func (o ReportDeliveryInfoResponsePtrOutput) Elem() ReportDeliveryInfoResponseOutput {
	return o.ApplyT(func(v *ReportDeliveryInfoResponse) ReportDeliveryInfoResponse { return *v }).(ReportDeliveryInfoResponseOutput)
}

// Has destination for the report being delivered.
func (o ReportDeliveryInfoResponsePtrOutput) Destination() ReportDeliveryDestinationResponsePtrOutput {
	return o.ApplyT(func(v *ReportDeliveryInfoResponse) *ReportDeliveryDestinationResponse {
		if v == nil {
			return nil
		}
		return &v.Destination
	}).(ReportDeliveryDestinationResponsePtrOutput)
}

// The filter expression to be used in the report.
type ReportFilter struct {
	// The logical "AND" expression. Must have at least 2 items.
	And []ReportFilter `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimension *ReportComparisonExpression `pulumi:"dimension"`
	// The logical "NOT" expression.
	Not *ReportFilter `pulumi:"not"`
	// The logical "OR" expression. Must have at least 2 items.
	Or []ReportFilter `pulumi:"or"`
	// Has comparison expression for a tag
	Tag *ReportComparisonExpression `pulumi:"tag"`
}

// ReportFilterInput is an input type that accepts ReportFilterArgs and ReportFilterOutput values.
// You can construct a concrete instance of `ReportFilterInput` via:
//
//          ReportFilterArgs{...}
type ReportFilterInput interface {
	pulumi.Input

	ToReportFilterOutput() ReportFilterOutput
	ToReportFilterOutputWithContext(context.Context) ReportFilterOutput
}

// The filter expression to be used in the report.
type ReportFilterArgs struct {
	// The logical "AND" expression. Must have at least 2 items.
	And ReportFilterArrayInput `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimension ReportComparisonExpressionPtrInput `pulumi:"dimension"`
	// The logical "NOT" expression.
	Not ReportFilterPtrInput `pulumi:"not"`
	// The logical "OR" expression. Must have at least 2 items.
	Or ReportFilterArrayInput `pulumi:"or"`
	// Has comparison expression for a tag
	Tag ReportComparisonExpressionPtrInput `pulumi:"tag"`
}

func (ReportFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportFilter)(nil)).Elem()
}

func (i ReportFilterArgs) ToReportFilterOutput() ReportFilterOutput {
	return i.ToReportFilterOutputWithContext(context.Background())
}

func (i ReportFilterArgs) ToReportFilterOutputWithContext(ctx context.Context) ReportFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportFilterOutput)
}

func (i ReportFilterArgs) ToReportFilterPtrOutput() ReportFilterPtrOutput {
	return i.ToReportFilterPtrOutputWithContext(context.Background())
}

func (i ReportFilterArgs) ToReportFilterPtrOutputWithContext(ctx context.Context) ReportFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportFilterOutput).ToReportFilterPtrOutputWithContext(ctx)
}

// ReportFilterPtrInput is an input type that accepts ReportFilterArgs, ReportFilterPtr and ReportFilterPtrOutput values.
// You can construct a concrete instance of `ReportFilterPtrInput` via:
//
//          ReportFilterArgs{...}
//
//  or:
//
//          nil
type ReportFilterPtrInput interface {
	pulumi.Input

	ToReportFilterPtrOutput() ReportFilterPtrOutput
	ToReportFilterPtrOutputWithContext(context.Context) ReportFilterPtrOutput
}

type reportFilterPtrType ReportFilterArgs

func ReportFilterPtr(v *ReportFilterArgs) ReportFilterPtrInput {
	return (*reportFilterPtrType)(v)
}

func (*reportFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportFilter)(nil)).Elem()
}

func (i *reportFilterPtrType) ToReportFilterPtrOutput() ReportFilterPtrOutput {
	return i.ToReportFilterPtrOutputWithContext(context.Background())
}

func (i *reportFilterPtrType) ToReportFilterPtrOutputWithContext(ctx context.Context) ReportFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportFilterPtrOutput)
}

// ReportFilterArrayInput is an input type that accepts ReportFilterArray and ReportFilterArrayOutput values.
// You can construct a concrete instance of `ReportFilterArrayInput` via:
//
//          ReportFilterArray{ ReportFilterArgs{...} }
type ReportFilterArrayInput interface {
	pulumi.Input

	ToReportFilterArrayOutput() ReportFilterArrayOutput
	ToReportFilterArrayOutputWithContext(context.Context) ReportFilterArrayOutput
}

type ReportFilterArray []ReportFilterInput

func (ReportFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportFilter)(nil)).Elem()
}

func (i ReportFilterArray) ToReportFilterArrayOutput() ReportFilterArrayOutput {
	return i.ToReportFilterArrayOutputWithContext(context.Background())
}

func (i ReportFilterArray) ToReportFilterArrayOutputWithContext(ctx context.Context) ReportFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportFilterArrayOutput)
}

// The filter expression to be used in the report.
type ReportFilterOutput struct{ *pulumi.OutputState }

func (ReportFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportFilter)(nil)).Elem()
}

func (o ReportFilterOutput) ToReportFilterOutput() ReportFilterOutput {
	return o
}

func (o ReportFilterOutput) ToReportFilterOutputWithContext(ctx context.Context) ReportFilterOutput {
	return o
}

func (o ReportFilterOutput) ToReportFilterPtrOutput() ReportFilterPtrOutput {
	return o.ToReportFilterPtrOutputWithContext(context.Background())
}

func (o ReportFilterOutput) ToReportFilterPtrOutputWithContext(ctx context.Context) ReportFilterPtrOutput {
	return o.ApplyT(func(v ReportFilter) *ReportFilter {
		return &v
	}).(ReportFilterPtrOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o ReportFilterOutput) And() ReportFilterArrayOutput {
	return o.ApplyT(func(v ReportFilter) []ReportFilter { return v.And }).(ReportFilterArrayOutput)
}

// Has comparison expression for a dimension
func (o ReportFilterOutput) Dimension() ReportComparisonExpressionPtrOutput {
	return o.ApplyT(func(v ReportFilter) *ReportComparisonExpression { return v.Dimension }).(ReportComparisonExpressionPtrOutput)
}

// The logical "NOT" expression.
func (o ReportFilterOutput) Not() ReportFilterPtrOutput {
	return o.ApplyT(func(v ReportFilter) *ReportFilter { return v.Not }).(ReportFilterPtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o ReportFilterOutput) Or() ReportFilterArrayOutput {
	return o.ApplyT(func(v ReportFilter) []ReportFilter { return v.Or }).(ReportFilterArrayOutput)
}

// Has comparison expression for a tag
func (o ReportFilterOutput) Tag() ReportComparisonExpressionPtrOutput {
	return o.ApplyT(func(v ReportFilter) *ReportComparisonExpression { return v.Tag }).(ReportComparisonExpressionPtrOutput)
}

type ReportFilterPtrOutput struct{ *pulumi.OutputState }

func (ReportFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportFilter)(nil)).Elem()
}

func (o ReportFilterPtrOutput) ToReportFilterPtrOutput() ReportFilterPtrOutput {
	return o
}

func (o ReportFilterPtrOutput) ToReportFilterPtrOutputWithContext(ctx context.Context) ReportFilterPtrOutput {
	return o
}

func (o ReportFilterPtrOutput) Elem() ReportFilterOutput {
	return o.ApplyT(func(v *ReportFilter) ReportFilter { return *v }).(ReportFilterOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o ReportFilterPtrOutput) And() ReportFilterArrayOutput {
	return o.ApplyT(func(v *ReportFilter) []ReportFilter {
		if v == nil {
			return nil
		}
		return v.And
	}).(ReportFilterArrayOutput)
}

// Has comparison expression for a dimension
func (o ReportFilterPtrOutput) Dimension() ReportComparisonExpressionPtrOutput {
	return o.ApplyT(func(v *ReportFilter) *ReportComparisonExpression {
		if v == nil {
			return nil
		}
		return v.Dimension
	}).(ReportComparisonExpressionPtrOutput)
}

// The logical "NOT" expression.
func (o ReportFilterPtrOutput) Not() ReportFilterPtrOutput {
	return o.ApplyT(func(v *ReportFilter) *ReportFilter {
		if v == nil {
			return nil
		}
		return v.Not
	}).(ReportFilterPtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o ReportFilterPtrOutput) Or() ReportFilterArrayOutput {
	return o.ApplyT(func(v *ReportFilter) []ReportFilter {
		if v == nil {
			return nil
		}
		return v.Or
	}).(ReportFilterArrayOutput)
}

// Has comparison expression for a tag
func (o ReportFilterPtrOutput) Tag() ReportComparisonExpressionPtrOutput {
	return o.ApplyT(func(v *ReportFilter) *ReportComparisonExpression {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(ReportComparisonExpressionPtrOutput)
}

type ReportFilterArrayOutput struct{ *pulumi.OutputState }

func (ReportFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportFilter)(nil)).Elem()
}

func (o ReportFilterArrayOutput) ToReportFilterArrayOutput() ReportFilterArrayOutput {
	return o
}

func (o ReportFilterArrayOutput) ToReportFilterArrayOutputWithContext(ctx context.Context) ReportFilterArrayOutput {
	return o
}

func (o ReportFilterArrayOutput) Index(i pulumi.IntInput) ReportFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportFilter {
		return vs[0].([]ReportFilter)[vs[1].(int)]
	}).(ReportFilterOutput)
}

// The filter expression to be used in the report.
type ReportFilterResponse struct {
	// The logical "AND" expression. Must have at least 2 items.
	And []ReportFilterResponse `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimension *ReportComparisonExpressionResponse `pulumi:"dimension"`
	// The logical "NOT" expression.
	Not *ReportFilterResponse `pulumi:"not"`
	// The logical "OR" expression. Must have at least 2 items.
	Or []ReportFilterResponse `pulumi:"or"`
	// Has comparison expression for a tag
	Tag *ReportComparisonExpressionResponse `pulumi:"tag"`
}

// ReportFilterResponseInput is an input type that accepts ReportFilterResponseArgs and ReportFilterResponseOutput values.
// You can construct a concrete instance of `ReportFilterResponseInput` via:
//
//          ReportFilterResponseArgs{...}
type ReportFilterResponseInput interface {
	pulumi.Input

	ToReportFilterResponseOutput() ReportFilterResponseOutput
	ToReportFilterResponseOutputWithContext(context.Context) ReportFilterResponseOutput
}

// The filter expression to be used in the report.
type ReportFilterResponseArgs struct {
	// The logical "AND" expression. Must have at least 2 items.
	And ReportFilterResponseArrayInput `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimension ReportComparisonExpressionResponsePtrInput `pulumi:"dimension"`
	// The logical "NOT" expression.
	Not ReportFilterResponsePtrInput `pulumi:"not"`
	// The logical "OR" expression. Must have at least 2 items.
	Or ReportFilterResponseArrayInput `pulumi:"or"`
	// Has comparison expression for a tag
	Tag ReportComparisonExpressionResponsePtrInput `pulumi:"tag"`
}

func (ReportFilterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportFilterResponse)(nil)).Elem()
}

func (i ReportFilterResponseArgs) ToReportFilterResponseOutput() ReportFilterResponseOutput {
	return i.ToReportFilterResponseOutputWithContext(context.Background())
}

func (i ReportFilterResponseArgs) ToReportFilterResponseOutputWithContext(ctx context.Context) ReportFilterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportFilterResponseOutput)
}

func (i ReportFilterResponseArgs) ToReportFilterResponsePtrOutput() ReportFilterResponsePtrOutput {
	return i.ToReportFilterResponsePtrOutputWithContext(context.Background())
}

func (i ReportFilterResponseArgs) ToReportFilterResponsePtrOutputWithContext(ctx context.Context) ReportFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportFilterResponseOutput).ToReportFilterResponsePtrOutputWithContext(ctx)
}

// ReportFilterResponsePtrInput is an input type that accepts ReportFilterResponseArgs, ReportFilterResponsePtr and ReportFilterResponsePtrOutput values.
// You can construct a concrete instance of `ReportFilterResponsePtrInput` via:
//
//          ReportFilterResponseArgs{...}
//
//  or:
//
//          nil
type ReportFilterResponsePtrInput interface {
	pulumi.Input

	ToReportFilterResponsePtrOutput() ReportFilterResponsePtrOutput
	ToReportFilterResponsePtrOutputWithContext(context.Context) ReportFilterResponsePtrOutput
}

type reportFilterResponsePtrType ReportFilterResponseArgs

func ReportFilterResponsePtr(v *ReportFilterResponseArgs) ReportFilterResponsePtrInput {
	return (*reportFilterResponsePtrType)(v)
}

func (*reportFilterResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportFilterResponse)(nil)).Elem()
}

func (i *reportFilterResponsePtrType) ToReportFilterResponsePtrOutput() ReportFilterResponsePtrOutput {
	return i.ToReportFilterResponsePtrOutputWithContext(context.Background())
}

func (i *reportFilterResponsePtrType) ToReportFilterResponsePtrOutputWithContext(ctx context.Context) ReportFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportFilterResponsePtrOutput)
}

// ReportFilterResponseArrayInput is an input type that accepts ReportFilterResponseArray and ReportFilterResponseArrayOutput values.
// You can construct a concrete instance of `ReportFilterResponseArrayInput` via:
//
//          ReportFilterResponseArray{ ReportFilterResponseArgs{...} }
type ReportFilterResponseArrayInput interface {
	pulumi.Input

	ToReportFilterResponseArrayOutput() ReportFilterResponseArrayOutput
	ToReportFilterResponseArrayOutputWithContext(context.Context) ReportFilterResponseArrayOutput
}

type ReportFilterResponseArray []ReportFilterResponseInput

func (ReportFilterResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportFilterResponse)(nil)).Elem()
}

func (i ReportFilterResponseArray) ToReportFilterResponseArrayOutput() ReportFilterResponseArrayOutput {
	return i.ToReportFilterResponseArrayOutputWithContext(context.Background())
}

func (i ReportFilterResponseArray) ToReportFilterResponseArrayOutputWithContext(ctx context.Context) ReportFilterResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportFilterResponseArrayOutput)
}

// The filter expression to be used in the report.
type ReportFilterResponseOutput struct{ *pulumi.OutputState }

func (ReportFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportFilterResponse)(nil)).Elem()
}

func (o ReportFilterResponseOutput) ToReportFilterResponseOutput() ReportFilterResponseOutput {
	return o
}

func (o ReportFilterResponseOutput) ToReportFilterResponseOutputWithContext(ctx context.Context) ReportFilterResponseOutput {
	return o
}

func (o ReportFilterResponseOutput) ToReportFilterResponsePtrOutput() ReportFilterResponsePtrOutput {
	return o.ToReportFilterResponsePtrOutputWithContext(context.Background())
}

func (o ReportFilterResponseOutput) ToReportFilterResponsePtrOutputWithContext(ctx context.Context) ReportFilterResponsePtrOutput {
	return o.ApplyT(func(v ReportFilterResponse) *ReportFilterResponse {
		return &v
	}).(ReportFilterResponsePtrOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o ReportFilterResponseOutput) And() ReportFilterResponseArrayOutput {
	return o.ApplyT(func(v ReportFilterResponse) []ReportFilterResponse { return v.And }).(ReportFilterResponseArrayOutput)
}

// Has comparison expression for a dimension
func (o ReportFilterResponseOutput) Dimension() ReportComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v ReportFilterResponse) *ReportComparisonExpressionResponse { return v.Dimension }).(ReportComparisonExpressionResponsePtrOutput)
}

// The logical "NOT" expression.
func (o ReportFilterResponseOutput) Not() ReportFilterResponsePtrOutput {
	return o.ApplyT(func(v ReportFilterResponse) *ReportFilterResponse { return v.Not }).(ReportFilterResponsePtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o ReportFilterResponseOutput) Or() ReportFilterResponseArrayOutput {
	return o.ApplyT(func(v ReportFilterResponse) []ReportFilterResponse { return v.Or }).(ReportFilterResponseArrayOutput)
}

// Has comparison expression for a tag
func (o ReportFilterResponseOutput) Tag() ReportComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v ReportFilterResponse) *ReportComparisonExpressionResponse { return v.Tag }).(ReportComparisonExpressionResponsePtrOutput)
}

type ReportFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportFilterResponse)(nil)).Elem()
}

func (o ReportFilterResponsePtrOutput) ToReportFilterResponsePtrOutput() ReportFilterResponsePtrOutput {
	return o
}

func (o ReportFilterResponsePtrOutput) ToReportFilterResponsePtrOutputWithContext(ctx context.Context) ReportFilterResponsePtrOutput {
	return o
}

func (o ReportFilterResponsePtrOutput) Elem() ReportFilterResponseOutput {
	return o.ApplyT(func(v *ReportFilterResponse) ReportFilterResponse { return *v }).(ReportFilterResponseOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o ReportFilterResponsePtrOutput) And() ReportFilterResponseArrayOutput {
	return o.ApplyT(func(v *ReportFilterResponse) []ReportFilterResponse {
		if v == nil {
			return nil
		}
		return v.And
	}).(ReportFilterResponseArrayOutput)
}

// Has comparison expression for a dimension
func (o ReportFilterResponsePtrOutput) Dimension() ReportComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *ReportFilterResponse) *ReportComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.Dimension
	}).(ReportComparisonExpressionResponsePtrOutput)
}

// The logical "NOT" expression.
func (o ReportFilterResponsePtrOutput) Not() ReportFilterResponsePtrOutput {
	return o.ApplyT(func(v *ReportFilterResponse) *ReportFilterResponse {
		if v == nil {
			return nil
		}
		return v.Not
	}).(ReportFilterResponsePtrOutput)
}

// The logical "OR" expression. Must have at least 2 items.
func (o ReportFilterResponsePtrOutput) Or() ReportFilterResponseArrayOutput {
	return o.ApplyT(func(v *ReportFilterResponse) []ReportFilterResponse {
		if v == nil {
			return nil
		}
		return v.Or
	}).(ReportFilterResponseArrayOutput)
}

// Has comparison expression for a tag
func (o ReportFilterResponsePtrOutput) Tag() ReportComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *ReportFilterResponse) *ReportComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(ReportComparisonExpressionResponsePtrOutput)
}

type ReportFilterResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportFilterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportFilterResponse)(nil)).Elem()
}

func (o ReportFilterResponseArrayOutput) ToReportFilterResponseArrayOutput() ReportFilterResponseArrayOutput {
	return o
}

func (o ReportFilterResponseArrayOutput) ToReportFilterResponseArrayOutputWithContext(ctx context.Context) ReportFilterResponseArrayOutput {
	return o
}

func (o ReportFilterResponseArrayOutput) Index(i pulumi.IntInput) ReportFilterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportFilterResponse {
		return vs[0].([]ReportFilterResponse)[vs[1].(int)]
	}).(ReportFilterResponseOutput)
}

// The group by expression to be used in the report.
type ReportGrouping struct {
	// The name of the column to group.
	Name string `pulumi:"name"`
	// Has type of the column to group.
	Type string `pulumi:"type"`
}

// ReportGroupingInput is an input type that accepts ReportGroupingArgs and ReportGroupingOutput values.
// You can construct a concrete instance of `ReportGroupingInput` via:
//
//          ReportGroupingArgs{...}
type ReportGroupingInput interface {
	pulumi.Input

	ToReportGroupingOutput() ReportGroupingOutput
	ToReportGroupingOutputWithContext(context.Context) ReportGroupingOutput
}

// The group by expression to be used in the report.
type ReportGroupingArgs struct {
	// The name of the column to group.
	Name pulumi.StringInput `pulumi:"name"`
	// Has type of the column to group.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ReportGroupingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportGrouping)(nil)).Elem()
}

func (i ReportGroupingArgs) ToReportGroupingOutput() ReportGroupingOutput {
	return i.ToReportGroupingOutputWithContext(context.Background())
}

func (i ReportGroupingArgs) ToReportGroupingOutputWithContext(ctx context.Context) ReportGroupingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportGroupingOutput)
}

// ReportGroupingArrayInput is an input type that accepts ReportGroupingArray and ReportGroupingArrayOutput values.
// You can construct a concrete instance of `ReportGroupingArrayInput` via:
//
//          ReportGroupingArray{ ReportGroupingArgs{...} }
type ReportGroupingArrayInput interface {
	pulumi.Input

	ToReportGroupingArrayOutput() ReportGroupingArrayOutput
	ToReportGroupingArrayOutputWithContext(context.Context) ReportGroupingArrayOutput
}

type ReportGroupingArray []ReportGroupingInput

func (ReportGroupingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportGrouping)(nil)).Elem()
}

func (i ReportGroupingArray) ToReportGroupingArrayOutput() ReportGroupingArrayOutput {
	return i.ToReportGroupingArrayOutputWithContext(context.Background())
}

func (i ReportGroupingArray) ToReportGroupingArrayOutputWithContext(ctx context.Context) ReportGroupingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportGroupingArrayOutput)
}

// The group by expression to be used in the report.
type ReportGroupingOutput struct{ *pulumi.OutputState }

func (ReportGroupingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportGrouping)(nil)).Elem()
}

func (o ReportGroupingOutput) ToReportGroupingOutput() ReportGroupingOutput {
	return o
}

func (o ReportGroupingOutput) ToReportGroupingOutputWithContext(ctx context.Context) ReportGroupingOutput {
	return o
}

// The name of the column to group.
func (o ReportGroupingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportGrouping) string { return v.Name }).(pulumi.StringOutput)
}

// Has type of the column to group.
func (o ReportGroupingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReportGrouping) string { return v.Type }).(pulumi.StringOutput)
}

type ReportGroupingArrayOutput struct{ *pulumi.OutputState }

func (ReportGroupingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportGrouping)(nil)).Elem()
}

func (o ReportGroupingArrayOutput) ToReportGroupingArrayOutput() ReportGroupingArrayOutput {
	return o
}

func (o ReportGroupingArrayOutput) ToReportGroupingArrayOutputWithContext(ctx context.Context) ReportGroupingArrayOutput {
	return o
}

func (o ReportGroupingArrayOutput) Index(i pulumi.IntInput) ReportGroupingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportGrouping {
		return vs[0].([]ReportGrouping)[vs[1].(int)]
	}).(ReportGroupingOutput)
}

// The group by expression to be used in the report.
type ReportGroupingResponse struct {
	// The name of the column to group.
	Name string `pulumi:"name"`
	// Has type of the column to group.
	Type string `pulumi:"type"`
}

// ReportGroupingResponseInput is an input type that accepts ReportGroupingResponseArgs and ReportGroupingResponseOutput values.
// You can construct a concrete instance of `ReportGroupingResponseInput` via:
//
//          ReportGroupingResponseArgs{...}
type ReportGroupingResponseInput interface {
	pulumi.Input

	ToReportGroupingResponseOutput() ReportGroupingResponseOutput
	ToReportGroupingResponseOutputWithContext(context.Context) ReportGroupingResponseOutput
}

// The group by expression to be used in the report.
type ReportGroupingResponseArgs struct {
	// The name of the column to group.
	Name pulumi.StringInput `pulumi:"name"`
	// Has type of the column to group.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ReportGroupingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportGroupingResponse)(nil)).Elem()
}

func (i ReportGroupingResponseArgs) ToReportGroupingResponseOutput() ReportGroupingResponseOutput {
	return i.ToReportGroupingResponseOutputWithContext(context.Background())
}

func (i ReportGroupingResponseArgs) ToReportGroupingResponseOutputWithContext(ctx context.Context) ReportGroupingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportGroupingResponseOutput)
}

// ReportGroupingResponseArrayInput is an input type that accepts ReportGroupingResponseArray and ReportGroupingResponseArrayOutput values.
// You can construct a concrete instance of `ReportGroupingResponseArrayInput` via:
//
//          ReportGroupingResponseArray{ ReportGroupingResponseArgs{...} }
type ReportGroupingResponseArrayInput interface {
	pulumi.Input

	ToReportGroupingResponseArrayOutput() ReportGroupingResponseArrayOutput
	ToReportGroupingResponseArrayOutputWithContext(context.Context) ReportGroupingResponseArrayOutput
}

type ReportGroupingResponseArray []ReportGroupingResponseInput

func (ReportGroupingResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportGroupingResponse)(nil)).Elem()
}

func (i ReportGroupingResponseArray) ToReportGroupingResponseArrayOutput() ReportGroupingResponseArrayOutput {
	return i.ToReportGroupingResponseArrayOutputWithContext(context.Background())
}

func (i ReportGroupingResponseArray) ToReportGroupingResponseArrayOutputWithContext(ctx context.Context) ReportGroupingResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportGroupingResponseArrayOutput)
}

// The group by expression to be used in the report.
type ReportGroupingResponseOutput struct{ *pulumi.OutputState }

func (ReportGroupingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportGroupingResponse)(nil)).Elem()
}

func (o ReportGroupingResponseOutput) ToReportGroupingResponseOutput() ReportGroupingResponseOutput {
	return o
}

func (o ReportGroupingResponseOutput) ToReportGroupingResponseOutputWithContext(ctx context.Context) ReportGroupingResponseOutput {
	return o
}

// The name of the column to group.
func (o ReportGroupingResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReportGroupingResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Has type of the column to group.
func (o ReportGroupingResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReportGroupingResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ReportGroupingResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportGroupingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportGroupingResponse)(nil)).Elem()
}

func (o ReportGroupingResponseArrayOutput) ToReportGroupingResponseArrayOutput() ReportGroupingResponseArrayOutput {
	return o
}

func (o ReportGroupingResponseArrayOutput) ToReportGroupingResponseArrayOutputWithContext(ctx context.Context) ReportGroupingResponseArrayOutput {
	return o
}

func (o ReportGroupingResponseArrayOutput) Index(i pulumi.IntInput) ReportGroupingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportGroupingResponse {
		return vs[0].([]ReportGroupingResponse)[vs[1].(int)]
	}).(ReportGroupingResponseOutput)
}

// The start and end date for recurrence schedule.
type ReportRecurrencePeriod struct {
	// The start date of recurrence.
	From string `pulumi:"from"`
	// The end date of recurrence.
	To *string `pulumi:"to"`
}

// ReportRecurrencePeriodInput is an input type that accepts ReportRecurrencePeriodArgs and ReportRecurrencePeriodOutput values.
// You can construct a concrete instance of `ReportRecurrencePeriodInput` via:
//
//          ReportRecurrencePeriodArgs{...}
type ReportRecurrencePeriodInput interface {
	pulumi.Input

	ToReportRecurrencePeriodOutput() ReportRecurrencePeriodOutput
	ToReportRecurrencePeriodOutputWithContext(context.Context) ReportRecurrencePeriodOutput
}

// The start and end date for recurrence schedule.
type ReportRecurrencePeriodArgs struct {
	// The start date of recurrence.
	From pulumi.StringInput `pulumi:"from"`
	// The end date of recurrence.
	To pulumi.StringPtrInput `pulumi:"to"`
}

func (ReportRecurrencePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportRecurrencePeriod)(nil)).Elem()
}

func (i ReportRecurrencePeriodArgs) ToReportRecurrencePeriodOutput() ReportRecurrencePeriodOutput {
	return i.ToReportRecurrencePeriodOutputWithContext(context.Background())
}

func (i ReportRecurrencePeriodArgs) ToReportRecurrencePeriodOutputWithContext(ctx context.Context) ReportRecurrencePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportRecurrencePeriodOutput)
}

func (i ReportRecurrencePeriodArgs) ToReportRecurrencePeriodPtrOutput() ReportRecurrencePeriodPtrOutput {
	return i.ToReportRecurrencePeriodPtrOutputWithContext(context.Background())
}

func (i ReportRecurrencePeriodArgs) ToReportRecurrencePeriodPtrOutputWithContext(ctx context.Context) ReportRecurrencePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportRecurrencePeriodOutput).ToReportRecurrencePeriodPtrOutputWithContext(ctx)
}

// ReportRecurrencePeriodPtrInput is an input type that accepts ReportRecurrencePeriodArgs, ReportRecurrencePeriodPtr and ReportRecurrencePeriodPtrOutput values.
// You can construct a concrete instance of `ReportRecurrencePeriodPtrInput` via:
//
//          ReportRecurrencePeriodArgs{...}
//
//  or:
//
//          nil
type ReportRecurrencePeriodPtrInput interface {
	pulumi.Input

	ToReportRecurrencePeriodPtrOutput() ReportRecurrencePeriodPtrOutput
	ToReportRecurrencePeriodPtrOutputWithContext(context.Context) ReportRecurrencePeriodPtrOutput
}

type reportRecurrencePeriodPtrType ReportRecurrencePeriodArgs

func ReportRecurrencePeriodPtr(v *ReportRecurrencePeriodArgs) ReportRecurrencePeriodPtrInput {
	return (*reportRecurrencePeriodPtrType)(v)
}

func (*reportRecurrencePeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportRecurrencePeriod)(nil)).Elem()
}

func (i *reportRecurrencePeriodPtrType) ToReportRecurrencePeriodPtrOutput() ReportRecurrencePeriodPtrOutput {
	return i.ToReportRecurrencePeriodPtrOutputWithContext(context.Background())
}

func (i *reportRecurrencePeriodPtrType) ToReportRecurrencePeriodPtrOutputWithContext(ctx context.Context) ReportRecurrencePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportRecurrencePeriodPtrOutput)
}

// The start and end date for recurrence schedule.
type ReportRecurrencePeriodOutput struct{ *pulumi.OutputState }

func (ReportRecurrencePeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportRecurrencePeriod)(nil)).Elem()
}

func (o ReportRecurrencePeriodOutput) ToReportRecurrencePeriodOutput() ReportRecurrencePeriodOutput {
	return o
}

func (o ReportRecurrencePeriodOutput) ToReportRecurrencePeriodOutputWithContext(ctx context.Context) ReportRecurrencePeriodOutput {
	return o
}

func (o ReportRecurrencePeriodOutput) ToReportRecurrencePeriodPtrOutput() ReportRecurrencePeriodPtrOutput {
	return o.ToReportRecurrencePeriodPtrOutputWithContext(context.Background())
}

func (o ReportRecurrencePeriodOutput) ToReportRecurrencePeriodPtrOutputWithContext(ctx context.Context) ReportRecurrencePeriodPtrOutput {
	return o.ApplyT(func(v ReportRecurrencePeriod) *ReportRecurrencePeriod {
		return &v
	}).(ReportRecurrencePeriodPtrOutput)
}

// The start date of recurrence.
func (o ReportRecurrencePeriodOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ReportRecurrencePeriod) string { return v.From }).(pulumi.StringOutput)
}

// The end date of recurrence.
func (o ReportRecurrencePeriodOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportRecurrencePeriod) *string { return v.To }).(pulumi.StringPtrOutput)
}

type ReportRecurrencePeriodPtrOutput struct{ *pulumi.OutputState }

func (ReportRecurrencePeriodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportRecurrencePeriod)(nil)).Elem()
}

func (o ReportRecurrencePeriodPtrOutput) ToReportRecurrencePeriodPtrOutput() ReportRecurrencePeriodPtrOutput {
	return o
}

func (o ReportRecurrencePeriodPtrOutput) ToReportRecurrencePeriodPtrOutputWithContext(ctx context.Context) ReportRecurrencePeriodPtrOutput {
	return o
}

func (o ReportRecurrencePeriodPtrOutput) Elem() ReportRecurrencePeriodOutput {
	return o.ApplyT(func(v *ReportRecurrencePeriod) ReportRecurrencePeriod { return *v }).(ReportRecurrencePeriodOutput)
}

// The start date of recurrence.
func (o ReportRecurrencePeriodPtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportRecurrencePeriod) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date of recurrence.
func (o ReportRecurrencePeriodPtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportRecurrencePeriod) *string {
		if v == nil {
			return nil
		}
		return v.To
	}).(pulumi.StringPtrOutput)
}

// The start and end date for recurrence schedule.
type ReportRecurrencePeriodResponse struct {
	// The start date of recurrence.
	From string `pulumi:"from"`
	// The end date of recurrence.
	To *string `pulumi:"to"`
}

// ReportRecurrencePeriodResponseInput is an input type that accepts ReportRecurrencePeriodResponseArgs and ReportRecurrencePeriodResponseOutput values.
// You can construct a concrete instance of `ReportRecurrencePeriodResponseInput` via:
//
//          ReportRecurrencePeriodResponseArgs{...}
type ReportRecurrencePeriodResponseInput interface {
	pulumi.Input

	ToReportRecurrencePeriodResponseOutput() ReportRecurrencePeriodResponseOutput
	ToReportRecurrencePeriodResponseOutputWithContext(context.Context) ReportRecurrencePeriodResponseOutput
}

// The start and end date for recurrence schedule.
type ReportRecurrencePeriodResponseArgs struct {
	// The start date of recurrence.
	From pulumi.StringInput `pulumi:"from"`
	// The end date of recurrence.
	To pulumi.StringPtrInput `pulumi:"to"`
}

func (ReportRecurrencePeriodResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportRecurrencePeriodResponse)(nil)).Elem()
}

func (i ReportRecurrencePeriodResponseArgs) ToReportRecurrencePeriodResponseOutput() ReportRecurrencePeriodResponseOutput {
	return i.ToReportRecurrencePeriodResponseOutputWithContext(context.Background())
}

func (i ReportRecurrencePeriodResponseArgs) ToReportRecurrencePeriodResponseOutputWithContext(ctx context.Context) ReportRecurrencePeriodResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportRecurrencePeriodResponseOutput)
}

func (i ReportRecurrencePeriodResponseArgs) ToReportRecurrencePeriodResponsePtrOutput() ReportRecurrencePeriodResponsePtrOutput {
	return i.ToReportRecurrencePeriodResponsePtrOutputWithContext(context.Background())
}

func (i ReportRecurrencePeriodResponseArgs) ToReportRecurrencePeriodResponsePtrOutputWithContext(ctx context.Context) ReportRecurrencePeriodResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportRecurrencePeriodResponseOutput).ToReportRecurrencePeriodResponsePtrOutputWithContext(ctx)
}

// ReportRecurrencePeriodResponsePtrInput is an input type that accepts ReportRecurrencePeriodResponseArgs, ReportRecurrencePeriodResponsePtr and ReportRecurrencePeriodResponsePtrOutput values.
// You can construct a concrete instance of `ReportRecurrencePeriodResponsePtrInput` via:
//
//          ReportRecurrencePeriodResponseArgs{...}
//
//  or:
//
//          nil
type ReportRecurrencePeriodResponsePtrInput interface {
	pulumi.Input

	ToReportRecurrencePeriodResponsePtrOutput() ReportRecurrencePeriodResponsePtrOutput
	ToReportRecurrencePeriodResponsePtrOutputWithContext(context.Context) ReportRecurrencePeriodResponsePtrOutput
}

type reportRecurrencePeriodResponsePtrType ReportRecurrencePeriodResponseArgs

func ReportRecurrencePeriodResponsePtr(v *ReportRecurrencePeriodResponseArgs) ReportRecurrencePeriodResponsePtrInput {
	return (*reportRecurrencePeriodResponsePtrType)(v)
}

func (*reportRecurrencePeriodResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportRecurrencePeriodResponse)(nil)).Elem()
}

func (i *reportRecurrencePeriodResponsePtrType) ToReportRecurrencePeriodResponsePtrOutput() ReportRecurrencePeriodResponsePtrOutput {
	return i.ToReportRecurrencePeriodResponsePtrOutputWithContext(context.Background())
}

func (i *reportRecurrencePeriodResponsePtrType) ToReportRecurrencePeriodResponsePtrOutputWithContext(ctx context.Context) ReportRecurrencePeriodResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportRecurrencePeriodResponsePtrOutput)
}

// The start and end date for recurrence schedule.
type ReportRecurrencePeriodResponseOutput struct{ *pulumi.OutputState }

func (ReportRecurrencePeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportRecurrencePeriodResponse)(nil)).Elem()
}

func (o ReportRecurrencePeriodResponseOutput) ToReportRecurrencePeriodResponseOutput() ReportRecurrencePeriodResponseOutput {
	return o
}

func (o ReportRecurrencePeriodResponseOutput) ToReportRecurrencePeriodResponseOutputWithContext(ctx context.Context) ReportRecurrencePeriodResponseOutput {
	return o
}

func (o ReportRecurrencePeriodResponseOutput) ToReportRecurrencePeriodResponsePtrOutput() ReportRecurrencePeriodResponsePtrOutput {
	return o.ToReportRecurrencePeriodResponsePtrOutputWithContext(context.Background())
}

func (o ReportRecurrencePeriodResponseOutput) ToReportRecurrencePeriodResponsePtrOutputWithContext(ctx context.Context) ReportRecurrencePeriodResponsePtrOutput {
	return o.ApplyT(func(v ReportRecurrencePeriodResponse) *ReportRecurrencePeriodResponse {
		return &v
	}).(ReportRecurrencePeriodResponsePtrOutput)
}

// The start date of recurrence.
func (o ReportRecurrencePeriodResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ReportRecurrencePeriodResponse) string { return v.From }).(pulumi.StringOutput)
}

// The end date of recurrence.
func (o ReportRecurrencePeriodResponseOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportRecurrencePeriodResponse) *string { return v.To }).(pulumi.StringPtrOutput)
}

type ReportRecurrencePeriodResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportRecurrencePeriodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportRecurrencePeriodResponse)(nil)).Elem()
}

func (o ReportRecurrencePeriodResponsePtrOutput) ToReportRecurrencePeriodResponsePtrOutput() ReportRecurrencePeriodResponsePtrOutput {
	return o
}

func (o ReportRecurrencePeriodResponsePtrOutput) ToReportRecurrencePeriodResponsePtrOutputWithContext(ctx context.Context) ReportRecurrencePeriodResponsePtrOutput {
	return o
}

func (o ReportRecurrencePeriodResponsePtrOutput) Elem() ReportRecurrencePeriodResponseOutput {
	return o.ApplyT(func(v *ReportRecurrencePeriodResponse) ReportRecurrencePeriodResponse { return *v }).(ReportRecurrencePeriodResponseOutput)
}

// The start date of recurrence.
func (o ReportRecurrencePeriodResponsePtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportRecurrencePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date of recurrence.
func (o ReportRecurrencePeriodResponsePtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportRecurrencePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return v.To
	}).(pulumi.StringPtrOutput)
}

// The schedule associated with a report.
type ReportSchedule struct {
	// The schedule recurrence.
	Recurrence string `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod *ReportRecurrencePeriod `pulumi:"recurrencePeriod"`
	// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
	Status *string `pulumi:"status"`
}

// ReportScheduleInput is an input type that accepts ReportScheduleArgs and ReportScheduleOutput values.
// You can construct a concrete instance of `ReportScheduleInput` via:
//
//          ReportScheduleArgs{...}
type ReportScheduleInput interface {
	pulumi.Input

	ToReportScheduleOutput() ReportScheduleOutput
	ToReportScheduleOutputWithContext(context.Context) ReportScheduleOutput
}

// The schedule associated with a report.
type ReportScheduleArgs struct {
	// The schedule recurrence.
	Recurrence pulumi.StringInput `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod ReportRecurrencePeriodPtrInput `pulumi:"recurrencePeriod"`
	// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ReportScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportSchedule)(nil)).Elem()
}

func (i ReportScheduleArgs) ToReportScheduleOutput() ReportScheduleOutput {
	return i.ToReportScheduleOutputWithContext(context.Background())
}

func (i ReportScheduleArgs) ToReportScheduleOutputWithContext(ctx context.Context) ReportScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportScheduleOutput)
}

func (i ReportScheduleArgs) ToReportSchedulePtrOutput() ReportSchedulePtrOutput {
	return i.ToReportSchedulePtrOutputWithContext(context.Background())
}

func (i ReportScheduleArgs) ToReportSchedulePtrOutputWithContext(ctx context.Context) ReportSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportScheduleOutput).ToReportSchedulePtrOutputWithContext(ctx)
}

// ReportSchedulePtrInput is an input type that accepts ReportScheduleArgs, ReportSchedulePtr and ReportSchedulePtrOutput values.
// You can construct a concrete instance of `ReportSchedulePtrInput` via:
//
//          ReportScheduleArgs{...}
//
//  or:
//
//          nil
type ReportSchedulePtrInput interface {
	pulumi.Input

	ToReportSchedulePtrOutput() ReportSchedulePtrOutput
	ToReportSchedulePtrOutputWithContext(context.Context) ReportSchedulePtrOutput
}

type reportSchedulePtrType ReportScheduleArgs

func ReportSchedulePtr(v *ReportScheduleArgs) ReportSchedulePtrInput {
	return (*reportSchedulePtrType)(v)
}

func (*reportSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportSchedule)(nil)).Elem()
}

func (i *reportSchedulePtrType) ToReportSchedulePtrOutput() ReportSchedulePtrOutput {
	return i.ToReportSchedulePtrOutputWithContext(context.Background())
}

func (i *reportSchedulePtrType) ToReportSchedulePtrOutputWithContext(ctx context.Context) ReportSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportSchedulePtrOutput)
}

// The schedule associated with a report.
type ReportScheduleOutput struct{ *pulumi.OutputState }

func (ReportScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportSchedule)(nil)).Elem()
}

func (o ReportScheduleOutput) ToReportScheduleOutput() ReportScheduleOutput {
	return o
}

func (o ReportScheduleOutput) ToReportScheduleOutputWithContext(ctx context.Context) ReportScheduleOutput {
	return o
}

func (o ReportScheduleOutput) ToReportSchedulePtrOutput() ReportSchedulePtrOutput {
	return o.ToReportSchedulePtrOutputWithContext(context.Background())
}

func (o ReportScheduleOutput) ToReportSchedulePtrOutputWithContext(ctx context.Context) ReportSchedulePtrOutput {
	return o.ApplyT(func(v ReportSchedule) *ReportSchedule {
		return &v
	}).(ReportSchedulePtrOutput)
}

// The schedule recurrence.
func (o ReportScheduleOutput) Recurrence() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSchedule) string { return v.Recurrence }).(pulumi.StringOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ReportScheduleOutput) RecurrencePeriod() ReportRecurrencePeriodPtrOutput {
	return o.ApplyT(func(v ReportSchedule) *ReportRecurrencePeriod { return v.RecurrencePeriod }).(ReportRecurrencePeriodPtrOutput)
}

// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
func (o ReportScheduleOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportSchedule) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ReportSchedulePtrOutput struct{ *pulumi.OutputState }

func (ReportSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportSchedule)(nil)).Elem()
}

func (o ReportSchedulePtrOutput) ToReportSchedulePtrOutput() ReportSchedulePtrOutput {
	return o
}

func (o ReportSchedulePtrOutput) ToReportSchedulePtrOutputWithContext(ctx context.Context) ReportSchedulePtrOutput {
	return o
}

func (o ReportSchedulePtrOutput) Elem() ReportScheduleOutput {
	return o.ApplyT(func(v *ReportSchedule) ReportSchedule { return *v }).(ReportScheduleOutput)
}

// The schedule recurrence.
func (o ReportSchedulePtrOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.Recurrence
	}).(pulumi.StringPtrOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ReportSchedulePtrOutput) RecurrencePeriod() ReportRecurrencePeriodPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *ReportRecurrencePeriod {
		if v == nil {
			return nil
		}
		return v.RecurrencePeriod
	}).(ReportRecurrencePeriodPtrOutput)
}

// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
func (o ReportSchedulePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The schedule associated with a report.
type ReportScheduleResponse struct {
	// The schedule recurrence.
	Recurrence string `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod *ReportRecurrencePeriodResponse `pulumi:"recurrencePeriod"`
	// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
	Status *string `pulumi:"status"`
}

// ReportScheduleResponseInput is an input type that accepts ReportScheduleResponseArgs and ReportScheduleResponseOutput values.
// You can construct a concrete instance of `ReportScheduleResponseInput` via:
//
//          ReportScheduleResponseArgs{...}
type ReportScheduleResponseInput interface {
	pulumi.Input

	ToReportScheduleResponseOutput() ReportScheduleResponseOutput
	ToReportScheduleResponseOutputWithContext(context.Context) ReportScheduleResponseOutput
}

// The schedule associated with a report.
type ReportScheduleResponseArgs struct {
	// The schedule recurrence.
	Recurrence pulumi.StringInput `pulumi:"recurrence"`
	// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
	RecurrencePeriod ReportRecurrencePeriodResponsePtrInput `pulumi:"recurrencePeriod"`
	// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ReportScheduleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportScheduleResponse)(nil)).Elem()
}

func (i ReportScheduleResponseArgs) ToReportScheduleResponseOutput() ReportScheduleResponseOutput {
	return i.ToReportScheduleResponseOutputWithContext(context.Background())
}

func (i ReportScheduleResponseArgs) ToReportScheduleResponseOutputWithContext(ctx context.Context) ReportScheduleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportScheduleResponseOutput)
}

func (i ReportScheduleResponseArgs) ToReportScheduleResponsePtrOutput() ReportScheduleResponsePtrOutput {
	return i.ToReportScheduleResponsePtrOutputWithContext(context.Background())
}

func (i ReportScheduleResponseArgs) ToReportScheduleResponsePtrOutputWithContext(ctx context.Context) ReportScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportScheduleResponseOutput).ToReportScheduleResponsePtrOutputWithContext(ctx)
}

// ReportScheduleResponsePtrInput is an input type that accepts ReportScheduleResponseArgs, ReportScheduleResponsePtr and ReportScheduleResponsePtrOutput values.
// You can construct a concrete instance of `ReportScheduleResponsePtrInput` via:
//
//          ReportScheduleResponseArgs{...}
//
//  or:
//
//          nil
type ReportScheduleResponsePtrInput interface {
	pulumi.Input

	ToReportScheduleResponsePtrOutput() ReportScheduleResponsePtrOutput
	ToReportScheduleResponsePtrOutputWithContext(context.Context) ReportScheduleResponsePtrOutput
}

type reportScheduleResponsePtrType ReportScheduleResponseArgs

func ReportScheduleResponsePtr(v *ReportScheduleResponseArgs) ReportScheduleResponsePtrInput {
	return (*reportScheduleResponsePtrType)(v)
}

func (*reportScheduleResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportScheduleResponse)(nil)).Elem()
}

func (i *reportScheduleResponsePtrType) ToReportScheduleResponsePtrOutput() ReportScheduleResponsePtrOutput {
	return i.ToReportScheduleResponsePtrOutputWithContext(context.Background())
}

func (i *reportScheduleResponsePtrType) ToReportScheduleResponsePtrOutputWithContext(ctx context.Context) ReportScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportScheduleResponsePtrOutput)
}

// The schedule associated with a report.
type ReportScheduleResponseOutput struct{ *pulumi.OutputState }

func (ReportScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportScheduleResponse)(nil)).Elem()
}

func (o ReportScheduleResponseOutput) ToReportScheduleResponseOutput() ReportScheduleResponseOutput {
	return o
}

func (o ReportScheduleResponseOutput) ToReportScheduleResponseOutputWithContext(ctx context.Context) ReportScheduleResponseOutput {
	return o
}

func (o ReportScheduleResponseOutput) ToReportScheduleResponsePtrOutput() ReportScheduleResponsePtrOutput {
	return o.ToReportScheduleResponsePtrOutputWithContext(context.Background())
}

func (o ReportScheduleResponseOutput) ToReportScheduleResponsePtrOutputWithContext(ctx context.Context) ReportScheduleResponsePtrOutput {
	return o.ApplyT(func(v ReportScheduleResponse) *ReportScheduleResponse {
		return &v
	}).(ReportScheduleResponsePtrOutput)
}

// The schedule recurrence.
func (o ReportScheduleResponseOutput) Recurrence() pulumi.StringOutput {
	return o.ApplyT(func(v ReportScheduleResponse) string { return v.Recurrence }).(pulumi.StringOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ReportScheduleResponseOutput) RecurrencePeriod() ReportRecurrencePeriodResponsePtrOutput {
	return o.ApplyT(func(v ReportScheduleResponse) *ReportRecurrencePeriodResponse { return v.RecurrencePeriod }).(ReportRecurrencePeriodResponsePtrOutput)
}

// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
func (o ReportScheduleResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportScheduleResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ReportScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportScheduleResponse)(nil)).Elem()
}

func (o ReportScheduleResponsePtrOutput) ToReportScheduleResponsePtrOutput() ReportScheduleResponsePtrOutput {
	return o
}

func (o ReportScheduleResponsePtrOutput) ToReportScheduleResponsePtrOutputWithContext(ctx context.Context) ReportScheduleResponsePtrOutput {
	return o
}

func (o ReportScheduleResponsePtrOutput) Elem() ReportScheduleResponseOutput {
	return o.ApplyT(func(v *ReportScheduleResponse) ReportScheduleResponse { return *v }).(ReportScheduleResponseOutput)
}

// The schedule recurrence.
func (o ReportScheduleResponsePtrOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Recurrence
	}).(pulumi.StringPtrOutput)
}

// Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
func (o ReportScheduleResponsePtrOutput) RecurrencePeriod() ReportRecurrencePeriodResponsePtrOutput {
	return o.ApplyT(func(v *ReportScheduleResponse) *ReportRecurrencePeriodResponse {
		if v == nil {
			return nil
		}
		return v.RecurrencePeriod
	}).(ReportRecurrencePeriodResponsePtrOutput)
}

// The status of the schedule. Whether active or not. If inactive, the report's scheduled execution is paused.
func (o ReportScheduleResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The start and end date for pulling data for the report.
type ReportTimePeriod struct {
	// The start date to pull data from.
	From string `pulumi:"from"`
	// The end date to pull data to.
	To string `pulumi:"to"`
}

// ReportTimePeriodInput is an input type that accepts ReportTimePeriodArgs and ReportTimePeriodOutput values.
// You can construct a concrete instance of `ReportTimePeriodInput` via:
//
//          ReportTimePeriodArgs{...}
type ReportTimePeriodInput interface {
	pulumi.Input

	ToReportTimePeriodOutput() ReportTimePeriodOutput
	ToReportTimePeriodOutputWithContext(context.Context) ReportTimePeriodOutput
}

// The start and end date for pulling data for the report.
type ReportTimePeriodArgs struct {
	// The start date to pull data from.
	From pulumi.StringInput `pulumi:"from"`
	// The end date to pull data to.
	To pulumi.StringInput `pulumi:"to"`
}

func (ReportTimePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportTimePeriod)(nil)).Elem()
}

func (i ReportTimePeriodArgs) ToReportTimePeriodOutput() ReportTimePeriodOutput {
	return i.ToReportTimePeriodOutputWithContext(context.Background())
}

func (i ReportTimePeriodArgs) ToReportTimePeriodOutputWithContext(ctx context.Context) ReportTimePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportTimePeriodOutput)
}

func (i ReportTimePeriodArgs) ToReportTimePeriodPtrOutput() ReportTimePeriodPtrOutput {
	return i.ToReportTimePeriodPtrOutputWithContext(context.Background())
}

func (i ReportTimePeriodArgs) ToReportTimePeriodPtrOutputWithContext(ctx context.Context) ReportTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportTimePeriodOutput).ToReportTimePeriodPtrOutputWithContext(ctx)
}

// ReportTimePeriodPtrInput is an input type that accepts ReportTimePeriodArgs, ReportTimePeriodPtr and ReportTimePeriodPtrOutput values.
// You can construct a concrete instance of `ReportTimePeriodPtrInput` via:
//
//          ReportTimePeriodArgs{...}
//
//  or:
//
//          nil
type ReportTimePeriodPtrInput interface {
	pulumi.Input

	ToReportTimePeriodPtrOutput() ReportTimePeriodPtrOutput
	ToReportTimePeriodPtrOutputWithContext(context.Context) ReportTimePeriodPtrOutput
}

type reportTimePeriodPtrType ReportTimePeriodArgs

func ReportTimePeriodPtr(v *ReportTimePeriodArgs) ReportTimePeriodPtrInput {
	return (*reportTimePeriodPtrType)(v)
}

func (*reportTimePeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportTimePeriod)(nil)).Elem()
}

func (i *reportTimePeriodPtrType) ToReportTimePeriodPtrOutput() ReportTimePeriodPtrOutput {
	return i.ToReportTimePeriodPtrOutputWithContext(context.Background())
}

func (i *reportTimePeriodPtrType) ToReportTimePeriodPtrOutputWithContext(ctx context.Context) ReportTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportTimePeriodPtrOutput)
}

// The start and end date for pulling data for the report.
type ReportTimePeriodOutput struct{ *pulumi.OutputState }

func (ReportTimePeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportTimePeriod)(nil)).Elem()
}

func (o ReportTimePeriodOutput) ToReportTimePeriodOutput() ReportTimePeriodOutput {
	return o
}

func (o ReportTimePeriodOutput) ToReportTimePeriodOutputWithContext(ctx context.Context) ReportTimePeriodOutput {
	return o
}

func (o ReportTimePeriodOutput) ToReportTimePeriodPtrOutput() ReportTimePeriodPtrOutput {
	return o.ToReportTimePeriodPtrOutputWithContext(context.Background())
}

func (o ReportTimePeriodOutput) ToReportTimePeriodPtrOutputWithContext(ctx context.Context) ReportTimePeriodPtrOutput {
	return o.ApplyT(func(v ReportTimePeriod) *ReportTimePeriod {
		return &v
	}).(ReportTimePeriodPtrOutput)
}

// The start date to pull data from.
func (o ReportTimePeriodOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ReportTimePeriod) string { return v.From }).(pulumi.StringOutput)
}

// The end date to pull data to.
func (o ReportTimePeriodOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v ReportTimePeriod) string { return v.To }).(pulumi.StringOutput)
}

type ReportTimePeriodPtrOutput struct{ *pulumi.OutputState }

func (ReportTimePeriodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportTimePeriod)(nil)).Elem()
}

func (o ReportTimePeriodPtrOutput) ToReportTimePeriodPtrOutput() ReportTimePeriodPtrOutput {
	return o
}

func (o ReportTimePeriodPtrOutput) ToReportTimePeriodPtrOutputWithContext(ctx context.Context) ReportTimePeriodPtrOutput {
	return o
}

func (o ReportTimePeriodPtrOutput) Elem() ReportTimePeriodOutput {
	return o.ApplyT(func(v *ReportTimePeriod) ReportTimePeriod { return *v }).(ReportTimePeriodOutput)
}

// The start date to pull data from.
func (o ReportTimePeriodPtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportTimePeriod) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date to pull data to.
func (o ReportTimePeriodPtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportTimePeriod) *string {
		if v == nil {
			return nil
		}
		return &v.To
	}).(pulumi.StringPtrOutput)
}

// The start and end date for pulling data for the report.
type ReportTimePeriodResponse struct {
	// The start date to pull data from.
	From string `pulumi:"from"`
	// The end date to pull data to.
	To string `pulumi:"to"`
}

// ReportTimePeriodResponseInput is an input type that accepts ReportTimePeriodResponseArgs and ReportTimePeriodResponseOutput values.
// You can construct a concrete instance of `ReportTimePeriodResponseInput` via:
//
//          ReportTimePeriodResponseArgs{...}
type ReportTimePeriodResponseInput interface {
	pulumi.Input

	ToReportTimePeriodResponseOutput() ReportTimePeriodResponseOutput
	ToReportTimePeriodResponseOutputWithContext(context.Context) ReportTimePeriodResponseOutput
}

// The start and end date for pulling data for the report.
type ReportTimePeriodResponseArgs struct {
	// The start date to pull data from.
	From pulumi.StringInput `pulumi:"from"`
	// The end date to pull data to.
	To pulumi.StringInput `pulumi:"to"`
}

func (ReportTimePeriodResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportTimePeriodResponse)(nil)).Elem()
}

func (i ReportTimePeriodResponseArgs) ToReportTimePeriodResponseOutput() ReportTimePeriodResponseOutput {
	return i.ToReportTimePeriodResponseOutputWithContext(context.Background())
}

func (i ReportTimePeriodResponseArgs) ToReportTimePeriodResponseOutputWithContext(ctx context.Context) ReportTimePeriodResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportTimePeriodResponseOutput)
}

func (i ReportTimePeriodResponseArgs) ToReportTimePeriodResponsePtrOutput() ReportTimePeriodResponsePtrOutput {
	return i.ToReportTimePeriodResponsePtrOutputWithContext(context.Background())
}

func (i ReportTimePeriodResponseArgs) ToReportTimePeriodResponsePtrOutputWithContext(ctx context.Context) ReportTimePeriodResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportTimePeriodResponseOutput).ToReportTimePeriodResponsePtrOutputWithContext(ctx)
}

// ReportTimePeriodResponsePtrInput is an input type that accepts ReportTimePeriodResponseArgs, ReportTimePeriodResponsePtr and ReportTimePeriodResponsePtrOutput values.
// You can construct a concrete instance of `ReportTimePeriodResponsePtrInput` via:
//
//          ReportTimePeriodResponseArgs{...}
//
//  or:
//
//          nil
type ReportTimePeriodResponsePtrInput interface {
	pulumi.Input

	ToReportTimePeriodResponsePtrOutput() ReportTimePeriodResponsePtrOutput
	ToReportTimePeriodResponsePtrOutputWithContext(context.Context) ReportTimePeriodResponsePtrOutput
}

type reportTimePeriodResponsePtrType ReportTimePeriodResponseArgs

func ReportTimePeriodResponsePtr(v *ReportTimePeriodResponseArgs) ReportTimePeriodResponsePtrInput {
	return (*reportTimePeriodResponsePtrType)(v)
}

func (*reportTimePeriodResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportTimePeriodResponse)(nil)).Elem()
}

func (i *reportTimePeriodResponsePtrType) ToReportTimePeriodResponsePtrOutput() ReportTimePeriodResponsePtrOutput {
	return i.ToReportTimePeriodResponsePtrOutputWithContext(context.Background())
}

func (i *reportTimePeriodResponsePtrType) ToReportTimePeriodResponsePtrOutputWithContext(ctx context.Context) ReportTimePeriodResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportTimePeriodResponsePtrOutput)
}

// The start and end date for pulling data for the report.
type ReportTimePeriodResponseOutput struct{ *pulumi.OutputState }

func (ReportTimePeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportTimePeriodResponse)(nil)).Elem()
}

func (o ReportTimePeriodResponseOutput) ToReportTimePeriodResponseOutput() ReportTimePeriodResponseOutput {
	return o
}

func (o ReportTimePeriodResponseOutput) ToReportTimePeriodResponseOutputWithContext(ctx context.Context) ReportTimePeriodResponseOutput {
	return o
}

func (o ReportTimePeriodResponseOutput) ToReportTimePeriodResponsePtrOutput() ReportTimePeriodResponsePtrOutput {
	return o.ToReportTimePeriodResponsePtrOutputWithContext(context.Background())
}

func (o ReportTimePeriodResponseOutput) ToReportTimePeriodResponsePtrOutputWithContext(ctx context.Context) ReportTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v ReportTimePeriodResponse) *ReportTimePeriodResponse {
		return &v
	}).(ReportTimePeriodResponsePtrOutput)
}

// The start date to pull data from.
func (o ReportTimePeriodResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ReportTimePeriodResponse) string { return v.From }).(pulumi.StringOutput)
}

// The end date to pull data to.
func (o ReportTimePeriodResponseOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v ReportTimePeriodResponse) string { return v.To }).(pulumi.StringOutput)
}

type ReportTimePeriodResponsePtrOutput struct{ *pulumi.OutputState }

func (ReportTimePeriodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportTimePeriodResponse)(nil)).Elem()
}

func (o ReportTimePeriodResponsePtrOutput) ToReportTimePeriodResponsePtrOutput() ReportTimePeriodResponsePtrOutput {
	return o
}

func (o ReportTimePeriodResponsePtrOutput) ToReportTimePeriodResponsePtrOutputWithContext(ctx context.Context) ReportTimePeriodResponsePtrOutput {
	return o
}

func (o ReportTimePeriodResponsePtrOutput) Elem() ReportTimePeriodResponseOutput {
	return o.ApplyT(func(v *ReportTimePeriodResponse) ReportTimePeriodResponse { return *v }).(ReportTimePeriodResponseOutput)
}

// The start date to pull data from.
func (o ReportTimePeriodResponsePtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The end date to pull data to.
func (o ReportTimePeriodResponsePtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.To
	}).(pulumi.StringPtrOutput)
}

// Source resources for cost allocation
type SourceCostAllocationResource struct {
	// If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
	Name string `pulumi:"name"`
	// Type of resources contained in this cost allocation rule
	ResourceType string `pulumi:"resourceType"`
	// Source Resources for cost allocation. This list cannot contain more than 25 values.
	Values []string `pulumi:"values"`
}

// SourceCostAllocationResourceInput is an input type that accepts SourceCostAllocationResourceArgs and SourceCostAllocationResourceOutput values.
// You can construct a concrete instance of `SourceCostAllocationResourceInput` via:
//
//          SourceCostAllocationResourceArgs{...}
type SourceCostAllocationResourceInput interface {
	pulumi.Input

	ToSourceCostAllocationResourceOutput() SourceCostAllocationResourceOutput
	ToSourceCostAllocationResourceOutputWithContext(context.Context) SourceCostAllocationResourceOutput
}

// Source resources for cost allocation
type SourceCostAllocationResourceArgs struct {
	// If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
	Name pulumi.StringInput `pulumi:"name"`
	// Type of resources contained in this cost allocation rule
	ResourceType pulumi.StringInput `pulumi:"resourceType"`
	// Source Resources for cost allocation. This list cannot contain more than 25 values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (SourceCostAllocationResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceCostAllocationResource)(nil)).Elem()
}

func (i SourceCostAllocationResourceArgs) ToSourceCostAllocationResourceOutput() SourceCostAllocationResourceOutput {
	return i.ToSourceCostAllocationResourceOutputWithContext(context.Background())
}

func (i SourceCostAllocationResourceArgs) ToSourceCostAllocationResourceOutputWithContext(ctx context.Context) SourceCostAllocationResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceCostAllocationResourceOutput)
}

// SourceCostAllocationResourceArrayInput is an input type that accepts SourceCostAllocationResourceArray and SourceCostAllocationResourceArrayOutput values.
// You can construct a concrete instance of `SourceCostAllocationResourceArrayInput` via:
//
//          SourceCostAllocationResourceArray{ SourceCostAllocationResourceArgs{...} }
type SourceCostAllocationResourceArrayInput interface {
	pulumi.Input

	ToSourceCostAllocationResourceArrayOutput() SourceCostAllocationResourceArrayOutput
	ToSourceCostAllocationResourceArrayOutputWithContext(context.Context) SourceCostAllocationResourceArrayOutput
}

type SourceCostAllocationResourceArray []SourceCostAllocationResourceInput

func (SourceCostAllocationResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceCostAllocationResource)(nil)).Elem()
}

func (i SourceCostAllocationResourceArray) ToSourceCostAllocationResourceArrayOutput() SourceCostAllocationResourceArrayOutput {
	return i.ToSourceCostAllocationResourceArrayOutputWithContext(context.Background())
}

func (i SourceCostAllocationResourceArray) ToSourceCostAllocationResourceArrayOutputWithContext(ctx context.Context) SourceCostAllocationResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceCostAllocationResourceArrayOutput)
}

// Source resources for cost allocation
type SourceCostAllocationResourceOutput struct{ *pulumi.OutputState }

func (SourceCostAllocationResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceCostAllocationResource)(nil)).Elem()
}

func (o SourceCostAllocationResourceOutput) ToSourceCostAllocationResourceOutput() SourceCostAllocationResourceOutput {
	return o
}

func (o SourceCostAllocationResourceOutput) ToSourceCostAllocationResourceOutputWithContext(ctx context.Context) SourceCostAllocationResourceOutput {
	return o
}

// If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
func (o SourceCostAllocationResourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SourceCostAllocationResource) string { return v.Name }).(pulumi.StringOutput)
}

// Type of resources contained in this cost allocation rule
func (o SourceCostAllocationResourceOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v SourceCostAllocationResource) string { return v.ResourceType }).(pulumi.StringOutput)
}

// Source Resources for cost allocation. This list cannot contain more than 25 values.
func (o SourceCostAllocationResourceOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SourceCostAllocationResource) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type SourceCostAllocationResourceArrayOutput struct{ *pulumi.OutputState }

func (SourceCostAllocationResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceCostAllocationResource)(nil)).Elem()
}

func (o SourceCostAllocationResourceArrayOutput) ToSourceCostAllocationResourceArrayOutput() SourceCostAllocationResourceArrayOutput {
	return o
}

func (o SourceCostAllocationResourceArrayOutput) ToSourceCostAllocationResourceArrayOutputWithContext(ctx context.Context) SourceCostAllocationResourceArrayOutput {
	return o
}

func (o SourceCostAllocationResourceArrayOutput) Index(i pulumi.IntInput) SourceCostAllocationResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceCostAllocationResource {
		return vs[0].([]SourceCostAllocationResource)[vs[1].(int)]
	}).(SourceCostAllocationResourceOutput)
}

// Source resources for cost allocation
type SourceCostAllocationResourceResponse struct {
	// If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
	Name string `pulumi:"name"`
	// Type of resources contained in this cost allocation rule
	ResourceType string `pulumi:"resourceType"`
	// Source Resources for cost allocation. This list cannot contain more than 25 values.
	Values []string `pulumi:"values"`
}

// SourceCostAllocationResourceResponseInput is an input type that accepts SourceCostAllocationResourceResponseArgs and SourceCostAllocationResourceResponseOutput values.
// You can construct a concrete instance of `SourceCostAllocationResourceResponseInput` via:
//
//          SourceCostAllocationResourceResponseArgs{...}
type SourceCostAllocationResourceResponseInput interface {
	pulumi.Input

	ToSourceCostAllocationResourceResponseOutput() SourceCostAllocationResourceResponseOutput
	ToSourceCostAllocationResourceResponseOutputWithContext(context.Context) SourceCostAllocationResourceResponseOutput
}

// Source resources for cost allocation
type SourceCostAllocationResourceResponseArgs struct {
	// If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
	Name pulumi.StringInput `pulumi:"name"`
	// Type of resources contained in this cost allocation rule
	ResourceType pulumi.StringInput `pulumi:"resourceType"`
	// Source Resources for cost allocation. This list cannot contain more than 25 values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (SourceCostAllocationResourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceCostAllocationResourceResponse)(nil)).Elem()
}

func (i SourceCostAllocationResourceResponseArgs) ToSourceCostAllocationResourceResponseOutput() SourceCostAllocationResourceResponseOutput {
	return i.ToSourceCostAllocationResourceResponseOutputWithContext(context.Background())
}

func (i SourceCostAllocationResourceResponseArgs) ToSourceCostAllocationResourceResponseOutputWithContext(ctx context.Context) SourceCostAllocationResourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceCostAllocationResourceResponseOutput)
}

// SourceCostAllocationResourceResponseArrayInput is an input type that accepts SourceCostAllocationResourceResponseArray and SourceCostAllocationResourceResponseArrayOutput values.
// You can construct a concrete instance of `SourceCostAllocationResourceResponseArrayInput` via:
//
//          SourceCostAllocationResourceResponseArray{ SourceCostAllocationResourceResponseArgs{...} }
type SourceCostAllocationResourceResponseArrayInput interface {
	pulumi.Input

	ToSourceCostAllocationResourceResponseArrayOutput() SourceCostAllocationResourceResponseArrayOutput
	ToSourceCostAllocationResourceResponseArrayOutputWithContext(context.Context) SourceCostAllocationResourceResponseArrayOutput
}

type SourceCostAllocationResourceResponseArray []SourceCostAllocationResourceResponseInput

func (SourceCostAllocationResourceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceCostAllocationResourceResponse)(nil)).Elem()
}

func (i SourceCostAllocationResourceResponseArray) ToSourceCostAllocationResourceResponseArrayOutput() SourceCostAllocationResourceResponseArrayOutput {
	return i.ToSourceCostAllocationResourceResponseArrayOutputWithContext(context.Background())
}

func (i SourceCostAllocationResourceResponseArray) ToSourceCostAllocationResourceResponseArrayOutputWithContext(ctx context.Context) SourceCostAllocationResourceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceCostAllocationResourceResponseArrayOutput)
}

// Source resources for cost allocation
type SourceCostAllocationResourceResponseOutput struct{ *pulumi.OutputState }

func (SourceCostAllocationResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceCostAllocationResourceResponse)(nil)).Elem()
}

func (o SourceCostAllocationResourceResponseOutput) ToSourceCostAllocationResourceResponseOutput() SourceCostAllocationResourceResponseOutput {
	return o
}

func (o SourceCostAllocationResourceResponseOutput) ToSourceCostAllocationResourceResponseOutputWithContext(ctx context.Context) SourceCostAllocationResourceResponseOutput {
	return o
}

// If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
func (o SourceCostAllocationResourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SourceCostAllocationResourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of resources contained in this cost allocation rule
func (o SourceCostAllocationResourceResponseOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v SourceCostAllocationResourceResponse) string { return v.ResourceType }).(pulumi.StringOutput)
}

// Source Resources for cost allocation. This list cannot contain more than 25 values.
func (o SourceCostAllocationResourceResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SourceCostAllocationResourceResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type SourceCostAllocationResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (SourceCostAllocationResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceCostAllocationResourceResponse)(nil)).Elem()
}

func (o SourceCostAllocationResourceResponseArrayOutput) ToSourceCostAllocationResourceResponseArrayOutput() SourceCostAllocationResourceResponseArrayOutput {
	return o
}

func (o SourceCostAllocationResourceResponseArrayOutput) ToSourceCostAllocationResourceResponseArrayOutputWithContext(ctx context.Context) SourceCostAllocationResourceResponseArrayOutput {
	return o
}

func (o SourceCostAllocationResourceResponseArrayOutput) Index(i pulumi.IntInput) SourceCostAllocationResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceCostAllocationResourceResponse {
		return vs[0].([]SourceCostAllocationResourceResponse)[vs[1].(int)]
	}).(SourceCostAllocationResourceResponseOutput)
}

// Target resources for cost allocation.
type TargetCostAllocationResource struct {
	// If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
	Name string `pulumi:"name"`
	// Method of cost allocation for the rule
	PolicyType string `pulumi:"policyType"`
	// Type of resources contained in this cost allocation rule
	ResourceType string `pulumi:"resourceType"`
	// Target resources for cost allocation. This list cannot contain more than 25 values.
	Values []CostAllocationProportion `pulumi:"values"`
}

// TargetCostAllocationResourceInput is an input type that accepts TargetCostAllocationResourceArgs and TargetCostAllocationResourceOutput values.
// You can construct a concrete instance of `TargetCostAllocationResourceInput` via:
//
//          TargetCostAllocationResourceArgs{...}
type TargetCostAllocationResourceInput interface {
	pulumi.Input

	ToTargetCostAllocationResourceOutput() TargetCostAllocationResourceOutput
	ToTargetCostAllocationResourceOutputWithContext(context.Context) TargetCostAllocationResourceOutput
}

// Target resources for cost allocation.
type TargetCostAllocationResourceArgs struct {
	// If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
	Name pulumi.StringInput `pulumi:"name"`
	// Method of cost allocation for the rule
	PolicyType pulumi.StringInput `pulumi:"policyType"`
	// Type of resources contained in this cost allocation rule
	ResourceType pulumi.StringInput `pulumi:"resourceType"`
	// Target resources for cost allocation. This list cannot contain more than 25 values.
	Values CostAllocationProportionArrayInput `pulumi:"values"`
}

func (TargetCostAllocationResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetCostAllocationResource)(nil)).Elem()
}

func (i TargetCostAllocationResourceArgs) ToTargetCostAllocationResourceOutput() TargetCostAllocationResourceOutput {
	return i.ToTargetCostAllocationResourceOutputWithContext(context.Background())
}

func (i TargetCostAllocationResourceArgs) ToTargetCostAllocationResourceOutputWithContext(ctx context.Context) TargetCostAllocationResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetCostAllocationResourceOutput)
}

// TargetCostAllocationResourceArrayInput is an input type that accepts TargetCostAllocationResourceArray and TargetCostAllocationResourceArrayOutput values.
// You can construct a concrete instance of `TargetCostAllocationResourceArrayInput` via:
//
//          TargetCostAllocationResourceArray{ TargetCostAllocationResourceArgs{...} }
type TargetCostAllocationResourceArrayInput interface {
	pulumi.Input

	ToTargetCostAllocationResourceArrayOutput() TargetCostAllocationResourceArrayOutput
	ToTargetCostAllocationResourceArrayOutputWithContext(context.Context) TargetCostAllocationResourceArrayOutput
}

type TargetCostAllocationResourceArray []TargetCostAllocationResourceInput

func (TargetCostAllocationResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetCostAllocationResource)(nil)).Elem()
}

func (i TargetCostAllocationResourceArray) ToTargetCostAllocationResourceArrayOutput() TargetCostAllocationResourceArrayOutput {
	return i.ToTargetCostAllocationResourceArrayOutputWithContext(context.Background())
}

func (i TargetCostAllocationResourceArray) ToTargetCostAllocationResourceArrayOutputWithContext(ctx context.Context) TargetCostAllocationResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetCostAllocationResourceArrayOutput)
}

// Target resources for cost allocation.
type TargetCostAllocationResourceOutput struct{ *pulumi.OutputState }

func (TargetCostAllocationResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetCostAllocationResource)(nil)).Elem()
}

func (o TargetCostAllocationResourceOutput) ToTargetCostAllocationResourceOutput() TargetCostAllocationResourceOutput {
	return o
}

func (o TargetCostAllocationResourceOutput) ToTargetCostAllocationResourceOutputWithContext(ctx context.Context) TargetCostAllocationResourceOutput {
	return o
}

// If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
func (o TargetCostAllocationResourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TargetCostAllocationResource) string { return v.Name }).(pulumi.StringOutput)
}

// Method of cost allocation for the rule
func (o TargetCostAllocationResourceOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v TargetCostAllocationResource) string { return v.PolicyType }).(pulumi.StringOutput)
}

// Type of resources contained in this cost allocation rule
func (o TargetCostAllocationResourceOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v TargetCostAllocationResource) string { return v.ResourceType }).(pulumi.StringOutput)
}

// Target resources for cost allocation. This list cannot contain more than 25 values.
func (o TargetCostAllocationResourceOutput) Values() CostAllocationProportionArrayOutput {
	return o.ApplyT(func(v TargetCostAllocationResource) []CostAllocationProportion { return v.Values }).(CostAllocationProportionArrayOutput)
}

type TargetCostAllocationResourceArrayOutput struct{ *pulumi.OutputState }

func (TargetCostAllocationResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetCostAllocationResource)(nil)).Elem()
}

func (o TargetCostAllocationResourceArrayOutput) ToTargetCostAllocationResourceArrayOutput() TargetCostAllocationResourceArrayOutput {
	return o
}

func (o TargetCostAllocationResourceArrayOutput) ToTargetCostAllocationResourceArrayOutputWithContext(ctx context.Context) TargetCostAllocationResourceArrayOutput {
	return o
}

func (o TargetCostAllocationResourceArrayOutput) Index(i pulumi.IntInput) TargetCostAllocationResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TargetCostAllocationResource {
		return vs[0].([]TargetCostAllocationResource)[vs[1].(int)]
	}).(TargetCostAllocationResourceOutput)
}

// Target resources for cost allocation.
type TargetCostAllocationResourceResponse struct {
	// If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
	Name string `pulumi:"name"`
	// Method of cost allocation for the rule
	PolicyType string `pulumi:"policyType"`
	// Type of resources contained in this cost allocation rule
	ResourceType string `pulumi:"resourceType"`
	// Target resources for cost allocation. This list cannot contain more than 25 values.
	Values []CostAllocationProportionResponse `pulumi:"values"`
}

// TargetCostAllocationResourceResponseInput is an input type that accepts TargetCostAllocationResourceResponseArgs and TargetCostAllocationResourceResponseOutput values.
// You can construct a concrete instance of `TargetCostAllocationResourceResponseInput` via:
//
//          TargetCostAllocationResourceResponseArgs{...}
type TargetCostAllocationResourceResponseInput interface {
	pulumi.Input

	ToTargetCostAllocationResourceResponseOutput() TargetCostAllocationResourceResponseOutput
	ToTargetCostAllocationResourceResponseOutputWithContext(context.Context) TargetCostAllocationResourceResponseOutput
}

// Target resources for cost allocation.
type TargetCostAllocationResourceResponseArgs struct {
	// If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
	Name pulumi.StringInput `pulumi:"name"`
	// Method of cost allocation for the rule
	PolicyType pulumi.StringInput `pulumi:"policyType"`
	// Type of resources contained in this cost allocation rule
	ResourceType pulumi.StringInput `pulumi:"resourceType"`
	// Target resources for cost allocation. This list cannot contain more than 25 values.
	Values CostAllocationProportionResponseArrayInput `pulumi:"values"`
}

func (TargetCostAllocationResourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetCostAllocationResourceResponse)(nil)).Elem()
}

func (i TargetCostAllocationResourceResponseArgs) ToTargetCostAllocationResourceResponseOutput() TargetCostAllocationResourceResponseOutput {
	return i.ToTargetCostAllocationResourceResponseOutputWithContext(context.Background())
}

func (i TargetCostAllocationResourceResponseArgs) ToTargetCostAllocationResourceResponseOutputWithContext(ctx context.Context) TargetCostAllocationResourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetCostAllocationResourceResponseOutput)
}

// TargetCostAllocationResourceResponseArrayInput is an input type that accepts TargetCostAllocationResourceResponseArray and TargetCostAllocationResourceResponseArrayOutput values.
// You can construct a concrete instance of `TargetCostAllocationResourceResponseArrayInput` via:
//
//          TargetCostAllocationResourceResponseArray{ TargetCostAllocationResourceResponseArgs{...} }
type TargetCostAllocationResourceResponseArrayInput interface {
	pulumi.Input

	ToTargetCostAllocationResourceResponseArrayOutput() TargetCostAllocationResourceResponseArrayOutput
	ToTargetCostAllocationResourceResponseArrayOutputWithContext(context.Context) TargetCostAllocationResourceResponseArrayOutput
}

type TargetCostAllocationResourceResponseArray []TargetCostAllocationResourceResponseInput

func (TargetCostAllocationResourceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetCostAllocationResourceResponse)(nil)).Elem()
}

func (i TargetCostAllocationResourceResponseArray) ToTargetCostAllocationResourceResponseArrayOutput() TargetCostAllocationResourceResponseArrayOutput {
	return i.ToTargetCostAllocationResourceResponseArrayOutputWithContext(context.Background())
}

func (i TargetCostAllocationResourceResponseArray) ToTargetCostAllocationResourceResponseArrayOutputWithContext(ctx context.Context) TargetCostAllocationResourceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetCostAllocationResourceResponseArrayOutput)
}

// Target resources for cost allocation.
type TargetCostAllocationResourceResponseOutput struct{ *pulumi.OutputState }

func (TargetCostAllocationResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetCostAllocationResourceResponse)(nil)).Elem()
}

func (o TargetCostAllocationResourceResponseOutput) ToTargetCostAllocationResourceResponseOutput() TargetCostAllocationResourceResponseOutput {
	return o
}

func (o TargetCostAllocationResourceResponseOutput) ToTargetCostAllocationResourceResponseOutputWithContext(ctx context.Context) TargetCostAllocationResourceResponseOutput {
	return o
}

// If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
func (o TargetCostAllocationResourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TargetCostAllocationResourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Method of cost allocation for the rule
func (o TargetCostAllocationResourceResponseOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v TargetCostAllocationResourceResponse) string { return v.PolicyType }).(pulumi.StringOutput)
}

// Type of resources contained in this cost allocation rule
func (o TargetCostAllocationResourceResponseOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v TargetCostAllocationResourceResponse) string { return v.ResourceType }).(pulumi.StringOutput)
}

// Target resources for cost allocation. This list cannot contain more than 25 values.
func (o TargetCostAllocationResourceResponseOutput) Values() CostAllocationProportionResponseArrayOutput {
	return o.ApplyT(func(v TargetCostAllocationResourceResponse) []CostAllocationProportionResponse { return v.Values }).(CostAllocationProportionResponseArrayOutput)
}

type TargetCostAllocationResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (TargetCostAllocationResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetCostAllocationResourceResponse)(nil)).Elem()
}

func (o TargetCostAllocationResourceResponseArrayOutput) ToTargetCostAllocationResourceResponseArrayOutput() TargetCostAllocationResourceResponseArrayOutput {
	return o
}

func (o TargetCostAllocationResourceResponseArrayOutput) ToTargetCostAllocationResourceResponseArrayOutputWithContext(ctx context.Context) TargetCostAllocationResourceResponseArrayOutput {
	return o
}

func (o TargetCostAllocationResourceResponseArrayOutput) Index(i pulumi.IntInput) TargetCostAllocationResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TargetCostAllocationResourceResponse {
		return vs[0].([]TargetCostAllocationResourceResponse)[vs[1].(int)]
	}).(TargetCostAllocationResourceResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AzurePlanResponseOutput{})
	pulumi.RegisterOutputType(AzurePlanResponseArrayOutput{})
	pulumi.RegisterOutputType(CostAllocationProportionOutput{})
	pulumi.RegisterOutputType(CostAllocationProportionArrayOutput{})
	pulumi.RegisterOutputType(CostAllocationProportionResponseOutput{})
	pulumi.RegisterOutputType(CostAllocationProportionResponseArrayOutput{})
	pulumi.RegisterOutputType(CostAllocationRuleDetailsOutput{})
	pulumi.RegisterOutputType(CostAllocationRuleDetailsPtrOutput{})
	pulumi.RegisterOutputType(CostAllocationRuleDetailsResponseOutput{})
	pulumi.RegisterOutputType(CostAllocationRuleDetailsResponsePtrOutput{})
	pulumi.RegisterOutputType(CostAllocationRulePropertiesOutput{})
	pulumi.RegisterOutputType(CostAllocationRulePropertiesPtrOutput{})
	pulumi.RegisterOutputType(CostAllocationRulePropertiesResponseOutput{})
	pulumi.RegisterOutputType(CostAllocationRulePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(InvoiceSectionWithCreateSubPermissionResponseOutput{})
	pulumi.RegisterOutputType(InvoiceSectionWithCreateSubPermissionResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportAggregationOutput{})
	pulumi.RegisterOutputType(ReportAggregationMapOutput{})
	pulumi.RegisterOutputType(ReportAggregationResponseOutput{})
	pulumi.RegisterOutputType(ReportAggregationResponseMapOutput{})
	pulumi.RegisterOutputType(ReportComparisonExpressionOutput{})
	pulumi.RegisterOutputType(ReportComparisonExpressionPtrOutput{})
	pulumi.RegisterOutputType(ReportComparisonExpressionResponseOutput{})
	pulumi.RegisterOutputType(ReportComparisonExpressionResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportDatasetOutput{})
	pulumi.RegisterOutputType(ReportDatasetPtrOutput{})
	pulumi.RegisterOutputType(ReportDatasetConfigurationOutput{})
	pulumi.RegisterOutputType(ReportDatasetConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ReportDatasetConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ReportDatasetConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportDatasetResponseOutput{})
	pulumi.RegisterOutputType(ReportDatasetResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportDefinitionOutput{})
	pulumi.RegisterOutputType(ReportDefinitionPtrOutput{})
	pulumi.RegisterOutputType(ReportDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ReportDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportDeliveryDestinationOutput{})
	pulumi.RegisterOutputType(ReportDeliveryDestinationPtrOutput{})
	pulumi.RegisterOutputType(ReportDeliveryDestinationResponseOutput{})
	pulumi.RegisterOutputType(ReportDeliveryDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportDeliveryInfoOutput{})
	pulumi.RegisterOutputType(ReportDeliveryInfoPtrOutput{})
	pulumi.RegisterOutputType(ReportDeliveryInfoResponseOutput{})
	pulumi.RegisterOutputType(ReportDeliveryInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportFilterOutput{})
	pulumi.RegisterOutputType(ReportFilterPtrOutput{})
	pulumi.RegisterOutputType(ReportFilterArrayOutput{})
	pulumi.RegisterOutputType(ReportFilterResponseOutput{})
	pulumi.RegisterOutputType(ReportFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportFilterResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportGroupingOutput{})
	pulumi.RegisterOutputType(ReportGroupingArrayOutput{})
	pulumi.RegisterOutputType(ReportGroupingResponseOutput{})
	pulumi.RegisterOutputType(ReportGroupingResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportRecurrencePeriodOutput{})
	pulumi.RegisterOutputType(ReportRecurrencePeriodPtrOutput{})
	pulumi.RegisterOutputType(ReportRecurrencePeriodResponseOutput{})
	pulumi.RegisterOutputType(ReportRecurrencePeriodResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportScheduleOutput{})
	pulumi.RegisterOutputType(ReportSchedulePtrOutput{})
	pulumi.RegisterOutputType(ReportScheduleResponseOutput{})
	pulumi.RegisterOutputType(ReportScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(ReportTimePeriodOutput{})
	pulumi.RegisterOutputType(ReportTimePeriodPtrOutput{})
	pulumi.RegisterOutputType(ReportTimePeriodResponseOutput{})
	pulumi.RegisterOutputType(ReportTimePeriodResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceCostAllocationResourceOutput{})
	pulumi.RegisterOutputType(SourceCostAllocationResourceArrayOutput{})
	pulumi.RegisterOutputType(SourceCostAllocationResourceResponseOutput{})
	pulumi.RegisterOutputType(SourceCostAllocationResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(TargetCostAllocationResourceOutput{})
	pulumi.RegisterOutputType(TargetCostAllocationResourceArrayOutput{})
	pulumi.RegisterOutputType(TargetCostAllocationResourceResponseOutput{})
	pulumi.RegisterOutputType(TargetCostAllocationResourceResponseArrayOutput{})
}
