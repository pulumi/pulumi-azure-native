// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20191201

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Response on GET of a hybrid use benefit
type HybridUseBenefitType struct {
	// Indicates the revision of the hybrid use benefit
	Etag int `pulumi:"etag"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Property bag for a hybrid use benefit response
	Properties HybridUseBenefitPropertiesResponse `pulumi:"properties"`
	// Hybrid use benefit SKU
	Sku SkuResponse `pulumi:"sku"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type string `pulumi:"type"`
}

// HybridUseBenefitTypeInput is an input type that accepts HybridUseBenefitTypeArgs and HybridUseBenefitTypeOutput values.
// You can construct a concrete instance of `HybridUseBenefitTypeInput` via:
//
//          HybridUseBenefitTypeArgs{...}
type HybridUseBenefitTypeInput interface {
	pulumi.Input

	ToHybridUseBenefitTypeOutput() HybridUseBenefitTypeOutput
	ToHybridUseBenefitTypeOutputWithContext(context.Context) HybridUseBenefitTypeOutput
}

// Response on GET of a hybrid use benefit
type HybridUseBenefitTypeArgs struct {
	// Indicates the revision of the hybrid use benefit
	Etag pulumi.IntInput `pulumi:"etag"`
	// The name of the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Property bag for a hybrid use benefit response
	Properties HybridUseBenefitPropertiesResponseInput `pulumi:"properties"`
	// Hybrid use benefit SKU
	Sku SkuResponseInput `pulumi:"sku"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HybridUseBenefitTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridUseBenefitType)(nil)).Elem()
}

func (i HybridUseBenefitTypeArgs) ToHybridUseBenefitTypeOutput() HybridUseBenefitTypeOutput {
	return i.ToHybridUseBenefitTypeOutputWithContext(context.Background())
}

func (i HybridUseBenefitTypeArgs) ToHybridUseBenefitTypeOutputWithContext(ctx context.Context) HybridUseBenefitTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridUseBenefitTypeOutput)
}

// Response on GET of a hybrid use benefit
type HybridUseBenefitTypeOutput struct{ *pulumi.OutputState }

func (HybridUseBenefitTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridUseBenefitType)(nil)).Elem()
}

func (o HybridUseBenefitTypeOutput) ToHybridUseBenefitTypeOutput() HybridUseBenefitTypeOutput {
	return o
}

func (o HybridUseBenefitTypeOutput) ToHybridUseBenefitTypeOutputWithContext(ctx context.Context) HybridUseBenefitTypeOutput {
	return o
}

// Indicates the revision of the hybrid use benefit
func (o HybridUseBenefitTypeOutput) Etag() pulumi.IntOutput {
	return o.ApplyT(func(v HybridUseBenefitType) int { return v.Etag }).(pulumi.IntOutput)
}

// The name of the resource
func (o HybridUseBenefitTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HybridUseBenefitType) string { return v.Name }).(pulumi.StringOutput)
}

// Property bag for a hybrid use benefit response
func (o HybridUseBenefitTypeOutput) Properties() HybridUseBenefitPropertiesResponseOutput {
	return o.ApplyT(func(v HybridUseBenefitType) HybridUseBenefitPropertiesResponse { return v.Properties }).(HybridUseBenefitPropertiesResponseOutput)
}

// Hybrid use benefit SKU
func (o HybridUseBenefitTypeOutput) Sku() SkuResponseOutput {
	return o.ApplyT(func(v HybridUseBenefitType) SkuResponse { return v.Sku }).(SkuResponseOutput)
}

// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
func (o HybridUseBenefitTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HybridUseBenefitType) string { return v.Type }).(pulumi.StringOutput)
}

// Hybrid use benefit properties
type HybridUseBenefitProperties struct {
}

// HybridUseBenefitPropertiesInput is an input type that accepts HybridUseBenefitPropertiesArgs and HybridUseBenefitPropertiesOutput values.
// You can construct a concrete instance of `HybridUseBenefitPropertiesInput` via:
//
//          HybridUseBenefitPropertiesArgs{...}
type HybridUseBenefitPropertiesInput interface {
	pulumi.Input

	ToHybridUseBenefitPropertiesOutput() HybridUseBenefitPropertiesOutput
	ToHybridUseBenefitPropertiesOutputWithContext(context.Context) HybridUseBenefitPropertiesOutput
}

// Hybrid use benefit properties
type HybridUseBenefitPropertiesArgs struct {
}

func (HybridUseBenefitPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridUseBenefitProperties)(nil)).Elem()
}

func (i HybridUseBenefitPropertiesArgs) ToHybridUseBenefitPropertiesOutput() HybridUseBenefitPropertiesOutput {
	return i.ToHybridUseBenefitPropertiesOutputWithContext(context.Background())
}

func (i HybridUseBenefitPropertiesArgs) ToHybridUseBenefitPropertiesOutputWithContext(ctx context.Context) HybridUseBenefitPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridUseBenefitPropertiesOutput)
}

func (i HybridUseBenefitPropertiesArgs) ToHybridUseBenefitPropertiesPtrOutput() HybridUseBenefitPropertiesPtrOutput {
	return i.ToHybridUseBenefitPropertiesPtrOutputWithContext(context.Background())
}

func (i HybridUseBenefitPropertiesArgs) ToHybridUseBenefitPropertiesPtrOutputWithContext(ctx context.Context) HybridUseBenefitPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridUseBenefitPropertiesOutput).ToHybridUseBenefitPropertiesPtrOutputWithContext(ctx)
}

// HybridUseBenefitPropertiesPtrInput is an input type that accepts HybridUseBenefitPropertiesArgs, HybridUseBenefitPropertiesPtr and HybridUseBenefitPropertiesPtrOutput values.
// You can construct a concrete instance of `HybridUseBenefitPropertiesPtrInput` via:
//
//          HybridUseBenefitPropertiesArgs{...}
//
//  or:
//
//          nil
type HybridUseBenefitPropertiesPtrInput interface {
	pulumi.Input

	ToHybridUseBenefitPropertiesPtrOutput() HybridUseBenefitPropertiesPtrOutput
	ToHybridUseBenefitPropertiesPtrOutputWithContext(context.Context) HybridUseBenefitPropertiesPtrOutput
}

type hybridUseBenefitPropertiesPtrType HybridUseBenefitPropertiesArgs

func HybridUseBenefitPropertiesPtr(v *HybridUseBenefitPropertiesArgs) HybridUseBenefitPropertiesPtrInput {
	return (*hybridUseBenefitPropertiesPtrType)(v)
}

func (*hybridUseBenefitPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridUseBenefitProperties)(nil)).Elem()
}

func (i *hybridUseBenefitPropertiesPtrType) ToHybridUseBenefitPropertiesPtrOutput() HybridUseBenefitPropertiesPtrOutput {
	return i.ToHybridUseBenefitPropertiesPtrOutputWithContext(context.Background())
}

func (i *hybridUseBenefitPropertiesPtrType) ToHybridUseBenefitPropertiesPtrOutputWithContext(ctx context.Context) HybridUseBenefitPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridUseBenefitPropertiesPtrOutput)
}

// Hybrid use benefit properties
type HybridUseBenefitPropertiesOutput struct{ *pulumi.OutputState }

func (HybridUseBenefitPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridUseBenefitProperties)(nil)).Elem()
}

func (o HybridUseBenefitPropertiesOutput) ToHybridUseBenefitPropertiesOutput() HybridUseBenefitPropertiesOutput {
	return o
}

func (o HybridUseBenefitPropertiesOutput) ToHybridUseBenefitPropertiesOutputWithContext(ctx context.Context) HybridUseBenefitPropertiesOutput {
	return o
}

func (o HybridUseBenefitPropertiesOutput) ToHybridUseBenefitPropertiesPtrOutput() HybridUseBenefitPropertiesPtrOutput {
	return o.ToHybridUseBenefitPropertiesPtrOutputWithContext(context.Background())
}

func (o HybridUseBenefitPropertiesOutput) ToHybridUseBenefitPropertiesPtrOutputWithContext(ctx context.Context) HybridUseBenefitPropertiesPtrOutput {
	return o.ApplyT(func(v HybridUseBenefitProperties) *HybridUseBenefitProperties {
		return &v
	}).(HybridUseBenefitPropertiesPtrOutput)
}

type HybridUseBenefitPropertiesPtrOutput struct{ *pulumi.OutputState }

func (HybridUseBenefitPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridUseBenefitProperties)(nil)).Elem()
}

func (o HybridUseBenefitPropertiesPtrOutput) ToHybridUseBenefitPropertiesPtrOutput() HybridUseBenefitPropertiesPtrOutput {
	return o
}

func (o HybridUseBenefitPropertiesPtrOutput) ToHybridUseBenefitPropertiesPtrOutputWithContext(ctx context.Context) HybridUseBenefitPropertiesPtrOutput {
	return o
}

func (o HybridUseBenefitPropertiesPtrOutput) Elem() HybridUseBenefitPropertiesOutput {
	return o.ApplyT(func(v *HybridUseBenefitProperties) HybridUseBenefitProperties { return *v }).(HybridUseBenefitPropertiesOutput)
}

// Hybrid use benefit properties
type HybridUseBenefitPropertiesResponse struct {
	// Created date
	CreatedDate string `pulumi:"createdDate"`
	// Last updated date
	LastUpdatedDate string `pulumi:"lastUpdatedDate"`
	// Provisioning state
	ProvisioningState string `pulumi:"provisioningState"`
}

// HybridUseBenefitPropertiesResponseInput is an input type that accepts HybridUseBenefitPropertiesResponseArgs and HybridUseBenefitPropertiesResponseOutput values.
// You can construct a concrete instance of `HybridUseBenefitPropertiesResponseInput` via:
//
//          HybridUseBenefitPropertiesResponseArgs{...}
type HybridUseBenefitPropertiesResponseInput interface {
	pulumi.Input

	ToHybridUseBenefitPropertiesResponseOutput() HybridUseBenefitPropertiesResponseOutput
	ToHybridUseBenefitPropertiesResponseOutputWithContext(context.Context) HybridUseBenefitPropertiesResponseOutput
}

// Hybrid use benefit properties
type HybridUseBenefitPropertiesResponseArgs struct {
	// Created date
	CreatedDate pulumi.StringInput `pulumi:"createdDate"`
	// Last updated date
	LastUpdatedDate pulumi.StringInput `pulumi:"lastUpdatedDate"`
	// Provisioning state
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
}

func (HybridUseBenefitPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridUseBenefitPropertiesResponse)(nil)).Elem()
}

func (i HybridUseBenefitPropertiesResponseArgs) ToHybridUseBenefitPropertiesResponseOutput() HybridUseBenefitPropertiesResponseOutput {
	return i.ToHybridUseBenefitPropertiesResponseOutputWithContext(context.Background())
}

func (i HybridUseBenefitPropertiesResponseArgs) ToHybridUseBenefitPropertiesResponseOutputWithContext(ctx context.Context) HybridUseBenefitPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridUseBenefitPropertiesResponseOutput)
}

func (i HybridUseBenefitPropertiesResponseArgs) ToHybridUseBenefitPropertiesResponsePtrOutput() HybridUseBenefitPropertiesResponsePtrOutput {
	return i.ToHybridUseBenefitPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i HybridUseBenefitPropertiesResponseArgs) ToHybridUseBenefitPropertiesResponsePtrOutputWithContext(ctx context.Context) HybridUseBenefitPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridUseBenefitPropertiesResponseOutput).ToHybridUseBenefitPropertiesResponsePtrOutputWithContext(ctx)
}

// HybridUseBenefitPropertiesResponsePtrInput is an input type that accepts HybridUseBenefitPropertiesResponseArgs, HybridUseBenefitPropertiesResponsePtr and HybridUseBenefitPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `HybridUseBenefitPropertiesResponsePtrInput` via:
//
//          HybridUseBenefitPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type HybridUseBenefitPropertiesResponsePtrInput interface {
	pulumi.Input

	ToHybridUseBenefitPropertiesResponsePtrOutput() HybridUseBenefitPropertiesResponsePtrOutput
	ToHybridUseBenefitPropertiesResponsePtrOutputWithContext(context.Context) HybridUseBenefitPropertiesResponsePtrOutput
}

type hybridUseBenefitPropertiesResponsePtrType HybridUseBenefitPropertiesResponseArgs

func HybridUseBenefitPropertiesResponsePtr(v *HybridUseBenefitPropertiesResponseArgs) HybridUseBenefitPropertiesResponsePtrInput {
	return (*hybridUseBenefitPropertiesResponsePtrType)(v)
}

func (*hybridUseBenefitPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridUseBenefitPropertiesResponse)(nil)).Elem()
}

func (i *hybridUseBenefitPropertiesResponsePtrType) ToHybridUseBenefitPropertiesResponsePtrOutput() HybridUseBenefitPropertiesResponsePtrOutput {
	return i.ToHybridUseBenefitPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *hybridUseBenefitPropertiesResponsePtrType) ToHybridUseBenefitPropertiesResponsePtrOutputWithContext(ctx context.Context) HybridUseBenefitPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridUseBenefitPropertiesResponsePtrOutput)
}

// Hybrid use benefit properties
type HybridUseBenefitPropertiesResponseOutput struct{ *pulumi.OutputState }

func (HybridUseBenefitPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridUseBenefitPropertiesResponse)(nil)).Elem()
}

func (o HybridUseBenefitPropertiesResponseOutput) ToHybridUseBenefitPropertiesResponseOutput() HybridUseBenefitPropertiesResponseOutput {
	return o
}

func (o HybridUseBenefitPropertiesResponseOutput) ToHybridUseBenefitPropertiesResponseOutputWithContext(ctx context.Context) HybridUseBenefitPropertiesResponseOutput {
	return o
}

func (o HybridUseBenefitPropertiesResponseOutput) ToHybridUseBenefitPropertiesResponsePtrOutput() HybridUseBenefitPropertiesResponsePtrOutput {
	return o.ToHybridUseBenefitPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o HybridUseBenefitPropertiesResponseOutput) ToHybridUseBenefitPropertiesResponsePtrOutputWithContext(ctx context.Context) HybridUseBenefitPropertiesResponsePtrOutput {
	return o.ApplyT(func(v HybridUseBenefitPropertiesResponse) *HybridUseBenefitPropertiesResponse {
		return &v
	}).(HybridUseBenefitPropertiesResponsePtrOutput)
}

// Created date
func (o HybridUseBenefitPropertiesResponseOutput) CreatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v HybridUseBenefitPropertiesResponse) string { return v.CreatedDate }).(pulumi.StringOutput)
}

// Last updated date
func (o HybridUseBenefitPropertiesResponseOutput) LastUpdatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v HybridUseBenefitPropertiesResponse) string { return v.LastUpdatedDate }).(pulumi.StringOutput)
}

// Provisioning state
func (o HybridUseBenefitPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v HybridUseBenefitPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type HybridUseBenefitPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (HybridUseBenefitPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridUseBenefitPropertiesResponse)(nil)).Elem()
}

func (o HybridUseBenefitPropertiesResponsePtrOutput) ToHybridUseBenefitPropertiesResponsePtrOutput() HybridUseBenefitPropertiesResponsePtrOutput {
	return o
}

func (o HybridUseBenefitPropertiesResponsePtrOutput) ToHybridUseBenefitPropertiesResponsePtrOutputWithContext(ctx context.Context) HybridUseBenefitPropertiesResponsePtrOutput {
	return o
}

func (o HybridUseBenefitPropertiesResponsePtrOutput) Elem() HybridUseBenefitPropertiesResponseOutput {
	return o.ApplyT(func(v *HybridUseBenefitPropertiesResponse) HybridUseBenefitPropertiesResponse { return *v }).(HybridUseBenefitPropertiesResponseOutput)
}

// Created date
func (o HybridUseBenefitPropertiesResponsePtrOutput) CreatedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HybridUseBenefitPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedDate
	}).(pulumi.StringPtrOutput)
}

// Last updated date
func (o HybridUseBenefitPropertiesResponsePtrOutput) LastUpdatedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HybridUseBenefitPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastUpdatedDate
	}).(pulumi.StringPtrOutput)
}

// Provisioning state
func (o HybridUseBenefitPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HybridUseBenefitPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The SKU to be applied for this resource
type Sku struct {
	// Name of the SKU to be applied
	Name *string `pulumi:"name"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//          SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// The SKU to be applied for this resource
type SkuArgs struct {
	// Name of the SKU to be applied
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//          SkuArgs{...}
//
//  or:
//
//          nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// The SKU to be applied for this resource
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyT(func(v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// Name of the SKU to be applied
func (o SkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku { return *v }).(SkuOutput)
}

// Name of the SKU to be applied
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU to be applied for this resource
type SkuResponse struct {
	// Name of the SKU to be applied
	Name *string `pulumi:"name"`
}

// SkuResponseInput is an input type that accepts SkuResponseArgs and SkuResponseOutput values.
// You can construct a concrete instance of `SkuResponseInput` via:
//
//          SkuResponseArgs{...}
type SkuResponseInput interface {
	pulumi.Input

	ToSkuResponseOutput() SkuResponseOutput
	ToSkuResponseOutputWithContext(context.Context) SkuResponseOutput
}

// The SKU to be applied for this resource
type SkuResponseArgs struct {
	// Name of the SKU to be applied
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (i SkuResponseArgs) ToSkuResponseOutput() SkuResponseOutput {
	return i.ToSkuResponseOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput)
}

func (i SkuResponseArgs) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput).ToSkuResponsePtrOutputWithContext(ctx)
}

// SkuResponsePtrInput is an input type that accepts SkuResponseArgs, SkuResponsePtr and SkuResponsePtrOutput values.
// You can construct a concrete instance of `SkuResponsePtrInput` via:
//
//          SkuResponseArgs{...}
//
//  or:
//
//          nil
type SkuResponsePtrInput interface {
	pulumi.Input

	ToSkuResponsePtrOutput() SkuResponsePtrOutput
	ToSkuResponsePtrOutputWithContext(context.Context) SkuResponsePtrOutput
}

type skuResponsePtrType SkuResponseArgs

func SkuResponsePtr(v *SkuResponseArgs) SkuResponsePtrInput {
	return (*skuResponsePtrType)(v)
}

func (*skuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponsePtrOutput)
}

// The SKU to be applied for this resource
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (o SkuResponseOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o.ApplyT(func(v SkuResponse) *SkuResponse {
		return &v
	}).(SkuResponsePtrOutput)
}

// Name of the SKU to be applied
func (o SkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse { return *v }).(SkuResponseOutput)
}

// Name of the SKU to be applied
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(HybridUseBenefitTypeOutput{})
	pulumi.RegisterOutputType(HybridUseBenefitPropertiesOutput{})
	pulumi.RegisterOutputType(HybridUseBenefitPropertiesPtrOutput{})
	pulumi.RegisterOutputType(HybridUseBenefitPropertiesResponseOutput{})
	pulumi.RegisterOutputType(HybridUseBenefitPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
}
