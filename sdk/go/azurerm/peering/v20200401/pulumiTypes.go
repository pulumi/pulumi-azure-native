// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200401

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The properties that define a BGP session.
type BgpSession struct {
	// The maximum number of prefixes advertised over the IPv4 session.
	MaxPrefixesAdvertisedV4 *int `pulumi:"maxPrefixesAdvertisedV4"`
	// The maximum number of prefixes advertised over the IPv6 session.
	MaxPrefixesAdvertisedV6 *int `pulumi:"maxPrefixesAdvertisedV6"`
	// The MD5 authentication key of the session.
	Md5AuthenticationKey *string `pulumi:"md5AuthenticationKey"`
	// The IPv4 session address on Microsoft's end.
	MicrosoftSessionIPv4Address *string `pulumi:"microsoftSessionIPv4Address"`
	// The IPv6 session address on Microsoft's end.
	MicrosoftSessionIPv6Address *string `pulumi:"microsoftSessionIPv6Address"`
	// The IPv4 session address on peer's end.
	PeerSessionIPv4Address *string `pulumi:"peerSessionIPv4Address"`
	// The IPv6 session address on peer's end.
	PeerSessionIPv6Address *string `pulumi:"peerSessionIPv6Address"`
	// The IPv4 prefix that contains both ends' IPv4 addresses.
	SessionPrefixV4 *string `pulumi:"sessionPrefixV4"`
	// The IPv6 prefix that contains both ends' IPv6 addresses.
	SessionPrefixV6 *string `pulumi:"sessionPrefixV6"`
}

// BgpSessionInput is an input type that accepts BgpSessionArgs and BgpSessionOutput values.
// You can construct a concrete instance of `BgpSessionInput` via:
//
//          BgpSessionArgs{...}
type BgpSessionInput interface {
	pulumi.Input

	ToBgpSessionOutput() BgpSessionOutput
	ToBgpSessionOutputWithContext(context.Context) BgpSessionOutput
}

// The properties that define a BGP session.
type BgpSessionArgs struct {
	// The maximum number of prefixes advertised over the IPv4 session.
	MaxPrefixesAdvertisedV4 pulumi.IntPtrInput `pulumi:"maxPrefixesAdvertisedV4"`
	// The maximum number of prefixes advertised over the IPv6 session.
	MaxPrefixesAdvertisedV6 pulumi.IntPtrInput `pulumi:"maxPrefixesAdvertisedV6"`
	// The MD5 authentication key of the session.
	Md5AuthenticationKey pulumi.StringPtrInput `pulumi:"md5AuthenticationKey"`
	// The IPv4 session address on Microsoft's end.
	MicrosoftSessionIPv4Address pulumi.StringPtrInput `pulumi:"microsoftSessionIPv4Address"`
	// The IPv6 session address on Microsoft's end.
	MicrosoftSessionIPv6Address pulumi.StringPtrInput `pulumi:"microsoftSessionIPv6Address"`
	// The IPv4 session address on peer's end.
	PeerSessionIPv4Address pulumi.StringPtrInput `pulumi:"peerSessionIPv4Address"`
	// The IPv6 session address on peer's end.
	PeerSessionIPv6Address pulumi.StringPtrInput `pulumi:"peerSessionIPv6Address"`
	// The IPv4 prefix that contains both ends' IPv4 addresses.
	SessionPrefixV4 pulumi.StringPtrInput `pulumi:"sessionPrefixV4"`
	// The IPv6 prefix that contains both ends' IPv6 addresses.
	SessionPrefixV6 pulumi.StringPtrInput `pulumi:"sessionPrefixV6"`
}

func (BgpSessionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpSession)(nil)).Elem()
}

func (i BgpSessionArgs) ToBgpSessionOutput() BgpSessionOutput {
	return i.ToBgpSessionOutputWithContext(context.Background())
}

func (i BgpSessionArgs) ToBgpSessionOutputWithContext(ctx context.Context) BgpSessionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpSessionOutput)
}

func (i BgpSessionArgs) ToBgpSessionPtrOutput() BgpSessionPtrOutput {
	return i.ToBgpSessionPtrOutputWithContext(context.Background())
}

func (i BgpSessionArgs) ToBgpSessionPtrOutputWithContext(ctx context.Context) BgpSessionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpSessionOutput).ToBgpSessionPtrOutputWithContext(ctx)
}

// BgpSessionPtrInput is an input type that accepts BgpSessionArgs, BgpSessionPtr and BgpSessionPtrOutput values.
// You can construct a concrete instance of `BgpSessionPtrInput` via:
//
//          BgpSessionArgs{...}
//
//  or:
//
//          nil
type BgpSessionPtrInput interface {
	pulumi.Input

	ToBgpSessionPtrOutput() BgpSessionPtrOutput
	ToBgpSessionPtrOutputWithContext(context.Context) BgpSessionPtrOutput
}

type bgpSessionPtrType BgpSessionArgs

func BgpSessionPtr(v *BgpSessionArgs) BgpSessionPtrInput {
	return (*bgpSessionPtrType)(v)
}

func (*bgpSessionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BgpSession)(nil)).Elem()
}

func (i *bgpSessionPtrType) ToBgpSessionPtrOutput() BgpSessionPtrOutput {
	return i.ToBgpSessionPtrOutputWithContext(context.Background())
}

func (i *bgpSessionPtrType) ToBgpSessionPtrOutputWithContext(ctx context.Context) BgpSessionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpSessionPtrOutput)
}

// The properties that define a BGP session.
type BgpSessionOutput struct{ *pulumi.OutputState }

func (BgpSessionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpSession)(nil)).Elem()
}

func (o BgpSessionOutput) ToBgpSessionOutput() BgpSessionOutput {
	return o
}

func (o BgpSessionOutput) ToBgpSessionOutputWithContext(ctx context.Context) BgpSessionOutput {
	return o
}

func (o BgpSessionOutput) ToBgpSessionPtrOutput() BgpSessionPtrOutput {
	return o.ToBgpSessionPtrOutputWithContext(context.Background())
}

func (o BgpSessionOutput) ToBgpSessionPtrOutputWithContext(ctx context.Context) BgpSessionPtrOutput {
	return o.ApplyT(func(v BgpSession) *BgpSession {
		return &v
	}).(BgpSessionPtrOutput)
}

// The maximum number of prefixes advertised over the IPv4 session.
func (o BgpSessionOutput) MaxPrefixesAdvertisedV4() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BgpSession) *int { return v.MaxPrefixesAdvertisedV4 }).(pulumi.IntPtrOutput)
}

// The maximum number of prefixes advertised over the IPv6 session.
func (o BgpSessionOutput) MaxPrefixesAdvertisedV6() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BgpSession) *int { return v.MaxPrefixesAdvertisedV6 }).(pulumi.IntPtrOutput)
}

// The MD5 authentication key of the session.
func (o BgpSessionOutput) Md5AuthenticationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSession) *string { return v.Md5AuthenticationKey }).(pulumi.StringPtrOutput)
}

// The IPv4 session address on Microsoft's end.
func (o BgpSessionOutput) MicrosoftSessionIPv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSession) *string { return v.MicrosoftSessionIPv4Address }).(pulumi.StringPtrOutput)
}

// The IPv6 session address on Microsoft's end.
func (o BgpSessionOutput) MicrosoftSessionIPv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSession) *string { return v.MicrosoftSessionIPv6Address }).(pulumi.StringPtrOutput)
}

// The IPv4 session address on peer's end.
func (o BgpSessionOutput) PeerSessionIPv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSession) *string { return v.PeerSessionIPv4Address }).(pulumi.StringPtrOutput)
}

// The IPv6 session address on peer's end.
func (o BgpSessionOutput) PeerSessionIPv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSession) *string { return v.PeerSessionIPv6Address }).(pulumi.StringPtrOutput)
}

// The IPv4 prefix that contains both ends' IPv4 addresses.
func (o BgpSessionOutput) SessionPrefixV4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSession) *string { return v.SessionPrefixV4 }).(pulumi.StringPtrOutput)
}

// The IPv6 prefix that contains both ends' IPv6 addresses.
func (o BgpSessionOutput) SessionPrefixV6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSession) *string { return v.SessionPrefixV6 }).(pulumi.StringPtrOutput)
}

type BgpSessionPtrOutput struct{ *pulumi.OutputState }

func (BgpSessionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BgpSession)(nil)).Elem()
}

func (o BgpSessionPtrOutput) ToBgpSessionPtrOutput() BgpSessionPtrOutput {
	return o
}

func (o BgpSessionPtrOutput) ToBgpSessionPtrOutputWithContext(ctx context.Context) BgpSessionPtrOutput {
	return o
}

func (o BgpSessionPtrOutput) Elem() BgpSessionOutput {
	return o.ApplyT(func(v *BgpSession) BgpSession { return *v }).(BgpSessionOutput)
}

// The maximum number of prefixes advertised over the IPv4 session.
func (o BgpSessionPtrOutput) MaxPrefixesAdvertisedV4() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BgpSession) *int {
		if v == nil {
			return nil
		}
		return v.MaxPrefixesAdvertisedV4
	}).(pulumi.IntPtrOutput)
}

// The maximum number of prefixes advertised over the IPv6 session.
func (o BgpSessionPtrOutput) MaxPrefixesAdvertisedV6() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BgpSession) *int {
		if v == nil {
			return nil
		}
		return v.MaxPrefixesAdvertisedV6
	}).(pulumi.IntPtrOutput)
}

// The MD5 authentication key of the session.
func (o BgpSessionPtrOutput) Md5AuthenticationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSession) *string {
		if v == nil {
			return nil
		}
		return v.Md5AuthenticationKey
	}).(pulumi.StringPtrOutput)
}

// The IPv4 session address on Microsoft's end.
func (o BgpSessionPtrOutput) MicrosoftSessionIPv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSession) *string {
		if v == nil {
			return nil
		}
		return v.MicrosoftSessionIPv4Address
	}).(pulumi.StringPtrOutput)
}

// The IPv6 session address on Microsoft's end.
func (o BgpSessionPtrOutput) MicrosoftSessionIPv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSession) *string {
		if v == nil {
			return nil
		}
		return v.MicrosoftSessionIPv6Address
	}).(pulumi.StringPtrOutput)
}

// The IPv4 session address on peer's end.
func (o BgpSessionPtrOutput) PeerSessionIPv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSession) *string {
		if v == nil {
			return nil
		}
		return v.PeerSessionIPv4Address
	}).(pulumi.StringPtrOutput)
}

// The IPv6 session address on peer's end.
func (o BgpSessionPtrOutput) PeerSessionIPv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSession) *string {
		if v == nil {
			return nil
		}
		return v.PeerSessionIPv6Address
	}).(pulumi.StringPtrOutput)
}

// The IPv4 prefix that contains both ends' IPv4 addresses.
func (o BgpSessionPtrOutput) SessionPrefixV4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSession) *string {
		if v == nil {
			return nil
		}
		return v.SessionPrefixV4
	}).(pulumi.StringPtrOutput)
}

// The IPv6 prefix that contains both ends' IPv6 addresses.
func (o BgpSessionPtrOutput) SessionPrefixV6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSession) *string {
		if v == nil {
			return nil
		}
		return v.SessionPrefixV6
	}).(pulumi.StringPtrOutput)
}

// The properties that define a BGP session.
type BgpSessionResponse struct {
	// The maximum number of prefixes advertised over the IPv4 session.
	MaxPrefixesAdvertisedV4 *int `pulumi:"maxPrefixesAdvertisedV4"`
	// The maximum number of prefixes advertised over the IPv6 session.
	MaxPrefixesAdvertisedV6 *int `pulumi:"maxPrefixesAdvertisedV6"`
	// The MD5 authentication key of the session.
	Md5AuthenticationKey *string `pulumi:"md5AuthenticationKey"`
	// The IPv4 session address on Microsoft's end.
	MicrosoftSessionIPv4Address *string `pulumi:"microsoftSessionIPv4Address"`
	// The IPv6 session address on Microsoft's end.
	MicrosoftSessionIPv6Address *string `pulumi:"microsoftSessionIPv6Address"`
	// The IPv4 session address on peer's end.
	PeerSessionIPv4Address *string `pulumi:"peerSessionIPv4Address"`
	// The IPv6 session address on peer's end.
	PeerSessionIPv6Address *string `pulumi:"peerSessionIPv6Address"`
	// The IPv4 prefix that contains both ends' IPv4 addresses.
	SessionPrefixV4 *string `pulumi:"sessionPrefixV4"`
	// The IPv6 prefix that contains both ends' IPv6 addresses.
	SessionPrefixV6 *string `pulumi:"sessionPrefixV6"`
	// The state of the IPv4 session.
	SessionStateV4 string `pulumi:"sessionStateV4"`
	// The state of the IPv6 session.
	SessionStateV6 string `pulumi:"sessionStateV6"`
}

// BgpSessionResponseInput is an input type that accepts BgpSessionResponseArgs and BgpSessionResponseOutput values.
// You can construct a concrete instance of `BgpSessionResponseInput` via:
//
//          BgpSessionResponseArgs{...}
type BgpSessionResponseInput interface {
	pulumi.Input

	ToBgpSessionResponseOutput() BgpSessionResponseOutput
	ToBgpSessionResponseOutputWithContext(context.Context) BgpSessionResponseOutput
}

// The properties that define a BGP session.
type BgpSessionResponseArgs struct {
	// The maximum number of prefixes advertised over the IPv4 session.
	MaxPrefixesAdvertisedV4 pulumi.IntPtrInput `pulumi:"maxPrefixesAdvertisedV4"`
	// The maximum number of prefixes advertised over the IPv6 session.
	MaxPrefixesAdvertisedV6 pulumi.IntPtrInput `pulumi:"maxPrefixesAdvertisedV6"`
	// The MD5 authentication key of the session.
	Md5AuthenticationKey pulumi.StringPtrInput `pulumi:"md5AuthenticationKey"`
	// The IPv4 session address on Microsoft's end.
	MicrosoftSessionIPv4Address pulumi.StringPtrInput `pulumi:"microsoftSessionIPv4Address"`
	// The IPv6 session address on Microsoft's end.
	MicrosoftSessionIPv6Address pulumi.StringPtrInput `pulumi:"microsoftSessionIPv6Address"`
	// The IPv4 session address on peer's end.
	PeerSessionIPv4Address pulumi.StringPtrInput `pulumi:"peerSessionIPv4Address"`
	// The IPv6 session address on peer's end.
	PeerSessionIPv6Address pulumi.StringPtrInput `pulumi:"peerSessionIPv6Address"`
	// The IPv4 prefix that contains both ends' IPv4 addresses.
	SessionPrefixV4 pulumi.StringPtrInput `pulumi:"sessionPrefixV4"`
	// The IPv6 prefix that contains both ends' IPv6 addresses.
	SessionPrefixV6 pulumi.StringPtrInput `pulumi:"sessionPrefixV6"`
	// The state of the IPv4 session.
	SessionStateV4 pulumi.StringInput `pulumi:"sessionStateV4"`
	// The state of the IPv6 session.
	SessionStateV6 pulumi.StringInput `pulumi:"sessionStateV6"`
}

func (BgpSessionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpSessionResponse)(nil)).Elem()
}

func (i BgpSessionResponseArgs) ToBgpSessionResponseOutput() BgpSessionResponseOutput {
	return i.ToBgpSessionResponseOutputWithContext(context.Background())
}

func (i BgpSessionResponseArgs) ToBgpSessionResponseOutputWithContext(ctx context.Context) BgpSessionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpSessionResponseOutput)
}

func (i BgpSessionResponseArgs) ToBgpSessionResponsePtrOutput() BgpSessionResponsePtrOutput {
	return i.ToBgpSessionResponsePtrOutputWithContext(context.Background())
}

func (i BgpSessionResponseArgs) ToBgpSessionResponsePtrOutputWithContext(ctx context.Context) BgpSessionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpSessionResponseOutput).ToBgpSessionResponsePtrOutputWithContext(ctx)
}

// BgpSessionResponsePtrInput is an input type that accepts BgpSessionResponseArgs, BgpSessionResponsePtr and BgpSessionResponsePtrOutput values.
// You can construct a concrete instance of `BgpSessionResponsePtrInput` via:
//
//          BgpSessionResponseArgs{...}
//
//  or:
//
//          nil
type BgpSessionResponsePtrInput interface {
	pulumi.Input

	ToBgpSessionResponsePtrOutput() BgpSessionResponsePtrOutput
	ToBgpSessionResponsePtrOutputWithContext(context.Context) BgpSessionResponsePtrOutput
}

type bgpSessionResponsePtrType BgpSessionResponseArgs

func BgpSessionResponsePtr(v *BgpSessionResponseArgs) BgpSessionResponsePtrInput {
	return (*bgpSessionResponsePtrType)(v)
}

func (*bgpSessionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BgpSessionResponse)(nil)).Elem()
}

func (i *bgpSessionResponsePtrType) ToBgpSessionResponsePtrOutput() BgpSessionResponsePtrOutput {
	return i.ToBgpSessionResponsePtrOutputWithContext(context.Background())
}

func (i *bgpSessionResponsePtrType) ToBgpSessionResponsePtrOutputWithContext(ctx context.Context) BgpSessionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpSessionResponsePtrOutput)
}

// The properties that define a BGP session.
type BgpSessionResponseOutput struct{ *pulumi.OutputState }

func (BgpSessionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpSessionResponse)(nil)).Elem()
}

func (o BgpSessionResponseOutput) ToBgpSessionResponseOutput() BgpSessionResponseOutput {
	return o
}

func (o BgpSessionResponseOutput) ToBgpSessionResponseOutputWithContext(ctx context.Context) BgpSessionResponseOutput {
	return o
}

func (o BgpSessionResponseOutput) ToBgpSessionResponsePtrOutput() BgpSessionResponsePtrOutput {
	return o.ToBgpSessionResponsePtrOutputWithContext(context.Background())
}

func (o BgpSessionResponseOutput) ToBgpSessionResponsePtrOutputWithContext(ctx context.Context) BgpSessionResponsePtrOutput {
	return o.ApplyT(func(v BgpSessionResponse) *BgpSessionResponse {
		return &v
	}).(BgpSessionResponsePtrOutput)
}

// The maximum number of prefixes advertised over the IPv4 session.
func (o BgpSessionResponseOutput) MaxPrefixesAdvertisedV4() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BgpSessionResponse) *int { return v.MaxPrefixesAdvertisedV4 }).(pulumi.IntPtrOutput)
}

// The maximum number of prefixes advertised over the IPv6 session.
func (o BgpSessionResponseOutput) MaxPrefixesAdvertisedV6() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BgpSessionResponse) *int { return v.MaxPrefixesAdvertisedV6 }).(pulumi.IntPtrOutput)
}

// The MD5 authentication key of the session.
func (o BgpSessionResponseOutput) Md5AuthenticationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSessionResponse) *string { return v.Md5AuthenticationKey }).(pulumi.StringPtrOutput)
}

// The IPv4 session address on Microsoft's end.
func (o BgpSessionResponseOutput) MicrosoftSessionIPv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSessionResponse) *string { return v.MicrosoftSessionIPv4Address }).(pulumi.StringPtrOutput)
}

// The IPv6 session address on Microsoft's end.
func (o BgpSessionResponseOutput) MicrosoftSessionIPv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSessionResponse) *string { return v.MicrosoftSessionIPv6Address }).(pulumi.StringPtrOutput)
}

// The IPv4 session address on peer's end.
func (o BgpSessionResponseOutput) PeerSessionIPv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSessionResponse) *string { return v.PeerSessionIPv4Address }).(pulumi.StringPtrOutput)
}

// The IPv6 session address on peer's end.
func (o BgpSessionResponseOutput) PeerSessionIPv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSessionResponse) *string { return v.PeerSessionIPv6Address }).(pulumi.StringPtrOutput)
}

// The IPv4 prefix that contains both ends' IPv4 addresses.
func (o BgpSessionResponseOutput) SessionPrefixV4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSessionResponse) *string { return v.SessionPrefixV4 }).(pulumi.StringPtrOutput)
}

// The IPv6 prefix that contains both ends' IPv6 addresses.
func (o BgpSessionResponseOutput) SessionPrefixV6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpSessionResponse) *string { return v.SessionPrefixV6 }).(pulumi.StringPtrOutput)
}

// The state of the IPv4 session.
func (o BgpSessionResponseOutput) SessionStateV4() pulumi.StringOutput {
	return o.ApplyT(func(v BgpSessionResponse) string { return v.SessionStateV4 }).(pulumi.StringOutput)
}

// The state of the IPv6 session.
func (o BgpSessionResponseOutput) SessionStateV6() pulumi.StringOutput {
	return o.ApplyT(func(v BgpSessionResponse) string { return v.SessionStateV6 }).(pulumi.StringOutput)
}

type BgpSessionResponsePtrOutput struct{ *pulumi.OutputState }

func (BgpSessionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BgpSessionResponse)(nil)).Elem()
}

func (o BgpSessionResponsePtrOutput) ToBgpSessionResponsePtrOutput() BgpSessionResponsePtrOutput {
	return o
}

func (o BgpSessionResponsePtrOutput) ToBgpSessionResponsePtrOutputWithContext(ctx context.Context) BgpSessionResponsePtrOutput {
	return o
}

func (o BgpSessionResponsePtrOutput) Elem() BgpSessionResponseOutput {
	return o.ApplyT(func(v *BgpSessionResponse) BgpSessionResponse { return *v }).(BgpSessionResponseOutput)
}

// The maximum number of prefixes advertised over the IPv4 session.
func (o BgpSessionResponsePtrOutput) MaxPrefixesAdvertisedV4() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BgpSessionResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxPrefixesAdvertisedV4
	}).(pulumi.IntPtrOutput)
}

// The maximum number of prefixes advertised over the IPv6 session.
func (o BgpSessionResponsePtrOutput) MaxPrefixesAdvertisedV6() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BgpSessionResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxPrefixesAdvertisedV6
	}).(pulumi.IntPtrOutput)
}

// The MD5 authentication key of the session.
func (o BgpSessionResponsePtrOutput) Md5AuthenticationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSessionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Md5AuthenticationKey
	}).(pulumi.StringPtrOutput)
}

// The IPv4 session address on Microsoft's end.
func (o BgpSessionResponsePtrOutput) MicrosoftSessionIPv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSessionResponse) *string {
		if v == nil {
			return nil
		}
		return v.MicrosoftSessionIPv4Address
	}).(pulumi.StringPtrOutput)
}

// The IPv6 session address on Microsoft's end.
func (o BgpSessionResponsePtrOutput) MicrosoftSessionIPv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSessionResponse) *string {
		if v == nil {
			return nil
		}
		return v.MicrosoftSessionIPv6Address
	}).(pulumi.StringPtrOutput)
}

// The IPv4 session address on peer's end.
func (o BgpSessionResponsePtrOutput) PeerSessionIPv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSessionResponse) *string {
		if v == nil {
			return nil
		}
		return v.PeerSessionIPv4Address
	}).(pulumi.StringPtrOutput)
}

// The IPv6 session address on peer's end.
func (o BgpSessionResponsePtrOutput) PeerSessionIPv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSessionResponse) *string {
		if v == nil {
			return nil
		}
		return v.PeerSessionIPv6Address
	}).(pulumi.StringPtrOutput)
}

// The IPv4 prefix that contains both ends' IPv4 addresses.
func (o BgpSessionResponsePtrOutput) SessionPrefixV4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSessionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SessionPrefixV4
	}).(pulumi.StringPtrOutput)
}

// The IPv6 prefix that contains both ends' IPv6 addresses.
func (o BgpSessionResponsePtrOutput) SessionPrefixV6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSessionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SessionPrefixV6
	}).(pulumi.StringPtrOutput)
}

// The state of the IPv4 session.
func (o BgpSessionResponsePtrOutput) SessionStateV4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSessionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SessionStateV4
	}).(pulumi.StringPtrOutput)
}

// The state of the IPv6 session.
func (o BgpSessionResponsePtrOutput) SessionStateV6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpSessionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SessionStateV6
	}).(pulumi.StringPtrOutput)
}

// The contact detail class.
type ContactDetail struct {
	// The e-mail address of the contact.
	Email *string `pulumi:"email"`
	// The phone number of the contact.
	Phone *string `pulumi:"phone"`
	// The role of the contact.
	Role *string `pulumi:"role"`
}

// ContactDetailInput is an input type that accepts ContactDetailArgs and ContactDetailOutput values.
// You can construct a concrete instance of `ContactDetailInput` via:
//
//          ContactDetailArgs{...}
type ContactDetailInput interface {
	pulumi.Input

	ToContactDetailOutput() ContactDetailOutput
	ToContactDetailOutputWithContext(context.Context) ContactDetailOutput
}

// The contact detail class.
type ContactDetailArgs struct {
	// The e-mail address of the contact.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// The phone number of the contact.
	Phone pulumi.StringPtrInput `pulumi:"phone"`
	// The role of the contact.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (ContactDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactDetail)(nil)).Elem()
}

func (i ContactDetailArgs) ToContactDetailOutput() ContactDetailOutput {
	return i.ToContactDetailOutputWithContext(context.Background())
}

func (i ContactDetailArgs) ToContactDetailOutputWithContext(ctx context.Context) ContactDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactDetailOutput)
}

// ContactDetailArrayInput is an input type that accepts ContactDetailArray and ContactDetailArrayOutput values.
// You can construct a concrete instance of `ContactDetailArrayInput` via:
//
//          ContactDetailArray{ ContactDetailArgs{...} }
type ContactDetailArrayInput interface {
	pulumi.Input

	ToContactDetailArrayOutput() ContactDetailArrayOutput
	ToContactDetailArrayOutputWithContext(context.Context) ContactDetailArrayOutput
}

type ContactDetailArray []ContactDetailInput

func (ContactDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactDetail)(nil)).Elem()
}

func (i ContactDetailArray) ToContactDetailArrayOutput() ContactDetailArrayOutput {
	return i.ToContactDetailArrayOutputWithContext(context.Background())
}

func (i ContactDetailArray) ToContactDetailArrayOutputWithContext(ctx context.Context) ContactDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactDetailArrayOutput)
}

// The contact detail class.
type ContactDetailOutput struct{ *pulumi.OutputState }

func (ContactDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactDetail)(nil)).Elem()
}

func (o ContactDetailOutput) ToContactDetailOutput() ContactDetailOutput {
	return o
}

func (o ContactDetailOutput) ToContactDetailOutputWithContext(ctx context.Context) ContactDetailOutput {
	return o
}

// The e-mail address of the contact.
func (o ContactDetailOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactDetail) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// The phone number of the contact.
func (o ContactDetailOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactDetail) *string { return v.Phone }).(pulumi.StringPtrOutput)
}

// The role of the contact.
func (o ContactDetailOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactDetail) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type ContactDetailArrayOutput struct{ *pulumi.OutputState }

func (ContactDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactDetail)(nil)).Elem()
}

func (o ContactDetailArrayOutput) ToContactDetailArrayOutput() ContactDetailArrayOutput {
	return o
}

func (o ContactDetailArrayOutput) ToContactDetailArrayOutputWithContext(ctx context.Context) ContactDetailArrayOutput {
	return o
}

func (o ContactDetailArrayOutput) Index(i pulumi.IntInput) ContactDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactDetail {
		return vs[0].([]ContactDetail)[vs[1].(int)]
	}).(ContactDetailOutput)
}

// The contact detail class.
type ContactDetailResponse struct {
	// The e-mail address of the contact.
	Email *string `pulumi:"email"`
	// The phone number of the contact.
	Phone *string `pulumi:"phone"`
	// The role of the contact.
	Role *string `pulumi:"role"`
}

// ContactDetailResponseInput is an input type that accepts ContactDetailResponseArgs and ContactDetailResponseOutput values.
// You can construct a concrete instance of `ContactDetailResponseInput` via:
//
//          ContactDetailResponseArgs{...}
type ContactDetailResponseInput interface {
	pulumi.Input

	ToContactDetailResponseOutput() ContactDetailResponseOutput
	ToContactDetailResponseOutputWithContext(context.Context) ContactDetailResponseOutput
}

// The contact detail class.
type ContactDetailResponseArgs struct {
	// The e-mail address of the contact.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// The phone number of the contact.
	Phone pulumi.StringPtrInput `pulumi:"phone"`
	// The role of the contact.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (ContactDetailResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactDetailResponse)(nil)).Elem()
}

func (i ContactDetailResponseArgs) ToContactDetailResponseOutput() ContactDetailResponseOutput {
	return i.ToContactDetailResponseOutputWithContext(context.Background())
}

func (i ContactDetailResponseArgs) ToContactDetailResponseOutputWithContext(ctx context.Context) ContactDetailResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactDetailResponseOutput)
}

// ContactDetailResponseArrayInput is an input type that accepts ContactDetailResponseArray and ContactDetailResponseArrayOutput values.
// You can construct a concrete instance of `ContactDetailResponseArrayInput` via:
//
//          ContactDetailResponseArray{ ContactDetailResponseArgs{...} }
type ContactDetailResponseArrayInput interface {
	pulumi.Input

	ToContactDetailResponseArrayOutput() ContactDetailResponseArrayOutput
	ToContactDetailResponseArrayOutputWithContext(context.Context) ContactDetailResponseArrayOutput
}

type ContactDetailResponseArray []ContactDetailResponseInput

func (ContactDetailResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactDetailResponse)(nil)).Elem()
}

func (i ContactDetailResponseArray) ToContactDetailResponseArrayOutput() ContactDetailResponseArrayOutput {
	return i.ToContactDetailResponseArrayOutputWithContext(context.Background())
}

func (i ContactDetailResponseArray) ToContactDetailResponseArrayOutputWithContext(ctx context.Context) ContactDetailResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactDetailResponseArrayOutput)
}

// The contact detail class.
type ContactDetailResponseOutput struct{ *pulumi.OutputState }

func (ContactDetailResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactDetailResponse)(nil)).Elem()
}

func (o ContactDetailResponseOutput) ToContactDetailResponseOutput() ContactDetailResponseOutput {
	return o
}

func (o ContactDetailResponseOutput) ToContactDetailResponseOutputWithContext(ctx context.Context) ContactDetailResponseOutput {
	return o
}

// The e-mail address of the contact.
func (o ContactDetailResponseOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactDetailResponse) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// The phone number of the contact.
func (o ContactDetailResponseOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactDetailResponse) *string { return v.Phone }).(pulumi.StringPtrOutput)
}

// The role of the contact.
func (o ContactDetailResponseOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactDetailResponse) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type ContactDetailResponseArrayOutput struct{ *pulumi.OutputState }

func (ContactDetailResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactDetailResponse)(nil)).Elem()
}

func (o ContactDetailResponseArrayOutput) ToContactDetailResponseArrayOutput() ContactDetailResponseArrayOutput {
	return o
}

func (o ContactDetailResponseArrayOutput) ToContactDetailResponseArrayOutputWithContext(ctx context.Context) ContactDetailResponseArrayOutput {
	return o
}

func (o ContactDetailResponseArrayOutput) Index(i pulumi.IntInput) ContactDetailResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactDetailResponse {
		return vs[0].([]ContactDetailResponse)[vs[1].(int)]
	}).(ContactDetailResponseOutput)
}

// The properties that define a direct connection.
type DirectConnection struct {
	// The bandwidth of the connection.
	BandwidthInMbps *int `pulumi:"bandwidthInMbps"`
	// The BGP session associated with the connection.
	BgpSession *BgpSession `pulumi:"bgpSession"`
	// The unique identifier (GUID) for the connection.
	ConnectionIdentifier *string `pulumi:"connectionIdentifier"`
	// The PeeringDB.com ID of the facility at which the connection has to be set up.
	PeeringDBFacilityId *int `pulumi:"peeringDBFacilityId"`
	// The field indicating if Microsoft provides session ip addresses.
	SessionAddressProvider *string `pulumi:"sessionAddressProvider"`
	// The flag that indicates whether or not the connection is used for peering service.
	UseForPeeringService *bool `pulumi:"useForPeeringService"`
}

// DirectConnectionInput is an input type that accepts DirectConnectionArgs and DirectConnectionOutput values.
// You can construct a concrete instance of `DirectConnectionInput` via:
//
//          DirectConnectionArgs{...}
type DirectConnectionInput interface {
	pulumi.Input

	ToDirectConnectionOutput() DirectConnectionOutput
	ToDirectConnectionOutputWithContext(context.Context) DirectConnectionOutput
}

// The properties that define a direct connection.
type DirectConnectionArgs struct {
	// The bandwidth of the connection.
	BandwidthInMbps pulumi.IntPtrInput `pulumi:"bandwidthInMbps"`
	// The BGP session associated with the connection.
	BgpSession BgpSessionPtrInput `pulumi:"bgpSession"`
	// The unique identifier (GUID) for the connection.
	ConnectionIdentifier pulumi.StringPtrInput `pulumi:"connectionIdentifier"`
	// The PeeringDB.com ID of the facility at which the connection has to be set up.
	PeeringDBFacilityId pulumi.IntPtrInput `pulumi:"peeringDBFacilityId"`
	// The field indicating if Microsoft provides session ip addresses.
	SessionAddressProvider pulumi.StringPtrInput `pulumi:"sessionAddressProvider"`
	// The flag that indicates whether or not the connection is used for peering service.
	UseForPeeringService pulumi.BoolPtrInput `pulumi:"useForPeeringService"`
}

func (DirectConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectConnection)(nil)).Elem()
}

func (i DirectConnectionArgs) ToDirectConnectionOutput() DirectConnectionOutput {
	return i.ToDirectConnectionOutputWithContext(context.Background())
}

func (i DirectConnectionArgs) ToDirectConnectionOutputWithContext(ctx context.Context) DirectConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectConnectionOutput)
}

// DirectConnectionArrayInput is an input type that accepts DirectConnectionArray and DirectConnectionArrayOutput values.
// You can construct a concrete instance of `DirectConnectionArrayInput` via:
//
//          DirectConnectionArray{ DirectConnectionArgs{...} }
type DirectConnectionArrayInput interface {
	pulumi.Input

	ToDirectConnectionArrayOutput() DirectConnectionArrayOutput
	ToDirectConnectionArrayOutputWithContext(context.Context) DirectConnectionArrayOutput
}

type DirectConnectionArray []DirectConnectionInput

func (DirectConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DirectConnection)(nil)).Elem()
}

func (i DirectConnectionArray) ToDirectConnectionArrayOutput() DirectConnectionArrayOutput {
	return i.ToDirectConnectionArrayOutputWithContext(context.Background())
}

func (i DirectConnectionArray) ToDirectConnectionArrayOutputWithContext(ctx context.Context) DirectConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectConnectionArrayOutput)
}

// The properties that define a direct connection.
type DirectConnectionOutput struct{ *pulumi.OutputState }

func (DirectConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectConnection)(nil)).Elem()
}

func (o DirectConnectionOutput) ToDirectConnectionOutput() DirectConnectionOutput {
	return o
}

func (o DirectConnectionOutput) ToDirectConnectionOutputWithContext(ctx context.Context) DirectConnectionOutput {
	return o
}

// The bandwidth of the connection.
func (o DirectConnectionOutput) BandwidthInMbps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DirectConnection) *int { return v.BandwidthInMbps }).(pulumi.IntPtrOutput)
}

// The BGP session associated with the connection.
func (o DirectConnectionOutput) BgpSession() BgpSessionPtrOutput {
	return o.ApplyT(func(v DirectConnection) *BgpSession { return v.BgpSession }).(BgpSessionPtrOutput)
}

// The unique identifier (GUID) for the connection.
func (o DirectConnectionOutput) ConnectionIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DirectConnection) *string { return v.ConnectionIdentifier }).(pulumi.StringPtrOutput)
}

// The PeeringDB.com ID of the facility at which the connection has to be set up.
func (o DirectConnectionOutput) PeeringDBFacilityId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DirectConnection) *int { return v.PeeringDBFacilityId }).(pulumi.IntPtrOutput)
}

// The field indicating if Microsoft provides session ip addresses.
func (o DirectConnectionOutput) SessionAddressProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DirectConnection) *string { return v.SessionAddressProvider }).(pulumi.StringPtrOutput)
}

// The flag that indicates whether or not the connection is used for peering service.
func (o DirectConnectionOutput) UseForPeeringService() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DirectConnection) *bool { return v.UseForPeeringService }).(pulumi.BoolPtrOutput)
}

type DirectConnectionArrayOutput struct{ *pulumi.OutputState }

func (DirectConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DirectConnection)(nil)).Elem()
}

func (o DirectConnectionArrayOutput) ToDirectConnectionArrayOutput() DirectConnectionArrayOutput {
	return o
}

func (o DirectConnectionArrayOutput) ToDirectConnectionArrayOutputWithContext(ctx context.Context) DirectConnectionArrayOutput {
	return o
}

func (o DirectConnectionArrayOutput) Index(i pulumi.IntInput) DirectConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DirectConnection {
		return vs[0].([]DirectConnection)[vs[1].(int)]
	}).(DirectConnectionOutput)
}

// The properties that define a direct connection.
type DirectConnectionResponse struct {
	// The bandwidth of the connection.
	BandwidthInMbps *int `pulumi:"bandwidthInMbps"`
	// The BGP session associated with the connection.
	BgpSession *BgpSessionResponse `pulumi:"bgpSession"`
	// The unique identifier (GUID) for the connection.
	ConnectionIdentifier *string `pulumi:"connectionIdentifier"`
	// The state of the connection.
	ConnectionState string `pulumi:"connectionState"`
	// The error message related to the connection state, if any.
	ErrorMessage string `pulumi:"errorMessage"`
	// The PeeringDB.com ID of the facility at which the connection has to be set up.
	PeeringDBFacilityId *int `pulumi:"peeringDBFacilityId"`
	// The bandwidth that is actually provisioned.
	ProvisionedBandwidthInMbps int `pulumi:"provisionedBandwidthInMbps"`
	// The field indicating if Microsoft provides session ip addresses.
	SessionAddressProvider *string `pulumi:"sessionAddressProvider"`
	// The flag that indicates whether or not the connection is used for peering service.
	UseForPeeringService *bool `pulumi:"useForPeeringService"`
}

// DirectConnectionResponseInput is an input type that accepts DirectConnectionResponseArgs and DirectConnectionResponseOutput values.
// You can construct a concrete instance of `DirectConnectionResponseInput` via:
//
//          DirectConnectionResponseArgs{...}
type DirectConnectionResponseInput interface {
	pulumi.Input

	ToDirectConnectionResponseOutput() DirectConnectionResponseOutput
	ToDirectConnectionResponseOutputWithContext(context.Context) DirectConnectionResponseOutput
}

// The properties that define a direct connection.
type DirectConnectionResponseArgs struct {
	// The bandwidth of the connection.
	BandwidthInMbps pulumi.IntPtrInput `pulumi:"bandwidthInMbps"`
	// The BGP session associated with the connection.
	BgpSession BgpSessionResponsePtrInput `pulumi:"bgpSession"`
	// The unique identifier (GUID) for the connection.
	ConnectionIdentifier pulumi.StringPtrInput `pulumi:"connectionIdentifier"`
	// The state of the connection.
	ConnectionState pulumi.StringInput `pulumi:"connectionState"`
	// The error message related to the connection state, if any.
	ErrorMessage pulumi.StringInput `pulumi:"errorMessage"`
	// The PeeringDB.com ID of the facility at which the connection has to be set up.
	PeeringDBFacilityId pulumi.IntPtrInput `pulumi:"peeringDBFacilityId"`
	// The bandwidth that is actually provisioned.
	ProvisionedBandwidthInMbps pulumi.IntInput `pulumi:"provisionedBandwidthInMbps"`
	// The field indicating if Microsoft provides session ip addresses.
	SessionAddressProvider pulumi.StringPtrInput `pulumi:"sessionAddressProvider"`
	// The flag that indicates whether or not the connection is used for peering service.
	UseForPeeringService pulumi.BoolPtrInput `pulumi:"useForPeeringService"`
}

func (DirectConnectionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectConnectionResponse)(nil)).Elem()
}

func (i DirectConnectionResponseArgs) ToDirectConnectionResponseOutput() DirectConnectionResponseOutput {
	return i.ToDirectConnectionResponseOutputWithContext(context.Background())
}

func (i DirectConnectionResponseArgs) ToDirectConnectionResponseOutputWithContext(ctx context.Context) DirectConnectionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectConnectionResponseOutput)
}

// DirectConnectionResponseArrayInput is an input type that accepts DirectConnectionResponseArray and DirectConnectionResponseArrayOutput values.
// You can construct a concrete instance of `DirectConnectionResponseArrayInput` via:
//
//          DirectConnectionResponseArray{ DirectConnectionResponseArgs{...} }
type DirectConnectionResponseArrayInput interface {
	pulumi.Input

	ToDirectConnectionResponseArrayOutput() DirectConnectionResponseArrayOutput
	ToDirectConnectionResponseArrayOutputWithContext(context.Context) DirectConnectionResponseArrayOutput
}

type DirectConnectionResponseArray []DirectConnectionResponseInput

func (DirectConnectionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DirectConnectionResponse)(nil)).Elem()
}

func (i DirectConnectionResponseArray) ToDirectConnectionResponseArrayOutput() DirectConnectionResponseArrayOutput {
	return i.ToDirectConnectionResponseArrayOutputWithContext(context.Background())
}

func (i DirectConnectionResponseArray) ToDirectConnectionResponseArrayOutputWithContext(ctx context.Context) DirectConnectionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectConnectionResponseArrayOutput)
}

// The properties that define a direct connection.
type DirectConnectionResponseOutput struct{ *pulumi.OutputState }

func (DirectConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DirectConnectionResponse)(nil)).Elem()
}

func (o DirectConnectionResponseOutput) ToDirectConnectionResponseOutput() DirectConnectionResponseOutput {
	return o
}

func (o DirectConnectionResponseOutput) ToDirectConnectionResponseOutputWithContext(ctx context.Context) DirectConnectionResponseOutput {
	return o
}

// The bandwidth of the connection.
func (o DirectConnectionResponseOutput) BandwidthInMbps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DirectConnectionResponse) *int { return v.BandwidthInMbps }).(pulumi.IntPtrOutput)
}

// The BGP session associated with the connection.
func (o DirectConnectionResponseOutput) BgpSession() BgpSessionResponsePtrOutput {
	return o.ApplyT(func(v DirectConnectionResponse) *BgpSessionResponse { return v.BgpSession }).(BgpSessionResponsePtrOutput)
}

// The unique identifier (GUID) for the connection.
func (o DirectConnectionResponseOutput) ConnectionIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DirectConnectionResponse) *string { return v.ConnectionIdentifier }).(pulumi.StringPtrOutput)
}

// The state of the connection.
func (o DirectConnectionResponseOutput) ConnectionState() pulumi.StringOutput {
	return o.ApplyT(func(v DirectConnectionResponse) string { return v.ConnectionState }).(pulumi.StringOutput)
}

// The error message related to the connection state, if any.
func (o DirectConnectionResponseOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v DirectConnectionResponse) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// The PeeringDB.com ID of the facility at which the connection has to be set up.
func (o DirectConnectionResponseOutput) PeeringDBFacilityId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DirectConnectionResponse) *int { return v.PeeringDBFacilityId }).(pulumi.IntPtrOutput)
}

// The bandwidth that is actually provisioned.
func (o DirectConnectionResponseOutput) ProvisionedBandwidthInMbps() pulumi.IntOutput {
	return o.ApplyT(func(v DirectConnectionResponse) int { return v.ProvisionedBandwidthInMbps }).(pulumi.IntOutput)
}

// The field indicating if Microsoft provides session ip addresses.
func (o DirectConnectionResponseOutput) SessionAddressProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DirectConnectionResponse) *string { return v.SessionAddressProvider }).(pulumi.StringPtrOutput)
}

// The flag that indicates whether or not the connection is used for peering service.
func (o DirectConnectionResponseOutput) UseForPeeringService() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DirectConnectionResponse) *bool { return v.UseForPeeringService }).(pulumi.BoolPtrOutput)
}

type DirectConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (DirectConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DirectConnectionResponse)(nil)).Elem()
}

func (o DirectConnectionResponseArrayOutput) ToDirectConnectionResponseArrayOutput() DirectConnectionResponseArrayOutput {
	return o
}

func (o DirectConnectionResponseArrayOutput) ToDirectConnectionResponseArrayOutputWithContext(ctx context.Context) DirectConnectionResponseArrayOutput {
	return o
}

func (o DirectConnectionResponseArrayOutput) Index(i pulumi.IntInput) DirectConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DirectConnectionResponse {
		return vs[0].([]DirectConnectionResponse)[vs[1].(int)]
	}).(DirectConnectionResponseOutput)
}

// The properties that define an exchange connection.
type ExchangeConnection struct {
	// The BGP session associated with the connection.
	BgpSession *BgpSession `pulumi:"bgpSession"`
	// The unique identifier (GUID) for the connection.
	ConnectionIdentifier *string `pulumi:"connectionIdentifier"`
	// The PeeringDB.com ID of the facility at which the connection has to be set up.
	PeeringDBFacilityId *int `pulumi:"peeringDBFacilityId"`
}

// ExchangeConnectionInput is an input type that accepts ExchangeConnectionArgs and ExchangeConnectionOutput values.
// You can construct a concrete instance of `ExchangeConnectionInput` via:
//
//          ExchangeConnectionArgs{...}
type ExchangeConnectionInput interface {
	pulumi.Input

	ToExchangeConnectionOutput() ExchangeConnectionOutput
	ToExchangeConnectionOutputWithContext(context.Context) ExchangeConnectionOutput
}

// The properties that define an exchange connection.
type ExchangeConnectionArgs struct {
	// The BGP session associated with the connection.
	BgpSession BgpSessionPtrInput `pulumi:"bgpSession"`
	// The unique identifier (GUID) for the connection.
	ConnectionIdentifier pulumi.StringPtrInput `pulumi:"connectionIdentifier"`
	// The PeeringDB.com ID of the facility at which the connection has to be set up.
	PeeringDBFacilityId pulumi.IntPtrInput `pulumi:"peeringDBFacilityId"`
}

func (ExchangeConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExchangeConnection)(nil)).Elem()
}

func (i ExchangeConnectionArgs) ToExchangeConnectionOutput() ExchangeConnectionOutput {
	return i.ToExchangeConnectionOutputWithContext(context.Background())
}

func (i ExchangeConnectionArgs) ToExchangeConnectionOutputWithContext(ctx context.Context) ExchangeConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangeConnectionOutput)
}

// ExchangeConnectionArrayInput is an input type that accepts ExchangeConnectionArray and ExchangeConnectionArrayOutput values.
// You can construct a concrete instance of `ExchangeConnectionArrayInput` via:
//
//          ExchangeConnectionArray{ ExchangeConnectionArgs{...} }
type ExchangeConnectionArrayInput interface {
	pulumi.Input

	ToExchangeConnectionArrayOutput() ExchangeConnectionArrayOutput
	ToExchangeConnectionArrayOutputWithContext(context.Context) ExchangeConnectionArrayOutput
}

type ExchangeConnectionArray []ExchangeConnectionInput

func (ExchangeConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExchangeConnection)(nil)).Elem()
}

func (i ExchangeConnectionArray) ToExchangeConnectionArrayOutput() ExchangeConnectionArrayOutput {
	return i.ToExchangeConnectionArrayOutputWithContext(context.Background())
}

func (i ExchangeConnectionArray) ToExchangeConnectionArrayOutputWithContext(ctx context.Context) ExchangeConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangeConnectionArrayOutput)
}

// The properties that define an exchange connection.
type ExchangeConnectionOutput struct{ *pulumi.OutputState }

func (ExchangeConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExchangeConnection)(nil)).Elem()
}

func (o ExchangeConnectionOutput) ToExchangeConnectionOutput() ExchangeConnectionOutput {
	return o
}

func (o ExchangeConnectionOutput) ToExchangeConnectionOutputWithContext(ctx context.Context) ExchangeConnectionOutput {
	return o
}

// The BGP session associated with the connection.
func (o ExchangeConnectionOutput) BgpSession() BgpSessionPtrOutput {
	return o.ApplyT(func(v ExchangeConnection) *BgpSession { return v.BgpSession }).(BgpSessionPtrOutput)
}

// The unique identifier (GUID) for the connection.
func (o ExchangeConnectionOutput) ConnectionIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExchangeConnection) *string { return v.ConnectionIdentifier }).(pulumi.StringPtrOutput)
}

// The PeeringDB.com ID of the facility at which the connection has to be set up.
func (o ExchangeConnectionOutput) PeeringDBFacilityId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExchangeConnection) *int { return v.PeeringDBFacilityId }).(pulumi.IntPtrOutput)
}

type ExchangeConnectionArrayOutput struct{ *pulumi.OutputState }

func (ExchangeConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExchangeConnection)(nil)).Elem()
}

func (o ExchangeConnectionArrayOutput) ToExchangeConnectionArrayOutput() ExchangeConnectionArrayOutput {
	return o
}

func (o ExchangeConnectionArrayOutput) ToExchangeConnectionArrayOutputWithContext(ctx context.Context) ExchangeConnectionArrayOutput {
	return o
}

func (o ExchangeConnectionArrayOutput) Index(i pulumi.IntInput) ExchangeConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExchangeConnection {
		return vs[0].([]ExchangeConnection)[vs[1].(int)]
	}).(ExchangeConnectionOutput)
}

// The properties that define an exchange connection.
type ExchangeConnectionResponse struct {
	// The BGP session associated with the connection.
	BgpSession *BgpSessionResponse `pulumi:"bgpSession"`
	// The unique identifier (GUID) for the connection.
	ConnectionIdentifier *string `pulumi:"connectionIdentifier"`
	// The state of the connection.
	ConnectionState string `pulumi:"connectionState"`
	// The error message related to the connection state, if any.
	ErrorMessage string `pulumi:"errorMessage"`
	// The PeeringDB.com ID of the facility at which the connection has to be set up.
	PeeringDBFacilityId *int `pulumi:"peeringDBFacilityId"`
}

// ExchangeConnectionResponseInput is an input type that accepts ExchangeConnectionResponseArgs and ExchangeConnectionResponseOutput values.
// You can construct a concrete instance of `ExchangeConnectionResponseInput` via:
//
//          ExchangeConnectionResponseArgs{...}
type ExchangeConnectionResponseInput interface {
	pulumi.Input

	ToExchangeConnectionResponseOutput() ExchangeConnectionResponseOutput
	ToExchangeConnectionResponseOutputWithContext(context.Context) ExchangeConnectionResponseOutput
}

// The properties that define an exchange connection.
type ExchangeConnectionResponseArgs struct {
	// The BGP session associated with the connection.
	BgpSession BgpSessionResponsePtrInput `pulumi:"bgpSession"`
	// The unique identifier (GUID) for the connection.
	ConnectionIdentifier pulumi.StringPtrInput `pulumi:"connectionIdentifier"`
	// The state of the connection.
	ConnectionState pulumi.StringInput `pulumi:"connectionState"`
	// The error message related to the connection state, if any.
	ErrorMessage pulumi.StringInput `pulumi:"errorMessage"`
	// The PeeringDB.com ID of the facility at which the connection has to be set up.
	PeeringDBFacilityId pulumi.IntPtrInput `pulumi:"peeringDBFacilityId"`
}

func (ExchangeConnectionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExchangeConnectionResponse)(nil)).Elem()
}

func (i ExchangeConnectionResponseArgs) ToExchangeConnectionResponseOutput() ExchangeConnectionResponseOutput {
	return i.ToExchangeConnectionResponseOutputWithContext(context.Background())
}

func (i ExchangeConnectionResponseArgs) ToExchangeConnectionResponseOutputWithContext(ctx context.Context) ExchangeConnectionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangeConnectionResponseOutput)
}

// ExchangeConnectionResponseArrayInput is an input type that accepts ExchangeConnectionResponseArray and ExchangeConnectionResponseArrayOutput values.
// You can construct a concrete instance of `ExchangeConnectionResponseArrayInput` via:
//
//          ExchangeConnectionResponseArray{ ExchangeConnectionResponseArgs{...} }
type ExchangeConnectionResponseArrayInput interface {
	pulumi.Input

	ToExchangeConnectionResponseArrayOutput() ExchangeConnectionResponseArrayOutput
	ToExchangeConnectionResponseArrayOutputWithContext(context.Context) ExchangeConnectionResponseArrayOutput
}

type ExchangeConnectionResponseArray []ExchangeConnectionResponseInput

func (ExchangeConnectionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExchangeConnectionResponse)(nil)).Elem()
}

func (i ExchangeConnectionResponseArray) ToExchangeConnectionResponseArrayOutput() ExchangeConnectionResponseArrayOutput {
	return i.ToExchangeConnectionResponseArrayOutputWithContext(context.Background())
}

func (i ExchangeConnectionResponseArray) ToExchangeConnectionResponseArrayOutputWithContext(ctx context.Context) ExchangeConnectionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangeConnectionResponseArrayOutput)
}

// The properties that define an exchange connection.
type ExchangeConnectionResponseOutput struct{ *pulumi.OutputState }

func (ExchangeConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExchangeConnectionResponse)(nil)).Elem()
}

func (o ExchangeConnectionResponseOutput) ToExchangeConnectionResponseOutput() ExchangeConnectionResponseOutput {
	return o
}

func (o ExchangeConnectionResponseOutput) ToExchangeConnectionResponseOutputWithContext(ctx context.Context) ExchangeConnectionResponseOutput {
	return o
}

// The BGP session associated with the connection.
func (o ExchangeConnectionResponseOutput) BgpSession() BgpSessionResponsePtrOutput {
	return o.ApplyT(func(v ExchangeConnectionResponse) *BgpSessionResponse { return v.BgpSession }).(BgpSessionResponsePtrOutput)
}

// The unique identifier (GUID) for the connection.
func (o ExchangeConnectionResponseOutput) ConnectionIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExchangeConnectionResponse) *string { return v.ConnectionIdentifier }).(pulumi.StringPtrOutput)
}

// The state of the connection.
func (o ExchangeConnectionResponseOutput) ConnectionState() pulumi.StringOutput {
	return o.ApplyT(func(v ExchangeConnectionResponse) string { return v.ConnectionState }).(pulumi.StringOutput)
}

// The error message related to the connection state, if any.
func (o ExchangeConnectionResponseOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v ExchangeConnectionResponse) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// The PeeringDB.com ID of the facility at which the connection has to be set up.
func (o ExchangeConnectionResponseOutput) PeeringDBFacilityId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExchangeConnectionResponse) *int { return v.PeeringDBFacilityId }).(pulumi.IntPtrOutput)
}

type ExchangeConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (ExchangeConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExchangeConnectionResponse)(nil)).Elem()
}

func (o ExchangeConnectionResponseArrayOutput) ToExchangeConnectionResponseArrayOutput() ExchangeConnectionResponseArrayOutput {
	return o
}

func (o ExchangeConnectionResponseArrayOutput) ToExchangeConnectionResponseArrayOutputWithContext(ctx context.Context) ExchangeConnectionResponseArrayOutput {
	return o
}

func (o ExchangeConnectionResponseArrayOutput) Index(i pulumi.IntInput) ExchangeConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExchangeConnectionResponse {
		return vs[0].([]ExchangeConnectionResponse)[vs[1].(int)]
	}).(ExchangeConnectionResponseOutput)
}

// The essential information related to the peer's ASN.
type PeerAsnType struct {
	// The name of the resource.
	Name string `pulumi:"name"`
	// The properties that define a peer's ASN.
	Properties PeerAsnPropertiesResponse `pulumi:"properties"`
	// The type of the resource.
	Type string `pulumi:"type"`
}

// PeerAsnTypeInput is an input type that accepts PeerAsnTypeArgs and PeerAsnTypeOutput values.
// You can construct a concrete instance of `PeerAsnTypeInput` via:
//
//          PeerAsnTypeArgs{...}
type PeerAsnTypeInput interface {
	pulumi.Input

	ToPeerAsnTypeOutput() PeerAsnTypeOutput
	ToPeerAsnTypeOutputWithContext(context.Context) PeerAsnTypeOutput
}

// The essential information related to the peer's ASN.
type PeerAsnTypeArgs struct {
	// The name of the resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties that define a peer's ASN.
	Properties PeerAsnPropertiesResponseInput `pulumi:"properties"`
	// The type of the resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PeerAsnTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeerAsnType)(nil)).Elem()
}

func (i PeerAsnTypeArgs) ToPeerAsnTypeOutput() PeerAsnTypeOutput {
	return i.ToPeerAsnTypeOutputWithContext(context.Background())
}

func (i PeerAsnTypeArgs) ToPeerAsnTypeOutputWithContext(ctx context.Context) PeerAsnTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerAsnTypeOutput)
}

// The essential information related to the peer's ASN.
type PeerAsnTypeOutput struct{ *pulumi.OutputState }

func (PeerAsnTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeerAsnType)(nil)).Elem()
}

func (o PeerAsnTypeOutput) ToPeerAsnTypeOutput() PeerAsnTypeOutput {
	return o
}

func (o PeerAsnTypeOutput) ToPeerAsnTypeOutputWithContext(ctx context.Context) PeerAsnTypeOutput {
	return o
}

// The name of the resource.
func (o PeerAsnTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PeerAsnType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties that define a peer's ASN.
func (o PeerAsnTypeOutput) Properties() PeerAsnPropertiesResponseOutput {
	return o.ApplyT(func(v PeerAsnType) PeerAsnPropertiesResponse { return v.Properties }).(PeerAsnPropertiesResponseOutput)
}

// The type of the resource.
func (o PeerAsnTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PeerAsnType) string { return v.Type }).(pulumi.StringOutput)
}

// The properties that define a peer's ASN.
type PeerAsnProperties struct {
	// The Autonomous System Number (ASN) of the peer.
	PeerAsn *int `pulumi:"peerAsn"`
	// The contact details of the peer.
	PeerContactDetail []ContactDetail `pulumi:"peerContactDetail"`
	// The name of the peer.
	PeerName *string `pulumi:"peerName"`
	// The validation state of the ASN associated with the peer.
	ValidationState *string `pulumi:"validationState"`
}

// PeerAsnPropertiesInput is an input type that accepts PeerAsnPropertiesArgs and PeerAsnPropertiesOutput values.
// You can construct a concrete instance of `PeerAsnPropertiesInput` via:
//
//          PeerAsnPropertiesArgs{...}
type PeerAsnPropertiesInput interface {
	pulumi.Input

	ToPeerAsnPropertiesOutput() PeerAsnPropertiesOutput
	ToPeerAsnPropertiesOutputWithContext(context.Context) PeerAsnPropertiesOutput
}

// The properties that define a peer's ASN.
type PeerAsnPropertiesArgs struct {
	// The Autonomous System Number (ASN) of the peer.
	PeerAsn pulumi.IntPtrInput `pulumi:"peerAsn"`
	// The contact details of the peer.
	PeerContactDetail ContactDetailArrayInput `pulumi:"peerContactDetail"`
	// The name of the peer.
	PeerName pulumi.StringPtrInput `pulumi:"peerName"`
	// The validation state of the ASN associated with the peer.
	ValidationState pulumi.StringPtrInput `pulumi:"validationState"`
}

func (PeerAsnPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeerAsnProperties)(nil)).Elem()
}

func (i PeerAsnPropertiesArgs) ToPeerAsnPropertiesOutput() PeerAsnPropertiesOutput {
	return i.ToPeerAsnPropertiesOutputWithContext(context.Background())
}

func (i PeerAsnPropertiesArgs) ToPeerAsnPropertiesOutputWithContext(ctx context.Context) PeerAsnPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerAsnPropertiesOutput)
}

func (i PeerAsnPropertiesArgs) ToPeerAsnPropertiesPtrOutput() PeerAsnPropertiesPtrOutput {
	return i.ToPeerAsnPropertiesPtrOutputWithContext(context.Background())
}

func (i PeerAsnPropertiesArgs) ToPeerAsnPropertiesPtrOutputWithContext(ctx context.Context) PeerAsnPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerAsnPropertiesOutput).ToPeerAsnPropertiesPtrOutputWithContext(ctx)
}

// PeerAsnPropertiesPtrInput is an input type that accepts PeerAsnPropertiesArgs, PeerAsnPropertiesPtr and PeerAsnPropertiesPtrOutput values.
// You can construct a concrete instance of `PeerAsnPropertiesPtrInput` via:
//
//          PeerAsnPropertiesArgs{...}
//
//  or:
//
//          nil
type PeerAsnPropertiesPtrInput interface {
	pulumi.Input

	ToPeerAsnPropertiesPtrOutput() PeerAsnPropertiesPtrOutput
	ToPeerAsnPropertiesPtrOutputWithContext(context.Context) PeerAsnPropertiesPtrOutput
}

type peerAsnPropertiesPtrType PeerAsnPropertiesArgs

func PeerAsnPropertiesPtr(v *PeerAsnPropertiesArgs) PeerAsnPropertiesPtrInput {
	return (*peerAsnPropertiesPtrType)(v)
}

func (*peerAsnPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeerAsnProperties)(nil)).Elem()
}

func (i *peerAsnPropertiesPtrType) ToPeerAsnPropertiesPtrOutput() PeerAsnPropertiesPtrOutput {
	return i.ToPeerAsnPropertiesPtrOutputWithContext(context.Background())
}

func (i *peerAsnPropertiesPtrType) ToPeerAsnPropertiesPtrOutputWithContext(ctx context.Context) PeerAsnPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerAsnPropertiesPtrOutput)
}

// The properties that define a peer's ASN.
type PeerAsnPropertiesOutput struct{ *pulumi.OutputState }

func (PeerAsnPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeerAsnProperties)(nil)).Elem()
}

func (o PeerAsnPropertiesOutput) ToPeerAsnPropertiesOutput() PeerAsnPropertiesOutput {
	return o
}

func (o PeerAsnPropertiesOutput) ToPeerAsnPropertiesOutputWithContext(ctx context.Context) PeerAsnPropertiesOutput {
	return o
}

func (o PeerAsnPropertiesOutput) ToPeerAsnPropertiesPtrOutput() PeerAsnPropertiesPtrOutput {
	return o.ToPeerAsnPropertiesPtrOutputWithContext(context.Background())
}

func (o PeerAsnPropertiesOutput) ToPeerAsnPropertiesPtrOutputWithContext(ctx context.Context) PeerAsnPropertiesPtrOutput {
	return o.ApplyT(func(v PeerAsnProperties) *PeerAsnProperties {
		return &v
	}).(PeerAsnPropertiesPtrOutput)
}

// The Autonomous System Number (ASN) of the peer.
func (o PeerAsnPropertiesOutput) PeerAsn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PeerAsnProperties) *int { return v.PeerAsn }).(pulumi.IntPtrOutput)
}

// The contact details of the peer.
func (o PeerAsnPropertiesOutput) PeerContactDetail() ContactDetailArrayOutput {
	return o.ApplyT(func(v PeerAsnProperties) []ContactDetail { return v.PeerContactDetail }).(ContactDetailArrayOutput)
}

// The name of the peer.
func (o PeerAsnPropertiesOutput) PeerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeerAsnProperties) *string { return v.PeerName }).(pulumi.StringPtrOutput)
}

// The validation state of the ASN associated with the peer.
func (o PeerAsnPropertiesOutput) ValidationState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeerAsnProperties) *string { return v.ValidationState }).(pulumi.StringPtrOutput)
}

type PeerAsnPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PeerAsnPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeerAsnProperties)(nil)).Elem()
}

func (o PeerAsnPropertiesPtrOutput) ToPeerAsnPropertiesPtrOutput() PeerAsnPropertiesPtrOutput {
	return o
}

func (o PeerAsnPropertiesPtrOutput) ToPeerAsnPropertiesPtrOutputWithContext(ctx context.Context) PeerAsnPropertiesPtrOutput {
	return o
}

func (o PeerAsnPropertiesPtrOutput) Elem() PeerAsnPropertiesOutput {
	return o.ApplyT(func(v *PeerAsnProperties) PeerAsnProperties { return *v }).(PeerAsnPropertiesOutput)
}

// The Autonomous System Number (ASN) of the peer.
func (o PeerAsnPropertiesPtrOutput) PeerAsn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PeerAsnProperties) *int {
		if v == nil {
			return nil
		}
		return v.PeerAsn
	}).(pulumi.IntPtrOutput)
}

// The contact details of the peer.
func (o PeerAsnPropertiesPtrOutput) PeerContactDetail() ContactDetailArrayOutput {
	return o.ApplyT(func(v *PeerAsnProperties) []ContactDetail {
		if v == nil {
			return nil
		}
		return v.PeerContactDetail
	}).(ContactDetailArrayOutput)
}

// The name of the peer.
func (o PeerAsnPropertiesPtrOutput) PeerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeerAsnProperties) *string {
		if v == nil {
			return nil
		}
		return v.PeerName
	}).(pulumi.StringPtrOutput)
}

// The validation state of the ASN associated with the peer.
func (o PeerAsnPropertiesPtrOutput) ValidationState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeerAsnProperties) *string {
		if v == nil {
			return nil
		}
		return v.ValidationState
	}).(pulumi.StringPtrOutput)
}

// The properties that define a peer's ASN.
type PeerAsnPropertiesResponse struct {
	// The error message for the validation state
	ErrorMessage string `pulumi:"errorMessage"`
	// The Autonomous System Number (ASN) of the peer.
	PeerAsn *int `pulumi:"peerAsn"`
	// The contact details of the peer.
	PeerContactDetail []ContactDetailResponse `pulumi:"peerContactDetail"`
	// The name of the peer.
	PeerName *string `pulumi:"peerName"`
	// The validation state of the ASN associated with the peer.
	ValidationState *string `pulumi:"validationState"`
}

// PeerAsnPropertiesResponseInput is an input type that accepts PeerAsnPropertiesResponseArgs and PeerAsnPropertiesResponseOutput values.
// You can construct a concrete instance of `PeerAsnPropertiesResponseInput` via:
//
//          PeerAsnPropertiesResponseArgs{...}
type PeerAsnPropertiesResponseInput interface {
	pulumi.Input

	ToPeerAsnPropertiesResponseOutput() PeerAsnPropertiesResponseOutput
	ToPeerAsnPropertiesResponseOutputWithContext(context.Context) PeerAsnPropertiesResponseOutput
}

// The properties that define a peer's ASN.
type PeerAsnPropertiesResponseArgs struct {
	// The error message for the validation state
	ErrorMessage pulumi.StringInput `pulumi:"errorMessage"`
	// The Autonomous System Number (ASN) of the peer.
	PeerAsn pulumi.IntPtrInput `pulumi:"peerAsn"`
	// The contact details of the peer.
	PeerContactDetail ContactDetailResponseArrayInput `pulumi:"peerContactDetail"`
	// The name of the peer.
	PeerName pulumi.StringPtrInput `pulumi:"peerName"`
	// The validation state of the ASN associated with the peer.
	ValidationState pulumi.StringPtrInput `pulumi:"validationState"`
}

func (PeerAsnPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeerAsnPropertiesResponse)(nil)).Elem()
}

func (i PeerAsnPropertiesResponseArgs) ToPeerAsnPropertiesResponseOutput() PeerAsnPropertiesResponseOutput {
	return i.ToPeerAsnPropertiesResponseOutputWithContext(context.Background())
}

func (i PeerAsnPropertiesResponseArgs) ToPeerAsnPropertiesResponseOutputWithContext(ctx context.Context) PeerAsnPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerAsnPropertiesResponseOutput)
}

func (i PeerAsnPropertiesResponseArgs) ToPeerAsnPropertiesResponsePtrOutput() PeerAsnPropertiesResponsePtrOutput {
	return i.ToPeerAsnPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i PeerAsnPropertiesResponseArgs) ToPeerAsnPropertiesResponsePtrOutputWithContext(ctx context.Context) PeerAsnPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerAsnPropertiesResponseOutput).ToPeerAsnPropertiesResponsePtrOutputWithContext(ctx)
}

// PeerAsnPropertiesResponsePtrInput is an input type that accepts PeerAsnPropertiesResponseArgs, PeerAsnPropertiesResponsePtr and PeerAsnPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `PeerAsnPropertiesResponsePtrInput` via:
//
//          PeerAsnPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type PeerAsnPropertiesResponsePtrInput interface {
	pulumi.Input

	ToPeerAsnPropertiesResponsePtrOutput() PeerAsnPropertiesResponsePtrOutput
	ToPeerAsnPropertiesResponsePtrOutputWithContext(context.Context) PeerAsnPropertiesResponsePtrOutput
}

type peerAsnPropertiesResponsePtrType PeerAsnPropertiesResponseArgs

func PeerAsnPropertiesResponsePtr(v *PeerAsnPropertiesResponseArgs) PeerAsnPropertiesResponsePtrInput {
	return (*peerAsnPropertiesResponsePtrType)(v)
}

func (*peerAsnPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeerAsnPropertiesResponse)(nil)).Elem()
}

func (i *peerAsnPropertiesResponsePtrType) ToPeerAsnPropertiesResponsePtrOutput() PeerAsnPropertiesResponsePtrOutput {
	return i.ToPeerAsnPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *peerAsnPropertiesResponsePtrType) ToPeerAsnPropertiesResponsePtrOutputWithContext(ctx context.Context) PeerAsnPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerAsnPropertiesResponsePtrOutput)
}

// The properties that define a peer's ASN.
type PeerAsnPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PeerAsnPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeerAsnPropertiesResponse)(nil)).Elem()
}

func (o PeerAsnPropertiesResponseOutput) ToPeerAsnPropertiesResponseOutput() PeerAsnPropertiesResponseOutput {
	return o
}

func (o PeerAsnPropertiesResponseOutput) ToPeerAsnPropertiesResponseOutputWithContext(ctx context.Context) PeerAsnPropertiesResponseOutput {
	return o
}

func (o PeerAsnPropertiesResponseOutput) ToPeerAsnPropertiesResponsePtrOutput() PeerAsnPropertiesResponsePtrOutput {
	return o.ToPeerAsnPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o PeerAsnPropertiesResponseOutput) ToPeerAsnPropertiesResponsePtrOutputWithContext(ctx context.Context) PeerAsnPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PeerAsnPropertiesResponse) *PeerAsnPropertiesResponse {
		return &v
	}).(PeerAsnPropertiesResponsePtrOutput)
}

// The error message for the validation state
func (o PeerAsnPropertiesResponseOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v PeerAsnPropertiesResponse) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// The Autonomous System Number (ASN) of the peer.
func (o PeerAsnPropertiesResponseOutput) PeerAsn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PeerAsnPropertiesResponse) *int { return v.PeerAsn }).(pulumi.IntPtrOutput)
}

// The contact details of the peer.
func (o PeerAsnPropertiesResponseOutput) PeerContactDetail() ContactDetailResponseArrayOutput {
	return o.ApplyT(func(v PeerAsnPropertiesResponse) []ContactDetailResponse { return v.PeerContactDetail }).(ContactDetailResponseArrayOutput)
}

// The name of the peer.
func (o PeerAsnPropertiesResponseOutput) PeerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeerAsnPropertiesResponse) *string { return v.PeerName }).(pulumi.StringPtrOutput)
}

// The validation state of the ASN associated with the peer.
func (o PeerAsnPropertiesResponseOutput) ValidationState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeerAsnPropertiesResponse) *string { return v.ValidationState }).(pulumi.StringPtrOutput)
}

type PeerAsnPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PeerAsnPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeerAsnPropertiesResponse)(nil)).Elem()
}

func (o PeerAsnPropertiesResponsePtrOutput) ToPeerAsnPropertiesResponsePtrOutput() PeerAsnPropertiesResponsePtrOutput {
	return o
}

func (o PeerAsnPropertiesResponsePtrOutput) ToPeerAsnPropertiesResponsePtrOutputWithContext(ctx context.Context) PeerAsnPropertiesResponsePtrOutput {
	return o
}

func (o PeerAsnPropertiesResponsePtrOutput) Elem() PeerAsnPropertiesResponseOutput {
	return o.ApplyT(func(v *PeerAsnPropertiesResponse) PeerAsnPropertiesResponse { return *v }).(PeerAsnPropertiesResponseOutput)
}

// The error message for the validation state
func (o PeerAsnPropertiesResponsePtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeerAsnPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// The Autonomous System Number (ASN) of the peer.
func (o PeerAsnPropertiesResponsePtrOutput) PeerAsn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PeerAsnPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.PeerAsn
	}).(pulumi.IntPtrOutput)
}

// The contact details of the peer.
func (o PeerAsnPropertiesResponsePtrOutput) PeerContactDetail() ContactDetailResponseArrayOutput {
	return o.ApplyT(func(v *PeerAsnPropertiesResponse) []ContactDetailResponse {
		if v == nil {
			return nil
		}
		return v.PeerContactDetail
	}).(ContactDetailResponseArrayOutput)
}

// The name of the peer.
func (o PeerAsnPropertiesResponsePtrOutput) PeerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeerAsnPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PeerName
	}).(pulumi.StringPtrOutput)
}

// The validation state of the ASN associated with the peer.
func (o PeerAsnPropertiesResponsePtrOutput) ValidationState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeerAsnPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ValidationState
	}).(pulumi.StringPtrOutput)
}

// Peering is a logical representation of a set of connections to the Microsoft Cloud Edge at a location.
type PeeringType struct {
	// The kind of the peering.
	Kind string `pulumi:"kind"`
	// The location of the resource.
	Location string `pulumi:"location"`
	// The name of the resource.
	Name string `pulumi:"name"`
	// The properties that define a peering.
	Properties PeeringPropertiesResponse `pulumi:"properties"`
	// The SKU that defines the tier and kind of the peering.
	Sku PeeringSkuResponse `pulumi:"sku"`
	// The resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource.
	Type string `pulumi:"type"`
}

// PeeringTypeInput is an input type that accepts PeeringTypeArgs and PeeringTypeOutput values.
// You can construct a concrete instance of `PeeringTypeInput` via:
//
//          PeeringTypeArgs{...}
type PeeringTypeInput interface {
	pulumi.Input

	ToPeeringTypeOutput() PeeringTypeOutput
	ToPeeringTypeOutputWithContext(context.Context) PeeringTypeOutput
}

// Peering is a logical representation of a set of connections to the Microsoft Cloud Edge at a location.
type PeeringTypeArgs struct {
	// The kind of the peering.
	Kind pulumi.StringInput `pulumi:"kind"`
	// The location of the resource.
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties that define a peering.
	Properties PeeringPropertiesResponseInput `pulumi:"properties"`
	// The SKU that defines the tier and kind of the peering.
	Sku PeeringSkuResponseInput `pulumi:"sku"`
	// The resource tags.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The type of the resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PeeringTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringType)(nil)).Elem()
}

func (i PeeringTypeArgs) ToPeeringTypeOutput() PeeringTypeOutput {
	return i.ToPeeringTypeOutputWithContext(context.Background())
}

func (i PeeringTypeArgs) ToPeeringTypeOutputWithContext(ctx context.Context) PeeringTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringTypeOutput)
}

// Peering is a logical representation of a set of connections to the Microsoft Cloud Edge at a location.
type PeeringTypeOutput struct{ *pulumi.OutputState }

func (PeeringTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringType)(nil)).Elem()
}

func (o PeeringTypeOutput) ToPeeringTypeOutput() PeeringTypeOutput {
	return o
}

func (o PeeringTypeOutput) ToPeeringTypeOutputWithContext(ctx context.Context) PeeringTypeOutput {
	return o
}

// The kind of the peering.
func (o PeeringTypeOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringType) string { return v.Kind }).(pulumi.StringOutput)
}

// The location of the resource.
func (o PeeringTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringType) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource.
func (o PeeringTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties that define a peering.
func (o PeeringTypeOutput) Properties() PeeringPropertiesResponseOutput {
	return o.ApplyT(func(v PeeringType) PeeringPropertiesResponse { return v.Properties }).(PeeringPropertiesResponseOutput)
}

// The SKU that defines the tier and kind of the peering.
func (o PeeringTypeOutput) Sku() PeeringSkuResponseOutput {
	return o.ApplyT(func(v PeeringType) PeeringSkuResponse { return v.Sku }).(PeeringSkuResponseOutput)
}

// The resource tags.
func (o PeeringTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PeeringType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource.
func (o PeeringTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringType) string { return v.Type }).(pulumi.StringOutput)
}

// The properties that define connectivity to the Microsoft Cloud Edge.
type PeeringProperties struct {
	// The properties that define a direct peering.
	Direct *PeeringPropertiesDirect `pulumi:"direct"`
	// The properties that define an exchange peering.
	Exchange *PeeringPropertiesExchange `pulumi:"exchange"`
	// The location of the peering.
	PeeringLocation *string `pulumi:"peeringLocation"`
}

// PeeringPropertiesInput is an input type that accepts PeeringPropertiesArgs and PeeringPropertiesOutput values.
// You can construct a concrete instance of `PeeringPropertiesInput` via:
//
//          PeeringPropertiesArgs{...}
type PeeringPropertiesInput interface {
	pulumi.Input

	ToPeeringPropertiesOutput() PeeringPropertiesOutput
	ToPeeringPropertiesOutputWithContext(context.Context) PeeringPropertiesOutput
}

// The properties that define connectivity to the Microsoft Cloud Edge.
type PeeringPropertiesArgs struct {
	// The properties that define a direct peering.
	Direct PeeringPropertiesDirectPtrInput `pulumi:"direct"`
	// The properties that define an exchange peering.
	Exchange PeeringPropertiesExchangePtrInput `pulumi:"exchange"`
	// The location of the peering.
	PeeringLocation pulumi.StringPtrInput `pulumi:"peeringLocation"`
}

func (PeeringPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringProperties)(nil)).Elem()
}

func (i PeeringPropertiesArgs) ToPeeringPropertiesOutput() PeeringPropertiesOutput {
	return i.ToPeeringPropertiesOutputWithContext(context.Background())
}

func (i PeeringPropertiesArgs) ToPeeringPropertiesOutputWithContext(ctx context.Context) PeeringPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesOutput)
}

func (i PeeringPropertiesArgs) ToPeeringPropertiesPtrOutput() PeeringPropertiesPtrOutput {
	return i.ToPeeringPropertiesPtrOutputWithContext(context.Background())
}

func (i PeeringPropertiesArgs) ToPeeringPropertiesPtrOutputWithContext(ctx context.Context) PeeringPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesOutput).ToPeeringPropertiesPtrOutputWithContext(ctx)
}

// PeeringPropertiesPtrInput is an input type that accepts PeeringPropertiesArgs, PeeringPropertiesPtr and PeeringPropertiesPtrOutput values.
// You can construct a concrete instance of `PeeringPropertiesPtrInput` via:
//
//          PeeringPropertiesArgs{...}
//
//  or:
//
//          nil
type PeeringPropertiesPtrInput interface {
	pulumi.Input

	ToPeeringPropertiesPtrOutput() PeeringPropertiesPtrOutput
	ToPeeringPropertiesPtrOutputWithContext(context.Context) PeeringPropertiesPtrOutput
}

type peeringPropertiesPtrType PeeringPropertiesArgs

func PeeringPropertiesPtr(v *PeeringPropertiesArgs) PeeringPropertiesPtrInput {
	return (*peeringPropertiesPtrType)(v)
}

func (*peeringPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringProperties)(nil)).Elem()
}

func (i *peeringPropertiesPtrType) ToPeeringPropertiesPtrOutput() PeeringPropertiesPtrOutput {
	return i.ToPeeringPropertiesPtrOutputWithContext(context.Background())
}

func (i *peeringPropertiesPtrType) ToPeeringPropertiesPtrOutputWithContext(ctx context.Context) PeeringPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesPtrOutput)
}

// The properties that define connectivity to the Microsoft Cloud Edge.
type PeeringPropertiesOutput struct{ *pulumi.OutputState }

func (PeeringPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringProperties)(nil)).Elem()
}

func (o PeeringPropertiesOutput) ToPeeringPropertiesOutput() PeeringPropertiesOutput {
	return o
}

func (o PeeringPropertiesOutput) ToPeeringPropertiesOutputWithContext(ctx context.Context) PeeringPropertiesOutput {
	return o
}

func (o PeeringPropertiesOutput) ToPeeringPropertiesPtrOutput() PeeringPropertiesPtrOutput {
	return o.ToPeeringPropertiesPtrOutputWithContext(context.Background())
}

func (o PeeringPropertiesOutput) ToPeeringPropertiesPtrOutputWithContext(ctx context.Context) PeeringPropertiesPtrOutput {
	return o.ApplyT(func(v PeeringProperties) *PeeringProperties {
		return &v
	}).(PeeringPropertiesPtrOutput)
}

// The properties that define a direct peering.
func (o PeeringPropertiesOutput) Direct() PeeringPropertiesDirectPtrOutput {
	return o.ApplyT(func(v PeeringProperties) *PeeringPropertiesDirect { return v.Direct }).(PeeringPropertiesDirectPtrOutput)
}

// The properties that define an exchange peering.
func (o PeeringPropertiesOutput) Exchange() PeeringPropertiesExchangePtrOutput {
	return o.ApplyT(func(v PeeringProperties) *PeeringPropertiesExchange { return v.Exchange }).(PeeringPropertiesExchangePtrOutput)
}

// The location of the peering.
func (o PeeringPropertiesOutput) PeeringLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringProperties) *string { return v.PeeringLocation }).(pulumi.StringPtrOutput)
}

type PeeringPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PeeringPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringProperties)(nil)).Elem()
}

func (o PeeringPropertiesPtrOutput) ToPeeringPropertiesPtrOutput() PeeringPropertiesPtrOutput {
	return o
}

func (o PeeringPropertiesPtrOutput) ToPeeringPropertiesPtrOutputWithContext(ctx context.Context) PeeringPropertiesPtrOutput {
	return o
}

func (o PeeringPropertiesPtrOutput) Elem() PeeringPropertiesOutput {
	return o.ApplyT(func(v *PeeringProperties) PeeringProperties { return *v }).(PeeringPropertiesOutput)
}

// The properties that define a direct peering.
func (o PeeringPropertiesPtrOutput) Direct() PeeringPropertiesDirectPtrOutput {
	return o.ApplyT(func(v *PeeringProperties) *PeeringPropertiesDirect {
		if v == nil {
			return nil
		}
		return v.Direct
	}).(PeeringPropertiesDirectPtrOutput)
}

// The properties that define an exchange peering.
func (o PeeringPropertiesPtrOutput) Exchange() PeeringPropertiesExchangePtrOutput {
	return o.ApplyT(func(v *PeeringProperties) *PeeringPropertiesExchange {
		if v == nil {
			return nil
		}
		return v.Exchange
	}).(PeeringPropertiesExchangePtrOutput)
}

// The location of the peering.
func (o PeeringPropertiesPtrOutput) PeeringLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringProperties) *string {
		if v == nil {
			return nil
		}
		return v.PeeringLocation
	}).(pulumi.StringPtrOutput)
}

// The properties that define a direct peering.
type PeeringPropertiesDirect struct {
	// The set of connections that constitute a direct peering.
	Connections []DirectConnection `pulumi:"connections"`
	// The type of direct peering.
	DirectPeeringType *string `pulumi:"directPeeringType"`
	// The reference of the peer ASN.
	PeerAsn *SubResource `pulumi:"peerAsn"`
}

// PeeringPropertiesDirectInput is an input type that accepts PeeringPropertiesDirectArgs and PeeringPropertiesDirectOutput values.
// You can construct a concrete instance of `PeeringPropertiesDirectInput` via:
//
//          PeeringPropertiesDirectArgs{...}
type PeeringPropertiesDirectInput interface {
	pulumi.Input

	ToPeeringPropertiesDirectOutput() PeeringPropertiesDirectOutput
	ToPeeringPropertiesDirectOutputWithContext(context.Context) PeeringPropertiesDirectOutput
}

// The properties that define a direct peering.
type PeeringPropertiesDirectArgs struct {
	// The set of connections that constitute a direct peering.
	Connections DirectConnectionArrayInput `pulumi:"connections"`
	// The type of direct peering.
	DirectPeeringType pulumi.StringPtrInput `pulumi:"directPeeringType"`
	// The reference of the peer ASN.
	PeerAsn SubResourcePtrInput `pulumi:"peerAsn"`
}

func (PeeringPropertiesDirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringPropertiesDirect)(nil)).Elem()
}

func (i PeeringPropertiesDirectArgs) ToPeeringPropertiesDirectOutput() PeeringPropertiesDirectOutput {
	return i.ToPeeringPropertiesDirectOutputWithContext(context.Background())
}

func (i PeeringPropertiesDirectArgs) ToPeeringPropertiesDirectOutputWithContext(ctx context.Context) PeeringPropertiesDirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesDirectOutput)
}

func (i PeeringPropertiesDirectArgs) ToPeeringPropertiesDirectPtrOutput() PeeringPropertiesDirectPtrOutput {
	return i.ToPeeringPropertiesDirectPtrOutputWithContext(context.Background())
}

func (i PeeringPropertiesDirectArgs) ToPeeringPropertiesDirectPtrOutputWithContext(ctx context.Context) PeeringPropertiesDirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesDirectOutput).ToPeeringPropertiesDirectPtrOutputWithContext(ctx)
}

// PeeringPropertiesDirectPtrInput is an input type that accepts PeeringPropertiesDirectArgs, PeeringPropertiesDirectPtr and PeeringPropertiesDirectPtrOutput values.
// You can construct a concrete instance of `PeeringPropertiesDirectPtrInput` via:
//
//          PeeringPropertiesDirectArgs{...}
//
//  or:
//
//          nil
type PeeringPropertiesDirectPtrInput interface {
	pulumi.Input

	ToPeeringPropertiesDirectPtrOutput() PeeringPropertiesDirectPtrOutput
	ToPeeringPropertiesDirectPtrOutputWithContext(context.Context) PeeringPropertiesDirectPtrOutput
}

type peeringPropertiesDirectPtrType PeeringPropertiesDirectArgs

func PeeringPropertiesDirectPtr(v *PeeringPropertiesDirectArgs) PeeringPropertiesDirectPtrInput {
	return (*peeringPropertiesDirectPtrType)(v)
}

func (*peeringPropertiesDirectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringPropertiesDirect)(nil)).Elem()
}

func (i *peeringPropertiesDirectPtrType) ToPeeringPropertiesDirectPtrOutput() PeeringPropertiesDirectPtrOutput {
	return i.ToPeeringPropertiesDirectPtrOutputWithContext(context.Background())
}

func (i *peeringPropertiesDirectPtrType) ToPeeringPropertiesDirectPtrOutputWithContext(ctx context.Context) PeeringPropertiesDirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesDirectPtrOutput)
}

// The properties that define a direct peering.
type PeeringPropertiesDirectOutput struct{ *pulumi.OutputState }

func (PeeringPropertiesDirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringPropertiesDirect)(nil)).Elem()
}

func (o PeeringPropertiesDirectOutput) ToPeeringPropertiesDirectOutput() PeeringPropertiesDirectOutput {
	return o
}

func (o PeeringPropertiesDirectOutput) ToPeeringPropertiesDirectOutputWithContext(ctx context.Context) PeeringPropertiesDirectOutput {
	return o
}

func (o PeeringPropertiesDirectOutput) ToPeeringPropertiesDirectPtrOutput() PeeringPropertiesDirectPtrOutput {
	return o.ToPeeringPropertiesDirectPtrOutputWithContext(context.Background())
}

func (o PeeringPropertiesDirectOutput) ToPeeringPropertiesDirectPtrOutputWithContext(ctx context.Context) PeeringPropertiesDirectPtrOutput {
	return o.ApplyT(func(v PeeringPropertiesDirect) *PeeringPropertiesDirect {
		return &v
	}).(PeeringPropertiesDirectPtrOutput)
}

// The set of connections that constitute a direct peering.
func (o PeeringPropertiesDirectOutput) Connections() DirectConnectionArrayOutput {
	return o.ApplyT(func(v PeeringPropertiesDirect) []DirectConnection { return v.Connections }).(DirectConnectionArrayOutput)
}

// The type of direct peering.
func (o PeeringPropertiesDirectOutput) DirectPeeringType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringPropertiesDirect) *string { return v.DirectPeeringType }).(pulumi.StringPtrOutput)
}

// The reference of the peer ASN.
func (o PeeringPropertiesDirectOutput) PeerAsn() SubResourcePtrOutput {
	return o.ApplyT(func(v PeeringPropertiesDirect) *SubResource { return v.PeerAsn }).(SubResourcePtrOutput)
}

type PeeringPropertiesDirectPtrOutput struct{ *pulumi.OutputState }

func (PeeringPropertiesDirectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringPropertiesDirect)(nil)).Elem()
}

func (o PeeringPropertiesDirectPtrOutput) ToPeeringPropertiesDirectPtrOutput() PeeringPropertiesDirectPtrOutput {
	return o
}

func (o PeeringPropertiesDirectPtrOutput) ToPeeringPropertiesDirectPtrOutputWithContext(ctx context.Context) PeeringPropertiesDirectPtrOutput {
	return o
}

func (o PeeringPropertiesDirectPtrOutput) Elem() PeeringPropertiesDirectOutput {
	return o.ApplyT(func(v *PeeringPropertiesDirect) PeeringPropertiesDirect { return *v }).(PeeringPropertiesDirectOutput)
}

// The set of connections that constitute a direct peering.
func (o PeeringPropertiesDirectPtrOutput) Connections() DirectConnectionArrayOutput {
	return o.ApplyT(func(v *PeeringPropertiesDirect) []DirectConnection {
		if v == nil {
			return nil
		}
		return v.Connections
	}).(DirectConnectionArrayOutput)
}

// The type of direct peering.
func (o PeeringPropertiesDirectPtrOutput) DirectPeeringType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringPropertiesDirect) *string {
		if v == nil {
			return nil
		}
		return v.DirectPeeringType
	}).(pulumi.StringPtrOutput)
}

// The reference of the peer ASN.
func (o PeeringPropertiesDirectPtrOutput) PeerAsn() SubResourcePtrOutput {
	return o.ApplyT(func(v *PeeringPropertiesDirect) *SubResource {
		if v == nil {
			return nil
		}
		return v.PeerAsn
	}).(SubResourcePtrOutput)
}

// The properties that define a direct peering.
type PeeringPropertiesDirectResponse struct {
	// The set of connections that constitute a direct peering.
	Connections []DirectConnectionResponse `pulumi:"connections"`
	// The type of direct peering.
	DirectPeeringType *string `pulumi:"directPeeringType"`
	// The reference of the peer ASN.
	PeerAsn *SubResourceResponse `pulumi:"peerAsn"`
	// The flag that indicates whether or not the peering is used for peering service.
	UseForPeeringService bool `pulumi:"useForPeeringService"`
}

// PeeringPropertiesDirectResponseInput is an input type that accepts PeeringPropertiesDirectResponseArgs and PeeringPropertiesDirectResponseOutput values.
// You can construct a concrete instance of `PeeringPropertiesDirectResponseInput` via:
//
//          PeeringPropertiesDirectResponseArgs{...}
type PeeringPropertiesDirectResponseInput interface {
	pulumi.Input

	ToPeeringPropertiesDirectResponseOutput() PeeringPropertiesDirectResponseOutput
	ToPeeringPropertiesDirectResponseOutputWithContext(context.Context) PeeringPropertiesDirectResponseOutput
}

// The properties that define a direct peering.
type PeeringPropertiesDirectResponseArgs struct {
	// The set of connections that constitute a direct peering.
	Connections DirectConnectionResponseArrayInput `pulumi:"connections"`
	// The type of direct peering.
	DirectPeeringType pulumi.StringPtrInput `pulumi:"directPeeringType"`
	// The reference of the peer ASN.
	PeerAsn SubResourceResponsePtrInput `pulumi:"peerAsn"`
	// The flag that indicates whether or not the peering is used for peering service.
	UseForPeeringService pulumi.BoolInput `pulumi:"useForPeeringService"`
}

func (PeeringPropertiesDirectResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringPropertiesDirectResponse)(nil)).Elem()
}

func (i PeeringPropertiesDirectResponseArgs) ToPeeringPropertiesDirectResponseOutput() PeeringPropertiesDirectResponseOutput {
	return i.ToPeeringPropertiesDirectResponseOutputWithContext(context.Background())
}

func (i PeeringPropertiesDirectResponseArgs) ToPeeringPropertiesDirectResponseOutputWithContext(ctx context.Context) PeeringPropertiesDirectResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesDirectResponseOutput)
}

func (i PeeringPropertiesDirectResponseArgs) ToPeeringPropertiesDirectResponsePtrOutput() PeeringPropertiesDirectResponsePtrOutput {
	return i.ToPeeringPropertiesDirectResponsePtrOutputWithContext(context.Background())
}

func (i PeeringPropertiesDirectResponseArgs) ToPeeringPropertiesDirectResponsePtrOutputWithContext(ctx context.Context) PeeringPropertiesDirectResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesDirectResponseOutput).ToPeeringPropertiesDirectResponsePtrOutputWithContext(ctx)
}

// PeeringPropertiesDirectResponsePtrInput is an input type that accepts PeeringPropertiesDirectResponseArgs, PeeringPropertiesDirectResponsePtr and PeeringPropertiesDirectResponsePtrOutput values.
// You can construct a concrete instance of `PeeringPropertiesDirectResponsePtrInput` via:
//
//          PeeringPropertiesDirectResponseArgs{...}
//
//  or:
//
//          nil
type PeeringPropertiesDirectResponsePtrInput interface {
	pulumi.Input

	ToPeeringPropertiesDirectResponsePtrOutput() PeeringPropertiesDirectResponsePtrOutput
	ToPeeringPropertiesDirectResponsePtrOutputWithContext(context.Context) PeeringPropertiesDirectResponsePtrOutput
}

type peeringPropertiesDirectResponsePtrType PeeringPropertiesDirectResponseArgs

func PeeringPropertiesDirectResponsePtr(v *PeeringPropertiesDirectResponseArgs) PeeringPropertiesDirectResponsePtrInput {
	return (*peeringPropertiesDirectResponsePtrType)(v)
}

func (*peeringPropertiesDirectResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringPropertiesDirectResponse)(nil)).Elem()
}

func (i *peeringPropertiesDirectResponsePtrType) ToPeeringPropertiesDirectResponsePtrOutput() PeeringPropertiesDirectResponsePtrOutput {
	return i.ToPeeringPropertiesDirectResponsePtrOutputWithContext(context.Background())
}

func (i *peeringPropertiesDirectResponsePtrType) ToPeeringPropertiesDirectResponsePtrOutputWithContext(ctx context.Context) PeeringPropertiesDirectResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesDirectResponsePtrOutput)
}

// The properties that define a direct peering.
type PeeringPropertiesDirectResponseOutput struct{ *pulumi.OutputState }

func (PeeringPropertiesDirectResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringPropertiesDirectResponse)(nil)).Elem()
}

func (o PeeringPropertiesDirectResponseOutput) ToPeeringPropertiesDirectResponseOutput() PeeringPropertiesDirectResponseOutput {
	return o
}

func (o PeeringPropertiesDirectResponseOutput) ToPeeringPropertiesDirectResponseOutputWithContext(ctx context.Context) PeeringPropertiesDirectResponseOutput {
	return o
}

func (o PeeringPropertiesDirectResponseOutput) ToPeeringPropertiesDirectResponsePtrOutput() PeeringPropertiesDirectResponsePtrOutput {
	return o.ToPeeringPropertiesDirectResponsePtrOutputWithContext(context.Background())
}

func (o PeeringPropertiesDirectResponseOutput) ToPeeringPropertiesDirectResponsePtrOutputWithContext(ctx context.Context) PeeringPropertiesDirectResponsePtrOutput {
	return o.ApplyT(func(v PeeringPropertiesDirectResponse) *PeeringPropertiesDirectResponse {
		return &v
	}).(PeeringPropertiesDirectResponsePtrOutput)
}

// The set of connections that constitute a direct peering.
func (o PeeringPropertiesDirectResponseOutput) Connections() DirectConnectionResponseArrayOutput {
	return o.ApplyT(func(v PeeringPropertiesDirectResponse) []DirectConnectionResponse { return v.Connections }).(DirectConnectionResponseArrayOutput)
}

// The type of direct peering.
func (o PeeringPropertiesDirectResponseOutput) DirectPeeringType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringPropertiesDirectResponse) *string { return v.DirectPeeringType }).(pulumi.StringPtrOutput)
}

// The reference of the peer ASN.
func (o PeeringPropertiesDirectResponseOutput) PeerAsn() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v PeeringPropertiesDirectResponse) *SubResourceResponse { return v.PeerAsn }).(SubResourceResponsePtrOutput)
}

// The flag that indicates whether or not the peering is used for peering service.
func (o PeeringPropertiesDirectResponseOutput) UseForPeeringService() pulumi.BoolOutput {
	return o.ApplyT(func(v PeeringPropertiesDirectResponse) bool { return v.UseForPeeringService }).(pulumi.BoolOutput)
}

type PeeringPropertiesDirectResponsePtrOutput struct{ *pulumi.OutputState }

func (PeeringPropertiesDirectResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringPropertiesDirectResponse)(nil)).Elem()
}

func (o PeeringPropertiesDirectResponsePtrOutput) ToPeeringPropertiesDirectResponsePtrOutput() PeeringPropertiesDirectResponsePtrOutput {
	return o
}

func (o PeeringPropertiesDirectResponsePtrOutput) ToPeeringPropertiesDirectResponsePtrOutputWithContext(ctx context.Context) PeeringPropertiesDirectResponsePtrOutput {
	return o
}

func (o PeeringPropertiesDirectResponsePtrOutput) Elem() PeeringPropertiesDirectResponseOutput {
	return o.ApplyT(func(v *PeeringPropertiesDirectResponse) PeeringPropertiesDirectResponse { return *v }).(PeeringPropertiesDirectResponseOutput)
}

// The set of connections that constitute a direct peering.
func (o PeeringPropertiesDirectResponsePtrOutput) Connections() DirectConnectionResponseArrayOutput {
	return o.ApplyT(func(v *PeeringPropertiesDirectResponse) []DirectConnectionResponse {
		if v == nil {
			return nil
		}
		return v.Connections
	}).(DirectConnectionResponseArrayOutput)
}

// The type of direct peering.
func (o PeeringPropertiesDirectResponsePtrOutput) DirectPeeringType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringPropertiesDirectResponse) *string {
		if v == nil {
			return nil
		}
		return v.DirectPeeringType
	}).(pulumi.StringPtrOutput)
}

// The reference of the peer ASN.
func (o PeeringPropertiesDirectResponsePtrOutput) PeerAsn() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *PeeringPropertiesDirectResponse) *SubResourceResponse {
		if v == nil {
			return nil
		}
		return v.PeerAsn
	}).(SubResourceResponsePtrOutput)
}

// The flag that indicates whether or not the peering is used for peering service.
func (o PeeringPropertiesDirectResponsePtrOutput) UseForPeeringService() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PeeringPropertiesDirectResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.UseForPeeringService
	}).(pulumi.BoolPtrOutput)
}

// The properties that define an exchange peering.
type PeeringPropertiesExchange struct {
	// The set of connections that constitute an exchange peering.
	Connections []ExchangeConnection `pulumi:"connections"`
	// The reference of the peer ASN.
	PeerAsn *SubResource `pulumi:"peerAsn"`
}

// PeeringPropertiesExchangeInput is an input type that accepts PeeringPropertiesExchangeArgs and PeeringPropertiesExchangeOutput values.
// You can construct a concrete instance of `PeeringPropertiesExchangeInput` via:
//
//          PeeringPropertiesExchangeArgs{...}
type PeeringPropertiesExchangeInput interface {
	pulumi.Input

	ToPeeringPropertiesExchangeOutput() PeeringPropertiesExchangeOutput
	ToPeeringPropertiesExchangeOutputWithContext(context.Context) PeeringPropertiesExchangeOutput
}

// The properties that define an exchange peering.
type PeeringPropertiesExchangeArgs struct {
	// The set of connections that constitute an exchange peering.
	Connections ExchangeConnectionArrayInput `pulumi:"connections"`
	// The reference of the peer ASN.
	PeerAsn SubResourcePtrInput `pulumi:"peerAsn"`
}

func (PeeringPropertiesExchangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringPropertiesExchange)(nil)).Elem()
}

func (i PeeringPropertiesExchangeArgs) ToPeeringPropertiesExchangeOutput() PeeringPropertiesExchangeOutput {
	return i.ToPeeringPropertiesExchangeOutputWithContext(context.Background())
}

func (i PeeringPropertiesExchangeArgs) ToPeeringPropertiesExchangeOutputWithContext(ctx context.Context) PeeringPropertiesExchangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesExchangeOutput)
}

func (i PeeringPropertiesExchangeArgs) ToPeeringPropertiesExchangePtrOutput() PeeringPropertiesExchangePtrOutput {
	return i.ToPeeringPropertiesExchangePtrOutputWithContext(context.Background())
}

func (i PeeringPropertiesExchangeArgs) ToPeeringPropertiesExchangePtrOutputWithContext(ctx context.Context) PeeringPropertiesExchangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesExchangeOutput).ToPeeringPropertiesExchangePtrOutputWithContext(ctx)
}

// PeeringPropertiesExchangePtrInput is an input type that accepts PeeringPropertiesExchangeArgs, PeeringPropertiesExchangePtr and PeeringPropertiesExchangePtrOutput values.
// You can construct a concrete instance of `PeeringPropertiesExchangePtrInput` via:
//
//          PeeringPropertiesExchangeArgs{...}
//
//  or:
//
//          nil
type PeeringPropertiesExchangePtrInput interface {
	pulumi.Input

	ToPeeringPropertiesExchangePtrOutput() PeeringPropertiesExchangePtrOutput
	ToPeeringPropertiesExchangePtrOutputWithContext(context.Context) PeeringPropertiesExchangePtrOutput
}

type peeringPropertiesExchangePtrType PeeringPropertiesExchangeArgs

func PeeringPropertiesExchangePtr(v *PeeringPropertiesExchangeArgs) PeeringPropertiesExchangePtrInput {
	return (*peeringPropertiesExchangePtrType)(v)
}

func (*peeringPropertiesExchangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringPropertiesExchange)(nil)).Elem()
}

func (i *peeringPropertiesExchangePtrType) ToPeeringPropertiesExchangePtrOutput() PeeringPropertiesExchangePtrOutput {
	return i.ToPeeringPropertiesExchangePtrOutputWithContext(context.Background())
}

func (i *peeringPropertiesExchangePtrType) ToPeeringPropertiesExchangePtrOutputWithContext(ctx context.Context) PeeringPropertiesExchangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesExchangePtrOutput)
}

// The properties that define an exchange peering.
type PeeringPropertiesExchangeOutput struct{ *pulumi.OutputState }

func (PeeringPropertiesExchangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringPropertiesExchange)(nil)).Elem()
}

func (o PeeringPropertiesExchangeOutput) ToPeeringPropertiesExchangeOutput() PeeringPropertiesExchangeOutput {
	return o
}

func (o PeeringPropertiesExchangeOutput) ToPeeringPropertiesExchangeOutputWithContext(ctx context.Context) PeeringPropertiesExchangeOutput {
	return o
}

func (o PeeringPropertiesExchangeOutput) ToPeeringPropertiesExchangePtrOutput() PeeringPropertiesExchangePtrOutput {
	return o.ToPeeringPropertiesExchangePtrOutputWithContext(context.Background())
}

func (o PeeringPropertiesExchangeOutput) ToPeeringPropertiesExchangePtrOutputWithContext(ctx context.Context) PeeringPropertiesExchangePtrOutput {
	return o.ApplyT(func(v PeeringPropertiesExchange) *PeeringPropertiesExchange {
		return &v
	}).(PeeringPropertiesExchangePtrOutput)
}

// The set of connections that constitute an exchange peering.
func (o PeeringPropertiesExchangeOutput) Connections() ExchangeConnectionArrayOutput {
	return o.ApplyT(func(v PeeringPropertiesExchange) []ExchangeConnection { return v.Connections }).(ExchangeConnectionArrayOutput)
}

// The reference of the peer ASN.
func (o PeeringPropertiesExchangeOutput) PeerAsn() SubResourcePtrOutput {
	return o.ApplyT(func(v PeeringPropertiesExchange) *SubResource { return v.PeerAsn }).(SubResourcePtrOutput)
}

type PeeringPropertiesExchangePtrOutput struct{ *pulumi.OutputState }

func (PeeringPropertiesExchangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringPropertiesExchange)(nil)).Elem()
}

func (o PeeringPropertiesExchangePtrOutput) ToPeeringPropertiesExchangePtrOutput() PeeringPropertiesExchangePtrOutput {
	return o
}

func (o PeeringPropertiesExchangePtrOutput) ToPeeringPropertiesExchangePtrOutputWithContext(ctx context.Context) PeeringPropertiesExchangePtrOutput {
	return o
}

func (o PeeringPropertiesExchangePtrOutput) Elem() PeeringPropertiesExchangeOutput {
	return o.ApplyT(func(v *PeeringPropertiesExchange) PeeringPropertiesExchange { return *v }).(PeeringPropertiesExchangeOutput)
}

// The set of connections that constitute an exchange peering.
func (o PeeringPropertiesExchangePtrOutput) Connections() ExchangeConnectionArrayOutput {
	return o.ApplyT(func(v *PeeringPropertiesExchange) []ExchangeConnection {
		if v == nil {
			return nil
		}
		return v.Connections
	}).(ExchangeConnectionArrayOutput)
}

// The reference of the peer ASN.
func (o PeeringPropertiesExchangePtrOutput) PeerAsn() SubResourcePtrOutput {
	return o.ApplyT(func(v *PeeringPropertiesExchange) *SubResource {
		if v == nil {
			return nil
		}
		return v.PeerAsn
	}).(SubResourcePtrOutput)
}

// The properties that define an exchange peering.
type PeeringPropertiesExchangeResponse struct {
	// The set of connections that constitute an exchange peering.
	Connections []ExchangeConnectionResponse `pulumi:"connections"`
	// The reference of the peer ASN.
	PeerAsn *SubResourceResponse `pulumi:"peerAsn"`
}

// PeeringPropertiesExchangeResponseInput is an input type that accepts PeeringPropertiesExchangeResponseArgs and PeeringPropertiesExchangeResponseOutput values.
// You can construct a concrete instance of `PeeringPropertiesExchangeResponseInput` via:
//
//          PeeringPropertiesExchangeResponseArgs{...}
type PeeringPropertiesExchangeResponseInput interface {
	pulumi.Input

	ToPeeringPropertiesExchangeResponseOutput() PeeringPropertiesExchangeResponseOutput
	ToPeeringPropertiesExchangeResponseOutputWithContext(context.Context) PeeringPropertiesExchangeResponseOutput
}

// The properties that define an exchange peering.
type PeeringPropertiesExchangeResponseArgs struct {
	// The set of connections that constitute an exchange peering.
	Connections ExchangeConnectionResponseArrayInput `pulumi:"connections"`
	// The reference of the peer ASN.
	PeerAsn SubResourceResponsePtrInput `pulumi:"peerAsn"`
}

func (PeeringPropertiesExchangeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringPropertiesExchangeResponse)(nil)).Elem()
}

func (i PeeringPropertiesExchangeResponseArgs) ToPeeringPropertiesExchangeResponseOutput() PeeringPropertiesExchangeResponseOutput {
	return i.ToPeeringPropertiesExchangeResponseOutputWithContext(context.Background())
}

func (i PeeringPropertiesExchangeResponseArgs) ToPeeringPropertiesExchangeResponseOutputWithContext(ctx context.Context) PeeringPropertiesExchangeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesExchangeResponseOutput)
}

func (i PeeringPropertiesExchangeResponseArgs) ToPeeringPropertiesExchangeResponsePtrOutput() PeeringPropertiesExchangeResponsePtrOutput {
	return i.ToPeeringPropertiesExchangeResponsePtrOutputWithContext(context.Background())
}

func (i PeeringPropertiesExchangeResponseArgs) ToPeeringPropertiesExchangeResponsePtrOutputWithContext(ctx context.Context) PeeringPropertiesExchangeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesExchangeResponseOutput).ToPeeringPropertiesExchangeResponsePtrOutputWithContext(ctx)
}

// PeeringPropertiesExchangeResponsePtrInput is an input type that accepts PeeringPropertiesExchangeResponseArgs, PeeringPropertiesExchangeResponsePtr and PeeringPropertiesExchangeResponsePtrOutput values.
// You can construct a concrete instance of `PeeringPropertiesExchangeResponsePtrInput` via:
//
//          PeeringPropertiesExchangeResponseArgs{...}
//
//  or:
//
//          nil
type PeeringPropertiesExchangeResponsePtrInput interface {
	pulumi.Input

	ToPeeringPropertiesExchangeResponsePtrOutput() PeeringPropertiesExchangeResponsePtrOutput
	ToPeeringPropertiesExchangeResponsePtrOutputWithContext(context.Context) PeeringPropertiesExchangeResponsePtrOutput
}

type peeringPropertiesExchangeResponsePtrType PeeringPropertiesExchangeResponseArgs

func PeeringPropertiesExchangeResponsePtr(v *PeeringPropertiesExchangeResponseArgs) PeeringPropertiesExchangeResponsePtrInput {
	return (*peeringPropertiesExchangeResponsePtrType)(v)
}

func (*peeringPropertiesExchangeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringPropertiesExchangeResponse)(nil)).Elem()
}

func (i *peeringPropertiesExchangeResponsePtrType) ToPeeringPropertiesExchangeResponsePtrOutput() PeeringPropertiesExchangeResponsePtrOutput {
	return i.ToPeeringPropertiesExchangeResponsePtrOutputWithContext(context.Background())
}

func (i *peeringPropertiesExchangeResponsePtrType) ToPeeringPropertiesExchangeResponsePtrOutputWithContext(ctx context.Context) PeeringPropertiesExchangeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesExchangeResponsePtrOutput)
}

// The properties that define an exchange peering.
type PeeringPropertiesExchangeResponseOutput struct{ *pulumi.OutputState }

func (PeeringPropertiesExchangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringPropertiesExchangeResponse)(nil)).Elem()
}

func (o PeeringPropertiesExchangeResponseOutput) ToPeeringPropertiesExchangeResponseOutput() PeeringPropertiesExchangeResponseOutput {
	return o
}

func (o PeeringPropertiesExchangeResponseOutput) ToPeeringPropertiesExchangeResponseOutputWithContext(ctx context.Context) PeeringPropertiesExchangeResponseOutput {
	return o
}

func (o PeeringPropertiesExchangeResponseOutput) ToPeeringPropertiesExchangeResponsePtrOutput() PeeringPropertiesExchangeResponsePtrOutput {
	return o.ToPeeringPropertiesExchangeResponsePtrOutputWithContext(context.Background())
}

func (o PeeringPropertiesExchangeResponseOutput) ToPeeringPropertiesExchangeResponsePtrOutputWithContext(ctx context.Context) PeeringPropertiesExchangeResponsePtrOutput {
	return o.ApplyT(func(v PeeringPropertiesExchangeResponse) *PeeringPropertiesExchangeResponse {
		return &v
	}).(PeeringPropertiesExchangeResponsePtrOutput)
}

// The set of connections that constitute an exchange peering.
func (o PeeringPropertiesExchangeResponseOutput) Connections() ExchangeConnectionResponseArrayOutput {
	return o.ApplyT(func(v PeeringPropertiesExchangeResponse) []ExchangeConnectionResponse { return v.Connections }).(ExchangeConnectionResponseArrayOutput)
}

// The reference of the peer ASN.
func (o PeeringPropertiesExchangeResponseOutput) PeerAsn() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v PeeringPropertiesExchangeResponse) *SubResourceResponse { return v.PeerAsn }).(SubResourceResponsePtrOutput)
}

type PeeringPropertiesExchangeResponsePtrOutput struct{ *pulumi.OutputState }

func (PeeringPropertiesExchangeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringPropertiesExchangeResponse)(nil)).Elem()
}

func (o PeeringPropertiesExchangeResponsePtrOutput) ToPeeringPropertiesExchangeResponsePtrOutput() PeeringPropertiesExchangeResponsePtrOutput {
	return o
}

func (o PeeringPropertiesExchangeResponsePtrOutput) ToPeeringPropertiesExchangeResponsePtrOutputWithContext(ctx context.Context) PeeringPropertiesExchangeResponsePtrOutput {
	return o
}

func (o PeeringPropertiesExchangeResponsePtrOutput) Elem() PeeringPropertiesExchangeResponseOutput {
	return o.ApplyT(func(v *PeeringPropertiesExchangeResponse) PeeringPropertiesExchangeResponse { return *v }).(PeeringPropertiesExchangeResponseOutput)
}

// The set of connections that constitute an exchange peering.
func (o PeeringPropertiesExchangeResponsePtrOutput) Connections() ExchangeConnectionResponseArrayOutput {
	return o.ApplyT(func(v *PeeringPropertiesExchangeResponse) []ExchangeConnectionResponse {
		if v == nil {
			return nil
		}
		return v.Connections
	}).(ExchangeConnectionResponseArrayOutput)
}

// The reference of the peer ASN.
func (o PeeringPropertiesExchangeResponsePtrOutput) PeerAsn() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *PeeringPropertiesExchangeResponse) *SubResourceResponse {
		if v == nil {
			return nil
		}
		return v.PeerAsn
	}).(SubResourceResponsePtrOutput)
}

// The properties that define connectivity to the Microsoft Cloud Edge.
type PeeringPropertiesResponse struct {
	// The properties that define a direct peering.
	Direct *PeeringPropertiesDirectResponse `pulumi:"direct"`
	// The properties that define an exchange peering.
	Exchange *PeeringPropertiesExchangeResponse `pulumi:"exchange"`
	// The location of the peering.
	PeeringLocation *string `pulumi:"peeringLocation"`
	// The provisioning state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
}

// PeeringPropertiesResponseInput is an input type that accepts PeeringPropertiesResponseArgs and PeeringPropertiesResponseOutput values.
// You can construct a concrete instance of `PeeringPropertiesResponseInput` via:
//
//          PeeringPropertiesResponseArgs{...}
type PeeringPropertiesResponseInput interface {
	pulumi.Input

	ToPeeringPropertiesResponseOutput() PeeringPropertiesResponseOutput
	ToPeeringPropertiesResponseOutputWithContext(context.Context) PeeringPropertiesResponseOutput
}

// The properties that define connectivity to the Microsoft Cloud Edge.
type PeeringPropertiesResponseArgs struct {
	// The properties that define a direct peering.
	Direct PeeringPropertiesDirectResponsePtrInput `pulumi:"direct"`
	// The properties that define an exchange peering.
	Exchange PeeringPropertiesExchangeResponsePtrInput `pulumi:"exchange"`
	// The location of the peering.
	PeeringLocation pulumi.StringPtrInput `pulumi:"peeringLocation"`
	// The provisioning state of the resource.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
}

func (PeeringPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringPropertiesResponse)(nil)).Elem()
}

func (i PeeringPropertiesResponseArgs) ToPeeringPropertiesResponseOutput() PeeringPropertiesResponseOutput {
	return i.ToPeeringPropertiesResponseOutputWithContext(context.Background())
}

func (i PeeringPropertiesResponseArgs) ToPeeringPropertiesResponseOutputWithContext(ctx context.Context) PeeringPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesResponseOutput)
}

func (i PeeringPropertiesResponseArgs) ToPeeringPropertiesResponsePtrOutput() PeeringPropertiesResponsePtrOutput {
	return i.ToPeeringPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i PeeringPropertiesResponseArgs) ToPeeringPropertiesResponsePtrOutputWithContext(ctx context.Context) PeeringPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesResponseOutput).ToPeeringPropertiesResponsePtrOutputWithContext(ctx)
}

// PeeringPropertiesResponsePtrInput is an input type that accepts PeeringPropertiesResponseArgs, PeeringPropertiesResponsePtr and PeeringPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `PeeringPropertiesResponsePtrInput` via:
//
//          PeeringPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type PeeringPropertiesResponsePtrInput interface {
	pulumi.Input

	ToPeeringPropertiesResponsePtrOutput() PeeringPropertiesResponsePtrOutput
	ToPeeringPropertiesResponsePtrOutputWithContext(context.Context) PeeringPropertiesResponsePtrOutput
}

type peeringPropertiesResponsePtrType PeeringPropertiesResponseArgs

func PeeringPropertiesResponsePtr(v *PeeringPropertiesResponseArgs) PeeringPropertiesResponsePtrInput {
	return (*peeringPropertiesResponsePtrType)(v)
}

func (*peeringPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringPropertiesResponse)(nil)).Elem()
}

func (i *peeringPropertiesResponsePtrType) ToPeeringPropertiesResponsePtrOutput() PeeringPropertiesResponsePtrOutput {
	return i.ToPeeringPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *peeringPropertiesResponsePtrType) ToPeeringPropertiesResponsePtrOutputWithContext(ctx context.Context) PeeringPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringPropertiesResponsePtrOutput)
}

// The properties that define connectivity to the Microsoft Cloud Edge.
type PeeringPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PeeringPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringPropertiesResponse)(nil)).Elem()
}

func (o PeeringPropertiesResponseOutput) ToPeeringPropertiesResponseOutput() PeeringPropertiesResponseOutput {
	return o
}

func (o PeeringPropertiesResponseOutput) ToPeeringPropertiesResponseOutputWithContext(ctx context.Context) PeeringPropertiesResponseOutput {
	return o
}

func (o PeeringPropertiesResponseOutput) ToPeeringPropertiesResponsePtrOutput() PeeringPropertiesResponsePtrOutput {
	return o.ToPeeringPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o PeeringPropertiesResponseOutput) ToPeeringPropertiesResponsePtrOutputWithContext(ctx context.Context) PeeringPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PeeringPropertiesResponse) *PeeringPropertiesResponse {
		return &v
	}).(PeeringPropertiesResponsePtrOutput)
}

// The properties that define a direct peering.
func (o PeeringPropertiesResponseOutput) Direct() PeeringPropertiesDirectResponsePtrOutput {
	return o.ApplyT(func(v PeeringPropertiesResponse) *PeeringPropertiesDirectResponse { return v.Direct }).(PeeringPropertiesDirectResponsePtrOutput)
}

// The properties that define an exchange peering.
func (o PeeringPropertiesResponseOutput) Exchange() PeeringPropertiesExchangeResponsePtrOutput {
	return o.ApplyT(func(v PeeringPropertiesResponse) *PeeringPropertiesExchangeResponse { return v.Exchange }).(PeeringPropertiesExchangeResponsePtrOutput)
}

// The location of the peering.
func (o PeeringPropertiesResponseOutput) PeeringLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringPropertiesResponse) *string { return v.PeeringLocation }).(pulumi.StringPtrOutput)
}

// The provisioning state of the resource.
func (o PeeringPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type PeeringPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PeeringPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringPropertiesResponse)(nil)).Elem()
}

func (o PeeringPropertiesResponsePtrOutput) ToPeeringPropertiesResponsePtrOutput() PeeringPropertiesResponsePtrOutput {
	return o
}

func (o PeeringPropertiesResponsePtrOutput) ToPeeringPropertiesResponsePtrOutputWithContext(ctx context.Context) PeeringPropertiesResponsePtrOutput {
	return o
}

func (o PeeringPropertiesResponsePtrOutput) Elem() PeeringPropertiesResponseOutput {
	return o.ApplyT(func(v *PeeringPropertiesResponse) PeeringPropertiesResponse { return *v }).(PeeringPropertiesResponseOutput)
}

// The properties that define a direct peering.
func (o PeeringPropertiesResponsePtrOutput) Direct() PeeringPropertiesDirectResponsePtrOutput {
	return o.ApplyT(func(v *PeeringPropertiesResponse) *PeeringPropertiesDirectResponse {
		if v == nil {
			return nil
		}
		return v.Direct
	}).(PeeringPropertiesDirectResponsePtrOutput)
}

// The properties that define an exchange peering.
func (o PeeringPropertiesResponsePtrOutput) Exchange() PeeringPropertiesExchangeResponsePtrOutput {
	return o.ApplyT(func(v *PeeringPropertiesResponse) *PeeringPropertiesExchangeResponse {
		if v == nil {
			return nil
		}
		return v.Exchange
	}).(PeeringPropertiesExchangeResponsePtrOutput)
}

// The location of the peering.
func (o PeeringPropertiesResponsePtrOutput) PeeringLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PeeringLocation
	}).(pulumi.StringPtrOutput)
}

// The provisioning state of the resource.
func (o PeeringPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The properties that define a registered ASN.
type PeeringRegisteredAsnProperties struct {
	// The customer's ASN from which traffic originates.
	Asn *int `pulumi:"asn"`
}

// PeeringRegisteredAsnPropertiesInput is an input type that accepts PeeringRegisteredAsnPropertiesArgs and PeeringRegisteredAsnPropertiesOutput values.
// You can construct a concrete instance of `PeeringRegisteredAsnPropertiesInput` via:
//
//          PeeringRegisteredAsnPropertiesArgs{...}
type PeeringRegisteredAsnPropertiesInput interface {
	pulumi.Input

	ToPeeringRegisteredAsnPropertiesOutput() PeeringRegisteredAsnPropertiesOutput
	ToPeeringRegisteredAsnPropertiesOutputWithContext(context.Context) PeeringRegisteredAsnPropertiesOutput
}

// The properties that define a registered ASN.
type PeeringRegisteredAsnPropertiesArgs struct {
	// The customer's ASN from which traffic originates.
	Asn pulumi.IntPtrInput `pulumi:"asn"`
}

func (PeeringRegisteredAsnPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringRegisteredAsnProperties)(nil)).Elem()
}

func (i PeeringRegisteredAsnPropertiesArgs) ToPeeringRegisteredAsnPropertiesOutput() PeeringRegisteredAsnPropertiesOutput {
	return i.ToPeeringRegisteredAsnPropertiesOutputWithContext(context.Background())
}

func (i PeeringRegisteredAsnPropertiesArgs) ToPeeringRegisteredAsnPropertiesOutputWithContext(ctx context.Context) PeeringRegisteredAsnPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringRegisteredAsnPropertiesOutput)
}

func (i PeeringRegisteredAsnPropertiesArgs) ToPeeringRegisteredAsnPropertiesPtrOutput() PeeringRegisteredAsnPropertiesPtrOutput {
	return i.ToPeeringRegisteredAsnPropertiesPtrOutputWithContext(context.Background())
}

func (i PeeringRegisteredAsnPropertiesArgs) ToPeeringRegisteredAsnPropertiesPtrOutputWithContext(ctx context.Context) PeeringRegisteredAsnPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringRegisteredAsnPropertiesOutput).ToPeeringRegisteredAsnPropertiesPtrOutputWithContext(ctx)
}

// PeeringRegisteredAsnPropertiesPtrInput is an input type that accepts PeeringRegisteredAsnPropertiesArgs, PeeringRegisteredAsnPropertiesPtr and PeeringRegisteredAsnPropertiesPtrOutput values.
// You can construct a concrete instance of `PeeringRegisteredAsnPropertiesPtrInput` via:
//
//          PeeringRegisteredAsnPropertiesArgs{...}
//
//  or:
//
//          nil
type PeeringRegisteredAsnPropertiesPtrInput interface {
	pulumi.Input

	ToPeeringRegisteredAsnPropertiesPtrOutput() PeeringRegisteredAsnPropertiesPtrOutput
	ToPeeringRegisteredAsnPropertiesPtrOutputWithContext(context.Context) PeeringRegisteredAsnPropertiesPtrOutput
}

type peeringRegisteredAsnPropertiesPtrType PeeringRegisteredAsnPropertiesArgs

func PeeringRegisteredAsnPropertiesPtr(v *PeeringRegisteredAsnPropertiesArgs) PeeringRegisteredAsnPropertiesPtrInput {
	return (*peeringRegisteredAsnPropertiesPtrType)(v)
}

func (*peeringRegisteredAsnPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringRegisteredAsnProperties)(nil)).Elem()
}

func (i *peeringRegisteredAsnPropertiesPtrType) ToPeeringRegisteredAsnPropertiesPtrOutput() PeeringRegisteredAsnPropertiesPtrOutput {
	return i.ToPeeringRegisteredAsnPropertiesPtrOutputWithContext(context.Background())
}

func (i *peeringRegisteredAsnPropertiesPtrType) ToPeeringRegisteredAsnPropertiesPtrOutputWithContext(ctx context.Context) PeeringRegisteredAsnPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringRegisteredAsnPropertiesPtrOutput)
}

// The properties that define a registered ASN.
type PeeringRegisteredAsnPropertiesOutput struct{ *pulumi.OutputState }

func (PeeringRegisteredAsnPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringRegisteredAsnProperties)(nil)).Elem()
}

func (o PeeringRegisteredAsnPropertiesOutput) ToPeeringRegisteredAsnPropertiesOutput() PeeringRegisteredAsnPropertiesOutput {
	return o
}

func (o PeeringRegisteredAsnPropertiesOutput) ToPeeringRegisteredAsnPropertiesOutputWithContext(ctx context.Context) PeeringRegisteredAsnPropertiesOutput {
	return o
}

func (o PeeringRegisteredAsnPropertiesOutput) ToPeeringRegisteredAsnPropertiesPtrOutput() PeeringRegisteredAsnPropertiesPtrOutput {
	return o.ToPeeringRegisteredAsnPropertiesPtrOutputWithContext(context.Background())
}

func (o PeeringRegisteredAsnPropertiesOutput) ToPeeringRegisteredAsnPropertiesPtrOutputWithContext(ctx context.Context) PeeringRegisteredAsnPropertiesPtrOutput {
	return o.ApplyT(func(v PeeringRegisteredAsnProperties) *PeeringRegisteredAsnProperties {
		return &v
	}).(PeeringRegisteredAsnPropertiesPtrOutput)
}

// The customer's ASN from which traffic originates.
func (o PeeringRegisteredAsnPropertiesOutput) Asn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PeeringRegisteredAsnProperties) *int { return v.Asn }).(pulumi.IntPtrOutput)
}

type PeeringRegisteredAsnPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PeeringRegisteredAsnPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringRegisteredAsnProperties)(nil)).Elem()
}

func (o PeeringRegisteredAsnPropertiesPtrOutput) ToPeeringRegisteredAsnPropertiesPtrOutput() PeeringRegisteredAsnPropertiesPtrOutput {
	return o
}

func (o PeeringRegisteredAsnPropertiesPtrOutput) ToPeeringRegisteredAsnPropertiesPtrOutputWithContext(ctx context.Context) PeeringRegisteredAsnPropertiesPtrOutput {
	return o
}

func (o PeeringRegisteredAsnPropertiesPtrOutput) Elem() PeeringRegisteredAsnPropertiesOutput {
	return o.ApplyT(func(v *PeeringRegisteredAsnProperties) PeeringRegisteredAsnProperties { return *v }).(PeeringRegisteredAsnPropertiesOutput)
}

// The customer's ASN from which traffic originates.
func (o PeeringRegisteredAsnPropertiesPtrOutput) Asn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PeeringRegisteredAsnProperties) *int {
		if v == nil {
			return nil
		}
		return v.Asn
	}).(pulumi.IntPtrOutput)
}

// The properties that define a registered ASN.
type PeeringRegisteredAsnPropertiesResponse struct {
	// The customer's ASN from which traffic originates.
	Asn *int `pulumi:"asn"`
	// The peering service prefix key that is to be shared with the customer.
	PeeringServicePrefixKey string `pulumi:"peeringServicePrefixKey"`
	// The provisioning state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
}

// PeeringRegisteredAsnPropertiesResponseInput is an input type that accepts PeeringRegisteredAsnPropertiesResponseArgs and PeeringRegisteredAsnPropertiesResponseOutput values.
// You can construct a concrete instance of `PeeringRegisteredAsnPropertiesResponseInput` via:
//
//          PeeringRegisteredAsnPropertiesResponseArgs{...}
type PeeringRegisteredAsnPropertiesResponseInput interface {
	pulumi.Input

	ToPeeringRegisteredAsnPropertiesResponseOutput() PeeringRegisteredAsnPropertiesResponseOutput
	ToPeeringRegisteredAsnPropertiesResponseOutputWithContext(context.Context) PeeringRegisteredAsnPropertiesResponseOutput
}

// The properties that define a registered ASN.
type PeeringRegisteredAsnPropertiesResponseArgs struct {
	// The customer's ASN from which traffic originates.
	Asn pulumi.IntPtrInput `pulumi:"asn"`
	// The peering service prefix key that is to be shared with the customer.
	PeeringServicePrefixKey pulumi.StringInput `pulumi:"peeringServicePrefixKey"`
	// The provisioning state of the resource.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
}

func (PeeringRegisteredAsnPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringRegisteredAsnPropertiesResponse)(nil)).Elem()
}

func (i PeeringRegisteredAsnPropertiesResponseArgs) ToPeeringRegisteredAsnPropertiesResponseOutput() PeeringRegisteredAsnPropertiesResponseOutput {
	return i.ToPeeringRegisteredAsnPropertiesResponseOutputWithContext(context.Background())
}

func (i PeeringRegisteredAsnPropertiesResponseArgs) ToPeeringRegisteredAsnPropertiesResponseOutputWithContext(ctx context.Context) PeeringRegisteredAsnPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringRegisteredAsnPropertiesResponseOutput)
}

func (i PeeringRegisteredAsnPropertiesResponseArgs) ToPeeringRegisteredAsnPropertiesResponsePtrOutput() PeeringRegisteredAsnPropertiesResponsePtrOutput {
	return i.ToPeeringRegisteredAsnPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i PeeringRegisteredAsnPropertiesResponseArgs) ToPeeringRegisteredAsnPropertiesResponsePtrOutputWithContext(ctx context.Context) PeeringRegisteredAsnPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringRegisteredAsnPropertiesResponseOutput).ToPeeringRegisteredAsnPropertiesResponsePtrOutputWithContext(ctx)
}

// PeeringRegisteredAsnPropertiesResponsePtrInput is an input type that accepts PeeringRegisteredAsnPropertiesResponseArgs, PeeringRegisteredAsnPropertiesResponsePtr and PeeringRegisteredAsnPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `PeeringRegisteredAsnPropertiesResponsePtrInput` via:
//
//          PeeringRegisteredAsnPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type PeeringRegisteredAsnPropertiesResponsePtrInput interface {
	pulumi.Input

	ToPeeringRegisteredAsnPropertiesResponsePtrOutput() PeeringRegisteredAsnPropertiesResponsePtrOutput
	ToPeeringRegisteredAsnPropertiesResponsePtrOutputWithContext(context.Context) PeeringRegisteredAsnPropertiesResponsePtrOutput
}

type peeringRegisteredAsnPropertiesResponsePtrType PeeringRegisteredAsnPropertiesResponseArgs

func PeeringRegisteredAsnPropertiesResponsePtr(v *PeeringRegisteredAsnPropertiesResponseArgs) PeeringRegisteredAsnPropertiesResponsePtrInput {
	return (*peeringRegisteredAsnPropertiesResponsePtrType)(v)
}

func (*peeringRegisteredAsnPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringRegisteredAsnPropertiesResponse)(nil)).Elem()
}

func (i *peeringRegisteredAsnPropertiesResponsePtrType) ToPeeringRegisteredAsnPropertiesResponsePtrOutput() PeeringRegisteredAsnPropertiesResponsePtrOutput {
	return i.ToPeeringRegisteredAsnPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *peeringRegisteredAsnPropertiesResponsePtrType) ToPeeringRegisteredAsnPropertiesResponsePtrOutputWithContext(ctx context.Context) PeeringRegisteredAsnPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringRegisteredAsnPropertiesResponsePtrOutput)
}

// The properties that define a registered ASN.
type PeeringRegisteredAsnPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PeeringRegisteredAsnPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringRegisteredAsnPropertiesResponse)(nil)).Elem()
}

func (o PeeringRegisteredAsnPropertiesResponseOutput) ToPeeringRegisteredAsnPropertiesResponseOutput() PeeringRegisteredAsnPropertiesResponseOutput {
	return o
}

func (o PeeringRegisteredAsnPropertiesResponseOutput) ToPeeringRegisteredAsnPropertiesResponseOutputWithContext(ctx context.Context) PeeringRegisteredAsnPropertiesResponseOutput {
	return o
}

func (o PeeringRegisteredAsnPropertiesResponseOutput) ToPeeringRegisteredAsnPropertiesResponsePtrOutput() PeeringRegisteredAsnPropertiesResponsePtrOutput {
	return o.ToPeeringRegisteredAsnPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o PeeringRegisteredAsnPropertiesResponseOutput) ToPeeringRegisteredAsnPropertiesResponsePtrOutputWithContext(ctx context.Context) PeeringRegisteredAsnPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PeeringRegisteredAsnPropertiesResponse) *PeeringRegisteredAsnPropertiesResponse {
		return &v
	}).(PeeringRegisteredAsnPropertiesResponsePtrOutput)
}

// The customer's ASN from which traffic originates.
func (o PeeringRegisteredAsnPropertiesResponseOutput) Asn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PeeringRegisteredAsnPropertiesResponse) *int { return v.Asn }).(pulumi.IntPtrOutput)
}

// The peering service prefix key that is to be shared with the customer.
func (o PeeringRegisteredAsnPropertiesResponseOutput) PeeringServicePrefixKey() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringRegisteredAsnPropertiesResponse) string { return v.PeeringServicePrefixKey }).(pulumi.StringOutput)
}

// The provisioning state of the resource.
func (o PeeringRegisteredAsnPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringRegisteredAsnPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type PeeringRegisteredAsnPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PeeringRegisteredAsnPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringRegisteredAsnPropertiesResponse)(nil)).Elem()
}

func (o PeeringRegisteredAsnPropertiesResponsePtrOutput) ToPeeringRegisteredAsnPropertiesResponsePtrOutput() PeeringRegisteredAsnPropertiesResponsePtrOutput {
	return o
}

func (o PeeringRegisteredAsnPropertiesResponsePtrOutput) ToPeeringRegisteredAsnPropertiesResponsePtrOutputWithContext(ctx context.Context) PeeringRegisteredAsnPropertiesResponsePtrOutput {
	return o
}

func (o PeeringRegisteredAsnPropertiesResponsePtrOutput) Elem() PeeringRegisteredAsnPropertiesResponseOutput {
	return o.ApplyT(func(v *PeeringRegisteredAsnPropertiesResponse) PeeringRegisteredAsnPropertiesResponse { return *v }).(PeeringRegisteredAsnPropertiesResponseOutput)
}

// The customer's ASN from which traffic originates.
func (o PeeringRegisteredAsnPropertiesResponsePtrOutput) Asn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PeeringRegisteredAsnPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.Asn
	}).(pulumi.IntPtrOutput)
}

// The peering service prefix key that is to be shared with the customer.
func (o PeeringRegisteredAsnPropertiesResponsePtrOutput) PeeringServicePrefixKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringRegisteredAsnPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PeeringServicePrefixKey
	}).(pulumi.StringPtrOutput)
}

// The provisioning state of the resource.
func (o PeeringRegisteredAsnPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringRegisteredAsnPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The properties that define a registered prefix.
type PeeringRegisteredPrefixProperties struct {
	// The customer's prefix from which traffic originates.
	Prefix *string `pulumi:"prefix"`
}

// PeeringRegisteredPrefixPropertiesInput is an input type that accepts PeeringRegisteredPrefixPropertiesArgs and PeeringRegisteredPrefixPropertiesOutput values.
// You can construct a concrete instance of `PeeringRegisteredPrefixPropertiesInput` via:
//
//          PeeringRegisteredPrefixPropertiesArgs{...}
type PeeringRegisteredPrefixPropertiesInput interface {
	pulumi.Input

	ToPeeringRegisteredPrefixPropertiesOutput() PeeringRegisteredPrefixPropertiesOutput
	ToPeeringRegisteredPrefixPropertiesOutputWithContext(context.Context) PeeringRegisteredPrefixPropertiesOutput
}

// The properties that define a registered prefix.
type PeeringRegisteredPrefixPropertiesArgs struct {
	// The customer's prefix from which traffic originates.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
}

func (PeeringRegisteredPrefixPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringRegisteredPrefixProperties)(nil)).Elem()
}

func (i PeeringRegisteredPrefixPropertiesArgs) ToPeeringRegisteredPrefixPropertiesOutput() PeeringRegisteredPrefixPropertiesOutput {
	return i.ToPeeringRegisteredPrefixPropertiesOutputWithContext(context.Background())
}

func (i PeeringRegisteredPrefixPropertiesArgs) ToPeeringRegisteredPrefixPropertiesOutputWithContext(ctx context.Context) PeeringRegisteredPrefixPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringRegisteredPrefixPropertiesOutput)
}

func (i PeeringRegisteredPrefixPropertiesArgs) ToPeeringRegisteredPrefixPropertiesPtrOutput() PeeringRegisteredPrefixPropertiesPtrOutput {
	return i.ToPeeringRegisteredPrefixPropertiesPtrOutputWithContext(context.Background())
}

func (i PeeringRegisteredPrefixPropertiesArgs) ToPeeringRegisteredPrefixPropertiesPtrOutputWithContext(ctx context.Context) PeeringRegisteredPrefixPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringRegisteredPrefixPropertiesOutput).ToPeeringRegisteredPrefixPropertiesPtrOutputWithContext(ctx)
}

// PeeringRegisteredPrefixPropertiesPtrInput is an input type that accepts PeeringRegisteredPrefixPropertiesArgs, PeeringRegisteredPrefixPropertiesPtr and PeeringRegisteredPrefixPropertiesPtrOutput values.
// You can construct a concrete instance of `PeeringRegisteredPrefixPropertiesPtrInput` via:
//
//          PeeringRegisteredPrefixPropertiesArgs{...}
//
//  or:
//
//          nil
type PeeringRegisteredPrefixPropertiesPtrInput interface {
	pulumi.Input

	ToPeeringRegisteredPrefixPropertiesPtrOutput() PeeringRegisteredPrefixPropertiesPtrOutput
	ToPeeringRegisteredPrefixPropertiesPtrOutputWithContext(context.Context) PeeringRegisteredPrefixPropertiesPtrOutput
}

type peeringRegisteredPrefixPropertiesPtrType PeeringRegisteredPrefixPropertiesArgs

func PeeringRegisteredPrefixPropertiesPtr(v *PeeringRegisteredPrefixPropertiesArgs) PeeringRegisteredPrefixPropertiesPtrInput {
	return (*peeringRegisteredPrefixPropertiesPtrType)(v)
}

func (*peeringRegisteredPrefixPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringRegisteredPrefixProperties)(nil)).Elem()
}

func (i *peeringRegisteredPrefixPropertiesPtrType) ToPeeringRegisteredPrefixPropertiesPtrOutput() PeeringRegisteredPrefixPropertiesPtrOutput {
	return i.ToPeeringRegisteredPrefixPropertiesPtrOutputWithContext(context.Background())
}

func (i *peeringRegisteredPrefixPropertiesPtrType) ToPeeringRegisteredPrefixPropertiesPtrOutputWithContext(ctx context.Context) PeeringRegisteredPrefixPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringRegisteredPrefixPropertiesPtrOutput)
}

// The properties that define a registered prefix.
type PeeringRegisteredPrefixPropertiesOutput struct{ *pulumi.OutputState }

func (PeeringRegisteredPrefixPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringRegisteredPrefixProperties)(nil)).Elem()
}

func (o PeeringRegisteredPrefixPropertiesOutput) ToPeeringRegisteredPrefixPropertiesOutput() PeeringRegisteredPrefixPropertiesOutput {
	return o
}

func (o PeeringRegisteredPrefixPropertiesOutput) ToPeeringRegisteredPrefixPropertiesOutputWithContext(ctx context.Context) PeeringRegisteredPrefixPropertiesOutput {
	return o
}

func (o PeeringRegisteredPrefixPropertiesOutput) ToPeeringRegisteredPrefixPropertiesPtrOutput() PeeringRegisteredPrefixPropertiesPtrOutput {
	return o.ToPeeringRegisteredPrefixPropertiesPtrOutputWithContext(context.Background())
}

func (o PeeringRegisteredPrefixPropertiesOutput) ToPeeringRegisteredPrefixPropertiesPtrOutputWithContext(ctx context.Context) PeeringRegisteredPrefixPropertiesPtrOutput {
	return o.ApplyT(func(v PeeringRegisteredPrefixProperties) *PeeringRegisteredPrefixProperties {
		return &v
	}).(PeeringRegisteredPrefixPropertiesPtrOutput)
}

// The customer's prefix from which traffic originates.
func (o PeeringRegisteredPrefixPropertiesOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringRegisteredPrefixProperties) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

type PeeringRegisteredPrefixPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PeeringRegisteredPrefixPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringRegisteredPrefixProperties)(nil)).Elem()
}

func (o PeeringRegisteredPrefixPropertiesPtrOutput) ToPeeringRegisteredPrefixPropertiesPtrOutput() PeeringRegisteredPrefixPropertiesPtrOutput {
	return o
}

func (o PeeringRegisteredPrefixPropertiesPtrOutput) ToPeeringRegisteredPrefixPropertiesPtrOutputWithContext(ctx context.Context) PeeringRegisteredPrefixPropertiesPtrOutput {
	return o
}

func (o PeeringRegisteredPrefixPropertiesPtrOutput) Elem() PeeringRegisteredPrefixPropertiesOutput {
	return o.ApplyT(func(v *PeeringRegisteredPrefixProperties) PeeringRegisteredPrefixProperties { return *v }).(PeeringRegisteredPrefixPropertiesOutput)
}

// The customer's prefix from which traffic originates.
func (o PeeringRegisteredPrefixPropertiesPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringRegisteredPrefixProperties) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

// The properties that define a registered prefix.
type PeeringRegisteredPrefixPropertiesResponse struct {
	// The error message associated with the validation state, if any.
	ErrorMessage string `pulumi:"errorMessage"`
	// The peering service prefix key that is to be shared with the customer.
	PeeringServicePrefixKey string `pulumi:"peeringServicePrefixKey"`
	// The customer's prefix from which traffic originates.
	Prefix *string `pulumi:"prefix"`
	// The prefix validation state.
	PrefixValidationState string `pulumi:"prefixValidationState"`
	// The provisioning state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
}

// PeeringRegisteredPrefixPropertiesResponseInput is an input type that accepts PeeringRegisteredPrefixPropertiesResponseArgs and PeeringRegisteredPrefixPropertiesResponseOutput values.
// You can construct a concrete instance of `PeeringRegisteredPrefixPropertiesResponseInput` via:
//
//          PeeringRegisteredPrefixPropertiesResponseArgs{...}
type PeeringRegisteredPrefixPropertiesResponseInput interface {
	pulumi.Input

	ToPeeringRegisteredPrefixPropertiesResponseOutput() PeeringRegisteredPrefixPropertiesResponseOutput
	ToPeeringRegisteredPrefixPropertiesResponseOutputWithContext(context.Context) PeeringRegisteredPrefixPropertiesResponseOutput
}

// The properties that define a registered prefix.
type PeeringRegisteredPrefixPropertiesResponseArgs struct {
	// The error message associated with the validation state, if any.
	ErrorMessage pulumi.StringInput `pulumi:"errorMessage"`
	// The peering service prefix key that is to be shared with the customer.
	PeeringServicePrefixKey pulumi.StringInput `pulumi:"peeringServicePrefixKey"`
	// The customer's prefix from which traffic originates.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The prefix validation state.
	PrefixValidationState pulumi.StringInput `pulumi:"prefixValidationState"`
	// The provisioning state of the resource.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
}

func (PeeringRegisteredPrefixPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringRegisteredPrefixPropertiesResponse)(nil)).Elem()
}

func (i PeeringRegisteredPrefixPropertiesResponseArgs) ToPeeringRegisteredPrefixPropertiesResponseOutput() PeeringRegisteredPrefixPropertiesResponseOutput {
	return i.ToPeeringRegisteredPrefixPropertiesResponseOutputWithContext(context.Background())
}

func (i PeeringRegisteredPrefixPropertiesResponseArgs) ToPeeringRegisteredPrefixPropertiesResponseOutputWithContext(ctx context.Context) PeeringRegisteredPrefixPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringRegisteredPrefixPropertiesResponseOutput)
}

func (i PeeringRegisteredPrefixPropertiesResponseArgs) ToPeeringRegisteredPrefixPropertiesResponsePtrOutput() PeeringRegisteredPrefixPropertiesResponsePtrOutput {
	return i.ToPeeringRegisteredPrefixPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i PeeringRegisteredPrefixPropertiesResponseArgs) ToPeeringRegisteredPrefixPropertiesResponsePtrOutputWithContext(ctx context.Context) PeeringRegisteredPrefixPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringRegisteredPrefixPropertiesResponseOutput).ToPeeringRegisteredPrefixPropertiesResponsePtrOutputWithContext(ctx)
}

// PeeringRegisteredPrefixPropertiesResponsePtrInput is an input type that accepts PeeringRegisteredPrefixPropertiesResponseArgs, PeeringRegisteredPrefixPropertiesResponsePtr and PeeringRegisteredPrefixPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `PeeringRegisteredPrefixPropertiesResponsePtrInput` via:
//
//          PeeringRegisteredPrefixPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type PeeringRegisteredPrefixPropertiesResponsePtrInput interface {
	pulumi.Input

	ToPeeringRegisteredPrefixPropertiesResponsePtrOutput() PeeringRegisteredPrefixPropertiesResponsePtrOutput
	ToPeeringRegisteredPrefixPropertiesResponsePtrOutputWithContext(context.Context) PeeringRegisteredPrefixPropertiesResponsePtrOutput
}

type peeringRegisteredPrefixPropertiesResponsePtrType PeeringRegisteredPrefixPropertiesResponseArgs

func PeeringRegisteredPrefixPropertiesResponsePtr(v *PeeringRegisteredPrefixPropertiesResponseArgs) PeeringRegisteredPrefixPropertiesResponsePtrInput {
	return (*peeringRegisteredPrefixPropertiesResponsePtrType)(v)
}

func (*peeringRegisteredPrefixPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringRegisteredPrefixPropertiesResponse)(nil)).Elem()
}

func (i *peeringRegisteredPrefixPropertiesResponsePtrType) ToPeeringRegisteredPrefixPropertiesResponsePtrOutput() PeeringRegisteredPrefixPropertiesResponsePtrOutput {
	return i.ToPeeringRegisteredPrefixPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *peeringRegisteredPrefixPropertiesResponsePtrType) ToPeeringRegisteredPrefixPropertiesResponsePtrOutputWithContext(ctx context.Context) PeeringRegisteredPrefixPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringRegisteredPrefixPropertiesResponsePtrOutput)
}

// The properties that define a registered prefix.
type PeeringRegisteredPrefixPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PeeringRegisteredPrefixPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringRegisteredPrefixPropertiesResponse)(nil)).Elem()
}

func (o PeeringRegisteredPrefixPropertiesResponseOutput) ToPeeringRegisteredPrefixPropertiesResponseOutput() PeeringRegisteredPrefixPropertiesResponseOutput {
	return o
}

func (o PeeringRegisteredPrefixPropertiesResponseOutput) ToPeeringRegisteredPrefixPropertiesResponseOutputWithContext(ctx context.Context) PeeringRegisteredPrefixPropertiesResponseOutput {
	return o
}

func (o PeeringRegisteredPrefixPropertiesResponseOutput) ToPeeringRegisteredPrefixPropertiesResponsePtrOutput() PeeringRegisteredPrefixPropertiesResponsePtrOutput {
	return o.ToPeeringRegisteredPrefixPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o PeeringRegisteredPrefixPropertiesResponseOutput) ToPeeringRegisteredPrefixPropertiesResponsePtrOutputWithContext(ctx context.Context) PeeringRegisteredPrefixPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PeeringRegisteredPrefixPropertiesResponse) *PeeringRegisteredPrefixPropertiesResponse {
		return &v
	}).(PeeringRegisteredPrefixPropertiesResponsePtrOutput)
}

// The error message associated with the validation state, if any.
func (o PeeringRegisteredPrefixPropertiesResponseOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringRegisteredPrefixPropertiesResponse) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// The peering service prefix key that is to be shared with the customer.
func (o PeeringRegisteredPrefixPropertiesResponseOutput) PeeringServicePrefixKey() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringRegisteredPrefixPropertiesResponse) string { return v.PeeringServicePrefixKey }).(pulumi.StringOutput)
}

// The customer's prefix from which traffic originates.
func (o PeeringRegisteredPrefixPropertiesResponseOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringRegisteredPrefixPropertiesResponse) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The prefix validation state.
func (o PeeringRegisteredPrefixPropertiesResponseOutput) PrefixValidationState() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringRegisteredPrefixPropertiesResponse) string { return v.PrefixValidationState }).(pulumi.StringOutput)
}

// The provisioning state of the resource.
func (o PeeringRegisteredPrefixPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringRegisteredPrefixPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type PeeringRegisteredPrefixPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PeeringRegisteredPrefixPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringRegisteredPrefixPropertiesResponse)(nil)).Elem()
}

func (o PeeringRegisteredPrefixPropertiesResponsePtrOutput) ToPeeringRegisteredPrefixPropertiesResponsePtrOutput() PeeringRegisteredPrefixPropertiesResponsePtrOutput {
	return o
}

func (o PeeringRegisteredPrefixPropertiesResponsePtrOutput) ToPeeringRegisteredPrefixPropertiesResponsePtrOutputWithContext(ctx context.Context) PeeringRegisteredPrefixPropertiesResponsePtrOutput {
	return o
}

func (o PeeringRegisteredPrefixPropertiesResponsePtrOutput) Elem() PeeringRegisteredPrefixPropertiesResponseOutput {
	return o.ApplyT(func(v *PeeringRegisteredPrefixPropertiesResponse) PeeringRegisteredPrefixPropertiesResponse {
		return *v
	}).(PeeringRegisteredPrefixPropertiesResponseOutput)
}

// The error message associated with the validation state, if any.
func (o PeeringRegisteredPrefixPropertiesResponsePtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringRegisteredPrefixPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// The peering service prefix key that is to be shared with the customer.
func (o PeeringRegisteredPrefixPropertiesResponsePtrOutput) PeeringServicePrefixKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringRegisteredPrefixPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PeeringServicePrefixKey
	}).(pulumi.StringPtrOutput)
}

// The customer's prefix from which traffic originates.
func (o PeeringRegisteredPrefixPropertiesResponsePtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringRegisteredPrefixPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

// The prefix validation state.
func (o PeeringRegisteredPrefixPropertiesResponsePtrOutput) PrefixValidationState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringRegisteredPrefixPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrefixValidationState
	}).(pulumi.StringPtrOutput)
}

// The provisioning state of the resource.
func (o PeeringRegisteredPrefixPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringRegisteredPrefixPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Peering Service
type PeeringServiceType struct {
	// The location of the resource.
	Location string `pulumi:"location"`
	// The name of the resource.
	Name string `pulumi:"name"`
	// The properties that define a peering service.
	Properties PeeringServicePropertiesResponse `pulumi:"properties"`
	// The SKU that defines the type of the peering service.
	Sku *PeeringServiceSkuResponse `pulumi:"sku"`
	// The resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource.
	Type string `pulumi:"type"`
}

// PeeringServiceTypeInput is an input type that accepts PeeringServiceTypeArgs and PeeringServiceTypeOutput values.
// You can construct a concrete instance of `PeeringServiceTypeInput` via:
//
//          PeeringServiceTypeArgs{...}
type PeeringServiceTypeInput interface {
	pulumi.Input

	ToPeeringServiceTypeOutput() PeeringServiceTypeOutput
	ToPeeringServiceTypeOutputWithContext(context.Context) PeeringServiceTypeOutput
}

// Peering Service
type PeeringServiceTypeArgs struct {
	// The location of the resource.
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties that define a peering service.
	Properties PeeringServicePropertiesResponseInput `pulumi:"properties"`
	// The SKU that defines the type of the peering service.
	Sku PeeringServiceSkuResponsePtrInput `pulumi:"sku"`
	// The resource tags.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The type of the resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PeeringServiceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringServiceType)(nil)).Elem()
}

func (i PeeringServiceTypeArgs) ToPeeringServiceTypeOutput() PeeringServiceTypeOutput {
	return i.ToPeeringServiceTypeOutputWithContext(context.Background())
}

func (i PeeringServiceTypeArgs) ToPeeringServiceTypeOutputWithContext(ctx context.Context) PeeringServiceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServiceTypeOutput)
}

// Peering Service
type PeeringServiceTypeOutput struct{ *pulumi.OutputState }

func (PeeringServiceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringServiceType)(nil)).Elem()
}

func (o PeeringServiceTypeOutput) ToPeeringServiceTypeOutput() PeeringServiceTypeOutput {
	return o
}

func (o PeeringServiceTypeOutput) ToPeeringServiceTypeOutputWithContext(ctx context.Context) PeeringServiceTypeOutput {
	return o
}

// The location of the resource.
func (o PeeringServiceTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringServiceType) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource.
func (o PeeringServiceTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringServiceType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties that define a peering service.
func (o PeeringServiceTypeOutput) Properties() PeeringServicePropertiesResponseOutput {
	return o.ApplyT(func(v PeeringServiceType) PeeringServicePropertiesResponse { return v.Properties }).(PeeringServicePropertiesResponseOutput)
}

// The SKU that defines the type of the peering service.
func (o PeeringServiceTypeOutput) Sku() PeeringServiceSkuResponsePtrOutput {
	return o.ApplyT(func(v PeeringServiceType) *PeeringServiceSkuResponse { return v.Sku }).(PeeringServiceSkuResponsePtrOutput)
}

// The resource tags.
func (o PeeringServiceTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PeeringServiceType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource.
func (o PeeringServiceTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringServiceType) string { return v.Type }).(pulumi.StringOutput)
}

// The details of the event associated with a prefix.
type PeeringServicePrefixEvent struct {
}

// PeeringServicePrefixEventInput is an input type that accepts PeeringServicePrefixEventArgs and PeeringServicePrefixEventOutput values.
// You can construct a concrete instance of `PeeringServicePrefixEventInput` via:
//
//          PeeringServicePrefixEventArgs{...}
type PeeringServicePrefixEventInput interface {
	pulumi.Input

	ToPeeringServicePrefixEventOutput() PeeringServicePrefixEventOutput
	ToPeeringServicePrefixEventOutputWithContext(context.Context) PeeringServicePrefixEventOutput
}

// The details of the event associated with a prefix.
type PeeringServicePrefixEventArgs struct {
}

func (PeeringServicePrefixEventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringServicePrefixEvent)(nil)).Elem()
}

func (i PeeringServicePrefixEventArgs) ToPeeringServicePrefixEventOutput() PeeringServicePrefixEventOutput {
	return i.ToPeeringServicePrefixEventOutputWithContext(context.Background())
}

func (i PeeringServicePrefixEventArgs) ToPeeringServicePrefixEventOutputWithContext(ctx context.Context) PeeringServicePrefixEventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServicePrefixEventOutput)
}

// The details of the event associated with a prefix.
type PeeringServicePrefixEventOutput struct{ *pulumi.OutputState }

func (PeeringServicePrefixEventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringServicePrefixEvent)(nil)).Elem()
}

func (o PeeringServicePrefixEventOutput) ToPeeringServicePrefixEventOutput() PeeringServicePrefixEventOutput {
	return o
}

func (o PeeringServicePrefixEventOutput) ToPeeringServicePrefixEventOutputWithContext(ctx context.Context) PeeringServicePrefixEventOutput {
	return o
}

// The details of the event associated with a prefix.
type PeeringServicePrefixEventResponse struct {
	// The description of the event associated with a prefix.
	EventDescription string `pulumi:"eventDescription"`
	// The level of the event associated with a prefix.
	EventLevel string `pulumi:"eventLevel"`
	// The summary of the event associated with a prefix.
	EventSummary string `pulumi:"eventSummary"`
	// The timestamp of the event associated with a prefix.
	EventTimestamp string `pulumi:"eventTimestamp"`
	// The type of the event associated with a prefix.
	EventType string `pulumi:"eventType"`
}

// PeeringServicePrefixEventResponseInput is an input type that accepts PeeringServicePrefixEventResponseArgs and PeeringServicePrefixEventResponseOutput values.
// You can construct a concrete instance of `PeeringServicePrefixEventResponseInput` via:
//
//          PeeringServicePrefixEventResponseArgs{...}
type PeeringServicePrefixEventResponseInput interface {
	pulumi.Input

	ToPeeringServicePrefixEventResponseOutput() PeeringServicePrefixEventResponseOutput
	ToPeeringServicePrefixEventResponseOutputWithContext(context.Context) PeeringServicePrefixEventResponseOutput
}

// The details of the event associated with a prefix.
type PeeringServicePrefixEventResponseArgs struct {
	// The description of the event associated with a prefix.
	EventDescription pulumi.StringInput `pulumi:"eventDescription"`
	// The level of the event associated with a prefix.
	EventLevel pulumi.StringInput `pulumi:"eventLevel"`
	// The summary of the event associated with a prefix.
	EventSummary pulumi.StringInput `pulumi:"eventSummary"`
	// The timestamp of the event associated with a prefix.
	EventTimestamp pulumi.StringInput `pulumi:"eventTimestamp"`
	// The type of the event associated with a prefix.
	EventType pulumi.StringInput `pulumi:"eventType"`
}

func (PeeringServicePrefixEventResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringServicePrefixEventResponse)(nil)).Elem()
}

func (i PeeringServicePrefixEventResponseArgs) ToPeeringServicePrefixEventResponseOutput() PeeringServicePrefixEventResponseOutput {
	return i.ToPeeringServicePrefixEventResponseOutputWithContext(context.Background())
}

func (i PeeringServicePrefixEventResponseArgs) ToPeeringServicePrefixEventResponseOutputWithContext(ctx context.Context) PeeringServicePrefixEventResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServicePrefixEventResponseOutput)
}

// PeeringServicePrefixEventResponseArrayInput is an input type that accepts PeeringServicePrefixEventResponseArray and PeeringServicePrefixEventResponseArrayOutput values.
// You can construct a concrete instance of `PeeringServicePrefixEventResponseArrayInput` via:
//
//          PeeringServicePrefixEventResponseArray{ PeeringServicePrefixEventResponseArgs{...} }
type PeeringServicePrefixEventResponseArrayInput interface {
	pulumi.Input

	ToPeeringServicePrefixEventResponseArrayOutput() PeeringServicePrefixEventResponseArrayOutput
	ToPeeringServicePrefixEventResponseArrayOutputWithContext(context.Context) PeeringServicePrefixEventResponseArrayOutput
}

type PeeringServicePrefixEventResponseArray []PeeringServicePrefixEventResponseInput

func (PeeringServicePrefixEventResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PeeringServicePrefixEventResponse)(nil)).Elem()
}

func (i PeeringServicePrefixEventResponseArray) ToPeeringServicePrefixEventResponseArrayOutput() PeeringServicePrefixEventResponseArrayOutput {
	return i.ToPeeringServicePrefixEventResponseArrayOutputWithContext(context.Background())
}

func (i PeeringServicePrefixEventResponseArray) ToPeeringServicePrefixEventResponseArrayOutputWithContext(ctx context.Context) PeeringServicePrefixEventResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServicePrefixEventResponseArrayOutput)
}

// The details of the event associated with a prefix.
type PeeringServicePrefixEventResponseOutput struct{ *pulumi.OutputState }

func (PeeringServicePrefixEventResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringServicePrefixEventResponse)(nil)).Elem()
}

func (o PeeringServicePrefixEventResponseOutput) ToPeeringServicePrefixEventResponseOutput() PeeringServicePrefixEventResponseOutput {
	return o
}

func (o PeeringServicePrefixEventResponseOutput) ToPeeringServicePrefixEventResponseOutputWithContext(ctx context.Context) PeeringServicePrefixEventResponseOutput {
	return o
}

// The description of the event associated with a prefix.
func (o PeeringServicePrefixEventResponseOutput) EventDescription() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringServicePrefixEventResponse) string { return v.EventDescription }).(pulumi.StringOutput)
}

// The level of the event associated with a prefix.
func (o PeeringServicePrefixEventResponseOutput) EventLevel() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringServicePrefixEventResponse) string { return v.EventLevel }).(pulumi.StringOutput)
}

// The summary of the event associated with a prefix.
func (o PeeringServicePrefixEventResponseOutput) EventSummary() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringServicePrefixEventResponse) string { return v.EventSummary }).(pulumi.StringOutput)
}

// The timestamp of the event associated with a prefix.
func (o PeeringServicePrefixEventResponseOutput) EventTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringServicePrefixEventResponse) string { return v.EventTimestamp }).(pulumi.StringOutput)
}

// The type of the event associated with a prefix.
func (o PeeringServicePrefixEventResponseOutput) EventType() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringServicePrefixEventResponse) string { return v.EventType }).(pulumi.StringOutput)
}

type PeeringServicePrefixEventResponseArrayOutput struct{ *pulumi.OutputState }

func (PeeringServicePrefixEventResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PeeringServicePrefixEventResponse)(nil)).Elem()
}

func (o PeeringServicePrefixEventResponseArrayOutput) ToPeeringServicePrefixEventResponseArrayOutput() PeeringServicePrefixEventResponseArrayOutput {
	return o
}

func (o PeeringServicePrefixEventResponseArrayOutput) ToPeeringServicePrefixEventResponseArrayOutputWithContext(ctx context.Context) PeeringServicePrefixEventResponseArrayOutput {
	return o
}

func (o PeeringServicePrefixEventResponseArrayOutput) Index(i pulumi.IntInput) PeeringServicePrefixEventResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PeeringServicePrefixEventResponse {
		return vs[0].([]PeeringServicePrefixEventResponse)[vs[1].(int)]
	}).(PeeringServicePrefixEventResponseOutput)
}

// The peering service prefix properties class.
type PeeringServicePrefixProperties struct {
	// The peering service prefix key
	PeeringServicePrefixKey *string `pulumi:"peeringServicePrefixKey"`
	// The prefix from which your traffic originates.
	Prefix *string `pulumi:"prefix"`
}

// PeeringServicePrefixPropertiesInput is an input type that accepts PeeringServicePrefixPropertiesArgs and PeeringServicePrefixPropertiesOutput values.
// You can construct a concrete instance of `PeeringServicePrefixPropertiesInput` via:
//
//          PeeringServicePrefixPropertiesArgs{...}
type PeeringServicePrefixPropertiesInput interface {
	pulumi.Input

	ToPeeringServicePrefixPropertiesOutput() PeeringServicePrefixPropertiesOutput
	ToPeeringServicePrefixPropertiesOutputWithContext(context.Context) PeeringServicePrefixPropertiesOutput
}

// The peering service prefix properties class.
type PeeringServicePrefixPropertiesArgs struct {
	// The peering service prefix key
	PeeringServicePrefixKey pulumi.StringPtrInput `pulumi:"peeringServicePrefixKey"`
	// The prefix from which your traffic originates.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
}

func (PeeringServicePrefixPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringServicePrefixProperties)(nil)).Elem()
}

func (i PeeringServicePrefixPropertiesArgs) ToPeeringServicePrefixPropertiesOutput() PeeringServicePrefixPropertiesOutput {
	return i.ToPeeringServicePrefixPropertiesOutputWithContext(context.Background())
}

func (i PeeringServicePrefixPropertiesArgs) ToPeeringServicePrefixPropertiesOutputWithContext(ctx context.Context) PeeringServicePrefixPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServicePrefixPropertiesOutput)
}

func (i PeeringServicePrefixPropertiesArgs) ToPeeringServicePrefixPropertiesPtrOutput() PeeringServicePrefixPropertiesPtrOutput {
	return i.ToPeeringServicePrefixPropertiesPtrOutputWithContext(context.Background())
}

func (i PeeringServicePrefixPropertiesArgs) ToPeeringServicePrefixPropertiesPtrOutputWithContext(ctx context.Context) PeeringServicePrefixPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServicePrefixPropertiesOutput).ToPeeringServicePrefixPropertiesPtrOutputWithContext(ctx)
}

// PeeringServicePrefixPropertiesPtrInput is an input type that accepts PeeringServicePrefixPropertiesArgs, PeeringServicePrefixPropertiesPtr and PeeringServicePrefixPropertiesPtrOutput values.
// You can construct a concrete instance of `PeeringServicePrefixPropertiesPtrInput` via:
//
//          PeeringServicePrefixPropertiesArgs{...}
//
//  or:
//
//          nil
type PeeringServicePrefixPropertiesPtrInput interface {
	pulumi.Input

	ToPeeringServicePrefixPropertiesPtrOutput() PeeringServicePrefixPropertiesPtrOutput
	ToPeeringServicePrefixPropertiesPtrOutputWithContext(context.Context) PeeringServicePrefixPropertiesPtrOutput
}

type peeringServicePrefixPropertiesPtrType PeeringServicePrefixPropertiesArgs

func PeeringServicePrefixPropertiesPtr(v *PeeringServicePrefixPropertiesArgs) PeeringServicePrefixPropertiesPtrInput {
	return (*peeringServicePrefixPropertiesPtrType)(v)
}

func (*peeringServicePrefixPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringServicePrefixProperties)(nil)).Elem()
}

func (i *peeringServicePrefixPropertiesPtrType) ToPeeringServicePrefixPropertiesPtrOutput() PeeringServicePrefixPropertiesPtrOutput {
	return i.ToPeeringServicePrefixPropertiesPtrOutputWithContext(context.Background())
}

func (i *peeringServicePrefixPropertiesPtrType) ToPeeringServicePrefixPropertiesPtrOutputWithContext(ctx context.Context) PeeringServicePrefixPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServicePrefixPropertiesPtrOutput)
}

// The peering service prefix properties class.
type PeeringServicePrefixPropertiesOutput struct{ *pulumi.OutputState }

func (PeeringServicePrefixPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringServicePrefixProperties)(nil)).Elem()
}

func (o PeeringServicePrefixPropertiesOutput) ToPeeringServicePrefixPropertiesOutput() PeeringServicePrefixPropertiesOutput {
	return o
}

func (o PeeringServicePrefixPropertiesOutput) ToPeeringServicePrefixPropertiesOutputWithContext(ctx context.Context) PeeringServicePrefixPropertiesOutput {
	return o
}

func (o PeeringServicePrefixPropertiesOutput) ToPeeringServicePrefixPropertiesPtrOutput() PeeringServicePrefixPropertiesPtrOutput {
	return o.ToPeeringServicePrefixPropertiesPtrOutputWithContext(context.Background())
}

func (o PeeringServicePrefixPropertiesOutput) ToPeeringServicePrefixPropertiesPtrOutputWithContext(ctx context.Context) PeeringServicePrefixPropertiesPtrOutput {
	return o.ApplyT(func(v PeeringServicePrefixProperties) *PeeringServicePrefixProperties {
		return &v
	}).(PeeringServicePrefixPropertiesPtrOutput)
}

// The peering service prefix key
func (o PeeringServicePrefixPropertiesOutput) PeeringServicePrefixKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringServicePrefixProperties) *string { return v.PeeringServicePrefixKey }).(pulumi.StringPtrOutput)
}

// The prefix from which your traffic originates.
func (o PeeringServicePrefixPropertiesOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringServicePrefixProperties) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

type PeeringServicePrefixPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PeeringServicePrefixPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringServicePrefixProperties)(nil)).Elem()
}

func (o PeeringServicePrefixPropertiesPtrOutput) ToPeeringServicePrefixPropertiesPtrOutput() PeeringServicePrefixPropertiesPtrOutput {
	return o
}

func (o PeeringServicePrefixPropertiesPtrOutput) ToPeeringServicePrefixPropertiesPtrOutputWithContext(ctx context.Context) PeeringServicePrefixPropertiesPtrOutput {
	return o
}

func (o PeeringServicePrefixPropertiesPtrOutput) Elem() PeeringServicePrefixPropertiesOutput {
	return o.ApplyT(func(v *PeeringServicePrefixProperties) PeeringServicePrefixProperties { return *v }).(PeeringServicePrefixPropertiesOutput)
}

// The peering service prefix key
func (o PeeringServicePrefixPropertiesPtrOutput) PeeringServicePrefixKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringServicePrefixProperties) *string {
		if v == nil {
			return nil
		}
		return v.PeeringServicePrefixKey
	}).(pulumi.StringPtrOutput)
}

// The prefix from which your traffic originates.
func (o PeeringServicePrefixPropertiesPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringServicePrefixProperties) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

// The peering service prefix properties class.
type PeeringServicePrefixPropertiesResponse struct {
	// The error message for validation state
	ErrorMessage string `pulumi:"errorMessage"`
	// The list of events for peering service prefix
	Events []PeeringServicePrefixEventResponse `pulumi:"events"`
	// The prefix learned type
	LearnedType string `pulumi:"learnedType"`
	// The peering service prefix key
	PeeringServicePrefixKey *string `pulumi:"peeringServicePrefixKey"`
	// The prefix from which your traffic originates.
	Prefix *string `pulumi:"prefix"`
	// The prefix validation state
	PrefixValidationState string `pulumi:"prefixValidationState"`
	// The provisioning state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
}

// PeeringServicePrefixPropertiesResponseInput is an input type that accepts PeeringServicePrefixPropertiesResponseArgs and PeeringServicePrefixPropertiesResponseOutput values.
// You can construct a concrete instance of `PeeringServicePrefixPropertiesResponseInput` via:
//
//          PeeringServicePrefixPropertiesResponseArgs{...}
type PeeringServicePrefixPropertiesResponseInput interface {
	pulumi.Input

	ToPeeringServicePrefixPropertiesResponseOutput() PeeringServicePrefixPropertiesResponseOutput
	ToPeeringServicePrefixPropertiesResponseOutputWithContext(context.Context) PeeringServicePrefixPropertiesResponseOutput
}

// The peering service prefix properties class.
type PeeringServicePrefixPropertiesResponseArgs struct {
	// The error message for validation state
	ErrorMessage pulumi.StringInput `pulumi:"errorMessage"`
	// The list of events for peering service prefix
	Events PeeringServicePrefixEventResponseArrayInput `pulumi:"events"`
	// The prefix learned type
	LearnedType pulumi.StringInput `pulumi:"learnedType"`
	// The peering service prefix key
	PeeringServicePrefixKey pulumi.StringPtrInput `pulumi:"peeringServicePrefixKey"`
	// The prefix from which your traffic originates.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The prefix validation state
	PrefixValidationState pulumi.StringInput `pulumi:"prefixValidationState"`
	// The provisioning state of the resource.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
}

func (PeeringServicePrefixPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringServicePrefixPropertiesResponse)(nil)).Elem()
}

func (i PeeringServicePrefixPropertiesResponseArgs) ToPeeringServicePrefixPropertiesResponseOutput() PeeringServicePrefixPropertiesResponseOutput {
	return i.ToPeeringServicePrefixPropertiesResponseOutputWithContext(context.Background())
}

func (i PeeringServicePrefixPropertiesResponseArgs) ToPeeringServicePrefixPropertiesResponseOutputWithContext(ctx context.Context) PeeringServicePrefixPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServicePrefixPropertiesResponseOutput)
}

func (i PeeringServicePrefixPropertiesResponseArgs) ToPeeringServicePrefixPropertiesResponsePtrOutput() PeeringServicePrefixPropertiesResponsePtrOutput {
	return i.ToPeeringServicePrefixPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i PeeringServicePrefixPropertiesResponseArgs) ToPeeringServicePrefixPropertiesResponsePtrOutputWithContext(ctx context.Context) PeeringServicePrefixPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServicePrefixPropertiesResponseOutput).ToPeeringServicePrefixPropertiesResponsePtrOutputWithContext(ctx)
}

// PeeringServicePrefixPropertiesResponsePtrInput is an input type that accepts PeeringServicePrefixPropertiesResponseArgs, PeeringServicePrefixPropertiesResponsePtr and PeeringServicePrefixPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `PeeringServicePrefixPropertiesResponsePtrInput` via:
//
//          PeeringServicePrefixPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type PeeringServicePrefixPropertiesResponsePtrInput interface {
	pulumi.Input

	ToPeeringServicePrefixPropertiesResponsePtrOutput() PeeringServicePrefixPropertiesResponsePtrOutput
	ToPeeringServicePrefixPropertiesResponsePtrOutputWithContext(context.Context) PeeringServicePrefixPropertiesResponsePtrOutput
}

type peeringServicePrefixPropertiesResponsePtrType PeeringServicePrefixPropertiesResponseArgs

func PeeringServicePrefixPropertiesResponsePtr(v *PeeringServicePrefixPropertiesResponseArgs) PeeringServicePrefixPropertiesResponsePtrInput {
	return (*peeringServicePrefixPropertiesResponsePtrType)(v)
}

func (*peeringServicePrefixPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringServicePrefixPropertiesResponse)(nil)).Elem()
}

func (i *peeringServicePrefixPropertiesResponsePtrType) ToPeeringServicePrefixPropertiesResponsePtrOutput() PeeringServicePrefixPropertiesResponsePtrOutput {
	return i.ToPeeringServicePrefixPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *peeringServicePrefixPropertiesResponsePtrType) ToPeeringServicePrefixPropertiesResponsePtrOutputWithContext(ctx context.Context) PeeringServicePrefixPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServicePrefixPropertiesResponsePtrOutput)
}

// The peering service prefix properties class.
type PeeringServicePrefixPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PeeringServicePrefixPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringServicePrefixPropertiesResponse)(nil)).Elem()
}

func (o PeeringServicePrefixPropertiesResponseOutput) ToPeeringServicePrefixPropertiesResponseOutput() PeeringServicePrefixPropertiesResponseOutput {
	return o
}

func (o PeeringServicePrefixPropertiesResponseOutput) ToPeeringServicePrefixPropertiesResponseOutputWithContext(ctx context.Context) PeeringServicePrefixPropertiesResponseOutput {
	return o
}

func (o PeeringServicePrefixPropertiesResponseOutput) ToPeeringServicePrefixPropertiesResponsePtrOutput() PeeringServicePrefixPropertiesResponsePtrOutput {
	return o.ToPeeringServicePrefixPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o PeeringServicePrefixPropertiesResponseOutput) ToPeeringServicePrefixPropertiesResponsePtrOutputWithContext(ctx context.Context) PeeringServicePrefixPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PeeringServicePrefixPropertiesResponse) *PeeringServicePrefixPropertiesResponse {
		return &v
	}).(PeeringServicePrefixPropertiesResponsePtrOutput)
}

// The error message for validation state
func (o PeeringServicePrefixPropertiesResponseOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringServicePrefixPropertiesResponse) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// The list of events for peering service prefix
func (o PeeringServicePrefixPropertiesResponseOutput) Events() PeeringServicePrefixEventResponseArrayOutput {
	return o.ApplyT(func(v PeeringServicePrefixPropertiesResponse) []PeeringServicePrefixEventResponse { return v.Events }).(PeeringServicePrefixEventResponseArrayOutput)
}

// The prefix learned type
func (o PeeringServicePrefixPropertiesResponseOutput) LearnedType() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringServicePrefixPropertiesResponse) string { return v.LearnedType }).(pulumi.StringOutput)
}

// The peering service prefix key
func (o PeeringServicePrefixPropertiesResponseOutput) PeeringServicePrefixKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringServicePrefixPropertiesResponse) *string { return v.PeeringServicePrefixKey }).(pulumi.StringPtrOutput)
}

// The prefix from which your traffic originates.
func (o PeeringServicePrefixPropertiesResponseOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringServicePrefixPropertiesResponse) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The prefix validation state
func (o PeeringServicePrefixPropertiesResponseOutput) PrefixValidationState() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringServicePrefixPropertiesResponse) string { return v.PrefixValidationState }).(pulumi.StringOutput)
}

// The provisioning state of the resource.
func (o PeeringServicePrefixPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringServicePrefixPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type PeeringServicePrefixPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PeeringServicePrefixPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringServicePrefixPropertiesResponse)(nil)).Elem()
}

func (o PeeringServicePrefixPropertiesResponsePtrOutput) ToPeeringServicePrefixPropertiesResponsePtrOutput() PeeringServicePrefixPropertiesResponsePtrOutput {
	return o
}

func (o PeeringServicePrefixPropertiesResponsePtrOutput) ToPeeringServicePrefixPropertiesResponsePtrOutputWithContext(ctx context.Context) PeeringServicePrefixPropertiesResponsePtrOutput {
	return o
}

func (o PeeringServicePrefixPropertiesResponsePtrOutput) Elem() PeeringServicePrefixPropertiesResponseOutput {
	return o.ApplyT(func(v *PeeringServicePrefixPropertiesResponse) PeeringServicePrefixPropertiesResponse { return *v }).(PeeringServicePrefixPropertiesResponseOutput)
}

// The error message for validation state
func (o PeeringServicePrefixPropertiesResponsePtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringServicePrefixPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// The list of events for peering service prefix
func (o PeeringServicePrefixPropertiesResponsePtrOutput) Events() PeeringServicePrefixEventResponseArrayOutput {
	return o.ApplyT(func(v *PeeringServicePrefixPropertiesResponse) []PeeringServicePrefixEventResponse {
		if v == nil {
			return nil
		}
		return v.Events
	}).(PeeringServicePrefixEventResponseArrayOutput)
}

// The prefix learned type
func (o PeeringServicePrefixPropertiesResponsePtrOutput) LearnedType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringServicePrefixPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LearnedType
	}).(pulumi.StringPtrOutput)
}

// The peering service prefix key
func (o PeeringServicePrefixPropertiesResponsePtrOutput) PeeringServicePrefixKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringServicePrefixPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PeeringServicePrefixKey
	}).(pulumi.StringPtrOutput)
}

// The prefix from which your traffic originates.
func (o PeeringServicePrefixPropertiesResponsePtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringServicePrefixPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

// The prefix validation state
func (o PeeringServicePrefixPropertiesResponsePtrOutput) PrefixValidationState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringServicePrefixPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrefixValidationState
	}).(pulumi.StringPtrOutput)
}

// The provisioning state of the resource.
func (o PeeringServicePrefixPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringServicePrefixPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The properties that define connectivity to the Peering Service.
type PeeringServiceProperties struct {
	// The PeeringServiceLocation of the Customer.
	PeeringServiceLocation *string `pulumi:"peeringServiceLocation"`
	// The MAPS Provider Name.
	PeeringServiceProvider *string `pulumi:"peeringServiceProvider"`
}

// PeeringServicePropertiesInput is an input type that accepts PeeringServicePropertiesArgs and PeeringServicePropertiesOutput values.
// You can construct a concrete instance of `PeeringServicePropertiesInput` via:
//
//          PeeringServicePropertiesArgs{...}
type PeeringServicePropertiesInput interface {
	pulumi.Input

	ToPeeringServicePropertiesOutput() PeeringServicePropertiesOutput
	ToPeeringServicePropertiesOutputWithContext(context.Context) PeeringServicePropertiesOutput
}

// The properties that define connectivity to the Peering Service.
type PeeringServicePropertiesArgs struct {
	// The PeeringServiceLocation of the Customer.
	PeeringServiceLocation pulumi.StringPtrInput `pulumi:"peeringServiceLocation"`
	// The MAPS Provider Name.
	PeeringServiceProvider pulumi.StringPtrInput `pulumi:"peeringServiceProvider"`
}

func (PeeringServicePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringServiceProperties)(nil)).Elem()
}

func (i PeeringServicePropertiesArgs) ToPeeringServicePropertiesOutput() PeeringServicePropertiesOutput {
	return i.ToPeeringServicePropertiesOutputWithContext(context.Background())
}

func (i PeeringServicePropertiesArgs) ToPeeringServicePropertiesOutputWithContext(ctx context.Context) PeeringServicePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServicePropertiesOutput)
}

func (i PeeringServicePropertiesArgs) ToPeeringServicePropertiesPtrOutput() PeeringServicePropertiesPtrOutput {
	return i.ToPeeringServicePropertiesPtrOutputWithContext(context.Background())
}

func (i PeeringServicePropertiesArgs) ToPeeringServicePropertiesPtrOutputWithContext(ctx context.Context) PeeringServicePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServicePropertiesOutput).ToPeeringServicePropertiesPtrOutputWithContext(ctx)
}

// PeeringServicePropertiesPtrInput is an input type that accepts PeeringServicePropertiesArgs, PeeringServicePropertiesPtr and PeeringServicePropertiesPtrOutput values.
// You can construct a concrete instance of `PeeringServicePropertiesPtrInput` via:
//
//          PeeringServicePropertiesArgs{...}
//
//  or:
//
//          nil
type PeeringServicePropertiesPtrInput interface {
	pulumi.Input

	ToPeeringServicePropertiesPtrOutput() PeeringServicePropertiesPtrOutput
	ToPeeringServicePropertiesPtrOutputWithContext(context.Context) PeeringServicePropertiesPtrOutput
}

type peeringServicePropertiesPtrType PeeringServicePropertiesArgs

func PeeringServicePropertiesPtr(v *PeeringServicePropertiesArgs) PeeringServicePropertiesPtrInput {
	return (*peeringServicePropertiesPtrType)(v)
}

func (*peeringServicePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringServiceProperties)(nil)).Elem()
}

func (i *peeringServicePropertiesPtrType) ToPeeringServicePropertiesPtrOutput() PeeringServicePropertiesPtrOutput {
	return i.ToPeeringServicePropertiesPtrOutputWithContext(context.Background())
}

func (i *peeringServicePropertiesPtrType) ToPeeringServicePropertiesPtrOutputWithContext(ctx context.Context) PeeringServicePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServicePropertiesPtrOutput)
}

// The properties that define connectivity to the Peering Service.
type PeeringServicePropertiesOutput struct{ *pulumi.OutputState }

func (PeeringServicePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringServiceProperties)(nil)).Elem()
}

func (o PeeringServicePropertiesOutput) ToPeeringServicePropertiesOutput() PeeringServicePropertiesOutput {
	return o
}

func (o PeeringServicePropertiesOutput) ToPeeringServicePropertiesOutputWithContext(ctx context.Context) PeeringServicePropertiesOutput {
	return o
}

func (o PeeringServicePropertiesOutput) ToPeeringServicePropertiesPtrOutput() PeeringServicePropertiesPtrOutput {
	return o.ToPeeringServicePropertiesPtrOutputWithContext(context.Background())
}

func (o PeeringServicePropertiesOutput) ToPeeringServicePropertiesPtrOutputWithContext(ctx context.Context) PeeringServicePropertiesPtrOutput {
	return o.ApplyT(func(v PeeringServiceProperties) *PeeringServiceProperties {
		return &v
	}).(PeeringServicePropertiesPtrOutput)
}

// The PeeringServiceLocation of the Customer.
func (o PeeringServicePropertiesOutput) PeeringServiceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringServiceProperties) *string { return v.PeeringServiceLocation }).(pulumi.StringPtrOutput)
}

// The MAPS Provider Name.
func (o PeeringServicePropertiesOutput) PeeringServiceProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringServiceProperties) *string { return v.PeeringServiceProvider }).(pulumi.StringPtrOutput)
}

type PeeringServicePropertiesPtrOutput struct{ *pulumi.OutputState }

func (PeeringServicePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringServiceProperties)(nil)).Elem()
}

func (o PeeringServicePropertiesPtrOutput) ToPeeringServicePropertiesPtrOutput() PeeringServicePropertiesPtrOutput {
	return o
}

func (o PeeringServicePropertiesPtrOutput) ToPeeringServicePropertiesPtrOutputWithContext(ctx context.Context) PeeringServicePropertiesPtrOutput {
	return o
}

func (o PeeringServicePropertiesPtrOutput) Elem() PeeringServicePropertiesOutput {
	return o.ApplyT(func(v *PeeringServiceProperties) PeeringServiceProperties { return *v }).(PeeringServicePropertiesOutput)
}

// The PeeringServiceLocation of the Customer.
func (o PeeringServicePropertiesPtrOutput) PeeringServiceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringServiceProperties) *string {
		if v == nil {
			return nil
		}
		return v.PeeringServiceLocation
	}).(pulumi.StringPtrOutput)
}

// The MAPS Provider Name.
func (o PeeringServicePropertiesPtrOutput) PeeringServiceProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringServiceProperties) *string {
		if v == nil {
			return nil
		}
		return v.PeeringServiceProvider
	}).(pulumi.StringPtrOutput)
}

// The properties that define connectivity to the Peering Service.
type PeeringServicePropertiesResponse struct {
	// The PeeringServiceLocation of the Customer.
	PeeringServiceLocation *string `pulumi:"peeringServiceLocation"`
	// The MAPS Provider Name.
	PeeringServiceProvider *string `pulumi:"peeringServiceProvider"`
	// The provisioning state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
}

// PeeringServicePropertiesResponseInput is an input type that accepts PeeringServicePropertiesResponseArgs and PeeringServicePropertiesResponseOutput values.
// You can construct a concrete instance of `PeeringServicePropertiesResponseInput` via:
//
//          PeeringServicePropertiesResponseArgs{...}
type PeeringServicePropertiesResponseInput interface {
	pulumi.Input

	ToPeeringServicePropertiesResponseOutput() PeeringServicePropertiesResponseOutput
	ToPeeringServicePropertiesResponseOutputWithContext(context.Context) PeeringServicePropertiesResponseOutput
}

// The properties that define connectivity to the Peering Service.
type PeeringServicePropertiesResponseArgs struct {
	// The PeeringServiceLocation of the Customer.
	PeeringServiceLocation pulumi.StringPtrInput `pulumi:"peeringServiceLocation"`
	// The MAPS Provider Name.
	PeeringServiceProvider pulumi.StringPtrInput `pulumi:"peeringServiceProvider"`
	// The provisioning state of the resource.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
}

func (PeeringServicePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringServicePropertiesResponse)(nil)).Elem()
}

func (i PeeringServicePropertiesResponseArgs) ToPeeringServicePropertiesResponseOutput() PeeringServicePropertiesResponseOutput {
	return i.ToPeeringServicePropertiesResponseOutputWithContext(context.Background())
}

func (i PeeringServicePropertiesResponseArgs) ToPeeringServicePropertiesResponseOutputWithContext(ctx context.Context) PeeringServicePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServicePropertiesResponseOutput)
}

func (i PeeringServicePropertiesResponseArgs) ToPeeringServicePropertiesResponsePtrOutput() PeeringServicePropertiesResponsePtrOutput {
	return i.ToPeeringServicePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i PeeringServicePropertiesResponseArgs) ToPeeringServicePropertiesResponsePtrOutputWithContext(ctx context.Context) PeeringServicePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServicePropertiesResponseOutput).ToPeeringServicePropertiesResponsePtrOutputWithContext(ctx)
}

// PeeringServicePropertiesResponsePtrInput is an input type that accepts PeeringServicePropertiesResponseArgs, PeeringServicePropertiesResponsePtr and PeeringServicePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `PeeringServicePropertiesResponsePtrInput` via:
//
//          PeeringServicePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type PeeringServicePropertiesResponsePtrInput interface {
	pulumi.Input

	ToPeeringServicePropertiesResponsePtrOutput() PeeringServicePropertiesResponsePtrOutput
	ToPeeringServicePropertiesResponsePtrOutputWithContext(context.Context) PeeringServicePropertiesResponsePtrOutput
}

type peeringServicePropertiesResponsePtrType PeeringServicePropertiesResponseArgs

func PeeringServicePropertiesResponsePtr(v *PeeringServicePropertiesResponseArgs) PeeringServicePropertiesResponsePtrInput {
	return (*peeringServicePropertiesResponsePtrType)(v)
}

func (*peeringServicePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringServicePropertiesResponse)(nil)).Elem()
}

func (i *peeringServicePropertiesResponsePtrType) ToPeeringServicePropertiesResponsePtrOutput() PeeringServicePropertiesResponsePtrOutput {
	return i.ToPeeringServicePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *peeringServicePropertiesResponsePtrType) ToPeeringServicePropertiesResponsePtrOutputWithContext(ctx context.Context) PeeringServicePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServicePropertiesResponsePtrOutput)
}

// The properties that define connectivity to the Peering Service.
type PeeringServicePropertiesResponseOutput struct{ *pulumi.OutputState }

func (PeeringServicePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringServicePropertiesResponse)(nil)).Elem()
}

func (o PeeringServicePropertiesResponseOutput) ToPeeringServicePropertiesResponseOutput() PeeringServicePropertiesResponseOutput {
	return o
}

func (o PeeringServicePropertiesResponseOutput) ToPeeringServicePropertiesResponseOutputWithContext(ctx context.Context) PeeringServicePropertiesResponseOutput {
	return o
}

func (o PeeringServicePropertiesResponseOutput) ToPeeringServicePropertiesResponsePtrOutput() PeeringServicePropertiesResponsePtrOutput {
	return o.ToPeeringServicePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o PeeringServicePropertiesResponseOutput) ToPeeringServicePropertiesResponsePtrOutputWithContext(ctx context.Context) PeeringServicePropertiesResponsePtrOutput {
	return o.ApplyT(func(v PeeringServicePropertiesResponse) *PeeringServicePropertiesResponse {
		return &v
	}).(PeeringServicePropertiesResponsePtrOutput)
}

// The PeeringServiceLocation of the Customer.
func (o PeeringServicePropertiesResponseOutput) PeeringServiceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringServicePropertiesResponse) *string { return v.PeeringServiceLocation }).(pulumi.StringPtrOutput)
}

// The MAPS Provider Name.
func (o PeeringServicePropertiesResponseOutput) PeeringServiceProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringServicePropertiesResponse) *string { return v.PeeringServiceProvider }).(pulumi.StringPtrOutput)
}

// The provisioning state of the resource.
func (o PeeringServicePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PeeringServicePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type PeeringServicePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PeeringServicePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringServicePropertiesResponse)(nil)).Elem()
}

func (o PeeringServicePropertiesResponsePtrOutput) ToPeeringServicePropertiesResponsePtrOutput() PeeringServicePropertiesResponsePtrOutput {
	return o
}

func (o PeeringServicePropertiesResponsePtrOutput) ToPeeringServicePropertiesResponsePtrOutputWithContext(ctx context.Context) PeeringServicePropertiesResponsePtrOutput {
	return o
}

func (o PeeringServicePropertiesResponsePtrOutput) Elem() PeeringServicePropertiesResponseOutput {
	return o.ApplyT(func(v *PeeringServicePropertiesResponse) PeeringServicePropertiesResponse { return *v }).(PeeringServicePropertiesResponseOutput)
}

// The PeeringServiceLocation of the Customer.
func (o PeeringServicePropertiesResponsePtrOutput) PeeringServiceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringServicePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PeeringServiceLocation
	}).(pulumi.StringPtrOutput)
}

// The MAPS Provider Name.
func (o PeeringServicePropertiesResponsePtrOutput) PeeringServiceProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringServicePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PeeringServiceProvider
	}).(pulumi.StringPtrOutput)
}

// The provisioning state of the resource.
func (o PeeringServicePropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringServicePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The SKU that defines the type of the peering service.
type PeeringServiceSku struct {
	// The name of the peering service SKU.
	Name *string `pulumi:"name"`
}

// PeeringServiceSkuInput is an input type that accepts PeeringServiceSkuArgs and PeeringServiceSkuOutput values.
// You can construct a concrete instance of `PeeringServiceSkuInput` via:
//
//          PeeringServiceSkuArgs{...}
type PeeringServiceSkuInput interface {
	pulumi.Input

	ToPeeringServiceSkuOutput() PeeringServiceSkuOutput
	ToPeeringServiceSkuOutputWithContext(context.Context) PeeringServiceSkuOutput
}

// The SKU that defines the type of the peering service.
type PeeringServiceSkuArgs struct {
	// The name of the peering service SKU.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PeeringServiceSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringServiceSku)(nil)).Elem()
}

func (i PeeringServiceSkuArgs) ToPeeringServiceSkuOutput() PeeringServiceSkuOutput {
	return i.ToPeeringServiceSkuOutputWithContext(context.Background())
}

func (i PeeringServiceSkuArgs) ToPeeringServiceSkuOutputWithContext(ctx context.Context) PeeringServiceSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServiceSkuOutput)
}

func (i PeeringServiceSkuArgs) ToPeeringServiceSkuPtrOutput() PeeringServiceSkuPtrOutput {
	return i.ToPeeringServiceSkuPtrOutputWithContext(context.Background())
}

func (i PeeringServiceSkuArgs) ToPeeringServiceSkuPtrOutputWithContext(ctx context.Context) PeeringServiceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServiceSkuOutput).ToPeeringServiceSkuPtrOutputWithContext(ctx)
}

// PeeringServiceSkuPtrInput is an input type that accepts PeeringServiceSkuArgs, PeeringServiceSkuPtr and PeeringServiceSkuPtrOutput values.
// You can construct a concrete instance of `PeeringServiceSkuPtrInput` via:
//
//          PeeringServiceSkuArgs{...}
//
//  or:
//
//          nil
type PeeringServiceSkuPtrInput interface {
	pulumi.Input

	ToPeeringServiceSkuPtrOutput() PeeringServiceSkuPtrOutput
	ToPeeringServiceSkuPtrOutputWithContext(context.Context) PeeringServiceSkuPtrOutput
}

type peeringServiceSkuPtrType PeeringServiceSkuArgs

func PeeringServiceSkuPtr(v *PeeringServiceSkuArgs) PeeringServiceSkuPtrInput {
	return (*peeringServiceSkuPtrType)(v)
}

func (*peeringServiceSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringServiceSku)(nil)).Elem()
}

func (i *peeringServiceSkuPtrType) ToPeeringServiceSkuPtrOutput() PeeringServiceSkuPtrOutput {
	return i.ToPeeringServiceSkuPtrOutputWithContext(context.Background())
}

func (i *peeringServiceSkuPtrType) ToPeeringServiceSkuPtrOutputWithContext(ctx context.Context) PeeringServiceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServiceSkuPtrOutput)
}

// The SKU that defines the type of the peering service.
type PeeringServiceSkuOutput struct{ *pulumi.OutputState }

func (PeeringServiceSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringServiceSku)(nil)).Elem()
}

func (o PeeringServiceSkuOutput) ToPeeringServiceSkuOutput() PeeringServiceSkuOutput {
	return o
}

func (o PeeringServiceSkuOutput) ToPeeringServiceSkuOutputWithContext(ctx context.Context) PeeringServiceSkuOutput {
	return o
}

func (o PeeringServiceSkuOutput) ToPeeringServiceSkuPtrOutput() PeeringServiceSkuPtrOutput {
	return o.ToPeeringServiceSkuPtrOutputWithContext(context.Background())
}

func (o PeeringServiceSkuOutput) ToPeeringServiceSkuPtrOutputWithContext(ctx context.Context) PeeringServiceSkuPtrOutput {
	return o.ApplyT(func(v PeeringServiceSku) *PeeringServiceSku {
		return &v
	}).(PeeringServiceSkuPtrOutput)
}

// The name of the peering service SKU.
func (o PeeringServiceSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringServiceSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PeeringServiceSkuPtrOutput struct{ *pulumi.OutputState }

func (PeeringServiceSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringServiceSku)(nil)).Elem()
}

func (o PeeringServiceSkuPtrOutput) ToPeeringServiceSkuPtrOutput() PeeringServiceSkuPtrOutput {
	return o
}

func (o PeeringServiceSkuPtrOutput) ToPeeringServiceSkuPtrOutputWithContext(ctx context.Context) PeeringServiceSkuPtrOutput {
	return o
}

func (o PeeringServiceSkuPtrOutput) Elem() PeeringServiceSkuOutput {
	return o.ApplyT(func(v *PeeringServiceSku) PeeringServiceSku { return *v }).(PeeringServiceSkuOutput)
}

// The name of the peering service SKU.
func (o PeeringServiceSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringServiceSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU that defines the type of the peering service.
type PeeringServiceSkuResponse struct {
	// The name of the peering service SKU.
	Name *string `pulumi:"name"`
}

// PeeringServiceSkuResponseInput is an input type that accepts PeeringServiceSkuResponseArgs and PeeringServiceSkuResponseOutput values.
// You can construct a concrete instance of `PeeringServiceSkuResponseInput` via:
//
//          PeeringServiceSkuResponseArgs{...}
type PeeringServiceSkuResponseInput interface {
	pulumi.Input

	ToPeeringServiceSkuResponseOutput() PeeringServiceSkuResponseOutput
	ToPeeringServiceSkuResponseOutputWithContext(context.Context) PeeringServiceSkuResponseOutput
}

// The SKU that defines the type of the peering service.
type PeeringServiceSkuResponseArgs struct {
	// The name of the peering service SKU.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PeeringServiceSkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringServiceSkuResponse)(nil)).Elem()
}

func (i PeeringServiceSkuResponseArgs) ToPeeringServiceSkuResponseOutput() PeeringServiceSkuResponseOutput {
	return i.ToPeeringServiceSkuResponseOutputWithContext(context.Background())
}

func (i PeeringServiceSkuResponseArgs) ToPeeringServiceSkuResponseOutputWithContext(ctx context.Context) PeeringServiceSkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServiceSkuResponseOutput)
}

func (i PeeringServiceSkuResponseArgs) ToPeeringServiceSkuResponsePtrOutput() PeeringServiceSkuResponsePtrOutput {
	return i.ToPeeringServiceSkuResponsePtrOutputWithContext(context.Background())
}

func (i PeeringServiceSkuResponseArgs) ToPeeringServiceSkuResponsePtrOutputWithContext(ctx context.Context) PeeringServiceSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServiceSkuResponseOutput).ToPeeringServiceSkuResponsePtrOutputWithContext(ctx)
}

// PeeringServiceSkuResponsePtrInput is an input type that accepts PeeringServiceSkuResponseArgs, PeeringServiceSkuResponsePtr and PeeringServiceSkuResponsePtrOutput values.
// You can construct a concrete instance of `PeeringServiceSkuResponsePtrInput` via:
//
//          PeeringServiceSkuResponseArgs{...}
//
//  or:
//
//          nil
type PeeringServiceSkuResponsePtrInput interface {
	pulumi.Input

	ToPeeringServiceSkuResponsePtrOutput() PeeringServiceSkuResponsePtrOutput
	ToPeeringServiceSkuResponsePtrOutputWithContext(context.Context) PeeringServiceSkuResponsePtrOutput
}

type peeringServiceSkuResponsePtrType PeeringServiceSkuResponseArgs

func PeeringServiceSkuResponsePtr(v *PeeringServiceSkuResponseArgs) PeeringServiceSkuResponsePtrInput {
	return (*peeringServiceSkuResponsePtrType)(v)
}

func (*peeringServiceSkuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringServiceSkuResponse)(nil)).Elem()
}

func (i *peeringServiceSkuResponsePtrType) ToPeeringServiceSkuResponsePtrOutput() PeeringServiceSkuResponsePtrOutput {
	return i.ToPeeringServiceSkuResponsePtrOutputWithContext(context.Background())
}

func (i *peeringServiceSkuResponsePtrType) ToPeeringServiceSkuResponsePtrOutputWithContext(ctx context.Context) PeeringServiceSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringServiceSkuResponsePtrOutput)
}

// The SKU that defines the type of the peering service.
type PeeringServiceSkuResponseOutput struct{ *pulumi.OutputState }

func (PeeringServiceSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringServiceSkuResponse)(nil)).Elem()
}

func (o PeeringServiceSkuResponseOutput) ToPeeringServiceSkuResponseOutput() PeeringServiceSkuResponseOutput {
	return o
}

func (o PeeringServiceSkuResponseOutput) ToPeeringServiceSkuResponseOutputWithContext(ctx context.Context) PeeringServiceSkuResponseOutput {
	return o
}

func (o PeeringServiceSkuResponseOutput) ToPeeringServiceSkuResponsePtrOutput() PeeringServiceSkuResponsePtrOutput {
	return o.ToPeeringServiceSkuResponsePtrOutputWithContext(context.Background())
}

func (o PeeringServiceSkuResponseOutput) ToPeeringServiceSkuResponsePtrOutputWithContext(ctx context.Context) PeeringServiceSkuResponsePtrOutput {
	return o.ApplyT(func(v PeeringServiceSkuResponse) *PeeringServiceSkuResponse {
		return &v
	}).(PeeringServiceSkuResponsePtrOutput)
}

// The name of the peering service SKU.
func (o PeeringServiceSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringServiceSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PeeringServiceSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (PeeringServiceSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringServiceSkuResponse)(nil)).Elem()
}

func (o PeeringServiceSkuResponsePtrOutput) ToPeeringServiceSkuResponsePtrOutput() PeeringServiceSkuResponsePtrOutput {
	return o
}

func (o PeeringServiceSkuResponsePtrOutput) ToPeeringServiceSkuResponsePtrOutputWithContext(ctx context.Context) PeeringServiceSkuResponsePtrOutput {
	return o
}

func (o PeeringServiceSkuResponsePtrOutput) Elem() PeeringServiceSkuResponseOutput {
	return o.ApplyT(func(v *PeeringServiceSkuResponse) PeeringServiceSkuResponse { return *v }).(PeeringServiceSkuResponseOutput)
}

// The name of the peering service SKU.
func (o PeeringServiceSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringServiceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU that defines the tier and kind of the peering.
type PeeringSku struct {
	// The family of the peering SKU.
	Family *string `pulumi:"family"`
	// The name of the peering SKU.
	Name *string `pulumi:"name"`
	// The size of the peering SKU.
	Size *string `pulumi:"size"`
	// The tier of the peering SKU.
	Tier *string `pulumi:"tier"`
}

// PeeringSkuInput is an input type that accepts PeeringSkuArgs and PeeringSkuOutput values.
// You can construct a concrete instance of `PeeringSkuInput` via:
//
//          PeeringSkuArgs{...}
type PeeringSkuInput interface {
	pulumi.Input

	ToPeeringSkuOutput() PeeringSkuOutput
	ToPeeringSkuOutputWithContext(context.Context) PeeringSkuOutput
}

// The SKU that defines the tier and kind of the peering.
type PeeringSkuArgs struct {
	// The family of the peering SKU.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The name of the peering SKU.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The size of the peering SKU.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The tier of the peering SKU.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (PeeringSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringSku)(nil)).Elem()
}

func (i PeeringSkuArgs) ToPeeringSkuOutput() PeeringSkuOutput {
	return i.ToPeeringSkuOutputWithContext(context.Background())
}

func (i PeeringSkuArgs) ToPeeringSkuOutputWithContext(ctx context.Context) PeeringSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringSkuOutput)
}

func (i PeeringSkuArgs) ToPeeringSkuPtrOutput() PeeringSkuPtrOutput {
	return i.ToPeeringSkuPtrOutputWithContext(context.Background())
}

func (i PeeringSkuArgs) ToPeeringSkuPtrOutputWithContext(ctx context.Context) PeeringSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringSkuOutput).ToPeeringSkuPtrOutputWithContext(ctx)
}

// PeeringSkuPtrInput is an input type that accepts PeeringSkuArgs, PeeringSkuPtr and PeeringSkuPtrOutput values.
// You can construct a concrete instance of `PeeringSkuPtrInput` via:
//
//          PeeringSkuArgs{...}
//
//  or:
//
//          nil
type PeeringSkuPtrInput interface {
	pulumi.Input

	ToPeeringSkuPtrOutput() PeeringSkuPtrOutput
	ToPeeringSkuPtrOutputWithContext(context.Context) PeeringSkuPtrOutput
}

type peeringSkuPtrType PeeringSkuArgs

func PeeringSkuPtr(v *PeeringSkuArgs) PeeringSkuPtrInput {
	return (*peeringSkuPtrType)(v)
}

func (*peeringSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringSku)(nil)).Elem()
}

func (i *peeringSkuPtrType) ToPeeringSkuPtrOutput() PeeringSkuPtrOutput {
	return i.ToPeeringSkuPtrOutputWithContext(context.Background())
}

func (i *peeringSkuPtrType) ToPeeringSkuPtrOutputWithContext(ctx context.Context) PeeringSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringSkuPtrOutput)
}

// The SKU that defines the tier and kind of the peering.
type PeeringSkuOutput struct{ *pulumi.OutputState }

func (PeeringSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringSku)(nil)).Elem()
}

func (o PeeringSkuOutput) ToPeeringSkuOutput() PeeringSkuOutput {
	return o
}

func (o PeeringSkuOutput) ToPeeringSkuOutputWithContext(ctx context.Context) PeeringSkuOutput {
	return o
}

func (o PeeringSkuOutput) ToPeeringSkuPtrOutput() PeeringSkuPtrOutput {
	return o.ToPeeringSkuPtrOutputWithContext(context.Background())
}

func (o PeeringSkuOutput) ToPeeringSkuPtrOutputWithContext(ctx context.Context) PeeringSkuPtrOutput {
	return o.ApplyT(func(v PeeringSku) *PeeringSku {
		return &v
	}).(PeeringSkuPtrOutput)
}

// The family of the peering SKU.
func (o PeeringSkuOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringSku) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the peering SKU.
func (o PeeringSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The size of the peering SKU.
func (o PeeringSkuOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringSku) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The tier of the peering SKU.
func (o PeeringSkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringSku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type PeeringSkuPtrOutput struct{ *pulumi.OutputState }

func (PeeringSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringSku)(nil)).Elem()
}

func (o PeeringSkuPtrOutput) ToPeeringSkuPtrOutput() PeeringSkuPtrOutput {
	return o
}

func (o PeeringSkuPtrOutput) ToPeeringSkuPtrOutputWithContext(ctx context.Context) PeeringSkuPtrOutput {
	return o
}

func (o PeeringSkuPtrOutput) Elem() PeeringSkuOutput {
	return o.ApplyT(func(v *PeeringSku) PeeringSku { return *v }).(PeeringSkuOutput)
}

// The family of the peering SKU.
func (o PeeringSkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringSku) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the peering SKU.
func (o PeeringSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The size of the peering SKU.
func (o PeeringSkuPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringSku) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The tier of the peering SKU.
func (o PeeringSkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringSku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// The SKU that defines the tier and kind of the peering.
type PeeringSkuResponse struct {
	// The family of the peering SKU.
	Family *string `pulumi:"family"`
	// The name of the peering SKU.
	Name *string `pulumi:"name"`
	// The size of the peering SKU.
	Size *string `pulumi:"size"`
	// The tier of the peering SKU.
	Tier *string `pulumi:"tier"`
}

// PeeringSkuResponseInput is an input type that accepts PeeringSkuResponseArgs and PeeringSkuResponseOutput values.
// You can construct a concrete instance of `PeeringSkuResponseInput` via:
//
//          PeeringSkuResponseArgs{...}
type PeeringSkuResponseInput interface {
	pulumi.Input

	ToPeeringSkuResponseOutput() PeeringSkuResponseOutput
	ToPeeringSkuResponseOutputWithContext(context.Context) PeeringSkuResponseOutput
}

// The SKU that defines the tier and kind of the peering.
type PeeringSkuResponseArgs struct {
	// The family of the peering SKU.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The name of the peering SKU.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The size of the peering SKU.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The tier of the peering SKU.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (PeeringSkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringSkuResponse)(nil)).Elem()
}

func (i PeeringSkuResponseArgs) ToPeeringSkuResponseOutput() PeeringSkuResponseOutput {
	return i.ToPeeringSkuResponseOutputWithContext(context.Background())
}

func (i PeeringSkuResponseArgs) ToPeeringSkuResponseOutputWithContext(ctx context.Context) PeeringSkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringSkuResponseOutput)
}

func (i PeeringSkuResponseArgs) ToPeeringSkuResponsePtrOutput() PeeringSkuResponsePtrOutput {
	return i.ToPeeringSkuResponsePtrOutputWithContext(context.Background())
}

func (i PeeringSkuResponseArgs) ToPeeringSkuResponsePtrOutputWithContext(ctx context.Context) PeeringSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringSkuResponseOutput).ToPeeringSkuResponsePtrOutputWithContext(ctx)
}

// PeeringSkuResponsePtrInput is an input type that accepts PeeringSkuResponseArgs, PeeringSkuResponsePtr and PeeringSkuResponsePtrOutput values.
// You can construct a concrete instance of `PeeringSkuResponsePtrInput` via:
//
//          PeeringSkuResponseArgs{...}
//
//  or:
//
//          nil
type PeeringSkuResponsePtrInput interface {
	pulumi.Input

	ToPeeringSkuResponsePtrOutput() PeeringSkuResponsePtrOutput
	ToPeeringSkuResponsePtrOutputWithContext(context.Context) PeeringSkuResponsePtrOutput
}

type peeringSkuResponsePtrType PeeringSkuResponseArgs

func PeeringSkuResponsePtr(v *PeeringSkuResponseArgs) PeeringSkuResponsePtrInput {
	return (*peeringSkuResponsePtrType)(v)
}

func (*peeringSkuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringSkuResponse)(nil)).Elem()
}

func (i *peeringSkuResponsePtrType) ToPeeringSkuResponsePtrOutput() PeeringSkuResponsePtrOutput {
	return i.ToPeeringSkuResponsePtrOutputWithContext(context.Background())
}

func (i *peeringSkuResponsePtrType) ToPeeringSkuResponsePtrOutputWithContext(ctx context.Context) PeeringSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringSkuResponsePtrOutput)
}

// The SKU that defines the tier and kind of the peering.
type PeeringSkuResponseOutput struct{ *pulumi.OutputState }

func (PeeringSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringSkuResponse)(nil)).Elem()
}

func (o PeeringSkuResponseOutput) ToPeeringSkuResponseOutput() PeeringSkuResponseOutput {
	return o
}

func (o PeeringSkuResponseOutput) ToPeeringSkuResponseOutputWithContext(ctx context.Context) PeeringSkuResponseOutput {
	return o
}

func (o PeeringSkuResponseOutput) ToPeeringSkuResponsePtrOutput() PeeringSkuResponsePtrOutput {
	return o.ToPeeringSkuResponsePtrOutputWithContext(context.Background())
}

func (o PeeringSkuResponseOutput) ToPeeringSkuResponsePtrOutputWithContext(ctx context.Context) PeeringSkuResponsePtrOutput {
	return o.ApplyT(func(v PeeringSkuResponse) *PeeringSkuResponse {
		return &v
	}).(PeeringSkuResponsePtrOutput)
}

// The family of the peering SKU.
func (o PeeringSkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringSkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the peering SKU.
func (o PeeringSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The size of the peering SKU.
func (o PeeringSkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringSkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The tier of the peering SKU.
func (o PeeringSkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeeringSkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type PeeringSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (PeeringSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringSkuResponse)(nil)).Elem()
}

func (o PeeringSkuResponsePtrOutput) ToPeeringSkuResponsePtrOutput() PeeringSkuResponsePtrOutput {
	return o
}

func (o PeeringSkuResponsePtrOutput) ToPeeringSkuResponsePtrOutputWithContext(ctx context.Context) PeeringSkuResponsePtrOutput {
	return o
}

func (o PeeringSkuResponsePtrOutput) Elem() PeeringSkuResponseOutput {
	return o.ApplyT(func(v *PeeringSkuResponse) PeeringSkuResponse { return *v }).(PeeringSkuResponseOutput)
}

// The family of the peering SKU.
func (o PeeringSkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the peering SKU.
func (o PeeringSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The size of the peering SKU.
func (o PeeringSkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// The tier of the peering SKU.
func (o PeeringSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeeringSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// The peering service prefix class.
type PrefixType struct {
	// The name of the resource.
	Name string `pulumi:"name"`
	// Gets or sets the peering prefix properties.
	Properties PeeringServicePrefixPropertiesResponse `pulumi:"properties"`
	// The type of the resource.
	Type string `pulumi:"type"`
}

// PrefixTypeInput is an input type that accepts PrefixTypeArgs and PrefixTypeOutput values.
// You can construct a concrete instance of `PrefixTypeInput` via:
//
//          PrefixTypeArgs{...}
type PrefixTypeInput interface {
	pulumi.Input

	ToPrefixTypeOutput() PrefixTypeOutput
	ToPrefixTypeOutputWithContext(context.Context) PrefixTypeOutput
}

// The peering service prefix class.
type PrefixTypeArgs struct {
	// The name of the resource.
	Name pulumi.StringInput `pulumi:"name"`
	// Gets or sets the peering prefix properties.
	Properties PeeringServicePrefixPropertiesResponseInput `pulumi:"properties"`
	// The type of the resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PrefixTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrefixType)(nil)).Elem()
}

func (i PrefixTypeArgs) ToPrefixTypeOutput() PrefixTypeOutput {
	return i.ToPrefixTypeOutputWithContext(context.Background())
}

func (i PrefixTypeArgs) ToPrefixTypeOutputWithContext(ctx context.Context) PrefixTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixTypeOutput)
}

// The peering service prefix class.
type PrefixTypeOutput struct{ *pulumi.OutputState }

func (PrefixTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrefixType)(nil)).Elem()
}

func (o PrefixTypeOutput) ToPrefixTypeOutput() PrefixTypeOutput {
	return o
}

func (o PrefixTypeOutput) ToPrefixTypeOutputWithContext(ctx context.Context) PrefixTypeOutput {
	return o
}

// The name of the resource.
func (o PrefixTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrefixType) string { return v.Name }).(pulumi.StringOutput)
}

// Gets or sets the peering prefix properties.
func (o PrefixTypeOutput) Properties() PeeringServicePrefixPropertiesResponseOutput {
	return o.ApplyT(func(v PrefixType) PeeringServicePrefixPropertiesResponse { return v.Properties }).(PeeringServicePrefixPropertiesResponseOutput)
}

// The type of the resource.
func (o PrefixTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrefixType) string { return v.Type }).(pulumi.StringOutput)
}

// The customer's ASN that is registered by the peering service provider.
type RegisteredAsnType struct {
	// The name of the resource.
	Name string `pulumi:"name"`
	// The properties that define a registered ASN.
	Properties PeeringRegisteredAsnPropertiesResponse `pulumi:"properties"`
	// The type of the resource.
	Type string `pulumi:"type"`
}

// RegisteredAsnTypeInput is an input type that accepts RegisteredAsnTypeArgs and RegisteredAsnTypeOutput values.
// You can construct a concrete instance of `RegisteredAsnTypeInput` via:
//
//          RegisteredAsnTypeArgs{...}
type RegisteredAsnTypeInput interface {
	pulumi.Input

	ToRegisteredAsnTypeOutput() RegisteredAsnTypeOutput
	ToRegisteredAsnTypeOutputWithContext(context.Context) RegisteredAsnTypeOutput
}

// The customer's ASN that is registered by the peering service provider.
type RegisteredAsnTypeArgs struct {
	// The name of the resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties that define a registered ASN.
	Properties PeeringRegisteredAsnPropertiesResponseInput `pulumi:"properties"`
	// The type of the resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RegisteredAsnTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegisteredAsnType)(nil)).Elem()
}

func (i RegisteredAsnTypeArgs) ToRegisteredAsnTypeOutput() RegisteredAsnTypeOutput {
	return i.ToRegisteredAsnTypeOutputWithContext(context.Background())
}

func (i RegisteredAsnTypeArgs) ToRegisteredAsnTypeOutputWithContext(ctx context.Context) RegisteredAsnTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegisteredAsnTypeOutput)
}

// The customer's ASN that is registered by the peering service provider.
type RegisteredAsnTypeOutput struct{ *pulumi.OutputState }

func (RegisteredAsnTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegisteredAsnType)(nil)).Elem()
}

func (o RegisteredAsnTypeOutput) ToRegisteredAsnTypeOutput() RegisteredAsnTypeOutput {
	return o
}

func (o RegisteredAsnTypeOutput) ToRegisteredAsnTypeOutputWithContext(ctx context.Context) RegisteredAsnTypeOutput {
	return o
}

// The name of the resource.
func (o RegisteredAsnTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RegisteredAsnType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties that define a registered ASN.
func (o RegisteredAsnTypeOutput) Properties() PeeringRegisteredAsnPropertiesResponseOutput {
	return o.ApplyT(func(v RegisteredAsnType) PeeringRegisteredAsnPropertiesResponse { return v.Properties }).(PeeringRegisteredAsnPropertiesResponseOutput)
}

// The type of the resource.
func (o RegisteredAsnTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RegisteredAsnType) string { return v.Type }).(pulumi.StringOutput)
}

// The customer's prefix that is registered by the peering service provider.
type RegisteredPrefixType struct {
	// The name of the resource.
	Name string `pulumi:"name"`
	// The properties that define a registered prefix.
	Properties PeeringRegisteredPrefixPropertiesResponse `pulumi:"properties"`
	// The type of the resource.
	Type string `pulumi:"type"`
}

// RegisteredPrefixTypeInput is an input type that accepts RegisteredPrefixTypeArgs and RegisteredPrefixTypeOutput values.
// You can construct a concrete instance of `RegisteredPrefixTypeInput` via:
//
//          RegisteredPrefixTypeArgs{...}
type RegisteredPrefixTypeInput interface {
	pulumi.Input

	ToRegisteredPrefixTypeOutput() RegisteredPrefixTypeOutput
	ToRegisteredPrefixTypeOutputWithContext(context.Context) RegisteredPrefixTypeOutput
}

// The customer's prefix that is registered by the peering service provider.
type RegisteredPrefixTypeArgs struct {
	// The name of the resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties that define a registered prefix.
	Properties PeeringRegisteredPrefixPropertiesResponseInput `pulumi:"properties"`
	// The type of the resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RegisteredPrefixTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegisteredPrefixType)(nil)).Elem()
}

func (i RegisteredPrefixTypeArgs) ToRegisteredPrefixTypeOutput() RegisteredPrefixTypeOutput {
	return i.ToRegisteredPrefixTypeOutputWithContext(context.Background())
}

func (i RegisteredPrefixTypeArgs) ToRegisteredPrefixTypeOutputWithContext(ctx context.Context) RegisteredPrefixTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegisteredPrefixTypeOutput)
}

// The customer's prefix that is registered by the peering service provider.
type RegisteredPrefixTypeOutput struct{ *pulumi.OutputState }

func (RegisteredPrefixTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegisteredPrefixType)(nil)).Elem()
}

func (o RegisteredPrefixTypeOutput) ToRegisteredPrefixTypeOutput() RegisteredPrefixTypeOutput {
	return o
}

func (o RegisteredPrefixTypeOutput) ToRegisteredPrefixTypeOutputWithContext(ctx context.Context) RegisteredPrefixTypeOutput {
	return o
}

// The name of the resource.
func (o RegisteredPrefixTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RegisteredPrefixType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties that define a registered prefix.
func (o RegisteredPrefixTypeOutput) Properties() PeeringRegisteredPrefixPropertiesResponseOutput {
	return o.ApplyT(func(v RegisteredPrefixType) PeeringRegisteredPrefixPropertiesResponse { return v.Properties }).(PeeringRegisteredPrefixPropertiesResponseOutput)
}

// The type of the resource.
func (o RegisteredPrefixTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RegisteredPrefixType) string { return v.Type }).(pulumi.StringOutput)
}

// The sub resource.
type SubResource struct {
	// The identifier of the referenced resource.
	Id *string `pulumi:"id"`
}

// SubResourceInput is an input type that accepts SubResourceArgs and SubResourceOutput values.
// You can construct a concrete instance of `SubResourceInput` via:
//
//          SubResourceArgs{...}
type SubResourceInput interface {
	pulumi.Input

	ToSubResourceOutput() SubResourceOutput
	ToSubResourceOutputWithContext(context.Context) SubResourceOutput
}

// The sub resource.
type SubResourceArgs struct {
	// The identifier of the referenced resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SubResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResource)(nil)).Elem()
}

func (i SubResourceArgs) ToSubResourceOutput() SubResourceOutput {
	return i.ToSubResourceOutputWithContext(context.Background())
}

func (i SubResourceArgs) ToSubResourceOutputWithContext(ctx context.Context) SubResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceOutput)
}

func (i SubResourceArgs) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return i.ToSubResourcePtrOutputWithContext(context.Background())
}

func (i SubResourceArgs) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceOutput).ToSubResourcePtrOutputWithContext(ctx)
}

// SubResourcePtrInput is an input type that accepts SubResourceArgs, SubResourcePtr and SubResourcePtrOutput values.
// You can construct a concrete instance of `SubResourcePtrInput` via:
//
//          SubResourceArgs{...}
//
//  or:
//
//          nil
type SubResourcePtrInput interface {
	pulumi.Input

	ToSubResourcePtrOutput() SubResourcePtrOutput
	ToSubResourcePtrOutputWithContext(context.Context) SubResourcePtrOutput
}

type subResourcePtrType SubResourceArgs

func SubResourcePtr(v *SubResourceArgs) SubResourcePtrInput {
	return (*subResourcePtrType)(v)
}

func (*subResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResource)(nil)).Elem()
}

func (i *subResourcePtrType) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return i.ToSubResourcePtrOutputWithContext(context.Background())
}

func (i *subResourcePtrType) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourcePtrOutput)
}

// The sub resource.
type SubResourceOutput struct{ *pulumi.OutputState }

func (SubResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResource)(nil)).Elem()
}

func (o SubResourceOutput) ToSubResourceOutput() SubResourceOutput {
	return o
}

func (o SubResourceOutput) ToSubResourceOutputWithContext(ctx context.Context) SubResourceOutput {
	return o
}

func (o SubResourceOutput) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return o.ToSubResourcePtrOutputWithContext(context.Background())
}

func (o SubResourceOutput) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return o.ApplyT(func(v SubResource) *SubResource {
		return &v
	}).(SubResourcePtrOutput)
}

// The identifier of the referenced resource.
func (o SubResourceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubResource) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubResourcePtrOutput struct{ *pulumi.OutputState }

func (SubResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResource)(nil)).Elem()
}

func (o SubResourcePtrOutput) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return o
}

func (o SubResourcePtrOutput) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return o
}

func (o SubResourcePtrOutput) Elem() SubResourceOutput {
	return o.ApplyT(func(v *SubResource) SubResource { return *v }).(SubResourceOutput)
}

// The identifier of the referenced resource.
func (o SubResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubResource) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The sub resource.
type SubResourceResponse struct {
	// The identifier of the referenced resource.
	Id *string `pulumi:"id"`
}

// SubResourceResponseInput is an input type that accepts SubResourceResponseArgs and SubResourceResponseOutput values.
// You can construct a concrete instance of `SubResourceResponseInput` via:
//
//          SubResourceResponseArgs{...}
type SubResourceResponseInput interface {
	pulumi.Input

	ToSubResourceResponseOutput() SubResourceResponseOutput
	ToSubResourceResponseOutputWithContext(context.Context) SubResourceResponseOutput
}

// The sub resource.
type SubResourceResponseArgs struct {
	// The identifier of the referenced resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SubResourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResourceResponse)(nil)).Elem()
}

func (i SubResourceResponseArgs) ToSubResourceResponseOutput() SubResourceResponseOutput {
	return i.ToSubResourceResponseOutputWithContext(context.Background())
}

func (i SubResourceResponseArgs) ToSubResourceResponseOutputWithContext(ctx context.Context) SubResourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceResponseOutput)
}

func (i SubResourceResponseArgs) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return i.ToSubResourceResponsePtrOutputWithContext(context.Background())
}

func (i SubResourceResponseArgs) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceResponseOutput).ToSubResourceResponsePtrOutputWithContext(ctx)
}

// SubResourceResponsePtrInput is an input type that accepts SubResourceResponseArgs, SubResourceResponsePtr and SubResourceResponsePtrOutput values.
// You can construct a concrete instance of `SubResourceResponsePtrInput` via:
//
//          SubResourceResponseArgs{...}
//
//  or:
//
//          nil
type SubResourceResponsePtrInput interface {
	pulumi.Input

	ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput
	ToSubResourceResponsePtrOutputWithContext(context.Context) SubResourceResponsePtrOutput
}

type subResourceResponsePtrType SubResourceResponseArgs

func SubResourceResponsePtr(v *SubResourceResponseArgs) SubResourceResponsePtrInput {
	return (*subResourceResponsePtrType)(v)
}

func (*subResourceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResourceResponse)(nil)).Elem()
}

func (i *subResourceResponsePtrType) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return i.ToSubResourceResponsePtrOutputWithContext(context.Background())
}

func (i *subResourceResponsePtrType) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceResponsePtrOutput)
}

// The sub resource.
type SubResourceResponseOutput struct{ *pulumi.OutputState }

func (SubResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponseOutput) ToSubResourceResponseOutput() SubResourceResponseOutput {
	return o
}

func (o SubResourceResponseOutput) ToSubResourceResponseOutputWithContext(ctx context.Context) SubResourceResponseOutput {
	return o
}

func (o SubResourceResponseOutput) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return o.ToSubResourceResponsePtrOutputWithContext(context.Background())
}

func (o SubResourceResponseOutput) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return o.ApplyT(func(v SubResourceResponse) *SubResourceResponse {
		return &v
	}).(SubResourceResponsePtrOutput)
}

// The identifier of the referenced resource.
func (o SubResourceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubResourceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubResourceResponsePtrOutput struct{ *pulumi.OutputState }

func (SubResourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponsePtrOutput) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return o
}

func (o SubResourceResponsePtrOutput) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return o
}

func (o SubResourceResponsePtrOutput) Elem() SubResourceResponseOutput {
	return o.ApplyT(func(v *SubResourceResponse) SubResourceResponse { return *v }).(SubResourceResponseOutput)
}

// The identifier of the referenced resource.
func (o SubResourceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubResourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(BgpSessionOutput{})
	pulumi.RegisterOutputType(BgpSessionPtrOutput{})
	pulumi.RegisterOutputType(BgpSessionResponseOutput{})
	pulumi.RegisterOutputType(BgpSessionResponsePtrOutput{})
	pulumi.RegisterOutputType(ContactDetailOutput{})
	pulumi.RegisterOutputType(ContactDetailArrayOutput{})
	pulumi.RegisterOutputType(ContactDetailResponseOutput{})
	pulumi.RegisterOutputType(ContactDetailResponseArrayOutput{})
	pulumi.RegisterOutputType(DirectConnectionOutput{})
	pulumi.RegisterOutputType(DirectConnectionArrayOutput{})
	pulumi.RegisterOutputType(DirectConnectionResponseOutput{})
	pulumi.RegisterOutputType(DirectConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(ExchangeConnectionOutput{})
	pulumi.RegisterOutputType(ExchangeConnectionArrayOutput{})
	pulumi.RegisterOutputType(ExchangeConnectionResponseOutput{})
	pulumi.RegisterOutputType(ExchangeConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(PeerAsnTypeOutput{})
	pulumi.RegisterOutputType(PeerAsnPropertiesOutput{})
	pulumi.RegisterOutputType(PeerAsnPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PeerAsnPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PeerAsnPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PeeringTypeOutput{})
	pulumi.RegisterOutputType(PeeringPropertiesOutput{})
	pulumi.RegisterOutputType(PeeringPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PeeringPropertiesDirectOutput{})
	pulumi.RegisterOutputType(PeeringPropertiesDirectPtrOutput{})
	pulumi.RegisterOutputType(PeeringPropertiesDirectResponseOutput{})
	pulumi.RegisterOutputType(PeeringPropertiesDirectResponsePtrOutput{})
	pulumi.RegisterOutputType(PeeringPropertiesExchangeOutput{})
	pulumi.RegisterOutputType(PeeringPropertiesExchangePtrOutput{})
	pulumi.RegisterOutputType(PeeringPropertiesExchangeResponseOutput{})
	pulumi.RegisterOutputType(PeeringPropertiesExchangeResponsePtrOutput{})
	pulumi.RegisterOutputType(PeeringPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PeeringPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PeeringRegisteredAsnPropertiesOutput{})
	pulumi.RegisterOutputType(PeeringRegisteredAsnPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PeeringRegisteredAsnPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PeeringRegisteredAsnPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PeeringRegisteredPrefixPropertiesOutput{})
	pulumi.RegisterOutputType(PeeringRegisteredPrefixPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PeeringRegisteredPrefixPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PeeringRegisteredPrefixPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PeeringServiceTypeOutput{})
	pulumi.RegisterOutputType(PeeringServicePrefixEventOutput{})
	pulumi.RegisterOutputType(PeeringServicePrefixEventResponseOutput{})
	pulumi.RegisterOutputType(PeeringServicePrefixEventResponseArrayOutput{})
	pulumi.RegisterOutputType(PeeringServicePrefixPropertiesOutput{})
	pulumi.RegisterOutputType(PeeringServicePrefixPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PeeringServicePrefixPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PeeringServicePrefixPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PeeringServicePropertiesOutput{})
	pulumi.RegisterOutputType(PeeringServicePropertiesPtrOutput{})
	pulumi.RegisterOutputType(PeeringServicePropertiesResponseOutput{})
	pulumi.RegisterOutputType(PeeringServicePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PeeringServiceSkuOutput{})
	pulumi.RegisterOutputType(PeeringServiceSkuPtrOutput{})
	pulumi.RegisterOutputType(PeeringServiceSkuResponseOutput{})
	pulumi.RegisterOutputType(PeeringServiceSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(PeeringSkuOutput{})
	pulumi.RegisterOutputType(PeeringSkuPtrOutput{})
	pulumi.RegisterOutputType(PeeringSkuResponseOutput{})
	pulumi.RegisterOutputType(PeeringSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(PrefixTypeOutput{})
	pulumi.RegisterOutputType(RegisteredAsnTypeOutput{})
	pulumi.RegisterOutputType(RegisteredPrefixTypeOutput{})
	pulumi.RegisterOutputType(SubResourceOutput{})
	pulumi.RegisterOutputType(SubResourcePtrOutput{})
	pulumi.RegisterOutputType(SubResourceResponseOutput{})
	pulumi.RegisterOutputType(SubResourceResponsePtrOutput{})
}
