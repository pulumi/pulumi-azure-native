// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200401

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The peering service prefix class.
type Prefix struct {
	pulumi.CustomResourceState

	// The name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Gets or sets the peering prefix properties.
	Properties PeeringServicePrefixPropertiesResponseOutput `pulumi:"properties"`
	// The type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewPrefix registers a new resource with the given unique name, arguments, and options.
func NewPrefix(ctx *pulumi.Context,
	name string, args *PrefixArgs, opts ...pulumi.ResourceOption) (*Prefix, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.PeeringServiceName == nil {
		return nil, errors.New("missing required argument 'PeeringServiceName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &PrefixArgs{}
	}
	var resource Prefix
	err := ctx.RegisterResource("azurerm:peering/v20200401:Prefix", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrefix gets an existing Prefix resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrefix(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrefixState, opts ...pulumi.ResourceOption) (*Prefix, error) {
	var resource Prefix
	err := ctx.ReadResource("azurerm:peering/v20200401:Prefix", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Prefix resources.
type prefixState struct {
	// The name of the resource.
	Name *string `pulumi:"name"`
	// Gets or sets the peering prefix properties.
	Properties *PeeringServicePrefixPropertiesResponse `pulumi:"properties"`
	// The type of the resource.
	Type *string `pulumi:"type"`
}

type PrefixState struct {
	// The name of the resource.
	Name pulumi.StringPtrInput
	// Gets or sets the peering prefix properties.
	Properties PeeringServicePrefixPropertiesResponsePtrInput
	// The type of the resource.
	Type pulumi.StringPtrInput
}

func (PrefixState) ElementType() reflect.Type {
	return reflect.TypeOf((*prefixState)(nil)).Elem()
}

type prefixArgs struct {
	// The name of the prefix.
	Name string `pulumi:"name"`
	// The name of the peering service.
	PeeringServiceName string `pulumi:"peeringServiceName"`
	// Gets or sets the peering prefix properties.
	Properties *PeeringServicePrefixProperties `pulumi:"properties"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Prefix resource.
type PrefixArgs struct {
	// The name of the prefix.
	Name pulumi.StringInput
	// The name of the peering service.
	PeeringServiceName pulumi.StringInput
	// Gets or sets the peering prefix properties.
	Properties PeeringServicePrefixPropertiesPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
}

func (PrefixArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*prefixArgs)(nil)).Elem()
}
