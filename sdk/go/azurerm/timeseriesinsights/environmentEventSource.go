// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package timeseriesinsights

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// An environment receives data from one or more event sources. Each event source has associated connection info that allows the Time Series Insights ingress pipeline to connect to and pull data from the event source
type EnvironmentEventSource struct {
	pulumi.CustomResourceState

	// The kind of the event source.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Resource location
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewEnvironmentEventSource registers a new resource with the given unique name, arguments, and options.
func NewEnvironmentEventSource(ctx *pulumi.Context,
	name string, args *EnvironmentEventSourceArgs, opts ...pulumi.ResourceOption) (*EnvironmentEventSource, error) {
	if args == nil || args.EnvironmentName == nil {
		return nil, errors.New("missing required argument 'EnvironmentName'")
	}
	if args == nil || args.Kind == nil {
		return nil, errors.New("missing required argument 'Kind'")
	}
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &EnvironmentEventSourceArgs{}
	}
	var resource EnvironmentEventSource
	err := ctx.RegisterResource("azurerm:timeseriesinsights:EnvironmentEventSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironmentEventSource gets an existing EnvironmentEventSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironmentEventSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentEventSourceState, opts ...pulumi.ResourceOption) (*EnvironmentEventSource, error) {
	var resource EnvironmentEventSource
	err := ctx.ReadResource("azurerm:timeseriesinsights:EnvironmentEventSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvironmentEventSource resources.
type environmentEventSourceState struct {
	// The kind of the event source.
	Kind *string `pulumi:"kind"`
	// Resource location
	Location *string `pulumi:"location"`
	// Resource name
	Name *string `pulumi:"name"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type *string `pulumi:"type"`
}

type EnvironmentEventSourceState struct {
	// The kind of the event source.
	Kind pulumi.StringPtrInput
	// Resource location
	Location pulumi.StringPtrInput
	// Resource name
	Name pulumi.StringPtrInput
	// Resource tags
	Tags pulumi.StringMapInput
	// Resource type
	Type pulumi.StringPtrInput
}

func (EnvironmentEventSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentEventSourceState)(nil)).Elem()
}

type environmentEventSourceArgs struct {
	// The name of the Time Series Insights environment associated with the specified resource group.
	EnvironmentName string `pulumi:"environmentName"`
	// The kind of the event source.
	Kind string `pulumi:"kind"`
	// The location of the resource.
	Location string `pulumi:"location"`
	// Name of the event source.
	Name string `pulumi:"name"`
	// Name of an Azure Resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Key-value pairs of additional properties for the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a EnvironmentEventSource resource.
type EnvironmentEventSourceArgs struct {
	// The name of the Time Series Insights environment associated with the specified resource group.
	EnvironmentName pulumi.StringInput
	// The kind of the event source.
	Kind pulumi.StringInput
	// The location of the resource.
	Location pulumi.StringInput
	// Name of the event source.
	Name pulumi.StringInput
	// Name of an Azure Resource group.
	ResourceGroupName pulumi.StringInput
	// Key-value pairs of additional properties for the resource.
	Tags pulumi.StringMapInput
}

func (EnvironmentEventSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentEventSourceArgs)(nil)).Elem()
}
