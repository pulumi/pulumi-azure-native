// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180815preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
type LocalTimestamp struct {
	// An enum that represents the format of the local timestamp property that needs to be set.
	Format *string `pulumi:"format"`
	// An object that represents the offset information for the local timestamp format specified. Should not be specified for LocalTimestampFormat - Embedded.
	TimeZoneOffset *LocalTimestampTimeZoneOffset `pulumi:"timeZoneOffset"`
}

// LocalTimestampInput is an input type that accepts LocalTimestampArgs and LocalTimestampOutput values.
// You can construct a concrete instance of `LocalTimestampInput` via:
//
//          LocalTimestampArgs{...}
type LocalTimestampInput interface {
	pulumi.Input

	ToLocalTimestampOutput() LocalTimestampOutput
	ToLocalTimestampOutputWithContext(context.Context) LocalTimestampOutput
}

// An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
type LocalTimestampArgs struct {
	// An enum that represents the format of the local timestamp property that needs to be set.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// An object that represents the offset information for the local timestamp format specified. Should not be specified for LocalTimestampFormat - Embedded.
	TimeZoneOffset LocalTimestampTimeZoneOffsetPtrInput `pulumi:"timeZoneOffset"`
}

func (LocalTimestampArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalTimestamp)(nil)).Elem()
}

func (i LocalTimestampArgs) ToLocalTimestampOutput() LocalTimestampOutput {
	return i.ToLocalTimestampOutputWithContext(context.Background())
}

func (i LocalTimestampArgs) ToLocalTimestampOutputWithContext(ctx context.Context) LocalTimestampOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalTimestampOutput)
}

func (i LocalTimestampArgs) ToLocalTimestampPtrOutput() LocalTimestampPtrOutput {
	return i.ToLocalTimestampPtrOutputWithContext(context.Background())
}

func (i LocalTimestampArgs) ToLocalTimestampPtrOutputWithContext(ctx context.Context) LocalTimestampPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalTimestampOutput).ToLocalTimestampPtrOutputWithContext(ctx)
}

// LocalTimestampPtrInput is an input type that accepts LocalTimestampArgs, LocalTimestampPtr and LocalTimestampPtrOutput values.
// You can construct a concrete instance of `LocalTimestampPtrInput` via:
//
//          LocalTimestampArgs{...}
//
//  or:
//
//          nil
type LocalTimestampPtrInput interface {
	pulumi.Input

	ToLocalTimestampPtrOutput() LocalTimestampPtrOutput
	ToLocalTimestampPtrOutputWithContext(context.Context) LocalTimestampPtrOutput
}

type localTimestampPtrType LocalTimestampArgs

func LocalTimestampPtr(v *LocalTimestampArgs) LocalTimestampPtrInput {
	return (*localTimestampPtrType)(v)
}

func (*localTimestampPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalTimestamp)(nil)).Elem()
}

func (i *localTimestampPtrType) ToLocalTimestampPtrOutput() LocalTimestampPtrOutput {
	return i.ToLocalTimestampPtrOutputWithContext(context.Background())
}

func (i *localTimestampPtrType) ToLocalTimestampPtrOutputWithContext(ctx context.Context) LocalTimestampPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalTimestampPtrOutput)
}

// An object that represents the offset information for the local timestamp format specified. Should not be specified for LocalTimestampFormat - Embedded.
type LocalTimestampTimeZoneOffset struct {
	// The event property that will be contain the offset information to calculate the local timestamp. When the LocalTimestampFormat is Iana, the property name will contain the name of the column which contains IANA Timezone Name (eg: Americas/Los Angeles). When LocalTimestampFormat is Timespan, it contains the name of property which contains values representing the offset (eg: P1D or 1.00:00:00)
	PropertyName *string `pulumi:"propertyName"`
}

// LocalTimestampTimeZoneOffsetInput is an input type that accepts LocalTimestampTimeZoneOffsetArgs and LocalTimestampTimeZoneOffsetOutput values.
// You can construct a concrete instance of `LocalTimestampTimeZoneOffsetInput` via:
//
//          LocalTimestampTimeZoneOffsetArgs{...}
type LocalTimestampTimeZoneOffsetInput interface {
	pulumi.Input

	ToLocalTimestampTimeZoneOffsetOutput() LocalTimestampTimeZoneOffsetOutput
	ToLocalTimestampTimeZoneOffsetOutputWithContext(context.Context) LocalTimestampTimeZoneOffsetOutput
}

// An object that represents the offset information for the local timestamp format specified. Should not be specified for LocalTimestampFormat - Embedded.
type LocalTimestampTimeZoneOffsetArgs struct {
	// The event property that will be contain the offset information to calculate the local timestamp. When the LocalTimestampFormat is Iana, the property name will contain the name of the column which contains IANA Timezone Name (eg: Americas/Los Angeles). When LocalTimestampFormat is Timespan, it contains the name of property which contains values representing the offset (eg: P1D or 1.00:00:00)
	PropertyName pulumi.StringPtrInput `pulumi:"propertyName"`
}

func (LocalTimestampTimeZoneOffsetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalTimestampTimeZoneOffset)(nil)).Elem()
}

func (i LocalTimestampTimeZoneOffsetArgs) ToLocalTimestampTimeZoneOffsetOutput() LocalTimestampTimeZoneOffsetOutput {
	return i.ToLocalTimestampTimeZoneOffsetOutputWithContext(context.Background())
}

func (i LocalTimestampTimeZoneOffsetArgs) ToLocalTimestampTimeZoneOffsetOutputWithContext(ctx context.Context) LocalTimestampTimeZoneOffsetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalTimestampTimeZoneOffsetOutput)
}

func (i LocalTimestampTimeZoneOffsetArgs) ToLocalTimestampTimeZoneOffsetPtrOutput() LocalTimestampTimeZoneOffsetPtrOutput {
	return i.ToLocalTimestampTimeZoneOffsetPtrOutputWithContext(context.Background())
}

func (i LocalTimestampTimeZoneOffsetArgs) ToLocalTimestampTimeZoneOffsetPtrOutputWithContext(ctx context.Context) LocalTimestampTimeZoneOffsetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalTimestampTimeZoneOffsetOutput).ToLocalTimestampTimeZoneOffsetPtrOutputWithContext(ctx)
}

// LocalTimestampTimeZoneOffsetPtrInput is an input type that accepts LocalTimestampTimeZoneOffsetArgs, LocalTimestampTimeZoneOffsetPtr and LocalTimestampTimeZoneOffsetPtrOutput values.
// You can construct a concrete instance of `LocalTimestampTimeZoneOffsetPtrInput` via:
//
//          LocalTimestampTimeZoneOffsetArgs{...}
//
//  or:
//
//          nil
type LocalTimestampTimeZoneOffsetPtrInput interface {
	pulumi.Input

	ToLocalTimestampTimeZoneOffsetPtrOutput() LocalTimestampTimeZoneOffsetPtrOutput
	ToLocalTimestampTimeZoneOffsetPtrOutputWithContext(context.Context) LocalTimestampTimeZoneOffsetPtrOutput
}

type localTimestampTimeZoneOffsetPtrType LocalTimestampTimeZoneOffsetArgs

func LocalTimestampTimeZoneOffsetPtr(v *LocalTimestampTimeZoneOffsetArgs) LocalTimestampTimeZoneOffsetPtrInput {
	return (*localTimestampTimeZoneOffsetPtrType)(v)
}

func (*localTimestampTimeZoneOffsetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalTimestampTimeZoneOffset)(nil)).Elem()
}

func (i *localTimestampTimeZoneOffsetPtrType) ToLocalTimestampTimeZoneOffsetPtrOutput() LocalTimestampTimeZoneOffsetPtrOutput {
	return i.ToLocalTimestampTimeZoneOffsetPtrOutputWithContext(context.Background())
}

func (i *localTimestampTimeZoneOffsetPtrType) ToLocalTimestampTimeZoneOffsetPtrOutputWithContext(ctx context.Context) LocalTimestampTimeZoneOffsetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalTimestampTimeZoneOffsetPtrOutput)
}

// A key property for the reference data set. A reference data set can have multiple key properties.
type ReferenceDataSetKeyProperty struct {
	// The name of the key property.
	Name *string `pulumi:"name"`
	// The type of the key property.
	Type *string `pulumi:"type"`
}

// ReferenceDataSetKeyPropertyInput is an input type that accepts ReferenceDataSetKeyPropertyArgs and ReferenceDataSetKeyPropertyOutput values.
// You can construct a concrete instance of `ReferenceDataSetKeyPropertyInput` via:
//
//          ReferenceDataSetKeyPropertyArgs{...}
type ReferenceDataSetKeyPropertyInput interface {
	pulumi.Input

	ToReferenceDataSetKeyPropertyOutput() ReferenceDataSetKeyPropertyOutput
	ToReferenceDataSetKeyPropertyOutputWithContext(context.Context) ReferenceDataSetKeyPropertyOutput
}

// A key property for the reference data set. A reference data set can have multiple key properties.
type ReferenceDataSetKeyPropertyArgs struct {
	// The name of the key property.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The type of the key property.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ReferenceDataSetKeyPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceDataSetKeyProperty)(nil)).Elem()
}

func (i ReferenceDataSetKeyPropertyArgs) ToReferenceDataSetKeyPropertyOutput() ReferenceDataSetKeyPropertyOutput {
	return i.ToReferenceDataSetKeyPropertyOutputWithContext(context.Background())
}

func (i ReferenceDataSetKeyPropertyArgs) ToReferenceDataSetKeyPropertyOutputWithContext(ctx context.Context) ReferenceDataSetKeyPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceDataSetKeyPropertyOutput)
}

// ReferenceDataSetKeyPropertyArrayInput is an input type that accepts ReferenceDataSetKeyPropertyArray and ReferenceDataSetKeyPropertyArrayOutput values.
// You can construct a concrete instance of `ReferenceDataSetKeyPropertyArrayInput` via:
//
//          ReferenceDataSetKeyPropertyArray{ ReferenceDataSetKeyPropertyArgs{...} }
type ReferenceDataSetKeyPropertyArrayInput interface {
	pulumi.Input

	ToReferenceDataSetKeyPropertyArrayOutput() ReferenceDataSetKeyPropertyArrayOutput
	ToReferenceDataSetKeyPropertyArrayOutputWithContext(context.Context) ReferenceDataSetKeyPropertyArrayOutput
}

type ReferenceDataSetKeyPropertyArray []ReferenceDataSetKeyPropertyInput

func (ReferenceDataSetKeyPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReferenceDataSetKeyProperty)(nil)).Elem()
}

func (i ReferenceDataSetKeyPropertyArray) ToReferenceDataSetKeyPropertyArrayOutput() ReferenceDataSetKeyPropertyArrayOutput {
	return i.ToReferenceDataSetKeyPropertyArrayOutputWithContext(context.Background())
}

func (i ReferenceDataSetKeyPropertyArray) ToReferenceDataSetKeyPropertyArrayOutputWithContext(ctx context.Context) ReferenceDataSetKeyPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceDataSetKeyPropertyArrayOutput)
}

// A key property for the reference data set. A reference data set can have multiple key properties.
type ReferenceDataSetKeyPropertyResponse struct {
	// The name of the key property.
	Name *string `pulumi:"name"`
	// The type of the key property.
	Type *string `pulumi:"type"`
}

// A key property for the reference data set. A reference data set can have multiple key properties.
type ReferenceDataSetKeyPropertyResponseOutput struct{ *pulumi.OutputState }

func (ReferenceDataSetKeyPropertyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceDataSetKeyPropertyResponse)(nil)).Elem()
}

func (o ReferenceDataSetKeyPropertyResponseOutput) ToReferenceDataSetKeyPropertyResponseOutput() ReferenceDataSetKeyPropertyResponseOutput {
	return o
}

func (o ReferenceDataSetKeyPropertyResponseOutput) ToReferenceDataSetKeyPropertyResponseOutputWithContext(ctx context.Context) ReferenceDataSetKeyPropertyResponseOutput {
	return o
}

// The name of the key property.
func (o ReferenceDataSetKeyPropertyResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceDataSetKeyPropertyResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of the key property.
func (o ReferenceDataSetKeyPropertyResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceDataSetKeyPropertyResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ReferenceDataSetKeyPropertyResponseArrayOutput struct{ *pulumi.OutputState }

func (ReferenceDataSetKeyPropertyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReferenceDataSetKeyPropertyResponse)(nil)).Elem()
}

func (o ReferenceDataSetKeyPropertyResponseArrayOutput) ToReferenceDataSetKeyPropertyResponseArrayOutput() ReferenceDataSetKeyPropertyResponseArrayOutput {
	return o
}

func (o ReferenceDataSetKeyPropertyResponseArrayOutput) ToReferenceDataSetKeyPropertyResponseArrayOutputWithContext(ctx context.Context) ReferenceDataSetKeyPropertyResponseArrayOutput {
	return o
}

func (o ReferenceDataSetKeyPropertyResponseArrayOutput) Index(i pulumi.IntInput) ReferenceDataSetKeyPropertyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReferenceDataSetKeyPropertyResponse {
		return vs[0].([]ReferenceDataSetKeyPropertyResponse)[vs[1].(int)]
	}).(ReferenceDataSetKeyPropertyResponseOutput)
}

// The sku determines the type of environment, either standard (S1 or S2) or long-term (L1). For standard environments the sku determines the capacity of the environment, the ingress rate, and the billing rate.
type Sku struct {
	// The capacity of the sku. For standard environments, this value can be changed to support scale out of environments after they have been created.
	Capacity int `pulumi:"capacity"`
	// The name of this SKU.
	Name string `pulumi:"name"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//          SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// The sku determines the type of environment, either standard (S1 or S2) or long-term (L1). For standard environments the sku determines the capacity of the environment, the ingress rate, and the billing rate.
type SkuArgs struct {
	// The capacity of the sku. For standard environments, this value can be changed to support scale out of environments after they have been created.
	Capacity pulumi.IntInput `pulumi:"capacity"`
	// The name of this SKU.
	Name pulumi.StringInput `pulumi:"name"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//          SkuArgs{...}
//
//  or:
//
//          nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// The sku determines the type of environment, either standard (S1 or S2) or long-term (L1). For standard environments the sku determines the capacity of the environment, the ingress rate, and the billing rate.
type SkuResponse struct {
	// The capacity of the sku. For standard environments, this value can be changed to support scale out of environments after they have been created.
	Capacity int `pulumi:"capacity"`
	// The name of this SKU.
	Name string `pulumi:"name"`
}

// The sku determines the type of environment, either standard (S1 or S2) or long-term (L1). For standard environments the sku determines the capacity of the environment, the ingress rate, and the billing rate.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (o SkuResponseOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o.ApplyT(func(v SkuResponse) *SkuResponse {
		return &v
	}).(SkuResponsePtrOutput)
}

// The capacity of the sku. For standard environments, this value can be changed to support scale out of environments after they have been created.
func (o SkuResponseOutput) Capacity() pulumi.IntOutput {
	return o.ApplyT(func(v SkuResponse) int { return v.Capacity }).(pulumi.IntOutput)
}

// The name of this SKU.
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse { return *v }).(SkuResponseOutput)
}

// The capacity of the sku. For standard environments, this value can be changed to support scale out of environments after they have been created.
func (o SkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The name of this SKU.
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LocalTimestampOutput{})
	pulumi.RegisterOutputType(LocalTimestampPtrOutput{})
	pulumi.RegisterOutputType(LocalTimestampTimeZoneOffsetOutput{})
	pulumi.RegisterOutputType(LocalTimestampTimeZoneOffsetPtrOutput{})
	pulumi.RegisterOutputType(ReferenceDataSetKeyPropertyOutput{})
	pulumi.RegisterOutputType(ReferenceDataSetKeyPropertyArrayOutput{})
	pulumi.RegisterOutputType(ReferenceDataSetKeyPropertyResponseOutput{})
	pulumi.RegisterOutputType(ReferenceDataSetKeyPropertyResponseArrayOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
}
