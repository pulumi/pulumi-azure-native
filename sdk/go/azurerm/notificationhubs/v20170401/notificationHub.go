// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20170401

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Description of a NotificationHub Resource.
type NotificationHub struct {
	pulumi.CustomResourceState

	// Resource location
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties of the NotificationHub.
	Properties NotificationHubPropertiesResponseOutput `pulumi:"properties"`
	// The sku of the created namespace
	Sku SkuResponsePtrOutput `pulumi:"sku"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNotificationHub registers a new resource with the given unique name, arguments, and options.
func NewNotificationHub(ctx *pulumi.Context,
	name string, args *NotificationHubArgs, opts ...pulumi.ResourceOption) (*NotificationHub, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.NamespaceName == nil {
		return nil, errors.New("missing required argument 'NamespaceName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &NotificationHubArgs{}
	}
	var resource NotificationHub
	err := ctx.RegisterResource("azurerm:notificationhubs/v20170401:NotificationHub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotificationHub gets an existing NotificationHub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotificationHub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationHubState, opts ...pulumi.ResourceOption) (*NotificationHub, error) {
	var resource NotificationHub
	err := ctx.ReadResource("azurerm:notificationhubs/v20170401:NotificationHub", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotificationHub resources.
type notificationHubState struct {
	// Resource location
	Location *string `pulumi:"location"`
	// Resource name
	Name *string `pulumi:"name"`
	// Properties of the NotificationHub.
	Properties *NotificationHubPropertiesResponse `pulumi:"properties"`
	// The sku of the created namespace
	Sku *SkuResponse `pulumi:"sku"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type *string `pulumi:"type"`
}

type NotificationHubState struct {
	// Resource location
	Location pulumi.StringPtrInput
	// Resource name
	Name pulumi.StringPtrInput
	// Properties of the NotificationHub.
	Properties NotificationHubPropertiesResponsePtrInput
	// The sku of the created namespace
	Sku SkuResponsePtrInput
	// Resource tags
	Tags pulumi.StringMapInput
	// Resource type
	Type pulumi.StringPtrInput
}

func (NotificationHubState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationHubState)(nil)).Elem()
}

type notificationHubArgs struct {
	// The AdmCredential of the created NotificationHub
	AdmCredential *AdmCredential `pulumi:"admCredential"`
	// The ApnsCredential of the created NotificationHub
	ApnsCredential *ApnsCredential `pulumi:"apnsCredential"`
	// The AuthorizationRules of the created NotificationHub
	AuthorizationRules []SharedAccessAuthorizationRuleProperties `pulumi:"authorizationRules"`
	// The BaiduCredential of the created NotificationHub
	BaiduCredential *BaiduCredential `pulumi:"baiduCredential"`
	// The GcmCredential of the created NotificationHub
	GcmCredential *GcmCredential `pulumi:"gcmCredential"`
	// Resource location
	Location *string `pulumi:"location"`
	// The MpnsCredential of the created NotificationHub
	MpnsCredential *MpnsCredential `pulumi:"mpnsCredential"`
	// The notification hub name.
	Name string `pulumi:"name"`
	// The namespace name.
	NamespaceName string `pulumi:"namespaceName"`
	// The RegistrationTtl of the created NotificationHub
	RegistrationTtl *string `pulumi:"registrationTtl"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The sku of the created namespace
	Sku *Sku `pulumi:"sku"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// The WnsCredential of the created NotificationHub
	WnsCredential *WnsCredential `pulumi:"wnsCredential"`
}

// The set of arguments for constructing a NotificationHub resource.
type NotificationHubArgs struct {
	// The AdmCredential of the created NotificationHub
	AdmCredential AdmCredentialPtrInput
	// The ApnsCredential of the created NotificationHub
	ApnsCredential ApnsCredentialPtrInput
	// The AuthorizationRules of the created NotificationHub
	AuthorizationRules SharedAccessAuthorizationRulePropertiesArrayInput
	// The BaiduCredential of the created NotificationHub
	BaiduCredential BaiduCredentialPtrInput
	// The GcmCredential of the created NotificationHub
	GcmCredential GcmCredentialPtrInput
	// Resource location
	Location pulumi.StringPtrInput
	// The MpnsCredential of the created NotificationHub
	MpnsCredential MpnsCredentialPtrInput
	// The notification hub name.
	Name pulumi.StringInput
	// The namespace name.
	NamespaceName pulumi.StringInput
	// The RegistrationTtl of the created NotificationHub
	RegistrationTtl pulumi.StringPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The sku of the created namespace
	Sku SkuPtrInput
	// Resource tags
	Tags pulumi.StringMapInput
	// The WnsCredential of the created NotificationHub
	WnsCredential WnsCredentialPtrInput
}

func (NotificationHubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationHubArgs)(nil)).Elem()
}
