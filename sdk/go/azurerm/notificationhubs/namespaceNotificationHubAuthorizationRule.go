// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package notificationhubs

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Description of a Namespace AuthorizationRules.
type NamespaceNotificationHubAuthorizationRule struct {
	pulumi.CustomResourceState

	// Resource location
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties of the Namespace AuthorizationRule.
	Properties SharedAccessAuthorizationRulePropertiesResponseOutput `pulumi:"properties"`
	// The sku of the created namespace
	Sku SkuResponsePtrOutput `pulumi:"sku"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNamespaceNotificationHubAuthorizationRule registers a new resource with the given unique name, arguments, and options.
func NewNamespaceNotificationHubAuthorizationRule(ctx *pulumi.Context,
	name string, args *NamespaceNotificationHubAuthorizationRuleArgs, opts ...pulumi.ResourceOption) (*NamespaceNotificationHubAuthorizationRule, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.NamespaceName == nil {
		return nil, errors.New("missing required argument 'NamespaceName'")
	}
	if args == nil || args.NotificationHubName == nil {
		return nil, errors.New("missing required argument 'NotificationHubName'")
	}
	if args == nil || args.Properties == nil {
		return nil, errors.New("missing required argument 'Properties'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &NamespaceNotificationHubAuthorizationRuleArgs{}
	}
	var resource NamespaceNotificationHubAuthorizationRule
	err := ctx.RegisterResource("azurerm:notificationhubs:NamespaceNotificationHubAuthorizationRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespaceNotificationHubAuthorizationRule gets an existing NamespaceNotificationHubAuthorizationRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespaceNotificationHubAuthorizationRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceNotificationHubAuthorizationRuleState, opts ...pulumi.ResourceOption) (*NamespaceNotificationHubAuthorizationRule, error) {
	var resource NamespaceNotificationHubAuthorizationRule
	err := ctx.ReadResource("azurerm:notificationhubs:NamespaceNotificationHubAuthorizationRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NamespaceNotificationHubAuthorizationRule resources.
type namespaceNotificationHubAuthorizationRuleState struct {
	// Resource location
	Location *string `pulumi:"location"`
	// Resource name
	Name *string `pulumi:"name"`
	// Properties of the Namespace AuthorizationRule.
	Properties *SharedAccessAuthorizationRulePropertiesResponse `pulumi:"properties"`
	// The sku of the created namespace
	Sku *SkuResponse `pulumi:"sku"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type *string `pulumi:"type"`
}

type NamespaceNotificationHubAuthorizationRuleState struct {
	// Resource location
	Location pulumi.StringPtrInput
	// Resource name
	Name pulumi.StringPtrInput
	// Properties of the Namespace AuthorizationRule.
	Properties SharedAccessAuthorizationRulePropertiesResponsePtrInput
	// The sku of the created namespace
	Sku SkuResponsePtrInput
	// Resource tags
	Tags pulumi.StringMapInput
	// Resource type
	Type pulumi.StringPtrInput
}

func (NamespaceNotificationHubAuthorizationRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceNotificationHubAuthorizationRuleState)(nil)).Elem()
}

type namespaceNotificationHubAuthorizationRuleArgs struct {
	// Authorization Rule Name.
	Name string `pulumi:"name"`
	// The namespace name.
	NamespaceName string `pulumi:"namespaceName"`
	// The notification hub name.
	NotificationHubName string `pulumi:"notificationHubName"`
	// Properties of the Namespace AuthorizationRules.
	Properties SharedAccessAuthorizationRuleProperties `pulumi:"properties"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a NamespaceNotificationHubAuthorizationRule resource.
type NamespaceNotificationHubAuthorizationRuleArgs struct {
	// Authorization Rule Name.
	Name pulumi.StringInput
	// The namespace name.
	NamespaceName pulumi.StringInput
	// The notification hub name.
	NotificationHubName pulumi.StringInput
	// Properties of the Namespace AuthorizationRules.
	Properties SharedAccessAuthorizationRulePropertiesInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
}

func (NamespaceNotificationHubAuthorizationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceNotificationHubAuthorizationRuleArgs)(nil)).Elem()
}
