// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180901preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// EngagementFabric channel description
type ChannelTypeDescriptionResponse struct {
	// Text description for the channel
	ChannelDescription *string `pulumi:"channelDescription"`
	// All the available functions for the channel
	ChannelFunctions []string `pulumi:"channelFunctions"`
	// Channel type
	ChannelType *string `pulumi:"channelType"`
}

// The description of the EngagementFabric account key
type KeyDescriptionResponse struct {
	// The name of the key
	Name string `pulumi:"name"`
	// The rank of the key
	Rank string `pulumi:"rank"`
	// The value of the key
	Value string `pulumi:"value"`
}

// The EngagementFabric SKU
type SKU struct {
	// The name of the SKU
	Name string `pulumi:"name"`
	// The price tier of the SKU
	Tier *string `pulumi:"tier"`
}

// SKUInput is an input type that accepts SKUArgs and SKUOutput values.
// You can construct a concrete instance of `SKUInput` via:
//
//          SKUArgs{...}
type SKUInput interface {
	pulumi.Input

	ToSKUOutput() SKUOutput
	ToSKUOutputWithContext(context.Context) SKUOutput
}

// The EngagementFabric SKU
type SKUArgs struct {
	// The name of the SKU
	Name pulumi.StringInput `pulumi:"name"`
	// The price tier of the SKU
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (SKUArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SKU)(nil)).Elem()
}

func (i SKUArgs) ToSKUOutput() SKUOutput {
	return i.ToSKUOutputWithContext(context.Background())
}

func (i SKUArgs) ToSKUOutputWithContext(ctx context.Context) SKUOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKUOutput)
}

func (i SKUArgs) ToSKUPtrOutput() SKUPtrOutput {
	return i.ToSKUPtrOutputWithContext(context.Background())
}

func (i SKUArgs) ToSKUPtrOutputWithContext(ctx context.Context) SKUPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKUOutput).ToSKUPtrOutputWithContext(ctx)
}

// SKUPtrInput is an input type that accepts SKUArgs, SKUPtr and SKUPtrOutput values.
// You can construct a concrete instance of `SKUPtrInput` via:
//
//          SKUArgs{...}
//
//  or:
//
//          nil
type SKUPtrInput interface {
	pulumi.Input

	ToSKUPtrOutput() SKUPtrOutput
	ToSKUPtrOutputWithContext(context.Context) SKUPtrOutput
}

type skuPtrType SKUArgs

func SKUPtr(v *SKUArgs) SKUPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SKU)(nil)).Elem()
}

func (i *skuPtrType) ToSKUPtrOutput() SKUPtrOutput {
	return i.ToSKUPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSKUPtrOutputWithContext(ctx context.Context) SKUPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SKUPtrOutput)
}

// The EngagementFabric SKU
type SKUResponse struct {
	// The name of the SKU
	Name string `pulumi:"name"`
	// The price tier of the SKU
	Tier *string `pulumi:"tier"`
}

// The EngagementFabric SKU
type SKUResponseOutput struct{ *pulumi.OutputState }

func (SKUResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SKUResponse)(nil)).Elem()
}

func (o SKUResponseOutput) ToSKUResponseOutput() SKUResponseOutput {
	return o
}

func (o SKUResponseOutput) ToSKUResponseOutputWithContext(ctx context.Context) SKUResponseOutput {
	return o
}

func (o SKUResponseOutput) ToSKUResponsePtrOutput() SKUResponsePtrOutput {
	return o.ToSKUResponsePtrOutputWithContext(context.Background())
}

func (o SKUResponseOutput) ToSKUResponsePtrOutputWithContext(ctx context.Context) SKUResponsePtrOutput {
	return o.ApplyT(func(v SKUResponse) *SKUResponse {
		return &v
	}).(SKUResponsePtrOutput)
}

// The name of the SKU
func (o SKUResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SKUResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The price tier of the SKU
func (o SKUResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SKUResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SKUResponsePtrOutput struct{ *pulumi.OutputState }

func (SKUResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SKUResponse)(nil)).Elem()
}

func (o SKUResponsePtrOutput) ToSKUResponsePtrOutput() SKUResponsePtrOutput {
	return o
}

func (o SKUResponsePtrOutput) ToSKUResponsePtrOutputWithContext(ctx context.Context) SKUResponsePtrOutput {
	return o
}

func (o SKUResponsePtrOutput) Elem() SKUResponseOutput {
	return o.ApplyT(func(v *SKUResponse) SKUResponse { return *v }).(SKUResponseOutput)
}

// The name of the SKU
func (o SKUResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SKUResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The price tier of the SKU
func (o SKUResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SKUResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ChannelTypeDescriptionResponseOutput{})
	pulumi.RegisterOutputType(ChannelTypeDescriptionResponseArrayOutput{})
	pulumi.RegisterOutputType(KeyDescriptionResponseOutput{})
	pulumi.RegisterOutputType(KeyDescriptionResponseArrayOutput{})
	pulumi.RegisterOutputType(SKUOutput{})
	pulumi.RegisterOutputType(SKUPtrOutput{})
	pulumi.RegisterOutputType(SKUResponseOutput{})
	pulumi.RegisterOutputType(SKUResponsePtrOutput{})
}
