// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hdinsight

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The HDInsight cluster application
type ClusterApplication struct {
	pulumi.CustomResourceState

	// The ETag for the application
	Etag pulumi.StringPtrOutput `pulumi:"etag"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The properties of the application.
	Properties ApplicationPropertiesResponseOutput `pulumi:"properties"`
	// The tags for the application.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewClusterApplication registers a new resource with the given unique name, arguments, and options.
func NewClusterApplication(ctx *pulumi.Context,
	name string, args *ClusterApplicationArgs, opts ...pulumi.ResourceOption) (*ClusterApplication, error) {
	if args == nil || args.ClusterName == nil {
		return nil, errors.New("missing required argument 'ClusterName'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &ClusterApplicationArgs{}
	}
	var resource ClusterApplication
	err := ctx.RegisterResource("azurerm:hdinsight:ClusterApplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterApplication gets an existing ClusterApplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterApplicationState, opts ...pulumi.ResourceOption) (*ClusterApplication, error) {
	var resource ClusterApplication
	err := ctx.ReadResource("azurerm:hdinsight:ClusterApplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterApplication resources.
type clusterApplicationState struct {
	// The ETag for the application
	Etag *string `pulumi:"etag"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// The properties of the application.
	Properties *ApplicationPropertiesResponse `pulumi:"properties"`
	// The tags for the application.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource.
	Type *string `pulumi:"type"`
}

type ClusterApplicationState struct {
	// The ETag for the application
	Etag pulumi.StringPtrInput
	// The name of the resource
	Name pulumi.StringPtrInput
	// The properties of the application.
	Properties ApplicationPropertiesResponsePtrInput
	// The tags for the application.
	Tags pulumi.StringMapInput
	// The type of the resource.
	Type pulumi.StringPtrInput
}

func (ClusterApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterApplicationState)(nil)).Elem()
}

type clusterApplicationArgs struct {
	// The name of the cluster.
	ClusterName string `pulumi:"clusterName"`
	// The ETag for the application
	Etag *string `pulumi:"etag"`
	// The constant value for the application name.
	Name string `pulumi:"name"`
	// The properties of the application.
	Properties *ApplicationProperties `pulumi:"properties"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The tags for the application.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ClusterApplication resource.
type ClusterApplicationArgs struct {
	// The name of the cluster.
	ClusterName pulumi.StringInput
	// The ETag for the application
	Etag pulumi.StringPtrInput
	// The constant value for the application name.
	Name pulumi.StringInput
	// The properties of the application.
	Properties ApplicationPropertiesPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The tags for the application.
	Tags pulumi.StringMapInput
}

func (ClusterApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterApplicationArgs)(nil)).Elem()
}
