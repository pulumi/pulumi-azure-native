// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package policyinsights

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The remediation definition.
type Remediation struct {
	pulumi.CustomResourceState

	// The name of the remediation.
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties for the remediation.
	Properties RemediationPropertiesResponseOutput `pulumi:"properties"`
	// The type of the remediation.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewRemediation registers a new resource with the given unique name, arguments, and options.
func NewRemediation(ctx *pulumi.Context,
	name string, args *RemediationArgs, opts ...pulumi.ResourceOption) (*Remediation, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &RemediationArgs{}
	}
	var resource Remediation
	err := ctx.RegisterResource("azurerm:policyinsights:Remediation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRemediation gets an existing Remediation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRemediation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RemediationState, opts ...pulumi.ResourceOption) (*Remediation, error) {
	var resource Remediation
	err := ctx.ReadResource("azurerm:policyinsights:Remediation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Remediation resources.
type remediationState struct {
	// The name of the remediation.
	Name *string `pulumi:"name"`
	// Properties for the remediation.
	Properties *RemediationPropertiesResponse `pulumi:"properties"`
	// The type of the remediation.
	Type *string `pulumi:"type"`
}

type RemediationState struct {
	// The name of the remediation.
	Name pulumi.StringPtrInput
	// Properties for the remediation.
	Properties RemediationPropertiesResponsePtrInput
	// The type of the remediation.
	Type pulumi.StringPtrInput
}

func (RemediationState) ElementType() reflect.Type {
	return reflect.TypeOf((*remediationState)(nil)).Elem()
}

type remediationArgs struct {
	// The name of the remediation.
	Name string `pulumi:"name"`
	// Properties for the remediation.
	Properties *RemediationProperties `pulumi:"properties"`
	// Resource group name.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Remediation resource.
type RemediationArgs struct {
	// The name of the remediation.
	Name pulumi.StringInput
	// Properties for the remediation.
	Properties RemediationPropertiesPtrInput
	// Resource group name.
	ResourceGroupName pulumi.StringInput
}

func (RemediationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*remediationArgs)(nil)).Elem()
}
