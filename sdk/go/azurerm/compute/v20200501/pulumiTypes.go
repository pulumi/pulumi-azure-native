// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200501

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Data used when creating a disk.
type CreationData struct {
	// This enumerates the possible sources of a disk's creation.
	CreateOption string `pulumi:"createOption"`
	// Required if creating from a Gallery Image. The id of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
	GalleryImageReference *ImageDiskReference `pulumi:"galleryImageReference"`
	// Disk source information.
	ImageReference *ImageDiskReference `pulumi:"imageReference"`
	// If createOption is Copy, this is the ARM id of the source snapshot or disk.
	SourceResourceId *string `pulumi:"sourceResourceId"`
	// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
	SourceUri *string `pulumi:"sourceUri"`
	// Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
	StorageAccountId *string `pulumi:"storageAccountId"`
	// If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
	UploadSizeBytes *int `pulumi:"uploadSizeBytes"`
}

// CreationDataInput is an input type that accepts CreationDataArgs and CreationDataOutput values.
// You can construct a concrete instance of `CreationDataInput` via:
//
//          CreationDataArgs{...}
type CreationDataInput interface {
	pulumi.Input

	ToCreationDataOutput() CreationDataOutput
	ToCreationDataOutputWithContext(context.Context) CreationDataOutput
}

// Data used when creating a disk.
type CreationDataArgs struct {
	// This enumerates the possible sources of a disk's creation.
	CreateOption pulumi.StringInput `pulumi:"createOption"`
	// Required if creating from a Gallery Image. The id of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
	GalleryImageReference ImageDiskReferencePtrInput `pulumi:"galleryImageReference"`
	// Disk source information.
	ImageReference ImageDiskReferencePtrInput `pulumi:"imageReference"`
	// If createOption is Copy, this is the ARM id of the source snapshot or disk.
	SourceResourceId pulumi.StringPtrInput `pulumi:"sourceResourceId"`
	// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
	SourceUri pulumi.StringPtrInput `pulumi:"sourceUri"`
	// Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
	StorageAccountId pulumi.StringPtrInput `pulumi:"storageAccountId"`
	// If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
	UploadSizeBytes pulumi.IntPtrInput `pulumi:"uploadSizeBytes"`
}

func (CreationDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CreationData)(nil)).Elem()
}

func (i CreationDataArgs) ToCreationDataOutput() CreationDataOutput {
	return i.ToCreationDataOutputWithContext(context.Background())
}

func (i CreationDataArgs) ToCreationDataOutputWithContext(ctx context.Context) CreationDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreationDataOutput)
}

func (i CreationDataArgs) ToCreationDataPtrOutput() CreationDataPtrOutput {
	return i.ToCreationDataPtrOutputWithContext(context.Background())
}

func (i CreationDataArgs) ToCreationDataPtrOutputWithContext(ctx context.Context) CreationDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreationDataOutput).ToCreationDataPtrOutputWithContext(ctx)
}

// CreationDataPtrInput is an input type that accepts CreationDataArgs, CreationDataPtr and CreationDataPtrOutput values.
// You can construct a concrete instance of `CreationDataPtrInput` via:
//
//          CreationDataArgs{...}
//
//  or:
//
//          nil
type CreationDataPtrInput interface {
	pulumi.Input

	ToCreationDataPtrOutput() CreationDataPtrOutput
	ToCreationDataPtrOutputWithContext(context.Context) CreationDataPtrOutput
}

type creationDataPtrType CreationDataArgs

func CreationDataPtr(v *CreationDataArgs) CreationDataPtrInput {
	return (*creationDataPtrType)(v)
}

func (*creationDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CreationData)(nil)).Elem()
}

func (i *creationDataPtrType) ToCreationDataPtrOutput() CreationDataPtrOutput {
	return i.ToCreationDataPtrOutputWithContext(context.Background())
}

func (i *creationDataPtrType) ToCreationDataPtrOutputWithContext(ctx context.Context) CreationDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreationDataPtrOutput)
}

// Data used when creating a disk.
type CreationDataOutput struct{ *pulumi.OutputState }

func (CreationDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreationData)(nil)).Elem()
}

func (o CreationDataOutput) ToCreationDataOutput() CreationDataOutput {
	return o
}

func (o CreationDataOutput) ToCreationDataOutputWithContext(ctx context.Context) CreationDataOutput {
	return o
}

func (o CreationDataOutput) ToCreationDataPtrOutput() CreationDataPtrOutput {
	return o.ToCreationDataPtrOutputWithContext(context.Background())
}

func (o CreationDataOutput) ToCreationDataPtrOutputWithContext(ctx context.Context) CreationDataPtrOutput {
	return o.ApplyT(func(v CreationData) *CreationData {
		return &v
	}).(CreationDataPtrOutput)
}

// This enumerates the possible sources of a disk's creation.
func (o CreationDataOutput) CreateOption() pulumi.StringOutput {
	return o.ApplyT(func(v CreationData) string { return v.CreateOption }).(pulumi.StringOutput)
}

// Required if creating from a Gallery Image. The id of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
func (o CreationDataOutput) GalleryImageReference() ImageDiskReferencePtrOutput {
	return o.ApplyT(func(v CreationData) *ImageDiskReference { return v.GalleryImageReference }).(ImageDiskReferencePtrOutput)
}

// Disk source information.
func (o CreationDataOutput) ImageReference() ImageDiskReferencePtrOutput {
	return o.ApplyT(func(v CreationData) *ImageDiskReference { return v.ImageReference }).(ImageDiskReferencePtrOutput)
}

// If createOption is Copy, this is the ARM id of the source snapshot or disk.
func (o CreationDataOutput) SourceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationData) *string { return v.SourceResourceId }).(pulumi.StringPtrOutput)
}

// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
func (o CreationDataOutput) SourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationData) *string { return v.SourceUri }).(pulumi.StringPtrOutput)
}

// Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
func (o CreationDataOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationData) *string { return v.StorageAccountId }).(pulumi.StringPtrOutput)
}

// If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
func (o CreationDataOutput) UploadSizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CreationData) *int { return v.UploadSizeBytes }).(pulumi.IntPtrOutput)
}

type CreationDataPtrOutput struct{ *pulumi.OutputState }

func (CreationDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CreationData)(nil)).Elem()
}

func (o CreationDataPtrOutput) ToCreationDataPtrOutput() CreationDataPtrOutput {
	return o
}

func (o CreationDataPtrOutput) ToCreationDataPtrOutputWithContext(ctx context.Context) CreationDataPtrOutput {
	return o
}

func (o CreationDataPtrOutput) Elem() CreationDataOutput {
	return o.ApplyT(func(v *CreationData) CreationData { return *v }).(CreationDataOutput)
}

// This enumerates the possible sources of a disk's creation.
func (o CreationDataPtrOutput) CreateOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationData) *string {
		if v == nil {
			return nil
		}
		return &v.CreateOption
	}).(pulumi.StringPtrOutput)
}

// Required if creating from a Gallery Image. The id of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
func (o CreationDataPtrOutput) GalleryImageReference() ImageDiskReferencePtrOutput {
	return o.ApplyT(func(v *CreationData) *ImageDiskReference {
		if v == nil {
			return nil
		}
		return v.GalleryImageReference
	}).(ImageDiskReferencePtrOutput)
}

// Disk source information.
func (o CreationDataPtrOutput) ImageReference() ImageDiskReferencePtrOutput {
	return o.ApplyT(func(v *CreationData) *ImageDiskReference {
		if v == nil {
			return nil
		}
		return v.ImageReference
	}).(ImageDiskReferencePtrOutput)
}

// If createOption is Copy, this is the ARM id of the source snapshot or disk.
func (o CreationDataPtrOutput) SourceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationData) *string {
		if v == nil {
			return nil
		}
		return v.SourceResourceId
	}).(pulumi.StringPtrOutput)
}

// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
func (o CreationDataPtrOutput) SourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationData) *string {
		if v == nil {
			return nil
		}
		return v.SourceUri
	}).(pulumi.StringPtrOutput)
}

// Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
func (o CreationDataPtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationData) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

// If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
func (o CreationDataPtrOutput) UploadSizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CreationData) *int {
		if v == nil {
			return nil
		}
		return v.UploadSizeBytes
	}).(pulumi.IntPtrOutput)
}

// Data used when creating a disk.
type CreationDataResponse struct {
	// This enumerates the possible sources of a disk's creation.
	CreateOption string `pulumi:"createOption"`
	// Required if creating from a Gallery Image. The id of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
	GalleryImageReference *ImageDiskReferenceResponse `pulumi:"galleryImageReference"`
	// Disk source information.
	ImageReference *ImageDiskReferenceResponse `pulumi:"imageReference"`
	// If createOption is Copy, this is the ARM id of the source snapshot or disk.
	SourceResourceId *string `pulumi:"sourceResourceId"`
	// If this field is set, this is the unique id identifying the source of this resource.
	SourceUniqueId string `pulumi:"sourceUniqueId"`
	// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
	SourceUri *string `pulumi:"sourceUri"`
	// Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
	StorageAccountId *string `pulumi:"storageAccountId"`
	// If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
	UploadSizeBytes *int `pulumi:"uploadSizeBytes"`
}

// CreationDataResponseInput is an input type that accepts CreationDataResponseArgs and CreationDataResponseOutput values.
// You can construct a concrete instance of `CreationDataResponseInput` via:
//
//          CreationDataResponseArgs{...}
type CreationDataResponseInput interface {
	pulumi.Input

	ToCreationDataResponseOutput() CreationDataResponseOutput
	ToCreationDataResponseOutputWithContext(context.Context) CreationDataResponseOutput
}

// Data used when creating a disk.
type CreationDataResponseArgs struct {
	// This enumerates the possible sources of a disk's creation.
	CreateOption pulumi.StringInput `pulumi:"createOption"`
	// Required if creating from a Gallery Image. The id of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
	GalleryImageReference ImageDiskReferenceResponsePtrInput `pulumi:"galleryImageReference"`
	// Disk source information.
	ImageReference ImageDiskReferenceResponsePtrInput `pulumi:"imageReference"`
	// If createOption is Copy, this is the ARM id of the source snapshot or disk.
	SourceResourceId pulumi.StringPtrInput `pulumi:"sourceResourceId"`
	// If this field is set, this is the unique id identifying the source of this resource.
	SourceUniqueId pulumi.StringInput `pulumi:"sourceUniqueId"`
	// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
	SourceUri pulumi.StringPtrInput `pulumi:"sourceUri"`
	// Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
	StorageAccountId pulumi.StringPtrInput `pulumi:"storageAccountId"`
	// If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
	UploadSizeBytes pulumi.IntPtrInput `pulumi:"uploadSizeBytes"`
}

func (CreationDataResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CreationDataResponse)(nil)).Elem()
}

func (i CreationDataResponseArgs) ToCreationDataResponseOutput() CreationDataResponseOutput {
	return i.ToCreationDataResponseOutputWithContext(context.Background())
}

func (i CreationDataResponseArgs) ToCreationDataResponseOutputWithContext(ctx context.Context) CreationDataResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreationDataResponseOutput)
}

func (i CreationDataResponseArgs) ToCreationDataResponsePtrOutput() CreationDataResponsePtrOutput {
	return i.ToCreationDataResponsePtrOutputWithContext(context.Background())
}

func (i CreationDataResponseArgs) ToCreationDataResponsePtrOutputWithContext(ctx context.Context) CreationDataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreationDataResponseOutput).ToCreationDataResponsePtrOutputWithContext(ctx)
}

// CreationDataResponsePtrInput is an input type that accepts CreationDataResponseArgs, CreationDataResponsePtr and CreationDataResponsePtrOutput values.
// You can construct a concrete instance of `CreationDataResponsePtrInput` via:
//
//          CreationDataResponseArgs{...}
//
//  or:
//
//          nil
type CreationDataResponsePtrInput interface {
	pulumi.Input

	ToCreationDataResponsePtrOutput() CreationDataResponsePtrOutput
	ToCreationDataResponsePtrOutputWithContext(context.Context) CreationDataResponsePtrOutput
}

type creationDataResponsePtrType CreationDataResponseArgs

func CreationDataResponsePtr(v *CreationDataResponseArgs) CreationDataResponsePtrInput {
	return (*creationDataResponsePtrType)(v)
}

func (*creationDataResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CreationDataResponse)(nil)).Elem()
}

func (i *creationDataResponsePtrType) ToCreationDataResponsePtrOutput() CreationDataResponsePtrOutput {
	return i.ToCreationDataResponsePtrOutputWithContext(context.Background())
}

func (i *creationDataResponsePtrType) ToCreationDataResponsePtrOutputWithContext(ctx context.Context) CreationDataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreationDataResponsePtrOutput)
}

// Data used when creating a disk.
type CreationDataResponseOutput struct{ *pulumi.OutputState }

func (CreationDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreationDataResponse)(nil)).Elem()
}

func (o CreationDataResponseOutput) ToCreationDataResponseOutput() CreationDataResponseOutput {
	return o
}

func (o CreationDataResponseOutput) ToCreationDataResponseOutputWithContext(ctx context.Context) CreationDataResponseOutput {
	return o
}

func (o CreationDataResponseOutput) ToCreationDataResponsePtrOutput() CreationDataResponsePtrOutput {
	return o.ToCreationDataResponsePtrOutputWithContext(context.Background())
}

func (o CreationDataResponseOutput) ToCreationDataResponsePtrOutputWithContext(ctx context.Context) CreationDataResponsePtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *CreationDataResponse {
		return &v
	}).(CreationDataResponsePtrOutput)
}

// This enumerates the possible sources of a disk's creation.
func (o CreationDataResponseOutput) CreateOption() pulumi.StringOutput {
	return o.ApplyT(func(v CreationDataResponse) string { return v.CreateOption }).(pulumi.StringOutput)
}

// Required if creating from a Gallery Image. The id of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
func (o CreationDataResponseOutput) GalleryImageReference() ImageDiskReferenceResponsePtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *ImageDiskReferenceResponse { return v.GalleryImageReference }).(ImageDiskReferenceResponsePtrOutput)
}

// Disk source information.
func (o CreationDataResponseOutput) ImageReference() ImageDiskReferenceResponsePtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *ImageDiskReferenceResponse { return v.ImageReference }).(ImageDiskReferenceResponsePtrOutput)
}

// If createOption is Copy, this is the ARM id of the source snapshot or disk.
func (o CreationDataResponseOutput) SourceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *string { return v.SourceResourceId }).(pulumi.StringPtrOutput)
}

// If this field is set, this is the unique id identifying the source of this resource.
func (o CreationDataResponseOutput) SourceUniqueId() pulumi.StringOutput {
	return o.ApplyT(func(v CreationDataResponse) string { return v.SourceUniqueId }).(pulumi.StringOutput)
}

// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
func (o CreationDataResponseOutput) SourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *string { return v.SourceUri }).(pulumi.StringPtrOutput)
}

// Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
func (o CreationDataResponseOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *string { return v.StorageAccountId }).(pulumi.StringPtrOutput)
}

// If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
func (o CreationDataResponseOutput) UploadSizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *int { return v.UploadSizeBytes }).(pulumi.IntPtrOutput)
}

type CreationDataResponsePtrOutput struct{ *pulumi.OutputState }

func (CreationDataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CreationDataResponse)(nil)).Elem()
}

func (o CreationDataResponsePtrOutput) ToCreationDataResponsePtrOutput() CreationDataResponsePtrOutput {
	return o
}

func (o CreationDataResponsePtrOutput) ToCreationDataResponsePtrOutputWithContext(ctx context.Context) CreationDataResponsePtrOutput {
	return o
}

func (o CreationDataResponsePtrOutput) Elem() CreationDataResponseOutput {
	return o.ApplyT(func(v *CreationDataResponse) CreationDataResponse { return *v }).(CreationDataResponseOutput)
}

// This enumerates the possible sources of a disk's creation.
func (o CreationDataResponsePtrOutput) CreateOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationDataResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreateOption
	}).(pulumi.StringPtrOutput)
}

// Required if creating from a Gallery Image. The id of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
func (o CreationDataResponsePtrOutput) GalleryImageReference() ImageDiskReferenceResponsePtrOutput {
	return o.ApplyT(func(v *CreationDataResponse) *ImageDiskReferenceResponse {
		if v == nil {
			return nil
		}
		return v.GalleryImageReference
	}).(ImageDiskReferenceResponsePtrOutput)
}

// Disk source information.
func (o CreationDataResponsePtrOutput) ImageReference() ImageDiskReferenceResponsePtrOutput {
	return o.ApplyT(func(v *CreationDataResponse) *ImageDiskReferenceResponse {
		if v == nil {
			return nil
		}
		return v.ImageReference
	}).(ImageDiskReferenceResponsePtrOutput)
}

// If createOption is Copy, this is the ARM id of the source snapshot or disk.
func (o CreationDataResponsePtrOutput) SourceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.SourceResourceId
	}).(pulumi.StringPtrOutput)
}

// If this field is set, this is the unique id identifying the source of this resource.
func (o CreationDataResponsePtrOutput) SourceUniqueId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationDataResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SourceUniqueId
	}).(pulumi.StringPtrOutput)
}

// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
func (o CreationDataResponsePtrOutput) SourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.SourceUri
	}).(pulumi.StringPtrOutput)
}

// Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
func (o CreationDataResponsePtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

// If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
func (o CreationDataResponsePtrOutput) UploadSizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CreationDataResponse) *int {
		if v == nil {
			return nil
		}
		return v.UploadSizeBytes
	}).(pulumi.IntPtrOutput)
}

// Disk resource.
type DiskType struct {
	// Resource location
	Location string `pulumi:"location"`
	// A relative URI containing the ID of the VM that has the disk attached.
	ManagedBy string `pulumi:"managedBy"`
	// List of relative URIs containing the IDs of the VMs that have the disk attached. maxShares should be set to a value greater than one for disks to allow attaching them to multiple VMs.
	ManagedByExtended []string `pulumi:"managedByExtended"`
	// Resource name
	Name string `pulumi:"name"`
	// Disk resource properties.
	Properties DiskPropertiesResponse `pulumi:"properties"`
	// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
	Sku *DiskSkuResponse `pulumi:"sku"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type string `pulumi:"type"`
	// The Logical zone list for Disk.
	Zones []string `pulumi:"zones"`
}

// DiskTypeInput is an input type that accepts DiskTypeArgs and DiskTypeOutput values.
// You can construct a concrete instance of `DiskTypeInput` via:
//
//          DiskTypeArgs{...}
type DiskTypeInput interface {
	pulumi.Input

	ToDiskTypeOutput() DiskTypeOutput
	ToDiskTypeOutputWithContext(context.Context) DiskTypeOutput
}

// Disk resource.
type DiskTypeArgs struct {
	// Resource location
	Location pulumi.StringInput `pulumi:"location"`
	// A relative URI containing the ID of the VM that has the disk attached.
	ManagedBy pulumi.StringInput `pulumi:"managedBy"`
	// List of relative URIs containing the IDs of the VMs that have the disk attached. maxShares should be set to a value greater than one for disks to allow attaching them to multiple VMs.
	ManagedByExtended pulumi.StringArrayInput `pulumi:"managedByExtended"`
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// Disk resource properties.
	Properties DiskPropertiesResponseInput `pulumi:"properties"`
	// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
	Sku DiskSkuResponsePtrInput `pulumi:"sku"`
	// Resource tags
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
	// The Logical zone list for Disk.
	Zones pulumi.StringArrayInput `pulumi:"zones"`
}

func (DiskTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskType)(nil)).Elem()
}

func (i DiskTypeArgs) ToDiskTypeOutput() DiskTypeOutput {
	return i.ToDiskTypeOutputWithContext(context.Background())
}

func (i DiskTypeArgs) ToDiskTypeOutputWithContext(ctx context.Context) DiskTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskTypeOutput)
}

// Disk resource.
type DiskTypeOutput struct{ *pulumi.OutputState }

func (DiskTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskType)(nil)).Elem()
}

func (o DiskTypeOutput) ToDiskTypeOutput() DiskTypeOutput {
	return o
}

func (o DiskTypeOutput) ToDiskTypeOutputWithContext(ctx context.Context) DiskTypeOutput {
	return o
}

// Resource location
func (o DiskTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v DiskType) string { return v.Location }).(pulumi.StringOutput)
}

// A relative URI containing the ID of the VM that has the disk attached.
func (o DiskTypeOutput) ManagedBy() pulumi.StringOutput {
	return o.ApplyT(func(v DiskType) string { return v.ManagedBy }).(pulumi.StringOutput)
}

// List of relative URIs containing the IDs of the VMs that have the disk attached. maxShares should be set to a value greater than one for disks to allow attaching them to multiple VMs.
func (o DiskTypeOutput) ManagedByExtended() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DiskType) []string { return v.ManagedByExtended }).(pulumi.StringArrayOutput)
}

// Resource name
func (o DiskTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DiskType) string { return v.Name }).(pulumi.StringOutput)
}

// Disk resource properties.
func (o DiskTypeOutput) Properties() DiskPropertiesResponseOutput {
	return o.ApplyT(func(v DiskType) DiskPropertiesResponse { return v.Properties }).(DiskPropertiesResponseOutput)
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
func (o DiskTypeOutput) Sku() DiskSkuResponsePtrOutput {
	return o.ApplyT(func(v DiskType) *DiskSkuResponse { return v.Sku }).(DiskSkuResponsePtrOutput)
}

// Resource tags
func (o DiskTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v DiskType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o DiskTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DiskType) string { return v.Type }).(pulumi.StringOutput)
}

// The Logical zone list for Disk.
func (o DiskTypeOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DiskType) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

// disk access resource.
type DiskAccessType struct {
	// Resource location
	Location string `pulumi:"location"`
	// Resource name
	Name       string                       `pulumi:"name"`
	Properties DiskAccessPropertiesResponse `pulumi:"properties"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type string `pulumi:"type"`
}

// DiskAccessTypeInput is an input type that accepts DiskAccessTypeArgs and DiskAccessTypeOutput values.
// You can construct a concrete instance of `DiskAccessTypeInput` via:
//
//          DiskAccessTypeArgs{...}
type DiskAccessTypeInput interface {
	pulumi.Input

	ToDiskAccessTypeOutput() DiskAccessTypeOutput
	ToDiskAccessTypeOutputWithContext(context.Context) DiskAccessTypeOutput
}

// disk access resource.
type DiskAccessTypeArgs struct {
	// Resource location
	Location pulumi.StringInput `pulumi:"location"`
	// Resource name
	Name       pulumi.StringInput                `pulumi:"name"`
	Properties DiskAccessPropertiesResponseInput `pulumi:"properties"`
	// Resource tags
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (DiskAccessTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskAccessType)(nil)).Elem()
}

func (i DiskAccessTypeArgs) ToDiskAccessTypeOutput() DiskAccessTypeOutput {
	return i.ToDiskAccessTypeOutputWithContext(context.Background())
}

func (i DiskAccessTypeArgs) ToDiskAccessTypeOutputWithContext(ctx context.Context) DiskAccessTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskAccessTypeOutput)
}

// disk access resource.
type DiskAccessTypeOutput struct{ *pulumi.OutputState }

func (DiskAccessTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskAccessType)(nil)).Elem()
}

func (o DiskAccessTypeOutput) ToDiskAccessTypeOutput() DiskAccessTypeOutput {
	return o
}

func (o DiskAccessTypeOutput) ToDiskAccessTypeOutputWithContext(ctx context.Context) DiskAccessTypeOutput {
	return o
}

// Resource location
func (o DiskAccessTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v DiskAccessType) string { return v.Location }).(pulumi.StringOutput)
}

// Resource name
func (o DiskAccessTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DiskAccessType) string { return v.Name }).(pulumi.StringOutput)
}

func (o DiskAccessTypeOutput) Properties() DiskAccessPropertiesResponseOutput {
	return o.ApplyT(func(v DiskAccessType) DiskAccessPropertiesResponse { return v.Properties }).(DiskAccessPropertiesResponseOutput)
}

// Resource tags
func (o DiskAccessTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v DiskAccessType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o DiskAccessTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DiskAccessType) string { return v.Type }).(pulumi.StringOutput)
}

type DiskAccessPropertiesResponse struct {
	// A readonly collection of private endpoint connections created on the disk. Currently only one endpoint connection is supported.
	PrivateEndpointConnections []PrivateEndpointConnectionResponse `pulumi:"privateEndpointConnections"`
	// The disk access resource provisioning state.
	ProvisioningState string `pulumi:"provisioningState"`
	// The time when the disk access was created.
	TimeCreated string `pulumi:"timeCreated"`
}

// DiskAccessPropertiesResponseInput is an input type that accepts DiskAccessPropertiesResponseArgs and DiskAccessPropertiesResponseOutput values.
// You can construct a concrete instance of `DiskAccessPropertiesResponseInput` via:
//
//          DiskAccessPropertiesResponseArgs{...}
type DiskAccessPropertiesResponseInput interface {
	pulumi.Input

	ToDiskAccessPropertiesResponseOutput() DiskAccessPropertiesResponseOutput
	ToDiskAccessPropertiesResponseOutputWithContext(context.Context) DiskAccessPropertiesResponseOutput
}

type DiskAccessPropertiesResponseArgs struct {
	// A readonly collection of private endpoint connections created on the disk. Currently only one endpoint connection is supported.
	PrivateEndpointConnections PrivateEndpointConnectionResponseArrayInput `pulumi:"privateEndpointConnections"`
	// The disk access resource provisioning state.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// The time when the disk access was created.
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
}

func (DiskAccessPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskAccessPropertiesResponse)(nil)).Elem()
}

func (i DiskAccessPropertiesResponseArgs) ToDiskAccessPropertiesResponseOutput() DiskAccessPropertiesResponseOutput {
	return i.ToDiskAccessPropertiesResponseOutputWithContext(context.Background())
}

func (i DiskAccessPropertiesResponseArgs) ToDiskAccessPropertiesResponseOutputWithContext(ctx context.Context) DiskAccessPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskAccessPropertiesResponseOutput)
}

func (i DiskAccessPropertiesResponseArgs) ToDiskAccessPropertiesResponsePtrOutput() DiskAccessPropertiesResponsePtrOutput {
	return i.ToDiskAccessPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i DiskAccessPropertiesResponseArgs) ToDiskAccessPropertiesResponsePtrOutputWithContext(ctx context.Context) DiskAccessPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskAccessPropertiesResponseOutput).ToDiskAccessPropertiesResponsePtrOutputWithContext(ctx)
}

// DiskAccessPropertiesResponsePtrInput is an input type that accepts DiskAccessPropertiesResponseArgs, DiskAccessPropertiesResponsePtr and DiskAccessPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `DiskAccessPropertiesResponsePtrInput` via:
//
//          DiskAccessPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type DiskAccessPropertiesResponsePtrInput interface {
	pulumi.Input

	ToDiskAccessPropertiesResponsePtrOutput() DiskAccessPropertiesResponsePtrOutput
	ToDiskAccessPropertiesResponsePtrOutputWithContext(context.Context) DiskAccessPropertiesResponsePtrOutput
}

type diskAccessPropertiesResponsePtrType DiskAccessPropertiesResponseArgs

func DiskAccessPropertiesResponsePtr(v *DiskAccessPropertiesResponseArgs) DiskAccessPropertiesResponsePtrInput {
	return (*diskAccessPropertiesResponsePtrType)(v)
}

func (*diskAccessPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskAccessPropertiesResponse)(nil)).Elem()
}

func (i *diskAccessPropertiesResponsePtrType) ToDiskAccessPropertiesResponsePtrOutput() DiskAccessPropertiesResponsePtrOutput {
	return i.ToDiskAccessPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *diskAccessPropertiesResponsePtrType) ToDiskAccessPropertiesResponsePtrOutputWithContext(ctx context.Context) DiskAccessPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskAccessPropertiesResponsePtrOutput)
}

type DiskAccessPropertiesResponseOutput struct{ *pulumi.OutputState }

func (DiskAccessPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskAccessPropertiesResponse)(nil)).Elem()
}

func (o DiskAccessPropertiesResponseOutput) ToDiskAccessPropertiesResponseOutput() DiskAccessPropertiesResponseOutput {
	return o
}

func (o DiskAccessPropertiesResponseOutput) ToDiskAccessPropertiesResponseOutputWithContext(ctx context.Context) DiskAccessPropertiesResponseOutput {
	return o
}

func (o DiskAccessPropertiesResponseOutput) ToDiskAccessPropertiesResponsePtrOutput() DiskAccessPropertiesResponsePtrOutput {
	return o.ToDiskAccessPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o DiskAccessPropertiesResponseOutput) ToDiskAccessPropertiesResponsePtrOutputWithContext(ctx context.Context) DiskAccessPropertiesResponsePtrOutput {
	return o.ApplyT(func(v DiskAccessPropertiesResponse) *DiskAccessPropertiesResponse {
		return &v
	}).(DiskAccessPropertiesResponsePtrOutput)
}

// A readonly collection of private endpoint connections created on the disk. Currently only one endpoint connection is supported.
func (o DiskAccessPropertiesResponseOutput) PrivateEndpointConnections() PrivateEndpointConnectionResponseArrayOutput {
	return o.ApplyT(func(v DiskAccessPropertiesResponse) []PrivateEndpointConnectionResponse {
		return v.PrivateEndpointConnections
	}).(PrivateEndpointConnectionResponseArrayOutput)
}

// The disk access resource provisioning state.
func (o DiskAccessPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v DiskAccessPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The time when the disk access was created.
func (o DiskAccessPropertiesResponseOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v DiskAccessPropertiesResponse) string { return v.TimeCreated }).(pulumi.StringOutput)
}

type DiskAccessPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskAccessPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskAccessPropertiesResponse)(nil)).Elem()
}

func (o DiskAccessPropertiesResponsePtrOutput) ToDiskAccessPropertiesResponsePtrOutput() DiskAccessPropertiesResponsePtrOutput {
	return o
}

func (o DiskAccessPropertiesResponsePtrOutput) ToDiskAccessPropertiesResponsePtrOutputWithContext(ctx context.Context) DiskAccessPropertiesResponsePtrOutput {
	return o
}

func (o DiskAccessPropertiesResponsePtrOutput) Elem() DiskAccessPropertiesResponseOutput {
	return o.ApplyT(func(v *DiskAccessPropertiesResponse) DiskAccessPropertiesResponse { return *v }).(DiskAccessPropertiesResponseOutput)
}

// A readonly collection of private endpoint connections created on the disk. Currently only one endpoint connection is supported.
func (o DiskAccessPropertiesResponsePtrOutput) PrivateEndpointConnections() PrivateEndpointConnectionResponseArrayOutput {
	return o.ApplyT(func(v *DiskAccessPropertiesResponse) []PrivateEndpointConnectionResponse {
		if v == nil {
			return nil
		}
		return v.PrivateEndpointConnections
	}).(PrivateEndpointConnectionResponseArrayOutput)
}

// The disk access resource provisioning state.
func (o DiskAccessPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskAccessPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The time when the disk access was created.
func (o DiskAccessPropertiesResponsePtrOutput) TimeCreated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskAccessPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TimeCreated
	}).(pulumi.StringPtrOutput)
}

// disk encryption set resource.
type DiskEncryptionSetType struct {
	// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
	Identity *EncryptionSetIdentityResponse `pulumi:"identity"`
	// Resource location
	Location string `pulumi:"location"`
	// Resource name
	Name       string                          `pulumi:"name"`
	Properties EncryptionSetPropertiesResponse `pulumi:"properties"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type string `pulumi:"type"`
}

// DiskEncryptionSetTypeInput is an input type that accepts DiskEncryptionSetTypeArgs and DiskEncryptionSetTypeOutput values.
// You can construct a concrete instance of `DiskEncryptionSetTypeInput` via:
//
//          DiskEncryptionSetTypeArgs{...}
type DiskEncryptionSetTypeInput interface {
	pulumi.Input

	ToDiskEncryptionSetTypeOutput() DiskEncryptionSetTypeOutput
	ToDiskEncryptionSetTypeOutputWithContext(context.Context) DiskEncryptionSetTypeOutput
}

// disk encryption set resource.
type DiskEncryptionSetTypeArgs struct {
	// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
	Identity EncryptionSetIdentityResponsePtrInput `pulumi:"identity"`
	// Resource location
	Location pulumi.StringInput `pulumi:"location"`
	// Resource name
	Name       pulumi.StringInput                   `pulumi:"name"`
	Properties EncryptionSetPropertiesResponseInput `pulumi:"properties"`
	// Resource tags
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (DiskEncryptionSetTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionSetType)(nil)).Elem()
}

func (i DiskEncryptionSetTypeArgs) ToDiskEncryptionSetTypeOutput() DiskEncryptionSetTypeOutput {
	return i.ToDiskEncryptionSetTypeOutputWithContext(context.Background())
}

func (i DiskEncryptionSetTypeArgs) ToDiskEncryptionSetTypeOutputWithContext(ctx context.Context) DiskEncryptionSetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionSetTypeOutput)
}

// disk encryption set resource.
type DiskEncryptionSetTypeOutput struct{ *pulumi.OutputState }

func (DiskEncryptionSetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionSetType)(nil)).Elem()
}

func (o DiskEncryptionSetTypeOutput) ToDiskEncryptionSetTypeOutput() DiskEncryptionSetTypeOutput {
	return o
}

func (o DiskEncryptionSetTypeOutput) ToDiskEncryptionSetTypeOutputWithContext(ctx context.Context) DiskEncryptionSetTypeOutput {
	return o
}

// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
func (o DiskEncryptionSetTypeOutput) Identity() EncryptionSetIdentityResponsePtrOutput {
	return o.ApplyT(func(v DiskEncryptionSetType) *EncryptionSetIdentityResponse { return v.Identity }).(EncryptionSetIdentityResponsePtrOutput)
}

// Resource location
func (o DiskEncryptionSetTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v DiskEncryptionSetType) string { return v.Location }).(pulumi.StringOutput)
}

// Resource name
func (o DiskEncryptionSetTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DiskEncryptionSetType) string { return v.Name }).(pulumi.StringOutput)
}

func (o DiskEncryptionSetTypeOutput) Properties() EncryptionSetPropertiesResponseOutput {
	return o.ApplyT(func(v DiskEncryptionSetType) EncryptionSetPropertiesResponse { return v.Properties }).(EncryptionSetPropertiesResponseOutput)
}

// Resource tags
func (o DiskEncryptionSetTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v DiskEncryptionSetType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o DiskEncryptionSetTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DiskEncryptionSetType) string { return v.Type }).(pulumi.StringOutput)
}

// Disk resource properties.
type DiskPropertiesResponse struct {
	// Disk source information. CreationData information cannot be changed after the disk has been created.
	CreationData CreationDataResponse `pulumi:"creationData"`
	// ARM id of the DiskAccess resource for using private endpoints on disks.
	DiskAccessId *string `pulumi:"diskAccessId"`
	// The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes.
	DiskIOPSReadOnly *int `pulumi:"diskIOPSReadOnly"`
	// The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.
	DiskIOPSReadWrite *int `pulumi:"diskIOPSReadWrite"`
	// The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
	DiskMBpsReadOnly *int `pulumi:"diskMBpsReadOnly"`
	// The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
	DiskMBpsReadWrite *int `pulumi:"diskMBpsReadWrite"`
	// The size of the disk in bytes. This field is read only.
	DiskSizeBytes int `pulumi:"diskSizeBytes"`
	// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// The state of the disk.
	DiskState string `pulumi:"diskState"`
	// Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
	Encryption *EncryptionResponse `pulumi:"encryption"`
	// Encryption settings collection used for Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
	EncryptionSettingsCollection *EncryptionSettingsCollectionResponse `pulumi:"encryptionSettingsCollection"`
	// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
	HyperVGeneration *string `pulumi:"hyperVGeneration"`
	// The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
	MaxShares *int `pulumi:"maxShares"`
	// Policy for accessing the disk via network.
	NetworkAccessPolicy *string `pulumi:"networkAccessPolicy"`
	// The Operating System type.
	OsType *string `pulumi:"osType"`
	// The disk provisioning state.
	ProvisioningState string `pulumi:"provisioningState"`
	// Details of the list of all VMs that have the disk attached. maxShares should be set to a value greater than one for disks to allow attaching them to multiple VMs.
	ShareInfo []ShareInfoElementResponse `pulumi:"shareInfo"`
	// The time when the disk was created.
	TimeCreated string `pulumi:"timeCreated"`
	// Unique Guid identifying the resource.
	UniqueId string `pulumi:"uniqueId"`
}

// DiskPropertiesResponseInput is an input type that accepts DiskPropertiesResponseArgs and DiskPropertiesResponseOutput values.
// You can construct a concrete instance of `DiskPropertiesResponseInput` via:
//
//          DiskPropertiesResponseArgs{...}
type DiskPropertiesResponseInput interface {
	pulumi.Input

	ToDiskPropertiesResponseOutput() DiskPropertiesResponseOutput
	ToDiskPropertiesResponseOutputWithContext(context.Context) DiskPropertiesResponseOutput
}

// Disk resource properties.
type DiskPropertiesResponseArgs struct {
	// Disk source information. CreationData information cannot be changed after the disk has been created.
	CreationData CreationDataResponseInput `pulumi:"creationData"`
	// ARM id of the DiskAccess resource for using private endpoints on disks.
	DiskAccessId pulumi.StringPtrInput `pulumi:"diskAccessId"`
	// The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes.
	DiskIOPSReadOnly pulumi.IntPtrInput `pulumi:"diskIOPSReadOnly"`
	// The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.
	DiskIOPSReadWrite pulumi.IntPtrInput `pulumi:"diskIOPSReadWrite"`
	// The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
	DiskMBpsReadOnly pulumi.IntPtrInput `pulumi:"diskMBpsReadOnly"`
	// The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
	DiskMBpsReadWrite pulumi.IntPtrInput `pulumi:"diskMBpsReadWrite"`
	// The size of the disk in bytes. This field is read only.
	DiskSizeBytes pulumi.IntInput `pulumi:"diskSizeBytes"`
	// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
	DiskSizeGB pulumi.IntPtrInput `pulumi:"diskSizeGB"`
	// The state of the disk.
	DiskState pulumi.StringInput `pulumi:"diskState"`
	// Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
	Encryption EncryptionResponsePtrInput `pulumi:"encryption"`
	// Encryption settings collection used for Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
	EncryptionSettingsCollection EncryptionSettingsCollectionResponsePtrInput `pulumi:"encryptionSettingsCollection"`
	// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
	HyperVGeneration pulumi.StringPtrInput `pulumi:"hyperVGeneration"`
	// The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
	MaxShares pulumi.IntPtrInput `pulumi:"maxShares"`
	// Policy for accessing the disk via network.
	NetworkAccessPolicy pulumi.StringPtrInput `pulumi:"networkAccessPolicy"`
	// The Operating System type.
	OsType pulumi.StringPtrInput `pulumi:"osType"`
	// The disk provisioning state.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// Details of the list of all VMs that have the disk attached. maxShares should be set to a value greater than one for disks to allow attaching them to multiple VMs.
	ShareInfo ShareInfoElementResponseArrayInput `pulumi:"shareInfo"`
	// The time when the disk was created.
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
	// Unique Guid identifying the resource.
	UniqueId pulumi.StringInput `pulumi:"uniqueId"`
}

func (DiskPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskPropertiesResponse)(nil)).Elem()
}

func (i DiskPropertiesResponseArgs) ToDiskPropertiesResponseOutput() DiskPropertiesResponseOutput {
	return i.ToDiskPropertiesResponseOutputWithContext(context.Background())
}

func (i DiskPropertiesResponseArgs) ToDiskPropertiesResponseOutputWithContext(ctx context.Context) DiskPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskPropertiesResponseOutput)
}

func (i DiskPropertiesResponseArgs) ToDiskPropertiesResponsePtrOutput() DiskPropertiesResponsePtrOutput {
	return i.ToDiskPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i DiskPropertiesResponseArgs) ToDiskPropertiesResponsePtrOutputWithContext(ctx context.Context) DiskPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskPropertiesResponseOutput).ToDiskPropertiesResponsePtrOutputWithContext(ctx)
}

// DiskPropertiesResponsePtrInput is an input type that accepts DiskPropertiesResponseArgs, DiskPropertiesResponsePtr and DiskPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `DiskPropertiesResponsePtrInput` via:
//
//          DiskPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type DiskPropertiesResponsePtrInput interface {
	pulumi.Input

	ToDiskPropertiesResponsePtrOutput() DiskPropertiesResponsePtrOutput
	ToDiskPropertiesResponsePtrOutputWithContext(context.Context) DiskPropertiesResponsePtrOutput
}

type diskPropertiesResponsePtrType DiskPropertiesResponseArgs

func DiskPropertiesResponsePtr(v *DiskPropertiesResponseArgs) DiskPropertiesResponsePtrInput {
	return (*diskPropertiesResponsePtrType)(v)
}

func (*diskPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskPropertiesResponse)(nil)).Elem()
}

func (i *diskPropertiesResponsePtrType) ToDiskPropertiesResponsePtrOutput() DiskPropertiesResponsePtrOutput {
	return i.ToDiskPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *diskPropertiesResponsePtrType) ToDiskPropertiesResponsePtrOutputWithContext(ctx context.Context) DiskPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskPropertiesResponsePtrOutput)
}

// Disk resource properties.
type DiskPropertiesResponseOutput struct{ *pulumi.OutputState }

func (DiskPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskPropertiesResponse)(nil)).Elem()
}

func (o DiskPropertiesResponseOutput) ToDiskPropertiesResponseOutput() DiskPropertiesResponseOutput {
	return o
}

func (o DiskPropertiesResponseOutput) ToDiskPropertiesResponseOutputWithContext(ctx context.Context) DiskPropertiesResponseOutput {
	return o
}

func (o DiskPropertiesResponseOutput) ToDiskPropertiesResponsePtrOutput() DiskPropertiesResponsePtrOutput {
	return o.ToDiskPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o DiskPropertiesResponseOutput) ToDiskPropertiesResponsePtrOutputWithContext(ctx context.Context) DiskPropertiesResponsePtrOutput {
	return o.ApplyT(func(v DiskPropertiesResponse) *DiskPropertiesResponse {
		return &v
	}).(DiskPropertiesResponsePtrOutput)
}

// Disk source information. CreationData information cannot be changed after the disk has been created.
func (o DiskPropertiesResponseOutput) CreationData() CreationDataResponseOutput {
	return o.ApplyT(func(v DiskPropertiesResponse) CreationDataResponse { return v.CreationData }).(CreationDataResponseOutput)
}

// ARM id of the DiskAccess resource for using private endpoints on disks.
func (o DiskPropertiesResponseOutput) DiskAccessId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskPropertiesResponse) *string { return v.DiskAccessId }).(pulumi.StringPtrOutput)
}

// The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes.
func (o DiskPropertiesResponseOutput) DiskIOPSReadOnly() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DiskPropertiesResponse) *int { return v.DiskIOPSReadOnly }).(pulumi.IntPtrOutput)
}

// The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.
func (o DiskPropertiesResponseOutput) DiskIOPSReadWrite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DiskPropertiesResponse) *int { return v.DiskIOPSReadWrite }).(pulumi.IntPtrOutput)
}

// The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
func (o DiskPropertiesResponseOutput) DiskMBpsReadOnly() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DiskPropertiesResponse) *int { return v.DiskMBpsReadOnly }).(pulumi.IntPtrOutput)
}

// The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
func (o DiskPropertiesResponseOutput) DiskMBpsReadWrite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DiskPropertiesResponse) *int { return v.DiskMBpsReadWrite }).(pulumi.IntPtrOutput)
}

// The size of the disk in bytes. This field is read only.
func (o DiskPropertiesResponseOutput) DiskSizeBytes() pulumi.IntOutput {
	return o.ApplyT(func(v DiskPropertiesResponse) int { return v.DiskSizeBytes }).(pulumi.IntOutput)
}

// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
func (o DiskPropertiesResponseOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DiskPropertiesResponse) *int { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

// The state of the disk.
func (o DiskPropertiesResponseOutput) DiskState() pulumi.StringOutput {
	return o.ApplyT(func(v DiskPropertiesResponse) string { return v.DiskState }).(pulumi.StringOutput)
}

// Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
func (o DiskPropertiesResponseOutput) Encryption() EncryptionResponsePtrOutput {
	return o.ApplyT(func(v DiskPropertiesResponse) *EncryptionResponse { return v.Encryption }).(EncryptionResponsePtrOutput)
}

// Encryption settings collection used for Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
func (o DiskPropertiesResponseOutput) EncryptionSettingsCollection() EncryptionSettingsCollectionResponsePtrOutput {
	return o.ApplyT(func(v DiskPropertiesResponse) *EncryptionSettingsCollectionResponse {
		return v.EncryptionSettingsCollection
	}).(EncryptionSettingsCollectionResponsePtrOutput)
}

// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
func (o DiskPropertiesResponseOutput) HyperVGeneration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskPropertiesResponse) *string { return v.HyperVGeneration }).(pulumi.StringPtrOutput)
}

// The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
func (o DiskPropertiesResponseOutput) MaxShares() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DiskPropertiesResponse) *int { return v.MaxShares }).(pulumi.IntPtrOutput)
}

// Policy for accessing the disk via network.
func (o DiskPropertiesResponseOutput) NetworkAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskPropertiesResponse) *string { return v.NetworkAccessPolicy }).(pulumi.StringPtrOutput)
}

// The Operating System type.
func (o DiskPropertiesResponseOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskPropertiesResponse) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// The disk provisioning state.
func (o DiskPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v DiskPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Details of the list of all VMs that have the disk attached. maxShares should be set to a value greater than one for disks to allow attaching them to multiple VMs.
func (o DiskPropertiesResponseOutput) ShareInfo() ShareInfoElementResponseArrayOutput {
	return o.ApplyT(func(v DiskPropertiesResponse) []ShareInfoElementResponse { return v.ShareInfo }).(ShareInfoElementResponseArrayOutput)
}

// The time when the disk was created.
func (o DiskPropertiesResponseOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v DiskPropertiesResponse) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// Unique Guid identifying the resource.
func (o DiskPropertiesResponseOutput) UniqueId() pulumi.StringOutput {
	return o.ApplyT(func(v DiskPropertiesResponse) string { return v.UniqueId }).(pulumi.StringOutput)
}

type DiskPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskPropertiesResponse)(nil)).Elem()
}

func (o DiskPropertiesResponsePtrOutput) ToDiskPropertiesResponsePtrOutput() DiskPropertiesResponsePtrOutput {
	return o
}

func (o DiskPropertiesResponsePtrOutput) ToDiskPropertiesResponsePtrOutputWithContext(ctx context.Context) DiskPropertiesResponsePtrOutput {
	return o
}

func (o DiskPropertiesResponsePtrOutput) Elem() DiskPropertiesResponseOutput {
	return o.ApplyT(func(v *DiskPropertiesResponse) DiskPropertiesResponse { return *v }).(DiskPropertiesResponseOutput)
}

// Disk source information. CreationData information cannot be changed after the disk has been created.
func (o DiskPropertiesResponsePtrOutput) CreationData() CreationDataResponsePtrOutput {
	return o.ApplyT(func(v *DiskPropertiesResponse) *CreationDataResponse {
		if v == nil {
			return nil
		}
		return &v.CreationData
	}).(CreationDataResponsePtrOutput)
}

// ARM id of the DiskAccess resource for using private endpoints on disks.
func (o DiskPropertiesResponsePtrOutput) DiskAccessId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DiskAccessId
	}).(pulumi.StringPtrOutput)
}

// The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes.
func (o DiskPropertiesResponsePtrOutput) DiskIOPSReadOnly() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DiskPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.DiskIOPSReadOnly
	}).(pulumi.IntPtrOutput)
}

// The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.
func (o DiskPropertiesResponsePtrOutput) DiskIOPSReadWrite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DiskPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.DiskIOPSReadWrite
	}).(pulumi.IntPtrOutput)
}

// The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
func (o DiskPropertiesResponsePtrOutput) DiskMBpsReadOnly() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DiskPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.DiskMBpsReadOnly
	}).(pulumi.IntPtrOutput)
}

// The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
func (o DiskPropertiesResponsePtrOutput) DiskMBpsReadWrite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DiskPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.DiskMBpsReadWrite
	}).(pulumi.IntPtrOutput)
}

// The size of the disk in bytes. This field is read only.
func (o DiskPropertiesResponsePtrOutput) DiskSizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DiskPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.DiskSizeBytes
	}).(pulumi.IntPtrOutput)
}

// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
func (o DiskPropertiesResponsePtrOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DiskPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.DiskSizeGB
	}).(pulumi.IntPtrOutput)
}

// The state of the disk.
func (o DiskPropertiesResponsePtrOutput) DiskState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DiskState
	}).(pulumi.StringPtrOutput)
}

// Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
func (o DiskPropertiesResponsePtrOutput) Encryption() EncryptionResponsePtrOutput {
	return o.ApplyT(func(v *DiskPropertiesResponse) *EncryptionResponse {
		if v == nil {
			return nil
		}
		return v.Encryption
	}).(EncryptionResponsePtrOutput)
}

// Encryption settings collection used for Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
func (o DiskPropertiesResponsePtrOutput) EncryptionSettingsCollection() EncryptionSettingsCollectionResponsePtrOutput {
	return o.ApplyT(func(v *DiskPropertiesResponse) *EncryptionSettingsCollectionResponse {
		if v == nil {
			return nil
		}
		return v.EncryptionSettingsCollection
	}).(EncryptionSettingsCollectionResponsePtrOutput)
}

// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
func (o DiskPropertiesResponsePtrOutput) HyperVGeneration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.HyperVGeneration
	}).(pulumi.StringPtrOutput)
}

// The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
func (o DiskPropertiesResponsePtrOutput) MaxShares() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DiskPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxShares
	}).(pulumi.IntPtrOutput)
}

// Policy for accessing the disk via network.
func (o DiskPropertiesResponsePtrOutput) NetworkAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.NetworkAccessPolicy
	}).(pulumi.StringPtrOutput)
}

// The Operating System type.
func (o DiskPropertiesResponsePtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.OsType
	}).(pulumi.StringPtrOutput)
}

// The disk provisioning state.
func (o DiskPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Details of the list of all VMs that have the disk attached. maxShares should be set to a value greater than one for disks to allow attaching them to multiple VMs.
func (o DiskPropertiesResponsePtrOutput) ShareInfo() ShareInfoElementResponseArrayOutput {
	return o.ApplyT(func(v *DiskPropertiesResponse) []ShareInfoElementResponse {
		if v == nil {
			return nil
		}
		return v.ShareInfo
	}).(ShareInfoElementResponseArrayOutput)
}

// The time when the disk was created.
func (o DiskPropertiesResponsePtrOutput) TimeCreated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TimeCreated
	}).(pulumi.StringPtrOutput)
}

// Unique Guid identifying the resource.
func (o DiskPropertiesResponsePtrOutput) UniqueId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UniqueId
	}).(pulumi.StringPtrOutput)
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
type DiskSku struct {
	// The sku name.
	Name *string `pulumi:"name"`
}

// DiskSkuInput is an input type that accepts DiskSkuArgs and DiskSkuOutput values.
// You can construct a concrete instance of `DiskSkuInput` via:
//
//          DiskSkuArgs{...}
type DiskSkuInput interface {
	pulumi.Input

	ToDiskSkuOutput() DiskSkuOutput
	ToDiskSkuOutputWithContext(context.Context) DiskSkuOutput
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
type DiskSkuArgs struct {
	// The sku name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DiskSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSku)(nil)).Elem()
}

func (i DiskSkuArgs) ToDiskSkuOutput() DiskSkuOutput {
	return i.ToDiskSkuOutputWithContext(context.Background())
}

func (i DiskSkuArgs) ToDiskSkuOutputWithContext(ctx context.Context) DiskSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSkuOutput)
}

func (i DiskSkuArgs) ToDiskSkuPtrOutput() DiskSkuPtrOutput {
	return i.ToDiskSkuPtrOutputWithContext(context.Background())
}

func (i DiskSkuArgs) ToDiskSkuPtrOutputWithContext(ctx context.Context) DiskSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSkuOutput).ToDiskSkuPtrOutputWithContext(ctx)
}

// DiskSkuPtrInput is an input type that accepts DiskSkuArgs, DiskSkuPtr and DiskSkuPtrOutput values.
// You can construct a concrete instance of `DiskSkuPtrInput` via:
//
//          DiskSkuArgs{...}
//
//  or:
//
//          nil
type DiskSkuPtrInput interface {
	pulumi.Input

	ToDiskSkuPtrOutput() DiskSkuPtrOutput
	ToDiskSkuPtrOutputWithContext(context.Context) DiskSkuPtrOutput
}

type diskSkuPtrType DiskSkuArgs

func DiskSkuPtr(v *DiskSkuArgs) DiskSkuPtrInput {
	return (*diskSkuPtrType)(v)
}

func (*diskSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSku)(nil)).Elem()
}

func (i *diskSkuPtrType) ToDiskSkuPtrOutput() DiskSkuPtrOutput {
	return i.ToDiskSkuPtrOutputWithContext(context.Background())
}

func (i *diskSkuPtrType) ToDiskSkuPtrOutputWithContext(ctx context.Context) DiskSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSkuPtrOutput)
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
type DiskSkuOutput struct{ *pulumi.OutputState }

func (DiskSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSku)(nil)).Elem()
}

func (o DiskSkuOutput) ToDiskSkuOutput() DiskSkuOutput {
	return o
}

func (o DiskSkuOutput) ToDiskSkuOutputWithContext(ctx context.Context) DiskSkuOutput {
	return o
}

func (o DiskSkuOutput) ToDiskSkuPtrOutput() DiskSkuPtrOutput {
	return o.ToDiskSkuPtrOutputWithContext(context.Background())
}

func (o DiskSkuOutput) ToDiskSkuPtrOutputWithContext(ctx context.Context) DiskSkuPtrOutput {
	return o.ApplyT(func(v DiskSku) *DiskSku {
		return &v
	}).(DiskSkuPtrOutput)
}

// The sku name.
func (o DiskSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DiskSkuPtrOutput struct{ *pulumi.OutputState }

func (DiskSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSku)(nil)).Elem()
}

func (o DiskSkuPtrOutput) ToDiskSkuPtrOutput() DiskSkuPtrOutput {
	return o
}

func (o DiskSkuPtrOutput) ToDiskSkuPtrOutputWithContext(ctx context.Context) DiskSkuPtrOutput {
	return o
}

func (o DiskSkuPtrOutput) Elem() DiskSkuOutput {
	return o.ApplyT(func(v *DiskSku) DiskSku { return *v }).(DiskSkuOutput)
}

// The sku name.
func (o DiskSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
type DiskSkuResponse struct {
	// The sku name.
	Name *string `pulumi:"name"`
	// The sku tier.
	Tier string `pulumi:"tier"`
}

// DiskSkuResponseInput is an input type that accepts DiskSkuResponseArgs and DiskSkuResponseOutput values.
// You can construct a concrete instance of `DiskSkuResponseInput` via:
//
//          DiskSkuResponseArgs{...}
type DiskSkuResponseInput interface {
	pulumi.Input

	ToDiskSkuResponseOutput() DiskSkuResponseOutput
	ToDiskSkuResponseOutputWithContext(context.Context) DiskSkuResponseOutput
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
type DiskSkuResponseArgs struct {
	// The sku name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The sku tier.
	Tier pulumi.StringInput `pulumi:"tier"`
}

func (DiskSkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSkuResponse)(nil)).Elem()
}

func (i DiskSkuResponseArgs) ToDiskSkuResponseOutput() DiskSkuResponseOutput {
	return i.ToDiskSkuResponseOutputWithContext(context.Background())
}

func (i DiskSkuResponseArgs) ToDiskSkuResponseOutputWithContext(ctx context.Context) DiskSkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSkuResponseOutput)
}

func (i DiskSkuResponseArgs) ToDiskSkuResponsePtrOutput() DiskSkuResponsePtrOutput {
	return i.ToDiskSkuResponsePtrOutputWithContext(context.Background())
}

func (i DiskSkuResponseArgs) ToDiskSkuResponsePtrOutputWithContext(ctx context.Context) DiskSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSkuResponseOutput).ToDiskSkuResponsePtrOutputWithContext(ctx)
}

// DiskSkuResponsePtrInput is an input type that accepts DiskSkuResponseArgs, DiskSkuResponsePtr and DiskSkuResponsePtrOutput values.
// You can construct a concrete instance of `DiskSkuResponsePtrInput` via:
//
//          DiskSkuResponseArgs{...}
//
//  or:
//
//          nil
type DiskSkuResponsePtrInput interface {
	pulumi.Input

	ToDiskSkuResponsePtrOutput() DiskSkuResponsePtrOutput
	ToDiskSkuResponsePtrOutputWithContext(context.Context) DiskSkuResponsePtrOutput
}

type diskSkuResponsePtrType DiskSkuResponseArgs

func DiskSkuResponsePtr(v *DiskSkuResponseArgs) DiskSkuResponsePtrInput {
	return (*diskSkuResponsePtrType)(v)
}

func (*diskSkuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSkuResponse)(nil)).Elem()
}

func (i *diskSkuResponsePtrType) ToDiskSkuResponsePtrOutput() DiskSkuResponsePtrOutput {
	return i.ToDiskSkuResponsePtrOutputWithContext(context.Background())
}

func (i *diskSkuResponsePtrType) ToDiskSkuResponsePtrOutputWithContext(ctx context.Context) DiskSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSkuResponsePtrOutput)
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
type DiskSkuResponseOutput struct{ *pulumi.OutputState }

func (DiskSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSkuResponse)(nil)).Elem()
}

func (o DiskSkuResponseOutput) ToDiskSkuResponseOutput() DiskSkuResponseOutput {
	return o
}

func (o DiskSkuResponseOutput) ToDiskSkuResponseOutputWithContext(ctx context.Context) DiskSkuResponseOutput {
	return o
}

func (o DiskSkuResponseOutput) ToDiskSkuResponsePtrOutput() DiskSkuResponsePtrOutput {
	return o.ToDiskSkuResponsePtrOutputWithContext(context.Background())
}

func (o DiskSkuResponseOutput) ToDiskSkuResponsePtrOutputWithContext(ctx context.Context) DiskSkuResponsePtrOutput {
	return o.ApplyT(func(v DiskSkuResponse) *DiskSkuResponse {
		return &v
	}).(DiskSkuResponsePtrOutput)
}

// The sku name.
func (o DiskSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The sku tier.
func (o DiskSkuResponseOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v DiskSkuResponse) string { return v.Tier }).(pulumi.StringOutput)
}

type DiskSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSkuResponse)(nil)).Elem()
}

func (o DiskSkuResponsePtrOutput) ToDiskSkuResponsePtrOutput() DiskSkuResponsePtrOutput {
	return o
}

func (o DiskSkuResponsePtrOutput) ToDiskSkuResponsePtrOutputWithContext(ctx context.Context) DiskSkuResponsePtrOutput {
	return o
}

func (o DiskSkuResponsePtrOutput) Elem() DiskSkuResponseOutput {
	return o.ApplyT(func(v *DiskSkuResponse) DiskSkuResponse { return *v }).(DiskSkuResponseOutput)
}

// The sku name.
func (o DiskSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The sku tier.
func (o DiskSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Tier
	}).(pulumi.StringPtrOutput)
}

// Encryption at rest settings for disk or snapshot
type Encryption struct {
	// ResourceId of the disk encryption set to use for enabling encryption at rest.
	DiskEncryptionSetId *string `pulumi:"diskEncryptionSetId"`
	// The type of key used to encrypt the data of the disk.
	Type *string `pulumi:"type"`
}

// EncryptionInput is an input type that accepts EncryptionArgs and EncryptionOutput values.
// You can construct a concrete instance of `EncryptionInput` via:
//
//          EncryptionArgs{...}
type EncryptionInput interface {
	pulumi.Input

	ToEncryptionOutput() EncryptionOutput
	ToEncryptionOutputWithContext(context.Context) EncryptionOutput
}

// Encryption at rest settings for disk or snapshot
type EncryptionArgs struct {
	// ResourceId of the disk encryption set to use for enabling encryption at rest.
	DiskEncryptionSetId pulumi.StringPtrInput `pulumi:"diskEncryptionSetId"`
	// The type of key used to encrypt the data of the disk.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Encryption)(nil)).Elem()
}

func (i EncryptionArgs) ToEncryptionOutput() EncryptionOutput {
	return i.ToEncryptionOutputWithContext(context.Background())
}

func (i EncryptionArgs) ToEncryptionOutputWithContext(ctx context.Context) EncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionOutput)
}

func (i EncryptionArgs) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return i.ToEncryptionPtrOutputWithContext(context.Background())
}

func (i EncryptionArgs) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionOutput).ToEncryptionPtrOutputWithContext(ctx)
}

// EncryptionPtrInput is an input type that accepts EncryptionArgs, EncryptionPtr and EncryptionPtrOutput values.
// You can construct a concrete instance of `EncryptionPtrInput` via:
//
//          EncryptionArgs{...}
//
//  or:
//
//          nil
type EncryptionPtrInput interface {
	pulumi.Input

	ToEncryptionPtrOutput() EncryptionPtrOutput
	ToEncryptionPtrOutputWithContext(context.Context) EncryptionPtrOutput
}

type encryptionPtrType EncryptionArgs

func EncryptionPtr(v *EncryptionArgs) EncryptionPtrInput {
	return (*encryptionPtrType)(v)
}

func (*encryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Encryption)(nil)).Elem()
}

func (i *encryptionPtrType) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return i.ToEncryptionPtrOutputWithContext(context.Background())
}

func (i *encryptionPtrType) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPtrOutput)
}

// Encryption at rest settings for disk or snapshot
type EncryptionOutput struct{ *pulumi.OutputState }

func (EncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Encryption)(nil)).Elem()
}

func (o EncryptionOutput) ToEncryptionOutput() EncryptionOutput {
	return o
}

func (o EncryptionOutput) ToEncryptionOutputWithContext(ctx context.Context) EncryptionOutput {
	return o
}

func (o EncryptionOutput) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return o.ToEncryptionPtrOutputWithContext(context.Background())
}

func (o EncryptionOutput) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return o.ApplyT(func(v Encryption) *Encryption {
		return &v
	}).(EncryptionPtrOutput)
}

// ResourceId of the disk encryption set to use for enabling encryption at rest.
func (o EncryptionOutput) DiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Encryption) *string { return v.DiskEncryptionSetId }).(pulumi.StringPtrOutput)
}

// The type of key used to encrypt the data of the disk.
func (o EncryptionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Encryption) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EncryptionPtrOutput struct{ *pulumi.OutputState }

func (EncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Encryption)(nil)).Elem()
}

func (o EncryptionPtrOutput) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return o
}

func (o EncryptionPtrOutput) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return o
}

func (o EncryptionPtrOutput) Elem() EncryptionOutput {
	return o.ApplyT(func(v *Encryption) Encryption { return *v }).(EncryptionOutput)
}

// ResourceId of the disk encryption set to use for enabling encryption at rest.
func (o EncryptionPtrOutput) DiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Encryption) *string {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionSetId
	}).(pulumi.StringPtrOutput)
}

// The type of key used to encrypt the data of the disk.
func (o EncryptionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Encryption) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Encryption at rest settings for disk or snapshot
type EncryptionResponse struct {
	// ResourceId of the disk encryption set to use for enabling encryption at rest.
	DiskEncryptionSetId *string `pulumi:"diskEncryptionSetId"`
	// The type of key used to encrypt the data of the disk.
	Type *string `pulumi:"type"`
}

// EncryptionResponseInput is an input type that accepts EncryptionResponseArgs and EncryptionResponseOutput values.
// You can construct a concrete instance of `EncryptionResponseInput` via:
//
//          EncryptionResponseArgs{...}
type EncryptionResponseInput interface {
	pulumi.Input

	ToEncryptionResponseOutput() EncryptionResponseOutput
	ToEncryptionResponseOutputWithContext(context.Context) EncryptionResponseOutput
}

// Encryption at rest settings for disk or snapshot
type EncryptionResponseArgs struct {
	// ResourceId of the disk encryption set to use for enabling encryption at rest.
	DiskEncryptionSetId pulumi.StringPtrInput `pulumi:"diskEncryptionSetId"`
	// The type of key used to encrypt the data of the disk.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EncryptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionResponse)(nil)).Elem()
}

func (i EncryptionResponseArgs) ToEncryptionResponseOutput() EncryptionResponseOutput {
	return i.ToEncryptionResponseOutputWithContext(context.Background())
}

func (i EncryptionResponseArgs) ToEncryptionResponseOutputWithContext(ctx context.Context) EncryptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionResponseOutput)
}

func (i EncryptionResponseArgs) ToEncryptionResponsePtrOutput() EncryptionResponsePtrOutput {
	return i.ToEncryptionResponsePtrOutputWithContext(context.Background())
}

func (i EncryptionResponseArgs) ToEncryptionResponsePtrOutputWithContext(ctx context.Context) EncryptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionResponseOutput).ToEncryptionResponsePtrOutputWithContext(ctx)
}

// EncryptionResponsePtrInput is an input type that accepts EncryptionResponseArgs, EncryptionResponsePtr and EncryptionResponsePtrOutput values.
// You can construct a concrete instance of `EncryptionResponsePtrInput` via:
//
//          EncryptionResponseArgs{...}
//
//  or:
//
//          nil
type EncryptionResponsePtrInput interface {
	pulumi.Input

	ToEncryptionResponsePtrOutput() EncryptionResponsePtrOutput
	ToEncryptionResponsePtrOutputWithContext(context.Context) EncryptionResponsePtrOutput
}

type encryptionResponsePtrType EncryptionResponseArgs

func EncryptionResponsePtr(v *EncryptionResponseArgs) EncryptionResponsePtrInput {
	return (*encryptionResponsePtrType)(v)
}

func (*encryptionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionResponse)(nil)).Elem()
}

func (i *encryptionResponsePtrType) ToEncryptionResponsePtrOutput() EncryptionResponsePtrOutput {
	return i.ToEncryptionResponsePtrOutputWithContext(context.Background())
}

func (i *encryptionResponsePtrType) ToEncryptionResponsePtrOutputWithContext(ctx context.Context) EncryptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionResponsePtrOutput)
}

// Encryption at rest settings for disk or snapshot
type EncryptionResponseOutput struct{ *pulumi.OutputState }

func (EncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionResponse)(nil)).Elem()
}

func (o EncryptionResponseOutput) ToEncryptionResponseOutput() EncryptionResponseOutput {
	return o
}

func (o EncryptionResponseOutput) ToEncryptionResponseOutputWithContext(ctx context.Context) EncryptionResponseOutput {
	return o
}

func (o EncryptionResponseOutput) ToEncryptionResponsePtrOutput() EncryptionResponsePtrOutput {
	return o.ToEncryptionResponsePtrOutputWithContext(context.Background())
}

func (o EncryptionResponseOutput) ToEncryptionResponsePtrOutputWithContext(ctx context.Context) EncryptionResponsePtrOutput {
	return o.ApplyT(func(v EncryptionResponse) *EncryptionResponse {
		return &v
	}).(EncryptionResponsePtrOutput)
}

// ResourceId of the disk encryption set to use for enabling encryption at rest.
func (o EncryptionResponseOutput) DiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionResponse) *string { return v.DiskEncryptionSetId }).(pulumi.StringPtrOutput)
}

// The type of key used to encrypt the data of the disk.
func (o EncryptionResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EncryptionResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionResponse)(nil)).Elem()
}

func (o EncryptionResponsePtrOutput) ToEncryptionResponsePtrOutput() EncryptionResponsePtrOutput {
	return o
}

func (o EncryptionResponsePtrOutput) ToEncryptionResponsePtrOutputWithContext(ctx context.Context) EncryptionResponsePtrOutput {
	return o
}

func (o EncryptionResponsePtrOutput) Elem() EncryptionResponseOutput {
	return o.ApplyT(func(v *EncryptionResponse) EncryptionResponse { return *v }).(EncryptionResponseOutput)
}

// ResourceId of the disk encryption set to use for enabling encryption at rest.
func (o EncryptionResponsePtrOutput) DiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionSetId
	}).(pulumi.StringPtrOutput)
}

// The type of key used to encrypt the data of the disk.
func (o EncryptionResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
type EncryptionSetIdentity struct {
	// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported.
	Type *string `pulumi:"type"`
}

// EncryptionSetIdentityInput is an input type that accepts EncryptionSetIdentityArgs and EncryptionSetIdentityOutput values.
// You can construct a concrete instance of `EncryptionSetIdentityInput` via:
//
//          EncryptionSetIdentityArgs{...}
type EncryptionSetIdentityInput interface {
	pulumi.Input

	ToEncryptionSetIdentityOutput() EncryptionSetIdentityOutput
	ToEncryptionSetIdentityOutputWithContext(context.Context) EncryptionSetIdentityOutput
}

// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
type EncryptionSetIdentityArgs struct {
	// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EncryptionSetIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSetIdentity)(nil)).Elem()
}

func (i EncryptionSetIdentityArgs) ToEncryptionSetIdentityOutput() EncryptionSetIdentityOutput {
	return i.ToEncryptionSetIdentityOutputWithContext(context.Background())
}

func (i EncryptionSetIdentityArgs) ToEncryptionSetIdentityOutputWithContext(ctx context.Context) EncryptionSetIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSetIdentityOutput)
}

func (i EncryptionSetIdentityArgs) ToEncryptionSetIdentityPtrOutput() EncryptionSetIdentityPtrOutput {
	return i.ToEncryptionSetIdentityPtrOutputWithContext(context.Background())
}

func (i EncryptionSetIdentityArgs) ToEncryptionSetIdentityPtrOutputWithContext(ctx context.Context) EncryptionSetIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSetIdentityOutput).ToEncryptionSetIdentityPtrOutputWithContext(ctx)
}

// EncryptionSetIdentityPtrInput is an input type that accepts EncryptionSetIdentityArgs, EncryptionSetIdentityPtr and EncryptionSetIdentityPtrOutput values.
// You can construct a concrete instance of `EncryptionSetIdentityPtrInput` via:
//
//          EncryptionSetIdentityArgs{...}
//
//  or:
//
//          nil
type EncryptionSetIdentityPtrInput interface {
	pulumi.Input

	ToEncryptionSetIdentityPtrOutput() EncryptionSetIdentityPtrOutput
	ToEncryptionSetIdentityPtrOutputWithContext(context.Context) EncryptionSetIdentityPtrOutput
}

type encryptionSetIdentityPtrType EncryptionSetIdentityArgs

func EncryptionSetIdentityPtr(v *EncryptionSetIdentityArgs) EncryptionSetIdentityPtrInput {
	return (*encryptionSetIdentityPtrType)(v)
}

func (*encryptionSetIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSetIdentity)(nil)).Elem()
}

func (i *encryptionSetIdentityPtrType) ToEncryptionSetIdentityPtrOutput() EncryptionSetIdentityPtrOutput {
	return i.ToEncryptionSetIdentityPtrOutputWithContext(context.Background())
}

func (i *encryptionSetIdentityPtrType) ToEncryptionSetIdentityPtrOutputWithContext(ctx context.Context) EncryptionSetIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSetIdentityPtrOutput)
}

// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
type EncryptionSetIdentityOutput struct{ *pulumi.OutputState }

func (EncryptionSetIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSetIdentity)(nil)).Elem()
}

func (o EncryptionSetIdentityOutput) ToEncryptionSetIdentityOutput() EncryptionSetIdentityOutput {
	return o
}

func (o EncryptionSetIdentityOutput) ToEncryptionSetIdentityOutputWithContext(ctx context.Context) EncryptionSetIdentityOutput {
	return o
}

func (o EncryptionSetIdentityOutput) ToEncryptionSetIdentityPtrOutput() EncryptionSetIdentityPtrOutput {
	return o.ToEncryptionSetIdentityPtrOutputWithContext(context.Background())
}

func (o EncryptionSetIdentityOutput) ToEncryptionSetIdentityPtrOutputWithContext(ctx context.Context) EncryptionSetIdentityPtrOutput {
	return o.ApplyT(func(v EncryptionSetIdentity) *EncryptionSetIdentity {
		return &v
	}).(EncryptionSetIdentityPtrOutput)
}

// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported.
func (o EncryptionSetIdentityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionSetIdentity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EncryptionSetIdentityPtrOutput struct{ *pulumi.OutputState }

func (EncryptionSetIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSetIdentity)(nil)).Elem()
}

func (o EncryptionSetIdentityPtrOutput) ToEncryptionSetIdentityPtrOutput() EncryptionSetIdentityPtrOutput {
	return o
}

func (o EncryptionSetIdentityPtrOutput) ToEncryptionSetIdentityPtrOutputWithContext(ctx context.Context) EncryptionSetIdentityPtrOutput {
	return o
}

func (o EncryptionSetIdentityPtrOutput) Elem() EncryptionSetIdentityOutput {
	return o.ApplyT(func(v *EncryptionSetIdentity) EncryptionSetIdentity { return *v }).(EncryptionSetIdentityOutput)
}

// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported.
func (o EncryptionSetIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionSetIdentity) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
type EncryptionSetIdentityResponse struct {
	// The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id header in the PUT request if the resource has a systemAssigned(implicit) identity
	PrincipalId string `pulumi:"principalId"`
	// The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT request if the resource has a systemAssigned(implicit) identity
	TenantId string `pulumi:"tenantId"`
	// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported.
	Type *string `pulumi:"type"`
}

// EncryptionSetIdentityResponseInput is an input type that accepts EncryptionSetIdentityResponseArgs and EncryptionSetIdentityResponseOutput values.
// You can construct a concrete instance of `EncryptionSetIdentityResponseInput` via:
//
//          EncryptionSetIdentityResponseArgs{...}
type EncryptionSetIdentityResponseInput interface {
	pulumi.Input

	ToEncryptionSetIdentityResponseOutput() EncryptionSetIdentityResponseOutput
	ToEncryptionSetIdentityResponseOutputWithContext(context.Context) EncryptionSetIdentityResponseOutput
}

// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
type EncryptionSetIdentityResponseArgs struct {
	// The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id header in the PUT request if the resource has a systemAssigned(implicit) identity
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT request if the resource has a systemAssigned(implicit) identity
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EncryptionSetIdentityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSetIdentityResponse)(nil)).Elem()
}

func (i EncryptionSetIdentityResponseArgs) ToEncryptionSetIdentityResponseOutput() EncryptionSetIdentityResponseOutput {
	return i.ToEncryptionSetIdentityResponseOutputWithContext(context.Background())
}

func (i EncryptionSetIdentityResponseArgs) ToEncryptionSetIdentityResponseOutputWithContext(ctx context.Context) EncryptionSetIdentityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSetIdentityResponseOutput)
}

func (i EncryptionSetIdentityResponseArgs) ToEncryptionSetIdentityResponsePtrOutput() EncryptionSetIdentityResponsePtrOutput {
	return i.ToEncryptionSetIdentityResponsePtrOutputWithContext(context.Background())
}

func (i EncryptionSetIdentityResponseArgs) ToEncryptionSetIdentityResponsePtrOutputWithContext(ctx context.Context) EncryptionSetIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSetIdentityResponseOutput).ToEncryptionSetIdentityResponsePtrOutputWithContext(ctx)
}

// EncryptionSetIdentityResponsePtrInput is an input type that accepts EncryptionSetIdentityResponseArgs, EncryptionSetIdentityResponsePtr and EncryptionSetIdentityResponsePtrOutput values.
// You can construct a concrete instance of `EncryptionSetIdentityResponsePtrInput` via:
//
//          EncryptionSetIdentityResponseArgs{...}
//
//  or:
//
//          nil
type EncryptionSetIdentityResponsePtrInput interface {
	pulumi.Input

	ToEncryptionSetIdentityResponsePtrOutput() EncryptionSetIdentityResponsePtrOutput
	ToEncryptionSetIdentityResponsePtrOutputWithContext(context.Context) EncryptionSetIdentityResponsePtrOutput
}

type encryptionSetIdentityResponsePtrType EncryptionSetIdentityResponseArgs

func EncryptionSetIdentityResponsePtr(v *EncryptionSetIdentityResponseArgs) EncryptionSetIdentityResponsePtrInput {
	return (*encryptionSetIdentityResponsePtrType)(v)
}

func (*encryptionSetIdentityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSetIdentityResponse)(nil)).Elem()
}

func (i *encryptionSetIdentityResponsePtrType) ToEncryptionSetIdentityResponsePtrOutput() EncryptionSetIdentityResponsePtrOutput {
	return i.ToEncryptionSetIdentityResponsePtrOutputWithContext(context.Background())
}

func (i *encryptionSetIdentityResponsePtrType) ToEncryptionSetIdentityResponsePtrOutputWithContext(ctx context.Context) EncryptionSetIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSetIdentityResponsePtrOutput)
}

// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
type EncryptionSetIdentityResponseOutput struct{ *pulumi.OutputState }

func (EncryptionSetIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSetIdentityResponse)(nil)).Elem()
}

func (o EncryptionSetIdentityResponseOutput) ToEncryptionSetIdentityResponseOutput() EncryptionSetIdentityResponseOutput {
	return o
}

func (o EncryptionSetIdentityResponseOutput) ToEncryptionSetIdentityResponseOutputWithContext(ctx context.Context) EncryptionSetIdentityResponseOutput {
	return o
}

func (o EncryptionSetIdentityResponseOutput) ToEncryptionSetIdentityResponsePtrOutput() EncryptionSetIdentityResponsePtrOutput {
	return o.ToEncryptionSetIdentityResponsePtrOutputWithContext(context.Background())
}

func (o EncryptionSetIdentityResponseOutput) ToEncryptionSetIdentityResponsePtrOutputWithContext(ctx context.Context) EncryptionSetIdentityResponsePtrOutput {
	return o.ApplyT(func(v EncryptionSetIdentityResponse) *EncryptionSetIdentityResponse {
		return &v
	}).(EncryptionSetIdentityResponsePtrOutput)
}

// The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id header in the PUT request if the resource has a systemAssigned(implicit) identity
func (o EncryptionSetIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionSetIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT request if the resource has a systemAssigned(implicit) identity
func (o EncryptionSetIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionSetIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported.
func (o EncryptionSetIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionSetIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EncryptionSetIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionSetIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSetIdentityResponse)(nil)).Elem()
}

func (o EncryptionSetIdentityResponsePtrOutput) ToEncryptionSetIdentityResponsePtrOutput() EncryptionSetIdentityResponsePtrOutput {
	return o
}

func (o EncryptionSetIdentityResponsePtrOutput) ToEncryptionSetIdentityResponsePtrOutputWithContext(ctx context.Context) EncryptionSetIdentityResponsePtrOutput {
	return o
}

func (o EncryptionSetIdentityResponsePtrOutput) Elem() EncryptionSetIdentityResponseOutput {
	return o.ApplyT(func(v *EncryptionSetIdentityResponse) EncryptionSetIdentityResponse { return *v }).(EncryptionSetIdentityResponseOutput)
}

// The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id header in the PUT request if the resource has a systemAssigned(implicit) identity
func (o EncryptionSetIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionSetIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT request if the resource has a systemAssigned(implicit) identity
func (o EncryptionSetIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionSetIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported.
func (o EncryptionSetIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionSetIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type EncryptionSetPropertiesResponse struct {
	// The key vault key which is currently used by this disk encryption set.
	ActiveKey *KeyVaultAndKeyReferenceResponse `pulumi:"activeKey"`
	// The type of key used to encrypt the data of the disk.
	EncryptionType *string `pulumi:"encryptionType"`
	// A readonly collection of key vault keys previously used by this disk encryption set while a key rotation is in progress. It will be empty if there is no ongoing key rotation.
	PreviousKeys []KeyVaultAndKeyReferenceResponse `pulumi:"previousKeys"`
	// The disk encryption set provisioning state.
	ProvisioningState string `pulumi:"provisioningState"`
}

// EncryptionSetPropertiesResponseInput is an input type that accepts EncryptionSetPropertiesResponseArgs and EncryptionSetPropertiesResponseOutput values.
// You can construct a concrete instance of `EncryptionSetPropertiesResponseInput` via:
//
//          EncryptionSetPropertiesResponseArgs{...}
type EncryptionSetPropertiesResponseInput interface {
	pulumi.Input

	ToEncryptionSetPropertiesResponseOutput() EncryptionSetPropertiesResponseOutput
	ToEncryptionSetPropertiesResponseOutputWithContext(context.Context) EncryptionSetPropertiesResponseOutput
}

type EncryptionSetPropertiesResponseArgs struct {
	// The key vault key which is currently used by this disk encryption set.
	ActiveKey KeyVaultAndKeyReferenceResponsePtrInput `pulumi:"activeKey"`
	// The type of key used to encrypt the data of the disk.
	EncryptionType pulumi.StringPtrInput `pulumi:"encryptionType"`
	// A readonly collection of key vault keys previously used by this disk encryption set while a key rotation is in progress. It will be empty if there is no ongoing key rotation.
	PreviousKeys KeyVaultAndKeyReferenceResponseArrayInput `pulumi:"previousKeys"`
	// The disk encryption set provisioning state.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
}

func (EncryptionSetPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSetPropertiesResponse)(nil)).Elem()
}

func (i EncryptionSetPropertiesResponseArgs) ToEncryptionSetPropertiesResponseOutput() EncryptionSetPropertiesResponseOutput {
	return i.ToEncryptionSetPropertiesResponseOutputWithContext(context.Background())
}

func (i EncryptionSetPropertiesResponseArgs) ToEncryptionSetPropertiesResponseOutputWithContext(ctx context.Context) EncryptionSetPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSetPropertiesResponseOutput)
}

func (i EncryptionSetPropertiesResponseArgs) ToEncryptionSetPropertiesResponsePtrOutput() EncryptionSetPropertiesResponsePtrOutput {
	return i.ToEncryptionSetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i EncryptionSetPropertiesResponseArgs) ToEncryptionSetPropertiesResponsePtrOutputWithContext(ctx context.Context) EncryptionSetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSetPropertiesResponseOutput).ToEncryptionSetPropertiesResponsePtrOutputWithContext(ctx)
}

// EncryptionSetPropertiesResponsePtrInput is an input type that accepts EncryptionSetPropertiesResponseArgs, EncryptionSetPropertiesResponsePtr and EncryptionSetPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `EncryptionSetPropertiesResponsePtrInput` via:
//
//          EncryptionSetPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type EncryptionSetPropertiesResponsePtrInput interface {
	pulumi.Input

	ToEncryptionSetPropertiesResponsePtrOutput() EncryptionSetPropertiesResponsePtrOutput
	ToEncryptionSetPropertiesResponsePtrOutputWithContext(context.Context) EncryptionSetPropertiesResponsePtrOutput
}

type encryptionSetPropertiesResponsePtrType EncryptionSetPropertiesResponseArgs

func EncryptionSetPropertiesResponsePtr(v *EncryptionSetPropertiesResponseArgs) EncryptionSetPropertiesResponsePtrInput {
	return (*encryptionSetPropertiesResponsePtrType)(v)
}

func (*encryptionSetPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSetPropertiesResponse)(nil)).Elem()
}

func (i *encryptionSetPropertiesResponsePtrType) ToEncryptionSetPropertiesResponsePtrOutput() EncryptionSetPropertiesResponsePtrOutput {
	return i.ToEncryptionSetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *encryptionSetPropertiesResponsePtrType) ToEncryptionSetPropertiesResponsePtrOutputWithContext(ctx context.Context) EncryptionSetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSetPropertiesResponsePtrOutput)
}

type EncryptionSetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (EncryptionSetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSetPropertiesResponse)(nil)).Elem()
}

func (o EncryptionSetPropertiesResponseOutput) ToEncryptionSetPropertiesResponseOutput() EncryptionSetPropertiesResponseOutput {
	return o
}

func (o EncryptionSetPropertiesResponseOutput) ToEncryptionSetPropertiesResponseOutputWithContext(ctx context.Context) EncryptionSetPropertiesResponseOutput {
	return o
}

func (o EncryptionSetPropertiesResponseOutput) ToEncryptionSetPropertiesResponsePtrOutput() EncryptionSetPropertiesResponsePtrOutput {
	return o.ToEncryptionSetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o EncryptionSetPropertiesResponseOutput) ToEncryptionSetPropertiesResponsePtrOutputWithContext(ctx context.Context) EncryptionSetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v EncryptionSetPropertiesResponse) *EncryptionSetPropertiesResponse {
		return &v
	}).(EncryptionSetPropertiesResponsePtrOutput)
}

// The key vault key which is currently used by this disk encryption set.
func (o EncryptionSetPropertiesResponseOutput) ActiveKey() KeyVaultAndKeyReferenceResponsePtrOutput {
	return o.ApplyT(func(v EncryptionSetPropertiesResponse) *KeyVaultAndKeyReferenceResponse { return v.ActiveKey }).(KeyVaultAndKeyReferenceResponsePtrOutput)
}

// The type of key used to encrypt the data of the disk.
func (o EncryptionSetPropertiesResponseOutput) EncryptionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionSetPropertiesResponse) *string { return v.EncryptionType }).(pulumi.StringPtrOutput)
}

// A readonly collection of key vault keys previously used by this disk encryption set while a key rotation is in progress. It will be empty if there is no ongoing key rotation.
func (o EncryptionSetPropertiesResponseOutput) PreviousKeys() KeyVaultAndKeyReferenceResponseArrayOutput {
	return o.ApplyT(func(v EncryptionSetPropertiesResponse) []KeyVaultAndKeyReferenceResponse { return v.PreviousKeys }).(KeyVaultAndKeyReferenceResponseArrayOutput)
}

// The disk encryption set provisioning state.
func (o EncryptionSetPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionSetPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type EncryptionSetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionSetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSetPropertiesResponse)(nil)).Elem()
}

func (o EncryptionSetPropertiesResponsePtrOutput) ToEncryptionSetPropertiesResponsePtrOutput() EncryptionSetPropertiesResponsePtrOutput {
	return o
}

func (o EncryptionSetPropertiesResponsePtrOutput) ToEncryptionSetPropertiesResponsePtrOutputWithContext(ctx context.Context) EncryptionSetPropertiesResponsePtrOutput {
	return o
}

func (o EncryptionSetPropertiesResponsePtrOutput) Elem() EncryptionSetPropertiesResponseOutput {
	return o.ApplyT(func(v *EncryptionSetPropertiesResponse) EncryptionSetPropertiesResponse { return *v }).(EncryptionSetPropertiesResponseOutput)
}

// The key vault key which is currently used by this disk encryption set.
func (o EncryptionSetPropertiesResponsePtrOutput) ActiveKey() KeyVaultAndKeyReferenceResponsePtrOutput {
	return o.ApplyT(func(v *EncryptionSetPropertiesResponse) *KeyVaultAndKeyReferenceResponse {
		if v == nil {
			return nil
		}
		return v.ActiveKey
	}).(KeyVaultAndKeyReferenceResponsePtrOutput)
}

// The type of key used to encrypt the data of the disk.
func (o EncryptionSetPropertiesResponsePtrOutput) EncryptionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionSetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionType
	}).(pulumi.StringPtrOutput)
}

// A readonly collection of key vault keys previously used by this disk encryption set while a key rotation is in progress. It will be empty if there is no ongoing key rotation.
func (o EncryptionSetPropertiesResponsePtrOutput) PreviousKeys() KeyVaultAndKeyReferenceResponseArrayOutput {
	return o.ApplyT(func(v *EncryptionSetPropertiesResponse) []KeyVaultAndKeyReferenceResponse {
		if v == nil {
			return nil
		}
		return v.PreviousKeys
	}).(KeyVaultAndKeyReferenceResponseArrayOutput)
}

// The disk encryption set provisioning state.
func (o EncryptionSetPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionSetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollection struct {
	// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
	Enabled bool `pulumi:"enabled"`
	// A collection of encryption settings, one for each disk volume.
	EncryptionSettings []EncryptionSettingsElement `pulumi:"encryptionSettings"`
	// Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
	EncryptionSettingsVersion *string `pulumi:"encryptionSettingsVersion"`
}

// EncryptionSettingsCollectionInput is an input type that accepts EncryptionSettingsCollectionArgs and EncryptionSettingsCollectionOutput values.
// You can construct a concrete instance of `EncryptionSettingsCollectionInput` via:
//
//          EncryptionSettingsCollectionArgs{...}
type EncryptionSettingsCollectionInput interface {
	pulumi.Input

	ToEncryptionSettingsCollectionOutput() EncryptionSettingsCollectionOutput
	ToEncryptionSettingsCollectionOutputWithContext(context.Context) EncryptionSettingsCollectionOutput
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollectionArgs struct {
	// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// A collection of encryption settings, one for each disk volume.
	EncryptionSettings EncryptionSettingsElementArrayInput `pulumi:"encryptionSettings"`
	// Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
	EncryptionSettingsVersion pulumi.StringPtrInput `pulumi:"encryptionSettingsVersion"`
}

func (EncryptionSettingsCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsCollection)(nil)).Elem()
}

func (i EncryptionSettingsCollectionArgs) ToEncryptionSettingsCollectionOutput() EncryptionSettingsCollectionOutput {
	return i.ToEncryptionSettingsCollectionOutputWithContext(context.Background())
}

func (i EncryptionSettingsCollectionArgs) ToEncryptionSettingsCollectionOutputWithContext(ctx context.Context) EncryptionSettingsCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsCollectionOutput)
}

func (i EncryptionSettingsCollectionArgs) ToEncryptionSettingsCollectionPtrOutput() EncryptionSettingsCollectionPtrOutput {
	return i.ToEncryptionSettingsCollectionPtrOutputWithContext(context.Background())
}

func (i EncryptionSettingsCollectionArgs) ToEncryptionSettingsCollectionPtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsCollectionOutput).ToEncryptionSettingsCollectionPtrOutputWithContext(ctx)
}

// EncryptionSettingsCollectionPtrInput is an input type that accepts EncryptionSettingsCollectionArgs, EncryptionSettingsCollectionPtr and EncryptionSettingsCollectionPtrOutput values.
// You can construct a concrete instance of `EncryptionSettingsCollectionPtrInput` via:
//
//          EncryptionSettingsCollectionArgs{...}
//
//  or:
//
//          nil
type EncryptionSettingsCollectionPtrInput interface {
	pulumi.Input

	ToEncryptionSettingsCollectionPtrOutput() EncryptionSettingsCollectionPtrOutput
	ToEncryptionSettingsCollectionPtrOutputWithContext(context.Context) EncryptionSettingsCollectionPtrOutput
}

type encryptionSettingsCollectionPtrType EncryptionSettingsCollectionArgs

func EncryptionSettingsCollectionPtr(v *EncryptionSettingsCollectionArgs) EncryptionSettingsCollectionPtrInput {
	return (*encryptionSettingsCollectionPtrType)(v)
}

func (*encryptionSettingsCollectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSettingsCollection)(nil)).Elem()
}

func (i *encryptionSettingsCollectionPtrType) ToEncryptionSettingsCollectionPtrOutput() EncryptionSettingsCollectionPtrOutput {
	return i.ToEncryptionSettingsCollectionPtrOutputWithContext(context.Background())
}

func (i *encryptionSettingsCollectionPtrType) ToEncryptionSettingsCollectionPtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsCollectionPtrOutput)
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollectionOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsCollection)(nil)).Elem()
}

func (o EncryptionSettingsCollectionOutput) ToEncryptionSettingsCollectionOutput() EncryptionSettingsCollectionOutput {
	return o
}

func (o EncryptionSettingsCollectionOutput) ToEncryptionSettingsCollectionOutputWithContext(ctx context.Context) EncryptionSettingsCollectionOutput {
	return o
}

func (o EncryptionSettingsCollectionOutput) ToEncryptionSettingsCollectionPtrOutput() EncryptionSettingsCollectionPtrOutput {
	return o.ToEncryptionSettingsCollectionPtrOutputWithContext(context.Background())
}

func (o EncryptionSettingsCollectionOutput) ToEncryptionSettingsCollectionPtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionPtrOutput {
	return o.ApplyT(func(v EncryptionSettingsCollection) *EncryptionSettingsCollection {
		return &v
	}).(EncryptionSettingsCollectionPtrOutput)
}

// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
func (o EncryptionSettingsCollectionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v EncryptionSettingsCollection) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// A collection of encryption settings, one for each disk volume.
func (o EncryptionSettingsCollectionOutput) EncryptionSettings() EncryptionSettingsElementArrayOutput {
	return o.ApplyT(func(v EncryptionSettingsCollection) []EncryptionSettingsElement { return v.EncryptionSettings }).(EncryptionSettingsElementArrayOutput)
}

// Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
func (o EncryptionSettingsCollectionOutput) EncryptionSettingsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionSettingsCollection) *string { return v.EncryptionSettingsVersion }).(pulumi.StringPtrOutput)
}

type EncryptionSettingsCollectionPtrOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsCollectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSettingsCollection)(nil)).Elem()
}

func (o EncryptionSettingsCollectionPtrOutput) ToEncryptionSettingsCollectionPtrOutput() EncryptionSettingsCollectionPtrOutput {
	return o
}

func (o EncryptionSettingsCollectionPtrOutput) ToEncryptionSettingsCollectionPtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionPtrOutput {
	return o
}

func (o EncryptionSettingsCollectionPtrOutput) Elem() EncryptionSettingsCollectionOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollection) EncryptionSettingsCollection { return *v }).(EncryptionSettingsCollectionOutput)
}

// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
func (o EncryptionSettingsCollectionPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollection) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// A collection of encryption settings, one for each disk volume.
func (o EncryptionSettingsCollectionPtrOutput) EncryptionSettings() EncryptionSettingsElementArrayOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollection) []EncryptionSettingsElement {
		if v == nil {
			return nil
		}
		return v.EncryptionSettings
	}).(EncryptionSettingsElementArrayOutput)
}

// Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
func (o EncryptionSettingsCollectionPtrOutput) EncryptionSettingsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollection) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionSettingsVersion
	}).(pulumi.StringPtrOutput)
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollectionResponse struct {
	// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
	Enabled bool `pulumi:"enabled"`
	// A collection of encryption settings, one for each disk volume.
	EncryptionSettings []EncryptionSettingsElementResponse `pulumi:"encryptionSettings"`
	// Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
	EncryptionSettingsVersion *string `pulumi:"encryptionSettingsVersion"`
}

// EncryptionSettingsCollectionResponseInput is an input type that accepts EncryptionSettingsCollectionResponseArgs and EncryptionSettingsCollectionResponseOutput values.
// You can construct a concrete instance of `EncryptionSettingsCollectionResponseInput` via:
//
//          EncryptionSettingsCollectionResponseArgs{...}
type EncryptionSettingsCollectionResponseInput interface {
	pulumi.Input

	ToEncryptionSettingsCollectionResponseOutput() EncryptionSettingsCollectionResponseOutput
	ToEncryptionSettingsCollectionResponseOutputWithContext(context.Context) EncryptionSettingsCollectionResponseOutput
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollectionResponseArgs struct {
	// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// A collection of encryption settings, one for each disk volume.
	EncryptionSettings EncryptionSettingsElementResponseArrayInput `pulumi:"encryptionSettings"`
	// Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
	EncryptionSettingsVersion pulumi.StringPtrInput `pulumi:"encryptionSettingsVersion"`
}

func (EncryptionSettingsCollectionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsCollectionResponse)(nil)).Elem()
}

func (i EncryptionSettingsCollectionResponseArgs) ToEncryptionSettingsCollectionResponseOutput() EncryptionSettingsCollectionResponseOutput {
	return i.ToEncryptionSettingsCollectionResponseOutputWithContext(context.Background())
}

func (i EncryptionSettingsCollectionResponseArgs) ToEncryptionSettingsCollectionResponseOutputWithContext(ctx context.Context) EncryptionSettingsCollectionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsCollectionResponseOutput)
}

func (i EncryptionSettingsCollectionResponseArgs) ToEncryptionSettingsCollectionResponsePtrOutput() EncryptionSettingsCollectionResponsePtrOutput {
	return i.ToEncryptionSettingsCollectionResponsePtrOutputWithContext(context.Background())
}

func (i EncryptionSettingsCollectionResponseArgs) ToEncryptionSettingsCollectionResponsePtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsCollectionResponseOutput).ToEncryptionSettingsCollectionResponsePtrOutputWithContext(ctx)
}

// EncryptionSettingsCollectionResponsePtrInput is an input type that accepts EncryptionSettingsCollectionResponseArgs, EncryptionSettingsCollectionResponsePtr and EncryptionSettingsCollectionResponsePtrOutput values.
// You can construct a concrete instance of `EncryptionSettingsCollectionResponsePtrInput` via:
//
//          EncryptionSettingsCollectionResponseArgs{...}
//
//  or:
//
//          nil
type EncryptionSettingsCollectionResponsePtrInput interface {
	pulumi.Input

	ToEncryptionSettingsCollectionResponsePtrOutput() EncryptionSettingsCollectionResponsePtrOutput
	ToEncryptionSettingsCollectionResponsePtrOutputWithContext(context.Context) EncryptionSettingsCollectionResponsePtrOutput
}

type encryptionSettingsCollectionResponsePtrType EncryptionSettingsCollectionResponseArgs

func EncryptionSettingsCollectionResponsePtr(v *EncryptionSettingsCollectionResponseArgs) EncryptionSettingsCollectionResponsePtrInput {
	return (*encryptionSettingsCollectionResponsePtrType)(v)
}

func (*encryptionSettingsCollectionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSettingsCollectionResponse)(nil)).Elem()
}

func (i *encryptionSettingsCollectionResponsePtrType) ToEncryptionSettingsCollectionResponsePtrOutput() EncryptionSettingsCollectionResponsePtrOutput {
	return i.ToEncryptionSettingsCollectionResponsePtrOutputWithContext(context.Background())
}

func (i *encryptionSettingsCollectionResponsePtrType) ToEncryptionSettingsCollectionResponsePtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsCollectionResponsePtrOutput)
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollectionResponseOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsCollectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsCollectionResponse)(nil)).Elem()
}

func (o EncryptionSettingsCollectionResponseOutput) ToEncryptionSettingsCollectionResponseOutput() EncryptionSettingsCollectionResponseOutput {
	return o
}

func (o EncryptionSettingsCollectionResponseOutput) ToEncryptionSettingsCollectionResponseOutputWithContext(ctx context.Context) EncryptionSettingsCollectionResponseOutput {
	return o
}

func (o EncryptionSettingsCollectionResponseOutput) ToEncryptionSettingsCollectionResponsePtrOutput() EncryptionSettingsCollectionResponsePtrOutput {
	return o.ToEncryptionSettingsCollectionResponsePtrOutputWithContext(context.Background())
}

func (o EncryptionSettingsCollectionResponseOutput) ToEncryptionSettingsCollectionResponsePtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionResponsePtrOutput {
	return o.ApplyT(func(v EncryptionSettingsCollectionResponse) *EncryptionSettingsCollectionResponse {
		return &v
	}).(EncryptionSettingsCollectionResponsePtrOutput)
}

// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
func (o EncryptionSettingsCollectionResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v EncryptionSettingsCollectionResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// A collection of encryption settings, one for each disk volume.
func (o EncryptionSettingsCollectionResponseOutput) EncryptionSettings() EncryptionSettingsElementResponseArrayOutput {
	return o.ApplyT(func(v EncryptionSettingsCollectionResponse) []EncryptionSettingsElementResponse {
		return v.EncryptionSettings
	}).(EncryptionSettingsElementResponseArrayOutput)
}

// Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
func (o EncryptionSettingsCollectionResponseOutput) EncryptionSettingsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionSettingsCollectionResponse) *string { return v.EncryptionSettingsVersion }).(pulumi.StringPtrOutput)
}

type EncryptionSettingsCollectionResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsCollectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSettingsCollectionResponse)(nil)).Elem()
}

func (o EncryptionSettingsCollectionResponsePtrOutput) ToEncryptionSettingsCollectionResponsePtrOutput() EncryptionSettingsCollectionResponsePtrOutput {
	return o
}

func (o EncryptionSettingsCollectionResponsePtrOutput) ToEncryptionSettingsCollectionResponsePtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionResponsePtrOutput {
	return o
}

func (o EncryptionSettingsCollectionResponsePtrOutput) Elem() EncryptionSettingsCollectionResponseOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollectionResponse) EncryptionSettingsCollectionResponse { return *v }).(EncryptionSettingsCollectionResponseOutput)
}

// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
func (o EncryptionSettingsCollectionResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollectionResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// A collection of encryption settings, one for each disk volume.
func (o EncryptionSettingsCollectionResponsePtrOutput) EncryptionSettings() EncryptionSettingsElementResponseArrayOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollectionResponse) []EncryptionSettingsElementResponse {
		if v == nil {
			return nil
		}
		return v.EncryptionSettings
	}).(EncryptionSettingsElementResponseArrayOutput)
}

// Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
func (o EncryptionSettingsCollectionResponsePtrOutput) EncryptionSettingsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionSettingsVersion
	}).(pulumi.StringPtrOutput)
}

// Encryption settings for one disk volume.
type EncryptionSettingsElement struct {
	// Key Vault Secret Url and vault id of the disk encryption key
	DiskEncryptionKey *KeyVaultAndSecretReference `pulumi:"diskEncryptionKey"`
	// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
	KeyEncryptionKey *KeyVaultAndKeyReference `pulumi:"keyEncryptionKey"`
}

// EncryptionSettingsElementInput is an input type that accepts EncryptionSettingsElementArgs and EncryptionSettingsElementOutput values.
// You can construct a concrete instance of `EncryptionSettingsElementInput` via:
//
//          EncryptionSettingsElementArgs{...}
type EncryptionSettingsElementInput interface {
	pulumi.Input

	ToEncryptionSettingsElementOutput() EncryptionSettingsElementOutput
	ToEncryptionSettingsElementOutputWithContext(context.Context) EncryptionSettingsElementOutput
}

// Encryption settings for one disk volume.
type EncryptionSettingsElementArgs struct {
	// Key Vault Secret Url and vault id of the disk encryption key
	DiskEncryptionKey KeyVaultAndSecretReferencePtrInput `pulumi:"diskEncryptionKey"`
	// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
	KeyEncryptionKey KeyVaultAndKeyReferencePtrInput `pulumi:"keyEncryptionKey"`
}

func (EncryptionSettingsElementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsElement)(nil)).Elem()
}

func (i EncryptionSettingsElementArgs) ToEncryptionSettingsElementOutput() EncryptionSettingsElementOutput {
	return i.ToEncryptionSettingsElementOutputWithContext(context.Background())
}

func (i EncryptionSettingsElementArgs) ToEncryptionSettingsElementOutputWithContext(ctx context.Context) EncryptionSettingsElementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsElementOutput)
}

// EncryptionSettingsElementArrayInput is an input type that accepts EncryptionSettingsElementArray and EncryptionSettingsElementArrayOutput values.
// You can construct a concrete instance of `EncryptionSettingsElementArrayInput` via:
//
//          EncryptionSettingsElementArray{ EncryptionSettingsElementArgs{...} }
type EncryptionSettingsElementArrayInput interface {
	pulumi.Input

	ToEncryptionSettingsElementArrayOutput() EncryptionSettingsElementArrayOutput
	ToEncryptionSettingsElementArrayOutputWithContext(context.Context) EncryptionSettingsElementArrayOutput
}

type EncryptionSettingsElementArray []EncryptionSettingsElementInput

func (EncryptionSettingsElementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EncryptionSettingsElement)(nil)).Elem()
}

func (i EncryptionSettingsElementArray) ToEncryptionSettingsElementArrayOutput() EncryptionSettingsElementArrayOutput {
	return i.ToEncryptionSettingsElementArrayOutputWithContext(context.Background())
}

func (i EncryptionSettingsElementArray) ToEncryptionSettingsElementArrayOutputWithContext(ctx context.Context) EncryptionSettingsElementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsElementArrayOutput)
}

// Encryption settings for one disk volume.
type EncryptionSettingsElementOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsElementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsElement)(nil)).Elem()
}

func (o EncryptionSettingsElementOutput) ToEncryptionSettingsElementOutput() EncryptionSettingsElementOutput {
	return o
}

func (o EncryptionSettingsElementOutput) ToEncryptionSettingsElementOutputWithContext(ctx context.Context) EncryptionSettingsElementOutput {
	return o
}

// Key Vault Secret Url and vault id of the disk encryption key
func (o EncryptionSettingsElementOutput) DiskEncryptionKey() KeyVaultAndSecretReferencePtrOutput {
	return o.ApplyT(func(v EncryptionSettingsElement) *KeyVaultAndSecretReference { return v.DiskEncryptionKey }).(KeyVaultAndSecretReferencePtrOutput)
}

// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
func (o EncryptionSettingsElementOutput) KeyEncryptionKey() KeyVaultAndKeyReferencePtrOutput {
	return o.ApplyT(func(v EncryptionSettingsElement) *KeyVaultAndKeyReference { return v.KeyEncryptionKey }).(KeyVaultAndKeyReferencePtrOutput)
}

type EncryptionSettingsElementArrayOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsElementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EncryptionSettingsElement)(nil)).Elem()
}

func (o EncryptionSettingsElementArrayOutput) ToEncryptionSettingsElementArrayOutput() EncryptionSettingsElementArrayOutput {
	return o
}

func (o EncryptionSettingsElementArrayOutput) ToEncryptionSettingsElementArrayOutputWithContext(ctx context.Context) EncryptionSettingsElementArrayOutput {
	return o
}

func (o EncryptionSettingsElementArrayOutput) Index(i pulumi.IntInput) EncryptionSettingsElementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EncryptionSettingsElement {
		return vs[0].([]EncryptionSettingsElement)[vs[1].(int)]
	}).(EncryptionSettingsElementOutput)
}

// Encryption settings for one disk volume.
type EncryptionSettingsElementResponse struct {
	// Key Vault Secret Url and vault id of the disk encryption key
	DiskEncryptionKey *KeyVaultAndSecretReferenceResponse `pulumi:"diskEncryptionKey"`
	// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
	KeyEncryptionKey *KeyVaultAndKeyReferenceResponse `pulumi:"keyEncryptionKey"`
}

// EncryptionSettingsElementResponseInput is an input type that accepts EncryptionSettingsElementResponseArgs and EncryptionSettingsElementResponseOutput values.
// You can construct a concrete instance of `EncryptionSettingsElementResponseInput` via:
//
//          EncryptionSettingsElementResponseArgs{...}
type EncryptionSettingsElementResponseInput interface {
	pulumi.Input

	ToEncryptionSettingsElementResponseOutput() EncryptionSettingsElementResponseOutput
	ToEncryptionSettingsElementResponseOutputWithContext(context.Context) EncryptionSettingsElementResponseOutput
}

// Encryption settings for one disk volume.
type EncryptionSettingsElementResponseArgs struct {
	// Key Vault Secret Url and vault id of the disk encryption key
	DiskEncryptionKey KeyVaultAndSecretReferenceResponsePtrInput `pulumi:"diskEncryptionKey"`
	// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
	KeyEncryptionKey KeyVaultAndKeyReferenceResponsePtrInput `pulumi:"keyEncryptionKey"`
}

func (EncryptionSettingsElementResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsElementResponse)(nil)).Elem()
}

func (i EncryptionSettingsElementResponseArgs) ToEncryptionSettingsElementResponseOutput() EncryptionSettingsElementResponseOutput {
	return i.ToEncryptionSettingsElementResponseOutputWithContext(context.Background())
}

func (i EncryptionSettingsElementResponseArgs) ToEncryptionSettingsElementResponseOutputWithContext(ctx context.Context) EncryptionSettingsElementResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsElementResponseOutput)
}

// EncryptionSettingsElementResponseArrayInput is an input type that accepts EncryptionSettingsElementResponseArray and EncryptionSettingsElementResponseArrayOutput values.
// You can construct a concrete instance of `EncryptionSettingsElementResponseArrayInput` via:
//
//          EncryptionSettingsElementResponseArray{ EncryptionSettingsElementResponseArgs{...} }
type EncryptionSettingsElementResponseArrayInput interface {
	pulumi.Input

	ToEncryptionSettingsElementResponseArrayOutput() EncryptionSettingsElementResponseArrayOutput
	ToEncryptionSettingsElementResponseArrayOutputWithContext(context.Context) EncryptionSettingsElementResponseArrayOutput
}

type EncryptionSettingsElementResponseArray []EncryptionSettingsElementResponseInput

func (EncryptionSettingsElementResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EncryptionSettingsElementResponse)(nil)).Elem()
}

func (i EncryptionSettingsElementResponseArray) ToEncryptionSettingsElementResponseArrayOutput() EncryptionSettingsElementResponseArrayOutput {
	return i.ToEncryptionSettingsElementResponseArrayOutputWithContext(context.Background())
}

func (i EncryptionSettingsElementResponseArray) ToEncryptionSettingsElementResponseArrayOutputWithContext(ctx context.Context) EncryptionSettingsElementResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsElementResponseArrayOutput)
}

// Encryption settings for one disk volume.
type EncryptionSettingsElementResponseOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsElementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsElementResponse)(nil)).Elem()
}

func (o EncryptionSettingsElementResponseOutput) ToEncryptionSettingsElementResponseOutput() EncryptionSettingsElementResponseOutput {
	return o
}

func (o EncryptionSettingsElementResponseOutput) ToEncryptionSettingsElementResponseOutputWithContext(ctx context.Context) EncryptionSettingsElementResponseOutput {
	return o
}

// Key Vault Secret Url and vault id of the disk encryption key
func (o EncryptionSettingsElementResponseOutput) DiskEncryptionKey() KeyVaultAndSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v EncryptionSettingsElementResponse) *KeyVaultAndSecretReferenceResponse {
		return v.DiskEncryptionKey
	}).(KeyVaultAndSecretReferenceResponsePtrOutput)
}

// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
func (o EncryptionSettingsElementResponseOutput) KeyEncryptionKey() KeyVaultAndKeyReferenceResponsePtrOutput {
	return o.ApplyT(func(v EncryptionSettingsElementResponse) *KeyVaultAndKeyReferenceResponse { return v.KeyEncryptionKey }).(KeyVaultAndKeyReferenceResponsePtrOutput)
}

type EncryptionSettingsElementResponseArrayOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsElementResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EncryptionSettingsElementResponse)(nil)).Elem()
}

func (o EncryptionSettingsElementResponseArrayOutput) ToEncryptionSettingsElementResponseArrayOutput() EncryptionSettingsElementResponseArrayOutput {
	return o
}

func (o EncryptionSettingsElementResponseArrayOutput) ToEncryptionSettingsElementResponseArrayOutputWithContext(ctx context.Context) EncryptionSettingsElementResponseArrayOutput {
	return o
}

func (o EncryptionSettingsElementResponseArrayOutput) Index(i pulumi.IntInput) EncryptionSettingsElementResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EncryptionSettingsElementResponse {
		return vs[0].([]EncryptionSettingsElementResponse)[vs[1].(int)]
	}).(EncryptionSettingsElementResponseOutput)
}

// The source image used for creating the disk.
type ImageDiskReference struct {
	// A relative uri containing either a Platform Image Repository or user image reference.
	Id string `pulumi:"id"`
	// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
	Lun *int `pulumi:"lun"`
}

// ImageDiskReferenceInput is an input type that accepts ImageDiskReferenceArgs and ImageDiskReferenceOutput values.
// You can construct a concrete instance of `ImageDiskReferenceInput` via:
//
//          ImageDiskReferenceArgs{...}
type ImageDiskReferenceInput interface {
	pulumi.Input

	ToImageDiskReferenceOutput() ImageDiskReferenceOutput
	ToImageDiskReferenceOutputWithContext(context.Context) ImageDiskReferenceOutput
}

// The source image used for creating the disk.
type ImageDiskReferenceArgs struct {
	// A relative uri containing either a Platform Image Repository or user image reference.
	Id pulumi.StringInput `pulumi:"id"`
	// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
	Lun pulumi.IntPtrInput `pulumi:"lun"`
}

func (ImageDiskReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDiskReference)(nil)).Elem()
}

func (i ImageDiskReferenceArgs) ToImageDiskReferenceOutput() ImageDiskReferenceOutput {
	return i.ToImageDiskReferenceOutputWithContext(context.Background())
}

func (i ImageDiskReferenceArgs) ToImageDiskReferenceOutputWithContext(ctx context.Context) ImageDiskReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDiskReferenceOutput)
}

func (i ImageDiskReferenceArgs) ToImageDiskReferencePtrOutput() ImageDiskReferencePtrOutput {
	return i.ToImageDiskReferencePtrOutputWithContext(context.Background())
}

func (i ImageDiskReferenceArgs) ToImageDiskReferencePtrOutputWithContext(ctx context.Context) ImageDiskReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDiskReferenceOutput).ToImageDiskReferencePtrOutputWithContext(ctx)
}

// ImageDiskReferencePtrInput is an input type that accepts ImageDiskReferenceArgs, ImageDiskReferencePtr and ImageDiskReferencePtrOutput values.
// You can construct a concrete instance of `ImageDiskReferencePtrInput` via:
//
//          ImageDiskReferenceArgs{...}
//
//  or:
//
//          nil
type ImageDiskReferencePtrInput interface {
	pulumi.Input

	ToImageDiskReferencePtrOutput() ImageDiskReferencePtrOutput
	ToImageDiskReferencePtrOutputWithContext(context.Context) ImageDiskReferencePtrOutput
}

type imageDiskReferencePtrType ImageDiskReferenceArgs

func ImageDiskReferencePtr(v *ImageDiskReferenceArgs) ImageDiskReferencePtrInput {
	return (*imageDiskReferencePtrType)(v)
}

func (*imageDiskReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageDiskReference)(nil)).Elem()
}

func (i *imageDiskReferencePtrType) ToImageDiskReferencePtrOutput() ImageDiskReferencePtrOutput {
	return i.ToImageDiskReferencePtrOutputWithContext(context.Background())
}

func (i *imageDiskReferencePtrType) ToImageDiskReferencePtrOutputWithContext(ctx context.Context) ImageDiskReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDiskReferencePtrOutput)
}

// The source image used for creating the disk.
type ImageDiskReferenceOutput struct{ *pulumi.OutputState }

func (ImageDiskReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDiskReference)(nil)).Elem()
}

func (o ImageDiskReferenceOutput) ToImageDiskReferenceOutput() ImageDiskReferenceOutput {
	return o
}

func (o ImageDiskReferenceOutput) ToImageDiskReferenceOutputWithContext(ctx context.Context) ImageDiskReferenceOutput {
	return o
}

func (o ImageDiskReferenceOutput) ToImageDiskReferencePtrOutput() ImageDiskReferencePtrOutput {
	return o.ToImageDiskReferencePtrOutputWithContext(context.Background())
}

func (o ImageDiskReferenceOutput) ToImageDiskReferencePtrOutputWithContext(ctx context.Context) ImageDiskReferencePtrOutput {
	return o.ApplyT(func(v ImageDiskReference) *ImageDiskReference {
		return &v
	}).(ImageDiskReferencePtrOutput)
}

// A relative uri containing either a Platform Image Repository or user image reference.
func (o ImageDiskReferenceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ImageDiskReference) string { return v.Id }).(pulumi.StringOutput)
}

// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
func (o ImageDiskReferenceOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageDiskReference) *int { return v.Lun }).(pulumi.IntPtrOutput)
}

type ImageDiskReferencePtrOutput struct{ *pulumi.OutputState }

func (ImageDiskReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageDiskReference)(nil)).Elem()
}

func (o ImageDiskReferencePtrOutput) ToImageDiskReferencePtrOutput() ImageDiskReferencePtrOutput {
	return o
}

func (o ImageDiskReferencePtrOutput) ToImageDiskReferencePtrOutputWithContext(ctx context.Context) ImageDiskReferencePtrOutput {
	return o
}

func (o ImageDiskReferencePtrOutput) Elem() ImageDiskReferenceOutput {
	return o.ApplyT(func(v *ImageDiskReference) ImageDiskReference { return *v }).(ImageDiskReferenceOutput)
}

// A relative uri containing either a Platform Image Repository or user image reference.
func (o ImageDiskReferencePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageDiskReference) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
func (o ImageDiskReferencePtrOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageDiskReference) *int {
		if v == nil {
			return nil
		}
		return v.Lun
	}).(pulumi.IntPtrOutput)
}

// The source image used for creating the disk.
type ImageDiskReferenceResponse struct {
	// A relative uri containing either a Platform Image Repository or user image reference.
	Id string `pulumi:"id"`
	// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
	Lun *int `pulumi:"lun"`
}

// ImageDiskReferenceResponseInput is an input type that accepts ImageDiskReferenceResponseArgs and ImageDiskReferenceResponseOutput values.
// You can construct a concrete instance of `ImageDiskReferenceResponseInput` via:
//
//          ImageDiskReferenceResponseArgs{...}
type ImageDiskReferenceResponseInput interface {
	pulumi.Input

	ToImageDiskReferenceResponseOutput() ImageDiskReferenceResponseOutput
	ToImageDiskReferenceResponseOutputWithContext(context.Context) ImageDiskReferenceResponseOutput
}

// The source image used for creating the disk.
type ImageDiskReferenceResponseArgs struct {
	// A relative uri containing either a Platform Image Repository or user image reference.
	Id pulumi.StringInput `pulumi:"id"`
	// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
	Lun pulumi.IntPtrInput `pulumi:"lun"`
}

func (ImageDiskReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDiskReferenceResponse)(nil)).Elem()
}

func (i ImageDiskReferenceResponseArgs) ToImageDiskReferenceResponseOutput() ImageDiskReferenceResponseOutput {
	return i.ToImageDiskReferenceResponseOutputWithContext(context.Background())
}

func (i ImageDiskReferenceResponseArgs) ToImageDiskReferenceResponseOutputWithContext(ctx context.Context) ImageDiskReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDiskReferenceResponseOutput)
}

func (i ImageDiskReferenceResponseArgs) ToImageDiskReferenceResponsePtrOutput() ImageDiskReferenceResponsePtrOutput {
	return i.ToImageDiskReferenceResponsePtrOutputWithContext(context.Background())
}

func (i ImageDiskReferenceResponseArgs) ToImageDiskReferenceResponsePtrOutputWithContext(ctx context.Context) ImageDiskReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDiskReferenceResponseOutput).ToImageDiskReferenceResponsePtrOutputWithContext(ctx)
}

// ImageDiskReferenceResponsePtrInput is an input type that accepts ImageDiskReferenceResponseArgs, ImageDiskReferenceResponsePtr and ImageDiskReferenceResponsePtrOutput values.
// You can construct a concrete instance of `ImageDiskReferenceResponsePtrInput` via:
//
//          ImageDiskReferenceResponseArgs{...}
//
//  or:
//
//          nil
type ImageDiskReferenceResponsePtrInput interface {
	pulumi.Input

	ToImageDiskReferenceResponsePtrOutput() ImageDiskReferenceResponsePtrOutput
	ToImageDiskReferenceResponsePtrOutputWithContext(context.Context) ImageDiskReferenceResponsePtrOutput
}

type imageDiskReferenceResponsePtrType ImageDiskReferenceResponseArgs

func ImageDiskReferenceResponsePtr(v *ImageDiskReferenceResponseArgs) ImageDiskReferenceResponsePtrInput {
	return (*imageDiskReferenceResponsePtrType)(v)
}

func (*imageDiskReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageDiskReferenceResponse)(nil)).Elem()
}

func (i *imageDiskReferenceResponsePtrType) ToImageDiskReferenceResponsePtrOutput() ImageDiskReferenceResponsePtrOutput {
	return i.ToImageDiskReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *imageDiskReferenceResponsePtrType) ToImageDiskReferenceResponsePtrOutputWithContext(ctx context.Context) ImageDiskReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDiskReferenceResponsePtrOutput)
}

// The source image used for creating the disk.
type ImageDiskReferenceResponseOutput struct{ *pulumi.OutputState }

func (ImageDiskReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDiskReferenceResponse)(nil)).Elem()
}

func (o ImageDiskReferenceResponseOutput) ToImageDiskReferenceResponseOutput() ImageDiskReferenceResponseOutput {
	return o
}

func (o ImageDiskReferenceResponseOutput) ToImageDiskReferenceResponseOutputWithContext(ctx context.Context) ImageDiskReferenceResponseOutput {
	return o
}

func (o ImageDiskReferenceResponseOutput) ToImageDiskReferenceResponsePtrOutput() ImageDiskReferenceResponsePtrOutput {
	return o.ToImageDiskReferenceResponsePtrOutputWithContext(context.Background())
}

func (o ImageDiskReferenceResponseOutput) ToImageDiskReferenceResponsePtrOutputWithContext(ctx context.Context) ImageDiskReferenceResponsePtrOutput {
	return o.ApplyT(func(v ImageDiskReferenceResponse) *ImageDiskReferenceResponse {
		return &v
	}).(ImageDiskReferenceResponsePtrOutput)
}

// A relative uri containing either a Platform Image Repository or user image reference.
func (o ImageDiskReferenceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ImageDiskReferenceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
func (o ImageDiskReferenceResponseOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageDiskReferenceResponse) *int { return v.Lun }).(pulumi.IntPtrOutput)
}

type ImageDiskReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageDiskReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageDiskReferenceResponse)(nil)).Elem()
}

func (o ImageDiskReferenceResponsePtrOutput) ToImageDiskReferenceResponsePtrOutput() ImageDiskReferenceResponsePtrOutput {
	return o
}

func (o ImageDiskReferenceResponsePtrOutput) ToImageDiskReferenceResponsePtrOutputWithContext(ctx context.Context) ImageDiskReferenceResponsePtrOutput {
	return o
}

func (o ImageDiskReferenceResponsePtrOutput) Elem() ImageDiskReferenceResponseOutput {
	return o.ApplyT(func(v *ImageDiskReferenceResponse) ImageDiskReferenceResponse { return *v }).(ImageDiskReferenceResponseOutput)
}

// A relative uri containing either a Platform Image Repository or user image reference.
func (o ImageDiskReferenceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageDiskReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
func (o ImageDiskReferenceResponsePtrOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageDiskReferenceResponse) *int {
		if v == nil {
			return nil
		}
		return v.Lun
	}).(pulumi.IntPtrOutput)
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReference struct {
	// Url pointing to a key or secret in KeyVault
	KeyUrl string `pulumi:"keyUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVault `pulumi:"sourceVault"`
}

// KeyVaultAndKeyReferenceInput is an input type that accepts KeyVaultAndKeyReferenceArgs and KeyVaultAndKeyReferenceOutput values.
// You can construct a concrete instance of `KeyVaultAndKeyReferenceInput` via:
//
//          KeyVaultAndKeyReferenceArgs{...}
type KeyVaultAndKeyReferenceInput interface {
	pulumi.Input

	ToKeyVaultAndKeyReferenceOutput() KeyVaultAndKeyReferenceOutput
	ToKeyVaultAndKeyReferenceOutputWithContext(context.Context) KeyVaultAndKeyReferenceOutput
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReferenceArgs struct {
	// Url pointing to a key or secret in KeyVault
	KeyUrl pulumi.StringInput `pulumi:"keyUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultInput `pulumi:"sourceVault"`
}

func (KeyVaultAndKeyReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndKeyReference)(nil)).Elem()
}

func (i KeyVaultAndKeyReferenceArgs) ToKeyVaultAndKeyReferenceOutput() KeyVaultAndKeyReferenceOutput {
	return i.ToKeyVaultAndKeyReferenceOutputWithContext(context.Background())
}

func (i KeyVaultAndKeyReferenceArgs) ToKeyVaultAndKeyReferenceOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndKeyReferenceOutput)
}

func (i KeyVaultAndKeyReferenceArgs) ToKeyVaultAndKeyReferencePtrOutput() KeyVaultAndKeyReferencePtrOutput {
	return i.ToKeyVaultAndKeyReferencePtrOutputWithContext(context.Background())
}

func (i KeyVaultAndKeyReferenceArgs) ToKeyVaultAndKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndKeyReferenceOutput).ToKeyVaultAndKeyReferencePtrOutputWithContext(ctx)
}

// KeyVaultAndKeyReferencePtrInput is an input type that accepts KeyVaultAndKeyReferenceArgs, KeyVaultAndKeyReferencePtr and KeyVaultAndKeyReferencePtrOutput values.
// You can construct a concrete instance of `KeyVaultAndKeyReferencePtrInput` via:
//
//          KeyVaultAndKeyReferenceArgs{...}
//
//  or:
//
//          nil
type KeyVaultAndKeyReferencePtrInput interface {
	pulumi.Input

	ToKeyVaultAndKeyReferencePtrOutput() KeyVaultAndKeyReferencePtrOutput
	ToKeyVaultAndKeyReferencePtrOutputWithContext(context.Context) KeyVaultAndKeyReferencePtrOutput
}

type keyVaultAndKeyReferencePtrType KeyVaultAndKeyReferenceArgs

func KeyVaultAndKeyReferencePtr(v *KeyVaultAndKeyReferenceArgs) KeyVaultAndKeyReferencePtrInput {
	return (*keyVaultAndKeyReferencePtrType)(v)
}

func (*keyVaultAndKeyReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndKeyReference)(nil)).Elem()
}

func (i *keyVaultAndKeyReferencePtrType) ToKeyVaultAndKeyReferencePtrOutput() KeyVaultAndKeyReferencePtrOutput {
	return i.ToKeyVaultAndKeyReferencePtrOutputWithContext(context.Background())
}

func (i *keyVaultAndKeyReferencePtrType) ToKeyVaultAndKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndKeyReferencePtrOutput)
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReferenceOutput struct{ *pulumi.OutputState }

func (KeyVaultAndKeyReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndKeyReference)(nil)).Elem()
}

func (o KeyVaultAndKeyReferenceOutput) ToKeyVaultAndKeyReferenceOutput() KeyVaultAndKeyReferenceOutput {
	return o
}

func (o KeyVaultAndKeyReferenceOutput) ToKeyVaultAndKeyReferenceOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceOutput {
	return o
}

func (o KeyVaultAndKeyReferenceOutput) ToKeyVaultAndKeyReferencePtrOutput() KeyVaultAndKeyReferencePtrOutput {
	return o.ToKeyVaultAndKeyReferencePtrOutputWithContext(context.Background())
}

func (o KeyVaultAndKeyReferenceOutput) ToKeyVaultAndKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferencePtrOutput {
	return o.ApplyT(func(v KeyVaultAndKeyReference) *KeyVaultAndKeyReference {
		return &v
	}).(KeyVaultAndKeyReferencePtrOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndKeyReferenceOutput) KeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultAndKeyReference) string { return v.KeyUrl }).(pulumi.StringOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndKeyReferenceOutput) SourceVault() SourceVaultOutput {
	return o.ApplyT(func(v KeyVaultAndKeyReference) SourceVault { return v.SourceVault }).(SourceVaultOutput)
}

type KeyVaultAndKeyReferencePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultAndKeyReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndKeyReference)(nil)).Elem()
}

func (o KeyVaultAndKeyReferencePtrOutput) ToKeyVaultAndKeyReferencePtrOutput() KeyVaultAndKeyReferencePtrOutput {
	return o
}

func (o KeyVaultAndKeyReferencePtrOutput) ToKeyVaultAndKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferencePtrOutput {
	return o
}

func (o KeyVaultAndKeyReferencePtrOutput) Elem() KeyVaultAndKeyReferenceOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReference) KeyVaultAndKeyReference { return *v }).(KeyVaultAndKeyReferenceOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndKeyReferencePtrOutput) KeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReference) *string {
		if v == nil {
			return nil
		}
		return &v.KeyUrl
	}).(pulumi.StringPtrOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndKeyReferencePtrOutput) SourceVault() SourceVaultPtrOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReference) *SourceVault {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(SourceVaultPtrOutput)
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReferenceResponse struct {
	// Url pointing to a key or secret in KeyVault
	KeyUrl string `pulumi:"keyUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultResponse `pulumi:"sourceVault"`
}

// KeyVaultAndKeyReferenceResponseInput is an input type that accepts KeyVaultAndKeyReferenceResponseArgs and KeyVaultAndKeyReferenceResponseOutput values.
// You can construct a concrete instance of `KeyVaultAndKeyReferenceResponseInput` via:
//
//          KeyVaultAndKeyReferenceResponseArgs{...}
type KeyVaultAndKeyReferenceResponseInput interface {
	pulumi.Input

	ToKeyVaultAndKeyReferenceResponseOutput() KeyVaultAndKeyReferenceResponseOutput
	ToKeyVaultAndKeyReferenceResponseOutputWithContext(context.Context) KeyVaultAndKeyReferenceResponseOutput
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReferenceResponseArgs struct {
	// Url pointing to a key or secret in KeyVault
	KeyUrl pulumi.StringInput `pulumi:"keyUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultResponseInput `pulumi:"sourceVault"`
}

func (KeyVaultAndKeyReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndKeyReferenceResponse)(nil)).Elem()
}

func (i KeyVaultAndKeyReferenceResponseArgs) ToKeyVaultAndKeyReferenceResponseOutput() KeyVaultAndKeyReferenceResponseOutput {
	return i.ToKeyVaultAndKeyReferenceResponseOutputWithContext(context.Background())
}

func (i KeyVaultAndKeyReferenceResponseArgs) ToKeyVaultAndKeyReferenceResponseOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndKeyReferenceResponseOutput)
}

func (i KeyVaultAndKeyReferenceResponseArgs) ToKeyVaultAndKeyReferenceResponsePtrOutput() KeyVaultAndKeyReferenceResponsePtrOutput {
	return i.ToKeyVaultAndKeyReferenceResponsePtrOutputWithContext(context.Background())
}

func (i KeyVaultAndKeyReferenceResponseArgs) ToKeyVaultAndKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndKeyReferenceResponseOutput).ToKeyVaultAndKeyReferenceResponsePtrOutputWithContext(ctx)
}

// KeyVaultAndKeyReferenceResponsePtrInput is an input type that accepts KeyVaultAndKeyReferenceResponseArgs, KeyVaultAndKeyReferenceResponsePtr and KeyVaultAndKeyReferenceResponsePtrOutput values.
// You can construct a concrete instance of `KeyVaultAndKeyReferenceResponsePtrInput` via:
//
//          KeyVaultAndKeyReferenceResponseArgs{...}
//
//  or:
//
//          nil
type KeyVaultAndKeyReferenceResponsePtrInput interface {
	pulumi.Input

	ToKeyVaultAndKeyReferenceResponsePtrOutput() KeyVaultAndKeyReferenceResponsePtrOutput
	ToKeyVaultAndKeyReferenceResponsePtrOutputWithContext(context.Context) KeyVaultAndKeyReferenceResponsePtrOutput
}

type keyVaultAndKeyReferenceResponsePtrType KeyVaultAndKeyReferenceResponseArgs

func KeyVaultAndKeyReferenceResponsePtr(v *KeyVaultAndKeyReferenceResponseArgs) KeyVaultAndKeyReferenceResponsePtrInput {
	return (*keyVaultAndKeyReferenceResponsePtrType)(v)
}

func (*keyVaultAndKeyReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndKeyReferenceResponse)(nil)).Elem()
}

func (i *keyVaultAndKeyReferenceResponsePtrType) ToKeyVaultAndKeyReferenceResponsePtrOutput() KeyVaultAndKeyReferenceResponsePtrOutput {
	return i.ToKeyVaultAndKeyReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *keyVaultAndKeyReferenceResponsePtrType) ToKeyVaultAndKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndKeyReferenceResponsePtrOutput)
}

// KeyVaultAndKeyReferenceResponseArrayInput is an input type that accepts KeyVaultAndKeyReferenceResponseArray and KeyVaultAndKeyReferenceResponseArrayOutput values.
// You can construct a concrete instance of `KeyVaultAndKeyReferenceResponseArrayInput` via:
//
//          KeyVaultAndKeyReferenceResponseArray{ KeyVaultAndKeyReferenceResponseArgs{...} }
type KeyVaultAndKeyReferenceResponseArrayInput interface {
	pulumi.Input

	ToKeyVaultAndKeyReferenceResponseArrayOutput() KeyVaultAndKeyReferenceResponseArrayOutput
	ToKeyVaultAndKeyReferenceResponseArrayOutputWithContext(context.Context) KeyVaultAndKeyReferenceResponseArrayOutput
}

type KeyVaultAndKeyReferenceResponseArray []KeyVaultAndKeyReferenceResponseInput

func (KeyVaultAndKeyReferenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyVaultAndKeyReferenceResponse)(nil)).Elem()
}

func (i KeyVaultAndKeyReferenceResponseArray) ToKeyVaultAndKeyReferenceResponseArrayOutput() KeyVaultAndKeyReferenceResponseArrayOutput {
	return i.ToKeyVaultAndKeyReferenceResponseArrayOutputWithContext(context.Background())
}

func (i KeyVaultAndKeyReferenceResponseArray) ToKeyVaultAndKeyReferenceResponseArrayOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndKeyReferenceResponseArrayOutput)
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReferenceResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultAndKeyReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndKeyReferenceResponse)(nil)).Elem()
}

func (o KeyVaultAndKeyReferenceResponseOutput) ToKeyVaultAndKeyReferenceResponseOutput() KeyVaultAndKeyReferenceResponseOutput {
	return o
}

func (o KeyVaultAndKeyReferenceResponseOutput) ToKeyVaultAndKeyReferenceResponseOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceResponseOutput {
	return o
}

func (o KeyVaultAndKeyReferenceResponseOutput) ToKeyVaultAndKeyReferenceResponsePtrOutput() KeyVaultAndKeyReferenceResponsePtrOutput {
	return o.ToKeyVaultAndKeyReferenceResponsePtrOutputWithContext(context.Background())
}

func (o KeyVaultAndKeyReferenceResponseOutput) ToKeyVaultAndKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceResponsePtrOutput {
	return o.ApplyT(func(v KeyVaultAndKeyReferenceResponse) *KeyVaultAndKeyReferenceResponse {
		return &v
	}).(KeyVaultAndKeyReferenceResponsePtrOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndKeyReferenceResponseOutput) KeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultAndKeyReferenceResponse) string { return v.KeyUrl }).(pulumi.StringOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndKeyReferenceResponseOutput) SourceVault() SourceVaultResponseOutput {
	return o.ApplyT(func(v KeyVaultAndKeyReferenceResponse) SourceVaultResponse { return v.SourceVault }).(SourceVaultResponseOutput)
}

type KeyVaultAndKeyReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultAndKeyReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndKeyReferenceResponse)(nil)).Elem()
}

func (o KeyVaultAndKeyReferenceResponsePtrOutput) ToKeyVaultAndKeyReferenceResponsePtrOutput() KeyVaultAndKeyReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultAndKeyReferenceResponsePtrOutput) ToKeyVaultAndKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultAndKeyReferenceResponsePtrOutput) Elem() KeyVaultAndKeyReferenceResponseOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReferenceResponse) KeyVaultAndKeyReferenceResponse { return *v }).(KeyVaultAndKeyReferenceResponseOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndKeyReferenceResponsePtrOutput) KeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyUrl
	}).(pulumi.StringPtrOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndKeyReferenceResponsePtrOutput) SourceVault() SourceVaultResponsePtrOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReferenceResponse) *SourceVaultResponse {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(SourceVaultResponsePtrOutput)
}

type KeyVaultAndKeyReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (KeyVaultAndKeyReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyVaultAndKeyReferenceResponse)(nil)).Elem()
}

func (o KeyVaultAndKeyReferenceResponseArrayOutput) ToKeyVaultAndKeyReferenceResponseArrayOutput() KeyVaultAndKeyReferenceResponseArrayOutput {
	return o
}

func (o KeyVaultAndKeyReferenceResponseArrayOutput) ToKeyVaultAndKeyReferenceResponseArrayOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceResponseArrayOutput {
	return o
}

func (o KeyVaultAndKeyReferenceResponseArrayOutput) Index(i pulumi.IntInput) KeyVaultAndKeyReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyVaultAndKeyReferenceResponse {
		return vs[0].([]KeyVaultAndKeyReferenceResponse)[vs[1].(int)]
	}).(KeyVaultAndKeyReferenceResponseOutput)
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReference struct {
	// Url pointing to a key or secret in KeyVault
	SecretUrl string `pulumi:"secretUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVault `pulumi:"sourceVault"`
}

// KeyVaultAndSecretReferenceInput is an input type that accepts KeyVaultAndSecretReferenceArgs and KeyVaultAndSecretReferenceOutput values.
// You can construct a concrete instance of `KeyVaultAndSecretReferenceInput` via:
//
//          KeyVaultAndSecretReferenceArgs{...}
type KeyVaultAndSecretReferenceInput interface {
	pulumi.Input

	ToKeyVaultAndSecretReferenceOutput() KeyVaultAndSecretReferenceOutput
	ToKeyVaultAndSecretReferenceOutputWithContext(context.Context) KeyVaultAndSecretReferenceOutput
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReferenceArgs struct {
	// Url pointing to a key or secret in KeyVault
	SecretUrl pulumi.StringInput `pulumi:"secretUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultInput `pulumi:"sourceVault"`
}

func (KeyVaultAndSecretReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndSecretReference)(nil)).Elem()
}

func (i KeyVaultAndSecretReferenceArgs) ToKeyVaultAndSecretReferenceOutput() KeyVaultAndSecretReferenceOutput {
	return i.ToKeyVaultAndSecretReferenceOutputWithContext(context.Background())
}

func (i KeyVaultAndSecretReferenceArgs) ToKeyVaultAndSecretReferenceOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndSecretReferenceOutput)
}

func (i KeyVaultAndSecretReferenceArgs) ToKeyVaultAndSecretReferencePtrOutput() KeyVaultAndSecretReferencePtrOutput {
	return i.ToKeyVaultAndSecretReferencePtrOutputWithContext(context.Background())
}

func (i KeyVaultAndSecretReferenceArgs) ToKeyVaultAndSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndSecretReferenceOutput).ToKeyVaultAndSecretReferencePtrOutputWithContext(ctx)
}

// KeyVaultAndSecretReferencePtrInput is an input type that accepts KeyVaultAndSecretReferenceArgs, KeyVaultAndSecretReferencePtr and KeyVaultAndSecretReferencePtrOutput values.
// You can construct a concrete instance of `KeyVaultAndSecretReferencePtrInput` via:
//
//          KeyVaultAndSecretReferenceArgs{...}
//
//  or:
//
//          nil
type KeyVaultAndSecretReferencePtrInput interface {
	pulumi.Input

	ToKeyVaultAndSecretReferencePtrOutput() KeyVaultAndSecretReferencePtrOutput
	ToKeyVaultAndSecretReferencePtrOutputWithContext(context.Context) KeyVaultAndSecretReferencePtrOutput
}

type keyVaultAndSecretReferencePtrType KeyVaultAndSecretReferenceArgs

func KeyVaultAndSecretReferencePtr(v *KeyVaultAndSecretReferenceArgs) KeyVaultAndSecretReferencePtrInput {
	return (*keyVaultAndSecretReferencePtrType)(v)
}

func (*keyVaultAndSecretReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndSecretReference)(nil)).Elem()
}

func (i *keyVaultAndSecretReferencePtrType) ToKeyVaultAndSecretReferencePtrOutput() KeyVaultAndSecretReferencePtrOutput {
	return i.ToKeyVaultAndSecretReferencePtrOutputWithContext(context.Background())
}

func (i *keyVaultAndSecretReferencePtrType) ToKeyVaultAndSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndSecretReferencePtrOutput)
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReferenceOutput struct{ *pulumi.OutputState }

func (KeyVaultAndSecretReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndSecretReference)(nil)).Elem()
}

func (o KeyVaultAndSecretReferenceOutput) ToKeyVaultAndSecretReferenceOutput() KeyVaultAndSecretReferenceOutput {
	return o
}

func (o KeyVaultAndSecretReferenceOutput) ToKeyVaultAndSecretReferenceOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceOutput {
	return o
}

func (o KeyVaultAndSecretReferenceOutput) ToKeyVaultAndSecretReferencePtrOutput() KeyVaultAndSecretReferencePtrOutput {
	return o.ToKeyVaultAndSecretReferencePtrOutputWithContext(context.Background())
}

func (o KeyVaultAndSecretReferenceOutput) ToKeyVaultAndSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferencePtrOutput {
	return o.ApplyT(func(v KeyVaultAndSecretReference) *KeyVaultAndSecretReference {
		return &v
	}).(KeyVaultAndSecretReferencePtrOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndSecretReferenceOutput) SecretUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultAndSecretReference) string { return v.SecretUrl }).(pulumi.StringOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndSecretReferenceOutput) SourceVault() SourceVaultOutput {
	return o.ApplyT(func(v KeyVaultAndSecretReference) SourceVault { return v.SourceVault }).(SourceVaultOutput)
}

type KeyVaultAndSecretReferencePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultAndSecretReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndSecretReference)(nil)).Elem()
}

func (o KeyVaultAndSecretReferencePtrOutput) ToKeyVaultAndSecretReferencePtrOutput() KeyVaultAndSecretReferencePtrOutput {
	return o
}

func (o KeyVaultAndSecretReferencePtrOutput) ToKeyVaultAndSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferencePtrOutput {
	return o
}

func (o KeyVaultAndSecretReferencePtrOutput) Elem() KeyVaultAndSecretReferenceOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReference) KeyVaultAndSecretReference { return *v }).(KeyVaultAndSecretReferenceOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndSecretReferencePtrOutput) SecretUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReference) *string {
		if v == nil {
			return nil
		}
		return &v.SecretUrl
	}).(pulumi.StringPtrOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndSecretReferencePtrOutput) SourceVault() SourceVaultPtrOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReference) *SourceVault {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(SourceVaultPtrOutput)
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReferenceResponse struct {
	// Url pointing to a key or secret in KeyVault
	SecretUrl string `pulumi:"secretUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultResponse `pulumi:"sourceVault"`
}

// KeyVaultAndSecretReferenceResponseInput is an input type that accepts KeyVaultAndSecretReferenceResponseArgs and KeyVaultAndSecretReferenceResponseOutput values.
// You can construct a concrete instance of `KeyVaultAndSecretReferenceResponseInput` via:
//
//          KeyVaultAndSecretReferenceResponseArgs{...}
type KeyVaultAndSecretReferenceResponseInput interface {
	pulumi.Input

	ToKeyVaultAndSecretReferenceResponseOutput() KeyVaultAndSecretReferenceResponseOutput
	ToKeyVaultAndSecretReferenceResponseOutputWithContext(context.Context) KeyVaultAndSecretReferenceResponseOutput
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReferenceResponseArgs struct {
	// Url pointing to a key or secret in KeyVault
	SecretUrl pulumi.StringInput `pulumi:"secretUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultResponseInput `pulumi:"sourceVault"`
}

func (KeyVaultAndSecretReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndSecretReferenceResponse)(nil)).Elem()
}

func (i KeyVaultAndSecretReferenceResponseArgs) ToKeyVaultAndSecretReferenceResponseOutput() KeyVaultAndSecretReferenceResponseOutput {
	return i.ToKeyVaultAndSecretReferenceResponseOutputWithContext(context.Background())
}

func (i KeyVaultAndSecretReferenceResponseArgs) ToKeyVaultAndSecretReferenceResponseOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndSecretReferenceResponseOutput)
}

func (i KeyVaultAndSecretReferenceResponseArgs) ToKeyVaultAndSecretReferenceResponsePtrOutput() KeyVaultAndSecretReferenceResponsePtrOutput {
	return i.ToKeyVaultAndSecretReferenceResponsePtrOutputWithContext(context.Background())
}

func (i KeyVaultAndSecretReferenceResponseArgs) ToKeyVaultAndSecretReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndSecretReferenceResponseOutput).ToKeyVaultAndSecretReferenceResponsePtrOutputWithContext(ctx)
}

// KeyVaultAndSecretReferenceResponsePtrInput is an input type that accepts KeyVaultAndSecretReferenceResponseArgs, KeyVaultAndSecretReferenceResponsePtr and KeyVaultAndSecretReferenceResponsePtrOutput values.
// You can construct a concrete instance of `KeyVaultAndSecretReferenceResponsePtrInput` via:
//
//          KeyVaultAndSecretReferenceResponseArgs{...}
//
//  or:
//
//          nil
type KeyVaultAndSecretReferenceResponsePtrInput interface {
	pulumi.Input

	ToKeyVaultAndSecretReferenceResponsePtrOutput() KeyVaultAndSecretReferenceResponsePtrOutput
	ToKeyVaultAndSecretReferenceResponsePtrOutputWithContext(context.Context) KeyVaultAndSecretReferenceResponsePtrOutput
}

type keyVaultAndSecretReferenceResponsePtrType KeyVaultAndSecretReferenceResponseArgs

func KeyVaultAndSecretReferenceResponsePtr(v *KeyVaultAndSecretReferenceResponseArgs) KeyVaultAndSecretReferenceResponsePtrInput {
	return (*keyVaultAndSecretReferenceResponsePtrType)(v)
}

func (*keyVaultAndSecretReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndSecretReferenceResponse)(nil)).Elem()
}

func (i *keyVaultAndSecretReferenceResponsePtrType) ToKeyVaultAndSecretReferenceResponsePtrOutput() KeyVaultAndSecretReferenceResponsePtrOutput {
	return i.ToKeyVaultAndSecretReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *keyVaultAndSecretReferenceResponsePtrType) ToKeyVaultAndSecretReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndSecretReferenceResponsePtrOutput)
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReferenceResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultAndSecretReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndSecretReferenceResponse)(nil)).Elem()
}

func (o KeyVaultAndSecretReferenceResponseOutput) ToKeyVaultAndSecretReferenceResponseOutput() KeyVaultAndSecretReferenceResponseOutput {
	return o
}

func (o KeyVaultAndSecretReferenceResponseOutput) ToKeyVaultAndSecretReferenceResponseOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceResponseOutput {
	return o
}

func (o KeyVaultAndSecretReferenceResponseOutput) ToKeyVaultAndSecretReferenceResponsePtrOutput() KeyVaultAndSecretReferenceResponsePtrOutput {
	return o.ToKeyVaultAndSecretReferenceResponsePtrOutputWithContext(context.Background())
}

func (o KeyVaultAndSecretReferenceResponseOutput) ToKeyVaultAndSecretReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v KeyVaultAndSecretReferenceResponse) *KeyVaultAndSecretReferenceResponse {
		return &v
	}).(KeyVaultAndSecretReferenceResponsePtrOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndSecretReferenceResponseOutput) SecretUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultAndSecretReferenceResponse) string { return v.SecretUrl }).(pulumi.StringOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndSecretReferenceResponseOutput) SourceVault() SourceVaultResponseOutput {
	return o.ApplyT(func(v KeyVaultAndSecretReferenceResponse) SourceVaultResponse { return v.SourceVault }).(SourceVaultResponseOutput)
}

type KeyVaultAndSecretReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultAndSecretReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndSecretReferenceResponse)(nil)).Elem()
}

func (o KeyVaultAndSecretReferenceResponsePtrOutput) ToKeyVaultAndSecretReferenceResponsePtrOutput() KeyVaultAndSecretReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultAndSecretReferenceResponsePtrOutput) ToKeyVaultAndSecretReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultAndSecretReferenceResponsePtrOutput) Elem() KeyVaultAndSecretReferenceResponseOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReferenceResponse) KeyVaultAndSecretReferenceResponse { return *v }).(KeyVaultAndSecretReferenceResponseOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndSecretReferenceResponsePtrOutput) SecretUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SecretUrl
	}).(pulumi.StringPtrOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndSecretReferenceResponsePtrOutput) SourceVault() SourceVaultResponsePtrOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReferenceResponse) *SourceVaultResponse {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(SourceVaultResponsePtrOutput)
}

// The Private Endpoint resource.
type PrivateEndpoint struct {
}

// PrivateEndpointInput is an input type that accepts PrivateEndpointArgs and PrivateEndpointOutput values.
// You can construct a concrete instance of `PrivateEndpointInput` via:
//
//          PrivateEndpointArgs{...}
type PrivateEndpointInput interface {
	pulumi.Input

	ToPrivateEndpointOutput() PrivateEndpointOutput
	ToPrivateEndpointOutputWithContext(context.Context) PrivateEndpointOutput
}

// The Private Endpoint resource.
type PrivateEndpointArgs struct {
}

func (PrivateEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpoint)(nil)).Elem()
}

func (i PrivateEndpointArgs) ToPrivateEndpointOutput() PrivateEndpointOutput {
	return i.ToPrivateEndpointOutputWithContext(context.Background())
}

func (i PrivateEndpointArgs) ToPrivateEndpointOutputWithContext(ctx context.Context) PrivateEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutput)
}

func (i PrivateEndpointArgs) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return i.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (i PrivateEndpointArgs) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutput).ToPrivateEndpointPtrOutputWithContext(ctx)
}

// PrivateEndpointPtrInput is an input type that accepts PrivateEndpointArgs, PrivateEndpointPtr and PrivateEndpointPtrOutput values.
// You can construct a concrete instance of `PrivateEndpointPtrInput` via:
//
//          PrivateEndpointArgs{...}
//
//  or:
//
//          nil
type PrivateEndpointPtrInput interface {
	pulumi.Input

	ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput
	ToPrivateEndpointPtrOutputWithContext(context.Context) PrivateEndpointPtrOutput
}

type privateEndpointPtrType PrivateEndpointArgs

func PrivateEndpointPtr(v *PrivateEndpointArgs) PrivateEndpointPtrInput {
	return (*privateEndpointPtrType)(v)
}

func (*privateEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpoint)(nil)).Elem()
}

func (i *privateEndpointPtrType) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return i.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (i *privateEndpointPtrType) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointPtrOutput)
}

// The Private Endpoint resource.
type PrivateEndpointOutput struct{ *pulumi.OutputState }

func (PrivateEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpoint)(nil)).Elem()
}

func (o PrivateEndpointOutput) ToPrivateEndpointOutput() PrivateEndpointOutput {
	return o
}

func (o PrivateEndpointOutput) ToPrivateEndpointOutputWithContext(ctx context.Context) PrivateEndpointOutput {
	return o
}

func (o PrivateEndpointOutput) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return o.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (o PrivateEndpointOutput) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return o.ApplyT(func(v PrivateEndpoint) *PrivateEndpoint {
		return &v
	}).(PrivateEndpointPtrOutput)
}

type PrivateEndpointPtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpoint)(nil)).Elem()
}

func (o PrivateEndpointPtrOutput) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return o
}

func (o PrivateEndpointPtrOutput) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return o
}

func (o PrivateEndpointPtrOutput) Elem() PrivateEndpointOutput {
	return o.ApplyT(func(v *PrivateEndpoint) PrivateEndpoint { return *v }).(PrivateEndpointOutput)
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnection struct {
	// The resource of private end point.
	PrivateEndpoint *PrivateEndpoint `pulumi:"privateEndpoint"`
	// A collection of information about the state of the connection between DiskAccess and Virtual Network.
	PrivateLinkServiceConnectionState PrivateLinkServiceConnectionState `pulumi:"privateLinkServiceConnectionState"`
	// The provisioning state of the private endpoint connection resource.
	ProvisioningState *string `pulumi:"provisioningState"`
}

// PrivateEndpointConnectionInput is an input type that accepts PrivateEndpointConnectionArgs and PrivateEndpointConnectionOutput values.
// You can construct a concrete instance of `PrivateEndpointConnectionInput` via:
//
//          PrivateEndpointConnectionArgs{...}
type PrivateEndpointConnectionInput interface {
	pulumi.Input

	ToPrivateEndpointConnectionOutput() PrivateEndpointConnectionOutput
	ToPrivateEndpointConnectionOutputWithContext(context.Context) PrivateEndpointConnectionOutput
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionArgs struct {
	// The resource of private end point.
	PrivateEndpoint PrivateEndpointPtrInput `pulumi:"privateEndpoint"`
	// A collection of information about the state of the connection between DiskAccess and Virtual Network.
	PrivateLinkServiceConnectionState PrivateLinkServiceConnectionStateInput `pulumi:"privateLinkServiceConnectionState"`
	// The provisioning state of the private endpoint connection resource.
	ProvisioningState pulumi.StringPtrInput `pulumi:"provisioningState"`
}

func (PrivateEndpointConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnection)(nil)).Elem()
}

func (i PrivateEndpointConnectionArgs) ToPrivateEndpointConnectionOutput() PrivateEndpointConnectionOutput {
	return i.ToPrivateEndpointConnectionOutputWithContext(context.Background())
}

func (i PrivateEndpointConnectionArgs) ToPrivateEndpointConnectionOutputWithContext(ctx context.Context) PrivateEndpointConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointConnectionOutput)
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnection)(nil)).Elem()
}

func (o PrivateEndpointConnectionOutput) ToPrivateEndpointConnectionOutput() PrivateEndpointConnectionOutput {
	return o
}

func (o PrivateEndpointConnectionOutput) ToPrivateEndpointConnectionOutputWithContext(ctx context.Context) PrivateEndpointConnectionOutput {
	return o
}

// The resource of private end point.
func (o PrivateEndpointConnectionOutput) PrivateEndpoint() PrivateEndpointPtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnection) *PrivateEndpoint { return v.PrivateEndpoint }).(PrivateEndpointPtrOutput)
}

// A collection of information about the state of the connection between DiskAccess and Virtual Network.
func (o PrivateEndpointConnectionOutput) PrivateLinkServiceConnectionState() PrivateLinkServiceConnectionStateOutput {
	return o.ApplyT(func(v PrivateEndpointConnection) PrivateLinkServiceConnectionState {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkServiceConnectionStateOutput)
}

// The provisioning state of the private endpoint connection resource.
func (o PrivateEndpointConnectionOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnection) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// Properties of the PrivateEndpointConnectProperties.
type PrivateEndpointConnectionPropertiesResponse struct {
	// The resource of private end point.
	PrivateEndpoint *PrivateEndpointResponse `pulumi:"privateEndpoint"`
	// A collection of information about the state of the connection between DiskAccess and Virtual Network.
	PrivateLinkServiceConnectionState PrivateLinkServiceConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	// The provisioning state of the private endpoint connection resource.
	ProvisioningState *string `pulumi:"provisioningState"`
}

// PrivateEndpointConnectionPropertiesResponseInput is an input type that accepts PrivateEndpointConnectionPropertiesResponseArgs and PrivateEndpointConnectionPropertiesResponseOutput values.
// You can construct a concrete instance of `PrivateEndpointConnectionPropertiesResponseInput` via:
//
//          PrivateEndpointConnectionPropertiesResponseArgs{...}
type PrivateEndpointConnectionPropertiesResponseInput interface {
	pulumi.Input

	ToPrivateEndpointConnectionPropertiesResponseOutput() PrivateEndpointConnectionPropertiesResponseOutput
	ToPrivateEndpointConnectionPropertiesResponseOutputWithContext(context.Context) PrivateEndpointConnectionPropertiesResponseOutput
}

// Properties of the PrivateEndpointConnectProperties.
type PrivateEndpointConnectionPropertiesResponseArgs struct {
	// The resource of private end point.
	PrivateEndpoint PrivateEndpointResponsePtrInput `pulumi:"privateEndpoint"`
	// A collection of information about the state of the connection between DiskAccess and Virtual Network.
	PrivateLinkServiceConnectionState PrivateLinkServiceConnectionStateResponseInput `pulumi:"privateLinkServiceConnectionState"`
	// The provisioning state of the private endpoint connection resource.
	ProvisioningState pulumi.StringPtrInput `pulumi:"provisioningState"`
}

func (PrivateEndpointConnectionPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionPropertiesResponse)(nil)).Elem()
}

func (i PrivateEndpointConnectionPropertiesResponseArgs) ToPrivateEndpointConnectionPropertiesResponseOutput() PrivateEndpointConnectionPropertiesResponseOutput {
	return i.ToPrivateEndpointConnectionPropertiesResponseOutputWithContext(context.Background())
}

func (i PrivateEndpointConnectionPropertiesResponseArgs) ToPrivateEndpointConnectionPropertiesResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointConnectionPropertiesResponseOutput)
}

func (i PrivateEndpointConnectionPropertiesResponseArgs) ToPrivateEndpointConnectionPropertiesResponsePtrOutput() PrivateEndpointConnectionPropertiesResponsePtrOutput {
	return i.ToPrivateEndpointConnectionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i PrivateEndpointConnectionPropertiesResponseArgs) ToPrivateEndpointConnectionPropertiesResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointConnectionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointConnectionPropertiesResponseOutput).ToPrivateEndpointConnectionPropertiesResponsePtrOutputWithContext(ctx)
}

// PrivateEndpointConnectionPropertiesResponsePtrInput is an input type that accepts PrivateEndpointConnectionPropertiesResponseArgs, PrivateEndpointConnectionPropertiesResponsePtr and PrivateEndpointConnectionPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `PrivateEndpointConnectionPropertiesResponsePtrInput` via:
//
//          PrivateEndpointConnectionPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type PrivateEndpointConnectionPropertiesResponsePtrInput interface {
	pulumi.Input

	ToPrivateEndpointConnectionPropertiesResponsePtrOutput() PrivateEndpointConnectionPropertiesResponsePtrOutput
	ToPrivateEndpointConnectionPropertiesResponsePtrOutputWithContext(context.Context) PrivateEndpointConnectionPropertiesResponsePtrOutput
}

type privateEndpointConnectionPropertiesResponsePtrType PrivateEndpointConnectionPropertiesResponseArgs

func PrivateEndpointConnectionPropertiesResponsePtr(v *PrivateEndpointConnectionPropertiesResponseArgs) PrivateEndpointConnectionPropertiesResponsePtrInput {
	return (*privateEndpointConnectionPropertiesResponsePtrType)(v)
}

func (*privateEndpointConnectionPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointConnectionPropertiesResponse)(nil)).Elem()
}

func (i *privateEndpointConnectionPropertiesResponsePtrType) ToPrivateEndpointConnectionPropertiesResponsePtrOutput() PrivateEndpointConnectionPropertiesResponsePtrOutput {
	return i.ToPrivateEndpointConnectionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *privateEndpointConnectionPropertiesResponsePtrType) ToPrivateEndpointConnectionPropertiesResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointConnectionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointConnectionPropertiesResponsePtrOutput)
}

// Properties of the PrivateEndpointConnectProperties.
type PrivateEndpointConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionPropertiesResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionPropertiesResponseOutput) ToPrivateEndpointConnectionPropertiesResponseOutput() PrivateEndpointConnectionPropertiesResponseOutput {
	return o
}

func (o PrivateEndpointConnectionPropertiesResponseOutput) ToPrivateEndpointConnectionPropertiesResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionPropertiesResponseOutput {
	return o
}

func (o PrivateEndpointConnectionPropertiesResponseOutput) ToPrivateEndpointConnectionPropertiesResponsePtrOutput() PrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o.ToPrivateEndpointConnectionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o PrivateEndpointConnectionPropertiesResponseOutput) ToPrivateEndpointConnectionPropertiesResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionPropertiesResponse) *PrivateEndpointConnectionPropertiesResponse {
		return &v
	}).(PrivateEndpointConnectionPropertiesResponsePtrOutput)
}

// The resource of private end point.
func (o PrivateEndpointConnectionPropertiesResponseOutput) PrivateEndpoint() PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionPropertiesResponse) *PrivateEndpointResponse { return v.PrivateEndpoint }).(PrivateEndpointResponsePtrOutput)
}

// A collection of information about the state of the connection between DiskAccess and Virtual Network.
func (o PrivateEndpointConnectionPropertiesResponseOutput) PrivateLinkServiceConnectionState() PrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionPropertiesResponse) PrivateLinkServiceConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkServiceConnectionStateResponseOutput)
}

// The provisioning state of the private endpoint connection resource.
func (o PrivateEndpointConnectionPropertiesResponseOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionPropertiesResponse) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

type PrivateEndpointConnectionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointConnectionPropertiesResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) ToPrivateEndpointConnectionPropertiesResponsePtrOutput() PrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o
}

func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) ToPrivateEndpointConnectionPropertiesResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o
}

func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) Elem() PrivateEndpointConnectionPropertiesResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointConnectionPropertiesResponse) PrivateEndpointConnectionPropertiesResponse {
		return *v
	}).(PrivateEndpointConnectionPropertiesResponseOutput)
}

// The resource of private end point.
func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) PrivateEndpoint() PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v *PrivateEndpointConnectionPropertiesResponse) *PrivateEndpointResponse {
		if v == nil {
			return nil
		}
		return v.PrivateEndpoint
	}).(PrivateEndpointResponsePtrOutput)
}

// A collection of information about the state of the connection between DiskAccess and Virtual Network.
func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) PrivateLinkServiceConnectionState() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v *PrivateEndpointConnectionPropertiesResponse) *PrivateLinkServiceConnectionStateResponse {
		if v == nil {
			return nil
		}
		return &v.PrivateLinkServiceConnectionState
	}).(PrivateLinkServiceConnectionStateResponsePtrOutput)
}

// The provisioning state of the private endpoint connection resource.
func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointConnectionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionResponse struct {
	// private endpoint connection Id
	Id string `pulumi:"id"`
	// private endpoint connection name
	Name string `pulumi:"name"`
	// Resource properties.
	Properties *PrivateEndpointConnectionPropertiesResponse `pulumi:"properties"`
	// private endpoint connection type
	Type string `pulumi:"type"`
}

// PrivateEndpointConnectionResponseInput is an input type that accepts PrivateEndpointConnectionResponseArgs and PrivateEndpointConnectionResponseOutput values.
// You can construct a concrete instance of `PrivateEndpointConnectionResponseInput` via:
//
//          PrivateEndpointConnectionResponseArgs{...}
type PrivateEndpointConnectionResponseInput interface {
	pulumi.Input

	ToPrivateEndpointConnectionResponseOutput() PrivateEndpointConnectionResponseOutput
	ToPrivateEndpointConnectionResponseOutputWithContext(context.Context) PrivateEndpointConnectionResponseOutput
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionResponseArgs struct {
	// private endpoint connection Id
	Id pulumi.StringInput `pulumi:"id"`
	// private endpoint connection name
	Name pulumi.StringInput `pulumi:"name"`
	// Resource properties.
	Properties PrivateEndpointConnectionPropertiesResponsePtrInput `pulumi:"properties"`
	// private endpoint connection type
	Type pulumi.StringInput `pulumi:"type"`
}

func (PrivateEndpointConnectionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (i PrivateEndpointConnectionResponseArgs) ToPrivateEndpointConnectionResponseOutput() PrivateEndpointConnectionResponseOutput {
	return i.ToPrivateEndpointConnectionResponseOutputWithContext(context.Background())
}

func (i PrivateEndpointConnectionResponseArgs) ToPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointConnectionResponseOutput)
}

// PrivateEndpointConnectionResponseArrayInput is an input type that accepts PrivateEndpointConnectionResponseArray and PrivateEndpointConnectionResponseArrayOutput values.
// You can construct a concrete instance of `PrivateEndpointConnectionResponseArrayInput` via:
//
//          PrivateEndpointConnectionResponseArray{ PrivateEndpointConnectionResponseArgs{...} }
type PrivateEndpointConnectionResponseArrayInput interface {
	pulumi.Input

	ToPrivateEndpointConnectionResponseArrayOutput() PrivateEndpointConnectionResponseArrayOutput
	ToPrivateEndpointConnectionResponseArrayOutputWithContext(context.Context) PrivateEndpointConnectionResponseArrayOutput
}

type PrivateEndpointConnectionResponseArray []PrivateEndpointConnectionResponseInput

func (PrivateEndpointConnectionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (i PrivateEndpointConnectionResponseArray) ToPrivateEndpointConnectionResponseArrayOutput() PrivateEndpointConnectionResponseArrayOutput {
	return i.ToPrivateEndpointConnectionResponseArrayOutputWithContext(context.Background())
}

func (i PrivateEndpointConnectionResponseArray) ToPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointConnectionResponseArrayOutput)
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutput() PrivateEndpointConnectionResponseOutput {
	return o
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseOutput {
	return o
}

// private endpoint connection Id
func (o PrivateEndpointConnectionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// private endpoint connection name
func (o PrivateEndpointConnectionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Resource properties.
func (o PrivateEndpointConnectionResponseOutput) Properties() PrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *PrivateEndpointConnectionPropertiesResponse {
		return v.Properties
	}).(PrivateEndpointConnectionPropertiesResponsePtrOutput)
}

// private endpoint connection type
func (o PrivateEndpointConnectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PrivateEndpointConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutput() PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) Index(i pulumi.IntInput) PrivateEndpointConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateEndpointConnectionResponse {
		return vs[0].([]PrivateEndpointConnectionResponse)[vs[1].(int)]
	}).(PrivateEndpointConnectionResponseOutput)
}

// The Private Endpoint resource.
type PrivateEndpointResponse struct {
	// The ARM identifier for Private Endpoint
	Id string `pulumi:"id"`
}

// PrivateEndpointResponseInput is an input type that accepts PrivateEndpointResponseArgs and PrivateEndpointResponseOutput values.
// You can construct a concrete instance of `PrivateEndpointResponseInput` via:
//
//          PrivateEndpointResponseArgs{...}
type PrivateEndpointResponseInput interface {
	pulumi.Input

	ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput
	ToPrivateEndpointResponseOutputWithContext(context.Context) PrivateEndpointResponseOutput
}

// The Private Endpoint resource.
type PrivateEndpointResponseArgs struct {
	// The ARM identifier for Private Endpoint
	Id pulumi.StringInput `pulumi:"id"`
}

func (PrivateEndpointResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (i PrivateEndpointResponseArgs) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return i.ToPrivateEndpointResponseOutputWithContext(context.Background())
}

func (i PrivateEndpointResponseArgs) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResponseOutput)
}

func (i PrivateEndpointResponseArgs) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return i.ToPrivateEndpointResponsePtrOutputWithContext(context.Background())
}

func (i PrivateEndpointResponseArgs) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResponseOutput).ToPrivateEndpointResponsePtrOutputWithContext(ctx)
}

// PrivateEndpointResponsePtrInput is an input type that accepts PrivateEndpointResponseArgs, PrivateEndpointResponsePtr and PrivateEndpointResponsePtrOutput values.
// You can construct a concrete instance of `PrivateEndpointResponsePtrInput` via:
//
//          PrivateEndpointResponseArgs{...}
//
//  or:
//
//          nil
type PrivateEndpointResponsePtrInput interface {
	pulumi.Input

	ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput
	ToPrivateEndpointResponsePtrOutputWithContext(context.Context) PrivateEndpointResponsePtrOutput
}

type privateEndpointResponsePtrType PrivateEndpointResponseArgs

func PrivateEndpointResponsePtr(v *PrivateEndpointResponseArgs) PrivateEndpointResponsePtrInput {
	return (*privateEndpointResponsePtrType)(v)
}

func (*privateEndpointResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (i *privateEndpointResponsePtrType) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return i.ToPrivateEndpointResponsePtrOutputWithContext(context.Background())
}

func (i *privateEndpointResponsePtrType) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResponsePtrOutput)
}

// The Private Endpoint resource.
type PrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o.ToPrivateEndpointResponsePtrOutputWithContext(context.Background())
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) *PrivateEndpointResponse {
		return &v
	}).(PrivateEndpointResponsePtrOutput)
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) string { return v.Id }).(pulumi.StringOutput)
}

type PrivateEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) Elem() PrivateEndpointResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) PrivateEndpointResponse { return *v }).(PrivateEndpointResponseOutput)
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// PrivateLinkServiceConnectionStateInput is an input type that accepts PrivateLinkServiceConnectionStateArgs and PrivateLinkServiceConnectionStateOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateInput` via:
//
//          PrivateLinkServiceConnectionStateArgs{...}
type PrivateLinkServiceConnectionStateInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput
	ToPrivateLinkServiceConnectionStateOutputWithContext(context.Context) PrivateLinkServiceConnectionStateOutput
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateArgs struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkServiceConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return i.ToPrivateLinkServiceConnectionStateOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return o
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponse struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// PrivateLinkServiceConnectionStateResponseInput is an input type that accepts PrivateLinkServiceConnectionStateResponseArgs and PrivateLinkServiceConnectionStateResponseOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateResponseInput` via:
//
//          PrivateLinkServiceConnectionStateResponseArgs{...}
type PrivateLinkServiceConnectionStateResponseInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput
	ToPrivateLinkServiceConnectionStateResponseOutputWithContext(context.Context) PrivateLinkServiceConnectionStateResponseOutput
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponseArgs struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkServiceConnectionStateResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionStateResponseArgs) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return i.ToPrivateLinkServiceConnectionStateResponseOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateResponseArgs) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateResponseOutput)
}

func (i PrivateLinkServiceConnectionStateResponseArgs) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return i.ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateResponseArgs) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateResponseOutput).ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx)
}

// PrivateLinkServiceConnectionStateResponsePtrInput is an input type that accepts PrivateLinkServiceConnectionStateResponseArgs, PrivateLinkServiceConnectionStateResponsePtr and PrivateLinkServiceConnectionStateResponsePtrOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateResponsePtrInput` via:
//
//          PrivateLinkServiceConnectionStateResponseArgs{...}
//
//  or:
//
//          nil
type PrivateLinkServiceConnectionStateResponsePtrInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput
	ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput
}

type privateLinkServiceConnectionStateResponsePtrType PrivateLinkServiceConnectionStateResponseArgs

func PrivateLinkServiceConnectionStateResponsePtr(v *PrivateLinkServiceConnectionStateResponseArgs) PrivateLinkServiceConnectionStateResponsePtrInput {
	return (*privateLinkServiceConnectionStateResponsePtrType)(v)
}

func (*privateLinkServiceConnectionStateResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (i *privateLinkServiceConnectionStateResponsePtrType) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return i.ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(context.Background())
}

func (i *privateLinkServiceConnectionStateResponsePtrType) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateResponsePtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(context.Background())
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *PrivateLinkServiceConnectionStateResponse {
		return &v
	}).(PrivateLinkServiceConnectionStateResponsePtrOutput)
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type PrivateLinkServiceConnectionStateResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Elem() PrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) PrivateLinkServiceConnectionStateResponse {
		return *v
	}).(PrivateLinkServiceConnectionStateResponseOutput)
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

type ShareInfoElement struct {
}

// ShareInfoElementInput is an input type that accepts ShareInfoElementArgs and ShareInfoElementOutput values.
// You can construct a concrete instance of `ShareInfoElementInput` via:
//
//          ShareInfoElementArgs{...}
type ShareInfoElementInput interface {
	pulumi.Input

	ToShareInfoElementOutput() ShareInfoElementOutput
	ToShareInfoElementOutputWithContext(context.Context) ShareInfoElementOutput
}

type ShareInfoElementArgs struct {
}

func (ShareInfoElementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShareInfoElement)(nil)).Elem()
}

func (i ShareInfoElementArgs) ToShareInfoElementOutput() ShareInfoElementOutput {
	return i.ToShareInfoElementOutputWithContext(context.Background())
}

func (i ShareInfoElementArgs) ToShareInfoElementOutputWithContext(ctx context.Context) ShareInfoElementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareInfoElementOutput)
}

type ShareInfoElementOutput struct{ *pulumi.OutputState }

func (ShareInfoElementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShareInfoElement)(nil)).Elem()
}

func (o ShareInfoElementOutput) ToShareInfoElementOutput() ShareInfoElementOutput {
	return o
}

func (o ShareInfoElementOutput) ToShareInfoElementOutputWithContext(ctx context.Context) ShareInfoElementOutput {
	return o
}

type ShareInfoElementResponse struct {
	// A relative URI containing the ID of the VM that has the disk attached.
	VmUri string `pulumi:"vmUri"`
}

// ShareInfoElementResponseInput is an input type that accepts ShareInfoElementResponseArgs and ShareInfoElementResponseOutput values.
// You can construct a concrete instance of `ShareInfoElementResponseInput` via:
//
//          ShareInfoElementResponseArgs{...}
type ShareInfoElementResponseInput interface {
	pulumi.Input

	ToShareInfoElementResponseOutput() ShareInfoElementResponseOutput
	ToShareInfoElementResponseOutputWithContext(context.Context) ShareInfoElementResponseOutput
}

type ShareInfoElementResponseArgs struct {
	// A relative URI containing the ID of the VM that has the disk attached.
	VmUri pulumi.StringInput `pulumi:"vmUri"`
}

func (ShareInfoElementResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShareInfoElementResponse)(nil)).Elem()
}

func (i ShareInfoElementResponseArgs) ToShareInfoElementResponseOutput() ShareInfoElementResponseOutput {
	return i.ToShareInfoElementResponseOutputWithContext(context.Background())
}

func (i ShareInfoElementResponseArgs) ToShareInfoElementResponseOutputWithContext(ctx context.Context) ShareInfoElementResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareInfoElementResponseOutput)
}

// ShareInfoElementResponseArrayInput is an input type that accepts ShareInfoElementResponseArray and ShareInfoElementResponseArrayOutput values.
// You can construct a concrete instance of `ShareInfoElementResponseArrayInput` via:
//
//          ShareInfoElementResponseArray{ ShareInfoElementResponseArgs{...} }
type ShareInfoElementResponseArrayInput interface {
	pulumi.Input

	ToShareInfoElementResponseArrayOutput() ShareInfoElementResponseArrayOutput
	ToShareInfoElementResponseArrayOutputWithContext(context.Context) ShareInfoElementResponseArrayOutput
}

type ShareInfoElementResponseArray []ShareInfoElementResponseInput

func (ShareInfoElementResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ShareInfoElementResponse)(nil)).Elem()
}

func (i ShareInfoElementResponseArray) ToShareInfoElementResponseArrayOutput() ShareInfoElementResponseArrayOutput {
	return i.ToShareInfoElementResponseArrayOutputWithContext(context.Background())
}

func (i ShareInfoElementResponseArray) ToShareInfoElementResponseArrayOutputWithContext(ctx context.Context) ShareInfoElementResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareInfoElementResponseArrayOutput)
}

type ShareInfoElementResponseOutput struct{ *pulumi.OutputState }

func (ShareInfoElementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShareInfoElementResponse)(nil)).Elem()
}

func (o ShareInfoElementResponseOutput) ToShareInfoElementResponseOutput() ShareInfoElementResponseOutput {
	return o
}

func (o ShareInfoElementResponseOutput) ToShareInfoElementResponseOutputWithContext(ctx context.Context) ShareInfoElementResponseOutput {
	return o
}

// A relative URI containing the ID of the VM that has the disk attached.
func (o ShareInfoElementResponseOutput) VmUri() pulumi.StringOutput {
	return o.ApplyT(func(v ShareInfoElementResponse) string { return v.VmUri }).(pulumi.StringOutput)
}

type ShareInfoElementResponseArrayOutput struct{ *pulumi.OutputState }

func (ShareInfoElementResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ShareInfoElementResponse)(nil)).Elem()
}

func (o ShareInfoElementResponseArrayOutput) ToShareInfoElementResponseArrayOutput() ShareInfoElementResponseArrayOutput {
	return o
}

func (o ShareInfoElementResponseArrayOutput) ToShareInfoElementResponseArrayOutputWithContext(ctx context.Context) ShareInfoElementResponseArrayOutput {
	return o
}

func (o ShareInfoElementResponseArrayOutput) Index(i pulumi.IntInput) ShareInfoElementResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ShareInfoElementResponse {
		return vs[0].([]ShareInfoElementResponse)[vs[1].(int)]
	}).(ShareInfoElementResponseOutput)
}

// Snapshot resource.
type SnapshotType struct {
	// Resource location
	Location string `pulumi:"location"`
	// Unused. Always Null.
	ManagedBy string `pulumi:"managedBy"`
	// Resource name
	Name string `pulumi:"name"`
	// Snapshot resource properties.
	Properties SnapshotPropertiesResponse `pulumi:"properties"`
	// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
	Sku *SnapshotSkuResponse `pulumi:"sku"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type string `pulumi:"type"`
}

// SnapshotTypeInput is an input type that accepts SnapshotTypeArgs and SnapshotTypeOutput values.
// You can construct a concrete instance of `SnapshotTypeInput` via:
//
//          SnapshotTypeArgs{...}
type SnapshotTypeInput interface {
	pulumi.Input

	ToSnapshotTypeOutput() SnapshotTypeOutput
	ToSnapshotTypeOutputWithContext(context.Context) SnapshotTypeOutput
}

// Snapshot resource.
type SnapshotTypeArgs struct {
	// Resource location
	Location pulumi.StringInput `pulumi:"location"`
	// Unused. Always Null.
	ManagedBy pulumi.StringInput `pulumi:"managedBy"`
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// Snapshot resource properties.
	Properties SnapshotPropertiesResponseInput `pulumi:"properties"`
	// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
	Sku SnapshotSkuResponsePtrInput `pulumi:"sku"`
	// Resource tags
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (SnapshotTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotType)(nil)).Elem()
}

func (i SnapshotTypeArgs) ToSnapshotTypeOutput() SnapshotTypeOutput {
	return i.ToSnapshotTypeOutputWithContext(context.Background())
}

func (i SnapshotTypeArgs) ToSnapshotTypeOutputWithContext(ctx context.Context) SnapshotTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotTypeOutput)
}

// Snapshot resource.
type SnapshotTypeOutput struct{ *pulumi.OutputState }

func (SnapshotTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotType)(nil)).Elem()
}

func (o SnapshotTypeOutput) ToSnapshotTypeOutput() SnapshotTypeOutput {
	return o
}

func (o SnapshotTypeOutput) ToSnapshotTypeOutputWithContext(ctx context.Context) SnapshotTypeOutput {
	return o
}

// Resource location
func (o SnapshotTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotType) string { return v.Location }).(pulumi.StringOutput)
}

// Unused. Always Null.
func (o SnapshotTypeOutput) ManagedBy() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotType) string { return v.ManagedBy }).(pulumi.StringOutput)
}

// Resource name
func (o SnapshotTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotType) string { return v.Name }).(pulumi.StringOutput)
}

// Snapshot resource properties.
func (o SnapshotTypeOutput) Properties() SnapshotPropertiesResponseOutput {
	return o.ApplyT(func(v SnapshotType) SnapshotPropertiesResponse { return v.Properties }).(SnapshotPropertiesResponseOutput)
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
func (o SnapshotTypeOutput) Sku() SnapshotSkuResponsePtrOutput {
	return o.ApplyT(func(v SnapshotType) *SnapshotSkuResponse { return v.Sku }).(SnapshotSkuResponsePtrOutput)
}

// Resource tags
func (o SnapshotTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SnapshotType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o SnapshotTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotType) string { return v.Type }).(pulumi.StringOutput)
}

// Snapshot resource properties.
type SnapshotPropertiesResponse struct {
	// Disk source information. CreationData information cannot be changed after the disk has been created.
	CreationData CreationDataResponse `pulumi:"creationData"`
	// ARM id of the DiskAccess resource for using private endpoints on disks.
	DiskAccessId *string `pulumi:"diskAccessId"`
	// The size of the disk in bytes. This field is read only.
	DiskSizeBytes int `pulumi:"diskSizeBytes"`
	// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
	Encryption *EncryptionResponse `pulumi:"encryption"`
	// Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
	EncryptionSettingsCollection *EncryptionSettingsCollectionResponse `pulumi:"encryptionSettingsCollection"`
	// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
	HyperVGeneration *string `pulumi:"hyperVGeneration"`
	// Whether a snapshot is incremental. Incremental snapshots on the same disk occupy less space than full snapshots and can be diffed.
	Incremental *bool `pulumi:"incremental"`
	// Policy for accessing the disk via network.
	NetworkAccessPolicy *string `pulumi:"networkAccessPolicy"`
	// The Operating System type.
	OsType *string `pulumi:"osType"`
	// The disk provisioning state.
	ProvisioningState string `pulumi:"provisioningState"`
	// The time when the snapshot was created.
	TimeCreated string `pulumi:"timeCreated"`
	// Unique Guid identifying the resource.
	UniqueId string `pulumi:"uniqueId"`
}

// SnapshotPropertiesResponseInput is an input type that accepts SnapshotPropertiesResponseArgs and SnapshotPropertiesResponseOutput values.
// You can construct a concrete instance of `SnapshotPropertiesResponseInput` via:
//
//          SnapshotPropertiesResponseArgs{...}
type SnapshotPropertiesResponseInput interface {
	pulumi.Input

	ToSnapshotPropertiesResponseOutput() SnapshotPropertiesResponseOutput
	ToSnapshotPropertiesResponseOutputWithContext(context.Context) SnapshotPropertiesResponseOutput
}

// Snapshot resource properties.
type SnapshotPropertiesResponseArgs struct {
	// Disk source information. CreationData information cannot be changed after the disk has been created.
	CreationData CreationDataResponseInput `pulumi:"creationData"`
	// ARM id of the DiskAccess resource for using private endpoints on disks.
	DiskAccessId pulumi.StringPtrInput `pulumi:"diskAccessId"`
	// The size of the disk in bytes. This field is read only.
	DiskSizeBytes pulumi.IntInput `pulumi:"diskSizeBytes"`
	// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
	DiskSizeGB pulumi.IntPtrInput `pulumi:"diskSizeGB"`
	// Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
	Encryption EncryptionResponsePtrInput `pulumi:"encryption"`
	// Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
	EncryptionSettingsCollection EncryptionSettingsCollectionResponsePtrInput `pulumi:"encryptionSettingsCollection"`
	// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
	HyperVGeneration pulumi.StringPtrInput `pulumi:"hyperVGeneration"`
	// Whether a snapshot is incremental. Incremental snapshots on the same disk occupy less space than full snapshots and can be diffed.
	Incremental pulumi.BoolPtrInput `pulumi:"incremental"`
	// Policy for accessing the disk via network.
	NetworkAccessPolicy pulumi.StringPtrInput `pulumi:"networkAccessPolicy"`
	// The Operating System type.
	OsType pulumi.StringPtrInput `pulumi:"osType"`
	// The disk provisioning state.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// The time when the snapshot was created.
	TimeCreated pulumi.StringInput `pulumi:"timeCreated"`
	// Unique Guid identifying the resource.
	UniqueId pulumi.StringInput `pulumi:"uniqueId"`
}

func (SnapshotPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotPropertiesResponse)(nil)).Elem()
}

func (i SnapshotPropertiesResponseArgs) ToSnapshotPropertiesResponseOutput() SnapshotPropertiesResponseOutput {
	return i.ToSnapshotPropertiesResponseOutputWithContext(context.Background())
}

func (i SnapshotPropertiesResponseArgs) ToSnapshotPropertiesResponseOutputWithContext(ctx context.Context) SnapshotPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotPropertiesResponseOutput)
}

func (i SnapshotPropertiesResponseArgs) ToSnapshotPropertiesResponsePtrOutput() SnapshotPropertiesResponsePtrOutput {
	return i.ToSnapshotPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i SnapshotPropertiesResponseArgs) ToSnapshotPropertiesResponsePtrOutputWithContext(ctx context.Context) SnapshotPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotPropertiesResponseOutput).ToSnapshotPropertiesResponsePtrOutputWithContext(ctx)
}

// SnapshotPropertiesResponsePtrInput is an input type that accepts SnapshotPropertiesResponseArgs, SnapshotPropertiesResponsePtr and SnapshotPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `SnapshotPropertiesResponsePtrInput` via:
//
//          SnapshotPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type SnapshotPropertiesResponsePtrInput interface {
	pulumi.Input

	ToSnapshotPropertiesResponsePtrOutput() SnapshotPropertiesResponsePtrOutput
	ToSnapshotPropertiesResponsePtrOutputWithContext(context.Context) SnapshotPropertiesResponsePtrOutput
}

type snapshotPropertiesResponsePtrType SnapshotPropertiesResponseArgs

func SnapshotPropertiesResponsePtr(v *SnapshotPropertiesResponseArgs) SnapshotPropertiesResponsePtrInput {
	return (*snapshotPropertiesResponsePtrType)(v)
}

func (*snapshotPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotPropertiesResponse)(nil)).Elem()
}

func (i *snapshotPropertiesResponsePtrType) ToSnapshotPropertiesResponsePtrOutput() SnapshotPropertiesResponsePtrOutput {
	return i.ToSnapshotPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *snapshotPropertiesResponsePtrType) ToSnapshotPropertiesResponsePtrOutputWithContext(ctx context.Context) SnapshotPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotPropertiesResponsePtrOutput)
}

// Snapshot resource properties.
type SnapshotPropertiesResponseOutput struct{ *pulumi.OutputState }

func (SnapshotPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotPropertiesResponse)(nil)).Elem()
}

func (o SnapshotPropertiesResponseOutput) ToSnapshotPropertiesResponseOutput() SnapshotPropertiesResponseOutput {
	return o
}

func (o SnapshotPropertiesResponseOutput) ToSnapshotPropertiesResponseOutputWithContext(ctx context.Context) SnapshotPropertiesResponseOutput {
	return o
}

func (o SnapshotPropertiesResponseOutput) ToSnapshotPropertiesResponsePtrOutput() SnapshotPropertiesResponsePtrOutput {
	return o.ToSnapshotPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o SnapshotPropertiesResponseOutput) ToSnapshotPropertiesResponsePtrOutputWithContext(ctx context.Context) SnapshotPropertiesResponsePtrOutput {
	return o.ApplyT(func(v SnapshotPropertiesResponse) *SnapshotPropertiesResponse {
		return &v
	}).(SnapshotPropertiesResponsePtrOutput)
}

// Disk source information. CreationData information cannot be changed after the disk has been created.
func (o SnapshotPropertiesResponseOutput) CreationData() CreationDataResponseOutput {
	return o.ApplyT(func(v SnapshotPropertiesResponse) CreationDataResponse { return v.CreationData }).(CreationDataResponseOutput)
}

// ARM id of the DiskAccess resource for using private endpoints on disks.
func (o SnapshotPropertiesResponseOutput) DiskAccessId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotPropertiesResponse) *string { return v.DiskAccessId }).(pulumi.StringPtrOutput)
}

// The size of the disk in bytes. This field is read only.
func (o SnapshotPropertiesResponseOutput) DiskSizeBytes() pulumi.IntOutput {
	return o.ApplyT(func(v SnapshotPropertiesResponse) int { return v.DiskSizeBytes }).(pulumi.IntOutput)
}

// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
func (o SnapshotPropertiesResponseOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SnapshotPropertiesResponse) *int { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

// Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
func (o SnapshotPropertiesResponseOutput) Encryption() EncryptionResponsePtrOutput {
	return o.ApplyT(func(v SnapshotPropertiesResponse) *EncryptionResponse { return v.Encryption }).(EncryptionResponsePtrOutput)
}

// Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
func (o SnapshotPropertiesResponseOutput) EncryptionSettingsCollection() EncryptionSettingsCollectionResponsePtrOutput {
	return o.ApplyT(func(v SnapshotPropertiesResponse) *EncryptionSettingsCollectionResponse {
		return v.EncryptionSettingsCollection
	}).(EncryptionSettingsCollectionResponsePtrOutput)
}

// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
func (o SnapshotPropertiesResponseOutput) HyperVGeneration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotPropertiesResponse) *string { return v.HyperVGeneration }).(pulumi.StringPtrOutput)
}

// Whether a snapshot is incremental. Incremental snapshots on the same disk occupy less space than full snapshots and can be diffed.
func (o SnapshotPropertiesResponseOutput) Incremental() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SnapshotPropertiesResponse) *bool { return v.Incremental }).(pulumi.BoolPtrOutput)
}

// Policy for accessing the disk via network.
func (o SnapshotPropertiesResponseOutput) NetworkAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotPropertiesResponse) *string { return v.NetworkAccessPolicy }).(pulumi.StringPtrOutput)
}

// The Operating System type.
func (o SnapshotPropertiesResponseOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotPropertiesResponse) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// The disk provisioning state.
func (o SnapshotPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The time when the snapshot was created.
func (o SnapshotPropertiesResponseOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotPropertiesResponse) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// Unique Guid identifying the resource.
func (o SnapshotPropertiesResponseOutput) UniqueId() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotPropertiesResponse) string { return v.UniqueId }).(pulumi.StringOutput)
}

type SnapshotPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (SnapshotPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotPropertiesResponse)(nil)).Elem()
}

func (o SnapshotPropertiesResponsePtrOutput) ToSnapshotPropertiesResponsePtrOutput() SnapshotPropertiesResponsePtrOutput {
	return o
}

func (o SnapshotPropertiesResponsePtrOutput) ToSnapshotPropertiesResponsePtrOutputWithContext(ctx context.Context) SnapshotPropertiesResponsePtrOutput {
	return o
}

func (o SnapshotPropertiesResponsePtrOutput) Elem() SnapshotPropertiesResponseOutput {
	return o.ApplyT(func(v *SnapshotPropertiesResponse) SnapshotPropertiesResponse { return *v }).(SnapshotPropertiesResponseOutput)
}

// Disk source information. CreationData information cannot be changed after the disk has been created.
func (o SnapshotPropertiesResponsePtrOutput) CreationData() CreationDataResponsePtrOutput {
	return o.ApplyT(func(v *SnapshotPropertiesResponse) *CreationDataResponse {
		if v == nil {
			return nil
		}
		return &v.CreationData
	}).(CreationDataResponsePtrOutput)
}

// ARM id of the DiskAccess resource for using private endpoints on disks.
func (o SnapshotPropertiesResponsePtrOutput) DiskAccessId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DiskAccessId
	}).(pulumi.StringPtrOutput)
}

// The size of the disk in bytes. This field is read only.
func (o SnapshotPropertiesResponsePtrOutput) DiskSizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnapshotPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.DiskSizeBytes
	}).(pulumi.IntPtrOutput)
}

// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
func (o SnapshotPropertiesResponsePtrOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnapshotPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.DiskSizeGB
	}).(pulumi.IntPtrOutput)
}

// Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
func (o SnapshotPropertiesResponsePtrOutput) Encryption() EncryptionResponsePtrOutput {
	return o.ApplyT(func(v *SnapshotPropertiesResponse) *EncryptionResponse {
		if v == nil {
			return nil
		}
		return v.Encryption
	}).(EncryptionResponsePtrOutput)
}

// Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
func (o SnapshotPropertiesResponsePtrOutput) EncryptionSettingsCollection() EncryptionSettingsCollectionResponsePtrOutput {
	return o.ApplyT(func(v *SnapshotPropertiesResponse) *EncryptionSettingsCollectionResponse {
		if v == nil {
			return nil
		}
		return v.EncryptionSettingsCollection
	}).(EncryptionSettingsCollectionResponsePtrOutput)
}

// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
func (o SnapshotPropertiesResponsePtrOutput) HyperVGeneration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.HyperVGeneration
	}).(pulumi.StringPtrOutput)
}

// Whether a snapshot is incremental. Incremental snapshots on the same disk occupy less space than full snapshots and can be diffed.
func (o SnapshotPropertiesResponsePtrOutput) Incremental() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnapshotPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Incremental
	}).(pulumi.BoolPtrOutput)
}

// Policy for accessing the disk via network.
func (o SnapshotPropertiesResponsePtrOutput) NetworkAccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.NetworkAccessPolicy
	}).(pulumi.StringPtrOutput)
}

// The Operating System type.
func (o SnapshotPropertiesResponsePtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.OsType
	}).(pulumi.StringPtrOutput)
}

// The disk provisioning state.
func (o SnapshotPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The time when the snapshot was created.
func (o SnapshotPropertiesResponsePtrOutput) TimeCreated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TimeCreated
	}).(pulumi.StringPtrOutput)
}

// Unique Guid identifying the resource.
func (o SnapshotPropertiesResponsePtrOutput) UniqueId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UniqueId
	}).(pulumi.StringPtrOutput)
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
type SnapshotSku struct {
	// The sku name.
	Name *string `pulumi:"name"`
}

// SnapshotSkuInput is an input type that accepts SnapshotSkuArgs and SnapshotSkuOutput values.
// You can construct a concrete instance of `SnapshotSkuInput` via:
//
//          SnapshotSkuArgs{...}
type SnapshotSkuInput interface {
	pulumi.Input

	ToSnapshotSkuOutput() SnapshotSkuOutput
	ToSnapshotSkuOutputWithContext(context.Context) SnapshotSkuOutput
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
type SnapshotSkuArgs struct {
	// The sku name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SnapshotSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotSku)(nil)).Elem()
}

func (i SnapshotSkuArgs) ToSnapshotSkuOutput() SnapshotSkuOutput {
	return i.ToSnapshotSkuOutputWithContext(context.Background())
}

func (i SnapshotSkuArgs) ToSnapshotSkuOutputWithContext(ctx context.Context) SnapshotSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSkuOutput)
}

func (i SnapshotSkuArgs) ToSnapshotSkuPtrOutput() SnapshotSkuPtrOutput {
	return i.ToSnapshotSkuPtrOutputWithContext(context.Background())
}

func (i SnapshotSkuArgs) ToSnapshotSkuPtrOutputWithContext(ctx context.Context) SnapshotSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSkuOutput).ToSnapshotSkuPtrOutputWithContext(ctx)
}

// SnapshotSkuPtrInput is an input type that accepts SnapshotSkuArgs, SnapshotSkuPtr and SnapshotSkuPtrOutput values.
// You can construct a concrete instance of `SnapshotSkuPtrInput` via:
//
//          SnapshotSkuArgs{...}
//
//  or:
//
//          nil
type SnapshotSkuPtrInput interface {
	pulumi.Input

	ToSnapshotSkuPtrOutput() SnapshotSkuPtrOutput
	ToSnapshotSkuPtrOutputWithContext(context.Context) SnapshotSkuPtrOutput
}

type snapshotSkuPtrType SnapshotSkuArgs

func SnapshotSkuPtr(v *SnapshotSkuArgs) SnapshotSkuPtrInput {
	return (*snapshotSkuPtrType)(v)
}

func (*snapshotSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotSku)(nil)).Elem()
}

func (i *snapshotSkuPtrType) ToSnapshotSkuPtrOutput() SnapshotSkuPtrOutput {
	return i.ToSnapshotSkuPtrOutputWithContext(context.Background())
}

func (i *snapshotSkuPtrType) ToSnapshotSkuPtrOutputWithContext(ctx context.Context) SnapshotSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSkuPtrOutput)
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
type SnapshotSkuOutput struct{ *pulumi.OutputState }

func (SnapshotSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotSku)(nil)).Elem()
}

func (o SnapshotSkuOutput) ToSnapshotSkuOutput() SnapshotSkuOutput {
	return o
}

func (o SnapshotSkuOutput) ToSnapshotSkuOutputWithContext(ctx context.Context) SnapshotSkuOutput {
	return o
}

func (o SnapshotSkuOutput) ToSnapshotSkuPtrOutput() SnapshotSkuPtrOutput {
	return o.ToSnapshotSkuPtrOutputWithContext(context.Background())
}

func (o SnapshotSkuOutput) ToSnapshotSkuPtrOutputWithContext(ctx context.Context) SnapshotSkuPtrOutput {
	return o.ApplyT(func(v SnapshotSku) *SnapshotSku {
		return &v
	}).(SnapshotSkuPtrOutput)
}

// The sku name.
func (o SnapshotSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SnapshotSkuPtrOutput struct{ *pulumi.OutputState }

func (SnapshotSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotSku)(nil)).Elem()
}

func (o SnapshotSkuPtrOutput) ToSnapshotSkuPtrOutput() SnapshotSkuPtrOutput {
	return o
}

func (o SnapshotSkuPtrOutput) ToSnapshotSkuPtrOutputWithContext(ctx context.Context) SnapshotSkuPtrOutput {
	return o
}

func (o SnapshotSkuPtrOutput) Elem() SnapshotSkuOutput {
	return o.ApplyT(func(v *SnapshotSku) SnapshotSku { return *v }).(SnapshotSkuOutput)
}

// The sku name.
func (o SnapshotSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
type SnapshotSkuResponse struct {
	// The sku name.
	Name *string `pulumi:"name"`
	// The sku tier.
	Tier string `pulumi:"tier"`
}

// SnapshotSkuResponseInput is an input type that accepts SnapshotSkuResponseArgs and SnapshotSkuResponseOutput values.
// You can construct a concrete instance of `SnapshotSkuResponseInput` via:
//
//          SnapshotSkuResponseArgs{...}
type SnapshotSkuResponseInput interface {
	pulumi.Input

	ToSnapshotSkuResponseOutput() SnapshotSkuResponseOutput
	ToSnapshotSkuResponseOutputWithContext(context.Context) SnapshotSkuResponseOutput
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
type SnapshotSkuResponseArgs struct {
	// The sku name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The sku tier.
	Tier pulumi.StringInput `pulumi:"tier"`
}

func (SnapshotSkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotSkuResponse)(nil)).Elem()
}

func (i SnapshotSkuResponseArgs) ToSnapshotSkuResponseOutput() SnapshotSkuResponseOutput {
	return i.ToSnapshotSkuResponseOutputWithContext(context.Background())
}

func (i SnapshotSkuResponseArgs) ToSnapshotSkuResponseOutputWithContext(ctx context.Context) SnapshotSkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSkuResponseOutput)
}

func (i SnapshotSkuResponseArgs) ToSnapshotSkuResponsePtrOutput() SnapshotSkuResponsePtrOutput {
	return i.ToSnapshotSkuResponsePtrOutputWithContext(context.Background())
}

func (i SnapshotSkuResponseArgs) ToSnapshotSkuResponsePtrOutputWithContext(ctx context.Context) SnapshotSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSkuResponseOutput).ToSnapshotSkuResponsePtrOutputWithContext(ctx)
}

// SnapshotSkuResponsePtrInput is an input type that accepts SnapshotSkuResponseArgs, SnapshotSkuResponsePtr and SnapshotSkuResponsePtrOutput values.
// You can construct a concrete instance of `SnapshotSkuResponsePtrInput` via:
//
//          SnapshotSkuResponseArgs{...}
//
//  or:
//
//          nil
type SnapshotSkuResponsePtrInput interface {
	pulumi.Input

	ToSnapshotSkuResponsePtrOutput() SnapshotSkuResponsePtrOutput
	ToSnapshotSkuResponsePtrOutputWithContext(context.Context) SnapshotSkuResponsePtrOutput
}

type snapshotSkuResponsePtrType SnapshotSkuResponseArgs

func SnapshotSkuResponsePtr(v *SnapshotSkuResponseArgs) SnapshotSkuResponsePtrInput {
	return (*snapshotSkuResponsePtrType)(v)
}

func (*snapshotSkuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotSkuResponse)(nil)).Elem()
}

func (i *snapshotSkuResponsePtrType) ToSnapshotSkuResponsePtrOutput() SnapshotSkuResponsePtrOutput {
	return i.ToSnapshotSkuResponsePtrOutputWithContext(context.Background())
}

func (i *snapshotSkuResponsePtrType) ToSnapshotSkuResponsePtrOutputWithContext(ctx context.Context) SnapshotSkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSkuResponsePtrOutput)
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
type SnapshotSkuResponseOutput struct{ *pulumi.OutputState }

func (SnapshotSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotSkuResponse)(nil)).Elem()
}

func (o SnapshotSkuResponseOutput) ToSnapshotSkuResponseOutput() SnapshotSkuResponseOutput {
	return o
}

func (o SnapshotSkuResponseOutput) ToSnapshotSkuResponseOutputWithContext(ctx context.Context) SnapshotSkuResponseOutput {
	return o
}

func (o SnapshotSkuResponseOutput) ToSnapshotSkuResponsePtrOutput() SnapshotSkuResponsePtrOutput {
	return o.ToSnapshotSkuResponsePtrOutputWithContext(context.Background())
}

func (o SnapshotSkuResponseOutput) ToSnapshotSkuResponsePtrOutputWithContext(ctx context.Context) SnapshotSkuResponsePtrOutput {
	return o.ApplyT(func(v SnapshotSkuResponse) *SnapshotSkuResponse {
		return &v
	}).(SnapshotSkuResponsePtrOutput)
}

// The sku name.
func (o SnapshotSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The sku tier.
func (o SnapshotSkuResponseOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotSkuResponse) string { return v.Tier }).(pulumi.StringOutput)
}

type SnapshotSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SnapshotSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotSkuResponse)(nil)).Elem()
}

func (o SnapshotSkuResponsePtrOutput) ToSnapshotSkuResponsePtrOutput() SnapshotSkuResponsePtrOutput {
	return o
}

func (o SnapshotSkuResponsePtrOutput) ToSnapshotSkuResponsePtrOutputWithContext(ctx context.Context) SnapshotSkuResponsePtrOutput {
	return o
}

func (o SnapshotSkuResponsePtrOutput) Elem() SnapshotSkuResponseOutput {
	return o.ApplyT(func(v *SnapshotSkuResponse) SnapshotSkuResponse { return *v }).(SnapshotSkuResponseOutput)
}

// The sku name.
func (o SnapshotSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The sku tier.
func (o SnapshotSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotSkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Tier
	}).(pulumi.StringPtrOutput)
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVault struct {
	// Resource Id
	Id *string `pulumi:"id"`
}

// SourceVaultInput is an input type that accepts SourceVaultArgs and SourceVaultOutput values.
// You can construct a concrete instance of `SourceVaultInput` via:
//
//          SourceVaultArgs{...}
type SourceVaultInput interface {
	pulumi.Input

	ToSourceVaultOutput() SourceVaultOutput
	ToSourceVaultOutputWithContext(context.Context) SourceVaultOutput
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVaultArgs struct {
	// Resource Id
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SourceVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceVault)(nil)).Elem()
}

func (i SourceVaultArgs) ToSourceVaultOutput() SourceVaultOutput {
	return i.ToSourceVaultOutputWithContext(context.Background())
}

func (i SourceVaultArgs) ToSourceVaultOutputWithContext(ctx context.Context) SourceVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVaultOutput)
}

func (i SourceVaultArgs) ToSourceVaultPtrOutput() SourceVaultPtrOutput {
	return i.ToSourceVaultPtrOutputWithContext(context.Background())
}

func (i SourceVaultArgs) ToSourceVaultPtrOutputWithContext(ctx context.Context) SourceVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVaultOutput).ToSourceVaultPtrOutputWithContext(ctx)
}

// SourceVaultPtrInput is an input type that accepts SourceVaultArgs, SourceVaultPtr and SourceVaultPtrOutput values.
// You can construct a concrete instance of `SourceVaultPtrInput` via:
//
//          SourceVaultArgs{...}
//
//  or:
//
//          nil
type SourceVaultPtrInput interface {
	pulumi.Input

	ToSourceVaultPtrOutput() SourceVaultPtrOutput
	ToSourceVaultPtrOutputWithContext(context.Context) SourceVaultPtrOutput
}

type sourceVaultPtrType SourceVaultArgs

func SourceVaultPtr(v *SourceVaultArgs) SourceVaultPtrInput {
	return (*sourceVaultPtrType)(v)
}

func (*sourceVaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceVault)(nil)).Elem()
}

func (i *sourceVaultPtrType) ToSourceVaultPtrOutput() SourceVaultPtrOutput {
	return i.ToSourceVaultPtrOutputWithContext(context.Background())
}

func (i *sourceVaultPtrType) ToSourceVaultPtrOutputWithContext(ctx context.Context) SourceVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVaultPtrOutput)
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVaultOutput struct{ *pulumi.OutputState }

func (SourceVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceVault)(nil)).Elem()
}

func (o SourceVaultOutput) ToSourceVaultOutput() SourceVaultOutput {
	return o
}

func (o SourceVaultOutput) ToSourceVaultOutputWithContext(ctx context.Context) SourceVaultOutput {
	return o
}

func (o SourceVaultOutput) ToSourceVaultPtrOutput() SourceVaultPtrOutput {
	return o.ToSourceVaultPtrOutputWithContext(context.Background())
}

func (o SourceVaultOutput) ToSourceVaultPtrOutputWithContext(ctx context.Context) SourceVaultPtrOutput {
	return o.ApplyT(func(v SourceVault) *SourceVault {
		return &v
	}).(SourceVaultPtrOutput)
}

// Resource Id
func (o SourceVaultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceVault) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SourceVaultPtrOutput struct{ *pulumi.OutputState }

func (SourceVaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceVault)(nil)).Elem()
}

func (o SourceVaultPtrOutput) ToSourceVaultPtrOutput() SourceVaultPtrOutput {
	return o
}

func (o SourceVaultPtrOutput) ToSourceVaultPtrOutputWithContext(ctx context.Context) SourceVaultPtrOutput {
	return o
}

func (o SourceVaultPtrOutput) Elem() SourceVaultOutput {
	return o.ApplyT(func(v *SourceVault) SourceVault { return *v }).(SourceVaultOutput)
}

// Resource Id
func (o SourceVaultPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceVault) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVaultResponse struct {
	// Resource Id
	Id *string `pulumi:"id"`
}

// SourceVaultResponseInput is an input type that accepts SourceVaultResponseArgs and SourceVaultResponseOutput values.
// You can construct a concrete instance of `SourceVaultResponseInput` via:
//
//          SourceVaultResponseArgs{...}
type SourceVaultResponseInput interface {
	pulumi.Input

	ToSourceVaultResponseOutput() SourceVaultResponseOutput
	ToSourceVaultResponseOutputWithContext(context.Context) SourceVaultResponseOutput
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVaultResponseArgs struct {
	// Resource Id
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SourceVaultResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceVaultResponse)(nil)).Elem()
}

func (i SourceVaultResponseArgs) ToSourceVaultResponseOutput() SourceVaultResponseOutput {
	return i.ToSourceVaultResponseOutputWithContext(context.Background())
}

func (i SourceVaultResponseArgs) ToSourceVaultResponseOutputWithContext(ctx context.Context) SourceVaultResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVaultResponseOutput)
}

func (i SourceVaultResponseArgs) ToSourceVaultResponsePtrOutput() SourceVaultResponsePtrOutput {
	return i.ToSourceVaultResponsePtrOutputWithContext(context.Background())
}

func (i SourceVaultResponseArgs) ToSourceVaultResponsePtrOutputWithContext(ctx context.Context) SourceVaultResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVaultResponseOutput).ToSourceVaultResponsePtrOutputWithContext(ctx)
}

// SourceVaultResponsePtrInput is an input type that accepts SourceVaultResponseArgs, SourceVaultResponsePtr and SourceVaultResponsePtrOutput values.
// You can construct a concrete instance of `SourceVaultResponsePtrInput` via:
//
//          SourceVaultResponseArgs{...}
//
//  or:
//
//          nil
type SourceVaultResponsePtrInput interface {
	pulumi.Input

	ToSourceVaultResponsePtrOutput() SourceVaultResponsePtrOutput
	ToSourceVaultResponsePtrOutputWithContext(context.Context) SourceVaultResponsePtrOutput
}

type sourceVaultResponsePtrType SourceVaultResponseArgs

func SourceVaultResponsePtr(v *SourceVaultResponseArgs) SourceVaultResponsePtrInput {
	return (*sourceVaultResponsePtrType)(v)
}

func (*sourceVaultResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceVaultResponse)(nil)).Elem()
}

func (i *sourceVaultResponsePtrType) ToSourceVaultResponsePtrOutput() SourceVaultResponsePtrOutput {
	return i.ToSourceVaultResponsePtrOutputWithContext(context.Background())
}

func (i *sourceVaultResponsePtrType) ToSourceVaultResponsePtrOutputWithContext(ctx context.Context) SourceVaultResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVaultResponsePtrOutput)
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVaultResponseOutput struct{ *pulumi.OutputState }

func (SourceVaultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceVaultResponse)(nil)).Elem()
}

func (o SourceVaultResponseOutput) ToSourceVaultResponseOutput() SourceVaultResponseOutput {
	return o
}

func (o SourceVaultResponseOutput) ToSourceVaultResponseOutputWithContext(ctx context.Context) SourceVaultResponseOutput {
	return o
}

func (o SourceVaultResponseOutput) ToSourceVaultResponsePtrOutput() SourceVaultResponsePtrOutput {
	return o.ToSourceVaultResponsePtrOutputWithContext(context.Background())
}

func (o SourceVaultResponseOutput) ToSourceVaultResponsePtrOutputWithContext(ctx context.Context) SourceVaultResponsePtrOutput {
	return o.ApplyT(func(v SourceVaultResponse) *SourceVaultResponse {
		return &v
	}).(SourceVaultResponsePtrOutput)
}

// Resource Id
func (o SourceVaultResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceVaultResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SourceVaultResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceVaultResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceVaultResponse)(nil)).Elem()
}

func (o SourceVaultResponsePtrOutput) ToSourceVaultResponsePtrOutput() SourceVaultResponsePtrOutput {
	return o
}

func (o SourceVaultResponsePtrOutput) ToSourceVaultResponsePtrOutputWithContext(ctx context.Context) SourceVaultResponsePtrOutput {
	return o
}

func (o SourceVaultResponsePtrOutput) Elem() SourceVaultResponseOutput {
	return o.ApplyT(func(v *SourceVaultResponse) SourceVaultResponse { return *v }).(SourceVaultResponseOutput)
}

// Resource Id
func (o SourceVaultResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceVaultResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CreationDataOutput{})
	pulumi.RegisterOutputType(CreationDataPtrOutput{})
	pulumi.RegisterOutputType(CreationDataResponseOutput{})
	pulumi.RegisterOutputType(CreationDataResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskTypeOutput{})
	pulumi.RegisterOutputType(DiskAccessTypeOutput{})
	pulumi.RegisterOutputType(DiskAccessPropertiesResponseOutput{})
	pulumi.RegisterOutputType(DiskAccessPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskEncryptionSetTypeOutput{})
	pulumi.RegisterOutputType(DiskPropertiesResponseOutput{})
	pulumi.RegisterOutputType(DiskPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskSkuOutput{})
	pulumi.RegisterOutputType(DiskSkuPtrOutput{})
	pulumi.RegisterOutputType(DiskSkuResponseOutput{})
	pulumi.RegisterOutputType(DiskSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionOutput{})
	pulumi.RegisterOutputType(EncryptionPtrOutput{})
	pulumi.RegisterOutputType(EncryptionResponseOutput{})
	pulumi.RegisterOutputType(EncryptionResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionSetIdentityOutput{})
	pulumi.RegisterOutputType(EncryptionSetIdentityPtrOutput{})
	pulumi.RegisterOutputType(EncryptionSetIdentityResponseOutput{})
	pulumi.RegisterOutputType(EncryptionSetIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionSetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(EncryptionSetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsCollectionOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsCollectionPtrOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsCollectionResponseOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsCollectionResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsElementOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsElementArrayOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsElementResponseOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsElementResponseArrayOutput{})
	pulumi.RegisterOutputType(ImageDiskReferenceOutput{})
	pulumi.RegisterOutputType(ImageDiskReferencePtrOutput{})
	pulumi.RegisterOutputType(ImageDiskReferenceResponseOutput{})
	pulumi.RegisterOutputType(ImageDiskReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultAndKeyReferenceOutput{})
	pulumi.RegisterOutputType(KeyVaultAndKeyReferencePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultAndKeyReferenceResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultAndKeyReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultAndKeyReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(KeyVaultAndSecretReferenceOutput{})
	pulumi.RegisterOutputType(KeyVaultAndSecretReferencePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultAndSecretReferenceResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultAndSecretReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointOutput{})
	pulumi.RegisterOutputType(PrivateEndpointPtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponsePtrOutput{})
	pulumi.RegisterOutputType(ShareInfoElementOutput{})
	pulumi.RegisterOutputType(ShareInfoElementResponseOutput{})
	pulumi.RegisterOutputType(ShareInfoElementResponseArrayOutput{})
	pulumi.RegisterOutputType(SnapshotTypeOutput{})
	pulumi.RegisterOutputType(SnapshotPropertiesResponseOutput{})
	pulumi.RegisterOutputType(SnapshotPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SnapshotSkuOutput{})
	pulumi.RegisterOutputType(SnapshotSkuPtrOutput{})
	pulumi.RegisterOutputType(SnapshotSkuResponseOutput{})
	pulumi.RegisterOutputType(SnapshotSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceVaultOutput{})
	pulumi.RegisterOutputType(SourceVaultPtrOutput{})
	pulumi.RegisterOutputType(SourceVaultResponseOutput{})
	pulumi.RegisterOutputType(SourceVaultResponsePtrOutput{})
}
