// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package latest

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Enables or disables a capability on the virtual machine or virtual machine scale set.
type AdditionalCapabilities struct {
	// The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled.
	UltraSSDEnabled *bool `pulumi:"ultraSSDEnabled"`
}

// AdditionalCapabilitiesInput is an input type that accepts AdditionalCapabilitiesArgs and AdditionalCapabilitiesOutput values.
// You can construct a concrete instance of `AdditionalCapabilitiesInput` via:
//
//          AdditionalCapabilitiesArgs{...}
type AdditionalCapabilitiesInput interface {
	pulumi.Input

	ToAdditionalCapabilitiesOutput() AdditionalCapabilitiesOutput
	ToAdditionalCapabilitiesOutputWithContext(context.Context) AdditionalCapabilitiesOutput
}

// Enables or disables a capability on the virtual machine or virtual machine scale set.
type AdditionalCapabilitiesArgs struct {
	// The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled.
	UltraSSDEnabled pulumi.BoolPtrInput `pulumi:"ultraSSDEnabled"`
}

func (AdditionalCapabilitiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalCapabilities)(nil)).Elem()
}

func (i AdditionalCapabilitiesArgs) ToAdditionalCapabilitiesOutput() AdditionalCapabilitiesOutput {
	return i.ToAdditionalCapabilitiesOutputWithContext(context.Background())
}

func (i AdditionalCapabilitiesArgs) ToAdditionalCapabilitiesOutputWithContext(ctx context.Context) AdditionalCapabilitiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdditionalCapabilitiesOutput)
}

func (i AdditionalCapabilitiesArgs) ToAdditionalCapabilitiesPtrOutput() AdditionalCapabilitiesPtrOutput {
	return i.ToAdditionalCapabilitiesPtrOutputWithContext(context.Background())
}

func (i AdditionalCapabilitiesArgs) ToAdditionalCapabilitiesPtrOutputWithContext(ctx context.Context) AdditionalCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdditionalCapabilitiesOutput).ToAdditionalCapabilitiesPtrOutputWithContext(ctx)
}

// AdditionalCapabilitiesPtrInput is an input type that accepts AdditionalCapabilitiesArgs, AdditionalCapabilitiesPtr and AdditionalCapabilitiesPtrOutput values.
// You can construct a concrete instance of `AdditionalCapabilitiesPtrInput` via:
//
//          AdditionalCapabilitiesArgs{...}
//
//  or:
//
//          nil
type AdditionalCapabilitiesPtrInput interface {
	pulumi.Input

	ToAdditionalCapabilitiesPtrOutput() AdditionalCapabilitiesPtrOutput
	ToAdditionalCapabilitiesPtrOutputWithContext(context.Context) AdditionalCapabilitiesPtrOutput
}

type additionalCapabilitiesPtrType AdditionalCapabilitiesArgs

func AdditionalCapabilitiesPtr(v *AdditionalCapabilitiesArgs) AdditionalCapabilitiesPtrInput {
	return (*additionalCapabilitiesPtrType)(v)
}

func (*additionalCapabilitiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AdditionalCapabilities)(nil)).Elem()
}

func (i *additionalCapabilitiesPtrType) ToAdditionalCapabilitiesPtrOutput() AdditionalCapabilitiesPtrOutput {
	return i.ToAdditionalCapabilitiesPtrOutputWithContext(context.Background())
}

func (i *additionalCapabilitiesPtrType) ToAdditionalCapabilitiesPtrOutputWithContext(ctx context.Context) AdditionalCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdditionalCapabilitiesPtrOutput)
}

// Enables or disables a capability on the virtual machine or virtual machine scale set.
type AdditionalCapabilitiesResponse struct {
	// The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled.
	UltraSSDEnabled *bool `pulumi:"ultraSSDEnabled"`
}

// Enables or disables a capability on the virtual machine or virtual machine scale set.
type AdditionalCapabilitiesResponseOutput struct{ *pulumi.OutputState }

func (AdditionalCapabilitiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalCapabilitiesResponse)(nil)).Elem()
}

func (o AdditionalCapabilitiesResponseOutput) ToAdditionalCapabilitiesResponseOutput() AdditionalCapabilitiesResponseOutput {
	return o
}

func (o AdditionalCapabilitiesResponseOutput) ToAdditionalCapabilitiesResponseOutputWithContext(ctx context.Context) AdditionalCapabilitiesResponseOutput {
	return o
}

func (o AdditionalCapabilitiesResponseOutput) ToAdditionalCapabilitiesResponsePtrOutput() AdditionalCapabilitiesResponsePtrOutput {
	return o.ToAdditionalCapabilitiesResponsePtrOutputWithContext(context.Background())
}

func (o AdditionalCapabilitiesResponseOutput) ToAdditionalCapabilitiesResponsePtrOutputWithContext(ctx context.Context) AdditionalCapabilitiesResponsePtrOutput {
	return o.ApplyT(func(v AdditionalCapabilitiesResponse) *AdditionalCapabilitiesResponse {
		return &v
	}).(AdditionalCapabilitiesResponsePtrOutput)
}

// The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled.
func (o AdditionalCapabilitiesResponseOutput) UltraSSDEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AdditionalCapabilitiesResponse) *bool { return v.UltraSSDEnabled }).(pulumi.BoolPtrOutput)
}

type AdditionalCapabilitiesResponsePtrOutput struct{ *pulumi.OutputState }

func (AdditionalCapabilitiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdditionalCapabilitiesResponse)(nil)).Elem()
}

func (o AdditionalCapabilitiesResponsePtrOutput) ToAdditionalCapabilitiesResponsePtrOutput() AdditionalCapabilitiesResponsePtrOutput {
	return o
}

func (o AdditionalCapabilitiesResponsePtrOutput) ToAdditionalCapabilitiesResponsePtrOutputWithContext(ctx context.Context) AdditionalCapabilitiesResponsePtrOutput {
	return o
}

func (o AdditionalCapabilitiesResponsePtrOutput) Elem() AdditionalCapabilitiesResponseOutput {
	return o.ApplyT(func(v *AdditionalCapabilitiesResponse) AdditionalCapabilitiesResponse { return *v }).(AdditionalCapabilitiesResponseOutput)
}

// The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled.
func (o AdditionalCapabilitiesResponsePtrOutput) UltraSSDEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdditionalCapabilitiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.UltraSSDEnabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by setting name, component name, and the pass in which the content is applied.
type AdditionalUnattendContent struct {
	// The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup.
	ComponentName *string `pulumi:"componentName"`
	// Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must include the root element for the setting or feature that is being inserted.
	Content *string `pulumi:"content"`
	// The pass name. Currently, the only allowable value is OobeSystem.
	PassName *string `pulumi:"passName"`
	// Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon.
	SettingName *string `pulumi:"settingName"`
}

// AdditionalUnattendContentInput is an input type that accepts AdditionalUnattendContentArgs and AdditionalUnattendContentOutput values.
// You can construct a concrete instance of `AdditionalUnattendContentInput` via:
//
//          AdditionalUnattendContentArgs{...}
type AdditionalUnattendContentInput interface {
	pulumi.Input

	ToAdditionalUnattendContentOutput() AdditionalUnattendContentOutput
	ToAdditionalUnattendContentOutputWithContext(context.Context) AdditionalUnattendContentOutput
}

// Specifies additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by setting name, component name, and the pass in which the content is applied.
type AdditionalUnattendContentArgs struct {
	// The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup.
	ComponentName pulumi.StringPtrInput `pulumi:"componentName"`
	// Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must include the root element for the setting or feature that is being inserted.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// The pass name. Currently, the only allowable value is OobeSystem.
	PassName pulumi.StringPtrInput `pulumi:"passName"`
	// Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon.
	SettingName pulumi.StringPtrInput `pulumi:"settingName"`
}

func (AdditionalUnattendContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalUnattendContent)(nil)).Elem()
}

func (i AdditionalUnattendContentArgs) ToAdditionalUnattendContentOutput() AdditionalUnattendContentOutput {
	return i.ToAdditionalUnattendContentOutputWithContext(context.Background())
}

func (i AdditionalUnattendContentArgs) ToAdditionalUnattendContentOutputWithContext(ctx context.Context) AdditionalUnattendContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdditionalUnattendContentOutput)
}

// AdditionalUnattendContentArrayInput is an input type that accepts AdditionalUnattendContentArray and AdditionalUnattendContentArrayOutput values.
// You can construct a concrete instance of `AdditionalUnattendContentArrayInput` via:
//
//          AdditionalUnattendContentArray{ AdditionalUnattendContentArgs{...} }
type AdditionalUnattendContentArrayInput interface {
	pulumi.Input

	ToAdditionalUnattendContentArrayOutput() AdditionalUnattendContentArrayOutput
	ToAdditionalUnattendContentArrayOutputWithContext(context.Context) AdditionalUnattendContentArrayOutput
}

type AdditionalUnattendContentArray []AdditionalUnattendContentInput

func (AdditionalUnattendContentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdditionalUnattendContent)(nil)).Elem()
}

func (i AdditionalUnattendContentArray) ToAdditionalUnattendContentArrayOutput() AdditionalUnattendContentArrayOutput {
	return i.ToAdditionalUnattendContentArrayOutputWithContext(context.Background())
}

func (i AdditionalUnattendContentArray) ToAdditionalUnattendContentArrayOutputWithContext(ctx context.Context) AdditionalUnattendContentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdditionalUnattendContentArrayOutput)
}

// Specifies additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by setting name, component name, and the pass in which the content is applied.
type AdditionalUnattendContentResponse struct {
	// The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup.
	ComponentName *string `pulumi:"componentName"`
	// Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must include the root element for the setting or feature that is being inserted.
	Content *string `pulumi:"content"`
	// The pass name. Currently, the only allowable value is OobeSystem.
	PassName *string `pulumi:"passName"`
	// Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon.
	SettingName *string `pulumi:"settingName"`
}

// Specifies additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by setting name, component name, and the pass in which the content is applied.
type AdditionalUnattendContentResponseOutput struct{ *pulumi.OutputState }

func (AdditionalUnattendContentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalUnattendContentResponse)(nil)).Elem()
}

func (o AdditionalUnattendContentResponseOutput) ToAdditionalUnattendContentResponseOutput() AdditionalUnattendContentResponseOutput {
	return o
}

func (o AdditionalUnattendContentResponseOutput) ToAdditionalUnattendContentResponseOutputWithContext(ctx context.Context) AdditionalUnattendContentResponseOutput {
	return o
}

// The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup.
func (o AdditionalUnattendContentResponseOutput) ComponentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdditionalUnattendContentResponse) *string { return v.ComponentName }).(pulumi.StringPtrOutput)
}

// Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must include the root element for the setting or feature that is being inserted.
func (o AdditionalUnattendContentResponseOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdditionalUnattendContentResponse) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// The pass name. Currently, the only allowable value is OobeSystem.
func (o AdditionalUnattendContentResponseOutput) PassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdditionalUnattendContentResponse) *string { return v.PassName }).(pulumi.StringPtrOutput)
}

// Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon.
func (o AdditionalUnattendContentResponseOutput) SettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdditionalUnattendContentResponse) *string { return v.SettingName }).(pulumi.StringPtrOutput)
}

type AdditionalUnattendContentResponseArrayOutput struct{ *pulumi.OutputState }

func (AdditionalUnattendContentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdditionalUnattendContentResponse)(nil)).Elem()
}

func (o AdditionalUnattendContentResponseArrayOutput) ToAdditionalUnattendContentResponseArrayOutput() AdditionalUnattendContentResponseArrayOutput {
	return o
}

func (o AdditionalUnattendContentResponseArrayOutput) ToAdditionalUnattendContentResponseArrayOutputWithContext(ctx context.Context) AdditionalUnattendContentResponseArrayOutput {
	return o
}

func (o AdditionalUnattendContentResponseArrayOutput) Index(i pulumi.IntInput) AdditionalUnattendContentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AdditionalUnattendContentResponse {
		return vs[0].([]AdditionalUnattendContentResponse)[vs[1].(int)]
	}).(AdditionalUnattendContentResponseOutput)
}

// The API entity reference.
type ApiEntityReference struct {
	// The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/...
	Id *string `pulumi:"id"`
}

// ApiEntityReferenceInput is an input type that accepts ApiEntityReferenceArgs and ApiEntityReferenceOutput values.
// You can construct a concrete instance of `ApiEntityReferenceInput` via:
//
//          ApiEntityReferenceArgs{...}
type ApiEntityReferenceInput interface {
	pulumi.Input

	ToApiEntityReferenceOutput() ApiEntityReferenceOutput
	ToApiEntityReferenceOutputWithContext(context.Context) ApiEntityReferenceOutput
}

// The API entity reference.
type ApiEntityReferenceArgs struct {
	// The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/...
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (ApiEntityReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiEntityReference)(nil)).Elem()
}

func (i ApiEntityReferenceArgs) ToApiEntityReferenceOutput() ApiEntityReferenceOutput {
	return i.ToApiEntityReferenceOutputWithContext(context.Background())
}

func (i ApiEntityReferenceArgs) ToApiEntityReferenceOutputWithContext(ctx context.Context) ApiEntityReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiEntityReferenceOutput)
}

func (i ApiEntityReferenceArgs) ToApiEntityReferencePtrOutput() ApiEntityReferencePtrOutput {
	return i.ToApiEntityReferencePtrOutputWithContext(context.Background())
}

func (i ApiEntityReferenceArgs) ToApiEntityReferencePtrOutputWithContext(ctx context.Context) ApiEntityReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiEntityReferenceOutput).ToApiEntityReferencePtrOutputWithContext(ctx)
}

// ApiEntityReferencePtrInput is an input type that accepts ApiEntityReferenceArgs, ApiEntityReferencePtr and ApiEntityReferencePtrOutput values.
// You can construct a concrete instance of `ApiEntityReferencePtrInput` via:
//
//          ApiEntityReferenceArgs{...}
//
//  or:
//
//          nil
type ApiEntityReferencePtrInput interface {
	pulumi.Input

	ToApiEntityReferencePtrOutput() ApiEntityReferencePtrOutput
	ToApiEntityReferencePtrOutputWithContext(context.Context) ApiEntityReferencePtrOutput
}

type apiEntityReferencePtrType ApiEntityReferenceArgs

func ApiEntityReferencePtr(v *ApiEntityReferenceArgs) ApiEntityReferencePtrInput {
	return (*apiEntityReferencePtrType)(v)
}

func (*apiEntityReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiEntityReference)(nil)).Elem()
}

func (i *apiEntityReferencePtrType) ToApiEntityReferencePtrOutput() ApiEntityReferencePtrOutput {
	return i.ToApiEntityReferencePtrOutputWithContext(context.Background())
}

func (i *apiEntityReferencePtrType) ToApiEntityReferencePtrOutputWithContext(ctx context.Context) ApiEntityReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiEntityReferencePtrOutput)
}

// The API entity reference.
type ApiEntityReferenceResponse struct {
	// The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/...
	Id *string `pulumi:"id"`
}

// The API entity reference.
type ApiEntityReferenceResponseOutput struct{ *pulumi.OutputState }

func (ApiEntityReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiEntityReferenceResponse)(nil)).Elem()
}

func (o ApiEntityReferenceResponseOutput) ToApiEntityReferenceResponseOutput() ApiEntityReferenceResponseOutput {
	return o
}

func (o ApiEntityReferenceResponseOutput) ToApiEntityReferenceResponseOutputWithContext(ctx context.Context) ApiEntityReferenceResponseOutput {
	return o
}

func (o ApiEntityReferenceResponseOutput) ToApiEntityReferenceResponsePtrOutput() ApiEntityReferenceResponsePtrOutput {
	return o.ToApiEntityReferenceResponsePtrOutputWithContext(context.Background())
}

func (o ApiEntityReferenceResponseOutput) ToApiEntityReferenceResponsePtrOutputWithContext(ctx context.Context) ApiEntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v ApiEntityReferenceResponse) *ApiEntityReferenceResponse {
		return &v
	}).(ApiEntityReferenceResponsePtrOutput)
}

// The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/...
func (o ApiEntityReferenceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiEntityReferenceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type ApiEntityReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (ApiEntityReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiEntityReferenceResponse)(nil)).Elem()
}

func (o ApiEntityReferenceResponsePtrOutput) ToApiEntityReferenceResponsePtrOutput() ApiEntityReferenceResponsePtrOutput {
	return o
}

func (o ApiEntityReferenceResponsePtrOutput) ToApiEntityReferenceResponsePtrOutputWithContext(ctx context.Context) ApiEntityReferenceResponsePtrOutput {
	return o
}

func (o ApiEntityReferenceResponsePtrOutput) Elem() ApiEntityReferenceResponseOutput {
	return o.ApplyT(func(v *ApiEntityReferenceResponse) ApiEntityReferenceResponse { return *v }).(ApiEntityReferenceResponseOutput)
}

// The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/...
func (o ApiEntityReferenceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiEntityReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Api error base.
type ApiErrorBaseResponse struct {
	// The error code.
	Code *string `pulumi:"code"`
	// The error message.
	Message *string `pulumi:"message"`
	// The target of the particular error.
	Target *string `pulumi:"target"`
}

// Api error base.
type ApiErrorBaseResponseOutput struct{ *pulumi.OutputState }

func (ApiErrorBaseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiErrorBaseResponse)(nil)).Elem()
}

func (o ApiErrorBaseResponseOutput) ToApiErrorBaseResponseOutput() ApiErrorBaseResponseOutput {
	return o
}

func (o ApiErrorBaseResponseOutput) ToApiErrorBaseResponseOutputWithContext(ctx context.Context) ApiErrorBaseResponseOutput {
	return o
}

// The error code.
func (o ApiErrorBaseResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiErrorBaseResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// The error message.
func (o ApiErrorBaseResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiErrorBaseResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The target of the particular error.
func (o ApiErrorBaseResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiErrorBaseResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type ApiErrorBaseResponseArrayOutput struct{ *pulumi.OutputState }

func (ApiErrorBaseResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiErrorBaseResponse)(nil)).Elem()
}

func (o ApiErrorBaseResponseArrayOutput) ToApiErrorBaseResponseArrayOutput() ApiErrorBaseResponseArrayOutput {
	return o
}

func (o ApiErrorBaseResponseArrayOutput) ToApiErrorBaseResponseArrayOutputWithContext(ctx context.Context) ApiErrorBaseResponseArrayOutput {
	return o
}

func (o ApiErrorBaseResponseArrayOutput) Index(i pulumi.IntInput) ApiErrorBaseResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiErrorBaseResponse {
		return vs[0].([]ApiErrorBaseResponse)[vs[1].(int)]
	}).(ApiErrorBaseResponseOutput)
}

// Api error.
type ApiErrorResponse struct {
	// The error code.
	Code *string `pulumi:"code"`
	// The Api error details
	Details []ApiErrorBaseResponse `pulumi:"details"`
	// The Api inner error
	Innererror *InnerErrorResponse `pulumi:"innererror"`
	// The error message.
	Message *string `pulumi:"message"`
	// The target of the particular error.
	Target *string `pulumi:"target"`
}

// Api error.
type ApiErrorResponseOutput struct{ *pulumi.OutputState }

func (ApiErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiErrorResponse)(nil)).Elem()
}

func (o ApiErrorResponseOutput) ToApiErrorResponseOutput() ApiErrorResponseOutput {
	return o
}

func (o ApiErrorResponseOutput) ToApiErrorResponseOutputWithContext(ctx context.Context) ApiErrorResponseOutput {
	return o
}

func (o ApiErrorResponseOutput) ToApiErrorResponsePtrOutput() ApiErrorResponsePtrOutput {
	return o.ToApiErrorResponsePtrOutputWithContext(context.Background())
}

func (o ApiErrorResponseOutput) ToApiErrorResponsePtrOutputWithContext(ctx context.Context) ApiErrorResponsePtrOutput {
	return o.ApplyT(func(v ApiErrorResponse) *ApiErrorResponse {
		return &v
	}).(ApiErrorResponsePtrOutput)
}

// The error code.
func (o ApiErrorResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiErrorResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// The Api error details
func (o ApiErrorResponseOutput) Details() ApiErrorBaseResponseArrayOutput {
	return o.ApplyT(func(v ApiErrorResponse) []ApiErrorBaseResponse { return v.Details }).(ApiErrorBaseResponseArrayOutput)
}

// The Api inner error
func (o ApiErrorResponseOutput) Innererror() InnerErrorResponsePtrOutput {
	return o.ApplyT(func(v ApiErrorResponse) *InnerErrorResponse { return v.Innererror }).(InnerErrorResponsePtrOutput)
}

// The error message.
func (o ApiErrorResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiErrorResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The target of the particular error.
func (o ApiErrorResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiErrorResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type ApiErrorResponsePtrOutput struct{ *pulumi.OutputState }

func (ApiErrorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiErrorResponse)(nil)).Elem()
}

func (o ApiErrorResponsePtrOutput) ToApiErrorResponsePtrOutput() ApiErrorResponsePtrOutput {
	return o
}

func (o ApiErrorResponsePtrOutput) ToApiErrorResponsePtrOutputWithContext(ctx context.Context) ApiErrorResponsePtrOutput {
	return o
}

func (o ApiErrorResponsePtrOutput) Elem() ApiErrorResponseOutput {
	return o.ApplyT(func(v *ApiErrorResponse) ApiErrorResponse { return *v }).(ApiErrorResponseOutput)
}

// The error code.
func (o ApiErrorResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiErrorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.StringPtrOutput)
}

// The Api error details
func (o ApiErrorResponsePtrOutput) Details() ApiErrorBaseResponseArrayOutput {
	return o.ApplyT(func(v *ApiErrorResponse) []ApiErrorBaseResponse {
		if v == nil {
			return nil
		}
		return v.Details
	}).(ApiErrorBaseResponseArrayOutput)
}

// The Api inner error
func (o ApiErrorResponsePtrOutput) Innererror() InnerErrorResponsePtrOutput {
	return o.ApplyT(func(v *ApiErrorResponse) *InnerErrorResponse {
		if v == nil {
			return nil
		}
		return v.Innererror
	}).(InnerErrorResponsePtrOutput)
}

// The error message.
func (o ApiErrorResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiErrorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// The target of the particular error.
func (o ApiErrorResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiErrorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Information about the guest configuration assignment.
type AssignmentInfoResponse struct {
	// Information about the configuration.
	Configuration *ConfigurationInfoResponse `pulumi:"configuration"`
	// Name of the guest configuration assignment.
	Name string `pulumi:"name"`
}

// Information about the guest configuration assignment.
type AssignmentInfoResponseOutput struct{ *pulumi.OutputState }

func (AssignmentInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentInfoResponse)(nil)).Elem()
}

func (o AssignmentInfoResponseOutput) ToAssignmentInfoResponseOutput() AssignmentInfoResponseOutput {
	return o
}

func (o AssignmentInfoResponseOutput) ToAssignmentInfoResponseOutputWithContext(ctx context.Context) AssignmentInfoResponseOutput {
	return o
}

func (o AssignmentInfoResponseOutput) ToAssignmentInfoResponsePtrOutput() AssignmentInfoResponsePtrOutput {
	return o.ToAssignmentInfoResponsePtrOutputWithContext(context.Background())
}

func (o AssignmentInfoResponseOutput) ToAssignmentInfoResponsePtrOutputWithContext(ctx context.Context) AssignmentInfoResponsePtrOutput {
	return o.ApplyT(func(v AssignmentInfoResponse) *AssignmentInfoResponse {
		return &v
	}).(AssignmentInfoResponsePtrOutput)
}

// Information about the configuration.
func (o AssignmentInfoResponseOutput) Configuration() ConfigurationInfoResponsePtrOutput {
	return o.ApplyT(func(v AssignmentInfoResponse) *ConfigurationInfoResponse { return v.Configuration }).(ConfigurationInfoResponsePtrOutput)
}

// Name of the guest configuration assignment.
func (o AssignmentInfoResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentInfoResponse) string { return v.Name }).(pulumi.StringOutput)
}

type AssignmentInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (AssignmentInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssignmentInfoResponse)(nil)).Elem()
}

func (o AssignmentInfoResponsePtrOutput) ToAssignmentInfoResponsePtrOutput() AssignmentInfoResponsePtrOutput {
	return o
}

func (o AssignmentInfoResponsePtrOutput) ToAssignmentInfoResponsePtrOutputWithContext(ctx context.Context) AssignmentInfoResponsePtrOutput {
	return o
}

func (o AssignmentInfoResponsePtrOutput) Elem() AssignmentInfoResponseOutput {
	return o.ApplyT(func(v *AssignmentInfoResponse) AssignmentInfoResponse { return *v }).(AssignmentInfoResponseOutput)
}

// Information about the configuration.
func (o AssignmentInfoResponsePtrOutput) Configuration() ConfigurationInfoResponsePtrOutput {
	return o.ApplyT(func(v *AssignmentInfoResponse) *ConfigurationInfoResponse {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(ConfigurationInfoResponsePtrOutput)
}

// Name of the guest configuration assignment.
func (o AssignmentInfoResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignmentInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Reason and code for the compliance of the guest configuration assignment resource.
type AssignmentReportResourceComplianceReasonResponse struct {
	// Code for the compliance of the guest configuration assignment resource.
	Code string `pulumi:"code"`
	// Reason for the compliance of the guest configuration assignment resource.
	Phrase string `pulumi:"phrase"`
}

// Reason and code for the compliance of the guest configuration assignment resource.
type AssignmentReportResourceComplianceReasonResponseOutput struct{ *pulumi.OutputState }

func (AssignmentReportResourceComplianceReasonResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentReportResourceComplianceReasonResponse)(nil)).Elem()
}

func (o AssignmentReportResourceComplianceReasonResponseOutput) ToAssignmentReportResourceComplianceReasonResponseOutput() AssignmentReportResourceComplianceReasonResponseOutput {
	return o
}

func (o AssignmentReportResourceComplianceReasonResponseOutput) ToAssignmentReportResourceComplianceReasonResponseOutputWithContext(ctx context.Context) AssignmentReportResourceComplianceReasonResponseOutput {
	return o
}

// Code for the compliance of the guest configuration assignment resource.
func (o AssignmentReportResourceComplianceReasonResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentReportResourceComplianceReasonResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Reason for the compliance of the guest configuration assignment resource.
func (o AssignmentReportResourceComplianceReasonResponseOutput) Phrase() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentReportResourceComplianceReasonResponse) string { return v.Phrase }).(pulumi.StringOutput)
}

type AssignmentReportResourceComplianceReasonResponseArrayOutput struct{ *pulumi.OutputState }

func (AssignmentReportResourceComplianceReasonResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssignmentReportResourceComplianceReasonResponse)(nil)).Elem()
}

func (o AssignmentReportResourceComplianceReasonResponseArrayOutput) ToAssignmentReportResourceComplianceReasonResponseArrayOutput() AssignmentReportResourceComplianceReasonResponseArrayOutput {
	return o
}

func (o AssignmentReportResourceComplianceReasonResponseArrayOutput) ToAssignmentReportResourceComplianceReasonResponseArrayOutputWithContext(ctx context.Context) AssignmentReportResourceComplianceReasonResponseArrayOutput {
	return o
}

func (o AssignmentReportResourceComplianceReasonResponseArrayOutput) Index(i pulumi.IntInput) AssignmentReportResourceComplianceReasonResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssignmentReportResourceComplianceReasonResponse {
		return vs[0].([]AssignmentReportResourceComplianceReasonResponse)[vs[1].(int)]
	}).(AssignmentReportResourceComplianceReasonResponseOutput)
}

// The guest configuration assignment resource.
type AssignmentReportResourceResponse struct {
	// A value indicating compliance status of the machine for the assigned guest configuration.
	ComplianceStatus string `pulumi:"complianceStatus"`
	// Properties of a guest configuration assignment resource.
	Properties map[string]interface{} `pulumi:"properties"`
	// Compliance reason and reason code for a resource.
	Reasons []AssignmentReportResourceComplianceReasonResponse `pulumi:"reasons"`
	// Name of the guest configuration assignment resource setting.
	ResourceId string `pulumi:"resourceId"`
}

// The guest configuration assignment resource.
type AssignmentReportResourceResponseOutput struct{ *pulumi.OutputState }

func (AssignmentReportResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentReportResourceResponse)(nil)).Elem()
}

func (o AssignmentReportResourceResponseOutput) ToAssignmentReportResourceResponseOutput() AssignmentReportResourceResponseOutput {
	return o
}

func (o AssignmentReportResourceResponseOutput) ToAssignmentReportResourceResponseOutputWithContext(ctx context.Context) AssignmentReportResourceResponseOutput {
	return o
}

// A value indicating compliance status of the machine for the assigned guest configuration.
func (o AssignmentReportResourceResponseOutput) ComplianceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentReportResourceResponse) string { return v.ComplianceStatus }).(pulumi.StringOutput)
}

// Properties of a guest configuration assignment resource.
func (o AssignmentReportResourceResponseOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v AssignmentReportResourceResponse) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

// Compliance reason and reason code for a resource.
func (o AssignmentReportResourceResponseOutput) Reasons() AssignmentReportResourceComplianceReasonResponseArrayOutput {
	return o.ApplyT(func(v AssignmentReportResourceResponse) []AssignmentReportResourceComplianceReasonResponse {
		return v.Reasons
	}).(AssignmentReportResourceComplianceReasonResponseArrayOutput)
}

// Name of the guest configuration assignment resource setting.
func (o AssignmentReportResourceResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentReportResourceResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

type AssignmentReportResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (AssignmentReportResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssignmentReportResourceResponse)(nil)).Elem()
}

func (o AssignmentReportResourceResponseArrayOutput) ToAssignmentReportResourceResponseArrayOutput() AssignmentReportResourceResponseArrayOutput {
	return o
}

func (o AssignmentReportResourceResponseArrayOutput) ToAssignmentReportResourceResponseArrayOutputWithContext(ctx context.Context) AssignmentReportResourceResponseArrayOutput {
	return o
}

func (o AssignmentReportResourceResponseArrayOutput) Index(i pulumi.IntInput) AssignmentReportResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssignmentReportResourceResponse {
		return vs[0].([]AssignmentReportResourceResponse)[vs[1].(int)]
	}).(AssignmentReportResourceResponseOutput)
}

type AssignmentReportResponse struct {
	// Configuration details of the guest configuration assignment.
	Assignment *AssignmentInfoResponse `pulumi:"assignment"`
	// A value indicating compliance status of the machine for the assigned guest configuration.
	ComplianceStatus string `pulumi:"complianceStatus"`
	// End date and time of the guest configuration assignment compliance status check.
	EndTime string `pulumi:"endTime"`
	// ARM resource id of the report for the guest configuration assignment.
	Id string `pulumi:"id"`
	// Type of report, Consistency or Initial
	OperationType string `pulumi:"operationType"`
	// GUID that identifies the guest configuration assignment report under a subscription, resource group.
	ReportId string `pulumi:"reportId"`
	// The list of resources for which guest configuration assignment compliance is checked.
	Resources []AssignmentReportResourceResponse `pulumi:"resources"`
	// Start date and time of the guest configuration assignment compliance status check.
	StartTime string `pulumi:"startTime"`
	// Information about the VM.
	Vm *VMInfoResponse `pulumi:"vm"`
}

type AssignmentReportResponseOutput struct{ *pulumi.OutputState }

func (AssignmentReportResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentReportResponse)(nil)).Elem()
}

func (o AssignmentReportResponseOutput) ToAssignmentReportResponseOutput() AssignmentReportResponseOutput {
	return o
}

func (o AssignmentReportResponseOutput) ToAssignmentReportResponseOutputWithContext(ctx context.Context) AssignmentReportResponseOutput {
	return o
}

func (o AssignmentReportResponseOutput) ToAssignmentReportResponsePtrOutput() AssignmentReportResponsePtrOutput {
	return o.ToAssignmentReportResponsePtrOutputWithContext(context.Background())
}

func (o AssignmentReportResponseOutput) ToAssignmentReportResponsePtrOutputWithContext(ctx context.Context) AssignmentReportResponsePtrOutput {
	return o.ApplyT(func(v AssignmentReportResponse) *AssignmentReportResponse {
		return &v
	}).(AssignmentReportResponsePtrOutput)
}

// Configuration details of the guest configuration assignment.
func (o AssignmentReportResponseOutput) Assignment() AssignmentInfoResponsePtrOutput {
	return o.ApplyT(func(v AssignmentReportResponse) *AssignmentInfoResponse { return v.Assignment }).(AssignmentInfoResponsePtrOutput)
}

// A value indicating compliance status of the machine for the assigned guest configuration.
func (o AssignmentReportResponseOutput) ComplianceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentReportResponse) string { return v.ComplianceStatus }).(pulumi.StringOutput)
}

// End date and time of the guest configuration assignment compliance status check.
func (o AssignmentReportResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentReportResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// ARM resource id of the report for the guest configuration assignment.
func (o AssignmentReportResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentReportResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Type of report, Consistency or Initial
func (o AssignmentReportResponseOutput) OperationType() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentReportResponse) string { return v.OperationType }).(pulumi.StringOutput)
}

// GUID that identifies the guest configuration assignment report under a subscription, resource group.
func (o AssignmentReportResponseOutput) ReportId() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentReportResponse) string { return v.ReportId }).(pulumi.StringOutput)
}

// The list of resources for which guest configuration assignment compliance is checked.
func (o AssignmentReportResponseOutput) Resources() AssignmentReportResourceResponseArrayOutput {
	return o.ApplyT(func(v AssignmentReportResponse) []AssignmentReportResourceResponse { return v.Resources }).(AssignmentReportResourceResponseArrayOutput)
}

// Start date and time of the guest configuration assignment compliance status check.
func (o AssignmentReportResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v AssignmentReportResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Information about the VM.
func (o AssignmentReportResponseOutput) Vm() VMInfoResponsePtrOutput {
	return o.ApplyT(func(v AssignmentReportResponse) *VMInfoResponse { return v.Vm }).(VMInfoResponsePtrOutput)
}

type AssignmentReportResponsePtrOutput struct{ *pulumi.OutputState }

func (AssignmentReportResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssignmentReportResponse)(nil)).Elem()
}

func (o AssignmentReportResponsePtrOutput) ToAssignmentReportResponsePtrOutput() AssignmentReportResponsePtrOutput {
	return o
}

func (o AssignmentReportResponsePtrOutput) ToAssignmentReportResponsePtrOutputWithContext(ctx context.Context) AssignmentReportResponsePtrOutput {
	return o
}

func (o AssignmentReportResponsePtrOutput) Elem() AssignmentReportResponseOutput {
	return o.ApplyT(func(v *AssignmentReportResponse) AssignmentReportResponse { return *v }).(AssignmentReportResponseOutput)
}

// Configuration details of the guest configuration assignment.
func (o AssignmentReportResponsePtrOutput) Assignment() AssignmentInfoResponsePtrOutput {
	return o.ApplyT(func(v *AssignmentReportResponse) *AssignmentInfoResponse {
		if v == nil {
			return nil
		}
		return v.Assignment
	}).(AssignmentInfoResponsePtrOutput)
}

// A value indicating compliance status of the machine for the assigned guest configuration.
func (o AssignmentReportResponsePtrOutput) ComplianceStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignmentReportResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ComplianceStatus
	}).(pulumi.StringPtrOutput)
}

// End date and time of the guest configuration assignment compliance status check.
func (o AssignmentReportResponsePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignmentReportResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndTime
	}).(pulumi.StringPtrOutput)
}

// ARM resource id of the report for the guest configuration assignment.
func (o AssignmentReportResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignmentReportResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Type of report, Consistency or Initial
func (o AssignmentReportResponsePtrOutput) OperationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignmentReportResponse) *string {
		if v == nil {
			return nil
		}
		return &v.OperationType
	}).(pulumi.StringPtrOutput)
}

// GUID that identifies the guest configuration assignment report under a subscription, resource group.
func (o AssignmentReportResponsePtrOutput) ReportId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignmentReportResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReportId
	}).(pulumi.StringPtrOutput)
}

// The list of resources for which guest configuration assignment compliance is checked.
func (o AssignmentReportResponsePtrOutput) Resources() AssignmentReportResourceResponseArrayOutput {
	return o.ApplyT(func(v *AssignmentReportResponse) []AssignmentReportResourceResponse {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(AssignmentReportResourceResponseArrayOutput)
}

// Start date and time of the guest configuration assignment compliance status check.
func (o AssignmentReportResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignmentReportResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Information about the VM.
func (o AssignmentReportResponsePtrOutput) Vm() VMInfoResponsePtrOutput {
	return o.ApplyT(func(v *AssignmentReportResponse) *VMInfoResponse {
		if v == nil {
			return nil
		}
		return v.Vm
	}).(VMInfoResponsePtrOutput)
}

// The configuration parameters used for performing automatic OS upgrade.
type AutomaticOSUpgradePolicy struct {
	// Whether OS image rollback feature should be disabled. Default value is false.
	DisableAutomaticRollback *bool `pulumi:"disableAutomaticRollback"`
	// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes available. Default value is false. <br><br> If this is set to true for Windows based scale sets, [enableAutomaticUpdates](https://docs.microsoft.com/dotnet/api/microsoft.azure.management.compute.models.windowsconfiguration.enableautomaticupdates?view=azure-dotnet) is automatically set to false and cannot be set to true.
	EnableAutomaticOSUpgrade *bool `pulumi:"enableAutomaticOSUpgrade"`
}

// AutomaticOSUpgradePolicyInput is an input type that accepts AutomaticOSUpgradePolicyArgs and AutomaticOSUpgradePolicyOutput values.
// You can construct a concrete instance of `AutomaticOSUpgradePolicyInput` via:
//
//          AutomaticOSUpgradePolicyArgs{...}
type AutomaticOSUpgradePolicyInput interface {
	pulumi.Input

	ToAutomaticOSUpgradePolicyOutput() AutomaticOSUpgradePolicyOutput
	ToAutomaticOSUpgradePolicyOutputWithContext(context.Context) AutomaticOSUpgradePolicyOutput
}

// The configuration parameters used for performing automatic OS upgrade.
type AutomaticOSUpgradePolicyArgs struct {
	// Whether OS image rollback feature should be disabled. Default value is false.
	DisableAutomaticRollback pulumi.BoolPtrInput `pulumi:"disableAutomaticRollback"`
	// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes available. Default value is false. <br><br> If this is set to true for Windows based scale sets, [enableAutomaticUpdates](https://docs.microsoft.com/dotnet/api/microsoft.azure.management.compute.models.windowsconfiguration.enableautomaticupdates?view=azure-dotnet) is automatically set to false and cannot be set to true.
	EnableAutomaticOSUpgrade pulumi.BoolPtrInput `pulumi:"enableAutomaticOSUpgrade"`
}

func (AutomaticOSUpgradePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomaticOSUpgradePolicy)(nil)).Elem()
}

func (i AutomaticOSUpgradePolicyArgs) ToAutomaticOSUpgradePolicyOutput() AutomaticOSUpgradePolicyOutput {
	return i.ToAutomaticOSUpgradePolicyOutputWithContext(context.Background())
}

func (i AutomaticOSUpgradePolicyArgs) ToAutomaticOSUpgradePolicyOutputWithContext(ctx context.Context) AutomaticOSUpgradePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticOSUpgradePolicyOutput)
}

func (i AutomaticOSUpgradePolicyArgs) ToAutomaticOSUpgradePolicyPtrOutput() AutomaticOSUpgradePolicyPtrOutput {
	return i.ToAutomaticOSUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i AutomaticOSUpgradePolicyArgs) ToAutomaticOSUpgradePolicyPtrOutputWithContext(ctx context.Context) AutomaticOSUpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticOSUpgradePolicyOutput).ToAutomaticOSUpgradePolicyPtrOutputWithContext(ctx)
}

// AutomaticOSUpgradePolicyPtrInput is an input type that accepts AutomaticOSUpgradePolicyArgs, AutomaticOSUpgradePolicyPtr and AutomaticOSUpgradePolicyPtrOutput values.
// You can construct a concrete instance of `AutomaticOSUpgradePolicyPtrInput` via:
//
//          AutomaticOSUpgradePolicyArgs{...}
//
//  or:
//
//          nil
type AutomaticOSUpgradePolicyPtrInput interface {
	pulumi.Input

	ToAutomaticOSUpgradePolicyPtrOutput() AutomaticOSUpgradePolicyPtrOutput
	ToAutomaticOSUpgradePolicyPtrOutputWithContext(context.Context) AutomaticOSUpgradePolicyPtrOutput
}

type automaticOSUpgradePolicyPtrType AutomaticOSUpgradePolicyArgs

func AutomaticOSUpgradePolicyPtr(v *AutomaticOSUpgradePolicyArgs) AutomaticOSUpgradePolicyPtrInput {
	return (*automaticOSUpgradePolicyPtrType)(v)
}

func (*automaticOSUpgradePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomaticOSUpgradePolicy)(nil)).Elem()
}

func (i *automaticOSUpgradePolicyPtrType) ToAutomaticOSUpgradePolicyPtrOutput() AutomaticOSUpgradePolicyPtrOutput {
	return i.ToAutomaticOSUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i *automaticOSUpgradePolicyPtrType) ToAutomaticOSUpgradePolicyPtrOutputWithContext(ctx context.Context) AutomaticOSUpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticOSUpgradePolicyPtrOutput)
}

// The configuration parameters used for performing automatic OS upgrade.
type AutomaticOSUpgradePolicyResponse struct {
	// Whether OS image rollback feature should be disabled. Default value is false.
	DisableAutomaticRollback *bool `pulumi:"disableAutomaticRollback"`
	// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes available. Default value is false. <br><br> If this is set to true for Windows based scale sets, [enableAutomaticUpdates](https://docs.microsoft.com/dotnet/api/microsoft.azure.management.compute.models.windowsconfiguration.enableautomaticupdates?view=azure-dotnet) is automatically set to false and cannot be set to true.
	EnableAutomaticOSUpgrade *bool `pulumi:"enableAutomaticOSUpgrade"`
}

// The configuration parameters used for performing automatic OS upgrade.
type AutomaticOSUpgradePolicyResponseOutput struct{ *pulumi.OutputState }

func (AutomaticOSUpgradePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomaticOSUpgradePolicyResponse)(nil)).Elem()
}

func (o AutomaticOSUpgradePolicyResponseOutput) ToAutomaticOSUpgradePolicyResponseOutput() AutomaticOSUpgradePolicyResponseOutput {
	return o
}

func (o AutomaticOSUpgradePolicyResponseOutput) ToAutomaticOSUpgradePolicyResponseOutputWithContext(ctx context.Context) AutomaticOSUpgradePolicyResponseOutput {
	return o
}

func (o AutomaticOSUpgradePolicyResponseOutput) ToAutomaticOSUpgradePolicyResponsePtrOutput() AutomaticOSUpgradePolicyResponsePtrOutput {
	return o.ToAutomaticOSUpgradePolicyResponsePtrOutputWithContext(context.Background())
}

func (o AutomaticOSUpgradePolicyResponseOutput) ToAutomaticOSUpgradePolicyResponsePtrOutputWithContext(ctx context.Context) AutomaticOSUpgradePolicyResponsePtrOutput {
	return o.ApplyT(func(v AutomaticOSUpgradePolicyResponse) *AutomaticOSUpgradePolicyResponse {
		return &v
	}).(AutomaticOSUpgradePolicyResponsePtrOutput)
}

// Whether OS image rollback feature should be disabled. Default value is false.
func (o AutomaticOSUpgradePolicyResponseOutput) DisableAutomaticRollback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutomaticOSUpgradePolicyResponse) *bool { return v.DisableAutomaticRollback }).(pulumi.BoolPtrOutput)
}

// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes available. Default value is false. <br><br> If this is set to true for Windows based scale sets, [enableAutomaticUpdates](https://docs.microsoft.com/dotnet/api/microsoft.azure.management.compute.models.windowsconfiguration.enableautomaticupdates?view=azure-dotnet) is automatically set to false and cannot be set to true.
func (o AutomaticOSUpgradePolicyResponseOutput) EnableAutomaticOSUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutomaticOSUpgradePolicyResponse) *bool { return v.EnableAutomaticOSUpgrade }).(pulumi.BoolPtrOutput)
}

type AutomaticOSUpgradePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (AutomaticOSUpgradePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomaticOSUpgradePolicyResponse)(nil)).Elem()
}

func (o AutomaticOSUpgradePolicyResponsePtrOutput) ToAutomaticOSUpgradePolicyResponsePtrOutput() AutomaticOSUpgradePolicyResponsePtrOutput {
	return o
}

func (o AutomaticOSUpgradePolicyResponsePtrOutput) ToAutomaticOSUpgradePolicyResponsePtrOutputWithContext(ctx context.Context) AutomaticOSUpgradePolicyResponsePtrOutput {
	return o
}

func (o AutomaticOSUpgradePolicyResponsePtrOutput) Elem() AutomaticOSUpgradePolicyResponseOutput {
	return o.ApplyT(func(v *AutomaticOSUpgradePolicyResponse) AutomaticOSUpgradePolicyResponse { return *v }).(AutomaticOSUpgradePolicyResponseOutput)
}

// Whether OS image rollback feature should be disabled. Default value is false.
func (o AutomaticOSUpgradePolicyResponsePtrOutput) DisableAutomaticRollback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutomaticOSUpgradePolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.DisableAutomaticRollback
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes available. Default value is false. <br><br> If this is set to true for Windows based scale sets, [enableAutomaticUpdates](https://docs.microsoft.com/dotnet/api/microsoft.azure.management.compute.models.windowsconfiguration.enableautomaticupdates?view=azure-dotnet) is automatically set to false and cannot be set to true.
func (o AutomaticOSUpgradePolicyResponsePtrOutput) EnableAutomaticOSUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutomaticOSUpgradePolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAutomaticOSUpgrade
	}).(pulumi.BoolPtrOutput)
}

// Specifies the configuration parameters for automatic repairs on the virtual machine scale set.
type AutomaticRepairsPolicy struct {
	// Specifies whether automatic repairs should be enabled on the virtual machine scale set. The default value is false.
	Enabled *bool `pulumi:"enabled"`
	// The amount of time for which automatic repairs are suspended due to a state change on VM. The grace time starts after the state change has completed. This helps avoid premature or accidental repairs. The time duration should be specified in ISO 8601 format. The minimum allowed grace period is 30 minutes (PT30M), which is also the default value. The maximum allowed grace period is 90 minutes (PT90M).
	GracePeriod *string `pulumi:"gracePeriod"`
}

// AutomaticRepairsPolicyInput is an input type that accepts AutomaticRepairsPolicyArgs and AutomaticRepairsPolicyOutput values.
// You can construct a concrete instance of `AutomaticRepairsPolicyInput` via:
//
//          AutomaticRepairsPolicyArgs{...}
type AutomaticRepairsPolicyInput interface {
	pulumi.Input

	ToAutomaticRepairsPolicyOutput() AutomaticRepairsPolicyOutput
	ToAutomaticRepairsPolicyOutputWithContext(context.Context) AutomaticRepairsPolicyOutput
}

// Specifies the configuration parameters for automatic repairs on the virtual machine scale set.
type AutomaticRepairsPolicyArgs struct {
	// Specifies whether automatic repairs should be enabled on the virtual machine scale set. The default value is false.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The amount of time for which automatic repairs are suspended due to a state change on VM. The grace time starts after the state change has completed. This helps avoid premature or accidental repairs. The time duration should be specified in ISO 8601 format. The minimum allowed grace period is 30 minutes (PT30M), which is also the default value. The maximum allowed grace period is 90 minutes (PT90M).
	GracePeriod pulumi.StringPtrInput `pulumi:"gracePeriod"`
}

func (AutomaticRepairsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomaticRepairsPolicy)(nil)).Elem()
}

func (i AutomaticRepairsPolicyArgs) ToAutomaticRepairsPolicyOutput() AutomaticRepairsPolicyOutput {
	return i.ToAutomaticRepairsPolicyOutputWithContext(context.Background())
}

func (i AutomaticRepairsPolicyArgs) ToAutomaticRepairsPolicyOutputWithContext(ctx context.Context) AutomaticRepairsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticRepairsPolicyOutput)
}

func (i AutomaticRepairsPolicyArgs) ToAutomaticRepairsPolicyPtrOutput() AutomaticRepairsPolicyPtrOutput {
	return i.ToAutomaticRepairsPolicyPtrOutputWithContext(context.Background())
}

func (i AutomaticRepairsPolicyArgs) ToAutomaticRepairsPolicyPtrOutputWithContext(ctx context.Context) AutomaticRepairsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticRepairsPolicyOutput).ToAutomaticRepairsPolicyPtrOutputWithContext(ctx)
}

// AutomaticRepairsPolicyPtrInput is an input type that accepts AutomaticRepairsPolicyArgs, AutomaticRepairsPolicyPtr and AutomaticRepairsPolicyPtrOutput values.
// You can construct a concrete instance of `AutomaticRepairsPolicyPtrInput` via:
//
//          AutomaticRepairsPolicyArgs{...}
//
//  or:
//
//          nil
type AutomaticRepairsPolicyPtrInput interface {
	pulumi.Input

	ToAutomaticRepairsPolicyPtrOutput() AutomaticRepairsPolicyPtrOutput
	ToAutomaticRepairsPolicyPtrOutputWithContext(context.Context) AutomaticRepairsPolicyPtrOutput
}

type automaticRepairsPolicyPtrType AutomaticRepairsPolicyArgs

func AutomaticRepairsPolicyPtr(v *AutomaticRepairsPolicyArgs) AutomaticRepairsPolicyPtrInput {
	return (*automaticRepairsPolicyPtrType)(v)
}

func (*automaticRepairsPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomaticRepairsPolicy)(nil)).Elem()
}

func (i *automaticRepairsPolicyPtrType) ToAutomaticRepairsPolicyPtrOutput() AutomaticRepairsPolicyPtrOutput {
	return i.ToAutomaticRepairsPolicyPtrOutputWithContext(context.Background())
}

func (i *automaticRepairsPolicyPtrType) ToAutomaticRepairsPolicyPtrOutputWithContext(ctx context.Context) AutomaticRepairsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticRepairsPolicyPtrOutput)
}

// Specifies the configuration parameters for automatic repairs on the virtual machine scale set.
type AutomaticRepairsPolicyResponse struct {
	// Specifies whether automatic repairs should be enabled on the virtual machine scale set. The default value is false.
	Enabled *bool `pulumi:"enabled"`
	// The amount of time for which automatic repairs are suspended due to a state change on VM. The grace time starts after the state change has completed. This helps avoid premature or accidental repairs. The time duration should be specified in ISO 8601 format. The minimum allowed grace period is 30 minutes (PT30M), which is also the default value. The maximum allowed grace period is 90 minutes (PT90M).
	GracePeriod *string `pulumi:"gracePeriod"`
}

// Specifies the configuration parameters for automatic repairs on the virtual machine scale set.
type AutomaticRepairsPolicyResponseOutput struct{ *pulumi.OutputState }

func (AutomaticRepairsPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomaticRepairsPolicyResponse)(nil)).Elem()
}

func (o AutomaticRepairsPolicyResponseOutput) ToAutomaticRepairsPolicyResponseOutput() AutomaticRepairsPolicyResponseOutput {
	return o
}

func (o AutomaticRepairsPolicyResponseOutput) ToAutomaticRepairsPolicyResponseOutputWithContext(ctx context.Context) AutomaticRepairsPolicyResponseOutput {
	return o
}

func (o AutomaticRepairsPolicyResponseOutput) ToAutomaticRepairsPolicyResponsePtrOutput() AutomaticRepairsPolicyResponsePtrOutput {
	return o.ToAutomaticRepairsPolicyResponsePtrOutputWithContext(context.Background())
}

func (o AutomaticRepairsPolicyResponseOutput) ToAutomaticRepairsPolicyResponsePtrOutputWithContext(ctx context.Context) AutomaticRepairsPolicyResponsePtrOutput {
	return o.ApplyT(func(v AutomaticRepairsPolicyResponse) *AutomaticRepairsPolicyResponse {
		return &v
	}).(AutomaticRepairsPolicyResponsePtrOutput)
}

// Specifies whether automatic repairs should be enabled on the virtual machine scale set. The default value is false.
func (o AutomaticRepairsPolicyResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutomaticRepairsPolicyResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The amount of time for which automatic repairs are suspended due to a state change on VM. The grace time starts after the state change has completed. This helps avoid premature or accidental repairs. The time duration should be specified in ISO 8601 format. The minimum allowed grace period is 30 minutes (PT30M), which is also the default value. The maximum allowed grace period is 90 minutes (PT90M).
func (o AutomaticRepairsPolicyResponseOutput) GracePeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomaticRepairsPolicyResponse) *string { return v.GracePeriod }).(pulumi.StringPtrOutput)
}

type AutomaticRepairsPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (AutomaticRepairsPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomaticRepairsPolicyResponse)(nil)).Elem()
}

func (o AutomaticRepairsPolicyResponsePtrOutput) ToAutomaticRepairsPolicyResponsePtrOutput() AutomaticRepairsPolicyResponsePtrOutput {
	return o
}

func (o AutomaticRepairsPolicyResponsePtrOutput) ToAutomaticRepairsPolicyResponsePtrOutputWithContext(ctx context.Context) AutomaticRepairsPolicyResponsePtrOutput {
	return o
}

func (o AutomaticRepairsPolicyResponsePtrOutput) Elem() AutomaticRepairsPolicyResponseOutput {
	return o.ApplyT(func(v *AutomaticRepairsPolicyResponse) AutomaticRepairsPolicyResponse { return *v }).(AutomaticRepairsPolicyResponseOutput)
}

// Specifies whether automatic repairs should be enabled on the virtual machine scale set. The default value is false.
func (o AutomaticRepairsPolicyResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutomaticRepairsPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The amount of time for which automatic repairs are suspended due to a state change on VM. The grace time starts after the state change has completed. This helps avoid premature or accidental repairs. The time duration should be specified in ISO 8601 format. The minimum allowed grace period is 30 minutes (PT30M), which is also the default value. The maximum allowed grace period is 90 minutes (PT90M).
func (o AutomaticRepairsPolicyResponsePtrOutput) GracePeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomaticRepairsPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.GracePeriod
	}).(pulumi.StringPtrOutput)
}

// Describes the properties of an virtual machine instance view for available patch summary.
type AvailablePatchSummaryResponse struct {
	// The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
	AssessmentActivityId string `pulumi:"assessmentActivityId"`
	// The number of critical or security patches that have been detected as available and not yet installed.
	CriticalAndSecurityPatchCount int `pulumi:"criticalAndSecurityPatchCount"`
	// The errors that were encountered during execution of the operation. The details array contains the list of them.
	Error ApiErrorResponse `pulumi:"error"`
	// The UTC timestamp when the operation began.
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// The number of all available patches excluding critical and security.
	OtherPatchCount int `pulumi:"otherPatchCount"`
	// The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred.
	RebootPending bool `pulumi:"rebootPending"`
	// The UTC timestamp when the operation began.
	StartTime string `pulumi:"startTime"`
	// The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Failed", "Succeeded", or "CompletedWithWarnings."
	Status string `pulumi:"status"`
}

// Describes the properties of an virtual machine instance view for available patch summary.
type AvailablePatchSummaryResponseOutput struct{ *pulumi.OutputState }

func (AvailablePatchSummaryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailablePatchSummaryResponse)(nil)).Elem()
}

func (o AvailablePatchSummaryResponseOutput) ToAvailablePatchSummaryResponseOutput() AvailablePatchSummaryResponseOutput {
	return o
}

func (o AvailablePatchSummaryResponseOutput) ToAvailablePatchSummaryResponseOutputWithContext(ctx context.Context) AvailablePatchSummaryResponseOutput {
	return o
}

func (o AvailablePatchSummaryResponseOutput) ToAvailablePatchSummaryResponsePtrOutput() AvailablePatchSummaryResponsePtrOutput {
	return o.ToAvailablePatchSummaryResponsePtrOutputWithContext(context.Background())
}

func (o AvailablePatchSummaryResponseOutput) ToAvailablePatchSummaryResponsePtrOutputWithContext(ctx context.Context) AvailablePatchSummaryResponsePtrOutput {
	return o.ApplyT(func(v AvailablePatchSummaryResponse) *AvailablePatchSummaryResponse {
		return &v
	}).(AvailablePatchSummaryResponsePtrOutput)
}

// The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
func (o AvailablePatchSummaryResponseOutput) AssessmentActivityId() pulumi.StringOutput {
	return o.ApplyT(func(v AvailablePatchSummaryResponse) string { return v.AssessmentActivityId }).(pulumi.StringOutput)
}

// The number of critical or security patches that have been detected as available and not yet installed.
func (o AvailablePatchSummaryResponseOutput) CriticalAndSecurityPatchCount() pulumi.IntOutput {
	return o.ApplyT(func(v AvailablePatchSummaryResponse) int { return v.CriticalAndSecurityPatchCount }).(pulumi.IntOutput)
}

// The errors that were encountered during execution of the operation. The details array contains the list of them.
func (o AvailablePatchSummaryResponseOutput) Error() ApiErrorResponseOutput {
	return o.ApplyT(func(v AvailablePatchSummaryResponse) ApiErrorResponse { return v.Error }).(ApiErrorResponseOutput)
}

// The UTC timestamp when the operation began.
func (o AvailablePatchSummaryResponseOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v AvailablePatchSummaryResponse) string { return v.LastModifiedTime }).(pulumi.StringOutput)
}

// The number of all available patches excluding critical and security.
func (o AvailablePatchSummaryResponseOutput) OtherPatchCount() pulumi.IntOutput {
	return o.ApplyT(func(v AvailablePatchSummaryResponse) int { return v.OtherPatchCount }).(pulumi.IntOutput)
}

// The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred.
func (o AvailablePatchSummaryResponseOutput) RebootPending() pulumi.BoolOutput {
	return o.ApplyT(func(v AvailablePatchSummaryResponse) bool { return v.RebootPending }).(pulumi.BoolOutput)
}

// The UTC timestamp when the operation began.
func (o AvailablePatchSummaryResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v AvailablePatchSummaryResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Failed", "Succeeded", or "CompletedWithWarnings."
func (o AvailablePatchSummaryResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v AvailablePatchSummaryResponse) string { return v.Status }).(pulumi.StringOutput)
}

type AvailablePatchSummaryResponsePtrOutput struct{ *pulumi.OutputState }

func (AvailablePatchSummaryResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AvailablePatchSummaryResponse)(nil)).Elem()
}

func (o AvailablePatchSummaryResponsePtrOutput) ToAvailablePatchSummaryResponsePtrOutput() AvailablePatchSummaryResponsePtrOutput {
	return o
}

func (o AvailablePatchSummaryResponsePtrOutput) ToAvailablePatchSummaryResponsePtrOutputWithContext(ctx context.Context) AvailablePatchSummaryResponsePtrOutput {
	return o
}

func (o AvailablePatchSummaryResponsePtrOutput) Elem() AvailablePatchSummaryResponseOutput {
	return o.ApplyT(func(v *AvailablePatchSummaryResponse) AvailablePatchSummaryResponse { return *v }).(AvailablePatchSummaryResponseOutput)
}

// The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
func (o AvailablePatchSummaryResponsePtrOutput) AssessmentActivityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvailablePatchSummaryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AssessmentActivityId
	}).(pulumi.StringPtrOutput)
}

// The number of critical or security patches that have been detected as available and not yet installed.
func (o AvailablePatchSummaryResponsePtrOutput) CriticalAndSecurityPatchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AvailablePatchSummaryResponse) *int {
		if v == nil {
			return nil
		}
		return &v.CriticalAndSecurityPatchCount
	}).(pulumi.IntPtrOutput)
}

// The errors that were encountered during execution of the operation. The details array contains the list of them.
func (o AvailablePatchSummaryResponsePtrOutput) Error() ApiErrorResponsePtrOutput {
	return o.ApplyT(func(v *AvailablePatchSummaryResponse) *ApiErrorResponse {
		if v == nil {
			return nil
		}
		return &v.Error
	}).(ApiErrorResponsePtrOutput)
}

// The UTC timestamp when the operation began.
func (o AvailablePatchSummaryResponsePtrOutput) LastModifiedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvailablePatchSummaryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastModifiedTime
	}).(pulumi.StringPtrOutput)
}

// The number of all available patches excluding critical and security.
func (o AvailablePatchSummaryResponsePtrOutput) OtherPatchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AvailablePatchSummaryResponse) *int {
		if v == nil {
			return nil
		}
		return &v.OtherPatchCount
	}).(pulumi.IntPtrOutput)
}

// The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred.
func (o AvailablePatchSummaryResponsePtrOutput) RebootPending() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AvailablePatchSummaryResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.RebootPending
	}).(pulumi.BoolPtrOutput)
}

// The UTC timestamp when the operation began.
func (o AvailablePatchSummaryResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvailablePatchSummaryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Failed", "Succeeded", or "CompletedWithWarnings."
func (o AvailablePatchSummaryResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvailablePatchSummaryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Specifies the billing related details of a Azure Spot VM or VMSS. <br><br>Minimum api-version: 2019-03-01.
type BillingProfile struct {
	// Specifies the maximum price you are willing to pay for a Azure Spot VM/VMSS. This price is in US Dollars. <br><br> This price will be compared with the current Azure Spot price for the VM size. Also, the prices are compared at the time of create/update of Azure Spot VM/VMSS and the operation will only succeed if  the maxPrice is greater than the current Azure Spot price. <br><br> The maxPrice will also be used for evicting a Azure Spot VM/VMSS if the current Azure Spot price goes beyond the maxPrice after creation of VM/VMSS. <br><br> Possible values are: <br><br> - Any decimal value greater than zero. Example: 0.01538 <br><br> -1 – indicates default price to be up-to on-demand. <br><br> You can set the maxPrice to -1 to indicate that the Azure Spot VM/VMSS should not be evicted for price reasons. Also, the default max price is -1 if it is not provided by you. <br><br>Minimum api-version: 2019-03-01.
	MaxPrice *float64 `pulumi:"maxPrice"`
}

// BillingProfileInput is an input type that accepts BillingProfileArgs and BillingProfileOutput values.
// You can construct a concrete instance of `BillingProfileInput` via:
//
//          BillingProfileArgs{...}
type BillingProfileInput interface {
	pulumi.Input

	ToBillingProfileOutput() BillingProfileOutput
	ToBillingProfileOutputWithContext(context.Context) BillingProfileOutput
}

// Specifies the billing related details of a Azure Spot VM or VMSS. <br><br>Minimum api-version: 2019-03-01.
type BillingProfileArgs struct {
	// Specifies the maximum price you are willing to pay for a Azure Spot VM/VMSS. This price is in US Dollars. <br><br> This price will be compared with the current Azure Spot price for the VM size. Also, the prices are compared at the time of create/update of Azure Spot VM/VMSS and the operation will only succeed if  the maxPrice is greater than the current Azure Spot price. <br><br> The maxPrice will also be used for evicting a Azure Spot VM/VMSS if the current Azure Spot price goes beyond the maxPrice after creation of VM/VMSS. <br><br> Possible values are: <br><br> - Any decimal value greater than zero. Example: 0.01538 <br><br> -1 – indicates default price to be up-to on-demand. <br><br> You can set the maxPrice to -1 to indicate that the Azure Spot VM/VMSS should not be evicted for price reasons. Also, the default max price is -1 if it is not provided by you. <br><br>Minimum api-version: 2019-03-01.
	MaxPrice pulumi.Float64PtrInput `pulumi:"maxPrice"`
}

func (BillingProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BillingProfile)(nil)).Elem()
}

func (i BillingProfileArgs) ToBillingProfileOutput() BillingProfileOutput {
	return i.ToBillingProfileOutputWithContext(context.Background())
}

func (i BillingProfileArgs) ToBillingProfileOutputWithContext(ctx context.Context) BillingProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BillingProfileOutput)
}

func (i BillingProfileArgs) ToBillingProfilePtrOutput() BillingProfilePtrOutput {
	return i.ToBillingProfilePtrOutputWithContext(context.Background())
}

func (i BillingProfileArgs) ToBillingProfilePtrOutputWithContext(ctx context.Context) BillingProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BillingProfileOutput).ToBillingProfilePtrOutputWithContext(ctx)
}

// BillingProfilePtrInput is an input type that accepts BillingProfileArgs, BillingProfilePtr and BillingProfilePtrOutput values.
// You can construct a concrete instance of `BillingProfilePtrInput` via:
//
//          BillingProfileArgs{...}
//
//  or:
//
//          nil
type BillingProfilePtrInput interface {
	pulumi.Input

	ToBillingProfilePtrOutput() BillingProfilePtrOutput
	ToBillingProfilePtrOutputWithContext(context.Context) BillingProfilePtrOutput
}

type billingProfilePtrType BillingProfileArgs

func BillingProfilePtr(v *BillingProfileArgs) BillingProfilePtrInput {
	return (*billingProfilePtrType)(v)
}

func (*billingProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BillingProfile)(nil)).Elem()
}

func (i *billingProfilePtrType) ToBillingProfilePtrOutput() BillingProfilePtrOutput {
	return i.ToBillingProfilePtrOutputWithContext(context.Background())
}

func (i *billingProfilePtrType) ToBillingProfilePtrOutputWithContext(ctx context.Context) BillingProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BillingProfilePtrOutput)
}

// Specifies the billing related details of a Azure Spot VM or VMSS. <br><br>Minimum api-version: 2019-03-01.
type BillingProfileResponse struct {
	// Specifies the maximum price you are willing to pay for a Azure Spot VM/VMSS. This price is in US Dollars. <br><br> This price will be compared with the current Azure Spot price for the VM size. Also, the prices are compared at the time of create/update of Azure Spot VM/VMSS and the operation will only succeed if  the maxPrice is greater than the current Azure Spot price. <br><br> The maxPrice will also be used for evicting a Azure Spot VM/VMSS if the current Azure Spot price goes beyond the maxPrice after creation of VM/VMSS. <br><br> Possible values are: <br><br> - Any decimal value greater than zero. Example: 0.01538 <br><br> -1 – indicates default price to be up-to on-demand. <br><br> You can set the maxPrice to -1 to indicate that the Azure Spot VM/VMSS should not be evicted for price reasons. Also, the default max price is -1 if it is not provided by you. <br><br>Minimum api-version: 2019-03-01.
	MaxPrice *float64 `pulumi:"maxPrice"`
}

// Specifies the billing related details of a Azure Spot VM or VMSS. <br><br>Minimum api-version: 2019-03-01.
type BillingProfileResponseOutput struct{ *pulumi.OutputState }

func (BillingProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BillingProfileResponse)(nil)).Elem()
}

func (o BillingProfileResponseOutput) ToBillingProfileResponseOutput() BillingProfileResponseOutput {
	return o
}

func (o BillingProfileResponseOutput) ToBillingProfileResponseOutputWithContext(ctx context.Context) BillingProfileResponseOutput {
	return o
}

func (o BillingProfileResponseOutput) ToBillingProfileResponsePtrOutput() BillingProfileResponsePtrOutput {
	return o.ToBillingProfileResponsePtrOutputWithContext(context.Background())
}

func (o BillingProfileResponseOutput) ToBillingProfileResponsePtrOutputWithContext(ctx context.Context) BillingProfileResponsePtrOutput {
	return o.ApplyT(func(v BillingProfileResponse) *BillingProfileResponse {
		return &v
	}).(BillingProfileResponsePtrOutput)
}

// Specifies the maximum price you are willing to pay for a Azure Spot VM/VMSS. This price is in US Dollars. <br><br> This price will be compared with the current Azure Spot price for the VM size. Also, the prices are compared at the time of create/update of Azure Spot VM/VMSS and the operation will only succeed if  the maxPrice is greater than the current Azure Spot price. <br><br> The maxPrice will also be used for evicting a Azure Spot VM/VMSS if the current Azure Spot price goes beyond the maxPrice after creation of VM/VMSS. <br><br> Possible values are: <br><br> - Any decimal value greater than zero. Example: 0.01538 <br><br> -1 – indicates default price to be up-to on-demand. <br><br> You can set the maxPrice to -1 to indicate that the Azure Spot VM/VMSS should not be evicted for price reasons. Also, the default max price is -1 if it is not provided by you. <br><br>Minimum api-version: 2019-03-01.
func (o BillingProfileResponseOutput) MaxPrice() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BillingProfileResponse) *float64 { return v.MaxPrice }).(pulumi.Float64PtrOutput)
}

type BillingProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (BillingProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BillingProfileResponse)(nil)).Elem()
}

func (o BillingProfileResponsePtrOutput) ToBillingProfileResponsePtrOutput() BillingProfileResponsePtrOutput {
	return o
}

func (o BillingProfileResponsePtrOutput) ToBillingProfileResponsePtrOutputWithContext(ctx context.Context) BillingProfileResponsePtrOutput {
	return o
}

func (o BillingProfileResponsePtrOutput) Elem() BillingProfileResponseOutput {
	return o.ApplyT(func(v *BillingProfileResponse) BillingProfileResponse { return *v }).(BillingProfileResponseOutput)
}

// Specifies the maximum price you are willing to pay for a Azure Spot VM/VMSS. This price is in US Dollars. <br><br> This price will be compared with the current Azure Spot price for the VM size. Also, the prices are compared at the time of create/update of Azure Spot VM/VMSS and the operation will only succeed if  the maxPrice is greater than the current Azure Spot price. <br><br> The maxPrice will also be used for evicting a Azure Spot VM/VMSS if the current Azure Spot price goes beyond the maxPrice after creation of VM/VMSS. <br><br> Possible values are: <br><br> - Any decimal value greater than zero. Example: 0.01538 <br><br> -1 – indicates default price to be up-to on-demand. <br><br> You can set the maxPrice to -1 to indicate that the Azure Spot VM/VMSS should not be evicted for price reasons. Also, the default max price is -1 if it is not provided by you. <br><br>Minimum api-version: 2019-03-01.
func (o BillingProfileResponsePtrOutput) MaxPrice() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BillingProfileResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxPrice
	}).(pulumi.Float64PtrOutput)
}

// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor.
type BootDiagnostics struct {
	// Whether boot diagnostics should be enabled on the Virtual Machine.
	Enabled *bool `pulumi:"enabled"`
	// Uri of the storage account to use for placing the console output and screenshot. <br><br>If storageUri is not specified while enabling boot diagnostics, managed storage will be used.
	StorageUri *string `pulumi:"storageUri"`
}

// BootDiagnosticsInput is an input type that accepts BootDiagnosticsArgs and BootDiagnosticsOutput values.
// You can construct a concrete instance of `BootDiagnosticsInput` via:
//
//          BootDiagnosticsArgs{...}
type BootDiagnosticsInput interface {
	pulumi.Input

	ToBootDiagnosticsOutput() BootDiagnosticsOutput
	ToBootDiagnosticsOutputWithContext(context.Context) BootDiagnosticsOutput
}

// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor.
type BootDiagnosticsArgs struct {
	// Whether boot diagnostics should be enabled on the Virtual Machine.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Uri of the storage account to use for placing the console output and screenshot. <br><br>If storageUri is not specified while enabling boot diagnostics, managed storage will be used.
	StorageUri pulumi.StringPtrInput `pulumi:"storageUri"`
}

func (BootDiagnosticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BootDiagnostics)(nil)).Elem()
}

func (i BootDiagnosticsArgs) ToBootDiagnosticsOutput() BootDiagnosticsOutput {
	return i.ToBootDiagnosticsOutputWithContext(context.Background())
}

func (i BootDiagnosticsArgs) ToBootDiagnosticsOutputWithContext(ctx context.Context) BootDiagnosticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BootDiagnosticsOutput)
}

func (i BootDiagnosticsArgs) ToBootDiagnosticsPtrOutput() BootDiagnosticsPtrOutput {
	return i.ToBootDiagnosticsPtrOutputWithContext(context.Background())
}

func (i BootDiagnosticsArgs) ToBootDiagnosticsPtrOutputWithContext(ctx context.Context) BootDiagnosticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BootDiagnosticsOutput).ToBootDiagnosticsPtrOutputWithContext(ctx)
}

// BootDiagnosticsPtrInput is an input type that accepts BootDiagnosticsArgs, BootDiagnosticsPtr and BootDiagnosticsPtrOutput values.
// You can construct a concrete instance of `BootDiagnosticsPtrInput` via:
//
//          BootDiagnosticsArgs{...}
//
//  or:
//
//          nil
type BootDiagnosticsPtrInput interface {
	pulumi.Input

	ToBootDiagnosticsPtrOutput() BootDiagnosticsPtrOutput
	ToBootDiagnosticsPtrOutputWithContext(context.Context) BootDiagnosticsPtrOutput
}

type bootDiagnosticsPtrType BootDiagnosticsArgs

func BootDiagnosticsPtr(v *BootDiagnosticsArgs) BootDiagnosticsPtrInput {
	return (*bootDiagnosticsPtrType)(v)
}

func (*bootDiagnosticsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BootDiagnostics)(nil)).Elem()
}

func (i *bootDiagnosticsPtrType) ToBootDiagnosticsPtrOutput() BootDiagnosticsPtrOutput {
	return i.ToBootDiagnosticsPtrOutputWithContext(context.Background())
}

func (i *bootDiagnosticsPtrType) ToBootDiagnosticsPtrOutputWithContext(ctx context.Context) BootDiagnosticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BootDiagnosticsPtrOutput)
}

// The instance view of a virtual machine boot diagnostics.
type BootDiagnosticsInstanceViewResponse struct {
	// The console screenshot blob URI. <br><br>NOTE: This will **not** be set if boot diagnostics is currently enabled with managed storage.
	ConsoleScreenshotBlobUri string `pulumi:"consoleScreenshotBlobUri"`
	// The serial console log blob Uri. <br><br>NOTE: This will **not** be set if boot diagnostics is currently enabled with managed storage.
	SerialConsoleLogBlobUri string `pulumi:"serialConsoleLogBlobUri"`
	// The boot diagnostics status information for the VM. <br><br> NOTE: It will be set only if there are errors encountered in enabling boot diagnostics.
	Status InstanceViewStatusResponse `pulumi:"status"`
}

// The instance view of a virtual machine boot diagnostics.
type BootDiagnosticsInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (BootDiagnosticsInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BootDiagnosticsInstanceViewResponse)(nil)).Elem()
}

func (o BootDiagnosticsInstanceViewResponseOutput) ToBootDiagnosticsInstanceViewResponseOutput() BootDiagnosticsInstanceViewResponseOutput {
	return o
}

func (o BootDiagnosticsInstanceViewResponseOutput) ToBootDiagnosticsInstanceViewResponseOutputWithContext(ctx context.Context) BootDiagnosticsInstanceViewResponseOutput {
	return o
}

func (o BootDiagnosticsInstanceViewResponseOutput) ToBootDiagnosticsInstanceViewResponsePtrOutput() BootDiagnosticsInstanceViewResponsePtrOutput {
	return o.ToBootDiagnosticsInstanceViewResponsePtrOutputWithContext(context.Background())
}

func (o BootDiagnosticsInstanceViewResponseOutput) ToBootDiagnosticsInstanceViewResponsePtrOutputWithContext(ctx context.Context) BootDiagnosticsInstanceViewResponsePtrOutput {
	return o.ApplyT(func(v BootDiagnosticsInstanceViewResponse) *BootDiagnosticsInstanceViewResponse {
		return &v
	}).(BootDiagnosticsInstanceViewResponsePtrOutput)
}

// The console screenshot blob URI. <br><br>NOTE: This will **not** be set if boot diagnostics is currently enabled with managed storage.
func (o BootDiagnosticsInstanceViewResponseOutput) ConsoleScreenshotBlobUri() pulumi.StringOutput {
	return o.ApplyT(func(v BootDiagnosticsInstanceViewResponse) string { return v.ConsoleScreenshotBlobUri }).(pulumi.StringOutput)
}

// The serial console log blob Uri. <br><br>NOTE: This will **not** be set if boot diagnostics is currently enabled with managed storage.
func (o BootDiagnosticsInstanceViewResponseOutput) SerialConsoleLogBlobUri() pulumi.StringOutput {
	return o.ApplyT(func(v BootDiagnosticsInstanceViewResponse) string { return v.SerialConsoleLogBlobUri }).(pulumi.StringOutput)
}

// The boot diagnostics status information for the VM. <br><br> NOTE: It will be set only if there are errors encountered in enabling boot diagnostics.
func (o BootDiagnosticsInstanceViewResponseOutput) Status() InstanceViewStatusResponseOutput {
	return o.ApplyT(func(v BootDiagnosticsInstanceViewResponse) InstanceViewStatusResponse { return v.Status }).(InstanceViewStatusResponseOutput)
}

type BootDiagnosticsInstanceViewResponsePtrOutput struct{ *pulumi.OutputState }

func (BootDiagnosticsInstanceViewResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BootDiagnosticsInstanceViewResponse)(nil)).Elem()
}

func (o BootDiagnosticsInstanceViewResponsePtrOutput) ToBootDiagnosticsInstanceViewResponsePtrOutput() BootDiagnosticsInstanceViewResponsePtrOutput {
	return o
}

func (o BootDiagnosticsInstanceViewResponsePtrOutput) ToBootDiagnosticsInstanceViewResponsePtrOutputWithContext(ctx context.Context) BootDiagnosticsInstanceViewResponsePtrOutput {
	return o
}

func (o BootDiagnosticsInstanceViewResponsePtrOutput) Elem() BootDiagnosticsInstanceViewResponseOutput {
	return o.ApplyT(func(v *BootDiagnosticsInstanceViewResponse) BootDiagnosticsInstanceViewResponse { return *v }).(BootDiagnosticsInstanceViewResponseOutput)
}

// The console screenshot blob URI. <br><br>NOTE: This will **not** be set if boot diagnostics is currently enabled with managed storage.
func (o BootDiagnosticsInstanceViewResponsePtrOutput) ConsoleScreenshotBlobUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BootDiagnosticsInstanceViewResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ConsoleScreenshotBlobUri
	}).(pulumi.StringPtrOutput)
}

// The serial console log blob Uri. <br><br>NOTE: This will **not** be set if boot diagnostics is currently enabled with managed storage.
func (o BootDiagnosticsInstanceViewResponsePtrOutput) SerialConsoleLogBlobUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BootDiagnosticsInstanceViewResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SerialConsoleLogBlobUri
	}).(pulumi.StringPtrOutput)
}

// The boot diagnostics status information for the VM. <br><br> NOTE: It will be set only if there are errors encountered in enabling boot diagnostics.
func (o BootDiagnosticsInstanceViewResponsePtrOutput) Status() InstanceViewStatusResponsePtrOutput {
	return o.ApplyT(func(v *BootDiagnosticsInstanceViewResponse) *InstanceViewStatusResponse {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(InstanceViewStatusResponsePtrOutput)
}

// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor.
type BootDiagnosticsResponse struct {
	// Whether boot diagnostics should be enabled on the Virtual Machine.
	Enabled *bool `pulumi:"enabled"`
	// Uri of the storage account to use for placing the console output and screenshot. <br><br>If storageUri is not specified while enabling boot diagnostics, managed storage will be used.
	StorageUri *string `pulumi:"storageUri"`
}

// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor.
type BootDiagnosticsResponseOutput struct{ *pulumi.OutputState }

func (BootDiagnosticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BootDiagnosticsResponse)(nil)).Elem()
}

func (o BootDiagnosticsResponseOutput) ToBootDiagnosticsResponseOutput() BootDiagnosticsResponseOutput {
	return o
}

func (o BootDiagnosticsResponseOutput) ToBootDiagnosticsResponseOutputWithContext(ctx context.Context) BootDiagnosticsResponseOutput {
	return o
}

func (o BootDiagnosticsResponseOutput) ToBootDiagnosticsResponsePtrOutput() BootDiagnosticsResponsePtrOutput {
	return o.ToBootDiagnosticsResponsePtrOutputWithContext(context.Background())
}

func (o BootDiagnosticsResponseOutput) ToBootDiagnosticsResponsePtrOutputWithContext(ctx context.Context) BootDiagnosticsResponsePtrOutput {
	return o.ApplyT(func(v BootDiagnosticsResponse) *BootDiagnosticsResponse {
		return &v
	}).(BootDiagnosticsResponsePtrOutput)
}

// Whether boot diagnostics should be enabled on the Virtual Machine.
func (o BootDiagnosticsResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BootDiagnosticsResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Uri of the storage account to use for placing the console output and screenshot. <br><br>If storageUri is not specified while enabling boot diagnostics, managed storage will be used.
func (o BootDiagnosticsResponseOutput) StorageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BootDiagnosticsResponse) *string { return v.StorageUri }).(pulumi.StringPtrOutput)
}

type BootDiagnosticsResponsePtrOutput struct{ *pulumi.OutputState }

func (BootDiagnosticsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BootDiagnosticsResponse)(nil)).Elem()
}

func (o BootDiagnosticsResponsePtrOutput) ToBootDiagnosticsResponsePtrOutput() BootDiagnosticsResponsePtrOutput {
	return o
}

func (o BootDiagnosticsResponsePtrOutput) ToBootDiagnosticsResponsePtrOutputWithContext(ctx context.Context) BootDiagnosticsResponsePtrOutput {
	return o
}

func (o BootDiagnosticsResponsePtrOutput) Elem() BootDiagnosticsResponseOutput {
	return o.ApplyT(func(v *BootDiagnosticsResponse) BootDiagnosticsResponse { return *v }).(BootDiagnosticsResponseOutput)
}

// Whether boot diagnostics should be enabled on the Virtual Machine.
func (o BootDiagnosticsResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BootDiagnosticsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Uri of the storage account to use for placing the console output and screenshot. <br><br>If storageUri is not specified while enabling boot diagnostics, managed storage will be used.
func (o BootDiagnosticsResponsePtrOutput) StorageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BootDiagnosticsResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageUri
	}).(pulumi.StringPtrOutput)
}

// Information about the configuration.
type ConfigurationInfoResponse struct {
	// Name of the configuration.
	Name string `pulumi:"name"`
	// Version of the configuration.
	Version string `pulumi:"version"`
}

// Information about the configuration.
type ConfigurationInfoResponseOutput struct{ *pulumi.OutputState }

func (ConfigurationInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationInfoResponse)(nil)).Elem()
}

func (o ConfigurationInfoResponseOutput) ToConfigurationInfoResponseOutput() ConfigurationInfoResponseOutput {
	return o
}

func (o ConfigurationInfoResponseOutput) ToConfigurationInfoResponseOutputWithContext(ctx context.Context) ConfigurationInfoResponseOutput {
	return o
}

func (o ConfigurationInfoResponseOutput) ToConfigurationInfoResponsePtrOutput() ConfigurationInfoResponsePtrOutput {
	return o.ToConfigurationInfoResponsePtrOutputWithContext(context.Background())
}

func (o ConfigurationInfoResponseOutput) ToConfigurationInfoResponsePtrOutputWithContext(ctx context.Context) ConfigurationInfoResponsePtrOutput {
	return o.ApplyT(func(v ConfigurationInfoResponse) *ConfigurationInfoResponse {
		return &v
	}).(ConfigurationInfoResponsePtrOutput)
}

// Name of the configuration.
func (o ConfigurationInfoResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigurationInfoResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Version of the configuration.
func (o ConfigurationInfoResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigurationInfoResponse) string { return v.Version }).(pulumi.StringOutput)
}

type ConfigurationInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ConfigurationInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationInfoResponse)(nil)).Elem()
}

func (o ConfigurationInfoResponsePtrOutput) ToConfigurationInfoResponsePtrOutput() ConfigurationInfoResponsePtrOutput {
	return o
}

func (o ConfigurationInfoResponsePtrOutput) ToConfigurationInfoResponsePtrOutputWithContext(ctx context.Context) ConfigurationInfoResponsePtrOutput {
	return o
}

func (o ConfigurationInfoResponsePtrOutput) Elem() ConfigurationInfoResponseOutput {
	return o.ApplyT(func(v *ConfigurationInfoResponse) ConfigurationInfoResponse { return *v }).(ConfigurationInfoResponseOutput)
}

// Name of the configuration.
func (o ConfigurationInfoResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Version of the configuration.
func (o ConfigurationInfoResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// Represents a configuration parameter.
type ConfigurationParameter struct {
	// Name of the configuration parameter.
	Name *string `pulumi:"name"`
	// Value of the configuration parameter.
	Value *string `pulumi:"value"`
}

// ConfigurationParameterInput is an input type that accepts ConfigurationParameterArgs and ConfigurationParameterOutput values.
// You can construct a concrete instance of `ConfigurationParameterInput` via:
//
//          ConfigurationParameterArgs{...}
type ConfigurationParameterInput interface {
	pulumi.Input

	ToConfigurationParameterOutput() ConfigurationParameterOutput
	ToConfigurationParameterOutputWithContext(context.Context) ConfigurationParameterOutput
}

// Represents a configuration parameter.
type ConfigurationParameterArgs struct {
	// Name of the configuration parameter.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value of the configuration parameter.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ConfigurationParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationParameter)(nil)).Elem()
}

func (i ConfigurationParameterArgs) ToConfigurationParameterOutput() ConfigurationParameterOutput {
	return i.ToConfigurationParameterOutputWithContext(context.Background())
}

func (i ConfigurationParameterArgs) ToConfigurationParameterOutputWithContext(ctx context.Context) ConfigurationParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationParameterOutput)
}

// ConfigurationParameterArrayInput is an input type that accepts ConfigurationParameterArray and ConfigurationParameterArrayOutput values.
// You can construct a concrete instance of `ConfigurationParameterArrayInput` via:
//
//          ConfigurationParameterArray{ ConfigurationParameterArgs{...} }
type ConfigurationParameterArrayInput interface {
	pulumi.Input

	ToConfigurationParameterArrayOutput() ConfigurationParameterArrayOutput
	ToConfigurationParameterArrayOutputWithContext(context.Context) ConfigurationParameterArrayOutput
}

type ConfigurationParameterArray []ConfigurationParameterInput

func (ConfigurationParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigurationParameter)(nil)).Elem()
}

func (i ConfigurationParameterArray) ToConfigurationParameterArrayOutput() ConfigurationParameterArrayOutput {
	return i.ToConfigurationParameterArrayOutputWithContext(context.Background())
}

func (i ConfigurationParameterArray) ToConfigurationParameterArrayOutputWithContext(ctx context.Context) ConfigurationParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationParameterArrayOutput)
}

// Represents a configuration parameter.
type ConfigurationParameterResponse struct {
	// Name of the configuration parameter.
	Name *string `pulumi:"name"`
	// Value of the configuration parameter.
	Value *string `pulumi:"value"`
}

// Represents a configuration parameter.
type ConfigurationParameterResponseOutput struct{ *pulumi.OutputState }

func (ConfigurationParameterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationParameterResponse)(nil)).Elem()
}

func (o ConfigurationParameterResponseOutput) ToConfigurationParameterResponseOutput() ConfigurationParameterResponseOutput {
	return o
}

func (o ConfigurationParameterResponseOutput) ToConfigurationParameterResponseOutputWithContext(ctx context.Context) ConfigurationParameterResponseOutput {
	return o
}

// Name of the configuration parameter.
func (o ConfigurationParameterResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationParameterResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value of the configuration parameter.
func (o ConfigurationParameterResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationParameterResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ConfigurationParameterResponseArrayOutput struct{ *pulumi.OutputState }

func (ConfigurationParameterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigurationParameterResponse)(nil)).Elem()
}

func (o ConfigurationParameterResponseArrayOutput) ToConfigurationParameterResponseArrayOutput() ConfigurationParameterResponseArrayOutput {
	return o
}

func (o ConfigurationParameterResponseArrayOutput) ToConfigurationParameterResponseArrayOutputWithContext(ctx context.Context) ConfigurationParameterResponseArrayOutput {
	return o
}

func (o ConfigurationParameterResponseArrayOutput) Index(i pulumi.IntInput) ConfigurationParameterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigurationParameterResponse {
		return vs[0].([]ConfigurationParameterResponse)[vs[1].(int)]
	}).(ConfigurationParameterResponseOutput)
}

// Configuration setting of LCM (Local Configuration Manager).
type ConfigurationSetting struct {
	// Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration and StopConfiguration
	ActionAfterReboot *string `pulumi:"actionAfterReboot"`
	// If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node. Otherwise, false
	AllowModuleOverwrite *string `pulumi:"allowModuleOverwrite"`
	// Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.
	ConfigurationMode *string `pulumi:"configurationMode"`
	// How often, in minutes, the current configuration is checked and applied. This property is ignored if the ConfigurationMode property is set to ApplyOnly. The default value is 15.
	ConfigurationModeFrequencyMins *float64 `pulumi:"configurationModeFrequencyMins"`
	// Set this to true to automatically reboot the node after a configuration that requires reboot is applied. Otherwise, you will have to manually reboot the node for any configuration that requires it. The default value is false. To use this setting when a reboot condition is enacted by something other than DSC (such as Windows Installer), combine this setting with the xPendingReboot module.
	RebootIfNeeded *string `pulumi:"rebootIfNeeded"`
	// The time interval, in minutes, at which the LCM checks a pull service to get updated configurations. This value is ignored if the LCM is not configured in pull mode. The default value is 30.
	RefreshFrequencyMins *float64 `pulumi:"refreshFrequencyMins"`
}

// ConfigurationSettingInput is an input type that accepts ConfigurationSettingArgs and ConfigurationSettingOutput values.
// You can construct a concrete instance of `ConfigurationSettingInput` via:
//
//          ConfigurationSettingArgs{...}
type ConfigurationSettingInput interface {
	pulumi.Input

	ToConfigurationSettingOutput() ConfigurationSettingOutput
	ToConfigurationSettingOutputWithContext(context.Context) ConfigurationSettingOutput
}

// Configuration setting of LCM (Local Configuration Manager).
type ConfigurationSettingArgs struct {
	// Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration and StopConfiguration
	ActionAfterReboot pulumi.StringPtrInput `pulumi:"actionAfterReboot"`
	// If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node. Otherwise, false
	AllowModuleOverwrite pulumi.StringPtrInput `pulumi:"allowModuleOverwrite"`
	// Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.
	ConfigurationMode pulumi.StringPtrInput `pulumi:"configurationMode"`
	// How often, in minutes, the current configuration is checked and applied. This property is ignored if the ConfigurationMode property is set to ApplyOnly. The default value is 15.
	ConfigurationModeFrequencyMins pulumi.Float64PtrInput `pulumi:"configurationModeFrequencyMins"`
	// Set this to true to automatically reboot the node after a configuration that requires reboot is applied. Otherwise, you will have to manually reboot the node for any configuration that requires it. The default value is false. To use this setting when a reboot condition is enacted by something other than DSC (such as Windows Installer), combine this setting with the xPendingReboot module.
	RebootIfNeeded pulumi.StringPtrInput `pulumi:"rebootIfNeeded"`
	// The time interval, in minutes, at which the LCM checks a pull service to get updated configurations. This value is ignored if the LCM is not configured in pull mode. The default value is 30.
	RefreshFrequencyMins pulumi.Float64PtrInput `pulumi:"refreshFrequencyMins"`
}

func (ConfigurationSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationSetting)(nil)).Elem()
}

func (i ConfigurationSettingArgs) ToConfigurationSettingOutput() ConfigurationSettingOutput {
	return i.ToConfigurationSettingOutputWithContext(context.Background())
}

func (i ConfigurationSettingArgs) ToConfigurationSettingOutputWithContext(ctx context.Context) ConfigurationSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationSettingOutput)
}

func (i ConfigurationSettingArgs) ToConfigurationSettingPtrOutput() ConfigurationSettingPtrOutput {
	return i.ToConfigurationSettingPtrOutputWithContext(context.Background())
}

func (i ConfigurationSettingArgs) ToConfigurationSettingPtrOutputWithContext(ctx context.Context) ConfigurationSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationSettingOutput).ToConfigurationSettingPtrOutputWithContext(ctx)
}

// ConfigurationSettingPtrInput is an input type that accepts ConfigurationSettingArgs, ConfigurationSettingPtr and ConfigurationSettingPtrOutput values.
// You can construct a concrete instance of `ConfigurationSettingPtrInput` via:
//
//          ConfigurationSettingArgs{...}
//
//  or:
//
//          nil
type ConfigurationSettingPtrInput interface {
	pulumi.Input

	ToConfigurationSettingPtrOutput() ConfigurationSettingPtrOutput
	ToConfigurationSettingPtrOutputWithContext(context.Context) ConfigurationSettingPtrOutput
}

type configurationSettingPtrType ConfigurationSettingArgs

func ConfigurationSettingPtr(v *ConfigurationSettingArgs) ConfigurationSettingPtrInput {
	return (*configurationSettingPtrType)(v)
}

func (*configurationSettingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationSetting)(nil)).Elem()
}

func (i *configurationSettingPtrType) ToConfigurationSettingPtrOutput() ConfigurationSettingPtrOutput {
	return i.ToConfigurationSettingPtrOutputWithContext(context.Background())
}

func (i *configurationSettingPtrType) ToConfigurationSettingPtrOutputWithContext(ctx context.Context) ConfigurationSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationSettingPtrOutput)
}

// Configuration setting of LCM (Local Configuration Manager).
type ConfigurationSettingResponse struct {
	// Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration and StopConfiguration
	ActionAfterReboot *string `pulumi:"actionAfterReboot"`
	// If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node. Otherwise, false
	AllowModuleOverwrite *string `pulumi:"allowModuleOverwrite"`
	// Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.
	ConfigurationMode *string `pulumi:"configurationMode"`
	// How often, in minutes, the current configuration is checked and applied. This property is ignored if the ConfigurationMode property is set to ApplyOnly. The default value is 15.
	ConfigurationModeFrequencyMins *float64 `pulumi:"configurationModeFrequencyMins"`
	// Set this to true to automatically reboot the node after a configuration that requires reboot is applied. Otherwise, you will have to manually reboot the node for any configuration that requires it. The default value is false. To use this setting when a reboot condition is enacted by something other than DSC (such as Windows Installer), combine this setting with the xPendingReboot module.
	RebootIfNeeded *string `pulumi:"rebootIfNeeded"`
	// The time interval, in minutes, at which the LCM checks a pull service to get updated configurations. This value is ignored if the LCM is not configured in pull mode. The default value is 30.
	RefreshFrequencyMins *float64 `pulumi:"refreshFrequencyMins"`
}

// Configuration setting of LCM (Local Configuration Manager).
type ConfigurationSettingResponseOutput struct{ *pulumi.OutputState }

func (ConfigurationSettingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationSettingResponse)(nil)).Elem()
}

func (o ConfigurationSettingResponseOutput) ToConfigurationSettingResponseOutput() ConfigurationSettingResponseOutput {
	return o
}

func (o ConfigurationSettingResponseOutput) ToConfigurationSettingResponseOutputWithContext(ctx context.Context) ConfigurationSettingResponseOutput {
	return o
}

func (o ConfigurationSettingResponseOutput) ToConfigurationSettingResponsePtrOutput() ConfigurationSettingResponsePtrOutput {
	return o.ToConfigurationSettingResponsePtrOutputWithContext(context.Background())
}

func (o ConfigurationSettingResponseOutput) ToConfigurationSettingResponsePtrOutputWithContext(ctx context.Context) ConfigurationSettingResponsePtrOutput {
	return o.ApplyT(func(v ConfigurationSettingResponse) *ConfigurationSettingResponse {
		return &v
	}).(ConfigurationSettingResponsePtrOutput)
}

// Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration and StopConfiguration
func (o ConfigurationSettingResponseOutput) ActionAfterReboot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationSettingResponse) *string { return v.ActionAfterReboot }).(pulumi.StringPtrOutput)
}

// If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node. Otherwise, false
func (o ConfigurationSettingResponseOutput) AllowModuleOverwrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationSettingResponse) *string { return v.AllowModuleOverwrite }).(pulumi.StringPtrOutput)
}

// Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.
func (o ConfigurationSettingResponseOutput) ConfigurationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationSettingResponse) *string { return v.ConfigurationMode }).(pulumi.StringPtrOutput)
}

// How often, in minutes, the current configuration is checked and applied. This property is ignored if the ConfigurationMode property is set to ApplyOnly. The default value is 15.
func (o ConfigurationSettingResponseOutput) ConfigurationModeFrequencyMins() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ConfigurationSettingResponse) *float64 { return v.ConfigurationModeFrequencyMins }).(pulumi.Float64PtrOutput)
}

// Set this to true to automatically reboot the node after a configuration that requires reboot is applied. Otherwise, you will have to manually reboot the node for any configuration that requires it. The default value is false. To use this setting when a reboot condition is enacted by something other than DSC (such as Windows Installer), combine this setting with the xPendingReboot module.
func (o ConfigurationSettingResponseOutput) RebootIfNeeded() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationSettingResponse) *string { return v.RebootIfNeeded }).(pulumi.StringPtrOutput)
}

// The time interval, in minutes, at which the LCM checks a pull service to get updated configurations. This value is ignored if the LCM is not configured in pull mode. The default value is 30.
func (o ConfigurationSettingResponseOutput) RefreshFrequencyMins() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ConfigurationSettingResponse) *float64 { return v.RefreshFrequencyMins }).(pulumi.Float64PtrOutput)
}

type ConfigurationSettingResponsePtrOutput struct{ *pulumi.OutputState }

func (ConfigurationSettingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationSettingResponse)(nil)).Elem()
}

func (o ConfigurationSettingResponsePtrOutput) ToConfigurationSettingResponsePtrOutput() ConfigurationSettingResponsePtrOutput {
	return o
}

func (o ConfigurationSettingResponsePtrOutput) ToConfigurationSettingResponsePtrOutputWithContext(ctx context.Context) ConfigurationSettingResponsePtrOutput {
	return o
}

func (o ConfigurationSettingResponsePtrOutput) Elem() ConfigurationSettingResponseOutput {
	return o.ApplyT(func(v *ConfigurationSettingResponse) ConfigurationSettingResponse { return *v }).(ConfigurationSettingResponseOutput)
}

// Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration and StopConfiguration
func (o ConfigurationSettingResponsePtrOutput) ActionAfterReboot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationSettingResponse) *string {
		if v == nil {
			return nil
		}
		return v.ActionAfterReboot
	}).(pulumi.StringPtrOutput)
}

// If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node. Otherwise, false
func (o ConfigurationSettingResponsePtrOutput) AllowModuleOverwrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationSettingResponse) *string {
		if v == nil {
			return nil
		}
		return v.AllowModuleOverwrite
	}).(pulumi.StringPtrOutput)
}

// Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.
func (o ConfigurationSettingResponsePtrOutput) ConfigurationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationSettingResponse) *string {
		if v == nil {
			return nil
		}
		return v.ConfigurationMode
	}).(pulumi.StringPtrOutput)
}

// How often, in minutes, the current configuration is checked and applied. This property is ignored if the ConfigurationMode property is set to ApplyOnly. The default value is 15.
func (o ConfigurationSettingResponsePtrOutput) ConfigurationModeFrequencyMins() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ConfigurationSettingResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.ConfigurationModeFrequencyMins
	}).(pulumi.Float64PtrOutput)
}

// Set this to true to automatically reboot the node after a configuration that requires reboot is applied. Otherwise, you will have to manually reboot the node for any configuration that requires it. The default value is false. To use this setting when a reboot condition is enacted by something other than DSC (such as Windows Installer), combine this setting with the xPendingReboot module.
func (o ConfigurationSettingResponsePtrOutput) RebootIfNeeded() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationSettingResponse) *string {
		if v == nil {
			return nil
		}
		return v.RebootIfNeeded
	}).(pulumi.StringPtrOutput)
}

// The time interval, in minutes, at which the LCM checks a pull service to get updated configurations. This value is ignored if the LCM is not configured in pull mode. The default value is 30.
func (o ConfigurationSettingResponsePtrOutput) RefreshFrequencyMins() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ConfigurationSettingResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.RefreshFrequencyMins
	}).(pulumi.Float64PtrOutput)
}

// Data used when creating a disk.
type CreationData struct {
	// This enumerates the possible sources of a disk's creation.
	CreateOption string `pulumi:"createOption"`
	// Required if creating from a Gallery Image. The id of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
	GalleryImageReference *ImageDiskReference `pulumi:"galleryImageReference"`
	// Disk source information.
	ImageReference *ImageDiskReference `pulumi:"imageReference"`
	// Logical sector size in bytes for Ultra disks. Supported values are 512 ad 4096. 4096 is the default.
	LogicalSectorSize *int `pulumi:"logicalSectorSize"`
	// If createOption is Copy, this is the ARM id of the source snapshot or disk.
	SourceResourceId *string `pulumi:"sourceResourceId"`
	// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
	SourceUri *string `pulumi:"sourceUri"`
	// Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
	StorageAccountId *string `pulumi:"storageAccountId"`
	// If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
	UploadSizeBytes *int `pulumi:"uploadSizeBytes"`
}

// CreationDataInput is an input type that accepts CreationDataArgs and CreationDataOutput values.
// You can construct a concrete instance of `CreationDataInput` via:
//
//          CreationDataArgs{...}
type CreationDataInput interface {
	pulumi.Input

	ToCreationDataOutput() CreationDataOutput
	ToCreationDataOutputWithContext(context.Context) CreationDataOutput
}

// Data used when creating a disk.
type CreationDataArgs struct {
	// This enumerates the possible sources of a disk's creation.
	CreateOption pulumi.StringInput `pulumi:"createOption"`
	// Required if creating from a Gallery Image. The id of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
	GalleryImageReference ImageDiskReferencePtrInput `pulumi:"galleryImageReference"`
	// Disk source information.
	ImageReference ImageDiskReferencePtrInput `pulumi:"imageReference"`
	// Logical sector size in bytes for Ultra disks. Supported values are 512 ad 4096. 4096 is the default.
	LogicalSectorSize pulumi.IntPtrInput `pulumi:"logicalSectorSize"`
	// If createOption is Copy, this is the ARM id of the source snapshot or disk.
	SourceResourceId pulumi.StringPtrInput `pulumi:"sourceResourceId"`
	// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
	SourceUri pulumi.StringPtrInput `pulumi:"sourceUri"`
	// Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
	StorageAccountId pulumi.StringPtrInput `pulumi:"storageAccountId"`
	// If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
	UploadSizeBytes pulumi.IntPtrInput `pulumi:"uploadSizeBytes"`
}

func (CreationDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CreationData)(nil)).Elem()
}

func (i CreationDataArgs) ToCreationDataOutput() CreationDataOutput {
	return i.ToCreationDataOutputWithContext(context.Background())
}

func (i CreationDataArgs) ToCreationDataOutputWithContext(ctx context.Context) CreationDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreationDataOutput)
}

func (i CreationDataArgs) ToCreationDataPtrOutput() CreationDataPtrOutput {
	return i.ToCreationDataPtrOutputWithContext(context.Background())
}

func (i CreationDataArgs) ToCreationDataPtrOutputWithContext(ctx context.Context) CreationDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreationDataOutput).ToCreationDataPtrOutputWithContext(ctx)
}

// CreationDataPtrInput is an input type that accepts CreationDataArgs, CreationDataPtr and CreationDataPtrOutput values.
// You can construct a concrete instance of `CreationDataPtrInput` via:
//
//          CreationDataArgs{...}
//
//  or:
//
//          nil
type CreationDataPtrInput interface {
	pulumi.Input

	ToCreationDataPtrOutput() CreationDataPtrOutput
	ToCreationDataPtrOutputWithContext(context.Context) CreationDataPtrOutput
}

type creationDataPtrType CreationDataArgs

func CreationDataPtr(v *CreationDataArgs) CreationDataPtrInput {
	return (*creationDataPtrType)(v)
}

func (*creationDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CreationData)(nil)).Elem()
}

func (i *creationDataPtrType) ToCreationDataPtrOutput() CreationDataPtrOutput {
	return i.ToCreationDataPtrOutputWithContext(context.Background())
}

func (i *creationDataPtrType) ToCreationDataPtrOutputWithContext(ctx context.Context) CreationDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreationDataPtrOutput)
}

// Data used when creating a disk.
type CreationDataResponse struct {
	// This enumerates the possible sources of a disk's creation.
	CreateOption string `pulumi:"createOption"`
	// Required if creating from a Gallery Image. The id of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
	GalleryImageReference *ImageDiskReferenceResponse `pulumi:"galleryImageReference"`
	// Disk source information.
	ImageReference *ImageDiskReferenceResponse `pulumi:"imageReference"`
	// Logical sector size in bytes for Ultra disks. Supported values are 512 ad 4096. 4096 is the default.
	LogicalSectorSize *int `pulumi:"logicalSectorSize"`
	// If createOption is Copy, this is the ARM id of the source snapshot or disk.
	SourceResourceId *string `pulumi:"sourceResourceId"`
	// If this field is set, this is the unique id identifying the source of this resource.
	SourceUniqueId string `pulumi:"sourceUniqueId"`
	// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
	SourceUri *string `pulumi:"sourceUri"`
	// Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
	StorageAccountId *string `pulumi:"storageAccountId"`
	// If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
	UploadSizeBytes *int `pulumi:"uploadSizeBytes"`
}

// Data used when creating a disk.
type CreationDataResponseOutput struct{ *pulumi.OutputState }

func (CreationDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreationDataResponse)(nil)).Elem()
}

func (o CreationDataResponseOutput) ToCreationDataResponseOutput() CreationDataResponseOutput {
	return o
}

func (o CreationDataResponseOutput) ToCreationDataResponseOutputWithContext(ctx context.Context) CreationDataResponseOutput {
	return o
}

func (o CreationDataResponseOutput) ToCreationDataResponsePtrOutput() CreationDataResponsePtrOutput {
	return o.ToCreationDataResponsePtrOutputWithContext(context.Background())
}

func (o CreationDataResponseOutput) ToCreationDataResponsePtrOutputWithContext(ctx context.Context) CreationDataResponsePtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *CreationDataResponse {
		return &v
	}).(CreationDataResponsePtrOutput)
}

// This enumerates the possible sources of a disk's creation.
func (o CreationDataResponseOutput) CreateOption() pulumi.StringOutput {
	return o.ApplyT(func(v CreationDataResponse) string { return v.CreateOption }).(pulumi.StringOutput)
}

// Required if creating from a Gallery Image. The id of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
func (o CreationDataResponseOutput) GalleryImageReference() ImageDiskReferenceResponsePtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *ImageDiskReferenceResponse { return v.GalleryImageReference }).(ImageDiskReferenceResponsePtrOutput)
}

// Disk source information.
func (o CreationDataResponseOutput) ImageReference() ImageDiskReferenceResponsePtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *ImageDiskReferenceResponse { return v.ImageReference }).(ImageDiskReferenceResponsePtrOutput)
}

// Logical sector size in bytes for Ultra disks. Supported values are 512 ad 4096. 4096 is the default.
func (o CreationDataResponseOutput) LogicalSectorSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *int { return v.LogicalSectorSize }).(pulumi.IntPtrOutput)
}

// If createOption is Copy, this is the ARM id of the source snapshot or disk.
func (o CreationDataResponseOutput) SourceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *string { return v.SourceResourceId }).(pulumi.StringPtrOutput)
}

// If this field is set, this is the unique id identifying the source of this resource.
func (o CreationDataResponseOutput) SourceUniqueId() pulumi.StringOutput {
	return o.ApplyT(func(v CreationDataResponse) string { return v.SourceUniqueId }).(pulumi.StringOutput)
}

// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
func (o CreationDataResponseOutput) SourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *string { return v.SourceUri }).(pulumi.StringPtrOutput)
}

// Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
func (o CreationDataResponseOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *string { return v.StorageAccountId }).(pulumi.StringPtrOutput)
}

// If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
func (o CreationDataResponseOutput) UploadSizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *int { return v.UploadSizeBytes }).(pulumi.IntPtrOutput)
}

type CreationDataResponsePtrOutput struct{ *pulumi.OutputState }

func (CreationDataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CreationDataResponse)(nil)).Elem()
}

func (o CreationDataResponsePtrOutput) ToCreationDataResponsePtrOutput() CreationDataResponsePtrOutput {
	return o
}

func (o CreationDataResponsePtrOutput) ToCreationDataResponsePtrOutputWithContext(ctx context.Context) CreationDataResponsePtrOutput {
	return o
}

func (o CreationDataResponsePtrOutput) Elem() CreationDataResponseOutput {
	return o.ApplyT(func(v *CreationDataResponse) CreationDataResponse { return *v }).(CreationDataResponseOutput)
}

// This enumerates the possible sources of a disk's creation.
func (o CreationDataResponsePtrOutput) CreateOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationDataResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreateOption
	}).(pulumi.StringPtrOutput)
}

// Required if creating from a Gallery Image. The id of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
func (o CreationDataResponsePtrOutput) GalleryImageReference() ImageDiskReferenceResponsePtrOutput {
	return o.ApplyT(func(v *CreationDataResponse) *ImageDiskReferenceResponse {
		if v == nil {
			return nil
		}
		return v.GalleryImageReference
	}).(ImageDiskReferenceResponsePtrOutput)
}

// Disk source information.
func (o CreationDataResponsePtrOutput) ImageReference() ImageDiskReferenceResponsePtrOutput {
	return o.ApplyT(func(v *CreationDataResponse) *ImageDiskReferenceResponse {
		if v == nil {
			return nil
		}
		return v.ImageReference
	}).(ImageDiskReferenceResponsePtrOutput)
}

// Logical sector size in bytes for Ultra disks. Supported values are 512 ad 4096. 4096 is the default.
func (o CreationDataResponsePtrOutput) LogicalSectorSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CreationDataResponse) *int {
		if v == nil {
			return nil
		}
		return v.LogicalSectorSize
	}).(pulumi.IntPtrOutput)
}

// If createOption is Copy, this is the ARM id of the source snapshot or disk.
func (o CreationDataResponsePtrOutput) SourceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.SourceResourceId
	}).(pulumi.StringPtrOutput)
}

// If this field is set, this is the unique id identifying the source of this resource.
func (o CreationDataResponsePtrOutput) SourceUniqueId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationDataResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SourceUniqueId
	}).(pulumi.StringPtrOutput)
}

// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
func (o CreationDataResponsePtrOutput) SourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.SourceUri
	}).(pulumi.StringPtrOutput)
}

// Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
func (o CreationDataResponsePtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

// If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
func (o CreationDataResponsePtrOutput) UploadSizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CreationDataResponse) *int {
		if v == nil {
			return nil
		}
		return v.UploadSizeBytes
	}).(pulumi.IntPtrOutput)
}

// Describes a data disk.
type DataDisk struct {
	// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
	Caching *string `pulumi:"caching"`
	// Specifies how the virtual machine should be created.<br><br> Possible values are:<br><br> **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.<br><br> **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
	CreateOption string `pulumi:"createOption"`
	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
	Image *VirtualHardDisk `pulumi:"image"`
	// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
	Lun int `pulumi:"lun"`
	// The managed disk parameters.
	ManagedDisk *ManagedDiskParameters `pulumi:"managedDisk"`
	// The disk name.
	Name *string `pulumi:"name"`
	// Specifies whether the data disk is in process of detachment from the VirtualMachine/VirtualMachineScaleset
	ToBeDetached *bool `pulumi:"toBeDetached"`
	// The virtual hard disk.
	Vhd *VirtualHardDisk `pulumi:"vhd"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool `pulumi:"writeAcceleratorEnabled"`
}

// DataDiskInput is an input type that accepts DataDiskArgs and DataDiskOutput values.
// You can construct a concrete instance of `DataDiskInput` via:
//
//          DataDiskArgs{...}
type DataDiskInput interface {
	pulumi.Input

	ToDataDiskOutput() DataDiskOutput
	ToDataDiskOutputWithContext(context.Context) DataDiskOutput
}

// Describes a data disk.
type DataDiskArgs struct {
	// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
	Caching pulumi.StringPtrInput `pulumi:"caching"`
	// Specifies how the virtual machine should be created.<br><br> Possible values are:<br><br> **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.<br><br> **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
	CreateOption pulumi.StringInput `pulumi:"createOption"`
	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
	DiskSizeGB pulumi.IntPtrInput `pulumi:"diskSizeGB"`
	// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
	Image VirtualHardDiskPtrInput `pulumi:"image"`
	// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
	Lun pulumi.IntInput `pulumi:"lun"`
	// The managed disk parameters.
	ManagedDisk ManagedDiskParametersPtrInput `pulumi:"managedDisk"`
	// The disk name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies whether the data disk is in process of detachment from the VirtualMachine/VirtualMachineScaleset
	ToBeDetached pulumi.BoolPtrInput `pulumi:"toBeDetached"`
	// The virtual hard disk.
	Vhd VirtualHardDiskPtrInput `pulumi:"vhd"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled pulumi.BoolPtrInput `pulumi:"writeAcceleratorEnabled"`
}

func (DataDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDisk)(nil)).Elem()
}

func (i DataDiskArgs) ToDataDiskOutput() DataDiskOutput {
	return i.ToDataDiskOutputWithContext(context.Background())
}

func (i DataDiskArgs) ToDataDiskOutputWithContext(ctx context.Context) DataDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDiskOutput)
}

// DataDiskArrayInput is an input type that accepts DataDiskArray and DataDiskArrayOutput values.
// You can construct a concrete instance of `DataDiskArrayInput` via:
//
//          DataDiskArray{ DataDiskArgs{...} }
type DataDiskArrayInput interface {
	pulumi.Input

	ToDataDiskArrayOutput() DataDiskArrayOutput
	ToDataDiskArrayOutputWithContext(context.Context) DataDiskArrayOutput
}

type DataDiskArray []DataDiskInput

func (DataDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataDisk)(nil)).Elem()
}

func (i DataDiskArray) ToDataDiskArrayOutput() DataDiskArrayOutput {
	return i.ToDataDiskArrayOutputWithContext(context.Background())
}

func (i DataDiskArray) ToDataDiskArrayOutputWithContext(ctx context.Context) DataDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDiskArrayOutput)
}

// Contains encryption settings for a data disk image.
type DataDiskImageEncryption struct {
	// A relative URI containing the resource ID of the disk encryption set.
	DiskEncryptionSetId *string `pulumi:"diskEncryptionSetId"`
	// This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
	Lun int `pulumi:"lun"`
}

// DataDiskImageEncryptionInput is an input type that accepts DataDiskImageEncryptionArgs and DataDiskImageEncryptionOutput values.
// You can construct a concrete instance of `DataDiskImageEncryptionInput` via:
//
//          DataDiskImageEncryptionArgs{...}
type DataDiskImageEncryptionInput interface {
	pulumi.Input

	ToDataDiskImageEncryptionOutput() DataDiskImageEncryptionOutput
	ToDataDiskImageEncryptionOutputWithContext(context.Context) DataDiskImageEncryptionOutput
}

// Contains encryption settings for a data disk image.
type DataDiskImageEncryptionArgs struct {
	// A relative URI containing the resource ID of the disk encryption set.
	DiskEncryptionSetId pulumi.StringPtrInput `pulumi:"diskEncryptionSetId"`
	// This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
	Lun pulumi.IntInput `pulumi:"lun"`
}

func (DataDiskImageEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDiskImageEncryption)(nil)).Elem()
}

func (i DataDiskImageEncryptionArgs) ToDataDiskImageEncryptionOutput() DataDiskImageEncryptionOutput {
	return i.ToDataDiskImageEncryptionOutputWithContext(context.Background())
}

func (i DataDiskImageEncryptionArgs) ToDataDiskImageEncryptionOutputWithContext(ctx context.Context) DataDiskImageEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDiskImageEncryptionOutput)
}

// DataDiskImageEncryptionArrayInput is an input type that accepts DataDiskImageEncryptionArray and DataDiskImageEncryptionArrayOutput values.
// You can construct a concrete instance of `DataDiskImageEncryptionArrayInput` via:
//
//          DataDiskImageEncryptionArray{ DataDiskImageEncryptionArgs{...} }
type DataDiskImageEncryptionArrayInput interface {
	pulumi.Input

	ToDataDiskImageEncryptionArrayOutput() DataDiskImageEncryptionArrayOutput
	ToDataDiskImageEncryptionArrayOutputWithContext(context.Context) DataDiskImageEncryptionArrayOutput
}

type DataDiskImageEncryptionArray []DataDiskImageEncryptionInput

func (DataDiskImageEncryptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataDiskImageEncryption)(nil)).Elem()
}

func (i DataDiskImageEncryptionArray) ToDataDiskImageEncryptionArrayOutput() DataDiskImageEncryptionArrayOutput {
	return i.ToDataDiskImageEncryptionArrayOutputWithContext(context.Background())
}

func (i DataDiskImageEncryptionArray) ToDataDiskImageEncryptionArrayOutputWithContext(ctx context.Context) DataDiskImageEncryptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDiskImageEncryptionArrayOutput)
}

// Contains encryption settings for a data disk image.
type DataDiskImageEncryptionResponse struct {
	// A relative URI containing the resource ID of the disk encryption set.
	DiskEncryptionSetId *string `pulumi:"diskEncryptionSetId"`
	// This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
	Lun int `pulumi:"lun"`
}

// Contains encryption settings for a data disk image.
type DataDiskImageEncryptionResponseOutput struct{ *pulumi.OutputState }

func (DataDiskImageEncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDiskImageEncryptionResponse)(nil)).Elem()
}

func (o DataDiskImageEncryptionResponseOutput) ToDataDiskImageEncryptionResponseOutput() DataDiskImageEncryptionResponseOutput {
	return o
}

func (o DataDiskImageEncryptionResponseOutput) ToDataDiskImageEncryptionResponseOutputWithContext(ctx context.Context) DataDiskImageEncryptionResponseOutput {
	return o
}

// A relative URI containing the resource ID of the disk encryption set.
func (o DataDiskImageEncryptionResponseOutput) DiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataDiskImageEncryptionResponse) *string { return v.DiskEncryptionSetId }).(pulumi.StringPtrOutput)
}

// This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
func (o DataDiskImageEncryptionResponseOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v DataDiskImageEncryptionResponse) int { return v.Lun }).(pulumi.IntOutput)
}

type DataDiskImageEncryptionResponseArrayOutput struct{ *pulumi.OutputState }

func (DataDiskImageEncryptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataDiskImageEncryptionResponse)(nil)).Elem()
}

func (o DataDiskImageEncryptionResponseArrayOutput) ToDataDiskImageEncryptionResponseArrayOutput() DataDiskImageEncryptionResponseArrayOutput {
	return o
}

func (o DataDiskImageEncryptionResponseArrayOutput) ToDataDiskImageEncryptionResponseArrayOutputWithContext(ctx context.Context) DataDiskImageEncryptionResponseArrayOutput {
	return o
}

func (o DataDiskImageEncryptionResponseArrayOutput) Index(i pulumi.IntInput) DataDiskImageEncryptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataDiskImageEncryptionResponse {
		return vs[0].([]DataDiskImageEncryptionResponse)[vs[1].(int)]
	}).(DataDiskImageEncryptionResponseOutput)
}

// Describes a data disk.
type DataDiskResponse struct {
	// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
	Caching *string `pulumi:"caching"`
	// Specifies how the virtual machine should be created.<br><br> Possible values are:<br><br> **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.<br><br> **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
	CreateOption string `pulumi:"createOption"`
	// Specifies the Read-Write IOPS for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the VirtualMachine Scale Set.
	DiskIOPSReadWrite int `pulumi:"diskIOPSReadWrite"`
	// Specifies the bandwidth in MB per second for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the VirtualMachine Scale Set.
	DiskMBpsReadWrite int `pulumi:"diskMBpsReadWrite"`
	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
	Image *VirtualHardDiskResponse `pulumi:"image"`
	// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
	Lun int `pulumi:"lun"`
	// The managed disk parameters.
	ManagedDisk *ManagedDiskParametersResponse `pulumi:"managedDisk"`
	// The disk name.
	Name *string `pulumi:"name"`
	// Specifies whether the data disk is in process of detachment from the VirtualMachine/VirtualMachineScaleset
	ToBeDetached *bool `pulumi:"toBeDetached"`
	// The virtual hard disk.
	Vhd *VirtualHardDiskResponse `pulumi:"vhd"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool `pulumi:"writeAcceleratorEnabled"`
}

// Describes a data disk.
type DataDiskResponseOutput struct{ *pulumi.OutputState }

func (DataDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDiskResponse)(nil)).Elem()
}

func (o DataDiskResponseOutput) ToDataDiskResponseOutput() DataDiskResponseOutput {
	return o
}

func (o DataDiskResponseOutput) ToDataDiskResponseOutputWithContext(ctx context.Context) DataDiskResponseOutput {
	return o
}

// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
func (o DataDiskResponseOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataDiskResponse) *string { return v.Caching }).(pulumi.StringPtrOutput)
}

// Specifies how the virtual machine should be created.<br><br> Possible values are:<br><br> **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.<br><br> **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
func (o DataDiskResponseOutput) CreateOption() pulumi.StringOutput {
	return o.ApplyT(func(v DataDiskResponse) string { return v.CreateOption }).(pulumi.StringOutput)
}

// Specifies the Read-Write IOPS for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the VirtualMachine Scale Set.
func (o DataDiskResponseOutput) DiskIOPSReadWrite() pulumi.IntOutput {
	return o.ApplyT(func(v DataDiskResponse) int { return v.DiskIOPSReadWrite }).(pulumi.IntOutput)
}

// Specifies the bandwidth in MB per second for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the VirtualMachine Scale Set.
func (o DataDiskResponseOutput) DiskMBpsReadWrite() pulumi.IntOutput {
	return o.ApplyT(func(v DataDiskResponse) int { return v.DiskMBpsReadWrite }).(pulumi.IntOutput)
}

// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
func (o DataDiskResponseOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DataDiskResponse) *int { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
func (o DataDiskResponseOutput) Image() VirtualHardDiskResponsePtrOutput {
	return o.ApplyT(func(v DataDiskResponse) *VirtualHardDiskResponse { return v.Image }).(VirtualHardDiskResponsePtrOutput)
}

// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
func (o DataDiskResponseOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v DataDiskResponse) int { return v.Lun }).(pulumi.IntOutput)
}

// The managed disk parameters.
func (o DataDiskResponseOutput) ManagedDisk() ManagedDiskParametersResponsePtrOutput {
	return o.ApplyT(func(v DataDiskResponse) *ManagedDiskParametersResponse { return v.ManagedDisk }).(ManagedDiskParametersResponsePtrOutput)
}

// The disk name.
func (o DataDiskResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataDiskResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies whether the data disk is in process of detachment from the VirtualMachine/VirtualMachineScaleset
func (o DataDiskResponseOutput) ToBeDetached() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataDiskResponse) *bool { return v.ToBeDetached }).(pulumi.BoolPtrOutput)
}

// The virtual hard disk.
func (o DataDiskResponseOutput) Vhd() VirtualHardDiskResponsePtrOutput {
	return o.ApplyT(func(v DataDiskResponse) *VirtualHardDiskResponse { return v.Vhd }).(VirtualHardDiskResponsePtrOutput)
}

// Specifies whether writeAccelerator should be enabled or disabled on the disk.
func (o DataDiskResponseOutput) WriteAcceleratorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataDiskResponse) *bool { return v.WriteAcceleratorEnabled }).(pulumi.BoolPtrOutput)
}

type DataDiskResponseArrayOutput struct{ *pulumi.OutputState }

func (DataDiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataDiskResponse)(nil)).Elem()
}

func (o DataDiskResponseArrayOutput) ToDataDiskResponseArrayOutput() DataDiskResponseArrayOutput {
	return o
}

func (o DataDiskResponseArrayOutput) ToDataDiskResponseArrayOutputWithContext(ctx context.Context) DataDiskResponseArrayOutput {
	return o
}

func (o DataDiskResponseArrayOutput) Index(i pulumi.IntInput) DataDiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataDiskResponse {
		return vs[0].([]DataDiskResponse)[vs[1].(int)]
	}).(DataDiskResponseOutput)
}

// Represents the dedicated host unutilized capacity in terms of a specific VM size.
type DedicatedHostAllocatableVMResponse struct {
	// Maximum number of VMs of size vmSize that can fit in the dedicated host's remaining capacity.
	Count *float64 `pulumi:"count"`
	// VM size in terms of which the unutilized capacity is represented.
	VmSize *string `pulumi:"vmSize"`
}

// Represents the dedicated host unutilized capacity in terms of a specific VM size.
type DedicatedHostAllocatableVMResponseOutput struct{ *pulumi.OutputState }

func (DedicatedHostAllocatableVMResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DedicatedHostAllocatableVMResponse)(nil)).Elem()
}

func (o DedicatedHostAllocatableVMResponseOutput) ToDedicatedHostAllocatableVMResponseOutput() DedicatedHostAllocatableVMResponseOutput {
	return o
}

func (o DedicatedHostAllocatableVMResponseOutput) ToDedicatedHostAllocatableVMResponseOutputWithContext(ctx context.Context) DedicatedHostAllocatableVMResponseOutput {
	return o
}

// Maximum number of VMs of size vmSize that can fit in the dedicated host's remaining capacity.
func (o DedicatedHostAllocatableVMResponseOutput) Count() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DedicatedHostAllocatableVMResponse) *float64 { return v.Count }).(pulumi.Float64PtrOutput)
}

// VM size in terms of which the unutilized capacity is represented.
func (o DedicatedHostAllocatableVMResponseOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DedicatedHostAllocatableVMResponse) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type DedicatedHostAllocatableVMResponseArrayOutput struct{ *pulumi.OutputState }

func (DedicatedHostAllocatableVMResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DedicatedHostAllocatableVMResponse)(nil)).Elem()
}

func (o DedicatedHostAllocatableVMResponseArrayOutput) ToDedicatedHostAllocatableVMResponseArrayOutput() DedicatedHostAllocatableVMResponseArrayOutput {
	return o
}

func (o DedicatedHostAllocatableVMResponseArrayOutput) ToDedicatedHostAllocatableVMResponseArrayOutputWithContext(ctx context.Context) DedicatedHostAllocatableVMResponseArrayOutput {
	return o
}

func (o DedicatedHostAllocatableVMResponseArrayOutput) Index(i pulumi.IntInput) DedicatedHostAllocatableVMResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DedicatedHostAllocatableVMResponse {
		return vs[0].([]DedicatedHostAllocatableVMResponse)[vs[1].(int)]
	}).(DedicatedHostAllocatableVMResponseOutput)
}

// Dedicated host unutilized capacity.
type DedicatedHostAvailableCapacityResponse struct {
	// The unutilized capacity of the dedicated host represented in terms of each VM size that is allowed to be deployed to the dedicated host.
	AllocatableVMs []DedicatedHostAllocatableVMResponse `pulumi:"allocatableVMs"`
}

// Dedicated host unutilized capacity.
type DedicatedHostAvailableCapacityResponseOutput struct{ *pulumi.OutputState }

func (DedicatedHostAvailableCapacityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DedicatedHostAvailableCapacityResponse)(nil)).Elem()
}

func (o DedicatedHostAvailableCapacityResponseOutput) ToDedicatedHostAvailableCapacityResponseOutput() DedicatedHostAvailableCapacityResponseOutput {
	return o
}

func (o DedicatedHostAvailableCapacityResponseOutput) ToDedicatedHostAvailableCapacityResponseOutputWithContext(ctx context.Context) DedicatedHostAvailableCapacityResponseOutput {
	return o
}

func (o DedicatedHostAvailableCapacityResponseOutput) ToDedicatedHostAvailableCapacityResponsePtrOutput() DedicatedHostAvailableCapacityResponsePtrOutput {
	return o.ToDedicatedHostAvailableCapacityResponsePtrOutputWithContext(context.Background())
}

func (o DedicatedHostAvailableCapacityResponseOutput) ToDedicatedHostAvailableCapacityResponsePtrOutputWithContext(ctx context.Context) DedicatedHostAvailableCapacityResponsePtrOutput {
	return o.ApplyT(func(v DedicatedHostAvailableCapacityResponse) *DedicatedHostAvailableCapacityResponse {
		return &v
	}).(DedicatedHostAvailableCapacityResponsePtrOutput)
}

// The unutilized capacity of the dedicated host represented in terms of each VM size that is allowed to be deployed to the dedicated host.
func (o DedicatedHostAvailableCapacityResponseOutput) AllocatableVMs() DedicatedHostAllocatableVMResponseArrayOutput {
	return o.ApplyT(func(v DedicatedHostAvailableCapacityResponse) []DedicatedHostAllocatableVMResponse {
		return v.AllocatableVMs
	}).(DedicatedHostAllocatableVMResponseArrayOutput)
}

type DedicatedHostAvailableCapacityResponsePtrOutput struct{ *pulumi.OutputState }

func (DedicatedHostAvailableCapacityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedHostAvailableCapacityResponse)(nil)).Elem()
}

func (o DedicatedHostAvailableCapacityResponsePtrOutput) ToDedicatedHostAvailableCapacityResponsePtrOutput() DedicatedHostAvailableCapacityResponsePtrOutput {
	return o
}

func (o DedicatedHostAvailableCapacityResponsePtrOutput) ToDedicatedHostAvailableCapacityResponsePtrOutputWithContext(ctx context.Context) DedicatedHostAvailableCapacityResponsePtrOutput {
	return o
}

func (o DedicatedHostAvailableCapacityResponsePtrOutput) Elem() DedicatedHostAvailableCapacityResponseOutput {
	return o.ApplyT(func(v *DedicatedHostAvailableCapacityResponse) DedicatedHostAvailableCapacityResponse { return *v }).(DedicatedHostAvailableCapacityResponseOutput)
}

// The unutilized capacity of the dedicated host represented in terms of each VM size that is allowed to be deployed to the dedicated host.
func (o DedicatedHostAvailableCapacityResponsePtrOutput) AllocatableVMs() DedicatedHostAllocatableVMResponseArrayOutput {
	return o.ApplyT(func(v *DedicatedHostAvailableCapacityResponse) []DedicatedHostAllocatableVMResponse {
		if v == nil {
			return nil
		}
		return v.AllocatableVMs
	}).(DedicatedHostAllocatableVMResponseArrayOutput)
}

type DedicatedHostGroupInstanceViewResponse struct {
	// List of instance view of the dedicated hosts under the dedicated host group.
	Hosts []DedicatedHostInstanceViewWithNameResponse `pulumi:"hosts"`
}

type DedicatedHostGroupInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (DedicatedHostGroupInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DedicatedHostGroupInstanceViewResponse)(nil)).Elem()
}

func (o DedicatedHostGroupInstanceViewResponseOutput) ToDedicatedHostGroupInstanceViewResponseOutput() DedicatedHostGroupInstanceViewResponseOutput {
	return o
}

func (o DedicatedHostGroupInstanceViewResponseOutput) ToDedicatedHostGroupInstanceViewResponseOutputWithContext(ctx context.Context) DedicatedHostGroupInstanceViewResponseOutput {
	return o
}

func (o DedicatedHostGroupInstanceViewResponseOutput) ToDedicatedHostGroupInstanceViewResponsePtrOutput() DedicatedHostGroupInstanceViewResponsePtrOutput {
	return o.ToDedicatedHostGroupInstanceViewResponsePtrOutputWithContext(context.Background())
}

func (o DedicatedHostGroupInstanceViewResponseOutput) ToDedicatedHostGroupInstanceViewResponsePtrOutputWithContext(ctx context.Context) DedicatedHostGroupInstanceViewResponsePtrOutput {
	return o.ApplyT(func(v DedicatedHostGroupInstanceViewResponse) *DedicatedHostGroupInstanceViewResponse {
		return &v
	}).(DedicatedHostGroupInstanceViewResponsePtrOutput)
}

// List of instance view of the dedicated hosts under the dedicated host group.
func (o DedicatedHostGroupInstanceViewResponseOutput) Hosts() DedicatedHostInstanceViewWithNameResponseArrayOutput {
	return o.ApplyT(func(v DedicatedHostGroupInstanceViewResponse) []DedicatedHostInstanceViewWithNameResponse {
		return v.Hosts
	}).(DedicatedHostInstanceViewWithNameResponseArrayOutput)
}

type DedicatedHostGroupInstanceViewResponsePtrOutput struct{ *pulumi.OutputState }

func (DedicatedHostGroupInstanceViewResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedHostGroupInstanceViewResponse)(nil)).Elem()
}

func (o DedicatedHostGroupInstanceViewResponsePtrOutput) ToDedicatedHostGroupInstanceViewResponsePtrOutput() DedicatedHostGroupInstanceViewResponsePtrOutput {
	return o
}

func (o DedicatedHostGroupInstanceViewResponsePtrOutput) ToDedicatedHostGroupInstanceViewResponsePtrOutputWithContext(ctx context.Context) DedicatedHostGroupInstanceViewResponsePtrOutput {
	return o
}

func (o DedicatedHostGroupInstanceViewResponsePtrOutput) Elem() DedicatedHostGroupInstanceViewResponseOutput {
	return o.ApplyT(func(v *DedicatedHostGroupInstanceViewResponse) DedicatedHostGroupInstanceViewResponse { return *v }).(DedicatedHostGroupInstanceViewResponseOutput)
}

// List of instance view of the dedicated hosts under the dedicated host group.
func (o DedicatedHostGroupInstanceViewResponsePtrOutput) Hosts() DedicatedHostInstanceViewWithNameResponseArrayOutput {
	return o.ApplyT(func(v *DedicatedHostGroupInstanceViewResponse) []DedicatedHostInstanceViewWithNameResponse {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(DedicatedHostInstanceViewWithNameResponseArrayOutput)
}

// The instance view of a dedicated host.
type DedicatedHostInstanceViewResponse struct {
	// Specifies the unique id of the dedicated physical machine on which the dedicated host resides.
	AssetId string `pulumi:"assetId"`
	// Unutilized capacity of the dedicated host.
	AvailableCapacity *DedicatedHostAvailableCapacityResponse `pulumi:"availableCapacity"`
	// The resource status information.
	Statuses []InstanceViewStatusResponse `pulumi:"statuses"`
}

// The instance view of a dedicated host.
type DedicatedHostInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (DedicatedHostInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DedicatedHostInstanceViewResponse)(nil)).Elem()
}

func (o DedicatedHostInstanceViewResponseOutput) ToDedicatedHostInstanceViewResponseOutput() DedicatedHostInstanceViewResponseOutput {
	return o
}

func (o DedicatedHostInstanceViewResponseOutput) ToDedicatedHostInstanceViewResponseOutputWithContext(ctx context.Context) DedicatedHostInstanceViewResponseOutput {
	return o
}

func (o DedicatedHostInstanceViewResponseOutput) ToDedicatedHostInstanceViewResponsePtrOutput() DedicatedHostInstanceViewResponsePtrOutput {
	return o.ToDedicatedHostInstanceViewResponsePtrOutputWithContext(context.Background())
}

func (o DedicatedHostInstanceViewResponseOutput) ToDedicatedHostInstanceViewResponsePtrOutputWithContext(ctx context.Context) DedicatedHostInstanceViewResponsePtrOutput {
	return o.ApplyT(func(v DedicatedHostInstanceViewResponse) *DedicatedHostInstanceViewResponse {
		return &v
	}).(DedicatedHostInstanceViewResponsePtrOutput)
}

// Specifies the unique id of the dedicated physical machine on which the dedicated host resides.
func (o DedicatedHostInstanceViewResponseOutput) AssetId() pulumi.StringOutput {
	return o.ApplyT(func(v DedicatedHostInstanceViewResponse) string { return v.AssetId }).(pulumi.StringOutput)
}

// Unutilized capacity of the dedicated host.
func (o DedicatedHostInstanceViewResponseOutput) AvailableCapacity() DedicatedHostAvailableCapacityResponsePtrOutput {
	return o.ApplyT(func(v DedicatedHostInstanceViewResponse) *DedicatedHostAvailableCapacityResponse {
		return v.AvailableCapacity
	}).(DedicatedHostAvailableCapacityResponsePtrOutput)
}

// The resource status information.
func (o DedicatedHostInstanceViewResponseOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v DedicatedHostInstanceViewResponse) []InstanceViewStatusResponse { return v.Statuses }).(InstanceViewStatusResponseArrayOutput)
}

type DedicatedHostInstanceViewResponsePtrOutput struct{ *pulumi.OutputState }

func (DedicatedHostInstanceViewResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedHostInstanceViewResponse)(nil)).Elem()
}

func (o DedicatedHostInstanceViewResponsePtrOutput) ToDedicatedHostInstanceViewResponsePtrOutput() DedicatedHostInstanceViewResponsePtrOutput {
	return o
}

func (o DedicatedHostInstanceViewResponsePtrOutput) ToDedicatedHostInstanceViewResponsePtrOutputWithContext(ctx context.Context) DedicatedHostInstanceViewResponsePtrOutput {
	return o
}

func (o DedicatedHostInstanceViewResponsePtrOutput) Elem() DedicatedHostInstanceViewResponseOutput {
	return o.ApplyT(func(v *DedicatedHostInstanceViewResponse) DedicatedHostInstanceViewResponse { return *v }).(DedicatedHostInstanceViewResponseOutput)
}

// Specifies the unique id of the dedicated physical machine on which the dedicated host resides.
func (o DedicatedHostInstanceViewResponsePtrOutput) AssetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DedicatedHostInstanceViewResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AssetId
	}).(pulumi.StringPtrOutput)
}

// Unutilized capacity of the dedicated host.
func (o DedicatedHostInstanceViewResponsePtrOutput) AvailableCapacity() DedicatedHostAvailableCapacityResponsePtrOutput {
	return o.ApplyT(func(v *DedicatedHostInstanceViewResponse) *DedicatedHostAvailableCapacityResponse {
		if v == nil {
			return nil
		}
		return v.AvailableCapacity
	}).(DedicatedHostAvailableCapacityResponsePtrOutput)
}

// The resource status information.
func (o DedicatedHostInstanceViewResponsePtrOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v *DedicatedHostInstanceViewResponse) []InstanceViewStatusResponse {
		if v == nil {
			return nil
		}
		return v.Statuses
	}).(InstanceViewStatusResponseArrayOutput)
}

// The instance view of a dedicated host that includes the name of the dedicated host. It is used for the response to the instance view of a dedicated host group.
type DedicatedHostInstanceViewWithNameResponse struct {
	// Specifies the unique id of the dedicated physical machine on which the dedicated host resides.
	AssetId string `pulumi:"assetId"`
	// Unutilized capacity of the dedicated host.
	AvailableCapacity *DedicatedHostAvailableCapacityResponse `pulumi:"availableCapacity"`
	// The name of the dedicated host.
	Name string `pulumi:"name"`
	// The resource status information.
	Statuses []InstanceViewStatusResponse `pulumi:"statuses"`
}

// The instance view of a dedicated host that includes the name of the dedicated host. It is used for the response to the instance view of a dedicated host group.
type DedicatedHostInstanceViewWithNameResponseOutput struct{ *pulumi.OutputState }

func (DedicatedHostInstanceViewWithNameResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DedicatedHostInstanceViewWithNameResponse)(nil)).Elem()
}

func (o DedicatedHostInstanceViewWithNameResponseOutput) ToDedicatedHostInstanceViewWithNameResponseOutput() DedicatedHostInstanceViewWithNameResponseOutput {
	return o
}

func (o DedicatedHostInstanceViewWithNameResponseOutput) ToDedicatedHostInstanceViewWithNameResponseOutputWithContext(ctx context.Context) DedicatedHostInstanceViewWithNameResponseOutput {
	return o
}

// Specifies the unique id of the dedicated physical machine on which the dedicated host resides.
func (o DedicatedHostInstanceViewWithNameResponseOutput) AssetId() pulumi.StringOutput {
	return o.ApplyT(func(v DedicatedHostInstanceViewWithNameResponse) string { return v.AssetId }).(pulumi.StringOutput)
}

// Unutilized capacity of the dedicated host.
func (o DedicatedHostInstanceViewWithNameResponseOutput) AvailableCapacity() DedicatedHostAvailableCapacityResponsePtrOutput {
	return o.ApplyT(func(v DedicatedHostInstanceViewWithNameResponse) *DedicatedHostAvailableCapacityResponse {
		return v.AvailableCapacity
	}).(DedicatedHostAvailableCapacityResponsePtrOutput)
}

// The name of the dedicated host.
func (o DedicatedHostInstanceViewWithNameResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DedicatedHostInstanceViewWithNameResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The resource status information.
func (o DedicatedHostInstanceViewWithNameResponseOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v DedicatedHostInstanceViewWithNameResponse) []InstanceViewStatusResponse { return v.Statuses }).(InstanceViewStatusResponseArrayOutput)
}

type DedicatedHostInstanceViewWithNameResponseArrayOutput struct{ *pulumi.OutputState }

func (DedicatedHostInstanceViewWithNameResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DedicatedHostInstanceViewWithNameResponse)(nil)).Elem()
}

func (o DedicatedHostInstanceViewWithNameResponseArrayOutput) ToDedicatedHostInstanceViewWithNameResponseArrayOutput() DedicatedHostInstanceViewWithNameResponseArrayOutput {
	return o
}

func (o DedicatedHostInstanceViewWithNameResponseArrayOutput) ToDedicatedHostInstanceViewWithNameResponseArrayOutputWithContext(ctx context.Context) DedicatedHostInstanceViewWithNameResponseArrayOutput {
	return o
}

func (o DedicatedHostInstanceViewWithNameResponseArrayOutput) Index(i pulumi.IntInput) DedicatedHostInstanceViewWithNameResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DedicatedHostInstanceViewWithNameResponse {
		return vs[0].([]DedicatedHostInstanceViewWithNameResponse)[vs[1].(int)]
	}).(DedicatedHostInstanceViewWithNameResponseOutput)
}

// Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15.
type DiagnosticsProfile struct {
	// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor.
	BootDiagnostics *BootDiagnostics `pulumi:"bootDiagnostics"`
}

// DiagnosticsProfileInput is an input type that accepts DiagnosticsProfileArgs and DiagnosticsProfileOutput values.
// You can construct a concrete instance of `DiagnosticsProfileInput` via:
//
//          DiagnosticsProfileArgs{...}
type DiagnosticsProfileInput interface {
	pulumi.Input

	ToDiagnosticsProfileOutput() DiagnosticsProfileOutput
	ToDiagnosticsProfileOutputWithContext(context.Context) DiagnosticsProfileOutput
}

// Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15.
type DiagnosticsProfileArgs struct {
	// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor.
	BootDiagnostics BootDiagnosticsPtrInput `pulumi:"bootDiagnostics"`
}

func (DiagnosticsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsProfile)(nil)).Elem()
}

func (i DiagnosticsProfileArgs) ToDiagnosticsProfileOutput() DiagnosticsProfileOutput {
	return i.ToDiagnosticsProfileOutputWithContext(context.Background())
}

func (i DiagnosticsProfileArgs) ToDiagnosticsProfileOutputWithContext(ctx context.Context) DiagnosticsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsProfileOutput)
}

func (i DiagnosticsProfileArgs) ToDiagnosticsProfilePtrOutput() DiagnosticsProfilePtrOutput {
	return i.ToDiagnosticsProfilePtrOutputWithContext(context.Background())
}

func (i DiagnosticsProfileArgs) ToDiagnosticsProfilePtrOutputWithContext(ctx context.Context) DiagnosticsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsProfileOutput).ToDiagnosticsProfilePtrOutputWithContext(ctx)
}

// DiagnosticsProfilePtrInput is an input type that accepts DiagnosticsProfileArgs, DiagnosticsProfilePtr and DiagnosticsProfilePtrOutput values.
// You can construct a concrete instance of `DiagnosticsProfilePtrInput` via:
//
//          DiagnosticsProfileArgs{...}
//
//  or:
//
//          nil
type DiagnosticsProfilePtrInput interface {
	pulumi.Input

	ToDiagnosticsProfilePtrOutput() DiagnosticsProfilePtrOutput
	ToDiagnosticsProfilePtrOutputWithContext(context.Context) DiagnosticsProfilePtrOutput
}

type diagnosticsProfilePtrType DiagnosticsProfileArgs

func DiagnosticsProfilePtr(v *DiagnosticsProfileArgs) DiagnosticsProfilePtrInput {
	return (*diagnosticsProfilePtrType)(v)
}

func (*diagnosticsProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticsProfile)(nil)).Elem()
}

func (i *diagnosticsProfilePtrType) ToDiagnosticsProfilePtrOutput() DiagnosticsProfilePtrOutput {
	return i.ToDiagnosticsProfilePtrOutputWithContext(context.Background())
}

func (i *diagnosticsProfilePtrType) ToDiagnosticsProfilePtrOutputWithContext(ctx context.Context) DiagnosticsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsProfilePtrOutput)
}

// Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15.
type DiagnosticsProfileResponse struct {
	// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor.
	BootDiagnostics *BootDiagnosticsResponse `pulumi:"bootDiagnostics"`
}

// Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15.
type DiagnosticsProfileResponseOutput struct{ *pulumi.OutputState }

func (DiagnosticsProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsProfileResponse)(nil)).Elem()
}

func (o DiagnosticsProfileResponseOutput) ToDiagnosticsProfileResponseOutput() DiagnosticsProfileResponseOutput {
	return o
}

func (o DiagnosticsProfileResponseOutput) ToDiagnosticsProfileResponseOutputWithContext(ctx context.Context) DiagnosticsProfileResponseOutput {
	return o
}

func (o DiagnosticsProfileResponseOutput) ToDiagnosticsProfileResponsePtrOutput() DiagnosticsProfileResponsePtrOutput {
	return o.ToDiagnosticsProfileResponsePtrOutputWithContext(context.Background())
}

func (o DiagnosticsProfileResponseOutput) ToDiagnosticsProfileResponsePtrOutputWithContext(ctx context.Context) DiagnosticsProfileResponsePtrOutput {
	return o.ApplyT(func(v DiagnosticsProfileResponse) *DiagnosticsProfileResponse {
		return &v
	}).(DiagnosticsProfileResponsePtrOutput)
}

// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor.
func (o DiagnosticsProfileResponseOutput) BootDiagnostics() BootDiagnosticsResponsePtrOutput {
	return o.ApplyT(func(v DiagnosticsProfileResponse) *BootDiagnosticsResponse { return v.BootDiagnostics }).(BootDiagnosticsResponsePtrOutput)
}

type DiagnosticsProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (DiagnosticsProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticsProfileResponse)(nil)).Elem()
}

func (o DiagnosticsProfileResponsePtrOutput) ToDiagnosticsProfileResponsePtrOutput() DiagnosticsProfileResponsePtrOutput {
	return o
}

func (o DiagnosticsProfileResponsePtrOutput) ToDiagnosticsProfileResponsePtrOutputWithContext(ctx context.Context) DiagnosticsProfileResponsePtrOutput {
	return o
}

func (o DiagnosticsProfileResponsePtrOutput) Elem() DiagnosticsProfileResponseOutput {
	return o.ApplyT(func(v *DiagnosticsProfileResponse) DiagnosticsProfileResponse { return *v }).(DiagnosticsProfileResponseOutput)
}

// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor.
func (o DiagnosticsProfileResponsePtrOutput) BootDiagnostics() BootDiagnosticsResponsePtrOutput {
	return o.ApplyT(func(v *DiagnosticsProfileResponse) *BootDiagnosticsResponse {
		if v == nil {
			return nil
		}
		return v.BootDiagnostics
	}).(BootDiagnosticsResponsePtrOutput)
}

// Describes the parameters of ephemeral disk settings that can be specified for operating system disk. <br><br> NOTE: The ephemeral disk settings can only be specified for managed disk.
type DiffDiskSettings struct {
	// Specifies the ephemeral disk settings for operating system disk.
	Option *string `pulumi:"option"`
	// Specifies the ephemeral disk placement for operating system disk.<br><br> Possible values are: <br><br> **CacheDisk** <br><br> **ResourceDisk** <br><br> Default: **CacheDisk** if one is configured for the VM size otherwise **ResourceDisk** is used.<br><br> Refer to VM size documentation for Windows VM at https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes and Linux VM at https://docs.microsoft.com/en-us/azure/virtual-machines/linux/sizes to check which VM sizes exposes a cache disk.
	Placement *string `pulumi:"placement"`
}

// DiffDiskSettingsInput is an input type that accepts DiffDiskSettingsArgs and DiffDiskSettingsOutput values.
// You can construct a concrete instance of `DiffDiskSettingsInput` via:
//
//          DiffDiskSettingsArgs{...}
type DiffDiskSettingsInput interface {
	pulumi.Input

	ToDiffDiskSettingsOutput() DiffDiskSettingsOutput
	ToDiffDiskSettingsOutputWithContext(context.Context) DiffDiskSettingsOutput
}

// Describes the parameters of ephemeral disk settings that can be specified for operating system disk. <br><br> NOTE: The ephemeral disk settings can only be specified for managed disk.
type DiffDiskSettingsArgs struct {
	// Specifies the ephemeral disk settings for operating system disk.
	Option pulumi.StringPtrInput `pulumi:"option"`
	// Specifies the ephemeral disk placement for operating system disk.<br><br> Possible values are: <br><br> **CacheDisk** <br><br> **ResourceDisk** <br><br> Default: **CacheDisk** if one is configured for the VM size otherwise **ResourceDisk** is used.<br><br> Refer to VM size documentation for Windows VM at https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes and Linux VM at https://docs.microsoft.com/en-us/azure/virtual-machines/linux/sizes to check which VM sizes exposes a cache disk.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
}

func (DiffDiskSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiffDiskSettings)(nil)).Elem()
}

func (i DiffDiskSettingsArgs) ToDiffDiskSettingsOutput() DiffDiskSettingsOutput {
	return i.ToDiffDiskSettingsOutputWithContext(context.Background())
}

func (i DiffDiskSettingsArgs) ToDiffDiskSettingsOutputWithContext(ctx context.Context) DiffDiskSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiffDiskSettingsOutput)
}

func (i DiffDiskSettingsArgs) ToDiffDiskSettingsPtrOutput() DiffDiskSettingsPtrOutput {
	return i.ToDiffDiskSettingsPtrOutputWithContext(context.Background())
}

func (i DiffDiskSettingsArgs) ToDiffDiskSettingsPtrOutputWithContext(ctx context.Context) DiffDiskSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiffDiskSettingsOutput).ToDiffDiskSettingsPtrOutputWithContext(ctx)
}

// DiffDiskSettingsPtrInput is an input type that accepts DiffDiskSettingsArgs, DiffDiskSettingsPtr and DiffDiskSettingsPtrOutput values.
// You can construct a concrete instance of `DiffDiskSettingsPtrInput` via:
//
//          DiffDiskSettingsArgs{...}
//
//  or:
//
//          nil
type DiffDiskSettingsPtrInput interface {
	pulumi.Input

	ToDiffDiskSettingsPtrOutput() DiffDiskSettingsPtrOutput
	ToDiffDiskSettingsPtrOutputWithContext(context.Context) DiffDiskSettingsPtrOutput
}

type diffDiskSettingsPtrType DiffDiskSettingsArgs

func DiffDiskSettingsPtr(v *DiffDiskSettingsArgs) DiffDiskSettingsPtrInput {
	return (*diffDiskSettingsPtrType)(v)
}

func (*diffDiskSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiffDiskSettings)(nil)).Elem()
}

func (i *diffDiskSettingsPtrType) ToDiffDiskSettingsPtrOutput() DiffDiskSettingsPtrOutput {
	return i.ToDiffDiskSettingsPtrOutputWithContext(context.Background())
}

func (i *diffDiskSettingsPtrType) ToDiffDiskSettingsPtrOutputWithContext(ctx context.Context) DiffDiskSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiffDiskSettingsPtrOutput)
}

// Describes the parameters of ephemeral disk settings that can be specified for operating system disk. <br><br> NOTE: The ephemeral disk settings can only be specified for managed disk.
type DiffDiskSettingsResponse struct {
	// Specifies the ephemeral disk settings for operating system disk.
	Option *string `pulumi:"option"`
	// Specifies the ephemeral disk placement for operating system disk.<br><br> Possible values are: <br><br> **CacheDisk** <br><br> **ResourceDisk** <br><br> Default: **CacheDisk** if one is configured for the VM size otherwise **ResourceDisk** is used.<br><br> Refer to VM size documentation for Windows VM at https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes and Linux VM at https://docs.microsoft.com/en-us/azure/virtual-machines/linux/sizes to check which VM sizes exposes a cache disk.
	Placement *string `pulumi:"placement"`
}

// Describes the parameters of ephemeral disk settings that can be specified for operating system disk. <br><br> NOTE: The ephemeral disk settings can only be specified for managed disk.
type DiffDiskSettingsResponseOutput struct{ *pulumi.OutputState }

func (DiffDiskSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiffDiskSettingsResponse)(nil)).Elem()
}

func (o DiffDiskSettingsResponseOutput) ToDiffDiskSettingsResponseOutput() DiffDiskSettingsResponseOutput {
	return o
}

func (o DiffDiskSettingsResponseOutput) ToDiffDiskSettingsResponseOutputWithContext(ctx context.Context) DiffDiskSettingsResponseOutput {
	return o
}

func (o DiffDiskSettingsResponseOutput) ToDiffDiskSettingsResponsePtrOutput() DiffDiskSettingsResponsePtrOutput {
	return o.ToDiffDiskSettingsResponsePtrOutputWithContext(context.Background())
}

func (o DiffDiskSettingsResponseOutput) ToDiffDiskSettingsResponsePtrOutputWithContext(ctx context.Context) DiffDiskSettingsResponsePtrOutput {
	return o.ApplyT(func(v DiffDiskSettingsResponse) *DiffDiskSettingsResponse {
		return &v
	}).(DiffDiskSettingsResponsePtrOutput)
}

// Specifies the ephemeral disk settings for operating system disk.
func (o DiffDiskSettingsResponseOutput) Option() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiffDiskSettingsResponse) *string { return v.Option }).(pulumi.StringPtrOutput)
}

// Specifies the ephemeral disk placement for operating system disk.<br><br> Possible values are: <br><br> **CacheDisk** <br><br> **ResourceDisk** <br><br> Default: **CacheDisk** if one is configured for the VM size otherwise **ResourceDisk** is used.<br><br> Refer to VM size documentation for Windows VM at https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes and Linux VM at https://docs.microsoft.com/en-us/azure/virtual-machines/linux/sizes to check which VM sizes exposes a cache disk.
func (o DiffDiskSettingsResponseOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiffDiskSettingsResponse) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

type DiffDiskSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (DiffDiskSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiffDiskSettingsResponse)(nil)).Elem()
}

func (o DiffDiskSettingsResponsePtrOutput) ToDiffDiskSettingsResponsePtrOutput() DiffDiskSettingsResponsePtrOutput {
	return o
}

func (o DiffDiskSettingsResponsePtrOutput) ToDiffDiskSettingsResponsePtrOutputWithContext(ctx context.Context) DiffDiskSettingsResponsePtrOutput {
	return o
}

func (o DiffDiskSettingsResponsePtrOutput) Elem() DiffDiskSettingsResponseOutput {
	return o.ApplyT(func(v *DiffDiskSettingsResponse) DiffDiskSettingsResponse { return *v }).(DiffDiskSettingsResponseOutput)
}

// Specifies the ephemeral disk settings for operating system disk.
func (o DiffDiskSettingsResponsePtrOutput) Option() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiffDiskSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Option
	}).(pulumi.StringPtrOutput)
}

// Specifies the ephemeral disk placement for operating system disk.<br><br> Possible values are: <br><br> **CacheDisk** <br><br> **ResourceDisk** <br><br> Default: **CacheDisk** if one is configured for the VM size otherwise **ResourceDisk** is used.<br><br> Refer to VM size documentation for Windows VM at https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes and Linux VM at https://docs.microsoft.com/en-us/azure/virtual-machines/linux/sizes to check which VM sizes exposes a cache disk.
func (o DiffDiskSettingsResponsePtrOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiffDiskSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Placement
	}).(pulumi.StringPtrOutput)
}

// Describes the disallowed disk types.
type Disallowed struct {
	// A list of disk types.
	DiskTypes []string `pulumi:"diskTypes"`
}

// DisallowedInput is an input type that accepts DisallowedArgs and DisallowedOutput values.
// You can construct a concrete instance of `DisallowedInput` via:
//
//          DisallowedArgs{...}
type DisallowedInput interface {
	pulumi.Input

	ToDisallowedOutput() DisallowedOutput
	ToDisallowedOutputWithContext(context.Context) DisallowedOutput
}

// Describes the disallowed disk types.
type DisallowedArgs struct {
	// A list of disk types.
	DiskTypes pulumi.StringArrayInput `pulumi:"diskTypes"`
}

func (DisallowedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Disallowed)(nil)).Elem()
}

func (i DisallowedArgs) ToDisallowedOutput() DisallowedOutput {
	return i.ToDisallowedOutputWithContext(context.Background())
}

func (i DisallowedArgs) ToDisallowedOutputWithContext(ctx context.Context) DisallowedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisallowedOutput)
}

func (i DisallowedArgs) ToDisallowedPtrOutput() DisallowedPtrOutput {
	return i.ToDisallowedPtrOutputWithContext(context.Background())
}

func (i DisallowedArgs) ToDisallowedPtrOutputWithContext(ctx context.Context) DisallowedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisallowedOutput).ToDisallowedPtrOutputWithContext(ctx)
}

// DisallowedPtrInput is an input type that accepts DisallowedArgs, DisallowedPtr and DisallowedPtrOutput values.
// You can construct a concrete instance of `DisallowedPtrInput` via:
//
//          DisallowedArgs{...}
//
//  or:
//
//          nil
type DisallowedPtrInput interface {
	pulumi.Input

	ToDisallowedPtrOutput() DisallowedPtrOutput
	ToDisallowedPtrOutputWithContext(context.Context) DisallowedPtrOutput
}

type disallowedPtrType DisallowedArgs

func DisallowedPtr(v *DisallowedArgs) DisallowedPtrInput {
	return (*disallowedPtrType)(v)
}

func (*disallowedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Disallowed)(nil)).Elem()
}

func (i *disallowedPtrType) ToDisallowedPtrOutput() DisallowedPtrOutput {
	return i.ToDisallowedPtrOutputWithContext(context.Background())
}

func (i *disallowedPtrType) ToDisallowedPtrOutputWithContext(ctx context.Context) DisallowedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisallowedPtrOutput)
}

// Describes the disallowed disk types.
type DisallowedResponse struct {
	// A list of disk types.
	DiskTypes []string `pulumi:"diskTypes"`
}

// Describes the disallowed disk types.
type DisallowedResponseOutput struct{ *pulumi.OutputState }

func (DisallowedResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DisallowedResponse)(nil)).Elem()
}

func (o DisallowedResponseOutput) ToDisallowedResponseOutput() DisallowedResponseOutput {
	return o
}

func (o DisallowedResponseOutput) ToDisallowedResponseOutputWithContext(ctx context.Context) DisallowedResponseOutput {
	return o
}

func (o DisallowedResponseOutput) ToDisallowedResponsePtrOutput() DisallowedResponsePtrOutput {
	return o.ToDisallowedResponsePtrOutputWithContext(context.Background())
}

func (o DisallowedResponseOutput) ToDisallowedResponsePtrOutputWithContext(ctx context.Context) DisallowedResponsePtrOutput {
	return o.ApplyT(func(v DisallowedResponse) *DisallowedResponse {
		return &v
	}).(DisallowedResponsePtrOutput)
}

// A list of disk types.
func (o DisallowedResponseOutput) DiskTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DisallowedResponse) []string { return v.DiskTypes }).(pulumi.StringArrayOutput)
}

type DisallowedResponsePtrOutput struct{ *pulumi.OutputState }

func (DisallowedResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DisallowedResponse)(nil)).Elem()
}

func (o DisallowedResponsePtrOutput) ToDisallowedResponsePtrOutput() DisallowedResponsePtrOutput {
	return o
}

func (o DisallowedResponsePtrOutput) ToDisallowedResponsePtrOutputWithContext(ctx context.Context) DisallowedResponsePtrOutput {
	return o
}

func (o DisallowedResponsePtrOutput) Elem() DisallowedResponseOutput {
	return o.ApplyT(func(v *DisallowedResponse) DisallowedResponse { return *v }).(DisallowedResponseOutput)
}

// A list of disk types.
func (o DisallowedResponsePtrOutput) DiskTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DisallowedResponse) []string {
		if v == nil {
			return nil
		}
		return v.DiskTypes
	}).(pulumi.StringArrayOutput)
}

// Describes the parameter of customer managed disk encryption set resource id that can be specified for disk. <br><br> NOTE: The disk encryption set resource id can only be specified for managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more details.
type DiskEncryptionSetParameters struct {
	// Resource Id
	Id *string `pulumi:"id"`
}

// DiskEncryptionSetParametersInput is an input type that accepts DiskEncryptionSetParametersArgs and DiskEncryptionSetParametersOutput values.
// You can construct a concrete instance of `DiskEncryptionSetParametersInput` via:
//
//          DiskEncryptionSetParametersArgs{...}
type DiskEncryptionSetParametersInput interface {
	pulumi.Input

	ToDiskEncryptionSetParametersOutput() DiskEncryptionSetParametersOutput
	ToDiskEncryptionSetParametersOutputWithContext(context.Context) DiskEncryptionSetParametersOutput
}

// Describes the parameter of customer managed disk encryption set resource id that can be specified for disk. <br><br> NOTE: The disk encryption set resource id can only be specified for managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more details.
type DiskEncryptionSetParametersArgs struct {
	// Resource Id
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (DiskEncryptionSetParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionSetParameters)(nil)).Elem()
}

func (i DiskEncryptionSetParametersArgs) ToDiskEncryptionSetParametersOutput() DiskEncryptionSetParametersOutput {
	return i.ToDiskEncryptionSetParametersOutputWithContext(context.Background())
}

func (i DiskEncryptionSetParametersArgs) ToDiskEncryptionSetParametersOutputWithContext(ctx context.Context) DiskEncryptionSetParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionSetParametersOutput)
}

func (i DiskEncryptionSetParametersArgs) ToDiskEncryptionSetParametersPtrOutput() DiskEncryptionSetParametersPtrOutput {
	return i.ToDiskEncryptionSetParametersPtrOutputWithContext(context.Background())
}

func (i DiskEncryptionSetParametersArgs) ToDiskEncryptionSetParametersPtrOutputWithContext(ctx context.Context) DiskEncryptionSetParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionSetParametersOutput).ToDiskEncryptionSetParametersPtrOutputWithContext(ctx)
}

// DiskEncryptionSetParametersPtrInput is an input type that accepts DiskEncryptionSetParametersArgs, DiskEncryptionSetParametersPtr and DiskEncryptionSetParametersPtrOutput values.
// You can construct a concrete instance of `DiskEncryptionSetParametersPtrInput` via:
//
//          DiskEncryptionSetParametersArgs{...}
//
//  or:
//
//          nil
type DiskEncryptionSetParametersPtrInput interface {
	pulumi.Input

	ToDiskEncryptionSetParametersPtrOutput() DiskEncryptionSetParametersPtrOutput
	ToDiskEncryptionSetParametersPtrOutputWithContext(context.Context) DiskEncryptionSetParametersPtrOutput
}

type diskEncryptionSetParametersPtrType DiskEncryptionSetParametersArgs

func DiskEncryptionSetParametersPtr(v *DiskEncryptionSetParametersArgs) DiskEncryptionSetParametersPtrInput {
	return (*diskEncryptionSetParametersPtrType)(v)
}

func (*diskEncryptionSetParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionSetParameters)(nil)).Elem()
}

func (i *diskEncryptionSetParametersPtrType) ToDiskEncryptionSetParametersPtrOutput() DiskEncryptionSetParametersPtrOutput {
	return i.ToDiskEncryptionSetParametersPtrOutputWithContext(context.Background())
}

func (i *diskEncryptionSetParametersPtrType) ToDiskEncryptionSetParametersPtrOutputWithContext(ctx context.Context) DiskEncryptionSetParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionSetParametersPtrOutput)
}

// Describes the parameter of customer managed disk encryption set resource id that can be specified for disk. <br><br> NOTE: The disk encryption set resource id can only be specified for managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more details.
type DiskEncryptionSetParametersResponse struct {
	// Resource Id
	Id *string `pulumi:"id"`
}

// Describes the parameter of customer managed disk encryption set resource id that can be specified for disk. <br><br> NOTE: The disk encryption set resource id can only be specified for managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more details.
type DiskEncryptionSetParametersResponseOutput struct{ *pulumi.OutputState }

func (DiskEncryptionSetParametersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionSetParametersResponse)(nil)).Elem()
}

func (o DiskEncryptionSetParametersResponseOutput) ToDiskEncryptionSetParametersResponseOutput() DiskEncryptionSetParametersResponseOutput {
	return o
}

func (o DiskEncryptionSetParametersResponseOutput) ToDiskEncryptionSetParametersResponseOutputWithContext(ctx context.Context) DiskEncryptionSetParametersResponseOutput {
	return o
}

func (o DiskEncryptionSetParametersResponseOutput) ToDiskEncryptionSetParametersResponsePtrOutput() DiskEncryptionSetParametersResponsePtrOutput {
	return o.ToDiskEncryptionSetParametersResponsePtrOutputWithContext(context.Background())
}

func (o DiskEncryptionSetParametersResponseOutput) ToDiskEncryptionSetParametersResponsePtrOutputWithContext(ctx context.Context) DiskEncryptionSetParametersResponsePtrOutput {
	return o.ApplyT(func(v DiskEncryptionSetParametersResponse) *DiskEncryptionSetParametersResponse {
		return &v
	}).(DiskEncryptionSetParametersResponsePtrOutput)
}

// Resource Id
func (o DiskEncryptionSetParametersResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskEncryptionSetParametersResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type DiskEncryptionSetParametersResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskEncryptionSetParametersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionSetParametersResponse)(nil)).Elem()
}

func (o DiskEncryptionSetParametersResponsePtrOutput) ToDiskEncryptionSetParametersResponsePtrOutput() DiskEncryptionSetParametersResponsePtrOutput {
	return o
}

func (o DiskEncryptionSetParametersResponsePtrOutput) ToDiskEncryptionSetParametersResponsePtrOutputWithContext(ctx context.Context) DiskEncryptionSetParametersResponsePtrOutput {
	return o
}

func (o DiskEncryptionSetParametersResponsePtrOutput) Elem() DiskEncryptionSetParametersResponseOutput {
	return o.ApplyT(func(v *DiskEncryptionSetParametersResponse) DiskEncryptionSetParametersResponse { return *v }).(DiskEncryptionSetParametersResponseOutput)
}

// Resource Id
func (o DiskEncryptionSetParametersResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionSetParametersResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Describes a Encryption Settings for a Disk
type DiskEncryptionSettings struct {
	// Specifies the location of the disk encryption key, which is a Key Vault Secret.
	DiskEncryptionKey *KeyVaultSecretReference `pulumi:"diskEncryptionKey"`
	// Specifies whether disk encryption should be enabled on the virtual machine.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the location of the key encryption key in Key Vault.
	KeyEncryptionKey *KeyVaultKeyReference `pulumi:"keyEncryptionKey"`
}

// DiskEncryptionSettingsInput is an input type that accepts DiskEncryptionSettingsArgs and DiskEncryptionSettingsOutput values.
// You can construct a concrete instance of `DiskEncryptionSettingsInput` via:
//
//          DiskEncryptionSettingsArgs{...}
type DiskEncryptionSettingsInput interface {
	pulumi.Input

	ToDiskEncryptionSettingsOutput() DiskEncryptionSettingsOutput
	ToDiskEncryptionSettingsOutputWithContext(context.Context) DiskEncryptionSettingsOutput
}

// Describes a Encryption Settings for a Disk
type DiskEncryptionSettingsArgs struct {
	// Specifies the location of the disk encryption key, which is a Key Vault Secret.
	DiskEncryptionKey KeyVaultSecretReferencePtrInput `pulumi:"diskEncryptionKey"`
	// Specifies whether disk encryption should be enabled on the virtual machine.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Specifies the location of the key encryption key in Key Vault.
	KeyEncryptionKey KeyVaultKeyReferencePtrInput `pulumi:"keyEncryptionKey"`
}

func (DiskEncryptionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionSettings)(nil)).Elem()
}

func (i DiskEncryptionSettingsArgs) ToDiskEncryptionSettingsOutput() DiskEncryptionSettingsOutput {
	return i.ToDiskEncryptionSettingsOutputWithContext(context.Background())
}

func (i DiskEncryptionSettingsArgs) ToDiskEncryptionSettingsOutputWithContext(ctx context.Context) DiskEncryptionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionSettingsOutput)
}

func (i DiskEncryptionSettingsArgs) ToDiskEncryptionSettingsPtrOutput() DiskEncryptionSettingsPtrOutput {
	return i.ToDiskEncryptionSettingsPtrOutputWithContext(context.Background())
}

func (i DiskEncryptionSettingsArgs) ToDiskEncryptionSettingsPtrOutputWithContext(ctx context.Context) DiskEncryptionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionSettingsOutput).ToDiskEncryptionSettingsPtrOutputWithContext(ctx)
}

// DiskEncryptionSettingsPtrInput is an input type that accepts DiskEncryptionSettingsArgs, DiskEncryptionSettingsPtr and DiskEncryptionSettingsPtrOutput values.
// You can construct a concrete instance of `DiskEncryptionSettingsPtrInput` via:
//
//          DiskEncryptionSettingsArgs{...}
//
//  or:
//
//          nil
type DiskEncryptionSettingsPtrInput interface {
	pulumi.Input

	ToDiskEncryptionSettingsPtrOutput() DiskEncryptionSettingsPtrOutput
	ToDiskEncryptionSettingsPtrOutputWithContext(context.Context) DiskEncryptionSettingsPtrOutput
}

type diskEncryptionSettingsPtrType DiskEncryptionSettingsArgs

func DiskEncryptionSettingsPtr(v *DiskEncryptionSettingsArgs) DiskEncryptionSettingsPtrInput {
	return (*diskEncryptionSettingsPtrType)(v)
}

func (*diskEncryptionSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionSettings)(nil)).Elem()
}

func (i *diskEncryptionSettingsPtrType) ToDiskEncryptionSettingsPtrOutput() DiskEncryptionSettingsPtrOutput {
	return i.ToDiskEncryptionSettingsPtrOutputWithContext(context.Background())
}

func (i *diskEncryptionSettingsPtrType) ToDiskEncryptionSettingsPtrOutputWithContext(ctx context.Context) DiskEncryptionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionSettingsPtrOutput)
}

// Describes a Encryption Settings for a Disk
type DiskEncryptionSettingsResponse struct {
	// Specifies the location of the disk encryption key, which is a Key Vault Secret.
	DiskEncryptionKey *KeyVaultSecretReferenceResponse `pulumi:"diskEncryptionKey"`
	// Specifies whether disk encryption should be enabled on the virtual machine.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the location of the key encryption key in Key Vault.
	KeyEncryptionKey *KeyVaultKeyReferenceResponse `pulumi:"keyEncryptionKey"`
}

// Describes a Encryption Settings for a Disk
type DiskEncryptionSettingsResponseOutput struct{ *pulumi.OutputState }

func (DiskEncryptionSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionSettingsResponse)(nil)).Elem()
}

func (o DiskEncryptionSettingsResponseOutput) ToDiskEncryptionSettingsResponseOutput() DiskEncryptionSettingsResponseOutput {
	return o
}

func (o DiskEncryptionSettingsResponseOutput) ToDiskEncryptionSettingsResponseOutputWithContext(ctx context.Context) DiskEncryptionSettingsResponseOutput {
	return o
}

func (o DiskEncryptionSettingsResponseOutput) ToDiskEncryptionSettingsResponsePtrOutput() DiskEncryptionSettingsResponsePtrOutput {
	return o.ToDiskEncryptionSettingsResponsePtrOutputWithContext(context.Background())
}

func (o DiskEncryptionSettingsResponseOutput) ToDiskEncryptionSettingsResponsePtrOutputWithContext(ctx context.Context) DiskEncryptionSettingsResponsePtrOutput {
	return o.ApplyT(func(v DiskEncryptionSettingsResponse) *DiskEncryptionSettingsResponse {
		return &v
	}).(DiskEncryptionSettingsResponsePtrOutput)
}

// Specifies the location of the disk encryption key, which is a Key Vault Secret.
func (o DiskEncryptionSettingsResponseOutput) DiskEncryptionKey() KeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v DiskEncryptionSettingsResponse) *KeyVaultSecretReferenceResponse { return v.DiskEncryptionKey }).(KeyVaultSecretReferenceResponsePtrOutput)
}

// Specifies whether disk encryption should be enabled on the virtual machine.
func (o DiskEncryptionSettingsResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DiskEncryptionSettingsResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies the location of the key encryption key in Key Vault.
func (o DiskEncryptionSettingsResponseOutput) KeyEncryptionKey() KeyVaultKeyReferenceResponsePtrOutput {
	return o.ApplyT(func(v DiskEncryptionSettingsResponse) *KeyVaultKeyReferenceResponse { return v.KeyEncryptionKey }).(KeyVaultKeyReferenceResponsePtrOutput)
}

type DiskEncryptionSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskEncryptionSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionSettingsResponse)(nil)).Elem()
}

func (o DiskEncryptionSettingsResponsePtrOutput) ToDiskEncryptionSettingsResponsePtrOutput() DiskEncryptionSettingsResponsePtrOutput {
	return o
}

func (o DiskEncryptionSettingsResponsePtrOutput) ToDiskEncryptionSettingsResponsePtrOutputWithContext(ctx context.Context) DiskEncryptionSettingsResponsePtrOutput {
	return o
}

func (o DiskEncryptionSettingsResponsePtrOutput) Elem() DiskEncryptionSettingsResponseOutput {
	return o.ApplyT(func(v *DiskEncryptionSettingsResponse) DiskEncryptionSettingsResponse { return *v }).(DiskEncryptionSettingsResponseOutput)
}

// Specifies the location of the disk encryption key, which is a Key Vault Secret.
func (o DiskEncryptionSettingsResponsePtrOutput) DiskEncryptionKey() KeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v *DiskEncryptionSettingsResponse) *KeyVaultSecretReferenceResponse {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionKey
	}).(KeyVaultSecretReferenceResponsePtrOutput)
}

// Specifies whether disk encryption should be enabled on the virtual machine.
func (o DiskEncryptionSettingsResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the location of the key encryption key in Key Vault.
func (o DiskEncryptionSettingsResponsePtrOutput) KeyEncryptionKey() KeyVaultKeyReferenceResponsePtrOutput {
	return o.ApplyT(func(v *DiskEncryptionSettingsResponse) *KeyVaultKeyReferenceResponse {
		if v == nil {
			return nil
		}
		return v.KeyEncryptionKey
	}).(KeyVaultKeyReferenceResponsePtrOutput)
}

type DiskEncryptionSettingsResponseArrayOutput struct{ *pulumi.OutputState }

func (DiskEncryptionSettingsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskEncryptionSettingsResponse)(nil)).Elem()
}

func (o DiskEncryptionSettingsResponseArrayOutput) ToDiskEncryptionSettingsResponseArrayOutput() DiskEncryptionSettingsResponseArrayOutput {
	return o
}

func (o DiskEncryptionSettingsResponseArrayOutput) ToDiskEncryptionSettingsResponseArrayOutputWithContext(ctx context.Context) DiskEncryptionSettingsResponseArrayOutput {
	return o
}

func (o DiskEncryptionSettingsResponseArrayOutput) Index(i pulumi.IntInput) DiskEncryptionSettingsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiskEncryptionSettingsResponse {
		return vs[0].([]DiskEncryptionSettingsResponse)[vs[1].(int)]
	}).(DiskEncryptionSettingsResponseOutput)
}

// The instance view of the disk.
type DiskInstanceViewResponse struct {
	// Specifies the encryption settings for the OS Disk. <br><br> Minimum api-version: 2015-06-15
	EncryptionSettings []DiskEncryptionSettingsResponse `pulumi:"encryptionSettings"`
	// The disk name.
	Name *string `pulumi:"name"`
	// The resource status information.
	Statuses []InstanceViewStatusResponse `pulumi:"statuses"`
}

// The instance view of the disk.
type DiskInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (DiskInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskInstanceViewResponse)(nil)).Elem()
}

func (o DiskInstanceViewResponseOutput) ToDiskInstanceViewResponseOutput() DiskInstanceViewResponseOutput {
	return o
}

func (o DiskInstanceViewResponseOutput) ToDiskInstanceViewResponseOutputWithContext(ctx context.Context) DiskInstanceViewResponseOutput {
	return o
}

// Specifies the encryption settings for the OS Disk. <br><br> Minimum api-version: 2015-06-15
func (o DiskInstanceViewResponseOutput) EncryptionSettings() DiskEncryptionSettingsResponseArrayOutput {
	return o.ApplyT(func(v DiskInstanceViewResponse) []DiskEncryptionSettingsResponse { return v.EncryptionSettings }).(DiskEncryptionSettingsResponseArrayOutput)
}

// The disk name.
func (o DiskInstanceViewResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskInstanceViewResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The resource status information.
func (o DiskInstanceViewResponseOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v DiskInstanceViewResponse) []InstanceViewStatusResponse { return v.Statuses }).(InstanceViewStatusResponseArrayOutput)
}

type DiskInstanceViewResponseArrayOutput struct{ *pulumi.OutputState }

func (DiskInstanceViewResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskInstanceViewResponse)(nil)).Elem()
}

func (o DiskInstanceViewResponseArrayOutput) ToDiskInstanceViewResponseArrayOutput() DiskInstanceViewResponseArrayOutput {
	return o
}

func (o DiskInstanceViewResponseArrayOutput) ToDiskInstanceViewResponseArrayOutputWithContext(ctx context.Context) DiskInstanceViewResponseArrayOutput {
	return o
}

func (o DiskInstanceViewResponseArrayOutput) Index(i pulumi.IntInput) DiskInstanceViewResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiskInstanceViewResponse {
		return vs[0].([]DiskInstanceViewResponse)[vs[1].(int)]
	}).(DiskInstanceViewResponseOutput)
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
type DiskSku struct {
	// The sku name.
	Name *string `pulumi:"name"`
}

// DiskSkuInput is an input type that accepts DiskSkuArgs and DiskSkuOutput values.
// You can construct a concrete instance of `DiskSkuInput` via:
//
//          DiskSkuArgs{...}
type DiskSkuInput interface {
	pulumi.Input

	ToDiskSkuOutput() DiskSkuOutput
	ToDiskSkuOutputWithContext(context.Context) DiskSkuOutput
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
type DiskSkuArgs struct {
	// The sku name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DiskSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSku)(nil)).Elem()
}

func (i DiskSkuArgs) ToDiskSkuOutput() DiskSkuOutput {
	return i.ToDiskSkuOutputWithContext(context.Background())
}

func (i DiskSkuArgs) ToDiskSkuOutputWithContext(ctx context.Context) DiskSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSkuOutput)
}

func (i DiskSkuArgs) ToDiskSkuPtrOutput() DiskSkuPtrOutput {
	return i.ToDiskSkuPtrOutputWithContext(context.Background())
}

func (i DiskSkuArgs) ToDiskSkuPtrOutputWithContext(ctx context.Context) DiskSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSkuOutput).ToDiskSkuPtrOutputWithContext(ctx)
}

// DiskSkuPtrInput is an input type that accepts DiskSkuArgs, DiskSkuPtr and DiskSkuPtrOutput values.
// You can construct a concrete instance of `DiskSkuPtrInput` via:
//
//          DiskSkuArgs{...}
//
//  or:
//
//          nil
type DiskSkuPtrInput interface {
	pulumi.Input

	ToDiskSkuPtrOutput() DiskSkuPtrOutput
	ToDiskSkuPtrOutputWithContext(context.Context) DiskSkuPtrOutput
}

type diskSkuPtrType DiskSkuArgs

func DiskSkuPtr(v *DiskSkuArgs) DiskSkuPtrInput {
	return (*diskSkuPtrType)(v)
}

func (*diskSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSku)(nil)).Elem()
}

func (i *diskSkuPtrType) ToDiskSkuPtrOutput() DiskSkuPtrOutput {
	return i.ToDiskSkuPtrOutputWithContext(context.Background())
}

func (i *diskSkuPtrType) ToDiskSkuPtrOutputWithContext(ctx context.Context) DiskSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSkuPtrOutput)
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
type DiskSkuResponse struct {
	// The sku name.
	Name *string `pulumi:"name"`
	// The sku tier.
	Tier string `pulumi:"tier"`
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, or UltraSSD_LRS.
type DiskSkuResponseOutput struct{ *pulumi.OutputState }

func (DiskSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSkuResponse)(nil)).Elem()
}

func (o DiskSkuResponseOutput) ToDiskSkuResponseOutput() DiskSkuResponseOutput {
	return o
}

func (o DiskSkuResponseOutput) ToDiskSkuResponseOutputWithContext(ctx context.Context) DiskSkuResponseOutput {
	return o
}

func (o DiskSkuResponseOutput) ToDiskSkuResponsePtrOutput() DiskSkuResponsePtrOutput {
	return o.ToDiskSkuResponsePtrOutputWithContext(context.Background())
}

func (o DiskSkuResponseOutput) ToDiskSkuResponsePtrOutputWithContext(ctx context.Context) DiskSkuResponsePtrOutput {
	return o.ApplyT(func(v DiskSkuResponse) *DiskSkuResponse {
		return &v
	}).(DiskSkuResponsePtrOutput)
}

// The sku name.
func (o DiskSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The sku tier.
func (o DiskSkuResponseOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v DiskSkuResponse) string { return v.Tier }).(pulumi.StringOutput)
}

type DiskSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSkuResponse)(nil)).Elem()
}

func (o DiskSkuResponsePtrOutput) ToDiskSkuResponsePtrOutput() DiskSkuResponsePtrOutput {
	return o
}

func (o DiskSkuResponsePtrOutput) ToDiskSkuResponsePtrOutputWithContext(ctx context.Context) DiskSkuResponsePtrOutput {
	return o
}

func (o DiskSkuResponsePtrOutput) Elem() DiskSkuResponseOutput {
	return o.ApplyT(func(v *DiskSkuResponse) DiskSkuResponse { return *v }).(DiskSkuResponseOutput)
}

// The sku name.
func (o DiskSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The sku tier.
func (o DiskSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Tier
	}).(pulumi.StringPtrOutput)
}

// Encryption at rest settings for disk or snapshot
type Encryption struct {
	// ResourceId of the disk encryption set to use for enabling encryption at rest.
	DiskEncryptionSetId *string `pulumi:"diskEncryptionSetId"`
	// The type of key used to encrypt the data of the disk.
	Type *string `pulumi:"type"`
}

// EncryptionInput is an input type that accepts EncryptionArgs and EncryptionOutput values.
// You can construct a concrete instance of `EncryptionInput` via:
//
//          EncryptionArgs{...}
type EncryptionInput interface {
	pulumi.Input

	ToEncryptionOutput() EncryptionOutput
	ToEncryptionOutputWithContext(context.Context) EncryptionOutput
}

// Encryption at rest settings for disk or snapshot
type EncryptionArgs struct {
	// ResourceId of the disk encryption set to use for enabling encryption at rest.
	DiskEncryptionSetId pulumi.StringPtrInput `pulumi:"diskEncryptionSetId"`
	// The type of key used to encrypt the data of the disk.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Encryption)(nil)).Elem()
}

func (i EncryptionArgs) ToEncryptionOutput() EncryptionOutput {
	return i.ToEncryptionOutputWithContext(context.Background())
}

func (i EncryptionArgs) ToEncryptionOutputWithContext(ctx context.Context) EncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionOutput)
}

func (i EncryptionArgs) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return i.ToEncryptionPtrOutputWithContext(context.Background())
}

func (i EncryptionArgs) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionOutput).ToEncryptionPtrOutputWithContext(ctx)
}

// EncryptionPtrInput is an input type that accepts EncryptionArgs, EncryptionPtr and EncryptionPtrOutput values.
// You can construct a concrete instance of `EncryptionPtrInput` via:
//
//          EncryptionArgs{...}
//
//  or:
//
//          nil
type EncryptionPtrInput interface {
	pulumi.Input

	ToEncryptionPtrOutput() EncryptionPtrOutput
	ToEncryptionPtrOutputWithContext(context.Context) EncryptionPtrOutput
}

type encryptionPtrType EncryptionArgs

func EncryptionPtr(v *EncryptionArgs) EncryptionPtrInput {
	return (*encryptionPtrType)(v)
}

func (*encryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Encryption)(nil)).Elem()
}

func (i *encryptionPtrType) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return i.ToEncryptionPtrOutputWithContext(context.Background())
}

func (i *encryptionPtrType) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPtrOutput)
}

// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
type EncryptionImages struct {
	// A list of encryption specifications for data disk images.
	DataDiskImages []DataDiskImageEncryption `pulumi:"dataDiskImages"`
	// Contains encryption settings for an OS disk image.
	OsDiskImage *OSDiskImageEncryption `pulumi:"osDiskImage"`
}

// EncryptionImagesInput is an input type that accepts EncryptionImagesArgs and EncryptionImagesOutput values.
// You can construct a concrete instance of `EncryptionImagesInput` via:
//
//          EncryptionImagesArgs{...}
type EncryptionImagesInput interface {
	pulumi.Input

	ToEncryptionImagesOutput() EncryptionImagesOutput
	ToEncryptionImagesOutputWithContext(context.Context) EncryptionImagesOutput
}

// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
type EncryptionImagesArgs struct {
	// A list of encryption specifications for data disk images.
	DataDiskImages DataDiskImageEncryptionArrayInput `pulumi:"dataDiskImages"`
	// Contains encryption settings for an OS disk image.
	OsDiskImage OSDiskImageEncryptionPtrInput `pulumi:"osDiskImage"`
}

func (EncryptionImagesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionImages)(nil)).Elem()
}

func (i EncryptionImagesArgs) ToEncryptionImagesOutput() EncryptionImagesOutput {
	return i.ToEncryptionImagesOutputWithContext(context.Background())
}

func (i EncryptionImagesArgs) ToEncryptionImagesOutputWithContext(ctx context.Context) EncryptionImagesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionImagesOutput)
}

func (i EncryptionImagesArgs) ToEncryptionImagesPtrOutput() EncryptionImagesPtrOutput {
	return i.ToEncryptionImagesPtrOutputWithContext(context.Background())
}

func (i EncryptionImagesArgs) ToEncryptionImagesPtrOutputWithContext(ctx context.Context) EncryptionImagesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionImagesOutput).ToEncryptionImagesPtrOutputWithContext(ctx)
}

// EncryptionImagesPtrInput is an input type that accepts EncryptionImagesArgs, EncryptionImagesPtr and EncryptionImagesPtrOutput values.
// You can construct a concrete instance of `EncryptionImagesPtrInput` via:
//
//          EncryptionImagesArgs{...}
//
//  or:
//
//          nil
type EncryptionImagesPtrInput interface {
	pulumi.Input

	ToEncryptionImagesPtrOutput() EncryptionImagesPtrOutput
	ToEncryptionImagesPtrOutputWithContext(context.Context) EncryptionImagesPtrOutput
}

type encryptionImagesPtrType EncryptionImagesArgs

func EncryptionImagesPtr(v *EncryptionImagesArgs) EncryptionImagesPtrInput {
	return (*encryptionImagesPtrType)(v)
}

func (*encryptionImagesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionImages)(nil)).Elem()
}

func (i *encryptionImagesPtrType) ToEncryptionImagesPtrOutput() EncryptionImagesPtrOutput {
	return i.ToEncryptionImagesPtrOutputWithContext(context.Background())
}

func (i *encryptionImagesPtrType) ToEncryptionImagesPtrOutputWithContext(ctx context.Context) EncryptionImagesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionImagesPtrOutput)
}

// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
type EncryptionImagesResponse struct {
	// A list of encryption specifications for data disk images.
	DataDiskImages []DataDiskImageEncryptionResponse `pulumi:"dataDiskImages"`
	// Contains encryption settings for an OS disk image.
	OsDiskImage *OSDiskImageEncryptionResponse `pulumi:"osDiskImage"`
}

// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
type EncryptionImagesResponseOutput struct{ *pulumi.OutputState }

func (EncryptionImagesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionImagesResponse)(nil)).Elem()
}

func (o EncryptionImagesResponseOutput) ToEncryptionImagesResponseOutput() EncryptionImagesResponseOutput {
	return o
}

func (o EncryptionImagesResponseOutput) ToEncryptionImagesResponseOutputWithContext(ctx context.Context) EncryptionImagesResponseOutput {
	return o
}

func (o EncryptionImagesResponseOutput) ToEncryptionImagesResponsePtrOutput() EncryptionImagesResponsePtrOutput {
	return o.ToEncryptionImagesResponsePtrOutputWithContext(context.Background())
}

func (o EncryptionImagesResponseOutput) ToEncryptionImagesResponsePtrOutputWithContext(ctx context.Context) EncryptionImagesResponsePtrOutput {
	return o.ApplyT(func(v EncryptionImagesResponse) *EncryptionImagesResponse {
		return &v
	}).(EncryptionImagesResponsePtrOutput)
}

// A list of encryption specifications for data disk images.
func (o EncryptionImagesResponseOutput) DataDiskImages() DataDiskImageEncryptionResponseArrayOutput {
	return o.ApplyT(func(v EncryptionImagesResponse) []DataDiskImageEncryptionResponse { return v.DataDiskImages }).(DataDiskImageEncryptionResponseArrayOutput)
}

// Contains encryption settings for an OS disk image.
func (o EncryptionImagesResponseOutput) OsDiskImage() OSDiskImageEncryptionResponsePtrOutput {
	return o.ApplyT(func(v EncryptionImagesResponse) *OSDiskImageEncryptionResponse { return v.OsDiskImage }).(OSDiskImageEncryptionResponsePtrOutput)
}

type EncryptionImagesResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionImagesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionImagesResponse)(nil)).Elem()
}

func (o EncryptionImagesResponsePtrOutput) ToEncryptionImagesResponsePtrOutput() EncryptionImagesResponsePtrOutput {
	return o
}

func (o EncryptionImagesResponsePtrOutput) ToEncryptionImagesResponsePtrOutputWithContext(ctx context.Context) EncryptionImagesResponsePtrOutput {
	return o
}

func (o EncryptionImagesResponsePtrOutput) Elem() EncryptionImagesResponseOutput {
	return o.ApplyT(func(v *EncryptionImagesResponse) EncryptionImagesResponse { return *v }).(EncryptionImagesResponseOutput)
}

// A list of encryption specifications for data disk images.
func (o EncryptionImagesResponsePtrOutput) DataDiskImages() DataDiskImageEncryptionResponseArrayOutput {
	return o.ApplyT(func(v *EncryptionImagesResponse) []DataDiskImageEncryptionResponse {
		if v == nil {
			return nil
		}
		return v.DataDiskImages
	}).(DataDiskImageEncryptionResponseArrayOutput)
}

// Contains encryption settings for an OS disk image.
func (o EncryptionImagesResponsePtrOutput) OsDiskImage() OSDiskImageEncryptionResponsePtrOutput {
	return o.ApplyT(func(v *EncryptionImagesResponse) *OSDiskImageEncryptionResponse {
		if v == nil {
			return nil
		}
		return v.OsDiskImage
	}).(OSDiskImageEncryptionResponsePtrOutput)
}

// Encryption at rest settings for disk or snapshot
type EncryptionResponse struct {
	// ResourceId of the disk encryption set to use for enabling encryption at rest.
	DiskEncryptionSetId *string `pulumi:"diskEncryptionSetId"`
	// The type of key used to encrypt the data of the disk.
	Type *string `pulumi:"type"`
}

// Encryption at rest settings for disk or snapshot
type EncryptionResponseOutput struct{ *pulumi.OutputState }

func (EncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionResponse)(nil)).Elem()
}

func (o EncryptionResponseOutput) ToEncryptionResponseOutput() EncryptionResponseOutput {
	return o
}

func (o EncryptionResponseOutput) ToEncryptionResponseOutputWithContext(ctx context.Context) EncryptionResponseOutput {
	return o
}

func (o EncryptionResponseOutput) ToEncryptionResponsePtrOutput() EncryptionResponsePtrOutput {
	return o.ToEncryptionResponsePtrOutputWithContext(context.Background())
}

func (o EncryptionResponseOutput) ToEncryptionResponsePtrOutputWithContext(ctx context.Context) EncryptionResponsePtrOutput {
	return o.ApplyT(func(v EncryptionResponse) *EncryptionResponse {
		return &v
	}).(EncryptionResponsePtrOutput)
}

// ResourceId of the disk encryption set to use for enabling encryption at rest.
func (o EncryptionResponseOutput) DiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionResponse) *string { return v.DiskEncryptionSetId }).(pulumi.StringPtrOutput)
}

// The type of key used to encrypt the data of the disk.
func (o EncryptionResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EncryptionResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionResponse)(nil)).Elem()
}

func (o EncryptionResponsePtrOutput) ToEncryptionResponsePtrOutput() EncryptionResponsePtrOutput {
	return o
}

func (o EncryptionResponsePtrOutput) ToEncryptionResponsePtrOutputWithContext(ctx context.Context) EncryptionResponsePtrOutput {
	return o
}

func (o EncryptionResponsePtrOutput) Elem() EncryptionResponseOutput {
	return o.ApplyT(func(v *EncryptionResponse) EncryptionResponse { return *v }).(EncryptionResponseOutput)
}

// ResourceId of the disk encryption set to use for enabling encryption at rest.
func (o EncryptionResponsePtrOutput) DiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionSetId
	}).(pulumi.StringPtrOutput)
}

// The type of key used to encrypt the data of the disk.
func (o EncryptionResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
type EncryptionSetIdentity struct {
	// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported.
	Type *string `pulumi:"type"`
}

// EncryptionSetIdentityInput is an input type that accepts EncryptionSetIdentityArgs and EncryptionSetIdentityOutput values.
// You can construct a concrete instance of `EncryptionSetIdentityInput` via:
//
//          EncryptionSetIdentityArgs{...}
type EncryptionSetIdentityInput interface {
	pulumi.Input

	ToEncryptionSetIdentityOutput() EncryptionSetIdentityOutput
	ToEncryptionSetIdentityOutputWithContext(context.Context) EncryptionSetIdentityOutput
}

// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
type EncryptionSetIdentityArgs struct {
	// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EncryptionSetIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSetIdentity)(nil)).Elem()
}

func (i EncryptionSetIdentityArgs) ToEncryptionSetIdentityOutput() EncryptionSetIdentityOutput {
	return i.ToEncryptionSetIdentityOutputWithContext(context.Background())
}

func (i EncryptionSetIdentityArgs) ToEncryptionSetIdentityOutputWithContext(ctx context.Context) EncryptionSetIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSetIdentityOutput)
}

func (i EncryptionSetIdentityArgs) ToEncryptionSetIdentityPtrOutput() EncryptionSetIdentityPtrOutput {
	return i.ToEncryptionSetIdentityPtrOutputWithContext(context.Background())
}

func (i EncryptionSetIdentityArgs) ToEncryptionSetIdentityPtrOutputWithContext(ctx context.Context) EncryptionSetIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSetIdentityOutput).ToEncryptionSetIdentityPtrOutputWithContext(ctx)
}

// EncryptionSetIdentityPtrInput is an input type that accepts EncryptionSetIdentityArgs, EncryptionSetIdentityPtr and EncryptionSetIdentityPtrOutput values.
// You can construct a concrete instance of `EncryptionSetIdentityPtrInput` via:
//
//          EncryptionSetIdentityArgs{...}
//
//  or:
//
//          nil
type EncryptionSetIdentityPtrInput interface {
	pulumi.Input

	ToEncryptionSetIdentityPtrOutput() EncryptionSetIdentityPtrOutput
	ToEncryptionSetIdentityPtrOutputWithContext(context.Context) EncryptionSetIdentityPtrOutput
}

type encryptionSetIdentityPtrType EncryptionSetIdentityArgs

func EncryptionSetIdentityPtr(v *EncryptionSetIdentityArgs) EncryptionSetIdentityPtrInput {
	return (*encryptionSetIdentityPtrType)(v)
}

func (*encryptionSetIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSetIdentity)(nil)).Elem()
}

func (i *encryptionSetIdentityPtrType) ToEncryptionSetIdentityPtrOutput() EncryptionSetIdentityPtrOutput {
	return i.ToEncryptionSetIdentityPtrOutputWithContext(context.Background())
}

func (i *encryptionSetIdentityPtrType) ToEncryptionSetIdentityPtrOutputWithContext(ctx context.Context) EncryptionSetIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSetIdentityPtrOutput)
}

// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
type EncryptionSetIdentityResponse struct {
	// The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id header in the PUT request if the resource has a systemAssigned(implicit) identity
	PrincipalId string `pulumi:"principalId"`
	// The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT request if the resource has a systemAssigned(implicit) identity
	TenantId string `pulumi:"tenantId"`
	// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported.
	Type *string `pulumi:"type"`
}

// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
type EncryptionSetIdentityResponseOutput struct{ *pulumi.OutputState }

func (EncryptionSetIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSetIdentityResponse)(nil)).Elem()
}

func (o EncryptionSetIdentityResponseOutput) ToEncryptionSetIdentityResponseOutput() EncryptionSetIdentityResponseOutput {
	return o
}

func (o EncryptionSetIdentityResponseOutput) ToEncryptionSetIdentityResponseOutputWithContext(ctx context.Context) EncryptionSetIdentityResponseOutput {
	return o
}

func (o EncryptionSetIdentityResponseOutput) ToEncryptionSetIdentityResponsePtrOutput() EncryptionSetIdentityResponsePtrOutput {
	return o.ToEncryptionSetIdentityResponsePtrOutputWithContext(context.Background())
}

func (o EncryptionSetIdentityResponseOutput) ToEncryptionSetIdentityResponsePtrOutputWithContext(ctx context.Context) EncryptionSetIdentityResponsePtrOutput {
	return o.ApplyT(func(v EncryptionSetIdentityResponse) *EncryptionSetIdentityResponse {
		return &v
	}).(EncryptionSetIdentityResponsePtrOutput)
}

// The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id header in the PUT request if the resource has a systemAssigned(implicit) identity
func (o EncryptionSetIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionSetIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT request if the resource has a systemAssigned(implicit) identity
func (o EncryptionSetIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionSetIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported.
func (o EncryptionSetIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionSetIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EncryptionSetIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionSetIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSetIdentityResponse)(nil)).Elem()
}

func (o EncryptionSetIdentityResponsePtrOutput) ToEncryptionSetIdentityResponsePtrOutput() EncryptionSetIdentityResponsePtrOutput {
	return o
}

func (o EncryptionSetIdentityResponsePtrOutput) ToEncryptionSetIdentityResponsePtrOutputWithContext(ctx context.Context) EncryptionSetIdentityResponsePtrOutput {
	return o
}

func (o EncryptionSetIdentityResponsePtrOutput) Elem() EncryptionSetIdentityResponseOutput {
	return o.ApplyT(func(v *EncryptionSetIdentityResponse) EncryptionSetIdentityResponse { return *v }).(EncryptionSetIdentityResponseOutput)
}

// The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id header in the PUT request if the resource has a systemAssigned(implicit) identity
func (o EncryptionSetIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionSetIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT request if the resource has a systemAssigned(implicit) identity
func (o EncryptionSetIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionSetIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported.
func (o EncryptionSetIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionSetIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollection struct {
	// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
	Enabled bool `pulumi:"enabled"`
	// A collection of encryption settings, one for each disk volume.
	EncryptionSettings []EncryptionSettingsElement `pulumi:"encryptionSettings"`
	// Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
	EncryptionSettingsVersion *string `pulumi:"encryptionSettingsVersion"`
}

// EncryptionSettingsCollectionInput is an input type that accepts EncryptionSettingsCollectionArgs and EncryptionSettingsCollectionOutput values.
// You can construct a concrete instance of `EncryptionSettingsCollectionInput` via:
//
//          EncryptionSettingsCollectionArgs{...}
type EncryptionSettingsCollectionInput interface {
	pulumi.Input

	ToEncryptionSettingsCollectionOutput() EncryptionSettingsCollectionOutput
	ToEncryptionSettingsCollectionOutputWithContext(context.Context) EncryptionSettingsCollectionOutput
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollectionArgs struct {
	// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// A collection of encryption settings, one for each disk volume.
	EncryptionSettings EncryptionSettingsElementArrayInput `pulumi:"encryptionSettings"`
	// Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
	EncryptionSettingsVersion pulumi.StringPtrInput `pulumi:"encryptionSettingsVersion"`
}

func (EncryptionSettingsCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsCollection)(nil)).Elem()
}

func (i EncryptionSettingsCollectionArgs) ToEncryptionSettingsCollectionOutput() EncryptionSettingsCollectionOutput {
	return i.ToEncryptionSettingsCollectionOutputWithContext(context.Background())
}

func (i EncryptionSettingsCollectionArgs) ToEncryptionSettingsCollectionOutputWithContext(ctx context.Context) EncryptionSettingsCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsCollectionOutput)
}

func (i EncryptionSettingsCollectionArgs) ToEncryptionSettingsCollectionPtrOutput() EncryptionSettingsCollectionPtrOutput {
	return i.ToEncryptionSettingsCollectionPtrOutputWithContext(context.Background())
}

func (i EncryptionSettingsCollectionArgs) ToEncryptionSettingsCollectionPtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsCollectionOutput).ToEncryptionSettingsCollectionPtrOutputWithContext(ctx)
}

// EncryptionSettingsCollectionPtrInput is an input type that accepts EncryptionSettingsCollectionArgs, EncryptionSettingsCollectionPtr and EncryptionSettingsCollectionPtrOutput values.
// You can construct a concrete instance of `EncryptionSettingsCollectionPtrInput` via:
//
//          EncryptionSettingsCollectionArgs{...}
//
//  or:
//
//          nil
type EncryptionSettingsCollectionPtrInput interface {
	pulumi.Input

	ToEncryptionSettingsCollectionPtrOutput() EncryptionSettingsCollectionPtrOutput
	ToEncryptionSettingsCollectionPtrOutputWithContext(context.Context) EncryptionSettingsCollectionPtrOutput
}

type encryptionSettingsCollectionPtrType EncryptionSettingsCollectionArgs

func EncryptionSettingsCollectionPtr(v *EncryptionSettingsCollectionArgs) EncryptionSettingsCollectionPtrInput {
	return (*encryptionSettingsCollectionPtrType)(v)
}

func (*encryptionSettingsCollectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSettingsCollection)(nil)).Elem()
}

func (i *encryptionSettingsCollectionPtrType) ToEncryptionSettingsCollectionPtrOutput() EncryptionSettingsCollectionPtrOutput {
	return i.ToEncryptionSettingsCollectionPtrOutputWithContext(context.Background())
}

func (i *encryptionSettingsCollectionPtrType) ToEncryptionSettingsCollectionPtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsCollectionPtrOutput)
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollectionResponse struct {
	// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
	Enabled bool `pulumi:"enabled"`
	// A collection of encryption settings, one for each disk volume.
	EncryptionSettings []EncryptionSettingsElementResponse `pulumi:"encryptionSettings"`
	// Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
	EncryptionSettingsVersion *string `pulumi:"encryptionSettingsVersion"`
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollectionResponseOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsCollectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsCollectionResponse)(nil)).Elem()
}

func (o EncryptionSettingsCollectionResponseOutput) ToEncryptionSettingsCollectionResponseOutput() EncryptionSettingsCollectionResponseOutput {
	return o
}

func (o EncryptionSettingsCollectionResponseOutput) ToEncryptionSettingsCollectionResponseOutputWithContext(ctx context.Context) EncryptionSettingsCollectionResponseOutput {
	return o
}

func (o EncryptionSettingsCollectionResponseOutput) ToEncryptionSettingsCollectionResponsePtrOutput() EncryptionSettingsCollectionResponsePtrOutput {
	return o.ToEncryptionSettingsCollectionResponsePtrOutputWithContext(context.Background())
}

func (o EncryptionSettingsCollectionResponseOutput) ToEncryptionSettingsCollectionResponsePtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionResponsePtrOutput {
	return o.ApplyT(func(v EncryptionSettingsCollectionResponse) *EncryptionSettingsCollectionResponse {
		return &v
	}).(EncryptionSettingsCollectionResponsePtrOutput)
}

// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
func (o EncryptionSettingsCollectionResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v EncryptionSettingsCollectionResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// A collection of encryption settings, one for each disk volume.
func (o EncryptionSettingsCollectionResponseOutput) EncryptionSettings() EncryptionSettingsElementResponseArrayOutput {
	return o.ApplyT(func(v EncryptionSettingsCollectionResponse) []EncryptionSettingsElementResponse {
		return v.EncryptionSettings
	}).(EncryptionSettingsElementResponseArrayOutput)
}

// Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
func (o EncryptionSettingsCollectionResponseOutput) EncryptionSettingsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionSettingsCollectionResponse) *string { return v.EncryptionSettingsVersion }).(pulumi.StringPtrOutput)
}

type EncryptionSettingsCollectionResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsCollectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSettingsCollectionResponse)(nil)).Elem()
}

func (o EncryptionSettingsCollectionResponsePtrOutput) ToEncryptionSettingsCollectionResponsePtrOutput() EncryptionSettingsCollectionResponsePtrOutput {
	return o
}

func (o EncryptionSettingsCollectionResponsePtrOutput) ToEncryptionSettingsCollectionResponsePtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionResponsePtrOutput {
	return o
}

func (o EncryptionSettingsCollectionResponsePtrOutput) Elem() EncryptionSettingsCollectionResponseOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollectionResponse) EncryptionSettingsCollectionResponse { return *v }).(EncryptionSettingsCollectionResponseOutput)
}

// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
func (o EncryptionSettingsCollectionResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollectionResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// A collection of encryption settings, one for each disk volume.
func (o EncryptionSettingsCollectionResponsePtrOutput) EncryptionSettings() EncryptionSettingsElementResponseArrayOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollectionResponse) []EncryptionSettingsElementResponse {
		if v == nil {
			return nil
		}
		return v.EncryptionSettings
	}).(EncryptionSettingsElementResponseArrayOutput)
}

// Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
func (o EncryptionSettingsCollectionResponsePtrOutput) EncryptionSettingsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionSettingsVersion
	}).(pulumi.StringPtrOutput)
}

// Encryption settings for one disk volume.
type EncryptionSettingsElement struct {
	// Key Vault Secret Url and vault id of the disk encryption key
	DiskEncryptionKey *KeyVaultAndSecretReference `pulumi:"diskEncryptionKey"`
	// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
	KeyEncryptionKey *KeyVaultAndKeyReference `pulumi:"keyEncryptionKey"`
}

// EncryptionSettingsElementInput is an input type that accepts EncryptionSettingsElementArgs and EncryptionSettingsElementOutput values.
// You can construct a concrete instance of `EncryptionSettingsElementInput` via:
//
//          EncryptionSettingsElementArgs{...}
type EncryptionSettingsElementInput interface {
	pulumi.Input

	ToEncryptionSettingsElementOutput() EncryptionSettingsElementOutput
	ToEncryptionSettingsElementOutputWithContext(context.Context) EncryptionSettingsElementOutput
}

// Encryption settings for one disk volume.
type EncryptionSettingsElementArgs struct {
	// Key Vault Secret Url and vault id of the disk encryption key
	DiskEncryptionKey KeyVaultAndSecretReferencePtrInput `pulumi:"diskEncryptionKey"`
	// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
	KeyEncryptionKey KeyVaultAndKeyReferencePtrInput `pulumi:"keyEncryptionKey"`
}

func (EncryptionSettingsElementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsElement)(nil)).Elem()
}

func (i EncryptionSettingsElementArgs) ToEncryptionSettingsElementOutput() EncryptionSettingsElementOutput {
	return i.ToEncryptionSettingsElementOutputWithContext(context.Background())
}

func (i EncryptionSettingsElementArgs) ToEncryptionSettingsElementOutputWithContext(ctx context.Context) EncryptionSettingsElementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsElementOutput)
}

// EncryptionSettingsElementArrayInput is an input type that accepts EncryptionSettingsElementArray and EncryptionSettingsElementArrayOutput values.
// You can construct a concrete instance of `EncryptionSettingsElementArrayInput` via:
//
//          EncryptionSettingsElementArray{ EncryptionSettingsElementArgs{...} }
type EncryptionSettingsElementArrayInput interface {
	pulumi.Input

	ToEncryptionSettingsElementArrayOutput() EncryptionSettingsElementArrayOutput
	ToEncryptionSettingsElementArrayOutputWithContext(context.Context) EncryptionSettingsElementArrayOutput
}

type EncryptionSettingsElementArray []EncryptionSettingsElementInput

func (EncryptionSettingsElementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EncryptionSettingsElement)(nil)).Elem()
}

func (i EncryptionSettingsElementArray) ToEncryptionSettingsElementArrayOutput() EncryptionSettingsElementArrayOutput {
	return i.ToEncryptionSettingsElementArrayOutputWithContext(context.Background())
}

func (i EncryptionSettingsElementArray) ToEncryptionSettingsElementArrayOutputWithContext(ctx context.Context) EncryptionSettingsElementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsElementArrayOutput)
}

// Encryption settings for one disk volume.
type EncryptionSettingsElementResponse struct {
	// Key Vault Secret Url and vault id of the disk encryption key
	DiskEncryptionKey *KeyVaultAndSecretReferenceResponse `pulumi:"diskEncryptionKey"`
	// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
	KeyEncryptionKey *KeyVaultAndKeyReferenceResponse `pulumi:"keyEncryptionKey"`
}

// Encryption settings for one disk volume.
type EncryptionSettingsElementResponseOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsElementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsElementResponse)(nil)).Elem()
}

func (o EncryptionSettingsElementResponseOutput) ToEncryptionSettingsElementResponseOutput() EncryptionSettingsElementResponseOutput {
	return o
}

func (o EncryptionSettingsElementResponseOutput) ToEncryptionSettingsElementResponseOutputWithContext(ctx context.Context) EncryptionSettingsElementResponseOutput {
	return o
}

// Key Vault Secret Url and vault id of the disk encryption key
func (o EncryptionSettingsElementResponseOutput) DiskEncryptionKey() KeyVaultAndSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v EncryptionSettingsElementResponse) *KeyVaultAndSecretReferenceResponse {
		return v.DiskEncryptionKey
	}).(KeyVaultAndSecretReferenceResponsePtrOutput)
}

// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
func (o EncryptionSettingsElementResponseOutput) KeyEncryptionKey() KeyVaultAndKeyReferenceResponsePtrOutput {
	return o.ApplyT(func(v EncryptionSettingsElementResponse) *KeyVaultAndKeyReferenceResponse { return v.KeyEncryptionKey }).(KeyVaultAndKeyReferenceResponsePtrOutput)
}

type EncryptionSettingsElementResponseArrayOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsElementResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EncryptionSettingsElementResponse)(nil)).Elem()
}

func (o EncryptionSettingsElementResponseArrayOutput) ToEncryptionSettingsElementResponseArrayOutput() EncryptionSettingsElementResponseArrayOutput {
	return o
}

func (o EncryptionSettingsElementResponseArrayOutput) ToEncryptionSettingsElementResponseArrayOutputWithContext(ctx context.Context) EncryptionSettingsElementResponseArrayOutput {
	return o
}

func (o EncryptionSettingsElementResponseArrayOutput) Index(i pulumi.IntInput) EncryptionSettingsElementResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EncryptionSettingsElementResponse {
		return vs[0].([]EncryptionSettingsElementResponse)[vs[1].(int)]
	}).(EncryptionSettingsElementResponseOutput)
}

// The publishing profile of a gallery image version.
type GalleryApplicationVersionPublishingProfile struct {
	// Optional. May be used to help process this file. The type of file contained in the source, e.g. zip, json, etc.
	ContentType *string `pulumi:"contentType"`
	// Optional. Whether or not this application reports health.
	EnableHealthCheck *bool `pulumi:"enableHealthCheck"`
	// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
	EndOfLifeDate *string `pulumi:"endOfLifeDate"`
	// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
	ExcludeFromLatest *bool `pulumi:"excludeFromLatest"`
	// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
	ReplicaCount *int `pulumi:"replicaCount"`
	// The source image from which the Image Version is going to be created.
	Source UserArtifactSource `pulumi:"source"`
	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType *string `pulumi:"storageAccountType"`
	// The target regions where the Image Version is going to be replicated to. This property is updatable.
	TargetRegions []TargetRegion `pulumi:"targetRegions"`
}

// GalleryApplicationVersionPublishingProfileInput is an input type that accepts GalleryApplicationVersionPublishingProfileArgs and GalleryApplicationVersionPublishingProfileOutput values.
// You can construct a concrete instance of `GalleryApplicationVersionPublishingProfileInput` via:
//
//          GalleryApplicationVersionPublishingProfileArgs{...}
type GalleryApplicationVersionPublishingProfileInput interface {
	pulumi.Input

	ToGalleryApplicationVersionPublishingProfileOutput() GalleryApplicationVersionPublishingProfileOutput
	ToGalleryApplicationVersionPublishingProfileOutputWithContext(context.Context) GalleryApplicationVersionPublishingProfileOutput
}

// The publishing profile of a gallery image version.
type GalleryApplicationVersionPublishingProfileArgs struct {
	// Optional. May be used to help process this file. The type of file contained in the source, e.g. zip, json, etc.
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// Optional. Whether or not this application reports health.
	EnableHealthCheck pulumi.BoolPtrInput `pulumi:"enableHealthCheck"`
	// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
	EndOfLifeDate pulumi.StringPtrInput `pulumi:"endOfLifeDate"`
	// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
	ExcludeFromLatest pulumi.BoolPtrInput `pulumi:"excludeFromLatest"`
	// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
	ReplicaCount pulumi.IntPtrInput `pulumi:"replicaCount"`
	// The source image from which the Image Version is going to be created.
	Source UserArtifactSourceInput `pulumi:"source"`
	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType pulumi.StringPtrInput `pulumi:"storageAccountType"`
	// The target regions where the Image Version is going to be replicated to. This property is updatable.
	TargetRegions TargetRegionArrayInput `pulumi:"targetRegions"`
}

func (GalleryApplicationVersionPublishingProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryApplicationVersionPublishingProfile)(nil)).Elem()
}

func (i GalleryApplicationVersionPublishingProfileArgs) ToGalleryApplicationVersionPublishingProfileOutput() GalleryApplicationVersionPublishingProfileOutput {
	return i.ToGalleryApplicationVersionPublishingProfileOutputWithContext(context.Background())
}

func (i GalleryApplicationVersionPublishingProfileArgs) ToGalleryApplicationVersionPublishingProfileOutputWithContext(ctx context.Context) GalleryApplicationVersionPublishingProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryApplicationVersionPublishingProfileOutput)
}

func (i GalleryApplicationVersionPublishingProfileArgs) ToGalleryApplicationVersionPublishingProfilePtrOutput() GalleryApplicationVersionPublishingProfilePtrOutput {
	return i.ToGalleryApplicationVersionPublishingProfilePtrOutputWithContext(context.Background())
}

func (i GalleryApplicationVersionPublishingProfileArgs) ToGalleryApplicationVersionPublishingProfilePtrOutputWithContext(ctx context.Context) GalleryApplicationVersionPublishingProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryApplicationVersionPublishingProfileOutput).ToGalleryApplicationVersionPublishingProfilePtrOutputWithContext(ctx)
}

// GalleryApplicationVersionPublishingProfilePtrInput is an input type that accepts GalleryApplicationVersionPublishingProfileArgs, GalleryApplicationVersionPublishingProfilePtr and GalleryApplicationVersionPublishingProfilePtrOutput values.
// You can construct a concrete instance of `GalleryApplicationVersionPublishingProfilePtrInput` via:
//
//          GalleryApplicationVersionPublishingProfileArgs{...}
//
//  or:
//
//          nil
type GalleryApplicationVersionPublishingProfilePtrInput interface {
	pulumi.Input

	ToGalleryApplicationVersionPublishingProfilePtrOutput() GalleryApplicationVersionPublishingProfilePtrOutput
	ToGalleryApplicationVersionPublishingProfilePtrOutputWithContext(context.Context) GalleryApplicationVersionPublishingProfilePtrOutput
}

type galleryApplicationVersionPublishingProfilePtrType GalleryApplicationVersionPublishingProfileArgs

func GalleryApplicationVersionPublishingProfilePtr(v *GalleryApplicationVersionPublishingProfileArgs) GalleryApplicationVersionPublishingProfilePtrInput {
	return (*galleryApplicationVersionPublishingProfilePtrType)(v)
}

func (*galleryApplicationVersionPublishingProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryApplicationVersionPublishingProfile)(nil)).Elem()
}

func (i *galleryApplicationVersionPublishingProfilePtrType) ToGalleryApplicationVersionPublishingProfilePtrOutput() GalleryApplicationVersionPublishingProfilePtrOutput {
	return i.ToGalleryApplicationVersionPublishingProfilePtrOutputWithContext(context.Background())
}

func (i *galleryApplicationVersionPublishingProfilePtrType) ToGalleryApplicationVersionPublishingProfilePtrOutputWithContext(ctx context.Context) GalleryApplicationVersionPublishingProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryApplicationVersionPublishingProfilePtrOutput)
}

// The publishing profile of a gallery image version.
type GalleryApplicationVersionPublishingProfileResponse struct {
	// Optional. May be used to help process this file. The type of file contained in the source, e.g. zip, json, etc.
	ContentType *string `pulumi:"contentType"`
	// Optional. Whether or not this application reports health.
	EnableHealthCheck *bool `pulumi:"enableHealthCheck"`
	// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
	EndOfLifeDate *string `pulumi:"endOfLifeDate"`
	// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
	ExcludeFromLatest *bool `pulumi:"excludeFromLatest"`
	// The timestamp for when the gallery image version is published.
	PublishedDate string `pulumi:"publishedDate"`
	// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
	ReplicaCount *int `pulumi:"replicaCount"`
	// The source image from which the Image Version is going to be created.
	Source UserArtifactSourceResponse `pulumi:"source"`
	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType *string `pulumi:"storageAccountType"`
	// The target regions where the Image Version is going to be replicated to. This property is updatable.
	TargetRegions []TargetRegionResponse `pulumi:"targetRegions"`
}

// The publishing profile of a gallery image version.
type GalleryApplicationVersionPublishingProfileResponseOutput struct{ *pulumi.OutputState }

func (GalleryApplicationVersionPublishingProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryApplicationVersionPublishingProfileResponse)(nil)).Elem()
}

func (o GalleryApplicationVersionPublishingProfileResponseOutput) ToGalleryApplicationVersionPublishingProfileResponseOutput() GalleryApplicationVersionPublishingProfileResponseOutput {
	return o
}

func (o GalleryApplicationVersionPublishingProfileResponseOutput) ToGalleryApplicationVersionPublishingProfileResponseOutputWithContext(ctx context.Context) GalleryApplicationVersionPublishingProfileResponseOutput {
	return o
}

func (o GalleryApplicationVersionPublishingProfileResponseOutput) ToGalleryApplicationVersionPublishingProfileResponsePtrOutput() GalleryApplicationVersionPublishingProfileResponsePtrOutput {
	return o.ToGalleryApplicationVersionPublishingProfileResponsePtrOutputWithContext(context.Background())
}

func (o GalleryApplicationVersionPublishingProfileResponseOutput) ToGalleryApplicationVersionPublishingProfileResponsePtrOutputWithContext(ctx context.Context) GalleryApplicationVersionPublishingProfileResponsePtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) *GalleryApplicationVersionPublishingProfileResponse {
		return &v
	}).(GalleryApplicationVersionPublishingProfileResponsePtrOutput)
}

// Optional. May be used to help process this file. The type of file contained in the source, e.g. zip, json, etc.
func (o GalleryApplicationVersionPublishingProfileResponseOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// Optional. Whether or not this application reports health.
func (o GalleryApplicationVersionPublishingProfileResponseOutput) EnableHealthCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) *bool { return v.EnableHealthCheck }).(pulumi.BoolPtrOutput)
}

// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
func (o GalleryApplicationVersionPublishingProfileResponseOutput) EndOfLifeDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) *string { return v.EndOfLifeDate }).(pulumi.StringPtrOutput)
}

// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
func (o GalleryApplicationVersionPublishingProfileResponseOutput) ExcludeFromLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) *bool { return v.ExcludeFromLatest }).(pulumi.BoolPtrOutput)
}

// The timestamp for when the gallery image version is published.
func (o GalleryApplicationVersionPublishingProfileResponseOutput) PublishedDate() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) string { return v.PublishedDate }).(pulumi.StringOutput)
}

// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
func (o GalleryApplicationVersionPublishingProfileResponseOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) *int { return v.ReplicaCount }).(pulumi.IntPtrOutput)
}

// The source image from which the Image Version is going to be created.
func (o GalleryApplicationVersionPublishingProfileResponseOutput) Source() UserArtifactSourceResponseOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) UserArtifactSourceResponse { return v.Source }).(UserArtifactSourceResponseOutput)
}

// Specifies the storage account type to be used to store the image. This property is not updatable.
func (o GalleryApplicationVersionPublishingProfileResponseOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

// The target regions where the Image Version is going to be replicated to. This property is updatable.
func (o GalleryApplicationVersionPublishingProfileResponseOutput) TargetRegions() TargetRegionResponseArrayOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) []TargetRegionResponse {
		return v.TargetRegions
	}).(TargetRegionResponseArrayOutput)
}

type GalleryApplicationVersionPublishingProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (GalleryApplicationVersionPublishingProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryApplicationVersionPublishingProfileResponse)(nil)).Elem()
}

func (o GalleryApplicationVersionPublishingProfileResponsePtrOutput) ToGalleryApplicationVersionPublishingProfileResponsePtrOutput() GalleryApplicationVersionPublishingProfileResponsePtrOutput {
	return o
}

func (o GalleryApplicationVersionPublishingProfileResponsePtrOutput) ToGalleryApplicationVersionPublishingProfileResponsePtrOutputWithContext(ctx context.Context) GalleryApplicationVersionPublishingProfileResponsePtrOutput {
	return o
}

func (o GalleryApplicationVersionPublishingProfileResponsePtrOutput) Elem() GalleryApplicationVersionPublishingProfileResponseOutput {
	return o.ApplyT(func(v *GalleryApplicationVersionPublishingProfileResponse) GalleryApplicationVersionPublishingProfileResponse {
		return *v
	}).(GalleryApplicationVersionPublishingProfileResponseOutput)
}

// Optional. May be used to help process this file. The type of file contained in the source, e.g. zip, json, etc.
func (o GalleryApplicationVersionPublishingProfileResponsePtrOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryApplicationVersionPublishingProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContentType
	}).(pulumi.StringPtrOutput)
}

// Optional. Whether or not this application reports health.
func (o GalleryApplicationVersionPublishingProfileResponsePtrOutput) EnableHealthCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GalleryApplicationVersionPublishingProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableHealthCheck
	}).(pulumi.BoolPtrOutput)
}

// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
func (o GalleryApplicationVersionPublishingProfileResponsePtrOutput) EndOfLifeDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryApplicationVersionPublishingProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndOfLifeDate
	}).(pulumi.StringPtrOutput)
}

// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
func (o GalleryApplicationVersionPublishingProfileResponsePtrOutput) ExcludeFromLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GalleryApplicationVersionPublishingProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ExcludeFromLatest
	}).(pulumi.BoolPtrOutput)
}

// The timestamp for when the gallery image version is published.
func (o GalleryApplicationVersionPublishingProfileResponsePtrOutput) PublishedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryApplicationVersionPublishingProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PublishedDate
	}).(pulumi.StringPtrOutput)
}

// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
func (o GalleryApplicationVersionPublishingProfileResponsePtrOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GalleryApplicationVersionPublishingProfileResponse) *int {
		if v == nil {
			return nil
		}
		return v.ReplicaCount
	}).(pulumi.IntPtrOutput)
}

// The source image from which the Image Version is going to be created.
func (o GalleryApplicationVersionPublishingProfileResponsePtrOutput) Source() UserArtifactSourceResponsePtrOutput {
	return o.ApplyT(func(v *GalleryApplicationVersionPublishingProfileResponse) *UserArtifactSourceResponse {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(UserArtifactSourceResponsePtrOutput)
}

// Specifies the storage account type to be used to store the image. This property is not updatable.
func (o GalleryApplicationVersionPublishingProfileResponsePtrOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryApplicationVersionPublishingProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountType
	}).(pulumi.StringPtrOutput)
}

// The target regions where the Image Version is going to be replicated to. This property is updatable.
func (o GalleryApplicationVersionPublishingProfileResponsePtrOutput) TargetRegions() TargetRegionResponseArrayOutput {
	return o.ApplyT(func(v *GalleryApplicationVersionPublishingProfileResponse) []TargetRegionResponse {
		if v == nil {
			return nil
		}
		return v.TargetRegions
	}).(TargetRegionResponseArrayOutput)
}

// The gallery artifact version source.
type GalleryArtifactVersionSource struct {
	// The id of the gallery artifact version source. Can specify a disk uri, snapshot uri, user image or storage account resource.
	Id *string `pulumi:"id"`
	// The uri of the gallery artifact version source. Currently used to specify vhd/blob source.
	Uri *string `pulumi:"uri"`
}

// GalleryArtifactVersionSourceInput is an input type that accepts GalleryArtifactVersionSourceArgs and GalleryArtifactVersionSourceOutput values.
// You can construct a concrete instance of `GalleryArtifactVersionSourceInput` via:
//
//          GalleryArtifactVersionSourceArgs{...}
type GalleryArtifactVersionSourceInput interface {
	pulumi.Input

	ToGalleryArtifactVersionSourceOutput() GalleryArtifactVersionSourceOutput
	ToGalleryArtifactVersionSourceOutputWithContext(context.Context) GalleryArtifactVersionSourceOutput
}

// The gallery artifact version source.
type GalleryArtifactVersionSourceArgs struct {
	// The id of the gallery artifact version source. Can specify a disk uri, snapshot uri, user image or storage account resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The uri of the gallery artifact version source. Currently used to specify vhd/blob source.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (GalleryArtifactVersionSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryArtifactVersionSource)(nil)).Elem()
}

func (i GalleryArtifactVersionSourceArgs) ToGalleryArtifactVersionSourceOutput() GalleryArtifactVersionSourceOutput {
	return i.ToGalleryArtifactVersionSourceOutputWithContext(context.Background())
}

func (i GalleryArtifactVersionSourceArgs) ToGalleryArtifactVersionSourceOutputWithContext(ctx context.Context) GalleryArtifactVersionSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryArtifactVersionSourceOutput)
}

func (i GalleryArtifactVersionSourceArgs) ToGalleryArtifactVersionSourcePtrOutput() GalleryArtifactVersionSourcePtrOutput {
	return i.ToGalleryArtifactVersionSourcePtrOutputWithContext(context.Background())
}

func (i GalleryArtifactVersionSourceArgs) ToGalleryArtifactVersionSourcePtrOutputWithContext(ctx context.Context) GalleryArtifactVersionSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryArtifactVersionSourceOutput).ToGalleryArtifactVersionSourcePtrOutputWithContext(ctx)
}

// GalleryArtifactVersionSourcePtrInput is an input type that accepts GalleryArtifactVersionSourceArgs, GalleryArtifactVersionSourcePtr and GalleryArtifactVersionSourcePtrOutput values.
// You can construct a concrete instance of `GalleryArtifactVersionSourcePtrInput` via:
//
//          GalleryArtifactVersionSourceArgs{...}
//
//  or:
//
//          nil
type GalleryArtifactVersionSourcePtrInput interface {
	pulumi.Input

	ToGalleryArtifactVersionSourcePtrOutput() GalleryArtifactVersionSourcePtrOutput
	ToGalleryArtifactVersionSourcePtrOutputWithContext(context.Context) GalleryArtifactVersionSourcePtrOutput
}

type galleryArtifactVersionSourcePtrType GalleryArtifactVersionSourceArgs

func GalleryArtifactVersionSourcePtr(v *GalleryArtifactVersionSourceArgs) GalleryArtifactVersionSourcePtrInput {
	return (*galleryArtifactVersionSourcePtrType)(v)
}

func (*galleryArtifactVersionSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryArtifactVersionSource)(nil)).Elem()
}

func (i *galleryArtifactVersionSourcePtrType) ToGalleryArtifactVersionSourcePtrOutput() GalleryArtifactVersionSourcePtrOutput {
	return i.ToGalleryArtifactVersionSourcePtrOutputWithContext(context.Background())
}

func (i *galleryArtifactVersionSourcePtrType) ToGalleryArtifactVersionSourcePtrOutputWithContext(ctx context.Context) GalleryArtifactVersionSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryArtifactVersionSourcePtrOutput)
}

// The gallery artifact version source.
type GalleryArtifactVersionSourceResponse struct {
	// The id of the gallery artifact version source. Can specify a disk uri, snapshot uri, user image or storage account resource.
	Id *string `pulumi:"id"`
	// The uri of the gallery artifact version source. Currently used to specify vhd/blob source.
	Uri *string `pulumi:"uri"`
}

// The gallery artifact version source.
type GalleryArtifactVersionSourceResponseOutput struct{ *pulumi.OutputState }

func (GalleryArtifactVersionSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryArtifactVersionSourceResponse)(nil)).Elem()
}

func (o GalleryArtifactVersionSourceResponseOutput) ToGalleryArtifactVersionSourceResponseOutput() GalleryArtifactVersionSourceResponseOutput {
	return o
}

func (o GalleryArtifactVersionSourceResponseOutput) ToGalleryArtifactVersionSourceResponseOutputWithContext(ctx context.Context) GalleryArtifactVersionSourceResponseOutput {
	return o
}

func (o GalleryArtifactVersionSourceResponseOutput) ToGalleryArtifactVersionSourceResponsePtrOutput() GalleryArtifactVersionSourceResponsePtrOutput {
	return o.ToGalleryArtifactVersionSourceResponsePtrOutputWithContext(context.Background())
}

func (o GalleryArtifactVersionSourceResponseOutput) ToGalleryArtifactVersionSourceResponsePtrOutputWithContext(ctx context.Context) GalleryArtifactVersionSourceResponsePtrOutput {
	return o.ApplyT(func(v GalleryArtifactVersionSourceResponse) *GalleryArtifactVersionSourceResponse {
		return &v
	}).(GalleryArtifactVersionSourceResponsePtrOutput)
}

// The id of the gallery artifact version source. Can specify a disk uri, snapshot uri, user image or storage account resource.
func (o GalleryArtifactVersionSourceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryArtifactVersionSourceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The uri of the gallery artifact version source. Currently used to specify vhd/blob source.
func (o GalleryArtifactVersionSourceResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryArtifactVersionSourceResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type GalleryArtifactVersionSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (GalleryArtifactVersionSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryArtifactVersionSourceResponse)(nil)).Elem()
}

func (o GalleryArtifactVersionSourceResponsePtrOutput) ToGalleryArtifactVersionSourceResponsePtrOutput() GalleryArtifactVersionSourceResponsePtrOutput {
	return o
}

func (o GalleryArtifactVersionSourceResponsePtrOutput) ToGalleryArtifactVersionSourceResponsePtrOutputWithContext(ctx context.Context) GalleryArtifactVersionSourceResponsePtrOutput {
	return o
}

func (o GalleryArtifactVersionSourceResponsePtrOutput) Elem() GalleryArtifactVersionSourceResponseOutput {
	return o.ApplyT(func(v *GalleryArtifactVersionSourceResponse) GalleryArtifactVersionSourceResponse { return *v }).(GalleryArtifactVersionSourceResponseOutput)
}

// The id of the gallery artifact version source. Can specify a disk uri, snapshot uri, user image or storage account resource.
func (o GalleryArtifactVersionSourceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryArtifactVersionSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The uri of the gallery artifact version source. Currently used to specify vhd/blob source.
func (o GalleryArtifactVersionSourceResponsePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryArtifactVersionSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// This is the data disk image.
type GalleryDataDiskImage struct {
	// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
	HostCaching *string `pulumi:"hostCaching"`
	// This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
	Lun int `pulumi:"lun"`
	// The gallery artifact version source.
	Source *GalleryArtifactVersionSource `pulumi:"source"`
}

// GalleryDataDiskImageInput is an input type that accepts GalleryDataDiskImageArgs and GalleryDataDiskImageOutput values.
// You can construct a concrete instance of `GalleryDataDiskImageInput` via:
//
//          GalleryDataDiskImageArgs{...}
type GalleryDataDiskImageInput interface {
	pulumi.Input

	ToGalleryDataDiskImageOutput() GalleryDataDiskImageOutput
	ToGalleryDataDiskImageOutputWithContext(context.Context) GalleryDataDiskImageOutput
}

// This is the data disk image.
type GalleryDataDiskImageArgs struct {
	// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
	HostCaching pulumi.StringPtrInput `pulumi:"hostCaching"`
	// This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
	Lun pulumi.IntInput `pulumi:"lun"`
	// The gallery artifact version source.
	Source GalleryArtifactVersionSourcePtrInput `pulumi:"source"`
}

func (GalleryDataDiskImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryDataDiskImage)(nil)).Elem()
}

func (i GalleryDataDiskImageArgs) ToGalleryDataDiskImageOutput() GalleryDataDiskImageOutput {
	return i.ToGalleryDataDiskImageOutputWithContext(context.Background())
}

func (i GalleryDataDiskImageArgs) ToGalleryDataDiskImageOutputWithContext(ctx context.Context) GalleryDataDiskImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryDataDiskImageOutput)
}

// GalleryDataDiskImageArrayInput is an input type that accepts GalleryDataDiskImageArray and GalleryDataDiskImageArrayOutput values.
// You can construct a concrete instance of `GalleryDataDiskImageArrayInput` via:
//
//          GalleryDataDiskImageArray{ GalleryDataDiskImageArgs{...} }
type GalleryDataDiskImageArrayInput interface {
	pulumi.Input

	ToGalleryDataDiskImageArrayOutput() GalleryDataDiskImageArrayOutput
	ToGalleryDataDiskImageArrayOutputWithContext(context.Context) GalleryDataDiskImageArrayOutput
}

type GalleryDataDiskImageArray []GalleryDataDiskImageInput

func (GalleryDataDiskImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GalleryDataDiskImage)(nil)).Elem()
}

func (i GalleryDataDiskImageArray) ToGalleryDataDiskImageArrayOutput() GalleryDataDiskImageArrayOutput {
	return i.ToGalleryDataDiskImageArrayOutputWithContext(context.Background())
}

func (i GalleryDataDiskImageArray) ToGalleryDataDiskImageArrayOutputWithContext(ctx context.Context) GalleryDataDiskImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryDataDiskImageArrayOutput)
}

// This is the data disk image.
type GalleryDataDiskImageResponse struct {
	// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
	HostCaching *string `pulumi:"hostCaching"`
	// This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
	Lun int `pulumi:"lun"`
	// This property indicates the size of the VHD to be created.
	SizeInGB int `pulumi:"sizeInGB"`
	// The gallery artifact version source.
	Source *GalleryArtifactVersionSourceResponse `pulumi:"source"`
}

// This is the data disk image.
type GalleryDataDiskImageResponseOutput struct{ *pulumi.OutputState }

func (GalleryDataDiskImageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryDataDiskImageResponse)(nil)).Elem()
}

func (o GalleryDataDiskImageResponseOutput) ToGalleryDataDiskImageResponseOutput() GalleryDataDiskImageResponseOutput {
	return o
}

func (o GalleryDataDiskImageResponseOutput) ToGalleryDataDiskImageResponseOutputWithContext(ctx context.Context) GalleryDataDiskImageResponseOutput {
	return o
}

// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
func (o GalleryDataDiskImageResponseOutput) HostCaching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryDataDiskImageResponse) *string { return v.HostCaching }).(pulumi.StringPtrOutput)
}

// This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
func (o GalleryDataDiskImageResponseOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v GalleryDataDiskImageResponse) int { return v.Lun }).(pulumi.IntOutput)
}

// This property indicates the size of the VHD to be created.
func (o GalleryDataDiskImageResponseOutput) SizeInGB() pulumi.IntOutput {
	return o.ApplyT(func(v GalleryDataDiskImageResponse) int { return v.SizeInGB }).(pulumi.IntOutput)
}

// The gallery artifact version source.
func (o GalleryDataDiskImageResponseOutput) Source() GalleryArtifactVersionSourceResponsePtrOutput {
	return o.ApplyT(func(v GalleryDataDiskImageResponse) *GalleryArtifactVersionSourceResponse { return v.Source }).(GalleryArtifactVersionSourceResponsePtrOutput)
}

type GalleryDataDiskImageResponseArrayOutput struct{ *pulumi.OutputState }

func (GalleryDataDiskImageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GalleryDataDiskImageResponse)(nil)).Elem()
}

func (o GalleryDataDiskImageResponseArrayOutput) ToGalleryDataDiskImageResponseArrayOutput() GalleryDataDiskImageResponseArrayOutput {
	return o
}

func (o GalleryDataDiskImageResponseArrayOutput) ToGalleryDataDiskImageResponseArrayOutputWithContext(ctx context.Context) GalleryDataDiskImageResponseArrayOutput {
	return o
}

func (o GalleryDataDiskImageResponseArrayOutput) Index(i pulumi.IntInput) GalleryDataDiskImageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GalleryDataDiskImageResponse {
		return vs[0].([]GalleryDataDiskImageResponse)[vs[1].(int)]
	}).(GalleryDataDiskImageResponseOutput)
}

// Describes the gallery unique name.
type GalleryIdentifierResponse struct {
	// The unique name of the Shared Image Gallery. This name is generated automatically by Azure.
	UniqueName string `pulumi:"uniqueName"`
}

// Describes the gallery unique name.
type GalleryIdentifierResponseOutput struct{ *pulumi.OutputState }

func (GalleryIdentifierResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryIdentifierResponse)(nil)).Elem()
}

func (o GalleryIdentifierResponseOutput) ToGalleryIdentifierResponseOutput() GalleryIdentifierResponseOutput {
	return o
}

func (o GalleryIdentifierResponseOutput) ToGalleryIdentifierResponseOutputWithContext(ctx context.Context) GalleryIdentifierResponseOutput {
	return o
}

func (o GalleryIdentifierResponseOutput) ToGalleryIdentifierResponsePtrOutput() GalleryIdentifierResponsePtrOutput {
	return o.ToGalleryIdentifierResponsePtrOutputWithContext(context.Background())
}

func (o GalleryIdentifierResponseOutput) ToGalleryIdentifierResponsePtrOutputWithContext(ctx context.Context) GalleryIdentifierResponsePtrOutput {
	return o.ApplyT(func(v GalleryIdentifierResponse) *GalleryIdentifierResponse {
		return &v
	}).(GalleryIdentifierResponsePtrOutput)
}

// The unique name of the Shared Image Gallery. This name is generated automatically by Azure.
func (o GalleryIdentifierResponseOutput) UniqueName() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryIdentifierResponse) string { return v.UniqueName }).(pulumi.StringOutput)
}

type GalleryIdentifierResponsePtrOutput struct{ *pulumi.OutputState }

func (GalleryIdentifierResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryIdentifierResponse)(nil)).Elem()
}

func (o GalleryIdentifierResponsePtrOutput) ToGalleryIdentifierResponsePtrOutput() GalleryIdentifierResponsePtrOutput {
	return o
}

func (o GalleryIdentifierResponsePtrOutput) ToGalleryIdentifierResponsePtrOutputWithContext(ctx context.Context) GalleryIdentifierResponsePtrOutput {
	return o
}

func (o GalleryIdentifierResponsePtrOutput) Elem() GalleryIdentifierResponseOutput {
	return o.ApplyT(func(v *GalleryIdentifierResponse) GalleryIdentifierResponse { return *v }).(GalleryIdentifierResponseOutput)
}

// The unique name of the Shared Image Gallery. This name is generated automatically by Azure.
func (o GalleryIdentifierResponsePtrOutput) UniqueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryIdentifierResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UniqueName
	}).(pulumi.StringPtrOutput)
}

// A feature for gallery image.
type GalleryImageFeature struct {
	// The name of the gallery image feature.
	Name *string `pulumi:"name"`
	// The value of the gallery image feature.
	Value *string `pulumi:"value"`
}

// GalleryImageFeatureInput is an input type that accepts GalleryImageFeatureArgs and GalleryImageFeatureOutput values.
// You can construct a concrete instance of `GalleryImageFeatureInput` via:
//
//          GalleryImageFeatureArgs{...}
type GalleryImageFeatureInput interface {
	pulumi.Input

	ToGalleryImageFeatureOutput() GalleryImageFeatureOutput
	ToGalleryImageFeatureOutputWithContext(context.Context) GalleryImageFeatureOutput
}

// A feature for gallery image.
type GalleryImageFeatureArgs struct {
	// The name of the gallery image feature.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value of the gallery image feature.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GalleryImageFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageFeature)(nil)).Elem()
}

func (i GalleryImageFeatureArgs) ToGalleryImageFeatureOutput() GalleryImageFeatureOutput {
	return i.ToGalleryImageFeatureOutputWithContext(context.Background())
}

func (i GalleryImageFeatureArgs) ToGalleryImageFeatureOutputWithContext(ctx context.Context) GalleryImageFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageFeatureOutput)
}

// GalleryImageFeatureArrayInput is an input type that accepts GalleryImageFeatureArray and GalleryImageFeatureArrayOutput values.
// You can construct a concrete instance of `GalleryImageFeatureArrayInput` via:
//
//          GalleryImageFeatureArray{ GalleryImageFeatureArgs{...} }
type GalleryImageFeatureArrayInput interface {
	pulumi.Input

	ToGalleryImageFeatureArrayOutput() GalleryImageFeatureArrayOutput
	ToGalleryImageFeatureArrayOutputWithContext(context.Context) GalleryImageFeatureArrayOutput
}

type GalleryImageFeatureArray []GalleryImageFeatureInput

func (GalleryImageFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GalleryImageFeature)(nil)).Elem()
}

func (i GalleryImageFeatureArray) ToGalleryImageFeatureArrayOutput() GalleryImageFeatureArrayOutput {
	return i.ToGalleryImageFeatureArrayOutputWithContext(context.Background())
}

func (i GalleryImageFeatureArray) ToGalleryImageFeatureArrayOutputWithContext(ctx context.Context) GalleryImageFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageFeatureArrayOutput)
}

// A feature for gallery image.
type GalleryImageFeatureResponse struct {
	// The name of the gallery image feature.
	Name *string `pulumi:"name"`
	// The value of the gallery image feature.
	Value *string `pulumi:"value"`
}

// A feature for gallery image.
type GalleryImageFeatureResponseOutput struct{ *pulumi.OutputState }

func (GalleryImageFeatureResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageFeatureResponse)(nil)).Elem()
}

func (o GalleryImageFeatureResponseOutput) ToGalleryImageFeatureResponseOutput() GalleryImageFeatureResponseOutput {
	return o
}

func (o GalleryImageFeatureResponseOutput) ToGalleryImageFeatureResponseOutputWithContext(ctx context.Context) GalleryImageFeatureResponseOutput {
	return o
}

// The name of the gallery image feature.
func (o GalleryImageFeatureResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryImageFeatureResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of the gallery image feature.
func (o GalleryImageFeatureResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryImageFeatureResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GalleryImageFeatureResponseArrayOutput struct{ *pulumi.OutputState }

func (GalleryImageFeatureResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GalleryImageFeatureResponse)(nil)).Elem()
}

func (o GalleryImageFeatureResponseArrayOutput) ToGalleryImageFeatureResponseArrayOutput() GalleryImageFeatureResponseArrayOutput {
	return o
}

func (o GalleryImageFeatureResponseArrayOutput) ToGalleryImageFeatureResponseArrayOutputWithContext(ctx context.Context) GalleryImageFeatureResponseArrayOutput {
	return o
}

func (o GalleryImageFeatureResponseArrayOutput) Index(i pulumi.IntInput) GalleryImageFeatureResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GalleryImageFeatureResponse {
		return vs[0].([]GalleryImageFeatureResponse)[vs[1].(int)]
	}).(GalleryImageFeatureResponseOutput)
}

// This is the gallery image definition identifier.
type GalleryImageIdentifier struct {
	// The name of the gallery image definition offer.
	Offer string `pulumi:"offer"`
	// The name of the gallery image definition publisher.
	Publisher string `pulumi:"publisher"`
	// The name of the gallery image definition SKU.
	Sku string `pulumi:"sku"`
}

// GalleryImageIdentifierInput is an input type that accepts GalleryImageIdentifierArgs and GalleryImageIdentifierOutput values.
// You can construct a concrete instance of `GalleryImageIdentifierInput` via:
//
//          GalleryImageIdentifierArgs{...}
type GalleryImageIdentifierInput interface {
	pulumi.Input

	ToGalleryImageIdentifierOutput() GalleryImageIdentifierOutput
	ToGalleryImageIdentifierOutputWithContext(context.Context) GalleryImageIdentifierOutput
}

// This is the gallery image definition identifier.
type GalleryImageIdentifierArgs struct {
	// The name of the gallery image definition offer.
	Offer pulumi.StringInput `pulumi:"offer"`
	// The name of the gallery image definition publisher.
	Publisher pulumi.StringInput `pulumi:"publisher"`
	// The name of the gallery image definition SKU.
	Sku pulumi.StringInput `pulumi:"sku"`
}

func (GalleryImageIdentifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageIdentifier)(nil)).Elem()
}

func (i GalleryImageIdentifierArgs) ToGalleryImageIdentifierOutput() GalleryImageIdentifierOutput {
	return i.ToGalleryImageIdentifierOutputWithContext(context.Background())
}

func (i GalleryImageIdentifierArgs) ToGalleryImageIdentifierOutputWithContext(ctx context.Context) GalleryImageIdentifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageIdentifierOutput)
}

func (i GalleryImageIdentifierArgs) ToGalleryImageIdentifierPtrOutput() GalleryImageIdentifierPtrOutput {
	return i.ToGalleryImageIdentifierPtrOutputWithContext(context.Background())
}

func (i GalleryImageIdentifierArgs) ToGalleryImageIdentifierPtrOutputWithContext(ctx context.Context) GalleryImageIdentifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageIdentifierOutput).ToGalleryImageIdentifierPtrOutputWithContext(ctx)
}

// GalleryImageIdentifierPtrInput is an input type that accepts GalleryImageIdentifierArgs, GalleryImageIdentifierPtr and GalleryImageIdentifierPtrOutput values.
// You can construct a concrete instance of `GalleryImageIdentifierPtrInput` via:
//
//          GalleryImageIdentifierArgs{...}
//
//  or:
//
//          nil
type GalleryImageIdentifierPtrInput interface {
	pulumi.Input

	ToGalleryImageIdentifierPtrOutput() GalleryImageIdentifierPtrOutput
	ToGalleryImageIdentifierPtrOutputWithContext(context.Context) GalleryImageIdentifierPtrOutput
}

type galleryImageIdentifierPtrType GalleryImageIdentifierArgs

func GalleryImageIdentifierPtr(v *GalleryImageIdentifierArgs) GalleryImageIdentifierPtrInput {
	return (*galleryImageIdentifierPtrType)(v)
}

func (*galleryImageIdentifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryImageIdentifier)(nil)).Elem()
}

func (i *galleryImageIdentifierPtrType) ToGalleryImageIdentifierPtrOutput() GalleryImageIdentifierPtrOutput {
	return i.ToGalleryImageIdentifierPtrOutputWithContext(context.Background())
}

func (i *galleryImageIdentifierPtrType) ToGalleryImageIdentifierPtrOutputWithContext(ctx context.Context) GalleryImageIdentifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageIdentifierPtrOutput)
}

// This is the gallery image definition identifier.
type GalleryImageIdentifierResponse struct {
	// The name of the gallery image definition offer.
	Offer string `pulumi:"offer"`
	// The name of the gallery image definition publisher.
	Publisher string `pulumi:"publisher"`
	// The name of the gallery image definition SKU.
	Sku string `pulumi:"sku"`
}

// This is the gallery image definition identifier.
type GalleryImageIdentifierResponseOutput struct{ *pulumi.OutputState }

func (GalleryImageIdentifierResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageIdentifierResponse)(nil)).Elem()
}

func (o GalleryImageIdentifierResponseOutput) ToGalleryImageIdentifierResponseOutput() GalleryImageIdentifierResponseOutput {
	return o
}

func (o GalleryImageIdentifierResponseOutput) ToGalleryImageIdentifierResponseOutputWithContext(ctx context.Context) GalleryImageIdentifierResponseOutput {
	return o
}

func (o GalleryImageIdentifierResponseOutput) ToGalleryImageIdentifierResponsePtrOutput() GalleryImageIdentifierResponsePtrOutput {
	return o.ToGalleryImageIdentifierResponsePtrOutputWithContext(context.Background())
}

func (o GalleryImageIdentifierResponseOutput) ToGalleryImageIdentifierResponsePtrOutputWithContext(ctx context.Context) GalleryImageIdentifierResponsePtrOutput {
	return o.ApplyT(func(v GalleryImageIdentifierResponse) *GalleryImageIdentifierResponse {
		return &v
	}).(GalleryImageIdentifierResponsePtrOutput)
}

// The name of the gallery image definition offer.
func (o GalleryImageIdentifierResponseOutput) Offer() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryImageIdentifierResponse) string { return v.Offer }).(pulumi.StringOutput)
}

// The name of the gallery image definition publisher.
func (o GalleryImageIdentifierResponseOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryImageIdentifierResponse) string { return v.Publisher }).(pulumi.StringOutput)
}

// The name of the gallery image definition SKU.
func (o GalleryImageIdentifierResponseOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryImageIdentifierResponse) string { return v.Sku }).(pulumi.StringOutput)
}

type GalleryImageIdentifierResponsePtrOutput struct{ *pulumi.OutputState }

func (GalleryImageIdentifierResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryImageIdentifierResponse)(nil)).Elem()
}

func (o GalleryImageIdentifierResponsePtrOutput) ToGalleryImageIdentifierResponsePtrOutput() GalleryImageIdentifierResponsePtrOutput {
	return o
}

func (o GalleryImageIdentifierResponsePtrOutput) ToGalleryImageIdentifierResponsePtrOutputWithContext(ctx context.Context) GalleryImageIdentifierResponsePtrOutput {
	return o
}

func (o GalleryImageIdentifierResponsePtrOutput) Elem() GalleryImageIdentifierResponseOutput {
	return o.ApplyT(func(v *GalleryImageIdentifierResponse) GalleryImageIdentifierResponse { return *v }).(GalleryImageIdentifierResponseOutput)
}

// The name of the gallery image definition offer.
func (o GalleryImageIdentifierResponsePtrOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryImageIdentifierResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Offer
	}).(pulumi.StringPtrOutput)
}

// The name of the gallery image definition publisher.
func (o GalleryImageIdentifierResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryImageIdentifierResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

// The name of the gallery image definition SKU.
func (o GalleryImageIdentifierResponsePtrOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryImageIdentifierResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Sku
	}).(pulumi.StringPtrOutput)
}

// The publishing profile of a gallery image Version.
type GalleryImageVersionPublishingProfile struct {
	// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
	EndOfLifeDate *string `pulumi:"endOfLifeDate"`
	// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
	ExcludeFromLatest *bool `pulumi:"excludeFromLatest"`
	// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
	ReplicaCount *int `pulumi:"replicaCount"`
	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType *string `pulumi:"storageAccountType"`
	// The target regions where the Image Version is going to be replicated to. This property is updatable.
	TargetRegions []TargetRegion `pulumi:"targetRegions"`
}

// GalleryImageVersionPublishingProfileInput is an input type that accepts GalleryImageVersionPublishingProfileArgs and GalleryImageVersionPublishingProfileOutput values.
// You can construct a concrete instance of `GalleryImageVersionPublishingProfileInput` via:
//
//          GalleryImageVersionPublishingProfileArgs{...}
type GalleryImageVersionPublishingProfileInput interface {
	pulumi.Input

	ToGalleryImageVersionPublishingProfileOutput() GalleryImageVersionPublishingProfileOutput
	ToGalleryImageVersionPublishingProfileOutputWithContext(context.Context) GalleryImageVersionPublishingProfileOutput
}

// The publishing profile of a gallery image Version.
type GalleryImageVersionPublishingProfileArgs struct {
	// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
	EndOfLifeDate pulumi.StringPtrInput `pulumi:"endOfLifeDate"`
	// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
	ExcludeFromLatest pulumi.BoolPtrInput `pulumi:"excludeFromLatest"`
	// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
	ReplicaCount pulumi.IntPtrInput `pulumi:"replicaCount"`
	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType pulumi.StringPtrInput `pulumi:"storageAccountType"`
	// The target regions where the Image Version is going to be replicated to. This property is updatable.
	TargetRegions TargetRegionArrayInput `pulumi:"targetRegions"`
}

func (GalleryImageVersionPublishingProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageVersionPublishingProfile)(nil)).Elem()
}

func (i GalleryImageVersionPublishingProfileArgs) ToGalleryImageVersionPublishingProfileOutput() GalleryImageVersionPublishingProfileOutput {
	return i.ToGalleryImageVersionPublishingProfileOutputWithContext(context.Background())
}

func (i GalleryImageVersionPublishingProfileArgs) ToGalleryImageVersionPublishingProfileOutputWithContext(ctx context.Context) GalleryImageVersionPublishingProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageVersionPublishingProfileOutput)
}

func (i GalleryImageVersionPublishingProfileArgs) ToGalleryImageVersionPublishingProfilePtrOutput() GalleryImageVersionPublishingProfilePtrOutput {
	return i.ToGalleryImageVersionPublishingProfilePtrOutputWithContext(context.Background())
}

func (i GalleryImageVersionPublishingProfileArgs) ToGalleryImageVersionPublishingProfilePtrOutputWithContext(ctx context.Context) GalleryImageVersionPublishingProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageVersionPublishingProfileOutput).ToGalleryImageVersionPublishingProfilePtrOutputWithContext(ctx)
}

// GalleryImageVersionPublishingProfilePtrInput is an input type that accepts GalleryImageVersionPublishingProfileArgs, GalleryImageVersionPublishingProfilePtr and GalleryImageVersionPublishingProfilePtrOutput values.
// You can construct a concrete instance of `GalleryImageVersionPublishingProfilePtrInput` via:
//
//          GalleryImageVersionPublishingProfileArgs{...}
//
//  or:
//
//          nil
type GalleryImageVersionPublishingProfilePtrInput interface {
	pulumi.Input

	ToGalleryImageVersionPublishingProfilePtrOutput() GalleryImageVersionPublishingProfilePtrOutput
	ToGalleryImageVersionPublishingProfilePtrOutputWithContext(context.Context) GalleryImageVersionPublishingProfilePtrOutput
}

type galleryImageVersionPublishingProfilePtrType GalleryImageVersionPublishingProfileArgs

func GalleryImageVersionPublishingProfilePtr(v *GalleryImageVersionPublishingProfileArgs) GalleryImageVersionPublishingProfilePtrInput {
	return (*galleryImageVersionPublishingProfilePtrType)(v)
}

func (*galleryImageVersionPublishingProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryImageVersionPublishingProfile)(nil)).Elem()
}

func (i *galleryImageVersionPublishingProfilePtrType) ToGalleryImageVersionPublishingProfilePtrOutput() GalleryImageVersionPublishingProfilePtrOutput {
	return i.ToGalleryImageVersionPublishingProfilePtrOutputWithContext(context.Background())
}

func (i *galleryImageVersionPublishingProfilePtrType) ToGalleryImageVersionPublishingProfilePtrOutputWithContext(ctx context.Context) GalleryImageVersionPublishingProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageVersionPublishingProfilePtrOutput)
}

// The publishing profile of a gallery image Version.
type GalleryImageVersionPublishingProfileResponse struct {
	// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
	EndOfLifeDate *string `pulumi:"endOfLifeDate"`
	// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
	ExcludeFromLatest *bool `pulumi:"excludeFromLatest"`
	// The timestamp for when the gallery image version is published.
	PublishedDate string `pulumi:"publishedDate"`
	// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
	ReplicaCount *int `pulumi:"replicaCount"`
	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType *string `pulumi:"storageAccountType"`
	// The target regions where the Image Version is going to be replicated to. This property is updatable.
	TargetRegions []TargetRegionResponse `pulumi:"targetRegions"`
}

// The publishing profile of a gallery image Version.
type GalleryImageVersionPublishingProfileResponseOutput struct{ *pulumi.OutputState }

func (GalleryImageVersionPublishingProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageVersionPublishingProfileResponse)(nil)).Elem()
}

func (o GalleryImageVersionPublishingProfileResponseOutput) ToGalleryImageVersionPublishingProfileResponseOutput() GalleryImageVersionPublishingProfileResponseOutput {
	return o
}

func (o GalleryImageVersionPublishingProfileResponseOutput) ToGalleryImageVersionPublishingProfileResponseOutputWithContext(ctx context.Context) GalleryImageVersionPublishingProfileResponseOutput {
	return o
}

func (o GalleryImageVersionPublishingProfileResponseOutput) ToGalleryImageVersionPublishingProfileResponsePtrOutput() GalleryImageVersionPublishingProfileResponsePtrOutput {
	return o.ToGalleryImageVersionPublishingProfileResponsePtrOutputWithContext(context.Background())
}

func (o GalleryImageVersionPublishingProfileResponseOutput) ToGalleryImageVersionPublishingProfileResponsePtrOutputWithContext(ctx context.Context) GalleryImageVersionPublishingProfileResponsePtrOutput {
	return o.ApplyT(func(v GalleryImageVersionPublishingProfileResponse) *GalleryImageVersionPublishingProfileResponse {
		return &v
	}).(GalleryImageVersionPublishingProfileResponsePtrOutput)
}

// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
func (o GalleryImageVersionPublishingProfileResponseOutput) EndOfLifeDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryImageVersionPublishingProfileResponse) *string { return v.EndOfLifeDate }).(pulumi.StringPtrOutput)
}

// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
func (o GalleryImageVersionPublishingProfileResponseOutput) ExcludeFromLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GalleryImageVersionPublishingProfileResponse) *bool { return v.ExcludeFromLatest }).(pulumi.BoolPtrOutput)
}

// The timestamp for when the gallery image version is published.
func (o GalleryImageVersionPublishingProfileResponseOutput) PublishedDate() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryImageVersionPublishingProfileResponse) string { return v.PublishedDate }).(pulumi.StringOutput)
}

// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
func (o GalleryImageVersionPublishingProfileResponseOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GalleryImageVersionPublishingProfileResponse) *int { return v.ReplicaCount }).(pulumi.IntPtrOutput)
}

// Specifies the storage account type to be used to store the image. This property is not updatable.
func (o GalleryImageVersionPublishingProfileResponseOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryImageVersionPublishingProfileResponse) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

// The target regions where the Image Version is going to be replicated to. This property is updatable.
func (o GalleryImageVersionPublishingProfileResponseOutput) TargetRegions() TargetRegionResponseArrayOutput {
	return o.ApplyT(func(v GalleryImageVersionPublishingProfileResponse) []TargetRegionResponse { return v.TargetRegions }).(TargetRegionResponseArrayOutput)
}

type GalleryImageVersionPublishingProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (GalleryImageVersionPublishingProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryImageVersionPublishingProfileResponse)(nil)).Elem()
}

func (o GalleryImageVersionPublishingProfileResponsePtrOutput) ToGalleryImageVersionPublishingProfileResponsePtrOutput() GalleryImageVersionPublishingProfileResponsePtrOutput {
	return o
}

func (o GalleryImageVersionPublishingProfileResponsePtrOutput) ToGalleryImageVersionPublishingProfileResponsePtrOutputWithContext(ctx context.Context) GalleryImageVersionPublishingProfileResponsePtrOutput {
	return o
}

func (o GalleryImageVersionPublishingProfileResponsePtrOutput) Elem() GalleryImageVersionPublishingProfileResponseOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfileResponse) GalleryImageVersionPublishingProfileResponse {
		return *v
	}).(GalleryImageVersionPublishingProfileResponseOutput)
}

// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
func (o GalleryImageVersionPublishingProfileResponsePtrOutput) EndOfLifeDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndOfLifeDate
	}).(pulumi.StringPtrOutput)
}

// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
func (o GalleryImageVersionPublishingProfileResponsePtrOutput) ExcludeFromLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ExcludeFromLatest
	}).(pulumi.BoolPtrOutput)
}

// The timestamp for when the gallery image version is published.
func (o GalleryImageVersionPublishingProfileResponsePtrOutput) PublishedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PublishedDate
	}).(pulumi.StringPtrOutput)
}

// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
func (o GalleryImageVersionPublishingProfileResponsePtrOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfileResponse) *int {
		if v == nil {
			return nil
		}
		return v.ReplicaCount
	}).(pulumi.IntPtrOutput)
}

// Specifies the storage account type to be used to store the image. This property is not updatable.
func (o GalleryImageVersionPublishingProfileResponsePtrOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountType
	}).(pulumi.StringPtrOutput)
}

// The target regions where the Image Version is going to be replicated to. This property is updatable.
func (o GalleryImageVersionPublishingProfileResponsePtrOutput) TargetRegions() TargetRegionResponseArrayOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfileResponse) []TargetRegionResponse {
		if v == nil {
			return nil
		}
		return v.TargetRegions
	}).(TargetRegionResponseArrayOutput)
}

// This is the storage profile of a Gallery Image Version.
type GalleryImageVersionStorageProfile struct {
	// A list of data disk images.
	DataDiskImages []GalleryDataDiskImage `pulumi:"dataDiskImages"`
	// This is the OS disk image.
	OsDiskImage *GalleryOSDiskImage `pulumi:"osDiskImage"`
	// The gallery artifact version source.
	Source *GalleryArtifactVersionSource `pulumi:"source"`
}

// GalleryImageVersionStorageProfileInput is an input type that accepts GalleryImageVersionStorageProfileArgs and GalleryImageVersionStorageProfileOutput values.
// You can construct a concrete instance of `GalleryImageVersionStorageProfileInput` via:
//
//          GalleryImageVersionStorageProfileArgs{...}
type GalleryImageVersionStorageProfileInput interface {
	pulumi.Input

	ToGalleryImageVersionStorageProfileOutput() GalleryImageVersionStorageProfileOutput
	ToGalleryImageVersionStorageProfileOutputWithContext(context.Context) GalleryImageVersionStorageProfileOutput
}

// This is the storage profile of a Gallery Image Version.
type GalleryImageVersionStorageProfileArgs struct {
	// A list of data disk images.
	DataDiskImages GalleryDataDiskImageArrayInput `pulumi:"dataDiskImages"`
	// This is the OS disk image.
	OsDiskImage GalleryOSDiskImagePtrInput `pulumi:"osDiskImage"`
	// The gallery artifact version source.
	Source GalleryArtifactVersionSourcePtrInput `pulumi:"source"`
}

func (GalleryImageVersionStorageProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageVersionStorageProfile)(nil)).Elem()
}

func (i GalleryImageVersionStorageProfileArgs) ToGalleryImageVersionStorageProfileOutput() GalleryImageVersionStorageProfileOutput {
	return i.ToGalleryImageVersionStorageProfileOutputWithContext(context.Background())
}

func (i GalleryImageVersionStorageProfileArgs) ToGalleryImageVersionStorageProfileOutputWithContext(ctx context.Context) GalleryImageVersionStorageProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageVersionStorageProfileOutput)
}

func (i GalleryImageVersionStorageProfileArgs) ToGalleryImageVersionStorageProfilePtrOutput() GalleryImageVersionStorageProfilePtrOutput {
	return i.ToGalleryImageVersionStorageProfilePtrOutputWithContext(context.Background())
}

func (i GalleryImageVersionStorageProfileArgs) ToGalleryImageVersionStorageProfilePtrOutputWithContext(ctx context.Context) GalleryImageVersionStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageVersionStorageProfileOutput).ToGalleryImageVersionStorageProfilePtrOutputWithContext(ctx)
}

// GalleryImageVersionStorageProfilePtrInput is an input type that accepts GalleryImageVersionStorageProfileArgs, GalleryImageVersionStorageProfilePtr and GalleryImageVersionStorageProfilePtrOutput values.
// You can construct a concrete instance of `GalleryImageVersionStorageProfilePtrInput` via:
//
//          GalleryImageVersionStorageProfileArgs{...}
//
//  or:
//
//          nil
type GalleryImageVersionStorageProfilePtrInput interface {
	pulumi.Input

	ToGalleryImageVersionStorageProfilePtrOutput() GalleryImageVersionStorageProfilePtrOutput
	ToGalleryImageVersionStorageProfilePtrOutputWithContext(context.Context) GalleryImageVersionStorageProfilePtrOutput
}

type galleryImageVersionStorageProfilePtrType GalleryImageVersionStorageProfileArgs

func GalleryImageVersionStorageProfilePtr(v *GalleryImageVersionStorageProfileArgs) GalleryImageVersionStorageProfilePtrInput {
	return (*galleryImageVersionStorageProfilePtrType)(v)
}

func (*galleryImageVersionStorageProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryImageVersionStorageProfile)(nil)).Elem()
}

func (i *galleryImageVersionStorageProfilePtrType) ToGalleryImageVersionStorageProfilePtrOutput() GalleryImageVersionStorageProfilePtrOutput {
	return i.ToGalleryImageVersionStorageProfilePtrOutputWithContext(context.Background())
}

func (i *galleryImageVersionStorageProfilePtrType) ToGalleryImageVersionStorageProfilePtrOutputWithContext(ctx context.Context) GalleryImageVersionStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageVersionStorageProfilePtrOutput)
}

// This is the storage profile of a Gallery Image Version.
type GalleryImageVersionStorageProfileResponse struct {
	// A list of data disk images.
	DataDiskImages []GalleryDataDiskImageResponse `pulumi:"dataDiskImages"`
	// This is the OS disk image.
	OsDiskImage *GalleryOSDiskImageResponse `pulumi:"osDiskImage"`
	// The gallery artifact version source.
	Source *GalleryArtifactVersionSourceResponse `pulumi:"source"`
}

// This is the storage profile of a Gallery Image Version.
type GalleryImageVersionStorageProfileResponseOutput struct{ *pulumi.OutputState }

func (GalleryImageVersionStorageProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageVersionStorageProfileResponse)(nil)).Elem()
}

func (o GalleryImageVersionStorageProfileResponseOutput) ToGalleryImageVersionStorageProfileResponseOutput() GalleryImageVersionStorageProfileResponseOutput {
	return o
}

func (o GalleryImageVersionStorageProfileResponseOutput) ToGalleryImageVersionStorageProfileResponseOutputWithContext(ctx context.Context) GalleryImageVersionStorageProfileResponseOutput {
	return o
}

func (o GalleryImageVersionStorageProfileResponseOutput) ToGalleryImageVersionStorageProfileResponsePtrOutput() GalleryImageVersionStorageProfileResponsePtrOutput {
	return o.ToGalleryImageVersionStorageProfileResponsePtrOutputWithContext(context.Background())
}

func (o GalleryImageVersionStorageProfileResponseOutput) ToGalleryImageVersionStorageProfileResponsePtrOutputWithContext(ctx context.Context) GalleryImageVersionStorageProfileResponsePtrOutput {
	return o.ApplyT(func(v GalleryImageVersionStorageProfileResponse) *GalleryImageVersionStorageProfileResponse {
		return &v
	}).(GalleryImageVersionStorageProfileResponsePtrOutput)
}

// A list of data disk images.
func (o GalleryImageVersionStorageProfileResponseOutput) DataDiskImages() GalleryDataDiskImageResponseArrayOutput {
	return o.ApplyT(func(v GalleryImageVersionStorageProfileResponse) []GalleryDataDiskImageResponse {
		return v.DataDiskImages
	}).(GalleryDataDiskImageResponseArrayOutput)
}

// This is the OS disk image.
func (o GalleryImageVersionStorageProfileResponseOutput) OsDiskImage() GalleryOSDiskImageResponsePtrOutput {
	return o.ApplyT(func(v GalleryImageVersionStorageProfileResponse) *GalleryOSDiskImageResponse { return v.OsDiskImage }).(GalleryOSDiskImageResponsePtrOutput)
}

// The gallery artifact version source.
func (o GalleryImageVersionStorageProfileResponseOutput) Source() GalleryArtifactVersionSourceResponsePtrOutput {
	return o.ApplyT(func(v GalleryImageVersionStorageProfileResponse) *GalleryArtifactVersionSourceResponse {
		return v.Source
	}).(GalleryArtifactVersionSourceResponsePtrOutput)
}

type GalleryImageVersionStorageProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (GalleryImageVersionStorageProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryImageVersionStorageProfileResponse)(nil)).Elem()
}

func (o GalleryImageVersionStorageProfileResponsePtrOutput) ToGalleryImageVersionStorageProfileResponsePtrOutput() GalleryImageVersionStorageProfileResponsePtrOutput {
	return o
}

func (o GalleryImageVersionStorageProfileResponsePtrOutput) ToGalleryImageVersionStorageProfileResponsePtrOutputWithContext(ctx context.Context) GalleryImageVersionStorageProfileResponsePtrOutput {
	return o
}

func (o GalleryImageVersionStorageProfileResponsePtrOutput) Elem() GalleryImageVersionStorageProfileResponseOutput {
	return o.ApplyT(func(v *GalleryImageVersionStorageProfileResponse) GalleryImageVersionStorageProfileResponse {
		return *v
	}).(GalleryImageVersionStorageProfileResponseOutput)
}

// A list of data disk images.
func (o GalleryImageVersionStorageProfileResponsePtrOutput) DataDiskImages() GalleryDataDiskImageResponseArrayOutput {
	return o.ApplyT(func(v *GalleryImageVersionStorageProfileResponse) []GalleryDataDiskImageResponse {
		if v == nil {
			return nil
		}
		return v.DataDiskImages
	}).(GalleryDataDiskImageResponseArrayOutput)
}

// This is the OS disk image.
func (o GalleryImageVersionStorageProfileResponsePtrOutput) OsDiskImage() GalleryOSDiskImageResponsePtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionStorageProfileResponse) *GalleryOSDiskImageResponse {
		if v == nil {
			return nil
		}
		return v.OsDiskImage
	}).(GalleryOSDiskImageResponsePtrOutput)
}

// The gallery artifact version source.
func (o GalleryImageVersionStorageProfileResponsePtrOutput) Source() GalleryArtifactVersionSourceResponsePtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionStorageProfileResponse) *GalleryArtifactVersionSourceResponse {
		if v == nil {
			return nil
		}
		return v.Source
	}).(GalleryArtifactVersionSourceResponsePtrOutput)
}

// This is the OS disk image.
type GalleryOSDiskImage struct {
	// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
	HostCaching *string `pulumi:"hostCaching"`
	// The gallery artifact version source.
	Source *GalleryArtifactVersionSource `pulumi:"source"`
}

// GalleryOSDiskImageInput is an input type that accepts GalleryOSDiskImageArgs and GalleryOSDiskImageOutput values.
// You can construct a concrete instance of `GalleryOSDiskImageInput` via:
//
//          GalleryOSDiskImageArgs{...}
type GalleryOSDiskImageInput interface {
	pulumi.Input

	ToGalleryOSDiskImageOutput() GalleryOSDiskImageOutput
	ToGalleryOSDiskImageOutputWithContext(context.Context) GalleryOSDiskImageOutput
}

// This is the OS disk image.
type GalleryOSDiskImageArgs struct {
	// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
	HostCaching pulumi.StringPtrInput `pulumi:"hostCaching"`
	// The gallery artifact version source.
	Source GalleryArtifactVersionSourcePtrInput `pulumi:"source"`
}

func (GalleryOSDiskImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryOSDiskImage)(nil)).Elem()
}

func (i GalleryOSDiskImageArgs) ToGalleryOSDiskImageOutput() GalleryOSDiskImageOutput {
	return i.ToGalleryOSDiskImageOutputWithContext(context.Background())
}

func (i GalleryOSDiskImageArgs) ToGalleryOSDiskImageOutputWithContext(ctx context.Context) GalleryOSDiskImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryOSDiskImageOutput)
}

func (i GalleryOSDiskImageArgs) ToGalleryOSDiskImagePtrOutput() GalleryOSDiskImagePtrOutput {
	return i.ToGalleryOSDiskImagePtrOutputWithContext(context.Background())
}

func (i GalleryOSDiskImageArgs) ToGalleryOSDiskImagePtrOutputWithContext(ctx context.Context) GalleryOSDiskImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryOSDiskImageOutput).ToGalleryOSDiskImagePtrOutputWithContext(ctx)
}

// GalleryOSDiskImagePtrInput is an input type that accepts GalleryOSDiskImageArgs, GalleryOSDiskImagePtr and GalleryOSDiskImagePtrOutput values.
// You can construct a concrete instance of `GalleryOSDiskImagePtrInput` via:
//
//          GalleryOSDiskImageArgs{...}
//
//  or:
//
//          nil
type GalleryOSDiskImagePtrInput interface {
	pulumi.Input

	ToGalleryOSDiskImagePtrOutput() GalleryOSDiskImagePtrOutput
	ToGalleryOSDiskImagePtrOutputWithContext(context.Context) GalleryOSDiskImagePtrOutput
}

type galleryOSDiskImagePtrType GalleryOSDiskImageArgs

func GalleryOSDiskImagePtr(v *GalleryOSDiskImageArgs) GalleryOSDiskImagePtrInput {
	return (*galleryOSDiskImagePtrType)(v)
}

func (*galleryOSDiskImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryOSDiskImage)(nil)).Elem()
}

func (i *galleryOSDiskImagePtrType) ToGalleryOSDiskImagePtrOutput() GalleryOSDiskImagePtrOutput {
	return i.ToGalleryOSDiskImagePtrOutputWithContext(context.Background())
}

func (i *galleryOSDiskImagePtrType) ToGalleryOSDiskImagePtrOutputWithContext(ctx context.Context) GalleryOSDiskImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryOSDiskImagePtrOutput)
}

// This is the OS disk image.
type GalleryOSDiskImageResponse struct {
	// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
	HostCaching *string `pulumi:"hostCaching"`
	// This property indicates the size of the VHD to be created.
	SizeInGB int `pulumi:"sizeInGB"`
	// The gallery artifact version source.
	Source *GalleryArtifactVersionSourceResponse `pulumi:"source"`
}

// This is the OS disk image.
type GalleryOSDiskImageResponseOutput struct{ *pulumi.OutputState }

func (GalleryOSDiskImageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryOSDiskImageResponse)(nil)).Elem()
}

func (o GalleryOSDiskImageResponseOutput) ToGalleryOSDiskImageResponseOutput() GalleryOSDiskImageResponseOutput {
	return o
}

func (o GalleryOSDiskImageResponseOutput) ToGalleryOSDiskImageResponseOutputWithContext(ctx context.Context) GalleryOSDiskImageResponseOutput {
	return o
}

func (o GalleryOSDiskImageResponseOutput) ToGalleryOSDiskImageResponsePtrOutput() GalleryOSDiskImageResponsePtrOutput {
	return o.ToGalleryOSDiskImageResponsePtrOutputWithContext(context.Background())
}

func (o GalleryOSDiskImageResponseOutput) ToGalleryOSDiskImageResponsePtrOutputWithContext(ctx context.Context) GalleryOSDiskImageResponsePtrOutput {
	return o.ApplyT(func(v GalleryOSDiskImageResponse) *GalleryOSDiskImageResponse {
		return &v
	}).(GalleryOSDiskImageResponsePtrOutput)
}

// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
func (o GalleryOSDiskImageResponseOutput) HostCaching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryOSDiskImageResponse) *string { return v.HostCaching }).(pulumi.StringPtrOutput)
}

// This property indicates the size of the VHD to be created.
func (o GalleryOSDiskImageResponseOutput) SizeInGB() pulumi.IntOutput {
	return o.ApplyT(func(v GalleryOSDiskImageResponse) int { return v.SizeInGB }).(pulumi.IntOutput)
}

// The gallery artifact version source.
func (o GalleryOSDiskImageResponseOutput) Source() GalleryArtifactVersionSourceResponsePtrOutput {
	return o.ApplyT(func(v GalleryOSDiskImageResponse) *GalleryArtifactVersionSourceResponse { return v.Source }).(GalleryArtifactVersionSourceResponsePtrOutput)
}

type GalleryOSDiskImageResponsePtrOutput struct{ *pulumi.OutputState }

func (GalleryOSDiskImageResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryOSDiskImageResponse)(nil)).Elem()
}

func (o GalleryOSDiskImageResponsePtrOutput) ToGalleryOSDiskImageResponsePtrOutput() GalleryOSDiskImageResponsePtrOutput {
	return o
}

func (o GalleryOSDiskImageResponsePtrOutput) ToGalleryOSDiskImageResponsePtrOutputWithContext(ctx context.Context) GalleryOSDiskImageResponsePtrOutput {
	return o
}

func (o GalleryOSDiskImageResponsePtrOutput) Elem() GalleryOSDiskImageResponseOutput {
	return o.ApplyT(func(v *GalleryOSDiskImageResponse) GalleryOSDiskImageResponse { return *v }).(GalleryOSDiskImageResponseOutput)
}

// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
func (o GalleryOSDiskImageResponsePtrOutput) HostCaching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryOSDiskImageResponse) *string {
		if v == nil {
			return nil
		}
		return v.HostCaching
	}).(pulumi.StringPtrOutput)
}

// This property indicates the size of the VHD to be created.
func (o GalleryOSDiskImageResponsePtrOutput) SizeInGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GalleryOSDiskImageResponse) *int {
		if v == nil {
			return nil
		}
		return &v.SizeInGB
	}).(pulumi.IntPtrOutput)
}

// The gallery artifact version source.
func (o GalleryOSDiskImageResponsePtrOutput) Source() GalleryArtifactVersionSourceResponsePtrOutput {
	return o.ApplyT(func(v *GalleryOSDiskImageResponse) *GalleryArtifactVersionSourceResponse {
		if v == nil {
			return nil
		}
		return v.Source
	}).(GalleryArtifactVersionSourceResponsePtrOutput)
}

// Guest configuration assignment properties.
type GuestConfigurationAssignmentProperties struct {
	// The source which initiated the guest configuration assignment. Ex: Azure Policy
	Context *string `pulumi:"context"`
	// The guest configuration to assign.
	GuestConfiguration *GuestConfigurationNavigation `pulumi:"guestConfiguration"`
}

// GuestConfigurationAssignmentPropertiesInput is an input type that accepts GuestConfigurationAssignmentPropertiesArgs and GuestConfigurationAssignmentPropertiesOutput values.
// You can construct a concrete instance of `GuestConfigurationAssignmentPropertiesInput` via:
//
//          GuestConfigurationAssignmentPropertiesArgs{...}
type GuestConfigurationAssignmentPropertiesInput interface {
	pulumi.Input

	ToGuestConfigurationAssignmentPropertiesOutput() GuestConfigurationAssignmentPropertiesOutput
	ToGuestConfigurationAssignmentPropertiesOutputWithContext(context.Context) GuestConfigurationAssignmentPropertiesOutput
}

// Guest configuration assignment properties.
type GuestConfigurationAssignmentPropertiesArgs struct {
	// The source which initiated the guest configuration assignment. Ex: Azure Policy
	Context pulumi.StringPtrInput `pulumi:"context"`
	// The guest configuration to assign.
	GuestConfiguration GuestConfigurationNavigationPtrInput `pulumi:"guestConfiguration"`
}

func (GuestConfigurationAssignmentPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GuestConfigurationAssignmentProperties)(nil)).Elem()
}

func (i GuestConfigurationAssignmentPropertiesArgs) ToGuestConfigurationAssignmentPropertiesOutput() GuestConfigurationAssignmentPropertiesOutput {
	return i.ToGuestConfigurationAssignmentPropertiesOutputWithContext(context.Background())
}

func (i GuestConfigurationAssignmentPropertiesArgs) ToGuestConfigurationAssignmentPropertiesOutputWithContext(ctx context.Context) GuestConfigurationAssignmentPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuestConfigurationAssignmentPropertiesOutput)
}

func (i GuestConfigurationAssignmentPropertiesArgs) ToGuestConfigurationAssignmentPropertiesPtrOutput() GuestConfigurationAssignmentPropertiesPtrOutput {
	return i.ToGuestConfigurationAssignmentPropertiesPtrOutputWithContext(context.Background())
}

func (i GuestConfigurationAssignmentPropertiesArgs) ToGuestConfigurationAssignmentPropertiesPtrOutputWithContext(ctx context.Context) GuestConfigurationAssignmentPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuestConfigurationAssignmentPropertiesOutput).ToGuestConfigurationAssignmentPropertiesPtrOutputWithContext(ctx)
}

// GuestConfigurationAssignmentPropertiesPtrInput is an input type that accepts GuestConfigurationAssignmentPropertiesArgs, GuestConfigurationAssignmentPropertiesPtr and GuestConfigurationAssignmentPropertiesPtrOutput values.
// You can construct a concrete instance of `GuestConfigurationAssignmentPropertiesPtrInput` via:
//
//          GuestConfigurationAssignmentPropertiesArgs{...}
//
//  or:
//
//          nil
type GuestConfigurationAssignmentPropertiesPtrInput interface {
	pulumi.Input

	ToGuestConfigurationAssignmentPropertiesPtrOutput() GuestConfigurationAssignmentPropertiesPtrOutput
	ToGuestConfigurationAssignmentPropertiesPtrOutputWithContext(context.Context) GuestConfigurationAssignmentPropertiesPtrOutput
}

type guestConfigurationAssignmentPropertiesPtrType GuestConfigurationAssignmentPropertiesArgs

func GuestConfigurationAssignmentPropertiesPtr(v *GuestConfigurationAssignmentPropertiesArgs) GuestConfigurationAssignmentPropertiesPtrInput {
	return (*guestConfigurationAssignmentPropertiesPtrType)(v)
}

func (*guestConfigurationAssignmentPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GuestConfigurationAssignmentProperties)(nil)).Elem()
}

func (i *guestConfigurationAssignmentPropertiesPtrType) ToGuestConfigurationAssignmentPropertiesPtrOutput() GuestConfigurationAssignmentPropertiesPtrOutput {
	return i.ToGuestConfigurationAssignmentPropertiesPtrOutputWithContext(context.Background())
}

func (i *guestConfigurationAssignmentPropertiesPtrType) ToGuestConfigurationAssignmentPropertiesPtrOutputWithContext(ctx context.Context) GuestConfigurationAssignmentPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuestConfigurationAssignmentPropertiesPtrOutput)
}

// Guest configuration assignment properties.
type GuestConfigurationAssignmentPropertiesResponse struct {
	// Combined hash of the configuration package and parameters.
	AssignmentHash string `pulumi:"assignmentHash"`
	// A value indicating compliance status of the machine for the assigned guest configuration.
	ComplianceStatus string `pulumi:"complianceStatus"`
	// The source which initiated the guest configuration assignment. Ex: Azure Policy
	Context *string `pulumi:"context"`
	// The guest configuration to assign.
	GuestConfiguration *GuestConfigurationNavigationResponse `pulumi:"guestConfiguration"`
	// Date and time when last compliance status was checked.
	LastComplianceStatusChecked string `pulumi:"lastComplianceStatusChecked"`
	// Last reported guest configuration assignment report.
	LatestAssignmentReport *AssignmentReportResponse `pulumi:"latestAssignmentReport"`
	// Id of the latest report for the guest configuration assignment.
	LatestReportId string `pulumi:"latestReportId"`
	// The provisioning state, which only appears in the response.
	ProvisioningState string `pulumi:"provisioningState"`
	// VM resource Id.
	TargetResourceId string `pulumi:"targetResourceId"`
}

// Guest configuration assignment properties.
type GuestConfigurationAssignmentPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GuestConfigurationAssignmentPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GuestConfigurationAssignmentPropertiesResponse)(nil)).Elem()
}

func (o GuestConfigurationAssignmentPropertiesResponseOutput) ToGuestConfigurationAssignmentPropertiesResponseOutput() GuestConfigurationAssignmentPropertiesResponseOutput {
	return o
}

func (o GuestConfigurationAssignmentPropertiesResponseOutput) ToGuestConfigurationAssignmentPropertiesResponseOutputWithContext(ctx context.Context) GuestConfigurationAssignmentPropertiesResponseOutput {
	return o
}

func (o GuestConfigurationAssignmentPropertiesResponseOutput) ToGuestConfigurationAssignmentPropertiesResponsePtrOutput() GuestConfigurationAssignmentPropertiesResponsePtrOutput {
	return o.ToGuestConfigurationAssignmentPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o GuestConfigurationAssignmentPropertiesResponseOutput) ToGuestConfigurationAssignmentPropertiesResponsePtrOutputWithContext(ctx context.Context) GuestConfigurationAssignmentPropertiesResponsePtrOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentPropertiesResponse) *GuestConfigurationAssignmentPropertiesResponse {
		return &v
	}).(GuestConfigurationAssignmentPropertiesResponsePtrOutput)
}

// Combined hash of the configuration package and parameters.
func (o GuestConfigurationAssignmentPropertiesResponseOutput) AssignmentHash() pulumi.StringOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentPropertiesResponse) string { return v.AssignmentHash }).(pulumi.StringOutput)
}

// A value indicating compliance status of the machine for the assigned guest configuration.
func (o GuestConfigurationAssignmentPropertiesResponseOutput) ComplianceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentPropertiesResponse) string { return v.ComplianceStatus }).(pulumi.StringOutput)
}

// The source which initiated the guest configuration assignment. Ex: Azure Policy
func (o GuestConfigurationAssignmentPropertiesResponseOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentPropertiesResponse) *string { return v.Context }).(pulumi.StringPtrOutput)
}

// The guest configuration to assign.
func (o GuestConfigurationAssignmentPropertiesResponseOutput) GuestConfiguration() GuestConfigurationNavigationResponsePtrOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentPropertiesResponse) *GuestConfigurationNavigationResponse {
		return v.GuestConfiguration
	}).(GuestConfigurationNavigationResponsePtrOutput)
}

// Date and time when last compliance status was checked.
func (o GuestConfigurationAssignmentPropertiesResponseOutput) LastComplianceStatusChecked() pulumi.StringOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentPropertiesResponse) string { return v.LastComplianceStatusChecked }).(pulumi.StringOutput)
}

// Last reported guest configuration assignment report.
func (o GuestConfigurationAssignmentPropertiesResponseOutput) LatestAssignmentReport() AssignmentReportResponsePtrOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentPropertiesResponse) *AssignmentReportResponse {
		return v.LatestAssignmentReport
	}).(AssignmentReportResponsePtrOutput)
}

// Id of the latest report for the guest configuration assignment.
func (o GuestConfigurationAssignmentPropertiesResponseOutput) LatestReportId() pulumi.StringOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentPropertiesResponse) string { return v.LatestReportId }).(pulumi.StringOutput)
}

// The provisioning state, which only appears in the response.
func (o GuestConfigurationAssignmentPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// VM resource Id.
func (o GuestConfigurationAssignmentPropertiesResponseOutput) TargetResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GuestConfigurationAssignmentPropertiesResponse) string { return v.TargetResourceId }).(pulumi.StringOutput)
}

type GuestConfigurationAssignmentPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (GuestConfigurationAssignmentPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GuestConfigurationAssignmentPropertiesResponse)(nil)).Elem()
}

func (o GuestConfigurationAssignmentPropertiesResponsePtrOutput) ToGuestConfigurationAssignmentPropertiesResponsePtrOutput() GuestConfigurationAssignmentPropertiesResponsePtrOutput {
	return o
}

func (o GuestConfigurationAssignmentPropertiesResponsePtrOutput) ToGuestConfigurationAssignmentPropertiesResponsePtrOutputWithContext(ctx context.Context) GuestConfigurationAssignmentPropertiesResponsePtrOutput {
	return o
}

func (o GuestConfigurationAssignmentPropertiesResponsePtrOutput) Elem() GuestConfigurationAssignmentPropertiesResponseOutput {
	return o.ApplyT(func(v *GuestConfigurationAssignmentPropertiesResponse) GuestConfigurationAssignmentPropertiesResponse {
		return *v
	}).(GuestConfigurationAssignmentPropertiesResponseOutput)
}

// Combined hash of the configuration package and parameters.
func (o GuestConfigurationAssignmentPropertiesResponsePtrOutput) AssignmentHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationAssignmentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AssignmentHash
	}).(pulumi.StringPtrOutput)
}

// A value indicating compliance status of the machine for the assigned guest configuration.
func (o GuestConfigurationAssignmentPropertiesResponsePtrOutput) ComplianceStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationAssignmentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ComplianceStatus
	}).(pulumi.StringPtrOutput)
}

// The source which initiated the guest configuration assignment. Ex: Azure Policy
func (o GuestConfigurationAssignmentPropertiesResponsePtrOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationAssignmentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Context
	}).(pulumi.StringPtrOutput)
}

// The guest configuration to assign.
func (o GuestConfigurationAssignmentPropertiesResponsePtrOutput) GuestConfiguration() GuestConfigurationNavigationResponsePtrOutput {
	return o.ApplyT(func(v *GuestConfigurationAssignmentPropertiesResponse) *GuestConfigurationNavigationResponse {
		if v == nil {
			return nil
		}
		return v.GuestConfiguration
	}).(GuestConfigurationNavigationResponsePtrOutput)
}

// Date and time when last compliance status was checked.
func (o GuestConfigurationAssignmentPropertiesResponsePtrOutput) LastComplianceStatusChecked() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationAssignmentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastComplianceStatusChecked
	}).(pulumi.StringPtrOutput)
}

// Last reported guest configuration assignment report.
func (o GuestConfigurationAssignmentPropertiesResponsePtrOutput) LatestAssignmentReport() AssignmentReportResponsePtrOutput {
	return o.ApplyT(func(v *GuestConfigurationAssignmentPropertiesResponse) *AssignmentReportResponse {
		if v == nil {
			return nil
		}
		return v.LatestAssignmentReport
	}).(AssignmentReportResponsePtrOutput)
}

// Id of the latest report for the guest configuration assignment.
func (o GuestConfigurationAssignmentPropertiesResponsePtrOutput) LatestReportId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationAssignmentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LatestReportId
	}).(pulumi.StringPtrOutput)
}

// The provisioning state, which only appears in the response.
func (o GuestConfigurationAssignmentPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationAssignmentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// VM resource Id.
func (o GuestConfigurationAssignmentPropertiesResponsePtrOutput) TargetResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationAssignmentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TargetResourceId
	}).(pulumi.StringPtrOutput)
}

// Guest configuration is an artifact that encapsulates DSC configuration and its dependencies. The artifact is a zip file containing DSC configuration (as MOF) and dependent resources and other dependencies like modules.
type GuestConfigurationNavigation struct {
	// The configuration parameters for the guest configuration.
	ConfigurationParameter []ConfigurationParameter `pulumi:"configurationParameter"`
	// The configuration setting for the guest configuration.
	ConfigurationSetting *ConfigurationSetting `pulumi:"configurationSetting"`
	// Kind of the guest configuration. For example:DSC
	Kind *string `pulumi:"kind"`
	// Name of the guest configuration.
	Name *string `pulumi:"name"`
	// Version of the guest configuration.
	Version *string `pulumi:"version"`
}

// GuestConfigurationNavigationInput is an input type that accepts GuestConfigurationNavigationArgs and GuestConfigurationNavigationOutput values.
// You can construct a concrete instance of `GuestConfigurationNavigationInput` via:
//
//          GuestConfigurationNavigationArgs{...}
type GuestConfigurationNavigationInput interface {
	pulumi.Input

	ToGuestConfigurationNavigationOutput() GuestConfigurationNavigationOutput
	ToGuestConfigurationNavigationOutputWithContext(context.Context) GuestConfigurationNavigationOutput
}

// Guest configuration is an artifact that encapsulates DSC configuration and its dependencies. The artifact is a zip file containing DSC configuration (as MOF) and dependent resources and other dependencies like modules.
type GuestConfigurationNavigationArgs struct {
	// The configuration parameters for the guest configuration.
	ConfigurationParameter ConfigurationParameterArrayInput `pulumi:"configurationParameter"`
	// The configuration setting for the guest configuration.
	ConfigurationSetting ConfigurationSettingPtrInput `pulumi:"configurationSetting"`
	// Kind of the guest configuration. For example:DSC
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the guest configuration.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Version of the guest configuration.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (GuestConfigurationNavigationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GuestConfigurationNavigation)(nil)).Elem()
}

func (i GuestConfigurationNavigationArgs) ToGuestConfigurationNavigationOutput() GuestConfigurationNavigationOutput {
	return i.ToGuestConfigurationNavigationOutputWithContext(context.Background())
}

func (i GuestConfigurationNavigationArgs) ToGuestConfigurationNavigationOutputWithContext(ctx context.Context) GuestConfigurationNavigationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuestConfigurationNavigationOutput)
}

func (i GuestConfigurationNavigationArgs) ToGuestConfigurationNavigationPtrOutput() GuestConfigurationNavigationPtrOutput {
	return i.ToGuestConfigurationNavigationPtrOutputWithContext(context.Background())
}

func (i GuestConfigurationNavigationArgs) ToGuestConfigurationNavigationPtrOutputWithContext(ctx context.Context) GuestConfigurationNavigationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuestConfigurationNavigationOutput).ToGuestConfigurationNavigationPtrOutputWithContext(ctx)
}

// GuestConfigurationNavigationPtrInput is an input type that accepts GuestConfigurationNavigationArgs, GuestConfigurationNavigationPtr and GuestConfigurationNavigationPtrOutput values.
// You can construct a concrete instance of `GuestConfigurationNavigationPtrInput` via:
//
//          GuestConfigurationNavigationArgs{...}
//
//  or:
//
//          nil
type GuestConfigurationNavigationPtrInput interface {
	pulumi.Input

	ToGuestConfigurationNavigationPtrOutput() GuestConfigurationNavigationPtrOutput
	ToGuestConfigurationNavigationPtrOutputWithContext(context.Context) GuestConfigurationNavigationPtrOutput
}

type guestConfigurationNavigationPtrType GuestConfigurationNavigationArgs

func GuestConfigurationNavigationPtr(v *GuestConfigurationNavigationArgs) GuestConfigurationNavigationPtrInput {
	return (*guestConfigurationNavigationPtrType)(v)
}

func (*guestConfigurationNavigationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GuestConfigurationNavigation)(nil)).Elem()
}

func (i *guestConfigurationNavigationPtrType) ToGuestConfigurationNavigationPtrOutput() GuestConfigurationNavigationPtrOutput {
	return i.ToGuestConfigurationNavigationPtrOutputWithContext(context.Background())
}

func (i *guestConfigurationNavigationPtrType) ToGuestConfigurationNavigationPtrOutputWithContext(ctx context.Context) GuestConfigurationNavigationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuestConfigurationNavigationPtrOutput)
}

// Guest configuration is an artifact that encapsulates DSC configuration and its dependencies. The artifact is a zip file containing DSC configuration (as MOF) and dependent resources and other dependencies like modules.
type GuestConfigurationNavigationResponse struct {
	// The configuration parameters for the guest configuration.
	ConfigurationParameter []ConfigurationParameterResponse `pulumi:"configurationParameter"`
	// The configuration setting for the guest configuration.
	ConfigurationSetting *ConfigurationSettingResponse `pulumi:"configurationSetting"`
	// Combined hash of the guest configuration package and configuration parameters.
	ContentHash string `pulumi:"contentHash"`
	// Uri of the storage where guest configuration package is uploaded.
	ContentUri string `pulumi:"contentUri"`
	// Kind of the guest configuration. For example:DSC
	Kind *string `pulumi:"kind"`
	// Name of the guest configuration.
	Name *string `pulumi:"name"`
	// Version of the guest configuration.
	Version *string `pulumi:"version"`
}

// Guest configuration is an artifact that encapsulates DSC configuration and its dependencies. The artifact is a zip file containing DSC configuration (as MOF) and dependent resources and other dependencies like modules.
type GuestConfigurationNavigationResponseOutput struct{ *pulumi.OutputState }

func (GuestConfigurationNavigationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GuestConfigurationNavigationResponse)(nil)).Elem()
}

func (o GuestConfigurationNavigationResponseOutput) ToGuestConfigurationNavigationResponseOutput() GuestConfigurationNavigationResponseOutput {
	return o
}

func (o GuestConfigurationNavigationResponseOutput) ToGuestConfigurationNavigationResponseOutputWithContext(ctx context.Context) GuestConfigurationNavigationResponseOutput {
	return o
}

func (o GuestConfigurationNavigationResponseOutput) ToGuestConfigurationNavigationResponsePtrOutput() GuestConfigurationNavigationResponsePtrOutput {
	return o.ToGuestConfigurationNavigationResponsePtrOutputWithContext(context.Background())
}

func (o GuestConfigurationNavigationResponseOutput) ToGuestConfigurationNavigationResponsePtrOutputWithContext(ctx context.Context) GuestConfigurationNavigationResponsePtrOutput {
	return o.ApplyT(func(v GuestConfigurationNavigationResponse) *GuestConfigurationNavigationResponse {
		return &v
	}).(GuestConfigurationNavigationResponsePtrOutput)
}

// The configuration parameters for the guest configuration.
func (o GuestConfigurationNavigationResponseOutput) ConfigurationParameter() ConfigurationParameterResponseArrayOutput {
	return o.ApplyT(func(v GuestConfigurationNavigationResponse) []ConfigurationParameterResponse {
		return v.ConfigurationParameter
	}).(ConfigurationParameterResponseArrayOutput)
}

// The configuration setting for the guest configuration.
func (o GuestConfigurationNavigationResponseOutput) ConfigurationSetting() ConfigurationSettingResponsePtrOutput {
	return o.ApplyT(func(v GuestConfigurationNavigationResponse) *ConfigurationSettingResponse {
		return v.ConfigurationSetting
	}).(ConfigurationSettingResponsePtrOutput)
}

// Combined hash of the guest configuration package and configuration parameters.
func (o GuestConfigurationNavigationResponseOutput) ContentHash() pulumi.StringOutput {
	return o.ApplyT(func(v GuestConfigurationNavigationResponse) string { return v.ContentHash }).(pulumi.StringOutput)
}

// Uri of the storage where guest configuration package is uploaded.
func (o GuestConfigurationNavigationResponseOutput) ContentUri() pulumi.StringOutput {
	return o.ApplyT(func(v GuestConfigurationNavigationResponse) string { return v.ContentUri }).(pulumi.StringOutput)
}

// Kind of the guest configuration. For example:DSC
func (o GuestConfigurationNavigationResponseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GuestConfigurationNavigationResponse) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the guest configuration.
func (o GuestConfigurationNavigationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GuestConfigurationNavigationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Version of the guest configuration.
func (o GuestConfigurationNavigationResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GuestConfigurationNavigationResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type GuestConfigurationNavigationResponsePtrOutput struct{ *pulumi.OutputState }

func (GuestConfigurationNavigationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GuestConfigurationNavigationResponse)(nil)).Elem()
}

func (o GuestConfigurationNavigationResponsePtrOutput) ToGuestConfigurationNavigationResponsePtrOutput() GuestConfigurationNavigationResponsePtrOutput {
	return o
}

func (o GuestConfigurationNavigationResponsePtrOutput) ToGuestConfigurationNavigationResponsePtrOutputWithContext(ctx context.Context) GuestConfigurationNavigationResponsePtrOutput {
	return o
}

func (o GuestConfigurationNavigationResponsePtrOutput) Elem() GuestConfigurationNavigationResponseOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigationResponse) GuestConfigurationNavigationResponse { return *v }).(GuestConfigurationNavigationResponseOutput)
}

// The configuration parameters for the guest configuration.
func (o GuestConfigurationNavigationResponsePtrOutput) ConfigurationParameter() ConfigurationParameterResponseArrayOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigationResponse) []ConfigurationParameterResponse {
		if v == nil {
			return nil
		}
		return v.ConfigurationParameter
	}).(ConfigurationParameterResponseArrayOutput)
}

// The configuration setting for the guest configuration.
func (o GuestConfigurationNavigationResponsePtrOutput) ConfigurationSetting() ConfigurationSettingResponsePtrOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigationResponse) *ConfigurationSettingResponse {
		if v == nil {
			return nil
		}
		return v.ConfigurationSetting
	}).(ConfigurationSettingResponsePtrOutput)
}

// Combined hash of the guest configuration package and configuration parameters.
func (o GuestConfigurationNavigationResponsePtrOutput) ContentHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ContentHash
	}).(pulumi.StringPtrOutput)
}

// Uri of the storage where guest configuration package is uploaded.
func (o GuestConfigurationNavigationResponsePtrOutput) ContentUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ContentUri
	}).(pulumi.StringPtrOutput)
}

// Kind of the guest configuration. For example:DSC
func (o GuestConfigurationNavigationResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the guest configuration.
func (o GuestConfigurationNavigationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Version of the guest configuration.
func (o GuestConfigurationNavigationResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GuestConfigurationNavigationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Specifies the hardware settings for the virtual machine.
type HardwareProfile struct {
	// Specifies the size of the virtual machine. For more information about virtual machine sizes, see [Sizes for virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-sizes?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json). <br><br> The available VM sizes depend on region and availability set. For a list of available sizes use these APIs:  <br><br> [List all available virtual machine sizes in an availability set](https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes) <br><br> [List all available virtual machine sizes in a region](https://docs.microsoft.com/rest/api/compute/virtualmachinesizes/list) <br><br> [List all available virtual machine sizes for resizing](https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes)
	VmSize *string `pulumi:"vmSize"`
}

// HardwareProfileInput is an input type that accepts HardwareProfileArgs and HardwareProfileOutput values.
// You can construct a concrete instance of `HardwareProfileInput` via:
//
//          HardwareProfileArgs{...}
type HardwareProfileInput interface {
	pulumi.Input

	ToHardwareProfileOutput() HardwareProfileOutput
	ToHardwareProfileOutputWithContext(context.Context) HardwareProfileOutput
}

// Specifies the hardware settings for the virtual machine.
type HardwareProfileArgs struct {
	// Specifies the size of the virtual machine. For more information about virtual machine sizes, see [Sizes for virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-sizes?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json). <br><br> The available VM sizes depend on region and availability set. For a list of available sizes use these APIs:  <br><br> [List all available virtual machine sizes in an availability set](https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes) <br><br> [List all available virtual machine sizes in a region](https://docs.microsoft.com/rest/api/compute/virtualmachinesizes/list) <br><br> [List all available virtual machine sizes for resizing](https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes)
	VmSize pulumi.StringPtrInput `pulumi:"vmSize"`
}

func (HardwareProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HardwareProfile)(nil)).Elem()
}

func (i HardwareProfileArgs) ToHardwareProfileOutput() HardwareProfileOutput {
	return i.ToHardwareProfileOutputWithContext(context.Background())
}

func (i HardwareProfileArgs) ToHardwareProfileOutputWithContext(ctx context.Context) HardwareProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardwareProfileOutput)
}

func (i HardwareProfileArgs) ToHardwareProfilePtrOutput() HardwareProfilePtrOutput {
	return i.ToHardwareProfilePtrOutputWithContext(context.Background())
}

func (i HardwareProfileArgs) ToHardwareProfilePtrOutputWithContext(ctx context.Context) HardwareProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardwareProfileOutput).ToHardwareProfilePtrOutputWithContext(ctx)
}

// HardwareProfilePtrInput is an input type that accepts HardwareProfileArgs, HardwareProfilePtr and HardwareProfilePtrOutput values.
// You can construct a concrete instance of `HardwareProfilePtrInput` via:
//
//          HardwareProfileArgs{...}
//
//  or:
//
//          nil
type HardwareProfilePtrInput interface {
	pulumi.Input

	ToHardwareProfilePtrOutput() HardwareProfilePtrOutput
	ToHardwareProfilePtrOutputWithContext(context.Context) HardwareProfilePtrOutput
}

type hardwareProfilePtrType HardwareProfileArgs

func HardwareProfilePtr(v *HardwareProfileArgs) HardwareProfilePtrInput {
	return (*hardwareProfilePtrType)(v)
}

func (*hardwareProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HardwareProfile)(nil)).Elem()
}

func (i *hardwareProfilePtrType) ToHardwareProfilePtrOutput() HardwareProfilePtrOutput {
	return i.ToHardwareProfilePtrOutputWithContext(context.Background())
}

func (i *hardwareProfilePtrType) ToHardwareProfilePtrOutputWithContext(ctx context.Context) HardwareProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardwareProfilePtrOutput)
}

// Specifies the hardware settings for the virtual machine.
type HardwareProfileResponse struct {
	// Specifies the size of the virtual machine. For more information about virtual machine sizes, see [Sizes for virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-sizes?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json). <br><br> The available VM sizes depend on region and availability set. For a list of available sizes use these APIs:  <br><br> [List all available virtual machine sizes in an availability set](https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes) <br><br> [List all available virtual machine sizes in a region](https://docs.microsoft.com/rest/api/compute/virtualmachinesizes/list) <br><br> [List all available virtual machine sizes for resizing](https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes)
	VmSize *string `pulumi:"vmSize"`
}

// Specifies the hardware settings for the virtual machine.
type HardwareProfileResponseOutput struct{ *pulumi.OutputState }

func (HardwareProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HardwareProfileResponse)(nil)).Elem()
}

func (o HardwareProfileResponseOutput) ToHardwareProfileResponseOutput() HardwareProfileResponseOutput {
	return o
}

func (o HardwareProfileResponseOutput) ToHardwareProfileResponseOutputWithContext(ctx context.Context) HardwareProfileResponseOutput {
	return o
}

func (o HardwareProfileResponseOutput) ToHardwareProfileResponsePtrOutput() HardwareProfileResponsePtrOutput {
	return o.ToHardwareProfileResponsePtrOutputWithContext(context.Background())
}

func (o HardwareProfileResponseOutput) ToHardwareProfileResponsePtrOutputWithContext(ctx context.Context) HardwareProfileResponsePtrOutput {
	return o.ApplyT(func(v HardwareProfileResponse) *HardwareProfileResponse {
		return &v
	}).(HardwareProfileResponsePtrOutput)
}

// Specifies the size of the virtual machine. For more information about virtual machine sizes, see [Sizes for virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-sizes?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json). <br><br> The available VM sizes depend on region and availability set. For a list of available sizes use these APIs:  <br><br> [List all available virtual machine sizes in an availability set](https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes) <br><br> [List all available virtual machine sizes in a region](https://docs.microsoft.com/rest/api/compute/virtualmachinesizes/list) <br><br> [List all available virtual machine sizes for resizing](https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes)
func (o HardwareProfileResponseOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HardwareProfileResponse) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type HardwareProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (HardwareProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HardwareProfileResponse)(nil)).Elem()
}

func (o HardwareProfileResponsePtrOutput) ToHardwareProfileResponsePtrOutput() HardwareProfileResponsePtrOutput {
	return o
}

func (o HardwareProfileResponsePtrOutput) ToHardwareProfileResponsePtrOutputWithContext(ctx context.Context) HardwareProfileResponsePtrOutput {
	return o
}

func (o HardwareProfileResponsePtrOutput) Elem() HardwareProfileResponseOutput {
	return o.ApplyT(func(v *HardwareProfileResponse) HardwareProfileResponse { return *v }).(HardwareProfileResponseOutput)
}

// Specifies the size of the virtual machine. For more information about virtual machine sizes, see [Sizes for virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-sizes?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json). <br><br> The available VM sizes depend on region and availability set. For a list of available sizes use these APIs:  <br><br> [List all available virtual machine sizes in an availability set](https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes) <br><br> [List all available virtual machine sizes in a region](https://docs.microsoft.com/rest/api/compute/virtualmachinesizes/list) <br><br> [List all available virtual machine sizes for resizing](https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes)
func (o HardwareProfileResponsePtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HardwareProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.VmSize
	}).(pulumi.StringPtrOutput)
}

// Describes a data disk.
type ImageDataDisk struct {
	// The Virtual Hard Disk.
	BlobUri *string `pulumi:"blobUri"`
	// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
	Caching *string `pulumi:"caching"`
	// Specifies the customer managed disk encryption set resource id for the managed image disk.
	DiskEncryptionSet *DiskEncryptionSetParameters `pulumi:"diskEncryptionSet"`
	// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
	Lun int `pulumi:"lun"`
	// The managedDisk.
	ManagedDisk *SubResource `pulumi:"managedDisk"`
	// The snapshot.
	Snapshot *SubResource `pulumi:"snapshot"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// ImageDataDiskInput is an input type that accepts ImageDataDiskArgs and ImageDataDiskOutput values.
// You can construct a concrete instance of `ImageDataDiskInput` via:
//
//          ImageDataDiskArgs{...}
type ImageDataDiskInput interface {
	pulumi.Input

	ToImageDataDiskOutput() ImageDataDiskOutput
	ToImageDataDiskOutputWithContext(context.Context) ImageDataDiskOutput
}

// Describes a data disk.
type ImageDataDiskArgs struct {
	// The Virtual Hard Disk.
	BlobUri pulumi.StringPtrInput `pulumi:"blobUri"`
	// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
	Caching pulumi.StringPtrInput `pulumi:"caching"`
	// Specifies the customer managed disk encryption set resource id for the managed image disk.
	DiskEncryptionSet DiskEncryptionSetParametersPtrInput `pulumi:"diskEncryptionSet"`
	// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
	DiskSizeGB pulumi.IntPtrInput `pulumi:"diskSizeGB"`
	// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
	Lun pulumi.IntInput `pulumi:"lun"`
	// The managedDisk.
	ManagedDisk SubResourcePtrInput `pulumi:"managedDisk"`
	// The snapshot.
	Snapshot SubResourcePtrInput `pulumi:"snapshot"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType pulumi.StringPtrInput `pulumi:"storageAccountType"`
}

func (ImageDataDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDataDisk)(nil)).Elem()
}

func (i ImageDataDiskArgs) ToImageDataDiskOutput() ImageDataDiskOutput {
	return i.ToImageDataDiskOutputWithContext(context.Background())
}

func (i ImageDataDiskArgs) ToImageDataDiskOutputWithContext(ctx context.Context) ImageDataDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDataDiskOutput)
}

// ImageDataDiskArrayInput is an input type that accepts ImageDataDiskArray and ImageDataDiskArrayOutput values.
// You can construct a concrete instance of `ImageDataDiskArrayInput` via:
//
//          ImageDataDiskArray{ ImageDataDiskArgs{...} }
type ImageDataDiskArrayInput interface {
	pulumi.Input

	ToImageDataDiskArrayOutput() ImageDataDiskArrayOutput
	ToImageDataDiskArrayOutputWithContext(context.Context) ImageDataDiskArrayOutput
}

type ImageDataDiskArray []ImageDataDiskInput

func (ImageDataDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageDataDisk)(nil)).Elem()
}

func (i ImageDataDiskArray) ToImageDataDiskArrayOutput() ImageDataDiskArrayOutput {
	return i.ToImageDataDiskArrayOutputWithContext(context.Background())
}

func (i ImageDataDiskArray) ToImageDataDiskArrayOutputWithContext(ctx context.Context) ImageDataDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDataDiskArrayOutput)
}

// Describes a data disk.
type ImageDataDiskResponse struct {
	// The Virtual Hard Disk.
	BlobUri *string `pulumi:"blobUri"`
	// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
	Caching *string `pulumi:"caching"`
	// Specifies the customer managed disk encryption set resource id for the managed image disk.
	DiskEncryptionSet *DiskEncryptionSetParametersResponse `pulumi:"diskEncryptionSet"`
	// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
	Lun int `pulumi:"lun"`
	// The managedDisk.
	ManagedDisk *SubResourceResponse `pulumi:"managedDisk"`
	// The snapshot.
	Snapshot *SubResourceResponse `pulumi:"snapshot"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// Describes a data disk.
type ImageDataDiskResponseOutput struct{ *pulumi.OutputState }

func (ImageDataDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDataDiskResponse)(nil)).Elem()
}

func (o ImageDataDiskResponseOutput) ToImageDataDiskResponseOutput() ImageDataDiskResponseOutput {
	return o
}

func (o ImageDataDiskResponseOutput) ToImageDataDiskResponseOutputWithContext(ctx context.Context) ImageDataDiskResponseOutput {
	return o
}

// The Virtual Hard Disk.
func (o ImageDataDiskResponseOutput) BlobUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDataDiskResponse) *string { return v.BlobUri }).(pulumi.StringPtrOutput)
}

// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
func (o ImageDataDiskResponseOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDataDiskResponse) *string { return v.Caching }).(pulumi.StringPtrOutput)
}

// Specifies the customer managed disk encryption set resource id for the managed image disk.
func (o ImageDataDiskResponseOutput) DiskEncryptionSet() DiskEncryptionSetParametersResponsePtrOutput {
	return o.ApplyT(func(v ImageDataDiskResponse) *DiskEncryptionSetParametersResponse { return v.DiskEncryptionSet }).(DiskEncryptionSetParametersResponsePtrOutput)
}

// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
func (o ImageDataDiskResponseOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageDataDiskResponse) *int { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
func (o ImageDataDiskResponseOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v ImageDataDiskResponse) int { return v.Lun }).(pulumi.IntOutput)
}

// The managedDisk.
func (o ImageDataDiskResponseOutput) ManagedDisk() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v ImageDataDiskResponse) *SubResourceResponse { return v.ManagedDisk }).(SubResourceResponsePtrOutput)
}

// The snapshot.
func (o ImageDataDiskResponseOutput) Snapshot() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v ImageDataDiskResponse) *SubResourceResponse { return v.Snapshot }).(SubResourceResponsePtrOutput)
}

// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
func (o ImageDataDiskResponseOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDataDiskResponse) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type ImageDataDiskResponseArrayOutput struct{ *pulumi.OutputState }

func (ImageDataDiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageDataDiskResponse)(nil)).Elem()
}

func (o ImageDataDiskResponseArrayOutput) ToImageDataDiskResponseArrayOutput() ImageDataDiskResponseArrayOutput {
	return o
}

func (o ImageDataDiskResponseArrayOutput) ToImageDataDiskResponseArrayOutputWithContext(ctx context.Context) ImageDataDiskResponseArrayOutput {
	return o
}

func (o ImageDataDiskResponseArrayOutput) Index(i pulumi.IntInput) ImageDataDiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageDataDiskResponse {
		return vs[0].([]ImageDataDiskResponse)[vs[1].(int)]
	}).(ImageDataDiskResponseOutput)
}

// The source image used for creating the disk.
type ImageDiskReference struct {
	// A relative uri containing either a Platform Image Repository or user image reference.
	Id string `pulumi:"id"`
	// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
	Lun *int `pulumi:"lun"`
}

// ImageDiskReferenceInput is an input type that accepts ImageDiskReferenceArgs and ImageDiskReferenceOutput values.
// You can construct a concrete instance of `ImageDiskReferenceInput` via:
//
//          ImageDiskReferenceArgs{...}
type ImageDiskReferenceInput interface {
	pulumi.Input

	ToImageDiskReferenceOutput() ImageDiskReferenceOutput
	ToImageDiskReferenceOutputWithContext(context.Context) ImageDiskReferenceOutput
}

// The source image used for creating the disk.
type ImageDiskReferenceArgs struct {
	// A relative uri containing either a Platform Image Repository or user image reference.
	Id pulumi.StringInput `pulumi:"id"`
	// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
	Lun pulumi.IntPtrInput `pulumi:"lun"`
}

func (ImageDiskReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDiskReference)(nil)).Elem()
}

func (i ImageDiskReferenceArgs) ToImageDiskReferenceOutput() ImageDiskReferenceOutput {
	return i.ToImageDiskReferenceOutputWithContext(context.Background())
}

func (i ImageDiskReferenceArgs) ToImageDiskReferenceOutputWithContext(ctx context.Context) ImageDiskReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDiskReferenceOutput)
}

func (i ImageDiskReferenceArgs) ToImageDiskReferencePtrOutput() ImageDiskReferencePtrOutput {
	return i.ToImageDiskReferencePtrOutputWithContext(context.Background())
}

func (i ImageDiskReferenceArgs) ToImageDiskReferencePtrOutputWithContext(ctx context.Context) ImageDiskReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDiskReferenceOutput).ToImageDiskReferencePtrOutputWithContext(ctx)
}

// ImageDiskReferencePtrInput is an input type that accepts ImageDiskReferenceArgs, ImageDiskReferencePtr and ImageDiskReferencePtrOutput values.
// You can construct a concrete instance of `ImageDiskReferencePtrInput` via:
//
//          ImageDiskReferenceArgs{...}
//
//  or:
//
//          nil
type ImageDiskReferencePtrInput interface {
	pulumi.Input

	ToImageDiskReferencePtrOutput() ImageDiskReferencePtrOutput
	ToImageDiskReferencePtrOutputWithContext(context.Context) ImageDiskReferencePtrOutput
}

type imageDiskReferencePtrType ImageDiskReferenceArgs

func ImageDiskReferencePtr(v *ImageDiskReferenceArgs) ImageDiskReferencePtrInput {
	return (*imageDiskReferencePtrType)(v)
}

func (*imageDiskReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageDiskReference)(nil)).Elem()
}

func (i *imageDiskReferencePtrType) ToImageDiskReferencePtrOutput() ImageDiskReferencePtrOutput {
	return i.ToImageDiskReferencePtrOutputWithContext(context.Background())
}

func (i *imageDiskReferencePtrType) ToImageDiskReferencePtrOutputWithContext(ctx context.Context) ImageDiskReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDiskReferencePtrOutput)
}

// The source image used for creating the disk.
type ImageDiskReferenceResponse struct {
	// A relative uri containing either a Platform Image Repository or user image reference.
	Id string `pulumi:"id"`
	// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
	Lun *int `pulumi:"lun"`
}

// The source image used for creating the disk.
type ImageDiskReferenceResponseOutput struct{ *pulumi.OutputState }

func (ImageDiskReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDiskReferenceResponse)(nil)).Elem()
}

func (o ImageDiskReferenceResponseOutput) ToImageDiskReferenceResponseOutput() ImageDiskReferenceResponseOutput {
	return o
}

func (o ImageDiskReferenceResponseOutput) ToImageDiskReferenceResponseOutputWithContext(ctx context.Context) ImageDiskReferenceResponseOutput {
	return o
}

func (o ImageDiskReferenceResponseOutput) ToImageDiskReferenceResponsePtrOutput() ImageDiskReferenceResponsePtrOutput {
	return o.ToImageDiskReferenceResponsePtrOutputWithContext(context.Background())
}

func (o ImageDiskReferenceResponseOutput) ToImageDiskReferenceResponsePtrOutputWithContext(ctx context.Context) ImageDiskReferenceResponsePtrOutput {
	return o.ApplyT(func(v ImageDiskReferenceResponse) *ImageDiskReferenceResponse {
		return &v
	}).(ImageDiskReferenceResponsePtrOutput)
}

// A relative uri containing either a Platform Image Repository or user image reference.
func (o ImageDiskReferenceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ImageDiskReferenceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
func (o ImageDiskReferenceResponseOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageDiskReferenceResponse) *int { return v.Lun }).(pulumi.IntPtrOutput)
}

type ImageDiskReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageDiskReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageDiskReferenceResponse)(nil)).Elem()
}

func (o ImageDiskReferenceResponsePtrOutput) ToImageDiskReferenceResponsePtrOutput() ImageDiskReferenceResponsePtrOutput {
	return o
}

func (o ImageDiskReferenceResponsePtrOutput) ToImageDiskReferenceResponsePtrOutputWithContext(ctx context.Context) ImageDiskReferenceResponsePtrOutput {
	return o
}

func (o ImageDiskReferenceResponsePtrOutput) Elem() ImageDiskReferenceResponseOutput {
	return o.ApplyT(func(v *ImageDiskReferenceResponse) ImageDiskReferenceResponse { return *v }).(ImageDiskReferenceResponseOutput)
}

// A relative uri containing either a Platform Image Repository or user image reference.
func (o ImageDiskReferenceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageDiskReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
func (o ImageDiskReferenceResponsePtrOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageDiskReferenceResponse) *int {
		if v == nil {
			return nil
		}
		return v.Lun
	}).(pulumi.IntPtrOutput)
}

// Describes an Operating System disk.
type ImageOSDisk struct {
	// The Virtual Hard Disk.
	BlobUri *string `pulumi:"blobUri"`
	// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
	Caching *string `pulumi:"caching"`
	// Specifies the customer managed disk encryption set resource id for the managed image disk.
	DiskEncryptionSet *DiskEncryptionSetParameters `pulumi:"diskEncryptionSet"`
	// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// The managedDisk.
	ManagedDisk *SubResource `pulumi:"managedDisk"`
	// The OS State.
	OsState string `pulumi:"osState"`
	// This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
	OsType string `pulumi:"osType"`
	// The snapshot.
	Snapshot *SubResource `pulumi:"snapshot"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// ImageOSDiskInput is an input type that accepts ImageOSDiskArgs and ImageOSDiskOutput values.
// You can construct a concrete instance of `ImageOSDiskInput` via:
//
//          ImageOSDiskArgs{...}
type ImageOSDiskInput interface {
	pulumi.Input

	ToImageOSDiskOutput() ImageOSDiskOutput
	ToImageOSDiskOutputWithContext(context.Context) ImageOSDiskOutput
}

// Describes an Operating System disk.
type ImageOSDiskArgs struct {
	// The Virtual Hard Disk.
	BlobUri pulumi.StringPtrInput `pulumi:"blobUri"`
	// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
	Caching pulumi.StringPtrInput `pulumi:"caching"`
	// Specifies the customer managed disk encryption set resource id for the managed image disk.
	DiskEncryptionSet DiskEncryptionSetParametersPtrInput `pulumi:"diskEncryptionSet"`
	// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
	DiskSizeGB pulumi.IntPtrInput `pulumi:"diskSizeGB"`
	// The managedDisk.
	ManagedDisk SubResourcePtrInput `pulumi:"managedDisk"`
	// The OS State.
	OsState pulumi.StringInput `pulumi:"osState"`
	// This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
	OsType pulumi.StringInput `pulumi:"osType"`
	// The snapshot.
	Snapshot SubResourcePtrInput `pulumi:"snapshot"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType pulumi.StringPtrInput `pulumi:"storageAccountType"`
}

func (ImageOSDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageOSDisk)(nil)).Elem()
}

func (i ImageOSDiskArgs) ToImageOSDiskOutput() ImageOSDiskOutput {
	return i.ToImageOSDiskOutputWithContext(context.Background())
}

func (i ImageOSDiskArgs) ToImageOSDiskOutputWithContext(ctx context.Context) ImageOSDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOSDiskOutput)
}

func (i ImageOSDiskArgs) ToImageOSDiskPtrOutput() ImageOSDiskPtrOutput {
	return i.ToImageOSDiskPtrOutputWithContext(context.Background())
}

func (i ImageOSDiskArgs) ToImageOSDiskPtrOutputWithContext(ctx context.Context) ImageOSDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOSDiskOutput).ToImageOSDiskPtrOutputWithContext(ctx)
}

// ImageOSDiskPtrInput is an input type that accepts ImageOSDiskArgs, ImageOSDiskPtr and ImageOSDiskPtrOutput values.
// You can construct a concrete instance of `ImageOSDiskPtrInput` via:
//
//          ImageOSDiskArgs{...}
//
//  or:
//
//          nil
type ImageOSDiskPtrInput interface {
	pulumi.Input

	ToImageOSDiskPtrOutput() ImageOSDiskPtrOutput
	ToImageOSDiskPtrOutputWithContext(context.Context) ImageOSDiskPtrOutput
}

type imageOSDiskPtrType ImageOSDiskArgs

func ImageOSDiskPtr(v *ImageOSDiskArgs) ImageOSDiskPtrInput {
	return (*imageOSDiskPtrType)(v)
}

func (*imageOSDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageOSDisk)(nil)).Elem()
}

func (i *imageOSDiskPtrType) ToImageOSDiskPtrOutput() ImageOSDiskPtrOutput {
	return i.ToImageOSDiskPtrOutputWithContext(context.Background())
}

func (i *imageOSDiskPtrType) ToImageOSDiskPtrOutputWithContext(ctx context.Context) ImageOSDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOSDiskPtrOutput)
}

// Describes an Operating System disk.
type ImageOSDiskResponse struct {
	// The Virtual Hard Disk.
	BlobUri *string `pulumi:"blobUri"`
	// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
	Caching *string `pulumi:"caching"`
	// Specifies the customer managed disk encryption set resource id for the managed image disk.
	DiskEncryptionSet *DiskEncryptionSetParametersResponse `pulumi:"diskEncryptionSet"`
	// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// The managedDisk.
	ManagedDisk *SubResourceResponse `pulumi:"managedDisk"`
	// The OS State.
	OsState string `pulumi:"osState"`
	// This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
	OsType string `pulumi:"osType"`
	// The snapshot.
	Snapshot *SubResourceResponse `pulumi:"snapshot"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// Describes an Operating System disk.
type ImageOSDiskResponseOutput struct{ *pulumi.OutputState }

func (ImageOSDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageOSDiskResponse)(nil)).Elem()
}

func (o ImageOSDiskResponseOutput) ToImageOSDiskResponseOutput() ImageOSDiskResponseOutput {
	return o
}

func (o ImageOSDiskResponseOutput) ToImageOSDiskResponseOutputWithContext(ctx context.Context) ImageOSDiskResponseOutput {
	return o
}

func (o ImageOSDiskResponseOutput) ToImageOSDiskResponsePtrOutput() ImageOSDiskResponsePtrOutput {
	return o.ToImageOSDiskResponsePtrOutputWithContext(context.Background())
}

func (o ImageOSDiskResponseOutput) ToImageOSDiskResponsePtrOutputWithContext(ctx context.Context) ImageOSDiskResponsePtrOutput {
	return o.ApplyT(func(v ImageOSDiskResponse) *ImageOSDiskResponse {
		return &v
	}).(ImageOSDiskResponsePtrOutput)
}

// The Virtual Hard Disk.
func (o ImageOSDiskResponseOutput) BlobUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageOSDiskResponse) *string { return v.BlobUri }).(pulumi.StringPtrOutput)
}

// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
func (o ImageOSDiskResponseOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageOSDiskResponse) *string { return v.Caching }).(pulumi.StringPtrOutput)
}

// Specifies the customer managed disk encryption set resource id for the managed image disk.
func (o ImageOSDiskResponseOutput) DiskEncryptionSet() DiskEncryptionSetParametersResponsePtrOutput {
	return o.ApplyT(func(v ImageOSDiskResponse) *DiskEncryptionSetParametersResponse { return v.DiskEncryptionSet }).(DiskEncryptionSetParametersResponsePtrOutput)
}

// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
func (o ImageOSDiskResponseOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageOSDiskResponse) *int { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

// The managedDisk.
func (o ImageOSDiskResponseOutput) ManagedDisk() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v ImageOSDiskResponse) *SubResourceResponse { return v.ManagedDisk }).(SubResourceResponsePtrOutput)
}

// The OS State.
func (o ImageOSDiskResponseOutput) OsState() pulumi.StringOutput {
	return o.ApplyT(func(v ImageOSDiskResponse) string { return v.OsState }).(pulumi.StringOutput)
}

// This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
func (o ImageOSDiskResponseOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageOSDiskResponse) string { return v.OsType }).(pulumi.StringOutput)
}

// The snapshot.
func (o ImageOSDiskResponseOutput) Snapshot() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v ImageOSDiskResponse) *SubResourceResponse { return v.Snapshot }).(SubResourceResponsePtrOutput)
}

// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
func (o ImageOSDiskResponseOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageOSDiskResponse) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type ImageOSDiskResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageOSDiskResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageOSDiskResponse)(nil)).Elem()
}

func (o ImageOSDiskResponsePtrOutput) ToImageOSDiskResponsePtrOutput() ImageOSDiskResponsePtrOutput {
	return o
}

func (o ImageOSDiskResponsePtrOutput) ToImageOSDiskResponsePtrOutputWithContext(ctx context.Context) ImageOSDiskResponsePtrOutput {
	return o
}

func (o ImageOSDiskResponsePtrOutput) Elem() ImageOSDiskResponseOutput {
	return o.ApplyT(func(v *ImageOSDiskResponse) ImageOSDiskResponse { return *v }).(ImageOSDiskResponseOutput)
}

// The Virtual Hard Disk.
func (o ImageOSDiskResponsePtrOutput) BlobUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageOSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.BlobUri
	}).(pulumi.StringPtrOutput)
}

// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
func (o ImageOSDiskResponsePtrOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageOSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.Caching
	}).(pulumi.StringPtrOutput)
}

// Specifies the customer managed disk encryption set resource id for the managed image disk.
func (o ImageOSDiskResponsePtrOutput) DiskEncryptionSet() DiskEncryptionSetParametersResponsePtrOutput {
	return o.ApplyT(func(v *ImageOSDiskResponse) *DiskEncryptionSetParametersResponse {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionSet
	}).(DiskEncryptionSetParametersResponsePtrOutput)
}

// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
func (o ImageOSDiskResponsePtrOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageOSDiskResponse) *int {
		if v == nil {
			return nil
		}
		return v.DiskSizeGB
	}).(pulumi.IntPtrOutput)
}

// The managedDisk.
func (o ImageOSDiskResponsePtrOutput) ManagedDisk() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *ImageOSDiskResponse) *SubResourceResponse {
		if v == nil {
			return nil
		}
		return v.ManagedDisk
	}).(SubResourceResponsePtrOutput)
}

// The OS State.
func (o ImageOSDiskResponsePtrOutput) OsState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageOSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return &v.OsState
	}).(pulumi.StringPtrOutput)
}

// This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
func (o ImageOSDiskResponsePtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageOSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return &v.OsType
	}).(pulumi.StringPtrOutput)
}

// The snapshot.
func (o ImageOSDiskResponsePtrOutput) Snapshot() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *ImageOSDiskResponse) *SubResourceResponse {
		if v == nil {
			return nil
		}
		return v.Snapshot
	}).(SubResourceResponsePtrOutput)
}

// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
func (o ImageOSDiskResponsePtrOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageOSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountType
	}).(pulumi.StringPtrOutput)
}

// Describes the gallery image definition purchase plan. This is used by marketplace images.
type ImagePurchasePlan struct {
	// The plan ID.
	Name *string `pulumi:"name"`
	// The product ID.
	Product *string `pulumi:"product"`
	// The publisher ID.
	Publisher *string `pulumi:"publisher"`
}

// ImagePurchasePlanInput is an input type that accepts ImagePurchasePlanArgs and ImagePurchasePlanOutput values.
// You can construct a concrete instance of `ImagePurchasePlanInput` via:
//
//          ImagePurchasePlanArgs{...}
type ImagePurchasePlanInput interface {
	pulumi.Input

	ToImagePurchasePlanOutput() ImagePurchasePlanOutput
	ToImagePurchasePlanOutputWithContext(context.Context) ImagePurchasePlanOutput
}

// Describes the gallery image definition purchase plan. This is used by marketplace images.
type ImagePurchasePlanArgs struct {
	// The plan ID.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The product ID.
	Product pulumi.StringPtrInput `pulumi:"product"`
	// The publisher ID.
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
}

func (ImagePurchasePlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePurchasePlan)(nil)).Elem()
}

func (i ImagePurchasePlanArgs) ToImagePurchasePlanOutput() ImagePurchasePlanOutput {
	return i.ToImagePurchasePlanOutputWithContext(context.Background())
}

func (i ImagePurchasePlanArgs) ToImagePurchasePlanOutputWithContext(ctx context.Context) ImagePurchasePlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePurchasePlanOutput)
}

func (i ImagePurchasePlanArgs) ToImagePurchasePlanPtrOutput() ImagePurchasePlanPtrOutput {
	return i.ToImagePurchasePlanPtrOutputWithContext(context.Background())
}

func (i ImagePurchasePlanArgs) ToImagePurchasePlanPtrOutputWithContext(ctx context.Context) ImagePurchasePlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePurchasePlanOutput).ToImagePurchasePlanPtrOutputWithContext(ctx)
}

// ImagePurchasePlanPtrInput is an input type that accepts ImagePurchasePlanArgs, ImagePurchasePlanPtr and ImagePurchasePlanPtrOutput values.
// You can construct a concrete instance of `ImagePurchasePlanPtrInput` via:
//
//          ImagePurchasePlanArgs{...}
//
//  or:
//
//          nil
type ImagePurchasePlanPtrInput interface {
	pulumi.Input

	ToImagePurchasePlanPtrOutput() ImagePurchasePlanPtrOutput
	ToImagePurchasePlanPtrOutputWithContext(context.Context) ImagePurchasePlanPtrOutput
}

type imagePurchasePlanPtrType ImagePurchasePlanArgs

func ImagePurchasePlanPtr(v *ImagePurchasePlanArgs) ImagePurchasePlanPtrInput {
	return (*imagePurchasePlanPtrType)(v)
}

func (*imagePurchasePlanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePurchasePlan)(nil)).Elem()
}

func (i *imagePurchasePlanPtrType) ToImagePurchasePlanPtrOutput() ImagePurchasePlanPtrOutput {
	return i.ToImagePurchasePlanPtrOutputWithContext(context.Background())
}

func (i *imagePurchasePlanPtrType) ToImagePurchasePlanPtrOutputWithContext(ctx context.Context) ImagePurchasePlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePurchasePlanPtrOutput)
}

// Describes the gallery image definition purchase plan. This is used by marketplace images.
type ImagePurchasePlanResponse struct {
	// The plan ID.
	Name *string `pulumi:"name"`
	// The product ID.
	Product *string `pulumi:"product"`
	// The publisher ID.
	Publisher *string `pulumi:"publisher"`
}

// Describes the gallery image definition purchase plan. This is used by marketplace images.
type ImagePurchasePlanResponseOutput struct{ *pulumi.OutputState }

func (ImagePurchasePlanResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePurchasePlanResponse)(nil)).Elem()
}

func (o ImagePurchasePlanResponseOutput) ToImagePurchasePlanResponseOutput() ImagePurchasePlanResponseOutput {
	return o
}

func (o ImagePurchasePlanResponseOutput) ToImagePurchasePlanResponseOutputWithContext(ctx context.Context) ImagePurchasePlanResponseOutput {
	return o
}

func (o ImagePurchasePlanResponseOutput) ToImagePurchasePlanResponsePtrOutput() ImagePurchasePlanResponsePtrOutput {
	return o.ToImagePurchasePlanResponsePtrOutputWithContext(context.Background())
}

func (o ImagePurchasePlanResponseOutput) ToImagePurchasePlanResponsePtrOutputWithContext(ctx context.Context) ImagePurchasePlanResponsePtrOutput {
	return o.ApplyT(func(v ImagePurchasePlanResponse) *ImagePurchasePlanResponse {
		return &v
	}).(ImagePurchasePlanResponsePtrOutput)
}

// The plan ID.
func (o ImagePurchasePlanResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePurchasePlanResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The product ID.
func (o ImagePurchasePlanResponseOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePurchasePlanResponse) *string { return v.Product }).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o ImagePurchasePlanResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePurchasePlanResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

type ImagePurchasePlanResponsePtrOutput struct{ *pulumi.OutputState }

func (ImagePurchasePlanResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePurchasePlanResponse)(nil)).Elem()
}

func (o ImagePurchasePlanResponsePtrOutput) ToImagePurchasePlanResponsePtrOutput() ImagePurchasePlanResponsePtrOutput {
	return o
}

func (o ImagePurchasePlanResponsePtrOutput) ToImagePurchasePlanResponsePtrOutputWithContext(ctx context.Context) ImagePurchasePlanResponsePtrOutput {
	return o
}

func (o ImagePurchasePlanResponsePtrOutput) Elem() ImagePurchasePlanResponseOutput {
	return o.ApplyT(func(v *ImagePurchasePlanResponse) ImagePurchasePlanResponse { return *v }).(ImagePurchasePlanResponseOutput)
}

// The plan ID.
func (o ImagePurchasePlanResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePurchasePlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The product ID.
func (o ImagePurchasePlanResponsePtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePurchasePlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Product
	}).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o ImagePurchasePlanResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePurchasePlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set.
type ImageReference struct {
	// Resource Id
	Id *string `pulumi:"id"`
	// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
	Offer *string `pulumi:"offer"`
	// The image publisher.
	Publisher *string `pulumi:"publisher"`
	// The image SKU.
	Sku *string `pulumi:"sku"`
	// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.
	Version *string `pulumi:"version"`
}

// ImageReferenceInput is an input type that accepts ImageReferenceArgs and ImageReferenceOutput values.
// You can construct a concrete instance of `ImageReferenceInput` via:
//
//          ImageReferenceArgs{...}
type ImageReferenceInput interface {
	pulumi.Input

	ToImageReferenceOutput() ImageReferenceOutput
	ToImageReferenceOutputWithContext(context.Context) ImageReferenceOutput
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set.
type ImageReferenceArgs struct {
	// Resource Id
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
	Offer pulumi.StringPtrInput `pulumi:"offer"`
	// The image publisher.
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
	// The image SKU.
	Sku pulumi.StringPtrInput `pulumi:"sku"`
	// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ImageReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReference)(nil)).Elem()
}

func (i ImageReferenceArgs) ToImageReferenceOutput() ImageReferenceOutput {
	return i.ToImageReferenceOutputWithContext(context.Background())
}

func (i ImageReferenceArgs) ToImageReferenceOutputWithContext(ctx context.Context) ImageReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceOutput)
}

func (i ImageReferenceArgs) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return i.ToImageReferencePtrOutputWithContext(context.Background())
}

func (i ImageReferenceArgs) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceOutput).ToImageReferencePtrOutputWithContext(ctx)
}

// ImageReferencePtrInput is an input type that accepts ImageReferenceArgs, ImageReferencePtr and ImageReferencePtrOutput values.
// You can construct a concrete instance of `ImageReferencePtrInput` via:
//
//          ImageReferenceArgs{...}
//
//  or:
//
//          nil
type ImageReferencePtrInput interface {
	pulumi.Input

	ToImageReferencePtrOutput() ImageReferencePtrOutput
	ToImageReferencePtrOutputWithContext(context.Context) ImageReferencePtrOutput
}

type imageReferencePtrType ImageReferenceArgs

func ImageReferencePtr(v *ImageReferenceArgs) ImageReferencePtrInput {
	return (*imageReferencePtrType)(v)
}

func (*imageReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReference)(nil)).Elem()
}

func (i *imageReferencePtrType) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return i.ToImageReferencePtrOutputWithContext(context.Background())
}

func (i *imageReferencePtrType) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferencePtrOutput)
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set.
type ImageReferenceResponse struct {
	// Specifies in decimal numbers, the version of platform image or marketplace image used to create the virtual machine. This readonly field differs from 'version', only if the value specified in 'version' field is 'latest'.
	ExactVersion string `pulumi:"exactVersion"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
	Offer *string `pulumi:"offer"`
	// The image publisher.
	Publisher *string `pulumi:"publisher"`
	// The image SKU.
	Sku *string `pulumi:"sku"`
	// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.
	Version *string `pulumi:"version"`
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set.
type ImageReferenceResponseOutput struct{ *pulumi.OutputState }

func (ImageReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReferenceResponse)(nil)).Elem()
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponseOutput() ImageReferenceResponseOutput {
	return o
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponseOutputWithContext(ctx context.Context) ImageReferenceResponseOutput {
	return o
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponsePtrOutput() ImageReferenceResponsePtrOutput {
	return o.ToImageReferenceResponsePtrOutputWithContext(context.Background())
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponsePtrOutputWithContext(ctx context.Context) ImageReferenceResponsePtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *ImageReferenceResponse {
		return &v
	}).(ImageReferenceResponsePtrOutput)
}

// Specifies in decimal numbers, the version of platform image or marketplace image used to create the virtual machine. This readonly field differs from 'version', only if the value specified in 'version' field is 'latest'.
func (o ImageReferenceResponseOutput) ExactVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ImageReferenceResponse) string { return v.ExactVersion }).(pulumi.StringOutput)
}

// Resource Id
func (o ImageReferenceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
func (o ImageReferenceResponseOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Offer }).(pulumi.StringPtrOutput)
}

// The image publisher.
func (o ImageReferenceResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// The image SKU.
func (o ImageReferenceResponseOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Sku }).(pulumi.StringPtrOutput)
}

// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.
func (o ImageReferenceResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ImageReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReferenceResponse)(nil)).Elem()
}

func (o ImageReferenceResponsePtrOutput) ToImageReferenceResponsePtrOutput() ImageReferenceResponsePtrOutput {
	return o
}

func (o ImageReferenceResponsePtrOutput) ToImageReferenceResponsePtrOutputWithContext(ctx context.Context) ImageReferenceResponsePtrOutput {
	return o
}

func (o ImageReferenceResponsePtrOutput) Elem() ImageReferenceResponseOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) ImageReferenceResponse { return *v }).(ImageReferenceResponseOutput)
}

// Specifies in decimal numbers, the version of platform image or marketplace image used to create the virtual machine. This readonly field differs from 'version', only if the value specified in 'version' field is 'latest'.
func (o ImageReferenceResponsePtrOutput) ExactVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ExactVersion
	}).(pulumi.StringPtrOutput)
}

// Resource Id
func (o ImageReferenceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
func (o ImageReferenceResponsePtrOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Offer
	}).(pulumi.StringPtrOutput)
}

// The image publisher.
func (o ImageReferenceResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

// The image SKU.
func (o ImageReferenceResponsePtrOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Sku
	}).(pulumi.StringPtrOutput)
}

// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.
func (o ImageReferenceResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Describes a storage profile.
type ImageStorageProfile struct {
	// Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	DataDisks []ImageDataDisk `pulumi:"dataDisks"`
	// Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	OsDisk *ImageOSDisk `pulumi:"osDisk"`
	// Specifies whether an image is zone resilient or not. Default is false. Zone resilient images can be created only in regions that provide Zone Redundant Storage (ZRS).
	ZoneResilient *bool `pulumi:"zoneResilient"`
}

// ImageStorageProfileInput is an input type that accepts ImageStorageProfileArgs and ImageStorageProfileOutput values.
// You can construct a concrete instance of `ImageStorageProfileInput` via:
//
//          ImageStorageProfileArgs{...}
type ImageStorageProfileInput interface {
	pulumi.Input

	ToImageStorageProfileOutput() ImageStorageProfileOutput
	ToImageStorageProfileOutputWithContext(context.Context) ImageStorageProfileOutput
}

// Describes a storage profile.
type ImageStorageProfileArgs struct {
	// Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	DataDisks ImageDataDiskArrayInput `pulumi:"dataDisks"`
	// Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	OsDisk ImageOSDiskPtrInput `pulumi:"osDisk"`
	// Specifies whether an image is zone resilient or not. Default is false. Zone resilient images can be created only in regions that provide Zone Redundant Storage (ZRS).
	ZoneResilient pulumi.BoolPtrInput `pulumi:"zoneResilient"`
}

func (ImageStorageProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageStorageProfile)(nil)).Elem()
}

func (i ImageStorageProfileArgs) ToImageStorageProfileOutput() ImageStorageProfileOutput {
	return i.ToImageStorageProfileOutputWithContext(context.Background())
}

func (i ImageStorageProfileArgs) ToImageStorageProfileOutputWithContext(ctx context.Context) ImageStorageProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageStorageProfileOutput)
}

func (i ImageStorageProfileArgs) ToImageStorageProfilePtrOutput() ImageStorageProfilePtrOutput {
	return i.ToImageStorageProfilePtrOutputWithContext(context.Background())
}

func (i ImageStorageProfileArgs) ToImageStorageProfilePtrOutputWithContext(ctx context.Context) ImageStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageStorageProfileOutput).ToImageStorageProfilePtrOutputWithContext(ctx)
}

// ImageStorageProfilePtrInput is an input type that accepts ImageStorageProfileArgs, ImageStorageProfilePtr and ImageStorageProfilePtrOutput values.
// You can construct a concrete instance of `ImageStorageProfilePtrInput` via:
//
//          ImageStorageProfileArgs{...}
//
//  or:
//
//          nil
type ImageStorageProfilePtrInput interface {
	pulumi.Input

	ToImageStorageProfilePtrOutput() ImageStorageProfilePtrOutput
	ToImageStorageProfilePtrOutputWithContext(context.Context) ImageStorageProfilePtrOutput
}

type imageStorageProfilePtrType ImageStorageProfileArgs

func ImageStorageProfilePtr(v *ImageStorageProfileArgs) ImageStorageProfilePtrInput {
	return (*imageStorageProfilePtrType)(v)
}

func (*imageStorageProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageStorageProfile)(nil)).Elem()
}

func (i *imageStorageProfilePtrType) ToImageStorageProfilePtrOutput() ImageStorageProfilePtrOutput {
	return i.ToImageStorageProfilePtrOutputWithContext(context.Background())
}

func (i *imageStorageProfilePtrType) ToImageStorageProfilePtrOutputWithContext(ctx context.Context) ImageStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageStorageProfilePtrOutput)
}

// Describes a storage profile.
type ImageStorageProfileResponse struct {
	// Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	DataDisks []ImageDataDiskResponse `pulumi:"dataDisks"`
	// Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	OsDisk *ImageOSDiskResponse `pulumi:"osDisk"`
	// Specifies whether an image is zone resilient or not. Default is false. Zone resilient images can be created only in regions that provide Zone Redundant Storage (ZRS).
	ZoneResilient *bool `pulumi:"zoneResilient"`
}

// Describes a storage profile.
type ImageStorageProfileResponseOutput struct{ *pulumi.OutputState }

func (ImageStorageProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageStorageProfileResponse)(nil)).Elem()
}

func (o ImageStorageProfileResponseOutput) ToImageStorageProfileResponseOutput() ImageStorageProfileResponseOutput {
	return o
}

func (o ImageStorageProfileResponseOutput) ToImageStorageProfileResponseOutputWithContext(ctx context.Context) ImageStorageProfileResponseOutput {
	return o
}

func (o ImageStorageProfileResponseOutput) ToImageStorageProfileResponsePtrOutput() ImageStorageProfileResponsePtrOutput {
	return o.ToImageStorageProfileResponsePtrOutputWithContext(context.Background())
}

func (o ImageStorageProfileResponseOutput) ToImageStorageProfileResponsePtrOutputWithContext(ctx context.Context) ImageStorageProfileResponsePtrOutput {
	return o.ApplyT(func(v ImageStorageProfileResponse) *ImageStorageProfileResponse {
		return &v
	}).(ImageStorageProfileResponsePtrOutput)
}

// Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
func (o ImageStorageProfileResponseOutput) DataDisks() ImageDataDiskResponseArrayOutput {
	return o.ApplyT(func(v ImageStorageProfileResponse) []ImageDataDiskResponse { return v.DataDisks }).(ImageDataDiskResponseArrayOutput)
}

// Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
func (o ImageStorageProfileResponseOutput) OsDisk() ImageOSDiskResponsePtrOutput {
	return o.ApplyT(func(v ImageStorageProfileResponse) *ImageOSDiskResponse { return v.OsDisk }).(ImageOSDiskResponsePtrOutput)
}

// Specifies whether an image is zone resilient or not. Default is false. Zone resilient images can be created only in regions that provide Zone Redundant Storage (ZRS).
func (o ImageStorageProfileResponseOutput) ZoneResilient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageStorageProfileResponse) *bool { return v.ZoneResilient }).(pulumi.BoolPtrOutput)
}

type ImageStorageProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageStorageProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageStorageProfileResponse)(nil)).Elem()
}

func (o ImageStorageProfileResponsePtrOutput) ToImageStorageProfileResponsePtrOutput() ImageStorageProfileResponsePtrOutput {
	return o
}

func (o ImageStorageProfileResponsePtrOutput) ToImageStorageProfileResponsePtrOutputWithContext(ctx context.Context) ImageStorageProfileResponsePtrOutput {
	return o
}

func (o ImageStorageProfileResponsePtrOutput) Elem() ImageStorageProfileResponseOutput {
	return o.ApplyT(func(v *ImageStorageProfileResponse) ImageStorageProfileResponse { return *v }).(ImageStorageProfileResponseOutput)
}

// Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
func (o ImageStorageProfileResponsePtrOutput) DataDisks() ImageDataDiskResponseArrayOutput {
	return o.ApplyT(func(v *ImageStorageProfileResponse) []ImageDataDiskResponse {
		if v == nil {
			return nil
		}
		return v.DataDisks
	}).(ImageDataDiskResponseArrayOutput)
}

// Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
func (o ImageStorageProfileResponsePtrOutput) OsDisk() ImageOSDiskResponsePtrOutput {
	return o.ApplyT(func(v *ImageStorageProfileResponse) *ImageOSDiskResponse {
		if v == nil {
			return nil
		}
		return v.OsDisk
	}).(ImageOSDiskResponsePtrOutput)
}

// Specifies whether an image is zone resilient or not. Default is false. Zone resilient images can be created only in regions that provide Zone Redundant Storage (ZRS).
func (o ImageStorageProfileResponsePtrOutput) ZoneResilient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageStorageProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ZoneResilient
	}).(pulumi.BoolPtrOutput)
}

// Inner error details.
type InnerErrorResponse struct {
	// The internal error message or exception dump.
	Errordetail *string `pulumi:"errordetail"`
	// The exception type.
	Exceptiontype *string `pulumi:"exceptiontype"`
}

// Inner error details.
type InnerErrorResponseOutput struct{ *pulumi.OutputState }

func (InnerErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InnerErrorResponse)(nil)).Elem()
}

func (o InnerErrorResponseOutput) ToInnerErrorResponseOutput() InnerErrorResponseOutput {
	return o
}

func (o InnerErrorResponseOutput) ToInnerErrorResponseOutputWithContext(ctx context.Context) InnerErrorResponseOutput {
	return o
}

func (o InnerErrorResponseOutput) ToInnerErrorResponsePtrOutput() InnerErrorResponsePtrOutput {
	return o.ToInnerErrorResponsePtrOutputWithContext(context.Background())
}

func (o InnerErrorResponseOutput) ToInnerErrorResponsePtrOutputWithContext(ctx context.Context) InnerErrorResponsePtrOutput {
	return o.ApplyT(func(v InnerErrorResponse) *InnerErrorResponse {
		return &v
	}).(InnerErrorResponsePtrOutput)
}

// The internal error message or exception dump.
func (o InnerErrorResponseOutput) Errordetail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InnerErrorResponse) *string { return v.Errordetail }).(pulumi.StringPtrOutput)
}

// The exception type.
func (o InnerErrorResponseOutput) Exceptiontype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InnerErrorResponse) *string { return v.Exceptiontype }).(pulumi.StringPtrOutput)
}

type InnerErrorResponsePtrOutput struct{ *pulumi.OutputState }

func (InnerErrorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InnerErrorResponse)(nil)).Elem()
}

func (o InnerErrorResponsePtrOutput) ToInnerErrorResponsePtrOutput() InnerErrorResponsePtrOutput {
	return o
}

func (o InnerErrorResponsePtrOutput) ToInnerErrorResponsePtrOutputWithContext(ctx context.Context) InnerErrorResponsePtrOutput {
	return o
}

func (o InnerErrorResponsePtrOutput) Elem() InnerErrorResponseOutput {
	return o.ApplyT(func(v *InnerErrorResponse) InnerErrorResponse { return *v }).(InnerErrorResponseOutput)
}

// The internal error message or exception dump.
func (o InnerErrorResponsePtrOutput) Errordetail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InnerErrorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Errordetail
	}).(pulumi.StringPtrOutput)
}

// The exception type.
func (o InnerErrorResponsePtrOutput) Exceptiontype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InnerErrorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Exceptiontype
	}).(pulumi.StringPtrOutput)
}

// Instance view status.
type InstanceViewStatus struct {
	// The status code.
	Code *string `pulumi:"code"`
	// The short localizable label for the status.
	DisplayStatus *string `pulumi:"displayStatus"`
	// The level code.
	Level *string `pulumi:"level"`
	// The detailed status message, including for alerts and error messages.
	Message *string `pulumi:"message"`
	// The time of the status.
	Time *string `pulumi:"time"`
}

// InstanceViewStatusInput is an input type that accepts InstanceViewStatusArgs and InstanceViewStatusOutput values.
// You can construct a concrete instance of `InstanceViewStatusInput` via:
//
//          InstanceViewStatusArgs{...}
type InstanceViewStatusInput interface {
	pulumi.Input

	ToInstanceViewStatusOutput() InstanceViewStatusOutput
	ToInstanceViewStatusOutputWithContext(context.Context) InstanceViewStatusOutput
}

// Instance view status.
type InstanceViewStatusArgs struct {
	// The status code.
	Code pulumi.StringPtrInput `pulumi:"code"`
	// The short localizable label for the status.
	DisplayStatus pulumi.StringPtrInput `pulumi:"displayStatus"`
	// The level code.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// The detailed status message, including for alerts and error messages.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The time of the status.
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (InstanceViewStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceViewStatus)(nil)).Elem()
}

func (i InstanceViewStatusArgs) ToInstanceViewStatusOutput() InstanceViewStatusOutput {
	return i.ToInstanceViewStatusOutputWithContext(context.Background())
}

func (i InstanceViewStatusArgs) ToInstanceViewStatusOutputWithContext(ctx context.Context) InstanceViewStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceViewStatusOutput)
}

func (i InstanceViewStatusArgs) ToInstanceViewStatusPtrOutput() InstanceViewStatusPtrOutput {
	return i.ToInstanceViewStatusPtrOutputWithContext(context.Background())
}

func (i InstanceViewStatusArgs) ToInstanceViewStatusPtrOutputWithContext(ctx context.Context) InstanceViewStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceViewStatusOutput).ToInstanceViewStatusPtrOutputWithContext(ctx)
}

// InstanceViewStatusPtrInput is an input type that accepts InstanceViewStatusArgs, InstanceViewStatusPtr and InstanceViewStatusPtrOutput values.
// You can construct a concrete instance of `InstanceViewStatusPtrInput` via:
//
//          InstanceViewStatusArgs{...}
//
//  or:
//
//          nil
type InstanceViewStatusPtrInput interface {
	pulumi.Input

	ToInstanceViewStatusPtrOutput() InstanceViewStatusPtrOutput
	ToInstanceViewStatusPtrOutputWithContext(context.Context) InstanceViewStatusPtrOutput
}

type instanceViewStatusPtrType InstanceViewStatusArgs

func InstanceViewStatusPtr(v *InstanceViewStatusArgs) InstanceViewStatusPtrInput {
	return (*instanceViewStatusPtrType)(v)
}

func (*instanceViewStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceViewStatus)(nil)).Elem()
}

func (i *instanceViewStatusPtrType) ToInstanceViewStatusPtrOutput() InstanceViewStatusPtrOutput {
	return i.ToInstanceViewStatusPtrOutputWithContext(context.Background())
}

func (i *instanceViewStatusPtrType) ToInstanceViewStatusPtrOutputWithContext(ctx context.Context) InstanceViewStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceViewStatusPtrOutput)
}

// InstanceViewStatusArrayInput is an input type that accepts InstanceViewStatusArray and InstanceViewStatusArrayOutput values.
// You can construct a concrete instance of `InstanceViewStatusArrayInput` via:
//
//          InstanceViewStatusArray{ InstanceViewStatusArgs{...} }
type InstanceViewStatusArrayInput interface {
	pulumi.Input

	ToInstanceViewStatusArrayOutput() InstanceViewStatusArrayOutput
	ToInstanceViewStatusArrayOutputWithContext(context.Context) InstanceViewStatusArrayOutput
}

type InstanceViewStatusArray []InstanceViewStatusInput

func (InstanceViewStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceViewStatus)(nil)).Elem()
}

func (i InstanceViewStatusArray) ToInstanceViewStatusArrayOutput() InstanceViewStatusArrayOutput {
	return i.ToInstanceViewStatusArrayOutputWithContext(context.Background())
}

func (i InstanceViewStatusArray) ToInstanceViewStatusArrayOutputWithContext(ctx context.Context) InstanceViewStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceViewStatusArrayOutput)
}

// Instance view status.
type InstanceViewStatusResponse struct {
	// The status code.
	Code *string `pulumi:"code"`
	// The short localizable label for the status.
	DisplayStatus *string `pulumi:"displayStatus"`
	// The level code.
	Level *string `pulumi:"level"`
	// The detailed status message, including for alerts and error messages.
	Message *string `pulumi:"message"`
	// The time of the status.
	Time *string `pulumi:"time"`
}

// Instance view status.
type InstanceViewStatusResponseOutput struct{ *pulumi.OutputState }

func (InstanceViewStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceViewStatusResponse)(nil)).Elem()
}

func (o InstanceViewStatusResponseOutput) ToInstanceViewStatusResponseOutput() InstanceViewStatusResponseOutput {
	return o
}

func (o InstanceViewStatusResponseOutput) ToInstanceViewStatusResponseOutputWithContext(ctx context.Context) InstanceViewStatusResponseOutput {
	return o
}

func (o InstanceViewStatusResponseOutput) ToInstanceViewStatusResponsePtrOutput() InstanceViewStatusResponsePtrOutput {
	return o.ToInstanceViewStatusResponsePtrOutputWithContext(context.Background())
}

func (o InstanceViewStatusResponseOutput) ToInstanceViewStatusResponsePtrOutputWithContext(ctx context.Context) InstanceViewStatusResponsePtrOutput {
	return o.ApplyT(func(v InstanceViewStatusResponse) *InstanceViewStatusResponse {
		return &v
	}).(InstanceViewStatusResponsePtrOutput)
}

// The status code.
func (o InstanceViewStatusResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceViewStatusResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// The short localizable label for the status.
func (o InstanceViewStatusResponseOutput) DisplayStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceViewStatusResponse) *string { return v.DisplayStatus }).(pulumi.StringPtrOutput)
}

// The level code.
func (o InstanceViewStatusResponseOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceViewStatusResponse) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// The detailed status message, including for alerts and error messages.
func (o InstanceViewStatusResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceViewStatusResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The time of the status.
func (o InstanceViewStatusResponseOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceViewStatusResponse) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type InstanceViewStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (InstanceViewStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceViewStatusResponse)(nil)).Elem()
}

func (o InstanceViewStatusResponsePtrOutput) ToInstanceViewStatusResponsePtrOutput() InstanceViewStatusResponsePtrOutput {
	return o
}

func (o InstanceViewStatusResponsePtrOutput) ToInstanceViewStatusResponsePtrOutputWithContext(ctx context.Context) InstanceViewStatusResponsePtrOutput {
	return o
}

func (o InstanceViewStatusResponsePtrOutput) Elem() InstanceViewStatusResponseOutput {
	return o.ApplyT(func(v *InstanceViewStatusResponse) InstanceViewStatusResponse { return *v }).(InstanceViewStatusResponseOutput)
}

// The status code.
func (o InstanceViewStatusResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceViewStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.StringPtrOutput)
}

// The short localizable label for the status.
func (o InstanceViewStatusResponsePtrOutput) DisplayStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceViewStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.DisplayStatus
	}).(pulumi.StringPtrOutput)
}

// The level code.
func (o InstanceViewStatusResponsePtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceViewStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// The detailed status message, including for alerts and error messages.
func (o InstanceViewStatusResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceViewStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// The time of the status.
func (o InstanceViewStatusResponsePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceViewStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

type InstanceViewStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (InstanceViewStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceViewStatusResponse)(nil)).Elem()
}

func (o InstanceViewStatusResponseArrayOutput) ToInstanceViewStatusResponseArrayOutput() InstanceViewStatusResponseArrayOutput {
	return o
}

func (o InstanceViewStatusResponseArrayOutput) ToInstanceViewStatusResponseArrayOutputWithContext(ctx context.Context) InstanceViewStatusResponseArrayOutput {
	return o
}

func (o InstanceViewStatusResponseArrayOutput) Index(i pulumi.IntInput) InstanceViewStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceViewStatusResponse {
		return vs[0].([]InstanceViewStatusResponse)[vs[1].(int)]
	}).(InstanceViewStatusResponseOutput)
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReference struct {
	// Url pointing to a key or secret in KeyVault
	KeyUrl string `pulumi:"keyUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVault `pulumi:"sourceVault"`
}

// KeyVaultAndKeyReferenceInput is an input type that accepts KeyVaultAndKeyReferenceArgs and KeyVaultAndKeyReferenceOutput values.
// You can construct a concrete instance of `KeyVaultAndKeyReferenceInput` via:
//
//          KeyVaultAndKeyReferenceArgs{...}
type KeyVaultAndKeyReferenceInput interface {
	pulumi.Input

	ToKeyVaultAndKeyReferenceOutput() KeyVaultAndKeyReferenceOutput
	ToKeyVaultAndKeyReferenceOutputWithContext(context.Context) KeyVaultAndKeyReferenceOutput
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReferenceArgs struct {
	// Url pointing to a key or secret in KeyVault
	KeyUrl pulumi.StringInput `pulumi:"keyUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultInput `pulumi:"sourceVault"`
}

func (KeyVaultAndKeyReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndKeyReference)(nil)).Elem()
}

func (i KeyVaultAndKeyReferenceArgs) ToKeyVaultAndKeyReferenceOutput() KeyVaultAndKeyReferenceOutput {
	return i.ToKeyVaultAndKeyReferenceOutputWithContext(context.Background())
}

func (i KeyVaultAndKeyReferenceArgs) ToKeyVaultAndKeyReferenceOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndKeyReferenceOutput)
}

func (i KeyVaultAndKeyReferenceArgs) ToKeyVaultAndKeyReferencePtrOutput() KeyVaultAndKeyReferencePtrOutput {
	return i.ToKeyVaultAndKeyReferencePtrOutputWithContext(context.Background())
}

func (i KeyVaultAndKeyReferenceArgs) ToKeyVaultAndKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndKeyReferenceOutput).ToKeyVaultAndKeyReferencePtrOutputWithContext(ctx)
}

// KeyVaultAndKeyReferencePtrInput is an input type that accepts KeyVaultAndKeyReferenceArgs, KeyVaultAndKeyReferencePtr and KeyVaultAndKeyReferencePtrOutput values.
// You can construct a concrete instance of `KeyVaultAndKeyReferencePtrInput` via:
//
//          KeyVaultAndKeyReferenceArgs{...}
//
//  or:
//
//          nil
type KeyVaultAndKeyReferencePtrInput interface {
	pulumi.Input

	ToKeyVaultAndKeyReferencePtrOutput() KeyVaultAndKeyReferencePtrOutput
	ToKeyVaultAndKeyReferencePtrOutputWithContext(context.Context) KeyVaultAndKeyReferencePtrOutput
}

type keyVaultAndKeyReferencePtrType KeyVaultAndKeyReferenceArgs

func KeyVaultAndKeyReferencePtr(v *KeyVaultAndKeyReferenceArgs) KeyVaultAndKeyReferencePtrInput {
	return (*keyVaultAndKeyReferencePtrType)(v)
}

func (*keyVaultAndKeyReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndKeyReference)(nil)).Elem()
}

func (i *keyVaultAndKeyReferencePtrType) ToKeyVaultAndKeyReferencePtrOutput() KeyVaultAndKeyReferencePtrOutput {
	return i.ToKeyVaultAndKeyReferencePtrOutputWithContext(context.Background())
}

func (i *keyVaultAndKeyReferencePtrType) ToKeyVaultAndKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndKeyReferencePtrOutput)
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReferenceResponse struct {
	// Url pointing to a key or secret in KeyVault
	KeyUrl string `pulumi:"keyUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultResponse `pulumi:"sourceVault"`
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReferenceResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultAndKeyReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndKeyReferenceResponse)(nil)).Elem()
}

func (o KeyVaultAndKeyReferenceResponseOutput) ToKeyVaultAndKeyReferenceResponseOutput() KeyVaultAndKeyReferenceResponseOutput {
	return o
}

func (o KeyVaultAndKeyReferenceResponseOutput) ToKeyVaultAndKeyReferenceResponseOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceResponseOutput {
	return o
}

func (o KeyVaultAndKeyReferenceResponseOutput) ToKeyVaultAndKeyReferenceResponsePtrOutput() KeyVaultAndKeyReferenceResponsePtrOutput {
	return o.ToKeyVaultAndKeyReferenceResponsePtrOutputWithContext(context.Background())
}

func (o KeyVaultAndKeyReferenceResponseOutput) ToKeyVaultAndKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceResponsePtrOutput {
	return o.ApplyT(func(v KeyVaultAndKeyReferenceResponse) *KeyVaultAndKeyReferenceResponse {
		return &v
	}).(KeyVaultAndKeyReferenceResponsePtrOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndKeyReferenceResponseOutput) KeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultAndKeyReferenceResponse) string { return v.KeyUrl }).(pulumi.StringOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndKeyReferenceResponseOutput) SourceVault() SourceVaultResponseOutput {
	return o.ApplyT(func(v KeyVaultAndKeyReferenceResponse) SourceVaultResponse { return v.SourceVault }).(SourceVaultResponseOutput)
}

type KeyVaultAndKeyReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultAndKeyReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndKeyReferenceResponse)(nil)).Elem()
}

func (o KeyVaultAndKeyReferenceResponsePtrOutput) ToKeyVaultAndKeyReferenceResponsePtrOutput() KeyVaultAndKeyReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultAndKeyReferenceResponsePtrOutput) ToKeyVaultAndKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultAndKeyReferenceResponsePtrOutput) Elem() KeyVaultAndKeyReferenceResponseOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReferenceResponse) KeyVaultAndKeyReferenceResponse { return *v }).(KeyVaultAndKeyReferenceResponseOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndKeyReferenceResponsePtrOutput) KeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyUrl
	}).(pulumi.StringPtrOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndKeyReferenceResponsePtrOutput) SourceVault() SourceVaultResponsePtrOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReferenceResponse) *SourceVaultResponse {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(SourceVaultResponsePtrOutput)
}

type KeyVaultAndKeyReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (KeyVaultAndKeyReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyVaultAndKeyReferenceResponse)(nil)).Elem()
}

func (o KeyVaultAndKeyReferenceResponseArrayOutput) ToKeyVaultAndKeyReferenceResponseArrayOutput() KeyVaultAndKeyReferenceResponseArrayOutput {
	return o
}

func (o KeyVaultAndKeyReferenceResponseArrayOutput) ToKeyVaultAndKeyReferenceResponseArrayOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceResponseArrayOutput {
	return o
}

func (o KeyVaultAndKeyReferenceResponseArrayOutput) Index(i pulumi.IntInput) KeyVaultAndKeyReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyVaultAndKeyReferenceResponse {
		return vs[0].([]KeyVaultAndKeyReferenceResponse)[vs[1].(int)]
	}).(KeyVaultAndKeyReferenceResponseOutput)
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReference struct {
	// Url pointing to a key or secret in KeyVault
	SecretUrl string `pulumi:"secretUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVault `pulumi:"sourceVault"`
}

// KeyVaultAndSecretReferenceInput is an input type that accepts KeyVaultAndSecretReferenceArgs and KeyVaultAndSecretReferenceOutput values.
// You can construct a concrete instance of `KeyVaultAndSecretReferenceInput` via:
//
//          KeyVaultAndSecretReferenceArgs{...}
type KeyVaultAndSecretReferenceInput interface {
	pulumi.Input

	ToKeyVaultAndSecretReferenceOutput() KeyVaultAndSecretReferenceOutput
	ToKeyVaultAndSecretReferenceOutputWithContext(context.Context) KeyVaultAndSecretReferenceOutput
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReferenceArgs struct {
	// Url pointing to a key or secret in KeyVault
	SecretUrl pulumi.StringInput `pulumi:"secretUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultInput `pulumi:"sourceVault"`
}

func (KeyVaultAndSecretReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndSecretReference)(nil)).Elem()
}

func (i KeyVaultAndSecretReferenceArgs) ToKeyVaultAndSecretReferenceOutput() KeyVaultAndSecretReferenceOutput {
	return i.ToKeyVaultAndSecretReferenceOutputWithContext(context.Background())
}

func (i KeyVaultAndSecretReferenceArgs) ToKeyVaultAndSecretReferenceOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndSecretReferenceOutput)
}

func (i KeyVaultAndSecretReferenceArgs) ToKeyVaultAndSecretReferencePtrOutput() KeyVaultAndSecretReferencePtrOutput {
	return i.ToKeyVaultAndSecretReferencePtrOutputWithContext(context.Background())
}

func (i KeyVaultAndSecretReferenceArgs) ToKeyVaultAndSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndSecretReferenceOutput).ToKeyVaultAndSecretReferencePtrOutputWithContext(ctx)
}

// KeyVaultAndSecretReferencePtrInput is an input type that accepts KeyVaultAndSecretReferenceArgs, KeyVaultAndSecretReferencePtr and KeyVaultAndSecretReferencePtrOutput values.
// You can construct a concrete instance of `KeyVaultAndSecretReferencePtrInput` via:
//
//          KeyVaultAndSecretReferenceArgs{...}
//
//  or:
//
//          nil
type KeyVaultAndSecretReferencePtrInput interface {
	pulumi.Input

	ToKeyVaultAndSecretReferencePtrOutput() KeyVaultAndSecretReferencePtrOutput
	ToKeyVaultAndSecretReferencePtrOutputWithContext(context.Context) KeyVaultAndSecretReferencePtrOutput
}

type keyVaultAndSecretReferencePtrType KeyVaultAndSecretReferenceArgs

func KeyVaultAndSecretReferencePtr(v *KeyVaultAndSecretReferenceArgs) KeyVaultAndSecretReferencePtrInput {
	return (*keyVaultAndSecretReferencePtrType)(v)
}

func (*keyVaultAndSecretReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndSecretReference)(nil)).Elem()
}

func (i *keyVaultAndSecretReferencePtrType) ToKeyVaultAndSecretReferencePtrOutput() KeyVaultAndSecretReferencePtrOutput {
	return i.ToKeyVaultAndSecretReferencePtrOutputWithContext(context.Background())
}

func (i *keyVaultAndSecretReferencePtrType) ToKeyVaultAndSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndSecretReferencePtrOutput)
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReferenceResponse struct {
	// Url pointing to a key or secret in KeyVault
	SecretUrl string `pulumi:"secretUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultResponse `pulumi:"sourceVault"`
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReferenceResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultAndSecretReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndSecretReferenceResponse)(nil)).Elem()
}

func (o KeyVaultAndSecretReferenceResponseOutput) ToKeyVaultAndSecretReferenceResponseOutput() KeyVaultAndSecretReferenceResponseOutput {
	return o
}

func (o KeyVaultAndSecretReferenceResponseOutput) ToKeyVaultAndSecretReferenceResponseOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceResponseOutput {
	return o
}

func (o KeyVaultAndSecretReferenceResponseOutput) ToKeyVaultAndSecretReferenceResponsePtrOutput() KeyVaultAndSecretReferenceResponsePtrOutput {
	return o.ToKeyVaultAndSecretReferenceResponsePtrOutputWithContext(context.Background())
}

func (o KeyVaultAndSecretReferenceResponseOutput) ToKeyVaultAndSecretReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v KeyVaultAndSecretReferenceResponse) *KeyVaultAndSecretReferenceResponse {
		return &v
	}).(KeyVaultAndSecretReferenceResponsePtrOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndSecretReferenceResponseOutput) SecretUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultAndSecretReferenceResponse) string { return v.SecretUrl }).(pulumi.StringOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndSecretReferenceResponseOutput) SourceVault() SourceVaultResponseOutput {
	return o.ApplyT(func(v KeyVaultAndSecretReferenceResponse) SourceVaultResponse { return v.SourceVault }).(SourceVaultResponseOutput)
}

type KeyVaultAndSecretReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultAndSecretReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndSecretReferenceResponse)(nil)).Elem()
}

func (o KeyVaultAndSecretReferenceResponsePtrOutput) ToKeyVaultAndSecretReferenceResponsePtrOutput() KeyVaultAndSecretReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultAndSecretReferenceResponsePtrOutput) ToKeyVaultAndSecretReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultAndSecretReferenceResponsePtrOutput) Elem() KeyVaultAndSecretReferenceResponseOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReferenceResponse) KeyVaultAndSecretReferenceResponse { return *v }).(KeyVaultAndSecretReferenceResponseOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndSecretReferenceResponsePtrOutput) SecretUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SecretUrl
	}).(pulumi.StringPtrOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndSecretReferenceResponsePtrOutput) SourceVault() SourceVaultResponsePtrOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReferenceResponse) *SourceVaultResponse {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(SourceVaultResponsePtrOutput)
}

// Describes a reference to Key Vault Key
type KeyVaultKeyReference struct {
	// The URL referencing a key encryption key in Key Vault.
	KeyUrl string `pulumi:"keyUrl"`
	// The relative URL of the Key Vault containing the key.
	SourceVault SubResource `pulumi:"sourceVault"`
}

// KeyVaultKeyReferenceInput is an input type that accepts KeyVaultKeyReferenceArgs and KeyVaultKeyReferenceOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceInput` via:
//
//          KeyVaultKeyReferenceArgs{...}
type KeyVaultKeyReferenceInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceOutput() KeyVaultKeyReferenceOutput
	ToKeyVaultKeyReferenceOutputWithContext(context.Context) KeyVaultKeyReferenceOutput
}

// Describes a reference to Key Vault Key
type KeyVaultKeyReferenceArgs struct {
	// The URL referencing a key encryption key in Key Vault.
	KeyUrl pulumi.StringInput `pulumi:"keyUrl"`
	// The relative URL of the Key Vault containing the key.
	SourceVault SubResourceInput `pulumi:"sourceVault"`
}

func (KeyVaultKeyReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReference)(nil)).Elem()
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferenceOutput() KeyVaultKeyReferenceOutput {
	return i.ToKeyVaultKeyReferenceOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferenceOutputWithContext(ctx context.Context) KeyVaultKeyReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceOutput)
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput {
	return i.ToKeyVaultKeyReferencePtrOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceOutput).ToKeyVaultKeyReferencePtrOutputWithContext(ctx)
}

// KeyVaultKeyReferencePtrInput is an input type that accepts KeyVaultKeyReferenceArgs, KeyVaultKeyReferencePtr and KeyVaultKeyReferencePtrOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferencePtrInput` via:
//
//          KeyVaultKeyReferenceArgs{...}
//
//  or:
//
//          nil
type KeyVaultKeyReferencePtrInput interface {
	pulumi.Input

	ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput
	ToKeyVaultKeyReferencePtrOutputWithContext(context.Context) KeyVaultKeyReferencePtrOutput
}

type keyVaultKeyReferencePtrType KeyVaultKeyReferenceArgs

func KeyVaultKeyReferencePtr(v *KeyVaultKeyReferenceArgs) KeyVaultKeyReferencePtrInput {
	return (*keyVaultKeyReferencePtrType)(v)
}

func (*keyVaultKeyReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReference)(nil)).Elem()
}

func (i *keyVaultKeyReferencePtrType) ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput {
	return i.ToKeyVaultKeyReferencePtrOutputWithContext(context.Background())
}

func (i *keyVaultKeyReferencePtrType) ToKeyVaultKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferencePtrOutput)
}

// Describes a reference to Key Vault Key
type KeyVaultKeyReferenceResponse struct {
	// The URL referencing a key encryption key in Key Vault.
	KeyUrl string `pulumi:"keyUrl"`
	// The relative URL of the Key Vault containing the key.
	SourceVault SubResourceResponse `pulumi:"sourceVault"`
}

// Describes a reference to Key Vault Key
type KeyVaultKeyReferenceResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceResponse)(nil)).Elem()
}

func (o KeyVaultKeyReferenceResponseOutput) ToKeyVaultKeyReferenceResponseOutput() KeyVaultKeyReferenceResponseOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseOutput) ToKeyVaultKeyReferenceResponseOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseOutput) ToKeyVaultKeyReferenceResponsePtrOutput() KeyVaultKeyReferenceResponsePtrOutput {
	return o.ToKeyVaultKeyReferenceResponsePtrOutputWithContext(context.Background())
}

func (o KeyVaultKeyReferenceResponseOutput) ToKeyVaultKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponsePtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponse) *KeyVaultKeyReferenceResponse {
		return &v
	}).(KeyVaultKeyReferenceResponsePtrOutput)
}

// The URL referencing a key encryption key in Key Vault.
func (o KeyVaultKeyReferenceResponseOutput) KeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponse) string { return v.KeyUrl }).(pulumi.StringOutput)
}

// The relative URL of the Key Vault containing the key.
func (o KeyVaultKeyReferenceResponseOutput) SourceVault() SubResourceResponseOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponse) SubResourceResponse { return v.SourceVault }).(SubResourceResponseOutput)
}

type KeyVaultKeyReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceResponse)(nil)).Elem()
}

func (o KeyVaultKeyReferenceResponsePtrOutput) ToKeyVaultKeyReferenceResponsePtrOutput() KeyVaultKeyReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultKeyReferenceResponsePtrOutput) ToKeyVaultKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultKeyReferenceResponsePtrOutput) Elem() KeyVaultKeyReferenceResponseOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponse) KeyVaultKeyReferenceResponse { return *v }).(KeyVaultKeyReferenceResponseOutput)
}

// The URL referencing a key encryption key in Key Vault.
func (o KeyVaultKeyReferenceResponsePtrOutput) KeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyUrl
	}).(pulumi.StringPtrOutput)
}

// The relative URL of the Key Vault containing the key.
func (o KeyVaultKeyReferenceResponsePtrOutput) SourceVault() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponse) *SubResourceResponse {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(SubResourceResponsePtrOutput)
}

// Describes a reference to Key Vault Secret
type KeyVaultSecretReference struct {
	// The URL referencing a secret in a Key Vault.
	SecretUrl string `pulumi:"secretUrl"`
	// The relative URL of the Key Vault containing the secret.
	SourceVault SubResource `pulumi:"sourceVault"`
}

// KeyVaultSecretReferenceInput is an input type that accepts KeyVaultSecretReferenceArgs and KeyVaultSecretReferenceOutput values.
// You can construct a concrete instance of `KeyVaultSecretReferenceInput` via:
//
//          KeyVaultSecretReferenceArgs{...}
type KeyVaultSecretReferenceInput interface {
	pulumi.Input

	ToKeyVaultSecretReferenceOutput() KeyVaultSecretReferenceOutput
	ToKeyVaultSecretReferenceOutputWithContext(context.Context) KeyVaultSecretReferenceOutput
}

// Describes a reference to Key Vault Secret
type KeyVaultSecretReferenceArgs struct {
	// The URL referencing a secret in a Key Vault.
	SecretUrl pulumi.StringInput `pulumi:"secretUrl"`
	// The relative URL of the Key Vault containing the secret.
	SourceVault SubResourceInput `pulumi:"sourceVault"`
}

func (KeyVaultSecretReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultSecretReference)(nil)).Elem()
}

func (i KeyVaultSecretReferenceArgs) ToKeyVaultSecretReferenceOutput() KeyVaultSecretReferenceOutput {
	return i.ToKeyVaultSecretReferenceOutputWithContext(context.Background())
}

func (i KeyVaultSecretReferenceArgs) ToKeyVaultSecretReferenceOutputWithContext(ctx context.Context) KeyVaultSecretReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretReferenceOutput)
}

func (i KeyVaultSecretReferenceArgs) ToKeyVaultSecretReferencePtrOutput() KeyVaultSecretReferencePtrOutput {
	return i.ToKeyVaultSecretReferencePtrOutputWithContext(context.Background())
}

func (i KeyVaultSecretReferenceArgs) ToKeyVaultSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultSecretReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretReferenceOutput).ToKeyVaultSecretReferencePtrOutputWithContext(ctx)
}

// KeyVaultSecretReferencePtrInput is an input type that accepts KeyVaultSecretReferenceArgs, KeyVaultSecretReferencePtr and KeyVaultSecretReferencePtrOutput values.
// You can construct a concrete instance of `KeyVaultSecretReferencePtrInput` via:
//
//          KeyVaultSecretReferenceArgs{...}
//
//  or:
//
//          nil
type KeyVaultSecretReferencePtrInput interface {
	pulumi.Input

	ToKeyVaultSecretReferencePtrOutput() KeyVaultSecretReferencePtrOutput
	ToKeyVaultSecretReferencePtrOutputWithContext(context.Context) KeyVaultSecretReferencePtrOutput
}

type keyVaultSecretReferencePtrType KeyVaultSecretReferenceArgs

func KeyVaultSecretReferencePtr(v *KeyVaultSecretReferenceArgs) KeyVaultSecretReferencePtrInput {
	return (*keyVaultSecretReferencePtrType)(v)
}

func (*keyVaultSecretReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultSecretReference)(nil)).Elem()
}

func (i *keyVaultSecretReferencePtrType) ToKeyVaultSecretReferencePtrOutput() KeyVaultSecretReferencePtrOutput {
	return i.ToKeyVaultSecretReferencePtrOutputWithContext(context.Background())
}

func (i *keyVaultSecretReferencePtrType) ToKeyVaultSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultSecretReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretReferencePtrOutput)
}

// Describes a reference to Key Vault Secret
type KeyVaultSecretReferenceResponse struct {
	// The URL referencing a secret in a Key Vault.
	SecretUrl string `pulumi:"secretUrl"`
	// The relative URL of the Key Vault containing the secret.
	SourceVault SubResourceResponse `pulumi:"sourceVault"`
}

// Describes a reference to Key Vault Secret
type KeyVaultSecretReferenceResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultSecretReferenceResponse)(nil)).Elem()
}

func (o KeyVaultSecretReferenceResponseOutput) ToKeyVaultSecretReferenceResponseOutput() KeyVaultSecretReferenceResponseOutput {
	return o
}

func (o KeyVaultSecretReferenceResponseOutput) ToKeyVaultSecretReferenceResponseOutputWithContext(ctx context.Context) KeyVaultSecretReferenceResponseOutput {
	return o
}

func (o KeyVaultSecretReferenceResponseOutput) ToKeyVaultSecretReferenceResponsePtrOutput() KeyVaultSecretReferenceResponsePtrOutput {
	return o.ToKeyVaultSecretReferenceResponsePtrOutputWithContext(context.Background())
}

func (o KeyVaultSecretReferenceResponseOutput) ToKeyVaultSecretReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v KeyVaultSecretReferenceResponse) *KeyVaultSecretReferenceResponse {
		return &v
	}).(KeyVaultSecretReferenceResponsePtrOutput)
}

// The URL referencing a secret in a Key Vault.
func (o KeyVaultSecretReferenceResponseOutput) SecretUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultSecretReferenceResponse) string { return v.SecretUrl }).(pulumi.StringOutput)
}

// The relative URL of the Key Vault containing the secret.
func (o KeyVaultSecretReferenceResponseOutput) SourceVault() SubResourceResponseOutput {
	return o.ApplyT(func(v KeyVaultSecretReferenceResponse) SubResourceResponse { return v.SourceVault }).(SubResourceResponseOutput)
}

type KeyVaultSecretReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultSecretReferenceResponse)(nil)).Elem()
}

func (o KeyVaultSecretReferenceResponsePtrOutput) ToKeyVaultSecretReferenceResponsePtrOutput() KeyVaultSecretReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultSecretReferenceResponsePtrOutput) ToKeyVaultSecretReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultSecretReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultSecretReferenceResponsePtrOutput) Elem() KeyVaultSecretReferenceResponseOutput {
	return o.ApplyT(func(v *KeyVaultSecretReferenceResponse) KeyVaultSecretReferenceResponse { return *v }).(KeyVaultSecretReferenceResponseOutput)
}

// The URL referencing a secret in a Key Vault.
func (o KeyVaultSecretReferenceResponsePtrOutput) SecretUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SecretUrl
	}).(pulumi.StringPtrOutput)
}

// The relative URL of the Key Vault containing the secret.
func (o KeyVaultSecretReferenceResponsePtrOutput) SourceVault() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretReferenceResponse) *SubResourceResponse {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(SubResourceResponsePtrOutput)
}

// Describes the properties of the last installed patch summary.
type LastPatchInstallationSummaryResponse struct {
	// The errors that were encountered during execution of the operation. The details array contains the list of them.
	Error ApiErrorResponse `pulumi:"error"`
	// The number of all available patches but excluded explicitly by a customer-specified exclusion list match.
	ExcludedPatchCount int `pulumi:"excludedPatchCount"`
	// The count of patches that failed installation.
	FailedPatchCount int `pulumi:"failedPatchCount"`
	// The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
	InstallationActivityId string `pulumi:"installationActivityId"`
	// The count of patches that successfully installed.
	InstalledPatchCount int `pulumi:"installedPatchCount"`
	// The UTC timestamp when the operation began.
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// Describes whether the operation ran out of time before it completed all its intended actions
	MaintenanceWindowExceeded bool `pulumi:"maintenanceWindowExceeded"`
	// The number of all available patches but not going to be installed because it didn't match a classification or inclusion list entry.
	NotSelectedPatchCount int `pulumi:"notSelectedPatchCount"`
	// The number of all available patches expected to be installed over the course of the patch installation operation.
	PendingPatchCount int `pulumi:"pendingPatchCount"`
	// The reboot status of the machine after the patch operation. It will be in "NotNeeded" status if reboot is not needed after the patch operation. "Required" will be the status once the patch is applied and machine is required to reboot. "Started" will be the reboot status when the machine has started to reboot. "Failed" will be the status if the machine is failed to reboot. "Completed" will be the status once the machine is rebooted successfully
	RebootStatus string `pulumi:"rebootStatus"`
	// The UTC timestamp when the operation began.
	StartTime string `pulumi:"startTime"`
	// The person or system account that started the operation
	StartedBy string `pulumi:"startedBy"`
	// The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Failed", "Succeeded", or "CompletedWithWarnings."
	Status string `pulumi:"status"`
}

// Describes the properties of the last installed patch summary.
type LastPatchInstallationSummaryResponseOutput struct{ *pulumi.OutputState }

func (LastPatchInstallationSummaryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LastPatchInstallationSummaryResponse)(nil)).Elem()
}

func (o LastPatchInstallationSummaryResponseOutput) ToLastPatchInstallationSummaryResponseOutput() LastPatchInstallationSummaryResponseOutput {
	return o
}

func (o LastPatchInstallationSummaryResponseOutput) ToLastPatchInstallationSummaryResponseOutputWithContext(ctx context.Context) LastPatchInstallationSummaryResponseOutput {
	return o
}

func (o LastPatchInstallationSummaryResponseOutput) ToLastPatchInstallationSummaryResponsePtrOutput() LastPatchInstallationSummaryResponsePtrOutput {
	return o.ToLastPatchInstallationSummaryResponsePtrOutputWithContext(context.Background())
}

func (o LastPatchInstallationSummaryResponseOutput) ToLastPatchInstallationSummaryResponsePtrOutputWithContext(ctx context.Context) LastPatchInstallationSummaryResponsePtrOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) *LastPatchInstallationSummaryResponse {
		return &v
	}).(LastPatchInstallationSummaryResponsePtrOutput)
}

// The errors that were encountered during execution of the operation. The details array contains the list of them.
func (o LastPatchInstallationSummaryResponseOutput) Error() ApiErrorResponseOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) ApiErrorResponse { return v.Error }).(ApiErrorResponseOutput)
}

// The number of all available patches but excluded explicitly by a customer-specified exclusion list match.
func (o LastPatchInstallationSummaryResponseOutput) ExcludedPatchCount() pulumi.IntOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) int { return v.ExcludedPatchCount }).(pulumi.IntOutput)
}

// The count of patches that failed installation.
func (o LastPatchInstallationSummaryResponseOutput) FailedPatchCount() pulumi.IntOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) int { return v.FailedPatchCount }).(pulumi.IntOutput)
}

// The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
func (o LastPatchInstallationSummaryResponseOutput) InstallationActivityId() pulumi.StringOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) string { return v.InstallationActivityId }).(pulumi.StringOutput)
}

// The count of patches that successfully installed.
func (o LastPatchInstallationSummaryResponseOutput) InstalledPatchCount() pulumi.IntOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) int { return v.InstalledPatchCount }).(pulumi.IntOutput)
}

// The UTC timestamp when the operation began.
func (o LastPatchInstallationSummaryResponseOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) string { return v.LastModifiedTime }).(pulumi.StringOutput)
}

// Describes whether the operation ran out of time before it completed all its intended actions
func (o LastPatchInstallationSummaryResponseOutput) MaintenanceWindowExceeded() pulumi.BoolOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) bool { return v.MaintenanceWindowExceeded }).(pulumi.BoolOutput)
}

// The number of all available patches but not going to be installed because it didn't match a classification or inclusion list entry.
func (o LastPatchInstallationSummaryResponseOutput) NotSelectedPatchCount() pulumi.IntOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) int { return v.NotSelectedPatchCount }).(pulumi.IntOutput)
}

// The number of all available patches expected to be installed over the course of the patch installation operation.
func (o LastPatchInstallationSummaryResponseOutput) PendingPatchCount() pulumi.IntOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) int { return v.PendingPatchCount }).(pulumi.IntOutput)
}

// The reboot status of the machine after the patch operation. It will be in "NotNeeded" status if reboot is not needed after the patch operation. "Required" will be the status once the patch is applied and machine is required to reboot. "Started" will be the reboot status when the machine has started to reboot. "Failed" will be the status if the machine is failed to reboot. "Completed" will be the status once the machine is rebooted successfully
func (o LastPatchInstallationSummaryResponseOutput) RebootStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) string { return v.RebootStatus }).(pulumi.StringOutput)
}

// The UTC timestamp when the operation began.
func (o LastPatchInstallationSummaryResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// The person or system account that started the operation
func (o LastPatchInstallationSummaryResponseOutput) StartedBy() pulumi.StringOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) string { return v.StartedBy }).(pulumi.StringOutput)
}

// The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Failed", "Succeeded", or "CompletedWithWarnings."
func (o LastPatchInstallationSummaryResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) string { return v.Status }).(pulumi.StringOutput)
}

type LastPatchInstallationSummaryResponsePtrOutput struct{ *pulumi.OutputState }

func (LastPatchInstallationSummaryResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LastPatchInstallationSummaryResponse)(nil)).Elem()
}

func (o LastPatchInstallationSummaryResponsePtrOutput) ToLastPatchInstallationSummaryResponsePtrOutput() LastPatchInstallationSummaryResponsePtrOutput {
	return o
}

func (o LastPatchInstallationSummaryResponsePtrOutput) ToLastPatchInstallationSummaryResponsePtrOutputWithContext(ctx context.Context) LastPatchInstallationSummaryResponsePtrOutput {
	return o
}

func (o LastPatchInstallationSummaryResponsePtrOutput) Elem() LastPatchInstallationSummaryResponseOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) LastPatchInstallationSummaryResponse { return *v }).(LastPatchInstallationSummaryResponseOutput)
}

// The errors that were encountered during execution of the operation. The details array contains the list of them.
func (o LastPatchInstallationSummaryResponsePtrOutput) Error() ApiErrorResponsePtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *ApiErrorResponse {
		if v == nil {
			return nil
		}
		return &v.Error
	}).(ApiErrorResponsePtrOutput)
}

// The number of all available patches but excluded explicitly by a customer-specified exclusion list match.
func (o LastPatchInstallationSummaryResponsePtrOutput) ExcludedPatchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ExcludedPatchCount
	}).(pulumi.IntPtrOutput)
}

// The count of patches that failed installation.
func (o LastPatchInstallationSummaryResponsePtrOutput) FailedPatchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *int {
		if v == nil {
			return nil
		}
		return &v.FailedPatchCount
	}).(pulumi.IntPtrOutput)
}

// The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
func (o LastPatchInstallationSummaryResponsePtrOutput) InstallationActivityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.InstallationActivityId
	}).(pulumi.StringPtrOutput)
}

// The count of patches that successfully installed.
func (o LastPatchInstallationSummaryResponsePtrOutput) InstalledPatchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *int {
		if v == nil {
			return nil
		}
		return &v.InstalledPatchCount
	}).(pulumi.IntPtrOutput)
}

// The UTC timestamp when the operation began.
func (o LastPatchInstallationSummaryResponsePtrOutput) LastModifiedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastModifiedTime
	}).(pulumi.StringPtrOutput)
}

// Describes whether the operation ran out of time before it completed all its intended actions
func (o LastPatchInstallationSummaryResponsePtrOutput) MaintenanceWindowExceeded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.MaintenanceWindowExceeded
	}).(pulumi.BoolPtrOutput)
}

// The number of all available patches but not going to be installed because it didn't match a classification or inclusion list entry.
func (o LastPatchInstallationSummaryResponsePtrOutput) NotSelectedPatchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *int {
		if v == nil {
			return nil
		}
		return &v.NotSelectedPatchCount
	}).(pulumi.IntPtrOutput)
}

// The number of all available patches expected to be installed over the course of the patch installation operation.
func (o LastPatchInstallationSummaryResponsePtrOutput) PendingPatchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *int {
		if v == nil {
			return nil
		}
		return &v.PendingPatchCount
	}).(pulumi.IntPtrOutput)
}

// The reboot status of the machine after the patch operation. It will be in "NotNeeded" status if reboot is not needed after the patch operation. "Required" will be the status once the patch is applied and machine is required to reboot. "Started" will be the reboot status when the machine has started to reboot. "Failed" will be the status if the machine is failed to reboot. "Completed" will be the status once the machine is rebooted successfully
func (o LastPatchInstallationSummaryResponsePtrOutput) RebootStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RebootStatus
	}).(pulumi.StringPtrOutput)
}

// The UTC timestamp when the operation began.
func (o LastPatchInstallationSummaryResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The person or system account that started the operation
func (o LastPatchInstallationSummaryResponsePtrOutput) StartedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartedBy
	}).(pulumi.StringPtrOutput)
}

// The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Failed", "Succeeded", or "CompletedWithWarnings."
func (o LastPatchInstallationSummaryResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json) <br><br> For running non-endorsed distributions, see [Information for Non-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
type LinuxConfiguration struct {
	// Specifies whether password authentication should be disabled.
	DisablePasswordAuthentication *bool `pulumi:"disablePasswordAuthentication"`
	// Indicates whether virtual machine agent should be provisioned on the virtual machine. <br><br> When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
	ProvisionVMAgent *bool `pulumi:"provisionVMAgent"`
	// Specifies the ssh key configuration for a Linux OS.
	Ssh *SshConfiguration `pulumi:"ssh"`
}

// LinuxConfigurationInput is an input type that accepts LinuxConfigurationArgs and LinuxConfigurationOutput values.
// You can construct a concrete instance of `LinuxConfigurationInput` via:
//
//          LinuxConfigurationArgs{...}
type LinuxConfigurationInput interface {
	pulumi.Input

	ToLinuxConfigurationOutput() LinuxConfigurationOutput
	ToLinuxConfigurationOutputWithContext(context.Context) LinuxConfigurationOutput
}

// Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json) <br><br> For running non-endorsed distributions, see [Information for Non-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
type LinuxConfigurationArgs struct {
	// Specifies whether password authentication should be disabled.
	DisablePasswordAuthentication pulumi.BoolPtrInput `pulumi:"disablePasswordAuthentication"`
	// Indicates whether virtual machine agent should be provisioned on the virtual machine. <br><br> When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
	ProvisionVMAgent pulumi.BoolPtrInput `pulumi:"provisionVMAgent"`
	// Specifies the ssh key configuration for a Linux OS.
	Ssh SshConfigurationPtrInput `pulumi:"ssh"`
}

func (LinuxConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxConfiguration)(nil)).Elem()
}

func (i LinuxConfigurationArgs) ToLinuxConfigurationOutput() LinuxConfigurationOutput {
	return i.ToLinuxConfigurationOutputWithContext(context.Background())
}

func (i LinuxConfigurationArgs) ToLinuxConfigurationOutputWithContext(ctx context.Context) LinuxConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxConfigurationOutput)
}

func (i LinuxConfigurationArgs) ToLinuxConfigurationPtrOutput() LinuxConfigurationPtrOutput {
	return i.ToLinuxConfigurationPtrOutputWithContext(context.Background())
}

func (i LinuxConfigurationArgs) ToLinuxConfigurationPtrOutputWithContext(ctx context.Context) LinuxConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxConfigurationOutput).ToLinuxConfigurationPtrOutputWithContext(ctx)
}

// LinuxConfigurationPtrInput is an input type that accepts LinuxConfigurationArgs, LinuxConfigurationPtr and LinuxConfigurationPtrOutput values.
// You can construct a concrete instance of `LinuxConfigurationPtrInput` via:
//
//          LinuxConfigurationArgs{...}
//
//  or:
//
//          nil
type LinuxConfigurationPtrInput interface {
	pulumi.Input

	ToLinuxConfigurationPtrOutput() LinuxConfigurationPtrOutput
	ToLinuxConfigurationPtrOutputWithContext(context.Context) LinuxConfigurationPtrOutput
}

type linuxConfigurationPtrType LinuxConfigurationArgs

func LinuxConfigurationPtr(v *LinuxConfigurationArgs) LinuxConfigurationPtrInput {
	return (*linuxConfigurationPtrType)(v)
}

func (*linuxConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxConfiguration)(nil)).Elem()
}

func (i *linuxConfigurationPtrType) ToLinuxConfigurationPtrOutput() LinuxConfigurationPtrOutput {
	return i.ToLinuxConfigurationPtrOutputWithContext(context.Background())
}

func (i *linuxConfigurationPtrType) ToLinuxConfigurationPtrOutputWithContext(ctx context.Context) LinuxConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxConfigurationPtrOutput)
}

// Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json) <br><br> For running non-endorsed distributions, see [Information for Non-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
type LinuxConfigurationResponse struct {
	// Specifies whether password authentication should be disabled.
	DisablePasswordAuthentication *bool `pulumi:"disablePasswordAuthentication"`
	// Indicates whether virtual machine agent should be provisioned on the virtual machine. <br><br> When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
	ProvisionVMAgent *bool `pulumi:"provisionVMAgent"`
	// Specifies the ssh key configuration for a Linux OS.
	Ssh *SshConfigurationResponse `pulumi:"ssh"`
}

// Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json) <br><br> For running non-endorsed distributions, see [Information for Non-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
type LinuxConfigurationResponseOutput struct{ *pulumi.OutputState }

func (LinuxConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxConfigurationResponse)(nil)).Elem()
}

func (o LinuxConfigurationResponseOutput) ToLinuxConfigurationResponseOutput() LinuxConfigurationResponseOutput {
	return o
}

func (o LinuxConfigurationResponseOutput) ToLinuxConfigurationResponseOutputWithContext(ctx context.Context) LinuxConfigurationResponseOutput {
	return o
}

func (o LinuxConfigurationResponseOutput) ToLinuxConfigurationResponsePtrOutput() LinuxConfigurationResponsePtrOutput {
	return o.ToLinuxConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o LinuxConfigurationResponseOutput) ToLinuxConfigurationResponsePtrOutputWithContext(ctx context.Context) LinuxConfigurationResponsePtrOutput {
	return o.ApplyT(func(v LinuxConfigurationResponse) *LinuxConfigurationResponse {
		return &v
	}).(LinuxConfigurationResponsePtrOutput)
}

// Specifies whether password authentication should be disabled.
func (o LinuxConfigurationResponseOutput) DisablePasswordAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LinuxConfigurationResponse) *bool { return v.DisablePasswordAuthentication }).(pulumi.BoolPtrOutput)
}

// Indicates whether virtual machine agent should be provisioned on the virtual machine. <br><br> When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
func (o LinuxConfigurationResponseOutput) ProvisionVMAgent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LinuxConfigurationResponse) *bool { return v.ProvisionVMAgent }).(pulumi.BoolPtrOutput)
}

// Specifies the ssh key configuration for a Linux OS.
func (o LinuxConfigurationResponseOutput) Ssh() SshConfigurationResponsePtrOutput {
	return o.ApplyT(func(v LinuxConfigurationResponse) *SshConfigurationResponse { return v.Ssh }).(SshConfigurationResponsePtrOutput)
}

type LinuxConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (LinuxConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxConfigurationResponse)(nil)).Elem()
}

func (o LinuxConfigurationResponsePtrOutput) ToLinuxConfigurationResponsePtrOutput() LinuxConfigurationResponsePtrOutput {
	return o
}

func (o LinuxConfigurationResponsePtrOutput) ToLinuxConfigurationResponsePtrOutputWithContext(ctx context.Context) LinuxConfigurationResponsePtrOutput {
	return o
}

func (o LinuxConfigurationResponsePtrOutput) Elem() LinuxConfigurationResponseOutput {
	return o.ApplyT(func(v *LinuxConfigurationResponse) LinuxConfigurationResponse { return *v }).(LinuxConfigurationResponseOutput)
}

// Specifies whether password authentication should be disabled.
func (o LinuxConfigurationResponsePtrOutput) DisablePasswordAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.DisablePasswordAuthentication
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether virtual machine agent should be provisioned on the virtual machine. <br><br> When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
func (o LinuxConfigurationResponsePtrOutput) ProvisionVMAgent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ProvisionVMAgent
	}).(pulumi.BoolPtrOutput)
}

// Specifies the ssh key configuration for a Linux OS.
func (o LinuxConfigurationResponsePtrOutput) Ssh() SshConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *LinuxConfigurationResponse) *SshConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Ssh
	}).(SshConfigurationResponsePtrOutput)
}

// Maintenance Operation Status.
type MaintenanceRedeployStatusResponse struct {
	// True, if customer is allowed to perform Maintenance.
	IsCustomerInitiatedMaintenanceAllowed *bool `pulumi:"isCustomerInitiatedMaintenanceAllowed"`
	// Message returned for the last Maintenance Operation.
	LastOperationMessage *string `pulumi:"lastOperationMessage"`
	// The Last Maintenance Operation Result Code.
	LastOperationResultCode *string `pulumi:"lastOperationResultCode"`
	// End Time for the Maintenance Window.
	MaintenanceWindowEndTime *string `pulumi:"maintenanceWindowEndTime"`
	// Start Time for the Maintenance Window.
	MaintenanceWindowStartTime *string `pulumi:"maintenanceWindowStartTime"`
	// End Time for the Pre Maintenance Window.
	PreMaintenanceWindowEndTime *string `pulumi:"preMaintenanceWindowEndTime"`
	// Start Time for the Pre Maintenance Window.
	PreMaintenanceWindowStartTime *string `pulumi:"preMaintenanceWindowStartTime"`
}

// Maintenance Operation Status.
type MaintenanceRedeployStatusResponseOutput struct{ *pulumi.OutputState }

func (MaintenanceRedeployStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceRedeployStatusResponse)(nil)).Elem()
}

func (o MaintenanceRedeployStatusResponseOutput) ToMaintenanceRedeployStatusResponseOutput() MaintenanceRedeployStatusResponseOutput {
	return o
}

func (o MaintenanceRedeployStatusResponseOutput) ToMaintenanceRedeployStatusResponseOutputWithContext(ctx context.Context) MaintenanceRedeployStatusResponseOutput {
	return o
}

func (o MaintenanceRedeployStatusResponseOutput) ToMaintenanceRedeployStatusResponsePtrOutput() MaintenanceRedeployStatusResponsePtrOutput {
	return o.ToMaintenanceRedeployStatusResponsePtrOutputWithContext(context.Background())
}

func (o MaintenanceRedeployStatusResponseOutput) ToMaintenanceRedeployStatusResponsePtrOutputWithContext(ctx context.Context) MaintenanceRedeployStatusResponsePtrOutput {
	return o.ApplyT(func(v MaintenanceRedeployStatusResponse) *MaintenanceRedeployStatusResponse {
		return &v
	}).(MaintenanceRedeployStatusResponsePtrOutput)
}

// True, if customer is allowed to perform Maintenance.
func (o MaintenanceRedeployStatusResponseOutput) IsCustomerInitiatedMaintenanceAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MaintenanceRedeployStatusResponse) *bool { return v.IsCustomerInitiatedMaintenanceAllowed }).(pulumi.BoolPtrOutput)
}

// Message returned for the last Maintenance Operation.
func (o MaintenanceRedeployStatusResponseOutput) LastOperationMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceRedeployStatusResponse) *string { return v.LastOperationMessage }).(pulumi.StringPtrOutput)
}

// The Last Maintenance Operation Result Code.
func (o MaintenanceRedeployStatusResponseOutput) LastOperationResultCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceRedeployStatusResponse) *string { return v.LastOperationResultCode }).(pulumi.StringPtrOutput)
}

// End Time for the Maintenance Window.
func (o MaintenanceRedeployStatusResponseOutput) MaintenanceWindowEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceRedeployStatusResponse) *string { return v.MaintenanceWindowEndTime }).(pulumi.StringPtrOutput)
}

// Start Time for the Maintenance Window.
func (o MaintenanceRedeployStatusResponseOutput) MaintenanceWindowStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceRedeployStatusResponse) *string { return v.MaintenanceWindowStartTime }).(pulumi.StringPtrOutput)
}

// End Time for the Pre Maintenance Window.
func (o MaintenanceRedeployStatusResponseOutput) PreMaintenanceWindowEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceRedeployStatusResponse) *string { return v.PreMaintenanceWindowEndTime }).(pulumi.StringPtrOutput)
}

// Start Time for the Pre Maintenance Window.
func (o MaintenanceRedeployStatusResponseOutput) PreMaintenanceWindowStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceRedeployStatusResponse) *string { return v.PreMaintenanceWindowStartTime }).(pulumi.StringPtrOutput)
}

type MaintenanceRedeployStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (MaintenanceRedeployStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceRedeployStatusResponse)(nil)).Elem()
}

func (o MaintenanceRedeployStatusResponsePtrOutput) ToMaintenanceRedeployStatusResponsePtrOutput() MaintenanceRedeployStatusResponsePtrOutput {
	return o
}

func (o MaintenanceRedeployStatusResponsePtrOutput) ToMaintenanceRedeployStatusResponsePtrOutputWithContext(ctx context.Context) MaintenanceRedeployStatusResponsePtrOutput {
	return o
}

func (o MaintenanceRedeployStatusResponsePtrOutput) Elem() MaintenanceRedeployStatusResponseOutput {
	return o.ApplyT(func(v *MaintenanceRedeployStatusResponse) MaintenanceRedeployStatusResponse { return *v }).(MaintenanceRedeployStatusResponseOutput)
}

// True, if customer is allowed to perform Maintenance.
func (o MaintenanceRedeployStatusResponsePtrOutput) IsCustomerInitiatedMaintenanceAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MaintenanceRedeployStatusResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsCustomerInitiatedMaintenanceAllowed
	}).(pulumi.BoolPtrOutput)
}

// Message returned for the last Maintenance Operation.
func (o MaintenanceRedeployStatusResponsePtrOutput) LastOperationMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceRedeployStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastOperationMessage
	}).(pulumi.StringPtrOutput)
}

// The Last Maintenance Operation Result Code.
func (o MaintenanceRedeployStatusResponsePtrOutput) LastOperationResultCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceRedeployStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastOperationResultCode
	}).(pulumi.StringPtrOutput)
}

// End Time for the Maintenance Window.
func (o MaintenanceRedeployStatusResponsePtrOutput) MaintenanceWindowEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceRedeployStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.MaintenanceWindowEndTime
	}).(pulumi.StringPtrOutput)
}

// Start Time for the Maintenance Window.
func (o MaintenanceRedeployStatusResponsePtrOutput) MaintenanceWindowStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceRedeployStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.MaintenanceWindowStartTime
	}).(pulumi.StringPtrOutput)
}

// End Time for the Pre Maintenance Window.
func (o MaintenanceRedeployStatusResponsePtrOutput) PreMaintenanceWindowEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceRedeployStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.PreMaintenanceWindowEndTime
	}).(pulumi.StringPtrOutput)
}

// Start Time for the Pre Maintenance Window.
func (o MaintenanceRedeployStatusResponsePtrOutput) PreMaintenanceWindowStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceRedeployStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.PreMaintenanceWindowStartTime
	}).(pulumi.StringPtrOutput)
}

// The parameters of a managed disk.
type ManagedDiskParameters struct {
	// Specifies the customer managed disk encryption set resource id for the managed disk.
	DiskEncryptionSet *DiskEncryptionSetParameters `pulumi:"diskEncryptionSet"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// ManagedDiskParametersInput is an input type that accepts ManagedDiskParametersArgs and ManagedDiskParametersOutput values.
// You can construct a concrete instance of `ManagedDiskParametersInput` via:
//
//          ManagedDiskParametersArgs{...}
type ManagedDiskParametersInput interface {
	pulumi.Input

	ToManagedDiskParametersOutput() ManagedDiskParametersOutput
	ToManagedDiskParametersOutputWithContext(context.Context) ManagedDiskParametersOutput
}

// The parameters of a managed disk.
type ManagedDiskParametersArgs struct {
	// Specifies the customer managed disk encryption set resource id for the managed disk.
	DiskEncryptionSet DiskEncryptionSetParametersPtrInput `pulumi:"diskEncryptionSet"`
	// Resource Id
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType pulumi.StringPtrInput `pulumi:"storageAccountType"`
}

func (ManagedDiskParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedDiskParameters)(nil)).Elem()
}

func (i ManagedDiskParametersArgs) ToManagedDiskParametersOutput() ManagedDiskParametersOutput {
	return i.ToManagedDiskParametersOutputWithContext(context.Background())
}

func (i ManagedDiskParametersArgs) ToManagedDiskParametersOutputWithContext(ctx context.Context) ManagedDiskParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedDiskParametersOutput)
}

func (i ManagedDiskParametersArgs) ToManagedDiskParametersPtrOutput() ManagedDiskParametersPtrOutput {
	return i.ToManagedDiskParametersPtrOutputWithContext(context.Background())
}

func (i ManagedDiskParametersArgs) ToManagedDiskParametersPtrOutputWithContext(ctx context.Context) ManagedDiskParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedDiskParametersOutput).ToManagedDiskParametersPtrOutputWithContext(ctx)
}

// ManagedDiskParametersPtrInput is an input type that accepts ManagedDiskParametersArgs, ManagedDiskParametersPtr and ManagedDiskParametersPtrOutput values.
// You can construct a concrete instance of `ManagedDiskParametersPtrInput` via:
//
//          ManagedDiskParametersArgs{...}
//
//  or:
//
//          nil
type ManagedDiskParametersPtrInput interface {
	pulumi.Input

	ToManagedDiskParametersPtrOutput() ManagedDiskParametersPtrOutput
	ToManagedDiskParametersPtrOutputWithContext(context.Context) ManagedDiskParametersPtrOutput
}

type managedDiskParametersPtrType ManagedDiskParametersArgs

func ManagedDiskParametersPtr(v *ManagedDiskParametersArgs) ManagedDiskParametersPtrInput {
	return (*managedDiskParametersPtrType)(v)
}

func (*managedDiskParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedDiskParameters)(nil)).Elem()
}

func (i *managedDiskParametersPtrType) ToManagedDiskParametersPtrOutput() ManagedDiskParametersPtrOutput {
	return i.ToManagedDiskParametersPtrOutputWithContext(context.Background())
}

func (i *managedDiskParametersPtrType) ToManagedDiskParametersPtrOutputWithContext(ctx context.Context) ManagedDiskParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedDiskParametersPtrOutput)
}

// The parameters of a managed disk.
type ManagedDiskParametersResponse struct {
	// Specifies the customer managed disk encryption set resource id for the managed disk.
	DiskEncryptionSet *DiskEncryptionSetParametersResponse `pulumi:"diskEncryptionSet"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// The parameters of a managed disk.
type ManagedDiskParametersResponseOutput struct{ *pulumi.OutputState }

func (ManagedDiskParametersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedDiskParametersResponse)(nil)).Elem()
}

func (o ManagedDiskParametersResponseOutput) ToManagedDiskParametersResponseOutput() ManagedDiskParametersResponseOutput {
	return o
}

func (o ManagedDiskParametersResponseOutput) ToManagedDiskParametersResponseOutputWithContext(ctx context.Context) ManagedDiskParametersResponseOutput {
	return o
}

func (o ManagedDiskParametersResponseOutput) ToManagedDiskParametersResponsePtrOutput() ManagedDiskParametersResponsePtrOutput {
	return o.ToManagedDiskParametersResponsePtrOutputWithContext(context.Background())
}

func (o ManagedDiskParametersResponseOutput) ToManagedDiskParametersResponsePtrOutputWithContext(ctx context.Context) ManagedDiskParametersResponsePtrOutput {
	return o.ApplyT(func(v ManagedDiskParametersResponse) *ManagedDiskParametersResponse {
		return &v
	}).(ManagedDiskParametersResponsePtrOutput)
}

// Specifies the customer managed disk encryption set resource id for the managed disk.
func (o ManagedDiskParametersResponseOutput) DiskEncryptionSet() DiskEncryptionSetParametersResponsePtrOutput {
	return o.ApplyT(func(v ManagedDiskParametersResponse) *DiskEncryptionSetParametersResponse { return v.DiskEncryptionSet }).(DiskEncryptionSetParametersResponsePtrOutput)
}

// Resource Id
func (o ManagedDiskParametersResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedDiskParametersResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
func (o ManagedDiskParametersResponseOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedDiskParametersResponse) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type ManagedDiskParametersResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedDiskParametersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedDiskParametersResponse)(nil)).Elem()
}

func (o ManagedDiskParametersResponsePtrOutput) ToManagedDiskParametersResponsePtrOutput() ManagedDiskParametersResponsePtrOutput {
	return o
}

func (o ManagedDiskParametersResponsePtrOutput) ToManagedDiskParametersResponsePtrOutputWithContext(ctx context.Context) ManagedDiskParametersResponsePtrOutput {
	return o
}

func (o ManagedDiskParametersResponsePtrOutput) Elem() ManagedDiskParametersResponseOutput {
	return o.ApplyT(func(v *ManagedDiskParametersResponse) ManagedDiskParametersResponse { return *v }).(ManagedDiskParametersResponseOutput)
}

// Specifies the customer managed disk encryption set resource id for the managed disk.
func (o ManagedDiskParametersResponsePtrOutput) DiskEncryptionSet() DiskEncryptionSetParametersResponsePtrOutput {
	return o.ApplyT(func(v *ManagedDiskParametersResponse) *DiskEncryptionSetParametersResponse {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionSet
	}).(DiskEncryptionSetParametersResponsePtrOutput)
}

// Resource Id
func (o ManagedDiskParametersResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedDiskParametersResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
func (o ManagedDiskParametersResponsePtrOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedDiskParametersResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountType
	}).(pulumi.StringPtrOutput)
}

// Describes a network interface reference.
type NetworkInterfaceReference struct {
	// Resource Id
	Id *string `pulumi:"id"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool `pulumi:"primary"`
}

// NetworkInterfaceReferenceInput is an input type that accepts NetworkInterfaceReferenceArgs and NetworkInterfaceReferenceOutput values.
// You can construct a concrete instance of `NetworkInterfaceReferenceInput` via:
//
//          NetworkInterfaceReferenceArgs{...}
type NetworkInterfaceReferenceInput interface {
	pulumi.Input

	ToNetworkInterfaceReferenceOutput() NetworkInterfaceReferenceOutput
	ToNetworkInterfaceReferenceOutputWithContext(context.Context) NetworkInterfaceReferenceOutput
}

// Describes a network interface reference.
type NetworkInterfaceReferenceArgs struct {
	// Resource Id
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary pulumi.BoolPtrInput `pulumi:"primary"`
}

func (NetworkInterfaceReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceReference)(nil)).Elem()
}

func (i NetworkInterfaceReferenceArgs) ToNetworkInterfaceReferenceOutput() NetworkInterfaceReferenceOutput {
	return i.ToNetworkInterfaceReferenceOutputWithContext(context.Background())
}

func (i NetworkInterfaceReferenceArgs) ToNetworkInterfaceReferenceOutputWithContext(ctx context.Context) NetworkInterfaceReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceReferenceOutput)
}

// NetworkInterfaceReferenceArrayInput is an input type that accepts NetworkInterfaceReferenceArray and NetworkInterfaceReferenceArrayOutput values.
// You can construct a concrete instance of `NetworkInterfaceReferenceArrayInput` via:
//
//          NetworkInterfaceReferenceArray{ NetworkInterfaceReferenceArgs{...} }
type NetworkInterfaceReferenceArrayInput interface {
	pulumi.Input

	ToNetworkInterfaceReferenceArrayOutput() NetworkInterfaceReferenceArrayOutput
	ToNetworkInterfaceReferenceArrayOutputWithContext(context.Context) NetworkInterfaceReferenceArrayOutput
}

type NetworkInterfaceReferenceArray []NetworkInterfaceReferenceInput

func (NetworkInterfaceReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterfaceReference)(nil)).Elem()
}

func (i NetworkInterfaceReferenceArray) ToNetworkInterfaceReferenceArrayOutput() NetworkInterfaceReferenceArrayOutput {
	return i.ToNetworkInterfaceReferenceArrayOutputWithContext(context.Background())
}

func (i NetworkInterfaceReferenceArray) ToNetworkInterfaceReferenceArrayOutputWithContext(ctx context.Context) NetworkInterfaceReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceReferenceArrayOutput)
}

// Describes a network interface reference.
type NetworkInterfaceReferenceResponse struct {
	// Resource Id
	Id *string `pulumi:"id"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool `pulumi:"primary"`
}

// Describes a network interface reference.
type NetworkInterfaceReferenceResponseOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceReferenceResponse)(nil)).Elem()
}

func (o NetworkInterfaceReferenceResponseOutput) ToNetworkInterfaceReferenceResponseOutput() NetworkInterfaceReferenceResponseOutput {
	return o
}

func (o NetworkInterfaceReferenceResponseOutput) ToNetworkInterfaceReferenceResponseOutputWithContext(ctx context.Context) NetworkInterfaceReferenceResponseOutput {
	return o
}

// Resource Id
func (o NetworkInterfaceReferenceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterfaceReferenceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
func (o NetworkInterfaceReferenceResponseOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkInterfaceReferenceResponse) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

type NetworkInterfaceReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterfaceReferenceResponse)(nil)).Elem()
}

func (o NetworkInterfaceReferenceResponseArrayOutput) ToNetworkInterfaceReferenceResponseArrayOutput() NetworkInterfaceReferenceResponseArrayOutput {
	return o
}

func (o NetworkInterfaceReferenceResponseArrayOutput) ToNetworkInterfaceReferenceResponseArrayOutputWithContext(ctx context.Context) NetworkInterfaceReferenceResponseArrayOutput {
	return o
}

func (o NetworkInterfaceReferenceResponseArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkInterfaceReferenceResponse {
		return vs[0].([]NetworkInterfaceReferenceResponse)[vs[1].(int)]
	}).(NetworkInterfaceReferenceResponseOutput)
}

// Specifies the network interfaces of the virtual machine.
type NetworkProfile struct {
	// Specifies the list of resource Ids for the network interfaces associated with the virtual machine.
	NetworkInterfaces []NetworkInterfaceReference `pulumi:"networkInterfaces"`
}

// NetworkProfileInput is an input type that accepts NetworkProfileArgs and NetworkProfileOutput values.
// You can construct a concrete instance of `NetworkProfileInput` via:
//
//          NetworkProfileArgs{...}
type NetworkProfileInput interface {
	pulumi.Input

	ToNetworkProfileOutput() NetworkProfileOutput
	ToNetworkProfileOutputWithContext(context.Context) NetworkProfileOutput
}

// Specifies the network interfaces of the virtual machine.
type NetworkProfileArgs struct {
	// Specifies the list of resource Ids for the network interfaces associated with the virtual machine.
	NetworkInterfaces NetworkInterfaceReferenceArrayInput `pulumi:"networkInterfaces"`
}

func (NetworkProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkProfile)(nil)).Elem()
}

func (i NetworkProfileArgs) ToNetworkProfileOutput() NetworkProfileOutput {
	return i.ToNetworkProfileOutputWithContext(context.Background())
}

func (i NetworkProfileArgs) ToNetworkProfileOutputWithContext(ctx context.Context) NetworkProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkProfileOutput)
}

func (i NetworkProfileArgs) ToNetworkProfilePtrOutput() NetworkProfilePtrOutput {
	return i.ToNetworkProfilePtrOutputWithContext(context.Background())
}

func (i NetworkProfileArgs) ToNetworkProfilePtrOutputWithContext(ctx context.Context) NetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkProfileOutput).ToNetworkProfilePtrOutputWithContext(ctx)
}

// NetworkProfilePtrInput is an input type that accepts NetworkProfileArgs, NetworkProfilePtr and NetworkProfilePtrOutput values.
// You can construct a concrete instance of `NetworkProfilePtrInput` via:
//
//          NetworkProfileArgs{...}
//
//  or:
//
//          nil
type NetworkProfilePtrInput interface {
	pulumi.Input

	ToNetworkProfilePtrOutput() NetworkProfilePtrOutput
	ToNetworkProfilePtrOutputWithContext(context.Context) NetworkProfilePtrOutput
}

type networkProfilePtrType NetworkProfileArgs

func NetworkProfilePtr(v *NetworkProfileArgs) NetworkProfilePtrInput {
	return (*networkProfilePtrType)(v)
}

func (*networkProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkProfile)(nil)).Elem()
}

func (i *networkProfilePtrType) ToNetworkProfilePtrOutput() NetworkProfilePtrOutput {
	return i.ToNetworkProfilePtrOutputWithContext(context.Background())
}

func (i *networkProfilePtrType) ToNetworkProfilePtrOutputWithContext(ctx context.Context) NetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkProfilePtrOutput)
}

// Specifies the network interfaces of the virtual machine.
type NetworkProfileResponse struct {
	// Specifies the list of resource Ids for the network interfaces associated with the virtual machine.
	NetworkInterfaces []NetworkInterfaceReferenceResponse `pulumi:"networkInterfaces"`
}

// Specifies the network interfaces of the virtual machine.
type NetworkProfileResponseOutput struct{ *pulumi.OutputState }

func (NetworkProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkProfileResponse)(nil)).Elem()
}

func (o NetworkProfileResponseOutput) ToNetworkProfileResponseOutput() NetworkProfileResponseOutput {
	return o
}

func (o NetworkProfileResponseOutput) ToNetworkProfileResponseOutputWithContext(ctx context.Context) NetworkProfileResponseOutput {
	return o
}

func (o NetworkProfileResponseOutput) ToNetworkProfileResponsePtrOutput() NetworkProfileResponsePtrOutput {
	return o.ToNetworkProfileResponsePtrOutputWithContext(context.Background())
}

func (o NetworkProfileResponseOutput) ToNetworkProfileResponsePtrOutputWithContext(ctx context.Context) NetworkProfileResponsePtrOutput {
	return o.ApplyT(func(v NetworkProfileResponse) *NetworkProfileResponse {
		return &v
	}).(NetworkProfileResponsePtrOutput)
}

// Specifies the list of resource Ids for the network interfaces associated with the virtual machine.
func (o NetworkProfileResponseOutput) NetworkInterfaces() NetworkInterfaceReferenceResponseArrayOutput {
	return o.ApplyT(func(v NetworkProfileResponse) []NetworkInterfaceReferenceResponse { return v.NetworkInterfaces }).(NetworkInterfaceReferenceResponseArrayOutput)
}

type NetworkProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (NetworkProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkProfileResponse)(nil)).Elem()
}

func (o NetworkProfileResponsePtrOutput) ToNetworkProfileResponsePtrOutput() NetworkProfileResponsePtrOutput {
	return o
}

func (o NetworkProfileResponsePtrOutput) ToNetworkProfileResponsePtrOutputWithContext(ctx context.Context) NetworkProfileResponsePtrOutput {
	return o
}

func (o NetworkProfileResponsePtrOutput) Elem() NetworkProfileResponseOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) NetworkProfileResponse { return *v }).(NetworkProfileResponseOutput)
}

// Specifies the list of resource Ids for the network interfaces associated with the virtual machine.
func (o NetworkProfileResponsePtrOutput) NetworkInterfaces() NetworkInterfaceReferenceResponseArrayOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) []NetworkInterfaceReferenceResponse {
		if v == nil {
			return nil
		}
		return v.NetworkInterfaces
	}).(NetworkInterfaceReferenceResponseArrayOutput)
}

// Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
type OSDisk struct {
	// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None** for Standard storage. **ReadOnly** for Premium storage.
	Caching *string `pulumi:"caching"`
	// Specifies how the virtual machine should be created.<br><br> Possible values are:<br><br> **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.<br><br> **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
	CreateOption string `pulumi:"createOption"`
	// Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine.
	DiffDiskSettings *DiffDiskSettings `pulumi:"diffDiskSettings"`
	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// Specifies the encryption settings for the OS Disk. <br><br> Minimum api-version: 2015-06-15
	EncryptionSettings *DiskEncryptionSettings `pulumi:"encryptionSettings"`
	// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
	Image *VirtualHardDisk `pulumi:"image"`
	// The managed disk parameters.
	ManagedDisk *ManagedDiskParameters `pulumi:"managedDisk"`
	// The disk name.
	Name *string `pulumi:"name"`
	// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
	OsType *string `pulumi:"osType"`
	// The virtual hard disk.
	Vhd *VirtualHardDisk `pulumi:"vhd"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool `pulumi:"writeAcceleratorEnabled"`
}

// OSDiskInput is an input type that accepts OSDiskArgs and OSDiskOutput values.
// You can construct a concrete instance of `OSDiskInput` via:
//
//          OSDiskArgs{...}
type OSDiskInput interface {
	pulumi.Input

	ToOSDiskOutput() OSDiskOutput
	ToOSDiskOutputWithContext(context.Context) OSDiskOutput
}

// Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
type OSDiskArgs struct {
	// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None** for Standard storage. **ReadOnly** for Premium storage.
	Caching pulumi.StringPtrInput `pulumi:"caching"`
	// Specifies how the virtual machine should be created.<br><br> Possible values are:<br><br> **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.<br><br> **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
	CreateOption pulumi.StringInput `pulumi:"createOption"`
	// Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine.
	DiffDiskSettings DiffDiskSettingsPtrInput `pulumi:"diffDiskSettings"`
	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
	DiskSizeGB pulumi.IntPtrInput `pulumi:"diskSizeGB"`
	// Specifies the encryption settings for the OS Disk. <br><br> Minimum api-version: 2015-06-15
	EncryptionSettings DiskEncryptionSettingsPtrInput `pulumi:"encryptionSettings"`
	// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
	Image VirtualHardDiskPtrInput `pulumi:"image"`
	// The managed disk parameters.
	ManagedDisk ManagedDiskParametersPtrInput `pulumi:"managedDisk"`
	// The disk name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
	OsType pulumi.StringPtrInput `pulumi:"osType"`
	// The virtual hard disk.
	Vhd VirtualHardDiskPtrInput `pulumi:"vhd"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled pulumi.BoolPtrInput `pulumi:"writeAcceleratorEnabled"`
}

func (OSDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSDisk)(nil)).Elem()
}

func (i OSDiskArgs) ToOSDiskOutput() OSDiskOutput {
	return i.ToOSDiskOutputWithContext(context.Background())
}

func (i OSDiskArgs) ToOSDiskOutputWithContext(ctx context.Context) OSDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSDiskOutput)
}

func (i OSDiskArgs) ToOSDiskPtrOutput() OSDiskPtrOutput {
	return i.ToOSDiskPtrOutputWithContext(context.Background())
}

func (i OSDiskArgs) ToOSDiskPtrOutputWithContext(ctx context.Context) OSDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSDiskOutput).ToOSDiskPtrOutputWithContext(ctx)
}

// OSDiskPtrInput is an input type that accepts OSDiskArgs, OSDiskPtr and OSDiskPtrOutput values.
// You can construct a concrete instance of `OSDiskPtrInput` via:
//
//          OSDiskArgs{...}
//
//  or:
//
//          nil
type OSDiskPtrInput interface {
	pulumi.Input

	ToOSDiskPtrOutput() OSDiskPtrOutput
	ToOSDiskPtrOutputWithContext(context.Context) OSDiskPtrOutput
}

type osdiskPtrType OSDiskArgs

func OSDiskPtr(v *OSDiskArgs) OSDiskPtrInput {
	return (*osdiskPtrType)(v)
}

func (*osdiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSDisk)(nil)).Elem()
}

func (i *osdiskPtrType) ToOSDiskPtrOutput() OSDiskPtrOutput {
	return i.ToOSDiskPtrOutputWithContext(context.Background())
}

func (i *osdiskPtrType) ToOSDiskPtrOutputWithContext(ctx context.Context) OSDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSDiskPtrOutput)
}

// Contains encryption settings for an OS disk image.
type OSDiskImageEncryption struct {
	// A relative URI containing the resource ID of the disk encryption set.
	DiskEncryptionSetId *string `pulumi:"diskEncryptionSetId"`
}

// OSDiskImageEncryptionInput is an input type that accepts OSDiskImageEncryptionArgs and OSDiskImageEncryptionOutput values.
// You can construct a concrete instance of `OSDiskImageEncryptionInput` via:
//
//          OSDiskImageEncryptionArgs{...}
type OSDiskImageEncryptionInput interface {
	pulumi.Input

	ToOSDiskImageEncryptionOutput() OSDiskImageEncryptionOutput
	ToOSDiskImageEncryptionOutputWithContext(context.Context) OSDiskImageEncryptionOutput
}

// Contains encryption settings for an OS disk image.
type OSDiskImageEncryptionArgs struct {
	// A relative URI containing the resource ID of the disk encryption set.
	DiskEncryptionSetId pulumi.StringPtrInput `pulumi:"diskEncryptionSetId"`
}

func (OSDiskImageEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSDiskImageEncryption)(nil)).Elem()
}

func (i OSDiskImageEncryptionArgs) ToOSDiskImageEncryptionOutput() OSDiskImageEncryptionOutput {
	return i.ToOSDiskImageEncryptionOutputWithContext(context.Background())
}

func (i OSDiskImageEncryptionArgs) ToOSDiskImageEncryptionOutputWithContext(ctx context.Context) OSDiskImageEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSDiskImageEncryptionOutput)
}

func (i OSDiskImageEncryptionArgs) ToOSDiskImageEncryptionPtrOutput() OSDiskImageEncryptionPtrOutput {
	return i.ToOSDiskImageEncryptionPtrOutputWithContext(context.Background())
}

func (i OSDiskImageEncryptionArgs) ToOSDiskImageEncryptionPtrOutputWithContext(ctx context.Context) OSDiskImageEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSDiskImageEncryptionOutput).ToOSDiskImageEncryptionPtrOutputWithContext(ctx)
}

// OSDiskImageEncryptionPtrInput is an input type that accepts OSDiskImageEncryptionArgs, OSDiskImageEncryptionPtr and OSDiskImageEncryptionPtrOutput values.
// You can construct a concrete instance of `OSDiskImageEncryptionPtrInput` via:
//
//          OSDiskImageEncryptionArgs{...}
//
//  or:
//
//          nil
type OSDiskImageEncryptionPtrInput interface {
	pulumi.Input

	ToOSDiskImageEncryptionPtrOutput() OSDiskImageEncryptionPtrOutput
	ToOSDiskImageEncryptionPtrOutputWithContext(context.Context) OSDiskImageEncryptionPtrOutput
}

type osdiskImageEncryptionPtrType OSDiskImageEncryptionArgs

func OSDiskImageEncryptionPtr(v *OSDiskImageEncryptionArgs) OSDiskImageEncryptionPtrInput {
	return (*osdiskImageEncryptionPtrType)(v)
}

func (*osdiskImageEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSDiskImageEncryption)(nil)).Elem()
}

func (i *osdiskImageEncryptionPtrType) ToOSDiskImageEncryptionPtrOutput() OSDiskImageEncryptionPtrOutput {
	return i.ToOSDiskImageEncryptionPtrOutputWithContext(context.Background())
}

func (i *osdiskImageEncryptionPtrType) ToOSDiskImageEncryptionPtrOutputWithContext(ctx context.Context) OSDiskImageEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSDiskImageEncryptionPtrOutput)
}

// Contains encryption settings for an OS disk image.
type OSDiskImageEncryptionResponse struct {
	// A relative URI containing the resource ID of the disk encryption set.
	DiskEncryptionSetId *string `pulumi:"diskEncryptionSetId"`
}

// Contains encryption settings for an OS disk image.
type OSDiskImageEncryptionResponseOutput struct{ *pulumi.OutputState }

func (OSDiskImageEncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSDiskImageEncryptionResponse)(nil)).Elem()
}

func (o OSDiskImageEncryptionResponseOutput) ToOSDiskImageEncryptionResponseOutput() OSDiskImageEncryptionResponseOutput {
	return o
}

func (o OSDiskImageEncryptionResponseOutput) ToOSDiskImageEncryptionResponseOutputWithContext(ctx context.Context) OSDiskImageEncryptionResponseOutput {
	return o
}

func (o OSDiskImageEncryptionResponseOutput) ToOSDiskImageEncryptionResponsePtrOutput() OSDiskImageEncryptionResponsePtrOutput {
	return o.ToOSDiskImageEncryptionResponsePtrOutputWithContext(context.Background())
}

func (o OSDiskImageEncryptionResponseOutput) ToOSDiskImageEncryptionResponsePtrOutputWithContext(ctx context.Context) OSDiskImageEncryptionResponsePtrOutput {
	return o.ApplyT(func(v OSDiskImageEncryptionResponse) *OSDiskImageEncryptionResponse {
		return &v
	}).(OSDiskImageEncryptionResponsePtrOutput)
}

// A relative URI containing the resource ID of the disk encryption set.
func (o OSDiskImageEncryptionResponseOutput) DiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSDiskImageEncryptionResponse) *string { return v.DiskEncryptionSetId }).(pulumi.StringPtrOutput)
}

type OSDiskImageEncryptionResponsePtrOutput struct{ *pulumi.OutputState }

func (OSDiskImageEncryptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSDiskImageEncryptionResponse)(nil)).Elem()
}

func (o OSDiskImageEncryptionResponsePtrOutput) ToOSDiskImageEncryptionResponsePtrOutput() OSDiskImageEncryptionResponsePtrOutput {
	return o
}

func (o OSDiskImageEncryptionResponsePtrOutput) ToOSDiskImageEncryptionResponsePtrOutputWithContext(ctx context.Context) OSDiskImageEncryptionResponsePtrOutput {
	return o
}

func (o OSDiskImageEncryptionResponsePtrOutput) Elem() OSDiskImageEncryptionResponseOutput {
	return o.ApplyT(func(v *OSDiskImageEncryptionResponse) OSDiskImageEncryptionResponse { return *v }).(OSDiskImageEncryptionResponseOutput)
}

// A relative URI containing the resource ID of the disk encryption set.
func (o OSDiskImageEncryptionResponsePtrOutput) DiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSDiskImageEncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionSetId
	}).(pulumi.StringPtrOutput)
}

// Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
type OSDiskResponse struct {
	// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None** for Standard storage. **ReadOnly** for Premium storage.
	Caching *string `pulumi:"caching"`
	// Specifies how the virtual machine should be created.<br><br> Possible values are:<br><br> **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.<br><br> **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
	CreateOption string `pulumi:"createOption"`
	// Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine.
	DiffDiskSettings *DiffDiskSettingsResponse `pulumi:"diffDiskSettings"`
	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// Specifies the encryption settings for the OS Disk. <br><br> Minimum api-version: 2015-06-15
	EncryptionSettings *DiskEncryptionSettingsResponse `pulumi:"encryptionSettings"`
	// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
	Image *VirtualHardDiskResponse `pulumi:"image"`
	// The managed disk parameters.
	ManagedDisk *ManagedDiskParametersResponse `pulumi:"managedDisk"`
	// The disk name.
	Name *string `pulumi:"name"`
	// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
	OsType *string `pulumi:"osType"`
	// The virtual hard disk.
	Vhd *VirtualHardDiskResponse `pulumi:"vhd"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool `pulumi:"writeAcceleratorEnabled"`
}

// Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
type OSDiskResponseOutput struct{ *pulumi.OutputState }

func (OSDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSDiskResponse)(nil)).Elem()
}

func (o OSDiskResponseOutput) ToOSDiskResponseOutput() OSDiskResponseOutput {
	return o
}

func (o OSDiskResponseOutput) ToOSDiskResponseOutputWithContext(ctx context.Context) OSDiskResponseOutput {
	return o
}

func (o OSDiskResponseOutput) ToOSDiskResponsePtrOutput() OSDiskResponsePtrOutput {
	return o.ToOSDiskResponsePtrOutputWithContext(context.Background())
}

func (o OSDiskResponseOutput) ToOSDiskResponsePtrOutputWithContext(ctx context.Context) OSDiskResponsePtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *OSDiskResponse {
		return &v
	}).(OSDiskResponsePtrOutput)
}

// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None** for Standard storage. **ReadOnly** for Premium storage.
func (o OSDiskResponseOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *string { return v.Caching }).(pulumi.StringPtrOutput)
}

// Specifies how the virtual machine should be created.<br><br> Possible values are:<br><br> **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.<br><br> **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
func (o OSDiskResponseOutput) CreateOption() pulumi.StringOutput {
	return o.ApplyT(func(v OSDiskResponse) string { return v.CreateOption }).(pulumi.StringOutput)
}

// Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine.
func (o OSDiskResponseOutput) DiffDiskSettings() DiffDiskSettingsResponsePtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *DiffDiskSettingsResponse { return v.DiffDiskSettings }).(DiffDiskSettingsResponsePtrOutput)
}

// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
func (o OSDiskResponseOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *int { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

// Specifies the encryption settings for the OS Disk. <br><br> Minimum api-version: 2015-06-15
func (o OSDiskResponseOutput) EncryptionSettings() DiskEncryptionSettingsResponsePtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *DiskEncryptionSettingsResponse { return v.EncryptionSettings }).(DiskEncryptionSettingsResponsePtrOutput)
}

// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
func (o OSDiskResponseOutput) Image() VirtualHardDiskResponsePtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *VirtualHardDiskResponse { return v.Image }).(VirtualHardDiskResponsePtrOutput)
}

// The managed disk parameters.
func (o OSDiskResponseOutput) ManagedDisk() ManagedDiskParametersResponsePtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *ManagedDiskParametersResponse { return v.ManagedDisk }).(ManagedDiskParametersResponsePtrOutput)
}

// The disk name.
func (o OSDiskResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
func (o OSDiskResponseOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// The virtual hard disk.
func (o OSDiskResponseOutput) Vhd() VirtualHardDiskResponsePtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *VirtualHardDiskResponse { return v.Vhd }).(VirtualHardDiskResponsePtrOutput)
}

// Specifies whether writeAccelerator should be enabled or disabled on the disk.
func (o OSDiskResponseOutput) WriteAcceleratorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *bool { return v.WriteAcceleratorEnabled }).(pulumi.BoolPtrOutput)
}

type OSDiskResponsePtrOutput struct{ *pulumi.OutputState }

func (OSDiskResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSDiskResponse)(nil)).Elem()
}

func (o OSDiskResponsePtrOutput) ToOSDiskResponsePtrOutput() OSDiskResponsePtrOutput {
	return o
}

func (o OSDiskResponsePtrOutput) ToOSDiskResponsePtrOutputWithContext(ctx context.Context) OSDiskResponsePtrOutput {
	return o
}

func (o OSDiskResponsePtrOutput) Elem() OSDiskResponseOutput {
	return o.ApplyT(func(v *OSDiskResponse) OSDiskResponse { return *v }).(OSDiskResponseOutput)
}

// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None** for Standard storage. **ReadOnly** for Premium storage.
func (o OSDiskResponsePtrOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.Caching
	}).(pulumi.StringPtrOutput)
}

// Specifies how the virtual machine should be created.<br><br> Possible values are:<br><br> **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.<br><br> **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
func (o OSDiskResponsePtrOutput) CreateOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreateOption
	}).(pulumi.StringPtrOutput)
}

// Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine.
func (o OSDiskResponsePtrOutput) DiffDiskSettings() DiffDiskSettingsResponsePtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *DiffDiskSettingsResponse {
		if v == nil {
			return nil
		}
		return v.DiffDiskSettings
	}).(DiffDiskSettingsResponsePtrOutput)
}

// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
func (o OSDiskResponsePtrOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *int {
		if v == nil {
			return nil
		}
		return v.DiskSizeGB
	}).(pulumi.IntPtrOutput)
}

// Specifies the encryption settings for the OS Disk. <br><br> Minimum api-version: 2015-06-15
func (o OSDiskResponsePtrOutput) EncryptionSettings() DiskEncryptionSettingsResponsePtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *DiskEncryptionSettingsResponse {
		if v == nil {
			return nil
		}
		return v.EncryptionSettings
	}).(DiskEncryptionSettingsResponsePtrOutput)
}

// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
func (o OSDiskResponsePtrOutput) Image() VirtualHardDiskResponsePtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *VirtualHardDiskResponse {
		if v == nil {
			return nil
		}
		return v.Image
	}).(VirtualHardDiskResponsePtrOutput)
}

// The managed disk parameters.
func (o OSDiskResponsePtrOutput) ManagedDisk() ManagedDiskParametersResponsePtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *ManagedDiskParametersResponse {
		if v == nil {
			return nil
		}
		return v.ManagedDisk
	}).(ManagedDiskParametersResponsePtrOutput)
}

// The disk name.
func (o OSDiskResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
func (o OSDiskResponsePtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.OsType
	}).(pulumi.StringPtrOutput)
}

// The virtual hard disk.
func (o OSDiskResponsePtrOutput) Vhd() VirtualHardDiskResponsePtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *VirtualHardDiskResponse {
		if v == nil {
			return nil
		}
		return v.Vhd
	}).(VirtualHardDiskResponsePtrOutput)
}

// Specifies whether writeAccelerator should be enabled or disabled on the disk.
func (o OSDiskResponsePtrOutput) WriteAcceleratorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *bool {
		if v == nil {
			return nil
		}
		return v.WriteAcceleratorEnabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned.
type OSProfile struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password)
	AdminPassword *string `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	AdminUsername *string `pulumi:"adminUsername"`
	// Specifies whether extension operations should be allowed on the virtual machine. <br><br>This may only be set to False when no extensions are present on the virtual machine.
	AllowExtensionOperations *bool `pulumi:"allowExtensionOperations"`
	// Specifies the host OS name of the virtual machine. <br><br> This name cannot be updated after the VM is created. <br><br> **Max-length (Windows):** 15 characters <br><br> **Max-length (Linux):** 64 characters. <br><br> For naming conventions and restrictions see [Azure infrastructure services implementation guidelines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-infrastructure-subscription-accounts-guidelines?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#1-naming-conventions).
	ComputerName *string `pulumi:"computerName"`
	// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. <br><br> **Note: Do not pass any secrets or passwords in customData property** <br><br> This property cannot be updated after the VM is created. <br><br> customData is passed to the VM to be saved as a file, for more information see [Custom Data on Azure VMs](https://azure.microsoft.com/en-us/blog/custom-data-and-cloud-init-on-windows-azure/) <br><br> For using cloud-init for your Linux VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	CustomData *string `pulumi:"customData"`
	// Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json) <br><br> For running non-endorsed distributions, see [Information for Non-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
	LinuxConfiguration *LinuxConfiguration `pulumi:"linuxConfiguration"`
	// Specifies whether the guest provision signal is required to infer provision success of the virtual machine.  **Note: This property is for private testing only, and all customers must not set the property to false.**
	RequireGuestProvisionSignal *bool `pulumi:"requireGuestProvisionSignal"`
	// Specifies set of certificates that should be installed onto the virtual machine.
	Secrets []VaultSecretGroup `pulumi:"secrets"`
	// Specifies Windows operating system settings on the virtual machine.
	WindowsConfiguration *WindowsConfiguration `pulumi:"windowsConfiguration"`
}

// OSProfileInput is an input type that accepts OSProfileArgs and OSProfileOutput values.
// You can construct a concrete instance of `OSProfileInput` via:
//
//          OSProfileArgs{...}
type OSProfileInput interface {
	pulumi.Input

	ToOSProfileOutput() OSProfileOutput
	ToOSProfileOutputWithContext(context.Context) OSProfileOutput
}

// Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned.
type OSProfileArgs struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password)
	AdminPassword pulumi.StringPtrInput `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	AdminUsername pulumi.StringPtrInput `pulumi:"adminUsername"`
	// Specifies whether extension operations should be allowed on the virtual machine. <br><br>This may only be set to False when no extensions are present on the virtual machine.
	AllowExtensionOperations pulumi.BoolPtrInput `pulumi:"allowExtensionOperations"`
	// Specifies the host OS name of the virtual machine. <br><br> This name cannot be updated after the VM is created. <br><br> **Max-length (Windows):** 15 characters <br><br> **Max-length (Linux):** 64 characters. <br><br> For naming conventions and restrictions see [Azure infrastructure services implementation guidelines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-infrastructure-subscription-accounts-guidelines?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#1-naming-conventions).
	ComputerName pulumi.StringPtrInput `pulumi:"computerName"`
	// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. <br><br> **Note: Do not pass any secrets or passwords in customData property** <br><br> This property cannot be updated after the VM is created. <br><br> customData is passed to the VM to be saved as a file, for more information see [Custom Data on Azure VMs](https://azure.microsoft.com/en-us/blog/custom-data-and-cloud-init-on-windows-azure/) <br><br> For using cloud-init for your Linux VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	CustomData pulumi.StringPtrInput `pulumi:"customData"`
	// Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json) <br><br> For running non-endorsed distributions, see [Information for Non-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
	LinuxConfiguration LinuxConfigurationPtrInput `pulumi:"linuxConfiguration"`
	// Specifies whether the guest provision signal is required to infer provision success of the virtual machine.  **Note: This property is for private testing only, and all customers must not set the property to false.**
	RequireGuestProvisionSignal pulumi.BoolPtrInput `pulumi:"requireGuestProvisionSignal"`
	// Specifies set of certificates that should be installed onto the virtual machine.
	Secrets VaultSecretGroupArrayInput `pulumi:"secrets"`
	// Specifies Windows operating system settings on the virtual machine.
	WindowsConfiguration WindowsConfigurationPtrInput `pulumi:"windowsConfiguration"`
}

func (OSProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSProfile)(nil)).Elem()
}

func (i OSProfileArgs) ToOSProfileOutput() OSProfileOutput {
	return i.ToOSProfileOutputWithContext(context.Background())
}

func (i OSProfileArgs) ToOSProfileOutputWithContext(ctx context.Context) OSProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSProfileOutput)
}

func (i OSProfileArgs) ToOSProfilePtrOutput() OSProfilePtrOutput {
	return i.ToOSProfilePtrOutputWithContext(context.Background())
}

func (i OSProfileArgs) ToOSProfilePtrOutputWithContext(ctx context.Context) OSProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSProfileOutput).ToOSProfilePtrOutputWithContext(ctx)
}

// OSProfilePtrInput is an input type that accepts OSProfileArgs, OSProfilePtr and OSProfilePtrOutput values.
// You can construct a concrete instance of `OSProfilePtrInput` via:
//
//          OSProfileArgs{...}
//
//  or:
//
//          nil
type OSProfilePtrInput interface {
	pulumi.Input

	ToOSProfilePtrOutput() OSProfilePtrOutput
	ToOSProfilePtrOutputWithContext(context.Context) OSProfilePtrOutput
}

type osprofilePtrType OSProfileArgs

func OSProfilePtr(v *OSProfileArgs) OSProfilePtrInput {
	return (*osprofilePtrType)(v)
}

func (*osprofilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSProfile)(nil)).Elem()
}

func (i *osprofilePtrType) ToOSProfilePtrOutput() OSProfilePtrOutput {
	return i.ToOSProfilePtrOutputWithContext(context.Background())
}

func (i *osprofilePtrType) ToOSProfilePtrOutputWithContext(ctx context.Context) OSProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSProfilePtrOutput)
}

// Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned.
type OSProfileResponse struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password)
	AdminPassword *string `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	AdminUsername *string `pulumi:"adminUsername"`
	// Specifies whether extension operations should be allowed on the virtual machine. <br><br>This may only be set to False when no extensions are present on the virtual machine.
	AllowExtensionOperations *bool `pulumi:"allowExtensionOperations"`
	// Specifies the host OS name of the virtual machine. <br><br> This name cannot be updated after the VM is created. <br><br> **Max-length (Windows):** 15 characters <br><br> **Max-length (Linux):** 64 characters. <br><br> For naming conventions and restrictions see [Azure infrastructure services implementation guidelines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-infrastructure-subscription-accounts-guidelines?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#1-naming-conventions).
	ComputerName *string `pulumi:"computerName"`
	// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. <br><br> **Note: Do not pass any secrets or passwords in customData property** <br><br> This property cannot be updated after the VM is created. <br><br> customData is passed to the VM to be saved as a file, for more information see [Custom Data on Azure VMs](https://azure.microsoft.com/en-us/blog/custom-data-and-cloud-init-on-windows-azure/) <br><br> For using cloud-init for your Linux VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	CustomData *string `pulumi:"customData"`
	// Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json) <br><br> For running non-endorsed distributions, see [Information for Non-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
	LinuxConfiguration *LinuxConfigurationResponse `pulumi:"linuxConfiguration"`
	// Specifies whether the guest provision signal is required to infer provision success of the virtual machine.  **Note: This property is for private testing only, and all customers must not set the property to false.**
	RequireGuestProvisionSignal *bool `pulumi:"requireGuestProvisionSignal"`
	// Specifies set of certificates that should be installed onto the virtual machine.
	Secrets []VaultSecretGroupResponse `pulumi:"secrets"`
	// Specifies Windows operating system settings on the virtual machine.
	WindowsConfiguration *WindowsConfigurationResponse `pulumi:"windowsConfiguration"`
}

// Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned.
type OSProfileResponseOutput struct{ *pulumi.OutputState }

func (OSProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSProfileResponse)(nil)).Elem()
}

func (o OSProfileResponseOutput) ToOSProfileResponseOutput() OSProfileResponseOutput {
	return o
}

func (o OSProfileResponseOutput) ToOSProfileResponseOutputWithContext(ctx context.Context) OSProfileResponseOutput {
	return o
}

func (o OSProfileResponseOutput) ToOSProfileResponsePtrOutput() OSProfileResponsePtrOutput {
	return o.ToOSProfileResponsePtrOutputWithContext(context.Background())
}

func (o OSProfileResponseOutput) ToOSProfileResponsePtrOutputWithContext(ctx context.Context) OSProfileResponsePtrOutput {
	return o.ApplyT(func(v OSProfileResponse) *OSProfileResponse {
		return &v
	}).(OSProfileResponsePtrOutput)
}

// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password)
func (o OSProfileResponseOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSProfileResponse) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
func (o OSProfileResponseOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSProfileResponse) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// Specifies whether extension operations should be allowed on the virtual machine. <br><br>This may only be set to False when no extensions are present on the virtual machine.
func (o OSProfileResponseOutput) AllowExtensionOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OSProfileResponse) *bool { return v.AllowExtensionOperations }).(pulumi.BoolPtrOutput)
}

// Specifies the host OS name of the virtual machine. <br><br> This name cannot be updated after the VM is created. <br><br> **Max-length (Windows):** 15 characters <br><br> **Max-length (Linux):** 64 characters. <br><br> For naming conventions and restrictions see [Azure infrastructure services implementation guidelines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-infrastructure-subscription-accounts-guidelines?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#1-naming-conventions).
func (o OSProfileResponseOutput) ComputerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSProfileResponse) *string { return v.ComputerName }).(pulumi.StringPtrOutput)
}

// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. <br><br> **Note: Do not pass any secrets or passwords in customData property** <br><br> This property cannot be updated after the VM is created. <br><br> customData is passed to the VM to be saved as a file, for more information see [Custom Data on Azure VMs](https://azure.microsoft.com/en-us/blog/custom-data-and-cloud-init-on-windows-azure/) <br><br> For using cloud-init for your Linux VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
func (o OSProfileResponseOutput) CustomData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSProfileResponse) *string { return v.CustomData }).(pulumi.StringPtrOutput)
}

// Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json) <br><br> For running non-endorsed distributions, see [Information for Non-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
func (o OSProfileResponseOutput) LinuxConfiguration() LinuxConfigurationResponsePtrOutput {
	return o.ApplyT(func(v OSProfileResponse) *LinuxConfigurationResponse { return v.LinuxConfiguration }).(LinuxConfigurationResponsePtrOutput)
}

// Specifies whether the guest provision signal is required to infer provision success of the virtual machine.  **Note: This property is for private testing only, and all customers must not set the property to false.**
func (o OSProfileResponseOutput) RequireGuestProvisionSignal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OSProfileResponse) *bool { return v.RequireGuestProvisionSignal }).(pulumi.BoolPtrOutput)
}

// Specifies set of certificates that should be installed onto the virtual machine.
func (o OSProfileResponseOutput) Secrets() VaultSecretGroupResponseArrayOutput {
	return o.ApplyT(func(v OSProfileResponse) []VaultSecretGroupResponse { return v.Secrets }).(VaultSecretGroupResponseArrayOutput)
}

// Specifies Windows operating system settings on the virtual machine.
func (o OSProfileResponseOutput) WindowsConfiguration() WindowsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v OSProfileResponse) *WindowsConfigurationResponse { return v.WindowsConfiguration }).(WindowsConfigurationResponsePtrOutput)
}

type OSProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (OSProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSProfileResponse)(nil)).Elem()
}

func (o OSProfileResponsePtrOutput) ToOSProfileResponsePtrOutput() OSProfileResponsePtrOutput {
	return o
}

func (o OSProfileResponsePtrOutput) ToOSProfileResponsePtrOutputWithContext(ctx context.Context) OSProfileResponsePtrOutput {
	return o
}

func (o OSProfileResponsePtrOutput) Elem() OSProfileResponseOutput {
	return o.ApplyT(func(v *OSProfileResponse) OSProfileResponse { return *v }).(OSProfileResponseOutput)
}

// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password)
func (o OSProfileResponsePtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
func (o OSProfileResponsePtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// Specifies whether extension operations should be allowed on the virtual machine. <br><br>This may only be set to False when no extensions are present on the virtual machine.
func (o OSProfileResponsePtrOutput) AllowExtensionOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OSProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AllowExtensionOperations
	}).(pulumi.BoolPtrOutput)
}

// Specifies the host OS name of the virtual machine. <br><br> This name cannot be updated after the VM is created. <br><br> **Max-length (Windows):** 15 characters <br><br> **Max-length (Linux):** 64 characters. <br><br> For naming conventions and restrictions see [Azure infrastructure services implementation guidelines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-infrastructure-subscription-accounts-guidelines?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#1-naming-conventions).
func (o OSProfileResponsePtrOutput) ComputerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ComputerName
	}).(pulumi.StringPtrOutput)
}

// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. <br><br> **Note: Do not pass any secrets or passwords in customData property** <br><br> This property cannot be updated after the VM is created. <br><br> customData is passed to the VM to be saved as a file, for more information see [Custom Data on Azure VMs](https://azure.microsoft.com/en-us/blog/custom-data-and-cloud-init-on-windows-azure/) <br><br> For using cloud-init for your Linux VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
func (o OSProfileResponsePtrOutput) CustomData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomData
	}).(pulumi.StringPtrOutput)
}

// Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json) <br><br> For running non-endorsed distributions, see [Information for Non-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
func (o OSProfileResponsePtrOutput) LinuxConfiguration() LinuxConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *OSProfileResponse) *LinuxConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.LinuxConfiguration
	}).(LinuxConfigurationResponsePtrOutput)
}

// Specifies whether the guest provision signal is required to infer provision success of the virtual machine.  **Note: This property is for private testing only, and all customers must not set the property to false.**
func (o OSProfileResponsePtrOutput) RequireGuestProvisionSignal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OSProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequireGuestProvisionSignal
	}).(pulumi.BoolPtrOutput)
}

// Specifies set of certificates that should be installed onto the virtual machine.
func (o OSProfileResponsePtrOutput) Secrets() VaultSecretGroupResponseArrayOutput {
	return o.ApplyT(func(v *OSProfileResponse) []VaultSecretGroupResponse {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(VaultSecretGroupResponseArrayOutput)
}

// Specifies Windows operating system settings on the virtual machine.
func (o OSProfileResponsePtrOutput) WindowsConfiguration() WindowsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *OSProfileResponse) *WindowsConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.WindowsConfiguration
	}).(WindowsConfigurationResponsePtrOutput)
}

type PatchSettings struct {
	// Specifies the mode of in-guest patching to IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be false<br /><br /> **AutomaticByOS** - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true. <br /><br /> ** AutomaticByPlatform** - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true
	PatchMode *string `pulumi:"patchMode"`
}

// PatchSettingsInput is an input type that accepts PatchSettingsArgs and PatchSettingsOutput values.
// You can construct a concrete instance of `PatchSettingsInput` via:
//
//          PatchSettingsArgs{...}
type PatchSettingsInput interface {
	pulumi.Input

	ToPatchSettingsOutput() PatchSettingsOutput
	ToPatchSettingsOutputWithContext(context.Context) PatchSettingsOutput
}

type PatchSettingsArgs struct {
	// Specifies the mode of in-guest patching to IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be false<br /><br /> **AutomaticByOS** - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true. <br /><br /> ** AutomaticByPlatform** - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true
	PatchMode pulumi.StringPtrInput `pulumi:"patchMode"`
}

func (PatchSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchSettings)(nil)).Elem()
}

func (i PatchSettingsArgs) ToPatchSettingsOutput() PatchSettingsOutput {
	return i.ToPatchSettingsOutputWithContext(context.Background())
}

func (i PatchSettingsArgs) ToPatchSettingsOutputWithContext(ctx context.Context) PatchSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchSettingsOutput)
}

func (i PatchSettingsArgs) ToPatchSettingsPtrOutput() PatchSettingsPtrOutput {
	return i.ToPatchSettingsPtrOutputWithContext(context.Background())
}

func (i PatchSettingsArgs) ToPatchSettingsPtrOutputWithContext(ctx context.Context) PatchSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchSettingsOutput).ToPatchSettingsPtrOutputWithContext(ctx)
}

// PatchSettingsPtrInput is an input type that accepts PatchSettingsArgs, PatchSettingsPtr and PatchSettingsPtrOutput values.
// You can construct a concrete instance of `PatchSettingsPtrInput` via:
//
//          PatchSettingsArgs{...}
//
//  or:
//
//          nil
type PatchSettingsPtrInput interface {
	pulumi.Input

	ToPatchSettingsPtrOutput() PatchSettingsPtrOutput
	ToPatchSettingsPtrOutputWithContext(context.Context) PatchSettingsPtrOutput
}

type patchSettingsPtrType PatchSettingsArgs

func PatchSettingsPtr(v *PatchSettingsArgs) PatchSettingsPtrInput {
	return (*patchSettingsPtrType)(v)
}

func (*patchSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchSettings)(nil)).Elem()
}

func (i *patchSettingsPtrType) ToPatchSettingsPtrOutput() PatchSettingsPtrOutput {
	return i.ToPatchSettingsPtrOutputWithContext(context.Background())
}

func (i *patchSettingsPtrType) ToPatchSettingsPtrOutputWithContext(ctx context.Context) PatchSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchSettingsPtrOutput)
}

type PatchSettingsResponse struct {
	// Specifies the mode of in-guest patching to IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be false<br /><br /> **AutomaticByOS** - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true. <br /><br /> ** AutomaticByPlatform** - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true
	PatchMode *string `pulumi:"patchMode"`
}

type PatchSettingsResponseOutput struct{ *pulumi.OutputState }

func (PatchSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchSettingsResponse)(nil)).Elem()
}

func (o PatchSettingsResponseOutput) ToPatchSettingsResponseOutput() PatchSettingsResponseOutput {
	return o
}

func (o PatchSettingsResponseOutput) ToPatchSettingsResponseOutputWithContext(ctx context.Context) PatchSettingsResponseOutput {
	return o
}

func (o PatchSettingsResponseOutput) ToPatchSettingsResponsePtrOutput() PatchSettingsResponsePtrOutput {
	return o.ToPatchSettingsResponsePtrOutputWithContext(context.Background())
}

func (o PatchSettingsResponseOutput) ToPatchSettingsResponsePtrOutputWithContext(ctx context.Context) PatchSettingsResponsePtrOutput {
	return o.ApplyT(func(v PatchSettingsResponse) *PatchSettingsResponse {
		return &v
	}).(PatchSettingsResponsePtrOutput)
}

// Specifies the mode of in-guest patching to IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be false<br /><br /> **AutomaticByOS** - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true. <br /><br /> ** AutomaticByPlatform** - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true
func (o PatchSettingsResponseOutput) PatchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PatchSettingsResponse) *string { return v.PatchMode }).(pulumi.StringPtrOutput)
}

type PatchSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (PatchSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchSettingsResponse)(nil)).Elem()
}

func (o PatchSettingsResponsePtrOutput) ToPatchSettingsResponsePtrOutput() PatchSettingsResponsePtrOutput {
	return o
}

func (o PatchSettingsResponsePtrOutput) ToPatchSettingsResponsePtrOutputWithContext(ctx context.Context) PatchSettingsResponsePtrOutput {
	return o
}

func (o PatchSettingsResponsePtrOutput) Elem() PatchSettingsResponseOutput {
	return o.ApplyT(func(v *PatchSettingsResponse) PatchSettingsResponse { return *v }).(PatchSettingsResponseOutput)
}

// Specifies the mode of in-guest patching to IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be false<br /><br /> **AutomaticByOS** - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true. <br /><br /> ** AutomaticByPlatform** - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true
func (o PatchSettingsResponsePtrOutput) PatchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PatchSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PatchMode
	}).(pulumi.StringPtrOutput)
}

// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
type Plan struct {
	// The plan ID.
	Name *string `pulumi:"name"`
	// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
	Product *string `pulumi:"product"`
	// The promotion code.
	PromotionCode *string `pulumi:"promotionCode"`
	// The publisher ID.
	Publisher *string `pulumi:"publisher"`
}

// PlanInput is an input type that accepts PlanArgs and PlanOutput values.
// You can construct a concrete instance of `PlanInput` via:
//
//          PlanArgs{...}
type PlanInput interface {
	pulumi.Input

	ToPlanOutput() PlanOutput
	ToPlanOutputWithContext(context.Context) PlanOutput
}

// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
type PlanArgs struct {
	// The plan ID.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
	Product pulumi.StringPtrInput `pulumi:"product"`
	// The promotion code.
	PromotionCode pulumi.StringPtrInput `pulumi:"promotionCode"`
	// The publisher ID.
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
}

func (PlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Plan)(nil)).Elem()
}

func (i PlanArgs) ToPlanOutput() PlanOutput {
	return i.ToPlanOutputWithContext(context.Background())
}

func (i PlanArgs) ToPlanOutputWithContext(ctx context.Context) PlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanOutput)
}

func (i PlanArgs) ToPlanPtrOutput() PlanPtrOutput {
	return i.ToPlanPtrOutputWithContext(context.Background())
}

func (i PlanArgs) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanOutput).ToPlanPtrOutputWithContext(ctx)
}

// PlanPtrInput is an input type that accepts PlanArgs, PlanPtr and PlanPtrOutput values.
// You can construct a concrete instance of `PlanPtrInput` via:
//
//          PlanArgs{...}
//
//  or:
//
//          nil
type PlanPtrInput interface {
	pulumi.Input

	ToPlanPtrOutput() PlanPtrOutput
	ToPlanPtrOutputWithContext(context.Context) PlanPtrOutput
}

type planPtrType PlanArgs

func PlanPtr(v *PlanArgs) PlanPtrInput {
	return (*planPtrType)(v)
}

func (*planPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Plan)(nil)).Elem()
}

func (i *planPtrType) ToPlanPtrOutput() PlanPtrOutput {
	return i.ToPlanPtrOutputWithContext(context.Background())
}

func (i *planPtrType) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanPtrOutput)
}

// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
type PlanResponse struct {
	// The plan ID.
	Name *string `pulumi:"name"`
	// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
	Product *string `pulumi:"product"`
	// The promotion code.
	PromotionCode *string `pulumi:"promotionCode"`
	// The publisher ID.
	Publisher *string `pulumi:"publisher"`
}

// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
type PlanResponseOutput struct{ *pulumi.OutputState }

func (PlanResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanResponse)(nil)).Elem()
}

func (o PlanResponseOutput) ToPlanResponseOutput() PlanResponseOutput {
	return o
}

func (o PlanResponseOutput) ToPlanResponseOutputWithContext(ctx context.Context) PlanResponseOutput {
	return o
}

func (o PlanResponseOutput) ToPlanResponsePtrOutput() PlanResponsePtrOutput {
	return o.ToPlanResponsePtrOutputWithContext(context.Background())
}

func (o PlanResponseOutput) ToPlanResponsePtrOutputWithContext(ctx context.Context) PlanResponsePtrOutput {
	return o.ApplyT(func(v PlanResponse) *PlanResponse {
		return &v
	}).(PlanResponsePtrOutput)
}

// The plan ID.
func (o PlanResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
func (o PlanResponseOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanResponse) *string { return v.Product }).(pulumi.StringPtrOutput)
}

// The promotion code.
func (o PlanResponseOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanResponse) *string { return v.PromotionCode }).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o PlanResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

type PlanResponsePtrOutput struct{ *pulumi.OutputState }

func (PlanResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanResponse)(nil)).Elem()
}

func (o PlanResponsePtrOutput) ToPlanResponsePtrOutput() PlanResponsePtrOutput {
	return o
}

func (o PlanResponsePtrOutput) ToPlanResponsePtrOutputWithContext(ctx context.Context) PlanResponsePtrOutput {
	return o
}

func (o PlanResponsePtrOutput) Elem() PlanResponseOutput {
	return o.ApplyT(func(v *PlanResponse) PlanResponse { return *v }).(PlanResponseOutput)
}

// The plan ID.
func (o PlanResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
func (o PlanResponsePtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Product
	}).(pulumi.StringPtrOutput)
}

// The promotion code.
func (o PlanResponsePtrOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.PromotionCode
	}).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o PlanResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionResponse struct {
	// private endpoint connection Id
	Id string `pulumi:"id"`
	// private endpoint connection name
	Name string `pulumi:"name"`
	// The resource of private end point.
	PrivateEndpoint *PrivateEndpointResponse `pulumi:"privateEndpoint"`
	// A collection of information about the state of the connection between DiskAccess and Virtual Network.
	PrivateLinkServiceConnectionState PrivateLinkServiceConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	// The provisioning state of the private endpoint connection resource.
	ProvisioningState *string `pulumi:"provisioningState"`
	// private endpoint connection type
	Type string `pulumi:"type"`
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutput() PrivateEndpointConnectionResponseOutput {
	return o
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseOutput {
	return o
}

// private endpoint connection Id
func (o PrivateEndpointConnectionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// private endpoint connection name
func (o PrivateEndpointConnectionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The resource of private end point.
func (o PrivateEndpointConnectionResponseOutput) PrivateEndpoint() PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *PrivateEndpointResponse { return v.PrivateEndpoint }).(PrivateEndpointResponsePtrOutput)
}

// A collection of information about the state of the connection between DiskAccess and Virtual Network.
func (o PrivateEndpointConnectionResponseOutput) PrivateLinkServiceConnectionState() PrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) PrivateLinkServiceConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkServiceConnectionStateResponseOutput)
}

// The provisioning state of the private endpoint connection resource.
func (o PrivateEndpointConnectionResponseOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// private endpoint connection type
func (o PrivateEndpointConnectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PrivateEndpointConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutput() PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) Index(i pulumi.IntInput) PrivateEndpointConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateEndpointConnectionResponse {
		return vs[0].([]PrivateEndpointConnectionResponse)[vs[1].(int)]
	}).(PrivateEndpointConnectionResponseOutput)
}

// The Private Endpoint resource.
type PrivateEndpointResponse struct {
	// The ARM identifier for Private Endpoint
	Id string `pulumi:"id"`
}

// The Private Endpoint resource.
type PrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o.ToPrivateEndpointResponsePtrOutputWithContext(context.Background())
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) *PrivateEndpointResponse {
		return &v
	}).(PrivateEndpointResponsePtrOutput)
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) string { return v.Id }).(pulumi.StringOutput)
}

type PrivateEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) Elem() PrivateEndpointResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) PrivateEndpointResponse { return *v }).(PrivateEndpointResponseOutput)
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponse struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
type RecommendedMachineConfiguration struct {
	// Describes the resource range.
	Memory *ResourceRange `pulumi:"memory"`
	// Describes the resource range.
	VCPUs *ResourceRange `pulumi:"vCPUs"`
}

// RecommendedMachineConfigurationInput is an input type that accepts RecommendedMachineConfigurationArgs and RecommendedMachineConfigurationOutput values.
// You can construct a concrete instance of `RecommendedMachineConfigurationInput` via:
//
//          RecommendedMachineConfigurationArgs{...}
type RecommendedMachineConfigurationInput interface {
	pulumi.Input

	ToRecommendedMachineConfigurationOutput() RecommendedMachineConfigurationOutput
	ToRecommendedMachineConfigurationOutputWithContext(context.Context) RecommendedMachineConfigurationOutput
}

// The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
type RecommendedMachineConfigurationArgs struct {
	// Describes the resource range.
	Memory ResourceRangePtrInput `pulumi:"memory"`
	// Describes the resource range.
	VCPUs ResourceRangePtrInput `pulumi:"vCPUs"`
}

func (RecommendedMachineConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecommendedMachineConfiguration)(nil)).Elem()
}

func (i RecommendedMachineConfigurationArgs) ToRecommendedMachineConfigurationOutput() RecommendedMachineConfigurationOutput {
	return i.ToRecommendedMachineConfigurationOutputWithContext(context.Background())
}

func (i RecommendedMachineConfigurationArgs) ToRecommendedMachineConfigurationOutputWithContext(ctx context.Context) RecommendedMachineConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecommendedMachineConfigurationOutput)
}

func (i RecommendedMachineConfigurationArgs) ToRecommendedMachineConfigurationPtrOutput() RecommendedMachineConfigurationPtrOutput {
	return i.ToRecommendedMachineConfigurationPtrOutputWithContext(context.Background())
}

func (i RecommendedMachineConfigurationArgs) ToRecommendedMachineConfigurationPtrOutputWithContext(ctx context.Context) RecommendedMachineConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecommendedMachineConfigurationOutput).ToRecommendedMachineConfigurationPtrOutputWithContext(ctx)
}

// RecommendedMachineConfigurationPtrInput is an input type that accepts RecommendedMachineConfigurationArgs, RecommendedMachineConfigurationPtr and RecommendedMachineConfigurationPtrOutput values.
// You can construct a concrete instance of `RecommendedMachineConfigurationPtrInput` via:
//
//          RecommendedMachineConfigurationArgs{...}
//
//  or:
//
//          nil
type RecommendedMachineConfigurationPtrInput interface {
	pulumi.Input

	ToRecommendedMachineConfigurationPtrOutput() RecommendedMachineConfigurationPtrOutput
	ToRecommendedMachineConfigurationPtrOutputWithContext(context.Context) RecommendedMachineConfigurationPtrOutput
}

type recommendedMachineConfigurationPtrType RecommendedMachineConfigurationArgs

func RecommendedMachineConfigurationPtr(v *RecommendedMachineConfigurationArgs) RecommendedMachineConfigurationPtrInput {
	return (*recommendedMachineConfigurationPtrType)(v)
}

func (*recommendedMachineConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecommendedMachineConfiguration)(nil)).Elem()
}

func (i *recommendedMachineConfigurationPtrType) ToRecommendedMachineConfigurationPtrOutput() RecommendedMachineConfigurationPtrOutput {
	return i.ToRecommendedMachineConfigurationPtrOutputWithContext(context.Background())
}

func (i *recommendedMachineConfigurationPtrType) ToRecommendedMachineConfigurationPtrOutputWithContext(ctx context.Context) RecommendedMachineConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecommendedMachineConfigurationPtrOutput)
}

// The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
type RecommendedMachineConfigurationResponse struct {
	// Describes the resource range.
	Memory *ResourceRangeResponse `pulumi:"memory"`
	// Describes the resource range.
	VCPUs *ResourceRangeResponse `pulumi:"vCPUs"`
}

// The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
type RecommendedMachineConfigurationResponseOutput struct{ *pulumi.OutputState }

func (RecommendedMachineConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecommendedMachineConfigurationResponse)(nil)).Elem()
}

func (o RecommendedMachineConfigurationResponseOutput) ToRecommendedMachineConfigurationResponseOutput() RecommendedMachineConfigurationResponseOutput {
	return o
}

func (o RecommendedMachineConfigurationResponseOutput) ToRecommendedMachineConfigurationResponseOutputWithContext(ctx context.Context) RecommendedMachineConfigurationResponseOutput {
	return o
}

func (o RecommendedMachineConfigurationResponseOutput) ToRecommendedMachineConfigurationResponsePtrOutput() RecommendedMachineConfigurationResponsePtrOutput {
	return o.ToRecommendedMachineConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o RecommendedMachineConfigurationResponseOutput) ToRecommendedMachineConfigurationResponsePtrOutputWithContext(ctx context.Context) RecommendedMachineConfigurationResponsePtrOutput {
	return o.ApplyT(func(v RecommendedMachineConfigurationResponse) *RecommendedMachineConfigurationResponse {
		return &v
	}).(RecommendedMachineConfigurationResponsePtrOutput)
}

// Describes the resource range.
func (o RecommendedMachineConfigurationResponseOutput) Memory() ResourceRangeResponsePtrOutput {
	return o.ApplyT(func(v RecommendedMachineConfigurationResponse) *ResourceRangeResponse { return v.Memory }).(ResourceRangeResponsePtrOutput)
}

// Describes the resource range.
func (o RecommendedMachineConfigurationResponseOutput) VCPUs() ResourceRangeResponsePtrOutput {
	return o.ApplyT(func(v RecommendedMachineConfigurationResponse) *ResourceRangeResponse { return v.VCPUs }).(ResourceRangeResponsePtrOutput)
}

type RecommendedMachineConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (RecommendedMachineConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecommendedMachineConfigurationResponse)(nil)).Elem()
}

func (o RecommendedMachineConfigurationResponsePtrOutput) ToRecommendedMachineConfigurationResponsePtrOutput() RecommendedMachineConfigurationResponsePtrOutput {
	return o
}

func (o RecommendedMachineConfigurationResponsePtrOutput) ToRecommendedMachineConfigurationResponsePtrOutputWithContext(ctx context.Context) RecommendedMachineConfigurationResponsePtrOutput {
	return o
}

func (o RecommendedMachineConfigurationResponsePtrOutput) Elem() RecommendedMachineConfigurationResponseOutput {
	return o.ApplyT(func(v *RecommendedMachineConfigurationResponse) RecommendedMachineConfigurationResponse { return *v }).(RecommendedMachineConfigurationResponseOutput)
}

// Describes the resource range.
func (o RecommendedMachineConfigurationResponsePtrOutput) Memory() ResourceRangeResponsePtrOutput {
	return o.ApplyT(func(v *RecommendedMachineConfigurationResponse) *ResourceRangeResponse {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(ResourceRangeResponsePtrOutput)
}

// Describes the resource range.
func (o RecommendedMachineConfigurationResponsePtrOutput) VCPUs() ResourceRangeResponsePtrOutput {
	return o.ApplyT(func(v *RecommendedMachineConfigurationResponse) *ResourceRangeResponse {
		if v == nil {
			return nil
		}
		return v.VCPUs
	}).(ResourceRangeResponsePtrOutput)
}

// This is the regional replication status.
type RegionalReplicationStatusResponse struct {
	// The details of the replication status.
	Details string `pulumi:"details"`
	// It indicates progress of the replication job.
	Progress int `pulumi:"progress"`
	// The region to which the gallery image version is being replicated to.
	Region string `pulumi:"region"`
	// This is the regional replication state.
	State string `pulumi:"state"`
}

// This is the regional replication status.
type RegionalReplicationStatusResponseOutput struct{ *pulumi.OutputState }

func (RegionalReplicationStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionalReplicationStatusResponse)(nil)).Elem()
}

func (o RegionalReplicationStatusResponseOutput) ToRegionalReplicationStatusResponseOutput() RegionalReplicationStatusResponseOutput {
	return o
}

func (o RegionalReplicationStatusResponseOutput) ToRegionalReplicationStatusResponseOutputWithContext(ctx context.Context) RegionalReplicationStatusResponseOutput {
	return o
}

// The details of the replication status.
func (o RegionalReplicationStatusResponseOutput) Details() pulumi.StringOutput {
	return o.ApplyT(func(v RegionalReplicationStatusResponse) string { return v.Details }).(pulumi.StringOutput)
}

// It indicates progress of the replication job.
func (o RegionalReplicationStatusResponseOutput) Progress() pulumi.IntOutput {
	return o.ApplyT(func(v RegionalReplicationStatusResponse) int { return v.Progress }).(pulumi.IntOutput)
}

// The region to which the gallery image version is being replicated to.
func (o RegionalReplicationStatusResponseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v RegionalReplicationStatusResponse) string { return v.Region }).(pulumi.StringOutput)
}

// This is the regional replication state.
func (o RegionalReplicationStatusResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v RegionalReplicationStatusResponse) string { return v.State }).(pulumi.StringOutput)
}

type RegionalReplicationStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (RegionalReplicationStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionalReplicationStatusResponse)(nil)).Elem()
}

func (o RegionalReplicationStatusResponseArrayOutput) ToRegionalReplicationStatusResponseArrayOutput() RegionalReplicationStatusResponseArrayOutput {
	return o
}

func (o RegionalReplicationStatusResponseArrayOutput) ToRegionalReplicationStatusResponseArrayOutputWithContext(ctx context.Context) RegionalReplicationStatusResponseArrayOutput {
	return o
}

func (o RegionalReplicationStatusResponseArrayOutput) Index(i pulumi.IntInput) RegionalReplicationStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionalReplicationStatusResponse {
		return vs[0].([]RegionalReplicationStatusResponse)[vs[1].(int)]
	}).(RegionalReplicationStatusResponseOutput)
}

// This is the replication status of the gallery image version.
type ReplicationStatusResponse struct {
	// This is the aggregated replication status based on all the regional replication status flags.
	AggregatedState string `pulumi:"aggregatedState"`
	// This is a summary of replication status for each region.
	Summary []RegionalReplicationStatusResponse `pulumi:"summary"`
}

// This is the replication status of the gallery image version.
type ReplicationStatusResponseOutput struct{ *pulumi.OutputState }

func (ReplicationStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationStatusResponse)(nil)).Elem()
}

func (o ReplicationStatusResponseOutput) ToReplicationStatusResponseOutput() ReplicationStatusResponseOutput {
	return o
}

func (o ReplicationStatusResponseOutput) ToReplicationStatusResponseOutputWithContext(ctx context.Context) ReplicationStatusResponseOutput {
	return o
}

func (o ReplicationStatusResponseOutput) ToReplicationStatusResponsePtrOutput() ReplicationStatusResponsePtrOutput {
	return o.ToReplicationStatusResponsePtrOutputWithContext(context.Background())
}

func (o ReplicationStatusResponseOutput) ToReplicationStatusResponsePtrOutputWithContext(ctx context.Context) ReplicationStatusResponsePtrOutput {
	return o.ApplyT(func(v ReplicationStatusResponse) *ReplicationStatusResponse {
		return &v
	}).(ReplicationStatusResponsePtrOutput)
}

// This is the aggregated replication status based on all the regional replication status flags.
func (o ReplicationStatusResponseOutput) AggregatedState() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationStatusResponse) string { return v.AggregatedState }).(pulumi.StringOutput)
}

// This is a summary of replication status for each region.
func (o ReplicationStatusResponseOutput) Summary() RegionalReplicationStatusResponseArrayOutput {
	return o.ApplyT(func(v ReplicationStatusResponse) []RegionalReplicationStatusResponse { return v.Summary }).(RegionalReplicationStatusResponseArrayOutput)
}

type ReplicationStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (ReplicationStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationStatusResponse)(nil)).Elem()
}

func (o ReplicationStatusResponsePtrOutput) ToReplicationStatusResponsePtrOutput() ReplicationStatusResponsePtrOutput {
	return o
}

func (o ReplicationStatusResponsePtrOutput) ToReplicationStatusResponsePtrOutputWithContext(ctx context.Context) ReplicationStatusResponsePtrOutput {
	return o
}

func (o ReplicationStatusResponsePtrOutput) Elem() ReplicationStatusResponseOutput {
	return o.ApplyT(func(v *ReplicationStatusResponse) ReplicationStatusResponse { return *v }).(ReplicationStatusResponseOutput)
}

// This is the aggregated replication status based on all the regional replication status flags.
func (o ReplicationStatusResponsePtrOutput) AggregatedState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicationStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AggregatedState
	}).(pulumi.StringPtrOutput)
}

// This is a summary of replication status for each region.
func (o ReplicationStatusResponsePtrOutput) Summary() RegionalReplicationStatusResponseArrayOutput {
	return o.ApplyT(func(v *ReplicationStatusResponse) []RegionalReplicationStatusResponse {
		if v == nil {
			return nil
		}
		return v.Summary
	}).(RegionalReplicationStatusResponseArrayOutput)
}

// Describes the resource range.
type ResourceRange struct {
	// The maximum number of the resource.
	Max *int `pulumi:"max"`
	// The minimum number of the resource.
	Min *int `pulumi:"min"`
}

// ResourceRangeInput is an input type that accepts ResourceRangeArgs and ResourceRangeOutput values.
// You can construct a concrete instance of `ResourceRangeInput` via:
//
//          ResourceRangeArgs{...}
type ResourceRangeInput interface {
	pulumi.Input

	ToResourceRangeOutput() ResourceRangeOutput
	ToResourceRangeOutputWithContext(context.Context) ResourceRangeOutput
}

// Describes the resource range.
type ResourceRangeArgs struct {
	// The maximum number of the resource.
	Max pulumi.IntPtrInput `pulumi:"max"`
	// The minimum number of the resource.
	Min pulumi.IntPtrInput `pulumi:"min"`
}

func (ResourceRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRange)(nil)).Elem()
}

func (i ResourceRangeArgs) ToResourceRangeOutput() ResourceRangeOutput {
	return i.ToResourceRangeOutputWithContext(context.Background())
}

func (i ResourceRangeArgs) ToResourceRangeOutputWithContext(ctx context.Context) ResourceRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRangeOutput)
}

func (i ResourceRangeArgs) ToResourceRangePtrOutput() ResourceRangePtrOutput {
	return i.ToResourceRangePtrOutputWithContext(context.Background())
}

func (i ResourceRangeArgs) ToResourceRangePtrOutputWithContext(ctx context.Context) ResourceRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRangeOutput).ToResourceRangePtrOutputWithContext(ctx)
}

// ResourceRangePtrInput is an input type that accepts ResourceRangeArgs, ResourceRangePtr and ResourceRangePtrOutput values.
// You can construct a concrete instance of `ResourceRangePtrInput` via:
//
//          ResourceRangeArgs{...}
//
//  or:
//
//          nil
type ResourceRangePtrInput interface {
	pulumi.Input

	ToResourceRangePtrOutput() ResourceRangePtrOutput
	ToResourceRangePtrOutputWithContext(context.Context) ResourceRangePtrOutput
}

type resourceRangePtrType ResourceRangeArgs

func ResourceRangePtr(v *ResourceRangeArgs) ResourceRangePtrInput {
	return (*resourceRangePtrType)(v)
}

func (*resourceRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRange)(nil)).Elem()
}

func (i *resourceRangePtrType) ToResourceRangePtrOutput() ResourceRangePtrOutput {
	return i.ToResourceRangePtrOutputWithContext(context.Background())
}

func (i *resourceRangePtrType) ToResourceRangePtrOutputWithContext(ctx context.Context) ResourceRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRangePtrOutput)
}

// Describes the resource range.
type ResourceRangeResponse struct {
	// The maximum number of the resource.
	Max *int `pulumi:"max"`
	// The minimum number of the resource.
	Min *int `pulumi:"min"`
}

// Describes the resource range.
type ResourceRangeResponseOutput struct{ *pulumi.OutputState }

func (ResourceRangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRangeResponse)(nil)).Elem()
}

func (o ResourceRangeResponseOutput) ToResourceRangeResponseOutput() ResourceRangeResponseOutput {
	return o
}

func (o ResourceRangeResponseOutput) ToResourceRangeResponseOutputWithContext(ctx context.Context) ResourceRangeResponseOutput {
	return o
}

func (o ResourceRangeResponseOutput) ToResourceRangeResponsePtrOutput() ResourceRangeResponsePtrOutput {
	return o.ToResourceRangeResponsePtrOutputWithContext(context.Background())
}

func (o ResourceRangeResponseOutput) ToResourceRangeResponsePtrOutputWithContext(ctx context.Context) ResourceRangeResponsePtrOutput {
	return o.ApplyT(func(v ResourceRangeResponse) *ResourceRangeResponse {
		return &v
	}).(ResourceRangeResponsePtrOutput)
}

// The maximum number of the resource.
func (o ResourceRangeResponseOutput) Max() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceRangeResponse) *int { return v.Max }).(pulumi.IntPtrOutput)
}

// The minimum number of the resource.
func (o ResourceRangeResponseOutput) Min() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceRangeResponse) *int { return v.Min }).(pulumi.IntPtrOutput)
}

type ResourceRangeResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceRangeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRangeResponse)(nil)).Elem()
}

func (o ResourceRangeResponsePtrOutput) ToResourceRangeResponsePtrOutput() ResourceRangeResponsePtrOutput {
	return o
}

func (o ResourceRangeResponsePtrOutput) ToResourceRangeResponsePtrOutputWithContext(ctx context.Context) ResourceRangeResponsePtrOutput {
	return o
}

func (o ResourceRangeResponsePtrOutput) Elem() ResourceRangeResponseOutput {
	return o.ApplyT(func(v *ResourceRangeResponse) ResourceRangeResponse { return *v }).(ResourceRangeResponseOutput)
}

// The maximum number of the resource.
func (o ResourceRangeResponsePtrOutput) Max() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceRangeResponse) *int {
		if v == nil {
			return nil
		}
		return v.Max
	}).(pulumi.IntPtrOutput)
}

// The minimum number of the resource.
func (o ResourceRangeResponsePtrOutput) Min() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceRangeResponse) *int {
		if v == nil {
			return nil
		}
		return v.Min
	}).(pulumi.IntPtrOutput)
}

// The configuration parameters used while performing a rolling upgrade.
type RollingUpgradePolicy struct {
	// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%.
	MaxBatchInstancePercent *int `pulumi:"maxBatchInstancePercent"`
	// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%.
	MaxUnhealthyInstancePercent *int `pulumi:"maxUnhealthyInstancePercent"`
	// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%.
	MaxUnhealthyUpgradedInstancePercent *int `pulumi:"maxUnhealthyUpgradedInstancePercent"`
	// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S).
	PauseTimeBetweenBatches *string `pulumi:"pauseTimeBetweenBatches"`
}

// RollingUpgradePolicyInput is an input type that accepts RollingUpgradePolicyArgs and RollingUpgradePolicyOutput values.
// You can construct a concrete instance of `RollingUpgradePolicyInput` via:
//
//          RollingUpgradePolicyArgs{...}
type RollingUpgradePolicyInput interface {
	pulumi.Input

	ToRollingUpgradePolicyOutput() RollingUpgradePolicyOutput
	ToRollingUpgradePolicyOutputWithContext(context.Context) RollingUpgradePolicyOutput
}

// The configuration parameters used while performing a rolling upgrade.
type RollingUpgradePolicyArgs struct {
	// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%.
	MaxBatchInstancePercent pulumi.IntPtrInput `pulumi:"maxBatchInstancePercent"`
	// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%.
	MaxUnhealthyInstancePercent pulumi.IntPtrInput `pulumi:"maxUnhealthyInstancePercent"`
	// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%.
	MaxUnhealthyUpgradedInstancePercent pulumi.IntPtrInput `pulumi:"maxUnhealthyUpgradedInstancePercent"`
	// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S).
	PauseTimeBetweenBatches pulumi.StringPtrInput `pulumi:"pauseTimeBetweenBatches"`
}

func (RollingUpgradePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RollingUpgradePolicy)(nil)).Elem()
}

func (i RollingUpgradePolicyArgs) ToRollingUpgradePolicyOutput() RollingUpgradePolicyOutput {
	return i.ToRollingUpgradePolicyOutputWithContext(context.Background())
}

func (i RollingUpgradePolicyArgs) ToRollingUpgradePolicyOutputWithContext(ctx context.Context) RollingUpgradePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpgradePolicyOutput)
}

func (i RollingUpgradePolicyArgs) ToRollingUpgradePolicyPtrOutput() RollingUpgradePolicyPtrOutput {
	return i.ToRollingUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i RollingUpgradePolicyArgs) ToRollingUpgradePolicyPtrOutputWithContext(ctx context.Context) RollingUpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpgradePolicyOutput).ToRollingUpgradePolicyPtrOutputWithContext(ctx)
}

// RollingUpgradePolicyPtrInput is an input type that accepts RollingUpgradePolicyArgs, RollingUpgradePolicyPtr and RollingUpgradePolicyPtrOutput values.
// You can construct a concrete instance of `RollingUpgradePolicyPtrInput` via:
//
//          RollingUpgradePolicyArgs{...}
//
//  or:
//
//          nil
type RollingUpgradePolicyPtrInput interface {
	pulumi.Input

	ToRollingUpgradePolicyPtrOutput() RollingUpgradePolicyPtrOutput
	ToRollingUpgradePolicyPtrOutputWithContext(context.Context) RollingUpgradePolicyPtrOutput
}

type rollingUpgradePolicyPtrType RollingUpgradePolicyArgs

func RollingUpgradePolicyPtr(v *RollingUpgradePolicyArgs) RollingUpgradePolicyPtrInput {
	return (*rollingUpgradePolicyPtrType)(v)
}

func (*rollingUpgradePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RollingUpgradePolicy)(nil)).Elem()
}

func (i *rollingUpgradePolicyPtrType) ToRollingUpgradePolicyPtrOutput() RollingUpgradePolicyPtrOutput {
	return i.ToRollingUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i *rollingUpgradePolicyPtrType) ToRollingUpgradePolicyPtrOutputWithContext(ctx context.Context) RollingUpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpgradePolicyPtrOutput)
}

// The configuration parameters used while performing a rolling upgrade.
type RollingUpgradePolicyResponse struct {
	// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%.
	MaxBatchInstancePercent *int `pulumi:"maxBatchInstancePercent"`
	// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%.
	MaxUnhealthyInstancePercent *int `pulumi:"maxUnhealthyInstancePercent"`
	// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%.
	MaxUnhealthyUpgradedInstancePercent *int `pulumi:"maxUnhealthyUpgradedInstancePercent"`
	// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S).
	PauseTimeBetweenBatches *string `pulumi:"pauseTimeBetweenBatches"`
}

// The configuration parameters used while performing a rolling upgrade.
type RollingUpgradePolicyResponseOutput struct{ *pulumi.OutputState }

func (RollingUpgradePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RollingUpgradePolicyResponse)(nil)).Elem()
}

func (o RollingUpgradePolicyResponseOutput) ToRollingUpgradePolicyResponseOutput() RollingUpgradePolicyResponseOutput {
	return o
}

func (o RollingUpgradePolicyResponseOutput) ToRollingUpgradePolicyResponseOutputWithContext(ctx context.Context) RollingUpgradePolicyResponseOutput {
	return o
}

func (o RollingUpgradePolicyResponseOutput) ToRollingUpgradePolicyResponsePtrOutput() RollingUpgradePolicyResponsePtrOutput {
	return o.ToRollingUpgradePolicyResponsePtrOutputWithContext(context.Background())
}

func (o RollingUpgradePolicyResponseOutput) ToRollingUpgradePolicyResponsePtrOutputWithContext(ctx context.Context) RollingUpgradePolicyResponsePtrOutput {
	return o.ApplyT(func(v RollingUpgradePolicyResponse) *RollingUpgradePolicyResponse {
		return &v
	}).(RollingUpgradePolicyResponsePtrOutput)
}

// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%.
func (o RollingUpgradePolicyResponseOutput) MaxBatchInstancePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RollingUpgradePolicyResponse) *int { return v.MaxBatchInstancePercent }).(pulumi.IntPtrOutput)
}

// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%.
func (o RollingUpgradePolicyResponseOutput) MaxUnhealthyInstancePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RollingUpgradePolicyResponse) *int { return v.MaxUnhealthyInstancePercent }).(pulumi.IntPtrOutput)
}

// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%.
func (o RollingUpgradePolicyResponseOutput) MaxUnhealthyUpgradedInstancePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RollingUpgradePolicyResponse) *int { return v.MaxUnhealthyUpgradedInstancePercent }).(pulumi.IntPtrOutput)
}

// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S).
func (o RollingUpgradePolicyResponseOutput) PauseTimeBetweenBatches() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RollingUpgradePolicyResponse) *string { return v.PauseTimeBetweenBatches }).(pulumi.StringPtrOutput)
}

type RollingUpgradePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (RollingUpgradePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RollingUpgradePolicyResponse)(nil)).Elem()
}

func (o RollingUpgradePolicyResponsePtrOutput) ToRollingUpgradePolicyResponsePtrOutput() RollingUpgradePolicyResponsePtrOutput {
	return o
}

func (o RollingUpgradePolicyResponsePtrOutput) ToRollingUpgradePolicyResponsePtrOutputWithContext(ctx context.Context) RollingUpgradePolicyResponsePtrOutput {
	return o
}

func (o RollingUpgradePolicyResponsePtrOutput) Elem() RollingUpgradePolicyResponseOutput {
	return o.ApplyT(func(v *RollingUpgradePolicyResponse) RollingUpgradePolicyResponse { return *v }).(RollingUpgradePolicyResponseOutput)
}

// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%.
func (o RollingUpgradePolicyResponsePtrOutput) MaxBatchInstancePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RollingUpgradePolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxBatchInstancePercent
	}).(pulumi.IntPtrOutput)
}

// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%.
func (o RollingUpgradePolicyResponsePtrOutput) MaxUnhealthyInstancePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RollingUpgradePolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnhealthyInstancePercent
	}).(pulumi.IntPtrOutput)
}

// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%.
func (o RollingUpgradePolicyResponsePtrOutput) MaxUnhealthyUpgradedInstancePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RollingUpgradePolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnhealthyUpgradedInstancePercent
	}).(pulumi.IntPtrOutput)
}

// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S).
func (o RollingUpgradePolicyResponsePtrOutput) PauseTimeBetweenBatches() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RollingUpgradePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.PauseTimeBetweenBatches
	}).(pulumi.StringPtrOutput)
}

// Describes a scale-in policy for a virtual machine scale set.
type ScaleInPolicy struct {
	// The rules to be followed when scaling-in a virtual machine scale set. <br><br> Possible values are: <br><br> **Default** When a virtual machine scale set is scaled in, the scale set will first be balanced across zones if it is a zonal scale set. Then, it will be balanced across Fault Domains as far as possible. Within each Fault Domain, the virtual machines chosen for removal will be the newest ones that are not protected from scale-in. <br><br> **OldestVM** When a virtual machine scale set is being scaled-in, the oldest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the oldest virtual machines that are not protected will be chosen for removal. <br><br> **NewestVM** When a virtual machine scale set is being scaled-in, the newest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the newest virtual machines that are not protected will be chosen for removal. <br><br>
	Rules []string `pulumi:"rules"`
}

// ScaleInPolicyInput is an input type that accepts ScaleInPolicyArgs and ScaleInPolicyOutput values.
// You can construct a concrete instance of `ScaleInPolicyInput` via:
//
//          ScaleInPolicyArgs{...}
type ScaleInPolicyInput interface {
	pulumi.Input

	ToScaleInPolicyOutput() ScaleInPolicyOutput
	ToScaleInPolicyOutputWithContext(context.Context) ScaleInPolicyOutput
}

// Describes a scale-in policy for a virtual machine scale set.
type ScaleInPolicyArgs struct {
	// The rules to be followed when scaling-in a virtual machine scale set. <br><br> Possible values are: <br><br> **Default** When a virtual machine scale set is scaled in, the scale set will first be balanced across zones if it is a zonal scale set. Then, it will be balanced across Fault Domains as far as possible. Within each Fault Domain, the virtual machines chosen for removal will be the newest ones that are not protected from scale-in. <br><br> **OldestVM** When a virtual machine scale set is being scaled-in, the oldest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the oldest virtual machines that are not protected will be chosen for removal. <br><br> **NewestVM** When a virtual machine scale set is being scaled-in, the newest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the newest virtual machines that are not protected will be chosen for removal. <br><br>
	Rules pulumi.StringArrayInput `pulumi:"rules"`
}

func (ScaleInPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleInPolicy)(nil)).Elem()
}

func (i ScaleInPolicyArgs) ToScaleInPolicyOutput() ScaleInPolicyOutput {
	return i.ToScaleInPolicyOutputWithContext(context.Background())
}

func (i ScaleInPolicyArgs) ToScaleInPolicyOutputWithContext(ctx context.Context) ScaleInPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleInPolicyOutput)
}

func (i ScaleInPolicyArgs) ToScaleInPolicyPtrOutput() ScaleInPolicyPtrOutput {
	return i.ToScaleInPolicyPtrOutputWithContext(context.Background())
}

func (i ScaleInPolicyArgs) ToScaleInPolicyPtrOutputWithContext(ctx context.Context) ScaleInPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleInPolicyOutput).ToScaleInPolicyPtrOutputWithContext(ctx)
}

// ScaleInPolicyPtrInput is an input type that accepts ScaleInPolicyArgs, ScaleInPolicyPtr and ScaleInPolicyPtrOutput values.
// You can construct a concrete instance of `ScaleInPolicyPtrInput` via:
//
//          ScaleInPolicyArgs{...}
//
//  or:
//
//          nil
type ScaleInPolicyPtrInput interface {
	pulumi.Input

	ToScaleInPolicyPtrOutput() ScaleInPolicyPtrOutput
	ToScaleInPolicyPtrOutputWithContext(context.Context) ScaleInPolicyPtrOutput
}

type scaleInPolicyPtrType ScaleInPolicyArgs

func ScaleInPolicyPtr(v *ScaleInPolicyArgs) ScaleInPolicyPtrInput {
	return (*scaleInPolicyPtrType)(v)
}

func (*scaleInPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleInPolicy)(nil)).Elem()
}

func (i *scaleInPolicyPtrType) ToScaleInPolicyPtrOutput() ScaleInPolicyPtrOutput {
	return i.ToScaleInPolicyPtrOutputWithContext(context.Background())
}

func (i *scaleInPolicyPtrType) ToScaleInPolicyPtrOutputWithContext(ctx context.Context) ScaleInPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleInPolicyPtrOutput)
}

// Describes a scale-in policy for a virtual machine scale set.
type ScaleInPolicyResponse struct {
	// The rules to be followed when scaling-in a virtual machine scale set. <br><br> Possible values are: <br><br> **Default** When a virtual machine scale set is scaled in, the scale set will first be balanced across zones if it is a zonal scale set. Then, it will be balanced across Fault Domains as far as possible. Within each Fault Domain, the virtual machines chosen for removal will be the newest ones that are not protected from scale-in. <br><br> **OldestVM** When a virtual machine scale set is being scaled-in, the oldest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the oldest virtual machines that are not protected will be chosen for removal. <br><br> **NewestVM** When a virtual machine scale set is being scaled-in, the newest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the newest virtual machines that are not protected will be chosen for removal. <br><br>
	Rules []string `pulumi:"rules"`
}

// Describes a scale-in policy for a virtual machine scale set.
type ScaleInPolicyResponseOutput struct{ *pulumi.OutputState }

func (ScaleInPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleInPolicyResponse)(nil)).Elem()
}

func (o ScaleInPolicyResponseOutput) ToScaleInPolicyResponseOutput() ScaleInPolicyResponseOutput {
	return o
}

func (o ScaleInPolicyResponseOutput) ToScaleInPolicyResponseOutputWithContext(ctx context.Context) ScaleInPolicyResponseOutput {
	return o
}

func (o ScaleInPolicyResponseOutput) ToScaleInPolicyResponsePtrOutput() ScaleInPolicyResponsePtrOutput {
	return o.ToScaleInPolicyResponsePtrOutputWithContext(context.Background())
}

func (o ScaleInPolicyResponseOutput) ToScaleInPolicyResponsePtrOutputWithContext(ctx context.Context) ScaleInPolicyResponsePtrOutput {
	return o.ApplyT(func(v ScaleInPolicyResponse) *ScaleInPolicyResponse {
		return &v
	}).(ScaleInPolicyResponsePtrOutput)
}

// The rules to be followed when scaling-in a virtual machine scale set. <br><br> Possible values are: <br><br> **Default** When a virtual machine scale set is scaled in, the scale set will first be balanced across zones if it is a zonal scale set. Then, it will be balanced across Fault Domains as far as possible. Within each Fault Domain, the virtual machines chosen for removal will be the newest ones that are not protected from scale-in. <br><br> **OldestVM** When a virtual machine scale set is being scaled-in, the oldest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the oldest virtual machines that are not protected will be chosen for removal. <br><br> **NewestVM** When a virtual machine scale set is being scaled-in, the newest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the newest virtual machines that are not protected will be chosen for removal. <br><br>
func (o ScaleInPolicyResponseOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScaleInPolicyResponse) []string { return v.Rules }).(pulumi.StringArrayOutput)
}

type ScaleInPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ScaleInPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleInPolicyResponse)(nil)).Elem()
}

func (o ScaleInPolicyResponsePtrOutput) ToScaleInPolicyResponsePtrOutput() ScaleInPolicyResponsePtrOutput {
	return o
}

func (o ScaleInPolicyResponsePtrOutput) ToScaleInPolicyResponsePtrOutputWithContext(ctx context.Context) ScaleInPolicyResponsePtrOutput {
	return o
}

func (o ScaleInPolicyResponsePtrOutput) Elem() ScaleInPolicyResponseOutput {
	return o.ApplyT(func(v *ScaleInPolicyResponse) ScaleInPolicyResponse { return *v }).(ScaleInPolicyResponseOutput)
}

// The rules to be followed when scaling-in a virtual machine scale set. <br><br> Possible values are: <br><br> **Default** When a virtual machine scale set is scaled in, the scale set will first be balanced across zones if it is a zonal scale set. Then, it will be balanced across Fault Domains as far as possible. Within each Fault Domain, the virtual machines chosen for removal will be the newest ones that are not protected from scale-in. <br><br> **OldestVM** When a virtual machine scale set is being scaled-in, the oldest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the oldest virtual machines that are not protected will be chosen for removal. <br><br> **NewestVM** When a virtual machine scale set is being scaled-in, the newest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the newest virtual machines that are not protected will be chosen for removal. <br><br>
func (o ScaleInPolicyResponsePtrOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScaleInPolicyResponse) []string {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(pulumi.StringArrayOutput)
}

type ScheduledEventsProfile struct {
	// Specifies Terminate Scheduled Event related configurations.
	TerminateNotificationProfile *TerminateNotificationProfile `pulumi:"terminateNotificationProfile"`
}

// ScheduledEventsProfileInput is an input type that accepts ScheduledEventsProfileArgs and ScheduledEventsProfileOutput values.
// You can construct a concrete instance of `ScheduledEventsProfileInput` via:
//
//          ScheduledEventsProfileArgs{...}
type ScheduledEventsProfileInput interface {
	pulumi.Input

	ToScheduledEventsProfileOutput() ScheduledEventsProfileOutput
	ToScheduledEventsProfileOutputWithContext(context.Context) ScheduledEventsProfileOutput
}

type ScheduledEventsProfileArgs struct {
	// Specifies Terminate Scheduled Event related configurations.
	TerminateNotificationProfile TerminateNotificationProfilePtrInput `pulumi:"terminateNotificationProfile"`
}

func (ScheduledEventsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledEventsProfile)(nil)).Elem()
}

func (i ScheduledEventsProfileArgs) ToScheduledEventsProfileOutput() ScheduledEventsProfileOutput {
	return i.ToScheduledEventsProfileOutputWithContext(context.Background())
}

func (i ScheduledEventsProfileArgs) ToScheduledEventsProfileOutputWithContext(ctx context.Context) ScheduledEventsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledEventsProfileOutput)
}

func (i ScheduledEventsProfileArgs) ToScheduledEventsProfilePtrOutput() ScheduledEventsProfilePtrOutput {
	return i.ToScheduledEventsProfilePtrOutputWithContext(context.Background())
}

func (i ScheduledEventsProfileArgs) ToScheduledEventsProfilePtrOutputWithContext(ctx context.Context) ScheduledEventsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledEventsProfileOutput).ToScheduledEventsProfilePtrOutputWithContext(ctx)
}

// ScheduledEventsProfilePtrInput is an input type that accepts ScheduledEventsProfileArgs, ScheduledEventsProfilePtr and ScheduledEventsProfilePtrOutput values.
// You can construct a concrete instance of `ScheduledEventsProfilePtrInput` via:
//
//          ScheduledEventsProfileArgs{...}
//
//  or:
//
//          nil
type ScheduledEventsProfilePtrInput interface {
	pulumi.Input

	ToScheduledEventsProfilePtrOutput() ScheduledEventsProfilePtrOutput
	ToScheduledEventsProfilePtrOutputWithContext(context.Context) ScheduledEventsProfilePtrOutput
}

type scheduledEventsProfilePtrType ScheduledEventsProfileArgs

func ScheduledEventsProfilePtr(v *ScheduledEventsProfileArgs) ScheduledEventsProfilePtrInput {
	return (*scheduledEventsProfilePtrType)(v)
}

func (*scheduledEventsProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledEventsProfile)(nil)).Elem()
}

func (i *scheduledEventsProfilePtrType) ToScheduledEventsProfilePtrOutput() ScheduledEventsProfilePtrOutput {
	return i.ToScheduledEventsProfilePtrOutputWithContext(context.Background())
}

func (i *scheduledEventsProfilePtrType) ToScheduledEventsProfilePtrOutputWithContext(ctx context.Context) ScheduledEventsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledEventsProfilePtrOutput)
}

type ScheduledEventsProfileResponse struct {
	// Specifies Terminate Scheduled Event related configurations.
	TerminateNotificationProfile *TerminateNotificationProfileResponse `pulumi:"terminateNotificationProfile"`
}

type ScheduledEventsProfileResponseOutput struct{ *pulumi.OutputState }

func (ScheduledEventsProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledEventsProfileResponse)(nil)).Elem()
}

func (o ScheduledEventsProfileResponseOutput) ToScheduledEventsProfileResponseOutput() ScheduledEventsProfileResponseOutput {
	return o
}

func (o ScheduledEventsProfileResponseOutput) ToScheduledEventsProfileResponseOutputWithContext(ctx context.Context) ScheduledEventsProfileResponseOutput {
	return o
}

func (o ScheduledEventsProfileResponseOutput) ToScheduledEventsProfileResponsePtrOutput() ScheduledEventsProfileResponsePtrOutput {
	return o.ToScheduledEventsProfileResponsePtrOutputWithContext(context.Background())
}

func (o ScheduledEventsProfileResponseOutput) ToScheduledEventsProfileResponsePtrOutputWithContext(ctx context.Context) ScheduledEventsProfileResponsePtrOutput {
	return o.ApplyT(func(v ScheduledEventsProfileResponse) *ScheduledEventsProfileResponse {
		return &v
	}).(ScheduledEventsProfileResponsePtrOutput)
}

// Specifies Terminate Scheduled Event related configurations.
func (o ScheduledEventsProfileResponseOutput) TerminateNotificationProfile() TerminateNotificationProfileResponsePtrOutput {
	return o.ApplyT(func(v ScheduledEventsProfileResponse) *TerminateNotificationProfileResponse {
		return v.TerminateNotificationProfile
	}).(TerminateNotificationProfileResponsePtrOutput)
}

type ScheduledEventsProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ScheduledEventsProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledEventsProfileResponse)(nil)).Elem()
}

func (o ScheduledEventsProfileResponsePtrOutput) ToScheduledEventsProfileResponsePtrOutput() ScheduledEventsProfileResponsePtrOutput {
	return o
}

func (o ScheduledEventsProfileResponsePtrOutput) ToScheduledEventsProfileResponsePtrOutputWithContext(ctx context.Context) ScheduledEventsProfileResponsePtrOutput {
	return o
}

func (o ScheduledEventsProfileResponsePtrOutput) Elem() ScheduledEventsProfileResponseOutput {
	return o.ApplyT(func(v *ScheduledEventsProfileResponse) ScheduledEventsProfileResponse { return *v }).(ScheduledEventsProfileResponseOutput)
}

// Specifies Terminate Scheduled Event related configurations.
func (o ScheduledEventsProfileResponsePtrOutput) TerminateNotificationProfile() TerminateNotificationProfileResponsePtrOutput {
	return o.ApplyT(func(v *ScheduledEventsProfileResponse) *TerminateNotificationProfileResponse {
		if v == nil {
			return nil
		}
		return v.TerminateNotificationProfile
	}).(TerminateNotificationProfileResponsePtrOutput)
}

// Specifies the Security profile settings for the virtual machine or virtual machine scale set.
type SecurityProfile struct {
	// This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine or virtual machine scale set. This will enable the encryption for all the disks including Resource/Temp disk at host itself. <br><br> Default: The Encryption at host will be disabled unless this property is set to true for the resource.
	EncryptionAtHost *bool `pulumi:"encryptionAtHost"`
}

// SecurityProfileInput is an input type that accepts SecurityProfileArgs and SecurityProfileOutput values.
// You can construct a concrete instance of `SecurityProfileInput` via:
//
//          SecurityProfileArgs{...}
type SecurityProfileInput interface {
	pulumi.Input

	ToSecurityProfileOutput() SecurityProfileOutput
	ToSecurityProfileOutputWithContext(context.Context) SecurityProfileOutput
}

// Specifies the Security profile settings for the virtual machine or virtual machine scale set.
type SecurityProfileArgs struct {
	// This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine or virtual machine scale set. This will enable the encryption for all the disks including Resource/Temp disk at host itself. <br><br> Default: The Encryption at host will be disabled unless this property is set to true for the resource.
	EncryptionAtHost pulumi.BoolPtrInput `pulumi:"encryptionAtHost"`
}

func (SecurityProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityProfile)(nil)).Elem()
}

func (i SecurityProfileArgs) ToSecurityProfileOutput() SecurityProfileOutput {
	return i.ToSecurityProfileOutputWithContext(context.Background())
}

func (i SecurityProfileArgs) ToSecurityProfileOutputWithContext(ctx context.Context) SecurityProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityProfileOutput)
}

func (i SecurityProfileArgs) ToSecurityProfilePtrOutput() SecurityProfilePtrOutput {
	return i.ToSecurityProfilePtrOutputWithContext(context.Background())
}

func (i SecurityProfileArgs) ToSecurityProfilePtrOutputWithContext(ctx context.Context) SecurityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityProfileOutput).ToSecurityProfilePtrOutputWithContext(ctx)
}

// SecurityProfilePtrInput is an input type that accepts SecurityProfileArgs, SecurityProfilePtr and SecurityProfilePtrOutput values.
// You can construct a concrete instance of `SecurityProfilePtrInput` via:
//
//          SecurityProfileArgs{...}
//
//  or:
//
//          nil
type SecurityProfilePtrInput interface {
	pulumi.Input

	ToSecurityProfilePtrOutput() SecurityProfilePtrOutput
	ToSecurityProfilePtrOutputWithContext(context.Context) SecurityProfilePtrOutput
}

type securityProfilePtrType SecurityProfileArgs

func SecurityProfilePtr(v *SecurityProfileArgs) SecurityProfilePtrInput {
	return (*securityProfilePtrType)(v)
}

func (*securityProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityProfile)(nil)).Elem()
}

func (i *securityProfilePtrType) ToSecurityProfilePtrOutput() SecurityProfilePtrOutput {
	return i.ToSecurityProfilePtrOutputWithContext(context.Background())
}

func (i *securityProfilePtrType) ToSecurityProfilePtrOutputWithContext(ctx context.Context) SecurityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityProfilePtrOutput)
}

// Specifies the Security profile settings for the virtual machine or virtual machine scale set.
type SecurityProfileResponse struct {
	// This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine or virtual machine scale set. This will enable the encryption for all the disks including Resource/Temp disk at host itself. <br><br> Default: The Encryption at host will be disabled unless this property is set to true for the resource.
	EncryptionAtHost *bool `pulumi:"encryptionAtHost"`
}

// Specifies the Security profile settings for the virtual machine or virtual machine scale set.
type SecurityProfileResponseOutput struct{ *pulumi.OutputState }

func (SecurityProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityProfileResponse)(nil)).Elem()
}

func (o SecurityProfileResponseOutput) ToSecurityProfileResponseOutput() SecurityProfileResponseOutput {
	return o
}

func (o SecurityProfileResponseOutput) ToSecurityProfileResponseOutputWithContext(ctx context.Context) SecurityProfileResponseOutput {
	return o
}

func (o SecurityProfileResponseOutput) ToSecurityProfileResponsePtrOutput() SecurityProfileResponsePtrOutput {
	return o.ToSecurityProfileResponsePtrOutputWithContext(context.Background())
}

func (o SecurityProfileResponseOutput) ToSecurityProfileResponsePtrOutputWithContext(ctx context.Context) SecurityProfileResponsePtrOutput {
	return o.ApplyT(func(v SecurityProfileResponse) *SecurityProfileResponse {
		return &v
	}).(SecurityProfileResponsePtrOutput)
}

// This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine or virtual machine scale set. This will enable the encryption for all the disks including Resource/Temp disk at host itself. <br><br> Default: The Encryption at host will be disabled unless this property is set to true for the resource.
func (o SecurityProfileResponseOutput) EncryptionAtHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecurityProfileResponse) *bool { return v.EncryptionAtHost }).(pulumi.BoolPtrOutput)
}

type SecurityProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (SecurityProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityProfileResponse)(nil)).Elem()
}

func (o SecurityProfileResponsePtrOutput) ToSecurityProfileResponsePtrOutput() SecurityProfileResponsePtrOutput {
	return o
}

func (o SecurityProfileResponsePtrOutput) ToSecurityProfileResponsePtrOutputWithContext(ctx context.Context) SecurityProfileResponsePtrOutput {
	return o
}

func (o SecurityProfileResponsePtrOutput) Elem() SecurityProfileResponseOutput {
	return o.ApplyT(func(v *SecurityProfileResponse) SecurityProfileResponse { return *v }).(SecurityProfileResponseOutput)
}

// This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine or virtual machine scale set. This will enable the encryption for all the disks including Resource/Temp disk at host itself. <br><br> Default: The Encryption at host will be disabled unless this property is set to true for the resource.
func (o SecurityProfileResponsePtrOutput) EncryptionAtHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptionAtHost
	}).(pulumi.BoolPtrOutput)
}

type ShareInfoElementResponse struct {
	// A relative URI containing the ID of the VM that has the disk attached.
	VmUri string `pulumi:"vmUri"`
}

type ShareInfoElementResponseOutput struct{ *pulumi.OutputState }

func (ShareInfoElementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShareInfoElementResponse)(nil)).Elem()
}

func (o ShareInfoElementResponseOutput) ToShareInfoElementResponseOutput() ShareInfoElementResponseOutput {
	return o
}

func (o ShareInfoElementResponseOutput) ToShareInfoElementResponseOutputWithContext(ctx context.Context) ShareInfoElementResponseOutput {
	return o
}

// A relative URI containing the ID of the VM that has the disk attached.
func (o ShareInfoElementResponseOutput) VmUri() pulumi.StringOutput {
	return o.ApplyT(func(v ShareInfoElementResponse) string { return v.VmUri }).(pulumi.StringOutput)
}

type ShareInfoElementResponseArrayOutput struct{ *pulumi.OutputState }

func (ShareInfoElementResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ShareInfoElementResponse)(nil)).Elem()
}

func (o ShareInfoElementResponseArrayOutput) ToShareInfoElementResponseArrayOutput() ShareInfoElementResponseArrayOutput {
	return o
}

func (o ShareInfoElementResponseArrayOutput) ToShareInfoElementResponseArrayOutputWithContext(ctx context.Context) ShareInfoElementResponseArrayOutput {
	return o
}

func (o ShareInfoElementResponseArrayOutput) Index(i pulumi.IntInput) ShareInfoElementResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ShareInfoElementResponse {
		return vs[0].([]ShareInfoElementResponse)[vs[1].(int)]
	}).(ShareInfoElementResponseOutput)
}

// Profile for gallery sharing to subscription or tenant
type SharingProfile struct {
	// This property allows you to specify the permission of sharing gallery. <br><br> Possible values are: <br><br> **Private** <br><br> **Groups**
	Permissions *string `pulumi:"permissions"`
}

// SharingProfileInput is an input type that accepts SharingProfileArgs and SharingProfileOutput values.
// You can construct a concrete instance of `SharingProfileInput` via:
//
//          SharingProfileArgs{...}
type SharingProfileInput interface {
	pulumi.Input

	ToSharingProfileOutput() SharingProfileOutput
	ToSharingProfileOutputWithContext(context.Context) SharingProfileOutput
}

// Profile for gallery sharing to subscription or tenant
type SharingProfileArgs struct {
	// This property allows you to specify the permission of sharing gallery. <br><br> Possible values are: <br><br> **Private** <br><br> **Groups**
	Permissions pulumi.StringPtrInput `pulumi:"permissions"`
}

func (SharingProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharingProfile)(nil)).Elem()
}

func (i SharingProfileArgs) ToSharingProfileOutput() SharingProfileOutput {
	return i.ToSharingProfileOutputWithContext(context.Background())
}

func (i SharingProfileArgs) ToSharingProfileOutputWithContext(ctx context.Context) SharingProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharingProfileOutput)
}

func (i SharingProfileArgs) ToSharingProfilePtrOutput() SharingProfilePtrOutput {
	return i.ToSharingProfilePtrOutputWithContext(context.Background())
}

func (i SharingProfileArgs) ToSharingProfilePtrOutputWithContext(ctx context.Context) SharingProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharingProfileOutput).ToSharingProfilePtrOutputWithContext(ctx)
}

// SharingProfilePtrInput is an input type that accepts SharingProfileArgs, SharingProfilePtr and SharingProfilePtrOutput values.
// You can construct a concrete instance of `SharingProfilePtrInput` via:
//
//          SharingProfileArgs{...}
//
//  or:
//
//          nil
type SharingProfilePtrInput interface {
	pulumi.Input

	ToSharingProfilePtrOutput() SharingProfilePtrOutput
	ToSharingProfilePtrOutputWithContext(context.Context) SharingProfilePtrOutput
}

type sharingProfilePtrType SharingProfileArgs

func SharingProfilePtr(v *SharingProfileArgs) SharingProfilePtrInput {
	return (*sharingProfilePtrType)(v)
}

func (*sharingProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SharingProfile)(nil)).Elem()
}

func (i *sharingProfilePtrType) ToSharingProfilePtrOutput() SharingProfilePtrOutput {
	return i.ToSharingProfilePtrOutputWithContext(context.Background())
}

func (i *sharingProfilePtrType) ToSharingProfilePtrOutputWithContext(ctx context.Context) SharingProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharingProfilePtrOutput)
}

// Group of the gallery sharing profile
type SharingProfileGroupResponse struct {
	// A list of subscription/tenant ids the gallery is aimed to be shared to.
	Ids []string `pulumi:"ids"`
	// This property allows you to specify the type of sharing group. <br><br> Possible values are: <br><br> **Subscriptions** <br><br> **AADTenants**
	Type *string `pulumi:"type"`
}

// Group of the gallery sharing profile
type SharingProfileGroupResponseOutput struct{ *pulumi.OutputState }

func (SharingProfileGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharingProfileGroupResponse)(nil)).Elem()
}

func (o SharingProfileGroupResponseOutput) ToSharingProfileGroupResponseOutput() SharingProfileGroupResponseOutput {
	return o
}

func (o SharingProfileGroupResponseOutput) ToSharingProfileGroupResponseOutputWithContext(ctx context.Context) SharingProfileGroupResponseOutput {
	return o
}

// A list of subscription/tenant ids the gallery is aimed to be shared to.
func (o SharingProfileGroupResponseOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SharingProfileGroupResponse) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// This property allows you to specify the type of sharing group. <br><br> Possible values are: <br><br> **Subscriptions** <br><br> **AADTenants**
func (o SharingProfileGroupResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharingProfileGroupResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SharingProfileGroupResponseArrayOutput struct{ *pulumi.OutputState }

func (SharingProfileGroupResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharingProfileGroupResponse)(nil)).Elem()
}

func (o SharingProfileGroupResponseArrayOutput) ToSharingProfileGroupResponseArrayOutput() SharingProfileGroupResponseArrayOutput {
	return o
}

func (o SharingProfileGroupResponseArrayOutput) ToSharingProfileGroupResponseArrayOutputWithContext(ctx context.Context) SharingProfileGroupResponseArrayOutput {
	return o
}

func (o SharingProfileGroupResponseArrayOutput) Index(i pulumi.IntInput) SharingProfileGroupResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SharingProfileGroupResponse {
		return vs[0].([]SharingProfileGroupResponse)[vs[1].(int)]
	}).(SharingProfileGroupResponseOutput)
}

// Profile for gallery sharing to subscription or tenant
type SharingProfileResponse struct {
	// A list of sharing profile groups.
	Groups []SharingProfileGroupResponse `pulumi:"groups"`
	// This property allows you to specify the permission of sharing gallery. <br><br> Possible values are: <br><br> **Private** <br><br> **Groups**
	Permissions *string `pulumi:"permissions"`
}

// Profile for gallery sharing to subscription or tenant
type SharingProfileResponseOutput struct{ *pulumi.OutputState }

func (SharingProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharingProfileResponse)(nil)).Elem()
}

func (o SharingProfileResponseOutput) ToSharingProfileResponseOutput() SharingProfileResponseOutput {
	return o
}

func (o SharingProfileResponseOutput) ToSharingProfileResponseOutputWithContext(ctx context.Context) SharingProfileResponseOutput {
	return o
}

func (o SharingProfileResponseOutput) ToSharingProfileResponsePtrOutput() SharingProfileResponsePtrOutput {
	return o.ToSharingProfileResponsePtrOutputWithContext(context.Background())
}

func (o SharingProfileResponseOutput) ToSharingProfileResponsePtrOutputWithContext(ctx context.Context) SharingProfileResponsePtrOutput {
	return o.ApplyT(func(v SharingProfileResponse) *SharingProfileResponse {
		return &v
	}).(SharingProfileResponsePtrOutput)
}

// A list of sharing profile groups.
func (o SharingProfileResponseOutput) Groups() SharingProfileGroupResponseArrayOutput {
	return o.ApplyT(func(v SharingProfileResponse) []SharingProfileGroupResponse { return v.Groups }).(SharingProfileGroupResponseArrayOutput)
}

// This property allows you to specify the permission of sharing gallery. <br><br> Possible values are: <br><br> **Private** <br><br> **Groups**
func (o SharingProfileResponseOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharingProfileResponse) *string { return v.Permissions }).(pulumi.StringPtrOutput)
}

type SharingProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (SharingProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharingProfileResponse)(nil)).Elem()
}

func (o SharingProfileResponsePtrOutput) ToSharingProfileResponsePtrOutput() SharingProfileResponsePtrOutput {
	return o
}

func (o SharingProfileResponsePtrOutput) ToSharingProfileResponsePtrOutputWithContext(ctx context.Context) SharingProfileResponsePtrOutput {
	return o
}

func (o SharingProfileResponsePtrOutput) Elem() SharingProfileResponseOutput {
	return o.ApplyT(func(v *SharingProfileResponse) SharingProfileResponse { return *v }).(SharingProfileResponseOutput)
}

// A list of sharing profile groups.
func (o SharingProfileResponsePtrOutput) Groups() SharingProfileGroupResponseArrayOutput {
	return o.ApplyT(func(v *SharingProfileResponse) []SharingProfileGroupResponse {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(SharingProfileGroupResponseArrayOutput)
}

// This property allows you to specify the permission of sharing gallery. <br><br> Possible values are: <br><br> **Private** <br><br> **Groups**
func (o SharingProfileResponsePtrOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharingProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Permissions
	}).(pulumi.StringPtrOutput)
}

// Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is currently on, you need to deallocate the VMs in the scale set before you modify the SKU name.
type Sku struct {
	// Specifies the number of virtual machines in the scale set.
	Capacity *int `pulumi:"capacity"`
	// The sku name.
	Name *string `pulumi:"name"`
	// Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
	Tier *string `pulumi:"tier"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//          SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is currently on, you need to deallocate the VMs in the scale set before you modify the SKU name.
type SkuArgs struct {
	// Specifies the number of virtual machines in the scale set.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// The sku name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//          SkuArgs{...}
//
//  or:
//
//          nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is currently on, you need to deallocate the VMs in the scale set before you modify the SKU name.
type SkuResponse struct {
	// Specifies the number of virtual machines in the scale set.
	Capacity *int `pulumi:"capacity"`
	// The sku name.
	Name *string `pulumi:"name"`
	// Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
	Tier *string `pulumi:"tier"`
}

// Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is currently on, you need to deallocate the VMs in the scale set before you modify the SKU name.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (o SkuResponseOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o.ApplyT(func(v SkuResponse) *SkuResponse {
		return &v
	}).(SkuResponsePtrOutput)
}

// Specifies the number of virtual machines in the scale set.
func (o SkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The sku name.
func (o SkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
func (o SkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse { return *v }).(SkuResponseOutput)
}

// Specifies the number of virtual machines in the scale set.
func (o SkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The sku name.
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
type SnapshotSku struct {
	// The sku name.
	Name *string `pulumi:"name"`
}

// SnapshotSkuInput is an input type that accepts SnapshotSkuArgs and SnapshotSkuOutput values.
// You can construct a concrete instance of `SnapshotSkuInput` via:
//
//          SnapshotSkuArgs{...}
type SnapshotSkuInput interface {
	pulumi.Input

	ToSnapshotSkuOutput() SnapshotSkuOutput
	ToSnapshotSkuOutputWithContext(context.Context) SnapshotSkuOutput
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
type SnapshotSkuArgs struct {
	// The sku name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SnapshotSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotSku)(nil)).Elem()
}

func (i SnapshotSkuArgs) ToSnapshotSkuOutput() SnapshotSkuOutput {
	return i.ToSnapshotSkuOutputWithContext(context.Background())
}

func (i SnapshotSkuArgs) ToSnapshotSkuOutputWithContext(ctx context.Context) SnapshotSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSkuOutput)
}

func (i SnapshotSkuArgs) ToSnapshotSkuPtrOutput() SnapshotSkuPtrOutput {
	return i.ToSnapshotSkuPtrOutputWithContext(context.Background())
}

func (i SnapshotSkuArgs) ToSnapshotSkuPtrOutputWithContext(ctx context.Context) SnapshotSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSkuOutput).ToSnapshotSkuPtrOutputWithContext(ctx)
}

// SnapshotSkuPtrInput is an input type that accepts SnapshotSkuArgs, SnapshotSkuPtr and SnapshotSkuPtrOutput values.
// You can construct a concrete instance of `SnapshotSkuPtrInput` via:
//
//          SnapshotSkuArgs{...}
//
//  or:
//
//          nil
type SnapshotSkuPtrInput interface {
	pulumi.Input

	ToSnapshotSkuPtrOutput() SnapshotSkuPtrOutput
	ToSnapshotSkuPtrOutputWithContext(context.Context) SnapshotSkuPtrOutput
}

type snapshotSkuPtrType SnapshotSkuArgs

func SnapshotSkuPtr(v *SnapshotSkuArgs) SnapshotSkuPtrInput {
	return (*snapshotSkuPtrType)(v)
}

func (*snapshotSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotSku)(nil)).Elem()
}

func (i *snapshotSkuPtrType) ToSnapshotSkuPtrOutput() SnapshotSkuPtrOutput {
	return i.ToSnapshotSkuPtrOutputWithContext(context.Background())
}

func (i *snapshotSkuPtrType) ToSnapshotSkuPtrOutputWithContext(ctx context.Context) SnapshotSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSkuPtrOutput)
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
type SnapshotSkuResponse struct {
	// The sku name.
	Name *string `pulumi:"name"`
	// The sku tier.
	Tier string `pulumi:"tier"`
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS.
type SnapshotSkuResponseOutput struct{ *pulumi.OutputState }

func (SnapshotSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotSkuResponse)(nil)).Elem()
}

func (o SnapshotSkuResponseOutput) ToSnapshotSkuResponseOutput() SnapshotSkuResponseOutput {
	return o
}

func (o SnapshotSkuResponseOutput) ToSnapshotSkuResponseOutputWithContext(ctx context.Context) SnapshotSkuResponseOutput {
	return o
}

func (o SnapshotSkuResponseOutput) ToSnapshotSkuResponsePtrOutput() SnapshotSkuResponsePtrOutput {
	return o.ToSnapshotSkuResponsePtrOutputWithContext(context.Background())
}

func (o SnapshotSkuResponseOutput) ToSnapshotSkuResponsePtrOutputWithContext(ctx context.Context) SnapshotSkuResponsePtrOutput {
	return o.ApplyT(func(v SnapshotSkuResponse) *SnapshotSkuResponse {
		return &v
	}).(SnapshotSkuResponsePtrOutput)
}

// The sku name.
func (o SnapshotSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The sku tier.
func (o SnapshotSkuResponseOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotSkuResponse) string { return v.Tier }).(pulumi.StringOutput)
}

type SnapshotSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SnapshotSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotSkuResponse)(nil)).Elem()
}

func (o SnapshotSkuResponsePtrOutput) ToSnapshotSkuResponsePtrOutput() SnapshotSkuResponsePtrOutput {
	return o
}

func (o SnapshotSkuResponsePtrOutput) ToSnapshotSkuResponsePtrOutputWithContext(ctx context.Context) SnapshotSkuResponsePtrOutput {
	return o
}

func (o SnapshotSkuResponsePtrOutput) Elem() SnapshotSkuResponseOutput {
	return o.ApplyT(func(v *SnapshotSkuResponse) SnapshotSkuResponse { return *v }).(SnapshotSkuResponseOutput)
}

// The sku name.
func (o SnapshotSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The sku tier.
func (o SnapshotSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotSkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Tier
	}).(pulumi.StringPtrOutput)
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVault struct {
	// Resource Id
	Id *string `pulumi:"id"`
}

// SourceVaultInput is an input type that accepts SourceVaultArgs and SourceVaultOutput values.
// You can construct a concrete instance of `SourceVaultInput` via:
//
//          SourceVaultArgs{...}
type SourceVaultInput interface {
	pulumi.Input

	ToSourceVaultOutput() SourceVaultOutput
	ToSourceVaultOutputWithContext(context.Context) SourceVaultOutput
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVaultArgs struct {
	// Resource Id
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SourceVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceVault)(nil)).Elem()
}

func (i SourceVaultArgs) ToSourceVaultOutput() SourceVaultOutput {
	return i.ToSourceVaultOutputWithContext(context.Background())
}

func (i SourceVaultArgs) ToSourceVaultOutputWithContext(ctx context.Context) SourceVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVaultOutput)
}

func (i SourceVaultArgs) ToSourceVaultPtrOutput() SourceVaultPtrOutput {
	return i.ToSourceVaultPtrOutputWithContext(context.Background())
}

func (i SourceVaultArgs) ToSourceVaultPtrOutputWithContext(ctx context.Context) SourceVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVaultOutput).ToSourceVaultPtrOutputWithContext(ctx)
}

// SourceVaultPtrInput is an input type that accepts SourceVaultArgs, SourceVaultPtr and SourceVaultPtrOutput values.
// You can construct a concrete instance of `SourceVaultPtrInput` via:
//
//          SourceVaultArgs{...}
//
//  or:
//
//          nil
type SourceVaultPtrInput interface {
	pulumi.Input

	ToSourceVaultPtrOutput() SourceVaultPtrOutput
	ToSourceVaultPtrOutputWithContext(context.Context) SourceVaultPtrOutput
}

type sourceVaultPtrType SourceVaultArgs

func SourceVaultPtr(v *SourceVaultArgs) SourceVaultPtrInput {
	return (*sourceVaultPtrType)(v)
}

func (*sourceVaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceVault)(nil)).Elem()
}

func (i *sourceVaultPtrType) ToSourceVaultPtrOutput() SourceVaultPtrOutput {
	return i.ToSourceVaultPtrOutputWithContext(context.Background())
}

func (i *sourceVaultPtrType) ToSourceVaultPtrOutputWithContext(ctx context.Context) SourceVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVaultPtrOutput)
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVaultResponse struct {
	// Resource Id
	Id *string `pulumi:"id"`
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVaultResponseOutput struct{ *pulumi.OutputState }

func (SourceVaultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceVaultResponse)(nil)).Elem()
}

func (o SourceVaultResponseOutput) ToSourceVaultResponseOutput() SourceVaultResponseOutput {
	return o
}

func (o SourceVaultResponseOutput) ToSourceVaultResponseOutputWithContext(ctx context.Context) SourceVaultResponseOutput {
	return o
}

func (o SourceVaultResponseOutput) ToSourceVaultResponsePtrOutput() SourceVaultResponsePtrOutput {
	return o.ToSourceVaultResponsePtrOutputWithContext(context.Background())
}

func (o SourceVaultResponseOutput) ToSourceVaultResponsePtrOutputWithContext(ctx context.Context) SourceVaultResponsePtrOutput {
	return o.ApplyT(func(v SourceVaultResponse) *SourceVaultResponse {
		return &v
	}).(SourceVaultResponsePtrOutput)
}

// Resource Id
func (o SourceVaultResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceVaultResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SourceVaultResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceVaultResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceVaultResponse)(nil)).Elem()
}

func (o SourceVaultResponsePtrOutput) ToSourceVaultResponsePtrOutput() SourceVaultResponsePtrOutput {
	return o
}

func (o SourceVaultResponsePtrOutput) ToSourceVaultResponsePtrOutputWithContext(ctx context.Context) SourceVaultResponsePtrOutput {
	return o
}

func (o SourceVaultResponsePtrOutput) Elem() SourceVaultResponseOutput {
	return o.ApplyT(func(v *SourceVaultResponse) SourceVaultResponse { return *v }).(SourceVaultResponseOutput)
}

// Resource Id
func (o SourceVaultResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceVaultResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// SSH configuration for Linux based VMs running on Azure
type SshConfiguration struct {
	// The list of SSH public keys used to authenticate with linux based VMs.
	PublicKeys []SshPublicKeyType `pulumi:"publicKeys"`
}

// SshConfigurationInput is an input type that accepts SshConfigurationArgs and SshConfigurationOutput values.
// You can construct a concrete instance of `SshConfigurationInput` via:
//
//          SshConfigurationArgs{...}
type SshConfigurationInput interface {
	pulumi.Input

	ToSshConfigurationOutput() SshConfigurationOutput
	ToSshConfigurationOutputWithContext(context.Context) SshConfigurationOutput
}

// SSH configuration for Linux based VMs running on Azure
type SshConfigurationArgs struct {
	// The list of SSH public keys used to authenticate with linux based VMs.
	PublicKeys SshPublicKeyTypeArrayInput `pulumi:"publicKeys"`
}

func (SshConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshConfiguration)(nil)).Elem()
}

func (i SshConfigurationArgs) ToSshConfigurationOutput() SshConfigurationOutput {
	return i.ToSshConfigurationOutputWithContext(context.Background())
}

func (i SshConfigurationArgs) ToSshConfigurationOutputWithContext(ctx context.Context) SshConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshConfigurationOutput)
}

func (i SshConfigurationArgs) ToSshConfigurationPtrOutput() SshConfigurationPtrOutput {
	return i.ToSshConfigurationPtrOutputWithContext(context.Background())
}

func (i SshConfigurationArgs) ToSshConfigurationPtrOutputWithContext(ctx context.Context) SshConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshConfigurationOutput).ToSshConfigurationPtrOutputWithContext(ctx)
}

// SshConfigurationPtrInput is an input type that accepts SshConfigurationArgs, SshConfigurationPtr and SshConfigurationPtrOutput values.
// You can construct a concrete instance of `SshConfigurationPtrInput` via:
//
//          SshConfigurationArgs{...}
//
//  or:
//
//          nil
type SshConfigurationPtrInput interface {
	pulumi.Input

	ToSshConfigurationPtrOutput() SshConfigurationPtrOutput
	ToSshConfigurationPtrOutputWithContext(context.Context) SshConfigurationPtrOutput
}

type sshConfigurationPtrType SshConfigurationArgs

func SshConfigurationPtr(v *SshConfigurationArgs) SshConfigurationPtrInput {
	return (*sshConfigurationPtrType)(v)
}

func (*sshConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SshConfiguration)(nil)).Elem()
}

func (i *sshConfigurationPtrType) ToSshConfigurationPtrOutput() SshConfigurationPtrOutput {
	return i.ToSshConfigurationPtrOutputWithContext(context.Background())
}

func (i *sshConfigurationPtrType) ToSshConfigurationPtrOutputWithContext(ctx context.Context) SshConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshConfigurationPtrOutput)
}

// SSH configuration for Linux based VMs running on Azure
type SshConfigurationResponse struct {
	// The list of SSH public keys used to authenticate with linux based VMs.
	PublicKeys []SshPublicKeyResponse `pulumi:"publicKeys"`
}

// SSH configuration for Linux based VMs running on Azure
type SshConfigurationResponseOutput struct{ *pulumi.OutputState }

func (SshConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshConfigurationResponse)(nil)).Elem()
}

func (o SshConfigurationResponseOutput) ToSshConfigurationResponseOutput() SshConfigurationResponseOutput {
	return o
}

func (o SshConfigurationResponseOutput) ToSshConfigurationResponseOutputWithContext(ctx context.Context) SshConfigurationResponseOutput {
	return o
}

func (o SshConfigurationResponseOutput) ToSshConfigurationResponsePtrOutput() SshConfigurationResponsePtrOutput {
	return o.ToSshConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o SshConfigurationResponseOutput) ToSshConfigurationResponsePtrOutputWithContext(ctx context.Context) SshConfigurationResponsePtrOutput {
	return o.ApplyT(func(v SshConfigurationResponse) *SshConfigurationResponse {
		return &v
	}).(SshConfigurationResponsePtrOutput)
}

// The list of SSH public keys used to authenticate with linux based VMs.
func (o SshConfigurationResponseOutput) PublicKeys() SshPublicKeyResponseArrayOutput {
	return o.ApplyT(func(v SshConfigurationResponse) []SshPublicKeyResponse { return v.PublicKeys }).(SshPublicKeyResponseArrayOutput)
}

type SshConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (SshConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshConfigurationResponse)(nil)).Elem()
}

func (o SshConfigurationResponsePtrOutput) ToSshConfigurationResponsePtrOutput() SshConfigurationResponsePtrOutput {
	return o
}

func (o SshConfigurationResponsePtrOutput) ToSshConfigurationResponsePtrOutputWithContext(ctx context.Context) SshConfigurationResponsePtrOutput {
	return o
}

func (o SshConfigurationResponsePtrOutput) Elem() SshConfigurationResponseOutput {
	return o.ApplyT(func(v *SshConfigurationResponse) SshConfigurationResponse { return *v }).(SshConfigurationResponseOutput)
}

// The list of SSH public keys used to authenticate with linux based VMs.
func (o SshConfigurationResponsePtrOutput) PublicKeys() SshPublicKeyResponseArrayOutput {
	return o.ApplyT(func(v *SshConfigurationResponse) []SshPublicKeyResponse {
		if v == nil {
			return nil
		}
		return v.PublicKeys
	}).(SshPublicKeyResponseArrayOutput)
}

// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
type SshPublicKeyType struct {
	// SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
	KeyData *string `pulumi:"keyData"`
	// Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
	Path *string `pulumi:"path"`
}

// SshPublicKeyTypeInput is an input type that accepts SshPublicKeyTypeArgs and SshPublicKeyTypeOutput values.
// You can construct a concrete instance of `SshPublicKeyTypeInput` via:
//
//          SshPublicKeyTypeArgs{...}
type SshPublicKeyTypeInput interface {
	pulumi.Input

	ToSshPublicKeyTypeOutput() SshPublicKeyTypeOutput
	ToSshPublicKeyTypeOutputWithContext(context.Context) SshPublicKeyTypeOutput
}

// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
type SshPublicKeyTypeArgs struct {
	// SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
	KeyData pulumi.StringPtrInput `pulumi:"keyData"`
	// Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (SshPublicKeyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshPublicKeyType)(nil)).Elem()
}

func (i SshPublicKeyTypeArgs) ToSshPublicKeyTypeOutput() SshPublicKeyTypeOutput {
	return i.ToSshPublicKeyTypeOutputWithContext(context.Background())
}

func (i SshPublicKeyTypeArgs) ToSshPublicKeyTypeOutputWithContext(ctx context.Context) SshPublicKeyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshPublicKeyTypeOutput)
}

// SshPublicKeyTypeArrayInput is an input type that accepts SshPublicKeyTypeArray and SshPublicKeyTypeArrayOutput values.
// You can construct a concrete instance of `SshPublicKeyTypeArrayInput` via:
//
//          SshPublicKeyTypeArray{ SshPublicKeyTypeArgs{...} }
type SshPublicKeyTypeArrayInput interface {
	pulumi.Input

	ToSshPublicKeyTypeArrayOutput() SshPublicKeyTypeArrayOutput
	ToSshPublicKeyTypeArrayOutputWithContext(context.Context) SshPublicKeyTypeArrayOutput
}

type SshPublicKeyTypeArray []SshPublicKeyTypeInput

func (SshPublicKeyTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SshPublicKeyType)(nil)).Elem()
}

func (i SshPublicKeyTypeArray) ToSshPublicKeyTypeArrayOutput() SshPublicKeyTypeArrayOutput {
	return i.ToSshPublicKeyTypeArrayOutputWithContext(context.Background())
}

func (i SshPublicKeyTypeArray) ToSshPublicKeyTypeArrayOutputWithContext(ctx context.Context) SshPublicKeyTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshPublicKeyTypeArrayOutput)
}

// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
type SshPublicKeyResponse struct {
	// SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
	KeyData *string `pulumi:"keyData"`
	// Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
	Path *string `pulumi:"path"`
}

// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
type SshPublicKeyResponseOutput struct{ *pulumi.OutputState }

func (SshPublicKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshPublicKeyResponse)(nil)).Elem()
}

func (o SshPublicKeyResponseOutput) ToSshPublicKeyResponseOutput() SshPublicKeyResponseOutput {
	return o
}

func (o SshPublicKeyResponseOutput) ToSshPublicKeyResponseOutputWithContext(ctx context.Context) SshPublicKeyResponseOutput {
	return o
}

// SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
func (o SshPublicKeyResponseOutput) KeyData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshPublicKeyResponse) *string { return v.KeyData }).(pulumi.StringPtrOutput)
}

// Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
func (o SshPublicKeyResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshPublicKeyResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type SshPublicKeyResponseArrayOutput struct{ *pulumi.OutputState }

func (SshPublicKeyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SshPublicKeyResponse)(nil)).Elem()
}

func (o SshPublicKeyResponseArrayOutput) ToSshPublicKeyResponseArrayOutput() SshPublicKeyResponseArrayOutput {
	return o
}

func (o SshPublicKeyResponseArrayOutput) ToSshPublicKeyResponseArrayOutputWithContext(ctx context.Context) SshPublicKeyResponseArrayOutput {
	return o
}

func (o SshPublicKeyResponseArrayOutput) Index(i pulumi.IntInput) SshPublicKeyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SshPublicKeyResponse {
		return vs[0].([]SshPublicKeyResponse)[vs[1].(int)]
	}).(SshPublicKeyResponseOutput)
}

// Specifies the storage settings for the virtual machine disks.
type StorageProfile struct {
	// Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	DataDisks []DataDisk `pulumi:"dataDisks"`
	// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
	ImageReference *ImageReference `pulumi:"imageReference"`
	// Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	OsDisk *OSDisk `pulumi:"osDisk"`
}

// StorageProfileInput is an input type that accepts StorageProfileArgs and StorageProfileOutput values.
// You can construct a concrete instance of `StorageProfileInput` via:
//
//          StorageProfileArgs{...}
type StorageProfileInput interface {
	pulumi.Input

	ToStorageProfileOutput() StorageProfileOutput
	ToStorageProfileOutputWithContext(context.Context) StorageProfileOutput
}

// Specifies the storage settings for the virtual machine disks.
type StorageProfileArgs struct {
	// Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	DataDisks DataDiskArrayInput `pulumi:"dataDisks"`
	// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
	ImageReference ImageReferencePtrInput `pulumi:"imageReference"`
	// Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	OsDisk OSDiskPtrInput `pulumi:"osDisk"`
}

func (StorageProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageProfile)(nil)).Elem()
}

func (i StorageProfileArgs) ToStorageProfileOutput() StorageProfileOutput {
	return i.ToStorageProfileOutputWithContext(context.Background())
}

func (i StorageProfileArgs) ToStorageProfileOutputWithContext(ctx context.Context) StorageProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageProfileOutput)
}

func (i StorageProfileArgs) ToStorageProfilePtrOutput() StorageProfilePtrOutput {
	return i.ToStorageProfilePtrOutputWithContext(context.Background())
}

func (i StorageProfileArgs) ToStorageProfilePtrOutputWithContext(ctx context.Context) StorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageProfileOutput).ToStorageProfilePtrOutputWithContext(ctx)
}

// StorageProfilePtrInput is an input type that accepts StorageProfileArgs, StorageProfilePtr and StorageProfilePtrOutput values.
// You can construct a concrete instance of `StorageProfilePtrInput` via:
//
//          StorageProfileArgs{...}
//
//  or:
//
//          nil
type StorageProfilePtrInput interface {
	pulumi.Input

	ToStorageProfilePtrOutput() StorageProfilePtrOutput
	ToStorageProfilePtrOutputWithContext(context.Context) StorageProfilePtrOutput
}

type storageProfilePtrType StorageProfileArgs

func StorageProfilePtr(v *StorageProfileArgs) StorageProfilePtrInput {
	return (*storageProfilePtrType)(v)
}

func (*storageProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageProfile)(nil)).Elem()
}

func (i *storageProfilePtrType) ToStorageProfilePtrOutput() StorageProfilePtrOutput {
	return i.ToStorageProfilePtrOutputWithContext(context.Background())
}

func (i *storageProfilePtrType) ToStorageProfilePtrOutputWithContext(ctx context.Context) StorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageProfilePtrOutput)
}

// Specifies the storage settings for the virtual machine disks.
type StorageProfileResponse struct {
	// Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	DataDisks []DataDiskResponse `pulumi:"dataDisks"`
	// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
	ImageReference *ImageReferenceResponse `pulumi:"imageReference"`
	// Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	OsDisk *OSDiskResponse `pulumi:"osDisk"`
}

// Specifies the storage settings for the virtual machine disks.
type StorageProfileResponseOutput struct{ *pulumi.OutputState }

func (StorageProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageProfileResponse)(nil)).Elem()
}

func (o StorageProfileResponseOutput) ToStorageProfileResponseOutput() StorageProfileResponseOutput {
	return o
}

func (o StorageProfileResponseOutput) ToStorageProfileResponseOutputWithContext(ctx context.Context) StorageProfileResponseOutput {
	return o
}

func (o StorageProfileResponseOutput) ToStorageProfileResponsePtrOutput() StorageProfileResponsePtrOutput {
	return o.ToStorageProfileResponsePtrOutputWithContext(context.Background())
}

func (o StorageProfileResponseOutput) ToStorageProfileResponsePtrOutputWithContext(ctx context.Context) StorageProfileResponsePtrOutput {
	return o.ApplyT(func(v StorageProfileResponse) *StorageProfileResponse {
		return &v
	}).(StorageProfileResponsePtrOutput)
}

// Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
func (o StorageProfileResponseOutput) DataDisks() DataDiskResponseArrayOutput {
	return o.ApplyT(func(v StorageProfileResponse) []DataDiskResponse { return v.DataDisks }).(DataDiskResponseArrayOutput)
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
func (o StorageProfileResponseOutput) ImageReference() ImageReferenceResponsePtrOutput {
	return o.ApplyT(func(v StorageProfileResponse) *ImageReferenceResponse { return v.ImageReference }).(ImageReferenceResponsePtrOutput)
}

// Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
func (o StorageProfileResponseOutput) OsDisk() OSDiskResponsePtrOutput {
	return o.ApplyT(func(v StorageProfileResponse) *OSDiskResponse { return v.OsDisk }).(OSDiskResponsePtrOutput)
}

type StorageProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (StorageProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageProfileResponse)(nil)).Elem()
}

func (o StorageProfileResponsePtrOutput) ToStorageProfileResponsePtrOutput() StorageProfileResponsePtrOutput {
	return o
}

func (o StorageProfileResponsePtrOutput) ToStorageProfileResponsePtrOutputWithContext(ctx context.Context) StorageProfileResponsePtrOutput {
	return o
}

func (o StorageProfileResponsePtrOutput) Elem() StorageProfileResponseOutput {
	return o.ApplyT(func(v *StorageProfileResponse) StorageProfileResponse { return *v }).(StorageProfileResponseOutput)
}

// Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
func (o StorageProfileResponsePtrOutput) DataDisks() DataDiskResponseArrayOutput {
	return o.ApplyT(func(v *StorageProfileResponse) []DataDiskResponse {
		if v == nil {
			return nil
		}
		return v.DataDisks
	}).(DataDiskResponseArrayOutput)
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
func (o StorageProfileResponsePtrOutput) ImageReference() ImageReferenceResponsePtrOutput {
	return o.ApplyT(func(v *StorageProfileResponse) *ImageReferenceResponse {
		if v == nil {
			return nil
		}
		return v.ImageReference
	}).(ImageReferenceResponsePtrOutput)
}

// Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
func (o StorageProfileResponsePtrOutput) OsDisk() OSDiskResponsePtrOutput {
	return o.ApplyT(func(v *StorageProfileResponse) *OSDiskResponse {
		if v == nil {
			return nil
		}
		return v.OsDisk
	}).(OSDiskResponsePtrOutput)
}

type SubResource struct {
	// Resource Id
	Id *string `pulumi:"id"`
}

// SubResourceInput is an input type that accepts SubResourceArgs and SubResourceOutput values.
// You can construct a concrete instance of `SubResourceInput` via:
//
//          SubResourceArgs{...}
type SubResourceInput interface {
	pulumi.Input

	ToSubResourceOutput() SubResourceOutput
	ToSubResourceOutputWithContext(context.Context) SubResourceOutput
}

type SubResourceArgs struct {
	// Resource Id
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SubResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResource)(nil)).Elem()
}

func (i SubResourceArgs) ToSubResourceOutput() SubResourceOutput {
	return i.ToSubResourceOutputWithContext(context.Background())
}

func (i SubResourceArgs) ToSubResourceOutputWithContext(ctx context.Context) SubResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceOutput)
}

func (i SubResourceArgs) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return i.ToSubResourcePtrOutputWithContext(context.Background())
}

func (i SubResourceArgs) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceOutput).ToSubResourcePtrOutputWithContext(ctx)
}

// SubResourcePtrInput is an input type that accepts SubResourceArgs, SubResourcePtr and SubResourcePtrOutput values.
// You can construct a concrete instance of `SubResourcePtrInput` via:
//
//          SubResourceArgs{...}
//
//  or:
//
//          nil
type SubResourcePtrInput interface {
	pulumi.Input

	ToSubResourcePtrOutput() SubResourcePtrOutput
	ToSubResourcePtrOutputWithContext(context.Context) SubResourcePtrOutput
}

type subResourcePtrType SubResourceArgs

func SubResourcePtr(v *SubResourceArgs) SubResourcePtrInput {
	return (*subResourcePtrType)(v)
}

func (*subResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResource)(nil)).Elem()
}

func (i *subResourcePtrType) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return i.ToSubResourcePtrOutputWithContext(context.Background())
}

func (i *subResourcePtrType) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourcePtrOutput)
}

// SubResourceArrayInput is an input type that accepts SubResourceArray and SubResourceArrayOutput values.
// You can construct a concrete instance of `SubResourceArrayInput` via:
//
//          SubResourceArray{ SubResourceArgs{...} }
type SubResourceArrayInput interface {
	pulumi.Input

	ToSubResourceArrayOutput() SubResourceArrayOutput
	ToSubResourceArrayOutputWithContext(context.Context) SubResourceArrayOutput
}

type SubResourceArray []SubResourceInput

func (SubResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResource)(nil)).Elem()
}

func (i SubResourceArray) ToSubResourceArrayOutput() SubResourceArrayOutput {
	return i.ToSubResourceArrayOutputWithContext(context.Background())
}

func (i SubResourceArray) ToSubResourceArrayOutputWithContext(ctx context.Context) SubResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceArrayOutput)
}

type SubResourceReadOnlyResponse struct {
	// Resource Id
	Id string `pulumi:"id"`
}

type SubResourceReadOnlyResponseOutput struct{ *pulumi.OutputState }

func (SubResourceReadOnlyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResourceReadOnlyResponse)(nil)).Elem()
}

func (o SubResourceReadOnlyResponseOutput) ToSubResourceReadOnlyResponseOutput() SubResourceReadOnlyResponseOutput {
	return o
}

func (o SubResourceReadOnlyResponseOutput) ToSubResourceReadOnlyResponseOutputWithContext(ctx context.Context) SubResourceReadOnlyResponseOutput {
	return o
}

// Resource Id
func (o SubResourceReadOnlyResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SubResourceReadOnlyResponse) string { return v.Id }).(pulumi.StringOutput)
}

type SubResourceReadOnlyResponseArrayOutput struct{ *pulumi.OutputState }

func (SubResourceReadOnlyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResourceReadOnlyResponse)(nil)).Elem()
}

func (o SubResourceReadOnlyResponseArrayOutput) ToSubResourceReadOnlyResponseArrayOutput() SubResourceReadOnlyResponseArrayOutput {
	return o
}

func (o SubResourceReadOnlyResponseArrayOutput) ToSubResourceReadOnlyResponseArrayOutputWithContext(ctx context.Context) SubResourceReadOnlyResponseArrayOutput {
	return o
}

func (o SubResourceReadOnlyResponseArrayOutput) Index(i pulumi.IntInput) SubResourceReadOnlyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubResourceReadOnlyResponse {
		return vs[0].([]SubResourceReadOnlyResponse)[vs[1].(int)]
	}).(SubResourceReadOnlyResponseOutput)
}

type SubResourceResponse struct {
	// Resource Id
	Id *string `pulumi:"id"`
}

type SubResourceResponseOutput struct{ *pulumi.OutputState }

func (SubResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponseOutput) ToSubResourceResponseOutput() SubResourceResponseOutput {
	return o
}

func (o SubResourceResponseOutput) ToSubResourceResponseOutputWithContext(ctx context.Context) SubResourceResponseOutput {
	return o
}

func (o SubResourceResponseOutput) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return o.ToSubResourceResponsePtrOutputWithContext(context.Background())
}

func (o SubResourceResponseOutput) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return o.ApplyT(func(v SubResourceResponse) *SubResourceResponse {
		return &v
	}).(SubResourceResponsePtrOutput)
}

// Resource Id
func (o SubResourceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubResourceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubResourceResponsePtrOutput struct{ *pulumi.OutputState }

func (SubResourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponsePtrOutput) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return o
}

func (o SubResourceResponsePtrOutput) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return o
}

func (o SubResourceResponsePtrOutput) Elem() SubResourceResponseOutput {
	return o.ApplyT(func(v *SubResourceResponse) SubResourceResponse { return *v }).(SubResourceResponseOutput)
}

// Resource Id
func (o SubResourceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubResourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type SubResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (SubResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponseArrayOutput) ToSubResourceResponseArrayOutput() SubResourceResponseArrayOutput {
	return o
}

func (o SubResourceResponseArrayOutput) ToSubResourceResponseArrayOutputWithContext(ctx context.Context) SubResourceResponseArrayOutput {
	return o
}

func (o SubResourceResponseArrayOutput) Index(i pulumi.IntInput) SubResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubResourceResponse {
		return vs[0].([]SubResourceResponse)[vs[1].(int)]
	}).(SubResourceResponseOutput)
}

type SubResourceWithColocationStatusResponse struct {
	// Describes colocation status of a resource in the Proximity Placement Group.
	ColocationStatus *InstanceViewStatusResponse `pulumi:"colocationStatus"`
	// Resource Id
	Id *string `pulumi:"id"`
}

type SubResourceWithColocationStatusResponseOutput struct{ *pulumi.OutputState }

func (SubResourceWithColocationStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResourceWithColocationStatusResponse)(nil)).Elem()
}

func (o SubResourceWithColocationStatusResponseOutput) ToSubResourceWithColocationStatusResponseOutput() SubResourceWithColocationStatusResponseOutput {
	return o
}

func (o SubResourceWithColocationStatusResponseOutput) ToSubResourceWithColocationStatusResponseOutputWithContext(ctx context.Context) SubResourceWithColocationStatusResponseOutput {
	return o
}

// Describes colocation status of a resource in the Proximity Placement Group.
func (o SubResourceWithColocationStatusResponseOutput) ColocationStatus() InstanceViewStatusResponsePtrOutput {
	return o.ApplyT(func(v SubResourceWithColocationStatusResponse) *InstanceViewStatusResponse { return v.ColocationStatus }).(InstanceViewStatusResponsePtrOutput)
}

// Resource Id
func (o SubResourceWithColocationStatusResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubResourceWithColocationStatusResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubResourceWithColocationStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (SubResourceWithColocationStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResourceWithColocationStatusResponse)(nil)).Elem()
}

func (o SubResourceWithColocationStatusResponseArrayOutput) ToSubResourceWithColocationStatusResponseArrayOutput() SubResourceWithColocationStatusResponseArrayOutput {
	return o
}

func (o SubResourceWithColocationStatusResponseArrayOutput) ToSubResourceWithColocationStatusResponseArrayOutputWithContext(ctx context.Context) SubResourceWithColocationStatusResponseArrayOutput {
	return o
}

func (o SubResourceWithColocationStatusResponseArrayOutput) Index(i pulumi.IntInput) SubResourceWithColocationStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubResourceWithColocationStatusResponse {
		return vs[0].([]SubResourceWithColocationStatusResponse)[vs[1].(int)]
	}).(SubResourceWithColocationStatusResponseOutput)
}

// Describes the target region information.
type TargetRegion struct {
	// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
	Encryption *EncryptionImages `pulumi:"encryption"`
	// The name of the region.
	Name string `pulumi:"name"`
	// The number of replicas of the Image Version to be created per region. This property is updatable.
	RegionalReplicaCount *int `pulumi:"regionalReplicaCount"`
	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// TargetRegionInput is an input type that accepts TargetRegionArgs and TargetRegionOutput values.
// You can construct a concrete instance of `TargetRegionInput` via:
//
//          TargetRegionArgs{...}
type TargetRegionInput interface {
	pulumi.Input

	ToTargetRegionOutput() TargetRegionOutput
	ToTargetRegionOutputWithContext(context.Context) TargetRegionOutput
}

// Describes the target region information.
type TargetRegionArgs struct {
	// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
	Encryption EncryptionImagesPtrInput `pulumi:"encryption"`
	// The name of the region.
	Name pulumi.StringInput `pulumi:"name"`
	// The number of replicas of the Image Version to be created per region. This property is updatable.
	RegionalReplicaCount pulumi.IntPtrInput `pulumi:"regionalReplicaCount"`
	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType pulumi.StringPtrInput `pulumi:"storageAccountType"`
}

func (TargetRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetRegion)(nil)).Elem()
}

func (i TargetRegionArgs) ToTargetRegionOutput() TargetRegionOutput {
	return i.ToTargetRegionOutputWithContext(context.Background())
}

func (i TargetRegionArgs) ToTargetRegionOutputWithContext(ctx context.Context) TargetRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetRegionOutput)
}

// TargetRegionArrayInput is an input type that accepts TargetRegionArray and TargetRegionArrayOutput values.
// You can construct a concrete instance of `TargetRegionArrayInput` via:
//
//          TargetRegionArray{ TargetRegionArgs{...} }
type TargetRegionArrayInput interface {
	pulumi.Input

	ToTargetRegionArrayOutput() TargetRegionArrayOutput
	ToTargetRegionArrayOutputWithContext(context.Context) TargetRegionArrayOutput
}

type TargetRegionArray []TargetRegionInput

func (TargetRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetRegion)(nil)).Elem()
}

func (i TargetRegionArray) ToTargetRegionArrayOutput() TargetRegionArrayOutput {
	return i.ToTargetRegionArrayOutputWithContext(context.Background())
}

func (i TargetRegionArray) ToTargetRegionArrayOutputWithContext(ctx context.Context) TargetRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetRegionArrayOutput)
}

// Describes the target region information.
type TargetRegionResponse struct {
	// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
	Encryption *EncryptionImagesResponse `pulumi:"encryption"`
	// The name of the region.
	Name string `pulumi:"name"`
	// The number of replicas of the Image Version to be created per region. This property is updatable.
	RegionalReplicaCount *int `pulumi:"regionalReplicaCount"`
	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// Describes the target region information.
type TargetRegionResponseOutput struct{ *pulumi.OutputState }

func (TargetRegionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetRegionResponse)(nil)).Elem()
}

func (o TargetRegionResponseOutput) ToTargetRegionResponseOutput() TargetRegionResponseOutput {
	return o
}

func (o TargetRegionResponseOutput) ToTargetRegionResponseOutputWithContext(ctx context.Context) TargetRegionResponseOutput {
	return o
}

// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
func (o TargetRegionResponseOutput) Encryption() EncryptionImagesResponsePtrOutput {
	return o.ApplyT(func(v TargetRegionResponse) *EncryptionImagesResponse { return v.Encryption }).(EncryptionImagesResponsePtrOutput)
}

// The name of the region.
func (o TargetRegionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TargetRegionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The number of replicas of the Image Version to be created per region. This property is updatable.
func (o TargetRegionResponseOutput) RegionalReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetRegionResponse) *int { return v.RegionalReplicaCount }).(pulumi.IntPtrOutput)
}

// Specifies the storage account type to be used to store the image. This property is not updatable.
func (o TargetRegionResponseOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetRegionResponse) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type TargetRegionResponseArrayOutput struct{ *pulumi.OutputState }

func (TargetRegionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetRegionResponse)(nil)).Elem()
}

func (o TargetRegionResponseArrayOutput) ToTargetRegionResponseArrayOutput() TargetRegionResponseArrayOutput {
	return o
}

func (o TargetRegionResponseArrayOutput) ToTargetRegionResponseArrayOutputWithContext(ctx context.Context) TargetRegionResponseArrayOutput {
	return o
}

func (o TargetRegionResponseArrayOutput) Index(i pulumi.IntInput) TargetRegionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TargetRegionResponse {
		return vs[0].([]TargetRegionResponse)[vs[1].(int)]
	}).(TargetRegionResponseOutput)
}

type TerminateNotificationProfile struct {
	// Specifies whether the Terminate Scheduled event is enabled or disabled.
	Enable *bool `pulumi:"enable"`
	// Configurable length of time a Virtual Machine being deleted will have to potentially approve the Terminate Scheduled Event before the event is auto approved (timed out). The configuration must be specified in ISO 8601 format, the default value is 5 minutes (PT5M)
	NotBeforeTimeout *string `pulumi:"notBeforeTimeout"`
}

// TerminateNotificationProfileInput is an input type that accepts TerminateNotificationProfileArgs and TerminateNotificationProfileOutput values.
// You can construct a concrete instance of `TerminateNotificationProfileInput` via:
//
//          TerminateNotificationProfileArgs{...}
type TerminateNotificationProfileInput interface {
	pulumi.Input

	ToTerminateNotificationProfileOutput() TerminateNotificationProfileOutput
	ToTerminateNotificationProfileOutputWithContext(context.Context) TerminateNotificationProfileOutput
}

type TerminateNotificationProfileArgs struct {
	// Specifies whether the Terminate Scheduled event is enabled or disabled.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// Configurable length of time a Virtual Machine being deleted will have to potentially approve the Terminate Scheduled Event before the event is auto approved (timed out). The configuration must be specified in ISO 8601 format, the default value is 5 minutes (PT5M)
	NotBeforeTimeout pulumi.StringPtrInput `pulumi:"notBeforeTimeout"`
}

func (TerminateNotificationProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TerminateNotificationProfile)(nil)).Elem()
}

func (i TerminateNotificationProfileArgs) ToTerminateNotificationProfileOutput() TerminateNotificationProfileOutput {
	return i.ToTerminateNotificationProfileOutputWithContext(context.Background())
}

func (i TerminateNotificationProfileArgs) ToTerminateNotificationProfileOutputWithContext(ctx context.Context) TerminateNotificationProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TerminateNotificationProfileOutput)
}

func (i TerminateNotificationProfileArgs) ToTerminateNotificationProfilePtrOutput() TerminateNotificationProfilePtrOutput {
	return i.ToTerminateNotificationProfilePtrOutputWithContext(context.Background())
}

func (i TerminateNotificationProfileArgs) ToTerminateNotificationProfilePtrOutputWithContext(ctx context.Context) TerminateNotificationProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TerminateNotificationProfileOutput).ToTerminateNotificationProfilePtrOutputWithContext(ctx)
}

// TerminateNotificationProfilePtrInput is an input type that accepts TerminateNotificationProfileArgs, TerminateNotificationProfilePtr and TerminateNotificationProfilePtrOutput values.
// You can construct a concrete instance of `TerminateNotificationProfilePtrInput` via:
//
//          TerminateNotificationProfileArgs{...}
//
//  or:
//
//          nil
type TerminateNotificationProfilePtrInput interface {
	pulumi.Input

	ToTerminateNotificationProfilePtrOutput() TerminateNotificationProfilePtrOutput
	ToTerminateNotificationProfilePtrOutputWithContext(context.Context) TerminateNotificationProfilePtrOutput
}

type terminateNotificationProfilePtrType TerminateNotificationProfileArgs

func TerminateNotificationProfilePtr(v *TerminateNotificationProfileArgs) TerminateNotificationProfilePtrInput {
	return (*terminateNotificationProfilePtrType)(v)
}

func (*terminateNotificationProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TerminateNotificationProfile)(nil)).Elem()
}

func (i *terminateNotificationProfilePtrType) ToTerminateNotificationProfilePtrOutput() TerminateNotificationProfilePtrOutput {
	return i.ToTerminateNotificationProfilePtrOutputWithContext(context.Background())
}

func (i *terminateNotificationProfilePtrType) ToTerminateNotificationProfilePtrOutputWithContext(ctx context.Context) TerminateNotificationProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TerminateNotificationProfilePtrOutput)
}

type TerminateNotificationProfileResponse struct {
	// Specifies whether the Terminate Scheduled event is enabled or disabled.
	Enable *bool `pulumi:"enable"`
	// Configurable length of time a Virtual Machine being deleted will have to potentially approve the Terminate Scheduled Event before the event is auto approved (timed out). The configuration must be specified in ISO 8601 format, the default value is 5 minutes (PT5M)
	NotBeforeTimeout *string `pulumi:"notBeforeTimeout"`
}

type TerminateNotificationProfileResponseOutput struct{ *pulumi.OutputState }

func (TerminateNotificationProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TerminateNotificationProfileResponse)(nil)).Elem()
}

func (o TerminateNotificationProfileResponseOutput) ToTerminateNotificationProfileResponseOutput() TerminateNotificationProfileResponseOutput {
	return o
}

func (o TerminateNotificationProfileResponseOutput) ToTerminateNotificationProfileResponseOutputWithContext(ctx context.Context) TerminateNotificationProfileResponseOutput {
	return o
}

func (o TerminateNotificationProfileResponseOutput) ToTerminateNotificationProfileResponsePtrOutput() TerminateNotificationProfileResponsePtrOutput {
	return o.ToTerminateNotificationProfileResponsePtrOutputWithContext(context.Background())
}

func (o TerminateNotificationProfileResponseOutput) ToTerminateNotificationProfileResponsePtrOutputWithContext(ctx context.Context) TerminateNotificationProfileResponsePtrOutput {
	return o.ApplyT(func(v TerminateNotificationProfileResponse) *TerminateNotificationProfileResponse {
		return &v
	}).(TerminateNotificationProfileResponsePtrOutput)
}

// Specifies whether the Terminate Scheduled event is enabled or disabled.
func (o TerminateNotificationProfileResponseOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TerminateNotificationProfileResponse) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// Configurable length of time a Virtual Machine being deleted will have to potentially approve the Terminate Scheduled Event before the event is auto approved (timed out). The configuration must be specified in ISO 8601 format, the default value is 5 minutes (PT5M)
func (o TerminateNotificationProfileResponseOutput) NotBeforeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TerminateNotificationProfileResponse) *string { return v.NotBeforeTimeout }).(pulumi.StringPtrOutput)
}

type TerminateNotificationProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (TerminateNotificationProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TerminateNotificationProfileResponse)(nil)).Elem()
}

func (o TerminateNotificationProfileResponsePtrOutput) ToTerminateNotificationProfileResponsePtrOutput() TerminateNotificationProfileResponsePtrOutput {
	return o
}

func (o TerminateNotificationProfileResponsePtrOutput) ToTerminateNotificationProfileResponsePtrOutputWithContext(ctx context.Context) TerminateNotificationProfileResponsePtrOutput {
	return o
}

func (o TerminateNotificationProfileResponsePtrOutput) Elem() TerminateNotificationProfileResponseOutput {
	return o.ApplyT(func(v *TerminateNotificationProfileResponse) TerminateNotificationProfileResponse { return *v }).(TerminateNotificationProfileResponseOutput)
}

// Specifies whether the Terminate Scheduled event is enabled or disabled.
func (o TerminateNotificationProfileResponsePtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TerminateNotificationProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// Configurable length of time a Virtual Machine being deleted will have to potentially approve the Terminate Scheduled Event before the event is auto approved (timed out). The configuration must be specified in ISO 8601 format, the default value is 5 minutes (PT5M)
func (o TerminateNotificationProfileResponsePtrOutput) NotBeforeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TerminateNotificationProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.NotBeforeTimeout
	}).(pulumi.StringPtrOutput)
}

// Describes an upgrade policy - automatic, manual, or rolling.
type UpgradePolicy struct {
	// Configuration parameters used for performing automatic OS Upgrade.
	AutomaticOSUpgradePolicy *AutomaticOSUpgradePolicy `pulumi:"automaticOSUpgradePolicy"`
	// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are  automatically updated at the same time.
	Mode *string `pulumi:"mode"`
	// The configuration parameters used while performing a rolling upgrade.
	RollingUpgradePolicy *RollingUpgradePolicy `pulumi:"rollingUpgradePolicy"`
}

// UpgradePolicyInput is an input type that accepts UpgradePolicyArgs and UpgradePolicyOutput values.
// You can construct a concrete instance of `UpgradePolicyInput` via:
//
//          UpgradePolicyArgs{...}
type UpgradePolicyInput interface {
	pulumi.Input

	ToUpgradePolicyOutput() UpgradePolicyOutput
	ToUpgradePolicyOutputWithContext(context.Context) UpgradePolicyOutput
}

// Describes an upgrade policy - automatic, manual, or rolling.
type UpgradePolicyArgs struct {
	// Configuration parameters used for performing automatic OS Upgrade.
	AutomaticOSUpgradePolicy AutomaticOSUpgradePolicyPtrInput `pulumi:"automaticOSUpgradePolicy"`
	// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are  automatically updated at the same time.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// The configuration parameters used while performing a rolling upgrade.
	RollingUpgradePolicy RollingUpgradePolicyPtrInput `pulumi:"rollingUpgradePolicy"`
}

func (UpgradePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradePolicy)(nil)).Elem()
}

func (i UpgradePolicyArgs) ToUpgradePolicyOutput() UpgradePolicyOutput {
	return i.ToUpgradePolicyOutputWithContext(context.Background())
}

func (i UpgradePolicyArgs) ToUpgradePolicyOutputWithContext(ctx context.Context) UpgradePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradePolicyOutput)
}

func (i UpgradePolicyArgs) ToUpgradePolicyPtrOutput() UpgradePolicyPtrOutput {
	return i.ToUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i UpgradePolicyArgs) ToUpgradePolicyPtrOutputWithContext(ctx context.Context) UpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradePolicyOutput).ToUpgradePolicyPtrOutputWithContext(ctx)
}

// UpgradePolicyPtrInput is an input type that accepts UpgradePolicyArgs, UpgradePolicyPtr and UpgradePolicyPtrOutput values.
// You can construct a concrete instance of `UpgradePolicyPtrInput` via:
//
//          UpgradePolicyArgs{...}
//
//  or:
//
//          nil
type UpgradePolicyPtrInput interface {
	pulumi.Input

	ToUpgradePolicyPtrOutput() UpgradePolicyPtrOutput
	ToUpgradePolicyPtrOutputWithContext(context.Context) UpgradePolicyPtrOutput
}

type upgradePolicyPtrType UpgradePolicyArgs

func UpgradePolicyPtr(v *UpgradePolicyArgs) UpgradePolicyPtrInput {
	return (*upgradePolicyPtrType)(v)
}

func (*upgradePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradePolicy)(nil)).Elem()
}

func (i *upgradePolicyPtrType) ToUpgradePolicyPtrOutput() UpgradePolicyPtrOutput {
	return i.ToUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i *upgradePolicyPtrType) ToUpgradePolicyPtrOutputWithContext(ctx context.Context) UpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradePolicyPtrOutput)
}

// Describes an upgrade policy - automatic, manual, or rolling.
type UpgradePolicyResponse struct {
	// Configuration parameters used for performing automatic OS Upgrade.
	AutomaticOSUpgradePolicy *AutomaticOSUpgradePolicyResponse `pulumi:"automaticOSUpgradePolicy"`
	// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are  automatically updated at the same time.
	Mode *string `pulumi:"mode"`
	// The configuration parameters used while performing a rolling upgrade.
	RollingUpgradePolicy *RollingUpgradePolicyResponse `pulumi:"rollingUpgradePolicy"`
}

// Describes an upgrade policy - automatic, manual, or rolling.
type UpgradePolicyResponseOutput struct{ *pulumi.OutputState }

func (UpgradePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradePolicyResponse)(nil)).Elem()
}

func (o UpgradePolicyResponseOutput) ToUpgradePolicyResponseOutput() UpgradePolicyResponseOutput {
	return o
}

func (o UpgradePolicyResponseOutput) ToUpgradePolicyResponseOutputWithContext(ctx context.Context) UpgradePolicyResponseOutput {
	return o
}

func (o UpgradePolicyResponseOutput) ToUpgradePolicyResponsePtrOutput() UpgradePolicyResponsePtrOutput {
	return o.ToUpgradePolicyResponsePtrOutputWithContext(context.Background())
}

func (o UpgradePolicyResponseOutput) ToUpgradePolicyResponsePtrOutputWithContext(ctx context.Context) UpgradePolicyResponsePtrOutput {
	return o.ApplyT(func(v UpgradePolicyResponse) *UpgradePolicyResponse {
		return &v
	}).(UpgradePolicyResponsePtrOutput)
}

// Configuration parameters used for performing automatic OS Upgrade.
func (o UpgradePolicyResponseOutput) AutomaticOSUpgradePolicy() AutomaticOSUpgradePolicyResponsePtrOutput {
	return o.ApplyT(func(v UpgradePolicyResponse) *AutomaticOSUpgradePolicyResponse { return v.AutomaticOSUpgradePolicy }).(AutomaticOSUpgradePolicyResponsePtrOutput)
}

// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are  automatically updated at the same time.
func (o UpgradePolicyResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradePolicyResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The configuration parameters used while performing a rolling upgrade.
func (o UpgradePolicyResponseOutput) RollingUpgradePolicy() RollingUpgradePolicyResponsePtrOutput {
	return o.ApplyT(func(v UpgradePolicyResponse) *RollingUpgradePolicyResponse { return v.RollingUpgradePolicy }).(RollingUpgradePolicyResponsePtrOutput)
}

type UpgradePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (UpgradePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradePolicyResponse)(nil)).Elem()
}

func (o UpgradePolicyResponsePtrOutput) ToUpgradePolicyResponsePtrOutput() UpgradePolicyResponsePtrOutput {
	return o
}

func (o UpgradePolicyResponsePtrOutput) ToUpgradePolicyResponsePtrOutputWithContext(ctx context.Context) UpgradePolicyResponsePtrOutput {
	return o
}

func (o UpgradePolicyResponsePtrOutput) Elem() UpgradePolicyResponseOutput {
	return o.ApplyT(func(v *UpgradePolicyResponse) UpgradePolicyResponse { return *v }).(UpgradePolicyResponseOutput)
}

// Configuration parameters used for performing automatic OS Upgrade.
func (o UpgradePolicyResponsePtrOutput) AutomaticOSUpgradePolicy() AutomaticOSUpgradePolicyResponsePtrOutput {
	return o.ApplyT(func(v *UpgradePolicyResponse) *AutomaticOSUpgradePolicyResponse {
		if v == nil {
			return nil
		}
		return v.AutomaticOSUpgradePolicy
	}).(AutomaticOSUpgradePolicyResponsePtrOutput)
}

// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are  automatically updated at the same time.
func (o UpgradePolicyResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpgradePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// The configuration parameters used while performing a rolling upgrade.
func (o UpgradePolicyResponsePtrOutput) RollingUpgradePolicy() RollingUpgradePolicyResponsePtrOutput {
	return o.ApplyT(func(v *UpgradePolicyResponse) *RollingUpgradePolicyResponse {
		if v == nil {
			return nil
		}
		return v.RollingUpgradePolicy
	}).(RollingUpgradePolicyResponsePtrOutput)
}

// The source image from which the Image Version is going to be created.
type UserArtifactSource struct {
	// Required. The fileName of the artifact.
	FileName string `pulumi:"fileName"`
	// Required. The mediaLink of the artifact, must be a readable storage blob.
	MediaLink string `pulumi:"mediaLink"`
}

// UserArtifactSourceInput is an input type that accepts UserArtifactSourceArgs and UserArtifactSourceOutput values.
// You can construct a concrete instance of `UserArtifactSourceInput` via:
//
//          UserArtifactSourceArgs{...}
type UserArtifactSourceInput interface {
	pulumi.Input

	ToUserArtifactSourceOutput() UserArtifactSourceOutput
	ToUserArtifactSourceOutputWithContext(context.Context) UserArtifactSourceOutput
}

// The source image from which the Image Version is going to be created.
type UserArtifactSourceArgs struct {
	// Required. The fileName of the artifact.
	FileName pulumi.StringInput `pulumi:"fileName"`
	// Required. The mediaLink of the artifact, must be a readable storage blob.
	MediaLink pulumi.StringInput `pulumi:"mediaLink"`
}

func (UserArtifactSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserArtifactSource)(nil)).Elem()
}

func (i UserArtifactSourceArgs) ToUserArtifactSourceOutput() UserArtifactSourceOutput {
	return i.ToUserArtifactSourceOutputWithContext(context.Background())
}

func (i UserArtifactSourceArgs) ToUserArtifactSourceOutputWithContext(ctx context.Context) UserArtifactSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArtifactSourceOutput)
}

func (i UserArtifactSourceArgs) ToUserArtifactSourcePtrOutput() UserArtifactSourcePtrOutput {
	return i.ToUserArtifactSourcePtrOutputWithContext(context.Background())
}

func (i UserArtifactSourceArgs) ToUserArtifactSourcePtrOutputWithContext(ctx context.Context) UserArtifactSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArtifactSourceOutput).ToUserArtifactSourcePtrOutputWithContext(ctx)
}

// UserArtifactSourcePtrInput is an input type that accepts UserArtifactSourceArgs, UserArtifactSourcePtr and UserArtifactSourcePtrOutput values.
// You can construct a concrete instance of `UserArtifactSourcePtrInput` via:
//
//          UserArtifactSourceArgs{...}
//
//  or:
//
//          nil
type UserArtifactSourcePtrInput interface {
	pulumi.Input

	ToUserArtifactSourcePtrOutput() UserArtifactSourcePtrOutput
	ToUserArtifactSourcePtrOutputWithContext(context.Context) UserArtifactSourcePtrOutput
}

type userArtifactSourcePtrType UserArtifactSourceArgs

func UserArtifactSourcePtr(v *UserArtifactSourceArgs) UserArtifactSourcePtrInput {
	return (*userArtifactSourcePtrType)(v)
}

func (*userArtifactSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserArtifactSource)(nil)).Elem()
}

func (i *userArtifactSourcePtrType) ToUserArtifactSourcePtrOutput() UserArtifactSourcePtrOutput {
	return i.ToUserArtifactSourcePtrOutputWithContext(context.Background())
}

func (i *userArtifactSourcePtrType) ToUserArtifactSourcePtrOutputWithContext(ctx context.Context) UserArtifactSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArtifactSourcePtrOutput)
}

// The source image from which the Image Version is going to be created.
type UserArtifactSourceResponse struct {
	// Required. The fileName of the artifact.
	FileName string `pulumi:"fileName"`
	// Required. The mediaLink of the artifact, must be a readable storage blob.
	MediaLink string `pulumi:"mediaLink"`
}

// The source image from which the Image Version is going to be created.
type UserArtifactSourceResponseOutput struct{ *pulumi.OutputState }

func (UserArtifactSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserArtifactSourceResponse)(nil)).Elem()
}

func (o UserArtifactSourceResponseOutput) ToUserArtifactSourceResponseOutput() UserArtifactSourceResponseOutput {
	return o
}

func (o UserArtifactSourceResponseOutput) ToUserArtifactSourceResponseOutputWithContext(ctx context.Context) UserArtifactSourceResponseOutput {
	return o
}

func (o UserArtifactSourceResponseOutput) ToUserArtifactSourceResponsePtrOutput() UserArtifactSourceResponsePtrOutput {
	return o.ToUserArtifactSourceResponsePtrOutputWithContext(context.Background())
}

func (o UserArtifactSourceResponseOutput) ToUserArtifactSourceResponsePtrOutputWithContext(ctx context.Context) UserArtifactSourceResponsePtrOutput {
	return o.ApplyT(func(v UserArtifactSourceResponse) *UserArtifactSourceResponse {
		return &v
	}).(UserArtifactSourceResponsePtrOutput)
}

// Required. The fileName of the artifact.
func (o UserArtifactSourceResponseOutput) FileName() pulumi.StringOutput {
	return o.ApplyT(func(v UserArtifactSourceResponse) string { return v.FileName }).(pulumi.StringOutput)
}

// Required. The mediaLink of the artifact, must be a readable storage blob.
func (o UserArtifactSourceResponseOutput) MediaLink() pulumi.StringOutput {
	return o.ApplyT(func(v UserArtifactSourceResponse) string { return v.MediaLink }).(pulumi.StringOutput)
}

type UserArtifactSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (UserArtifactSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserArtifactSourceResponse)(nil)).Elem()
}

func (o UserArtifactSourceResponsePtrOutput) ToUserArtifactSourceResponsePtrOutput() UserArtifactSourceResponsePtrOutput {
	return o
}

func (o UserArtifactSourceResponsePtrOutput) ToUserArtifactSourceResponsePtrOutputWithContext(ctx context.Context) UserArtifactSourceResponsePtrOutput {
	return o
}

func (o UserArtifactSourceResponsePtrOutput) Elem() UserArtifactSourceResponseOutput {
	return o.ApplyT(func(v *UserArtifactSourceResponse) UserArtifactSourceResponse { return *v }).(UserArtifactSourceResponseOutput)
}

// Required. The fileName of the artifact.
func (o UserArtifactSourceResponsePtrOutput) FileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserArtifactSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.FileName
	}).(pulumi.StringPtrOutput)
}

// Required. The mediaLink of the artifact, must be a readable storage blob.
func (o UserArtifactSourceResponsePtrOutput) MediaLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserArtifactSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MediaLink
	}).(pulumi.StringPtrOutput)
}

// Information about the VM.
type VMInfoResponse struct {
	// Azure resource Id of the VM.
	Id string `pulumi:"id"`
	// UUID(Universally Unique Identifier) of the VM.
	Uuid string `pulumi:"uuid"`
}

// Information about the VM.
type VMInfoResponseOutput struct{ *pulumi.OutputState }

func (VMInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VMInfoResponse)(nil)).Elem()
}

func (o VMInfoResponseOutput) ToVMInfoResponseOutput() VMInfoResponseOutput {
	return o
}

func (o VMInfoResponseOutput) ToVMInfoResponseOutputWithContext(ctx context.Context) VMInfoResponseOutput {
	return o
}

func (o VMInfoResponseOutput) ToVMInfoResponsePtrOutput() VMInfoResponsePtrOutput {
	return o.ToVMInfoResponsePtrOutputWithContext(context.Background())
}

func (o VMInfoResponseOutput) ToVMInfoResponsePtrOutputWithContext(ctx context.Context) VMInfoResponsePtrOutput {
	return o.ApplyT(func(v VMInfoResponse) *VMInfoResponse {
		return &v
	}).(VMInfoResponsePtrOutput)
}

// Azure resource Id of the VM.
func (o VMInfoResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v VMInfoResponse) string { return v.Id }).(pulumi.StringOutput)
}

// UUID(Universally Unique Identifier) of the VM.
func (o VMInfoResponseOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v VMInfoResponse) string { return v.Uuid }).(pulumi.StringOutput)
}

type VMInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (VMInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMInfoResponse)(nil)).Elem()
}

func (o VMInfoResponsePtrOutput) ToVMInfoResponsePtrOutput() VMInfoResponsePtrOutput {
	return o
}

func (o VMInfoResponsePtrOutput) ToVMInfoResponsePtrOutputWithContext(ctx context.Context) VMInfoResponsePtrOutput {
	return o
}

func (o VMInfoResponsePtrOutput) Elem() VMInfoResponseOutput {
	return o.ApplyT(func(v *VMInfoResponse) VMInfoResponse { return *v }).(VMInfoResponseOutput)
}

// Azure resource Id of the VM.
func (o VMInfoResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// UUID(Universally Unique Identifier) of the VM.
func (o VMInfoResponsePtrOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Uuid
	}).(pulumi.StringPtrOutput)
}

// Describes a single certificate reference in a Key Vault, and where the certificate should reside on the VM.
type VaultCertificate struct {
	// For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified certificate store is implicitly in the LocalMachine account. <br><br>For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name &lt;UppercaseThumbprint&gt;.crt for the X509 certificate file and &lt;UppercaseThumbprint&gt;.prv for private key. Both of these files are .pem formatted.
	CertificateStore *string `pulumi:"certificateStore"`
	// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>}
	CertificateUrl *string `pulumi:"certificateUrl"`
}

// VaultCertificateInput is an input type that accepts VaultCertificateArgs and VaultCertificateOutput values.
// You can construct a concrete instance of `VaultCertificateInput` via:
//
//          VaultCertificateArgs{...}
type VaultCertificateInput interface {
	pulumi.Input

	ToVaultCertificateOutput() VaultCertificateOutput
	ToVaultCertificateOutputWithContext(context.Context) VaultCertificateOutput
}

// Describes a single certificate reference in a Key Vault, and where the certificate should reside on the VM.
type VaultCertificateArgs struct {
	// For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified certificate store is implicitly in the LocalMachine account. <br><br>For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name &lt;UppercaseThumbprint&gt;.crt for the X509 certificate file and &lt;UppercaseThumbprint&gt;.prv for private key. Both of these files are .pem formatted.
	CertificateStore pulumi.StringPtrInput `pulumi:"certificateStore"`
	// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>}
	CertificateUrl pulumi.StringPtrInput `pulumi:"certificateUrl"`
}

func (VaultCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultCertificate)(nil)).Elem()
}

func (i VaultCertificateArgs) ToVaultCertificateOutput() VaultCertificateOutput {
	return i.ToVaultCertificateOutputWithContext(context.Background())
}

func (i VaultCertificateArgs) ToVaultCertificateOutputWithContext(ctx context.Context) VaultCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultCertificateOutput)
}

// VaultCertificateArrayInput is an input type that accepts VaultCertificateArray and VaultCertificateArrayOutput values.
// You can construct a concrete instance of `VaultCertificateArrayInput` via:
//
//          VaultCertificateArray{ VaultCertificateArgs{...} }
type VaultCertificateArrayInput interface {
	pulumi.Input

	ToVaultCertificateArrayOutput() VaultCertificateArrayOutput
	ToVaultCertificateArrayOutputWithContext(context.Context) VaultCertificateArrayOutput
}

type VaultCertificateArray []VaultCertificateInput

func (VaultCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VaultCertificate)(nil)).Elem()
}

func (i VaultCertificateArray) ToVaultCertificateArrayOutput() VaultCertificateArrayOutput {
	return i.ToVaultCertificateArrayOutputWithContext(context.Background())
}

func (i VaultCertificateArray) ToVaultCertificateArrayOutputWithContext(ctx context.Context) VaultCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultCertificateArrayOutput)
}

// Describes a single certificate reference in a Key Vault, and where the certificate should reside on the VM.
type VaultCertificateResponse struct {
	// For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified certificate store is implicitly in the LocalMachine account. <br><br>For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name &lt;UppercaseThumbprint&gt;.crt for the X509 certificate file and &lt;UppercaseThumbprint&gt;.prv for private key. Both of these files are .pem formatted.
	CertificateStore *string `pulumi:"certificateStore"`
	// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>}
	CertificateUrl *string `pulumi:"certificateUrl"`
}

// Describes a single certificate reference in a Key Vault, and where the certificate should reside on the VM.
type VaultCertificateResponseOutput struct{ *pulumi.OutputState }

func (VaultCertificateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultCertificateResponse)(nil)).Elem()
}

func (o VaultCertificateResponseOutput) ToVaultCertificateResponseOutput() VaultCertificateResponseOutput {
	return o
}

func (o VaultCertificateResponseOutput) ToVaultCertificateResponseOutputWithContext(ctx context.Context) VaultCertificateResponseOutput {
	return o
}

// For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified certificate store is implicitly in the LocalMachine account. <br><br>For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name &lt;UppercaseThumbprint&gt;.crt for the X509 certificate file and &lt;UppercaseThumbprint&gt;.prv for private key. Both of these files are .pem formatted.
func (o VaultCertificateResponseOutput) CertificateStore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultCertificateResponse) *string { return v.CertificateStore }).(pulumi.StringPtrOutput)
}

// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>}
func (o VaultCertificateResponseOutput) CertificateUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultCertificateResponse) *string { return v.CertificateUrl }).(pulumi.StringPtrOutput)
}

type VaultCertificateResponseArrayOutput struct{ *pulumi.OutputState }

func (VaultCertificateResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VaultCertificateResponse)(nil)).Elem()
}

func (o VaultCertificateResponseArrayOutput) ToVaultCertificateResponseArrayOutput() VaultCertificateResponseArrayOutput {
	return o
}

func (o VaultCertificateResponseArrayOutput) ToVaultCertificateResponseArrayOutputWithContext(ctx context.Context) VaultCertificateResponseArrayOutput {
	return o
}

func (o VaultCertificateResponseArrayOutput) Index(i pulumi.IntInput) VaultCertificateResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VaultCertificateResponse {
		return vs[0].([]VaultCertificateResponse)[vs[1].(int)]
	}).(VaultCertificateResponseOutput)
}

// Describes a set of certificates which are all in the same Key Vault.
type VaultSecretGroup struct {
	// The relative URL of the Key Vault containing all of the certificates in VaultCertificates.
	SourceVault *SubResource `pulumi:"sourceVault"`
	// The list of key vault references in SourceVault which contain certificates.
	VaultCertificates []VaultCertificate `pulumi:"vaultCertificates"`
}

// VaultSecretGroupInput is an input type that accepts VaultSecretGroupArgs and VaultSecretGroupOutput values.
// You can construct a concrete instance of `VaultSecretGroupInput` via:
//
//          VaultSecretGroupArgs{...}
type VaultSecretGroupInput interface {
	pulumi.Input

	ToVaultSecretGroupOutput() VaultSecretGroupOutput
	ToVaultSecretGroupOutputWithContext(context.Context) VaultSecretGroupOutput
}

// Describes a set of certificates which are all in the same Key Vault.
type VaultSecretGroupArgs struct {
	// The relative URL of the Key Vault containing all of the certificates in VaultCertificates.
	SourceVault SubResourcePtrInput `pulumi:"sourceVault"`
	// The list of key vault references in SourceVault which contain certificates.
	VaultCertificates VaultCertificateArrayInput `pulumi:"vaultCertificates"`
}

func (VaultSecretGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultSecretGroup)(nil)).Elem()
}

func (i VaultSecretGroupArgs) ToVaultSecretGroupOutput() VaultSecretGroupOutput {
	return i.ToVaultSecretGroupOutputWithContext(context.Background())
}

func (i VaultSecretGroupArgs) ToVaultSecretGroupOutputWithContext(ctx context.Context) VaultSecretGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultSecretGroupOutput)
}

// VaultSecretGroupArrayInput is an input type that accepts VaultSecretGroupArray and VaultSecretGroupArrayOutput values.
// You can construct a concrete instance of `VaultSecretGroupArrayInput` via:
//
//          VaultSecretGroupArray{ VaultSecretGroupArgs{...} }
type VaultSecretGroupArrayInput interface {
	pulumi.Input

	ToVaultSecretGroupArrayOutput() VaultSecretGroupArrayOutput
	ToVaultSecretGroupArrayOutputWithContext(context.Context) VaultSecretGroupArrayOutput
}

type VaultSecretGroupArray []VaultSecretGroupInput

func (VaultSecretGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VaultSecretGroup)(nil)).Elem()
}

func (i VaultSecretGroupArray) ToVaultSecretGroupArrayOutput() VaultSecretGroupArrayOutput {
	return i.ToVaultSecretGroupArrayOutputWithContext(context.Background())
}

func (i VaultSecretGroupArray) ToVaultSecretGroupArrayOutputWithContext(ctx context.Context) VaultSecretGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultSecretGroupArrayOutput)
}

// Describes a set of certificates which are all in the same Key Vault.
type VaultSecretGroupResponse struct {
	// The relative URL of the Key Vault containing all of the certificates in VaultCertificates.
	SourceVault *SubResourceResponse `pulumi:"sourceVault"`
	// The list of key vault references in SourceVault which contain certificates.
	VaultCertificates []VaultCertificateResponse `pulumi:"vaultCertificates"`
}

// Describes a set of certificates which are all in the same Key Vault.
type VaultSecretGroupResponseOutput struct{ *pulumi.OutputState }

func (VaultSecretGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultSecretGroupResponse)(nil)).Elem()
}

func (o VaultSecretGroupResponseOutput) ToVaultSecretGroupResponseOutput() VaultSecretGroupResponseOutput {
	return o
}

func (o VaultSecretGroupResponseOutput) ToVaultSecretGroupResponseOutputWithContext(ctx context.Context) VaultSecretGroupResponseOutput {
	return o
}

// The relative URL of the Key Vault containing all of the certificates in VaultCertificates.
func (o VaultSecretGroupResponseOutput) SourceVault() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v VaultSecretGroupResponse) *SubResourceResponse { return v.SourceVault }).(SubResourceResponsePtrOutput)
}

// The list of key vault references in SourceVault which contain certificates.
func (o VaultSecretGroupResponseOutput) VaultCertificates() VaultCertificateResponseArrayOutput {
	return o.ApplyT(func(v VaultSecretGroupResponse) []VaultCertificateResponse { return v.VaultCertificates }).(VaultCertificateResponseArrayOutput)
}

type VaultSecretGroupResponseArrayOutput struct{ *pulumi.OutputState }

func (VaultSecretGroupResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VaultSecretGroupResponse)(nil)).Elem()
}

func (o VaultSecretGroupResponseArrayOutput) ToVaultSecretGroupResponseArrayOutput() VaultSecretGroupResponseArrayOutput {
	return o
}

func (o VaultSecretGroupResponseArrayOutput) ToVaultSecretGroupResponseArrayOutputWithContext(ctx context.Context) VaultSecretGroupResponseArrayOutput {
	return o
}

func (o VaultSecretGroupResponseArrayOutput) Index(i pulumi.IntInput) VaultSecretGroupResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VaultSecretGroupResponse {
		return vs[0].([]VaultSecretGroupResponse)[vs[1].(int)]
	}).(VaultSecretGroupResponseOutput)
}

// Describes the uri of a disk.
type VirtualHardDisk struct {
	// Specifies the virtual hard disk's uri.
	Uri *string `pulumi:"uri"`
}

// VirtualHardDiskInput is an input type that accepts VirtualHardDiskArgs and VirtualHardDiskOutput values.
// You can construct a concrete instance of `VirtualHardDiskInput` via:
//
//          VirtualHardDiskArgs{...}
type VirtualHardDiskInput interface {
	pulumi.Input

	ToVirtualHardDiskOutput() VirtualHardDiskOutput
	ToVirtualHardDiskOutputWithContext(context.Context) VirtualHardDiskOutput
}

// Describes the uri of a disk.
type VirtualHardDiskArgs struct {
	// Specifies the virtual hard disk's uri.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (VirtualHardDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualHardDisk)(nil)).Elem()
}

func (i VirtualHardDiskArgs) ToVirtualHardDiskOutput() VirtualHardDiskOutput {
	return i.ToVirtualHardDiskOutputWithContext(context.Background())
}

func (i VirtualHardDiskArgs) ToVirtualHardDiskOutputWithContext(ctx context.Context) VirtualHardDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualHardDiskOutput)
}

func (i VirtualHardDiskArgs) ToVirtualHardDiskPtrOutput() VirtualHardDiskPtrOutput {
	return i.ToVirtualHardDiskPtrOutputWithContext(context.Background())
}

func (i VirtualHardDiskArgs) ToVirtualHardDiskPtrOutputWithContext(ctx context.Context) VirtualHardDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualHardDiskOutput).ToVirtualHardDiskPtrOutputWithContext(ctx)
}

// VirtualHardDiskPtrInput is an input type that accepts VirtualHardDiskArgs, VirtualHardDiskPtr and VirtualHardDiskPtrOutput values.
// You can construct a concrete instance of `VirtualHardDiskPtrInput` via:
//
//          VirtualHardDiskArgs{...}
//
//  or:
//
//          nil
type VirtualHardDiskPtrInput interface {
	pulumi.Input

	ToVirtualHardDiskPtrOutput() VirtualHardDiskPtrOutput
	ToVirtualHardDiskPtrOutputWithContext(context.Context) VirtualHardDiskPtrOutput
}

type virtualHardDiskPtrType VirtualHardDiskArgs

func VirtualHardDiskPtr(v *VirtualHardDiskArgs) VirtualHardDiskPtrInput {
	return (*virtualHardDiskPtrType)(v)
}

func (*virtualHardDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualHardDisk)(nil)).Elem()
}

func (i *virtualHardDiskPtrType) ToVirtualHardDiskPtrOutput() VirtualHardDiskPtrOutput {
	return i.ToVirtualHardDiskPtrOutputWithContext(context.Background())
}

func (i *virtualHardDiskPtrType) ToVirtualHardDiskPtrOutputWithContext(ctx context.Context) VirtualHardDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualHardDiskPtrOutput)
}

// Describes the uri of a disk.
type VirtualHardDiskResponse struct {
	// Specifies the virtual hard disk's uri.
	Uri *string `pulumi:"uri"`
}

// Describes the uri of a disk.
type VirtualHardDiskResponseOutput struct{ *pulumi.OutputState }

func (VirtualHardDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualHardDiskResponse)(nil)).Elem()
}

func (o VirtualHardDiskResponseOutput) ToVirtualHardDiskResponseOutput() VirtualHardDiskResponseOutput {
	return o
}

func (o VirtualHardDiskResponseOutput) ToVirtualHardDiskResponseOutputWithContext(ctx context.Context) VirtualHardDiskResponseOutput {
	return o
}

func (o VirtualHardDiskResponseOutput) ToVirtualHardDiskResponsePtrOutput() VirtualHardDiskResponsePtrOutput {
	return o.ToVirtualHardDiskResponsePtrOutputWithContext(context.Background())
}

func (o VirtualHardDiskResponseOutput) ToVirtualHardDiskResponsePtrOutputWithContext(ctx context.Context) VirtualHardDiskResponsePtrOutput {
	return o.ApplyT(func(v VirtualHardDiskResponse) *VirtualHardDiskResponse {
		return &v
	}).(VirtualHardDiskResponsePtrOutput)
}

// Specifies the virtual hard disk's uri.
func (o VirtualHardDiskResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualHardDiskResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type VirtualHardDiskResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualHardDiskResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualHardDiskResponse)(nil)).Elem()
}

func (o VirtualHardDiskResponsePtrOutput) ToVirtualHardDiskResponsePtrOutput() VirtualHardDiskResponsePtrOutput {
	return o
}

func (o VirtualHardDiskResponsePtrOutput) ToVirtualHardDiskResponsePtrOutputWithContext(ctx context.Context) VirtualHardDiskResponsePtrOutput {
	return o
}

func (o VirtualHardDiskResponsePtrOutput) Elem() VirtualHardDiskResponseOutput {
	return o.ApplyT(func(v *VirtualHardDiskResponse) VirtualHardDiskResponse { return *v }).(VirtualHardDiskResponseOutput)
}

// Specifies the virtual hard disk's uri.
func (o VirtualHardDiskResponsePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualHardDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// The instance view of the VM Agent running on the virtual machine.
type VirtualMachineAgentInstanceViewResponse struct {
	// The virtual machine extension handler instance view.
	ExtensionHandlers []VirtualMachineExtensionHandlerInstanceViewResponse `pulumi:"extensionHandlers"`
	// The resource status information.
	Statuses []InstanceViewStatusResponse `pulumi:"statuses"`
	// The VM Agent full version.
	VmAgentVersion *string `pulumi:"vmAgentVersion"`
}

// The instance view of the VM Agent running on the virtual machine.
type VirtualMachineAgentInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineAgentInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineAgentInstanceViewResponse)(nil)).Elem()
}

func (o VirtualMachineAgentInstanceViewResponseOutput) ToVirtualMachineAgentInstanceViewResponseOutput() VirtualMachineAgentInstanceViewResponseOutput {
	return o
}

func (o VirtualMachineAgentInstanceViewResponseOutput) ToVirtualMachineAgentInstanceViewResponseOutputWithContext(ctx context.Context) VirtualMachineAgentInstanceViewResponseOutput {
	return o
}

func (o VirtualMachineAgentInstanceViewResponseOutput) ToVirtualMachineAgentInstanceViewResponsePtrOutput() VirtualMachineAgentInstanceViewResponsePtrOutput {
	return o.ToVirtualMachineAgentInstanceViewResponsePtrOutputWithContext(context.Background())
}

func (o VirtualMachineAgentInstanceViewResponseOutput) ToVirtualMachineAgentInstanceViewResponsePtrOutputWithContext(ctx context.Context) VirtualMachineAgentInstanceViewResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineAgentInstanceViewResponse) *VirtualMachineAgentInstanceViewResponse {
		return &v
	}).(VirtualMachineAgentInstanceViewResponsePtrOutput)
}

// The virtual machine extension handler instance view.
func (o VirtualMachineAgentInstanceViewResponseOutput) ExtensionHandlers() VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineAgentInstanceViewResponse) []VirtualMachineExtensionHandlerInstanceViewResponse {
		return v.ExtensionHandlers
	}).(VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput)
}

// The resource status information.
func (o VirtualMachineAgentInstanceViewResponseOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineAgentInstanceViewResponse) []InstanceViewStatusResponse { return v.Statuses }).(InstanceViewStatusResponseArrayOutput)
}

// The VM Agent full version.
func (o VirtualMachineAgentInstanceViewResponseOutput) VmAgentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineAgentInstanceViewResponse) *string { return v.VmAgentVersion }).(pulumi.StringPtrOutput)
}

type VirtualMachineAgentInstanceViewResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineAgentInstanceViewResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineAgentInstanceViewResponse)(nil)).Elem()
}

func (o VirtualMachineAgentInstanceViewResponsePtrOutput) ToVirtualMachineAgentInstanceViewResponsePtrOutput() VirtualMachineAgentInstanceViewResponsePtrOutput {
	return o
}

func (o VirtualMachineAgentInstanceViewResponsePtrOutput) ToVirtualMachineAgentInstanceViewResponsePtrOutputWithContext(ctx context.Context) VirtualMachineAgentInstanceViewResponsePtrOutput {
	return o
}

func (o VirtualMachineAgentInstanceViewResponsePtrOutput) Elem() VirtualMachineAgentInstanceViewResponseOutput {
	return o.ApplyT(func(v *VirtualMachineAgentInstanceViewResponse) VirtualMachineAgentInstanceViewResponse { return *v }).(VirtualMachineAgentInstanceViewResponseOutput)
}

// The virtual machine extension handler instance view.
func (o VirtualMachineAgentInstanceViewResponsePtrOutput) ExtensionHandlers() VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineAgentInstanceViewResponse) []VirtualMachineExtensionHandlerInstanceViewResponse {
		if v == nil {
			return nil
		}
		return v.ExtensionHandlers
	}).(VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput)
}

// The resource status information.
func (o VirtualMachineAgentInstanceViewResponsePtrOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineAgentInstanceViewResponse) []InstanceViewStatusResponse {
		if v == nil {
			return nil
		}
		return v.Statuses
	}).(InstanceViewStatusResponseArrayOutput)
}

// The VM Agent full version.
func (o VirtualMachineAgentInstanceViewResponsePtrOutput) VmAgentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineAgentInstanceViewResponse) *string {
		if v == nil {
			return nil
		}
		return v.VmAgentVersion
	}).(pulumi.StringPtrOutput)
}

// The instance view of a virtual machine extension handler.
type VirtualMachineExtensionHandlerInstanceViewResponse struct {
	// The extension handler status.
	Status *InstanceViewStatusResponse `pulumi:"status"`
	// Specifies the type of the extension; an example is "CustomScriptExtension".
	Type *string `pulumi:"type"`
	// Specifies the version of the script handler.
	TypeHandlerVersion *string `pulumi:"typeHandlerVersion"`
}

// The instance view of a virtual machine extension handler.
type VirtualMachineExtensionHandlerInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineExtensionHandlerInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineExtensionHandlerInstanceViewResponse)(nil)).Elem()
}

func (o VirtualMachineExtensionHandlerInstanceViewResponseOutput) ToVirtualMachineExtensionHandlerInstanceViewResponseOutput() VirtualMachineExtensionHandlerInstanceViewResponseOutput {
	return o
}

func (o VirtualMachineExtensionHandlerInstanceViewResponseOutput) ToVirtualMachineExtensionHandlerInstanceViewResponseOutputWithContext(ctx context.Context) VirtualMachineExtensionHandlerInstanceViewResponseOutput {
	return o
}

// The extension handler status.
func (o VirtualMachineExtensionHandlerInstanceViewResponseOutput) Status() InstanceViewStatusResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionHandlerInstanceViewResponse) *InstanceViewStatusResponse {
		return v.Status
	}).(InstanceViewStatusResponsePtrOutput)
}

// Specifies the type of the extension; an example is "CustomScriptExtension".
func (o VirtualMachineExtensionHandlerInstanceViewResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionHandlerInstanceViewResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Specifies the version of the script handler.
func (o VirtualMachineExtensionHandlerInstanceViewResponseOutput) TypeHandlerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionHandlerInstanceViewResponse) *string { return v.TypeHandlerVersion }).(pulumi.StringPtrOutput)
}

type VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineExtensionHandlerInstanceViewResponse)(nil)).Elem()
}

func (o VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput) ToVirtualMachineExtensionHandlerInstanceViewResponseArrayOutput() VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput {
	return o
}

func (o VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput) ToVirtualMachineExtensionHandlerInstanceViewResponseArrayOutputWithContext(ctx context.Context) VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput {
	return o
}

func (o VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput) Index(i pulumi.IntInput) VirtualMachineExtensionHandlerInstanceViewResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineExtensionHandlerInstanceViewResponse {
		return vs[0].([]VirtualMachineExtensionHandlerInstanceViewResponse)[vs[1].(int)]
	}).(VirtualMachineExtensionHandlerInstanceViewResponseOutput)
}

// The instance view of a virtual machine extension.
type VirtualMachineExtensionInstanceView struct {
	// The virtual machine extension name.
	Name *string `pulumi:"name"`
	// The resource status information.
	Statuses []InstanceViewStatus `pulumi:"statuses"`
	// The resource status information.
	Substatuses []InstanceViewStatus `pulumi:"substatuses"`
	// Specifies the type of the extension; an example is "CustomScriptExtension".
	Type *string `pulumi:"type"`
	// Specifies the version of the script handler.
	TypeHandlerVersion *string `pulumi:"typeHandlerVersion"`
}

// VirtualMachineExtensionInstanceViewInput is an input type that accepts VirtualMachineExtensionInstanceViewArgs and VirtualMachineExtensionInstanceViewOutput values.
// You can construct a concrete instance of `VirtualMachineExtensionInstanceViewInput` via:
//
//          VirtualMachineExtensionInstanceViewArgs{...}
type VirtualMachineExtensionInstanceViewInput interface {
	pulumi.Input

	ToVirtualMachineExtensionInstanceViewOutput() VirtualMachineExtensionInstanceViewOutput
	ToVirtualMachineExtensionInstanceViewOutputWithContext(context.Context) VirtualMachineExtensionInstanceViewOutput
}

// The instance view of a virtual machine extension.
type VirtualMachineExtensionInstanceViewArgs struct {
	// The virtual machine extension name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The resource status information.
	Statuses InstanceViewStatusArrayInput `pulumi:"statuses"`
	// The resource status information.
	Substatuses InstanceViewStatusArrayInput `pulumi:"substatuses"`
	// Specifies the type of the extension; an example is "CustomScriptExtension".
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Specifies the version of the script handler.
	TypeHandlerVersion pulumi.StringPtrInput `pulumi:"typeHandlerVersion"`
}

func (VirtualMachineExtensionInstanceViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineExtensionInstanceView)(nil)).Elem()
}

func (i VirtualMachineExtensionInstanceViewArgs) ToVirtualMachineExtensionInstanceViewOutput() VirtualMachineExtensionInstanceViewOutput {
	return i.ToVirtualMachineExtensionInstanceViewOutputWithContext(context.Background())
}

func (i VirtualMachineExtensionInstanceViewArgs) ToVirtualMachineExtensionInstanceViewOutputWithContext(ctx context.Context) VirtualMachineExtensionInstanceViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineExtensionInstanceViewOutput)
}

func (i VirtualMachineExtensionInstanceViewArgs) ToVirtualMachineExtensionInstanceViewPtrOutput() VirtualMachineExtensionInstanceViewPtrOutput {
	return i.ToVirtualMachineExtensionInstanceViewPtrOutputWithContext(context.Background())
}

func (i VirtualMachineExtensionInstanceViewArgs) ToVirtualMachineExtensionInstanceViewPtrOutputWithContext(ctx context.Context) VirtualMachineExtensionInstanceViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineExtensionInstanceViewOutput).ToVirtualMachineExtensionInstanceViewPtrOutputWithContext(ctx)
}

// VirtualMachineExtensionInstanceViewPtrInput is an input type that accepts VirtualMachineExtensionInstanceViewArgs, VirtualMachineExtensionInstanceViewPtr and VirtualMachineExtensionInstanceViewPtrOutput values.
// You can construct a concrete instance of `VirtualMachineExtensionInstanceViewPtrInput` via:
//
//          VirtualMachineExtensionInstanceViewArgs{...}
//
//  or:
//
//          nil
type VirtualMachineExtensionInstanceViewPtrInput interface {
	pulumi.Input

	ToVirtualMachineExtensionInstanceViewPtrOutput() VirtualMachineExtensionInstanceViewPtrOutput
	ToVirtualMachineExtensionInstanceViewPtrOutputWithContext(context.Context) VirtualMachineExtensionInstanceViewPtrOutput
}

type virtualMachineExtensionInstanceViewPtrType VirtualMachineExtensionInstanceViewArgs

func VirtualMachineExtensionInstanceViewPtr(v *VirtualMachineExtensionInstanceViewArgs) VirtualMachineExtensionInstanceViewPtrInput {
	return (*virtualMachineExtensionInstanceViewPtrType)(v)
}

func (*virtualMachineExtensionInstanceViewPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineExtensionInstanceView)(nil)).Elem()
}

func (i *virtualMachineExtensionInstanceViewPtrType) ToVirtualMachineExtensionInstanceViewPtrOutput() VirtualMachineExtensionInstanceViewPtrOutput {
	return i.ToVirtualMachineExtensionInstanceViewPtrOutputWithContext(context.Background())
}

func (i *virtualMachineExtensionInstanceViewPtrType) ToVirtualMachineExtensionInstanceViewPtrOutputWithContext(ctx context.Context) VirtualMachineExtensionInstanceViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineExtensionInstanceViewPtrOutput)
}

// The instance view of a virtual machine extension.
type VirtualMachineExtensionInstanceViewResponse struct {
	// The virtual machine extension name.
	Name *string `pulumi:"name"`
	// The resource status information.
	Statuses []InstanceViewStatusResponse `pulumi:"statuses"`
	// The resource status information.
	Substatuses []InstanceViewStatusResponse `pulumi:"substatuses"`
	// Specifies the type of the extension; an example is "CustomScriptExtension".
	Type *string `pulumi:"type"`
	// Specifies the version of the script handler.
	TypeHandlerVersion *string `pulumi:"typeHandlerVersion"`
}

// The instance view of a virtual machine extension.
type VirtualMachineExtensionInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineExtensionInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineExtensionInstanceViewResponse)(nil)).Elem()
}

func (o VirtualMachineExtensionInstanceViewResponseOutput) ToVirtualMachineExtensionInstanceViewResponseOutput() VirtualMachineExtensionInstanceViewResponseOutput {
	return o
}

func (o VirtualMachineExtensionInstanceViewResponseOutput) ToVirtualMachineExtensionInstanceViewResponseOutputWithContext(ctx context.Context) VirtualMachineExtensionInstanceViewResponseOutput {
	return o
}

func (o VirtualMachineExtensionInstanceViewResponseOutput) ToVirtualMachineExtensionInstanceViewResponsePtrOutput() VirtualMachineExtensionInstanceViewResponsePtrOutput {
	return o.ToVirtualMachineExtensionInstanceViewResponsePtrOutputWithContext(context.Background())
}

func (o VirtualMachineExtensionInstanceViewResponseOutput) ToVirtualMachineExtensionInstanceViewResponsePtrOutputWithContext(ctx context.Context) VirtualMachineExtensionInstanceViewResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionInstanceViewResponse) *VirtualMachineExtensionInstanceViewResponse {
		return &v
	}).(VirtualMachineExtensionInstanceViewResponsePtrOutput)
}

// The virtual machine extension name.
func (o VirtualMachineExtensionInstanceViewResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionInstanceViewResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The resource status information.
func (o VirtualMachineExtensionInstanceViewResponseOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineExtensionInstanceViewResponse) []InstanceViewStatusResponse { return v.Statuses }).(InstanceViewStatusResponseArrayOutput)
}

// The resource status information.
func (o VirtualMachineExtensionInstanceViewResponseOutput) Substatuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineExtensionInstanceViewResponse) []InstanceViewStatusResponse { return v.Substatuses }).(InstanceViewStatusResponseArrayOutput)
}

// Specifies the type of the extension; an example is "CustomScriptExtension".
func (o VirtualMachineExtensionInstanceViewResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionInstanceViewResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Specifies the version of the script handler.
func (o VirtualMachineExtensionInstanceViewResponseOutput) TypeHandlerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionInstanceViewResponse) *string { return v.TypeHandlerVersion }).(pulumi.StringPtrOutput)
}

type VirtualMachineExtensionInstanceViewResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineExtensionInstanceViewResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineExtensionInstanceViewResponse)(nil)).Elem()
}

func (o VirtualMachineExtensionInstanceViewResponsePtrOutput) ToVirtualMachineExtensionInstanceViewResponsePtrOutput() VirtualMachineExtensionInstanceViewResponsePtrOutput {
	return o
}

func (o VirtualMachineExtensionInstanceViewResponsePtrOutput) ToVirtualMachineExtensionInstanceViewResponsePtrOutputWithContext(ctx context.Context) VirtualMachineExtensionInstanceViewResponsePtrOutput {
	return o
}

func (o VirtualMachineExtensionInstanceViewResponsePtrOutput) Elem() VirtualMachineExtensionInstanceViewResponseOutput {
	return o.ApplyT(func(v *VirtualMachineExtensionInstanceViewResponse) VirtualMachineExtensionInstanceViewResponse {
		return *v
	}).(VirtualMachineExtensionInstanceViewResponseOutput)
}

// The virtual machine extension name.
func (o VirtualMachineExtensionInstanceViewResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineExtensionInstanceViewResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The resource status information.
func (o VirtualMachineExtensionInstanceViewResponsePtrOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineExtensionInstanceViewResponse) []InstanceViewStatusResponse {
		if v == nil {
			return nil
		}
		return v.Statuses
	}).(InstanceViewStatusResponseArrayOutput)
}

// The resource status information.
func (o VirtualMachineExtensionInstanceViewResponsePtrOutput) Substatuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineExtensionInstanceViewResponse) []InstanceViewStatusResponse {
		if v == nil {
			return nil
		}
		return v.Substatuses
	}).(InstanceViewStatusResponseArrayOutput)
}

// Specifies the type of the extension; an example is "CustomScriptExtension".
func (o VirtualMachineExtensionInstanceViewResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineExtensionInstanceViewResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Specifies the version of the script handler.
func (o VirtualMachineExtensionInstanceViewResponsePtrOutput) TypeHandlerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineExtensionInstanceViewResponse) *string {
		if v == nil {
			return nil
		}
		return v.TypeHandlerVersion
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineExtensionInstanceViewResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineExtensionInstanceViewResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineExtensionInstanceViewResponse)(nil)).Elem()
}

func (o VirtualMachineExtensionInstanceViewResponseArrayOutput) ToVirtualMachineExtensionInstanceViewResponseArrayOutput() VirtualMachineExtensionInstanceViewResponseArrayOutput {
	return o
}

func (o VirtualMachineExtensionInstanceViewResponseArrayOutput) ToVirtualMachineExtensionInstanceViewResponseArrayOutputWithContext(ctx context.Context) VirtualMachineExtensionInstanceViewResponseArrayOutput {
	return o
}

func (o VirtualMachineExtensionInstanceViewResponseArrayOutput) Index(i pulumi.IntInput) VirtualMachineExtensionInstanceViewResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineExtensionInstanceViewResponse {
		return vs[0].([]VirtualMachineExtensionInstanceViewResponse)[vs[1].(int)]
	}).(VirtualMachineExtensionInstanceViewResponseOutput)
}

// Describes a Virtual Machine Extension.
type VirtualMachineExtensionResponse struct {
	// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
	AutoUpgradeMinorVersion *bool `pulumi:"autoUpgradeMinorVersion"`
	// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
	EnableAutomaticUpgrade *bool `pulumi:"enableAutomaticUpgrade"`
	// How the extension handler should be forced to update even if the extension configuration has not changed.
	ForceUpdateTag *string `pulumi:"forceUpdateTag"`
	// Resource Id
	Id string `pulumi:"id"`
	// The virtual machine extension instance view.
	InstanceView *VirtualMachineExtensionInstanceViewResponse `pulumi:"instanceView"`
	// Resource location
	Location string `pulumi:"location"`
	// Resource name
	Name string `pulumi:"name"`
	// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
	ProtectedSettings map[string]interface{} `pulumi:"protectedSettings"`
	// The provisioning state, which only appears in the response.
	ProvisioningState string `pulumi:"provisioningState"`
	// The name of the extension handler publisher.
	Publisher *string `pulumi:"publisher"`
	// Json formatted public settings for the extension.
	Settings map[string]interface{} `pulumi:"settings"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type string `pulumi:"type"`
	// Specifies the version of the script handler.
	TypeHandlerVersion *string `pulumi:"typeHandlerVersion"`
}

// Describes a Virtual Machine Extension.
type VirtualMachineExtensionResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineExtensionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineExtensionResponse)(nil)).Elem()
}

func (o VirtualMachineExtensionResponseOutput) ToVirtualMachineExtensionResponseOutput() VirtualMachineExtensionResponseOutput {
	return o
}

func (o VirtualMachineExtensionResponseOutput) ToVirtualMachineExtensionResponseOutputWithContext(ctx context.Context) VirtualMachineExtensionResponseOutput {
	return o
}

// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
func (o VirtualMachineExtensionResponseOutput) AutoUpgradeMinorVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) *bool { return v.AutoUpgradeMinorVersion }).(pulumi.BoolPtrOutput)
}

// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
func (o VirtualMachineExtensionResponseOutput) EnableAutomaticUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) *bool { return v.EnableAutomaticUpgrade }).(pulumi.BoolPtrOutput)
}

// How the extension handler should be forced to update even if the extension configuration has not changed.
func (o VirtualMachineExtensionResponseOutput) ForceUpdateTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) *string { return v.ForceUpdateTag }).(pulumi.StringPtrOutput)
}

// Resource Id
func (o VirtualMachineExtensionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The virtual machine extension instance view.
func (o VirtualMachineExtensionResponseOutput) InstanceView() VirtualMachineExtensionInstanceViewResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) *VirtualMachineExtensionInstanceViewResponse {
		return v.InstanceView
	}).(VirtualMachineExtensionInstanceViewResponsePtrOutput)
}

// Resource location
func (o VirtualMachineExtensionResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Resource name
func (o VirtualMachineExtensionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
func (o VirtualMachineExtensionResponseOutput) ProtectedSettings() pulumi.MapOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) map[string]interface{} { return v.ProtectedSettings }).(pulumi.MapOutput)
}

// The provisioning state, which only appears in the response.
func (o VirtualMachineExtensionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The name of the extension handler publisher.
func (o VirtualMachineExtensionResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// Json formatted public settings for the extension.
func (o VirtualMachineExtensionResponseOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) map[string]interface{} { return v.Settings }).(pulumi.MapOutput)
}

// Resource tags
func (o VirtualMachineExtensionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o VirtualMachineExtensionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies the version of the script handler.
func (o VirtualMachineExtensionResponseOutput) TypeHandlerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) *string { return v.TypeHandlerVersion }).(pulumi.StringPtrOutput)
}

type VirtualMachineExtensionResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineExtensionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineExtensionResponse)(nil)).Elem()
}

func (o VirtualMachineExtensionResponseArrayOutput) ToVirtualMachineExtensionResponseArrayOutput() VirtualMachineExtensionResponseArrayOutput {
	return o
}

func (o VirtualMachineExtensionResponseArrayOutput) ToVirtualMachineExtensionResponseArrayOutputWithContext(ctx context.Context) VirtualMachineExtensionResponseArrayOutput {
	return o
}

func (o VirtualMachineExtensionResponseArrayOutput) Index(i pulumi.IntInput) VirtualMachineExtensionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineExtensionResponse {
		return vs[0].([]VirtualMachineExtensionResponse)[vs[1].(int)]
	}).(VirtualMachineExtensionResponseOutput)
}

// The health status of the VM.
type VirtualMachineHealthStatusResponse struct {
	// The health status information for the VM.
	Status InstanceViewStatusResponse `pulumi:"status"`
}

// The health status of the VM.
type VirtualMachineHealthStatusResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineHealthStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineHealthStatusResponse)(nil)).Elem()
}

func (o VirtualMachineHealthStatusResponseOutput) ToVirtualMachineHealthStatusResponseOutput() VirtualMachineHealthStatusResponseOutput {
	return o
}

func (o VirtualMachineHealthStatusResponseOutput) ToVirtualMachineHealthStatusResponseOutputWithContext(ctx context.Context) VirtualMachineHealthStatusResponseOutput {
	return o
}

func (o VirtualMachineHealthStatusResponseOutput) ToVirtualMachineHealthStatusResponsePtrOutput() VirtualMachineHealthStatusResponsePtrOutput {
	return o.ToVirtualMachineHealthStatusResponsePtrOutputWithContext(context.Background())
}

func (o VirtualMachineHealthStatusResponseOutput) ToVirtualMachineHealthStatusResponsePtrOutputWithContext(ctx context.Context) VirtualMachineHealthStatusResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineHealthStatusResponse) *VirtualMachineHealthStatusResponse {
		return &v
	}).(VirtualMachineHealthStatusResponsePtrOutput)
}

// The health status information for the VM.
func (o VirtualMachineHealthStatusResponseOutput) Status() InstanceViewStatusResponseOutput {
	return o.ApplyT(func(v VirtualMachineHealthStatusResponse) InstanceViewStatusResponse { return v.Status }).(InstanceViewStatusResponseOutput)
}

type VirtualMachineHealthStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineHealthStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineHealthStatusResponse)(nil)).Elem()
}

func (o VirtualMachineHealthStatusResponsePtrOutput) ToVirtualMachineHealthStatusResponsePtrOutput() VirtualMachineHealthStatusResponsePtrOutput {
	return o
}

func (o VirtualMachineHealthStatusResponsePtrOutput) ToVirtualMachineHealthStatusResponsePtrOutputWithContext(ctx context.Context) VirtualMachineHealthStatusResponsePtrOutput {
	return o
}

func (o VirtualMachineHealthStatusResponsePtrOutput) Elem() VirtualMachineHealthStatusResponseOutput {
	return o.ApplyT(func(v *VirtualMachineHealthStatusResponse) VirtualMachineHealthStatusResponse { return *v }).(VirtualMachineHealthStatusResponseOutput)
}

// The health status information for the VM.
func (o VirtualMachineHealthStatusResponsePtrOutput) Status() InstanceViewStatusResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineHealthStatusResponse) *InstanceViewStatusResponse {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(InstanceViewStatusResponsePtrOutput)
}

// Identity for the virtual machine.
type VirtualMachineIdentity struct {
	// The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
	Type *string `pulumi:"type"`
}

// VirtualMachineIdentityInput is an input type that accepts VirtualMachineIdentityArgs and VirtualMachineIdentityOutput values.
// You can construct a concrete instance of `VirtualMachineIdentityInput` via:
//
//          VirtualMachineIdentityArgs{...}
type VirtualMachineIdentityInput interface {
	pulumi.Input

	ToVirtualMachineIdentityOutput() VirtualMachineIdentityOutput
	ToVirtualMachineIdentityOutputWithContext(context.Context) VirtualMachineIdentityOutput
}

// Identity for the virtual machine.
type VirtualMachineIdentityArgs struct {
	// The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (VirtualMachineIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineIdentity)(nil)).Elem()
}

func (i VirtualMachineIdentityArgs) ToVirtualMachineIdentityOutput() VirtualMachineIdentityOutput {
	return i.ToVirtualMachineIdentityOutputWithContext(context.Background())
}

func (i VirtualMachineIdentityArgs) ToVirtualMachineIdentityOutputWithContext(ctx context.Context) VirtualMachineIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineIdentityOutput)
}

func (i VirtualMachineIdentityArgs) ToVirtualMachineIdentityPtrOutput() VirtualMachineIdentityPtrOutput {
	return i.ToVirtualMachineIdentityPtrOutputWithContext(context.Background())
}

func (i VirtualMachineIdentityArgs) ToVirtualMachineIdentityPtrOutputWithContext(ctx context.Context) VirtualMachineIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineIdentityOutput).ToVirtualMachineIdentityPtrOutputWithContext(ctx)
}

// VirtualMachineIdentityPtrInput is an input type that accepts VirtualMachineIdentityArgs, VirtualMachineIdentityPtr and VirtualMachineIdentityPtrOutput values.
// You can construct a concrete instance of `VirtualMachineIdentityPtrInput` via:
//
//          VirtualMachineIdentityArgs{...}
//
//  or:
//
//          nil
type VirtualMachineIdentityPtrInput interface {
	pulumi.Input

	ToVirtualMachineIdentityPtrOutput() VirtualMachineIdentityPtrOutput
	ToVirtualMachineIdentityPtrOutputWithContext(context.Context) VirtualMachineIdentityPtrOutput
}

type virtualMachineIdentityPtrType VirtualMachineIdentityArgs

func VirtualMachineIdentityPtr(v *VirtualMachineIdentityArgs) VirtualMachineIdentityPtrInput {
	return (*virtualMachineIdentityPtrType)(v)
}

func (*virtualMachineIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineIdentity)(nil)).Elem()
}

func (i *virtualMachineIdentityPtrType) ToVirtualMachineIdentityPtrOutput() VirtualMachineIdentityPtrOutput {
	return i.ToVirtualMachineIdentityPtrOutputWithContext(context.Background())
}

func (i *virtualMachineIdentityPtrType) ToVirtualMachineIdentityPtrOutputWithContext(ctx context.Context) VirtualMachineIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineIdentityPtrOutput)
}

// Identity for the virtual machine.
type VirtualMachineIdentityResponse struct {
	// The principal id of virtual machine identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant id associated with the virtual machine. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
	Type *string `pulumi:"type"`
	// The list of user identities associated with the Virtual Machine. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]VirtualMachineIdentityResponseUserAssignedIdentities `pulumi:"userAssignedIdentities"`
}

// Identity for the virtual machine.
type VirtualMachineIdentityResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineIdentityResponse)(nil)).Elem()
}

func (o VirtualMachineIdentityResponseOutput) ToVirtualMachineIdentityResponseOutput() VirtualMachineIdentityResponseOutput {
	return o
}

func (o VirtualMachineIdentityResponseOutput) ToVirtualMachineIdentityResponseOutputWithContext(ctx context.Context) VirtualMachineIdentityResponseOutput {
	return o
}

func (o VirtualMachineIdentityResponseOutput) ToVirtualMachineIdentityResponsePtrOutput() VirtualMachineIdentityResponsePtrOutput {
	return o.ToVirtualMachineIdentityResponsePtrOutputWithContext(context.Background())
}

func (o VirtualMachineIdentityResponseOutput) ToVirtualMachineIdentityResponsePtrOutputWithContext(ctx context.Context) VirtualMachineIdentityResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineIdentityResponse) *VirtualMachineIdentityResponse {
		return &v
	}).(VirtualMachineIdentityResponsePtrOutput)
}

// The principal id of virtual machine identity. This property will only be provided for a system assigned identity.
func (o VirtualMachineIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant id associated with the virtual machine. This property will only be provided for a system assigned identity.
func (o VirtualMachineIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
func (o VirtualMachineIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the Virtual Machine. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o VirtualMachineIdentityResponseOutput) UserAssignedIdentities() VirtualMachineIdentityResponseUserAssignedIdentitiesMapOutput {
	return o.ApplyT(func(v VirtualMachineIdentityResponse) map[string]VirtualMachineIdentityResponseUserAssignedIdentities {
		return v.UserAssignedIdentities
	}).(VirtualMachineIdentityResponseUserAssignedIdentitiesMapOutput)
}

type VirtualMachineIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineIdentityResponse)(nil)).Elem()
}

func (o VirtualMachineIdentityResponsePtrOutput) ToVirtualMachineIdentityResponsePtrOutput() VirtualMachineIdentityResponsePtrOutput {
	return o
}

func (o VirtualMachineIdentityResponsePtrOutput) ToVirtualMachineIdentityResponsePtrOutputWithContext(ctx context.Context) VirtualMachineIdentityResponsePtrOutput {
	return o
}

func (o VirtualMachineIdentityResponsePtrOutput) Elem() VirtualMachineIdentityResponseOutput {
	return o.ApplyT(func(v *VirtualMachineIdentityResponse) VirtualMachineIdentityResponse { return *v }).(VirtualMachineIdentityResponseOutput)
}

// The principal id of virtual machine identity. This property will only be provided for a system assigned identity.
func (o VirtualMachineIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant id associated with the virtual machine. This property will only be provided for a system assigned identity.
func (o VirtualMachineIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
func (o VirtualMachineIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the Virtual Machine. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o VirtualMachineIdentityResponsePtrOutput) UserAssignedIdentities() VirtualMachineIdentityResponseUserAssignedIdentitiesMapOutput {
	return o.ApplyT(func(v *VirtualMachineIdentityResponse) map[string]VirtualMachineIdentityResponseUserAssignedIdentities {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(VirtualMachineIdentityResponseUserAssignedIdentitiesMapOutput)
}

type VirtualMachineIdentityResponseUserAssignedIdentities struct {
	// The client id of user assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

type VirtualMachineIdentityResponseUserAssignedIdentitiesOutput struct{ *pulumi.OutputState }

func (VirtualMachineIdentityResponseUserAssignedIdentitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineIdentityResponseUserAssignedIdentities)(nil)).Elem()
}

func (o VirtualMachineIdentityResponseUserAssignedIdentitiesOutput) ToVirtualMachineIdentityResponseUserAssignedIdentitiesOutput() VirtualMachineIdentityResponseUserAssignedIdentitiesOutput {
	return o
}

func (o VirtualMachineIdentityResponseUserAssignedIdentitiesOutput) ToVirtualMachineIdentityResponseUserAssignedIdentitiesOutputWithContext(ctx context.Context) VirtualMachineIdentityResponseUserAssignedIdentitiesOutput {
	return o
}

// The client id of user assigned identity.
func (o VirtualMachineIdentityResponseUserAssignedIdentitiesOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineIdentityResponseUserAssignedIdentities) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal id of user assigned identity.
func (o VirtualMachineIdentityResponseUserAssignedIdentitiesOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineIdentityResponseUserAssignedIdentities) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type VirtualMachineIdentityResponseUserAssignedIdentitiesMapOutput struct{ *pulumi.OutputState }

func (VirtualMachineIdentityResponseUserAssignedIdentitiesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VirtualMachineIdentityResponseUserAssignedIdentities)(nil)).Elem()
}

func (o VirtualMachineIdentityResponseUserAssignedIdentitiesMapOutput) ToVirtualMachineIdentityResponseUserAssignedIdentitiesMapOutput() VirtualMachineIdentityResponseUserAssignedIdentitiesMapOutput {
	return o
}

func (o VirtualMachineIdentityResponseUserAssignedIdentitiesMapOutput) ToVirtualMachineIdentityResponseUserAssignedIdentitiesMapOutputWithContext(ctx context.Context) VirtualMachineIdentityResponseUserAssignedIdentitiesMapOutput {
	return o
}

func (o VirtualMachineIdentityResponseUserAssignedIdentitiesMapOutput) MapIndex(k pulumi.StringInput) VirtualMachineIdentityResponseUserAssignedIdentitiesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VirtualMachineIdentityResponseUserAssignedIdentities {
		return vs[0].(map[string]VirtualMachineIdentityResponseUserAssignedIdentities)[vs[1].(string)]
	}).(VirtualMachineIdentityResponseUserAssignedIdentitiesOutput)
}

// The instance view of a virtual machine.
type VirtualMachineInstanceViewResponse struct {
	// Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. <br><br>Minimum api-version: 2020-06-01.
	AssignedHost string `pulumi:"assignedHost"`
	// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor.
	BootDiagnostics *BootDiagnosticsInstanceViewResponse `pulumi:"bootDiagnostics"`
	// The computer name assigned to the virtual machine.
	ComputerName *string `pulumi:"computerName"`
	// The virtual machine disk information.
	Disks []DiskInstanceViewResponse `pulumi:"disks"`
	// The extensions information.
	Extensions []VirtualMachineExtensionInstanceViewResponse `pulumi:"extensions"`
	// Specifies the HyperVGeneration Type associated with a resource
	HyperVGeneration *string `pulumi:"hyperVGeneration"`
	// The Maintenance Operation status on the virtual machine.
	MaintenanceRedeployStatus *MaintenanceRedeployStatusResponse `pulumi:"maintenanceRedeployStatus"`
	// The Operating System running on the virtual machine.
	OsName *string `pulumi:"osName"`
	// The version of Operating System running on the virtual machine.
	OsVersion *string `pulumi:"osVersion"`
	// The status of virtual machine patch operations.
	PatchStatus *VirtualMachinePatchStatusResponse `pulumi:"patchStatus"`
	// Specifies the fault domain of the virtual machine.
	PlatformFaultDomain *int `pulumi:"platformFaultDomain"`
	// Specifies the update domain of the virtual machine.
	PlatformUpdateDomain *int `pulumi:"platformUpdateDomain"`
	// The Remote desktop certificate thumbprint.
	RdpThumbPrint *string `pulumi:"rdpThumbPrint"`
	// The resource status information.
	Statuses []InstanceViewStatusResponse `pulumi:"statuses"`
	// The VM Agent running on the virtual machine.
	VmAgent *VirtualMachineAgentInstanceViewResponse `pulumi:"vmAgent"`
	// The health status for the VM.
	VmHealth VirtualMachineHealthStatusResponse `pulumi:"vmHealth"`
}

// The instance view of a virtual machine.
type VirtualMachineInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInstanceViewResponse)(nil)).Elem()
}

func (o VirtualMachineInstanceViewResponseOutput) ToVirtualMachineInstanceViewResponseOutput() VirtualMachineInstanceViewResponseOutput {
	return o
}

func (o VirtualMachineInstanceViewResponseOutput) ToVirtualMachineInstanceViewResponseOutputWithContext(ctx context.Context) VirtualMachineInstanceViewResponseOutput {
	return o
}

func (o VirtualMachineInstanceViewResponseOutput) ToVirtualMachineInstanceViewResponsePtrOutput() VirtualMachineInstanceViewResponsePtrOutput {
	return o.ToVirtualMachineInstanceViewResponsePtrOutputWithContext(context.Background())
}

func (o VirtualMachineInstanceViewResponseOutput) ToVirtualMachineInstanceViewResponsePtrOutputWithContext(ctx context.Context) VirtualMachineInstanceViewResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) *VirtualMachineInstanceViewResponse {
		return &v
	}).(VirtualMachineInstanceViewResponsePtrOutput)
}

// Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. <br><br>Minimum api-version: 2020-06-01.
func (o VirtualMachineInstanceViewResponseOutput) AssignedHost() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) string { return v.AssignedHost }).(pulumi.StringOutput)
}

// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor.
func (o VirtualMachineInstanceViewResponseOutput) BootDiagnostics() BootDiagnosticsInstanceViewResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) *BootDiagnosticsInstanceViewResponse {
		return v.BootDiagnostics
	}).(BootDiagnosticsInstanceViewResponsePtrOutput)
}

// The computer name assigned to the virtual machine.
func (o VirtualMachineInstanceViewResponseOutput) ComputerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) *string { return v.ComputerName }).(pulumi.StringPtrOutput)
}

// The virtual machine disk information.
func (o VirtualMachineInstanceViewResponseOutput) Disks() DiskInstanceViewResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) []DiskInstanceViewResponse { return v.Disks }).(DiskInstanceViewResponseArrayOutput)
}

// The extensions information.
func (o VirtualMachineInstanceViewResponseOutput) Extensions() VirtualMachineExtensionInstanceViewResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) []VirtualMachineExtensionInstanceViewResponse {
		return v.Extensions
	}).(VirtualMachineExtensionInstanceViewResponseArrayOutput)
}

// Specifies the HyperVGeneration Type associated with a resource
func (o VirtualMachineInstanceViewResponseOutput) HyperVGeneration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) *string { return v.HyperVGeneration }).(pulumi.StringPtrOutput)
}

// The Maintenance Operation status on the virtual machine.
func (o VirtualMachineInstanceViewResponseOutput) MaintenanceRedeployStatus() MaintenanceRedeployStatusResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) *MaintenanceRedeployStatusResponse {
		return v.MaintenanceRedeployStatus
	}).(MaintenanceRedeployStatusResponsePtrOutput)
}

// The Operating System running on the virtual machine.
func (o VirtualMachineInstanceViewResponseOutput) OsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) *string { return v.OsName }).(pulumi.StringPtrOutput)
}

// The version of Operating System running on the virtual machine.
func (o VirtualMachineInstanceViewResponseOutput) OsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) *string { return v.OsVersion }).(pulumi.StringPtrOutput)
}

// The status of virtual machine patch operations.
func (o VirtualMachineInstanceViewResponseOutput) PatchStatus() VirtualMachinePatchStatusResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) *VirtualMachinePatchStatusResponse { return v.PatchStatus }).(VirtualMachinePatchStatusResponsePtrOutput)
}

// Specifies the fault domain of the virtual machine.
func (o VirtualMachineInstanceViewResponseOutput) PlatformFaultDomain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) *int { return v.PlatformFaultDomain }).(pulumi.IntPtrOutput)
}

// Specifies the update domain of the virtual machine.
func (o VirtualMachineInstanceViewResponseOutput) PlatformUpdateDomain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) *int { return v.PlatformUpdateDomain }).(pulumi.IntPtrOutput)
}

// The Remote desktop certificate thumbprint.
func (o VirtualMachineInstanceViewResponseOutput) RdpThumbPrint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) *string { return v.RdpThumbPrint }).(pulumi.StringPtrOutput)
}

// The resource status information.
func (o VirtualMachineInstanceViewResponseOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) []InstanceViewStatusResponse { return v.Statuses }).(InstanceViewStatusResponseArrayOutput)
}

// The VM Agent running on the virtual machine.
func (o VirtualMachineInstanceViewResponseOutput) VmAgent() VirtualMachineAgentInstanceViewResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) *VirtualMachineAgentInstanceViewResponse { return v.VmAgent }).(VirtualMachineAgentInstanceViewResponsePtrOutput)
}

// The health status for the VM.
func (o VirtualMachineInstanceViewResponseOutput) VmHealth() VirtualMachineHealthStatusResponseOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) VirtualMachineHealthStatusResponse { return v.VmHealth }).(VirtualMachineHealthStatusResponseOutput)
}

type VirtualMachineInstanceViewResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineInstanceViewResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineInstanceViewResponse)(nil)).Elem()
}

func (o VirtualMachineInstanceViewResponsePtrOutput) ToVirtualMachineInstanceViewResponsePtrOutput() VirtualMachineInstanceViewResponsePtrOutput {
	return o
}

func (o VirtualMachineInstanceViewResponsePtrOutput) ToVirtualMachineInstanceViewResponsePtrOutputWithContext(ctx context.Context) VirtualMachineInstanceViewResponsePtrOutput {
	return o
}

func (o VirtualMachineInstanceViewResponsePtrOutput) Elem() VirtualMachineInstanceViewResponseOutput {
	return o.ApplyT(func(v *VirtualMachineInstanceViewResponse) VirtualMachineInstanceViewResponse { return *v }).(VirtualMachineInstanceViewResponseOutput)
}

// Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. <br><br>Minimum api-version: 2020-06-01.
func (o VirtualMachineInstanceViewResponsePtrOutput) AssignedHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInstanceViewResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AssignedHost
	}).(pulumi.StringPtrOutput)
}

// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor.
func (o VirtualMachineInstanceViewResponsePtrOutput) BootDiagnostics() BootDiagnosticsInstanceViewResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineInstanceViewResponse) *BootDiagnosticsInstanceViewResponse {
		if v == nil {
			return nil
		}
		return v.BootDiagnostics
	}).(BootDiagnosticsInstanceViewResponsePtrOutput)
}

// The computer name assigned to the virtual machine.
func (o VirtualMachineInstanceViewResponsePtrOutput) ComputerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInstanceViewResponse) *string {
		if v == nil {
			return nil
		}
		return v.ComputerName
	}).(pulumi.StringPtrOutput)
}

// The virtual machine disk information.
func (o VirtualMachineInstanceViewResponsePtrOutput) Disks() DiskInstanceViewResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineInstanceViewResponse) []DiskInstanceViewResponse {
		if v == nil {
			return nil
		}
		return v.Disks
	}).(DiskInstanceViewResponseArrayOutput)
}

// The extensions information.
func (o VirtualMachineInstanceViewResponsePtrOutput) Extensions() VirtualMachineExtensionInstanceViewResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineInstanceViewResponse) []VirtualMachineExtensionInstanceViewResponse {
		if v == nil {
			return nil
		}
		return v.Extensions
	}).(VirtualMachineExtensionInstanceViewResponseArrayOutput)
}

// Specifies the HyperVGeneration Type associated with a resource
func (o VirtualMachineInstanceViewResponsePtrOutput) HyperVGeneration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInstanceViewResponse) *string {
		if v == nil {
			return nil
		}
		return v.HyperVGeneration
	}).(pulumi.StringPtrOutput)
}

// The Maintenance Operation status on the virtual machine.
func (o VirtualMachineInstanceViewResponsePtrOutput) MaintenanceRedeployStatus() MaintenanceRedeployStatusResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineInstanceViewResponse) *MaintenanceRedeployStatusResponse {
		if v == nil {
			return nil
		}
		return v.MaintenanceRedeployStatus
	}).(MaintenanceRedeployStatusResponsePtrOutput)
}

// The Operating System running on the virtual machine.
func (o VirtualMachineInstanceViewResponsePtrOutput) OsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInstanceViewResponse) *string {
		if v == nil {
			return nil
		}
		return v.OsName
	}).(pulumi.StringPtrOutput)
}

// The version of Operating System running on the virtual machine.
func (o VirtualMachineInstanceViewResponsePtrOutput) OsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInstanceViewResponse) *string {
		if v == nil {
			return nil
		}
		return v.OsVersion
	}).(pulumi.StringPtrOutput)
}

// The status of virtual machine patch operations.
func (o VirtualMachineInstanceViewResponsePtrOutput) PatchStatus() VirtualMachinePatchStatusResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineInstanceViewResponse) *VirtualMachinePatchStatusResponse {
		if v == nil {
			return nil
		}
		return v.PatchStatus
	}).(VirtualMachinePatchStatusResponsePtrOutput)
}

// Specifies the fault domain of the virtual machine.
func (o VirtualMachineInstanceViewResponsePtrOutput) PlatformFaultDomain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInstanceViewResponse) *int {
		if v == nil {
			return nil
		}
		return v.PlatformFaultDomain
	}).(pulumi.IntPtrOutput)
}

// Specifies the update domain of the virtual machine.
func (o VirtualMachineInstanceViewResponsePtrOutput) PlatformUpdateDomain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInstanceViewResponse) *int {
		if v == nil {
			return nil
		}
		return v.PlatformUpdateDomain
	}).(pulumi.IntPtrOutput)
}

// The Remote desktop certificate thumbprint.
func (o VirtualMachineInstanceViewResponsePtrOutput) RdpThumbPrint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInstanceViewResponse) *string {
		if v == nil {
			return nil
		}
		return v.RdpThumbPrint
	}).(pulumi.StringPtrOutput)
}

// The resource status information.
func (o VirtualMachineInstanceViewResponsePtrOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineInstanceViewResponse) []InstanceViewStatusResponse {
		if v == nil {
			return nil
		}
		return v.Statuses
	}).(InstanceViewStatusResponseArrayOutput)
}

// The VM Agent running on the virtual machine.
func (o VirtualMachineInstanceViewResponsePtrOutput) VmAgent() VirtualMachineAgentInstanceViewResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineInstanceViewResponse) *VirtualMachineAgentInstanceViewResponse {
		if v == nil {
			return nil
		}
		return v.VmAgent
	}).(VirtualMachineAgentInstanceViewResponsePtrOutput)
}

// The health status for the VM.
func (o VirtualMachineInstanceViewResponsePtrOutput) VmHealth() VirtualMachineHealthStatusResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineInstanceViewResponse) *VirtualMachineHealthStatusResponse {
		if v == nil {
			return nil
		}
		return &v.VmHealth
	}).(VirtualMachineHealthStatusResponsePtrOutput)
}

// The status of virtual machine patch operations.
type VirtualMachinePatchStatusResponse struct {
	// The available patch summary of the latest assessment operation for the virtual machine.
	AvailablePatchSummary *AvailablePatchSummaryResponse `pulumi:"availablePatchSummary"`
	// The installation summary of the latest installation operation for the virtual machine.
	LastPatchInstallationSummary *LastPatchInstallationSummaryResponse `pulumi:"lastPatchInstallationSummary"`
}

// The status of virtual machine patch operations.
type VirtualMachinePatchStatusResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachinePatchStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachinePatchStatusResponse)(nil)).Elem()
}

func (o VirtualMachinePatchStatusResponseOutput) ToVirtualMachinePatchStatusResponseOutput() VirtualMachinePatchStatusResponseOutput {
	return o
}

func (o VirtualMachinePatchStatusResponseOutput) ToVirtualMachinePatchStatusResponseOutputWithContext(ctx context.Context) VirtualMachinePatchStatusResponseOutput {
	return o
}

func (o VirtualMachinePatchStatusResponseOutput) ToVirtualMachinePatchStatusResponsePtrOutput() VirtualMachinePatchStatusResponsePtrOutput {
	return o.ToVirtualMachinePatchStatusResponsePtrOutputWithContext(context.Background())
}

func (o VirtualMachinePatchStatusResponseOutput) ToVirtualMachinePatchStatusResponsePtrOutputWithContext(ctx context.Context) VirtualMachinePatchStatusResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachinePatchStatusResponse) *VirtualMachinePatchStatusResponse {
		return &v
	}).(VirtualMachinePatchStatusResponsePtrOutput)
}

// The available patch summary of the latest assessment operation for the virtual machine.
func (o VirtualMachinePatchStatusResponseOutput) AvailablePatchSummary() AvailablePatchSummaryResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachinePatchStatusResponse) *AvailablePatchSummaryResponse {
		return v.AvailablePatchSummary
	}).(AvailablePatchSummaryResponsePtrOutput)
}

// The installation summary of the latest installation operation for the virtual machine.
func (o VirtualMachinePatchStatusResponseOutput) LastPatchInstallationSummary() LastPatchInstallationSummaryResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachinePatchStatusResponse) *LastPatchInstallationSummaryResponse {
		return v.LastPatchInstallationSummary
	}).(LastPatchInstallationSummaryResponsePtrOutput)
}

type VirtualMachinePatchStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachinePatchStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachinePatchStatusResponse)(nil)).Elem()
}

func (o VirtualMachinePatchStatusResponsePtrOutput) ToVirtualMachinePatchStatusResponsePtrOutput() VirtualMachinePatchStatusResponsePtrOutput {
	return o
}

func (o VirtualMachinePatchStatusResponsePtrOutput) ToVirtualMachinePatchStatusResponsePtrOutputWithContext(ctx context.Context) VirtualMachinePatchStatusResponsePtrOutput {
	return o
}

func (o VirtualMachinePatchStatusResponsePtrOutput) Elem() VirtualMachinePatchStatusResponseOutput {
	return o.ApplyT(func(v *VirtualMachinePatchStatusResponse) VirtualMachinePatchStatusResponse { return *v }).(VirtualMachinePatchStatusResponseOutput)
}

// The available patch summary of the latest assessment operation for the virtual machine.
func (o VirtualMachinePatchStatusResponsePtrOutput) AvailablePatchSummary() AvailablePatchSummaryResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachinePatchStatusResponse) *AvailablePatchSummaryResponse {
		if v == nil {
			return nil
		}
		return v.AvailablePatchSummary
	}).(AvailablePatchSummaryResponsePtrOutput)
}

// The installation summary of the latest installation operation for the virtual machine.
func (o VirtualMachinePatchStatusResponsePtrOutput) LastPatchInstallationSummary() LastPatchInstallationSummaryResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachinePatchStatusResponse) *LastPatchInstallationSummaryResponse {
		if v == nil {
			return nil
		}
		return v.LastPatchInstallationSummary
	}).(LastPatchInstallationSummaryResponsePtrOutput)
}

// Describes a virtual machine scale set data disk.
type VirtualMachineScaleSetDataDisk struct {
	// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
	Caching *string `pulumi:"caching"`
	// The create option.
	CreateOption string `pulumi:"createOption"`
	// Specifies the Read-Write IOPS for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
	DiskIOPSReadWrite *int `pulumi:"diskIOPSReadWrite"`
	// Specifies the bandwidth in MB per second for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
	DiskMBpsReadWrite *int `pulumi:"diskMBpsReadWrite"`
	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
	Lun int `pulumi:"lun"`
	// The managed disk parameters.
	ManagedDisk *VirtualMachineScaleSetManagedDiskParameters `pulumi:"managedDisk"`
	// The disk name.
	Name *string `pulumi:"name"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool `pulumi:"writeAcceleratorEnabled"`
}

// VirtualMachineScaleSetDataDiskInput is an input type that accepts VirtualMachineScaleSetDataDiskArgs and VirtualMachineScaleSetDataDiskOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetDataDiskInput` via:
//
//          VirtualMachineScaleSetDataDiskArgs{...}
type VirtualMachineScaleSetDataDiskInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetDataDiskOutput() VirtualMachineScaleSetDataDiskOutput
	ToVirtualMachineScaleSetDataDiskOutputWithContext(context.Context) VirtualMachineScaleSetDataDiskOutput
}

// Describes a virtual machine scale set data disk.
type VirtualMachineScaleSetDataDiskArgs struct {
	// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
	Caching pulumi.StringPtrInput `pulumi:"caching"`
	// The create option.
	CreateOption pulumi.StringInput `pulumi:"createOption"`
	// Specifies the Read-Write IOPS for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
	DiskIOPSReadWrite pulumi.IntPtrInput `pulumi:"diskIOPSReadWrite"`
	// Specifies the bandwidth in MB per second for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
	DiskMBpsReadWrite pulumi.IntPtrInput `pulumi:"diskMBpsReadWrite"`
	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
	DiskSizeGB pulumi.IntPtrInput `pulumi:"diskSizeGB"`
	// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
	Lun pulumi.IntInput `pulumi:"lun"`
	// The managed disk parameters.
	ManagedDisk VirtualMachineScaleSetManagedDiskParametersPtrInput `pulumi:"managedDisk"`
	// The disk name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled pulumi.BoolPtrInput `pulumi:"writeAcceleratorEnabled"`
}

func (VirtualMachineScaleSetDataDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetDataDisk)(nil)).Elem()
}

func (i VirtualMachineScaleSetDataDiskArgs) ToVirtualMachineScaleSetDataDiskOutput() VirtualMachineScaleSetDataDiskOutput {
	return i.ToVirtualMachineScaleSetDataDiskOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetDataDiskArgs) ToVirtualMachineScaleSetDataDiskOutputWithContext(ctx context.Context) VirtualMachineScaleSetDataDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetDataDiskOutput)
}

// VirtualMachineScaleSetDataDiskArrayInput is an input type that accepts VirtualMachineScaleSetDataDiskArray and VirtualMachineScaleSetDataDiskArrayOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetDataDiskArrayInput` via:
//
//          VirtualMachineScaleSetDataDiskArray{ VirtualMachineScaleSetDataDiskArgs{...} }
type VirtualMachineScaleSetDataDiskArrayInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetDataDiskArrayOutput() VirtualMachineScaleSetDataDiskArrayOutput
	ToVirtualMachineScaleSetDataDiskArrayOutputWithContext(context.Context) VirtualMachineScaleSetDataDiskArrayOutput
}

type VirtualMachineScaleSetDataDiskArray []VirtualMachineScaleSetDataDiskInput

func (VirtualMachineScaleSetDataDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetDataDisk)(nil)).Elem()
}

func (i VirtualMachineScaleSetDataDiskArray) ToVirtualMachineScaleSetDataDiskArrayOutput() VirtualMachineScaleSetDataDiskArrayOutput {
	return i.ToVirtualMachineScaleSetDataDiskArrayOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetDataDiskArray) ToVirtualMachineScaleSetDataDiskArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetDataDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetDataDiskArrayOutput)
}

// Describes a virtual machine scale set data disk.
type VirtualMachineScaleSetDataDiskResponse struct {
	// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
	Caching *string `pulumi:"caching"`
	// The create option.
	CreateOption string `pulumi:"createOption"`
	// Specifies the Read-Write IOPS for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
	DiskIOPSReadWrite *int `pulumi:"diskIOPSReadWrite"`
	// Specifies the bandwidth in MB per second for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
	DiskMBpsReadWrite *int `pulumi:"diskMBpsReadWrite"`
	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
	Lun int `pulumi:"lun"`
	// The managed disk parameters.
	ManagedDisk *VirtualMachineScaleSetManagedDiskParametersResponse `pulumi:"managedDisk"`
	// The disk name.
	Name *string `pulumi:"name"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool `pulumi:"writeAcceleratorEnabled"`
}

// Describes a virtual machine scale set data disk.
type VirtualMachineScaleSetDataDiskResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetDataDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetDataDiskResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetDataDiskResponseOutput) ToVirtualMachineScaleSetDataDiskResponseOutput() VirtualMachineScaleSetDataDiskResponseOutput {
	return o
}

func (o VirtualMachineScaleSetDataDiskResponseOutput) ToVirtualMachineScaleSetDataDiskResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetDataDiskResponseOutput {
	return o
}

// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
func (o VirtualMachineScaleSetDataDiskResponseOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDiskResponse) *string { return v.Caching }).(pulumi.StringPtrOutput)
}

// The create option.
func (o VirtualMachineScaleSetDataDiskResponseOutput) CreateOption() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDiskResponse) string { return v.CreateOption }).(pulumi.StringOutput)
}

// Specifies the Read-Write IOPS for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
func (o VirtualMachineScaleSetDataDiskResponseOutput) DiskIOPSReadWrite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDiskResponse) *int { return v.DiskIOPSReadWrite }).(pulumi.IntPtrOutput)
}

// Specifies the bandwidth in MB per second for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
func (o VirtualMachineScaleSetDataDiskResponseOutput) DiskMBpsReadWrite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDiskResponse) *int { return v.DiskMBpsReadWrite }).(pulumi.IntPtrOutput)
}

// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
func (o VirtualMachineScaleSetDataDiskResponseOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDiskResponse) *int { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
func (o VirtualMachineScaleSetDataDiskResponseOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDiskResponse) int { return v.Lun }).(pulumi.IntOutput)
}

// The managed disk parameters.
func (o VirtualMachineScaleSetDataDiskResponseOutput) ManagedDisk() VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDiskResponse) *VirtualMachineScaleSetManagedDiskParametersResponse {
		return v.ManagedDisk
	}).(VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput)
}

// The disk name.
func (o VirtualMachineScaleSetDataDiskResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDiskResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies whether writeAccelerator should be enabled or disabled on the disk.
func (o VirtualMachineScaleSetDataDiskResponseOutput) WriteAcceleratorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDiskResponse) *bool { return v.WriteAcceleratorEnabled }).(pulumi.BoolPtrOutput)
}

type VirtualMachineScaleSetDataDiskResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetDataDiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetDataDiskResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetDataDiskResponseArrayOutput) ToVirtualMachineScaleSetDataDiskResponseArrayOutput() VirtualMachineScaleSetDataDiskResponseArrayOutput {
	return o
}

func (o VirtualMachineScaleSetDataDiskResponseArrayOutput) ToVirtualMachineScaleSetDataDiskResponseArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetDataDiskResponseArrayOutput {
	return o
}

func (o VirtualMachineScaleSetDataDiskResponseArrayOutput) Index(i pulumi.IntInput) VirtualMachineScaleSetDataDiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineScaleSetDataDiskResponse {
		return vs[0].([]VirtualMachineScaleSetDataDiskResponse)[vs[1].(int)]
	}).(VirtualMachineScaleSetDataDiskResponseOutput)
}

// Describes a Virtual Machine Scale Set Extension.
type VirtualMachineScaleSetExtensionType struct {
	// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
	AutoUpgradeMinorVersion *bool `pulumi:"autoUpgradeMinorVersion"`
	// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
	EnableAutomaticUpgrade *bool `pulumi:"enableAutomaticUpgrade"`
	// If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed.
	ForceUpdateTag *string `pulumi:"forceUpdateTag"`
	// The name of the extension.
	Name *string `pulumi:"name"`
	// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
	ProtectedSettings map[string]interface{} `pulumi:"protectedSettings"`
	// Collection of extension names after which this extension needs to be provisioned.
	ProvisionAfterExtensions []string `pulumi:"provisionAfterExtensions"`
	// The name of the extension handler publisher.
	Publisher *string `pulumi:"publisher"`
	// Json formatted public settings for the extension.
	Settings map[string]interface{} `pulumi:"settings"`
	// Specifies the type of the extension; an example is "CustomScriptExtension".
	Type *string `pulumi:"type"`
	// Specifies the version of the script handler.
	TypeHandlerVersion *string `pulumi:"typeHandlerVersion"`
}

// VirtualMachineScaleSetExtensionTypeInput is an input type that accepts VirtualMachineScaleSetExtensionTypeArgs and VirtualMachineScaleSetExtensionTypeOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetExtensionTypeInput` via:
//
//          VirtualMachineScaleSetExtensionTypeArgs{...}
type VirtualMachineScaleSetExtensionTypeInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetExtensionTypeOutput() VirtualMachineScaleSetExtensionTypeOutput
	ToVirtualMachineScaleSetExtensionTypeOutputWithContext(context.Context) VirtualMachineScaleSetExtensionTypeOutput
}

// Describes a Virtual Machine Scale Set Extension.
type VirtualMachineScaleSetExtensionTypeArgs struct {
	// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
	AutoUpgradeMinorVersion pulumi.BoolPtrInput `pulumi:"autoUpgradeMinorVersion"`
	// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
	EnableAutomaticUpgrade pulumi.BoolPtrInput `pulumi:"enableAutomaticUpgrade"`
	// If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed.
	ForceUpdateTag pulumi.StringPtrInput `pulumi:"forceUpdateTag"`
	// The name of the extension.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
	ProtectedSettings pulumi.MapInput `pulumi:"protectedSettings"`
	// Collection of extension names after which this extension needs to be provisioned.
	ProvisionAfterExtensions pulumi.StringArrayInput `pulumi:"provisionAfterExtensions"`
	// The name of the extension handler publisher.
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
	// Json formatted public settings for the extension.
	Settings pulumi.MapInput `pulumi:"settings"`
	// Specifies the type of the extension; an example is "CustomScriptExtension".
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Specifies the version of the script handler.
	TypeHandlerVersion pulumi.StringPtrInput `pulumi:"typeHandlerVersion"`
}

func (VirtualMachineScaleSetExtensionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetExtensionType)(nil)).Elem()
}

func (i VirtualMachineScaleSetExtensionTypeArgs) ToVirtualMachineScaleSetExtensionTypeOutput() VirtualMachineScaleSetExtensionTypeOutput {
	return i.ToVirtualMachineScaleSetExtensionTypeOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetExtensionTypeArgs) ToVirtualMachineScaleSetExtensionTypeOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetExtensionTypeOutput)
}

// VirtualMachineScaleSetExtensionTypeArrayInput is an input type that accepts VirtualMachineScaleSetExtensionTypeArray and VirtualMachineScaleSetExtensionTypeArrayOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetExtensionTypeArrayInput` via:
//
//          VirtualMachineScaleSetExtensionTypeArray{ VirtualMachineScaleSetExtensionTypeArgs{...} }
type VirtualMachineScaleSetExtensionTypeArrayInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetExtensionTypeArrayOutput() VirtualMachineScaleSetExtensionTypeArrayOutput
	ToVirtualMachineScaleSetExtensionTypeArrayOutputWithContext(context.Context) VirtualMachineScaleSetExtensionTypeArrayOutput
}

type VirtualMachineScaleSetExtensionTypeArray []VirtualMachineScaleSetExtensionTypeInput

func (VirtualMachineScaleSetExtensionTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetExtensionType)(nil)).Elem()
}

func (i VirtualMachineScaleSetExtensionTypeArray) ToVirtualMachineScaleSetExtensionTypeArrayOutput() VirtualMachineScaleSetExtensionTypeArrayOutput {
	return i.ToVirtualMachineScaleSetExtensionTypeArrayOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetExtensionTypeArray) ToVirtualMachineScaleSetExtensionTypeArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetExtensionTypeArrayOutput)
}

// Describes a virtual machine scale set extension profile.
type VirtualMachineScaleSetExtensionProfile struct {
	// The virtual machine scale set child extension resources.
	Extensions []VirtualMachineScaleSetExtensionType `pulumi:"extensions"`
	// Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). <br><br> Minimum api-version: 2020-06-01
	ExtensionsTimeBudget *string `pulumi:"extensionsTimeBudget"`
}

// VirtualMachineScaleSetExtensionProfileInput is an input type that accepts VirtualMachineScaleSetExtensionProfileArgs and VirtualMachineScaleSetExtensionProfileOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetExtensionProfileInput` via:
//
//          VirtualMachineScaleSetExtensionProfileArgs{...}
type VirtualMachineScaleSetExtensionProfileInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetExtensionProfileOutput() VirtualMachineScaleSetExtensionProfileOutput
	ToVirtualMachineScaleSetExtensionProfileOutputWithContext(context.Context) VirtualMachineScaleSetExtensionProfileOutput
}

// Describes a virtual machine scale set extension profile.
type VirtualMachineScaleSetExtensionProfileArgs struct {
	// The virtual machine scale set child extension resources.
	Extensions VirtualMachineScaleSetExtensionTypeArrayInput `pulumi:"extensions"`
	// Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). <br><br> Minimum api-version: 2020-06-01
	ExtensionsTimeBudget pulumi.StringPtrInput `pulumi:"extensionsTimeBudget"`
}

func (VirtualMachineScaleSetExtensionProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetExtensionProfile)(nil)).Elem()
}

func (i VirtualMachineScaleSetExtensionProfileArgs) ToVirtualMachineScaleSetExtensionProfileOutput() VirtualMachineScaleSetExtensionProfileOutput {
	return i.ToVirtualMachineScaleSetExtensionProfileOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetExtensionProfileArgs) ToVirtualMachineScaleSetExtensionProfileOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetExtensionProfileOutput)
}

func (i VirtualMachineScaleSetExtensionProfileArgs) ToVirtualMachineScaleSetExtensionProfilePtrOutput() VirtualMachineScaleSetExtensionProfilePtrOutput {
	return i.ToVirtualMachineScaleSetExtensionProfilePtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetExtensionProfileArgs) ToVirtualMachineScaleSetExtensionProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetExtensionProfileOutput).ToVirtualMachineScaleSetExtensionProfilePtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetExtensionProfilePtrInput is an input type that accepts VirtualMachineScaleSetExtensionProfileArgs, VirtualMachineScaleSetExtensionProfilePtr and VirtualMachineScaleSetExtensionProfilePtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetExtensionProfilePtrInput` via:
//
//          VirtualMachineScaleSetExtensionProfileArgs{...}
//
//  or:
//
//          nil
type VirtualMachineScaleSetExtensionProfilePtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetExtensionProfilePtrOutput() VirtualMachineScaleSetExtensionProfilePtrOutput
	ToVirtualMachineScaleSetExtensionProfilePtrOutputWithContext(context.Context) VirtualMachineScaleSetExtensionProfilePtrOutput
}

type virtualMachineScaleSetExtensionProfilePtrType VirtualMachineScaleSetExtensionProfileArgs

func VirtualMachineScaleSetExtensionProfilePtr(v *VirtualMachineScaleSetExtensionProfileArgs) VirtualMachineScaleSetExtensionProfilePtrInput {
	return (*virtualMachineScaleSetExtensionProfilePtrType)(v)
}

func (*virtualMachineScaleSetExtensionProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetExtensionProfile)(nil)).Elem()
}

func (i *virtualMachineScaleSetExtensionProfilePtrType) ToVirtualMachineScaleSetExtensionProfilePtrOutput() VirtualMachineScaleSetExtensionProfilePtrOutput {
	return i.ToVirtualMachineScaleSetExtensionProfilePtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetExtensionProfilePtrType) ToVirtualMachineScaleSetExtensionProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetExtensionProfilePtrOutput)
}

// Describes a virtual machine scale set extension profile.
type VirtualMachineScaleSetExtensionProfileResponse struct {
	// The virtual machine scale set child extension resources.
	Extensions []VirtualMachineScaleSetExtensionResponse `pulumi:"extensions"`
	// Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). <br><br> Minimum api-version: 2020-06-01
	ExtensionsTimeBudget *string `pulumi:"extensionsTimeBudget"`
}

// Describes a virtual machine scale set extension profile.
type VirtualMachineScaleSetExtensionProfileResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetExtensionProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetExtensionProfileResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetExtensionProfileResponseOutput) ToVirtualMachineScaleSetExtensionProfileResponseOutput() VirtualMachineScaleSetExtensionProfileResponseOutput {
	return o
}

func (o VirtualMachineScaleSetExtensionProfileResponseOutput) ToVirtualMachineScaleSetExtensionProfileResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionProfileResponseOutput {
	return o
}

func (o VirtualMachineScaleSetExtensionProfileResponseOutput) ToVirtualMachineScaleSetExtensionProfileResponsePtrOutput() VirtualMachineScaleSetExtensionProfileResponsePtrOutput {
	return o.ToVirtualMachineScaleSetExtensionProfileResponsePtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetExtensionProfileResponseOutput) ToVirtualMachineScaleSetExtensionProfileResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionProfileResponse) *VirtualMachineScaleSetExtensionProfileResponse {
		return &v
	}).(VirtualMachineScaleSetExtensionProfileResponsePtrOutput)
}

// The virtual machine scale set child extension resources.
func (o VirtualMachineScaleSetExtensionProfileResponseOutput) Extensions() VirtualMachineScaleSetExtensionResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionProfileResponse) []VirtualMachineScaleSetExtensionResponse {
		return v.Extensions
	}).(VirtualMachineScaleSetExtensionResponseArrayOutput)
}

// Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). <br><br> Minimum api-version: 2020-06-01
func (o VirtualMachineScaleSetExtensionProfileResponseOutput) ExtensionsTimeBudget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionProfileResponse) *string { return v.ExtensionsTimeBudget }).(pulumi.StringPtrOutput)
}

type VirtualMachineScaleSetExtensionProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetExtensionProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetExtensionProfileResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetExtensionProfileResponsePtrOutput) ToVirtualMachineScaleSetExtensionProfileResponsePtrOutput() VirtualMachineScaleSetExtensionProfileResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetExtensionProfileResponsePtrOutput) ToVirtualMachineScaleSetExtensionProfileResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionProfileResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetExtensionProfileResponsePtrOutput) Elem() VirtualMachineScaleSetExtensionProfileResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetExtensionProfileResponse) VirtualMachineScaleSetExtensionProfileResponse {
		return *v
	}).(VirtualMachineScaleSetExtensionProfileResponseOutput)
}

// The virtual machine scale set child extension resources.
func (o VirtualMachineScaleSetExtensionProfileResponsePtrOutput) Extensions() VirtualMachineScaleSetExtensionResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetExtensionProfileResponse) []VirtualMachineScaleSetExtensionResponse {
		if v == nil {
			return nil
		}
		return v.Extensions
	}).(VirtualMachineScaleSetExtensionResponseArrayOutput)
}

// Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). <br><br> Minimum api-version: 2020-06-01
func (o VirtualMachineScaleSetExtensionProfileResponsePtrOutput) ExtensionsTimeBudget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetExtensionProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExtensionsTimeBudget
	}).(pulumi.StringPtrOutput)
}

// Describes a Virtual Machine Scale Set Extension.
type VirtualMachineScaleSetExtensionResponse struct {
	// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
	AutoUpgradeMinorVersion *bool `pulumi:"autoUpgradeMinorVersion"`
	// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
	EnableAutomaticUpgrade *bool `pulumi:"enableAutomaticUpgrade"`
	// If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed.
	ForceUpdateTag *string `pulumi:"forceUpdateTag"`
	// Resource Id
	Id string `pulumi:"id"`
	// The name of the extension.
	Name *string `pulumi:"name"`
	// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
	ProtectedSettings map[string]interface{} `pulumi:"protectedSettings"`
	// Collection of extension names after which this extension needs to be provisioned.
	ProvisionAfterExtensions []string `pulumi:"provisionAfterExtensions"`
	// The provisioning state, which only appears in the response.
	ProvisioningState string `pulumi:"provisioningState"`
	// The name of the extension handler publisher.
	Publisher *string `pulumi:"publisher"`
	// Json formatted public settings for the extension.
	Settings map[string]interface{} `pulumi:"settings"`
	// Resource type
	Type string `pulumi:"type"`
	// Specifies the version of the script handler.
	TypeHandlerVersion *string `pulumi:"typeHandlerVersion"`
}

// Describes a Virtual Machine Scale Set Extension.
type VirtualMachineScaleSetExtensionResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetExtensionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetExtensionResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetExtensionResponseOutput) ToVirtualMachineScaleSetExtensionResponseOutput() VirtualMachineScaleSetExtensionResponseOutput {
	return o
}

func (o VirtualMachineScaleSetExtensionResponseOutput) ToVirtualMachineScaleSetExtensionResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionResponseOutput {
	return o
}

// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
func (o VirtualMachineScaleSetExtensionResponseOutput) AutoUpgradeMinorVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) *bool { return v.AutoUpgradeMinorVersion }).(pulumi.BoolPtrOutput)
}

// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
func (o VirtualMachineScaleSetExtensionResponseOutput) EnableAutomaticUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) *bool { return v.EnableAutomaticUpgrade }).(pulumi.BoolPtrOutput)
}

// If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed.
func (o VirtualMachineScaleSetExtensionResponseOutput) ForceUpdateTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) *string { return v.ForceUpdateTag }).(pulumi.StringPtrOutput)
}

// Resource Id
func (o VirtualMachineScaleSetExtensionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the extension.
func (o VirtualMachineScaleSetExtensionResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
func (o VirtualMachineScaleSetExtensionResponseOutput) ProtectedSettings() pulumi.MapOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) map[string]interface{} { return v.ProtectedSettings }).(pulumi.MapOutput)
}

// Collection of extension names after which this extension needs to be provisioned.
func (o VirtualMachineScaleSetExtensionResponseOutput) ProvisionAfterExtensions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) []string { return v.ProvisionAfterExtensions }).(pulumi.StringArrayOutput)
}

// The provisioning state, which only appears in the response.
func (o VirtualMachineScaleSetExtensionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The name of the extension handler publisher.
func (o VirtualMachineScaleSetExtensionResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// Json formatted public settings for the extension.
func (o VirtualMachineScaleSetExtensionResponseOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) map[string]interface{} { return v.Settings }).(pulumi.MapOutput)
}

// Resource type
func (o VirtualMachineScaleSetExtensionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies the version of the script handler.
func (o VirtualMachineScaleSetExtensionResponseOutput) TypeHandlerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) *string { return v.TypeHandlerVersion }).(pulumi.StringPtrOutput)
}

type VirtualMachineScaleSetExtensionResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetExtensionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetExtensionResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetExtensionResponseArrayOutput) ToVirtualMachineScaleSetExtensionResponseArrayOutput() VirtualMachineScaleSetExtensionResponseArrayOutput {
	return o
}

func (o VirtualMachineScaleSetExtensionResponseArrayOutput) ToVirtualMachineScaleSetExtensionResponseArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionResponseArrayOutput {
	return o
}

func (o VirtualMachineScaleSetExtensionResponseArrayOutput) Index(i pulumi.IntInput) VirtualMachineScaleSetExtensionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineScaleSetExtensionResponse {
		return vs[0].([]VirtualMachineScaleSetExtensionResponse)[vs[1].(int)]
	}).(VirtualMachineScaleSetExtensionResponseOutput)
}

// Describes a virtual machine scale set network profile's IP configuration.
type VirtualMachineScaleSetIPConfiguration struct {
	// Specifies an array of references to backend address pools of application gateways. A scale set can reference backend address pools of multiple application gateways. Multiple scale sets cannot use the same application gateway.
	ApplicationGatewayBackendAddressPools []SubResource `pulumi:"applicationGatewayBackendAddressPools"`
	// Specifies an array of references to application security group.
	ApplicationSecurityGroups []SubResource `pulumi:"applicationSecurityGroups"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Specifies an array of references to backend address pools of load balancers. A scale set can reference backend address pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer.
	LoadBalancerBackendAddressPools []SubResource `pulumi:"loadBalancerBackendAddressPools"`
	// Specifies an array of references to inbound Nat pools of the load balancers. A scale set can reference inbound nat pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer.
	LoadBalancerInboundNatPools []SubResource `pulumi:"loadBalancerInboundNatPools"`
	// The IP configuration name.
	Name string `pulumi:"name"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool `pulumi:"primary"`
	// Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.
	PrivateIPAddressVersion *string `pulumi:"privateIPAddressVersion"`
	// The publicIPAddressConfiguration.
	PublicIPAddressConfiguration *VirtualMachineScaleSetPublicIPAddressConfiguration `pulumi:"publicIPAddressConfiguration"`
	// Specifies the identifier of the subnet.
	Subnet *ApiEntityReference `pulumi:"subnet"`
}

// VirtualMachineScaleSetIPConfigurationInput is an input type that accepts VirtualMachineScaleSetIPConfigurationArgs and VirtualMachineScaleSetIPConfigurationOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetIPConfigurationInput` via:
//
//          VirtualMachineScaleSetIPConfigurationArgs{...}
type VirtualMachineScaleSetIPConfigurationInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetIPConfigurationOutput() VirtualMachineScaleSetIPConfigurationOutput
	ToVirtualMachineScaleSetIPConfigurationOutputWithContext(context.Context) VirtualMachineScaleSetIPConfigurationOutput
}

// Describes a virtual machine scale set network profile's IP configuration.
type VirtualMachineScaleSetIPConfigurationArgs struct {
	// Specifies an array of references to backend address pools of application gateways. A scale set can reference backend address pools of multiple application gateways. Multiple scale sets cannot use the same application gateway.
	ApplicationGatewayBackendAddressPools SubResourceArrayInput `pulumi:"applicationGatewayBackendAddressPools"`
	// Specifies an array of references to application security group.
	ApplicationSecurityGroups SubResourceArrayInput `pulumi:"applicationSecurityGroups"`
	// Resource Id
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies an array of references to backend address pools of load balancers. A scale set can reference backend address pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer.
	LoadBalancerBackendAddressPools SubResourceArrayInput `pulumi:"loadBalancerBackendAddressPools"`
	// Specifies an array of references to inbound Nat pools of the load balancers. A scale set can reference inbound nat pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer.
	LoadBalancerInboundNatPools SubResourceArrayInput `pulumi:"loadBalancerInboundNatPools"`
	// The IP configuration name.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary pulumi.BoolPtrInput `pulumi:"primary"`
	// Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.
	PrivateIPAddressVersion pulumi.StringPtrInput `pulumi:"privateIPAddressVersion"`
	// The publicIPAddressConfiguration.
	PublicIPAddressConfiguration VirtualMachineScaleSetPublicIPAddressConfigurationPtrInput `pulumi:"publicIPAddressConfiguration"`
	// Specifies the identifier of the subnet.
	Subnet ApiEntityReferencePtrInput `pulumi:"subnet"`
}

func (VirtualMachineScaleSetIPConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetIPConfiguration)(nil)).Elem()
}

func (i VirtualMachineScaleSetIPConfigurationArgs) ToVirtualMachineScaleSetIPConfigurationOutput() VirtualMachineScaleSetIPConfigurationOutput {
	return i.ToVirtualMachineScaleSetIPConfigurationOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetIPConfigurationArgs) ToVirtualMachineScaleSetIPConfigurationOutputWithContext(ctx context.Context) VirtualMachineScaleSetIPConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetIPConfigurationOutput)
}

// VirtualMachineScaleSetIPConfigurationArrayInput is an input type that accepts VirtualMachineScaleSetIPConfigurationArray and VirtualMachineScaleSetIPConfigurationArrayOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetIPConfigurationArrayInput` via:
//
//          VirtualMachineScaleSetIPConfigurationArray{ VirtualMachineScaleSetIPConfigurationArgs{...} }
type VirtualMachineScaleSetIPConfigurationArrayInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetIPConfigurationArrayOutput() VirtualMachineScaleSetIPConfigurationArrayOutput
	ToVirtualMachineScaleSetIPConfigurationArrayOutputWithContext(context.Context) VirtualMachineScaleSetIPConfigurationArrayOutput
}

type VirtualMachineScaleSetIPConfigurationArray []VirtualMachineScaleSetIPConfigurationInput

func (VirtualMachineScaleSetIPConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetIPConfiguration)(nil)).Elem()
}

func (i VirtualMachineScaleSetIPConfigurationArray) ToVirtualMachineScaleSetIPConfigurationArrayOutput() VirtualMachineScaleSetIPConfigurationArrayOutput {
	return i.ToVirtualMachineScaleSetIPConfigurationArrayOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetIPConfigurationArray) ToVirtualMachineScaleSetIPConfigurationArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetIPConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetIPConfigurationArrayOutput)
}

// Describes a virtual machine scale set network profile's IP configuration.
type VirtualMachineScaleSetIPConfigurationResponse struct {
	// Specifies an array of references to backend address pools of application gateways. A scale set can reference backend address pools of multiple application gateways. Multiple scale sets cannot use the same application gateway.
	ApplicationGatewayBackendAddressPools []SubResourceResponse `pulumi:"applicationGatewayBackendAddressPools"`
	// Specifies an array of references to application security group.
	ApplicationSecurityGroups []SubResourceResponse `pulumi:"applicationSecurityGroups"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Specifies an array of references to backend address pools of load balancers. A scale set can reference backend address pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer.
	LoadBalancerBackendAddressPools []SubResourceResponse `pulumi:"loadBalancerBackendAddressPools"`
	// Specifies an array of references to inbound Nat pools of the load balancers. A scale set can reference inbound nat pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer.
	LoadBalancerInboundNatPools []SubResourceResponse `pulumi:"loadBalancerInboundNatPools"`
	// The IP configuration name.
	Name string `pulumi:"name"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool `pulumi:"primary"`
	// Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.
	PrivateIPAddressVersion *string `pulumi:"privateIPAddressVersion"`
	// The publicIPAddressConfiguration.
	PublicIPAddressConfiguration *VirtualMachineScaleSetPublicIPAddressConfigurationResponse `pulumi:"publicIPAddressConfiguration"`
	// Specifies the identifier of the subnet.
	Subnet *ApiEntityReferenceResponse `pulumi:"subnet"`
}

// Describes a virtual machine scale set network profile's IP configuration.
type VirtualMachineScaleSetIPConfigurationResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetIPConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetIPConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetIPConfigurationResponseOutput) ToVirtualMachineScaleSetIPConfigurationResponseOutput() VirtualMachineScaleSetIPConfigurationResponseOutput {
	return o
}

func (o VirtualMachineScaleSetIPConfigurationResponseOutput) ToVirtualMachineScaleSetIPConfigurationResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetIPConfigurationResponseOutput {
	return o
}

// Specifies an array of references to backend address pools of application gateways. A scale set can reference backend address pools of multiple application gateways. Multiple scale sets cannot use the same application gateway.
func (o VirtualMachineScaleSetIPConfigurationResponseOutput) ApplicationGatewayBackendAddressPools() SubResourceResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfigurationResponse) []SubResourceResponse {
		return v.ApplicationGatewayBackendAddressPools
	}).(SubResourceResponseArrayOutput)
}

// Specifies an array of references to application security group.
func (o VirtualMachineScaleSetIPConfigurationResponseOutput) ApplicationSecurityGroups() SubResourceResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfigurationResponse) []SubResourceResponse {
		return v.ApplicationSecurityGroups
	}).(SubResourceResponseArrayOutput)
}

// Resource Id
func (o VirtualMachineScaleSetIPConfigurationResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfigurationResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies an array of references to backend address pools of load balancers. A scale set can reference backend address pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer.
func (o VirtualMachineScaleSetIPConfigurationResponseOutput) LoadBalancerBackendAddressPools() SubResourceResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfigurationResponse) []SubResourceResponse {
		return v.LoadBalancerBackendAddressPools
	}).(SubResourceResponseArrayOutput)
}

// Specifies an array of references to inbound Nat pools of the load balancers. A scale set can reference inbound nat pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer.
func (o VirtualMachineScaleSetIPConfigurationResponseOutput) LoadBalancerInboundNatPools() SubResourceResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfigurationResponse) []SubResourceResponse {
		return v.LoadBalancerInboundNatPools
	}).(SubResourceResponseArrayOutput)
}

// The IP configuration name.
func (o VirtualMachineScaleSetIPConfigurationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfigurationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
func (o VirtualMachineScaleSetIPConfigurationResponseOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfigurationResponse) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

// Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.
func (o VirtualMachineScaleSetIPConfigurationResponseOutput) PrivateIPAddressVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfigurationResponse) *string { return v.PrivateIPAddressVersion }).(pulumi.StringPtrOutput)
}

// The publicIPAddressConfiguration.
func (o VirtualMachineScaleSetIPConfigurationResponseOutput) PublicIPAddressConfiguration() VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfigurationResponse) *VirtualMachineScaleSetPublicIPAddressConfigurationResponse {
		return v.PublicIPAddressConfiguration
	}).(VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput)
}

// Specifies the identifier of the subnet.
func (o VirtualMachineScaleSetIPConfigurationResponseOutput) Subnet() ApiEntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfigurationResponse) *ApiEntityReferenceResponse { return v.Subnet }).(ApiEntityReferenceResponsePtrOutput)
}

type VirtualMachineScaleSetIPConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetIPConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetIPConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetIPConfigurationResponseArrayOutput) ToVirtualMachineScaleSetIPConfigurationResponseArrayOutput() VirtualMachineScaleSetIPConfigurationResponseArrayOutput {
	return o
}

func (o VirtualMachineScaleSetIPConfigurationResponseArrayOutput) ToVirtualMachineScaleSetIPConfigurationResponseArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetIPConfigurationResponseArrayOutput {
	return o
}

func (o VirtualMachineScaleSetIPConfigurationResponseArrayOutput) Index(i pulumi.IntInput) VirtualMachineScaleSetIPConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineScaleSetIPConfigurationResponse {
		return vs[0].([]VirtualMachineScaleSetIPConfigurationResponse)[vs[1].(int)]
	}).(VirtualMachineScaleSetIPConfigurationResponseOutput)
}

// Identity for the virtual machine scale set.
type VirtualMachineScaleSetIdentity struct {
	// The type of identity used for the virtual machine scale set. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine scale set.
	Type *string `pulumi:"type"`
}

// VirtualMachineScaleSetIdentityInput is an input type that accepts VirtualMachineScaleSetIdentityArgs and VirtualMachineScaleSetIdentityOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetIdentityInput` via:
//
//          VirtualMachineScaleSetIdentityArgs{...}
type VirtualMachineScaleSetIdentityInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetIdentityOutput() VirtualMachineScaleSetIdentityOutput
	ToVirtualMachineScaleSetIdentityOutputWithContext(context.Context) VirtualMachineScaleSetIdentityOutput
}

// Identity for the virtual machine scale set.
type VirtualMachineScaleSetIdentityArgs struct {
	// The type of identity used for the virtual machine scale set. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine scale set.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (VirtualMachineScaleSetIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetIdentity)(nil)).Elem()
}

func (i VirtualMachineScaleSetIdentityArgs) ToVirtualMachineScaleSetIdentityOutput() VirtualMachineScaleSetIdentityOutput {
	return i.ToVirtualMachineScaleSetIdentityOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetIdentityArgs) ToVirtualMachineScaleSetIdentityOutputWithContext(ctx context.Context) VirtualMachineScaleSetIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetIdentityOutput)
}

func (i VirtualMachineScaleSetIdentityArgs) ToVirtualMachineScaleSetIdentityPtrOutput() VirtualMachineScaleSetIdentityPtrOutput {
	return i.ToVirtualMachineScaleSetIdentityPtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetIdentityArgs) ToVirtualMachineScaleSetIdentityPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetIdentityOutput).ToVirtualMachineScaleSetIdentityPtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetIdentityPtrInput is an input type that accepts VirtualMachineScaleSetIdentityArgs, VirtualMachineScaleSetIdentityPtr and VirtualMachineScaleSetIdentityPtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetIdentityPtrInput` via:
//
//          VirtualMachineScaleSetIdentityArgs{...}
//
//  or:
//
//          nil
type VirtualMachineScaleSetIdentityPtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetIdentityPtrOutput() VirtualMachineScaleSetIdentityPtrOutput
	ToVirtualMachineScaleSetIdentityPtrOutputWithContext(context.Context) VirtualMachineScaleSetIdentityPtrOutput
}

type virtualMachineScaleSetIdentityPtrType VirtualMachineScaleSetIdentityArgs

func VirtualMachineScaleSetIdentityPtr(v *VirtualMachineScaleSetIdentityArgs) VirtualMachineScaleSetIdentityPtrInput {
	return (*virtualMachineScaleSetIdentityPtrType)(v)
}

func (*virtualMachineScaleSetIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetIdentity)(nil)).Elem()
}

func (i *virtualMachineScaleSetIdentityPtrType) ToVirtualMachineScaleSetIdentityPtrOutput() VirtualMachineScaleSetIdentityPtrOutput {
	return i.ToVirtualMachineScaleSetIdentityPtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetIdentityPtrType) ToVirtualMachineScaleSetIdentityPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetIdentityPtrOutput)
}

// Identity for the virtual machine scale set.
type VirtualMachineScaleSetIdentityResponse struct {
	// The principal id of virtual machine scale set identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant id associated with the virtual machine scale set. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// The type of identity used for the virtual machine scale set. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine scale set.
	Type *string `pulumi:"type"`
	// The list of user identities associated with the virtual machine scale set. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]VirtualMachineScaleSetIdentityResponseUserAssignedIdentities `pulumi:"userAssignedIdentities"`
}

// Identity for the virtual machine scale set.
type VirtualMachineScaleSetIdentityResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetIdentityResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetIdentityResponseOutput) ToVirtualMachineScaleSetIdentityResponseOutput() VirtualMachineScaleSetIdentityResponseOutput {
	return o
}

func (o VirtualMachineScaleSetIdentityResponseOutput) ToVirtualMachineScaleSetIdentityResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetIdentityResponseOutput {
	return o
}

func (o VirtualMachineScaleSetIdentityResponseOutput) ToVirtualMachineScaleSetIdentityResponsePtrOutput() VirtualMachineScaleSetIdentityResponsePtrOutput {
	return o.ToVirtualMachineScaleSetIdentityResponsePtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetIdentityResponseOutput) ToVirtualMachineScaleSetIdentityResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetIdentityResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIdentityResponse) *VirtualMachineScaleSetIdentityResponse {
		return &v
	}).(VirtualMachineScaleSetIdentityResponsePtrOutput)
}

// The principal id of virtual machine scale set identity. This property will only be provided for a system assigned identity.
func (o VirtualMachineScaleSetIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant id associated with the virtual machine scale set. This property will only be provided for a system assigned identity.
func (o VirtualMachineScaleSetIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of identity used for the virtual machine scale set. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine scale set.
func (o VirtualMachineScaleSetIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the virtual machine scale set. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o VirtualMachineScaleSetIdentityResponseOutput) UserAssignedIdentities() VirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesMapOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIdentityResponse) map[string]VirtualMachineScaleSetIdentityResponseUserAssignedIdentities {
		return v.UserAssignedIdentities
	}).(VirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesMapOutput)
}

type VirtualMachineScaleSetIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetIdentityResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetIdentityResponsePtrOutput) ToVirtualMachineScaleSetIdentityResponsePtrOutput() VirtualMachineScaleSetIdentityResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetIdentityResponsePtrOutput) ToVirtualMachineScaleSetIdentityResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetIdentityResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetIdentityResponsePtrOutput) Elem() VirtualMachineScaleSetIdentityResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetIdentityResponse) VirtualMachineScaleSetIdentityResponse { return *v }).(VirtualMachineScaleSetIdentityResponseOutput)
}

// The principal id of virtual machine scale set identity. This property will only be provided for a system assigned identity.
func (o VirtualMachineScaleSetIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant id associated with the virtual machine scale set. This property will only be provided for a system assigned identity.
func (o VirtualMachineScaleSetIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of identity used for the virtual machine scale set. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine scale set.
func (o VirtualMachineScaleSetIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the virtual machine scale set. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o VirtualMachineScaleSetIdentityResponsePtrOutput) UserAssignedIdentities() VirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesMapOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetIdentityResponse) map[string]VirtualMachineScaleSetIdentityResponseUserAssignedIdentities {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(VirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesMapOutput)
}

type VirtualMachineScaleSetIdentityResponseUserAssignedIdentities struct {
	// The client id of user assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

type VirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetIdentityResponseUserAssignedIdentities)(nil)).Elem()
}

func (o VirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesOutput) ToVirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesOutput() VirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesOutput {
	return o
}

func (o VirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesOutput) ToVirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesOutputWithContext(ctx context.Context) VirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesOutput {
	return o
}

// The client id of user assigned identity.
func (o VirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIdentityResponseUserAssignedIdentities) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal id of user assigned identity.
func (o VirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIdentityResponseUserAssignedIdentities) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type VirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesMapOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VirtualMachineScaleSetIdentityResponseUserAssignedIdentities)(nil)).Elem()
}

func (o VirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesMapOutput) ToVirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesMapOutput() VirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesMapOutput {
	return o
}

func (o VirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesMapOutput) ToVirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesMapOutputWithContext(ctx context.Context) VirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesMapOutput {
	return o
}

func (o VirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesMapOutput) MapIndex(k pulumi.StringInput) VirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VirtualMachineScaleSetIdentityResponseUserAssignedIdentities {
		return vs[0].(map[string]VirtualMachineScaleSetIdentityResponseUserAssignedIdentities)[vs[1].(string)]
	}).(VirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesOutput)
}

// Contains the IP tag associated with the public IP address.
type VirtualMachineScaleSetIpTag struct {
	// IP tag type. Example: FirstPartyUsage.
	IpTagType *string `pulumi:"ipTagType"`
	// IP tag associated with the public IP. Example: SQL, Storage etc.
	Tag *string `pulumi:"tag"`
}

// VirtualMachineScaleSetIpTagInput is an input type that accepts VirtualMachineScaleSetIpTagArgs and VirtualMachineScaleSetIpTagOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetIpTagInput` via:
//
//          VirtualMachineScaleSetIpTagArgs{...}
type VirtualMachineScaleSetIpTagInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetIpTagOutput() VirtualMachineScaleSetIpTagOutput
	ToVirtualMachineScaleSetIpTagOutputWithContext(context.Context) VirtualMachineScaleSetIpTagOutput
}

// Contains the IP tag associated with the public IP address.
type VirtualMachineScaleSetIpTagArgs struct {
	// IP tag type. Example: FirstPartyUsage.
	IpTagType pulumi.StringPtrInput `pulumi:"ipTagType"`
	// IP tag associated with the public IP. Example: SQL, Storage etc.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (VirtualMachineScaleSetIpTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetIpTag)(nil)).Elem()
}

func (i VirtualMachineScaleSetIpTagArgs) ToVirtualMachineScaleSetIpTagOutput() VirtualMachineScaleSetIpTagOutput {
	return i.ToVirtualMachineScaleSetIpTagOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetIpTagArgs) ToVirtualMachineScaleSetIpTagOutputWithContext(ctx context.Context) VirtualMachineScaleSetIpTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetIpTagOutput)
}

// VirtualMachineScaleSetIpTagArrayInput is an input type that accepts VirtualMachineScaleSetIpTagArray and VirtualMachineScaleSetIpTagArrayOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetIpTagArrayInput` via:
//
//          VirtualMachineScaleSetIpTagArray{ VirtualMachineScaleSetIpTagArgs{...} }
type VirtualMachineScaleSetIpTagArrayInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetIpTagArrayOutput() VirtualMachineScaleSetIpTagArrayOutput
	ToVirtualMachineScaleSetIpTagArrayOutputWithContext(context.Context) VirtualMachineScaleSetIpTagArrayOutput
}

type VirtualMachineScaleSetIpTagArray []VirtualMachineScaleSetIpTagInput

func (VirtualMachineScaleSetIpTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetIpTag)(nil)).Elem()
}

func (i VirtualMachineScaleSetIpTagArray) ToVirtualMachineScaleSetIpTagArrayOutput() VirtualMachineScaleSetIpTagArrayOutput {
	return i.ToVirtualMachineScaleSetIpTagArrayOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetIpTagArray) ToVirtualMachineScaleSetIpTagArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetIpTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetIpTagArrayOutput)
}

// Contains the IP tag associated with the public IP address.
type VirtualMachineScaleSetIpTagResponse struct {
	// IP tag type. Example: FirstPartyUsage.
	IpTagType *string `pulumi:"ipTagType"`
	// IP tag associated with the public IP. Example: SQL, Storage etc.
	Tag *string `pulumi:"tag"`
}

// Contains the IP tag associated with the public IP address.
type VirtualMachineScaleSetIpTagResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetIpTagResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetIpTagResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetIpTagResponseOutput) ToVirtualMachineScaleSetIpTagResponseOutput() VirtualMachineScaleSetIpTagResponseOutput {
	return o
}

func (o VirtualMachineScaleSetIpTagResponseOutput) ToVirtualMachineScaleSetIpTagResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetIpTagResponseOutput {
	return o
}

// IP tag type. Example: FirstPartyUsage.
func (o VirtualMachineScaleSetIpTagResponseOutput) IpTagType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIpTagResponse) *string { return v.IpTagType }).(pulumi.StringPtrOutput)
}

// IP tag associated with the public IP. Example: SQL, Storage etc.
func (o VirtualMachineScaleSetIpTagResponseOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIpTagResponse) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type VirtualMachineScaleSetIpTagResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetIpTagResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetIpTagResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetIpTagResponseArrayOutput) ToVirtualMachineScaleSetIpTagResponseArrayOutput() VirtualMachineScaleSetIpTagResponseArrayOutput {
	return o
}

func (o VirtualMachineScaleSetIpTagResponseArrayOutput) ToVirtualMachineScaleSetIpTagResponseArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetIpTagResponseArrayOutput {
	return o
}

func (o VirtualMachineScaleSetIpTagResponseArrayOutput) Index(i pulumi.IntInput) VirtualMachineScaleSetIpTagResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineScaleSetIpTagResponse {
		return vs[0].([]VirtualMachineScaleSetIpTagResponse)[vs[1].(int)]
	}).(VirtualMachineScaleSetIpTagResponseOutput)
}

// Describes the parameters of a ScaleSet managed disk.
type VirtualMachineScaleSetManagedDiskParameters struct {
	// Specifies the customer managed disk encryption set resource id for the managed disk.
	DiskEncryptionSet *DiskEncryptionSetParameters `pulumi:"diskEncryptionSet"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// VirtualMachineScaleSetManagedDiskParametersInput is an input type that accepts VirtualMachineScaleSetManagedDiskParametersArgs and VirtualMachineScaleSetManagedDiskParametersOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetManagedDiskParametersInput` via:
//
//          VirtualMachineScaleSetManagedDiskParametersArgs{...}
type VirtualMachineScaleSetManagedDiskParametersInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetManagedDiskParametersOutput() VirtualMachineScaleSetManagedDiskParametersOutput
	ToVirtualMachineScaleSetManagedDiskParametersOutputWithContext(context.Context) VirtualMachineScaleSetManagedDiskParametersOutput
}

// Describes the parameters of a ScaleSet managed disk.
type VirtualMachineScaleSetManagedDiskParametersArgs struct {
	// Specifies the customer managed disk encryption set resource id for the managed disk.
	DiskEncryptionSet DiskEncryptionSetParametersPtrInput `pulumi:"diskEncryptionSet"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType pulumi.StringPtrInput `pulumi:"storageAccountType"`
}

func (VirtualMachineScaleSetManagedDiskParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetManagedDiskParameters)(nil)).Elem()
}

func (i VirtualMachineScaleSetManagedDiskParametersArgs) ToVirtualMachineScaleSetManagedDiskParametersOutput() VirtualMachineScaleSetManagedDiskParametersOutput {
	return i.ToVirtualMachineScaleSetManagedDiskParametersOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetManagedDiskParametersArgs) ToVirtualMachineScaleSetManagedDiskParametersOutputWithContext(ctx context.Context) VirtualMachineScaleSetManagedDiskParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetManagedDiskParametersOutput)
}

func (i VirtualMachineScaleSetManagedDiskParametersArgs) ToVirtualMachineScaleSetManagedDiskParametersPtrOutput() VirtualMachineScaleSetManagedDiskParametersPtrOutput {
	return i.ToVirtualMachineScaleSetManagedDiskParametersPtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetManagedDiskParametersArgs) ToVirtualMachineScaleSetManagedDiskParametersPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetManagedDiskParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetManagedDiskParametersOutput).ToVirtualMachineScaleSetManagedDiskParametersPtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetManagedDiskParametersPtrInput is an input type that accepts VirtualMachineScaleSetManagedDiskParametersArgs, VirtualMachineScaleSetManagedDiskParametersPtr and VirtualMachineScaleSetManagedDiskParametersPtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetManagedDiskParametersPtrInput` via:
//
//          VirtualMachineScaleSetManagedDiskParametersArgs{...}
//
//  or:
//
//          nil
type VirtualMachineScaleSetManagedDiskParametersPtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetManagedDiskParametersPtrOutput() VirtualMachineScaleSetManagedDiskParametersPtrOutput
	ToVirtualMachineScaleSetManagedDiskParametersPtrOutputWithContext(context.Context) VirtualMachineScaleSetManagedDiskParametersPtrOutput
}

type virtualMachineScaleSetManagedDiskParametersPtrType VirtualMachineScaleSetManagedDiskParametersArgs

func VirtualMachineScaleSetManagedDiskParametersPtr(v *VirtualMachineScaleSetManagedDiskParametersArgs) VirtualMachineScaleSetManagedDiskParametersPtrInput {
	return (*virtualMachineScaleSetManagedDiskParametersPtrType)(v)
}

func (*virtualMachineScaleSetManagedDiskParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetManagedDiskParameters)(nil)).Elem()
}

func (i *virtualMachineScaleSetManagedDiskParametersPtrType) ToVirtualMachineScaleSetManagedDiskParametersPtrOutput() VirtualMachineScaleSetManagedDiskParametersPtrOutput {
	return i.ToVirtualMachineScaleSetManagedDiskParametersPtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetManagedDiskParametersPtrType) ToVirtualMachineScaleSetManagedDiskParametersPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetManagedDiskParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetManagedDiskParametersPtrOutput)
}

// Describes the parameters of a ScaleSet managed disk.
type VirtualMachineScaleSetManagedDiskParametersResponse struct {
	// Specifies the customer managed disk encryption set resource id for the managed disk.
	DiskEncryptionSet *DiskEncryptionSetParametersResponse `pulumi:"diskEncryptionSet"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// Describes the parameters of a ScaleSet managed disk.
type VirtualMachineScaleSetManagedDiskParametersResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetManagedDiskParametersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetManagedDiskParametersResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetManagedDiskParametersResponseOutput) ToVirtualMachineScaleSetManagedDiskParametersResponseOutput() VirtualMachineScaleSetManagedDiskParametersResponseOutput {
	return o
}

func (o VirtualMachineScaleSetManagedDiskParametersResponseOutput) ToVirtualMachineScaleSetManagedDiskParametersResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetManagedDiskParametersResponseOutput {
	return o
}

func (o VirtualMachineScaleSetManagedDiskParametersResponseOutput) ToVirtualMachineScaleSetManagedDiskParametersResponsePtrOutput() VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput {
	return o.ToVirtualMachineScaleSetManagedDiskParametersResponsePtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetManagedDiskParametersResponseOutput) ToVirtualMachineScaleSetManagedDiskParametersResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetManagedDiskParametersResponse) *VirtualMachineScaleSetManagedDiskParametersResponse {
		return &v
	}).(VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput)
}

// Specifies the customer managed disk encryption set resource id for the managed disk.
func (o VirtualMachineScaleSetManagedDiskParametersResponseOutput) DiskEncryptionSet() DiskEncryptionSetParametersResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetManagedDiskParametersResponse) *DiskEncryptionSetParametersResponse {
		return v.DiskEncryptionSet
	}).(DiskEncryptionSetParametersResponsePtrOutput)
}

// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
func (o VirtualMachineScaleSetManagedDiskParametersResponseOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetManagedDiskParametersResponse) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetManagedDiskParametersResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput) ToVirtualMachineScaleSetManagedDiskParametersResponsePtrOutput() VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput) ToVirtualMachineScaleSetManagedDiskParametersResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput) Elem() VirtualMachineScaleSetManagedDiskParametersResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetManagedDiskParametersResponse) VirtualMachineScaleSetManagedDiskParametersResponse {
		return *v
	}).(VirtualMachineScaleSetManagedDiskParametersResponseOutput)
}

// Specifies the customer managed disk encryption set resource id for the managed disk.
func (o VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput) DiskEncryptionSet() DiskEncryptionSetParametersResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetManagedDiskParametersResponse) *DiskEncryptionSetParametersResponse {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionSet
	}).(DiskEncryptionSetParametersResponsePtrOutput)
}

// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
func (o VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetManagedDiskParametersResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountType
	}).(pulumi.StringPtrOutput)
}

// Describes a virtual machine scale set network profile's network configurations.
type VirtualMachineScaleSetNetworkConfiguration struct {
	// The dns settings to be applied on the network interfaces.
	DnsSettings *VirtualMachineScaleSetNetworkConfigurationDnsSettings `pulumi:"dnsSettings"`
	// Specifies whether the network interface is accelerated networking-enabled.
	EnableAcceleratedNetworking *bool `pulumi:"enableAcceleratedNetworking"`
	// Whether IP forwarding enabled on this NIC.
	EnableIPForwarding *bool `pulumi:"enableIPForwarding"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Specifies the IP configurations of the network interface.
	IpConfigurations []VirtualMachineScaleSetIPConfiguration `pulumi:"ipConfigurations"`
	// The network configuration name.
	Name string `pulumi:"name"`
	// The network security group.
	NetworkSecurityGroup *SubResource `pulumi:"networkSecurityGroup"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool `pulumi:"primary"`
}

// VirtualMachineScaleSetNetworkConfigurationInput is an input type that accepts VirtualMachineScaleSetNetworkConfigurationArgs and VirtualMachineScaleSetNetworkConfigurationOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetNetworkConfigurationInput` via:
//
//          VirtualMachineScaleSetNetworkConfigurationArgs{...}
type VirtualMachineScaleSetNetworkConfigurationInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetNetworkConfigurationOutput() VirtualMachineScaleSetNetworkConfigurationOutput
	ToVirtualMachineScaleSetNetworkConfigurationOutputWithContext(context.Context) VirtualMachineScaleSetNetworkConfigurationOutput
}

// Describes a virtual machine scale set network profile's network configurations.
type VirtualMachineScaleSetNetworkConfigurationArgs struct {
	// The dns settings to be applied on the network interfaces.
	DnsSettings VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrInput `pulumi:"dnsSettings"`
	// Specifies whether the network interface is accelerated networking-enabled.
	EnableAcceleratedNetworking pulumi.BoolPtrInput `pulumi:"enableAcceleratedNetworking"`
	// Whether IP forwarding enabled on this NIC.
	EnableIPForwarding pulumi.BoolPtrInput `pulumi:"enableIPForwarding"`
	// Resource Id
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the IP configurations of the network interface.
	IpConfigurations VirtualMachineScaleSetIPConfigurationArrayInput `pulumi:"ipConfigurations"`
	// The network configuration name.
	Name pulumi.StringInput `pulumi:"name"`
	// The network security group.
	NetworkSecurityGroup SubResourcePtrInput `pulumi:"networkSecurityGroup"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary pulumi.BoolPtrInput `pulumi:"primary"`
}

func (VirtualMachineScaleSetNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetNetworkConfiguration)(nil)).Elem()
}

func (i VirtualMachineScaleSetNetworkConfigurationArgs) ToVirtualMachineScaleSetNetworkConfigurationOutput() VirtualMachineScaleSetNetworkConfigurationOutput {
	return i.ToVirtualMachineScaleSetNetworkConfigurationOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetNetworkConfigurationArgs) ToVirtualMachineScaleSetNetworkConfigurationOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetNetworkConfigurationOutput)
}

// VirtualMachineScaleSetNetworkConfigurationArrayInput is an input type that accepts VirtualMachineScaleSetNetworkConfigurationArray and VirtualMachineScaleSetNetworkConfigurationArrayOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetNetworkConfigurationArrayInput` via:
//
//          VirtualMachineScaleSetNetworkConfigurationArray{ VirtualMachineScaleSetNetworkConfigurationArgs{...} }
type VirtualMachineScaleSetNetworkConfigurationArrayInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetNetworkConfigurationArrayOutput() VirtualMachineScaleSetNetworkConfigurationArrayOutput
	ToVirtualMachineScaleSetNetworkConfigurationArrayOutputWithContext(context.Context) VirtualMachineScaleSetNetworkConfigurationArrayOutput
}

type VirtualMachineScaleSetNetworkConfigurationArray []VirtualMachineScaleSetNetworkConfigurationInput

func (VirtualMachineScaleSetNetworkConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetNetworkConfiguration)(nil)).Elem()
}

func (i VirtualMachineScaleSetNetworkConfigurationArray) ToVirtualMachineScaleSetNetworkConfigurationArrayOutput() VirtualMachineScaleSetNetworkConfigurationArrayOutput {
	return i.ToVirtualMachineScaleSetNetworkConfigurationArrayOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetNetworkConfigurationArray) ToVirtualMachineScaleSetNetworkConfigurationArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetNetworkConfigurationArrayOutput)
}

// Describes a virtual machines scale sets network configuration's DNS settings.
type VirtualMachineScaleSetNetworkConfigurationDnsSettings struct {
	// List of DNS servers IP addresses
	DnsServers []string `pulumi:"dnsServers"`
}

// VirtualMachineScaleSetNetworkConfigurationDnsSettingsInput is an input type that accepts VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs and VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetNetworkConfigurationDnsSettingsInput` via:
//
//          VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs{...}
type VirtualMachineScaleSetNetworkConfigurationDnsSettingsInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput() VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput
	ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsOutputWithContext(context.Context) VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput
}

// Describes a virtual machines scale sets network configuration's DNS settings.
type VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs struct {
	// List of DNS servers IP addresses
	DnsServers pulumi.StringArrayInput `pulumi:"dnsServers"`
}

func (VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetNetworkConfigurationDnsSettings)(nil)).Elem()
}

func (i VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput() VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput {
	return i.ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput)
}

func (i VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput() VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput {
	return i.ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput).ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrInput is an input type that accepts VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs, VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtr and VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrInput` via:
//
//          VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs{...}
//
//  or:
//
//          nil
type VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput() VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput
	ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutputWithContext(context.Context) VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput
}

type virtualMachineScaleSetNetworkConfigurationDnsSettingsPtrType VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs

func VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtr(v *VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs) VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrInput {
	return (*virtualMachineScaleSetNetworkConfigurationDnsSettingsPtrType)(v)
}

func (*virtualMachineScaleSetNetworkConfigurationDnsSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetNetworkConfigurationDnsSettings)(nil)).Elem()
}

func (i *virtualMachineScaleSetNetworkConfigurationDnsSettingsPtrType) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput() VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput {
	return i.ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetNetworkConfigurationDnsSettingsPtrType) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput)
}

// Describes a virtual machines scale sets network configuration's DNS settings.
type VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponse struct {
	// List of DNS servers IP addresses
	DnsServers []string `pulumi:"dnsServers"`
}

// Describes a virtual machines scale sets network configuration's DNS settings.
type VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput() VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput() VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput {
	return o.ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponse) *VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponse {
		return &v
	}).(VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput)
}

// List of DNS servers IP addresses
func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponse) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

type VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput() VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput) Elem() VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponse) VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponse {
		return *v
	}).(VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput)
}

// List of DNS servers IP addresses
func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.DnsServers
	}).(pulumi.StringArrayOutput)
}

// Describes a virtual machine scale set network profile's network configurations.
type VirtualMachineScaleSetNetworkConfigurationResponse struct {
	// The dns settings to be applied on the network interfaces.
	DnsSettings *VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponse `pulumi:"dnsSettings"`
	// Specifies whether the network interface is accelerated networking-enabled.
	EnableAcceleratedNetworking *bool `pulumi:"enableAcceleratedNetworking"`
	// Whether IP forwarding enabled on this NIC.
	EnableIPForwarding *bool `pulumi:"enableIPForwarding"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Specifies the IP configurations of the network interface.
	IpConfigurations []VirtualMachineScaleSetIPConfigurationResponse `pulumi:"ipConfigurations"`
	// The network configuration name.
	Name string `pulumi:"name"`
	// The network security group.
	NetworkSecurityGroup *SubResourceResponse `pulumi:"networkSecurityGroup"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool `pulumi:"primary"`
}

// Describes a virtual machine scale set network profile's network configurations.
type VirtualMachineScaleSetNetworkConfigurationResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetNetworkConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetNetworkConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) ToVirtualMachineScaleSetNetworkConfigurationResponseOutput() VirtualMachineScaleSetNetworkConfigurationResponseOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) ToVirtualMachineScaleSetNetworkConfigurationResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationResponseOutput {
	return o
}

// The dns settings to be applied on the network interfaces.
func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) DnsSettings() VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationResponse) *VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponse {
		return v.DnsSettings
	}).(VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput)
}

// Specifies whether the network interface is accelerated networking-enabled.
func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) EnableAcceleratedNetworking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationResponse) *bool { return v.EnableAcceleratedNetworking }).(pulumi.BoolPtrOutput)
}

// Whether IP forwarding enabled on this NIC.
func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) EnableIPForwarding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationResponse) *bool { return v.EnableIPForwarding }).(pulumi.BoolPtrOutput)
}

// Resource Id
func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the IP configurations of the network interface.
func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) IpConfigurations() VirtualMachineScaleSetIPConfigurationResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationResponse) []VirtualMachineScaleSetIPConfigurationResponse {
		return v.IpConfigurations
	}).(VirtualMachineScaleSetIPConfigurationResponseArrayOutput)
}

// The network configuration name.
func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The network security group.
func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) NetworkSecurityGroup() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationResponse) *SubResourceResponse {
		return v.NetworkSecurityGroup
	}).(SubResourceResponsePtrOutput)
}

// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationResponse) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

type VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetNetworkConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput) ToVirtualMachineScaleSetNetworkConfigurationResponseArrayOutput() VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput) ToVirtualMachineScaleSetNetworkConfigurationResponseArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput) Index(i pulumi.IntInput) VirtualMachineScaleSetNetworkConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineScaleSetNetworkConfigurationResponse {
		return vs[0].([]VirtualMachineScaleSetNetworkConfigurationResponse)[vs[1].(int)]
	}).(VirtualMachineScaleSetNetworkConfigurationResponseOutput)
}

// Describes a virtual machine scale set network profile.
type VirtualMachineScaleSetNetworkProfile struct {
	// A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The reference will be in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'.
	HealthProbe *ApiEntityReference `pulumi:"healthProbe"`
	// The list of network configurations.
	NetworkInterfaceConfigurations []VirtualMachineScaleSetNetworkConfiguration `pulumi:"networkInterfaceConfigurations"`
}

// VirtualMachineScaleSetNetworkProfileInput is an input type that accepts VirtualMachineScaleSetNetworkProfileArgs and VirtualMachineScaleSetNetworkProfileOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetNetworkProfileInput` via:
//
//          VirtualMachineScaleSetNetworkProfileArgs{...}
type VirtualMachineScaleSetNetworkProfileInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetNetworkProfileOutput() VirtualMachineScaleSetNetworkProfileOutput
	ToVirtualMachineScaleSetNetworkProfileOutputWithContext(context.Context) VirtualMachineScaleSetNetworkProfileOutput
}

// Describes a virtual machine scale set network profile.
type VirtualMachineScaleSetNetworkProfileArgs struct {
	// A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The reference will be in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'.
	HealthProbe ApiEntityReferencePtrInput `pulumi:"healthProbe"`
	// The list of network configurations.
	NetworkInterfaceConfigurations VirtualMachineScaleSetNetworkConfigurationArrayInput `pulumi:"networkInterfaceConfigurations"`
}

func (VirtualMachineScaleSetNetworkProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetNetworkProfile)(nil)).Elem()
}

func (i VirtualMachineScaleSetNetworkProfileArgs) ToVirtualMachineScaleSetNetworkProfileOutput() VirtualMachineScaleSetNetworkProfileOutput {
	return i.ToVirtualMachineScaleSetNetworkProfileOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetNetworkProfileArgs) ToVirtualMachineScaleSetNetworkProfileOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetNetworkProfileOutput)
}

func (i VirtualMachineScaleSetNetworkProfileArgs) ToVirtualMachineScaleSetNetworkProfilePtrOutput() VirtualMachineScaleSetNetworkProfilePtrOutput {
	return i.ToVirtualMachineScaleSetNetworkProfilePtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetNetworkProfileArgs) ToVirtualMachineScaleSetNetworkProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetNetworkProfileOutput).ToVirtualMachineScaleSetNetworkProfilePtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetNetworkProfilePtrInput is an input type that accepts VirtualMachineScaleSetNetworkProfileArgs, VirtualMachineScaleSetNetworkProfilePtr and VirtualMachineScaleSetNetworkProfilePtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetNetworkProfilePtrInput` via:
//
//          VirtualMachineScaleSetNetworkProfileArgs{...}
//
//  or:
//
//          nil
type VirtualMachineScaleSetNetworkProfilePtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetNetworkProfilePtrOutput() VirtualMachineScaleSetNetworkProfilePtrOutput
	ToVirtualMachineScaleSetNetworkProfilePtrOutputWithContext(context.Context) VirtualMachineScaleSetNetworkProfilePtrOutput
}

type virtualMachineScaleSetNetworkProfilePtrType VirtualMachineScaleSetNetworkProfileArgs

func VirtualMachineScaleSetNetworkProfilePtr(v *VirtualMachineScaleSetNetworkProfileArgs) VirtualMachineScaleSetNetworkProfilePtrInput {
	return (*virtualMachineScaleSetNetworkProfilePtrType)(v)
}

func (*virtualMachineScaleSetNetworkProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetNetworkProfile)(nil)).Elem()
}

func (i *virtualMachineScaleSetNetworkProfilePtrType) ToVirtualMachineScaleSetNetworkProfilePtrOutput() VirtualMachineScaleSetNetworkProfilePtrOutput {
	return i.ToVirtualMachineScaleSetNetworkProfilePtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetNetworkProfilePtrType) ToVirtualMachineScaleSetNetworkProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetNetworkProfilePtrOutput)
}

// Describes a virtual machine scale set network profile.
type VirtualMachineScaleSetNetworkProfileResponse struct {
	// A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The reference will be in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'.
	HealthProbe *ApiEntityReferenceResponse `pulumi:"healthProbe"`
	// The list of network configurations.
	NetworkInterfaceConfigurations []VirtualMachineScaleSetNetworkConfigurationResponse `pulumi:"networkInterfaceConfigurations"`
}

// Describes a virtual machine scale set network profile.
type VirtualMachineScaleSetNetworkProfileResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetNetworkProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetNetworkProfileResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetNetworkProfileResponseOutput) ToVirtualMachineScaleSetNetworkProfileResponseOutput() VirtualMachineScaleSetNetworkProfileResponseOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkProfileResponseOutput) ToVirtualMachineScaleSetNetworkProfileResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkProfileResponseOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkProfileResponseOutput) ToVirtualMachineScaleSetNetworkProfileResponsePtrOutput() VirtualMachineScaleSetNetworkProfileResponsePtrOutput {
	return o.ToVirtualMachineScaleSetNetworkProfileResponsePtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetNetworkProfileResponseOutput) ToVirtualMachineScaleSetNetworkProfileResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkProfileResponse) *VirtualMachineScaleSetNetworkProfileResponse {
		return &v
	}).(VirtualMachineScaleSetNetworkProfileResponsePtrOutput)
}

// A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The reference will be in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'.
func (o VirtualMachineScaleSetNetworkProfileResponseOutput) HealthProbe() ApiEntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkProfileResponse) *ApiEntityReferenceResponse { return v.HealthProbe }).(ApiEntityReferenceResponsePtrOutput)
}

// The list of network configurations.
func (o VirtualMachineScaleSetNetworkProfileResponseOutput) NetworkInterfaceConfigurations() VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkProfileResponse) []VirtualMachineScaleSetNetworkConfigurationResponse {
		return v.NetworkInterfaceConfigurations
	}).(VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput)
}

type VirtualMachineScaleSetNetworkProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetNetworkProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetNetworkProfileResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetNetworkProfileResponsePtrOutput) ToVirtualMachineScaleSetNetworkProfileResponsePtrOutput() VirtualMachineScaleSetNetworkProfileResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkProfileResponsePtrOutput) ToVirtualMachineScaleSetNetworkProfileResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkProfileResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkProfileResponsePtrOutput) Elem() VirtualMachineScaleSetNetworkProfileResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetNetworkProfileResponse) VirtualMachineScaleSetNetworkProfileResponse {
		return *v
	}).(VirtualMachineScaleSetNetworkProfileResponseOutput)
}

// A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The reference will be in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'.
func (o VirtualMachineScaleSetNetworkProfileResponsePtrOutput) HealthProbe() ApiEntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetNetworkProfileResponse) *ApiEntityReferenceResponse {
		if v == nil {
			return nil
		}
		return v.HealthProbe
	}).(ApiEntityReferenceResponsePtrOutput)
}

// The list of network configurations.
func (o VirtualMachineScaleSetNetworkProfileResponsePtrOutput) NetworkInterfaceConfigurations() VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetNetworkProfileResponse) []VirtualMachineScaleSetNetworkConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.NetworkInterfaceConfigurations
	}).(VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput)
}

// Describes a virtual machine scale set operating system disk.
type VirtualMachineScaleSetOSDisk struct {
	// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
	Caching *string `pulumi:"caching"`
	// Specifies how the virtual machines in the scale set should be created.<br><br> The only allowed value is: **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
	CreateOption string `pulumi:"createOption"`
	// Specifies the ephemeral disk Settings for the operating system disk used by the virtual machine scale set.
	DiffDiskSettings *DiffDiskSettings `pulumi:"diffDiskSettings"`
	// Specifies the size of the operating system disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// Specifies information about the unmanaged user image to base the scale set on.
	Image *VirtualHardDisk `pulumi:"image"`
	// The managed disk parameters.
	ManagedDisk *VirtualMachineScaleSetManagedDiskParameters `pulumi:"managedDisk"`
	// The disk name.
	Name *string `pulumi:"name"`
	// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
	OsType *string `pulumi:"osType"`
	// Specifies the container urls that are used to store operating system disks for the scale set.
	VhdContainers []string `pulumi:"vhdContainers"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool `pulumi:"writeAcceleratorEnabled"`
}

// VirtualMachineScaleSetOSDiskInput is an input type that accepts VirtualMachineScaleSetOSDiskArgs and VirtualMachineScaleSetOSDiskOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetOSDiskInput` via:
//
//          VirtualMachineScaleSetOSDiskArgs{...}
type VirtualMachineScaleSetOSDiskInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetOSDiskOutput() VirtualMachineScaleSetOSDiskOutput
	ToVirtualMachineScaleSetOSDiskOutputWithContext(context.Context) VirtualMachineScaleSetOSDiskOutput
}

// Describes a virtual machine scale set operating system disk.
type VirtualMachineScaleSetOSDiskArgs struct {
	// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
	Caching pulumi.StringPtrInput `pulumi:"caching"`
	// Specifies how the virtual machines in the scale set should be created.<br><br> The only allowed value is: **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
	CreateOption pulumi.StringInput `pulumi:"createOption"`
	// Specifies the ephemeral disk Settings for the operating system disk used by the virtual machine scale set.
	DiffDiskSettings DiffDiskSettingsPtrInput `pulumi:"diffDiskSettings"`
	// Specifies the size of the operating system disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
	DiskSizeGB pulumi.IntPtrInput `pulumi:"diskSizeGB"`
	// Specifies information about the unmanaged user image to base the scale set on.
	Image VirtualHardDiskPtrInput `pulumi:"image"`
	// The managed disk parameters.
	ManagedDisk VirtualMachineScaleSetManagedDiskParametersPtrInput `pulumi:"managedDisk"`
	// The disk name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
	OsType pulumi.StringPtrInput `pulumi:"osType"`
	// Specifies the container urls that are used to store operating system disks for the scale set.
	VhdContainers pulumi.StringArrayInput `pulumi:"vhdContainers"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled pulumi.BoolPtrInput `pulumi:"writeAcceleratorEnabled"`
}

func (VirtualMachineScaleSetOSDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetOSDisk)(nil)).Elem()
}

func (i VirtualMachineScaleSetOSDiskArgs) ToVirtualMachineScaleSetOSDiskOutput() VirtualMachineScaleSetOSDiskOutput {
	return i.ToVirtualMachineScaleSetOSDiskOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetOSDiskArgs) ToVirtualMachineScaleSetOSDiskOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetOSDiskOutput)
}

func (i VirtualMachineScaleSetOSDiskArgs) ToVirtualMachineScaleSetOSDiskPtrOutput() VirtualMachineScaleSetOSDiskPtrOutput {
	return i.ToVirtualMachineScaleSetOSDiskPtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetOSDiskArgs) ToVirtualMachineScaleSetOSDiskPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetOSDiskOutput).ToVirtualMachineScaleSetOSDiskPtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetOSDiskPtrInput is an input type that accepts VirtualMachineScaleSetOSDiskArgs, VirtualMachineScaleSetOSDiskPtr and VirtualMachineScaleSetOSDiskPtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetOSDiskPtrInput` via:
//
//          VirtualMachineScaleSetOSDiskArgs{...}
//
//  or:
//
//          nil
type VirtualMachineScaleSetOSDiskPtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetOSDiskPtrOutput() VirtualMachineScaleSetOSDiskPtrOutput
	ToVirtualMachineScaleSetOSDiskPtrOutputWithContext(context.Context) VirtualMachineScaleSetOSDiskPtrOutput
}

type virtualMachineScaleSetOSDiskPtrType VirtualMachineScaleSetOSDiskArgs

func VirtualMachineScaleSetOSDiskPtr(v *VirtualMachineScaleSetOSDiskArgs) VirtualMachineScaleSetOSDiskPtrInput {
	return (*virtualMachineScaleSetOSDiskPtrType)(v)
}

func (*virtualMachineScaleSetOSDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetOSDisk)(nil)).Elem()
}

func (i *virtualMachineScaleSetOSDiskPtrType) ToVirtualMachineScaleSetOSDiskPtrOutput() VirtualMachineScaleSetOSDiskPtrOutput {
	return i.ToVirtualMachineScaleSetOSDiskPtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetOSDiskPtrType) ToVirtualMachineScaleSetOSDiskPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetOSDiskPtrOutput)
}

// Describes a virtual machine scale set operating system disk.
type VirtualMachineScaleSetOSDiskResponse struct {
	// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
	Caching *string `pulumi:"caching"`
	// Specifies how the virtual machines in the scale set should be created.<br><br> The only allowed value is: **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
	CreateOption string `pulumi:"createOption"`
	// Specifies the ephemeral disk Settings for the operating system disk used by the virtual machine scale set.
	DiffDiskSettings *DiffDiskSettingsResponse `pulumi:"diffDiskSettings"`
	// Specifies the size of the operating system disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// Specifies information about the unmanaged user image to base the scale set on.
	Image *VirtualHardDiskResponse `pulumi:"image"`
	// The managed disk parameters.
	ManagedDisk *VirtualMachineScaleSetManagedDiskParametersResponse `pulumi:"managedDisk"`
	// The disk name.
	Name *string `pulumi:"name"`
	// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
	OsType *string `pulumi:"osType"`
	// Specifies the container urls that are used to store operating system disks for the scale set.
	VhdContainers []string `pulumi:"vhdContainers"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool `pulumi:"writeAcceleratorEnabled"`
}

// Describes a virtual machine scale set operating system disk.
type VirtualMachineScaleSetOSDiskResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetOSDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetOSDiskResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetOSDiskResponseOutput) ToVirtualMachineScaleSetOSDiskResponseOutput() VirtualMachineScaleSetOSDiskResponseOutput {
	return o
}

func (o VirtualMachineScaleSetOSDiskResponseOutput) ToVirtualMachineScaleSetOSDiskResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSDiskResponseOutput {
	return o
}

func (o VirtualMachineScaleSetOSDiskResponseOutput) ToVirtualMachineScaleSetOSDiskResponsePtrOutput() VirtualMachineScaleSetOSDiskResponsePtrOutput {
	return o.ToVirtualMachineScaleSetOSDiskResponsePtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetOSDiskResponseOutput) ToVirtualMachineScaleSetOSDiskResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSDiskResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDiskResponse) *VirtualMachineScaleSetOSDiskResponse {
		return &v
	}).(VirtualMachineScaleSetOSDiskResponsePtrOutput)
}

// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
func (o VirtualMachineScaleSetOSDiskResponseOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDiskResponse) *string { return v.Caching }).(pulumi.StringPtrOutput)
}

// Specifies how the virtual machines in the scale set should be created.<br><br> The only allowed value is: **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
func (o VirtualMachineScaleSetOSDiskResponseOutput) CreateOption() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDiskResponse) string { return v.CreateOption }).(pulumi.StringOutput)
}

// Specifies the ephemeral disk Settings for the operating system disk used by the virtual machine scale set.
func (o VirtualMachineScaleSetOSDiskResponseOutput) DiffDiskSettings() DiffDiskSettingsResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDiskResponse) *DiffDiskSettingsResponse { return v.DiffDiskSettings }).(DiffDiskSettingsResponsePtrOutput)
}

// Specifies the size of the operating system disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
func (o VirtualMachineScaleSetOSDiskResponseOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDiskResponse) *int { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

// Specifies information about the unmanaged user image to base the scale set on.
func (o VirtualMachineScaleSetOSDiskResponseOutput) Image() VirtualHardDiskResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDiskResponse) *VirtualHardDiskResponse { return v.Image }).(VirtualHardDiskResponsePtrOutput)
}

// The managed disk parameters.
func (o VirtualMachineScaleSetOSDiskResponseOutput) ManagedDisk() VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDiskResponse) *VirtualMachineScaleSetManagedDiskParametersResponse {
		return v.ManagedDisk
	}).(VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput)
}

// The disk name.
func (o VirtualMachineScaleSetOSDiskResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDiskResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
func (o VirtualMachineScaleSetOSDiskResponseOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDiskResponse) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// Specifies the container urls that are used to store operating system disks for the scale set.
func (o VirtualMachineScaleSetOSDiskResponseOutput) VhdContainers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDiskResponse) []string { return v.VhdContainers }).(pulumi.StringArrayOutput)
}

// Specifies whether writeAccelerator should be enabled or disabled on the disk.
func (o VirtualMachineScaleSetOSDiskResponseOutput) WriteAcceleratorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDiskResponse) *bool { return v.WriteAcceleratorEnabled }).(pulumi.BoolPtrOutput)
}

type VirtualMachineScaleSetOSDiskResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetOSDiskResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetOSDiskResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) ToVirtualMachineScaleSetOSDiskResponsePtrOutput() VirtualMachineScaleSetOSDiskResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) ToVirtualMachineScaleSetOSDiskResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSDiskResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) Elem() VirtualMachineScaleSetOSDiskResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDiskResponse) VirtualMachineScaleSetOSDiskResponse { return *v }).(VirtualMachineScaleSetOSDiskResponseOutput)
}

// Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage**
func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.Caching
	}).(pulumi.StringPtrOutput)
}

// Specifies how the virtual machines in the scale set should be created.<br><br> The only allowed value is: **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) CreateOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreateOption
	}).(pulumi.StringPtrOutput)
}

// Specifies the ephemeral disk Settings for the operating system disk used by the virtual machine scale set.
func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) DiffDiskSettings() DiffDiskSettingsResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDiskResponse) *DiffDiskSettingsResponse {
		if v == nil {
			return nil
		}
		return v.DiffDiskSettings
	}).(DiffDiskSettingsResponsePtrOutput)
}

// Specifies the size of the operating system disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB
func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDiskResponse) *int {
		if v == nil {
			return nil
		}
		return v.DiskSizeGB
	}).(pulumi.IntPtrOutput)
}

// Specifies information about the unmanaged user image to base the scale set on.
func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) Image() VirtualHardDiskResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDiskResponse) *VirtualHardDiskResponse {
		if v == nil {
			return nil
		}
		return v.Image
	}).(VirtualHardDiskResponsePtrOutput)
}

// The managed disk parameters.
func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) ManagedDisk() VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDiskResponse) *VirtualMachineScaleSetManagedDiskParametersResponse {
		if v == nil {
			return nil
		}
		return v.ManagedDisk
	}).(VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput)
}

// The disk name.
func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux**
func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.OsType
	}).(pulumi.StringPtrOutput)
}

// Specifies the container urls that are used to store operating system disks for the scale set.
func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) VhdContainers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDiskResponse) []string {
		if v == nil {
			return nil
		}
		return v.VhdContainers
	}).(pulumi.StringArrayOutput)
}

// Specifies whether writeAccelerator should be enabled or disabled on the disk.
func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) WriteAcceleratorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDiskResponse) *bool {
		if v == nil {
			return nil
		}
		return v.WriteAcceleratorEnabled
	}).(pulumi.BoolPtrOutput)
}

// Describes a virtual machine scale set OS profile.
type VirtualMachineScaleSetOSProfile struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password)
	AdminPassword *string `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	AdminUsername *string `pulumi:"adminUsername"`
	// Specifies the computer name prefix for all of the virtual machines in the scale set. Computer name prefixes must be 1 to 15 characters long.
	ComputerNamePrefix *string `pulumi:"computerNamePrefix"`
	// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. <br><br> For using cloud-init for your VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	CustomData *string `pulumi:"customData"`
	// Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json) <br><br> For running non-endorsed distributions, see [Information for Non-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
	LinuxConfiguration *LinuxConfiguration `pulumi:"linuxConfiguration"`
	// Specifies set of certificates that should be installed onto the virtual machines in the scale set.
	Secrets []VaultSecretGroup `pulumi:"secrets"`
	// Specifies Windows operating system settings on the virtual machine.
	WindowsConfiguration *WindowsConfiguration `pulumi:"windowsConfiguration"`
}

// VirtualMachineScaleSetOSProfileInput is an input type that accepts VirtualMachineScaleSetOSProfileArgs and VirtualMachineScaleSetOSProfileOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetOSProfileInput` via:
//
//          VirtualMachineScaleSetOSProfileArgs{...}
type VirtualMachineScaleSetOSProfileInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetOSProfileOutput() VirtualMachineScaleSetOSProfileOutput
	ToVirtualMachineScaleSetOSProfileOutputWithContext(context.Context) VirtualMachineScaleSetOSProfileOutput
}

// Describes a virtual machine scale set OS profile.
type VirtualMachineScaleSetOSProfileArgs struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password)
	AdminPassword pulumi.StringPtrInput `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	AdminUsername pulumi.StringPtrInput `pulumi:"adminUsername"`
	// Specifies the computer name prefix for all of the virtual machines in the scale set. Computer name prefixes must be 1 to 15 characters long.
	ComputerNamePrefix pulumi.StringPtrInput `pulumi:"computerNamePrefix"`
	// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. <br><br> For using cloud-init for your VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	CustomData pulumi.StringPtrInput `pulumi:"customData"`
	// Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json) <br><br> For running non-endorsed distributions, see [Information for Non-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
	LinuxConfiguration LinuxConfigurationPtrInput `pulumi:"linuxConfiguration"`
	// Specifies set of certificates that should be installed onto the virtual machines in the scale set.
	Secrets VaultSecretGroupArrayInput `pulumi:"secrets"`
	// Specifies Windows operating system settings on the virtual machine.
	WindowsConfiguration WindowsConfigurationPtrInput `pulumi:"windowsConfiguration"`
}

func (VirtualMachineScaleSetOSProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetOSProfile)(nil)).Elem()
}

func (i VirtualMachineScaleSetOSProfileArgs) ToVirtualMachineScaleSetOSProfileOutput() VirtualMachineScaleSetOSProfileOutput {
	return i.ToVirtualMachineScaleSetOSProfileOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetOSProfileArgs) ToVirtualMachineScaleSetOSProfileOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetOSProfileOutput)
}

func (i VirtualMachineScaleSetOSProfileArgs) ToVirtualMachineScaleSetOSProfilePtrOutput() VirtualMachineScaleSetOSProfilePtrOutput {
	return i.ToVirtualMachineScaleSetOSProfilePtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetOSProfileArgs) ToVirtualMachineScaleSetOSProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetOSProfileOutput).ToVirtualMachineScaleSetOSProfilePtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetOSProfilePtrInput is an input type that accepts VirtualMachineScaleSetOSProfileArgs, VirtualMachineScaleSetOSProfilePtr and VirtualMachineScaleSetOSProfilePtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetOSProfilePtrInput` via:
//
//          VirtualMachineScaleSetOSProfileArgs{...}
//
//  or:
//
//          nil
type VirtualMachineScaleSetOSProfilePtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetOSProfilePtrOutput() VirtualMachineScaleSetOSProfilePtrOutput
	ToVirtualMachineScaleSetOSProfilePtrOutputWithContext(context.Context) VirtualMachineScaleSetOSProfilePtrOutput
}

type virtualMachineScaleSetOSProfilePtrType VirtualMachineScaleSetOSProfileArgs

func VirtualMachineScaleSetOSProfilePtr(v *VirtualMachineScaleSetOSProfileArgs) VirtualMachineScaleSetOSProfilePtrInput {
	return (*virtualMachineScaleSetOSProfilePtrType)(v)
}

func (*virtualMachineScaleSetOSProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetOSProfile)(nil)).Elem()
}

func (i *virtualMachineScaleSetOSProfilePtrType) ToVirtualMachineScaleSetOSProfilePtrOutput() VirtualMachineScaleSetOSProfilePtrOutput {
	return i.ToVirtualMachineScaleSetOSProfilePtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetOSProfilePtrType) ToVirtualMachineScaleSetOSProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetOSProfilePtrOutput)
}

// Describes a virtual machine scale set OS profile.
type VirtualMachineScaleSetOSProfileResponse struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password)
	AdminPassword *string `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	AdminUsername *string `pulumi:"adminUsername"`
	// Specifies the computer name prefix for all of the virtual machines in the scale set. Computer name prefixes must be 1 to 15 characters long.
	ComputerNamePrefix *string `pulumi:"computerNamePrefix"`
	// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. <br><br> For using cloud-init for your VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
	CustomData *string `pulumi:"customData"`
	// Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json) <br><br> For running non-endorsed distributions, see [Information for Non-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
	LinuxConfiguration *LinuxConfigurationResponse `pulumi:"linuxConfiguration"`
	// Specifies set of certificates that should be installed onto the virtual machines in the scale set.
	Secrets []VaultSecretGroupResponse `pulumi:"secrets"`
	// Specifies Windows operating system settings on the virtual machine.
	WindowsConfiguration *WindowsConfigurationResponse `pulumi:"windowsConfiguration"`
}

// Describes a virtual machine scale set OS profile.
type VirtualMachineScaleSetOSProfileResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetOSProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetOSProfileResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetOSProfileResponseOutput) ToVirtualMachineScaleSetOSProfileResponseOutput() VirtualMachineScaleSetOSProfileResponseOutput {
	return o
}

func (o VirtualMachineScaleSetOSProfileResponseOutput) ToVirtualMachineScaleSetOSProfileResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSProfileResponseOutput {
	return o
}

func (o VirtualMachineScaleSetOSProfileResponseOutput) ToVirtualMachineScaleSetOSProfileResponsePtrOutput() VirtualMachineScaleSetOSProfileResponsePtrOutput {
	return o.ToVirtualMachineScaleSetOSProfileResponsePtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetOSProfileResponseOutput) ToVirtualMachineScaleSetOSProfileResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfileResponse) *VirtualMachineScaleSetOSProfileResponse {
		return &v
	}).(VirtualMachineScaleSetOSProfileResponsePtrOutput)
}

// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password)
func (o VirtualMachineScaleSetOSProfileResponseOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfileResponse) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
func (o VirtualMachineScaleSetOSProfileResponseOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfileResponse) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// Specifies the computer name prefix for all of the virtual machines in the scale set. Computer name prefixes must be 1 to 15 characters long.
func (o VirtualMachineScaleSetOSProfileResponseOutput) ComputerNamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfileResponse) *string { return v.ComputerNamePrefix }).(pulumi.StringPtrOutput)
}

// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. <br><br> For using cloud-init for your VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
func (o VirtualMachineScaleSetOSProfileResponseOutput) CustomData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfileResponse) *string { return v.CustomData }).(pulumi.StringPtrOutput)
}

// Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json) <br><br> For running non-endorsed distributions, see [Information for Non-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
func (o VirtualMachineScaleSetOSProfileResponseOutput) LinuxConfiguration() LinuxConfigurationResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfileResponse) *LinuxConfigurationResponse {
		return v.LinuxConfiguration
	}).(LinuxConfigurationResponsePtrOutput)
}

// Specifies set of certificates that should be installed onto the virtual machines in the scale set.
func (o VirtualMachineScaleSetOSProfileResponseOutput) Secrets() VaultSecretGroupResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfileResponse) []VaultSecretGroupResponse { return v.Secrets }).(VaultSecretGroupResponseArrayOutput)
}

// Specifies Windows operating system settings on the virtual machine.
func (o VirtualMachineScaleSetOSProfileResponseOutput) WindowsConfiguration() WindowsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfileResponse) *WindowsConfigurationResponse {
		return v.WindowsConfiguration
	}).(WindowsConfigurationResponsePtrOutput)
}

type VirtualMachineScaleSetOSProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetOSProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetOSProfileResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetOSProfileResponsePtrOutput) ToVirtualMachineScaleSetOSProfileResponsePtrOutput() VirtualMachineScaleSetOSProfileResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetOSProfileResponsePtrOutput) ToVirtualMachineScaleSetOSProfileResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSProfileResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetOSProfileResponsePtrOutput) Elem() VirtualMachineScaleSetOSProfileResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfileResponse) VirtualMachineScaleSetOSProfileResponse { return *v }).(VirtualMachineScaleSetOSProfileResponseOutput)
}

// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password)
func (o VirtualMachineScaleSetOSProfileResponsePtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters  <br><br><li> For root access to the Linux VM, see [Using root privileges on Linux virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)<br><li> For a list of built-in system users on Linux that should not be used in this field, see [Selecting User Names for Linux on Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
func (o VirtualMachineScaleSetOSProfileResponsePtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// Specifies the computer name prefix for all of the virtual machines in the scale set. Computer name prefixes must be 1 to 15 characters long.
func (o VirtualMachineScaleSetOSProfileResponsePtrOutput) ComputerNamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ComputerNamePrefix
	}).(pulumi.StringPtrOutput)
}

// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. <br><br> For using cloud-init for your VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json)
func (o VirtualMachineScaleSetOSProfileResponsePtrOutput) CustomData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomData
	}).(pulumi.StringPtrOutput)
}

// Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json) <br><br> For running non-endorsed distributions, see [Information for Non-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
func (o VirtualMachineScaleSetOSProfileResponsePtrOutput) LinuxConfiguration() LinuxConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfileResponse) *LinuxConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.LinuxConfiguration
	}).(LinuxConfigurationResponsePtrOutput)
}

// Specifies set of certificates that should be installed onto the virtual machines in the scale set.
func (o VirtualMachineScaleSetOSProfileResponsePtrOutput) Secrets() VaultSecretGroupResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfileResponse) []VaultSecretGroupResponse {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(VaultSecretGroupResponseArrayOutput)
}

// Specifies Windows operating system settings on the virtual machine.
func (o VirtualMachineScaleSetOSProfileResponsePtrOutput) WindowsConfiguration() WindowsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfileResponse) *WindowsConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.WindowsConfiguration
	}).(WindowsConfigurationResponsePtrOutput)
}

// Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration
type VirtualMachineScaleSetPublicIPAddressConfiguration struct {
	// The dns settings to be applied on the publicIP addresses .
	DnsSettings *VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings `pulumi:"dnsSettings"`
	// The idle timeout of the public IP address.
	IdleTimeoutInMinutes *int `pulumi:"idleTimeoutInMinutes"`
	// The list of IP tags associated with the public IP address.
	IpTags []VirtualMachineScaleSetIpTag `pulumi:"ipTags"`
	// The publicIP address configuration name.
	Name string `pulumi:"name"`
	// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
	PublicIPAddressVersion *string `pulumi:"publicIPAddressVersion"`
	// The PublicIPPrefix from which to allocate publicIP addresses.
	PublicIPPrefix *SubResource `pulumi:"publicIPPrefix"`
}

// VirtualMachineScaleSetPublicIPAddressConfigurationInput is an input type that accepts VirtualMachineScaleSetPublicIPAddressConfigurationArgs and VirtualMachineScaleSetPublicIPAddressConfigurationOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetPublicIPAddressConfigurationInput` via:
//
//          VirtualMachineScaleSetPublicIPAddressConfigurationArgs{...}
type VirtualMachineScaleSetPublicIPAddressConfigurationInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetPublicIPAddressConfigurationOutput() VirtualMachineScaleSetPublicIPAddressConfigurationOutput
	ToVirtualMachineScaleSetPublicIPAddressConfigurationOutputWithContext(context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationOutput
}

// Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration
type VirtualMachineScaleSetPublicIPAddressConfigurationArgs struct {
	// The dns settings to be applied on the publicIP addresses .
	DnsSettings VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrInput `pulumi:"dnsSettings"`
	// The idle timeout of the public IP address.
	IdleTimeoutInMinutes pulumi.IntPtrInput `pulumi:"idleTimeoutInMinutes"`
	// The list of IP tags associated with the public IP address.
	IpTags VirtualMachineScaleSetIpTagArrayInput `pulumi:"ipTags"`
	// The publicIP address configuration name.
	Name pulumi.StringInput `pulumi:"name"`
	// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
	PublicIPAddressVersion pulumi.StringPtrInput `pulumi:"publicIPAddressVersion"`
	// The PublicIPPrefix from which to allocate publicIP addresses.
	PublicIPPrefix SubResourcePtrInput `pulumi:"publicIPPrefix"`
}

func (VirtualMachineScaleSetPublicIPAddressConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetPublicIPAddressConfiguration)(nil)).Elem()
}

func (i VirtualMachineScaleSetPublicIPAddressConfigurationArgs) ToVirtualMachineScaleSetPublicIPAddressConfigurationOutput() VirtualMachineScaleSetPublicIPAddressConfigurationOutput {
	return i.ToVirtualMachineScaleSetPublicIPAddressConfigurationOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetPublicIPAddressConfigurationArgs) ToVirtualMachineScaleSetPublicIPAddressConfigurationOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetPublicIPAddressConfigurationOutput)
}

func (i VirtualMachineScaleSetPublicIPAddressConfigurationArgs) ToVirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput() VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput {
	return i.ToVirtualMachineScaleSetPublicIPAddressConfigurationPtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetPublicIPAddressConfigurationArgs) ToVirtualMachineScaleSetPublicIPAddressConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetPublicIPAddressConfigurationOutput).ToVirtualMachineScaleSetPublicIPAddressConfigurationPtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetPublicIPAddressConfigurationPtrInput is an input type that accepts VirtualMachineScaleSetPublicIPAddressConfigurationArgs, VirtualMachineScaleSetPublicIPAddressConfigurationPtr and VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetPublicIPAddressConfigurationPtrInput` via:
//
//          VirtualMachineScaleSetPublicIPAddressConfigurationArgs{...}
//
//  or:
//
//          nil
type VirtualMachineScaleSetPublicIPAddressConfigurationPtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput() VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput
	ToVirtualMachineScaleSetPublicIPAddressConfigurationPtrOutputWithContext(context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput
}

type virtualMachineScaleSetPublicIPAddressConfigurationPtrType VirtualMachineScaleSetPublicIPAddressConfigurationArgs

func VirtualMachineScaleSetPublicIPAddressConfigurationPtr(v *VirtualMachineScaleSetPublicIPAddressConfigurationArgs) VirtualMachineScaleSetPublicIPAddressConfigurationPtrInput {
	return (*virtualMachineScaleSetPublicIPAddressConfigurationPtrType)(v)
}

func (*virtualMachineScaleSetPublicIPAddressConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetPublicIPAddressConfiguration)(nil)).Elem()
}

func (i *virtualMachineScaleSetPublicIPAddressConfigurationPtrType) ToVirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput() VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput {
	return i.ToVirtualMachineScaleSetPublicIPAddressConfigurationPtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetPublicIPAddressConfigurationPtrType) ToVirtualMachineScaleSetPublicIPAddressConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput)
}

// Describes a virtual machines scale sets network configuration's DNS settings.
type VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings struct {
	// The Domain name label.The concatenation of the domain name label and vm index will be the domain name labels of the PublicIPAddress resources that will be created
	DomainNameLabel string `pulumi:"domainNameLabel"`
}

// VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsInput is an input type that accepts VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs and VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsInput` via:
//
//          VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs{...}
type VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput
	ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutputWithContext(context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput
}

// Describes a virtual machines scale sets network configuration's DNS settings.
type VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs struct {
	// The Domain name label.The concatenation of the domain name label and vm index will be the domain name labels of the PublicIPAddress resources that will be created
	DomainNameLabel pulumi.StringInput `pulumi:"domainNameLabel"`
}

func (VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings)(nil)).Elem()
}

func (i VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput {
	return i.ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput)
}

func (i VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput {
	return i.ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput).ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrInput is an input type that accepts VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs, VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtr and VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrInput` via:
//
//          VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs{...}
//
//  or:
//
//          nil
type VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput
	ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutputWithContext(context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput
}

type virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrType VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs

func VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtr(v *VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs) VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrInput {
	return (*virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrType)(v)
}

func (*virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings)(nil)).Elem()
}

func (i *virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrType) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput {
	return i.ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrType) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput)
}

// Describes a virtual machines scale sets network configuration's DNS settings.
type VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse struct {
	// The Domain name label.The concatenation of the domain name label and vm index will be the domain name labels of the PublicIPAddress resources that will be created
	DomainNameLabel string `pulumi:"domainNameLabel"`
}

// Describes a virtual machines scale sets network configuration's DNS settings.
type VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput {
	return o
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput {
	return o
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput {
	return o.ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse) *VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse {
		return &v
	}).(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput)
}

// The Domain name label.The concatenation of the domain name label and vm index will be the domain name labels of the PublicIPAddress resources that will be created
func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput) DomainNameLabel() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse) string {
		return v.DomainNameLabel
	}).(pulumi.StringOutput)
}

type VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput) Elem() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse) VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse {
		return *v
	}).(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput)
}

// The Domain name label.The concatenation of the domain name label and vm index will be the domain name labels of the PublicIPAddress resources that will be created
func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput) DomainNameLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DomainNameLabel
	}).(pulumi.StringPtrOutput)
}

// Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration
type VirtualMachineScaleSetPublicIPAddressConfigurationResponse struct {
	// The dns settings to be applied on the publicIP addresses .
	DnsSettings *VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse `pulumi:"dnsSettings"`
	// The idle timeout of the public IP address.
	IdleTimeoutInMinutes *int `pulumi:"idleTimeoutInMinutes"`
	// The list of IP tags associated with the public IP address.
	IpTags []VirtualMachineScaleSetIpTagResponse `pulumi:"ipTags"`
	// The publicIP address configuration name.
	Name string `pulumi:"name"`
	// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
	PublicIPAddressVersion *string `pulumi:"publicIPAddressVersion"`
	// The PublicIPPrefix from which to allocate publicIP addresses.
	PublicIPPrefix *SubResourceResponse `pulumi:"publicIPPrefix"`
}

// Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration
type VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetPublicIPAddressConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput() VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput {
	return o
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput {
	return o
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput() VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput {
	return o.ToVirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfigurationResponse) *VirtualMachineScaleSetPublicIPAddressConfigurationResponse {
		return &v
	}).(VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput)
}

// The dns settings to be applied on the publicIP addresses .
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput) DnsSettings() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfigurationResponse) *VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse {
		return v.DnsSettings
	}).(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput)
}

// The idle timeout of the public IP address.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput) IdleTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfigurationResponse) *int { return v.IdleTimeoutInMinutes }).(pulumi.IntPtrOutput)
}

// The list of IP tags associated with the public IP address.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput) IpTags() VirtualMachineScaleSetIpTagResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfigurationResponse) []VirtualMachineScaleSetIpTagResponse {
		return v.IpTags
	}).(VirtualMachineScaleSetIpTagResponseArrayOutput)
}

// The publicIP address configuration name.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfigurationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput) PublicIPAddressVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfigurationResponse) *string {
		return v.PublicIPAddressVersion
	}).(pulumi.StringPtrOutput)
}

// The PublicIPPrefix from which to allocate publicIP addresses.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput) PublicIPPrefix() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfigurationResponse) *SubResourceResponse {
		return v.PublicIPPrefix
	}).(SubResourceResponsePtrOutput)
}

type VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetPublicIPAddressConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput() VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput) Elem() VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationResponse) VirtualMachineScaleSetPublicIPAddressConfigurationResponse {
		return *v
	}).(VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput)
}

// The dns settings to be applied on the publicIP addresses .
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput) DnsSettings() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationResponse) *VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse {
		if v == nil {
			return nil
		}
		return v.DnsSettings
	}).(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput)
}

// The idle timeout of the public IP address.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput) IdleTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.IdleTimeoutInMinutes
	}).(pulumi.IntPtrOutput)
}

// The list of IP tags associated with the public IP address.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput) IpTags() VirtualMachineScaleSetIpTagResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationResponse) []VirtualMachineScaleSetIpTagResponse {
		if v == nil {
			return nil
		}
		return v.IpTags
	}).(VirtualMachineScaleSetIpTagResponseArrayOutput)
}

// The publicIP address configuration name.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput) PublicIPAddressVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.PublicIPAddressVersion
	}).(pulumi.StringPtrOutput)
}

// The PublicIPPrefix from which to allocate publicIP addresses.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput) PublicIPPrefix() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationResponse) *SubResourceResponse {
		if v == nil {
			return nil
		}
		return v.PublicIPPrefix
	}).(SubResourceResponsePtrOutput)
}

// Describes a virtual machine scale set storage profile.
type VirtualMachineScaleSetStorageProfile struct {
	// Specifies the parameters that are used to add data disks to the virtual machines in the scale set. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	DataDisks []VirtualMachineScaleSetDataDisk `pulumi:"dataDisks"`
	// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
	ImageReference *ImageReference `pulumi:"imageReference"`
	// Specifies information about the operating system disk used by the virtual machines in the scale set. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	OsDisk *VirtualMachineScaleSetOSDisk `pulumi:"osDisk"`
}

// VirtualMachineScaleSetStorageProfileInput is an input type that accepts VirtualMachineScaleSetStorageProfileArgs and VirtualMachineScaleSetStorageProfileOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetStorageProfileInput` via:
//
//          VirtualMachineScaleSetStorageProfileArgs{...}
type VirtualMachineScaleSetStorageProfileInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetStorageProfileOutput() VirtualMachineScaleSetStorageProfileOutput
	ToVirtualMachineScaleSetStorageProfileOutputWithContext(context.Context) VirtualMachineScaleSetStorageProfileOutput
}

// Describes a virtual machine scale set storage profile.
type VirtualMachineScaleSetStorageProfileArgs struct {
	// Specifies the parameters that are used to add data disks to the virtual machines in the scale set. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	DataDisks VirtualMachineScaleSetDataDiskArrayInput `pulumi:"dataDisks"`
	// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
	ImageReference ImageReferencePtrInput `pulumi:"imageReference"`
	// Specifies information about the operating system disk used by the virtual machines in the scale set. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	OsDisk VirtualMachineScaleSetOSDiskPtrInput `pulumi:"osDisk"`
}

func (VirtualMachineScaleSetStorageProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetStorageProfile)(nil)).Elem()
}

func (i VirtualMachineScaleSetStorageProfileArgs) ToVirtualMachineScaleSetStorageProfileOutput() VirtualMachineScaleSetStorageProfileOutput {
	return i.ToVirtualMachineScaleSetStorageProfileOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetStorageProfileArgs) ToVirtualMachineScaleSetStorageProfileOutputWithContext(ctx context.Context) VirtualMachineScaleSetStorageProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetStorageProfileOutput)
}

func (i VirtualMachineScaleSetStorageProfileArgs) ToVirtualMachineScaleSetStorageProfilePtrOutput() VirtualMachineScaleSetStorageProfilePtrOutput {
	return i.ToVirtualMachineScaleSetStorageProfilePtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetStorageProfileArgs) ToVirtualMachineScaleSetStorageProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetStorageProfileOutput).ToVirtualMachineScaleSetStorageProfilePtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetStorageProfilePtrInput is an input type that accepts VirtualMachineScaleSetStorageProfileArgs, VirtualMachineScaleSetStorageProfilePtr and VirtualMachineScaleSetStorageProfilePtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetStorageProfilePtrInput` via:
//
//          VirtualMachineScaleSetStorageProfileArgs{...}
//
//  or:
//
//          nil
type VirtualMachineScaleSetStorageProfilePtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetStorageProfilePtrOutput() VirtualMachineScaleSetStorageProfilePtrOutput
	ToVirtualMachineScaleSetStorageProfilePtrOutputWithContext(context.Context) VirtualMachineScaleSetStorageProfilePtrOutput
}

type virtualMachineScaleSetStorageProfilePtrType VirtualMachineScaleSetStorageProfileArgs

func VirtualMachineScaleSetStorageProfilePtr(v *VirtualMachineScaleSetStorageProfileArgs) VirtualMachineScaleSetStorageProfilePtrInput {
	return (*virtualMachineScaleSetStorageProfilePtrType)(v)
}

func (*virtualMachineScaleSetStorageProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetStorageProfile)(nil)).Elem()
}

func (i *virtualMachineScaleSetStorageProfilePtrType) ToVirtualMachineScaleSetStorageProfilePtrOutput() VirtualMachineScaleSetStorageProfilePtrOutput {
	return i.ToVirtualMachineScaleSetStorageProfilePtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetStorageProfilePtrType) ToVirtualMachineScaleSetStorageProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetStorageProfilePtrOutput)
}

// Describes a virtual machine scale set storage profile.
type VirtualMachineScaleSetStorageProfileResponse struct {
	// Specifies the parameters that are used to add data disks to the virtual machines in the scale set. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	DataDisks []VirtualMachineScaleSetDataDiskResponse `pulumi:"dataDisks"`
	// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
	ImageReference *ImageReferenceResponse `pulumi:"imageReference"`
	// Specifies information about the operating system disk used by the virtual machines in the scale set. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	OsDisk *VirtualMachineScaleSetOSDiskResponse `pulumi:"osDisk"`
}

// Describes a virtual machine scale set storage profile.
type VirtualMachineScaleSetStorageProfileResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetStorageProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetStorageProfileResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetStorageProfileResponseOutput) ToVirtualMachineScaleSetStorageProfileResponseOutput() VirtualMachineScaleSetStorageProfileResponseOutput {
	return o
}

func (o VirtualMachineScaleSetStorageProfileResponseOutput) ToVirtualMachineScaleSetStorageProfileResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetStorageProfileResponseOutput {
	return o
}

func (o VirtualMachineScaleSetStorageProfileResponseOutput) ToVirtualMachineScaleSetStorageProfileResponsePtrOutput() VirtualMachineScaleSetStorageProfileResponsePtrOutput {
	return o.ToVirtualMachineScaleSetStorageProfileResponsePtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetStorageProfileResponseOutput) ToVirtualMachineScaleSetStorageProfileResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetStorageProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetStorageProfileResponse) *VirtualMachineScaleSetStorageProfileResponse {
		return &v
	}).(VirtualMachineScaleSetStorageProfileResponsePtrOutput)
}

// Specifies the parameters that are used to add data disks to the virtual machines in the scale set. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
func (o VirtualMachineScaleSetStorageProfileResponseOutput) DataDisks() VirtualMachineScaleSetDataDiskResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetStorageProfileResponse) []VirtualMachineScaleSetDataDiskResponse {
		return v.DataDisks
	}).(VirtualMachineScaleSetDataDiskResponseArrayOutput)
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
func (o VirtualMachineScaleSetStorageProfileResponseOutput) ImageReference() ImageReferenceResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetStorageProfileResponse) *ImageReferenceResponse { return v.ImageReference }).(ImageReferenceResponsePtrOutput)
}

// Specifies information about the operating system disk used by the virtual machines in the scale set. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
func (o VirtualMachineScaleSetStorageProfileResponseOutput) OsDisk() VirtualMachineScaleSetOSDiskResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetStorageProfileResponse) *VirtualMachineScaleSetOSDiskResponse {
		return v.OsDisk
	}).(VirtualMachineScaleSetOSDiskResponsePtrOutput)
}

type VirtualMachineScaleSetStorageProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetStorageProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetStorageProfileResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetStorageProfileResponsePtrOutput) ToVirtualMachineScaleSetStorageProfileResponsePtrOutput() VirtualMachineScaleSetStorageProfileResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetStorageProfileResponsePtrOutput) ToVirtualMachineScaleSetStorageProfileResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetStorageProfileResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetStorageProfileResponsePtrOutput) Elem() VirtualMachineScaleSetStorageProfileResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetStorageProfileResponse) VirtualMachineScaleSetStorageProfileResponse {
		return *v
	}).(VirtualMachineScaleSetStorageProfileResponseOutput)
}

// Specifies the parameters that are used to add data disks to the virtual machines in the scale set. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
func (o VirtualMachineScaleSetStorageProfileResponsePtrOutput) DataDisks() VirtualMachineScaleSetDataDiskResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetStorageProfileResponse) []VirtualMachineScaleSetDataDiskResponse {
		if v == nil {
			return nil
		}
		return v.DataDisks
	}).(VirtualMachineScaleSetDataDiskResponseArrayOutput)
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
func (o VirtualMachineScaleSetStorageProfileResponsePtrOutput) ImageReference() ImageReferenceResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetStorageProfileResponse) *ImageReferenceResponse {
		if v == nil {
			return nil
		}
		return v.ImageReference
	}).(ImageReferenceResponsePtrOutput)
}

// Specifies information about the operating system disk used by the virtual machines in the scale set. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
func (o VirtualMachineScaleSetStorageProfileResponsePtrOutput) OsDisk() VirtualMachineScaleSetOSDiskResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetStorageProfileResponse) *VirtualMachineScaleSetOSDiskResponse {
		if v == nil {
			return nil
		}
		return v.OsDisk
	}).(VirtualMachineScaleSetOSDiskResponsePtrOutput)
}

// The instance view of a virtual machine scale set VM.
type VirtualMachineScaleSetVMInstanceViewResponse struct {
	// Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. <br><br>Minimum api-version: 2020-06-01.
	AssignedHost string `pulumi:"assignedHost"`
	// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor.
	BootDiagnostics *BootDiagnosticsInstanceViewResponse `pulumi:"bootDiagnostics"`
	// The disks information.
	Disks []DiskInstanceViewResponse `pulumi:"disks"`
	// The extensions information.
	Extensions []VirtualMachineExtensionInstanceViewResponse `pulumi:"extensions"`
	// The Maintenance Operation status on the virtual machine.
	MaintenanceRedeployStatus *MaintenanceRedeployStatusResponse `pulumi:"maintenanceRedeployStatus"`
	// The placement group in which the VM is running. If the VM is deallocated it will not have a placementGroupId.
	PlacementGroupId *string `pulumi:"placementGroupId"`
	// The Fault Domain count.
	PlatformFaultDomain *int `pulumi:"platformFaultDomain"`
	// The Update Domain count.
	PlatformUpdateDomain *int `pulumi:"platformUpdateDomain"`
	// The Remote desktop certificate thumbprint.
	RdpThumbPrint *string `pulumi:"rdpThumbPrint"`
	// The resource status information.
	Statuses []InstanceViewStatusResponse `pulumi:"statuses"`
	// The VM Agent running on the virtual machine.
	VmAgent *VirtualMachineAgentInstanceViewResponse `pulumi:"vmAgent"`
	// The health status for the VM.
	VmHealth VirtualMachineHealthStatusResponse `pulumi:"vmHealth"`
}

// The instance view of a virtual machine scale set VM.
type VirtualMachineScaleSetVMInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetVMInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetVMInstanceViewResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) ToVirtualMachineScaleSetVMInstanceViewResponseOutput() VirtualMachineScaleSetVMInstanceViewResponseOutput {
	return o
}

func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) ToVirtualMachineScaleSetVMInstanceViewResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMInstanceViewResponseOutput {
	return o
}

func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) ToVirtualMachineScaleSetVMInstanceViewResponsePtrOutput() VirtualMachineScaleSetVMInstanceViewResponsePtrOutput {
	return o.ToVirtualMachineScaleSetVMInstanceViewResponsePtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) ToVirtualMachineScaleSetVMInstanceViewResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMInstanceViewResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) *VirtualMachineScaleSetVMInstanceViewResponse {
		return &v
	}).(VirtualMachineScaleSetVMInstanceViewResponsePtrOutput)
}

// Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. <br><br>Minimum api-version: 2020-06-01.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) AssignedHost() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) string { return v.AssignedHost }).(pulumi.StringOutput)
}

// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) BootDiagnostics() BootDiagnosticsInstanceViewResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) *BootDiagnosticsInstanceViewResponse {
		return v.BootDiagnostics
	}).(BootDiagnosticsInstanceViewResponsePtrOutput)
}

// The disks information.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) Disks() DiskInstanceViewResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) []DiskInstanceViewResponse { return v.Disks }).(DiskInstanceViewResponseArrayOutput)
}

// The extensions information.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) Extensions() VirtualMachineExtensionInstanceViewResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) []VirtualMachineExtensionInstanceViewResponse {
		return v.Extensions
	}).(VirtualMachineExtensionInstanceViewResponseArrayOutput)
}

// The Maintenance Operation status on the virtual machine.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) MaintenanceRedeployStatus() MaintenanceRedeployStatusResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) *MaintenanceRedeployStatusResponse {
		return v.MaintenanceRedeployStatus
	}).(MaintenanceRedeployStatusResponsePtrOutput)
}

// The placement group in which the VM is running. If the VM is deallocated it will not have a placementGroupId.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) PlacementGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) *string { return v.PlacementGroupId }).(pulumi.StringPtrOutput)
}

// The Fault Domain count.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) PlatformFaultDomain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) *int { return v.PlatformFaultDomain }).(pulumi.IntPtrOutput)
}

// The Update Domain count.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) PlatformUpdateDomain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) *int { return v.PlatformUpdateDomain }).(pulumi.IntPtrOutput)
}

// The Remote desktop certificate thumbprint.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) RdpThumbPrint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) *string { return v.RdpThumbPrint }).(pulumi.StringPtrOutput)
}

// The resource status information.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) []InstanceViewStatusResponse { return v.Statuses }).(InstanceViewStatusResponseArrayOutput)
}

// The VM Agent running on the virtual machine.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) VmAgent() VirtualMachineAgentInstanceViewResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) *VirtualMachineAgentInstanceViewResponse {
		return v.VmAgent
	}).(VirtualMachineAgentInstanceViewResponsePtrOutput)
}

// The health status for the VM.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) VmHealth() VirtualMachineHealthStatusResponseOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) VirtualMachineHealthStatusResponse {
		return v.VmHealth
	}).(VirtualMachineHealthStatusResponseOutput)
}

type VirtualMachineScaleSetVMInstanceViewResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetVMInstanceViewResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetVMInstanceViewResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetVMInstanceViewResponsePtrOutput) ToVirtualMachineScaleSetVMInstanceViewResponsePtrOutput() VirtualMachineScaleSetVMInstanceViewResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetVMInstanceViewResponsePtrOutput) ToVirtualMachineScaleSetVMInstanceViewResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMInstanceViewResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetVMInstanceViewResponsePtrOutput) Elem() VirtualMachineScaleSetVMInstanceViewResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMInstanceViewResponse) VirtualMachineScaleSetVMInstanceViewResponse {
		return *v
	}).(VirtualMachineScaleSetVMInstanceViewResponseOutput)
}

// Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. <br><br>Minimum api-version: 2020-06-01.
func (o VirtualMachineScaleSetVMInstanceViewResponsePtrOutput) AssignedHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMInstanceViewResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AssignedHost
	}).(pulumi.StringPtrOutput)
}

// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor.
func (o VirtualMachineScaleSetVMInstanceViewResponsePtrOutput) BootDiagnostics() BootDiagnosticsInstanceViewResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMInstanceViewResponse) *BootDiagnosticsInstanceViewResponse {
		if v == nil {
			return nil
		}
		return v.BootDiagnostics
	}).(BootDiagnosticsInstanceViewResponsePtrOutput)
}

// The disks information.
func (o VirtualMachineScaleSetVMInstanceViewResponsePtrOutput) Disks() DiskInstanceViewResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMInstanceViewResponse) []DiskInstanceViewResponse {
		if v == nil {
			return nil
		}
		return v.Disks
	}).(DiskInstanceViewResponseArrayOutput)
}

// The extensions information.
func (o VirtualMachineScaleSetVMInstanceViewResponsePtrOutput) Extensions() VirtualMachineExtensionInstanceViewResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMInstanceViewResponse) []VirtualMachineExtensionInstanceViewResponse {
		if v == nil {
			return nil
		}
		return v.Extensions
	}).(VirtualMachineExtensionInstanceViewResponseArrayOutput)
}

// The Maintenance Operation status on the virtual machine.
func (o VirtualMachineScaleSetVMInstanceViewResponsePtrOutput) MaintenanceRedeployStatus() MaintenanceRedeployStatusResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMInstanceViewResponse) *MaintenanceRedeployStatusResponse {
		if v == nil {
			return nil
		}
		return v.MaintenanceRedeployStatus
	}).(MaintenanceRedeployStatusResponsePtrOutput)
}

// The placement group in which the VM is running. If the VM is deallocated it will not have a placementGroupId.
func (o VirtualMachineScaleSetVMInstanceViewResponsePtrOutput) PlacementGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMInstanceViewResponse) *string {
		if v == nil {
			return nil
		}
		return v.PlacementGroupId
	}).(pulumi.StringPtrOutput)
}

// The Fault Domain count.
func (o VirtualMachineScaleSetVMInstanceViewResponsePtrOutput) PlatformFaultDomain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMInstanceViewResponse) *int {
		if v == nil {
			return nil
		}
		return v.PlatformFaultDomain
	}).(pulumi.IntPtrOutput)
}

// The Update Domain count.
func (o VirtualMachineScaleSetVMInstanceViewResponsePtrOutput) PlatformUpdateDomain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMInstanceViewResponse) *int {
		if v == nil {
			return nil
		}
		return v.PlatformUpdateDomain
	}).(pulumi.IntPtrOutput)
}

// The Remote desktop certificate thumbprint.
func (o VirtualMachineScaleSetVMInstanceViewResponsePtrOutput) RdpThumbPrint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMInstanceViewResponse) *string {
		if v == nil {
			return nil
		}
		return v.RdpThumbPrint
	}).(pulumi.StringPtrOutput)
}

// The resource status information.
func (o VirtualMachineScaleSetVMInstanceViewResponsePtrOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMInstanceViewResponse) []InstanceViewStatusResponse {
		if v == nil {
			return nil
		}
		return v.Statuses
	}).(InstanceViewStatusResponseArrayOutput)
}

// The VM Agent running on the virtual machine.
func (o VirtualMachineScaleSetVMInstanceViewResponsePtrOutput) VmAgent() VirtualMachineAgentInstanceViewResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMInstanceViewResponse) *VirtualMachineAgentInstanceViewResponse {
		if v == nil {
			return nil
		}
		return v.VmAgent
	}).(VirtualMachineAgentInstanceViewResponsePtrOutput)
}

// The health status for the VM.
func (o VirtualMachineScaleSetVMInstanceViewResponsePtrOutput) VmHealth() VirtualMachineHealthStatusResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMInstanceViewResponse) *VirtualMachineHealthStatusResponse {
		if v == nil {
			return nil
		}
		return &v.VmHealth
	}).(VirtualMachineHealthStatusResponsePtrOutput)
}

// Describes a virtual machine scale set VM network profile.
type VirtualMachineScaleSetVMNetworkProfileConfiguration struct {
	// The list of network configurations.
	NetworkInterfaceConfigurations []VirtualMachineScaleSetNetworkConfiguration `pulumi:"networkInterfaceConfigurations"`
}

// VirtualMachineScaleSetVMNetworkProfileConfigurationInput is an input type that accepts VirtualMachineScaleSetVMNetworkProfileConfigurationArgs and VirtualMachineScaleSetVMNetworkProfileConfigurationOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetVMNetworkProfileConfigurationInput` via:
//
//          VirtualMachineScaleSetVMNetworkProfileConfigurationArgs{...}
type VirtualMachineScaleSetVMNetworkProfileConfigurationInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetVMNetworkProfileConfigurationOutput() VirtualMachineScaleSetVMNetworkProfileConfigurationOutput
	ToVirtualMachineScaleSetVMNetworkProfileConfigurationOutputWithContext(context.Context) VirtualMachineScaleSetVMNetworkProfileConfigurationOutput
}

// Describes a virtual machine scale set VM network profile.
type VirtualMachineScaleSetVMNetworkProfileConfigurationArgs struct {
	// The list of network configurations.
	NetworkInterfaceConfigurations VirtualMachineScaleSetNetworkConfigurationArrayInput `pulumi:"networkInterfaceConfigurations"`
}

func (VirtualMachineScaleSetVMNetworkProfileConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetVMNetworkProfileConfiguration)(nil)).Elem()
}

func (i VirtualMachineScaleSetVMNetworkProfileConfigurationArgs) ToVirtualMachineScaleSetVMNetworkProfileConfigurationOutput() VirtualMachineScaleSetVMNetworkProfileConfigurationOutput {
	return i.ToVirtualMachineScaleSetVMNetworkProfileConfigurationOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetVMNetworkProfileConfigurationArgs) ToVirtualMachineScaleSetVMNetworkProfileConfigurationOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMNetworkProfileConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetVMNetworkProfileConfigurationOutput)
}

func (i VirtualMachineScaleSetVMNetworkProfileConfigurationArgs) ToVirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput() VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput {
	return i.ToVirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetVMNetworkProfileConfigurationArgs) ToVirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetVMNetworkProfileConfigurationOutput).ToVirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetVMNetworkProfileConfigurationPtrInput is an input type that accepts VirtualMachineScaleSetVMNetworkProfileConfigurationArgs, VirtualMachineScaleSetVMNetworkProfileConfigurationPtr and VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetVMNetworkProfileConfigurationPtrInput` via:
//
//          VirtualMachineScaleSetVMNetworkProfileConfigurationArgs{...}
//
//  or:
//
//          nil
type VirtualMachineScaleSetVMNetworkProfileConfigurationPtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput() VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput
	ToVirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutputWithContext(context.Context) VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput
}

type virtualMachineScaleSetVMNetworkProfileConfigurationPtrType VirtualMachineScaleSetVMNetworkProfileConfigurationArgs

func VirtualMachineScaleSetVMNetworkProfileConfigurationPtr(v *VirtualMachineScaleSetVMNetworkProfileConfigurationArgs) VirtualMachineScaleSetVMNetworkProfileConfigurationPtrInput {
	return (*virtualMachineScaleSetVMNetworkProfileConfigurationPtrType)(v)
}

func (*virtualMachineScaleSetVMNetworkProfileConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetVMNetworkProfileConfiguration)(nil)).Elem()
}

func (i *virtualMachineScaleSetVMNetworkProfileConfigurationPtrType) ToVirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput() VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput {
	return i.ToVirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetVMNetworkProfileConfigurationPtrType) ToVirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput)
}

// Describes a virtual machine scale set VM network profile.
type VirtualMachineScaleSetVMNetworkProfileConfigurationResponse struct {
	// The list of network configurations.
	NetworkInterfaceConfigurations []VirtualMachineScaleSetNetworkConfigurationResponse `pulumi:"networkInterfaceConfigurations"`
}

// Describes a virtual machine scale set VM network profile.
type VirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetVMNetworkProfileConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput) ToVirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput() VirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput {
	return o
}

func (o VirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput) ToVirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput {
	return o
}

func (o VirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput) ToVirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput() VirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput {
	return o.ToVirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput) ToVirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMNetworkProfileConfigurationResponse) *VirtualMachineScaleSetVMNetworkProfileConfigurationResponse {
		return &v
	}).(VirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput)
}

// The list of network configurations.
func (o VirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput) NetworkInterfaceConfigurations() VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMNetworkProfileConfigurationResponse) []VirtualMachineScaleSetNetworkConfigurationResponse {
		return v.NetworkInterfaceConfigurations
	}).(VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput)
}

type VirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetVMNetworkProfileConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput) ToVirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput() VirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput) ToVirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput) Elem() VirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMNetworkProfileConfigurationResponse) VirtualMachineScaleSetVMNetworkProfileConfigurationResponse {
		return *v
	}).(VirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput)
}

// The list of network configurations.
func (o VirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput) NetworkInterfaceConfigurations() VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMNetworkProfileConfigurationResponse) []VirtualMachineScaleSetNetworkConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.NetworkInterfaceConfigurations
	}).(VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput)
}

// Describes a virtual machine scale set virtual machine profile.
type VirtualMachineScaleSetVMProfile struct {
	// Specifies the billing related details of a Azure Spot VMSS. <br><br>Minimum api-version: 2019-03-01.
	BillingProfile *BillingProfile `pulumi:"billingProfile"`
	// Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15.
	DiagnosticsProfile *DiagnosticsProfile `pulumi:"diagnosticsProfile"`
	// Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. <br><br>For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01. <br><br>For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
	EvictionPolicy *string `pulumi:"evictionPolicy"`
	// Specifies a collection of settings for extensions installed on virtual machines in the scale set.
	ExtensionProfile *VirtualMachineScaleSetExtensionProfile `pulumi:"extensionProfile"`
	// Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system. <br><br> Possible values are: <br><br> Windows_Client <br><br> Windows_Server <br><br> If this element is included in a request for an update, the value must match the initial value. This value cannot be updated. <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> Minimum api-version: 2015-06-15
	LicenseType *string `pulumi:"licenseType"`
	// Specifies properties of the network interfaces of the virtual machines in the scale set.
	NetworkProfile *VirtualMachineScaleSetNetworkProfile `pulumi:"networkProfile"`
	// Specifies the operating system settings for the virtual machines in the scale set.
	OsProfile *VirtualMachineScaleSetOSProfile `pulumi:"osProfile"`
	// Specifies the priority for the virtual machines in the scale set. <br><br>Minimum api-version: 2017-10-30-preview
	Priority *string `pulumi:"priority"`
	// Specifies Scheduled Event related configurations.
	ScheduledEventsProfile *ScheduledEventsProfile `pulumi:"scheduledEventsProfile"`
	// Specifies the Security related profile settings for the virtual machines in the scale set.
	SecurityProfile *SecurityProfile `pulumi:"securityProfile"`
	// Specifies the storage settings for the virtual machine disks.
	StorageProfile *VirtualMachineScaleSetStorageProfile `pulumi:"storageProfile"`
}

// VirtualMachineScaleSetVMProfileInput is an input type that accepts VirtualMachineScaleSetVMProfileArgs and VirtualMachineScaleSetVMProfileOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetVMProfileInput` via:
//
//          VirtualMachineScaleSetVMProfileArgs{...}
type VirtualMachineScaleSetVMProfileInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetVMProfileOutput() VirtualMachineScaleSetVMProfileOutput
	ToVirtualMachineScaleSetVMProfileOutputWithContext(context.Context) VirtualMachineScaleSetVMProfileOutput
}

// Describes a virtual machine scale set virtual machine profile.
type VirtualMachineScaleSetVMProfileArgs struct {
	// Specifies the billing related details of a Azure Spot VMSS. <br><br>Minimum api-version: 2019-03-01.
	BillingProfile BillingProfilePtrInput `pulumi:"billingProfile"`
	// Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15.
	DiagnosticsProfile DiagnosticsProfilePtrInput `pulumi:"diagnosticsProfile"`
	// Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. <br><br>For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01. <br><br>For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
	EvictionPolicy pulumi.StringPtrInput `pulumi:"evictionPolicy"`
	// Specifies a collection of settings for extensions installed on virtual machines in the scale set.
	ExtensionProfile VirtualMachineScaleSetExtensionProfilePtrInput `pulumi:"extensionProfile"`
	// Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system. <br><br> Possible values are: <br><br> Windows_Client <br><br> Windows_Server <br><br> If this element is included in a request for an update, the value must match the initial value. This value cannot be updated. <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> Minimum api-version: 2015-06-15
	LicenseType pulumi.StringPtrInput `pulumi:"licenseType"`
	// Specifies properties of the network interfaces of the virtual machines in the scale set.
	NetworkProfile VirtualMachineScaleSetNetworkProfilePtrInput `pulumi:"networkProfile"`
	// Specifies the operating system settings for the virtual machines in the scale set.
	OsProfile VirtualMachineScaleSetOSProfilePtrInput `pulumi:"osProfile"`
	// Specifies the priority for the virtual machines in the scale set. <br><br>Minimum api-version: 2017-10-30-preview
	Priority pulumi.StringPtrInput `pulumi:"priority"`
	// Specifies Scheduled Event related configurations.
	ScheduledEventsProfile ScheduledEventsProfilePtrInput `pulumi:"scheduledEventsProfile"`
	// Specifies the Security related profile settings for the virtual machines in the scale set.
	SecurityProfile SecurityProfilePtrInput `pulumi:"securityProfile"`
	// Specifies the storage settings for the virtual machine disks.
	StorageProfile VirtualMachineScaleSetStorageProfilePtrInput `pulumi:"storageProfile"`
}

func (VirtualMachineScaleSetVMProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetVMProfile)(nil)).Elem()
}

func (i VirtualMachineScaleSetVMProfileArgs) ToVirtualMachineScaleSetVMProfileOutput() VirtualMachineScaleSetVMProfileOutput {
	return i.ToVirtualMachineScaleSetVMProfileOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetVMProfileArgs) ToVirtualMachineScaleSetVMProfileOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetVMProfileOutput)
}

func (i VirtualMachineScaleSetVMProfileArgs) ToVirtualMachineScaleSetVMProfilePtrOutput() VirtualMachineScaleSetVMProfilePtrOutput {
	return i.ToVirtualMachineScaleSetVMProfilePtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetVMProfileArgs) ToVirtualMachineScaleSetVMProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetVMProfileOutput).ToVirtualMachineScaleSetVMProfilePtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetVMProfilePtrInput is an input type that accepts VirtualMachineScaleSetVMProfileArgs, VirtualMachineScaleSetVMProfilePtr and VirtualMachineScaleSetVMProfilePtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetVMProfilePtrInput` via:
//
//          VirtualMachineScaleSetVMProfileArgs{...}
//
//  or:
//
//          nil
type VirtualMachineScaleSetVMProfilePtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetVMProfilePtrOutput() VirtualMachineScaleSetVMProfilePtrOutput
	ToVirtualMachineScaleSetVMProfilePtrOutputWithContext(context.Context) VirtualMachineScaleSetVMProfilePtrOutput
}

type virtualMachineScaleSetVMProfilePtrType VirtualMachineScaleSetVMProfileArgs

func VirtualMachineScaleSetVMProfilePtr(v *VirtualMachineScaleSetVMProfileArgs) VirtualMachineScaleSetVMProfilePtrInput {
	return (*virtualMachineScaleSetVMProfilePtrType)(v)
}

func (*virtualMachineScaleSetVMProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetVMProfile)(nil)).Elem()
}

func (i *virtualMachineScaleSetVMProfilePtrType) ToVirtualMachineScaleSetVMProfilePtrOutput() VirtualMachineScaleSetVMProfilePtrOutput {
	return i.ToVirtualMachineScaleSetVMProfilePtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetVMProfilePtrType) ToVirtualMachineScaleSetVMProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetVMProfilePtrOutput)
}

// Describes a virtual machine scale set virtual machine profile.
type VirtualMachineScaleSetVMProfileResponse struct {
	// Specifies the billing related details of a Azure Spot VMSS. <br><br>Minimum api-version: 2019-03-01.
	BillingProfile *BillingProfileResponse `pulumi:"billingProfile"`
	// Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15.
	DiagnosticsProfile *DiagnosticsProfileResponse `pulumi:"diagnosticsProfile"`
	// Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. <br><br>For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01. <br><br>For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
	EvictionPolicy *string `pulumi:"evictionPolicy"`
	// Specifies a collection of settings for extensions installed on virtual machines in the scale set.
	ExtensionProfile *VirtualMachineScaleSetExtensionProfileResponse `pulumi:"extensionProfile"`
	// Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system. <br><br> Possible values are: <br><br> Windows_Client <br><br> Windows_Server <br><br> If this element is included in a request for an update, the value must match the initial value. This value cannot be updated. <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> Minimum api-version: 2015-06-15
	LicenseType *string `pulumi:"licenseType"`
	// Specifies properties of the network interfaces of the virtual machines in the scale set.
	NetworkProfile *VirtualMachineScaleSetNetworkProfileResponse `pulumi:"networkProfile"`
	// Specifies the operating system settings for the virtual machines in the scale set.
	OsProfile *VirtualMachineScaleSetOSProfileResponse `pulumi:"osProfile"`
	// Specifies the priority for the virtual machines in the scale set. <br><br>Minimum api-version: 2017-10-30-preview
	Priority *string `pulumi:"priority"`
	// Specifies Scheduled Event related configurations.
	ScheduledEventsProfile *ScheduledEventsProfileResponse `pulumi:"scheduledEventsProfile"`
	// Specifies the Security related profile settings for the virtual machines in the scale set.
	SecurityProfile *SecurityProfileResponse `pulumi:"securityProfile"`
	// Specifies the storage settings for the virtual machine disks.
	StorageProfile *VirtualMachineScaleSetStorageProfileResponse `pulumi:"storageProfile"`
}

// Describes a virtual machine scale set virtual machine profile.
type VirtualMachineScaleSetVMProfileResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetVMProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetVMProfileResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetVMProfileResponseOutput) ToVirtualMachineScaleSetVMProfileResponseOutput() VirtualMachineScaleSetVMProfileResponseOutput {
	return o
}

func (o VirtualMachineScaleSetVMProfileResponseOutput) ToVirtualMachineScaleSetVMProfileResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProfileResponseOutput {
	return o
}

func (o VirtualMachineScaleSetVMProfileResponseOutput) ToVirtualMachineScaleSetVMProfileResponsePtrOutput() VirtualMachineScaleSetVMProfileResponsePtrOutput {
	return o.ToVirtualMachineScaleSetVMProfileResponsePtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetVMProfileResponseOutput) ToVirtualMachineScaleSetVMProfileResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *VirtualMachineScaleSetVMProfileResponse {
		return &v
	}).(VirtualMachineScaleSetVMProfileResponsePtrOutput)
}

// Specifies the billing related details of a Azure Spot VMSS. <br><br>Minimum api-version: 2019-03-01.
func (o VirtualMachineScaleSetVMProfileResponseOutput) BillingProfile() BillingProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *BillingProfileResponse { return v.BillingProfile }).(BillingProfileResponsePtrOutput)
}

// Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15.
func (o VirtualMachineScaleSetVMProfileResponseOutput) DiagnosticsProfile() DiagnosticsProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *DiagnosticsProfileResponse {
		return v.DiagnosticsProfile
	}).(DiagnosticsProfileResponsePtrOutput)
}

// Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. <br><br>For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01. <br><br>For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
func (o VirtualMachineScaleSetVMProfileResponseOutput) EvictionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *string { return v.EvictionPolicy }).(pulumi.StringPtrOutput)
}

// Specifies a collection of settings for extensions installed on virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfileResponseOutput) ExtensionProfile() VirtualMachineScaleSetExtensionProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *VirtualMachineScaleSetExtensionProfileResponse {
		return v.ExtensionProfile
	}).(VirtualMachineScaleSetExtensionProfileResponsePtrOutput)
}

// Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system. <br><br> Possible values are: <br><br> Windows_Client <br><br> Windows_Server <br><br> If this element is included in a request for an update, the value must match the initial value. This value cannot be updated. <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> Minimum api-version: 2015-06-15
func (o VirtualMachineScaleSetVMProfileResponseOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *string { return v.LicenseType }).(pulumi.StringPtrOutput)
}

// Specifies properties of the network interfaces of the virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfileResponseOutput) NetworkProfile() VirtualMachineScaleSetNetworkProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *VirtualMachineScaleSetNetworkProfileResponse {
		return v.NetworkProfile
	}).(VirtualMachineScaleSetNetworkProfileResponsePtrOutput)
}

// Specifies the operating system settings for the virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfileResponseOutput) OsProfile() VirtualMachineScaleSetOSProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *VirtualMachineScaleSetOSProfileResponse {
		return v.OsProfile
	}).(VirtualMachineScaleSetOSProfileResponsePtrOutput)
}

// Specifies the priority for the virtual machines in the scale set. <br><br>Minimum api-version: 2017-10-30-preview
func (o VirtualMachineScaleSetVMProfileResponseOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

// Specifies Scheduled Event related configurations.
func (o VirtualMachineScaleSetVMProfileResponseOutput) ScheduledEventsProfile() ScheduledEventsProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *ScheduledEventsProfileResponse {
		return v.ScheduledEventsProfile
	}).(ScheduledEventsProfileResponsePtrOutput)
}

// Specifies the Security related profile settings for the virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfileResponseOutput) SecurityProfile() SecurityProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *SecurityProfileResponse { return v.SecurityProfile }).(SecurityProfileResponsePtrOutput)
}

// Specifies the storage settings for the virtual machine disks.
func (o VirtualMachineScaleSetVMProfileResponseOutput) StorageProfile() VirtualMachineScaleSetStorageProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *VirtualMachineScaleSetStorageProfileResponse {
		return v.StorageProfile
	}).(VirtualMachineScaleSetStorageProfileResponsePtrOutput)
}

type VirtualMachineScaleSetVMProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetVMProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetVMProfileResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) ToVirtualMachineScaleSetVMProfileResponsePtrOutput() VirtualMachineScaleSetVMProfileResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) ToVirtualMachineScaleSetVMProfileResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProfileResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) Elem() VirtualMachineScaleSetVMProfileResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) VirtualMachineScaleSetVMProfileResponse { return *v }).(VirtualMachineScaleSetVMProfileResponseOutput)
}

// Specifies the billing related details of a Azure Spot VMSS. <br><br>Minimum api-version: 2019-03-01.
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) BillingProfile() BillingProfileResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *BillingProfileResponse {
		if v == nil {
			return nil
		}
		return v.BillingProfile
	}).(BillingProfileResponsePtrOutput)
}

// Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15.
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) DiagnosticsProfile() DiagnosticsProfileResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *DiagnosticsProfileResponse {
		if v == nil {
			return nil
		}
		return v.DiagnosticsProfile
	}).(DiagnosticsProfileResponsePtrOutput)
}

// Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. <br><br>For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01. <br><br>For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) EvictionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.EvictionPolicy
	}).(pulumi.StringPtrOutput)
}

// Specifies a collection of settings for extensions installed on virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) ExtensionProfile() VirtualMachineScaleSetExtensionProfileResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *VirtualMachineScaleSetExtensionProfileResponse {
		if v == nil {
			return nil
		}
		return v.ExtensionProfile
	}).(VirtualMachineScaleSetExtensionProfileResponsePtrOutput)
}

// Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system. <br><br> Possible values are: <br><br> Windows_Client <br><br> Windows_Server <br><br> If this element is included in a request for an update, the value must match the initial value. This value cannot be updated. <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) <br><br> Minimum api-version: 2015-06-15
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.LicenseType
	}).(pulumi.StringPtrOutput)
}

// Specifies properties of the network interfaces of the virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) NetworkProfile() VirtualMachineScaleSetNetworkProfileResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *VirtualMachineScaleSetNetworkProfileResponse {
		if v == nil {
			return nil
		}
		return v.NetworkProfile
	}).(VirtualMachineScaleSetNetworkProfileResponsePtrOutput)
}

// Specifies the operating system settings for the virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) OsProfile() VirtualMachineScaleSetOSProfileResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *VirtualMachineScaleSetOSProfileResponse {
		if v == nil {
			return nil
		}
		return v.OsProfile
	}).(VirtualMachineScaleSetOSProfileResponsePtrOutput)
}

// Specifies the priority for the virtual machines in the scale set. <br><br>Minimum api-version: 2017-10-30-preview
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.StringPtrOutput)
}

// Specifies Scheduled Event related configurations.
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) ScheduledEventsProfile() ScheduledEventsProfileResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *ScheduledEventsProfileResponse {
		if v == nil {
			return nil
		}
		return v.ScheduledEventsProfile
	}).(ScheduledEventsProfileResponsePtrOutput)
}

// Specifies the Security related profile settings for the virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) SecurityProfile() SecurityProfileResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *SecurityProfileResponse {
		if v == nil {
			return nil
		}
		return v.SecurityProfile
	}).(SecurityProfileResponsePtrOutput)
}

// Specifies the storage settings for the virtual machine disks.
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) StorageProfile() VirtualMachineScaleSetStorageProfileResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *VirtualMachineScaleSetStorageProfileResponse {
		if v == nil {
			return nil
		}
		return v.StorageProfile
	}).(VirtualMachineScaleSetStorageProfileResponsePtrOutput)
}

// The protection policy of a virtual machine scale set VM.
type VirtualMachineScaleSetVMProtectionPolicy struct {
	// Indicates that the virtual machine scale set VM shouldn't be considered for deletion during a scale-in operation.
	ProtectFromScaleIn *bool `pulumi:"protectFromScaleIn"`
	// Indicates that model updates or actions (including scale-in) initiated on the virtual machine scale set should not be applied to the virtual machine scale set VM.
	ProtectFromScaleSetActions *bool `pulumi:"protectFromScaleSetActions"`
}

// VirtualMachineScaleSetVMProtectionPolicyInput is an input type that accepts VirtualMachineScaleSetVMProtectionPolicyArgs and VirtualMachineScaleSetVMProtectionPolicyOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetVMProtectionPolicyInput` via:
//
//          VirtualMachineScaleSetVMProtectionPolicyArgs{...}
type VirtualMachineScaleSetVMProtectionPolicyInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetVMProtectionPolicyOutput() VirtualMachineScaleSetVMProtectionPolicyOutput
	ToVirtualMachineScaleSetVMProtectionPolicyOutputWithContext(context.Context) VirtualMachineScaleSetVMProtectionPolicyOutput
}

// The protection policy of a virtual machine scale set VM.
type VirtualMachineScaleSetVMProtectionPolicyArgs struct {
	// Indicates that the virtual machine scale set VM shouldn't be considered for deletion during a scale-in operation.
	ProtectFromScaleIn pulumi.BoolPtrInput `pulumi:"protectFromScaleIn"`
	// Indicates that model updates or actions (including scale-in) initiated on the virtual machine scale set should not be applied to the virtual machine scale set VM.
	ProtectFromScaleSetActions pulumi.BoolPtrInput `pulumi:"protectFromScaleSetActions"`
}

func (VirtualMachineScaleSetVMProtectionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetVMProtectionPolicy)(nil)).Elem()
}

func (i VirtualMachineScaleSetVMProtectionPolicyArgs) ToVirtualMachineScaleSetVMProtectionPolicyOutput() VirtualMachineScaleSetVMProtectionPolicyOutput {
	return i.ToVirtualMachineScaleSetVMProtectionPolicyOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetVMProtectionPolicyArgs) ToVirtualMachineScaleSetVMProtectionPolicyOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProtectionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetVMProtectionPolicyOutput)
}

func (i VirtualMachineScaleSetVMProtectionPolicyArgs) ToVirtualMachineScaleSetVMProtectionPolicyPtrOutput() VirtualMachineScaleSetVMProtectionPolicyPtrOutput {
	return i.ToVirtualMachineScaleSetVMProtectionPolicyPtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetVMProtectionPolicyArgs) ToVirtualMachineScaleSetVMProtectionPolicyPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProtectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetVMProtectionPolicyOutput).ToVirtualMachineScaleSetVMProtectionPolicyPtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetVMProtectionPolicyPtrInput is an input type that accepts VirtualMachineScaleSetVMProtectionPolicyArgs, VirtualMachineScaleSetVMProtectionPolicyPtr and VirtualMachineScaleSetVMProtectionPolicyPtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetVMProtectionPolicyPtrInput` via:
//
//          VirtualMachineScaleSetVMProtectionPolicyArgs{...}
//
//  or:
//
//          nil
type VirtualMachineScaleSetVMProtectionPolicyPtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetVMProtectionPolicyPtrOutput() VirtualMachineScaleSetVMProtectionPolicyPtrOutput
	ToVirtualMachineScaleSetVMProtectionPolicyPtrOutputWithContext(context.Context) VirtualMachineScaleSetVMProtectionPolicyPtrOutput
}

type virtualMachineScaleSetVMProtectionPolicyPtrType VirtualMachineScaleSetVMProtectionPolicyArgs

func VirtualMachineScaleSetVMProtectionPolicyPtr(v *VirtualMachineScaleSetVMProtectionPolicyArgs) VirtualMachineScaleSetVMProtectionPolicyPtrInput {
	return (*virtualMachineScaleSetVMProtectionPolicyPtrType)(v)
}

func (*virtualMachineScaleSetVMProtectionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetVMProtectionPolicy)(nil)).Elem()
}

func (i *virtualMachineScaleSetVMProtectionPolicyPtrType) ToVirtualMachineScaleSetVMProtectionPolicyPtrOutput() VirtualMachineScaleSetVMProtectionPolicyPtrOutput {
	return i.ToVirtualMachineScaleSetVMProtectionPolicyPtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetVMProtectionPolicyPtrType) ToVirtualMachineScaleSetVMProtectionPolicyPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProtectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetVMProtectionPolicyPtrOutput)
}

// The protection policy of a virtual machine scale set VM.
type VirtualMachineScaleSetVMProtectionPolicyResponse struct {
	// Indicates that the virtual machine scale set VM shouldn't be considered for deletion during a scale-in operation.
	ProtectFromScaleIn *bool `pulumi:"protectFromScaleIn"`
	// Indicates that model updates or actions (including scale-in) initiated on the virtual machine scale set should not be applied to the virtual machine scale set VM.
	ProtectFromScaleSetActions *bool `pulumi:"protectFromScaleSetActions"`
}

// The protection policy of a virtual machine scale set VM.
type VirtualMachineScaleSetVMProtectionPolicyResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetVMProtectionPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetVMProtectionPolicyResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetVMProtectionPolicyResponseOutput) ToVirtualMachineScaleSetVMProtectionPolicyResponseOutput() VirtualMachineScaleSetVMProtectionPolicyResponseOutput {
	return o
}

func (o VirtualMachineScaleSetVMProtectionPolicyResponseOutput) ToVirtualMachineScaleSetVMProtectionPolicyResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProtectionPolicyResponseOutput {
	return o
}

func (o VirtualMachineScaleSetVMProtectionPolicyResponseOutput) ToVirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput() VirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput {
	return o.ToVirtualMachineScaleSetVMProtectionPolicyResponsePtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetVMProtectionPolicyResponseOutput) ToVirtualMachineScaleSetVMProtectionPolicyResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProtectionPolicyResponse) *VirtualMachineScaleSetVMProtectionPolicyResponse {
		return &v
	}).(VirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput)
}

// Indicates that the virtual machine scale set VM shouldn't be considered for deletion during a scale-in operation.
func (o VirtualMachineScaleSetVMProtectionPolicyResponseOutput) ProtectFromScaleIn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProtectionPolicyResponse) *bool { return v.ProtectFromScaleIn }).(pulumi.BoolPtrOutput)
}

// Indicates that model updates or actions (including scale-in) initiated on the virtual machine scale set should not be applied to the virtual machine scale set VM.
func (o VirtualMachineScaleSetVMProtectionPolicyResponseOutput) ProtectFromScaleSetActions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProtectionPolicyResponse) *bool { return v.ProtectFromScaleSetActions }).(pulumi.BoolPtrOutput)
}

type VirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetVMProtectionPolicyResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput) ToVirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput() VirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput) ToVirtualMachineScaleSetVMProtectionPolicyResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput) Elem() VirtualMachineScaleSetVMProtectionPolicyResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProtectionPolicyResponse) VirtualMachineScaleSetVMProtectionPolicyResponse {
		return *v
	}).(VirtualMachineScaleSetVMProtectionPolicyResponseOutput)
}

// Indicates that the virtual machine scale set VM shouldn't be considered for deletion during a scale-in operation.
func (o VirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput) ProtectFromScaleIn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProtectionPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ProtectFromScaleIn
	}).(pulumi.BoolPtrOutput)
}

// Indicates that model updates or actions (including scale-in) initiated on the virtual machine scale set should not be applied to the virtual machine scale set VM.
func (o VirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput) ProtectFromScaleSetActions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProtectionPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ProtectFromScaleSetActions
	}).(pulumi.BoolPtrOutput)
}

// Describes Windows Remote Management configuration of the VM
type WinRMConfiguration struct {
	// The list of Windows Remote Management listeners
	Listeners []WinRMListener `pulumi:"listeners"`
}

// WinRMConfigurationInput is an input type that accepts WinRMConfigurationArgs and WinRMConfigurationOutput values.
// You can construct a concrete instance of `WinRMConfigurationInput` via:
//
//          WinRMConfigurationArgs{...}
type WinRMConfigurationInput interface {
	pulumi.Input

	ToWinRMConfigurationOutput() WinRMConfigurationOutput
	ToWinRMConfigurationOutputWithContext(context.Context) WinRMConfigurationOutput
}

// Describes Windows Remote Management configuration of the VM
type WinRMConfigurationArgs struct {
	// The list of Windows Remote Management listeners
	Listeners WinRMListenerArrayInput `pulumi:"listeners"`
}

func (WinRMConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WinRMConfiguration)(nil)).Elem()
}

func (i WinRMConfigurationArgs) ToWinRMConfigurationOutput() WinRMConfigurationOutput {
	return i.ToWinRMConfigurationOutputWithContext(context.Background())
}

func (i WinRMConfigurationArgs) ToWinRMConfigurationOutputWithContext(ctx context.Context) WinRMConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WinRMConfigurationOutput)
}

func (i WinRMConfigurationArgs) ToWinRMConfigurationPtrOutput() WinRMConfigurationPtrOutput {
	return i.ToWinRMConfigurationPtrOutputWithContext(context.Background())
}

func (i WinRMConfigurationArgs) ToWinRMConfigurationPtrOutputWithContext(ctx context.Context) WinRMConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WinRMConfigurationOutput).ToWinRMConfigurationPtrOutputWithContext(ctx)
}

// WinRMConfigurationPtrInput is an input type that accepts WinRMConfigurationArgs, WinRMConfigurationPtr and WinRMConfigurationPtrOutput values.
// You can construct a concrete instance of `WinRMConfigurationPtrInput` via:
//
//          WinRMConfigurationArgs{...}
//
//  or:
//
//          nil
type WinRMConfigurationPtrInput interface {
	pulumi.Input

	ToWinRMConfigurationPtrOutput() WinRMConfigurationPtrOutput
	ToWinRMConfigurationPtrOutputWithContext(context.Context) WinRMConfigurationPtrOutput
}

type winRMConfigurationPtrType WinRMConfigurationArgs

func WinRMConfigurationPtr(v *WinRMConfigurationArgs) WinRMConfigurationPtrInput {
	return (*winRMConfigurationPtrType)(v)
}

func (*winRMConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WinRMConfiguration)(nil)).Elem()
}

func (i *winRMConfigurationPtrType) ToWinRMConfigurationPtrOutput() WinRMConfigurationPtrOutput {
	return i.ToWinRMConfigurationPtrOutputWithContext(context.Background())
}

func (i *winRMConfigurationPtrType) ToWinRMConfigurationPtrOutputWithContext(ctx context.Context) WinRMConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WinRMConfigurationPtrOutput)
}

// Describes Windows Remote Management configuration of the VM
type WinRMConfigurationResponse struct {
	// The list of Windows Remote Management listeners
	Listeners []WinRMListenerResponse `pulumi:"listeners"`
}

// Describes Windows Remote Management configuration of the VM
type WinRMConfigurationResponseOutput struct{ *pulumi.OutputState }

func (WinRMConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WinRMConfigurationResponse)(nil)).Elem()
}

func (o WinRMConfigurationResponseOutput) ToWinRMConfigurationResponseOutput() WinRMConfigurationResponseOutput {
	return o
}

func (o WinRMConfigurationResponseOutput) ToWinRMConfigurationResponseOutputWithContext(ctx context.Context) WinRMConfigurationResponseOutput {
	return o
}

func (o WinRMConfigurationResponseOutput) ToWinRMConfigurationResponsePtrOutput() WinRMConfigurationResponsePtrOutput {
	return o.ToWinRMConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o WinRMConfigurationResponseOutput) ToWinRMConfigurationResponsePtrOutputWithContext(ctx context.Context) WinRMConfigurationResponsePtrOutput {
	return o.ApplyT(func(v WinRMConfigurationResponse) *WinRMConfigurationResponse {
		return &v
	}).(WinRMConfigurationResponsePtrOutput)
}

// The list of Windows Remote Management listeners
func (o WinRMConfigurationResponseOutput) Listeners() WinRMListenerResponseArrayOutput {
	return o.ApplyT(func(v WinRMConfigurationResponse) []WinRMListenerResponse { return v.Listeners }).(WinRMListenerResponseArrayOutput)
}

type WinRMConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (WinRMConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WinRMConfigurationResponse)(nil)).Elem()
}

func (o WinRMConfigurationResponsePtrOutput) ToWinRMConfigurationResponsePtrOutput() WinRMConfigurationResponsePtrOutput {
	return o
}

func (o WinRMConfigurationResponsePtrOutput) ToWinRMConfigurationResponsePtrOutputWithContext(ctx context.Context) WinRMConfigurationResponsePtrOutput {
	return o
}

func (o WinRMConfigurationResponsePtrOutput) Elem() WinRMConfigurationResponseOutput {
	return o.ApplyT(func(v *WinRMConfigurationResponse) WinRMConfigurationResponse { return *v }).(WinRMConfigurationResponseOutput)
}

// The list of Windows Remote Management listeners
func (o WinRMConfigurationResponsePtrOutput) Listeners() WinRMListenerResponseArrayOutput {
	return o.ApplyT(func(v *WinRMConfigurationResponse) []WinRMListenerResponse {
		if v == nil {
			return nil
		}
		return v.Listeners
	}).(WinRMListenerResponseArrayOutput)
}

// Describes Protocol and thumbprint of Windows Remote Management listener
type WinRMListener struct {
	// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>}
	CertificateUrl *string `pulumi:"certificateUrl"`
	// Specifies the protocol of WinRM listener. <br><br> Possible values are: <br>**http** <br><br> **https**
	Protocol *string `pulumi:"protocol"`
}

// WinRMListenerInput is an input type that accepts WinRMListenerArgs and WinRMListenerOutput values.
// You can construct a concrete instance of `WinRMListenerInput` via:
//
//          WinRMListenerArgs{...}
type WinRMListenerInput interface {
	pulumi.Input

	ToWinRMListenerOutput() WinRMListenerOutput
	ToWinRMListenerOutputWithContext(context.Context) WinRMListenerOutput
}

// Describes Protocol and thumbprint of Windows Remote Management listener
type WinRMListenerArgs struct {
	// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>}
	CertificateUrl pulumi.StringPtrInput `pulumi:"certificateUrl"`
	// Specifies the protocol of WinRM listener. <br><br> Possible values are: <br>**http** <br><br> **https**
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (WinRMListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WinRMListener)(nil)).Elem()
}

func (i WinRMListenerArgs) ToWinRMListenerOutput() WinRMListenerOutput {
	return i.ToWinRMListenerOutputWithContext(context.Background())
}

func (i WinRMListenerArgs) ToWinRMListenerOutputWithContext(ctx context.Context) WinRMListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WinRMListenerOutput)
}

// WinRMListenerArrayInput is an input type that accepts WinRMListenerArray and WinRMListenerArrayOutput values.
// You can construct a concrete instance of `WinRMListenerArrayInput` via:
//
//          WinRMListenerArray{ WinRMListenerArgs{...} }
type WinRMListenerArrayInput interface {
	pulumi.Input

	ToWinRMListenerArrayOutput() WinRMListenerArrayOutput
	ToWinRMListenerArrayOutputWithContext(context.Context) WinRMListenerArrayOutput
}

type WinRMListenerArray []WinRMListenerInput

func (WinRMListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WinRMListener)(nil)).Elem()
}

func (i WinRMListenerArray) ToWinRMListenerArrayOutput() WinRMListenerArrayOutput {
	return i.ToWinRMListenerArrayOutputWithContext(context.Background())
}

func (i WinRMListenerArray) ToWinRMListenerArrayOutputWithContext(ctx context.Context) WinRMListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WinRMListenerArrayOutput)
}

// Describes Protocol and thumbprint of Windows Remote Management listener
type WinRMListenerResponse struct {
	// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>}
	CertificateUrl *string `pulumi:"certificateUrl"`
	// Specifies the protocol of WinRM listener. <br><br> Possible values are: <br>**http** <br><br> **https**
	Protocol *string `pulumi:"protocol"`
}

// Describes Protocol and thumbprint of Windows Remote Management listener
type WinRMListenerResponseOutput struct{ *pulumi.OutputState }

func (WinRMListenerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WinRMListenerResponse)(nil)).Elem()
}

func (o WinRMListenerResponseOutput) ToWinRMListenerResponseOutput() WinRMListenerResponseOutput {
	return o
}

func (o WinRMListenerResponseOutput) ToWinRMListenerResponseOutputWithContext(ctx context.Context) WinRMListenerResponseOutput {
	return o
}

// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>}
func (o WinRMListenerResponseOutput) CertificateUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WinRMListenerResponse) *string { return v.CertificateUrl }).(pulumi.StringPtrOutput)
}

// Specifies the protocol of WinRM listener. <br><br> Possible values are: <br>**http** <br><br> **https**
func (o WinRMListenerResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WinRMListenerResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type WinRMListenerResponseArrayOutput struct{ *pulumi.OutputState }

func (WinRMListenerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WinRMListenerResponse)(nil)).Elem()
}

func (o WinRMListenerResponseArrayOutput) ToWinRMListenerResponseArrayOutput() WinRMListenerResponseArrayOutput {
	return o
}

func (o WinRMListenerResponseArrayOutput) ToWinRMListenerResponseArrayOutputWithContext(ctx context.Context) WinRMListenerResponseArrayOutput {
	return o
}

func (o WinRMListenerResponseArrayOutput) Index(i pulumi.IntInput) WinRMListenerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WinRMListenerResponse {
		return vs[0].([]WinRMListenerResponse)[vs[1].(int)]
	}).(WinRMListenerResponseOutput)
}

// Specifies Windows operating system settings on the virtual machine.
type WindowsConfiguration struct {
	// Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup.
	AdditionalUnattendContent []AdditionalUnattendContent `pulumi:"additionalUnattendContent"`
	// Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. <br><br> For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning.
	EnableAutomaticUpdates *bool `pulumi:"enableAutomaticUpdates"`
	// Specifies settings related to in-guest patching (KBs).
	PatchSettings *PatchSettings `pulumi:"patchSettings"`
	// Indicates whether virtual machine agent should be provisioned on the virtual machine. <br><br> When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
	ProvisionVMAgent *bool `pulumi:"provisionVMAgent"`
	// Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time". <br><br> Possible values can be [TimeZoneInfo.Id](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id) value from time zones returned by [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.getsystemtimezones).
	TimeZone *string `pulumi:"timeZone"`
	// Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell.
	WinRM *WinRMConfiguration `pulumi:"winRM"`
}

// WindowsConfigurationInput is an input type that accepts WindowsConfigurationArgs and WindowsConfigurationOutput values.
// You can construct a concrete instance of `WindowsConfigurationInput` via:
//
//          WindowsConfigurationArgs{...}
type WindowsConfigurationInput interface {
	pulumi.Input

	ToWindowsConfigurationOutput() WindowsConfigurationOutput
	ToWindowsConfigurationOutputWithContext(context.Context) WindowsConfigurationOutput
}

// Specifies Windows operating system settings on the virtual machine.
type WindowsConfigurationArgs struct {
	// Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup.
	AdditionalUnattendContent AdditionalUnattendContentArrayInput `pulumi:"additionalUnattendContent"`
	// Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. <br><br> For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning.
	EnableAutomaticUpdates pulumi.BoolPtrInput `pulumi:"enableAutomaticUpdates"`
	// Specifies settings related to in-guest patching (KBs).
	PatchSettings PatchSettingsPtrInput `pulumi:"patchSettings"`
	// Indicates whether virtual machine agent should be provisioned on the virtual machine. <br><br> When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
	ProvisionVMAgent pulumi.BoolPtrInput `pulumi:"provisionVMAgent"`
	// Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time". <br><br> Possible values can be [TimeZoneInfo.Id](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id) value from time zones returned by [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.getsystemtimezones).
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
	// Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell.
	WinRM WinRMConfigurationPtrInput `pulumi:"winRM"`
}

func (WindowsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsConfiguration)(nil)).Elem()
}

func (i WindowsConfigurationArgs) ToWindowsConfigurationOutput() WindowsConfigurationOutput {
	return i.ToWindowsConfigurationOutputWithContext(context.Background())
}

func (i WindowsConfigurationArgs) ToWindowsConfigurationOutputWithContext(ctx context.Context) WindowsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsConfigurationOutput)
}

func (i WindowsConfigurationArgs) ToWindowsConfigurationPtrOutput() WindowsConfigurationPtrOutput {
	return i.ToWindowsConfigurationPtrOutputWithContext(context.Background())
}

func (i WindowsConfigurationArgs) ToWindowsConfigurationPtrOutputWithContext(ctx context.Context) WindowsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsConfigurationOutput).ToWindowsConfigurationPtrOutputWithContext(ctx)
}

// WindowsConfigurationPtrInput is an input type that accepts WindowsConfigurationArgs, WindowsConfigurationPtr and WindowsConfigurationPtrOutput values.
// You can construct a concrete instance of `WindowsConfigurationPtrInput` via:
//
//          WindowsConfigurationArgs{...}
//
//  or:
//
//          nil
type WindowsConfigurationPtrInput interface {
	pulumi.Input

	ToWindowsConfigurationPtrOutput() WindowsConfigurationPtrOutput
	ToWindowsConfigurationPtrOutputWithContext(context.Context) WindowsConfigurationPtrOutput
}

type windowsConfigurationPtrType WindowsConfigurationArgs

func WindowsConfigurationPtr(v *WindowsConfigurationArgs) WindowsConfigurationPtrInput {
	return (*windowsConfigurationPtrType)(v)
}

func (*windowsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsConfiguration)(nil)).Elem()
}

func (i *windowsConfigurationPtrType) ToWindowsConfigurationPtrOutput() WindowsConfigurationPtrOutput {
	return i.ToWindowsConfigurationPtrOutputWithContext(context.Background())
}

func (i *windowsConfigurationPtrType) ToWindowsConfigurationPtrOutputWithContext(ctx context.Context) WindowsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsConfigurationPtrOutput)
}

// Specifies Windows operating system settings on the virtual machine.
type WindowsConfigurationResponse struct {
	// Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup.
	AdditionalUnattendContent []AdditionalUnattendContentResponse `pulumi:"additionalUnattendContent"`
	// Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. <br><br> For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning.
	EnableAutomaticUpdates *bool `pulumi:"enableAutomaticUpdates"`
	// Specifies settings related to in-guest patching (KBs).
	PatchSettings *PatchSettingsResponse `pulumi:"patchSettings"`
	// Indicates whether virtual machine agent should be provisioned on the virtual machine. <br><br> When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
	ProvisionVMAgent *bool `pulumi:"provisionVMAgent"`
	// Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time". <br><br> Possible values can be [TimeZoneInfo.Id](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id) value from time zones returned by [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.getsystemtimezones).
	TimeZone *string `pulumi:"timeZone"`
	// Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell.
	WinRM *WinRMConfigurationResponse `pulumi:"winRM"`
}

// Specifies Windows operating system settings on the virtual machine.
type WindowsConfigurationResponseOutput struct{ *pulumi.OutputState }

func (WindowsConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsConfigurationResponse)(nil)).Elem()
}

func (o WindowsConfigurationResponseOutput) ToWindowsConfigurationResponseOutput() WindowsConfigurationResponseOutput {
	return o
}

func (o WindowsConfigurationResponseOutput) ToWindowsConfigurationResponseOutputWithContext(ctx context.Context) WindowsConfigurationResponseOutput {
	return o
}

func (o WindowsConfigurationResponseOutput) ToWindowsConfigurationResponsePtrOutput() WindowsConfigurationResponsePtrOutput {
	return o.ToWindowsConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o WindowsConfigurationResponseOutput) ToWindowsConfigurationResponsePtrOutputWithContext(ctx context.Context) WindowsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v WindowsConfigurationResponse) *WindowsConfigurationResponse {
		return &v
	}).(WindowsConfigurationResponsePtrOutput)
}

// Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup.
func (o WindowsConfigurationResponseOutput) AdditionalUnattendContent() AdditionalUnattendContentResponseArrayOutput {
	return o.ApplyT(func(v WindowsConfigurationResponse) []AdditionalUnattendContentResponse {
		return v.AdditionalUnattendContent
	}).(AdditionalUnattendContentResponseArrayOutput)
}

// Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. <br><br> For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning.
func (o WindowsConfigurationResponseOutput) EnableAutomaticUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WindowsConfigurationResponse) *bool { return v.EnableAutomaticUpdates }).(pulumi.BoolPtrOutput)
}

// Specifies settings related to in-guest patching (KBs).
func (o WindowsConfigurationResponseOutput) PatchSettings() PatchSettingsResponsePtrOutput {
	return o.ApplyT(func(v WindowsConfigurationResponse) *PatchSettingsResponse { return v.PatchSettings }).(PatchSettingsResponsePtrOutput)
}

// Indicates whether virtual machine agent should be provisioned on the virtual machine. <br><br> When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
func (o WindowsConfigurationResponseOutput) ProvisionVMAgent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WindowsConfigurationResponse) *bool { return v.ProvisionVMAgent }).(pulumi.BoolPtrOutput)
}

// Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time". <br><br> Possible values can be [TimeZoneInfo.Id](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id) value from time zones returned by [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.getsystemtimezones).
func (o WindowsConfigurationResponseOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsConfigurationResponse) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell.
func (o WindowsConfigurationResponseOutput) WinRM() WinRMConfigurationResponsePtrOutput {
	return o.ApplyT(func(v WindowsConfigurationResponse) *WinRMConfigurationResponse { return v.WinRM }).(WinRMConfigurationResponsePtrOutput)
}

type WindowsConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (WindowsConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsConfigurationResponse)(nil)).Elem()
}

func (o WindowsConfigurationResponsePtrOutput) ToWindowsConfigurationResponsePtrOutput() WindowsConfigurationResponsePtrOutput {
	return o
}

func (o WindowsConfigurationResponsePtrOutput) ToWindowsConfigurationResponsePtrOutputWithContext(ctx context.Context) WindowsConfigurationResponsePtrOutput {
	return o
}

func (o WindowsConfigurationResponsePtrOutput) Elem() WindowsConfigurationResponseOutput {
	return o.ApplyT(func(v *WindowsConfigurationResponse) WindowsConfigurationResponse { return *v }).(WindowsConfigurationResponseOutput)
}

// Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup.
func (o WindowsConfigurationResponsePtrOutput) AdditionalUnattendContent() AdditionalUnattendContentResponseArrayOutput {
	return o.ApplyT(func(v *WindowsConfigurationResponse) []AdditionalUnattendContentResponse {
		if v == nil {
			return nil
		}
		return v.AdditionalUnattendContent
	}).(AdditionalUnattendContentResponseArrayOutput)
}

// Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. <br><br> For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning.
func (o WindowsConfigurationResponsePtrOutput) EnableAutomaticUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAutomaticUpdates
	}).(pulumi.BoolPtrOutput)
}

// Specifies settings related to in-guest patching (KBs).
func (o WindowsConfigurationResponsePtrOutput) PatchSettings() PatchSettingsResponsePtrOutput {
	return o.ApplyT(func(v *WindowsConfigurationResponse) *PatchSettingsResponse {
		if v == nil {
			return nil
		}
		return v.PatchSettings
	}).(PatchSettingsResponsePtrOutput)
}

// Indicates whether virtual machine agent should be provisioned on the virtual machine. <br><br> When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
func (o WindowsConfigurationResponsePtrOutput) ProvisionVMAgent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ProvisionVMAgent
	}).(pulumi.BoolPtrOutput)
}

// Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time". <br><br> Possible values can be [TimeZoneInfo.Id](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id) value from time zones returned by [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.getsystemtimezones).
func (o WindowsConfigurationResponsePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell.
func (o WindowsConfigurationResponsePtrOutput) WinRM() WinRMConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *WindowsConfigurationResponse) *WinRMConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.WinRM
	}).(WinRMConfigurationResponsePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AdditionalCapabilitiesOutput{})
	pulumi.RegisterOutputType(AdditionalCapabilitiesPtrOutput{})
	pulumi.RegisterOutputType(AdditionalCapabilitiesResponseOutput{})
	pulumi.RegisterOutputType(AdditionalCapabilitiesResponsePtrOutput{})
	pulumi.RegisterOutputType(AdditionalUnattendContentOutput{})
	pulumi.RegisterOutputType(AdditionalUnattendContentArrayOutput{})
	pulumi.RegisterOutputType(AdditionalUnattendContentResponseOutput{})
	pulumi.RegisterOutputType(AdditionalUnattendContentResponseArrayOutput{})
	pulumi.RegisterOutputType(ApiEntityReferenceOutput{})
	pulumi.RegisterOutputType(ApiEntityReferencePtrOutput{})
	pulumi.RegisterOutputType(ApiEntityReferenceResponseOutput{})
	pulumi.RegisterOutputType(ApiEntityReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(ApiErrorBaseResponseOutput{})
	pulumi.RegisterOutputType(ApiErrorBaseResponseArrayOutput{})
	pulumi.RegisterOutputType(ApiErrorResponseOutput{})
	pulumi.RegisterOutputType(ApiErrorResponsePtrOutput{})
	pulumi.RegisterOutputType(AssignmentInfoResponseOutput{})
	pulumi.RegisterOutputType(AssignmentInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(AssignmentReportResourceComplianceReasonResponseOutput{})
	pulumi.RegisterOutputType(AssignmentReportResourceComplianceReasonResponseArrayOutput{})
	pulumi.RegisterOutputType(AssignmentReportResourceResponseOutput{})
	pulumi.RegisterOutputType(AssignmentReportResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(AssignmentReportResponseOutput{})
	pulumi.RegisterOutputType(AssignmentReportResponsePtrOutput{})
	pulumi.RegisterOutputType(AutomaticOSUpgradePolicyOutput{})
	pulumi.RegisterOutputType(AutomaticOSUpgradePolicyPtrOutput{})
	pulumi.RegisterOutputType(AutomaticOSUpgradePolicyResponseOutput{})
	pulumi.RegisterOutputType(AutomaticOSUpgradePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(AutomaticRepairsPolicyOutput{})
	pulumi.RegisterOutputType(AutomaticRepairsPolicyPtrOutput{})
	pulumi.RegisterOutputType(AutomaticRepairsPolicyResponseOutput{})
	pulumi.RegisterOutputType(AutomaticRepairsPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(AvailablePatchSummaryResponseOutput{})
	pulumi.RegisterOutputType(AvailablePatchSummaryResponsePtrOutput{})
	pulumi.RegisterOutputType(BillingProfileOutput{})
	pulumi.RegisterOutputType(BillingProfilePtrOutput{})
	pulumi.RegisterOutputType(BillingProfileResponseOutput{})
	pulumi.RegisterOutputType(BillingProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(BootDiagnosticsOutput{})
	pulumi.RegisterOutputType(BootDiagnosticsPtrOutput{})
	pulumi.RegisterOutputType(BootDiagnosticsInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(BootDiagnosticsInstanceViewResponsePtrOutput{})
	pulumi.RegisterOutputType(BootDiagnosticsResponseOutput{})
	pulumi.RegisterOutputType(BootDiagnosticsResponsePtrOutput{})
	pulumi.RegisterOutputType(ConfigurationInfoResponseOutput{})
	pulumi.RegisterOutputType(ConfigurationInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ConfigurationParameterOutput{})
	pulumi.RegisterOutputType(ConfigurationParameterArrayOutput{})
	pulumi.RegisterOutputType(ConfigurationParameterResponseOutput{})
	pulumi.RegisterOutputType(ConfigurationParameterResponseArrayOutput{})
	pulumi.RegisterOutputType(ConfigurationSettingOutput{})
	pulumi.RegisterOutputType(ConfigurationSettingPtrOutput{})
	pulumi.RegisterOutputType(ConfigurationSettingResponseOutput{})
	pulumi.RegisterOutputType(ConfigurationSettingResponsePtrOutput{})
	pulumi.RegisterOutputType(CreationDataOutput{})
	pulumi.RegisterOutputType(CreationDataPtrOutput{})
	pulumi.RegisterOutputType(CreationDataResponseOutput{})
	pulumi.RegisterOutputType(CreationDataResponsePtrOutput{})
	pulumi.RegisterOutputType(DataDiskOutput{})
	pulumi.RegisterOutputType(DataDiskArrayOutput{})
	pulumi.RegisterOutputType(DataDiskImageEncryptionOutput{})
	pulumi.RegisterOutputType(DataDiskImageEncryptionArrayOutput{})
	pulumi.RegisterOutputType(DataDiskImageEncryptionResponseOutput{})
	pulumi.RegisterOutputType(DataDiskImageEncryptionResponseArrayOutput{})
	pulumi.RegisterOutputType(DataDiskResponseOutput{})
	pulumi.RegisterOutputType(DataDiskResponseArrayOutput{})
	pulumi.RegisterOutputType(DedicatedHostAllocatableVMResponseOutput{})
	pulumi.RegisterOutputType(DedicatedHostAllocatableVMResponseArrayOutput{})
	pulumi.RegisterOutputType(DedicatedHostAvailableCapacityResponseOutput{})
	pulumi.RegisterOutputType(DedicatedHostAvailableCapacityResponsePtrOutput{})
	pulumi.RegisterOutputType(DedicatedHostGroupInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(DedicatedHostGroupInstanceViewResponsePtrOutput{})
	pulumi.RegisterOutputType(DedicatedHostInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(DedicatedHostInstanceViewResponsePtrOutput{})
	pulumi.RegisterOutputType(DedicatedHostInstanceViewWithNameResponseOutput{})
	pulumi.RegisterOutputType(DedicatedHostInstanceViewWithNameResponseArrayOutput{})
	pulumi.RegisterOutputType(DiagnosticsProfileOutput{})
	pulumi.RegisterOutputType(DiagnosticsProfilePtrOutput{})
	pulumi.RegisterOutputType(DiagnosticsProfileResponseOutput{})
	pulumi.RegisterOutputType(DiagnosticsProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(DiffDiskSettingsOutput{})
	pulumi.RegisterOutputType(DiffDiskSettingsPtrOutput{})
	pulumi.RegisterOutputType(DiffDiskSettingsResponseOutput{})
	pulumi.RegisterOutputType(DiffDiskSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(DisallowedOutput{})
	pulumi.RegisterOutputType(DisallowedPtrOutput{})
	pulumi.RegisterOutputType(DisallowedResponseOutput{})
	pulumi.RegisterOutputType(DisallowedResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskEncryptionSetParametersOutput{})
	pulumi.RegisterOutputType(DiskEncryptionSetParametersPtrOutput{})
	pulumi.RegisterOutputType(DiskEncryptionSetParametersResponseOutput{})
	pulumi.RegisterOutputType(DiskEncryptionSetParametersResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskEncryptionSettingsOutput{})
	pulumi.RegisterOutputType(DiskEncryptionSettingsPtrOutput{})
	pulumi.RegisterOutputType(DiskEncryptionSettingsResponseOutput{})
	pulumi.RegisterOutputType(DiskEncryptionSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskEncryptionSettingsResponseArrayOutput{})
	pulumi.RegisterOutputType(DiskInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(DiskInstanceViewResponseArrayOutput{})
	pulumi.RegisterOutputType(DiskSkuOutput{})
	pulumi.RegisterOutputType(DiskSkuPtrOutput{})
	pulumi.RegisterOutputType(DiskSkuResponseOutput{})
	pulumi.RegisterOutputType(DiskSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionOutput{})
	pulumi.RegisterOutputType(EncryptionPtrOutput{})
	pulumi.RegisterOutputType(EncryptionImagesOutput{})
	pulumi.RegisterOutputType(EncryptionImagesPtrOutput{})
	pulumi.RegisterOutputType(EncryptionImagesResponseOutput{})
	pulumi.RegisterOutputType(EncryptionImagesResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionResponseOutput{})
	pulumi.RegisterOutputType(EncryptionResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionSetIdentityOutput{})
	pulumi.RegisterOutputType(EncryptionSetIdentityPtrOutput{})
	pulumi.RegisterOutputType(EncryptionSetIdentityResponseOutput{})
	pulumi.RegisterOutputType(EncryptionSetIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsCollectionOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsCollectionPtrOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsCollectionResponseOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsCollectionResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsElementOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsElementArrayOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsElementResponseOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsElementResponseArrayOutput{})
	pulumi.RegisterOutputType(GalleryApplicationVersionPublishingProfileOutput{})
	pulumi.RegisterOutputType(GalleryApplicationVersionPublishingProfilePtrOutput{})
	pulumi.RegisterOutputType(GalleryApplicationVersionPublishingProfileResponseOutput{})
	pulumi.RegisterOutputType(GalleryApplicationVersionPublishingProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(GalleryArtifactVersionSourceOutput{})
	pulumi.RegisterOutputType(GalleryArtifactVersionSourcePtrOutput{})
	pulumi.RegisterOutputType(GalleryArtifactVersionSourceResponseOutput{})
	pulumi.RegisterOutputType(GalleryArtifactVersionSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(GalleryDataDiskImageOutput{})
	pulumi.RegisterOutputType(GalleryDataDiskImageArrayOutput{})
	pulumi.RegisterOutputType(GalleryDataDiskImageResponseOutput{})
	pulumi.RegisterOutputType(GalleryDataDiskImageResponseArrayOutput{})
	pulumi.RegisterOutputType(GalleryIdentifierResponseOutput{})
	pulumi.RegisterOutputType(GalleryIdentifierResponsePtrOutput{})
	pulumi.RegisterOutputType(GalleryImageFeatureOutput{})
	pulumi.RegisterOutputType(GalleryImageFeatureArrayOutput{})
	pulumi.RegisterOutputType(GalleryImageFeatureResponseOutput{})
	pulumi.RegisterOutputType(GalleryImageFeatureResponseArrayOutput{})
	pulumi.RegisterOutputType(GalleryImageIdentifierOutput{})
	pulumi.RegisterOutputType(GalleryImageIdentifierPtrOutput{})
	pulumi.RegisterOutputType(GalleryImageIdentifierResponseOutput{})
	pulumi.RegisterOutputType(GalleryImageIdentifierResponsePtrOutput{})
	pulumi.RegisterOutputType(GalleryImageVersionPublishingProfileOutput{})
	pulumi.RegisterOutputType(GalleryImageVersionPublishingProfilePtrOutput{})
	pulumi.RegisterOutputType(GalleryImageVersionPublishingProfileResponseOutput{})
	pulumi.RegisterOutputType(GalleryImageVersionPublishingProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(GalleryImageVersionStorageProfileOutput{})
	pulumi.RegisterOutputType(GalleryImageVersionStorageProfilePtrOutput{})
	pulumi.RegisterOutputType(GalleryImageVersionStorageProfileResponseOutput{})
	pulumi.RegisterOutputType(GalleryImageVersionStorageProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(GalleryOSDiskImageOutput{})
	pulumi.RegisterOutputType(GalleryOSDiskImagePtrOutput{})
	pulumi.RegisterOutputType(GalleryOSDiskImageResponseOutput{})
	pulumi.RegisterOutputType(GalleryOSDiskImageResponsePtrOutput{})
	pulumi.RegisterOutputType(GuestConfigurationAssignmentPropertiesOutput{})
	pulumi.RegisterOutputType(GuestConfigurationAssignmentPropertiesPtrOutput{})
	pulumi.RegisterOutputType(GuestConfigurationAssignmentPropertiesResponseOutput{})
	pulumi.RegisterOutputType(GuestConfigurationAssignmentPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(GuestConfigurationNavigationOutput{})
	pulumi.RegisterOutputType(GuestConfigurationNavigationPtrOutput{})
	pulumi.RegisterOutputType(GuestConfigurationNavigationResponseOutput{})
	pulumi.RegisterOutputType(GuestConfigurationNavigationResponsePtrOutput{})
	pulumi.RegisterOutputType(HardwareProfileOutput{})
	pulumi.RegisterOutputType(HardwareProfilePtrOutput{})
	pulumi.RegisterOutputType(HardwareProfileResponseOutput{})
	pulumi.RegisterOutputType(HardwareProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageDataDiskOutput{})
	pulumi.RegisterOutputType(ImageDataDiskArrayOutput{})
	pulumi.RegisterOutputType(ImageDataDiskResponseOutput{})
	pulumi.RegisterOutputType(ImageDataDiskResponseArrayOutput{})
	pulumi.RegisterOutputType(ImageDiskReferenceOutput{})
	pulumi.RegisterOutputType(ImageDiskReferencePtrOutput{})
	pulumi.RegisterOutputType(ImageDiskReferenceResponseOutput{})
	pulumi.RegisterOutputType(ImageDiskReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageOSDiskOutput{})
	pulumi.RegisterOutputType(ImageOSDiskPtrOutput{})
	pulumi.RegisterOutputType(ImageOSDiskResponseOutput{})
	pulumi.RegisterOutputType(ImageOSDiskResponsePtrOutput{})
	pulumi.RegisterOutputType(ImagePurchasePlanOutput{})
	pulumi.RegisterOutputType(ImagePurchasePlanPtrOutput{})
	pulumi.RegisterOutputType(ImagePurchasePlanResponseOutput{})
	pulumi.RegisterOutputType(ImagePurchasePlanResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageReferenceOutput{})
	pulumi.RegisterOutputType(ImageReferencePtrOutput{})
	pulumi.RegisterOutputType(ImageReferenceResponseOutput{})
	pulumi.RegisterOutputType(ImageReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageStorageProfileOutput{})
	pulumi.RegisterOutputType(ImageStorageProfilePtrOutput{})
	pulumi.RegisterOutputType(ImageStorageProfileResponseOutput{})
	pulumi.RegisterOutputType(ImageStorageProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(InnerErrorResponseOutput{})
	pulumi.RegisterOutputType(InnerErrorResponsePtrOutput{})
	pulumi.RegisterOutputType(InstanceViewStatusOutput{})
	pulumi.RegisterOutputType(InstanceViewStatusPtrOutput{})
	pulumi.RegisterOutputType(InstanceViewStatusArrayOutput{})
	pulumi.RegisterOutputType(InstanceViewStatusResponseOutput{})
	pulumi.RegisterOutputType(InstanceViewStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(InstanceViewStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(KeyVaultAndKeyReferenceOutput{})
	pulumi.RegisterOutputType(KeyVaultAndKeyReferencePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultAndKeyReferenceResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultAndKeyReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultAndKeyReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(KeyVaultAndSecretReferenceOutput{})
	pulumi.RegisterOutputType(KeyVaultAndSecretReferencePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultAndSecretReferenceResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultAndSecretReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferencePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretReferenceOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretReferencePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretReferenceResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(LastPatchInstallationSummaryResponseOutput{})
	pulumi.RegisterOutputType(LastPatchInstallationSummaryResponsePtrOutput{})
	pulumi.RegisterOutputType(LinuxConfigurationOutput{})
	pulumi.RegisterOutputType(LinuxConfigurationPtrOutput{})
	pulumi.RegisterOutputType(LinuxConfigurationResponseOutput{})
	pulumi.RegisterOutputType(LinuxConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(MaintenanceRedeployStatusResponseOutput{})
	pulumi.RegisterOutputType(MaintenanceRedeployStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedDiskParametersOutput{})
	pulumi.RegisterOutputType(ManagedDiskParametersPtrOutput{})
	pulumi.RegisterOutputType(ManagedDiskParametersResponseOutput{})
	pulumi.RegisterOutputType(ManagedDiskParametersResponsePtrOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceReferenceOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceReferenceArrayOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceReferenceResponseOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkProfileOutput{})
	pulumi.RegisterOutputType(NetworkProfilePtrOutput{})
	pulumi.RegisterOutputType(NetworkProfileResponseOutput{})
	pulumi.RegisterOutputType(NetworkProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(OSDiskOutput{})
	pulumi.RegisterOutputType(OSDiskPtrOutput{})
	pulumi.RegisterOutputType(OSDiskImageEncryptionOutput{})
	pulumi.RegisterOutputType(OSDiskImageEncryptionPtrOutput{})
	pulumi.RegisterOutputType(OSDiskImageEncryptionResponseOutput{})
	pulumi.RegisterOutputType(OSDiskImageEncryptionResponsePtrOutput{})
	pulumi.RegisterOutputType(OSDiskResponseOutput{})
	pulumi.RegisterOutputType(OSDiskResponsePtrOutput{})
	pulumi.RegisterOutputType(OSProfileOutput{})
	pulumi.RegisterOutputType(OSProfilePtrOutput{})
	pulumi.RegisterOutputType(OSProfileResponseOutput{})
	pulumi.RegisterOutputType(OSProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(PatchSettingsOutput{})
	pulumi.RegisterOutputType(PatchSettingsPtrOutput{})
	pulumi.RegisterOutputType(PatchSettingsResponseOutput{})
	pulumi.RegisterOutputType(PatchSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(PlanOutput{})
	pulumi.RegisterOutputType(PlanPtrOutput{})
	pulumi.RegisterOutputType(PlanResponseOutput{})
	pulumi.RegisterOutputType(PlanResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(RecommendedMachineConfigurationOutput{})
	pulumi.RegisterOutputType(RecommendedMachineConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RecommendedMachineConfigurationResponseOutput{})
	pulumi.RegisterOutputType(RecommendedMachineConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(RegionalReplicationStatusResponseOutput{})
	pulumi.RegisterOutputType(RegionalReplicationStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(ReplicationStatusResponseOutput{})
	pulumi.RegisterOutputType(ReplicationStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceRangeOutput{})
	pulumi.RegisterOutputType(ResourceRangePtrOutput{})
	pulumi.RegisterOutputType(ResourceRangeResponseOutput{})
	pulumi.RegisterOutputType(ResourceRangeResponsePtrOutput{})
	pulumi.RegisterOutputType(RollingUpgradePolicyOutput{})
	pulumi.RegisterOutputType(RollingUpgradePolicyPtrOutput{})
	pulumi.RegisterOutputType(RollingUpgradePolicyResponseOutput{})
	pulumi.RegisterOutputType(RollingUpgradePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ScaleInPolicyOutput{})
	pulumi.RegisterOutputType(ScaleInPolicyPtrOutput{})
	pulumi.RegisterOutputType(ScaleInPolicyResponseOutput{})
	pulumi.RegisterOutputType(ScaleInPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ScheduledEventsProfileOutput{})
	pulumi.RegisterOutputType(ScheduledEventsProfilePtrOutput{})
	pulumi.RegisterOutputType(ScheduledEventsProfileResponseOutput{})
	pulumi.RegisterOutputType(ScheduledEventsProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(SecurityProfileOutput{})
	pulumi.RegisterOutputType(SecurityProfilePtrOutput{})
	pulumi.RegisterOutputType(SecurityProfileResponseOutput{})
	pulumi.RegisterOutputType(SecurityProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ShareInfoElementResponseOutput{})
	pulumi.RegisterOutputType(ShareInfoElementResponseArrayOutput{})
	pulumi.RegisterOutputType(SharingProfileOutput{})
	pulumi.RegisterOutputType(SharingProfilePtrOutput{})
	pulumi.RegisterOutputType(SharingProfileGroupResponseOutput{})
	pulumi.RegisterOutputType(SharingProfileGroupResponseArrayOutput{})
	pulumi.RegisterOutputType(SharingProfileResponseOutput{})
	pulumi.RegisterOutputType(SharingProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SnapshotSkuOutput{})
	pulumi.RegisterOutputType(SnapshotSkuPtrOutput{})
	pulumi.RegisterOutputType(SnapshotSkuResponseOutput{})
	pulumi.RegisterOutputType(SnapshotSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceVaultOutput{})
	pulumi.RegisterOutputType(SourceVaultPtrOutput{})
	pulumi.RegisterOutputType(SourceVaultResponseOutput{})
	pulumi.RegisterOutputType(SourceVaultResponsePtrOutput{})
	pulumi.RegisterOutputType(SshConfigurationOutput{})
	pulumi.RegisterOutputType(SshConfigurationPtrOutput{})
	pulumi.RegisterOutputType(SshConfigurationResponseOutput{})
	pulumi.RegisterOutputType(SshConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(SshPublicKeyTypeOutput{})
	pulumi.RegisterOutputType(SshPublicKeyTypeArrayOutput{})
	pulumi.RegisterOutputType(SshPublicKeyResponseOutput{})
	pulumi.RegisterOutputType(SshPublicKeyResponseArrayOutput{})
	pulumi.RegisterOutputType(StorageProfileOutput{})
	pulumi.RegisterOutputType(StorageProfilePtrOutput{})
	pulumi.RegisterOutputType(StorageProfileResponseOutput{})
	pulumi.RegisterOutputType(StorageProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(SubResourceOutput{})
	pulumi.RegisterOutputType(SubResourcePtrOutput{})
	pulumi.RegisterOutputType(SubResourceArrayOutput{})
	pulumi.RegisterOutputType(SubResourceReadOnlyResponseOutput{})
	pulumi.RegisterOutputType(SubResourceReadOnlyResponseArrayOutput{})
	pulumi.RegisterOutputType(SubResourceResponseOutput{})
	pulumi.RegisterOutputType(SubResourceResponsePtrOutput{})
	pulumi.RegisterOutputType(SubResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(SubResourceWithColocationStatusResponseOutput{})
	pulumi.RegisterOutputType(SubResourceWithColocationStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(TargetRegionOutput{})
	pulumi.RegisterOutputType(TargetRegionArrayOutput{})
	pulumi.RegisterOutputType(TargetRegionResponseOutput{})
	pulumi.RegisterOutputType(TargetRegionResponseArrayOutput{})
	pulumi.RegisterOutputType(TerminateNotificationProfileOutput{})
	pulumi.RegisterOutputType(TerminateNotificationProfilePtrOutput{})
	pulumi.RegisterOutputType(TerminateNotificationProfileResponseOutput{})
	pulumi.RegisterOutputType(TerminateNotificationProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(UpgradePolicyOutput{})
	pulumi.RegisterOutputType(UpgradePolicyPtrOutput{})
	pulumi.RegisterOutputType(UpgradePolicyResponseOutput{})
	pulumi.RegisterOutputType(UpgradePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(UserArtifactSourceOutput{})
	pulumi.RegisterOutputType(UserArtifactSourcePtrOutput{})
	pulumi.RegisterOutputType(UserArtifactSourceResponseOutput{})
	pulumi.RegisterOutputType(UserArtifactSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(VMInfoResponseOutput{})
	pulumi.RegisterOutputType(VMInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(VaultCertificateOutput{})
	pulumi.RegisterOutputType(VaultCertificateArrayOutput{})
	pulumi.RegisterOutputType(VaultCertificateResponseOutput{})
	pulumi.RegisterOutputType(VaultCertificateResponseArrayOutput{})
	pulumi.RegisterOutputType(VaultSecretGroupOutput{})
	pulumi.RegisterOutputType(VaultSecretGroupArrayOutput{})
	pulumi.RegisterOutputType(VaultSecretGroupResponseOutput{})
	pulumi.RegisterOutputType(VaultSecretGroupResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualHardDiskOutput{})
	pulumi.RegisterOutputType(VirtualHardDiskPtrOutput{})
	pulumi.RegisterOutputType(VirtualHardDiskResponseOutput{})
	pulumi.RegisterOutputType(VirtualHardDiskResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineAgentInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineAgentInstanceViewResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineExtensionHandlerInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineExtensionInstanceViewOutput{})
	pulumi.RegisterOutputType(VirtualMachineExtensionInstanceViewPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineExtensionInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineExtensionInstanceViewResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineExtensionInstanceViewResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineExtensionResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineExtensionResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineHealthStatusResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineHealthStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineIdentityOutput{})
	pulumi.RegisterOutputType(VirtualMachineIdentityPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineIdentityResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineIdentityResponseUserAssignedIdentitiesOutput{})
	pulumi.RegisterOutputType(VirtualMachineIdentityResponseUserAssignedIdentitiesMapOutput{})
	pulumi.RegisterOutputType(VirtualMachineInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineInstanceViewResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachinePatchStatusResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachinePatchStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetDataDiskOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetDataDiskArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetDataDiskResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetDataDiskResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetExtensionTypeOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetExtensionTypeArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetExtensionProfileOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetExtensionProfilePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetExtensionProfileResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetExtensionProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetExtensionResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetExtensionResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIPConfigurationOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIPConfigurationArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIPConfigurationResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIPConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIdentityOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIdentityPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIdentityResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIdentityResponseUserAssignedIdentitiesMapOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIpTagOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIpTagArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIpTagResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIpTagResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetManagedDiskParametersOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetManagedDiskParametersPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetManagedDiskParametersResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkConfigurationArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkConfigurationResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkProfileOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkProfilePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkProfileResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetOSDiskOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetOSDiskPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetOSDiskResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetOSDiskResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetOSProfileOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetOSProfilePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetOSProfileResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetOSProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetPublicIPAddressConfigurationOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetStorageProfileOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetStorageProfilePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetStorageProfileResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetStorageProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMInstanceViewResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMNetworkProfileConfigurationOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMProfileOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMProfilePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMProfileResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMProtectionPolicyOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMProtectionPolicyPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMProtectionPolicyResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(WinRMConfigurationOutput{})
	pulumi.RegisterOutputType(WinRMConfigurationPtrOutput{})
	pulumi.RegisterOutputType(WinRMConfigurationResponseOutput{})
	pulumi.RegisterOutputType(WinRMConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(WinRMListenerOutput{})
	pulumi.RegisterOutputType(WinRMListenerArrayOutput{})
	pulumi.RegisterOutputType(WinRMListenerResponseOutput{})
	pulumi.RegisterOutputType(WinRMListenerResponseArrayOutput{})
	pulumi.RegisterOutputType(WindowsConfigurationOutput{})
	pulumi.RegisterOutputType(WindowsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(WindowsConfigurationResponseOutput{})
	pulumi.RegisterOutputType(WindowsConfigurationResponsePtrOutput{})
}
