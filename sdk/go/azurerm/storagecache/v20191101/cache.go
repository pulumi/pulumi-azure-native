// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20191101

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A Cache instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
type Cache struct {
	pulumi.CustomResourceState

	// Region name string.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Name of Cache.
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties of the Cache.
	Properties CacheResponsePropertiesOutput `pulumi:"properties"`
	// SKU for the Cache.
	Sku CacheResponsePropertiesPtrOutput `pulumi:"sku"`
	// ARM tags as name/value pairs.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Type of the Cache; Microsoft.StorageCache/Cache
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewCache registers a new resource with the given unique name, arguments, and options.
func NewCache(ctx *pulumi.Context,
	name string, args *CacheArgs, opts ...pulumi.ResourceOption) (*Cache, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &CacheArgs{}
	}
	var resource Cache
	err := ctx.RegisterResource("azurerm:storagecache/v20191101:Cache", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCache gets an existing Cache resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCache(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CacheState, opts ...pulumi.ResourceOption) (*Cache, error) {
	var resource Cache
	err := ctx.ReadResource("azurerm:storagecache/v20191101:Cache", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cache resources.
type cacheState struct {
	// Region name string.
	Location *string `pulumi:"location"`
	// Name of Cache.
	Name *string `pulumi:"name"`
	// Properties of the Cache.
	Properties *CacheResponseProperties `pulumi:"properties"`
	// SKU for the Cache.
	Sku *CacheResponseProperties `pulumi:"sku"`
	// ARM tags as name/value pairs.
	Tags map[string]string `pulumi:"tags"`
	// Type of the Cache; Microsoft.StorageCache/Cache
	Type *string `pulumi:"type"`
}

type CacheState struct {
	// Region name string.
	Location pulumi.StringPtrInput
	// Name of Cache.
	Name pulumi.StringPtrInput
	// Properties of the Cache.
	Properties CacheResponsePropertiesPtrInput
	// SKU for the Cache.
	Sku CacheResponsePropertiesPtrInput
	// ARM tags as name/value pairs.
	Tags pulumi.StringMapInput
	// Type of the Cache; Microsoft.StorageCache/Cache
	Type pulumi.StringPtrInput
}

func (CacheState) ElementType() reflect.Type {
	return reflect.TypeOf((*cacheState)(nil)).Elem()
}

type cacheArgs struct {
	// Region name string.
	Location *string `pulumi:"location"`
	// Name of Cache.
	Name string `pulumi:"name"`
	// Properties of the Cache.
	Properties *CacheProperties `pulumi:"properties"`
	// Target resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// SKU for the Cache.
	Sku *CacheProperties `pulumi:"sku"`
	// ARM tags as name/value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Cache resource.
type CacheArgs struct {
	// Region name string.
	Location pulumi.StringPtrInput
	// Name of Cache.
	Name pulumi.StringInput
	// Properties of the Cache.
	Properties CachePropertiesPtrInput
	// Target resource group.
	ResourceGroupName pulumi.StringInput
	// SKU for the Cache.
	Sku CachePropertiesPtrInput
	// ARM tags as name/value pairs.
	Tags pulumi.StringMapInput
}

func (CacheArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cacheArgs)(nil)).Elem()
}
