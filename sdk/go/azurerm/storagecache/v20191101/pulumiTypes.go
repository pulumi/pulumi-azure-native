// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20191101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// An indication of Cache health. Gives more information about health than just that related to provisioning.
type CacheHealthResponse struct {
	// List of Cache health states.
	State *string `pulumi:"state"`
	// Describes explanation of state.
	StatusDescription *string `pulumi:"statusDescription"`
}

// CacheHealthResponseInput is an input type that accepts CacheHealthResponseArgs and CacheHealthResponseOutput values.
// You can construct a concrete instance of `CacheHealthResponseInput` via:
//
//          CacheHealthResponseArgs{...}
type CacheHealthResponseInput interface {
	pulumi.Input

	ToCacheHealthResponseOutput() CacheHealthResponseOutput
	ToCacheHealthResponseOutputWithContext(context.Context) CacheHealthResponseOutput
}

// An indication of Cache health. Gives more information about health than just that related to provisioning.
type CacheHealthResponseArgs struct {
	// List of Cache health states.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Describes explanation of state.
	StatusDescription pulumi.StringPtrInput `pulumi:"statusDescription"`
}

func (CacheHealthResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheHealthResponse)(nil)).Elem()
}

func (i CacheHealthResponseArgs) ToCacheHealthResponseOutput() CacheHealthResponseOutput {
	return i.ToCacheHealthResponseOutputWithContext(context.Background())
}

func (i CacheHealthResponseArgs) ToCacheHealthResponseOutputWithContext(ctx context.Context) CacheHealthResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheHealthResponseOutput)
}

func (i CacheHealthResponseArgs) ToCacheHealthResponsePtrOutput() CacheHealthResponsePtrOutput {
	return i.ToCacheHealthResponsePtrOutputWithContext(context.Background())
}

func (i CacheHealthResponseArgs) ToCacheHealthResponsePtrOutputWithContext(ctx context.Context) CacheHealthResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheHealthResponseOutput).ToCacheHealthResponsePtrOutputWithContext(ctx)
}

// CacheHealthResponsePtrInput is an input type that accepts CacheHealthResponseArgs, CacheHealthResponsePtr and CacheHealthResponsePtrOutput values.
// You can construct a concrete instance of `CacheHealthResponsePtrInput` via:
//
//          CacheHealthResponseArgs{...}
//
//  or:
//
//          nil
type CacheHealthResponsePtrInput interface {
	pulumi.Input

	ToCacheHealthResponsePtrOutput() CacheHealthResponsePtrOutput
	ToCacheHealthResponsePtrOutputWithContext(context.Context) CacheHealthResponsePtrOutput
}

type cacheHealthResponsePtrType CacheHealthResponseArgs

func CacheHealthResponsePtr(v *CacheHealthResponseArgs) CacheHealthResponsePtrInput {
	return (*cacheHealthResponsePtrType)(v)
}

func (*cacheHealthResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheHealthResponse)(nil)).Elem()
}

func (i *cacheHealthResponsePtrType) ToCacheHealthResponsePtrOutput() CacheHealthResponsePtrOutput {
	return i.ToCacheHealthResponsePtrOutputWithContext(context.Background())
}

func (i *cacheHealthResponsePtrType) ToCacheHealthResponsePtrOutputWithContext(ctx context.Context) CacheHealthResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheHealthResponsePtrOutput)
}

// An indication of Cache health. Gives more information about health than just that related to provisioning.
type CacheHealthResponseOutput struct{ *pulumi.OutputState }

func (CacheHealthResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheHealthResponse)(nil)).Elem()
}

func (o CacheHealthResponseOutput) ToCacheHealthResponseOutput() CacheHealthResponseOutput {
	return o
}

func (o CacheHealthResponseOutput) ToCacheHealthResponseOutputWithContext(ctx context.Context) CacheHealthResponseOutput {
	return o
}

func (o CacheHealthResponseOutput) ToCacheHealthResponsePtrOutput() CacheHealthResponsePtrOutput {
	return o.ToCacheHealthResponsePtrOutputWithContext(context.Background())
}

func (o CacheHealthResponseOutput) ToCacheHealthResponsePtrOutputWithContext(ctx context.Context) CacheHealthResponsePtrOutput {
	return o.ApplyT(func(v CacheHealthResponse) *CacheHealthResponse {
		return &v
	}).(CacheHealthResponsePtrOutput)
}

// List of Cache health states.
func (o CacheHealthResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheHealthResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Describes explanation of state.
func (o CacheHealthResponseOutput) StatusDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheHealthResponse) *string { return v.StatusDescription }).(pulumi.StringPtrOutput)
}

type CacheHealthResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheHealthResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheHealthResponse)(nil)).Elem()
}

func (o CacheHealthResponsePtrOutput) ToCacheHealthResponsePtrOutput() CacheHealthResponsePtrOutput {
	return o
}

func (o CacheHealthResponsePtrOutput) ToCacheHealthResponsePtrOutputWithContext(ctx context.Context) CacheHealthResponsePtrOutput {
	return o
}

func (o CacheHealthResponsePtrOutput) Elem() CacheHealthResponseOutput {
	return o.ApplyT(func(v *CacheHealthResponse) CacheHealthResponse { return *v }).(CacheHealthResponseOutput)
}

// List of Cache health states.
func (o CacheHealthResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheHealthResponse) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Describes explanation of state.
func (o CacheHealthResponsePtrOutput) StatusDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheHealthResponse) *string {
		if v == nil {
			return nil
		}
		return v.StatusDescription
	}).(pulumi.StringPtrOutput)
}

// SKU for the Cache.
type CacheResponseSku struct {
	// SKU name for this Cache.
	Name *string `pulumi:"name"`
}

// CacheResponseSkuInput is an input type that accepts CacheResponseSkuArgs and CacheResponseSkuOutput values.
// You can construct a concrete instance of `CacheResponseSkuInput` via:
//
//          CacheResponseSkuArgs{...}
type CacheResponseSkuInput interface {
	pulumi.Input

	ToCacheResponseSkuOutput() CacheResponseSkuOutput
	ToCacheResponseSkuOutputWithContext(context.Context) CacheResponseSkuOutput
}

// SKU for the Cache.
type CacheResponseSkuArgs struct {
	// SKU name for this Cache.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CacheResponseSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheResponseSku)(nil)).Elem()
}

func (i CacheResponseSkuArgs) ToCacheResponseSkuOutput() CacheResponseSkuOutput {
	return i.ToCacheResponseSkuOutputWithContext(context.Background())
}

func (i CacheResponseSkuArgs) ToCacheResponseSkuOutputWithContext(ctx context.Context) CacheResponseSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheResponseSkuOutput)
}

func (i CacheResponseSkuArgs) ToCacheResponseSkuPtrOutput() CacheResponseSkuPtrOutput {
	return i.ToCacheResponseSkuPtrOutputWithContext(context.Background())
}

func (i CacheResponseSkuArgs) ToCacheResponseSkuPtrOutputWithContext(ctx context.Context) CacheResponseSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheResponseSkuOutput).ToCacheResponseSkuPtrOutputWithContext(ctx)
}

// CacheResponseSkuPtrInput is an input type that accepts CacheResponseSkuArgs, CacheResponseSkuPtr and CacheResponseSkuPtrOutput values.
// You can construct a concrete instance of `CacheResponseSkuPtrInput` via:
//
//          CacheResponseSkuArgs{...}
//
//  or:
//
//          nil
type CacheResponseSkuPtrInput interface {
	pulumi.Input

	ToCacheResponseSkuPtrOutput() CacheResponseSkuPtrOutput
	ToCacheResponseSkuPtrOutputWithContext(context.Context) CacheResponseSkuPtrOutput
}

type cacheResponseSkuPtrType CacheResponseSkuArgs

func CacheResponseSkuPtr(v *CacheResponseSkuArgs) CacheResponseSkuPtrInput {
	return (*cacheResponseSkuPtrType)(v)
}

func (*cacheResponseSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheResponseSku)(nil)).Elem()
}

func (i *cacheResponseSkuPtrType) ToCacheResponseSkuPtrOutput() CacheResponseSkuPtrOutput {
	return i.ToCacheResponseSkuPtrOutputWithContext(context.Background())
}

func (i *cacheResponseSkuPtrType) ToCacheResponseSkuPtrOutputWithContext(ctx context.Context) CacheResponseSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheResponseSkuPtrOutput)
}

// SKU for the Cache.
type CacheResponseSkuOutput struct{ *pulumi.OutputState }

func (CacheResponseSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheResponseSku)(nil)).Elem()
}

func (o CacheResponseSkuOutput) ToCacheResponseSkuOutput() CacheResponseSkuOutput {
	return o
}

func (o CacheResponseSkuOutput) ToCacheResponseSkuOutputWithContext(ctx context.Context) CacheResponseSkuOutput {
	return o
}

func (o CacheResponseSkuOutput) ToCacheResponseSkuPtrOutput() CacheResponseSkuPtrOutput {
	return o.ToCacheResponseSkuPtrOutputWithContext(context.Background())
}

func (o CacheResponseSkuOutput) ToCacheResponseSkuPtrOutputWithContext(ctx context.Context) CacheResponseSkuPtrOutput {
	return o.ApplyT(func(v CacheResponseSku) *CacheResponseSku {
		return &v
	}).(CacheResponseSkuPtrOutput)
}

// SKU name for this Cache.
func (o CacheResponseSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheResponseSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CacheResponseSkuPtrOutput struct{ *pulumi.OutputState }

func (CacheResponseSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheResponseSku)(nil)).Elem()
}

func (o CacheResponseSkuPtrOutput) ToCacheResponseSkuPtrOutput() CacheResponseSkuPtrOutput {
	return o
}

func (o CacheResponseSkuPtrOutput) ToCacheResponseSkuPtrOutputWithContext(ctx context.Context) CacheResponseSkuPtrOutput {
	return o
}

func (o CacheResponseSkuPtrOutput) Elem() CacheResponseSkuOutput {
	return o.ApplyT(func(v *CacheResponseSku) CacheResponseSku { return *v }).(CacheResponseSkuOutput)
}

// SKU name for this Cache.
func (o CacheResponseSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheResponseSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// SKU for the Cache.
type CacheSku struct {
	// SKU name for this Cache.
	Name *string `pulumi:"name"`
}

// CacheSkuInput is an input type that accepts CacheSkuArgs and CacheSkuOutput values.
// You can construct a concrete instance of `CacheSkuInput` via:
//
//          CacheSkuArgs{...}
type CacheSkuInput interface {
	pulumi.Input

	ToCacheSkuOutput() CacheSkuOutput
	ToCacheSkuOutputWithContext(context.Context) CacheSkuOutput
}

// SKU for the Cache.
type CacheSkuArgs struct {
	// SKU name for this Cache.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CacheSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheSku)(nil)).Elem()
}

func (i CacheSkuArgs) ToCacheSkuOutput() CacheSkuOutput {
	return i.ToCacheSkuOutputWithContext(context.Background())
}

func (i CacheSkuArgs) ToCacheSkuOutputWithContext(ctx context.Context) CacheSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSkuOutput)
}

func (i CacheSkuArgs) ToCacheSkuPtrOutput() CacheSkuPtrOutput {
	return i.ToCacheSkuPtrOutputWithContext(context.Background())
}

func (i CacheSkuArgs) ToCacheSkuPtrOutputWithContext(ctx context.Context) CacheSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSkuOutput).ToCacheSkuPtrOutputWithContext(ctx)
}

// CacheSkuPtrInput is an input type that accepts CacheSkuArgs, CacheSkuPtr and CacheSkuPtrOutput values.
// You can construct a concrete instance of `CacheSkuPtrInput` via:
//
//          CacheSkuArgs{...}
//
//  or:
//
//          nil
type CacheSkuPtrInput interface {
	pulumi.Input

	ToCacheSkuPtrOutput() CacheSkuPtrOutput
	ToCacheSkuPtrOutputWithContext(context.Context) CacheSkuPtrOutput
}

type cacheSkuPtrType CacheSkuArgs

func CacheSkuPtr(v *CacheSkuArgs) CacheSkuPtrInput {
	return (*cacheSkuPtrType)(v)
}

func (*cacheSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheSku)(nil)).Elem()
}

func (i *cacheSkuPtrType) ToCacheSkuPtrOutput() CacheSkuPtrOutput {
	return i.ToCacheSkuPtrOutputWithContext(context.Background())
}

func (i *cacheSkuPtrType) ToCacheSkuPtrOutputWithContext(ctx context.Context) CacheSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheSkuPtrOutput)
}

// SKU for the Cache.
type CacheSkuOutput struct{ *pulumi.OutputState }

func (CacheSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheSku)(nil)).Elem()
}

func (o CacheSkuOutput) ToCacheSkuOutput() CacheSkuOutput {
	return o
}

func (o CacheSkuOutput) ToCacheSkuOutputWithContext(ctx context.Context) CacheSkuOutput {
	return o
}

func (o CacheSkuOutput) ToCacheSkuPtrOutput() CacheSkuPtrOutput {
	return o.ToCacheSkuPtrOutputWithContext(context.Background())
}

func (o CacheSkuOutput) ToCacheSkuPtrOutputWithContext(ctx context.Context) CacheSkuPtrOutput {
	return o.ApplyT(func(v CacheSku) *CacheSku {
		return &v
	}).(CacheSkuPtrOutput)
}

// SKU name for this Cache.
func (o CacheSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CacheSkuPtrOutput struct{ *pulumi.OutputState }

func (CacheSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheSku)(nil)).Elem()
}

func (o CacheSkuPtrOutput) ToCacheSkuPtrOutput() CacheSkuPtrOutput {
	return o
}

func (o CacheSkuPtrOutput) ToCacheSkuPtrOutputWithContext(ctx context.Context) CacheSkuPtrOutput {
	return o
}

func (o CacheSkuPtrOutput) Elem() CacheSkuOutput {
	return o.ApplyT(func(v *CacheSku) CacheSku { return *v }).(CacheSkuOutput)
}

// SKU name for this Cache.
func (o CacheSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Properties describing the software upgrade state of the Cache.
type CacheUpgradeStatusResponse struct {
	// Version string of the firmware currently installed on this Cache.
	CurrentFirmwareVersion string `pulumi:"currentFirmwareVersion"`
	// Time at which the pending firmware update will automatically be installed on the Cache.
	FirmwareUpdateDeadline string `pulumi:"firmwareUpdateDeadline"`
	// True if there is a firmware update ready to install on this Cache. The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
	FirmwareUpdateStatus string `pulumi:"firmwareUpdateStatus"`
	// Time of the last successful firmware update.
	LastFirmwareUpdate string `pulumi:"lastFirmwareUpdate"`
	// When firmwareUpdateAvailable is true, this field holds the version string for the update.
	PendingFirmwareVersion string `pulumi:"pendingFirmwareVersion"`
}

// CacheUpgradeStatusResponseInput is an input type that accepts CacheUpgradeStatusResponseArgs and CacheUpgradeStatusResponseOutput values.
// You can construct a concrete instance of `CacheUpgradeStatusResponseInput` via:
//
//          CacheUpgradeStatusResponseArgs{...}
type CacheUpgradeStatusResponseInput interface {
	pulumi.Input

	ToCacheUpgradeStatusResponseOutput() CacheUpgradeStatusResponseOutput
	ToCacheUpgradeStatusResponseOutputWithContext(context.Context) CacheUpgradeStatusResponseOutput
}

// Properties describing the software upgrade state of the Cache.
type CacheUpgradeStatusResponseArgs struct {
	// Version string of the firmware currently installed on this Cache.
	CurrentFirmwareVersion pulumi.StringInput `pulumi:"currentFirmwareVersion"`
	// Time at which the pending firmware update will automatically be installed on the Cache.
	FirmwareUpdateDeadline pulumi.StringInput `pulumi:"firmwareUpdateDeadline"`
	// True if there is a firmware update ready to install on this Cache. The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
	FirmwareUpdateStatus pulumi.StringInput `pulumi:"firmwareUpdateStatus"`
	// Time of the last successful firmware update.
	LastFirmwareUpdate pulumi.StringInput `pulumi:"lastFirmwareUpdate"`
	// When firmwareUpdateAvailable is true, this field holds the version string for the update.
	PendingFirmwareVersion pulumi.StringInput `pulumi:"pendingFirmwareVersion"`
}

func (CacheUpgradeStatusResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUpgradeStatusResponse)(nil)).Elem()
}

func (i CacheUpgradeStatusResponseArgs) ToCacheUpgradeStatusResponseOutput() CacheUpgradeStatusResponseOutput {
	return i.ToCacheUpgradeStatusResponseOutputWithContext(context.Background())
}

func (i CacheUpgradeStatusResponseArgs) ToCacheUpgradeStatusResponseOutputWithContext(ctx context.Context) CacheUpgradeStatusResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUpgradeStatusResponseOutput)
}

func (i CacheUpgradeStatusResponseArgs) ToCacheUpgradeStatusResponsePtrOutput() CacheUpgradeStatusResponsePtrOutput {
	return i.ToCacheUpgradeStatusResponsePtrOutputWithContext(context.Background())
}

func (i CacheUpgradeStatusResponseArgs) ToCacheUpgradeStatusResponsePtrOutputWithContext(ctx context.Context) CacheUpgradeStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUpgradeStatusResponseOutput).ToCacheUpgradeStatusResponsePtrOutputWithContext(ctx)
}

// CacheUpgradeStatusResponsePtrInput is an input type that accepts CacheUpgradeStatusResponseArgs, CacheUpgradeStatusResponsePtr and CacheUpgradeStatusResponsePtrOutput values.
// You can construct a concrete instance of `CacheUpgradeStatusResponsePtrInput` via:
//
//          CacheUpgradeStatusResponseArgs{...}
//
//  or:
//
//          nil
type CacheUpgradeStatusResponsePtrInput interface {
	pulumi.Input

	ToCacheUpgradeStatusResponsePtrOutput() CacheUpgradeStatusResponsePtrOutput
	ToCacheUpgradeStatusResponsePtrOutputWithContext(context.Context) CacheUpgradeStatusResponsePtrOutput
}

type cacheUpgradeStatusResponsePtrType CacheUpgradeStatusResponseArgs

func CacheUpgradeStatusResponsePtr(v *CacheUpgradeStatusResponseArgs) CacheUpgradeStatusResponsePtrInput {
	return (*cacheUpgradeStatusResponsePtrType)(v)
}

func (*cacheUpgradeStatusResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheUpgradeStatusResponse)(nil)).Elem()
}

func (i *cacheUpgradeStatusResponsePtrType) ToCacheUpgradeStatusResponsePtrOutput() CacheUpgradeStatusResponsePtrOutput {
	return i.ToCacheUpgradeStatusResponsePtrOutputWithContext(context.Background())
}

func (i *cacheUpgradeStatusResponsePtrType) ToCacheUpgradeStatusResponsePtrOutputWithContext(ctx context.Context) CacheUpgradeStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheUpgradeStatusResponsePtrOutput)
}

// Properties describing the software upgrade state of the Cache.
type CacheUpgradeStatusResponseOutput struct{ *pulumi.OutputState }

func (CacheUpgradeStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheUpgradeStatusResponse)(nil)).Elem()
}

func (o CacheUpgradeStatusResponseOutput) ToCacheUpgradeStatusResponseOutput() CacheUpgradeStatusResponseOutput {
	return o
}

func (o CacheUpgradeStatusResponseOutput) ToCacheUpgradeStatusResponseOutputWithContext(ctx context.Context) CacheUpgradeStatusResponseOutput {
	return o
}

func (o CacheUpgradeStatusResponseOutput) ToCacheUpgradeStatusResponsePtrOutput() CacheUpgradeStatusResponsePtrOutput {
	return o.ToCacheUpgradeStatusResponsePtrOutputWithContext(context.Background())
}

func (o CacheUpgradeStatusResponseOutput) ToCacheUpgradeStatusResponsePtrOutputWithContext(ctx context.Context) CacheUpgradeStatusResponsePtrOutput {
	return o.ApplyT(func(v CacheUpgradeStatusResponse) *CacheUpgradeStatusResponse {
		return &v
	}).(CacheUpgradeStatusResponsePtrOutput)
}

// Version string of the firmware currently installed on this Cache.
func (o CacheUpgradeStatusResponseOutput) CurrentFirmwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CacheUpgradeStatusResponse) string { return v.CurrentFirmwareVersion }).(pulumi.StringOutput)
}

// Time at which the pending firmware update will automatically be installed on the Cache.
func (o CacheUpgradeStatusResponseOutput) FirmwareUpdateDeadline() pulumi.StringOutput {
	return o.ApplyT(func(v CacheUpgradeStatusResponse) string { return v.FirmwareUpdateDeadline }).(pulumi.StringOutput)
}

// True if there is a firmware update ready to install on this Cache. The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
func (o CacheUpgradeStatusResponseOutput) FirmwareUpdateStatus() pulumi.StringOutput {
	return o.ApplyT(func(v CacheUpgradeStatusResponse) string { return v.FirmwareUpdateStatus }).(pulumi.StringOutput)
}

// Time of the last successful firmware update.
func (o CacheUpgradeStatusResponseOutput) LastFirmwareUpdate() pulumi.StringOutput {
	return o.ApplyT(func(v CacheUpgradeStatusResponse) string { return v.LastFirmwareUpdate }).(pulumi.StringOutput)
}

// When firmwareUpdateAvailable is true, this field holds the version string for the update.
func (o CacheUpgradeStatusResponseOutput) PendingFirmwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CacheUpgradeStatusResponse) string { return v.PendingFirmwareVersion }).(pulumi.StringOutput)
}

type CacheUpgradeStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheUpgradeStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheUpgradeStatusResponse)(nil)).Elem()
}

func (o CacheUpgradeStatusResponsePtrOutput) ToCacheUpgradeStatusResponsePtrOutput() CacheUpgradeStatusResponsePtrOutput {
	return o
}

func (o CacheUpgradeStatusResponsePtrOutput) ToCacheUpgradeStatusResponsePtrOutputWithContext(ctx context.Context) CacheUpgradeStatusResponsePtrOutput {
	return o
}

func (o CacheUpgradeStatusResponsePtrOutput) Elem() CacheUpgradeStatusResponseOutput {
	return o.ApplyT(func(v *CacheUpgradeStatusResponse) CacheUpgradeStatusResponse { return *v }).(CacheUpgradeStatusResponseOutput)
}

// Version string of the firmware currently installed on this Cache.
func (o CacheUpgradeStatusResponsePtrOutput) CurrentFirmwareVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUpgradeStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CurrentFirmwareVersion
	}).(pulumi.StringPtrOutput)
}

// Time at which the pending firmware update will automatically be installed on the Cache.
func (o CacheUpgradeStatusResponsePtrOutput) FirmwareUpdateDeadline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUpgradeStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.FirmwareUpdateDeadline
	}).(pulumi.StringPtrOutput)
}

// True if there is a firmware update ready to install on this Cache. The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
func (o CacheUpgradeStatusResponsePtrOutput) FirmwareUpdateStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUpgradeStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.FirmwareUpdateStatus
	}).(pulumi.StringPtrOutput)
}

// Time of the last successful firmware update.
func (o CacheUpgradeStatusResponsePtrOutput) LastFirmwareUpdate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUpgradeStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastFirmwareUpdate
	}).(pulumi.StringPtrOutput)
}

// When firmwareUpdateAvailable is true, this field holds the version string for the update.
func (o CacheUpgradeStatusResponsePtrOutput) PendingFirmwareVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheUpgradeStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PendingFirmwareVersion
	}).(pulumi.StringPtrOutput)
}

// Storage container for use as a CLFS Storage Target.
type ClfsTarget struct {
	// Resource ID of storage container.
	Target *string `pulumi:"target"`
}

// ClfsTargetInput is an input type that accepts ClfsTargetArgs and ClfsTargetOutput values.
// You can construct a concrete instance of `ClfsTargetInput` via:
//
//          ClfsTargetArgs{...}
type ClfsTargetInput interface {
	pulumi.Input

	ToClfsTargetOutput() ClfsTargetOutput
	ToClfsTargetOutputWithContext(context.Context) ClfsTargetOutput
}

// Storage container for use as a CLFS Storage Target.
type ClfsTargetArgs struct {
	// Resource ID of storage container.
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (ClfsTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClfsTarget)(nil)).Elem()
}

func (i ClfsTargetArgs) ToClfsTargetOutput() ClfsTargetOutput {
	return i.ToClfsTargetOutputWithContext(context.Background())
}

func (i ClfsTargetArgs) ToClfsTargetOutputWithContext(ctx context.Context) ClfsTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClfsTargetOutput)
}

func (i ClfsTargetArgs) ToClfsTargetPtrOutput() ClfsTargetPtrOutput {
	return i.ToClfsTargetPtrOutputWithContext(context.Background())
}

func (i ClfsTargetArgs) ToClfsTargetPtrOutputWithContext(ctx context.Context) ClfsTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClfsTargetOutput).ToClfsTargetPtrOutputWithContext(ctx)
}

// ClfsTargetPtrInput is an input type that accepts ClfsTargetArgs, ClfsTargetPtr and ClfsTargetPtrOutput values.
// You can construct a concrete instance of `ClfsTargetPtrInput` via:
//
//          ClfsTargetArgs{...}
//
//  or:
//
//          nil
type ClfsTargetPtrInput interface {
	pulumi.Input

	ToClfsTargetPtrOutput() ClfsTargetPtrOutput
	ToClfsTargetPtrOutputWithContext(context.Context) ClfsTargetPtrOutput
}

type clfsTargetPtrType ClfsTargetArgs

func ClfsTargetPtr(v *ClfsTargetArgs) ClfsTargetPtrInput {
	return (*clfsTargetPtrType)(v)
}

func (*clfsTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClfsTarget)(nil)).Elem()
}

func (i *clfsTargetPtrType) ToClfsTargetPtrOutput() ClfsTargetPtrOutput {
	return i.ToClfsTargetPtrOutputWithContext(context.Background())
}

func (i *clfsTargetPtrType) ToClfsTargetPtrOutputWithContext(ctx context.Context) ClfsTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClfsTargetPtrOutput)
}

// Storage container for use as a CLFS Storage Target.
type ClfsTargetOutput struct{ *pulumi.OutputState }

func (ClfsTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClfsTarget)(nil)).Elem()
}

func (o ClfsTargetOutput) ToClfsTargetOutput() ClfsTargetOutput {
	return o
}

func (o ClfsTargetOutput) ToClfsTargetOutputWithContext(ctx context.Context) ClfsTargetOutput {
	return o
}

func (o ClfsTargetOutput) ToClfsTargetPtrOutput() ClfsTargetPtrOutput {
	return o.ToClfsTargetPtrOutputWithContext(context.Background())
}

func (o ClfsTargetOutput) ToClfsTargetPtrOutputWithContext(ctx context.Context) ClfsTargetPtrOutput {
	return o.ApplyT(func(v ClfsTarget) *ClfsTarget {
		return &v
	}).(ClfsTargetPtrOutput)
}

// Resource ID of storage container.
func (o ClfsTargetOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClfsTarget) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type ClfsTargetPtrOutput struct{ *pulumi.OutputState }

func (ClfsTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClfsTarget)(nil)).Elem()
}

func (o ClfsTargetPtrOutput) ToClfsTargetPtrOutput() ClfsTargetPtrOutput {
	return o
}

func (o ClfsTargetPtrOutput) ToClfsTargetPtrOutputWithContext(ctx context.Context) ClfsTargetPtrOutput {
	return o
}

func (o ClfsTargetPtrOutput) Elem() ClfsTargetOutput {
	return o.ApplyT(func(v *ClfsTarget) ClfsTarget { return *v }).(ClfsTargetOutput)
}

// Resource ID of storage container.
func (o ClfsTargetPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClfsTarget) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Storage container for use as a CLFS Storage Target.
type ClfsTargetResponse struct {
	// Resource ID of storage container.
	Target *string `pulumi:"target"`
}

// ClfsTargetResponseInput is an input type that accepts ClfsTargetResponseArgs and ClfsTargetResponseOutput values.
// You can construct a concrete instance of `ClfsTargetResponseInput` via:
//
//          ClfsTargetResponseArgs{...}
type ClfsTargetResponseInput interface {
	pulumi.Input

	ToClfsTargetResponseOutput() ClfsTargetResponseOutput
	ToClfsTargetResponseOutputWithContext(context.Context) ClfsTargetResponseOutput
}

// Storage container for use as a CLFS Storage Target.
type ClfsTargetResponseArgs struct {
	// Resource ID of storage container.
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (ClfsTargetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClfsTargetResponse)(nil)).Elem()
}

func (i ClfsTargetResponseArgs) ToClfsTargetResponseOutput() ClfsTargetResponseOutput {
	return i.ToClfsTargetResponseOutputWithContext(context.Background())
}

func (i ClfsTargetResponseArgs) ToClfsTargetResponseOutputWithContext(ctx context.Context) ClfsTargetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClfsTargetResponseOutput)
}

func (i ClfsTargetResponseArgs) ToClfsTargetResponsePtrOutput() ClfsTargetResponsePtrOutput {
	return i.ToClfsTargetResponsePtrOutputWithContext(context.Background())
}

func (i ClfsTargetResponseArgs) ToClfsTargetResponsePtrOutputWithContext(ctx context.Context) ClfsTargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClfsTargetResponseOutput).ToClfsTargetResponsePtrOutputWithContext(ctx)
}

// ClfsTargetResponsePtrInput is an input type that accepts ClfsTargetResponseArgs, ClfsTargetResponsePtr and ClfsTargetResponsePtrOutput values.
// You can construct a concrete instance of `ClfsTargetResponsePtrInput` via:
//
//          ClfsTargetResponseArgs{...}
//
//  or:
//
//          nil
type ClfsTargetResponsePtrInput interface {
	pulumi.Input

	ToClfsTargetResponsePtrOutput() ClfsTargetResponsePtrOutput
	ToClfsTargetResponsePtrOutputWithContext(context.Context) ClfsTargetResponsePtrOutput
}

type clfsTargetResponsePtrType ClfsTargetResponseArgs

func ClfsTargetResponsePtr(v *ClfsTargetResponseArgs) ClfsTargetResponsePtrInput {
	return (*clfsTargetResponsePtrType)(v)
}

func (*clfsTargetResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClfsTargetResponse)(nil)).Elem()
}

func (i *clfsTargetResponsePtrType) ToClfsTargetResponsePtrOutput() ClfsTargetResponsePtrOutput {
	return i.ToClfsTargetResponsePtrOutputWithContext(context.Background())
}

func (i *clfsTargetResponsePtrType) ToClfsTargetResponsePtrOutputWithContext(ctx context.Context) ClfsTargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClfsTargetResponsePtrOutput)
}

// Storage container for use as a CLFS Storage Target.
type ClfsTargetResponseOutput struct{ *pulumi.OutputState }

func (ClfsTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClfsTargetResponse)(nil)).Elem()
}

func (o ClfsTargetResponseOutput) ToClfsTargetResponseOutput() ClfsTargetResponseOutput {
	return o
}

func (o ClfsTargetResponseOutput) ToClfsTargetResponseOutputWithContext(ctx context.Context) ClfsTargetResponseOutput {
	return o
}

func (o ClfsTargetResponseOutput) ToClfsTargetResponsePtrOutput() ClfsTargetResponsePtrOutput {
	return o.ToClfsTargetResponsePtrOutputWithContext(context.Background())
}

func (o ClfsTargetResponseOutput) ToClfsTargetResponsePtrOutputWithContext(ctx context.Context) ClfsTargetResponsePtrOutput {
	return o.ApplyT(func(v ClfsTargetResponse) *ClfsTargetResponse {
		return &v
	}).(ClfsTargetResponsePtrOutput)
}

// Resource ID of storage container.
func (o ClfsTargetResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClfsTargetResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type ClfsTargetResponsePtrOutput struct{ *pulumi.OutputState }

func (ClfsTargetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClfsTargetResponse)(nil)).Elem()
}

func (o ClfsTargetResponsePtrOutput) ToClfsTargetResponsePtrOutput() ClfsTargetResponsePtrOutput {
	return o
}

func (o ClfsTargetResponsePtrOutput) ToClfsTargetResponsePtrOutputWithContext(ctx context.Context) ClfsTargetResponsePtrOutput {
	return o
}

func (o ClfsTargetResponsePtrOutput) Elem() ClfsTargetResponseOutput {
	return o.ApplyT(func(v *ClfsTargetResponse) ClfsTargetResponse { return *v }).(ClfsTargetResponseOutput)
}

// Resource ID of storage container.
func (o ClfsTargetResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClfsTargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// A namespace junction.
type NamespaceJunction struct {
	// Namespace path on a Cache for a Storage Target.
	NamespacePath *string `pulumi:"namespacePath"`
	// NFS export where targetPath exists.
	NfsExport *string `pulumi:"nfsExport"`
	// Path in Storage Target to which namespacePath points.
	TargetPath *string `pulumi:"targetPath"`
}

// NamespaceJunctionInput is an input type that accepts NamespaceJunctionArgs and NamespaceJunctionOutput values.
// You can construct a concrete instance of `NamespaceJunctionInput` via:
//
//          NamespaceJunctionArgs{...}
type NamespaceJunctionInput interface {
	pulumi.Input

	ToNamespaceJunctionOutput() NamespaceJunctionOutput
	ToNamespaceJunctionOutputWithContext(context.Context) NamespaceJunctionOutput
}

// A namespace junction.
type NamespaceJunctionArgs struct {
	// Namespace path on a Cache for a Storage Target.
	NamespacePath pulumi.StringPtrInput `pulumi:"namespacePath"`
	// NFS export where targetPath exists.
	NfsExport pulumi.StringPtrInput `pulumi:"nfsExport"`
	// Path in Storage Target to which namespacePath points.
	TargetPath pulumi.StringPtrInput `pulumi:"targetPath"`
}

func (NamespaceJunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceJunction)(nil)).Elem()
}

func (i NamespaceJunctionArgs) ToNamespaceJunctionOutput() NamespaceJunctionOutput {
	return i.ToNamespaceJunctionOutputWithContext(context.Background())
}

func (i NamespaceJunctionArgs) ToNamespaceJunctionOutputWithContext(ctx context.Context) NamespaceJunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceJunctionOutput)
}

// NamespaceJunctionArrayInput is an input type that accepts NamespaceJunctionArray and NamespaceJunctionArrayOutput values.
// You can construct a concrete instance of `NamespaceJunctionArrayInput` via:
//
//          NamespaceJunctionArray{ NamespaceJunctionArgs{...} }
type NamespaceJunctionArrayInput interface {
	pulumi.Input

	ToNamespaceJunctionArrayOutput() NamespaceJunctionArrayOutput
	ToNamespaceJunctionArrayOutputWithContext(context.Context) NamespaceJunctionArrayOutput
}

type NamespaceJunctionArray []NamespaceJunctionInput

func (NamespaceJunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceJunction)(nil)).Elem()
}

func (i NamespaceJunctionArray) ToNamespaceJunctionArrayOutput() NamespaceJunctionArrayOutput {
	return i.ToNamespaceJunctionArrayOutputWithContext(context.Background())
}

func (i NamespaceJunctionArray) ToNamespaceJunctionArrayOutputWithContext(ctx context.Context) NamespaceJunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceJunctionArrayOutput)
}

// A namespace junction.
type NamespaceJunctionOutput struct{ *pulumi.OutputState }

func (NamespaceJunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceJunction)(nil)).Elem()
}

func (o NamespaceJunctionOutput) ToNamespaceJunctionOutput() NamespaceJunctionOutput {
	return o
}

func (o NamespaceJunctionOutput) ToNamespaceJunctionOutputWithContext(ctx context.Context) NamespaceJunctionOutput {
	return o
}

// Namespace path on a Cache for a Storage Target.
func (o NamespaceJunctionOutput) NamespacePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunction) *string { return v.NamespacePath }).(pulumi.StringPtrOutput)
}

// NFS export where targetPath exists.
func (o NamespaceJunctionOutput) NfsExport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunction) *string { return v.NfsExport }).(pulumi.StringPtrOutput)
}

// Path in Storage Target to which namespacePath points.
func (o NamespaceJunctionOutput) TargetPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunction) *string { return v.TargetPath }).(pulumi.StringPtrOutput)
}

type NamespaceJunctionArrayOutput struct{ *pulumi.OutputState }

func (NamespaceJunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceJunction)(nil)).Elem()
}

func (o NamespaceJunctionArrayOutput) ToNamespaceJunctionArrayOutput() NamespaceJunctionArrayOutput {
	return o
}

func (o NamespaceJunctionArrayOutput) ToNamespaceJunctionArrayOutputWithContext(ctx context.Context) NamespaceJunctionArrayOutput {
	return o
}

func (o NamespaceJunctionArrayOutput) Index(i pulumi.IntInput) NamespaceJunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamespaceJunction {
		return vs[0].([]NamespaceJunction)[vs[1].(int)]
	}).(NamespaceJunctionOutput)
}

// A namespace junction.
type NamespaceJunctionResponse struct {
	// Namespace path on a Cache for a Storage Target.
	NamespacePath *string `pulumi:"namespacePath"`
	// NFS export where targetPath exists.
	NfsExport *string `pulumi:"nfsExport"`
	// Path in Storage Target to which namespacePath points.
	TargetPath *string `pulumi:"targetPath"`
}

// NamespaceJunctionResponseInput is an input type that accepts NamespaceJunctionResponseArgs and NamespaceJunctionResponseOutput values.
// You can construct a concrete instance of `NamespaceJunctionResponseInput` via:
//
//          NamespaceJunctionResponseArgs{...}
type NamespaceJunctionResponseInput interface {
	pulumi.Input

	ToNamespaceJunctionResponseOutput() NamespaceJunctionResponseOutput
	ToNamespaceJunctionResponseOutputWithContext(context.Context) NamespaceJunctionResponseOutput
}

// A namespace junction.
type NamespaceJunctionResponseArgs struct {
	// Namespace path on a Cache for a Storage Target.
	NamespacePath pulumi.StringPtrInput `pulumi:"namespacePath"`
	// NFS export where targetPath exists.
	NfsExport pulumi.StringPtrInput `pulumi:"nfsExport"`
	// Path in Storage Target to which namespacePath points.
	TargetPath pulumi.StringPtrInput `pulumi:"targetPath"`
}

func (NamespaceJunctionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceJunctionResponse)(nil)).Elem()
}

func (i NamespaceJunctionResponseArgs) ToNamespaceJunctionResponseOutput() NamespaceJunctionResponseOutput {
	return i.ToNamespaceJunctionResponseOutputWithContext(context.Background())
}

func (i NamespaceJunctionResponseArgs) ToNamespaceJunctionResponseOutputWithContext(ctx context.Context) NamespaceJunctionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceJunctionResponseOutput)
}

// NamespaceJunctionResponseArrayInput is an input type that accepts NamespaceJunctionResponseArray and NamespaceJunctionResponseArrayOutput values.
// You can construct a concrete instance of `NamespaceJunctionResponseArrayInput` via:
//
//          NamespaceJunctionResponseArray{ NamespaceJunctionResponseArgs{...} }
type NamespaceJunctionResponseArrayInput interface {
	pulumi.Input

	ToNamespaceJunctionResponseArrayOutput() NamespaceJunctionResponseArrayOutput
	ToNamespaceJunctionResponseArrayOutputWithContext(context.Context) NamespaceJunctionResponseArrayOutput
}

type NamespaceJunctionResponseArray []NamespaceJunctionResponseInput

func (NamespaceJunctionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceJunctionResponse)(nil)).Elem()
}

func (i NamespaceJunctionResponseArray) ToNamespaceJunctionResponseArrayOutput() NamespaceJunctionResponseArrayOutput {
	return i.ToNamespaceJunctionResponseArrayOutputWithContext(context.Background())
}

func (i NamespaceJunctionResponseArray) ToNamespaceJunctionResponseArrayOutputWithContext(ctx context.Context) NamespaceJunctionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceJunctionResponseArrayOutput)
}

// A namespace junction.
type NamespaceJunctionResponseOutput struct{ *pulumi.OutputState }

func (NamespaceJunctionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceJunctionResponse)(nil)).Elem()
}

func (o NamespaceJunctionResponseOutput) ToNamespaceJunctionResponseOutput() NamespaceJunctionResponseOutput {
	return o
}

func (o NamespaceJunctionResponseOutput) ToNamespaceJunctionResponseOutputWithContext(ctx context.Context) NamespaceJunctionResponseOutput {
	return o
}

// Namespace path on a Cache for a Storage Target.
func (o NamespaceJunctionResponseOutput) NamespacePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunctionResponse) *string { return v.NamespacePath }).(pulumi.StringPtrOutput)
}

// NFS export where targetPath exists.
func (o NamespaceJunctionResponseOutput) NfsExport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunctionResponse) *string { return v.NfsExport }).(pulumi.StringPtrOutput)
}

// Path in Storage Target to which namespacePath points.
func (o NamespaceJunctionResponseOutput) TargetPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceJunctionResponse) *string { return v.TargetPath }).(pulumi.StringPtrOutput)
}

type NamespaceJunctionResponseArrayOutput struct{ *pulumi.OutputState }

func (NamespaceJunctionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceJunctionResponse)(nil)).Elem()
}

func (o NamespaceJunctionResponseArrayOutput) ToNamespaceJunctionResponseArrayOutput() NamespaceJunctionResponseArrayOutput {
	return o
}

func (o NamespaceJunctionResponseArrayOutput) ToNamespaceJunctionResponseArrayOutputWithContext(ctx context.Context) NamespaceJunctionResponseArrayOutput {
	return o
}

func (o NamespaceJunctionResponseArrayOutput) Index(i pulumi.IntInput) NamespaceJunctionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamespaceJunctionResponse {
		return vs[0].([]NamespaceJunctionResponse)[vs[1].(int)]
	}).(NamespaceJunctionResponseOutput)
}

// An NFSv3 mount point for use as a Storage Target.
type Nfs3Target struct {
	// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
	Target *string `pulumi:"target"`
	// Identifies the primary usage model to be used for this Storage Target. Get choices from .../usageModels
	UsageModel *string `pulumi:"usageModel"`
}

// Nfs3TargetInput is an input type that accepts Nfs3TargetArgs and Nfs3TargetOutput values.
// You can construct a concrete instance of `Nfs3TargetInput` via:
//
//          Nfs3TargetArgs{...}
type Nfs3TargetInput interface {
	pulumi.Input

	ToNfs3TargetOutput() Nfs3TargetOutput
	ToNfs3TargetOutputWithContext(context.Context) Nfs3TargetOutput
}

// An NFSv3 mount point for use as a Storage Target.
type Nfs3TargetArgs struct {
	// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
	Target pulumi.StringPtrInput `pulumi:"target"`
	// Identifies the primary usage model to be used for this Storage Target. Get choices from .../usageModels
	UsageModel pulumi.StringPtrInput `pulumi:"usageModel"`
}

func (Nfs3TargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Nfs3Target)(nil)).Elem()
}

func (i Nfs3TargetArgs) ToNfs3TargetOutput() Nfs3TargetOutput {
	return i.ToNfs3TargetOutputWithContext(context.Background())
}

func (i Nfs3TargetArgs) ToNfs3TargetOutputWithContext(ctx context.Context) Nfs3TargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Nfs3TargetOutput)
}

func (i Nfs3TargetArgs) ToNfs3TargetPtrOutput() Nfs3TargetPtrOutput {
	return i.ToNfs3TargetPtrOutputWithContext(context.Background())
}

func (i Nfs3TargetArgs) ToNfs3TargetPtrOutputWithContext(ctx context.Context) Nfs3TargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Nfs3TargetOutput).ToNfs3TargetPtrOutputWithContext(ctx)
}

// Nfs3TargetPtrInput is an input type that accepts Nfs3TargetArgs, Nfs3TargetPtr and Nfs3TargetPtrOutput values.
// You can construct a concrete instance of `Nfs3TargetPtrInput` via:
//
//          Nfs3TargetArgs{...}
//
//  or:
//
//          nil
type Nfs3TargetPtrInput interface {
	pulumi.Input

	ToNfs3TargetPtrOutput() Nfs3TargetPtrOutput
	ToNfs3TargetPtrOutputWithContext(context.Context) Nfs3TargetPtrOutput
}

type nfs3TargetPtrType Nfs3TargetArgs

func Nfs3TargetPtr(v *Nfs3TargetArgs) Nfs3TargetPtrInput {
	return (*nfs3TargetPtrType)(v)
}

func (*nfs3TargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Nfs3Target)(nil)).Elem()
}

func (i *nfs3TargetPtrType) ToNfs3TargetPtrOutput() Nfs3TargetPtrOutput {
	return i.ToNfs3TargetPtrOutputWithContext(context.Background())
}

func (i *nfs3TargetPtrType) ToNfs3TargetPtrOutputWithContext(ctx context.Context) Nfs3TargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Nfs3TargetPtrOutput)
}

// An NFSv3 mount point for use as a Storage Target.
type Nfs3TargetOutput struct{ *pulumi.OutputState }

func (Nfs3TargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Nfs3Target)(nil)).Elem()
}

func (o Nfs3TargetOutput) ToNfs3TargetOutput() Nfs3TargetOutput {
	return o
}

func (o Nfs3TargetOutput) ToNfs3TargetOutputWithContext(ctx context.Context) Nfs3TargetOutput {
	return o
}

func (o Nfs3TargetOutput) ToNfs3TargetPtrOutput() Nfs3TargetPtrOutput {
	return o.ToNfs3TargetPtrOutputWithContext(context.Background())
}

func (o Nfs3TargetOutput) ToNfs3TargetPtrOutputWithContext(ctx context.Context) Nfs3TargetPtrOutput {
	return o.ApplyT(func(v Nfs3Target) *Nfs3Target {
		return &v
	}).(Nfs3TargetPtrOutput)
}

// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
func (o Nfs3TargetOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Nfs3Target) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Identifies the primary usage model to be used for this Storage Target. Get choices from .../usageModels
func (o Nfs3TargetOutput) UsageModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Nfs3Target) *string { return v.UsageModel }).(pulumi.StringPtrOutput)
}

type Nfs3TargetPtrOutput struct{ *pulumi.OutputState }

func (Nfs3TargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Nfs3Target)(nil)).Elem()
}

func (o Nfs3TargetPtrOutput) ToNfs3TargetPtrOutput() Nfs3TargetPtrOutput {
	return o
}

func (o Nfs3TargetPtrOutput) ToNfs3TargetPtrOutputWithContext(ctx context.Context) Nfs3TargetPtrOutput {
	return o
}

func (o Nfs3TargetPtrOutput) Elem() Nfs3TargetOutput {
	return o.ApplyT(func(v *Nfs3Target) Nfs3Target { return *v }).(Nfs3TargetOutput)
}

// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
func (o Nfs3TargetPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nfs3Target) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Identifies the primary usage model to be used for this Storage Target. Get choices from .../usageModels
func (o Nfs3TargetPtrOutput) UsageModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nfs3Target) *string {
		if v == nil {
			return nil
		}
		return v.UsageModel
	}).(pulumi.StringPtrOutput)
}

// An NFSv3 mount point for use as a Storage Target.
type Nfs3TargetResponse struct {
	// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
	Target *string `pulumi:"target"`
	// Identifies the primary usage model to be used for this Storage Target. Get choices from .../usageModels
	UsageModel *string `pulumi:"usageModel"`
}

// Nfs3TargetResponseInput is an input type that accepts Nfs3TargetResponseArgs and Nfs3TargetResponseOutput values.
// You can construct a concrete instance of `Nfs3TargetResponseInput` via:
//
//          Nfs3TargetResponseArgs{...}
type Nfs3TargetResponseInput interface {
	pulumi.Input

	ToNfs3TargetResponseOutput() Nfs3TargetResponseOutput
	ToNfs3TargetResponseOutputWithContext(context.Context) Nfs3TargetResponseOutput
}

// An NFSv3 mount point for use as a Storage Target.
type Nfs3TargetResponseArgs struct {
	// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
	Target pulumi.StringPtrInput `pulumi:"target"`
	// Identifies the primary usage model to be used for this Storage Target. Get choices from .../usageModels
	UsageModel pulumi.StringPtrInput `pulumi:"usageModel"`
}

func (Nfs3TargetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Nfs3TargetResponse)(nil)).Elem()
}

func (i Nfs3TargetResponseArgs) ToNfs3TargetResponseOutput() Nfs3TargetResponseOutput {
	return i.ToNfs3TargetResponseOutputWithContext(context.Background())
}

func (i Nfs3TargetResponseArgs) ToNfs3TargetResponseOutputWithContext(ctx context.Context) Nfs3TargetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Nfs3TargetResponseOutput)
}

func (i Nfs3TargetResponseArgs) ToNfs3TargetResponsePtrOutput() Nfs3TargetResponsePtrOutput {
	return i.ToNfs3TargetResponsePtrOutputWithContext(context.Background())
}

func (i Nfs3TargetResponseArgs) ToNfs3TargetResponsePtrOutputWithContext(ctx context.Context) Nfs3TargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Nfs3TargetResponseOutput).ToNfs3TargetResponsePtrOutputWithContext(ctx)
}

// Nfs3TargetResponsePtrInput is an input type that accepts Nfs3TargetResponseArgs, Nfs3TargetResponsePtr and Nfs3TargetResponsePtrOutput values.
// You can construct a concrete instance of `Nfs3TargetResponsePtrInput` via:
//
//          Nfs3TargetResponseArgs{...}
//
//  or:
//
//          nil
type Nfs3TargetResponsePtrInput interface {
	pulumi.Input

	ToNfs3TargetResponsePtrOutput() Nfs3TargetResponsePtrOutput
	ToNfs3TargetResponsePtrOutputWithContext(context.Context) Nfs3TargetResponsePtrOutput
}

type nfs3TargetResponsePtrType Nfs3TargetResponseArgs

func Nfs3TargetResponsePtr(v *Nfs3TargetResponseArgs) Nfs3TargetResponsePtrInput {
	return (*nfs3TargetResponsePtrType)(v)
}

func (*nfs3TargetResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Nfs3TargetResponse)(nil)).Elem()
}

func (i *nfs3TargetResponsePtrType) ToNfs3TargetResponsePtrOutput() Nfs3TargetResponsePtrOutput {
	return i.ToNfs3TargetResponsePtrOutputWithContext(context.Background())
}

func (i *nfs3TargetResponsePtrType) ToNfs3TargetResponsePtrOutputWithContext(ctx context.Context) Nfs3TargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Nfs3TargetResponsePtrOutput)
}

// An NFSv3 mount point for use as a Storage Target.
type Nfs3TargetResponseOutput struct{ *pulumi.OutputState }

func (Nfs3TargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Nfs3TargetResponse)(nil)).Elem()
}

func (o Nfs3TargetResponseOutput) ToNfs3TargetResponseOutput() Nfs3TargetResponseOutput {
	return o
}

func (o Nfs3TargetResponseOutput) ToNfs3TargetResponseOutputWithContext(ctx context.Context) Nfs3TargetResponseOutput {
	return o
}

func (o Nfs3TargetResponseOutput) ToNfs3TargetResponsePtrOutput() Nfs3TargetResponsePtrOutput {
	return o.ToNfs3TargetResponsePtrOutputWithContext(context.Background())
}

func (o Nfs3TargetResponseOutput) ToNfs3TargetResponsePtrOutputWithContext(ctx context.Context) Nfs3TargetResponsePtrOutput {
	return o.ApplyT(func(v Nfs3TargetResponse) *Nfs3TargetResponse {
		return &v
	}).(Nfs3TargetResponsePtrOutput)
}

// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
func (o Nfs3TargetResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Nfs3TargetResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Identifies the primary usage model to be used for this Storage Target. Get choices from .../usageModels
func (o Nfs3TargetResponseOutput) UsageModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Nfs3TargetResponse) *string { return v.UsageModel }).(pulumi.StringPtrOutput)
}

type Nfs3TargetResponsePtrOutput struct{ *pulumi.OutputState }

func (Nfs3TargetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Nfs3TargetResponse)(nil)).Elem()
}

func (o Nfs3TargetResponsePtrOutput) ToNfs3TargetResponsePtrOutput() Nfs3TargetResponsePtrOutput {
	return o
}

func (o Nfs3TargetResponsePtrOutput) ToNfs3TargetResponsePtrOutputWithContext(ctx context.Context) Nfs3TargetResponsePtrOutput {
	return o
}

func (o Nfs3TargetResponsePtrOutput) Elem() Nfs3TargetResponseOutput {
	return o.ApplyT(func(v *Nfs3TargetResponse) Nfs3TargetResponse { return *v }).(Nfs3TargetResponseOutput)
}

// IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
func (o Nfs3TargetResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nfs3TargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Identifies the primary usage model to be used for this Storage Target. Get choices from .../usageModels
func (o Nfs3TargetResponsePtrOutput) UsageModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nfs3TargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.UsageModel
	}).(pulumi.StringPtrOutput)
}

// Storage container for use as an Unknown Storage Target.
type UnknownTarget struct {
	// Dictionary of string->string pairs containing information about the Storage Target.
	UnknownMap map[string]string `pulumi:"unknownMap"`
}

// UnknownTargetInput is an input type that accepts UnknownTargetArgs and UnknownTargetOutput values.
// You can construct a concrete instance of `UnknownTargetInput` via:
//
//          UnknownTargetArgs{...}
type UnknownTargetInput interface {
	pulumi.Input

	ToUnknownTargetOutput() UnknownTargetOutput
	ToUnknownTargetOutputWithContext(context.Context) UnknownTargetOutput
}

// Storage container for use as an Unknown Storage Target.
type UnknownTargetArgs struct {
	// Dictionary of string->string pairs containing information about the Storage Target.
	UnknownMap pulumi.StringMapInput `pulumi:"unknownMap"`
}

func (UnknownTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UnknownTarget)(nil)).Elem()
}

func (i UnknownTargetArgs) ToUnknownTargetOutput() UnknownTargetOutput {
	return i.ToUnknownTargetOutputWithContext(context.Background())
}

func (i UnknownTargetArgs) ToUnknownTargetOutputWithContext(ctx context.Context) UnknownTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnknownTargetOutput)
}

func (i UnknownTargetArgs) ToUnknownTargetPtrOutput() UnknownTargetPtrOutput {
	return i.ToUnknownTargetPtrOutputWithContext(context.Background())
}

func (i UnknownTargetArgs) ToUnknownTargetPtrOutputWithContext(ctx context.Context) UnknownTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnknownTargetOutput).ToUnknownTargetPtrOutputWithContext(ctx)
}

// UnknownTargetPtrInput is an input type that accepts UnknownTargetArgs, UnknownTargetPtr and UnknownTargetPtrOutput values.
// You can construct a concrete instance of `UnknownTargetPtrInput` via:
//
//          UnknownTargetArgs{...}
//
//  or:
//
//          nil
type UnknownTargetPtrInput interface {
	pulumi.Input

	ToUnknownTargetPtrOutput() UnknownTargetPtrOutput
	ToUnknownTargetPtrOutputWithContext(context.Context) UnknownTargetPtrOutput
}

type unknownTargetPtrType UnknownTargetArgs

func UnknownTargetPtr(v *UnknownTargetArgs) UnknownTargetPtrInput {
	return (*unknownTargetPtrType)(v)
}

func (*unknownTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UnknownTarget)(nil)).Elem()
}

func (i *unknownTargetPtrType) ToUnknownTargetPtrOutput() UnknownTargetPtrOutput {
	return i.ToUnknownTargetPtrOutputWithContext(context.Background())
}

func (i *unknownTargetPtrType) ToUnknownTargetPtrOutputWithContext(ctx context.Context) UnknownTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnknownTargetPtrOutput)
}

// Storage container for use as an Unknown Storage Target.
type UnknownTargetOutput struct{ *pulumi.OutputState }

func (UnknownTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UnknownTarget)(nil)).Elem()
}

func (o UnknownTargetOutput) ToUnknownTargetOutput() UnknownTargetOutput {
	return o
}

func (o UnknownTargetOutput) ToUnknownTargetOutputWithContext(ctx context.Context) UnknownTargetOutput {
	return o
}

func (o UnknownTargetOutput) ToUnknownTargetPtrOutput() UnknownTargetPtrOutput {
	return o.ToUnknownTargetPtrOutputWithContext(context.Background())
}

func (o UnknownTargetOutput) ToUnknownTargetPtrOutputWithContext(ctx context.Context) UnknownTargetPtrOutput {
	return o.ApplyT(func(v UnknownTarget) *UnknownTarget {
		return &v
	}).(UnknownTargetPtrOutput)
}

// Dictionary of string->string pairs containing information about the Storage Target.
func (o UnknownTargetOutput) UnknownMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v UnknownTarget) map[string]string { return v.UnknownMap }).(pulumi.StringMapOutput)
}

type UnknownTargetPtrOutput struct{ *pulumi.OutputState }

func (UnknownTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UnknownTarget)(nil)).Elem()
}

func (o UnknownTargetPtrOutput) ToUnknownTargetPtrOutput() UnknownTargetPtrOutput {
	return o
}

func (o UnknownTargetPtrOutput) ToUnknownTargetPtrOutputWithContext(ctx context.Context) UnknownTargetPtrOutput {
	return o
}

func (o UnknownTargetPtrOutput) Elem() UnknownTargetOutput {
	return o.ApplyT(func(v *UnknownTarget) UnknownTarget { return *v }).(UnknownTargetOutput)
}

// Dictionary of string->string pairs containing information about the Storage Target.
func (o UnknownTargetPtrOutput) UnknownMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UnknownTarget) map[string]string {
		if v == nil {
			return nil
		}
		return v.UnknownMap
	}).(pulumi.StringMapOutput)
}

// Storage container for use as an Unknown Storage Target.
type UnknownTargetResponse struct {
	// Dictionary of string->string pairs containing information about the Storage Target.
	UnknownMap map[string]string `pulumi:"unknownMap"`
}

// UnknownTargetResponseInput is an input type that accepts UnknownTargetResponseArgs and UnknownTargetResponseOutput values.
// You can construct a concrete instance of `UnknownTargetResponseInput` via:
//
//          UnknownTargetResponseArgs{...}
type UnknownTargetResponseInput interface {
	pulumi.Input

	ToUnknownTargetResponseOutput() UnknownTargetResponseOutput
	ToUnknownTargetResponseOutputWithContext(context.Context) UnknownTargetResponseOutput
}

// Storage container for use as an Unknown Storage Target.
type UnknownTargetResponseArgs struct {
	// Dictionary of string->string pairs containing information about the Storage Target.
	UnknownMap pulumi.StringMapInput `pulumi:"unknownMap"`
}

func (UnknownTargetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UnknownTargetResponse)(nil)).Elem()
}

func (i UnknownTargetResponseArgs) ToUnknownTargetResponseOutput() UnknownTargetResponseOutput {
	return i.ToUnknownTargetResponseOutputWithContext(context.Background())
}

func (i UnknownTargetResponseArgs) ToUnknownTargetResponseOutputWithContext(ctx context.Context) UnknownTargetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnknownTargetResponseOutput)
}

func (i UnknownTargetResponseArgs) ToUnknownTargetResponsePtrOutput() UnknownTargetResponsePtrOutput {
	return i.ToUnknownTargetResponsePtrOutputWithContext(context.Background())
}

func (i UnknownTargetResponseArgs) ToUnknownTargetResponsePtrOutputWithContext(ctx context.Context) UnknownTargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnknownTargetResponseOutput).ToUnknownTargetResponsePtrOutputWithContext(ctx)
}

// UnknownTargetResponsePtrInput is an input type that accepts UnknownTargetResponseArgs, UnknownTargetResponsePtr and UnknownTargetResponsePtrOutput values.
// You can construct a concrete instance of `UnknownTargetResponsePtrInput` via:
//
//          UnknownTargetResponseArgs{...}
//
//  or:
//
//          nil
type UnknownTargetResponsePtrInput interface {
	pulumi.Input

	ToUnknownTargetResponsePtrOutput() UnknownTargetResponsePtrOutput
	ToUnknownTargetResponsePtrOutputWithContext(context.Context) UnknownTargetResponsePtrOutput
}

type unknownTargetResponsePtrType UnknownTargetResponseArgs

func UnknownTargetResponsePtr(v *UnknownTargetResponseArgs) UnknownTargetResponsePtrInput {
	return (*unknownTargetResponsePtrType)(v)
}

func (*unknownTargetResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UnknownTargetResponse)(nil)).Elem()
}

func (i *unknownTargetResponsePtrType) ToUnknownTargetResponsePtrOutput() UnknownTargetResponsePtrOutput {
	return i.ToUnknownTargetResponsePtrOutputWithContext(context.Background())
}

func (i *unknownTargetResponsePtrType) ToUnknownTargetResponsePtrOutputWithContext(ctx context.Context) UnknownTargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnknownTargetResponsePtrOutput)
}

// Storage container for use as an Unknown Storage Target.
type UnknownTargetResponseOutput struct{ *pulumi.OutputState }

func (UnknownTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UnknownTargetResponse)(nil)).Elem()
}

func (o UnknownTargetResponseOutput) ToUnknownTargetResponseOutput() UnknownTargetResponseOutput {
	return o
}

func (o UnknownTargetResponseOutput) ToUnknownTargetResponseOutputWithContext(ctx context.Context) UnknownTargetResponseOutput {
	return o
}

func (o UnknownTargetResponseOutput) ToUnknownTargetResponsePtrOutput() UnknownTargetResponsePtrOutput {
	return o.ToUnknownTargetResponsePtrOutputWithContext(context.Background())
}

func (o UnknownTargetResponseOutput) ToUnknownTargetResponsePtrOutputWithContext(ctx context.Context) UnknownTargetResponsePtrOutput {
	return o.ApplyT(func(v UnknownTargetResponse) *UnknownTargetResponse {
		return &v
	}).(UnknownTargetResponsePtrOutput)
}

// Dictionary of string->string pairs containing information about the Storage Target.
func (o UnknownTargetResponseOutput) UnknownMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v UnknownTargetResponse) map[string]string { return v.UnknownMap }).(pulumi.StringMapOutput)
}

type UnknownTargetResponsePtrOutput struct{ *pulumi.OutputState }

func (UnknownTargetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UnknownTargetResponse)(nil)).Elem()
}

func (o UnknownTargetResponsePtrOutput) ToUnknownTargetResponsePtrOutput() UnknownTargetResponsePtrOutput {
	return o
}

func (o UnknownTargetResponsePtrOutput) ToUnknownTargetResponsePtrOutputWithContext(ctx context.Context) UnknownTargetResponsePtrOutput {
	return o
}

func (o UnknownTargetResponsePtrOutput) Elem() UnknownTargetResponseOutput {
	return o.ApplyT(func(v *UnknownTargetResponse) UnknownTargetResponse { return *v }).(UnknownTargetResponseOutput)
}

// Dictionary of string->string pairs containing information about the Storage Target.
func (o UnknownTargetResponsePtrOutput) UnknownMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UnknownTargetResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.UnknownMap
	}).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(CacheHealthResponseOutput{})
	pulumi.RegisterOutputType(CacheHealthResponsePtrOutput{})
	pulumi.RegisterOutputType(CacheResponseSkuOutput{})
	pulumi.RegisterOutputType(CacheResponseSkuPtrOutput{})
	pulumi.RegisterOutputType(CacheSkuOutput{})
	pulumi.RegisterOutputType(CacheSkuPtrOutput{})
	pulumi.RegisterOutputType(CacheUpgradeStatusResponseOutput{})
	pulumi.RegisterOutputType(CacheUpgradeStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(ClfsTargetOutput{})
	pulumi.RegisterOutputType(ClfsTargetPtrOutput{})
	pulumi.RegisterOutputType(ClfsTargetResponseOutput{})
	pulumi.RegisterOutputType(ClfsTargetResponsePtrOutput{})
	pulumi.RegisterOutputType(NamespaceJunctionOutput{})
	pulumi.RegisterOutputType(NamespaceJunctionArrayOutput{})
	pulumi.RegisterOutputType(NamespaceJunctionResponseOutput{})
	pulumi.RegisterOutputType(NamespaceJunctionResponseArrayOutput{})
	pulumi.RegisterOutputType(Nfs3TargetOutput{})
	pulumi.RegisterOutputType(Nfs3TargetPtrOutput{})
	pulumi.RegisterOutputType(Nfs3TargetResponseOutput{})
	pulumi.RegisterOutputType(Nfs3TargetResponsePtrOutput{})
	pulumi.RegisterOutputType(UnknownTargetOutput{})
	pulumi.RegisterOutputType(UnknownTargetPtrOutput{})
	pulumi.RegisterOutputType(UnknownTargetResponseOutput{})
	pulumi.RegisterOutputType(UnknownTargetResponsePtrOutput{})
}
