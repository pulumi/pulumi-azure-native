// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storagecache

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Type of the Storage Target.
type CachStorageTarget struct {
	pulumi.CustomResourceState

	// Name of the Storage Target.
	Name pulumi.StringOutput `pulumi:"name"`
	// StorageTarget properties
	Properties StorageTargetPropertiesResponseOutput `pulumi:"properties"`
	// Type of the Storage Target; Microsoft.StorageCache/Cache/StorageTarget
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewCachStorageTarget registers a new resource with the given unique name, arguments, and options.
func NewCachStorageTarget(ctx *pulumi.Context,
	name string, args *CachStorageTargetArgs, opts ...pulumi.ResourceOption) (*CachStorageTarget, error) {
	if args == nil || args.CacheName == nil {
		return nil, errors.New("missing required argument 'CacheName'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &CachStorageTargetArgs{}
	}
	var resource CachStorageTarget
	err := ctx.RegisterResource("azurerm:storagecache:CachStorageTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCachStorageTarget gets an existing CachStorageTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCachStorageTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CachStorageTargetState, opts ...pulumi.ResourceOption) (*CachStorageTarget, error) {
	var resource CachStorageTarget
	err := ctx.ReadResource("azurerm:storagecache:CachStorageTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CachStorageTarget resources.
type cachStorageTargetState struct {
	// Name of the Storage Target.
	Name *string `pulumi:"name"`
	// StorageTarget properties
	Properties *StorageTargetPropertiesResponse `pulumi:"properties"`
	// Type of the Storage Target; Microsoft.StorageCache/Cache/StorageTarget
	Type *string `pulumi:"type"`
}

type CachStorageTargetState struct {
	// Name of the Storage Target.
	Name pulumi.StringPtrInput
	// StorageTarget properties
	Properties StorageTargetPropertiesResponsePtrInput
	// Type of the Storage Target; Microsoft.StorageCache/Cache/StorageTarget
	Type pulumi.StringPtrInput
}

func (CachStorageTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*cachStorageTargetState)(nil)).Elem()
}

type cachStorageTargetArgs struct {
	// Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
	CacheName string `pulumi:"cacheName"`
	// Name of the Storage Target. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
	Name string `pulumi:"name"`
	// StorageTarget properties
	Properties *StorageTargetProperties `pulumi:"properties"`
	// Target resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a CachStorageTarget resource.
type CachStorageTargetArgs struct {
	// Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
	CacheName pulumi.StringInput
	// Name of the Storage Target. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
	Name pulumi.StringInput
	// StorageTarget properties
	Properties StorageTargetPropertiesPtrInput
	// Target resource group.
	ResourceGroupName pulumi.StringInput
}

func (CachStorageTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cachStorageTargetArgs)(nil)).Elem()
}
