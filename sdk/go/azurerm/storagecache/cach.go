// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storagecache

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A Cache instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
type Cach struct {
	pulumi.CustomResourceState

	// The identity of the cache, if configured.
	Identity CacheIdentityResponsePtrOutput `pulumi:"identity"`
	// Region name string.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Name of Cache.
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties of the Cache.
	Properties CacheResponsePropertiesOutput `pulumi:"properties"`
	// SKU for the Cache.
	Sku CacheResponsePropertiesPtrOutput `pulumi:"sku"`
	// ARM tags as name/value pairs.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Type of the Cache; Microsoft.StorageCache/Cache
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewCach registers a new resource with the given unique name, arguments, and options.
func NewCach(ctx *pulumi.Context,
	name string, args *CachArgs, opts ...pulumi.ResourceOption) (*Cach, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &CachArgs{}
	}
	var resource Cach
	err := ctx.RegisterResource("azurerm:storagecache:Cach", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCach gets an existing Cach resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCach(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CachState, opts ...pulumi.ResourceOption) (*Cach, error) {
	var resource Cach
	err := ctx.ReadResource("azurerm:storagecache:Cach", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cach resources.
type cachState struct {
	// The identity of the cache, if configured.
	Identity *CacheIdentityResponse `pulumi:"identity"`
	// Region name string.
	Location *string `pulumi:"location"`
	// Name of Cache.
	Name *string `pulumi:"name"`
	// Properties of the Cache.
	Properties *CacheResponseProperties `pulumi:"properties"`
	// SKU for the Cache.
	Sku *CacheResponseProperties `pulumi:"sku"`
	// ARM tags as name/value pairs.
	Tags map[string]string `pulumi:"tags"`
	// Type of the Cache; Microsoft.StorageCache/Cache
	Type *string `pulumi:"type"`
}

type CachState struct {
	// The identity of the cache, if configured.
	Identity CacheIdentityResponsePtrInput
	// Region name string.
	Location pulumi.StringPtrInput
	// Name of Cache.
	Name pulumi.StringPtrInput
	// Properties of the Cache.
	Properties CacheResponsePropertiesPtrInput
	// SKU for the Cache.
	Sku CacheResponsePropertiesPtrInput
	// ARM tags as name/value pairs.
	Tags pulumi.StringMapInput
	// Type of the Cache; Microsoft.StorageCache/Cache
	Type pulumi.StringPtrInput
}

func (CachState) ElementType() reflect.Type {
	return reflect.TypeOf((*cachState)(nil)).Elem()
}

type cachArgs struct {
	// The identity of the cache, if configured.
	Identity *CacheIdentity `pulumi:"identity"`
	// Region name string.
	Location *string `pulumi:"location"`
	// Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
	Name string `pulumi:"name"`
	// Properties of the Cache.
	Properties *CacheProperties `pulumi:"properties"`
	// Target resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// SKU for the Cache.
	Sku *CacheProperties `pulumi:"sku"`
	// ARM tags as name/value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Cach resource.
type CachArgs struct {
	// The identity of the cache, if configured.
	Identity CacheIdentityPtrInput
	// Region name string.
	Location pulumi.StringPtrInput
	// Name of Cache. Length of name must be not greater than 80 and chars must be in list of [-0-9a-zA-Z_] char class.
	Name pulumi.StringInput
	// Properties of the Cache.
	Properties CachePropertiesPtrInput
	// Target resource group.
	ResourceGroupName pulumi.StringInput
	// SKU for the Cache.
	Sku CachePropertiesPtrInput
	// ARM tags as name/value pairs.
	Tags pulumi.StringMapInput
}

func (CachArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cachArgs)(nil)).Elem()
}
