// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190501

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Backend address of a frontDoor load balancer.
type Backend struct {
	// Location of the backend (IP address or FQDN)
	Address *string `pulumi:"address"`
	// The value to use as the host header sent to the backend. If blank or unspecified, this defaults to the incoming host.
	BackendHostHeader *string `pulumi:"backendHostHeader"`
	// Whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'
	EnabledState *string `pulumi:"enabledState"`
	// The HTTP TCP port number. Must be between 1 and 65535.
	HttpPort *int `pulumi:"httpPort"`
	// The HTTPS TCP port number. Must be between 1 and 65535.
	HttpsPort *int `pulumi:"httpsPort"`
	// Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy.
	Priority *int `pulumi:"priority"`
	// Weight of this endpoint for load balancing purposes.
	Weight *int `pulumi:"weight"`
}

// BackendInput is an input type that accepts BackendArgs and BackendOutput values.
// You can construct a concrete instance of `BackendInput` via:
//
//          BackendArgs{...}
type BackendInput interface {
	pulumi.Input

	ToBackendOutput() BackendOutput
	ToBackendOutputWithContext(context.Context) BackendOutput
}

// Backend address of a frontDoor load balancer.
type BackendArgs struct {
	// Location of the backend (IP address or FQDN)
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The value to use as the host header sent to the backend. If blank or unspecified, this defaults to the incoming host.
	BackendHostHeader pulumi.StringPtrInput `pulumi:"backendHostHeader"`
	// Whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'
	EnabledState pulumi.StringPtrInput `pulumi:"enabledState"`
	// The HTTP TCP port number. Must be between 1 and 65535.
	HttpPort pulumi.IntPtrInput `pulumi:"httpPort"`
	// The HTTPS TCP port number. Must be between 1 and 65535.
	HttpsPort pulumi.IntPtrInput `pulumi:"httpsPort"`
	// Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Weight of this endpoint for load balancing purposes.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (BackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Backend)(nil)).Elem()
}

func (i BackendArgs) ToBackendOutput() BackendOutput {
	return i.ToBackendOutputWithContext(context.Background())
}

func (i BackendArgs) ToBackendOutputWithContext(ctx context.Context) BackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendOutput)
}

// BackendArrayInput is an input type that accepts BackendArray and BackendArrayOutput values.
// You can construct a concrete instance of `BackendArrayInput` via:
//
//          BackendArray{ BackendArgs{...} }
type BackendArrayInput interface {
	pulumi.Input

	ToBackendArrayOutput() BackendArrayOutput
	ToBackendArrayOutputWithContext(context.Context) BackendArrayOutput
}

type BackendArray []BackendInput

func (BackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Backend)(nil)).Elem()
}

func (i BackendArray) ToBackendArrayOutput() BackendArrayOutput {
	return i.ToBackendArrayOutputWithContext(context.Background())
}

func (i BackendArray) ToBackendArrayOutputWithContext(ctx context.Context) BackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendArrayOutput)
}

// Backend address of a frontDoor load balancer.
type BackendOutput struct{ *pulumi.OutputState }

func (BackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Backend)(nil)).Elem()
}

func (o BackendOutput) ToBackendOutput() BackendOutput {
	return o
}

func (o BackendOutput) ToBackendOutputWithContext(ctx context.Context) BackendOutput {
	return o
}

// Location of the backend (IP address or FQDN)
func (o BackendOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Backend) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The value to use as the host header sent to the backend. If blank or unspecified, this defaults to the incoming host.
func (o BackendOutput) BackendHostHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Backend) *string { return v.BackendHostHeader }).(pulumi.StringPtrOutput)
}

// Whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'
func (o BackendOutput) EnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Backend) *string { return v.EnabledState }).(pulumi.StringPtrOutput)
}

// The HTTP TCP port number. Must be between 1 and 65535.
func (o BackendOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Backend) *int { return v.HttpPort }).(pulumi.IntPtrOutput)
}

// The HTTPS TCP port number. Must be between 1 and 65535.
func (o BackendOutput) HttpsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Backend) *int { return v.HttpsPort }).(pulumi.IntPtrOutput)
}

// Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy.
func (o BackendOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Backend) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Weight of this endpoint for load balancing purposes.
func (o BackendOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Backend) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type BackendArrayOutput struct{ *pulumi.OutputState }

func (BackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Backend)(nil)).Elem()
}

func (o BackendArrayOutput) ToBackendArrayOutput() BackendArrayOutput {
	return o
}

func (o BackendArrayOutput) ToBackendArrayOutputWithContext(ctx context.Context) BackendArrayOutput {
	return o
}

func (o BackendArrayOutput) Index(i pulumi.IntInput) BackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Backend {
		return vs[0].([]Backend)[vs[1].(int)]
	}).(BackendOutput)
}

// A backend pool is a collection of backends that can be routed to.
type BackendPool struct {
	// The set of backends for this pool
	Backends []Backend `pulumi:"backends"`
	// L7 health probe settings for a backend pool
	HealthProbeSettings *SubResource `pulumi:"healthProbeSettings"`
	// Resource ID.
	Id *string `pulumi:"id"`
	// Load balancing settings for a backend pool
	LoadBalancingSettings *SubResource `pulumi:"loadBalancingSettings"`
	// Resource name.
	Name *string `pulumi:"name"`
	// Resource status.
	ResourceState *string `pulumi:"resourceState"`
}

// BackendPoolInput is an input type that accepts BackendPoolArgs and BackendPoolOutput values.
// You can construct a concrete instance of `BackendPoolInput` via:
//
//          BackendPoolArgs{...}
type BackendPoolInput interface {
	pulumi.Input

	ToBackendPoolOutput() BackendPoolOutput
	ToBackendPoolOutputWithContext(context.Context) BackendPoolOutput
}

// A backend pool is a collection of backends that can be routed to.
type BackendPoolArgs struct {
	// The set of backends for this pool
	Backends BackendArrayInput `pulumi:"backends"`
	// L7 health probe settings for a backend pool
	HealthProbeSettings SubResourcePtrInput `pulumi:"healthProbeSettings"`
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Load balancing settings for a backend pool
	LoadBalancingSettings SubResourcePtrInput `pulumi:"loadBalancingSettings"`
	// Resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Resource status.
	ResourceState pulumi.StringPtrInput `pulumi:"resourceState"`
}

func (BackendPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendPool)(nil)).Elem()
}

func (i BackendPoolArgs) ToBackendPoolOutput() BackendPoolOutput {
	return i.ToBackendPoolOutputWithContext(context.Background())
}

func (i BackendPoolArgs) ToBackendPoolOutputWithContext(ctx context.Context) BackendPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPoolOutput)
}

// BackendPoolArrayInput is an input type that accepts BackendPoolArray and BackendPoolArrayOutput values.
// You can construct a concrete instance of `BackendPoolArrayInput` via:
//
//          BackendPoolArray{ BackendPoolArgs{...} }
type BackendPoolArrayInput interface {
	pulumi.Input

	ToBackendPoolArrayOutput() BackendPoolArrayOutput
	ToBackendPoolArrayOutputWithContext(context.Context) BackendPoolArrayOutput
}

type BackendPoolArray []BackendPoolInput

func (BackendPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendPool)(nil)).Elem()
}

func (i BackendPoolArray) ToBackendPoolArrayOutput() BackendPoolArrayOutput {
	return i.ToBackendPoolArrayOutputWithContext(context.Background())
}

func (i BackendPoolArray) ToBackendPoolArrayOutputWithContext(ctx context.Context) BackendPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPoolArrayOutput)
}

// A backend pool is a collection of backends that can be routed to.
type BackendPoolOutput struct{ *pulumi.OutputState }

func (BackendPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendPool)(nil)).Elem()
}

func (o BackendPoolOutput) ToBackendPoolOutput() BackendPoolOutput {
	return o
}

func (o BackendPoolOutput) ToBackendPoolOutputWithContext(ctx context.Context) BackendPoolOutput {
	return o
}

// The set of backends for this pool
func (o BackendPoolOutput) Backends() BackendArrayOutput {
	return o.ApplyT(func(v BackendPool) []Backend { return v.Backends }).(BackendArrayOutput)
}

// L7 health probe settings for a backend pool
func (o BackendPoolOutput) HealthProbeSettings() SubResourcePtrOutput {
	return o.ApplyT(func(v BackendPool) *SubResource { return v.HealthProbeSettings }).(SubResourcePtrOutput)
}

// Resource ID.
func (o BackendPoolOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendPool) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Load balancing settings for a backend pool
func (o BackendPoolOutput) LoadBalancingSettings() SubResourcePtrOutput {
	return o.ApplyT(func(v BackendPool) *SubResource { return v.LoadBalancingSettings }).(SubResourcePtrOutput)
}

// Resource name.
func (o BackendPoolOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendPool) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Resource status.
func (o BackendPoolOutput) ResourceState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendPool) *string { return v.ResourceState }).(pulumi.StringPtrOutput)
}

type BackendPoolArrayOutput struct{ *pulumi.OutputState }

func (BackendPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendPool)(nil)).Elem()
}

func (o BackendPoolArrayOutput) ToBackendPoolArrayOutput() BackendPoolArrayOutput {
	return o
}

func (o BackendPoolArrayOutput) ToBackendPoolArrayOutputWithContext(ctx context.Context) BackendPoolArrayOutput {
	return o
}

func (o BackendPoolArrayOutput) Index(i pulumi.IntInput) BackendPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackendPool {
		return vs[0].([]BackendPool)[vs[1].(int)]
	}).(BackendPoolOutput)
}

// The JSON object that contains the properties required to create a routing rule.
type BackendPoolPropertiesResponse struct {
	// The set of backends for this pool
	Backends []BackendResponse `pulumi:"backends"`
	// L7 health probe settings for a backend pool
	HealthProbeSettings *SubResourceResponse `pulumi:"healthProbeSettings"`
	// Load balancing settings for a backend pool
	LoadBalancingSettings *SubResourceResponse `pulumi:"loadBalancingSettings"`
	// Resource status.
	ResourceState *string `pulumi:"resourceState"`
}

// BackendPoolPropertiesResponseInput is an input type that accepts BackendPoolPropertiesResponseArgs and BackendPoolPropertiesResponseOutput values.
// You can construct a concrete instance of `BackendPoolPropertiesResponseInput` via:
//
//          BackendPoolPropertiesResponseArgs{...}
type BackendPoolPropertiesResponseInput interface {
	pulumi.Input

	ToBackendPoolPropertiesResponseOutput() BackendPoolPropertiesResponseOutput
	ToBackendPoolPropertiesResponseOutputWithContext(context.Context) BackendPoolPropertiesResponseOutput
}

// The JSON object that contains the properties required to create a routing rule.
type BackendPoolPropertiesResponseArgs struct {
	// The set of backends for this pool
	Backends BackendResponseArrayInput `pulumi:"backends"`
	// L7 health probe settings for a backend pool
	HealthProbeSettings SubResourceResponsePtrInput `pulumi:"healthProbeSettings"`
	// Load balancing settings for a backend pool
	LoadBalancingSettings SubResourceResponsePtrInput `pulumi:"loadBalancingSettings"`
	// Resource status.
	ResourceState pulumi.StringPtrInput `pulumi:"resourceState"`
}

func (BackendPoolPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendPoolPropertiesResponse)(nil)).Elem()
}

func (i BackendPoolPropertiesResponseArgs) ToBackendPoolPropertiesResponseOutput() BackendPoolPropertiesResponseOutput {
	return i.ToBackendPoolPropertiesResponseOutputWithContext(context.Background())
}

func (i BackendPoolPropertiesResponseArgs) ToBackendPoolPropertiesResponseOutputWithContext(ctx context.Context) BackendPoolPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPoolPropertiesResponseOutput)
}

func (i BackendPoolPropertiesResponseArgs) ToBackendPoolPropertiesResponsePtrOutput() BackendPoolPropertiesResponsePtrOutput {
	return i.ToBackendPoolPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i BackendPoolPropertiesResponseArgs) ToBackendPoolPropertiesResponsePtrOutputWithContext(ctx context.Context) BackendPoolPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPoolPropertiesResponseOutput).ToBackendPoolPropertiesResponsePtrOutputWithContext(ctx)
}

// BackendPoolPropertiesResponsePtrInput is an input type that accepts BackendPoolPropertiesResponseArgs, BackendPoolPropertiesResponsePtr and BackendPoolPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `BackendPoolPropertiesResponsePtrInput` via:
//
//          BackendPoolPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type BackendPoolPropertiesResponsePtrInput interface {
	pulumi.Input

	ToBackendPoolPropertiesResponsePtrOutput() BackendPoolPropertiesResponsePtrOutput
	ToBackendPoolPropertiesResponsePtrOutputWithContext(context.Context) BackendPoolPropertiesResponsePtrOutput
}

type backendPoolPropertiesResponsePtrType BackendPoolPropertiesResponseArgs

func BackendPoolPropertiesResponsePtr(v *BackendPoolPropertiesResponseArgs) BackendPoolPropertiesResponsePtrInput {
	return (*backendPoolPropertiesResponsePtrType)(v)
}

func (*backendPoolPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendPoolPropertiesResponse)(nil)).Elem()
}

func (i *backendPoolPropertiesResponsePtrType) ToBackendPoolPropertiesResponsePtrOutput() BackendPoolPropertiesResponsePtrOutput {
	return i.ToBackendPoolPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *backendPoolPropertiesResponsePtrType) ToBackendPoolPropertiesResponsePtrOutputWithContext(ctx context.Context) BackendPoolPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPoolPropertiesResponsePtrOutput)
}

// The JSON object that contains the properties required to create a routing rule.
type BackendPoolPropertiesResponseOutput struct{ *pulumi.OutputState }

func (BackendPoolPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendPoolPropertiesResponse)(nil)).Elem()
}

func (o BackendPoolPropertiesResponseOutput) ToBackendPoolPropertiesResponseOutput() BackendPoolPropertiesResponseOutput {
	return o
}

func (o BackendPoolPropertiesResponseOutput) ToBackendPoolPropertiesResponseOutputWithContext(ctx context.Context) BackendPoolPropertiesResponseOutput {
	return o
}

func (o BackendPoolPropertiesResponseOutput) ToBackendPoolPropertiesResponsePtrOutput() BackendPoolPropertiesResponsePtrOutput {
	return o.ToBackendPoolPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o BackendPoolPropertiesResponseOutput) ToBackendPoolPropertiesResponsePtrOutputWithContext(ctx context.Context) BackendPoolPropertiesResponsePtrOutput {
	return o.ApplyT(func(v BackendPoolPropertiesResponse) *BackendPoolPropertiesResponse {
		return &v
	}).(BackendPoolPropertiesResponsePtrOutput)
}

// The set of backends for this pool
func (o BackendPoolPropertiesResponseOutput) Backends() BackendResponseArrayOutput {
	return o.ApplyT(func(v BackendPoolPropertiesResponse) []BackendResponse { return v.Backends }).(BackendResponseArrayOutput)
}

// L7 health probe settings for a backend pool
func (o BackendPoolPropertiesResponseOutput) HealthProbeSettings() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v BackendPoolPropertiesResponse) *SubResourceResponse { return v.HealthProbeSettings }).(SubResourceResponsePtrOutput)
}

// Load balancing settings for a backend pool
func (o BackendPoolPropertiesResponseOutput) LoadBalancingSettings() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v BackendPoolPropertiesResponse) *SubResourceResponse { return v.LoadBalancingSettings }).(SubResourceResponsePtrOutput)
}

// Resource status.
func (o BackendPoolPropertiesResponseOutput) ResourceState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendPoolPropertiesResponse) *string { return v.ResourceState }).(pulumi.StringPtrOutput)
}

type BackendPoolPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (BackendPoolPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendPoolPropertiesResponse)(nil)).Elem()
}

func (o BackendPoolPropertiesResponsePtrOutput) ToBackendPoolPropertiesResponsePtrOutput() BackendPoolPropertiesResponsePtrOutput {
	return o
}

func (o BackendPoolPropertiesResponsePtrOutput) ToBackendPoolPropertiesResponsePtrOutputWithContext(ctx context.Context) BackendPoolPropertiesResponsePtrOutput {
	return o
}

func (o BackendPoolPropertiesResponsePtrOutput) Elem() BackendPoolPropertiesResponseOutput {
	return o.ApplyT(func(v *BackendPoolPropertiesResponse) BackendPoolPropertiesResponse { return *v }).(BackendPoolPropertiesResponseOutput)
}

// The set of backends for this pool
func (o BackendPoolPropertiesResponsePtrOutput) Backends() BackendResponseArrayOutput {
	return o.ApplyT(func(v *BackendPoolPropertiesResponse) []BackendResponse {
		if v == nil {
			return nil
		}
		return v.Backends
	}).(BackendResponseArrayOutput)
}

// L7 health probe settings for a backend pool
func (o BackendPoolPropertiesResponsePtrOutput) HealthProbeSettings() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *BackendPoolPropertiesResponse) *SubResourceResponse {
		if v == nil {
			return nil
		}
		return v.HealthProbeSettings
	}).(SubResourceResponsePtrOutput)
}

// Load balancing settings for a backend pool
func (o BackendPoolPropertiesResponsePtrOutput) LoadBalancingSettings() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *BackendPoolPropertiesResponse) *SubResourceResponse {
		if v == nil {
			return nil
		}
		return v.LoadBalancingSettings
	}).(SubResourceResponsePtrOutput)
}

// Resource status.
func (o BackendPoolPropertiesResponsePtrOutput) ResourceState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendPoolPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceState
	}).(pulumi.StringPtrOutput)
}

// A backend pool is a collection of backends that can be routed to.
type BackendPoolResponse struct {
	// Resource ID.
	Id *string `pulumi:"id"`
	// Resource name.
	Name *string `pulumi:"name"`
	// Properties of the Front Door Backend Pool
	Properties *BackendPoolPropertiesResponse `pulumi:"properties"`
	// Resource type.
	Type string `pulumi:"type"`
}

// BackendPoolResponseInput is an input type that accepts BackendPoolResponseArgs and BackendPoolResponseOutput values.
// You can construct a concrete instance of `BackendPoolResponseInput` via:
//
//          BackendPoolResponseArgs{...}
type BackendPoolResponseInput interface {
	pulumi.Input

	ToBackendPoolResponseOutput() BackendPoolResponseOutput
	ToBackendPoolResponseOutputWithContext(context.Context) BackendPoolResponseOutput
}

// A backend pool is a collection of backends that can be routed to.
type BackendPoolResponseArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Properties of the Front Door Backend Pool
	Properties BackendPoolPropertiesResponsePtrInput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (BackendPoolResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendPoolResponse)(nil)).Elem()
}

func (i BackendPoolResponseArgs) ToBackendPoolResponseOutput() BackendPoolResponseOutput {
	return i.ToBackendPoolResponseOutputWithContext(context.Background())
}

func (i BackendPoolResponseArgs) ToBackendPoolResponseOutputWithContext(ctx context.Context) BackendPoolResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPoolResponseOutput)
}

// BackendPoolResponseArrayInput is an input type that accepts BackendPoolResponseArray and BackendPoolResponseArrayOutput values.
// You can construct a concrete instance of `BackendPoolResponseArrayInput` via:
//
//          BackendPoolResponseArray{ BackendPoolResponseArgs{...} }
type BackendPoolResponseArrayInput interface {
	pulumi.Input

	ToBackendPoolResponseArrayOutput() BackendPoolResponseArrayOutput
	ToBackendPoolResponseArrayOutputWithContext(context.Context) BackendPoolResponseArrayOutput
}

type BackendPoolResponseArray []BackendPoolResponseInput

func (BackendPoolResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendPoolResponse)(nil)).Elem()
}

func (i BackendPoolResponseArray) ToBackendPoolResponseArrayOutput() BackendPoolResponseArrayOutput {
	return i.ToBackendPoolResponseArrayOutputWithContext(context.Background())
}

func (i BackendPoolResponseArray) ToBackendPoolResponseArrayOutputWithContext(ctx context.Context) BackendPoolResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPoolResponseArrayOutput)
}

// A backend pool is a collection of backends that can be routed to.
type BackendPoolResponseOutput struct{ *pulumi.OutputState }

func (BackendPoolResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendPoolResponse)(nil)).Elem()
}

func (o BackendPoolResponseOutput) ToBackendPoolResponseOutput() BackendPoolResponseOutput {
	return o
}

func (o BackendPoolResponseOutput) ToBackendPoolResponseOutputWithContext(ctx context.Context) BackendPoolResponseOutput {
	return o
}

// Resource ID.
func (o BackendPoolResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendPoolResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o BackendPoolResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendPoolResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Properties of the Front Door Backend Pool
func (o BackendPoolResponseOutput) Properties() BackendPoolPropertiesResponsePtrOutput {
	return o.ApplyT(func(v BackendPoolResponse) *BackendPoolPropertiesResponse { return v.Properties }).(BackendPoolPropertiesResponsePtrOutput)
}

// Resource type.
func (o BackendPoolResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BackendPoolResponse) string { return v.Type }).(pulumi.StringOutput)
}

type BackendPoolResponseArrayOutput struct{ *pulumi.OutputState }

func (BackendPoolResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendPoolResponse)(nil)).Elem()
}

func (o BackendPoolResponseArrayOutput) ToBackendPoolResponseArrayOutput() BackendPoolResponseArrayOutput {
	return o
}

func (o BackendPoolResponseArrayOutput) ToBackendPoolResponseArrayOutputWithContext(ctx context.Context) BackendPoolResponseArrayOutput {
	return o
}

func (o BackendPoolResponseArrayOutput) Index(i pulumi.IntInput) BackendPoolResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackendPoolResponse {
		return vs[0].([]BackendPoolResponse)[vs[1].(int)]
	}).(BackendPoolResponseOutput)
}

// Settings that apply to all backend pools.
type BackendPoolsSettings struct {
	// Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
	EnforceCertificateNameCheck *string `pulumi:"enforceCertificateNameCheck"`
	// Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
	SendRecvTimeoutSeconds *int `pulumi:"sendRecvTimeoutSeconds"`
}

// BackendPoolsSettingsInput is an input type that accepts BackendPoolsSettingsArgs and BackendPoolsSettingsOutput values.
// You can construct a concrete instance of `BackendPoolsSettingsInput` via:
//
//          BackendPoolsSettingsArgs{...}
type BackendPoolsSettingsInput interface {
	pulumi.Input

	ToBackendPoolsSettingsOutput() BackendPoolsSettingsOutput
	ToBackendPoolsSettingsOutputWithContext(context.Context) BackendPoolsSettingsOutput
}

// Settings that apply to all backend pools.
type BackendPoolsSettingsArgs struct {
	// Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
	EnforceCertificateNameCheck pulumi.StringPtrInput `pulumi:"enforceCertificateNameCheck"`
	// Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
	SendRecvTimeoutSeconds pulumi.IntPtrInput `pulumi:"sendRecvTimeoutSeconds"`
}

func (BackendPoolsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendPoolsSettings)(nil)).Elem()
}

func (i BackendPoolsSettingsArgs) ToBackendPoolsSettingsOutput() BackendPoolsSettingsOutput {
	return i.ToBackendPoolsSettingsOutputWithContext(context.Background())
}

func (i BackendPoolsSettingsArgs) ToBackendPoolsSettingsOutputWithContext(ctx context.Context) BackendPoolsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPoolsSettingsOutput)
}

func (i BackendPoolsSettingsArgs) ToBackendPoolsSettingsPtrOutput() BackendPoolsSettingsPtrOutput {
	return i.ToBackendPoolsSettingsPtrOutputWithContext(context.Background())
}

func (i BackendPoolsSettingsArgs) ToBackendPoolsSettingsPtrOutputWithContext(ctx context.Context) BackendPoolsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPoolsSettingsOutput).ToBackendPoolsSettingsPtrOutputWithContext(ctx)
}

// BackendPoolsSettingsPtrInput is an input type that accepts BackendPoolsSettingsArgs, BackendPoolsSettingsPtr and BackendPoolsSettingsPtrOutput values.
// You can construct a concrete instance of `BackendPoolsSettingsPtrInput` via:
//
//          BackendPoolsSettingsArgs{...}
//
//  or:
//
//          nil
type BackendPoolsSettingsPtrInput interface {
	pulumi.Input

	ToBackendPoolsSettingsPtrOutput() BackendPoolsSettingsPtrOutput
	ToBackendPoolsSettingsPtrOutputWithContext(context.Context) BackendPoolsSettingsPtrOutput
}

type backendPoolsSettingsPtrType BackendPoolsSettingsArgs

func BackendPoolsSettingsPtr(v *BackendPoolsSettingsArgs) BackendPoolsSettingsPtrInput {
	return (*backendPoolsSettingsPtrType)(v)
}

func (*backendPoolsSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendPoolsSettings)(nil)).Elem()
}

func (i *backendPoolsSettingsPtrType) ToBackendPoolsSettingsPtrOutput() BackendPoolsSettingsPtrOutput {
	return i.ToBackendPoolsSettingsPtrOutputWithContext(context.Background())
}

func (i *backendPoolsSettingsPtrType) ToBackendPoolsSettingsPtrOutputWithContext(ctx context.Context) BackendPoolsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPoolsSettingsPtrOutput)
}

// Settings that apply to all backend pools.
type BackendPoolsSettingsOutput struct{ *pulumi.OutputState }

func (BackendPoolsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendPoolsSettings)(nil)).Elem()
}

func (o BackendPoolsSettingsOutput) ToBackendPoolsSettingsOutput() BackendPoolsSettingsOutput {
	return o
}

func (o BackendPoolsSettingsOutput) ToBackendPoolsSettingsOutputWithContext(ctx context.Context) BackendPoolsSettingsOutput {
	return o
}

func (o BackendPoolsSettingsOutput) ToBackendPoolsSettingsPtrOutput() BackendPoolsSettingsPtrOutput {
	return o.ToBackendPoolsSettingsPtrOutputWithContext(context.Background())
}

func (o BackendPoolsSettingsOutput) ToBackendPoolsSettingsPtrOutputWithContext(ctx context.Context) BackendPoolsSettingsPtrOutput {
	return o.ApplyT(func(v BackendPoolsSettings) *BackendPoolsSettings {
		return &v
	}).(BackendPoolsSettingsPtrOutput)
}

// Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
func (o BackendPoolsSettingsOutput) EnforceCertificateNameCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendPoolsSettings) *string { return v.EnforceCertificateNameCheck }).(pulumi.StringPtrOutput)
}

// Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
func (o BackendPoolsSettingsOutput) SendRecvTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendPoolsSettings) *int { return v.SendRecvTimeoutSeconds }).(pulumi.IntPtrOutput)
}

type BackendPoolsSettingsPtrOutput struct{ *pulumi.OutputState }

func (BackendPoolsSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendPoolsSettings)(nil)).Elem()
}

func (o BackendPoolsSettingsPtrOutput) ToBackendPoolsSettingsPtrOutput() BackendPoolsSettingsPtrOutput {
	return o
}

func (o BackendPoolsSettingsPtrOutput) ToBackendPoolsSettingsPtrOutputWithContext(ctx context.Context) BackendPoolsSettingsPtrOutput {
	return o
}

func (o BackendPoolsSettingsPtrOutput) Elem() BackendPoolsSettingsOutput {
	return o.ApplyT(func(v *BackendPoolsSettings) BackendPoolsSettings { return *v }).(BackendPoolsSettingsOutput)
}

// Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
func (o BackendPoolsSettingsPtrOutput) EnforceCertificateNameCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendPoolsSettings) *string {
		if v == nil {
			return nil
		}
		return v.EnforceCertificateNameCheck
	}).(pulumi.StringPtrOutput)
}

// Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
func (o BackendPoolsSettingsPtrOutput) SendRecvTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendPoolsSettings) *int {
		if v == nil {
			return nil
		}
		return v.SendRecvTimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// Settings that apply to all backend pools.
type BackendPoolsSettingsResponse struct {
	// Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
	EnforceCertificateNameCheck *string `pulumi:"enforceCertificateNameCheck"`
	// Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
	SendRecvTimeoutSeconds *int `pulumi:"sendRecvTimeoutSeconds"`
}

// BackendPoolsSettingsResponseInput is an input type that accepts BackendPoolsSettingsResponseArgs and BackendPoolsSettingsResponseOutput values.
// You can construct a concrete instance of `BackendPoolsSettingsResponseInput` via:
//
//          BackendPoolsSettingsResponseArgs{...}
type BackendPoolsSettingsResponseInput interface {
	pulumi.Input

	ToBackendPoolsSettingsResponseOutput() BackendPoolsSettingsResponseOutput
	ToBackendPoolsSettingsResponseOutputWithContext(context.Context) BackendPoolsSettingsResponseOutput
}

// Settings that apply to all backend pools.
type BackendPoolsSettingsResponseArgs struct {
	// Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
	EnforceCertificateNameCheck pulumi.StringPtrInput `pulumi:"enforceCertificateNameCheck"`
	// Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
	SendRecvTimeoutSeconds pulumi.IntPtrInput `pulumi:"sendRecvTimeoutSeconds"`
}

func (BackendPoolsSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendPoolsSettingsResponse)(nil)).Elem()
}

func (i BackendPoolsSettingsResponseArgs) ToBackendPoolsSettingsResponseOutput() BackendPoolsSettingsResponseOutput {
	return i.ToBackendPoolsSettingsResponseOutputWithContext(context.Background())
}

func (i BackendPoolsSettingsResponseArgs) ToBackendPoolsSettingsResponseOutputWithContext(ctx context.Context) BackendPoolsSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPoolsSettingsResponseOutput)
}

func (i BackendPoolsSettingsResponseArgs) ToBackendPoolsSettingsResponsePtrOutput() BackendPoolsSettingsResponsePtrOutput {
	return i.ToBackendPoolsSettingsResponsePtrOutputWithContext(context.Background())
}

func (i BackendPoolsSettingsResponseArgs) ToBackendPoolsSettingsResponsePtrOutputWithContext(ctx context.Context) BackendPoolsSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPoolsSettingsResponseOutput).ToBackendPoolsSettingsResponsePtrOutputWithContext(ctx)
}

// BackendPoolsSettingsResponsePtrInput is an input type that accepts BackendPoolsSettingsResponseArgs, BackendPoolsSettingsResponsePtr and BackendPoolsSettingsResponsePtrOutput values.
// You can construct a concrete instance of `BackendPoolsSettingsResponsePtrInput` via:
//
//          BackendPoolsSettingsResponseArgs{...}
//
//  or:
//
//          nil
type BackendPoolsSettingsResponsePtrInput interface {
	pulumi.Input

	ToBackendPoolsSettingsResponsePtrOutput() BackendPoolsSettingsResponsePtrOutput
	ToBackendPoolsSettingsResponsePtrOutputWithContext(context.Context) BackendPoolsSettingsResponsePtrOutput
}

type backendPoolsSettingsResponsePtrType BackendPoolsSettingsResponseArgs

func BackendPoolsSettingsResponsePtr(v *BackendPoolsSettingsResponseArgs) BackendPoolsSettingsResponsePtrInput {
	return (*backendPoolsSettingsResponsePtrType)(v)
}

func (*backendPoolsSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendPoolsSettingsResponse)(nil)).Elem()
}

func (i *backendPoolsSettingsResponsePtrType) ToBackendPoolsSettingsResponsePtrOutput() BackendPoolsSettingsResponsePtrOutput {
	return i.ToBackendPoolsSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *backendPoolsSettingsResponsePtrType) ToBackendPoolsSettingsResponsePtrOutputWithContext(ctx context.Context) BackendPoolsSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPoolsSettingsResponsePtrOutput)
}

// Settings that apply to all backend pools.
type BackendPoolsSettingsResponseOutput struct{ *pulumi.OutputState }

func (BackendPoolsSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendPoolsSettingsResponse)(nil)).Elem()
}

func (o BackendPoolsSettingsResponseOutput) ToBackendPoolsSettingsResponseOutput() BackendPoolsSettingsResponseOutput {
	return o
}

func (o BackendPoolsSettingsResponseOutput) ToBackendPoolsSettingsResponseOutputWithContext(ctx context.Context) BackendPoolsSettingsResponseOutput {
	return o
}

func (o BackendPoolsSettingsResponseOutput) ToBackendPoolsSettingsResponsePtrOutput() BackendPoolsSettingsResponsePtrOutput {
	return o.ToBackendPoolsSettingsResponsePtrOutputWithContext(context.Background())
}

func (o BackendPoolsSettingsResponseOutput) ToBackendPoolsSettingsResponsePtrOutputWithContext(ctx context.Context) BackendPoolsSettingsResponsePtrOutput {
	return o.ApplyT(func(v BackendPoolsSettingsResponse) *BackendPoolsSettingsResponse {
		return &v
	}).(BackendPoolsSettingsResponsePtrOutput)
}

// Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
func (o BackendPoolsSettingsResponseOutput) EnforceCertificateNameCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendPoolsSettingsResponse) *string { return v.EnforceCertificateNameCheck }).(pulumi.StringPtrOutput)
}

// Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
func (o BackendPoolsSettingsResponseOutput) SendRecvTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendPoolsSettingsResponse) *int { return v.SendRecvTimeoutSeconds }).(pulumi.IntPtrOutput)
}

type BackendPoolsSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (BackendPoolsSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendPoolsSettingsResponse)(nil)).Elem()
}

func (o BackendPoolsSettingsResponsePtrOutput) ToBackendPoolsSettingsResponsePtrOutput() BackendPoolsSettingsResponsePtrOutput {
	return o
}

func (o BackendPoolsSettingsResponsePtrOutput) ToBackendPoolsSettingsResponsePtrOutputWithContext(ctx context.Context) BackendPoolsSettingsResponsePtrOutput {
	return o
}

func (o BackendPoolsSettingsResponsePtrOutput) Elem() BackendPoolsSettingsResponseOutput {
	return o.ApplyT(func(v *BackendPoolsSettingsResponse) BackendPoolsSettingsResponse { return *v }).(BackendPoolsSettingsResponseOutput)
}

// Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
func (o BackendPoolsSettingsResponsePtrOutput) EnforceCertificateNameCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendPoolsSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.EnforceCertificateNameCheck
	}).(pulumi.StringPtrOutput)
}

// Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
func (o BackendPoolsSettingsResponsePtrOutput) SendRecvTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendPoolsSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.SendRecvTimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// Backend address of a frontDoor load balancer.
type BackendResponse struct {
	// Location of the backend (IP address or FQDN)
	Address *string `pulumi:"address"`
	// The value to use as the host header sent to the backend. If blank or unspecified, this defaults to the incoming host.
	BackendHostHeader *string `pulumi:"backendHostHeader"`
	// Whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'
	EnabledState *string `pulumi:"enabledState"`
	// The HTTP TCP port number. Must be between 1 and 65535.
	HttpPort *int `pulumi:"httpPort"`
	// The HTTPS TCP port number. Must be between 1 and 65535.
	HttpsPort *int `pulumi:"httpsPort"`
	// Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy.
	Priority *int `pulumi:"priority"`
	// Weight of this endpoint for load balancing purposes.
	Weight *int `pulumi:"weight"`
}

// BackendResponseInput is an input type that accepts BackendResponseArgs and BackendResponseOutput values.
// You can construct a concrete instance of `BackendResponseInput` via:
//
//          BackendResponseArgs{...}
type BackendResponseInput interface {
	pulumi.Input

	ToBackendResponseOutput() BackendResponseOutput
	ToBackendResponseOutputWithContext(context.Context) BackendResponseOutput
}

// Backend address of a frontDoor load balancer.
type BackendResponseArgs struct {
	// Location of the backend (IP address or FQDN)
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The value to use as the host header sent to the backend. If blank or unspecified, this defaults to the incoming host.
	BackendHostHeader pulumi.StringPtrInput `pulumi:"backendHostHeader"`
	// Whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'
	EnabledState pulumi.StringPtrInput `pulumi:"enabledState"`
	// The HTTP TCP port number. Must be between 1 and 65535.
	HttpPort pulumi.IntPtrInput `pulumi:"httpPort"`
	// The HTTPS TCP port number. Must be between 1 and 65535.
	HttpsPort pulumi.IntPtrInput `pulumi:"httpsPort"`
	// Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Weight of this endpoint for load balancing purposes.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (BackendResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendResponse)(nil)).Elem()
}

func (i BackendResponseArgs) ToBackendResponseOutput() BackendResponseOutput {
	return i.ToBackendResponseOutputWithContext(context.Background())
}

func (i BackendResponseArgs) ToBackendResponseOutputWithContext(ctx context.Context) BackendResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendResponseOutput)
}

// BackendResponseArrayInput is an input type that accepts BackendResponseArray and BackendResponseArrayOutput values.
// You can construct a concrete instance of `BackendResponseArrayInput` via:
//
//          BackendResponseArray{ BackendResponseArgs{...} }
type BackendResponseArrayInput interface {
	pulumi.Input

	ToBackendResponseArrayOutput() BackendResponseArrayOutput
	ToBackendResponseArrayOutputWithContext(context.Context) BackendResponseArrayOutput
}

type BackendResponseArray []BackendResponseInput

func (BackendResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendResponse)(nil)).Elem()
}

func (i BackendResponseArray) ToBackendResponseArrayOutput() BackendResponseArrayOutput {
	return i.ToBackendResponseArrayOutputWithContext(context.Background())
}

func (i BackendResponseArray) ToBackendResponseArrayOutputWithContext(ctx context.Context) BackendResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendResponseArrayOutput)
}

// Backend address of a frontDoor load balancer.
type BackendResponseOutput struct{ *pulumi.OutputState }

func (BackendResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendResponse)(nil)).Elem()
}

func (o BackendResponseOutput) ToBackendResponseOutput() BackendResponseOutput {
	return o
}

func (o BackendResponseOutput) ToBackendResponseOutputWithContext(ctx context.Context) BackendResponseOutput {
	return o
}

// Location of the backend (IP address or FQDN)
func (o BackendResponseOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendResponse) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The value to use as the host header sent to the backend. If blank or unspecified, this defaults to the incoming host.
func (o BackendResponseOutput) BackendHostHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendResponse) *string { return v.BackendHostHeader }).(pulumi.StringPtrOutput)
}

// Whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'
func (o BackendResponseOutput) EnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendResponse) *string { return v.EnabledState }).(pulumi.StringPtrOutput)
}

// The HTTP TCP port number. Must be between 1 and 65535.
func (o BackendResponseOutput) HttpPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendResponse) *int { return v.HttpPort }).(pulumi.IntPtrOutput)
}

// The HTTPS TCP port number. Must be between 1 and 65535.
func (o BackendResponseOutput) HttpsPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendResponse) *int { return v.HttpsPort }).(pulumi.IntPtrOutput)
}

// Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy.
func (o BackendResponseOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendResponse) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Weight of this endpoint for load balancing purposes.
func (o BackendResponseOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendResponse) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type BackendResponseArrayOutput struct{ *pulumi.OutputState }

func (BackendResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendResponse)(nil)).Elem()
}

func (o BackendResponseArrayOutput) ToBackendResponseArrayOutput() BackendResponseArrayOutput {
	return o
}

func (o BackendResponseArrayOutput) ToBackendResponseArrayOutputWithContext(ctx context.Context) BackendResponseArrayOutput {
	return o
}

func (o BackendResponseArrayOutput) Index(i pulumi.IntInput) BackendResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackendResponse {
		return vs[0].([]BackendResponse)[vs[1].(int)]
	}).(BackendResponseOutput)
}

// Https settings for a domain
type CustomHttpsConfiguration struct {
	// Defines the source of the SSL certificate
	CertificateSource string `pulumi:"certificateSource"`
	// Defines the type of the certificate used for secure connections to a frontendEndpoint
	CertificateType *string `pulumi:"certificateType"`
	// The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
	MinimumTlsVersion string `pulumi:"minimumTlsVersion"`
	// Defines the TLS extension protocol that is used for secure delivery
	ProtocolType string `pulumi:"protocolType"`
	// The name of the Key Vault secret representing the full certificate PFX
	SecretName *string `pulumi:"secretName"`
	// The version of the Key Vault secret representing the full certificate PFX
	SecretVersion *string `pulumi:"secretVersion"`
	// The Key Vault containing the SSL certificate
	Vault *KeyVaultCertificateSourceParametersProperties `pulumi:"vault"`
}

// CustomHttpsConfigurationInput is an input type that accepts CustomHttpsConfigurationArgs and CustomHttpsConfigurationOutput values.
// You can construct a concrete instance of `CustomHttpsConfigurationInput` via:
//
//          CustomHttpsConfigurationArgs{...}
type CustomHttpsConfigurationInput interface {
	pulumi.Input

	ToCustomHttpsConfigurationOutput() CustomHttpsConfigurationOutput
	ToCustomHttpsConfigurationOutputWithContext(context.Context) CustomHttpsConfigurationOutput
}

// Https settings for a domain
type CustomHttpsConfigurationArgs struct {
	// Defines the source of the SSL certificate
	CertificateSource pulumi.StringInput `pulumi:"certificateSource"`
	// Defines the type of the certificate used for secure connections to a frontendEndpoint
	CertificateType pulumi.StringPtrInput `pulumi:"certificateType"`
	// The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
	MinimumTlsVersion pulumi.StringInput `pulumi:"minimumTlsVersion"`
	// Defines the TLS extension protocol that is used for secure delivery
	ProtocolType pulumi.StringInput `pulumi:"protocolType"`
	// The name of the Key Vault secret representing the full certificate PFX
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// The version of the Key Vault secret representing the full certificate PFX
	SecretVersion pulumi.StringPtrInput `pulumi:"secretVersion"`
	// The Key Vault containing the SSL certificate
	Vault KeyVaultCertificateSourceParametersPropertiesPtrInput `pulumi:"vault"`
}

func (CustomHttpsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomHttpsConfiguration)(nil)).Elem()
}

func (i CustomHttpsConfigurationArgs) ToCustomHttpsConfigurationOutput() CustomHttpsConfigurationOutput {
	return i.ToCustomHttpsConfigurationOutputWithContext(context.Background())
}

func (i CustomHttpsConfigurationArgs) ToCustomHttpsConfigurationOutputWithContext(ctx context.Context) CustomHttpsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomHttpsConfigurationOutput)
}

// Https settings for a domain
type CustomHttpsConfigurationOutput struct{ *pulumi.OutputState }

func (CustomHttpsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomHttpsConfiguration)(nil)).Elem()
}

func (o CustomHttpsConfigurationOutput) ToCustomHttpsConfigurationOutput() CustomHttpsConfigurationOutput {
	return o
}

func (o CustomHttpsConfigurationOutput) ToCustomHttpsConfigurationOutputWithContext(ctx context.Context) CustomHttpsConfigurationOutput {
	return o
}

// Defines the source of the SSL certificate
func (o CustomHttpsConfigurationOutput) CertificateSource() pulumi.StringOutput {
	return o.ApplyT(func(v CustomHttpsConfiguration) string { return v.CertificateSource }).(pulumi.StringOutput)
}

// Defines the type of the certificate used for secure connections to a frontendEndpoint
func (o CustomHttpsConfigurationOutput) CertificateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomHttpsConfiguration) *string { return v.CertificateType }).(pulumi.StringPtrOutput)
}

// The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
func (o CustomHttpsConfigurationOutput) MinimumTlsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CustomHttpsConfiguration) string { return v.MinimumTlsVersion }).(pulumi.StringOutput)
}

// Defines the TLS extension protocol that is used for secure delivery
func (o CustomHttpsConfigurationOutput) ProtocolType() pulumi.StringOutput {
	return o.ApplyT(func(v CustomHttpsConfiguration) string { return v.ProtocolType }).(pulumi.StringOutput)
}

// The name of the Key Vault secret representing the full certificate PFX
func (o CustomHttpsConfigurationOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomHttpsConfiguration) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// The version of the Key Vault secret representing the full certificate PFX
func (o CustomHttpsConfigurationOutput) SecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomHttpsConfiguration) *string { return v.SecretVersion }).(pulumi.StringPtrOutput)
}

// The Key Vault containing the SSL certificate
func (o CustomHttpsConfigurationOutput) Vault() KeyVaultCertificateSourceParametersPropertiesPtrOutput {
	return o.ApplyT(func(v CustomHttpsConfiguration) *KeyVaultCertificateSourceParametersProperties { return v.Vault }).(KeyVaultCertificateSourceParametersPropertiesPtrOutput)
}

// Https settings for a domain
type CustomHttpsConfigurationResponse struct {
	// Defines the source of the SSL certificate
	CertificateSource string `pulumi:"certificateSource"`
	// Parameters required for enabling SSL with Front Door-managed certificates (if certificateSource=FrontDoor)
	FrontDoorCertificateSourceParameters *FrontDoorCertificateSourceParametersResponse `pulumi:"frontDoorCertificateSourceParameters"`
	// KeyVault certificate source parameters (if certificateSource=AzureKeyVault)
	KeyVaultCertificateSourceParameters *KeyVaultCertificateSourceParametersResponse `pulumi:"keyVaultCertificateSourceParameters"`
	// The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
	MinimumTlsVersion string `pulumi:"minimumTlsVersion"`
	// Defines the TLS extension protocol that is used for secure delivery
	ProtocolType string `pulumi:"protocolType"`
}

// CustomHttpsConfigurationResponseInput is an input type that accepts CustomHttpsConfigurationResponseArgs and CustomHttpsConfigurationResponseOutput values.
// You can construct a concrete instance of `CustomHttpsConfigurationResponseInput` via:
//
//          CustomHttpsConfigurationResponseArgs{...}
type CustomHttpsConfigurationResponseInput interface {
	pulumi.Input

	ToCustomHttpsConfigurationResponseOutput() CustomHttpsConfigurationResponseOutput
	ToCustomHttpsConfigurationResponseOutputWithContext(context.Context) CustomHttpsConfigurationResponseOutput
}

// Https settings for a domain
type CustomHttpsConfigurationResponseArgs struct {
	// Defines the source of the SSL certificate
	CertificateSource pulumi.StringInput `pulumi:"certificateSource"`
	// Parameters required for enabling SSL with Front Door-managed certificates (if certificateSource=FrontDoor)
	FrontDoorCertificateSourceParameters FrontDoorCertificateSourceParametersResponsePtrInput `pulumi:"frontDoorCertificateSourceParameters"`
	// KeyVault certificate source parameters (if certificateSource=AzureKeyVault)
	KeyVaultCertificateSourceParameters KeyVaultCertificateSourceParametersResponsePtrInput `pulumi:"keyVaultCertificateSourceParameters"`
	// The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
	MinimumTlsVersion pulumi.StringInput `pulumi:"minimumTlsVersion"`
	// Defines the TLS extension protocol that is used for secure delivery
	ProtocolType pulumi.StringInput `pulumi:"protocolType"`
}

func (CustomHttpsConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomHttpsConfigurationResponse)(nil)).Elem()
}

func (i CustomHttpsConfigurationResponseArgs) ToCustomHttpsConfigurationResponseOutput() CustomHttpsConfigurationResponseOutput {
	return i.ToCustomHttpsConfigurationResponseOutputWithContext(context.Background())
}

func (i CustomHttpsConfigurationResponseArgs) ToCustomHttpsConfigurationResponseOutputWithContext(ctx context.Context) CustomHttpsConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomHttpsConfigurationResponseOutput)
}

func (i CustomHttpsConfigurationResponseArgs) ToCustomHttpsConfigurationResponsePtrOutput() CustomHttpsConfigurationResponsePtrOutput {
	return i.ToCustomHttpsConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i CustomHttpsConfigurationResponseArgs) ToCustomHttpsConfigurationResponsePtrOutputWithContext(ctx context.Context) CustomHttpsConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomHttpsConfigurationResponseOutput).ToCustomHttpsConfigurationResponsePtrOutputWithContext(ctx)
}

// CustomHttpsConfigurationResponsePtrInput is an input type that accepts CustomHttpsConfigurationResponseArgs, CustomHttpsConfigurationResponsePtr and CustomHttpsConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `CustomHttpsConfigurationResponsePtrInput` via:
//
//          CustomHttpsConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type CustomHttpsConfigurationResponsePtrInput interface {
	pulumi.Input

	ToCustomHttpsConfigurationResponsePtrOutput() CustomHttpsConfigurationResponsePtrOutput
	ToCustomHttpsConfigurationResponsePtrOutputWithContext(context.Context) CustomHttpsConfigurationResponsePtrOutput
}

type customHttpsConfigurationResponsePtrType CustomHttpsConfigurationResponseArgs

func CustomHttpsConfigurationResponsePtr(v *CustomHttpsConfigurationResponseArgs) CustomHttpsConfigurationResponsePtrInput {
	return (*customHttpsConfigurationResponsePtrType)(v)
}

func (*customHttpsConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomHttpsConfigurationResponse)(nil)).Elem()
}

func (i *customHttpsConfigurationResponsePtrType) ToCustomHttpsConfigurationResponsePtrOutput() CustomHttpsConfigurationResponsePtrOutput {
	return i.ToCustomHttpsConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *customHttpsConfigurationResponsePtrType) ToCustomHttpsConfigurationResponsePtrOutputWithContext(ctx context.Context) CustomHttpsConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomHttpsConfigurationResponsePtrOutput)
}

// Https settings for a domain
type CustomHttpsConfigurationResponseOutput struct{ *pulumi.OutputState }

func (CustomHttpsConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomHttpsConfigurationResponse)(nil)).Elem()
}

func (o CustomHttpsConfigurationResponseOutput) ToCustomHttpsConfigurationResponseOutput() CustomHttpsConfigurationResponseOutput {
	return o
}

func (o CustomHttpsConfigurationResponseOutput) ToCustomHttpsConfigurationResponseOutputWithContext(ctx context.Context) CustomHttpsConfigurationResponseOutput {
	return o
}

func (o CustomHttpsConfigurationResponseOutput) ToCustomHttpsConfigurationResponsePtrOutput() CustomHttpsConfigurationResponsePtrOutput {
	return o.ToCustomHttpsConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o CustomHttpsConfigurationResponseOutput) ToCustomHttpsConfigurationResponsePtrOutputWithContext(ctx context.Context) CustomHttpsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CustomHttpsConfigurationResponse) *CustomHttpsConfigurationResponse {
		return &v
	}).(CustomHttpsConfigurationResponsePtrOutput)
}

// Defines the source of the SSL certificate
func (o CustomHttpsConfigurationResponseOutput) CertificateSource() pulumi.StringOutput {
	return o.ApplyT(func(v CustomHttpsConfigurationResponse) string { return v.CertificateSource }).(pulumi.StringOutput)
}

// Parameters required for enabling SSL with Front Door-managed certificates (if certificateSource=FrontDoor)
func (o CustomHttpsConfigurationResponseOutput) FrontDoorCertificateSourceParameters() FrontDoorCertificateSourceParametersResponsePtrOutput {
	return o.ApplyT(func(v CustomHttpsConfigurationResponse) *FrontDoorCertificateSourceParametersResponse {
		return v.FrontDoorCertificateSourceParameters
	}).(FrontDoorCertificateSourceParametersResponsePtrOutput)
}

// KeyVault certificate source parameters (if certificateSource=AzureKeyVault)
func (o CustomHttpsConfigurationResponseOutput) KeyVaultCertificateSourceParameters() KeyVaultCertificateSourceParametersResponsePtrOutput {
	return o.ApplyT(func(v CustomHttpsConfigurationResponse) *KeyVaultCertificateSourceParametersResponse {
		return v.KeyVaultCertificateSourceParameters
	}).(KeyVaultCertificateSourceParametersResponsePtrOutput)
}

// The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
func (o CustomHttpsConfigurationResponseOutput) MinimumTlsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CustomHttpsConfigurationResponse) string { return v.MinimumTlsVersion }).(pulumi.StringOutput)
}

// Defines the TLS extension protocol that is used for secure delivery
func (o CustomHttpsConfigurationResponseOutput) ProtocolType() pulumi.StringOutput {
	return o.ApplyT(func(v CustomHttpsConfigurationResponse) string { return v.ProtocolType }).(pulumi.StringOutput)
}

type CustomHttpsConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomHttpsConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomHttpsConfigurationResponse)(nil)).Elem()
}

func (o CustomHttpsConfigurationResponsePtrOutput) ToCustomHttpsConfigurationResponsePtrOutput() CustomHttpsConfigurationResponsePtrOutput {
	return o
}

func (o CustomHttpsConfigurationResponsePtrOutput) ToCustomHttpsConfigurationResponsePtrOutputWithContext(ctx context.Context) CustomHttpsConfigurationResponsePtrOutput {
	return o
}

func (o CustomHttpsConfigurationResponsePtrOutput) Elem() CustomHttpsConfigurationResponseOutput {
	return o.ApplyT(func(v *CustomHttpsConfigurationResponse) CustomHttpsConfigurationResponse { return *v }).(CustomHttpsConfigurationResponseOutput)
}

// Defines the source of the SSL certificate
func (o CustomHttpsConfigurationResponsePtrOutput) CertificateSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomHttpsConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CertificateSource
	}).(pulumi.StringPtrOutput)
}

// Parameters required for enabling SSL with Front Door-managed certificates (if certificateSource=FrontDoor)
func (o CustomHttpsConfigurationResponsePtrOutput) FrontDoorCertificateSourceParameters() FrontDoorCertificateSourceParametersResponsePtrOutput {
	return o.ApplyT(func(v *CustomHttpsConfigurationResponse) *FrontDoorCertificateSourceParametersResponse {
		if v == nil {
			return nil
		}
		return v.FrontDoorCertificateSourceParameters
	}).(FrontDoorCertificateSourceParametersResponsePtrOutput)
}

// KeyVault certificate source parameters (if certificateSource=AzureKeyVault)
func (o CustomHttpsConfigurationResponsePtrOutput) KeyVaultCertificateSourceParameters() KeyVaultCertificateSourceParametersResponsePtrOutput {
	return o.ApplyT(func(v *CustomHttpsConfigurationResponse) *KeyVaultCertificateSourceParametersResponse {
		if v == nil {
			return nil
		}
		return v.KeyVaultCertificateSourceParameters
	}).(KeyVaultCertificateSourceParametersResponsePtrOutput)
}

// The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
func (o CustomHttpsConfigurationResponsePtrOutput) MinimumTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomHttpsConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MinimumTlsVersion
	}).(pulumi.StringPtrOutput)
}

// Defines the TLS extension protocol that is used for secure delivery
func (o CustomHttpsConfigurationResponsePtrOutput) ProtocolType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomHttpsConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProtocolType
	}).(pulumi.StringPtrOutput)
}

// Front Door represents a collection of backend endpoints to route traffic to along with rules that specify how traffic is sent there.
type FrontDoorType struct {
	// Resource location.
	Location *string `pulumi:"location"`
	// Resource name.
	Name string `pulumi:"name"`
	// Properties of the Front Door Load Balancer
	Properties FrontDoorPropertiesResponse `pulumi:"properties"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Resource type.
	Type string `pulumi:"type"`
}

// FrontDoorTypeInput is an input type that accepts FrontDoorTypeArgs and FrontDoorTypeOutput values.
// You can construct a concrete instance of `FrontDoorTypeInput` via:
//
//          FrontDoorTypeArgs{...}
type FrontDoorTypeInput interface {
	pulumi.Input

	ToFrontDoorTypeOutput() FrontDoorTypeOutput
	ToFrontDoorTypeOutputWithContext(context.Context) FrontDoorTypeOutput
}

// Front Door represents a collection of backend endpoints to route traffic to along with rules that specify how traffic is sent there.
type FrontDoorTypeArgs struct {
	// Resource location.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// Properties of the Front Door Load Balancer
	Properties FrontDoorPropertiesResponseInput `pulumi:"properties"`
	// Resource tags.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FrontDoorTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontDoorType)(nil)).Elem()
}

func (i FrontDoorTypeArgs) ToFrontDoorTypeOutput() FrontDoorTypeOutput {
	return i.ToFrontDoorTypeOutputWithContext(context.Background())
}

func (i FrontDoorTypeArgs) ToFrontDoorTypeOutputWithContext(ctx context.Context) FrontDoorTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontDoorTypeOutput)
}

// Front Door represents a collection of backend endpoints to route traffic to along with rules that specify how traffic is sent there.
type FrontDoorTypeOutput struct{ *pulumi.OutputState }

func (FrontDoorTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontDoorType)(nil)).Elem()
}

func (o FrontDoorTypeOutput) ToFrontDoorTypeOutput() FrontDoorTypeOutput {
	return o
}

func (o FrontDoorTypeOutput) ToFrontDoorTypeOutputWithContext(ctx context.Context) FrontDoorTypeOutput {
	return o
}

// Resource location.
func (o FrontDoorTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontDoorType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o FrontDoorTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FrontDoorType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of the Front Door Load Balancer
func (o FrontDoorTypeOutput) Properties() FrontDoorPropertiesResponseOutput {
	return o.ApplyT(func(v FrontDoorType) FrontDoorPropertiesResponse { return v.Properties }).(FrontDoorPropertiesResponseOutput)
}

// Resource tags.
func (o FrontDoorTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FrontDoorType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type.
func (o FrontDoorTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FrontDoorType) string { return v.Type }).(pulumi.StringOutput)
}

// Parameters required for enabling SSL with Front Door-managed certificates
type FrontDoorCertificateSourceParametersResponse struct {
	// Defines the type of the certificate used for secure connections to a frontendEndpoint
	CertificateType *string `pulumi:"certificateType"`
}

// FrontDoorCertificateSourceParametersResponseInput is an input type that accepts FrontDoorCertificateSourceParametersResponseArgs and FrontDoorCertificateSourceParametersResponseOutput values.
// You can construct a concrete instance of `FrontDoorCertificateSourceParametersResponseInput` via:
//
//          FrontDoorCertificateSourceParametersResponseArgs{...}
type FrontDoorCertificateSourceParametersResponseInput interface {
	pulumi.Input

	ToFrontDoorCertificateSourceParametersResponseOutput() FrontDoorCertificateSourceParametersResponseOutput
	ToFrontDoorCertificateSourceParametersResponseOutputWithContext(context.Context) FrontDoorCertificateSourceParametersResponseOutput
}

// Parameters required for enabling SSL with Front Door-managed certificates
type FrontDoorCertificateSourceParametersResponseArgs struct {
	// Defines the type of the certificate used for secure connections to a frontendEndpoint
	CertificateType pulumi.StringPtrInput `pulumi:"certificateType"`
}

func (FrontDoorCertificateSourceParametersResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontDoorCertificateSourceParametersResponse)(nil)).Elem()
}

func (i FrontDoorCertificateSourceParametersResponseArgs) ToFrontDoorCertificateSourceParametersResponseOutput() FrontDoorCertificateSourceParametersResponseOutput {
	return i.ToFrontDoorCertificateSourceParametersResponseOutputWithContext(context.Background())
}

func (i FrontDoorCertificateSourceParametersResponseArgs) ToFrontDoorCertificateSourceParametersResponseOutputWithContext(ctx context.Context) FrontDoorCertificateSourceParametersResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontDoorCertificateSourceParametersResponseOutput)
}

func (i FrontDoorCertificateSourceParametersResponseArgs) ToFrontDoorCertificateSourceParametersResponsePtrOutput() FrontDoorCertificateSourceParametersResponsePtrOutput {
	return i.ToFrontDoorCertificateSourceParametersResponsePtrOutputWithContext(context.Background())
}

func (i FrontDoorCertificateSourceParametersResponseArgs) ToFrontDoorCertificateSourceParametersResponsePtrOutputWithContext(ctx context.Context) FrontDoorCertificateSourceParametersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontDoorCertificateSourceParametersResponseOutput).ToFrontDoorCertificateSourceParametersResponsePtrOutputWithContext(ctx)
}

// FrontDoorCertificateSourceParametersResponsePtrInput is an input type that accepts FrontDoorCertificateSourceParametersResponseArgs, FrontDoorCertificateSourceParametersResponsePtr and FrontDoorCertificateSourceParametersResponsePtrOutput values.
// You can construct a concrete instance of `FrontDoorCertificateSourceParametersResponsePtrInput` via:
//
//          FrontDoorCertificateSourceParametersResponseArgs{...}
//
//  or:
//
//          nil
type FrontDoorCertificateSourceParametersResponsePtrInput interface {
	pulumi.Input

	ToFrontDoorCertificateSourceParametersResponsePtrOutput() FrontDoorCertificateSourceParametersResponsePtrOutput
	ToFrontDoorCertificateSourceParametersResponsePtrOutputWithContext(context.Context) FrontDoorCertificateSourceParametersResponsePtrOutput
}

type frontDoorCertificateSourceParametersResponsePtrType FrontDoorCertificateSourceParametersResponseArgs

func FrontDoorCertificateSourceParametersResponsePtr(v *FrontDoorCertificateSourceParametersResponseArgs) FrontDoorCertificateSourceParametersResponsePtrInput {
	return (*frontDoorCertificateSourceParametersResponsePtrType)(v)
}

func (*frontDoorCertificateSourceParametersResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontDoorCertificateSourceParametersResponse)(nil)).Elem()
}

func (i *frontDoorCertificateSourceParametersResponsePtrType) ToFrontDoorCertificateSourceParametersResponsePtrOutput() FrontDoorCertificateSourceParametersResponsePtrOutput {
	return i.ToFrontDoorCertificateSourceParametersResponsePtrOutputWithContext(context.Background())
}

func (i *frontDoorCertificateSourceParametersResponsePtrType) ToFrontDoorCertificateSourceParametersResponsePtrOutputWithContext(ctx context.Context) FrontDoorCertificateSourceParametersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontDoorCertificateSourceParametersResponsePtrOutput)
}

// Parameters required for enabling SSL with Front Door-managed certificates
type FrontDoorCertificateSourceParametersResponseOutput struct{ *pulumi.OutputState }

func (FrontDoorCertificateSourceParametersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontDoorCertificateSourceParametersResponse)(nil)).Elem()
}

func (o FrontDoorCertificateSourceParametersResponseOutput) ToFrontDoorCertificateSourceParametersResponseOutput() FrontDoorCertificateSourceParametersResponseOutput {
	return o
}

func (o FrontDoorCertificateSourceParametersResponseOutput) ToFrontDoorCertificateSourceParametersResponseOutputWithContext(ctx context.Context) FrontDoorCertificateSourceParametersResponseOutput {
	return o
}

func (o FrontDoorCertificateSourceParametersResponseOutput) ToFrontDoorCertificateSourceParametersResponsePtrOutput() FrontDoorCertificateSourceParametersResponsePtrOutput {
	return o.ToFrontDoorCertificateSourceParametersResponsePtrOutputWithContext(context.Background())
}

func (o FrontDoorCertificateSourceParametersResponseOutput) ToFrontDoorCertificateSourceParametersResponsePtrOutputWithContext(ctx context.Context) FrontDoorCertificateSourceParametersResponsePtrOutput {
	return o.ApplyT(func(v FrontDoorCertificateSourceParametersResponse) *FrontDoorCertificateSourceParametersResponse {
		return &v
	}).(FrontDoorCertificateSourceParametersResponsePtrOutput)
}

// Defines the type of the certificate used for secure connections to a frontendEndpoint
func (o FrontDoorCertificateSourceParametersResponseOutput) CertificateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontDoorCertificateSourceParametersResponse) *string { return v.CertificateType }).(pulumi.StringPtrOutput)
}

type FrontDoorCertificateSourceParametersResponsePtrOutput struct{ *pulumi.OutputState }

func (FrontDoorCertificateSourceParametersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontDoorCertificateSourceParametersResponse)(nil)).Elem()
}

func (o FrontDoorCertificateSourceParametersResponsePtrOutput) ToFrontDoorCertificateSourceParametersResponsePtrOutput() FrontDoorCertificateSourceParametersResponsePtrOutput {
	return o
}

func (o FrontDoorCertificateSourceParametersResponsePtrOutput) ToFrontDoorCertificateSourceParametersResponsePtrOutputWithContext(ctx context.Context) FrontDoorCertificateSourceParametersResponsePtrOutput {
	return o
}

func (o FrontDoorCertificateSourceParametersResponsePtrOutput) Elem() FrontDoorCertificateSourceParametersResponseOutput {
	return o.ApplyT(func(v *FrontDoorCertificateSourceParametersResponse) FrontDoorCertificateSourceParametersResponse {
		return *v
	}).(FrontDoorCertificateSourceParametersResponseOutput)
}

// Defines the type of the certificate used for secure connections to a frontendEndpoint
func (o FrontDoorCertificateSourceParametersResponsePtrOutput) CertificateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontDoorCertificateSourceParametersResponse) *string {
		if v == nil {
			return nil
		}
		return v.CertificateType
	}).(pulumi.StringPtrOutput)
}

// The JSON object that contains the properties required to create an endpoint.
type FrontDoorPropertiesResponse struct {
	// Backend pools available to routing rules.
	BackendPools []BackendPoolResponse `pulumi:"backendPools"`
	// Settings for all backendPools
	BackendPoolsSettings *BackendPoolsSettingsResponse `pulumi:"backendPoolsSettings"`
	// The host that each frontendEndpoint must CNAME to.
	Cname string `pulumi:"cname"`
	// Operational status of the Front Door load balancer. Permitted values are 'Enabled' or 'Disabled'
	EnabledState *string `pulumi:"enabledState"`
	// A friendly name for the frontDoor
	FriendlyName *string `pulumi:"friendlyName"`
	// Frontend endpoints available to routing rules.
	FrontendEndpoints []FrontendEndpointResponse `pulumi:"frontendEndpoints"`
	// Health probe settings associated with this Front Door instance.
	HealthProbeSettings []HealthProbeSettingsModelResponse `pulumi:"healthProbeSettings"`
	// Load balancing settings associated with this Front Door instance.
	LoadBalancingSettings []LoadBalancingSettingsModelResponse `pulumi:"loadBalancingSettings"`
	// Provisioning state of the Front Door.
	ProvisioningState string `pulumi:"provisioningState"`
	// Resource status of the Front Door.
	ResourceState *string `pulumi:"resourceState"`
	// Routing rules associated with this Front Door.
	RoutingRules []RoutingRuleResponse `pulumi:"routingRules"`
}

// FrontDoorPropertiesResponseInput is an input type that accepts FrontDoorPropertiesResponseArgs and FrontDoorPropertiesResponseOutput values.
// You can construct a concrete instance of `FrontDoorPropertiesResponseInput` via:
//
//          FrontDoorPropertiesResponseArgs{...}
type FrontDoorPropertiesResponseInput interface {
	pulumi.Input

	ToFrontDoorPropertiesResponseOutput() FrontDoorPropertiesResponseOutput
	ToFrontDoorPropertiesResponseOutputWithContext(context.Context) FrontDoorPropertiesResponseOutput
}

// The JSON object that contains the properties required to create an endpoint.
type FrontDoorPropertiesResponseArgs struct {
	// Backend pools available to routing rules.
	BackendPools BackendPoolResponseArrayInput `pulumi:"backendPools"`
	// Settings for all backendPools
	BackendPoolsSettings BackendPoolsSettingsResponsePtrInput `pulumi:"backendPoolsSettings"`
	// The host that each frontendEndpoint must CNAME to.
	Cname pulumi.StringInput `pulumi:"cname"`
	// Operational status of the Front Door load balancer. Permitted values are 'Enabled' or 'Disabled'
	EnabledState pulumi.StringPtrInput `pulumi:"enabledState"`
	// A friendly name for the frontDoor
	FriendlyName pulumi.StringPtrInput `pulumi:"friendlyName"`
	// Frontend endpoints available to routing rules.
	FrontendEndpoints FrontendEndpointResponseArrayInput `pulumi:"frontendEndpoints"`
	// Health probe settings associated with this Front Door instance.
	HealthProbeSettings HealthProbeSettingsModelResponseArrayInput `pulumi:"healthProbeSettings"`
	// Load balancing settings associated with this Front Door instance.
	LoadBalancingSettings LoadBalancingSettingsModelResponseArrayInput `pulumi:"loadBalancingSettings"`
	// Provisioning state of the Front Door.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// Resource status of the Front Door.
	ResourceState pulumi.StringPtrInput `pulumi:"resourceState"`
	// Routing rules associated with this Front Door.
	RoutingRules RoutingRuleResponseArrayInput `pulumi:"routingRules"`
}

func (FrontDoorPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontDoorPropertiesResponse)(nil)).Elem()
}

func (i FrontDoorPropertiesResponseArgs) ToFrontDoorPropertiesResponseOutput() FrontDoorPropertiesResponseOutput {
	return i.ToFrontDoorPropertiesResponseOutputWithContext(context.Background())
}

func (i FrontDoorPropertiesResponseArgs) ToFrontDoorPropertiesResponseOutputWithContext(ctx context.Context) FrontDoorPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontDoorPropertiesResponseOutput)
}

func (i FrontDoorPropertiesResponseArgs) ToFrontDoorPropertiesResponsePtrOutput() FrontDoorPropertiesResponsePtrOutput {
	return i.ToFrontDoorPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i FrontDoorPropertiesResponseArgs) ToFrontDoorPropertiesResponsePtrOutputWithContext(ctx context.Context) FrontDoorPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontDoorPropertiesResponseOutput).ToFrontDoorPropertiesResponsePtrOutputWithContext(ctx)
}

// FrontDoorPropertiesResponsePtrInput is an input type that accepts FrontDoorPropertiesResponseArgs, FrontDoorPropertiesResponsePtr and FrontDoorPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `FrontDoorPropertiesResponsePtrInput` via:
//
//          FrontDoorPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type FrontDoorPropertiesResponsePtrInput interface {
	pulumi.Input

	ToFrontDoorPropertiesResponsePtrOutput() FrontDoorPropertiesResponsePtrOutput
	ToFrontDoorPropertiesResponsePtrOutputWithContext(context.Context) FrontDoorPropertiesResponsePtrOutput
}

type frontDoorPropertiesResponsePtrType FrontDoorPropertiesResponseArgs

func FrontDoorPropertiesResponsePtr(v *FrontDoorPropertiesResponseArgs) FrontDoorPropertiesResponsePtrInput {
	return (*frontDoorPropertiesResponsePtrType)(v)
}

func (*frontDoorPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontDoorPropertiesResponse)(nil)).Elem()
}

func (i *frontDoorPropertiesResponsePtrType) ToFrontDoorPropertiesResponsePtrOutput() FrontDoorPropertiesResponsePtrOutput {
	return i.ToFrontDoorPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *frontDoorPropertiesResponsePtrType) ToFrontDoorPropertiesResponsePtrOutputWithContext(ctx context.Context) FrontDoorPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontDoorPropertiesResponsePtrOutput)
}

// The JSON object that contains the properties required to create an endpoint.
type FrontDoorPropertiesResponseOutput struct{ *pulumi.OutputState }

func (FrontDoorPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontDoorPropertiesResponse)(nil)).Elem()
}

func (o FrontDoorPropertiesResponseOutput) ToFrontDoorPropertiesResponseOutput() FrontDoorPropertiesResponseOutput {
	return o
}

func (o FrontDoorPropertiesResponseOutput) ToFrontDoorPropertiesResponseOutputWithContext(ctx context.Context) FrontDoorPropertiesResponseOutput {
	return o
}

func (o FrontDoorPropertiesResponseOutput) ToFrontDoorPropertiesResponsePtrOutput() FrontDoorPropertiesResponsePtrOutput {
	return o.ToFrontDoorPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o FrontDoorPropertiesResponseOutput) ToFrontDoorPropertiesResponsePtrOutputWithContext(ctx context.Context) FrontDoorPropertiesResponsePtrOutput {
	return o.ApplyT(func(v FrontDoorPropertiesResponse) *FrontDoorPropertiesResponse {
		return &v
	}).(FrontDoorPropertiesResponsePtrOutput)
}

// Backend pools available to routing rules.
func (o FrontDoorPropertiesResponseOutput) BackendPools() BackendPoolResponseArrayOutput {
	return o.ApplyT(func(v FrontDoorPropertiesResponse) []BackendPoolResponse { return v.BackendPools }).(BackendPoolResponseArrayOutput)
}

// Settings for all backendPools
func (o FrontDoorPropertiesResponseOutput) BackendPoolsSettings() BackendPoolsSettingsResponsePtrOutput {
	return o.ApplyT(func(v FrontDoorPropertiesResponse) *BackendPoolsSettingsResponse { return v.BackendPoolsSettings }).(BackendPoolsSettingsResponsePtrOutput)
}

// The host that each frontendEndpoint must CNAME to.
func (o FrontDoorPropertiesResponseOutput) Cname() pulumi.StringOutput {
	return o.ApplyT(func(v FrontDoorPropertiesResponse) string { return v.Cname }).(pulumi.StringOutput)
}

// Operational status of the Front Door load balancer. Permitted values are 'Enabled' or 'Disabled'
func (o FrontDoorPropertiesResponseOutput) EnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontDoorPropertiesResponse) *string { return v.EnabledState }).(pulumi.StringPtrOutput)
}

// A friendly name for the frontDoor
func (o FrontDoorPropertiesResponseOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontDoorPropertiesResponse) *string { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

// Frontend endpoints available to routing rules.
func (o FrontDoorPropertiesResponseOutput) FrontendEndpoints() FrontendEndpointResponseArrayOutput {
	return o.ApplyT(func(v FrontDoorPropertiesResponse) []FrontendEndpointResponse { return v.FrontendEndpoints }).(FrontendEndpointResponseArrayOutput)
}

// Health probe settings associated with this Front Door instance.
func (o FrontDoorPropertiesResponseOutput) HealthProbeSettings() HealthProbeSettingsModelResponseArrayOutput {
	return o.ApplyT(func(v FrontDoorPropertiesResponse) []HealthProbeSettingsModelResponse { return v.HealthProbeSettings }).(HealthProbeSettingsModelResponseArrayOutput)
}

// Load balancing settings associated with this Front Door instance.
func (o FrontDoorPropertiesResponseOutput) LoadBalancingSettings() LoadBalancingSettingsModelResponseArrayOutput {
	return o.ApplyT(func(v FrontDoorPropertiesResponse) []LoadBalancingSettingsModelResponse {
		return v.LoadBalancingSettings
	}).(LoadBalancingSettingsModelResponseArrayOutput)
}

// Provisioning state of the Front Door.
func (o FrontDoorPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v FrontDoorPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Resource status of the Front Door.
func (o FrontDoorPropertiesResponseOutput) ResourceState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontDoorPropertiesResponse) *string { return v.ResourceState }).(pulumi.StringPtrOutput)
}

// Routing rules associated with this Front Door.
func (o FrontDoorPropertiesResponseOutput) RoutingRules() RoutingRuleResponseArrayOutput {
	return o.ApplyT(func(v FrontDoorPropertiesResponse) []RoutingRuleResponse { return v.RoutingRules }).(RoutingRuleResponseArrayOutput)
}

type FrontDoorPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (FrontDoorPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontDoorPropertiesResponse)(nil)).Elem()
}

func (o FrontDoorPropertiesResponsePtrOutput) ToFrontDoorPropertiesResponsePtrOutput() FrontDoorPropertiesResponsePtrOutput {
	return o
}

func (o FrontDoorPropertiesResponsePtrOutput) ToFrontDoorPropertiesResponsePtrOutputWithContext(ctx context.Context) FrontDoorPropertiesResponsePtrOutput {
	return o
}

func (o FrontDoorPropertiesResponsePtrOutput) Elem() FrontDoorPropertiesResponseOutput {
	return o.ApplyT(func(v *FrontDoorPropertiesResponse) FrontDoorPropertiesResponse { return *v }).(FrontDoorPropertiesResponseOutput)
}

// Backend pools available to routing rules.
func (o FrontDoorPropertiesResponsePtrOutput) BackendPools() BackendPoolResponseArrayOutput {
	return o.ApplyT(func(v *FrontDoorPropertiesResponse) []BackendPoolResponse {
		if v == nil {
			return nil
		}
		return v.BackendPools
	}).(BackendPoolResponseArrayOutput)
}

// Settings for all backendPools
func (o FrontDoorPropertiesResponsePtrOutput) BackendPoolsSettings() BackendPoolsSettingsResponsePtrOutput {
	return o.ApplyT(func(v *FrontDoorPropertiesResponse) *BackendPoolsSettingsResponse {
		if v == nil {
			return nil
		}
		return v.BackendPoolsSettings
	}).(BackendPoolsSettingsResponsePtrOutput)
}

// The host that each frontendEndpoint must CNAME to.
func (o FrontDoorPropertiesResponsePtrOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontDoorPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Cname
	}).(pulumi.StringPtrOutput)
}

// Operational status of the Front Door load balancer. Permitted values are 'Enabled' or 'Disabled'
func (o FrontDoorPropertiesResponsePtrOutput) EnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontDoorPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.EnabledState
	}).(pulumi.StringPtrOutput)
}

// A friendly name for the frontDoor
func (o FrontDoorPropertiesResponsePtrOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontDoorPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.FriendlyName
	}).(pulumi.StringPtrOutput)
}

// Frontend endpoints available to routing rules.
func (o FrontDoorPropertiesResponsePtrOutput) FrontendEndpoints() FrontendEndpointResponseArrayOutput {
	return o.ApplyT(func(v *FrontDoorPropertiesResponse) []FrontendEndpointResponse {
		if v == nil {
			return nil
		}
		return v.FrontendEndpoints
	}).(FrontendEndpointResponseArrayOutput)
}

// Health probe settings associated with this Front Door instance.
func (o FrontDoorPropertiesResponsePtrOutput) HealthProbeSettings() HealthProbeSettingsModelResponseArrayOutput {
	return o.ApplyT(func(v *FrontDoorPropertiesResponse) []HealthProbeSettingsModelResponse {
		if v == nil {
			return nil
		}
		return v.HealthProbeSettings
	}).(HealthProbeSettingsModelResponseArrayOutput)
}

// Load balancing settings associated with this Front Door instance.
func (o FrontDoorPropertiesResponsePtrOutput) LoadBalancingSettings() LoadBalancingSettingsModelResponseArrayOutput {
	return o.ApplyT(func(v *FrontDoorPropertiesResponse) []LoadBalancingSettingsModelResponse {
		if v == nil {
			return nil
		}
		return v.LoadBalancingSettings
	}).(LoadBalancingSettingsModelResponseArrayOutput)
}

// Provisioning state of the Front Door.
func (o FrontDoorPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontDoorPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Resource status of the Front Door.
func (o FrontDoorPropertiesResponsePtrOutput) ResourceState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontDoorPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceState
	}).(pulumi.StringPtrOutput)
}

// Routing rules associated with this Front Door.
func (o FrontDoorPropertiesResponsePtrOutput) RoutingRules() RoutingRuleResponseArrayOutput {
	return o.ApplyT(func(v *FrontDoorPropertiesResponse) []RoutingRuleResponse {
		if v == nil {
			return nil
		}
		return v.RoutingRules
	}).(RoutingRuleResponseArrayOutput)
}

// A frontend endpoint used for routing.
type FrontendEndpoint struct {
	// The host name of the frontendEndpoint. Must be a domain name.
	HostName *string `pulumi:"hostName"`
	// Resource ID.
	Id *string `pulumi:"id"`
	// Resource name.
	Name *string `pulumi:"name"`
	// Resource status.
	ResourceState *string `pulumi:"resourceState"`
	// Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
	SessionAffinityEnabledState *string `pulumi:"sessionAffinityEnabledState"`
	// UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.
	SessionAffinityTtlSeconds *int `pulumi:"sessionAffinityTtlSeconds"`
	// Defines the Web Application Firewall policy for each host (if applicable)
	WebApplicationFirewallPolicyLink *FrontendEndpointUpdateParametersProperties `pulumi:"webApplicationFirewallPolicyLink"`
}

// FrontendEndpointInput is an input type that accepts FrontendEndpointArgs and FrontendEndpointOutput values.
// You can construct a concrete instance of `FrontendEndpointInput` via:
//
//          FrontendEndpointArgs{...}
type FrontendEndpointInput interface {
	pulumi.Input

	ToFrontendEndpointOutput() FrontendEndpointOutput
	ToFrontendEndpointOutputWithContext(context.Context) FrontendEndpointOutput
}

// A frontend endpoint used for routing.
type FrontendEndpointArgs struct {
	// The host name of the frontendEndpoint. Must be a domain name.
	HostName pulumi.StringPtrInput `pulumi:"hostName"`
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Resource status.
	ResourceState pulumi.StringPtrInput `pulumi:"resourceState"`
	// Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
	SessionAffinityEnabledState pulumi.StringPtrInput `pulumi:"sessionAffinityEnabledState"`
	// UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.
	SessionAffinityTtlSeconds pulumi.IntPtrInput `pulumi:"sessionAffinityTtlSeconds"`
	// Defines the Web Application Firewall policy for each host (if applicable)
	WebApplicationFirewallPolicyLink FrontendEndpointUpdateParametersPropertiesPtrInput `pulumi:"webApplicationFirewallPolicyLink"`
}

func (FrontendEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendEndpoint)(nil)).Elem()
}

func (i FrontendEndpointArgs) ToFrontendEndpointOutput() FrontendEndpointOutput {
	return i.ToFrontendEndpointOutputWithContext(context.Background())
}

func (i FrontendEndpointArgs) ToFrontendEndpointOutputWithContext(ctx context.Context) FrontendEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendEndpointOutput)
}

// FrontendEndpointArrayInput is an input type that accepts FrontendEndpointArray and FrontendEndpointArrayOutput values.
// You can construct a concrete instance of `FrontendEndpointArrayInput` via:
//
//          FrontendEndpointArray{ FrontendEndpointArgs{...} }
type FrontendEndpointArrayInput interface {
	pulumi.Input

	ToFrontendEndpointArrayOutput() FrontendEndpointArrayOutput
	ToFrontendEndpointArrayOutputWithContext(context.Context) FrontendEndpointArrayOutput
}

type FrontendEndpointArray []FrontendEndpointInput

func (FrontendEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontendEndpoint)(nil)).Elem()
}

func (i FrontendEndpointArray) ToFrontendEndpointArrayOutput() FrontendEndpointArrayOutput {
	return i.ToFrontendEndpointArrayOutputWithContext(context.Background())
}

func (i FrontendEndpointArray) ToFrontendEndpointArrayOutputWithContext(ctx context.Context) FrontendEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendEndpointArrayOutput)
}

// A frontend endpoint used for routing.
type FrontendEndpointOutput struct{ *pulumi.OutputState }

func (FrontendEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendEndpoint)(nil)).Elem()
}

func (o FrontendEndpointOutput) ToFrontendEndpointOutput() FrontendEndpointOutput {
	return o
}

func (o FrontendEndpointOutput) ToFrontendEndpointOutputWithContext(ctx context.Context) FrontendEndpointOutput {
	return o
}

// The host name of the frontendEndpoint. Must be a domain name.
func (o FrontendEndpointOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendEndpoint) *string { return v.HostName }).(pulumi.StringPtrOutput)
}

// Resource ID.
func (o FrontendEndpointOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendEndpoint) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o FrontendEndpointOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendEndpoint) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Resource status.
func (o FrontendEndpointOutput) ResourceState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendEndpoint) *string { return v.ResourceState }).(pulumi.StringPtrOutput)
}

// Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
func (o FrontendEndpointOutput) SessionAffinityEnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendEndpoint) *string { return v.SessionAffinityEnabledState }).(pulumi.StringPtrOutput)
}

// UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.
func (o FrontendEndpointOutput) SessionAffinityTtlSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FrontendEndpoint) *int { return v.SessionAffinityTtlSeconds }).(pulumi.IntPtrOutput)
}

// Defines the Web Application Firewall policy for each host (if applicable)
func (o FrontendEndpointOutput) WebApplicationFirewallPolicyLink() FrontendEndpointUpdateParametersPropertiesPtrOutput {
	return o.ApplyT(func(v FrontendEndpoint) *FrontendEndpointUpdateParametersProperties {
		return v.WebApplicationFirewallPolicyLink
	}).(FrontendEndpointUpdateParametersPropertiesPtrOutput)
}

type FrontendEndpointArrayOutput struct{ *pulumi.OutputState }

func (FrontendEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontendEndpoint)(nil)).Elem()
}

func (o FrontendEndpointArrayOutput) ToFrontendEndpointArrayOutput() FrontendEndpointArrayOutput {
	return o
}

func (o FrontendEndpointArrayOutput) ToFrontendEndpointArrayOutputWithContext(ctx context.Context) FrontendEndpointArrayOutput {
	return o
}

func (o FrontendEndpointArrayOutput) Index(i pulumi.IntInput) FrontendEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FrontendEndpoint {
		return vs[0].([]FrontendEndpoint)[vs[1].(int)]
	}).(FrontendEndpointOutput)
}

// The JSON object that contains the properties required to create a frontend endpoint.
type FrontendEndpointPropertiesResponse struct {
	// The configuration specifying how to enable HTTPS
	CustomHttpsConfiguration CustomHttpsConfigurationResponse `pulumi:"customHttpsConfiguration"`
	// Provisioning status of Custom Https of the frontendEndpoint.
	CustomHttpsProvisioningState string `pulumi:"customHttpsProvisioningState"`
	// Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.
	CustomHttpsProvisioningSubstate string `pulumi:"customHttpsProvisioningSubstate"`
	// The host name of the frontendEndpoint. Must be a domain name.
	HostName *string `pulumi:"hostName"`
	// Resource status.
	ResourceState *string `pulumi:"resourceState"`
	// Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
	SessionAffinityEnabledState *string `pulumi:"sessionAffinityEnabledState"`
	// UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.
	SessionAffinityTtlSeconds *int `pulumi:"sessionAffinityTtlSeconds"`
	// Defines the Web Application Firewall policy for each host (if applicable)
	WebApplicationFirewallPolicyLink *FrontendEndpointUpdateParametersResponseProperties `pulumi:"webApplicationFirewallPolicyLink"`
}

// FrontendEndpointPropertiesResponseInput is an input type that accepts FrontendEndpointPropertiesResponseArgs and FrontendEndpointPropertiesResponseOutput values.
// You can construct a concrete instance of `FrontendEndpointPropertiesResponseInput` via:
//
//          FrontendEndpointPropertiesResponseArgs{...}
type FrontendEndpointPropertiesResponseInput interface {
	pulumi.Input

	ToFrontendEndpointPropertiesResponseOutput() FrontendEndpointPropertiesResponseOutput
	ToFrontendEndpointPropertiesResponseOutputWithContext(context.Context) FrontendEndpointPropertiesResponseOutput
}

// The JSON object that contains the properties required to create a frontend endpoint.
type FrontendEndpointPropertiesResponseArgs struct {
	// The configuration specifying how to enable HTTPS
	CustomHttpsConfiguration CustomHttpsConfigurationResponseInput `pulumi:"customHttpsConfiguration"`
	// Provisioning status of Custom Https of the frontendEndpoint.
	CustomHttpsProvisioningState pulumi.StringInput `pulumi:"customHttpsProvisioningState"`
	// Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.
	CustomHttpsProvisioningSubstate pulumi.StringInput `pulumi:"customHttpsProvisioningSubstate"`
	// The host name of the frontendEndpoint. Must be a domain name.
	HostName pulumi.StringPtrInput `pulumi:"hostName"`
	// Resource status.
	ResourceState pulumi.StringPtrInput `pulumi:"resourceState"`
	// Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
	SessionAffinityEnabledState pulumi.StringPtrInput `pulumi:"sessionAffinityEnabledState"`
	// UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.
	SessionAffinityTtlSeconds pulumi.IntPtrInput `pulumi:"sessionAffinityTtlSeconds"`
	// Defines the Web Application Firewall policy for each host (if applicable)
	WebApplicationFirewallPolicyLink FrontendEndpointUpdateParametersResponsePropertiesPtrInput `pulumi:"webApplicationFirewallPolicyLink"`
}

func (FrontendEndpointPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendEndpointPropertiesResponse)(nil)).Elem()
}

func (i FrontendEndpointPropertiesResponseArgs) ToFrontendEndpointPropertiesResponseOutput() FrontendEndpointPropertiesResponseOutput {
	return i.ToFrontendEndpointPropertiesResponseOutputWithContext(context.Background())
}

func (i FrontendEndpointPropertiesResponseArgs) ToFrontendEndpointPropertiesResponseOutputWithContext(ctx context.Context) FrontendEndpointPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendEndpointPropertiesResponseOutput)
}

func (i FrontendEndpointPropertiesResponseArgs) ToFrontendEndpointPropertiesResponsePtrOutput() FrontendEndpointPropertiesResponsePtrOutput {
	return i.ToFrontendEndpointPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i FrontendEndpointPropertiesResponseArgs) ToFrontendEndpointPropertiesResponsePtrOutputWithContext(ctx context.Context) FrontendEndpointPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendEndpointPropertiesResponseOutput).ToFrontendEndpointPropertiesResponsePtrOutputWithContext(ctx)
}

// FrontendEndpointPropertiesResponsePtrInput is an input type that accepts FrontendEndpointPropertiesResponseArgs, FrontendEndpointPropertiesResponsePtr and FrontendEndpointPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `FrontendEndpointPropertiesResponsePtrInput` via:
//
//          FrontendEndpointPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type FrontendEndpointPropertiesResponsePtrInput interface {
	pulumi.Input

	ToFrontendEndpointPropertiesResponsePtrOutput() FrontendEndpointPropertiesResponsePtrOutput
	ToFrontendEndpointPropertiesResponsePtrOutputWithContext(context.Context) FrontendEndpointPropertiesResponsePtrOutput
}

type frontendEndpointPropertiesResponsePtrType FrontendEndpointPropertiesResponseArgs

func FrontendEndpointPropertiesResponsePtr(v *FrontendEndpointPropertiesResponseArgs) FrontendEndpointPropertiesResponsePtrInput {
	return (*frontendEndpointPropertiesResponsePtrType)(v)
}

func (*frontendEndpointPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontendEndpointPropertiesResponse)(nil)).Elem()
}

func (i *frontendEndpointPropertiesResponsePtrType) ToFrontendEndpointPropertiesResponsePtrOutput() FrontendEndpointPropertiesResponsePtrOutput {
	return i.ToFrontendEndpointPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *frontendEndpointPropertiesResponsePtrType) ToFrontendEndpointPropertiesResponsePtrOutputWithContext(ctx context.Context) FrontendEndpointPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendEndpointPropertiesResponsePtrOutput)
}

// The JSON object that contains the properties required to create a frontend endpoint.
type FrontendEndpointPropertiesResponseOutput struct{ *pulumi.OutputState }

func (FrontendEndpointPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendEndpointPropertiesResponse)(nil)).Elem()
}

func (o FrontendEndpointPropertiesResponseOutput) ToFrontendEndpointPropertiesResponseOutput() FrontendEndpointPropertiesResponseOutput {
	return o
}

func (o FrontendEndpointPropertiesResponseOutput) ToFrontendEndpointPropertiesResponseOutputWithContext(ctx context.Context) FrontendEndpointPropertiesResponseOutput {
	return o
}

func (o FrontendEndpointPropertiesResponseOutput) ToFrontendEndpointPropertiesResponsePtrOutput() FrontendEndpointPropertiesResponsePtrOutput {
	return o.ToFrontendEndpointPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o FrontendEndpointPropertiesResponseOutput) ToFrontendEndpointPropertiesResponsePtrOutputWithContext(ctx context.Context) FrontendEndpointPropertiesResponsePtrOutput {
	return o.ApplyT(func(v FrontendEndpointPropertiesResponse) *FrontendEndpointPropertiesResponse {
		return &v
	}).(FrontendEndpointPropertiesResponsePtrOutput)
}

// The configuration specifying how to enable HTTPS
func (o FrontendEndpointPropertiesResponseOutput) CustomHttpsConfiguration() CustomHttpsConfigurationResponseOutput {
	return o.ApplyT(func(v FrontendEndpointPropertiesResponse) CustomHttpsConfigurationResponse {
		return v.CustomHttpsConfiguration
	}).(CustomHttpsConfigurationResponseOutput)
}

// Provisioning status of Custom Https of the frontendEndpoint.
func (o FrontendEndpointPropertiesResponseOutput) CustomHttpsProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v FrontendEndpointPropertiesResponse) string { return v.CustomHttpsProvisioningState }).(pulumi.StringOutput)
}

// Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.
func (o FrontendEndpointPropertiesResponseOutput) CustomHttpsProvisioningSubstate() pulumi.StringOutput {
	return o.ApplyT(func(v FrontendEndpointPropertiesResponse) string { return v.CustomHttpsProvisioningSubstate }).(pulumi.StringOutput)
}

// The host name of the frontendEndpoint. Must be a domain name.
func (o FrontendEndpointPropertiesResponseOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendEndpointPropertiesResponse) *string { return v.HostName }).(pulumi.StringPtrOutput)
}

// Resource status.
func (o FrontendEndpointPropertiesResponseOutput) ResourceState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendEndpointPropertiesResponse) *string { return v.ResourceState }).(pulumi.StringPtrOutput)
}

// Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
func (o FrontendEndpointPropertiesResponseOutput) SessionAffinityEnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendEndpointPropertiesResponse) *string { return v.SessionAffinityEnabledState }).(pulumi.StringPtrOutput)
}

// UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.
func (o FrontendEndpointPropertiesResponseOutput) SessionAffinityTtlSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FrontendEndpointPropertiesResponse) *int { return v.SessionAffinityTtlSeconds }).(pulumi.IntPtrOutput)
}

// Defines the Web Application Firewall policy for each host (if applicable)
func (o FrontendEndpointPropertiesResponseOutput) WebApplicationFirewallPolicyLink() FrontendEndpointUpdateParametersResponsePropertiesPtrOutput {
	return o.ApplyT(func(v FrontendEndpointPropertiesResponse) *FrontendEndpointUpdateParametersResponseProperties {
		return v.WebApplicationFirewallPolicyLink
	}).(FrontendEndpointUpdateParametersResponsePropertiesPtrOutput)
}

type FrontendEndpointPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (FrontendEndpointPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontendEndpointPropertiesResponse)(nil)).Elem()
}

func (o FrontendEndpointPropertiesResponsePtrOutput) ToFrontendEndpointPropertiesResponsePtrOutput() FrontendEndpointPropertiesResponsePtrOutput {
	return o
}

func (o FrontendEndpointPropertiesResponsePtrOutput) ToFrontendEndpointPropertiesResponsePtrOutputWithContext(ctx context.Context) FrontendEndpointPropertiesResponsePtrOutput {
	return o
}

func (o FrontendEndpointPropertiesResponsePtrOutput) Elem() FrontendEndpointPropertiesResponseOutput {
	return o.ApplyT(func(v *FrontendEndpointPropertiesResponse) FrontendEndpointPropertiesResponse { return *v }).(FrontendEndpointPropertiesResponseOutput)
}

// The configuration specifying how to enable HTTPS
func (o FrontendEndpointPropertiesResponsePtrOutput) CustomHttpsConfiguration() CustomHttpsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *FrontendEndpointPropertiesResponse) *CustomHttpsConfigurationResponse {
		if v == nil {
			return nil
		}
		return &v.CustomHttpsConfiguration
	}).(CustomHttpsConfigurationResponsePtrOutput)
}

// Provisioning status of Custom Https of the frontendEndpoint.
func (o FrontendEndpointPropertiesResponsePtrOutput) CustomHttpsProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontendEndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CustomHttpsProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.
func (o FrontendEndpointPropertiesResponsePtrOutput) CustomHttpsProvisioningSubstate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontendEndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CustomHttpsProvisioningSubstate
	}).(pulumi.StringPtrOutput)
}

// The host name of the frontendEndpoint. Must be a domain name.
func (o FrontendEndpointPropertiesResponsePtrOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontendEndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.HostName
	}).(pulumi.StringPtrOutput)
}

// Resource status.
func (o FrontendEndpointPropertiesResponsePtrOutput) ResourceState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontendEndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceState
	}).(pulumi.StringPtrOutput)
}

// Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
func (o FrontendEndpointPropertiesResponsePtrOutput) SessionAffinityEnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontendEndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SessionAffinityEnabledState
	}).(pulumi.StringPtrOutput)
}

// UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.
func (o FrontendEndpointPropertiesResponsePtrOutput) SessionAffinityTtlSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FrontendEndpointPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.SessionAffinityTtlSeconds
	}).(pulumi.IntPtrOutput)
}

// Defines the Web Application Firewall policy for each host (if applicable)
func (o FrontendEndpointPropertiesResponsePtrOutput) WebApplicationFirewallPolicyLink() FrontendEndpointUpdateParametersResponsePropertiesPtrOutput {
	return o.ApplyT(func(v *FrontendEndpointPropertiesResponse) *FrontendEndpointUpdateParametersResponseProperties {
		if v == nil {
			return nil
		}
		return v.WebApplicationFirewallPolicyLink
	}).(FrontendEndpointUpdateParametersResponsePropertiesPtrOutput)
}

// A frontend endpoint used for routing.
type FrontendEndpointResponse struct {
	// Resource ID.
	Id *string `pulumi:"id"`
	// Resource name.
	Name *string `pulumi:"name"`
	// Properties of the Frontend endpoint
	Properties *FrontendEndpointPropertiesResponse `pulumi:"properties"`
	// Resource type.
	Type string `pulumi:"type"`
}

// FrontendEndpointResponseInput is an input type that accepts FrontendEndpointResponseArgs and FrontendEndpointResponseOutput values.
// You can construct a concrete instance of `FrontendEndpointResponseInput` via:
//
//          FrontendEndpointResponseArgs{...}
type FrontendEndpointResponseInput interface {
	pulumi.Input

	ToFrontendEndpointResponseOutput() FrontendEndpointResponseOutput
	ToFrontendEndpointResponseOutputWithContext(context.Context) FrontendEndpointResponseOutput
}

// A frontend endpoint used for routing.
type FrontendEndpointResponseArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Properties of the Frontend endpoint
	Properties FrontendEndpointPropertiesResponsePtrInput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FrontendEndpointResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendEndpointResponse)(nil)).Elem()
}

func (i FrontendEndpointResponseArgs) ToFrontendEndpointResponseOutput() FrontendEndpointResponseOutput {
	return i.ToFrontendEndpointResponseOutputWithContext(context.Background())
}

func (i FrontendEndpointResponseArgs) ToFrontendEndpointResponseOutputWithContext(ctx context.Context) FrontendEndpointResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendEndpointResponseOutput)
}

// FrontendEndpointResponseArrayInput is an input type that accepts FrontendEndpointResponseArray and FrontendEndpointResponseArrayOutput values.
// You can construct a concrete instance of `FrontendEndpointResponseArrayInput` via:
//
//          FrontendEndpointResponseArray{ FrontendEndpointResponseArgs{...} }
type FrontendEndpointResponseArrayInput interface {
	pulumi.Input

	ToFrontendEndpointResponseArrayOutput() FrontendEndpointResponseArrayOutput
	ToFrontendEndpointResponseArrayOutputWithContext(context.Context) FrontendEndpointResponseArrayOutput
}

type FrontendEndpointResponseArray []FrontendEndpointResponseInput

func (FrontendEndpointResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontendEndpointResponse)(nil)).Elem()
}

func (i FrontendEndpointResponseArray) ToFrontendEndpointResponseArrayOutput() FrontendEndpointResponseArrayOutput {
	return i.ToFrontendEndpointResponseArrayOutputWithContext(context.Background())
}

func (i FrontendEndpointResponseArray) ToFrontendEndpointResponseArrayOutputWithContext(ctx context.Context) FrontendEndpointResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendEndpointResponseArrayOutput)
}

// A frontend endpoint used for routing.
type FrontendEndpointResponseOutput struct{ *pulumi.OutputState }

func (FrontendEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendEndpointResponse)(nil)).Elem()
}

func (o FrontendEndpointResponseOutput) ToFrontendEndpointResponseOutput() FrontendEndpointResponseOutput {
	return o
}

func (o FrontendEndpointResponseOutput) ToFrontendEndpointResponseOutputWithContext(ctx context.Context) FrontendEndpointResponseOutput {
	return o
}

// Resource ID.
func (o FrontendEndpointResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendEndpointResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o FrontendEndpointResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendEndpointResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Properties of the Frontend endpoint
func (o FrontendEndpointResponseOutput) Properties() FrontendEndpointPropertiesResponsePtrOutput {
	return o.ApplyT(func(v FrontendEndpointResponse) *FrontendEndpointPropertiesResponse { return v.Properties }).(FrontendEndpointPropertiesResponsePtrOutput)
}

// Resource type.
func (o FrontendEndpointResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FrontendEndpointResponse) string { return v.Type }).(pulumi.StringOutput)
}

type FrontendEndpointResponseArrayOutput struct{ *pulumi.OutputState }

func (FrontendEndpointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontendEndpointResponse)(nil)).Elem()
}

func (o FrontendEndpointResponseArrayOutput) ToFrontendEndpointResponseArrayOutput() FrontendEndpointResponseArrayOutput {
	return o
}

func (o FrontendEndpointResponseArrayOutput) ToFrontendEndpointResponseArrayOutputWithContext(ctx context.Context) FrontendEndpointResponseArrayOutput {
	return o
}

func (o FrontendEndpointResponseArrayOutput) Index(i pulumi.IntInput) FrontendEndpointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FrontendEndpointResponse {
		return vs[0].([]FrontendEndpointResponse)[vs[1].(int)]
	}).(FrontendEndpointResponseOutput)
}

// Defines the Web Application Firewall policy for each host (if applicable)
type FrontendEndpointUpdateParametersProperties struct {
	// Resource ID.
	Id *string `pulumi:"id"`
}

// FrontendEndpointUpdateParametersPropertiesInput is an input type that accepts FrontendEndpointUpdateParametersPropertiesArgs and FrontendEndpointUpdateParametersPropertiesOutput values.
// You can construct a concrete instance of `FrontendEndpointUpdateParametersPropertiesInput` via:
//
//          FrontendEndpointUpdateParametersPropertiesArgs{...}
type FrontendEndpointUpdateParametersPropertiesInput interface {
	pulumi.Input

	ToFrontendEndpointUpdateParametersPropertiesOutput() FrontendEndpointUpdateParametersPropertiesOutput
	ToFrontendEndpointUpdateParametersPropertiesOutputWithContext(context.Context) FrontendEndpointUpdateParametersPropertiesOutput
}

// Defines the Web Application Firewall policy for each host (if applicable)
type FrontendEndpointUpdateParametersPropertiesArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (FrontendEndpointUpdateParametersPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendEndpointUpdateParametersProperties)(nil)).Elem()
}

func (i FrontendEndpointUpdateParametersPropertiesArgs) ToFrontendEndpointUpdateParametersPropertiesOutput() FrontendEndpointUpdateParametersPropertiesOutput {
	return i.ToFrontendEndpointUpdateParametersPropertiesOutputWithContext(context.Background())
}

func (i FrontendEndpointUpdateParametersPropertiesArgs) ToFrontendEndpointUpdateParametersPropertiesOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendEndpointUpdateParametersPropertiesOutput)
}

func (i FrontendEndpointUpdateParametersPropertiesArgs) ToFrontendEndpointUpdateParametersPropertiesPtrOutput() FrontendEndpointUpdateParametersPropertiesPtrOutput {
	return i.ToFrontendEndpointUpdateParametersPropertiesPtrOutputWithContext(context.Background())
}

func (i FrontendEndpointUpdateParametersPropertiesArgs) ToFrontendEndpointUpdateParametersPropertiesPtrOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendEndpointUpdateParametersPropertiesOutput).ToFrontendEndpointUpdateParametersPropertiesPtrOutputWithContext(ctx)
}

// FrontendEndpointUpdateParametersPropertiesPtrInput is an input type that accepts FrontendEndpointUpdateParametersPropertiesArgs, FrontendEndpointUpdateParametersPropertiesPtr and FrontendEndpointUpdateParametersPropertiesPtrOutput values.
// You can construct a concrete instance of `FrontendEndpointUpdateParametersPropertiesPtrInput` via:
//
//          FrontendEndpointUpdateParametersPropertiesArgs{...}
//
//  or:
//
//          nil
type FrontendEndpointUpdateParametersPropertiesPtrInput interface {
	pulumi.Input

	ToFrontendEndpointUpdateParametersPropertiesPtrOutput() FrontendEndpointUpdateParametersPropertiesPtrOutput
	ToFrontendEndpointUpdateParametersPropertiesPtrOutputWithContext(context.Context) FrontendEndpointUpdateParametersPropertiesPtrOutput
}

type frontendEndpointUpdateParametersPropertiesPtrType FrontendEndpointUpdateParametersPropertiesArgs

func FrontendEndpointUpdateParametersPropertiesPtr(v *FrontendEndpointUpdateParametersPropertiesArgs) FrontendEndpointUpdateParametersPropertiesPtrInput {
	return (*frontendEndpointUpdateParametersPropertiesPtrType)(v)
}

func (*frontendEndpointUpdateParametersPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontendEndpointUpdateParametersProperties)(nil)).Elem()
}

func (i *frontendEndpointUpdateParametersPropertiesPtrType) ToFrontendEndpointUpdateParametersPropertiesPtrOutput() FrontendEndpointUpdateParametersPropertiesPtrOutput {
	return i.ToFrontendEndpointUpdateParametersPropertiesPtrOutputWithContext(context.Background())
}

func (i *frontendEndpointUpdateParametersPropertiesPtrType) ToFrontendEndpointUpdateParametersPropertiesPtrOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendEndpointUpdateParametersPropertiesPtrOutput)
}

// Defines the Web Application Firewall policy for each host (if applicable)
type FrontendEndpointUpdateParametersPropertiesOutput struct{ *pulumi.OutputState }

func (FrontendEndpointUpdateParametersPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendEndpointUpdateParametersProperties)(nil)).Elem()
}

func (o FrontendEndpointUpdateParametersPropertiesOutput) ToFrontendEndpointUpdateParametersPropertiesOutput() FrontendEndpointUpdateParametersPropertiesOutput {
	return o
}

func (o FrontendEndpointUpdateParametersPropertiesOutput) ToFrontendEndpointUpdateParametersPropertiesOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersPropertiesOutput {
	return o
}

func (o FrontendEndpointUpdateParametersPropertiesOutput) ToFrontendEndpointUpdateParametersPropertiesPtrOutput() FrontendEndpointUpdateParametersPropertiesPtrOutput {
	return o.ToFrontendEndpointUpdateParametersPropertiesPtrOutputWithContext(context.Background())
}

func (o FrontendEndpointUpdateParametersPropertiesOutput) ToFrontendEndpointUpdateParametersPropertiesPtrOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersPropertiesPtrOutput {
	return o.ApplyT(func(v FrontendEndpointUpdateParametersProperties) *FrontendEndpointUpdateParametersProperties {
		return &v
	}).(FrontendEndpointUpdateParametersPropertiesPtrOutput)
}

// Resource ID.
func (o FrontendEndpointUpdateParametersPropertiesOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendEndpointUpdateParametersProperties) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type FrontendEndpointUpdateParametersPropertiesPtrOutput struct{ *pulumi.OutputState }

func (FrontendEndpointUpdateParametersPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontendEndpointUpdateParametersProperties)(nil)).Elem()
}

func (o FrontendEndpointUpdateParametersPropertiesPtrOutput) ToFrontendEndpointUpdateParametersPropertiesPtrOutput() FrontendEndpointUpdateParametersPropertiesPtrOutput {
	return o
}

func (o FrontendEndpointUpdateParametersPropertiesPtrOutput) ToFrontendEndpointUpdateParametersPropertiesPtrOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersPropertiesPtrOutput {
	return o
}

func (o FrontendEndpointUpdateParametersPropertiesPtrOutput) Elem() FrontendEndpointUpdateParametersPropertiesOutput {
	return o.ApplyT(func(v *FrontendEndpointUpdateParametersProperties) FrontendEndpointUpdateParametersProperties {
		return *v
	}).(FrontendEndpointUpdateParametersPropertiesOutput)
}

// Resource ID.
func (o FrontendEndpointUpdateParametersPropertiesPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontendEndpointUpdateParametersProperties) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Defines the Web Application Firewall policy for each host (if applicable)
type FrontendEndpointUpdateParametersResponseProperties struct {
	// Resource ID.
	Id *string `pulumi:"id"`
}

// FrontendEndpointUpdateParametersResponsePropertiesInput is an input type that accepts FrontendEndpointUpdateParametersResponsePropertiesArgs and FrontendEndpointUpdateParametersResponsePropertiesOutput values.
// You can construct a concrete instance of `FrontendEndpointUpdateParametersResponsePropertiesInput` via:
//
//          FrontendEndpointUpdateParametersResponsePropertiesArgs{...}
type FrontendEndpointUpdateParametersResponsePropertiesInput interface {
	pulumi.Input

	ToFrontendEndpointUpdateParametersResponsePropertiesOutput() FrontendEndpointUpdateParametersResponsePropertiesOutput
	ToFrontendEndpointUpdateParametersResponsePropertiesOutputWithContext(context.Context) FrontendEndpointUpdateParametersResponsePropertiesOutput
}

// Defines the Web Application Firewall policy for each host (if applicable)
type FrontendEndpointUpdateParametersResponsePropertiesArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (FrontendEndpointUpdateParametersResponsePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendEndpointUpdateParametersResponseProperties)(nil)).Elem()
}

func (i FrontendEndpointUpdateParametersResponsePropertiesArgs) ToFrontendEndpointUpdateParametersResponsePropertiesOutput() FrontendEndpointUpdateParametersResponsePropertiesOutput {
	return i.ToFrontendEndpointUpdateParametersResponsePropertiesOutputWithContext(context.Background())
}

func (i FrontendEndpointUpdateParametersResponsePropertiesArgs) ToFrontendEndpointUpdateParametersResponsePropertiesOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersResponsePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendEndpointUpdateParametersResponsePropertiesOutput)
}

func (i FrontendEndpointUpdateParametersResponsePropertiesArgs) ToFrontendEndpointUpdateParametersResponsePropertiesPtrOutput() FrontendEndpointUpdateParametersResponsePropertiesPtrOutput {
	return i.ToFrontendEndpointUpdateParametersResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i FrontendEndpointUpdateParametersResponsePropertiesArgs) ToFrontendEndpointUpdateParametersResponsePropertiesPtrOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendEndpointUpdateParametersResponsePropertiesOutput).ToFrontendEndpointUpdateParametersResponsePropertiesPtrOutputWithContext(ctx)
}

// FrontendEndpointUpdateParametersResponsePropertiesPtrInput is an input type that accepts FrontendEndpointUpdateParametersResponsePropertiesArgs, FrontendEndpointUpdateParametersResponsePropertiesPtr and FrontendEndpointUpdateParametersResponsePropertiesPtrOutput values.
// You can construct a concrete instance of `FrontendEndpointUpdateParametersResponsePropertiesPtrInput` via:
//
//          FrontendEndpointUpdateParametersResponsePropertiesArgs{...}
//
//  or:
//
//          nil
type FrontendEndpointUpdateParametersResponsePropertiesPtrInput interface {
	pulumi.Input

	ToFrontendEndpointUpdateParametersResponsePropertiesPtrOutput() FrontendEndpointUpdateParametersResponsePropertiesPtrOutput
	ToFrontendEndpointUpdateParametersResponsePropertiesPtrOutputWithContext(context.Context) FrontendEndpointUpdateParametersResponsePropertiesPtrOutput
}

type frontendEndpointUpdateParametersResponsePropertiesPtrType FrontendEndpointUpdateParametersResponsePropertiesArgs

func FrontendEndpointUpdateParametersResponsePropertiesPtr(v *FrontendEndpointUpdateParametersResponsePropertiesArgs) FrontendEndpointUpdateParametersResponsePropertiesPtrInput {
	return (*frontendEndpointUpdateParametersResponsePropertiesPtrType)(v)
}

func (*frontendEndpointUpdateParametersResponsePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontendEndpointUpdateParametersResponseProperties)(nil)).Elem()
}

func (i *frontendEndpointUpdateParametersResponsePropertiesPtrType) ToFrontendEndpointUpdateParametersResponsePropertiesPtrOutput() FrontendEndpointUpdateParametersResponsePropertiesPtrOutput {
	return i.ToFrontendEndpointUpdateParametersResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i *frontendEndpointUpdateParametersResponsePropertiesPtrType) ToFrontendEndpointUpdateParametersResponsePropertiesPtrOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontendEndpointUpdateParametersResponsePropertiesPtrOutput)
}

// Defines the Web Application Firewall policy for each host (if applicable)
type FrontendEndpointUpdateParametersResponsePropertiesOutput struct{ *pulumi.OutputState }

func (FrontendEndpointUpdateParametersResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontendEndpointUpdateParametersResponseProperties)(nil)).Elem()
}

func (o FrontendEndpointUpdateParametersResponsePropertiesOutput) ToFrontendEndpointUpdateParametersResponsePropertiesOutput() FrontendEndpointUpdateParametersResponsePropertiesOutput {
	return o
}

func (o FrontendEndpointUpdateParametersResponsePropertiesOutput) ToFrontendEndpointUpdateParametersResponsePropertiesOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersResponsePropertiesOutput {
	return o
}

func (o FrontendEndpointUpdateParametersResponsePropertiesOutput) ToFrontendEndpointUpdateParametersResponsePropertiesPtrOutput() FrontendEndpointUpdateParametersResponsePropertiesPtrOutput {
	return o.ToFrontendEndpointUpdateParametersResponsePropertiesPtrOutputWithContext(context.Background())
}

func (o FrontendEndpointUpdateParametersResponsePropertiesOutput) ToFrontendEndpointUpdateParametersResponsePropertiesPtrOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersResponsePropertiesPtrOutput {
	return o.ApplyT(func(v FrontendEndpointUpdateParametersResponseProperties) *FrontendEndpointUpdateParametersResponseProperties {
		return &v
	}).(FrontendEndpointUpdateParametersResponsePropertiesPtrOutput)
}

// Resource ID.
func (o FrontendEndpointUpdateParametersResponsePropertiesOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontendEndpointUpdateParametersResponseProperties) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type FrontendEndpointUpdateParametersResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (FrontendEndpointUpdateParametersResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontendEndpointUpdateParametersResponseProperties)(nil)).Elem()
}

func (o FrontendEndpointUpdateParametersResponsePropertiesPtrOutput) ToFrontendEndpointUpdateParametersResponsePropertiesPtrOutput() FrontendEndpointUpdateParametersResponsePropertiesPtrOutput {
	return o
}

func (o FrontendEndpointUpdateParametersResponsePropertiesPtrOutput) ToFrontendEndpointUpdateParametersResponsePropertiesPtrOutputWithContext(ctx context.Context) FrontendEndpointUpdateParametersResponsePropertiesPtrOutput {
	return o
}

func (o FrontendEndpointUpdateParametersResponsePropertiesPtrOutput) Elem() FrontendEndpointUpdateParametersResponsePropertiesOutput {
	return o.ApplyT(func(v *FrontendEndpointUpdateParametersResponseProperties) FrontendEndpointUpdateParametersResponseProperties {
		return *v
	}).(FrontendEndpointUpdateParametersResponsePropertiesOutput)
}

// Resource ID.
func (o FrontendEndpointUpdateParametersResponsePropertiesPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontendEndpointUpdateParametersResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Load balancing settings for a backend pool
type HealthProbeSettingsModel struct {
	// Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool.
	EnabledState *string `pulumi:"enabledState"`
	// Configures which HTTP method to use to probe the backends defined under backendPools.
	HealthProbeMethod *string `pulumi:"healthProbeMethod"`
	// Resource ID.
	Id *string `pulumi:"id"`
	// The number of seconds between health probes.
	IntervalInSeconds *int `pulumi:"intervalInSeconds"`
	// Resource name.
	Name *string `pulumi:"name"`
	// The path to use for the health probe. Default is /
	Path *string `pulumi:"path"`
	// Protocol scheme to use for this probe
	Protocol *string `pulumi:"protocol"`
	// Resource status.
	ResourceState *string `pulumi:"resourceState"`
}

// HealthProbeSettingsModelInput is an input type that accepts HealthProbeSettingsModelArgs and HealthProbeSettingsModelOutput values.
// You can construct a concrete instance of `HealthProbeSettingsModelInput` via:
//
//          HealthProbeSettingsModelArgs{...}
type HealthProbeSettingsModelInput interface {
	pulumi.Input

	ToHealthProbeSettingsModelOutput() HealthProbeSettingsModelOutput
	ToHealthProbeSettingsModelOutputWithContext(context.Context) HealthProbeSettingsModelOutput
}

// Load balancing settings for a backend pool
type HealthProbeSettingsModelArgs struct {
	// Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool.
	EnabledState pulumi.StringPtrInput `pulumi:"enabledState"`
	// Configures which HTTP method to use to probe the backends defined under backendPools.
	HealthProbeMethod pulumi.StringPtrInput `pulumi:"healthProbeMethod"`
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The number of seconds between health probes.
	IntervalInSeconds pulumi.IntPtrInput `pulumi:"intervalInSeconds"`
	// Resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The path to use for the health probe. Default is /
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Protocol scheme to use for this probe
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Resource status.
	ResourceState pulumi.StringPtrInput `pulumi:"resourceState"`
}

func (HealthProbeSettingsModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthProbeSettingsModel)(nil)).Elem()
}

func (i HealthProbeSettingsModelArgs) ToHealthProbeSettingsModelOutput() HealthProbeSettingsModelOutput {
	return i.ToHealthProbeSettingsModelOutputWithContext(context.Background())
}

func (i HealthProbeSettingsModelArgs) ToHealthProbeSettingsModelOutputWithContext(ctx context.Context) HealthProbeSettingsModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthProbeSettingsModelOutput)
}

// HealthProbeSettingsModelArrayInput is an input type that accepts HealthProbeSettingsModelArray and HealthProbeSettingsModelArrayOutput values.
// You can construct a concrete instance of `HealthProbeSettingsModelArrayInput` via:
//
//          HealthProbeSettingsModelArray{ HealthProbeSettingsModelArgs{...} }
type HealthProbeSettingsModelArrayInput interface {
	pulumi.Input

	ToHealthProbeSettingsModelArrayOutput() HealthProbeSettingsModelArrayOutput
	ToHealthProbeSettingsModelArrayOutputWithContext(context.Context) HealthProbeSettingsModelArrayOutput
}

type HealthProbeSettingsModelArray []HealthProbeSettingsModelInput

func (HealthProbeSettingsModelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthProbeSettingsModel)(nil)).Elem()
}

func (i HealthProbeSettingsModelArray) ToHealthProbeSettingsModelArrayOutput() HealthProbeSettingsModelArrayOutput {
	return i.ToHealthProbeSettingsModelArrayOutputWithContext(context.Background())
}

func (i HealthProbeSettingsModelArray) ToHealthProbeSettingsModelArrayOutputWithContext(ctx context.Context) HealthProbeSettingsModelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthProbeSettingsModelArrayOutput)
}

// Load balancing settings for a backend pool
type HealthProbeSettingsModelOutput struct{ *pulumi.OutputState }

func (HealthProbeSettingsModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthProbeSettingsModel)(nil)).Elem()
}

func (o HealthProbeSettingsModelOutput) ToHealthProbeSettingsModelOutput() HealthProbeSettingsModelOutput {
	return o
}

func (o HealthProbeSettingsModelOutput) ToHealthProbeSettingsModelOutputWithContext(ctx context.Context) HealthProbeSettingsModelOutput {
	return o
}

// Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool.
func (o HealthProbeSettingsModelOutput) EnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModel) *string { return v.EnabledState }).(pulumi.StringPtrOutput)
}

// Configures which HTTP method to use to probe the backends defined under backendPools.
func (o HealthProbeSettingsModelOutput) HealthProbeMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModel) *string { return v.HealthProbeMethod }).(pulumi.StringPtrOutput)
}

// Resource ID.
func (o HealthProbeSettingsModelOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModel) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The number of seconds between health probes.
func (o HealthProbeSettingsModelOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModel) *int { return v.IntervalInSeconds }).(pulumi.IntPtrOutput)
}

// Resource name.
func (o HealthProbeSettingsModelOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModel) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The path to use for the health probe. Default is /
func (o HealthProbeSettingsModelOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModel) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Protocol scheme to use for this probe
func (o HealthProbeSettingsModelOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModel) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Resource status.
func (o HealthProbeSettingsModelOutput) ResourceState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModel) *string { return v.ResourceState }).(pulumi.StringPtrOutput)
}

type HealthProbeSettingsModelArrayOutput struct{ *pulumi.OutputState }

func (HealthProbeSettingsModelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthProbeSettingsModel)(nil)).Elem()
}

func (o HealthProbeSettingsModelArrayOutput) ToHealthProbeSettingsModelArrayOutput() HealthProbeSettingsModelArrayOutput {
	return o
}

func (o HealthProbeSettingsModelArrayOutput) ToHealthProbeSettingsModelArrayOutputWithContext(ctx context.Context) HealthProbeSettingsModelArrayOutput {
	return o
}

func (o HealthProbeSettingsModelArrayOutput) Index(i pulumi.IntInput) HealthProbeSettingsModelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HealthProbeSettingsModel {
		return vs[0].([]HealthProbeSettingsModel)[vs[1].(int)]
	}).(HealthProbeSettingsModelOutput)
}

// Load balancing settings for a backend pool
type HealthProbeSettingsModelResponse struct {
	// Resource ID.
	Id *string `pulumi:"id"`
	// Resource name.
	Name *string `pulumi:"name"`
	// Properties of the health probe settings
	Properties *HealthProbeSettingsPropertiesResponse `pulumi:"properties"`
	// Resource type.
	Type string `pulumi:"type"`
}

// HealthProbeSettingsModelResponseInput is an input type that accepts HealthProbeSettingsModelResponseArgs and HealthProbeSettingsModelResponseOutput values.
// You can construct a concrete instance of `HealthProbeSettingsModelResponseInput` via:
//
//          HealthProbeSettingsModelResponseArgs{...}
type HealthProbeSettingsModelResponseInput interface {
	pulumi.Input

	ToHealthProbeSettingsModelResponseOutput() HealthProbeSettingsModelResponseOutput
	ToHealthProbeSettingsModelResponseOutputWithContext(context.Context) HealthProbeSettingsModelResponseOutput
}

// Load balancing settings for a backend pool
type HealthProbeSettingsModelResponseArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Properties of the health probe settings
	Properties HealthProbeSettingsPropertiesResponsePtrInput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HealthProbeSettingsModelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthProbeSettingsModelResponse)(nil)).Elem()
}

func (i HealthProbeSettingsModelResponseArgs) ToHealthProbeSettingsModelResponseOutput() HealthProbeSettingsModelResponseOutput {
	return i.ToHealthProbeSettingsModelResponseOutputWithContext(context.Background())
}

func (i HealthProbeSettingsModelResponseArgs) ToHealthProbeSettingsModelResponseOutputWithContext(ctx context.Context) HealthProbeSettingsModelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthProbeSettingsModelResponseOutput)
}

// HealthProbeSettingsModelResponseArrayInput is an input type that accepts HealthProbeSettingsModelResponseArray and HealthProbeSettingsModelResponseArrayOutput values.
// You can construct a concrete instance of `HealthProbeSettingsModelResponseArrayInput` via:
//
//          HealthProbeSettingsModelResponseArray{ HealthProbeSettingsModelResponseArgs{...} }
type HealthProbeSettingsModelResponseArrayInput interface {
	pulumi.Input

	ToHealthProbeSettingsModelResponseArrayOutput() HealthProbeSettingsModelResponseArrayOutput
	ToHealthProbeSettingsModelResponseArrayOutputWithContext(context.Context) HealthProbeSettingsModelResponseArrayOutput
}

type HealthProbeSettingsModelResponseArray []HealthProbeSettingsModelResponseInput

func (HealthProbeSettingsModelResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthProbeSettingsModelResponse)(nil)).Elem()
}

func (i HealthProbeSettingsModelResponseArray) ToHealthProbeSettingsModelResponseArrayOutput() HealthProbeSettingsModelResponseArrayOutput {
	return i.ToHealthProbeSettingsModelResponseArrayOutputWithContext(context.Background())
}

func (i HealthProbeSettingsModelResponseArray) ToHealthProbeSettingsModelResponseArrayOutputWithContext(ctx context.Context) HealthProbeSettingsModelResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthProbeSettingsModelResponseArrayOutput)
}

// Load balancing settings for a backend pool
type HealthProbeSettingsModelResponseOutput struct{ *pulumi.OutputState }

func (HealthProbeSettingsModelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthProbeSettingsModelResponse)(nil)).Elem()
}

func (o HealthProbeSettingsModelResponseOutput) ToHealthProbeSettingsModelResponseOutput() HealthProbeSettingsModelResponseOutput {
	return o
}

func (o HealthProbeSettingsModelResponseOutput) ToHealthProbeSettingsModelResponseOutputWithContext(ctx context.Context) HealthProbeSettingsModelResponseOutput {
	return o
}

// Resource ID.
func (o HealthProbeSettingsModelResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModelResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o HealthProbeSettingsModelResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModelResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Properties of the health probe settings
func (o HealthProbeSettingsModelResponseOutput) Properties() HealthProbeSettingsPropertiesResponsePtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsModelResponse) *HealthProbeSettingsPropertiesResponse { return v.Properties }).(HealthProbeSettingsPropertiesResponsePtrOutput)
}

// Resource type.
func (o HealthProbeSettingsModelResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HealthProbeSettingsModelResponse) string { return v.Type }).(pulumi.StringOutput)
}

type HealthProbeSettingsModelResponseArrayOutput struct{ *pulumi.OutputState }

func (HealthProbeSettingsModelResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthProbeSettingsModelResponse)(nil)).Elem()
}

func (o HealthProbeSettingsModelResponseArrayOutput) ToHealthProbeSettingsModelResponseArrayOutput() HealthProbeSettingsModelResponseArrayOutput {
	return o
}

func (o HealthProbeSettingsModelResponseArrayOutput) ToHealthProbeSettingsModelResponseArrayOutputWithContext(ctx context.Context) HealthProbeSettingsModelResponseArrayOutput {
	return o
}

func (o HealthProbeSettingsModelResponseArrayOutput) Index(i pulumi.IntInput) HealthProbeSettingsModelResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HealthProbeSettingsModelResponse {
		return vs[0].([]HealthProbeSettingsModelResponse)[vs[1].(int)]
	}).(HealthProbeSettingsModelResponseOutput)
}

// The JSON object that contains the properties required to create a health probe settings.
type HealthProbeSettingsPropertiesResponse struct {
	// Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool.
	EnabledState *string `pulumi:"enabledState"`
	// Configures which HTTP method to use to probe the backends defined under backendPools.
	HealthProbeMethod *string `pulumi:"healthProbeMethod"`
	// The number of seconds between health probes.
	IntervalInSeconds *int `pulumi:"intervalInSeconds"`
	// The path to use for the health probe. Default is /
	Path *string `pulumi:"path"`
	// Protocol scheme to use for this probe
	Protocol *string `pulumi:"protocol"`
	// Resource status.
	ResourceState *string `pulumi:"resourceState"`
}

// HealthProbeSettingsPropertiesResponseInput is an input type that accepts HealthProbeSettingsPropertiesResponseArgs and HealthProbeSettingsPropertiesResponseOutput values.
// You can construct a concrete instance of `HealthProbeSettingsPropertiesResponseInput` via:
//
//          HealthProbeSettingsPropertiesResponseArgs{...}
type HealthProbeSettingsPropertiesResponseInput interface {
	pulumi.Input

	ToHealthProbeSettingsPropertiesResponseOutput() HealthProbeSettingsPropertiesResponseOutput
	ToHealthProbeSettingsPropertiesResponseOutputWithContext(context.Context) HealthProbeSettingsPropertiesResponseOutput
}

// The JSON object that contains the properties required to create a health probe settings.
type HealthProbeSettingsPropertiesResponseArgs struct {
	// Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool.
	EnabledState pulumi.StringPtrInput `pulumi:"enabledState"`
	// Configures which HTTP method to use to probe the backends defined under backendPools.
	HealthProbeMethod pulumi.StringPtrInput `pulumi:"healthProbeMethod"`
	// The number of seconds between health probes.
	IntervalInSeconds pulumi.IntPtrInput `pulumi:"intervalInSeconds"`
	// The path to use for the health probe. Default is /
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Protocol scheme to use for this probe
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Resource status.
	ResourceState pulumi.StringPtrInput `pulumi:"resourceState"`
}

func (HealthProbeSettingsPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthProbeSettingsPropertiesResponse)(nil)).Elem()
}

func (i HealthProbeSettingsPropertiesResponseArgs) ToHealthProbeSettingsPropertiesResponseOutput() HealthProbeSettingsPropertiesResponseOutput {
	return i.ToHealthProbeSettingsPropertiesResponseOutputWithContext(context.Background())
}

func (i HealthProbeSettingsPropertiesResponseArgs) ToHealthProbeSettingsPropertiesResponseOutputWithContext(ctx context.Context) HealthProbeSettingsPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthProbeSettingsPropertiesResponseOutput)
}

func (i HealthProbeSettingsPropertiesResponseArgs) ToHealthProbeSettingsPropertiesResponsePtrOutput() HealthProbeSettingsPropertiesResponsePtrOutput {
	return i.ToHealthProbeSettingsPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i HealthProbeSettingsPropertiesResponseArgs) ToHealthProbeSettingsPropertiesResponsePtrOutputWithContext(ctx context.Context) HealthProbeSettingsPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthProbeSettingsPropertiesResponseOutput).ToHealthProbeSettingsPropertiesResponsePtrOutputWithContext(ctx)
}

// HealthProbeSettingsPropertiesResponsePtrInput is an input type that accepts HealthProbeSettingsPropertiesResponseArgs, HealthProbeSettingsPropertiesResponsePtr and HealthProbeSettingsPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `HealthProbeSettingsPropertiesResponsePtrInput` via:
//
//          HealthProbeSettingsPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type HealthProbeSettingsPropertiesResponsePtrInput interface {
	pulumi.Input

	ToHealthProbeSettingsPropertiesResponsePtrOutput() HealthProbeSettingsPropertiesResponsePtrOutput
	ToHealthProbeSettingsPropertiesResponsePtrOutputWithContext(context.Context) HealthProbeSettingsPropertiesResponsePtrOutput
}

type healthProbeSettingsPropertiesResponsePtrType HealthProbeSettingsPropertiesResponseArgs

func HealthProbeSettingsPropertiesResponsePtr(v *HealthProbeSettingsPropertiesResponseArgs) HealthProbeSettingsPropertiesResponsePtrInput {
	return (*healthProbeSettingsPropertiesResponsePtrType)(v)
}

func (*healthProbeSettingsPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthProbeSettingsPropertiesResponse)(nil)).Elem()
}

func (i *healthProbeSettingsPropertiesResponsePtrType) ToHealthProbeSettingsPropertiesResponsePtrOutput() HealthProbeSettingsPropertiesResponsePtrOutput {
	return i.ToHealthProbeSettingsPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *healthProbeSettingsPropertiesResponsePtrType) ToHealthProbeSettingsPropertiesResponsePtrOutputWithContext(ctx context.Context) HealthProbeSettingsPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthProbeSettingsPropertiesResponsePtrOutput)
}

// The JSON object that contains the properties required to create a health probe settings.
type HealthProbeSettingsPropertiesResponseOutput struct{ *pulumi.OutputState }

func (HealthProbeSettingsPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthProbeSettingsPropertiesResponse)(nil)).Elem()
}

func (o HealthProbeSettingsPropertiesResponseOutput) ToHealthProbeSettingsPropertiesResponseOutput() HealthProbeSettingsPropertiesResponseOutput {
	return o
}

func (o HealthProbeSettingsPropertiesResponseOutput) ToHealthProbeSettingsPropertiesResponseOutputWithContext(ctx context.Context) HealthProbeSettingsPropertiesResponseOutput {
	return o
}

func (o HealthProbeSettingsPropertiesResponseOutput) ToHealthProbeSettingsPropertiesResponsePtrOutput() HealthProbeSettingsPropertiesResponsePtrOutput {
	return o.ToHealthProbeSettingsPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o HealthProbeSettingsPropertiesResponseOutput) ToHealthProbeSettingsPropertiesResponsePtrOutputWithContext(ctx context.Context) HealthProbeSettingsPropertiesResponsePtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsPropertiesResponse) *HealthProbeSettingsPropertiesResponse {
		return &v
	}).(HealthProbeSettingsPropertiesResponsePtrOutput)
}

// Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool.
func (o HealthProbeSettingsPropertiesResponseOutput) EnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsPropertiesResponse) *string { return v.EnabledState }).(pulumi.StringPtrOutput)
}

// Configures which HTTP method to use to probe the backends defined under backendPools.
func (o HealthProbeSettingsPropertiesResponseOutput) HealthProbeMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsPropertiesResponse) *string { return v.HealthProbeMethod }).(pulumi.StringPtrOutput)
}

// The number of seconds between health probes.
func (o HealthProbeSettingsPropertiesResponseOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsPropertiesResponse) *int { return v.IntervalInSeconds }).(pulumi.IntPtrOutput)
}

// The path to use for the health probe. Default is /
func (o HealthProbeSettingsPropertiesResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsPropertiesResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Protocol scheme to use for this probe
func (o HealthProbeSettingsPropertiesResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsPropertiesResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Resource status.
func (o HealthProbeSettingsPropertiesResponseOutput) ResourceState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HealthProbeSettingsPropertiesResponse) *string { return v.ResourceState }).(pulumi.StringPtrOutput)
}

type HealthProbeSettingsPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (HealthProbeSettingsPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthProbeSettingsPropertiesResponse)(nil)).Elem()
}

func (o HealthProbeSettingsPropertiesResponsePtrOutput) ToHealthProbeSettingsPropertiesResponsePtrOutput() HealthProbeSettingsPropertiesResponsePtrOutput {
	return o
}

func (o HealthProbeSettingsPropertiesResponsePtrOutput) ToHealthProbeSettingsPropertiesResponsePtrOutputWithContext(ctx context.Context) HealthProbeSettingsPropertiesResponsePtrOutput {
	return o
}

func (o HealthProbeSettingsPropertiesResponsePtrOutput) Elem() HealthProbeSettingsPropertiesResponseOutput {
	return o.ApplyT(func(v *HealthProbeSettingsPropertiesResponse) HealthProbeSettingsPropertiesResponse { return *v }).(HealthProbeSettingsPropertiesResponseOutput)
}

// Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool.
func (o HealthProbeSettingsPropertiesResponsePtrOutput) EnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthProbeSettingsPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.EnabledState
	}).(pulumi.StringPtrOutput)
}

// Configures which HTTP method to use to probe the backends defined under backendPools.
func (o HealthProbeSettingsPropertiesResponsePtrOutput) HealthProbeMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthProbeSettingsPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.HealthProbeMethod
	}).(pulumi.StringPtrOutput)
}

// The number of seconds between health probes.
func (o HealthProbeSettingsPropertiesResponsePtrOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HealthProbeSettingsPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.IntervalInSeconds
	}).(pulumi.IntPtrOutput)
}

// The path to use for the health probe. Default is /
func (o HealthProbeSettingsPropertiesResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthProbeSettingsPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Protocol scheme to use for this probe
func (o HealthProbeSettingsPropertiesResponsePtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthProbeSettingsPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

// Resource status.
func (o HealthProbeSettingsPropertiesResponsePtrOutput) ResourceState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HealthProbeSettingsPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceState
	}).(pulumi.StringPtrOutput)
}

// The Key Vault containing the SSL certificate
type KeyVaultCertificateSourceParametersProperties struct {
	// Resource ID.
	Id *string `pulumi:"id"`
}

// KeyVaultCertificateSourceParametersPropertiesInput is an input type that accepts KeyVaultCertificateSourceParametersPropertiesArgs and KeyVaultCertificateSourceParametersPropertiesOutput values.
// You can construct a concrete instance of `KeyVaultCertificateSourceParametersPropertiesInput` via:
//
//          KeyVaultCertificateSourceParametersPropertiesArgs{...}
type KeyVaultCertificateSourceParametersPropertiesInput interface {
	pulumi.Input

	ToKeyVaultCertificateSourceParametersPropertiesOutput() KeyVaultCertificateSourceParametersPropertiesOutput
	ToKeyVaultCertificateSourceParametersPropertiesOutputWithContext(context.Context) KeyVaultCertificateSourceParametersPropertiesOutput
}

// The Key Vault containing the SSL certificate
type KeyVaultCertificateSourceParametersPropertiesArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (KeyVaultCertificateSourceParametersPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultCertificateSourceParametersProperties)(nil)).Elem()
}

func (i KeyVaultCertificateSourceParametersPropertiesArgs) ToKeyVaultCertificateSourceParametersPropertiesOutput() KeyVaultCertificateSourceParametersPropertiesOutput {
	return i.ToKeyVaultCertificateSourceParametersPropertiesOutputWithContext(context.Background())
}

func (i KeyVaultCertificateSourceParametersPropertiesArgs) ToKeyVaultCertificateSourceParametersPropertiesOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultCertificateSourceParametersPropertiesOutput)
}

func (i KeyVaultCertificateSourceParametersPropertiesArgs) ToKeyVaultCertificateSourceParametersPropertiesPtrOutput() KeyVaultCertificateSourceParametersPropertiesPtrOutput {
	return i.ToKeyVaultCertificateSourceParametersPropertiesPtrOutputWithContext(context.Background())
}

func (i KeyVaultCertificateSourceParametersPropertiesArgs) ToKeyVaultCertificateSourceParametersPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultCertificateSourceParametersPropertiesOutput).ToKeyVaultCertificateSourceParametersPropertiesPtrOutputWithContext(ctx)
}

// KeyVaultCertificateSourceParametersPropertiesPtrInput is an input type that accepts KeyVaultCertificateSourceParametersPropertiesArgs, KeyVaultCertificateSourceParametersPropertiesPtr and KeyVaultCertificateSourceParametersPropertiesPtrOutput values.
// You can construct a concrete instance of `KeyVaultCertificateSourceParametersPropertiesPtrInput` via:
//
//          KeyVaultCertificateSourceParametersPropertiesArgs{...}
//
//  or:
//
//          nil
type KeyVaultCertificateSourceParametersPropertiesPtrInput interface {
	pulumi.Input

	ToKeyVaultCertificateSourceParametersPropertiesPtrOutput() KeyVaultCertificateSourceParametersPropertiesPtrOutput
	ToKeyVaultCertificateSourceParametersPropertiesPtrOutputWithContext(context.Context) KeyVaultCertificateSourceParametersPropertiesPtrOutput
}

type keyVaultCertificateSourceParametersPropertiesPtrType KeyVaultCertificateSourceParametersPropertiesArgs

func KeyVaultCertificateSourceParametersPropertiesPtr(v *KeyVaultCertificateSourceParametersPropertiesArgs) KeyVaultCertificateSourceParametersPropertiesPtrInput {
	return (*keyVaultCertificateSourceParametersPropertiesPtrType)(v)
}

func (*keyVaultCertificateSourceParametersPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultCertificateSourceParametersProperties)(nil)).Elem()
}

func (i *keyVaultCertificateSourceParametersPropertiesPtrType) ToKeyVaultCertificateSourceParametersPropertiesPtrOutput() KeyVaultCertificateSourceParametersPropertiesPtrOutput {
	return i.ToKeyVaultCertificateSourceParametersPropertiesPtrOutputWithContext(context.Background())
}

func (i *keyVaultCertificateSourceParametersPropertiesPtrType) ToKeyVaultCertificateSourceParametersPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultCertificateSourceParametersPropertiesPtrOutput)
}

// The Key Vault containing the SSL certificate
type KeyVaultCertificateSourceParametersPropertiesOutput struct{ *pulumi.OutputState }

func (KeyVaultCertificateSourceParametersPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultCertificateSourceParametersProperties)(nil)).Elem()
}

func (o KeyVaultCertificateSourceParametersPropertiesOutput) ToKeyVaultCertificateSourceParametersPropertiesOutput() KeyVaultCertificateSourceParametersPropertiesOutput {
	return o
}

func (o KeyVaultCertificateSourceParametersPropertiesOutput) ToKeyVaultCertificateSourceParametersPropertiesOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersPropertiesOutput {
	return o
}

func (o KeyVaultCertificateSourceParametersPropertiesOutput) ToKeyVaultCertificateSourceParametersPropertiesPtrOutput() KeyVaultCertificateSourceParametersPropertiesPtrOutput {
	return o.ToKeyVaultCertificateSourceParametersPropertiesPtrOutputWithContext(context.Background())
}

func (o KeyVaultCertificateSourceParametersPropertiesOutput) ToKeyVaultCertificateSourceParametersPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersPropertiesPtrOutput {
	return o.ApplyT(func(v KeyVaultCertificateSourceParametersProperties) *KeyVaultCertificateSourceParametersProperties {
		return &v
	}).(KeyVaultCertificateSourceParametersPropertiesPtrOutput)
}

// Resource ID.
func (o KeyVaultCertificateSourceParametersPropertiesOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultCertificateSourceParametersProperties) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type KeyVaultCertificateSourceParametersPropertiesPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultCertificateSourceParametersPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultCertificateSourceParametersProperties)(nil)).Elem()
}

func (o KeyVaultCertificateSourceParametersPropertiesPtrOutput) ToKeyVaultCertificateSourceParametersPropertiesPtrOutput() KeyVaultCertificateSourceParametersPropertiesPtrOutput {
	return o
}

func (o KeyVaultCertificateSourceParametersPropertiesPtrOutput) ToKeyVaultCertificateSourceParametersPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersPropertiesPtrOutput {
	return o
}

func (o KeyVaultCertificateSourceParametersPropertiesPtrOutput) Elem() KeyVaultCertificateSourceParametersPropertiesOutput {
	return o.ApplyT(func(v *KeyVaultCertificateSourceParametersProperties) KeyVaultCertificateSourceParametersProperties {
		return *v
	}).(KeyVaultCertificateSourceParametersPropertiesOutput)
}

// Resource ID.
func (o KeyVaultCertificateSourceParametersPropertiesPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultCertificateSourceParametersProperties) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Parameters required for bring-your-own-certification via Key Vault
type KeyVaultCertificateSourceParametersResponse struct {
	// The name of the Key Vault secret representing the full certificate PFX
	SecretName *string `pulumi:"secretName"`
	// The version of the Key Vault secret representing the full certificate PFX
	SecretVersion *string `pulumi:"secretVersion"`
	// The Key Vault containing the SSL certificate
	Vault *KeyVaultCertificateSourceParametersResponseProperties `pulumi:"vault"`
}

// KeyVaultCertificateSourceParametersResponseInput is an input type that accepts KeyVaultCertificateSourceParametersResponseArgs and KeyVaultCertificateSourceParametersResponseOutput values.
// You can construct a concrete instance of `KeyVaultCertificateSourceParametersResponseInput` via:
//
//          KeyVaultCertificateSourceParametersResponseArgs{...}
type KeyVaultCertificateSourceParametersResponseInput interface {
	pulumi.Input

	ToKeyVaultCertificateSourceParametersResponseOutput() KeyVaultCertificateSourceParametersResponseOutput
	ToKeyVaultCertificateSourceParametersResponseOutputWithContext(context.Context) KeyVaultCertificateSourceParametersResponseOutput
}

// Parameters required for bring-your-own-certification via Key Vault
type KeyVaultCertificateSourceParametersResponseArgs struct {
	// The name of the Key Vault secret representing the full certificate PFX
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// The version of the Key Vault secret representing the full certificate PFX
	SecretVersion pulumi.StringPtrInput `pulumi:"secretVersion"`
	// The Key Vault containing the SSL certificate
	Vault KeyVaultCertificateSourceParametersResponsePropertiesPtrInput `pulumi:"vault"`
}

func (KeyVaultCertificateSourceParametersResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultCertificateSourceParametersResponse)(nil)).Elem()
}

func (i KeyVaultCertificateSourceParametersResponseArgs) ToKeyVaultCertificateSourceParametersResponseOutput() KeyVaultCertificateSourceParametersResponseOutput {
	return i.ToKeyVaultCertificateSourceParametersResponseOutputWithContext(context.Background())
}

func (i KeyVaultCertificateSourceParametersResponseArgs) ToKeyVaultCertificateSourceParametersResponseOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultCertificateSourceParametersResponseOutput)
}

func (i KeyVaultCertificateSourceParametersResponseArgs) ToKeyVaultCertificateSourceParametersResponsePtrOutput() KeyVaultCertificateSourceParametersResponsePtrOutput {
	return i.ToKeyVaultCertificateSourceParametersResponsePtrOutputWithContext(context.Background())
}

func (i KeyVaultCertificateSourceParametersResponseArgs) ToKeyVaultCertificateSourceParametersResponsePtrOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultCertificateSourceParametersResponseOutput).ToKeyVaultCertificateSourceParametersResponsePtrOutputWithContext(ctx)
}

// KeyVaultCertificateSourceParametersResponsePtrInput is an input type that accepts KeyVaultCertificateSourceParametersResponseArgs, KeyVaultCertificateSourceParametersResponsePtr and KeyVaultCertificateSourceParametersResponsePtrOutput values.
// You can construct a concrete instance of `KeyVaultCertificateSourceParametersResponsePtrInput` via:
//
//          KeyVaultCertificateSourceParametersResponseArgs{...}
//
//  or:
//
//          nil
type KeyVaultCertificateSourceParametersResponsePtrInput interface {
	pulumi.Input

	ToKeyVaultCertificateSourceParametersResponsePtrOutput() KeyVaultCertificateSourceParametersResponsePtrOutput
	ToKeyVaultCertificateSourceParametersResponsePtrOutputWithContext(context.Context) KeyVaultCertificateSourceParametersResponsePtrOutput
}

type keyVaultCertificateSourceParametersResponsePtrType KeyVaultCertificateSourceParametersResponseArgs

func KeyVaultCertificateSourceParametersResponsePtr(v *KeyVaultCertificateSourceParametersResponseArgs) KeyVaultCertificateSourceParametersResponsePtrInput {
	return (*keyVaultCertificateSourceParametersResponsePtrType)(v)
}

func (*keyVaultCertificateSourceParametersResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultCertificateSourceParametersResponse)(nil)).Elem()
}

func (i *keyVaultCertificateSourceParametersResponsePtrType) ToKeyVaultCertificateSourceParametersResponsePtrOutput() KeyVaultCertificateSourceParametersResponsePtrOutput {
	return i.ToKeyVaultCertificateSourceParametersResponsePtrOutputWithContext(context.Background())
}

func (i *keyVaultCertificateSourceParametersResponsePtrType) ToKeyVaultCertificateSourceParametersResponsePtrOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultCertificateSourceParametersResponsePtrOutput)
}

// Parameters required for bring-your-own-certification via Key Vault
type KeyVaultCertificateSourceParametersResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultCertificateSourceParametersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultCertificateSourceParametersResponse)(nil)).Elem()
}

func (o KeyVaultCertificateSourceParametersResponseOutput) ToKeyVaultCertificateSourceParametersResponseOutput() KeyVaultCertificateSourceParametersResponseOutput {
	return o
}

func (o KeyVaultCertificateSourceParametersResponseOutput) ToKeyVaultCertificateSourceParametersResponseOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersResponseOutput {
	return o
}

func (o KeyVaultCertificateSourceParametersResponseOutput) ToKeyVaultCertificateSourceParametersResponsePtrOutput() KeyVaultCertificateSourceParametersResponsePtrOutput {
	return o.ToKeyVaultCertificateSourceParametersResponsePtrOutputWithContext(context.Background())
}

func (o KeyVaultCertificateSourceParametersResponseOutput) ToKeyVaultCertificateSourceParametersResponsePtrOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersResponsePtrOutput {
	return o.ApplyT(func(v KeyVaultCertificateSourceParametersResponse) *KeyVaultCertificateSourceParametersResponse {
		return &v
	}).(KeyVaultCertificateSourceParametersResponsePtrOutput)
}

// The name of the Key Vault secret representing the full certificate PFX
func (o KeyVaultCertificateSourceParametersResponseOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultCertificateSourceParametersResponse) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// The version of the Key Vault secret representing the full certificate PFX
func (o KeyVaultCertificateSourceParametersResponseOutput) SecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultCertificateSourceParametersResponse) *string { return v.SecretVersion }).(pulumi.StringPtrOutput)
}

// The Key Vault containing the SSL certificate
func (o KeyVaultCertificateSourceParametersResponseOutput) Vault() KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput {
	return o.ApplyT(func(v KeyVaultCertificateSourceParametersResponse) *KeyVaultCertificateSourceParametersResponseProperties {
		return v.Vault
	}).(KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput)
}

type KeyVaultCertificateSourceParametersResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultCertificateSourceParametersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultCertificateSourceParametersResponse)(nil)).Elem()
}

func (o KeyVaultCertificateSourceParametersResponsePtrOutput) ToKeyVaultCertificateSourceParametersResponsePtrOutput() KeyVaultCertificateSourceParametersResponsePtrOutput {
	return o
}

func (o KeyVaultCertificateSourceParametersResponsePtrOutput) ToKeyVaultCertificateSourceParametersResponsePtrOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersResponsePtrOutput {
	return o
}

func (o KeyVaultCertificateSourceParametersResponsePtrOutput) Elem() KeyVaultCertificateSourceParametersResponseOutput {
	return o.ApplyT(func(v *KeyVaultCertificateSourceParametersResponse) KeyVaultCertificateSourceParametersResponse {
		return *v
	}).(KeyVaultCertificateSourceParametersResponseOutput)
}

// The name of the Key Vault secret representing the full certificate PFX
func (o KeyVaultCertificateSourceParametersResponsePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultCertificateSourceParametersResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// The version of the Key Vault secret representing the full certificate PFX
func (o KeyVaultCertificateSourceParametersResponsePtrOutput) SecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultCertificateSourceParametersResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecretVersion
	}).(pulumi.StringPtrOutput)
}

// The Key Vault containing the SSL certificate
func (o KeyVaultCertificateSourceParametersResponsePtrOutput) Vault() KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput {
	return o.ApplyT(func(v *KeyVaultCertificateSourceParametersResponse) *KeyVaultCertificateSourceParametersResponseProperties {
		if v == nil {
			return nil
		}
		return v.Vault
	}).(KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput)
}

// The Key Vault containing the SSL certificate
type KeyVaultCertificateSourceParametersResponseProperties struct {
	// Resource ID.
	Id *string `pulumi:"id"`
}

// KeyVaultCertificateSourceParametersResponsePropertiesInput is an input type that accepts KeyVaultCertificateSourceParametersResponsePropertiesArgs and KeyVaultCertificateSourceParametersResponsePropertiesOutput values.
// You can construct a concrete instance of `KeyVaultCertificateSourceParametersResponsePropertiesInput` via:
//
//          KeyVaultCertificateSourceParametersResponsePropertiesArgs{...}
type KeyVaultCertificateSourceParametersResponsePropertiesInput interface {
	pulumi.Input

	ToKeyVaultCertificateSourceParametersResponsePropertiesOutput() KeyVaultCertificateSourceParametersResponsePropertiesOutput
	ToKeyVaultCertificateSourceParametersResponsePropertiesOutputWithContext(context.Context) KeyVaultCertificateSourceParametersResponsePropertiesOutput
}

// The Key Vault containing the SSL certificate
type KeyVaultCertificateSourceParametersResponsePropertiesArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (KeyVaultCertificateSourceParametersResponsePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultCertificateSourceParametersResponseProperties)(nil)).Elem()
}

func (i KeyVaultCertificateSourceParametersResponsePropertiesArgs) ToKeyVaultCertificateSourceParametersResponsePropertiesOutput() KeyVaultCertificateSourceParametersResponsePropertiesOutput {
	return i.ToKeyVaultCertificateSourceParametersResponsePropertiesOutputWithContext(context.Background())
}

func (i KeyVaultCertificateSourceParametersResponsePropertiesArgs) ToKeyVaultCertificateSourceParametersResponsePropertiesOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersResponsePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultCertificateSourceParametersResponsePropertiesOutput)
}

func (i KeyVaultCertificateSourceParametersResponsePropertiesArgs) ToKeyVaultCertificateSourceParametersResponsePropertiesPtrOutput() KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput {
	return i.ToKeyVaultCertificateSourceParametersResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i KeyVaultCertificateSourceParametersResponsePropertiesArgs) ToKeyVaultCertificateSourceParametersResponsePropertiesPtrOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultCertificateSourceParametersResponsePropertiesOutput).ToKeyVaultCertificateSourceParametersResponsePropertiesPtrOutputWithContext(ctx)
}

// KeyVaultCertificateSourceParametersResponsePropertiesPtrInput is an input type that accepts KeyVaultCertificateSourceParametersResponsePropertiesArgs, KeyVaultCertificateSourceParametersResponsePropertiesPtr and KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput values.
// You can construct a concrete instance of `KeyVaultCertificateSourceParametersResponsePropertiesPtrInput` via:
//
//          KeyVaultCertificateSourceParametersResponsePropertiesArgs{...}
//
//  or:
//
//          nil
type KeyVaultCertificateSourceParametersResponsePropertiesPtrInput interface {
	pulumi.Input

	ToKeyVaultCertificateSourceParametersResponsePropertiesPtrOutput() KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput
	ToKeyVaultCertificateSourceParametersResponsePropertiesPtrOutputWithContext(context.Context) KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput
}

type keyVaultCertificateSourceParametersResponsePropertiesPtrType KeyVaultCertificateSourceParametersResponsePropertiesArgs

func KeyVaultCertificateSourceParametersResponsePropertiesPtr(v *KeyVaultCertificateSourceParametersResponsePropertiesArgs) KeyVaultCertificateSourceParametersResponsePropertiesPtrInput {
	return (*keyVaultCertificateSourceParametersResponsePropertiesPtrType)(v)
}

func (*keyVaultCertificateSourceParametersResponsePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultCertificateSourceParametersResponseProperties)(nil)).Elem()
}

func (i *keyVaultCertificateSourceParametersResponsePropertiesPtrType) ToKeyVaultCertificateSourceParametersResponsePropertiesPtrOutput() KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput {
	return i.ToKeyVaultCertificateSourceParametersResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i *keyVaultCertificateSourceParametersResponsePropertiesPtrType) ToKeyVaultCertificateSourceParametersResponsePropertiesPtrOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput)
}

// The Key Vault containing the SSL certificate
type KeyVaultCertificateSourceParametersResponsePropertiesOutput struct{ *pulumi.OutputState }

func (KeyVaultCertificateSourceParametersResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultCertificateSourceParametersResponseProperties)(nil)).Elem()
}

func (o KeyVaultCertificateSourceParametersResponsePropertiesOutput) ToKeyVaultCertificateSourceParametersResponsePropertiesOutput() KeyVaultCertificateSourceParametersResponsePropertiesOutput {
	return o
}

func (o KeyVaultCertificateSourceParametersResponsePropertiesOutput) ToKeyVaultCertificateSourceParametersResponsePropertiesOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersResponsePropertiesOutput {
	return o
}

func (o KeyVaultCertificateSourceParametersResponsePropertiesOutput) ToKeyVaultCertificateSourceParametersResponsePropertiesPtrOutput() KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput {
	return o.ToKeyVaultCertificateSourceParametersResponsePropertiesPtrOutputWithContext(context.Background())
}

func (o KeyVaultCertificateSourceParametersResponsePropertiesOutput) ToKeyVaultCertificateSourceParametersResponsePropertiesPtrOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput {
	return o.ApplyT(func(v KeyVaultCertificateSourceParametersResponseProperties) *KeyVaultCertificateSourceParametersResponseProperties {
		return &v
	}).(KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput)
}

// Resource ID.
func (o KeyVaultCertificateSourceParametersResponsePropertiesOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultCertificateSourceParametersResponseProperties) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultCertificateSourceParametersResponseProperties)(nil)).Elem()
}

func (o KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput) ToKeyVaultCertificateSourceParametersResponsePropertiesPtrOutput() KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput {
	return o
}

func (o KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput) ToKeyVaultCertificateSourceParametersResponsePropertiesPtrOutputWithContext(ctx context.Context) KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput {
	return o
}

func (o KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput) Elem() KeyVaultCertificateSourceParametersResponsePropertiesOutput {
	return o.ApplyT(func(v *KeyVaultCertificateSourceParametersResponseProperties) KeyVaultCertificateSourceParametersResponseProperties {
		return *v
	}).(KeyVaultCertificateSourceParametersResponsePropertiesOutput)
}

// Resource ID.
func (o KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultCertificateSourceParametersResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Load balancing settings for a backend pool
type LoadBalancingSettingsModel struct {
	// The additional latency in milliseconds for probes to fall into the lowest latency bucket
	AdditionalLatencyMilliseconds *int `pulumi:"additionalLatencyMilliseconds"`
	// Resource ID.
	Id *string `pulumi:"id"`
	// Resource name.
	Name *string `pulumi:"name"`
	// Resource status.
	ResourceState *string `pulumi:"resourceState"`
	// The number of samples to consider for load balancing decisions
	SampleSize *int `pulumi:"sampleSize"`
	// The number of samples within the sample period that must succeed
	SuccessfulSamplesRequired *int `pulumi:"successfulSamplesRequired"`
}

// LoadBalancingSettingsModelInput is an input type that accepts LoadBalancingSettingsModelArgs and LoadBalancingSettingsModelOutput values.
// You can construct a concrete instance of `LoadBalancingSettingsModelInput` via:
//
//          LoadBalancingSettingsModelArgs{...}
type LoadBalancingSettingsModelInput interface {
	pulumi.Input

	ToLoadBalancingSettingsModelOutput() LoadBalancingSettingsModelOutput
	ToLoadBalancingSettingsModelOutputWithContext(context.Context) LoadBalancingSettingsModelOutput
}

// Load balancing settings for a backend pool
type LoadBalancingSettingsModelArgs struct {
	// The additional latency in milliseconds for probes to fall into the lowest latency bucket
	AdditionalLatencyMilliseconds pulumi.IntPtrInput `pulumi:"additionalLatencyMilliseconds"`
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Resource status.
	ResourceState pulumi.StringPtrInput `pulumi:"resourceState"`
	// The number of samples to consider for load balancing decisions
	SampleSize pulumi.IntPtrInput `pulumi:"sampleSize"`
	// The number of samples within the sample period that must succeed
	SuccessfulSamplesRequired pulumi.IntPtrInput `pulumi:"successfulSamplesRequired"`
}

func (LoadBalancingSettingsModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancingSettingsModel)(nil)).Elem()
}

func (i LoadBalancingSettingsModelArgs) ToLoadBalancingSettingsModelOutput() LoadBalancingSettingsModelOutput {
	return i.ToLoadBalancingSettingsModelOutputWithContext(context.Background())
}

func (i LoadBalancingSettingsModelArgs) ToLoadBalancingSettingsModelOutputWithContext(ctx context.Context) LoadBalancingSettingsModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancingSettingsModelOutput)
}

// LoadBalancingSettingsModelArrayInput is an input type that accepts LoadBalancingSettingsModelArray and LoadBalancingSettingsModelArrayOutput values.
// You can construct a concrete instance of `LoadBalancingSettingsModelArrayInput` via:
//
//          LoadBalancingSettingsModelArray{ LoadBalancingSettingsModelArgs{...} }
type LoadBalancingSettingsModelArrayInput interface {
	pulumi.Input

	ToLoadBalancingSettingsModelArrayOutput() LoadBalancingSettingsModelArrayOutput
	ToLoadBalancingSettingsModelArrayOutputWithContext(context.Context) LoadBalancingSettingsModelArrayOutput
}

type LoadBalancingSettingsModelArray []LoadBalancingSettingsModelInput

func (LoadBalancingSettingsModelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancingSettingsModel)(nil)).Elem()
}

func (i LoadBalancingSettingsModelArray) ToLoadBalancingSettingsModelArrayOutput() LoadBalancingSettingsModelArrayOutput {
	return i.ToLoadBalancingSettingsModelArrayOutputWithContext(context.Background())
}

func (i LoadBalancingSettingsModelArray) ToLoadBalancingSettingsModelArrayOutputWithContext(ctx context.Context) LoadBalancingSettingsModelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancingSettingsModelArrayOutput)
}

// Load balancing settings for a backend pool
type LoadBalancingSettingsModelOutput struct{ *pulumi.OutputState }

func (LoadBalancingSettingsModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancingSettingsModel)(nil)).Elem()
}

func (o LoadBalancingSettingsModelOutput) ToLoadBalancingSettingsModelOutput() LoadBalancingSettingsModelOutput {
	return o
}

func (o LoadBalancingSettingsModelOutput) ToLoadBalancingSettingsModelOutputWithContext(ctx context.Context) LoadBalancingSettingsModelOutput {
	return o
}

// The additional latency in milliseconds for probes to fall into the lowest latency bucket
func (o LoadBalancingSettingsModelOutput) AdditionalLatencyMilliseconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsModel) *int { return v.AdditionalLatencyMilliseconds }).(pulumi.IntPtrOutput)
}

// Resource ID.
func (o LoadBalancingSettingsModelOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsModel) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o LoadBalancingSettingsModelOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsModel) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Resource status.
func (o LoadBalancingSettingsModelOutput) ResourceState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsModel) *string { return v.ResourceState }).(pulumi.StringPtrOutput)
}

// The number of samples to consider for load balancing decisions
func (o LoadBalancingSettingsModelOutput) SampleSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsModel) *int { return v.SampleSize }).(pulumi.IntPtrOutput)
}

// The number of samples within the sample period that must succeed
func (o LoadBalancingSettingsModelOutput) SuccessfulSamplesRequired() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsModel) *int { return v.SuccessfulSamplesRequired }).(pulumi.IntPtrOutput)
}

type LoadBalancingSettingsModelArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancingSettingsModelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancingSettingsModel)(nil)).Elem()
}

func (o LoadBalancingSettingsModelArrayOutput) ToLoadBalancingSettingsModelArrayOutput() LoadBalancingSettingsModelArrayOutput {
	return o
}

func (o LoadBalancingSettingsModelArrayOutput) ToLoadBalancingSettingsModelArrayOutputWithContext(ctx context.Context) LoadBalancingSettingsModelArrayOutput {
	return o
}

func (o LoadBalancingSettingsModelArrayOutput) Index(i pulumi.IntInput) LoadBalancingSettingsModelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancingSettingsModel {
		return vs[0].([]LoadBalancingSettingsModel)[vs[1].(int)]
	}).(LoadBalancingSettingsModelOutput)
}

// Load balancing settings for a backend pool
type LoadBalancingSettingsModelResponse struct {
	// Resource ID.
	Id *string `pulumi:"id"`
	// Resource name.
	Name *string `pulumi:"name"`
	// Properties of the load balancing settings
	Properties *LoadBalancingSettingsPropertiesResponse `pulumi:"properties"`
	// Resource type.
	Type string `pulumi:"type"`
}

// LoadBalancingSettingsModelResponseInput is an input type that accepts LoadBalancingSettingsModelResponseArgs and LoadBalancingSettingsModelResponseOutput values.
// You can construct a concrete instance of `LoadBalancingSettingsModelResponseInput` via:
//
//          LoadBalancingSettingsModelResponseArgs{...}
type LoadBalancingSettingsModelResponseInput interface {
	pulumi.Input

	ToLoadBalancingSettingsModelResponseOutput() LoadBalancingSettingsModelResponseOutput
	ToLoadBalancingSettingsModelResponseOutputWithContext(context.Context) LoadBalancingSettingsModelResponseOutput
}

// Load balancing settings for a backend pool
type LoadBalancingSettingsModelResponseArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Properties of the load balancing settings
	Properties LoadBalancingSettingsPropertiesResponsePtrInput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LoadBalancingSettingsModelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancingSettingsModelResponse)(nil)).Elem()
}

func (i LoadBalancingSettingsModelResponseArgs) ToLoadBalancingSettingsModelResponseOutput() LoadBalancingSettingsModelResponseOutput {
	return i.ToLoadBalancingSettingsModelResponseOutputWithContext(context.Background())
}

func (i LoadBalancingSettingsModelResponseArgs) ToLoadBalancingSettingsModelResponseOutputWithContext(ctx context.Context) LoadBalancingSettingsModelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancingSettingsModelResponseOutput)
}

// LoadBalancingSettingsModelResponseArrayInput is an input type that accepts LoadBalancingSettingsModelResponseArray and LoadBalancingSettingsModelResponseArrayOutput values.
// You can construct a concrete instance of `LoadBalancingSettingsModelResponseArrayInput` via:
//
//          LoadBalancingSettingsModelResponseArray{ LoadBalancingSettingsModelResponseArgs{...} }
type LoadBalancingSettingsModelResponseArrayInput interface {
	pulumi.Input

	ToLoadBalancingSettingsModelResponseArrayOutput() LoadBalancingSettingsModelResponseArrayOutput
	ToLoadBalancingSettingsModelResponseArrayOutputWithContext(context.Context) LoadBalancingSettingsModelResponseArrayOutput
}

type LoadBalancingSettingsModelResponseArray []LoadBalancingSettingsModelResponseInput

func (LoadBalancingSettingsModelResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancingSettingsModelResponse)(nil)).Elem()
}

func (i LoadBalancingSettingsModelResponseArray) ToLoadBalancingSettingsModelResponseArrayOutput() LoadBalancingSettingsModelResponseArrayOutput {
	return i.ToLoadBalancingSettingsModelResponseArrayOutputWithContext(context.Background())
}

func (i LoadBalancingSettingsModelResponseArray) ToLoadBalancingSettingsModelResponseArrayOutputWithContext(ctx context.Context) LoadBalancingSettingsModelResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancingSettingsModelResponseArrayOutput)
}

// Load balancing settings for a backend pool
type LoadBalancingSettingsModelResponseOutput struct{ *pulumi.OutputState }

func (LoadBalancingSettingsModelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancingSettingsModelResponse)(nil)).Elem()
}

func (o LoadBalancingSettingsModelResponseOutput) ToLoadBalancingSettingsModelResponseOutput() LoadBalancingSettingsModelResponseOutput {
	return o
}

func (o LoadBalancingSettingsModelResponseOutput) ToLoadBalancingSettingsModelResponseOutputWithContext(ctx context.Context) LoadBalancingSettingsModelResponseOutput {
	return o
}

// Resource ID.
func (o LoadBalancingSettingsModelResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsModelResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o LoadBalancingSettingsModelResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsModelResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Properties of the load balancing settings
func (o LoadBalancingSettingsModelResponseOutput) Properties() LoadBalancingSettingsPropertiesResponsePtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsModelResponse) *LoadBalancingSettingsPropertiesResponse {
		return v.Properties
	}).(LoadBalancingSettingsPropertiesResponsePtrOutput)
}

// Resource type.
func (o LoadBalancingSettingsModelResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancingSettingsModelResponse) string { return v.Type }).(pulumi.StringOutput)
}

type LoadBalancingSettingsModelResponseArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancingSettingsModelResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancingSettingsModelResponse)(nil)).Elem()
}

func (o LoadBalancingSettingsModelResponseArrayOutput) ToLoadBalancingSettingsModelResponseArrayOutput() LoadBalancingSettingsModelResponseArrayOutput {
	return o
}

func (o LoadBalancingSettingsModelResponseArrayOutput) ToLoadBalancingSettingsModelResponseArrayOutputWithContext(ctx context.Context) LoadBalancingSettingsModelResponseArrayOutput {
	return o
}

func (o LoadBalancingSettingsModelResponseArrayOutput) Index(i pulumi.IntInput) LoadBalancingSettingsModelResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancingSettingsModelResponse {
		return vs[0].([]LoadBalancingSettingsModelResponse)[vs[1].(int)]
	}).(LoadBalancingSettingsModelResponseOutput)
}

// The JSON object that contains the properties required to create load balancing settings
type LoadBalancingSettingsPropertiesResponse struct {
	// The additional latency in milliseconds for probes to fall into the lowest latency bucket
	AdditionalLatencyMilliseconds *int `pulumi:"additionalLatencyMilliseconds"`
	// Resource status.
	ResourceState *string `pulumi:"resourceState"`
	// The number of samples to consider for load balancing decisions
	SampleSize *int `pulumi:"sampleSize"`
	// The number of samples within the sample period that must succeed
	SuccessfulSamplesRequired *int `pulumi:"successfulSamplesRequired"`
}

// LoadBalancingSettingsPropertiesResponseInput is an input type that accepts LoadBalancingSettingsPropertiesResponseArgs and LoadBalancingSettingsPropertiesResponseOutput values.
// You can construct a concrete instance of `LoadBalancingSettingsPropertiesResponseInput` via:
//
//          LoadBalancingSettingsPropertiesResponseArgs{...}
type LoadBalancingSettingsPropertiesResponseInput interface {
	pulumi.Input

	ToLoadBalancingSettingsPropertiesResponseOutput() LoadBalancingSettingsPropertiesResponseOutput
	ToLoadBalancingSettingsPropertiesResponseOutputWithContext(context.Context) LoadBalancingSettingsPropertiesResponseOutput
}

// The JSON object that contains the properties required to create load balancing settings
type LoadBalancingSettingsPropertiesResponseArgs struct {
	// The additional latency in milliseconds for probes to fall into the lowest latency bucket
	AdditionalLatencyMilliseconds pulumi.IntPtrInput `pulumi:"additionalLatencyMilliseconds"`
	// Resource status.
	ResourceState pulumi.StringPtrInput `pulumi:"resourceState"`
	// The number of samples to consider for load balancing decisions
	SampleSize pulumi.IntPtrInput `pulumi:"sampleSize"`
	// The number of samples within the sample period that must succeed
	SuccessfulSamplesRequired pulumi.IntPtrInput `pulumi:"successfulSamplesRequired"`
}

func (LoadBalancingSettingsPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancingSettingsPropertiesResponse)(nil)).Elem()
}

func (i LoadBalancingSettingsPropertiesResponseArgs) ToLoadBalancingSettingsPropertiesResponseOutput() LoadBalancingSettingsPropertiesResponseOutput {
	return i.ToLoadBalancingSettingsPropertiesResponseOutputWithContext(context.Background())
}

func (i LoadBalancingSettingsPropertiesResponseArgs) ToLoadBalancingSettingsPropertiesResponseOutputWithContext(ctx context.Context) LoadBalancingSettingsPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancingSettingsPropertiesResponseOutput)
}

func (i LoadBalancingSettingsPropertiesResponseArgs) ToLoadBalancingSettingsPropertiesResponsePtrOutput() LoadBalancingSettingsPropertiesResponsePtrOutput {
	return i.ToLoadBalancingSettingsPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i LoadBalancingSettingsPropertiesResponseArgs) ToLoadBalancingSettingsPropertiesResponsePtrOutputWithContext(ctx context.Context) LoadBalancingSettingsPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancingSettingsPropertiesResponseOutput).ToLoadBalancingSettingsPropertiesResponsePtrOutputWithContext(ctx)
}

// LoadBalancingSettingsPropertiesResponsePtrInput is an input type that accepts LoadBalancingSettingsPropertiesResponseArgs, LoadBalancingSettingsPropertiesResponsePtr and LoadBalancingSettingsPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `LoadBalancingSettingsPropertiesResponsePtrInput` via:
//
//          LoadBalancingSettingsPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type LoadBalancingSettingsPropertiesResponsePtrInput interface {
	pulumi.Input

	ToLoadBalancingSettingsPropertiesResponsePtrOutput() LoadBalancingSettingsPropertiesResponsePtrOutput
	ToLoadBalancingSettingsPropertiesResponsePtrOutputWithContext(context.Context) LoadBalancingSettingsPropertiesResponsePtrOutput
}

type loadBalancingSettingsPropertiesResponsePtrType LoadBalancingSettingsPropertiesResponseArgs

func LoadBalancingSettingsPropertiesResponsePtr(v *LoadBalancingSettingsPropertiesResponseArgs) LoadBalancingSettingsPropertiesResponsePtrInput {
	return (*loadBalancingSettingsPropertiesResponsePtrType)(v)
}

func (*loadBalancingSettingsPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancingSettingsPropertiesResponse)(nil)).Elem()
}

func (i *loadBalancingSettingsPropertiesResponsePtrType) ToLoadBalancingSettingsPropertiesResponsePtrOutput() LoadBalancingSettingsPropertiesResponsePtrOutput {
	return i.ToLoadBalancingSettingsPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *loadBalancingSettingsPropertiesResponsePtrType) ToLoadBalancingSettingsPropertiesResponsePtrOutputWithContext(ctx context.Context) LoadBalancingSettingsPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancingSettingsPropertiesResponsePtrOutput)
}

// The JSON object that contains the properties required to create load balancing settings
type LoadBalancingSettingsPropertiesResponseOutput struct{ *pulumi.OutputState }

func (LoadBalancingSettingsPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancingSettingsPropertiesResponse)(nil)).Elem()
}

func (o LoadBalancingSettingsPropertiesResponseOutput) ToLoadBalancingSettingsPropertiesResponseOutput() LoadBalancingSettingsPropertiesResponseOutput {
	return o
}

func (o LoadBalancingSettingsPropertiesResponseOutput) ToLoadBalancingSettingsPropertiesResponseOutputWithContext(ctx context.Context) LoadBalancingSettingsPropertiesResponseOutput {
	return o
}

func (o LoadBalancingSettingsPropertiesResponseOutput) ToLoadBalancingSettingsPropertiesResponsePtrOutput() LoadBalancingSettingsPropertiesResponsePtrOutput {
	return o.ToLoadBalancingSettingsPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o LoadBalancingSettingsPropertiesResponseOutput) ToLoadBalancingSettingsPropertiesResponsePtrOutputWithContext(ctx context.Context) LoadBalancingSettingsPropertiesResponsePtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsPropertiesResponse) *LoadBalancingSettingsPropertiesResponse {
		return &v
	}).(LoadBalancingSettingsPropertiesResponsePtrOutput)
}

// The additional latency in milliseconds for probes to fall into the lowest latency bucket
func (o LoadBalancingSettingsPropertiesResponseOutput) AdditionalLatencyMilliseconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsPropertiesResponse) *int { return v.AdditionalLatencyMilliseconds }).(pulumi.IntPtrOutput)
}

// Resource status.
func (o LoadBalancingSettingsPropertiesResponseOutput) ResourceState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsPropertiesResponse) *string { return v.ResourceState }).(pulumi.StringPtrOutput)
}

// The number of samples to consider for load balancing decisions
func (o LoadBalancingSettingsPropertiesResponseOutput) SampleSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsPropertiesResponse) *int { return v.SampleSize }).(pulumi.IntPtrOutput)
}

// The number of samples within the sample period that must succeed
func (o LoadBalancingSettingsPropertiesResponseOutput) SuccessfulSamplesRequired() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancingSettingsPropertiesResponse) *int { return v.SuccessfulSamplesRequired }).(pulumi.IntPtrOutput)
}

type LoadBalancingSettingsPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (LoadBalancingSettingsPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancingSettingsPropertiesResponse)(nil)).Elem()
}

func (o LoadBalancingSettingsPropertiesResponsePtrOutput) ToLoadBalancingSettingsPropertiesResponsePtrOutput() LoadBalancingSettingsPropertiesResponsePtrOutput {
	return o
}

func (o LoadBalancingSettingsPropertiesResponsePtrOutput) ToLoadBalancingSettingsPropertiesResponsePtrOutputWithContext(ctx context.Context) LoadBalancingSettingsPropertiesResponsePtrOutput {
	return o
}

func (o LoadBalancingSettingsPropertiesResponsePtrOutput) Elem() LoadBalancingSettingsPropertiesResponseOutput {
	return o.ApplyT(func(v *LoadBalancingSettingsPropertiesResponse) LoadBalancingSettingsPropertiesResponse { return *v }).(LoadBalancingSettingsPropertiesResponseOutput)
}

// The additional latency in milliseconds for probes to fall into the lowest latency bucket
func (o LoadBalancingSettingsPropertiesResponsePtrOutput) AdditionalLatencyMilliseconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancingSettingsPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.AdditionalLatencyMilliseconds
	}).(pulumi.IntPtrOutput)
}

// Resource status.
func (o LoadBalancingSettingsPropertiesResponsePtrOutput) ResourceState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancingSettingsPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceState
	}).(pulumi.StringPtrOutput)
}

// The number of samples to consider for load balancing decisions
func (o LoadBalancingSettingsPropertiesResponsePtrOutput) SampleSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancingSettingsPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.SampleSize
	}).(pulumi.IntPtrOutput)
}

// The number of samples within the sample period that must succeed
func (o LoadBalancingSettingsPropertiesResponsePtrOutput) SuccessfulSamplesRequired() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancingSettingsPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.SuccessfulSamplesRequired
	}).(pulumi.IntPtrOutput)
}

// Base class for all types of Route.
type RouteConfiguration struct {
}

// RouteConfigurationInput is an input type that accepts RouteConfigurationArgs and RouteConfigurationOutput values.
// You can construct a concrete instance of `RouteConfigurationInput` via:
//
//          RouteConfigurationArgs{...}
type RouteConfigurationInput interface {
	pulumi.Input

	ToRouteConfigurationOutput() RouteConfigurationOutput
	ToRouteConfigurationOutputWithContext(context.Context) RouteConfigurationOutput
}

// Base class for all types of Route.
type RouteConfigurationArgs struct {
}

func (RouteConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteConfiguration)(nil)).Elem()
}

func (i RouteConfigurationArgs) ToRouteConfigurationOutput() RouteConfigurationOutput {
	return i.ToRouteConfigurationOutputWithContext(context.Background())
}

func (i RouteConfigurationArgs) ToRouteConfigurationOutputWithContext(ctx context.Context) RouteConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteConfigurationOutput)
}

func (i RouteConfigurationArgs) ToRouteConfigurationPtrOutput() RouteConfigurationPtrOutput {
	return i.ToRouteConfigurationPtrOutputWithContext(context.Background())
}

func (i RouteConfigurationArgs) ToRouteConfigurationPtrOutputWithContext(ctx context.Context) RouteConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteConfigurationOutput).ToRouteConfigurationPtrOutputWithContext(ctx)
}

// RouteConfigurationPtrInput is an input type that accepts RouteConfigurationArgs, RouteConfigurationPtr and RouteConfigurationPtrOutput values.
// You can construct a concrete instance of `RouteConfigurationPtrInput` via:
//
//          RouteConfigurationArgs{...}
//
//  or:
//
//          nil
type RouteConfigurationPtrInput interface {
	pulumi.Input

	ToRouteConfigurationPtrOutput() RouteConfigurationPtrOutput
	ToRouteConfigurationPtrOutputWithContext(context.Context) RouteConfigurationPtrOutput
}

type routeConfigurationPtrType RouteConfigurationArgs

func RouteConfigurationPtr(v *RouteConfigurationArgs) RouteConfigurationPtrInput {
	return (*routeConfigurationPtrType)(v)
}

func (*routeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteConfiguration)(nil)).Elem()
}

func (i *routeConfigurationPtrType) ToRouteConfigurationPtrOutput() RouteConfigurationPtrOutput {
	return i.ToRouteConfigurationPtrOutputWithContext(context.Background())
}

func (i *routeConfigurationPtrType) ToRouteConfigurationPtrOutputWithContext(ctx context.Context) RouteConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteConfigurationPtrOutput)
}

// Base class for all types of Route.
type RouteConfigurationOutput struct{ *pulumi.OutputState }

func (RouteConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteConfiguration)(nil)).Elem()
}

func (o RouteConfigurationOutput) ToRouteConfigurationOutput() RouteConfigurationOutput {
	return o
}

func (o RouteConfigurationOutput) ToRouteConfigurationOutputWithContext(ctx context.Context) RouteConfigurationOutput {
	return o
}

func (o RouteConfigurationOutput) ToRouteConfigurationPtrOutput() RouteConfigurationPtrOutput {
	return o.ToRouteConfigurationPtrOutputWithContext(context.Background())
}

func (o RouteConfigurationOutput) ToRouteConfigurationPtrOutputWithContext(ctx context.Context) RouteConfigurationPtrOutput {
	return o.ApplyT(func(v RouteConfiguration) *RouteConfiguration {
		return &v
	}).(RouteConfigurationPtrOutput)
}

type RouteConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RouteConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteConfiguration)(nil)).Elem()
}

func (o RouteConfigurationPtrOutput) ToRouteConfigurationPtrOutput() RouteConfigurationPtrOutput {
	return o
}

func (o RouteConfigurationPtrOutput) ToRouteConfigurationPtrOutputWithContext(ctx context.Context) RouteConfigurationPtrOutput {
	return o
}

func (o RouteConfigurationPtrOutput) Elem() RouteConfigurationOutput {
	return o.ApplyT(func(v *RouteConfiguration) RouteConfiguration { return *v }).(RouteConfigurationOutput)
}

// Base class for all types of Route.
type RouteConfigurationResponse struct {
}

// RouteConfigurationResponseInput is an input type that accepts RouteConfigurationResponseArgs and RouteConfigurationResponseOutput values.
// You can construct a concrete instance of `RouteConfigurationResponseInput` via:
//
//          RouteConfigurationResponseArgs{...}
type RouteConfigurationResponseInput interface {
	pulumi.Input

	ToRouteConfigurationResponseOutput() RouteConfigurationResponseOutput
	ToRouteConfigurationResponseOutputWithContext(context.Context) RouteConfigurationResponseOutput
}

// Base class for all types of Route.
type RouteConfigurationResponseArgs struct {
}

func (RouteConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteConfigurationResponse)(nil)).Elem()
}

func (i RouteConfigurationResponseArgs) ToRouteConfigurationResponseOutput() RouteConfigurationResponseOutput {
	return i.ToRouteConfigurationResponseOutputWithContext(context.Background())
}

func (i RouteConfigurationResponseArgs) ToRouteConfigurationResponseOutputWithContext(ctx context.Context) RouteConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteConfigurationResponseOutput)
}

func (i RouteConfigurationResponseArgs) ToRouteConfigurationResponsePtrOutput() RouteConfigurationResponsePtrOutput {
	return i.ToRouteConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i RouteConfigurationResponseArgs) ToRouteConfigurationResponsePtrOutputWithContext(ctx context.Context) RouteConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteConfigurationResponseOutput).ToRouteConfigurationResponsePtrOutputWithContext(ctx)
}

// RouteConfigurationResponsePtrInput is an input type that accepts RouteConfigurationResponseArgs, RouteConfigurationResponsePtr and RouteConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `RouteConfigurationResponsePtrInput` via:
//
//          RouteConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type RouteConfigurationResponsePtrInput interface {
	pulumi.Input

	ToRouteConfigurationResponsePtrOutput() RouteConfigurationResponsePtrOutput
	ToRouteConfigurationResponsePtrOutputWithContext(context.Context) RouteConfigurationResponsePtrOutput
}

type routeConfigurationResponsePtrType RouteConfigurationResponseArgs

func RouteConfigurationResponsePtr(v *RouteConfigurationResponseArgs) RouteConfigurationResponsePtrInput {
	return (*routeConfigurationResponsePtrType)(v)
}

func (*routeConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteConfigurationResponse)(nil)).Elem()
}

func (i *routeConfigurationResponsePtrType) ToRouteConfigurationResponsePtrOutput() RouteConfigurationResponsePtrOutput {
	return i.ToRouteConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *routeConfigurationResponsePtrType) ToRouteConfigurationResponsePtrOutputWithContext(ctx context.Context) RouteConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteConfigurationResponsePtrOutput)
}

// Base class for all types of Route.
type RouteConfigurationResponseOutput struct{ *pulumi.OutputState }

func (RouteConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteConfigurationResponse)(nil)).Elem()
}

func (o RouteConfigurationResponseOutput) ToRouteConfigurationResponseOutput() RouteConfigurationResponseOutput {
	return o
}

func (o RouteConfigurationResponseOutput) ToRouteConfigurationResponseOutputWithContext(ctx context.Context) RouteConfigurationResponseOutput {
	return o
}

func (o RouteConfigurationResponseOutput) ToRouteConfigurationResponsePtrOutput() RouteConfigurationResponsePtrOutput {
	return o.ToRouteConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o RouteConfigurationResponseOutput) ToRouteConfigurationResponsePtrOutputWithContext(ctx context.Context) RouteConfigurationResponsePtrOutput {
	return o.ApplyT(func(v RouteConfigurationResponse) *RouteConfigurationResponse {
		return &v
	}).(RouteConfigurationResponsePtrOutput)
}

type RouteConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (RouteConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteConfigurationResponse)(nil)).Elem()
}

func (o RouteConfigurationResponsePtrOutput) ToRouteConfigurationResponsePtrOutput() RouteConfigurationResponsePtrOutput {
	return o
}

func (o RouteConfigurationResponsePtrOutput) ToRouteConfigurationResponsePtrOutputWithContext(ctx context.Context) RouteConfigurationResponsePtrOutput {
	return o
}

func (o RouteConfigurationResponsePtrOutput) Elem() RouteConfigurationResponseOutput {
	return o.ApplyT(func(v *RouteConfigurationResponse) RouteConfigurationResponse { return *v }).(RouteConfigurationResponseOutput)
}

// A routing rule represents a specification for traffic to treat and where to send it, along with health probe information.
type RoutingRule struct {
	// Protocol schemes to match for this rule
	AcceptedProtocols []string `pulumi:"acceptedProtocols"`
	// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
	EnabledState *string `pulumi:"enabledState"`
	// Frontend endpoints associated with this rule
	FrontendEndpoints []SubResource `pulumi:"frontendEndpoints"`
	// Resource ID.
	Id *string `pulumi:"id"`
	// Resource name.
	Name *string `pulumi:"name"`
	// The route patterns of the rule.
	PatternsToMatch []string `pulumi:"patternsToMatch"`
	// Resource status.
	ResourceState *string `pulumi:"resourceState"`
	// A reference to the routing configuration.
	RouteConfiguration *RouteConfiguration `pulumi:"routeConfiguration"`
}

// RoutingRuleInput is an input type that accepts RoutingRuleArgs and RoutingRuleOutput values.
// You can construct a concrete instance of `RoutingRuleInput` via:
//
//          RoutingRuleArgs{...}
type RoutingRuleInput interface {
	pulumi.Input

	ToRoutingRuleOutput() RoutingRuleOutput
	ToRoutingRuleOutputWithContext(context.Context) RoutingRuleOutput
}

// A routing rule represents a specification for traffic to treat and where to send it, along with health probe information.
type RoutingRuleArgs struct {
	// Protocol schemes to match for this rule
	AcceptedProtocols pulumi.StringArrayInput `pulumi:"acceptedProtocols"`
	// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
	EnabledState pulumi.StringPtrInput `pulumi:"enabledState"`
	// Frontend endpoints associated with this rule
	FrontendEndpoints SubResourceArrayInput `pulumi:"frontendEndpoints"`
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The route patterns of the rule.
	PatternsToMatch pulumi.StringArrayInput `pulumi:"patternsToMatch"`
	// Resource status.
	ResourceState pulumi.StringPtrInput `pulumi:"resourceState"`
	// A reference to the routing configuration.
	RouteConfiguration RouteConfigurationPtrInput `pulumi:"routeConfiguration"`
}

func (RoutingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingRule)(nil)).Elem()
}

func (i RoutingRuleArgs) ToRoutingRuleOutput() RoutingRuleOutput {
	return i.ToRoutingRuleOutputWithContext(context.Background())
}

func (i RoutingRuleArgs) ToRoutingRuleOutputWithContext(ctx context.Context) RoutingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingRuleOutput)
}

// RoutingRuleArrayInput is an input type that accepts RoutingRuleArray and RoutingRuleArrayOutput values.
// You can construct a concrete instance of `RoutingRuleArrayInput` via:
//
//          RoutingRuleArray{ RoutingRuleArgs{...} }
type RoutingRuleArrayInput interface {
	pulumi.Input

	ToRoutingRuleArrayOutput() RoutingRuleArrayOutput
	ToRoutingRuleArrayOutputWithContext(context.Context) RoutingRuleArrayOutput
}

type RoutingRuleArray []RoutingRuleInput

func (RoutingRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutingRule)(nil)).Elem()
}

func (i RoutingRuleArray) ToRoutingRuleArrayOutput() RoutingRuleArrayOutput {
	return i.ToRoutingRuleArrayOutputWithContext(context.Background())
}

func (i RoutingRuleArray) ToRoutingRuleArrayOutputWithContext(ctx context.Context) RoutingRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingRuleArrayOutput)
}

// A routing rule represents a specification for traffic to treat and where to send it, along with health probe information.
type RoutingRuleOutput struct{ *pulumi.OutputState }

func (RoutingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingRule)(nil)).Elem()
}

func (o RoutingRuleOutput) ToRoutingRuleOutput() RoutingRuleOutput {
	return o
}

func (o RoutingRuleOutput) ToRoutingRuleOutputWithContext(ctx context.Context) RoutingRuleOutput {
	return o
}

// Protocol schemes to match for this rule
func (o RoutingRuleOutput) AcceptedProtocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoutingRule) []string { return v.AcceptedProtocols }).(pulumi.StringArrayOutput)
}

// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
func (o RoutingRuleOutput) EnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutingRule) *string { return v.EnabledState }).(pulumi.StringPtrOutput)
}

// Frontend endpoints associated with this rule
func (o RoutingRuleOutput) FrontendEndpoints() SubResourceArrayOutput {
	return o.ApplyT(func(v RoutingRule) []SubResource { return v.FrontendEndpoints }).(SubResourceArrayOutput)
}

// Resource ID.
func (o RoutingRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutingRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o RoutingRuleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutingRule) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The route patterns of the rule.
func (o RoutingRuleOutput) PatternsToMatch() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoutingRule) []string { return v.PatternsToMatch }).(pulumi.StringArrayOutput)
}

// Resource status.
func (o RoutingRuleOutput) ResourceState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutingRule) *string { return v.ResourceState }).(pulumi.StringPtrOutput)
}

// A reference to the routing configuration.
func (o RoutingRuleOutput) RouteConfiguration() RouteConfigurationPtrOutput {
	return o.ApplyT(func(v RoutingRule) *RouteConfiguration { return v.RouteConfiguration }).(RouteConfigurationPtrOutput)
}

type RoutingRuleArrayOutput struct{ *pulumi.OutputState }

func (RoutingRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutingRule)(nil)).Elem()
}

func (o RoutingRuleArrayOutput) ToRoutingRuleArrayOutput() RoutingRuleArrayOutput {
	return o
}

func (o RoutingRuleArrayOutput) ToRoutingRuleArrayOutputWithContext(ctx context.Context) RoutingRuleArrayOutput {
	return o
}

func (o RoutingRuleArrayOutput) Index(i pulumi.IntInput) RoutingRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoutingRule {
		return vs[0].([]RoutingRule)[vs[1].(int)]
	}).(RoutingRuleOutput)
}

// The JSON object that contains the properties required to create a routing rule.
type RoutingRulePropertiesResponse struct {
	// Protocol schemes to match for this rule
	AcceptedProtocols []string `pulumi:"acceptedProtocols"`
	// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
	EnabledState *string `pulumi:"enabledState"`
	// Frontend endpoints associated with this rule
	FrontendEndpoints []SubResourceResponse `pulumi:"frontendEndpoints"`
	// The route patterns of the rule.
	PatternsToMatch []string `pulumi:"patternsToMatch"`
	// Resource status.
	ResourceState *string `pulumi:"resourceState"`
	// A reference to the routing configuration.
	RouteConfiguration *RouteConfigurationResponse `pulumi:"routeConfiguration"`
}

// RoutingRulePropertiesResponseInput is an input type that accepts RoutingRulePropertiesResponseArgs and RoutingRulePropertiesResponseOutput values.
// You can construct a concrete instance of `RoutingRulePropertiesResponseInput` via:
//
//          RoutingRulePropertiesResponseArgs{...}
type RoutingRulePropertiesResponseInput interface {
	pulumi.Input

	ToRoutingRulePropertiesResponseOutput() RoutingRulePropertiesResponseOutput
	ToRoutingRulePropertiesResponseOutputWithContext(context.Context) RoutingRulePropertiesResponseOutput
}

// The JSON object that contains the properties required to create a routing rule.
type RoutingRulePropertiesResponseArgs struct {
	// Protocol schemes to match for this rule
	AcceptedProtocols pulumi.StringArrayInput `pulumi:"acceptedProtocols"`
	// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
	EnabledState pulumi.StringPtrInput `pulumi:"enabledState"`
	// Frontend endpoints associated with this rule
	FrontendEndpoints SubResourceResponseArrayInput `pulumi:"frontendEndpoints"`
	// The route patterns of the rule.
	PatternsToMatch pulumi.StringArrayInput `pulumi:"patternsToMatch"`
	// Resource status.
	ResourceState pulumi.StringPtrInput `pulumi:"resourceState"`
	// A reference to the routing configuration.
	RouteConfiguration RouteConfigurationResponsePtrInput `pulumi:"routeConfiguration"`
}

func (RoutingRulePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingRulePropertiesResponse)(nil)).Elem()
}

func (i RoutingRulePropertiesResponseArgs) ToRoutingRulePropertiesResponseOutput() RoutingRulePropertiesResponseOutput {
	return i.ToRoutingRulePropertiesResponseOutputWithContext(context.Background())
}

func (i RoutingRulePropertiesResponseArgs) ToRoutingRulePropertiesResponseOutputWithContext(ctx context.Context) RoutingRulePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingRulePropertiesResponseOutput)
}

func (i RoutingRulePropertiesResponseArgs) ToRoutingRulePropertiesResponsePtrOutput() RoutingRulePropertiesResponsePtrOutput {
	return i.ToRoutingRulePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i RoutingRulePropertiesResponseArgs) ToRoutingRulePropertiesResponsePtrOutputWithContext(ctx context.Context) RoutingRulePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingRulePropertiesResponseOutput).ToRoutingRulePropertiesResponsePtrOutputWithContext(ctx)
}

// RoutingRulePropertiesResponsePtrInput is an input type that accepts RoutingRulePropertiesResponseArgs, RoutingRulePropertiesResponsePtr and RoutingRulePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `RoutingRulePropertiesResponsePtrInput` via:
//
//          RoutingRulePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type RoutingRulePropertiesResponsePtrInput interface {
	pulumi.Input

	ToRoutingRulePropertiesResponsePtrOutput() RoutingRulePropertiesResponsePtrOutput
	ToRoutingRulePropertiesResponsePtrOutputWithContext(context.Context) RoutingRulePropertiesResponsePtrOutput
}

type routingRulePropertiesResponsePtrType RoutingRulePropertiesResponseArgs

func RoutingRulePropertiesResponsePtr(v *RoutingRulePropertiesResponseArgs) RoutingRulePropertiesResponsePtrInput {
	return (*routingRulePropertiesResponsePtrType)(v)
}

func (*routingRulePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingRulePropertiesResponse)(nil)).Elem()
}

func (i *routingRulePropertiesResponsePtrType) ToRoutingRulePropertiesResponsePtrOutput() RoutingRulePropertiesResponsePtrOutput {
	return i.ToRoutingRulePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *routingRulePropertiesResponsePtrType) ToRoutingRulePropertiesResponsePtrOutputWithContext(ctx context.Context) RoutingRulePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingRulePropertiesResponsePtrOutput)
}

// The JSON object that contains the properties required to create a routing rule.
type RoutingRulePropertiesResponseOutput struct{ *pulumi.OutputState }

func (RoutingRulePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingRulePropertiesResponse)(nil)).Elem()
}

func (o RoutingRulePropertiesResponseOutput) ToRoutingRulePropertiesResponseOutput() RoutingRulePropertiesResponseOutput {
	return o
}

func (o RoutingRulePropertiesResponseOutput) ToRoutingRulePropertiesResponseOutputWithContext(ctx context.Context) RoutingRulePropertiesResponseOutput {
	return o
}

func (o RoutingRulePropertiesResponseOutput) ToRoutingRulePropertiesResponsePtrOutput() RoutingRulePropertiesResponsePtrOutput {
	return o.ToRoutingRulePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o RoutingRulePropertiesResponseOutput) ToRoutingRulePropertiesResponsePtrOutputWithContext(ctx context.Context) RoutingRulePropertiesResponsePtrOutput {
	return o.ApplyT(func(v RoutingRulePropertiesResponse) *RoutingRulePropertiesResponse {
		return &v
	}).(RoutingRulePropertiesResponsePtrOutput)
}

// Protocol schemes to match for this rule
func (o RoutingRulePropertiesResponseOutput) AcceptedProtocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoutingRulePropertiesResponse) []string { return v.AcceptedProtocols }).(pulumi.StringArrayOutput)
}

// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
func (o RoutingRulePropertiesResponseOutput) EnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutingRulePropertiesResponse) *string { return v.EnabledState }).(pulumi.StringPtrOutput)
}

// Frontend endpoints associated with this rule
func (o RoutingRulePropertiesResponseOutput) FrontendEndpoints() SubResourceResponseArrayOutput {
	return o.ApplyT(func(v RoutingRulePropertiesResponse) []SubResourceResponse { return v.FrontendEndpoints }).(SubResourceResponseArrayOutput)
}

// The route patterns of the rule.
func (o RoutingRulePropertiesResponseOutput) PatternsToMatch() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoutingRulePropertiesResponse) []string { return v.PatternsToMatch }).(pulumi.StringArrayOutput)
}

// Resource status.
func (o RoutingRulePropertiesResponseOutput) ResourceState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutingRulePropertiesResponse) *string { return v.ResourceState }).(pulumi.StringPtrOutput)
}

// A reference to the routing configuration.
func (o RoutingRulePropertiesResponseOutput) RouteConfiguration() RouteConfigurationResponsePtrOutput {
	return o.ApplyT(func(v RoutingRulePropertiesResponse) *RouteConfigurationResponse { return v.RouteConfiguration }).(RouteConfigurationResponsePtrOutput)
}

type RoutingRulePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (RoutingRulePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingRulePropertiesResponse)(nil)).Elem()
}

func (o RoutingRulePropertiesResponsePtrOutput) ToRoutingRulePropertiesResponsePtrOutput() RoutingRulePropertiesResponsePtrOutput {
	return o
}

func (o RoutingRulePropertiesResponsePtrOutput) ToRoutingRulePropertiesResponsePtrOutputWithContext(ctx context.Context) RoutingRulePropertiesResponsePtrOutput {
	return o
}

func (o RoutingRulePropertiesResponsePtrOutput) Elem() RoutingRulePropertiesResponseOutput {
	return o.ApplyT(func(v *RoutingRulePropertiesResponse) RoutingRulePropertiesResponse { return *v }).(RoutingRulePropertiesResponseOutput)
}

// Protocol schemes to match for this rule
func (o RoutingRulePropertiesResponsePtrOutput) AcceptedProtocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoutingRulePropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.AcceptedProtocols
	}).(pulumi.StringArrayOutput)
}

// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
func (o RoutingRulePropertiesResponsePtrOutput) EnabledState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutingRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.EnabledState
	}).(pulumi.StringPtrOutput)
}

// Frontend endpoints associated with this rule
func (o RoutingRulePropertiesResponsePtrOutput) FrontendEndpoints() SubResourceResponseArrayOutput {
	return o.ApplyT(func(v *RoutingRulePropertiesResponse) []SubResourceResponse {
		if v == nil {
			return nil
		}
		return v.FrontendEndpoints
	}).(SubResourceResponseArrayOutput)
}

// The route patterns of the rule.
func (o RoutingRulePropertiesResponsePtrOutput) PatternsToMatch() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoutingRulePropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.PatternsToMatch
	}).(pulumi.StringArrayOutput)
}

// Resource status.
func (o RoutingRulePropertiesResponsePtrOutput) ResourceState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutingRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceState
	}).(pulumi.StringPtrOutput)
}

// A reference to the routing configuration.
func (o RoutingRulePropertiesResponsePtrOutput) RouteConfiguration() RouteConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *RoutingRulePropertiesResponse) *RouteConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.RouteConfiguration
	}).(RouteConfigurationResponsePtrOutput)
}

// A routing rule represents a specification for traffic to treat and where to send it, along with health probe information.
type RoutingRuleResponse struct {
	// Resource ID.
	Id *string `pulumi:"id"`
	// Resource name.
	Name *string `pulumi:"name"`
	// Properties of the Front Door Routing Rule
	Properties *RoutingRulePropertiesResponse `pulumi:"properties"`
	// Resource type.
	Type string `pulumi:"type"`
}

// RoutingRuleResponseInput is an input type that accepts RoutingRuleResponseArgs and RoutingRuleResponseOutput values.
// You can construct a concrete instance of `RoutingRuleResponseInput` via:
//
//          RoutingRuleResponseArgs{...}
type RoutingRuleResponseInput interface {
	pulumi.Input

	ToRoutingRuleResponseOutput() RoutingRuleResponseOutput
	ToRoutingRuleResponseOutputWithContext(context.Context) RoutingRuleResponseOutput
}

// A routing rule represents a specification for traffic to treat and where to send it, along with health probe information.
type RoutingRuleResponseArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Properties of the Front Door Routing Rule
	Properties RoutingRulePropertiesResponsePtrInput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RoutingRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingRuleResponse)(nil)).Elem()
}

func (i RoutingRuleResponseArgs) ToRoutingRuleResponseOutput() RoutingRuleResponseOutput {
	return i.ToRoutingRuleResponseOutputWithContext(context.Background())
}

func (i RoutingRuleResponseArgs) ToRoutingRuleResponseOutputWithContext(ctx context.Context) RoutingRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingRuleResponseOutput)
}

// RoutingRuleResponseArrayInput is an input type that accepts RoutingRuleResponseArray and RoutingRuleResponseArrayOutput values.
// You can construct a concrete instance of `RoutingRuleResponseArrayInput` via:
//
//          RoutingRuleResponseArray{ RoutingRuleResponseArgs{...} }
type RoutingRuleResponseArrayInput interface {
	pulumi.Input

	ToRoutingRuleResponseArrayOutput() RoutingRuleResponseArrayOutput
	ToRoutingRuleResponseArrayOutputWithContext(context.Context) RoutingRuleResponseArrayOutput
}

type RoutingRuleResponseArray []RoutingRuleResponseInput

func (RoutingRuleResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutingRuleResponse)(nil)).Elem()
}

func (i RoutingRuleResponseArray) ToRoutingRuleResponseArrayOutput() RoutingRuleResponseArrayOutput {
	return i.ToRoutingRuleResponseArrayOutputWithContext(context.Background())
}

func (i RoutingRuleResponseArray) ToRoutingRuleResponseArrayOutputWithContext(ctx context.Context) RoutingRuleResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingRuleResponseArrayOutput)
}

// A routing rule represents a specification for traffic to treat and where to send it, along with health probe information.
type RoutingRuleResponseOutput struct{ *pulumi.OutputState }

func (RoutingRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingRuleResponse)(nil)).Elem()
}

func (o RoutingRuleResponseOutput) ToRoutingRuleResponseOutput() RoutingRuleResponseOutput {
	return o
}

func (o RoutingRuleResponseOutput) ToRoutingRuleResponseOutputWithContext(ctx context.Context) RoutingRuleResponseOutput {
	return o
}

// Resource ID.
func (o RoutingRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutingRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o RoutingRuleResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutingRuleResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Properties of the Front Door Routing Rule
func (o RoutingRuleResponseOutput) Properties() RoutingRulePropertiesResponsePtrOutput {
	return o.ApplyT(func(v RoutingRuleResponse) *RoutingRulePropertiesResponse { return v.Properties }).(RoutingRulePropertiesResponsePtrOutput)
}

// Resource type.
func (o RoutingRuleResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RoutingRuleResponse) string { return v.Type }).(pulumi.StringOutput)
}

type RoutingRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (RoutingRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutingRuleResponse)(nil)).Elem()
}

func (o RoutingRuleResponseArrayOutput) ToRoutingRuleResponseArrayOutput() RoutingRuleResponseArrayOutput {
	return o
}

func (o RoutingRuleResponseArrayOutput) ToRoutingRuleResponseArrayOutputWithContext(ctx context.Context) RoutingRuleResponseArrayOutput {
	return o
}

func (o RoutingRuleResponseArrayOutput) Index(i pulumi.IntInput) RoutingRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoutingRuleResponse {
		return vs[0].([]RoutingRuleResponse)[vs[1].(int)]
	}).(RoutingRuleResponseOutput)
}

// Reference to another subresource.
type SubResource struct {
	// Resource ID.
	Id *string `pulumi:"id"`
}

// SubResourceInput is an input type that accepts SubResourceArgs and SubResourceOutput values.
// You can construct a concrete instance of `SubResourceInput` via:
//
//          SubResourceArgs{...}
type SubResourceInput interface {
	pulumi.Input

	ToSubResourceOutput() SubResourceOutput
	ToSubResourceOutputWithContext(context.Context) SubResourceOutput
}

// Reference to another subresource.
type SubResourceArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SubResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResource)(nil)).Elem()
}

func (i SubResourceArgs) ToSubResourceOutput() SubResourceOutput {
	return i.ToSubResourceOutputWithContext(context.Background())
}

func (i SubResourceArgs) ToSubResourceOutputWithContext(ctx context.Context) SubResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceOutput)
}

func (i SubResourceArgs) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return i.ToSubResourcePtrOutputWithContext(context.Background())
}

func (i SubResourceArgs) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceOutput).ToSubResourcePtrOutputWithContext(ctx)
}

// SubResourcePtrInput is an input type that accepts SubResourceArgs, SubResourcePtr and SubResourcePtrOutput values.
// You can construct a concrete instance of `SubResourcePtrInput` via:
//
//          SubResourceArgs{...}
//
//  or:
//
//          nil
type SubResourcePtrInput interface {
	pulumi.Input

	ToSubResourcePtrOutput() SubResourcePtrOutput
	ToSubResourcePtrOutputWithContext(context.Context) SubResourcePtrOutput
}

type subResourcePtrType SubResourceArgs

func SubResourcePtr(v *SubResourceArgs) SubResourcePtrInput {
	return (*subResourcePtrType)(v)
}

func (*subResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResource)(nil)).Elem()
}

func (i *subResourcePtrType) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return i.ToSubResourcePtrOutputWithContext(context.Background())
}

func (i *subResourcePtrType) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourcePtrOutput)
}

// SubResourceArrayInput is an input type that accepts SubResourceArray and SubResourceArrayOutput values.
// You can construct a concrete instance of `SubResourceArrayInput` via:
//
//          SubResourceArray{ SubResourceArgs{...} }
type SubResourceArrayInput interface {
	pulumi.Input

	ToSubResourceArrayOutput() SubResourceArrayOutput
	ToSubResourceArrayOutputWithContext(context.Context) SubResourceArrayOutput
}

type SubResourceArray []SubResourceInput

func (SubResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResource)(nil)).Elem()
}

func (i SubResourceArray) ToSubResourceArrayOutput() SubResourceArrayOutput {
	return i.ToSubResourceArrayOutputWithContext(context.Background())
}

func (i SubResourceArray) ToSubResourceArrayOutputWithContext(ctx context.Context) SubResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceArrayOutput)
}

// Reference to another subresource.
type SubResourceOutput struct{ *pulumi.OutputState }

func (SubResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResource)(nil)).Elem()
}

func (o SubResourceOutput) ToSubResourceOutput() SubResourceOutput {
	return o
}

func (o SubResourceOutput) ToSubResourceOutputWithContext(ctx context.Context) SubResourceOutput {
	return o
}

func (o SubResourceOutput) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return o.ToSubResourcePtrOutputWithContext(context.Background())
}

func (o SubResourceOutput) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return o.ApplyT(func(v SubResource) *SubResource {
		return &v
	}).(SubResourcePtrOutput)
}

// Resource ID.
func (o SubResourceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubResource) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubResourcePtrOutput struct{ *pulumi.OutputState }

func (SubResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResource)(nil)).Elem()
}

func (o SubResourcePtrOutput) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return o
}

func (o SubResourcePtrOutput) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return o
}

func (o SubResourcePtrOutput) Elem() SubResourceOutput {
	return o.ApplyT(func(v *SubResource) SubResource { return *v }).(SubResourceOutput)
}

// Resource ID.
func (o SubResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubResource) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type SubResourceArrayOutput struct{ *pulumi.OutputState }

func (SubResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResource)(nil)).Elem()
}

func (o SubResourceArrayOutput) ToSubResourceArrayOutput() SubResourceArrayOutput {
	return o
}

func (o SubResourceArrayOutput) ToSubResourceArrayOutputWithContext(ctx context.Context) SubResourceArrayOutput {
	return o
}

func (o SubResourceArrayOutput) Index(i pulumi.IntInput) SubResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubResource {
		return vs[0].([]SubResource)[vs[1].(int)]
	}).(SubResourceOutput)
}

// Reference to another subresource.
type SubResourceResponse struct {
	// Resource ID.
	Id *string `pulumi:"id"`
}

// SubResourceResponseInput is an input type that accepts SubResourceResponseArgs and SubResourceResponseOutput values.
// You can construct a concrete instance of `SubResourceResponseInput` via:
//
//          SubResourceResponseArgs{...}
type SubResourceResponseInput interface {
	pulumi.Input

	ToSubResourceResponseOutput() SubResourceResponseOutput
	ToSubResourceResponseOutputWithContext(context.Context) SubResourceResponseOutput
}

// Reference to another subresource.
type SubResourceResponseArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SubResourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResourceResponse)(nil)).Elem()
}

func (i SubResourceResponseArgs) ToSubResourceResponseOutput() SubResourceResponseOutput {
	return i.ToSubResourceResponseOutputWithContext(context.Background())
}

func (i SubResourceResponseArgs) ToSubResourceResponseOutputWithContext(ctx context.Context) SubResourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceResponseOutput)
}

func (i SubResourceResponseArgs) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return i.ToSubResourceResponsePtrOutputWithContext(context.Background())
}

func (i SubResourceResponseArgs) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceResponseOutput).ToSubResourceResponsePtrOutputWithContext(ctx)
}

// SubResourceResponsePtrInput is an input type that accepts SubResourceResponseArgs, SubResourceResponsePtr and SubResourceResponsePtrOutput values.
// You can construct a concrete instance of `SubResourceResponsePtrInput` via:
//
//          SubResourceResponseArgs{...}
//
//  or:
//
//          nil
type SubResourceResponsePtrInput interface {
	pulumi.Input

	ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput
	ToSubResourceResponsePtrOutputWithContext(context.Context) SubResourceResponsePtrOutput
}

type subResourceResponsePtrType SubResourceResponseArgs

func SubResourceResponsePtr(v *SubResourceResponseArgs) SubResourceResponsePtrInput {
	return (*subResourceResponsePtrType)(v)
}

func (*subResourceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResourceResponse)(nil)).Elem()
}

func (i *subResourceResponsePtrType) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return i.ToSubResourceResponsePtrOutputWithContext(context.Background())
}

func (i *subResourceResponsePtrType) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceResponsePtrOutput)
}

// SubResourceResponseArrayInput is an input type that accepts SubResourceResponseArray and SubResourceResponseArrayOutput values.
// You can construct a concrete instance of `SubResourceResponseArrayInput` via:
//
//          SubResourceResponseArray{ SubResourceResponseArgs{...} }
type SubResourceResponseArrayInput interface {
	pulumi.Input

	ToSubResourceResponseArrayOutput() SubResourceResponseArrayOutput
	ToSubResourceResponseArrayOutputWithContext(context.Context) SubResourceResponseArrayOutput
}

type SubResourceResponseArray []SubResourceResponseInput

func (SubResourceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResourceResponse)(nil)).Elem()
}

func (i SubResourceResponseArray) ToSubResourceResponseArrayOutput() SubResourceResponseArrayOutput {
	return i.ToSubResourceResponseArrayOutputWithContext(context.Background())
}

func (i SubResourceResponseArray) ToSubResourceResponseArrayOutputWithContext(ctx context.Context) SubResourceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceResponseArrayOutput)
}

// Reference to another subresource.
type SubResourceResponseOutput struct{ *pulumi.OutputState }

func (SubResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponseOutput) ToSubResourceResponseOutput() SubResourceResponseOutput {
	return o
}

func (o SubResourceResponseOutput) ToSubResourceResponseOutputWithContext(ctx context.Context) SubResourceResponseOutput {
	return o
}

func (o SubResourceResponseOutput) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return o.ToSubResourceResponsePtrOutputWithContext(context.Background())
}

func (o SubResourceResponseOutput) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return o.ApplyT(func(v SubResourceResponse) *SubResourceResponse {
		return &v
	}).(SubResourceResponsePtrOutput)
}

// Resource ID.
func (o SubResourceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubResourceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubResourceResponsePtrOutput struct{ *pulumi.OutputState }

func (SubResourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponsePtrOutput) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return o
}

func (o SubResourceResponsePtrOutput) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return o
}

func (o SubResourceResponsePtrOutput) Elem() SubResourceResponseOutput {
	return o.ApplyT(func(v *SubResourceResponse) SubResourceResponse { return *v }).(SubResourceResponseOutput)
}

// Resource ID.
func (o SubResourceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubResourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type SubResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (SubResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponseArrayOutput) ToSubResourceResponseArrayOutput() SubResourceResponseArrayOutput {
	return o
}

func (o SubResourceResponseArrayOutput) ToSubResourceResponseArrayOutputWithContext(ctx context.Context) SubResourceResponseArrayOutput {
	return o
}

func (o SubResourceResponseArrayOutput) Index(i pulumi.IntInput) SubResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubResourceResponse {
		return vs[0].([]SubResourceResponse)[vs[1].(int)]
	}).(SubResourceResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(BackendOutput{})
	pulumi.RegisterOutputType(BackendArrayOutput{})
	pulumi.RegisterOutputType(BackendPoolOutput{})
	pulumi.RegisterOutputType(BackendPoolArrayOutput{})
	pulumi.RegisterOutputType(BackendPoolPropertiesResponseOutput{})
	pulumi.RegisterOutputType(BackendPoolPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(BackendPoolResponseOutput{})
	pulumi.RegisterOutputType(BackendPoolResponseArrayOutput{})
	pulumi.RegisterOutputType(BackendPoolsSettingsOutput{})
	pulumi.RegisterOutputType(BackendPoolsSettingsPtrOutput{})
	pulumi.RegisterOutputType(BackendPoolsSettingsResponseOutput{})
	pulumi.RegisterOutputType(BackendPoolsSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(BackendResponseOutput{})
	pulumi.RegisterOutputType(BackendResponseArrayOutput{})
	pulumi.RegisterOutputType(CustomHttpsConfigurationOutput{})
	pulumi.RegisterOutputType(CustomHttpsConfigurationResponseOutput{})
	pulumi.RegisterOutputType(CustomHttpsConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(FrontDoorTypeOutput{})
	pulumi.RegisterOutputType(FrontDoorCertificateSourceParametersResponseOutput{})
	pulumi.RegisterOutputType(FrontDoorCertificateSourceParametersResponsePtrOutput{})
	pulumi.RegisterOutputType(FrontDoorPropertiesResponseOutput{})
	pulumi.RegisterOutputType(FrontDoorPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(FrontendEndpointOutput{})
	pulumi.RegisterOutputType(FrontendEndpointArrayOutput{})
	pulumi.RegisterOutputType(FrontendEndpointPropertiesResponseOutput{})
	pulumi.RegisterOutputType(FrontendEndpointPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(FrontendEndpointResponseOutput{})
	pulumi.RegisterOutputType(FrontendEndpointResponseArrayOutput{})
	pulumi.RegisterOutputType(FrontendEndpointUpdateParametersPropertiesOutput{})
	pulumi.RegisterOutputType(FrontendEndpointUpdateParametersPropertiesPtrOutput{})
	pulumi.RegisterOutputType(FrontendEndpointUpdateParametersResponsePropertiesOutput{})
	pulumi.RegisterOutputType(FrontendEndpointUpdateParametersResponsePropertiesPtrOutput{})
	pulumi.RegisterOutputType(HealthProbeSettingsModelOutput{})
	pulumi.RegisterOutputType(HealthProbeSettingsModelArrayOutput{})
	pulumi.RegisterOutputType(HealthProbeSettingsModelResponseOutput{})
	pulumi.RegisterOutputType(HealthProbeSettingsModelResponseArrayOutput{})
	pulumi.RegisterOutputType(HealthProbeSettingsPropertiesResponseOutput{})
	pulumi.RegisterOutputType(HealthProbeSettingsPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultCertificateSourceParametersPropertiesOutput{})
	pulumi.RegisterOutputType(KeyVaultCertificateSourceParametersPropertiesPtrOutput{})
	pulumi.RegisterOutputType(KeyVaultCertificateSourceParametersResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultCertificateSourceParametersResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultCertificateSourceParametersResponsePropertiesOutput{})
	pulumi.RegisterOutputType(KeyVaultCertificateSourceParametersResponsePropertiesPtrOutput{})
	pulumi.RegisterOutputType(LoadBalancingSettingsModelOutput{})
	pulumi.RegisterOutputType(LoadBalancingSettingsModelArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancingSettingsModelResponseOutput{})
	pulumi.RegisterOutputType(LoadBalancingSettingsModelResponseArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancingSettingsPropertiesResponseOutput{})
	pulumi.RegisterOutputType(LoadBalancingSettingsPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(RouteConfigurationOutput{})
	pulumi.RegisterOutputType(RouteConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RouteConfigurationResponseOutput{})
	pulumi.RegisterOutputType(RouteConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(RoutingRuleOutput{})
	pulumi.RegisterOutputType(RoutingRuleArrayOutput{})
	pulumi.RegisterOutputType(RoutingRulePropertiesResponseOutput{})
	pulumi.RegisterOutputType(RoutingRulePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(RoutingRuleResponseOutput{})
	pulumi.RegisterOutputType(RoutingRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(SubResourceOutput{})
	pulumi.RegisterOutputType(SubResourcePtrOutput{})
	pulumi.RegisterOutputType(SubResourceArrayOutput{})
	pulumi.RegisterOutputType(SubResourceResponseOutput{})
	pulumi.RegisterOutputType(SubResourceResponsePtrOutput{})
	pulumi.RegisterOutputType(SubResourceResponseArrayOutput{})
}
