// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Route Filter Rule Resource.
type RouteFilterRouteFilterRule struct {
	pulumi.CustomResourceState

	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Resource location.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Properties of the route filter rule.
	Properties RouteFilterRulePropertiesFormatResponseOutput `pulumi:"properties"`
}

// NewRouteFilterRouteFilterRule registers a new resource with the given unique name, arguments, and options.
func NewRouteFilterRouteFilterRule(ctx *pulumi.Context,
	name string, args *RouteFilterRouteFilterRuleArgs, opts ...pulumi.ResourceOption) (*RouteFilterRouteFilterRule, error) {
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.RouteFilterName == nil {
		return nil, errors.New("missing required argument 'RouteFilterName'")
	}
	if args == nil || args.RuleName == nil {
		return nil, errors.New("missing required argument 'RuleName'")
	}
	if args == nil {
		args = &RouteFilterRouteFilterRuleArgs{}
	}
	var resource RouteFilterRouteFilterRule
	err := ctx.RegisterResource("azurerm:network:RouteFilterRouteFilterRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteFilterRouteFilterRule gets an existing RouteFilterRouteFilterRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteFilterRouteFilterRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteFilterRouteFilterRuleState, opts ...pulumi.ResourceOption) (*RouteFilterRouteFilterRule, error) {
	var resource RouteFilterRouteFilterRule
	err := ctx.ReadResource("azurerm:network:RouteFilterRouteFilterRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteFilterRouteFilterRule resources.
type routeFilterRouteFilterRuleState struct {
	// A unique read-only string that changes whenever the resource is updated.
	Etag *string `pulumi:"etag"`
	// Resource location.
	Location *string `pulumi:"location"`
	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `pulumi:"name"`
	// Properties of the route filter rule.
	Properties *RouteFilterRulePropertiesFormatResponse `pulumi:"properties"`
}

type RouteFilterRouteFilterRuleState struct {
	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringPtrInput
	// Resource location.
	Location pulumi.StringPtrInput
	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name pulumi.StringPtrInput
	// Properties of the route filter rule.
	Properties RouteFilterRulePropertiesFormatResponsePtrInput
}

func (RouteFilterRouteFilterRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeFilterRouteFilterRuleState)(nil)).Elem()
}

type routeFilterRouteFilterRuleArgs struct {
	// Resource ID.
	Id *string `pulumi:"id"`
	// Resource location.
	Location *string `pulumi:"location"`
	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `pulumi:"name"`
	// Properties of the route filter rule.
	Properties *RouteFilterRulePropertiesFormat `pulumi:"properties"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the route filter.
	RouteFilterName string `pulumi:"routeFilterName"`
	// The name of the route filter rule.
	RuleName string `pulumi:"ruleName"`
}

// The set of arguments for constructing a RouteFilterRouteFilterRule resource.
type RouteFilterRouteFilterRuleArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput
	// Resource location.
	Location pulumi.StringPtrInput
	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name pulumi.StringPtrInput
	// Properties of the route filter rule.
	Properties RouteFilterRulePropertiesFormatPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The name of the route filter.
	RouteFilterName pulumi.StringInput
	// The name of the route filter rule.
	RuleName pulumi.StringInput
}

func (RouteFilterRouteFilterRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeFilterRouteFilterRuleArgs)(nil)).Elem()
}
