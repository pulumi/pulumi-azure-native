// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20151101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Class containing DNS settings in a Traffic Manager profile.
type DnsConfig struct {
	// Gets or sets the fully-qualified domain name (FQDN) of the Traffic Manager profile.  This is formed from the concatenation of the RelativeName with the DNS domain used by Azure Traffic Manager.
	Fqdn *string `pulumi:"fqdn"`
	// Gets or sets the relative DNS name provided by this Traffic Manager profile.  This value is combined with the DNS domain name used by Azure Traffic Manager to form the fully-qualified domain name (FQDN) of the profile.
	RelativeName *string `pulumi:"relativeName"`
	// Gets or sets the DNS Time-To-Live (TTL), in seconds.  This informs the local DNS resolvers and DNS clients how long to cache DNS responses provided by this Traffic Manager profile.
	Ttl *int `pulumi:"ttl"`
}

// DnsConfigInput is an input type that accepts DnsConfigArgs and DnsConfigOutput values.
// You can construct a concrete instance of `DnsConfigInput` via:
//
//          DnsConfigArgs{...}
type DnsConfigInput interface {
	pulumi.Input

	ToDnsConfigOutput() DnsConfigOutput
	ToDnsConfigOutputWithContext(context.Context) DnsConfigOutput
}

// Class containing DNS settings in a Traffic Manager profile.
type DnsConfigArgs struct {
	// Gets or sets the fully-qualified domain name (FQDN) of the Traffic Manager profile.  This is formed from the concatenation of the RelativeName with the DNS domain used by Azure Traffic Manager.
	Fqdn pulumi.StringPtrInput `pulumi:"fqdn"`
	// Gets or sets the relative DNS name provided by this Traffic Manager profile.  This value is combined with the DNS domain name used by Azure Traffic Manager to form the fully-qualified domain name (FQDN) of the profile.
	RelativeName pulumi.StringPtrInput `pulumi:"relativeName"`
	// Gets or sets the DNS Time-To-Live (TTL), in seconds.  This informs the local DNS resolvers and DNS clients how long to cache DNS responses provided by this Traffic Manager profile.
	Ttl pulumi.IntPtrInput `pulumi:"ttl"`
}

func (DnsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsConfig)(nil)).Elem()
}

func (i DnsConfigArgs) ToDnsConfigOutput() DnsConfigOutput {
	return i.ToDnsConfigOutputWithContext(context.Background())
}

func (i DnsConfigArgs) ToDnsConfigOutputWithContext(ctx context.Context) DnsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigOutput)
}

func (i DnsConfigArgs) ToDnsConfigPtrOutput() DnsConfigPtrOutput {
	return i.ToDnsConfigPtrOutputWithContext(context.Background())
}

func (i DnsConfigArgs) ToDnsConfigPtrOutputWithContext(ctx context.Context) DnsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigOutput).ToDnsConfigPtrOutputWithContext(ctx)
}

// DnsConfigPtrInput is an input type that accepts DnsConfigArgs, DnsConfigPtr and DnsConfigPtrOutput values.
// You can construct a concrete instance of `DnsConfigPtrInput` via:
//
//          DnsConfigArgs{...}
//
//  or:
//
//          nil
type DnsConfigPtrInput interface {
	pulumi.Input

	ToDnsConfigPtrOutput() DnsConfigPtrOutput
	ToDnsConfigPtrOutputWithContext(context.Context) DnsConfigPtrOutput
}

type dnsConfigPtrType DnsConfigArgs

func DnsConfigPtr(v *DnsConfigArgs) DnsConfigPtrInput {
	return (*dnsConfigPtrType)(v)
}

func (*dnsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsConfig)(nil)).Elem()
}

func (i *dnsConfigPtrType) ToDnsConfigPtrOutput() DnsConfigPtrOutput {
	return i.ToDnsConfigPtrOutputWithContext(context.Background())
}

func (i *dnsConfigPtrType) ToDnsConfigPtrOutputWithContext(ctx context.Context) DnsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigPtrOutput)
}

// Class containing DNS settings in a Traffic Manager profile.
type DnsConfigOutput struct{ *pulumi.OutputState }

func (DnsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsConfig)(nil)).Elem()
}

func (o DnsConfigOutput) ToDnsConfigOutput() DnsConfigOutput {
	return o
}

func (o DnsConfigOutput) ToDnsConfigOutputWithContext(ctx context.Context) DnsConfigOutput {
	return o
}

func (o DnsConfigOutput) ToDnsConfigPtrOutput() DnsConfigPtrOutput {
	return o.ToDnsConfigPtrOutputWithContext(context.Background())
}

func (o DnsConfigOutput) ToDnsConfigPtrOutputWithContext(ctx context.Context) DnsConfigPtrOutput {
	return o.ApplyT(func(v DnsConfig) *DnsConfig {
		return &v
	}).(DnsConfigPtrOutput)
}

// Gets or sets the fully-qualified domain name (FQDN) of the Traffic Manager profile.  This is formed from the concatenation of the RelativeName with the DNS domain used by Azure Traffic Manager.
func (o DnsConfigOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsConfig) *string { return v.Fqdn }).(pulumi.StringPtrOutput)
}

// Gets or sets the relative DNS name provided by this Traffic Manager profile.  This value is combined with the DNS domain name used by Azure Traffic Manager to form the fully-qualified domain name (FQDN) of the profile.
func (o DnsConfigOutput) RelativeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsConfig) *string { return v.RelativeName }).(pulumi.StringPtrOutput)
}

// Gets or sets the DNS Time-To-Live (TTL), in seconds.  This informs the local DNS resolvers and DNS clients how long to cache DNS responses provided by this Traffic Manager profile.
func (o DnsConfigOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DnsConfig) *int { return v.Ttl }).(pulumi.IntPtrOutput)
}

type DnsConfigPtrOutput struct{ *pulumi.OutputState }

func (DnsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsConfig)(nil)).Elem()
}

func (o DnsConfigPtrOutput) ToDnsConfigPtrOutput() DnsConfigPtrOutput {
	return o
}

func (o DnsConfigPtrOutput) ToDnsConfigPtrOutputWithContext(ctx context.Context) DnsConfigPtrOutput {
	return o
}

func (o DnsConfigPtrOutput) Elem() DnsConfigOutput {
	return o.ApplyT(func(v *DnsConfig) DnsConfig { return *v }).(DnsConfigOutput)
}

// Gets or sets the fully-qualified domain name (FQDN) of the Traffic Manager profile.  This is formed from the concatenation of the RelativeName with the DNS domain used by Azure Traffic Manager.
func (o DnsConfigPtrOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsConfig) *string {
		if v == nil {
			return nil
		}
		return v.Fqdn
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the relative DNS name provided by this Traffic Manager profile.  This value is combined with the DNS domain name used by Azure Traffic Manager to form the fully-qualified domain name (FQDN) of the profile.
func (o DnsConfigPtrOutput) RelativeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsConfig) *string {
		if v == nil {
			return nil
		}
		return v.RelativeName
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the DNS Time-To-Live (TTL), in seconds.  This informs the local DNS resolvers and DNS clients how long to cache DNS responses provided by this Traffic Manager profile.
func (o DnsConfigPtrOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DnsConfig) *int {
		if v == nil {
			return nil
		}
		return v.Ttl
	}).(pulumi.IntPtrOutput)
}

// Class containing DNS settings in a Traffic Manager profile.
type DnsConfigResponse struct {
	// Gets or sets the fully-qualified domain name (FQDN) of the Traffic Manager profile.  This is formed from the concatenation of the RelativeName with the DNS domain used by Azure Traffic Manager.
	Fqdn *string `pulumi:"fqdn"`
	// Gets or sets the relative DNS name provided by this Traffic Manager profile.  This value is combined with the DNS domain name used by Azure Traffic Manager to form the fully-qualified domain name (FQDN) of the profile.
	RelativeName *string `pulumi:"relativeName"`
	// Gets or sets the DNS Time-To-Live (TTL), in seconds.  This informs the local DNS resolvers and DNS clients how long to cache DNS responses provided by this Traffic Manager profile.
	Ttl *int `pulumi:"ttl"`
}

// DnsConfigResponseInput is an input type that accepts DnsConfigResponseArgs and DnsConfigResponseOutput values.
// You can construct a concrete instance of `DnsConfigResponseInput` via:
//
//          DnsConfigResponseArgs{...}
type DnsConfigResponseInput interface {
	pulumi.Input

	ToDnsConfigResponseOutput() DnsConfigResponseOutput
	ToDnsConfigResponseOutputWithContext(context.Context) DnsConfigResponseOutput
}

// Class containing DNS settings in a Traffic Manager profile.
type DnsConfigResponseArgs struct {
	// Gets or sets the fully-qualified domain name (FQDN) of the Traffic Manager profile.  This is formed from the concatenation of the RelativeName with the DNS domain used by Azure Traffic Manager.
	Fqdn pulumi.StringPtrInput `pulumi:"fqdn"`
	// Gets or sets the relative DNS name provided by this Traffic Manager profile.  This value is combined with the DNS domain name used by Azure Traffic Manager to form the fully-qualified domain name (FQDN) of the profile.
	RelativeName pulumi.StringPtrInput `pulumi:"relativeName"`
	// Gets or sets the DNS Time-To-Live (TTL), in seconds.  This informs the local DNS resolvers and DNS clients how long to cache DNS responses provided by this Traffic Manager profile.
	Ttl pulumi.IntPtrInput `pulumi:"ttl"`
}

func (DnsConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsConfigResponse)(nil)).Elem()
}

func (i DnsConfigResponseArgs) ToDnsConfigResponseOutput() DnsConfigResponseOutput {
	return i.ToDnsConfigResponseOutputWithContext(context.Background())
}

func (i DnsConfigResponseArgs) ToDnsConfigResponseOutputWithContext(ctx context.Context) DnsConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigResponseOutput)
}

func (i DnsConfigResponseArgs) ToDnsConfigResponsePtrOutput() DnsConfigResponsePtrOutput {
	return i.ToDnsConfigResponsePtrOutputWithContext(context.Background())
}

func (i DnsConfigResponseArgs) ToDnsConfigResponsePtrOutputWithContext(ctx context.Context) DnsConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigResponseOutput).ToDnsConfigResponsePtrOutputWithContext(ctx)
}

// DnsConfigResponsePtrInput is an input type that accepts DnsConfigResponseArgs, DnsConfigResponsePtr and DnsConfigResponsePtrOutput values.
// You can construct a concrete instance of `DnsConfigResponsePtrInput` via:
//
//          DnsConfigResponseArgs{...}
//
//  or:
//
//          nil
type DnsConfigResponsePtrInput interface {
	pulumi.Input

	ToDnsConfigResponsePtrOutput() DnsConfigResponsePtrOutput
	ToDnsConfigResponsePtrOutputWithContext(context.Context) DnsConfigResponsePtrOutput
}

type dnsConfigResponsePtrType DnsConfigResponseArgs

func DnsConfigResponsePtr(v *DnsConfigResponseArgs) DnsConfigResponsePtrInput {
	return (*dnsConfigResponsePtrType)(v)
}

func (*dnsConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsConfigResponse)(nil)).Elem()
}

func (i *dnsConfigResponsePtrType) ToDnsConfigResponsePtrOutput() DnsConfigResponsePtrOutput {
	return i.ToDnsConfigResponsePtrOutputWithContext(context.Background())
}

func (i *dnsConfigResponsePtrType) ToDnsConfigResponsePtrOutputWithContext(ctx context.Context) DnsConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigResponsePtrOutput)
}

// Class containing DNS settings in a Traffic Manager profile.
type DnsConfigResponseOutput struct{ *pulumi.OutputState }

func (DnsConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsConfigResponse)(nil)).Elem()
}

func (o DnsConfigResponseOutput) ToDnsConfigResponseOutput() DnsConfigResponseOutput {
	return o
}

func (o DnsConfigResponseOutput) ToDnsConfigResponseOutputWithContext(ctx context.Context) DnsConfigResponseOutput {
	return o
}

func (o DnsConfigResponseOutput) ToDnsConfigResponsePtrOutput() DnsConfigResponsePtrOutput {
	return o.ToDnsConfigResponsePtrOutputWithContext(context.Background())
}

func (o DnsConfigResponseOutput) ToDnsConfigResponsePtrOutputWithContext(ctx context.Context) DnsConfigResponsePtrOutput {
	return o.ApplyT(func(v DnsConfigResponse) *DnsConfigResponse {
		return &v
	}).(DnsConfigResponsePtrOutput)
}

// Gets or sets the fully-qualified domain name (FQDN) of the Traffic Manager profile.  This is formed from the concatenation of the RelativeName with the DNS domain used by Azure Traffic Manager.
func (o DnsConfigResponseOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsConfigResponse) *string { return v.Fqdn }).(pulumi.StringPtrOutput)
}

// Gets or sets the relative DNS name provided by this Traffic Manager profile.  This value is combined with the DNS domain name used by Azure Traffic Manager to form the fully-qualified domain name (FQDN) of the profile.
func (o DnsConfigResponseOutput) RelativeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsConfigResponse) *string { return v.RelativeName }).(pulumi.StringPtrOutput)
}

// Gets or sets the DNS Time-To-Live (TTL), in seconds.  This informs the local DNS resolvers and DNS clients how long to cache DNS responses provided by this Traffic Manager profile.
func (o DnsConfigResponseOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DnsConfigResponse) *int { return v.Ttl }).(pulumi.IntPtrOutput)
}

type DnsConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (DnsConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsConfigResponse)(nil)).Elem()
}

func (o DnsConfigResponsePtrOutput) ToDnsConfigResponsePtrOutput() DnsConfigResponsePtrOutput {
	return o
}

func (o DnsConfigResponsePtrOutput) ToDnsConfigResponsePtrOutputWithContext(ctx context.Context) DnsConfigResponsePtrOutput {
	return o
}

func (o DnsConfigResponsePtrOutput) Elem() DnsConfigResponseOutput {
	return o.ApplyT(func(v *DnsConfigResponse) DnsConfigResponse { return *v }).(DnsConfigResponseOutput)
}

// Gets or sets the fully-qualified domain name (FQDN) of the Traffic Manager profile.  This is formed from the concatenation of the RelativeName with the DNS domain used by Azure Traffic Manager.
func (o DnsConfigResponsePtrOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.Fqdn
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the relative DNS name provided by this Traffic Manager profile.  This value is combined with the DNS domain name used by Azure Traffic Manager to form the fully-qualified domain name (FQDN) of the profile.
func (o DnsConfigResponsePtrOutput) RelativeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.RelativeName
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the DNS Time-To-Live (TTL), in seconds.  This informs the local DNS resolvers and DNS clients how long to cache DNS responses provided by this Traffic Manager profile.
func (o DnsConfigResponsePtrOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DnsConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.Ttl
	}).(pulumi.IntPtrOutput)
}

// Class representing a Traffic Manager endpoint.
type EndpointType struct {
	// Gets or sets the name of the Traffic Manager endpoint.
	Name *string `pulumi:"name"`
	// Class representing a Traffic Manager endpoint properties.
	Properties EndpointPropertiesResponse `pulumi:"properties"`
	// Gets or sets the endpoint type of the Traffic Manager endpoint.
	Type *string `pulumi:"type"`
}

// EndpointTypeInput is an input type that accepts EndpointTypeArgs and EndpointTypeOutput values.
// You can construct a concrete instance of `EndpointTypeInput` via:
//
//          EndpointTypeArgs{...}
type EndpointTypeInput interface {
	pulumi.Input

	ToEndpointTypeOutput() EndpointTypeOutput
	ToEndpointTypeOutputWithContext(context.Context) EndpointTypeOutput
}

// Class representing a Traffic Manager endpoint.
type EndpointTypeArgs struct {
	// Gets or sets the name of the Traffic Manager endpoint.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Class representing a Traffic Manager endpoint properties.
	Properties EndpointPropertiesResponseInput `pulumi:"properties"`
	// Gets or sets the endpoint type of the Traffic Manager endpoint.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EndpointTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointType)(nil)).Elem()
}

func (i EndpointTypeArgs) ToEndpointTypeOutput() EndpointTypeOutput {
	return i.ToEndpointTypeOutputWithContext(context.Background())
}

func (i EndpointTypeArgs) ToEndpointTypeOutputWithContext(ctx context.Context) EndpointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointTypeOutput)
}

// EndpointTypeArrayInput is an input type that accepts EndpointTypeArray and EndpointTypeArrayOutput values.
// You can construct a concrete instance of `EndpointTypeArrayInput` via:
//
//          EndpointTypeArray{ EndpointTypeArgs{...} }
type EndpointTypeArrayInput interface {
	pulumi.Input

	ToEndpointTypeArrayOutput() EndpointTypeArrayOutput
	ToEndpointTypeArrayOutputWithContext(context.Context) EndpointTypeArrayOutput
}

type EndpointTypeArray []EndpointTypeInput

func (EndpointTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointType)(nil)).Elem()
}

func (i EndpointTypeArray) ToEndpointTypeArrayOutput() EndpointTypeArrayOutput {
	return i.ToEndpointTypeArrayOutputWithContext(context.Background())
}

func (i EndpointTypeArray) ToEndpointTypeArrayOutputWithContext(ctx context.Context) EndpointTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointTypeArrayOutput)
}

// Class representing a Traffic Manager endpoint.
type EndpointTypeOutput struct{ *pulumi.OutputState }

func (EndpointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointType)(nil)).Elem()
}

func (o EndpointTypeOutput) ToEndpointTypeOutput() EndpointTypeOutput {
	return o
}

func (o EndpointTypeOutput) ToEndpointTypeOutputWithContext(ctx context.Context) EndpointTypeOutput {
	return o
}

// Gets or sets the name of the Traffic Manager endpoint.
func (o EndpointTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Class representing a Traffic Manager endpoint properties.
func (o EndpointTypeOutput) Properties() EndpointPropertiesResponseOutput {
	return o.ApplyT(func(v EndpointType) EndpointPropertiesResponse { return v.Properties }).(EndpointPropertiesResponseOutput)
}

// Gets or sets the endpoint type of the Traffic Manager endpoint.
func (o EndpointTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EndpointTypeArrayOutput struct{ *pulumi.OutputState }

func (EndpointTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointType)(nil)).Elem()
}

func (o EndpointTypeArrayOutput) ToEndpointTypeArrayOutput() EndpointTypeArrayOutput {
	return o
}

func (o EndpointTypeArrayOutput) ToEndpointTypeArrayOutputWithContext(ctx context.Context) EndpointTypeArrayOutput {
	return o
}

func (o EndpointTypeArrayOutput) Index(i pulumi.IntInput) EndpointTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointType {
		return vs[0].([]EndpointType)[vs[1].(int)]
	}).(EndpointTypeOutput)
}

// Class representing a Traffic Manager endpoint properties.
type EndpointPropertiesResponse struct {
	// Specifies the location of the external or nested endpoints when using the ‘Performance’ traffic routing method.
	EndpointLocation *string `pulumi:"endpointLocation"`
	// Gets or sets the monitoring status of the endpoint.
	EndpointMonitorStatus *string `pulumi:"endpointMonitorStatus"`
	// Gets or sets the status of the endpoint..  If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.  Possible values are 'Enabled' and 'Disabled'.
	EndpointStatus *string `pulumi:"endpointStatus"`
	// Gets or sets the minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.
	MinChildEndpoints *int `pulumi:"minChildEndpoints"`
	// Gets or sets the priority of this endpoint when using the ‘Priority’ traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.
	Priority *int `pulumi:"priority"`
	// Gets or sets the fully-qualified DNS name of the endpoint.  Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.
	Target *string `pulumi:"target"`
	// Gets or sets the Azure Resource URI of the of the endpoint.  Not applicable to endpoints of type 'ExternalEndpoints'.
	TargetResourceId *string `pulumi:"targetResourceId"`
	// Gets or sets the weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000.
	Weight *int `pulumi:"weight"`
}

// EndpointPropertiesResponseInput is an input type that accepts EndpointPropertiesResponseArgs and EndpointPropertiesResponseOutput values.
// You can construct a concrete instance of `EndpointPropertiesResponseInput` via:
//
//          EndpointPropertiesResponseArgs{...}
type EndpointPropertiesResponseInput interface {
	pulumi.Input

	ToEndpointPropertiesResponseOutput() EndpointPropertiesResponseOutput
	ToEndpointPropertiesResponseOutputWithContext(context.Context) EndpointPropertiesResponseOutput
}

// Class representing a Traffic Manager endpoint properties.
type EndpointPropertiesResponseArgs struct {
	// Specifies the location of the external or nested endpoints when using the ‘Performance’ traffic routing method.
	EndpointLocation pulumi.StringPtrInput `pulumi:"endpointLocation"`
	// Gets or sets the monitoring status of the endpoint.
	EndpointMonitorStatus pulumi.StringPtrInput `pulumi:"endpointMonitorStatus"`
	// Gets or sets the status of the endpoint..  If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.  Possible values are 'Enabled' and 'Disabled'.
	EndpointStatus pulumi.StringPtrInput `pulumi:"endpointStatus"`
	// Gets or sets the minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.
	MinChildEndpoints pulumi.IntPtrInput `pulumi:"minChildEndpoints"`
	// Gets or sets the priority of this endpoint when using the ‘Priority’ traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Gets or sets the fully-qualified DNS name of the endpoint.  Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// Gets or sets the Azure Resource URI of the of the endpoint.  Not applicable to endpoints of type 'ExternalEndpoints'.
	TargetResourceId pulumi.StringPtrInput `pulumi:"targetResourceId"`
	// Gets or sets the weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (EndpointPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPropertiesResponse)(nil)).Elem()
}

func (i EndpointPropertiesResponseArgs) ToEndpointPropertiesResponseOutput() EndpointPropertiesResponseOutput {
	return i.ToEndpointPropertiesResponseOutputWithContext(context.Background())
}

func (i EndpointPropertiesResponseArgs) ToEndpointPropertiesResponseOutputWithContext(ctx context.Context) EndpointPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPropertiesResponseOutput)
}

func (i EndpointPropertiesResponseArgs) ToEndpointPropertiesResponsePtrOutput() EndpointPropertiesResponsePtrOutput {
	return i.ToEndpointPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i EndpointPropertiesResponseArgs) ToEndpointPropertiesResponsePtrOutputWithContext(ctx context.Context) EndpointPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPropertiesResponseOutput).ToEndpointPropertiesResponsePtrOutputWithContext(ctx)
}

// EndpointPropertiesResponsePtrInput is an input type that accepts EndpointPropertiesResponseArgs, EndpointPropertiesResponsePtr and EndpointPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `EndpointPropertiesResponsePtrInput` via:
//
//          EndpointPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type EndpointPropertiesResponsePtrInput interface {
	pulumi.Input

	ToEndpointPropertiesResponsePtrOutput() EndpointPropertiesResponsePtrOutput
	ToEndpointPropertiesResponsePtrOutputWithContext(context.Context) EndpointPropertiesResponsePtrOutput
}

type endpointPropertiesResponsePtrType EndpointPropertiesResponseArgs

func EndpointPropertiesResponsePtr(v *EndpointPropertiesResponseArgs) EndpointPropertiesResponsePtrInput {
	return (*endpointPropertiesResponsePtrType)(v)
}

func (*endpointPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointPropertiesResponse)(nil)).Elem()
}

func (i *endpointPropertiesResponsePtrType) ToEndpointPropertiesResponsePtrOutput() EndpointPropertiesResponsePtrOutput {
	return i.ToEndpointPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *endpointPropertiesResponsePtrType) ToEndpointPropertiesResponsePtrOutputWithContext(ctx context.Context) EndpointPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPropertiesResponsePtrOutput)
}

// Class representing a Traffic Manager endpoint properties.
type EndpointPropertiesResponseOutput struct{ *pulumi.OutputState }

func (EndpointPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPropertiesResponse)(nil)).Elem()
}

func (o EndpointPropertiesResponseOutput) ToEndpointPropertiesResponseOutput() EndpointPropertiesResponseOutput {
	return o
}

func (o EndpointPropertiesResponseOutput) ToEndpointPropertiesResponseOutputWithContext(ctx context.Context) EndpointPropertiesResponseOutput {
	return o
}

func (o EndpointPropertiesResponseOutput) ToEndpointPropertiesResponsePtrOutput() EndpointPropertiesResponsePtrOutput {
	return o.ToEndpointPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o EndpointPropertiesResponseOutput) ToEndpointPropertiesResponsePtrOutputWithContext(ctx context.Context) EndpointPropertiesResponsePtrOutput {
	return o.ApplyT(func(v EndpointPropertiesResponse) *EndpointPropertiesResponse {
		return &v
	}).(EndpointPropertiesResponsePtrOutput)
}

// Specifies the location of the external or nested endpoints when using the ‘Performance’ traffic routing method.
func (o EndpointPropertiesResponseOutput) EndpointLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPropertiesResponse) *string { return v.EndpointLocation }).(pulumi.StringPtrOutput)
}

// Gets or sets the monitoring status of the endpoint.
func (o EndpointPropertiesResponseOutput) EndpointMonitorStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPropertiesResponse) *string { return v.EndpointMonitorStatus }).(pulumi.StringPtrOutput)
}

// Gets or sets the status of the endpoint..  If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.  Possible values are 'Enabled' and 'Disabled'.
func (o EndpointPropertiesResponseOutput) EndpointStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPropertiesResponse) *string { return v.EndpointStatus }).(pulumi.StringPtrOutput)
}

// Gets or sets the minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.
func (o EndpointPropertiesResponseOutput) MinChildEndpoints() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointPropertiesResponse) *int { return v.MinChildEndpoints }).(pulumi.IntPtrOutput)
}

// Gets or sets the priority of this endpoint when using the ‘Priority’ traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.
func (o EndpointPropertiesResponseOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointPropertiesResponse) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Gets or sets the fully-qualified DNS name of the endpoint.  Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.
func (o EndpointPropertiesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPropertiesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Gets or sets the Azure Resource URI of the of the endpoint.  Not applicable to endpoints of type 'ExternalEndpoints'.
func (o EndpointPropertiesResponseOutput) TargetResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPropertiesResponse) *string { return v.TargetResourceId }).(pulumi.StringPtrOutput)
}

// Gets or sets the weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000.
func (o EndpointPropertiesResponseOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointPropertiesResponse) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type EndpointPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (EndpointPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointPropertiesResponse)(nil)).Elem()
}

func (o EndpointPropertiesResponsePtrOutput) ToEndpointPropertiesResponsePtrOutput() EndpointPropertiesResponsePtrOutput {
	return o
}

func (o EndpointPropertiesResponsePtrOutput) ToEndpointPropertiesResponsePtrOutputWithContext(ctx context.Context) EndpointPropertiesResponsePtrOutput {
	return o
}

func (o EndpointPropertiesResponsePtrOutput) Elem() EndpointPropertiesResponseOutput {
	return o.ApplyT(func(v *EndpointPropertiesResponse) EndpointPropertiesResponse { return *v }).(EndpointPropertiesResponseOutput)
}

// Specifies the location of the external or nested endpoints when using the ‘Performance’ traffic routing method.
func (o EndpointPropertiesResponsePtrOutput) EndpointLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndpointLocation
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the monitoring status of the endpoint.
func (o EndpointPropertiesResponsePtrOutput) EndpointMonitorStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndpointMonitorStatus
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the status of the endpoint..  If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.  Possible values are 'Enabled' and 'Disabled'.
func (o EndpointPropertiesResponsePtrOutput) EndpointStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndpointStatus
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.
func (o EndpointPropertiesResponsePtrOutput) MinChildEndpoints() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinChildEndpoints
	}).(pulumi.IntPtrOutput)
}

// Gets or sets the priority of this endpoint when using the ‘Priority’ traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.
func (o EndpointPropertiesResponsePtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

// Gets or sets the fully-qualified DNS name of the endpoint.  Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.
func (o EndpointPropertiesResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the Azure Resource URI of the of the endpoint.  Not applicable to endpoints of type 'ExternalEndpoints'.
func (o EndpointPropertiesResponsePtrOutput) TargetResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.TargetResourceId
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000.
func (o EndpointPropertiesResponsePtrOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.Weight
	}).(pulumi.IntPtrOutput)
}

// Class representing a Traffic Manager endpoint.
type EndpointResponse struct {
	// Gets or sets the ID of the Traffic Manager endpoint.
	Id *string `pulumi:"id"`
	// Gets or sets the name of the Traffic Manager endpoint.
	Name *string `pulumi:"name"`
	// Class representing a Traffic Manager endpoint properties.
	Properties *EndpointPropertiesResponse `pulumi:"properties"`
	// Gets or sets the endpoint type of the Traffic Manager endpoint.
	Type *string `pulumi:"type"`
}

// EndpointResponseInput is an input type that accepts EndpointResponseArgs and EndpointResponseOutput values.
// You can construct a concrete instance of `EndpointResponseInput` via:
//
//          EndpointResponseArgs{...}
type EndpointResponseInput interface {
	pulumi.Input

	ToEndpointResponseOutput() EndpointResponseOutput
	ToEndpointResponseOutputWithContext(context.Context) EndpointResponseOutput
}

// Class representing a Traffic Manager endpoint.
type EndpointResponseArgs struct {
	// Gets or sets the ID of the Traffic Manager endpoint.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Gets or sets the name of the Traffic Manager endpoint.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Class representing a Traffic Manager endpoint properties.
	Properties EndpointPropertiesResponsePtrInput `pulumi:"properties"`
	// Gets or sets the endpoint type of the Traffic Manager endpoint.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EndpointResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointResponse)(nil)).Elem()
}

func (i EndpointResponseArgs) ToEndpointResponseOutput() EndpointResponseOutput {
	return i.ToEndpointResponseOutputWithContext(context.Background())
}

func (i EndpointResponseArgs) ToEndpointResponseOutputWithContext(ctx context.Context) EndpointResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointResponseOutput)
}

// EndpointResponseArrayInput is an input type that accepts EndpointResponseArray and EndpointResponseArrayOutput values.
// You can construct a concrete instance of `EndpointResponseArrayInput` via:
//
//          EndpointResponseArray{ EndpointResponseArgs{...} }
type EndpointResponseArrayInput interface {
	pulumi.Input

	ToEndpointResponseArrayOutput() EndpointResponseArrayOutput
	ToEndpointResponseArrayOutputWithContext(context.Context) EndpointResponseArrayOutput
}

type EndpointResponseArray []EndpointResponseInput

func (EndpointResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointResponse)(nil)).Elem()
}

func (i EndpointResponseArray) ToEndpointResponseArrayOutput() EndpointResponseArrayOutput {
	return i.ToEndpointResponseArrayOutputWithContext(context.Background())
}

func (i EndpointResponseArray) ToEndpointResponseArrayOutputWithContext(ctx context.Context) EndpointResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointResponseArrayOutput)
}

// Class representing a Traffic Manager endpoint.
type EndpointResponseOutput struct{ *pulumi.OutputState }

func (EndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointResponse)(nil)).Elem()
}

func (o EndpointResponseOutput) ToEndpointResponseOutput() EndpointResponseOutput {
	return o
}

func (o EndpointResponseOutput) ToEndpointResponseOutputWithContext(ctx context.Context) EndpointResponseOutput {
	return o
}

// Gets or sets the ID of the Traffic Manager endpoint.
func (o EndpointResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Gets or sets the name of the Traffic Manager endpoint.
func (o EndpointResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Class representing a Traffic Manager endpoint properties.
func (o EndpointResponseOutput) Properties() EndpointPropertiesResponsePtrOutput {
	return o.ApplyT(func(v EndpointResponse) *EndpointPropertiesResponse { return v.Properties }).(EndpointPropertiesResponsePtrOutput)
}

// Gets or sets the endpoint type of the Traffic Manager endpoint.
func (o EndpointResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EndpointResponseArrayOutput struct{ *pulumi.OutputState }

func (EndpointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointResponse)(nil)).Elem()
}

func (o EndpointResponseArrayOutput) ToEndpointResponseArrayOutput() EndpointResponseArrayOutput {
	return o
}

func (o EndpointResponseArrayOutput) ToEndpointResponseArrayOutputWithContext(ctx context.Context) EndpointResponseArrayOutput {
	return o
}

func (o EndpointResponseArrayOutput) Index(i pulumi.IntInput) EndpointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointResponse {
		return vs[0].([]EndpointResponse)[vs[1].(int)]
	}).(EndpointResponseOutput)
}

// Class containing endpoint monitoring settings in a Traffic Manager profile.
type MonitorConfig struct {
	// Gets or sets the path relative to the endpoint domain name used to probe for endpoint health.
	Path *string `pulumi:"path"`
	// Gets or sets the TCP port used to probe for endpoint health.
	Port *int `pulumi:"port"`
	// Gets or sets the profile-level monitoring status of the Traffic Manager profile.
	ProfileMonitorStatus *string `pulumi:"profileMonitorStatus"`
	// Gets or sets the protocol (HTTP or HTTPS) used to probe for endpoint health.
	Protocol *string `pulumi:"protocol"`
}

// MonitorConfigInput is an input type that accepts MonitorConfigArgs and MonitorConfigOutput values.
// You can construct a concrete instance of `MonitorConfigInput` via:
//
//          MonitorConfigArgs{...}
type MonitorConfigInput interface {
	pulumi.Input

	ToMonitorConfigOutput() MonitorConfigOutput
	ToMonitorConfigOutputWithContext(context.Context) MonitorConfigOutput
}

// Class containing endpoint monitoring settings in a Traffic Manager profile.
type MonitorConfigArgs struct {
	// Gets or sets the path relative to the endpoint domain name used to probe for endpoint health.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Gets or sets the TCP port used to probe for endpoint health.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Gets or sets the profile-level monitoring status of the Traffic Manager profile.
	ProfileMonitorStatus pulumi.StringPtrInput `pulumi:"profileMonitorStatus"`
	// Gets or sets the protocol (HTTP or HTTPS) used to probe for endpoint health.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (MonitorConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorConfig)(nil)).Elem()
}

func (i MonitorConfigArgs) ToMonitorConfigOutput() MonitorConfigOutput {
	return i.ToMonitorConfigOutputWithContext(context.Background())
}

func (i MonitorConfigArgs) ToMonitorConfigOutputWithContext(ctx context.Context) MonitorConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorConfigOutput)
}

func (i MonitorConfigArgs) ToMonitorConfigPtrOutput() MonitorConfigPtrOutput {
	return i.ToMonitorConfigPtrOutputWithContext(context.Background())
}

func (i MonitorConfigArgs) ToMonitorConfigPtrOutputWithContext(ctx context.Context) MonitorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorConfigOutput).ToMonitorConfigPtrOutputWithContext(ctx)
}

// MonitorConfigPtrInput is an input type that accepts MonitorConfigArgs, MonitorConfigPtr and MonitorConfigPtrOutput values.
// You can construct a concrete instance of `MonitorConfigPtrInput` via:
//
//          MonitorConfigArgs{...}
//
//  or:
//
//          nil
type MonitorConfigPtrInput interface {
	pulumi.Input

	ToMonitorConfigPtrOutput() MonitorConfigPtrOutput
	ToMonitorConfigPtrOutputWithContext(context.Context) MonitorConfigPtrOutput
}

type monitorConfigPtrType MonitorConfigArgs

func MonitorConfigPtr(v *MonitorConfigArgs) MonitorConfigPtrInput {
	return (*monitorConfigPtrType)(v)
}

func (*monitorConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorConfig)(nil)).Elem()
}

func (i *monitorConfigPtrType) ToMonitorConfigPtrOutput() MonitorConfigPtrOutput {
	return i.ToMonitorConfigPtrOutputWithContext(context.Background())
}

func (i *monitorConfigPtrType) ToMonitorConfigPtrOutputWithContext(ctx context.Context) MonitorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorConfigPtrOutput)
}

// Class containing endpoint monitoring settings in a Traffic Manager profile.
type MonitorConfigOutput struct{ *pulumi.OutputState }

func (MonitorConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorConfig)(nil)).Elem()
}

func (o MonitorConfigOutput) ToMonitorConfigOutput() MonitorConfigOutput {
	return o
}

func (o MonitorConfigOutput) ToMonitorConfigOutputWithContext(ctx context.Context) MonitorConfigOutput {
	return o
}

func (o MonitorConfigOutput) ToMonitorConfigPtrOutput() MonitorConfigPtrOutput {
	return o.ToMonitorConfigPtrOutputWithContext(context.Background())
}

func (o MonitorConfigOutput) ToMonitorConfigPtrOutputWithContext(ctx context.Context) MonitorConfigPtrOutput {
	return o.ApplyT(func(v MonitorConfig) *MonitorConfig {
		return &v
	}).(MonitorConfigPtrOutput)
}

// Gets or sets the path relative to the endpoint domain name used to probe for endpoint health.
func (o MonitorConfigOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConfig) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Gets or sets the TCP port used to probe for endpoint health.
func (o MonitorConfigOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonitorConfig) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Gets or sets the profile-level monitoring status of the Traffic Manager profile.
func (o MonitorConfigOutput) ProfileMonitorStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConfig) *string { return v.ProfileMonitorStatus }).(pulumi.StringPtrOutput)
}

// Gets or sets the protocol (HTTP or HTTPS) used to probe for endpoint health.
func (o MonitorConfigOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConfig) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type MonitorConfigPtrOutput struct{ *pulumi.OutputState }

func (MonitorConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorConfig)(nil)).Elem()
}

func (o MonitorConfigPtrOutput) ToMonitorConfigPtrOutput() MonitorConfigPtrOutput {
	return o
}

func (o MonitorConfigPtrOutput) ToMonitorConfigPtrOutputWithContext(ctx context.Context) MonitorConfigPtrOutput {
	return o
}

func (o MonitorConfigPtrOutput) Elem() MonitorConfigOutput {
	return o.ApplyT(func(v *MonitorConfig) MonitorConfig { return *v }).(MonitorConfigOutput)
}

// Gets or sets the path relative to the endpoint domain name used to probe for endpoint health.
func (o MonitorConfigPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorConfig) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the TCP port used to probe for endpoint health.
func (o MonitorConfigPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonitorConfig) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Gets or sets the profile-level monitoring status of the Traffic Manager profile.
func (o MonitorConfigPtrOutput) ProfileMonitorStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorConfig) *string {
		if v == nil {
			return nil
		}
		return v.ProfileMonitorStatus
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the protocol (HTTP or HTTPS) used to probe for endpoint health.
func (o MonitorConfigPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorConfig) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

// Class containing endpoint monitoring settings in a Traffic Manager profile.
type MonitorConfigResponse struct {
	// Gets or sets the path relative to the endpoint domain name used to probe for endpoint health.
	Path *string `pulumi:"path"`
	// Gets or sets the TCP port used to probe for endpoint health.
	Port *int `pulumi:"port"`
	// Gets or sets the profile-level monitoring status of the Traffic Manager profile.
	ProfileMonitorStatus *string `pulumi:"profileMonitorStatus"`
	// Gets or sets the protocol (HTTP or HTTPS) used to probe for endpoint health.
	Protocol *string `pulumi:"protocol"`
}

// MonitorConfigResponseInput is an input type that accepts MonitorConfigResponseArgs and MonitorConfigResponseOutput values.
// You can construct a concrete instance of `MonitorConfigResponseInput` via:
//
//          MonitorConfigResponseArgs{...}
type MonitorConfigResponseInput interface {
	pulumi.Input

	ToMonitorConfigResponseOutput() MonitorConfigResponseOutput
	ToMonitorConfigResponseOutputWithContext(context.Context) MonitorConfigResponseOutput
}

// Class containing endpoint monitoring settings in a Traffic Manager profile.
type MonitorConfigResponseArgs struct {
	// Gets or sets the path relative to the endpoint domain name used to probe for endpoint health.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Gets or sets the TCP port used to probe for endpoint health.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Gets or sets the profile-level monitoring status of the Traffic Manager profile.
	ProfileMonitorStatus pulumi.StringPtrInput `pulumi:"profileMonitorStatus"`
	// Gets or sets the protocol (HTTP or HTTPS) used to probe for endpoint health.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (MonitorConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorConfigResponse)(nil)).Elem()
}

func (i MonitorConfigResponseArgs) ToMonitorConfigResponseOutput() MonitorConfigResponseOutput {
	return i.ToMonitorConfigResponseOutputWithContext(context.Background())
}

func (i MonitorConfigResponseArgs) ToMonitorConfigResponseOutputWithContext(ctx context.Context) MonitorConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorConfigResponseOutput)
}

func (i MonitorConfigResponseArgs) ToMonitorConfigResponsePtrOutput() MonitorConfigResponsePtrOutput {
	return i.ToMonitorConfigResponsePtrOutputWithContext(context.Background())
}

func (i MonitorConfigResponseArgs) ToMonitorConfigResponsePtrOutputWithContext(ctx context.Context) MonitorConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorConfigResponseOutput).ToMonitorConfigResponsePtrOutputWithContext(ctx)
}

// MonitorConfigResponsePtrInput is an input type that accepts MonitorConfigResponseArgs, MonitorConfigResponsePtr and MonitorConfigResponsePtrOutput values.
// You can construct a concrete instance of `MonitorConfigResponsePtrInput` via:
//
//          MonitorConfigResponseArgs{...}
//
//  or:
//
//          nil
type MonitorConfigResponsePtrInput interface {
	pulumi.Input

	ToMonitorConfigResponsePtrOutput() MonitorConfigResponsePtrOutput
	ToMonitorConfigResponsePtrOutputWithContext(context.Context) MonitorConfigResponsePtrOutput
}

type monitorConfigResponsePtrType MonitorConfigResponseArgs

func MonitorConfigResponsePtr(v *MonitorConfigResponseArgs) MonitorConfigResponsePtrInput {
	return (*monitorConfigResponsePtrType)(v)
}

func (*monitorConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorConfigResponse)(nil)).Elem()
}

func (i *monitorConfigResponsePtrType) ToMonitorConfigResponsePtrOutput() MonitorConfigResponsePtrOutput {
	return i.ToMonitorConfigResponsePtrOutputWithContext(context.Background())
}

func (i *monitorConfigResponsePtrType) ToMonitorConfigResponsePtrOutputWithContext(ctx context.Context) MonitorConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorConfigResponsePtrOutput)
}

// Class containing endpoint monitoring settings in a Traffic Manager profile.
type MonitorConfigResponseOutput struct{ *pulumi.OutputState }

func (MonitorConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorConfigResponse)(nil)).Elem()
}

func (o MonitorConfigResponseOutput) ToMonitorConfigResponseOutput() MonitorConfigResponseOutput {
	return o
}

func (o MonitorConfigResponseOutput) ToMonitorConfigResponseOutputWithContext(ctx context.Context) MonitorConfigResponseOutput {
	return o
}

func (o MonitorConfigResponseOutput) ToMonitorConfigResponsePtrOutput() MonitorConfigResponsePtrOutput {
	return o.ToMonitorConfigResponsePtrOutputWithContext(context.Background())
}

func (o MonitorConfigResponseOutput) ToMonitorConfigResponsePtrOutputWithContext(ctx context.Context) MonitorConfigResponsePtrOutput {
	return o.ApplyT(func(v MonitorConfigResponse) *MonitorConfigResponse {
		return &v
	}).(MonitorConfigResponsePtrOutput)
}

// Gets or sets the path relative to the endpoint domain name used to probe for endpoint health.
func (o MonitorConfigResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConfigResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Gets or sets the TCP port used to probe for endpoint health.
func (o MonitorConfigResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonitorConfigResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Gets or sets the profile-level monitoring status of the Traffic Manager profile.
func (o MonitorConfigResponseOutput) ProfileMonitorStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConfigResponse) *string { return v.ProfileMonitorStatus }).(pulumi.StringPtrOutput)
}

// Gets or sets the protocol (HTTP or HTTPS) used to probe for endpoint health.
func (o MonitorConfigResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConfigResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type MonitorConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (MonitorConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorConfigResponse)(nil)).Elem()
}

func (o MonitorConfigResponsePtrOutput) ToMonitorConfigResponsePtrOutput() MonitorConfigResponsePtrOutput {
	return o
}

func (o MonitorConfigResponsePtrOutput) ToMonitorConfigResponsePtrOutputWithContext(ctx context.Context) MonitorConfigResponsePtrOutput {
	return o
}

func (o MonitorConfigResponsePtrOutput) Elem() MonitorConfigResponseOutput {
	return o.ApplyT(func(v *MonitorConfigResponse) MonitorConfigResponse { return *v }).(MonitorConfigResponseOutput)
}

// Gets or sets the path relative to the endpoint domain name used to probe for endpoint health.
func (o MonitorConfigResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the TCP port used to probe for endpoint health.
func (o MonitorConfigResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonitorConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Gets or sets the profile-level monitoring status of the Traffic Manager profile.
func (o MonitorConfigResponsePtrOutput) ProfileMonitorStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProfileMonitorStatus
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the protocol (HTTP or HTTPS) used to probe for endpoint health.
func (o MonitorConfigResponsePtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

// Class representing a Traffic Manager profile.
type ProfileType struct {
	// Resource location
	Location *string `pulumi:"location"`
	// Resource name
	Name string `pulumi:"name"`
	// Class representing the Traffic Manager profile properties.
	Properties ProfilePropertiesResponse `pulumi:"properties"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type string `pulumi:"type"`
}

// ProfileTypeInput is an input type that accepts ProfileTypeArgs and ProfileTypeOutput values.
// You can construct a concrete instance of `ProfileTypeInput` via:
//
//          ProfileTypeArgs{...}
type ProfileTypeInput interface {
	pulumi.Input

	ToProfileTypeOutput() ProfileTypeOutput
	ToProfileTypeOutputWithContext(context.Context) ProfileTypeOutput
}

// Class representing a Traffic Manager profile.
type ProfileTypeArgs struct {
	// Resource location
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Resource name
	Name pulumi.StringInput `pulumi:"name"`
	// Class representing the Traffic Manager profile properties.
	Properties ProfilePropertiesResponseInput `pulumi:"properties"`
	// Resource tags
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProfileTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileType)(nil)).Elem()
}

func (i ProfileTypeArgs) ToProfileTypeOutput() ProfileTypeOutput {
	return i.ToProfileTypeOutputWithContext(context.Background())
}

func (i ProfileTypeArgs) ToProfileTypeOutputWithContext(ctx context.Context) ProfileTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileTypeOutput)
}

// Class representing a Traffic Manager profile.
type ProfileTypeOutput struct{ *pulumi.OutputState }

func (ProfileTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileType)(nil)).Elem()
}

func (o ProfileTypeOutput) ToProfileTypeOutput() ProfileTypeOutput {
	return o
}

func (o ProfileTypeOutput) ToProfileTypeOutputWithContext(ctx context.Context) ProfileTypeOutput {
	return o
}

// Resource location
func (o ProfileTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Resource name
func (o ProfileTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProfileType) string { return v.Name }).(pulumi.StringOutput)
}

// Class representing the Traffic Manager profile properties.
func (o ProfileTypeOutput) Properties() ProfilePropertiesResponseOutput {
	return o.ApplyT(func(v ProfileType) ProfilePropertiesResponse { return v.Properties }).(ProfilePropertiesResponseOutput)
}

// Resource tags
func (o ProfileTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProfileType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o ProfileTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProfileType) string { return v.Type }).(pulumi.StringOutput)
}

// Class representing the Traffic Manager profile properties.
type ProfilePropertiesResponse struct {
	// Gets or sets the DNS settings of the Traffic Manager profile.
	DnsConfig *DnsConfigResponse `pulumi:"dnsConfig"`
	// Gets or sets the list of endpoints in the Traffic Manager profile.
	Endpoints []EndpointResponse `pulumi:"endpoints"`
	// Gets or sets the endpoint monitoring settings of the Traffic Manager profile.
	MonitorConfig *MonitorConfigResponse `pulumi:"monitorConfig"`
	// Gets or sets the status of the Traffic Manager profile.  Possible values are 'Enabled' and 'Disabled'.
	ProfileStatus *string `pulumi:"profileStatus"`
	// Gets or sets the traffic routing method of the Traffic Manager profile.  Possible values are 'Performance', 'Weighted', or 'Priority'.
	TrafficRoutingMethod *string `pulumi:"trafficRoutingMethod"`
}

// ProfilePropertiesResponseInput is an input type that accepts ProfilePropertiesResponseArgs and ProfilePropertiesResponseOutput values.
// You can construct a concrete instance of `ProfilePropertiesResponseInput` via:
//
//          ProfilePropertiesResponseArgs{...}
type ProfilePropertiesResponseInput interface {
	pulumi.Input

	ToProfilePropertiesResponseOutput() ProfilePropertiesResponseOutput
	ToProfilePropertiesResponseOutputWithContext(context.Context) ProfilePropertiesResponseOutput
}

// Class representing the Traffic Manager profile properties.
type ProfilePropertiesResponseArgs struct {
	// Gets or sets the DNS settings of the Traffic Manager profile.
	DnsConfig DnsConfigResponsePtrInput `pulumi:"dnsConfig"`
	// Gets or sets the list of endpoints in the Traffic Manager profile.
	Endpoints EndpointResponseArrayInput `pulumi:"endpoints"`
	// Gets or sets the endpoint monitoring settings of the Traffic Manager profile.
	MonitorConfig MonitorConfigResponsePtrInput `pulumi:"monitorConfig"`
	// Gets or sets the status of the Traffic Manager profile.  Possible values are 'Enabled' and 'Disabled'.
	ProfileStatus pulumi.StringPtrInput `pulumi:"profileStatus"`
	// Gets or sets the traffic routing method of the Traffic Manager profile.  Possible values are 'Performance', 'Weighted', or 'Priority'.
	TrafficRoutingMethod pulumi.StringPtrInput `pulumi:"trafficRoutingMethod"`
}

func (ProfilePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfilePropertiesResponse)(nil)).Elem()
}

func (i ProfilePropertiesResponseArgs) ToProfilePropertiesResponseOutput() ProfilePropertiesResponseOutput {
	return i.ToProfilePropertiesResponseOutputWithContext(context.Background())
}

func (i ProfilePropertiesResponseArgs) ToProfilePropertiesResponseOutputWithContext(ctx context.Context) ProfilePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilePropertiesResponseOutput)
}

func (i ProfilePropertiesResponseArgs) ToProfilePropertiesResponsePtrOutput() ProfilePropertiesResponsePtrOutput {
	return i.ToProfilePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i ProfilePropertiesResponseArgs) ToProfilePropertiesResponsePtrOutputWithContext(ctx context.Context) ProfilePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilePropertiesResponseOutput).ToProfilePropertiesResponsePtrOutputWithContext(ctx)
}

// ProfilePropertiesResponsePtrInput is an input type that accepts ProfilePropertiesResponseArgs, ProfilePropertiesResponsePtr and ProfilePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `ProfilePropertiesResponsePtrInput` via:
//
//          ProfilePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type ProfilePropertiesResponsePtrInput interface {
	pulumi.Input

	ToProfilePropertiesResponsePtrOutput() ProfilePropertiesResponsePtrOutput
	ToProfilePropertiesResponsePtrOutputWithContext(context.Context) ProfilePropertiesResponsePtrOutput
}

type profilePropertiesResponsePtrType ProfilePropertiesResponseArgs

func ProfilePropertiesResponsePtr(v *ProfilePropertiesResponseArgs) ProfilePropertiesResponsePtrInput {
	return (*profilePropertiesResponsePtrType)(v)
}

func (*profilePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfilePropertiesResponse)(nil)).Elem()
}

func (i *profilePropertiesResponsePtrType) ToProfilePropertiesResponsePtrOutput() ProfilePropertiesResponsePtrOutput {
	return i.ToProfilePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *profilePropertiesResponsePtrType) ToProfilePropertiesResponsePtrOutputWithContext(ctx context.Context) ProfilePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilePropertiesResponsePtrOutput)
}

// Class representing the Traffic Manager profile properties.
type ProfilePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ProfilePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfilePropertiesResponse)(nil)).Elem()
}

func (o ProfilePropertiesResponseOutput) ToProfilePropertiesResponseOutput() ProfilePropertiesResponseOutput {
	return o
}

func (o ProfilePropertiesResponseOutput) ToProfilePropertiesResponseOutputWithContext(ctx context.Context) ProfilePropertiesResponseOutput {
	return o
}

func (o ProfilePropertiesResponseOutput) ToProfilePropertiesResponsePtrOutput() ProfilePropertiesResponsePtrOutput {
	return o.ToProfilePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ProfilePropertiesResponseOutput) ToProfilePropertiesResponsePtrOutputWithContext(ctx context.Context) ProfilePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ProfilePropertiesResponse) *ProfilePropertiesResponse {
		return &v
	}).(ProfilePropertiesResponsePtrOutput)
}

// Gets or sets the DNS settings of the Traffic Manager profile.
func (o ProfilePropertiesResponseOutput) DnsConfig() DnsConfigResponsePtrOutput {
	return o.ApplyT(func(v ProfilePropertiesResponse) *DnsConfigResponse { return v.DnsConfig }).(DnsConfigResponsePtrOutput)
}

// Gets or sets the list of endpoints in the Traffic Manager profile.
func (o ProfilePropertiesResponseOutput) Endpoints() EndpointResponseArrayOutput {
	return o.ApplyT(func(v ProfilePropertiesResponse) []EndpointResponse { return v.Endpoints }).(EndpointResponseArrayOutput)
}

// Gets or sets the endpoint monitoring settings of the Traffic Manager profile.
func (o ProfilePropertiesResponseOutput) MonitorConfig() MonitorConfigResponsePtrOutput {
	return o.ApplyT(func(v ProfilePropertiesResponse) *MonitorConfigResponse { return v.MonitorConfig }).(MonitorConfigResponsePtrOutput)
}

// Gets or sets the status of the Traffic Manager profile.  Possible values are 'Enabled' and 'Disabled'.
func (o ProfilePropertiesResponseOutput) ProfileStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfilePropertiesResponse) *string { return v.ProfileStatus }).(pulumi.StringPtrOutput)
}

// Gets or sets the traffic routing method of the Traffic Manager profile.  Possible values are 'Performance', 'Weighted', or 'Priority'.
func (o ProfilePropertiesResponseOutput) TrafficRoutingMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfilePropertiesResponse) *string { return v.TrafficRoutingMethod }).(pulumi.StringPtrOutput)
}

type ProfilePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ProfilePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfilePropertiesResponse)(nil)).Elem()
}

func (o ProfilePropertiesResponsePtrOutput) ToProfilePropertiesResponsePtrOutput() ProfilePropertiesResponsePtrOutput {
	return o
}

func (o ProfilePropertiesResponsePtrOutput) ToProfilePropertiesResponsePtrOutputWithContext(ctx context.Context) ProfilePropertiesResponsePtrOutput {
	return o
}

func (o ProfilePropertiesResponsePtrOutput) Elem() ProfilePropertiesResponseOutput {
	return o.ApplyT(func(v *ProfilePropertiesResponse) ProfilePropertiesResponse { return *v }).(ProfilePropertiesResponseOutput)
}

// Gets or sets the DNS settings of the Traffic Manager profile.
func (o ProfilePropertiesResponsePtrOutput) DnsConfig() DnsConfigResponsePtrOutput {
	return o.ApplyT(func(v *ProfilePropertiesResponse) *DnsConfigResponse {
		if v == nil {
			return nil
		}
		return v.DnsConfig
	}).(DnsConfigResponsePtrOutput)
}

// Gets or sets the list of endpoints in the Traffic Manager profile.
func (o ProfilePropertiesResponsePtrOutput) Endpoints() EndpointResponseArrayOutput {
	return o.ApplyT(func(v *ProfilePropertiesResponse) []EndpointResponse {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(EndpointResponseArrayOutput)
}

// Gets or sets the endpoint monitoring settings of the Traffic Manager profile.
func (o ProfilePropertiesResponsePtrOutput) MonitorConfig() MonitorConfigResponsePtrOutput {
	return o.ApplyT(func(v *ProfilePropertiesResponse) *MonitorConfigResponse {
		if v == nil {
			return nil
		}
		return v.MonitorConfig
	}).(MonitorConfigResponsePtrOutput)
}

// Gets or sets the status of the Traffic Manager profile.  Possible values are 'Enabled' and 'Disabled'.
func (o ProfilePropertiesResponsePtrOutput) ProfileStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfilePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProfileStatus
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the traffic routing method of the Traffic Manager profile.  Possible values are 'Performance', 'Weighted', or 'Priority'.
func (o ProfilePropertiesResponsePtrOutput) TrafficRoutingMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfilePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.TrafficRoutingMethod
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DnsConfigOutput{})
	pulumi.RegisterOutputType(DnsConfigPtrOutput{})
	pulumi.RegisterOutputType(DnsConfigResponseOutput{})
	pulumi.RegisterOutputType(DnsConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(EndpointTypeOutput{})
	pulumi.RegisterOutputType(EndpointTypeArrayOutput{})
	pulumi.RegisterOutputType(EndpointPropertiesResponseOutput{})
	pulumi.RegisterOutputType(EndpointPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(EndpointResponseOutput{})
	pulumi.RegisterOutputType(EndpointResponseArrayOutput{})
	pulumi.RegisterOutputType(MonitorConfigOutput{})
	pulumi.RegisterOutputType(MonitorConfigPtrOutput{})
	pulumi.RegisterOutputType(MonitorConfigResponseOutput{})
	pulumi.RegisterOutputType(MonitorConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(ProfileTypeOutput{})
	pulumi.RegisterOutputType(ProfilePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ProfilePropertiesResponsePtrOutput{})
}
