// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180501

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Describes a DNS record set (a collection of DNS records with the same name and type).
type RecordSet struct {
	pulumi.CustomResourceState

	// The etag of the record set.
	Etag pulumi.StringPtrOutput `pulumi:"etag"`
	// The name of the record set.
	Name pulumi.StringOutput `pulumi:"name"`
	// The properties of the record set.
	Properties RecordSetPropertiesResponseOutput `pulumi:"properties"`
	// The type of the record set.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewRecordSet registers a new resource with the given unique name, arguments, and options.
func NewRecordSet(ctx *pulumi.Context,
	name string, args *RecordSetArgs, opts ...pulumi.ResourceOption) (*RecordSet, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.RecordType == nil {
		return nil, errors.New("missing required argument 'RecordType'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.ZoneName == nil {
		return nil, errors.New("missing required argument 'ZoneName'")
	}
	if args == nil {
		args = &RecordSetArgs{}
	}
	var resource RecordSet
	err := ctx.RegisterResource("azurerm:network/v20180501:RecordSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecordSet gets an existing RecordSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecordSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecordSetState, opts ...pulumi.ResourceOption) (*RecordSet, error) {
	var resource RecordSet
	err := ctx.ReadResource("azurerm:network/v20180501:RecordSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RecordSet resources.
type recordSetState struct {
	// The etag of the record set.
	Etag *string `pulumi:"etag"`
	// The name of the record set.
	Name *string `pulumi:"name"`
	// The properties of the record set.
	Properties *RecordSetPropertiesResponse `pulumi:"properties"`
	// The type of the record set.
	Type *string `pulumi:"type"`
}

type RecordSetState struct {
	// The etag of the record set.
	Etag pulumi.StringPtrInput
	// The name of the record set.
	Name pulumi.StringPtrInput
	// The properties of the record set.
	Properties RecordSetPropertiesResponsePtrInput
	// The type of the record set.
	Type pulumi.StringPtrInput
}

func (RecordSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*recordSetState)(nil)).Elem()
}

type recordSetArgs struct {
	// The etag of the record set.
	Etag *string `pulumi:"etag"`
	// The name of the record set, relative to the name of the zone.
	Name string `pulumi:"name"`
	// The properties of the record set.
	Properties *RecordSetProperties `pulumi:"properties"`
	// The type of DNS record in this record set. Record sets of type SOA can be updated but not created (they are created when the DNS zone is created).
	RecordType string `pulumi:"recordType"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the DNS zone (without a terminating dot).
	ZoneName string `pulumi:"zoneName"`
}

// The set of arguments for constructing a RecordSet resource.
type RecordSetArgs struct {
	// The etag of the record set.
	Etag pulumi.StringPtrInput
	// The name of the record set, relative to the name of the zone.
	Name pulumi.StringInput
	// The properties of the record set.
	Properties RecordSetPropertiesPtrInput
	// The type of DNS record in this record set. Record sets of type SOA can be updated but not created (they are created when the DNS zone is created).
	RecordType pulumi.StringInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The name of the DNS zone (without a terminating dot).
	ZoneName pulumi.StringInput
}

func (RecordSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recordSetArgs)(nil)).Elem()
}
