// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180501

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// An A record.
type ARecord struct {
	// The IPv4 address of this A record.
	Ipv4Address *string `pulumi:"ipv4Address"`
}

// ARecordInput is an input type that accepts ARecordArgs and ARecordOutput values.
// You can construct a concrete instance of `ARecordInput` via:
//
//          ARecordArgs{...}
type ARecordInput interface {
	pulumi.Input

	ToARecordOutput() ARecordOutput
	ToARecordOutputWithContext(context.Context) ARecordOutput
}

// An A record.
type ARecordArgs struct {
	// The IPv4 address of this A record.
	Ipv4Address pulumi.StringPtrInput `pulumi:"ipv4Address"`
}

func (ARecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ARecord)(nil)).Elem()
}

func (i ARecordArgs) ToARecordOutput() ARecordOutput {
	return i.ToARecordOutputWithContext(context.Background())
}

func (i ARecordArgs) ToARecordOutputWithContext(ctx context.Context) ARecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ARecordOutput)
}

// ARecordArrayInput is an input type that accepts ARecordArray and ARecordArrayOutput values.
// You can construct a concrete instance of `ARecordArrayInput` via:
//
//          ARecordArray{ ARecordArgs{...} }
type ARecordArrayInput interface {
	pulumi.Input

	ToARecordArrayOutput() ARecordArrayOutput
	ToARecordArrayOutputWithContext(context.Context) ARecordArrayOutput
}

type ARecordArray []ARecordInput

func (ARecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ARecord)(nil)).Elem()
}

func (i ARecordArray) ToARecordArrayOutput() ARecordArrayOutput {
	return i.ToARecordArrayOutputWithContext(context.Background())
}

func (i ARecordArray) ToARecordArrayOutputWithContext(ctx context.Context) ARecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ARecordArrayOutput)
}

// An A record.
type ARecordOutput struct{ *pulumi.OutputState }

func (ARecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ARecord)(nil)).Elem()
}

func (o ARecordOutput) ToARecordOutput() ARecordOutput {
	return o
}

func (o ARecordOutput) ToARecordOutputWithContext(ctx context.Context) ARecordOutput {
	return o
}

// The IPv4 address of this A record.
func (o ARecordOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ARecord) *string { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

type ARecordArrayOutput struct{ *pulumi.OutputState }

func (ARecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ARecord)(nil)).Elem()
}

func (o ARecordArrayOutput) ToARecordArrayOutput() ARecordArrayOutput {
	return o
}

func (o ARecordArrayOutput) ToARecordArrayOutputWithContext(ctx context.Context) ARecordArrayOutput {
	return o
}

func (o ARecordArrayOutput) Index(i pulumi.IntInput) ARecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ARecord {
		return vs[0].([]ARecord)[vs[1].(int)]
	}).(ARecordOutput)
}

// An A record.
type ARecordResponse struct {
	// The IPv4 address of this A record.
	Ipv4Address *string `pulumi:"ipv4Address"`
}

// ARecordResponseInput is an input type that accepts ARecordResponseArgs and ARecordResponseOutput values.
// You can construct a concrete instance of `ARecordResponseInput` via:
//
//          ARecordResponseArgs{...}
type ARecordResponseInput interface {
	pulumi.Input

	ToARecordResponseOutput() ARecordResponseOutput
	ToARecordResponseOutputWithContext(context.Context) ARecordResponseOutput
}

// An A record.
type ARecordResponseArgs struct {
	// The IPv4 address of this A record.
	Ipv4Address pulumi.StringPtrInput `pulumi:"ipv4Address"`
}

func (ARecordResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ARecordResponse)(nil)).Elem()
}

func (i ARecordResponseArgs) ToARecordResponseOutput() ARecordResponseOutput {
	return i.ToARecordResponseOutputWithContext(context.Background())
}

func (i ARecordResponseArgs) ToARecordResponseOutputWithContext(ctx context.Context) ARecordResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ARecordResponseOutput)
}

// ARecordResponseArrayInput is an input type that accepts ARecordResponseArray and ARecordResponseArrayOutput values.
// You can construct a concrete instance of `ARecordResponseArrayInput` via:
//
//          ARecordResponseArray{ ARecordResponseArgs{...} }
type ARecordResponseArrayInput interface {
	pulumi.Input

	ToARecordResponseArrayOutput() ARecordResponseArrayOutput
	ToARecordResponseArrayOutputWithContext(context.Context) ARecordResponseArrayOutput
}

type ARecordResponseArray []ARecordResponseInput

func (ARecordResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ARecordResponse)(nil)).Elem()
}

func (i ARecordResponseArray) ToARecordResponseArrayOutput() ARecordResponseArrayOutput {
	return i.ToARecordResponseArrayOutputWithContext(context.Background())
}

func (i ARecordResponseArray) ToARecordResponseArrayOutputWithContext(ctx context.Context) ARecordResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ARecordResponseArrayOutput)
}

// An A record.
type ARecordResponseOutput struct{ *pulumi.OutputState }

func (ARecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ARecordResponse)(nil)).Elem()
}

func (o ARecordResponseOutput) ToARecordResponseOutput() ARecordResponseOutput {
	return o
}

func (o ARecordResponseOutput) ToARecordResponseOutputWithContext(ctx context.Context) ARecordResponseOutput {
	return o
}

// The IPv4 address of this A record.
func (o ARecordResponseOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ARecordResponse) *string { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

type ARecordResponseArrayOutput struct{ *pulumi.OutputState }

func (ARecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ARecordResponse)(nil)).Elem()
}

func (o ARecordResponseArrayOutput) ToARecordResponseArrayOutput() ARecordResponseArrayOutput {
	return o
}

func (o ARecordResponseArrayOutput) ToARecordResponseArrayOutputWithContext(ctx context.Context) ARecordResponseArrayOutput {
	return o
}

func (o ARecordResponseArrayOutput) Index(i pulumi.IntInput) ARecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ARecordResponse {
		return vs[0].([]ARecordResponse)[vs[1].(int)]
	}).(ARecordResponseOutput)
}

// An AAAA record.
type AaaaRecord struct {
	// The IPv6 address of this AAAA record.
	Ipv6Address *string `pulumi:"ipv6Address"`
}

// AaaaRecordInput is an input type that accepts AaaaRecordArgs and AaaaRecordOutput values.
// You can construct a concrete instance of `AaaaRecordInput` via:
//
//          AaaaRecordArgs{...}
type AaaaRecordInput interface {
	pulumi.Input

	ToAaaaRecordOutput() AaaaRecordOutput
	ToAaaaRecordOutputWithContext(context.Context) AaaaRecordOutput
}

// An AAAA record.
type AaaaRecordArgs struct {
	// The IPv6 address of this AAAA record.
	Ipv6Address pulumi.StringPtrInput `pulumi:"ipv6Address"`
}

func (AaaaRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaaRecord)(nil)).Elem()
}

func (i AaaaRecordArgs) ToAaaaRecordOutput() AaaaRecordOutput {
	return i.ToAaaaRecordOutputWithContext(context.Background())
}

func (i AaaaRecordArgs) ToAaaaRecordOutputWithContext(ctx context.Context) AaaaRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaaRecordOutput)
}

// AaaaRecordArrayInput is an input type that accepts AaaaRecordArray and AaaaRecordArrayOutput values.
// You can construct a concrete instance of `AaaaRecordArrayInput` via:
//
//          AaaaRecordArray{ AaaaRecordArgs{...} }
type AaaaRecordArrayInput interface {
	pulumi.Input

	ToAaaaRecordArrayOutput() AaaaRecordArrayOutput
	ToAaaaRecordArrayOutputWithContext(context.Context) AaaaRecordArrayOutput
}

type AaaaRecordArray []AaaaRecordInput

func (AaaaRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaaRecord)(nil)).Elem()
}

func (i AaaaRecordArray) ToAaaaRecordArrayOutput() AaaaRecordArrayOutput {
	return i.ToAaaaRecordArrayOutputWithContext(context.Background())
}

func (i AaaaRecordArray) ToAaaaRecordArrayOutputWithContext(ctx context.Context) AaaaRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaaRecordArrayOutput)
}

// An AAAA record.
type AaaaRecordOutput struct{ *pulumi.OutputState }

func (AaaaRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaaRecord)(nil)).Elem()
}

func (o AaaaRecordOutput) ToAaaaRecordOutput() AaaaRecordOutput {
	return o
}

func (o AaaaRecordOutput) ToAaaaRecordOutputWithContext(ctx context.Context) AaaaRecordOutput {
	return o
}

// The IPv6 address of this AAAA record.
func (o AaaaRecordOutput) Ipv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AaaaRecord) *string { return v.Ipv6Address }).(pulumi.StringPtrOutput)
}

type AaaaRecordArrayOutput struct{ *pulumi.OutputState }

func (AaaaRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaaRecord)(nil)).Elem()
}

func (o AaaaRecordArrayOutput) ToAaaaRecordArrayOutput() AaaaRecordArrayOutput {
	return o
}

func (o AaaaRecordArrayOutput) ToAaaaRecordArrayOutputWithContext(ctx context.Context) AaaaRecordArrayOutput {
	return o
}

func (o AaaaRecordArrayOutput) Index(i pulumi.IntInput) AaaaRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AaaaRecord {
		return vs[0].([]AaaaRecord)[vs[1].(int)]
	}).(AaaaRecordOutput)
}

// An AAAA record.
type AaaaRecordResponse struct {
	// The IPv6 address of this AAAA record.
	Ipv6Address *string `pulumi:"ipv6Address"`
}

// AaaaRecordResponseInput is an input type that accepts AaaaRecordResponseArgs and AaaaRecordResponseOutput values.
// You can construct a concrete instance of `AaaaRecordResponseInput` via:
//
//          AaaaRecordResponseArgs{...}
type AaaaRecordResponseInput interface {
	pulumi.Input

	ToAaaaRecordResponseOutput() AaaaRecordResponseOutput
	ToAaaaRecordResponseOutputWithContext(context.Context) AaaaRecordResponseOutput
}

// An AAAA record.
type AaaaRecordResponseArgs struct {
	// The IPv6 address of this AAAA record.
	Ipv6Address pulumi.StringPtrInput `pulumi:"ipv6Address"`
}

func (AaaaRecordResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaaRecordResponse)(nil)).Elem()
}

func (i AaaaRecordResponseArgs) ToAaaaRecordResponseOutput() AaaaRecordResponseOutput {
	return i.ToAaaaRecordResponseOutputWithContext(context.Background())
}

func (i AaaaRecordResponseArgs) ToAaaaRecordResponseOutputWithContext(ctx context.Context) AaaaRecordResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaaRecordResponseOutput)
}

// AaaaRecordResponseArrayInput is an input type that accepts AaaaRecordResponseArray and AaaaRecordResponseArrayOutput values.
// You can construct a concrete instance of `AaaaRecordResponseArrayInput` via:
//
//          AaaaRecordResponseArray{ AaaaRecordResponseArgs{...} }
type AaaaRecordResponseArrayInput interface {
	pulumi.Input

	ToAaaaRecordResponseArrayOutput() AaaaRecordResponseArrayOutput
	ToAaaaRecordResponseArrayOutputWithContext(context.Context) AaaaRecordResponseArrayOutput
}

type AaaaRecordResponseArray []AaaaRecordResponseInput

func (AaaaRecordResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaaRecordResponse)(nil)).Elem()
}

func (i AaaaRecordResponseArray) ToAaaaRecordResponseArrayOutput() AaaaRecordResponseArrayOutput {
	return i.ToAaaaRecordResponseArrayOutputWithContext(context.Background())
}

func (i AaaaRecordResponseArray) ToAaaaRecordResponseArrayOutputWithContext(ctx context.Context) AaaaRecordResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaaRecordResponseArrayOutput)
}

// An AAAA record.
type AaaaRecordResponseOutput struct{ *pulumi.OutputState }

func (AaaaRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaaRecordResponse)(nil)).Elem()
}

func (o AaaaRecordResponseOutput) ToAaaaRecordResponseOutput() AaaaRecordResponseOutput {
	return o
}

func (o AaaaRecordResponseOutput) ToAaaaRecordResponseOutputWithContext(ctx context.Context) AaaaRecordResponseOutput {
	return o
}

// The IPv6 address of this AAAA record.
func (o AaaaRecordResponseOutput) Ipv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AaaaRecordResponse) *string { return v.Ipv6Address }).(pulumi.StringPtrOutput)
}

type AaaaRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (AaaaRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaaRecordResponse)(nil)).Elem()
}

func (o AaaaRecordResponseArrayOutput) ToAaaaRecordResponseArrayOutput() AaaaRecordResponseArrayOutput {
	return o
}

func (o AaaaRecordResponseArrayOutput) ToAaaaRecordResponseArrayOutputWithContext(ctx context.Context) AaaaRecordResponseArrayOutput {
	return o
}

func (o AaaaRecordResponseArrayOutput) Index(i pulumi.IntInput) AaaaRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AaaaRecordResponse {
		return vs[0].([]AaaaRecordResponse)[vs[1].(int)]
	}).(AaaaRecordResponseOutput)
}

// A CAA record.
type CaaRecord struct {
	// The flags for this CAA record as an integer between 0 and 255.
	Flags *int `pulumi:"flags"`
	// The tag for this CAA record.
	Tag *string `pulumi:"tag"`
	// The value for this CAA record.
	Value *string `pulumi:"value"`
}

// CaaRecordInput is an input type that accepts CaaRecordArgs and CaaRecordOutput values.
// You can construct a concrete instance of `CaaRecordInput` via:
//
//          CaaRecordArgs{...}
type CaaRecordInput interface {
	pulumi.Input

	ToCaaRecordOutput() CaaRecordOutput
	ToCaaRecordOutputWithContext(context.Context) CaaRecordOutput
}

// A CAA record.
type CaaRecordArgs struct {
	// The flags for this CAA record as an integer between 0 and 255.
	Flags pulumi.IntPtrInput `pulumi:"flags"`
	// The tag for this CAA record.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The value for this CAA record.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CaaRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CaaRecord)(nil)).Elem()
}

func (i CaaRecordArgs) ToCaaRecordOutput() CaaRecordOutput {
	return i.ToCaaRecordOutputWithContext(context.Background())
}

func (i CaaRecordArgs) ToCaaRecordOutputWithContext(ctx context.Context) CaaRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaaRecordOutput)
}

// CaaRecordArrayInput is an input type that accepts CaaRecordArray and CaaRecordArrayOutput values.
// You can construct a concrete instance of `CaaRecordArrayInput` via:
//
//          CaaRecordArray{ CaaRecordArgs{...} }
type CaaRecordArrayInput interface {
	pulumi.Input

	ToCaaRecordArrayOutput() CaaRecordArrayOutput
	ToCaaRecordArrayOutputWithContext(context.Context) CaaRecordArrayOutput
}

type CaaRecordArray []CaaRecordInput

func (CaaRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CaaRecord)(nil)).Elem()
}

func (i CaaRecordArray) ToCaaRecordArrayOutput() CaaRecordArrayOutput {
	return i.ToCaaRecordArrayOutputWithContext(context.Background())
}

func (i CaaRecordArray) ToCaaRecordArrayOutputWithContext(ctx context.Context) CaaRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaaRecordArrayOutput)
}

// A CAA record.
type CaaRecordOutput struct{ *pulumi.OutputState }

func (CaaRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CaaRecord)(nil)).Elem()
}

func (o CaaRecordOutput) ToCaaRecordOutput() CaaRecordOutput {
	return o
}

func (o CaaRecordOutput) ToCaaRecordOutputWithContext(ctx context.Context) CaaRecordOutput {
	return o
}

// The flags for this CAA record as an integer between 0 and 255.
func (o CaaRecordOutput) Flags() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CaaRecord) *int { return v.Flags }).(pulumi.IntPtrOutput)
}

// The tag for this CAA record.
func (o CaaRecordOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaaRecord) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The value for this CAA record.
func (o CaaRecordOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaaRecord) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CaaRecordArrayOutput struct{ *pulumi.OutputState }

func (CaaRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CaaRecord)(nil)).Elem()
}

func (o CaaRecordArrayOutput) ToCaaRecordArrayOutput() CaaRecordArrayOutput {
	return o
}

func (o CaaRecordArrayOutput) ToCaaRecordArrayOutputWithContext(ctx context.Context) CaaRecordArrayOutput {
	return o
}

func (o CaaRecordArrayOutput) Index(i pulumi.IntInput) CaaRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CaaRecord {
		return vs[0].([]CaaRecord)[vs[1].(int)]
	}).(CaaRecordOutput)
}

// A CAA record.
type CaaRecordResponse struct {
	// The flags for this CAA record as an integer between 0 and 255.
	Flags *int `pulumi:"flags"`
	// The tag for this CAA record.
	Tag *string `pulumi:"tag"`
	// The value for this CAA record.
	Value *string `pulumi:"value"`
}

// CaaRecordResponseInput is an input type that accepts CaaRecordResponseArgs and CaaRecordResponseOutput values.
// You can construct a concrete instance of `CaaRecordResponseInput` via:
//
//          CaaRecordResponseArgs{...}
type CaaRecordResponseInput interface {
	pulumi.Input

	ToCaaRecordResponseOutput() CaaRecordResponseOutput
	ToCaaRecordResponseOutputWithContext(context.Context) CaaRecordResponseOutput
}

// A CAA record.
type CaaRecordResponseArgs struct {
	// The flags for this CAA record as an integer between 0 and 255.
	Flags pulumi.IntPtrInput `pulumi:"flags"`
	// The tag for this CAA record.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The value for this CAA record.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CaaRecordResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CaaRecordResponse)(nil)).Elem()
}

func (i CaaRecordResponseArgs) ToCaaRecordResponseOutput() CaaRecordResponseOutput {
	return i.ToCaaRecordResponseOutputWithContext(context.Background())
}

func (i CaaRecordResponseArgs) ToCaaRecordResponseOutputWithContext(ctx context.Context) CaaRecordResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaaRecordResponseOutput)
}

// CaaRecordResponseArrayInput is an input type that accepts CaaRecordResponseArray and CaaRecordResponseArrayOutput values.
// You can construct a concrete instance of `CaaRecordResponseArrayInput` via:
//
//          CaaRecordResponseArray{ CaaRecordResponseArgs{...} }
type CaaRecordResponseArrayInput interface {
	pulumi.Input

	ToCaaRecordResponseArrayOutput() CaaRecordResponseArrayOutput
	ToCaaRecordResponseArrayOutputWithContext(context.Context) CaaRecordResponseArrayOutput
}

type CaaRecordResponseArray []CaaRecordResponseInput

func (CaaRecordResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CaaRecordResponse)(nil)).Elem()
}

func (i CaaRecordResponseArray) ToCaaRecordResponseArrayOutput() CaaRecordResponseArrayOutput {
	return i.ToCaaRecordResponseArrayOutputWithContext(context.Background())
}

func (i CaaRecordResponseArray) ToCaaRecordResponseArrayOutputWithContext(ctx context.Context) CaaRecordResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaaRecordResponseArrayOutput)
}

// A CAA record.
type CaaRecordResponseOutput struct{ *pulumi.OutputState }

func (CaaRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CaaRecordResponse)(nil)).Elem()
}

func (o CaaRecordResponseOutput) ToCaaRecordResponseOutput() CaaRecordResponseOutput {
	return o
}

func (o CaaRecordResponseOutput) ToCaaRecordResponseOutputWithContext(ctx context.Context) CaaRecordResponseOutput {
	return o
}

// The flags for this CAA record as an integer between 0 and 255.
func (o CaaRecordResponseOutput) Flags() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CaaRecordResponse) *int { return v.Flags }).(pulumi.IntPtrOutput)
}

// The tag for this CAA record.
func (o CaaRecordResponseOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaaRecordResponse) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The value for this CAA record.
func (o CaaRecordResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaaRecordResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CaaRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (CaaRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CaaRecordResponse)(nil)).Elem()
}

func (o CaaRecordResponseArrayOutput) ToCaaRecordResponseArrayOutput() CaaRecordResponseArrayOutput {
	return o
}

func (o CaaRecordResponseArrayOutput) ToCaaRecordResponseArrayOutputWithContext(ctx context.Context) CaaRecordResponseArrayOutput {
	return o
}

func (o CaaRecordResponseArrayOutput) Index(i pulumi.IntInput) CaaRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CaaRecordResponse {
		return vs[0].([]CaaRecordResponse)[vs[1].(int)]
	}).(CaaRecordResponseOutput)
}

// A CNAME record.
type CnameRecord struct {
	// The canonical name for this CNAME record.
	Cname *string `pulumi:"cname"`
}

// CnameRecordInput is an input type that accepts CnameRecordArgs and CnameRecordOutput values.
// You can construct a concrete instance of `CnameRecordInput` via:
//
//          CnameRecordArgs{...}
type CnameRecordInput interface {
	pulumi.Input

	ToCnameRecordOutput() CnameRecordOutput
	ToCnameRecordOutputWithContext(context.Context) CnameRecordOutput
}

// A CNAME record.
type CnameRecordArgs struct {
	// The canonical name for this CNAME record.
	Cname pulumi.StringPtrInput `pulumi:"cname"`
}

func (CnameRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CnameRecord)(nil)).Elem()
}

func (i CnameRecordArgs) ToCnameRecordOutput() CnameRecordOutput {
	return i.ToCnameRecordOutputWithContext(context.Background())
}

func (i CnameRecordArgs) ToCnameRecordOutputWithContext(ctx context.Context) CnameRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CnameRecordOutput)
}

func (i CnameRecordArgs) ToCnameRecordPtrOutput() CnameRecordPtrOutput {
	return i.ToCnameRecordPtrOutputWithContext(context.Background())
}

func (i CnameRecordArgs) ToCnameRecordPtrOutputWithContext(ctx context.Context) CnameRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CnameRecordOutput).ToCnameRecordPtrOutputWithContext(ctx)
}

// CnameRecordPtrInput is an input type that accepts CnameRecordArgs, CnameRecordPtr and CnameRecordPtrOutput values.
// You can construct a concrete instance of `CnameRecordPtrInput` via:
//
//          CnameRecordArgs{...}
//
//  or:
//
//          nil
type CnameRecordPtrInput interface {
	pulumi.Input

	ToCnameRecordPtrOutput() CnameRecordPtrOutput
	ToCnameRecordPtrOutputWithContext(context.Context) CnameRecordPtrOutput
}

type cnameRecordPtrType CnameRecordArgs

func CnameRecordPtr(v *CnameRecordArgs) CnameRecordPtrInput {
	return (*cnameRecordPtrType)(v)
}

func (*cnameRecordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CnameRecord)(nil)).Elem()
}

func (i *cnameRecordPtrType) ToCnameRecordPtrOutput() CnameRecordPtrOutput {
	return i.ToCnameRecordPtrOutputWithContext(context.Background())
}

func (i *cnameRecordPtrType) ToCnameRecordPtrOutputWithContext(ctx context.Context) CnameRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CnameRecordPtrOutput)
}

// A CNAME record.
type CnameRecordOutput struct{ *pulumi.OutputState }

func (CnameRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CnameRecord)(nil)).Elem()
}

func (o CnameRecordOutput) ToCnameRecordOutput() CnameRecordOutput {
	return o
}

func (o CnameRecordOutput) ToCnameRecordOutputWithContext(ctx context.Context) CnameRecordOutput {
	return o
}

func (o CnameRecordOutput) ToCnameRecordPtrOutput() CnameRecordPtrOutput {
	return o.ToCnameRecordPtrOutputWithContext(context.Background())
}

func (o CnameRecordOutput) ToCnameRecordPtrOutputWithContext(ctx context.Context) CnameRecordPtrOutput {
	return o.ApplyT(func(v CnameRecord) *CnameRecord {
		return &v
	}).(CnameRecordPtrOutput)
}

// The canonical name for this CNAME record.
func (o CnameRecordOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CnameRecord) *string { return v.Cname }).(pulumi.StringPtrOutput)
}

type CnameRecordPtrOutput struct{ *pulumi.OutputState }

func (CnameRecordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CnameRecord)(nil)).Elem()
}

func (o CnameRecordPtrOutput) ToCnameRecordPtrOutput() CnameRecordPtrOutput {
	return o
}

func (o CnameRecordPtrOutput) ToCnameRecordPtrOutputWithContext(ctx context.Context) CnameRecordPtrOutput {
	return o
}

func (o CnameRecordPtrOutput) Elem() CnameRecordOutput {
	return o.ApplyT(func(v *CnameRecord) CnameRecord { return *v }).(CnameRecordOutput)
}

// The canonical name for this CNAME record.
func (o CnameRecordPtrOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CnameRecord) *string {
		if v == nil {
			return nil
		}
		return v.Cname
	}).(pulumi.StringPtrOutput)
}

// A CNAME record.
type CnameRecordResponse struct {
	// The canonical name for this CNAME record.
	Cname *string `pulumi:"cname"`
}

// CnameRecordResponseInput is an input type that accepts CnameRecordResponseArgs and CnameRecordResponseOutput values.
// You can construct a concrete instance of `CnameRecordResponseInput` via:
//
//          CnameRecordResponseArgs{...}
type CnameRecordResponseInput interface {
	pulumi.Input

	ToCnameRecordResponseOutput() CnameRecordResponseOutput
	ToCnameRecordResponseOutputWithContext(context.Context) CnameRecordResponseOutput
}

// A CNAME record.
type CnameRecordResponseArgs struct {
	// The canonical name for this CNAME record.
	Cname pulumi.StringPtrInput `pulumi:"cname"`
}

func (CnameRecordResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CnameRecordResponse)(nil)).Elem()
}

func (i CnameRecordResponseArgs) ToCnameRecordResponseOutput() CnameRecordResponseOutput {
	return i.ToCnameRecordResponseOutputWithContext(context.Background())
}

func (i CnameRecordResponseArgs) ToCnameRecordResponseOutputWithContext(ctx context.Context) CnameRecordResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CnameRecordResponseOutput)
}

func (i CnameRecordResponseArgs) ToCnameRecordResponsePtrOutput() CnameRecordResponsePtrOutput {
	return i.ToCnameRecordResponsePtrOutputWithContext(context.Background())
}

func (i CnameRecordResponseArgs) ToCnameRecordResponsePtrOutputWithContext(ctx context.Context) CnameRecordResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CnameRecordResponseOutput).ToCnameRecordResponsePtrOutputWithContext(ctx)
}

// CnameRecordResponsePtrInput is an input type that accepts CnameRecordResponseArgs, CnameRecordResponsePtr and CnameRecordResponsePtrOutput values.
// You can construct a concrete instance of `CnameRecordResponsePtrInput` via:
//
//          CnameRecordResponseArgs{...}
//
//  or:
//
//          nil
type CnameRecordResponsePtrInput interface {
	pulumi.Input

	ToCnameRecordResponsePtrOutput() CnameRecordResponsePtrOutput
	ToCnameRecordResponsePtrOutputWithContext(context.Context) CnameRecordResponsePtrOutput
}

type cnameRecordResponsePtrType CnameRecordResponseArgs

func CnameRecordResponsePtr(v *CnameRecordResponseArgs) CnameRecordResponsePtrInput {
	return (*cnameRecordResponsePtrType)(v)
}

func (*cnameRecordResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CnameRecordResponse)(nil)).Elem()
}

func (i *cnameRecordResponsePtrType) ToCnameRecordResponsePtrOutput() CnameRecordResponsePtrOutput {
	return i.ToCnameRecordResponsePtrOutputWithContext(context.Background())
}

func (i *cnameRecordResponsePtrType) ToCnameRecordResponsePtrOutputWithContext(ctx context.Context) CnameRecordResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CnameRecordResponsePtrOutput)
}

// A CNAME record.
type CnameRecordResponseOutput struct{ *pulumi.OutputState }

func (CnameRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CnameRecordResponse)(nil)).Elem()
}

func (o CnameRecordResponseOutput) ToCnameRecordResponseOutput() CnameRecordResponseOutput {
	return o
}

func (o CnameRecordResponseOutput) ToCnameRecordResponseOutputWithContext(ctx context.Context) CnameRecordResponseOutput {
	return o
}

func (o CnameRecordResponseOutput) ToCnameRecordResponsePtrOutput() CnameRecordResponsePtrOutput {
	return o.ToCnameRecordResponsePtrOutputWithContext(context.Background())
}

func (o CnameRecordResponseOutput) ToCnameRecordResponsePtrOutputWithContext(ctx context.Context) CnameRecordResponsePtrOutput {
	return o.ApplyT(func(v CnameRecordResponse) *CnameRecordResponse {
		return &v
	}).(CnameRecordResponsePtrOutput)
}

// The canonical name for this CNAME record.
func (o CnameRecordResponseOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CnameRecordResponse) *string { return v.Cname }).(pulumi.StringPtrOutput)
}

type CnameRecordResponsePtrOutput struct{ *pulumi.OutputState }

func (CnameRecordResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CnameRecordResponse)(nil)).Elem()
}

func (o CnameRecordResponsePtrOutput) ToCnameRecordResponsePtrOutput() CnameRecordResponsePtrOutput {
	return o
}

func (o CnameRecordResponsePtrOutput) ToCnameRecordResponsePtrOutputWithContext(ctx context.Context) CnameRecordResponsePtrOutput {
	return o
}

func (o CnameRecordResponsePtrOutput) Elem() CnameRecordResponseOutput {
	return o.ApplyT(func(v *CnameRecordResponse) CnameRecordResponse { return *v }).(CnameRecordResponseOutput)
}

// The canonical name for this CNAME record.
func (o CnameRecordResponsePtrOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CnameRecordResponse) *string {
		if v == nil {
			return nil
		}
		return v.Cname
	}).(pulumi.StringPtrOutput)
}

// An MX record.
type MxRecord struct {
	// The domain name of the mail host for this MX record.
	Exchange *string `pulumi:"exchange"`
	// The preference value for this MX record.
	Preference *int `pulumi:"preference"`
}

// MxRecordInput is an input type that accepts MxRecordArgs and MxRecordOutput values.
// You can construct a concrete instance of `MxRecordInput` via:
//
//          MxRecordArgs{...}
type MxRecordInput interface {
	pulumi.Input

	ToMxRecordOutput() MxRecordOutput
	ToMxRecordOutputWithContext(context.Context) MxRecordOutput
}

// An MX record.
type MxRecordArgs struct {
	// The domain name of the mail host for this MX record.
	Exchange pulumi.StringPtrInput `pulumi:"exchange"`
	// The preference value for this MX record.
	Preference pulumi.IntPtrInput `pulumi:"preference"`
}

func (MxRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MxRecord)(nil)).Elem()
}

func (i MxRecordArgs) ToMxRecordOutput() MxRecordOutput {
	return i.ToMxRecordOutputWithContext(context.Background())
}

func (i MxRecordArgs) ToMxRecordOutputWithContext(ctx context.Context) MxRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MxRecordOutput)
}

// MxRecordArrayInput is an input type that accepts MxRecordArray and MxRecordArrayOutput values.
// You can construct a concrete instance of `MxRecordArrayInput` via:
//
//          MxRecordArray{ MxRecordArgs{...} }
type MxRecordArrayInput interface {
	pulumi.Input

	ToMxRecordArrayOutput() MxRecordArrayOutput
	ToMxRecordArrayOutputWithContext(context.Context) MxRecordArrayOutput
}

type MxRecordArray []MxRecordInput

func (MxRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MxRecord)(nil)).Elem()
}

func (i MxRecordArray) ToMxRecordArrayOutput() MxRecordArrayOutput {
	return i.ToMxRecordArrayOutputWithContext(context.Background())
}

func (i MxRecordArray) ToMxRecordArrayOutputWithContext(ctx context.Context) MxRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MxRecordArrayOutput)
}

// An MX record.
type MxRecordOutput struct{ *pulumi.OutputState }

func (MxRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MxRecord)(nil)).Elem()
}

func (o MxRecordOutput) ToMxRecordOutput() MxRecordOutput {
	return o
}

func (o MxRecordOutput) ToMxRecordOutputWithContext(ctx context.Context) MxRecordOutput {
	return o
}

// The domain name of the mail host for this MX record.
func (o MxRecordOutput) Exchange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MxRecord) *string { return v.Exchange }).(pulumi.StringPtrOutput)
}

// The preference value for this MX record.
func (o MxRecordOutput) Preference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MxRecord) *int { return v.Preference }).(pulumi.IntPtrOutput)
}

type MxRecordArrayOutput struct{ *pulumi.OutputState }

func (MxRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MxRecord)(nil)).Elem()
}

func (o MxRecordArrayOutput) ToMxRecordArrayOutput() MxRecordArrayOutput {
	return o
}

func (o MxRecordArrayOutput) ToMxRecordArrayOutputWithContext(ctx context.Context) MxRecordArrayOutput {
	return o
}

func (o MxRecordArrayOutput) Index(i pulumi.IntInput) MxRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MxRecord {
		return vs[0].([]MxRecord)[vs[1].(int)]
	}).(MxRecordOutput)
}

// An MX record.
type MxRecordResponse struct {
	// The domain name of the mail host for this MX record.
	Exchange *string `pulumi:"exchange"`
	// The preference value for this MX record.
	Preference *int `pulumi:"preference"`
}

// MxRecordResponseInput is an input type that accepts MxRecordResponseArgs and MxRecordResponseOutput values.
// You can construct a concrete instance of `MxRecordResponseInput` via:
//
//          MxRecordResponseArgs{...}
type MxRecordResponseInput interface {
	pulumi.Input

	ToMxRecordResponseOutput() MxRecordResponseOutput
	ToMxRecordResponseOutputWithContext(context.Context) MxRecordResponseOutput
}

// An MX record.
type MxRecordResponseArgs struct {
	// The domain name of the mail host for this MX record.
	Exchange pulumi.StringPtrInput `pulumi:"exchange"`
	// The preference value for this MX record.
	Preference pulumi.IntPtrInput `pulumi:"preference"`
}

func (MxRecordResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MxRecordResponse)(nil)).Elem()
}

func (i MxRecordResponseArgs) ToMxRecordResponseOutput() MxRecordResponseOutput {
	return i.ToMxRecordResponseOutputWithContext(context.Background())
}

func (i MxRecordResponseArgs) ToMxRecordResponseOutputWithContext(ctx context.Context) MxRecordResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MxRecordResponseOutput)
}

// MxRecordResponseArrayInput is an input type that accepts MxRecordResponseArray and MxRecordResponseArrayOutput values.
// You can construct a concrete instance of `MxRecordResponseArrayInput` via:
//
//          MxRecordResponseArray{ MxRecordResponseArgs{...} }
type MxRecordResponseArrayInput interface {
	pulumi.Input

	ToMxRecordResponseArrayOutput() MxRecordResponseArrayOutput
	ToMxRecordResponseArrayOutputWithContext(context.Context) MxRecordResponseArrayOutput
}

type MxRecordResponseArray []MxRecordResponseInput

func (MxRecordResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MxRecordResponse)(nil)).Elem()
}

func (i MxRecordResponseArray) ToMxRecordResponseArrayOutput() MxRecordResponseArrayOutput {
	return i.ToMxRecordResponseArrayOutputWithContext(context.Background())
}

func (i MxRecordResponseArray) ToMxRecordResponseArrayOutputWithContext(ctx context.Context) MxRecordResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MxRecordResponseArrayOutput)
}

// An MX record.
type MxRecordResponseOutput struct{ *pulumi.OutputState }

func (MxRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MxRecordResponse)(nil)).Elem()
}

func (o MxRecordResponseOutput) ToMxRecordResponseOutput() MxRecordResponseOutput {
	return o
}

func (o MxRecordResponseOutput) ToMxRecordResponseOutputWithContext(ctx context.Context) MxRecordResponseOutput {
	return o
}

// The domain name of the mail host for this MX record.
func (o MxRecordResponseOutput) Exchange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MxRecordResponse) *string { return v.Exchange }).(pulumi.StringPtrOutput)
}

// The preference value for this MX record.
func (o MxRecordResponseOutput) Preference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MxRecordResponse) *int { return v.Preference }).(pulumi.IntPtrOutput)
}

type MxRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (MxRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MxRecordResponse)(nil)).Elem()
}

func (o MxRecordResponseArrayOutput) ToMxRecordResponseArrayOutput() MxRecordResponseArrayOutput {
	return o
}

func (o MxRecordResponseArrayOutput) ToMxRecordResponseArrayOutputWithContext(ctx context.Context) MxRecordResponseArrayOutput {
	return o
}

func (o MxRecordResponseArrayOutput) Index(i pulumi.IntInput) MxRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MxRecordResponse {
		return vs[0].([]MxRecordResponse)[vs[1].(int)]
	}).(MxRecordResponseOutput)
}

// An NS record.
type NsRecord struct {
	// The name server name for this NS record.
	Nsdname *string `pulumi:"nsdname"`
}

// NsRecordInput is an input type that accepts NsRecordArgs and NsRecordOutput values.
// You can construct a concrete instance of `NsRecordInput` via:
//
//          NsRecordArgs{...}
type NsRecordInput interface {
	pulumi.Input

	ToNsRecordOutput() NsRecordOutput
	ToNsRecordOutputWithContext(context.Context) NsRecordOutput
}

// An NS record.
type NsRecordArgs struct {
	// The name server name for this NS record.
	Nsdname pulumi.StringPtrInput `pulumi:"nsdname"`
}

func (NsRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NsRecord)(nil)).Elem()
}

func (i NsRecordArgs) ToNsRecordOutput() NsRecordOutput {
	return i.ToNsRecordOutputWithContext(context.Background())
}

func (i NsRecordArgs) ToNsRecordOutputWithContext(ctx context.Context) NsRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsRecordOutput)
}

// NsRecordArrayInput is an input type that accepts NsRecordArray and NsRecordArrayOutput values.
// You can construct a concrete instance of `NsRecordArrayInput` via:
//
//          NsRecordArray{ NsRecordArgs{...} }
type NsRecordArrayInput interface {
	pulumi.Input

	ToNsRecordArrayOutput() NsRecordArrayOutput
	ToNsRecordArrayOutputWithContext(context.Context) NsRecordArrayOutput
}

type NsRecordArray []NsRecordInput

func (NsRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsRecord)(nil)).Elem()
}

func (i NsRecordArray) ToNsRecordArrayOutput() NsRecordArrayOutput {
	return i.ToNsRecordArrayOutputWithContext(context.Background())
}

func (i NsRecordArray) ToNsRecordArrayOutputWithContext(ctx context.Context) NsRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsRecordArrayOutput)
}

// An NS record.
type NsRecordOutput struct{ *pulumi.OutputState }

func (NsRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NsRecord)(nil)).Elem()
}

func (o NsRecordOutput) ToNsRecordOutput() NsRecordOutput {
	return o
}

func (o NsRecordOutput) ToNsRecordOutputWithContext(ctx context.Context) NsRecordOutput {
	return o
}

// The name server name for this NS record.
func (o NsRecordOutput) Nsdname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NsRecord) *string { return v.Nsdname }).(pulumi.StringPtrOutput)
}

type NsRecordArrayOutput struct{ *pulumi.OutputState }

func (NsRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsRecord)(nil)).Elem()
}

func (o NsRecordArrayOutput) ToNsRecordArrayOutput() NsRecordArrayOutput {
	return o
}

func (o NsRecordArrayOutput) ToNsRecordArrayOutputWithContext(ctx context.Context) NsRecordArrayOutput {
	return o
}

func (o NsRecordArrayOutput) Index(i pulumi.IntInput) NsRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NsRecord {
		return vs[0].([]NsRecord)[vs[1].(int)]
	}).(NsRecordOutput)
}

// An NS record.
type NsRecordResponse struct {
	// The name server name for this NS record.
	Nsdname *string `pulumi:"nsdname"`
}

// NsRecordResponseInput is an input type that accepts NsRecordResponseArgs and NsRecordResponseOutput values.
// You can construct a concrete instance of `NsRecordResponseInput` via:
//
//          NsRecordResponseArgs{...}
type NsRecordResponseInput interface {
	pulumi.Input

	ToNsRecordResponseOutput() NsRecordResponseOutput
	ToNsRecordResponseOutputWithContext(context.Context) NsRecordResponseOutput
}

// An NS record.
type NsRecordResponseArgs struct {
	// The name server name for this NS record.
	Nsdname pulumi.StringPtrInput `pulumi:"nsdname"`
}

func (NsRecordResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NsRecordResponse)(nil)).Elem()
}

func (i NsRecordResponseArgs) ToNsRecordResponseOutput() NsRecordResponseOutput {
	return i.ToNsRecordResponseOutputWithContext(context.Background())
}

func (i NsRecordResponseArgs) ToNsRecordResponseOutputWithContext(ctx context.Context) NsRecordResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsRecordResponseOutput)
}

// NsRecordResponseArrayInput is an input type that accepts NsRecordResponseArray and NsRecordResponseArrayOutput values.
// You can construct a concrete instance of `NsRecordResponseArrayInput` via:
//
//          NsRecordResponseArray{ NsRecordResponseArgs{...} }
type NsRecordResponseArrayInput interface {
	pulumi.Input

	ToNsRecordResponseArrayOutput() NsRecordResponseArrayOutput
	ToNsRecordResponseArrayOutputWithContext(context.Context) NsRecordResponseArrayOutput
}

type NsRecordResponseArray []NsRecordResponseInput

func (NsRecordResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsRecordResponse)(nil)).Elem()
}

func (i NsRecordResponseArray) ToNsRecordResponseArrayOutput() NsRecordResponseArrayOutput {
	return i.ToNsRecordResponseArrayOutputWithContext(context.Background())
}

func (i NsRecordResponseArray) ToNsRecordResponseArrayOutputWithContext(ctx context.Context) NsRecordResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsRecordResponseArrayOutput)
}

// An NS record.
type NsRecordResponseOutput struct{ *pulumi.OutputState }

func (NsRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NsRecordResponse)(nil)).Elem()
}

func (o NsRecordResponseOutput) ToNsRecordResponseOutput() NsRecordResponseOutput {
	return o
}

func (o NsRecordResponseOutput) ToNsRecordResponseOutputWithContext(ctx context.Context) NsRecordResponseOutput {
	return o
}

// The name server name for this NS record.
func (o NsRecordResponseOutput) Nsdname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NsRecordResponse) *string { return v.Nsdname }).(pulumi.StringPtrOutput)
}

type NsRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (NsRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsRecordResponse)(nil)).Elem()
}

func (o NsRecordResponseArrayOutput) ToNsRecordResponseArrayOutput() NsRecordResponseArrayOutput {
	return o
}

func (o NsRecordResponseArrayOutput) ToNsRecordResponseArrayOutputWithContext(ctx context.Context) NsRecordResponseArrayOutput {
	return o
}

func (o NsRecordResponseArrayOutput) Index(i pulumi.IntInput) NsRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NsRecordResponse {
		return vs[0].([]NsRecordResponse)[vs[1].(int)]
	}).(NsRecordResponseOutput)
}

// A PTR record.
type PtrRecord struct {
	// The PTR target domain name for this PTR record.
	Ptrdname *string `pulumi:"ptrdname"`
}

// PtrRecordInput is an input type that accepts PtrRecordArgs and PtrRecordOutput values.
// You can construct a concrete instance of `PtrRecordInput` via:
//
//          PtrRecordArgs{...}
type PtrRecordInput interface {
	pulumi.Input

	ToPtrRecordOutput() PtrRecordOutput
	ToPtrRecordOutputWithContext(context.Context) PtrRecordOutput
}

// A PTR record.
type PtrRecordArgs struct {
	// The PTR target domain name for this PTR record.
	Ptrdname pulumi.StringPtrInput `pulumi:"ptrdname"`
}

func (PtrRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PtrRecord)(nil)).Elem()
}

func (i PtrRecordArgs) ToPtrRecordOutput() PtrRecordOutput {
	return i.ToPtrRecordOutputWithContext(context.Background())
}

func (i PtrRecordArgs) ToPtrRecordOutputWithContext(ctx context.Context) PtrRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PtrRecordOutput)
}

// PtrRecordArrayInput is an input type that accepts PtrRecordArray and PtrRecordArrayOutput values.
// You can construct a concrete instance of `PtrRecordArrayInput` via:
//
//          PtrRecordArray{ PtrRecordArgs{...} }
type PtrRecordArrayInput interface {
	pulumi.Input

	ToPtrRecordArrayOutput() PtrRecordArrayOutput
	ToPtrRecordArrayOutputWithContext(context.Context) PtrRecordArrayOutput
}

type PtrRecordArray []PtrRecordInput

func (PtrRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PtrRecord)(nil)).Elem()
}

func (i PtrRecordArray) ToPtrRecordArrayOutput() PtrRecordArrayOutput {
	return i.ToPtrRecordArrayOutputWithContext(context.Background())
}

func (i PtrRecordArray) ToPtrRecordArrayOutputWithContext(ctx context.Context) PtrRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PtrRecordArrayOutput)
}

// A PTR record.
type PtrRecordOutput struct{ *pulumi.OutputState }

func (PtrRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PtrRecord)(nil)).Elem()
}

func (o PtrRecordOutput) ToPtrRecordOutput() PtrRecordOutput {
	return o
}

func (o PtrRecordOutput) ToPtrRecordOutputWithContext(ctx context.Context) PtrRecordOutput {
	return o
}

// The PTR target domain name for this PTR record.
func (o PtrRecordOutput) Ptrdname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PtrRecord) *string { return v.Ptrdname }).(pulumi.StringPtrOutput)
}

type PtrRecordArrayOutput struct{ *pulumi.OutputState }

func (PtrRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PtrRecord)(nil)).Elem()
}

func (o PtrRecordArrayOutput) ToPtrRecordArrayOutput() PtrRecordArrayOutput {
	return o
}

func (o PtrRecordArrayOutput) ToPtrRecordArrayOutputWithContext(ctx context.Context) PtrRecordArrayOutput {
	return o
}

func (o PtrRecordArrayOutput) Index(i pulumi.IntInput) PtrRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PtrRecord {
		return vs[0].([]PtrRecord)[vs[1].(int)]
	}).(PtrRecordOutput)
}

// A PTR record.
type PtrRecordResponse struct {
	// The PTR target domain name for this PTR record.
	Ptrdname *string `pulumi:"ptrdname"`
}

// PtrRecordResponseInput is an input type that accepts PtrRecordResponseArgs and PtrRecordResponseOutput values.
// You can construct a concrete instance of `PtrRecordResponseInput` via:
//
//          PtrRecordResponseArgs{...}
type PtrRecordResponseInput interface {
	pulumi.Input

	ToPtrRecordResponseOutput() PtrRecordResponseOutput
	ToPtrRecordResponseOutputWithContext(context.Context) PtrRecordResponseOutput
}

// A PTR record.
type PtrRecordResponseArgs struct {
	// The PTR target domain name for this PTR record.
	Ptrdname pulumi.StringPtrInput `pulumi:"ptrdname"`
}

func (PtrRecordResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PtrRecordResponse)(nil)).Elem()
}

func (i PtrRecordResponseArgs) ToPtrRecordResponseOutput() PtrRecordResponseOutput {
	return i.ToPtrRecordResponseOutputWithContext(context.Background())
}

func (i PtrRecordResponseArgs) ToPtrRecordResponseOutputWithContext(ctx context.Context) PtrRecordResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PtrRecordResponseOutput)
}

// PtrRecordResponseArrayInput is an input type that accepts PtrRecordResponseArray and PtrRecordResponseArrayOutput values.
// You can construct a concrete instance of `PtrRecordResponseArrayInput` via:
//
//          PtrRecordResponseArray{ PtrRecordResponseArgs{...} }
type PtrRecordResponseArrayInput interface {
	pulumi.Input

	ToPtrRecordResponseArrayOutput() PtrRecordResponseArrayOutput
	ToPtrRecordResponseArrayOutputWithContext(context.Context) PtrRecordResponseArrayOutput
}

type PtrRecordResponseArray []PtrRecordResponseInput

func (PtrRecordResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PtrRecordResponse)(nil)).Elem()
}

func (i PtrRecordResponseArray) ToPtrRecordResponseArrayOutput() PtrRecordResponseArrayOutput {
	return i.ToPtrRecordResponseArrayOutputWithContext(context.Background())
}

func (i PtrRecordResponseArray) ToPtrRecordResponseArrayOutputWithContext(ctx context.Context) PtrRecordResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PtrRecordResponseArrayOutput)
}

// A PTR record.
type PtrRecordResponseOutput struct{ *pulumi.OutputState }

func (PtrRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PtrRecordResponse)(nil)).Elem()
}

func (o PtrRecordResponseOutput) ToPtrRecordResponseOutput() PtrRecordResponseOutput {
	return o
}

func (o PtrRecordResponseOutput) ToPtrRecordResponseOutputWithContext(ctx context.Context) PtrRecordResponseOutput {
	return o
}

// The PTR target domain name for this PTR record.
func (o PtrRecordResponseOutput) Ptrdname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PtrRecordResponse) *string { return v.Ptrdname }).(pulumi.StringPtrOutput)
}

type PtrRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (PtrRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PtrRecordResponse)(nil)).Elem()
}

func (o PtrRecordResponseArrayOutput) ToPtrRecordResponseArrayOutput() PtrRecordResponseArrayOutput {
	return o
}

func (o PtrRecordResponseArrayOutput) ToPtrRecordResponseArrayOutputWithContext(ctx context.Context) PtrRecordResponseArrayOutput {
	return o
}

func (o PtrRecordResponseArrayOutput) Index(i pulumi.IntInput) PtrRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PtrRecordResponse {
		return vs[0].([]PtrRecordResponse)[vs[1].(int)]
	}).(PtrRecordResponseOutput)
}

// Describes a DNS record set (a collection of DNS records with the same name and type).
type RecordSetType struct {
	// The etag of the record set.
	Etag *string `pulumi:"etag"`
	// The name of the record set.
	Name string `pulumi:"name"`
	// The properties of the record set.
	Properties RecordSetPropertiesResponse `pulumi:"properties"`
	// The type of the record set.
	Type string `pulumi:"type"`
}

// RecordSetTypeInput is an input type that accepts RecordSetTypeArgs and RecordSetTypeOutput values.
// You can construct a concrete instance of `RecordSetTypeInput` via:
//
//          RecordSetTypeArgs{...}
type RecordSetTypeInput interface {
	pulumi.Input

	ToRecordSetTypeOutput() RecordSetTypeOutput
	ToRecordSetTypeOutputWithContext(context.Context) RecordSetTypeOutput
}

// Describes a DNS record set (a collection of DNS records with the same name and type).
type RecordSetTypeArgs struct {
	// The etag of the record set.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// The name of the record set.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of the record set.
	Properties RecordSetPropertiesResponseInput `pulumi:"properties"`
	// The type of the record set.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RecordSetTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordSetType)(nil)).Elem()
}

func (i RecordSetTypeArgs) ToRecordSetTypeOutput() RecordSetTypeOutput {
	return i.ToRecordSetTypeOutputWithContext(context.Background())
}

func (i RecordSetTypeArgs) ToRecordSetTypeOutputWithContext(ctx context.Context) RecordSetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordSetTypeOutput)
}

// Describes a DNS record set (a collection of DNS records with the same name and type).
type RecordSetTypeOutput struct{ *pulumi.OutputState }

func (RecordSetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordSetType)(nil)).Elem()
}

func (o RecordSetTypeOutput) ToRecordSetTypeOutput() RecordSetTypeOutput {
	return o
}

func (o RecordSetTypeOutput) ToRecordSetTypeOutputWithContext(ctx context.Context) RecordSetTypeOutput {
	return o
}

// The etag of the record set.
func (o RecordSetTypeOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecordSetType) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// The name of the record set.
func (o RecordSetTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RecordSetType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of the record set.
func (o RecordSetTypeOutput) Properties() RecordSetPropertiesResponseOutput {
	return o.ApplyT(func(v RecordSetType) RecordSetPropertiesResponse { return v.Properties }).(RecordSetPropertiesResponseOutput)
}

// The type of the record set.
func (o RecordSetTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RecordSetType) string { return v.Type }).(pulumi.StringOutput)
}

// Represents the properties of the records in the record set.
type RecordSetProperties struct {
	// The list of AAAA records in the record set.
	AAAARecords []AaaaRecord `pulumi:"AAAARecords"`
	// The list of A records in the record set.
	ARecords []ARecord `pulumi:"ARecords"`
	// The CNAME record in the  record set.
	CNAMERecord *CnameRecord `pulumi:"CNAMERecord"`
	// The list of MX records in the record set.
	MXRecords []MxRecord `pulumi:"MXRecords"`
	// The list of NS records in the record set.
	NSRecords []NsRecord `pulumi:"NSRecords"`
	// The list of PTR records in the record set.
	PTRRecords []PtrRecord `pulumi:"PTRRecords"`
	// The SOA record in the record set.
	SOARecord *SoaRecord `pulumi:"SOARecord"`
	// The list of SRV records in the record set.
	SRVRecords []SrvRecord `pulumi:"SRVRecords"`
	// The TTL (time-to-live) of the records in the record set.
	TTL *int `pulumi:"TTL"`
	// The list of TXT records in the record set.
	TXTRecords []TxtRecord `pulumi:"TXTRecords"`
	// The list of CAA records in the record set.
	CaaRecords []CaaRecord `pulumi:"caaRecords"`
	// The metadata attached to the record set.
	Metadata map[string]string `pulumi:"metadata"`
	// A reference to an azure resource from where the dns resource value is taken.
	TargetResource *SubResource `pulumi:"targetResource"`
}

// RecordSetPropertiesInput is an input type that accepts RecordSetPropertiesArgs and RecordSetPropertiesOutput values.
// You can construct a concrete instance of `RecordSetPropertiesInput` via:
//
//          RecordSetPropertiesArgs{...}
type RecordSetPropertiesInput interface {
	pulumi.Input

	ToRecordSetPropertiesOutput() RecordSetPropertiesOutput
	ToRecordSetPropertiesOutputWithContext(context.Context) RecordSetPropertiesOutput
}

// Represents the properties of the records in the record set.
type RecordSetPropertiesArgs struct {
	// The list of AAAA records in the record set.
	AAAARecords AaaaRecordArrayInput `pulumi:"AAAARecords"`
	// The list of A records in the record set.
	ARecords ARecordArrayInput `pulumi:"ARecords"`
	// The CNAME record in the  record set.
	CNAMERecord CnameRecordPtrInput `pulumi:"CNAMERecord"`
	// The list of MX records in the record set.
	MXRecords MxRecordArrayInput `pulumi:"MXRecords"`
	// The list of NS records in the record set.
	NSRecords NsRecordArrayInput `pulumi:"NSRecords"`
	// The list of PTR records in the record set.
	PTRRecords PtrRecordArrayInput `pulumi:"PTRRecords"`
	// The SOA record in the record set.
	SOARecord SoaRecordPtrInput `pulumi:"SOARecord"`
	// The list of SRV records in the record set.
	SRVRecords SrvRecordArrayInput `pulumi:"SRVRecords"`
	// The TTL (time-to-live) of the records in the record set.
	TTL pulumi.IntPtrInput `pulumi:"TTL"`
	// The list of TXT records in the record set.
	TXTRecords TxtRecordArrayInput `pulumi:"TXTRecords"`
	// The list of CAA records in the record set.
	CaaRecords CaaRecordArrayInput `pulumi:"caaRecords"`
	// The metadata attached to the record set.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// A reference to an azure resource from where the dns resource value is taken.
	TargetResource SubResourcePtrInput `pulumi:"targetResource"`
}

func (RecordSetPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordSetProperties)(nil)).Elem()
}

func (i RecordSetPropertiesArgs) ToRecordSetPropertiesOutput() RecordSetPropertiesOutput {
	return i.ToRecordSetPropertiesOutputWithContext(context.Background())
}

func (i RecordSetPropertiesArgs) ToRecordSetPropertiesOutputWithContext(ctx context.Context) RecordSetPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordSetPropertiesOutput)
}

func (i RecordSetPropertiesArgs) ToRecordSetPropertiesPtrOutput() RecordSetPropertiesPtrOutput {
	return i.ToRecordSetPropertiesPtrOutputWithContext(context.Background())
}

func (i RecordSetPropertiesArgs) ToRecordSetPropertiesPtrOutputWithContext(ctx context.Context) RecordSetPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordSetPropertiesOutput).ToRecordSetPropertiesPtrOutputWithContext(ctx)
}

// RecordSetPropertiesPtrInput is an input type that accepts RecordSetPropertiesArgs, RecordSetPropertiesPtr and RecordSetPropertiesPtrOutput values.
// You can construct a concrete instance of `RecordSetPropertiesPtrInput` via:
//
//          RecordSetPropertiesArgs{...}
//
//  or:
//
//          nil
type RecordSetPropertiesPtrInput interface {
	pulumi.Input

	ToRecordSetPropertiesPtrOutput() RecordSetPropertiesPtrOutput
	ToRecordSetPropertiesPtrOutputWithContext(context.Context) RecordSetPropertiesPtrOutput
}

type recordSetPropertiesPtrType RecordSetPropertiesArgs

func RecordSetPropertiesPtr(v *RecordSetPropertiesArgs) RecordSetPropertiesPtrInput {
	return (*recordSetPropertiesPtrType)(v)
}

func (*recordSetPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordSetProperties)(nil)).Elem()
}

func (i *recordSetPropertiesPtrType) ToRecordSetPropertiesPtrOutput() RecordSetPropertiesPtrOutput {
	return i.ToRecordSetPropertiesPtrOutputWithContext(context.Background())
}

func (i *recordSetPropertiesPtrType) ToRecordSetPropertiesPtrOutputWithContext(ctx context.Context) RecordSetPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordSetPropertiesPtrOutput)
}

// Represents the properties of the records in the record set.
type RecordSetPropertiesOutput struct{ *pulumi.OutputState }

func (RecordSetPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordSetProperties)(nil)).Elem()
}

func (o RecordSetPropertiesOutput) ToRecordSetPropertiesOutput() RecordSetPropertiesOutput {
	return o
}

func (o RecordSetPropertiesOutput) ToRecordSetPropertiesOutputWithContext(ctx context.Context) RecordSetPropertiesOutput {
	return o
}

func (o RecordSetPropertiesOutput) ToRecordSetPropertiesPtrOutput() RecordSetPropertiesPtrOutput {
	return o.ToRecordSetPropertiesPtrOutputWithContext(context.Background())
}

func (o RecordSetPropertiesOutput) ToRecordSetPropertiesPtrOutputWithContext(ctx context.Context) RecordSetPropertiesPtrOutput {
	return o.ApplyT(func(v RecordSetProperties) *RecordSetProperties {
		return &v
	}).(RecordSetPropertiesPtrOutput)
}

// The list of AAAA records in the record set.
func (o RecordSetPropertiesOutput) AAAARecords() AaaaRecordArrayOutput {
	return o.ApplyT(func(v RecordSetProperties) []AaaaRecord { return v.AAAARecords }).(AaaaRecordArrayOutput)
}

// The list of A records in the record set.
func (o RecordSetPropertiesOutput) ARecords() ARecordArrayOutput {
	return o.ApplyT(func(v RecordSetProperties) []ARecord { return v.ARecords }).(ARecordArrayOutput)
}

// The CNAME record in the  record set.
func (o RecordSetPropertiesOutput) CNAMERecord() CnameRecordPtrOutput {
	return o.ApplyT(func(v RecordSetProperties) *CnameRecord { return v.CNAMERecord }).(CnameRecordPtrOutput)
}

// The list of MX records in the record set.
func (o RecordSetPropertiesOutput) MXRecords() MxRecordArrayOutput {
	return o.ApplyT(func(v RecordSetProperties) []MxRecord { return v.MXRecords }).(MxRecordArrayOutput)
}

// The list of NS records in the record set.
func (o RecordSetPropertiesOutput) NSRecords() NsRecordArrayOutput {
	return o.ApplyT(func(v RecordSetProperties) []NsRecord { return v.NSRecords }).(NsRecordArrayOutput)
}

// The list of PTR records in the record set.
func (o RecordSetPropertiesOutput) PTRRecords() PtrRecordArrayOutput {
	return o.ApplyT(func(v RecordSetProperties) []PtrRecord { return v.PTRRecords }).(PtrRecordArrayOutput)
}

// The SOA record in the record set.
func (o RecordSetPropertiesOutput) SOARecord() SoaRecordPtrOutput {
	return o.ApplyT(func(v RecordSetProperties) *SoaRecord { return v.SOARecord }).(SoaRecordPtrOutput)
}

// The list of SRV records in the record set.
func (o RecordSetPropertiesOutput) SRVRecords() SrvRecordArrayOutput {
	return o.ApplyT(func(v RecordSetProperties) []SrvRecord { return v.SRVRecords }).(SrvRecordArrayOutput)
}

// The TTL (time-to-live) of the records in the record set.
func (o RecordSetPropertiesOutput) TTL() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordSetProperties) *int { return v.TTL }).(pulumi.IntPtrOutput)
}

// The list of TXT records in the record set.
func (o RecordSetPropertiesOutput) TXTRecords() TxtRecordArrayOutput {
	return o.ApplyT(func(v RecordSetProperties) []TxtRecord { return v.TXTRecords }).(TxtRecordArrayOutput)
}

// The list of CAA records in the record set.
func (o RecordSetPropertiesOutput) CaaRecords() CaaRecordArrayOutput {
	return o.ApplyT(func(v RecordSetProperties) []CaaRecord { return v.CaaRecords }).(CaaRecordArrayOutput)
}

// The metadata attached to the record set.
func (o RecordSetPropertiesOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v RecordSetProperties) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// A reference to an azure resource from where the dns resource value is taken.
func (o RecordSetPropertiesOutput) TargetResource() SubResourcePtrOutput {
	return o.ApplyT(func(v RecordSetProperties) *SubResource { return v.TargetResource }).(SubResourcePtrOutput)
}

type RecordSetPropertiesPtrOutput struct{ *pulumi.OutputState }

func (RecordSetPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordSetProperties)(nil)).Elem()
}

func (o RecordSetPropertiesPtrOutput) ToRecordSetPropertiesPtrOutput() RecordSetPropertiesPtrOutput {
	return o
}

func (o RecordSetPropertiesPtrOutput) ToRecordSetPropertiesPtrOutputWithContext(ctx context.Context) RecordSetPropertiesPtrOutput {
	return o
}

func (o RecordSetPropertiesPtrOutput) Elem() RecordSetPropertiesOutput {
	return o.ApplyT(func(v *RecordSetProperties) RecordSetProperties { return *v }).(RecordSetPropertiesOutput)
}

// The list of AAAA records in the record set.
func (o RecordSetPropertiesPtrOutput) AAAARecords() AaaaRecordArrayOutput {
	return o.ApplyT(func(v *RecordSetProperties) []AaaaRecord {
		if v == nil {
			return nil
		}
		return v.AAAARecords
	}).(AaaaRecordArrayOutput)
}

// The list of A records in the record set.
func (o RecordSetPropertiesPtrOutput) ARecords() ARecordArrayOutput {
	return o.ApplyT(func(v *RecordSetProperties) []ARecord {
		if v == nil {
			return nil
		}
		return v.ARecords
	}).(ARecordArrayOutput)
}

// The CNAME record in the  record set.
func (o RecordSetPropertiesPtrOutput) CNAMERecord() CnameRecordPtrOutput {
	return o.ApplyT(func(v *RecordSetProperties) *CnameRecord {
		if v == nil {
			return nil
		}
		return v.CNAMERecord
	}).(CnameRecordPtrOutput)
}

// The list of MX records in the record set.
func (o RecordSetPropertiesPtrOutput) MXRecords() MxRecordArrayOutput {
	return o.ApplyT(func(v *RecordSetProperties) []MxRecord {
		if v == nil {
			return nil
		}
		return v.MXRecords
	}).(MxRecordArrayOutput)
}

// The list of NS records in the record set.
func (o RecordSetPropertiesPtrOutput) NSRecords() NsRecordArrayOutput {
	return o.ApplyT(func(v *RecordSetProperties) []NsRecord {
		if v == nil {
			return nil
		}
		return v.NSRecords
	}).(NsRecordArrayOutput)
}

// The list of PTR records in the record set.
func (o RecordSetPropertiesPtrOutput) PTRRecords() PtrRecordArrayOutput {
	return o.ApplyT(func(v *RecordSetProperties) []PtrRecord {
		if v == nil {
			return nil
		}
		return v.PTRRecords
	}).(PtrRecordArrayOutput)
}

// The SOA record in the record set.
func (o RecordSetPropertiesPtrOutput) SOARecord() SoaRecordPtrOutput {
	return o.ApplyT(func(v *RecordSetProperties) *SoaRecord {
		if v == nil {
			return nil
		}
		return v.SOARecord
	}).(SoaRecordPtrOutput)
}

// The list of SRV records in the record set.
func (o RecordSetPropertiesPtrOutput) SRVRecords() SrvRecordArrayOutput {
	return o.ApplyT(func(v *RecordSetProperties) []SrvRecord {
		if v == nil {
			return nil
		}
		return v.SRVRecords
	}).(SrvRecordArrayOutput)
}

// The TTL (time-to-live) of the records in the record set.
func (o RecordSetPropertiesPtrOutput) TTL() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordSetProperties) *int {
		if v == nil {
			return nil
		}
		return v.TTL
	}).(pulumi.IntPtrOutput)
}

// The list of TXT records in the record set.
func (o RecordSetPropertiesPtrOutput) TXTRecords() TxtRecordArrayOutput {
	return o.ApplyT(func(v *RecordSetProperties) []TxtRecord {
		if v == nil {
			return nil
		}
		return v.TXTRecords
	}).(TxtRecordArrayOutput)
}

// The list of CAA records in the record set.
func (o RecordSetPropertiesPtrOutput) CaaRecords() CaaRecordArrayOutput {
	return o.ApplyT(func(v *RecordSetProperties) []CaaRecord {
		if v == nil {
			return nil
		}
		return v.CaaRecords
	}).(CaaRecordArrayOutput)
}

// The metadata attached to the record set.
func (o RecordSetPropertiesPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RecordSetProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// A reference to an azure resource from where the dns resource value is taken.
func (o RecordSetPropertiesPtrOutput) TargetResource() SubResourcePtrOutput {
	return o.ApplyT(func(v *RecordSetProperties) *SubResource {
		if v == nil {
			return nil
		}
		return v.TargetResource
	}).(SubResourcePtrOutput)
}

// Represents the properties of the records in the record set.
type RecordSetPropertiesResponse struct {
	// The list of AAAA records in the record set.
	AAAARecords []AaaaRecordResponse `pulumi:"AAAARecords"`
	// The list of A records in the record set.
	ARecords []ARecordResponse `pulumi:"ARecords"`
	// The CNAME record in the  record set.
	CNAMERecord *CnameRecordResponse `pulumi:"CNAMERecord"`
	// The list of MX records in the record set.
	MXRecords []MxRecordResponse `pulumi:"MXRecords"`
	// The list of NS records in the record set.
	NSRecords []NsRecordResponse `pulumi:"NSRecords"`
	// The list of PTR records in the record set.
	PTRRecords []PtrRecordResponse `pulumi:"PTRRecords"`
	// The SOA record in the record set.
	SOARecord *SoaRecordResponse `pulumi:"SOARecord"`
	// The list of SRV records in the record set.
	SRVRecords []SrvRecordResponse `pulumi:"SRVRecords"`
	// The TTL (time-to-live) of the records in the record set.
	TTL *int `pulumi:"TTL"`
	// The list of TXT records in the record set.
	TXTRecords []TxtRecordResponse `pulumi:"TXTRecords"`
	// The list of CAA records in the record set.
	CaaRecords []CaaRecordResponse `pulumi:"caaRecords"`
	// Fully qualified domain name of the record set.
	Fqdn string `pulumi:"fqdn"`
	// The metadata attached to the record set.
	Metadata map[string]string `pulumi:"metadata"`
	// provisioning State of the record set.
	ProvisioningState string `pulumi:"provisioningState"`
	// A reference to an azure resource from where the dns resource value is taken.
	TargetResource *SubResourceResponse `pulumi:"targetResource"`
}

// RecordSetPropertiesResponseInput is an input type that accepts RecordSetPropertiesResponseArgs and RecordSetPropertiesResponseOutput values.
// You can construct a concrete instance of `RecordSetPropertiesResponseInput` via:
//
//          RecordSetPropertiesResponseArgs{...}
type RecordSetPropertiesResponseInput interface {
	pulumi.Input

	ToRecordSetPropertiesResponseOutput() RecordSetPropertiesResponseOutput
	ToRecordSetPropertiesResponseOutputWithContext(context.Context) RecordSetPropertiesResponseOutput
}

// Represents the properties of the records in the record set.
type RecordSetPropertiesResponseArgs struct {
	// The list of AAAA records in the record set.
	AAAARecords AaaaRecordResponseArrayInput `pulumi:"AAAARecords"`
	// The list of A records in the record set.
	ARecords ARecordResponseArrayInput `pulumi:"ARecords"`
	// The CNAME record in the  record set.
	CNAMERecord CnameRecordResponsePtrInput `pulumi:"CNAMERecord"`
	// The list of MX records in the record set.
	MXRecords MxRecordResponseArrayInput `pulumi:"MXRecords"`
	// The list of NS records in the record set.
	NSRecords NsRecordResponseArrayInput `pulumi:"NSRecords"`
	// The list of PTR records in the record set.
	PTRRecords PtrRecordResponseArrayInput `pulumi:"PTRRecords"`
	// The SOA record in the record set.
	SOARecord SoaRecordResponsePtrInput `pulumi:"SOARecord"`
	// The list of SRV records in the record set.
	SRVRecords SrvRecordResponseArrayInput `pulumi:"SRVRecords"`
	// The TTL (time-to-live) of the records in the record set.
	TTL pulumi.IntPtrInput `pulumi:"TTL"`
	// The list of TXT records in the record set.
	TXTRecords TxtRecordResponseArrayInput `pulumi:"TXTRecords"`
	// The list of CAA records in the record set.
	CaaRecords CaaRecordResponseArrayInput `pulumi:"caaRecords"`
	// Fully qualified domain name of the record set.
	Fqdn pulumi.StringInput `pulumi:"fqdn"`
	// The metadata attached to the record set.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// provisioning State of the record set.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// A reference to an azure resource from where the dns resource value is taken.
	TargetResource SubResourceResponsePtrInput `pulumi:"targetResource"`
}

func (RecordSetPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordSetPropertiesResponse)(nil)).Elem()
}

func (i RecordSetPropertiesResponseArgs) ToRecordSetPropertiesResponseOutput() RecordSetPropertiesResponseOutput {
	return i.ToRecordSetPropertiesResponseOutputWithContext(context.Background())
}

func (i RecordSetPropertiesResponseArgs) ToRecordSetPropertiesResponseOutputWithContext(ctx context.Context) RecordSetPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordSetPropertiesResponseOutput)
}

func (i RecordSetPropertiesResponseArgs) ToRecordSetPropertiesResponsePtrOutput() RecordSetPropertiesResponsePtrOutput {
	return i.ToRecordSetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i RecordSetPropertiesResponseArgs) ToRecordSetPropertiesResponsePtrOutputWithContext(ctx context.Context) RecordSetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordSetPropertiesResponseOutput).ToRecordSetPropertiesResponsePtrOutputWithContext(ctx)
}

// RecordSetPropertiesResponsePtrInput is an input type that accepts RecordSetPropertiesResponseArgs, RecordSetPropertiesResponsePtr and RecordSetPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `RecordSetPropertiesResponsePtrInput` via:
//
//          RecordSetPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type RecordSetPropertiesResponsePtrInput interface {
	pulumi.Input

	ToRecordSetPropertiesResponsePtrOutput() RecordSetPropertiesResponsePtrOutput
	ToRecordSetPropertiesResponsePtrOutputWithContext(context.Context) RecordSetPropertiesResponsePtrOutput
}

type recordSetPropertiesResponsePtrType RecordSetPropertiesResponseArgs

func RecordSetPropertiesResponsePtr(v *RecordSetPropertiesResponseArgs) RecordSetPropertiesResponsePtrInput {
	return (*recordSetPropertiesResponsePtrType)(v)
}

func (*recordSetPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordSetPropertiesResponse)(nil)).Elem()
}

func (i *recordSetPropertiesResponsePtrType) ToRecordSetPropertiesResponsePtrOutput() RecordSetPropertiesResponsePtrOutput {
	return i.ToRecordSetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *recordSetPropertiesResponsePtrType) ToRecordSetPropertiesResponsePtrOutputWithContext(ctx context.Context) RecordSetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordSetPropertiesResponsePtrOutput)
}

// Represents the properties of the records in the record set.
type RecordSetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (RecordSetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordSetPropertiesResponse)(nil)).Elem()
}

func (o RecordSetPropertiesResponseOutput) ToRecordSetPropertiesResponseOutput() RecordSetPropertiesResponseOutput {
	return o
}

func (o RecordSetPropertiesResponseOutput) ToRecordSetPropertiesResponseOutputWithContext(ctx context.Context) RecordSetPropertiesResponseOutput {
	return o
}

func (o RecordSetPropertiesResponseOutput) ToRecordSetPropertiesResponsePtrOutput() RecordSetPropertiesResponsePtrOutput {
	return o.ToRecordSetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o RecordSetPropertiesResponseOutput) ToRecordSetPropertiesResponsePtrOutputWithContext(ctx context.Context) RecordSetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v RecordSetPropertiesResponse) *RecordSetPropertiesResponse {
		return &v
	}).(RecordSetPropertiesResponsePtrOutput)
}

// The list of AAAA records in the record set.
func (o RecordSetPropertiesResponseOutput) AAAARecords() AaaaRecordResponseArrayOutput {
	return o.ApplyT(func(v RecordSetPropertiesResponse) []AaaaRecordResponse { return v.AAAARecords }).(AaaaRecordResponseArrayOutput)
}

// The list of A records in the record set.
func (o RecordSetPropertiesResponseOutput) ARecords() ARecordResponseArrayOutput {
	return o.ApplyT(func(v RecordSetPropertiesResponse) []ARecordResponse { return v.ARecords }).(ARecordResponseArrayOutput)
}

// The CNAME record in the  record set.
func (o RecordSetPropertiesResponseOutput) CNAMERecord() CnameRecordResponsePtrOutput {
	return o.ApplyT(func(v RecordSetPropertiesResponse) *CnameRecordResponse { return v.CNAMERecord }).(CnameRecordResponsePtrOutput)
}

// The list of MX records in the record set.
func (o RecordSetPropertiesResponseOutput) MXRecords() MxRecordResponseArrayOutput {
	return o.ApplyT(func(v RecordSetPropertiesResponse) []MxRecordResponse { return v.MXRecords }).(MxRecordResponseArrayOutput)
}

// The list of NS records in the record set.
func (o RecordSetPropertiesResponseOutput) NSRecords() NsRecordResponseArrayOutput {
	return o.ApplyT(func(v RecordSetPropertiesResponse) []NsRecordResponse { return v.NSRecords }).(NsRecordResponseArrayOutput)
}

// The list of PTR records in the record set.
func (o RecordSetPropertiesResponseOutput) PTRRecords() PtrRecordResponseArrayOutput {
	return o.ApplyT(func(v RecordSetPropertiesResponse) []PtrRecordResponse { return v.PTRRecords }).(PtrRecordResponseArrayOutput)
}

// The SOA record in the record set.
func (o RecordSetPropertiesResponseOutput) SOARecord() SoaRecordResponsePtrOutput {
	return o.ApplyT(func(v RecordSetPropertiesResponse) *SoaRecordResponse { return v.SOARecord }).(SoaRecordResponsePtrOutput)
}

// The list of SRV records in the record set.
func (o RecordSetPropertiesResponseOutput) SRVRecords() SrvRecordResponseArrayOutput {
	return o.ApplyT(func(v RecordSetPropertiesResponse) []SrvRecordResponse { return v.SRVRecords }).(SrvRecordResponseArrayOutput)
}

// The TTL (time-to-live) of the records in the record set.
func (o RecordSetPropertiesResponseOutput) TTL() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecordSetPropertiesResponse) *int { return v.TTL }).(pulumi.IntPtrOutput)
}

// The list of TXT records in the record set.
func (o RecordSetPropertiesResponseOutput) TXTRecords() TxtRecordResponseArrayOutput {
	return o.ApplyT(func(v RecordSetPropertiesResponse) []TxtRecordResponse { return v.TXTRecords }).(TxtRecordResponseArrayOutput)
}

// The list of CAA records in the record set.
func (o RecordSetPropertiesResponseOutput) CaaRecords() CaaRecordResponseArrayOutput {
	return o.ApplyT(func(v RecordSetPropertiesResponse) []CaaRecordResponse { return v.CaaRecords }).(CaaRecordResponseArrayOutput)
}

// Fully qualified domain name of the record set.
func (o RecordSetPropertiesResponseOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v RecordSetPropertiesResponse) string { return v.Fqdn }).(pulumi.StringOutput)
}

// The metadata attached to the record set.
func (o RecordSetPropertiesResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v RecordSetPropertiesResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// provisioning State of the record set.
func (o RecordSetPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v RecordSetPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// A reference to an azure resource from where the dns resource value is taken.
func (o RecordSetPropertiesResponseOutput) TargetResource() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v RecordSetPropertiesResponse) *SubResourceResponse { return v.TargetResource }).(SubResourceResponsePtrOutput)
}

type RecordSetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (RecordSetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordSetPropertiesResponse)(nil)).Elem()
}

func (o RecordSetPropertiesResponsePtrOutput) ToRecordSetPropertiesResponsePtrOutput() RecordSetPropertiesResponsePtrOutput {
	return o
}

func (o RecordSetPropertiesResponsePtrOutput) ToRecordSetPropertiesResponsePtrOutputWithContext(ctx context.Context) RecordSetPropertiesResponsePtrOutput {
	return o
}

func (o RecordSetPropertiesResponsePtrOutput) Elem() RecordSetPropertiesResponseOutput {
	return o.ApplyT(func(v *RecordSetPropertiesResponse) RecordSetPropertiesResponse { return *v }).(RecordSetPropertiesResponseOutput)
}

// The list of AAAA records in the record set.
func (o RecordSetPropertiesResponsePtrOutput) AAAARecords() AaaaRecordResponseArrayOutput {
	return o.ApplyT(func(v *RecordSetPropertiesResponse) []AaaaRecordResponse {
		if v == nil {
			return nil
		}
		return v.AAAARecords
	}).(AaaaRecordResponseArrayOutput)
}

// The list of A records in the record set.
func (o RecordSetPropertiesResponsePtrOutput) ARecords() ARecordResponseArrayOutput {
	return o.ApplyT(func(v *RecordSetPropertiesResponse) []ARecordResponse {
		if v == nil {
			return nil
		}
		return v.ARecords
	}).(ARecordResponseArrayOutput)
}

// The CNAME record in the  record set.
func (o RecordSetPropertiesResponsePtrOutput) CNAMERecord() CnameRecordResponsePtrOutput {
	return o.ApplyT(func(v *RecordSetPropertiesResponse) *CnameRecordResponse {
		if v == nil {
			return nil
		}
		return v.CNAMERecord
	}).(CnameRecordResponsePtrOutput)
}

// The list of MX records in the record set.
func (o RecordSetPropertiesResponsePtrOutput) MXRecords() MxRecordResponseArrayOutput {
	return o.ApplyT(func(v *RecordSetPropertiesResponse) []MxRecordResponse {
		if v == nil {
			return nil
		}
		return v.MXRecords
	}).(MxRecordResponseArrayOutput)
}

// The list of NS records in the record set.
func (o RecordSetPropertiesResponsePtrOutput) NSRecords() NsRecordResponseArrayOutput {
	return o.ApplyT(func(v *RecordSetPropertiesResponse) []NsRecordResponse {
		if v == nil {
			return nil
		}
		return v.NSRecords
	}).(NsRecordResponseArrayOutput)
}

// The list of PTR records in the record set.
func (o RecordSetPropertiesResponsePtrOutput) PTRRecords() PtrRecordResponseArrayOutput {
	return o.ApplyT(func(v *RecordSetPropertiesResponse) []PtrRecordResponse {
		if v == nil {
			return nil
		}
		return v.PTRRecords
	}).(PtrRecordResponseArrayOutput)
}

// The SOA record in the record set.
func (o RecordSetPropertiesResponsePtrOutput) SOARecord() SoaRecordResponsePtrOutput {
	return o.ApplyT(func(v *RecordSetPropertiesResponse) *SoaRecordResponse {
		if v == nil {
			return nil
		}
		return v.SOARecord
	}).(SoaRecordResponsePtrOutput)
}

// The list of SRV records in the record set.
func (o RecordSetPropertiesResponsePtrOutput) SRVRecords() SrvRecordResponseArrayOutput {
	return o.ApplyT(func(v *RecordSetPropertiesResponse) []SrvRecordResponse {
		if v == nil {
			return nil
		}
		return v.SRVRecords
	}).(SrvRecordResponseArrayOutput)
}

// The TTL (time-to-live) of the records in the record set.
func (o RecordSetPropertiesResponsePtrOutput) TTL() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordSetPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.TTL
	}).(pulumi.IntPtrOutput)
}

// The list of TXT records in the record set.
func (o RecordSetPropertiesResponsePtrOutput) TXTRecords() TxtRecordResponseArrayOutput {
	return o.ApplyT(func(v *RecordSetPropertiesResponse) []TxtRecordResponse {
		if v == nil {
			return nil
		}
		return v.TXTRecords
	}).(TxtRecordResponseArrayOutput)
}

// The list of CAA records in the record set.
func (o RecordSetPropertiesResponsePtrOutput) CaaRecords() CaaRecordResponseArrayOutput {
	return o.ApplyT(func(v *RecordSetPropertiesResponse) []CaaRecordResponse {
		if v == nil {
			return nil
		}
		return v.CaaRecords
	}).(CaaRecordResponseArrayOutput)
}

// Fully qualified domain name of the record set.
func (o RecordSetPropertiesResponsePtrOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordSetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Fqdn
	}).(pulumi.StringPtrOutput)
}

// The metadata attached to the record set.
func (o RecordSetPropertiesResponsePtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RecordSetPropertiesResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// provisioning State of the record set.
func (o RecordSetPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordSetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// A reference to an azure resource from where the dns resource value is taken.
func (o RecordSetPropertiesResponsePtrOutput) TargetResource() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *RecordSetPropertiesResponse) *SubResourceResponse {
		if v == nil {
			return nil
		}
		return v.TargetResource
	}).(SubResourceResponsePtrOutput)
}

// An SOA record.
type SoaRecord struct {
	// The email contact for this SOA record.
	Email *string `pulumi:"email"`
	// The expire time for this SOA record.
	ExpireTime *int `pulumi:"expireTime"`
	// The domain name of the authoritative name server for this SOA record.
	Host *string `pulumi:"host"`
	// The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
	MinimumTTL *int `pulumi:"minimumTTL"`
	// The refresh value for this SOA record.
	RefreshTime *int `pulumi:"refreshTime"`
	// The retry time for this SOA record.
	RetryTime *int `pulumi:"retryTime"`
	// The serial number for this SOA record.
	SerialNumber *int `pulumi:"serialNumber"`
}

// SoaRecordInput is an input type that accepts SoaRecordArgs and SoaRecordOutput values.
// You can construct a concrete instance of `SoaRecordInput` via:
//
//          SoaRecordArgs{...}
type SoaRecordInput interface {
	pulumi.Input

	ToSoaRecordOutput() SoaRecordOutput
	ToSoaRecordOutputWithContext(context.Context) SoaRecordOutput
}

// An SOA record.
type SoaRecordArgs struct {
	// The email contact for this SOA record.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// The expire time for this SOA record.
	ExpireTime pulumi.IntPtrInput `pulumi:"expireTime"`
	// The domain name of the authoritative name server for this SOA record.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
	MinimumTTL pulumi.IntPtrInput `pulumi:"minimumTTL"`
	// The refresh value for this SOA record.
	RefreshTime pulumi.IntPtrInput `pulumi:"refreshTime"`
	// The retry time for this SOA record.
	RetryTime pulumi.IntPtrInput `pulumi:"retryTime"`
	// The serial number for this SOA record.
	SerialNumber pulumi.IntPtrInput `pulumi:"serialNumber"`
}

func (SoaRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SoaRecord)(nil)).Elem()
}

func (i SoaRecordArgs) ToSoaRecordOutput() SoaRecordOutput {
	return i.ToSoaRecordOutputWithContext(context.Background())
}

func (i SoaRecordArgs) ToSoaRecordOutputWithContext(ctx context.Context) SoaRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoaRecordOutput)
}

func (i SoaRecordArgs) ToSoaRecordPtrOutput() SoaRecordPtrOutput {
	return i.ToSoaRecordPtrOutputWithContext(context.Background())
}

func (i SoaRecordArgs) ToSoaRecordPtrOutputWithContext(ctx context.Context) SoaRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoaRecordOutput).ToSoaRecordPtrOutputWithContext(ctx)
}

// SoaRecordPtrInput is an input type that accepts SoaRecordArgs, SoaRecordPtr and SoaRecordPtrOutput values.
// You can construct a concrete instance of `SoaRecordPtrInput` via:
//
//          SoaRecordArgs{...}
//
//  or:
//
//          nil
type SoaRecordPtrInput interface {
	pulumi.Input

	ToSoaRecordPtrOutput() SoaRecordPtrOutput
	ToSoaRecordPtrOutputWithContext(context.Context) SoaRecordPtrOutput
}

type soaRecordPtrType SoaRecordArgs

func SoaRecordPtr(v *SoaRecordArgs) SoaRecordPtrInput {
	return (*soaRecordPtrType)(v)
}

func (*soaRecordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SoaRecord)(nil)).Elem()
}

func (i *soaRecordPtrType) ToSoaRecordPtrOutput() SoaRecordPtrOutput {
	return i.ToSoaRecordPtrOutputWithContext(context.Background())
}

func (i *soaRecordPtrType) ToSoaRecordPtrOutputWithContext(ctx context.Context) SoaRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoaRecordPtrOutput)
}

// An SOA record.
type SoaRecordOutput struct{ *pulumi.OutputState }

func (SoaRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoaRecord)(nil)).Elem()
}

func (o SoaRecordOutput) ToSoaRecordOutput() SoaRecordOutput {
	return o
}

func (o SoaRecordOutput) ToSoaRecordOutputWithContext(ctx context.Context) SoaRecordOutput {
	return o
}

func (o SoaRecordOutput) ToSoaRecordPtrOutput() SoaRecordPtrOutput {
	return o.ToSoaRecordPtrOutputWithContext(context.Background())
}

func (o SoaRecordOutput) ToSoaRecordPtrOutputWithContext(ctx context.Context) SoaRecordPtrOutput {
	return o.ApplyT(func(v SoaRecord) *SoaRecord {
		return &v
	}).(SoaRecordPtrOutput)
}

// The email contact for this SOA record.
func (o SoaRecordOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoaRecord) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// The expire time for this SOA record.
func (o SoaRecordOutput) ExpireTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SoaRecord) *int { return v.ExpireTime }).(pulumi.IntPtrOutput)
}

// The domain name of the authoritative name server for this SOA record.
func (o SoaRecordOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoaRecord) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
func (o SoaRecordOutput) MinimumTTL() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SoaRecord) *int { return v.MinimumTTL }).(pulumi.IntPtrOutput)
}

// The refresh value for this SOA record.
func (o SoaRecordOutput) RefreshTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SoaRecord) *int { return v.RefreshTime }).(pulumi.IntPtrOutput)
}

// The retry time for this SOA record.
func (o SoaRecordOutput) RetryTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SoaRecord) *int { return v.RetryTime }).(pulumi.IntPtrOutput)
}

// The serial number for this SOA record.
func (o SoaRecordOutput) SerialNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SoaRecord) *int { return v.SerialNumber }).(pulumi.IntPtrOutput)
}

type SoaRecordPtrOutput struct{ *pulumi.OutputState }

func (SoaRecordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoaRecord)(nil)).Elem()
}

func (o SoaRecordPtrOutput) ToSoaRecordPtrOutput() SoaRecordPtrOutput {
	return o
}

func (o SoaRecordPtrOutput) ToSoaRecordPtrOutputWithContext(ctx context.Context) SoaRecordPtrOutput {
	return o
}

func (o SoaRecordPtrOutput) Elem() SoaRecordOutput {
	return o.ApplyT(func(v *SoaRecord) SoaRecord { return *v }).(SoaRecordOutput)
}

// The email contact for this SOA record.
func (o SoaRecordPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoaRecord) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// The expire time for this SOA record.
func (o SoaRecordPtrOutput) ExpireTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SoaRecord) *int {
		if v == nil {
			return nil
		}
		return v.ExpireTime
	}).(pulumi.IntPtrOutput)
}

// The domain name of the authoritative name server for this SOA record.
func (o SoaRecordPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoaRecord) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
func (o SoaRecordPtrOutput) MinimumTTL() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SoaRecord) *int {
		if v == nil {
			return nil
		}
		return v.MinimumTTL
	}).(pulumi.IntPtrOutput)
}

// The refresh value for this SOA record.
func (o SoaRecordPtrOutput) RefreshTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SoaRecord) *int {
		if v == nil {
			return nil
		}
		return v.RefreshTime
	}).(pulumi.IntPtrOutput)
}

// The retry time for this SOA record.
func (o SoaRecordPtrOutput) RetryTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SoaRecord) *int {
		if v == nil {
			return nil
		}
		return v.RetryTime
	}).(pulumi.IntPtrOutput)
}

// The serial number for this SOA record.
func (o SoaRecordPtrOutput) SerialNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SoaRecord) *int {
		if v == nil {
			return nil
		}
		return v.SerialNumber
	}).(pulumi.IntPtrOutput)
}

// An SOA record.
type SoaRecordResponse struct {
	// The email contact for this SOA record.
	Email *string `pulumi:"email"`
	// The expire time for this SOA record.
	ExpireTime *int `pulumi:"expireTime"`
	// The domain name of the authoritative name server for this SOA record.
	Host *string `pulumi:"host"`
	// The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
	MinimumTTL *int `pulumi:"minimumTTL"`
	// The refresh value for this SOA record.
	RefreshTime *int `pulumi:"refreshTime"`
	// The retry time for this SOA record.
	RetryTime *int `pulumi:"retryTime"`
	// The serial number for this SOA record.
	SerialNumber *int `pulumi:"serialNumber"`
}

// SoaRecordResponseInput is an input type that accepts SoaRecordResponseArgs and SoaRecordResponseOutput values.
// You can construct a concrete instance of `SoaRecordResponseInput` via:
//
//          SoaRecordResponseArgs{...}
type SoaRecordResponseInput interface {
	pulumi.Input

	ToSoaRecordResponseOutput() SoaRecordResponseOutput
	ToSoaRecordResponseOutputWithContext(context.Context) SoaRecordResponseOutput
}

// An SOA record.
type SoaRecordResponseArgs struct {
	// The email contact for this SOA record.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// The expire time for this SOA record.
	ExpireTime pulumi.IntPtrInput `pulumi:"expireTime"`
	// The domain name of the authoritative name server for this SOA record.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
	MinimumTTL pulumi.IntPtrInput `pulumi:"minimumTTL"`
	// The refresh value for this SOA record.
	RefreshTime pulumi.IntPtrInput `pulumi:"refreshTime"`
	// The retry time for this SOA record.
	RetryTime pulumi.IntPtrInput `pulumi:"retryTime"`
	// The serial number for this SOA record.
	SerialNumber pulumi.IntPtrInput `pulumi:"serialNumber"`
}

func (SoaRecordResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SoaRecordResponse)(nil)).Elem()
}

func (i SoaRecordResponseArgs) ToSoaRecordResponseOutput() SoaRecordResponseOutput {
	return i.ToSoaRecordResponseOutputWithContext(context.Background())
}

func (i SoaRecordResponseArgs) ToSoaRecordResponseOutputWithContext(ctx context.Context) SoaRecordResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoaRecordResponseOutput)
}

func (i SoaRecordResponseArgs) ToSoaRecordResponsePtrOutput() SoaRecordResponsePtrOutput {
	return i.ToSoaRecordResponsePtrOutputWithContext(context.Background())
}

func (i SoaRecordResponseArgs) ToSoaRecordResponsePtrOutputWithContext(ctx context.Context) SoaRecordResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoaRecordResponseOutput).ToSoaRecordResponsePtrOutputWithContext(ctx)
}

// SoaRecordResponsePtrInput is an input type that accepts SoaRecordResponseArgs, SoaRecordResponsePtr and SoaRecordResponsePtrOutput values.
// You can construct a concrete instance of `SoaRecordResponsePtrInput` via:
//
//          SoaRecordResponseArgs{...}
//
//  or:
//
//          nil
type SoaRecordResponsePtrInput interface {
	pulumi.Input

	ToSoaRecordResponsePtrOutput() SoaRecordResponsePtrOutput
	ToSoaRecordResponsePtrOutputWithContext(context.Context) SoaRecordResponsePtrOutput
}

type soaRecordResponsePtrType SoaRecordResponseArgs

func SoaRecordResponsePtr(v *SoaRecordResponseArgs) SoaRecordResponsePtrInput {
	return (*soaRecordResponsePtrType)(v)
}

func (*soaRecordResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SoaRecordResponse)(nil)).Elem()
}

func (i *soaRecordResponsePtrType) ToSoaRecordResponsePtrOutput() SoaRecordResponsePtrOutput {
	return i.ToSoaRecordResponsePtrOutputWithContext(context.Background())
}

func (i *soaRecordResponsePtrType) ToSoaRecordResponsePtrOutputWithContext(ctx context.Context) SoaRecordResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoaRecordResponsePtrOutput)
}

// An SOA record.
type SoaRecordResponseOutput struct{ *pulumi.OutputState }

func (SoaRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoaRecordResponse)(nil)).Elem()
}

func (o SoaRecordResponseOutput) ToSoaRecordResponseOutput() SoaRecordResponseOutput {
	return o
}

func (o SoaRecordResponseOutput) ToSoaRecordResponseOutputWithContext(ctx context.Context) SoaRecordResponseOutput {
	return o
}

func (o SoaRecordResponseOutput) ToSoaRecordResponsePtrOutput() SoaRecordResponsePtrOutput {
	return o.ToSoaRecordResponsePtrOutputWithContext(context.Background())
}

func (o SoaRecordResponseOutput) ToSoaRecordResponsePtrOutputWithContext(ctx context.Context) SoaRecordResponsePtrOutput {
	return o.ApplyT(func(v SoaRecordResponse) *SoaRecordResponse {
		return &v
	}).(SoaRecordResponsePtrOutput)
}

// The email contact for this SOA record.
func (o SoaRecordResponseOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoaRecordResponse) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// The expire time for this SOA record.
func (o SoaRecordResponseOutput) ExpireTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SoaRecordResponse) *int { return v.ExpireTime }).(pulumi.IntPtrOutput)
}

// The domain name of the authoritative name server for this SOA record.
func (o SoaRecordResponseOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoaRecordResponse) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
func (o SoaRecordResponseOutput) MinimumTTL() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SoaRecordResponse) *int { return v.MinimumTTL }).(pulumi.IntPtrOutput)
}

// The refresh value for this SOA record.
func (o SoaRecordResponseOutput) RefreshTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SoaRecordResponse) *int { return v.RefreshTime }).(pulumi.IntPtrOutput)
}

// The retry time for this SOA record.
func (o SoaRecordResponseOutput) RetryTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SoaRecordResponse) *int { return v.RetryTime }).(pulumi.IntPtrOutput)
}

// The serial number for this SOA record.
func (o SoaRecordResponseOutput) SerialNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SoaRecordResponse) *int { return v.SerialNumber }).(pulumi.IntPtrOutput)
}

type SoaRecordResponsePtrOutput struct{ *pulumi.OutputState }

func (SoaRecordResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoaRecordResponse)(nil)).Elem()
}

func (o SoaRecordResponsePtrOutput) ToSoaRecordResponsePtrOutput() SoaRecordResponsePtrOutput {
	return o
}

func (o SoaRecordResponsePtrOutput) ToSoaRecordResponsePtrOutputWithContext(ctx context.Context) SoaRecordResponsePtrOutput {
	return o
}

func (o SoaRecordResponsePtrOutput) Elem() SoaRecordResponseOutput {
	return o.ApplyT(func(v *SoaRecordResponse) SoaRecordResponse { return *v }).(SoaRecordResponseOutput)
}

// The email contact for this SOA record.
func (o SoaRecordResponsePtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoaRecordResponse) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// The expire time for this SOA record.
func (o SoaRecordResponsePtrOutput) ExpireTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SoaRecordResponse) *int {
		if v == nil {
			return nil
		}
		return v.ExpireTime
	}).(pulumi.IntPtrOutput)
}

// The domain name of the authoritative name server for this SOA record.
func (o SoaRecordResponsePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoaRecordResponse) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
func (o SoaRecordResponsePtrOutput) MinimumTTL() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SoaRecordResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinimumTTL
	}).(pulumi.IntPtrOutput)
}

// The refresh value for this SOA record.
func (o SoaRecordResponsePtrOutput) RefreshTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SoaRecordResponse) *int {
		if v == nil {
			return nil
		}
		return v.RefreshTime
	}).(pulumi.IntPtrOutput)
}

// The retry time for this SOA record.
func (o SoaRecordResponsePtrOutput) RetryTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SoaRecordResponse) *int {
		if v == nil {
			return nil
		}
		return v.RetryTime
	}).(pulumi.IntPtrOutput)
}

// The serial number for this SOA record.
func (o SoaRecordResponsePtrOutput) SerialNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SoaRecordResponse) *int {
		if v == nil {
			return nil
		}
		return v.SerialNumber
	}).(pulumi.IntPtrOutput)
}

// An SRV record.
type SrvRecord struct {
	// The port value for this SRV record.
	Port *int `pulumi:"port"`
	// The priority value for this SRV record.
	Priority *int `pulumi:"priority"`
	// The target domain name for this SRV record.
	Target *string `pulumi:"target"`
	// The weight value for this SRV record.
	Weight *int `pulumi:"weight"`
}

// SrvRecordInput is an input type that accepts SrvRecordArgs and SrvRecordOutput values.
// You can construct a concrete instance of `SrvRecordInput` via:
//
//          SrvRecordArgs{...}
type SrvRecordInput interface {
	pulumi.Input

	ToSrvRecordOutput() SrvRecordOutput
	ToSrvRecordOutputWithContext(context.Context) SrvRecordOutput
}

// An SRV record.
type SrvRecordArgs struct {
	// The port value for this SRV record.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The priority value for this SRV record.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The target domain name for this SRV record.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// The weight value for this SRV record.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (SrvRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SrvRecord)(nil)).Elem()
}

func (i SrvRecordArgs) ToSrvRecordOutput() SrvRecordOutput {
	return i.ToSrvRecordOutputWithContext(context.Background())
}

func (i SrvRecordArgs) ToSrvRecordOutputWithContext(ctx context.Context) SrvRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SrvRecordOutput)
}

// SrvRecordArrayInput is an input type that accepts SrvRecordArray and SrvRecordArrayOutput values.
// You can construct a concrete instance of `SrvRecordArrayInput` via:
//
//          SrvRecordArray{ SrvRecordArgs{...} }
type SrvRecordArrayInput interface {
	pulumi.Input

	ToSrvRecordArrayOutput() SrvRecordArrayOutput
	ToSrvRecordArrayOutputWithContext(context.Context) SrvRecordArrayOutput
}

type SrvRecordArray []SrvRecordInput

func (SrvRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SrvRecord)(nil)).Elem()
}

func (i SrvRecordArray) ToSrvRecordArrayOutput() SrvRecordArrayOutput {
	return i.ToSrvRecordArrayOutputWithContext(context.Background())
}

func (i SrvRecordArray) ToSrvRecordArrayOutputWithContext(ctx context.Context) SrvRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SrvRecordArrayOutput)
}

// An SRV record.
type SrvRecordOutput struct{ *pulumi.OutputState }

func (SrvRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SrvRecord)(nil)).Elem()
}

func (o SrvRecordOutput) ToSrvRecordOutput() SrvRecordOutput {
	return o
}

func (o SrvRecordOutput) ToSrvRecordOutputWithContext(ctx context.Context) SrvRecordOutput {
	return o
}

// The port value for this SRV record.
func (o SrvRecordOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SrvRecord) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The priority value for this SRV record.
func (o SrvRecordOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SrvRecord) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The target domain name for this SRV record.
func (o SrvRecordOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SrvRecord) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// The weight value for this SRV record.
func (o SrvRecordOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SrvRecord) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type SrvRecordArrayOutput struct{ *pulumi.OutputState }

func (SrvRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SrvRecord)(nil)).Elem()
}

func (o SrvRecordArrayOutput) ToSrvRecordArrayOutput() SrvRecordArrayOutput {
	return o
}

func (o SrvRecordArrayOutput) ToSrvRecordArrayOutputWithContext(ctx context.Context) SrvRecordArrayOutput {
	return o
}

func (o SrvRecordArrayOutput) Index(i pulumi.IntInput) SrvRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SrvRecord {
		return vs[0].([]SrvRecord)[vs[1].(int)]
	}).(SrvRecordOutput)
}

// An SRV record.
type SrvRecordResponse struct {
	// The port value for this SRV record.
	Port *int `pulumi:"port"`
	// The priority value for this SRV record.
	Priority *int `pulumi:"priority"`
	// The target domain name for this SRV record.
	Target *string `pulumi:"target"`
	// The weight value for this SRV record.
	Weight *int `pulumi:"weight"`
}

// SrvRecordResponseInput is an input type that accepts SrvRecordResponseArgs and SrvRecordResponseOutput values.
// You can construct a concrete instance of `SrvRecordResponseInput` via:
//
//          SrvRecordResponseArgs{...}
type SrvRecordResponseInput interface {
	pulumi.Input

	ToSrvRecordResponseOutput() SrvRecordResponseOutput
	ToSrvRecordResponseOutputWithContext(context.Context) SrvRecordResponseOutput
}

// An SRV record.
type SrvRecordResponseArgs struct {
	// The port value for this SRV record.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The priority value for this SRV record.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The target domain name for this SRV record.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// The weight value for this SRV record.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (SrvRecordResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SrvRecordResponse)(nil)).Elem()
}

func (i SrvRecordResponseArgs) ToSrvRecordResponseOutput() SrvRecordResponseOutput {
	return i.ToSrvRecordResponseOutputWithContext(context.Background())
}

func (i SrvRecordResponseArgs) ToSrvRecordResponseOutputWithContext(ctx context.Context) SrvRecordResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SrvRecordResponseOutput)
}

// SrvRecordResponseArrayInput is an input type that accepts SrvRecordResponseArray and SrvRecordResponseArrayOutput values.
// You can construct a concrete instance of `SrvRecordResponseArrayInput` via:
//
//          SrvRecordResponseArray{ SrvRecordResponseArgs{...} }
type SrvRecordResponseArrayInput interface {
	pulumi.Input

	ToSrvRecordResponseArrayOutput() SrvRecordResponseArrayOutput
	ToSrvRecordResponseArrayOutputWithContext(context.Context) SrvRecordResponseArrayOutput
}

type SrvRecordResponseArray []SrvRecordResponseInput

func (SrvRecordResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SrvRecordResponse)(nil)).Elem()
}

func (i SrvRecordResponseArray) ToSrvRecordResponseArrayOutput() SrvRecordResponseArrayOutput {
	return i.ToSrvRecordResponseArrayOutputWithContext(context.Background())
}

func (i SrvRecordResponseArray) ToSrvRecordResponseArrayOutputWithContext(ctx context.Context) SrvRecordResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SrvRecordResponseArrayOutput)
}

// An SRV record.
type SrvRecordResponseOutput struct{ *pulumi.OutputState }

func (SrvRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SrvRecordResponse)(nil)).Elem()
}

func (o SrvRecordResponseOutput) ToSrvRecordResponseOutput() SrvRecordResponseOutput {
	return o
}

func (o SrvRecordResponseOutput) ToSrvRecordResponseOutputWithContext(ctx context.Context) SrvRecordResponseOutput {
	return o
}

// The port value for this SRV record.
func (o SrvRecordResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SrvRecordResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The priority value for this SRV record.
func (o SrvRecordResponseOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SrvRecordResponse) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The target domain name for this SRV record.
func (o SrvRecordResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SrvRecordResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// The weight value for this SRV record.
func (o SrvRecordResponseOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SrvRecordResponse) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type SrvRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (SrvRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SrvRecordResponse)(nil)).Elem()
}

func (o SrvRecordResponseArrayOutput) ToSrvRecordResponseArrayOutput() SrvRecordResponseArrayOutput {
	return o
}

func (o SrvRecordResponseArrayOutput) ToSrvRecordResponseArrayOutputWithContext(ctx context.Context) SrvRecordResponseArrayOutput {
	return o
}

func (o SrvRecordResponseArrayOutput) Index(i pulumi.IntInput) SrvRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SrvRecordResponse {
		return vs[0].([]SrvRecordResponse)[vs[1].(int)]
	}).(SrvRecordResponseOutput)
}

// A reference to a another resource
type SubResource struct {
	// Resource Id.
	Id *string `pulumi:"id"`
}

// SubResourceInput is an input type that accepts SubResourceArgs and SubResourceOutput values.
// You can construct a concrete instance of `SubResourceInput` via:
//
//          SubResourceArgs{...}
type SubResourceInput interface {
	pulumi.Input

	ToSubResourceOutput() SubResourceOutput
	ToSubResourceOutputWithContext(context.Context) SubResourceOutput
}

// A reference to a another resource
type SubResourceArgs struct {
	// Resource Id.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SubResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResource)(nil)).Elem()
}

func (i SubResourceArgs) ToSubResourceOutput() SubResourceOutput {
	return i.ToSubResourceOutputWithContext(context.Background())
}

func (i SubResourceArgs) ToSubResourceOutputWithContext(ctx context.Context) SubResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceOutput)
}

func (i SubResourceArgs) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return i.ToSubResourcePtrOutputWithContext(context.Background())
}

func (i SubResourceArgs) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceOutput).ToSubResourcePtrOutputWithContext(ctx)
}

// SubResourcePtrInput is an input type that accepts SubResourceArgs, SubResourcePtr and SubResourcePtrOutput values.
// You can construct a concrete instance of `SubResourcePtrInput` via:
//
//          SubResourceArgs{...}
//
//  or:
//
//          nil
type SubResourcePtrInput interface {
	pulumi.Input

	ToSubResourcePtrOutput() SubResourcePtrOutput
	ToSubResourcePtrOutputWithContext(context.Context) SubResourcePtrOutput
}

type subResourcePtrType SubResourceArgs

func SubResourcePtr(v *SubResourceArgs) SubResourcePtrInput {
	return (*subResourcePtrType)(v)
}

func (*subResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResource)(nil)).Elem()
}

func (i *subResourcePtrType) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return i.ToSubResourcePtrOutputWithContext(context.Background())
}

func (i *subResourcePtrType) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourcePtrOutput)
}

// SubResourceArrayInput is an input type that accepts SubResourceArray and SubResourceArrayOutput values.
// You can construct a concrete instance of `SubResourceArrayInput` via:
//
//          SubResourceArray{ SubResourceArgs{...} }
type SubResourceArrayInput interface {
	pulumi.Input

	ToSubResourceArrayOutput() SubResourceArrayOutput
	ToSubResourceArrayOutputWithContext(context.Context) SubResourceArrayOutput
}

type SubResourceArray []SubResourceInput

func (SubResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResource)(nil)).Elem()
}

func (i SubResourceArray) ToSubResourceArrayOutput() SubResourceArrayOutput {
	return i.ToSubResourceArrayOutputWithContext(context.Background())
}

func (i SubResourceArray) ToSubResourceArrayOutputWithContext(ctx context.Context) SubResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceArrayOutput)
}

// A reference to a another resource
type SubResourceOutput struct{ *pulumi.OutputState }

func (SubResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResource)(nil)).Elem()
}

func (o SubResourceOutput) ToSubResourceOutput() SubResourceOutput {
	return o
}

func (o SubResourceOutput) ToSubResourceOutputWithContext(ctx context.Context) SubResourceOutput {
	return o
}

func (o SubResourceOutput) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return o.ToSubResourcePtrOutputWithContext(context.Background())
}

func (o SubResourceOutput) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return o.ApplyT(func(v SubResource) *SubResource {
		return &v
	}).(SubResourcePtrOutput)
}

// Resource Id.
func (o SubResourceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubResource) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubResourcePtrOutput struct{ *pulumi.OutputState }

func (SubResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResource)(nil)).Elem()
}

func (o SubResourcePtrOutput) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return o
}

func (o SubResourcePtrOutput) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return o
}

func (o SubResourcePtrOutput) Elem() SubResourceOutput {
	return o.ApplyT(func(v *SubResource) SubResource { return *v }).(SubResourceOutput)
}

// Resource Id.
func (o SubResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubResource) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type SubResourceArrayOutput struct{ *pulumi.OutputState }

func (SubResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResource)(nil)).Elem()
}

func (o SubResourceArrayOutput) ToSubResourceArrayOutput() SubResourceArrayOutput {
	return o
}

func (o SubResourceArrayOutput) ToSubResourceArrayOutputWithContext(ctx context.Context) SubResourceArrayOutput {
	return o
}

func (o SubResourceArrayOutput) Index(i pulumi.IntInput) SubResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubResource {
		return vs[0].([]SubResource)[vs[1].(int)]
	}).(SubResourceOutput)
}

// A reference to a another resource
type SubResourceResponse struct {
	// Resource Id.
	Id *string `pulumi:"id"`
}

// SubResourceResponseInput is an input type that accepts SubResourceResponseArgs and SubResourceResponseOutput values.
// You can construct a concrete instance of `SubResourceResponseInput` via:
//
//          SubResourceResponseArgs{...}
type SubResourceResponseInput interface {
	pulumi.Input

	ToSubResourceResponseOutput() SubResourceResponseOutput
	ToSubResourceResponseOutputWithContext(context.Context) SubResourceResponseOutput
}

// A reference to a another resource
type SubResourceResponseArgs struct {
	// Resource Id.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SubResourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResourceResponse)(nil)).Elem()
}

func (i SubResourceResponseArgs) ToSubResourceResponseOutput() SubResourceResponseOutput {
	return i.ToSubResourceResponseOutputWithContext(context.Background())
}

func (i SubResourceResponseArgs) ToSubResourceResponseOutputWithContext(ctx context.Context) SubResourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceResponseOutput)
}

func (i SubResourceResponseArgs) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return i.ToSubResourceResponsePtrOutputWithContext(context.Background())
}

func (i SubResourceResponseArgs) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceResponseOutput).ToSubResourceResponsePtrOutputWithContext(ctx)
}

// SubResourceResponsePtrInput is an input type that accepts SubResourceResponseArgs, SubResourceResponsePtr and SubResourceResponsePtrOutput values.
// You can construct a concrete instance of `SubResourceResponsePtrInput` via:
//
//          SubResourceResponseArgs{...}
//
//  or:
//
//          nil
type SubResourceResponsePtrInput interface {
	pulumi.Input

	ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput
	ToSubResourceResponsePtrOutputWithContext(context.Context) SubResourceResponsePtrOutput
}

type subResourceResponsePtrType SubResourceResponseArgs

func SubResourceResponsePtr(v *SubResourceResponseArgs) SubResourceResponsePtrInput {
	return (*subResourceResponsePtrType)(v)
}

func (*subResourceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResourceResponse)(nil)).Elem()
}

func (i *subResourceResponsePtrType) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return i.ToSubResourceResponsePtrOutputWithContext(context.Background())
}

func (i *subResourceResponsePtrType) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceResponsePtrOutput)
}

// SubResourceResponseArrayInput is an input type that accepts SubResourceResponseArray and SubResourceResponseArrayOutput values.
// You can construct a concrete instance of `SubResourceResponseArrayInput` via:
//
//          SubResourceResponseArray{ SubResourceResponseArgs{...} }
type SubResourceResponseArrayInput interface {
	pulumi.Input

	ToSubResourceResponseArrayOutput() SubResourceResponseArrayOutput
	ToSubResourceResponseArrayOutputWithContext(context.Context) SubResourceResponseArrayOutput
}

type SubResourceResponseArray []SubResourceResponseInput

func (SubResourceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResourceResponse)(nil)).Elem()
}

func (i SubResourceResponseArray) ToSubResourceResponseArrayOutput() SubResourceResponseArrayOutput {
	return i.ToSubResourceResponseArrayOutputWithContext(context.Background())
}

func (i SubResourceResponseArray) ToSubResourceResponseArrayOutputWithContext(ctx context.Context) SubResourceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceResponseArrayOutput)
}

// A reference to a another resource
type SubResourceResponseOutput struct{ *pulumi.OutputState }

func (SubResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponseOutput) ToSubResourceResponseOutput() SubResourceResponseOutput {
	return o
}

func (o SubResourceResponseOutput) ToSubResourceResponseOutputWithContext(ctx context.Context) SubResourceResponseOutput {
	return o
}

func (o SubResourceResponseOutput) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return o.ToSubResourceResponsePtrOutputWithContext(context.Background())
}

func (o SubResourceResponseOutput) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return o.ApplyT(func(v SubResourceResponse) *SubResourceResponse {
		return &v
	}).(SubResourceResponsePtrOutput)
}

// Resource Id.
func (o SubResourceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubResourceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubResourceResponsePtrOutput struct{ *pulumi.OutputState }

func (SubResourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponsePtrOutput) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return o
}

func (o SubResourceResponsePtrOutput) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return o
}

func (o SubResourceResponsePtrOutput) Elem() SubResourceResponseOutput {
	return o.ApplyT(func(v *SubResourceResponse) SubResourceResponse { return *v }).(SubResourceResponseOutput)
}

// Resource Id.
func (o SubResourceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubResourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type SubResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (SubResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponseArrayOutput) ToSubResourceResponseArrayOutput() SubResourceResponseArrayOutput {
	return o
}

func (o SubResourceResponseArrayOutput) ToSubResourceResponseArrayOutputWithContext(ctx context.Context) SubResourceResponseArrayOutput {
	return o
}

func (o SubResourceResponseArrayOutput) Index(i pulumi.IntInput) SubResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubResourceResponse {
		return vs[0].([]SubResourceResponse)[vs[1].(int)]
	}).(SubResourceResponseOutput)
}

// A TXT record.
type TxtRecord struct {
	// The text value of this TXT record.
	Value []string `pulumi:"value"`
}

// TxtRecordInput is an input type that accepts TxtRecordArgs and TxtRecordOutput values.
// You can construct a concrete instance of `TxtRecordInput` via:
//
//          TxtRecordArgs{...}
type TxtRecordInput interface {
	pulumi.Input

	ToTxtRecordOutput() TxtRecordOutput
	ToTxtRecordOutputWithContext(context.Context) TxtRecordOutput
}

// A TXT record.
type TxtRecordArgs struct {
	// The text value of this TXT record.
	Value pulumi.StringArrayInput `pulumi:"value"`
}

func (TxtRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TxtRecord)(nil)).Elem()
}

func (i TxtRecordArgs) ToTxtRecordOutput() TxtRecordOutput {
	return i.ToTxtRecordOutputWithContext(context.Background())
}

func (i TxtRecordArgs) ToTxtRecordOutputWithContext(ctx context.Context) TxtRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TxtRecordOutput)
}

// TxtRecordArrayInput is an input type that accepts TxtRecordArray and TxtRecordArrayOutput values.
// You can construct a concrete instance of `TxtRecordArrayInput` via:
//
//          TxtRecordArray{ TxtRecordArgs{...} }
type TxtRecordArrayInput interface {
	pulumi.Input

	ToTxtRecordArrayOutput() TxtRecordArrayOutput
	ToTxtRecordArrayOutputWithContext(context.Context) TxtRecordArrayOutput
}

type TxtRecordArray []TxtRecordInput

func (TxtRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TxtRecord)(nil)).Elem()
}

func (i TxtRecordArray) ToTxtRecordArrayOutput() TxtRecordArrayOutput {
	return i.ToTxtRecordArrayOutputWithContext(context.Background())
}

func (i TxtRecordArray) ToTxtRecordArrayOutputWithContext(ctx context.Context) TxtRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TxtRecordArrayOutput)
}

// A TXT record.
type TxtRecordOutput struct{ *pulumi.OutputState }

func (TxtRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TxtRecord)(nil)).Elem()
}

func (o TxtRecordOutput) ToTxtRecordOutput() TxtRecordOutput {
	return o
}

func (o TxtRecordOutput) ToTxtRecordOutputWithContext(ctx context.Context) TxtRecordOutput {
	return o
}

// The text value of this TXT record.
func (o TxtRecordOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TxtRecord) []string { return v.Value }).(pulumi.StringArrayOutput)
}

type TxtRecordArrayOutput struct{ *pulumi.OutputState }

func (TxtRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TxtRecord)(nil)).Elem()
}

func (o TxtRecordArrayOutput) ToTxtRecordArrayOutput() TxtRecordArrayOutput {
	return o
}

func (o TxtRecordArrayOutput) ToTxtRecordArrayOutputWithContext(ctx context.Context) TxtRecordArrayOutput {
	return o
}

func (o TxtRecordArrayOutput) Index(i pulumi.IntInput) TxtRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TxtRecord {
		return vs[0].([]TxtRecord)[vs[1].(int)]
	}).(TxtRecordOutput)
}

// A TXT record.
type TxtRecordResponse struct {
	// The text value of this TXT record.
	Value []string `pulumi:"value"`
}

// TxtRecordResponseInput is an input type that accepts TxtRecordResponseArgs and TxtRecordResponseOutput values.
// You can construct a concrete instance of `TxtRecordResponseInput` via:
//
//          TxtRecordResponseArgs{...}
type TxtRecordResponseInput interface {
	pulumi.Input

	ToTxtRecordResponseOutput() TxtRecordResponseOutput
	ToTxtRecordResponseOutputWithContext(context.Context) TxtRecordResponseOutput
}

// A TXT record.
type TxtRecordResponseArgs struct {
	// The text value of this TXT record.
	Value pulumi.StringArrayInput `pulumi:"value"`
}

func (TxtRecordResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TxtRecordResponse)(nil)).Elem()
}

func (i TxtRecordResponseArgs) ToTxtRecordResponseOutput() TxtRecordResponseOutput {
	return i.ToTxtRecordResponseOutputWithContext(context.Background())
}

func (i TxtRecordResponseArgs) ToTxtRecordResponseOutputWithContext(ctx context.Context) TxtRecordResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TxtRecordResponseOutput)
}

// TxtRecordResponseArrayInput is an input type that accepts TxtRecordResponseArray and TxtRecordResponseArrayOutput values.
// You can construct a concrete instance of `TxtRecordResponseArrayInput` via:
//
//          TxtRecordResponseArray{ TxtRecordResponseArgs{...} }
type TxtRecordResponseArrayInput interface {
	pulumi.Input

	ToTxtRecordResponseArrayOutput() TxtRecordResponseArrayOutput
	ToTxtRecordResponseArrayOutputWithContext(context.Context) TxtRecordResponseArrayOutput
}

type TxtRecordResponseArray []TxtRecordResponseInput

func (TxtRecordResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TxtRecordResponse)(nil)).Elem()
}

func (i TxtRecordResponseArray) ToTxtRecordResponseArrayOutput() TxtRecordResponseArrayOutput {
	return i.ToTxtRecordResponseArrayOutputWithContext(context.Background())
}

func (i TxtRecordResponseArray) ToTxtRecordResponseArrayOutputWithContext(ctx context.Context) TxtRecordResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TxtRecordResponseArrayOutput)
}

// A TXT record.
type TxtRecordResponseOutput struct{ *pulumi.OutputState }

func (TxtRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TxtRecordResponse)(nil)).Elem()
}

func (o TxtRecordResponseOutput) ToTxtRecordResponseOutput() TxtRecordResponseOutput {
	return o
}

func (o TxtRecordResponseOutput) ToTxtRecordResponseOutputWithContext(ctx context.Context) TxtRecordResponseOutput {
	return o
}

// The text value of this TXT record.
func (o TxtRecordResponseOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TxtRecordResponse) []string { return v.Value }).(pulumi.StringArrayOutput)
}

type TxtRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (TxtRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TxtRecordResponse)(nil)).Elem()
}

func (o TxtRecordResponseArrayOutput) ToTxtRecordResponseArrayOutput() TxtRecordResponseArrayOutput {
	return o
}

func (o TxtRecordResponseArrayOutput) ToTxtRecordResponseArrayOutputWithContext(ctx context.Context) TxtRecordResponseArrayOutput {
	return o
}

func (o TxtRecordResponseArrayOutput) Index(i pulumi.IntInput) TxtRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TxtRecordResponse {
		return vs[0].([]TxtRecordResponse)[vs[1].(int)]
	}).(TxtRecordResponseOutput)
}

// Describes a DNS zone.
type ZoneType struct {
	// The etag of the zone.
	Etag *string `pulumi:"etag"`
	// Resource location.
	Location string `pulumi:"location"`
	// Resource name.
	Name string `pulumi:"name"`
	// The properties of the zone.
	Properties ZonePropertiesResponse `pulumi:"properties"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Resource type.
	Type string `pulumi:"type"`
}

// ZoneTypeInput is an input type that accepts ZoneTypeArgs and ZoneTypeOutput values.
// You can construct a concrete instance of `ZoneTypeInput` via:
//
//          ZoneTypeArgs{...}
type ZoneTypeInput interface {
	pulumi.Input

	ToZoneTypeOutput() ZoneTypeOutput
	ToZoneTypeOutputWithContext(context.Context) ZoneTypeOutput
}

// Describes a DNS zone.
type ZoneTypeArgs struct {
	// The etag of the zone.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// Resource location.
	Location pulumi.StringInput `pulumi:"location"`
	// Resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of the zone.
	Properties ZonePropertiesResponseInput `pulumi:"properties"`
	// Resource tags.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ZoneTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneType)(nil)).Elem()
}

func (i ZoneTypeArgs) ToZoneTypeOutput() ZoneTypeOutput {
	return i.ToZoneTypeOutputWithContext(context.Background())
}

func (i ZoneTypeArgs) ToZoneTypeOutputWithContext(ctx context.Context) ZoneTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneTypeOutput)
}

// Describes a DNS zone.
type ZoneTypeOutput struct{ *pulumi.OutputState }

func (ZoneTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneType)(nil)).Elem()
}

func (o ZoneTypeOutput) ToZoneTypeOutput() ZoneTypeOutput {
	return o
}

func (o ZoneTypeOutput) ToZoneTypeOutputWithContext(ctx context.Context) ZoneTypeOutput {
	return o
}

// The etag of the zone.
func (o ZoneTypeOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZoneType) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// Resource location.
func (o ZoneTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ZoneType) string { return v.Location }).(pulumi.StringOutput)
}

// Resource name.
func (o ZoneTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ZoneType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of the zone.
func (o ZoneTypeOutput) Properties() ZonePropertiesResponseOutput {
	return o.ApplyT(func(v ZoneType) ZonePropertiesResponse { return v.Properties }).(ZonePropertiesResponseOutput)
}

// Resource tags.
func (o ZoneTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ZoneType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type.
func (o ZoneTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ZoneType) string { return v.Type }).(pulumi.StringOutput)
}

// Represents the properties of the zone.
type ZoneProperties struct {
	// A list of references to virtual networks that register hostnames in this DNS zone. This is a only when ZoneType is Private.
	RegistrationVirtualNetworks []SubResource `pulumi:"registrationVirtualNetworks"`
	// A list of references to virtual networks that resolve records in this DNS zone. This is a only when ZoneType is Private.
	ResolutionVirtualNetworks []SubResource `pulumi:"resolutionVirtualNetworks"`
	// The type of this DNS zone (Public or Private).
	ZoneType *string `pulumi:"zoneType"`
}

// ZonePropertiesInput is an input type that accepts ZonePropertiesArgs and ZonePropertiesOutput values.
// You can construct a concrete instance of `ZonePropertiesInput` via:
//
//          ZonePropertiesArgs{...}
type ZonePropertiesInput interface {
	pulumi.Input

	ToZonePropertiesOutput() ZonePropertiesOutput
	ToZonePropertiesOutputWithContext(context.Context) ZonePropertiesOutput
}

// Represents the properties of the zone.
type ZonePropertiesArgs struct {
	// A list of references to virtual networks that register hostnames in this DNS zone. This is a only when ZoneType is Private.
	RegistrationVirtualNetworks SubResourceArrayInput `pulumi:"registrationVirtualNetworks"`
	// A list of references to virtual networks that resolve records in this DNS zone. This is a only when ZoneType is Private.
	ResolutionVirtualNetworks SubResourceArrayInput `pulumi:"resolutionVirtualNetworks"`
	// The type of this DNS zone (Public or Private).
	ZoneType pulumi.StringPtrInput `pulumi:"zoneType"`
}

func (ZonePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneProperties)(nil)).Elem()
}

func (i ZonePropertiesArgs) ToZonePropertiesOutput() ZonePropertiesOutput {
	return i.ToZonePropertiesOutputWithContext(context.Background())
}

func (i ZonePropertiesArgs) ToZonePropertiesOutputWithContext(ctx context.Context) ZonePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonePropertiesOutput)
}

func (i ZonePropertiesArgs) ToZonePropertiesPtrOutput() ZonePropertiesPtrOutput {
	return i.ToZonePropertiesPtrOutputWithContext(context.Background())
}

func (i ZonePropertiesArgs) ToZonePropertiesPtrOutputWithContext(ctx context.Context) ZonePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonePropertiesOutput).ToZonePropertiesPtrOutputWithContext(ctx)
}

// ZonePropertiesPtrInput is an input type that accepts ZonePropertiesArgs, ZonePropertiesPtr and ZonePropertiesPtrOutput values.
// You can construct a concrete instance of `ZonePropertiesPtrInput` via:
//
//          ZonePropertiesArgs{...}
//
//  or:
//
//          nil
type ZonePropertiesPtrInput interface {
	pulumi.Input

	ToZonePropertiesPtrOutput() ZonePropertiesPtrOutput
	ToZonePropertiesPtrOutputWithContext(context.Context) ZonePropertiesPtrOutput
}

type zonePropertiesPtrType ZonePropertiesArgs

func ZonePropertiesPtr(v *ZonePropertiesArgs) ZonePropertiesPtrInput {
	return (*zonePropertiesPtrType)(v)
}

func (*zonePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneProperties)(nil)).Elem()
}

func (i *zonePropertiesPtrType) ToZonePropertiesPtrOutput() ZonePropertiesPtrOutput {
	return i.ToZonePropertiesPtrOutputWithContext(context.Background())
}

func (i *zonePropertiesPtrType) ToZonePropertiesPtrOutputWithContext(ctx context.Context) ZonePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonePropertiesPtrOutput)
}

// Represents the properties of the zone.
type ZonePropertiesOutput struct{ *pulumi.OutputState }

func (ZonePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneProperties)(nil)).Elem()
}

func (o ZonePropertiesOutput) ToZonePropertiesOutput() ZonePropertiesOutput {
	return o
}

func (o ZonePropertiesOutput) ToZonePropertiesOutputWithContext(ctx context.Context) ZonePropertiesOutput {
	return o
}

func (o ZonePropertiesOutput) ToZonePropertiesPtrOutput() ZonePropertiesPtrOutput {
	return o.ToZonePropertiesPtrOutputWithContext(context.Background())
}

func (o ZonePropertiesOutput) ToZonePropertiesPtrOutputWithContext(ctx context.Context) ZonePropertiesPtrOutput {
	return o.ApplyT(func(v ZoneProperties) *ZoneProperties {
		return &v
	}).(ZonePropertiesPtrOutput)
}

// A list of references to virtual networks that register hostnames in this DNS zone. This is a only when ZoneType is Private.
func (o ZonePropertiesOutput) RegistrationVirtualNetworks() SubResourceArrayOutput {
	return o.ApplyT(func(v ZoneProperties) []SubResource { return v.RegistrationVirtualNetworks }).(SubResourceArrayOutput)
}

// A list of references to virtual networks that resolve records in this DNS zone. This is a only when ZoneType is Private.
func (o ZonePropertiesOutput) ResolutionVirtualNetworks() SubResourceArrayOutput {
	return o.ApplyT(func(v ZoneProperties) []SubResource { return v.ResolutionVirtualNetworks }).(SubResourceArrayOutput)
}

// The type of this DNS zone (Public or Private).
func (o ZonePropertiesOutput) ZoneType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZoneProperties) *string { return v.ZoneType }).(pulumi.StringPtrOutput)
}

type ZonePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ZonePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneProperties)(nil)).Elem()
}

func (o ZonePropertiesPtrOutput) ToZonePropertiesPtrOutput() ZonePropertiesPtrOutput {
	return o
}

func (o ZonePropertiesPtrOutput) ToZonePropertiesPtrOutputWithContext(ctx context.Context) ZonePropertiesPtrOutput {
	return o
}

func (o ZonePropertiesPtrOutput) Elem() ZonePropertiesOutput {
	return o.ApplyT(func(v *ZoneProperties) ZoneProperties { return *v }).(ZonePropertiesOutput)
}

// A list of references to virtual networks that register hostnames in this DNS zone. This is a only when ZoneType is Private.
func (o ZonePropertiesPtrOutput) RegistrationVirtualNetworks() SubResourceArrayOutput {
	return o.ApplyT(func(v *ZoneProperties) []SubResource {
		if v == nil {
			return nil
		}
		return v.RegistrationVirtualNetworks
	}).(SubResourceArrayOutput)
}

// A list of references to virtual networks that resolve records in this DNS zone. This is a only when ZoneType is Private.
func (o ZonePropertiesPtrOutput) ResolutionVirtualNetworks() SubResourceArrayOutput {
	return o.ApplyT(func(v *ZoneProperties) []SubResource {
		if v == nil {
			return nil
		}
		return v.ResolutionVirtualNetworks
	}).(SubResourceArrayOutput)
}

// The type of this DNS zone (Public or Private).
func (o ZonePropertiesPtrOutput) ZoneType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZoneProperties) *string {
		if v == nil {
			return nil
		}
		return v.ZoneType
	}).(pulumi.StringPtrOutput)
}

// Represents the properties of the zone.
type ZonePropertiesResponse struct {
	// The maximum number of record sets that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
	MaxNumberOfRecordSets int `pulumi:"maxNumberOfRecordSets"`
	// The name servers for this DNS zone. This is a read-only property and any attempt to set this value will be ignored.
	NameServers []string `pulumi:"nameServers"`
	// The current number of record sets in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
	NumberOfRecordSets int `pulumi:"numberOfRecordSets"`
	// A list of references to virtual networks that register hostnames in this DNS zone. This is a only when ZoneType is Private.
	RegistrationVirtualNetworks []SubResourceResponse `pulumi:"registrationVirtualNetworks"`
	// A list of references to virtual networks that resolve records in this DNS zone. This is a only when ZoneType is Private.
	ResolutionVirtualNetworks []SubResourceResponse `pulumi:"resolutionVirtualNetworks"`
	// The type of this DNS zone (Public or Private).
	ZoneType *string `pulumi:"zoneType"`
}

// ZonePropertiesResponseInput is an input type that accepts ZonePropertiesResponseArgs and ZonePropertiesResponseOutput values.
// You can construct a concrete instance of `ZonePropertiesResponseInput` via:
//
//          ZonePropertiesResponseArgs{...}
type ZonePropertiesResponseInput interface {
	pulumi.Input

	ToZonePropertiesResponseOutput() ZonePropertiesResponseOutput
	ToZonePropertiesResponseOutputWithContext(context.Context) ZonePropertiesResponseOutput
}

// Represents the properties of the zone.
type ZonePropertiesResponseArgs struct {
	// The maximum number of record sets that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
	MaxNumberOfRecordSets pulumi.IntInput `pulumi:"maxNumberOfRecordSets"`
	// The name servers for this DNS zone. This is a read-only property and any attempt to set this value will be ignored.
	NameServers pulumi.StringArrayInput `pulumi:"nameServers"`
	// The current number of record sets in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
	NumberOfRecordSets pulumi.IntInput `pulumi:"numberOfRecordSets"`
	// A list of references to virtual networks that register hostnames in this DNS zone. This is a only when ZoneType is Private.
	RegistrationVirtualNetworks SubResourceResponseArrayInput `pulumi:"registrationVirtualNetworks"`
	// A list of references to virtual networks that resolve records in this DNS zone. This is a only when ZoneType is Private.
	ResolutionVirtualNetworks SubResourceResponseArrayInput `pulumi:"resolutionVirtualNetworks"`
	// The type of this DNS zone (Public or Private).
	ZoneType pulumi.StringPtrInput `pulumi:"zoneType"`
}

func (ZonePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonePropertiesResponse)(nil)).Elem()
}

func (i ZonePropertiesResponseArgs) ToZonePropertiesResponseOutput() ZonePropertiesResponseOutput {
	return i.ToZonePropertiesResponseOutputWithContext(context.Background())
}

func (i ZonePropertiesResponseArgs) ToZonePropertiesResponseOutputWithContext(ctx context.Context) ZonePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonePropertiesResponseOutput)
}

func (i ZonePropertiesResponseArgs) ToZonePropertiesResponsePtrOutput() ZonePropertiesResponsePtrOutput {
	return i.ToZonePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i ZonePropertiesResponseArgs) ToZonePropertiesResponsePtrOutputWithContext(ctx context.Context) ZonePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonePropertiesResponseOutput).ToZonePropertiesResponsePtrOutputWithContext(ctx)
}

// ZonePropertiesResponsePtrInput is an input type that accepts ZonePropertiesResponseArgs, ZonePropertiesResponsePtr and ZonePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `ZonePropertiesResponsePtrInput` via:
//
//          ZonePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type ZonePropertiesResponsePtrInput interface {
	pulumi.Input

	ToZonePropertiesResponsePtrOutput() ZonePropertiesResponsePtrOutput
	ToZonePropertiesResponsePtrOutputWithContext(context.Context) ZonePropertiesResponsePtrOutput
}

type zonePropertiesResponsePtrType ZonePropertiesResponseArgs

func ZonePropertiesResponsePtr(v *ZonePropertiesResponseArgs) ZonePropertiesResponsePtrInput {
	return (*zonePropertiesResponsePtrType)(v)
}

func (*zonePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ZonePropertiesResponse)(nil)).Elem()
}

func (i *zonePropertiesResponsePtrType) ToZonePropertiesResponsePtrOutput() ZonePropertiesResponsePtrOutput {
	return i.ToZonePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *zonePropertiesResponsePtrType) ToZonePropertiesResponsePtrOutputWithContext(ctx context.Context) ZonePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonePropertiesResponsePtrOutput)
}

// Represents the properties of the zone.
type ZonePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ZonePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonePropertiesResponse)(nil)).Elem()
}

func (o ZonePropertiesResponseOutput) ToZonePropertiesResponseOutput() ZonePropertiesResponseOutput {
	return o
}

func (o ZonePropertiesResponseOutput) ToZonePropertiesResponseOutputWithContext(ctx context.Context) ZonePropertiesResponseOutput {
	return o
}

func (o ZonePropertiesResponseOutput) ToZonePropertiesResponsePtrOutput() ZonePropertiesResponsePtrOutput {
	return o.ToZonePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ZonePropertiesResponseOutput) ToZonePropertiesResponsePtrOutputWithContext(ctx context.Context) ZonePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ZonePropertiesResponse) *ZonePropertiesResponse {
		return &v
	}).(ZonePropertiesResponsePtrOutput)
}

// The maximum number of record sets that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
func (o ZonePropertiesResponseOutput) MaxNumberOfRecordSets() pulumi.IntOutput {
	return o.ApplyT(func(v ZonePropertiesResponse) int { return v.MaxNumberOfRecordSets }).(pulumi.IntOutput)
}

// The name servers for this DNS zone. This is a read-only property and any attempt to set this value will be ignored.
func (o ZonePropertiesResponseOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZonePropertiesResponse) []string { return v.NameServers }).(pulumi.StringArrayOutput)
}

// The current number of record sets in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
func (o ZonePropertiesResponseOutput) NumberOfRecordSets() pulumi.IntOutput {
	return o.ApplyT(func(v ZonePropertiesResponse) int { return v.NumberOfRecordSets }).(pulumi.IntOutput)
}

// A list of references to virtual networks that register hostnames in this DNS zone. This is a only when ZoneType is Private.
func (o ZonePropertiesResponseOutput) RegistrationVirtualNetworks() SubResourceResponseArrayOutput {
	return o.ApplyT(func(v ZonePropertiesResponse) []SubResourceResponse { return v.RegistrationVirtualNetworks }).(SubResourceResponseArrayOutput)
}

// A list of references to virtual networks that resolve records in this DNS zone. This is a only when ZoneType is Private.
func (o ZonePropertiesResponseOutput) ResolutionVirtualNetworks() SubResourceResponseArrayOutput {
	return o.ApplyT(func(v ZonePropertiesResponse) []SubResourceResponse { return v.ResolutionVirtualNetworks }).(SubResourceResponseArrayOutput)
}

// The type of this DNS zone (Public or Private).
func (o ZonePropertiesResponseOutput) ZoneType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZonePropertiesResponse) *string { return v.ZoneType }).(pulumi.StringPtrOutput)
}

type ZonePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ZonePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZonePropertiesResponse)(nil)).Elem()
}

func (o ZonePropertiesResponsePtrOutput) ToZonePropertiesResponsePtrOutput() ZonePropertiesResponsePtrOutput {
	return o
}

func (o ZonePropertiesResponsePtrOutput) ToZonePropertiesResponsePtrOutputWithContext(ctx context.Context) ZonePropertiesResponsePtrOutput {
	return o
}

func (o ZonePropertiesResponsePtrOutput) Elem() ZonePropertiesResponseOutput {
	return o.ApplyT(func(v *ZonePropertiesResponse) ZonePropertiesResponse { return *v }).(ZonePropertiesResponseOutput)
}

// The maximum number of record sets that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
func (o ZonePropertiesResponsePtrOutput) MaxNumberOfRecordSets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ZonePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxNumberOfRecordSets
	}).(pulumi.IntPtrOutput)
}

// The name servers for this DNS zone. This is a read-only property and any attempt to set this value will be ignored.
func (o ZonePropertiesResponsePtrOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZonePropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.NameServers
	}).(pulumi.StringArrayOutput)
}

// The current number of record sets in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
func (o ZonePropertiesResponsePtrOutput) NumberOfRecordSets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ZonePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.NumberOfRecordSets
	}).(pulumi.IntPtrOutput)
}

// A list of references to virtual networks that register hostnames in this DNS zone. This is a only when ZoneType is Private.
func (o ZonePropertiesResponsePtrOutput) RegistrationVirtualNetworks() SubResourceResponseArrayOutput {
	return o.ApplyT(func(v *ZonePropertiesResponse) []SubResourceResponse {
		if v == nil {
			return nil
		}
		return v.RegistrationVirtualNetworks
	}).(SubResourceResponseArrayOutput)
}

// A list of references to virtual networks that resolve records in this DNS zone. This is a only when ZoneType is Private.
func (o ZonePropertiesResponsePtrOutput) ResolutionVirtualNetworks() SubResourceResponseArrayOutput {
	return o.ApplyT(func(v *ZonePropertiesResponse) []SubResourceResponse {
		if v == nil {
			return nil
		}
		return v.ResolutionVirtualNetworks
	}).(SubResourceResponseArrayOutput)
}

// The type of this DNS zone (Public or Private).
func (o ZonePropertiesResponsePtrOutput) ZoneType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZonePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ZoneType
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ARecordOutput{})
	pulumi.RegisterOutputType(ARecordArrayOutput{})
	pulumi.RegisterOutputType(ARecordResponseOutput{})
	pulumi.RegisterOutputType(ARecordResponseArrayOutput{})
	pulumi.RegisterOutputType(AaaaRecordOutput{})
	pulumi.RegisterOutputType(AaaaRecordArrayOutput{})
	pulumi.RegisterOutputType(AaaaRecordResponseOutput{})
	pulumi.RegisterOutputType(AaaaRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(CaaRecordOutput{})
	pulumi.RegisterOutputType(CaaRecordArrayOutput{})
	pulumi.RegisterOutputType(CaaRecordResponseOutput{})
	pulumi.RegisterOutputType(CaaRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(CnameRecordOutput{})
	pulumi.RegisterOutputType(CnameRecordPtrOutput{})
	pulumi.RegisterOutputType(CnameRecordResponseOutput{})
	pulumi.RegisterOutputType(CnameRecordResponsePtrOutput{})
	pulumi.RegisterOutputType(MxRecordOutput{})
	pulumi.RegisterOutputType(MxRecordArrayOutput{})
	pulumi.RegisterOutputType(MxRecordResponseOutput{})
	pulumi.RegisterOutputType(MxRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(NsRecordOutput{})
	pulumi.RegisterOutputType(NsRecordArrayOutput{})
	pulumi.RegisterOutputType(NsRecordResponseOutput{})
	pulumi.RegisterOutputType(NsRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(PtrRecordOutput{})
	pulumi.RegisterOutputType(PtrRecordArrayOutput{})
	pulumi.RegisterOutputType(PtrRecordResponseOutput{})
	pulumi.RegisterOutputType(PtrRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(RecordSetTypeOutput{})
	pulumi.RegisterOutputType(RecordSetPropertiesOutput{})
	pulumi.RegisterOutputType(RecordSetPropertiesPtrOutput{})
	pulumi.RegisterOutputType(RecordSetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(RecordSetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SoaRecordOutput{})
	pulumi.RegisterOutputType(SoaRecordPtrOutput{})
	pulumi.RegisterOutputType(SoaRecordResponseOutput{})
	pulumi.RegisterOutputType(SoaRecordResponsePtrOutput{})
	pulumi.RegisterOutputType(SrvRecordOutput{})
	pulumi.RegisterOutputType(SrvRecordArrayOutput{})
	pulumi.RegisterOutputType(SrvRecordResponseOutput{})
	pulumi.RegisterOutputType(SrvRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(SubResourceOutput{})
	pulumi.RegisterOutputType(SubResourcePtrOutput{})
	pulumi.RegisterOutputType(SubResourceArrayOutput{})
	pulumi.RegisterOutputType(SubResourceResponseOutput{})
	pulumi.RegisterOutputType(SubResourceResponsePtrOutput{})
	pulumi.RegisterOutputType(SubResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(TxtRecordOutput{})
	pulumi.RegisterOutputType(TxtRecordArrayOutput{})
	pulumi.RegisterOutputType(TxtRecordResponseOutput{})
	pulumi.RegisterOutputType(TxtRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(ZoneTypeOutput{})
	pulumi.RegisterOutputType(ZonePropertiesOutput{})
	pulumi.RegisterOutputType(ZonePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ZonePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ZonePropertiesResponsePtrOutput{})
}
