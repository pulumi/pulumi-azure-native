// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20160601

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ExpressRouteCircuit resource
type ExpressRouteCircuit struct {
	pulumi.CustomResourceState

	// Gets a unique read-only string that changes whenever the resource is updated
	Etag pulumi.StringPtrOutput `pulumi:"etag"`
	// Resource location
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties of ExpressRouteCircuit
	Properties ExpressRouteCircuitPropertiesFormatResponseOutput `pulumi:"properties"`
	// Gets or sets sku
	Sku ExpressRouteCircuitSkuResponsePtrOutput `pulumi:"sku"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewExpressRouteCircuit registers a new resource with the given unique name, arguments, and options.
func NewExpressRouteCircuit(ctx *pulumi.Context,
	name string, args *ExpressRouteCircuitArgs, opts ...pulumi.ResourceOption) (*ExpressRouteCircuit, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &ExpressRouteCircuitArgs{}
	}
	var resource ExpressRouteCircuit
	err := ctx.RegisterResource("azurerm:network/v20160601:ExpressRouteCircuit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExpressRouteCircuit gets an existing ExpressRouteCircuit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExpressRouteCircuit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExpressRouteCircuitState, opts ...pulumi.ResourceOption) (*ExpressRouteCircuit, error) {
	var resource ExpressRouteCircuit
	err := ctx.ReadResource("azurerm:network/v20160601:ExpressRouteCircuit", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExpressRouteCircuit resources.
type expressRouteCircuitState struct {
	// Gets a unique read-only string that changes whenever the resource is updated
	Etag *string `pulumi:"etag"`
	// Resource location
	Location *string `pulumi:"location"`
	// Resource name
	Name *string `pulumi:"name"`
	// Properties of ExpressRouteCircuit
	Properties *ExpressRouteCircuitPropertiesFormatResponse `pulumi:"properties"`
	// Gets or sets sku
	Sku *ExpressRouteCircuitSkuResponse `pulumi:"sku"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type *string `pulumi:"type"`
}

type ExpressRouteCircuitState struct {
	// Gets a unique read-only string that changes whenever the resource is updated
	Etag pulumi.StringPtrInput
	// Resource location
	Location pulumi.StringPtrInput
	// Resource name
	Name pulumi.StringPtrInput
	// Properties of ExpressRouteCircuit
	Properties ExpressRouteCircuitPropertiesFormatResponsePtrInput
	// Gets or sets sku
	Sku ExpressRouteCircuitSkuResponsePtrInput
	// Resource tags
	Tags pulumi.StringMapInput
	// Resource type
	Type pulumi.StringPtrInput
}

func (ExpressRouteCircuitState) ElementType() reflect.Type {
	return reflect.TypeOf((*expressRouteCircuitState)(nil)).Elem()
}

type expressRouteCircuitArgs struct {
	// allow classic operations
	AllowClassicOperations *bool `pulumi:"allowClassicOperations"`
	// Gets or sets list of authorizations
	Authorizations []ExpressRouteCircuitAuthorizationType `pulumi:"authorizations"`
	// Gets or sets CircuitProvisioningState state of the resource
	CircuitProvisioningState *string `pulumi:"circuitProvisioningState"`
	// Gets a unique read-only string that changes whenever the resource is updated
	Etag *string `pulumi:"etag"`
	// Gets or sets the GatewayManager Etag
	GatewayManagerEtag *string `pulumi:"gatewayManagerEtag"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Resource location
	Location *string `pulumi:"location"`
	// The name of the circuit.
	Name string `pulumi:"name"`
	// Gets or sets list of peerings
	Peerings []ExpressRouteCircuitPeeringType `pulumi:"peerings"`
	// Gets provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState *string `pulumi:"provisioningState"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Gets or sets ServiceKey
	ServiceKey *string `pulumi:"serviceKey"`
	// Gets or sets ServiceProviderNotes
	ServiceProviderNotes *string `pulumi:"serviceProviderNotes"`
	// Gets or sets ServiceProviderProperties
	ServiceProviderProperties *ExpressRouteCircuitServiceProviderProperties `pulumi:"serviceProviderProperties"`
	// Gets or sets ServiceProviderProvisioningState state of the resource
	ServiceProviderProvisioningState *string `pulumi:"serviceProviderProvisioningState"`
	// Gets or sets sku
	Sku *ExpressRouteCircuitSku `pulumi:"sku"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ExpressRouteCircuit resource.
type ExpressRouteCircuitArgs struct {
	// allow classic operations
	AllowClassicOperations pulumi.BoolPtrInput
	// Gets or sets list of authorizations
	Authorizations ExpressRouteCircuitAuthorizationTypeArrayInput
	// Gets or sets CircuitProvisioningState state of the resource
	CircuitProvisioningState pulumi.StringPtrInput
	// Gets a unique read-only string that changes whenever the resource is updated
	Etag pulumi.StringPtrInput
	// Gets or sets the GatewayManager Etag
	GatewayManagerEtag pulumi.StringPtrInput
	// Resource Id
	Id pulumi.StringPtrInput
	// Resource location
	Location pulumi.StringPtrInput
	// The name of the circuit.
	Name pulumi.StringInput
	// Gets or sets list of peerings
	Peerings ExpressRouteCircuitPeeringTypeArrayInput
	// Gets provisioning state of the PublicIP resource Updating/Deleting/Failed
	ProvisioningState pulumi.StringPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// Gets or sets ServiceKey
	ServiceKey pulumi.StringPtrInput
	// Gets or sets ServiceProviderNotes
	ServiceProviderNotes pulumi.StringPtrInput
	// Gets or sets ServiceProviderProperties
	ServiceProviderProperties ExpressRouteCircuitServiceProviderPropertiesPtrInput
	// Gets or sets ServiceProviderProvisioningState state of the resource
	ServiceProviderProvisioningState pulumi.StringPtrInput
	// Gets or sets sku
	Sku ExpressRouteCircuitSkuPtrInput
	// Resource tags
	Tags pulumi.StringMapInput
}

func (ExpressRouteCircuitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*expressRouteCircuitArgs)(nil)).Elem()
}
