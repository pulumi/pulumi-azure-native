// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180801

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Peering in an ExpressRoute Cross Connection resource.
type ExpressRouteCrossConnectionPeering struct {
	pulumi.CustomResourceState

	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Gets name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name       pulumi.StringPtrOutput                                     `pulumi:"name"`
	Properties ExpressRouteCrossConnectionPeeringPropertiesResponseOutput `pulumi:"properties"`
}

// NewExpressRouteCrossConnectionPeering registers a new resource with the given unique name, arguments, and options.
func NewExpressRouteCrossConnectionPeering(ctx *pulumi.Context,
	name string, args *ExpressRouteCrossConnectionPeeringArgs, opts ...pulumi.ResourceOption) (*ExpressRouteCrossConnectionPeering, error) {
	if args == nil || args.CrossConnectionName == nil {
		return nil, errors.New("missing required argument 'CrossConnectionName'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &ExpressRouteCrossConnectionPeeringArgs{}
	}
	var resource ExpressRouteCrossConnectionPeering
	err := ctx.RegisterResource("azurerm:network/v20180801:ExpressRouteCrossConnectionPeering", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExpressRouteCrossConnectionPeering gets an existing ExpressRouteCrossConnectionPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExpressRouteCrossConnectionPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExpressRouteCrossConnectionPeeringState, opts ...pulumi.ResourceOption) (*ExpressRouteCrossConnectionPeering, error) {
	var resource ExpressRouteCrossConnectionPeering
	err := ctx.ReadResource("azurerm:network/v20180801:ExpressRouteCrossConnectionPeering", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExpressRouteCrossConnectionPeering resources.
type expressRouteCrossConnectionPeeringState struct {
	// A unique read-only string that changes whenever the resource is updated.
	Etag *string `pulumi:"etag"`
	// Gets name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name       *string                                               `pulumi:"name"`
	Properties *ExpressRouteCrossConnectionPeeringPropertiesResponse `pulumi:"properties"`
}

type ExpressRouteCrossConnectionPeeringState struct {
	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringPtrInput
	// Gets name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name       pulumi.StringPtrInput
	Properties ExpressRouteCrossConnectionPeeringPropertiesResponsePtrInput
}

func (ExpressRouteCrossConnectionPeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*expressRouteCrossConnectionPeeringState)(nil)).Elem()
}

type expressRouteCrossConnectionPeeringArgs struct {
	// The name of the ExpressRouteCrossConnection.
	CrossConnectionName string `pulumi:"crossConnectionName"`
	// Resource ID.
	Id *string `pulumi:"id"`
	// The name of the peering.
	Name       string                                        `pulumi:"name"`
	Properties *ExpressRouteCrossConnectionPeeringProperties `pulumi:"properties"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a ExpressRouteCrossConnectionPeering resource.
type ExpressRouteCrossConnectionPeeringArgs struct {
	// The name of the ExpressRouteCrossConnection.
	CrossConnectionName pulumi.StringInput
	// Resource ID.
	Id pulumi.StringPtrInput
	// The name of the peering.
	Name       pulumi.StringInput
	Properties ExpressRouteCrossConnectionPeeringPropertiesPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
}

func (ExpressRouteCrossConnectionPeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*expressRouteCrossConnectionPeeringArgs)(nil)).Elem()
}
