// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180301

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Class containing DNS settings in a Traffic Manager profile.
type DnsConfig struct {
	// The relative DNS name provided by this Traffic Manager profile. This value is combined with the DNS domain name used by Azure Traffic Manager to form the fully-qualified domain name (FQDN) of the profile.
	RelativeName *string `pulumi:"relativeName"`
	// The DNS Time-To-Live (TTL), in seconds. This informs the local DNS resolvers and DNS clients how long to cache DNS responses provided by this Traffic Manager profile.
	Ttl *int `pulumi:"ttl"`
}

// DnsConfigInput is an input type that accepts DnsConfigArgs and DnsConfigOutput values.
// You can construct a concrete instance of `DnsConfigInput` via:
//
//          DnsConfigArgs{...}
type DnsConfigInput interface {
	pulumi.Input

	ToDnsConfigOutput() DnsConfigOutput
	ToDnsConfigOutputWithContext(context.Context) DnsConfigOutput
}

// Class containing DNS settings in a Traffic Manager profile.
type DnsConfigArgs struct {
	// The relative DNS name provided by this Traffic Manager profile. This value is combined with the DNS domain name used by Azure Traffic Manager to form the fully-qualified domain name (FQDN) of the profile.
	RelativeName pulumi.StringPtrInput `pulumi:"relativeName"`
	// The DNS Time-To-Live (TTL), in seconds. This informs the local DNS resolvers and DNS clients how long to cache DNS responses provided by this Traffic Manager profile.
	Ttl pulumi.IntPtrInput `pulumi:"ttl"`
}

func (DnsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsConfig)(nil)).Elem()
}

func (i DnsConfigArgs) ToDnsConfigOutput() DnsConfigOutput {
	return i.ToDnsConfigOutputWithContext(context.Background())
}

func (i DnsConfigArgs) ToDnsConfigOutputWithContext(ctx context.Context) DnsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigOutput)
}

func (i DnsConfigArgs) ToDnsConfigPtrOutput() DnsConfigPtrOutput {
	return i.ToDnsConfigPtrOutputWithContext(context.Background())
}

func (i DnsConfigArgs) ToDnsConfigPtrOutputWithContext(ctx context.Context) DnsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigOutput).ToDnsConfigPtrOutputWithContext(ctx)
}

// DnsConfigPtrInput is an input type that accepts DnsConfigArgs, DnsConfigPtr and DnsConfigPtrOutput values.
// You can construct a concrete instance of `DnsConfigPtrInput` via:
//
//          DnsConfigArgs{...}
//
//  or:
//
//          nil
type DnsConfigPtrInput interface {
	pulumi.Input

	ToDnsConfigPtrOutput() DnsConfigPtrOutput
	ToDnsConfigPtrOutputWithContext(context.Context) DnsConfigPtrOutput
}

type dnsConfigPtrType DnsConfigArgs

func DnsConfigPtr(v *DnsConfigArgs) DnsConfigPtrInput {
	return (*dnsConfigPtrType)(v)
}

func (*dnsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsConfig)(nil)).Elem()
}

func (i *dnsConfigPtrType) ToDnsConfigPtrOutput() DnsConfigPtrOutput {
	return i.ToDnsConfigPtrOutputWithContext(context.Background())
}

func (i *dnsConfigPtrType) ToDnsConfigPtrOutputWithContext(ctx context.Context) DnsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigPtrOutput)
}

// Class containing DNS settings in a Traffic Manager profile.
type DnsConfigOutput struct{ *pulumi.OutputState }

func (DnsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsConfig)(nil)).Elem()
}

func (o DnsConfigOutput) ToDnsConfigOutput() DnsConfigOutput {
	return o
}

func (o DnsConfigOutput) ToDnsConfigOutputWithContext(ctx context.Context) DnsConfigOutput {
	return o
}

func (o DnsConfigOutput) ToDnsConfigPtrOutput() DnsConfigPtrOutput {
	return o.ToDnsConfigPtrOutputWithContext(context.Background())
}

func (o DnsConfigOutput) ToDnsConfigPtrOutputWithContext(ctx context.Context) DnsConfigPtrOutput {
	return o.ApplyT(func(v DnsConfig) *DnsConfig {
		return &v
	}).(DnsConfigPtrOutput)
}

// The relative DNS name provided by this Traffic Manager profile. This value is combined with the DNS domain name used by Azure Traffic Manager to form the fully-qualified domain name (FQDN) of the profile.
func (o DnsConfigOutput) RelativeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsConfig) *string { return v.RelativeName }).(pulumi.StringPtrOutput)
}

// The DNS Time-To-Live (TTL), in seconds. This informs the local DNS resolvers and DNS clients how long to cache DNS responses provided by this Traffic Manager profile.
func (o DnsConfigOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DnsConfig) *int { return v.Ttl }).(pulumi.IntPtrOutput)
}

type DnsConfigPtrOutput struct{ *pulumi.OutputState }

func (DnsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsConfig)(nil)).Elem()
}

func (o DnsConfigPtrOutput) ToDnsConfigPtrOutput() DnsConfigPtrOutput {
	return o
}

func (o DnsConfigPtrOutput) ToDnsConfigPtrOutputWithContext(ctx context.Context) DnsConfigPtrOutput {
	return o
}

func (o DnsConfigPtrOutput) Elem() DnsConfigOutput {
	return o.ApplyT(func(v *DnsConfig) DnsConfig { return *v }).(DnsConfigOutput)
}

// The relative DNS name provided by this Traffic Manager profile. This value is combined with the DNS domain name used by Azure Traffic Manager to form the fully-qualified domain name (FQDN) of the profile.
func (o DnsConfigPtrOutput) RelativeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsConfig) *string {
		if v == nil {
			return nil
		}
		return v.RelativeName
	}).(pulumi.StringPtrOutput)
}

// The DNS Time-To-Live (TTL), in seconds. This informs the local DNS resolvers and DNS clients how long to cache DNS responses provided by this Traffic Manager profile.
func (o DnsConfigPtrOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DnsConfig) *int {
		if v == nil {
			return nil
		}
		return v.Ttl
	}).(pulumi.IntPtrOutput)
}

// Class containing DNS settings in a Traffic Manager profile.
type DnsConfigResponse struct {
	// The fully-qualified domain name (FQDN) of the Traffic Manager profile. This is formed from the concatenation of the RelativeName with the DNS domain used by Azure Traffic Manager.
	Fqdn string `pulumi:"fqdn"`
	// The relative DNS name provided by this Traffic Manager profile. This value is combined with the DNS domain name used by Azure Traffic Manager to form the fully-qualified domain name (FQDN) of the profile.
	RelativeName *string `pulumi:"relativeName"`
	// The DNS Time-To-Live (TTL), in seconds. This informs the local DNS resolvers and DNS clients how long to cache DNS responses provided by this Traffic Manager profile.
	Ttl *int `pulumi:"ttl"`
}

// DnsConfigResponseInput is an input type that accepts DnsConfigResponseArgs and DnsConfigResponseOutput values.
// You can construct a concrete instance of `DnsConfigResponseInput` via:
//
//          DnsConfigResponseArgs{...}
type DnsConfigResponseInput interface {
	pulumi.Input

	ToDnsConfigResponseOutput() DnsConfigResponseOutput
	ToDnsConfigResponseOutputWithContext(context.Context) DnsConfigResponseOutput
}

// Class containing DNS settings in a Traffic Manager profile.
type DnsConfigResponseArgs struct {
	// The fully-qualified domain name (FQDN) of the Traffic Manager profile. This is formed from the concatenation of the RelativeName with the DNS domain used by Azure Traffic Manager.
	Fqdn pulumi.StringInput `pulumi:"fqdn"`
	// The relative DNS name provided by this Traffic Manager profile. This value is combined with the DNS domain name used by Azure Traffic Manager to form the fully-qualified domain name (FQDN) of the profile.
	RelativeName pulumi.StringPtrInput `pulumi:"relativeName"`
	// The DNS Time-To-Live (TTL), in seconds. This informs the local DNS resolvers and DNS clients how long to cache DNS responses provided by this Traffic Manager profile.
	Ttl pulumi.IntPtrInput `pulumi:"ttl"`
}

func (DnsConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsConfigResponse)(nil)).Elem()
}

func (i DnsConfigResponseArgs) ToDnsConfigResponseOutput() DnsConfigResponseOutput {
	return i.ToDnsConfigResponseOutputWithContext(context.Background())
}

func (i DnsConfigResponseArgs) ToDnsConfigResponseOutputWithContext(ctx context.Context) DnsConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigResponseOutput)
}

func (i DnsConfigResponseArgs) ToDnsConfigResponsePtrOutput() DnsConfigResponsePtrOutput {
	return i.ToDnsConfigResponsePtrOutputWithContext(context.Background())
}

func (i DnsConfigResponseArgs) ToDnsConfigResponsePtrOutputWithContext(ctx context.Context) DnsConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigResponseOutput).ToDnsConfigResponsePtrOutputWithContext(ctx)
}

// DnsConfigResponsePtrInput is an input type that accepts DnsConfigResponseArgs, DnsConfigResponsePtr and DnsConfigResponsePtrOutput values.
// You can construct a concrete instance of `DnsConfigResponsePtrInput` via:
//
//          DnsConfigResponseArgs{...}
//
//  or:
//
//          nil
type DnsConfigResponsePtrInput interface {
	pulumi.Input

	ToDnsConfigResponsePtrOutput() DnsConfigResponsePtrOutput
	ToDnsConfigResponsePtrOutputWithContext(context.Context) DnsConfigResponsePtrOutput
}

type dnsConfigResponsePtrType DnsConfigResponseArgs

func DnsConfigResponsePtr(v *DnsConfigResponseArgs) DnsConfigResponsePtrInput {
	return (*dnsConfigResponsePtrType)(v)
}

func (*dnsConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsConfigResponse)(nil)).Elem()
}

func (i *dnsConfigResponsePtrType) ToDnsConfigResponsePtrOutput() DnsConfigResponsePtrOutput {
	return i.ToDnsConfigResponsePtrOutputWithContext(context.Background())
}

func (i *dnsConfigResponsePtrType) ToDnsConfigResponsePtrOutputWithContext(ctx context.Context) DnsConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigResponsePtrOutput)
}

// Class containing DNS settings in a Traffic Manager profile.
type DnsConfigResponseOutput struct{ *pulumi.OutputState }

func (DnsConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsConfigResponse)(nil)).Elem()
}

func (o DnsConfigResponseOutput) ToDnsConfigResponseOutput() DnsConfigResponseOutput {
	return o
}

func (o DnsConfigResponseOutput) ToDnsConfigResponseOutputWithContext(ctx context.Context) DnsConfigResponseOutput {
	return o
}

func (o DnsConfigResponseOutput) ToDnsConfigResponsePtrOutput() DnsConfigResponsePtrOutput {
	return o.ToDnsConfigResponsePtrOutputWithContext(context.Background())
}

func (o DnsConfigResponseOutput) ToDnsConfigResponsePtrOutputWithContext(ctx context.Context) DnsConfigResponsePtrOutput {
	return o.ApplyT(func(v DnsConfigResponse) *DnsConfigResponse {
		return &v
	}).(DnsConfigResponsePtrOutput)
}

// The fully-qualified domain name (FQDN) of the Traffic Manager profile. This is formed from the concatenation of the RelativeName with the DNS domain used by Azure Traffic Manager.
func (o DnsConfigResponseOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v DnsConfigResponse) string { return v.Fqdn }).(pulumi.StringOutput)
}

// The relative DNS name provided by this Traffic Manager profile. This value is combined with the DNS domain name used by Azure Traffic Manager to form the fully-qualified domain name (FQDN) of the profile.
func (o DnsConfigResponseOutput) RelativeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsConfigResponse) *string { return v.RelativeName }).(pulumi.StringPtrOutput)
}

// The DNS Time-To-Live (TTL), in seconds. This informs the local DNS resolvers and DNS clients how long to cache DNS responses provided by this Traffic Manager profile.
func (o DnsConfigResponseOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DnsConfigResponse) *int { return v.Ttl }).(pulumi.IntPtrOutput)
}

type DnsConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (DnsConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsConfigResponse)(nil)).Elem()
}

func (o DnsConfigResponsePtrOutput) ToDnsConfigResponsePtrOutput() DnsConfigResponsePtrOutput {
	return o
}

func (o DnsConfigResponsePtrOutput) ToDnsConfigResponsePtrOutputWithContext(ctx context.Context) DnsConfigResponsePtrOutput {
	return o
}

func (o DnsConfigResponsePtrOutput) Elem() DnsConfigResponseOutput {
	return o.ApplyT(func(v *DnsConfigResponse) DnsConfigResponse { return *v }).(DnsConfigResponseOutput)
}

// The fully-qualified domain name (FQDN) of the Traffic Manager profile. This is formed from the concatenation of the RelativeName with the DNS domain used by Azure Traffic Manager.
func (o DnsConfigResponsePtrOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Fqdn
	}).(pulumi.StringPtrOutput)
}

// The relative DNS name provided by this Traffic Manager profile. This value is combined with the DNS domain name used by Azure Traffic Manager to form the fully-qualified domain name (FQDN) of the profile.
func (o DnsConfigResponsePtrOutput) RelativeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.RelativeName
	}).(pulumi.StringPtrOutput)
}

// The DNS Time-To-Live (TTL), in seconds. This informs the local DNS resolvers and DNS clients how long to cache DNS responses provided by this Traffic Manager profile.
func (o DnsConfigResponsePtrOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DnsConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.Ttl
	}).(pulumi.IntPtrOutput)
}

// Class representing a Traffic Manager endpoint.
type EndpointType struct {
	// The name of the resource
	Name *string `pulumi:"name"`
	// The properties of the Traffic Manager endpoint.
	Properties EndpointPropertiesResponse `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles.
	Type *string `pulumi:"type"`
}

// EndpointTypeInput is an input type that accepts EndpointTypeArgs and EndpointTypeOutput values.
// You can construct a concrete instance of `EndpointTypeInput` via:
//
//          EndpointTypeArgs{...}
type EndpointTypeInput interface {
	pulumi.Input

	ToEndpointTypeOutput() EndpointTypeOutput
	ToEndpointTypeOutputWithContext(context.Context) EndpointTypeOutput
}

// Class representing a Traffic Manager endpoint.
type EndpointTypeArgs struct {
	// The name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The properties of the Traffic Manager endpoint.
	Properties EndpointPropertiesResponseInput `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EndpointTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointType)(nil)).Elem()
}

func (i EndpointTypeArgs) ToEndpointTypeOutput() EndpointTypeOutput {
	return i.ToEndpointTypeOutputWithContext(context.Background())
}

func (i EndpointTypeArgs) ToEndpointTypeOutputWithContext(ctx context.Context) EndpointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointTypeOutput)
}

// EndpointTypeArrayInput is an input type that accepts EndpointTypeArray and EndpointTypeArrayOutput values.
// You can construct a concrete instance of `EndpointTypeArrayInput` via:
//
//          EndpointTypeArray{ EndpointTypeArgs{...} }
type EndpointTypeArrayInput interface {
	pulumi.Input

	ToEndpointTypeArrayOutput() EndpointTypeArrayOutput
	ToEndpointTypeArrayOutputWithContext(context.Context) EndpointTypeArrayOutput
}

type EndpointTypeArray []EndpointTypeInput

func (EndpointTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointType)(nil)).Elem()
}

func (i EndpointTypeArray) ToEndpointTypeArrayOutput() EndpointTypeArrayOutput {
	return i.ToEndpointTypeArrayOutputWithContext(context.Background())
}

func (i EndpointTypeArray) ToEndpointTypeArrayOutputWithContext(ctx context.Context) EndpointTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointTypeArrayOutput)
}

// Class representing a Traffic Manager endpoint.
type EndpointTypeOutput struct{ *pulumi.OutputState }

func (EndpointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointType)(nil)).Elem()
}

func (o EndpointTypeOutput) ToEndpointTypeOutput() EndpointTypeOutput {
	return o
}

func (o EndpointTypeOutput) ToEndpointTypeOutputWithContext(ctx context.Context) EndpointTypeOutput {
	return o
}

// The name of the resource
func (o EndpointTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The properties of the Traffic Manager endpoint.
func (o EndpointTypeOutput) Properties() EndpointPropertiesResponseOutput {
	return o.ApplyT(func(v EndpointType) EndpointPropertiesResponse { return v.Properties }).(EndpointPropertiesResponseOutput)
}

// The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles.
func (o EndpointTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EndpointTypeArrayOutput struct{ *pulumi.OutputState }

func (EndpointTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointType)(nil)).Elem()
}

func (o EndpointTypeArrayOutput) ToEndpointTypeArrayOutput() EndpointTypeArrayOutput {
	return o
}

func (o EndpointTypeArrayOutput) ToEndpointTypeArrayOutputWithContext(ctx context.Context) EndpointTypeArrayOutput {
	return o
}

func (o EndpointTypeArrayOutput) Index(i pulumi.IntInput) EndpointTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointType {
		return vs[0].([]EndpointType)[vs[1].(int)]
	}).(EndpointTypeOutput)
}

// Class representing a Traffic Manager endpoint properties.
type EndpointProperties struct {
	// List of custom headers.
	CustomHeaders []EndpointPropertiesProperties `pulumi:"customHeaders"`
	// Specifies the location of the external or nested endpoints when using the ‘Performance’ traffic routing method.
	EndpointLocation *string `pulumi:"endpointLocation"`
	// The monitoring status of the endpoint.
	EndpointMonitorStatus *string `pulumi:"endpointMonitorStatus"`
	// The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.
	EndpointStatus *string `pulumi:"endpointStatus"`
	// The list of countries/regions mapped to this endpoint when using the ‘Geographic’ traffic routing method. Please consult Traffic Manager Geographic documentation for a full list of accepted values.
	GeoMapping []string `pulumi:"geoMapping"`
	// The minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.
	MinChildEndpoints *int `pulumi:"minChildEndpoints"`
	// The priority of this endpoint when using the ‘Priority’ traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.
	Priority *int `pulumi:"priority"`
	// The fully-qualified DNS name or IP address of the endpoint. Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.
	Target *string `pulumi:"target"`
	// The Azure Resource URI of the of the endpoint. Not applicable to endpoints of type 'ExternalEndpoints'.
	TargetResourceId *string `pulumi:"targetResourceId"`
	// The weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000.
	Weight *int `pulumi:"weight"`
}

// EndpointPropertiesInput is an input type that accepts EndpointPropertiesArgs and EndpointPropertiesOutput values.
// You can construct a concrete instance of `EndpointPropertiesInput` via:
//
//          EndpointPropertiesArgs{...}
type EndpointPropertiesInput interface {
	pulumi.Input

	ToEndpointPropertiesOutput() EndpointPropertiesOutput
	ToEndpointPropertiesOutputWithContext(context.Context) EndpointPropertiesOutput
}

// Class representing a Traffic Manager endpoint properties.
type EndpointPropertiesArgs struct {
	// List of custom headers.
	CustomHeaders EndpointPropertiesPropertiesArrayInput `pulumi:"customHeaders"`
	// Specifies the location of the external or nested endpoints when using the ‘Performance’ traffic routing method.
	EndpointLocation pulumi.StringPtrInput `pulumi:"endpointLocation"`
	// The monitoring status of the endpoint.
	EndpointMonitorStatus pulumi.StringPtrInput `pulumi:"endpointMonitorStatus"`
	// The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.
	EndpointStatus pulumi.StringPtrInput `pulumi:"endpointStatus"`
	// The list of countries/regions mapped to this endpoint when using the ‘Geographic’ traffic routing method. Please consult Traffic Manager Geographic documentation for a full list of accepted values.
	GeoMapping pulumi.StringArrayInput `pulumi:"geoMapping"`
	// The minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.
	MinChildEndpoints pulumi.IntPtrInput `pulumi:"minChildEndpoints"`
	// The priority of this endpoint when using the ‘Priority’ traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The fully-qualified DNS name or IP address of the endpoint. Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// The Azure Resource URI of the of the endpoint. Not applicable to endpoints of type 'ExternalEndpoints'.
	TargetResourceId pulumi.StringPtrInput `pulumi:"targetResourceId"`
	// The weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (EndpointPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointProperties)(nil)).Elem()
}

func (i EndpointPropertiesArgs) ToEndpointPropertiesOutput() EndpointPropertiesOutput {
	return i.ToEndpointPropertiesOutputWithContext(context.Background())
}

func (i EndpointPropertiesArgs) ToEndpointPropertiesOutputWithContext(ctx context.Context) EndpointPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPropertiesOutput)
}

func (i EndpointPropertiesArgs) ToEndpointPropertiesPtrOutput() EndpointPropertiesPtrOutput {
	return i.ToEndpointPropertiesPtrOutputWithContext(context.Background())
}

func (i EndpointPropertiesArgs) ToEndpointPropertiesPtrOutputWithContext(ctx context.Context) EndpointPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPropertiesOutput).ToEndpointPropertiesPtrOutputWithContext(ctx)
}

// EndpointPropertiesPtrInput is an input type that accepts EndpointPropertiesArgs, EndpointPropertiesPtr and EndpointPropertiesPtrOutput values.
// You can construct a concrete instance of `EndpointPropertiesPtrInput` via:
//
//          EndpointPropertiesArgs{...}
//
//  or:
//
//          nil
type EndpointPropertiesPtrInput interface {
	pulumi.Input

	ToEndpointPropertiesPtrOutput() EndpointPropertiesPtrOutput
	ToEndpointPropertiesPtrOutputWithContext(context.Context) EndpointPropertiesPtrOutput
}

type endpointPropertiesPtrType EndpointPropertiesArgs

func EndpointPropertiesPtr(v *EndpointPropertiesArgs) EndpointPropertiesPtrInput {
	return (*endpointPropertiesPtrType)(v)
}

func (*endpointPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointProperties)(nil)).Elem()
}

func (i *endpointPropertiesPtrType) ToEndpointPropertiesPtrOutput() EndpointPropertiesPtrOutput {
	return i.ToEndpointPropertiesPtrOutputWithContext(context.Background())
}

func (i *endpointPropertiesPtrType) ToEndpointPropertiesPtrOutputWithContext(ctx context.Context) EndpointPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPropertiesPtrOutput)
}

// Class representing a Traffic Manager endpoint properties.
type EndpointPropertiesOutput struct{ *pulumi.OutputState }

func (EndpointPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointProperties)(nil)).Elem()
}

func (o EndpointPropertiesOutput) ToEndpointPropertiesOutput() EndpointPropertiesOutput {
	return o
}

func (o EndpointPropertiesOutput) ToEndpointPropertiesOutputWithContext(ctx context.Context) EndpointPropertiesOutput {
	return o
}

func (o EndpointPropertiesOutput) ToEndpointPropertiesPtrOutput() EndpointPropertiesPtrOutput {
	return o.ToEndpointPropertiesPtrOutputWithContext(context.Background())
}

func (o EndpointPropertiesOutput) ToEndpointPropertiesPtrOutputWithContext(ctx context.Context) EndpointPropertiesPtrOutput {
	return o.ApplyT(func(v EndpointProperties) *EndpointProperties {
		return &v
	}).(EndpointPropertiesPtrOutput)
}

// List of custom headers.
func (o EndpointPropertiesOutput) CustomHeaders() EndpointPropertiesPropertiesArrayOutput {
	return o.ApplyT(func(v EndpointProperties) []EndpointPropertiesProperties { return v.CustomHeaders }).(EndpointPropertiesPropertiesArrayOutput)
}

// Specifies the location of the external or nested endpoints when using the ‘Performance’ traffic routing method.
func (o EndpointPropertiesOutput) EndpointLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointProperties) *string { return v.EndpointLocation }).(pulumi.StringPtrOutput)
}

// The monitoring status of the endpoint.
func (o EndpointPropertiesOutput) EndpointMonitorStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointProperties) *string { return v.EndpointMonitorStatus }).(pulumi.StringPtrOutput)
}

// The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.
func (o EndpointPropertiesOutput) EndpointStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointProperties) *string { return v.EndpointStatus }).(pulumi.StringPtrOutput)
}

// The list of countries/regions mapped to this endpoint when using the ‘Geographic’ traffic routing method. Please consult Traffic Manager Geographic documentation for a full list of accepted values.
func (o EndpointPropertiesOutput) GeoMapping() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EndpointProperties) []string { return v.GeoMapping }).(pulumi.StringArrayOutput)
}

// The minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.
func (o EndpointPropertiesOutput) MinChildEndpoints() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointProperties) *int { return v.MinChildEndpoints }).(pulumi.IntPtrOutput)
}

// The priority of this endpoint when using the ‘Priority’ traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.
func (o EndpointPropertiesOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointProperties) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The fully-qualified DNS name or IP address of the endpoint. Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.
func (o EndpointPropertiesOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointProperties) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// The Azure Resource URI of the of the endpoint. Not applicable to endpoints of type 'ExternalEndpoints'.
func (o EndpointPropertiesOutput) TargetResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointProperties) *string { return v.TargetResourceId }).(pulumi.StringPtrOutput)
}

// The weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000.
func (o EndpointPropertiesOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointProperties) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type EndpointPropertiesPtrOutput struct{ *pulumi.OutputState }

func (EndpointPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointProperties)(nil)).Elem()
}

func (o EndpointPropertiesPtrOutput) ToEndpointPropertiesPtrOutput() EndpointPropertiesPtrOutput {
	return o
}

func (o EndpointPropertiesPtrOutput) ToEndpointPropertiesPtrOutputWithContext(ctx context.Context) EndpointPropertiesPtrOutput {
	return o
}

func (o EndpointPropertiesPtrOutput) Elem() EndpointPropertiesOutput {
	return o.ApplyT(func(v *EndpointProperties) EndpointProperties { return *v }).(EndpointPropertiesOutput)
}

// List of custom headers.
func (o EndpointPropertiesPtrOutput) CustomHeaders() EndpointPropertiesPropertiesArrayOutput {
	return o.ApplyT(func(v *EndpointProperties) []EndpointPropertiesProperties {
		if v == nil {
			return nil
		}
		return v.CustomHeaders
	}).(EndpointPropertiesPropertiesArrayOutput)
}

// Specifies the location of the external or nested endpoints when using the ‘Performance’ traffic routing method.
func (o EndpointPropertiesPtrOutput) EndpointLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointProperties) *string {
		if v == nil {
			return nil
		}
		return v.EndpointLocation
	}).(pulumi.StringPtrOutput)
}

// The monitoring status of the endpoint.
func (o EndpointPropertiesPtrOutput) EndpointMonitorStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointProperties) *string {
		if v == nil {
			return nil
		}
		return v.EndpointMonitorStatus
	}).(pulumi.StringPtrOutput)
}

// The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.
func (o EndpointPropertiesPtrOutput) EndpointStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointProperties) *string {
		if v == nil {
			return nil
		}
		return v.EndpointStatus
	}).(pulumi.StringPtrOutput)
}

// The list of countries/regions mapped to this endpoint when using the ‘Geographic’ traffic routing method. Please consult Traffic Manager Geographic documentation for a full list of accepted values.
func (o EndpointPropertiesPtrOutput) GeoMapping() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EndpointProperties) []string {
		if v == nil {
			return nil
		}
		return v.GeoMapping
	}).(pulumi.StringArrayOutput)
}

// The minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.
func (o EndpointPropertiesPtrOutput) MinChildEndpoints() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointProperties) *int {
		if v == nil {
			return nil
		}
		return v.MinChildEndpoints
	}).(pulumi.IntPtrOutput)
}

// The priority of this endpoint when using the ‘Priority’ traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.
func (o EndpointPropertiesPtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointProperties) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

// The fully-qualified DNS name or IP address of the endpoint. Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.
func (o EndpointPropertiesPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointProperties) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// The Azure Resource URI of the of the endpoint. Not applicable to endpoints of type 'ExternalEndpoints'.
func (o EndpointPropertiesPtrOutput) TargetResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointProperties) *string {
		if v == nil {
			return nil
		}
		return v.TargetResourceId
	}).(pulumi.StringPtrOutput)
}

// The weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000.
func (o EndpointPropertiesPtrOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointProperties) *int {
		if v == nil {
			return nil
		}
		return v.Weight
	}).(pulumi.IntPtrOutput)
}

// Custom header name and value.
type EndpointPropertiesProperties struct {
	// Header name.
	Name *string `pulumi:"name"`
	// Header value.
	Value *string `pulumi:"value"`
}

// EndpointPropertiesPropertiesInput is an input type that accepts EndpointPropertiesPropertiesArgs and EndpointPropertiesPropertiesOutput values.
// You can construct a concrete instance of `EndpointPropertiesPropertiesInput` via:
//
//          EndpointPropertiesPropertiesArgs{...}
type EndpointPropertiesPropertiesInput interface {
	pulumi.Input

	ToEndpointPropertiesPropertiesOutput() EndpointPropertiesPropertiesOutput
	ToEndpointPropertiesPropertiesOutputWithContext(context.Context) EndpointPropertiesPropertiesOutput
}

// Custom header name and value.
type EndpointPropertiesPropertiesArgs struct {
	// Header name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Header value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (EndpointPropertiesPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPropertiesProperties)(nil)).Elem()
}

func (i EndpointPropertiesPropertiesArgs) ToEndpointPropertiesPropertiesOutput() EndpointPropertiesPropertiesOutput {
	return i.ToEndpointPropertiesPropertiesOutputWithContext(context.Background())
}

func (i EndpointPropertiesPropertiesArgs) ToEndpointPropertiesPropertiesOutputWithContext(ctx context.Context) EndpointPropertiesPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPropertiesPropertiesOutput)
}

// EndpointPropertiesPropertiesArrayInput is an input type that accepts EndpointPropertiesPropertiesArray and EndpointPropertiesPropertiesArrayOutput values.
// You can construct a concrete instance of `EndpointPropertiesPropertiesArrayInput` via:
//
//          EndpointPropertiesPropertiesArray{ EndpointPropertiesPropertiesArgs{...} }
type EndpointPropertiesPropertiesArrayInput interface {
	pulumi.Input

	ToEndpointPropertiesPropertiesArrayOutput() EndpointPropertiesPropertiesArrayOutput
	ToEndpointPropertiesPropertiesArrayOutputWithContext(context.Context) EndpointPropertiesPropertiesArrayOutput
}

type EndpointPropertiesPropertiesArray []EndpointPropertiesPropertiesInput

func (EndpointPropertiesPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointPropertiesProperties)(nil)).Elem()
}

func (i EndpointPropertiesPropertiesArray) ToEndpointPropertiesPropertiesArrayOutput() EndpointPropertiesPropertiesArrayOutput {
	return i.ToEndpointPropertiesPropertiesArrayOutputWithContext(context.Background())
}

func (i EndpointPropertiesPropertiesArray) ToEndpointPropertiesPropertiesArrayOutputWithContext(ctx context.Context) EndpointPropertiesPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPropertiesPropertiesArrayOutput)
}

// Custom header name and value.
type EndpointPropertiesPropertiesOutput struct{ *pulumi.OutputState }

func (EndpointPropertiesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPropertiesProperties)(nil)).Elem()
}

func (o EndpointPropertiesPropertiesOutput) ToEndpointPropertiesPropertiesOutput() EndpointPropertiesPropertiesOutput {
	return o
}

func (o EndpointPropertiesPropertiesOutput) ToEndpointPropertiesPropertiesOutputWithContext(ctx context.Context) EndpointPropertiesPropertiesOutput {
	return o
}

// Header name.
func (o EndpointPropertiesPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPropertiesProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Header value.
func (o EndpointPropertiesPropertiesOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPropertiesProperties) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EndpointPropertiesPropertiesArrayOutput struct{ *pulumi.OutputState }

func (EndpointPropertiesPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointPropertiesProperties)(nil)).Elem()
}

func (o EndpointPropertiesPropertiesArrayOutput) ToEndpointPropertiesPropertiesArrayOutput() EndpointPropertiesPropertiesArrayOutput {
	return o
}

func (o EndpointPropertiesPropertiesArrayOutput) ToEndpointPropertiesPropertiesArrayOutputWithContext(ctx context.Context) EndpointPropertiesPropertiesArrayOutput {
	return o
}

func (o EndpointPropertiesPropertiesArrayOutput) Index(i pulumi.IntInput) EndpointPropertiesPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointPropertiesProperties {
		return vs[0].([]EndpointPropertiesProperties)[vs[1].(int)]
	}).(EndpointPropertiesPropertiesOutput)
}

// Class representing a Traffic Manager endpoint properties.
type EndpointPropertiesResponse struct {
	// List of custom headers.
	CustomHeaders []EndpointPropertiesResponseProperties `pulumi:"customHeaders"`
	// Specifies the location of the external or nested endpoints when using the ‘Performance’ traffic routing method.
	EndpointLocation *string `pulumi:"endpointLocation"`
	// The monitoring status of the endpoint.
	EndpointMonitorStatus *string `pulumi:"endpointMonitorStatus"`
	// The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.
	EndpointStatus *string `pulumi:"endpointStatus"`
	// The list of countries/regions mapped to this endpoint when using the ‘Geographic’ traffic routing method. Please consult Traffic Manager Geographic documentation for a full list of accepted values.
	GeoMapping []string `pulumi:"geoMapping"`
	// The minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.
	MinChildEndpoints *int `pulumi:"minChildEndpoints"`
	// The priority of this endpoint when using the ‘Priority’ traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.
	Priority *int `pulumi:"priority"`
	// The fully-qualified DNS name or IP address of the endpoint. Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.
	Target *string `pulumi:"target"`
	// The Azure Resource URI of the of the endpoint. Not applicable to endpoints of type 'ExternalEndpoints'.
	TargetResourceId *string `pulumi:"targetResourceId"`
	// The weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000.
	Weight *int `pulumi:"weight"`
}

// EndpointPropertiesResponseInput is an input type that accepts EndpointPropertiesResponseArgs and EndpointPropertiesResponseOutput values.
// You can construct a concrete instance of `EndpointPropertiesResponseInput` via:
//
//          EndpointPropertiesResponseArgs{...}
type EndpointPropertiesResponseInput interface {
	pulumi.Input

	ToEndpointPropertiesResponseOutput() EndpointPropertiesResponseOutput
	ToEndpointPropertiesResponseOutputWithContext(context.Context) EndpointPropertiesResponseOutput
}

// Class representing a Traffic Manager endpoint properties.
type EndpointPropertiesResponseArgs struct {
	// List of custom headers.
	CustomHeaders EndpointPropertiesResponsePropertiesArrayInput `pulumi:"customHeaders"`
	// Specifies the location of the external or nested endpoints when using the ‘Performance’ traffic routing method.
	EndpointLocation pulumi.StringPtrInput `pulumi:"endpointLocation"`
	// The monitoring status of the endpoint.
	EndpointMonitorStatus pulumi.StringPtrInput `pulumi:"endpointMonitorStatus"`
	// The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.
	EndpointStatus pulumi.StringPtrInput `pulumi:"endpointStatus"`
	// The list of countries/regions mapped to this endpoint when using the ‘Geographic’ traffic routing method. Please consult Traffic Manager Geographic documentation for a full list of accepted values.
	GeoMapping pulumi.StringArrayInput `pulumi:"geoMapping"`
	// The minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.
	MinChildEndpoints pulumi.IntPtrInput `pulumi:"minChildEndpoints"`
	// The priority of this endpoint when using the ‘Priority’ traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The fully-qualified DNS name or IP address of the endpoint. Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// The Azure Resource URI of the of the endpoint. Not applicable to endpoints of type 'ExternalEndpoints'.
	TargetResourceId pulumi.StringPtrInput `pulumi:"targetResourceId"`
	// The weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (EndpointPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPropertiesResponse)(nil)).Elem()
}

func (i EndpointPropertiesResponseArgs) ToEndpointPropertiesResponseOutput() EndpointPropertiesResponseOutput {
	return i.ToEndpointPropertiesResponseOutputWithContext(context.Background())
}

func (i EndpointPropertiesResponseArgs) ToEndpointPropertiesResponseOutputWithContext(ctx context.Context) EndpointPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPropertiesResponseOutput)
}

func (i EndpointPropertiesResponseArgs) ToEndpointPropertiesResponsePtrOutput() EndpointPropertiesResponsePtrOutput {
	return i.ToEndpointPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i EndpointPropertiesResponseArgs) ToEndpointPropertiesResponsePtrOutputWithContext(ctx context.Context) EndpointPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPropertiesResponseOutput).ToEndpointPropertiesResponsePtrOutputWithContext(ctx)
}

// EndpointPropertiesResponsePtrInput is an input type that accepts EndpointPropertiesResponseArgs, EndpointPropertiesResponsePtr and EndpointPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `EndpointPropertiesResponsePtrInput` via:
//
//          EndpointPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type EndpointPropertiesResponsePtrInput interface {
	pulumi.Input

	ToEndpointPropertiesResponsePtrOutput() EndpointPropertiesResponsePtrOutput
	ToEndpointPropertiesResponsePtrOutputWithContext(context.Context) EndpointPropertiesResponsePtrOutput
}

type endpointPropertiesResponsePtrType EndpointPropertiesResponseArgs

func EndpointPropertiesResponsePtr(v *EndpointPropertiesResponseArgs) EndpointPropertiesResponsePtrInput {
	return (*endpointPropertiesResponsePtrType)(v)
}

func (*endpointPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointPropertiesResponse)(nil)).Elem()
}

func (i *endpointPropertiesResponsePtrType) ToEndpointPropertiesResponsePtrOutput() EndpointPropertiesResponsePtrOutput {
	return i.ToEndpointPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *endpointPropertiesResponsePtrType) ToEndpointPropertiesResponsePtrOutputWithContext(ctx context.Context) EndpointPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPropertiesResponsePtrOutput)
}

// Class representing a Traffic Manager endpoint properties.
type EndpointPropertiesResponseOutput struct{ *pulumi.OutputState }

func (EndpointPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPropertiesResponse)(nil)).Elem()
}

func (o EndpointPropertiesResponseOutput) ToEndpointPropertiesResponseOutput() EndpointPropertiesResponseOutput {
	return o
}

func (o EndpointPropertiesResponseOutput) ToEndpointPropertiesResponseOutputWithContext(ctx context.Context) EndpointPropertiesResponseOutput {
	return o
}

func (o EndpointPropertiesResponseOutput) ToEndpointPropertiesResponsePtrOutput() EndpointPropertiesResponsePtrOutput {
	return o.ToEndpointPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o EndpointPropertiesResponseOutput) ToEndpointPropertiesResponsePtrOutputWithContext(ctx context.Context) EndpointPropertiesResponsePtrOutput {
	return o.ApplyT(func(v EndpointPropertiesResponse) *EndpointPropertiesResponse {
		return &v
	}).(EndpointPropertiesResponsePtrOutput)
}

// List of custom headers.
func (o EndpointPropertiesResponseOutput) CustomHeaders() EndpointPropertiesResponsePropertiesArrayOutput {
	return o.ApplyT(func(v EndpointPropertiesResponse) []EndpointPropertiesResponseProperties { return v.CustomHeaders }).(EndpointPropertiesResponsePropertiesArrayOutput)
}

// Specifies the location of the external or nested endpoints when using the ‘Performance’ traffic routing method.
func (o EndpointPropertiesResponseOutput) EndpointLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPropertiesResponse) *string { return v.EndpointLocation }).(pulumi.StringPtrOutput)
}

// The monitoring status of the endpoint.
func (o EndpointPropertiesResponseOutput) EndpointMonitorStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPropertiesResponse) *string { return v.EndpointMonitorStatus }).(pulumi.StringPtrOutput)
}

// The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.
func (o EndpointPropertiesResponseOutput) EndpointStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPropertiesResponse) *string { return v.EndpointStatus }).(pulumi.StringPtrOutput)
}

// The list of countries/regions mapped to this endpoint when using the ‘Geographic’ traffic routing method. Please consult Traffic Manager Geographic documentation for a full list of accepted values.
func (o EndpointPropertiesResponseOutput) GeoMapping() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EndpointPropertiesResponse) []string { return v.GeoMapping }).(pulumi.StringArrayOutput)
}

// The minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.
func (o EndpointPropertiesResponseOutput) MinChildEndpoints() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointPropertiesResponse) *int { return v.MinChildEndpoints }).(pulumi.IntPtrOutput)
}

// The priority of this endpoint when using the ‘Priority’ traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.
func (o EndpointPropertiesResponseOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointPropertiesResponse) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The fully-qualified DNS name or IP address of the endpoint. Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.
func (o EndpointPropertiesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPropertiesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// The Azure Resource URI of the of the endpoint. Not applicable to endpoints of type 'ExternalEndpoints'.
func (o EndpointPropertiesResponseOutput) TargetResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPropertiesResponse) *string { return v.TargetResourceId }).(pulumi.StringPtrOutput)
}

// The weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000.
func (o EndpointPropertiesResponseOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointPropertiesResponse) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type EndpointPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (EndpointPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointPropertiesResponse)(nil)).Elem()
}

func (o EndpointPropertiesResponsePtrOutput) ToEndpointPropertiesResponsePtrOutput() EndpointPropertiesResponsePtrOutput {
	return o
}

func (o EndpointPropertiesResponsePtrOutput) ToEndpointPropertiesResponsePtrOutputWithContext(ctx context.Context) EndpointPropertiesResponsePtrOutput {
	return o
}

func (o EndpointPropertiesResponsePtrOutput) Elem() EndpointPropertiesResponseOutput {
	return o.ApplyT(func(v *EndpointPropertiesResponse) EndpointPropertiesResponse { return *v }).(EndpointPropertiesResponseOutput)
}

// List of custom headers.
func (o EndpointPropertiesResponsePtrOutput) CustomHeaders() EndpointPropertiesResponsePropertiesArrayOutput {
	return o.ApplyT(func(v *EndpointPropertiesResponse) []EndpointPropertiesResponseProperties {
		if v == nil {
			return nil
		}
		return v.CustomHeaders
	}).(EndpointPropertiesResponsePropertiesArrayOutput)
}

// Specifies the location of the external or nested endpoints when using the ‘Performance’ traffic routing method.
func (o EndpointPropertiesResponsePtrOutput) EndpointLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndpointLocation
	}).(pulumi.StringPtrOutput)
}

// The monitoring status of the endpoint.
func (o EndpointPropertiesResponsePtrOutput) EndpointMonitorStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndpointMonitorStatus
	}).(pulumi.StringPtrOutput)
}

// The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.
func (o EndpointPropertiesResponsePtrOutput) EndpointStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndpointStatus
	}).(pulumi.StringPtrOutput)
}

// The list of countries/regions mapped to this endpoint when using the ‘Geographic’ traffic routing method. Please consult Traffic Manager Geographic documentation for a full list of accepted values.
func (o EndpointPropertiesResponsePtrOutput) GeoMapping() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EndpointPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.GeoMapping
	}).(pulumi.StringArrayOutput)
}

// The minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'.
func (o EndpointPropertiesResponsePtrOutput) MinChildEndpoints() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinChildEndpoints
	}).(pulumi.IntPtrOutput)
}

// The priority of this endpoint when using the ‘Priority’ traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.
func (o EndpointPropertiesResponsePtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

// The fully-qualified DNS name or IP address of the endpoint. Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.
func (o EndpointPropertiesResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// The Azure Resource URI of the of the endpoint. Not applicable to endpoints of type 'ExternalEndpoints'.
func (o EndpointPropertiesResponsePtrOutput) TargetResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.TargetResourceId
	}).(pulumi.StringPtrOutput)
}

// The weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000.
func (o EndpointPropertiesResponsePtrOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.Weight
	}).(pulumi.IntPtrOutput)
}

// Custom header name and value.
type EndpointPropertiesResponseProperties struct {
	// Header name.
	Name *string `pulumi:"name"`
	// Header value.
	Value *string `pulumi:"value"`
}

// EndpointPropertiesResponsePropertiesInput is an input type that accepts EndpointPropertiesResponsePropertiesArgs and EndpointPropertiesResponsePropertiesOutput values.
// You can construct a concrete instance of `EndpointPropertiesResponsePropertiesInput` via:
//
//          EndpointPropertiesResponsePropertiesArgs{...}
type EndpointPropertiesResponsePropertiesInput interface {
	pulumi.Input

	ToEndpointPropertiesResponsePropertiesOutput() EndpointPropertiesResponsePropertiesOutput
	ToEndpointPropertiesResponsePropertiesOutputWithContext(context.Context) EndpointPropertiesResponsePropertiesOutput
}

// Custom header name and value.
type EndpointPropertiesResponsePropertiesArgs struct {
	// Header name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Header value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (EndpointPropertiesResponsePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPropertiesResponseProperties)(nil)).Elem()
}

func (i EndpointPropertiesResponsePropertiesArgs) ToEndpointPropertiesResponsePropertiesOutput() EndpointPropertiesResponsePropertiesOutput {
	return i.ToEndpointPropertiesResponsePropertiesOutputWithContext(context.Background())
}

func (i EndpointPropertiesResponsePropertiesArgs) ToEndpointPropertiesResponsePropertiesOutputWithContext(ctx context.Context) EndpointPropertiesResponsePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPropertiesResponsePropertiesOutput)
}

// EndpointPropertiesResponsePropertiesArrayInput is an input type that accepts EndpointPropertiesResponsePropertiesArray and EndpointPropertiesResponsePropertiesArrayOutput values.
// You can construct a concrete instance of `EndpointPropertiesResponsePropertiesArrayInput` via:
//
//          EndpointPropertiesResponsePropertiesArray{ EndpointPropertiesResponsePropertiesArgs{...} }
type EndpointPropertiesResponsePropertiesArrayInput interface {
	pulumi.Input

	ToEndpointPropertiesResponsePropertiesArrayOutput() EndpointPropertiesResponsePropertiesArrayOutput
	ToEndpointPropertiesResponsePropertiesArrayOutputWithContext(context.Context) EndpointPropertiesResponsePropertiesArrayOutput
}

type EndpointPropertiesResponsePropertiesArray []EndpointPropertiesResponsePropertiesInput

func (EndpointPropertiesResponsePropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointPropertiesResponseProperties)(nil)).Elem()
}

func (i EndpointPropertiesResponsePropertiesArray) ToEndpointPropertiesResponsePropertiesArrayOutput() EndpointPropertiesResponsePropertiesArrayOutput {
	return i.ToEndpointPropertiesResponsePropertiesArrayOutputWithContext(context.Background())
}

func (i EndpointPropertiesResponsePropertiesArray) ToEndpointPropertiesResponsePropertiesArrayOutputWithContext(ctx context.Context) EndpointPropertiesResponsePropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPropertiesResponsePropertiesArrayOutput)
}

// Custom header name and value.
type EndpointPropertiesResponsePropertiesOutput struct{ *pulumi.OutputState }

func (EndpointPropertiesResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointPropertiesResponseProperties)(nil)).Elem()
}

func (o EndpointPropertiesResponsePropertiesOutput) ToEndpointPropertiesResponsePropertiesOutput() EndpointPropertiesResponsePropertiesOutput {
	return o
}

func (o EndpointPropertiesResponsePropertiesOutput) ToEndpointPropertiesResponsePropertiesOutputWithContext(ctx context.Context) EndpointPropertiesResponsePropertiesOutput {
	return o
}

// Header name.
func (o EndpointPropertiesResponsePropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPropertiesResponseProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Header value.
func (o EndpointPropertiesResponsePropertiesOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointPropertiesResponseProperties) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EndpointPropertiesResponsePropertiesArrayOutput struct{ *pulumi.OutputState }

func (EndpointPropertiesResponsePropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointPropertiesResponseProperties)(nil)).Elem()
}

func (o EndpointPropertiesResponsePropertiesArrayOutput) ToEndpointPropertiesResponsePropertiesArrayOutput() EndpointPropertiesResponsePropertiesArrayOutput {
	return o
}

func (o EndpointPropertiesResponsePropertiesArrayOutput) ToEndpointPropertiesResponsePropertiesArrayOutputWithContext(ctx context.Context) EndpointPropertiesResponsePropertiesArrayOutput {
	return o
}

func (o EndpointPropertiesResponsePropertiesArrayOutput) Index(i pulumi.IntInput) EndpointPropertiesResponsePropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointPropertiesResponseProperties {
		return vs[0].([]EndpointPropertiesResponseProperties)[vs[1].(int)]
	}).(EndpointPropertiesResponsePropertiesOutput)
}

// Class representing a Traffic Manager endpoint.
type EndpointResponse struct {
	// Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}
	Id *string `pulumi:"id"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// The properties of the Traffic Manager endpoint.
	Properties *EndpointPropertiesResponse `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles.
	Type *string `pulumi:"type"`
}

// EndpointResponseInput is an input type that accepts EndpointResponseArgs and EndpointResponseOutput values.
// You can construct a concrete instance of `EndpointResponseInput` via:
//
//          EndpointResponseArgs{...}
type EndpointResponseInput interface {
	pulumi.Input

	ToEndpointResponseOutput() EndpointResponseOutput
	ToEndpointResponseOutputWithContext(context.Context) EndpointResponseOutput
}

// Class representing a Traffic Manager endpoint.
type EndpointResponseArgs struct {
	// Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The properties of the Traffic Manager endpoint.
	Properties EndpointPropertiesResponsePtrInput `pulumi:"properties"`
	// The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EndpointResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointResponse)(nil)).Elem()
}

func (i EndpointResponseArgs) ToEndpointResponseOutput() EndpointResponseOutput {
	return i.ToEndpointResponseOutputWithContext(context.Background())
}

func (i EndpointResponseArgs) ToEndpointResponseOutputWithContext(ctx context.Context) EndpointResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointResponseOutput)
}

// EndpointResponseArrayInput is an input type that accepts EndpointResponseArray and EndpointResponseArrayOutput values.
// You can construct a concrete instance of `EndpointResponseArrayInput` via:
//
//          EndpointResponseArray{ EndpointResponseArgs{...} }
type EndpointResponseArrayInput interface {
	pulumi.Input

	ToEndpointResponseArrayOutput() EndpointResponseArrayOutput
	ToEndpointResponseArrayOutputWithContext(context.Context) EndpointResponseArrayOutput
}

type EndpointResponseArray []EndpointResponseInput

func (EndpointResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointResponse)(nil)).Elem()
}

func (i EndpointResponseArray) ToEndpointResponseArrayOutput() EndpointResponseArrayOutput {
	return i.ToEndpointResponseArrayOutputWithContext(context.Background())
}

func (i EndpointResponseArray) ToEndpointResponseArrayOutputWithContext(ctx context.Context) EndpointResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointResponseArrayOutput)
}

// Class representing a Traffic Manager endpoint.
type EndpointResponseOutput struct{ *pulumi.OutputState }

func (EndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointResponse)(nil)).Elem()
}

func (o EndpointResponseOutput) ToEndpointResponseOutput() EndpointResponseOutput {
	return o
}

func (o EndpointResponseOutput) ToEndpointResponseOutputWithContext(ctx context.Context) EndpointResponseOutput {
	return o
}

// Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}
func (o EndpointResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o EndpointResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The properties of the Traffic Manager endpoint.
func (o EndpointResponseOutput) Properties() EndpointPropertiesResponsePtrOutput {
	return o.ApplyT(func(v EndpointResponse) *EndpointPropertiesResponse { return v.Properties }).(EndpointPropertiesResponsePtrOutput)
}

// The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles.
func (o EndpointResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EndpointResponseArrayOutput struct{ *pulumi.OutputState }

func (EndpointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointResponse)(nil)).Elem()
}

func (o EndpointResponseArrayOutput) ToEndpointResponseArrayOutput() EndpointResponseArrayOutput {
	return o
}

func (o EndpointResponseArrayOutput) ToEndpointResponseArrayOutputWithContext(ctx context.Context) EndpointResponseArrayOutput {
	return o
}

func (o EndpointResponseArrayOutput) Index(i pulumi.IntInput) EndpointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointResponse {
		return vs[0].([]EndpointResponse)[vs[1].(int)]
	}).(EndpointResponseOutput)
}

// Class containing endpoint monitoring settings in a Traffic Manager profile.
type MonitorConfig struct {
	// List of custom headers.
	CustomHeaders []MonitorConfigProperties `pulumi:"customHeaders"`
	// List of expected status code ranges.
	ExpectedStatusCodeRanges []MonitorConfigProperties `pulumi:"expectedStatusCodeRanges"`
	// The monitor interval for endpoints in this profile. This is the interval at which Traffic Manager will check the health of each endpoint in this profile.
	IntervalInSeconds *int `pulumi:"intervalInSeconds"`
	// The path relative to the endpoint domain name used to probe for endpoint health.
	Path *string `pulumi:"path"`
	// The TCP port used to probe for endpoint health.
	Port *int `pulumi:"port"`
	// The profile-level monitoring status of the Traffic Manager profile.
	ProfileMonitorStatus *string `pulumi:"profileMonitorStatus"`
	// The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health.
	Protocol *string `pulumi:"protocol"`
	// The monitor timeout for endpoints in this profile. This is the time that Traffic Manager allows endpoints in this profile to response to the health check.
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
	// The number of consecutive failed health check that Traffic Manager tolerates before declaring an endpoint in this profile Degraded after the next failed health check.
	ToleratedNumberOfFailures *int `pulumi:"toleratedNumberOfFailures"`
}

// MonitorConfigInput is an input type that accepts MonitorConfigArgs and MonitorConfigOutput values.
// You can construct a concrete instance of `MonitorConfigInput` via:
//
//          MonitorConfigArgs{...}
type MonitorConfigInput interface {
	pulumi.Input

	ToMonitorConfigOutput() MonitorConfigOutput
	ToMonitorConfigOutputWithContext(context.Context) MonitorConfigOutput
}

// Class containing endpoint monitoring settings in a Traffic Manager profile.
type MonitorConfigArgs struct {
	// List of custom headers.
	CustomHeaders MonitorConfigPropertiesArrayInput `pulumi:"customHeaders"`
	// List of expected status code ranges.
	ExpectedStatusCodeRanges MonitorConfigPropertiesArrayInput `pulumi:"expectedStatusCodeRanges"`
	// The monitor interval for endpoints in this profile. This is the interval at which Traffic Manager will check the health of each endpoint in this profile.
	IntervalInSeconds pulumi.IntPtrInput `pulumi:"intervalInSeconds"`
	// The path relative to the endpoint domain name used to probe for endpoint health.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The TCP port used to probe for endpoint health.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The profile-level monitoring status of the Traffic Manager profile.
	ProfileMonitorStatus pulumi.StringPtrInput `pulumi:"profileMonitorStatus"`
	// The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// The monitor timeout for endpoints in this profile. This is the time that Traffic Manager allows endpoints in this profile to response to the health check.
	TimeoutInSeconds pulumi.IntPtrInput `pulumi:"timeoutInSeconds"`
	// The number of consecutive failed health check that Traffic Manager tolerates before declaring an endpoint in this profile Degraded after the next failed health check.
	ToleratedNumberOfFailures pulumi.IntPtrInput `pulumi:"toleratedNumberOfFailures"`
}

func (MonitorConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorConfig)(nil)).Elem()
}

func (i MonitorConfigArgs) ToMonitorConfigOutput() MonitorConfigOutput {
	return i.ToMonitorConfigOutputWithContext(context.Background())
}

func (i MonitorConfigArgs) ToMonitorConfigOutputWithContext(ctx context.Context) MonitorConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorConfigOutput)
}

func (i MonitorConfigArgs) ToMonitorConfigPtrOutput() MonitorConfigPtrOutput {
	return i.ToMonitorConfigPtrOutputWithContext(context.Background())
}

func (i MonitorConfigArgs) ToMonitorConfigPtrOutputWithContext(ctx context.Context) MonitorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorConfigOutput).ToMonitorConfigPtrOutputWithContext(ctx)
}

// MonitorConfigPtrInput is an input type that accepts MonitorConfigArgs, MonitorConfigPtr and MonitorConfigPtrOutput values.
// You can construct a concrete instance of `MonitorConfigPtrInput` via:
//
//          MonitorConfigArgs{...}
//
//  or:
//
//          nil
type MonitorConfigPtrInput interface {
	pulumi.Input

	ToMonitorConfigPtrOutput() MonitorConfigPtrOutput
	ToMonitorConfigPtrOutputWithContext(context.Context) MonitorConfigPtrOutput
}

type monitorConfigPtrType MonitorConfigArgs

func MonitorConfigPtr(v *MonitorConfigArgs) MonitorConfigPtrInput {
	return (*monitorConfigPtrType)(v)
}

func (*monitorConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorConfig)(nil)).Elem()
}

func (i *monitorConfigPtrType) ToMonitorConfigPtrOutput() MonitorConfigPtrOutput {
	return i.ToMonitorConfigPtrOutputWithContext(context.Background())
}

func (i *monitorConfigPtrType) ToMonitorConfigPtrOutputWithContext(ctx context.Context) MonitorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorConfigPtrOutput)
}

// Class containing endpoint monitoring settings in a Traffic Manager profile.
type MonitorConfigOutput struct{ *pulumi.OutputState }

func (MonitorConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorConfig)(nil)).Elem()
}

func (o MonitorConfigOutput) ToMonitorConfigOutput() MonitorConfigOutput {
	return o
}

func (o MonitorConfigOutput) ToMonitorConfigOutputWithContext(ctx context.Context) MonitorConfigOutput {
	return o
}

func (o MonitorConfigOutput) ToMonitorConfigPtrOutput() MonitorConfigPtrOutput {
	return o.ToMonitorConfigPtrOutputWithContext(context.Background())
}

func (o MonitorConfigOutput) ToMonitorConfigPtrOutputWithContext(ctx context.Context) MonitorConfigPtrOutput {
	return o.ApplyT(func(v MonitorConfig) *MonitorConfig {
		return &v
	}).(MonitorConfigPtrOutput)
}

// List of custom headers.
func (o MonitorConfigOutput) CustomHeaders() MonitorConfigPropertiesArrayOutput {
	return o.ApplyT(func(v MonitorConfig) []MonitorConfigProperties { return v.CustomHeaders }).(MonitorConfigPropertiesArrayOutput)
}

// List of expected status code ranges.
func (o MonitorConfigOutput) ExpectedStatusCodeRanges() MonitorConfigPropertiesArrayOutput {
	return o.ApplyT(func(v MonitorConfig) []MonitorConfigProperties { return v.ExpectedStatusCodeRanges }).(MonitorConfigPropertiesArrayOutput)
}

// The monitor interval for endpoints in this profile. This is the interval at which Traffic Manager will check the health of each endpoint in this profile.
func (o MonitorConfigOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonitorConfig) *int { return v.IntervalInSeconds }).(pulumi.IntPtrOutput)
}

// The path relative to the endpoint domain name used to probe for endpoint health.
func (o MonitorConfigOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConfig) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The TCP port used to probe for endpoint health.
func (o MonitorConfigOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonitorConfig) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The profile-level monitoring status of the Traffic Manager profile.
func (o MonitorConfigOutput) ProfileMonitorStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConfig) *string { return v.ProfileMonitorStatus }).(pulumi.StringPtrOutput)
}

// The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health.
func (o MonitorConfigOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConfig) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The monitor timeout for endpoints in this profile. This is the time that Traffic Manager allows endpoints in this profile to response to the health check.
func (o MonitorConfigOutput) TimeoutInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonitorConfig) *int { return v.TimeoutInSeconds }).(pulumi.IntPtrOutput)
}

// The number of consecutive failed health check that Traffic Manager tolerates before declaring an endpoint in this profile Degraded after the next failed health check.
func (o MonitorConfigOutput) ToleratedNumberOfFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonitorConfig) *int { return v.ToleratedNumberOfFailures }).(pulumi.IntPtrOutput)
}

type MonitorConfigPtrOutput struct{ *pulumi.OutputState }

func (MonitorConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorConfig)(nil)).Elem()
}

func (o MonitorConfigPtrOutput) ToMonitorConfigPtrOutput() MonitorConfigPtrOutput {
	return o
}

func (o MonitorConfigPtrOutput) ToMonitorConfigPtrOutputWithContext(ctx context.Context) MonitorConfigPtrOutput {
	return o
}

func (o MonitorConfigPtrOutput) Elem() MonitorConfigOutput {
	return o.ApplyT(func(v *MonitorConfig) MonitorConfig { return *v }).(MonitorConfigOutput)
}

// List of custom headers.
func (o MonitorConfigPtrOutput) CustomHeaders() MonitorConfigPropertiesArrayOutput {
	return o.ApplyT(func(v *MonitorConfig) []MonitorConfigProperties {
		if v == nil {
			return nil
		}
		return v.CustomHeaders
	}).(MonitorConfigPropertiesArrayOutput)
}

// List of expected status code ranges.
func (o MonitorConfigPtrOutput) ExpectedStatusCodeRanges() MonitorConfigPropertiesArrayOutput {
	return o.ApplyT(func(v *MonitorConfig) []MonitorConfigProperties {
		if v == nil {
			return nil
		}
		return v.ExpectedStatusCodeRanges
	}).(MonitorConfigPropertiesArrayOutput)
}

// The monitor interval for endpoints in this profile. This is the interval at which Traffic Manager will check the health of each endpoint in this profile.
func (o MonitorConfigPtrOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonitorConfig) *int {
		if v == nil {
			return nil
		}
		return v.IntervalInSeconds
	}).(pulumi.IntPtrOutput)
}

// The path relative to the endpoint domain name used to probe for endpoint health.
func (o MonitorConfigPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorConfig) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// The TCP port used to probe for endpoint health.
func (o MonitorConfigPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonitorConfig) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The profile-level monitoring status of the Traffic Manager profile.
func (o MonitorConfigPtrOutput) ProfileMonitorStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorConfig) *string {
		if v == nil {
			return nil
		}
		return v.ProfileMonitorStatus
	}).(pulumi.StringPtrOutput)
}

// The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health.
func (o MonitorConfigPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorConfig) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

// The monitor timeout for endpoints in this profile. This is the time that Traffic Manager allows endpoints in this profile to response to the health check.
func (o MonitorConfigPtrOutput) TimeoutInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonitorConfig) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutInSeconds
	}).(pulumi.IntPtrOutput)
}

// The number of consecutive failed health check that Traffic Manager tolerates before declaring an endpoint in this profile Degraded after the next failed health check.
func (o MonitorConfigPtrOutput) ToleratedNumberOfFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonitorConfig) *int {
		if v == nil {
			return nil
		}
		return v.ToleratedNumberOfFailures
	}).(pulumi.IntPtrOutput)
}

// Custom header name and value.
type MonitorConfigProperties struct {
	// Header name.
	Name *string `pulumi:"name"`
	// Header value.
	Value *string `pulumi:"value"`
}

// MonitorConfigPropertiesInput is an input type that accepts MonitorConfigPropertiesArgs and MonitorConfigPropertiesOutput values.
// You can construct a concrete instance of `MonitorConfigPropertiesInput` via:
//
//          MonitorConfigPropertiesArgs{...}
type MonitorConfigPropertiesInput interface {
	pulumi.Input

	ToMonitorConfigPropertiesOutput() MonitorConfigPropertiesOutput
	ToMonitorConfigPropertiesOutputWithContext(context.Context) MonitorConfigPropertiesOutput
}

// Custom header name and value.
type MonitorConfigPropertiesArgs struct {
	// Header name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Header value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (MonitorConfigPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorConfigProperties)(nil)).Elem()
}

func (i MonitorConfigPropertiesArgs) ToMonitorConfigPropertiesOutput() MonitorConfigPropertiesOutput {
	return i.ToMonitorConfigPropertiesOutputWithContext(context.Background())
}

func (i MonitorConfigPropertiesArgs) ToMonitorConfigPropertiesOutputWithContext(ctx context.Context) MonitorConfigPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorConfigPropertiesOutput)
}

// MonitorConfigPropertiesArrayInput is an input type that accepts MonitorConfigPropertiesArray and MonitorConfigPropertiesArrayOutput values.
// You can construct a concrete instance of `MonitorConfigPropertiesArrayInput` via:
//
//          MonitorConfigPropertiesArray{ MonitorConfigPropertiesArgs{...} }
type MonitorConfigPropertiesArrayInput interface {
	pulumi.Input

	ToMonitorConfigPropertiesArrayOutput() MonitorConfigPropertiesArrayOutput
	ToMonitorConfigPropertiesArrayOutputWithContext(context.Context) MonitorConfigPropertiesArrayOutput
}

type MonitorConfigPropertiesArray []MonitorConfigPropertiesInput

func (MonitorConfigPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorConfigProperties)(nil)).Elem()
}

func (i MonitorConfigPropertiesArray) ToMonitorConfigPropertiesArrayOutput() MonitorConfigPropertiesArrayOutput {
	return i.ToMonitorConfigPropertiesArrayOutputWithContext(context.Background())
}

func (i MonitorConfigPropertiesArray) ToMonitorConfigPropertiesArrayOutputWithContext(ctx context.Context) MonitorConfigPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorConfigPropertiesArrayOutput)
}

// Custom header name and value.
type MonitorConfigPropertiesOutput struct{ *pulumi.OutputState }

func (MonitorConfigPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorConfigProperties)(nil)).Elem()
}

func (o MonitorConfigPropertiesOutput) ToMonitorConfigPropertiesOutput() MonitorConfigPropertiesOutput {
	return o
}

func (o MonitorConfigPropertiesOutput) ToMonitorConfigPropertiesOutputWithContext(ctx context.Context) MonitorConfigPropertiesOutput {
	return o
}

// Header name.
func (o MonitorConfigPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConfigProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Header value.
func (o MonitorConfigPropertiesOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConfigProperties) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type MonitorConfigPropertiesArrayOutput struct{ *pulumi.OutputState }

func (MonitorConfigPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorConfigProperties)(nil)).Elem()
}

func (o MonitorConfigPropertiesArrayOutput) ToMonitorConfigPropertiesArrayOutput() MonitorConfigPropertiesArrayOutput {
	return o
}

func (o MonitorConfigPropertiesArrayOutput) ToMonitorConfigPropertiesArrayOutputWithContext(ctx context.Context) MonitorConfigPropertiesArrayOutput {
	return o
}

func (o MonitorConfigPropertiesArrayOutput) Index(i pulumi.IntInput) MonitorConfigPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitorConfigProperties {
		return vs[0].([]MonitorConfigProperties)[vs[1].(int)]
	}).(MonitorConfigPropertiesOutput)
}

// Class containing endpoint monitoring settings in a Traffic Manager profile.
type MonitorConfigResponse struct {
	// List of custom headers.
	CustomHeaders []MonitorConfigResponseProperties `pulumi:"customHeaders"`
	// List of expected status code ranges.
	ExpectedStatusCodeRanges []MonitorConfigResponseProperties `pulumi:"expectedStatusCodeRanges"`
	// The monitor interval for endpoints in this profile. This is the interval at which Traffic Manager will check the health of each endpoint in this profile.
	IntervalInSeconds *int `pulumi:"intervalInSeconds"`
	// The path relative to the endpoint domain name used to probe for endpoint health.
	Path *string `pulumi:"path"`
	// The TCP port used to probe for endpoint health.
	Port *int `pulumi:"port"`
	// The profile-level monitoring status of the Traffic Manager profile.
	ProfileMonitorStatus *string `pulumi:"profileMonitorStatus"`
	// The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health.
	Protocol *string `pulumi:"protocol"`
	// The monitor timeout for endpoints in this profile. This is the time that Traffic Manager allows endpoints in this profile to response to the health check.
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
	// The number of consecutive failed health check that Traffic Manager tolerates before declaring an endpoint in this profile Degraded after the next failed health check.
	ToleratedNumberOfFailures *int `pulumi:"toleratedNumberOfFailures"`
}

// MonitorConfigResponseInput is an input type that accepts MonitorConfigResponseArgs and MonitorConfigResponseOutput values.
// You can construct a concrete instance of `MonitorConfigResponseInput` via:
//
//          MonitorConfigResponseArgs{...}
type MonitorConfigResponseInput interface {
	pulumi.Input

	ToMonitorConfigResponseOutput() MonitorConfigResponseOutput
	ToMonitorConfigResponseOutputWithContext(context.Context) MonitorConfigResponseOutput
}

// Class containing endpoint monitoring settings in a Traffic Manager profile.
type MonitorConfigResponseArgs struct {
	// List of custom headers.
	CustomHeaders MonitorConfigResponsePropertiesArrayInput `pulumi:"customHeaders"`
	// List of expected status code ranges.
	ExpectedStatusCodeRanges MonitorConfigResponsePropertiesArrayInput `pulumi:"expectedStatusCodeRanges"`
	// The monitor interval for endpoints in this profile. This is the interval at which Traffic Manager will check the health of each endpoint in this profile.
	IntervalInSeconds pulumi.IntPtrInput `pulumi:"intervalInSeconds"`
	// The path relative to the endpoint domain name used to probe for endpoint health.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The TCP port used to probe for endpoint health.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The profile-level monitoring status of the Traffic Manager profile.
	ProfileMonitorStatus pulumi.StringPtrInput `pulumi:"profileMonitorStatus"`
	// The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// The monitor timeout for endpoints in this profile. This is the time that Traffic Manager allows endpoints in this profile to response to the health check.
	TimeoutInSeconds pulumi.IntPtrInput `pulumi:"timeoutInSeconds"`
	// The number of consecutive failed health check that Traffic Manager tolerates before declaring an endpoint in this profile Degraded after the next failed health check.
	ToleratedNumberOfFailures pulumi.IntPtrInput `pulumi:"toleratedNumberOfFailures"`
}

func (MonitorConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorConfigResponse)(nil)).Elem()
}

func (i MonitorConfigResponseArgs) ToMonitorConfigResponseOutput() MonitorConfigResponseOutput {
	return i.ToMonitorConfigResponseOutputWithContext(context.Background())
}

func (i MonitorConfigResponseArgs) ToMonitorConfigResponseOutputWithContext(ctx context.Context) MonitorConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorConfigResponseOutput)
}

func (i MonitorConfigResponseArgs) ToMonitorConfigResponsePtrOutput() MonitorConfigResponsePtrOutput {
	return i.ToMonitorConfigResponsePtrOutputWithContext(context.Background())
}

func (i MonitorConfigResponseArgs) ToMonitorConfigResponsePtrOutputWithContext(ctx context.Context) MonitorConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorConfigResponseOutput).ToMonitorConfigResponsePtrOutputWithContext(ctx)
}

// MonitorConfigResponsePtrInput is an input type that accepts MonitorConfigResponseArgs, MonitorConfigResponsePtr and MonitorConfigResponsePtrOutput values.
// You can construct a concrete instance of `MonitorConfigResponsePtrInput` via:
//
//          MonitorConfigResponseArgs{...}
//
//  or:
//
//          nil
type MonitorConfigResponsePtrInput interface {
	pulumi.Input

	ToMonitorConfigResponsePtrOutput() MonitorConfigResponsePtrOutput
	ToMonitorConfigResponsePtrOutputWithContext(context.Context) MonitorConfigResponsePtrOutput
}

type monitorConfigResponsePtrType MonitorConfigResponseArgs

func MonitorConfigResponsePtr(v *MonitorConfigResponseArgs) MonitorConfigResponsePtrInput {
	return (*monitorConfigResponsePtrType)(v)
}

func (*monitorConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorConfigResponse)(nil)).Elem()
}

func (i *monitorConfigResponsePtrType) ToMonitorConfigResponsePtrOutput() MonitorConfigResponsePtrOutput {
	return i.ToMonitorConfigResponsePtrOutputWithContext(context.Background())
}

func (i *monitorConfigResponsePtrType) ToMonitorConfigResponsePtrOutputWithContext(ctx context.Context) MonitorConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorConfigResponsePtrOutput)
}

// Class containing endpoint monitoring settings in a Traffic Manager profile.
type MonitorConfigResponseOutput struct{ *pulumi.OutputState }

func (MonitorConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorConfigResponse)(nil)).Elem()
}

func (o MonitorConfigResponseOutput) ToMonitorConfigResponseOutput() MonitorConfigResponseOutput {
	return o
}

func (o MonitorConfigResponseOutput) ToMonitorConfigResponseOutputWithContext(ctx context.Context) MonitorConfigResponseOutput {
	return o
}

func (o MonitorConfigResponseOutput) ToMonitorConfigResponsePtrOutput() MonitorConfigResponsePtrOutput {
	return o.ToMonitorConfigResponsePtrOutputWithContext(context.Background())
}

func (o MonitorConfigResponseOutput) ToMonitorConfigResponsePtrOutputWithContext(ctx context.Context) MonitorConfigResponsePtrOutput {
	return o.ApplyT(func(v MonitorConfigResponse) *MonitorConfigResponse {
		return &v
	}).(MonitorConfigResponsePtrOutput)
}

// List of custom headers.
func (o MonitorConfigResponseOutput) CustomHeaders() MonitorConfigResponsePropertiesArrayOutput {
	return o.ApplyT(func(v MonitorConfigResponse) []MonitorConfigResponseProperties { return v.CustomHeaders }).(MonitorConfigResponsePropertiesArrayOutput)
}

// List of expected status code ranges.
func (o MonitorConfigResponseOutput) ExpectedStatusCodeRanges() MonitorConfigResponsePropertiesArrayOutput {
	return o.ApplyT(func(v MonitorConfigResponse) []MonitorConfigResponseProperties { return v.ExpectedStatusCodeRanges }).(MonitorConfigResponsePropertiesArrayOutput)
}

// The monitor interval for endpoints in this profile. This is the interval at which Traffic Manager will check the health of each endpoint in this profile.
func (o MonitorConfigResponseOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonitorConfigResponse) *int { return v.IntervalInSeconds }).(pulumi.IntPtrOutput)
}

// The path relative to the endpoint domain name used to probe for endpoint health.
func (o MonitorConfigResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConfigResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The TCP port used to probe for endpoint health.
func (o MonitorConfigResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonitorConfigResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The profile-level monitoring status of the Traffic Manager profile.
func (o MonitorConfigResponseOutput) ProfileMonitorStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConfigResponse) *string { return v.ProfileMonitorStatus }).(pulumi.StringPtrOutput)
}

// The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health.
func (o MonitorConfigResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConfigResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The monitor timeout for endpoints in this profile. This is the time that Traffic Manager allows endpoints in this profile to response to the health check.
func (o MonitorConfigResponseOutput) TimeoutInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonitorConfigResponse) *int { return v.TimeoutInSeconds }).(pulumi.IntPtrOutput)
}

// The number of consecutive failed health check that Traffic Manager tolerates before declaring an endpoint in this profile Degraded after the next failed health check.
func (o MonitorConfigResponseOutput) ToleratedNumberOfFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonitorConfigResponse) *int { return v.ToleratedNumberOfFailures }).(pulumi.IntPtrOutput)
}

type MonitorConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (MonitorConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorConfigResponse)(nil)).Elem()
}

func (o MonitorConfigResponsePtrOutput) ToMonitorConfigResponsePtrOutput() MonitorConfigResponsePtrOutput {
	return o
}

func (o MonitorConfigResponsePtrOutput) ToMonitorConfigResponsePtrOutputWithContext(ctx context.Context) MonitorConfigResponsePtrOutput {
	return o
}

func (o MonitorConfigResponsePtrOutput) Elem() MonitorConfigResponseOutput {
	return o.ApplyT(func(v *MonitorConfigResponse) MonitorConfigResponse { return *v }).(MonitorConfigResponseOutput)
}

// List of custom headers.
func (o MonitorConfigResponsePtrOutput) CustomHeaders() MonitorConfigResponsePropertiesArrayOutput {
	return o.ApplyT(func(v *MonitorConfigResponse) []MonitorConfigResponseProperties {
		if v == nil {
			return nil
		}
		return v.CustomHeaders
	}).(MonitorConfigResponsePropertiesArrayOutput)
}

// List of expected status code ranges.
func (o MonitorConfigResponsePtrOutput) ExpectedStatusCodeRanges() MonitorConfigResponsePropertiesArrayOutput {
	return o.ApplyT(func(v *MonitorConfigResponse) []MonitorConfigResponseProperties {
		if v == nil {
			return nil
		}
		return v.ExpectedStatusCodeRanges
	}).(MonitorConfigResponsePropertiesArrayOutput)
}

// The monitor interval for endpoints in this profile. This is the interval at which Traffic Manager will check the health of each endpoint in this profile.
func (o MonitorConfigResponsePtrOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonitorConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.IntervalInSeconds
	}).(pulumi.IntPtrOutput)
}

// The path relative to the endpoint domain name used to probe for endpoint health.
func (o MonitorConfigResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// The TCP port used to probe for endpoint health.
func (o MonitorConfigResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonitorConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The profile-level monitoring status of the Traffic Manager profile.
func (o MonitorConfigResponsePtrOutput) ProfileMonitorStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProfileMonitorStatus
	}).(pulumi.StringPtrOutput)
}

// The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health.
func (o MonitorConfigResponsePtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

// The monitor timeout for endpoints in this profile. This is the time that Traffic Manager allows endpoints in this profile to response to the health check.
func (o MonitorConfigResponsePtrOutput) TimeoutInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonitorConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutInSeconds
	}).(pulumi.IntPtrOutput)
}

// The number of consecutive failed health check that Traffic Manager tolerates before declaring an endpoint in this profile Degraded after the next failed health check.
func (o MonitorConfigResponsePtrOutput) ToleratedNumberOfFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonitorConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.ToleratedNumberOfFailures
	}).(pulumi.IntPtrOutput)
}

// Custom header name and value.
type MonitorConfigResponseProperties struct {
	// Header name.
	Name *string `pulumi:"name"`
	// Header value.
	Value *string `pulumi:"value"`
}

// MonitorConfigResponsePropertiesInput is an input type that accepts MonitorConfigResponsePropertiesArgs and MonitorConfigResponsePropertiesOutput values.
// You can construct a concrete instance of `MonitorConfigResponsePropertiesInput` via:
//
//          MonitorConfigResponsePropertiesArgs{...}
type MonitorConfigResponsePropertiesInput interface {
	pulumi.Input

	ToMonitorConfigResponsePropertiesOutput() MonitorConfigResponsePropertiesOutput
	ToMonitorConfigResponsePropertiesOutputWithContext(context.Context) MonitorConfigResponsePropertiesOutput
}

// Custom header name and value.
type MonitorConfigResponsePropertiesArgs struct {
	// Header name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Header value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (MonitorConfigResponsePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorConfigResponseProperties)(nil)).Elem()
}

func (i MonitorConfigResponsePropertiesArgs) ToMonitorConfigResponsePropertiesOutput() MonitorConfigResponsePropertiesOutput {
	return i.ToMonitorConfigResponsePropertiesOutputWithContext(context.Background())
}

func (i MonitorConfigResponsePropertiesArgs) ToMonitorConfigResponsePropertiesOutputWithContext(ctx context.Context) MonitorConfigResponsePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorConfigResponsePropertiesOutput)
}

// MonitorConfigResponsePropertiesArrayInput is an input type that accepts MonitorConfigResponsePropertiesArray and MonitorConfigResponsePropertiesArrayOutput values.
// You can construct a concrete instance of `MonitorConfigResponsePropertiesArrayInput` via:
//
//          MonitorConfigResponsePropertiesArray{ MonitorConfigResponsePropertiesArgs{...} }
type MonitorConfigResponsePropertiesArrayInput interface {
	pulumi.Input

	ToMonitorConfigResponsePropertiesArrayOutput() MonitorConfigResponsePropertiesArrayOutput
	ToMonitorConfigResponsePropertiesArrayOutputWithContext(context.Context) MonitorConfigResponsePropertiesArrayOutput
}

type MonitorConfigResponsePropertiesArray []MonitorConfigResponsePropertiesInput

func (MonitorConfigResponsePropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorConfigResponseProperties)(nil)).Elem()
}

func (i MonitorConfigResponsePropertiesArray) ToMonitorConfigResponsePropertiesArrayOutput() MonitorConfigResponsePropertiesArrayOutput {
	return i.ToMonitorConfigResponsePropertiesArrayOutputWithContext(context.Background())
}

func (i MonitorConfigResponsePropertiesArray) ToMonitorConfigResponsePropertiesArrayOutputWithContext(ctx context.Context) MonitorConfigResponsePropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorConfigResponsePropertiesArrayOutput)
}

// Custom header name and value.
type MonitorConfigResponsePropertiesOutput struct{ *pulumi.OutputState }

func (MonitorConfigResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorConfigResponseProperties)(nil)).Elem()
}

func (o MonitorConfigResponsePropertiesOutput) ToMonitorConfigResponsePropertiesOutput() MonitorConfigResponsePropertiesOutput {
	return o
}

func (o MonitorConfigResponsePropertiesOutput) ToMonitorConfigResponsePropertiesOutputWithContext(ctx context.Context) MonitorConfigResponsePropertiesOutput {
	return o
}

// Header name.
func (o MonitorConfigResponsePropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConfigResponseProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Header value.
func (o MonitorConfigResponsePropertiesOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorConfigResponseProperties) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type MonitorConfigResponsePropertiesArrayOutput struct{ *pulumi.OutputState }

func (MonitorConfigResponsePropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorConfigResponseProperties)(nil)).Elem()
}

func (o MonitorConfigResponsePropertiesArrayOutput) ToMonitorConfigResponsePropertiesArrayOutput() MonitorConfigResponsePropertiesArrayOutput {
	return o
}

func (o MonitorConfigResponsePropertiesArrayOutput) ToMonitorConfigResponsePropertiesArrayOutputWithContext(ctx context.Context) MonitorConfigResponsePropertiesArrayOutput {
	return o
}

func (o MonitorConfigResponsePropertiesArrayOutput) Index(i pulumi.IntInput) MonitorConfigResponsePropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitorConfigResponseProperties {
		return vs[0].([]MonitorConfigResponseProperties)[vs[1].(int)]
	}).(MonitorConfigResponsePropertiesOutput)
}

// Class representing a Traffic Manager profile.
type ProfileType struct {
	// The Azure Region where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// The properties of the Traffic Manager profile.
	Properties ProfilePropertiesResponse `pulumi:"properties"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles.
	Type *string `pulumi:"type"`
}

// ProfileTypeInput is an input type that accepts ProfileTypeArgs and ProfileTypeOutput values.
// You can construct a concrete instance of `ProfileTypeInput` via:
//
//          ProfileTypeArgs{...}
type ProfileTypeInput interface {
	pulumi.Input

	ToProfileTypeOutput() ProfileTypeOutput
	ToProfileTypeOutputWithContext(context.Context) ProfileTypeOutput
}

// Class representing a Traffic Manager profile.
type ProfileTypeArgs struct {
	// The Azure Region where the resource lives
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The properties of the Traffic Manager profile.
	Properties ProfilePropertiesResponseInput `pulumi:"properties"`
	// Resource tags.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ProfileTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileType)(nil)).Elem()
}

func (i ProfileTypeArgs) ToProfileTypeOutput() ProfileTypeOutput {
	return i.ToProfileTypeOutputWithContext(context.Background())
}

func (i ProfileTypeArgs) ToProfileTypeOutputWithContext(ctx context.Context) ProfileTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileTypeOutput)
}

// Class representing a Traffic Manager profile.
type ProfileTypeOutput struct{ *pulumi.OutputState }

func (ProfileTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileType)(nil)).Elem()
}

func (o ProfileTypeOutput) ToProfileTypeOutput() ProfileTypeOutput {
	return o
}

func (o ProfileTypeOutput) ToProfileTypeOutputWithContext(ctx context.Context) ProfileTypeOutput {
	return o
}

// The Azure Region where the resource lives
func (o ProfileTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o ProfileTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The properties of the Traffic Manager profile.
func (o ProfileTypeOutput) Properties() ProfilePropertiesResponseOutput {
	return o.ApplyT(func(v ProfileType) ProfilePropertiesResponse { return v.Properties }).(ProfilePropertiesResponseOutput)
}

// Resource tags.
func (o ProfileTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProfileType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles.
func (o ProfileTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Class representing the Traffic Manager profile properties.
type ProfileProperties struct {
	// The DNS settings of the Traffic Manager profile.
	DnsConfig *DnsConfig `pulumi:"dnsConfig"`
	// The list of endpoints in the Traffic Manager profile.
	Endpoints []EndpointType `pulumi:"endpoints"`
	// The endpoint monitoring settings of the Traffic Manager profile.
	MonitorConfig *MonitorConfig `pulumi:"monitorConfig"`
	// The status of the Traffic Manager profile.
	ProfileStatus *string `pulumi:"profileStatus"`
	// The traffic routing method of the Traffic Manager profile.
	TrafficRoutingMethod *string `pulumi:"trafficRoutingMethod"`
	// Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates 'Disabled'. Enabling this feature will increase the cost of the Traffic Manage profile.
	TrafficViewEnrollmentStatus *string `pulumi:"trafficViewEnrollmentStatus"`
}

// ProfilePropertiesInput is an input type that accepts ProfilePropertiesArgs and ProfilePropertiesOutput values.
// You can construct a concrete instance of `ProfilePropertiesInput` via:
//
//          ProfilePropertiesArgs{...}
type ProfilePropertiesInput interface {
	pulumi.Input

	ToProfilePropertiesOutput() ProfilePropertiesOutput
	ToProfilePropertiesOutputWithContext(context.Context) ProfilePropertiesOutput
}

// Class representing the Traffic Manager profile properties.
type ProfilePropertiesArgs struct {
	// The DNS settings of the Traffic Manager profile.
	DnsConfig DnsConfigPtrInput `pulumi:"dnsConfig"`
	// The list of endpoints in the Traffic Manager profile.
	Endpoints EndpointTypeArrayInput `pulumi:"endpoints"`
	// The endpoint monitoring settings of the Traffic Manager profile.
	MonitorConfig MonitorConfigPtrInput `pulumi:"monitorConfig"`
	// The status of the Traffic Manager profile.
	ProfileStatus pulumi.StringPtrInput `pulumi:"profileStatus"`
	// The traffic routing method of the Traffic Manager profile.
	TrafficRoutingMethod pulumi.StringPtrInput `pulumi:"trafficRoutingMethod"`
	// Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates 'Disabled'. Enabling this feature will increase the cost of the Traffic Manage profile.
	TrafficViewEnrollmentStatus pulumi.StringPtrInput `pulumi:"trafficViewEnrollmentStatus"`
}

func (ProfilePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileProperties)(nil)).Elem()
}

func (i ProfilePropertiesArgs) ToProfilePropertiesOutput() ProfilePropertiesOutput {
	return i.ToProfilePropertiesOutputWithContext(context.Background())
}

func (i ProfilePropertiesArgs) ToProfilePropertiesOutputWithContext(ctx context.Context) ProfilePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilePropertiesOutput)
}

func (i ProfilePropertiesArgs) ToProfilePropertiesPtrOutput() ProfilePropertiesPtrOutput {
	return i.ToProfilePropertiesPtrOutputWithContext(context.Background())
}

func (i ProfilePropertiesArgs) ToProfilePropertiesPtrOutputWithContext(ctx context.Context) ProfilePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilePropertiesOutput).ToProfilePropertiesPtrOutputWithContext(ctx)
}

// ProfilePropertiesPtrInput is an input type that accepts ProfilePropertiesArgs, ProfilePropertiesPtr and ProfilePropertiesPtrOutput values.
// You can construct a concrete instance of `ProfilePropertiesPtrInput` via:
//
//          ProfilePropertiesArgs{...}
//
//  or:
//
//          nil
type ProfilePropertiesPtrInput interface {
	pulumi.Input

	ToProfilePropertiesPtrOutput() ProfilePropertiesPtrOutput
	ToProfilePropertiesPtrOutputWithContext(context.Context) ProfilePropertiesPtrOutput
}

type profilePropertiesPtrType ProfilePropertiesArgs

func ProfilePropertiesPtr(v *ProfilePropertiesArgs) ProfilePropertiesPtrInput {
	return (*profilePropertiesPtrType)(v)
}

func (*profilePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileProperties)(nil)).Elem()
}

func (i *profilePropertiesPtrType) ToProfilePropertiesPtrOutput() ProfilePropertiesPtrOutput {
	return i.ToProfilePropertiesPtrOutputWithContext(context.Background())
}

func (i *profilePropertiesPtrType) ToProfilePropertiesPtrOutputWithContext(ctx context.Context) ProfilePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilePropertiesPtrOutput)
}

// Class representing the Traffic Manager profile properties.
type ProfilePropertiesOutput struct{ *pulumi.OutputState }

func (ProfilePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileProperties)(nil)).Elem()
}

func (o ProfilePropertiesOutput) ToProfilePropertiesOutput() ProfilePropertiesOutput {
	return o
}

func (o ProfilePropertiesOutput) ToProfilePropertiesOutputWithContext(ctx context.Context) ProfilePropertiesOutput {
	return o
}

func (o ProfilePropertiesOutput) ToProfilePropertiesPtrOutput() ProfilePropertiesPtrOutput {
	return o.ToProfilePropertiesPtrOutputWithContext(context.Background())
}

func (o ProfilePropertiesOutput) ToProfilePropertiesPtrOutputWithContext(ctx context.Context) ProfilePropertiesPtrOutput {
	return o.ApplyT(func(v ProfileProperties) *ProfileProperties {
		return &v
	}).(ProfilePropertiesPtrOutput)
}

// The DNS settings of the Traffic Manager profile.
func (o ProfilePropertiesOutput) DnsConfig() DnsConfigPtrOutput {
	return o.ApplyT(func(v ProfileProperties) *DnsConfig { return v.DnsConfig }).(DnsConfigPtrOutput)
}

// The list of endpoints in the Traffic Manager profile.
func (o ProfilePropertiesOutput) Endpoints() EndpointTypeArrayOutput {
	return o.ApplyT(func(v ProfileProperties) []EndpointType { return v.Endpoints }).(EndpointTypeArrayOutput)
}

// The endpoint monitoring settings of the Traffic Manager profile.
func (o ProfilePropertiesOutput) MonitorConfig() MonitorConfigPtrOutput {
	return o.ApplyT(func(v ProfileProperties) *MonitorConfig { return v.MonitorConfig }).(MonitorConfigPtrOutput)
}

// The status of the Traffic Manager profile.
func (o ProfilePropertiesOutput) ProfileStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileProperties) *string { return v.ProfileStatus }).(pulumi.StringPtrOutput)
}

// The traffic routing method of the Traffic Manager profile.
func (o ProfilePropertiesOutput) TrafficRoutingMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileProperties) *string { return v.TrafficRoutingMethod }).(pulumi.StringPtrOutput)
}

// Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates 'Disabled'. Enabling this feature will increase the cost of the Traffic Manage profile.
func (o ProfilePropertiesOutput) TrafficViewEnrollmentStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileProperties) *string { return v.TrafficViewEnrollmentStatus }).(pulumi.StringPtrOutput)
}

type ProfilePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ProfilePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileProperties)(nil)).Elem()
}

func (o ProfilePropertiesPtrOutput) ToProfilePropertiesPtrOutput() ProfilePropertiesPtrOutput {
	return o
}

func (o ProfilePropertiesPtrOutput) ToProfilePropertiesPtrOutputWithContext(ctx context.Context) ProfilePropertiesPtrOutput {
	return o
}

func (o ProfilePropertiesPtrOutput) Elem() ProfilePropertiesOutput {
	return o.ApplyT(func(v *ProfileProperties) ProfileProperties { return *v }).(ProfilePropertiesOutput)
}

// The DNS settings of the Traffic Manager profile.
func (o ProfilePropertiesPtrOutput) DnsConfig() DnsConfigPtrOutput {
	return o.ApplyT(func(v *ProfileProperties) *DnsConfig {
		if v == nil {
			return nil
		}
		return v.DnsConfig
	}).(DnsConfigPtrOutput)
}

// The list of endpoints in the Traffic Manager profile.
func (o ProfilePropertiesPtrOutput) Endpoints() EndpointTypeArrayOutput {
	return o.ApplyT(func(v *ProfileProperties) []EndpointType {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(EndpointTypeArrayOutput)
}

// The endpoint monitoring settings of the Traffic Manager profile.
func (o ProfilePropertiesPtrOutput) MonitorConfig() MonitorConfigPtrOutput {
	return o.ApplyT(func(v *ProfileProperties) *MonitorConfig {
		if v == nil {
			return nil
		}
		return v.MonitorConfig
	}).(MonitorConfigPtrOutput)
}

// The status of the Traffic Manager profile.
func (o ProfilePropertiesPtrOutput) ProfileStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileProperties) *string {
		if v == nil {
			return nil
		}
		return v.ProfileStatus
	}).(pulumi.StringPtrOutput)
}

// The traffic routing method of the Traffic Manager profile.
func (o ProfilePropertiesPtrOutput) TrafficRoutingMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileProperties) *string {
		if v == nil {
			return nil
		}
		return v.TrafficRoutingMethod
	}).(pulumi.StringPtrOutput)
}

// Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates 'Disabled'. Enabling this feature will increase the cost of the Traffic Manage profile.
func (o ProfilePropertiesPtrOutput) TrafficViewEnrollmentStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileProperties) *string {
		if v == nil {
			return nil
		}
		return v.TrafficViewEnrollmentStatus
	}).(pulumi.StringPtrOutput)
}

// Class representing the Traffic Manager profile properties.
type ProfilePropertiesResponse struct {
	// The DNS settings of the Traffic Manager profile.
	DnsConfig *DnsConfigResponse `pulumi:"dnsConfig"`
	// The list of endpoints in the Traffic Manager profile.
	Endpoints []EndpointResponse `pulumi:"endpoints"`
	// The endpoint monitoring settings of the Traffic Manager profile.
	MonitorConfig *MonitorConfigResponse `pulumi:"monitorConfig"`
	// The status of the Traffic Manager profile.
	ProfileStatus *string `pulumi:"profileStatus"`
	// The traffic routing method of the Traffic Manager profile.
	TrafficRoutingMethod *string `pulumi:"trafficRoutingMethod"`
	// Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates 'Disabled'. Enabling this feature will increase the cost of the Traffic Manage profile.
	TrafficViewEnrollmentStatus *string `pulumi:"trafficViewEnrollmentStatus"`
}

// ProfilePropertiesResponseInput is an input type that accepts ProfilePropertiesResponseArgs and ProfilePropertiesResponseOutput values.
// You can construct a concrete instance of `ProfilePropertiesResponseInput` via:
//
//          ProfilePropertiesResponseArgs{...}
type ProfilePropertiesResponseInput interface {
	pulumi.Input

	ToProfilePropertiesResponseOutput() ProfilePropertiesResponseOutput
	ToProfilePropertiesResponseOutputWithContext(context.Context) ProfilePropertiesResponseOutput
}

// Class representing the Traffic Manager profile properties.
type ProfilePropertiesResponseArgs struct {
	// The DNS settings of the Traffic Manager profile.
	DnsConfig DnsConfigResponsePtrInput `pulumi:"dnsConfig"`
	// The list of endpoints in the Traffic Manager profile.
	Endpoints EndpointResponseArrayInput `pulumi:"endpoints"`
	// The endpoint monitoring settings of the Traffic Manager profile.
	MonitorConfig MonitorConfigResponsePtrInput `pulumi:"monitorConfig"`
	// The status of the Traffic Manager profile.
	ProfileStatus pulumi.StringPtrInput `pulumi:"profileStatus"`
	// The traffic routing method of the Traffic Manager profile.
	TrafficRoutingMethod pulumi.StringPtrInput `pulumi:"trafficRoutingMethod"`
	// Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates 'Disabled'. Enabling this feature will increase the cost of the Traffic Manage profile.
	TrafficViewEnrollmentStatus pulumi.StringPtrInput `pulumi:"trafficViewEnrollmentStatus"`
}

func (ProfilePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfilePropertiesResponse)(nil)).Elem()
}

func (i ProfilePropertiesResponseArgs) ToProfilePropertiesResponseOutput() ProfilePropertiesResponseOutput {
	return i.ToProfilePropertiesResponseOutputWithContext(context.Background())
}

func (i ProfilePropertiesResponseArgs) ToProfilePropertiesResponseOutputWithContext(ctx context.Context) ProfilePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilePropertiesResponseOutput)
}

func (i ProfilePropertiesResponseArgs) ToProfilePropertiesResponsePtrOutput() ProfilePropertiesResponsePtrOutput {
	return i.ToProfilePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i ProfilePropertiesResponseArgs) ToProfilePropertiesResponsePtrOutputWithContext(ctx context.Context) ProfilePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilePropertiesResponseOutput).ToProfilePropertiesResponsePtrOutputWithContext(ctx)
}

// ProfilePropertiesResponsePtrInput is an input type that accepts ProfilePropertiesResponseArgs, ProfilePropertiesResponsePtr and ProfilePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `ProfilePropertiesResponsePtrInput` via:
//
//          ProfilePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type ProfilePropertiesResponsePtrInput interface {
	pulumi.Input

	ToProfilePropertiesResponsePtrOutput() ProfilePropertiesResponsePtrOutput
	ToProfilePropertiesResponsePtrOutputWithContext(context.Context) ProfilePropertiesResponsePtrOutput
}

type profilePropertiesResponsePtrType ProfilePropertiesResponseArgs

func ProfilePropertiesResponsePtr(v *ProfilePropertiesResponseArgs) ProfilePropertiesResponsePtrInput {
	return (*profilePropertiesResponsePtrType)(v)
}

func (*profilePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfilePropertiesResponse)(nil)).Elem()
}

func (i *profilePropertiesResponsePtrType) ToProfilePropertiesResponsePtrOutput() ProfilePropertiesResponsePtrOutput {
	return i.ToProfilePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *profilePropertiesResponsePtrType) ToProfilePropertiesResponsePtrOutputWithContext(ctx context.Context) ProfilePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfilePropertiesResponsePtrOutput)
}

// Class representing the Traffic Manager profile properties.
type ProfilePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ProfilePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfilePropertiesResponse)(nil)).Elem()
}

func (o ProfilePropertiesResponseOutput) ToProfilePropertiesResponseOutput() ProfilePropertiesResponseOutput {
	return o
}

func (o ProfilePropertiesResponseOutput) ToProfilePropertiesResponseOutputWithContext(ctx context.Context) ProfilePropertiesResponseOutput {
	return o
}

func (o ProfilePropertiesResponseOutput) ToProfilePropertiesResponsePtrOutput() ProfilePropertiesResponsePtrOutput {
	return o.ToProfilePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ProfilePropertiesResponseOutput) ToProfilePropertiesResponsePtrOutputWithContext(ctx context.Context) ProfilePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ProfilePropertiesResponse) *ProfilePropertiesResponse {
		return &v
	}).(ProfilePropertiesResponsePtrOutput)
}

// The DNS settings of the Traffic Manager profile.
func (o ProfilePropertiesResponseOutput) DnsConfig() DnsConfigResponsePtrOutput {
	return o.ApplyT(func(v ProfilePropertiesResponse) *DnsConfigResponse { return v.DnsConfig }).(DnsConfigResponsePtrOutput)
}

// The list of endpoints in the Traffic Manager profile.
func (o ProfilePropertiesResponseOutput) Endpoints() EndpointResponseArrayOutput {
	return o.ApplyT(func(v ProfilePropertiesResponse) []EndpointResponse { return v.Endpoints }).(EndpointResponseArrayOutput)
}

// The endpoint monitoring settings of the Traffic Manager profile.
func (o ProfilePropertiesResponseOutput) MonitorConfig() MonitorConfigResponsePtrOutput {
	return o.ApplyT(func(v ProfilePropertiesResponse) *MonitorConfigResponse { return v.MonitorConfig }).(MonitorConfigResponsePtrOutput)
}

// The status of the Traffic Manager profile.
func (o ProfilePropertiesResponseOutput) ProfileStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfilePropertiesResponse) *string { return v.ProfileStatus }).(pulumi.StringPtrOutput)
}

// The traffic routing method of the Traffic Manager profile.
func (o ProfilePropertiesResponseOutput) TrafficRoutingMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfilePropertiesResponse) *string { return v.TrafficRoutingMethod }).(pulumi.StringPtrOutput)
}

// Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates 'Disabled'. Enabling this feature will increase the cost of the Traffic Manage profile.
func (o ProfilePropertiesResponseOutput) TrafficViewEnrollmentStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfilePropertiesResponse) *string { return v.TrafficViewEnrollmentStatus }).(pulumi.StringPtrOutput)
}

type ProfilePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ProfilePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfilePropertiesResponse)(nil)).Elem()
}

func (o ProfilePropertiesResponsePtrOutput) ToProfilePropertiesResponsePtrOutput() ProfilePropertiesResponsePtrOutput {
	return o
}

func (o ProfilePropertiesResponsePtrOutput) ToProfilePropertiesResponsePtrOutputWithContext(ctx context.Context) ProfilePropertiesResponsePtrOutput {
	return o
}

func (o ProfilePropertiesResponsePtrOutput) Elem() ProfilePropertiesResponseOutput {
	return o.ApplyT(func(v *ProfilePropertiesResponse) ProfilePropertiesResponse { return *v }).(ProfilePropertiesResponseOutput)
}

// The DNS settings of the Traffic Manager profile.
func (o ProfilePropertiesResponsePtrOutput) DnsConfig() DnsConfigResponsePtrOutput {
	return o.ApplyT(func(v *ProfilePropertiesResponse) *DnsConfigResponse {
		if v == nil {
			return nil
		}
		return v.DnsConfig
	}).(DnsConfigResponsePtrOutput)
}

// The list of endpoints in the Traffic Manager profile.
func (o ProfilePropertiesResponsePtrOutput) Endpoints() EndpointResponseArrayOutput {
	return o.ApplyT(func(v *ProfilePropertiesResponse) []EndpointResponse {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(EndpointResponseArrayOutput)
}

// The endpoint monitoring settings of the Traffic Manager profile.
func (o ProfilePropertiesResponsePtrOutput) MonitorConfig() MonitorConfigResponsePtrOutput {
	return o.ApplyT(func(v *ProfilePropertiesResponse) *MonitorConfigResponse {
		if v == nil {
			return nil
		}
		return v.MonitorConfig
	}).(MonitorConfigResponsePtrOutput)
}

// The status of the Traffic Manager profile.
func (o ProfilePropertiesResponsePtrOutput) ProfileStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfilePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProfileStatus
	}).(pulumi.StringPtrOutput)
}

// The traffic routing method of the Traffic Manager profile.
func (o ProfilePropertiesResponsePtrOutput) TrafficRoutingMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfilePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.TrafficRoutingMethod
	}).(pulumi.StringPtrOutput)
}

// Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates 'Disabled'. Enabling this feature will increase the cost of the Traffic Manage profile.
func (o ProfilePropertiesResponsePtrOutput) TrafficViewEnrollmentStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfilePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.TrafficViewEnrollmentStatus
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DnsConfigOutput{})
	pulumi.RegisterOutputType(DnsConfigPtrOutput{})
	pulumi.RegisterOutputType(DnsConfigResponseOutput{})
	pulumi.RegisterOutputType(DnsConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(EndpointTypeOutput{})
	pulumi.RegisterOutputType(EndpointTypeArrayOutput{})
	pulumi.RegisterOutputType(EndpointPropertiesOutput{})
	pulumi.RegisterOutputType(EndpointPropertiesPtrOutput{})
	pulumi.RegisterOutputType(EndpointPropertiesPropertiesOutput{})
	pulumi.RegisterOutputType(EndpointPropertiesPropertiesArrayOutput{})
	pulumi.RegisterOutputType(EndpointPropertiesResponseOutput{})
	pulumi.RegisterOutputType(EndpointPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(EndpointPropertiesResponsePropertiesOutput{})
	pulumi.RegisterOutputType(EndpointPropertiesResponsePropertiesArrayOutput{})
	pulumi.RegisterOutputType(EndpointResponseOutput{})
	pulumi.RegisterOutputType(EndpointResponseArrayOutput{})
	pulumi.RegisterOutputType(MonitorConfigOutput{})
	pulumi.RegisterOutputType(MonitorConfigPtrOutput{})
	pulumi.RegisterOutputType(MonitorConfigPropertiesOutput{})
	pulumi.RegisterOutputType(MonitorConfigPropertiesArrayOutput{})
	pulumi.RegisterOutputType(MonitorConfigResponseOutput{})
	pulumi.RegisterOutputType(MonitorConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(MonitorConfigResponsePropertiesOutput{})
	pulumi.RegisterOutputType(MonitorConfigResponsePropertiesArrayOutput{})
	pulumi.RegisterOutputType(ProfileTypeOutput{})
	pulumi.RegisterOutputType(ProfilePropertiesOutput{})
	pulumi.RegisterOutputType(ProfilePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ProfilePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ProfilePropertiesResponsePtrOutput{})
}
