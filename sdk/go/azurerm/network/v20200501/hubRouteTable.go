// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200501

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// RouteTable resource in a virtual hub.
type HubRouteTable struct {
	pulumi.CustomResourceState

	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Properties of the RouteTable resource.
	Properties HubRouteTablePropertiesResponseOutput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewHubRouteTable registers a new resource with the given unique name, arguments, and options.
func NewHubRouteTable(ctx *pulumi.Context,
	name string, args *HubRouteTableArgs, opts ...pulumi.ResourceOption) (*HubRouteTable, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.VirtualHubName == nil {
		return nil, errors.New("missing required argument 'VirtualHubName'")
	}
	if args == nil {
		args = &HubRouteTableArgs{}
	}
	var resource HubRouteTable
	err := ctx.RegisterResource("azurerm:network/v20200501:HubRouteTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHubRouteTable gets an existing HubRouteTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHubRouteTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HubRouteTableState, opts ...pulumi.ResourceOption) (*HubRouteTable, error) {
	var resource HubRouteTable
	err := ctx.ReadResource("azurerm:network/v20200501:HubRouteTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HubRouteTable resources.
type hubRouteTableState struct {
	// A unique read-only string that changes whenever the resource is updated.
	Etag *string `pulumi:"etag"`
	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `pulumi:"name"`
	// Properties of the RouteTable resource.
	Properties *HubRouteTablePropertiesResponse `pulumi:"properties"`
	// Resource type.
	Type *string `pulumi:"type"`
}

type HubRouteTableState struct {
	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringPtrInput
	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name pulumi.StringPtrInput
	// Properties of the RouteTable resource.
	Properties HubRouteTablePropertiesResponsePtrInput
	// Resource type.
	Type pulumi.StringPtrInput
}

func (HubRouteTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*hubRouteTableState)(nil)).Elem()
}

type hubRouteTableArgs struct {
	// Resource ID.
	Id *string `pulumi:"id"`
	// The name of the RouteTable.
	Name string `pulumi:"name"`
	// Properties of the RouteTable resource.
	Properties *HubRouteTableProperties `pulumi:"properties"`
	// The resource group name of the VirtualHub.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the VirtualHub.
	VirtualHubName string `pulumi:"virtualHubName"`
}

// The set of arguments for constructing a HubRouteTable resource.
type HubRouteTableArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput
	// The name of the RouteTable.
	Name pulumi.StringInput
	// Properties of the RouteTable resource.
	Properties HubRouteTablePropertiesPtrInput
	// The resource group name of the VirtualHub.
	ResourceGroupName pulumi.StringInput
	// The name of the VirtualHub.
	VirtualHubName pulumi.StringInput
}

func (HubRouteTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hubRouteTableArgs)(nil)).Elem()
}
