// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Inbound NAT rule of the load balancer.
type LoadBalancerInboundNatRule struct {
	pulumi.CustomResourceState

	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The name of the resource that is unique within the set of inbound NAT rules used by the load balancer. This name can be used to access the resource.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Properties of load balancer inbound nat rule.
	Properties InboundNatRulePropertiesFormatResponseOutput `pulumi:"properties"`
	// Type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewLoadBalancerInboundNatRule registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancerInboundNatRule(ctx *pulumi.Context,
	name string, args *LoadBalancerInboundNatRuleArgs, opts ...pulumi.ResourceOption) (*LoadBalancerInboundNatRule, error) {
	if args == nil || args.InboundNatRuleName == nil {
		return nil, errors.New("missing required argument 'InboundNatRuleName'")
	}
	if args == nil || args.LoadBalancerName == nil {
		return nil, errors.New("missing required argument 'LoadBalancerName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &LoadBalancerInboundNatRuleArgs{}
	}
	var resource LoadBalancerInboundNatRule
	err := ctx.RegisterResource("azurerm:network:LoadBalancerInboundNatRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancerInboundNatRule gets an existing LoadBalancerInboundNatRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancerInboundNatRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerInboundNatRuleState, opts ...pulumi.ResourceOption) (*LoadBalancerInboundNatRule, error) {
	var resource LoadBalancerInboundNatRule
	err := ctx.ReadResource("azurerm:network:LoadBalancerInboundNatRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancerInboundNatRule resources.
type loadBalancerInboundNatRuleState struct {
	// A unique read-only string that changes whenever the resource is updated.
	Etag *string `pulumi:"etag"`
	// The name of the resource that is unique within the set of inbound NAT rules used by the load balancer. This name can be used to access the resource.
	Name *string `pulumi:"name"`
	// Properties of load balancer inbound nat rule.
	Properties *InboundNatRulePropertiesFormatResponse `pulumi:"properties"`
	// Type of the resource.
	Type *string `pulumi:"type"`
}

type LoadBalancerInboundNatRuleState struct {
	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringPtrInput
	// The name of the resource that is unique within the set of inbound NAT rules used by the load balancer. This name can be used to access the resource.
	Name pulumi.StringPtrInput
	// Properties of load balancer inbound nat rule.
	Properties InboundNatRulePropertiesFormatResponsePtrInput
	// Type of the resource.
	Type pulumi.StringPtrInput
}

func (LoadBalancerInboundNatRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerInboundNatRuleState)(nil)).Elem()
}

type loadBalancerInboundNatRuleArgs struct {
	// Resource ID.
	Id *string `pulumi:"id"`
	// The name of the inbound nat rule.
	InboundNatRuleName string `pulumi:"inboundNatRuleName"`
	// The name of the load balancer.
	LoadBalancerName string `pulumi:"loadBalancerName"`
	// The name of the resource that is unique within the set of inbound NAT rules used by the load balancer. This name can be used to access the resource.
	Name *string `pulumi:"name"`
	// Properties of load balancer inbound nat rule.
	Properties *InboundNatRulePropertiesFormat `pulumi:"properties"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a LoadBalancerInboundNatRule resource.
type LoadBalancerInboundNatRuleArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput
	// The name of the inbound nat rule.
	InboundNatRuleName pulumi.StringInput
	// The name of the load balancer.
	LoadBalancerName pulumi.StringInput
	// The name of the resource that is unique within the set of inbound NAT rules used by the load balancer. This name can be used to access the resource.
	Name pulumi.StringPtrInput
	// Properties of load balancer inbound nat rule.
	Properties InboundNatRulePropertiesFormatPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
}

func (LoadBalancerInboundNatRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerInboundNatRuleArgs)(nil)).Elem()
}
