// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Event Subscription
type EventSubscriptionType struct {
	// Name of the resource
	Name string `pulumi:"name"`
	// Properties of the event subscription
	Properties EventSubscriptionPropertiesResponse `pulumi:"properties"`
	// Type of the resource
	Type string `pulumi:"type"`
}

// EventSubscriptionTypeInput is an input type that accepts EventSubscriptionTypeArgs and EventSubscriptionTypeOutput values.
// You can construct a concrete instance of `EventSubscriptionTypeInput` via:
//
//          EventSubscriptionTypeArgs{...}
type EventSubscriptionTypeInput interface {
	pulumi.Input

	ToEventSubscriptionTypeOutput() EventSubscriptionTypeOutput
	ToEventSubscriptionTypeOutputWithContext(context.Context) EventSubscriptionTypeOutput
}

// Event Subscription
type EventSubscriptionTypeArgs struct {
	// Name of the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Properties of the event subscription
	Properties EventSubscriptionPropertiesResponseInput `pulumi:"properties"`
	// Type of the resource
	Type pulumi.StringInput `pulumi:"type"`
}

func (EventSubscriptionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionType)(nil)).Elem()
}

func (i EventSubscriptionTypeArgs) ToEventSubscriptionTypeOutput() EventSubscriptionTypeOutput {
	return i.ToEventSubscriptionTypeOutputWithContext(context.Background())
}

func (i EventSubscriptionTypeArgs) ToEventSubscriptionTypeOutputWithContext(ctx context.Context) EventSubscriptionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionTypeOutput)
}

// Event Subscription
type EventSubscriptionTypeOutput struct{ *pulumi.OutputState }

func (EventSubscriptionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionType)(nil)).Elem()
}

func (o EventSubscriptionTypeOutput) ToEventSubscriptionTypeOutput() EventSubscriptionTypeOutput {
	return o
}

func (o EventSubscriptionTypeOutput) ToEventSubscriptionTypeOutputWithContext(ctx context.Context) EventSubscriptionTypeOutput {
	return o
}

// Name of the resource
func (o EventSubscriptionTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of the event subscription
func (o EventSubscriptionTypeOutput) Properties() EventSubscriptionPropertiesResponseOutput {
	return o.ApplyT(func(v EventSubscriptionType) EventSubscriptionPropertiesResponse { return v.Properties }).(EventSubscriptionPropertiesResponseOutput)
}

// Type of the resource
func (o EventSubscriptionTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionType) string { return v.Type }).(pulumi.StringOutput)
}

// Information about the destination for an event subscription
type EventSubscriptionDestination struct {
	// Type of the endpoint for the event subscription destination
	EndpointType string `pulumi:"endpointType"`
}

// EventSubscriptionDestinationInput is an input type that accepts EventSubscriptionDestinationArgs and EventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `EventSubscriptionDestinationInput` via:
//
//          EventSubscriptionDestinationArgs{...}
type EventSubscriptionDestinationInput interface {
	pulumi.Input

	ToEventSubscriptionDestinationOutput() EventSubscriptionDestinationOutput
	ToEventSubscriptionDestinationOutputWithContext(context.Context) EventSubscriptionDestinationOutput
}

// Information about the destination for an event subscription
type EventSubscriptionDestinationArgs struct {
	// Type of the endpoint for the event subscription destination
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
}

func (EventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionDestination)(nil)).Elem()
}

func (i EventSubscriptionDestinationArgs) ToEventSubscriptionDestinationOutput() EventSubscriptionDestinationOutput {
	return i.ToEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i EventSubscriptionDestinationArgs) ToEventSubscriptionDestinationOutputWithContext(ctx context.Context) EventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDestinationOutput)
}

func (i EventSubscriptionDestinationArgs) ToEventSubscriptionDestinationPtrOutput() EventSubscriptionDestinationPtrOutput {
	return i.ToEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionDestinationArgs) ToEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDestinationOutput).ToEventSubscriptionDestinationPtrOutputWithContext(ctx)
}

// EventSubscriptionDestinationPtrInput is an input type that accepts EventSubscriptionDestinationArgs, EventSubscriptionDestinationPtr and EventSubscriptionDestinationPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionDestinationPtrInput` via:
//
//          EventSubscriptionDestinationArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionDestinationPtrInput interface {
	pulumi.Input

	ToEventSubscriptionDestinationPtrOutput() EventSubscriptionDestinationPtrOutput
	ToEventSubscriptionDestinationPtrOutputWithContext(context.Context) EventSubscriptionDestinationPtrOutput
}

type eventSubscriptionDestinationPtrType EventSubscriptionDestinationArgs

func EventSubscriptionDestinationPtr(v *EventSubscriptionDestinationArgs) EventSubscriptionDestinationPtrInput {
	return (*eventSubscriptionDestinationPtrType)(v)
}

func (*eventSubscriptionDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionDestination)(nil)).Elem()
}

func (i *eventSubscriptionDestinationPtrType) ToEventSubscriptionDestinationPtrOutput() EventSubscriptionDestinationPtrOutput {
	return i.ToEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionDestinationPtrType) ToEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDestinationPtrOutput)
}

// Information about the destination for an event subscription
type EventSubscriptionDestinationOutput struct{ *pulumi.OutputState }

func (EventSubscriptionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionDestination)(nil)).Elem()
}

func (o EventSubscriptionDestinationOutput) ToEventSubscriptionDestinationOutput() EventSubscriptionDestinationOutput {
	return o
}

func (o EventSubscriptionDestinationOutput) ToEventSubscriptionDestinationOutputWithContext(ctx context.Context) EventSubscriptionDestinationOutput {
	return o
}

func (o EventSubscriptionDestinationOutput) ToEventSubscriptionDestinationPtrOutput() EventSubscriptionDestinationPtrOutput {
	return o.ToEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionDestinationOutput) ToEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationPtrOutput {
	return o.ApplyT(func(v EventSubscriptionDestination) *EventSubscriptionDestination {
		return &v
	}).(EventSubscriptionDestinationPtrOutput)
}

// Type of the endpoint for the event subscription destination
func (o EventSubscriptionDestinationOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionDestination) string { return v.EndpointType }).(pulumi.StringOutput)
}

type EventSubscriptionDestinationPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionDestination)(nil)).Elem()
}

func (o EventSubscriptionDestinationPtrOutput) ToEventSubscriptionDestinationPtrOutput() EventSubscriptionDestinationPtrOutput {
	return o
}

func (o EventSubscriptionDestinationPtrOutput) ToEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationPtrOutput {
	return o
}

func (o EventSubscriptionDestinationPtrOutput) Elem() EventSubscriptionDestinationOutput {
	return o.ApplyT(func(v *EventSubscriptionDestination) EventSubscriptionDestination { return *v }).(EventSubscriptionDestinationOutput)
}

// Type of the endpoint for the event subscription destination
func (o EventSubscriptionDestinationPtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// Information about the destination for an event subscription
type EventSubscriptionDestinationResponse struct {
	// Type of the endpoint for the event subscription destination
	EndpointType string `pulumi:"endpointType"`
}

// EventSubscriptionDestinationResponseInput is an input type that accepts EventSubscriptionDestinationResponseArgs and EventSubscriptionDestinationResponseOutput values.
// You can construct a concrete instance of `EventSubscriptionDestinationResponseInput` via:
//
//          EventSubscriptionDestinationResponseArgs{...}
type EventSubscriptionDestinationResponseInput interface {
	pulumi.Input

	ToEventSubscriptionDestinationResponseOutput() EventSubscriptionDestinationResponseOutput
	ToEventSubscriptionDestinationResponseOutputWithContext(context.Context) EventSubscriptionDestinationResponseOutput
}

// Information about the destination for an event subscription
type EventSubscriptionDestinationResponseArgs struct {
	// Type of the endpoint for the event subscription destination
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
}

func (EventSubscriptionDestinationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionDestinationResponse)(nil)).Elem()
}

func (i EventSubscriptionDestinationResponseArgs) ToEventSubscriptionDestinationResponseOutput() EventSubscriptionDestinationResponseOutput {
	return i.ToEventSubscriptionDestinationResponseOutputWithContext(context.Background())
}

func (i EventSubscriptionDestinationResponseArgs) ToEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) EventSubscriptionDestinationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDestinationResponseOutput)
}

func (i EventSubscriptionDestinationResponseArgs) ToEventSubscriptionDestinationResponsePtrOutput() EventSubscriptionDestinationResponsePtrOutput {
	return i.ToEventSubscriptionDestinationResponsePtrOutputWithContext(context.Background())
}

func (i EventSubscriptionDestinationResponseArgs) ToEventSubscriptionDestinationResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDestinationResponseOutput).ToEventSubscriptionDestinationResponsePtrOutputWithContext(ctx)
}

// EventSubscriptionDestinationResponsePtrInput is an input type that accepts EventSubscriptionDestinationResponseArgs, EventSubscriptionDestinationResponsePtr and EventSubscriptionDestinationResponsePtrOutput values.
// You can construct a concrete instance of `EventSubscriptionDestinationResponsePtrInput` via:
//
//          EventSubscriptionDestinationResponseArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionDestinationResponsePtrInput interface {
	pulumi.Input

	ToEventSubscriptionDestinationResponsePtrOutput() EventSubscriptionDestinationResponsePtrOutput
	ToEventSubscriptionDestinationResponsePtrOutputWithContext(context.Context) EventSubscriptionDestinationResponsePtrOutput
}

type eventSubscriptionDestinationResponsePtrType EventSubscriptionDestinationResponseArgs

func EventSubscriptionDestinationResponsePtr(v *EventSubscriptionDestinationResponseArgs) EventSubscriptionDestinationResponsePtrInput {
	return (*eventSubscriptionDestinationResponsePtrType)(v)
}

func (*eventSubscriptionDestinationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionDestinationResponse)(nil)).Elem()
}

func (i *eventSubscriptionDestinationResponsePtrType) ToEventSubscriptionDestinationResponsePtrOutput() EventSubscriptionDestinationResponsePtrOutput {
	return i.ToEventSubscriptionDestinationResponsePtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionDestinationResponsePtrType) ToEventSubscriptionDestinationResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDestinationResponsePtrOutput)
}

// Information about the destination for an event subscription
type EventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (EventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o EventSubscriptionDestinationResponseOutput) ToEventSubscriptionDestinationResponseOutput() EventSubscriptionDestinationResponseOutput {
	return o
}

func (o EventSubscriptionDestinationResponseOutput) ToEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) EventSubscriptionDestinationResponseOutput {
	return o
}

func (o EventSubscriptionDestinationResponseOutput) ToEventSubscriptionDestinationResponsePtrOutput() EventSubscriptionDestinationResponsePtrOutput {
	return o.ToEventSubscriptionDestinationResponsePtrOutputWithContext(context.Background())
}

func (o EventSubscriptionDestinationResponseOutput) ToEventSubscriptionDestinationResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationResponsePtrOutput {
	return o.ApplyT(func(v EventSubscriptionDestinationResponse) *EventSubscriptionDestinationResponse {
		return &v
	}).(EventSubscriptionDestinationResponsePtrOutput)
}

// Type of the endpoint for the event subscription destination
func (o EventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

type EventSubscriptionDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o EventSubscriptionDestinationResponsePtrOutput) ToEventSubscriptionDestinationResponsePtrOutput() EventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o EventSubscriptionDestinationResponsePtrOutput) ToEventSubscriptionDestinationResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o EventSubscriptionDestinationResponsePtrOutput) Elem() EventSubscriptionDestinationResponseOutput {
	return o.ApplyT(func(v *EventSubscriptionDestinationResponse) EventSubscriptionDestinationResponse { return *v }).(EventSubscriptionDestinationResponseOutput)
}

// Type of the endpoint for the event subscription destination
func (o EventSubscriptionDestinationResponsePtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// Filter for the Event Subscription
type EventSubscriptionFilter struct {
	// A list of applicable event types that need to be part of the event subscription.
	// If it is desired to subscribe to all event types, the string "all" needs to be specified as an element in this list.
	IncludedEventTypes []string `pulumi:"includedEventTypes"`
	// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
	// should be compared in a case sensitive manner.
	IsSubjectCaseSensitive *bool `pulumi:"isSubjectCaseSensitive"`
	// An optional string to filter events for an event subscription based on a resource path prefix.
	// The format of this depends on the publisher of the events.
	// Wildcard characters are not supported in this path.
	SubjectBeginsWith *string `pulumi:"subjectBeginsWith"`
	// An optional string to filter events for an event subscription based on a resource path suffix.
	// Wildcard characters are not supported in this path.
	SubjectEndsWith *string `pulumi:"subjectEndsWith"`
}

// EventSubscriptionFilterInput is an input type that accepts EventSubscriptionFilterArgs and EventSubscriptionFilterOutput values.
// You can construct a concrete instance of `EventSubscriptionFilterInput` via:
//
//          EventSubscriptionFilterArgs{...}
type EventSubscriptionFilterInput interface {
	pulumi.Input

	ToEventSubscriptionFilterOutput() EventSubscriptionFilterOutput
	ToEventSubscriptionFilterOutputWithContext(context.Context) EventSubscriptionFilterOutput
}

// Filter for the Event Subscription
type EventSubscriptionFilterArgs struct {
	// A list of applicable event types that need to be part of the event subscription.
	// If it is desired to subscribe to all event types, the string "all" needs to be specified as an element in this list.
	IncludedEventTypes pulumi.StringArrayInput `pulumi:"includedEventTypes"`
	// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
	// should be compared in a case sensitive manner.
	IsSubjectCaseSensitive pulumi.BoolPtrInput `pulumi:"isSubjectCaseSensitive"`
	// An optional string to filter events for an event subscription based on a resource path prefix.
	// The format of this depends on the publisher of the events.
	// Wildcard characters are not supported in this path.
	SubjectBeginsWith pulumi.StringPtrInput `pulumi:"subjectBeginsWith"`
	// An optional string to filter events for an event subscription based on a resource path suffix.
	// Wildcard characters are not supported in this path.
	SubjectEndsWith pulumi.StringPtrInput `pulumi:"subjectEndsWith"`
}

func (EventSubscriptionFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionFilter)(nil)).Elem()
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterOutput() EventSubscriptionFilterOutput {
	return i.ToEventSubscriptionFilterOutputWithContext(context.Background())
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterOutputWithContext(ctx context.Context) EventSubscriptionFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterOutput)
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput {
	return i.ToEventSubscriptionFilterPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterOutput).ToEventSubscriptionFilterPtrOutputWithContext(ctx)
}

// EventSubscriptionFilterPtrInput is an input type that accepts EventSubscriptionFilterArgs, EventSubscriptionFilterPtr and EventSubscriptionFilterPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionFilterPtrInput` via:
//
//          EventSubscriptionFilterArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionFilterPtrInput interface {
	pulumi.Input

	ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput
	ToEventSubscriptionFilterPtrOutputWithContext(context.Context) EventSubscriptionFilterPtrOutput
}

type eventSubscriptionFilterPtrType EventSubscriptionFilterArgs

func EventSubscriptionFilterPtr(v *EventSubscriptionFilterArgs) EventSubscriptionFilterPtrInput {
	return (*eventSubscriptionFilterPtrType)(v)
}

func (*eventSubscriptionFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionFilter)(nil)).Elem()
}

func (i *eventSubscriptionFilterPtrType) ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput {
	return i.ToEventSubscriptionFilterPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionFilterPtrType) ToEventSubscriptionFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterPtrOutput)
}

// Filter for the Event Subscription
type EventSubscriptionFilterOutput struct{ *pulumi.OutputState }

func (EventSubscriptionFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionFilter)(nil)).Elem()
}

func (o EventSubscriptionFilterOutput) ToEventSubscriptionFilterOutput() EventSubscriptionFilterOutput {
	return o
}

func (o EventSubscriptionFilterOutput) ToEventSubscriptionFilterOutputWithContext(ctx context.Context) EventSubscriptionFilterOutput {
	return o
}

func (o EventSubscriptionFilterOutput) ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput {
	return o.ToEventSubscriptionFilterPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionFilterOutput) ToEventSubscriptionFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionFilterPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) *EventSubscriptionFilter {
		return &v
	}).(EventSubscriptionFilterPtrOutput)
}

// A list of applicable event types that need to be part of the event subscription.
// If it is desired to subscribe to all event types, the string "all" needs to be specified as an element in this list.
func (o EventSubscriptionFilterOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) []string { return v.IncludedEventTypes }).(pulumi.StringArrayOutput)
}

// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
// should be compared in a case sensitive manner.
func (o EventSubscriptionFilterOutput) IsSubjectCaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) *bool { return v.IsSubjectCaseSensitive }).(pulumi.BoolPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path prefix.
// The format of this depends on the publisher of the events.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) *string { return v.SubjectBeginsWith }).(pulumi.StringPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path suffix.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) *string { return v.SubjectEndsWith }).(pulumi.StringPtrOutput)
}

type EventSubscriptionFilterPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionFilter)(nil)).Elem()
}

func (o EventSubscriptionFilterPtrOutput) ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput {
	return o
}

func (o EventSubscriptionFilterPtrOutput) ToEventSubscriptionFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionFilterPtrOutput {
	return o
}

func (o EventSubscriptionFilterPtrOutput) Elem() EventSubscriptionFilterOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) EventSubscriptionFilter { return *v }).(EventSubscriptionFilterOutput)
}

// A list of applicable event types that need to be part of the event subscription.
// If it is desired to subscribe to all event types, the string "all" needs to be specified as an element in this list.
func (o EventSubscriptionFilterPtrOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) []string {
		if v == nil {
			return nil
		}
		return v.IncludedEventTypes
	}).(pulumi.StringArrayOutput)
}

// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
// should be compared in a case sensitive manner.
func (o EventSubscriptionFilterPtrOutput) IsSubjectCaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) *bool {
		if v == nil {
			return nil
		}
		return v.IsSubjectCaseSensitive
	}).(pulumi.BoolPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path prefix.
// The format of this depends on the publisher of the events.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterPtrOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) *string {
		if v == nil {
			return nil
		}
		return v.SubjectBeginsWith
	}).(pulumi.StringPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path suffix.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterPtrOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) *string {
		if v == nil {
			return nil
		}
		return v.SubjectEndsWith
	}).(pulumi.StringPtrOutput)
}

// Filter for the Event Subscription
type EventSubscriptionFilterResponse struct {
	// A list of applicable event types that need to be part of the event subscription.
	// If it is desired to subscribe to all event types, the string "all" needs to be specified as an element in this list.
	IncludedEventTypes []string `pulumi:"includedEventTypes"`
	// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
	// should be compared in a case sensitive manner.
	IsSubjectCaseSensitive *bool `pulumi:"isSubjectCaseSensitive"`
	// An optional string to filter events for an event subscription based on a resource path prefix.
	// The format of this depends on the publisher of the events.
	// Wildcard characters are not supported in this path.
	SubjectBeginsWith *string `pulumi:"subjectBeginsWith"`
	// An optional string to filter events for an event subscription based on a resource path suffix.
	// Wildcard characters are not supported in this path.
	SubjectEndsWith *string `pulumi:"subjectEndsWith"`
}

// EventSubscriptionFilterResponseInput is an input type that accepts EventSubscriptionFilterResponseArgs and EventSubscriptionFilterResponseOutput values.
// You can construct a concrete instance of `EventSubscriptionFilterResponseInput` via:
//
//          EventSubscriptionFilterResponseArgs{...}
type EventSubscriptionFilterResponseInput interface {
	pulumi.Input

	ToEventSubscriptionFilterResponseOutput() EventSubscriptionFilterResponseOutput
	ToEventSubscriptionFilterResponseOutputWithContext(context.Context) EventSubscriptionFilterResponseOutput
}

// Filter for the Event Subscription
type EventSubscriptionFilterResponseArgs struct {
	// A list of applicable event types that need to be part of the event subscription.
	// If it is desired to subscribe to all event types, the string "all" needs to be specified as an element in this list.
	IncludedEventTypes pulumi.StringArrayInput `pulumi:"includedEventTypes"`
	// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
	// should be compared in a case sensitive manner.
	IsSubjectCaseSensitive pulumi.BoolPtrInput `pulumi:"isSubjectCaseSensitive"`
	// An optional string to filter events for an event subscription based on a resource path prefix.
	// The format of this depends on the publisher of the events.
	// Wildcard characters are not supported in this path.
	SubjectBeginsWith pulumi.StringPtrInput `pulumi:"subjectBeginsWith"`
	// An optional string to filter events for an event subscription based on a resource path suffix.
	// Wildcard characters are not supported in this path.
	SubjectEndsWith pulumi.StringPtrInput `pulumi:"subjectEndsWith"`
}

func (EventSubscriptionFilterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionFilterResponse)(nil)).Elem()
}

func (i EventSubscriptionFilterResponseArgs) ToEventSubscriptionFilterResponseOutput() EventSubscriptionFilterResponseOutput {
	return i.ToEventSubscriptionFilterResponseOutputWithContext(context.Background())
}

func (i EventSubscriptionFilterResponseArgs) ToEventSubscriptionFilterResponseOutputWithContext(ctx context.Context) EventSubscriptionFilterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterResponseOutput)
}

func (i EventSubscriptionFilterResponseArgs) ToEventSubscriptionFilterResponsePtrOutput() EventSubscriptionFilterResponsePtrOutput {
	return i.ToEventSubscriptionFilterResponsePtrOutputWithContext(context.Background())
}

func (i EventSubscriptionFilterResponseArgs) ToEventSubscriptionFilterResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterResponseOutput).ToEventSubscriptionFilterResponsePtrOutputWithContext(ctx)
}

// EventSubscriptionFilterResponsePtrInput is an input type that accepts EventSubscriptionFilterResponseArgs, EventSubscriptionFilterResponsePtr and EventSubscriptionFilterResponsePtrOutput values.
// You can construct a concrete instance of `EventSubscriptionFilterResponsePtrInput` via:
//
//          EventSubscriptionFilterResponseArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionFilterResponsePtrInput interface {
	pulumi.Input

	ToEventSubscriptionFilterResponsePtrOutput() EventSubscriptionFilterResponsePtrOutput
	ToEventSubscriptionFilterResponsePtrOutputWithContext(context.Context) EventSubscriptionFilterResponsePtrOutput
}

type eventSubscriptionFilterResponsePtrType EventSubscriptionFilterResponseArgs

func EventSubscriptionFilterResponsePtr(v *EventSubscriptionFilterResponseArgs) EventSubscriptionFilterResponsePtrInput {
	return (*eventSubscriptionFilterResponsePtrType)(v)
}

func (*eventSubscriptionFilterResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionFilterResponse)(nil)).Elem()
}

func (i *eventSubscriptionFilterResponsePtrType) ToEventSubscriptionFilterResponsePtrOutput() EventSubscriptionFilterResponsePtrOutput {
	return i.ToEventSubscriptionFilterResponsePtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionFilterResponsePtrType) ToEventSubscriptionFilterResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterResponsePtrOutput)
}

// Filter for the Event Subscription
type EventSubscriptionFilterResponseOutput struct{ *pulumi.OutputState }

func (EventSubscriptionFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionFilterResponse)(nil)).Elem()
}

func (o EventSubscriptionFilterResponseOutput) ToEventSubscriptionFilterResponseOutput() EventSubscriptionFilterResponseOutput {
	return o
}

func (o EventSubscriptionFilterResponseOutput) ToEventSubscriptionFilterResponseOutputWithContext(ctx context.Context) EventSubscriptionFilterResponseOutput {
	return o
}

func (o EventSubscriptionFilterResponseOutput) ToEventSubscriptionFilterResponsePtrOutput() EventSubscriptionFilterResponsePtrOutput {
	return o.ToEventSubscriptionFilterResponsePtrOutputWithContext(context.Background())
}

func (o EventSubscriptionFilterResponseOutput) ToEventSubscriptionFilterResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionFilterResponsePtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *EventSubscriptionFilterResponse {
		return &v
	}).(EventSubscriptionFilterResponsePtrOutput)
}

// A list of applicable event types that need to be part of the event subscription.
// If it is desired to subscribe to all event types, the string "all" needs to be specified as an element in this list.
func (o EventSubscriptionFilterResponseOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) []string { return v.IncludedEventTypes }).(pulumi.StringArrayOutput)
}

// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
// should be compared in a case sensitive manner.
func (o EventSubscriptionFilterResponseOutput) IsSubjectCaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *bool { return v.IsSubjectCaseSensitive }).(pulumi.BoolPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path prefix.
// The format of this depends on the publisher of the events.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponseOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *string { return v.SubjectBeginsWith }).(pulumi.StringPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path suffix.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponseOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *string { return v.SubjectEndsWith }).(pulumi.StringPtrOutput)
}

type EventSubscriptionFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionFilterResponse)(nil)).Elem()
}

func (o EventSubscriptionFilterResponsePtrOutput) ToEventSubscriptionFilterResponsePtrOutput() EventSubscriptionFilterResponsePtrOutput {
	return o
}

func (o EventSubscriptionFilterResponsePtrOutput) ToEventSubscriptionFilterResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionFilterResponsePtrOutput {
	return o
}

func (o EventSubscriptionFilterResponsePtrOutput) Elem() EventSubscriptionFilterResponseOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) EventSubscriptionFilterResponse { return *v }).(EventSubscriptionFilterResponseOutput)
}

// A list of applicable event types that need to be part of the event subscription.
// If it is desired to subscribe to all event types, the string "all" needs to be specified as an element in this list.
func (o EventSubscriptionFilterResponsePtrOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) []string {
		if v == nil {
			return nil
		}
		return v.IncludedEventTypes
	}).(pulumi.StringArrayOutput)
}

// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
// should be compared in a case sensitive manner.
func (o EventSubscriptionFilterResponsePtrOutput) IsSubjectCaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsSubjectCaseSensitive
	}).(pulumi.BoolPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path prefix.
// The format of this depends on the publisher of the events.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponsePtrOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubjectBeginsWith
	}).(pulumi.StringPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path suffix.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponsePtrOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubjectEndsWith
	}).(pulumi.StringPtrOutput)
}

// Properties of the Event Subscription
type EventSubscriptionProperties struct {
	// Information about the destination where events have to be delivered for the event subscription.
	Destination *EventSubscriptionDestination `pulumi:"destination"`
	// Information about the filter for the event subscription.
	Filter *EventSubscriptionFilter `pulumi:"filter"`
	// List of user defined labels.
	Labels []string `pulumi:"labels"`
}

// EventSubscriptionPropertiesInput is an input type that accepts EventSubscriptionPropertiesArgs and EventSubscriptionPropertiesOutput values.
// You can construct a concrete instance of `EventSubscriptionPropertiesInput` via:
//
//          EventSubscriptionPropertiesArgs{...}
type EventSubscriptionPropertiesInput interface {
	pulumi.Input

	ToEventSubscriptionPropertiesOutput() EventSubscriptionPropertiesOutput
	ToEventSubscriptionPropertiesOutputWithContext(context.Context) EventSubscriptionPropertiesOutput
}

// Properties of the Event Subscription
type EventSubscriptionPropertiesArgs struct {
	// Information about the destination where events have to be delivered for the event subscription.
	Destination EventSubscriptionDestinationPtrInput `pulumi:"destination"`
	// Information about the filter for the event subscription.
	Filter EventSubscriptionFilterPtrInput `pulumi:"filter"`
	// List of user defined labels.
	Labels pulumi.StringArrayInput `pulumi:"labels"`
}

func (EventSubscriptionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionProperties)(nil)).Elem()
}

func (i EventSubscriptionPropertiesArgs) ToEventSubscriptionPropertiesOutput() EventSubscriptionPropertiesOutput {
	return i.ToEventSubscriptionPropertiesOutputWithContext(context.Background())
}

func (i EventSubscriptionPropertiesArgs) ToEventSubscriptionPropertiesOutputWithContext(ctx context.Context) EventSubscriptionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionPropertiesOutput)
}

func (i EventSubscriptionPropertiesArgs) ToEventSubscriptionPropertiesPtrOutput() EventSubscriptionPropertiesPtrOutput {
	return i.ToEventSubscriptionPropertiesPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionPropertiesArgs) ToEventSubscriptionPropertiesPtrOutputWithContext(ctx context.Context) EventSubscriptionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionPropertiesOutput).ToEventSubscriptionPropertiesPtrOutputWithContext(ctx)
}

// EventSubscriptionPropertiesPtrInput is an input type that accepts EventSubscriptionPropertiesArgs, EventSubscriptionPropertiesPtr and EventSubscriptionPropertiesPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionPropertiesPtrInput` via:
//
//          EventSubscriptionPropertiesArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionPropertiesPtrInput interface {
	pulumi.Input

	ToEventSubscriptionPropertiesPtrOutput() EventSubscriptionPropertiesPtrOutput
	ToEventSubscriptionPropertiesPtrOutputWithContext(context.Context) EventSubscriptionPropertiesPtrOutput
}

type eventSubscriptionPropertiesPtrType EventSubscriptionPropertiesArgs

func EventSubscriptionPropertiesPtr(v *EventSubscriptionPropertiesArgs) EventSubscriptionPropertiesPtrInput {
	return (*eventSubscriptionPropertiesPtrType)(v)
}

func (*eventSubscriptionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionProperties)(nil)).Elem()
}

func (i *eventSubscriptionPropertiesPtrType) ToEventSubscriptionPropertiesPtrOutput() EventSubscriptionPropertiesPtrOutput {
	return i.ToEventSubscriptionPropertiesPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionPropertiesPtrType) ToEventSubscriptionPropertiesPtrOutputWithContext(ctx context.Context) EventSubscriptionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionPropertiesPtrOutput)
}

// Properties of the Event Subscription
type EventSubscriptionPropertiesOutput struct{ *pulumi.OutputState }

func (EventSubscriptionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionProperties)(nil)).Elem()
}

func (o EventSubscriptionPropertiesOutput) ToEventSubscriptionPropertiesOutput() EventSubscriptionPropertiesOutput {
	return o
}

func (o EventSubscriptionPropertiesOutput) ToEventSubscriptionPropertiesOutputWithContext(ctx context.Context) EventSubscriptionPropertiesOutput {
	return o
}

func (o EventSubscriptionPropertiesOutput) ToEventSubscriptionPropertiesPtrOutput() EventSubscriptionPropertiesPtrOutput {
	return o.ToEventSubscriptionPropertiesPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionPropertiesOutput) ToEventSubscriptionPropertiesPtrOutputWithContext(ctx context.Context) EventSubscriptionPropertiesPtrOutput {
	return o.ApplyT(func(v EventSubscriptionProperties) *EventSubscriptionProperties {
		return &v
	}).(EventSubscriptionPropertiesPtrOutput)
}

// Information about the destination where events have to be delivered for the event subscription.
func (o EventSubscriptionPropertiesOutput) Destination() EventSubscriptionDestinationPtrOutput {
	return o.ApplyT(func(v EventSubscriptionProperties) *EventSubscriptionDestination { return v.Destination }).(EventSubscriptionDestinationPtrOutput)
}

// Information about the filter for the event subscription.
func (o EventSubscriptionPropertiesOutput) Filter() EventSubscriptionFilterPtrOutput {
	return o.ApplyT(func(v EventSubscriptionProperties) *EventSubscriptionFilter { return v.Filter }).(EventSubscriptionFilterPtrOutput)
}

// List of user defined labels.
func (o EventSubscriptionPropertiesOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionProperties) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

type EventSubscriptionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionProperties)(nil)).Elem()
}

func (o EventSubscriptionPropertiesPtrOutput) ToEventSubscriptionPropertiesPtrOutput() EventSubscriptionPropertiesPtrOutput {
	return o
}

func (o EventSubscriptionPropertiesPtrOutput) ToEventSubscriptionPropertiesPtrOutputWithContext(ctx context.Context) EventSubscriptionPropertiesPtrOutput {
	return o
}

func (o EventSubscriptionPropertiesPtrOutput) Elem() EventSubscriptionPropertiesOutput {
	return o.ApplyT(func(v *EventSubscriptionProperties) EventSubscriptionProperties { return *v }).(EventSubscriptionPropertiesOutput)
}

// Information about the destination where events have to be delivered for the event subscription.
func (o EventSubscriptionPropertiesPtrOutput) Destination() EventSubscriptionDestinationPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionProperties) *EventSubscriptionDestination {
		if v == nil {
			return nil
		}
		return v.Destination
	}).(EventSubscriptionDestinationPtrOutput)
}

// Information about the filter for the event subscription.
func (o EventSubscriptionPropertiesPtrOutput) Filter() EventSubscriptionFilterPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionProperties) *EventSubscriptionFilter {
		if v == nil {
			return nil
		}
		return v.Filter
	}).(EventSubscriptionFilterPtrOutput)
}

// List of user defined labels.
func (o EventSubscriptionPropertiesPtrOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionProperties) []string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringArrayOutput)
}

// Properties of the Event Subscription
type EventSubscriptionPropertiesResponse struct {
	// Information about the destination where events have to be delivered for the event subscription.
	Destination *EventSubscriptionDestinationResponse `pulumi:"destination"`
	// Information about the filter for the event subscription.
	Filter *EventSubscriptionFilterResponse `pulumi:"filter"`
	// List of user defined labels.
	Labels []string `pulumi:"labels"`
	// Provisioning state of the event subscription.
	ProvisioningState string `pulumi:"provisioningState"`
	// Name of the topic of the event subscription.
	Topic string `pulumi:"topic"`
}

// EventSubscriptionPropertiesResponseInput is an input type that accepts EventSubscriptionPropertiesResponseArgs and EventSubscriptionPropertiesResponseOutput values.
// You can construct a concrete instance of `EventSubscriptionPropertiesResponseInput` via:
//
//          EventSubscriptionPropertiesResponseArgs{...}
type EventSubscriptionPropertiesResponseInput interface {
	pulumi.Input

	ToEventSubscriptionPropertiesResponseOutput() EventSubscriptionPropertiesResponseOutput
	ToEventSubscriptionPropertiesResponseOutputWithContext(context.Context) EventSubscriptionPropertiesResponseOutput
}

// Properties of the Event Subscription
type EventSubscriptionPropertiesResponseArgs struct {
	// Information about the destination where events have to be delivered for the event subscription.
	Destination EventSubscriptionDestinationResponsePtrInput `pulumi:"destination"`
	// Information about the filter for the event subscription.
	Filter EventSubscriptionFilterResponsePtrInput `pulumi:"filter"`
	// List of user defined labels.
	Labels pulumi.StringArrayInput `pulumi:"labels"`
	// Provisioning state of the event subscription.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// Name of the topic of the event subscription.
	Topic pulumi.StringInput `pulumi:"topic"`
}

func (EventSubscriptionPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionPropertiesResponse)(nil)).Elem()
}

func (i EventSubscriptionPropertiesResponseArgs) ToEventSubscriptionPropertiesResponseOutput() EventSubscriptionPropertiesResponseOutput {
	return i.ToEventSubscriptionPropertiesResponseOutputWithContext(context.Background())
}

func (i EventSubscriptionPropertiesResponseArgs) ToEventSubscriptionPropertiesResponseOutputWithContext(ctx context.Context) EventSubscriptionPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionPropertiesResponseOutput)
}

func (i EventSubscriptionPropertiesResponseArgs) ToEventSubscriptionPropertiesResponsePtrOutput() EventSubscriptionPropertiesResponsePtrOutput {
	return i.ToEventSubscriptionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i EventSubscriptionPropertiesResponseArgs) ToEventSubscriptionPropertiesResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionPropertiesResponseOutput).ToEventSubscriptionPropertiesResponsePtrOutputWithContext(ctx)
}

// EventSubscriptionPropertiesResponsePtrInput is an input type that accepts EventSubscriptionPropertiesResponseArgs, EventSubscriptionPropertiesResponsePtr and EventSubscriptionPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `EventSubscriptionPropertiesResponsePtrInput` via:
//
//          EventSubscriptionPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionPropertiesResponsePtrInput interface {
	pulumi.Input

	ToEventSubscriptionPropertiesResponsePtrOutput() EventSubscriptionPropertiesResponsePtrOutput
	ToEventSubscriptionPropertiesResponsePtrOutputWithContext(context.Context) EventSubscriptionPropertiesResponsePtrOutput
}

type eventSubscriptionPropertiesResponsePtrType EventSubscriptionPropertiesResponseArgs

func EventSubscriptionPropertiesResponsePtr(v *EventSubscriptionPropertiesResponseArgs) EventSubscriptionPropertiesResponsePtrInput {
	return (*eventSubscriptionPropertiesResponsePtrType)(v)
}

func (*eventSubscriptionPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionPropertiesResponse)(nil)).Elem()
}

func (i *eventSubscriptionPropertiesResponsePtrType) ToEventSubscriptionPropertiesResponsePtrOutput() EventSubscriptionPropertiesResponsePtrOutput {
	return i.ToEventSubscriptionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionPropertiesResponsePtrType) ToEventSubscriptionPropertiesResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionPropertiesResponsePtrOutput)
}

// Properties of the Event Subscription
type EventSubscriptionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (EventSubscriptionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionPropertiesResponse)(nil)).Elem()
}

func (o EventSubscriptionPropertiesResponseOutput) ToEventSubscriptionPropertiesResponseOutput() EventSubscriptionPropertiesResponseOutput {
	return o
}

func (o EventSubscriptionPropertiesResponseOutput) ToEventSubscriptionPropertiesResponseOutputWithContext(ctx context.Context) EventSubscriptionPropertiesResponseOutput {
	return o
}

func (o EventSubscriptionPropertiesResponseOutput) ToEventSubscriptionPropertiesResponsePtrOutput() EventSubscriptionPropertiesResponsePtrOutput {
	return o.ToEventSubscriptionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o EventSubscriptionPropertiesResponseOutput) ToEventSubscriptionPropertiesResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v EventSubscriptionPropertiesResponse) *EventSubscriptionPropertiesResponse {
		return &v
	}).(EventSubscriptionPropertiesResponsePtrOutput)
}

// Information about the destination where events have to be delivered for the event subscription.
func (o EventSubscriptionPropertiesResponseOutput) Destination() EventSubscriptionDestinationResponsePtrOutput {
	return o.ApplyT(func(v EventSubscriptionPropertiesResponse) *EventSubscriptionDestinationResponse {
		return v.Destination
	}).(EventSubscriptionDestinationResponsePtrOutput)
}

// Information about the filter for the event subscription.
func (o EventSubscriptionPropertiesResponseOutput) Filter() EventSubscriptionFilterResponsePtrOutput {
	return o.ApplyT(func(v EventSubscriptionPropertiesResponse) *EventSubscriptionFilterResponse { return v.Filter }).(EventSubscriptionFilterResponsePtrOutput)
}

// List of user defined labels.
func (o EventSubscriptionPropertiesResponseOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionPropertiesResponse) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

// Provisioning state of the event subscription.
func (o EventSubscriptionPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Name of the topic of the event subscription.
func (o EventSubscriptionPropertiesResponseOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionPropertiesResponse) string { return v.Topic }).(pulumi.StringOutput)
}

type EventSubscriptionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionPropertiesResponse)(nil)).Elem()
}

func (o EventSubscriptionPropertiesResponsePtrOutput) ToEventSubscriptionPropertiesResponsePtrOutput() EventSubscriptionPropertiesResponsePtrOutput {
	return o
}

func (o EventSubscriptionPropertiesResponsePtrOutput) ToEventSubscriptionPropertiesResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionPropertiesResponsePtrOutput {
	return o
}

func (o EventSubscriptionPropertiesResponsePtrOutput) Elem() EventSubscriptionPropertiesResponseOutput {
	return o.ApplyT(func(v *EventSubscriptionPropertiesResponse) EventSubscriptionPropertiesResponse { return *v }).(EventSubscriptionPropertiesResponseOutput)
}

// Information about the destination where events have to be delivered for the event subscription.
func (o EventSubscriptionPropertiesResponsePtrOutput) Destination() EventSubscriptionDestinationResponsePtrOutput {
	return o.ApplyT(func(v *EventSubscriptionPropertiesResponse) *EventSubscriptionDestinationResponse {
		if v == nil {
			return nil
		}
		return v.Destination
	}).(EventSubscriptionDestinationResponsePtrOutput)
}

// Information about the filter for the event subscription.
func (o EventSubscriptionPropertiesResponsePtrOutput) Filter() EventSubscriptionFilterResponsePtrOutput {
	return o.ApplyT(func(v *EventSubscriptionPropertiesResponse) *EventSubscriptionFilterResponse {
		if v == nil {
			return nil
		}
		return v.Filter
	}).(EventSubscriptionFilterResponsePtrOutput)
}

// List of user defined labels.
func (o EventSubscriptionPropertiesResponsePtrOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringArrayOutput)
}

// Provisioning state of the event subscription.
func (o EventSubscriptionPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Name of the topic of the event subscription.
func (o EventSubscriptionPropertiesResponsePtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Topic
	}).(pulumi.StringPtrOutput)
}

// EventGrid Topic
type TopicType struct {
	// Location of the resource
	Location string `pulumi:"location"`
	// Name of the resource
	Name string `pulumi:"name"`
	// Properties of the topic
	Properties TopicPropertiesResponse `pulumi:"properties"`
	// Tags of the resource
	Tags map[string]string `pulumi:"tags"`
	// Type of the resource
	Type string `pulumi:"type"`
}

// TopicTypeInput is an input type that accepts TopicTypeArgs and TopicTypeOutput values.
// You can construct a concrete instance of `TopicTypeInput` via:
//
//          TopicTypeArgs{...}
type TopicTypeInput interface {
	pulumi.Input

	ToTopicTypeOutput() TopicTypeOutput
	ToTopicTypeOutputWithContext(context.Context) TopicTypeOutput
}

// EventGrid Topic
type TopicTypeArgs struct {
	// Location of the resource
	Location pulumi.StringInput `pulumi:"location"`
	// Name of the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Properties of the topic
	Properties TopicPropertiesResponseInput `pulumi:"properties"`
	// Tags of the resource
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Type of the resource
	Type pulumi.StringInput `pulumi:"type"`
}

func (TopicTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicType)(nil)).Elem()
}

func (i TopicTypeArgs) ToTopicTypeOutput() TopicTypeOutput {
	return i.ToTopicTypeOutputWithContext(context.Background())
}

func (i TopicTypeArgs) ToTopicTypeOutputWithContext(ctx context.Context) TopicTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicTypeOutput)
}

// EventGrid Topic
type TopicTypeOutput struct{ *pulumi.OutputState }

func (TopicTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicType)(nil)).Elem()
}

func (o TopicTypeOutput) ToTopicTypeOutput() TopicTypeOutput {
	return o
}

func (o TopicTypeOutput) ToTopicTypeOutputWithContext(ctx context.Context) TopicTypeOutput {
	return o
}

// Location of the resource
func (o TopicTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v TopicType) string { return v.Location }).(pulumi.StringOutput)
}

// Name of the resource
func (o TopicTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TopicType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of the topic
func (o TopicTypeOutput) Properties() TopicPropertiesResponseOutput {
	return o.ApplyT(func(v TopicType) TopicPropertiesResponse { return v.Properties }).(TopicPropertiesResponseOutput)
}

// Tags of the resource
func (o TopicTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v TopicType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Type of the resource
func (o TopicTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TopicType) string { return v.Type }).(pulumi.StringOutput)
}

// Properties of the Topic
type TopicProperties struct {
}

// TopicPropertiesInput is an input type that accepts TopicPropertiesArgs and TopicPropertiesOutput values.
// You can construct a concrete instance of `TopicPropertiesInput` via:
//
//          TopicPropertiesArgs{...}
type TopicPropertiesInput interface {
	pulumi.Input

	ToTopicPropertiesOutput() TopicPropertiesOutput
	ToTopicPropertiesOutputWithContext(context.Context) TopicPropertiesOutput
}

// Properties of the Topic
type TopicPropertiesArgs struct {
}

func (TopicPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicProperties)(nil)).Elem()
}

func (i TopicPropertiesArgs) ToTopicPropertiesOutput() TopicPropertiesOutput {
	return i.ToTopicPropertiesOutputWithContext(context.Background())
}

func (i TopicPropertiesArgs) ToTopicPropertiesOutputWithContext(ctx context.Context) TopicPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPropertiesOutput)
}

func (i TopicPropertiesArgs) ToTopicPropertiesPtrOutput() TopicPropertiesPtrOutput {
	return i.ToTopicPropertiesPtrOutputWithContext(context.Background())
}

func (i TopicPropertiesArgs) ToTopicPropertiesPtrOutputWithContext(ctx context.Context) TopicPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPropertiesOutput).ToTopicPropertiesPtrOutputWithContext(ctx)
}

// TopicPropertiesPtrInput is an input type that accepts TopicPropertiesArgs, TopicPropertiesPtr and TopicPropertiesPtrOutput values.
// You can construct a concrete instance of `TopicPropertiesPtrInput` via:
//
//          TopicPropertiesArgs{...}
//
//  or:
//
//          nil
type TopicPropertiesPtrInput interface {
	pulumi.Input

	ToTopicPropertiesPtrOutput() TopicPropertiesPtrOutput
	ToTopicPropertiesPtrOutputWithContext(context.Context) TopicPropertiesPtrOutput
}

type topicPropertiesPtrType TopicPropertiesArgs

func TopicPropertiesPtr(v *TopicPropertiesArgs) TopicPropertiesPtrInput {
	return (*topicPropertiesPtrType)(v)
}

func (*topicPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicProperties)(nil)).Elem()
}

func (i *topicPropertiesPtrType) ToTopicPropertiesPtrOutput() TopicPropertiesPtrOutput {
	return i.ToTopicPropertiesPtrOutputWithContext(context.Background())
}

func (i *topicPropertiesPtrType) ToTopicPropertiesPtrOutputWithContext(ctx context.Context) TopicPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPropertiesPtrOutput)
}

// Properties of the Topic
type TopicPropertiesOutput struct{ *pulumi.OutputState }

func (TopicPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicProperties)(nil)).Elem()
}

func (o TopicPropertiesOutput) ToTopicPropertiesOutput() TopicPropertiesOutput {
	return o
}

func (o TopicPropertiesOutput) ToTopicPropertiesOutputWithContext(ctx context.Context) TopicPropertiesOutput {
	return o
}

func (o TopicPropertiesOutput) ToTopicPropertiesPtrOutput() TopicPropertiesPtrOutput {
	return o.ToTopicPropertiesPtrOutputWithContext(context.Background())
}

func (o TopicPropertiesOutput) ToTopicPropertiesPtrOutputWithContext(ctx context.Context) TopicPropertiesPtrOutput {
	return o.ApplyT(func(v TopicProperties) *TopicProperties {
		return &v
	}).(TopicPropertiesPtrOutput)
}

type TopicPropertiesPtrOutput struct{ *pulumi.OutputState }

func (TopicPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicProperties)(nil)).Elem()
}

func (o TopicPropertiesPtrOutput) ToTopicPropertiesPtrOutput() TopicPropertiesPtrOutput {
	return o
}

func (o TopicPropertiesPtrOutput) ToTopicPropertiesPtrOutputWithContext(ctx context.Context) TopicPropertiesPtrOutput {
	return o
}

func (o TopicPropertiesPtrOutput) Elem() TopicPropertiesOutput {
	return o.ApplyT(func(v *TopicProperties) TopicProperties { return *v }).(TopicPropertiesOutput)
}

// Properties of the Topic
type TopicPropertiesResponse struct {
	// Endpoint for the topic.
	Endpoint string `pulumi:"endpoint"`
	// Provisioning state of the topic.
	ProvisioningState string `pulumi:"provisioningState"`
}

// TopicPropertiesResponseInput is an input type that accepts TopicPropertiesResponseArgs and TopicPropertiesResponseOutput values.
// You can construct a concrete instance of `TopicPropertiesResponseInput` via:
//
//          TopicPropertiesResponseArgs{...}
type TopicPropertiesResponseInput interface {
	pulumi.Input

	ToTopicPropertiesResponseOutput() TopicPropertiesResponseOutput
	ToTopicPropertiesResponseOutputWithContext(context.Context) TopicPropertiesResponseOutput
}

// Properties of the Topic
type TopicPropertiesResponseArgs struct {
	// Endpoint for the topic.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// Provisioning state of the topic.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
}

func (TopicPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicPropertiesResponse)(nil)).Elem()
}

func (i TopicPropertiesResponseArgs) ToTopicPropertiesResponseOutput() TopicPropertiesResponseOutput {
	return i.ToTopicPropertiesResponseOutputWithContext(context.Background())
}

func (i TopicPropertiesResponseArgs) ToTopicPropertiesResponseOutputWithContext(ctx context.Context) TopicPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPropertiesResponseOutput)
}

func (i TopicPropertiesResponseArgs) ToTopicPropertiesResponsePtrOutput() TopicPropertiesResponsePtrOutput {
	return i.ToTopicPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i TopicPropertiesResponseArgs) ToTopicPropertiesResponsePtrOutputWithContext(ctx context.Context) TopicPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPropertiesResponseOutput).ToTopicPropertiesResponsePtrOutputWithContext(ctx)
}

// TopicPropertiesResponsePtrInput is an input type that accepts TopicPropertiesResponseArgs, TopicPropertiesResponsePtr and TopicPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `TopicPropertiesResponsePtrInput` via:
//
//          TopicPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type TopicPropertiesResponsePtrInput interface {
	pulumi.Input

	ToTopicPropertiesResponsePtrOutput() TopicPropertiesResponsePtrOutput
	ToTopicPropertiesResponsePtrOutputWithContext(context.Context) TopicPropertiesResponsePtrOutput
}

type topicPropertiesResponsePtrType TopicPropertiesResponseArgs

func TopicPropertiesResponsePtr(v *TopicPropertiesResponseArgs) TopicPropertiesResponsePtrInput {
	return (*topicPropertiesResponsePtrType)(v)
}

func (*topicPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicPropertiesResponse)(nil)).Elem()
}

func (i *topicPropertiesResponsePtrType) ToTopicPropertiesResponsePtrOutput() TopicPropertiesResponsePtrOutput {
	return i.ToTopicPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *topicPropertiesResponsePtrType) ToTopicPropertiesResponsePtrOutputWithContext(ctx context.Context) TopicPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPropertiesResponsePtrOutput)
}

// Properties of the Topic
type TopicPropertiesResponseOutput struct{ *pulumi.OutputState }

func (TopicPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicPropertiesResponse)(nil)).Elem()
}

func (o TopicPropertiesResponseOutput) ToTopicPropertiesResponseOutput() TopicPropertiesResponseOutput {
	return o
}

func (o TopicPropertiesResponseOutput) ToTopicPropertiesResponseOutputWithContext(ctx context.Context) TopicPropertiesResponseOutput {
	return o
}

func (o TopicPropertiesResponseOutput) ToTopicPropertiesResponsePtrOutput() TopicPropertiesResponsePtrOutput {
	return o.ToTopicPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o TopicPropertiesResponseOutput) ToTopicPropertiesResponsePtrOutputWithContext(ctx context.Context) TopicPropertiesResponsePtrOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) *TopicPropertiesResponse {
		return &v
	}).(TopicPropertiesResponsePtrOutput)
}

// Endpoint for the topic.
func (o TopicPropertiesResponseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Provisioning state of the topic.
func (o TopicPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type TopicPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (TopicPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicPropertiesResponse)(nil)).Elem()
}

func (o TopicPropertiesResponsePtrOutput) ToTopicPropertiesResponsePtrOutput() TopicPropertiesResponsePtrOutput {
	return o
}

func (o TopicPropertiesResponsePtrOutput) ToTopicPropertiesResponsePtrOutputWithContext(ctx context.Context) TopicPropertiesResponsePtrOutput {
	return o
}

func (o TopicPropertiesResponsePtrOutput) Elem() TopicPropertiesResponseOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) TopicPropertiesResponse { return *v }).(TopicPropertiesResponseOutput)
}

// Endpoint for the topic.
func (o TopicPropertiesResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Provisioning state of the topic.
func (o TopicPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(EventSubscriptionTypeOutput{})
	pulumi.RegisterOutputType(EventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(EventSubscriptionDestinationPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionDestinationResponseOutput{})
	pulumi.RegisterOutputType(EventSubscriptionDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterResponseOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionPropertiesOutput{})
	pulumi.RegisterOutputType(EventSubscriptionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(EventSubscriptionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(TopicTypeOutput{})
	pulumi.RegisterOutputType(TopicPropertiesOutput{})
	pulumi.RegisterOutputType(TopicPropertiesPtrOutput{})
	pulumi.RegisterOutputType(TopicPropertiesResponseOutput{})
	pulumi.RegisterOutputType(TopicPropertiesResponsePtrOutput{})
}
