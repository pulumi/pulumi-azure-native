// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package latest

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Information about the azure function destination for an event subscription.
type AzureFunctionEventSubscriptionDestination struct {
	// Type of the endpoint for the event subscription destination.
	EndpointType string `pulumi:"endpointType"`
	// Maximum number of events per batch.
	MaxEventsPerBatch *int `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes *int `pulumi:"preferredBatchSizeInKilobytes"`
	// The Azure Resource Id that represents the endpoint of the Azure Function destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// AzureFunctionEventSubscriptionDestinationInput is an input type that accepts AzureFunctionEventSubscriptionDestinationArgs and AzureFunctionEventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `AzureFunctionEventSubscriptionDestinationInput` via:
//
//          AzureFunctionEventSubscriptionDestinationArgs{...}
type AzureFunctionEventSubscriptionDestinationInput interface {
	pulumi.Input

	ToAzureFunctionEventSubscriptionDestinationOutput() AzureFunctionEventSubscriptionDestinationOutput
	ToAzureFunctionEventSubscriptionDestinationOutputWithContext(context.Context) AzureFunctionEventSubscriptionDestinationOutput
}

// Information about the azure function destination for an event subscription.
type AzureFunctionEventSubscriptionDestinationArgs struct {
	// Type of the endpoint for the event subscription destination.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// Maximum number of events per batch.
	MaxEventsPerBatch pulumi.IntPtrInput `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes pulumi.IntPtrInput `pulumi:"preferredBatchSizeInKilobytes"`
	// The Azure Resource Id that represents the endpoint of the Azure Function destination of an event subscription.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (AzureFunctionEventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionEventSubscriptionDestination)(nil)).Elem()
}

func (i AzureFunctionEventSubscriptionDestinationArgs) ToAzureFunctionEventSubscriptionDestinationOutput() AzureFunctionEventSubscriptionDestinationOutput {
	return i.ToAzureFunctionEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i AzureFunctionEventSubscriptionDestinationArgs) ToAzureFunctionEventSubscriptionDestinationOutputWithContext(ctx context.Context) AzureFunctionEventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionEventSubscriptionDestinationOutput)
}

// Information about the azure function destination for an event subscription.
type AzureFunctionEventSubscriptionDestinationResponse struct {
	// Type of the endpoint for the event subscription destination.
	EndpointType string `pulumi:"endpointType"`
	// Maximum number of events per batch.
	MaxEventsPerBatch *int `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes *int `pulumi:"preferredBatchSizeInKilobytes"`
	// The Azure Resource Id that represents the endpoint of the Azure Function destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// Information about the azure function destination for an event subscription.
type AzureFunctionEventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (AzureFunctionEventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o AzureFunctionEventSubscriptionDestinationResponseOutput) ToAzureFunctionEventSubscriptionDestinationResponseOutput() AzureFunctionEventSubscriptionDestinationResponseOutput {
	return o
}

func (o AzureFunctionEventSubscriptionDestinationResponseOutput) ToAzureFunctionEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) AzureFunctionEventSubscriptionDestinationResponseOutput {
	return o
}

// Type of the endpoint for the event subscription destination.
func (o AzureFunctionEventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionEventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// Maximum number of events per batch.
func (o AzureFunctionEventSubscriptionDestinationResponseOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AzureFunctionEventSubscriptionDestinationResponse) *int { return v.MaxEventsPerBatch }).(pulumi.IntPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o AzureFunctionEventSubscriptionDestinationResponseOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AzureFunctionEventSubscriptionDestinationResponse) *int { return v.PreferredBatchSizeInKilobytes }).(pulumi.IntPtrOutput)
}

// The Azure Resource Id that represents the endpoint of the Azure Function destination of an event subscription.
func (o AzureFunctionEventSubscriptionDestinationResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFunctionEventSubscriptionDestinationResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// BoolEquals Advanced Filter.
type BoolEqualsAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The boolean filter value.
	Value *bool `pulumi:"value"`
}

// BoolEqualsAdvancedFilterInput is an input type that accepts BoolEqualsAdvancedFilterArgs and BoolEqualsAdvancedFilterOutput values.
// You can construct a concrete instance of `BoolEqualsAdvancedFilterInput` via:
//
//          BoolEqualsAdvancedFilterArgs{...}
type BoolEqualsAdvancedFilterInput interface {
	pulumi.Input

	ToBoolEqualsAdvancedFilterOutput() BoolEqualsAdvancedFilterOutput
	ToBoolEqualsAdvancedFilterOutputWithContext(context.Context) BoolEqualsAdvancedFilterOutput
}

// BoolEquals Advanced Filter.
type BoolEqualsAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The boolean filter value.
	Value pulumi.BoolPtrInput `pulumi:"value"`
}

func (BoolEqualsAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BoolEqualsAdvancedFilter)(nil)).Elem()
}

func (i BoolEqualsAdvancedFilterArgs) ToBoolEqualsAdvancedFilterOutput() BoolEqualsAdvancedFilterOutput {
	return i.ToBoolEqualsAdvancedFilterOutputWithContext(context.Background())
}

func (i BoolEqualsAdvancedFilterArgs) ToBoolEqualsAdvancedFilterOutputWithContext(ctx context.Context) BoolEqualsAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoolEqualsAdvancedFilterOutput)
}

// BoolEquals Advanced Filter.
type BoolEqualsAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The boolean filter value.
	Value *bool `pulumi:"value"`
}

// BoolEquals Advanced Filter.
type BoolEqualsAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (BoolEqualsAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BoolEqualsAdvancedFilterResponse)(nil)).Elem()
}

func (o BoolEqualsAdvancedFilterResponseOutput) ToBoolEqualsAdvancedFilterResponseOutput() BoolEqualsAdvancedFilterResponseOutput {
	return o
}

func (o BoolEqualsAdvancedFilterResponseOutput) ToBoolEqualsAdvancedFilterResponseOutputWithContext(ctx context.Context) BoolEqualsAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o BoolEqualsAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoolEqualsAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
func (o BoolEqualsAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v BoolEqualsAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The boolean filter value.
func (o BoolEqualsAdvancedFilterResponseOutput) Value() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BoolEqualsAdvancedFilterResponse) *bool { return v.Value }).(pulumi.BoolPtrOutput)
}

// ConnectionState information.
type ConnectionState struct {
	// Actions required (if any).
	ActionsRequired *string `pulumi:"actionsRequired"`
	// Description of the connection state.
	Description *string `pulumi:"description"`
	// Status of the connection.
	Status *string `pulumi:"status"`
}

// ConnectionStateInput is an input type that accepts ConnectionStateArgs and ConnectionStateOutput values.
// You can construct a concrete instance of `ConnectionStateInput` via:
//
//          ConnectionStateArgs{...}
type ConnectionStateInput interface {
	pulumi.Input

	ToConnectionStateOutput() ConnectionStateOutput
	ToConnectionStateOutputWithContext(context.Context) ConnectionStateOutput
}

// ConnectionState information.
type ConnectionStateArgs struct {
	// Actions required (if any).
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// Description of the connection state.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Status of the connection.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionState)(nil)).Elem()
}

func (i ConnectionStateArgs) ToConnectionStateOutput() ConnectionStateOutput {
	return i.ToConnectionStateOutputWithContext(context.Background())
}

func (i ConnectionStateArgs) ToConnectionStateOutputWithContext(ctx context.Context) ConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionStateOutput)
}

func (i ConnectionStateArgs) ToConnectionStatePtrOutput() ConnectionStatePtrOutput {
	return i.ToConnectionStatePtrOutputWithContext(context.Background())
}

func (i ConnectionStateArgs) ToConnectionStatePtrOutputWithContext(ctx context.Context) ConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionStateOutput).ToConnectionStatePtrOutputWithContext(ctx)
}

// ConnectionStatePtrInput is an input type that accepts ConnectionStateArgs, ConnectionStatePtr and ConnectionStatePtrOutput values.
// You can construct a concrete instance of `ConnectionStatePtrInput` via:
//
//          ConnectionStateArgs{...}
//
//  or:
//
//          nil
type ConnectionStatePtrInput interface {
	pulumi.Input

	ToConnectionStatePtrOutput() ConnectionStatePtrOutput
	ToConnectionStatePtrOutputWithContext(context.Context) ConnectionStatePtrOutput
}

type connectionStatePtrType ConnectionStateArgs

func ConnectionStatePtr(v *ConnectionStateArgs) ConnectionStatePtrInput {
	return (*connectionStatePtrType)(v)
}

func (*connectionStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionState)(nil)).Elem()
}

func (i *connectionStatePtrType) ToConnectionStatePtrOutput() ConnectionStatePtrOutput {
	return i.ToConnectionStatePtrOutputWithContext(context.Background())
}

func (i *connectionStatePtrType) ToConnectionStatePtrOutputWithContext(ctx context.Context) ConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionStatePtrOutput)
}

// ConnectionState information.
type ConnectionStateResponse struct {
	// Actions required (if any).
	ActionsRequired *string `pulumi:"actionsRequired"`
	// Description of the connection state.
	Description *string `pulumi:"description"`
	// Status of the connection.
	Status *string `pulumi:"status"`
}

// ConnectionState information.
type ConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (ConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionStateResponse)(nil)).Elem()
}

func (o ConnectionStateResponseOutput) ToConnectionStateResponseOutput() ConnectionStateResponseOutput {
	return o
}

func (o ConnectionStateResponseOutput) ToConnectionStateResponseOutputWithContext(ctx context.Context) ConnectionStateResponseOutput {
	return o
}

func (o ConnectionStateResponseOutput) ToConnectionStateResponsePtrOutput() ConnectionStateResponsePtrOutput {
	return o.ToConnectionStateResponsePtrOutputWithContext(context.Background())
}

func (o ConnectionStateResponseOutput) ToConnectionStateResponsePtrOutputWithContext(ctx context.Context) ConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v ConnectionStateResponse) *ConnectionStateResponse {
		return &v
	}).(ConnectionStateResponsePtrOutput)
}

// Actions required (if any).
func (o ConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// Description of the connection state.
func (o ConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Status of the connection.
func (o ConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ConnectionStateResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectionStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionStateResponse)(nil)).Elem()
}

func (o ConnectionStateResponsePtrOutput) ToConnectionStateResponsePtrOutput() ConnectionStateResponsePtrOutput {
	return o
}

func (o ConnectionStateResponsePtrOutput) ToConnectionStateResponsePtrOutputWithContext(ctx context.Context) ConnectionStateResponsePtrOutput {
	return o
}

func (o ConnectionStateResponsePtrOutput) Elem() ConnectionStateResponseOutput {
	return o.ApplyT(func(v *ConnectionStateResponse) ConnectionStateResponse { return *v }).(ConnectionStateResponseOutput)
}

// Actions required (if any).
func (o ConnectionStateResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// Description of the connection state.
func (o ConnectionStateResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Status of the connection.
func (o ConnectionStateResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Information about the event hub destination for an event subscription.
type EventHubEventSubscriptionDestination struct {
	// Type of the endpoint for the event subscription destination.
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// EventHubEventSubscriptionDestinationInput is an input type that accepts EventHubEventSubscriptionDestinationArgs and EventHubEventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `EventHubEventSubscriptionDestinationInput` via:
//
//          EventHubEventSubscriptionDestinationArgs{...}
type EventHubEventSubscriptionDestinationInput interface {
	pulumi.Input

	ToEventHubEventSubscriptionDestinationOutput() EventHubEventSubscriptionDestinationOutput
	ToEventHubEventSubscriptionDestinationOutputWithContext(context.Context) EventHubEventSubscriptionDestinationOutput
}

// Information about the event hub destination for an event subscription.
type EventHubEventSubscriptionDestinationArgs struct {
	// Type of the endpoint for the event subscription destination.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (EventHubEventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubEventSubscriptionDestination)(nil)).Elem()
}

func (i EventHubEventSubscriptionDestinationArgs) ToEventHubEventSubscriptionDestinationOutput() EventHubEventSubscriptionDestinationOutput {
	return i.ToEventHubEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i EventHubEventSubscriptionDestinationArgs) ToEventHubEventSubscriptionDestinationOutputWithContext(ctx context.Context) EventHubEventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubEventSubscriptionDestinationOutput)
}

// Information about the event hub destination for an event subscription.
type EventHubEventSubscriptionDestinationResponse struct {
	// Type of the endpoint for the event subscription destination.
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// Information about the event hub destination for an event subscription.
type EventHubEventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (EventHubEventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o EventHubEventSubscriptionDestinationResponseOutput) ToEventHubEventSubscriptionDestinationResponseOutput() EventHubEventSubscriptionDestinationResponseOutput {
	return o
}

func (o EventHubEventSubscriptionDestinationResponseOutput) ToEventHubEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) EventHubEventSubscriptionDestinationResponseOutput {
	return o
}

// Type of the endpoint for the event subscription destination.
func (o EventHubEventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubEventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription.
func (o EventHubEventSubscriptionDestinationResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubEventSubscriptionDestinationResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Filter for the Event Subscription.
type EventSubscriptionFilter struct {
	// An array of advanced filters that are used for filtering event subscriptions.
	AdvancedFilters []interface{} `pulumi:"advancedFilters"`
	// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
	IncludedEventTypes []string `pulumi:"includedEventTypes"`
	// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
	// should be compared in a case sensitive manner.
	IsSubjectCaseSensitive *bool `pulumi:"isSubjectCaseSensitive"`
	// An optional string to filter events for an event subscription based on a resource path prefix.
	// The format of this depends on the publisher of the events.
	// Wildcard characters are not supported in this path.
	SubjectBeginsWith *string `pulumi:"subjectBeginsWith"`
	// An optional string to filter events for an event subscription based on a resource path suffix.
	// Wildcard characters are not supported in this path.
	SubjectEndsWith *string `pulumi:"subjectEndsWith"`
}

// EventSubscriptionFilterInput is an input type that accepts EventSubscriptionFilterArgs and EventSubscriptionFilterOutput values.
// You can construct a concrete instance of `EventSubscriptionFilterInput` via:
//
//          EventSubscriptionFilterArgs{...}
type EventSubscriptionFilterInput interface {
	pulumi.Input

	ToEventSubscriptionFilterOutput() EventSubscriptionFilterOutput
	ToEventSubscriptionFilterOutputWithContext(context.Context) EventSubscriptionFilterOutput
}

// Filter for the Event Subscription.
type EventSubscriptionFilterArgs struct {
	// An array of advanced filters that are used for filtering event subscriptions.
	AdvancedFilters pulumi.ArrayInput `pulumi:"advancedFilters"`
	// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
	IncludedEventTypes pulumi.StringArrayInput `pulumi:"includedEventTypes"`
	// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
	// should be compared in a case sensitive manner.
	IsSubjectCaseSensitive pulumi.BoolPtrInput `pulumi:"isSubjectCaseSensitive"`
	// An optional string to filter events for an event subscription based on a resource path prefix.
	// The format of this depends on the publisher of the events.
	// Wildcard characters are not supported in this path.
	SubjectBeginsWith pulumi.StringPtrInput `pulumi:"subjectBeginsWith"`
	// An optional string to filter events for an event subscription based on a resource path suffix.
	// Wildcard characters are not supported in this path.
	SubjectEndsWith pulumi.StringPtrInput `pulumi:"subjectEndsWith"`
}

func (EventSubscriptionFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionFilter)(nil)).Elem()
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterOutput() EventSubscriptionFilterOutput {
	return i.ToEventSubscriptionFilterOutputWithContext(context.Background())
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterOutputWithContext(ctx context.Context) EventSubscriptionFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterOutput)
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput {
	return i.ToEventSubscriptionFilterPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterOutput).ToEventSubscriptionFilterPtrOutputWithContext(ctx)
}

// EventSubscriptionFilterPtrInput is an input type that accepts EventSubscriptionFilterArgs, EventSubscriptionFilterPtr and EventSubscriptionFilterPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionFilterPtrInput` via:
//
//          EventSubscriptionFilterArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionFilterPtrInput interface {
	pulumi.Input

	ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput
	ToEventSubscriptionFilterPtrOutputWithContext(context.Context) EventSubscriptionFilterPtrOutput
}

type eventSubscriptionFilterPtrType EventSubscriptionFilterArgs

func EventSubscriptionFilterPtr(v *EventSubscriptionFilterArgs) EventSubscriptionFilterPtrInput {
	return (*eventSubscriptionFilterPtrType)(v)
}

func (*eventSubscriptionFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionFilter)(nil)).Elem()
}

func (i *eventSubscriptionFilterPtrType) ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput {
	return i.ToEventSubscriptionFilterPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionFilterPtrType) ToEventSubscriptionFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterPtrOutput)
}

// Filter for the Event Subscription.
type EventSubscriptionFilterResponse struct {
	// An array of advanced filters that are used for filtering event subscriptions.
	AdvancedFilters []interface{} `pulumi:"advancedFilters"`
	// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
	IncludedEventTypes []string `pulumi:"includedEventTypes"`
	// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
	// should be compared in a case sensitive manner.
	IsSubjectCaseSensitive *bool `pulumi:"isSubjectCaseSensitive"`
	// An optional string to filter events for an event subscription based on a resource path prefix.
	// The format of this depends on the publisher of the events.
	// Wildcard characters are not supported in this path.
	SubjectBeginsWith *string `pulumi:"subjectBeginsWith"`
	// An optional string to filter events for an event subscription based on a resource path suffix.
	// Wildcard characters are not supported in this path.
	SubjectEndsWith *string `pulumi:"subjectEndsWith"`
}

// Filter for the Event Subscription.
type EventSubscriptionFilterResponseOutput struct{ *pulumi.OutputState }

func (EventSubscriptionFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionFilterResponse)(nil)).Elem()
}

func (o EventSubscriptionFilterResponseOutput) ToEventSubscriptionFilterResponseOutput() EventSubscriptionFilterResponseOutput {
	return o
}

func (o EventSubscriptionFilterResponseOutput) ToEventSubscriptionFilterResponseOutputWithContext(ctx context.Context) EventSubscriptionFilterResponseOutput {
	return o
}

func (o EventSubscriptionFilterResponseOutput) ToEventSubscriptionFilterResponsePtrOutput() EventSubscriptionFilterResponsePtrOutput {
	return o.ToEventSubscriptionFilterResponsePtrOutputWithContext(context.Background())
}

func (o EventSubscriptionFilterResponseOutput) ToEventSubscriptionFilterResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionFilterResponsePtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *EventSubscriptionFilterResponse {
		return &v
	}).(EventSubscriptionFilterResponsePtrOutput)
}

// An array of advanced filters that are used for filtering event subscriptions.
func (o EventSubscriptionFilterResponseOutput) AdvancedFilters() pulumi.ArrayOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) []interface{} { return v.AdvancedFilters }).(pulumi.ArrayOutput)
}

// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
func (o EventSubscriptionFilterResponseOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) []string { return v.IncludedEventTypes }).(pulumi.StringArrayOutput)
}

// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
// should be compared in a case sensitive manner.
func (o EventSubscriptionFilterResponseOutput) IsSubjectCaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *bool { return v.IsSubjectCaseSensitive }).(pulumi.BoolPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path prefix.
// The format of this depends on the publisher of the events.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponseOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *string { return v.SubjectBeginsWith }).(pulumi.StringPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path suffix.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponseOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *string { return v.SubjectEndsWith }).(pulumi.StringPtrOutput)
}

type EventSubscriptionFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionFilterResponse)(nil)).Elem()
}

func (o EventSubscriptionFilterResponsePtrOutput) ToEventSubscriptionFilterResponsePtrOutput() EventSubscriptionFilterResponsePtrOutput {
	return o
}

func (o EventSubscriptionFilterResponsePtrOutput) ToEventSubscriptionFilterResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionFilterResponsePtrOutput {
	return o
}

func (o EventSubscriptionFilterResponsePtrOutput) Elem() EventSubscriptionFilterResponseOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) EventSubscriptionFilterResponse { return *v }).(EventSubscriptionFilterResponseOutput)
}

// An array of advanced filters that are used for filtering event subscriptions.
func (o EventSubscriptionFilterResponsePtrOutput) AdvancedFilters() pulumi.ArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) []interface{} {
		if v == nil {
			return nil
		}
		return v.AdvancedFilters
	}).(pulumi.ArrayOutput)
}

// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
func (o EventSubscriptionFilterResponsePtrOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) []string {
		if v == nil {
			return nil
		}
		return v.IncludedEventTypes
	}).(pulumi.StringArrayOutput)
}

// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
// should be compared in a case sensitive manner.
func (o EventSubscriptionFilterResponsePtrOutput) IsSubjectCaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsSubjectCaseSensitive
	}).(pulumi.BoolPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path prefix.
// The format of this depends on the publisher of the events.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponsePtrOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubjectBeginsWith
	}).(pulumi.StringPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path suffix.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponsePtrOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubjectEndsWith
	}).(pulumi.StringPtrOutput)
}

// Information about the HybridConnection destination for an event subscription.
type HybridConnectionEventSubscriptionDestination struct {
	// Type of the endpoint for the event subscription destination.
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource ID of an hybrid connection that is the destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// HybridConnectionEventSubscriptionDestinationInput is an input type that accepts HybridConnectionEventSubscriptionDestinationArgs and HybridConnectionEventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `HybridConnectionEventSubscriptionDestinationInput` via:
//
//          HybridConnectionEventSubscriptionDestinationArgs{...}
type HybridConnectionEventSubscriptionDestinationInput interface {
	pulumi.Input

	ToHybridConnectionEventSubscriptionDestinationOutput() HybridConnectionEventSubscriptionDestinationOutput
	ToHybridConnectionEventSubscriptionDestinationOutputWithContext(context.Context) HybridConnectionEventSubscriptionDestinationOutput
}

// Information about the HybridConnection destination for an event subscription.
type HybridConnectionEventSubscriptionDestinationArgs struct {
	// Type of the endpoint for the event subscription destination.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The Azure Resource ID of an hybrid connection that is the destination of an event subscription.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (HybridConnectionEventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridConnectionEventSubscriptionDestination)(nil)).Elem()
}

func (i HybridConnectionEventSubscriptionDestinationArgs) ToHybridConnectionEventSubscriptionDestinationOutput() HybridConnectionEventSubscriptionDestinationOutput {
	return i.ToHybridConnectionEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i HybridConnectionEventSubscriptionDestinationArgs) ToHybridConnectionEventSubscriptionDestinationOutputWithContext(ctx context.Context) HybridConnectionEventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridConnectionEventSubscriptionDestinationOutput)
}

// Information about the HybridConnection destination for an event subscription.
type HybridConnectionEventSubscriptionDestinationResponse struct {
	// Type of the endpoint for the event subscription destination.
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource ID of an hybrid connection that is the destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// Information about the HybridConnection destination for an event subscription.
type HybridConnectionEventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (HybridConnectionEventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HybridConnectionEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o HybridConnectionEventSubscriptionDestinationResponseOutput) ToHybridConnectionEventSubscriptionDestinationResponseOutput() HybridConnectionEventSubscriptionDestinationResponseOutput {
	return o
}

func (o HybridConnectionEventSubscriptionDestinationResponseOutput) ToHybridConnectionEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) HybridConnectionEventSubscriptionDestinationResponseOutput {
	return o
}

// Type of the endpoint for the event subscription destination.
func (o HybridConnectionEventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v HybridConnectionEventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure Resource ID of an hybrid connection that is the destination of an event subscription.
func (o HybridConnectionEventSubscriptionDestinationResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HybridConnectionEventSubscriptionDestinationResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type InboundIpRule struct {
	// Action to perform based on the match or no match of the IpMask.
	Action *string `pulumi:"action"`
	// IP Address in CIDR notation e.g., 10.0.0.0/8.
	IpMask *string `pulumi:"ipMask"`
}

// InboundIpRuleInput is an input type that accepts InboundIpRuleArgs and InboundIpRuleOutput values.
// You can construct a concrete instance of `InboundIpRuleInput` via:
//
//          InboundIpRuleArgs{...}
type InboundIpRuleInput interface {
	pulumi.Input

	ToInboundIpRuleOutput() InboundIpRuleOutput
	ToInboundIpRuleOutputWithContext(context.Context) InboundIpRuleOutput
}

type InboundIpRuleArgs struct {
	// Action to perform based on the match or no match of the IpMask.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// IP Address in CIDR notation e.g., 10.0.0.0/8.
	IpMask pulumi.StringPtrInput `pulumi:"ipMask"`
}

func (InboundIpRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InboundIpRule)(nil)).Elem()
}

func (i InboundIpRuleArgs) ToInboundIpRuleOutput() InboundIpRuleOutput {
	return i.ToInboundIpRuleOutputWithContext(context.Background())
}

func (i InboundIpRuleArgs) ToInboundIpRuleOutputWithContext(ctx context.Context) InboundIpRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundIpRuleOutput)
}

// InboundIpRuleArrayInput is an input type that accepts InboundIpRuleArray and InboundIpRuleArrayOutput values.
// You can construct a concrete instance of `InboundIpRuleArrayInput` via:
//
//          InboundIpRuleArray{ InboundIpRuleArgs{...} }
type InboundIpRuleArrayInput interface {
	pulumi.Input

	ToInboundIpRuleArrayOutput() InboundIpRuleArrayOutput
	ToInboundIpRuleArrayOutputWithContext(context.Context) InboundIpRuleArrayOutput
}

type InboundIpRuleArray []InboundIpRuleInput

func (InboundIpRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InboundIpRule)(nil)).Elem()
}

func (i InboundIpRuleArray) ToInboundIpRuleArrayOutput() InboundIpRuleArrayOutput {
	return i.ToInboundIpRuleArrayOutputWithContext(context.Background())
}

func (i InboundIpRuleArray) ToInboundIpRuleArrayOutputWithContext(ctx context.Context) InboundIpRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InboundIpRuleArrayOutput)
}

type InboundIpRuleResponse struct {
	// Action to perform based on the match or no match of the IpMask.
	Action *string `pulumi:"action"`
	// IP Address in CIDR notation e.g., 10.0.0.0/8.
	IpMask *string `pulumi:"ipMask"`
}

type InboundIpRuleResponseOutput struct{ *pulumi.OutputState }

func (InboundIpRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InboundIpRuleResponse)(nil)).Elem()
}

func (o InboundIpRuleResponseOutput) ToInboundIpRuleResponseOutput() InboundIpRuleResponseOutput {
	return o
}

func (o InboundIpRuleResponseOutput) ToInboundIpRuleResponseOutputWithContext(ctx context.Context) InboundIpRuleResponseOutput {
	return o
}

// Action to perform based on the match or no match of the IpMask.
func (o InboundIpRuleResponseOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InboundIpRuleResponse) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// IP Address in CIDR notation e.g., 10.0.0.0/8.
func (o InboundIpRuleResponseOutput) IpMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InboundIpRuleResponse) *string { return v.IpMask }).(pulumi.StringPtrOutput)
}

type InboundIpRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (InboundIpRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InboundIpRuleResponse)(nil)).Elem()
}

func (o InboundIpRuleResponseArrayOutput) ToInboundIpRuleResponseArrayOutput() InboundIpRuleResponseArrayOutput {
	return o
}

func (o InboundIpRuleResponseArrayOutput) ToInboundIpRuleResponseArrayOutputWithContext(ctx context.Context) InboundIpRuleResponseArrayOutput {
	return o
}

func (o InboundIpRuleResponseArrayOutput) Index(i pulumi.IntInput) InboundIpRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InboundIpRuleResponse {
		return vs[0].([]InboundIpRuleResponse)[vs[1].(int)]
	}).(InboundIpRuleResponseOutput)
}

// This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema.
type JsonField struct {
	// Name of a field in the input event schema that's to be used as the source of a mapping.
	SourceField *string `pulumi:"sourceField"`
}

// JsonFieldInput is an input type that accepts JsonFieldArgs and JsonFieldOutput values.
// You can construct a concrete instance of `JsonFieldInput` via:
//
//          JsonFieldArgs{...}
type JsonFieldInput interface {
	pulumi.Input

	ToJsonFieldOutput() JsonFieldOutput
	ToJsonFieldOutputWithContext(context.Context) JsonFieldOutput
}

// This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema.
type JsonFieldArgs struct {
	// Name of a field in the input event schema that's to be used as the source of a mapping.
	SourceField pulumi.StringPtrInput `pulumi:"sourceField"`
}

func (JsonFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonField)(nil)).Elem()
}

func (i JsonFieldArgs) ToJsonFieldOutput() JsonFieldOutput {
	return i.ToJsonFieldOutputWithContext(context.Background())
}

func (i JsonFieldArgs) ToJsonFieldOutputWithContext(ctx context.Context) JsonFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFieldOutput)
}

func (i JsonFieldArgs) ToJsonFieldPtrOutput() JsonFieldPtrOutput {
	return i.ToJsonFieldPtrOutputWithContext(context.Background())
}

func (i JsonFieldArgs) ToJsonFieldPtrOutputWithContext(ctx context.Context) JsonFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFieldOutput).ToJsonFieldPtrOutputWithContext(ctx)
}

// JsonFieldPtrInput is an input type that accepts JsonFieldArgs, JsonFieldPtr and JsonFieldPtrOutput values.
// You can construct a concrete instance of `JsonFieldPtrInput` via:
//
//          JsonFieldArgs{...}
//
//  or:
//
//          nil
type JsonFieldPtrInput interface {
	pulumi.Input

	ToJsonFieldPtrOutput() JsonFieldPtrOutput
	ToJsonFieldPtrOutputWithContext(context.Context) JsonFieldPtrOutput
}

type jsonFieldPtrType JsonFieldArgs

func JsonFieldPtr(v *JsonFieldArgs) JsonFieldPtrInput {
	return (*jsonFieldPtrType)(v)
}

func (*jsonFieldPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonField)(nil)).Elem()
}

func (i *jsonFieldPtrType) ToJsonFieldPtrOutput() JsonFieldPtrOutput {
	return i.ToJsonFieldPtrOutputWithContext(context.Background())
}

func (i *jsonFieldPtrType) ToJsonFieldPtrOutputWithContext(ctx context.Context) JsonFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFieldPtrOutput)
}

// This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema.
type JsonFieldResponse struct {
	// Name of a field in the input event schema that's to be used as the source of a mapping.
	SourceField *string `pulumi:"sourceField"`
}

// This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema.
type JsonFieldResponseOutput struct{ *pulumi.OutputState }

func (JsonFieldResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFieldResponse)(nil)).Elem()
}

func (o JsonFieldResponseOutput) ToJsonFieldResponseOutput() JsonFieldResponseOutput {
	return o
}

func (o JsonFieldResponseOutput) ToJsonFieldResponseOutputWithContext(ctx context.Context) JsonFieldResponseOutput {
	return o
}

func (o JsonFieldResponseOutput) ToJsonFieldResponsePtrOutput() JsonFieldResponsePtrOutput {
	return o.ToJsonFieldResponsePtrOutputWithContext(context.Background())
}

func (o JsonFieldResponseOutput) ToJsonFieldResponsePtrOutputWithContext(ctx context.Context) JsonFieldResponsePtrOutput {
	return o.ApplyT(func(v JsonFieldResponse) *JsonFieldResponse {
		return &v
	}).(JsonFieldResponsePtrOutput)
}

// Name of a field in the input event schema that's to be used as the source of a mapping.
func (o JsonFieldResponseOutput) SourceField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonFieldResponse) *string { return v.SourceField }).(pulumi.StringPtrOutput)
}

type JsonFieldResponsePtrOutput struct{ *pulumi.OutputState }

func (JsonFieldResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonFieldResponse)(nil)).Elem()
}

func (o JsonFieldResponsePtrOutput) ToJsonFieldResponsePtrOutput() JsonFieldResponsePtrOutput {
	return o
}

func (o JsonFieldResponsePtrOutput) ToJsonFieldResponsePtrOutputWithContext(ctx context.Context) JsonFieldResponsePtrOutput {
	return o
}

func (o JsonFieldResponsePtrOutput) Elem() JsonFieldResponseOutput {
	return o.ApplyT(func(v *JsonFieldResponse) JsonFieldResponse { return *v }).(JsonFieldResponseOutput)
}

// Name of a field in the input event schema that's to be used as the source of a mapping.
func (o JsonFieldResponsePtrOutput) SourceField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonFieldResponse) *string {
		if v == nil {
			return nil
		}
		return v.SourceField
	}).(pulumi.StringPtrOutput)
}

// This is used to express the source of an input schema mapping for a single target field
// in the Event Grid Event schema. This is currently used in the mappings for the 'subject',
// 'eventtype' and 'dataversion' properties. This represents a field in the input event schema
// along with a default value to be used, and at least one of these two properties should be provided.
type JsonFieldWithDefault struct {
	// The default value to be used for mapping when a SourceField is not provided or if there's no property with the specified name in the published JSON event payload.
	DefaultValue *string `pulumi:"defaultValue"`
	// Name of a field in the input event schema that's to be used as the source of a mapping.
	SourceField *string `pulumi:"sourceField"`
}

// JsonFieldWithDefaultInput is an input type that accepts JsonFieldWithDefaultArgs and JsonFieldWithDefaultOutput values.
// You can construct a concrete instance of `JsonFieldWithDefaultInput` via:
//
//          JsonFieldWithDefaultArgs{...}
type JsonFieldWithDefaultInput interface {
	pulumi.Input

	ToJsonFieldWithDefaultOutput() JsonFieldWithDefaultOutput
	ToJsonFieldWithDefaultOutputWithContext(context.Context) JsonFieldWithDefaultOutput
}

// This is used to express the source of an input schema mapping for a single target field
// in the Event Grid Event schema. This is currently used in the mappings for the 'subject',
// 'eventtype' and 'dataversion' properties. This represents a field in the input event schema
// along with a default value to be used, and at least one of these two properties should be provided.
type JsonFieldWithDefaultArgs struct {
	// The default value to be used for mapping when a SourceField is not provided or if there's no property with the specified name in the published JSON event payload.
	DefaultValue pulumi.StringPtrInput `pulumi:"defaultValue"`
	// Name of a field in the input event schema that's to be used as the source of a mapping.
	SourceField pulumi.StringPtrInput `pulumi:"sourceField"`
}

func (JsonFieldWithDefaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFieldWithDefault)(nil)).Elem()
}

func (i JsonFieldWithDefaultArgs) ToJsonFieldWithDefaultOutput() JsonFieldWithDefaultOutput {
	return i.ToJsonFieldWithDefaultOutputWithContext(context.Background())
}

func (i JsonFieldWithDefaultArgs) ToJsonFieldWithDefaultOutputWithContext(ctx context.Context) JsonFieldWithDefaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFieldWithDefaultOutput)
}

func (i JsonFieldWithDefaultArgs) ToJsonFieldWithDefaultPtrOutput() JsonFieldWithDefaultPtrOutput {
	return i.ToJsonFieldWithDefaultPtrOutputWithContext(context.Background())
}

func (i JsonFieldWithDefaultArgs) ToJsonFieldWithDefaultPtrOutputWithContext(ctx context.Context) JsonFieldWithDefaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFieldWithDefaultOutput).ToJsonFieldWithDefaultPtrOutputWithContext(ctx)
}

// JsonFieldWithDefaultPtrInput is an input type that accepts JsonFieldWithDefaultArgs, JsonFieldWithDefaultPtr and JsonFieldWithDefaultPtrOutput values.
// You can construct a concrete instance of `JsonFieldWithDefaultPtrInput` via:
//
//          JsonFieldWithDefaultArgs{...}
//
//  or:
//
//          nil
type JsonFieldWithDefaultPtrInput interface {
	pulumi.Input

	ToJsonFieldWithDefaultPtrOutput() JsonFieldWithDefaultPtrOutput
	ToJsonFieldWithDefaultPtrOutputWithContext(context.Context) JsonFieldWithDefaultPtrOutput
}

type jsonFieldWithDefaultPtrType JsonFieldWithDefaultArgs

func JsonFieldWithDefaultPtr(v *JsonFieldWithDefaultArgs) JsonFieldWithDefaultPtrInput {
	return (*jsonFieldWithDefaultPtrType)(v)
}

func (*jsonFieldWithDefaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonFieldWithDefault)(nil)).Elem()
}

func (i *jsonFieldWithDefaultPtrType) ToJsonFieldWithDefaultPtrOutput() JsonFieldWithDefaultPtrOutput {
	return i.ToJsonFieldWithDefaultPtrOutputWithContext(context.Background())
}

func (i *jsonFieldWithDefaultPtrType) ToJsonFieldWithDefaultPtrOutputWithContext(ctx context.Context) JsonFieldWithDefaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFieldWithDefaultPtrOutput)
}

// This is used to express the source of an input schema mapping for a single target field
// in the Event Grid Event schema. This is currently used in the mappings for the 'subject',
// 'eventtype' and 'dataversion' properties. This represents a field in the input event schema
// along with a default value to be used, and at least one of these two properties should be provided.
type JsonFieldWithDefaultResponse struct {
	// The default value to be used for mapping when a SourceField is not provided or if there's no property with the specified name in the published JSON event payload.
	DefaultValue *string `pulumi:"defaultValue"`
	// Name of a field in the input event schema that's to be used as the source of a mapping.
	SourceField *string `pulumi:"sourceField"`
}

// This is used to express the source of an input schema mapping for a single target field
// in the Event Grid Event schema. This is currently used in the mappings for the 'subject',
// 'eventtype' and 'dataversion' properties. This represents a field in the input event schema
// along with a default value to be used, and at least one of these two properties should be provided.
type JsonFieldWithDefaultResponseOutput struct{ *pulumi.OutputState }

func (JsonFieldWithDefaultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFieldWithDefaultResponse)(nil)).Elem()
}

func (o JsonFieldWithDefaultResponseOutput) ToJsonFieldWithDefaultResponseOutput() JsonFieldWithDefaultResponseOutput {
	return o
}

func (o JsonFieldWithDefaultResponseOutput) ToJsonFieldWithDefaultResponseOutputWithContext(ctx context.Context) JsonFieldWithDefaultResponseOutput {
	return o
}

func (o JsonFieldWithDefaultResponseOutput) ToJsonFieldWithDefaultResponsePtrOutput() JsonFieldWithDefaultResponsePtrOutput {
	return o.ToJsonFieldWithDefaultResponsePtrOutputWithContext(context.Background())
}

func (o JsonFieldWithDefaultResponseOutput) ToJsonFieldWithDefaultResponsePtrOutputWithContext(ctx context.Context) JsonFieldWithDefaultResponsePtrOutput {
	return o.ApplyT(func(v JsonFieldWithDefaultResponse) *JsonFieldWithDefaultResponse {
		return &v
	}).(JsonFieldWithDefaultResponsePtrOutput)
}

// The default value to be used for mapping when a SourceField is not provided or if there's no property with the specified name in the published JSON event payload.
func (o JsonFieldWithDefaultResponseOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonFieldWithDefaultResponse) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// Name of a field in the input event schema that's to be used as the source of a mapping.
func (o JsonFieldWithDefaultResponseOutput) SourceField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonFieldWithDefaultResponse) *string { return v.SourceField }).(pulumi.StringPtrOutput)
}

type JsonFieldWithDefaultResponsePtrOutput struct{ *pulumi.OutputState }

func (JsonFieldWithDefaultResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonFieldWithDefaultResponse)(nil)).Elem()
}

func (o JsonFieldWithDefaultResponsePtrOutput) ToJsonFieldWithDefaultResponsePtrOutput() JsonFieldWithDefaultResponsePtrOutput {
	return o
}

func (o JsonFieldWithDefaultResponsePtrOutput) ToJsonFieldWithDefaultResponsePtrOutputWithContext(ctx context.Context) JsonFieldWithDefaultResponsePtrOutput {
	return o
}

func (o JsonFieldWithDefaultResponsePtrOutput) Elem() JsonFieldWithDefaultResponseOutput {
	return o.ApplyT(func(v *JsonFieldWithDefaultResponse) JsonFieldWithDefaultResponse { return *v }).(JsonFieldWithDefaultResponseOutput)
}

// The default value to be used for mapping when a SourceField is not provided or if there's no property with the specified name in the published JSON event payload.
func (o JsonFieldWithDefaultResponsePtrOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonFieldWithDefaultResponse) *string {
		if v == nil {
			return nil
		}
		return v.DefaultValue
	}).(pulumi.StringPtrOutput)
}

// Name of a field in the input event schema that's to be used as the source of a mapping.
func (o JsonFieldWithDefaultResponsePtrOutput) SourceField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonFieldWithDefaultResponse) *string {
		if v == nil {
			return nil
		}
		return v.SourceField
	}).(pulumi.StringPtrOutput)
}

// This enables publishing to Event Grid using a custom input schema. This can be used to map properties from a custom input JSON schema to the Event Grid event schema.
type JsonInputSchemaMapping struct {
	// The mapping information for the DataVersion property of the Event Grid Event.
	DataVersion *JsonFieldWithDefault `pulumi:"dataVersion"`
	// The mapping information for the EventTime property of the Event Grid Event.
	EventTime *JsonField `pulumi:"eventTime"`
	// The mapping information for the EventType property of the Event Grid Event.
	EventType *JsonFieldWithDefault `pulumi:"eventType"`
	// The mapping information for the Id property of the Event Grid Event.
	Id *JsonField `pulumi:"id"`
	// Type of the custom mapping
	InputSchemaMappingType string `pulumi:"inputSchemaMappingType"`
	// The mapping information for the Subject property of the Event Grid Event.
	Subject *JsonFieldWithDefault `pulumi:"subject"`
	// The mapping information for the Topic property of the Event Grid Event.
	Topic *JsonField `pulumi:"topic"`
}

// JsonInputSchemaMappingInput is an input type that accepts JsonInputSchemaMappingArgs and JsonInputSchemaMappingOutput values.
// You can construct a concrete instance of `JsonInputSchemaMappingInput` via:
//
//          JsonInputSchemaMappingArgs{...}
type JsonInputSchemaMappingInput interface {
	pulumi.Input

	ToJsonInputSchemaMappingOutput() JsonInputSchemaMappingOutput
	ToJsonInputSchemaMappingOutputWithContext(context.Context) JsonInputSchemaMappingOutput
}

// This enables publishing to Event Grid using a custom input schema. This can be used to map properties from a custom input JSON schema to the Event Grid event schema.
type JsonInputSchemaMappingArgs struct {
	// The mapping information for the DataVersion property of the Event Grid Event.
	DataVersion JsonFieldWithDefaultPtrInput `pulumi:"dataVersion"`
	// The mapping information for the EventTime property of the Event Grid Event.
	EventTime JsonFieldPtrInput `pulumi:"eventTime"`
	// The mapping information for the EventType property of the Event Grid Event.
	EventType JsonFieldWithDefaultPtrInput `pulumi:"eventType"`
	// The mapping information for the Id property of the Event Grid Event.
	Id JsonFieldPtrInput `pulumi:"id"`
	// Type of the custom mapping
	InputSchemaMappingType pulumi.StringInput `pulumi:"inputSchemaMappingType"`
	// The mapping information for the Subject property of the Event Grid Event.
	Subject JsonFieldWithDefaultPtrInput `pulumi:"subject"`
	// The mapping information for the Topic property of the Event Grid Event.
	Topic JsonFieldPtrInput `pulumi:"topic"`
}

func (JsonInputSchemaMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonInputSchemaMapping)(nil)).Elem()
}

func (i JsonInputSchemaMappingArgs) ToJsonInputSchemaMappingOutput() JsonInputSchemaMappingOutput {
	return i.ToJsonInputSchemaMappingOutputWithContext(context.Background())
}

func (i JsonInputSchemaMappingArgs) ToJsonInputSchemaMappingOutputWithContext(ctx context.Context) JsonInputSchemaMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonInputSchemaMappingOutput)
}

func (i JsonInputSchemaMappingArgs) ToJsonInputSchemaMappingPtrOutput() JsonInputSchemaMappingPtrOutput {
	return i.ToJsonInputSchemaMappingPtrOutputWithContext(context.Background())
}

func (i JsonInputSchemaMappingArgs) ToJsonInputSchemaMappingPtrOutputWithContext(ctx context.Context) JsonInputSchemaMappingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonInputSchemaMappingOutput).ToJsonInputSchemaMappingPtrOutputWithContext(ctx)
}

// JsonInputSchemaMappingPtrInput is an input type that accepts JsonInputSchemaMappingArgs, JsonInputSchemaMappingPtr and JsonInputSchemaMappingPtrOutput values.
// You can construct a concrete instance of `JsonInputSchemaMappingPtrInput` via:
//
//          JsonInputSchemaMappingArgs{...}
//
//  or:
//
//          nil
type JsonInputSchemaMappingPtrInput interface {
	pulumi.Input

	ToJsonInputSchemaMappingPtrOutput() JsonInputSchemaMappingPtrOutput
	ToJsonInputSchemaMappingPtrOutputWithContext(context.Context) JsonInputSchemaMappingPtrOutput
}

type jsonInputSchemaMappingPtrType JsonInputSchemaMappingArgs

func JsonInputSchemaMappingPtr(v *JsonInputSchemaMappingArgs) JsonInputSchemaMappingPtrInput {
	return (*jsonInputSchemaMappingPtrType)(v)
}

func (*jsonInputSchemaMappingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonInputSchemaMapping)(nil)).Elem()
}

func (i *jsonInputSchemaMappingPtrType) ToJsonInputSchemaMappingPtrOutput() JsonInputSchemaMappingPtrOutput {
	return i.ToJsonInputSchemaMappingPtrOutputWithContext(context.Background())
}

func (i *jsonInputSchemaMappingPtrType) ToJsonInputSchemaMappingPtrOutputWithContext(ctx context.Context) JsonInputSchemaMappingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonInputSchemaMappingPtrOutput)
}

// This enables publishing to Event Grid using a custom input schema. This can be used to map properties from a custom input JSON schema to the Event Grid event schema.
type JsonInputSchemaMappingResponse struct {
	// The mapping information for the DataVersion property of the Event Grid Event.
	DataVersion *JsonFieldWithDefaultResponse `pulumi:"dataVersion"`
	// The mapping information for the EventTime property of the Event Grid Event.
	EventTime *JsonFieldResponse `pulumi:"eventTime"`
	// The mapping information for the EventType property of the Event Grid Event.
	EventType *JsonFieldWithDefaultResponse `pulumi:"eventType"`
	// The mapping information for the Id property of the Event Grid Event.
	Id *JsonFieldResponse `pulumi:"id"`
	// Type of the custom mapping
	InputSchemaMappingType string `pulumi:"inputSchemaMappingType"`
	// The mapping information for the Subject property of the Event Grid Event.
	Subject *JsonFieldWithDefaultResponse `pulumi:"subject"`
	// The mapping information for the Topic property of the Event Grid Event.
	Topic *JsonFieldResponse `pulumi:"topic"`
}

// This enables publishing to Event Grid using a custom input schema. This can be used to map properties from a custom input JSON schema to the Event Grid event schema.
type JsonInputSchemaMappingResponseOutput struct{ *pulumi.OutputState }

func (JsonInputSchemaMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonInputSchemaMappingResponse)(nil)).Elem()
}

func (o JsonInputSchemaMappingResponseOutput) ToJsonInputSchemaMappingResponseOutput() JsonInputSchemaMappingResponseOutput {
	return o
}

func (o JsonInputSchemaMappingResponseOutput) ToJsonInputSchemaMappingResponseOutputWithContext(ctx context.Context) JsonInputSchemaMappingResponseOutput {
	return o
}

func (o JsonInputSchemaMappingResponseOutput) ToJsonInputSchemaMappingResponsePtrOutput() JsonInputSchemaMappingResponsePtrOutput {
	return o.ToJsonInputSchemaMappingResponsePtrOutputWithContext(context.Background())
}

func (o JsonInputSchemaMappingResponseOutput) ToJsonInputSchemaMappingResponsePtrOutputWithContext(ctx context.Context) JsonInputSchemaMappingResponsePtrOutput {
	return o.ApplyT(func(v JsonInputSchemaMappingResponse) *JsonInputSchemaMappingResponse {
		return &v
	}).(JsonInputSchemaMappingResponsePtrOutput)
}

// The mapping information for the DataVersion property of the Event Grid Event.
func (o JsonInputSchemaMappingResponseOutput) DataVersion() JsonFieldWithDefaultResponsePtrOutput {
	return o.ApplyT(func(v JsonInputSchemaMappingResponse) *JsonFieldWithDefaultResponse { return v.DataVersion }).(JsonFieldWithDefaultResponsePtrOutput)
}

// The mapping information for the EventTime property of the Event Grid Event.
func (o JsonInputSchemaMappingResponseOutput) EventTime() JsonFieldResponsePtrOutput {
	return o.ApplyT(func(v JsonInputSchemaMappingResponse) *JsonFieldResponse { return v.EventTime }).(JsonFieldResponsePtrOutput)
}

// The mapping information for the EventType property of the Event Grid Event.
func (o JsonInputSchemaMappingResponseOutput) EventType() JsonFieldWithDefaultResponsePtrOutput {
	return o.ApplyT(func(v JsonInputSchemaMappingResponse) *JsonFieldWithDefaultResponse { return v.EventType }).(JsonFieldWithDefaultResponsePtrOutput)
}

// The mapping information for the Id property of the Event Grid Event.
func (o JsonInputSchemaMappingResponseOutput) Id() JsonFieldResponsePtrOutput {
	return o.ApplyT(func(v JsonInputSchemaMappingResponse) *JsonFieldResponse { return v.Id }).(JsonFieldResponsePtrOutput)
}

// Type of the custom mapping
func (o JsonInputSchemaMappingResponseOutput) InputSchemaMappingType() pulumi.StringOutput {
	return o.ApplyT(func(v JsonInputSchemaMappingResponse) string { return v.InputSchemaMappingType }).(pulumi.StringOutput)
}

// The mapping information for the Subject property of the Event Grid Event.
func (o JsonInputSchemaMappingResponseOutput) Subject() JsonFieldWithDefaultResponsePtrOutput {
	return o.ApplyT(func(v JsonInputSchemaMappingResponse) *JsonFieldWithDefaultResponse { return v.Subject }).(JsonFieldWithDefaultResponsePtrOutput)
}

// The mapping information for the Topic property of the Event Grid Event.
func (o JsonInputSchemaMappingResponseOutput) Topic() JsonFieldResponsePtrOutput {
	return o.ApplyT(func(v JsonInputSchemaMappingResponse) *JsonFieldResponse { return v.Topic }).(JsonFieldResponsePtrOutput)
}

type JsonInputSchemaMappingResponsePtrOutput struct{ *pulumi.OutputState }

func (JsonInputSchemaMappingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonInputSchemaMappingResponse)(nil)).Elem()
}

func (o JsonInputSchemaMappingResponsePtrOutput) ToJsonInputSchemaMappingResponsePtrOutput() JsonInputSchemaMappingResponsePtrOutput {
	return o
}

func (o JsonInputSchemaMappingResponsePtrOutput) ToJsonInputSchemaMappingResponsePtrOutputWithContext(ctx context.Context) JsonInputSchemaMappingResponsePtrOutput {
	return o
}

func (o JsonInputSchemaMappingResponsePtrOutput) Elem() JsonInputSchemaMappingResponseOutput {
	return o.ApplyT(func(v *JsonInputSchemaMappingResponse) JsonInputSchemaMappingResponse { return *v }).(JsonInputSchemaMappingResponseOutput)
}

// The mapping information for the DataVersion property of the Event Grid Event.
func (o JsonInputSchemaMappingResponsePtrOutput) DataVersion() JsonFieldWithDefaultResponsePtrOutput {
	return o.ApplyT(func(v *JsonInputSchemaMappingResponse) *JsonFieldWithDefaultResponse {
		if v == nil {
			return nil
		}
		return v.DataVersion
	}).(JsonFieldWithDefaultResponsePtrOutput)
}

// The mapping information for the EventTime property of the Event Grid Event.
func (o JsonInputSchemaMappingResponsePtrOutput) EventTime() JsonFieldResponsePtrOutput {
	return o.ApplyT(func(v *JsonInputSchemaMappingResponse) *JsonFieldResponse {
		if v == nil {
			return nil
		}
		return v.EventTime
	}).(JsonFieldResponsePtrOutput)
}

// The mapping information for the EventType property of the Event Grid Event.
func (o JsonInputSchemaMappingResponsePtrOutput) EventType() JsonFieldWithDefaultResponsePtrOutput {
	return o.ApplyT(func(v *JsonInputSchemaMappingResponse) *JsonFieldWithDefaultResponse {
		if v == nil {
			return nil
		}
		return v.EventType
	}).(JsonFieldWithDefaultResponsePtrOutput)
}

// The mapping information for the Id property of the Event Grid Event.
func (o JsonInputSchemaMappingResponsePtrOutput) Id() JsonFieldResponsePtrOutput {
	return o.ApplyT(func(v *JsonInputSchemaMappingResponse) *JsonFieldResponse {
		if v == nil {
			return nil
		}
		return v.Id
	}).(JsonFieldResponsePtrOutput)
}

// Type of the custom mapping
func (o JsonInputSchemaMappingResponsePtrOutput) InputSchemaMappingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonInputSchemaMappingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.InputSchemaMappingType
	}).(pulumi.StringPtrOutput)
}

// The mapping information for the Subject property of the Event Grid Event.
func (o JsonInputSchemaMappingResponsePtrOutput) Subject() JsonFieldWithDefaultResponsePtrOutput {
	return o.ApplyT(func(v *JsonInputSchemaMappingResponse) *JsonFieldWithDefaultResponse {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(JsonFieldWithDefaultResponsePtrOutput)
}

// The mapping information for the Topic property of the Event Grid Event.
func (o JsonInputSchemaMappingResponsePtrOutput) Topic() JsonFieldResponsePtrOutput {
	return o.ApplyT(func(v *JsonInputSchemaMappingResponse) *JsonFieldResponse {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(JsonFieldResponsePtrOutput)
}

// NumberGreaterThan Advanced Filter.
type NumberGreaterThanAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberGreaterThanAdvancedFilterInput is an input type that accepts NumberGreaterThanAdvancedFilterArgs and NumberGreaterThanAdvancedFilterOutput values.
// You can construct a concrete instance of `NumberGreaterThanAdvancedFilterInput` via:
//
//          NumberGreaterThanAdvancedFilterArgs{...}
type NumberGreaterThanAdvancedFilterInput interface {
	pulumi.Input

	ToNumberGreaterThanAdvancedFilterOutput() NumberGreaterThanAdvancedFilterOutput
	ToNumberGreaterThanAdvancedFilterOutputWithContext(context.Context) NumberGreaterThanAdvancedFilterOutput
}

// NumberGreaterThan Advanced Filter.
type NumberGreaterThanAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The filter value.
	Value pulumi.Float64PtrInput `pulumi:"value"`
}

func (NumberGreaterThanAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberGreaterThanAdvancedFilter)(nil)).Elem()
}

func (i NumberGreaterThanAdvancedFilterArgs) ToNumberGreaterThanAdvancedFilterOutput() NumberGreaterThanAdvancedFilterOutput {
	return i.ToNumberGreaterThanAdvancedFilterOutputWithContext(context.Background())
}

func (i NumberGreaterThanAdvancedFilterArgs) ToNumberGreaterThanAdvancedFilterOutputWithContext(ctx context.Context) NumberGreaterThanAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumberGreaterThanAdvancedFilterOutput)
}

// NumberGreaterThan Advanced Filter.
type NumberGreaterThanAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberGreaterThan Advanced Filter.
type NumberGreaterThanAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (NumberGreaterThanAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberGreaterThanAdvancedFilterResponse)(nil)).Elem()
}

func (o NumberGreaterThanAdvancedFilterResponseOutput) ToNumberGreaterThanAdvancedFilterResponseOutput() NumberGreaterThanAdvancedFilterResponseOutput {
	return o
}

func (o NumberGreaterThanAdvancedFilterResponseOutput) ToNumberGreaterThanAdvancedFilterResponseOutputWithContext(ctx context.Context) NumberGreaterThanAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberGreaterThanAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberGreaterThanAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
func (o NumberGreaterThanAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberGreaterThanAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The filter value.
func (o NumberGreaterThanAdvancedFilterResponseOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NumberGreaterThanAdvancedFilterResponse) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

// NumberGreaterThanOrEquals Advanced Filter.
type NumberGreaterThanOrEqualsAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberGreaterThanOrEqualsAdvancedFilterInput is an input type that accepts NumberGreaterThanOrEqualsAdvancedFilterArgs and NumberGreaterThanOrEqualsAdvancedFilterOutput values.
// You can construct a concrete instance of `NumberGreaterThanOrEqualsAdvancedFilterInput` via:
//
//          NumberGreaterThanOrEqualsAdvancedFilterArgs{...}
type NumberGreaterThanOrEqualsAdvancedFilterInput interface {
	pulumi.Input

	ToNumberGreaterThanOrEqualsAdvancedFilterOutput() NumberGreaterThanOrEqualsAdvancedFilterOutput
	ToNumberGreaterThanOrEqualsAdvancedFilterOutputWithContext(context.Context) NumberGreaterThanOrEqualsAdvancedFilterOutput
}

// NumberGreaterThanOrEquals Advanced Filter.
type NumberGreaterThanOrEqualsAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The filter value.
	Value pulumi.Float64PtrInput `pulumi:"value"`
}

func (NumberGreaterThanOrEqualsAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberGreaterThanOrEqualsAdvancedFilter)(nil)).Elem()
}

func (i NumberGreaterThanOrEqualsAdvancedFilterArgs) ToNumberGreaterThanOrEqualsAdvancedFilterOutput() NumberGreaterThanOrEqualsAdvancedFilterOutput {
	return i.ToNumberGreaterThanOrEqualsAdvancedFilterOutputWithContext(context.Background())
}

func (i NumberGreaterThanOrEqualsAdvancedFilterArgs) ToNumberGreaterThanOrEqualsAdvancedFilterOutputWithContext(ctx context.Context) NumberGreaterThanOrEqualsAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumberGreaterThanOrEqualsAdvancedFilterOutput)
}

// NumberGreaterThanOrEquals Advanced Filter.
type NumberGreaterThanOrEqualsAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberGreaterThanOrEquals Advanced Filter.
type NumberGreaterThanOrEqualsAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (NumberGreaterThanOrEqualsAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberGreaterThanOrEqualsAdvancedFilterResponse)(nil)).Elem()
}

func (o NumberGreaterThanOrEqualsAdvancedFilterResponseOutput) ToNumberGreaterThanOrEqualsAdvancedFilterResponseOutput() NumberGreaterThanOrEqualsAdvancedFilterResponseOutput {
	return o
}

func (o NumberGreaterThanOrEqualsAdvancedFilterResponseOutput) ToNumberGreaterThanOrEqualsAdvancedFilterResponseOutputWithContext(ctx context.Context) NumberGreaterThanOrEqualsAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberGreaterThanOrEqualsAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberGreaterThanOrEqualsAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
func (o NumberGreaterThanOrEqualsAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberGreaterThanOrEqualsAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The filter value.
func (o NumberGreaterThanOrEqualsAdvancedFilterResponseOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NumberGreaterThanOrEqualsAdvancedFilterResponse) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

// NumberIn Advanced Filter.
type NumberInAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []float64 `pulumi:"values"`
}

// NumberInAdvancedFilterInput is an input type that accepts NumberInAdvancedFilterArgs and NumberInAdvancedFilterOutput values.
// You can construct a concrete instance of `NumberInAdvancedFilterInput` via:
//
//          NumberInAdvancedFilterArgs{...}
type NumberInAdvancedFilterInput interface {
	pulumi.Input

	ToNumberInAdvancedFilterOutput() NumberInAdvancedFilterOutput
	ToNumberInAdvancedFilterOutputWithContext(context.Context) NumberInAdvancedFilterOutput
}

// NumberIn Advanced Filter.
type NumberInAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.Float64ArrayInput `pulumi:"values"`
}

func (NumberInAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberInAdvancedFilter)(nil)).Elem()
}

func (i NumberInAdvancedFilterArgs) ToNumberInAdvancedFilterOutput() NumberInAdvancedFilterOutput {
	return i.ToNumberInAdvancedFilterOutputWithContext(context.Background())
}

func (i NumberInAdvancedFilterArgs) ToNumberInAdvancedFilterOutputWithContext(ctx context.Context) NumberInAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumberInAdvancedFilterOutput)
}

// NumberIn Advanced Filter.
type NumberInAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []float64 `pulumi:"values"`
}

// NumberIn Advanced Filter.
type NumberInAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (NumberInAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberInAdvancedFilterResponse)(nil)).Elem()
}

func (o NumberInAdvancedFilterResponseOutput) ToNumberInAdvancedFilterResponseOutput() NumberInAdvancedFilterResponseOutput {
	return o
}

func (o NumberInAdvancedFilterResponseOutput) ToNumberInAdvancedFilterResponseOutputWithContext(ctx context.Context) NumberInAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberInAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberInAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
func (o NumberInAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberInAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o NumberInAdvancedFilterResponseOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v NumberInAdvancedFilterResponse) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

// NumberLessThan Advanced Filter.
type NumberLessThanAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberLessThanAdvancedFilterInput is an input type that accepts NumberLessThanAdvancedFilterArgs and NumberLessThanAdvancedFilterOutput values.
// You can construct a concrete instance of `NumberLessThanAdvancedFilterInput` via:
//
//          NumberLessThanAdvancedFilterArgs{...}
type NumberLessThanAdvancedFilterInput interface {
	pulumi.Input

	ToNumberLessThanAdvancedFilterOutput() NumberLessThanAdvancedFilterOutput
	ToNumberLessThanAdvancedFilterOutputWithContext(context.Context) NumberLessThanAdvancedFilterOutput
}

// NumberLessThan Advanced Filter.
type NumberLessThanAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The filter value.
	Value pulumi.Float64PtrInput `pulumi:"value"`
}

func (NumberLessThanAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberLessThanAdvancedFilter)(nil)).Elem()
}

func (i NumberLessThanAdvancedFilterArgs) ToNumberLessThanAdvancedFilterOutput() NumberLessThanAdvancedFilterOutput {
	return i.ToNumberLessThanAdvancedFilterOutputWithContext(context.Background())
}

func (i NumberLessThanAdvancedFilterArgs) ToNumberLessThanAdvancedFilterOutputWithContext(ctx context.Context) NumberLessThanAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumberLessThanAdvancedFilterOutput)
}

// NumberLessThan Advanced Filter.
type NumberLessThanAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberLessThan Advanced Filter.
type NumberLessThanAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (NumberLessThanAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberLessThanAdvancedFilterResponse)(nil)).Elem()
}

func (o NumberLessThanAdvancedFilterResponseOutput) ToNumberLessThanAdvancedFilterResponseOutput() NumberLessThanAdvancedFilterResponseOutput {
	return o
}

func (o NumberLessThanAdvancedFilterResponseOutput) ToNumberLessThanAdvancedFilterResponseOutputWithContext(ctx context.Context) NumberLessThanAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberLessThanAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberLessThanAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
func (o NumberLessThanAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberLessThanAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The filter value.
func (o NumberLessThanAdvancedFilterResponseOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NumberLessThanAdvancedFilterResponse) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

// NumberLessThanOrEquals Advanced Filter.
type NumberLessThanOrEqualsAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberLessThanOrEqualsAdvancedFilterInput is an input type that accepts NumberLessThanOrEqualsAdvancedFilterArgs and NumberLessThanOrEqualsAdvancedFilterOutput values.
// You can construct a concrete instance of `NumberLessThanOrEqualsAdvancedFilterInput` via:
//
//          NumberLessThanOrEqualsAdvancedFilterArgs{...}
type NumberLessThanOrEqualsAdvancedFilterInput interface {
	pulumi.Input

	ToNumberLessThanOrEqualsAdvancedFilterOutput() NumberLessThanOrEqualsAdvancedFilterOutput
	ToNumberLessThanOrEqualsAdvancedFilterOutputWithContext(context.Context) NumberLessThanOrEqualsAdvancedFilterOutput
}

// NumberLessThanOrEquals Advanced Filter.
type NumberLessThanOrEqualsAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The filter value.
	Value pulumi.Float64PtrInput `pulumi:"value"`
}

func (NumberLessThanOrEqualsAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberLessThanOrEqualsAdvancedFilter)(nil)).Elem()
}

func (i NumberLessThanOrEqualsAdvancedFilterArgs) ToNumberLessThanOrEqualsAdvancedFilterOutput() NumberLessThanOrEqualsAdvancedFilterOutput {
	return i.ToNumberLessThanOrEqualsAdvancedFilterOutputWithContext(context.Background())
}

func (i NumberLessThanOrEqualsAdvancedFilterArgs) ToNumberLessThanOrEqualsAdvancedFilterOutputWithContext(ctx context.Context) NumberLessThanOrEqualsAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumberLessThanOrEqualsAdvancedFilterOutput)
}

// NumberLessThanOrEquals Advanced Filter.
type NumberLessThanOrEqualsAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The filter value.
	Value *float64 `pulumi:"value"`
}

// NumberLessThanOrEquals Advanced Filter.
type NumberLessThanOrEqualsAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (NumberLessThanOrEqualsAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberLessThanOrEqualsAdvancedFilterResponse)(nil)).Elem()
}

func (o NumberLessThanOrEqualsAdvancedFilterResponseOutput) ToNumberLessThanOrEqualsAdvancedFilterResponseOutput() NumberLessThanOrEqualsAdvancedFilterResponseOutput {
	return o
}

func (o NumberLessThanOrEqualsAdvancedFilterResponseOutput) ToNumberLessThanOrEqualsAdvancedFilterResponseOutputWithContext(ctx context.Context) NumberLessThanOrEqualsAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberLessThanOrEqualsAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberLessThanOrEqualsAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
func (o NumberLessThanOrEqualsAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberLessThanOrEqualsAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The filter value.
func (o NumberLessThanOrEqualsAdvancedFilterResponseOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NumberLessThanOrEqualsAdvancedFilterResponse) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

// NumberNotIn Advanced Filter.
type NumberNotInAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []float64 `pulumi:"values"`
}

// NumberNotInAdvancedFilterInput is an input type that accepts NumberNotInAdvancedFilterArgs and NumberNotInAdvancedFilterOutput values.
// You can construct a concrete instance of `NumberNotInAdvancedFilterInput` via:
//
//          NumberNotInAdvancedFilterArgs{...}
type NumberNotInAdvancedFilterInput interface {
	pulumi.Input

	ToNumberNotInAdvancedFilterOutput() NumberNotInAdvancedFilterOutput
	ToNumberNotInAdvancedFilterOutputWithContext(context.Context) NumberNotInAdvancedFilterOutput
}

// NumberNotIn Advanced Filter.
type NumberNotInAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.Float64ArrayInput `pulumi:"values"`
}

func (NumberNotInAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberNotInAdvancedFilter)(nil)).Elem()
}

func (i NumberNotInAdvancedFilterArgs) ToNumberNotInAdvancedFilterOutput() NumberNotInAdvancedFilterOutput {
	return i.ToNumberNotInAdvancedFilterOutputWithContext(context.Background())
}

func (i NumberNotInAdvancedFilterArgs) ToNumberNotInAdvancedFilterOutputWithContext(ctx context.Context) NumberNotInAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumberNotInAdvancedFilterOutput)
}

// NumberNotIn Advanced Filter.
type NumberNotInAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []float64 `pulumi:"values"`
}

// NumberNotIn Advanced Filter.
type NumberNotInAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (NumberNotInAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumberNotInAdvancedFilterResponse)(nil)).Elem()
}

func (o NumberNotInAdvancedFilterResponseOutput) ToNumberNotInAdvancedFilterResponseOutput() NumberNotInAdvancedFilterResponseOutput {
	return o
}

func (o NumberNotInAdvancedFilterResponseOutput) ToNumberNotInAdvancedFilterResponseOutputWithContext(ctx context.Context) NumberNotInAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o NumberNotInAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NumberNotInAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
func (o NumberNotInAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v NumberNotInAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o NumberNotInAdvancedFilterResponseOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v NumberNotInAdvancedFilterResponse) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

// PrivateEndpoint information.
type PrivateEndpoint struct {
	// The ARM identifier for Private Endpoint.
	Id *string `pulumi:"id"`
}

// PrivateEndpointInput is an input type that accepts PrivateEndpointArgs and PrivateEndpointOutput values.
// You can construct a concrete instance of `PrivateEndpointInput` via:
//
//          PrivateEndpointArgs{...}
type PrivateEndpointInput interface {
	pulumi.Input

	ToPrivateEndpointOutput() PrivateEndpointOutput
	ToPrivateEndpointOutputWithContext(context.Context) PrivateEndpointOutput
}

// PrivateEndpoint information.
type PrivateEndpointArgs struct {
	// The ARM identifier for Private Endpoint.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (PrivateEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpoint)(nil)).Elem()
}

func (i PrivateEndpointArgs) ToPrivateEndpointOutput() PrivateEndpointOutput {
	return i.ToPrivateEndpointOutputWithContext(context.Background())
}

func (i PrivateEndpointArgs) ToPrivateEndpointOutputWithContext(ctx context.Context) PrivateEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutput)
}

func (i PrivateEndpointArgs) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return i.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (i PrivateEndpointArgs) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutput).ToPrivateEndpointPtrOutputWithContext(ctx)
}

// PrivateEndpointPtrInput is an input type that accepts PrivateEndpointArgs, PrivateEndpointPtr and PrivateEndpointPtrOutput values.
// You can construct a concrete instance of `PrivateEndpointPtrInput` via:
//
//          PrivateEndpointArgs{...}
//
//  or:
//
//          nil
type PrivateEndpointPtrInput interface {
	pulumi.Input

	ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput
	ToPrivateEndpointPtrOutputWithContext(context.Context) PrivateEndpointPtrOutput
}

type privateEndpointPtrType PrivateEndpointArgs

func PrivateEndpointPtr(v *PrivateEndpointArgs) PrivateEndpointPtrInput {
	return (*privateEndpointPtrType)(v)
}

func (*privateEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpoint)(nil)).Elem()
}

func (i *privateEndpointPtrType) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return i.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (i *privateEndpointPtrType) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointPtrOutput)
}

type PrivateEndpointConnectionType struct {
	// GroupIds from the private link service resource.
	GroupIds []string `pulumi:"groupIds"`
	// The Private Endpoint resource for this Connection.
	PrivateEndpoint *PrivateEndpoint `pulumi:"privateEndpoint"`
	// Details about the state of the connection.
	PrivateLinkServiceConnectionState *ConnectionState `pulumi:"privateLinkServiceConnectionState"`
	// Provisioning state of the Private Endpoint Connection.
	ProvisioningState *string `pulumi:"provisioningState"`
}

// PrivateEndpointConnectionTypeInput is an input type that accepts PrivateEndpointConnectionTypeArgs and PrivateEndpointConnectionTypeOutput values.
// You can construct a concrete instance of `PrivateEndpointConnectionTypeInput` via:
//
//          PrivateEndpointConnectionTypeArgs{...}
type PrivateEndpointConnectionTypeInput interface {
	pulumi.Input

	ToPrivateEndpointConnectionTypeOutput() PrivateEndpointConnectionTypeOutput
	ToPrivateEndpointConnectionTypeOutputWithContext(context.Context) PrivateEndpointConnectionTypeOutput
}

type PrivateEndpointConnectionTypeArgs struct {
	// GroupIds from the private link service resource.
	GroupIds pulumi.StringArrayInput `pulumi:"groupIds"`
	// The Private Endpoint resource for this Connection.
	PrivateEndpoint PrivateEndpointPtrInput `pulumi:"privateEndpoint"`
	// Details about the state of the connection.
	PrivateLinkServiceConnectionState ConnectionStatePtrInput `pulumi:"privateLinkServiceConnectionState"`
	// Provisioning state of the Private Endpoint Connection.
	ProvisioningState pulumi.StringPtrInput `pulumi:"provisioningState"`
}

func (PrivateEndpointConnectionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionType)(nil)).Elem()
}

func (i PrivateEndpointConnectionTypeArgs) ToPrivateEndpointConnectionTypeOutput() PrivateEndpointConnectionTypeOutput {
	return i.ToPrivateEndpointConnectionTypeOutputWithContext(context.Background())
}

func (i PrivateEndpointConnectionTypeArgs) ToPrivateEndpointConnectionTypeOutputWithContext(ctx context.Context) PrivateEndpointConnectionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointConnectionTypeOutput)
}

// PrivateEndpointConnectionTypeArrayInput is an input type that accepts PrivateEndpointConnectionTypeArray and PrivateEndpointConnectionTypeArrayOutput values.
// You can construct a concrete instance of `PrivateEndpointConnectionTypeArrayInput` via:
//
//          PrivateEndpointConnectionTypeArray{ PrivateEndpointConnectionTypeArgs{...} }
type PrivateEndpointConnectionTypeArrayInput interface {
	pulumi.Input

	ToPrivateEndpointConnectionTypeArrayOutput() PrivateEndpointConnectionTypeArrayOutput
	ToPrivateEndpointConnectionTypeArrayOutputWithContext(context.Context) PrivateEndpointConnectionTypeArrayOutput
}

type PrivateEndpointConnectionTypeArray []PrivateEndpointConnectionTypeInput

func (PrivateEndpointConnectionTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointConnectionType)(nil)).Elem()
}

func (i PrivateEndpointConnectionTypeArray) ToPrivateEndpointConnectionTypeArrayOutput() PrivateEndpointConnectionTypeArrayOutput {
	return i.ToPrivateEndpointConnectionTypeArrayOutputWithContext(context.Background())
}

func (i PrivateEndpointConnectionTypeArray) ToPrivateEndpointConnectionTypeArrayOutputWithContext(ctx context.Context) PrivateEndpointConnectionTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointConnectionTypeArrayOutput)
}

type PrivateEndpointConnectionResponse struct {
	// GroupIds from the private link service resource.
	GroupIds []string `pulumi:"groupIds"`
	// Fully qualified identifier of the resource.
	Id string `pulumi:"id"`
	// Name of the resource.
	Name string `pulumi:"name"`
	// The Private Endpoint resource for this Connection.
	PrivateEndpoint *PrivateEndpointResponse `pulumi:"privateEndpoint"`
	// Details about the state of the connection.
	PrivateLinkServiceConnectionState *ConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	// Provisioning state of the Private Endpoint Connection.
	ProvisioningState *string `pulumi:"provisioningState"`
	// Type of the resource.
	Type string `pulumi:"type"`
}

type PrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutput() PrivateEndpointConnectionResponseOutput {
	return o
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseOutput {
	return o
}

// GroupIds from the private link service resource.
func (o PrivateEndpointConnectionResponseOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// Fully qualified identifier of the resource.
func (o PrivateEndpointConnectionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the resource.
func (o PrivateEndpointConnectionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The Private Endpoint resource for this Connection.
func (o PrivateEndpointConnectionResponseOutput) PrivateEndpoint() PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *PrivateEndpointResponse { return v.PrivateEndpoint }).(PrivateEndpointResponsePtrOutput)
}

// Details about the state of the connection.
func (o PrivateEndpointConnectionResponseOutput) PrivateLinkServiceConnectionState() ConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *ConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(ConnectionStateResponsePtrOutput)
}

// Provisioning state of the Private Endpoint Connection.
func (o PrivateEndpointConnectionResponseOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// Type of the resource.
func (o PrivateEndpointConnectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PrivateEndpointConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutput() PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) Index(i pulumi.IntInput) PrivateEndpointConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateEndpointConnectionResponse {
		return vs[0].([]PrivateEndpointConnectionResponse)[vs[1].(int)]
	}).(PrivateEndpointConnectionResponseOutput)
}

// PrivateEndpoint information.
type PrivateEndpointResponse struct {
	// The ARM identifier for Private Endpoint.
	Id *string `pulumi:"id"`
}

// PrivateEndpoint information.
type PrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o.ToPrivateEndpointResponsePtrOutputWithContext(context.Background())
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) *PrivateEndpointResponse {
		return &v
	}).(PrivateEndpointResponsePtrOutput)
}

// The ARM identifier for Private Endpoint.
func (o PrivateEndpointResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type PrivateEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) Elem() PrivateEndpointResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) PrivateEndpointResponse { return *v }).(PrivateEndpointResponseOutput)
}

// The ARM identifier for Private Endpoint.
func (o PrivateEndpointResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Information about the retry policy for an event subscription.
type RetryPolicy struct {
	// Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes *int `pulumi:"eventTimeToLiveInMinutes"`
	// Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts *int `pulumi:"maxDeliveryAttempts"`
}

// RetryPolicyInput is an input type that accepts RetryPolicyArgs and RetryPolicyOutput values.
// You can construct a concrete instance of `RetryPolicyInput` via:
//
//          RetryPolicyArgs{...}
type RetryPolicyInput interface {
	pulumi.Input

	ToRetryPolicyOutput() RetryPolicyOutput
	ToRetryPolicyOutputWithContext(context.Context) RetryPolicyOutput
}

// Information about the retry policy for an event subscription.
type RetryPolicyArgs struct {
	// Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes pulumi.IntPtrInput `pulumi:"eventTimeToLiveInMinutes"`
	// Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts pulumi.IntPtrInput `pulumi:"maxDeliveryAttempts"`
}

func (RetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicy)(nil)).Elem()
}

func (i RetryPolicyArgs) ToRetryPolicyOutput() RetryPolicyOutput {
	return i.ToRetryPolicyOutputWithContext(context.Background())
}

func (i RetryPolicyArgs) ToRetryPolicyOutputWithContext(ctx context.Context) RetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyOutput)
}

func (i RetryPolicyArgs) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return i.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (i RetryPolicyArgs) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyOutput).ToRetryPolicyPtrOutputWithContext(ctx)
}

// RetryPolicyPtrInput is an input type that accepts RetryPolicyArgs, RetryPolicyPtr and RetryPolicyPtrOutput values.
// You can construct a concrete instance of `RetryPolicyPtrInput` via:
//
//          RetryPolicyArgs{...}
//
//  or:
//
//          nil
type RetryPolicyPtrInput interface {
	pulumi.Input

	ToRetryPolicyPtrOutput() RetryPolicyPtrOutput
	ToRetryPolicyPtrOutputWithContext(context.Context) RetryPolicyPtrOutput
}

type retryPolicyPtrType RetryPolicyArgs

func RetryPolicyPtr(v *RetryPolicyArgs) RetryPolicyPtrInput {
	return (*retryPolicyPtrType)(v)
}

func (*retryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicy)(nil)).Elem()
}

func (i *retryPolicyPtrType) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return i.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *retryPolicyPtrType) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyPtrOutput)
}

// Information about the retry policy for an event subscription.
type RetryPolicyResponse struct {
	// Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes *int `pulumi:"eventTimeToLiveInMinutes"`
	// Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts *int `pulumi:"maxDeliveryAttempts"`
}

// Information about the retry policy for an event subscription.
type RetryPolicyResponseOutput struct{ *pulumi.OutputState }

func (RetryPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicyResponse)(nil)).Elem()
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponseOutput() RetryPolicyResponseOutput {
	return o
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponseOutputWithContext(ctx context.Context) RetryPolicyResponseOutput {
	return o
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput {
	return o.ToRetryPolicyResponsePtrOutputWithContext(context.Background())
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponsePtrOutputWithContext(ctx context.Context) RetryPolicyResponsePtrOutput {
	return o.ApplyT(func(v RetryPolicyResponse) *RetryPolicyResponse {
		return &v
	}).(RetryPolicyResponsePtrOutput)
}

// Time To Live (in minutes) for events.
func (o RetryPolicyResponseOutput) EventTimeToLiveInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryPolicyResponse) *int { return v.EventTimeToLiveInMinutes }).(pulumi.IntPtrOutput)
}

// Maximum number of delivery retry attempts for events.
func (o RetryPolicyResponseOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryPolicyResponse) *int { return v.MaxDeliveryAttempts }).(pulumi.IntPtrOutput)
}

type RetryPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (RetryPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicyResponse)(nil)).Elem()
}

func (o RetryPolicyResponsePtrOutput) ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput {
	return o
}

func (o RetryPolicyResponsePtrOutput) ToRetryPolicyResponsePtrOutputWithContext(ctx context.Context) RetryPolicyResponsePtrOutput {
	return o
}

func (o RetryPolicyResponsePtrOutput) Elem() RetryPolicyResponseOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) RetryPolicyResponse { return *v }).(RetryPolicyResponseOutput)
}

// Time To Live (in minutes) for events.
func (o RetryPolicyResponsePtrOutput) EventTimeToLiveInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.EventTimeToLiveInMinutes
	}).(pulumi.IntPtrOutput)
}

// Maximum number of delivery retry attempts for events.
func (o RetryPolicyResponsePtrOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryAttempts
	}).(pulumi.IntPtrOutput)
}

// Information about the service bus destination for an event subscription.
type ServiceBusQueueEventSubscriptionDestination struct {
	// Type of the endpoint for the event subscription destination.
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of the Service Bus destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// ServiceBusQueueEventSubscriptionDestinationInput is an input type that accepts ServiceBusQueueEventSubscriptionDestinationArgs and ServiceBusQueueEventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `ServiceBusQueueEventSubscriptionDestinationInput` via:
//
//          ServiceBusQueueEventSubscriptionDestinationArgs{...}
type ServiceBusQueueEventSubscriptionDestinationInput interface {
	pulumi.Input

	ToServiceBusQueueEventSubscriptionDestinationOutput() ServiceBusQueueEventSubscriptionDestinationOutput
	ToServiceBusQueueEventSubscriptionDestinationOutputWithContext(context.Context) ServiceBusQueueEventSubscriptionDestinationOutput
}

// Information about the service bus destination for an event subscription.
type ServiceBusQueueEventSubscriptionDestinationArgs struct {
	// Type of the endpoint for the event subscription destination.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of the Service Bus destination of an event subscription.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (ServiceBusQueueEventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBusQueueEventSubscriptionDestination)(nil)).Elem()
}

func (i ServiceBusQueueEventSubscriptionDestinationArgs) ToServiceBusQueueEventSubscriptionDestinationOutput() ServiceBusQueueEventSubscriptionDestinationOutput {
	return i.ToServiceBusQueueEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i ServiceBusQueueEventSubscriptionDestinationArgs) ToServiceBusQueueEventSubscriptionDestinationOutputWithContext(ctx context.Context) ServiceBusQueueEventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceBusQueueEventSubscriptionDestinationOutput)
}

// Information about the service bus destination for an event subscription.
type ServiceBusQueueEventSubscriptionDestinationResponse struct {
	// Type of the endpoint for the event subscription destination.
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of the Service Bus destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// Information about the service bus destination for an event subscription.
type ServiceBusQueueEventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (ServiceBusQueueEventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBusQueueEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o ServiceBusQueueEventSubscriptionDestinationResponseOutput) ToServiceBusQueueEventSubscriptionDestinationResponseOutput() ServiceBusQueueEventSubscriptionDestinationResponseOutput {
	return o
}

func (o ServiceBusQueueEventSubscriptionDestinationResponseOutput) ToServiceBusQueueEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) ServiceBusQueueEventSubscriptionDestinationResponseOutput {
	return o
}

// Type of the endpoint for the event subscription destination.
func (o ServiceBusQueueEventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceBusQueueEventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure Resource Id that represents the endpoint of the Service Bus destination of an event subscription.
func (o ServiceBusQueueEventSubscriptionDestinationResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusQueueEventSubscriptionDestinationResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Information about the service bus topic destination for an event subscription.
type ServiceBusTopicEventSubscriptionDestination struct {
	// Type of the endpoint for the event subscription destination.
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of the Service Bus Topic destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// ServiceBusTopicEventSubscriptionDestinationInput is an input type that accepts ServiceBusTopicEventSubscriptionDestinationArgs and ServiceBusTopicEventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `ServiceBusTopicEventSubscriptionDestinationInput` via:
//
//          ServiceBusTopicEventSubscriptionDestinationArgs{...}
type ServiceBusTopicEventSubscriptionDestinationInput interface {
	pulumi.Input

	ToServiceBusTopicEventSubscriptionDestinationOutput() ServiceBusTopicEventSubscriptionDestinationOutput
	ToServiceBusTopicEventSubscriptionDestinationOutputWithContext(context.Context) ServiceBusTopicEventSubscriptionDestinationOutput
}

// Information about the service bus topic destination for an event subscription.
type ServiceBusTopicEventSubscriptionDestinationArgs struct {
	// Type of the endpoint for the event subscription destination.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of the Service Bus Topic destination of an event subscription.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (ServiceBusTopicEventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBusTopicEventSubscriptionDestination)(nil)).Elem()
}

func (i ServiceBusTopicEventSubscriptionDestinationArgs) ToServiceBusTopicEventSubscriptionDestinationOutput() ServiceBusTopicEventSubscriptionDestinationOutput {
	return i.ToServiceBusTopicEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i ServiceBusTopicEventSubscriptionDestinationArgs) ToServiceBusTopicEventSubscriptionDestinationOutputWithContext(ctx context.Context) ServiceBusTopicEventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceBusTopicEventSubscriptionDestinationOutput)
}

// Information about the service bus topic destination for an event subscription.
type ServiceBusTopicEventSubscriptionDestinationResponse struct {
	// Type of the endpoint for the event subscription destination.
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource Id that represents the endpoint of the Service Bus Topic destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// Information about the service bus topic destination for an event subscription.
type ServiceBusTopicEventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (ServiceBusTopicEventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBusTopicEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o ServiceBusTopicEventSubscriptionDestinationResponseOutput) ToServiceBusTopicEventSubscriptionDestinationResponseOutput() ServiceBusTopicEventSubscriptionDestinationResponseOutput {
	return o
}

func (o ServiceBusTopicEventSubscriptionDestinationResponseOutput) ToServiceBusTopicEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) ServiceBusTopicEventSubscriptionDestinationResponseOutput {
	return o
}

// Type of the endpoint for the event subscription destination.
func (o ServiceBusTopicEventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceBusTopicEventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure Resource Id that represents the endpoint of the Service Bus Topic destination of an event subscription.
func (o ServiceBusTopicEventSubscriptionDestinationResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusTopicEventSubscriptionDestinationResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Information about the storage blob based dead letter destination.
type StorageBlobDeadLetterDestination struct {
	// The name of the Storage blob container that is the destination of the deadletter events
	BlobContainerName *string `pulumi:"blobContainerName"`
	// Type of the endpoint for the dead letter destination
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource ID of the storage account that is the destination of the deadletter events
	ResourceId *string `pulumi:"resourceId"`
}

// StorageBlobDeadLetterDestinationInput is an input type that accepts StorageBlobDeadLetterDestinationArgs and StorageBlobDeadLetterDestinationOutput values.
// You can construct a concrete instance of `StorageBlobDeadLetterDestinationInput` via:
//
//          StorageBlobDeadLetterDestinationArgs{...}
type StorageBlobDeadLetterDestinationInput interface {
	pulumi.Input

	ToStorageBlobDeadLetterDestinationOutput() StorageBlobDeadLetterDestinationOutput
	ToStorageBlobDeadLetterDestinationOutputWithContext(context.Context) StorageBlobDeadLetterDestinationOutput
}

// Information about the storage blob based dead letter destination.
type StorageBlobDeadLetterDestinationArgs struct {
	// The name of the Storage blob container that is the destination of the deadletter events
	BlobContainerName pulumi.StringPtrInput `pulumi:"blobContainerName"`
	// Type of the endpoint for the dead letter destination
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The Azure Resource ID of the storage account that is the destination of the deadletter events
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (StorageBlobDeadLetterDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageBlobDeadLetterDestination)(nil)).Elem()
}

func (i StorageBlobDeadLetterDestinationArgs) ToStorageBlobDeadLetterDestinationOutput() StorageBlobDeadLetterDestinationOutput {
	return i.ToStorageBlobDeadLetterDestinationOutputWithContext(context.Background())
}

func (i StorageBlobDeadLetterDestinationArgs) ToStorageBlobDeadLetterDestinationOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageBlobDeadLetterDestinationOutput)
}

func (i StorageBlobDeadLetterDestinationArgs) ToStorageBlobDeadLetterDestinationPtrOutput() StorageBlobDeadLetterDestinationPtrOutput {
	return i.ToStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (i StorageBlobDeadLetterDestinationArgs) ToStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageBlobDeadLetterDestinationOutput).ToStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx)
}

// StorageBlobDeadLetterDestinationPtrInput is an input type that accepts StorageBlobDeadLetterDestinationArgs, StorageBlobDeadLetterDestinationPtr and StorageBlobDeadLetterDestinationPtrOutput values.
// You can construct a concrete instance of `StorageBlobDeadLetterDestinationPtrInput` via:
//
//          StorageBlobDeadLetterDestinationArgs{...}
//
//  or:
//
//          nil
type StorageBlobDeadLetterDestinationPtrInput interface {
	pulumi.Input

	ToStorageBlobDeadLetterDestinationPtrOutput() StorageBlobDeadLetterDestinationPtrOutput
	ToStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Context) StorageBlobDeadLetterDestinationPtrOutput
}

type storageBlobDeadLetterDestinationPtrType StorageBlobDeadLetterDestinationArgs

func StorageBlobDeadLetterDestinationPtr(v *StorageBlobDeadLetterDestinationArgs) StorageBlobDeadLetterDestinationPtrInput {
	return (*storageBlobDeadLetterDestinationPtrType)(v)
}

func (*storageBlobDeadLetterDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageBlobDeadLetterDestination)(nil)).Elem()
}

func (i *storageBlobDeadLetterDestinationPtrType) ToStorageBlobDeadLetterDestinationPtrOutput() StorageBlobDeadLetterDestinationPtrOutput {
	return i.ToStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (i *storageBlobDeadLetterDestinationPtrType) ToStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageBlobDeadLetterDestinationPtrOutput)
}

// Information about the storage blob based dead letter destination.
type StorageBlobDeadLetterDestinationResponse struct {
	// The name of the Storage blob container that is the destination of the deadletter events
	BlobContainerName *string `pulumi:"blobContainerName"`
	// Type of the endpoint for the dead letter destination
	EndpointType string `pulumi:"endpointType"`
	// The Azure Resource ID of the storage account that is the destination of the deadletter events
	ResourceId *string `pulumi:"resourceId"`
}

// Information about the storage blob based dead letter destination.
type StorageBlobDeadLetterDestinationResponseOutput struct{ *pulumi.OutputState }

func (StorageBlobDeadLetterDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageBlobDeadLetterDestinationResponse)(nil)).Elem()
}

func (o StorageBlobDeadLetterDestinationResponseOutput) ToStorageBlobDeadLetterDestinationResponseOutput() StorageBlobDeadLetterDestinationResponseOutput {
	return o
}

func (o StorageBlobDeadLetterDestinationResponseOutput) ToStorageBlobDeadLetterDestinationResponseOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationResponseOutput {
	return o
}

func (o StorageBlobDeadLetterDestinationResponseOutput) ToStorageBlobDeadLetterDestinationResponsePtrOutput() StorageBlobDeadLetterDestinationResponsePtrOutput {
	return o.ToStorageBlobDeadLetterDestinationResponsePtrOutputWithContext(context.Background())
}

func (o StorageBlobDeadLetterDestinationResponseOutput) ToStorageBlobDeadLetterDestinationResponsePtrOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationResponsePtrOutput {
	return o.ApplyT(func(v StorageBlobDeadLetterDestinationResponse) *StorageBlobDeadLetterDestinationResponse {
		return &v
	}).(StorageBlobDeadLetterDestinationResponsePtrOutput)
}

// The name of the Storage blob container that is the destination of the deadletter events
func (o StorageBlobDeadLetterDestinationResponseOutput) BlobContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobDeadLetterDestinationResponse) *string { return v.BlobContainerName }).(pulumi.StringPtrOutput)
}

// Type of the endpoint for the dead letter destination
func (o StorageBlobDeadLetterDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v StorageBlobDeadLetterDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The Azure Resource ID of the storage account that is the destination of the deadletter events
func (o StorageBlobDeadLetterDestinationResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobDeadLetterDestinationResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type StorageBlobDeadLetterDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (StorageBlobDeadLetterDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageBlobDeadLetterDestinationResponse)(nil)).Elem()
}

func (o StorageBlobDeadLetterDestinationResponsePtrOutput) ToStorageBlobDeadLetterDestinationResponsePtrOutput() StorageBlobDeadLetterDestinationResponsePtrOutput {
	return o
}

func (o StorageBlobDeadLetterDestinationResponsePtrOutput) ToStorageBlobDeadLetterDestinationResponsePtrOutputWithContext(ctx context.Context) StorageBlobDeadLetterDestinationResponsePtrOutput {
	return o
}

func (o StorageBlobDeadLetterDestinationResponsePtrOutput) Elem() StorageBlobDeadLetterDestinationResponseOutput {
	return o.ApplyT(func(v *StorageBlobDeadLetterDestinationResponse) StorageBlobDeadLetterDestinationResponse { return *v }).(StorageBlobDeadLetterDestinationResponseOutput)
}

// The name of the Storage blob container that is the destination of the deadletter events
func (o StorageBlobDeadLetterDestinationResponsePtrOutput) BlobContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageBlobDeadLetterDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.BlobContainerName
	}).(pulumi.StringPtrOutput)
}

// Type of the endpoint for the dead letter destination
func (o StorageBlobDeadLetterDestinationResponsePtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageBlobDeadLetterDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The Azure Resource ID of the storage account that is the destination of the deadletter events
func (o StorageBlobDeadLetterDestinationResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageBlobDeadLetterDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Information about the storage queue destination for an event subscription.
type StorageQueueEventSubscriptionDestination struct {
	// Type of the endpoint for the event subscription destination.
	EndpointType string `pulumi:"endpointType"`
	// The name of the Storage queue under a storage account that is the destination of an event subscription.
	QueueName *string `pulumi:"queueName"`
	// The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// StorageQueueEventSubscriptionDestinationInput is an input type that accepts StorageQueueEventSubscriptionDestinationArgs and StorageQueueEventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `StorageQueueEventSubscriptionDestinationInput` via:
//
//          StorageQueueEventSubscriptionDestinationArgs{...}
type StorageQueueEventSubscriptionDestinationInput interface {
	pulumi.Input

	ToStorageQueueEventSubscriptionDestinationOutput() StorageQueueEventSubscriptionDestinationOutput
	ToStorageQueueEventSubscriptionDestinationOutputWithContext(context.Context) StorageQueueEventSubscriptionDestinationOutput
}

// Information about the storage queue destination for an event subscription.
type StorageQueueEventSubscriptionDestinationArgs struct {
	// Type of the endpoint for the event subscription destination.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The name of the Storage queue under a storage account that is the destination of an event subscription.
	QueueName pulumi.StringPtrInput `pulumi:"queueName"`
	// The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (StorageQueueEventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageQueueEventSubscriptionDestination)(nil)).Elem()
}

func (i StorageQueueEventSubscriptionDestinationArgs) ToStorageQueueEventSubscriptionDestinationOutput() StorageQueueEventSubscriptionDestinationOutput {
	return i.ToStorageQueueEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i StorageQueueEventSubscriptionDestinationArgs) ToStorageQueueEventSubscriptionDestinationOutputWithContext(ctx context.Context) StorageQueueEventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageQueueEventSubscriptionDestinationOutput)
}

// Information about the storage queue destination for an event subscription.
type StorageQueueEventSubscriptionDestinationResponse struct {
	// Type of the endpoint for the event subscription destination.
	EndpointType string `pulumi:"endpointType"`
	// The name of the Storage queue under a storage account that is the destination of an event subscription.
	QueueName *string `pulumi:"queueName"`
	// The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.
	ResourceId *string `pulumi:"resourceId"`
}

// Information about the storage queue destination for an event subscription.
type StorageQueueEventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (StorageQueueEventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageQueueEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o StorageQueueEventSubscriptionDestinationResponseOutput) ToStorageQueueEventSubscriptionDestinationResponseOutput() StorageQueueEventSubscriptionDestinationResponseOutput {
	return o
}

func (o StorageQueueEventSubscriptionDestinationResponseOutput) ToStorageQueueEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) StorageQueueEventSubscriptionDestinationResponseOutput {
	return o
}

// Type of the endpoint for the event subscription destination.
func (o StorageQueueEventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v StorageQueueEventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The name of the Storage queue under a storage account that is the destination of an event subscription.
func (o StorageQueueEventSubscriptionDestinationResponseOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageQueueEventSubscriptionDestinationResponse) *string { return v.QueueName }).(pulumi.StringPtrOutput)
}

// The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription.
func (o StorageQueueEventSubscriptionDestinationResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageQueueEventSubscriptionDestinationResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// StringBeginsWith Advanced Filter.
type StringBeginsWithAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringBeginsWithAdvancedFilterInput is an input type that accepts StringBeginsWithAdvancedFilterArgs and StringBeginsWithAdvancedFilterOutput values.
// You can construct a concrete instance of `StringBeginsWithAdvancedFilterInput` via:
//
//          StringBeginsWithAdvancedFilterArgs{...}
type StringBeginsWithAdvancedFilterInput interface {
	pulumi.Input

	ToStringBeginsWithAdvancedFilterOutput() StringBeginsWithAdvancedFilterOutput
	ToStringBeginsWithAdvancedFilterOutputWithContext(context.Context) StringBeginsWithAdvancedFilterOutput
}

// StringBeginsWith Advanced Filter.
type StringBeginsWithAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StringBeginsWithAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StringBeginsWithAdvancedFilter)(nil)).Elem()
}

func (i StringBeginsWithAdvancedFilterArgs) ToStringBeginsWithAdvancedFilterOutput() StringBeginsWithAdvancedFilterOutput {
	return i.ToStringBeginsWithAdvancedFilterOutputWithContext(context.Background())
}

func (i StringBeginsWithAdvancedFilterArgs) ToStringBeginsWithAdvancedFilterOutputWithContext(ctx context.Context) StringBeginsWithAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringBeginsWithAdvancedFilterOutput)
}

// StringBeginsWith Advanced Filter.
type StringBeginsWithAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringBeginsWith Advanced Filter.
type StringBeginsWithAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (StringBeginsWithAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringBeginsWithAdvancedFilterResponse)(nil)).Elem()
}

func (o StringBeginsWithAdvancedFilterResponseOutput) ToStringBeginsWithAdvancedFilterResponseOutput() StringBeginsWithAdvancedFilterResponseOutput {
	return o
}

func (o StringBeginsWithAdvancedFilterResponseOutput) ToStringBeginsWithAdvancedFilterResponseOutputWithContext(ctx context.Context) StringBeginsWithAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringBeginsWithAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringBeginsWithAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
func (o StringBeginsWithAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringBeginsWithAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringBeginsWithAdvancedFilterResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringBeginsWithAdvancedFilterResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringContains Advanced Filter.
type StringContainsAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringContainsAdvancedFilterInput is an input type that accepts StringContainsAdvancedFilterArgs and StringContainsAdvancedFilterOutput values.
// You can construct a concrete instance of `StringContainsAdvancedFilterInput` via:
//
//          StringContainsAdvancedFilterArgs{...}
type StringContainsAdvancedFilterInput interface {
	pulumi.Input

	ToStringContainsAdvancedFilterOutput() StringContainsAdvancedFilterOutput
	ToStringContainsAdvancedFilterOutputWithContext(context.Context) StringContainsAdvancedFilterOutput
}

// StringContains Advanced Filter.
type StringContainsAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StringContainsAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StringContainsAdvancedFilter)(nil)).Elem()
}

func (i StringContainsAdvancedFilterArgs) ToStringContainsAdvancedFilterOutput() StringContainsAdvancedFilterOutput {
	return i.ToStringContainsAdvancedFilterOutputWithContext(context.Background())
}

func (i StringContainsAdvancedFilterArgs) ToStringContainsAdvancedFilterOutputWithContext(ctx context.Context) StringContainsAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringContainsAdvancedFilterOutput)
}

// StringContains Advanced Filter.
type StringContainsAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringContains Advanced Filter.
type StringContainsAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (StringContainsAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringContainsAdvancedFilterResponse)(nil)).Elem()
}

func (o StringContainsAdvancedFilterResponseOutput) ToStringContainsAdvancedFilterResponseOutput() StringContainsAdvancedFilterResponseOutput {
	return o
}

func (o StringContainsAdvancedFilterResponseOutput) ToStringContainsAdvancedFilterResponseOutputWithContext(ctx context.Context) StringContainsAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringContainsAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringContainsAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
func (o StringContainsAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringContainsAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringContainsAdvancedFilterResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringContainsAdvancedFilterResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringEndsWith Advanced Filter.
type StringEndsWithAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringEndsWithAdvancedFilterInput is an input type that accepts StringEndsWithAdvancedFilterArgs and StringEndsWithAdvancedFilterOutput values.
// You can construct a concrete instance of `StringEndsWithAdvancedFilterInput` via:
//
//          StringEndsWithAdvancedFilterArgs{...}
type StringEndsWithAdvancedFilterInput interface {
	pulumi.Input

	ToStringEndsWithAdvancedFilterOutput() StringEndsWithAdvancedFilterOutput
	ToStringEndsWithAdvancedFilterOutputWithContext(context.Context) StringEndsWithAdvancedFilterOutput
}

// StringEndsWith Advanced Filter.
type StringEndsWithAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StringEndsWithAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StringEndsWithAdvancedFilter)(nil)).Elem()
}

func (i StringEndsWithAdvancedFilterArgs) ToStringEndsWithAdvancedFilterOutput() StringEndsWithAdvancedFilterOutput {
	return i.ToStringEndsWithAdvancedFilterOutputWithContext(context.Background())
}

func (i StringEndsWithAdvancedFilterArgs) ToStringEndsWithAdvancedFilterOutputWithContext(ctx context.Context) StringEndsWithAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringEndsWithAdvancedFilterOutput)
}

// StringEndsWith Advanced Filter.
type StringEndsWithAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringEndsWith Advanced Filter.
type StringEndsWithAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (StringEndsWithAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringEndsWithAdvancedFilterResponse)(nil)).Elem()
}

func (o StringEndsWithAdvancedFilterResponseOutput) ToStringEndsWithAdvancedFilterResponseOutput() StringEndsWithAdvancedFilterResponseOutput {
	return o
}

func (o StringEndsWithAdvancedFilterResponseOutput) ToStringEndsWithAdvancedFilterResponseOutputWithContext(ctx context.Context) StringEndsWithAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringEndsWithAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringEndsWithAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
func (o StringEndsWithAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringEndsWithAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringEndsWithAdvancedFilterResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringEndsWithAdvancedFilterResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringIn Advanced Filter.
type StringInAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringInAdvancedFilterInput is an input type that accepts StringInAdvancedFilterArgs and StringInAdvancedFilterOutput values.
// You can construct a concrete instance of `StringInAdvancedFilterInput` via:
//
//          StringInAdvancedFilterArgs{...}
type StringInAdvancedFilterInput interface {
	pulumi.Input

	ToStringInAdvancedFilterOutput() StringInAdvancedFilterOutput
	ToStringInAdvancedFilterOutputWithContext(context.Context) StringInAdvancedFilterOutput
}

// StringIn Advanced Filter.
type StringInAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StringInAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StringInAdvancedFilter)(nil)).Elem()
}

func (i StringInAdvancedFilterArgs) ToStringInAdvancedFilterOutput() StringInAdvancedFilterOutput {
	return i.ToStringInAdvancedFilterOutputWithContext(context.Background())
}

func (i StringInAdvancedFilterArgs) ToStringInAdvancedFilterOutputWithContext(ctx context.Context) StringInAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringInAdvancedFilterOutput)
}

// StringIn Advanced Filter.
type StringInAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringIn Advanced Filter.
type StringInAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (StringInAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringInAdvancedFilterResponse)(nil)).Elem()
}

func (o StringInAdvancedFilterResponseOutput) ToStringInAdvancedFilterResponseOutput() StringInAdvancedFilterResponseOutput {
	return o
}

func (o StringInAdvancedFilterResponseOutput) ToStringInAdvancedFilterResponseOutputWithContext(ctx context.Context) StringInAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringInAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringInAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
func (o StringInAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringInAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringInAdvancedFilterResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringInAdvancedFilterResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// StringNotIn Advanced Filter.
type StringNotInAdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotInAdvancedFilterInput is an input type that accepts StringNotInAdvancedFilterArgs and StringNotInAdvancedFilterOutput values.
// You can construct a concrete instance of `StringNotInAdvancedFilterInput` via:
//
//          StringNotInAdvancedFilterArgs{...}
type StringNotInAdvancedFilterInput interface {
	pulumi.Input

	ToStringNotInAdvancedFilterOutput() StringNotInAdvancedFilterOutput
	ToStringNotInAdvancedFilterOutputWithContext(context.Context) StringNotInAdvancedFilterOutput
}

// StringNotIn Advanced Filter.
type StringNotInAdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
	// The set of filter values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StringNotInAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotInAdvancedFilter)(nil)).Elem()
}

func (i StringNotInAdvancedFilterArgs) ToStringNotInAdvancedFilterOutput() StringNotInAdvancedFilterOutput {
	return i.ToStringNotInAdvancedFilterOutputWithContext(context.Background())
}

func (i StringNotInAdvancedFilterArgs) ToStringNotInAdvancedFilterOutputWithContext(ctx context.Context) StringNotInAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StringNotInAdvancedFilterOutput)
}

// StringNotIn Advanced Filter.
type StringNotInAdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
	// The set of filter values.
	Values []string `pulumi:"values"`
}

// StringNotIn Advanced Filter.
type StringNotInAdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (StringNotInAdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StringNotInAdvancedFilterResponse)(nil)).Elem()
}

func (o StringNotInAdvancedFilterResponseOutput) ToStringNotInAdvancedFilterResponseOutput() StringNotInAdvancedFilterResponseOutput {
	return o
}

func (o StringNotInAdvancedFilterResponseOutput) ToStringNotInAdvancedFilterResponseOutputWithContext(ctx context.Context) StringNotInAdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o StringNotInAdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StringNotInAdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
func (o StringNotInAdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v StringNotInAdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

// The set of filter values.
func (o StringNotInAdvancedFilterResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StringNotInAdvancedFilterResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// Information about the webhook destination for an event subscription.
type WebHookEventSubscriptionDestination struct {
	// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
	AzureActiveDirectoryApplicationIdOrUri *string `pulumi:"azureActiveDirectoryApplicationIdOrUri"`
	// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
	AzureActiveDirectoryTenantId *string `pulumi:"azureActiveDirectoryTenantId"`
	// Type of the endpoint for the event subscription destination.
	EndpointType string `pulumi:"endpointType"`
	// The URL that represents the endpoint of the destination of an event subscription.
	EndpointUrl *string `pulumi:"endpointUrl"`
	// Maximum number of events per batch.
	MaxEventsPerBatch *int `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes *int `pulumi:"preferredBatchSizeInKilobytes"`
}

// WebHookEventSubscriptionDestinationInput is an input type that accepts WebHookEventSubscriptionDestinationArgs and WebHookEventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `WebHookEventSubscriptionDestinationInput` via:
//
//          WebHookEventSubscriptionDestinationArgs{...}
type WebHookEventSubscriptionDestinationInput interface {
	pulumi.Input

	ToWebHookEventSubscriptionDestinationOutput() WebHookEventSubscriptionDestinationOutput
	ToWebHookEventSubscriptionDestinationOutputWithContext(context.Context) WebHookEventSubscriptionDestinationOutput
}

// Information about the webhook destination for an event subscription.
type WebHookEventSubscriptionDestinationArgs struct {
	// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
	AzureActiveDirectoryApplicationIdOrUri pulumi.StringPtrInput `pulumi:"azureActiveDirectoryApplicationIdOrUri"`
	// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
	AzureActiveDirectoryTenantId pulumi.StringPtrInput `pulumi:"azureActiveDirectoryTenantId"`
	// Type of the endpoint for the event subscription destination.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The URL that represents the endpoint of the destination of an event subscription.
	EndpointUrl pulumi.StringPtrInput `pulumi:"endpointUrl"`
	// Maximum number of events per batch.
	MaxEventsPerBatch pulumi.IntPtrInput `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes pulumi.IntPtrInput `pulumi:"preferredBatchSizeInKilobytes"`
}

func (WebHookEventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebHookEventSubscriptionDestination)(nil)).Elem()
}

func (i WebHookEventSubscriptionDestinationArgs) ToWebHookEventSubscriptionDestinationOutput() WebHookEventSubscriptionDestinationOutput {
	return i.ToWebHookEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i WebHookEventSubscriptionDestinationArgs) ToWebHookEventSubscriptionDestinationOutputWithContext(ctx context.Context) WebHookEventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebHookEventSubscriptionDestinationOutput)
}

// Information about the webhook destination for an event subscription.
type WebHookEventSubscriptionDestinationResponse struct {
	// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
	AzureActiveDirectoryApplicationIdOrUri *string `pulumi:"azureActiveDirectoryApplicationIdOrUri"`
	// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
	AzureActiveDirectoryTenantId *string `pulumi:"azureActiveDirectoryTenantId"`
	// The base URL that represents the endpoint of the destination of an event subscription.
	EndpointBaseUrl string `pulumi:"endpointBaseUrl"`
	// Type of the endpoint for the event subscription destination.
	EndpointType string `pulumi:"endpointType"`
	// The URL that represents the endpoint of the destination of an event subscription.
	EndpointUrl *string `pulumi:"endpointUrl"`
	// Maximum number of events per batch.
	MaxEventsPerBatch *int `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes *int `pulumi:"preferredBatchSizeInKilobytes"`
}

// Information about the webhook destination for an event subscription.
type WebHookEventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (WebHookEventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebHookEventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o WebHookEventSubscriptionDestinationResponseOutput) ToWebHookEventSubscriptionDestinationResponseOutput() WebHookEventSubscriptionDestinationResponseOutput {
	return o
}

func (o WebHookEventSubscriptionDestinationResponseOutput) ToWebHookEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) WebHookEventSubscriptionDestinationResponseOutput {
	return o
}

// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
func (o WebHookEventSubscriptionDestinationResponseOutput) AzureActiveDirectoryApplicationIdOrUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestinationResponse) *string {
		return v.AzureActiveDirectoryApplicationIdOrUri
	}).(pulumi.StringPtrOutput)
}

// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
func (o WebHookEventSubscriptionDestinationResponseOutput) AzureActiveDirectoryTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestinationResponse) *string { return v.AzureActiveDirectoryTenantId }).(pulumi.StringPtrOutput)
}

// The base URL that represents the endpoint of the destination of an event subscription.
func (o WebHookEventSubscriptionDestinationResponseOutput) EndpointBaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestinationResponse) string { return v.EndpointBaseUrl }).(pulumi.StringOutput)
}

// Type of the endpoint for the event subscription destination.
func (o WebHookEventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The URL that represents the endpoint of the destination of an event subscription.
func (o WebHookEventSubscriptionDestinationResponseOutput) EndpointUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestinationResponse) *string { return v.EndpointUrl }).(pulumi.StringPtrOutput)
}

// Maximum number of events per batch.
func (o WebHookEventSubscriptionDestinationResponseOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestinationResponse) *int { return v.MaxEventsPerBatch }).(pulumi.IntPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o WebHookEventSubscriptionDestinationResponseOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WebHookEventSubscriptionDestinationResponse) *int { return v.PreferredBatchSizeInKilobytes }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AzureFunctionEventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(AzureFunctionEventSubscriptionDestinationResponseOutput{})
	pulumi.RegisterOutputType(BoolEqualsAdvancedFilterOutput{})
	pulumi.RegisterOutputType(BoolEqualsAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(ConnectionStateOutput{})
	pulumi.RegisterOutputType(ConnectionStatePtrOutput{})
	pulumi.RegisterOutputType(ConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(ConnectionStateResponsePtrOutput{})
	pulumi.RegisterOutputType(EventHubEventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(EventHubEventSubscriptionDestinationResponseOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterResponseOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(HybridConnectionEventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(HybridConnectionEventSubscriptionDestinationResponseOutput{})
	pulumi.RegisterOutputType(InboundIpRuleOutput{})
	pulumi.RegisterOutputType(InboundIpRuleArrayOutput{})
	pulumi.RegisterOutputType(InboundIpRuleResponseOutput{})
	pulumi.RegisterOutputType(InboundIpRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(JsonFieldOutput{})
	pulumi.RegisterOutputType(JsonFieldPtrOutput{})
	pulumi.RegisterOutputType(JsonFieldResponseOutput{})
	pulumi.RegisterOutputType(JsonFieldResponsePtrOutput{})
	pulumi.RegisterOutputType(JsonFieldWithDefaultOutput{})
	pulumi.RegisterOutputType(JsonFieldWithDefaultPtrOutput{})
	pulumi.RegisterOutputType(JsonFieldWithDefaultResponseOutput{})
	pulumi.RegisterOutputType(JsonFieldWithDefaultResponsePtrOutput{})
	pulumi.RegisterOutputType(JsonInputSchemaMappingOutput{})
	pulumi.RegisterOutputType(JsonInputSchemaMappingPtrOutput{})
	pulumi.RegisterOutputType(JsonInputSchemaMappingResponseOutput{})
	pulumi.RegisterOutputType(JsonInputSchemaMappingResponsePtrOutput{})
	pulumi.RegisterOutputType(NumberGreaterThanAdvancedFilterOutput{})
	pulumi.RegisterOutputType(NumberGreaterThanAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(NumberGreaterThanOrEqualsAdvancedFilterOutput{})
	pulumi.RegisterOutputType(NumberGreaterThanOrEqualsAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(NumberInAdvancedFilterOutput{})
	pulumi.RegisterOutputType(NumberInAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(NumberLessThanAdvancedFilterOutput{})
	pulumi.RegisterOutputType(NumberLessThanAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(NumberLessThanOrEqualsAdvancedFilterOutput{})
	pulumi.RegisterOutputType(NumberLessThanOrEqualsAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(NumberNotInAdvancedFilterOutput{})
	pulumi.RegisterOutputType(NumberNotInAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointOutput{})
	pulumi.RegisterOutputType(PrivateEndpointPtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionTypeOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionTypeArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(RetryPolicyOutput{})
	pulumi.RegisterOutputType(RetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(RetryPolicyResponseOutput{})
	pulumi.RegisterOutputType(RetryPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ServiceBusQueueEventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(ServiceBusQueueEventSubscriptionDestinationResponseOutput{})
	pulumi.RegisterOutputType(ServiceBusTopicEventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(ServiceBusTopicEventSubscriptionDestinationResponseOutput{})
	pulumi.RegisterOutputType(StorageBlobDeadLetterDestinationOutput{})
	pulumi.RegisterOutputType(StorageBlobDeadLetterDestinationPtrOutput{})
	pulumi.RegisterOutputType(StorageBlobDeadLetterDestinationResponseOutput{})
	pulumi.RegisterOutputType(StorageBlobDeadLetterDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(StorageQueueEventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(StorageQueueEventSubscriptionDestinationResponseOutput{})
	pulumi.RegisterOutputType(StringBeginsWithAdvancedFilterOutput{})
	pulumi.RegisterOutputType(StringBeginsWithAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(StringContainsAdvancedFilterOutput{})
	pulumi.RegisterOutputType(StringContainsAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(StringEndsWithAdvancedFilterOutput{})
	pulumi.RegisterOutputType(StringEndsWithAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(StringInAdvancedFilterOutput{})
	pulumi.RegisterOutputType(StringInAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(StringNotInAdvancedFilterOutput{})
	pulumi.RegisterOutputType(StringNotInAdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(WebHookEventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(WebHookEventSubscriptionDestinationResponseOutput{})
}
