// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190601

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// This is the base type that represents an advanced filter. To configure an advanced filter, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class such as BoolEqualsAdvancedFilter, NumberInAdvancedFilter, StringEqualsAdvancedFilter etc. depending on the type of the key based on which you want to filter.
type AdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
}

// AdvancedFilterInput is an input type that accepts AdvancedFilterArgs and AdvancedFilterOutput values.
// You can construct a concrete instance of `AdvancedFilterInput` via:
//
//          AdvancedFilterArgs{...}
type AdvancedFilterInput interface {
	pulumi.Input

	ToAdvancedFilterOutput() AdvancedFilterOutput
	ToAdvancedFilterOutputWithContext(context.Context) AdvancedFilterOutput
}

// This is the base type that represents an advanced filter. To configure an advanced filter, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class such as BoolEqualsAdvancedFilter, NumberInAdvancedFilter, StringEqualsAdvancedFilter etc. depending on the type of the key based on which you want to filter.
type AdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
}

func (AdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedFilter)(nil)).Elem()
}

func (i AdvancedFilterArgs) ToAdvancedFilterOutput() AdvancedFilterOutput {
	return i.ToAdvancedFilterOutputWithContext(context.Background())
}

func (i AdvancedFilterArgs) ToAdvancedFilterOutputWithContext(ctx context.Context) AdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedFilterOutput)
}

// AdvancedFilterArrayInput is an input type that accepts AdvancedFilterArray and AdvancedFilterArrayOutput values.
// You can construct a concrete instance of `AdvancedFilterArrayInput` via:
//
//          AdvancedFilterArray{ AdvancedFilterArgs{...} }
type AdvancedFilterArrayInput interface {
	pulumi.Input

	ToAdvancedFilterArrayOutput() AdvancedFilterArrayOutput
	ToAdvancedFilterArrayOutputWithContext(context.Context) AdvancedFilterArrayOutput
}

type AdvancedFilterArray []AdvancedFilterInput

func (AdvancedFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdvancedFilter)(nil)).Elem()
}

func (i AdvancedFilterArray) ToAdvancedFilterArrayOutput() AdvancedFilterArrayOutput {
	return i.ToAdvancedFilterArrayOutputWithContext(context.Background())
}

func (i AdvancedFilterArray) ToAdvancedFilterArrayOutputWithContext(ctx context.Context) AdvancedFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedFilterArrayOutput)
}

// This is the base type that represents an advanced filter. To configure an advanced filter, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class such as BoolEqualsAdvancedFilter, NumberInAdvancedFilter, StringEqualsAdvancedFilter etc. depending on the type of the key based on which you want to filter.
type AdvancedFilterOutput struct{ *pulumi.OutputState }

func (AdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedFilter)(nil)).Elem()
}

func (o AdvancedFilterOutput) ToAdvancedFilterOutput() AdvancedFilterOutput {
	return o
}

func (o AdvancedFilterOutput) ToAdvancedFilterOutputWithContext(ctx context.Context) AdvancedFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o AdvancedFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdvancedFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
func (o AdvancedFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v AdvancedFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

type AdvancedFilterArrayOutput struct{ *pulumi.OutputState }

func (AdvancedFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdvancedFilter)(nil)).Elem()
}

func (o AdvancedFilterArrayOutput) ToAdvancedFilterArrayOutput() AdvancedFilterArrayOutput {
	return o
}

func (o AdvancedFilterArrayOutput) ToAdvancedFilterArrayOutputWithContext(ctx context.Context) AdvancedFilterArrayOutput {
	return o
}

func (o AdvancedFilterArrayOutput) Index(i pulumi.IntInput) AdvancedFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AdvancedFilter {
		return vs[0].([]AdvancedFilter)[vs[1].(int)]
	}).(AdvancedFilterOutput)
}

// This is the base type that represents an advanced filter. To configure an advanced filter, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class such as BoolEqualsAdvancedFilter, NumberInAdvancedFilter, StringEqualsAdvancedFilter etc. depending on the type of the key based on which you want to filter.
type AdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
}

// AdvancedFilterResponseInput is an input type that accepts AdvancedFilterResponseArgs and AdvancedFilterResponseOutput values.
// You can construct a concrete instance of `AdvancedFilterResponseInput` via:
//
//          AdvancedFilterResponseArgs{...}
type AdvancedFilterResponseInput interface {
	pulumi.Input

	ToAdvancedFilterResponseOutput() AdvancedFilterResponseOutput
	ToAdvancedFilterResponseOutputWithContext(context.Context) AdvancedFilterResponseOutput
}

// This is the base type that represents an advanced filter. To configure an advanced filter, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class such as BoolEqualsAdvancedFilter, NumberInAdvancedFilter, StringEqualsAdvancedFilter etc. depending on the type of the key based on which you want to filter.
type AdvancedFilterResponseArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
}

func (AdvancedFilterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedFilterResponse)(nil)).Elem()
}

func (i AdvancedFilterResponseArgs) ToAdvancedFilterResponseOutput() AdvancedFilterResponseOutput {
	return i.ToAdvancedFilterResponseOutputWithContext(context.Background())
}

func (i AdvancedFilterResponseArgs) ToAdvancedFilterResponseOutputWithContext(ctx context.Context) AdvancedFilterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedFilterResponseOutput)
}

// AdvancedFilterResponseArrayInput is an input type that accepts AdvancedFilterResponseArray and AdvancedFilterResponseArrayOutput values.
// You can construct a concrete instance of `AdvancedFilterResponseArrayInput` via:
//
//          AdvancedFilterResponseArray{ AdvancedFilterResponseArgs{...} }
type AdvancedFilterResponseArrayInput interface {
	pulumi.Input

	ToAdvancedFilterResponseArrayOutput() AdvancedFilterResponseArrayOutput
	ToAdvancedFilterResponseArrayOutputWithContext(context.Context) AdvancedFilterResponseArrayOutput
}

type AdvancedFilterResponseArray []AdvancedFilterResponseInput

func (AdvancedFilterResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdvancedFilterResponse)(nil)).Elem()
}

func (i AdvancedFilterResponseArray) ToAdvancedFilterResponseArrayOutput() AdvancedFilterResponseArrayOutput {
	return i.ToAdvancedFilterResponseArrayOutputWithContext(context.Background())
}

func (i AdvancedFilterResponseArray) ToAdvancedFilterResponseArrayOutputWithContext(ctx context.Context) AdvancedFilterResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedFilterResponseArrayOutput)
}

// This is the base type that represents an advanced filter. To configure an advanced filter, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class such as BoolEqualsAdvancedFilter, NumberInAdvancedFilter, StringEqualsAdvancedFilter etc. depending on the type of the key based on which you want to filter.
type AdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (AdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedFilterResponse)(nil)).Elem()
}

func (o AdvancedFilterResponseOutput) ToAdvancedFilterResponseOutput() AdvancedFilterResponseOutput {
	return o
}

func (o AdvancedFilterResponseOutput) ToAdvancedFilterResponseOutputWithContext(ctx context.Context) AdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o AdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
func (o AdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v AdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

type AdvancedFilterResponseArrayOutput struct{ *pulumi.OutputState }

func (AdvancedFilterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdvancedFilterResponse)(nil)).Elem()
}

func (o AdvancedFilterResponseArrayOutput) ToAdvancedFilterResponseArrayOutput() AdvancedFilterResponseArrayOutput {
	return o
}

func (o AdvancedFilterResponseArrayOutput) ToAdvancedFilterResponseArrayOutputWithContext(ctx context.Context) AdvancedFilterResponseArrayOutput {
	return o
}

func (o AdvancedFilterResponseArrayOutput) Index(i pulumi.IntInput) AdvancedFilterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AdvancedFilterResponse {
		return vs[0].([]AdvancedFilterResponse)[vs[1].(int)]
	}).(AdvancedFilterResponseOutput)
}

// Information about the dead letter destination for an event subscription. To configure a deadletter destination, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class. Currently, StorageBlobDeadLetterDestination is the only class that derives from this class.
type DeadLetterDestination struct {
	// Type of the endpoint for the dead letter destination
	EndpointType string `pulumi:"endpointType"`
}

// DeadLetterDestinationInput is an input type that accepts DeadLetterDestinationArgs and DeadLetterDestinationOutput values.
// You can construct a concrete instance of `DeadLetterDestinationInput` via:
//
//          DeadLetterDestinationArgs{...}
type DeadLetterDestinationInput interface {
	pulumi.Input

	ToDeadLetterDestinationOutput() DeadLetterDestinationOutput
	ToDeadLetterDestinationOutputWithContext(context.Context) DeadLetterDestinationOutput
}

// Information about the dead letter destination for an event subscription. To configure a deadletter destination, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class. Currently, StorageBlobDeadLetterDestination is the only class that derives from this class.
type DeadLetterDestinationArgs struct {
	// Type of the endpoint for the dead letter destination
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
}

func (DeadLetterDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeadLetterDestination)(nil)).Elem()
}

func (i DeadLetterDestinationArgs) ToDeadLetterDestinationOutput() DeadLetterDestinationOutput {
	return i.ToDeadLetterDestinationOutputWithContext(context.Background())
}

func (i DeadLetterDestinationArgs) ToDeadLetterDestinationOutputWithContext(ctx context.Context) DeadLetterDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterDestinationOutput)
}

func (i DeadLetterDestinationArgs) ToDeadLetterDestinationPtrOutput() DeadLetterDestinationPtrOutput {
	return i.ToDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (i DeadLetterDestinationArgs) ToDeadLetterDestinationPtrOutputWithContext(ctx context.Context) DeadLetterDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterDestinationOutput).ToDeadLetterDestinationPtrOutputWithContext(ctx)
}

// DeadLetterDestinationPtrInput is an input type that accepts DeadLetterDestinationArgs, DeadLetterDestinationPtr and DeadLetterDestinationPtrOutput values.
// You can construct a concrete instance of `DeadLetterDestinationPtrInput` via:
//
//          DeadLetterDestinationArgs{...}
//
//  or:
//
//          nil
type DeadLetterDestinationPtrInput interface {
	pulumi.Input

	ToDeadLetterDestinationPtrOutput() DeadLetterDestinationPtrOutput
	ToDeadLetterDestinationPtrOutputWithContext(context.Context) DeadLetterDestinationPtrOutput
}

type deadLetterDestinationPtrType DeadLetterDestinationArgs

func DeadLetterDestinationPtr(v *DeadLetterDestinationArgs) DeadLetterDestinationPtrInput {
	return (*deadLetterDestinationPtrType)(v)
}

func (*deadLetterDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeadLetterDestination)(nil)).Elem()
}

func (i *deadLetterDestinationPtrType) ToDeadLetterDestinationPtrOutput() DeadLetterDestinationPtrOutput {
	return i.ToDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (i *deadLetterDestinationPtrType) ToDeadLetterDestinationPtrOutputWithContext(ctx context.Context) DeadLetterDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterDestinationPtrOutput)
}

// Information about the dead letter destination for an event subscription. To configure a deadletter destination, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class. Currently, StorageBlobDeadLetterDestination is the only class that derives from this class.
type DeadLetterDestinationOutput struct{ *pulumi.OutputState }

func (DeadLetterDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeadLetterDestination)(nil)).Elem()
}

func (o DeadLetterDestinationOutput) ToDeadLetterDestinationOutput() DeadLetterDestinationOutput {
	return o
}

func (o DeadLetterDestinationOutput) ToDeadLetterDestinationOutputWithContext(ctx context.Context) DeadLetterDestinationOutput {
	return o
}

func (o DeadLetterDestinationOutput) ToDeadLetterDestinationPtrOutput() DeadLetterDestinationPtrOutput {
	return o.ToDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (o DeadLetterDestinationOutput) ToDeadLetterDestinationPtrOutputWithContext(ctx context.Context) DeadLetterDestinationPtrOutput {
	return o.ApplyT(func(v DeadLetterDestination) *DeadLetterDestination {
		return &v
	}).(DeadLetterDestinationPtrOutput)
}

// Type of the endpoint for the dead letter destination
func (o DeadLetterDestinationOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v DeadLetterDestination) string { return v.EndpointType }).(pulumi.StringOutput)
}

type DeadLetterDestinationPtrOutput struct{ *pulumi.OutputState }

func (DeadLetterDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeadLetterDestination)(nil)).Elem()
}

func (o DeadLetterDestinationPtrOutput) ToDeadLetterDestinationPtrOutput() DeadLetterDestinationPtrOutput {
	return o
}

func (o DeadLetterDestinationPtrOutput) ToDeadLetterDestinationPtrOutputWithContext(ctx context.Context) DeadLetterDestinationPtrOutput {
	return o
}

func (o DeadLetterDestinationPtrOutput) Elem() DeadLetterDestinationOutput {
	return o.ApplyT(func(v *DeadLetterDestination) DeadLetterDestination { return *v }).(DeadLetterDestinationOutput)
}

// Type of the endpoint for the dead letter destination
func (o DeadLetterDestinationPtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeadLetterDestination) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// Information about the dead letter destination for an event subscription. To configure a deadletter destination, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class. Currently, StorageBlobDeadLetterDestination is the only class that derives from this class.
type DeadLetterDestinationResponse struct {
	// Type of the endpoint for the dead letter destination
	EndpointType string `pulumi:"endpointType"`
}

// DeadLetterDestinationResponseInput is an input type that accepts DeadLetterDestinationResponseArgs and DeadLetterDestinationResponseOutput values.
// You can construct a concrete instance of `DeadLetterDestinationResponseInput` via:
//
//          DeadLetterDestinationResponseArgs{...}
type DeadLetterDestinationResponseInput interface {
	pulumi.Input

	ToDeadLetterDestinationResponseOutput() DeadLetterDestinationResponseOutput
	ToDeadLetterDestinationResponseOutputWithContext(context.Context) DeadLetterDestinationResponseOutput
}

// Information about the dead letter destination for an event subscription. To configure a deadletter destination, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class. Currently, StorageBlobDeadLetterDestination is the only class that derives from this class.
type DeadLetterDestinationResponseArgs struct {
	// Type of the endpoint for the dead letter destination
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
}

func (DeadLetterDestinationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeadLetterDestinationResponse)(nil)).Elem()
}

func (i DeadLetterDestinationResponseArgs) ToDeadLetterDestinationResponseOutput() DeadLetterDestinationResponseOutput {
	return i.ToDeadLetterDestinationResponseOutputWithContext(context.Background())
}

func (i DeadLetterDestinationResponseArgs) ToDeadLetterDestinationResponseOutputWithContext(ctx context.Context) DeadLetterDestinationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterDestinationResponseOutput)
}

func (i DeadLetterDestinationResponseArgs) ToDeadLetterDestinationResponsePtrOutput() DeadLetterDestinationResponsePtrOutput {
	return i.ToDeadLetterDestinationResponsePtrOutputWithContext(context.Background())
}

func (i DeadLetterDestinationResponseArgs) ToDeadLetterDestinationResponsePtrOutputWithContext(ctx context.Context) DeadLetterDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterDestinationResponseOutput).ToDeadLetterDestinationResponsePtrOutputWithContext(ctx)
}

// DeadLetterDestinationResponsePtrInput is an input type that accepts DeadLetterDestinationResponseArgs, DeadLetterDestinationResponsePtr and DeadLetterDestinationResponsePtrOutput values.
// You can construct a concrete instance of `DeadLetterDestinationResponsePtrInput` via:
//
//          DeadLetterDestinationResponseArgs{...}
//
//  or:
//
//          nil
type DeadLetterDestinationResponsePtrInput interface {
	pulumi.Input

	ToDeadLetterDestinationResponsePtrOutput() DeadLetterDestinationResponsePtrOutput
	ToDeadLetterDestinationResponsePtrOutputWithContext(context.Context) DeadLetterDestinationResponsePtrOutput
}

type deadLetterDestinationResponsePtrType DeadLetterDestinationResponseArgs

func DeadLetterDestinationResponsePtr(v *DeadLetterDestinationResponseArgs) DeadLetterDestinationResponsePtrInput {
	return (*deadLetterDestinationResponsePtrType)(v)
}

func (*deadLetterDestinationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeadLetterDestinationResponse)(nil)).Elem()
}

func (i *deadLetterDestinationResponsePtrType) ToDeadLetterDestinationResponsePtrOutput() DeadLetterDestinationResponsePtrOutput {
	return i.ToDeadLetterDestinationResponsePtrOutputWithContext(context.Background())
}

func (i *deadLetterDestinationResponsePtrType) ToDeadLetterDestinationResponsePtrOutputWithContext(ctx context.Context) DeadLetterDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterDestinationResponsePtrOutput)
}

// Information about the dead letter destination for an event subscription. To configure a deadletter destination, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class. Currently, StorageBlobDeadLetterDestination is the only class that derives from this class.
type DeadLetterDestinationResponseOutput struct{ *pulumi.OutputState }

func (DeadLetterDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeadLetterDestinationResponse)(nil)).Elem()
}

func (o DeadLetterDestinationResponseOutput) ToDeadLetterDestinationResponseOutput() DeadLetterDestinationResponseOutput {
	return o
}

func (o DeadLetterDestinationResponseOutput) ToDeadLetterDestinationResponseOutputWithContext(ctx context.Context) DeadLetterDestinationResponseOutput {
	return o
}

func (o DeadLetterDestinationResponseOutput) ToDeadLetterDestinationResponsePtrOutput() DeadLetterDestinationResponsePtrOutput {
	return o.ToDeadLetterDestinationResponsePtrOutputWithContext(context.Background())
}

func (o DeadLetterDestinationResponseOutput) ToDeadLetterDestinationResponsePtrOutputWithContext(ctx context.Context) DeadLetterDestinationResponsePtrOutput {
	return o.ApplyT(func(v DeadLetterDestinationResponse) *DeadLetterDestinationResponse {
		return &v
	}).(DeadLetterDestinationResponsePtrOutput)
}

// Type of the endpoint for the dead letter destination
func (o DeadLetterDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v DeadLetterDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

type DeadLetterDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (DeadLetterDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeadLetterDestinationResponse)(nil)).Elem()
}

func (o DeadLetterDestinationResponsePtrOutput) ToDeadLetterDestinationResponsePtrOutput() DeadLetterDestinationResponsePtrOutput {
	return o
}

func (o DeadLetterDestinationResponsePtrOutput) ToDeadLetterDestinationResponsePtrOutputWithContext(ctx context.Context) DeadLetterDestinationResponsePtrOutput {
	return o
}

func (o DeadLetterDestinationResponsePtrOutput) Elem() DeadLetterDestinationResponseOutput {
	return o.ApplyT(func(v *DeadLetterDestinationResponse) DeadLetterDestinationResponse { return *v }).(DeadLetterDestinationResponseOutput)
}

// Type of the endpoint for the dead letter destination
func (o DeadLetterDestinationResponsePtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeadLetterDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// Properties of the Domain.
type DomainPropertiesResponse struct {
	// Endpoint for the domain.
	Endpoint string `pulumi:"endpoint"`
	// Provisioning state of the domain.
	ProvisioningState string `pulumi:"provisioningState"`
}

// DomainPropertiesResponseInput is an input type that accepts DomainPropertiesResponseArgs and DomainPropertiesResponseOutput values.
// You can construct a concrete instance of `DomainPropertiesResponseInput` via:
//
//          DomainPropertiesResponseArgs{...}
type DomainPropertiesResponseInput interface {
	pulumi.Input

	ToDomainPropertiesResponseOutput() DomainPropertiesResponseOutput
	ToDomainPropertiesResponseOutputWithContext(context.Context) DomainPropertiesResponseOutput
}

// Properties of the Domain.
type DomainPropertiesResponseArgs struct {
	// Endpoint for the domain.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// Provisioning state of the domain.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
}

func (DomainPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainPropertiesResponse)(nil)).Elem()
}

func (i DomainPropertiesResponseArgs) ToDomainPropertiesResponseOutput() DomainPropertiesResponseOutput {
	return i.ToDomainPropertiesResponseOutputWithContext(context.Background())
}

func (i DomainPropertiesResponseArgs) ToDomainPropertiesResponseOutputWithContext(ctx context.Context) DomainPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainPropertiesResponseOutput)
}

func (i DomainPropertiesResponseArgs) ToDomainPropertiesResponsePtrOutput() DomainPropertiesResponsePtrOutput {
	return i.ToDomainPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i DomainPropertiesResponseArgs) ToDomainPropertiesResponsePtrOutputWithContext(ctx context.Context) DomainPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainPropertiesResponseOutput).ToDomainPropertiesResponsePtrOutputWithContext(ctx)
}

// DomainPropertiesResponsePtrInput is an input type that accepts DomainPropertiesResponseArgs, DomainPropertiesResponsePtr and DomainPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `DomainPropertiesResponsePtrInput` via:
//
//          DomainPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type DomainPropertiesResponsePtrInput interface {
	pulumi.Input

	ToDomainPropertiesResponsePtrOutput() DomainPropertiesResponsePtrOutput
	ToDomainPropertiesResponsePtrOutputWithContext(context.Context) DomainPropertiesResponsePtrOutput
}

type domainPropertiesResponsePtrType DomainPropertiesResponseArgs

func DomainPropertiesResponsePtr(v *DomainPropertiesResponseArgs) DomainPropertiesResponsePtrInput {
	return (*domainPropertiesResponsePtrType)(v)
}

func (*domainPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainPropertiesResponse)(nil)).Elem()
}

func (i *domainPropertiesResponsePtrType) ToDomainPropertiesResponsePtrOutput() DomainPropertiesResponsePtrOutput {
	return i.ToDomainPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *domainPropertiesResponsePtrType) ToDomainPropertiesResponsePtrOutputWithContext(ctx context.Context) DomainPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainPropertiesResponsePtrOutput)
}

// Properties of the Domain.
type DomainPropertiesResponseOutput struct{ *pulumi.OutputState }

func (DomainPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainPropertiesResponse)(nil)).Elem()
}

func (o DomainPropertiesResponseOutput) ToDomainPropertiesResponseOutput() DomainPropertiesResponseOutput {
	return o
}

func (o DomainPropertiesResponseOutput) ToDomainPropertiesResponseOutputWithContext(ctx context.Context) DomainPropertiesResponseOutput {
	return o
}

func (o DomainPropertiesResponseOutput) ToDomainPropertiesResponsePtrOutput() DomainPropertiesResponsePtrOutput {
	return o.ToDomainPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o DomainPropertiesResponseOutput) ToDomainPropertiesResponsePtrOutputWithContext(ctx context.Context) DomainPropertiesResponsePtrOutput {
	return o.ApplyT(func(v DomainPropertiesResponse) *DomainPropertiesResponse {
		return &v
	}).(DomainPropertiesResponsePtrOutput)
}

// Endpoint for the domain.
func (o DomainPropertiesResponseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DomainPropertiesResponse) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Provisioning state of the domain.
func (o DomainPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v DomainPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type DomainPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (DomainPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainPropertiesResponse)(nil)).Elem()
}

func (o DomainPropertiesResponsePtrOutput) ToDomainPropertiesResponsePtrOutput() DomainPropertiesResponsePtrOutput {
	return o
}

func (o DomainPropertiesResponsePtrOutput) ToDomainPropertiesResponsePtrOutputWithContext(ctx context.Context) DomainPropertiesResponsePtrOutput {
	return o
}

func (o DomainPropertiesResponsePtrOutput) Elem() DomainPropertiesResponseOutput {
	return o.ApplyT(func(v *DomainPropertiesResponse) DomainPropertiesResponse { return *v }).(DomainPropertiesResponseOutput)
}

// Endpoint for the domain.
func (o DomainPropertiesResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Provisioning state of the domain.
func (o DomainPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Properties of the Domain Topic.
type DomainTopicPropertiesResponse struct {
	// Provisioning state of the domain topic.
	ProvisioningState *string `pulumi:"provisioningState"`
}

// DomainTopicPropertiesResponseInput is an input type that accepts DomainTopicPropertiesResponseArgs and DomainTopicPropertiesResponseOutput values.
// You can construct a concrete instance of `DomainTopicPropertiesResponseInput` via:
//
//          DomainTopicPropertiesResponseArgs{...}
type DomainTopicPropertiesResponseInput interface {
	pulumi.Input

	ToDomainTopicPropertiesResponseOutput() DomainTopicPropertiesResponseOutput
	ToDomainTopicPropertiesResponseOutputWithContext(context.Context) DomainTopicPropertiesResponseOutput
}

// Properties of the Domain Topic.
type DomainTopicPropertiesResponseArgs struct {
	// Provisioning state of the domain topic.
	ProvisioningState pulumi.StringPtrInput `pulumi:"provisioningState"`
}

func (DomainTopicPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainTopicPropertiesResponse)(nil)).Elem()
}

func (i DomainTopicPropertiesResponseArgs) ToDomainTopicPropertiesResponseOutput() DomainTopicPropertiesResponseOutput {
	return i.ToDomainTopicPropertiesResponseOutputWithContext(context.Background())
}

func (i DomainTopicPropertiesResponseArgs) ToDomainTopicPropertiesResponseOutputWithContext(ctx context.Context) DomainTopicPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainTopicPropertiesResponseOutput)
}

func (i DomainTopicPropertiesResponseArgs) ToDomainTopicPropertiesResponsePtrOutput() DomainTopicPropertiesResponsePtrOutput {
	return i.ToDomainTopicPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i DomainTopicPropertiesResponseArgs) ToDomainTopicPropertiesResponsePtrOutputWithContext(ctx context.Context) DomainTopicPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainTopicPropertiesResponseOutput).ToDomainTopicPropertiesResponsePtrOutputWithContext(ctx)
}

// DomainTopicPropertiesResponsePtrInput is an input type that accepts DomainTopicPropertiesResponseArgs, DomainTopicPropertiesResponsePtr and DomainTopicPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `DomainTopicPropertiesResponsePtrInput` via:
//
//          DomainTopicPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type DomainTopicPropertiesResponsePtrInput interface {
	pulumi.Input

	ToDomainTopicPropertiesResponsePtrOutput() DomainTopicPropertiesResponsePtrOutput
	ToDomainTopicPropertiesResponsePtrOutputWithContext(context.Context) DomainTopicPropertiesResponsePtrOutput
}

type domainTopicPropertiesResponsePtrType DomainTopicPropertiesResponseArgs

func DomainTopicPropertiesResponsePtr(v *DomainTopicPropertiesResponseArgs) DomainTopicPropertiesResponsePtrInput {
	return (*domainTopicPropertiesResponsePtrType)(v)
}

func (*domainTopicPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainTopicPropertiesResponse)(nil)).Elem()
}

func (i *domainTopicPropertiesResponsePtrType) ToDomainTopicPropertiesResponsePtrOutput() DomainTopicPropertiesResponsePtrOutput {
	return i.ToDomainTopicPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *domainTopicPropertiesResponsePtrType) ToDomainTopicPropertiesResponsePtrOutputWithContext(ctx context.Context) DomainTopicPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainTopicPropertiesResponsePtrOutput)
}

// Properties of the Domain Topic.
type DomainTopicPropertiesResponseOutput struct{ *pulumi.OutputState }

func (DomainTopicPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainTopicPropertiesResponse)(nil)).Elem()
}

func (o DomainTopicPropertiesResponseOutput) ToDomainTopicPropertiesResponseOutput() DomainTopicPropertiesResponseOutput {
	return o
}

func (o DomainTopicPropertiesResponseOutput) ToDomainTopicPropertiesResponseOutputWithContext(ctx context.Context) DomainTopicPropertiesResponseOutput {
	return o
}

func (o DomainTopicPropertiesResponseOutput) ToDomainTopicPropertiesResponsePtrOutput() DomainTopicPropertiesResponsePtrOutput {
	return o.ToDomainTopicPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o DomainTopicPropertiesResponseOutput) ToDomainTopicPropertiesResponsePtrOutputWithContext(ctx context.Context) DomainTopicPropertiesResponsePtrOutput {
	return o.ApplyT(func(v DomainTopicPropertiesResponse) *DomainTopicPropertiesResponse {
		return &v
	}).(DomainTopicPropertiesResponsePtrOutput)
}

// Provisioning state of the domain topic.
func (o DomainTopicPropertiesResponseOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainTopicPropertiesResponse) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

type DomainTopicPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (DomainTopicPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainTopicPropertiesResponse)(nil)).Elem()
}

func (o DomainTopicPropertiesResponsePtrOutput) ToDomainTopicPropertiesResponsePtrOutput() DomainTopicPropertiesResponsePtrOutput {
	return o
}

func (o DomainTopicPropertiesResponsePtrOutput) ToDomainTopicPropertiesResponsePtrOutputWithContext(ctx context.Context) DomainTopicPropertiesResponsePtrOutput {
	return o
}

func (o DomainTopicPropertiesResponsePtrOutput) Elem() DomainTopicPropertiesResponseOutput {
	return o.ApplyT(func(v *DomainTopicPropertiesResponse) DomainTopicPropertiesResponse { return *v }).(DomainTopicPropertiesResponseOutput)
}

// Provisioning state of the domain topic.
func (o DomainTopicPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainTopicPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Information about the destination for an event subscription
type EventSubscriptionDestination struct {
	// Type of the endpoint for the event subscription destination
	EndpointType string `pulumi:"endpointType"`
}

// EventSubscriptionDestinationInput is an input type that accepts EventSubscriptionDestinationArgs and EventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `EventSubscriptionDestinationInput` via:
//
//          EventSubscriptionDestinationArgs{...}
type EventSubscriptionDestinationInput interface {
	pulumi.Input

	ToEventSubscriptionDestinationOutput() EventSubscriptionDestinationOutput
	ToEventSubscriptionDestinationOutputWithContext(context.Context) EventSubscriptionDestinationOutput
}

// Information about the destination for an event subscription
type EventSubscriptionDestinationArgs struct {
	// Type of the endpoint for the event subscription destination
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
}

func (EventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionDestination)(nil)).Elem()
}

func (i EventSubscriptionDestinationArgs) ToEventSubscriptionDestinationOutput() EventSubscriptionDestinationOutput {
	return i.ToEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i EventSubscriptionDestinationArgs) ToEventSubscriptionDestinationOutputWithContext(ctx context.Context) EventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDestinationOutput)
}

func (i EventSubscriptionDestinationArgs) ToEventSubscriptionDestinationPtrOutput() EventSubscriptionDestinationPtrOutput {
	return i.ToEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionDestinationArgs) ToEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDestinationOutput).ToEventSubscriptionDestinationPtrOutputWithContext(ctx)
}

// EventSubscriptionDestinationPtrInput is an input type that accepts EventSubscriptionDestinationArgs, EventSubscriptionDestinationPtr and EventSubscriptionDestinationPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionDestinationPtrInput` via:
//
//          EventSubscriptionDestinationArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionDestinationPtrInput interface {
	pulumi.Input

	ToEventSubscriptionDestinationPtrOutput() EventSubscriptionDestinationPtrOutput
	ToEventSubscriptionDestinationPtrOutputWithContext(context.Context) EventSubscriptionDestinationPtrOutput
}

type eventSubscriptionDestinationPtrType EventSubscriptionDestinationArgs

func EventSubscriptionDestinationPtr(v *EventSubscriptionDestinationArgs) EventSubscriptionDestinationPtrInput {
	return (*eventSubscriptionDestinationPtrType)(v)
}

func (*eventSubscriptionDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionDestination)(nil)).Elem()
}

func (i *eventSubscriptionDestinationPtrType) ToEventSubscriptionDestinationPtrOutput() EventSubscriptionDestinationPtrOutput {
	return i.ToEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionDestinationPtrType) ToEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDestinationPtrOutput)
}

// Information about the destination for an event subscription
type EventSubscriptionDestinationOutput struct{ *pulumi.OutputState }

func (EventSubscriptionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionDestination)(nil)).Elem()
}

func (o EventSubscriptionDestinationOutput) ToEventSubscriptionDestinationOutput() EventSubscriptionDestinationOutput {
	return o
}

func (o EventSubscriptionDestinationOutput) ToEventSubscriptionDestinationOutputWithContext(ctx context.Context) EventSubscriptionDestinationOutput {
	return o
}

func (o EventSubscriptionDestinationOutput) ToEventSubscriptionDestinationPtrOutput() EventSubscriptionDestinationPtrOutput {
	return o.ToEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionDestinationOutput) ToEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationPtrOutput {
	return o.ApplyT(func(v EventSubscriptionDestination) *EventSubscriptionDestination {
		return &v
	}).(EventSubscriptionDestinationPtrOutput)
}

// Type of the endpoint for the event subscription destination
func (o EventSubscriptionDestinationOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionDestination) string { return v.EndpointType }).(pulumi.StringOutput)
}

type EventSubscriptionDestinationPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionDestination)(nil)).Elem()
}

func (o EventSubscriptionDestinationPtrOutput) ToEventSubscriptionDestinationPtrOutput() EventSubscriptionDestinationPtrOutput {
	return o
}

func (o EventSubscriptionDestinationPtrOutput) ToEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationPtrOutput {
	return o
}

func (o EventSubscriptionDestinationPtrOutput) Elem() EventSubscriptionDestinationOutput {
	return o.ApplyT(func(v *EventSubscriptionDestination) EventSubscriptionDestination { return *v }).(EventSubscriptionDestinationOutput)
}

// Type of the endpoint for the event subscription destination
func (o EventSubscriptionDestinationPtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// Information about the destination for an event subscription
type EventSubscriptionDestinationResponse struct {
	// Type of the endpoint for the event subscription destination
	EndpointType string `pulumi:"endpointType"`
}

// EventSubscriptionDestinationResponseInput is an input type that accepts EventSubscriptionDestinationResponseArgs and EventSubscriptionDestinationResponseOutput values.
// You can construct a concrete instance of `EventSubscriptionDestinationResponseInput` via:
//
//          EventSubscriptionDestinationResponseArgs{...}
type EventSubscriptionDestinationResponseInput interface {
	pulumi.Input

	ToEventSubscriptionDestinationResponseOutput() EventSubscriptionDestinationResponseOutput
	ToEventSubscriptionDestinationResponseOutputWithContext(context.Context) EventSubscriptionDestinationResponseOutput
}

// Information about the destination for an event subscription
type EventSubscriptionDestinationResponseArgs struct {
	// Type of the endpoint for the event subscription destination
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
}

func (EventSubscriptionDestinationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionDestinationResponse)(nil)).Elem()
}

func (i EventSubscriptionDestinationResponseArgs) ToEventSubscriptionDestinationResponseOutput() EventSubscriptionDestinationResponseOutput {
	return i.ToEventSubscriptionDestinationResponseOutputWithContext(context.Background())
}

func (i EventSubscriptionDestinationResponseArgs) ToEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) EventSubscriptionDestinationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDestinationResponseOutput)
}

func (i EventSubscriptionDestinationResponseArgs) ToEventSubscriptionDestinationResponsePtrOutput() EventSubscriptionDestinationResponsePtrOutput {
	return i.ToEventSubscriptionDestinationResponsePtrOutputWithContext(context.Background())
}

func (i EventSubscriptionDestinationResponseArgs) ToEventSubscriptionDestinationResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDestinationResponseOutput).ToEventSubscriptionDestinationResponsePtrOutputWithContext(ctx)
}

// EventSubscriptionDestinationResponsePtrInput is an input type that accepts EventSubscriptionDestinationResponseArgs, EventSubscriptionDestinationResponsePtr and EventSubscriptionDestinationResponsePtrOutput values.
// You can construct a concrete instance of `EventSubscriptionDestinationResponsePtrInput` via:
//
//          EventSubscriptionDestinationResponseArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionDestinationResponsePtrInput interface {
	pulumi.Input

	ToEventSubscriptionDestinationResponsePtrOutput() EventSubscriptionDestinationResponsePtrOutput
	ToEventSubscriptionDestinationResponsePtrOutputWithContext(context.Context) EventSubscriptionDestinationResponsePtrOutput
}

type eventSubscriptionDestinationResponsePtrType EventSubscriptionDestinationResponseArgs

func EventSubscriptionDestinationResponsePtr(v *EventSubscriptionDestinationResponseArgs) EventSubscriptionDestinationResponsePtrInput {
	return (*eventSubscriptionDestinationResponsePtrType)(v)
}

func (*eventSubscriptionDestinationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionDestinationResponse)(nil)).Elem()
}

func (i *eventSubscriptionDestinationResponsePtrType) ToEventSubscriptionDestinationResponsePtrOutput() EventSubscriptionDestinationResponsePtrOutput {
	return i.ToEventSubscriptionDestinationResponsePtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionDestinationResponsePtrType) ToEventSubscriptionDestinationResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDestinationResponsePtrOutput)
}

// Information about the destination for an event subscription
type EventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (EventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o EventSubscriptionDestinationResponseOutput) ToEventSubscriptionDestinationResponseOutput() EventSubscriptionDestinationResponseOutput {
	return o
}

func (o EventSubscriptionDestinationResponseOutput) ToEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) EventSubscriptionDestinationResponseOutput {
	return o
}

func (o EventSubscriptionDestinationResponseOutput) ToEventSubscriptionDestinationResponsePtrOutput() EventSubscriptionDestinationResponsePtrOutput {
	return o.ToEventSubscriptionDestinationResponsePtrOutputWithContext(context.Background())
}

func (o EventSubscriptionDestinationResponseOutput) ToEventSubscriptionDestinationResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationResponsePtrOutput {
	return o.ApplyT(func(v EventSubscriptionDestinationResponse) *EventSubscriptionDestinationResponse {
		return &v
	}).(EventSubscriptionDestinationResponsePtrOutput)
}

// Type of the endpoint for the event subscription destination
func (o EventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

type EventSubscriptionDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o EventSubscriptionDestinationResponsePtrOutput) ToEventSubscriptionDestinationResponsePtrOutput() EventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o EventSubscriptionDestinationResponsePtrOutput) ToEventSubscriptionDestinationResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o EventSubscriptionDestinationResponsePtrOutput) Elem() EventSubscriptionDestinationResponseOutput {
	return o.ApplyT(func(v *EventSubscriptionDestinationResponse) EventSubscriptionDestinationResponse { return *v }).(EventSubscriptionDestinationResponseOutput)
}

// Type of the endpoint for the event subscription destination
func (o EventSubscriptionDestinationResponsePtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// Filter for the Event Subscription.
type EventSubscriptionFilter struct {
	// An array of advanced filters that are used for filtering event subscriptions.
	AdvancedFilters []AdvancedFilter `pulumi:"advancedFilters"`
	// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
	IncludedEventTypes []string `pulumi:"includedEventTypes"`
	// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
	// should be compared in a case sensitive manner.
	IsSubjectCaseSensitive *bool `pulumi:"isSubjectCaseSensitive"`
	// An optional string to filter events for an event subscription based on a resource path prefix.
	// The format of this depends on the publisher of the events.
	// Wildcard characters are not supported in this path.
	SubjectBeginsWith *string `pulumi:"subjectBeginsWith"`
	// An optional string to filter events for an event subscription based on a resource path suffix.
	// Wildcard characters are not supported in this path.
	SubjectEndsWith *string `pulumi:"subjectEndsWith"`
}

// EventSubscriptionFilterInput is an input type that accepts EventSubscriptionFilterArgs and EventSubscriptionFilterOutput values.
// You can construct a concrete instance of `EventSubscriptionFilterInput` via:
//
//          EventSubscriptionFilterArgs{...}
type EventSubscriptionFilterInput interface {
	pulumi.Input

	ToEventSubscriptionFilterOutput() EventSubscriptionFilterOutput
	ToEventSubscriptionFilterOutputWithContext(context.Context) EventSubscriptionFilterOutput
}

// Filter for the Event Subscription.
type EventSubscriptionFilterArgs struct {
	// An array of advanced filters that are used for filtering event subscriptions.
	AdvancedFilters AdvancedFilterArrayInput `pulumi:"advancedFilters"`
	// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
	IncludedEventTypes pulumi.StringArrayInput `pulumi:"includedEventTypes"`
	// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
	// should be compared in a case sensitive manner.
	IsSubjectCaseSensitive pulumi.BoolPtrInput `pulumi:"isSubjectCaseSensitive"`
	// An optional string to filter events for an event subscription based on a resource path prefix.
	// The format of this depends on the publisher of the events.
	// Wildcard characters are not supported in this path.
	SubjectBeginsWith pulumi.StringPtrInput `pulumi:"subjectBeginsWith"`
	// An optional string to filter events for an event subscription based on a resource path suffix.
	// Wildcard characters are not supported in this path.
	SubjectEndsWith pulumi.StringPtrInput `pulumi:"subjectEndsWith"`
}

func (EventSubscriptionFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionFilter)(nil)).Elem()
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterOutput() EventSubscriptionFilterOutput {
	return i.ToEventSubscriptionFilterOutputWithContext(context.Background())
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterOutputWithContext(ctx context.Context) EventSubscriptionFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterOutput)
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput {
	return i.ToEventSubscriptionFilterPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterOutput).ToEventSubscriptionFilterPtrOutputWithContext(ctx)
}

// EventSubscriptionFilterPtrInput is an input type that accepts EventSubscriptionFilterArgs, EventSubscriptionFilterPtr and EventSubscriptionFilterPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionFilterPtrInput` via:
//
//          EventSubscriptionFilterArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionFilterPtrInput interface {
	pulumi.Input

	ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput
	ToEventSubscriptionFilterPtrOutputWithContext(context.Context) EventSubscriptionFilterPtrOutput
}

type eventSubscriptionFilterPtrType EventSubscriptionFilterArgs

func EventSubscriptionFilterPtr(v *EventSubscriptionFilterArgs) EventSubscriptionFilterPtrInput {
	return (*eventSubscriptionFilterPtrType)(v)
}

func (*eventSubscriptionFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionFilter)(nil)).Elem()
}

func (i *eventSubscriptionFilterPtrType) ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput {
	return i.ToEventSubscriptionFilterPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionFilterPtrType) ToEventSubscriptionFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterPtrOutput)
}

// Filter for the Event Subscription.
type EventSubscriptionFilterOutput struct{ *pulumi.OutputState }

func (EventSubscriptionFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionFilter)(nil)).Elem()
}

func (o EventSubscriptionFilterOutput) ToEventSubscriptionFilterOutput() EventSubscriptionFilterOutput {
	return o
}

func (o EventSubscriptionFilterOutput) ToEventSubscriptionFilterOutputWithContext(ctx context.Context) EventSubscriptionFilterOutput {
	return o
}

func (o EventSubscriptionFilterOutput) ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput {
	return o.ToEventSubscriptionFilterPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionFilterOutput) ToEventSubscriptionFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionFilterPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) *EventSubscriptionFilter {
		return &v
	}).(EventSubscriptionFilterPtrOutput)
}

// An array of advanced filters that are used for filtering event subscriptions.
func (o EventSubscriptionFilterOutput) AdvancedFilters() AdvancedFilterArrayOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) []AdvancedFilter { return v.AdvancedFilters }).(AdvancedFilterArrayOutput)
}

// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
func (o EventSubscriptionFilterOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) []string { return v.IncludedEventTypes }).(pulumi.StringArrayOutput)
}

// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
// should be compared in a case sensitive manner.
func (o EventSubscriptionFilterOutput) IsSubjectCaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) *bool { return v.IsSubjectCaseSensitive }).(pulumi.BoolPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path prefix.
// The format of this depends on the publisher of the events.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) *string { return v.SubjectBeginsWith }).(pulumi.StringPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path suffix.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) *string { return v.SubjectEndsWith }).(pulumi.StringPtrOutput)
}

type EventSubscriptionFilterPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionFilter)(nil)).Elem()
}

func (o EventSubscriptionFilterPtrOutput) ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput {
	return o
}

func (o EventSubscriptionFilterPtrOutput) ToEventSubscriptionFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionFilterPtrOutput {
	return o
}

func (o EventSubscriptionFilterPtrOutput) Elem() EventSubscriptionFilterOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) EventSubscriptionFilter { return *v }).(EventSubscriptionFilterOutput)
}

// An array of advanced filters that are used for filtering event subscriptions.
func (o EventSubscriptionFilterPtrOutput) AdvancedFilters() AdvancedFilterArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) []AdvancedFilter {
		if v == nil {
			return nil
		}
		return v.AdvancedFilters
	}).(AdvancedFilterArrayOutput)
}

// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
func (o EventSubscriptionFilterPtrOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) []string {
		if v == nil {
			return nil
		}
		return v.IncludedEventTypes
	}).(pulumi.StringArrayOutput)
}

// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
// should be compared in a case sensitive manner.
func (o EventSubscriptionFilterPtrOutput) IsSubjectCaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) *bool {
		if v == nil {
			return nil
		}
		return v.IsSubjectCaseSensitive
	}).(pulumi.BoolPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path prefix.
// The format of this depends on the publisher of the events.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterPtrOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) *string {
		if v == nil {
			return nil
		}
		return v.SubjectBeginsWith
	}).(pulumi.StringPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path suffix.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterPtrOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) *string {
		if v == nil {
			return nil
		}
		return v.SubjectEndsWith
	}).(pulumi.StringPtrOutput)
}

// Filter for the Event Subscription.
type EventSubscriptionFilterResponse struct {
	// An array of advanced filters that are used for filtering event subscriptions.
	AdvancedFilters []AdvancedFilterResponse `pulumi:"advancedFilters"`
	// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
	IncludedEventTypes []string `pulumi:"includedEventTypes"`
	// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
	// should be compared in a case sensitive manner.
	IsSubjectCaseSensitive *bool `pulumi:"isSubjectCaseSensitive"`
	// An optional string to filter events for an event subscription based on a resource path prefix.
	// The format of this depends on the publisher of the events.
	// Wildcard characters are not supported in this path.
	SubjectBeginsWith *string `pulumi:"subjectBeginsWith"`
	// An optional string to filter events for an event subscription based on a resource path suffix.
	// Wildcard characters are not supported in this path.
	SubjectEndsWith *string `pulumi:"subjectEndsWith"`
}

// EventSubscriptionFilterResponseInput is an input type that accepts EventSubscriptionFilterResponseArgs and EventSubscriptionFilterResponseOutput values.
// You can construct a concrete instance of `EventSubscriptionFilterResponseInput` via:
//
//          EventSubscriptionFilterResponseArgs{...}
type EventSubscriptionFilterResponseInput interface {
	pulumi.Input

	ToEventSubscriptionFilterResponseOutput() EventSubscriptionFilterResponseOutput
	ToEventSubscriptionFilterResponseOutputWithContext(context.Context) EventSubscriptionFilterResponseOutput
}

// Filter for the Event Subscription.
type EventSubscriptionFilterResponseArgs struct {
	// An array of advanced filters that are used for filtering event subscriptions.
	AdvancedFilters AdvancedFilterResponseArrayInput `pulumi:"advancedFilters"`
	// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
	IncludedEventTypes pulumi.StringArrayInput `pulumi:"includedEventTypes"`
	// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
	// should be compared in a case sensitive manner.
	IsSubjectCaseSensitive pulumi.BoolPtrInput `pulumi:"isSubjectCaseSensitive"`
	// An optional string to filter events for an event subscription based on a resource path prefix.
	// The format of this depends on the publisher of the events.
	// Wildcard characters are not supported in this path.
	SubjectBeginsWith pulumi.StringPtrInput `pulumi:"subjectBeginsWith"`
	// An optional string to filter events for an event subscription based on a resource path suffix.
	// Wildcard characters are not supported in this path.
	SubjectEndsWith pulumi.StringPtrInput `pulumi:"subjectEndsWith"`
}

func (EventSubscriptionFilterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionFilterResponse)(nil)).Elem()
}

func (i EventSubscriptionFilterResponseArgs) ToEventSubscriptionFilterResponseOutput() EventSubscriptionFilterResponseOutput {
	return i.ToEventSubscriptionFilterResponseOutputWithContext(context.Background())
}

func (i EventSubscriptionFilterResponseArgs) ToEventSubscriptionFilterResponseOutputWithContext(ctx context.Context) EventSubscriptionFilterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterResponseOutput)
}

func (i EventSubscriptionFilterResponseArgs) ToEventSubscriptionFilterResponsePtrOutput() EventSubscriptionFilterResponsePtrOutput {
	return i.ToEventSubscriptionFilterResponsePtrOutputWithContext(context.Background())
}

func (i EventSubscriptionFilterResponseArgs) ToEventSubscriptionFilterResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterResponseOutput).ToEventSubscriptionFilterResponsePtrOutputWithContext(ctx)
}

// EventSubscriptionFilterResponsePtrInput is an input type that accepts EventSubscriptionFilterResponseArgs, EventSubscriptionFilterResponsePtr and EventSubscriptionFilterResponsePtrOutput values.
// You can construct a concrete instance of `EventSubscriptionFilterResponsePtrInput` via:
//
//          EventSubscriptionFilterResponseArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionFilterResponsePtrInput interface {
	pulumi.Input

	ToEventSubscriptionFilterResponsePtrOutput() EventSubscriptionFilterResponsePtrOutput
	ToEventSubscriptionFilterResponsePtrOutputWithContext(context.Context) EventSubscriptionFilterResponsePtrOutput
}

type eventSubscriptionFilterResponsePtrType EventSubscriptionFilterResponseArgs

func EventSubscriptionFilterResponsePtr(v *EventSubscriptionFilterResponseArgs) EventSubscriptionFilterResponsePtrInput {
	return (*eventSubscriptionFilterResponsePtrType)(v)
}

func (*eventSubscriptionFilterResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionFilterResponse)(nil)).Elem()
}

func (i *eventSubscriptionFilterResponsePtrType) ToEventSubscriptionFilterResponsePtrOutput() EventSubscriptionFilterResponsePtrOutput {
	return i.ToEventSubscriptionFilterResponsePtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionFilterResponsePtrType) ToEventSubscriptionFilterResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterResponsePtrOutput)
}

// Filter for the Event Subscription.
type EventSubscriptionFilterResponseOutput struct{ *pulumi.OutputState }

func (EventSubscriptionFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionFilterResponse)(nil)).Elem()
}

func (o EventSubscriptionFilterResponseOutput) ToEventSubscriptionFilterResponseOutput() EventSubscriptionFilterResponseOutput {
	return o
}

func (o EventSubscriptionFilterResponseOutput) ToEventSubscriptionFilterResponseOutputWithContext(ctx context.Context) EventSubscriptionFilterResponseOutput {
	return o
}

func (o EventSubscriptionFilterResponseOutput) ToEventSubscriptionFilterResponsePtrOutput() EventSubscriptionFilterResponsePtrOutput {
	return o.ToEventSubscriptionFilterResponsePtrOutputWithContext(context.Background())
}

func (o EventSubscriptionFilterResponseOutput) ToEventSubscriptionFilterResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionFilterResponsePtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *EventSubscriptionFilterResponse {
		return &v
	}).(EventSubscriptionFilterResponsePtrOutput)
}

// An array of advanced filters that are used for filtering event subscriptions.
func (o EventSubscriptionFilterResponseOutput) AdvancedFilters() AdvancedFilterResponseArrayOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) []AdvancedFilterResponse { return v.AdvancedFilters }).(AdvancedFilterResponseArrayOutput)
}

// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
func (o EventSubscriptionFilterResponseOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) []string { return v.IncludedEventTypes }).(pulumi.StringArrayOutput)
}

// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
// should be compared in a case sensitive manner.
func (o EventSubscriptionFilterResponseOutput) IsSubjectCaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *bool { return v.IsSubjectCaseSensitive }).(pulumi.BoolPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path prefix.
// The format of this depends on the publisher of the events.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponseOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *string { return v.SubjectBeginsWith }).(pulumi.StringPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path suffix.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponseOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *string { return v.SubjectEndsWith }).(pulumi.StringPtrOutput)
}

type EventSubscriptionFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionFilterResponse)(nil)).Elem()
}

func (o EventSubscriptionFilterResponsePtrOutput) ToEventSubscriptionFilterResponsePtrOutput() EventSubscriptionFilterResponsePtrOutput {
	return o
}

func (o EventSubscriptionFilterResponsePtrOutput) ToEventSubscriptionFilterResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionFilterResponsePtrOutput {
	return o
}

func (o EventSubscriptionFilterResponsePtrOutput) Elem() EventSubscriptionFilterResponseOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) EventSubscriptionFilterResponse { return *v }).(EventSubscriptionFilterResponseOutput)
}

// An array of advanced filters that are used for filtering event subscriptions.
func (o EventSubscriptionFilterResponsePtrOutput) AdvancedFilters() AdvancedFilterResponseArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) []AdvancedFilterResponse {
		if v == nil {
			return nil
		}
		return v.AdvancedFilters
	}).(AdvancedFilterResponseArrayOutput)
}

// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
func (o EventSubscriptionFilterResponsePtrOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) []string {
		if v == nil {
			return nil
		}
		return v.IncludedEventTypes
	}).(pulumi.StringArrayOutput)
}

// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
// should be compared in a case sensitive manner.
func (o EventSubscriptionFilterResponsePtrOutput) IsSubjectCaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsSubjectCaseSensitive
	}).(pulumi.BoolPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path prefix.
// The format of this depends on the publisher of the events.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponsePtrOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubjectBeginsWith
	}).(pulumi.StringPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path suffix.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponsePtrOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubjectEndsWith
	}).(pulumi.StringPtrOutput)
}

// Properties of the Event Subscription
type EventSubscriptionPropertiesResponse struct {
	// The DeadLetter destination of the event subscription.
	DeadLetterDestination *DeadLetterDestinationResponse `pulumi:"deadLetterDestination"`
	// Information about the destination where events have to be delivered for the event subscription.
	Destination *EventSubscriptionDestinationResponse `pulumi:"destination"`
	// Expiration time of the event subscription.
	ExpirationTimeUtc *string `pulumi:"expirationTimeUtc"`
	// Information about the filter for the event subscription.
	Filter *EventSubscriptionFilterResponse `pulumi:"filter"`
	// List of user defined labels.
	Labels []string `pulumi:"labels"`
	// Provisioning state of the event subscription.
	ProvisioningState string `pulumi:"provisioningState"`
	// The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events.
	RetryPolicy *RetryPolicyResponse `pulumi:"retryPolicy"`
	// Name of the topic of the event subscription.
	Topic string `pulumi:"topic"`
}

// EventSubscriptionPropertiesResponseInput is an input type that accepts EventSubscriptionPropertiesResponseArgs and EventSubscriptionPropertiesResponseOutput values.
// You can construct a concrete instance of `EventSubscriptionPropertiesResponseInput` via:
//
//          EventSubscriptionPropertiesResponseArgs{...}
type EventSubscriptionPropertiesResponseInput interface {
	pulumi.Input

	ToEventSubscriptionPropertiesResponseOutput() EventSubscriptionPropertiesResponseOutput
	ToEventSubscriptionPropertiesResponseOutputWithContext(context.Context) EventSubscriptionPropertiesResponseOutput
}

// Properties of the Event Subscription
type EventSubscriptionPropertiesResponseArgs struct {
	// The DeadLetter destination of the event subscription.
	DeadLetterDestination DeadLetterDestinationResponsePtrInput `pulumi:"deadLetterDestination"`
	// Information about the destination where events have to be delivered for the event subscription.
	Destination EventSubscriptionDestinationResponsePtrInput `pulumi:"destination"`
	// Expiration time of the event subscription.
	ExpirationTimeUtc pulumi.StringPtrInput `pulumi:"expirationTimeUtc"`
	// Information about the filter for the event subscription.
	Filter EventSubscriptionFilterResponsePtrInput `pulumi:"filter"`
	// List of user defined labels.
	Labels pulumi.StringArrayInput `pulumi:"labels"`
	// Provisioning state of the event subscription.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events.
	RetryPolicy RetryPolicyResponsePtrInput `pulumi:"retryPolicy"`
	// Name of the topic of the event subscription.
	Topic pulumi.StringInput `pulumi:"topic"`
}

func (EventSubscriptionPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionPropertiesResponse)(nil)).Elem()
}

func (i EventSubscriptionPropertiesResponseArgs) ToEventSubscriptionPropertiesResponseOutput() EventSubscriptionPropertiesResponseOutput {
	return i.ToEventSubscriptionPropertiesResponseOutputWithContext(context.Background())
}

func (i EventSubscriptionPropertiesResponseArgs) ToEventSubscriptionPropertiesResponseOutputWithContext(ctx context.Context) EventSubscriptionPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionPropertiesResponseOutput)
}

func (i EventSubscriptionPropertiesResponseArgs) ToEventSubscriptionPropertiesResponsePtrOutput() EventSubscriptionPropertiesResponsePtrOutput {
	return i.ToEventSubscriptionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i EventSubscriptionPropertiesResponseArgs) ToEventSubscriptionPropertiesResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionPropertiesResponseOutput).ToEventSubscriptionPropertiesResponsePtrOutputWithContext(ctx)
}

// EventSubscriptionPropertiesResponsePtrInput is an input type that accepts EventSubscriptionPropertiesResponseArgs, EventSubscriptionPropertiesResponsePtr and EventSubscriptionPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `EventSubscriptionPropertiesResponsePtrInput` via:
//
//          EventSubscriptionPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionPropertiesResponsePtrInput interface {
	pulumi.Input

	ToEventSubscriptionPropertiesResponsePtrOutput() EventSubscriptionPropertiesResponsePtrOutput
	ToEventSubscriptionPropertiesResponsePtrOutputWithContext(context.Context) EventSubscriptionPropertiesResponsePtrOutput
}

type eventSubscriptionPropertiesResponsePtrType EventSubscriptionPropertiesResponseArgs

func EventSubscriptionPropertiesResponsePtr(v *EventSubscriptionPropertiesResponseArgs) EventSubscriptionPropertiesResponsePtrInput {
	return (*eventSubscriptionPropertiesResponsePtrType)(v)
}

func (*eventSubscriptionPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionPropertiesResponse)(nil)).Elem()
}

func (i *eventSubscriptionPropertiesResponsePtrType) ToEventSubscriptionPropertiesResponsePtrOutput() EventSubscriptionPropertiesResponsePtrOutput {
	return i.ToEventSubscriptionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionPropertiesResponsePtrType) ToEventSubscriptionPropertiesResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionPropertiesResponsePtrOutput)
}

// Properties of the Event Subscription
type EventSubscriptionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (EventSubscriptionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionPropertiesResponse)(nil)).Elem()
}

func (o EventSubscriptionPropertiesResponseOutput) ToEventSubscriptionPropertiesResponseOutput() EventSubscriptionPropertiesResponseOutput {
	return o
}

func (o EventSubscriptionPropertiesResponseOutput) ToEventSubscriptionPropertiesResponseOutputWithContext(ctx context.Context) EventSubscriptionPropertiesResponseOutput {
	return o
}

func (o EventSubscriptionPropertiesResponseOutput) ToEventSubscriptionPropertiesResponsePtrOutput() EventSubscriptionPropertiesResponsePtrOutput {
	return o.ToEventSubscriptionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o EventSubscriptionPropertiesResponseOutput) ToEventSubscriptionPropertiesResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v EventSubscriptionPropertiesResponse) *EventSubscriptionPropertiesResponse {
		return &v
	}).(EventSubscriptionPropertiesResponsePtrOutput)
}

// The DeadLetter destination of the event subscription.
func (o EventSubscriptionPropertiesResponseOutput) DeadLetterDestination() DeadLetterDestinationResponsePtrOutput {
	return o.ApplyT(func(v EventSubscriptionPropertiesResponse) *DeadLetterDestinationResponse {
		return v.DeadLetterDestination
	}).(DeadLetterDestinationResponsePtrOutput)
}

// Information about the destination where events have to be delivered for the event subscription.
func (o EventSubscriptionPropertiesResponseOutput) Destination() EventSubscriptionDestinationResponsePtrOutput {
	return o.ApplyT(func(v EventSubscriptionPropertiesResponse) *EventSubscriptionDestinationResponse {
		return v.Destination
	}).(EventSubscriptionDestinationResponsePtrOutput)
}

// Expiration time of the event subscription.
func (o EventSubscriptionPropertiesResponseOutput) ExpirationTimeUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionPropertiesResponse) *string { return v.ExpirationTimeUtc }).(pulumi.StringPtrOutput)
}

// Information about the filter for the event subscription.
func (o EventSubscriptionPropertiesResponseOutput) Filter() EventSubscriptionFilterResponsePtrOutput {
	return o.ApplyT(func(v EventSubscriptionPropertiesResponse) *EventSubscriptionFilterResponse { return v.Filter }).(EventSubscriptionFilterResponsePtrOutput)
}

// List of user defined labels.
func (o EventSubscriptionPropertiesResponseOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionPropertiesResponse) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

// Provisioning state of the event subscription.
func (o EventSubscriptionPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events.
func (o EventSubscriptionPropertiesResponseOutput) RetryPolicy() RetryPolicyResponsePtrOutput {
	return o.ApplyT(func(v EventSubscriptionPropertiesResponse) *RetryPolicyResponse { return v.RetryPolicy }).(RetryPolicyResponsePtrOutput)
}

// Name of the topic of the event subscription.
func (o EventSubscriptionPropertiesResponseOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionPropertiesResponse) string { return v.Topic }).(pulumi.StringOutput)
}

type EventSubscriptionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionPropertiesResponse)(nil)).Elem()
}

func (o EventSubscriptionPropertiesResponsePtrOutput) ToEventSubscriptionPropertiesResponsePtrOutput() EventSubscriptionPropertiesResponsePtrOutput {
	return o
}

func (o EventSubscriptionPropertiesResponsePtrOutput) ToEventSubscriptionPropertiesResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionPropertiesResponsePtrOutput {
	return o
}

func (o EventSubscriptionPropertiesResponsePtrOutput) Elem() EventSubscriptionPropertiesResponseOutput {
	return o.ApplyT(func(v *EventSubscriptionPropertiesResponse) EventSubscriptionPropertiesResponse { return *v }).(EventSubscriptionPropertiesResponseOutput)
}

// The DeadLetter destination of the event subscription.
func (o EventSubscriptionPropertiesResponsePtrOutput) DeadLetterDestination() DeadLetterDestinationResponsePtrOutput {
	return o.ApplyT(func(v *EventSubscriptionPropertiesResponse) *DeadLetterDestinationResponse {
		if v == nil {
			return nil
		}
		return v.DeadLetterDestination
	}).(DeadLetterDestinationResponsePtrOutput)
}

// Information about the destination where events have to be delivered for the event subscription.
func (o EventSubscriptionPropertiesResponsePtrOutput) Destination() EventSubscriptionDestinationResponsePtrOutput {
	return o.ApplyT(func(v *EventSubscriptionPropertiesResponse) *EventSubscriptionDestinationResponse {
		if v == nil {
			return nil
		}
		return v.Destination
	}).(EventSubscriptionDestinationResponsePtrOutput)
}

// Expiration time of the event subscription.
func (o EventSubscriptionPropertiesResponsePtrOutput) ExpirationTimeUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationTimeUtc
	}).(pulumi.StringPtrOutput)
}

// Information about the filter for the event subscription.
func (o EventSubscriptionPropertiesResponsePtrOutput) Filter() EventSubscriptionFilterResponsePtrOutput {
	return o.ApplyT(func(v *EventSubscriptionPropertiesResponse) *EventSubscriptionFilterResponse {
		if v == nil {
			return nil
		}
		return v.Filter
	}).(EventSubscriptionFilterResponsePtrOutput)
}

// List of user defined labels.
func (o EventSubscriptionPropertiesResponsePtrOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringArrayOutput)
}

// Provisioning state of the event subscription.
func (o EventSubscriptionPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events.
func (o EventSubscriptionPropertiesResponsePtrOutput) RetryPolicy() RetryPolicyResponsePtrOutput {
	return o.ApplyT(func(v *EventSubscriptionPropertiesResponse) *RetryPolicyResponse {
		if v == nil {
			return nil
		}
		return v.RetryPolicy
	}).(RetryPolicyResponsePtrOutput)
}

// Name of the topic of the event subscription.
func (o EventSubscriptionPropertiesResponsePtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Topic
	}).(pulumi.StringPtrOutput)
}

// Information about the retry policy for an event subscription.
type RetryPolicy struct {
	// Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes *int `pulumi:"eventTimeToLiveInMinutes"`
	// Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts *int `pulumi:"maxDeliveryAttempts"`
}

// RetryPolicyInput is an input type that accepts RetryPolicyArgs and RetryPolicyOutput values.
// You can construct a concrete instance of `RetryPolicyInput` via:
//
//          RetryPolicyArgs{...}
type RetryPolicyInput interface {
	pulumi.Input

	ToRetryPolicyOutput() RetryPolicyOutput
	ToRetryPolicyOutputWithContext(context.Context) RetryPolicyOutput
}

// Information about the retry policy for an event subscription.
type RetryPolicyArgs struct {
	// Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes pulumi.IntPtrInput `pulumi:"eventTimeToLiveInMinutes"`
	// Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts pulumi.IntPtrInput `pulumi:"maxDeliveryAttempts"`
}

func (RetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicy)(nil)).Elem()
}

func (i RetryPolicyArgs) ToRetryPolicyOutput() RetryPolicyOutput {
	return i.ToRetryPolicyOutputWithContext(context.Background())
}

func (i RetryPolicyArgs) ToRetryPolicyOutputWithContext(ctx context.Context) RetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyOutput)
}

func (i RetryPolicyArgs) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return i.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (i RetryPolicyArgs) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyOutput).ToRetryPolicyPtrOutputWithContext(ctx)
}

// RetryPolicyPtrInput is an input type that accepts RetryPolicyArgs, RetryPolicyPtr and RetryPolicyPtrOutput values.
// You can construct a concrete instance of `RetryPolicyPtrInput` via:
//
//          RetryPolicyArgs{...}
//
//  or:
//
//          nil
type RetryPolicyPtrInput interface {
	pulumi.Input

	ToRetryPolicyPtrOutput() RetryPolicyPtrOutput
	ToRetryPolicyPtrOutputWithContext(context.Context) RetryPolicyPtrOutput
}

type retryPolicyPtrType RetryPolicyArgs

func RetryPolicyPtr(v *RetryPolicyArgs) RetryPolicyPtrInput {
	return (*retryPolicyPtrType)(v)
}

func (*retryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicy)(nil)).Elem()
}

func (i *retryPolicyPtrType) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return i.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *retryPolicyPtrType) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyPtrOutput)
}

// Information about the retry policy for an event subscription.
type RetryPolicyOutput struct{ *pulumi.OutputState }

func (RetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicy)(nil)).Elem()
}

func (o RetryPolicyOutput) ToRetryPolicyOutput() RetryPolicyOutput {
	return o
}

func (o RetryPolicyOutput) ToRetryPolicyOutputWithContext(ctx context.Context) RetryPolicyOutput {
	return o
}

func (o RetryPolicyOutput) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return o.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (o RetryPolicyOutput) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return o.ApplyT(func(v RetryPolicy) *RetryPolicy {
		return &v
	}).(RetryPolicyPtrOutput)
}

// Time To Live (in minutes) for events.
func (o RetryPolicyOutput) EventTimeToLiveInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryPolicy) *int { return v.EventTimeToLiveInMinutes }).(pulumi.IntPtrOutput)
}

// Maximum number of delivery retry attempts for events.
func (o RetryPolicyOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryPolicy) *int { return v.MaxDeliveryAttempts }).(pulumi.IntPtrOutput)
}

type RetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (RetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicy)(nil)).Elem()
}

func (o RetryPolicyPtrOutput) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return o
}

func (o RetryPolicyPtrOutput) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return o
}

func (o RetryPolicyPtrOutput) Elem() RetryPolicyOutput {
	return o.ApplyT(func(v *RetryPolicy) RetryPolicy { return *v }).(RetryPolicyOutput)
}

// Time To Live (in minutes) for events.
func (o RetryPolicyPtrOutput) EventTimeToLiveInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryPolicy) *int {
		if v == nil {
			return nil
		}
		return v.EventTimeToLiveInMinutes
	}).(pulumi.IntPtrOutput)
}

// Maximum number of delivery retry attempts for events.
func (o RetryPolicyPtrOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryAttempts
	}).(pulumi.IntPtrOutput)
}

// Information about the retry policy for an event subscription.
type RetryPolicyResponse struct {
	// Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes *int `pulumi:"eventTimeToLiveInMinutes"`
	// Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts *int `pulumi:"maxDeliveryAttempts"`
}

// RetryPolicyResponseInput is an input type that accepts RetryPolicyResponseArgs and RetryPolicyResponseOutput values.
// You can construct a concrete instance of `RetryPolicyResponseInput` via:
//
//          RetryPolicyResponseArgs{...}
type RetryPolicyResponseInput interface {
	pulumi.Input

	ToRetryPolicyResponseOutput() RetryPolicyResponseOutput
	ToRetryPolicyResponseOutputWithContext(context.Context) RetryPolicyResponseOutput
}

// Information about the retry policy for an event subscription.
type RetryPolicyResponseArgs struct {
	// Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes pulumi.IntPtrInput `pulumi:"eventTimeToLiveInMinutes"`
	// Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts pulumi.IntPtrInput `pulumi:"maxDeliveryAttempts"`
}

func (RetryPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicyResponse)(nil)).Elem()
}

func (i RetryPolicyResponseArgs) ToRetryPolicyResponseOutput() RetryPolicyResponseOutput {
	return i.ToRetryPolicyResponseOutputWithContext(context.Background())
}

func (i RetryPolicyResponseArgs) ToRetryPolicyResponseOutputWithContext(ctx context.Context) RetryPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyResponseOutput)
}

func (i RetryPolicyResponseArgs) ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput {
	return i.ToRetryPolicyResponsePtrOutputWithContext(context.Background())
}

func (i RetryPolicyResponseArgs) ToRetryPolicyResponsePtrOutputWithContext(ctx context.Context) RetryPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyResponseOutput).ToRetryPolicyResponsePtrOutputWithContext(ctx)
}

// RetryPolicyResponsePtrInput is an input type that accepts RetryPolicyResponseArgs, RetryPolicyResponsePtr and RetryPolicyResponsePtrOutput values.
// You can construct a concrete instance of `RetryPolicyResponsePtrInput` via:
//
//          RetryPolicyResponseArgs{...}
//
//  or:
//
//          nil
type RetryPolicyResponsePtrInput interface {
	pulumi.Input

	ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput
	ToRetryPolicyResponsePtrOutputWithContext(context.Context) RetryPolicyResponsePtrOutput
}

type retryPolicyResponsePtrType RetryPolicyResponseArgs

func RetryPolicyResponsePtr(v *RetryPolicyResponseArgs) RetryPolicyResponsePtrInput {
	return (*retryPolicyResponsePtrType)(v)
}

func (*retryPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicyResponse)(nil)).Elem()
}

func (i *retryPolicyResponsePtrType) ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput {
	return i.ToRetryPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *retryPolicyResponsePtrType) ToRetryPolicyResponsePtrOutputWithContext(ctx context.Context) RetryPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyResponsePtrOutput)
}

// Information about the retry policy for an event subscription.
type RetryPolicyResponseOutput struct{ *pulumi.OutputState }

func (RetryPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicyResponse)(nil)).Elem()
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponseOutput() RetryPolicyResponseOutput {
	return o
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponseOutputWithContext(ctx context.Context) RetryPolicyResponseOutput {
	return o
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput {
	return o.ToRetryPolicyResponsePtrOutputWithContext(context.Background())
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponsePtrOutputWithContext(ctx context.Context) RetryPolicyResponsePtrOutput {
	return o.ApplyT(func(v RetryPolicyResponse) *RetryPolicyResponse {
		return &v
	}).(RetryPolicyResponsePtrOutput)
}

// Time To Live (in minutes) for events.
func (o RetryPolicyResponseOutput) EventTimeToLiveInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryPolicyResponse) *int { return v.EventTimeToLiveInMinutes }).(pulumi.IntPtrOutput)
}

// Maximum number of delivery retry attempts for events.
func (o RetryPolicyResponseOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryPolicyResponse) *int { return v.MaxDeliveryAttempts }).(pulumi.IntPtrOutput)
}

type RetryPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (RetryPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicyResponse)(nil)).Elem()
}

func (o RetryPolicyResponsePtrOutput) ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput {
	return o
}

func (o RetryPolicyResponsePtrOutput) ToRetryPolicyResponsePtrOutputWithContext(ctx context.Context) RetryPolicyResponsePtrOutput {
	return o
}

func (o RetryPolicyResponsePtrOutput) Elem() RetryPolicyResponseOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) RetryPolicyResponse { return *v }).(RetryPolicyResponseOutput)
}

// Time To Live (in minutes) for events.
func (o RetryPolicyResponsePtrOutput) EventTimeToLiveInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.EventTimeToLiveInMinutes
	}).(pulumi.IntPtrOutput)
}

// Maximum number of delivery retry attempts for events.
func (o RetryPolicyResponsePtrOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryAttempts
	}).(pulumi.IntPtrOutput)
}

// Properties of the Topic
type TopicPropertiesResponse struct {
	// Endpoint for the topic.
	Endpoint string `pulumi:"endpoint"`
	// Provisioning state of the topic.
	ProvisioningState string `pulumi:"provisioningState"`
}

// TopicPropertiesResponseInput is an input type that accepts TopicPropertiesResponseArgs and TopicPropertiesResponseOutput values.
// You can construct a concrete instance of `TopicPropertiesResponseInput` via:
//
//          TopicPropertiesResponseArgs{...}
type TopicPropertiesResponseInput interface {
	pulumi.Input

	ToTopicPropertiesResponseOutput() TopicPropertiesResponseOutput
	ToTopicPropertiesResponseOutputWithContext(context.Context) TopicPropertiesResponseOutput
}

// Properties of the Topic
type TopicPropertiesResponseArgs struct {
	// Endpoint for the topic.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// Provisioning state of the topic.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
}

func (TopicPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicPropertiesResponse)(nil)).Elem()
}

func (i TopicPropertiesResponseArgs) ToTopicPropertiesResponseOutput() TopicPropertiesResponseOutput {
	return i.ToTopicPropertiesResponseOutputWithContext(context.Background())
}

func (i TopicPropertiesResponseArgs) ToTopicPropertiesResponseOutputWithContext(ctx context.Context) TopicPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPropertiesResponseOutput)
}

func (i TopicPropertiesResponseArgs) ToTopicPropertiesResponsePtrOutput() TopicPropertiesResponsePtrOutput {
	return i.ToTopicPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i TopicPropertiesResponseArgs) ToTopicPropertiesResponsePtrOutputWithContext(ctx context.Context) TopicPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPropertiesResponseOutput).ToTopicPropertiesResponsePtrOutputWithContext(ctx)
}

// TopicPropertiesResponsePtrInput is an input type that accepts TopicPropertiesResponseArgs, TopicPropertiesResponsePtr and TopicPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `TopicPropertiesResponsePtrInput` via:
//
//          TopicPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type TopicPropertiesResponsePtrInput interface {
	pulumi.Input

	ToTopicPropertiesResponsePtrOutput() TopicPropertiesResponsePtrOutput
	ToTopicPropertiesResponsePtrOutputWithContext(context.Context) TopicPropertiesResponsePtrOutput
}

type topicPropertiesResponsePtrType TopicPropertiesResponseArgs

func TopicPropertiesResponsePtr(v *TopicPropertiesResponseArgs) TopicPropertiesResponsePtrInput {
	return (*topicPropertiesResponsePtrType)(v)
}

func (*topicPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicPropertiesResponse)(nil)).Elem()
}

func (i *topicPropertiesResponsePtrType) ToTopicPropertiesResponsePtrOutput() TopicPropertiesResponsePtrOutput {
	return i.ToTopicPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *topicPropertiesResponsePtrType) ToTopicPropertiesResponsePtrOutputWithContext(ctx context.Context) TopicPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPropertiesResponsePtrOutput)
}

// Properties of the Topic
type TopicPropertiesResponseOutput struct{ *pulumi.OutputState }

func (TopicPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicPropertiesResponse)(nil)).Elem()
}

func (o TopicPropertiesResponseOutput) ToTopicPropertiesResponseOutput() TopicPropertiesResponseOutput {
	return o
}

func (o TopicPropertiesResponseOutput) ToTopicPropertiesResponseOutputWithContext(ctx context.Context) TopicPropertiesResponseOutput {
	return o
}

func (o TopicPropertiesResponseOutput) ToTopicPropertiesResponsePtrOutput() TopicPropertiesResponsePtrOutput {
	return o.ToTopicPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o TopicPropertiesResponseOutput) ToTopicPropertiesResponsePtrOutputWithContext(ctx context.Context) TopicPropertiesResponsePtrOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) *TopicPropertiesResponse {
		return &v
	}).(TopicPropertiesResponsePtrOutput)
}

// Endpoint for the topic.
func (o TopicPropertiesResponseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Provisioning state of the topic.
func (o TopicPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v TopicPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type TopicPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (TopicPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicPropertiesResponse)(nil)).Elem()
}

func (o TopicPropertiesResponsePtrOutput) ToTopicPropertiesResponsePtrOutput() TopicPropertiesResponsePtrOutput {
	return o
}

func (o TopicPropertiesResponsePtrOutput) ToTopicPropertiesResponsePtrOutputWithContext(ctx context.Context) TopicPropertiesResponsePtrOutput {
	return o
}

func (o TopicPropertiesResponsePtrOutput) Elem() TopicPropertiesResponseOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) TopicPropertiesResponse { return *v }).(TopicPropertiesResponseOutput)
}

// Endpoint for the topic.
func (o TopicPropertiesResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Provisioning state of the topic.
func (o TopicPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AdvancedFilterOutput{})
	pulumi.RegisterOutputType(AdvancedFilterArrayOutput{})
	pulumi.RegisterOutputType(AdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(AdvancedFilterResponseArrayOutput{})
	pulumi.RegisterOutputType(DeadLetterDestinationOutput{})
	pulumi.RegisterOutputType(DeadLetterDestinationPtrOutput{})
	pulumi.RegisterOutputType(DeadLetterDestinationResponseOutput{})
	pulumi.RegisterOutputType(DeadLetterDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(DomainPropertiesResponseOutput{})
	pulumi.RegisterOutputType(DomainPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(DomainTopicPropertiesResponseOutput{})
	pulumi.RegisterOutputType(DomainTopicPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(EventSubscriptionDestinationPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionDestinationResponseOutput{})
	pulumi.RegisterOutputType(EventSubscriptionDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterResponseOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(EventSubscriptionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(RetryPolicyOutput{})
	pulumi.RegisterOutputType(RetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(RetryPolicyResponseOutput{})
	pulumi.RegisterOutputType(RetryPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(TopicPropertiesResponseOutput{})
	pulumi.RegisterOutputType(TopicPropertiesResponsePtrOutput{})
}
