// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190201preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// This is the base type that represents an advanced filter. To configure an advanced filter, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class such as BoolEqualsAdvancedFilter, NumberInAdvancedFilter, StringEqualsAdvancedFilter etc. depending on the type of the key based on which you want to filter.
type AdvancedFilter struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
}

// AdvancedFilterInput is an input type that accepts AdvancedFilterArgs and AdvancedFilterOutput values.
// You can construct a concrete instance of `AdvancedFilterInput` via:
//
//          AdvancedFilterArgs{...}
type AdvancedFilterInput interface {
	pulumi.Input

	ToAdvancedFilterOutput() AdvancedFilterOutput
	ToAdvancedFilterOutputWithContext(context.Context) AdvancedFilterOutput
}

// This is the base type that represents an advanced filter. To configure an advanced filter, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class such as BoolEqualsAdvancedFilter, NumberInAdvancedFilter, StringEqualsAdvancedFilter etc. depending on the type of the key based on which you want to filter.
type AdvancedFilterArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
}

func (AdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedFilter)(nil)).Elem()
}

func (i AdvancedFilterArgs) ToAdvancedFilterOutput() AdvancedFilterOutput {
	return i.ToAdvancedFilterOutputWithContext(context.Background())
}

func (i AdvancedFilterArgs) ToAdvancedFilterOutputWithContext(ctx context.Context) AdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedFilterOutput)
}

// AdvancedFilterArrayInput is an input type that accepts AdvancedFilterArray and AdvancedFilterArrayOutput values.
// You can construct a concrete instance of `AdvancedFilterArrayInput` via:
//
//          AdvancedFilterArray{ AdvancedFilterArgs{...} }
type AdvancedFilterArrayInput interface {
	pulumi.Input

	ToAdvancedFilterArrayOutput() AdvancedFilterArrayOutput
	ToAdvancedFilterArrayOutputWithContext(context.Context) AdvancedFilterArrayOutput
}

type AdvancedFilterArray []AdvancedFilterInput

func (AdvancedFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdvancedFilter)(nil)).Elem()
}

func (i AdvancedFilterArray) ToAdvancedFilterArrayOutput() AdvancedFilterArrayOutput {
	return i.ToAdvancedFilterArrayOutputWithContext(context.Background())
}

func (i AdvancedFilterArray) ToAdvancedFilterArrayOutputWithContext(ctx context.Context) AdvancedFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedFilterArrayOutput)
}

// This is the base type that represents an advanced filter. To configure an advanced filter, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class such as BoolEqualsAdvancedFilter, NumberInAdvancedFilter, StringEqualsAdvancedFilter etc. depending on the type of the key based on which you want to filter.
type AdvancedFilterOutput struct{ *pulumi.OutputState }

func (AdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedFilter)(nil)).Elem()
}

func (o AdvancedFilterOutput) ToAdvancedFilterOutput() AdvancedFilterOutput {
	return o
}

func (o AdvancedFilterOutput) ToAdvancedFilterOutputWithContext(ctx context.Context) AdvancedFilterOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o AdvancedFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdvancedFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
func (o AdvancedFilterOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v AdvancedFilter) string { return v.OperatorType }).(pulumi.StringOutput)
}

type AdvancedFilterArrayOutput struct{ *pulumi.OutputState }

func (AdvancedFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdvancedFilter)(nil)).Elem()
}

func (o AdvancedFilterArrayOutput) ToAdvancedFilterArrayOutput() AdvancedFilterArrayOutput {
	return o
}

func (o AdvancedFilterArrayOutput) ToAdvancedFilterArrayOutputWithContext(ctx context.Context) AdvancedFilterArrayOutput {
	return o
}

func (o AdvancedFilterArrayOutput) Index(i pulumi.IntInput) AdvancedFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AdvancedFilter {
		return vs[0].([]AdvancedFilter)[vs[1].(int)]
	}).(AdvancedFilterOutput)
}

// This is the base type that represents an advanced filter. To configure an advanced filter, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class such as BoolEqualsAdvancedFilter, NumberInAdvancedFilter, StringEqualsAdvancedFilter etc. depending on the type of the key based on which you want to filter.
type AdvancedFilterResponse struct {
	// The field/property in the event based on which you want to filter.
	Key *string `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType string `pulumi:"operatorType"`
}

// AdvancedFilterResponseInput is an input type that accepts AdvancedFilterResponseArgs and AdvancedFilterResponseOutput values.
// You can construct a concrete instance of `AdvancedFilterResponseInput` via:
//
//          AdvancedFilterResponseArgs{...}
type AdvancedFilterResponseInput interface {
	pulumi.Input

	ToAdvancedFilterResponseOutput() AdvancedFilterResponseOutput
	ToAdvancedFilterResponseOutputWithContext(context.Context) AdvancedFilterResponseOutput
}

// This is the base type that represents an advanced filter. To configure an advanced filter, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class such as BoolEqualsAdvancedFilter, NumberInAdvancedFilter, StringEqualsAdvancedFilter etc. depending on the type of the key based on which you want to filter.
type AdvancedFilterResponseArgs struct {
	// The field/property in the event based on which you want to filter.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
	OperatorType pulumi.StringInput `pulumi:"operatorType"`
}

func (AdvancedFilterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedFilterResponse)(nil)).Elem()
}

func (i AdvancedFilterResponseArgs) ToAdvancedFilterResponseOutput() AdvancedFilterResponseOutput {
	return i.ToAdvancedFilterResponseOutputWithContext(context.Background())
}

func (i AdvancedFilterResponseArgs) ToAdvancedFilterResponseOutputWithContext(ctx context.Context) AdvancedFilterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedFilterResponseOutput)
}

// AdvancedFilterResponseArrayInput is an input type that accepts AdvancedFilterResponseArray and AdvancedFilterResponseArrayOutput values.
// You can construct a concrete instance of `AdvancedFilterResponseArrayInput` via:
//
//          AdvancedFilterResponseArray{ AdvancedFilterResponseArgs{...} }
type AdvancedFilterResponseArrayInput interface {
	pulumi.Input

	ToAdvancedFilterResponseArrayOutput() AdvancedFilterResponseArrayOutput
	ToAdvancedFilterResponseArrayOutputWithContext(context.Context) AdvancedFilterResponseArrayOutput
}

type AdvancedFilterResponseArray []AdvancedFilterResponseInput

func (AdvancedFilterResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdvancedFilterResponse)(nil)).Elem()
}

func (i AdvancedFilterResponseArray) ToAdvancedFilterResponseArrayOutput() AdvancedFilterResponseArrayOutput {
	return i.ToAdvancedFilterResponseArrayOutputWithContext(context.Background())
}

func (i AdvancedFilterResponseArray) ToAdvancedFilterResponseArrayOutputWithContext(ctx context.Context) AdvancedFilterResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedFilterResponseArrayOutput)
}

// This is the base type that represents an advanced filter. To configure an advanced filter, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class such as BoolEqualsAdvancedFilter, NumberInAdvancedFilter, StringEqualsAdvancedFilter etc. depending on the type of the key based on which you want to filter.
type AdvancedFilterResponseOutput struct{ *pulumi.OutputState }

func (AdvancedFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedFilterResponse)(nil)).Elem()
}

func (o AdvancedFilterResponseOutput) ToAdvancedFilterResponseOutput() AdvancedFilterResponseOutput {
	return o
}

func (o AdvancedFilterResponseOutput) ToAdvancedFilterResponseOutputWithContext(ctx context.Context) AdvancedFilterResponseOutput {
	return o
}

// The field/property in the event based on which you want to filter.
func (o AdvancedFilterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdvancedFilterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
func (o AdvancedFilterResponseOutput) OperatorType() pulumi.StringOutput {
	return o.ApplyT(func(v AdvancedFilterResponse) string { return v.OperatorType }).(pulumi.StringOutput)
}

type AdvancedFilterResponseArrayOutput struct{ *pulumi.OutputState }

func (AdvancedFilterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdvancedFilterResponse)(nil)).Elem()
}

func (o AdvancedFilterResponseArrayOutput) ToAdvancedFilterResponseArrayOutput() AdvancedFilterResponseArrayOutput {
	return o
}

func (o AdvancedFilterResponseArrayOutput) ToAdvancedFilterResponseArrayOutputWithContext(ctx context.Context) AdvancedFilterResponseArrayOutput {
	return o
}

func (o AdvancedFilterResponseArrayOutput) Index(i pulumi.IntInput) AdvancedFilterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AdvancedFilterResponse {
		return vs[0].([]AdvancedFilterResponse)[vs[1].(int)]
	}).(AdvancedFilterResponseOutput)
}

// Information about the dead letter destination for an event subscription. To configure a deadletter destination, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class. Currently, StorageBlobDeadLetterDestination is the only class that derives from this class.
type DeadLetterDestination struct {
	// Type of the endpoint for the dead letter destination
	EndpointType string `pulumi:"endpointType"`
}

// DeadLetterDestinationInput is an input type that accepts DeadLetterDestinationArgs and DeadLetterDestinationOutput values.
// You can construct a concrete instance of `DeadLetterDestinationInput` via:
//
//          DeadLetterDestinationArgs{...}
type DeadLetterDestinationInput interface {
	pulumi.Input

	ToDeadLetterDestinationOutput() DeadLetterDestinationOutput
	ToDeadLetterDestinationOutputWithContext(context.Context) DeadLetterDestinationOutput
}

// Information about the dead letter destination for an event subscription. To configure a deadletter destination, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class. Currently, StorageBlobDeadLetterDestination is the only class that derives from this class.
type DeadLetterDestinationArgs struct {
	// Type of the endpoint for the dead letter destination
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
}

func (DeadLetterDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeadLetterDestination)(nil)).Elem()
}

func (i DeadLetterDestinationArgs) ToDeadLetterDestinationOutput() DeadLetterDestinationOutput {
	return i.ToDeadLetterDestinationOutputWithContext(context.Background())
}

func (i DeadLetterDestinationArgs) ToDeadLetterDestinationOutputWithContext(ctx context.Context) DeadLetterDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterDestinationOutput)
}

func (i DeadLetterDestinationArgs) ToDeadLetterDestinationPtrOutput() DeadLetterDestinationPtrOutput {
	return i.ToDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (i DeadLetterDestinationArgs) ToDeadLetterDestinationPtrOutputWithContext(ctx context.Context) DeadLetterDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterDestinationOutput).ToDeadLetterDestinationPtrOutputWithContext(ctx)
}

// DeadLetterDestinationPtrInput is an input type that accepts DeadLetterDestinationArgs, DeadLetterDestinationPtr and DeadLetterDestinationPtrOutput values.
// You can construct a concrete instance of `DeadLetterDestinationPtrInput` via:
//
//          DeadLetterDestinationArgs{...}
//
//  or:
//
//          nil
type DeadLetterDestinationPtrInput interface {
	pulumi.Input

	ToDeadLetterDestinationPtrOutput() DeadLetterDestinationPtrOutput
	ToDeadLetterDestinationPtrOutputWithContext(context.Context) DeadLetterDestinationPtrOutput
}

type deadLetterDestinationPtrType DeadLetterDestinationArgs

func DeadLetterDestinationPtr(v *DeadLetterDestinationArgs) DeadLetterDestinationPtrInput {
	return (*deadLetterDestinationPtrType)(v)
}

func (*deadLetterDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeadLetterDestination)(nil)).Elem()
}

func (i *deadLetterDestinationPtrType) ToDeadLetterDestinationPtrOutput() DeadLetterDestinationPtrOutput {
	return i.ToDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (i *deadLetterDestinationPtrType) ToDeadLetterDestinationPtrOutputWithContext(ctx context.Context) DeadLetterDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterDestinationPtrOutput)
}

// Information about the dead letter destination for an event subscription. To configure a deadletter destination, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class. Currently, StorageBlobDeadLetterDestination is the only class that derives from this class.
type DeadLetterDestinationOutput struct{ *pulumi.OutputState }

func (DeadLetterDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeadLetterDestination)(nil)).Elem()
}

func (o DeadLetterDestinationOutput) ToDeadLetterDestinationOutput() DeadLetterDestinationOutput {
	return o
}

func (o DeadLetterDestinationOutput) ToDeadLetterDestinationOutputWithContext(ctx context.Context) DeadLetterDestinationOutput {
	return o
}

func (o DeadLetterDestinationOutput) ToDeadLetterDestinationPtrOutput() DeadLetterDestinationPtrOutput {
	return o.ToDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (o DeadLetterDestinationOutput) ToDeadLetterDestinationPtrOutputWithContext(ctx context.Context) DeadLetterDestinationPtrOutput {
	return o.ApplyT(func(v DeadLetterDestination) *DeadLetterDestination {
		return &v
	}).(DeadLetterDestinationPtrOutput)
}

// Type of the endpoint for the dead letter destination
func (o DeadLetterDestinationOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v DeadLetterDestination) string { return v.EndpointType }).(pulumi.StringOutput)
}

type DeadLetterDestinationPtrOutput struct{ *pulumi.OutputState }

func (DeadLetterDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeadLetterDestination)(nil)).Elem()
}

func (o DeadLetterDestinationPtrOutput) ToDeadLetterDestinationPtrOutput() DeadLetterDestinationPtrOutput {
	return o
}

func (o DeadLetterDestinationPtrOutput) ToDeadLetterDestinationPtrOutputWithContext(ctx context.Context) DeadLetterDestinationPtrOutput {
	return o
}

func (o DeadLetterDestinationPtrOutput) Elem() DeadLetterDestinationOutput {
	return o.ApplyT(func(v *DeadLetterDestination) DeadLetterDestination { return *v }).(DeadLetterDestinationOutput)
}

// Type of the endpoint for the dead letter destination
func (o DeadLetterDestinationPtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeadLetterDestination) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// Information about the dead letter destination for an event subscription. To configure a deadletter destination, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class. Currently, StorageBlobDeadLetterDestination is the only class that derives from this class.
type DeadLetterDestinationResponse struct {
	// Type of the endpoint for the dead letter destination
	EndpointType string `pulumi:"endpointType"`
}

// DeadLetterDestinationResponseInput is an input type that accepts DeadLetterDestinationResponseArgs and DeadLetterDestinationResponseOutput values.
// You can construct a concrete instance of `DeadLetterDestinationResponseInput` via:
//
//          DeadLetterDestinationResponseArgs{...}
type DeadLetterDestinationResponseInput interface {
	pulumi.Input

	ToDeadLetterDestinationResponseOutput() DeadLetterDestinationResponseOutput
	ToDeadLetterDestinationResponseOutputWithContext(context.Context) DeadLetterDestinationResponseOutput
}

// Information about the dead letter destination for an event subscription. To configure a deadletter destination, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class. Currently, StorageBlobDeadLetterDestination is the only class that derives from this class.
type DeadLetterDestinationResponseArgs struct {
	// Type of the endpoint for the dead letter destination
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
}

func (DeadLetterDestinationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeadLetterDestinationResponse)(nil)).Elem()
}

func (i DeadLetterDestinationResponseArgs) ToDeadLetterDestinationResponseOutput() DeadLetterDestinationResponseOutput {
	return i.ToDeadLetterDestinationResponseOutputWithContext(context.Background())
}

func (i DeadLetterDestinationResponseArgs) ToDeadLetterDestinationResponseOutputWithContext(ctx context.Context) DeadLetterDestinationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterDestinationResponseOutput)
}

func (i DeadLetterDestinationResponseArgs) ToDeadLetterDestinationResponsePtrOutput() DeadLetterDestinationResponsePtrOutput {
	return i.ToDeadLetterDestinationResponsePtrOutputWithContext(context.Background())
}

func (i DeadLetterDestinationResponseArgs) ToDeadLetterDestinationResponsePtrOutputWithContext(ctx context.Context) DeadLetterDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterDestinationResponseOutput).ToDeadLetterDestinationResponsePtrOutputWithContext(ctx)
}

// DeadLetterDestinationResponsePtrInput is an input type that accepts DeadLetterDestinationResponseArgs, DeadLetterDestinationResponsePtr and DeadLetterDestinationResponsePtrOutput values.
// You can construct a concrete instance of `DeadLetterDestinationResponsePtrInput` via:
//
//          DeadLetterDestinationResponseArgs{...}
//
//  or:
//
//          nil
type DeadLetterDestinationResponsePtrInput interface {
	pulumi.Input

	ToDeadLetterDestinationResponsePtrOutput() DeadLetterDestinationResponsePtrOutput
	ToDeadLetterDestinationResponsePtrOutputWithContext(context.Context) DeadLetterDestinationResponsePtrOutput
}

type deadLetterDestinationResponsePtrType DeadLetterDestinationResponseArgs

func DeadLetterDestinationResponsePtr(v *DeadLetterDestinationResponseArgs) DeadLetterDestinationResponsePtrInput {
	return (*deadLetterDestinationResponsePtrType)(v)
}

func (*deadLetterDestinationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeadLetterDestinationResponse)(nil)).Elem()
}

func (i *deadLetterDestinationResponsePtrType) ToDeadLetterDestinationResponsePtrOutput() DeadLetterDestinationResponsePtrOutput {
	return i.ToDeadLetterDestinationResponsePtrOutputWithContext(context.Background())
}

func (i *deadLetterDestinationResponsePtrType) ToDeadLetterDestinationResponsePtrOutputWithContext(ctx context.Context) DeadLetterDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterDestinationResponsePtrOutput)
}

// Information about the dead letter destination for an event subscription. To configure a deadletter destination, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class. Currently, StorageBlobDeadLetterDestination is the only class that derives from this class.
type DeadLetterDestinationResponseOutput struct{ *pulumi.OutputState }

func (DeadLetterDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeadLetterDestinationResponse)(nil)).Elem()
}

func (o DeadLetterDestinationResponseOutput) ToDeadLetterDestinationResponseOutput() DeadLetterDestinationResponseOutput {
	return o
}

func (o DeadLetterDestinationResponseOutput) ToDeadLetterDestinationResponseOutputWithContext(ctx context.Context) DeadLetterDestinationResponseOutput {
	return o
}

func (o DeadLetterDestinationResponseOutput) ToDeadLetterDestinationResponsePtrOutput() DeadLetterDestinationResponsePtrOutput {
	return o.ToDeadLetterDestinationResponsePtrOutputWithContext(context.Background())
}

func (o DeadLetterDestinationResponseOutput) ToDeadLetterDestinationResponsePtrOutputWithContext(ctx context.Context) DeadLetterDestinationResponsePtrOutput {
	return o.ApplyT(func(v DeadLetterDestinationResponse) *DeadLetterDestinationResponse {
		return &v
	}).(DeadLetterDestinationResponsePtrOutput)
}

// Type of the endpoint for the dead letter destination
func (o DeadLetterDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v DeadLetterDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

type DeadLetterDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (DeadLetterDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeadLetterDestinationResponse)(nil)).Elem()
}

func (o DeadLetterDestinationResponsePtrOutput) ToDeadLetterDestinationResponsePtrOutput() DeadLetterDestinationResponsePtrOutput {
	return o
}

func (o DeadLetterDestinationResponsePtrOutput) ToDeadLetterDestinationResponsePtrOutputWithContext(ctx context.Context) DeadLetterDestinationResponsePtrOutput {
	return o
}

func (o DeadLetterDestinationResponsePtrOutput) Elem() DeadLetterDestinationResponseOutput {
	return o.ApplyT(func(v *DeadLetterDestinationResponse) DeadLetterDestinationResponse { return *v }).(DeadLetterDestinationResponseOutput)
}

// Type of the endpoint for the dead letter destination
func (o DeadLetterDestinationResponsePtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeadLetterDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// Information about the destination for an event subscription
type EventSubscriptionDestination struct {
	// Type of the endpoint for the event subscription destination
	EndpointType string `pulumi:"endpointType"`
}

// EventSubscriptionDestinationInput is an input type that accepts EventSubscriptionDestinationArgs and EventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `EventSubscriptionDestinationInput` via:
//
//          EventSubscriptionDestinationArgs{...}
type EventSubscriptionDestinationInput interface {
	pulumi.Input

	ToEventSubscriptionDestinationOutput() EventSubscriptionDestinationOutput
	ToEventSubscriptionDestinationOutputWithContext(context.Context) EventSubscriptionDestinationOutput
}

// Information about the destination for an event subscription
type EventSubscriptionDestinationArgs struct {
	// Type of the endpoint for the event subscription destination
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
}

func (EventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionDestination)(nil)).Elem()
}

func (i EventSubscriptionDestinationArgs) ToEventSubscriptionDestinationOutput() EventSubscriptionDestinationOutput {
	return i.ToEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i EventSubscriptionDestinationArgs) ToEventSubscriptionDestinationOutputWithContext(ctx context.Context) EventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDestinationOutput)
}

func (i EventSubscriptionDestinationArgs) ToEventSubscriptionDestinationPtrOutput() EventSubscriptionDestinationPtrOutput {
	return i.ToEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionDestinationArgs) ToEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDestinationOutput).ToEventSubscriptionDestinationPtrOutputWithContext(ctx)
}

// EventSubscriptionDestinationPtrInput is an input type that accepts EventSubscriptionDestinationArgs, EventSubscriptionDestinationPtr and EventSubscriptionDestinationPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionDestinationPtrInput` via:
//
//          EventSubscriptionDestinationArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionDestinationPtrInput interface {
	pulumi.Input

	ToEventSubscriptionDestinationPtrOutput() EventSubscriptionDestinationPtrOutput
	ToEventSubscriptionDestinationPtrOutputWithContext(context.Context) EventSubscriptionDestinationPtrOutput
}

type eventSubscriptionDestinationPtrType EventSubscriptionDestinationArgs

func EventSubscriptionDestinationPtr(v *EventSubscriptionDestinationArgs) EventSubscriptionDestinationPtrInput {
	return (*eventSubscriptionDestinationPtrType)(v)
}

func (*eventSubscriptionDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionDestination)(nil)).Elem()
}

func (i *eventSubscriptionDestinationPtrType) ToEventSubscriptionDestinationPtrOutput() EventSubscriptionDestinationPtrOutput {
	return i.ToEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionDestinationPtrType) ToEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDestinationPtrOutput)
}

// Information about the destination for an event subscription
type EventSubscriptionDestinationOutput struct{ *pulumi.OutputState }

func (EventSubscriptionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionDestination)(nil)).Elem()
}

func (o EventSubscriptionDestinationOutput) ToEventSubscriptionDestinationOutput() EventSubscriptionDestinationOutput {
	return o
}

func (o EventSubscriptionDestinationOutput) ToEventSubscriptionDestinationOutputWithContext(ctx context.Context) EventSubscriptionDestinationOutput {
	return o
}

func (o EventSubscriptionDestinationOutput) ToEventSubscriptionDestinationPtrOutput() EventSubscriptionDestinationPtrOutput {
	return o.ToEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionDestinationOutput) ToEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationPtrOutput {
	return o.ApplyT(func(v EventSubscriptionDestination) *EventSubscriptionDestination {
		return &v
	}).(EventSubscriptionDestinationPtrOutput)
}

// Type of the endpoint for the event subscription destination
func (o EventSubscriptionDestinationOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionDestination) string { return v.EndpointType }).(pulumi.StringOutput)
}

type EventSubscriptionDestinationPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionDestination)(nil)).Elem()
}

func (o EventSubscriptionDestinationPtrOutput) ToEventSubscriptionDestinationPtrOutput() EventSubscriptionDestinationPtrOutput {
	return o
}

func (o EventSubscriptionDestinationPtrOutput) ToEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationPtrOutput {
	return o
}

func (o EventSubscriptionDestinationPtrOutput) Elem() EventSubscriptionDestinationOutput {
	return o.ApplyT(func(v *EventSubscriptionDestination) EventSubscriptionDestination { return *v }).(EventSubscriptionDestinationOutput)
}

// Type of the endpoint for the event subscription destination
func (o EventSubscriptionDestinationPtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// Information about the destination for an event subscription
type EventSubscriptionDestinationResponse struct {
	// Type of the endpoint for the event subscription destination
	EndpointType string `pulumi:"endpointType"`
}

// EventSubscriptionDestinationResponseInput is an input type that accepts EventSubscriptionDestinationResponseArgs and EventSubscriptionDestinationResponseOutput values.
// You can construct a concrete instance of `EventSubscriptionDestinationResponseInput` via:
//
//          EventSubscriptionDestinationResponseArgs{...}
type EventSubscriptionDestinationResponseInput interface {
	pulumi.Input

	ToEventSubscriptionDestinationResponseOutput() EventSubscriptionDestinationResponseOutput
	ToEventSubscriptionDestinationResponseOutputWithContext(context.Context) EventSubscriptionDestinationResponseOutput
}

// Information about the destination for an event subscription
type EventSubscriptionDestinationResponseArgs struct {
	// Type of the endpoint for the event subscription destination
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
}

func (EventSubscriptionDestinationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionDestinationResponse)(nil)).Elem()
}

func (i EventSubscriptionDestinationResponseArgs) ToEventSubscriptionDestinationResponseOutput() EventSubscriptionDestinationResponseOutput {
	return i.ToEventSubscriptionDestinationResponseOutputWithContext(context.Background())
}

func (i EventSubscriptionDestinationResponseArgs) ToEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) EventSubscriptionDestinationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDestinationResponseOutput)
}

func (i EventSubscriptionDestinationResponseArgs) ToEventSubscriptionDestinationResponsePtrOutput() EventSubscriptionDestinationResponsePtrOutput {
	return i.ToEventSubscriptionDestinationResponsePtrOutputWithContext(context.Background())
}

func (i EventSubscriptionDestinationResponseArgs) ToEventSubscriptionDestinationResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDestinationResponseOutput).ToEventSubscriptionDestinationResponsePtrOutputWithContext(ctx)
}

// EventSubscriptionDestinationResponsePtrInput is an input type that accepts EventSubscriptionDestinationResponseArgs, EventSubscriptionDestinationResponsePtr and EventSubscriptionDestinationResponsePtrOutput values.
// You can construct a concrete instance of `EventSubscriptionDestinationResponsePtrInput` via:
//
//          EventSubscriptionDestinationResponseArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionDestinationResponsePtrInput interface {
	pulumi.Input

	ToEventSubscriptionDestinationResponsePtrOutput() EventSubscriptionDestinationResponsePtrOutput
	ToEventSubscriptionDestinationResponsePtrOutputWithContext(context.Context) EventSubscriptionDestinationResponsePtrOutput
}

type eventSubscriptionDestinationResponsePtrType EventSubscriptionDestinationResponseArgs

func EventSubscriptionDestinationResponsePtr(v *EventSubscriptionDestinationResponseArgs) EventSubscriptionDestinationResponsePtrInput {
	return (*eventSubscriptionDestinationResponsePtrType)(v)
}

func (*eventSubscriptionDestinationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionDestinationResponse)(nil)).Elem()
}

func (i *eventSubscriptionDestinationResponsePtrType) ToEventSubscriptionDestinationResponsePtrOutput() EventSubscriptionDestinationResponsePtrOutput {
	return i.ToEventSubscriptionDestinationResponsePtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionDestinationResponsePtrType) ToEventSubscriptionDestinationResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDestinationResponsePtrOutput)
}

// Information about the destination for an event subscription
type EventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (EventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o EventSubscriptionDestinationResponseOutput) ToEventSubscriptionDestinationResponseOutput() EventSubscriptionDestinationResponseOutput {
	return o
}

func (o EventSubscriptionDestinationResponseOutput) ToEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) EventSubscriptionDestinationResponseOutput {
	return o
}

func (o EventSubscriptionDestinationResponseOutput) ToEventSubscriptionDestinationResponsePtrOutput() EventSubscriptionDestinationResponsePtrOutput {
	return o.ToEventSubscriptionDestinationResponsePtrOutputWithContext(context.Background())
}

func (o EventSubscriptionDestinationResponseOutput) ToEventSubscriptionDestinationResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationResponsePtrOutput {
	return o.ApplyT(func(v EventSubscriptionDestinationResponse) *EventSubscriptionDestinationResponse {
		return &v
	}).(EventSubscriptionDestinationResponsePtrOutput)
}

// Type of the endpoint for the event subscription destination
func (o EventSubscriptionDestinationResponseOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionDestinationResponse) string { return v.EndpointType }).(pulumi.StringOutput)
}

type EventSubscriptionDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o EventSubscriptionDestinationResponsePtrOutput) ToEventSubscriptionDestinationResponsePtrOutput() EventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o EventSubscriptionDestinationResponsePtrOutput) ToEventSubscriptionDestinationResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationResponsePtrOutput {
	return o
}

func (o EventSubscriptionDestinationResponsePtrOutput) Elem() EventSubscriptionDestinationResponseOutput {
	return o.ApplyT(func(v *EventSubscriptionDestinationResponse) EventSubscriptionDestinationResponse { return *v }).(EventSubscriptionDestinationResponseOutput)
}

// Type of the endpoint for the event subscription destination
func (o EventSubscriptionDestinationResponsePtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// Filter for the Event Subscription
type EventSubscriptionFilter struct {
	// An array of advanced filters that are used for filtering event subscriptions.
	AdvancedFilters []AdvancedFilter `pulumi:"advancedFilters"`
	// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
	IncludedEventTypes []string `pulumi:"includedEventTypes"`
	// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
	// should be compared in a case sensitive manner.
	IsSubjectCaseSensitive *bool `pulumi:"isSubjectCaseSensitive"`
	// An optional string to filter events for an event subscription based on a resource path prefix.
	// The format of this depends on the publisher of the events.
	// Wildcard characters are not supported in this path.
	SubjectBeginsWith *string `pulumi:"subjectBeginsWith"`
	// An optional string to filter events for an event subscription based on a resource path suffix.
	// Wildcard characters are not supported in this path.
	SubjectEndsWith *string `pulumi:"subjectEndsWith"`
}

// EventSubscriptionFilterInput is an input type that accepts EventSubscriptionFilterArgs and EventSubscriptionFilterOutput values.
// You can construct a concrete instance of `EventSubscriptionFilterInput` via:
//
//          EventSubscriptionFilterArgs{...}
type EventSubscriptionFilterInput interface {
	pulumi.Input

	ToEventSubscriptionFilterOutput() EventSubscriptionFilterOutput
	ToEventSubscriptionFilterOutputWithContext(context.Context) EventSubscriptionFilterOutput
}

// Filter for the Event Subscription
type EventSubscriptionFilterArgs struct {
	// An array of advanced filters that are used for filtering event subscriptions.
	AdvancedFilters AdvancedFilterArrayInput `pulumi:"advancedFilters"`
	// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
	IncludedEventTypes pulumi.StringArrayInput `pulumi:"includedEventTypes"`
	// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
	// should be compared in a case sensitive manner.
	IsSubjectCaseSensitive pulumi.BoolPtrInput `pulumi:"isSubjectCaseSensitive"`
	// An optional string to filter events for an event subscription based on a resource path prefix.
	// The format of this depends on the publisher of the events.
	// Wildcard characters are not supported in this path.
	SubjectBeginsWith pulumi.StringPtrInput `pulumi:"subjectBeginsWith"`
	// An optional string to filter events for an event subscription based on a resource path suffix.
	// Wildcard characters are not supported in this path.
	SubjectEndsWith pulumi.StringPtrInput `pulumi:"subjectEndsWith"`
}

func (EventSubscriptionFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionFilter)(nil)).Elem()
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterOutput() EventSubscriptionFilterOutput {
	return i.ToEventSubscriptionFilterOutputWithContext(context.Background())
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterOutputWithContext(ctx context.Context) EventSubscriptionFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterOutput)
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput {
	return i.ToEventSubscriptionFilterPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionFilterArgs) ToEventSubscriptionFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterOutput).ToEventSubscriptionFilterPtrOutputWithContext(ctx)
}

// EventSubscriptionFilterPtrInput is an input type that accepts EventSubscriptionFilterArgs, EventSubscriptionFilterPtr and EventSubscriptionFilterPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionFilterPtrInput` via:
//
//          EventSubscriptionFilterArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionFilterPtrInput interface {
	pulumi.Input

	ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput
	ToEventSubscriptionFilterPtrOutputWithContext(context.Context) EventSubscriptionFilterPtrOutput
}

type eventSubscriptionFilterPtrType EventSubscriptionFilterArgs

func EventSubscriptionFilterPtr(v *EventSubscriptionFilterArgs) EventSubscriptionFilterPtrInput {
	return (*eventSubscriptionFilterPtrType)(v)
}

func (*eventSubscriptionFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionFilter)(nil)).Elem()
}

func (i *eventSubscriptionFilterPtrType) ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput {
	return i.ToEventSubscriptionFilterPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionFilterPtrType) ToEventSubscriptionFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterPtrOutput)
}

// Filter for the Event Subscription
type EventSubscriptionFilterOutput struct{ *pulumi.OutputState }

func (EventSubscriptionFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionFilter)(nil)).Elem()
}

func (o EventSubscriptionFilterOutput) ToEventSubscriptionFilterOutput() EventSubscriptionFilterOutput {
	return o
}

func (o EventSubscriptionFilterOutput) ToEventSubscriptionFilterOutputWithContext(ctx context.Context) EventSubscriptionFilterOutput {
	return o
}

func (o EventSubscriptionFilterOutput) ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput {
	return o.ToEventSubscriptionFilterPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionFilterOutput) ToEventSubscriptionFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionFilterPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) *EventSubscriptionFilter {
		return &v
	}).(EventSubscriptionFilterPtrOutput)
}

// An array of advanced filters that are used for filtering event subscriptions.
func (o EventSubscriptionFilterOutput) AdvancedFilters() AdvancedFilterArrayOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) []AdvancedFilter { return v.AdvancedFilters }).(AdvancedFilterArrayOutput)
}

// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
func (o EventSubscriptionFilterOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) []string { return v.IncludedEventTypes }).(pulumi.StringArrayOutput)
}

// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
// should be compared in a case sensitive manner.
func (o EventSubscriptionFilterOutput) IsSubjectCaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) *bool { return v.IsSubjectCaseSensitive }).(pulumi.BoolPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path prefix.
// The format of this depends on the publisher of the events.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) *string { return v.SubjectBeginsWith }).(pulumi.StringPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path suffix.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilter) *string { return v.SubjectEndsWith }).(pulumi.StringPtrOutput)
}

type EventSubscriptionFilterPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionFilter)(nil)).Elem()
}

func (o EventSubscriptionFilterPtrOutput) ToEventSubscriptionFilterPtrOutput() EventSubscriptionFilterPtrOutput {
	return o
}

func (o EventSubscriptionFilterPtrOutput) ToEventSubscriptionFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionFilterPtrOutput {
	return o
}

func (o EventSubscriptionFilterPtrOutput) Elem() EventSubscriptionFilterOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) EventSubscriptionFilter { return *v }).(EventSubscriptionFilterOutput)
}

// An array of advanced filters that are used for filtering event subscriptions.
func (o EventSubscriptionFilterPtrOutput) AdvancedFilters() AdvancedFilterArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) []AdvancedFilter {
		if v == nil {
			return nil
		}
		return v.AdvancedFilters
	}).(AdvancedFilterArrayOutput)
}

// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
func (o EventSubscriptionFilterPtrOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) []string {
		if v == nil {
			return nil
		}
		return v.IncludedEventTypes
	}).(pulumi.StringArrayOutput)
}

// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
// should be compared in a case sensitive manner.
func (o EventSubscriptionFilterPtrOutput) IsSubjectCaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) *bool {
		if v == nil {
			return nil
		}
		return v.IsSubjectCaseSensitive
	}).(pulumi.BoolPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path prefix.
// The format of this depends on the publisher of the events.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterPtrOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) *string {
		if v == nil {
			return nil
		}
		return v.SubjectBeginsWith
	}).(pulumi.StringPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path suffix.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterPtrOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilter) *string {
		if v == nil {
			return nil
		}
		return v.SubjectEndsWith
	}).(pulumi.StringPtrOutput)
}

// Filter for the Event Subscription
type EventSubscriptionFilterResponse struct {
	// An array of advanced filters that are used for filtering event subscriptions.
	AdvancedFilters []AdvancedFilterResponse `pulumi:"advancedFilters"`
	// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
	IncludedEventTypes []string `pulumi:"includedEventTypes"`
	// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
	// should be compared in a case sensitive manner.
	IsSubjectCaseSensitive *bool `pulumi:"isSubjectCaseSensitive"`
	// An optional string to filter events for an event subscription based on a resource path prefix.
	// The format of this depends on the publisher of the events.
	// Wildcard characters are not supported in this path.
	SubjectBeginsWith *string `pulumi:"subjectBeginsWith"`
	// An optional string to filter events for an event subscription based on a resource path suffix.
	// Wildcard characters are not supported in this path.
	SubjectEndsWith *string `pulumi:"subjectEndsWith"`
}

// EventSubscriptionFilterResponseInput is an input type that accepts EventSubscriptionFilterResponseArgs and EventSubscriptionFilterResponseOutput values.
// You can construct a concrete instance of `EventSubscriptionFilterResponseInput` via:
//
//          EventSubscriptionFilterResponseArgs{...}
type EventSubscriptionFilterResponseInput interface {
	pulumi.Input

	ToEventSubscriptionFilterResponseOutput() EventSubscriptionFilterResponseOutput
	ToEventSubscriptionFilterResponseOutputWithContext(context.Context) EventSubscriptionFilterResponseOutput
}

// Filter for the Event Subscription
type EventSubscriptionFilterResponseArgs struct {
	// An array of advanced filters that are used for filtering event subscriptions.
	AdvancedFilters AdvancedFilterResponseArrayInput `pulumi:"advancedFilters"`
	// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
	IncludedEventTypes pulumi.StringArrayInput `pulumi:"includedEventTypes"`
	// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
	// should be compared in a case sensitive manner.
	IsSubjectCaseSensitive pulumi.BoolPtrInput `pulumi:"isSubjectCaseSensitive"`
	// An optional string to filter events for an event subscription based on a resource path prefix.
	// The format of this depends on the publisher of the events.
	// Wildcard characters are not supported in this path.
	SubjectBeginsWith pulumi.StringPtrInput `pulumi:"subjectBeginsWith"`
	// An optional string to filter events for an event subscription based on a resource path suffix.
	// Wildcard characters are not supported in this path.
	SubjectEndsWith pulumi.StringPtrInput `pulumi:"subjectEndsWith"`
}

func (EventSubscriptionFilterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionFilterResponse)(nil)).Elem()
}

func (i EventSubscriptionFilterResponseArgs) ToEventSubscriptionFilterResponseOutput() EventSubscriptionFilterResponseOutput {
	return i.ToEventSubscriptionFilterResponseOutputWithContext(context.Background())
}

func (i EventSubscriptionFilterResponseArgs) ToEventSubscriptionFilterResponseOutputWithContext(ctx context.Context) EventSubscriptionFilterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterResponseOutput)
}

func (i EventSubscriptionFilterResponseArgs) ToEventSubscriptionFilterResponsePtrOutput() EventSubscriptionFilterResponsePtrOutput {
	return i.ToEventSubscriptionFilterResponsePtrOutputWithContext(context.Background())
}

func (i EventSubscriptionFilterResponseArgs) ToEventSubscriptionFilterResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterResponseOutput).ToEventSubscriptionFilterResponsePtrOutputWithContext(ctx)
}

// EventSubscriptionFilterResponsePtrInput is an input type that accepts EventSubscriptionFilterResponseArgs, EventSubscriptionFilterResponsePtr and EventSubscriptionFilterResponsePtrOutput values.
// You can construct a concrete instance of `EventSubscriptionFilterResponsePtrInput` via:
//
//          EventSubscriptionFilterResponseArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionFilterResponsePtrInput interface {
	pulumi.Input

	ToEventSubscriptionFilterResponsePtrOutput() EventSubscriptionFilterResponsePtrOutput
	ToEventSubscriptionFilterResponsePtrOutputWithContext(context.Context) EventSubscriptionFilterResponsePtrOutput
}

type eventSubscriptionFilterResponsePtrType EventSubscriptionFilterResponseArgs

func EventSubscriptionFilterResponsePtr(v *EventSubscriptionFilterResponseArgs) EventSubscriptionFilterResponsePtrInput {
	return (*eventSubscriptionFilterResponsePtrType)(v)
}

func (*eventSubscriptionFilterResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionFilterResponse)(nil)).Elem()
}

func (i *eventSubscriptionFilterResponsePtrType) ToEventSubscriptionFilterResponsePtrOutput() EventSubscriptionFilterResponsePtrOutput {
	return i.ToEventSubscriptionFilterResponsePtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionFilterResponsePtrType) ToEventSubscriptionFilterResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionFilterResponsePtrOutput)
}

// Filter for the Event Subscription
type EventSubscriptionFilterResponseOutput struct{ *pulumi.OutputState }

func (EventSubscriptionFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionFilterResponse)(nil)).Elem()
}

func (o EventSubscriptionFilterResponseOutput) ToEventSubscriptionFilterResponseOutput() EventSubscriptionFilterResponseOutput {
	return o
}

func (o EventSubscriptionFilterResponseOutput) ToEventSubscriptionFilterResponseOutputWithContext(ctx context.Context) EventSubscriptionFilterResponseOutput {
	return o
}

func (o EventSubscriptionFilterResponseOutput) ToEventSubscriptionFilterResponsePtrOutput() EventSubscriptionFilterResponsePtrOutput {
	return o.ToEventSubscriptionFilterResponsePtrOutputWithContext(context.Background())
}

func (o EventSubscriptionFilterResponseOutput) ToEventSubscriptionFilterResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionFilterResponsePtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *EventSubscriptionFilterResponse {
		return &v
	}).(EventSubscriptionFilterResponsePtrOutput)
}

// An array of advanced filters that are used for filtering event subscriptions.
func (o EventSubscriptionFilterResponseOutput) AdvancedFilters() AdvancedFilterResponseArrayOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) []AdvancedFilterResponse { return v.AdvancedFilters }).(AdvancedFilterResponseArrayOutput)
}

// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
func (o EventSubscriptionFilterResponseOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) []string { return v.IncludedEventTypes }).(pulumi.StringArrayOutput)
}

// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
// should be compared in a case sensitive manner.
func (o EventSubscriptionFilterResponseOutput) IsSubjectCaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *bool { return v.IsSubjectCaseSensitive }).(pulumi.BoolPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path prefix.
// The format of this depends on the publisher of the events.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponseOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *string { return v.SubjectBeginsWith }).(pulumi.StringPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path suffix.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponseOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionFilterResponse) *string { return v.SubjectEndsWith }).(pulumi.StringPtrOutput)
}

type EventSubscriptionFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionFilterResponse)(nil)).Elem()
}

func (o EventSubscriptionFilterResponsePtrOutput) ToEventSubscriptionFilterResponsePtrOutput() EventSubscriptionFilterResponsePtrOutput {
	return o
}

func (o EventSubscriptionFilterResponsePtrOutput) ToEventSubscriptionFilterResponsePtrOutputWithContext(ctx context.Context) EventSubscriptionFilterResponsePtrOutput {
	return o
}

func (o EventSubscriptionFilterResponsePtrOutput) Elem() EventSubscriptionFilterResponseOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) EventSubscriptionFilterResponse { return *v }).(EventSubscriptionFilterResponseOutput)
}

// An array of advanced filters that are used for filtering event subscriptions.
func (o EventSubscriptionFilterResponsePtrOutput) AdvancedFilters() AdvancedFilterResponseArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) []AdvancedFilterResponse {
		if v == nil {
			return nil
		}
		return v.AdvancedFilters
	}).(AdvancedFilterResponseArrayOutput)
}

// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
func (o EventSubscriptionFilterResponsePtrOutput) IncludedEventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) []string {
		if v == nil {
			return nil
		}
		return v.IncludedEventTypes
	}).(pulumi.StringArrayOutput)
}

// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
// should be compared in a case sensitive manner.
func (o EventSubscriptionFilterResponsePtrOutput) IsSubjectCaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsSubjectCaseSensitive
	}).(pulumi.BoolPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path prefix.
// The format of this depends on the publisher of the events.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponsePtrOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubjectBeginsWith
	}).(pulumi.StringPtrOutput)
}

// An optional string to filter events for an event subscription based on a resource path suffix.
// Wildcard characters are not supported in this path.
func (o EventSubscriptionFilterResponsePtrOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionFilterResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubjectEndsWith
	}).(pulumi.StringPtrOutput)
}

// By default, Event Grid expects events to be in the Event Grid event schema. Specifying an input schema mapping enables publishing to Event Grid using a custom input schema. Currently, the only supported type of InputSchemaMapping is 'JsonInputSchemaMapping'.
type InputSchemaMapping struct {
	// Type of the custom mapping
	InputSchemaMappingType *string `pulumi:"inputSchemaMappingType"`
}

// InputSchemaMappingInput is an input type that accepts InputSchemaMappingArgs and InputSchemaMappingOutput values.
// You can construct a concrete instance of `InputSchemaMappingInput` via:
//
//          InputSchemaMappingArgs{...}
type InputSchemaMappingInput interface {
	pulumi.Input

	ToInputSchemaMappingOutput() InputSchemaMappingOutput
	ToInputSchemaMappingOutputWithContext(context.Context) InputSchemaMappingOutput
}

// By default, Event Grid expects events to be in the Event Grid event schema. Specifying an input schema mapping enables publishing to Event Grid using a custom input schema. Currently, the only supported type of InputSchemaMapping is 'JsonInputSchemaMapping'.
type InputSchemaMappingArgs struct {
	// Type of the custom mapping
	InputSchemaMappingType pulumi.StringPtrInput `pulumi:"inputSchemaMappingType"`
}

func (InputSchemaMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InputSchemaMapping)(nil)).Elem()
}

func (i InputSchemaMappingArgs) ToInputSchemaMappingOutput() InputSchemaMappingOutput {
	return i.ToInputSchemaMappingOutputWithContext(context.Background())
}

func (i InputSchemaMappingArgs) ToInputSchemaMappingOutputWithContext(ctx context.Context) InputSchemaMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputSchemaMappingOutput)
}

func (i InputSchemaMappingArgs) ToInputSchemaMappingPtrOutput() InputSchemaMappingPtrOutput {
	return i.ToInputSchemaMappingPtrOutputWithContext(context.Background())
}

func (i InputSchemaMappingArgs) ToInputSchemaMappingPtrOutputWithContext(ctx context.Context) InputSchemaMappingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputSchemaMappingOutput).ToInputSchemaMappingPtrOutputWithContext(ctx)
}

// InputSchemaMappingPtrInput is an input type that accepts InputSchemaMappingArgs, InputSchemaMappingPtr and InputSchemaMappingPtrOutput values.
// You can construct a concrete instance of `InputSchemaMappingPtrInput` via:
//
//          InputSchemaMappingArgs{...}
//
//  or:
//
//          nil
type InputSchemaMappingPtrInput interface {
	pulumi.Input

	ToInputSchemaMappingPtrOutput() InputSchemaMappingPtrOutput
	ToInputSchemaMappingPtrOutputWithContext(context.Context) InputSchemaMappingPtrOutput
}

type inputSchemaMappingPtrType InputSchemaMappingArgs

func InputSchemaMappingPtr(v *InputSchemaMappingArgs) InputSchemaMappingPtrInput {
	return (*inputSchemaMappingPtrType)(v)
}

func (*inputSchemaMappingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InputSchemaMapping)(nil)).Elem()
}

func (i *inputSchemaMappingPtrType) ToInputSchemaMappingPtrOutput() InputSchemaMappingPtrOutput {
	return i.ToInputSchemaMappingPtrOutputWithContext(context.Background())
}

func (i *inputSchemaMappingPtrType) ToInputSchemaMappingPtrOutputWithContext(ctx context.Context) InputSchemaMappingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputSchemaMappingPtrOutput)
}

// By default, Event Grid expects events to be in the Event Grid event schema. Specifying an input schema mapping enables publishing to Event Grid using a custom input schema. Currently, the only supported type of InputSchemaMapping is 'JsonInputSchemaMapping'.
type InputSchemaMappingOutput struct{ *pulumi.OutputState }

func (InputSchemaMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputSchemaMapping)(nil)).Elem()
}

func (o InputSchemaMappingOutput) ToInputSchemaMappingOutput() InputSchemaMappingOutput {
	return o
}

func (o InputSchemaMappingOutput) ToInputSchemaMappingOutputWithContext(ctx context.Context) InputSchemaMappingOutput {
	return o
}

func (o InputSchemaMappingOutput) ToInputSchemaMappingPtrOutput() InputSchemaMappingPtrOutput {
	return o.ToInputSchemaMappingPtrOutputWithContext(context.Background())
}

func (o InputSchemaMappingOutput) ToInputSchemaMappingPtrOutputWithContext(ctx context.Context) InputSchemaMappingPtrOutput {
	return o.ApplyT(func(v InputSchemaMapping) *InputSchemaMapping {
		return &v
	}).(InputSchemaMappingPtrOutput)
}

// Type of the custom mapping
func (o InputSchemaMappingOutput) InputSchemaMappingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InputSchemaMapping) *string { return v.InputSchemaMappingType }).(pulumi.StringPtrOutput)
}

type InputSchemaMappingPtrOutput struct{ *pulumi.OutputState }

func (InputSchemaMappingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InputSchemaMapping)(nil)).Elem()
}

func (o InputSchemaMappingPtrOutput) ToInputSchemaMappingPtrOutput() InputSchemaMappingPtrOutput {
	return o
}

func (o InputSchemaMappingPtrOutput) ToInputSchemaMappingPtrOutputWithContext(ctx context.Context) InputSchemaMappingPtrOutput {
	return o
}

func (o InputSchemaMappingPtrOutput) Elem() InputSchemaMappingOutput {
	return o.ApplyT(func(v *InputSchemaMapping) InputSchemaMapping { return *v }).(InputSchemaMappingOutput)
}

// Type of the custom mapping
func (o InputSchemaMappingPtrOutput) InputSchemaMappingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InputSchemaMapping) *string {
		if v == nil {
			return nil
		}
		return v.InputSchemaMappingType
	}).(pulumi.StringPtrOutput)
}

// By default, Event Grid expects events to be in the Event Grid event schema. Specifying an input schema mapping enables publishing to Event Grid using a custom input schema. Currently, the only supported type of InputSchemaMapping is 'JsonInputSchemaMapping'.
type InputSchemaMappingResponse struct {
	// Type of the custom mapping
	InputSchemaMappingType *string `pulumi:"inputSchemaMappingType"`
}

// InputSchemaMappingResponseInput is an input type that accepts InputSchemaMappingResponseArgs and InputSchemaMappingResponseOutput values.
// You can construct a concrete instance of `InputSchemaMappingResponseInput` via:
//
//          InputSchemaMappingResponseArgs{...}
type InputSchemaMappingResponseInput interface {
	pulumi.Input

	ToInputSchemaMappingResponseOutput() InputSchemaMappingResponseOutput
	ToInputSchemaMappingResponseOutputWithContext(context.Context) InputSchemaMappingResponseOutput
}

// By default, Event Grid expects events to be in the Event Grid event schema. Specifying an input schema mapping enables publishing to Event Grid using a custom input schema. Currently, the only supported type of InputSchemaMapping is 'JsonInputSchemaMapping'.
type InputSchemaMappingResponseArgs struct {
	// Type of the custom mapping
	InputSchemaMappingType pulumi.StringPtrInput `pulumi:"inputSchemaMappingType"`
}

func (InputSchemaMappingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InputSchemaMappingResponse)(nil)).Elem()
}

func (i InputSchemaMappingResponseArgs) ToInputSchemaMappingResponseOutput() InputSchemaMappingResponseOutput {
	return i.ToInputSchemaMappingResponseOutputWithContext(context.Background())
}

func (i InputSchemaMappingResponseArgs) ToInputSchemaMappingResponseOutputWithContext(ctx context.Context) InputSchemaMappingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputSchemaMappingResponseOutput)
}

func (i InputSchemaMappingResponseArgs) ToInputSchemaMappingResponsePtrOutput() InputSchemaMappingResponsePtrOutput {
	return i.ToInputSchemaMappingResponsePtrOutputWithContext(context.Background())
}

func (i InputSchemaMappingResponseArgs) ToInputSchemaMappingResponsePtrOutputWithContext(ctx context.Context) InputSchemaMappingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputSchemaMappingResponseOutput).ToInputSchemaMappingResponsePtrOutputWithContext(ctx)
}

// InputSchemaMappingResponsePtrInput is an input type that accepts InputSchemaMappingResponseArgs, InputSchemaMappingResponsePtr and InputSchemaMappingResponsePtrOutput values.
// You can construct a concrete instance of `InputSchemaMappingResponsePtrInput` via:
//
//          InputSchemaMappingResponseArgs{...}
//
//  or:
//
//          nil
type InputSchemaMappingResponsePtrInput interface {
	pulumi.Input

	ToInputSchemaMappingResponsePtrOutput() InputSchemaMappingResponsePtrOutput
	ToInputSchemaMappingResponsePtrOutputWithContext(context.Context) InputSchemaMappingResponsePtrOutput
}

type inputSchemaMappingResponsePtrType InputSchemaMappingResponseArgs

func InputSchemaMappingResponsePtr(v *InputSchemaMappingResponseArgs) InputSchemaMappingResponsePtrInput {
	return (*inputSchemaMappingResponsePtrType)(v)
}

func (*inputSchemaMappingResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InputSchemaMappingResponse)(nil)).Elem()
}

func (i *inputSchemaMappingResponsePtrType) ToInputSchemaMappingResponsePtrOutput() InputSchemaMappingResponsePtrOutput {
	return i.ToInputSchemaMappingResponsePtrOutputWithContext(context.Background())
}

func (i *inputSchemaMappingResponsePtrType) ToInputSchemaMappingResponsePtrOutputWithContext(ctx context.Context) InputSchemaMappingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputSchemaMappingResponsePtrOutput)
}

// By default, Event Grid expects events to be in the Event Grid event schema. Specifying an input schema mapping enables publishing to Event Grid using a custom input schema. Currently, the only supported type of InputSchemaMapping is 'JsonInputSchemaMapping'.
type InputSchemaMappingResponseOutput struct{ *pulumi.OutputState }

func (InputSchemaMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputSchemaMappingResponse)(nil)).Elem()
}

func (o InputSchemaMappingResponseOutput) ToInputSchemaMappingResponseOutput() InputSchemaMappingResponseOutput {
	return o
}

func (o InputSchemaMappingResponseOutput) ToInputSchemaMappingResponseOutputWithContext(ctx context.Context) InputSchemaMappingResponseOutput {
	return o
}

func (o InputSchemaMappingResponseOutput) ToInputSchemaMappingResponsePtrOutput() InputSchemaMappingResponsePtrOutput {
	return o.ToInputSchemaMappingResponsePtrOutputWithContext(context.Background())
}

func (o InputSchemaMappingResponseOutput) ToInputSchemaMappingResponsePtrOutputWithContext(ctx context.Context) InputSchemaMappingResponsePtrOutput {
	return o.ApplyT(func(v InputSchemaMappingResponse) *InputSchemaMappingResponse {
		return &v
	}).(InputSchemaMappingResponsePtrOutput)
}

// Type of the custom mapping
func (o InputSchemaMappingResponseOutput) InputSchemaMappingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InputSchemaMappingResponse) *string { return v.InputSchemaMappingType }).(pulumi.StringPtrOutput)
}

type InputSchemaMappingResponsePtrOutput struct{ *pulumi.OutputState }

func (InputSchemaMappingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InputSchemaMappingResponse)(nil)).Elem()
}

func (o InputSchemaMappingResponsePtrOutput) ToInputSchemaMappingResponsePtrOutput() InputSchemaMappingResponsePtrOutput {
	return o
}

func (o InputSchemaMappingResponsePtrOutput) ToInputSchemaMappingResponsePtrOutputWithContext(ctx context.Context) InputSchemaMappingResponsePtrOutput {
	return o
}

func (o InputSchemaMappingResponsePtrOutput) Elem() InputSchemaMappingResponseOutput {
	return o.ApplyT(func(v *InputSchemaMappingResponse) InputSchemaMappingResponse { return *v }).(InputSchemaMappingResponseOutput)
}

// Type of the custom mapping
func (o InputSchemaMappingResponsePtrOutput) InputSchemaMappingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InputSchemaMappingResponse) *string {
		if v == nil {
			return nil
		}
		return v.InputSchemaMappingType
	}).(pulumi.StringPtrOutput)
}

// Information about the retry policy for an event subscription
type RetryPolicy struct {
	// Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes *int `pulumi:"eventTimeToLiveInMinutes"`
	// Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts *int `pulumi:"maxDeliveryAttempts"`
}

// RetryPolicyInput is an input type that accepts RetryPolicyArgs and RetryPolicyOutput values.
// You can construct a concrete instance of `RetryPolicyInput` via:
//
//          RetryPolicyArgs{...}
type RetryPolicyInput interface {
	pulumi.Input

	ToRetryPolicyOutput() RetryPolicyOutput
	ToRetryPolicyOutputWithContext(context.Context) RetryPolicyOutput
}

// Information about the retry policy for an event subscription
type RetryPolicyArgs struct {
	// Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes pulumi.IntPtrInput `pulumi:"eventTimeToLiveInMinutes"`
	// Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts pulumi.IntPtrInput `pulumi:"maxDeliveryAttempts"`
}

func (RetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicy)(nil)).Elem()
}

func (i RetryPolicyArgs) ToRetryPolicyOutput() RetryPolicyOutput {
	return i.ToRetryPolicyOutputWithContext(context.Background())
}

func (i RetryPolicyArgs) ToRetryPolicyOutputWithContext(ctx context.Context) RetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyOutput)
}

func (i RetryPolicyArgs) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return i.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (i RetryPolicyArgs) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyOutput).ToRetryPolicyPtrOutputWithContext(ctx)
}

// RetryPolicyPtrInput is an input type that accepts RetryPolicyArgs, RetryPolicyPtr and RetryPolicyPtrOutput values.
// You can construct a concrete instance of `RetryPolicyPtrInput` via:
//
//          RetryPolicyArgs{...}
//
//  or:
//
//          nil
type RetryPolicyPtrInput interface {
	pulumi.Input

	ToRetryPolicyPtrOutput() RetryPolicyPtrOutput
	ToRetryPolicyPtrOutputWithContext(context.Context) RetryPolicyPtrOutput
}

type retryPolicyPtrType RetryPolicyArgs

func RetryPolicyPtr(v *RetryPolicyArgs) RetryPolicyPtrInput {
	return (*retryPolicyPtrType)(v)
}

func (*retryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicy)(nil)).Elem()
}

func (i *retryPolicyPtrType) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return i.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *retryPolicyPtrType) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyPtrOutput)
}

// Information about the retry policy for an event subscription
type RetryPolicyOutput struct{ *pulumi.OutputState }

func (RetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicy)(nil)).Elem()
}

func (o RetryPolicyOutput) ToRetryPolicyOutput() RetryPolicyOutput {
	return o
}

func (o RetryPolicyOutput) ToRetryPolicyOutputWithContext(ctx context.Context) RetryPolicyOutput {
	return o
}

func (o RetryPolicyOutput) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return o.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (o RetryPolicyOutput) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return o.ApplyT(func(v RetryPolicy) *RetryPolicy {
		return &v
	}).(RetryPolicyPtrOutput)
}

// Time To Live (in minutes) for events.
func (o RetryPolicyOutput) EventTimeToLiveInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryPolicy) *int { return v.EventTimeToLiveInMinutes }).(pulumi.IntPtrOutput)
}

// Maximum number of delivery retry attempts for events.
func (o RetryPolicyOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryPolicy) *int { return v.MaxDeliveryAttempts }).(pulumi.IntPtrOutput)
}

type RetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (RetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicy)(nil)).Elem()
}

func (o RetryPolicyPtrOutput) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return o
}

func (o RetryPolicyPtrOutput) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return o
}

func (o RetryPolicyPtrOutput) Elem() RetryPolicyOutput {
	return o.ApplyT(func(v *RetryPolicy) RetryPolicy { return *v }).(RetryPolicyOutput)
}

// Time To Live (in minutes) for events.
func (o RetryPolicyPtrOutput) EventTimeToLiveInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryPolicy) *int {
		if v == nil {
			return nil
		}
		return v.EventTimeToLiveInMinutes
	}).(pulumi.IntPtrOutput)
}

// Maximum number of delivery retry attempts for events.
func (o RetryPolicyPtrOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryAttempts
	}).(pulumi.IntPtrOutput)
}

// Information about the retry policy for an event subscription
type RetryPolicyResponse struct {
	// Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes *int `pulumi:"eventTimeToLiveInMinutes"`
	// Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts *int `pulumi:"maxDeliveryAttempts"`
}

// RetryPolicyResponseInput is an input type that accepts RetryPolicyResponseArgs and RetryPolicyResponseOutput values.
// You can construct a concrete instance of `RetryPolicyResponseInput` via:
//
//          RetryPolicyResponseArgs{...}
type RetryPolicyResponseInput interface {
	pulumi.Input

	ToRetryPolicyResponseOutput() RetryPolicyResponseOutput
	ToRetryPolicyResponseOutputWithContext(context.Context) RetryPolicyResponseOutput
}

// Information about the retry policy for an event subscription
type RetryPolicyResponseArgs struct {
	// Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes pulumi.IntPtrInput `pulumi:"eventTimeToLiveInMinutes"`
	// Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts pulumi.IntPtrInput `pulumi:"maxDeliveryAttempts"`
}

func (RetryPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicyResponse)(nil)).Elem()
}

func (i RetryPolicyResponseArgs) ToRetryPolicyResponseOutput() RetryPolicyResponseOutput {
	return i.ToRetryPolicyResponseOutputWithContext(context.Background())
}

func (i RetryPolicyResponseArgs) ToRetryPolicyResponseOutputWithContext(ctx context.Context) RetryPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyResponseOutput)
}

func (i RetryPolicyResponseArgs) ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput {
	return i.ToRetryPolicyResponsePtrOutputWithContext(context.Background())
}

func (i RetryPolicyResponseArgs) ToRetryPolicyResponsePtrOutputWithContext(ctx context.Context) RetryPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyResponseOutput).ToRetryPolicyResponsePtrOutputWithContext(ctx)
}

// RetryPolicyResponsePtrInput is an input type that accepts RetryPolicyResponseArgs, RetryPolicyResponsePtr and RetryPolicyResponsePtrOutput values.
// You can construct a concrete instance of `RetryPolicyResponsePtrInput` via:
//
//          RetryPolicyResponseArgs{...}
//
//  or:
//
//          nil
type RetryPolicyResponsePtrInput interface {
	pulumi.Input

	ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput
	ToRetryPolicyResponsePtrOutputWithContext(context.Context) RetryPolicyResponsePtrOutput
}

type retryPolicyResponsePtrType RetryPolicyResponseArgs

func RetryPolicyResponsePtr(v *RetryPolicyResponseArgs) RetryPolicyResponsePtrInput {
	return (*retryPolicyResponsePtrType)(v)
}

func (*retryPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicyResponse)(nil)).Elem()
}

func (i *retryPolicyResponsePtrType) ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput {
	return i.ToRetryPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *retryPolicyResponsePtrType) ToRetryPolicyResponsePtrOutputWithContext(ctx context.Context) RetryPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyResponsePtrOutput)
}

// Information about the retry policy for an event subscription
type RetryPolicyResponseOutput struct{ *pulumi.OutputState }

func (RetryPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicyResponse)(nil)).Elem()
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponseOutput() RetryPolicyResponseOutput {
	return o
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponseOutputWithContext(ctx context.Context) RetryPolicyResponseOutput {
	return o
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput {
	return o.ToRetryPolicyResponsePtrOutputWithContext(context.Background())
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponsePtrOutputWithContext(ctx context.Context) RetryPolicyResponsePtrOutput {
	return o.ApplyT(func(v RetryPolicyResponse) *RetryPolicyResponse {
		return &v
	}).(RetryPolicyResponsePtrOutput)
}

// Time To Live (in minutes) for events.
func (o RetryPolicyResponseOutput) EventTimeToLiveInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryPolicyResponse) *int { return v.EventTimeToLiveInMinutes }).(pulumi.IntPtrOutput)
}

// Maximum number of delivery retry attempts for events.
func (o RetryPolicyResponseOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryPolicyResponse) *int { return v.MaxDeliveryAttempts }).(pulumi.IntPtrOutput)
}

type RetryPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (RetryPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicyResponse)(nil)).Elem()
}

func (o RetryPolicyResponsePtrOutput) ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput {
	return o
}

func (o RetryPolicyResponsePtrOutput) ToRetryPolicyResponsePtrOutputWithContext(ctx context.Context) RetryPolicyResponsePtrOutput {
	return o
}

func (o RetryPolicyResponsePtrOutput) Elem() RetryPolicyResponseOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) RetryPolicyResponse { return *v }).(RetryPolicyResponseOutput)
}

// Time To Live (in minutes) for events.
func (o RetryPolicyResponsePtrOutput) EventTimeToLiveInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.EventTimeToLiveInMinutes
	}).(pulumi.IntPtrOutput)
}

// Maximum number of delivery retry attempts for events.
func (o RetryPolicyResponsePtrOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeliveryAttempts
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AdvancedFilterOutput{})
	pulumi.RegisterOutputType(AdvancedFilterArrayOutput{})
	pulumi.RegisterOutputType(AdvancedFilterResponseOutput{})
	pulumi.RegisterOutputType(AdvancedFilterResponseArrayOutput{})
	pulumi.RegisterOutputType(DeadLetterDestinationOutput{})
	pulumi.RegisterOutputType(DeadLetterDestinationPtrOutput{})
	pulumi.RegisterOutputType(DeadLetterDestinationResponseOutput{})
	pulumi.RegisterOutputType(DeadLetterDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(EventSubscriptionDestinationPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionDestinationResponseOutput{})
	pulumi.RegisterOutputType(EventSubscriptionDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterResponseOutput{})
	pulumi.RegisterOutputType(EventSubscriptionFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(InputSchemaMappingOutput{})
	pulumi.RegisterOutputType(InputSchemaMappingPtrOutput{})
	pulumi.RegisterOutputType(InputSchemaMappingResponseOutput{})
	pulumi.RegisterOutputType(InputSchemaMappingResponsePtrOutput{})
	pulumi.RegisterOutputType(RetryPolicyOutput{})
	pulumi.RegisterOutputType(RetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(RetryPolicyResponseOutput{})
	pulumi.RegisterOutputType(RetryPolicyResponsePtrOutput{})
}
