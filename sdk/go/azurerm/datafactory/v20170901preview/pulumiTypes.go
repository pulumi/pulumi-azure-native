// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20170901preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A pipeline activity.
type Activity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	Type string `pulumi:"type"`
}

// ActivityInput is an input type that accepts ActivityArgs and ActivityOutput values.
// You can construct a concrete instance of `ActivityInput` via:
//
//          ActivityArgs{...}
type ActivityInput interface {
	pulumi.Input

	ToActivityOutput() ActivityOutput
	ToActivityOutputWithContext(context.Context) ActivityOutput
}

// A pipeline activity.
type ActivityArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of activity.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Activity)(nil)).Elem()
}

func (i ActivityArgs) ToActivityOutput() ActivityOutput {
	return i.ToActivityOutputWithContext(context.Background())
}

func (i ActivityArgs) ToActivityOutputWithContext(ctx context.Context) ActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityOutput)
}

// ActivityArrayInput is an input type that accepts ActivityArray and ActivityArrayOutput values.
// You can construct a concrete instance of `ActivityArrayInput` via:
//
//          ActivityArray{ ActivityArgs{...} }
type ActivityArrayInput interface {
	pulumi.Input

	ToActivityArrayOutput() ActivityArrayOutput
	ToActivityArrayOutputWithContext(context.Context) ActivityArrayOutput
}

type ActivityArray []ActivityInput

func (ActivityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Activity)(nil)).Elem()
}

func (i ActivityArray) ToActivityArrayOutput() ActivityArrayOutput {
	return i.ToActivityArrayOutputWithContext(context.Background())
}

func (i ActivityArray) ToActivityArrayOutputWithContext(ctx context.Context) ActivityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityArrayOutput)
}

// A pipeline activity.
type ActivityOutput struct{ *pulumi.OutputState }

func (ActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Activity)(nil)).Elem()
}

func (o ActivityOutput) ToActivityOutput() ActivityOutput {
	return o
}

func (o ActivityOutput) ToActivityOutputWithContext(ctx context.Context) ActivityOutput {
	return o
}

// Activity depends on condition.
func (o ActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v Activity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o ActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Activity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Activity name.
func (o ActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Activity) string { return v.Name }).(pulumi.StringOutput)
}

// Type of activity.
func (o ActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Activity) string { return v.Type }).(pulumi.StringOutput)
}

type ActivityArrayOutput struct{ *pulumi.OutputState }

func (ActivityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Activity)(nil)).Elem()
}

func (o ActivityArrayOutput) ToActivityArrayOutput() ActivityArrayOutput {
	return o
}

func (o ActivityArrayOutput) ToActivityArrayOutputWithContext(ctx context.Context) ActivityArrayOutput {
	return o
}

func (o ActivityArrayOutput) Index(i pulumi.IntInput) ActivityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Activity {
		return vs[0].([]Activity)[vs[1].(int)]
	}).(ActivityOutput)
}

// Activity dependency information.
type ActivityDependency struct {
	// Activity name.
	Activity string `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions []string `pulumi:"dependencyConditions"`
}

// ActivityDependencyInput is an input type that accepts ActivityDependencyArgs and ActivityDependencyOutput values.
// You can construct a concrete instance of `ActivityDependencyInput` via:
//
//          ActivityDependencyArgs{...}
type ActivityDependencyInput interface {
	pulumi.Input

	ToActivityDependencyOutput() ActivityDependencyOutput
	ToActivityDependencyOutputWithContext(context.Context) ActivityDependencyOutput
}

// Activity dependency information.
type ActivityDependencyArgs struct {
	// Activity name.
	Activity pulumi.StringInput `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions pulumi.StringArrayInput `pulumi:"dependencyConditions"`
}

func (ActivityDependencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityDependency)(nil)).Elem()
}

func (i ActivityDependencyArgs) ToActivityDependencyOutput() ActivityDependencyOutput {
	return i.ToActivityDependencyOutputWithContext(context.Background())
}

func (i ActivityDependencyArgs) ToActivityDependencyOutputWithContext(ctx context.Context) ActivityDependencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityDependencyOutput)
}

// ActivityDependencyArrayInput is an input type that accepts ActivityDependencyArray and ActivityDependencyArrayOutput values.
// You can construct a concrete instance of `ActivityDependencyArrayInput` via:
//
//          ActivityDependencyArray{ ActivityDependencyArgs{...} }
type ActivityDependencyArrayInput interface {
	pulumi.Input

	ToActivityDependencyArrayOutput() ActivityDependencyArrayOutput
	ToActivityDependencyArrayOutputWithContext(context.Context) ActivityDependencyArrayOutput
}

type ActivityDependencyArray []ActivityDependencyInput

func (ActivityDependencyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityDependency)(nil)).Elem()
}

func (i ActivityDependencyArray) ToActivityDependencyArrayOutput() ActivityDependencyArrayOutput {
	return i.ToActivityDependencyArrayOutputWithContext(context.Background())
}

func (i ActivityDependencyArray) ToActivityDependencyArrayOutputWithContext(ctx context.Context) ActivityDependencyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityDependencyArrayOutput)
}

// Activity dependency information.
type ActivityDependencyOutput struct{ *pulumi.OutputState }

func (ActivityDependencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityDependency)(nil)).Elem()
}

func (o ActivityDependencyOutput) ToActivityDependencyOutput() ActivityDependencyOutput {
	return o
}

func (o ActivityDependencyOutput) ToActivityDependencyOutputWithContext(ctx context.Context) ActivityDependencyOutput {
	return o
}

// Activity name.
func (o ActivityDependencyOutput) Activity() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityDependency) string { return v.Activity }).(pulumi.StringOutput)
}

// Match-Condition for the dependency.
func (o ActivityDependencyOutput) DependencyConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityDependency) []string { return v.DependencyConditions }).(pulumi.StringArrayOutput)
}

type ActivityDependencyArrayOutput struct{ *pulumi.OutputState }

func (ActivityDependencyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityDependency)(nil)).Elem()
}

func (o ActivityDependencyArrayOutput) ToActivityDependencyArrayOutput() ActivityDependencyArrayOutput {
	return o
}

func (o ActivityDependencyArrayOutput) ToActivityDependencyArrayOutputWithContext(ctx context.Context) ActivityDependencyArrayOutput {
	return o
}

func (o ActivityDependencyArrayOutput) Index(i pulumi.IntInput) ActivityDependencyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActivityDependency {
		return vs[0].([]ActivityDependency)[vs[1].(int)]
	}).(ActivityDependencyOutput)
}

// Activity dependency information.
type ActivityDependencyResponse struct {
	// Activity name.
	Activity string `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions []string `pulumi:"dependencyConditions"`
}

// ActivityDependencyResponseInput is an input type that accepts ActivityDependencyResponseArgs and ActivityDependencyResponseOutput values.
// You can construct a concrete instance of `ActivityDependencyResponseInput` via:
//
//          ActivityDependencyResponseArgs{...}
type ActivityDependencyResponseInput interface {
	pulumi.Input

	ToActivityDependencyResponseOutput() ActivityDependencyResponseOutput
	ToActivityDependencyResponseOutputWithContext(context.Context) ActivityDependencyResponseOutput
}

// Activity dependency information.
type ActivityDependencyResponseArgs struct {
	// Activity name.
	Activity pulumi.StringInput `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions pulumi.StringArrayInput `pulumi:"dependencyConditions"`
}

func (ActivityDependencyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityDependencyResponse)(nil)).Elem()
}

func (i ActivityDependencyResponseArgs) ToActivityDependencyResponseOutput() ActivityDependencyResponseOutput {
	return i.ToActivityDependencyResponseOutputWithContext(context.Background())
}

func (i ActivityDependencyResponseArgs) ToActivityDependencyResponseOutputWithContext(ctx context.Context) ActivityDependencyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityDependencyResponseOutput)
}

// ActivityDependencyResponseArrayInput is an input type that accepts ActivityDependencyResponseArray and ActivityDependencyResponseArrayOutput values.
// You can construct a concrete instance of `ActivityDependencyResponseArrayInput` via:
//
//          ActivityDependencyResponseArray{ ActivityDependencyResponseArgs{...} }
type ActivityDependencyResponseArrayInput interface {
	pulumi.Input

	ToActivityDependencyResponseArrayOutput() ActivityDependencyResponseArrayOutput
	ToActivityDependencyResponseArrayOutputWithContext(context.Context) ActivityDependencyResponseArrayOutput
}

type ActivityDependencyResponseArray []ActivityDependencyResponseInput

func (ActivityDependencyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityDependencyResponse)(nil)).Elem()
}

func (i ActivityDependencyResponseArray) ToActivityDependencyResponseArrayOutput() ActivityDependencyResponseArrayOutput {
	return i.ToActivityDependencyResponseArrayOutputWithContext(context.Background())
}

func (i ActivityDependencyResponseArray) ToActivityDependencyResponseArrayOutputWithContext(ctx context.Context) ActivityDependencyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityDependencyResponseArrayOutput)
}

// Activity dependency information.
type ActivityDependencyResponseOutput struct{ *pulumi.OutputState }

func (ActivityDependencyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityDependencyResponse)(nil)).Elem()
}

func (o ActivityDependencyResponseOutput) ToActivityDependencyResponseOutput() ActivityDependencyResponseOutput {
	return o
}

func (o ActivityDependencyResponseOutput) ToActivityDependencyResponseOutputWithContext(ctx context.Context) ActivityDependencyResponseOutput {
	return o
}

// Activity name.
func (o ActivityDependencyResponseOutput) Activity() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityDependencyResponse) string { return v.Activity }).(pulumi.StringOutput)
}

// Match-Condition for the dependency.
func (o ActivityDependencyResponseOutput) DependencyConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityDependencyResponse) []string { return v.DependencyConditions }).(pulumi.StringArrayOutput)
}

type ActivityDependencyResponseArrayOutput struct{ *pulumi.OutputState }

func (ActivityDependencyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityDependencyResponse)(nil)).Elem()
}

func (o ActivityDependencyResponseArrayOutput) ToActivityDependencyResponseArrayOutput() ActivityDependencyResponseArrayOutput {
	return o
}

func (o ActivityDependencyResponseArrayOutput) ToActivityDependencyResponseArrayOutputWithContext(ctx context.Context) ActivityDependencyResponseArrayOutput {
	return o
}

func (o ActivityDependencyResponseArrayOutput) Index(i pulumi.IntInput) ActivityDependencyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActivityDependencyResponse {
		return vs[0].([]ActivityDependencyResponse)[vs[1].(int)]
	}).(ActivityDependencyResponseOutput)
}

// A pipeline activity.
type ActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	Type string `pulumi:"type"`
}

// ActivityResponseInput is an input type that accepts ActivityResponseArgs and ActivityResponseOutput values.
// You can construct a concrete instance of `ActivityResponseInput` via:
//
//          ActivityResponseArgs{...}
type ActivityResponseInput interface {
	pulumi.Input

	ToActivityResponseOutput() ActivityResponseOutput
	ToActivityResponseOutputWithContext(context.Context) ActivityResponseOutput
}

// A pipeline activity.
type ActivityResponseArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyResponseArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of activity.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ActivityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityResponse)(nil)).Elem()
}

func (i ActivityResponseArgs) ToActivityResponseOutput() ActivityResponseOutput {
	return i.ToActivityResponseOutputWithContext(context.Background())
}

func (i ActivityResponseArgs) ToActivityResponseOutputWithContext(ctx context.Context) ActivityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityResponseOutput)
}

// ActivityResponseArrayInput is an input type that accepts ActivityResponseArray and ActivityResponseArrayOutput values.
// You can construct a concrete instance of `ActivityResponseArrayInput` via:
//
//          ActivityResponseArray{ ActivityResponseArgs{...} }
type ActivityResponseArrayInput interface {
	pulumi.Input

	ToActivityResponseArrayOutput() ActivityResponseArrayOutput
	ToActivityResponseArrayOutputWithContext(context.Context) ActivityResponseArrayOutput
}

type ActivityResponseArray []ActivityResponseInput

func (ActivityResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityResponse)(nil)).Elem()
}

func (i ActivityResponseArray) ToActivityResponseArrayOutput() ActivityResponseArrayOutput {
	return i.ToActivityResponseArrayOutputWithContext(context.Background())
}

func (i ActivityResponseArray) ToActivityResponseArrayOutputWithContext(ctx context.Context) ActivityResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityResponseArrayOutput)
}

// A pipeline activity.
type ActivityResponseOutput struct{ *pulumi.OutputState }

func (ActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityResponse)(nil)).Elem()
}

func (o ActivityResponseOutput) ToActivityResponseOutput() ActivityResponseOutput {
	return o
}

func (o ActivityResponseOutput) ToActivityResponseOutputWithContext(ctx context.Context) ActivityResponseOutput {
	return o
}

// Activity depends on condition.
func (o ActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v ActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o ActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Activity name.
func (o ActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of activity.
func (o ActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ActivityResponseArrayOutput struct{ *pulumi.OutputState }

func (ActivityResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityResponse)(nil)).Elem()
}

func (o ActivityResponseArrayOutput) ToActivityResponseArrayOutput() ActivityResponseArrayOutput {
	return o
}

func (o ActivityResponseArrayOutput) ToActivityResponseArrayOutputWithContext(ctx context.Context) ActivityResponseArrayOutput {
	return o
}

func (o ActivityResponseArrayOutput) Index(i pulumi.IntInput) ActivityResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActivityResponse {
		return vs[0].([]ActivityResponse)[vs[1].(int)]
	}).(ActivityResponseOutput)
}

// The Azure Data Factory nested object which identifies data within different data stores, such as tables, files, folders, and documents.
type DatasetType struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// DatasetTypeInput is an input type that accepts DatasetTypeArgs and DatasetTypeOutput values.
// You can construct a concrete instance of `DatasetTypeInput` via:
//
//          DatasetTypeArgs{...}
type DatasetTypeInput interface {
	pulumi.Input

	ToDatasetTypeOutput() DatasetTypeOutput
	ToDatasetTypeOutputWithContext(context.Context) DatasetTypeOutput
}

// The Azure Data Factory nested object which identifies data within different data stores, such as tables, files, folders, and documents.
type DatasetTypeArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetType)(nil)).Elem()
}

func (i DatasetTypeArgs) ToDatasetTypeOutput() DatasetTypeOutput {
	return i.ToDatasetTypeOutputWithContext(context.Background())
}

func (i DatasetTypeArgs) ToDatasetTypeOutputWithContext(ctx context.Context) DatasetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetTypeOutput)
}

func (i DatasetTypeArgs) ToDatasetTypePtrOutput() DatasetTypePtrOutput {
	return i.ToDatasetTypePtrOutputWithContext(context.Background())
}

func (i DatasetTypeArgs) ToDatasetTypePtrOutputWithContext(ctx context.Context) DatasetTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetTypeOutput).ToDatasetTypePtrOutputWithContext(ctx)
}

// DatasetTypePtrInput is an input type that accepts DatasetTypeArgs, DatasetTypePtr and DatasetTypePtrOutput values.
// You can construct a concrete instance of `DatasetTypePtrInput` via:
//
//          DatasetTypeArgs{...}
//
//  or:
//
//          nil
type DatasetTypePtrInput interface {
	pulumi.Input

	ToDatasetTypePtrOutput() DatasetTypePtrOutput
	ToDatasetTypePtrOutputWithContext(context.Context) DatasetTypePtrOutput
}

type datasetTypePtrType DatasetTypeArgs

func DatasetTypePtr(v *DatasetTypeArgs) DatasetTypePtrInput {
	return (*datasetTypePtrType)(v)
}

func (*datasetTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetType)(nil)).Elem()
}

func (i *datasetTypePtrType) ToDatasetTypePtrOutput() DatasetTypePtrOutput {
	return i.ToDatasetTypePtrOutputWithContext(context.Background())
}

func (i *datasetTypePtrType) ToDatasetTypePtrOutputWithContext(ctx context.Context) DatasetTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetTypePtrOutput)
}

// The Azure Data Factory nested object which identifies data within different data stores, such as tables, files, folders, and documents.
type DatasetTypeOutput struct{ *pulumi.OutputState }

func (DatasetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetType)(nil)).Elem()
}

func (o DatasetTypeOutput) ToDatasetTypeOutput() DatasetTypeOutput {
	return o
}

func (o DatasetTypeOutput) ToDatasetTypeOutputWithContext(ctx context.Context) DatasetTypeOutput {
	return o
}

func (o DatasetTypeOutput) ToDatasetTypePtrOutput() DatasetTypePtrOutput {
	return o.ToDatasetTypePtrOutputWithContext(context.Background())
}

func (o DatasetTypeOutput) ToDatasetTypePtrOutputWithContext(ctx context.Context) DatasetTypePtrOutput {
	return o.ApplyT(func(v DatasetType) *DatasetType {
		return &v
	}).(DatasetTypePtrOutput)
}

// List of tags that can be used for describing the Dataset.
func (o DatasetTypeOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v DatasetType) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o DatasetTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o DatasetTypeOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v DatasetType) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o DatasetTypeOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v DatasetType) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DatasetTypeOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v DatasetType) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o DatasetTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetType) string { return v.Type }).(pulumi.StringOutput)
}

type DatasetTypePtrOutput struct{ *pulumi.OutputState }

func (DatasetTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetType)(nil)).Elem()
}

func (o DatasetTypePtrOutput) ToDatasetTypePtrOutput() DatasetTypePtrOutput {
	return o
}

func (o DatasetTypePtrOutput) ToDatasetTypePtrOutputWithContext(ctx context.Context) DatasetTypePtrOutput {
	return o
}

func (o DatasetTypePtrOutput) Elem() DatasetTypeOutput {
	return o.ApplyT(func(v *DatasetType) DatasetType { return *v }).(DatasetTypeOutput)
}

// List of tags that can be used for describing the Dataset.
func (o DatasetTypePtrOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *DatasetType) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o DatasetTypePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetType) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o DatasetTypePtrOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v *DatasetType) *LinkedServiceReference {
		if v == nil {
			return nil
		}
		return &v.LinkedServiceName
	}).(LinkedServiceReferencePtrOutput)
}

// Parameters for dataset.
func (o DatasetTypePtrOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v *DatasetType) map[string]ParameterSpecification {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterSpecificationMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DatasetTypePtrOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v *DatasetType) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Structure
	}).(pulumi.MapOutput)
}

// Type of dataset.
func (o DatasetTypePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetType) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The Azure Data Factory nested object which identifies data within different data stores, such as tables, files, folders, and documents.
type DatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// DatasetResponseInput is an input type that accepts DatasetResponseArgs and DatasetResponseOutput values.
// You can construct a concrete instance of `DatasetResponseInput` via:
//
//          DatasetResponseArgs{...}
type DatasetResponseInput interface {
	pulumi.Input

	ToDatasetResponseOutput() DatasetResponseOutput
	ToDatasetResponseOutputWithContext(context.Context) DatasetResponseOutput
}

// The Azure Data Factory nested object which identifies data within different data stores, such as tables, files, folders, and documents.
type DatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetResponse)(nil)).Elem()
}

func (i DatasetResponseArgs) ToDatasetResponseOutput() DatasetResponseOutput {
	return i.ToDatasetResponseOutputWithContext(context.Background())
}

func (i DatasetResponseArgs) ToDatasetResponseOutputWithContext(ctx context.Context) DatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetResponseOutput)
}

func (i DatasetResponseArgs) ToDatasetResponsePtrOutput() DatasetResponsePtrOutput {
	return i.ToDatasetResponsePtrOutputWithContext(context.Background())
}

func (i DatasetResponseArgs) ToDatasetResponsePtrOutputWithContext(ctx context.Context) DatasetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetResponseOutput).ToDatasetResponsePtrOutputWithContext(ctx)
}

// DatasetResponsePtrInput is an input type that accepts DatasetResponseArgs, DatasetResponsePtr and DatasetResponsePtrOutput values.
// You can construct a concrete instance of `DatasetResponsePtrInput` via:
//
//          DatasetResponseArgs{...}
//
//  or:
//
//          nil
type DatasetResponsePtrInput interface {
	pulumi.Input

	ToDatasetResponsePtrOutput() DatasetResponsePtrOutput
	ToDatasetResponsePtrOutputWithContext(context.Context) DatasetResponsePtrOutput
}

type datasetResponsePtrType DatasetResponseArgs

func DatasetResponsePtr(v *DatasetResponseArgs) DatasetResponsePtrInput {
	return (*datasetResponsePtrType)(v)
}

func (*datasetResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetResponse)(nil)).Elem()
}

func (i *datasetResponsePtrType) ToDatasetResponsePtrOutput() DatasetResponsePtrOutput {
	return i.ToDatasetResponsePtrOutputWithContext(context.Background())
}

func (i *datasetResponsePtrType) ToDatasetResponsePtrOutputWithContext(ctx context.Context) DatasetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetResponsePtrOutput)
}

// The Azure Data Factory nested object which identifies data within different data stores, such as tables, files, folders, and documents.
type DatasetResponseOutput struct{ *pulumi.OutputState }

func (DatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetResponse)(nil)).Elem()
}

func (o DatasetResponseOutput) ToDatasetResponseOutput() DatasetResponseOutput {
	return o
}

func (o DatasetResponseOutput) ToDatasetResponseOutputWithContext(ctx context.Context) DatasetResponseOutput {
	return o
}

func (o DatasetResponseOutput) ToDatasetResponsePtrOutput() DatasetResponsePtrOutput {
	return o.ToDatasetResponsePtrOutputWithContext(context.Background())
}

func (o DatasetResponseOutput) ToDatasetResponsePtrOutputWithContext(ctx context.Context) DatasetResponsePtrOutput {
	return o.ApplyT(func(v DatasetResponse) *DatasetResponse {
		return &v
	}).(DatasetResponsePtrOutput)
}

// List of tags that can be used for describing the Dataset.
func (o DatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v DatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o DatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o DatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v DatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o DatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v DatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o DatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

type DatasetResponsePtrOutput struct{ *pulumi.OutputState }

func (DatasetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetResponse)(nil)).Elem()
}

func (o DatasetResponsePtrOutput) ToDatasetResponsePtrOutput() DatasetResponsePtrOutput {
	return o
}

func (o DatasetResponsePtrOutput) ToDatasetResponsePtrOutputWithContext(ctx context.Context) DatasetResponsePtrOutput {
	return o
}

func (o DatasetResponsePtrOutput) Elem() DatasetResponseOutput {
	return o.ApplyT(func(v *DatasetResponse) DatasetResponse { return *v }).(DatasetResponseOutput)
}

// List of tags that can be used for describing the Dataset.
func (o DatasetResponsePtrOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *DatasetResponse) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o DatasetResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o DatasetResponsePtrOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v *DatasetResponse) *LinkedServiceReferenceResponse {
		if v == nil {
			return nil
		}
		return &v.LinkedServiceName
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Parameters for dataset.
func (o DatasetResponsePtrOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v *DatasetResponse) map[string]ParameterSpecificationResponse {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DatasetResponsePtrOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v *DatasetResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Structure
	}).(pulumi.MapOutput)
}

// Type of dataset.
func (o DatasetResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Identity properties of the factory resource.
type FactoryIdentity struct {
	// The identity type. Currently the only supported type is 'SystemAssigned'.
	Type string `pulumi:"type"`
}

// FactoryIdentityInput is an input type that accepts FactoryIdentityArgs and FactoryIdentityOutput values.
// You can construct a concrete instance of `FactoryIdentityInput` via:
//
//          FactoryIdentityArgs{...}
type FactoryIdentityInput interface {
	pulumi.Input

	ToFactoryIdentityOutput() FactoryIdentityOutput
	ToFactoryIdentityOutputWithContext(context.Context) FactoryIdentityOutput
}

// Identity properties of the factory resource.
type FactoryIdentityArgs struct {
	// The identity type. Currently the only supported type is 'SystemAssigned'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FactoryIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentity)(nil)).Elem()
}

func (i FactoryIdentityArgs) ToFactoryIdentityOutput() FactoryIdentityOutput {
	return i.ToFactoryIdentityOutputWithContext(context.Background())
}

func (i FactoryIdentityArgs) ToFactoryIdentityOutputWithContext(ctx context.Context) FactoryIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityOutput)
}

func (i FactoryIdentityArgs) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return i.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (i FactoryIdentityArgs) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityOutput).ToFactoryIdentityPtrOutputWithContext(ctx)
}

// FactoryIdentityPtrInput is an input type that accepts FactoryIdentityArgs, FactoryIdentityPtr and FactoryIdentityPtrOutput values.
// You can construct a concrete instance of `FactoryIdentityPtrInput` via:
//
//          FactoryIdentityArgs{...}
//
//  or:
//
//          nil
type FactoryIdentityPtrInput interface {
	pulumi.Input

	ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput
	ToFactoryIdentityPtrOutputWithContext(context.Context) FactoryIdentityPtrOutput
}

type factoryIdentityPtrType FactoryIdentityArgs

func FactoryIdentityPtr(v *FactoryIdentityArgs) FactoryIdentityPtrInput {
	return (*factoryIdentityPtrType)(v)
}

func (*factoryIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentity)(nil)).Elem()
}

func (i *factoryIdentityPtrType) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return i.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (i *factoryIdentityPtrType) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityPtrOutput)
}

// Identity properties of the factory resource.
type FactoryIdentityOutput struct{ *pulumi.OutputState }

func (FactoryIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentity)(nil)).Elem()
}

func (o FactoryIdentityOutput) ToFactoryIdentityOutput() FactoryIdentityOutput {
	return o
}

func (o FactoryIdentityOutput) ToFactoryIdentityOutputWithContext(ctx context.Context) FactoryIdentityOutput {
	return o
}

func (o FactoryIdentityOutput) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return o.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (o FactoryIdentityOutput) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return o.ApplyT(func(v FactoryIdentity) *FactoryIdentity {
		return &v
	}).(FactoryIdentityPtrOutput)
}

// The identity type. Currently the only supported type is 'SystemAssigned'.
func (o FactoryIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type FactoryIdentityPtrOutput struct{ *pulumi.OutputState }

func (FactoryIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentity)(nil)).Elem()
}

func (o FactoryIdentityPtrOutput) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return o
}

func (o FactoryIdentityPtrOutput) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return o
}

func (o FactoryIdentityPtrOutput) Elem() FactoryIdentityOutput {
	return o.ApplyT(func(v *FactoryIdentity) FactoryIdentity { return *v }).(FactoryIdentityOutput)
}

// The identity type. Currently the only supported type is 'SystemAssigned'.
func (o FactoryIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Identity properties of the factory resource.
type FactoryIdentityResponse struct {
	// The principal id of the identity.
	PrincipalId string `pulumi:"principalId"`
	// The client tenant id of the identity.
	TenantId string `pulumi:"tenantId"`
	// The identity type. Currently the only supported type is 'SystemAssigned'.
	Type string `pulumi:"type"`
}

// FactoryIdentityResponseInput is an input type that accepts FactoryIdentityResponseArgs and FactoryIdentityResponseOutput values.
// You can construct a concrete instance of `FactoryIdentityResponseInput` via:
//
//          FactoryIdentityResponseArgs{...}
type FactoryIdentityResponseInput interface {
	pulumi.Input

	ToFactoryIdentityResponseOutput() FactoryIdentityResponseOutput
	ToFactoryIdentityResponseOutputWithContext(context.Context) FactoryIdentityResponseOutput
}

// Identity properties of the factory resource.
type FactoryIdentityResponseArgs struct {
	// The principal id of the identity.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The client tenant id of the identity.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The identity type. Currently the only supported type is 'SystemAssigned'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FactoryIdentityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentityResponse)(nil)).Elem()
}

func (i FactoryIdentityResponseArgs) ToFactoryIdentityResponseOutput() FactoryIdentityResponseOutput {
	return i.ToFactoryIdentityResponseOutputWithContext(context.Background())
}

func (i FactoryIdentityResponseArgs) ToFactoryIdentityResponseOutputWithContext(ctx context.Context) FactoryIdentityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityResponseOutput)
}

func (i FactoryIdentityResponseArgs) ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput {
	return i.ToFactoryIdentityResponsePtrOutputWithContext(context.Background())
}

func (i FactoryIdentityResponseArgs) ToFactoryIdentityResponsePtrOutputWithContext(ctx context.Context) FactoryIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityResponseOutput).ToFactoryIdentityResponsePtrOutputWithContext(ctx)
}

// FactoryIdentityResponsePtrInput is an input type that accepts FactoryIdentityResponseArgs, FactoryIdentityResponsePtr and FactoryIdentityResponsePtrOutput values.
// You can construct a concrete instance of `FactoryIdentityResponsePtrInput` via:
//
//          FactoryIdentityResponseArgs{...}
//
//  or:
//
//          nil
type FactoryIdentityResponsePtrInput interface {
	pulumi.Input

	ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput
	ToFactoryIdentityResponsePtrOutputWithContext(context.Context) FactoryIdentityResponsePtrOutput
}

type factoryIdentityResponsePtrType FactoryIdentityResponseArgs

func FactoryIdentityResponsePtr(v *FactoryIdentityResponseArgs) FactoryIdentityResponsePtrInput {
	return (*factoryIdentityResponsePtrType)(v)
}

func (*factoryIdentityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentityResponse)(nil)).Elem()
}

func (i *factoryIdentityResponsePtrType) ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput {
	return i.ToFactoryIdentityResponsePtrOutputWithContext(context.Background())
}

func (i *factoryIdentityResponsePtrType) ToFactoryIdentityResponsePtrOutputWithContext(ctx context.Context) FactoryIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityResponsePtrOutput)
}

// Identity properties of the factory resource.
type FactoryIdentityResponseOutput struct{ *pulumi.OutputState }

func (FactoryIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentityResponse)(nil)).Elem()
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponseOutput() FactoryIdentityResponseOutput {
	return o
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponseOutputWithContext(ctx context.Context) FactoryIdentityResponseOutput {
	return o
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput {
	return o.ToFactoryIdentityResponsePtrOutputWithContext(context.Background())
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponsePtrOutputWithContext(ctx context.Context) FactoryIdentityResponsePtrOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) *FactoryIdentityResponse {
		return &v
	}).(FactoryIdentityResponsePtrOutput)
}

// The principal id of the identity.
func (o FactoryIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The client tenant id of the identity.
func (o FactoryIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type. Currently the only supported type is 'SystemAssigned'.
func (o FactoryIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

type FactoryIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (FactoryIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentityResponse)(nil)).Elem()
}

func (o FactoryIdentityResponsePtrOutput) ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput {
	return o
}

func (o FactoryIdentityResponsePtrOutput) ToFactoryIdentityResponsePtrOutputWithContext(ctx context.Context) FactoryIdentityResponsePtrOutput {
	return o
}

func (o FactoryIdentityResponsePtrOutput) Elem() FactoryIdentityResponseOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) FactoryIdentityResponse { return *v }).(FactoryIdentityResponseOutput)
}

// The principal id of the identity.
func (o FactoryIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The client tenant id of the identity.
func (o FactoryIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type. Currently the only supported type is 'SystemAssigned'.
func (o FactoryIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Factory's VSTS repo information.
type FactoryVSTSConfiguration struct {
	// VSTS account name.
	AccountName *string `pulumi:"accountName"`
	// VSTS collaboration branch.
	CollaborationBranch *string `pulumi:"collaborationBranch"`
	// VSTS last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// VSTS project name.
	ProjectName *string `pulumi:"projectName"`
	// VSTS repository name.
	RepositoryName *string `pulumi:"repositoryName"`
	// VSTS root folder.
	RootFolder *string `pulumi:"rootFolder"`
	// VSTS tenant id.
	TenantId *string `pulumi:"tenantId"`
}

// FactoryVSTSConfigurationInput is an input type that accepts FactoryVSTSConfigurationArgs and FactoryVSTSConfigurationOutput values.
// You can construct a concrete instance of `FactoryVSTSConfigurationInput` via:
//
//          FactoryVSTSConfigurationArgs{...}
type FactoryVSTSConfigurationInput interface {
	pulumi.Input

	ToFactoryVSTSConfigurationOutput() FactoryVSTSConfigurationOutput
	ToFactoryVSTSConfigurationOutputWithContext(context.Context) FactoryVSTSConfigurationOutput
}

// Factory's VSTS repo information.
type FactoryVSTSConfigurationArgs struct {
	// VSTS account name.
	AccountName pulumi.StringPtrInput `pulumi:"accountName"`
	// VSTS collaboration branch.
	CollaborationBranch pulumi.StringPtrInput `pulumi:"collaborationBranch"`
	// VSTS last commit id.
	LastCommitId pulumi.StringPtrInput `pulumi:"lastCommitId"`
	// VSTS project name.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// VSTS repository name.
	RepositoryName pulumi.StringPtrInput `pulumi:"repositoryName"`
	// VSTS root folder.
	RootFolder pulumi.StringPtrInput `pulumi:"rootFolder"`
	// VSTS tenant id.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (FactoryVSTSConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryVSTSConfiguration)(nil)).Elem()
}

func (i FactoryVSTSConfigurationArgs) ToFactoryVSTSConfigurationOutput() FactoryVSTSConfigurationOutput {
	return i.ToFactoryVSTSConfigurationOutputWithContext(context.Background())
}

func (i FactoryVSTSConfigurationArgs) ToFactoryVSTSConfigurationOutputWithContext(ctx context.Context) FactoryVSTSConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryVSTSConfigurationOutput)
}

func (i FactoryVSTSConfigurationArgs) ToFactoryVSTSConfigurationPtrOutput() FactoryVSTSConfigurationPtrOutput {
	return i.ToFactoryVSTSConfigurationPtrOutputWithContext(context.Background())
}

func (i FactoryVSTSConfigurationArgs) ToFactoryVSTSConfigurationPtrOutputWithContext(ctx context.Context) FactoryVSTSConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryVSTSConfigurationOutput).ToFactoryVSTSConfigurationPtrOutputWithContext(ctx)
}

// FactoryVSTSConfigurationPtrInput is an input type that accepts FactoryVSTSConfigurationArgs, FactoryVSTSConfigurationPtr and FactoryVSTSConfigurationPtrOutput values.
// You can construct a concrete instance of `FactoryVSTSConfigurationPtrInput` via:
//
//          FactoryVSTSConfigurationArgs{...}
//
//  or:
//
//          nil
type FactoryVSTSConfigurationPtrInput interface {
	pulumi.Input

	ToFactoryVSTSConfigurationPtrOutput() FactoryVSTSConfigurationPtrOutput
	ToFactoryVSTSConfigurationPtrOutputWithContext(context.Context) FactoryVSTSConfigurationPtrOutput
}

type factoryVSTSConfigurationPtrType FactoryVSTSConfigurationArgs

func FactoryVSTSConfigurationPtr(v *FactoryVSTSConfigurationArgs) FactoryVSTSConfigurationPtrInput {
	return (*factoryVSTSConfigurationPtrType)(v)
}

func (*factoryVSTSConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryVSTSConfiguration)(nil)).Elem()
}

func (i *factoryVSTSConfigurationPtrType) ToFactoryVSTSConfigurationPtrOutput() FactoryVSTSConfigurationPtrOutput {
	return i.ToFactoryVSTSConfigurationPtrOutputWithContext(context.Background())
}

func (i *factoryVSTSConfigurationPtrType) ToFactoryVSTSConfigurationPtrOutputWithContext(ctx context.Context) FactoryVSTSConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryVSTSConfigurationPtrOutput)
}

// Factory's VSTS repo information.
type FactoryVSTSConfigurationOutput struct{ *pulumi.OutputState }

func (FactoryVSTSConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryVSTSConfiguration)(nil)).Elem()
}

func (o FactoryVSTSConfigurationOutput) ToFactoryVSTSConfigurationOutput() FactoryVSTSConfigurationOutput {
	return o
}

func (o FactoryVSTSConfigurationOutput) ToFactoryVSTSConfigurationOutputWithContext(ctx context.Context) FactoryVSTSConfigurationOutput {
	return o
}

func (o FactoryVSTSConfigurationOutput) ToFactoryVSTSConfigurationPtrOutput() FactoryVSTSConfigurationPtrOutput {
	return o.ToFactoryVSTSConfigurationPtrOutputWithContext(context.Background())
}

func (o FactoryVSTSConfigurationOutput) ToFactoryVSTSConfigurationPtrOutputWithContext(ctx context.Context) FactoryVSTSConfigurationPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) *FactoryVSTSConfiguration {
		return &v
	}).(FactoryVSTSConfigurationPtrOutput)
}

// VSTS account name.
func (o FactoryVSTSConfigurationOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// VSTS collaboration branch.
func (o FactoryVSTSConfigurationOutput) CollaborationBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) *string { return v.CollaborationBranch }).(pulumi.StringPtrOutput)
}

// VSTS last commit id.
func (o FactoryVSTSConfigurationOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) *string { return v.LastCommitId }).(pulumi.StringPtrOutput)
}

// VSTS project name.
func (o FactoryVSTSConfigurationOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// VSTS repository name.
func (o FactoryVSTSConfigurationOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) *string { return v.RepositoryName }).(pulumi.StringPtrOutput)
}

// VSTS root folder.
func (o FactoryVSTSConfigurationOutput) RootFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) *string { return v.RootFolder }).(pulumi.StringPtrOutput)
}

// VSTS tenant id.
func (o FactoryVSTSConfigurationOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type FactoryVSTSConfigurationPtrOutput struct{ *pulumi.OutputState }

func (FactoryVSTSConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryVSTSConfiguration)(nil)).Elem()
}

func (o FactoryVSTSConfigurationPtrOutput) ToFactoryVSTSConfigurationPtrOutput() FactoryVSTSConfigurationPtrOutput {
	return o
}

func (o FactoryVSTSConfigurationPtrOutput) ToFactoryVSTSConfigurationPtrOutputWithContext(ctx context.Context) FactoryVSTSConfigurationPtrOutput {
	return o
}

func (o FactoryVSTSConfigurationPtrOutput) Elem() FactoryVSTSConfigurationOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) FactoryVSTSConfiguration { return *v }).(FactoryVSTSConfigurationOutput)
}

// VSTS account name.
func (o FactoryVSTSConfigurationPtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AccountName
	}).(pulumi.StringPtrOutput)
}

// VSTS collaboration branch.
func (o FactoryVSTSConfigurationPtrOutput) CollaborationBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CollaborationBranch
	}).(pulumi.StringPtrOutput)
}

// VSTS last commit id.
func (o FactoryVSTSConfigurationPtrOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.LastCommitId
	}).(pulumi.StringPtrOutput)
}

// VSTS project name.
func (o FactoryVSTSConfigurationPtrOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ProjectName
	}).(pulumi.StringPtrOutput)
}

// VSTS repository name.
func (o FactoryVSTSConfigurationPtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// VSTS root folder.
func (o FactoryVSTSConfigurationPtrOutput) RootFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RootFolder
	}).(pulumi.StringPtrOutput)
}

// VSTS tenant id.
func (o FactoryVSTSConfigurationPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Factory's VSTS repo information.
type FactoryVSTSConfigurationResponse struct {
	// VSTS account name.
	AccountName *string `pulumi:"accountName"`
	// VSTS collaboration branch.
	CollaborationBranch *string `pulumi:"collaborationBranch"`
	// VSTS last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// VSTS project name.
	ProjectName *string `pulumi:"projectName"`
	// VSTS repository name.
	RepositoryName *string `pulumi:"repositoryName"`
	// VSTS root folder.
	RootFolder *string `pulumi:"rootFolder"`
	// VSTS tenant id.
	TenantId *string `pulumi:"tenantId"`
}

// FactoryVSTSConfigurationResponseInput is an input type that accepts FactoryVSTSConfigurationResponseArgs and FactoryVSTSConfigurationResponseOutput values.
// You can construct a concrete instance of `FactoryVSTSConfigurationResponseInput` via:
//
//          FactoryVSTSConfigurationResponseArgs{...}
type FactoryVSTSConfigurationResponseInput interface {
	pulumi.Input

	ToFactoryVSTSConfigurationResponseOutput() FactoryVSTSConfigurationResponseOutput
	ToFactoryVSTSConfigurationResponseOutputWithContext(context.Context) FactoryVSTSConfigurationResponseOutput
}

// Factory's VSTS repo information.
type FactoryVSTSConfigurationResponseArgs struct {
	// VSTS account name.
	AccountName pulumi.StringPtrInput `pulumi:"accountName"`
	// VSTS collaboration branch.
	CollaborationBranch pulumi.StringPtrInput `pulumi:"collaborationBranch"`
	// VSTS last commit id.
	LastCommitId pulumi.StringPtrInput `pulumi:"lastCommitId"`
	// VSTS project name.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// VSTS repository name.
	RepositoryName pulumi.StringPtrInput `pulumi:"repositoryName"`
	// VSTS root folder.
	RootFolder pulumi.StringPtrInput `pulumi:"rootFolder"`
	// VSTS tenant id.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (FactoryVSTSConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryVSTSConfigurationResponse)(nil)).Elem()
}

func (i FactoryVSTSConfigurationResponseArgs) ToFactoryVSTSConfigurationResponseOutput() FactoryVSTSConfigurationResponseOutput {
	return i.ToFactoryVSTSConfigurationResponseOutputWithContext(context.Background())
}

func (i FactoryVSTSConfigurationResponseArgs) ToFactoryVSTSConfigurationResponseOutputWithContext(ctx context.Context) FactoryVSTSConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryVSTSConfigurationResponseOutput)
}

func (i FactoryVSTSConfigurationResponseArgs) ToFactoryVSTSConfigurationResponsePtrOutput() FactoryVSTSConfigurationResponsePtrOutput {
	return i.ToFactoryVSTSConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i FactoryVSTSConfigurationResponseArgs) ToFactoryVSTSConfigurationResponsePtrOutputWithContext(ctx context.Context) FactoryVSTSConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryVSTSConfigurationResponseOutput).ToFactoryVSTSConfigurationResponsePtrOutputWithContext(ctx)
}

// FactoryVSTSConfigurationResponsePtrInput is an input type that accepts FactoryVSTSConfigurationResponseArgs, FactoryVSTSConfigurationResponsePtr and FactoryVSTSConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `FactoryVSTSConfigurationResponsePtrInput` via:
//
//          FactoryVSTSConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type FactoryVSTSConfigurationResponsePtrInput interface {
	pulumi.Input

	ToFactoryVSTSConfigurationResponsePtrOutput() FactoryVSTSConfigurationResponsePtrOutput
	ToFactoryVSTSConfigurationResponsePtrOutputWithContext(context.Context) FactoryVSTSConfigurationResponsePtrOutput
}

type factoryVSTSConfigurationResponsePtrType FactoryVSTSConfigurationResponseArgs

func FactoryVSTSConfigurationResponsePtr(v *FactoryVSTSConfigurationResponseArgs) FactoryVSTSConfigurationResponsePtrInput {
	return (*factoryVSTSConfigurationResponsePtrType)(v)
}

func (*factoryVSTSConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryVSTSConfigurationResponse)(nil)).Elem()
}

func (i *factoryVSTSConfigurationResponsePtrType) ToFactoryVSTSConfigurationResponsePtrOutput() FactoryVSTSConfigurationResponsePtrOutput {
	return i.ToFactoryVSTSConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *factoryVSTSConfigurationResponsePtrType) ToFactoryVSTSConfigurationResponsePtrOutputWithContext(ctx context.Context) FactoryVSTSConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryVSTSConfigurationResponsePtrOutput)
}

// Factory's VSTS repo information.
type FactoryVSTSConfigurationResponseOutput struct{ *pulumi.OutputState }

func (FactoryVSTSConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryVSTSConfigurationResponse)(nil)).Elem()
}

func (o FactoryVSTSConfigurationResponseOutput) ToFactoryVSTSConfigurationResponseOutput() FactoryVSTSConfigurationResponseOutput {
	return o
}

func (o FactoryVSTSConfigurationResponseOutput) ToFactoryVSTSConfigurationResponseOutputWithContext(ctx context.Context) FactoryVSTSConfigurationResponseOutput {
	return o
}

func (o FactoryVSTSConfigurationResponseOutput) ToFactoryVSTSConfigurationResponsePtrOutput() FactoryVSTSConfigurationResponsePtrOutput {
	return o.ToFactoryVSTSConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o FactoryVSTSConfigurationResponseOutput) ToFactoryVSTSConfigurationResponsePtrOutputWithContext(ctx context.Context) FactoryVSTSConfigurationResponsePtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *FactoryVSTSConfigurationResponse {
		return &v
	}).(FactoryVSTSConfigurationResponsePtrOutput)
}

// VSTS account name.
func (o FactoryVSTSConfigurationResponseOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// VSTS collaboration branch.
func (o FactoryVSTSConfigurationResponseOutput) CollaborationBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.CollaborationBranch }).(pulumi.StringPtrOutput)
}

// VSTS last commit id.
func (o FactoryVSTSConfigurationResponseOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.LastCommitId }).(pulumi.StringPtrOutput)
}

// VSTS project name.
func (o FactoryVSTSConfigurationResponseOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// VSTS repository name.
func (o FactoryVSTSConfigurationResponseOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.RepositoryName }).(pulumi.StringPtrOutput)
}

// VSTS root folder.
func (o FactoryVSTSConfigurationResponseOutput) RootFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.RootFolder }).(pulumi.StringPtrOutput)
}

// VSTS tenant id.
func (o FactoryVSTSConfigurationResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type FactoryVSTSConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (FactoryVSTSConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryVSTSConfigurationResponse)(nil)).Elem()
}

func (o FactoryVSTSConfigurationResponsePtrOutput) ToFactoryVSTSConfigurationResponsePtrOutput() FactoryVSTSConfigurationResponsePtrOutput {
	return o
}

func (o FactoryVSTSConfigurationResponsePtrOutput) ToFactoryVSTSConfigurationResponsePtrOutputWithContext(ctx context.Context) FactoryVSTSConfigurationResponsePtrOutput {
	return o
}

func (o FactoryVSTSConfigurationResponsePtrOutput) Elem() FactoryVSTSConfigurationResponseOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) FactoryVSTSConfigurationResponse { return *v }).(FactoryVSTSConfigurationResponseOutput)
}

// VSTS account name.
func (o FactoryVSTSConfigurationResponsePtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccountName
	}).(pulumi.StringPtrOutput)
}

// VSTS collaboration branch.
func (o FactoryVSTSConfigurationResponsePtrOutput) CollaborationBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CollaborationBranch
	}).(pulumi.StringPtrOutput)
}

// VSTS last commit id.
func (o FactoryVSTSConfigurationResponsePtrOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastCommitId
	}).(pulumi.StringPtrOutput)
}

// VSTS project name.
func (o FactoryVSTSConfigurationResponsePtrOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProjectName
	}).(pulumi.StringPtrOutput)
}

// VSTS repository name.
func (o FactoryVSTSConfigurationResponsePtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// VSTS root folder.
func (o FactoryVSTSConfigurationResponsePtrOutput) RootFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.RootFolder
	}).(pulumi.StringPtrOutput)
}

// VSTS tenant id.
func (o FactoryVSTSConfigurationResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Azure Data Factory nested object which serves as a compute resource for activities.
type IntegrationRuntimeType struct {
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// IntegrationRuntimeTypeInput is an input type that accepts IntegrationRuntimeTypeArgs and IntegrationRuntimeTypeOutput values.
// You can construct a concrete instance of `IntegrationRuntimeTypeInput` via:
//
//          IntegrationRuntimeTypeArgs{...}
type IntegrationRuntimeTypeInput interface {
	pulumi.Input

	ToIntegrationRuntimeTypeOutput() IntegrationRuntimeTypeOutput
	ToIntegrationRuntimeTypeOutputWithContext(context.Context) IntegrationRuntimeTypeOutput
}

// Azure Data Factory nested object which serves as a compute resource for activities.
type IntegrationRuntimeTypeArgs struct {
	// Integration runtime description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IntegrationRuntimeTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeType)(nil)).Elem()
}

func (i IntegrationRuntimeTypeArgs) ToIntegrationRuntimeTypeOutput() IntegrationRuntimeTypeOutput {
	return i.ToIntegrationRuntimeTypeOutputWithContext(context.Background())
}

func (i IntegrationRuntimeTypeArgs) ToIntegrationRuntimeTypeOutputWithContext(ctx context.Context) IntegrationRuntimeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeTypeOutput)
}

func (i IntegrationRuntimeTypeArgs) ToIntegrationRuntimeTypePtrOutput() IntegrationRuntimeTypePtrOutput {
	return i.ToIntegrationRuntimeTypePtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeTypeArgs) ToIntegrationRuntimeTypePtrOutputWithContext(ctx context.Context) IntegrationRuntimeTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeTypeOutput).ToIntegrationRuntimeTypePtrOutputWithContext(ctx)
}

// IntegrationRuntimeTypePtrInput is an input type that accepts IntegrationRuntimeTypeArgs, IntegrationRuntimeTypePtr and IntegrationRuntimeTypePtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeTypePtrInput` via:
//
//          IntegrationRuntimeTypeArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeTypePtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeTypePtrOutput() IntegrationRuntimeTypePtrOutput
	ToIntegrationRuntimeTypePtrOutputWithContext(context.Context) IntegrationRuntimeTypePtrOutput
}

type integrationRuntimeTypePtrType IntegrationRuntimeTypeArgs

func IntegrationRuntimeTypePtr(v *IntegrationRuntimeTypeArgs) IntegrationRuntimeTypePtrInput {
	return (*integrationRuntimeTypePtrType)(v)
}

func (*integrationRuntimeTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeType)(nil)).Elem()
}

func (i *integrationRuntimeTypePtrType) ToIntegrationRuntimeTypePtrOutput() IntegrationRuntimeTypePtrOutput {
	return i.ToIntegrationRuntimeTypePtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeTypePtrType) ToIntegrationRuntimeTypePtrOutputWithContext(ctx context.Context) IntegrationRuntimeTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeTypePtrOutput)
}

// Azure Data Factory nested object which serves as a compute resource for activities.
type IntegrationRuntimeTypeOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeType)(nil)).Elem()
}

func (o IntegrationRuntimeTypeOutput) ToIntegrationRuntimeTypeOutput() IntegrationRuntimeTypeOutput {
	return o
}

func (o IntegrationRuntimeTypeOutput) ToIntegrationRuntimeTypeOutputWithContext(ctx context.Context) IntegrationRuntimeTypeOutput {
	return o
}

func (o IntegrationRuntimeTypeOutput) ToIntegrationRuntimeTypePtrOutput() IntegrationRuntimeTypePtrOutput {
	return o.ToIntegrationRuntimeTypePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeTypeOutput) ToIntegrationRuntimeTypePtrOutputWithContext(ctx context.Context) IntegrationRuntimeTypePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeType) *IntegrationRuntimeType {
		return &v
	}).(IntegrationRuntimeTypePtrOutput)
}

// Integration runtime description.
func (o IntegrationRuntimeTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeType) string { return v.Type }).(pulumi.StringOutput)
}

type IntegrationRuntimeTypePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeType)(nil)).Elem()
}

func (o IntegrationRuntimeTypePtrOutput) ToIntegrationRuntimeTypePtrOutput() IntegrationRuntimeTypePtrOutput {
	return o
}

func (o IntegrationRuntimeTypePtrOutput) ToIntegrationRuntimeTypePtrOutputWithContext(ctx context.Context) IntegrationRuntimeTypePtrOutput {
	return o
}

func (o IntegrationRuntimeTypePtrOutput) Elem() IntegrationRuntimeTypeOutput {
	return o.ApplyT(func(v *IntegrationRuntimeType) IntegrationRuntimeType { return *v }).(IntegrationRuntimeTypeOutput)
}

// Integration runtime description.
func (o IntegrationRuntimeTypePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeType) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeTypePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeType) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Integration runtime reference type.
type IntegrationRuntimeReference struct {
	// Arguments for integration runtime.
	Parameters map[string]map[string]interface{} `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName string `pulumi:"referenceName"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// IntegrationRuntimeReferenceInput is an input type that accepts IntegrationRuntimeReferenceArgs and IntegrationRuntimeReferenceOutput values.
// You can construct a concrete instance of `IntegrationRuntimeReferenceInput` via:
//
//          IntegrationRuntimeReferenceArgs{...}
type IntegrationRuntimeReferenceInput interface {
	pulumi.Input

	ToIntegrationRuntimeReferenceOutput() IntegrationRuntimeReferenceOutput
	ToIntegrationRuntimeReferenceOutputWithContext(context.Context) IntegrationRuntimeReferenceOutput
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceArgs struct {
	// Arguments for integration runtime.
	Parameters pulumi.MapMapInput `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IntegrationRuntimeReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeReference)(nil)).Elem()
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferenceOutput() IntegrationRuntimeReferenceOutput {
	return i.ToIntegrationRuntimeReferenceOutputWithContext(context.Background())
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferenceOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceOutput)
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput {
	return i.ToIntegrationRuntimeReferencePtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferencePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceOutput).ToIntegrationRuntimeReferencePtrOutputWithContext(ctx)
}

// IntegrationRuntimeReferencePtrInput is an input type that accepts IntegrationRuntimeReferenceArgs, IntegrationRuntimeReferencePtr and IntegrationRuntimeReferencePtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeReferencePtrInput` via:
//
//          IntegrationRuntimeReferenceArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeReferencePtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput
	ToIntegrationRuntimeReferencePtrOutputWithContext(context.Context) IntegrationRuntimeReferencePtrOutput
}

type integrationRuntimeReferencePtrType IntegrationRuntimeReferenceArgs

func IntegrationRuntimeReferencePtr(v *IntegrationRuntimeReferenceArgs) IntegrationRuntimeReferencePtrInput {
	return (*integrationRuntimeReferencePtrType)(v)
}

func (*integrationRuntimeReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeReference)(nil)).Elem()
}

func (i *integrationRuntimeReferencePtrType) ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput {
	return i.ToIntegrationRuntimeReferencePtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeReferencePtrType) ToIntegrationRuntimeReferencePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferencePtrOutput)
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeReference)(nil)).Elem()
}

func (o IntegrationRuntimeReferenceOutput) ToIntegrationRuntimeReferenceOutput() IntegrationRuntimeReferenceOutput {
	return o
}

func (o IntegrationRuntimeReferenceOutput) ToIntegrationRuntimeReferenceOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceOutput {
	return o
}

func (o IntegrationRuntimeReferenceOutput) ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput {
	return o.ToIntegrationRuntimeReferencePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeReferenceOutput) ToIntegrationRuntimeReferencePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeReference) *IntegrationRuntimeReference {
		return &v
	}).(IntegrationRuntimeReferencePtrOutput)
}

// Arguments for integration runtime.
func (o IntegrationRuntimeReferenceOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v IntegrationRuntimeReference) map[string]map[string]interface{} { return v.Parameters }).(pulumi.MapMapOutput)
}

// Reference integration runtime name.
func (o IntegrationRuntimeReferenceOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeReference) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeReference) string { return v.Type }).(pulumi.StringOutput)
}

type IntegrationRuntimeReferencePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeReference)(nil)).Elem()
}

func (o IntegrationRuntimeReferencePtrOutput) ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput {
	return o
}

func (o IntegrationRuntimeReferencePtrOutput) ToIntegrationRuntimeReferencePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferencePtrOutput {
	return o
}

func (o IntegrationRuntimeReferencePtrOutput) Elem() IntegrationRuntimeReferenceOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReference) IntegrationRuntimeReference { return *v }).(IntegrationRuntimeReferenceOutput)
}

// Arguments for integration runtime.
func (o IntegrationRuntimeReferencePtrOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReference) map[string]map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapMapOutput)
}

// Reference integration runtime name.
func (o IntegrationRuntimeReferencePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReference) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceResponse struct {
	// Arguments for integration runtime.
	Parameters map[string]map[string]interface{} `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName string `pulumi:"referenceName"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// IntegrationRuntimeReferenceResponseInput is an input type that accepts IntegrationRuntimeReferenceResponseArgs and IntegrationRuntimeReferenceResponseOutput values.
// You can construct a concrete instance of `IntegrationRuntimeReferenceResponseInput` via:
//
//          IntegrationRuntimeReferenceResponseArgs{...}
type IntegrationRuntimeReferenceResponseInput interface {
	pulumi.Input

	ToIntegrationRuntimeReferenceResponseOutput() IntegrationRuntimeReferenceResponseOutput
	ToIntegrationRuntimeReferenceResponseOutputWithContext(context.Context) IntegrationRuntimeReferenceResponseOutput
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceResponseArgs struct {
	// Arguments for integration runtime.
	Parameters pulumi.MapMapInput `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IntegrationRuntimeReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeReferenceResponse)(nil)).Elem()
}

func (i IntegrationRuntimeReferenceResponseArgs) ToIntegrationRuntimeReferenceResponseOutput() IntegrationRuntimeReferenceResponseOutput {
	return i.ToIntegrationRuntimeReferenceResponseOutputWithContext(context.Background())
}

func (i IntegrationRuntimeReferenceResponseArgs) ToIntegrationRuntimeReferenceResponseOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceResponseOutput)
}

func (i IntegrationRuntimeReferenceResponseArgs) ToIntegrationRuntimeReferenceResponsePtrOutput() IntegrationRuntimeReferenceResponsePtrOutput {
	return i.ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeReferenceResponseArgs) ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceResponseOutput).ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(ctx)
}

// IntegrationRuntimeReferenceResponsePtrInput is an input type that accepts IntegrationRuntimeReferenceResponseArgs, IntegrationRuntimeReferenceResponsePtr and IntegrationRuntimeReferenceResponsePtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeReferenceResponsePtrInput` via:
//
//          IntegrationRuntimeReferenceResponseArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeReferenceResponsePtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeReferenceResponsePtrOutput() IntegrationRuntimeReferenceResponsePtrOutput
	ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(context.Context) IntegrationRuntimeReferenceResponsePtrOutput
}

type integrationRuntimeReferenceResponsePtrType IntegrationRuntimeReferenceResponseArgs

func IntegrationRuntimeReferenceResponsePtr(v *IntegrationRuntimeReferenceResponseArgs) IntegrationRuntimeReferenceResponsePtrInput {
	return (*integrationRuntimeReferenceResponsePtrType)(v)
}

func (*integrationRuntimeReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeReferenceResponse)(nil)).Elem()
}

func (i *integrationRuntimeReferenceResponsePtrType) ToIntegrationRuntimeReferenceResponsePtrOutput() IntegrationRuntimeReferenceResponsePtrOutput {
	return i.ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeReferenceResponsePtrType) ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeReferenceResponse)(nil)).Elem()
}

func (o IntegrationRuntimeReferenceResponseOutput) ToIntegrationRuntimeReferenceResponseOutput() IntegrationRuntimeReferenceResponseOutput {
	return o
}

func (o IntegrationRuntimeReferenceResponseOutput) ToIntegrationRuntimeReferenceResponseOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponseOutput {
	return o
}

func (o IntegrationRuntimeReferenceResponseOutput) ToIntegrationRuntimeReferenceResponsePtrOutput() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeReferenceResponseOutput) ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeReferenceResponse) *IntegrationRuntimeReferenceResponse {
		return &v
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Arguments for integration runtime.
func (o IntegrationRuntimeReferenceResponseOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v IntegrationRuntimeReferenceResponse) map[string]map[string]interface{} { return v.Parameters }).(pulumi.MapMapOutput)
}

// Reference integration runtime name.
func (o IntegrationRuntimeReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type IntegrationRuntimeReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeReferenceResponse)(nil)).Elem()
}

func (o IntegrationRuntimeReferenceResponsePtrOutput) ToIntegrationRuntimeReferenceResponsePtrOutput() IntegrationRuntimeReferenceResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeReferenceResponsePtrOutput) ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeReferenceResponsePtrOutput) Elem() IntegrationRuntimeReferenceResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) IntegrationRuntimeReferenceResponse { return *v }).(IntegrationRuntimeReferenceResponseOutput)
}

// Arguments for integration runtime.
func (o IntegrationRuntimeReferenceResponsePtrOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) map[string]map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapMapOutput)
}

// Reference integration runtime name.
func (o IntegrationRuntimeReferenceResponsePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure Data Factory nested object which serves as a compute resource for activities.
type IntegrationRuntimeResponse struct {
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// IntegrationRuntimeResponseInput is an input type that accepts IntegrationRuntimeResponseArgs and IntegrationRuntimeResponseOutput values.
// You can construct a concrete instance of `IntegrationRuntimeResponseInput` via:
//
//          IntegrationRuntimeResponseArgs{...}
type IntegrationRuntimeResponseInput interface {
	pulumi.Input

	ToIntegrationRuntimeResponseOutput() IntegrationRuntimeResponseOutput
	ToIntegrationRuntimeResponseOutputWithContext(context.Context) IntegrationRuntimeResponseOutput
}

// Azure Data Factory nested object which serves as a compute resource for activities.
type IntegrationRuntimeResponseArgs struct {
	// Integration runtime description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IntegrationRuntimeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeResponse)(nil)).Elem()
}

func (i IntegrationRuntimeResponseArgs) ToIntegrationRuntimeResponseOutput() IntegrationRuntimeResponseOutput {
	return i.ToIntegrationRuntimeResponseOutputWithContext(context.Background())
}

func (i IntegrationRuntimeResponseArgs) ToIntegrationRuntimeResponseOutputWithContext(ctx context.Context) IntegrationRuntimeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeResponseOutput)
}

func (i IntegrationRuntimeResponseArgs) ToIntegrationRuntimeResponsePtrOutput() IntegrationRuntimeResponsePtrOutput {
	return i.ToIntegrationRuntimeResponsePtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeResponseArgs) ToIntegrationRuntimeResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeResponseOutput).ToIntegrationRuntimeResponsePtrOutputWithContext(ctx)
}

// IntegrationRuntimeResponsePtrInput is an input type that accepts IntegrationRuntimeResponseArgs, IntegrationRuntimeResponsePtr and IntegrationRuntimeResponsePtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeResponsePtrInput` via:
//
//          IntegrationRuntimeResponseArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeResponsePtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeResponsePtrOutput() IntegrationRuntimeResponsePtrOutput
	ToIntegrationRuntimeResponsePtrOutputWithContext(context.Context) IntegrationRuntimeResponsePtrOutput
}

type integrationRuntimeResponsePtrType IntegrationRuntimeResponseArgs

func IntegrationRuntimeResponsePtr(v *IntegrationRuntimeResponseArgs) IntegrationRuntimeResponsePtrInput {
	return (*integrationRuntimeResponsePtrType)(v)
}

func (*integrationRuntimeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeResponse)(nil)).Elem()
}

func (i *integrationRuntimeResponsePtrType) ToIntegrationRuntimeResponsePtrOutput() IntegrationRuntimeResponsePtrOutput {
	return i.ToIntegrationRuntimeResponsePtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeResponsePtrType) ToIntegrationRuntimeResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeResponsePtrOutput)
}

// Azure Data Factory nested object which serves as a compute resource for activities.
type IntegrationRuntimeResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeResponse)(nil)).Elem()
}

func (o IntegrationRuntimeResponseOutput) ToIntegrationRuntimeResponseOutput() IntegrationRuntimeResponseOutput {
	return o
}

func (o IntegrationRuntimeResponseOutput) ToIntegrationRuntimeResponseOutputWithContext(ctx context.Context) IntegrationRuntimeResponseOutput {
	return o
}

func (o IntegrationRuntimeResponseOutput) ToIntegrationRuntimeResponsePtrOutput() IntegrationRuntimeResponsePtrOutput {
	return o.ToIntegrationRuntimeResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeResponseOutput) ToIntegrationRuntimeResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeResponse) *IntegrationRuntimeResponse {
		return &v
	}).(IntegrationRuntimeResponsePtrOutput)
}

// Integration runtime description.
func (o IntegrationRuntimeResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeResponse) string { return v.Type }).(pulumi.StringOutput)
}

type IntegrationRuntimeResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeResponse)(nil)).Elem()
}

func (o IntegrationRuntimeResponsePtrOutput) ToIntegrationRuntimeResponsePtrOutput() IntegrationRuntimeResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeResponsePtrOutput) ToIntegrationRuntimeResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeResponsePtrOutput) Elem() IntegrationRuntimeResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeResponse) IntegrationRuntimeResponse { return *v }).(IntegrationRuntimeResponseOutput)
}

// Integration runtime description.
func (o IntegrationRuntimeResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The Azure Data Factory nested object which contains the information and credential which can be used to connect with related store or compute resource.
type LinkedServiceType struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// LinkedServiceTypeInput is an input type that accepts LinkedServiceTypeArgs and LinkedServiceTypeOutput values.
// You can construct a concrete instance of `LinkedServiceTypeInput` via:
//
//          LinkedServiceTypeArgs{...}
type LinkedServiceTypeInput interface {
	pulumi.Input

	ToLinkedServiceTypeOutput() LinkedServiceTypeOutput
	ToLinkedServiceTypeOutputWithContext(context.Context) LinkedServiceTypeOutput
}

// The Azure Data Factory nested object which contains the information and credential which can be used to connect with related store or compute resource.
type LinkedServiceTypeArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LinkedServiceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceType)(nil)).Elem()
}

func (i LinkedServiceTypeArgs) ToLinkedServiceTypeOutput() LinkedServiceTypeOutput {
	return i.ToLinkedServiceTypeOutputWithContext(context.Background())
}

func (i LinkedServiceTypeArgs) ToLinkedServiceTypeOutputWithContext(ctx context.Context) LinkedServiceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceTypeOutput)
}

func (i LinkedServiceTypeArgs) ToLinkedServiceTypePtrOutput() LinkedServiceTypePtrOutput {
	return i.ToLinkedServiceTypePtrOutputWithContext(context.Background())
}

func (i LinkedServiceTypeArgs) ToLinkedServiceTypePtrOutputWithContext(ctx context.Context) LinkedServiceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceTypeOutput).ToLinkedServiceTypePtrOutputWithContext(ctx)
}

// LinkedServiceTypePtrInput is an input type that accepts LinkedServiceTypeArgs, LinkedServiceTypePtr and LinkedServiceTypePtrOutput values.
// You can construct a concrete instance of `LinkedServiceTypePtrInput` via:
//
//          LinkedServiceTypeArgs{...}
//
//  or:
//
//          nil
type LinkedServiceTypePtrInput interface {
	pulumi.Input

	ToLinkedServiceTypePtrOutput() LinkedServiceTypePtrOutput
	ToLinkedServiceTypePtrOutputWithContext(context.Context) LinkedServiceTypePtrOutput
}

type linkedServiceTypePtrType LinkedServiceTypeArgs

func LinkedServiceTypePtr(v *LinkedServiceTypeArgs) LinkedServiceTypePtrInput {
	return (*linkedServiceTypePtrType)(v)
}

func (*linkedServiceTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceType)(nil)).Elem()
}

func (i *linkedServiceTypePtrType) ToLinkedServiceTypePtrOutput() LinkedServiceTypePtrOutput {
	return i.ToLinkedServiceTypePtrOutputWithContext(context.Background())
}

func (i *linkedServiceTypePtrType) ToLinkedServiceTypePtrOutputWithContext(ctx context.Context) LinkedServiceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceTypePtrOutput)
}

// The Azure Data Factory nested object which contains the information and credential which can be used to connect with related store or compute resource.
type LinkedServiceTypeOutput struct{ *pulumi.OutputState }

func (LinkedServiceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceType)(nil)).Elem()
}

func (o LinkedServiceTypeOutput) ToLinkedServiceTypeOutput() LinkedServiceTypeOutput {
	return o
}

func (o LinkedServiceTypeOutput) ToLinkedServiceTypeOutputWithContext(ctx context.Context) LinkedServiceTypeOutput {
	return o
}

func (o LinkedServiceTypeOutput) ToLinkedServiceTypePtrOutput() LinkedServiceTypePtrOutput {
	return o.ToLinkedServiceTypePtrOutputWithContext(context.Background())
}

func (o LinkedServiceTypeOutput) ToLinkedServiceTypePtrOutputWithContext(ctx context.Context) LinkedServiceTypePtrOutput {
	return o.ApplyT(func(v LinkedServiceType) *LinkedServiceType {
		return &v
	}).(LinkedServiceTypePtrOutput)
}

// List of tags that can be used for describing the Dataset.
func (o LinkedServiceTypeOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v LinkedServiceType) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o LinkedServiceTypeOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v LinkedServiceType) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o LinkedServiceTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedServiceType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o LinkedServiceTypeOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v LinkedServiceType) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o LinkedServiceTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceType) string { return v.Type }).(pulumi.StringOutput)
}

type LinkedServiceTypePtrOutput struct{ *pulumi.OutputState }

func (LinkedServiceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceType)(nil)).Elem()
}

func (o LinkedServiceTypePtrOutput) ToLinkedServiceTypePtrOutput() LinkedServiceTypePtrOutput {
	return o
}

func (o LinkedServiceTypePtrOutput) ToLinkedServiceTypePtrOutputWithContext(ctx context.Context) LinkedServiceTypePtrOutput {
	return o
}

func (o LinkedServiceTypePtrOutput) Elem() LinkedServiceTypeOutput {
	return o.ApplyT(func(v *LinkedServiceType) LinkedServiceType { return *v }).(LinkedServiceTypeOutput)
}

// List of tags that can be used for describing the Dataset.
func (o LinkedServiceTypePtrOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *LinkedServiceType) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o LinkedServiceTypePtrOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v *LinkedServiceType) *IntegrationRuntimeReference {
		if v == nil {
			return nil
		}
		return v.ConnectVia
	}).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o LinkedServiceTypePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceType) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o LinkedServiceTypePtrOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v *LinkedServiceType) map[string]ParameterSpecification {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o LinkedServiceTypePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceType) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Linked service reference type.
type LinkedServiceReference struct {
	// Arguments for LinkedService.
	Parameters map[string]map[string]interface{} `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName string `pulumi:"referenceName"`
	// Linked service reference type.
	Type string `pulumi:"type"`
}

// LinkedServiceReferenceInput is an input type that accepts LinkedServiceReferenceArgs and LinkedServiceReferenceOutput values.
// You can construct a concrete instance of `LinkedServiceReferenceInput` via:
//
//          LinkedServiceReferenceArgs{...}
type LinkedServiceReferenceInput interface {
	pulumi.Input

	ToLinkedServiceReferenceOutput() LinkedServiceReferenceOutput
	ToLinkedServiceReferenceOutputWithContext(context.Context) LinkedServiceReferenceOutput
}

// Linked service reference type.
type LinkedServiceReferenceArgs struct {
	// Arguments for LinkedService.
	Parameters pulumi.MapMapInput `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Linked service reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LinkedServiceReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceReference)(nil)).Elem()
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferenceOutput() LinkedServiceReferenceOutput {
	return i.ToLinkedServiceReferenceOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferenceOutputWithContext(ctx context.Context) LinkedServiceReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceOutput)
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput {
	return i.ToLinkedServiceReferencePtrOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferencePtrOutputWithContext(ctx context.Context) LinkedServiceReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceOutput).ToLinkedServiceReferencePtrOutputWithContext(ctx)
}

// LinkedServiceReferencePtrInput is an input type that accepts LinkedServiceReferenceArgs, LinkedServiceReferencePtr and LinkedServiceReferencePtrOutput values.
// You can construct a concrete instance of `LinkedServiceReferencePtrInput` via:
//
//          LinkedServiceReferenceArgs{...}
//
//  or:
//
//          nil
type LinkedServiceReferencePtrInput interface {
	pulumi.Input

	ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput
	ToLinkedServiceReferencePtrOutputWithContext(context.Context) LinkedServiceReferencePtrOutput
}

type linkedServiceReferencePtrType LinkedServiceReferenceArgs

func LinkedServiceReferencePtr(v *LinkedServiceReferenceArgs) LinkedServiceReferencePtrInput {
	return (*linkedServiceReferencePtrType)(v)
}

func (*linkedServiceReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceReference)(nil)).Elem()
}

func (i *linkedServiceReferencePtrType) ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput {
	return i.ToLinkedServiceReferencePtrOutputWithContext(context.Background())
}

func (i *linkedServiceReferencePtrType) ToLinkedServiceReferencePtrOutputWithContext(ctx context.Context) LinkedServiceReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferencePtrOutput)
}

// Linked service reference type.
type LinkedServiceReferenceOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceReference)(nil)).Elem()
}

func (o LinkedServiceReferenceOutput) ToLinkedServiceReferenceOutput() LinkedServiceReferenceOutput {
	return o
}

func (o LinkedServiceReferenceOutput) ToLinkedServiceReferenceOutputWithContext(ctx context.Context) LinkedServiceReferenceOutput {
	return o
}

func (o LinkedServiceReferenceOutput) ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput {
	return o.ToLinkedServiceReferencePtrOutputWithContext(context.Background())
}

func (o LinkedServiceReferenceOutput) ToLinkedServiceReferencePtrOutputWithContext(ctx context.Context) LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v LinkedServiceReference) *LinkedServiceReference {
		return &v
	}).(LinkedServiceReferencePtrOutput)
}

// Arguments for LinkedService.
func (o LinkedServiceReferenceOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v LinkedServiceReference) map[string]map[string]interface{} { return v.Parameters }).(pulumi.MapMapOutput)
}

// Reference LinkedService name.
func (o LinkedServiceReferenceOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceReference) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Linked service reference type.
func (o LinkedServiceReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceReference) string { return v.Type }).(pulumi.StringOutput)
}

type LinkedServiceReferencePtrOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceReference)(nil)).Elem()
}

func (o LinkedServiceReferencePtrOutput) ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput {
	return o
}

func (o LinkedServiceReferencePtrOutput) ToLinkedServiceReferencePtrOutputWithContext(ctx context.Context) LinkedServiceReferencePtrOutput {
	return o
}

func (o LinkedServiceReferencePtrOutput) Elem() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v *LinkedServiceReference) LinkedServiceReference { return *v }).(LinkedServiceReferenceOutput)
}

// Arguments for LinkedService.
func (o LinkedServiceReferencePtrOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v *LinkedServiceReference) map[string]map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapMapOutput)
}

// Reference LinkedService name.
func (o LinkedServiceReferencePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Linked service reference type.
func (o LinkedServiceReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceReference) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Linked service reference type.
type LinkedServiceReferenceResponse struct {
	// Arguments for LinkedService.
	Parameters map[string]map[string]interface{} `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName string `pulumi:"referenceName"`
	// Linked service reference type.
	Type string `pulumi:"type"`
}

// LinkedServiceReferenceResponseInput is an input type that accepts LinkedServiceReferenceResponseArgs and LinkedServiceReferenceResponseOutput values.
// You can construct a concrete instance of `LinkedServiceReferenceResponseInput` via:
//
//          LinkedServiceReferenceResponseArgs{...}
type LinkedServiceReferenceResponseInput interface {
	pulumi.Input

	ToLinkedServiceReferenceResponseOutput() LinkedServiceReferenceResponseOutput
	ToLinkedServiceReferenceResponseOutputWithContext(context.Context) LinkedServiceReferenceResponseOutput
}

// Linked service reference type.
type LinkedServiceReferenceResponseArgs struct {
	// Arguments for LinkedService.
	Parameters pulumi.MapMapInput `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Linked service reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LinkedServiceReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceReferenceResponse)(nil)).Elem()
}

func (i LinkedServiceReferenceResponseArgs) ToLinkedServiceReferenceResponseOutput() LinkedServiceReferenceResponseOutput {
	return i.ToLinkedServiceReferenceResponseOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceResponseArgs) ToLinkedServiceReferenceResponseOutputWithContext(ctx context.Context) LinkedServiceReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceResponseOutput)
}

func (i LinkedServiceReferenceResponseArgs) ToLinkedServiceReferenceResponsePtrOutput() LinkedServiceReferenceResponsePtrOutput {
	return i.ToLinkedServiceReferenceResponsePtrOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceResponseArgs) ToLinkedServiceReferenceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceResponseOutput).ToLinkedServiceReferenceResponsePtrOutputWithContext(ctx)
}

// LinkedServiceReferenceResponsePtrInput is an input type that accepts LinkedServiceReferenceResponseArgs, LinkedServiceReferenceResponsePtr and LinkedServiceReferenceResponsePtrOutput values.
// You can construct a concrete instance of `LinkedServiceReferenceResponsePtrInput` via:
//
//          LinkedServiceReferenceResponseArgs{...}
//
//  or:
//
//          nil
type LinkedServiceReferenceResponsePtrInput interface {
	pulumi.Input

	ToLinkedServiceReferenceResponsePtrOutput() LinkedServiceReferenceResponsePtrOutput
	ToLinkedServiceReferenceResponsePtrOutputWithContext(context.Context) LinkedServiceReferenceResponsePtrOutput
}

type linkedServiceReferenceResponsePtrType LinkedServiceReferenceResponseArgs

func LinkedServiceReferenceResponsePtr(v *LinkedServiceReferenceResponseArgs) LinkedServiceReferenceResponsePtrInput {
	return (*linkedServiceReferenceResponsePtrType)(v)
}

func (*linkedServiceReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceReferenceResponse)(nil)).Elem()
}

func (i *linkedServiceReferenceResponsePtrType) ToLinkedServiceReferenceResponsePtrOutput() LinkedServiceReferenceResponsePtrOutput {
	return i.ToLinkedServiceReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *linkedServiceReferenceResponsePtrType) ToLinkedServiceReferenceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceResponsePtrOutput)
}

// Linked service reference type.
type LinkedServiceReferenceResponseOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceReferenceResponse)(nil)).Elem()
}

func (o LinkedServiceReferenceResponseOutput) ToLinkedServiceReferenceResponseOutput() LinkedServiceReferenceResponseOutput {
	return o
}

func (o LinkedServiceReferenceResponseOutput) ToLinkedServiceReferenceResponseOutputWithContext(ctx context.Context) LinkedServiceReferenceResponseOutput {
	return o
}

func (o LinkedServiceReferenceResponseOutput) ToLinkedServiceReferenceResponsePtrOutput() LinkedServiceReferenceResponsePtrOutput {
	return o.ToLinkedServiceReferenceResponsePtrOutputWithContext(context.Background())
}

func (o LinkedServiceReferenceResponseOutput) ToLinkedServiceReferenceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v LinkedServiceReferenceResponse) *LinkedServiceReferenceResponse {
		return &v
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Arguments for LinkedService.
func (o LinkedServiceReferenceResponseOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v LinkedServiceReferenceResponse) map[string]map[string]interface{} { return v.Parameters }).(pulumi.MapMapOutput)
}

// Reference LinkedService name.
func (o LinkedServiceReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Linked service reference type.
func (o LinkedServiceReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type LinkedServiceReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceReferenceResponse)(nil)).Elem()
}

func (o LinkedServiceReferenceResponsePtrOutput) ToLinkedServiceReferenceResponsePtrOutput() LinkedServiceReferenceResponsePtrOutput {
	return o
}

func (o LinkedServiceReferenceResponsePtrOutput) ToLinkedServiceReferenceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceReferenceResponsePtrOutput {
	return o
}

func (o LinkedServiceReferenceResponsePtrOutput) Elem() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) LinkedServiceReferenceResponse { return *v }).(LinkedServiceReferenceResponseOutput)
}

// Arguments for LinkedService.
func (o LinkedServiceReferenceResponsePtrOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) map[string]map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapMapOutput)
}

// Reference LinkedService name.
func (o LinkedServiceReferenceResponsePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Linked service reference type.
func (o LinkedServiceReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The Azure Data Factory nested object which contains the information and credential which can be used to connect with related store or compute resource.
type LinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// LinkedServiceResponseInput is an input type that accepts LinkedServiceResponseArgs and LinkedServiceResponseOutput values.
// You can construct a concrete instance of `LinkedServiceResponseInput` via:
//
//          LinkedServiceResponseArgs{...}
type LinkedServiceResponseInput interface {
	pulumi.Input

	ToLinkedServiceResponseOutput() LinkedServiceResponseOutput
	ToLinkedServiceResponseOutputWithContext(context.Context) LinkedServiceResponseOutput
}

// The Azure Data Factory nested object which contains the information and credential which can be used to connect with related store or compute resource.
type LinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceResponse)(nil)).Elem()
}

func (i LinkedServiceResponseArgs) ToLinkedServiceResponseOutput() LinkedServiceResponseOutput {
	return i.ToLinkedServiceResponseOutputWithContext(context.Background())
}

func (i LinkedServiceResponseArgs) ToLinkedServiceResponseOutputWithContext(ctx context.Context) LinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceResponseOutput)
}

func (i LinkedServiceResponseArgs) ToLinkedServiceResponsePtrOutput() LinkedServiceResponsePtrOutput {
	return i.ToLinkedServiceResponsePtrOutputWithContext(context.Background())
}

func (i LinkedServiceResponseArgs) ToLinkedServiceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceResponseOutput).ToLinkedServiceResponsePtrOutputWithContext(ctx)
}

// LinkedServiceResponsePtrInput is an input type that accepts LinkedServiceResponseArgs, LinkedServiceResponsePtr and LinkedServiceResponsePtrOutput values.
// You can construct a concrete instance of `LinkedServiceResponsePtrInput` via:
//
//          LinkedServiceResponseArgs{...}
//
//  or:
//
//          nil
type LinkedServiceResponsePtrInput interface {
	pulumi.Input

	ToLinkedServiceResponsePtrOutput() LinkedServiceResponsePtrOutput
	ToLinkedServiceResponsePtrOutputWithContext(context.Context) LinkedServiceResponsePtrOutput
}

type linkedServiceResponsePtrType LinkedServiceResponseArgs

func LinkedServiceResponsePtr(v *LinkedServiceResponseArgs) LinkedServiceResponsePtrInput {
	return (*linkedServiceResponsePtrType)(v)
}

func (*linkedServiceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceResponse)(nil)).Elem()
}

func (i *linkedServiceResponsePtrType) ToLinkedServiceResponsePtrOutput() LinkedServiceResponsePtrOutput {
	return i.ToLinkedServiceResponsePtrOutputWithContext(context.Background())
}

func (i *linkedServiceResponsePtrType) ToLinkedServiceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceResponsePtrOutput)
}

// The Azure Data Factory nested object which contains the information and credential which can be used to connect with related store or compute resource.
type LinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (LinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceResponse)(nil)).Elem()
}

func (o LinkedServiceResponseOutput) ToLinkedServiceResponseOutput() LinkedServiceResponseOutput {
	return o
}

func (o LinkedServiceResponseOutput) ToLinkedServiceResponseOutputWithContext(ctx context.Context) LinkedServiceResponseOutput {
	return o
}

func (o LinkedServiceResponseOutput) ToLinkedServiceResponsePtrOutput() LinkedServiceResponsePtrOutput {
	return o.ToLinkedServiceResponsePtrOutputWithContext(context.Background())
}

func (o LinkedServiceResponseOutput) ToLinkedServiceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceResponsePtrOutput {
	return o.ApplyT(func(v LinkedServiceResponse) *LinkedServiceResponse {
		return &v
	}).(LinkedServiceResponsePtrOutput)
}

// List of tags that can be used for describing the Dataset.
func (o LinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v LinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o LinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v LinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o LinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o LinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v LinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o LinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type LinkedServiceResponsePtrOutput struct{ *pulumi.OutputState }

func (LinkedServiceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceResponse)(nil)).Elem()
}

func (o LinkedServiceResponsePtrOutput) ToLinkedServiceResponsePtrOutput() LinkedServiceResponsePtrOutput {
	return o
}

func (o LinkedServiceResponsePtrOutput) ToLinkedServiceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceResponsePtrOutput {
	return o
}

func (o LinkedServiceResponsePtrOutput) Elem() LinkedServiceResponseOutput {
	return o.ApplyT(func(v *LinkedServiceResponse) LinkedServiceResponse { return *v }).(LinkedServiceResponseOutput)
}

// List of tags that can be used for describing the Dataset.
func (o LinkedServiceResponsePtrOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *LinkedServiceResponse) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o LinkedServiceResponsePtrOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v *LinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		if v == nil {
			return nil
		}
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o LinkedServiceResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o LinkedServiceResponsePtrOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v *LinkedServiceResponse) map[string]ParameterSpecificationResponse {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o LinkedServiceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Definition of a single parameter for an entity.
type ParameterSpecification struct {
	// Default value of parameter.
	DefaultValue map[string]interface{} `pulumi:"defaultValue"`
	// Parameter type.
	Type string `pulumi:"type"`
}

// ParameterSpecificationInput is an input type that accepts ParameterSpecificationArgs and ParameterSpecificationOutput values.
// You can construct a concrete instance of `ParameterSpecificationInput` via:
//
//          ParameterSpecificationArgs{...}
type ParameterSpecificationInput interface {
	pulumi.Input

	ToParameterSpecificationOutput() ParameterSpecificationOutput
	ToParameterSpecificationOutputWithContext(context.Context) ParameterSpecificationOutput
}

// Definition of a single parameter for an entity.
type ParameterSpecificationArgs struct {
	// Default value of parameter.
	DefaultValue pulumi.MapInput `pulumi:"defaultValue"`
	// Parameter type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ParameterSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterSpecification)(nil)).Elem()
}

func (i ParameterSpecificationArgs) ToParameterSpecificationOutput() ParameterSpecificationOutput {
	return i.ToParameterSpecificationOutputWithContext(context.Background())
}

func (i ParameterSpecificationArgs) ToParameterSpecificationOutputWithContext(ctx context.Context) ParameterSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterSpecificationOutput)
}

// ParameterSpecificationMapInput is an input type that accepts ParameterSpecificationMap and ParameterSpecificationMapOutput values.
// You can construct a concrete instance of `ParameterSpecificationMapInput` via:
//
//          ParameterSpecificationMap{ "key": ParameterSpecificationArgs{...} }
type ParameterSpecificationMapInput interface {
	pulumi.Input

	ToParameterSpecificationMapOutput() ParameterSpecificationMapOutput
	ToParameterSpecificationMapOutputWithContext(context.Context) ParameterSpecificationMapOutput
}

type ParameterSpecificationMap map[string]ParameterSpecificationInput

func (ParameterSpecificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterSpecification)(nil)).Elem()
}

func (i ParameterSpecificationMap) ToParameterSpecificationMapOutput() ParameterSpecificationMapOutput {
	return i.ToParameterSpecificationMapOutputWithContext(context.Background())
}

func (i ParameterSpecificationMap) ToParameterSpecificationMapOutputWithContext(ctx context.Context) ParameterSpecificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterSpecificationMapOutput)
}

// Definition of a single parameter for an entity.
type ParameterSpecificationOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterSpecification)(nil)).Elem()
}

func (o ParameterSpecificationOutput) ToParameterSpecificationOutput() ParameterSpecificationOutput {
	return o
}

func (o ParameterSpecificationOutput) ToParameterSpecificationOutputWithContext(ctx context.Context) ParameterSpecificationOutput {
	return o
}

// Default value of parameter.
func (o ParameterSpecificationOutput) DefaultValue() pulumi.MapOutput {
	return o.ApplyT(func(v ParameterSpecification) map[string]interface{} { return v.DefaultValue }).(pulumi.MapOutput)
}

// Parameter type.
func (o ParameterSpecificationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterSpecification) string { return v.Type }).(pulumi.StringOutput)
}

type ParameterSpecificationMapOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterSpecification)(nil)).Elem()
}

func (o ParameterSpecificationMapOutput) ToParameterSpecificationMapOutput() ParameterSpecificationMapOutput {
	return o
}

func (o ParameterSpecificationMapOutput) ToParameterSpecificationMapOutputWithContext(ctx context.Context) ParameterSpecificationMapOutput {
	return o
}

func (o ParameterSpecificationMapOutput) MapIndex(k pulumi.StringInput) ParameterSpecificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterSpecification {
		return vs[0].(map[string]ParameterSpecification)[vs[1].(string)]
	}).(ParameterSpecificationOutput)
}

// Definition of a single parameter for an entity.
type ParameterSpecificationResponse struct {
	// Default value of parameter.
	DefaultValue map[string]interface{} `pulumi:"defaultValue"`
	// Parameter type.
	Type string `pulumi:"type"`
}

// ParameterSpecificationResponseInput is an input type that accepts ParameterSpecificationResponseArgs and ParameterSpecificationResponseOutput values.
// You can construct a concrete instance of `ParameterSpecificationResponseInput` via:
//
//          ParameterSpecificationResponseArgs{...}
type ParameterSpecificationResponseInput interface {
	pulumi.Input

	ToParameterSpecificationResponseOutput() ParameterSpecificationResponseOutput
	ToParameterSpecificationResponseOutputWithContext(context.Context) ParameterSpecificationResponseOutput
}

// Definition of a single parameter for an entity.
type ParameterSpecificationResponseArgs struct {
	// Default value of parameter.
	DefaultValue pulumi.MapInput `pulumi:"defaultValue"`
	// Parameter type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ParameterSpecificationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterSpecificationResponse)(nil)).Elem()
}

func (i ParameterSpecificationResponseArgs) ToParameterSpecificationResponseOutput() ParameterSpecificationResponseOutput {
	return i.ToParameterSpecificationResponseOutputWithContext(context.Background())
}

func (i ParameterSpecificationResponseArgs) ToParameterSpecificationResponseOutputWithContext(ctx context.Context) ParameterSpecificationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterSpecificationResponseOutput)
}

// ParameterSpecificationResponseMapInput is an input type that accepts ParameterSpecificationResponseMap and ParameterSpecificationResponseMapOutput values.
// You can construct a concrete instance of `ParameterSpecificationResponseMapInput` via:
//
//          ParameterSpecificationResponseMap{ "key": ParameterSpecificationResponseArgs{...} }
type ParameterSpecificationResponseMapInput interface {
	pulumi.Input

	ToParameterSpecificationResponseMapOutput() ParameterSpecificationResponseMapOutput
	ToParameterSpecificationResponseMapOutputWithContext(context.Context) ParameterSpecificationResponseMapOutput
}

type ParameterSpecificationResponseMap map[string]ParameterSpecificationResponseInput

func (ParameterSpecificationResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterSpecificationResponse)(nil)).Elem()
}

func (i ParameterSpecificationResponseMap) ToParameterSpecificationResponseMapOutput() ParameterSpecificationResponseMapOutput {
	return i.ToParameterSpecificationResponseMapOutputWithContext(context.Background())
}

func (i ParameterSpecificationResponseMap) ToParameterSpecificationResponseMapOutputWithContext(ctx context.Context) ParameterSpecificationResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterSpecificationResponseMapOutput)
}

// Definition of a single parameter for an entity.
type ParameterSpecificationResponseOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterSpecificationResponse)(nil)).Elem()
}

func (o ParameterSpecificationResponseOutput) ToParameterSpecificationResponseOutput() ParameterSpecificationResponseOutput {
	return o
}

func (o ParameterSpecificationResponseOutput) ToParameterSpecificationResponseOutputWithContext(ctx context.Context) ParameterSpecificationResponseOutput {
	return o
}

// Default value of parameter.
func (o ParameterSpecificationResponseOutput) DefaultValue() pulumi.MapOutput {
	return o.ApplyT(func(v ParameterSpecificationResponse) map[string]interface{} { return v.DefaultValue }).(pulumi.MapOutput)
}

// Parameter type.
func (o ParameterSpecificationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterSpecificationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ParameterSpecificationResponseMapOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterSpecificationResponse)(nil)).Elem()
}

func (o ParameterSpecificationResponseMapOutput) ToParameterSpecificationResponseMapOutput() ParameterSpecificationResponseMapOutput {
	return o
}

func (o ParameterSpecificationResponseMapOutput) ToParameterSpecificationResponseMapOutputWithContext(ctx context.Context) ParameterSpecificationResponseMapOutput {
	return o
}

func (o ParameterSpecificationResponseMapOutput) MapIndex(k pulumi.StringInput) ParameterSpecificationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterSpecificationResponse {
		return vs[0].(map[string]ParameterSpecificationResponse)[vs[1].(string)]
	}).(ParameterSpecificationResponseOutput)
}

// Azure data factory nested object which contains information about creating pipeline run
type TriggerType struct {
	// Trigger description.
	Description *string `pulumi:"description"`
	// Trigger type.
	Type string `pulumi:"type"`
}

// TriggerTypeInput is an input type that accepts TriggerTypeArgs and TriggerTypeOutput values.
// You can construct a concrete instance of `TriggerTypeInput` via:
//
//          TriggerTypeArgs{...}
type TriggerTypeInput interface {
	pulumi.Input

	ToTriggerTypeOutput() TriggerTypeOutput
	ToTriggerTypeOutputWithContext(context.Context) TriggerTypeOutput
}

// Azure data factory nested object which contains information about creating pipeline run
type TriggerTypeArgs struct {
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Trigger type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TriggerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerType)(nil)).Elem()
}

func (i TriggerTypeArgs) ToTriggerTypeOutput() TriggerTypeOutput {
	return i.ToTriggerTypeOutputWithContext(context.Background())
}

func (i TriggerTypeArgs) ToTriggerTypeOutputWithContext(ctx context.Context) TriggerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTypeOutput)
}

func (i TriggerTypeArgs) ToTriggerTypePtrOutput() TriggerTypePtrOutput {
	return i.ToTriggerTypePtrOutputWithContext(context.Background())
}

func (i TriggerTypeArgs) ToTriggerTypePtrOutputWithContext(ctx context.Context) TriggerTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTypeOutput).ToTriggerTypePtrOutputWithContext(ctx)
}

// TriggerTypePtrInput is an input type that accepts TriggerTypeArgs, TriggerTypePtr and TriggerTypePtrOutput values.
// You can construct a concrete instance of `TriggerTypePtrInput` via:
//
//          TriggerTypeArgs{...}
//
//  or:
//
//          nil
type TriggerTypePtrInput interface {
	pulumi.Input

	ToTriggerTypePtrOutput() TriggerTypePtrOutput
	ToTriggerTypePtrOutputWithContext(context.Context) TriggerTypePtrOutput
}

type triggerTypePtrType TriggerTypeArgs

func TriggerTypePtr(v *TriggerTypeArgs) TriggerTypePtrInput {
	return (*triggerTypePtrType)(v)
}

func (*triggerTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerType)(nil)).Elem()
}

func (i *triggerTypePtrType) ToTriggerTypePtrOutput() TriggerTypePtrOutput {
	return i.ToTriggerTypePtrOutputWithContext(context.Background())
}

func (i *triggerTypePtrType) ToTriggerTypePtrOutputWithContext(ctx context.Context) TriggerTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTypePtrOutput)
}

// Azure data factory nested object which contains information about creating pipeline run
type TriggerTypeOutput struct{ *pulumi.OutputState }

func (TriggerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerType)(nil)).Elem()
}

func (o TriggerTypeOutput) ToTriggerTypeOutput() TriggerTypeOutput {
	return o
}

func (o TriggerTypeOutput) ToTriggerTypeOutputWithContext(ctx context.Context) TriggerTypeOutput {
	return o
}

func (o TriggerTypeOutput) ToTriggerTypePtrOutput() TriggerTypePtrOutput {
	return o.ToTriggerTypePtrOutputWithContext(context.Background())
}

func (o TriggerTypeOutput) ToTriggerTypePtrOutputWithContext(ctx context.Context) TriggerTypePtrOutput {
	return o.ApplyT(func(v TriggerType) *TriggerType {
		return &v
	}).(TriggerTypePtrOutput)
}

// Trigger description.
func (o TriggerTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Trigger type.
func (o TriggerTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerType) string { return v.Type }).(pulumi.StringOutput)
}

type TriggerTypePtrOutput struct{ *pulumi.OutputState }

func (TriggerTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerType)(nil)).Elem()
}

func (o TriggerTypePtrOutput) ToTriggerTypePtrOutput() TriggerTypePtrOutput {
	return o
}

func (o TriggerTypePtrOutput) ToTriggerTypePtrOutputWithContext(ctx context.Context) TriggerTypePtrOutput {
	return o
}

func (o TriggerTypePtrOutput) Elem() TriggerTypeOutput {
	return o.ApplyT(func(v *TriggerType) TriggerType { return *v }).(TriggerTypeOutput)
}

// Trigger description.
func (o TriggerTypePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerType) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Trigger type.
func (o TriggerTypePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerType) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure data factory nested object which contains information about creating pipeline run
type TriggerResponse struct {
	// Trigger description.
	Description *string `pulumi:"description"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// Trigger type.
	Type string `pulumi:"type"`
}

// TriggerResponseInput is an input type that accepts TriggerResponseArgs and TriggerResponseOutput values.
// You can construct a concrete instance of `TriggerResponseInput` via:
//
//          TriggerResponseArgs{...}
type TriggerResponseInput interface {
	pulumi.Input

	ToTriggerResponseOutput() TriggerResponseOutput
	ToTriggerResponseOutputWithContext(context.Context) TriggerResponseOutput
}

// Azure data factory nested object which contains information about creating pipeline run
type TriggerResponseArgs struct {
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState pulumi.StringInput `pulumi:"runtimeState"`
	// Trigger type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TriggerResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerResponse)(nil)).Elem()
}

func (i TriggerResponseArgs) ToTriggerResponseOutput() TriggerResponseOutput {
	return i.ToTriggerResponseOutputWithContext(context.Background())
}

func (i TriggerResponseArgs) ToTriggerResponseOutputWithContext(ctx context.Context) TriggerResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerResponseOutput)
}

func (i TriggerResponseArgs) ToTriggerResponsePtrOutput() TriggerResponsePtrOutput {
	return i.ToTriggerResponsePtrOutputWithContext(context.Background())
}

func (i TriggerResponseArgs) ToTriggerResponsePtrOutputWithContext(ctx context.Context) TriggerResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerResponseOutput).ToTriggerResponsePtrOutputWithContext(ctx)
}

// TriggerResponsePtrInput is an input type that accepts TriggerResponseArgs, TriggerResponsePtr and TriggerResponsePtrOutput values.
// You can construct a concrete instance of `TriggerResponsePtrInput` via:
//
//          TriggerResponseArgs{...}
//
//  or:
//
//          nil
type TriggerResponsePtrInput interface {
	pulumi.Input

	ToTriggerResponsePtrOutput() TriggerResponsePtrOutput
	ToTriggerResponsePtrOutputWithContext(context.Context) TriggerResponsePtrOutput
}

type triggerResponsePtrType TriggerResponseArgs

func TriggerResponsePtr(v *TriggerResponseArgs) TriggerResponsePtrInput {
	return (*triggerResponsePtrType)(v)
}

func (*triggerResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerResponse)(nil)).Elem()
}

func (i *triggerResponsePtrType) ToTriggerResponsePtrOutput() TriggerResponsePtrOutput {
	return i.ToTriggerResponsePtrOutputWithContext(context.Background())
}

func (i *triggerResponsePtrType) ToTriggerResponsePtrOutputWithContext(ctx context.Context) TriggerResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerResponsePtrOutput)
}

// Azure data factory nested object which contains information about creating pipeline run
type TriggerResponseOutput struct{ *pulumi.OutputState }

func (TriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerResponse)(nil)).Elem()
}

func (o TriggerResponseOutput) ToTriggerResponseOutput() TriggerResponseOutput {
	return o
}

func (o TriggerResponseOutput) ToTriggerResponseOutputWithContext(ctx context.Context) TriggerResponseOutput {
	return o
}

func (o TriggerResponseOutput) ToTriggerResponsePtrOutput() TriggerResponsePtrOutput {
	return o.ToTriggerResponsePtrOutputWithContext(context.Background())
}

func (o TriggerResponseOutput) ToTriggerResponsePtrOutputWithContext(ctx context.Context) TriggerResponsePtrOutput {
	return o.ApplyT(func(v TriggerResponse) *TriggerResponse {
		return &v
	}).(TriggerResponsePtrOutput)
}

// Trigger description.
func (o TriggerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
func (o TriggerResponseOutput) RuntimeState() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerResponse) string { return v.RuntimeState }).(pulumi.StringOutput)
}

// Trigger type.
func (o TriggerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerResponse) string { return v.Type }).(pulumi.StringOutput)
}

type TriggerResponsePtrOutput struct{ *pulumi.OutputState }

func (TriggerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerResponse)(nil)).Elem()
}

func (o TriggerResponsePtrOutput) ToTriggerResponsePtrOutput() TriggerResponsePtrOutput {
	return o
}

func (o TriggerResponsePtrOutput) ToTriggerResponsePtrOutputWithContext(ctx context.Context) TriggerResponsePtrOutput {
	return o
}

func (o TriggerResponsePtrOutput) Elem() TriggerResponseOutput {
	return o.ApplyT(func(v *TriggerResponse) TriggerResponse { return *v }).(TriggerResponseOutput)
}

// Trigger description.
func (o TriggerResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
func (o TriggerResponsePtrOutput) RuntimeState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RuntimeState
	}).(pulumi.StringPtrOutput)
}

// Trigger type.
func (o TriggerResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ActivityOutput{})
	pulumi.RegisterOutputType(ActivityArrayOutput{})
	pulumi.RegisterOutputType(ActivityDependencyOutput{})
	pulumi.RegisterOutputType(ActivityDependencyArrayOutput{})
	pulumi.RegisterOutputType(ActivityDependencyResponseOutput{})
	pulumi.RegisterOutputType(ActivityDependencyResponseArrayOutput{})
	pulumi.RegisterOutputType(ActivityResponseOutput{})
	pulumi.RegisterOutputType(ActivityResponseArrayOutput{})
	pulumi.RegisterOutputType(DatasetTypeOutput{})
	pulumi.RegisterOutputType(DatasetTypePtrOutput{})
	pulumi.RegisterOutputType(DatasetResponseOutput{})
	pulumi.RegisterOutputType(DatasetResponsePtrOutput{})
	pulumi.RegisterOutputType(FactoryIdentityOutput{})
	pulumi.RegisterOutputType(FactoryIdentityPtrOutput{})
	pulumi.RegisterOutputType(FactoryIdentityResponseOutput{})
	pulumi.RegisterOutputType(FactoryIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(FactoryVSTSConfigurationOutput{})
	pulumi.RegisterOutputType(FactoryVSTSConfigurationPtrOutput{})
	pulumi.RegisterOutputType(FactoryVSTSConfigurationResponseOutput{})
	pulumi.RegisterOutputType(FactoryVSTSConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeTypeOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeTypePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferenceOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferencePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferenceResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeResponsePtrOutput{})
	pulumi.RegisterOutputType(LinkedServiceTypeOutput{})
	pulumi.RegisterOutputType(LinkedServiceTypePtrOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferencePtrOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceResponseOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(LinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(LinkedServiceResponsePtrOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationMapOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationResponseOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationResponseMapOutput{})
	pulumi.RegisterOutputType(TriggerTypeOutput{})
	pulumi.RegisterOutputType(TriggerTypePtrOutput{})
	pulumi.RegisterOutputType(TriggerResponseOutput{})
	pulumi.RegisterOutputType(TriggerResponsePtrOutput{})
}
