// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20170901preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Activity dependency information.
type ActivityDependency struct {
	// Activity name.
	Activity string `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions []string `pulumi:"dependencyConditions"`
}

// ActivityDependencyInput is an input type that accepts ActivityDependencyArgs and ActivityDependencyOutput values.
// You can construct a concrete instance of `ActivityDependencyInput` via:
//
//          ActivityDependencyArgs{...}
type ActivityDependencyInput interface {
	pulumi.Input

	ToActivityDependencyOutput() ActivityDependencyOutput
	ToActivityDependencyOutputWithContext(context.Context) ActivityDependencyOutput
}

// Activity dependency information.
type ActivityDependencyArgs struct {
	// Activity name.
	Activity pulumi.StringInput `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions pulumi.StringArrayInput `pulumi:"dependencyConditions"`
}

func (ActivityDependencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityDependency)(nil)).Elem()
}

func (i ActivityDependencyArgs) ToActivityDependencyOutput() ActivityDependencyOutput {
	return i.ToActivityDependencyOutputWithContext(context.Background())
}

func (i ActivityDependencyArgs) ToActivityDependencyOutputWithContext(ctx context.Context) ActivityDependencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityDependencyOutput)
}

// ActivityDependencyArrayInput is an input type that accepts ActivityDependencyArray and ActivityDependencyArrayOutput values.
// You can construct a concrete instance of `ActivityDependencyArrayInput` via:
//
//          ActivityDependencyArray{ ActivityDependencyArgs{...} }
type ActivityDependencyArrayInput interface {
	pulumi.Input

	ToActivityDependencyArrayOutput() ActivityDependencyArrayOutput
	ToActivityDependencyArrayOutputWithContext(context.Context) ActivityDependencyArrayOutput
}

type ActivityDependencyArray []ActivityDependencyInput

func (ActivityDependencyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityDependency)(nil)).Elem()
}

func (i ActivityDependencyArray) ToActivityDependencyArrayOutput() ActivityDependencyArrayOutput {
	return i.ToActivityDependencyArrayOutputWithContext(context.Background())
}

func (i ActivityDependencyArray) ToActivityDependencyArrayOutputWithContext(ctx context.Context) ActivityDependencyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityDependencyArrayOutput)
}

// Activity dependency information.
type ActivityDependencyResponse struct {
	// Activity name.
	Activity string `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions []string `pulumi:"dependencyConditions"`
}

// Activity dependency information.
type ActivityDependencyResponseOutput struct{ *pulumi.OutputState }

func (ActivityDependencyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityDependencyResponse)(nil)).Elem()
}

func (o ActivityDependencyResponseOutput) ToActivityDependencyResponseOutput() ActivityDependencyResponseOutput {
	return o
}

func (o ActivityDependencyResponseOutput) ToActivityDependencyResponseOutputWithContext(ctx context.Context) ActivityDependencyResponseOutput {
	return o
}

// Activity name.
func (o ActivityDependencyResponseOutput) Activity() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityDependencyResponse) string { return v.Activity }).(pulumi.StringOutput)
}

// Match-Condition for the dependency.
func (o ActivityDependencyResponseOutput) DependencyConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityDependencyResponse) []string { return v.DependencyConditions }).(pulumi.StringArrayOutput)
}

type ActivityDependencyResponseArrayOutput struct{ *pulumi.OutputState }

func (ActivityDependencyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityDependencyResponse)(nil)).Elem()
}

func (o ActivityDependencyResponseArrayOutput) ToActivityDependencyResponseArrayOutput() ActivityDependencyResponseArrayOutput {
	return o
}

func (o ActivityDependencyResponseArrayOutput) ToActivityDependencyResponseArrayOutputWithContext(ctx context.Context) ActivityDependencyResponseArrayOutput {
	return o
}

func (o ActivityDependencyResponseArrayOutput) Index(i pulumi.IntInput) ActivityDependencyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActivityDependencyResponse {
		return vs[0].([]ActivityDependencyResponse)[vs[1].(int)]
	}).(ActivityDependencyResponseOutput)
}

// Execution policy for an activity.
type ActivityPolicy struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Retry map[string]interface{} `pulumi:"retry"`
	// Interval between each retry attempt (in seconds). The default is 30 sec.
	RetryIntervalInSeconds *int `pulumi:"retryIntervalInSeconds"`
	// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
	SecureOutput *bool `pulumi:"secureOutput"`
	// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout map[string]interface{} `pulumi:"timeout"`
}

// ActivityPolicyInput is an input type that accepts ActivityPolicyArgs and ActivityPolicyOutput values.
// You can construct a concrete instance of `ActivityPolicyInput` via:
//
//          ActivityPolicyArgs{...}
type ActivityPolicyInput interface {
	pulumi.Input

	ToActivityPolicyOutput() ActivityPolicyOutput
	ToActivityPolicyOutputWithContext(context.Context) ActivityPolicyOutput
}

// Execution policy for an activity.
type ActivityPolicyArgs struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Retry pulumi.MapInput `pulumi:"retry"`
	// Interval between each retry attempt (in seconds). The default is 30 sec.
	RetryIntervalInSeconds pulumi.IntPtrInput `pulumi:"retryIntervalInSeconds"`
	// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
	SecureOutput pulumi.BoolPtrInput `pulumi:"secureOutput"`
	// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout pulumi.MapInput `pulumi:"timeout"`
}

func (ActivityPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityPolicy)(nil)).Elem()
}

func (i ActivityPolicyArgs) ToActivityPolicyOutput() ActivityPolicyOutput {
	return i.ToActivityPolicyOutputWithContext(context.Background())
}

func (i ActivityPolicyArgs) ToActivityPolicyOutputWithContext(ctx context.Context) ActivityPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityPolicyOutput)
}

func (i ActivityPolicyArgs) ToActivityPolicyPtrOutput() ActivityPolicyPtrOutput {
	return i.ToActivityPolicyPtrOutputWithContext(context.Background())
}

func (i ActivityPolicyArgs) ToActivityPolicyPtrOutputWithContext(ctx context.Context) ActivityPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityPolicyOutput).ToActivityPolicyPtrOutputWithContext(ctx)
}

// ActivityPolicyPtrInput is an input type that accepts ActivityPolicyArgs, ActivityPolicyPtr and ActivityPolicyPtrOutput values.
// You can construct a concrete instance of `ActivityPolicyPtrInput` via:
//
//          ActivityPolicyArgs{...}
//
//  or:
//
//          nil
type ActivityPolicyPtrInput interface {
	pulumi.Input

	ToActivityPolicyPtrOutput() ActivityPolicyPtrOutput
	ToActivityPolicyPtrOutputWithContext(context.Context) ActivityPolicyPtrOutput
}

type activityPolicyPtrType ActivityPolicyArgs

func ActivityPolicyPtr(v *ActivityPolicyArgs) ActivityPolicyPtrInput {
	return (*activityPolicyPtrType)(v)
}

func (*activityPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActivityPolicy)(nil)).Elem()
}

func (i *activityPolicyPtrType) ToActivityPolicyPtrOutput() ActivityPolicyPtrOutput {
	return i.ToActivityPolicyPtrOutputWithContext(context.Background())
}

func (i *activityPolicyPtrType) ToActivityPolicyPtrOutputWithContext(ctx context.Context) ActivityPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityPolicyPtrOutput)
}

// Execution policy for an activity.
type ActivityPolicyResponse struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Retry map[string]interface{} `pulumi:"retry"`
	// Interval between each retry attempt (in seconds). The default is 30 sec.
	RetryIntervalInSeconds *int `pulumi:"retryIntervalInSeconds"`
	// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
	SecureOutput *bool `pulumi:"secureOutput"`
	// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout map[string]interface{} `pulumi:"timeout"`
}

// Execution policy for an activity.
type ActivityPolicyResponseOutput struct{ *pulumi.OutputState }

func (ActivityPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityPolicyResponse)(nil)).Elem()
}

func (o ActivityPolicyResponseOutput) ToActivityPolicyResponseOutput() ActivityPolicyResponseOutput {
	return o
}

func (o ActivityPolicyResponseOutput) ToActivityPolicyResponseOutputWithContext(ctx context.Context) ActivityPolicyResponseOutput {
	return o
}

func (o ActivityPolicyResponseOutput) ToActivityPolicyResponsePtrOutput() ActivityPolicyResponsePtrOutput {
	return o.ToActivityPolicyResponsePtrOutputWithContext(context.Background())
}

func (o ActivityPolicyResponseOutput) ToActivityPolicyResponsePtrOutputWithContext(ctx context.Context) ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v ActivityPolicyResponse) *ActivityPolicyResponse {
		return &v
	}).(ActivityPolicyResponsePtrOutput)
}

// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
func (o ActivityPolicyResponseOutput) Retry() pulumi.MapOutput {
	return o.ApplyT(func(v ActivityPolicyResponse) map[string]interface{} { return v.Retry }).(pulumi.MapOutput)
}

// Interval between each retry attempt (in seconds). The default is 30 sec.
func (o ActivityPolicyResponseOutput) RetryIntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ActivityPolicyResponse) *int { return v.RetryIntervalInSeconds }).(pulumi.IntPtrOutput)
}

// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
func (o ActivityPolicyResponseOutput) SecureOutput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActivityPolicyResponse) *bool { return v.SecureOutput }).(pulumi.BoolPtrOutput)
}

// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ActivityPolicyResponseOutput) Timeout() pulumi.MapOutput {
	return o.ApplyT(func(v ActivityPolicyResponse) map[string]interface{} { return v.Timeout }).(pulumi.MapOutput)
}

type ActivityPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ActivityPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActivityPolicyResponse)(nil)).Elem()
}

func (o ActivityPolicyResponsePtrOutput) ToActivityPolicyResponsePtrOutput() ActivityPolicyResponsePtrOutput {
	return o
}

func (o ActivityPolicyResponsePtrOutput) ToActivityPolicyResponsePtrOutputWithContext(ctx context.Context) ActivityPolicyResponsePtrOutput {
	return o
}

func (o ActivityPolicyResponsePtrOutput) Elem() ActivityPolicyResponseOutput {
	return o.ApplyT(func(v *ActivityPolicyResponse) ActivityPolicyResponse { return *v }).(ActivityPolicyResponseOutput)
}

// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
func (o ActivityPolicyResponsePtrOutput) Retry() pulumi.MapOutput {
	return o.ApplyT(func(v *ActivityPolicyResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Retry
	}).(pulumi.MapOutput)
}

// Interval between each retry attempt (in seconds). The default is 30 sec.
func (o ActivityPolicyResponsePtrOutput) RetryIntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ActivityPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.RetryIntervalInSeconds
	}).(pulumi.IntPtrOutput)
}

// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
func (o ActivityPolicyResponsePtrOutput) SecureOutput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActivityPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SecureOutput
	}).(pulumi.BoolPtrOutput)
}

// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ActivityPolicyResponsePtrOutput) Timeout() pulumi.MapOutput {
	return o.ApplyT(func(v *ActivityPolicyResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.MapOutput)
}

// Amazon Marketplace Web Service linked service.
type AmazonMWSLinkedService struct {
	// The access key id used to access data.
	AccessKeyId map[string]interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
	Endpoint map[string]interface{} `pulumi:"endpoint"`
	// The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
	MarketplaceID map[string]interface{} `pulumi:"marketplaceID"`
	// The Amazon MWS authentication token.
	MwsAuthToken interface{} `pulumi:"mwsAuthToken"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The secret key used to access data.
	SecretKey interface{} `pulumi:"secretKey"`
	// The Amazon seller ID.
	SellerID map[string]interface{} `pulumi:"sellerID"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
}

// AmazonMWSLinkedServiceInput is an input type that accepts AmazonMWSLinkedServiceArgs and AmazonMWSLinkedServiceOutput values.
// You can construct a concrete instance of `AmazonMWSLinkedServiceInput` via:
//
//          AmazonMWSLinkedServiceArgs{...}
type AmazonMWSLinkedServiceInput interface {
	pulumi.Input

	ToAmazonMWSLinkedServiceOutput() AmazonMWSLinkedServiceOutput
	ToAmazonMWSLinkedServiceOutputWithContext(context.Context) AmazonMWSLinkedServiceOutput
}

// Amazon Marketplace Web Service linked service.
type AmazonMWSLinkedServiceArgs struct {
	// The access key id used to access data.
	AccessKeyId pulumi.MapInput `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
	Endpoint pulumi.MapInput `pulumi:"endpoint"`
	// The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
	MarketplaceID pulumi.MapInput `pulumi:"marketplaceID"`
	// The Amazon MWS authentication token.
	MwsAuthToken pulumi.Input `pulumi:"mwsAuthToken"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The secret key used to access data.
	SecretKey pulumi.Input `pulumi:"secretKey"`
	// The Amazon seller ID.
	SellerID pulumi.MapInput `pulumi:"sellerID"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.MapInput `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.MapInput `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.MapInput `pulumi:"usePeerVerification"`
}

func (AmazonMWSLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonMWSLinkedService)(nil)).Elem()
}

func (i AmazonMWSLinkedServiceArgs) ToAmazonMWSLinkedServiceOutput() AmazonMWSLinkedServiceOutput {
	return i.ToAmazonMWSLinkedServiceOutputWithContext(context.Background())
}

func (i AmazonMWSLinkedServiceArgs) ToAmazonMWSLinkedServiceOutputWithContext(ctx context.Context) AmazonMWSLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonMWSLinkedServiceOutput)
}

// Amazon Marketplace Web Service linked service.
type AmazonMWSLinkedServiceResponse struct {
	// The access key id used to access data.
	AccessKeyId map[string]interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
	Endpoint map[string]interface{} `pulumi:"endpoint"`
	// The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
	MarketplaceID map[string]interface{} `pulumi:"marketplaceID"`
	// The Amazon MWS authentication token.
	MwsAuthToken interface{} `pulumi:"mwsAuthToken"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The secret key used to access data.
	SecretKey interface{} `pulumi:"secretKey"`
	// The Amazon seller ID.
	SellerID map[string]interface{} `pulumi:"sellerID"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
}

// Amazon Marketplace Web Service linked service.
type AmazonMWSLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AmazonMWSLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonMWSLinkedServiceResponse)(nil)).Elem()
}

func (o AmazonMWSLinkedServiceResponseOutput) ToAmazonMWSLinkedServiceResponseOutput() AmazonMWSLinkedServiceResponseOutput {
	return o
}

func (o AmazonMWSLinkedServiceResponseOutput) ToAmazonMWSLinkedServiceResponseOutputWithContext(ctx context.Context) AmazonMWSLinkedServiceResponseOutput {
	return o
}

// The access key id used to access data.
func (o AmazonMWSLinkedServiceResponseOutput) AccessKeyId() pulumi.MapOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) map[string]interface{} { return v.AccessKeyId }).(pulumi.MapOutput)
}

// List of tags that can be used for describing the Dataset.
func (o AmazonMWSLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o AmazonMWSLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AmazonMWSLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AmazonMWSLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
func (o AmazonMWSLinkedServiceResponseOutput) Endpoint() pulumi.MapOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) map[string]interface{} { return v.Endpoint }).(pulumi.MapOutput)
}

// The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
func (o AmazonMWSLinkedServiceResponseOutput) MarketplaceID() pulumi.MapOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) map[string]interface{} { return v.MarketplaceID }).(pulumi.MapOutput)
}

// The Amazon MWS authentication token.
func (o AmazonMWSLinkedServiceResponseOutput) MwsAuthToken() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) interface{} { return v.MwsAuthToken }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AmazonMWSLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The secret key used to access data.
func (o AmazonMWSLinkedServiceResponseOutput) SecretKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) interface{} { return v.SecretKey }).(pulumi.AnyOutput)
}

// The Amazon seller ID.
func (o AmazonMWSLinkedServiceResponseOutput) SellerID() pulumi.MapOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) map[string]interface{} { return v.SellerID }).(pulumi.MapOutput)
}

// Type of linked service.
func (o AmazonMWSLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o AmazonMWSLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.MapOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) map[string]interface{} { return v.UseEncryptedEndpoints }).(pulumi.MapOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o AmazonMWSLinkedServiceResponseOutput) UseHostVerification() pulumi.MapOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) map[string]interface{} { return v.UseHostVerification }).(pulumi.MapOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o AmazonMWSLinkedServiceResponseOutput) UsePeerVerification() pulumi.MapOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) map[string]interface{} { return v.UsePeerVerification }).(pulumi.MapOutput)
}

// Amazon Marketplace Web Service dataset.
type AmazonMWSObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AmazonMWSObjectDatasetInput is an input type that accepts AmazonMWSObjectDatasetArgs and AmazonMWSObjectDatasetOutput values.
// You can construct a concrete instance of `AmazonMWSObjectDatasetInput` via:
//
//          AmazonMWSObjectDatasetArgs{...}
type AmazonMWSObjectDatasetInput interface {
	pulumi.Input

	ToAmazonMWSObjectDatasetOutput() AmazonMWSObjectDatasetOutput
	ToAmazonMWSObjectDatasetOutputWithContext(context.Context) AmazonMWSObjectDatasetOutput
}

// Amazon Marketplace Web Service dataset.
type AmazonMWSObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AmazonMWSObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonMWSObjectDataset)(nil)).Elem()
}

func (i AmazonMWSObjectDatasetArgs) ToAmazonMWSObjectDatasetOutput() AmazonMWSObjectDatasetOutput {
	return i.ToAmazonMWSObjectDatasetOutputWithContext(context.Background())
}

func (i AmazonMWSObjectDatasetArgs) ToAmazonMWSObjectDatasetOutputWithContext(ctx context.Context) AmazonMWSObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonMWSObjectDatasetOutput)
}

// Amazon Marketplace Web Service dataset.
type AmazonMWSObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Amazon Marketplace Web Service dataset.
type AmazonMWSObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (AmazonMWSObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonMWSObjectDatasetResponse)(nil)).Elem()
}

func (o AmazonMWSObjectDatasetResponseOutput) ToAmazonMWSObjectDatasetResponseOutput() AmazonMWSObjectDatasetResponseOutput {
	return o
}

func (o AmazonMWSObjectDatasetResponseOutput) ToAmazonMWSObjectDatasetResponseOutputWithContext(ctx context.Context) AmazonMWSObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AmazonMWSObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o AmazonMWSObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o AmazonMWSObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AmazonMWSObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AmazonMWSObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o AmazonMWSObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Amazon Redshift.
type AmazonRedshiftLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The database name of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Database map[string]interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password of the Amazon Redshift source.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type: integer (or Expression with resultType integer).
	Port map[string]interface{} `pulumi:"port"`
	// The name of the Amazon Redshift server. Type: string (or Expression with resultType string).
	Server map[string]interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The username of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Username map[string]interface{} `pulumi:"username"`
}

// AmazonRedshiftLinkedServiceInput is an input type that accepts AmazonRedshiftLinkedServiceArgs and AmazonRedshiftLinkedServiceOutput values.
// You can construct a concrete instance of `AmazonRedshiftLinkedServiceInput` via:
//
//          AmazonRedshiftLinkedServiceArgs{...}
type AmazonRedshiftLinkedServiceInput interface {
	pulumi.Input

	ToAmazonRedshiftLinkedServiceOutput() AmazonRedshiftLinkedServiceOutput
	ToAmazonRedshiftLinkedServiceOutputWithContext(context.Context) AmazonRedshiftLinkedServiceOutput
}

// Linked service for Amazon Redshift.
type AmazonRedshiftLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The database name of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Database pulumi.MapInput `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password of the Amazon Redshift source.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type: integer (or Expression with resultType integer).
	Port pulumi.MapInput `pulumi:"port"`
	// The name of the Amazon Redshift server. Type: string (or Expression with resultType string).
	Server pulumi.MapInput `pulumi:"server"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The username of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Username pulumi.MapInput `pulumi:"username"`
}

func (AmazonRedshiftLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRedshiftLinkedService)(nil)).Elem()
}

func (i AmazonRedshiftLinkedServiceArgs) ToAmazonRedshiftLinkedServiceOutput() AmazonRedshiftLinkedServiceOutput {
	return i.ToAmazonRedshiftLinkedServiceOutputWithContext(context.Background())
}

func (i AmazonRedshiftLinkedServiceArgs) ToAmazonRedshiftLinkedServiceOutputWithContext(ctx context.Context) AmazonRedshiftLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonRedshiftLinkedServiceOutput)
}

// Linked service for Amazon Redshift.
type AmazonRedshiftLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The database name of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Database map[string]interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password of the Amazon Redshift source.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type: integer (or Expression with resultType integer).
	Port map[string]interface{} `pulumi:"port"`
	// The name of the Amazon Redshift server. Type: string (or Expression with resultType string).
	Server map[string]interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The username of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Username map[string]interface{} `pulumi:"username"`
}

// Linked service for Amazon Redshift.
type AmazonRedshiftLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AmazonRedshiftLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRedshiftLinkedServiceResponse)(nil)).Elem()
}

func (o AmazonRedshiftLinkedServiceResponseOutput) ToAmazonRedshiftLinkedServiceResponseOutput() AmazonRedshiftLinkedServiceResponseOutput {
	return o
}

func (o AmazonRedshiftLinkedServiceResponseOutput) ToAmazonRedshiftLinkedServiceResponseOutputWithContext(ctx context.Context) AmazonRedshiftLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AmazonRedshiftLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o AmazonRedshiftLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The database name of the Amazon Redshift source. Type: string (or Expression with resultType string).
func (o AmazonRedshiftLinkedServiceResponseOutput) Database() pulumi.MapOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) map[string]interface{} { return v.Database }).(pulumi.MapOutput)
}

// Linked service description.
func (o AmazonRedshiftLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AmazonRedshiftLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o AmazonRedshiftLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The password of the Amazon Redshift source.
func (o AmazonRedshiftLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type: integer (or Expression with resultType integer).
func (o AmazonRedshiftLinkedServiceResponseOutput) Port() pulumi.MapOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) map[string]interface{} { return v.Port }).(pulumi.MapOutput)
}

// The name of the Amazon Redshift server. Type: string (or Expression with resultType string).
func (o AmazonRedshiftLinkedServiceResponseOutput) Server() pulumi.MapOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) map[string]interface{} { return v.Server }).(pulumi.MapOutput)
}

// Type of linked service.
func (o AmazonRedshiftLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The username of the Amazon Redshift source. Type: string (or Expression with resultType string).
func (o AmazonRedshiftLinkedServiceResponseOutput) Username() pulumi.MapOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) map[string]interface{} { return v.Username }).(pulumi.MapOutput)
}

// A single Amazon Simple Storage Service (S3) object or a set of S3 objects.
type AmazonS3Dataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).
	BucketName map[string]interface{} `pulumi:"bucketName"`
	// The data compression method used for the Amazon S3 object.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The format of files.
	Format interface{} `pulumi:"format"`
	// The key of the Amazon S3 object. Type: string (or Expression with resultType string).
	Key map[string]interface{} `pulumi:"key"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
	Prefix map[string]interface{} `pulumi:"prefix"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
	// The version for the S3 object. Type: string (or Expression with resultType string).
	Version map[string]interface{} `pulumi:"version"`
}

// AmazonS3DatasetInput is an input type that accepts AmazonS3DatasetArgs and AmazonS3DatasetOutput values.
// You can construct a concrete instance of `AmazonS3DatasetInput` via:
//
//          AmazonS3DatasetArgs{...}
type AmazonS3DatasetInput interface {
	pulumi.Input

	ToAmazonS3DatasetOutput() AmazonS3DatasetOutput
	ToAmazonS3DatasetOutputWithContext(context.Context) AmazonS3DatasetOutput
}

// A single Amazon Simple Storage Service (S3) object or a set of S3 objects.
type AmazonS3DatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).
	BucketName pulumi.MapInput `pulumi:"bucketName"`
	// The data compression method used for the Amazon S3 object.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The format of files.
	Format pulumi.Input `pulumi:"format"`
	// The key of the Amazon S3 object. Type: string (or Expression with resultType string).
	Key pulumi.MapInput `pulumi:"key"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
	Prefix pulumi.MapInput `pulumi:"prefix"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
	// The version for the S3 object. Type: string (or Expression with resultType string).
	Version pulumi.MapInput `pulumi:"version"`
}

func (AmazonS3DatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3Dataset)(nil)).Elem()
}

func (i AmazonS3DatasetArgs) ToAmazonS3DatasetOutput() AmazonS3DatasetOutput {
	return i.ToAmazonS3DatasetOutputWithContext(context.Background())
}

func (i AmazonS3DatasetArgs) ToAmazonS3DatasetOutputWithContext(ctx context.Context) AmazonS3DatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonS3DatasetOutput)
}

// A single Amazon Simple Storage Service (S3) object or a set of S3 objects.
type AmazonS3DatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).
	BucketName map[string]interface{} `pulumi:"bucketName"`
	// The data compression method used for the Amazon S3 object.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The format of files.
	Format interface{} `pulumi:"format"`
	// The key of the Amazon S3 object. Type: string (or Expression with resultType string).
	Key map[string]interface{} `pulumi:"key"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
	Prefix map[string]interface{} `pulumi:"prefix"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
	// The version for the S3 object. Type: string (or Expression with resultType string).
	Version map[string]interface{} `pulumi:"version"`
}

// A single Amazon Simple Storage Service (S3) object or a set of S3 objects.
type AmazonS3DatasetResponseOutput struct{ *pulumi.OutputState }

func (AmazonS3DatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3DatasetResponse)(nil)).Elem()
}

func (o AmazonS3DatasetResponseOutput) ToAmazonS3DatasetResponseOutput() AmazonS3DatasetResponseOutput {
	return o
}

func (o AmazonS3DatasetResponseOutput) ToAmazonS3DatasetResponseOutputWithContext(ctx context.Context) AmazonS3DatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AmazonS3DatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetResponseOutput) BucketName() pulumi.MapOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) map[string]interface{} { return v.BucketName }).(pulumi.MapOutput)
}

// The data compression method used for the Amazon S3 object.
func (o AmazonS3DatasetResponseOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o AmazonS3DatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The format of files.
func (o AmazonS3DatasetResponseOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// The key of the Amazon S3 object. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetResponseOutput) Key() pulumi.MapOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) map[string]interface{} { return v.Key }).(pulumi.MapOutput)
}

// Linked service reference.
func (o AmazonS3DatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AmazonS3DatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetResponseOutput) Prefix() pulumi.MapOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) map[string]interface{} { return v.Prefix }).(pulumi.MapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AmazonS3DatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o AmazonS3DatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The version for the S3 object. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetResponseOutput) Version() pulumi.MapOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) map[string]interface{} { return v.Version }).(pulumi.MapOutput)
}

// Linked service for Amazon S3.
type AmazonS3LinkedService struct {
	// The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId map[string]interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The secret access key of the Amazon S3 Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AmazonS3LinkedServiceInput is an input type that accepts AmazonS3LinkedServiceArgs and AmazonS3LinkedServiceOutput values.
// You can construct a concrete instance of `AmazonS3LinkedServiceInput` via:
//
//          AmazonS3LinkedServiceArgs{...}
type AmazonS3LinkedServiceInput interface {
	pulumi.Input

	ToAmazonS3LinkedServiceOutput() AmazonS3LinkedServiceOutput
	ToAmazonS3LinkedServiceOutputWithContext(context.Context) AmazonS3LinkedServiceOutput
}

// Linked service for Amazon S3.
type AmazonS3LinkedServiceArgs struct {
	// The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId pulumi.MapInput `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The secret access key of the Amazon S3 Identity and Access Management (IAM) user.
	SecretAccessKey pulumi.Input `pulumi:"secretAccessKey"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AmazonS3LinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3LinkedService)(nil)).Elem()
}

func (i AmazonS3LinkedServiceArgs) ToAmazonS3LinkedServiceOutput() AmazonS3LinkedServiceOutput {
	return i.ToAmazonS3LinkedServiceOutputWithContext(context.Background())
}

func (i AmazonS3LinkedServiceArgs) ToAmazonS3LinkedServiceOutputWithContext(ctx context.Context) AmazonS3LinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonS3LinkedServiceOutput)
}

// Linked service for Amazon S3.
type AmazonS3LinkedServiceResponse struct {
	// The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId map[string]interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The secret access key of the Amazon S3 Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// Linked service for Amazon S3.
type AmazonS3LinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AmazonS3LinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3LinkedServiceResponse)(nil)).Elem()
}

func (o AmazonS3LinkedServiceResponseOutput) ToAmazonS3LinkedServiceResponseOutput() AmazonS3LinkedServiceResponseOutput {
	return o
}

func (o AmazonS3LinkedServiceResponseOutput) ToAmazonS3LinkedServiceResponseOutputWithContext(ctx context.Context) AmazonS3LinkedServiceResponseOutput {
	return o
}

// The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
func (o AmazonS3LinkedServiceResponseOutput) AccessKeyId() pulumi.MapOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) map[string]interface{} { return v.AccessKeyId }).(pulumi.MapOutput)
}

// List of tags that can be used for describing the Dataset.
func (o AmazonS3LinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o AmazonS3LinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AmazonS3LinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AmazonS3LinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o AmazonS3LinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The secret access key of the Amazon S3 Identity and Access Management (IAM) user.
func (o AmazonS3LinkedServiceResponseOutput) SecretAccessKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) interface{} { return v.SecretAccessKey }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AmazonS3LinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The data stored in Avro format.
type AvroFormat struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer map[string]interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer map[string]interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	Type string `pulumi:"type"`
}

// AvroFormatInput is an input type that accepts AvroFormatArgs and AvroFormatOutput values.
// You can construct a concrete instance of `AvroFormatInput` via:
//
//          AvroFormatArgs{...}
type AvroFormatInput interface {
	pulumi.Input

	ToAvroFormatOutput() AvroFormatOutput
	ToAvroFormatOutputWithContext(context.Context) AvroFormatOutput
}

// The data stored in Avro format.
type AvroFormatArgs struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer pulumi.MapInput `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer pulumi.MapInput `pulumi:"serializer"`
	// Type of dataset storage format.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AvroFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroFormat)(nil)).Elem()
}

func (i AvroFormatArgs) ToAvroFormatOutput() AvroFormatOutput {
	return i.ToAvroFormatOutputWithContext(context.Background())
}

func (i AvroFormatArgs) ToAvroFormatOutputWithContext(ctx context.Context) AvroFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroFormatOutput)
}

// The data stored in Avro format.
type AvroFormatResponse struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer map[string]interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer map[string]interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	Type string `pulumi:"type"`
}

// The data stored in Avro format.
type AvroFormatResponseOutput struct{ *pulumi.OutputState }

func (AvroFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroFormatResponse)(nil)).Elem()
}

func (o AvroFormatResponseOutput) ToAvroFormatResponseOutput() AvroFormatResponseOutput {
	return o
}

func (o AvroFormatResponseOutput) ToAvroFormatResponseOutputWithContext(ctx context.Context) AvroFormatResponseOutput {
	return o
}

// Deserializer. Type: string (or Expression with resultType string).
func (o AvroFormatResponseOutput) Deserializer() pulumi.MapOutput {
	return o.ApplyT(func(v AvroFormatResponse) map[string]interface{} { return v.Deserializer }).(pulumi.MapOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o AvroFormatResponseOutput) Serializer() pulumi.MapOutput {
	return o.ApplyT(func(v AvroFormatResponse) map[string]interface{} { return v.Serializer }).(pulumi.MapOutput)
}

// Type of dataset storage format.
func (o AvroFormatResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AvroFormatResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Batch linked service.
type AzureBatchLinkedService struct {
	// The Azure Batch account access key.
	AccessKey interface{} `pulumi:"accessKey"`
	// The Azure Batch account name. Type: string (or Expression with resultType string).
	AccountName map[string]interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The Azure Batch URI. Type: string (or Expression with resultType string).
	BatchUri map[string]interface{} `pulumi:"batchUri"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The Azure Storage linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure Batch pool name. Type: string (or Expression with resultType string).
	PoolName map[string]interface{} `pulumi:"poolName"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureBatchLinkedServiceInput is an input type that accepts AzureBatchLinkedServiceArgs and AzureBatchLinkedServiceOutput values.
// You can construct a concrete instance of `AzureBatchLinkedServiceInput` via:
//
//          AzureBatchLinkedServiceArgs{...}
type AzureBatchLinkedServiceInput interface {
	pulumi.Input

	ToAzureBatchLinkedServiceOutput() AzureBatchLinkedServiceOutput
	ToAzureBatchLinkedServiceOutputWithContext(context.Context) AzureBatchLinkedServiceOutput
}

// Azure Batch linked service.
type AzureBatchLinkedServiceArgs struct {
	// The Azure Batch account access key.
	AccessKey pulumi.Input `pulumi:"accessKey"`
	// The Azure Batch account name. Type: string (or Expression with resultType string).
	AccountName pulumi.MapInput `pulumi:"accountName"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The Azure Batch URI. Type: string (or Expression with resultType string).
	BatchUri pulumi.MapInput `pulumi:"batchUri"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The Azure Storage linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure Batch pool name. Type: string (or Expression with resultType string).
	PoolName pulumi.MapInput `pulumi:"poolName"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureBatchLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBatchLinkedService)(nil)).Elem()
}

func (i AzureBatchLinkedServiceArgs) ToAzureBatchLinkedServiceOutput() AzureBatchLinkedServiceOutput {
	return i.ToAzureBatchLinkedServiceOutputWithContext(context.Background())
}

func (i AzureBatchLinkedServiceArgs) ToAzureBatchLinkedServiceOutputWithContext(ctx context.Context) AzureBatchLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBatchLinkedServiceOutput)
}

// Azure Batch linked service.
type AzureBatchLinkedServiceResponse struct {
	// The Azure Batch account access key.
	AccessKey interface{} `pulumi:"accessKey"`
	// The Azure Batch account name. Type: string (or Expression with resultType string).
	AccountName map[string]interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The Azure Batch URI. Type: string (or Expression with resultType string).
	BatchUri map[string]interface{} `pulumi:"batchUri"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The Azure Storage linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure Batch pool name. Type: string (or Expression with resultType string).
	PoolName map[string]interface{} `pulumi:"poolName"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// Azure Batch linked service.
type AzureBatchLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureBatchLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBatchLinkedServiceResponse)(nil)).Elem()
}

func (o AzureBatchLinkedServiceResponseOutput) ToAzureBatchLinkedServiceResponseOutput() AzureBatchLinkedServiceResponseOutput {
	return o
}

func (o AzureBatchLinkedServiceResponseOutput) ToAzureBatchLinkedServiceResponseOutputWithContext(ctx context.Context) AzureBatchLinkedServiceResponseOutput {
	return o
}

// The Azure Batch account access key.
func (o AzureBatchLinkedServiceResponseOutput) AccessKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) interface{} { return v.AccessKey }).(pulumi.AnyOutput)
}

// The Azure Batch account name. Type: string (or Expression with resultType string).
func (o AzureBatchLinkedServiceResponseOutput) AccountName() pulumi.MapOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) map[string]interface{} { return v.AccountName }).(pulumi.MapOutput)
}

// List of tags that can be used for describing the Dataset.
func (o AzureBatchLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The Azure Batch URI. Type: string (or Expression with resultType string).
func (o AzureBatchLinkedServiceResponseOutput) BatchUri() pulumi.MapOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) map[string]interface{} { return v.BatchUri }).(pulumi.MapOutput)
}

// The integration runtime reference.
func (o AzureBatchLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureBatchLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureBatchLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The Azure Storage linked service reference.
func (o AzureBatchLinkedServiceResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for linked service.
func (o AzureBatchLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure Batch pool name. Type: string (or Expression with resultType string).
func (o AzureBatchLinkedServiceResponseOutput) PoolName() pulumi.MapOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) map[string]interface{} { return v.PoolName }).(pulumi.MapOutput)
}

// Type of linked service.
func (o AzureBatchLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure Blob storage.
type AzureBlobDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the Azure Blob. Type: string (or Expression with resultType string).
	FileName map[string]interface{} `pulumi:"fileName"`
	// The path of the Azure Blob storage. Type: string (or Expression with resultType string).
	FolderPath map[string]interface{} `pulumi:"folderPath"`
	// The format of the Azure Blob storage.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// The root of blob path. Type: string (or Expression with resultType string).
	TableRootLocation map[string]interface{} `pulumi:"tableRootLocation"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureBlobDatasetInput is an input type that accepts AzureBlobDatasetArgs and AzureBlobDatasetOutput values.
// You can construct a concrete instance of `AzureBlobDatasetInput` via:
//
//          AzureBlobDatasetArgs{...}
type AzureBlobDatasetInput interface {
	pulumi.Input

	ToAzureBlobDatasetOutput() AzureBlobDatasetOutput
	ToAzureBlobDatasetOutputWithContext(context.Context) AzureBlobDatasetOutput
}

// The Azure Blob storage.
type AzureBlobDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the Azure Blob. Type: string (or Expression with resultType string).
	FileName pulumi.MapInput `pulumi:"fileName"`
	// The path of the Azure Blob storage. Type: string (or Expression with resultType string).
	FolderPath pulumi.MapInput `pulumi:"folderPath"`
	// The format of the Azure Blob storage.
	Format pulumi.Input `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// The root of blob path. Type: string (or Expression with resultType string).
	TableRootLocation pulumi.MapInput `pulumi:"tableRootLocation"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureBlobDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobDataset)(nil)).Elem()
}

func (i AzureBlobDatasetArgs) ToAzureBlobDatasetOutput() AzureBlobDatasetOutput {
	return i.ToAzureBlobDatasetOutputWithContext(context.Background())
}

func (i AzureBlobDatasetArgs) ToAzureBlobDatasetOutputWithContext(ctx context.Context) AzureBlobDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobDatasetOutput)
}

// The Azure Blob storage.
type AzureBlobDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the Azure Blob. Type: string (or Expression with resultType string).
	FileName map[string]interface{} `pulumi:"fileName"`
	// The path of the Azure Blob storage. Type: string (or Expression with resultType string).
	FolderPath map[string]interface{} `pulumi:"folderPath"`
	// The format of the Azure Blob storage.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// The root of blob path. Type: string (or Expression with resultType string).
	TableRootLocation map[string]interface{} `pulumi:"tableRootLocation"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// The Azure Blob storage.
type AzureBlobDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobDatasetResponse)(nil)).Elem()
}

func (o AzureBlobDatasetResponseOutput) ToAzureBlobDatasetResponseOutput() AzureBlobDatasetResponseOutput {
	return o
}

func (o AzureBlobDatasetResponseOutput) ToAzureBlobDatasetResponseOutputWithContext(ctx context.Context) AzureBlobDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureBlobDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The data compression method used for the blob storage.
func (o AzureBlobDatasetResponseOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o AzureBlobDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the Azure Blob. Type: string (or Expression with resultType string).
func (o AzureBlobDatasetResponseOutput) FileName() pulumi.MapOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) map[string]interface{} { return v.FileName }).(pulumi.MapOutput)
}

// The path of the Azure Blob storage. Type: string (or Expression with resultType string).
func (o AzureBlobDatasetResponseOutput) FolderPath() pulumi.MapOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) map[string]interface{} { return v.FolderPath }).(pulumi.MapOutput)
}

// The format of the Azure Blob storage.
func (o AzureBlobDatasetResponseOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AzureBlobDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureBlobDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureBlobDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// The root of blob path. Type: string (or Expression with resultType string).
func (o AzureBlobDatasetResponseOutput) TableRootLocation() pulumi.MapOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) map[string]interface{} { return v.TableRootLocation }).(pulumi.MapOutput)
}

// Type of dataset.
func (o AzureBlobDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Data Lake Analytics linked service.
type AzureDataLakeAnalyticsLinkedService struct {
	// The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string).
	AccountName map[string]interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Azure Data Lake Analytics URI Type: string (or Expression with resultType string).
	DataLakeAnalyticsUri map[string]interface{} `pulumi:"dataLakeAnalyticsUri"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName map[string]interface{} `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression with resultType string).
	ServicePrincipalId map[string]interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Analytics account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId map[string]interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant map[string]interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureDataLakeAnalyticsLinkedServiceInput is an input type that accepts AzureDataLakeAnalyticsLinkedServiceArgs and AzureDataLakeAnalyticsLinkedServiceOutput values.
// You can construct a concrete instance of `AzureDataLakeAnalyticsLinkedServiceInput` via:
//
//          AzureDataLakeAnalyticsLinkedServiceArgs{...}
type AzureDataLakeAnalyticsLinkedServiceInput interface {
	pulumi.Input

	ToAzureDataLakeAnalyticsLinkedServiceOutput() AzureDataLakeAnalyticsLinkedServiceOutput
	ToAzureDataLakeAnalyticsLinkedServiceOutputWithContext(context.Context) AzureDataLakeAnalyticsLinkedServiceOutput
}

// Azure Data Lake Analytics linked service.
type AzureDataLakeAnalyticsLinkedServiceArgs struct {
	// The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string).
	AccountName pulumi.MapInput `pulumi:"accountName"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Azure Data Lake Analytics URI Type: string (or Expression with resultType string).
	DataLakeAnalyticsUri pulumi.MapInput `pulumi:"dataLakeAnalyticsUri"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName pulumi.MapInput `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.MapInput `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Analytics account.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId pulumi.MapInput `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.MapInput `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataLakeAnalyticsLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeAnalyticsLinkedService)(nil)).Elem()
}

func (i AzureDataLakeAnalyticsLinkedServiceArgs) ToAzureDataLakeAnalyticsLinkedServiceOutput() AzureDataLakeAnalyticsLinkedServiceOutput {
	return i.ToAzureDataLakeAnalyticsLinkedServiceOutputWithContext(context.Background())
}

func (i AzureDataLakeAnalyticsLinkedServiceArgs) ToAzureDataLakeAnalyticsLinkedServiceOutputWithContext(ctx context.Context) AzureDataLakeAnalyticsLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeAnalyticsLinkedServiceOutput)
}

// Azure Data Lake Analytics linked service.
type AzureDataLakeAnalyticsLinkedServiceResponse struct {
	// The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string).
	AccountName map[string]interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Azure Data Lake Analytics URI Type: string (or Expression with resultType string).
	DataLakeAnalyticsUri map[string]interface{} `pulumi:"dataLakeAnalyticsUri"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName map[string]interface{} `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression with resultType string).
	ServicePrincipalId map[string]interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Analytics account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId map[string]interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant map[string]interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// Azure Data Lake Analytics linked service.
type AzureDataLakeAnalyticsLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeAnalyticsLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeAnalyticsLinkedServiceResponse)(nil)).Elem()
}

func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) ToAzureDataLakeAnalyticsLinkedServiceResponseOutput() AzureDataLakeAnalyticsLinkedServiceResponseOutput {
	return o
}

func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) ToAzureDataLakeAnalyticsLinkedServiceResponseOutputWithContext(ctx context.Context) AzureDataLakeAnalyticsLinkedServiceResponseOutput {
	return o
}

// The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) AccountName() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) map[string]interface{} { return v.AccountName }).(pulumi.MapOutput)
}

// List of tags that can be used for describing the Dataset.
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Azure Data Lake Analytics URI Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) DataLakeAnalyticsUri() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) map[string]interface{} {
		return v.DataLakeAnalyticsUri
	}).(pulumi.MapOutput)
}

// Linked service description.
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) map[string]interface{} {
		return v.EncryptedCredential
	}).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) ResourceGroupName() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) map[string]interface{} { return v.ResourceGroupName }).(pulumi.MapOutput)
}

// The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) ServicePrincipalId() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) map[string]interface{} {
		return v.ServicePrincipalId
	}).(pulumi.MapOutput)
}

// The Key of the application used to authenticate against the Azure Data Lake Analytics account.
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) SubscriptionId() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) map[string]interface{} { return v.SubscriptionId }).(pulumi.MapOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) Tenant() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) map[string]interface{} { return v.Tenant }).(pulumi.MapOutput)
}

// Type of linked service.
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Data Lake Store dataset.
type AzureDataLakeStoreDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The data compression method used for the item(s) in the Azure Data Lake Store.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FileName map[string]interface{} `pulumi:"fileName"`
	// Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FolderPath map[string]interface{} `pulumi:"folderPath"`
	// The format of the Data Lake Store.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureDataLakeStoreDatasetInput is an input type that accepts AzureDataLakeStoreDatasetArgs and AzureDataLakeStoreDatasetOutput values.
// You can construct a concrete instance of `AzureDataLakeStoreDatasetInput` via:
//
//          AzureDataLakeStoreDatasetArgs{...}
type AzureDataLakeStoreDatasetInput interface {
	pulumi.Input

	ToAzureDataLakeStoreDatasetOutput() AzureDataLakeStoreDatasetOutput
	ToAzureDataLakeStoreDatasetOutputWithContext(context.Context) AzureDataLakeStoreDatasetOutput
}

// Azure Data Lake Store dataset.
type AzureDataLakeStoreDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The data compression method used for the item(s) in the Azure Data Lake Store.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FileName pulumi.MapInput `pulumi:"fileName"`
	// Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FolderPath pulumi.MapInput `pulumi:"folderPath"`
	// The format of the Data Lake Store.
	Format pulumi.Input `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataLakeStoreDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreDataset)(nil)).Elem()
}

func (i AzureDataLakeStoreDatasetArgs) ToAzureDataLakeStoreDatasetOutput() AzureDataLakeStoreDatasetOutput {
	return i.ToAzureDataLakeStoreDatasetOutputWithContext(context.Background())
}

func (i AzureDataLakeStoreDatasetArgs) ToAzureDataLakeStoreDatasetOutputWithContext(ctx context.Context) AzureDataLakeStoreDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeStoreDatasetOutput)
}

// Azure Data Lake Store dataset.
type AzureDataLakeStoreDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The data compression method used for the item(s) in the Azure Data Lake Store.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FileName map[string]interface{} `pulumi:"fileName"`
	// Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FolderPath map[string]interface{} `pulumi:"folderPath"`
	// The format of the Data Lake Store.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Azure Data Lake Store dataset.
type AzureDataLakeStoreDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreDatasetResponse)(nil)).Elem()
}

func (o AzureDataLakeStoreDatasetResponseOutput) ToAzureDataLakeStoreDatasetResponseOutput() AzureDataLakeStoreDatasetResponseOutput {
	return o
}

func (o AzureDataLakeStoreDatasetResponseOutput) ToAzureDataLakeStoreDatasetResponseOutputWithContext(ctx context.Context) AzureDataLakeStoreDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureDataLakeStoreDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The data compression method used for the item(s) in the Azure Data Lake Store.
func (o AzureDataLakeStoreDatasetResponseOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o AzureDataLakeStoreDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreDatasetResponseOutput) FileName() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) map[string]interface{} { return v.FileName }).(pulumi.MapOutput)
}

// Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreDatasetResponseOutput) FolderPath() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) map[string]interface{} { return v.FolderPath }).(pulumi.MapOutput)
}

// The format of the Data Lake Store.
func (o AzureDataLakeStoreDatasetResponseOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AzureDataLakeStoreDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureDataLakeStoreDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureDataLakeStoreDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o AzureDataLakeStoreDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Data Lake Store linked service.
type AzureDataLakeStoreLinkedService struct {
	// Data Lake Store account name. Type: string (or Expression with resultType string).
	AccountName map[string]interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Data Lake Store service URI. Type: string (or Expression with resultType string).
	DataLakeStoreUri map[string]interface{} `pulumi:"dataLakeStoreUri"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName map[string]interface{} `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string).
	ServicePrincipalId map[string]interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Store account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId map[string]interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant map[string]interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureDataLakeStoreLinkedServiceInput is an input type that accepts AzureDataLakeStoreLinkedServiceArgs and AzureDataLakeStoreLinkedServiceOutput values.
// You can construct a concrete instance of `AzureDataLakeStoreLinkedServiceInput` via:
//
//          AzureDataLakeStoreLinkedServiceArgs{...}
type AzureDataLakeStoreLinkedServiceInput interface {
	pulumi.Input

	ToAzureDataLakeStoreLinkedServiceOutput() AzureDataLakeStoreLinkedServiceOutput
	ToAzureDataLakeStoreLinkedServiceOutputWithContext(context.Context) AzureDataLakeStoreLinkedServiceOutput
}

// Azure Data Lake Store linked service.
type AzureDataLakeStoreLinkedServiceArgs struct {
	// Data Lake Store account name. Type: string (or Expression with resultType string).
	AccountName pulumi.MapInput `pulumi:"accountName"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Data Lake Store service URI. Type: string (or Expression with resultType string).
	DataLakeStoreUri pulumi.MapInput `pulumi:"dataLakeStoreUri"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName pulumi.MapInput `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.MapInput `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Store account.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId pulumi.MapInput `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.MapInput `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataLakeStoreLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreLinkedService)(nil)).Elem()
}

func (i AzureDataLakeStoreLinkedServiceArgs) ToAzureDataLakeStoreLinkedServiceOutput() AzureDataLakeStoreLinkedServiceOutput {
	return i.ToAzureDataLakeStoreLinkedServiceOutputWithContext(context.Background())
}

func (i AzureDataLakeStoreLinkedServiceArgs) ToAzureDataLakeStoreLinkedServiceOutputWithContext(ctx context.Context) AzureDataLakeStoreLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeStoreLinkedServiceOutput)
}

// Azure Data Lake Store linked service.
type AzureDataLakeStoreLinkedServiceResponse struct {
	// Data Lake Store account name. Type: string (or Expression with resultType string).
	AccountName map[string]interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Data Lake Store service URI. Type: string (or Expression with resultType string).
	DataLakeStoreUri map[string]interface{} `pulumi:"dataLakeStoreUri"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName map[string]interface{} `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string).
	ServicePrincipalId map[string]interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Store account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId map[string]interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant map[string]interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// Azure Data Lake Store linked service.
type AzureDataLakeStoreLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreLinkedServiceResponse)(nil)).Elem()
}

func (o AzureDataLakeStoreLinkedServiceResponseOutput) ToAzureDataLakeStoreLinkedServiceResponseOutput() AzureDataLakeStoreLinkedServiceResponseOutput {
	return o
}

func (o AzureDataLakeStoreLinkedServiceResponseOutput) ToAzureDataLakeStoreLinkedServiceResponseOutputWithContext(ctx context.Context) AzureDataLakeStoreLinkedServiceResponseOutput {
	return o
}

// Data Lake Store account name. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceResponseOutput) AccountName() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) map[string]interface{} { return v.AccountName }).(pulumi.MapOutput)
}

// List of tags that can be used for describing the Dataset.
func (o AzureDataLakeStoreLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o AzureDataLakeStoreLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Data Lake Store service URI. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceResponseOutput) DataLakeStoreUri() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) map[string]interface{} { return v.DataLakeStoreUri }).(pulumi.MapOutput)
}

// Linked service description.
func (o AzureDataLakeStoreLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o AzureDataLakeStoreLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceResponseOutput) ResourceGroupName() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) map[string]interface{} { return v.ResourceGroupName }).(pulumi.MapOutput)
}

// The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceResponseOutput) ServicePrincipalId() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) map[string]interface{} { return v.ServicePrincipalId }).(pulumi.MapOutput)
}

// The Key of the application used to authenticate against the Azure Data Lake Store account.
func (o AzureDataLakeStoreLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceResponseOutput) SubscriptionId() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) map[string]interface{} { return v.SubscriptionId }).(pulumi.MapOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceResponseOutput) Tenant() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) map[string]interface{} { return v.Tenant }).(pulumi.MapOutput)
}

// Type of linked service.
func (o AzureDataLakeStoreLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Databricks linked service.
type AzureDatabricksLinkedService struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string).
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain map[string]interface{} `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The id of an existing cluster that will be used for all runs of this job. Type: string (or Expression with resultType string).
	ExistingClusterId map[string]interface{} `pulumi:"existingClusterId"`
	// The node types of new cluster. Type: string (or Expression with resultType string).
	NewClusterNodeType map[string]interface{} `pulumi:"newClusterNodeType"`
	// Number of worker nodes that new cluster should have. A string formatted Int32, like '1' means numOfWorker is 1 or '1:10' means auto-scale from 1 as min and 10 as max. Type: string (or Expression with resultType string).
	NewClusterNumOfWorker map[string]interface{} `pulumi:"newClusterNumOfWorker"`
	// a set of optional, user-specified Spark configuration key-value pairs.
	NewClusterSparkConf map[string]map[string]interface{} `pulumi:"newClusterSparkConf"`
	// The Spark version of new cluster. Type: string (or Expression with resultType string).
	NewClusterVersion map[string]interface{} `pulumi:"newClusterVersion"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureDatabricksLinkedServiceInput is an input type that accepts AzureDatabricksLinkedServiceArgs and AzureDatabricksLinkedServiceOutput values.
// You can construct a concrete instance of `AzureDatabricksLinkedServiceInput` via:
//
//          AzureDatabricksLinkedServiceArgs{...}
type AzureDatabricksLinkedServiceInput interface {
	pulumi.Input

	ToAzureDatabricksLinkedServiceOutput() AzureDatabricksLinkedServiceOutput
	ToAzureDatabricksLinkedServiceOutputWithContext(context.Context) AzureDatabricksLinkedServiceOutput
}

// Azure Databricks linked service.
type AzureDatabricksLinkedServiceArgs struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string).
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain pulumi.MapInput `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The id of an existing cluster that will be used for all runs of this job. Type: string (or Expression with resultType string).
	ExistingClusterId pulumi.MapInput `pulumi:"existingClusterId"`
	// The node types of new cluster. Type: string (or Expression with resultType string).
	NewClusterNodeType pulumi.MapInput `pulumi:"newClusterNodeType"`
	// Number of worker nodes that new cluster should have. A string formatted Int32, like '1' means numOfWorker is 1 or '1:10' means auto-scale from 1 as min and 10 as max. Type: string (or Expression with resultType string).
	NewClusterNumOfWorker pulumi.MapInput `pulumi:"newClusterNumOfWorker"`
	// a set of optional, user-specified Spark configuration key-value pairs.
	NewClusterSparkConf pulumi.MapMapInput `pulumi:"newClusterSparkConf"`
	// The Spark version of new cluster. Type: string (or Expression with resultType string).
	NewClusterVersion pulumi.MapInput `pulumi:"newClusterVersion"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDatabricksLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksLinkedService)(nil)).Elem()
}

func (i AzureDatabricksLinkedServiceArgs) ToAzureDatabricksLinkedServiceOutput() AzureDatabricksLinkedServiceOutput {
	return i.ToAzureDatabricksLinkedServiceOutputWithContext(context.Background())
}

func (i AzureDatabricksLinkedServiceArgs) ToAzureDatabricksLinkedServiceOutputWithContext(ctx context.Context) AzureDatabricksLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDatabricksLinkedServiceOutput)
}

// Azure Databricks linked service.
type AzureDatabricksLinkedServiceResponse struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string).
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain map[string]interface{} `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The id of an existing cluster that will be used for all runs of this job. Type: string (or Expression with resultType string).
	ExistingClusterId map[string]interface{} `pulumi:"existingClusterId"`
	// The node types of new cluster. Type: string (or Expression with resultType string).
	NewClusterNodeType map[string]interface{} `pulumi:"newClusterNodeType"`
	// Number of worker nodes that new cluster should have. A string formatted Int32, like '1' means numOfWorker is 1 or '1:10' means auto-scale from 1 as min and 10 as max. Type: string (or Expression with resultType string).
	NewClusterNumOfWorker map[string]interface{} `pulumi:"newClusterNumOfWorker"`
	// a set of optional, user-specified Spark configuration key-value pairs.
	NewClusterSparkConf map[string]map[string]interface{} `pulumi:"newClusterSparkConf"`
	// The Spark version of new cluster. Type: string (or Expression with resultType string).
	NewClusterVersion map[string]interface{} `pulumi:"newClusterVersion"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// Azure Databricks linked service.
type AzureDatabricksLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureDatabricksLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksLinkedServiceResponse)(nil)).Elem()
}

func (o AzureDatabricksLinkedServiceResponseOutput) ToAzureDatabricksLinkedServiceResponseOutput() AzureDatabricksLinkedServiceResponseOutput {
	return o
}

func (o AzureDatabricksLinkedServiceResponseOutput) ToAzureDatabricksLinkedServiceResponseOutputWithContext(ctx context.Context) AzureDatabricksLinkedServiceResponseOutput {
	return o
}

// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the Dataset.
func (o AzureDatabricksLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o AzureDatabricksLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureDatabricksLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) Domain() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) map[string]interface{} { return v.Domain }).(pulumi.MapOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The id of an existing cluster that will be used for all runs of this job. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) ExistingClusterId() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) map[string]interface{} { return v.ExistingClusterId }).(pulumi.MapOutput)
}

// The node types of new cluster. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterNodeType() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) map[string]interface{} { return v.NewClusterNodeType }).(pulumi.MapOutput)
}

// Number of worker nodes that new cluster should have. A string formatted Int32, like '1' means numOfWorker is 1 or '1:10' means auto-scale from 1 as min and 10 as max. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterNumOfWorker() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) map[string]interface{} { return v.NewClusterNumOfWorker }).(pulumi.MapOutput)
}

// a set of optional, user-specified Spark configuration key-value pairs.
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterSparkConf() pulumi.MapMapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) map[string]map[string]interface{} {
		return v.NewClusterSparkConf
	}).(pulumi.MapMapOutput)
}

// The Spark version of new cluster. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterVersion() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) map[string]interface{} { return v.NewClusterVersion }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o AzureDatabricksLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o AzureDatabricksLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Key Vault linked service.
type AzureKeyVaultLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType string).
	BaseUrl map[string]interface{} `pulumi:"baseUrl"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureKeyVaultLinkedServiceInput is an input type that accepts AzureKeyVaultLinkedServiceArgs and AzureKeyVaultLinkedServiceOutput values.
// You can construct a concrete instance of `AzureKeyVaultLinkedServiceInput` via:
//
//          AzureKeyVaultLinkedServiceArgs{...}
type AzureKeyVaultLinkedServiceInput interface {
	pulumi.Input

	ToAzureKeyVaultLinkedServiceOutput() AzureKeyVaultLinkedServiceOutput
	ToAzureKeyVaultLinkedServiceOutputWithContext(context.Context) AzureKeyVaultLinkedServiceOutput
}

// Azure Key Vault linked service.
type AzureKeyVaultLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType string).
	BaseUrl pulumi.MapInput `pulumi:"baseUrl"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureKeyVaultLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultLinkedService)(nil)).Elem()
}

func (i AzureKeyVaultLinkedServiceArgs) ToAzureKeyVaultLinkedServiceOutput() AzureKeyVaultLinkedServiceOutput {
	return i.ToAzureKeyVaultLinkedServiceOutputWithContext(context.Background())
}

func (i AzureKeyVaultLinkedServiceArgs) ToAzureKeyVaultLinkedServiceOutputWithContext(ctx context.Context) AzureKeyVaultLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureKeyVaultLinkedServiceOutput)
}

// Azure Key Vault linked service.
type AzureKeyVaultLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType string).
	BaseUrl map[string]interface{} `pulumi:"baseUrl"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// Azure Key Vault linked service.
type AzureKeyVaultLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureKeyVaultLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultLinkedServiceResponse)(nil)).Elem()
}

func (o AzureKeyVaultLinkedServiceResponseOutput) ToAzureKeyVaultLinkedServiceResponseOutput() AzureKeyVaultLinkedServiceResponseOutput {
	return o
}

func (o AzureKeyVaultLinkedServiceResponseOutput) ToAzureKeyVaultLinkedServiceResponseOutputWithContext(ctx context.Context) AzureKeyVaultLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureKeyVaultLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType string).
func (o AzureKeyVaultLinkedServiceResponseOutput) BaseUrl() pulumi.MapOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedServiceResponse) map[string]interface{} { return v.BaseUrl }).(pulumi.MapOutput)
}

// The integration runtime reference.
func (o AzureKeyVaultLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureKeyVaultLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureKeyVaultLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o AzureKeyVaultLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Key Vault secret reference.
type AzureKeyVaultSecretReference struct {
	// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
	SecretName map[string]interface{} `pulumi:"secretName"`
	// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
	SecretVersion map[string]interface{} `pulumi:"secretVersion"`
	// The Azure Key Vault linked service reference.
	Store LinkedServiceReference `pulumi:"store"`
	// Type of the secret.
	Type string `pulumi:"type"`
}

// AzureKeyVaultSecretReferenceInput is an input type that accepts AzureKeyVaultSecretReferenceArgs and AzureKeyVaultSecretReferenceOutput values.
// You can construct a concrete instance of `AzureKeyVaultSecretReferenceInput` via:
//
//          AzureKeyVaultSecretReferenceArgs{...}
type AzureKeyVaultSecretReferenceInput interface {
	pulumi.Input

	ToAzureKeyVaultSecretReferenceOutput() AzureKeyVaultSecretReferenceOutput
	ToAzureKeyVaultSecretReferenceOutputWithContext(context.Context) AzureKeyVaultSecretReferenceOutput
}

// Azure Key Vault secret reference.
type AzureKeyVaultSecretReferenceArgs struct {
	// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
	SecretName pulumi.MapInput `pulumi:"secretName"`
	// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
	SecretVersion pulumi.MapInput `pulumi:"secretVersion"`
	// The Azure Key Vault linked service reference.
	Store LinkedServiceReferenceInput `pulumi:"store"`
	// Type of the secret.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureKeyVaultSecretReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultSecretReference)(nil)).Elem()
}

func (i AzureKeyVaultSecretReferenceArgs) ToAzureKeyVaultSecretReferenceOutput() AzureKeyVaultSecretReferenceOutput {
	return i.ToAzureKeyVaultSecretReferenceOutputWithContext(context.Background())
}

func (i AzureKeyVaultSecretReferenceArgs) ToAzureKeyVaultSecretReferenceOutputWithContext(ctx context.Context) AzureKeyVaultSecretReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureKeyVaultSecretReferenceOutput)
}

// Azure Key Vault secret reference.
type AzureKeyVaultSecretReferenceResponse struct {
	// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
	SecretName map[string]interface{} `pulumi:"secretName"`
	// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
	SecretVersion map[string]interface{} `pulumi:"secretVersion"`
	// The Azure Key Vault linked service reference.
	Store LinkedServiceReferenceResponse `pulumi:"store"`
	// Type of the secret.
	Type string `pulumi:"type"`
}

// Azure Key Vault secret reference.
type AzureKeyVaultSecretReferenceResponseOutput struct{ *pulumi.OutputState }

func (AzureKeyVaultSecretReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultSecretReferenceResponse)(nil)).Elem()
}

func (o AzureKeyVaultSecretReferenceResponseOutput) ToAzureKeyVaultSecretReferenceResponseOutput() AzureKeyVaultSecretReferenceResponseOutput {
	return o
}

func (o AzureKeyVaultSecretReferenceResponseOutput) ToAzureKeyVaultSecretReferenceResponseOutputWithContext(ctx context.Context) AzureKeyVaultSecretReferenceResponseOutput {
	return o
}

// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
func (o AzureKeyVaultSecretReferenceResponseOutput) SecretName() pulumi.MapOutput {
	return o.ApplyT(func(v AzureKeyVaultSecretReferenceResponse) map[string]interface{} { return v.SecretName }).(pulumi.MapOutput)
}

// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
func (o AzureKeyVaultSecretReferenceResponseOutput) SecretVersion() pulumi.MapOutput {
	return o.ApplyT(func(v AzureKeyVaultSecretReferenceResponse) map[string]interface{} { return v.SecretVersion }).(pulumi.MapOutput)
}

// The Azure Key Vault linked service reference.
func (o AzureKeyVaultSecretReferenceResponseOutput) Store() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureKeyVaultSecretReferenceResponse) LinkedServiceReferenceResponse { return v.Store }).(LinkedServiceReferenceResponseOutput)
}

// Type of the secret.
func (o AzureKeyVaultSecretReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureKeyVaultSecretReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure ML Web Service linked service.
type AzureMLLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The API key for accessing the Azure ML model endpoint.
	ApiKey interface{} `pulumi:"apiKey"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The Batch Execution REST URL for an Azure ML Web Service endpoint. Type: string (or Expression with resultType string).
	MlEndpoint map[string]interface{} `pulumi:"mlEndpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML web service. Type: string (or Expression with resultType string).
	ServicePrincipalId map[string]interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML web service.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant map[string]interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The Update Resource REST URL for an Azure ML Web Service endpoint. Type: string (or Expression with resultType string).
	UpdateResourceEndpoint map[string]interface{} `pulumi:"updateResourceEndpoint"`
}

// AzureMLLinkedServiceInput is an input type that accepts AzureMLLinkedServiceArgs and AzureMLLinkedServiceOutput values.
// You can construct a concrete instance of `AzureMLLinkedServiceInput` via:
//
//          AzureMLLinkedServiceArgs{...}
type AzureMLLinkedServiceInput interface {
	pulumi.Input

	ToAzureMLLinkedServiceOutput() AzureMLLinkedServiceOutput
	ToAzureMLLinkedServiceOutputWithContext(context.Context) AzureMLLinkedServiceOutput
}

// Azure ML Web Service linked service.
type AzureMLLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The API key for accessing the Azure ML model endpoint.
	ApiKey pulumi.Input `pulumi:"apiKey"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The Batch Execution REST URL for an Azure ML Web Service endpoint. Type: string (or Expression with resultType string).
	MlEndpoint pulumi.MapInput `pulumi:"mlEndpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML web service. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.MapInput `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML web service.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.MapInput `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The Update Resource REST URL for an Azure ML Web Service endpoint. Type: string (or Expression with resultType string).
	UpdateResourceEndpoint pulumi.MapInput `pulumi:"updateResourceEndpoint"`
}

func (AzureMLLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLLinkedService)(nil)).Elem()
}

func (i AzureMLLinkedServiceArgs) ToAzureMLLinkedServiceOutput() AzureMLLinkedServiceOutput {
	return i.ToAzureMLLinkedServiceOutputWithContext(context.Background())
}

func (i AzureMLLinkedServiceArgs) ToAzureMLLinkedServiceOutputWithContext(ctx context.Context) AzureMLLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMLLinkedServiceOutput)
}

// Azure ML Web Service linked service.
type AzureMLLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The API key for accessing the Azure ML model endpoint.
	ApiKey interface{} `pulumi:"apiKey"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The Batch Execution REST URL for an Azure ML Web Service endpoint. Type: string (or Expression with resultType string).
	MlEndpoint map[string]interface{} `pulumi:"mlEndpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML web service. Type: string (or Expression with resultType string).
	ServicePrincipalId map[string]interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML web service.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant map[string]interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The Update Resource REST URL for an Azure ML Web Service endpoint. Type: string (or Expression with resultType string).
	UpdateResourceEndpoint map[string]interface{} `pulumi:"updateResourceEndpoint"`
}

// Azure ML Web Service linked service.
type AzureMLLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureMLLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLLinkedServiceResponse)(nil)).Elem()
}

func (o AzureMLLinkedServiceResponseOutput) ToAzureMLLinkedServiceResponseOutput() AzureMLLinkedServiceResponseOutput {
	return o
}

func (o AzureMLLinkedServiceResponseOutput) ToAzureMLLinkedServiceResponseOutputWithContext(ctx context.Context) AzureMLLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureMLLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The API key for accessing the Azure ML model endpoint.
func (o AzureMLLinkedServiceResponseOutput) ApiKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) interface{} { return v.ApiKey }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureMLLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureMLLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The Batch Execution REST URL for an Azure ML Web Service endpoint. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceResponseOutput) MlEndpoint() pulumi.MapOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) map[string]interface{} { return v.MlEndpoint }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o AzureMLLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML web service. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceResponseOutput) ServicePrincipalId() pulumi.MapOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) map[string]interface{} { return v.ServicePrincipalId }).(pulumi.MapOutput)
}

// The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML web service.
func (o AzureMLLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceResponseOutput) Tenant() pulumi.MapOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) map[string]interface{} { return v.Tenant }).(pulumi.MapOutput)
}

// Type of linked service.
func (o AzureMLLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Update Resource REST URL for an Azure ML Web Service endpoint. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceResponseOutput) UpdateResourceEndpoint() pulumi.MapOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) map[string]interface{} { return v.UpdateResourceEndpoint }).(pulumi.MapOutput)
}

// Azure MySQL database linked service.
type AzureMySqlLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureMySqlLinkedServiceInput is an input type that accepts AzureMySqlLinkedServiceArgs and AzureMySqlLinkedServiceOutput values.
// You can construct a concrete instance of `AzureMySqlLinkedServiceInput` via:
//
//          AzureMySqlLinkedServiceArgs{...}
type AzureMySqlLinkedServiceInput interface {
	pulumi.Input

	ToAzureMySqlLinkedServiceOutput() AzureMySqlLinkedServiceOutput
	ToAzureMySqlLinkedServiceOutputWithContext(context.Context) AzureMySqlLinkedServiceOutput
}

// Azure MySQL database linked service.
type AzureMySqlLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.MapInput `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureMySqlLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlLinkedService)(nil)).Elem()
}

func (i AzureMySqlLinkedServiceArgs) ToAzureMySqlLinkedServiceOutput() AzureMySqlLinkedServiceOutput {
	return i.ToAzureMySqlLinkedServiceOutputWithContext(context.Background())
}

func (i AzureMySqlLinkedServiceArgs) ToAzureMySqlLinkedServiceOutputWithContext(ctx context.Context) AzureMySqlLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMySqlLinkedServiceOutput)
}

// Azure MySQL database linked service.
type AzureMySqlLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// Azure MySQL database linked service.
type AzureMySqlLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureMySqlLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlLinkedServiceResponse)(nil)).Elem()
}

func (o AzureMySqlLinkedServiceResponseOutput) ToAzureMySqlLinkedServiceResponseOutput() AzureMySqlLinkedServiceResponseOutput {
	return o
}

func (o AzureMySqlLinkedServiceResponseOutput) ToAzureMySqlLinkedServiceResponseOutputWithContext(ctx context.Context) AzureMySqlLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureMySqlLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AzureMySqlLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o AzureMySqlLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureMySqlLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureMySqlLinkedServiceResponseOutput) ConnectionString() pulumi.MapOutput {
	return o.ApplyT(func(v AzureMySqlLinkedServiceResponse) map[string]interface{} { return v.ConnectionString }).(pulumi.MapOutput)
}

// Linked service description.
func (o AzureMySqlLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureMySqlLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v AzureMySqlLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o AzureMySqlLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureMySqlLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o AzureMySqlLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMySqlLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure MySQL database dataset.
type AzureMySqlTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// The Azure MySQL database table name. Type: string (or Expression with resultType string).
	TableName map[string]interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureMySqlTableDatasetInput is an input type that accepts AzureMySqlTableDatasetArgs and AzureMySqlTableDatasetOutput values.
// You can construct a concrete instance of `AzureMySqlTableDatasetInput` via:
//
//          AzureMySqlTableDatasetArgs{...}
type AzureMySqlTableDatasetInput interface {
	pulumi.Input

	ToAzureMySqlTableDatasetOutput() AzureMySqlTableDatasetOutput
	ToAzureMySqlTableDatasetOutputWithContext(context.Context) AzureMySqlTableDatasetOutput
}

// The Azure MySQL database dataset.
type AzureMySqlTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// The Azure MySQL database table name. Type: string (or Expression with resultType string).
	TableName pulumi.MapInput `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureMySqlTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlTableDataset)(nil)).Elem()
}

func (i AzureMySqlTableDatasetArgs) ToAzureMySqlTableDatasetOutput() AzureMySqlTableDatasetOutput {
	return i.ToAzureMySqlTableDatasetOutputWithContext(context.Background())
}

func (i AzureMySqlTableDatasetArgs) ToAzureMySqlTableDatasetOutputWithContext(ctx context.Context) AzureMySqlTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMySqlTableDatasetOutput)
}

// The Azure MySQL database dataset.
type AzureMySqlTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// The Azure MySQL database table name. Type: string (or Expression with resultType string).
	TableName map[string]interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// The Azure MySQL database dataset.
type AzureMySqlTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureMySqlTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlTableDatasetResponse)(nil)).Elem()
}

func (o AzureMySqlTableDatasetResponseOutput) ToAzureMySqlTableDatasetResponseOutput() AzureMySqlTableDatasetResponseOutput {
	return o
}

func (o AzureMySqlTableDatasetResponseOutput) ToAzureMySqlTableDatasetResponseOutputWithContext(ctx context.Context) AzureMySqlTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureMySqlTableDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o AzureMySqlTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o AzureMySqlTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureMySqlTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureMySqlTableDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// The Azure MySQL database table name. Type: string (or Expression with resultType string).
func (o AzureMySqlTableDatasetResponseOutput) TableName() pulumi.MapOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) map[string]interface{} { return v.TableName }).(pulumi.MapOutput)
}

// Type of dataset.
func (o AzureMySqlTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure PostgreSQL linked service.
type AzurePostgreSqlLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzurePostgreSqlLinkedServiceInput is an input type that accepts AzurePostgreSqlLinkedServiceArgs and AzurePostgreSqlLinkedServiceOutput values.
// You can construct a concrete instance of `AzurePostgreSqlLinkedServiceInput` via:
//
//          AzurePostgreSqlLinkedServiceArgs{...}
type AzurePostgreSqlLinkedServiceInput interface {
	pulumi.Input

	ToAzurePostgreSqlLinkedServiceOutput() AzurePostgreSqlLinkedServiceOutput
	ToAzurePostgreSqlLinkedServiceOutputWithContext(context.Context) AzurePostgreSqlLinkedServiceOutput
}

// Azure PostgreSQL linked service.
type AzurePostgreSqlLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.MapInput `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzurePostgreSqlLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlLinkedService)(nil)).Elem()
}

func (i AzurePostgreSqlLinkedServiceArgs) ToAzurePostgreSqlLinkedServiceOutput() AzurePostgreSqlLinkedServiceOutput {
	return i.ToAzurePostgreSqlLinkedServiceOutputWithContext(context.Background())
}

func (i AzurePostgreSqlLinkedServiceArgs) ToAzurePostgreSqlLinkedServiceOutputWithContext(ctx context.Context) AzurePostgreSqlLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzurePostgreSqlLinkedServiceOutput)
}

// Azure PostgreSQL linked service.
type AzurePostgreSqlLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// Azure PostgreSQL linked service.
type AzurePostgreSqlLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzurePostgreSqlLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlLinkedServiceResponse)(nil)).Elem()
}

func (o AzurePostgreSqlLinkedServiceResponseOutput) ToAzurePostgreSqlLinkedServiceResponseOutput() AzurePostgreSqlLinkedServiceResponseOutput {
	return o
}

func (o AzurePostgreSqlLinkedServiceResponseOutput) ToAzurePostgreSqlLinkedServiceResponseOutputWithContext(ctx context.Context) AzurePostgreSqlLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzurePostgreSqlLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o AzurePostgreSqlLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzurePostgreSqlLinkedServiceResponseOutput) ConnectionString() pulumi.MapOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedServiceResponse) map[string]interface{} { return v.ConnectionString }).(pulumi.MapOutput)
}

// Linked service description.
func (o AzurePostgreSqlLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzurePostgreSqlLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o AzurePostgreSqlLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o AzurePostgreSqlLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure PostgreSQL dataset.
type AzurePostgreSqlTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzurePostgreSqlTableDatasetInput is an input type that accepts AzurePostgreSqlTableDatasetArgs and AzurePostgreSqlTableDatasetOutput values.
// You can construct a concrete instance of `AzurePostgreSqlTableDatasetInput` via:
//
//          AzurePostgreSqlTableDatasetArgs{...}
type AzurePostgreSqlTableDatasetInput interface {
	pulumi.Input

	ToAzurePostgreSqlTableDatasetOutput() AzurePostgreSqlTableDatasetOutput
	ToAzurePostgreSqlTableDatasetOutputWithContext(context.Context) AzurePostgreSqlTableDatasetOutput
}

// Azure PostgreSQL dataset.
type AzurePostgreSqlTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzurePostgreSqlTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlTableDataset)(nil)).Elem()
}

func (i AzurePostgreSqlTableDatasetArgs) ToAzurePostgreSqlTableDatasetOutput() AzurePostgreSqlTableDatasetOutput {
	return i.ToAzurePostgreSqlTableDatasetOutputWithContext(context.Background())
}

func (i AzurePostgreSqlTableDatasetArgs) ToAzurePostgreSqlTableDatasetOutputWithContext(ctx context.Context) AzurePostgreSqlTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzurePostgreSqlTableDatasetOutput)
}

// Azure PostgreSQL dataset.
type AzurePostgreSqlTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Azure PostgreSQL dataset.
type AzurePostgreSqlTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzurePostgreSqlTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlTableDatasetResponse)(nil)).Elem()
}

func (o AzurePostgreSqlTableDatasetResponseOutput) ToAzurePostgreSqlTableDatasetResponseOutput() AzurePostgreSqlTableDatasetResponseOutput {
	return o
}

func (o AzurePostgreSqlTableDatasetResponseOutput) ToAzurePostgreSqlTableDatasetResponseOutputWithContext(ctx context.Context) AzurePostgreSqlTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzurePostgreSqlTableDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o AzurePostgreSqlTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o AzurePostgreSqlTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzurePostgreSqlTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzurePostgreSqlTableDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o AzurePostgreSqlTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure Search Index.
type AzureSearchIndexDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the Azure Search Index. Type: string (or Expression with resultType string).
	IndexName map[string]interface{} `pulumi:"indexName"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureSearchIndexDatasetInput is an input type that accepts AzureSearchIndexDatasetArgs and AzureSearchIndexDatasetOutput values.
// You can construct a concrete instance of `AzureSearchIndexDatasetInput` via:
//
//          AzureSearchIndexDatasetArgs{...}
type AzureSearchIndexDatasetInput interface {
	pulumi.Input

	ToAzureSearchIndexDatasetOutput() AzureSearchIndexDatasetOutput
	ToAzureSearchIndexDatasetOutputWithContext(context.Context) AzureSearchIndexDatasetOutput
}

// The Azure Search Index.
type AzureSearchIndexDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the Azure Search Index. Type: string (or Expression with resultType string).
	IndexName pulumi.MapInput `pulumi:"indexName"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSearchIndexDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSearchIndexDataset)(nil)).Elem()
}

func (i AzureSearchIndexDatasetArgs) ToAzureSearchIndexDatasetOutput() AzureSearchIndexDatasetOutput {
	return i.ToAzureSearchIndexDatasetOutputWithContext(context.Background())
}

func (i AzureSearchIndexDatasetArgs) ToAzureSearchIndexDatasetOutputWithContext(ctx context.Context) AzureSearchIndexDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSearchIndexDatasetOutput)
}

// The Azure Search Index.
type AzureSearchIndexDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the Azure Search Index. Type: string (or Expression with resultType string).
	IndexName map[string]interface{} `pulumi:"indexName"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// The Azure Search Index.
type AzureSearchIndexDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureSearchIndexDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSearchIndexDatasetResponse)(nil)).Elem()
}

func (o AzureSearchIndexDatasetResponseOutput) ToAzureSearchIndexDatasetResponseOutput() AzureSearchIndexDatasetResponseOutput {
	return o
}

func (o AzureSearchIndexDatasetResponseOutput) ToAzureSearchIndexDatasetResponseOutputWithContext(ctx context.Context) AzureSearchIndexDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureSearchIndexDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o AzureSearchIndexDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the Azure Search Index. Type: string (or Expression with resultType string).
func (o AzureSearchIndexDatasetResponseOutput) IndexName() pulumi.MapOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) map[string]interface{} { return v.IndexName }).(pulumi.MapOutput)
}

// Linked service reference.
func (o AzureSearchIndexDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureSearchIndexDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureSearchIndexDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o AzureSearchIndexDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Windows Azure Search Service.
type AzureSearchLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Admin Key for Azure Search service
	Key interface{} `pulumi:"key"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// URL for Azure Search service. Type: string (or Expression with resultType string).
	Url map[string]interface{} `pulumi:"url"`
}

// AzureSearchLinkedServiceInput is an input type that accepts AzureSearchLinkedServiceArgs and AzureSearchLinkedServiceOutput values.
// You can construct a concrete instance of `AzureSearchLinkedServiceInput` via:
//
//          AzureSearchLinkedServiceArgs{...}
type AzureSearchLinkedServiceInput interface {
	pulumi.Input

	ToAzureSearchLinkedServiceOutput() AzureSearchLinkedServiceOutput
	ToAzureSearchLinkedServiceOutputWithContext(context.Context) AzureSearchLinkedServiceOutput
}

// Linked service for Windows Azure Search Service.
type AzureSearchLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Admin Key for Azure Search service
	Key pulumi.Input `pulumi:"key"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// URL for Azure Search service. Type: string (or Expression with resultType string).
	Url pulumi.MapInput `pulumi:"url"`
}

func (AzureSearchLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSearchLinkedService)(nil)).Elem()
}

func (i AzureSearchLinkedServiceArgs) ToAzureSearchLinkedServiceOutput() AzureSearchLinkedServiceOutput {
	return i.ToAzureSearchLinkedServiceOutputWithContext(context.Background())
}

func (i AzureSearchLinkedServiceArgs) ToAzureSearchLinkedServiceOutputWithContext(ctx context.Context) AzureSearchLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSearchLinkedServiceOutput)
}

// Linked service for Windows Azure Search Service.
type AzureSearchLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Admin Key for Azure Search service
	Key interface{} `pulumi:"key"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// URL for Azure Search service. Type: string (or Expression with resultType string).
	Url map[string]interface{} `pulumi:"url"`
}

// Linked service for Windows Azure Search Service.
type AzureSearchLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureSearchLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSearchLinkedServiceResponse)(nil)).Elem()
}

func (o AzureSearchLinkedServiceResponseOutput) ToAzureSearchLinkedServiceResponseOutput() AzureSearchLinkedServiceResponseOutput {
	return o
}

func (o AzureSearchLinkedServiceResponseOutput) ToAzureSearchLinkedServiceResponseOutputWithContext(ctx context.Context) AzureSearchLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureSearchLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o AzureSearchLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureSearchLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureSearchLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Admin Key for Azure Search service
func (o AzureSearchLinkedServiceResponseOutput) Key() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) interface{} { return v.Key }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureSearchLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o AzureSearchLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// URL for Azure Search service. Type: string (or Expression with resultType string).
func (o AzureSearchLinkedServiceResponseOutput) Url() pulumi.MapOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) map[string]interface{} { return v.Url }).(pulumi.MapOutput)
}

// Azure SQL Data Warehouse linked service.
type AzureSqlDWLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId map[string]interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant map[string]interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureSqlDWLinkedServiceInput is an input type that accepts AzureSqlDWLinkedServiceArgs and AzureSqlDWLinkedServiceOutput values.
// You can construct a concrete instance of `AzureSqlDWLinkedServiceInput` via:
//
//          AzureSqlDWLinkedServiceArgs{...}
type AzureSqlDWLinkedServiceInput interface {
	pulumi.Input

	ToAzureSqlDWLinkedServiceOutput() AzureSqlDWLinkedServiceOutput
	ToAzureSqlDWLinkedServiceOutputWithContext(context.Context) AzureSqlDWLinkedServiceOutput
}

// Azure SQL Data Warehouse linked service.
type AzureSqlDWLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.MapInput `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.MapInput `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.MapInput `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSqlDWLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDWLinkedService)(nil)).Elem()
}

func (i AzureSqlDWLinkedServiceArgs) ToAzureSqlDWLinkedServiceOutput() AzureSqlDWLinkedServiceOutput {
	return i.ToAzureSqlDWLinkedServiceOutputWithContext(context.Background())
}

func (i AzureSqlDWLinkedServiceArgs) ToAzureSqlDWLinkedServiceOutputWithContext(ctx context.Context) AzureSqlDWLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlDWLinkedServiceOutput)
}

// Azure SQL Data Warehouse linked service.
type AzureSqlDWLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId map[string]interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant map[string]interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// Azure SQL Data Warehouse linked service.
type AzureSqlDWLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureSqlDWLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDWLinkedServiceResponse)(nil)).Elem()
}

func (o AzureSqlDWLinkedServiceResponseOutput) ToAzureSqlDWLinkedServiceResponseOutput() AzureSqlDWLinkedServiceResponseOutput {
	return o
}

func (o AzureSqlDWLinkedServiceResponseOutput) ToAzureSqlDWLinkedServiceResponseOutputWithContext(ctx context.Context) AzureSqlDWLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureSqlDWLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o AzureSqlDWLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureSqlDWLinkedServiceResponseOutput) ConnectionString() pulumi.MapOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) map[string]interface{} { return v.ConnectionString }).(pulumi.MapOutput)
}

// Linked service description.
func (o AzureSqlDWLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureSqlDWLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o AzureSqlDWLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
func (o AzureSqlDWLinkedServiceResponseOutput) ServicePrincipalId() pulumi.MapOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) map[string]interface{} { return v.ServicePrincipalId }).(pulumi.MapOutput)
}

// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
func (o AzureSqlDWLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureSqlDWLinkedServiceResponseOutput) Tenant() pulumi.MapOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) map[string]interface{} { return v.Tenant }).(pulumi.MapOutput)
}

// Type of linked service.
func (o AzureSqlDWLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure SQL Data Warehouse dataset.
type AzureSqlDWTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	TableName map[string]interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureSqlDWTableDatasetInput is an input type that accepts AzureSqlDWTableDatasetArgs and AzureSqlDWTableDatasetOutput values.
// You can construct a concrete instance of `AzureSqlDWTableDatasetInput` via:
//
//          AzureSqlDWTableDatasetArgs{...}
type AzureSqlDWTableDatasetInput interface {
	pulumi.Input

	ToAzureSqlDWTableDatasetOutput() AzureSqlDWTableDatasetOutput
	ToAzureSqlDWTableDatasetOutputWithContext(context.Context) AzureSqlDWTableDatasetOutput
}

// The Azure SQL Data Warehouse dataset.
type AzureSqlDWTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	TableName pulumi.MapInput `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSqlDWTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDWTableDataset)(nil)).Elem()
}

func (i AzureSqlDWTableDatasetArgs) ToAzureSqlDWTableDatasetOutput() AzureSqlDWTableDatasetOutput {
	return i.ToAzureSqlDWTableDatasetOutputWithContext(context.Background())
}

func (i AzureSqlDWTableDatasetArgs) ToAzureSqlDWTableDatasetOutputWithContext(ctx context.Context) AzureSqlDWTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlDWTableDatasetOutput)
}

// The Azure SQL Data Warehouse dataset.
type AzureSqlDWTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	TableName map[string]interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// The Azure SQL Data Warehouse dataset.
type AzureSqlDWTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureSqlDWTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDWTableDatasetResponse)(nil)).Elem()
}

func (o AzureSqlDWTableDatasetResponseOutput) ToAzureSqlDWTableDatasetResponseOutput() AzureSqlDWTableDatasetResponseOutput {
	return o
}

func (o AzureSqlDWTableDatasetResponseOutput) ToAzureSqlDWTableDatasetResponseOutputWithContext(ctx context.Context) AzureSqlDWTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureSqlDWTableDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o AzureSqlDWTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o AzureSqlDWTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureSqlDWTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureSqlDWTableDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
func (o AzureSqlDWTableDatasetResponseOutput) TableName() pulumi.MapOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) map[string]interface{} { return v.TableName }).(pulumi.MapOutput)
}

// Type of dataset.
func (o AzureSqlDWTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Microsoft Azure SQL Database linked service.
type AzureSqlDatabaseLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string).
	ServicePrincipalId map[string]interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Database.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant map[string]interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureSqlDatabaseLinkedServiceInput is an input type that accepts AzureSqlDatabaseLinkedServiceArgs and AzureSqlDatabaseLinkedServiceOutput values.
// You can construct a concrete instance of `AzureSqlDatabaseLinkedServiceInput` via:
//
//          AzureSqlDatabaseLinkedServiceArgs{...}
type AzureSqlDatabaseLinkedServiceInput interface {
	pulumi.Input

	ToAzureSqlDatabaseLinkedServiceOutput() AzureSqlDatabaseLinkedServiceOutput
	ToAzureSqlDatabaseLinkedServiceOutputWithContext(context.Context) AzureSqlDatabaseLinkedServiceOutput
}

// Microsoft Azure SQL Database linked service.
type AzureSqlDatabaseLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.MapInput `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.MapInput `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Database.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.MapInput `pulumi:"tenant"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSqlDatabaseLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDatabaseLinkedService)(nil)).Elem()
}

func (i AzureSqlDatabaseLinkedServiceArgs) ToAzureSqlDatabaseLinkedServiceOutput() AzureSqlDatabaseLinkedServiceOutput {
	return i.ToAzureSqlDatabaseLinkedServiceOutputWithContext(context.Background())
}

func (i AzureSqlDatabaseLinkedServiceArgs) ToAzureSqlDatabaseLinkedServiceOutputWithContext(ctx context.Context) AzureSqlDatabaseLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlDatabaseLinkedServiceOutput)
}

// Microsoft Azure SQL Database linked service.
type AzureSqlDatabaseLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string).
	ServicePrincipalId map[string]interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Database.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant map[string]interface{} `pulumi:"tenant"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// Microsoft Azure SQL Database linked service.
type AzureSqlDatabaseLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureSqlDatabaseLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDatabaseLinkedServiceResponse)(nil)).Elem()
}

func (o AzureSqlDatabaseLinkedServiceResponseOutput) ToAzureSqlDatabaseLinkedServiceResponseOutput() AzureSqlDatabaseLinkedServiceResponseOutput {
	return o
}

func (o AzureSqlDatabaseLinkedServiceResponseOutput) ToAzureSqlDatabaseLinkedServiceResponseOutputWithContext(ctx context.Context) AzureSqlDatabaseLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) ConnectionString() pulumi.MapOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) map[string]interface{} { return v.ConnectionString }).(pulumi.MapOutput)
}

// Linked service description.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureSqlDatabaseLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string).
func (o AzureSqlDatabaseLinkedServiceResponseOutput) ServicePrincipalId() pulumi.MapOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) map[string]interface{} { return v.ServicePrincipalId }).(pulumi.MapOutput)
}

// The key of the service principal used to authenticate against Azure SQL Database.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureSqlDatabaseLinkedServiceResponseOutput) Tenant() pulumi.MapOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) map[string]interface{} { return v.Tenant }).(pulumi.MapOutput)
}

// Type of linked service.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure SQL Server database dataset.
type AzureSqlTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// The table name of the Azure SQL database. Type: string (or Expression with resultType string).
	TableName map[string]interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureSqlTableDatasetInput is an input type that accepts AzureSqlTableDatasetArgs and AzureSqlTableDatasetOutput values.
// You can construct a concrete instance of `AzureSqlTableDatasetInput` via:
//
//          AzureSqlTableDatasetArgs{...}
type AzureSqlTableDatasetInput interface {
	pulumi.Input

	ToAzureSqlTableDatasetOutput() AzureSqlTableDatasetOutput
	ToAzureSqlTableDatasetOutputWithContext(context.Context) AzureSqlTableDatasetOutput
}

// The Azure SQL Server database dataset.
type AzureSqlTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// The table name of the Azure SQL database. Type: string (or Expression with resultType string).
	TableName pulumi.MapInput `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSqlTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlTableDataset)(nil)).Elem()
}

func (i AzureSqlTableDatasetArgs) ToAzureSqlTableDatasetOutput() AzureSqlTableDatasetOutput {
	return i.ToAzureSqlTableDatasetOutputWithContext(context.Background())
}

func (i AzureSqlTableDatasetArgs) ToAzureSqlTableDatasetOutputWithContext(ctx context.Context) AzureSqlTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlTableDatasetOutput)
}

// The Azure SQL Server database dataset.
type AzureSqlTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// The table name of the Azure SQL database. Type: string (or Expression with resultType string).
	TableName map[string]interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// The Azure SQL Server database dataset.
type AzureSqlTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureSqlTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlTableDatasetResponse)(nil)).Elem()
}

func (o AzureSqlTableDatasetResponseOutput) ToAzureSqlTableDatasetResponseOutput() AzureSqlTableDatasetResponseOutput {
	return o
}

func (o AzureSqlTableDatasetResponseOutput) ToAzureSqlTableDatasetResponseOutputWithContext(ctx context.Context) AzureSqlTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureSqlTableDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o AzureSqlTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o AzureSqlTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureSqlTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureSqlTableDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// The table name of the Azure SQL database. Type: string (or Expression with resultType string).
func (o AzureSqlTableDatasetResponseOutput) TableName() pulumi.MapOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) map[string]interface{} { return v.TableName }).(pulumi.MapOutput)
}

// Type of dataset.
func (o AzureSqlTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The storage account linked service.
type AzureStorageLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property.
	SasUri interface{} `pulumi:"sasUri"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// AzureStorageLinkedServiceInput is an input type that accepts AzureStorageLinkedServiceArgs and AzureStorageLinkedServiceOutput values.
// You can construct a concrete instance of `AzureStorageLinkedServiceInput` via:
//
//          AzureStorageLinkedServiceArgs{...}
type AzureStorageLinkedServiceInput interface {
	pulumi.Input

	ToAzureStorageLinkedServiceOutput() AzureStorageLinkedServiceOutput
	ToAzureStorageLinkedServiceOutputWithContext(context.Context) AzureStorageLinkedServiceOutput
}

// The storage account linked service.
type AzureStorageLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.MapInput `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property.
	SasUri pulumi.Input `pulumi:"sasUri"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureStorageLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStorageLinkedService)(nil)).Elem()
}

func (i AzureStorageLinkedServiceArgs) ToAzureStorageLinkedServiceOutput() AzureStorageLinkedServiceOutput {
	return i.ToAzureStorageLinkedServiceOutputWithContext(context.Background())
}

func (i AzureStorageLinkedServiceArgs) ToAzureStorageLinkedServiceOutputWithContext(ctx context.Context) AzureStorageLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStorageLinkedServiceOutput)
}

// The storage account linked service.
type AzureStorageLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property.
	SasUri interface{} `pulumi:"sasUri"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// The storage account linked service.
type AzureStorageLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureStorageLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStorageLinkedServiceResponse)(nil)).Elem()
}

func (o AzureStorageLinkedServiceResponseOutput) ToAzureStorageLinkedServiceResponseOutput() AzureStorageLinkedServiceResponseOutput {
	return o
}

func (o AzureStorageLinkedServiceResponseOutput) ToAzureStorageLinkedServiceResponseOutputWithContext(ctx context.Context) AzureStorageLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureStorageLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o AzureStorageLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureStorageLinkedServiceResponseOutput) ConnectionString() pulumi.MapOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) map[string]interface{} { return v.ConnectionString }).(pulumi.MapOutput)
}

// Linked service description.
func (o AzureStorageLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o AzureStorageLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o AzureStorageLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property.
func (o AzureStorageLinkedServiceResponseOutput) SasUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) interface{} { return v.SasUri }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o AzureStorageLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure Table storage dataset.
type AzureTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// The table name of the Azure Table storage. Type: string (or Expression with resultType string).
	TableName map[string]interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// AzureTableDatasetInput is an input type that accepts AzureTableDatasetArgs and AzureTableDatasetOutput values.
// You can construct a concrete instance of `AzureTableDatasetInput` via:
//
//          AzureTableDatasetArgs{...}
type AzureTableDatasetInput interface {
	pulumi.Input

	ToAzureTableDatasetOutput() AzureTableDatasetOutput
	ToAzureTableDatasetOutputWithContext(context.Context) AzureTableDatasetOutput
}

// The Azure Table storage dataset.
type AzureTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// The table name of the Azure Table storage. Type: string (or Expression with resultType string).
	TableName pulumi.MapInput `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableDataset)(nil)).Elem()
}

func (i AzureTableDatasetArgs) ToAzureTableDatasetOutput() AzureTableDatasetOutput {
	return i.ToAzureTableDatasetOutputWithContext(context.Background())
}

func (i AzureTableDatasetArgs) ToAzureTableDatasetOutputWithContext(ctx context.Context) AzureTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureTableDatasetOutput)
}

// The Azure Table storage dataset.
type AzureTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// The table name of the Azure Table storage. Type: string (or Expression with resultType string).
	TableName map[string]interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// The Azure Table storage dataset.
type AzureTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableDatasetResponse)(nil)).Elem()
}

func (o AzureTableDatasetResponseOutput) ToAzureTableDatasetResponseOutput() AzureTableDatasetResponseOutput {
	return o
}

func (o AzureTableDatasetResponseOutput) ToAzureTableDatasetResponseOutputWithContext(ctx context.Context) AzureTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureTableDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o AzureTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o AzureTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureTableDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// The table name of the Azure Table storage. Type: string (or Expression with resultType string).
func (o AzureTableDatasetResponseOutput) TableName() pulumi.MapOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) map[string]interface{} { return v.TableName }).(pulumi.MapOutput)
}

// Type of dataset.
func (o AzureTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Cassandra data source.
type CassandraLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection. Type: string (or Expression with resultType string).
	AuthenticationType map[string]interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Host name for connection. Type: string (or Expression with resultType string).
	Host map[string]interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// The port for the connection. Type: integer (or Expression with resultType integer).
	Port map[string]interface{} `pulumi:"port"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username map[string]interface{} `pulumi:"username"`
}

// CassandraLinkedServiceInput is an input type that accepts CassandraLinkedServiceArgs and CassandraLinkedServiceOutput values.
// You can construct a concrete instance of `CassandraLinkedServiceInput` via:
//
//          CassandraLinkedServiceArgs{...}
type CassandraLinkedServiceInput interface {
	pulumi.Input

	ToCassandraLinkedServiceOutput() CassandraLinkedServiceOutput
	ToCassandraLinkedServiceOutputWithContext(context.Context) CassandraLinkedServiceOutput
}

// Linked service for Cassandra data source.
type CassandraLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// AuthenticationType to be used for connection. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.MapInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Host name for connection. Type: string (or Expression with resultType string).
	Host pulumi.MapInput `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for authentication.
	Password pulumi.Input `pulumi:"password"`
	// The port for the connection. Type: integer (or Expression with resultType integer).
	Port pulumi.MapInput `pulumi:"port"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username pulumi.MapInput `pulumi:"username"`
}

func (CassandraLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraLinkedService)(nil)).Elem()
}

func (i CassandraLinkedServiceArgs) ToCassandraLinkedServiceOutput() CassandraLinkedServiceOutput {
	return i.ToCassandraLinkedServiceOutputWithContext(context.Background())
}

func (i CassandraLinkedServiceArgs) ToCassandraLinkedServiceOutputWithContext(ctx context.Context) CassandraLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraLinkedServiceOutput)
}

// Linked service for Cassandra data source.
type CassandraLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection. Type: string (or Expression with resultType string).
	AuthenticationType map[string]interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Host name for connection. Type: string (or Expression with resultType string).
	Host map[string]interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// The port for the connection. Type: integer (or Expression with resultType integer).
	Port map[string]interface{} `pulumi:"port"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username map[string]interface{} `pulumi:"username"`
}

// Linked service for Cassandra data source.
type CassandraLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (CassandraLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraLinkedServiceResponse)(nil)).Elem()
}

func (o CassandraLinkedServiceResponseOutput) ToCassandraLinkedServiceResponseOutput() CassandraLinkedServiceResponseOutput {
	return o
}

func (o CassandraLinkedServiceResponseOutput) ToCassandraLinkedServiceResponseOutputWithContext(ctx context.Context) CassandraLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CassandraLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// AuthenticationType to be used for connection. Type: string (or Expression with resultType string).
func (o CassandraLinkedServiceResponseOutput) AuthenticationType() pulumi.MapOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) map[string]interface{} { return v.AuthenticationType }).(pulumi.MapOutput)
}

// The integration runtime reference.
func (o CassandraLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o CassandraLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o CassandraLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Host name for connection. Type: string (or Expression with resultType string).
func (o CassandraLinkedServiceResponseOutput) Host() pulumi.MapOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) map[string]interface{} { return v.Host }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o CassandraLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for authentication.
func (o CassandraLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The port for the connection. Type: integer (or Expression with resultType integer).
func (o CassandraLinkedServiceResponseOutput) Port() pulumi.MapOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) map[string]interface{} { return v.Port }).(pulumi.MapOutput)
}

// Type of linked service.
func (o CassandraLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. Type: string (or Expression with resultType string).
func (o CassandraLinkedServiceResponseOutput) Username() pulumi.MapOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) map[string]interface{} { return v.Username }).(pulumi.MapOutput)
}

// The Cassandra database dataset.
type CassandraTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The keyspace of the Cassandra database. Type: string (or Expression with resultType string).
	Keyspace map[string]interface{} `pulumi:"keyspace"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// The table name of the Cassandra database. Type: string (or Expression with resultType string).
	TableName map[string]interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// CassandraTableDatasetInput is an input type that accepts CassandraTableDatasetArgs and CassandraTableDatasetOutput values.
// You can construct a concrete instance of `CassandraTableDatasetInput` via:
//
//          CassandraTableDatasetArgs{...}
type CassandraTableDatasetInput interface {
	pulumi.Input

	ToCassandraTableDatasetOutput() CassandraTableDatasetOutput
	ToCassandraTableDatasetOutputWithContext(context.Context) CassandraTableDatasetOutput
}

// The Cassandra database dataset.
type CassandraTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The keyspace of the Cassandra database. Type: string (or Expression with resultType string).
	Keyspace pulumi.MapInput `pulumi:"keyspace"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// The table name of the Cassandra database. Type: string (or Expression with resultType string).
	TableName pulumi.MapInput `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CassandraTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraTableDataset)(nil)).Elem()
}

func (i CassandraTableDatasetArgs) ToCassandraTableDatasetOutput() CassandraTableDatasetOutput {
	return i.ToCassandraTableDatasetOutputWithContext(context.Background())
}

func (i CassandraTableDatasetArgs) ToCassandraTableDatasetOutputWithContext(ctx context.Context) CassandraTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraTableDatasetOutput)
}

// The Cassandra database dataset.
type CassandraTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The keyspace of the Cassandra database. Type: string (or Expression with resultType string).
	Keyspace map[string]interface{} `pulumi:"keyspace"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// The table name of the Cassandra database. Type: string (or Expression with resultType string).
	TableName map[string]interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// The Cassandra database dataset.
type CassandraTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (CassandraTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraTableDatasetResponse)(nil)).Elem()
}

func (o CassandraTableDatasetResponseOutput) ToCassandraTableDatasetResponseOutput() CassandraTableDatasetResponseOutput {
	return o
}

func (o CassandraTableDatasetResponseOutput) ToCassandraTableDatasetResponseOutputWithContext(ctx context.Context) CassandraTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CassandraTableDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o CassandraTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The keyspace of the Cassandra database. Type: string (or Expression with resultType string).
func (o CassandraTableDatasetResponseOutput) Keyspace() pulumi.MapOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) map[string]interface{} { return v.Keyspace }).(pulumi.MapOutput)
}

// Linked service reference.
func (o CassandraTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o CassandraTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CassandraTableDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// The table name of the Cassandra database. Type: string (or Expression with resultType string).
func (o CassandraTableDatasetResponseOutput) TableName() pulumi.MapOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) map[string]interface{} { return v.TableName }).(pulumi.MapOutput)
}

// Type of dataset.
func (o CassandraTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Concur Service linked service.
type ConcurLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Application client_id supplied by Concur App Management.
	ClientId map[string]interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Concur Service.
	Username map[string]interface{} `pulumi:"username"`
}

// ConcurLinkedServiceInput is an input type that accepts ConcurLinkedServiceArgs and ConcurLinkedServiceOutput values.
// You can construct a concrete instance of `ConcurLinkedServiceInput` via:
//
//          ConcurLinkedServiceArgs{...}
type ConcurLinkedServiceInput interface {
	pulumi.Input

	ToConcurLinkedServiceOutput() ConcurLinkedServiceOutput
	ToConcurLinkedServiceOutputWithContext(context.Context) ConcurLinkedServiceOutput
}

// Concur Service linked service.
type ConcurLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Application client_id supplied by Concur App Management.
	ClientId pulumi.MapInput `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.MapInput `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.MapInput `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.MapInput `pulumi:"usePeerVerification"`
	// The user name that you use to access Concur Service.
	Username pulumi.MapInput `pulumi:"username"`
}

func (ConcurLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurLinkedService)(nil)).Elem()
}

func (i ConcurLinkedServiceArgs) ToConcurLinkedServiceOutput() ConcurLinkedServiceOutput {
	return i.ToConcurLinkedServiceOutputWithContext(context.Background())
}

func (i ConcurLinkedServiceArgs) ToConcurLinkedServiceOutputWithContext(ctx context.Context) ConcurLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConcurLinkedServiceOutput)
}

// Concur Service linked service.
type ConcurLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Application client_id supplied by Concur App Management.
	ClientId map[string]interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Concur Service.
	Username map[string]interface{} `pulumi:"username"`
}

// Concur Service linked service.
type ConcurLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (ConcurLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurLinkedServiceResponse)(nil)).Elem()
}

func (o ConcurLinkedServiceResponseOutput) ToConcurLinkedServiceResponseOutput() ConcurLinkedServiceResponseOutput {
	return o
}

func (o ConcurLinkedServiceResponseOutput) ToConcurLinkedServiceResponseOutputWithContext(ctx context.Context) ConcurLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ConcurLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Application client_id supplied by Concur App Management.
func (o ConcurLinkedServiceResponseOutput) ClientId() pulumi.MapOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) map[string]interface{} { return v.ClientId }).(pulumi.MapOutput)
}

// The integration runtime reference.
func (o ConcurLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o ConcurLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o ConcurLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o ConcurLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name that you provided in the username field.
func (o ConcurLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o ConcurLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o ConcurLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.MapOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) map[string]interface{} { return v.UseEncryptedEndpoints }).(pulumi.MapOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o ConcurLinkedServiceResponseOutput) UseHostVerification() pulumi.MapOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) map[string]interface{} { return v.UseHostVerification }).(pulumi.MapOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o ConcurLinkedServiceResponseOutput) UsePeerVerification() pulumi.MapOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) map[string]interface{} { return v.UsePeerVerification }).(pulumi.MapOutput)
}

// The user name that you use to access Concur Service.
func (o ConcurLinkedServiceResponseOutput) Username() pulumi.MapOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) map[string]interface{} { return v.Username }).(pulumi.MapOutput)
}

// Concur Service dataset.
type ConcurObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ConcurObjectDatasetInput is an input type that accepts ConcurObjectDatasetArgs and ConcurObjectDatasetOutput values.
// You can construct a concrete instance of `ConcurObjectDatasetInput` via:
//
//          ConcurObjectDatasetArgs{...}
type ConcurObjectDatasetInput interface {
	pulumi.Input

	ToConcurObjectDatasetOutput() ConcurObjectDatasetOutput
	ToConcurObjectDatasetOutputWithContext(context.Context) ConcurObjectDatasetOutput
}

// Concur Service dataset.
type ConcurObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ConcurObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurObjectDataset)(nil)).Elem()
}

func (i ConcurObjectDatasetArgs) ToConcurObjectDatasetOutput() ConcurObjectDatasetOutput {
	return i.ToConcurObjectDatasetOutputWithContext(context.Background())
}

func (i ConcurObjectDatasetArgs) ToConcurObjectDatasetOutputWithContext(ctx context.Context) ConcurObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConcurObjectDatasetOutput)
}

// Concur Service dataset.
type ConcurObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Concur Service dataset.
type ConcurObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (ConcurObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurObjectDatasetResponse)(nil)).Elem()
}

func (o ConcurObjectDatasetResponseOutput) ToConcurObjectDatasetResponseOutput() ConcurObjectDatasetResponseOutput {
	return o
}

func (o ConcurObjectDatasetResponseOutput) ToConcurObjectDatasetResponseOutputWithContext(ctx context.Context) ConcurObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ConcurObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o ConcurObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o ConcurObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o ConcurObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ConcurObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o ConcurObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Base class for all control activities like IfCondition, ForEach , Until.
type ControlActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	Type string `pulumi:"type"`
}

// ControlActivityInput is an input type that accepts ControlActivityArgs and ControlActivityOutput values.
// You can construct a concrete instance of `ControlActivityInput` via:
//
//          ControlActivityArgs{...}
type ControlActivityInput interface {
	pulumi.Input

	ToControlActivityOutput() ControlActivityOutput
	ToControlActivityOutputWithContext(context.Context) ControlActivityOutput
}

// Base class for all control activities like IfCondition, ForEach , Until.
type ControlActivityArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of activity.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ControlActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlActivity)(nil)).Elem()
}

func (i ControlActivityArgs) ToControlActivityOutput() ControlActivityOutput {
	return i.ToControlActivityOutputWithContext(context.Background())
}

func (i ControlActivityArgs) ToControlActivityOutputWithContext(ctx context.Context) ControlActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlActivityOutput)
}

// Base class for all control activities like IfCondition, ForEach , Until.
type ControlActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	Type string `pulumi:"type"`
}

// Base class for all control activities like IfCondition, ForEach , Until.
type ControlActivityResponseOutput struct{ *pulumi.OutputState }

func (ControlActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlActivityResponse)(nil)).Elem()
}

func (o ControlActivityResponseOutput) ToControlActivityResponseOutput() ControlActivityResponseOutput {
	return o
}

func (o ControlActivityResponseOutput) ToControlActivityResponseOutputWithContext(ctx context.Context) ControlActivityResponseOutput {
	return o
}

// Activity depends on condition.
func (o ControlActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v ControlActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o ControlActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Activity name.
func (o ControlActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ControlActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of activity.
func (o ControlActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ControlActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Microsoft Azure Cosmos Database (CosmosDB) linked service.
type CosmosDbLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// CosmosDbLinkedServiceInput is an input type that accepts CosmosDbLinkedServiceArgs and CosmosDbLinkedServiceOutput values.
// You can construct a concrete instance of `CosmosDbLinkedServiceInput` via:
//
//          CosmosDbLinkedServiceArgs{...}
type CosmosDbLinkedServiceInput interface {
	pulumi.Input

	ToCosmosDbLinkedServiceOutput() CosmosDbLinkedServiceOutput
	ToCosmosDbLinkedServiceOutputWithContext(context.Context) CosmosDbLinkedServiceOutput
}

// Microsoft Azure Cosmos Database (CosmosDB) linked service.
type CosmosDbLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.MapInput `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CosmosDbLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbLinkedService)(nil)).Elem()
}

func (i CosmosDbLinkedServiceArgs) ToCosmosDbLinkedServiceOutput() CosmosDbLinkedServiceOutput {
	return i.ToCosmosDbLinkedServiceOutputWithContext(context.Background())
}

func (i CosmosDbLinkedServiceArgs) ToCosmosDbLinkedServiceOutputWithContext(ctx context.Context) CosmosDbLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbLinkedServiceOutput)
}

// Microsoft Azure Cosmos Database (CosmosDB) linked service.
type CosmosDbLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// Microsoft Azure Cosmos Database (CosmosDB) linked service.
type CosmosDbLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (CosmosDbLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbLinkedServiceResponse)(nil)).Elem()
}

func (o CosmosDbLinkedServiceResponseOutput) ToCosmosDbLinkedServiceResponseOutput() CosmosDbLinkedServiceResponseOutput {
	return o
}

func (o CosmosDbLinkedServiceResponseOutput) ToCosmosDbLinkedServiceResponseOutputWithContext(ctx context.Context) CosmosDbLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CosmosDbLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o CosmosDbLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o CosmosDbLinkedServiceResponseOutput) ConnectionString() pulumi.MapOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) map[string]interface{} { return v.ConnectionString }).(pulumi.MapOutput)
}

// Linked service description.
func (o CosmosDbLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o CosmosDbLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o CosmosDbLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o CosmosDbLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Couchbase server linked service.
type CouchbaseLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// CouchbaseLinkedServiceInput is an input type that accepts CouchbaseLinkedServiceArgs and CouchbaseLinkedServiceOutput values.
// You can construct a concrete instance of `CouchbaseLinkedServiceInput` via:
//
//          CouchbaseLinkedServiceArgs{...}
type CouchbaseLinkedServiceInput interface {
	pulumi.Input

	ToCouchbaseLinkedServiceOutput() CouchbaseLinkedServiceOutput
	ToCouchbaseLinkedServiceOutputWithContext(context.Context) CouchbaseLinkedServiceOutput
}

// Couchbase server linked service.
type CouchbaseLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.MapInput `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CouchbaseLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CouchbaseLinkedService)(nil)).Elem()
}

func (i CouchbaseLinkedServiceArgs) ToCouchbaseLinkedServiceOutput() CouchbaseLinkedServiceOutput {
	return i.ToCouchbaseLinkedServiceOutputWithContext(context.Background())
}

func (i CouchbaseLinkedServiceArgs) ToCouchbaseLinkedServiceOutputWithContext(ctx context.Context) CouchbaseLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CouchbaseLinkedServiceOutput)
}

// Couchbase server linked service.
type CouchbaseLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// Couchbase server linked service.
type CouchbaseLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (CouchbaseLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CouchbaseLinkedServiceResponse)(nil)).Elem()
}

func (o CouchbaseLinkedServiceResponseOutput) ToCouchbaseLinkedServiceResponseOutput() CouchbaseLinkedServiceResponseOutput {
	return o
}

func (o CouchbaseLinkedServiceResponseOutput) ToCouchbaseLinkedServiceResponseOutputWithContext(ctx context.Context) CouchbaseLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CouchbaseLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v CouchbaseLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o CouchbaseLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v CouchbaseLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o CouchbaseLinkedServiceResponseOutput) ConnectionString() pulumi.MapOutput {
	return o.ApplyT(func(v CouchbaseLinkedServiceResponse) map[string]interface{} { return v.ConnectionString }).(pulumi.MapOutput)
}

// Linked service description.
func (o CouchbaseLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CouchbaseLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o CouchbaseLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v CouchbaseLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o CouchbaseLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CouchbaseLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o CouchbaseLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CouchbaseLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Couchbase server dataset.
type CouchbaseTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// CouchbaseTableDatasetInput is an input type that accepts CouchbaseTableDatasetArgs and CouchbaseTableDatasetOutput values.
// You can construct a concrete instance of `CouchbaseTableDatasetInput` via:
//
//          CouchbaseTableDatasetArgs{...}
type CouchbaseTableDatasetInput interface {
	pulumi.Input

	ToCouchbaseTableDatasetOutput() CouchbaseTableDatasetOutput
	ToCouchbaseTableDatasetOutputWithContext(context.Context) CouchbaseTableDatasetOutput
}

// Couchbase server dataset.
type CouchbaseTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CouchbaseTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CouchbaseTableDataset)(nil)).Elem()
}

func (i CouchbaseTableDatasetArgs) ToCouchbaseTableDatasetOutput() CouchbaseTableDatasetOutput {
	return i.ToCouchbaseTableDatasetOutputWithContext(context.Background())
}

func (i CouchbaseTableDatasetArgs) ToCouchbaseTableDatasetOutputWithContext(ctx context.Context) CouchbaseTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CouchbaseTableDatasetOutput)
}

// Couchbase server dataset.
type CouchbaseTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Couchbase server dataset.
type CouchbaseTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (CouchbaseTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CouchbaseTableDatasetResponse)(nil)).Elem()
}

func (o CouchbaseTableDatasetResponseOutput) ToCouchbaseTableDatasetResponseOutput() CouchbaseTableDatasetResponseOutput {
	return o
}

func (o CouchbaseTableDatasetResponseOutput) ToCouchbaseTableDatasetResponseOutputWithContext(ctx context.Context) CouchbaseTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CouchbaseTableDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o CouchbaseTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o CouchbaseTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o CouchbaseTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CouchbaseTableDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o CouchbaseTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Custom linked service.
type CustomDataSourceLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// CustomDataSourceLinkedServiceInput is an input type that accepts CustomDataSourceLinkedServiceArgs and CustomDataSourceLinkedServiceOutput values.
// You can construct a concrete instance of `CustomDataSourceLinkedServiceInput` via:
//
//          CustomDataSourceLinkedServiceArgs{...}
type CustomDataSourceLinkedServiceInput interface {
	pulumi.Input

	ToCustomDataSourceLinkedServiceOutput() CustomDataSourceLinkedServiceOutput
	ToCustomDataSourceLinkedServiceOutputWithContext(context.Context) CustomDataSourceLinkedServiceOutput
}

// Custom linked service.
type CustomDataSourceLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CustomDataSourceLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDataSourceLinkedService)(nil)).Elem()
}

func (i CustomDataSourceLinkedServiceArgs) ToCustomDataSourceLinkedServiceOutput() CustomDataSourceLinkedServiceOutput {
	return i.ToCustomDataSourceLinkedServiceOutputWithContext(context.Background())
}

func (i CustomDataSourceLinkedServiceArgs) ToCustomDataSourceLinkedServiceOutputWithContext(ctx context.Context) CustomDataSourceLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDataSourceLinkedServiceOutput)
}

// Custom linked service.
type CustomDataSourceLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// Custom linked service.
type CustomDataSourceLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (CustomDataSourceLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDataSourceLinkedServiceResponse)(nil)).Elem()
}

func (o CustomDataSourceLinkedServiceResponseOutput) ToCustomDataSourceLinkedServiceResponseOutput() CustomDataSourceLinkedServiceResponseOutput {
	return o
}

func (o CustomDataSourceLinkedServiceResponseOutput) ToCustomDataSourceLinkedServiceResponseOutputWithContext(ctx context.Context) CustomDataSourceLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CustomDataSourceLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o CustomDataSourceLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o CustomDataSourceLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o CustomDataSourceLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o CustomDataSourceLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The custom dataset.
type CustomDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// CustomDatasetInput is an input type that accepts CustomDatasetArgs and CustomDatasetOutput values.
// You can construct a concrete instance of `CustomDatasetInput` via:
//
//          CustomDatasetArgs{...}
type CustomDatasetInput interface {
	pulumi.Input

	ToCustomDatasetOutput() CustomDatasetOutput
	ToCustomDatasetOutputWithContext(context.Context) CustomDatasetOutput
}

// The custom dataset.
type CustomDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CustomDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDataset)(nil)).Elem()
}

func (i CustomDatasetArgs) ToCustomDatasetOutput() CustomDatasetOutput {
	return i.ToCustomDatasetOutputWithContext(context.Background())
}

func (i CustomDatasetArgs) ToCustomDatasetOutputWithContext(ctx context.Context) CustomDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDatasetOutput)
}

// The custom dataset.
type CustomDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// The custom dataset.
type CustomDatasetResponseOutput struct{ *pulumi.OutputState }

func (CustomDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDatasetResponse)(nil)).Elem()
}

func (o CustomDatasetResponseOutput) ToCustomDatasetResponseOutput() CustomDatasetResponseOutput {
	return o
}

func (o CustomDatasetResponseOutput) ToCustomDatasetResponseOutputWithContext(ctx context.Context) CustomDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CustomDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v CustomDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o CustomDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o CustomDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v CustomDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o CustomDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CustomDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CustomDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v CustomDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o CustomDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The BZip2 compression method used on a dataset.
type DatasetBZip2Compression struct {
	// Type of dataset compression.
	Type string `pulumi:"type"`
}

// DatasetBZip2CompressionInput is an input type that accepts DatasetBZip2CompressionArgs and DatasetBZip2CompressionOutput values.
// You can construct a concrete instance of `DatasetBZip2CompressionInput` via:
//
//          DatasetBZip2CompressionArgs{...}
type DatasetBZip2CompressionInput interface {
	pulumi.Input

	ToDatasetBZip2CompressionOutput() DatasetBZip2CompressionOutput
	ToDatasetBZip2CompressionOutputWithContext(context.Context) DatasetBZip2CompressionOutput
}

// The BZip2 compression method used on a dataset.
type DatasetBZip2CompressionArgs struct {
	// Type of dataset compression.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetBZip2CompressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetBZip2Compression)(nil)).Elem()
}

func (i DatasetBZip2CompressionArgs) ToDatasetBZip2CompressionOutput() DatasetBZip2CompressionOutput {
	return i.ToDatasetBZip2CompressionOutputWithContext(context.Background())
}

func (i DatasetBZip2CompressionArgs) ToDatasetBZip2CompressionOutputWithContext(ctx context.Context) DatasetBZip2CompressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetBZip2CompressionOutput)
}

// The BZip2 compression method used on a dataset.
type DatasetBZip2CompressionResponse struct {
	// Type of dataset compression.
	Type string `pulumi:"type"`
}

// The BZip2 compression method used on a dataset.
type DatasetBZip2CompressionResponseOutput struct{ *pulumi.OutputState }

func (DatasetBZip2CompressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetBZip2CompressionResponse)(nil)).Elem()
}

func (o DatasetBZip2CompressionResponseOutput) ToDatasetBZip2CompressionResponseOutput() DatasetBZip2CompressionResponseOutput {
	return o
}

func (o DatasetBZip2CompressionResponseOutput) ToDatasetBZip2CompressionResponseOutputWithContext(ctx context.Context) DatasetBZip2CompressionResponseOutput {
	return o
}

// Type of dataset compression.
func (o DatasetBZip2CompressionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetBZip2CompressionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Deflate compression method used on a dataset.
type DatasetDeflateCompression struct {
	// The Deflate compression level.
	Level map[string]interface{} `pulumi:"level"`
	// Type of dataset compression.
	Type string `pulumi:"type"`
}

// DatasetDeflateCompressionInput is an input type that accepts DatasetDeflateCompressionArgs and DatasetDeflateCompressionOutput values.
// You can construct a concrete instance of `DatasetDeflateCompressionInput` via:
//
//          DatasetDeflateCompressionArgs{...}
type DatasetDeflateCompressionInput interface {
	pulumi.Input

	ToDatasetDeflateCompressionOutput() DatasetDeflateCompressionOutput
	ToDatasetDeflateCompressionOutputWithContext(context.Context) DatasetDeflateCompressionOutput
}

// The Deflate compression method used on a dataset.
type DatasetDeflateCompressionArgs struct {
	// The Deflate compression level.
	Level pulumi.MapInput `pulumi:"level"`
	// Type of dataset compression.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetDeflateCompressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDeflateCompression)(nil)).Elem()
}

func (i DatasetDeflateCompressionArgs) ToDatasetDeflateCompressionOutput() DatasetDeflateCompressionOutput {
	return i.ToDatasetDeflateCompressionOutputWithContext(context.Background())
}

func (i DatasetDeflateCompressionArgs) ToDatasetDeflateCompressionOutputWithContext(ctx context.Context) DatasetDeflateCompressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDeflateCompressionOutput)
}

// The Deflate compression method used on a dataset.
type DatasetDeflateCompressionResponse struct {
	// The Deflate compression level.
	Level map[string]interface{} `pulumi:"level"`
	// Type of dataset compression.
	Type string `pulumi:"type"`
}

// The Deflate compression method used on a dataset.
type DatasetDeflateCompressionResponseOutput struct{ *pulumi.OutputState }

func (DatasetDeflateCompressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDeflateCompressionResponse)(nil)).Elem()
}

func (o DatasetDeflateCompressionResponseOutput) ToDatasetDeflateCompressionResponseOutput() DatasetDeflateCompressionResponseOutput {
	return o
}

func (o DatasetDeflateCompressionResponseOutput) ToDatasetDeflateCompressionResponseOutputWithContext(ctx context.Context) DatasetDeflateCompressionResponseOutput {
	return o
}

// The Deflate compression level.
func (o DatasetDeflateCompressionResponseOutput) Level() pulumi.MapOutput {
	return o.ApplyT(func(v DatasetDeflateCompressionResponse) map[string]interface{} { return v.Level }).(pulumi.MapOutput)
}

// Type of dataset compression.
func (o DatasetDeflateCompressionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetDeflateCompressionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The GZip compression method used on a dataset.
type DatasetGZipCompression struct {
	// The GZip compression level.
	Level map[string]interface{} `pulumi:"level"`
	// Type of dataset compression.
	Type string `pulumi:"type"`
}

// DatasetGZipCompressionInput is an input type that accepts DatasetGZipCompressionArgs and DatasetGZipCompressionOutput values.
// You can construct a concrete instance of `DatasetGZipCompressionInput` via:
//
//          DatasetGZipCompressionArgs{...}
type DatasetGZipCompressionInput interface {
	pulumi.Input

	ToDatasetGZipCompressionOutput() DatasetGZipCompressionOutput
	ToDatasetGZipCompressionOutputWithContext(context.Context) DatasetGZipCompressionOutput
}

// The GZip compression method used on a dataset.
type DatasetGZipCompressionArgs struct {
	// The GZip compression level.
	Level pulumi.MapInput `pulumi:"level"`
	// Type of dataset compression.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetGZipCompressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetGZipCompression)(nil)).Elem()
}

func (i DatasetGZipCompressionArgs) ToDatasetGZipCompressionOutput() DatasetGZipCompressionOutput {
	return i.ToDatasetGZipCompressionOutputWithContext(context.Background())
}

func (i DatasetGZipCompressionArgs) ToDatasetGZipCompressionOutputWithContext(ctx context.Context) DatasetGZipCompressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetGZipCompressionOutput)
}

// The GZip compression method used on a dataset.
type DatasetGZipCompressionResponse struct {
	// The GZip compression level.
	Level map[string]interface{} `pulumi:"level"`
	// Type of dataset compression.
	Type string `pulumi:"type"`
}

// The GZip compression method used on a dataset.
type DatasetGZipCompressionResponseOutput struct{ *pulumi.OutputState }

func (DatasetGZipCompressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetGZipCompressionResponse)(nil)).Elem()
}

func (o DatasetGZipCompressionResponseOutput) ToDatasetGZipCompressionResponseOutput() DatasetGZipCompressionResponseOutput {
	return o
}

func (o DatasetGZipCompressionResponseOutput) ToDatasetGZipCompressionResponseOutputWithContext(ctx context.Context) DatasetGZipCompressionResponseOutput {
	return o
}

// The GZip compression level.
func (o DatasetGZipCompressionResponseOutput) Level() pulumi.MapOutput {
	return o.ApplyT(func(v DatasetGZipCompressionResponse) map[string]interface{} { return v.Level }).(pulumi.MapOutput)
}

// Type of dataset compression.
func (o DatasetGZipCompressionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetGZipCompressionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The ZipDeflate compression method used on a dataset.
type DatasetZipDeflateCompression struct {
	// The ZipDeflate compression level.
	Level map[string]interface{} `pulumi:"level"`
	// Type of dataset compression.
	Type string `pulumi:"type"`
}

// DatasetZipDeflateCompressionInput is an input type that accepts DatasetZipDeflateCompressionArgs and DatasetZipDeflateCompressionOutput values.
// You can construct a concrete instance of `DatasetZipDeflateCompressionInput` via:
//
//          DatasetZipDeflateCompressionArgs{...}
type DatasetZipDeflateCompressionInput interface {
	pulumi.Input

	ToDatasetZipDeflateCompressionOutput() DatasetZipDeflateCompressionOutput
	ToDatasetZipDeflateCompressionOutputWithContext(context.Context) DatasetZipDeflateCompressionOutput
}

// The ZipDeflate compression method used on a dataset.
type DatasetZipDeflateCompressionArgs struct {
	// The ZipDeflate compression level.
	Level pulumi.MapInput `pulumi:"level"`
	// Type of dataset compression.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetZipDeflateCompressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetZipDeflateCompression)(nil)).Elem()
}

func (i DatasetZipDeflateCompressionArgs) ToDatasetZipDeflateCompressionOutput() DatasetZipDeflateCompressionOutput {
	return i.ToDatasetZipDeflateCompressionOutputWithContext(context.Background())
}

func (i DatasetZipDeflateCompressionArgs) ToDatasetZipDeflateCompressionOutputWithContext(ctx context.Context) DatasetZipDeflateCompressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetZipDeflateCompressionOutput)
}

// The ZipDeflate compression method used on a dataset.
type DatasetZipDeflateCompressionResponse struct {
	// The ZipDeflate compression level.
	Level map[string]interface{} `pulumi:"level"`
	// Type of dataset compression.
	Type string `pulumi:"type"`
}

// The ZipDeflate compression method used on a dataset.
type DatasetZipDeflateCompressionResponseOutput struct{ *pulumi.OutputState }

func (DatasetZipDeflateCompressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetZipDeflateCompressionResponse)(nil)).Elem()
}

func (o DatasetZipDeflateCompressionResponseOutput) ToDatasetZipDeflateCompressionResponseOutput() DatasetZipDeflateCompressionResponseOutput {
	return o
}

func (o DatasetZipDeflateCompressionResponseOutput) ToDatasetZipDeflateCompressionResponseOutputWithContext(ctx context.Context) DatasetZipDeflateCompressionResponseOutput {
	return o
}

// The ZipDeflate compression level.
func (o DatasetZipDeflateCompressionResponseOutput) Level() pulumi.MapOutput {
	return o.ApplyT(func(v DatasetZipDeflateCompressionResponse) map[string]interface{} { return v.Level }).(pulumi.MapOutput)
}

// Type of dataset compression.
func (o DatasetZipDeflateCompressionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetZipDeflateCompressionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for DB2 data source.
type Db2LinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database map[string]interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server map[string]interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username map[string]interface{} `pulumi:"username"`
}

// Db2LinkedServiceInput is an input type that accepts Db2LinkedServiceArgs and Db2LinkedServiceOutput values.
// You can construct a concrete instance of `Db2LinkedServiceInput` via:
//
//          Db2LinkedServiceArgs{...}
type Db2LinkedServiceInput interface {
	pulumi.Input

	ToDb2LinkedServiceOutput() Db2LinkedServiceOutput
	ToDb2LinkedServiceOutputWithContext(context.Context) Db2LinkedServiceOutput
}

// Linked service for DB2 data source.
type Db2LinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database pulumi.MapInput `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for authentication.
	Password pulumi.Input `pulumi:"password"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server pulumi.MapInput `pulumi:"server"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username pulumi.MapInput `pulumi:"username"`
}

func (Db2LinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Db2LinkedService)(nil)).Elem()
}

func (i Db2LinkedServiceArgs) ToDb2LinkedServiceOutput() Db2LinkedServiceOutput {
	return i.ToDb2LinkedServiceOutputWithContext(context.Background())
}

func (i Db2LinkedServiceArgs) ToDb2LinkedServiceOutputWithContext(ctx context.Context) Db2LinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Db2LinkedServiceOutput)
}

// Linked service for DB2 data source.
type Db2LinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database map[string]interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server map[string]interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username map[string]interface{} `pulumi:"username"`
}

// Linked service for DB2 data source.
type Db2LinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (Db2LinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Db2LinkedServiceResponse)(nil)).Elem()
}

func (o Db2LinkedServiceResponseOutput) ToDb2LinkedServiceResponseOutput() Db2LinkedServiceResponseOutput {
	return o
}

func (o Db2LinkedServiceResponseOutput) ToDb2LinkedServiceResponseOutputWithContext(ctx context.Context) Db2LinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o Db2LinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// AuthenticationType to be used for connection.
func (o Db2LinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o Db2LinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Database name for connection. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceResponseOutput) Database() pulumi.MapOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) map[string]interface{} { return v.Database }).(pulumi.MapOutput)
}

// Linked service description.
func (o Db2LinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o Db2LinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for authentication.
func (o Db2LinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Server name for connection. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceResponseOutput) Server() pulumi.MapOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) map[string]interface{} { return v.Server }).(pulumi.MapOutput)
}

// Type of linked service.
func (o Db2LinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceResponseOutput) Username() pulumi.MapOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) map[string]interface{} { return v.Username }).(pulumi.MapOutput)
}

// Microsoft Azure Document Database Collection dataset.
type DocumentDbCollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Document Database collection name. Type: string (or Expression with resultType string).
	CollectionName map[string]interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// DocumentDbCollectionDatasetInput is an input type that accepts DocumentDbCollectionDatasetArgs and DocumentDbCollectionDatasetOutput values.
// You can construct a concrete instance of `DocumentDbCollectionDatasetInput` via:
//
//          DocumentDbCollectionDatasetArgs{...}
type DocumentDbCollectionDatasetInput interface {
	pulumi.Input

	ToDocumentDbCollectionDatasetOutput() DocumentDbCollectionDatasetOutput
	ToDocumentDbCollectionDatasetOutputWithContext(context.Context) DocumentDbCollectionDatasetOutput
}

// Microsoft Azure Document Database Collection dataset.
type DocumentDbCollectionDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Document Database collection name. Type: string (or Expression with resultType string).
	CollectionName pulumi.MapInput `pulumi:"collectionName"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DocumentDbCollectionDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentDbCollectionDataset)(nil)).Elem()
}

func (i DocumentDbCollectionDatasetArgs) ToDocumentDbCollectionDatasetOutput() DocumentDbCollectionDatasetOutput {
	return i.ToDocumentDbCollectionDatasetOutputWithContext(context.Background())
}

func (i DocumentDbCollectionDatasetArgs) ToDocumentDbCollectionDatasetOutputWithContext(ctx context.Context) DocumentDbCollectionDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDbCollectionDatasetOutput)
}

// Microsoft Azure Document Database Collection dataset.
type DocumentDbCollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Document Database collection name. Type: string (or Expression with resultType string).
	CollectionName map[string]interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Microsoft Azure Document Database Collection dataset.
type DocumentDbCollectionDatasetResponseOutput struct{ *pulumi.OutputState }

func (DocumentDbCollectionDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentDbCollectionDatasetResponse)(nil)).Elem()
}

func (o DocumentDbCollectionDatasetResponseOutput) ToDocumentDbCollectionDatasetResponseOutput() DocumentDbCollectionDatasetResponseOutput {
	return o
}

func (o DocumentDbCollectionDatasetResponseOutput) ToDocumentDbCollectionDatasetResponseOutputWithContext(ctx context.Context) DocumentDbCollectionDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DocumentDbCollectionDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Document Database collection name. Type: string (or Expression with resultType string).
func (o DocumentDbCollectionDatasetResponseOutput) CollectionName() pulumi.MapOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) map[string]interface{} { return v.CollectionName }).(pulumi.MapOutput)
}

// Dataset description.
func (o DocumentDbCollectionDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o DocumentDbCollectionDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o DocumentDbCollectionDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DocumentDbCollectionDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o DocumentDbCollectionDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Drill server linked service.
type DrillLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// DrillLinkedServiceInput is an input type that accepts DrillLinkedServiceArgs and DrillLinkedServiceOutput values.
// You can construct a concrete instance of `DrillLinkedServiceInput` via:
//
//          DrillLinkedServiceArgs{...}
type DrillLinkedServiceInput interface {
	pulumi.Input

	ToDrillLinkedServiceOutput() DrillLinkedServiceOutput
	ToDrillLinkedServiceOutputWithContext(context.Context) DrillLinkedServiceOutput
}

// Drill server linked service.
type DrillLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.MapInput `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DrillLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DrillLinkedService)(nil)).Elem()
}

func (i DrillLinkedServiceArgs) ToDrillLinkedServiceOutput() DrillLinkedServiceOutput {
	return i.ToDrillLinkedServiceOutputWithContext(context.Background())
}

func (i DrillLinkedServiceArgs) ToDrillLinkedServiceOutputWithContext(ctx context.Context) DrillLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DrillLinkedServiceOutput)
}

// Drill server linked service.
type DrillLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// Drill server linked service.
type DrillLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (DrillLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DrillLinkedServiceResponse)(nil)).Elem()
}

func (o DrillLinkedServiceResponseOutput) ToDrillLinkedServiceResponseOutput() DrillLinkedServiceResponseOutput {
	return o
}

func (o DrillLinkedServiceResponseOutput) ToDrillLinkedServiceResponseOutputWithContext(ctx context.Context) DrillLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DrillLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v DrillLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o DrillLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v DrillLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o DrillLinkedServiceResponseOutput) ConnectionString() pulumi.MapOutput {
	return o.ApplyT(func(v DrillLinkedServiceResponse) map[string]interface{} { return v.ConnectionString }).(pulumi.MapOutput)
}

// Linked service description.
func (o DrillLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DrillLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o DrillLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v DrillLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o DrillLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DrillLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o DrillLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DrillLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Drill server dataset.
type DrillTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// DrillTableDatasetInput is an input type that accepts DrillTableDatasetArgs and DrillTableDatasetOutput values.
// You can construct a concrete instance of `DrillTableDatasetInput` via:
//
//          DrillTableDatasetArgs{...}
type DrillTableDatasetInput interface {
	pulumi.Input

	ToDrillTableDatasetOutput() DrillTableDatasetOutput
	ToDrillTableDatasetOutputWithContext(context.Context) DrillTableDatasetOutput
}

// Drill server dataset.
type DrillTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DrillTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DrillTableDataset)(nil)).Elem()
}

func (i DrillTableDatasetArgs) ToDrillTableDatasetOutput() DrillTableDatasetOutput {
	return i.ToDrillTableDatasetOutputWithContext(context.Background())
}

func (i DrillTableDatasetArgs) ToDrillTableDatasetOutputWithContext(ctx context.Context) DrillTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DrillTableDatasetOutput)
}

// Drill server dataset.
type DrillTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Drill server dataset.
type DrillTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (DrillTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DrillTableDatasetResponse)(nil)).Elem()
}

func (o DrillTableDatasetResponseOutput) ToDrillTableDatasetResponseOutput() DrillTableDatasetResponseOutput {
	return o
}

func (o DrillTableDatasetResponseOutput) ToDrillTableDatasetResponseOutputWithContext(ctx context.Context) DrillTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DrillTableDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o DrillTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o DrillTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o DrillTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DrillTableDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o DrillTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Dynamics entity dataset.
type DynamicsEntityDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName map[string]interface{} `pulumi:"entityName"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// DynamicsEntityDatasetInput is an input type that accepts DynamicsEntityDatasetArgs and DynamicsEntityDatasetOutput values.
// You can construct a concrete instance of `DynamicsEntityDatasetInput` via:
//
//          DynamicsEntityDatasetArgs{...}
type DynamicsEntityDatasetInput interface {
	pulumi.Input

	ToDynamicsEntityDatasetOutput() DynamicsEntityDatasetOutput
	ToDynamicsEntityDatasetOutputWithContext(context.Context) DynamicsEntityDatasetOutput
}

// The Dynamics entity dataset.
type DynamicsEntityDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName pulumi.MapInput `pulumi:"entityName"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DynamicsEntityDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsEntityDataset)(nil)).Elem()
}

func (i DynamicsEntityDatasetArgs) ToDynamicsEntityDatasetOutput() DynamicsEntityDatasetOutput {
	return i.ToDynamicsEntityDatasetOutputWithContext(context.Background())
}

func (i DynamicsEntityDatasetArgs) ToDynamicsEntityDatasetOutputWithContext(ctx context.Context) DynamicsEntityDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsEntityDatasetOutput)
}

// The Dynamics entity dataset.
type DynamicsEntityDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName map[string]interface{} `pulumi:"entityName"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// The Dynamics entity dataset.
type DynamicsEntityDatasetResponseOutput struct{ *pulumi.OutputState }

func (DynamicsEntityDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsEntityDatasetResponse)(nil)).Elem()
}

func (o DynamicsEntityDatasetResponseOutput) ToDynamicsEntityDatasetResponseOutput() DynamicsEntityDatasetResponseOutput {
	return o
}

func (o DynamicsEntityDatasetResponseOutput) ToDynamicsEntityDatasetResponseOutputWithContext(ctx context.Context) DynamicsEntityDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DynamicsEntityDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o DynamicsEntityDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The logical name of the entity. Type: string (or Expression with resultType string).
func (o DynamicsEntityDatasetResponseOutput) EntityName() pulumi.MapOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) map[string]interface{} { return v.EntityName }).(pulumi.MapOutput)
}

// Linked service reference.
func (o DynamicsEntityDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o DynamicsEntityDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DynamicsEntityDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o DynamicsEntityDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Dynamics linked service.
type DynamicsLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario. Type: string (or Expression with resultType string).
	AuthenticationType map[string]interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType map[string]interface{} `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName map[string]interface{} `pulumi:"hostName"`
	// The organization name of the Dynamics instance. The property is required for on-prem and required for online when there are more than one Dynamics instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName map[string]interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the Dynamics instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port map[string]interface{} `pulumi:"port"`
	// The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri map[string]interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// User name to access the Dynamics instance. Type: string (or Expression with resultType string).
	Username map[string]interface{} `pulumi:"username"`
}

// DynamicsLinkedServiceInput is an input type that accepts DynamicsLinkedServiceArgs and DynamicsLinkedServiceOutput values.
// You can construct a concrete instance of `DynamicsLinkedServiceInput` via:
//
//          DynamicsLinkedServiceArgs{...}
type DynamicsLinkedServiceInput interface {
	pulumi.Input

	ToDynamicsLinkedServiceOutput() DynamicsLinkedServiceOutput
	ToDynamicsLinkedServiceOutputWithContext(context.Context) DynamicsLinkedServiceOutput
}

// Dynamics linked service.
type DynamicsLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.MapInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType pulumi.MapInput `pulumi:"deploymentType"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName pulumi.MapInput `pulumi:"hostName"`
	// The organization name of the Dynamics instance. The property is required for on-prem and required for online when there are more than one Dynamics instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName pulumi.MapInput `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to access the Dynamics instance.
	Password pulumi.Input `pulumi:"password"`
	// The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port pulumi.MapInput `pulumi:"port"`
	// The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri pulumi.MapInput `pulumi:"serviceUri"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// User name to access the Dynamics instance. Type: string (or Expression with resultType string).
	Username pulumi.MapInput `pulumi:"username"`
}

func (DynamicsLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsLinkedService)(nil)).Elem()
}

func (i DynamicsLinkedServiceArgs) ToDynamicsLinkedServiceOutput() DynamicsLinkedServiceOutput {
	return i.ToDynamicsLinkedServiceOutputWithContext(context.Background())
}

func (i DynamicsLinkedServiceArgs) ToDynamicsLinkedServiceOutputWithContext(ctx context.Context) DynamicsLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsLinkedServiceOutput)
}

// Dynamics linked service.
type DynamicsLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario. Type: string (or Expression with resultType string).
	AuthenticationType map[string]interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType map[string]interface{} `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName map[string]interface{} `pulumi:"hostName"`
	// The organization name of the Dynamics instance. The property is required for on-prem and required for online when there are more than one Dynamics instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName map[string]interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the Dynamics instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port map[string]interface{} `pulumi:"port"`
	// The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri map[string]interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// User name to access the Dynamics instance. Type: string (or Expression with resultType string).
	Username map[string]interface{} `pulumi:"username"`
}

// Dynamics linked service.
type DynamicsLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (DynamicsLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsLinkedServiceResponse)(nil)).Elem()
}

func (o DynamicsLinkedServiceResponseOutput) ToDynamicsLinkedServiceResponseOutput() DynamicsLinkedServiceResponseOutput {
	return o
}

func (o DynamicsLinkedServiceResponseOutput) ToDynamicsLinkedServiceResponseOutputWithContext(ctx context.Context) DynamicsLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DynamicsLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) AuthenticationType() pulumi.MapOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) map[string]interface{} { return v.AuthenticationType }).(pulumi.MapOutput)
}

// The integration runtime reference.
func (o DynamicsLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) DeploymentType() pulumi.MapOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) map[string]interface{} { return v.DeploymentType }).(pulumi.MapOutput)
}

// Linked service description.
func (o DynamicsLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) HostName() pulumi.MapOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) map[string]interface{} { return v.HostName }).(pulumi.MapOutput)
}

// The organization name of the Dynamics instance. The property is required for on-prem and required for online when there are more than one Dynamics instances associated with the user. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) OrganizationName() pulumi.MapOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) map[string]interface{} { return v.OrganizationName }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o DynamicsLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password to access the Dynamics instance.
func (o DynamicsLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
func (o DynamicsLinkedServiceResponseOutput) Port() pulumi.MapOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) map[string]interface{} { return v.Port }).(pulumi.MapOutput)
}

// The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) ServiceUri() pulumi.MapOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) map[string]interface{} { return v.ServiceUri }).(pulumi.MapOutput)
}

// Type of linked service.
func (o DynamicsLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name to access the Dynamics instance. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) Username() pulumi.MapOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) map[string]interface{} { return v.Username }).(pulumi.MapOutput)
}

// Eloqua server linked service.
type EloquaLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Eloqua server. (i.e. eloqua.example.com)
	Endpoint map[string]interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
	// The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice)
	Username map[string]interface{} `pulumi:"username"`
}

// EloquaLinkedServiceInput is an input type that accepts EloquaLinkedServiceArgs and EloquaLinkedServiceOutput values.
// You can construct a concrete instance of `EloquaLinkedServiceInput` via:
//
//          EloquaLinkedServiceArgs{...}
type EloquaLinkedServiceInput interface {
	pulumi.Input

	ToEloquaLinkedServiceOutput() EloquaLinkedServiceOutput
	ToEloquaLinkedServiceOutputWithContext(context.Context) EloquaLinkedServiceOutput
}

// Eloqua server linked service.
type EloquaLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The endpoint of the Eloqua server. (i.e. eloqua.example.com)
	Endpoint pulumi.MapInput `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.MapInput `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.MapInput `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.MapInput `pulumi:"usePeerVerification"`
	// The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice)
	Username pulumi.MapInput `pulumi:"username"`
}

func (EloquaLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EloquaLinkedService)(nil)).Elem()
}

func (i EloquaLinkedServiceArgs) ToEloquaLinkedServiceOutput() EloquaLinkedServiceOutput {
	return i.ToEloquaLinkedServiceOutputWithContext(context.Background())
}

func (i EloquaLinkedServiceArgs) ToEloquaLinkedServiceOutputWithContext(ctx context.Context) EloquaLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EloquaLinkedServiceOutput)
}

// Eloqua server linked service.
type EloquaLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Eloqua server. (i.e. eloqua.example.com)
	Endpoint map[string]interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
	// The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice)
	Username map[string]interface{} `pulumi:"username"`
}

// Eloqua server linked service.
type EloquaLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (EloquaLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EloquaLinkedServiceResponse)(nil)).Elem()
}

func (o EloquaLinkedServiceResponseOutput) ToEloquaLinkedServiceResponseOutput() EloquaLinkedServiceResponseOutput {
	return o
}

func (o EloquaLinkedServiceResponseOutput) ToEloquaLinkedServiceResponseOutputWithContext(ctx context.Context) EloquaLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o EloquaLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o EloquaLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o EloquaLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o EloquaLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The endpoint of the Eloqua server. (i.e. eloqua.example.com)
func (o EloquaLinkedServiceResponseOutput) Endpoint() pulumi.MapOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) map[string]interface{} { return v.Endpoint }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o EloquaLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name.
func (o EloquaLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o EloquaLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o EloquaLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.MapOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) map[string]interface{} { return v.UseEncryptedEndpoints }).(pulumi.MapOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o EloquaLinkedServiceResponseOutput) UseHostVerification() pulumi.MapOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) map[string]interface{} { return v.UseHostVerification }).(pulumi.MapOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o EloquaLinkedServiceResponseOutput) UsePeerVerification() pulumi.MapOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) map[string]interface{} { return v.UsePeerVerification }).(pulumi.MapOutput)
}

// The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice)
func (o EloquaLinkedServiceResponseOutput) Username() pulumi.MapOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) map[string]interface{} { return v.Username }).(pulumi.MapOutput)
}

// Eloqua server dataset.
type EloquaObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// EloquaObjectDatasetInput is an input type that accepts EloquaObjectDatasetArgs and EloquaObjectDatasetOutput values.
// You can construct a concrete instance of `EloquaObjectDatasetInput` via:
//
//          EloquaObjectDatasetArgs{...}
type EloquaObjectDatasetInput interface {
	pulumi.Input

	ToEloquaObjectDatasetOutput() EloquaObjectDatasetOutput
	ToEloquaObjectDatasetOutputWithContext(context.Context) EloquaObjectDatasetOutput
}

// Eloqua server dataset.
type EloquaObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (EloquaObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EloquaObjectDataset)(nil)).Elem()
}

func (i EloquaObjectDatasetArgs) ToEloquaObjectDatasetOutput() EloquaObjectDatasetOutput {
	return i.ToEloquaObjectDatasetOutputWithContext(context.Background())
}

func (i EloquaObjectDatasetArgs) ToEloquaObjectDatasetOutputWithContext(ctx context.Context) EloquaObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EloquaObjectDatasetOutput)
}

// Eloqua server dataset.
type EloquaObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Eloqua server dataset.
type EloquaObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (EloquaObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EloquaObjectDatasetResponse)(nil)).Elem()
}

func (o EloquaObjectDatasetResponseOutput) ToEloquaObjectDatasetResponseOutput() EloquaObjectDatasetResponseOutput {
	return o
}

func (o EloquaObjectDatasetResponseOutput) ToEloquaObjectDatasetResponseOutputWithContext(ctx context.Context) EloquaObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o EloquaObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o EloquaObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o EloquaObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o EloquaObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o EloquaObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o EloquaObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The entity reference.
type EntityReference struct {
	// The name of this referenced entity.
	ReferenceName *string `pulumi:"referenceName"`
	// The type of this referenced entity.
	Type *string `pulumi:"type"`
}

// EntityReferenceInput is an input type that accepts EntityReferenceArgs and EntityReferenceOutput values.
// You can construct a concrete instance of `EntityReferenceInput` via:
//
//          EntityReferenceArgs{...}
type EntityReferenceInput interface {
	pulumi.Input

	ToEntityReferenceOutput() EntityReferenceOutput
	ToEntityReferenceOutputWithContext(context.Context) EntityReferenceOutput
}

// The entity reference.
type EntityReferenceArgs struct {
	// The name of this referenced entity.
	ReferenceName pulumi.StringPtrInput `pulumi:"referenceName"`
	// The type of this referenced entity.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EntityReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityReference)(nil)).Elem()
}

func (i EntityReferenceArgs) ToEntityReferenceOutput() EntityReferenceOutput {
	return i.ToEntityReferenceOutputWithContext(context.Background())
}

func (i EntityReferenceArgs) ToEntityReferenceOutputWithContext(ctx context.Context) EntityReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityReferenceOutput)
}

func (i EntityReferenceArgs) ToEntityReferencePtrOutput() EntityReferencePtrOutput {
	return i.ToEntityReferencePtrOutputWithContext(context.Background())
}

func (i EntityReferenceArgs) ToEntityReferencePtrOutputWithContext(ctx context.Context) EntityReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityReferenceOutput).ToEntityReferencePtrOutputWithContext(ctx)
}

// EntityReferencePtrInput is an input type that accepts EntityReferenceArgs, EntityReferencePtr and EntityReferencePtrOutput values.
// You can construct a concrete instance of `EntityReferencePtrInput` via:
//
//          EntityReferenceArgs{...}
//
//  or:
//
//          nil
type EntityReferencePtrInput interface {
	pulumi.Input

	ToEntityReferencePtrOutput() EntityReferencePtrOutput
	ToEntityReferencePtrOutputWithContext(context.Context) EntityReferencePtrOutput
}

type entityReferencePtrType EntityReferenceArgs

func EntityReferencePtr(v *EntityReferenceArgs) EntityReferencePtrInput {
	return (*entityReferencePtrType)(v)
}

func (*entityReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityReference)(nil)).Elem()
}

func (i *entityReferencePtrType) ToEntityReferencePtrOutput() EntityReferencePtrOutput {
	return i.ToEntityReferencePtrOutputWithContext(context.Background())
}

func (i *entityReferencePtrType) ToEntityReferencePtrOutputWithContext(ctx context.Context) EntityReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityReferencePtrOutput)
}

// The entity reference.
type EntityReferenceResponse struct {
	// The name of this referenced entity.
	ReferenceName *string `pulumi:"referenceName"`
	// The type of this referenced entity.
	Type *string `pulumi:"type"`
}

// The entity reference.
type EntityReferenceResponseOutput struct{ *pulumi.OutputState }

func (EntityReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityReferenceResponse)(nil)).Elem()
}

func (o EntityReferenceResponseOutput) ToEntityReferenceResponseOutput() EntityReferenceResponseOutput {
	return o
}

func (o EntityReferenceResponseOutput) ToEntityReferenceResponseOutputWithContext(ctx context.Context) EntityReferenceResponseOutput {
	return o
}

func (o EntityReferenceResponseOutput) ToEntityReferenceResponsePtrOutput() EntityReferenceResponsePtrOutput {
	return o.ToEntityReferenceResponsePtrOutputWithContext(context.Background())
}

func (o EntityReferenceResponseOutput) ToEntityReferenceResponsePtrOutputWithContext(ctx context.Context) EntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v EntityReferenceResponse) *EntityReferenceResponse {
		return &v
	}).(EntityReferenceResponsePtrOutput)
}

// The name of this referenced entity.
func (o EntityReferenceResponseOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityReferenceResponse) *string { return v.ReferenceName }).(pulumi.StringPtrOutput)
}

// The type of this referenced entity.
func (o EntityReferenceResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityReferenceResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EntityReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (EntityReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityReferenceResponse)(nil)).Elem()
}

func (o EntityReferenceResponsePtrOutput) ToEntityReferenceResponsePtrOutput() EntityReferenceResponsePtrOutput {
	return o
}

func (o EntityReferenceResponsePtrOutput) ToEntityReferenceResponsePtrOutputWithContext(ctx context.Context) EntityReferenceResponsePtrOutput {
	return o
}

func (o EntityReferenceResponsePtrOutput) Elem() EntityReferenceResponseOutput {
	return o.ApplyT(func(v *EntityReferenceResponse) EntityReferenceResponse { return *v }).(EntityReferenceResponseOutput)
}

// The name of this referenced entity.
func (o EntityReferenceResponsePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// The type of this referenced entity.
func (o EntityReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Base class for all execution activities.
type ExecutionActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Type of activity.
	Type string `pulumi:"type"`
}

// ExecutionActivityInput is an input type that accepts ExecutionActivityArgs and ExecutionActivityOutput values.
// You can construct a concrete instance of `ExecutionActivityInput` via:
//
//          ExecutionActivityArgs{...}
type ExecutionActivityInput interface {
	pulumi.Input

	ToExecutionActivityOutput() ExecutionActivityOutput
	ToExecutionActivityOutputWithContext(context.Context) ExecutionActivityOutput
}

// Base class for all execution activities.
type ExecutionActivityArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Type of activity.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExecutionActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionActivity)(nil)).Elem()
}

func (i ExecutionActivityArgs) ToExecutionActivityOutput() ExecutionActivityOutput {
	return i.ToExecutionActivityOutputWithContext(context.Background())
}

func (i ExecutionActivityArgs) ToExecutionActivityOutputWithContext(ctx context.Context) ExecutionActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionActivityOutput)
}

// Base class for all execution activities.
type ExecutionActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Type of activity.
	Type string `pulumi:"type"`
}

// Base class for all execution activities.
type ExecutionActivityResponseOutput struct{ *pulumi.OutputState }

func (ExecutionActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionActivityResponse)(nil)).Elem()
}

func (o ExecutionActivityResponseOutput) ToExecutionActivityResponseOutput() ExecutionActivityResponseOutput {
	return o
}

func (o ExecutionActivityResponseOutput) ToExecutionActivityResponseOutputWithContext(ctx context.Context) ExecutionActivityResponseOutput {
	return o
}

// Activity depends on condition.
func (o ExecutionActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v ExecutionActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o ExecutionActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o ExecutionActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v ExecutionActivityResponse) *LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponsePtrOutput)
}

// Activity name.
func (o ExecutionActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Activity policy.
func (o ExecutionActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v ExecutionActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Type of activity.
func (o ExecutionActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Identity properties of the factory resource.
type FactoryIdentity struct {
	// The identity type. Currently the only supported type is 'SystemAssigned'.
	Type string `pulumi:"type"`
}

// FactoryIdentityInput is an input type that accepts FactoryIdentityArgs and FactoryIdentityOutput values.
// You can construct a concrete instance of `FactoryIdentityInput` via:
//
//          FactoryIdentityArgs{...}
type FactoryIdentityInput interface {
	pulumi.Input

	ToFactoryIdentityOutput() FactoryIdentityOutput
	ToFactoryIdentityOutputWithContext(context.Context) FactoryIdentityOutput
}

// Identity properties of the factory resource.
type FactoryIdentityArgs struct {
	// The identity type. Currently the only supported type is 'SystemAssigned'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FactoryIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentity)(nil)).Elem()
}

func (i FactoryIdentityArgs) ToFactoryIdentityOutput() FactoryIdentityOutput {
	return i.ToFactoryIdentityOutputWithContext(context.Background())
}

func (i FactoryIdentityArgs) ToFactoryIdentityOutputWithContext(ctx context.Context) FactoryIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityOutput)
}

func (i FactoryIdentityArgs) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return i.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (i FactoryIdentityArgs) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityOutput).ToFactoryIdentityPtrOutputWithContext(ctx)
}

// FactoryIdentityPtrInput is an input type that accepts FactoryIdentityArgs, FactoryIdentityPtr and FactoryIdentityPtrOutput values.
// You can construct a concrete instance of `FactoryIdentityPtrInput` via:
//
//          FactoryIdentityArgs{...}
//
//  or:
//
//          nil
type FactoryIdentityPtrInput interface {
	pulumi.Input

	ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput
	ToFactoryIdentityPtrOutputWithContext(context.Context) FactoryIdentityPtrOutput
}

type factoryIdentityPtrType FactoryIdentityArgs

func FactoryIdentityPtr(v *FactoryIdentityArgs) FactoryIdentityPtrInput {
	return (*factoryIdentityPtrType)(v)
}

func (*factoryIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentity)(nil)).Elem()
}

func (i *factoryIdentityPtrType) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return i.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (i *factoryIdentityPtrType) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityPtrOutput)
}

// Identity properties of the factory resource.
type FactoryIdentityResponse struct {
	// The principal id of the identity.
	PrincipalId string `pulumi:"principalId"`
	// The client tenant id of the identity.
	TenantId string `pulumi:"tenantId"`
	// The identity type. Currently the only supported type is 'SystemAssigned'.
	Type string `pulumi:"type"`
}

// Identity properties of the factory resource.
type FactoryIdentityResponseOutput struct{ *pulumi.OutputState }

func (FactoryIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentityResponse)(nil)).Elem()
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponseOutput() FactoryIdentityResponseOutput {
	return o
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponseOutputWithContext(ctx context.Context) FactoryIdentityResponseOutput {
	return o
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput {
	return o.ToFactoryIdentityResponsePtrOutputWithContext(context.Background())
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponsePtrOutputWithContext(ctx context.Context) FactoryIdentityResponsePtrOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) *FactoryIdentityResponse {
		return &v
	}).(FactoryIdentityResponsePtrOutput)
}

// The principal id of the identity.
func (o FactoryIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The client tenant id of the identity.
func (o FactoryIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type. Currently the only supported type is 'SystemAssigned'.
func (o FactoryIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

type FactoryIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (FactoryIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentityResponse)(nil)).Elem()
}

func (o FactoryIdentityResponsePtrOutput) ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput {
	return o
}

func (o FactoryIdentityResponsePtrOutput) ToFactoryIdentityResponsePtrOutputWithContext(ctx context.Context) FactoryIdentityResponsePtrOutput {
	return o
}

func (o FactoryIdentityResponsePtrOutput) Elem() FactoryIdentityResponseOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) FactoryIdentityResponse { return *v }).(FactoryIdentityResponseOutput)
}

// The principal id of the identity.
func (o FactoryIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The client tenant id of the identity.
func (o FactoryIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type. Currently the only supported type is 'SystemAssigned'.
func (o FactoryIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Factory's VSTS repo information.
type FactoryVSTSConfiguration struct {
	// VSTS account name.
	AccountName *string `pulumi:"accountName"`
	// VSTS collaboration branch.
	CollaborationBranch *string `pulumi:"collaborationBranch"`
	// VSTS last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// VSTS project name.
	ProjectName *string `pulumi:"projectName"`
	// VSTS repository name.
	RepositoryName *string `pulumi:"repositoryName"`
	// VSTS root folder.
	RootFolder *string `pulumi:"rootFolder"`
	// VSTS tenant id.
	TenantId *string `pulumi:"tenantId"`
}

// FactoryVSTSConfigurationInput is an input type that accepts FactoryVSTSConfigurationArgs and FactoryVSTSConfigurationOutput values.
// You can construct a concrete instance of `FactoryVSTSConfigurationInput` via:
//
//          FactoryVSTSConfigurationArgs{...}
type FactoryVSTSConfigurationInput interface {
	pulumi.Input

	ToFactoryVSTSConfigurationOutput() FactoryVSTSConfigurationOutput
	ToFactoryVSTSConfigurationOutputWithContext(context.Context) FactoryVSTSConfigurationOutput
}

// Factory's VSTS repo information.
type FactoryVSTSConfigurationArgs struct {
	// VSTS account name.
	AccountName pulumi.StringPtrInput `pulumi:"accountName"`
	// VSTS collaboration branch.
	CollaborationBranch pulumi.StringPtrInput `pulumi:"collaborationBranch"`
	// VSTS last commit id.
	LastCommitId pulumi.StringPtrInput `pulumi:"lastCommitId"`
	// VSTS project name.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// VSTS repository name.
	RepositoryName pulumi.StringPtrInput `pulumi:"repositoryName"`
	// VSTS root folder.
	RootFolder pulumi.StringPtrInput `pulumi:"rootFolder"`
	// VSTS tenant id.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (FactoryVSTSConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryVSTSConfiguration)(nil)).Elem()
}

func (i FactoryVSTSConfigurationArgs) ToFactoryVSTSConfigurationOutput() FactoryVSTSConfigurationOutput {
	return i.ToFactoryVSTSConfigurationOutputWithContext(context.Background())
}

func (i FactoryVSTSConfigurationArgs) ToFactoryVSTSConfigurationOutputWithContext(ctx context.Context) FactoryVSTSConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryVSTSConfigurationOutput)
}

func (i FactoryVSTSConfigurationArgs) ToFactoryVSTSConfigurationPtrOutput() FactoryVSTSConfigurationPtrOutput {
	return i.ToFactoryVSTSConfigurationPtrOutputWithContext(context.Background())
}

func (i FactoryVSTSConfigurationArgs) ToFactoryVSTSConfigurationPtrOutputWithContext(ctx context.Context) FactoryVSTSConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryVSTSConfigurationOutput).ToFactoryVSTSConfigurationPtrOutputWithContext(ctx)
}

// FactoryVSTSConfigurationPtrInput is an input type that accepts FactoryVSTSConfigurationArgs, FactoryVSTSConfigurationPtr and FactoryVSTSConfigurationPtrOutput values.
// You can construct a concrete instance of `FactoryVSTSConfigurationPtrInput` via:
//
//          FactoryVSTSConfigurationArgs{...}
//
//  or:
//
//          nil
type FactoryVSTSConfigurationPtrInput interface {
	pulumi.Input

	ToFactoryVSTSConfigurationPtrOutput() FactoryVSTSConfigurationPtrOutput
	ToFactoryVSTSConfigurationPtrOutputWithContext(context.Context) FactoryVSTSConfigurationPtrOutput
}

type factoryVSTSConfigurationPtrType FactoryVSTSConfigurationArgs

func FactoryVSTSConfigurationPtr(v *FactoryVSTSConfigurationArgs) FactoryVSTSConfigurationPtrInput {
	return (*factoryVSTSConfigurationPtrType)(v)
}

func (*factoryVSTSConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryVSTSConfiguration)(nil)).Elem()
}

func (i *factoryVSTSConfigurationPtrType) ToFactoryVSTSConfigurationPtrOutput() FactoryVSTSConfigurationPtrOutput {
	return i.ToFactoryVSTSConfigurationPtrOutputWithContext(context.Background())
}

func (i *factoryVSTSConfigurationPtrType) ToFactoryVSTSConfigurationPtrOutputWithContext(ctx context.Context) FactoryVSTSConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryVSTSConfigurationPtrOutput)
}

// Factory's VSTS repo information.
type FactoryVSTSConfigurationResponse struct {
	// VSTS account name.
	AccountName *string `pulumi:"accountName"`
	// VSTS collaboration branch.
	CollaborationBranch *string `pulumi:"collaborationBranch"`
	// VSTS last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// VSTS project name.
	ProjectName *string `pulumi:"projectName"`
	// VSTS repository name.
	RepositoryName *string `pulumi:"repositoryName"`
	// VSTS root folder.
	RootFolder *string `pulumi:"rootFolder"`
	// VSTS tenant id.
	TenantId *string `pulumi:"tenantId"`
}

// Factory's VSTS repo information.
type FactoryVSTSConfigurationResponseOutput struct{ *pulumi.OutputState }

func (FactoryVSTSConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryVSTSConfigurationResponse)(nil)).Elem()
}

func (o FactoryVSTSConfigurationResponseOutput) ToFactoryVSTSConfigurationResponseOutput() FactoryVSTSConfigurationResponseOutput {
	return o
}

func (o FactoryVSTSConfigurationResponseOutput) ToFactoryVSTSConfigurationResponseOutputWithContext(ctx context.Context) FactoryVSTSConfigurationResponseOutput {
	return o
}

func (o FactoryVSTSConfigurationResponseOutput) ToFactoryVSTSConfigurationResponsePtrOutput() FactoryVSTSConfigurationResponsePtrOutput {
	return o.ToFactoryVSTSConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o FactoryVSTSConfigurationResponseOutput) ToFactoryVSTSConfigurationResponsePtrOutputWithContext(ctx context.Context) FactoryVSTSConfigurationResponsePtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *FactoryVSTSConfigurationResponse {
		return &v
	}).(FactoryVSTSConfigurationResponsePtrOutput)
}

// VSTS account name.
func (o FactoryVSTSConfigurationResponseOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// VSTS collaboration branch.
func (o FactoryVSTSConfigurationResponseOutput) CollaborationBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.CollaborationBranch }).(pulumi.StringPtrOutput)
}

// VSTS last commit id.
func (o FactoryVSTSConfigurationResponseOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.LastCommitId }).(pulumi.StringPtrOutput)
}

// VSTS project name.
func (o FactoryVSTSConfigurationResponseOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// VSTS repository name.
func (o FactoryVSTSConfigurationResponseOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.RepositoryName }).(pulumi.StringPtrOutput)
}

// VSTS root folder.
func (o FactoryVSTSConfigurationResponseOutput) RootFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.RootFolder }).(pulumi.StringPtrOutput)
}

// VSTS tenant id.
func (o FactoryVSTSConfigurationResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type FactoryVSTSConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (FactoryVSTSConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryVSTSConfigurationResponse)(nil)).Elem()
}

func (o FactoryVSTSConfigurationResponsePtrOutput) ToFactoryVSTSConfigurationResponsePtrOutput() FactoryVSTSConfigurationResponsePtrOutput {
	return o
}

func (o FactoryVSTSConfigurationResponsePtrOutput) ToFactoryVSTSConfigurationResponsePtrOutputWithContext(ctx context.Context) FactoryVSTSConfigurationResponsePtrOutput {
	return o
}

func (o FactoryVSTSConfigurationResponsePtrOutput) Elem() FactoryVSTSConfigurationResponseOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) FactoryVSTSConfigurationResponse { return *v }).(FactoryVSTSConfigurationResponseOutput)
}

// VSTS account name.
func (o FactoryVSTSConfigurationResponsePtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccountName
	}).(pulumi.StringPtrOutput)
}

// VSTS collaboration branch.
func (o FactoryVSTSConfigurationResponsePtrOutput) CollaborationBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CollaborationBranch
	}).(pulumi.StringPtrOutput)
}

// VSTS last commit id.
func (o FactoryVSTSConfigurationResponsePtrOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastCommitId
	}).(pulumi.StringPtrOutput)
}

// VSTS project name.
func (o FactoryVSTSConfigurationResponsePtrOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProjectName
	}).(pulumi.StringPtrOutput)
}

// VSTS repository name.
func (o FactoryVSTSConfigurationResponsePtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// VSTS root folder.
func (o FactoryVSTSConfigurationResponsePtrOutput) RootFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.RootFolder
	}).(pulumi.StringPtrOutput)
}

// VSTS tenant id.
func (o FactoryVSTSConfigurationResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// File system linked service.
type FileServerLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host map[string]interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to logon the server.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId map[string]interface{} `pulumi:"userId"`
}

// FileServerLinkedServiceInput is an input type that accepts FileServerLinkedServiceArgs and FileServerLinkedServiceOutput values.
// You can construct a concrete instance of `FileServerLinkedServiceInput` via:
//
//          FileServerLinkedServiceArgs{...}
type FileServerLinkedServiceInput interface {
	pulumi.Input

	ToFileServerLinkedServiceOutput() FileServerLinkedServiceOutput
	ToFileServerLinkedServiceOutputWithContext(context.Context) FileServerLinkedServiceOutput
}

// File system linked service.
type FileServerLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host pulumi.MapInput `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to logon the server.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId pulumi.MapInput `pulumi:"userId"`
}

func (FileServerLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerLinkedService)(nil)).Elem()
}

func (i FileServerLinkedServiceArgs) ToFileServerLinkedServiceOutput() FileServerLinkedServiceOutput {
	return i.ToFileServerLinkedServiceOutputWithContext(context.Background())
}

func (i FileServerLinkedServiceArgs) ToFileServerLinkedServiceOutputWithContext(ctx context.Context) FileServerLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileServerLinkedServiceOutput)
}

// File system linked service.
type FileServerLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host map[string]interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to logon the server.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId map[string]interface{} `pulumi:"userId"`
}

// File system linked service.
type FileServerLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (FileServerLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerLinkedServiceResponse)(nil)).Elem()
}

func (o FileServerLinkedServiceResponseOutput) ToFileServerLinkedServiceResponseOutput() FileServerLinkedServiceResponseOutput {
	return o
}

func (o FileServerLinkedServiceResponseOutput) ToFileServerLinkedServiceResponseOutputWithContext(ctx context.Context) FileServerLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o FileServerLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o FileServerLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o FileServerLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o FileServerLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Host name of the server. Type: string (or Expression with resultType string).
func (o FileServerLinkedServiceResponseOutput) Host() pulumi.MapOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) map[string]interface{} { return v.Host }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o FileServerLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password to logon the server.
func (o FileServerLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o FileServerLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User ID to logon the server. Type: string (or Expression with resultType string).
func (o FileServerLinkedServiceResponseOutput) UserId() pulumi.MapOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) map[string]interface{} { return v.UserId }).(pulumi.MapOutput)
}

// An on-premises file system dataset.
type FileShareDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The data compression method used for the file system.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
	FileFilter map[string]interface{} `pulumi:"fileFilter"`
	// The name of the on-premises file system. Type: string (or Expression with resultType string).
	FileName map[string]interface{} `pulumi:"fileName"`
	// The path of the on-premises file system. Type: string (or Expression with resultType string).
	FolderPath map[string]interface{} `pulumi:"folderPath"`
	// The format of the files.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// FileShareDatasetInput is an input type that accepts FileShareDatasetArgs and FileShareDatasetOutput values.
// You can construct a concrete instance of `FileShareDatasetInput` via:
//
//          FileShareDatasetArgs{...}
type FileShareDatasetInput interface {
	pulumi.Input

	ToFileShareDatasetOutput() FileShareDatasetOutput
	ToFileShareDatasetOutputWithContext(context.Context) FileShareDatasetOutput
}

// An on-premises file system dataset.
type FileShareDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The data compression method used for the file system.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
	FileFilter pulumi.MapInput `pulumi:"fileFilter"`
	// The name of the on-premises file system. Type: string (or Expression with resultType string).
	FileName pulumi.MapInput `pulumi:"fileName"`
	// The path of the on-premises file system. Type: string (or Expression with resultType string).
	FolderPath pulumi.MapInput `pulumi:"folderPath"`
	// The format of the files.
	Format pulumi.Input `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FileShareDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShareDataset)(nil)).Elem()
}

func (i FileShareDatasetArgs) ToFileShareDatasetOutput() FileShareDatasetOutput {
	return i.ToFileShareDatasetOutputWithContext(context.Background())
}

func (i FileShareDatasetArgs) ToFileShareDatasetOutputWithContext(ctx context.Context) FileShareDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareDatasetOutput)
}

// An on-premises file system dataset.
type FileShareDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The data compression method used for the file system.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
	FileFilter map[string]interface{} `pulumi:"fileFilter"`
	// The name of the on-premises file system. Type: string (or Expression with resultType string).
	FileName map[string]interface{} `pulumi:"fileName"`
	// The path of the on-premises file system. Type: string (or Expression with resultType string).
	FolderPath map[string]interface{} `pulumi:"folderPath"`
	// The format of the files.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// An on-premises file system dataset.
type FileShareDatasetResponseOutput struct{ *pulumi.OutputState }

func (FileShareDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShareDatasetResponse)(nil)).Elem()
}

func (o FileShareDatasetResponseOutput) ToFileShareDatasetResponseOutput() FileShareDatasetResponseOutput {
	return o
}

func (o FileShareDatasetResponseOutput) ToFileShareDatasetResponseOutputWithContext(ctx context.Context) FileShareDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o FileShareDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The data compression method used for the file system.
func (o FileShareDatasetResponseOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o FileShareDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
func (o FileShareDatasetResponseOutput) FileFilter() pulumi.MapOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) map[string]interface{} { return v.FileFilter }).(pulumi.MapOutput)
}

// The name of the on-premises file system. Type: string (or Expression with resultType string).
func (o FileShareDatasetResponseOutput) FileName() pulumi.MapOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) map[string]interface{} { return v.FileName }).(pulumi.MapOutput)
}

// The path of the on-premises file system. Type: string (or Expression with resultType string).
func (o FileShareDatasetResponseOutput) FolderPath() pulumi.MapOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) map[string]interface{} { return v.FolderPath }).(pulumi.MapOutput)
}

// The format of the files.
func (o FileShareDatasetResponseOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o FileShareDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o FileShareDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o FileShareDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o FileShareDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A FTP server Linked Service.
type FtpServerLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation map[string]interface{} `pulumi:"enableServerCertificateValidation"`
	// If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableSsl map[string]interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Host name of the FTP server. Type: string (or Expression with resultType string).
	Host map[string]interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to logon the FTP server.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0.
	Port map[string]interface{} `pulumi:"port"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username to logon the FTP server. Type: string (or Expression with resultType string).
	UserName map[string]interface{} `pulumi:"userName"`
}

// FtpServerLinkedServiceInput is an input type that accepts FtpServerLinkedServiceArgs and FtpServerLinkedServiceOutput values.
// You can construct a concrete instance of `FtpServerLinkedServiceInput` via:
//
//          FtpServerLinkedServiceArgs{...}
type FtpServerLinkedServiceInput interface {
	pulumi.Input

	ToFtpServerLinkedServiceOutput() FtpServerLinkedServiceOutput
	ToFtpServerLinkedServiceOutputWithContext(context.Context) FtpServerLinkedServiceOutput
}

// A FTP server Linked Service.
type FtpServerLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation pulumi.MapInput `pulumi:"enableServerCertificateValidation"`
	// If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableSsl pulumi.MapInput `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Host name of the FTP server. Type: string (or Expression with resultType string).
	Host pulumi.MapInput `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to logon the FTP server.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0.
	Port pulumi.MapInput `pulumi:"port"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username to logon the FTP server. Type: string (or Expression with resultType string).
	UserName pulumi.MapInput `pulumi:"userName"`
}

func (FtpServerLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FtpServerLinkedService)(nil)).Elem()
}

func (i FtpServerLinkedServiceArgs) ToFtpServerLinkedServiceOutput() FtpServerLinkedServiceOutput {
	return i.ToFtpServerLinkedServiceOutputWithContext(context.Background())
}

func (i FtpServerLinkedServiceArgs) ToFtpServerLinkedServiceOutputWithContext(ctx context.Context) FtpServerLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FtpServerLinkedServiceOutput)
}

// A FTP server Linked Service.
type FtpServerLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation map[string]interface{} `pulumi:"enableServerCertificateValidation"`
	// If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableSsl map[string]interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Host name of the FTP server. Type: string (or Expression with resultType string).
	Host map[string]interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to logon the FTP server.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0.
	Port map[string]interface{} `pulumi:"port"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username to logon the FTP server. Type: string (or Expression with resultType string).
	UserName map[string]interface{} `pulumi:"userName"`
}

// A FTP server Linked Service.
type FtpServerLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (FtpServerLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FtpServerLinkedServiceResponse)(nil)).Elem()
}

func (o FtpServerLinkedServiceResponseOutput) ToFtpServerLinkedServiceResponseOutput() FtpServerLinkedServiceResponseOutput {
	return o
}

func (o FtpServerLinkedServiceResponseOutput) ToFtpServerLinkedServiceResponseOutputWithContext(ctx context.Context) FtpServerLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o FtpServerLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The authentication type to be used to connect to the FTP server.
func (o FtpServerLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o FtpServerLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o FtpServerLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
func (o FtpServerLinkedServiceResponseOutput) EnableServerCertificateValidation() pulumi.MapOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) map[string]interface{} {
		return v.EnableServerCertificateValidation
	}).(pulumi.MapOutput)
}

// If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
func (o FtpServerLinkedServiceResponseOutput) EnableSsl() pulumi.MapOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) map[string]interface{} { return v.EnableSsl }).(pulumi.MapOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o FtpServerLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Host name of the FTP server. Type: string (or Expression with resultType string).
func (o FtpServerLinkedServiceResponseOutput) Host() pulumi.MapOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) map[string]interface{} { return v.Host }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o FtpServerLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password to logon the FTP server.
func (o FtpServerLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0.
func (o FtpServerLinkedServiceResponseOutput) Port() pulumi.MapOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) map[string]interface{} { return v.Port }).(pulumi.MapOutput)
}

// Type of linked service.
func (o FtpServerLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username to logon the FTP server. Type: string (or Expression with resultType string).
func (o FtpServerLinkedServiceResponseOutput) UserName() pulumi.MapOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) map[string]interface{} { return v.UserName }).(pulumi.MapOutput)
}

// Google BigQuery service linked service.
type GoogleBigQueryLinkedService struct {
	// A comma-separated list of public BigQuery projects to access.
	AdditionalProjects map[string]interface{} `pulumi:"additionalProjects"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id of the google application used to acquire the refresh token.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
	Email map[string]interface{} `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR.
	KeyFilePath map[string]interface{} `pulumi:"keyFilePath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The default BigQuery project to query against.
	Project map[string]interface{} `pulumi:"project"`
	// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is false.
	RequestGoogleDriveScope map[string]interface{} `pulumi:"requestGoogleDriveScope"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath map[string]interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore map[string]interface{} `pulumi:"useSystemTrustStore"`
}

// GoogleBigQueryLinkedServiceInput is an input type that accepts GoogleBigQueryLinkedServiceArgs and GoogleBigQueryLinkedServiceOutput values.
// You can construct a concrete instance of `GoogleBigQueryLinkedServiceInput` via:
//
//          GoogleBigQueryLinkedServiceArgs{...}
type GoogleBigQueryLinkedServiceInput interface {
	pulumi.Input

	ToGoogleBigQueryLinkedServiceOutput() GoogleBigQueryLinkedServiceOutput
	ToGoogleBigQueryLinkedServiceOutputWithContext(context.Context) GoogleBigQueryLinkedServiceOutput
}

// Google BigQuery service linked service.
type GoogleBigQueryLinkedServiceArgs struct {
	// A comma-separated list of public BigQuery projects to access.
	AdditionalProjects pulumi.MapInput `pulumi:"additionalProjects"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The client id of the google application used to acquire the refresh token.
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
	Email pulumi.MapInput `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR.
	KeyFilePath pulumi.MapInput `pulumi:"keyFilePath"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The default BigQuery project to query against.
	Project pulumi.MapInput `pulumi:"project"`
	// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
	RefreshToken pulumi.Input `pulumi:"refreshToken"`
	// Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is false.
	RequestGoogleDriveScope pulumi.MapInput `pulumi:"requestGoogleDriveScope"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.MapInput `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.MapInput `pulumi:"useSystemTrustStore"`
}

func (GoogleBigQueryLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryLinkedService)(nil)).Elem()
}

func (i GoogleBigQueryLinkedServiceArgs) ToGoogleBigQueryLinkedServiceOutput() GoogleBigQueryLinkedServiceOutput {
	return i.ToGoogleBigQueryLinkedServiceOutputWithContext(context.Background())
}

func (i GoogleBigQueryLinkedServiceArgs) ToGoogleBigQueryLinkedServiceOutputWithContext(ctx context.Context) GoogleBigQueryLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleBigQueryLinkedServiceOutput)
}

// Google BigQuery service linked service.
type GoogleBigQueryLinkedServiceResponse struct {
	// A comma-separated list of public BigQuery projects to access.
	AdditionalProjects map[string]interface{} `pulumi:"additionalProjects"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id of the google application used to acquire the refresh token.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
	Email map[string]interface{} `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR.
	KeyFilePath map[string]interface{} `pulumi:"keyFilePath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The default BigQuery project to query against.
	Project map[string]interface{} `pulumi:"project"`
	// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is false.
	RequestGoogleDriveScope map[string]interface{} `pulumi:"requestGoogleDriveScope"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath map[string]interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore map[string]interface{} `pulumi:"useSystemTrustStore"`
}

// Google BigQuery service linked service.
type GoogleBigQueryLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (GoogleBigQueryLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryLinkedServiceResponse)(nil)).Elem()
}

func (o GoogleBigQueryLinkedServiceResponseOutput) ToGoogleBigQueryLinkedServiceResponseOutput() GoogleBigQueryLinkedServiceResponseOutput {
	return o
}

func (o GoogleBigQueryLinkedServiceResponseOutput) ToGoogleBigQueryLinkedServiceResponseOutputWithContext(ctx context.Context) GoogleBigQueryLinkedServiceResponseOutput {
	return o
}

// A comma-separated list of public BigQuery projects to access.
func (o GoogleBigQueryLinkedServiceResponseOutput) AdditionalProjects() pulumi.MapOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) map[string]interface{} { return v.AdditionalProjects }).(pulumi.MapOutput)
}

// List of tags that can be used for describing the Dataset.
func (o GoogleBigQueryLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
func (o GoogleBigQueryLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The client id of the google application used to acquire the refresh token.
func (o GoogleBigQueryLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret of the google application used to acquire the refresh token.
func (o GoogleBigQueryLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o GoogleBigQueryLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o GoogleBigQueryLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
func (o GoogleBigQueryLinkedServiceResponseOutput) Email() pulumi.MapOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) map[string]interface{} { return v.Email }).(pulumi.MapOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o GoogleBigQueryLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR.
func (o GoogleBigQueryLinkedServiceResponseOutput) KeyFilePath() pulumi.MapOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) map[string]interface{} { return v.KeyFilePath }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o GoogleBigQueryLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The default BigQuery project to query against.
func (o GoogleBigQueryLinkedServiceResponseOutput) Project() pulumi.MapOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) map[string]interface{} { return v.Project }).(pulumi.MapOutput)
}

// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
func (o GoogleBigQueryLinkedServiceResponseOutput) RefreshToken() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.RefreshToken }).(pulumi.AnyOutput)
}

// Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is false.
func (o GoogleBigQueryLinkedServiceResponseOutput) RequestGoogleDriveScope() pulumi.MapOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) map[string]interface{} { return v.RequestGoogleDriveScope }).(pulumi.MapOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o GoogleBigQueryLinkedServiceResponseOutput) TrustedCertPath() pulumi.MapOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) map[string]interface{} { return v.TrustedCertPath }).(pulumi.MapOutput)
}

// Type of linked service.
func (o GoogleBigQueryLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o GoogleBigQueryLinkedServiceResponseOutput) UseSystemTrustStore() pulumi.MapOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) map[string]interface{} { return v.UseSystemTrustStore }).(pulumi.MapOutput)
}

// Google BigQuery service dataset.
type GoogleBigQueryObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// GoogleBigQueryObjectDatasetInput is an input type that accepts GoogleBigQueryObjectDatasetArgs and GoogleBigQueryObjectDatasetOutput values.
// You can construct a concrete instance of `GoogleBigQueryObjectDatasetInput` via:
//
//          GoogleBigQueryObjectDatasetArgs{...}
type GoogleBigQueryObjectDatasetInput interface {
	pulumi.Input

	ToGoogleBigQueryObjectDatasetOutput() GoogleBigQueryObjectDatasetOutput
	ToGoogleBigQueryObjectDatasetOutputWithContext(context.Context) GoogleBigQueryObjectDatasetOutput
}

// Google BigQuery service dataset.
type GoogleBigQueryObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GoogleBigQueryObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryObjectDataset)(nil)).Elem()
}

func (i GoogleBigQueryObjectDatasetArgs) ToGoogleBigQueryObjectDatasetOutput() GoogleBigQueryObjectDatasetOutput {
	return i.ToGoogleBigQueryObjectDatasetOutputWithContext(context.Background())
}

func (i GoogleBigQueryObjectDatasetArgs) ToGoogleBigQueryObjectDatasetOutputWithContext(ctx context.Context) GoogleBigQueryObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleBigQueryObjectDatasetOutput)
}

// Google BigQuery service dataset.
type GoogleBigQueryObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Google BigQuery service dataset.
type GoogleBigQueryObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (GoogleBigQueryObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryObjectDatasetResponse)(nil)).Elem()
}

func (o GoogleBigQueryObjectDatasetResponseOutput) ToGoogleBigQueryObjectDatasetResponseOutput() GoogleBigQueryObjectDatasetResponseOutput {
	return o
}

func (o GoogleBigQueryObjectDatasetResponseOutput) ToGoogleBigQueryObjectDatasetResponseOutputWithContext(ctx context.Context) GoogleBigQueryObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o GoogleBigQueryObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o GoogleBigQueryObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o GoogleBigQueryObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o GoogleBigQueryObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o GoogleBigQueryObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o GoogleBigQueryObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Greenplum Database linked service.
type GreenplumLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// GreenplumLinkedServiceInput is an input type that accepts GreenplumLinkedServiceArgs and GreenplumLinkedServiceOutput values.
// You can construct a concrete instance of `GreenplumLinkedServiceInput` via:
//
//          GreenplumLinkedServiceArgs{...}
type GreenplumLinkedServiceInput interface {
	pulumi.Input

	ToGreenplumLinkedServiceOutput() GreenplumLinkedServiceOutput
	ToGreenplumLinkedServiceOutputWithContext(context.Context) GreenplumLinkedServiceOutput
}

// Greenplum Database linked service.
type GreenplumLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.MapInput `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GreenplumLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GreenplumLinkedService)(nil)).Elem()
}

func (i GreenplumLinkedServiceArgs) ToGreenplumLinkedServiceOutput() GreenplumLinkedServiceOutput {
	return i.ToGreenplumLinkedServiceOutputWithContext(context.Background())
}

func (i GreenplumLinkedServiceArgs) ToGreenplumLinkedServiceOutputWithContext(ctx context.Context) GreenplumLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GreenplumLinkedServiceOutput)
}

// Greenplum Database linked service.
type GreenplumLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// Greenplum Database linked service.
type GreenplumLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (GreenplumLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GreenplumLinkedServiceResponse)(nil)).Elem()
}

func (o GreenplumLinkedServiceResponseOutput) ToGreenplumLinkedServiceResponseOutput() GreenplumLinkedServiceResponseOutput {
	return o
}

func (o GreenplumLinkedServiceResponseOutput) ToGreenplumLinkedServiceResponseOutputWithContext(ctx context.Context) GreenplumLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o GreenplumLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v GreenplumLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o GreenplumLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v GreenplumLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o GreenplumLinkedServiceResponseOutput) ConnectionString() pulumi.MapOutput {
	return o.ApplyT(func(v GreenplumLinkedServiceResponse) map[string]interface{} { return v.ConnectionString }).(pulumi.MapOutput)
}

// Linked service description.
func (o GreenplumLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreenplumLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o GreenplumLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v GreenplumLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o GreenplumLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v GreenplumLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o GreenplumLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GreenplumLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Greenplum Database dataset.
type GreenplumTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// GreenplumTableDatasetInput is an input type that accepts GreenplumTableDatasetArgs and GreenplumTableDatasetOutput values.
// You can construct a concrete instance of `GreenplumTableDatasetInput` via:
//
//          GreenplumTableDatasetArgs{...}
type GreenplumTableDatasetInput interface {
	pulumi.Input

	ToGreenplumTableDatasetOutput() GreenplumTableDatasetOutput
	ToGreenplumTableDatasetOutputWithContext(context.Context) GreenplumTableDatasetOutput
}

// Greenplum Database dataset.
type GreenplumTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GreenplumTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GreenplumTableDataset)(nil)).Elem()
}

func (i GreenplumTableDatasetArgs) ToGreenplumTableDatasetOutput() GreenplumTableDatasetOutput {
	return i.ToGreenplumTableDatasetOutputWithContext(context.Background())
}

func (i GreenplumTableDatasetArgs) ToGreenplumTableDatasetOutputWithContext(ctx context.Context) GreenplumTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GreenplumTableDatasetOutput)
}

// Greenplum Database dataset.
type GreenplumTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Greenplum Database dataset.
type GreenplumTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (GreenplumTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GreenplumTableDatasetResponse)(nil)).Elem()
}

func (o GreenplumTableDatasetResponseOutput) ToGreenplumTableDatasetResponseOutput() GreenplumTableDatasetResponseOutput {
	return o
}

func (o GreenplumTableDatasetResponseOutput) ToGreenplumTableDatasetResponseOutputWithContext(ctx context.Context) GreenplumTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o GreenplumTableDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o GreenplumTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o GreenplumTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o GreenplumTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o GreenplumTableDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o GreenplumTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// HBase server linked service.
type HBaseLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch map[string]interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert map[string]interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication mechanism to use to connect to the HBase server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl map[string]interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the HBase server. (i.e. 192.168.222.160)
	Host map[string]interface{} `pulumi:"host"`
	// The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)
	HttpPath map[string]interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the HBase instance uses to listen for client connections. The default value is 9090.
	Port map[string]interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath map[string]interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The user name used to connect to the HBase instance.
	Username map[string]interface{} `pulumi:"username"`
}

// HBaseLinkedServiceInput is an input type that accepts HBaseLinkedServiceArgs and HBaseLinkedServiceOutput values.
// You can construct a concrete instance of `HBaseLinkedServiceInput` via:
//
//          HBaseLinkedServiceArgs{...}
type HBaseLinkedServiceInput interface {
	pulumi.Input

	ToHBaseLinkedServiceOutput() HBaseLinkedServiceOutput
	ToHBaseLinkedServiceOutputWithContext(context.Context) HBaseLinkedServiceOutput
}

// HBase server linked service.
type HBaseLinkedServiceArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.MapInput `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.MapInput `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The authentication mechanism to use to connect to the HBase server.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.MapInput `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The IP address or host name of the HBase server. (i.e. 192.168.222.160)
	Host pulumi.MapInput `pulumi:"host"`
	// The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)
	HttpPath pulumi.MapInput `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the HBase instance uses to listen for client connections. The default value is 9090.
	Port pulumi.MapInput `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.MapInput `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The user name used to connect to the HBase instance.
	Username pulumi.MapInput `pulumi:"username"`
}

func (HBaseLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseLinkedService)(nil)).Elem()
}

func (i HBaseLinkedServiceArgs) ToHBaseLinkedServiceOutput() HBaseLinkedServiceOutput {
	return i.ToHBaseLinkedServiceOutputWithContext(context.Background())
}

func (i HBaseLinkedServiceArgs) ToHBaseLinkedServiceOutputWithContext(ctx context.Context) HBaseLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseLinkedServiceOutput)
}

// HBase server linked service.
type HBaseLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch map[string]interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert map[string]interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication mechanism to use to connect to the HBase server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl map[string]interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the HBase server. (i.e. 192.168.222.160)
	Host map[string]interface{} `pulumi:"host"`
	// The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)
	HttpPath map[string]interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the HBase instance uses to listen for client connections. The default value is 9090.
	Port map[string]interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath map[string]interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The user name used to connect to the HBase instance.
	Username map[string]interface{} `pulumi:"username"`
}

// HBase server linked service.
type HBaseLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (HBaseLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseLinkedServiceResponse)(nil)).Elem()
}

func (o HBaseLinkedServiceResponseOutput) ToHBaseLinkedServiceResponseOutput() HBaseLinkedServiceResponseOutput {
	return o
}

func (o HBaseLinkedServiceResponseOutput) ToHBaseLinkedServiceResponseOutputWithContext(ctx context.Context) HBaseLinkedServiceResponseOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o HBaseLinkedServiceResponseOutput) AllowHostNameCNMismatch() pulumi.MapOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) map[string]interface{} { return v.AllowHostNameCNMismatch }).(pulumi.MapOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o HBaseLinkedServiceResponseOutput) AllowSelfSignedServerCert() pulumi.MapOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) map[string]interface{} { return v.AllowSelfSignedServerCert }).(pulumi.MapOutput)
}

// List of tags that can be used for describing the Dataset.
func (o HBaseLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The authentication mechanism to use to connect to the HBase server.
func (o HBaseLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o HBaseLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o HBaseLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o HBaseLinkedServiceResponseOutput) EnableSsl() pulumi.MapOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) map[string]interface{} { return v.EnableSsl }).(pulumi.MapOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o HBaseLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The IP address or host name of the HBase server. (i.e. 192.168.222.160)
func (o HBaseLinkedServiceResponseOutput) Host() pulumi.MapOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) map[string]interface{} { return v.Host }).(pulumi.MapOutput)
}

// The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)
func (o HBaseLinkedServiceResponseOutput) HttpPath() pulumi.MapOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) map[string]interface{} { return v.HttpPath }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o HBaseLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name.
func (o HBaseLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the HBase instance uses to listen for client connections. The default value is 9090.
func (o HBaseLinkedServiceResponseOutput) Port() pulumi.MapOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) map[string]interface{} { return v.Port }).(pulumi.MapOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o HBaseLinkedServiceResponseOutput) TrustedCertPath() pulumi.MapOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) map[string]interface{} { return v.TrustedCertPath }).(pulumi.MapOutput)
}

// Type of linked service.
func (o HBaseLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The user name used to connect to the HBase instance.
func (o HBaseLinkedServiceResponseOutput) Username() pulumi.MapOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) map[string]interface{} { return v.Username }).(pulumi.MapOutput)
}

// HBase server dataset.
type HBaseObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// HBaseObjectDatasetInput is an input type that accepts HBaseObjectDatasetArgs and HBaseObjectDatasetOutput values.
// You can construct a concrete instance of `HBaseObjectDatasetInput` via:
//
//          HBaseObjectDatasetArgs{...}
type HBaseObjectDatasetInput interface {
	pulumi.Input

	ToHBaseObjectDatasetOutput() HBaseObjectDatasetOutput
	ToHBaseObjectDatasetOutputWithContext(context.Context) HBaseObjectDatasetOutput
}

// HBase server dataset.
type HBaseObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HBaseObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseObjectDataset)(nil)).Elem()
}

func (i HBaseObjectDatasetArgs) ToHBaseObjectDatasetOutput() HBaseObjectDatasetOutput {
	return i.ToHBaseObjectDatasetOutputWithContext(context.Background())
}

func (i HBaseObjectDatasetArgs) ToHBaseObjectDatasetOutputWithContext(ctx context.Context) HBaseObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseObjectDatasetOutput)
}

// HBase server dataset.
type HBaseObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// HBase server dataset.
type HBaseObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (HBaseObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseObjectDatasetResponse)(nil)).Elem()
}

func (o HBaseObjectDatasetResponseOutput) ToHBaseObjectDatasetResponseOutput() HBaseObjectDatasetResponseOutput {
	return o
}

func (o HBaseObjectDatasetResponseOutput) ToHBaseObjectDatasetResponseOutputWithContext(ctx context.Context) HBaseObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o HBaseObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o HBaseObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o HBaseObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o HBaseObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o HBaseObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o HBaseObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// HDInsight linked service.
type HDInsightLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// HDInsight cluster URI. Type: string (or Expression with resultType string).
	ClusterUri map[string]interface{} `pulumi:"clusterUri"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// A reference to the Azure SQL linked service that points to the HCatalog database.
	HcatalogLinkedServiceName *LinkedServiceReference `pulumi:"hcatalogLinkedServiceName"`
	// The Azure Storage linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// HDInsight cluster password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// HDInsight cluster user name. Type: string (or Expression with resultType string).
	UserName map[string]interface{} `pulumi:"userName"`
}

// HDInsightLinkedServiceInput is an input type that accepts HDInsightLinkedServiceArgs and HDInsightLinkedServiceOutput values.
// You can construct a concrete instance of `HDInsightLinkedServiceInput` via:
//
//          HDInsightLinkedServiceArgs{...}
type HDInsightLinkedServiceInput interface {
	pulumi.Input

	ToHDInsightLinkedServiceOutput() HDInsightLinkedServiceOutput
	ToHDInsightLinkedServiceOutputWithContext(context.Context) HDInsightLinkedServiceOutput
}

// HDInsight linked service.
type HDInsightLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// HDInsight cluster URI. Type: string (or Expression with resultType string).
	ClusterUri pulumi.MapInput `pulumi:"clusterUri"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// A reference to the Azure SQL linked service that points to the HCatalog database.
	HcatalogLinkedServiceName LinkedServiceReferencePtrInput `pulumi:"hcatalogLinkedServiceName"`
	// The Azure Storage linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// HDInsight cluster password.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// HDInsight cluster user name. Type: string (or Expression with resultType string).
	UserName pulumi.MapInput `pulumi:"userName"`
}

func (HDInsightLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightLinkedService)(nil)).Elem()
}

func (i HDInsightLinkedServiceArgs) ToHDInsightLinkedServiceOutput() HDInsightLinkedServiceOutput {
	return i.ToHDInsightLinkedServiceOutputWithContext(context.Background())
}

func (i HDInsightLinkedServiceArgs) ToHDInsightLinkedServiceOutputWithContext(ctx context.Context) HDInsightLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightLinkedServiceOutput)
}

// HDInsight linked service.
type HDInsightLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// HDInsight cluster URI. Type: string (or Expression with resultType string).
	ClusterUri map[string]interface{} `pulumi:"clusterUri"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// A reference to the Azure SQL linked service that points to the HCatalog database.
	HcatalogLinkedServiceName *LinkedServiceReferenceResponse `pulumi:"hcatalogLinkedServiceName"`
	// The Azure Storage linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// HDInsight cluster password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// HDInsight cluster user name. Type: string (or Expression with resultType string).
	UserName map[string]interface{} `pulumi:"userName"`
}

// HDInsight linked service.
type HDInsightLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (HDInsightLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightLinkedServiceResponse)(nil)).Elem()
}

func (o HDInsightLinkedServiceResponseOutput) ToHDInsightLinkedServiceResponseOutput() HDInsightLinkedServiceResponseOutput {
	return o
}

func (o HDInsightLinkedServiceResponseOutput) ToHDInsightLinkedServiceResponseOutputWithContext(ctx context.Context) HDInsightLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o HDInsightLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// HDInsight cluster URI. Type: string (or Expression with resultType string).
func (o HDInsightLinkedServiceResponseOutput) ClusterUri() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) map[string]interface{} { return v.ClusterUri }).(pulumi.MapOutput)
}

// The integration runtime reference.
func (o HDInsightLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o HDInsightLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o HDInsightLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// A reference to the Azure SQL linked service that points to the HCatalog database.
func (o HDInsightLinkedServiceResponseOutput) HcatalogLinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) *LinkedServiceReferenceResponse {
		return v.HcatalogLinkedServiceName
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// The Azure Storage linked service reference.
func (o HDInsightLinkedServiceResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) *LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponsePtrOutput)
}

// Parameters for linked service.
func (o HDInsightLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// HDInsight cluster password.
func (o HDInsightLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o HDInsightLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// HDInsight cluster user name. Type: string (or Expression with resultType string).
func (o HDInsightLinkedServiceResponseOutput) UserName() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) map[string]interface{} { return v.UserName }).(pulumi.MapOutput)
}

// HDInsight ondemand linked service.
type HDInsightOnDemandLinkedService struct {
	// Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf.
	AdditionalLinkedServiceNames []LinkedServiceReference `pulumi:"additionalLinkedServiceNames"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string).
	ClusterNamePrefix map[string]interface{} `pulumi:"clusterNamePrefix"`
	// The password to access the cluster.
	ClusterPassword interface{} `pulumi:"clusterPassword"`
	// The resource group where the cluster belongs. Type: string (or Expression with resultType string).
	ClusterResourceGroup map[string]interface{} `pulumi:"clusterResourceGroup"`
	// Number of worker/data nodes in the cluster. Suggestion value: 4. Type: string (or Expression with resultType string).
	ClusterSize map[string]interface{} `pulumi:"clusterSize"`
	// The password to SSH remotely connect cluster’s node (for Linux).
	ClusterSshPassword interface{} `pulumi:"clusterSshPassword"`
	// The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string).
	ClusterSshUserName map[string]interface{} `pulumi:"clusterSshUserName"`
	// The cluster type. Type: string (or Expression with resultType string).
	ClusterType map[string]interface{} `pulumi:"clusterType"`
	// The username to access the cluster. Type: string (or Expression with resultType string).
	ClusterUserName map[string]interface{} `pulumi:"clusterUserName"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created.
	CoreConfiguration map[string]interface{} `pulumi:"coreConfiguration"`
	// Specifies the size of the data node for the HDInsight cluster.
	DataNodeSize map[string]interface{} `pulumi:"dataNodeSize"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster.
	HBaseConfiguration map[string]interface{} `pulumi:"hBaseConfiguration"`
	// The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore.
	HcatalogLinkedServiceName *LinkedServiceReference `pulumi:"hcatalogLinkedServiceName"`
	// Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster.
	HdfsConfiguration map[string]interface{} `pulumi:"hdfsConfiguration"`
	// Specifies the size of the head node for the HDInsight cluster.
	HeadNodeSize map[string]interface{} `pulumi:"headNodeSize"`
	// Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster.
	HiveConfiguration map[string]interface{} `pulumi:"hiveConfiguration"`
	// The customer’s subscription to host the cluster. Type: string (or Expression with resultType string).
	HostSubscriptionId map[string]interface{} `pulumi:"hostSubscriptionId"`
	// Azure Storage linked service to be used by the on-demand cluster for storing and processing data.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster.
	MapReduceConfiguration map[string]interface{} `pulumi:"mapReduceConfiguration"`
	// Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster.
	OozieConfiguration map[string]interface{} `pulumi:"oozieConfiguration"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string).
	ServicePrincipalId map[string]interface{} `pulumi:"servicePrincipalId"`
	// The key for the service principal id.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The version of spark if the cluster type is 'spark'. Type: string (or Expression with resultType string).
	SparkVersion map[string]interface{} `pulumi:"sparkVersion"`
	// Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster.
	StormConfiguration map[string]interface{} `pulumi:"stormConfiguration"`
	// The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant map[string]interface{} `pulumi:"tenant"`
	// The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string).
	TimeToLive map[string]interface{} `pulumi:"timeToLive"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Version of the HDInsight cluster.  Type: string (or Expression with resultType string).
	Version map[string]interface{} `pulumi:"version"`
	// Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster.
	YarnConfiguration map[string]interface{} `pulumi:"yarnConfiguration"`
	// Specifies the size of the Zoo Keeper node for the HDInsight cluster.
	ZookeeperNodeSize map[string]interface{} `pulumi:"zookeeperNodeSize"`
}

// HDInsightOnDemandLinkedServiceInput is an input type that accepts HDInsightOnDemandLinkedServiceArgs and HDInsightOnDemandLinkedServiceOutput values.
// You can construct a concrete instance of `HDInsightOnDemandLinkedServiceInput` via:
//
//          HDInsightOnDemandLinkedServiceArgs{...}
type HDInsightOnDemandLinkedServiceInput interface {
	pulumi.Input

	ToHDInsightOnDemandLinkedServiceOutput() HDInsightOnDemandLinkedServiceOutput
	ToHDInsightOnDemandLinkedServiceOutputWithContext(context.Context) HDInsightOnDemandLinkedServiceOutput
}

// HDInsight ondemand linked service.
type HDInsightOnDemandLinkedServiceArgs struct {
	// Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf.
	AdditionalLinkedServiceNames LinkedServiceReferenceArrayInput `pulumi:"additionalLinkedServiceNames"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string).
	ClusterNamePrefix pulumi.MapInput `pulumi:"clusterNamePrefix"`
	// The password to access the cluster.
	ClusterPassword pulumi.Input `pulumi:"clusterPassword"`
	// The resource group where the cluster belongs. Type: string (or Expression with resultType string).
	ClusterResourceGroup pulumi.MapInput `pulumi:"clusterResourceGroup"`
	// Number of worker/data nodes in the cluster. Suggestion value: 4. Type: string (or Expression with resultType string).
	ClusterSize pulumi.MapInput `pulumi:"clusterSize"`
	// The password to SSH remotely connect cluster’s node (for Linux).
	ClusterSshPassword pulumi.Input `pulumi:"clusterSshPassword"`
	// The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string).
	ClusterSshUserName pulumi.MapInput `pulumi:"clusterSshUserName"`
	// The cluster type. Type: string (or Expression with resultType string).
	ClusterType pulumi.MapInput `pulumi:"clusterType"`
	// The username to access the cluster. Type: string (or Expression with resultType string).
	ClusterUserName pulumi.MapInput `pulumi:"clusterUserName"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created.
	CoreConfiguration pulumi.MapInput `pulumi:"coreConfiguration"`
	// Specifies the size of the data node for the HDInsight cluster.
	DataNodeSize pulumi.MapInput `pulumi:"dataNodeSize"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster.
	HBaseConfiguration pulumi.MapInput `pulumi:"hBaseConfiguration"`
	// The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore.
	HcatalogLinkedServiceName LinkedServiceReferencePtrInput `pulumi:"hcatalogLinkedServiceName"`
	// Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster.
	HdfsConfiguration pulumi.MapInput `pulumi:"hdfsConfiguration"`
	// Specifies the size of the head node for the HDInsight cluster.
	HeadNodeSize pulumi.MapInput `pulumi:"headNodeSize"`
	// Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster.
	HiveConfiguration pulumi.MapInput `pulumi:"hiveConfiguration"`
	// The customer’s subscription to host the cluster. Type: string (or Expression with resultType string).
	HostSubscriptionId pulumi.MapInput `pulumi:"hostSubscriptionId"`
	// Azure Storage linked service to be used by the on-demand cluster for storing and processing data.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster.
	MapReduceConfiguration pulumi.MapInput `pulumi:"mapReduceConfiguration"`
	// Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster.
	OozieConfiguration pulumi.MapInput `pulumi:"oozieConfiguration"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.MapInput `pulumi:"servicePrincipalId"`
	// The key for the service principal id.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The version of spark if the cluster type is 'spark'. Type: string (or Expression with resultType string).
	SparkVersion pulumi.MapInput `pulumi:"sparkVersion"`
	// Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster.
	StormConfiguration pulumi.MapInput `pulumi:"stormConfiguration"`
	// The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.MapInput `pulumi:"tenant"`
	// The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string).
	TimeToLive pulumi.MapInput `pulumi:"timeToLive"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Version of the HDInsight cluster.  Type: string (or Expression with resultType string).
	Version pulumi.MapInput `pulumi:"version"`
	// Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster.
	YarnConfiguration pulumi.MapInput `pulumi:"yarnConfiguration"`
	// Specifies the size of the Zoo Keeper node for the HDInsight cluster.
	ZookeeperNodeSize pulumi.MapInput `pulumi:"zookeeperNodeSize"`
}

func (HDInsightOnDemandLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightOnDemandLinkedService)(nil)).Elem()
}

func (i HDInsightOnDemandLinkedServiceArgs) ToHDInsightOnDemandLinkedServiceOutput() HDInsightOnDemandLinkedServiceOutput {
	return i.ToHDInsightOnDemandLinkedServiceOutputWithContext(context.Background())
}

func (i HDInsightOnDemandLinkedServiceArgs) ToHDInsightOnDemandLinkedServiceOutputWithContext(ctx context.Context) HDInsightOnDemandLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightOnDemandLinkedServiceOutput)
}

// HDInsight ondemand linked service.
type HDInsightOnDemandLinkedServiceResponse struct {
	// Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf.
	AdditionalLinkedServiceNames []LinkedServiceReferenceResponse `pulumi:"additionalLinkedServiceNames"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string).
	ClusterNamePrefix map[string]interface{} `pulumi:"clusterNamePrefix"`
	// The password to access the cluster.
	ClusterPassword interface{} `pulumi:"clusterPassword"`
	// The resource group where the cluster belongs. Type: string (or Expression with resultType string).
	ClusterResourceGroup map[string]interface{} `pulumi:"clusterResourceGroup"`
	// Number of worker/data nodes in the cluster. Suggestion value: 4. Type: string (or Expression with resultType string).
	ClusterSize map[string]interface{} `pulumi:"clusterSize"`
	// The password to SSH remotely connect cluster’s node (for Linux).
	ClusterSshPassword interface{} `pulumi:"clusterSshPassword"`
	// The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string).
	ClusterSshUserName map[string]interface{} `pulumi:"clusterSshUserName"`
	// The cluster type. Type: string (or Expression with resultType string).
	ClusterType map[string]interface{} `pulumi:"clusterType"`
	// The username to access the cluster. Type: string (or Expression with resultType string).
	ClusterUserName map[string]interface{} `pulumi:"clusterUserName"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created.
	CoreConfiguration map[string]interface{} `pulumi:"coreConfiguration"`
	// Specifies the size of the data node for the HDInsight cluster.
	DataNodeSize map[string]interface{} `pulumi:"dataNodeSize"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster.
	HBaseConfiguration map[string]interface{} `pulumi:"hBaseConfiguration"`
	// The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore.
	HcatalogLinkedServiceName *LinkedServiceReferenceResponse `pulumi:"hcatalogLinkedServiceName"`
	// Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster.
	HdfsConfiguration map[string]interface{} `pulumi:"hdfsConfiguration"`
	// Specifies the size of the head node for the HDInsight cluster.
	HeadNodeSize map[string]interface{} `pulumi:"headNodeSize"`
	// Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster.
	HiveConfiguration map[string]interface{} `pulumi:"hiveConfiguration"`
	// The customer’s subscription to host the cluster. Type: string (or Expression with resultType string).
	HostSubscriptionId map[string]interface{} `pulumi:"hostSubscriptionId"`
	// Azure Storage linked service to be used by the on-demand cluster for storing and processing data.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster.
	MapReduceConfiguration map[string]interface{} `pulumi:"mapReduceConfiguration"`
	// Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster.
	OozieConfiguration map[string]interface{} `pulumi:"oozieConfiguration"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string).
	ServicePrincipalId map[string]interface{} `pulumi:"servicePrincipalId"`
	// The key for the service principal id.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The version of spark if the cluster type is 'spark'. Type: string (or Expression with resultType string).
	SparkVersion map[string]interface{} `pulumi:"sparkVersion"`
	// Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster.
	StormConfiguration map[string]interface{} `pulumi:"stormConfiguration"`
	// The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant map[string]interface{} `pulumi:"tenant"`
	// The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string).
	TimeToLive map[string]interface{} `pulumi:"timeToLive"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Version of the HDInsight cluster.  Type: string (or Expression with resultType string).
	Version map[string]interface{} `pulumi:"version"`
	// Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster.
	YarnConfiguration map[string]interface{} `pulumi:"yarnConfiguration"`
	// Specifies the size of the Zoo Keeper node for the HDInsight cluster.
	ZookeeperNodeSize map[string]interface{} `pulumi:"zookeeperNodeSize"`
}

// HDInsight ondemand linked service.
type HDInsightOnDemandLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (HDInsightOnDemandLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightOnDemandLinkedServiceResponse)(nil)).Elem()
}

func (o HDInsightOnDemandLinkedServiceResponseOutput) ToHDInsightOnDemandLinkedServiceResponseOutput() HDInsightOnDemandLinkedServiceResponseOutput {
	return o
}

func (o HDInsightOnDemandLinkedServiceResponseOutput) ToHDInsightOnDemandLinkedServiceResponseOutputWithContext(ctx context.Context) HDInsightOnDemandLinkedServiceResponseOutput {
	return o
}

// Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf.
func (o HDInsightOnDemandLinkedServiceResponseOutput) AdditionalLinkedServiceNames() LinkedServiceReferenceResponseArrayOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) []LinkedServiceReferenceResponse {
		return v.AdditionalLinkedServiceNames
	}).(LinkedServiceReferenceResponseArrayOutput)
}

// List of tags that can be used for describing the Dataset.
func (o HDInsightOnDemandLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterNamePrefix() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.ClusterNamePrefix }).(pulumi.MapOutput)
}

// The password to access the cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterPassword() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ClusterPassword }).(pulumi.AnyOutput)
}

// The resource group where the cluster belongs. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterResourceGroup() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.ClusterResourceGroup }).(pulumi.MapOutput)
}

// Number of worker/data nodes in the cluster. Suggestion value: 4. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterSize() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.ClusterSize }).(pulumi.MapOutput)
}

// The password to SSH remotely connect cluster’s node (for Linux).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterSshPassword() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ClusterSshPassword }).(pulumi.AnyOutput)
}

// The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterSshUserName() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.ClusterSshUserName }).(pulumi.MapOutput)
}

// The cluster type. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterType() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.ClusterType }).(pulumi.MapOutput)
}

// The username to access the cluster. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterUserName() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.ClusterUserName }).(pulumi.MapOutput)
}

// The integration runtime reference.
func (o HDInsightOnDemandLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created.
func (o HDInsightOnDemandLinkedServiceResponseOutput) CoreConfiguration() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.CoreConfiguration }).(pulumi.MapOutput)
}

// Specifies the size of the data node for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) DataNodeSize() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.DataNodeSize }).(pulumi.MapOutput)
}

// Linked service description.
func (o HDInsightOnDemandLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) HBaseConfiguration() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.HBaseConfiguration }).(pulumi.MapOutput)
}

// The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore.
func (o HDInsightOnDemandLinkedServiceResponseOutput) HcatalogLinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) *LinkedServiceReferenceResponse {
		return v.HcatalogLinkedServiceName
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) HdfsConfiguration() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.HdfsConfiguration }).(pulumi.MapOutput)
}

// Specifies the size of the head node for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) HeadNodeSize() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.HeadNodeSize }).(pulumi.MapOutput)
}

// Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) HiveConfiguration() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.HiveConfiguration }).(pulumi.MapOutput)
}

// The customer’s subscription to host the cluster. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) HostSubscriptionId() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.HostSubscriptionId }).(pulumi.MapOutput)
}

// Azure Storage linked service to be used by the on-demand cluster for storing and processing data.
func (o HDInsightOnDemandLinkedServiceResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) MapReduceConfiguration() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.MapReduceConfiguration }).(pulumi.MapOutput)
}

// Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) OozieConfiguration() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.OozieConfiguration }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o HDInsightOnDemandLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ServicePrincipalId() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.ServicePrincipalId }).(pulumi.MapOutput)
}

// The key for the service principal id.
func (o HDInsightOnDemandLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The version of spark if the cluster type is 'spark'. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) SparkVersion() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.SparkVersion }).(pulumi.MapOutput)
}

// Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) StormConfiguration() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.StormConfiguration }).(pulumi.MapOutput)
}

// The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) Tenant() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.Tenant }).(pulumi.MapOutput)
}

// The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) TimeToLive() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.TimeToLive }).(pulumi.MapOutput)
}

// Type of linked service.
func (o HDInsightOnDemandLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Version of the HDInsight cluster.  Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) Version() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.Version }).(pulumi.MapOutput)
}

// Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) YarnConfiguration() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.YarnConfiguration }).(pulumi.MapOutput)
}

// Specifies the size of the Zoo Keeper node for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) ZookeeperNodeSize() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]interface{} { return v.ZookeeperNodeSize }).(pulumi.MapOutput)
}

// Hadoop Distributed File System (HDFS) linked service.
type HdfsLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression with resultType string).
	AuthenticationType map[string]interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for Windows authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string).
	Url map[string]interface{} `pulumi:"url"`
	// User name for Windows authentication. Type: string (or Expression with resultType string).
	UserName map[string]interface{} `pulumi:"userName"`
}

// HdfsLinkedServiceInput is an input type that accepts HdfsLinkedServiceArgs and HdfsLinkedServiceOutput values.
// You can construct a concrete instance of `HdfsLinkedServiceInput` via:
//
//          HdfsLinkedServiceArgs{...}
type HdfsLinkedServiceInput interface {
	pulumi.Input

	ToHdfsLinkedServiceOutput() HdfsLinkedServiceOutput
	ToHdfsLinkedServiceOutputWithContext(context.Context) HdfsLinkedServiceOutput
}

// Hadoop Distributed File System (HDFS) linked service.
type HdfsLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.MapInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for Windows authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string).
	Url pulumi.MapInput `pulumi:"url"`
	// User name for Windows authentication. Type: string (or Expression with resultType string).
	UserName pulumi.MapInput `pulumi:"userName"`
}

func (HdfsLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsLinkedService)(nil)).Elem()
}

func (i HdfsLinkedServiceArgs) ToHdfsLinkedServiceOutput() HdfsLinkedServiceOutput {
	return i.ToHdfsLinkedServiceOutputWithContext(context.Background())
}

func (i HdfsLinkedServiceArgs) ToHdfsLinkedServiceOutputWithContext(ctx context.Context) HdfsLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HdfsLinkedServiceOutput)
}

// Hadoop Distributed File System (HDFS) linked service.
type HdfsLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression with resultType string).
	AuthenticationType map[string]interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for Windows authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string).
	Url map[string]interface{} `pulumi:"url"`
	// User name for Windows authentication. Type: string (or Expression with resultType string).
	UserName map[string]interface{} `pulumi:"userName"`
}

// Hadoop Distributed File System (HDFS) linked service.
type HdfsLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (HdfsLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsLinkedServiceResponse)(nil)).Elem()
}

func (o HdfsLinkedServiceResponseOutput) ToHdfsLinkedServiceResponseOutput() HdfsLinkedServiceResponseOutput {
	return o
}

func (o HdfsLinkedServiceResponseOutput) ToHdfsLinkedServiceResponseOutputWithContext(ctx context.Context) HdfsLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o HdfsLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression with resultType string).
func (o HdfsLinkedServiceResponseOutput) AuthenticationType() pulumi.MapOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) map[string]interface{} { return v.AuthenticationType }).(pulumi.MapOutput)
}

// The integration runtime reference.
func (o HdfsLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o HdfsLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o HdfsLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o HdfsLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for Windows authentication.
func (o HdfsLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o HdfsLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string).
func (o HdfsLinkedServiceResponseOutput) Url() pulumi.MapOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) map[string]interface{} { return v.Url }).(pulumi.MapOutput)
}

// User name for Windows authentication. Type: string (or Expression with resultType string).
func (o HdfsLinkedServiceResponseOutput) UserName() pulumi.MapOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) map[string]interface{} { return v.UserName }).(pulumi.MapOutput)
}

// Hive Server linked service.
type HiveLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch map[string]interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert map[string]interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication method used to access the Hive server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl map[string]interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// IP address or host name of the Hive server, separated by ';' for multiple hosts (only when serviceDiscoveryMode is enable).
	Host map[string]interface{} `pulumi:"host"`
	// The partial URL corresponding to the Hive server.
	HttpPath map[string]interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password interface{} `pulumi:"password"`
	// The TCP port that the Hive server uses to listen for client connections.
	Port map[string]interface{} `pulumi:"port"`
	// The type of Hive server.
	ServerType *string `pulumi:"serverType"`
	// true to indicate using the ZooKeeper service, false not.
	ServiceDiscoveryMode map[string]interface{} `pulumi:"serviceDiscoveryMode"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol *string `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath map[string]interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL.
	UseNativeQuery map[string]interface{} `pulumi:"useNativeQuery"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore map[string]interface{} `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Hive Server.
	Username map[string]interface{} `pulumi:"username"`
	// The namespace on ZooKeeper under which Hive Server 2 nodes are added.
	ZooKeeperNameSpace map[string]interface{} `pulumi:"zooKeeperNameSpace"`
}

// HiveLinkedServiceInput is an input type that accepts HiveLinkedServiceArgs and HiveLinkedServiceOutput values.
// You can construct a concrete instance of `HiveLinkedServiceInput` via:
//
//          HiveLinkedServiceArgs{...}
type HiveLinkedServiceInput interface {
	pulumi.Input

	ToHiveLinkedServiceOutput() HiveLinkedServiceOutput
	ToHiveLinkedServiceOutputWithContext(context.Context) HiveLinkedServiceOutput
}

// Hive Server linked service.
type HiveLinkedServiceArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.MapInput `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.MapInput `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The authentication method used to access the Hive server.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.MapInput `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// IP address or host name of the Hive server, separated by ';' for multiple hosts (only when serviceDiscoveryMode is enable).
	Host pulumi.MapInput `pulumi:"host"`
	// The partial URL corresponding to the Hive server.
	HttpPath pulumi.MapInput `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Hive server uses to listen for client connections.
	Port pulumi.MapInput `pulumi:"port"`
	// The type of Hive server.
	ServerType pulumi.StringPtrInput `pulumi:"serverType"`
	// true to indicate using the ZooKeeper service, false not.
	ServiceDiscoveryMode pulumi.MapInput `pulumi:"serviceDiscoveryMode"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol pulumi.StringPtrInput `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.MapInput `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL.
	UseNativeQuery pulumi.MapInput `pulumi:"useNativeQuery"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.MapInput `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Hive Server.
	Username pulumi.MapInput `pulumi:"username"`
	// The namespace on ZooKeeper under which Hive Server 2 nodes are added.
	ZooKeeperNameSpace pulumi.MapInput `pulumi:"zooKeeperNameSpace"`
}

func (HiveLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveLinkedService)(nil)).Elem()
}

func (i HiveLinkedServiceArgs) ToHiveLinkedServiceOutput() HiveLinkedServiceOutput {
	return i.ToHiveLinkedServiceOutputWithContext(context.Background())
}

func (i HiveLinkedServiceArgs) ToHiveLinkedServiceOutputWithContext(ctx context.Context) HiveLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HiveLinkedServiceOutput)
}

// Hive Server linked service.
type HiveLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch map[string]interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert map[string]interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication method used to access the Hive server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl map[string]interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// IP address or host name of the Hive server, separated by ';' for multiple hosts (only when serviceDiscoveryMode is enable).
	Host map[string]interface{} `pulumi:"host"`
	// The partial URL corresponding to the Hive server.
	HttpPath map[string]interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password interface{} `pulumi:"password"`
	// The TCP port that the Hive server uses to listen for client connections.
	Port map[string]interface{} `pulumi:"port"`
	// The type of Hive server.
	ServerType *string `pulumi:"serverType"`
	// true to indicate using the ZooKeeper service, false not.
	ServiceDiscoveryMode map[string]interface{} `pulumi:"serviceDiscoveryMode"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol *string `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath map[string]interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL.
	UseNativeQuery map[string]interface{} `pulumi:"useNativeQuery"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore map[string]interface{} `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Hive Server.
	Username map[string]interface{} `pulumi:"username"`
	// The namespace on ZooKeeper under which Hive Server 2 nodes are added.
	ZooKeeperNameSpace map[string]interface{} `pulumi:"zooKeeperNameSpace"`
}

// Hive Server linked service.
type HiveLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (HiveLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveLinkedServiceResponse)(nil)).Elem()
}

func (o HiveLinkedServiceResponseOutput) ToHiveLinkedServiceResponseOutput() HiveLinkedServiceResponseOutput {
	return o
}

func (o HiveLinkedServiceResponseOutput) ToHiveLinkedServiceResponseOutputWithContext(ctx context.Context) HiveLinkedServiceResponseOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o HiveLinkedServiceResponseOutput) AllowHostNameCNMismatch() pulumi.MapOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) map[string]interface{} { return v.AllowHostNameCNMismatch }).(pulumi.MapOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o HiveLinkedServiceResponseOutput) AllowSelfSignedServerCert() pulumi.MapOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) map[string]interface{} { return v.AllowSelfSignedServerCert }).(pulumi.MapOutput)
}

// List of tags that can be used for describing the Dataset.
func (o HiveLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The authentication method used to access the Hive server.
func (o HiveLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o HiveLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o HiveLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o HiveLinkedServiceResponseOutput) EnableSsl() pulumi.MapOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) map[string]interface{} { return v.EnableSsl }).(pulumi.MapOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o HiveLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// IP address or host name of the Hive server, separated by ';' for multiple hosts (only when serviceDiscoveryMode is enable).
func (o HiveLinkedServiceResponseOutput) Host() pulumi.MapOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) map[string]interface{} { return v.Host }).(pulumi.MapOutput)
}

// The partial URL corresponding to the Hive server.
func (o HiveLinkedServiceResponseOutput) HttpPath() pulumi.MapOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) map[string]interface{} { return v.HttpPath }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o HiveLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name that you provided in the Username field
func (o HiveLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Hive server uses to listen for client connections.
func (o HiveLinkedServiceResponseOutput) Port() pulumi.MapOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) map[string]interface{} { return v.Port }).(pulumi.MapOutput)
}

// The type of Hive server.
func (o HiveLinkedServiceResponseOutput) ServerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) *string { return v.ServerType }).(pulumi.StringPtrOutput)
}

// true to indicate using the ZooKeeper service, false not.
func (o HiveLinkedServiceResponseOutput) ServiceDiscoveryMode() pulumi.MapOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) map[string]interface{} { return v.ServiceDiscoveryMode }).(pulumi.MapOutput)
}

// The transport protocol to use in the Thrift layer.
func (o HiveLinkedServiceResponseOutput) ThriftTransportProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) *string { return v.ThriftTransportProtocol }).(pulumi.StringPtrOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o HiveLinkedServiceResponseOutput) TrustedCertPath() pulumi.MapOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) map[string]interface{} { return v.TrustedCertPath }).(pulumi.MapOutput)
}

// Type of linked service.
func (o HiveLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL.
func (o HiveLinkedServiceResponseOutput) UseNativeQuery() pulumi.MapOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) map[string]interface{} { return v.UseNativeQuery }).(pulumi.MapOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o HiveLinkedServiceResponseOutput) UseSystemTrustStore() pulumi.MapOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) map[string]interface{} { return v.UseSystemTrustStore }).(pulumi.MapOutput)
}

// The user name that you use to access Hive Server.
func (o HiveLinkedServiceResponseOutput) Username() pulumi.MapOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) map[string]interface{} { return v.Username }).(pulumi.MapOutput)
}

// The namespace on ZooKeeper under which Hive Server 2 nodes are added.
func (o HiveLinkedServiceResponseOutput) ZooKeeperNameSpace() pulumi.MapOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) map[string]interface{} { return v.ZooKeeperNameSpace }).(pulumi.MapOutput)
}

// Hive Server dataset.
type HiveObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// HiveObjectDatasetInput is an input type that accepts HiveObjectDatasetArgs and HiveObjectDatasetOutput values.
// You can construct a concrete instance of `HiveObjectDatasetInput` via:
//
//          HiveObjectDatasetArgs{...}
type HiveObjectDatasetInput interface {
	pulumi.Input

	ToHiveObjectDatasetOutput() HiveObjectDatasetOutput
	ToHiveObjectDatasetOutputWithContext(context.Context) HiveObjectDatasetOutput
}

// Hive Server dataset.
type HiveObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HiveObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveObjectDataset)(nil)).Elem()
}

func (i HiveObjectDatasetArgs) ToHiveObjectDatasetOutput() HiveObjectDatasetOutput {
	return i.ToHiveObjectDatasetOutputWithContext(context.Background())
}

func (i HiveObjectDatasetArgs) ToHiveObjectDatasetOutputWithContext(ctx context.Context) HiveObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HiveObjectDatasetOutput)
}

// Hive Server dataset.
type HiveObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Hive Server dataset.
type HiveObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (HiveObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveObjectDatasetResponse)(nil)).Elem()
}

func (o HiveObjectDatasetResponseOutput) ToHiveObjectDatasetResponseOutput() HiveObjectDatasetResponseOutput {
	return o
}

func (o HiveObjectDatasetResponseOutput) ToHiveObjectDatasetResponseOutputWithContext(ctx context.Context) HiveObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o HiveObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o HiveObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o HiveObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o HiveObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o HiveObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o HiveObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A file in an HTTP web server.
type HttpDataset struct {
	// The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1
	// ...
	// request-header-name-n:request-header-value-n Type: string (or Expression with resultType string).
	AdditionalHeaders map[string]interface{} `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The data compression method used on files.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The format of files.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType string).
	RelativeUrl map[string]interface{} `pulumi:"relativeUrl"`
	// The body for the HTTP request. Type: string (or Expression with resultType string).
	RequestBody map[string]interface{} `pulumi:"requestBody"`
	// The HTTP method for the HTTP request. Type: string (or Expression with resultType string).
	RequestMethod map[string]interface{} `pulumi:"requestMethod"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// HttpDatasetInput is an input type that accepts HttpDatasetArgs and HttpDatasetOutput values.
// You can construct a concrete instance of `HttpDatasetInput` via:
//
//          HttpDatasetArgs{...}
type HttpDatasetInput interface {
	pulumi.Input

	ToHttpDatasetOutput() HttpDatasetOutput
	ToHttpDatasetOutputWithContext(context.Context) HttpDatasetOutput
}

// A file in an HTTP web server.
type HttpDatasetArgs struct {
	// The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1
	// ...
	// request-header-name-n:request-header-value-n Type: string (or Expression with resultType string).
	AdditionalHeaders pulumi.MapInput `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The data compression method used on files.
	Compression pulumi.Input `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The format of files.
	Format pulumi.Input `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType string).
	RelativeUrl pulumi.MapInput `pulumi:"relativeUrl"`
	// The body for the HTTP request. Type: string (or Expression with resultType string).
	RequestBody pulumi.MapInput `pulumi:"requestBody"`
	// The HTTP method for the HTTP request. Type: string (or Expression with resultType string).
	RequestMethod pulumi.MapInput `pulumi:"requestMethod"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HttpDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpDataset)(nil)).Elem()
}

func (i HttpDatasetArgs) ToHttpDatasetOutput() HttpDatasetOutput {
	return i.ToHttpDatasetOutputWithContext(context.Background())
}

func (i HttpDatasetArgs) ToHttpDatasetOutputWithContext(ctx context.Context) HttpDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpDatasetOutput)
}

// A file in an HTTP web server.
type HttpDatasetResponse struct {
	// The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1
	// ...
	// request-header-name-n:request-header-value-n Type: string (or Expression with resultType string).
	AdditionalHeaders map[string]interface{} `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The data compression method used on files.
	Compression interface{} `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The format of files.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType string).
	RelativeUrl map[string]interface{} `pulumi:"relativeUrl"`
	// The body for the HTTP request. Type: string (or Expression with resultType string).
	RequestBody map[string]interface{} `pulumi:"requestBody"`
	// The HTTP method for the HTTP request. Type: string (or Expression with resultType string).
	RequestMethod map[string]interface{} `pulumi:"requestMethod"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// A file in an HTTP web server.
type HttpDatasetResponseOutput struct{ *pulumi.OutputState }

func (HttpDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpDatasetResponse)(nil)).Elem()
}

func (o HttpDatasetResponseOutput) ToHttpDatasetResponseOutput() HttpDatasetResponseOutput {
	return o
}

func (o HttpDatasetResponseOutput) ToHttpDatasetResponseOutputWithContext(ctx context.Context) HttpDatasetResponseOutput {
	return o
}

// The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1
// ...
// request-header-name-n:request-header-value-n Type: string (or Expression with resultType string).
func (o HttpDatasetResponseOutput) AdditionalHeaders() pulumi.MapOutput {
	return o.ApplyT(func(v HttpDatasetResponse) map[string]interface{} { return v.AdditionalHeaders }).(pulumi.MapOutput)
}

// List of tags that can be used for describing the Dataset.
func (o HttpDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v HttpDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The data compression method used on files.
func (o HttpDatasetResponseOutput) Compression() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDatasetResponse) interface{} { return v.Compression }).(pulumi.AnyOutput)
}

// Dataset description.
func (o HttpDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The format of files.
func (o HttpDatasetResponseOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDatasetResponse) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o HttpDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v HttpDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o HttpDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HttpDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType string).
func (o HttpDatasetResponseOutput) RelativeUrl() pulumi.MapOutput {
	return o.ApplyT(func(v HttpDatasetResponse) map[string]interface{} { return v.RelativeUrl }).(pulumi.MapOutput)
}

// The body for the HTTP request. Type: string (or Expression with resultType string).
func (o HttpDatasetResponseOutput) RequestBody() pulumi.MapOutput {
	return o.ApplyT(func(v HttpDatasetResponse) map[string]interface{} { return v.RequestBody }).(pulumi.MapOutput)
}

// The HTTP method for the HTTP request. Type: string (or Expression with resultType string).
func (o HttpDatasetResponseOutput) RequestMethod() pulumi.MapOutput {
	return o.ApplyT(func(v HttpDatasetResponse) map[string]interface{} { return v.RequestMethod }).(pulumi.MapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o HttpDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v HttpDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o HttpDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HttpDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for an HTTP source.
type HttpLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the HTTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	CertThumbprint map[string]interface{} `pulumi:"certThumbprint"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	EmbeddedCertData map[string]interface{} `pulumi:"embeddedCertData"`
	// If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation map[string]interface{} `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The base URL of the HTTP endpoint, e.g. http://www.microsoft.com. Type: string (or Expression with resultType string).
	Url map[string]interface{} `pulumi:"url"`
	// User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string).
	UserName map[string]interface{} `pulumi:"userName"`
}

// HttpLinkedServiceInput is an input type that accepts HttpLinkedServiceArgs and HttpLinkedServiceOutput values.
// You can construct a concrete instance of `HttpLinkedServiceInput` via:
//
//          HttpLinkedServiceArgs{...}
type HttpLinkedServiceInput interface {
	pulumi.Input

	ToHttpLinkedServiceOutput() HttpLinkedServiceOutput
	ToHttpLinkedServiceOutputWithContext(context.Context) HttpLinkedServiceOutput
}

// Linked service for an HTTP source.
type HttpLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The authentication type to be used to connect to the HTTP server.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	CertThumbprint pulumi.MapInput `pulumi:"certThumbprint"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	EmbeddedCertData pulumi.MapInput `pulumi:"embeddedCertData"`
	// If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation pulumi.MapInput `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The base URL of the HTTP endpoint, e.g. http://www.microsoft.com. Type: string (or Expression with resultType string).
	Url pulumi.MapInput `pulumi:"url"`
	// User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string).
	UserName pulumi.MapInput `pulumi:"userName"`
}

func (HttpLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpLinkedService)(nil)).Elem()
}

func (i HttpLinkedServiceArgs) ToHttpLinkedServiceOutput() HttpLinkedServiceOutput {
	return i.ToHttpLinkedServiceOutputWithContext(context.Background())
}

func (i HttpLinkedServiceArgs) ToHttpLinkedServiceOutputWithContext(ctx context.Context) HttpLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpLinkedServiceOutput)
}

// Linked service for an HTTP source.
type HttpLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the HTTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	CertThumbprint map[string]interface{} `pulumi:"certThumbprint"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	EmbeddedCertData map[string]interface{} `pulumi:"embeddedCertData"`
	// If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation map[string]interface{} `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The base URL of the HTTP endpoint, e.g. http://www.microsoft.com. Type: string (or Expression with resultType string).
	Url map[string]interface{} `pulumi:"url"`
	// User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string).
	UserName map[string]interface{} `pulumi:"userName"`
}

// Linked service for an HTTP source.
type HttpLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (HttpLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpLinkedServiceResponse)(nil)).Elem()
}

func (o HttpLinkedServiceResponseOutput) ToHttpLinkedServiceResponseOutput() HttpLinkedServiceResponseOutput {
	return o
}

func (o HttpLinkedServiceResponseOutput) ToHttpLinkedServiceResponseOutputWithContext(ctx context.Context) HttpLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o HttpLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The authentication type to be used to connect to the HTTP server.
func (o HttpLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
func (o HttpLinkedServiceResponseOutput) CertThumbprint() pulumi.MapOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) map[string]interface{} { return v.CertThumbprint }).(pulumi.MapOutput)
}

// The integration runtime reference.
func (o HttpLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o HttpLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
func (o HttpLinkedServiceResponseOutput) EmbeddedCertData() pulumi.MapOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) map[string]interface{} { return v.EmbeddedCertData }).(pulumi.MapOutput)
}

// If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean).
func (o HttpLinkedServiceResponseOutput) EnableServerCertificateValidation() pulumi.MapOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) map[string]interface{} { return v.EnableServerCertificateValidation }).(pulumi.MapOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o HttpLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o HttpLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
func (o HttpLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o HttpLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The base URL of the HTTP endpoint, e.g. http://www.microsoft.com. Type: string (or Expression with resultType string).
func (o HttpLinkedServiceResponseOutput) Url() pulumi.MapOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) map[string]interface{} { return v.Url }).(pulumi.MapOutput)
}

// User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string).
func (o HttpLinkedServiceResponseOutput) UserName() pulumi.MapOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) map[string]interface{} { return v.UserName }).(pulumi.MapOutput)
}

// Hubspot Service linked service.
type HubspotLinkedService struct {
	// The access token obtained when initially authenticating your OAuth integration.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The client ID associated with your Hubspot application.
	ClientId map[string]interface{} `pulumi:"clientId"`
	// The client secret associated with your Hubspot application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The refresh token obtained when initially authenticating your OAuth integration.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
}

// HubspotLinkedServiceInput is an input type that accepts HubspotLinkedServiceArgs and HubspotLinkedServiceOutput values.
// You can construct a concrete instance of `HubspotLinkedServiceInput` via:
//
//          HubspotLinkedServiceArgs{...}
type HubspotLinkedServiceInput interface {
	pulumi.Input

	ToHubspotLinkedServiceOutput() HubspotLinkedServiceOutput
	ToHubspotLinkedServiceOutputWithContext(context.Context) HubspotLinkedServiceOutput
}

// Hubspot Service linked service.
type HubspotLinkedServiceArgs struct {
	// The access token obtained when initially authenticating your OAuth integration.
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The client ID associated with your Hubspot application.
	ClientId pulumi.MapInput `pulumi:"clientId"`
	// The client secret associated with your Hubspot application.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The refresh token obtained when initially authenticating your OAuth integration.
	RefreshToken pulumi.Input `pulumi:"refreshToken"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.MapInput `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.MapInput `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.MapInput `pulumi:"usePeerVerification"`
}

func (HubspotLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HubspotLinkedService)(nil)).Elem()
}

func (i HubspotLinkedServiceArgs) ToHubspotLinkedServiceOutput() HubspotLinkedServiceOutput {
	return i.ToHubspotLinkedServiceOutputWithContext(context.Background())
}

func (i HubspotLinkedServiceArgs) ToHubspotLinkedServiceOutputWithContext(ctx context.Context) HubspotLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubspotLinkedServiceOutput)
}

// Hubspot Service linked service.
type HubspotLinkedServiceResponse struct {
	// The access token obtained when initially authenticating your OAuth integration.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The client ID associated with your Hubspot application.
	ClientId map[string]interface{} `pulumi:"clientId"`
	// The client secret associated with your Hubspot application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The refresh token obtained when initially authenticating your OAuth integration.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
}

// Hubspot Service linked service.
type HubspotLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (HubspotLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubspotLinkedServiceResponse)(nil)).Elem()
}

func (o HubspotLinkedServiceResponseOutput) ToHubspotLinkedServiceResponseOutput() HubspotLinkedServiceResponseOutput {
	return o
}

func (o HubspotLinkedServiceResponseOutput) ToHubspotLinkedServiceResponseOutputWithContext(ctx context.Context) HubspotLinkedServiceResponseOutput {
	return o
}

// The access token obtained when initially authenticating your OAuth integration.
func (o HubspotLinkedServiceResponseOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the Dataset.
func (o HubspotLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The client ID associated with your Hubspot application.
func (o HubspotLinkedServiceResponseOutput) ClientId() pulumi.MapOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) map[string]interface{} { return v.ClientId }).(pulumi.MapOutput)
}

// The client secret associated with your Hubspot application.
func (o HubspotLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o HubspotLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o HubspotLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o HubspotLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o HubspotLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The refresh token obtained when initially authenticating your OAuth integration.
func (o HubspotLinkedServiceResponseOutput) RefreshToken() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) interface{} { return v.RefreshToken }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o HubspotLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o HubspotLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.MapOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) map[string]interface{} { return v.UseEncryptedEndpoints }).(pulumi.MapOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o HubspotLinkedServiceResponseOutput) UseHostVerification() pulumi.MapOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) map[string]interface{} { return v.UseHostVerification }).(pulumi.MapOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o HubspotLinkedServiceResponseOutput) UsePeerVerification() pulumi.MapOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) map[string]interface{} { return v.UsePeerVerification }).(pulumi.MapOutput)
}

// Hubspot Service dataset.
type HubspotObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// HubspotObjectDatasetInput is an input type that accepts HubspotObjectDatasetArgs and HubspotObjectDatasetOutput values.
// You can construct a concrete instance of `HubspotObjectDatasetInput` via:
//
//          HubspotObjectDatasetArgs{...}
type HubspotObjectDatasetInput interface {
	pulumi.Input

	ToHubspotObjectDatasetOutput() HubspotObjectDatasetOutput
	ToHubspotObjectDatasetOutputWithContext(context.Context) HubspotObjectDatasetOutput
}

// Hubspot Service dataset.
type HubspotObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HubspotObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HubspotObjectDataset)(nil)).Elem()
}

func (i HubspotObjectDatasetArgs) ToHubspotObjectDatasetOutput() HubspotObjectDatasetOutput {
	return i.ToHubspotObjectDatasetOutputWithContext(context.Background())
}

func (i HubspotObjectDatasetArgs) ToHubspotObjectDatasetOutputWithContext(ctx context.Context) HubspotObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubspotObjectDatasetOutput)
}

// Hubspot Service dataset.
type HubspotObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Hubspot Service dataset.
type HubspotObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (HubspotObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubspotObjectDatasetResponse)(nil)).Elem()
}

func (o HubspotObjectDatasetResponseOutput) ToHubspotObjectDatasetResponseOutput() HubspotObjectDatasetResponseOutput {
	return o
}

func (o HubspotObjectDatasetResponseOutput) ToHubspotObjectDatasetResponseOutputWithContext(ctx context.Context) HubspotObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o HubspotObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o HubspotObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o HubspotObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o HubspotObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o HubspotObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o HubspotObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Impala server linked service.
type ImpalaLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch map[string]interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert map[string]interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl map[string]interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Impala server. (i.e. 192.168.222.160)
	Host map[string]interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name when using UsernameAndPassword.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Impala server uses to listen for client connections. The default value is 21050.
	Port map[string]interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath map[string]interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore map[string]interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to access the Impala server. The default value is anonymous when using SASLUsername.
	Username map[string]interface{} `pulumi:"username"`
}

// ImpalaLinkedServiceInput is an input type that accepts ImpalaLinkedServiceArgs and ImpalaLinkedServiceOutput values.
// You can construct a concrete instance of `ImpalaLinkedServiceInput` via:
//
//          ImpalaLinkedServiceArgs{...}
type ImpalaLinkedServiceInput interface {
	pulumi.Input

	ToImpalaLinkedServiceOutput() ImpalaLinkedServiceOutput
	ToImpalaLinkedServiceOutputWithContext(context.Context) ImpalaLinkedServiceOutput
}

// Impala server linked service.
type ImpalaLinkedServiceArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.MapInput `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.MapInput `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.MapInput `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The IP address or host name of the Impala server. (i.e. 192.168.222.160)
	Host pulumi.MapInput `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name when using UsernameAndPassword.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Impala server uses to listen for client connections. The default value is 21050.
	Port pulumi.MapInput `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.MapInput `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.MapInput `pulumi:"useSystemTrustStore"`
	// The user name used to access the Impala server. The default value is anonymous when using SASLUsername.
	Username pulumi.MapInput `pulumi:"username"`
}

func (ImpalaLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImpalaLinkedService)(nil)).Elem()
}

func (i ImpalaLinkedServiceArgs) ToImpalaLinkedServiceOutput() ImpalaLinkedServiceOutput {
	return i.ToImpalaLinkedServiceOutputWithContext(context.Background())
}

func (i ImpalaLinkedServiceArgs) ToImpalaLinkedServiceOutputWithContext(ctx context.Context) ImpalaLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImpalaLinkedServiceOutput)
}

// Impala server linked service.
type ImpalaLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch map[string]interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert map[string]interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl map[string]interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Impala server. (i.e. 192.168.222.160)
	Host map[string]interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name when using UsernameAndPassword.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Impala server uses to listen for client connections. The default value is 21050.
	Port map[string]interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath map[string]interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore map[string]interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to access the Impala server. The default value is anonymous when using SASLUsername.
	Username map[string]interface{} `pulumi:"username"`
}

// Impala server linked service.
type ImpalaLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (ImpalaLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImpalaLinkedServiceResponse)(nil)).Elem()
}

func (o ImpalaLinkedServiceResponseOutput) ToImpalaLinkedServiceResponseOutput() ImpalaLinkedServiceResponseOutput {
	return o
}

func (o ImpalaLinkedServiceResponseOutput) ToImpalaLinkedServiceResponseOutputWithContext(ctx context.Context) ImpalaLinkedServiceResponseOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o ImpalaLinkedServiceResponseOutput) AllowHostNameCNMismatch() pulumi.MapOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) map[string]interface{} { return v.AllowHostNameCNMismatch }).(pulumi.MapOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o ImpalaLinkedServiceResponseOutput) AllowSelfSignedServerCert() pulumi.MapOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) map[string]interface{} { return v.AllowSelfSignedServerCert }).(pulumi.MapOutput)
}

// List of tags that can be used for describing the Dataset.
func (o ImpalaLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The authentication type to use.
func (o ImpalaLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o ImpalaLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o ImpalaLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o ImpalaLinkedServiceResponseOutput) EnableSsl() pulumi.MapOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) map[string]interface{} { return v.EnableSsl }).(pulumi.MapOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o ImpalaLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The IP address or host name of the Impala server. (i.e. 192.168.222.160)
func (o ImpalaLinkedServiceResponseOutput) Host() pulumi.MapOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) map[string]interface{} { return v.Host }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o ImpalaLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name when using UsernameAndPassword.
func (o ImpalaLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Impala server uses to listen for client connections. The default value is 21050.
func (o ImpalaLinkedServiceResponseOutput) Port() pulumi.MapOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) map[string]interface{} { return v.Port }).(pulumi.MapOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o ImpalaLinkedServiceResponseOutput) TrustedCertPath() pulumi.MapOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) map[string]interface{} { return v.TrustedCertPath }).(pulumi.MapOutput)
}

// Type of linked service.
func (o ImpalaLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o ImpalaLinkedServiceResponseOutput) UseSystemTrustStore() pulumi.MapOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) map[string]interface{} { return v.UseSystemTrustStore }).(pulumi.MapOutput)
}

// The user name used to access the Impala server. The default value is anonymous when using SASLUsername.
func (o ImpalaLinkedServiceResponseOutput) Username() pulumi.MapOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) map[string]interface{} { return v.Username }).(pulumi.MapOutput)
}

// Impala server dataset.
type ImpalaObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ImpalaObjectDatasetInput is an input type that accepts ImpalaObjectDatasetArgs and ImpalaObjectDatasetOutput values.
// You can construct a concrete instance of `ImpalaObjectDatasetInput` via:
//
//          ImpalaObjectDatasetArgs{...}
type ImpalaObjectDatasetInput interface {
	pulumi.Input

	ToImpalaObjectDatasetOutput() ImpalaObjectDatasetOutput
	ToImpalaObjectDatasetOutputWithContext(context.Context) ImpalaObjectDatasetOutput
}

// Impala server dataset.
type ImpalaObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImpalaObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImpalaObjectDataset)(nil)).Elem()
}

func (i ImpalaObjectDatasetArgs) ToImpalaObjectDatasetOutput() ImpalaObjectDatasetOutput {
	return i.ToImpalaObjectDatasetOutputWithContext(context.Background())
}

func (i ImpalaObjectDatasetArgs) ToImpalaObjectDatasetOutputWithContext(ctx context.Context) ImpalaObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImpalaObjectDatasetOutput)
}

// Impala server dataset.
type ImpalaObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Impala server dataset.
type ImpalaObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (ImpalaObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImpalaObjectDatasetResponse)(nil)).Elem()
}

func (o ImpalaObjectDatasetResponseOutput) ToImpalaObjectDatasetResponseOutput() ImpalaObjectDatasetResponseOutput {
	return o
}

func (o ImpalaObjectDatasetResponseOutput) ToImpalaObjectDatasetResponseOutputWithContext(ctx context.Context) ImpalaObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ImpalaObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o ImpalaObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o ImpalaObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o ImpalaObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ImpalaObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o ImpalaObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The compute resource properties for managed integration runtime.
type IntegrationRuntimeComputeProperties struct {
	// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
	Location *string `pulumi:"location"`
	// Maximum parallel executions count per node for managed integration runtime.
	MaxParallelExecutionsPerNode *int `pulumi:"maxParallelExecutionsPerNode"`
	// The node size requirement to managed integration runtime.
	NodeSize *string `pulumi:"nodeSize"`
	// The required number of nodes for managed integration runtime.
	NumberOfNodes *int `pulumi:"numberOfNodes"`
	// VNet properties for managed integration runtime.
	VNetProperties *IntegrationRuntimeVNetProperties `pulumi:"vNetProperties"`
}

// IntegrationRuntimeComputePropertiesInput is an input type that accepts IntegrationRuntimeComputePropertiesArgs and IntegrationRuntimeComputePropertiesOutput values.
// You can construct a concrete instance of `IntegrationRuntimeComputePropertiesInput` via:
//
//          IntegrationRuntimeComputePropertiesArgs{...}
type IntegrationRuntimeComputePropertiesInput interface {
	pulumi.Input

	ToIntegrationRuntimeComputePropertiesOutput() IntegrationRuntimeComputePropertiesOutput
	ToIntegrationRuntimeComputePropertiesOutputWithContext(context.Context) IntegrationRuntimeComputePropertiesOutput
}

// The compute resource properties for managed integration runtime.
type IntegrationRuntimeComputePropertiesArgs struct {
	// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Maximum parallel executions count per node for managed integration runtime.
	MaxParallelExecutionsPerNode pulumi.IntPtrInput `pulumi:"maxParallelExecutionsPerNode"`
	// The node size requirement to managed integration runtime.
	NodeSize pulumi.StringPtrInput `pulumi:"nodeSize"`
	// The required number of nodes for managed integration runtime.
	NumberOfNodes pulumi.IntPtrInput `pulumi:"numberOfNodes"`
	// VNet properties for managed integration runtime.
	VNetProperties IntegrationRuntimeVNetPropertiesPtrInput `pulumi:"vNetProperties"`
}

func (IntegrationRuntimeComputePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeComputeProperties)(nil)).Elem()
}

func (i IntegrationRuntimeComputePropertiesArgs) ToIntegrationRuntimeComputePropertiesOutput() IntegrationRuntimeComputePropertiesOutput {
	return i.ToIntegrationRuntimeComputePropertiesOutputWithContext(context.Background())
}

func (i IntegrationRuntimeComputePropertiesArgs) ToIntegrationRuntimeComputePropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeComputePropertiesOutput)
}

func (i IntegrationRuntimeComputePropertiesArgs) ToIntegrationRuntimeComputePropertiesPtrOutput() IntegrationRuntimeComputePropertiesPtrOutput {
	return i.ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeComputePropertiesArgs) ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeComputePropertiesOutput).ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(ctx)
}

// IntegrationRuntimeComputePropertiesPtrInput is an input type that accepts IntegrationRuntimeComputePropertiesArgs, IntegrationRuntimeComputePropertiesPtr and IntegrationRuntimeComputePropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeComputePropertiesPtrInput` via:
//
//          IntegrationRuntimeComputePropertiesArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeComputePropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeComputePropertiesPtrOutput() IntegrationRuntimeComputePropertiesPtrOutput
	ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(context.Context) IntegrationRuntimeComputePropertiesPtrOutput
}

type integrationRuntimeComputePropertiesPtrType IntegrationRuntimeComputePropertiesArgs

func IntegrationRuntimeComputePropertiesPtr(v *IntegrationRuntimeComputePropertiesArgs) IntegrationRuntimeComputePropertiesPtrInput {
	return (*integrationRuntimeComputePropertiesPtrType)(v)
}

func (*integrationRuntimeComputePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeComputeProperties)(nil)).Elem()
}

func (i *integrationRuntimeComputePropertiesPtrType) ToIntegrationRuntimeComputePropertiesPtrOutput() IntegrationRuntimeComputePropertiesPtrOutput {
	return i.ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeComputePropertiesPtrType) ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeComputePropertiesPtrOutput)
}

// The compute resource properties for managed integration runtime.
type IntegrationRuntimeComputePropertiesResponse struct {
	// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
	Location *string `pulumi:"location"`
	// Maximum parallel executions count per node for managed integration runtime.
	MaxParallelExecutionsPerNode *int `pulumi:"maxParallelExecutionsPerNode"`
	// The node size requirement to managed integration runtime.
	NodeSize *string `pulumi:"nodeSize"`
	// The required number of nodes for managed integration runtime.
	NumberOfNodes *int `pulumi:"numberOfNodes"`
	// VNet properties for managed integration runtime.
	VNetProperties *IntegrationRuntimeVNetPropertiesResponse `pulumi:"vNetProperties"`
}

// The compute resource properties for managed integration runtime.
type IntegrationRuntimeComputePropertiesResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeComputePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeComputePropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeComputePropertiesResponseOutput) ToIntegrationRuntimeComputePropertiesResponseOutput() IntegrationRuntimeComputePropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeComputePropertiesResponseOutput) ToIntegrationRuntimeComputePropertiesResponseOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeComputePropertiesResponseOutput) ToIntegrationRuntimeComputePropertiesResponsePtrOutput() IntegrationRuntimeComputePropertiesResponsePtrOutput {
	return o.ToIntegrationRuntimeComputePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeComputePropertiesResponseOutput) ToIntegrationRuntimeComputePropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputePropertiesResponse) *IntegrationRuntimeComputePropertiesResponse {
		return &v
	}).(IntegrationRuntimeComputePropertiesResponsePtrOutput)
}

// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
func (o IntegrationRuntimeComputePropertiesResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputePropertiesResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Maximum parallel executions count per node for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponseOutput) MaxParallelExecutionsPerNode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputePropertiesResponse) *int { return v.MaxParallelExecutionsPerNode }).(pulumi.IntPtrOutput)
}

// The node size requirement to managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponseOutput) NodeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputePropertiesResponse) *string { return v.NodeSize }).(pulumi.StringPtrOutput)
}

// The required number of nodes for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponseOutput) NumberOfNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputePropertiesResponse) *int { return v.NumberOfNodes }).(pulumi.IntPtrOutput)
}

// VNet properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponseOutput) VNetProperties() IntegrationRuntimeVNetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputePropertiesResponse) *IntegrationRuntimeVNetPropertiesResponse {
		return v.VNetProperties
	}).(IntegrationRuntimeVNetPropertiesResponsePtrOutput)
}

type IntegrationRuntimeComputePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeComputePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeComputePropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) ToIntegrationRuntimeComputePropertiesResponsePtrOutput() IntegrationRuntimeComputePropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) ToIntegrationRuntimeComputePropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) Elem() IntegrationRuntimeComputePropertiesResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputePropertiesResponse) IntegrationRuntimeComputePropertiesResponse {
		return *v
	}).(IntegrationRuntimeComputePropertiesResponseOutput)
}

// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Maximum parallel executions count per node for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) MaxParallelExecutionsPerNode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxParallelExecutionsPerNode
	}).(pulumi.IntPtrOutput)
}

// The node size requirement to managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) NodeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.NodeSize
	}).(pulumi.StringPtrOutput)
}

// The required number of nodes for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) NumberOfNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfNodes
	}).(pulumi.IntPtrOutput)
}

// VNet properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) VNetProperties() IntegrationRuntimeVNetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputePropertiesResponse) *IntegrationRuntimeVNetPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.VNetProperties
	}).(IntegrationRuntimeVNetPropertiesResponsePtrOutput)
}

// Custom setup script properties for a managed dedicated integration runtime.
type IntegrationRuntimeCustomSetupScriptProperties struct {
	// The URI of the Azure blob container that contains the custom setup script.
	BlobContainerUri *string `pulumi:"blobContainerUri"`
	// The SAS token of the Azure blob container.
	SasToken *SecureString `pulumi:"sasToken"`
}

// IntegrationRuntimeCustomSetupScriptPropertiesInput is an input type that accepts IntegrationRuntimeCustomSetupScriptPropertiesArgs and IntegrationRuntimeCustomSetupScriptPropertiesOutput values.
// You can construct a concrete instance of `IntegrationRuntimeCustomSetupScriptPropertiesInput` via:
//
//          IntegrationRuntimeCustomSetupScriptPropertiesArgs{...}
type IntegrationRuntimeCustomSetupScriptPropertiesInput interface {
	pulumi.Input

	ToIntegrationRuntimeCustomSetupScriptPropertiesOutput() IntegrationRuntimeCustomSetupScriptPropertiesOutput
	ToIntegrationRuntimeCustomSetupScriptPropertiesOutputWithContext(context.Context) IntegrationRuntimeCustomSetupScriptPropertiesOutput
}

// Custom setup script properties for a managed dedicated integration runtime.
type IntegrationRuntimeCustomSetupScriptPropertiesArgs struct {
	// The URI of the Azure blob container that contains the custom setup script.
	BlobContainerUri pulumi.StringPtrInput `pulumi:"blobContainerUri"`
	// The SAS token of the Azure blob container.
	SasToken SecureStringPtrInput `pulumi:"sasToken"`
}

func (IntegrationRuntimeCustomSetupScriptPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeCustomSetupScriptProperties)(nil)).Elem()
}

func (i IntegrationRuntimeCustomSetupScriptPropertiesArgs) ToIntegrationRuntimeCustomSetupScriptPropertiesOutput() IntegrationRuntimeCustomSetupScriptPropertiesOutput {
	return i.ToIntegrationRuntimeCustomSetupScriptPropertiesOutputWithContext(context.Background())
}

func (i IntegrationRuntimeCustomSetupScriptPropertiesArgs) ToIntegrationRuntimeCustomSetupScriptPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeCustomSetupScriptPropertiesOutput)
}

func (i IntegrationRuntimeCustomSetupScriptPropertiesArgs) ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutput() IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return i.ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeCustomSetupScriptPropertiesArgs) ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeCustomSetupScriptPropertiesOutput).ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(ctx)
}

// IntegrationRuntimeCustomSetupScriptPropertiesPtrInput is an input type that accepts IntegrationRuntimeCustomSetupScriptPropertiesArgs, IntegrationRuntimeCustomSetupScriptPropertiesPtr and IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeCustomSetupScriptPropertiesPtrInput` via:
//
//          IntegrationRuntimeCustomSetupScriptPropertiesArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeCustomSetupScriptPropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutput() IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput
	ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(context.Context) IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput
}

type integrationRuntimeCustomSetupScriptPropertiesPtrType IntegrationRuntimeCustomSetupScriptPropertiesArgs

func IntegrationRuntimeCustomSetupScriptPropertiesPtr(v *IntegrationRuntimeCustomSetupScriptPropertiesArgs) IntegrationRuntimeCustomSetupScriptPropertiesPtrInput {
	return (*integrationRuntimeCustomSetupScriptPropertiesPtrType)(v)
}

func (*integrationRuntimeCustomSetupScriptPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeCustomSetupScriptProperties)(nil)).Elem()
}

func (i *integrationRuntimeCustomSetupScriptPropertiesPtrType) ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutput() IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return i.ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeCustomSetupScriptPropertiesPtrType) ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput)
}

// Custom setup script properties for a managed dedicated integration runtime.
type IntegrationRuntimeCustomSetupScriptPropertiesResponse struct {
	// The URI of the Azure blob container that contains the custom setup script.
	BlobContainerUri *string `pulumi:"blobContainerUri"`
	// The SAS token of the Azure blob container.
	SasToken *SecureStringResponse `pulumi:"sasToken"`
}

// Custom setup script properties for a managed dedicated integration runtime.
type IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeCustomSetupScriptPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesResponseOutput() IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesResponseOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput() IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput {
	return o.ToIntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeCustomSetupScriptPropertiesResponse) *IntegrationRuntimeCustomSetupScriptPropertiesResponse {
		return &v
	}).(IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput)
}

// The URI of the Azure blob container that contains the custom setup script.
func (o IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput) BlobContainerUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeCustomSetupScriptPropertiesResponse) *string { return v.BlobContainerUri }).(pulumi.StringPtrOutput)
}

// The SAS token of the Azure blob container.
func (o IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput) SasToken() SecureStringResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeCustomSetupScriptPropertiesResponse) *SecureStringResponse { return v.SasToken }).(SecureStringResponsePtrOutput)
}

type IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeCustomSetupScriptPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput() IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput) Elem() IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeCustomSetupScriptPropertiesResponse) IntegrationRuntimeCustomSetupScriptPropertiesResponse {
		return *v
	}).(IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput)
}

// The URI of the Azure blob container that contains the custom setup script.
func (o IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput) BlobContainerUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeCustomSetupScriptPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.BlobContainerUri
	}).(pulumi.StringPtrOutput)
}

// The SAS token of the Azure blob container.
func (o IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput) SasToken() SecureStringResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeCustomSetupScriptPropertiesResponse) *SecureStringResponse {
		if v == nil {
			return nil
		}
		return v.SasToken
	}).(SecureStringResponsePtrOutput)
}

// Data proxy properties for a managed dedicated integration runtime.
type IntegrationRuntimeDataProxyProperties struct {
	// The self-hosted integration runtime reference.
	ConnectVia *EntityReference `pulumi:"connectVia"`
	// The path to contain the staged data in the Blob storage.
	Path *string `pulumi:"path"`
	// The staging linked service reference.
	StagingLinkedService *EntityReference `pulumi:"stagingLinkedService"`
}

// IntegrationRuntimeDataProxyPropertiesInput is an input type that accepts IntegrationRuntimeDataProxyPropertiesArgs and IntegrationRuntimeDataProxyPropertiesOutput values.
// You can construct a concrete instance of `IntegrationRuntimeDataProxyPropertiesInput` via:
//
//          IntegrationRuntimeDataProxyPropertiesArgs{...}
type IntegrationRuntimeDataProxyPropertiesInput interface {
	pulumi.Input

	ToIntegrationRuntimeDataProxyPropertiesOutput() IntegrationRuntimeDataProxyPropertiesOutput
	ToIntegrationRuntimeDataProxyPropertiesOutputWithContext(context.Context) IntegrationRuntimeDataProxyPropertiesOutput
}

// Data proxy properties for a managed dedicated integration runtime.
type IntegrationRuntimeDataProxyPropertiesArgs struct {
	// The self-hosted integration runtime reference.
	ConnectVia EntityReferencePtrInput `pulumi:"connectVia"`
	// The path to contain the staged data in the Blob storage.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The staging linked service reference.
	StagingLinkedService EntityReferencePtrInput `pulumi:"stagingLinkedService"`
}

func (IntegrationRuntimeDataProxyPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeDataProxyProperties)(nil)).Elem()
}

func (i IntegrationRuntimeDataProxyPropertiesArgs) ToIntegrationRuntimeDataProxyPropertiesOutput() IntegrationRuntimeDataProxyPropertiesOutput {
	return i.ToIntegrationRuntimeDataProxyPropertiesOutputWithContext(context.Background())
}

func (i IntegrationRuntimeDataProxyPropertiesArgs) ToIntegrationRuntimeDataProxyPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDataProxyPropertiesOutput)
}

func (i IntegrationRuntimeDataProxyPropertiesArgs) ToIntegrationRuntimeDataProxyPropertiesPtrOutput() IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return i.ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeDataProxyPropertiesArgs) ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDataProxyPropertiesOutput).ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(ctx)
}

// IntegrationRuntimeDataProxyPropertiesPtrInput is an input type that accepts IntegrationRuntimeDataProxyPropertiesArgs, IntegrationRuntimeDataProxyPropertiesPtr and IntegrationRuntimeDataProxyPropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeDataProxyPropertiesPtrInput` via:
//
//          IntegrationRuntimeDataProxyPropertiesArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeDataProxyPropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeDataProxyPropertiesPtrOutput() IntegrationRuntimeDataProxyPropertiesPtrOutput
	ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(context.Context) IntegrationRuntimeDataProxyPropertiesPtrOutput
}

type integrationRuntimeDataProxyPropertiesPtrType IntegrationRuntimeDataProxyPropertiesArgs

func IntegrationRuntimeDataProxyPropertiesPtr(v *IntegrationRuntimeDataProxyPropertiesArgs) IntegrationRuntimeDataProxyPropertiesPtrInput {
	return (*integrationRuntimeDataProxyPropertiesPtrType)(v)
}

func (*integrationRuntimeDataProxyPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeDataProxyProperties)(nil)).Elem()
}

func (i *integrationRuntimeDataProxyPropertiesPtrType) ToIntegrationRuntimeDataProxyPropertiesPtrOutput() IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return i.ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeDataProxyPropertiesPtrType) ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDataProxyPropertiesPtrOutput)
}

// Data proxy properties for a managed dedicated integration runtime.
type IntegrationRuntimeDataProxyPropertiesResponse struct {
	// The self-hosted integration runtime reference.
	ConnectVia *EntityReferenceResponse `pulumi:"connectVia"`
	// The path to contain the staged data in the Blob storage.
	Path *string `pulumi:"path"`
	// The staging linked service reference.
	StagingLinkedService *EntityReferenceResponse `pulumi:"stagingLinkedService"`
}

// Data proxy properties for a managed dedicated integration runtime.
type IntegrationRuntimeDataProxyPropertiesResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDataProxyPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeDataProxyPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeDataProxyPropertiesResponseOutput) ToIntegrationRuntimeDataProxyPropertiesResponseOutput() IntegrationRuntimeDataProxyPropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeDataProxyPropertiesResponseOutput) ToIntegrationRuntimeDataProxyPropertiesResponseOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeDataProxyPropertiesResponseOutput) ToIntegrationRuntimeDataProxyPropertiesResponsePtrOutput() IntegrationRuntimeDataProxyPropertiesResponsePtrOutput {
	return o.ToIntegrationRuntimeDataProxyPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeDataProxyPropertiesResponseOutput) ToIntegrationRuntimeDataProxyPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataProxyPropertiesResponse) *IntegrationRuntimeDataProxyPropertiesResponse {
		return &v
	}).(IntegrationRuntimeDataProxyPropertiesResponsePtrOutput)
}

// The self-hosted integration runtime reference.
func (o IntegrationRuntimeDataProxyPropertiesResponseOutput) ConnectVia() EntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataProxyPropertiesResponse) *EntityReferenceResponse { return v.ConnectVia }).(EntityReferenceResponsePtrOutput)
}

// The path to contain the staged data in the Blob storage.
func (o IntegrationRuntimeDataProxyPropertiesResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataProxyPropertiesResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The staging linked service reference.
func (o IntegrationRuntimeDataProxyPropertiesResponseOutput) StagingLinkedService() EntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataProxyPropertiesResponse) *EntityReferenceResponse {
		return v.StagingLinkedService
	}).(EntityReferenceResponsePtrOutput)
}

type IntegrationRuntimeDataProxyPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDataProxyPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeDataProxyPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeDataProxyPropertiesResponsePtrOutput) ToIntegrationRuntimeDataProxyPropertiesResponsePtrOutput() IntegrationRuntimeDataProxyPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeDataProxyPropertiesResponsePtrOutput) ToIntegrationRuntimeDataProxyPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeDataProxyPropertiesResponsePtrOutput) Elem() IntegrationRuntimeDataProxyPropertiesResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataProxyPropertiesResponse) IntegrationRuntimeDataProxyPropertiesResponse {
		return *v
	}).(IntegrationRuntimeDataProxyPropertiesResponseOutput)
}

// The self-hosted integration runtime reference.
func (o IntegrationRuntimeDataProxyPropertiesResponsePtrOutput) ConnectVia() EntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataProxyPropertiesResponse) *EntityReferenceResponse {
		if v == nil {
			return nil
		}
		return v.ConnectVia
	}).(EntityReferenceResponsePtrOutput)
}

// The path to contain the staged data in the Blob storage.
func (o IntegrationRuntimeDataProxyPropertiesResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataProxyPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// The staging linked service reference.
func (o IntegrationRuntimeDataProxyPropertiesResponsePtrOutput) StagingLinkedService() EntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataProxyPropertiesResponse) *EntityReferenceResponse {
		if v == nil {
			return nil
		}
		return v.StagingLinkedService
	}).(EntityReferenceResponsePtrOutput)
}

// Integration runtime reference type.
type IntegrationRuntimeReference struct {
	// Arguments for integration runtime.
	Parameters map[string]map[string]interface{} `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName string `pulumi:"referenceName"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// IntegrationRuntimeReferenceInput is an input type that accepts IntegrationRuntimeReferenceArgs and IntegrationRuntimeReferenceOutput values.
// You can construct a concrete instance of `IntegrationRuntimeReferenceInput` via:
//
//          IntegrationRuntimeReferenceArgs{...}
type IntegrationRuntimeReferenceInput interface {
	pulumi.Input

	ToIntegrationRuntimeReferenceOutput() IntegrationRuntimeReferenceOutput
	ToIntegrationRuntimeReferenceOutputWithContext(context.Context) IntegrationRuntimeReferenceOutput
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceArgs struct {
	// Arguments for integration runtime.
	Parameters pulumi.MapMapInput `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IntegrationRuntimeReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeReference)(nil)).Elem()
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferenceOutput() IntegrationRuntimeReferenceOutput {
	return i.ToIntegrationRuntimeReferenceOutputWithContext(context.Background())
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferenceOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceOutput)
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput {
	return i.ToIntegrationRuntimeReferencePtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferencePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceOutput).ToIntegrationRuntimeReferencePtrOutputWithContext(ctx)
}

// IntegrationRuntimeReferencePtrInput is an input type that accepts IntegrationRuntimeReferenceArgs, IntegrationRuntimeReferencePtr and IntegrationRuntimeReferencePtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeReferencePtrInput` via:
//
//          IntegrationRuntimeReferenceArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeReferencePtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput
	ToIntegrationRuntimeReferencePtrOutputWithContext(context.Context) IntegrationRuntimeReferencePtrOutput
}

type integrationRuntimeReferencePtrType IntegrationRuntimeReferenceArgs

func IntegrationRuntimeReferencePtr(v *IntegrationRuntimeReferenceArgs) IntegrationRuntimeReferencePtrInput {
	return (*integrationRuntimeReferencePtrType)(v)
}

func (*integrationRuntimeReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeReference)(nil)).Elem()
}

func (i *integrationRuntimeReferencePtrType) ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput {
	return i.ToIntegrationRuntimeReferencePtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeReferencePtrType) ToIntegrationRuntimeReferencePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferencePtrOutput)
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceResponse struct {
	// Arguments for integration runtime.
	Parameters map[string]map[string]interface{} `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName string `pulumi:"referenceName"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeReferenceResponse)(nil)).Elem()
}

func (o IntegrationRuntimeReferenceResponseOutput) ToIntegrationRuntimeReferenceResponseOutput() IntegrationRuntimeReferenceResponseOutput {
	return o
}

func (o IntegrationRuntimeReferenceResponseOutput) ToIntegrationRuntimeReferenceResponseOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponseOutput {
	return o
}

func (o IntegrationRuntimeReferenceResponseOutput) ToIntegrationRuntimeReferenceResponsePtrOutput() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeReferenceResponseOutput) ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeReferenceResponse) *IntegrationRuntimeReferenceResponse {
		return &v
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Arguments for integration runtime.
func (o IntegrationRuntimeReferenceResponseOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v IntegrationRuntimeReferenceResponse) map[string]map[string]interface{} { return v.Parameters }).(pulumi.MapMapOutput)
}

// Reference integration runtime name.
func (o IntegrationRuntimeReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type IntegrationRuntimeReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeReferenceResponse)(nil)).Elem()
}

func (o IntegrationRuntimeReferenceResponsePtrOutput) ToIntegrationRuntimeReferenceResponsePtrOutput() IntegrationRuntimeReferenceResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeReferenceResponsePtrOutput) ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeReferenceResponsePtrOutput) Elem() IntegrationRuntimeReferenceResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) IntegrationRuntimeReferenceResponse { return *v }).(IntegrationRuntimeReferenceResponseOutput)
}

// Arguments for integration runtime.
func (o IntegrationRuntimeReferenceResponsePtrOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) map[string]map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapMapOutput)
}

// Reference integration runtime name.
func (o IntegrationRuntimeReferenceResponsePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Catalog information for managed dedicated integration runtime.
type IntegrationRuntimeSsisCatalogInfo struct {
	// The password of the administrator user account of the catalog database.
	CatalogAdminPassword *SecureString `pulumi:"catalogAdminPassword"`
	// The administrator user name of catalog database.
	CatalogAdminUserName *string `pulumi:"catalogAdminUserName"`
	// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
	CatalogPricingTier *string `pulumi:"catalogPricingTier"`
	// The catalog database server URL.
	CatalogServerEndpoint *string `pulumi:"catalogServerEndpoint"`
}

// IntegrationRuntimeSsisCatalogInfoInput is an input type that accepts IntegrationRuntimeSsisCatalogInfoArgs and IntegrationRuntimeSsisCatalogInfoOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSsisCatalogInfoInput` via:
//
//          IntegrationRuntimeSsisCatalogInfoArgs{...}
type IntegrationRuntimeSsisCatalogInfoInput interface {
	pulumi.Input

	ToIntegrationRuntimeSsisCatalogInfoOutput() IntegrationRuntimeSsisCatalogInfoOutput
	ToIntegrationRuntimeSsisCatalogInfoOutputWithContext(context.Context) IntegrationRuntimeSsisCatalogInfoOutput
}

// Catalog information for managed dedicated integration runtime.
type IntegrationRuntimeSsisCatalogInfoArgs struct {
	// The password of the administrator user account of the catalog database.
	CatalogAdminPassword SecureStringPtrInput `pulumi:"catalogAdminPassword"`
	// The administrator user name of catalog database.
	CatalogAdminUserName pulumi.StringPtrInput `pulumi:"catalogAdminUserName"`
	// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
	CatalogPricingTier pulumi.StringPtrInput `pulumi:"catalogPricingTier"`
	// The catalog database server URL.
	CatalogServerEndpoint pulumi.StringPtrInput `pulumi:"catalogServerEndpoint"`
}

func (IntegrationRuntimeSsisCatalogInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisCatalogInfo)(nil)).Elem()
}

func (i IntegrationRuntimeSsisCatalogInfoArgs) ToIntegrationRuntimeSsisCatalogInfoOutput() IntegrationRuntimeSsisCatalogInfoOutput {
	return i.ToIntegrationRuntimeSsisCatalogInfoOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSsisCatalogInfoArgs) ToIntegrationRuntimeSsisCatalogInfoOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisCatalogInfoOutput)
}

func (i IntegrationRuntimeSsisCatalogInfoArgs) ToIntegrationRuntimeSsisCatalogInfoPtrOutput() IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return i.ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSsisCatalogInfoArgs) ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisCatalogInfoOutput).ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(ctx)
}

// IntegrationRuntimeSsisCatalogInfoPtrInput is an input type that accepts IntegrationRuntimeSsisCatalogInfoArgs, IntegrationRuntimeSsisCatalogInfoPtr and IntegrationRuntimeSsisCatalogInfoPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSsisCatalogInfoPtrInput` via:
//
//          IntegrationRuntimeSsisCatalogInfoArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeSsisCatalogInfoPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeSsisCatalogInfoPtrOutput() IntegrationRuntimeSsisCatalogInfoPtrOutput
	ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(context.Context) IntegrationRuntimeSsisCatalogInfoPtrOutput
}

type integrationRuntimeSsisCatalogInfoPtrType IntegrationRuntimeSsisCatalogInfoArgs

func IntegrationRuntimeSsisCatalogInfoPtr(v *IntegrationRuntimeSsisCatalogInfoArgs) IntegrationRuntimeSsisCatalogInfoPtrInput {
	return (*integrationRuntimeSsisCatalogInfoPtrType)(v)
}

func (*integrationRuntimeSsisCatalogInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisCatalogInfo)(nil)).Elem()
}

func (i *integrationRuntimeSsisCatalogInfoPtrType) ToIntegrationRuntimeSsisCatalogInfoPtrOutput() IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return i.ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeSsisCatalogInfoPtrType) ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisCatalogInfoPtrOutput)
}

// Catalog information for managed dedicated integration runtime.
type IntegrationRuntimeSsisCatalogInfoResponse struct {
	// The password of the administrator user account of the catalog database.
	CatalogAdminPassword *SecureStringResponse `pulumi:"catalogAdminPassword"`
	// The administrator user name of catalog database.
	CatalogAdminUserName *string `pulumi:"catalogAdminUserName"`
	// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
	CatalogPricingTier *string `pulumi:"catalogPricingTier"`
	// The catalog database server URL.
	CatalogServerEndpoint *string `pulumi:"catalogServerEndpoint"`
}

// Catalog information for managed dedicated integration runtime.
type IntegrationRuntimeSsisCatalogInfoResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisCatalogInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisCatalogInfoResponse)(nil)).Elem()
}

func (o IntegrationRuntimeSsisCatalogInfoResponseOutput) ToIntegrationRuntimeSsisCatalogInfoResponseOutput() IntegrationRuntimeSsisCatalogInfoResponseOutput {
	return o
}

func (o IntegrationRuntimeSsisCatalogInfoResponseOutput) ToIntegrationRuntimeSsisCatalogInfoResponseOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoResponseOutput {
	return o
}

func (o IntegrationRuntimeSsisCatalogInfoResponseOutput) ToIntegrationRuntimeSsisCatalogInfoResponsePtrOutput() IntegrationRuntimeSsisCatalogInfoResponsePtrOutput {
	return o.ToIntegrationRuntimeSsisCatalogInfoResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeSsisCatalogInfoResponseOutput) ToIntegrationRuntimeSsisCatalogInfoResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfoResponse) *IntegrationRuntimeSsisCatalogInfoResponse {
		return &v
	}).(IntegrationRuntimeSsisCatalogInfoResponsePtrOutput)
}

// The password of the administrator user account of the catalog database.
func (o IntegrationRuntimeSsisCatalogInfoResponseOutput) CatalogAdminPassword() SecureStringResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfoResponse) *SecureStringResponse { return v.CatalogAdminPassword }).(SecureStringResponsePtrOutput)
}

// The administrator user name of catalog database.
func (o IntegrationRuntimeSsisCatalogInfoResponseOutput) CatalogAdminUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfoResponse) *string { return v.CatalogAdminUserName }).(pulumi.StringPtrOutput)
}

// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
func (o IntegrationRuntimeSsisCatalogInfoResponseOutput) CatalogPricingTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfoResponse) *string { return v.CatalogPricingTier }).(pulumi.StringPtrOutput)
}

// The catalog database server URL.
func (o IntegrationRuntimeSsisCatalogInfoResponseOutput) CatalogServerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfoResponse) *string { return v.CatalogServerEndpoint }).(pulumi.StringPtrOutput)
}

type IntegrationRuntimeSsisCatalogInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisCatalogInfoResponse)(nil)).Elem()
}

func (o IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) ToIntegrationRuntimeSsisCatalogInfoResponsePtrOutput() IntegrationRuntimeSsisCatalogInfoResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) ToIntegrationRuntimeSsisCatalogInfoResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) Elem() IntegrationRuntimeSsisCatalogInfoResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfoResponse) IntegrationRuntimeSsisCatalogInfoResponse {
		return *v
	}).(IntegrationRuntimeSsisCatalogInfoResponseOutput)
}

// The password of the administrator user account of the catalog database.
func (o IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) CatalogAdminPassword() SecureStringResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfoResponse) *SecureStringResponse {
		if v == nil {
			return nil
		}
		return v.CatalogAdminPassword
	}).(SecureStringResponsePtrOutput)
}

// The administrator user name of catalog database.
func (o IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) CatalogAdminUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.CatalogAdminUserName
	}).(pulumi.StringPtrOutput)
}

// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
func (o IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) CatalogPricingTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.CatalogPricingTier
	}).(pulumi.StringPtrOutput)
}

// The catalog database server URL.
func (o IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) CatalogServerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.CatalogServerEndpoint
	}).(pulumi.StringPtrOutput)
}

// SSIS properties for managed integration runtime.
type IntegrationRuntimeSsisProperties struct {
	// Catalog information for managed dedicated integration runtime.
	CatalogInfo *IntegrationRuntimeSsisCatalogInfo `pulumi:"catalogInfo"`
	// Custom setup script properties for a managed dedicated integration runtime.
	CustomSetupScriptProperties *IntegrationRuntimeCustomSetupScriptProperties `pulumi:"customSetupScriptProperties"`
	// Data proxy properties for a managed dedicated integration runtime.
	DataProxyProperties *IntegrationRuntimeDataProxyProperties `pulumi:"dataProxyProperties"`
	// The edition for the SSIS Integration Runtime
	Edition *string `pulumi:"edition"`
	// License type for bringing your own license scenario.
	LicenseType *string `pulumi:"licenseType"`
}

// IntegrationRuntimeSsisPropertiesInput is an input type that accepts IntegrationRuntimeSsisPropertiesArgs and IntegrationRuntimeSsisPropertiesOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSsisPropertiesInput` via:
//
//          IntegrationRuntimeSsisPropertiesArgs{...}
type IntegrationRuntimeSsisPropertiesInput interface {
	pulumi.Input

	ToIntegrationRuntimeSsisPropertiesOutput() IntegrationRuntimeSsisPropertiesOutput
	ToIntegrationRuntimeSsisPropertiesOutputWithContext(context.Context) IntegrationRuntimeSsisPropertiesOutput
}

// SSIS properties for managed integration runtime.
type IntegrationRuntimeSsisPropertiesArgs struct {
	// Catalog information for managed dedicated integration runtime.
	CatalogInfo IntegrationRuntimeSsisCatalogInfoPtrInput `pulumi:"catalogInfo"`
	// Custom setup script properties for a managed dedicated integration runtime.
	CustomSetupScriptProperties IntegrationRuntimeCustomSetupScriptPropertiesPtrInput `pulumi:"customSetupScriptProperties"`
	// Data proxy properties for a managed dedicated integration runtime.
	DataProxyProperties IntegrationRuntimeDataProxyPropertiesPtrInput `pulumi:"dataProxyProperties"`
	// The edition for the SSIS Integration Runtime
	Edition pulumi.StringPtrInput `pulumi:"edition"`
	// License type for bringing your own license scenario.
	LicenseType pulumi.StringPtrInput `pulumi:"licenseType"`
}

func (IntegrationRuntimeSsisPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisProperties)(nil)).Elem()
}

func (i IntegrationRuntimeSsisPropertiesArgs) ToIntegrationRuntimeSsisPropertiesOutput() IntegrationRuntimeSsisPropertiesOutput {
	return i.ToIntegrationRuntimeSsisPropertiesOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSsisPropertiesArgs) ToIntegrationRuntimeSsisPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisPropertiesOutput)
}

func (i IntegrationRuntimeSsisPropertiesArgs) ToIntegrationRuntimeSsisPropertiesPtrOutput() IntegrationRuntimeSsisPropertiesPtrOutput {
	return i.ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSsisPropertiesArgs) ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisPropertiesOutput).ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(ctx)
}

// IntegrationRuntimeSsisPropertiesPtrInput is an input type that accepts IntegrationRuntimeSsisPropertiesArgs, IntegrationRuntimeSsisPropertiesPtr and IntegrationRuntimeSsisPropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSsisPropertiesPtrInput` via:
//
//          IntegrationRuntimeSsisPropertiesArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeSsisPropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeSsisPropertiesPtrOutput() IntegrationRuntimeSsisPropertiesPtrOutput
	ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(context.Context) IntegrationRuntimeSsisPropertiesPtrOutput
}

type integrationRuntimeSsisPropertiesPtrType IntegrationRuntimeSsisPropertiesArgs

func IntegrationRuntimeSsisPropertiesPtr(v *IntegrationRuntimeSsisPropertiesArgs) IntegrationRuntimeSsisPropertiesPtrInput {
	return (*integrationRuntimeSsisPropertiesPtrType)(v)
}

func (*integrationRuntimeSsisPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisProperties)(nil)).Elem()
}

func (i *integrationRuntimeSsisPropertiesPtrType) ToIntegrationRuntimeSsisPropertiesPtrOutput() IntegrationRuntimeSsisPropertiesPtrOutput {
	return i.ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeSsisPropertiesPtrType) ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisPropertiesPtrOutput)
}

// SSIS properties for managed integration runtime.
type IntegrationRuntimeSsisPropertiesResponse struct {
	// Catalog information for managed dedicated integration runtime.
	CatalogInfo *IntegrationRuntimeSsisCatalogInfoResponse `pulumi:"catalogInfo"`
	// Custom setup script properties for a managed dedicated integration runtime.
	CustomSetupScriptProperties *IntegrationRuntimeCustomSetupScriptPropertiesResponse `pulumi:"customSetupScriptProperties"`
	// Data proxy properties for a managed dedicated integration runtime.
	DataProxyProperties *IntegrationRuntimeDataProxyPropertiesResponse `pulumi:"dataProxyProperties"`
	// The edition for the SSIS Integration Runtime
	Edition *string `pulumi:"edition"`
	// License type for bringing your own license scenario.
	LicenseType *string `pulumi:"licenseType"`
}

// SSIS properties for managed integration runtime.
type IntegrationRuntimeSsisPropertiesResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeSsisPropertiesResponseOutput) ToIntegrationRuntimeSsisPropertiesResponseOutput() IntegrationRuntimeSsisPropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeSsisPropertiesResponseOutput) ToIntegrationRuntimeSsisPropertiesResponseOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeSsisPropertiesResponseOutput) ToIntegrationRuntimeSsisPropertiesResponsePtrOutput() IntegrationRuntimeSsisPropertiesResponsePtrOutput {
	return o.ToIntegrationRuntimeSsisPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeSsisPropertiesResponseOutput) ToIntegrationRuntimeSsisPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisPropertiesResponse) *IntegrationRuntimeSsisPropertiesResponse {
		return &v
	}).(IntegrationRuntimeSsisPropertiesResponsePtrOutput)
}

// Catalog information for managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesResponseOutput) CatalogInfo() IntegrationRuntimeSsisCatalogInfoResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisPropertiesResponse) *IntegrationRuntimeSsisCatalogInfoResponse {
		return v.CatalogInfo
	}).(IntegrationRuntimeSsisCatalogInfoResponsePtrOutput)
}

// Custom setup script properties for a managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesResponseOutput) CustomSetupScriptProperties() IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisPropertiesResponse) *IntegrationRuntimeCustomSetupScriptPropertiesResponse {
		return v.CustomSetupScriptProperties
	}).(IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput)
}

// Data proxy properties for a managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesResponseOutput) DataProxyProperties() IntegrationRuntimeDataProxyPropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisPropertiesResponse) *IntegrationRuntimeDataProxyPropertiesResponse {
		return v.DataProxyProperties
	}).(IntegrationRuntimeDataProxyPropertiesResponsePtrOutput)
}

// The edition for the SSIS Integration Runtime
func (o IntegrationRuntimeSsisPropertiesResponseOutput) Edition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisPropertiesResponse) *string { return v.Edition }).(pulumi.StringPtrOutput)
}

// License type for bringing your own license scenario.
func (o IntegrationRuntimeSsisPropertiesResponseOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisPropertiesResponse) *string { return v.LicenseType }).(pulumi.StringPtrOutput)
}

type IntegrationRuntimeSsisPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) ToIntegrationRuntimeSsisPropertiesResponsePtrOutput() IntegrationRuntimeSsisPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) ToIntegrationRuntimeSsisPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) Elem() IntegrationRuntimeSsisPropertiesResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisPropertiesResponse) IntegrationRuntimeSsisPropertiesResponse { return *v }).(IntegrationRuntimeSsisPropertiesResponseOutput)
}

// Catalog information for managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) CatalogInfo() IntegrationRuntimeSsisCatalogInfoResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisPropertiesResponse) *IntegrationRuntimeSsisCatalogInfoResponse {
		if v == nil {
			return nil
		}
		return v.CatalogInfo
	}).(IntegrationRuntimeSsisCatalogInfoResponsePtrOutput)
}

// Custom setup script properties for a managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) CustomSetupScriptProperties() IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisPropertiesResponse) *IntegrationRuntimeCustomSetupScriptPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.CustomSetupScriptProperties
	}).(IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput)
}

// Data proxy properties for a managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) DataProxyProperties() IntegrationRuntimeDataProxyPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisPropertiesResponse) *IntegrationRuntimeDataProxyPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.DataProxyProperties
	}).(IntegrationRuntimeDataProxyPropertiesResponsePtrOutput)
}

// The edition for the SSIS Integration Runtime
func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) Edition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Edition
	}).(pulumi.StringPtrOutput)
}

// License type for bringing your own license scenario.
func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.LicenseType
	}).(pulumi.StringPtrOutput)
}

// VNet properties for managed integration runtime.
type IntegrationRuntimeVNetProperties struct {
	// The name of the subnet this integration runtime will join.
	Subnet *string `pulumi:"subnet"`
	// The ID of the VNet that this integration runtime will join.
	VNetId *string `pulumi:"vNetId"`
}

// IntegrationRuntimeVNetPropertiesInput is an input type that accepts IntegrationRuntimeVNetPropertiesArgs and IntegrationRuntimeVNetPropertiesOutput values.
// You can construct a concrete instance of `IntegrationRuntimeVNetPropertiesInput` via:
//
//          IntegrationRuntimeVNetPropertiesArgs{...}
type IntegrationRuntimeVNetPropertiesInput interface {
	pulumi.Input

	ToIntegrationRuntimeVNetPropertiesOutput() IntegrationRuntimeVNetPropertiesOutput
	ToIntegrationRuntimeVNetPropertiesOutputWithContext(context.Context) IntegrationRuntimeVNetPropertiesOutput
}

// VNet properties for managed integration runtime.
type IntegrationRuntimeVNetPropertiesArgs struct {
	// The name of the subnet this integration runtime will join.
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
	// The ID of the VNet that this integration runtime will join.
	VNetId pulumi.StringPtrInput `pulumi:"vNetId"`
}

func (IntegrationRuntimeVNetPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeVNetProperties)(nil)).Elem()
}

func (i IntegrationRuntimeVNetPropertiesArgs) ToIntegrationRuntimeVNetPropertiesOutput() IntegrationRuntimeVNetPropertiesOutput {
	return i.ToIntegrationRuntimeVNetPropertiesOutputWithContext(context.Background())
}

func (i IntegrationRuntimeVNetPropertiesArgs) ToIntegrationRuntimeVNetPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeVNetPropertiesOutput)
}

func (i IntegrationRuntimeVNetPropertiesArgs) ToIntegrationRuntimeVNetPropertiesPtrOutput() IntegrationRuntimeVNetPropertiesPtrOutput {
	return i.ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeVNetPropertiesArgs) ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeVNetPropertiesOutput).ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(ctx)
}

// IntegrationRuntimeVNetPropertiesPtrInput is an input type that accepts IntegrationRuntimeVNetPropertiesArgs, IntegrationRuntimeVNetPropertiesPtr and IntegrationRuntimeVNetPropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeVNetPropertiesPtrInput` via:
//
//          IntegrationRuntimeVNetPropertiesArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeVNetPropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeVNetPropertiesPtrOutput() IntegrationRuntimeVNetPropertiesPtrOutput
	ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(context.Context) IntegrationRuntimeVNetPropertiesPtrOutput
}

type integrationRuntimeVNetPropertiesPtrType IntegrationRuntimeVNetPropertiesArgs

func IntegrationRuntimeVNetPropertiesPtr(v *IntegrationRuntimeVNetPropertiesArgs) IntegrationRuntimeVNetPropertiesPtrInput {
	return (*integrationRuntimeVNetPropertiesPtrType)(v)
}

func (*integrationRuntimeVNetPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeVNetProperties)(nil)).Elem()
}

func (i *integrationRuntimeVNetPropertiesPtrType) ToIntegrationRuntimeVNetPropertiesPtrOutput() IntegrationRuntimeVNetPropertiesPtrOutput {
	return i.ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeVNetPropertiesPtrType) ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeVNetPropertiesPtrOutput)
}

// VNet properties for managed integration runtime.
type IntegrationRuntimeVNetPropertiesResponse struct {
	// The name of the subnet this integration runtime will join.
	Subnet *string `pulumi:"subnet"`
	// The ID of the VNet that this integration runtime will join.
	VNetId *string `pulumi:"vNetId"`
}

// VNet properties for managed integration runtime.
type IntegrationRuntimeVNetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeVNetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeVNetPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeVNetPropertiesResponseOutput) ToIntegrationRuntimeVNetPropertiesResponseOutput() IntegrationRuntimeVNetPropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeVNetPropertiesResponseOutput) ToIntegrationRuntimeVNetPropertiesResponseOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeVNetPropertiesResponseOutput) ToIntegrationRuntimeVNetPropertiesResponsePtrOutput() IntegrationRuntimeVNetPropertiesResponsePtrOutput {
	return o.ToIntegrationRuntimeVNetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeVNetPropertiesResponseOutput) ToIntegrationRuntimeVNetPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeVNetPropertiesResponse) *IntegrationRuntimeVNetPropertiesResponse {
		return &v
	}).(IntegrationRuntimeVNetPropertiesResponsePtrOutput)
}

// The name of the subnet this integration runtime will join.
func (o IntegrationRuntimeVNetPropertiesResponseOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeVNetPropertiesResponse) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

// The ID of the VNet that this integration runtime will join.
func (o IntegrationRuntimeVNetPropertiesResponseOutput) VNetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeVNetPropertiesResponse) *string { return v.VNetId }).(pulumi.StringPtrOutput)
}

type IntegrationRuntimeVNetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeVNetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeVNetPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeVNetPropertiesResponsePtrOutput) ToIntegrationRuntimeVNetPropertiesResponsePtrOutput() IntegrationRuntimeVNetPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeVNetPropertiesResponsePtrOutput) ToIntegrationRuntimeVNetPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeVNetPropertiesResponsePtrOutput) Elem() IntegrationRuntimeVNetPropertiesResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeVNetPropertiesResponse) IntegrationRuntimeVNetPropertiesResponse { return *v }).(IntegrationRuntimeVNetPropertiesResponseOutput)
}

// The name of the subnet this integration runtime will join.
func (o IntegrationRuntimeVNetPropertiesResponsePtrOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeVNetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Subnet
	}).(pulumi.StringPtrOutput)
}

// The ID of the VNet that this integration runtime will join.
func (o IntegrationRuntimeVNetPropertiesResponsePtrOutput) VNetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeVNetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.VNetId
	}).(pulumi.StringPtrOutput)
}

// Jira Service linked service.
type JiraLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Jira service. (e.g. jira.example.com)
	Host map[string]interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP.
	Port map[string]interface{} `pulumi:"port"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Jira Service.
	Username map[string]interface{} `pulumi:"username"`
}

// JiraLinkedServiceInput is an input type that accepts JiraLinkedServiceArgs and JiraLinkedServiceOutput values.
// You can construct a concrete instance of `JiraLinkedServiceInput` via:
//
//          JiraLinkedServiceArgs{...}
type JiraLinkedServiceInput interface {
	pulumi.Input

	ToJiraLinkedServiceOutput() JiraLinkedServiceOutput
	ToJiraLinkedServiceOutputWithContext(context.Context) JiraLinkedServiceOutput
}

// Jira Service linked service.
type JiraLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The IP address or host name of the Jira service. (e.g. jira.example.com)
	Host pulumi.MapInput `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP.
	Port pulumi.MapInput `pulumi:"port"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.MapInput `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.MapInput `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.MapInput `pulumi:"usePeerVerification"`
	// The user name that you use to access Jira Service.
	Username pulumi.MapInput `pulumi:"username"`
}

func (JiraLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JiraLinkedService)(nil)).Elem()
}

func (i JiraLinkedServiceArgs) ToJiraLinkedServiceOutput() JiraLinkedServiceOutput {
	return i.ToJiraLinkedServiceOutputWithContext(context.Background())
}

func (i JiraLinkedServiceArgs) ToJiraLinkedServiceOutputWithContext(ctx context.Context) JiraLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JiraLinkedServiceOutput)
}

// Jira Service linked service.
type JiraLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Jira service. (e.g. jira.example.com)
	Host map[string]interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP.
	Port map[string]interface{} `pulumi:"port"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Jira Service.
	Username map[string]interface{} `pulumi:"username"`
}

// Jira Service linked service.
type JiraLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (JiraLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JiraLinkedServiceResponse)(nil)).Elem()
}

func (o JiraLinkedServiceResponseOutput) ToJiraLinkedServiceResponseOutput() JiraLinkedServiceResponseOutput {
	return o
}

func (o JiraLinkedServiceResponseOutput) ToJiraLinkedServiceResponseOutputWithContext(ctx context.Context) JiraLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o JiraLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o JiraLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o JiraLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o JiraLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The IP address or host name of the Jira service. (e.g. jira.example.com)
func (o JiraLinkedServiceResponseOutput) Host() pulumi.MapOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) map[string]interface{} { return v.Host }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o JiraLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name that you provided in the username field.
func (o JiraLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP.
func (o JiraLinkedServiceResponseOutput) Port() pulumi.MapOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) map[string]interface{} { return v.Port }).(pulumi.MapOutput)
}

// Type of linked service.
func (o JiraLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o JiraLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.MapOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) map[string]interface{} { return v.UseEncryptedEndpoints }).(pulumi.MapOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o JiraLinkedServiceResponseOutput) UseHostVerification() pulumi.MapOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) map[string]interface{} { return v.UseHostVerification }).(pulumi.MapOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o JiraLinkedServiceResponseOutput) UsePeerVerification() pulumi.MapOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) map[string]interface{} { return v.UsePeerVerification }).(pulumi.MapOutput)
}

// The user name that you use to access Jira Service.
func (o JiraLinkedServiceResponseOutput) Username() pulumi.MapOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) map[string]interface{} { return v.Username }).(pulumi.MapOutput)
}

// Jira Service dataset.
type JiraObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// JiraObjectDatasetInput is an input type that accepts JiraObjectDatasetArgs and JiraObjectDatasetOutput values.
// You can construct a concrete instance of `JiraObjectDatasetInput` via:
//
//          JiraObjectDatasetArgs{...}
type JiraObjectDatasetInput interface {
	pulumi.Input

	ToJiraObjectDatasetOutput() JiraObjectDatasetOutput
	ToJiraObjectDatasetOutputWithContext(context.Context) JiraObjectDatasetOutput
}

// Jira Service dataset.
type JiraObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JiraObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JiraObjectDataset)(nil)).Elem()
}

func (i JiraObjectDatasetArgs) ToJiraObjectDatasetOutput() JiraObjectDatasetOutput {
	return i.ToJiraObjectDatasetOutputWithContext(context.Background())
}

func (i JiraObjectDatasetArgs) ToJiraObjectDatasetOutputWithContext(ctx context.Context) JiraObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JiraObjectDatasetOutput)
}

// Jira Service dataset.
type JiraObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Jira Service dataset.
type JiraObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (JiraObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JiraObjectDatasetResponse)(nil)).Elem()
}

func (o JiraObjectDatasetResponseOutput) ToJiraObjectDatasetResponseOutput() JiraObjectDatasetResponseOutput {
	return o
}

func (o JiraObjectDatasetResponseOutput) ToJiraObjectDatasetResponseOutputWithContext(ctx context.Context) JiraObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o JiraObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o JiraObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o JiraObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o JiraObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o JiraObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o JiraObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The data stored in JSON format.
type JsonFormat struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer map[string]interface{} `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
	EncodingName map[string]interface{} `pulumi:"encodingName"`
	// File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
	FilePattern *string `pulumi:"filePattern"`
	// The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType string).
	JsonNodeReference map[string]interface{} `pulumi:"jsonNodeReference"`
	// The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
	JsonPathDefinition map[string]interface{} `pulumi:"jsonPathDefinition"`
	// The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType string).
	NestingSeparator map[string]interface{} `pulumi:"nestingSeparator"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer map[string]interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	Type string `pulumi:"type"`
}

// JsonFormatInput is an input type that accepts JsonFormatArgs and JsonFormatOutput values.
// You can construct a concrete instance of `JsonFormatInput` via:
//
//          JsonFormatArgs{...}
type JsonFormatInput interface {
	pulumi.Input

	ToJsonFormatOutput() JsonFormatOutput
	ToJsonFormatOutputWithContext(context.Context) JsonFormatOutput
}

// The data stored in JSON format.
type JsonFormatArgs struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer pulumi.MapInput `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
	EncodingName pulumi.MapInput `pulumi:"encodingName"`
	// File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
	FilePattern pulumi.StringPtrInput `pulumi:"filePattern"`
	// The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType string).
	JsonNodeReference pulumi.MapInput `pulumi:"jsonNodeReference"`
	// The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
	JsonPathDefinition pulumi.MapInput `pulumi:"jsonPathDefinition"`
	// The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType string).
	NestingSeparator pulumi.MapInput `pulumi:"nestingSeparator"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer pulumi.MapInput `pulumi:"serializer"`
	// Type of dataset storage format.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JsonFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFormat)(nil)).Elem()
}

func (i JsonFormatArgs) ToJsonFormatOutput() JsonFormatOutput {
	return i.ToJsonFormatOutputWithContext(context.Background())
}

func (i JsonFormatArgs) ToJsonFormatOutputWithContext(ctx context.Context) JsonFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFormatOutput)
}

// The data stored in JSON format.
type JsonFormatResponse struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer map[string]interface{} `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
	EncodingName map[string]interface{} `pulumi:"encodingName"`
	// File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
	FilePattern *string `pulumi:"filePattern"`
	// The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType string).
	JsonNodeReference map[string]interface{} `pulumi:"jsonNodeReference"`
	// The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
	JsonPathDefinition map[string]interface{} `pulumi:"jsonPathDefinition"`
	// The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType string).
	NestingSeparator map[string]interface{} `pulumi:"nestingSeparator"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer map[string]interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	Type string `pulumi:"type"`
}

// The data stored in JSON format.
type JsonFormatResponseOutput struct{ *pulumi.OutputState }

func (JsonFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFormatResponse)(nil)).Elem()
}

func (o JsonFormatResponseOutput) ToJsonFormatResponseOutput() JsonFormatResponseOutput {
	return o
}

func (o JsonFormatResponseOutput) ToJsonFormatResponseOutputWithContext(ctx context.Context) JsonFormatResponseOutput {
	return o
}

// Deserializer. Type: string (or Expression with resultType string).
func (o JsonFormatResponseOutput) Deserializer() pulumi.MapOutput {
	return o.ApplyT(func(v JsonFormatResponse) map[string]interface{} { return v.Deserializer }).(pulumi.MapOutput)
}

// The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
func (o JsonFormatResponseOutput) EncodingName() pulumi.MapOutput {
	return o.ApplyT(func(v JsonFormatResponse) map[string]interface{} { return v.EncodingName }).(pulumi.MapOutput)
}

// File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
func (o JsonFormatResponseOutput) FilePattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonFormatResponse) *string { return v.FilePattern }).(pulumi.StringPtrOutput)
}

// The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType string).
func (o JsonFormatResponseOutput) JsonNodeReference() pulumi.MapOutput {
	return o.ApplyT(func(v JsonFormatResponse) map[string]interface{} { return v.JsonNodeReference }).(pulumi.MapOutput)
}

// The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
func (o JsonFormatResponseOutput) JsonPathDefinition() pulumi.MapOutput {
	return o.ApplyT(func(v JsonFormatResponse) map[string]interface{} { return v.JsonPathDefinition }).(pulumi.MapOutput)
}

// The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType string).
func (o JsonFormatResponseOutput) NestingSeparator() pulumi.MapOutput {
	return o.ApplyT(func(v JsonFormatResponse) map[string]interface{} { return v.NestingSeparator }).(pulumi.MapOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o JsonFormatResponseOutput) Serializer() pulumi.MapOutput {
	return o.ApplyT(func(v JsonFormatResponse) map[string]interface{} { return v.Serializer }).(pulumi.MapOutput)
}

// Type of dataset storage format.
func (o JsonFormatResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JsonFormatResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The base definition of a secret type.
type LinkedIntegrationRuntimeKey struct {
	// Type of the secret.
	AuthorizationType string `pulumi:"authorizationType"`
	// Type of the secret.
	Key SecureString `pulumi:"key"`
}

// LinkedIntegrationRuntimeKeyInput is an input type that accepts LinkedIntegrationRuntimeKeyArgs and LinkedIntegrationRuntimeKeyOutput values.
// You can construct a concrete instance of `LinkedIntegrationRuntimeKeyInput` via:
//
//          LinkedIntegrationRuntimeKeyArgs{...}
type LinkedIntegrationRuntimeKeyInput interface {
	pulumi.Input

	ToLinkedIntegrationRuntimeKeyOutput() LinkedIntegrationRuntimeKeyOutput
	ToLinkedIntegrationRuntimeKeyOutputWithContext(context.Context) LinkedIntegrationRuntimeKeyOutput
}

// The base definition of a secret type.
type LinkedIntegrationRuntimeKeyArgs struct {
	// Type of the secret.
	AuthorizationType pulumi.StringInput `pulumi:"authorizationType"`
	// Type of the secret.
	Key SecureStringInput `pulumi:"key"`
}

func (LinkedIntegrationRuntimeKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedIntegrationRuntimeKey)(nil)).Elem()
}

func (i LinkedIntegrationRuntimeKeyArgs) ToLinkedIntegrationRuntimeKeyOutput() LinkedIntegrationRuntimeKeyOutput {
	return i.ToLinkedIntegrationRuntimeKeyOutputWithContext(context.Background())
}

func (i LinkedIntegrationRuntimeKeyArgs) ToLinkedIntegrationRuntimeKeyOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedIntegrationRuntimeKeyOutput)
}

// The base definition of a secret type.
type LinkedIntegrationRuntimeKeyResponse struct {
	// Type of the secret.
	AuthorizationType string `pulumi:"authorizationType"`
	// Type of the secret.
	Key SecureStringResponse `pulumi:"key"`
}

// The base definition of a secret type.
type LinkedIntegrationRuntimeKeyResponseOutput struct{ *pulumi.OutputState }

func (LinkedIntegrationRuntimeKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedIntegrationRuntimeKeyResponse)(nil)).Elem()
}

func (o LinkedIntegrationRuntimeKeyResponseOutput) ToLinkedIntegrationRuntimeKeyResponseOutput() LinkedIntegrationRuntimeKeyResponseOutput {
	return o
}

func (o LinkedIntegrationRuntimeKeyResponseOutput) ToLinkedIntegrationRuntimeKeyResponseOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeKeyResponseOutput {
	return o
}

// Type of the secret.
func (o LinkedIntegrationRuntimeKeyResponseOutput) AuthorizationType() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeKeyResponse) string { return v.AuthorizationType }).(pulumi.StringOutput)
}

// Type of the secret.
func (o LinkedIntegrationRuntimeKeyResponseOutput) Key() SecureStringResponseOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeKeyResponse) SecureStringResponse { return v.Key }).(SecureStringResponseOutput)
}

// The base definition of a secret type.
type LinkedIntegrationRuntimeRbac struct {
	// Type of the secret.
	AuthorizationType string `pulumi:"authorizationType"`
	// The resource ID of the integration runtime to be shared.
	ResourceId string `pulumi:"resourceId"`
}

// LinkedIntegrationRuntimeRbacInput is an input type that accepts LinkedIntegrationRuntimeRbacArgs and LinkedIntegrationRuntimeRbacOutput values.
// You can construct a concrete instance of `LinkedIntegrationRuntimeRbacInput` via:
//
//          LinkedIntegrationRuntimeRbacArgs{...}
type LinkedIntegrationRuntimeRbacInput interface {
	pulumi.Input

	ToLinkedIntegrationRuntimeRbacOutput() LinkedIntegrationRuntimeRbacOutput
	ToLinkedIntegrationRuntimeRbacOutputWithContext(context.Context) LinkedIntegrationRuntimeRbacOutput
}

// The base definition of a secret type.
type LinkedIntegrationRuntimeRbacArgs struct {
	// Type of the secret.
	AuthorizationType pulumi.StringInput `pulumi:"authorizationType"`
	// The resource ID of the integration runtime to be shared.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
}

func (LinkedIntegrationRuntimeRbacArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedIntegrationRuntimeRbac)(nil)).Elem()
}

func (i LinkedIntegrationRuntimeRbacArgs) ToLinkedIntegrationRuntimeRbacOutput() LinkedIntegrationRuntimeRbacOutput {
	return i.ToLinkedIntegrationRuntimeRbacOutputWithContext(context.Background())
}

func (i LinkedIntegrationRuntimeRbacArgs) ToLinkedIntegrationRuntimeRbacOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeRbacOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedIntegrationRuntimeRbacOutput)
}

// The base definition of a secret type.
type LinkedIntegrationRuntimeRbacResponse struct {
	// Type of the secret.
	AuthorizationType string `pulumi:"authorizationType"`
	// The resource ID of the integration runtime to be shared.
	ResourceId string `pulumi:"resourceId"`
}

// The base definition of a secret type.
type LinkedIntegrationRuntimeRbacResponseOutput struct{ *pulumi.OutputState }

func (LinkedIntegrationRuntimeRbacResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedIntegrationRuntimeRbacResponse)(nil)).Elem()
}

func (o LinkedIntegrationRuntimeRbacResponseOutput) ToLinkedIntegrationRuntimeRbacResponseOutput() LinkedIntegrationRuntimeRbacResponseOutput {
	return o
}

func (o LinkedIntegrationRuntimeRbacResponseOutput) ToLinkedIntegrationRuntimeRbacResponseOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeRbacResponseOutput {
	return o
}

// Type of the secret.
func (o LinkedIntegrationRuntimeRbacResponseOutput) AuthorizationType() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeRbacResponse) string { return v.AuthorizationType }).(pulumi.StringOutput)
}

// The resource ID of the integration runtime to be shared.
func (o LinkedIntegrationRuntimeRbacResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeRbacResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

// Linked service reference type.
type LinkedServiceReference struct {
	// Arguments for LinkedService.
	Parameters map[string]map[string]interface{} `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName string `pulumi:"referenceName"`
	// Linked service reference type.
	Type string `pulumi:"type"`
}

// LinkedServiceReferenceInput is an input type that accepts LinkedServiceReferenceArgs and LinkedServiceReferenceOutput values.
// You can construct a concrete instance of `LinkedServiceReferenceInput` via:
//
//          LinkedServiceReferenceArgs{...}
type LinkedServiceReferenceInput interface {
	pulumi.Input

	ToLinkedServiceReferenceOutput() LinkedServiceReferenceOutput
	ToLinkedServiceReferenceOutputWithContext(context.Context) LinkedServiceReferenceOutput
}

// Linked service reference type.
type LinkedServiceReferenceArgs struct {
	// Arguments for LinkedService.
	Parameters pulumi.MapMapInput `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Linked service reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LinkedServiceReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceReference)(nil)).Elem()
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferenceOutput() LinkedServiceReferenceOutput {
	return i.ToLinkedServiceReferenceOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferenceOutputWithContext(ctx context.Context) LinkedServiceReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceOutput)
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput {
	return i.ToLinkedServiceReferencePtrOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferencePtrOutputWithContext(ctx context.Context) LinkedServiceReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceOutput).ToLinkedServiceReferencePtrOutputWithContext(ctx)
}

// LinkedServiceReferencePtrInput is an input type that accepts LinkedServiceReferenceArgs, LinkedServiceReferencePtr and LinkedServiceReferencePtrOutput values.
// You can construct a concrete instance of `LinkedServiceReferencePtrInput` via:
//
//          LinkedServiceReferenceArgs{...}
//
//  or:
//
//          nil
type LinkedServiceReferencePtrInput interface {
	pulumi.Input

	ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput
	ToLinkedServiceReferencePtrOutputWithContext(context.Context) LinkedServiceReferencePtrOutput
}

type linkedServiceReferencePtrType LinkedServiceReferenceArgs

func LinkedServiceReferencePtr(v *LinkedServiceReferenceArgs) LinkedServiceReferencePtrInput {
	return (*linkedServiceReferencePtrType)(v)
}

func (*linkedServiceReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceReference)(nil)).Elem()
}

func (i *linkedServiceReferencePtrType) ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput {
	return i.ToLinkedServiceReferencePtrOutputWithContext(context.Background())
}

func (i *linkedServiceReferencePtrType) ToLinkedServiceReferencePtrOutputWithContext(ctx context.Context) LinkedServiceReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferencePtrOutput)
}

// LinkedServiceReferenceArrayInput is an input type that accepts LinkedServiceReferenceArray and LinkedServiceReferenceArrayOutput values.
// You can construct a concrete instance of `LinkedServiceReferenceArrayInput` via:
//
//          LinkedServiceReferenceArray{ LinkedServiceReferenceArgs{...} }
type LinkedServiceReferenceArrayInput interface {
	pulumi.Input

	ToLinkedServiceReferenceArrayOutput() LinkedServiceReferenceArrayOutput
	ToLinkedServiceReferenceArrayOutputWithContext(context.Context) LinkedServiceReferenceArrayOutput
}

type LinkedServiceReferenceArray []LinkedServiceReferenceInput

func (LinkedServiceReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedServiceReference)(nil)).Elem()
}

func (i LinkedServiceReferenceArray) ToLinkedServiceReferenceArrayOutput() LinkedServiceReferenceArrayOutput {
	return i.ToLinkedServiceReferenceArrayOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceArray) ToLinkedServiceReferenceArrayOutputWithContext(ctx context.Context) LinkedServiceReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceArrayOutput)
}

// Linked service reference type.
type LinkedServiceReferenceResponse struct {
	// Arguments for LinkedService.
	Parameters map[string]map[string]interface{} `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName string `pulumi:"referenceName"`
	// Linked service reference type.
	Type string `pulumi:"type"`
}

// Linked service reference type.
type LinkedServiceReferenceResponseOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceReferenceResponse)(nil)).Elem()
}

func (o LinkedServiceReferenceResponseOutput) ToLinkedServiceReferenceResponseOutput() LinkedServiceReferenceResponseOutput {
	return o
}

func (o LinkedServiceReferenceResponseOutput) ToLinkedServiceReferenceResponseOutputWithContext(ctx context.Context) LinkedServiceReferenceResponseOutput {
	return o
}

func (o LinkedServiceReferenceResponseOutput) ToLinkedServiceReferenceResponsePtrOutput() LinkedServiceReferenceResponsePtrOutput {
	return o.ToLinkedServiceReferenceResponsePtrOutputWithContext(context.Background())
}

func (o LinkedServiceReferenceResponseOutput) ToLinkedServiceReferenceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v LinkedServiceReferenceResponse) *LinkedServiceReferenceResponse {
		return &v
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Arguments for LinkedService.
func (o LinkedServiceReferenceResponseOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v LinkedServiceReferenceResponse) map[string]map[string]interface{} { return v.Parameters }).(pulumi.MapMapOutput)
}

// Reference LinkedService name.
func (o LinkedServiceReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Linked service reference type.
func (o LinkedServiceReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type LinkedServiceReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceReferenceResponse)(nil)).Elem()
}

func (o LinkedServiceReferenceResponsePtrOutput) ToLinkedServiceReferenceResponsePtrOutput() LinkedServiceReferenceResponsePtrOutput {
	return o
}

func (o LinkedServiceReferenceResponsePtrOutput) ToLinkedServiceReferenceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceReferenceResponsePtrOutput {
	return o
}

func (o LinkedServiceReferenceResponsePtrOutput) Elem() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) LinkedServiceReferenceResponse { return *v }).(LinkedServiceReferenceResponseOutput)
}

// Arguments for LinkedService.
func (o LinkedServiceReferenceResponsePtrOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) map[string]map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapMapOutput)
}

// Reference LinkedService name.
func (o LinkedServiceReferenceResponsePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Linked service reference type.
func (o LinkedServiceReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type LinkedServiceReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedServiceReferenceResponse)(nil)).Elem()
}

func (o LinkedServiceReferenceResponseArrayOutput) ToLinkedServiceReferenceResponseArrayOutput() LinkedServiceReferenceResponseArrayOutput {
	return o
}

func (o LinkedServiceReferenceResponseArrayOutput) ToLinkedServiceReferenceResponseArrayOutputWithContext(ctx context.Context) LinkedServiceReferenceResponseArrayOutput {
	return o
}

func (o LinkedServiceReferenceResponseArrayOutput) Index(i pulumi.IntInput) LinkedServiceReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LinkedServiceReferenceResponse {
		return vs[0].([]LinkedServiceReferenceResponse)[vs[1].(int)]
	}).(LinkedServiceReferenceResponseOutput)
}

// Magento server linked service.
type MagentoLinkedService struct {
	// The access token from Magento.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The URL of the Magento instance. (i.e. 192.168.222.110/magento3)
	Host map[string]interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
}

// MagentoLinkedServiceInput is an input type that accepts MagentoLinkedServiceArgs and MagentoLinkedServiceOutput values.
// You can construct a concrete instance of `MagentoLinkedServiceInput` via:
//
//          MagentoLinkedServiceArgs{...}
type MagentoLinkedServiceInput interface {
	pulumi.Input

	ToMagentoLinkedServiceOutput() MagentoLinkedServiceOutput
	ToMagentoLinkedServiceOutputWithContext(context.Context) MagentoLinkedServiceOutput
}

// Magento server linked service.
type MagentoLinkedServiceArgs struct {
	// The access token from Magento.
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The URL of the Magento instance. (i.e. 192.168.222.110/magento3)
	Host pulumi.MapInput `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.MapInput `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.MapInput `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.MapInput `pulumi:"usePeerVerification"`
}

func (MagentoLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MagentoLinkedService)(nil)).Elem()
}

func (i MagentoLinkedServiceArgs) ToMagentoLinkedServiceOutput() MagentoLinkedServiceOutput {
	return i.ToMagentoLinkedServiceOutputWithContext(context.Background())
}

func (i MagentoLinkedServiceArgs) ToMagentoLinkedServiceOutputWithContext(ctx context.Context) MagentoLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagentoLinkedServiceOutput)
}

// Magento server linked service.
type MagentoLinkedServiceResponse struct {
	// The access token from Magento.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The URL of the Magento instance. (i.e. 192.168.222.110/magento3)
	Host map[string]interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
}

// Magento server linked service.
type MagentoLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (MagentoLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MagentoLinkedServiceResponse)(nil)).Elem()
}

func (o MagentoLinkedServiceResponseOutput) ToMagentoLinkedServiceResponseOutput() MagentoLinkedServiceResponseOutput {
	return o
}

func (o MagentoLinkedServiceResponseOutput) ToMagentoLinkedServiceResponseOutputWithContext(ctx context.Context) MagentoLinkedServiceResponseOutput {
	return o
}

// The access token from Magento.
func (o MagentoLinkedServiceResponseOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the Dataset.
func (o MagentoLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o MagentoLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o MagentoLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o MagentoLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The URL of the Magento instance. (i.e. 192.168.222.110/magento3)
func (o MagentoLinkedServiceResponseOutput) Host() pulumi.MapOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) map[string]interface{} { return v.Host }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o MagentoLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o MagentoLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o MagentoLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.MapOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) map[string]interface{} { return v.UseEncryptedEndpoints }).(pulumi.MapOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o MagentoLinkedServiceResponseOutput) UseHostVerification() pulumi.MapOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) map[string]interface{} { return v.UseHostVerification }).(pulumi.MapOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o MagentoLinkedServiceResponseOutput) UsePeerVerification() pulumi.MapOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) map[string]interface{} { return v.UsePeerVerification }).(pulumi.MapOutput)
}

// Magento server dataset.
type MagentoObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// MagentoObjectDatasetInput is an input type that accepts MagentoObjectDatasetArgs and MagentoObjectDatasetOutput values.
// You can construct a concrete instance of `MagentoObjectDatasetInput` via:
//
//          MagentoObjectDatasetArgs{...}
type MagentoObjectDatasetInput interface {
	pulumi.Input

	ToMagentoObjectDatasetOutput() MagentoObjectDatasetOutput
	ToMagentoObjectDatasetOutputWithContext(context.Context) MagentoObjectDatasetOutput
}

// Magento server dataset.
type MagentoObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MagentoObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MagentoObjectDataset)(nil)).Elem()
}

func (i MagentoObjectDatasetArgs) ToMagentoObjectDatasetOutput() MagentoObjectDatasetOutput {
	return i.ToMagentoObjectDatasetOutputWithContext(context.Background())
}

func (i MagentoObjectDatasetArgs) ToMagentoObjectDatasetOutputWithContext(ctx context.Context) MagentoObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagentoObjectDatasetOutput)
}

// Magento server dataset.
type MagentoObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Magento server dataset.
type MagentoObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (MagentoObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MagentoObjectDatasetResponse)(nil)).Elem()
}

func (o MagentoObjectDatasetResponseOutput) ToMagentoObjectDatasetResponseOutput() MagentoObjectDatasetResponseOutput {
	return o
}

func (o MagentoObjectDatasetResponseOutput) ToMagentoObjectDatasetResponseOutputWithContext(ctx context.Context) MagentoObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MagentoObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o MagentoObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o MagentoObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o MagentoObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MagentoObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o MagentoObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Managed integration runtime, including managed elastic and managed dedicated integration runtimes.
type ManagedIntegrationRuntime struct {
	// The compute resource for managed integration runtime.
	ComputeProperties *IntegrationRuntimeComputeProperties `pulumi:"computeProperties"`
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// SSIS properties for managed integration runtime.
	SsisProperties *IntegrationRuntimeSsisProperties `pulumi:"ssisProperties"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// ManagedIntegrationRuntimeInput is an input type that accepts ManagedIntegrationRuntimeArgs and ManagedIntegrationRuntimeOutput values.
// You can construct a concrete instance of `ManagedIntegrationRuntimeInput` via:
//
//          ManagedIntegrationRuntimeArgs{...}
type ManagedIntegrationRuntimeInput interface {
	pulumi.Input

	ToManagedIntegrationRuntimeOutput() ManagedIntegrationRuntimeOutput
	ToManagedIntegrationRuntimeOutputWithContext(context.Context) ManagedIntegrationRuntimeOutput
}

// Managed integration runtime, including managed elastic and managed dedicated integration runtimes.
type ManagedIntegrationRuntimeArgs struct {
	// The compute resource for managed integration runtime.
	ComputeProperties IntegrationRuntimeComputePropertiesPtrInput `pulumi:"computeProperties"`
	// Integration runtime description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// SSIS properties for managed integration runtime.
	SsisProperties IntegrationRuntimeSsisPropertiesPtrInput `pulumi:"ssisProperties"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ManagedIntegrationRuntimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIntegrationRuntime)(nil)).Elem()
}

func (i ManagedIntegrationRuntimeArgs) ToManagedIntegrationRuntimeOutput() ManagedIntegrationRuntimeOutput {
	return i.ToManagedIntegrationRuntimeOutputWithContext(context.Background())
}

func (i ManagedIntegrationRuntimeArgs) ToManagedIntegrationRuntimeOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIntegrationRuntimeOutput)
}

// Managed integration runtime, including managed elastic and managed dedicated integration runtimes.
type ManagedIntegrationRuntimeResponse struct {
	// The compute resource for managed integration runtime.
	ComputeProperties *IntegrationRuntimeComputePropertiesResponse `pulumi:"computeProperties"`
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// SSIS properties for managed integration runtime.
	SsisProperties *IntegrationRuntimeSsisPropertiesResponse `pulumi:"ssisProperties"`
	// Integration runtime state, only valid for managed dedicated integration runtime.
	State string `pulumi:"state"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// Managed integration runtime, including managed elastic and managed dedicated integration runtimes.
type ManagedIntegrationRuntimeResponseOutput struct{ *pulumi.OutputState }

func (ManagedIntegrationRuntimeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIntegrationRuntimeResponse)(nil)).Elem()
}

func (o ManagedIntegrationRuntimeResponseOutput) ToManagedIntegrationRuntimeResponseOutput() ManagedIntegrationRuntimeResponseOutput {
	return o
}

func (o ManagedIntegrationRuntimeResponseOutput) ToManagedIntegrationRuntimeResponseOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeResponseOutput {
	return o
}

// The compute resource for managed integration runtime.
func (o ManagedIntegrationRuntimeResponseOutput) ComputeProperties() IntegrationRuntimeComputePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeResponse) *IntegrationRuntimeComputePropertiesResponse {
		return v.ComputeProperties
	}).(IntegrationRuntimeComputePropertiesResponsePtrOutput)
}

// Integration runtime description.
func (o ManagedIntegrationRuntimeResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// SSIS properties for managed integration runtime.
func (o ManagedIntegrationRuntimeResponseOutput) SsisProperties() IntegrationRuntimeSsisPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeResponse) *IntegrationRuntimeSsisPropertiesResponse {
		return v.SsisProperties
	}).(IntegrationRuntimeSsisPropertiesResponsePtrOutput)
}

// Integration runtime state, only valid for managed dedicated integration runtime.
func (o ManagedIntegrationRuntimeResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeResponse) string { return v.State }).(pulumi.StringOutput)
}

// Type of integration runtime.
func (o ManagedIntegrationRuntimeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// MariaDB server linked service.
type MariaDBLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// MariaDBLinkedServiceInput is an input type that accepts MariaDBLinkedServiceArgs and MariaDBLinkedServiceOutput values.
// You can construct a concrete instance of `MariaDBLinkedServiceInput` via:
//
//          MariaDBLinkedServiceArgs{...}
type MariaDBLinkedServiceInput interface {
	pulumi.Input

	ToMariaDBLinkedServiceOutput() MariaDBLinkedServiceOutput
	ToMariaDBLinkedServiceOutputWithContext(context.Context) MariaDBLinkedServiceOutput
}

// MariaDB server linked service.
type MariaDBLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.MapInput `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MariaDBLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MariaDBLinkedService)(nil)).Elem()
}

func (i MariaDBLinkedServiceArgs) ToMariaDBLinkedServiceOutput() MariaDBLinkedServiceOutput {
	return i.ToMariaDBLinkedServiceOutputWithContext(context.Background())
}

func (i MariaDBLinkedServiceArgs) ToMariaDBLinkedServiceOutputWithContext(ctx context.Context) MariaDBLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariaDBLinkedServiceOutput)
}

// MariaDB server linked service.
type MariaDBLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// MariaDB server linked service.
type MariaDBLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (MariaDBLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MariaDBLinkedServiceResponse)(nil)).Elem()
}

func (o MariaDBLinkedServiceResponseOutput) ToMariaDBLinkedServiceResponseOutput() MariaDBLinkedServiceResponseOutput {
	return o
}

func (o MariaDBLinkedServiceResponseOutput) ToMariaDBLinkedServiceResponseOutputWithContext(ctx context.Context) MariaDBLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MariaDBLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o MariaDBLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o MariaDBLinkedServiceResponseOutput) ConnectionString() pulumi.MapOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) map[string]interface{} { return v.ConnectionString }).(pulumi.MapOutput)
}

// Linked service description.
func (o MariaDBLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o MariaDBLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o MariaDBLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o MariaDBLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// MariaDB server dataset.
type MariaDBTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// MariaDBTableDatasetInput is an input type that accepts MariaDBTableDatasetArgs and MariaDBTableDatasetOutput values.
// You can construct a concrete instance of `MariaDBTableDatasetInput` via:
//
//          MariaDBTableDatasetArgs{...}
type MariaDBTableDatasetInput interface {
	pulumi.Input

	ToMariaDBTableDatasetOutput() MariaDBTableDatasetOutput
	ToMariaDBTableDatasetOutputWithContext(context.Context) MariaDBTableDatasetOutput
}

// MariaDB server dataset.
type MariaDBTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MariaDBTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MariaDBTableDataset)(nil)).Elem()
}

func (i MariaDBTableDatasetArgs) ToMariaDBTableDatasetOutput() MariaDBTableDatasetOutput {
	return i.ToMariaDBTableDatasetOutputWithContext(context.Background())
}

func (i MariaDBTableDatasetArgs) ToMariaDBTableDatasetOutputWithContext(ctx context.Context) MariaDBTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariaDBTableDatasetOutput)
}

// MariaDB server dataset.
type MariaDBTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// MariaDB server dataset.
type MariaDBTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (MariaDBTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MariaDBTableDatasetResponse)(nil)).Elem()
}

func (o MariaDBTableDatasetResponseOutput) ToMariaDBTableDatasetResponseOutput() MariaDBTableDatasetResponseOutput {
	return o
}

func (o MariaDBTableDatasetResponseOutput) ToMariaDBTableDatasetResponseOutputWithContext(ctx context.Context) MariaDBTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MariaDBTableDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o MariaDBTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o MariaDBTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o MariaDBTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MariaDBTableDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o MariaDBTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Marketo server linked service.
type MarketoLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The client Id of your Marketo service.
	ClientId map[string]interface{} `pulumi:"clientId"`
	// The client secret of your Marketo service.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com)
	Endpoint map[string]interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
}

// MarketoLinkedServiceInput is an input type that accepts MarketoLinkedServiceArgs and MarketoLinkedServiceOutput values.
// You can construct a concrete instance of `MarketoLinkedServiceInput` via:
//
//          MarketoLinkedServiceArgs{...}
type MarketoLinkedServiceInput interface {
	pulumi.Input

	ToMarketoLinkedServiceOutput() MarketoLinkedServiceOutput
	ToMarketoLinkedServiceOutputWithContext(context.Context) MarketoLinkedServiceOutput
}

// Marketo server linked service.
type MarketoLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The client Id of your Marketo service.
	ClientId pulumi.MapInput `pulumi:"clientId"`
	// The client secret of your Marketo service.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com)
	Endpoint pulumi.MapInput `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.MapInput `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.MapInput `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.MapInput `pulumi:"usePeerVerification"`
}

func (MarketoLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketoLinkedService)(nil)).Elem()
}

func (i MarketoLinkedServiceArgs) ToMarketoLinkedServiceOutput() MarketoLinkedServiceOutput {
	return i.ToMarketoLinkedServiceOutputWithContext(context.Background())
}

func (i MarketoLinkedServiceArgs) ToMarketoLinkedServiceOutputWithContext(ctx context.Context) MarketoLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarketoLinkedServiceOutput)
}

// Marketo server linked service.
type MarketoLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The client Id of your Marketo service.
	ClientId map[string]interface{} `pulumi:"clientId"`
	// The client secret of your Marketo service.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com)
	Endpoint map[string]interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
}

// Marketo server linked service.
type MarketoLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (MarketoLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketoLinkedServiceResponse)(nil)).Elem()
}

func (o MarketoLinkedServiceResponseOutput) ToMarketoLinkedServiceResponseOutput() MarketoLinkedServiceResponseOutput {
	return o
}

func (o MarketoLinkedServiceResponseOutput) ToMarketoLinkedServiceResponseOutputWithContext(ctx context.Context) MarketoLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MarketoLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The client Id of your Marketo service.
func (o MarketoLinkedServiceResponseOutput) ClientId() pulumi.MapOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) map[string]interface{} { return v.ClientId }).(pulumi.MapOutput)
}

// The client secret of your Marketo service.
func (o MarketoLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o MarketoLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o MarketoLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o MarketoLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com)
func (o MarketoLinkedServiceResponseOutput) Endpoint() pulumi.MapOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) map[string]interface{} { return v.Endpoint }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o MarketoLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o MarketoLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o MarketoLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.MapOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) map[string]interface{} { return v.UseEncryptedEndpoints }).(pulumi.MapOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o MarketoLinkedServiceResponseOutput) UseHostVerification() pulumi.MapOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) map[string]interface{} { return v.UseHostVerification }).(pulumi.MapOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o MarketoLinkedServiceResponseOutput) UsePeerVerification() pulumi.MapOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) map[string]interface{} { return v.UsePeerVerification }).(pulumi.MapOutput)
}

// Marketo server dataset.
type MarketoObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// MarketoObjectDatasetInput is an input type that accepts MarketoObjectDatasetArgs and MarketoObjectDatasetOutput values.
// You can construct a concrete instance of `MarketoObjectDatasetInput` via:
//
//          MarketoObjectDatasetArgs{...}
type MarketoObjectDatasetInput interface {
	pulumi.Input

	ToMarketoObjectDatasetOutput() MarketoObjectDatasetOutput
	ToMarketoObjectDatasetOutputWithContext(context.Context) MarketoObjectDatasetOutput
}

// Marketo server dataset.
type MarketoObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MarketoObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketoObjectDataset)(nil)).Elem()
}

func (i MarketoObjectDatasetArgs) ToMarketoObjectDatasetOutput() MarketoObjectDatasetOutput {
	return i.ToMarketoObjectDatasetOutputWithContext(context.Background())
}

func (i MarketoObjectDatasetArgs) ToMarketoObjectDatasetOutputWithContext(ctx context.Context) MarketoObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarketoObjectDatasetOutput)
}

// Marketo server dataset.
type MarketoObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Marketo server dataset.
type MarketoObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (MarketoObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketoObjectDatasetResponse)(nil)).Elem()
}

func (o MarketoObjectDatasetResponseOutput) ToMarketoObjectDatasetResponseOutput() MarketoObjectDatasetResponseOutput {
	return o
}

func (o MarketoObjectDatasetResponseOutput) ToMarketoObjectDatasetResponseOutputWithContext(ctx context.Context) MarketoObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MarketoObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o MarketoObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o MarketoObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o MarketoObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MarketoObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o MarketoObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The MongoDB database dataset.
type MongoDbCollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The table name of the MongoDB database. Type: string (or Expression with resultType string).
	CollectionName map[string]interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// MongoDbCollectionDatasetInput is an input type that accepts MongoDbCollectionDatasetArgs and MongoDbCollectionDatasetOutput values.
// You can construct a concrete instance of `MongoDbCollectionDatasetInput` via:
//
//          MongoDbCollectionDatasetArgs{...}
type MongoDbCollectionDatasetInput interface {
	pulumi.Input

	ToMongoDbCollectionDatasetOutput() MongoDbCollectionDatasetOutput
	ToMongoDbCollectionDatasetOutputWithContext(context.Context) MongoDbCollectionDatasetOutput
}

// The MongoDB database dataset.
type MongoDbCollectionDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The table name of the MongoDB database. Type: string (or Expression with resultType string).
	CollectionName pulumi.MapInput `pulumi:"collectionName"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MongoDbCollectionDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionDataset)(nil)).Elem()
}

func (i MongoDbCollectionDatasetArgs) ToMongoDbCollectionDatasetOutput() MongoDbCollectionDatasetOutput {
	return i.ToMongoDbCollectionDatasetOutputWithContext(context.Background())
}

func (i MongoDbCollectionDatasetArgs) ToMongoDbCollectionDatasetOutputWithContext(ctx context.Context) MongoDbCollectionDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbCollectionDatasetOutput)
}

// The MongoDB database dataset.
type MongoDbCollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The table name of the MongoDB database. Type: string (or Expression with resultType string).
	CollectionName map[string]interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// The MongoDB database dataset.
type MongoDbCollectionDatasetResponseOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionDatasetResponse)(nil)).Elem()
}

func (o MongoDbCollectionDatasetResponseOutput) ToMongoDbCollectionDatasetResponseOutput() MongoDbCollectionDatasetResponseOutput {
	return o
}

func (o MongoDbCollectionDatasetResponseOutput) ToMongoDbCollectionDatasetResponseOutputWithContext(ctx context.Context) MongoDbCollectionDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MongoDbCollectionDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The table name of the MongoDB database. Type: string (or Expression with resultType string).
func (o MongoDbCollectionDatasetResponseOutput) CollectionName() pulumi.MapOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) map[string]interface{} { return v.CollectionName }).(pulumi.MapOutput)
}

// Dataset description.
func (o MongoDbCollectionDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o MongoDbCollectionDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o MongoDbCollectionDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MongoDbCollectionDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o MongoDbCollectionDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for MongoDb data source.
type MongoDbLinkedService struct {
	// Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression with resultType boolean).
	AllowSelfSignedServerCert map[string]interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Database to verify the username and password. Type: string (or Expression with resultType string).
	AuthSource map[string]interface{} `pulumi:"authSource"`
	// The authentication type to be used to connect to the MongoDB database.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	DatabaseName map[string]interface{} `pulumi:"databaseName"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Expression with resultType boolean).
	EnableSsl map[string]interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0.
	Port map[string]interface{} `pulumi:"port"`
	// The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string).
	Server map[string]interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username map[string]interface{} `pulumi:"username"`
}

// MongoDbLinkedServiceInput is an input type that accepts MongoDbLinkedServiceArgs and MongoDbLinkedServiceOutput values.
// You can construct a concrete instance of `MongoDbLinkedServiceInput` via:
//
//          MongoDbLinkedServiceArgs{...}
type MongoDbLinkedServiceInput interface {
	pulumi.Input

	ToMongoDbLinkedServiceOutput() MongoDbLinkedServiceOutput
	ToMongoDbLinkedServiceOutputWithContext(context.Context) MongoDbLinkedServiceOutput
}

// Linked service for MongoDb data source.
type MongoDbLinkedServiceArgs struct {
	// Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression with resultType boolean).
	AllowSelfSignedServerCert pulumi.MapInput `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Database to verify the username and password. Type: string (or Expression with resultType string).
	AuthSource pulumi.MapInput `pulumi:"authSource"`
	// The authentication type to be used to connect to the MongoDB database.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	DatabaseName pulumi.MapInput `pulumi:"databaseName"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Expression with resultType boolean).
	EnableSsl pulumi.MapInput `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for authentication.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0.
	Port pulumi.MapInput `pulumi:"port"`
	// The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string).
	Server pulumi.MapInput `pulumi:"server"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username pulumi.MapInput `pulumi:"username"`
}

func (MongoDbLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbLinkedService)(nil)).Elem()
}

func (i MongoDbLinkedServiceArgs) ToMongoDbLinkedServiceOutput() MongoDbLinkedServiceOutput {
	return i.ToMongoDbLinkedServiceOutputWithContext(context.Background())
}

func (i MongoDbLinkedServiceArgs) ToMongoDbLinkedServiceOutputWithContext(ctx context.Context) MongoDbLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbLinkedServiceOutput)
}

// Linked service for MongoDb data source.
type MongoDbLinkedServiceResponse struct {
	// Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression with resultType boolean).
	AllowSelfSignedServerCert map[string]interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Database to verify the username and password. Type: string (or Expression with resultType string).
	AuthSource map[string]interface{} `pulumi:"authSource"`
	// The authentication type to be used to connect to the MongoDB database.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	DatabaseName map[string]interface{} `pulumi:"databaseName"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Expression with resultType boolean).
	EnableSsl map[string]interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0.
	Port map[string]interface{} `pulumi:"port"`
	// The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string).
	Server map[string]interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username map[string]interface{} `pulumi:"username"`
}

// Linked service for MongoDb data source.
type MongoDbLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (MongoDbLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbLinkedServiceResponse)(nil)).Elem()
}

func (o MongoDbLinkedServiceResponseOutput) ToMongoDbLinkedServiceResponseOutput() MongoDbLinkedServiceResponseOutput {
	return o
}

func (o MongoDbLinkedServiceResponseOutput) ToMongoDbLinkedServiceResponseOutputWithContext(ctx context.Context) MongoDbLinkedServiceResponseOutput {
	return o
}

// Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o MongoDbLinkedServiceResponseOutput) AllowSelfSignedServerCert() pulumi.MapOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) map[string]interface{} { return v.AllowSelfSignedServerCert }).(pulumi.MapOutput)
}

// List of tags that can be used for describing the Dataset.
func (o MongoDbLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Database to verify the username and password. Type: string (or Expression with resultType string).
func (o MongoDbLinkedServiceResponseOutput) AuthSource() pulumi.MapOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) map[string]interface{} { return v.AuthSource }).(pulumi.MapOutput)
}

// The authentication type to be used to connect to the MongoDB database.
func (o MongoDbLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o MongoDbLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
func (o MongoDbLinkedServiceResponseOutput) DatabaseName() pulumi.MapOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) map[string]interface{} { return v.DatabaseName }).(pulumi.MapOutput)
}

// Linked service description.
func (o MongoDbLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o MongoDbLinkedServiceResponseOutput) EnableSsl() pulumi.MapOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) map[string]interface{} { return v.EnableSsl }).(pulumi.MapOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o MongoDbLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o MongoDbLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for authentication.
func (o MongoDbLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0.
func (o MongoDbLinkedServiceResponseOutput) Port() pulumi.MapOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) map[string]interface{} { return v.Port }).(pulumi.MapOutput)
}

// The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string).
func (o MongoDbLinkedServiceResponseOutput) Server() pulumi.MapOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) map[string]interface{} { return v.Server }).(pulumi.MapOutput)
}

// Type of linked service.
func (o MongoDbLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. Type: string (or Expression with resultType string).
func (o MongoDbLinkedServiceResponseOutput) Username() pulumi.MapOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) map[string]interface{} { return v.Username }).(pulumi.MapOutput)
}

// Base class for all triggers that support one to many model for trigger to pipeline.
type MultiplePipelineTrigger struct {
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReference `pulumi:"pipelines"`
	// Trigger type.
	Type string `pulumi:"type"`
}

// MultiplePipelineTriggerInput is an input type that accepts MultiplePipelineTriggerArgs and MultiplePipelineTriggerOutput values.
// You can construct a concrete instance of `MultiplePipelineTriggerInput` via:
//
//          MultiplePipelineTriggerArgs{...}
type MultiplePipelineTriggerInput interface {
	pulumi.Input

	ToMultiplePipelineTriggerOutput() MultiplePipelineTriggerOutput
	ToMultiplePipelineTriggerOutputWithContext(context.Context) MultiplePipelineTriggerOutput
}

// Base class for all triggers that support one to many model for trigger to pipeline.
type MultiplePipelineTriggerArgs struct {
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines TriggerPipelineReferenceArrayInput `pulumi:"pipelines"`
	// Trigger type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MultiplePipelineTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiplePipelineTrigger)(nil)).Elem()
}

func (i MultiplePipelineTriggerArgs) ToMultiplePipelineTriggerOutput() MultiplePipelineTriggerOutput {
	return i.ToMultiplePipelineTriggerOutputWithContext(context.Background())
}

func (i MultiplePipelineTriggerArgs) ToMultiplePipelineTriggerOutputWithContext(ctx context.Context) MultiplePipelineTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiplePipelineTriggerOutput)
}

// Base class for all triggers that support one to many model for trigger to pipeline.
type MultiplePipelineTriggerResponse struct {
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReferenceResponse `pulumi:"pipelines"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// Trigger type.
	Type string `pulumi:"type"`
}

// Base class for all triggers that support one to many model for trigger to pipeline.
type MultiplePipelineTriggerResponseOutput struct{ *pulumi.OutputState }

func (MultiplePipelineTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiplePipelineTriggerResponse)(nil)).Elem()
}

func (o MultiplePipelineTriggerResponseOutput) ToMultiplePipelineTriggerResponseOutput() MultiplePipelineTriggerResponseOutput {
	return o
}

func (o MultiplePipelineTriggerResponseOutput) ToMultiplePipelineTriggerResponseOutputWithContext(ctx context.Context) MultiplePipelineTriggerResponseOutput {
	return o
}

// Trigger description.
func (o MultiplePipelineTriggerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MultiplePipelineTriggerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Pipelines that need to be started.
func (o MultiplePipelineTriggerResponseOutput) Pipelines() TriggerPipelineReferenceResponseArrayOutput {
	return o.ApplyT(func(v MultiplePipelineTriggerResponse) []TriggerPipelineReferenceResponse { return v.Pipelines }).(TriggerPipelineReferenceResponseArrayOutput)
}

// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
func (o MultiplePipelineTriggerResponseOutput) RuntimeState() pulumi.StringOutput {
	return o.ApplyT(func(v MultiplePipelineTriggerResponse) string { return v.RuntimeState }).(pulumi.StringOutput)
}

// Trigger type.
func (o MultiplePipelineTriggerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MultiplePipelineTriggerResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for MySQL data source.
type MySqlLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// MySqlLinkedServiceInput is an input type that accepts MySqlLinkedServiceArgs and MySqlLinkedServiceOutput values.
// You can construct a concrete instance of `MySqlLinkedServiceInput` via:
//
//          MySqlLinkedServiceArgs{...}
type MySqlLinkedServiceInput interface {
	pulumi.Input

	ToMySqlLinkedServiceOutput() MySqlLinkedServiceOutput
	ToMySqlLinkedServiceOutputWithContext(context.Context) MySqlLinkedServiceOutput
}

// Linked service for MySQL data source.
type MySqlLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MySqlLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlLinkedService)(nil)).Elem()
}

func (i MySqlLinkedServiceArgs) ToMySqlLinkedServiceOutput() MySqlLinkedServiceOutput {
	return i.ToMySqlLinkedServiceOutputWithContext(context.Background())
}

func (i MySqlLinkedServiceArgs) ToMySqlLinkedServiceOutputWithContext(ctx context.Context) MySqlLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlLinkedServiceOutput)
}

// Linked service for MySQL data source.
type MySqlLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// Linked service for MySQL data source.
type MySqlLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (MySqlLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlLinkedServiceResponse)(nil)).Elem()
}

func (o MySqlLinkedServiceResponseOutput) ToMySqlLinkedServiceResponseOutput() MySqlLinkedServiceResponseOutput {
	return o
}

func (o MySqlLinkedServiceResponseOutput) ToMySqlLinkedServiceResponseOutputWithContext(ctx context.Context) MySqlLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MySqlLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o MySqlLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string.
func (o MySqlLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MySqlLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o MySqlLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o MySqlLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o MySqlLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Netezza linked service.
type NetezzaLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// NetezzaLinkedServiceInput is an input type that accepts NetezzaLinkedServiceArgs and NetezzaLinkedServiceOutput values.
// You can construct a concrete instance of `NetezzaLinkedServiceInput` via:
//
//          NetezzaLinkedServiceArgs{...}
type NetezzaLinkedServiceInput interface {
	pulumi.Input

	ToNetezzaLinkedServiceOutput() NetezzaLinkedServiceOutput
	ToNetezzaLinkedServiceOutputWithContext(context.Context) NetezzaLinkedServiceOutput
}

// Netezza linked service.
type NetezzaLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.MapInput `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NetezzaLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaLinkedService)(nil)).Elem()
}

func (i NetezzaLinkedServiceArgs) ToNetezzaLinkedServiceOutput() NetezzaLinkedServiceOutput {
	return i.ToNetezzaLinkedServiceOutputWithContext(context.Background())
}

func (i NetezzaLinkedServiceArgs) ToNetezzaLinkedServiceOutputWithContext(ctx context.Context) NetezzaLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetezzaLinkedServiceOutput)
}

// Netezza linked service.
type NetezzaLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// Netezza linked service.
type NetezzaLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (NetezzaLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaLinkedServiceResponse)(nil)).Elem()
}

func (o NetezzaLinkedServiceResponseOutput) ToNetezzaLinkedServiceResponseOutput() NetezzaLinkedServiceResponseOutput {
	return o
}

func (o NetezzaLinkedServiceResponseOutput) ToNetezzaLinkedServiceResponseOutputWithContext(ctx context.Context) NetezzaLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o NetezzaLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v NetezzaLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o NetezzaLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v NetezzaLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o NetezzaLinkedServiceResponseOutput) ConnectionString() pulumi.MapOutput {
	return o.ApplyT(func(v NetezzaLinkedServiceResponse) map[string]interface{} { return v.ConnectionString }).(pulumi.MapOutput)
}

// Linked service description.
func (o NetezzaLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetezzaLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o NetezzaLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v NetezzaLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o NetezzaLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v NetezzaLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o NetezzaLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NetezzaLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Netezza dataset.
type NetezzaTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// NetezzaTableDatasetInput is an input type that accepts NetezzaTableDatasetArgs and NetezzaTableDatasetOutput values.
// You can construct a concrete instance of `NetezzaTableDatasetInput` via:
//
//          NetezzaTableDatasetArgs{...}
type NetezzaTableDatasetInput interface {
	pulumi.Input

	ToNetezzaTableDatasetOutput() NetezzaTableDatasetOutput
	ToNetezzaTableDatasetOutputWithContext(context.Context) NetezzaTableDatasetOutput
}

// Netezza dataset.
type NetezzaTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NetezzaTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaTableDataset)(nil)).Elem()
}

func (i NetezzaTableDatasetArgs) ToNetezzaTableDatasetOutput() NetezzaTableDatasetOutput {
	return i.ToNetezzaTableDatasetOutputWithContext(context.Background())
}

func (i NetezzaTableDatasetArgs) ToNetezzaTableDatasetOutputWithContext(ctx context.Context) NetezzaTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetezzaTableDatasetOutput)
}

// Netezza dataset.
type NetezzaTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Netezza dataset.
type NetezzaTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (NetezzaTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaTableDatasetResponse)(nil)).Elem()
}

func (o NetezzaTableDatasetResponseOutput) ToNetezzaTableDatasetResponseOutput() NetezzaTableDatasetResponseOutput {
	return o
}

func (o NetezzaTableDatasetResponseOutput) ToNetezzaTableDatasetResponseOutputWithContext(ctx context.Context) NetezzaTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o NetezzaTableDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o NetezzaTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o NetezzaTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o NetezzaTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o NetezzaTableDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o NetezzaTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Open Data Protocol (OData) linked service.
type ODataLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the OData service.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password of the OData service.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The URL of the OData service endpoint. Type: string (or Expression with resultType string).
	Url map[string]interface{} `pulumi:"url"`
	// User name of the OData service. Type: string (or Expression with resultType string).
	UserName map[string]interface{} `pulumi:"userName"`
}

// ODataLinkedServiceInput is an input type that accepts ODataLinkedServiceArgs and ODataLinkedServiceOutput values.
// You can construct a concrete instance of `ODataLinkedServiceInput` via:
//
//          ODataLinkedServiceArgs{...}
type ODataLinkedServiceInput interface {
	pulumi.Input

	ToODataLinkedServiceOutput() ODataLinkedServiceOutput
	ToODataLinkedServiceOutputWithContext(context.Context) ODataLinkedServiceOutput
}

// Open Data Protocol (OData) linked service.
type ODataLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Type of authentication used to connect to the OData service.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password of the OData service.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The URL of the OData service endpoint. Type: string (or Expression with resultType string).
	Url pulumi.MapInput `pulumi:"url"`
	// User name of the OData service. Type: string (or Expression with resultType string).
	UserName pulumi.MapInput `pulumi:"userName"`
}

func (ODataLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataLinkedService)(nil)).Elem()
}

func (i ODataLinkedServiceArgs) ToODataLinkedServiceOutput() ODataLinkedServiceOutput {
	return i.ToODataLinkedServiceOutputWithContext(context.Background())
}

func (i ODataLinkedServiceArgs) ToODataLinkedServiceOutputWithContext(ctx context.Context) ODataLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ODataLinkedServiceOutput)
}

// Open Data Protocol (OData) linked service.
type ODataLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the OData service.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password of the OData service.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The URL of the OData service endpoint. Type: string (or Expression with resultType string).
	Url map[string]interface{} `pulumi:"url"`
	// User name of the OData service. Type: string (or Expression with resultType string).
	UserName map[string]interface{} `pulumi:"userName"`
}

// Open Data Protocol (OData) linked service.
type ODataLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (ODataLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataLinkedServiceResponse)(nil)).Elem()
}

func (o ODataLinkedServiceResponseOutput) ToODataLinkedServiceResponseOutput() ODataLinkedServiceResponseOutput {
	return o
}

func (o ODataLinkedServiceResponseOutput) ToODataLinkedServiceResponseOutputWithContext(ctx context.Context) ODataLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ODataLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Type of authentication used to connect to the OData service.
func (o ODataLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o ODataLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o ODataLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o ODataLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password of the OData service.
func (o ODataLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o ODataLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of the OData service endpoint. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceResponseOutput) Url() pulumi.MapOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) map[string]interface{} { return v.Url }).(pulumi.MapOutput)
}

// User name of the OData service. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceResponseOutput) UserName() pulumi.MapOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) map[string]interface{} { return v.UserName }).(pulumi.MapOutput)
}

// The Open Data Protocol (OData) resource dataset.
type ODataResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The OData resource path. Type: string (or Expression with resultType string).
	Path map[string]interface{} `pulumi:"path"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ODataResourceDatasetInput is an input type that accepts ODataResourceDatasetArgs and ODataResourceDatasetOutput values.
// You can construct a concrete instance of `ODataResourceDatasetInput` via:
//
//          ODataResourceDatasetArgs{...}
type ODataResourceDatasetInput interface {
	pulumi.Input

	ToODataResourceDatasetOutput() ODataResourceDatasetOutput
	ToODataResourceDatasetOutputWithContext(context.Context) ODataResourceDatasetOutput
}

// The Open Data Protocol (OData) resource dataset.
type ODataResourceDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The OData resource path. Type: string (or Expression with resultType string).
	Path pulumi.MapInput `pulumi:"path"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ODataResourceDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataResourceDataset)(nil)).Elem()
}

func (i ODataResourceDatasetArgs) ToODataResourceDatasetOutput() ODataResourceDatasetOutput {
	return i.ToODataResourceDatasetOutputWithContext(context.Background())
}

func (i ODataResourceDatasetArgs) ToODataResourceDatasetOutputWithContext(ctx context.Context) ODataResourceDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ODataResourceDatasetOutput)
}

// The Open Data Protocol (OData) resource dataset.
type ODataResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The OData resource path. Type: string (or Expression with resultType string).
	Path map[string]interface{} `pulumi:"path"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// The Open Data Protocol (OData) resource dataset.
type ODataResourceDatasetResponseOutput struct{ *pulumi.OutputState }

func (ODataResourceDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataResourceDatasetResponse)(nil)).Elem()
}

func (o ODataResourceDatasetResponseOutput) ToODataResourceDatasetResponseOutput() ODataResourceDatasetResponseOutput {
	return o
}

func (o ODataResourceDatasetResponseOutput) ToODataResourceDatasetResponseOutputWithContext(ctx context.Context) ODataResourceDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ODataResourceDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o ODataResourceDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o ODataResourceDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o ODataResourceDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The OData resource path. Type: string (or Expression with resultType string).
func (o ODataResourceDatasetResponseOutput) Path() pulumi.MapOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) map[string]interface{} { return v.Path }).(pulumi.MapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ODataResourceDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o ODataResourceDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Open Database Connectivity (ODBC) linked service.
type OdbcLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType map[string]interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName map[string]interface{} `pulumi:"userName"`
}

// OdbcLinkedServiceInput is an input type that accepts OdbcLinkedServiceArgs and OdbcLinkedServiceOutput values.
// You can construct a concrete instance of `OdbcLinkedServiceInput` via:
//
//          OdbcLinkedServiceArgs{...}
type OdbcLinkedServiceInput interface {
	pulumi.Input

	ToOdbcLinkedServiceOutput() OdbcLinkedServiceOutput
	ToOdbcLinkedServiceOutputWithContext(context.Context) OdbcLinkedServiceOutput
}

// Open Database Connectivity (ODBC) linked service.
type OdbcLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.MapInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.MapInput `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential pulumi.Input `pulumi:"credential"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName pulumi.MapInput `pulumi:"userName"`
}

func (OdbcLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OdbcLinkedService)(nil)).Elem()
}

func (i OdbcLinkedServiceArgs) ToOdbcLinkedServiceOutput() OdbcLinkedServiceOutput {
	return i.ToOdbcLinkedServiceOutputWithContext(context.Background())
}

func (i OdbcLinkedServiceArgs) ToOdbcLinkedServiceOutputWithContext(ctx context.Context) OdbcLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OdbcLinkedServiceOutput)
}

// Open Database Connectivity (ODBC) linked service.
type OdbcLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType map[string]interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName map[string]interface{} `pulumi:"userName"`
}

// Open Database Connectivity (ODBC) linked service.
type OdbcLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (OdbcLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OdbcLinkedServiceResponse)(nil)).Elem()
}

func (o OdbcLinkedServiceResponseOutput) ToOdbcLinkedServiceResponseOutput() OdbcLinkedServiceResponseOutput {
	return o
}

func (o OdbcLinkedServiceResponseOutput) ToOdbcLinkedServiceResponseOutputWithContext(ctx context.Context) OdbcLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o OdbcLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
func (o OdbcLinkedServiceResponseOutput) AuthenticationType() pulumi.MapOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) map[string]interface{} { return v.AuthenticationType }).(pulumi.MapOutput)
}

// The integration runtime reference.
func (o OdbcLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o OdbcLinkedServiceResponseOutput) ConnectionString() pulumi.MapOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) map[string]interface{} { return v.ConnectionString }).(pulumi.MapOutput)
}

// The access credential portion of the connection string specified in driver-specific property-value format.
func (o OdbcLinkedServiceResponseOutput) Credential() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) interface{} { return v.Credential }).(pulumi.AnyOutput)
}

// Linked service description.
func (o OdbcLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o OdbcLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o OdbcLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for Basic authentication.
func (o OdbcLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o OdbcLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name for Basic authentication. Type: string (or Expression with resultType string).
func (o OdbcLinkedServiceResponseOutput) UserName() pulumi.MapOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) map[string]interface{} { return v.UserName }).(pulumi.MapOutput)
}

// Oracle database.
type OracleLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// OracleLinkedServiceInput is an input type that accepts OracleLinkedServiceArgs and OracleLinkedServiceOutput values.
// You can construct a concrete instance of `OracleLinkedServiceInput` via:
//
//          OracleLinkedServiceArgs{...}
type OracleLinkedServiceInput interface {
	pulumi.Input

	ToOracleLinkedServiceOutput() OracleLinkedServiceOutput
	ToOracleLinkedServiceOutputWithContext(context.Context) OracleLinkedServiceOutput
}

// Oracle database.
type OracleLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.MapInput `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OracleLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleLinkedService)(nil)).Elem()
}

func (i OracleLinkedServiceArgs) ToOracleLinkedServiceOutput() OracleLinkedServiceOutput {
	return i.ToOracleLinkedServiceOutputWithContext(context.Background())
}

func (i OracleLinkedServiceArgs) ToOracleLinkedServiceOutputWithContext(ctx context.Context) OracleLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleLinkedServiceOutput)
}

// Oracle database.
type OracleLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// Oracle database.
type OracleLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (OracleLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleLinkedServiceResponse)(nil)).Elem()
}

func (o OracleLinkedServiceResponseOutput) ToOracleLinkedServiceResponseOutput() OracleLinkedServiceResponseOutput {
	return o
}

func (o OracleLinkedServiceResponseOutput) ToOracleLinkedServiceResponseOutputWithContext(ctx context.Context) OracleLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o OracleLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v OracleLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o OracleLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v OracleLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o OracleLinkedServiceResponseOutput) ConnectionString() pulumi.MapOutput {
	return o.ApplyT(func(v OracleLinkedServiceResponse) map[string]interface{} { return v.ConnectionString }).(pulumi.MapOutput)
}

// Linked service description.
func (o OracleLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o OracleLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v OracleLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o OracleLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v OracleLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o OracleLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The on-premises Oracle database dataset.
type OracleTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// The table name of the on-premises Oracle database. Type: string (or Expression with resultType string).
	TableName map[string]interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// OracleTableDatasetInput is an input type that accepts OracleTableDatasetArgs and OracleTableDatasetOutput values.
// You can construct a concrete instance of `OracleTableDatasetInput` via:
//
//          OracleTableDatasetArgs{...}
type OracleTableDatasetInput interface {
	pulumi.Input

	ToOracleTableDatasetOutput() OracleTableDatasetOutput
	ToOracleTableDatasetOutputWithContext(context.Context) OracleTableDatasetOutput
}

// The on-premises Oracle database dataset.
type OracleTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// The table name of the on-premises Oracle database. Type: string (or Expression with resultType string).
	TableName pulumi.MapInput `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OracleTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleTableDataset)(nil)).Elem()
}

func (i OracleTableDatasetArgs) ToOracleTableDatasetOutput() OracleTableDatasetOutput {
	return i.ToOracleTableDatasetOutputWithContext(context.Background())
}

func (i OracleTableDatasetArgs) ToOracleTableDatasetOutputWithContext(ctx context.Context) OracleTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleTableDatasetOutput)
}

// The on-premises Oracle database dataset.
type OracleTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// The table name of the on-premises Oracle database. Type: string (or Expression with resultType string).
	TableName map[string]interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// The on-premises Oracle database dataset.
type OracleTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (OracleTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleTableDatasetResponse)(nil)).Elem()
}

func (o OracleTableDatasetResponseOutput) ToOracleTableDatasetResponseOutput() OracleTableDatasetResponseOutput {
	return o
}

func (o OracleTableDatasetResponseOutput) ToOracleTableDatasetResponseOutputWithContext(ctx context.Context) OracleTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o OracleTableDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o OracleTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o OracleTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o OracleTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o OracleTableDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// The table name of the on-premises Oracle database. Type: string (or Expression with resultType string).
func (o OracleTableDatasetResponseOutput) TableName() pulumi.MapOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) map[string]interface{} { return v.TableName }).(pulumi.MapOutput)
}

// Type of dataset.
func (o OracleTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The data stored in Optimized Row Columnar (ORC) format.
type OrcFormat struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer map[string]interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer map[string]interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	Type string `pulumi:"type"`
}

// OrcFormatInput is an input type that accepts OrcFormatArgs and OrcFormatOutput values.
// You can construct a concrete instance of `OrcFormatInput` via:
//
//          OrcFormatArgs{...}
type OrcFormatInput interface {
	pulumi.Input

	ToOrcFormatOutput() OrcFormatOutput
	ToOrcFormatOutputWithContext(context.Context) OrcFormatOutput
}

// The data stored in Optimized Row Columnar (ORC) format.
type OrcFormatArgs struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer pulumi.MapInput `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer pulumi.MapInput `pulumi:"serializer"`
	// Type of dataset storage format.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OrcFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcFormat)(nil)).Elem()
}

func (i OrcFormatArgs) ToOrcFormatOutput() OrcFormatOutput {
	return i.ToOrcFormatOutputWithContext(context.Background())
}

func (i OrcFormatArgs) ToOrcFormatOutputWithContext(ctx context.Context) OrcFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrcFormatOutput)
}

// The data stored in Optimized Row Columnar (ORC) format.
type OrcFormatResponse struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer map[string]interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer map[string]interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	Type string `pulumi:"type"`
}

// The data stored in Optimized Row Columnar (ORC) format.
type OrcFormatResponseOutput struct{ *pulumi.OutputState }

func (OrcFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcFormatResponse)(nil)).Elem()
}

func (o OrcFormatResponseOutput) ToOrcFormatResponseOutput() OrcFormatResponseOutput {
	return o
}

func (o OrcFormatResponseOutput) ToOrcFormatResponseOutputWithContext(ctx context.Context) OrcFormatResponseOutput {
	return o
}

// Deserializer. Type: string (or Expression with resultType string).
func (o OrcFormatResponseOutput) Deserializer() pulumi.MapOutput {
	return o.ApplyT(func(v OrcFormatResponse) map[string]interface{} { return v.Deserializer }).(pulumi.MapOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o OrcFormatResponseOutput) Serializer() pulumi.MapOutput {
	return o.ApplyT(func(v OrcFormatResponse) map[string]interface{} { return v.Serializer }).(pulumi.MapOutput)
}

// Type of dataset storage format.
func (o OrcFormatResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OrcFormatResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Definition of a single parameter for an entity.
type ParameterSpecification struct {
	// Default value of parameter.
	DefaultValue map[string]interface{} `pulumi:"defaultValue"`
	// Parameter type.
	Type string `pulumi:"type"`
}

// ParameterSpecificationInput is an input type that accepts ParameterSpecificationArgs and ParameterSpecificationOutput values.
// You can construct a concrete instance of `ParameterSpecificationInput` via:
//
//          ParameterSpecificationArgs{...}
type ParameterSpecificationInput interface {
	pulumi.Input

	ToParameterSpecificationOutput() ParameterSpecificationOutput
	ToParameterSpecificationOutputWithContext(context.Context) ParameterSpecificationOutput
}

// Definition of a single parameter for an entity.
type ParameterSpecificationArgs struct {
	// Default value of parameter.
	DefaultValue pulumi.MapInput `pulumi:"defaultValue"`
	// Parameter type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ParameterSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterSpecification)(nil)).Elem()
}

func (i ParameterSpecificationArgs) ToParameterSpecificationOutput() ParameterSpecificationOutput {
	return i.ToParameterSpecificationOutputWithContext(context.Background())
}

func (i ParameterSpecificationArgs) ToParameterSpecificationOutputWithContext(ctx context.Context) ParameterSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterSpecificationOutput)
}

// ParameterSpecificationMapInput is an input type that accepts ParameterSpecificationMap and ParameterSpecificationMapOutput values.
// You can construct a concrete instance of `ParameterSpecificationMapInput` via:
//
//          ParameterSpecificationMap{ "key": ParameterSpecificationArgs{...} }
type ParameterSpecificationMapInput interface {
	pulumi.Input

	ToParameterSpecificationMapOutput() ParameterSpecificationMapOutput
	ToParameterSpecificationMapOutputWithContext(context.Context) ParameterSpecificationMapOutput
}

type ParameterSpecificationMap map[string]ParameterSpecificationInput

func (ParameterSpecificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterSpecification)(nil)).Elem()
}

func (i ParameterSpecificationMap) ToParameterSpecificationMapOutput() ParameterSpecificationMapOutput {
	return i.ToParameterSpecificationMapOutputWithContext(context.Background())
}

func (i ParameterSpecificationMap) ToParameterSpecificationMapOutputWithContext(ctx context.Context) ParameterSpecificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterSpecificationMapOutput)
}

// Definition of a single parameter for an entity.
type ParameterSpecificationResponse struct {
	// Default value of parameter.
	DefaultValue map[string]interface{} `pulumi:"defaultValue"`
	// Parameter type.
	Type string `pulumi:"type"`
}

// Definition of a single parameter for an entity.
type ParameterSpecificationResponseOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterSpecificationResponse)(nil)).Elem()
}

func (o ParameterSpecificationResponseOutput) ToParameterSpecificationResponseOutput() ParameterSpecificationResponseOutput {
	return o
}

func (o ParameterSpecificationResponseOutput) ToParameterSpecificationResponseOutputWithContext(ctx context.Context) ParameterSpecificationResponseOutput {
	return o
}

// Default value of parameter.
func (o ParameterSpecificationResponseOutput) DefaultValue() pulumi.MapOutput {
	return o.ApplyT(func(v ParameterSpecificationResponse) map[string]interface{} { return v.DefaultValue }).(pulumi.MapOutput)
}

// Parameter type.
func (o ParameterSpecificationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterSpecificationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ParameterSpecificationResponseMapOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterSpecificationResponse)(nil)).Elem()
}

func (o ParameterSpecificationResponseMapOutput) ToParameterSpecificationResponseMapOutput() ParameterSpecificationResponseMapOutput {
	return o
}

func (o ParameterSpecificationResponseMapOutput) ToParameterSpecificationResponseMapOutputWithContext(ctx context.Context) ParameterSpecificationResponseMapOutput {
	return o
}

func (o ParameterSpecificationResponseMapOutput) MapIndex(k pulumi.StringInput) ParameterSpecificationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterSpecificationResponse {
		return vs[0].(map[string]ParameterSpecificationResponse)[vs[1].(string)]
	}).(ParameterSpecificationResponseOutput)
}

// The data stored in Parquet format.
type ParquetFormat struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer map[string]interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer map[string]interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	Type string `pulumi:"type"`
}

// ParquetFormatInput is an input type that accepts ParquetFormatArgs and ParquetFormatOutput values.
// You can construct a concrete instance of `ParquetFormatInput` via:
//
//          ParquetFormatArgs{...}
type ParquetFormatInput interface {
	pulumi.Input

	ToParquetFormatOutput() ParquetFormatOutput
	ToParquetFormatOutputWithContext(context.Context) ParquetFormatOutput
}

// The data stored in Parquet format.
type ParquetFormatArgs struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer pulumi.MapInput `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer pulumi.MapInput `pulumi:"serializer"`
	// Type of dataset storage format.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ParquetFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetFormat)(nil)).Elem()
}

func (i ParquetFormatArgs) ToParquetFormatOutput() ParquetFormatOutput {
	return i.ToParquetFormatOutputWithContext(context.Background())
}

func (i ParquetFormatArgs) ToParquetFormatOutputWithContext(ctx context.Context) ParquetFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetFormatOutput)
}

// The data stored in Parquet format.
type ParquetFormatResponse struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer map[string]interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer map[string]interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	Type string `pulumi:"type"`
}

// The data stored in Parquet format.
type ParquetFormatResponseOutput struct{ *pulumi.OutputState }

func (ParquetFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetFormatResponse)(nil)).Elem()
}

func (o ParquetFormatResponseOutput) ToParquetFormatResponseOutput() ParquetFormatResponseOutput {
	return o
}

func (o ParquetFormatResponseOutput) ToParquetFormatResponseOutputWithContext(ctx context.Context) ParquetFormatResponseOutput {
	return o
}

// Deserializer. Type: string (or Expression with resultType string).
func (o ParquetFormatResponseOutput) Deserializer() pulumi.MapOutput {
	return o.ApplyT(func(v ParquetFormatResponse) map[string]interface{} { return v.Deserializer }).(pulumi.MapOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o ParquetFormatResponseOutput) Serializer() pulumi.MapOutput {
	return o.ApplyT(func(v ParquetFormatResponse) map[string]interface{} { return v.Serializer }).(pulumi.MapOutput)
}

// Type of dataset storage format.
func (o ParquetFormatResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParquetFormatResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Paypal Service linked service.
type PaypalLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The client ID associated with your PayPal application.
	ClientId map[string]interface{} `pulumi:"clientId"`
	// The client secret associated with your PayPal application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The URL of the PayPal instance. (i.e. api.sandbox.paypal.com)
	Host map[string]interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
}

// PaypalLinkedServiceInput is an input type that accepts PaypalLinkedServiceArgs and PaypalLinkedServiceOutput values.
// You can construct a concrete instance of `PaypalLinkedServiceInput` via:
//
//          PaypalLinkedServiceArgs{...}
type PaypalLinkedServiceInput interface {
	pulumi.Input

	ToPaypalLinkedServiceOutput() PaypalLinkedServiceOutput
	ToPaypalLinkedServiceOutputWithContext(context.Context) PaypalLinkedServiceOutput
}

// Paypal Service linked service.
type PaypalLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The client ID associated with your PayPal application.
	ClientId pulumi.MapInput `pulumi:"clientId"`
	// The client secret associated with your PayPal application.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The URL of the PayPal instance. (i.e. api.sandbox.paypal.com)
	Host pulumi.MapInput `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.MapInput `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.MapInput `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.MapInput `pulumi:"usePeerVerification"`
}

func (PaypalLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PaypalLinkedService)(nil)).Elem()
}

func (i PaypalLinkedServiceArgs) ToPaypalLinkedServiceOutput() PaypalLinkedServiceOutput {
	return i.ToPaypalLinkedServiceOutputWithContext(context.Background())
}

func (i PaypalLinkedServiceArgs) ToPaypalLinkedServiceOutputWithContext(ctx context.Context) PaypalLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PaypalLinkedServiceOutput)
}

// Paypal Service linked service.
type PaypalLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The client ID associated with your PayPal application.
	ClientId map[string]interface{} `pulumi:"clientId"`
	// The client secret associated with your PayPal application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The URL of the PayPal instance. (i.e. api.sandbox.paypal.com)
	Host map[string]interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
}

// Paypal Service linked service.
type PaypalLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (PaypalLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PaypalLinkedServiceResponse)(nil)).Elem()
}

func (o PaypalLinkedServiceResponseOutput) ToPaypalLinkedServiceResponseOutput() PaypalLinkedServiceResponseOutput {
	return o
}

func (o PaypalLinkedServiceResponseOutput) ToPaypalLinkedServiceResponseOutputWithContext(ctx context.Context) PaypalLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o PaypalLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The client ID associated with your PayPal application.
func (o PaypalLinkedServiceResponseOutput) ClientId() pulumi.MapOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) map[string]interface{} { return v.ClientId }).(pulumi.MapOutput)
}

// The client secret associated with your PayPal application.
func (o PaypalLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o PaypalLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o PaypalLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o PaypalLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The URL of the PayPal instance. (i.e. api.sandbox.paypal.com)
func (o PaypalLinkedServiceResponseOutput) Host() pulumi.MapOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) map[string]interface{} { return v.Host }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o PaypalLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o PaypalLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o PaypalLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.MapOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) map[string]interface{} { return v.UseEncryptedEndpoints }).(pulumi.MapOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o PaypalLinkedServiceResponseOutput) UseHostVerification() pulumi.MapOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) map[string]interface{} { return v.UseHostVerification }).(pulumi.MapOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o PaypalLinkedServiceResponseOutput) UsePeerVerification() pulumi.MapOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) map[string]interface{} { return v.UsePeerVerification }).(pulumi.MapOutput)
}

// Paypal Service dataset.
type PaypalObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// PaypalObjectDatasetInput is an input type that accepts PaypalObjectDatasetArgs and PaypalObjectDatasetOutput values.
// You can construct a concrete instance of `PaypalObjectDatasetInput` via:
//
//          PaypalObjectDatasetArgs{...}
type PaypalObjectDatasetInput interface {
	pulumi.Input

	ToPaypalObjectDatasetOutput() PaypalObjectDatasetOutput
	ToPaypalObjectDatasetOutputWithContext(context.Context) PaypalObjectDatasetOutput
}

// Paypal Service dataset.
type PaypalObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PaypalObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PaypalObjectDataset)(nil)).Elem()
}

func (i PaypalObjectDatasetArgs) ToPaypalObjectDatasetOutput() PaypalObjectDatasetOutput {
	return i.ToPaypalObjectDatasetOutputWithContext(context.Background())
}

func (i PaypalObjectDatasetArgs) ToPaypalObjectDatasetOutputWithContext(ctx context.Context) PaypalObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PaypalObjectDatasetOutput)
}

// Paypal Service dataset.
type PaypalObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Paypal Service dataset.
type PaypalObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (PaypalObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PaypalObjectDatasetResponse)(nil)).Elem()
}

func (o PaypalObjectDatasetResponseOutput) ToPaypalObjectDatasetResponseOutput() PaypalObjectDatasetResponseOutput {
	return o
}

func (o PaypalObjectDatasetResponseOutput) ToPaypalObjectDatasetResponseOutputWithContext(ctx context.Context) PaypalObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o PaypalObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o PaypalObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o PaypalObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o PaypalObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o PaypalObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o PaypalObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Phoenix server linked service.
type PhoenixLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch map[string]interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert map[string]interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Phoenix server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl map[string]interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Phoenix server. (i.e. 192.168.222.160)
	Host map[string]interface{} `pulumi:"host"`
	// The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using WindowsAzureHDInsightService.
	HttpPath map[string]interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765.
	Port map[string]interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath map[string]interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore map[string]interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Phoenix server.
	Username map[string]interface{} `pulumi:"username"`
}

// PhoenixLinkedServiceInput is an input type that accepts PhoenixLinkedServiceArgs and PhoenixLinkedServiceOutput values.
// You can construct a concrete instance of `PhoenixLinkedServiceInput` via:
//
//          PhoenixLinkedServiceArgs{...}
type PhoenixLinkedServiceInput interface {
	pulumi.Input

	ToPhoenixLinkedServiceOutput() PhoenixLinkedServiceOutput
	ToPhoenixLinkedServiceOutputWithContext(context.Context) PhoenixLinkedServiceOutput
}

// Phoenix server linked service.
type PhoenixLinkedServiceArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.MapInput `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.MapInput `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Phoenix server.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.MapInput `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The IP address or host name of the Phoenix server. (i.e. 192.168.222.160)
	Host pulumi.MapInput `pulumi:"host"`
	// The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using WindowsAzureHDInsightService.
	HttpPath pulumi.MapInput `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765.
	Port pulumi.MapInput `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.MapInput `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.MapInput `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Phoenix server.
	Username pulumi.MapInput `pulumi:"username"`
}

func (PhoenixLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhoenixLinkedService)(nil)).Elem()
}

func (i PhoenixLinkedServiceArgs) ToPhoenixLinkedServiceOutput() PhoenixLinkedServiceOutput {
	return i.ToPhoenixLinkedServiceOutputWithContext(context.Background())
}

func (i PhoenixLinkedServiceArgs) ToPhoenixLinkedServiceOutputWithContext(ctx context.Context) PhoenixLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhoenixLinkedServiceOutput)
}

// Phoenix server linked service.
type PhoenixLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch map[string]interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert map[string]interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Phoenix server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl map[string]interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Phoenix server. (i.e. 192.168.222.160)
	Host map[string]interface{} `pulumi:"host"`
	// The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using WindowsAzureHDInsightService.
	HttpPath map[string]interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765.
	Port map[string]interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath map[string]interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore map[string]interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Phoenix server.
	Username map[string]interface{} `pulumi:"username"`
}

// Phoenix server linked service.
type PhoenixLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (PhoenixLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhoenixLinkedServiceResponse)(nil)).Elem()
}

func (o PhoenixLinkedServiceResponseOutput) ToPhoenixLinkedServiceResponseOutput() PhoenixLinkedServiceResponseOutput {
	return o
}

func (o PhoenixLinkedServiceResponseOutput) ToPhoenixLinkedServiceResponseOutputWithContext(ctx context.Context) PhoenixLinkedServiceResponseOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o PhoenixLinkedServiceResponseOutput) AllowHostNameCNMismatch() pulumi.MapOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) map[string]interface{} { return v.AllowHostNameCNMismatch }).(pulumi.MapOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o PhoenixLinkedServiceResponseOutput) AllowSelfSignedServerCert() pulumi.MapOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) map[string]interface{} { return v.AllowSelfSignedServerCert }).(pulumi.MapOutput)
}

// List of tags that can be used for describing the Dataset.
func (o PhoenixLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The authentication mechanism used to connect to the Phoenix server.
func (o PhoenixLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o PhoenixLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o PhoenixLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o PhoenixLinkedServiceResponseOutput) EnableSsl() pulumi.MapOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) map[string]interface{} { return v.EnableSsl }).(pulumi.MapOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o PhoenixLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The IP address or host name of the Phoenix server. (i.e. 192.168.222.160)
func (o PhoenixLinkedServiceResponseOutput) Host() pulumi.MapOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) map[string]interface{} { return v.Host }).(pulumi.MapOutput)
}

// The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using WindowsAzureHDInsightService.
func (o PhoenixLinkedServiceResponseOutput) HttpPath() pulumi.MapOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) map[string]interface{} { return v.HttpPath }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o PhoenixLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name.
func (o PhoenixLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765.
func (o PhoenixLinkedServiceResponseOutput) Port() pulumi.MapOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) map[string]interface{} { return v.Port }).(pulumi.MapOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o PhoenixLinkedServiceResponseOutput) TrustedCertPath() pulumi.MapOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) map[string]interface{} { return v.TrustedCertPath }).(pulumi.MapOutput)
}

// Type of linked service.
func (o PhoenixLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o PhoenixLinkedServiceResponseOutput) UseSystemTrustStore() pulumi.MapOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) map[string]interface{} { return v.UseSystemTrustStore }).(pulumi.MapOutput)
}

// The user name used to connect to the Phoenix server.
func (o PhoenixLinkedServiceResponseOutput) Username() pulumi.MapOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) map[string]interface{} { return v.Username }).(pulumi.MapOutput)
}

// Phoenix server dataset.
type PhoenixObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// PhoenixObjectDatasetInput is an input type that accepts PhoenixObjectDatasetArgs and PhoenixObjectDatasetOutput values.
// You can construct a concrete instance of `PhoenixObjectDatasetInput` via:
//
//          PhoenixObjectDatasetArgs{...}
type PhoenixObjectDatasetInput interface {
	pulumi.Input

	ToPhoenixObjectDatasetOutput() PhoenixObjectDatasetOutput
	ToPhoenixObjectDatasetOutputWithContext(context.Context) PhoenixObjectDatasetOutput
}

// Phoenix server dataset.
type PhoenixObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PhoenixObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhoenixObjectDataset)(nil)).Elem()
}

func (i PhoenixObjectDatasetArgs) ToPhoenixObjectDatasetOutput() PhoenixObjectDatasetOutput {
	return i.ToPhoenixObjectDatasetOutputWithContext(context.Background())
}

func (i PhoenixObjectDatasetArgs) ToPhoenixObjectDatasetOutputWithContext(ctx context.Context) PhoenixObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhoenixObjectDatasetOutput)
}

// Phoenix server dataset.
type PhoenixObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Phoenix server dataset.
type PhoenixObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (PhoenixObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhoenixObjectDatasetResponse)(nil)).Elem()
}

func (o PhoenixObjectDatasetResponseOutput) ToPhoenixObjectDatasetResponseOutput() PhoenixObjectDatasetResponseOutput {
	return o
}

func (o PhoenixObjectDatasetResponseOutput) ToPhoenixObjectDatasetResponseOutputWithContext(ctx context.Context) PhoenixObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o PhoenixObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o PhoenixObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o PhoenixObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o PhoenixObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o PhoenixObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o PhoenixObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Pipeline reference type.
type PipelineReference struct {
	// Reference name.
	Name *string `pulumi:"name"`
	// Reference pipeline name.
	ReferenceName string `pulumi:"referenceName"`
	// Pipeline reference type.
	Type string `pulumi:"type"`
}

// PipelineReferenceInput is an input type that accepts PipelineReferenceArgs and PipelineReferenceOutput values.
// You can construct a concrete instance of `PipelineReferenceInput` via:
//
//          PipelineReferenceArgs{...}
type PipelineReferenceInput interface {
	pulumi.Input

	ToPipelineReferenceOutput() PipelineReferenceOutput
	ToPipelineReferenceOutputWithContext(context.Context) PipelineReferenceOutput
}

// Pipeline reference type.
type PipelineReferenceArgs struct {
	// Reference name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Reference pipeline name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Pipeline reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PipelineReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineReference)(nil)).Elem()
}

func (i PipelineReferenceArgs) ToPipelineReferenceOutput() PipelineReferenceOutput {
	return i.ToPipelineReferenceOutputWithContext(context.Background())
}

func (i PipelineReferenceArgs) ToPipelineReferenceOutputWithContext(ctx context.Context) PipelineReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineReferenceOutput)
}

func (i PipelineReferenceArgs) ToPipelineReferencePtrOutput() PipelineReferencePtrOutput {
	return i.ToPipelineReferencePtrOutputWithContext(context.Background())
}

func (i PipelineReferenceArgs) ToPipelineReferencePtrOutputWithContext(ctx context.Context) PipelineReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineReferenceOutput).ToPipelineReferencePtrOutputWithContext(ctx)
}

// PipelineReferencePtrInput is an input type that accepts PipelineReferenceArgs, PipelineReferencePtr and PipelineReferencePtrOutput values.
// You can construct a concrete instance of `PipelineReferencePtrInput` via:
//
//          PipelineReferenceArgs{...}
//
//  or:
//
//          nil
type PipelineReferencePtrInput interface {
	pulumi.Input

	ToPipelineReferencePtrOutput() PipelineReferencePtrOutput
	ToPipelineReferencePtrOutputWithContext(context.Context) PipelineReferencePtrOutput
}

type pipelineReferencePtrType PipelineReferenceArgs

func PipelineReferencePtr(v *PipelineReferenceArgs) PipelineReferencePtrInput {
	return (*pipelineReferencePtrType)(v)
}

func (*pipelineReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineReference)(nil)).Elem()
}

func (i *pipelineReferencePtrType) ToPipelineReferencePtrOutput() PipelineReferencePtrOutput {
	return i.ToPipelineReferencePtrOutputWithContext(context.Background())
}

func (i *pipelineReferencePtrType) ToPipelineReferencePtrOutputWithContext(ctx context.Context) PipelineReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineReferencePtrOutput)
}

// Pipeline reference type.
type PipelineReferenceResponse struct {
	// Reference name.
	Name *string `pulumi:"name"`
	// Reference pipeline name.
	ReferenceName string `pulumi:"referenceName"`
	// Pipeline reference type.
	Type string `pulumi:"type"`
}

// Pipeline reference type.
type PipelineReferenceResponseOutput struct{ *pulumi.OutputState }

func (PipelineReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineReferenceResponse)(nil)).Elem()
}

func (o PipelineReferenceResponseOutput) ToPipelineReferenceResponseOutput() PipelineReferenceResponseOutput {
	return o
}

func (o PipelineReferenceResponseOutput) ToPipelineReferenceResponseOutputWithContext(ctx context.Context) PipelineReferenceResponseOutput {
	return o
}

func (o PipelineReferenceResponseOutput) ToPipelineReferenceResponsePtrOutput() PipelineReferenceResponsePtrOutput {
	return o.ToPipelineReferenceResponsePtrOutputWithContext(context.Background())
}

func (o PipelineReferenceResponseOutput) ToPipelineReferenceResponsePtrOutputWithContext(ctx context.Context) PipelineReferenceResponsePtrOutput {
	return o.ApplyT(func(v PipelineReferenceResponse) *PipelineReferenceResponse {
		return &v
	}).(PipelineReferenceResponsePtrOutput)
}

// Reference name.
func (o PipelineReferenceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineReferenceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Reference pipeline name.
func (o PipelineReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Pipeline reference type.
func (o PipelineReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PipelineReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (PipelineReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineReferenceResponse)(nil)).Elem()
}

func (o PipelineReferenceResponsePtrOutput) ToPipelineReferenceResponsePtrOutput() PipelineReferenceResponsePtrOutput {
	return o
}

func (o PipelineReferenceResponsePtrOutput) ToPipelineReferenceResponsePtrOutputWithContext(ctx context.Context) PipelineReferenceResponsePtrOutput {
	return o
}

func (o PipelineReferenceResponsePtrOutput) Elem() PipelineReferenceResponseOutput {
	return o.ApplyT(func(v *PipelineReferenceResponse) PipelineReferenceResponse { return *v }).(PipelineReferenceResponseOutput)
}

// Reference name.
func (o PipelineReferenceResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Reference pipeline name.
func (o PipelineReferenceResponsePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Pipeline reference type.
func (o PipelineReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Linked service for PostgreSQL data source.
type PostgreSqlLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// PostgreSqlLinkedServiceInput is an input type that accepts PostgreSqlLinkedServiceArgs and PostgreSqlLinkedServiceOutput values.
// You can construct a concrete instance of `PostgreSqlLinkedServiceInput` via:
//
//          PostgreSqlLinkedServiceArgs{...}
type PostgreSqlLinkedServiceInput interface {
	pulumi.Input

	ToPostgreSqlLinkedServiceOutput() PostgreSqlLinkedServiceOutput
	ToPostgreSqlLinkedServiceOutputWithContext(context.Context) PostgreSqlLinkedServiceOutput
}

// Linked service for PostgreSQL data source.
type PostgreSqlLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PostgreSqlLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlLinkedService)(nil)).Elem()
}

func (i PostgreSqlLinkedServiceArgs) ToPostgreSqlLinkedServiceOutput() PostgreSqlLinkedServiceOutput {
	return i.ToPostgreSqlLinkedServiceOutputWithContext(context.Background())
}

func (i PostgreSqlLinkedServiceArgs) ToPostgreSqlLinkedServiceOutputWithContext(ctx context.Context) PostgreSqlLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSqlLinkedServiceOutput)
}

// Linked service for PostgreSQL data source.
type PostgreSqlLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// Linked service for PostgreSQL data source.
type PostgreSqlLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (PostgreSqlLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlLinkedServiceResponse)(nil)).Elem()
}

func (o PostgreSqlLinkedServiceResponseOutput) ToPostgreSqlLinkedServiceResponseOutput() PostgreSqlLinkedServiceResponseOutput {
	return o
}

func (o PostgreSqlLinkedServiceResponseOutput) ToPostgreSqlLinkedServiceResponseOutputWithContext(ctx context.Context) PostgreSqlLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o PostgreSqlLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v PostgreSqlLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o PostgreSqlLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v PostgreSqlLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string.
func (o PostgreSqlLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o PostgreSqlLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o PostgreSqlLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v PostgreSqlLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o PostgreSqlLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v PostgreSqlLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o PostgreSqlLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Presto server linked service.
type PrestoLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch map[string]interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert map[string]interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Presto server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The catalog context for all request against the server.
	Catalog map[string]interface{} `pulumi:"catalog"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl map[string]interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Presto server. (i.e. 192.168.222.160)
	Host map[string]interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Presto server uses to listen for client connections. The default value is 8080.
	Port map[string]interface{} `pulumi:"port"`
	// The version of the Presto server. (i.e. 0.148-t)
	ServerVersion map[string]interface{} `pulumi:"serverVersion"`
	// The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database. The default value is the system time zone.
	TimeZoneID map[string]interface{} `pulumi:"timeZoneID"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath map[string]interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore map[string]interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Presto server.
	Username map[string]interface{} `pulumi:"username"`
}

// PrestoLinkedServiceInput is an input type that accepts PrestoLinkedServiceArgs and PrestoLinkedServiceOutput values.
// You can construct a concrete instance of `PrestoLinkedServiceInput` via:
//
//          PrestoLinkedServiceArgs{...}
type PrestoLinkedServiceInput interface {
	pulumi.Input

	ToPrestoLinkedServiceOutput() PrestoLinkedServiceOutput
	ToPrestoLinkedServiceOutputWithContext(context.Context) PrestoLinkedServiceOutput
}

// Presto server linked service.
type PrestoLinkedServiceArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.MapInput `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.MapInput `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Presto server.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The catalog context for all request against the server.
	Catalog pulumi.MapInput `pulumi:"catalog"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.MapInput `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The IP address or host name of the Presto server. (i.e. 192.168.222.160)
	Host pulumi.MapInput `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Presto server uses to listen for client connections. The default value is 8080.
	Port pulumi.MapInput `pulumi:"port"`
	// The version of the Presto server. (i.e. 0.148-t)
	ServerVersion pulumi.MapInput `pulumi:"serverVersion"`
	// The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database. The default value is the system time zone.
	TimeZoneID pulumi.MapInput `pulumi:"timeZoneID"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.MapInput `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.MapInput `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Presto server.
	Username pulumi.MapInput `pulumi:"username"`
}

func (PrestoLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrestoLinkedService)(nil)).Elem()
}

func (i PrestoLinkedServiceArgs) ToPrestoLinkedServiceOutput() PrestoLinkedServiceOutput {
	return i.ToPrestoLinkedServiceOutputWithContext(context.Background())
}

func (i PrestoLinkedServiceArgs) ToPrestoLinkedServiceOutputWithContext(ctx context.Context) PrestoLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrestoLinkedServiceOutput)
}

// Presto server linked service.
type PrestoLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch map[string]interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert map[string]interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Presto server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The catalog context for all request against the server.
	Catalog map[string]interface{} `pulumi:"catalog"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl map[string]interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Presto server. (i.e. 192.168.222.160)
	Host map[string]interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Presto server uses to listen for client connections. The default value is 8080.
	Port map[string]interface{} `pulumi:"port"`
	// The version of the Presto server. (i.e. 0.148-t)
	ServerVersion map[string]interface{} `pulumi:"serverVersion"`
	// The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database. The default value is the system time zone.
	TimeZoneID map[string]interface{} `pulumi:"timeZoneID"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath map[string]interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore map[string]interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Presto server.
	Username map[string]interface{} `pulumi:"username"`
}

// Presto server linked service.
type PrestoLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (PrestoLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrestoLinkedServiceResponse)(nil)).Elem()
}

func (o PrestoLinkedServiceResponseOutput) ToPrestoLinkedServiceResponseOutput() PrestoLinkedServiceResponseOutput {
	return o
}

func (o PrestoLinkedServiceResponseOutput) ToPrestoLinkedServiceResponseOutputWithContext(ctx context.Context) PrestoLinkedServiceResponseOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o PrestoLinkedServiceResponseOutput) AllowHostNameCNMismatch() pulumi.MapOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) map[string]interface{} { return v.AllowHostNameCNMismatch }).(pulumi.MapOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o PrestoLinkedServiceResponseOutput) AllowSelfSignedServerCert() pulumi.MapOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) map[string]interface{} { return v.AllowSelfSignedServerCert }).(pulumi.MapOutput)
}

// List of tags that can be used for describing the Dataset.
func (o PrestoLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The authentication mechanism used to connect to the Presto server.
func (o PrestoLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The catalog context for all request against the server.
func (o PrestoLinkedServiceResponseOutput) Catalog() pulumi.MapOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) map[string]interface{} { return v.Catalog }).(pulumi.MapOutput)
}

// The integration runtime reference.
func (o PrestoLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o PrestoLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o PrestoLinkedServiceResponseOutput) EnableSsl() pulumi.MapOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) map[string]interface{} { return v.EnableSsl }).(pulumi.MapOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o PrestoLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The IP address or host name of the Presto server. (i.e. 192.168.222.160)
func (o PrestoLinkedServiceResponseOutput) Host() pulumi.MapOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) map[string]interface{} { return v.Host }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o PrestoLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name.
func (o PrestoLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Presto server uses to listen for client connections. The default value is 8080.
func (o PrestoLinkedServiceResponseOutput) Port() pulumi.MapOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) map[string]interface{} { return v.Port }).(pulumi.MapOutput)
}

// The version of the Presto server. (i.e. 0.148-t)
func (o PrestoLinkedServiceResponseOutput) ServerVersion() pulumi.MapOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) map[string]interface{} { return v.ServerVersion }).(pulumi.MapOutput)
}

// The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database. The default value is the system time zone.
func (o PrestoLinkedServiceResponseOutput) TimeZoneID() pulumi.MapOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) map[string]interface{} { return v.TimeZoneID }).(pulumi.MapOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o PrestoLinkedServiceResponseOutput) TrustedCertPath() pulumi.MapOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) map[string]interface{} { return v.TrustedCertPath }).(pulumi.MapOutput)
}

// Type of linked service.
func (o PrestoLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o PrestoLinkedServiceResponseOutput) UseSystemTrustStore() pulumi.MapOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) map[string]interface{} { return v.UseSystemTrustStore }).(pulumi.MapOutput)
}

// The user name used to connect to the Presto server.
func (o PrestoLinkedServiceResponseOutput) Username() pulumi.MapOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) map[string]interface{} { return v.Username }).(pulumi.MapOutput)
}

// Presto server dataset.
type PrestoObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// PrestoObjectDatasetInput is an input type that accepts PrestoObjectDatasetArgs and PrestoObjectDatasetOutput values.
// You can construct a concrete instance of `PrestoObjectDatasetInput` via:
//
//          PrestoObjectDatasetArgs{...}
type PrestoObjectDatasetInput interface {
	pulumi.Input

	ToPrestoObjectDatasetOutput() PrestoObjectDatasetOutput
	ToPrestoObjectDatasetOutputWithContext(context.Context) PrestoObjectDatasetOutput
}

// Presto server dataset.
type PrestoObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PrestoObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrestoObjectDataset)(nil)).Elem()
}

func (i PrestoObjectDatasetArgs) ToPrestoObjectDatasetOutput() PrestoObjectDatasetOutput {
	return i.ToPrestoObjectDatasetOutputWithContext(context.Background())
}

func (i PrestoObjectDatasetArgs) ToPrestoObjectDatasetOutputWithContext(ctx context.Context) PrestoObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrestoObjectDatasetOutput)
}

// Presto server dataset.
type PrestoObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Presto server dataset.
type PrestoObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (PrestoObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrestoObjectDatasetResponse)(nil)).Elem()
}

func (o PrestoObjectDatasetResponseOutput) ToPrestoObjectDatasetResponseOutput() PrestoObjectDatasetResponseOutput {
	return o
}

func (o PrestoObjectDatasetResponseOutput) ToPrestoObjectDatasetResponseOutputWithContext(ctx context.Context) PrestoObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o PrestoObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o PrestoObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o PrestoObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o PrestoObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o PrestoObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o PrestoObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// QuickBooks server linked service.
type QuickBooksLinkedService struct {
	// The access token for OAuth 1.0 authentication.
	AccessToken interface{} `pulumi:"accessToken"`
	// The access token secret for OAuth 1.0 authentication.
	AccessTokenSecret interface{} `pulumi:"accessTokenSecret"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The company ID of the QuickBooks company to authorize.
	CompanyId map[string]interface{} `pulumi:"companyId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The consumer key for OAuth 1.0 authentication.
	ConsumerKey map[string]interface{} `pulumi:"consumerKey"`
	// The consumer secret for OAuth 1.0 authentication.
	ConsumerSecret interface{} `pulumi:"consumerSecret"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
	Endpoint map[string]interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
}

// QuickBooksLinkedServiceInput is an input type that accepts QuickBooksLinkedServiceArgs and QuickBooksLinkedServiceOutput values.
// You can construct a concrete instance of `QuickBooksLinkedServiceInput` via:
//
//          QuickBooksLinkedServiceArgs{...}
type QuickBooksLinkedServiceInput interface {
	pulumi.Input

	ToQuickBooksLinkedServiceOutput() QuickBooksLinkedServiceOutput
	ToQuickBooksLinkedServiceOutputWithContext(context.Context) QuickBooksLinkedServiceOutput
}

// QuickBooks server linked service.
type QuickBooksLinkedServiceArgs struct {
	// The access token for OAuth 1.0 authentication.
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// The access token secret for OAuth 1.0 authentication.
	AccessTokenSecret pulumi.Input `pulumi:"accessTokenSecret"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The company ID of the QuickBooks company to authorize.
	CompanyId pulumi.MapInput `pulumi:"companyId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The consumer key for OAuth 1.0 authentication.
	ConsumerKey pulumi.MapInput `pulumi:"consumerKey"`
	// The consumer secret for OAuth 1.0 authentication.
	ConsumerSecret pulumi.Input `pulumi:"consumerSecret"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
	Endpoint pulumi.MapInput `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.MapInput `pulumi:"useEncryptedEndpoints"`
}

func (QuickBooksLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickBooksLinkedService)(nil)).Elem()
}

func (i QuickBooksLinkedServiceArgs) ToQuickBooksLinkedServiceOutput() QuickBooksLinkedServiceOutput {
	return i.ToQuickBooksLinkedServiceOutputWithContext(context.Background())
}

func (i QuickBooksLinkedServiceArgs) ToQuickBooksLinkedServiceOutputWithContext(ctx context.Context) QuickBooksLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickBooksLinkedServiceOutput)
}

// QuickBooks server linked service.
type QuickBooksLinkedServiceResponse struct {
	// The access token for OAuth 1.0 authentication.
	AccessToken interface{} `pulumi:"accessToken"`
	// The access token secret for OAuth 1.0 authentication.
	AccessTokenSecret interface{} `pulumi:"accessTokenSecret"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The company ID of the QuickBooks company to authorize.
	CompanyId map[string]interface{} `pulumi:"companyId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The consumer key for OAuth 1.0 authentication.
	ConsumerKey map[string]interface{} `pulumi:"consumerKey"`
	// The consumer secret for OAuth 1.0 authentication.
	ConsumerSecret interface{} `pulumi:"consumerSecret"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
	Endpoint map[string]interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
}

// QuickBooks server linked service.
type QuickBooksLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (QuickBooksLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickBooksLinkedServiceResponse)(nil)).Elem()
}

func (o QuickBooksLinkedServiceResponseOutput) ToQuickBooksLinkedServiceResponseOutput() QuickBooksLinkedServiceResponseOutput {
	return o
}

func (o QuickBooksLinkedServiceResponseOutput) ToQuickBooksLinkedServiceResponseOutputWithContext(ctx context.Context) QuickBooksLinkedServiceResponseOutput {
	return o
}

// The access token for OAuth 1.0 authentication.
func (o QuickBooksLinkedServiceResponseOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// The access token secret for OAuth 1.0 authentication.
func (o QuickBooksLinkedServiceResponseOutput) AccessTokenSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) interface{} { return v.AccessTokenSecret }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the Dataset.
func (o QuickBooksLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The company ID of the QuickBooks company to authorize.
func (o QuickBooksLinkedServiceResponseOutput) CompanyId() pulumi.MapOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) map[string]interface{} { return v.CompanyId }).(pulumi.MapOutput)
}

// The integration runtime reference.
func (o QuickBooksLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The consumer key for OAuth 1.0 authentication.
func (o QuickBooksLinkedServiceResponseOutput) ConsumerKey() pulumi.MapOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) map[string]interface{} { return v.ConsumerKey }).(pulumi.MapOutput)
}

// The consumer secret for OAuth 1.0 authentication.
func (o QuickBooksLinkedServiceResponseOutput) ConsumerSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) interface{} { return v.ConsumerSecret }).(pulumi.AnyOutput)
}

// Linked service description.
func (o QuickBooksLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o QuickBooksLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
func (o QuickBooksLinkedServiceResponseOutput) Endpoint() pulumi.MapOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) map[string]interface{} { return v.Endpoint }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o QuickBooksLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o QuickBooksLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o QuickBooksLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.MapOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) map[string]interface{} { return v.UseEncryptedEndpoints }).(pulumi.MapOutput)
}

// QuickBooks server dataset.
type QuickBooksObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// QuickBooksObjectDatasetInput is an input type that accepts QuickBooksObjectDatasetArgs and QuickBooksObjectDatasetOutput values.
// You can construct a concrete instance of `QuickBooksObjectDatasetInput` via:
//
//          QuickBooksObjectDatasetArgs{...}
type QuickBooksObjectDatasetInput interface {
	pulumi.Input

	ToQuickBooksObjectDatasetOutput() QuickBooksObjectDatasetOutput
	ToQuickBooksObjectDatasetOutputWithContext(context.Context) QuickBooksObjectDatasetOutput
}

// QuickBooks server dataset.
type QuickBooksObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (QuickBooksObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickBooksObjectDataset)(nil)).Elem()
}

func (i QuickBooksObjectDatasetArgs) ToQuickBooksObjectDatasetOutput() QuickBooksObjectDatasetOutput {
	return i.ToQuickBooksObjectDatasetOutputWithContext(context.Background())
}

func (i QuickBooksObjectDatasetArgs) ToQuickBooksObjectDatasetOutputWithContext(ctx context.Context) QuickBooksObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickBooksObjectDatasetOutput)
}

// QuickBooks server dataset.
type QuickBooksObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// QuickBooks server dataset.
type QuickBooksObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (QuickBooksObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickBooksObjectDatasetResponse)(nil)).Elem()
}

func (o QuickBooksObjectDatasetResponseOutput) ToQuickBooksObjectDatasetResponseOutput() QuickBooksObjectDatasetResponseOutput {
	return o
}

func (o QuickBooksObjectDatasetResponseOutput) ToQuickBooksObjectDatasetResponseOutputWithContext(ctx context.Context) QuickBooksObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o QuickBooksObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o QuickBooksObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o QuickBooksObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o QuickBooksObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o QuickBooksObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o QuickBooksObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The relational table dataset.
type RelationalTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// The relational table name. Type: string (or Expression with resultType string).
	TableName map[string]interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// RelationalTableDatasetInput is an input type that accepts RelationalTableDatasetArgs and RelationalTableDatasetOutput values.
// You can construct a concrete instance of `RelationalTableDatasetInput` via:
//
//          RelationalTableDatasetArgs{...}
type RelationalTableDatasetInput interface {
	pulumi.Input

	ToRelationalTableDatasetOutput() RelationalTableDatasetOutput
	ToRelationalTableDatasetOutputWithContext(context.Context) RelationalTableDatasetOutput
}

// The relational table dataset.
type RelationalTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// The relational table name. Type: string (or Expression with resultType string).
	TableName pulumi.MapInput `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RelationalTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationalTableDataset)(nil)).Elem()
}

func (i RelationalTableDatasetArgs) ToRelationalTableDatasetOutput() RelationalTableDatasetOutput {
	return i.ToRelationalTableDatasetOutputWithContext(context.Background())
}

func (i RelationalTableDatasetArgs) ToRelationalTableDatasetOutputWithContext(ctx context.Context) RelationalTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationalTableDatasetOutput)
}

// The relational table dataset.
type RelationalTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// The relational table name. Type: string (or Expression with resultType string).
	TableName map[string]interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// The relational table dataset.
type RelationalTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (RelationalTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationalTableDatasetResponse)(nil)).Elem()
}

func (o RelationalTableDatasetResponseOutput) ToRelationalTableDatasetResponseOutput() RelationalTableDatasetResponseOutput {
	return o
}

func (o RelationalTableDatasetResponseOutput) ToRelationalTableDatasetResponseOutputWithContext(ctx context.Context) RelationalTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o RelationalTableDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o RelationalTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o RelationalTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o RelationalTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o RelationalTableDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// The relational table name. Type: string (or Expression with resultType string).
func (o RelationalTableDatasetResponseOutput) TableName() pulumi.MapOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) map[string]interface{} { return v.TableName }).(pulumi.MapOutput)
}

// Type of dataset.
func (o RelationalTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Responsys linked service.
type ResponsysLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The client ID associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientId map[string]interface{} `pulumi:"clientId"`
	// The client secret associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Responsys server.
	Endpoint map[string]interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
}

// ResponsysLinkedServiceInput is an input type that accepts ResponsysLinkedServiceArgs and ResponsysLinkedServiceOutput values.
// You can construct a concrete instance of `ResponsysLinkedServiceInput` via:
//
//          ResponsysLinkedServiceArgs{...}
type ResponsysLinkedServiceInput interface {
	pulumi.Input

	ToResponsysLinkedServiceOutput() ResponsysLinkedServiceOutput
	ToResponsysLinkedServiceOutputWithContext(context.Context) ResponsysLinkedServiceOutput
}

// Responsys linked service.
type ResponsysLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The client ID associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientId pulumi.MapInput `pulumi:"clientId"`
	// The client secret associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The endpoint of the Responsys server.
	Endpoint pulumi.MapInput `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints pulumi.MapInput `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification pulumi.MapInput `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification pulumi.MapInput `pulumi:"usePeerVerification"`
}

func (ResponsysLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsysLinkedService)(nil)).Elem()
}

func (i ResponsysLinkedServiceArgs) ToResponsysLinkedServiceOutput() ResponsysLinkedServiceOutput {
	return i.ToResponsysLinkedServiceOutputWithContext(context.Background())
}

func (i ResponsysLinkedServiceArgs) ToResponsysLinkedServiceOutputWithContext(ctx context.Context) ResponsysLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsysLinkedServiceOutput)
}

// Responsys linked service.
type ResponsysLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The client ID associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientId map[string]interface{} `pulumi:"clientId"`
	// The client secret associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Responsys server.
	Endpoint map[string]interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
}

// Responsys linked service.
type ResponsysLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (ResponsysLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsysLinkedServiceResponse)(nil)).Elem()
}

func (o ResponsysLinkedServiceResponseOutput) ToResponsysLinkedServiceResponseOutput() ResponsysLinkedServiceResponseOutput {
	return o
}

func (o ResponsysLinkedServiceResponseOutput) ToResponsysLinkedServiceResponseOutputWithContext(ctx context.Context) ResponsysLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ResponsysLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The client ID associated with the Responsys application. Type: string (or Expression with resultType string).
func (o ResponsysLinkedServiceResponseOutput) ClientId() pulumi.MapOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) map[string]interface{} { return v.ClientId }).(pulumi.MapOutput)
}

// The client secret associated with the Responsys application. Type: string (or Expression with resultType string).
func (o ResponsysLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o ResponsysLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o ResponsysLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o ResponsysLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The endpoint of the Responsys server.
func (o ResponsysLinkedServiceResponseOutput) Endpoint() pulumi.MapOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) map[string]interface{} { return v.Endpoint }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o ResponsysLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o ResponsysLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o ResponsysLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.MapOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) map[string]interface{} { return v.UseEncryptedEndpoints }).(pulumi.MapOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o ResponsysLinkedServiceResponseOutput) UseHostVerification() pulumi.MapOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) map[string]interface{} { return v.UseHostVerification }).(pulumi.MapOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o ResponsysLinkedServiceResponseOutput) UsePeerVerification() pulumi.MapOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) map[string]interface{} { return v.UsePeerVerification }).(pulumi.MapOutput)
}

// Responsys dataset.
type ResponsysObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ResponsysObjectDatasetInput is an input type that accepts ResponsysObjectDatasetArgs and ResponsysObjectDatasetOutput values.
// You can construct a concrete instance of `ResponsysObjectDatasetInput` via:
//
//          ResponsysObjectDatasetArgs{...}
type ResponsysObjectDatasetInput interface {
	pulumi.Input

	ToResponsysObjectDatasetOutput() ResponsysObjectDatasetOutput
	ToResponsysObjectDatasetOutputWithContext(context.Context) ResponsysObjectDatasetOutput
}

// Responsys dataset.
type ResponsysObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ResponsysObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsysObjectDataset)(nil)).Elem()
}

func (i ResponsysObjectDatasetArgs) ToResponsysObjectDatasetOutput() ResponsysObjectDatasetOutput {
	return i.ToResponsysObjectDatasetOutputWithContext(context.Background())
}

func (i ResponsysObjectDatasetArgs) ToResponsysObjectDatasetOutputWithContext(ctx context.Context) ResponsysObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsysObjectDatasetOutput)
}

// Responsys dataset.
type ResponsysObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Responsys dataset.
type ResponsysObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (ResponsysObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsysObjectDatasetResponse)(nil)).Elem()
}

func (o ResponsysObjectDatasetResponseOutput) ToResponsysObjectDatasetResponseOutput() ResponsysObjectDatasetResponseOutput {
	return o
}

func (o ResponsysObjectDatasetResponseOutput) ToResponsysObjectDatasetResponseOutputWithContext(ctx context.Context) ResponsysObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ResponsysObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o ResponsysObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o ResponsysObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o ResponsysObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ResponsysObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o ResponsysObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Execution policy for an activity.
type RetryPolicy struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Count map[string]interface{} `pulumi:"count"`
	// Interval between retries in seconds. Default is 30.
	IntervalInSeconds *int `pulumi:"intervalInSeconds"`
}

// RetryPolicyInput is an input type that accepts RetryPolicyArgs and RetryPolicyOutput values.
// You can construct a concrete instance of `RetryPolicyInput` via:
//
//          RetryPolicyArgs{...}
type RetryPolicyInput interface {
	pulumi.Input

	ToRetryPolicyOutput() RetryPolicyOutput
	ToRetryPolicyOutputWithContext(context.Context) RetryPolicyOutput
}

// Execution policy for an activity.
type RetryPolicyArgs struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Count pulumi.MapInput `pulumi:"count"`
	// Interval between retries in seconds. Default is 30.
	IntervalInSeconds pulumi.IntPtrInput `pulumi:"intervalInSeconds"`
}

func (RetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicy)(nil)).Elem()
}

func (i RetryPolicyArgs) ToRetryPolicyOutput() RetryPolicyOutput {
	return i.ToRetryPolicyOutputWithContext(context.Background())
}

func (i RetryPolicyArgs) ToRetryPolicyOutputWithContext(ctx context.Context) RetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyOutput)
}

func (i RetryPolicyArgs) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return i.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (i RetryPolicyArgs) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyOutput).ToRetryPolicyPtrOutputWithContext(ctx)
}

// RetryPolicyPtrInput is an input type that accepts RetryPolicyArgs, RetryPolicyPtr and RetryPolicyPtrOutput values.
// You can construct a concrete instance of `RetryPolicyPtrInput` via:
//
//          RetryPolicyArgs{...}
//
//  or:
//
//          nil
type RetryPolicyPtrInput interface {
	pulumi.Input

	ToRetryPolicyPtrOutput() RetryPolicyPtrOutput
	ToRetryPolicyPtrOutputWithContext(context.Context) RetryPolicyPtrOutput
}

type retryPolicyPtrType RetryPolicyArgs

func RetryPolicyPtr(v *RetryPolicyArgs) RetryPolicyPtrInput {
	return (*retryPolicyPtrType)(v)
}

func (*retryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicy)(nil)).Elem()
}

func (i *retryPolicyPtrType) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return i.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *retryPolicyPtrType) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyPtrOutput)
}

// Execution policy for an activity.
type RetryPolicyResponse struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Count map[string]interface{} `pulumi:"count"`
	// Interval between retries in seconds. Default is 30.
	IntervalInSeconds *int `pulumi:"intervalInSeconds"`
}

// Execution policy for an activity.
type RetryPolicyResponseOutput struct{ *pulumi.OutputState }

func (RetryPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicyResponse)(nil)).Elem()
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponseOutput() RetryPolicyResponseOutput {
	return o
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponseOutputWithContext(ctx context.Context) RetryPolicyResponseOutput {
	return o
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput {
	return o.ToRetryPolicyResponsePtrOutputWithContext(context.Background())
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponsePtrOutputWithContext(ctx context.Context) RetryPolicyResponsePtrOutput {
	return o.ApplyT(func(v RetryPolicyResponse) *RetryPolicyResponse {
		return &v
	}).(RetryPolicyResponsePtrOutput)
}

// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
func (o RetryPolicyResponseOutput) Count() pulumi.MapOutput {
	return o.ApplyT(func(v RetryPolicyResponse) map[string]interface{} { return v.Count }).(pulumi.MapOutput)
}

// Interval between retries in seconds. Default is 30.
func (o RetryPolicyResponseOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryPolicyResponse) *int { return v.IntervalInSeconds }).(pulumi.IntPtrOutput)
}

type RetryPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (RetryPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicyResponse)(nil)).Elem()
}

func (o RetryPolicyResponsePtrOutput) ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput {
	return o
}

func (o RetryPolicyResponsePtrOutput) ToRetryPolicyResponsePtrOutputWithContext(ctx context.Context) RetryPolicyResponsePtrOutput {
	return o
}

func (o RetryPolicyResponsePtrOutput) Elem() RetryPolicyResponseOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) RetryPolicyResponse { return *v }).(RetryPolicyResponseOutput)
}

// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
func (o RetryPolicyResponsePtrOutput) Count() pulumi.MapOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.MapOutput)
}

// Interval between retries in seconds. Default is 30.
func (o RetryPolicyResponsePtrOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.IntervalInSeconds
	}).(pulumi.IntPtrOutput)
}

// Linked service for Salesforce.
type SalesforceLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl map[string]interface{} `pulumi:"environmentUrl"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password interface{} `pulumi:"password"`
	// The security token is required to remotely access Salesforce instance.
	SecurityToken interface{} `pulumi:"securityToken"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username map[string]interface{} `pulumi:"username"`
}

// SalesforceLinkedServiceInput is an input type that accepts SalesforceLinkedServiceArgs and SalesforceLinkedServiceOutput values.
// You can construct a concrete instance of `SalesforceLinkedServiceInput` via:
//
//          SalesforceLinkedServiceArgs{...}
type SalesforceLinkedServiceInput interface {
	pulumi.Input

	ToSalesforceLinkedServiceOutput() SalesforceLinkedServiceOutput
	ToSalesforceLinkedServiceOutputWithContext(context.Context) SalesforceLinkedServiceOutput
}

// Linked service for Salesforce.
type SalesforceLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl pulumi.MapInput `pulumi:"environmentUrl"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password pulumi.Input `pulumi:"password"`
	// The security token is required to remotely access Salesforce instance.
	SecurityToken pulumi.Input `pulumi:"securityToken"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username pulumi.MapInput `pulumi:"username"`
}

func (SalesforceLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceLinkedService)(nil)).Elem()
}

func (i SalesforceLinkedServiceArgs) ToSalesforceLinkedServiceOutput() SalesforceLinkedServiceOutput {
	return i.ToSalesforceLinkedServiceOutputWithContext(context.Background())
}

func (i SalesforceLinkedServiceArgs) ToSalesforceLinkedServiceOutputWithContext(ctx context.Context) SalesforceLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceLinkedServiceOutput)
}

// Linked service for Salesforce.
type SalesforceLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl map[string]interface{} `pulumi:"environmentUrl"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password interface{} `pulumi:"password"`
	// The security token is required to remotely access Salesforce instance.
	SecurityToken interface{} `pulumi:"securityToken"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username map[string]interface{} `pulumi:"username"`
}

// Linked service for Salesforce.
type SalesforceLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SalesforceLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceLinkedServiceResponse)(nil)).Elem()
}

func (o SalesforceLinkedServiceResponseOutput) ToSalesforceLinkedServiceResponseOutput() SalesforceLinkedServiceResponseOutput {
	return o
}

func (o SalesforceLinkedServiceResponseOutput) ToSalesforceLinkedServiceResponseOutputWithContext(ctx context.Context) SalesforceLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SalesforceLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o SalesforceLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SalesforceLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SalesforceLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
func (o SalesforceLinkedServiceResponseOutput) EnvironmentUrl() pulumi.MapOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) map[string]interface{} { return v.EnvironmentUrl }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o SalesforceLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password for Basic authentication of the Salesforce instance.
func (o SalesforceLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The security token is required to remotely access Salesforce instance.
func (o SalesforceLinkedServiceResponseOutput) SecurityToken() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) interface{} { return v.SecurityToken }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SalesforceLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
func (o SalesforceLinkedServiceResponseOutput) Username() pulumi.MapOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) map[string]interface{} { return v.Username }).(pulumi.MapOutput)
}

// Salesforce Marketing Cloud linked service.
type SalesforceMarketingCloudLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientId map[string]interface{} `pulumi:"clientId"`
	// The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
}

// SalesforceMarketingCloudLinkedServiceInput is an input type that accepts SalesforceMarketingCloudLinkedServiceArgs and SalesforceMarketingCloudLinkedServiceOutput values.
// You can construct a concrete instance of `SalesforceMarketingCloudLinkedServiceInput` via:
//
//          SalesforceMarketingCloudLinkedServiceArgs{...}
type SalesforceMarketingCloudLinkedServiceInput interface {
	pulumi.Input

	ToSalesforceMarketingCloudLinkedServiceOutput() SalesforceMarketingCloudLinkedServiceOutput
	ToSalesforceMarketingCloudLinkedServiceOutputWithContext(context.Context) SalesforceMarketingCloudLinkedServiceOutput
}

// Salesforce Marketing Cloud linked service.
type SalesforceMarketingCloudLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientId pulumi.MapInput `pulumi:"clientId"`
	// The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints pulumi.MapInput `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification pulumi.MapInput `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification pulumi.MapInput `pulumi:"usePeerVerification"`
}

func (SalesforceMarketingCloudLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceMarketingCloudLinkedService)(nil)).Elem()
}

func (i SalesforceMarketingCloudLinkedServiceArgs) ToSalesforceMarketingCloudLinkedServiceOutput() SalesforceMarketingCloudLinkedServiceOutput {
	return i.ToSalesforceMarketingCloudLinkedServiceOutputWithContext(context.Background())
}

func (i SalesforceMarketingCloudLinkedServiceArgs) ToSalesforceMarketingCloudLinkedServiceOutputWithContext(ctx context.Context) SalesforceMarketingCloudLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceMarketingCloudLinkedServiceOutput)
}

// Salesforce Marketing Cloud linked service.
type SalesforceMarketingCloudLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientId map[string]interface{} `pulumi:"clientId"`
	// The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
}

// Salesforce Marketing Cloud linked service.
type SalesforceMarketingCloudLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SalesforceMarketingCloudLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceMarketingCloudLinkedServiceResponse)(nil)).Elem()
}

func (o SalesforceMarketingCloudLinkedServiceResponseOutput) ToSalesforceMarketingCloudLinkedServiceResponseOutput() SalesforceMarketingCloudLinkedServiceResponseOutput {
	return o
}

func (o SalesforceMarketingCloudLinkedServiceResponseOutput) ToSalesforceMarketingCloudLinkedServiceResponseOutputWithContext(ctx context.Context) SalesforceMarketingCloudLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) ClientId() pulumi.MapOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) map[string]interface{} { return v.ClientId }).(pulumi.MapOutput)
}

// The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) map[string]interface{} {
		return v.EncryptedCredential
	}).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.MapOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) map[string]interface{} {
		return v.UseEncryptedEndpoints
	}).(pulumi.MapOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) UseHostVerification() pulumi.MapOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) map[string]interface{} {
		return v.UseHostVerification
	}).(pulumi.MapOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) UsePeerVerification() pulumi.MapOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) map[string]interface{} {
		return v.UsePeerVerification
	}).(pulumi.MapOutput)
}

// Salesforce Marketing Cloud dataset.
type SalesforceMarketingCloudObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SalesforceMarketingCloudObjectDatasetInput is an input type that accepts SalesforceMarketingCloudObjectDatasetArgs and SalesforceMarketingCloudObjectDatasetOutput values.
// You can construct a concrete instance of `SalesforceMarketingCloudObjectDatasetInput` via:
//
//          SalesforceMarketingCloudObjectDatasetArgs{...}
type SalesforceMarketingCloudObjectDatasetInput interface {
	pulumi.Input

	ToSalesforceMarketingCloudObjectDatasetOutput() SalesforceMarketingCloudObjectDatasetOutput
	ToSalesforceMarketingCloudObjectDatasetOutputWithContext(context.Context) SalesforceMarketingCloudObjectDatasetOutput
}

// Salesforce Marketing Cloud dataset.
type SalesforceMarketingCloudObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SalesforceMarketingCloudObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceMarketingCloudObjectDataset)(nil)).Elem()
}

func (i SalesforceMarketingCloudObjectDatasetArgs) ToSalesforceMarketingCloudObjectDatasetOutput() SalesforceMarketingCloudObjectDatasetOutput {
	return i.ToSalesforceMarketingCloudObjectDatasetOutputWithContext(context.Background())
}

func (i SalesforceMarketingCloudObjectDatasetArgs) ToSalesforceMarketingCloudObjectDatasetOutputWithContext(ctx context.Context) SalesforceMarketingCloudObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceMarketingCloudObjectDatasetOutput)
}

// Salesforce Marketing Cloud dataset.
type SalesforceMarketingCloudObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Salesforce Marketing Cloud dataset.
type SalesforceMarketingCloudObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (SalesforceMarketingCloudObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceMarketingCloudObjectDatasetResponse)(nil)).Elem()
}

func (o SalesforceMarketingCloudObjectDatasetResponseOutput) ToSalesforceMarketingCloudObjectDatasetResponseOutput() SalesforceMarketingCloudObjectDatasetResponseOutput {
	return o
}

func (o SalesforceMarketingCloudObjectDatasetResponseOutput) ToSalesforceMarketingCloudObjectDatasetResponseOutputWithContext(ctx context.Context) SalesforceMarketingCloudObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Salesforce object dataset.
type SalesforceObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The Salesforce object API name. Type: string (or Expression with resultType string).
	ObjectApiName map[string]interface{} `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SalesforceObjectDatasetInput is an input type that accepts SalesforceObjectDatasetArgs and SalesforceObjectDatasetOutput values.
// You can construct a concrete instance of `SalesforceObjectDatasetInput` via:
//
//          SalesforceObjectDatasetArgs{...}
type SalesforceObjectDatasetInput interface {
	pulumi.Input

	ToSalesforceObjectDatasetOutput() SalesforceObjectDatasetOutput
	ToSalesforceObjectDatasetOutputWithContext(context.Context) SalesforceObjectDatasetOutput
}

// The Salesforce object dataset.
type SalesforceObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The Salesforce object API name. Type: string (or Expression with resultType string).
	ObjectApiName pulumi.MapInput `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SalesforceObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceObjectDataset)(nil)).Elem()
}

func (i SalesforceObjectDatasetArgs) ToSalesforceObjectDatasetOutput() SalesforceObjectDatasetOutput {
	return i.ToSalesforceObjectDatasetOutputWithContext(context.Background())
}

func (i SalesforceObjectDatasetArgs) ToSalesforceObjectDatasetOutputWithContext(ctx context.Context) SalesforceObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceObjectDatasetOutput)
}

// The Salesforce object dataset.
type SalesforceObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The Salesforce object API name. Type: string (or Expression with resultType string).
	ObjectApiName map[string]interface{} `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// The Salesforce object dataset.
type SalesforceObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (SalesforceObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceObjectDatasetResponse)(nil)).Elem()
}

func (o SalesforceObjectDatasetResponseOutput) ToSalesforceObjectDatasetResponseOutput() SalesforceObjectDatasetResponseOutput {
	return o
}

func (o SalesforceObjectDatasetResponseOutput) ToSalesforceObjectDatasetResponseOutputWithContext(ctx context.Context) SalesforceObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SalesforceObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o SalesforceObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o SalesforceObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The Salesforce object API name. Type: string (or Expression with resultType string).
func (o SalesforceObjectDatasetResponseOutput) ObjectApiName() pulumi.MapOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) map[string]interface{} { return v.ObjectApiName }).(pulumi.MapOutput)
}

// Parameters for dataset.
func (o SalesforceObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SalesforceObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o SalesforceObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// SAP Business Warehouse Linked Service.
type SapBWLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId map[string]interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the SAP BW server.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP BW instance. Type: string (or Expression with resultType string).
	Server map[string]interface{} `pulumi:"server"`
	// System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber map[string]interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username to access the SAP BW server. Type: string (or Expression with resultType string).
	UserName map[string]interface{} `pulumi:"userName"`
}

// SapBWLinkedServiceInput is an input type that accepts SapBWLinkedServiceArgs and SapBWLinkedServiceOutput values.
// You can construct a concrete instance of `SapBWLinkedServiceInput` via:
//
//          SapBWLinkedServiceArgs{...}
type SapBWLinkedServiceInput interface {
	pulumi.Input

	ToSapBWLinkedServiceOutput() SapBWLinkedServiceOutput
	ToSapBWLinkedServiceOutputWithContext(context.Context) SapBWLinkedServiceOutput
}

// SAP Business Warehouse Linked Service.
type SapBWLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId pulumi.MapInput `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to access the SAP BW server.
	Password pulumi.Input `pulumi:"password"`
	// Host name of the SAP BW instance. Type: string (or Expression with resultType string).
	Server pulumi.MapInput `pulumi:"server"`
	// System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber pulumi.MapInput `pulumi:"systemNumber"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username to access the SAP BW server. Type: string (or Expression with resultType string).
	UserName pulumi.MapInput `pulumi:"userName"`
}

func (SapBWLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapBWLinkedService)(nil)).Elem()
}

func (i SapBWLinkedServiceArgs) ToSapBWLinkedServiceOutput() SapBWLinkedServiceOutput {
	return i.ToSapBWLinkedServiceOutputWithContext(context.Background())
}

func (i SapBWLinkedServiceArgs) ToSapBWLinkedServiceOutputWithContext(ctx context.Context) SapBWLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapBWLinkedServiceOutput)
}

// SAP Business Warehouse Linked Service.
type SapBWLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId map[string]interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the SAP BW server.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP BW instance. Type: string (or Expression with resultType string).
	Server map[string]interface{} `pulumi:"server"`
	// System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber map[string]interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username to access the SAP BW server. Type: string (or Expression with resultType string).
	UserName map[string]interface{} `pulumi:"userName"`
}

// SAP Business Warehouse Linked Service.
type SapBWLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SapBWLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapBWLinkedServiceResponse)(nil)).Elem()
}

func (o SapBWLinkedServiceResponseOutput) ToSapBWLinkedServiceResponseOutput() SapBWLinkedServiceResponseOutput {
	return o
}

func (o SapBWLinkedServiceResponseOutput) ToSapBWLinkedServiceResponseOutputWithContext(ctx context.Context) SapBWLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapBWLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
func (o SapBWLinkedServiceResponseOutput) ClientId() pulumi.MapOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) map[string]interface{} { return v.ClientId }).(pulumi.MapOutput)
}

// The integration runtime reference.
func (o SapBWLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SapBWLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SapBWLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o SapBWLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password to access the SAP BW server.
func (o SapBWLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Host name of the SAP BW instance. Type: string (or Expression with resultType string).
func (o SapBWLinkedServiceResponseOutput) Server() pulumi.MapOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) map[string]interface{} { return v.Server }).(pulumi.MapOutput)
}

// System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
func (o SapBWLinkedServiceResponseOutput) SystemNumber() pulumi.MapOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) map[string]interface{} { return v.SystemNumber }).(pulumi.MapOutput)
}

// Type of linked service.
func (o SapBWLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username to access the SAP BW server. Type: string (or Expression with resultType string).
func (o SapBWLinkedServiceResponseOutput) UserName() pulumi.MapOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) map[string]interface{} { return v.UserName }).(pulumi.MapOutput)
}

// Linked service for SAP Cloud for Customer.
type SapCloudForCustomerLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The URL of SAP Cloud for Customer OData API. For example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type: string (or Expression with resultType string).
	Url map[string]interface{} `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username map[string]interface{} `pulumi:"username"`
}

// SapCloudForCustomerLinkedServiceInput is an input type that accepts SapCloudForCustomerLinkedServiceArgs and SapCloudForCustomerLinkedServiceOutput values.
// You can construct a concrete instance of `SapCloudForCustomerLinkedServiceInput` via:
//
//          SapCloudForCustomerLinkedServiceArgs{...}
type SapCloudForCustomerLinkedServiceInput interface {
	pulumi.Input

	ToSapCloudForCustomerLinkedServiceOutput() SapCloudForCustomerLinkedServiceOutput
	ToSapCloudForCustomerLinkedServiceOutputWithContext(context.Context) SapCloudForCustomerLinkedServiceOutput
}

// Linked service for SAP Cloud for Customer.
type SapCloudForCustomerLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The URL of SAP Cloud for Customer OData API. For example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type: string (or Expression with resultType string).
	Url pulumi.MapInput `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username pulumi.MapInput `pulumi:"username"`
}

func (SapCloudForCustomerLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerLinkedService)(nil)).Elem()
}

func (i SapCloudForCustomerLinkedServiceArgs) ToSapCloudForCustomerLinkedServiceOutput() SapCloudForCustomerLinkedServiceOutput {
	return i.ToSapCloudForCustomerLinkedServiceOutputWithContext(context.Background())
}

func (i SapCloudForCustomerLinkedServiceArgs) ToSapCloudForCustomerLinkedServiceOutputWithContext(ctx context.Context) SapCloudForCustomerLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapCloudForCustomerLinkedServiceOutput)
}

// Linked service for SAP Cloud for Customer.
type SapCloudForCustomerLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The URL of SAP Cloud for Customer OData API. For example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type: string (or Expression with resultType string).
	Url map[string]interface{} `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username map[string]interface{} `pulumi:"username"`
}

// Linked service for SAP Cloud for Customer.
type SapCloudForCustomerLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SapCloudForCustomerLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerLinkedServiceResponse)(nil)).Elem()
}

func (o SapCloudForCustomerLinkedServiceResponseOutput) ToSapCloudForCustomerLinkedServiceResponseOutput() SapCloudForCustomerLinkedServiceResponseOutput {
	return o
}

func (o SapCloudForCustomerLinkedServiceResponseOutput) ToSapCloudForCustomerLinkedServiceResponseOutputWithContext(ctx context.Context) SapCloudForCustomerLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapCloudForCustomerLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o SapCloudForCustomerLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SapCloudForCustomerLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
func (o SapCloudForCustomerLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o SapCloudForCustomerLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The password for Basic authentication.
func (o SapCloudForCustomerLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SapCloudForCustomerLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of SAP Cloud for Customer OData API. For example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type: string (or Expression with resultType string).
func (o SapCloudForCustomerLinkedServiceResponseOutput) Url() pulumi.MapOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) map[string]interface{} { return v.Url }).(pulumi.MapOutput)
}

// The username for Basic authentication. Type: string (or Expression with resultType string).
func (o SapCloudForCustomerLinkedServiceResponseOutput) Username() pulumi.MapOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) map[string]interface{} { return v.Username }).(pulumi.MapOutput)
}

// The path of the SAP Cloud for Customer OData entity.
type SapCloudForCustomerResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string).
	Path map[string]interface{} `pulumi:"path"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SapCloudForCustomerResourceDatasetInput is an input type that accepts SapCloudForCustomerResourceDatasetArgs and SapCloudForCustomerResourceDatasetOutput values.
// You can construct a concrete instance of `SapCloudForCustomerResourceDatasetInput` via:
//
//          SapCloudForCustomerResourceDatasetArgs{...}
type SapCloudForCustomerResourceDatasetInput interface {
	pulumi.Input

	ToSapCloudForCustomerResourceDatasetOutput() SapCloudForCustomerResourceDatasetOutput
	ToSapCloudForCustomerResourceDatasetOutputWithContext(context.Context) SapCloudForCustomerResourceDatasetOutput
}

// The path of the SAP Cloud for Customer OData entity.
type SapCloudForCustomerResourceDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string).
	Path pulumi.MapInput `pulumi:"path"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapCloudForCustomerResourceDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerResourceDataset)(nil)).Elem()
}

func (i SapCloudForCustomerResourceDatasetArgs) ToSapCloudForCustomerResourceDatasetOutput() SapCloudForCustomerResourceDatasetOutput {
	return i.ToSapCloudForCustomerResourceDatasetOutputWithContext(context.Background())
}

func (i SapCloudForCustomerResourceDatasetArgs) ToSapCloudForCustomerResourceDatasetOutputWithContext(ctx context.Context) SapCloudForCustomerResourceDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapCloudForCustomerResourceDatasetOutput)
}

// The path of the SAP Cloud for Customer OData entity.
type SapCloudForCustomerResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string).
	Path map[string]interface{} `pulumi:"path"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// The path of the SAP Cloud for Customer OData entity.
type SapCloudForCustomerResourceDatasetResponseOutput struct{ *pulumi.OutputState }

func (SapCloudForCustomerResourceDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerResourceDatasetResponse)(nil)).Elem()
}

func (o SapCloudForCustomerResourceDatasetResponseOutput) ToSapCloudForCustomerResourceDatasetResponseOutput() SapCloudForCustomerResourceDatasetResponseOutput {
	return o
}

func (o SapCloudForCustomerResourceDatasetResponseOutput) ToSapCloudForCustomerResourceDatasetResponseOutputWithContext(ctx context.Context) SapCloudForCustomerResourceDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapCloudForCustomerResourceDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o SapCloudForCustomerResourceDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o SapCloudForCustomerResourceDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SapCloudForCustomerResourceDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string).
func (o SapCloudForCustomerResourceDatasetResponseOutput) Path() pulumi.MapOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) map[string]interface{} { return v.Path }).(pulumi.MapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapCloudForCustomerResourceDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o SapCloudForCustomerResourceDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for SAP ERP Central Component(SAP ECC).
type SapEccLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The URL of SAP ECC OData API. For example, '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or Expression with resultType string).
	Url string `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username *string `pulumi:"username"`
}

// SapEccLinkedServiceInput is an input type that accepts SapEccLinkedServiceArgs and SapEccLinkedServiceOutput values.
// You can construct a concrete instance of `SapEccLinkedServiceInput` via:
//
//          SapEccLinkedServiceArgs{...}
type SapEccLinkedServiceInput interface {
	pulumi.Input

	ToSapEccLinkedServiceOutput() SapEccLinkedServiceOutput
	ToSapEccLinkedServiceOutputWithContext(context.Context) SapEccLinkedServiceOutput
}

// Linked service for SAP ERP Central Component(SAP ECC).
type SapEccLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The URL of SAP ECC OData API. For example, '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or Expression with resultType string).
	Url pulumi.StringInput `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (SapEccLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapEccLinkedService)(nil)).Elem()
}

func (i SapEccLinkedServiceArgs) ToSapEccLinkedServiceOutput() SapEccLinkedServiceOutput {
	return i.ToSapEccLinkedServiceOutputWithContext(context.Background())
}

func (i SapEccLinkedServiceArgs) ToSapEccLinkedServiceOutputWithContext(ctx context.Context) SapEccLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapEccLinkedServiceOutput)
}

// Linked service for SAP ERP Central Component(SAP ECC).
type SapEccLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The URL of SAP ECC OData API. For example, '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or Expression with resultType string).
	Url string `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username *string `pulumi:"username"`
}

// Linked service for SAP ERP Central Component(SAP ECC).
type SapEccLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SapEccLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapEccLinkedServiceResponse)(nil)).Elem()
}

func (o SapEccLinkedServiceResponseOutput) ToSapEccLinkedServiceResponseOutput() SapEccLinkedServiceResponseOutput {
	return o
}

func (o SapEccLinkedServiceResponseOutput) ToSapEccLinkedServiceResponseOutputWithContext(ctx context.Context) SapEccLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapEccLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o SapEccLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SapEccLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
func (o SapEccLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SapEccLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password for Basic authentication.
func (o SapEccLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SapEccLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of SAP ECC OData API. For example, '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or Expression with resultType string).
func (o SapEccLinkedServiceResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) string { return v.Url }).(pulumi.StringOutput)
}

// The username for Basic authentication. Type: string (or Expression with resultType string).
func (o SapEccLinkedServiceResponseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// The path of the SAP ECC OData entity.
type SapEccResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The path of the SAP ECC OData entity. Type: string (or Expression with resultType string).
	Path map[string]interface{} `pulumi:"path"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SapEccResourceDatasetInput is an input type that accepts SapEccResourceDatasetArgs and SapEccResourceDatasetOutput values.
// You can construct a concrete instance of `SapEccResourceDatasetInput` via:
//
//          SapEccResourceDatasetArgs{...}
type SapEccResourceDatasetInput interface {
	pulumi.Input

	ToSapEccResourceDatasetOutput() SapEccResourceDatasetOutput
	ToSapEccResourceDatasetOutputWithContext(context.Context) SapEccResourceDatasetOutput
}

// The path of the SAP ECC OData entity.
type SapEccResourceDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The path of the SAP ECC OData entity. Type: string (or Expression with resultType string).
	Path pulumi.MapInput `pulumi:"path"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapEccResourceDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapEccResourceDataset)(nil)).Elem()
}

func (i SapEccResourceDatasetArgs) ToSapEccResourceDatasetOutput() SapEccResourceDatasetOutput {
	return i.ToSapEccResourceDatasetOutputWithContext(context.Background())
}

func (i SapEccResourceDatasetArgs) ToSapEccResourceDatasetOutputWithContext(ctx context.Context) SapEccResourceDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapEccResourceDatasetOutput)
}

// The path of the SAP ECC OData entity.
type SapEccResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The path of the SAP ECC OData entity. Type: string (or Expression with resultType string).
	Path map[string]interface{} `pulumi:"path"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// The path of the SAP ECC OData entity.
type SapEccResourceDatasetResponseOutput struct{ *pulumi.OutputState }

func (SapEccResourceDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapEccResourceDatasetResponse)(nil)).Elem()
}

func (o SapEccResourceDatasetResponseOutput) ToSapEccResourceDatasetResponseOutput() SapEccResourceDatasetResponseOutput {
	return o
}

func (o SapEccResourceDatasetResponseOutput) ToSapEccResourceDatasetResponseOutputWithContext(ctx context.Context) SapEccResourceDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapEccResourceDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o SapEccResourceDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o SapEccResourceDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SapEccResourceDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The path of the SAP ECC OData entity. Type: string (or Expression with resultType string).
func (o SapEccResourceDatasetResponseOutput) Path() pulumi.MapOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) map[string]interface{} { return v.Path }).(pulumi.MapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapEccResourceDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o SapEccResourceDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// SAP HANA Linked Service.
type SapHanaLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the SAP HANA server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the SAP HANA server.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP HANA server. Type: string (or Expression with resultType string).
	Server map[string]interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username to access the SAP HANA server. Type: string (or Expression with resultType string).
	UserName map[string]interface{} `pulumi:"userName"`
}

// SapHanaLinkedServiceInput is an input type that accepts SapHanaLinkedServiceArgs and SapHanaLinkedServiceOutput values.
// You can construct a concrete instance of `SapHanaLinkedServiceInput` via:
//
//          SapHanaLinkedServiceArgs{...}
type SapHanaLinkedServiceInput interface {
	pulumi.Input

	ToSapHanaLinkedServiceOutput() SapHanaLinkedServiceOutput
	ToSapHanaLinkedServiceOutputWithContext(context.Context) SapHanaLinkedServiceOutput
}

// SAP HANA Linked Service.
type SapHanaLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The authentication type to be used to connect to the SAP HANA server.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to access the SAP HANA server.
	Password pulumi.Input `pulumi:"password"`
	// Host name of the SAP HANA server. Type: string (or Expression with resultType string).
	Server pulumi.MapInput `pulumi:"server"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username to access the SAP HANA server. Type: string (or Expression with resultType string).
	UserName pulumi.MapInput `pulumi:"userName"`
}

func (SapHanaLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapHanaLinkedService)(nil)).Elem()
}

func (i SapHanaLinkedServiceArgs) ToSapHanaLinkedServiceOutput() SapHanaLinkedServiceOutput {
	return i.ToSapHanaLinkedServiceOutputWithContext(context.Background())
}

func (i SapHanaLinkedServiceArgs) ToSapHanaLinkedServiceOutputWithContext(ctx context.Context) SapHanaLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapHanaLinkedServiceOutput)
}

// SAP HANA Linked Service.
type SapHanaLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the SAP HANA server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the SAP HANA server.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP HANA server. Type: string (or Expression with resultType string).
	Server map[string]interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username to access the SAP HANA server. Type: string (or Expression with resultType string).
	UserName map[string]interface{} `pulumi:"userName"`
}

// SAP HANA Linked Service.
type SapHanaLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SapHanaLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapHanaLinkedServiceResponse)(nil)).Elem()
}

func (o SapHanaLinkedServiceResponseOutput) ToSapHanaLinkedServiceResponseOutput() SapHanaLinkedServiceResponseOutput {
	return o
}

func (o SapHanaLinkedServiceResponseOutput) ToSapHanaLinkedServiceResponseOutputWithContext(ctx context.Context) SapHanaLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapHanaLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The authentication type to be used to connect to the SAP HANA server.
func (o SapHanaLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o SapHanaLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SapHanaLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SapHanaLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o SapHanaLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password to access the SAP HANA server.
func (o SapHanaLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Host name of the SAP HANA server. Type: string (or Expression with resultType string).
func (o SapHanaLinkedServiceResponseOutput) Server() pulumi.MapOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) map[string]interface{} { return v.Server }).(pulumi.MapOutput)
}

// Type of linked service.
func (o SapHanaLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username to access the SAP HANA server. Type: string (or Expression with resultType string).
func (o SapHanaLinkedServiceResponseOutput) UserName() pulumi.MapOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) map[string]interface{} { return v.UserName }).(pulumi.MapOutput)
}

// Azure Data Factory secure string definition. The string value will be masked with asterisks '*' during Get or List API calls.
type SecureString struct {
	// Type of the secret.
	Type string `pulumi:"type"`
	// Value of secure string.
	Value string `pulumi:"value"`
}

// SecureStringInput is an input type that accepts SecureStringArgs and SecureStringOutput values.
// You can construct a concrete instance of `SecureStringInput` via:
//
//          SecureStringArgs{...}
type SecureStringInput interface {
	pulumi.Input

	ToSecureStringOutput() SecureStringOutput
	ToSecureStringOutputWithContext(context.Context) SecureStringOutput
}

// Azure Data Factory secure string definition. The string value will be masked with asterisks '*' during Get or List API calls.
type SecureStringArgs struct {
	// Type of the secret.
	Type pulumi.StringInput `pulumi:"type"`
	// Value of secure string.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SecureStringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecureString)(nil)).Elem()
}

func (i SecureStringArgs) ToSecureStringOutput() SecureStringOutput {
	return i.ToSecureStringOutputWithContext(context.Background())
}

func (i SecureStringArgs) ToSecureStringOutputWithContext(ctx context.Context) SecureStringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecureStringOutput)
}

func (i SecureStringArgs) ToSecureStringPtrOutput() SecureStringPtrOutput {
	return i.ToSecureStringPtrOutputWithContext(context.Background())
}

func (i SecureStringArgs) ToSecureStringPtrOutputWithContext(ctx context.Context) SecureStringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecureStringOutput).ToSecureStringPtrOutputWithContext(ctx)
}

// SecureStringPtrInput is an input type that accepts SecureStringArgs, SecureStringPtr and SecureStringPtrOutput values.
// You can construct a concrete instance of `SecureStringPtrInput` via:
//
//          SecureStringArgs{...}
//
//  or:
//
//          nil
type SecureStringPtrInput interface {
	pulumi.Input

	ToSecureStringPtrOutput() SecureStringPtrOutput
	ToSecureStringPtrOutputWithContext(context.Context) SecureStringPtrOutput
}

type secureStringPtrType SecureStringArgs

func SecureStringPtr(v *SecureStringArgs) SecureStringPtrInput {
	return (*secureStringPtrType)(v)
}

func (*secureStringPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecureString)(nil)).Elem()
}

func (i *secureStringPtrType) ToSecureStringPtrOutput() SecureStringPtrOutput {
	return i.ToSecureStringPtrOutputWithContext(context.Background())
}

func (i *secureStringPtrType) ToSecureStringPtrOutputWithContext(ctx context.Context) SecureStringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecureStringPtrOutput)
}

// Azure Data Factory secure string definition. The string value will be masked with asterisks '*' during Get or List API calls.
type SecureStringResponse struct {
	// Type of the secret.
	Type string `pulumi:"type"`
	// Value of secure string.
	Value string `pulumi:"value"`
}

// Azure Data Factory secure string definition. The string value will be masked with asterisks '*' during Get or List API calls.
type SecureStringResponseOutput struct{ *pulumi.OutputState }

func (SecureStringResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecureStringResponse)(nil)).Elem()
}

func (o SecureStringResponseOutput) ToSecureStringResponseOutput() SecureStringResponseOutput {
	return o
}

func (o SecureStringResponseOutput) ToSecureStringResponseOutputWithContext(ctx context.Context) SecureStringResponseOutput {
	return o
}

func (o SecureStringResponseOutput) ToSecureStringResponsePtrOutput() SecureStringResponsePtrOutput {
	return o.ToSecureStringResponsePtrOutputWithContext(context.Background())
}

func (o SecureStringResponseOutput) ToSecureStringResponsePtrOutputWithContext(ctx context.Context) SecureStringResponsePtrOutput {
	return o.ApplyT(func(v SecureStringResponse) *SecureStringResponse {
		return &v
	}).(SecureStringResponsePtrOutput)
}

// Type of the secret.
func (o SecureStringResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SecureStringResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Value of secure string.
func (o SecureStringResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SecureStringResponse) string { return v.Value }).(pulumi.StringOutput)
}

type SecureStringResponsePtrOutput struct{ *pulumi.OutputState }

func (SecureStringResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecureStringResponse)(nil)).Elem()
}

func (o SecureStringResponsePtrOutput) ToSecureStringResponsePtrOutput() SecureStringResponsePtrOutput {
	return o
}

func (o SecureStringResponsePtrOutput) ToSecureStringResponsePtrOutputWithContext(ctx context.Context) SecureStringResponsePtrOutput {
	return o
}

func (o SecureStringResponsePtrOutput) Elem() SecureStringResponseOutput {
	return o.ApplyT(func(v *SecureStringResponse) SecureStringResponse { return *v }).(SecureStringResponseOutput)
}

// Type of the secret.
func (o SecureStringResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecureStringResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Value of secure string.
func (o SecureStringResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecureStringResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

// Self-hosted integration runtime.
type SelfHostedIntegrationRuntime struct {
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// The base definition of a secret type.
	LinkedInfo interface{} `pulumi:"linkedInfo"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// SelfHostedIntegrationRuntimeInput is an input type that accepts SelfHostedIntegrationRuntimeArgs and SelfHostedIntegrationRuntimeOutput values.
// You can construct a concrete instance of `SelfHostedIntegrationRuntimeInput` via:
//
//          SelfHostedIntegrationRuntimeArgs{...}
type SelfHostedIntegrationRuntimeInput interface {
	pulumi.Input

	ToSelfHostedIntegrationRuntimeOutput() SelfHostedIntegrationRuntimeOutput
	ToSelfHostedIntegrationRuntimeOutputWithContext(context.Context) SelfHostedIntegrationRuntimeOutput
}

// Self-hosted integration runtime.
type SelfHostedIntegrationRuntimeArgs struct {
	// Integration runtime description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The base definition of a secret type.
	LinkedInfo pulumi.Input `pulumi:"linkedInfo"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SelfHostedIntegrationRuntimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfHostedIntegrationRuntime)(nil)).Elem()
}

func (i SelfHostedIntegrationRuntimeArgs) ToSelfHostedIntegrationRuntimeOutput() SelfHostedIntegrationRuntimeOutput {
	return i.ToSelfHostedIntegrationRuntimeOutputWithContext(context.Background())
}

func (i SelfHostedIntegrationRuntimeArgs) ToSelfHostedIntegrationRuntimeOutputWithContext(ctx context.Context) SelfHostedIntegrationRuntimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfHostedIntegrationRuntimeOutput)
}

// Self-hosted integration runtime.
type SelfHostedIntegrationRuntimeResponse struct {
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// The base definition of a secret type.
	LinkedInfo interface{} `pulumi:"linkedInfo"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// Self-hosted integration runtime.
type SelfHostedIntegrationRuntimeResponseOutput struct{ *pulumi.OutputState }

func (SelfHostedIntegrationRuntimeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfHostedIntegrationRuntimeResponse)(nil)).Elem()
}

func (o SelfHostedIntegrationRuntimeResponseOutput) ToSelfHostedIntegrationRuntimeResponseOutput() SelfHostedIntegrationRuntimeResponseOutput {
	return o
}

func (o SelfHostedIntegrationRuntimeResponseOutput) ToSelfHostedIntegrationRuntimeResponseOutputWithContext(ctx context.Context) SelfHostedIntegrationRuntimeResponseOutput {
	return o
}

// Integration runtime description.
func (o SelfHostedIntegrationRuntimeResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The base definition of a secret type.
func (o SelfHostedIntegrationRuntimeResponseOutput) LinkedInfo() pulumi.AnyOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeResponse) interface{} { return v.LinkedInfo }).(pulumi.AnyOutput)
}

// Type of integration runtime.
func (o SelfHostedIntegrationRuntimeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// ServiceNow server linked service.
type ServiceNowLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id for OAuth2 authentication.
	ClientId map[string]interface{} `pulumi:"clientId"`
	// The client secret for OAuth2 authentication.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the ServiceNow server. (i.e. <instance>.service-now.com)
	Endpoint map[string]interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name for Basic and OAuth2 authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
	// The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication.
	Username map[string]interface{} `pulumi:"username"`
}

// ServiceNowLinkedServiceInput is an input type that accepts ServiceNowLinkedServiceArgs and ServiceNowLinkedServiceOutput values.
// You can construct a concrete instance of `ServiceNowLinkedServiceInput` via:
//
//          ServiceNowLinkedServiceArgs{...}
type ServiceNowLinkedServiceInput interface {
	pulumi.Input

	ToServiceNowLinkedServiceOutput() ServiceNowLinkedServiceOutput
	ToServiceNowLinkedServiceOutputWithContext(context.Context) ServiceNowLinkedServiceOutput
}

// ServiceNow server linked service.
type ServiceNowLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The client id for OAuth2 authentication.
	ClientId pulumi.MapInput `pulumi:"clientId"`
	// The client secret for OAuth2 authentication.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The endpoint of the ServiceNow server. (i.e. <instance>.service-now.com)
	Endpoint pulumi.MapInput `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name for Basic and OAuth2 authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.MapInput `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.MapInput `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.MapInput `pulumi:"usePeerVerification"`
	// The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication.
	Username pulumi.MapInput `pulumi:"username"`
}

func (ServiceNowLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowLinkedService)(nil)).Elem()
}

func (i ServiceNowLinkedServiceArgs) ToServiceNowLinkedServiceOutput() ServiceNowLinkedServiceOutput {
	return i.ToServiceNowLinkedServiceOutputWithContext(context.Background())
}

func (i ServiceNowLinkedServiceArgs) ToServiceNowLinkedServiceOutputWithContext(ctx context.Context) ServiceNowLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNowLinkedServiceOutput)
}

// ServiceNow server linked service.
type ServiceNowLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id for OAuth2 authentication.
	ClientId map[string]interface{} `pulumi:"clientId"`
	// The client secret for OAuth2 authentication.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the ServiceNow server. (i.e. <instance>.service-now.com)
	Endpoint map[string]interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name for Basic and OAuth2 authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
	// The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication.
	Username map[string]interface{} `pulumi:"username"`
}

// ServiceNow server linked service.
type ServiceNowLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (ServiceNowLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowLinkedServiceResponse)(nil)).Elem()
}

func (o ServiceNowLinkedServiceResponseOutput) ToServiceNowLinkedServiceResponseOutput() ServiceNowLinkedServiceResponseOutput {
	return o
}

func (o ServiceNowLinkedServiceResponseOutput) ToServiceNowLinkedServiceResponseOutputWithContext(ctx context.Context) ServiceNowLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ServiceNowLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The authentication type to use.
func (o ServiceNowLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The client id for OAuth2 authentication.
func (o ServiceNowLinkedServiceResponseOutput) ClientId() pulumi.MapOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) map[string]interface{} { return v.ClientId }).(pulumi.MapOutput)
}

// The client secret for OAuth2 authentication.
func (o ServiceNowLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o ServiceNowLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o ServiceNowLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o ServiceNowLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The endpoint of the ServiceNow server. (i.e. <instance>.service-now.com)
func (o ServiceNowLinkedServiceResponseOutput) Endpoint() pulumi.MapOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) map[string]interface{} { return v.Endpoint }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o ServiceNowLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name for Basic and OAuth2 authentication.
func (o ServiceNowLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o ServiceNowLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o ServiceNowLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.MapOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) map[string]interface{} { return v.UseEncryptedEndpoints }).(pulumi.MapOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o ServiceNowLinkedServiceResponseOutput) UseHostVerification() pulumi.MapOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) map[string]interface{} { return v.UseHostVerification }).(pulumi.MapOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o ServiceNowLinkedServiceResponseOutput) UsePeerVerification() pulumi.MapOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) map[string]interface{} { return v.UsePeerVerification }).(pulumi.MapOutput)
}

// The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication.
func (o ServiceNowLinkedServiceResponseOutput) Username() pulumi.MapOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) map[string]interface{} { return v.Username }).(pulumi.MapOutput)
}

// ServiceNow server dataset.
type ServiceNowObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ServiceNowObjectDatasetInput is an input type that accepts ServiceNowObjectDatasetArgs and ServiceNowObjectDatasetOutput values.
// You can construct a concrete instance of `ServiceNowObjectDatasetInput` via:
//
//          ServiceNowObjectDatasetArgs{...}
type ServiceNowObjectDatasetInput interface {
	pulumi.Input

	ToServiceNowObjectDatasetOutput() ServiceNowObjectDatasetOutput
	ToServiceNowObjectDatasetOutputWithContext(context.Context) ServiceNowObjectDatasetOutput
}

// ServiceNow server dataset.
type ServiceNowObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceNowObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowObjectDataset)(nil)).Elem()
}

func (i ServiceNowObjectDatasetArgs) ToServiceNowObjectDatasetOutput() ServiceNowObjectDatasetOutput {
	return i.ToServiceNowObjectDatasetOutputWithContext(context.Background())
}

func (i ServiceNowObjectDatasetArgs) ToServiceNowObjectDatasetOutputWithContext(ctx context.Context) ServiceNowObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNowObjectDatasetOutput)
}

// ServiceNow server dataset.
type ServiceNowObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ServiceNow server dataset.
type ServiceNowObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (ServiceNowObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowObjectDatasetResponse)(nil)).Elem()
}

func (o ServiceNowObjectDatasetResponseOutput) ToServiceNowObjectDatasetResponseOutput() ServiceNowObjectDatasetResponseOutput {
	return o
}

func (o ServiceNowObjectDatasetResponseOutput) ToServiceNowObjectDatasetResponseOutputWithContext(ctx context.Context) ServiceNowObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ServiceNowObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o ServiceNowObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o ServiceNowObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o ServiceNowObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ServiceNowObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o ServiceNowObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A linked service for an SSH File Transfer Protocol (SFTP) server.
type SftpServerLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The SFTP server host name. Type: string (or Expression with resultType string).
	Host map[string]interface{} `pulumi:"host"`
	// The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string).
	HostKeyFingerprint map[string]interface{} `pulumi:"hostKeyFingerprint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password to decrypt the SSH private key if the SSH private key is encrypted.
	PassPhrase interface{} `pulumi:"passPhrase"`
	// Password to logon the SFTP server for Basic authentication.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
	Port map[string]interface{} `pulumi:"port"`
	// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
	PrivateKeyContent interface{} `pulumi:"privateKeyContent"`
	// The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
	PrivateKeyPath map[string]interface{} `pulumi:"privateKeyPath"`
	// If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
	SkipHostKeyValidation map[string]interface{} `pulumi:"skipHostKeyValidation"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
	UserName map[string]interface{} `pulumi:"userName"`
}

// SftpServerLinkedServiceInput is an input type that accepts SftpServerLinkedServiceArgs and SftpServerLinkedServiceOutput values.
// You can construct a concrete instance of `SftpServerLinkedServiceInput` via:
//
//          SftpServerLinkedServiceArgs{...}
type SftpServerLinkedServiceInput interface {
	pulumi.Input

	ToSftpServerLinkedServiceOutput() SftpServerLinkedServiceOutput
	ToSftpServerLinkedServiceOutputWithContext(context.Context) SftpServerLinkedServiceOutput
}

// A linked service for an SSH File Transfer Protocol (SFTP) server.
type SftpServerLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The SFTP server host name. Type: string (or Expression with resultType string).
	Host pulumi.MapInput `pulumi:"host"`
	// The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string).
	HostKeyFingerprint pulumi.MapInput `pulumi:"hostKeyFingerprint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password to decrypt the SSH private key if the SSH private key is encrypted.
	PassPhrase pulumi.Input `pulumi:"passPhrase"`
	// Password to logon the SFTP server for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
	Port pulumi.MapInput `pulumi:"port"`
	// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
	PrivateKeyContent pulumi.Input `pulumi:"privateKeyContent"`
	// The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
	PrivateKeyPath pulumi.MapInput `pulumi:"privateKeyPath"`
	// If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
	SkipHostKeyValidation pulumi.MapInput `pulumi:"skipHostKeyValidation"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
	UserName pulumi.MapInput `pulumi:"userName"`
}

func (SftpServerLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpServerLinkedService)(nil)).Elem()
}

func (i SftpServerLinkedServiceArgs) ToSftpServerLinkedServiceOutput() SftpServerLinkedServiceOutput {
	return i.ToSftpServerLinkedServiceOutputWithContext(context.Background())
}

func (i SftpServerLinkedServiceArgs) ToSftpServerLinkedServiceOutputWithContext(ctx context.Context) SftpServerLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SftpServerLinkedServiceOutput)
}

// A linked service for an SSH File Transfer Protocol (SFTP) server.
type SftpServerLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The SFTP server host name. Type: string (or Expression with resultType string).
	Host map[string]interface{} `pulumi:"host"`
	// The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string).
	HostKeyFingerprint map[string]interface{} `pulumi:"hostKeyFingerprint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password to decrypt the SSH private key if the SSH private key is encrypted.
	PassPhrase interface{} `pulumi:"passPhrase"`
	// Password to logon the SFTP server for Basic authentication.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
	Port map[string]interface{} `pulumi:"port"`
	// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
	PrivateKeyContent interface{} `pulumi:"privateKeyContent"`
	// The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
	PrivateKeyPath map[string]interface{} `pulumi:"privateKeyPath"`
	// If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
	SkipHostKeyValidation map[string]interface{} `pulumi:"skipHostKeyValidation"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
	UserName map[string]interface{} `pulumi:"userName"`
}

// A linked service for an SSH File Transfer Protocol (SFTP) server.
type SftpServerLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SftpServerLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpServerLinkedServiceResponse)(nil)).Elem()
}

func (o SftpServerLinkedServiceResponseOutput) ToSftpServerLinkedServiceResponseOutput() SftpServerLinkedServiceResponseOutput {
	return o
}

func (o SftpServerLinkedServiceResponseOutput) ToSftpServerLinkedServiceResponseOutputWithContext(ctx context.Context) SftpServerLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SftpServerLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The authentication type to be used to connect to the FTP server.
func (o SftpServerLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o SftpServerLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SftpServerLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SftpServerLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The SFTP server host name. Type: string (or Expression with resultType string).
func (o SftpServerLinkedServiceResponseOutput) Host() pulumi.MapOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) map[string]interface{} { return v.Host }).(pulumi.MapOutput)
}

// The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string).
func (o SftpServerLinkedServiceResponseOutput) HostKeyFingerprint() pulumi.MapOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) map[string]interface{} { return v.HostKeyFingerprint }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o SftpServerLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password to decrypt the SSH private key if the SSH private key is encrypted.
func (o SftpServerLinkedServiceResponseOutput) PassPhrase() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) interface{} { return v.PassPhrase }).(pulumi.AnyOutput)
}

// Password to logon the SFTP server for Basic authentication.
func (o SftpServerLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SftpServerLinkedServiceResponseOutput) Port() pulumi.MapOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) map[string]interface{} { return v.Port }).(pulumi.MapOutput)
}

// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
func (o SftpServerLinkedServiceResponseOutput) PrivateKeyContent() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) interface{} { return v.PrivateKeyContent }).(pulumi.AnyOutput)
}

// The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
func (o SftpServerLinkedServiceResponseOutput) PrivateKeyPath() pulumi.MapOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) map[string]interface{} { return v.PrivateKeyPath }).(pulumi.MapOutput)
}

// If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
func (o SftpServerLinkedServiceResponseOutput) SkipHostKeyValidation() pulumi.MapOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) map[string]interface{} { return v.SkipHostKeyValidation }).(pulumi.MapOutput)
}

// Type of linked service.
func (o SftpServerLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
func (o SftpServerLinkedServiceResponseOutput) UserName() pulumi.MapOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) map[string]interface{} { return v.UserName }).(pulumi.MapOutput)
}

// Shopify Service linked service.
type ShopifyLinkedService struct {
	// The API access token that can be used to access Shopify’s data. The token won't expire if it is offline mode.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Shopify server. (i.e. mystore.myshopify.com)
	Host map[string]interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
}

// ShopifyLinkedServiceInput is an input type that accepts ShopifyLinkedServiceArgs and ShopifyLinkedServiceOutput values.
// You can construct a concrete instance of `ShopifyLinkedServiceInput` via:
//
//          ShopifyLinkedServiceArgs{...}
type ShopifyLinkedServiceInput interface {
	pulumi.Input

	ToShopifyLinkedServiceOutput() ShopifyLinkedServiceOutput
	ToShopifyLinkedServiceOutputWithContext(context.Context) ShopifyLinkedServiceOutput
}

// Shopify Service linked service.
type ShopifyLinkedServiceArgs struct {
	// The API access token that can be used to access Shopify’s data. The token won't expire if it is offline mode.
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The endpoint of the Shopify server. (i.e. mystore.myshopify.com)
	Host pulumi.MapInput `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.MapInput `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.MapInput `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.MapInput `pulumi:"usePeerVerification"`
}

func (ShopifyLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShopifyLinkedService)(nil)).Elem()
}

func (i ShopifyLinkedServiceArgs) ToShopifyLinkedServiceOutput() ShopifyLinkedServiceOutput {
	return i.ToShopifyLinkedServiceOutputWithContext(context.Background())
}

func (i ShopifyLinkedServiceArgs) ToShopifyLinkedServiceOutputWithContext(ctx context.Context) ShopifyLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShopifyLinkedServiceOutput)
}

// Shopify Service linked service.
type ShopifyLinkedServiceResponse struct {
	// The API access token that can be used to access Shopify’s data. The token won't expire if it is offline mode.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Shopify server. (i.e. mystore.myshopify.com)
	Host map[string]interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
}

// Shopify Service linked service.
type ShopifyLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (ShopifyLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShopifyLinkedServiceResponse)(nil)).Elem()
}

func (o ShopifyLinkedServiceResponseOutput) ToShopifyLinkedServiceResponseOutput() ShopifyLinkedServiceResponseOutput {
	return o
}

func (o ShopifyLinkedServiceResponseOutput) ToShopifyLinkedServiceResponseOutputWithContext(ctx context.Context) ShopifyLinkedServiceResponseOutput {
	return o
}

// The API access token that can be used to access Shopify’s data. The token won't expire if it is offline mode.
func (o ShopifyLinkedServiceResponseOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the Dataset.
func (o ShopifyLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o ShopifyLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o ShopifyLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o ShopifyLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The endpoint of the Shopify server. (i.e. mystore.myshopify.com)
func (o ShopifyLinkedServiceResponseOutput) Host() pulumi.MapOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) map[string]interface{} { return v.Host }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o ShopifyLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o ShopifyLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o ShopifyLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.MapOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) map[string]interface{} { return v.UseEncryptedEndpoints }).(pulumi.MapOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o ShopifyLinkedServiceResponseOutput) UseHostVerification() pulumi.MapOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) map[string]interface{} { return v.UseHostVerification }).(pulumi.MapOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o ShopifyLinkedServiceResponseOutput) UsePeerVerification() pulumi.MapOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) map[string]interface{} { return v.UsePeerVerification }).(pulumi.MapOutput)
}

// Shopify Service dataset.
type ShopifyObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ShopifyObjectDatasetInput is an input type that accepts ShopifyObjectDatasetArgs and ShopifyObjectDatasetOutput values.
// You can construct a concrete instance of `ShopifyObjectDatasetInput` via:
//
//          ShopifyObjectDatasetArgs{...}
type ShopifyObjectDatasetInput interface {
	pulumi.Input

	ToShopifyObjectDatasetOutput() ShopifyObjectDatasetOutput
	ToShopifyObjectDatasetOutputWithContext(context.Context) ShopifyObjectDatasetOutput
}

// Shopify Service dataset.
type ShopifyObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ShopifyObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShopifyObjectDataset)(nil)).Elem()
}

func (i ShopifyObjectDatasetArgs) ToShopifyObjectDatasetOutput() ShopifyObjectDatasetOutput {
	return i.ToShopifyObjectDatasetOutputWithContext(context.Background())
}

func (i ShopifyObjectDatasetArgs) ToShopifyObjectDatasetOutputWithContext(ctx context.Context) ShopifyObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShopifyObjectDatasetOutput)
}

// Shopify Service dataset.
type ShopifyObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Shopify Service dataset.
type ShopifyObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (ShopifyObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShopifyObjectDatasetResponse)(nil)).Elem()
}

func (o ShopifyObjectDatasetResponseOutput) ToShopifyObjectDatasetResponseOutput() ShopifyObjectDatasetResponseOutput {
	return o
}

func (o ShopifyObjectDatasetResponseOutput) ToShopifyObjectDatasetResponseOutputWithContext(ctx context.Context) ShopifyObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ShopifyObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o ShopifyObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o ShopifyObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o ShopifyObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ShopifyObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o ShopifyObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Spark Server linked service.
type SparkLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch map[string]interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert map[string]interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication method used to access the Spark server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl map[string]interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// IP address or host name of the Spark server
	Host map[string]interface{} `pulumi:"host"`
	// The partial URL corresponding to the Spark server.
	HttpPath map[string]interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password interface{} `pulumi:"password"`
	// The TCP port that the Spark server uses to listen for client connections.
	Port map[string]interface{} `pulumi:"port"`
	// The type of Spark server.
	ServerType *string `pulumi:"serverType"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol *string `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath map[string]interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore map[string]interface{} `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Spark Server.
	Username map[string]interface{} `pulumi:"username"`
}

// SparkLinkedServiceInput is an input type that accepts SparkLinkedServiceArgs and SparkLinkedServiceOutput values.
// You can construct a concrete instance of `SparkLinkedServiceInput` via:
//
//          SparkLinkedServiceArgs{...}
type SparkLinkedServiceInput interface {
	pulumi.Input

	ToSparkLinkedServiceOutput() SparkLinkedServiceOutput
	ToSparkLinkedServiceOutputWithContext(context.Context) SparkLinkedServiceOutput
}

// Spark Server linked service.
type SparkLinkedServiceArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.MapInput `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.MapInput `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The authentication method used to access the Spark server.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.MapInput `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// IP address or host name of the Spark server
	Host pulumi.MapInput `pulumi:"host"`
	// The partial URL corresponding to the Spark server.
	HttpPath pulumi.MapInput `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Spark server uses to listen for client connections.
	Port pulumi.MapInput `pulumi:"port"`
	// The type of Spark server.
	ServerType pulumi.StringPtrInput `pulumi:"serverType"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol pulumi.StringPtrInput `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.MapInput `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.MapInput `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Spark Server.
	Username pulumi.MapInput `pulumi:"username"`
}

func (SparkLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkLinkedService)(nil)).Elem()
}

func (i SparkLinkedServiceArgs) ToSparkLinkedServiceOutput() SparkLinkedServiceOutput {
	return i.ToSparkLinkedServiceOutputWithContext(context.Background())
}

func (i SparkLinkedServiceArgs) ToSparkLinkedServiceOutputWithContext(ctx context.Context) SparkLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkLinkedServiceOutput)
}

// Spark Server linked service.
type SparkLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch map[string]interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert map[string]interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The authentication method used to access the Spark server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl map[string]interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// IP address or host name of the Spark server
	Host map[string]interface{} `pulumi:"host"`
	// The partial URL corresponding to the Spark server.
	HttpPath map[string]interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password interface{} `pulumi:"password"`
	// The TCP port that the Spark server uses to listen for client connections.
	Port map[string]interface{} `pulumi:"port"`
	// The type of Spark server.
	ServerType *string `pulumi:"serverType"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol *string `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath map[string]interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore map[string]interface{} `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Spark Server.
	Username map[string]interface{} `pulumi:"username"`
}

// Spark Server linked service.
type SparkLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SparkLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkLinkedServiceResponse)(nil)).Elem()
}

func (o SparkLinkedServiceResponseOutput) ToSparkLinkedServiceResponseOutput() SparkLinkedServiceResponseOutput {
	return o
}

func (o SparkLinkedServiceResponseOutput) ToSparkLinkedServiceResponseOutputWithContext(ctx context.Context) SparkLinkedServiceResponseOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o SparkLinkedServiceResponseOutput) AllowHostNameCNMismatch() pulumi.MapOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) map[string]interface{} { return v.AllowHostNameCNMismatch }).(pulumi.MapOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o SparkLinkedServiceResponseOutput) AllowSelfSignedServerCert() pulumi.MapOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) map[string]interface{} { return v.AllowSelfSignedServerCert }).(pulumi.MapOutput)
}

// List of tags that can be used for describing the Dataset.
func (o SparkLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The authentication method used to access the Spark server.
func (o SparkLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o SparkLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SparkLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o SparkLinkedServiceResponseOutput) EnableSsl() pulumi.MapOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) map[string]interface{} { return v.EnableSsl }).(pulumi.MapOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SparkLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// IP address or host name of the Spark server
func (o SparkLinkedServiceResponseOutput) Host() pulumi.MapOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) map[string]interface{} { return v.Host }).(pulumi.MapOutput)
}

// The partial URL corresponding to the Spark server.
func (o SparkLinkedServiceResponseOutput) HttpPath() pulumi.MapOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) map[string]interface{} { return v.HttpPath }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o SparkLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name that you provided in the Username field
func (o SparkLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Spark server uses to listen for client connections.
func (o SparkLinkedServiceResponseOutput) Port() pulumi.MapOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) map[string]interface{} { return v.Port }).(pulumi.MapOutput)
}

// The type of Spark server.
func (o SparkLinkedServiceResponseOutput) ServerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) *string { return v.ServerType }).(pulumi.StringPtrOutput)
}

// The transport protocol to use in the Thrift layer.
func (o SparkLinkedServiceResponseOutput) ThriftTransportProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) *string { return v.ThriftTransportProtocol }).(pulumi.StringPtrOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o SparkLinkedServiceResponseOutput) TrustedCertPath() pulumi.MapOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) map[string]interface{} { return v.TrustedCertPath }).(pulumi.MapOutput)
}

// Type of linked service.
func (o SparkLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o SparkLinkedServiceResponseOutput) UseSystemTrustStore() pulumi.MapOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) map[string]interface{} { return v.UseSystemTrustStore }).(pulumi.MapOutput)
}

// The user name that you use to access Spark Server.
func (o SparkLinkedServiceResponseOutput) Username() pulumi.MapOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) map[string]interface{} { return v.Username }).(pulumi.MapOutput)
}

// Spark Server dataset.
type SparkObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SparkObjectDatasetInput is an input type that accepts SparkObjectDatasetArgs and SparkObjectDatasetOutput values.
// You can construct a concrete instance of `SparkObjectDatasetInput` via:
//
//          SparkObjectDatasetArgs{...}
type SparkObjectDatasetInput interface {
	pulumi.Input

	ToSparkObjectDatasetOutput() SparkObjectDatasetOutput
	ToSparkObjectDatasetOutputWithContext(context.Context) SparkObjectDatasetOutput
}

// Spark Server dataset.
type SparkObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SparkObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkObjectDataset)(nil)).Elem()
}

func (i SparkObjectDatasetArgs) ToSparkObjectDatasetOutput() SparkObjectDatasetOutput {
	return i.ToSparkObjectDatasetOutputWithContext(context.Background())
}

func (i SparkObjectDatasetArgs) ToSparkObjectDatasetOutputWithContext(ctx context.Context) SparkObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkObjectDatasetOutput)
}

// Spark Server dataset.
type SparkObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Spark Server dataset.
type SparkObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (SparkObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkObjectDatasetResponse)(nil)).Elem()
}

func (o SparkObjectDatasetResponseOutput) ToSparkObjectDatasetResponseOutput() SparkObjectDatasetResponseOutput {
	return o
}

func (o SparkObjectDatasetResponseOutput) ToSparkObjectDatasetResponseOutputWithContext(ctx context.Context) SparkObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SparkObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o SparkObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o SparkObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SparkObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SparkObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o SparkObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// SQL Server linked service.
type SqlServerLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The on-premises Windows authentication password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
	UserName map[string]interface{} `pulumi:"userName"`
}

// SqlServerLinkedServiceInput is an input type that accepts SqlServerLinkedServiceArgs and SqlServerLinkedServiceOutput values.
// You can construct a concrete instance of `SqlServerLinkedServiceInput` via:
//
//          SqlServerLinkedServiceArgs{...}
type SqlServerLinkedServiceInput interface {
	pulumi.Input

	ToSqlServerLinkedServiceOutput() SqlServerLinkedServiceOutput
	ToSqlServerLinkedServiceOutputWithContext(context.Context) SqlServerLinkedServiceOutput
}

// SQL Server linked service.
type SqlServerLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.MapInput `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The on-premises Windows authentication password.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
	UserName pulumi.MapInput `pulumi:"userName"`
}

func (SqlServerLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerLinkedService)(nil)).Elem()
}

func (i SqlServerLinkedServiceArgs) ToSqlServerLinkedServiceOutput() SqlServerLinkedServiceOutput {
	return i.ToSqlServerLinkedServiceOutputWithContext(context.Background())
}

func (i SqlServerLinkedServiceArgs) ToSqlServerLinkedServiceOutputWithContext(ctx context.Context) SqlServerLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerLinkedServiceOutput)
}

// SQL Server linked service.
type SqlServerLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The on-premises Windows authentication password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
	UserName map[string]interface{} `pulumi:"userName"`
}

// SQL Server linked service.
type SqlServerLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SqlServerLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerLinkedServiceResponse)(nil)).Elem()
}

func (o SqlServerLinkedServiceResponseOutput) ToSqlServerLinkedServiceResponseOutput() SqlServerLinkedServiceResponseOutput {
	return o
}

func (o SqlServerLinkedServiceResponseOutput) ToSqlServerLinkedServiceResponseOutputWithContext(ctx context.Context) SqlServerLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SqlServerLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o SqlServerLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o SqlServerLinkedServiceResponseOutput) ConnectionString() pulumi.MapOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) map[string]interface{} { return v.ConnectionString }).(pulumi.MapOutput)
}

// Linked service description.
func (o SqlServerLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SqlServerLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o SqlServerLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The on-premises Windows authentication password.
func (o SqlServerLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o SqlServerLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
func (o SqlServerLinkedServiceResponseOutput) UserName() pulumi.MapOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) map[string]interface{} { return v.UserName }).(pulumi.MapOutput)
}

// The on-premises SQL Server dataset.
type SqlServerTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
	TableName map[string]interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SqlServerTableDatasetInput is an input type that accepts SqlServerTableDatasetArgs and SqlServerTableDatasetOutput values.
// You can construct a concrete instance of `SqlServerTableDatasetInput` via:
//
//          SqlServerTableDatasetArgs{...}
type SqlServerTableDatasetInput interface {
	pulumi.Input

	ToSqlServerTableDatasetOutput() SqlServerTableDatasetOutput
	ToSqlServerTableDatasetOutputWithContext(context.Context) SqlServerTableDatasetOutput
}

// The on-premises SQL Server dataset.
type SqlServerTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
	TableName pulumi.MapInput `pulumi:"tableName"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SqlServerTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerTableDataset)(nil)).Elem()
}

func (i SqlServerTableDatasetArgs) ToSqlServerTableDatasetOutput() SqlServerTableDatasetOutput {
	return i.ToSqlServerTableDatasetOutputWithContext(context.Background())
}

func (i SqlServerTableDatasetArgs) ToSqlServerTableDatasetOutputWithContext(ctx context.Context) SqlServerTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerTableDatasetOutput)
}

// The on-premises SQL Server dataset.
type SqlServerTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
	TableName map[string]interface{} `pulumi:"tableName"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// The on-premises SQL Server dataset.
type SqlServerTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (SqlServerTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerTableDatasetResponse)(nil)).Elem()
}

func (o SqlServerTableDatasetResponseOutput) ToSqlServerTableDatasetResponseOutput() SqlServerTableDatasetResponseOutput {
	return o
}

func (o SqlServerTableDatasetResponseOutput) ToSqlServerTableDatasetResponseOutputWithContext(ctx context.Context) SqlServerTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SqlServerTableDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o SqlServerTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o SqlServerTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SqlServerTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SqlServerTableDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
func (o SqlServerTableDatasetResponseOutput) TableName() pulumi.MapOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) map[string]interface{} { return v.TableName }).(pulumi.MapOutput)
}

// Type of dataset.
func (o SqlServerTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Square Service linked service.
type SquareLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The client ID associated with your Square application.
	ClientId map[string]interface{} `pulumi:"clientId"`
	// The client secret associated with your Square application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The URL of the Square instance. (i.e. mystore.mysquare.com)
	Host map[string]interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2500)
	RedirectUri map[string]interface{} `pulumi:"redirectUri"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
}

// SquareLinkedServiceInput is an input type that accepts SquareLinkedServiceArgs and SquareLinkedServiceOutput values.
// You can construct a concrete instance of `SquareLinkedServiceInput` via:
//
//          SquareLinkedServiceArgs{...}
type SquareLinkedServiceInput interface {
	pulumi.Input

	ToSquareLinkedServiceOutput() SquareLinkedServiceOutput
	ToSquareLinkedServiceOutputWithContext(context.Context) SquareLinkedServiceOutput
}

// Square Service linked service.
type SquareLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The client ID associated with your Square application.
	ClientId pulumi.MapInput `pulumi:"clientId"`
	// The client secret associated with your Square application.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The URL of the Square instance. (i.e. mystore.mysquare.com)
	Host pulumi.MapInput `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2500)
	RedirectUri pulumi.MapInput `pulumi:"redirectUri"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.MapInput `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.MapInput `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.MapInput `pulumi:"usePeerVerification"`
}

func (SquareLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SquareLinkedService)(nil)).Elem()
}

func (i SquareLinkedServiceArgs) ToSquareLinkedServiceOutput() SquareLinkedServiceOutput {
	return i.ToSquareLinkedServiceOutputWithContext(context.Background())
}

func (i SquareLinkedServiceArgs) ToSquareLinkedServiceOutputWithContext(ctx context.Context) SquareLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SquareLinkedServiceOutput)
}

// Square Service linked service.
type SquareLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The client ID associated with your Square application.
	ClientId map[string]interface{} `pulumi:"clientId"`
	// The client secret associated with your Square application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The URL of the Square instance. (i.e. mystore.mysquare.com)
	Host map[string]interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2500)
	RedirectUri map[string]interface{} `pulumi:"redirectUri"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
}

// Square Service linked service.
type SquareLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SquareLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SquareLinkedServiceResponse)(nil)).Elem()
}

func (o SquareLinkedServiceResponseOutput) ToSquareLinkedServiceResponseOutput() SquareLinkedServiceResponseOutput {
	return o
}

func (o SquareLinkedServiceResponseOutput) ToSquareLinkedServiceResponseOutputWithContext(ctx context.Context) SquareLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SquareLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The client ID associated with your Square application.
func (o SquareLinkedServiceResponseOutput) ClientId() pulumi.MapOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) map[string]interface{} { return v.ClientId }).(pulumi.MapOutput)
}

// The client secret associated with your Square application.
func (o SquareLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SquareLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SquareLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SquareLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The URL of the Square instance. (i.e. mystore.mysquare.com)
func (o SquareLinkedServiceResponseOutput) Host() pulumi.MapOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) map[string]interface{} { return v.Host }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o SquareLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2500)
func (o SquareLinkedServiceResponseOutput) RedirectUri() pulumi.MapOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) map[string]interface{} { return v.RedirectUri }).(pulumi.MapOutput)
}

// Type of linked service.
func (o SquareLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o SquareLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.MapOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) map[string]interface{} { return v.UseEncryptedEndpoints }).(pulumi.MapOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o SquareLinkedServiceResponseOutput) UseHostVerification() pulumi.MapOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) map[string]interface{} { return v.UseHostVerification }).(pulumi.MapOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o SquareLinkedServiceResponseOutput) UsePeerVerification() pulumi.MapOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) map[string]interface{} { return v.UsePeerVerification }).(pulumi.MapOutput)
}

// Square Service dataset.
type SquareObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// SquareObjectDatasetInput is an input type that accepts SquareObjectDatasetArgs and SquareObjectDatasetOutput values.
// You can construct a concrete instance of `SquareObjectDatasetInput` via:
//
//          SquareObjectDatasetArgs{...}
type SquareObjectDatasetInput interface {
	pulumi.Input

	ToSquareObjectDatasetOutput() SquareObjectDatasetOutput
	ToSquareObjectDatasetOutputWithContext(context.Context) SquareObjectDatasetOutput
}

// Square Service dataset.
type SquareObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SquareObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SquareObjectDataset)(nil)).Elem()
}

func (i SquareObjectDatasetArgs) ToSquareObjectDatasetOutput() SquareObjectDatasetOutput {
	return i.ToSquareObjectDatasetOutputWithContext(context.Background())
}

func (i SquareObjectDatasetArgs) ToSquareObjectDatasetOutputWithContext(ctx context.Context) SquareObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SquareObjectDatasetOutput)
}

// Square Service dataset.
type SquareObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Square Service dataset.
type SquareObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (SquareObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SquareObjectDatasetResponse)(nil)).Elem()
}

func (o SquareObjectDatasetResponseOutput) ToSquareObjectDatasetResponseOutput() SquareObjectDatasetResponseOutput {
	return o
}

func (o SquareObjectDatasetResponseOutput) ToSquareObjectDatasetResponseOutputWithContext(ctx context.Context) SquareObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SquareObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o SquareObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o SquareObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SquareObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SquareObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o SquareObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Sybase data source.
type SybaseLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database map[string]interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Schema name for connection. Type: string (or Expression with resultType string).
	Schema map[string]interface{} `pulumi:"schema"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server map[string]interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username map[string]interface{} `pulumi:"username"`
}

// SybaseLinkedServiceInput is an input type that accepts SybaseLinkedServiceArgs and SybaseLinkedServiceOutput values.
// You can construct a concrete instance of `SybaseLinkedServiceInput` via:
//
//          SybaseLinkedServiceArgs{...}
type SybaseLinkedServiceInput interface {
	pulumi.Input

	ToSybaseLinkedServiceOutput() SybaseLinkedServiceOutput
	ToSybaseLinkedServiceOutputWithContext(context.Context) SybaseLinkedServiceOutput
}

// Linked service for Sybase data source.
type SybaseLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database pulumi.MapInput `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for authentication.
	Password pulumi.Input `pulumi:"password"`
	// Schema name for connection. Type: string (or Expression with resultType string).
	Schema pulumi.MapInput `pulumi:"schema"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server pulumi.MapInput `pulumi:"server"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username pulumi.MapInput `pulumi:"username"`
}

func (SybaseLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SybaseLinkedService)(nil)).Elem()
}

func (i SybaseLinkedServiceArgs) ToSybaseLinkedServiceOutput() SybaseLinkedServiceOutput {
	return i.ToSybaseLinkedServiceOutputWithContext(context.Background())
}

func (i SybaseLinkedServiceArgs) ToSybaseLinkedServiceOutputWithContext(ctx context.Context) SybaseLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SybaseLinkedServiceOutput)
}

// Linked service for Sybase data source.
type SybaseLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database map[string]interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Schema name for connection. Type: string (or Expression with resultType string).
	Schema map[string]interface{} `pulumi:"schema"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server map[string]interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username map[string]interface{} `pulumi:"username"`
}

// Linked service for Sybase data source.
type SybaseLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SybaseLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SybaseLinkedServiceResponse)(nil)).Elem()
}

func (o SybaseLinkedServiceResponseOutput) ToSybaseLinkedServiceResponseOutput() SybaseLinkedServiceResponseOutput {
	return o
}

func (o SybaseLinkedServiceResponseOutput) ToSybaseLinkedServiceResponseOutputWithContext(ctx context.Context) SybaseLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SybaseLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// AuthenticationType to be used for connection.
func (o SybaseLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o SybaseLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Database name for connection. Type: string (or Expression with resultType string).
func (o SybaseLinkedServiceResponseOutput) Database() pulumi.MapOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) map[string]interface{} { return v.Database }).(pulumi.MapOutput)
}

// Linked service description.
func (o SybaseLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o SybaseLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o SybaseLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for authentication.
func (o SybaseLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Schema name for connection. Type: string (or Expression with resultType string).
func (o SybaseLinkedServiceResponseOutput) Schema() pulumi.MapOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) map[string]interface{} { return v.Schema }).(pulumi.MapOutput)
}

// Server name for connection. Type: string (or Expression with resultType string).
func (o SybaseLinkedServiceResponseOutput) Server() pulumi.MapOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) map[string]interface{} { return v.Server }).(pulumi.MapOutput)
}

// Type of linked service.
func (o SybaseLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. Type: string (or Expression with resultType string).
func (o SybaseLinkedServiceResponseOutput) Username() pulumi.MapOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) map[string]interface{} { return v.Username }).(pulumi.MapOutput)
}

// Linked service for Teradata data source.
type TeradataLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server map[string]interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username map[string]interface{} `pulumi:"username"`
}

// TeradataLinkedServiceInput is an input type that accepts TeradataLinkedServiceArgs and TeradataLinkedServiceOutput values.
// You can construct a concrete instance of `TeradataLinkedServiceInput` via:
//
//          TeradataLinkedServiceArgs{...}
type TeradataLinkedServiceInput interface {
	pulumi.Input

	ToTeradataLinkedServiceOutput() TeradataLinkedServiceOutput
	ToTeradataLinkedServiceOutputWithContext(context.Context) TeradataLinkedServiceOutput
}

// Linked service for Teradata data source.
type TeradataLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for authentication.
	Password pulumi.Input `pulumi:"password"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server pulumi.MapInput `pulumi:"server"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username pulumi.MapInput `pulumi:"username"`
}

func (TeradataLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeradataLinkedService)(nil)).Elem()
}

func (i TeradataLinkedServiceArgs) ToTeradataLinkedServiceOutput() TeradataLinkedServiceOutput {
	return i.ToTeradataLinkedServiceOutputWithContext(context.Background())
}

func (i TeradataLinkedServiceArgs) ToTeradataLinkedServiceOutputWithContext(ctx context.Context) TeradataLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeradataLinkedServiceOutput)
}

// Linked service for Teradata data source.
type TeradataLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server map[string]interface{} `pulumi:"server"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username map[string]interface{} `pulumi:"username"`
}

// Linked service for Teradata data source.
type TeradataLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (TeradataLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeradataLinkedServiceResponse)(nil)).Elem()
}

func (o TeradataLinkedServiceResponseOutput) ToTeradataLinkedServiceResponseOutput() TeradataLinkedServiceResponseOutput {
	return o
}

func (o TeradataLinkedServiceResponseOutput) ToTeradataLinkedServiceResponseOutputWithContext(ctx context.Context) TeradataLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o TeradataLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// AuthenticationType to be used for connection.
func (o TeradataLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o TeradataLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o TeradataLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o TeradataLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o TeradataLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for authentication.
func (o TeradataLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Server name for connection. Type: string (or Expression with resultType string).
func (o TeradataLinkedServiceResponseOutput) Server() pulumi.MapOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) map[string]interface{} { return v.Server }).(pulumi.MapOutput)
}

// Type of linked service.
func (o TeradataLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. Type: string (or Expression with resultType string).
func (o TeradataLinkedServiceResponseOutput) Username() pulumi.MapOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) map[string]interface{} { return v.Username }).(pulumi.MapOutput)
}

// The data stored in text format.
type TextFormat struct {
	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter map[string]interface{} `pulumi:"columnDelimiter"`
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer map[string]interface{} `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName map[string]interface{} `pulumi:"encodingName"`
	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar map[string]interface{} `pulumi:"escapeChar"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader map[string]interface{} `pulumi:"firstRowAsHeader"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue map[string]interface{} `pulumi:"nullValue"`
	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar map[string]interface{} `pulumi:"quoteChar"`
	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter map[string]interface{} `pulumi:"rowDelimiter"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer map[string]interface{} `pulumi:"serializer"`
	// The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
	SkipLineCount map[string]interface{} `pulumi:"skipLineCount"`
	// Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull map[string]interface{} `pulumi:"treatEmptyAsNull"`
	// Type of dataset storage format.
	Type string `pulumi:"type"`
}

// TextFormatInput is an input type that accepts TextFormatArgs and TextFormatOutput values.
// You can construct a concrete instance of `TextFormatInput` via:
//
//          TextFormatArgs{...}
type TextFormatInput interface {
	pulumi.Input

	ToTextFormatOutput() TextFormatOutput
	ToTextFormatOutputWithContext(context.Context) TextFormatOutput
}

// The data stored in text format.
type TextFormatArgs struct {
	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter pulumi.MapInput `pulumi:"columnDelimiter"`
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer pulumi.MapInput `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName pulumi.MapInput `pulumi:"encodingName"`
	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar pulumi.MapInput `pulumi:"escapeChar"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader pulumi.MapInput `pulumi:"firstRowAsHeader"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue pulumi.MapInput `pulumi:"nullValue"`
	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar pulumi.MapInput `pulumi:"quoteChar"`
	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter pulumi.MapInput `pulumi:"rowDelimiter"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer pulumi.MapInput `pulumi:"serializer"`
	// The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
	SkipLineCount pulumi.MapInput `pulumi:"skipLineCount"`
	// Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull pulumi.MapInput `pulumi:"treatEmptyAsNull"`
	// Type of dataset storage format.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TextFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TextFormat)(nil)).Elem()
}

func (i TextFormatArgs) ToTextFormatOutput() TextFormatOutput {
	return i.ToTextFormatOutputWithContext(context.Background())
}

func (i TextFormatArgs) ToTextFormatOutputWithContext(ctx context.Context) TextFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextFormatOutput)
}

// The data stored in text format.
type TextFormatResponse struct {
	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter map[string]interface{} `pulumi:"columnDelimiter"`
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer map[string]interface{} `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName map[string]interface{} `pulumi:"encodingName"`
	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar map[string]interface{} `pulumi:"escapeChar"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader map[string]interface{} `pulumi:"firstRowAsHeader"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue map[string]interface{} `pulumi:"nullValue"`
	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar map[string]interface{} `pulumi:"quoteChar"`
	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter map[string]interface{} `pulumi:"rowDelimiter"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer map[string]interface{} `pulumi:"serializer"`
	// The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
	SkipLineCount map[string]interface{} `pulumi:"skipLineCount"`
	// Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull map[string]interface{} `pulumi:"treatEmptyAsNull"`
	// Type of dataset storage format.
	Type string `pulumi:"type"`
}

// The data stored in text format.
type TextFormatResponseOutput struct{ *pulumi.OutputState }

func (TextFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextFormatResponse)(nil)).Elem()
}

func (o TextFormatResponseOutput) ToTextFormatResponseOutput() TextFormatResponseOutput {
	return o
}

func (o TextFormatResponseOutput) ToTextFormatResponseOutputWithContext(ctx context.Context) TextFormatResponseOutput {
	return o
}

// The column delimiter. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) ColumnDelimiter() pulumi.MapOutput {
	return o.ApplyT(func(v TextFormatResponse) map[string]interface{} { return v.ColumnDelimiter }).(pulumi.MapOutput)
}

// Deserializer. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) Deserializer() pulumi.MapOutput {
	return o.ApplyT(func(v TextFormatResponse) map[string]interface{} { return v.Deserializer }).(pulumi.MapOutput)
}

// The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) EncodingName() pulumi.MapOutput {
	return o.ApplyT(func(v TextFormatResponse) map[string]interface{} { return v.EncodingName }).(pulumi.MapOutput)
}

// The escape character. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) EscapeChar() pulumi.MapOutput {
	return o.ApplyT(func(v TextFormatResponse) map[string]interface{} { return v.EscapeChar }).(pulumi.MapOutput)
}

// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o TextFormatResponseOutput) FirstRowAsHeader() pulumi.MapOutput {
	return o.ApplyT(func(v TextFormatResponse) map[string]interface{} { return v.FirstRowAsHeader }).(pulumi.MapOutput)
}

// The null value string. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) NullValue() pulumi.MapOutput {
	return o.ApplyT(func(v TextFormatResponse) map[string]interface{} { return v.NullValue }).(pulumi.MapOutput)
}

// The quote character. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) QuoteChar() pulumi.MapOutput {
	return o.ApplyT(func(v TextFormatResponse) map[string]interface{} { return v.QuoteChar }).(pulumi.MapOutput)
}

// The row delimiter. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) RowDelimiter() pulumi.MapOutput {
	return o.ApplyT(func(v TextFormatResponse) map[string]interface{} { return v.RowDelimiter }).(pulumi.MapOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) Serializer() pulumi.MapOutput {
	return o.ApplyT(func(v TextFormatResponse) map[string]interface{} { return v.Serializer }).(pulumi.MapOutput)
}

// The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
func (o TextFormatResponseOutput) SkipLineCount() pulumi.MapOutput {
	return o.ApplyT(func(v TextFormatResponse) map[string]interface{} { return v.SkipLineCount }).(pulumi.MapOutput)
}

// Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o TextFormatResponseOutput) TreatEmptyAsNull() pulumi.MapOutput {
	return o.ApplyT(func(v TextFormatResponse) map[string]interface{} { return v.TreatEmptyAsNull }).(pulumi.MapOutput)
}

// Type of dataset storage format.
func (o TextFormatResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TextFormatResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Pipeline that needs to be triggered with the given parameters.
type TriggerPipelineReference struct {
	// Pipeline parameters.
	Parameters map[string]map[string]interface{} `pulumi:"parameters"`
	// Pipeline reference.
	PipelineReference *PipelineReference `pulumi:"pipelineReference"`
}

// TriggerPipelineReferenceInput is an input type that accepts TriggerPipelineReferenceArgs and TriggerPipelineReferenceOutput values.
// You can construct a concrete instance of `TriggerPipelineReferenceInput` via:
//
//          TriggerPipelineReferenceArgs{...}
type TriggerPipelineReferenceInput interface {
	pulumi.Input

	ToTriggerPipelineReferenceOutput() TriggerPipelineReferenceOutput
	ToTriggerPipelineReferenceOutputWithContext(context.Context) TriggerPipelineReferenceOutput
}

// Pipeline that needs to be triggered with the given parameters.
type TriggerPipelineReferenceArgs struct {
	// Pipeline parameters.
	Parameters pulumi.MapMapInput `pulumi:"parameters"`
	// Pipeline reference.
	PipelineReference PipelineReferencePtrInput `pulumi:"pipelineReference"`
}

func (TriggerPipelineReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPipelineReference)(nil)).Elem()
}

func (i TriggerPipelineReferenceArgs) ToTriggerPipelineReferenceOutput() TriggerPipelineReferenceOutput {
	return i.ToTriggerPipelineReferenceOutputWithContext(context.Background())
}

func (i TriggerPipelineReferenceArgs) ToTriggerPipelineReferenceOutputWithContext(ctx context.Context) TriggerPipelineReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPipelineReferenceOutput)
}

// TriggerPipelineReferenceArrayInput is an input type that accepts TriggerPipelineReferenceArray and TriggerPipelineReferenceArrayOutput values.
// You can construct a concrete instance of `TriggerPipelineReferenceArrayInput` via:
//
//          TriggerPipelineReferenceArray{ TriggerPipelineReferenceArgs{...} }
type TriggerPipelineReferenceArrayInput interface {
	pulumi.Input

	ToTriggerPipelineReferenceArrayOutput() TriggerPipelineReferenceArrayOutput
	ToTriggerPipelineReferenceArrayOutputWithContext(context.Context) TriggerPipelineReferenceArrayOutput
}

type TriggerPipelineReferenceArray []TriggerPipelineReferenceInput

func (TriggerPipelineReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerPipelineReference)(nil)).Elem()
}

func (i TriggerPipelineReferenceArray) ToTriggerPipelineReferenceArrayOutput() TriggerPipelineReferenceArrayOutput {
	return i.ToTriggerPipelineReferenceArrayOutputWithContext(context.Background())
}

func (i TriggerPipelineReferenceArray) ToTriggerPipelineReferenceArrayOutputWithContext(ctx context.Context) TriggerPipelineReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPipelineReferenceArrayOutput)
}

// Pipeline that needs to be triggered with the given parameters.
type TriggerPipelineReferenceResponse struct {
	// Pipeline parameters.
	Parameters map[string]map[string]interface{} `pulumi:"parameters"`
	// Pipeline reference.
	PipelineReference *PipelineReferenceResponse `pulumi:"pipelineReference"`
}

// Pipeline that needs to be triggered with the given parameters.
type TriggerPipelineReferenceResponseOutput struct{ *pulumi.OutputState }

func (TriggerPipelineReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPipelineReferenceResponse)(nil)).Elem()
}

func (o TriggerPipelineReferenceResponseOutput) ToTriggerPipelineReferenceResponseOutput() TriggerPipelineReferenceResponseOutput {
	return o
}

func (o TriggerPipelineReferenceResponseOutput) ToTriggerPipelineReferenceResponseOutputWithContext(ctx context.Context) TriggerPipelineReferenceResponseOutput {
	return o
}

// Pipeline parameters.
func (o TriggerPipelineReferenceResponseOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v TriggerPipelineReferenceResponse) map[string]map[string]interface{} { return v.Parameters }).(pulumi.MapMapOutput)
}

// Pipeline reference.
func (o TriggerPipelineReferenceResponseOutput) PipelineReference() PipelineReferenceResponsePtrOutput {
	return o.ApplyT(func(v TriggerPipelineReferenceResponse) *PipelineReferenceResponse { return v.PipelineReference }).(PipelineReferenceResponsePtrOutput)
}

type TriggerPipelineReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (TriggerPipelineReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerPipelineReferenceResponse)(nil)).Elem()
}

func (o TriggerPipelineReferenceResponseArrayOutput) ToTriggerPipelineReferenceResponseArrayOutput() TriggerPipelineReferenceResponseArrayOutput {
	return o
}

func (o TriggerPipelineReferenceResponseArrayOutput) ToTriggerPipelineReferenceResponseArrayOutputWithContext(ctx context.Context) TriggerPipelineReferenceResponseArrayOutput {
	return o
}

func (o TriggerPipelineReferenceResponseArrayOutput) Index(i pulumi.IntInput) TriggerPipelineReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerPipelineReferenceResponse {
		return vs[0].([]TriggerPipelineReferenceResponse)[vs[1].(int)]
	}).(TriggerPipelineReferenceResponseOutput)
}

// Trigger that schedules pipeline runs for all fixed time interval windows from a start time without gaps and also supports backfill scenarios (when start time is in the past).
type TumblingWindowTrigger struct {
	// Specifies how long the trigger waits past due time before triggering new run. It doesn't alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Delay map[string]interface{} `pulumi:"delay"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	EndTime *string `pulumi:"endTime"`
	// The frequency of the time windows.
	Frequency string `pulumi:"frequency"`
	// The interval of the time windows. The minimum interval allowed is 15 Minutes.
	Interval int `pulumi:"interval"`
	// The max number of parallel time windows (ready for execution) for which a new run is triggered.
	MaxConcurrency int `pulumi:"maxConcurrency"`
	// Pipeline for which runs are created when an event is fired for trigger window that is ready.
	Pipeline TriggerPipelineReference `pulumi:"pipeline"`
	// Retry policy that will be applied for failed pipeline runs.
	RetryPolicy *RetryPolicy `pulumi:"retryPolicy"`
	// The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	StartTime string `pulumi:"startTime"`
	// Trigger type.
	Type string `pulumi:"type"`
}

// TumblingWindowTriggerInput is an input type that accepts TumblingWindowTriggerArgs and TumblingWindowTriggerOutput values.
// You can construct a concrete instance of `TumblingWindowTriggerInput` via:
//
//          TumblingWindowTriggerArgs{...}
type TumblingWindowTriggerInput interface {
	pulumi.Input

	ToTumblingWindowTriggerOutput() TumblingWindowTriggerOutput
	ToTumblingWindowTriggerOutputWithContext(context.Context) TumblingWindowTriggerOutput
}

// Trigger that schedules pipeline runs for all fixed time interval windows from a start time without gaps and also supports backfill scenarios (when start time is in the past).
type TumblingWindowTriggerArgs struct {
	// Specifies how long the trigger waits past due time before triggering new run. It doesn't alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Delay pulumi.MapInput `pulumi:"delay"`
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// The frequency of the time windows.
	Frequency pulumi.StringInput `pulumi:"frequency"`
	// The interval of the time windows. The minimum interval allowed is 15 Minutes.
	Interval pulumi.IntInput `pulumi:"interval"`
	// The max number of parallel time windows (ready for execution) for which a new run is triggered.
	MaxConcurrency pulumi.IntInput `pulumi:"maxConcurrency"`
	// Pipeline for which runs are created when an event is fired for trigger window that is ready.
	Pipeline TriggerPipelineReferenceInput `pulumi:"pipeline"`
	// Retry policy that will be applied for failed pipeline runs.
	RetryPolicy RetryPolicyPtrInput `pulumi:"retryPolicy"`
	// The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// Trigger type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TumblingWindowTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TumblingWindowTrigger)(nil)).Elem()
}

func (i TumblingWindowTriggerArgs) ToTumblingWindowTriggerOutput() TumblingWindowTriggerOutput {
	return i.ToTumblingWindowTriggerOutputWithContext(context.Background())
}

func (i TumblingWindowTriggerArgs) ToTumblingWindowTriggerOutputWithContext(ctx context.Context) TumblingWindowTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TumblingWindowTriggerOutput)
}

// Trigger that schedules pipeline runs for all fixed time interval windows from a start time without gaps and also supports backfill scenarios (when start time is in the past).
type TumblingWindowTriggerResponse struct {
	// Specifies how long the trigger waits past due time before triggering new run. It doesn't alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Delay map[string]interface{} `pulumi:"delay"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	EndTime *string `pulumi:"endTime"`
	// The frequency of the time windows.
	Frequency string `pulumi:"frequency"`
	// The interval of the time windows. The minimum interval allowed is 15 Minutes.
	Interval int `pulumi:"interval"`
	// The max number of parallel time windows (ready for execution) for which a new run is triggered.
	MaxConcurrency int `pulumi:"maxConcurrency"`
	// Pipeline for which runs are created when an event is fired for trigger window that is ready.
	Pipeline TriggerPipelineReferenceResponse `pulumi:"pipeline"`
	// Retry policy that will be applied for failed pipeline runs.
	RetryPolicy *RetryPolicyResponse `pulumi:"retryPolicy"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	StartTime string `pulumi:"startTime"`
	// Trigger type.
	Type string `pulumi:"type"`
}

// Trigger that schedules pipeline runs for all fixed time interval windows from a start time without gaps and also supports backfill scenarios (when start time is in the past).
type TumblingWindowTriggerResponseOutput struct{ *pulumi.OutputState }

func (TumblingWindowTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TumblingWindowTriggerResponse)(nil)).Elem()
}

func (o TumblingWindowTriggerResponseOutput) ToTumblingWindowTriggerResponseOutput() TumblingWindowTriggerResponseOutput {
	return o
}

func (o TumblingWindowTriggerResponseOutput) ToTumblingWindowTriggerResponseOutputWithContext(ctx context.Context) TumblingWindowTriggerResponseOutput {
	return o
}

// Specifies how long the trigger waits past due time before triggering new run. It doesn't alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o TumblingWindowTriggerResponseOutput) Delay() pulumi.MapOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) map[string]interface{} { return v.Delay }).(pulumi.MapOutput)
}

// Trigger description.
func (o TumblingWindowTriggerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
func (o TumblingWindowTriggerResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The frequency of the time windows.
func (o TumblingWindowTriggerResponseOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) string { return v.Frequency }).(pulumi.StringOutput)
}

// The interval of the time windows. The minimum interval allowed is 15 Minutes.
func (o TumblingWindowTriggerResponseOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) int { return v.Interval }).(pulumi.IntOutput)
}

// The max number of parallel time windows (ready for execution) for which a new run is triggered.
func (o TumblingWindowTriggerResponseOutput) MaxConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) int { return v.MaxConcurrency }).(pulumi.IntOutput)
}

// Pipeline for which runs are created when an event is fired for trigger window that is ready.
func (o TumblingWindowTriggerResponseOutput) Pipeline() TriggerPipelineReferenceResponseOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) TriggerPipelineReferenceResponse { return v.Pipeline }).(TriggerPipelineReferenceResponseOutput)
}

// Retry policy that will be applied for failed pipeline runs.
func (o TumblingWindowTriggerResponseOutput) RetryPolicy() RetryPolicyResponsePtrOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) *RetryPolicyResponse { return v.RetryPolicy }).(RetryPolicyResponsePtrOutput)
}

// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
func (o TumblingWindowTriggerResponseOutput) RuntimeState() pulumi.StringOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) string { return v.RuntimeState }).(pulumi.StringOutput)
}

// The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
func (o TumblingWindowTriggerResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Trigger type.
func (o TumblingWindowTriggerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Vertica linked service.
type VerticaLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// VerticaLinkedServiceInput is an input type that accepts VerticaLinkedServiceArgs and VerticaLinkedServiceOutput values.
// You can construct a concrete instance of `VerticaLinkedServiceInput` via:
//
//          VerticaLinkedServiceArgs{...}
type VerticaLinkedServiceInput interface {
	pulumi.Input

	ToVerticaLinkedServiceOutput() VerticaLinkedServiceOutput
	ToVerticaLinkedServiceOutputWithContext(context.Context) VerticaLinkedServiceOutput
}

// Vertica linked service.
type VerticaLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.MapInput `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (VerticaLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticaLinkedService)(nil)).Elem()
}

func (i VerticaLinkedServiceArgs) ToVerticaLinkedServiceOutput() VerticaLinkedServiceOutput {
	return i.ToVerticaLinkedServiceOutputWithContext(context.Background())
}

func (i VerticaLinkedServiceArgs) ToVerticaLinkedServiceOutputWithContext(ctx context.Context) VerticaLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerticaLinkedServiceOutput)
}

// Vertica linked service.
type VerticaLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString map[string]interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// Vertica linked service.
type VerticaLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (VerticaLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticaLinkedServiceResponse)(nil)).Elem()
}

func (o VerticaLinkedServiceResponseOutput) ToVerticaLinkedServiceResponseOutput() VerticaLinkedServiceResponseOutput {
	return o
}

func (o VerticaLinkedServiceResponseOutput) ToVerticaLinkedServiceResponseOutputWithContext(ctx context.Context) VerticaLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o VerticaLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v VerticaLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o VerticaLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v VerticaLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o VerticaLinkedServiceResponseOutput) ConnectionString() pulumi.MapOutput {
	return o.ApplyT(func(v VerticaLinkedServiceResponse) map[string]interface{} { return v.ConnectionString }).(pulumi.MapOutput)
}

// Linked service description.
func (o VerticaLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VerticaLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o VerticaLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v VerticaLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o VerticaLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v VerticaLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o VerticaLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VerticaLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Vertica dataset.
type VerticaTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// VerticaTableDatasetInput is an input type that accepts VerticaTableDatasetArgs and VerticaTableDatasetOutput values.
// You can construct a concrete instance of `VerticaTableDatasetInput` via:
//
//          VerticaTableDatasetArgs{...}
type VerticaTableDatasetInput interface {
	pulumi.Input

	ToVerticaTableDatasetOutput() VerticaTableDatasetOutput
	ToVerticaTableDatasetOutputWithContext(context.Context) VerticaTableDatasetOutput
}

// Vertica dataset.
type VerticaTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (VerticaTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticaTableDataset)(nil)).Elem()
}

func (i VerticaTableDatasetArgs) ToVerticaTableDatasetOutput() VerticaTableDatasetOutput {
	return i.ToVerticaTableDatasetOutputWithContext(context.Background())
}

func (i VerticaTableDatasetArgs) ToVerticaTableDatasetOutputWithContext(ctx context.Context) VerticaTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerticaTableDatasetOutput)
}

// Vertica dataset.
type VerticaTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Vertica dataset.
type VerticaTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (VerticaTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticaTableDatasetResponse)(nil)).Elem()
}

func (o VerticaTableDatasetResponseOutput) ToVerticaTableDatasetResponseOutput() VerticaTableDatasetResponseOutput {
	return o
}

func (o VerticaTableDatasetResponseOutput) ToVerticaTableDatasetResponseOutputWithContext(ctx context.Context) VerticaTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o VerticaTableDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o VerticaTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o VerticaTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o VerticaTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o VerticaTableDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o VerticaTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A WebLinkedService that uses anonymous authentication to communicate with an HTTP endpoint.
type WebAnonymousAuthentication struct {
	// Type of authentication used to connect to the web table source.
	AuthenticationType string `pulumi:"authenticationType"`
	// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
	Url map[string]interface{} `pulumi:"url"`
}

// WebAnonymousAuthenticationInput is an input type that accepts WebAnonymousAuthenticationArgs and WebAnonymousAuthenticationOutput values.
// You can construct a concrete instance of `WebAnonymousAuthenticationInput` via:
//
//          WebAnonymousAuthenticationArgs{...}
type WebAnonymousAuthenticationInput interface {
	pulumi.Input

	ToWebAnonymousAuthenticationOutput() WebAnonymousAuthenticationOutput
	ToWebAnonymousAuthenticationOutputWithContext(context.Context) WebAnonymousAuthenticationOutput
}

// A WebLinkedService that uses anonymous authentication to communicate with an HTTP endpoint.
type WebAnonymousAuthenticationArgs struct {
	// Type of authentication used to connect to the web table source.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
	Url pulumi.MapInput `pulumi:"url"`
}

func (WebAnonymousAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebAnonymousAuthentication)(nil)).Elem()
}

func (i WebAnonymousAuthenticationArgs) ToWebAnonymousAuthenticationOutput() WebAnonymousAuthenticationOutput {
	return i.ToWebAnonymousAuthenticationOutputWithContext(context.Background())
}

func (i WebAnonymousAuthenticationArgs) ToWebAnonymousAuthenticationOutputWithContext(ctx context.Context) WebAnonymousAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAnonymousAuthenticationOutput)
}

// A WebLinkedService that uses anonymous authentication to communicate with an HTTP endpoint.
type WebAnonymousAuthenticationResponse struct {
	// Type of authentication used to connect to the web table source.
	AuthenticationType string `pulumi:"authenticationType"`
	// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
	Url map[string]interface{} `pulumi:"url"`
}

// A WebLinkedService that uses anonymous authentication to communicate with an HTTP endpoint.
type WebAnonymousAuthenticationResponseOutput struct{ *pulumi.OutputState }

func (WebAnonymousAuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebAnonymousAuthenticationResponse)(nil)).Elem()
}

func (o WebAnonymousAuthenticationResponseOutput) ToWebAnonymousAuthenticationResponseOutput() WebAnonymousAuthenticationResponseOutput {
	return o
}

func (o WebAnonymousAuthenticationResponseOutput) ToWebAnonymousAuthenticationResponseOutputWithContext(ctx context.Context) WebAnonymousAuthenticationResponseOutput {
	return o
}

// Type of authentication used to connect to the web table source.
func (o WebAnonymousAuthenticationResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v WebAnonymousAuthenticationResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
func (o WebAnonymousAuthenticationResponseOutput) Url() pulumi.MapOutput {
	return o.ApplyT(func(v WebAnonymousAuthenticationResponse) map[string]interface{} { return v.Url }).(pulumi.MapOutput)
}

// A WebLinkedService that uses basic authentication to communicate with an HTTP endpoint.
type WebBasicAuthentication struct {
	// Type of authentication used to connect to the web table source.
	AuthenticationType string `pulumi:"authenticationType"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
	Url map[string]interface{} `pulumi:"url"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	Username map[string]interface{} `pulumi:"username"`
}

// WebBasicAuthenticationInput is an input type that accepts WebBasicAuthenticationArgs and WebBasicAuthenticationOutput values.
// You can construct a concrete instance of `WebBasicAuthenticationInput` via:
//
//          WebBasicAuthenticationArgs{...}
type WebBasicAuthenticationInput interface {
	pulumi.Input

	ToWebBasicAuthenticationOutput() WebBasicAuthenticationOutput
	ToWebBasicAuthenticationOutputWithContext(context.Context) WebBasicAuthenticationOutput
}

// A WebLinkedService that uses basic authentication to communicate with an HTTP endpoint.
type WebBasicAuthenticationArgs struct {
	// Type of authentication used to connect to the web table source.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The password for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
	Url pulumi.MapInput `pulumi:"url"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	Username pulumi.MapInput `pulumi:"username"`
}

func (WebBasicAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBasicAuthentication)(nil)).Elem()
}

func (i WebBasicAuthenticationArgs) ToWebBasicAuthenticationOutput() WebBasicAuthenticationOutput {
	return i.ToWebBasicAuthenticationOutputWithContext(context.Background())
}

func (i WebBasicAuthenticationArgs) ToWebBasicAuthenticationOutputWithContext(ctx context.Context) WebBasicAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBasicAuthenticationOutput)
}

// A WebLinkedService that uses basic authentication to communicate with an HTTP endpoint.
type WebBasicAuthenticationResponse struct {
	// Type of authentication used to connect to the web table source.
	AuthenticationType string `pulumi:"authenticationType"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
	Url map[string]interface{} `pulumi:"url"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	Username map[string]interface{} `pulumi:"username"`
}

// A WebLinkedService that uses basic authentication to communicate with an HTTP endpoint.
type WebBasicAuthenticationResponseOutput struct{ *pulumi.OutputState }

func (WebBasicAuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBasicAuthenticationResponse)(nil)).Elem()
}

func (o WebBasicAuthenticationResponseOutput) ToWebBasicAuthenticationResponseOutput() WebBasicAuthenticationResponseOutput {
	return o
}

func (o WebBasicAuthenticationResponseOutput) ToWebBasicAuthenticationResponseOutputWithContext(ctx context.Context) WebBasicAuthenticationResponseOutput {
	return o
}

// Type of authentication used to connect to the web table source.
func (o WebBasicAuthenticationResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v WebBasicAuthenticationResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The password for Basic authentication.
func (o WebBasicAuthenticationResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v WebBasicAuthenticationResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
func (o WebBasicAuthenticationResponseOutput) Url() pulumi.MapOutput {
	return o.ApplyT(func(v WebBasicAuthenticationResponse) map[string]interface{} { return v.Url }).(pulumi.MapOutput)
}

// User name for Basic authentication. Type: string (or Expression with resultType string).
func (o WebBasicAuthenticationResponseOutput) Username() pulumi.MapOutput {
	return o.ApplyT(func(v WebBasicAuthenticationResponse) map[string]interface{} { return v.Username }).(pulumi.MapOutput)
}

// A WebLinkedService that uses client certificate based authentication to communicate with an HTTP endpoint. This scheme follows mutual authentication; the server must also provide valid credentials to the client.
type WebClientCertificateAuthentication struct {
	// Type of authentication used to connect to the web table source.
	AuthenticationType string `pulumi:"authenticationType"`
	// Password for the PFX file.
	Password interface{} `pulumi:"password"`
	// Base64-encoded contents of a PFX file.
	Pfx interface{} `pulumi:"pfx"`
	// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
	Url map[string]interface{} `pulumi:"url"`
}

// WebClientCertificateAuthenticationInput is an input type that accepts WebClientCertificateAuthenticationArgs and WebClientCertificateAuthenticationOutput values.
// You can construct a concrete instance of `WebClientCertificateAuthenticationInput` via:
//
//          WebClientCertificateAuthenticationArgs{...}
type WebClientCertificateAuthenticationInput interface {
	pulumi.Input

	ToWebClientCertificateAuthenticationOutput() WebClientCertificateAuthenticationOutput
	ToWebClientCertificateAuthenticationOutputWithContext(context.Context) WebClientCertificateAuthenticationOutput
}

// A WebLinkedService that uses client certificate based authentication to communicate with an HTTP endpoint. This scheme follows mutual authentication; the server must also provide valid credentials to the client.
type WebClientCertificateAuthenticationArgs struct {
	// Type of authentication used to connect to the web table source.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// Password for the PFX file.
	Password pulumi.Input `pulumi:"password"`
	// Base64-encoded contents of a PFX file.
	Pfx pulumi.Input `pulumi:"pfx"`
	// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
	Url pulumi.MapInput `pulumi:"url"`
}

func (WebClientCertificateAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebClientCertificateAuthentication)(nil)).Elem()
}

func (i WebClientCertificateAuthenticationArgs) ToWebClientCertificateAuthenticationOutput() WebClientCertificateAuthenticationOutput {
	return i.ToWebClientCertificateAuthenticationOutputWithContext(context.Background())
}

func (i WebClientCertificateAuthenticationArgs) ToWebClientCertificateAuthenticationOutputWithContext(ctx context.Context) WebClientCertificateAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebClientCertificateAuthenticationOutput)
}

// A WebLinkedService that uses client certificate based authentication to communicate with an HTTP endpoint. This scheme follows mutual authentication; the server must also provide valid credentials to the client.
type WebClientCertificateAuthenticationResponse struct {
	// Type of authentication used to connect to the web table source.
	AuthenticationType string `pulumi:"authenticationType"`
	// Password for the PFX file.
	Password interface{} `pulumi:"password"`
	// Base64-encoded contents of a PFX file.
	Pfx interface{} `pulumi:"pfx"`
	// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
	Url map[string]interface{} `pulumi:"url"`
}

// A WebLinkedService that uses client certificate based authentication to communicate with an HTTP endpoint. This scheme follows mutual authentication; the server must also provide valid credentials to the client.
type WebClientCertificateAuthenticationResponseOutput struct{ *pulumi.OutputState }

func (WebClientCertificateAuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebClientCertificateAuthenticationResponse)(nil)).Elem()
}

func (o WebClientCertificateAuthenticationResponseOutput) ToWebClientCertificateAuthenticationResponseOutput() WebClientCertificateAuthenticationResponseOutput {
	return o
}

func (o WebClientCertificateAuthenticationResponseOutput) ToWebClientCertificateAuthenticationResponseOutputWithContext(ctx context.Context) WebClientCertificateAuthenticationResponseOutput {
	return o
}

// Type of authentication used to connect to the web table source.
func (o WebClientCertificateAuthenticationResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v WebClientCertificateAuthenticationResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// Password for the PFX file.
func (o WebClientCertificateAuthenticationResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v WebClientCertificateAuthenticationResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Base64-encoded contents of a PFX file.
func (o WebClientCertificateAuthenticationResponseOutput) Pfx() pulumi.AnyOutput {
	return o.ApplyT(func(v WebClientCertificateAuthenticationResponse) interface{} { return v.Pfx }).(pulumi.AnyOutput)
}

// The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
func (o WebClientCertificateAuthenticationResponseOutput) Url() pulumi.MapOutput {
	return o.ApplyT(func(v WebClientCertificateAuthenticationResponse) map[string]interface{} { return v.Url }).(pulumi.MapOutput)
}

// Web linked service.
type WebLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Web linked service properties.
	TypeProperties interface{} `pulumi:"typeProperties"`
}

// WebLinkedServiceInput is an input type that accepts WebLinkedServiceArgs and WebLinkedServiceOutput values.
// You can construct a concrete instance of `WebLinkedServiceInput` via:
//
//          WebLinkedServiceArgs{...}
type WebLinkedServiceInput interface {
	pulumi.Input

	ToWebLinkedServiceOutput() WebLinkedServiceOutput
	ToWebLinkedServiceOutputWithContext(context.Context) WebLinkedServiceOutput
}

// Web linked service.
type WebLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Web linked service properties.
	TypeProperties pulumi.Input `pulumi:"typeProperties"`
}

func (WebLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebLinkedService)(nil)).Elem()
}

func (i WebLinkedServiceArgs) ToWebLinkedServiceOutput() WebLinkedServiceOutput {
	return i.ToWebLinkedServiceOutputWithContext(context.Background())
}

func (i WebLinkedServiceArgs) ToWebLinkedServiceOutputWithContext(ctx context.Context) WebLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebLinkedServiceOutput)
}

// Web linked service.
type WebLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Web linked service properties.
	TypeProperties interface{} `pulumi:"typeProperties"`
}

// Web linked service.
type WebLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (WebLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebLinkedServiceResponse)(nil)).Elem()
}

func (o WebLinkedServiceResponseOutput) ToWebLinkedServiceResponseOutput() WebLinkedServiceResponseOutput {
	return o
}

func (o WebLinkedServiceResponseOutput) ToWebLinkedServiceResponseOutputWithContext(ctx context.Context) WebLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o WebLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v WebLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o WebLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v WebLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o WebLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o WebLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v WebLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o WebLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Web linked service properties.
func (o WebLinkedServiceResponseOutput) TypeProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v WebLinkedServiceResponse) interface{} { return v.TypeProperties }).(pulumi.AnyOutput)
}

// The dataset points to a HTML table in the web page.
type WebTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The zero-based index of the table in the web page. Type: integer (or Expression with resultType integer), minimum: 0.
	Index map[string]interface{} `pulumi:"index"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The relative URL to the web page from the linked service URL. Type: string (or Expression with resultType string).
	Path map[string]interface{} `pulumi:"path"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// WebTableDatasetInput is an input type that accepts WebTableDatasetArgs and WebTableDatasetOutput values.
// You can construct a concrete instance of `WebTableDatasetInput` via:
//
//          WebTableDatasetArgs{...}
type WebTableDatasetInput interface {
	pulumi.Input

	ToWebTableDatasetOutput() WebTableDatasetOutput
	ToWebTableDatasetOutputWithContext(context.Context) WebTableDatasetOutput
}

// The dataset points to a HTML table in the web page.
type WebTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The zero-based index of the table in the web page. Type: integer (or Expression with resultType integer), minimum: 0.
	Index pulumi.MapInput `pulumi:"index"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The relative URL to the web page from the linked service URL. Type: string (or Expression with resultType string).
	Path pulumi.MapInput `pulumi:"path"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (WebTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTableDataset)(nil)).Elem()
}

func (i WebTableDatasetArgs) ToWebTableDatasetOutput() WebTableDatasetOutput {
	return i.ToWebTableDatasetOutputWithContext(context.Background())
}

func (i WebTableDatasetArgs) ToWebTableDatasetOutputWithContext(ctx context.Context) WebTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTableDatasetOutput)
}

// The dataset points to a HTML table in the web page.
type WebTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The zero-based index of the table in the web page. Type: integer (or Expression with resultType integer), minimum: 0.
	Index map[string]interface{} `pulumi:"index"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The relative URL to the web page from the linked service URL. Type: string (or Expression with resultType string).
	Path map[string]interface{} `pulumi:"path"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// The dataset points to a HTML table in the web page.
type WebTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (WebTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTableDatasetResponse)(nil)).Elem()
}

func (o WebTableDatasetResponseOutput) ToWebTableDatasetResponseOutput() WebTableDatasetResponseOutput {
	return o
}

func (o WebTableDatasetResponseOutput) ToWebTableDatasetResponseOutputWithContext(ctx context.Context) WebTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o WebTableDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o WebTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The zero-based index of the table in the web page. Type: integer (or Expression with resultType integer), minimum: 0.
func (o WebTableDatasetResponseOutput) Index() pulumi.MapOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) map[string]interface{} { return v.Index }).(pulumi.MapOutput)
}

// Linked service reference.
func (o WebTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o WebTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The relative URL to the web page from the linked service URL. Type: string (or Expression with resultType string).
func (o WebTableDatasetResponseOutput) Path() pulumi.MapOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) map[string]interface{} { return v.Path }).(pulumi.MapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o WebTableDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o WebTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Xero Service linked service.
type XeroLinkedService struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The consumer key associated with the Xero application.
	ConsumerKey interface{} `pulumi:"consumerKey"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Xero server. (i.e. api.xero.com)
	Host map[string]interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The private key from the .pem file that was generated for your Xero private application. You must include all the text from the .pem file, including the Unix line endings(
	// ).
	PrivateKey interface{} `pulumi:"privateKey"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
}

// XeroLinkedServiceInput is an input type that accepts XeroLinkedServiceArgs and XeroLinkedServiceOutput values.
// You can construct a concrete instance of `XeroLinkedServiceInput` via:
//
//          XeroLinkedServiceArgs{...}
type XeroLinkedServiceInput interface {
	pulumi.Input

	ToXeroLinkedServiceOutput() XeroLinkedServiceOutput
	ToXeroLinkedServiceOutputWithContext(context.Context) XeroLinkedServiceOutput
}

// Xero Service linked service.
type XeroLinkedServiceArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The consumer key associated with the Xero application.
	ConsumerKey pulumi.Input `pulumi:"consumerKey"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The endpoint of the Xero server. (i.e. api.xero.com)
	Host pulumi.MapInput `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The private key from the .pem file that was generated for your Xero private application. You must include all the text from the .pem file, including the Unix line endings(
	// ).
	PrivateKey pulumi.Input `pulumi:"privateKey"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.MapInput `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.MapInput `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.MapInput `pulumi:"usePeerVerification"`
}

func (XeroLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XeroLinkedService)(nil)).Elem()
}

func (i XeroLinkedServiceArgs) ToXeroLinkedServiceOutput() XeroLinkedServiceOutput {
	return i.ToXeroLinkedServiceOutputWithContext(context.Background())
}

func (i XeroLinkedServiceArgs) ToXeroLinkedServiceOutputWithContext(ctx context.Context) XeroLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XeroLinkedServiceOutput)
}

// Xero Service linked service.
type XeroLinkedServiceResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The consumer key associated with the Xero application.
	ConsumerKey interface{} `pulumi:"consumerKey"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Xero server. (i.e. api.xero.com)
	Host map[string]interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The private key from the .pem file that was generated for your Xero private application. You must include all the text from the .pem file, including the Unix line endings(
	// ).
	PrivateKey interface{} `pulumi:"privateKey"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
}

// Xero Service linked service.
type XeroLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (XeroLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XeroLinkedServiceResponse)(nil)).Elem()
}

func (o XeroLinkedServiceResponseOutput) ToXeroLinkedServiceResponseOutput() XeroLinkedServiceResponseOutput {
	return o
}

func (o XeroLinkedServiceResponseOutput) ToXeroLinkedServiceResponseOutputWithContext(ctx context.Context) XeroLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o XeroLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o XeroLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The consumer key associated with the Xero application.
func (o XeroLinkedServiceResponseOutput) ConsumerKey() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) interface{} { return v.ConsumerKey }).(pulumi.AnyOutput)
}

// Linked service description.
func (o XeroLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o XeroLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The endpoint of the Xero server. (i.e. api.xero.com)
func (o XeroLinkedServiceResponseOutput) Host() pulumi.MapOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) map[string]interface{} { return v.Host }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o XeroLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The private key from the .pem file that was generated for your Xero private application. You must include all the text from the .pem file, including the Unix line endings(
// ).
func (o XeroLinkedServiceResponseOutput) PrivateKey() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) interface{} { return v.PrivateKey }).(pulumi.AnyOutput)
}

// Type of linked service.
func (o XeroLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o XeroLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.MapOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) map[string]interface{} { return v.UseEncryptedEndpoints }).(pulumi.MapOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o XeroLinkedServiceResponseOutput) UseHostVerification() pulumi.MapOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) map[string]interface{} { return v.UseHostVerification }).(pulumi.MapOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o XeroLinkedServiceResponseOutput) UsePeerVerification() pulumi.MapOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) map[string]interface{} { return v.UsePeerVerification }).(pulumi.MapOutput)
}

// Xero Service dataset.
type XeroObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// XeroObjectDatasetInput is an input type that accepts XeroObjectDatasetArgs and XeroObjectDatasetOutput values.
// You can construct a concrete instance of `XeroObjectDatasetInput` via:
//
//          XeroObjectDatasetArgs{...}
type XeroObjectDatasetInput interface {
	pulumi.Input

	ToXeroObjectDatasetOutput() XeroObjectDatasetOutput
	ToXeroObjectDatasetOutputWithContext(context.Context) XeroObjectDatasetOutput
}

// Xero Service dataset.
type XeroObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (XeroObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XeroObjectDataset)(nil)).Elem()
}

func (i XeroObjectDatasetArgs) ToXeroObjectDatasetOutput() XeroObjectDatasetOutput {
	return i.ToXeroObjectDatasetOutputWithContext(context.Background())
}

func (i XeroObjectDatasetArgs) ToXeroObjectDatasetOutputWithContext(ctx context.Context) XeroObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XeroObjectDatasetOutput)
}

// Xero Service dataset.
type XeroObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Xero Service dataset.
type XeroObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (XeroObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XeroObjectDatasetResponse)(nil)).Elem()
}

func (o XeroObjectDatasetResponseOutput) ToXeroObjectDatasetResponseOutput() XeroObjectDatasetResponseOutput {
	return o
}

func (o XeroObjectDatasetResponseOutput) ToXeroObjectDatasetResponseOutputWithContext(ctx context.Context) XeroObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o XeroObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o XeroObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o XeroObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o XeroObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o XeroObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o XeroObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Zoho server linked service.
type ZohoLinkedService struct {
	// The access token for Zoho authentication.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private)
	Endpoint map[string]interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
}

// ZohoLinkedServiceInput is an input type that accepts ZohoLinkedServiceArgs and ZohoLinkedServiceOutput values.
// You can construct a concrete instance of `ZohoLinkedServiceInput` via:
//
//          ZohoLinkedServiceArgs{...}
type ZohoLinkedServiceInput interface {
	pulumi.Input

	ToZohoLinkedServiceOutput() ZohoLinkedServiceOutput
	ToZohoLinkedServiceOutputWithContext(context.Context) ZohoLinkedServiceOutput
}

// Zoho server linked service.
type ZohoLinkedServiceArgs struct {
	// The access token for Zoho authentication.
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential pulumi.MapInput `pulumi:"encryptedCredential"`
	// The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private)
	Endpoint pulumi.MapInput `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.MapInput `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.MapInput `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.MapInput `pulumi:"usePeerVerification"`
}

func (ZohoLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZohoLinkedService)(nil)).Elem()
}

func (i ZohoLinkedServiceArgs) ToZohoLinkedServiceOutput() ZohoLinkedServiceOutput {
	return i.ToZohoLinkedServiceOutputWithContext(context.Background())
}

func (i ZohoLinkedServiceArgs) ToZohoLinkedServiceOutputWithContext(ctx context.Context) ZohoLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZohoLinkedServiceOutput)
}

// Zoho server linked service.
type ZohoLinkedServiceResponse struct {
	// The access token for Zoho authentication.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential map[string]interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private)
	Endpoint map[string]interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints map[string]interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification map[string]interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification map[string]interface{} `pulumi:"usePeerVerification"`
}

// Zoho server linked service.
type ZohoLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (ZohoLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZohoLinkedServiceResponse)(nil)).Elem()
}

func (o ZohoLinkedServiceResponseOutput) ToZohoLinkedServiceResponseOutput() ZohoLinkedServiceResponseOutput {
	return o
}

func (o ZohoLinkedServiceResponseOutput) ToZohoLinkedServiceResponseOutputWithContext(ctx context.Context) ZohoLinkedServiceResponseOutput {
	return o
}

// The access token for Zoho authentication.
func (o ZohoLinkedServiceResponseOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the Dataset.
func (o ZohoLinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o ZohoLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o ZohoLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
func (o ZohoLinkedServiceResponseOutput) EncryptedCredential() pulumi.MapOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) map[string]interface{} { return v.EncryptedCredential }).(pulumi.MapOutput)
}

// The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private)
func (o ZohoLinkedServiceResponseOutput) Endpoint() pulumi.MapOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) map[string]interface{} { return v.Endpoint }).(pulumi.MapOutput)
}

// Parameters for linked service.
func (o ZohoLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o ZohoLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o ZohoLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.MapOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) map[string]interface{} { return v.UseEncryptedEndpoints }).(pulumi.MapOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o ZohoLinkedServiceResponseOutput) UseHostVerification() pulumi.MapOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) map[string]interface{} { return v.UseHostVerification }).(pulumi.MapOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o ZohoLinkedServiceResponseOutput) UsePeerVerification() pulumi.MapOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) map[string]interface{} { return v.UsePeerVerification }).(pulumi.MapOutput)
}

// Zoho server dataset.
type ZohoObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// ZohoObjectDatasetInput is an input type that accepts ZohoObjectDatasetArgs and ZohoObjectDatasetOutput values.
// You can construct a concrete instance of `ZohoObjectDatasetInput` via:
//
//          ZohoObjectDatasetArgs{...}
type ZohoObjectDatasetInput interface {
	pulumi.Input

	ToZohoObjectDatasetOutput() ZohoObjectDatasetOutput
	ToZohoObjectDatasetOutputWithContext(context.Context) ZohoObjectDatasetOutput
}

// Zoho server dataset.
type ZohoObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ZohoObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZohoObjectDataset)(nil)).Elem()
}

func (i ZohoObjectDatasetArgs) ToZohoObjectDatasetOutput() ZohoObjectDatasetOutput {
	return i.ToZohoObjectDatasetOutputWithContext(context.Background())
}

func (i ZohoObjectDatasetArgs) ToZohoObjectDatasetOutputWithContext(ctx context.Context) ZohoObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZohoObjectDatasetOutput)
}

// Zoho server dataset.
type ZohoObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// Zoho server dataset.
type ZohoObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (ZohoObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZohoObjectDatasetResponse)(nil)).Elem()
}

func (o ZohoObjectDatasetResponseOutput) ToZohoObjectDatasetResponseOutput() ZohoObjectDatasetResponseOutput {
	return o
}

func (o ZohoObjectDatasetResponseOutput) ToZohoObjectDatasetResponseOutputWithContext(ctx context.Context) ZohoObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ZohoObjectDatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o ZohoObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o ZohoObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o ZohoObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ZohoObjectDatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o ZohoObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ActivityDependencyOutput{})
	pulumi.RegisterOutputType(ActivityDependencyArrayOutput{})
	pulumi.RegisterOutputType(ActivityDependencyResponseOutput{})
	pulumi.RegisterOutputType(ActivityDependencyResponseArrayOutput{})
	pulumi.RegisterOutputType(ActivityPolicyOutput{})
	pulumi.RegisterOutputType(ActivityPolicyPtrOutput{})
	pulumi.RegisterOutputType(ActivityPolicyResponseOutput{})
	pulumi.RegisterOutputType(ActivityPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(AmazonMWSLinkedServiceOutput{})
	pulumi.RegisterOutputType(AmazonMWSLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AmazonMWSObjectDatasetOutput{})
	pulumi.RegisterOutputType(AmazonMWSObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(AmazonRedshiftLinkedServiceOutput{})
	pulumi.RegisterOutputType(AmazonRedshiftLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AmazonS3DatasetOutput{})
	pulumi.RegisterOutputType(AmazonS3DatasetResponseOutput{})
	pulumi.RegisterOutputType(AmazonS3LinkedServiceOutput{})
	pulumi.RegisterOutputType(AmazonS3LinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AvroFormatOutput{})
	pulumi.RegisterOutputType(AvroFormatResponseOutput{})
	pulumi.RegisterOutputType(AzureBatchLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureBatchLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobDatasetOutput{})
	pulumi.RegisterOutputType(AzureBlobDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeAnalyticsLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureDataLakeAnalyticsLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreDatasetOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureDatabricksLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureDatabricksLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultSecretReferenceOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultSecretReferenceResponseOutput{})
	pulumi.RegisterOutputType(AzureMLLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureMLLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureMySqlLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureMySqlLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureMySqlTableDatasetOutput{})
	pulumi.RegisterOutputType(AzureMySqlTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzurePostgreSqlLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzurePostgreSqlLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzurePostgreSqlTableDatasetOutput{})
	pulumi.RegisterOutputType(AzurePostgreSqlTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureSearchIndexDatasetOutput{})
	pulumi.RegisterOutputType(AzureSearchIndexDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureSearchLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureSearchLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureSqlDWLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureSqlDWLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureSqlDWTableDatasetOutput{})
	pulumi.RegisterOutputType(AzureSqlDWTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureSqlDatabaseLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureSqlDatabaseLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureSqlTableDatasetOutput{})
	pulumi.RegisterOutputType(AzureSqlTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureStorageLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureStorageLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureTableDatasetOutput{})
	pulumi.RegisterOutputType(AzureTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(CassandraLinkedServiceOutput{})
	pulumi.RegisterOutputType(CassandraLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(CassandraTableDatasetOutput{})
	pulumi.RegisterOutputType(CassandraTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(ConcurLinkedServiceOutput{})
	pulumi.RegisterOutputType(ConcurLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ConcurObjectDatasetOutput{})
	pulumi.RegisterOutputType(ConcurObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(ControlActivityOutput{})
	pulumi.RegisterOutputType(ControlActivityResponseOutput{})
	pulumi.RegisterOutputType(CosmosDbLinkedServiceOutput{})
	pulumi.RegisterOutputType(CosmosDbLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(CouchbaseLinkedServiceOutput{})
	pulumi.RegisterOutputType(CouchbaseLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(CouchbaseTableDatasetOutput{})
	pulumi.RegisterOutputType(CouchbaseTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(CustomDataSourceLinkedServiceOutput{})
	pulumi.RegisterOutputType(CustomDataSourceLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(CustomDatasetOutput{})
	pulumi.RegisterOutputType(CustomDatasetResponseOutput{})
	pulumi.RegisterOutputType(DatasetBZip2CompressionOutput{})
	pulumi.RegisterOutputType(DatasetBZip2CompressionResponseOutput{})
	pulumi.RegisterOutputType(DatasetDeflateCompressionOutput{})
	pulumi.RegisterOutputType(DatasetDeflateCompressionResponseOutput{})
	pulumi.RegisterOutputType(DatasetGZipCompressionOutput{})
	pulumi.RegisterOutputType(DatasetGZipCompressionResponseOutput{})
	pulumi.RegisterOutputType(DatasetZipDeflateCompressionOutput{})
	pulumi.RegisterOutputType(DatasetZipDeflateCompressionResponseOutput{})
	pulumi.RegisterOutputType(Db2LinkedServiceOutput{})
	pulumi.RegisterOutputType(Db2LinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(DocumentDbCollectionDatasetOutput{})
	pulumi.RegisterOutputType(DocumentDbCollectionDatasetResponseOutput{})
	pulumi.RegisterOutputType(DrillLinkedServiceOutput{})
	pulumi.RegisterOutputType(DrillLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(DrillTableDatasetOutput{})
	pulumi.RegisterOutputType(DrillTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(DynamicsEntityDatasetOutput{})
	pulumi.RegisterOutputType(DynamicsEntityDatasetResponseOutput{})
	pulumi.RegisterOutputType(DynamicsLinkedServiceOutput{})
	pulumi.RegisterOutputType(DynamicsLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(EloquaLinkedServiceOutput{})
	pulumi.RegisterOutputType(EloquaLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(EloquaObjectDatasetOutput{})
	pulumi.RegisterOutputType(EloquaObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(EntityReferenceOutput{})
	pulumi.RegisterOutputType(EntityReferencePtrOutput{})
	pulumi.RegisterOutputType(EntityReferenceResponseOutput{})
	pulumi.RegisterOutputType(EntityReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(ExecutionActivityOutput{})
	pulumi.RegisterOutputType(ExecutionActivityResponseOutput{})
	pulumi.RegisterOutputType(FactoryIdentityOutput{})
	pulumi.RegisterOutputType(FactoryIdentityPtrOutput{})
	pulumi.RegisterOutputType(FactoryIdentityResponseOutput{})
	pulumi.RegisterOutputType(FactoryIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(FactoryVSTSConfigurationOutput{})
	pulumi.RegisterOutputType(FactoryVSTSConfigurationPtrOutput{})
	pulumi.RegisterOutputType(FactoryVSTSConfigurationResponseOutput{})
	pulumi.RegisterOutputType(FactoryVSTSConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(FileServerLinkedServiceOutput{})
	pulumi.RegisterOutputType(FileServerLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(FileShareDatasetOutput{})
	pulumi.RegisterOutputType(FileShareDatasetResponseOutput{})
	pulumi.RegisterOutputType(FtpServerLinkedServiceOutput{})
	pulumi.RegisterOutputType(FtpServerLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(GoogleBigQueryLinkedServiceOutput{})
	pulumi.RegisterOutputType(GoogleBigQueryLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(GoogleBigQueryObjectDatasetOutput{})
	pulumi.RegisterOutputType(GoogleBigQueryObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(GreenplumLinkedServiceOutput{})
	pulumi.RegisterOutputType(GreenplumLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(GreenplumTableDatasetOutput{})
	pulumi.RegisterOutputType(GreenplumTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(HBaseLinkedServiceOutput{})
	pulumi.RegisterOutputType(HBaseLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(HBaseObjectDatasetOutput{})
	pulumi.RegisterOutputType(HBaseObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(HDInsightLinkedServiceOutput{})
	pulumi.RegisterOutputType(HDInsightLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(HDInsightOnDemandLinkedServiceOutput{})
	pulumi.RegisterOutputType(HDInsightOnDemandLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(HdfsLinkedServiceOutput{})
	pulumi.RegisterOutputType(HdfsLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(HiveLinkedServiceOutput{})
	pulumi.RegisterOutputType(HiveLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(HiveObjectDatasetOutput{})
	pulumi.RegisterOutputType(HiveObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(HttpDatasetOutput{})
	pulumi.RegisterOutputType(HttpDatasetResponseOutput{})
	pulumi.RegisterOutputType(HttpLinkedServiceOutput{})
	pulumi.RegisterOutputType(HttpLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(HubspotLinkedServiceOutput{})
	pulumi.RegisterOutputType(HubspotLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(HubspotObjectDatasetOutput{})
	pulumi.RegisterOutputType(HubspotObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(ImpalaLinkedServiceOutput{})
	pulumi.RegisterOutputType(ImpalaLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ImpalaObjectDatasetOutput{})
	pulumi.RegisterOutputType(ImpalaObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeComputePropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeComputePropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeComputePropertiesResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeComputePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeCustomSetupScriptPropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataProxyPropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataProxyPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataProxyPropertiesResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataProxyPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferenceOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferencePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferenceResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisCatalogInfoOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisCatalogInfoPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisCatalogInfoResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisCatalogInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisPropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisPropertiesResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeVNetPropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeVNetPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeVNetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeVNetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(JiraLinkedServiceOutput{})
	pulumi.RegisterOutputType(JiraLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(JiraObjectDatasetOutput{})
	pulumi.RegisterOutputType(JiraObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(JsonFormatOutput{})
	pulumi.RegisterOutputType(JsonFormatResponseOutput{})
	pulumi.RegisterOutputType(LinkedIntegrationRuntimeKeyOutput{})
	pulumi.RegisterOutputType(LinkedIntegrationRuntimeKeyResponseOutput{})
	pulumi.RegisterOutputType(LinkedIntegrationRuntimeRbacOutput{})
	pulumi.RegisterOutputType(LinkedIntegrationRuntimeRbacResponseOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferencePtrOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceArrayOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceResponseOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(MagentoLinkedServiceOutput{})
	pulumi.RegisterOutputType(MagentoLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(MagentoObjectDatasetOutput{})
	pulumi.RegisterOutputType(MagentoObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(ManagedIntegrationRuntimeOutput{})
	pulumi.RegisterOutputType(ManagedIntegrationRuntimeResponseOutput{})
	pulumi.RegisterOutputType(MariaDBLinkedServiceOutput{})
	pulumi.RegisterOutputType(MariaDBLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(MariaDBTableDatasetOutput{})
	pulumi.RegisterOutputType(MariaDBTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(MarketoLinkedServiceOutput{})
	pulumi.RegisterOutputType(MarketoLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(MarketoObjectDatasetOutput{})
	pulumi.RegisterOutputType(MarketoObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionDatasetOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionDatasetResponseOutput{})
	pulumi.RegisterOutputType(MongoDbLinkedServiceOutput{})
	pulumi.RegisterOutputType(MongoDbLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(MultiplePipelineTriggerOutput{})
	pulumi.RegisterOutputType(MultiplePipelineTriggerResponseOutput{})
	pulumi.RegisterOutputType(MySqlLinkedServiceOutput{})
	pulumi.RegisterOutputType(MySqlLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(NetezzaLinkedServiceOutput{})
	pulumi.RegisterOutputType(NetezzaLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(NetezzaTableDatasetOutput{})
	pulumi.RegisterOutputType(NetezzaTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(ODataLinkedServiceOutput{})
	pulumi.RegisterOutputType(ODataLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ODataResourceDatasetOutput{})
	pulumi.RegisterOutputType(ODataResourceDatasetResponseOutput{})
	pulumi.RegisterOutputType(OdbcLinkedServiceOutput{})
	pulumi.RegisterOutputType(OdbcLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(OracleLinkedServiceOutput{})
	pulumi.RegisterOutputType(OracleLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(OracleTableDatasetOutput{})
	pulumi.RegisterOutputType(OracleTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(OrcFormatOutput{})
	pulumi.RegisterOutputType(OrcFormatResponseOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationMapOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationResponseOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationResponseMapOutput{})
	pulumi.RegisterOutputType(ParquetFormatOutput{})
	pulumi.RegisterOutputType(ParquetFormatResponseOutput{})
	pulumi.RegisterOutputType(PaypalLinkedServiceOutput{})
	pulumi.RegisterOutputType(PaypalLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(PaypalObjectDatasetOutput{})
	pulumi.RegisterOutputType(PaypalObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(PhoenixLinkedServiceOutput{})
	pulumi.RegisterOutputType(PhoenixLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(PhoenixObjectDatasetOutput{})
	pulumi.RegisterOutputType(PhoenixObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(PipelineReferenceOutput{})
	pulumi.RegisterOutputType(PipelineReferencePtrOutput{})
	pulumi.RegisterOutputType(PipelineReferenceResponseOutput{})
	pulumi.RegisterOutputType(PipelineReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(PostgreSqlLinkedServiceOutput{})
	pulumi.RegisterOutputType(PostgreSqlLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(PrestoLinkedServiceOutput{})
	pulumi.RegisterOutputType(PrestoLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(PrestoObjectDatasetOutput{})
	pulumi.RegisterOutputType(PrestoObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(QuickBooksLinkedServiceOutput{})
	pulumi.RegisterOutputType(QuickBooksLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(QuickBooksObjectDatasetOutput{})
	pulumi.RegisterOutputType(QuickBooksObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(RelationalTableDatasetOutput{})
	pulumi.RegisterOutputType(RelationalTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(ResponsysLinkedServiceOutput{})
	pulumi.RegisterOutputType(ResponsysLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ResponsysObjectDatasetOutput{})
	pulumi.RegisterOutputType(ResponsysObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(RetryPolicyOutput{})
	pulumi.RegisterOutputType(RetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(RetryPolicyResponseOutput{})
	pulumi.RegisterOutputType(RetryPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(SalesforceLinkedServiceOutput{})
	pulumi.RegisterOutputType(SalesforceLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SalesforceMarketingCloudLinkedServiceOutput{})
	pulumi.RegisterOutputType(SalesforceMarketingCloudLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SalesforceMarketingCloudObjectDatasetOutput{})
	pulumi.RegisterOutputType(SalesforceMarketingCloudObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(SalesforceObjectDatasetOutput{})
	pulumi.RegisterOutputType(SalesforceObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(SapBWLinkedServiceOutput{})
	pulumi.RegisterOutputType(SapBWLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SapCloudForCustomerLinkedServiceOutput{})
	pulumi.RegisterOutputType(SapCloudForCustomerLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SapCloudForCustomerResourceDatasetOutput{})
	pulumi.RegisterOutputType(SapCloudForCustomerResourceDatasetResponseOutput{})
	pulumi.RegisterOutputType(SapEccLinkedServiceOutput{})
	pulumi.RegisterOutputType(SapEccLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SapEccResourceDatasetOutput{})
	pulumi.RegisterOutputType(SapEccResourceDatasetResponseOutput{})
	pulumi.RegisterOutputType(SapHanaLinkedServiceOutput{})
	pulumi.RegisterOutputType(SapHanaLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SecureStringOutput{})
	pulumi.RegisterOutputType(SecureStringPtrOutput{})
	pulumi.RegisterOutputType(SecureStringResponseOutput{})
	pulumi.RegisterOutputType(SecureStringResponsePtrOutput{})
	pulumi.RegisterOutputType(SelfHostedIntegrationRuntimeOutput{})
	pulumi.RegisterOutputType(SelfHostedIntegrationRuntimeResponseOutput{})
	pulumi.RegisterOutputType(ServiceNowLinkedServiceOutput{})
	pulumi.RegisterOutputType(ServiceNowLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ServiceNowObjectDatasetOutput{})
	pulumi.RegisterOutputType(ServiceNowObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(SftpServerLinkedServiceOutput{})
	pulumi.RegisterOutputType(SftpServerLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ShopifyLinkedServiceOutput{})
	pulumi.RegisterOutputType(ShopifyLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ShopifyObjectDatasetOutput{})
	pulumi.RegisterOutputType(ShopifyObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(SparkLinkedServiceOutput{})
	pulumi.RegisterOutputType(SparkLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SparkObjectDatasetOutput{})
	pulumi.RegisterOutputType(SparkObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(SqlServerLinkedServiceOutput{})
	pulumi.RegisterOutputType(SqlServerLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SqlServerTableDatasetOutput{})
	pulumi.RegisterOutputType(SqlServerTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(SquareLinkedServiceOutput{})
	pulumi.RegisterOutputType(SquareLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SquareObjectDatasetOutput{})
	pulumi.RegisterOutputType(SquareObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(SybaseLinkedServiceOutput{})
	pulumi.RegisterOutputType(SybaseLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(TeradataLinkedServiceOutput{})
	pulumi.RegisterOutputType(TeradataLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(TextFormatOutput{})
	pulumi.RegisterOutputType(TextFormatResponseOutput{})
	pulumi.RegisterOutputType(TriggerPipelineReferenceOutput{})
	pulumi.RegisterOutputType(TriggerPipelineReferenceArrayOutput{})
	pulumi.RegisterOutputType(TriggerPipelineReferenceResponseOutput{})
	pulumi.RegisterOutputType(TriggerPipelineReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(TumblingWindowTriggerOutput{})
	pulumi.RegisterOutputType(TumblingWindowTriggerResponseOutput{})
	pulumi.RegisterOutputType(VerticaLinkedServiceOutput{})
	pulumi.RegisterOutputType(VerticaLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(VerticaTableDatasetOutput{})
	pulumi.RegisterOutputType(VerticaTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(WebAnonymousAuthenticationOutput{})
	pulumi.RegisterOutputType(WebAnonymousAuthenticationResponseOutput{})
	pulumi.RegisterOutputType(WebBasicAuthenticationOutput{})
	pulumi.RegisterOutputType(WebBasicAuthenticationResponseOutput{})
	pulumi.RegisterOutputType(WebClientCertificateAuthenticationOutput{})
	pulumi.RegisterOutputType(WebClientCertificateAuthenticationResponseOutput{})
	pulumi.RegisterOutputType(WebLinkedServiceOutput{})
	pulumi.RegisterOutputType(WebLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(WebTableDatasetOutput{})
	pulumi.RegisterOutputType(WebTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(XeroLinkedServiceOutput{})
	pulumi.RegisterOutputType(XeroLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(XeroObjectDatasetOutput{})
	pulumi.RegisterOutputType(XeroObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(ZohoLinkedServiceOutput{})
	pulumi.RegisterOutputType(ZohoLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ZohoObjectDatasetOutput{})
	pulumi.RegisterOutputType(ZohoObjectDatasetResponseOutput{})
}
