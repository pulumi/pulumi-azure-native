// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Linked service resource type.
type FactoryLinkedservice struct {
	pulumi.CustomResourceState

	// Etag identifies change in the resource.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties of linked service.
	Properties LinkedServiceResponseOutput `pulumi:"properties"`
	// The resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewFactoryLinkedservice registers a new resource with the given unique name, arguments, and options.
func NewFactoryLinkedservice(ctx *pulumi.Context,
	name string, args *FactoryLinkedserviceArgs, opts ...pulumi.ResourceOption) (*FactoryLinkedservice, error) {
	if args == nil || args.FactoryName == nil {
		return nil, errors.New("missing required argument 'FactoryName'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.Properties == nil {
		return nil, errors.New("missing required argument 'Properties'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &FactoryLinkedserviceArgs{}
	}
	var resource FactoryLinkedservice
	err := ctx.RegisterResource("azurerm:datafactory:FactoryLinkedservice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFactoryLinkedservice gets an existing FactoryLinkedservice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFactoryLinkedservice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FactoryLinkedserviceState, opts ...pulumi.ResourceOption) (*FactoryLinkedservice, error) {
	var resource FactoryLinkedservice
	err := ctx.ReadResource("azurerm:datafactory:FactoryLinkedservice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FactoryLinkedservice resources.
type factoryLinkedserviceState struct {
	// Etag identifies change in the resource.
	Etag *string `pulumi:"etag"`
	// The resource name.
	Name *string `pulumi:"name"`
	// Properties of linked service.
	Properties *LinkedServiceResponse `pulumi:"properties"`
	// The resource type.
	Type *string `pulumi:"type"`
}

type FactoryLinkedserviceState struct {
	// Etag identifies change in the resource.
	Etag pulumi.StringPtrInput
	// The resource name.
	Name pulumi.StringPtrInput
	// Properties of linked service.
	Properties LinkedServiceResponsePtrInput
	// The resource type.
	Type pulumi.StringPtrInput
}

func (FactoryLinkedserviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*factoryLinkedserviceState)(nil)).Elem()
}

type factoryLinkedserviceArgs struct {
	// The factory name.
	FactoryName string `pulumi:"factoryName"`
	// The linked service name.
	Name string `pulumi:"name"`
	// Properties of linked service.
	Properties LinkedService `pulumi:"properties"`
	// The resource group name.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a FactoryLinkedservice resource.
type FactoryLinkedserviceArgs struct {
	// The factory name.
	FactoryName pulumi.StringInput
	// The linked service name.
	Name pulumi.StringInput
	// Properties of linked service.
	Properties LinkedServiceInput
	// The resource group name.
	ResourceGroupName pulumi.StringInput
}

func (FactoryLinkedserviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*factoryLinkedserviceArgs)(nil)).Elem()
}
