// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180601

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A pipeline activity.
type Activity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// ActivityInput is an input type that accepts ActivityArgs and ActivityOutput values.
// You can construct a concrete instance of `ActivityInput` via:
//
//          ActivityArgs{...}
type ActivityInput interface {
	pulumi.Input

	ToActivityOutput() ActivityOutput
	ToActivityOutputWithContext(context.Context) ActivityOutput
}

// A pipeline activity.
type ActivityArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of activity.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (ActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Activity)(nil)).Elem()
}

func (i ActivityArgs) ToActivityOutput() ActivityOutput {
	return i.ToActivityOutputWithContext(context.Background())
}

func (i ActivityArgs) ToActivityOutputWithContext(ctx context.Context) ActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityOutput)
}

// ActivityArrayInput is an input type that accepts ActivityArray and ActivityArrayOutput values.
// You can construct a concrete instance of `ActivityArrayInput` via:
//
//          ActivityArray{ ActivityArgs{...} }
type ActivityArrayInput interface {
	pulumi.Input

	ToActivityArrayOutput() ActivityArrayOutput
	ToActivityArrayOutputWithContext(context.Context) ActivityArrayOutput
}

type ActivityArray []ActivityInput

func (ActivityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Activity)(nil)).Elem()
}

func (i ActivityArray) ToActivityArrayOutput() ActivityArrayOutput {
	return i.ToActivityArrayOutputWithContext(context.Background())
}

func (i ActivityArray) ToActivityArrayOutputWithContext(ctx context.Context) ActivityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityArrayOutput)
}

// A pipeline activity.
type ActivityOutput struct{ *pulumi.OutputState }

func (ActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Activity)(nil)).Elem()
}

func (o ActivityOutput) ToActivityOutput() ActivityOutput {
	return o
}

func (o ActivityOutput) ToActivityOutputWithContext(ctx context.Context) ActivityOutput {
	return o
}

// Activity depends on condition.
func (o ActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v Activity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o ActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Activity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Activity name.
func (o ActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Activity) string { return v.Name }).(pulumi.StringOutput)
}

// Type of activity.
func (o ActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Activity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v Activity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

type ActivityArrayOutput struct{ *pulumi.OutputState }

func (ActivityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Activity)(nil)).Elem()
}

func (o ActivityArrayOutput) ToActivityArrayOutput() ActivityArrayOutput {
	return o
}

func (o ActivityArrayOutput) ToActivityArrayOutputWithContext(ctx context.Context) ActivityArrayOutput {
	return o
}

func (o ActivityArrayOutput) Index(i pulumi.IntInput) ActivityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Activity {
		return vs[0].([]Activity)[vs[1].(int)]
	}).(ActivityOutput)
}

// Activity dependency information.
type ActivityDependency struct {
	// Activity name.
	Activity string `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions []string `pulumi:"dependencyConditions"`
}

// ActivityDependencyInput is an input type that accepts ActivityDependencyArgs and ActivityDependencyOutput values.
// You can construct a concrete instance of `ActivityDependencyInput` via:
//
//          ActivityDependencyArgs{...}
type ActivityDependencyInput interface {
	pulumi.Input

	ToActivityDependencyOutput() ActivityDependencyOutput
	ToActivityDependencyOutputWithContext(context.Context) ActivityDependencyOutput
}

// Activity dependency information.
type ActivityDependencyArgs struct {
	// Activity name.
	Activity pulumi.StringInput `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions pulumi.StringArrayInput `pulumi:"dependencyConditions"`
}

func (ActivityDependencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityDependency)(nil)).Elem()
}

func (i ActivityDependencyArgs) ToActivityDependencyOutput() ActivityDependencyOutput {
	return i.ToActivityDependencyOutputWithContext(context.Background())
}

func (i ActivityDependencyArgs) ToActivityDependencyOutputWithContext(ctx context.Context) ActivityDependencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityDependencyOutput)
}

// ActivityDependencyArrayInput is an input type that accepts ActivityDependencyArray and ActivityDependencyArrayOutput values.
// You can construct a concrete instance of `ActivityDependencyArrayInput` via:
//
//          ActivityDependencyArray{ ActivityDependencyArgs{...} }
type ActivityDependencyArrayInput interface {
	pulumi.Input

	ToActivityDependencyArrayOutput() ActivityDependencyArrayOutput
	ToActivityDependencyArrayOutputWithContext(context.Context) ActivityDependencyArrayOutput
}

type ActivityDependencyArray []ActivityDependencyInput

func (ActivityDependencyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityDependency)(nil)).Elem()
}

func (i ActivityDependencyArray) ToActivityDependencyArrayOutput() ActivityDependencyArrayOutput {
	return i.ToActivityDependencyArrayOutputWithContext(context.Background())
}

func (i ActivityDependencyArray) ToActivityDependencyArrayOutputWithContext(ctx context.Context) ActivityDependencyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityDependencyArrayOutput)
}

// Activity dependency information.
type ActivityDependencyOutput struct{ *pulumi.OutputState }

func (ActivityDependencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityDependency)(nil)).Elem()
}

func (o ActivityDependencyOutput) ToActivityDependencyOutput() ActivityDependencyOutput {
	return o
}

func (o ActivityDependencyOutput) ToActivityDependencyOutputWithContext(ctx context.Context) ActivityDependencyOutput {
	return o
}

// Activity name.
func (o ActivityDependencyOutput) Activity() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityDependency) string { return v.Activity }).(pulumi.StringOutput)
}

// Match-Condition for the dependency.
func (o ActivityDependencyOutput) DependencyConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityDependency) []string { return v.DependencyConditions }).(pulumi.StringArrayOutput)
}

type ActivityDependencyArrayOutput struct{ *pulumi.OutputState }

func (ActivityDependencyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityDependency)(nil)).Elem()
}

func (o ActivityDependencyArrayOutput) ToActivityDependencyArrayOutput() ActivityDependencyArrayOutput {
	return o
}

func (o ActivityDependencyArrayOutput) ToActivityDependencyArrayOutputWithContext(ctx context.Context) ActivityDependencyArrayOutput {
	return o
}

func (o ActivityDependencyArrayOutput) Index(i pulumi.IntInput) ActivityDependencyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActivityDependency {
		return vs[0].([]ActivityDependency)[vs[1].(int)]
	}).(ActivityDependencyOutput)
}

// Activity dependency information.
type ActivityDependencyResponse struct {
	// Activity name.
	Activity string `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions []string `pulumi:"dependencyConditions"`
}

// ActivityDependencyResponseInput is an input type that accepts ActivityDependencyResponseArgs and ActivityDependencyResponseOutput values.
// You can construct a concrete instance of `ActivityDependencyResponseInput` via:
//
//          ActivityDependencyResponseArgs{...}
type ActivityDependencyResponseInput interface {
	pulumi.Input

	ToActivityDependencyResponseOutput() ActivityDependencyResponseOutput
	ToActivityDependencyResponseOutputWithContext(context.Context) ActivityDependencyResponseOutput
}

// Activity dependency information.
type ActivityDependencyResponseArgs struct {
	// Activity name.
	Activity pulumi.StringInput `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions pulumi.StringArrayInput `pulumi:"dependencyConditions"`
}

func (ActivityDependencyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityDependencyResponse)(nil)).Elem()
}

func (i ActivityDependencyResponseArgs) ToActivityDependencyResponseOutput() ActivityDependencyResponseOutput {
	return i.ToActivityDependencyResponseOutputWithContext(context.Background())
}

func (i ActivityDependencyResponseArgs) ToActivityDependencyResponseOutputWithContext(ctx context.Context) ActivityDependencyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityDependencyResponseOutput)
}

// ActivityDependencyResponseArrayInput is an input type that accepts ActivityDependencyResponseArray and ActivityDependencyResponseArrayOutput values.
// You can construct a concrete instance of `ActivityDependencyResponseArrayInput` via:
//
//          ActivityDependencyResponseArray{ ActivityDependencyResponseArgs{...} }
type ActivityDependencyResponseArrayInput interface {
	pulumi.Input

	ToActivityDependencyResponseArrayOutput() ActivityDependencyResponseArrayOutput
	ToActivityDependencyResponseArrayOutputWithContext(context.Context) ActivityDependencyResponseArrayOutput
}

type ActivityDependencyResponseArray []ActivityDependencyResponseInput

func (ActivityDependencyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityDependencyResponse)(nil)).Elem()
}

func (i ActivityDependencyResponseArray) ToActivityDependencyResponseArrayOutput() ActivityDependencyResponseArrayOutput {
	return i.ToActivityDependencyResponseArrayOutputWithContext(context.Background())
}

func (i ActivityDependencyResponseArray) ToActivityDependencyResponseArrayOutputWithContext(ctx context.Context) ActivityDependencyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityDependencyResponseArrayOutput)
}

// Activity dependency information.
type ActivityDependencyResponseOutput struct{ *pulumi.OutputState }

func (ActivityDependencyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityDependencyResponse)(nil)).Elem()
}

func (o ActivityDependencyResponseOutput) ToActivityDependencyResponseOutput() ActivityDependencyResponseOutput {
	return o
}

func (o ActivityDependencyResponseOutput) ToActivityDependencyResponseOutputWithContext(ctx context.Context) ActivityDependencyResponseOutput {
	return o
}

// Activity name.
func (o ActivityDependencyResponseOutput) Activity() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityDependencyResponse) string { return v.Activity }).(pulumi.StringOutput)
}

// Match-Condition for the dependency.
func (o ActivityDependencyResponseOutput) DependencyConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityDependencyResponse) []string { return v.DependencyConditions }).(pulumi.StringArrayOutput)
}

type ActivityDependencyResponseArrayOutput struct{ *pulumi.OutputState }

func (ActivityDependencyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityDependencyResponse)(nil)).Elem()
}

func (o ActivityDependencyResponseArrayOutput) ToActivityDependencyResponseArrayOutput() ActivityDependencyResponseArrayOutput {
	return o
}

func (o ActivityDependencyResponseArrayOutput) ToActivityDependencyResponseArrayOutputWithContext(ctx context.Context) ActivityDependencyResponseArrayOutput {
	return o
}

func (o ActivityDependencyResponseArrayOutput) Index(i pulumi.IntInput) ActivityDependencyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActivityDependencyResponse {
		return vs[0].([]ActivityDependencyResponse)[vs[1].(int)]
	}).(ActivityDependencyResponseOutput)
}

// A pipeline activity.
type ActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// ActivityResponseInput is an input type that accepts ActivityResponseArgs and ActivityResponseOutput values.
// You can construct a concrete instance of `ActivityResponseInput` via:
//
//          ActivityResponseArgs{...}
type ActivityResponseInput interface {
	pulumi.Input

	ToActivityResponseOutput() ActivityResponseOutput
	ToActivityResponseOutputWithContext(context.Context) ActivityResponseOutput
}

// A pipeline activity.
type ActivityResponseArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyResponseArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of activity.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyResponseArrayInput `pulumi:"userProperties"`
}

func (ActivityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityResponse)(nil)).Elem()
}

func (i ActivityResponseArgs) ToActivityResponseOutput() ActivityResponseOutput {
	return i.ToActivityResponseOutputWithContext(context.Background())
}

func (i ActivityResponseArgs) ToActivityResponseOutputWithContext(ctx context.Context) ActivityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityResponseOutput)
}

// ActivityResponseArrayInput is an input type that accepts ActivityResponseArray and ActivityResponseArrayOutput values.
// You can construct a concrete instance of `ActivityResponseArrayInput` via:
//
//          ActivityResponseArray{ ActivityResponseArgs{...} }
type ActivityResponseArrayInput interface {
	pulumi.Input

	ToActivityResponseArrayOutput() ActivityResponseArrayOutput
	ToActivityResponseArrayOutputWithContext(context.Context) ActivityResponseArrayOutput
}

type ActivityResponseArray []ActivityResponseInput

func (ActivityResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityResponse)(nil)).Elem()
}

func (i ActivityResponseArray) ToActivityResponseArrayOutput() ActivityResponseArrayOutput {
	return i.ToActivityResponseArrayOutputWithContext(context.Background())
}

func (i ActivityResponseArray) ToActivityResponseArrayOutputWithContext(ctx context.Context) ActivityResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityResponseArrayOutput)
}

// A pipeline activity.
type ActivityResponseOutput struct{ *pulumi.OutputState }

func (ActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityResponse)(nil)).Elem()
}

func (o ActivityResponseOutput) ToActivityResponseOutput() ActivityResponseOutput {
	return o
}

func (o ActivityResponseOutput) ToActivityResponseOutputWithContext(ctx context.Context) ActivityResponseOutput {
	return o
}

// Activity depends on condition.
func (o ActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v ActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o ActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Activity name.
func (o ActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of activity.
func (o ActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v ActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

type ActivityResponseArrayOutput struct{ *pulumi.OutputState }

func (ActivityResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityResponse)(nil)).Elem()
}

func (o ActivityResponseArrayOutput) ToActivityResponseArrayOutput() ActivityResponseArrayOutput {
	return o
}

func (o ActivityResponseArrayOutput) ToActivityResponseArrayOutputWithContext(ctx context.Context) ActivityResponseArrayOutput {
	return o
}

func (o ActivityResponseArrayOutput) Index(i pulumi.IntInput) ActivityResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActivityResponse {
		return vs[0].([]ActivityResponse)[vs[1].(int)]
	}).(ActivityResponseOutput)
}

// The connection state of a managed private endpoint
type ConnectionStatePropertiesResponse struct {
	// The actions required on the managed private endpoint
	ActionsRequired string `pulumi:"actionsRequired"`
	// The managed private endpoint description
	Description string `pulumi:"description"`
	// The approval status
	Status string `pulumi:"status"`
}

// ConnectionStatePropertiesResponseInput is an input type that accepts ConnectionStatePropertiesResponseArgs and ConnectionStatePropertiesResponseOutput values.
// You can construct a concrete instance of `ConnectionStatePropertiesResponseInput` via:
//
//          ConnectionStatePropertiesResponseArgs{...}
type ConnectionStatePropertiesResponseInput interface {
	pulumi.Input

	ToConnectionStatePropertiesResponseOutput() ConnectionStatePropertiesResponseOutput
	ToConnectionStatePropertiesResponseOutputWithContext(context.Context) ConnectionStatePropertiesResponseOutput
}

// The connection state of a managed private endpoint
type ConnectionStatePropertiesResponseArgs struct {
	// The actions required on the managed private endpoint
	ActionsRequired pulumi.StringInput `pulumi:"actionsRequired"`
	// The managed private endpoint description
	Description pulumi.StringInput `pulumi:"description"`
	// The approval status
	Status pulumi.StringInput `pulumi:"status"`
}

func (ConnectionStatePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionStatePropertiesResponse)(nil)).Elem()
}

func (i ConnectionStatePropertiesResponseArgs) ToConnectionStatePropertiesResponseOutput() ConnectionStatePropertiesResponseOutput {
	return i.ToConnectionStatePropertiesResponseOutputWithContext(context.Background())
}

func (i ConnectionStatePropertiesResponseArgs) ToConnectionStatePropertiesResponseOutputWithContext(ctx context.Context) ConnectionStatePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionStatePropertiesResponseOutput)
}

func (i ConnectionStatePropertiesResponseArgs) ToConnectionStatePropertiesResponsePtrOutput() ConnectionStatePropertiesResponsePtrOutput {
	return i.ToConnectionStatePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i ConnectionStatePropertiesResponseArgs) ToConnectionStatePropertiesResponsePtrOutputWithContext(ctx context.Context) ConnectionStatePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionStatePropertiesResponseOutput).ToConnectionStatePropertiesResponsePtrOutputWithContext(ctx)
}

// ConnectionStatePropertiesResponsePtrInput is an input type that accepts ConnectionStatePropertiesResponseArgs, ConnectionStatePropertiesResponsePtr and ConnectionStatePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `ConnectionStatePropertiesResponsePtrInput` via:
//
//          ConnectionStatePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type ConnectionStatePropertiesResponsePtrInput interface {
	pulumi.Input

	ToConnectionStatePropertiesResponsePtrOutput() ConnectionStatePropertiesResponsePtrOutput
	ToConnectionStatePropertiesResponsePtrOutputWithContext(context.Context) ConnectionStatePropertiesResponsePtrOutput
}

type connectionStatePropertiesResponsePtrType ConnectionStatePropertiesResponseArgs

func ConnectionStatePropertiesResponsePtr(v *ConnectionStatePropertiesResponseArgs) ConnectionStatePropertiesResponsePtrInput {
	return (*connectionStatePropertiesResponsePtrType)(v)
}

func (*connectionStatePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionStatePropertiesResponse)(nil)).Elem()
}

func (i *connectionStatePropertiesResponsePtrType) ToConnectionStatePropertiesResponsePtrOutput() ConnectionStatePropertiesResponsePtrOutput {
	return i.ToConnectionStatePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *connectionStatePropertiesResponsePtrType) ToConnectionStatePropertiesResponsePtrOutputWithContext(ctx context.Context) ConnectionStatePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionStatePropertiesResponsePtrOutput)
}

// The connection state of a managed private endpoint
type ConnectionStatePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectionStatePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionStatePropertiesResponse)(nil)).Elem()
}

func (o ConnectionStatePropertiesResponseOutput) ToConnectionStatePropertiesResponseOutput() ConnectionStatePropertiesResponseOutput {
	return o
}

func (o ConnectionStatePropertiesResponseOutput) ToConnectionStatePropertiesResponseOutputWithContext(ctx context.Context) ConnectionStatePropertiesResponseOutput {
	return o
}

func (o ConnectionStatePropertiesResponseOutput) ToConnectionStatePropertiesResponsePtrOutput() ConnectionStatePropertiesResponsePtrOutput {
	return o.ToConnectionStatePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ConnectionStatePropertiesResponseOutput) ToConnectionStatePropertiesResponsePtrOutputWithContext(ctx context.Context) ConnectionStatePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ConnectionStatePropertiesResponse) *ConnectionStatePropertiesResponse {
		return &v
	}).(ConnectionStatePropertiesResponsePtrOutput)
}

// The actions required on the managed private endpoint
func (o ConnectionStatePropertiesResponseOutput) ActionsRequired() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionStatePropertiesResponse) string { return v.ActionsRequired }).(pulumi.StringOutput)
}

// The managed private endpoint description
func (o ConnectionStatePropertiesResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionStatePropertiesResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The approval status
func (o ConnectionStatePropertiesResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionStatePropertiesResponse) string { return v.Status }).(pulumi.StringOutput)
}

type ConnectionStatePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectionStatePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionStatePropertiesResponse)(nil)).Elem()
}

func (o ConnectionStatePropertiesResponsePtrOutput) ToConnectionStatePropertiesResponsePtrOutput() ConnectionStatePropertiesResponsePtrOutput {
	return o
}

func (o ConnectionStatePropertiesResponsePtrOutput) ToConnectionStatePropertiesResponsePtrOutputWithContext(ctx context.Context) ConnectionStatePropertiesResponsePtrOutput {
	return o
}

func (o ConnectionStatePropertiesResponsePtrOutput) Elem() ConnectionStatePropertiesResponseOutput {
	return o.ApplyT(func(v *ConnectionStatePropertiesResponse) ConnectionStatePropertiesResponse { return *v }).(ConnectionStatePropertiesResponseOutput)
}

// The actions required on the managed private endpoint
func (o ConnectionStatePropertiesResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionStatePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// The managed private endpoint description
func (o ConnectionStatePropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionStatePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Description
	}).(pulumi.StringPtrOutput)
}

// The approval status
func (o ConnectionStatePropertiesResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionStatePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Azure Data Factory nested object which contains a flow with data movements and transformations.
type DataFlowType struct {
	// List of tags that can be used for describing the data flow.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The description of the data flow.
	Description *string `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowFolder `pulumi:"folder"`
	// Type of data flow.
	Type *string `pulumi:"type"`
}

// DataFlowTypeInput is an input type that accepts DataFlowTypeArgs and DataFlowTypeOutput values.
// You can construct a concrete instance of `DataFlowTypeInput` via:
//
//          DataFlowTypeArgs{...}
type DataFlowTypeInput interface {
	pulumi.Input

	ToDataFlowTypeOutput() DataFlowTypeOutput
	ToDataFlowTypeOutputWithContext(context.Context) DataFlowTypeOutput
}

// Azure Data Factory nested object which contains a flow with data movements and transformations.
type DataFlowTypeArgs struct {
	// List of tags that can be used for describing the data flow.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The description of the data flow.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder DataFlowFolderPtrInput `pulumi:"folder"`
	// Type of data flow.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DataFlowTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowType)(nil)).Elem()
}

func (i DataFlowTypeArgs) ToDataFlowTypeOutput() DataFlowTypeOutput {
	return i.ToDataFlowTypeOutputWithContext(context.Background())
}

func (i DataFlowTypeArgs) ToDataFlowTypeOutputWithContext(ctx context.Context) DataFlowTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowTypeOutput)
}

func (i DataFlowTypeArgs) ToDataFlowTypePtrOutput() DataFlowTypePtrOutput {
	return i.ToDataFlowTypePtrOutputWithContext(context.Background())
}

func (i DataFlowTypeArgs) ToDataFlowTypePtrOutputWithContext(ctx context.Context) DataFlowTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowTypeOutput).ToDataFlowTypePtrOutputWithContext(ctx)
}

// DataFlowTypePtrInput is an input type that accepts DataFlowTypeArgs, DataFlowTypePtr and DataFlowTypePtrOutput values.
// You can construct a concrete instance of `DataFlowTypePtrInput` via:
//
//          DataFlowTypeArgs{...}
//
//  or:
//
//          nil
type DataFlowTypePtrInput interface {
	pulumi.Input

	ToDataFlowTypePtrOutput() DataFlowTypePtrOutput
	ToDataFlowTypePtrOutputWithContext(context.Context) DataFlowTypePtrOutput
}

type dataFlowTypePtrType DataFlowTypeArgs

func DataFlowTypePtr(v *DataFlowTypeArgs) DataFlowTypePtrInput {
	return (*dataFlowTypePtrType)(v)
}

func (*dataFlowTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowType)(nil)).Elem()
}

func (i *dataFlowTypePtrType) ToDataFlowTypePtrOutput() DataFlowTypePtrOutput {
	return i.ToDataFlowTypePtrOutputWithContext(context.Background())
}

func (i *dataFlowTypePtrType) ToDataFlowTypePtrOutputWithContext(ctx context.Context) DataFlowTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowTypePtrOutput)
}

// Azure Data Factory nested object which contains a flow with data movements and transformations.
type DataFlowTypeOutput struct{ *pulumi.OutputState }

func (DataFlowTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowType)(nil)).Elem()
}

func (o DataFlowTypeOutput) ToDataFlowTypeOutput() DataFlowTypeOutput {
	return o
}

func (o DataFlowTypeOutput) ToDataFlowTypeOutputWithContext(ctx context.Context) DataFlowTypeOutput {
	return o
}

func (o DataFlowTypeOutput) ToDataFlowTypePtrOutput() DataFlowTypePtrOutput {
	return o.ToDataFlowTypePtrOutputWithContext(context.Background())
}

func (o DataFlowTypeOutput) ToDataFlowTypePtrOutputWithContext(ctx context.Context) DataFlowTypePtrOutput {
	return o.ApplyT(func(v DataFlowType) *DataFlowType {
		return &v
	}).(DataFlowTypePtrOutput)
}

// List of tags that can be used for describing the data flow.
func (o DataFlowTypeOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v DataFlowType) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The description of the data flow.
func (o DataFlowTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
func (o DataFlowTypeOutput) Folder() DataFlowFolderPtrOutput {
	return o.ApplyT(func(v DataFlowType) *DataFlowFolder { return v.Folder }).(DataFlowFolderPtrOutput)
}

// Type of data flow.
func (o DataFlowTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DataFlowTypePtrOutput struct{ *pulumi.OutputState }

func (DataFlowTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowType)(nil)).Elem()
}

func (o DataFlowTypePtrOutput) ToDataFlowTypePtrOutput() DataFlowTypePtrOutput {
	return o
}

func (o DataFlowTypePtrOutput) ToDataFlowTypePtrOutputWithContext(ctx context.Context) DataFlowTypePtrOutput {
	return o
}

func (o DataFlowTypePtrOutput) Elem() DataFlowTypeOutput {
	return o.ApplyT(func(v *DataFlowType) DataFlowType { return *v }).(DataFlowTypeOutput)
}

// List of tags that can be used for describing the data flow.
func (o DataFlowTypePtrOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *DataFlowType) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.MapArrayOutput)
}

// The description of the data flow.
func (o DataFlowTypePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFlowType) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
func (o DataFlowTypePtrOutput) Folder() DataFlowFolderPtrOutput {
	return o.ApplyT(func(v *DataFlowType) *DataFlowFolder {
		if v == nil {
			return nil
		}
		return v.Folder
	}).(DataFlowFolderPtrOutput)
}

// Type of data flow.
func (o DataFlowTypePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFlowType) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowFolder struct {
	// The name of the folder that this data flow is in.
	Name *string `pulumi:"name"`
}

// DataFlowFolderInput is an input type that accepts DataFlowFolderArgs and DataFlowFolderOutput values.
// You can construct a concrete instance of `DataFlowFolderInput` via:
//
//          DataFlowFolderArgs{...}
type DataFlowFolderInput interface {
	pulumi.Input

	ToDataFlowFolderOutput() DataFlowFolderOutput
	ToDataFlowFolderOutputWithContext(context.Context) DataFlowFolderOutput
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowFolderArgs struct {
	// The name of the folder that this data flow is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DataFlowFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowFolder)(nil)).Elem()
}

func (i DataFlowFolderArgs) ToDataFlowFolderOutput() DataFlowFolderOutput {
	return i.ToDataFlowFolderOutputWithContext(context.Background())
}

func (i DataFlowFolderArgs) ToDataFlowFolderOutputWithContext(ctx context.Context) DataFlowFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowFolderOutput)
}

func (i DataFlowFolderArgs) ToDataFlowFolderPtrOutput() DataFlowFolderPtrOutput {
	return i.ToDataFlowFolderPtrOutputWithContext(context.Background())
}

func (i DataFlowFolderArgs) ToDataFlowFolderPtrOutputWithContext(ctx context.Context) DataFlowFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowFolderOutput).ToDataFlowFolderPtrOutputWithContext(ctx)
}

// DataFlowFolderPtrInput is an input type that accepts DataFlowFolderArgs, DataFlowFolderPtr and DataFlowFolderPtrOutput values.
// You can construct a concrete instance of `DataFlowFolderPtrInput` via:
//
//          DataFlowFolderArgs{...}
//
//  or:
//
//          nil
type DataFlowFolderPtrInput interface {
	pulumi.Input

	ToDataFlowFolderPtrOutput() DataFlowFolderPtrOutput
	ToDataFlowFolderPtrOutputWithContext(context.Context) DataFlowFolderPtrOutput
}

type dataFlowFolderPtrType DataFlowFolderArgs

func DataFlowFolderPtr(v *DataFlowFolderArgs) DataFlowFolderPtrInput {
	return (*dataFlowFolderPtrType)(v)
}

func (*dataFlowFolderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowFolder)(nil)).Elem()
}

func (i *dataFlowFolderPtrType) ToDataFlowFolderPtrOutput() DataFlowFolderPtrOutput {
	return i.ToDataFlowFolderPtrOutputWithContext(context.Background())
}

func (i *dataFlowFolderPtrType) ToDataFlowFolderPtrOutputWithContext(ctx context.Context) DataFlowFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowFolderPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowFolderOutput struct{ *pulumi.OutputState }

func (DataFlowFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowFolder)(nil)).Elem()
}

func (o DataFlowFolderOutput) ToDataFlowFolderOutput() DataFlowFolderOutput {
	return o
}

func (o DataFlowFolderOutput) ToDataFlowFolderOutputWithContext(ctx context.Context) DataFlowFolderOutput {
	return o
}

func (o DataFlowFolderOutput) ToDataFlowFolderPtrOutput() DataFlowFolderPtrOutput {
	return o.ToDataFlowFolderPtrOutputWithContext(context.Background())
}

func (o DataFlowFolderOutput) ToDataFlowFolderPtrOutputWithContext(ctx context.Context) DataFlowFolderPtrOutput {
	return o.ApplyT(func(v DataFlowFolder) *DataFlowFolder {
		return &v
	}).(DataFlowFolderPtrOutput)
}

// The name of the folder that this data flow is in.
func (o DataFlowFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DataFlowFolderPtrOutput struct{ *pulumi.OutputState }

func (DataFlowFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowFolder)(nil)).Elem()
}

func (o DataFlowFolderPtrOutput) ToDataFlowFolderPtrOutput() DataFlowFolderPtrOutput {
	return o
}

func (o DataFlowFolderPtrOutput) ToDataFlowFolderPtrOutputWithContext(ctx context.Context) DataFlowFolderPtrOutput {
	return o
}

func (o DataFlowFolderPtrOutput) Elem() DataFlowFolderOutput {
	return o.ApplyT(func(v *DataFlowFolder) DataFlowFolder { return *v }).(DataFlowFolderOutput)
}

// The name of the folder that this data flow is in.
func (o DataFlowFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFlowFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Azure Data Factory nested object which contains a flow with data movements and transformations.
type DataFlowResponse struct {
	// List of tags that can be used for describing the data flow.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The description of the data flow.
	Description *string `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowResponseFolder `pulumi:"folder"`
	// Type of data flow.
	Type *string `pulumi:"type"`
}

// DataFlowResponseInput is an input type that accepts DataFlowResponseArgs and DataFlowResponseOutput values.
// You can construct a concrete instance of `DataFlowResponseInput` via:
//
//          DataFlowResponseArgs{...}
type DataFlowResponseInput interface {
	pulumi.Input

	ToDataFlowResponseOutput() DataFlowResponseOutput
	ToDataFlowResponseOutputWithContext(context.Context) DataFlowResponseOutput
}

// Azure Data Factory nested object which contains a flow with data movements and transformations.
type DataFlowResponseArgs struct {
	// List of tags that can be used for describing the data flow.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The description of the data flow.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder DataFlowResponseFolderPtrInput `pulumi:"folder"`
	// Type of data flow.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DataFlowResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowResponse)(nil)).Elem()
}

func (i DataFlowResponseArgs) ToDataFlowResponseOutput() DataFlowResponseOutput {
	return i.ToDataFlowResponseOutputWithContext(context.Background())
}

func (i DataFlowResponseArgs) ToDataFlowResponseOutputWithContext(ctx context.Context) DataFlowResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowResponseOutput)
}

func (i DataFlowResponseArgs) ToDataFlowResponsePtrOutput() DataFlowResponsePtrOutput {
	return i.ToDataFlowResponsePtrOutputWithContext(context.Background())
}

func (i DataFlowResponseArgs) ToDataFlowResponsePtrOutputWithContext(ctx context.Context) DataFlowResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowResponseOutput).ToDataFlowResponsePtrOutputWithContext(ctx)
}

// DataFlowResponsePtrInput is an input type that accepts DataFlowResponseArgs, DataFlowResponsePtr and DataFlowResponsePtrOutput values.
// You can construct a concrete instance of `DataFlowResponsePtrInput` via:
//
//          DataFlowResponseArgs{...}
//
//  or:
//
//          nil
type DataFlowResponsePtrInput interface {
	pulumi.Input

	ToDataFlowResponsePtrOutput() DataFlowResponsePtrOutput
	ToDataFlowResponsePtrOutputWithContext(context.Context) DataFlowResponsePtrOutput
}

type dataFlowResponsePtrType DataFlowResponseArgs

func DataFlowResponsePtr(v *DataFlowResponseArgs) DataFlowResponsePtrInput {
	return (*dataFlowResponsePtrType)(v)
}

func (*dataFlowResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowResponse)(nil)).Elem()
}

func (i *dataFlowResponsePtrType) ToDataFlowResponsePtrOutput() DataFlowResponsePtrOutput {
	return i.ToDataFlowResponsePtrOutputWithContext(context.Background())
}

func (i *dataFlowResponsePtrType) ToDataFlowResponsePtrOutputWithContext(ctx context.Context) DataFlowResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowResponsePtrOutput)
}

// Azure Data Factory nested object which contains a flow with data movements and transformations.
type DataFlowResponseOutput struct{ *pulumi.OutputState }

func (DataFlowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowResponse)(nil)).Elem()
}

func (o DataFlowResponseOutput) ToDataFlowResponseOutput() DataFlowResponseOutput {
	return o
}

func (o DataFlowResponseOutput) ToDataFlowResponseOutputWithContext(ctx context.Context) DataFlowResponseOutput {
	return o
}

func (o DataFlowResponseOutput) ToDataFlowResponsePtrOutput() DataFlowResponsePtrOutput {
	return o.ToDataFlowResponsePtrOutputWithContext(context.Background())
}

func (o DataFlowResponseOutput) ToDataFlowResponsePtrOutputWithContext(ctx context.Context) DataFlowResponsePtrOutput {
	return o.ApplyT(func(v DataFlowResponse) *DataFlowResponse {
		return &v
	}).(DataFlowResponsePtrOutput)
}

// List of tags that can be used for describing the data flow.
func (o DataFlowResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v DataFlowResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The description of the data flow.
func (o DataFlowResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
func (o DataFlowResponseOutput) Folder() DataFlowResponseFolderPtrOutput {
	return o.ApplyT(func(v DataFlowResponse) *DataFlowResponseFolder { return v.Folder }).(DataFlowResponseFolderPtrOutput)
}

// Type of data flow.
func (o DataFlowResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DataFlowResponsePtrOutput struct{ *pulumi.OutputState }

func (DataFlowResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowResponse)(nil)).Elem()
}

func (o DataFlowResponsePtrOutput) ToDataFlowResponsePtrOutput() DataFlowResponsePtrOutput {
	return o
}

func (o DataFlowResponsePtrOutput) ToDataFlowResponsePtrOutputWithContext(ctx context.Context) DataFlowResponsePtrOutput {
	return o
}

func (o DataFlowResponsePtrOutput) Elem() DataFlowResponseOutput {
	return o.ApplyT(func(v *DataFlowResponse) DataFlowResponse { return *v }).(DataFlowResponseOutput)
}

// List of tags that can be used for describing the data flow.
func (o DataFlowResponsePtrOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *DataFlowResponse) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.MapArrayOutput)
}

// The description of the data flow.
func (o DataFlowResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFlowResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
func (o DataFlowResponsePtrOutput) Folder() DataFlowResponseFolderPtrOutput {
	return o.ApplyT(func(v *DataFlowResponse) *DataFlowResponseFolder {
		if v == nil {
			return nil
		}
		return v.Folder
	}).(DataFlowResponseFolderPtrOutput)
}

// Type of data flow.
func (o DataFlowResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFlowResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowResponseFolder struct {
	// The name of the folder that this data flow is in.
	Name *string `pulumi:"name"`
}

// DataFlowResponseFolderInput is an input type that accepts DataFlowResponseFolderArgs and DataFlowResponseFolderOutput values.
// You can construct a concrete instance of `DataFlowResponseFolderInput` via:
//
//          DataFlowResponseFolderArgs{...}
type DataFlowResponseFolderInput interface {
	pulumi.Input

	ToDataFlowResponseFolderOutput() DataFlowResponseFolderOutput
	ToDataFlowResponseFolderOutputWithContext(context.Context) DataFlowResponseFolderOutput
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowResponseFolderArgs struct {
	// The name of the folder that this data flow is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DataFlowResponseFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowResponseFolder)(nil)).Elem()
}

func (i DataFlowResponseFolderArgs) ToDataFlowResponseFolderOutput() DataFlowResponseFolderOutput {
	return i.ToDataFlowResponseFolderOutputWithContext(context.Background())
}

func (i DataFlowResponseFolderArgs) ToDataFlowResponseFolderOutputWithContext(ctx context.Context) DataFlowResponseFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowResponseFolderOutput)
}

func (i DataFlowResponseFolderArgs) ToDataFlowResponseFolderPtrOutput() DataFlowResponseFolderPtrOutput {
	return i.ToDataFlowResponseFolderPtrOutputWithContext(context.Background())
}

func (i DataFlowResponseFolderArgs) ToDataFlowResponseFolderPtrOutputWithContext(ctx context.Context) DataFlowResponseFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowResponseFolderOutput).ToDataFlowResponseFolderPtrOutputWithContext(ctx)
}

// DataFlowResponseFolderPtrInput is an input type that accepts DataFlowResponseFolderArgs, DataFlowResponseFolderPtr and DataFlowResponseFolderPtrOutput values.
// You can construct a concrete instance of `DataFlowResponseFolderPtrInput` via:
//
//          DataFlowResponseFolderArgs{...}
//
//  or:
//
//          nil
type DataFlowResponseFolderPtrInput interface {
	pulumi.Input

	ToDataFlowResponseFolderPtrOutput() DataFlowResponseFolderPtrOutput
	ToDataFlowResponseFolderPtrOutputWithContext(context.Context) DataFlowResponseFolderPtrOutput
}

type dataFlowResponseFolderPtrType DataFlowResponseFolderArgs

func DataFlowResponseFolderPtr(v *DataFlowResponseFolderArgs) DataFlowResponseFolderPtrInput {
	return (*dataFlowResponseFolderPtrType)(v)
}

func (*dataFlowResponseFolderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowResponseFolder)(nil)).Elem()
}

func (i *dataFlowResponseFolderPtrType) ToDataFlowResponseFolderPtrOutput() DataFlowResponseFolderPtrOutput {
	return i.ToDataFlowResponseFolderPtrOutputWithContext(context.Background())
}

func (i *dataFlowResponseFolderPtrType) ToDataFlowResponseFolderPtrOutputWithContext(ctx context.Context) DataFlowResponseFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowResponseFolderPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowResponseFolderOutput struct{ *pulumi.OutputState }

func (DataFlowResponseFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowResponseFolder)(nil)).Elem()
}

func (o DataFlowResponseFolderOutput) ToDataFlowResponseFolderOutput() DataFlowResponseFolderOutput {
	return o
}

func (o DataFlowResponseFolderOutput) ToDataFlowResponseFolderOutputWithContext(ctx context.Context) DataFlowResponseFolderOutput {
	return o
}

func (o DataFlowResponseFolderOutput) ToDataFlowResponseFolderPtrOutput() DataFlowResponseFolderPtrOutput {
	return o.ToDataFlowResponseFolderPtrOutputWithContext(context.Background())
}

func (o DataFlowResponseFolderOutput) ToDataFlowResponseFolderPtrOutputWithContext(ctx context.Context) DataFlowResponseFolderPtrOutput {
	return o.ApplyT(func(v DataFlowResponseFolder) *DataFlowResponseFolder {
		return &v
	}).(DataFlowResponseFolderPtrOutput)
}

// The name of the folder that this data flow is in.
func (o DataFlowResponseFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowResponseFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DataFlowResponseFolderPtrOutput struct{ *pulumi.OutputState }

func (DataFlowResponseFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowResponseFolder)(nil)).Elem()
}

func (o DataFlowResponseFolderPtrOutput) ToDataFlowResponseFolderPtrOutput() DataFlowResponseFolderPtrOutput {
	return o
}

func (o DataFlowResponseFolderPtrOutput) ToDataFlowResponseFolderPtrOutputWithContext(ctx context.Context) DataFlowResponseFolderPtrOutput {
	return o
}

func (o DataFlowResponseFolderPtrOutput) Elem() DataFlowResponseFolderOutput {
	return o.ApplyT(func(v *DataFlowResponseFolder) DataFlowResponseFolder { return *v }).(DataFlowResponseFolderOutput)
}

// The name of the folder that this data flow is in.
func (o DataFlowResponseFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFlowResponseFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The Azure Data Factory nested object which identifies data within different data stores, such as tables, files, folders, and documents.
type DatasetType struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema map[string]interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// DatasetTypeInput is an input type that accepts DatasetTypeArgs and DatasetTypeOutput values.
// You can construct a concrete instance of `DatasetTypeInput` via:
//
//          DatasetTypeArgs{...}
type DatasetTypeInput interface {
	pulumi.Input

	ToDatasetTypeOutput() DatasetTypeOutput
	ToDatasetTypeOutputWithContext(context.Context) DatasetTypeOutput
}

// The Azure Data Factory nested object which identifies data within different data stores, such as tables, files, folders, and documents.
type DatasetTypeArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.MapInput `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetType)(nil)).Elem()
}

func (i DatasetTypeArgs) ToDatasetTypeOutput() DatasetTypeOutput {
	return i.ToDatasetTypeOutputWithContext(context.Background())
}

func (i DatasetTypeArgs) ToDatasetTypeOutputWithContext(ctx context.Context) DatasetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetTypeOutput)
}

func (i DatasetTypeArgs) ToDatasetTypePtrOutput() DatasetTypePtrOutput {
	return i.ToDatasetTypePtrOutputWithContext(context.Background())
}

func (i DatasetTypeArgs) ToDatasetTypePtrOutputWithContext(ctx context.Context) DatasetTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetTypeOutput).ToDatasetTypePtrOutputWithContext(ctx)
}

// DatasetTypePtrInput is an input type that accepts DatasetTypeArgs, DatasetTypePtr and DatasetTypePtrOutput values.
// You can construct a concrete instance of `DatasetTypePtrInput` via:
//
//          DatasetTypeArgs{...}
//
//  or:
//
//          nil
type DatasetTypePtrInput interface {
	pulumi.Input

	ToDatasetTypePtrOutput() DatasetTypePtrOutput
	ToDatasetTypePtrOutputWithContext(context.Context) DatasetTypePtrOutput
}

type datasetTypePtrType DatasetTypeArgs

func DatasetTypePtr(v *DatasetTypeArgs) DatasetTypePtrInput {
	return (*datasetTypePtrType)(v)
}

func (*datasetTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetType)(nil)).Elem()
}

func (i *datasetTypePtrType) ToDatasetTypePtrOutput() DatasetTypePtrOutput {
	return i.ToDatasetTypePtrOutputWithContext(context.Background())
}

func (i *datasetTypePtrType) ToDatasetTypePtrOutputWithContext(ctx context.Context) DatasetTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetTypePtrOutput)
}

// The Azure Data Factory nested object which identifies data within different data stores, such as tables, files, folders, and documents.
type DatasetTypeOutput struct{ *pulumi.OutputState }

func (DatasetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetType)(nil)).Elem()
}

func (o DatasetTypeOutput) ToDatasetTypeOutput() DatasetTypeOutput {
	return o
}

func (o DatasetTypeOutput) ToDatasetTypeOutputWithContext(ctx context.Context) DatasetTypeOutput {
	return o
}

func (o DatasetTypeOutput) ToDatasetTypePtrOutput() DatasetTypePtrOutput {
	return o.ToDatasetTypePtrOutputWithContext(context.Background())
}

func (o DatasetTypeOutput) ToDatasetTypePtrOutputWithContext(ctx context.Context) DatasetTypePtrOutput {
	return o.ApplyT(func(v DatasetType) *DatasetType {
		return &v
	}).(DatasetTypePtrOutput)
}

// List of tags that can be used for describing the Dataset.
func (o DatasetTypeOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v DatasetType) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o DatasetTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DatasetTypeOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v DatasetType) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o DatasetTypeOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v DatasetType) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o DatasetTypeOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v DatasetType) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DatasetTypeOutput) Schema() pulumi.MapOutput {
	return o.ApplyT(func(v DatasetType) map[string]interface{} { return v.Schema }).(pulumi.MapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DatasetTypeOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v DatasetType) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o DatasetTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetType) string { return v.Type }).(pulumi.StringOutput)
}

type DatasetTypePtrOutput struct{ *pulumi.OutputState }

func (DatasetTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetType)(nil)).Elem()
}

func (o DatasetTypePtrOutput) ToDatasetTypePtrOutput() DatasetTypePtrOutput {
	return o
}

func (o DatasetTypePtrOutput) ToDatasetTypePtrOutputWithContext(ctx context.Context) DatasetTypePtrOutput {
	return o
}

func (o DatasetTypePtrOutput) Elem() DatasetTypeOutput {
	return o.ApplyT(func(v *DatasetType) DatasetType { return *v }).(DatasetTypeOutput)
}

// List of tags that can be used for describing the Dataset.
func (o DatasetTypePtrOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *DatasetType) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o DatasetTypePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetType) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DatasetTypePtrOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v *DatasetType) *DatasetFolder {
		if v == nil {
			return nil
		}
		return v.Folder
	}).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o DatasetTypePtrOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v *DatasetType) *LinkedServiceReference {
		if v == nil {
			return nil
		}
		return &v.LinkedServiceName
	}).(LinkedServiceReferencePtrOutput)
}

// Parameters for dataset.
func (o DatasetTypePtrOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v *DatasetType) map[string]ParameterSpecification {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DatasetTypePtrOutput) Schema() pulumi.MapOutput {
	return o.ApplyT(func(v *DatasetType) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(pulumi.MapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DatasetTypePtrOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v *DatasetType) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Structure
	}).(pulumi.MapOutput)
}

// Type of dataset.
func (o DatasetTypePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetType) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetFolder struct {
	// The name of the folder that this Dataset is in.
	Name *string `pulumi:"name"`
}

// DatasetFolderInput is an input type that accepts DatasetFolderArgs and DatasetFolderOutput values.
// You can construct a concrete instance of `DatasetFolderInput` via:
//
//          DatasetFolderArgs{...}
type DatasetFolderInput interface {
	pulumi.Input

	ToDatasetFolderOutput() DatasetFolderOutput
	ToDatasetFolderOutputWithContext(context.Context) DatasetFolderOutput
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetFolderArgs struct {
	// The name of the folder that this Dataset is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DatasetFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetFolder)(nil)).Elem()
}

func (i DatasetFolderArgs) ToDatasetFolderOutput() DatasetFolderOutput {
	return i.ToDatasetFolderOutputWithContext(context.Background())
}

func (i DatasetFolderArgs) ToDatasetFolderOutputWithContext(ctx context.Context) DatasetFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFolderOutput)
}

func (i DatasetFolderArgs) ToDatasetFolderPtrOutput() DatasetFolderPtrOutput {
	return i.ToDatasetFolderPtrOutputWithContext(context.Background())
}

func (i DatasetFolderArgs) ToDatasetFolderPtrOutputWithContext(ctx context.Context) DatasetFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFolderOutput).ToDatasetFolderPtrOutputWithContext(ctx)
}

// DatasetFolderPtrInput is an input type that accepts DatasetFolderArgs, DatasetFolderPtr and DatasetFolderPtrOutput values.
// You can construct a concrete instance of `DatasetFolderPtrInput` via:
//
//          DatasetFolderArgs{...}
//
//  or:
//
//          nil
type DatasetFolderPtrInput interface {
	pulumi.Input

	ToDatasetFolderPtrOutput() DatasetFolderPtrOutput
	ToDatasetFolderPtrOutputWithContext(context.Context) DatasetFolderPtrOutput
}

type datasetFolderPtrType DatasetFolderArgs

func DatasetFolderPtr(v *DatasetFolderArgs) DatasetFolderPtrInput {
	return (*datasetFolderPtrType)(v)
}

func (*datasetFolderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetFolder)(nil)).Elem()
}

func (i *datasetFolderPtrType) ToDatasetFolderPtrOutput() DatasetFolderPtrOutput {
	return i.ToDatasetFolderPtrOutputWithContext(context.Background())
}

func (i *datasetFolderPtrType) ToDatasetFolderPtrOutputWithContext(ctx context.Context) DatasetFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFolderPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetFolderOutput struct{ *pulumi.OutputState }

func (DatasetFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetFolder)(nil)).Elem()
}

func (o DatasetFolderOutput) ToDatasetFolderOutput() DatasetFolderOutput {
	return o
}

func (o DatasetFolderOutput) ToDatasetFolderOutputWithContext(ctx context.Context) DatasetFolderOutput {
	return o
}

func (o DatasetFolderOutput) ToDatasetFolderPtrOutput() DatasetFolderPtrOutput {
	return o.ToDatasetFolderPtrOutputWithContext(context.Background())
}

func (o DatasetFolderOutput) ToDatasetFolderPtrOutputWithContext(ctx context.Context) DatasetFolderPtrOutput {
	return o.ApplyT(func(v DatasetFolder) *DatasetFolder {
		return &v
	}).(DatasetFolderPtrOutput)
}

// The name of the folder that this Dataset is in.
func (o DatasetFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DatasetFolderPtrOutput struct{ *pulumi.OutputState }

func (DatasetFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetFolder)(nil)).Elem()
}

func (o DatasetFolderPtrOutput) ToDatasetFolderPtrOutput() DatasetFolderPtrOutput {
	return o
}

func (o DatasetFolderPtrOutput) ToDatasetFolderPtrOutputWithContext(ctx context.Context) DatasetFolderPtrOutput {
	return o
}

func (o DatasetFolderPtrOutput) Elem() DatasetFolderOutput {
	return o.ApplyT(func(v *DatasetFolder) DatasetFolder { return *v }).(DatasetFolderOutput)
}

// The name of the folder that this Dataset is in.
func (o DatasetFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The Azure Data Factory nested object which identifies data within different data stores, such as tables, files, folders, and documents.
type DatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema map[string]interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// DatasetResponseInput is an input type that accepts DatasetResponseArgs and DatasetResponseOutput values.
// You can construct a concrete instance of `DatasetResponseInput` via:
//
//          DatasetResponseArgs{...}
type DatasetResponseInput interface {
	pulumi.Input

	ToDatasetResponseOutput() DatasetResponseOutput
	ToDatasetResponseOutputWithContext(context.Context) DatasetResponseOutput
}

// The Azure Data Factory nested object which identifies data within different data stores, such as tables, files, folders, and documents.
type DatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponseFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.MapInput `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetResponse)(nil)).Elem()
}

func (i DatasetResponseArgs) ToDatasetResponseOutput() DatasetResponseOutput {
	return i.ToDatasetResponseOutputWithContext(context.Background())
}

func (i DatasetResponseArgs) ToDatasetResponseOutputWithContext(ctx context.Context) DatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetResponseOutput)
}

func (i DatasetResponseArgs) ToDatasetResponsePtrOutput() DatasetResponsePtrOutput {
	return i.ToDatasetResponsePtrOutputWithContext(context.Background())
}

func (i DatasetResponseArgs) ToDatasetResponsePtrOutputWithContext(ctx context.Context) DatasetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetResponseOutput).ToDatasetResponsePtrOutputWithContext(ctx)
}

// DatasetResponsePtrInput is an input type that accepts DatasetResponseArgs, DatasetResponsePtr and DatasetResponsePtrOutput values.
// You can construct a concrete instance of `DatasetResponsePtrInput` via:
//
//          DatasetResponseArgs{...}
//
//  or:
//
//          nil
type DatasetResponsePtrInput interface {
	pulumi.Input

	ToDatasetResponsePtrOutput() DatasetResponsePtrOutput
	ToDatasetResponsePtrOutputWithContext(context.Context) DatasetResponsePtrOutput
}

type datasetResponsePtrType DatasetResponseArgs

func DatasetResponsePtr(v *DatasetResponseArgs) DatasetResponsePtrInput {
	return (*datasetResponsePtrType)(v)
}

func (*datasetResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetResponse)(nil)).Elem()
}

func (i *datasetResponsePtrType) ToDatasetResponsePtrOutput() DatasetResponsePtrOutput {
	return i.ToDatasetResponsePtrOutputWithContext(context.Background())
}

func (i *datasetResponsePtrType) ToDatasetResponsePtrOutputWithContext(ctx context.Context) DatasetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetResponsePtrOutput)
}

// The Azure Data Factory nested object which identifies data within different data stores, such as tables, files, folders, and documents.
type DatasetResponseOutput struct{ *pulumi.OutputState }

func (DatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetResponse)(nil)).Elem()
}

func (o DatasetResponseOutput) ToDatasetResponseOutput() DatasetResponseOutput {
	return o
}

func (o DatasetResponseOutput) ToDatasetResponseOutputWithContext(ctx context.Context) DatasetResponseOutput {
	return o
}

func (o DatasetResponseOutput) ToDatasetResponsePtrOutput() DatasetResponsePtrOutput {
	return o.ToDatasetResponsePtrOutputWithContext(context.Background())
}

func (o DatasetResponseOutput) ToDatasetResponsePtrOutputWithContext(ctx context.Context) DatasetResponsePtrOutput {
	return o.ApplyT(func(v DatasetResponse) *DatasetResponse {
		return &v
	}).(DatasetResponsePtrOutput)
}

// List of tags that can be used for describing the Dataset.
func (o DatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v DatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o DatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v DatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o DatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v DatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o DatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DatasetResponseOutput) Schema() pulumi.MapOutput {
	return o.ApplyT(func(v DatasetResponse) map[string]interface{} { return v.Schema }).(pulumi.MapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v DatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o DatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

type DatasetResponsePtrOutput struct{ *pulumi.OutputState }

func (DatasetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetResponse)(nil)).Elem()
}

func (o DatasetResponsePtrOutput) ToDatasetResponsePtrOutput() DatasetResponsePtrOutput {
	return o
}

func (o DatasetResponsePtrOutput) ToDatasetResponsePtrOutputWithContext(ctx context.Context) DatasetResponsePtrOutput {
	return o
}

func (o DatasetResponsePtrOutput) Elem() DatasetResponseOutput {
	return o.ApplyT(func(v *DatasetResponse) DatasetResponse { return *v }).(DatasetResponseOutput)
}

// List of tags that can be used for describing the Dataset.
func (o DatasetResponsePtrOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *DatasetResponse) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o DatasetResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DatasetResponsePtrOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v *DatasetResponse) *DatasetResponseFolder {
		if v == nil {
			return nil
		}
		return v.Folder
	}).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o DatasetResponsePtrOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v *DatasetResponse) *LinkedServiceReferenceResponse {
		if v == nil {
			return nil
		}
		return &v.LinkedServiceName
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Parameters for dataset.
func (o DatasetResponsePtrOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v *DatasetResponse) map[string]ParameterSpecificationResponse {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DatasetResponsePtrOutput) Schema() pulumi.MapOutput {
	return o.ApplyT(func(v *DatasetResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(pulumi.MapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DatasetResponsePtrOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v *DatasetResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Structure
	}).(pulumi.MapOutput)
}

// Type of dataset.
func (o DatasetResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetResponseFolder struct {
	// The name of the folder that this Dataset is in.
	Name *string `pulumi:"name"`
}

// DatasetResponseFolderInput is an input type that accepts DatasetResponseFolderArgs and DatasetResponseFolderOutput values.
// You can construct a concrete instance of `DatasetResponseFolderInput` via:
//
//          DatasetResponseFolderArgs{...}
type DatasetResponseFolderInput interface {
	pulumi.Input

	ToDatasetResponseFolderOutput() DatasetResponseFolderOutput
	ToDatasetResponseFolderOutputWithContext(context.Context) DatasetResponseFolderOutput
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetResponseFolderArgs struct {
	// The name of the folder that this Dataset is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DatasetResponseFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetResponseFolder)(nil)).Elem()
}

func (i DatasetResponseFolderArgs) ToDatasetResponseFolderOutput() DatasetResponseFolderOutput {
	return i.ToDatasetResponseFolderOutputWithContext(context.Background())
}

func (i DatasetResponseFolderArgs) ToDatasetResponseFolderOutputWithContext(ctx context.Context) DatasetResponseFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetResponseFolderOutput)
}

func (i DatasetResponseFolderArgs) ToDatasetResponseFolderPtrOutput() DatasetResponseFolderPtrOutput {
	return i.ToDatasetResponseFolderPtrOutputWithContext(context.Background())
}

func (i DatasetResponseFolderArgs) ToDatasetResponseFolderPtrOutputWithContext(ctx context.Context) DatasetResponseFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetResponseFolderOutput).ToDatasetResponseFolderPtrOutputWithContext(ctx)
}

// DatasetResponseFolderPtrInput is an input type that accepts DatasetResponseFolderArgs, DatasetResponseFolderPtr and DatasetResponseFolderPtrOutput values.
// You can construct a concrete instance of `DatasetResponseFolderPtrInput` via:
//
//          DatasetResponseFolderArgs{...}
//
//  or:
//
//          nil
type DatasetResponseFolderPtrInput interface {
	pulumi.Input

	ToDatasetResponseFolderPtrOutput() DatasetResponseFolderPtrOutput
	ToDatasetResponseFolderPtrOutputWithContext(context.Context) DatasetResponseFolderPtrOutput
}

type datasetResponseFolderPtrType DatasetResponseFolderArgs

func DatasetResponseFolderPtr(v *DatasetResponseFolderArgs) DatasetResponseFolderPtrInput {
	return (*datasetResponseFolderPtrType)(v)
}

func (*datasetResponseFolderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetResponseFolder)(nil)).Elem()
}

func (i *datasetResponseFolderPtrType) ToDatasetResponseFolderPtrOutput() DatasetResponseFolderPtrOutput {
	return i.ToDatasetResponseFolderPtrOutputWithContext(context.Background())
}

func (i *datasetResponseFolderPtrType) ToDatasetResponseFolderPtrOutputWithContext(ctx context.Context) DatasetResponseFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetResponseFolderPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetResponseFolderOutput struct{ *pulumi.OutputState }

func (DatasetResponseFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetResponseFolder)(nil)).Elem()
}

func (o DatasetResponseFolderOutput) ToDatasetResponseFolderOutput() DatasetResponseFolderOutput {
	return o
}

func (o DatasetResponseFolderOutput) ToDatasetResponseFolderOutputWithContext(ctx context.Context) DatasetResponseFolderOutput {
	return o
}

func (o DatasetResponseFolderOutput) ToDatasetResponseFolderPtrOutput() DatasetResponseFolderPtrOutput {
	return o.ToDatasetResponseFolderPtrOutputWithContext(context.Background())
}

func (o DatasetResponseFolderOutput) ToDatasetResponseFolderPtrOutputWithContext(ctx context.Context) DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v DatasetResponseFolder) *DatasetResponseFolder {
		return &v
	}).(DatasetResponseFolderPtrOutput)
}

// The name of the folder that this Dataset is in.
func (o DatasetResponseFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetResponseFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DatasetResponseFolderPtrOutput struct{ *pulumi.OutputState }

func (DatasetResponseFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetResponseFolder)(nil)).Elem()
}

func (o DatasetResponseFolderPtrOutput) ToDatasetResponseFolderPtrOutput() DatasetResponseFolderPtrOutput {
	return o
}

func (o DatasetResponseFolderPtrOutput) ToDatasetResponseFolderPtrOutputWithContext(ctx context.Context) DatasetResponseFolderPtrOutput {
	return o
}

func (o DatasetResponseFolderPtrOutput) Elem() DatasetResponseFolderOutput {
	return o.ApplyT(func(v *DatasetResponseFolder) DatasetResponseFolder { return *v }).(DatasetResponseFolderOutput)
}

// The name of the folder that this Dataset is in.
func (o DatasetResponseFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Identity properties of the factory resource.
type FactoryIdentity struct {
	// The identity type. Currently the only supported type is 'SystemAssigned'.
	Type string `pulumi:"type"`
}

// FactoryIdentityInput is an input type that accepts FactoryIdentityArgs and FactoryIdentityOutput values.
// You can construct a concrete instance of `FactoryIdentityInput` via:
//
//          FactoryIdentityArgs{...}
type FactoryIdentityInput interface {
	pulumi.Input

	ToFactoryIdentityOutput() FactoryIdentityOutput
	ToFactoryIdentityOutputWithContext(context.Context) FactoryIdentityOutput
}

// Identity properties of the factory resource.
type FactoryIdentityArgs struct {
	// The identity type. Currently the only supported type is 'SystemAssigned'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FactoryIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentity)(nil)).Elem()
}

func (i FactoryIdentityArgs) ToFactoryIdentityOutput() FactoryIdentityOutput {
	return i.ToFactoryIdentityOutputWithContext(context.Background())
}

func (i FactoryIdentityArgs) ToFactoryIdentityOutputWithContext(ctx context.Context) FactoryIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityOutput)
}

func (i FactoryIdentityArgs) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return i.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (i FactoryIdentityArgs) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityOutput).ToFactoryIdentityPtrOutputWithContext(ctx)
}

// FactoryIdentityPtrInput is an input type that accepts FactoryIdentityArgs, FactoryIdentityPtr and FactoryIdentityPtrOutput values.
// You can construct a concrete instance of `FactoryIdentityPtrInput` via:
//
//          FactoryIdentityArgs{...}
//
//  or:
//
//          nil
type FactoryIdentityPtrInput interface {
	pulumi.Input

	ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput
	ToFactoryIdentityPtrOutputWithContext(context.Context) FactoryIdentityPtrOutput
}

type factoryIdentityPtrType FactoryIdentityArgs

func FactoryIdentityPtr(v *FactoryIdentityArgs) FactoryIdentityPtrInput {
	return (*factoryIdentityPtrType)(v)
}

func (*factoryIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentity)(nil)).Elem()
}

func (i *factoryIdentityPtrType) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return i.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (i *factoryIdentityPtrType) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityPtrOutput)
}

// Identity properties of the factory resource.
type FactoryIdentityOutput struct{ *pulumi.OutputState }

func (FactoryIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentity)(nil)).Elem()
}

func (o FactoryIdentityOutput) ToFactoryIdentityOutput() FactoryIdentityOutput {
	return o
}

func (o FactoryIdentityOutput) ToFactoryIdentityOutputWithContext(ctx context.Context) FactoryIdentityOutput {
	return o
}

func (o FactoryIdentityOutput) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return o.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (o FactoryIdentityOutput) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return o.ApplyT(func(v FactoryIdentity) *FactoryIdentity {
		return &v
	}).(FactoryIdentityPtrOutput)
}

// The identity type. Currently the only supported type is 'SystemAssigned'.
func (o FactoryIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type FactoryIdentityPtrOutput struct{ *pulumi.OutputState }

func (FactoryIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentity)(nil)).Elem()
}

func (o FactoryIdentityPtrOutput) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return o
}

func (o FactoryIdentityPtrOutput) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return o
}

func (o FactoryIdentityPtrOutput) Elem() FactoryIdentityOutput {
	return o.ApplyT(func(v *FactoryIdentity) FactoryIdentity { return *v }).(FactoryIdentityOutput)
}

// The identity type. Currently the only supported type is 'SystemAssigned'.
func (o FactoryIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Identity properties of the factory resource.
type FactoryIdentityResponse struct {
	// The principal id of the identity.
	PrincipalId string `pulumi:"principalId"`
	// The client tenant id of the identity.
	TenantId string `pulumi:"tenantId"`
	// The identity type. Currently the only supported type is 'SystemAssigned'.
	Type string `pulumi:"type"`
}

// FactoryIdentityResponseInput is an input type that accepts FactoryIdentityResponseArgs and FactoryIdentityResponseOutput values.
// You can construct a concrete instance of `FactoryIdentityResponseInput` via:
//
//          FactoryIdentityResponseArgs{...}
type FactoryIdentityResponseInput interface {
	pulumi.Input

	ToFactoryIdentityResponseOutput() FactoryIdentityResponseOutput
	ToFactoryIdentityResponseOutputWithContext(context.Context) FactoryIdentityResponseOutput
}

// Identity properties of the factory resource.
type FactoryIdentityResponseArgs struct {
	// The principal id of the identity.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The client tenant id of the identity.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The identity type. Currently the only supported type is 'SystemAssigned'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FactoryIdentityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentityResponse)(nil)).Elem()
}

func (i FactoryIdentityResponseArgs) ToFactoryIdentityResponseOutput() FactoryIdentityResponseOutput {
	return i.ToFactoryIdentityResponseOutputWithContext(context.Background())
}

func (i FactoryIdentityResponseArgs) ToFactoryIdentityResponseOutputWithContext(ctx context.Context) FactoryIdentityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityResponseOutput)
}

func (i FactoryIdentityResponseArgs) ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput {
	return i.ToFactoryIdentityResponsePtrOutputWithContext(context.Background())
}

func (i FactoryIdentityResponseArgs) ToFactoryIdentityResponsePtrOutputWithContext(ctx context.Context) FactoryIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityResponseOutput).ToFactoryIdentityResponsePtrOutputWithContext(ctx)
}

// FactoryIdentityResponsePtrInput is an input type that accepts FactoryIdentityResponseArgs, FactoryIdentityResponsePtr and FactoryIdentityResponsePtrOutput values.
// You can construct a concrete instance of `FactoryIdentityResponsePtrInput` via:
//
//          FactoryIdentityResponseArgs{...}
//
//  or:
//
//          nil
type FactoryIdentityResponsePtrInput interface {
	pulumi.Input

	ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput
	ToFactoryIdentityResponsePtrOutputWithContext(context.Context) FactoryIdentityResponsePtrOutput
}

type factoryIdentityResponsePtrType FactoryIdentityResponseArgs

func FactoryIdentityResponsePtr(v *FactoryIdentityResponseArgs) FactoryIdentityResponsePtrInput {
	return (*factoryIdentityResponsePtrType)(v)
}

func (*factoryIdentityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentityResponse)(nil)).Elem()
}

func (i *factoryIdentityResponsePtrType) ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput {
	return i.ToFactoryIdentityResponsePtrOutputWithContext(context.Background())
}

func (i *factoryIdentityResponsePtrType) ToFactoryIdentityResponsePtrOutputWithContext(ctx context.Context) FactoryIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityResponsePtrOutput)
}

// Identity properties of the factory resource.
type FactoryIdentityResponseOutput struct{ *pulumi.OutputState }

func (FactoryIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentityResponse)(nil)).Elem()
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponseOutput() FactoryIdentityResponseOutput {
	return o
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponseOutputWithContext(ctx context.Context) FactoryIdentityResponseOutput {
	return o
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput {
	return o.ToFactoryIdentityResponsePtrOutputWithContext(context.Background())
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponsePtrOutputWithContext(ctx context.Context) FactoryIdentityResponsePtrOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) *FactoryIdentityResponse {
		return &v
	}).(FactoryIdentityResponsePtrOutput)
}

// The principal id of the identity.
func (o FactoryIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The client tenant id of the identity.
func (o FactoryIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type. Currently the only supported type is 'SystemAssigned'.
func (o FactoryIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

type FactoryIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (FactoryIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentityResponse)(nil)).Elem()
}

func (o FactoryIdentityResponsePtrOutput) ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput {
	return o
}

func (o FactoryIdentityResponsePtrOutput) ToFactoryIdentityResponsePtrOutputWithContext(ctx context.Context) FactoryIdentityResponsePtrOutput {
	return o
}

func (o FactoryIdentityResponsePtrOutput) Elem() FactoryIdentityResponseOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) FactoryIdentityResponse { return *v }).(FactoryIdentityResponseOutput)
}

// The principal id of the identity.
func (o FactoryIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The client tenant id of the identity.
func (o FactoryIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type. Currently the only supported type is 'SystemAssigned'.
func (o FactoryIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Factory's git repo information.
type FactoryRepoConfiguration struct {
	// Account name.
	AccountName string `pulumi:"accountName"`
	// Collaboration branch.
	CollaborationBranch string `pulumi:"collaborationBranch"`
	// Last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// Repository name.
	RepositoryName string `pulumi:"repositoryName"`
	// Root folder.
	RootFolder string `pulumi:"rootFolder"`
	// Type of repo configuration.
	Type string `pulumi:"type"`
}

// FactoryRepoConfigurationInput is an input type that accepts FactoryRepoConfigurationArgs and FactoryRepoConfigurationOutput values.
// You can construct a concrete instance of `FactoryRepoConfigurationInput` via:
//
//          FactoryRepoConfigurationArgs{...}
type FactoryRepoConfigurationInput interface {
	pulumi.Input

	ToFactoryRepoConfigurationOutput() FactoryRepoConfigurationOutput
	ToFactoryRepoConfigurationOutputWithContext(context.Context) FactoryRepoConfigurationOutput
}

// Factory's git repo information.
type FactoryRepoConfigurationArgs struct {
	// Account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Collaboration branch.
	CollaborationBranch pulumi.StringInput `pulumi:"collaborationBranch"`
	// Last commit id.
	LastCommitId pulumi.StringPtrInput `pulumi:"lastCommitId"`
	// Repository name.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
	// Root folder.
	RootFolder pulumi.StringInput `pulumi:"rootFolder"`
	// Type of repo configuration.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FactoryRepoConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryRepoConfiguration)(nil)).Elem()
}

func (i FactoryRepoConfigurationArgs) ToFactoryRepoConfigurationOutput() FactoryRepoConfigurationOutput {
	return i.ToFactoryRepoConfigurationOutputWithContext(context.Background())
}

func (i FactoryRepoConfigurationArgs) ToFactoryRepoConfigurationOutputWithContext(ctx context.Context) FactoryRepoConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryRepoConfigurationOutput)
}

func (i FactoryRepoConfigurationArgs) ToFactoryRepoConfigurationPtrOutput() FactoryRepoConfigurationPtrOutput {
	return i.ToFactoryRepoConfigurationPtrOutputWithContext(context.Background())
}

func (i FactoryRepoConfigurationArgs) ToFactoryRepoConfigurationPtrOutputWithContext(ctx context.Context) FactoryRepoConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryRepoConfigurationOutput).ToFactoryRepoConfigurationPtrOutputWithContext(ctx)
}

// FactoryRepoConfigurationPtrInput is an input type that accepts FactoryRepoConfigurationArgs, FactoryRepoConfigurationPtr and FactoryRepoConfigurationPtrOutput values.
// You can construct a concrete instance of `FactoryRepoConfigurationPtrInput` via:
//
//          FactoryRepoConfigurationArgs{...}
//
//  or:
//
//          nil
type FactoryRepoConfigurationPtrInput interface {
	pulumi.Input

	ToFactoryRepoConfigurationPtrOutput() FactoryRepoConfigurationPtrOutput
	ToFactoryRepoConfigurationPtrOutputWithContext(context.Context) FactoryRepoConfigurationPtrOutput
}

type factoryRepoConfigurationPtrType FactoryRepoConfigurationArgs

func FactoryRepoConfigurationPtr(v *FactoryRepoConfigurationArgs) FactoryRepoConfigurationPtrInput {
	return (*factoryRepoConfigurationPtrType)(v)
}

func (*factoryRepoConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryRepoConfiguration)(nil)).Elem()
}

func (i *factoryRepoConfigurationPtrType) ToFactoryRepoConfigurationPtrOutput() FactoryRepoConfigurationPtrOutput {
	return i.ToFactoryRepoConfigurationPtrOutputWithContext(context.Background())
}

func (i *factoryRepoConfigurationPtrType) ToFactoryRepoConfigurationPtrOutputWithContext(ctx context.Context) FactoryRepoConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryRepoConfigurationPtrOutput)
}

// Factory's git repo information.
type FactoryRepoConfigurationOutput struct{ *pulumi.OutputState }

func (FactoryRepoConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryRepoConfiguration)(nil)).Elem()
}

func (o FactoryRepoConfigurationOutput) ToFactoryRepoConfigurationOutput() FactoryRepoConfigurationOutput {
	return o
}

func (o FactoryRepoConfigurationOutput) ToFactoryRepoConfigurationOutputWithContext(ctx context.Context) FactoryRepoConfigurationOutput {
	return o
}

func (o FactoryRepoConfigurationOutput) ToFactoryRepoConfigurationPtrOutput() FactoryRepoConfigurationPtrOutput {
	return o.ToFactoryRepoConfigurationPtrOutputWithContext(context.Background())
}

func (o FactoryRepoConfigurationOutput) ToFactoryRepoConfigurationPtrOutputWithContext(ctx context.Context) FactoryRepoConfigurationPtrOutput {
	return o.ApplyT(func(v FactoryRepoConfiguration) *FactoryRepoConfiguration {
		return &v
	}).(FactoryRepoConfigurationPtrOutput)
}

// Account name.
func (o FactoryRepoConfigurationOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryRepoConfiguration) string { return v.AccountName }).(pulumi.StringOutput)
}

// Collaboration branch.
func (o FactoryRepoConfigurationOutput) CollaborationBranch() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryRepoConfiguration) string { return v.CollaborationBranch }).(pulumi.StringOutput)
}

// Last commit id.
func (o FactoryRepoConfigurationOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryRepoConfiguration) *string { return v.LastCommitId }).(pulumi.StringPtrOutput)
}

// Repository name.
func (o FactoryRepoConfigurationOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryRepoConfiguration) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// Root folder.
func (o FactoryRepoConfigurationOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryRepoConfiguration) string { return v.RootFolder }).(pulumi.StringOutput)
}

// Type of repo configuration.
func (o FactoryRepoConfigurationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryRepoConfiguration) string { return v.Type }).(pulumi.StringOutput)
}

type FactoryRepoConfigurationPtrOutput struct{ *pulumi.OutputState }

func (FactoryRepoConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryRepoConfiguration)(nil)).Elem()
}

func (o FactoryRepoConfigurationPtrOutput) ToFactoryRepoConfigurationPtrOutput() FactoryRepoConfigurationPtrOutput {
	return o
}

func (o FactoryRepoConfigurationPtrOutput) ToFactoryRepoConfigurationPtrOutputWithContext(ctx context.Context) FactoryRepoConfigurationPtrOutput {
	return o
}

func (o FactoryRepoConfigurationPtrOutput) Elem() FactoryRepoConfigurationOutput {
	return o.ApplyT(func(v *FactoryRepoConfiguration) FactoryRepoConfiguration { return *v }).(FactoryRepoConfigurationOutput)
}

// Account name.
func (o FactoryRepoConfigurationPtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.AccountName
	}).(pulumi.StringPtrOutput)
}

// Collaboration branch.
func (o FactoryRepoConfigurationPtrOutput) CollaborationBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.CollaborationBranch
	}).(pulumi.StringPtrOutput)
}

// Last commit id.
func (o FactoryRepoConfigurationPtrOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.LastCommitId
	}).(pulumi.StringPtrOutput)
}

// Repository name.
func (o FactoryRepoConfigurationPtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// Root folder.
func (o FactoryRepoConfigurationPtrOutput) RootFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.RootFolder
	}).(pulumi.StringPtrOutput)
}

// Type of repo configuration.
func (o FactoryRepoConfigurationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Factory's git repo information.
type FactoryRepoConfigurationResponse struct {
	// Account name.
	AccountName string `pulumi:"accountName"`
	// Collaboration branch.
	CollaborationBranch string `pulumi:"collaborationBranch"`
	// Last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// Repository name.
	RepositoryName string `pulumi:"repositoryName"`
	// Root folder.
	RootFolder string `pulumi:"rootFolder"`
	// Type of repo configuration.
	Type string `pulumi:"type"`
}

// FactoryRepoConfigurationResponseInput is an input type that accepts FactoryRepoConfigurationResponseArgs and FactoryRepoConfigurationResponseOutput values.
// You can construct a concrete instance of `FactoryRepoConfigurationResponseInput` via:
//
//          FactoryRepoConfigurationResponseArgs{...}
type FactoryRepoConfigurationResponseInput interface {
	pulumi.Input

	ToFactoryRepoConfigurationResponseOutput() FactoryRepoConfigurationResponseOutput
	ToFactoryRepoConfigurationResponseOutputWithContext(context.Context) FactoryRepoConfigurationResponseOutput
}

// Factory's git repo information.
type FactoryRepoConfigurationResponseArgs struct {
	// Account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Collaboration branch.
	CollaborationBranch pulumi.StringInput `pulumi:"collaborationBranch"`
	// Last commit id.
	LastCommitId pulumi.StringPtrInput `pulumi:"lastCommitId"`
	// Repository name.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
	// Root folder.
	RootFolder pulumi.StringInput `pulumi:"rootFolder"`
	// Type of repo configuration.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FactoryRepoConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryRepoConfigurationResponse)(nil)).Elem()
}

func (i FactoryRepoConfigurationResponseArgs) ToFactoryRepoConfigurationResponseOutput() FactoryRepoConfigurationResponseOutput {
	return i.ToFactoryRepoConfigurationResponseOutputWithContext(context.Background())
}

func (i FactoryRepoConfigurationResponseArgs) ToFactoryRepoConfigurationResponseOutputWithContext(ctx context.Context) FactoryRepoConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryRepoConfigurationResponseOutput)
}

func (i FactoryRepoConfigurationResponseArgs) ToFactoryRepoConfigurationResponsePtrOutput() FactoryRepoConfigurationResponsePtrOutput {
	return i.ToFactoryRepoConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i FactoryRepoConfigurationResponseArgs) ToFactoryRepoConfigurationResponsePtrOutputWithContext(ctx context.Context) FactoryRepoConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryRepoConfigurationResponseOutput).ToFactoryRepoConfigurationResponsePtrOutputWithContext(ctx)
}

// FactoryRepoConfigurationResponsePtrInput is an input type that accepts FactoryRepoConfigurationResponseArgs, FactoryRepoConfigurationResponsePtr and FactoryRepoConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `FactoryRepoConfigurationResponsePtrInput` via:
//
//          FactoryRepoConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type FactoryRepoConfigurationResponsePtrInput interface {
	pulumi.Input

	ToFactoryRepoConfigurationResponsePtrOutput() FactoryRepoConfigurationResponsePtrOutput
	ToFactoryRepoConfigurationResponsePtrOutputWithContext(context.Context) FactoryRepoConfigurationResponsePtrOutput
}

type factoryRepoConfigurationResponsePtrType FactoryRepoConfigurationResponseArgs

func FactoryRepoConfigurationResponsePtr(v *FactoryRepoConfigurationResponseArgs) FactoryRepoConfigurationResponsePtrInput {
	return (*factoryRepoConfigurationResponsePtrType)(v)
}

func (*factoryRepoConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryRepoConfigurationResponse)(nil)).Elem()
}

func (i *factoryRepoConfigurationResponsePtrType) ToFactoryRepoConfigurationResponsePtrOutput() FactoryRepoConfigurationResponsePtrOutput {
	return i.ToFactoryRepoConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *factoryRepoConfigurationResponsePtrType) ToFactoryRepoConfigurationResponsePtrOutputWithContext(ctx context.Context) FactoryRepoConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryRepoConfigurationResponsePtrOutput)
}

// Factory's git repo information.
type FactoryRepoConfigurationResponseOutput struct{ *pulumi.OutputState }

func (FactoryRepoConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryRepoConfigurationResponse)(nil)).Elem()
}

func (o FactoryRepoConfigurationResponseOutput) ToFactoryRepoConfigurationResponseOutput() FactoryRepoConfigurationResponseOutput {
	return o
}

func (o FactoryRepoConfigurationResponseOutput) ToFactoryRepoConfigurationResponseOutputWithContext(ctx context.Context) FactoryRepoConfigurationResponseOutput {
	return o
}

func (o FactoryRepoConfigurationResponseOutput) ToFactoryRepoConfigurationResponsePtrOutput() FactoryRepoConfigurationResponsePtrOutput {
	return o.ToFactoryRepoConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o FactoryRepoConfigurationResponseOutput) ToFactoryRepoConfigurationResponsePtrOutputWithContext(ctx context.Context) FactoryRepoConfigurationResponsePtrOutput {
	return o.ApplyT(func(v FactoryRepoConfigurationResponse) *FactoryRepoConfigurationResponse {
		return &v
	}).(FactoryRepoConfigurationResponsePtrOutput)
}

// Account name.
func (o FactoryRepoConfigurationResponseOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryRepoConfigurationResponse) string { return v.AccountName }).(pulumi.StringOutput)
}

// Collaboration branch.
func (o FactoryRepoConfigurationResponseOutput) CollaborationBranch() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryRepoConfigurationResponse) string { return v.CollaborationBranch }).(pulumi.StringOutput)
}

// Last commit id.
func (o FactoryRepoConfigurationResponseOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryRepoConfigurationResponse) *string { return v.LastCommitId }).(pulumi.StringPtrOutput)
}

// Repository name.
func (o FactoryRepoConfigurationResponseOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryRepoConfigurationResponse) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// Root folder.
func (o FactoryRepoConfigurationResponseOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryRepoConfigurationResponse) string { return v.RootFolder }).(pulumi.StringOutput)
}

// Type of repo configuration.
func (o FactoryRepoConfigurationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryRepoConfigurationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type FactoryRepoConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (FactoryRepoConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryRepoConfigurationResponse)(nil)).Elem()
}

func (o FactoryRepoConfigurationResponsePtrOutput) ToFactoryRepoConfigurationResponsePtrOutput() FactoryRepoConfigurationResponsePtrOutput {
	return o
}

func (o FactoryRepoConfigurationResponsePtrOutput) ToFactoryRepoConfigurationResponsePtrOutputWithContext(ctx context.Context) FactoryRepoConfigurationResponsePtrOutput {
	return o
}

func (o FactoryRepoConfigurationResponsePtrOutput) Elem() FactoryRepoConfigurationResponseOutput {
	return o.ApplyT(func(v *FactoryRepoConfigurationResponse) FactoryRepoConfigurationResponse { return *v }).(FactoryRepoConfigurationResponseOutput)
}

// Account name.
func (o FactoryRepoConfigurationResponsePtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AccountName
	}).(pulumi.StringPtrOutput)
}

// Collaboration branch.
func (o FactoryRepoConfigurationResponsePtrOutput) CollaborationBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CollaborationBranch
	}).(pulumi.StringPtrOutput)
}

// Last commit id.
func (o FactoryRepoConfigurationResponsePtrOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastCommitId
	}).(pulumi.StringPtrOutput)
}

// Repository name.
func (o FactoryRepoConfigurationResponsePtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// Root folder.
func (o FactoryRepoConfigurationResponsePtrOutput) RootFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RootFolder
	}).(pulumi.StringPtrOutput)
}

// Type of repo configuration.
func (o FactoryRepoConfigurationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecification struct {
	// Global Parameter type.
	Type string `pulumi:"type"`
	// Value of parameter.
	Value map[string]interface{} `pulumi:"value"`
}

// GlobalParameterSpecificationInput is an input type that accepts GlobalParameterSpecificationArgs and GlobalParameterSpecificationOutput values.
// You can construct a concrete instance of `GlobalParameterSpecificationInput` via:
//
//          GlobalParameterSpecificationArgs{...}
type GlobalParameterSpecificationInput interface {
	pulumi.Input

	ToGlobalParameterSpecificationOutput() GlobalParameterSpecificationOutput
	ToGlobalParameterSpecificationOutputWithContext(context.Context) GlobalParameterSpecificationOutput
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecificationArgs struct {
	// Global Parameter type.
	Type pulumi.StringInput `pulumi:"type"`
	// Value of parameter.
	Value pulumi.MapInput `pulumi:"value"`
}

func (GlobalParameterSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalParameterSpecification)(nil)).Elem()
}

func (i GlobalParameterSpecificationArgs) ToGlobalParameterSpecificationOutput() GlobalParameterSpecificationOutput {
	return i.ToGlobalParameterSpecificationOutputWithContext(context.Background())
}

func (i GlobalParameterSpecificationArgs) ToGlobalParameterSpecificationOutputWithContext(ctx context.Context) GlobalParameterSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalParameterSpecificationOutput)
}

// GlobalParameterSpecificationMapInput is an input type that accepts GlobalParameterSpecificationMap and GlobalParameterSpecificationMapOutput values.
// You can construct a concrete instance of `GlobalParameterSpecificationMapInput` via:
//
//          GlobalParameterSpecificationMap{ "key": GlobalParameterSpecificationArgs{...} }
type GlobalParameterSpecificationMapInput interface {
	pulumi.Input

	ToGlobalParameterSpecificationMapOutput() GlobalParameterSpecificationMapOutput
	ToGlobalParameterSpecificationMapOutputWithContext(context.Context) GlobalParameterSpecificationMapOutput
}

type GlobalParameterSpecificationMap map[string]GlobalParameterSpecificationInput

func (GlobalParameterSpecificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GlobalParameterSpecification)(nil)).Elem()
}

func (i GlobalParameterSpecificationMap) ToGlobalParameterSpecificationMapOutput() GlobalParameterSpecificationMapOutput {
	return i.ToGlobalParameterSpecificationMapOutputWithContext(context.Background())
}

func (i GlobalParameterSpecificationMap) ToGlobalParameterSpecificationMapOutputWithContext(ctx context.Context) GlobalParameterSpecificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalParameterSpecificationMapOutput)
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecificationOutput struct{ *pulumi.OutputState }

func (GlobalParameterSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalParameterSpecification)(nil)).Elem()
}

func (o GlobalParameterSpecificationOutput) ToGlobalParameterSpecificationOutput() GlobalParameterSpecificationOutput {
	return o
}

func (o GlobalParameterSpecificationOutput) ToGlobalParameterSpecificationOutputWithContext(ctx context.Context) GlobalParameterSpecificationOutput {
	return o
}

// Global Parameter type.
func (o GlobalParameterSpecificationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalParameterSpecification) string { return v.Type }).(pulumi.StringOutput)
}

// Value of parameter.
func (o GlobalParameterSpecificationOutput) Value() pulumi.MapOutput {
	return o.ApplyT(func(v GlobalParameterSpecification) map[string]interface{} { return v.Value }).(pulumi.MapOutput)
}

type GlobalParameterSpecificationMapOutput struct{ *pulumi.OutputState }

func (GlobalParameterSpecificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GlobalParameterSpecification)(nil)).Elem()
}

func (o GlobalParameterSpecificationMapOutput) ToGlobalParameterSpecificationMapOutput() GlobalParameterSpecificationMapOutput {
	return o
}

func (o GlobalParameterSpecificationMapOutput) ToGlobalParameterSpecificationMapOutputWithContext(ctx context.Context) GlobalParameterSpecificationMapOutput {
	return o
}

func (o GlobalParameterSpecificationMapOutput) MapIndex(k pulumi.StringInput) GlobalParameterSpecificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GlobalParameterSpecification {
		return vs[0].(map[string]GlobalParameterSpecification)[vs[1].(string)]
	}).(GlobalParameterSpecificationOutput)
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecificationResponse struct {
	// Global Parameter type.
	Type string `pulumi:"type"`
	// Value of parameter.
	Value map[string]interface{} `pulumi:"value"`
}

// GlobalParameterSpecificationResponseInput is an input type that accepts GlobalParameterSpecificationResponseArgs and GlobalParameterSpecificationResponseOutput values.
// You can construct a concrete instance of `GlobalParameterSpecificationResponseInput` via:
//
//          GlobalParameterSpecificationResponseArgs{...}
type GlobalParameterSpecificationResponseInput interface {
	pulumi.Input

	ToGlobalParameterSpecificationResponseOutput() GlobalParameterSpecificationResponseOutput
	ToGlobalParameterSpecificationResponseOutputWithContext(context.Context) GlobalParameterSpecificationResponseOutput
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecificationResponseArgs struct {
	// Global Parameter type.
	Type pulumi.StringInput `pulumi:"type"`
	// Value of parameter.
	Value pulumi.MapInput `pulumi:"value"`
}

func (GlobalParameterSpecificationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalParameterSpecificationResponse)(nil)).Elem()
}

func (i GlobalParameterSpecificationResponseArgs) ToGlobalParameterSpecificationResponseOutput() GlobalParameterSpecificationResponseOutput {
	return i.ToGlobalParameterSpecificationResponseOutputWithContext(context.Background())
}

func (i GlobalParameterSpecificationResponseArgs) ToGlobalParameterSpecificationResponseOutputWithContext(ctx context.Context) GlobalParameterSpecificationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalParameterSpecificationResponseOutput)
}

// GlobalParameterSpecificationResponseMapInput is an input type that accepts GlobalParameterSpecificationResponseMap and GlobalParameterSpecificationResponseMapOutput values.
// You can construct a concrete instance of `GlobalParameterSpecificationResponseMapInput` via:
//
//          GlobalParameterSpecificationResponseMap{ "key": GlobalParameterSpecificationResponseArgs{...} }
type GlobalParameterSpecificationResponseMapInput interface {
	pulumi.Input

	ToGlobalParameterSpecificationResponseMapOutput() GlobalParameterSpecificationResponseMapOutput
	ToGlobalParameterSpecificationResponseMapOutputWithContext(context.Context) GlobalParameterSpecificationResponseMapOutput
}

type GlobalParameterSpecificationResponseMap map[string]GlobalParameterSpecificationResponseInput

func (GlobalParameterSpecificationResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GlobalParameterSpecificationResponse)(nil)).Elem()
}

func (i GlobalParameterSpecificationResponseMap) ToGlobalParameterSpecificationResponseMapOutput() GlobalParameterSpecificationResponseMapOutput {
	return i.ToGlobalParameterSpecificationResponseMapOutputWithContext(context.Background())
}

func (i GlobalParameterSpecificationResponseMap) ToGlobalParameterSpecificationResponseMapOutputWithContext(ctx context.Context) GlobalParameterSpecificationResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalParameterSpecificationResponseMapOutput)
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecificationResponseOutput struct{ *pulumi.OutputState }

func (GlobalParameterSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalParameterSpecificationResponse)(nil)).Elem()
}

func (o GlobalParameterSpecificationResponseOutput) ToGlobalParameterSpecificationResponseOutput() GlobalParameterSpecificationResponseOutput {
	return o
}

func (o GlobalParameterSpecificationResponseOutput) ToGlobalParameterSpecificationResponseOutputWithContext(ctx context.Context) GlobalParameterSpecificationResponseOutput {
	return o
}

// Global Parameter type.
func (o GlobalParameterSpecificationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalParameterSpecificationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Value of parameter.
func (o GlobalParameterSpecificationResponseOutput) Value() pulumi.MapOutput {
	return o.ApplyT(func(v GlobalParameterSpecificationResponse) map[string]interface{} { return v.Value }).(pulumi.MapOutput)
}

type GlobalParameterSpecificationResponseMapOutput struct{ *pulumi.OutputState }

func (GlobalParameterSpecificationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GlobalParameterSpecificationResponse)(nil)).Elem()
}

func (o GlobalParameterSpecificationResponseMapOutput) ToGlobalParameterSpecificationResponseMapOutput() GlobalParameterSpecificationResponseMapOutput {
	return o
}

func (o GlobalParameterSpecificationResponseMapOutput) ToGlobalParameterSpecificationResponseMapOutputWithContext(ctx context.Context) GlobalParameterSpecificationResponseMapOutput {
	return o
}

func (o GlobalParameterSpecificationResponseMapOutput) MapIndex(k pulumi.StringInput) GlobalParameterSpecificationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GlobalParameterSpecificationResponse {
		return vs[0].(map[string]GlobalParameterSpecificationResponse)[vs[1].(string)]
	}).(GlobalParameterSpecificationResponseOutput)
}

// Azure Data Factory nested object which serves as a compute resource for activities.
type IntegrationRuntimeType struct {
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// IntegrationRuntimeTypeInput is an input type that accepts IntegrationRuntimeTypeArgs and IntegrationRuntimeTypeOutput values.
// You can construct a concrete instance of `IntegrationRuntimeTypeInput` via:
//
//          IntegrationRuntimeTypeArgs{...}
type IntegrationRuntimeTypeInput interface {
	pulumi.Input

	ToIntegrationRuntimeTypeOutput() IntegrationRuntimeTypeOutput
	ToIntegrationRuntimeTypeOutputWithContext(context.Context) IntegrationRuntimeTypeOutput
}

// Azure Data Factory nested object which serves as a compute resource for activities.
type IntegrationRuntimeTypeArgs struct {
	// Integration runtime description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IntegrationRuntimeTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeType)(nil)).Elem()
}

func (i IntegrationRuntimeTypeArgs) ToIntegrationRuntimeTypeOutput() IntegrationRuntimeTypeOutput {
	return i.ToIntegrationRuntimeTypeOutputWithContext(context.Background())
}

func (i IntegrationRuntimeTypeArgs) ToIntegrationRuntimeTypeOutputWithContext(ctx context.Context) IntegrationRuntimeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeTypeOutput)
}

func (i IntegrationRuntimeTypeArgs) ToIntegrationRuntimeTypePtrOutput() IntegrationRuntimeTypePtrOutput {
	return i.ToIntegrationRuntimeTypePtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeTypeArgs) ToIntegrationRuntimeTypePtrOutputWithContext(ctx context.Context) IntegrationRuntimeTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeTypeOutput).ToIntegrationRuntimeTypePtrOutputWithContext(ctx)
}

// IntegrationRuntimeTypePtrInput is an input type that accepts IntegrationRuntimeTypeArgs, IntegrationRuntimeTypePtr and IntegrationRuntimeTypePtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeTypePtrInput` via:
//
//          IntegrationRuntimeTypeArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeTypePtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeTypePtrOutput() IntegrationRuntimeTypePtrOutput
	ToIntegrationRuntimeTypePtrOutputWithContext(context.Context) IntegrationRuntimeTypePtrOutput
}

type integrationRuntimeTypePtrType IntegrationRuntimeTypeArgs

func IntegrationRuntimeTypePtr(v *IntegrationRuntimeTypeArgs) IntegrationRuntimeTypePtrInput {
	return (*integrationRuntimeTypePtrType)(v)
}

func (*integrationRuntimeTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeType)(nil)).Elem()
}

func (i *integrationRuntimeTypePtrType) ToIntegrationRuntimeTypePtrOutput() IntegrationRuntimeTypePtrOutput {
	return i.ToIntegrationRuntimeTypePtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeTypePtrType) ToIntegrationRuntimeTypePtrOutputWithContext(ctx context.Context) IntegrationRuntimeTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeTypePtrOutput)
}

// Azure Data Factory nested object which serves as a compute resource for activities.
type IntegrationRuntimeTypeOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeType)(nil)).Elem()
}

func (o IntegrationRuntimeTypeOutput) ToIntegrationRuntimeTypeOutput() IntegrationRuntimeTypeOutput {
	return o
}

func (o IntegrationRuntimeTypeOutput) ToIntegrationRuntimeTypeOutputWithContext(ctx context.Context) IntegrationRuntimeTypeOutput {
	return o
}

func (o IntegrationRuntimeTypeOutput) ToIntegrationRuntimeTypePtrOutput() IntegrationRuntimeTypePtrOutput {
	return o.ToIntegrationRuntimeTypePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeTypeOutput) ToIntegrationRuntimeTypePtrOutputWithContext(ctx context.Context) IntegrationRuntimeTypePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeType) *IntegrationRuntimeType {
		return &v
	}).(IntegrationRuntimeTypePtrOutput)
}

// Integration runtime description.
func (o IntegrationRuntimeTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeType) string { return v.Type }).(pulumi.StringOutput)
}

type IntegrationRuntimeTypePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeType)(nil)).Elem()
}

func (o IntegrationRuntimeTypePtrOutput) ToIntegrationRuntimeTypePtrOutput() IntegrationRuntimeTypePtrOutput {
	return o
}

func (o IntegrationRuntimeTypePtrOutput) ToIntegrationRuntimeTypePtrOutputWithContext(ctx context.Context) IntegrationRuntimeTypePtrOutput {
	return o
}

func (o IntegrationRuntimeTypePtrOutput) Elem() IntegrationRuntimeTypeOutput {
	return o.ApplyT(func(v *IntegrationRuntimeType) IntegrationRuntimeType { return *v }).(IntegrationRuntimeTypeOutput)
}

// Integration runtime description.
func (o IntegrationRuntimeTypePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeType) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeTypePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeType) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Integration runtime reference type.
type IntegrationRuntimeReference struct {
	// Arguments for integration runtime.
	Parameters map[string]map[string]interface{} `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName string `pulumi:"referenceName"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// IntegrationRuntimeReferenceInput is an input type that accepts IntegrationRuntimeReferenceArgs and IntegrationRuntimeReferenceOutput values.
// You can construct a concrete instance of `IntegrationRuntimeReferenceInput` via:
//
//          IntegrationRuntimeReferenceArgs{...}
type IntegrationRuntimeReferenceInput interface {
	pulumi.Input

	ToIntegrationRuntimeReferenceOutput() IntegrationRuntimeReferenceOutput
	ToIntegrationRuntimeReferenceOutputWithContext(context.Context) IntegrationRuntimeReferenceOutput
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceArgs struct {
	// Arguments for integration runtime.
	Parameters pulumi.MapMapInput `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IntegrationRuntimeReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeReference)(nil)).Elem()
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferenceOutput() IntegrationRuntimeReferenceOutput {
	return i.ToIntegrationRuntimeReferenceOutputWithContext(context.Background())
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferenceOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceOutput)
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput {
	return i.ToIntegrationRuntimeReferencePtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferencePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceOutput).ToIntegrationRuntimeReferencePtrOutputWithContext(ctx)
}

// IntegrationRuntimeReferencePtrInput is an input type that accepts IntegrationRuntimeReferenceArgs, IntegrationRuntimeReferencePtr and IntegrationRuntimeReferencePtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeReferencePtrInput` via:
//
//          IntegrationRuntimeReferenceArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeReferencePtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput
	ToIntegrationRuntimeReferencePtrOutputWithContext(context.Context) IntegrationRuntimeReferencePtrOutput
}

type integrationRuntimeReferencePtrType IntegrationRuntimeReferenceArgs

func IntegrationRuntimeReferencePtr(v *IntegrationRuntimeReferenceArgs) IntegrationRuntimeReferencePtrInput {
	return (*integrationRuntimeReferencePtrType)(v)
}

func (*integrationRuntimeReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeReference)(nil)).Elem()
}

func (i *integrationRuntimeReferencePtrType) ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput {
	return i.ToIntegrationRuntimeReferencePtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeReferencePtrType) ToIntegrationRuntimeReferencePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferencePtrOutput)
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeReference)(nil)).Elem()
}

func (o IntegrationRuntimeReferenceOutput) ToIntegrationRuntimeReferenceOutput() IntegrationRuntimeReferenceOutput {
	return o
}

func (o IntegrationRuntimeReferenceOutput) ToIntegrationRuntimeReferenceOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceOutput {
	return o
}

func (o IntegrationRuntimeReferenceOutput) ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput {
	return o.ToIntegrationRuntimeReferencePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeReferenceOutput) ToIntegrationRuntimeReferencePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeReference) *IntegrationRuntimeReference {
		return &v
	}).(IntegrationRuntimeReferencePtrOutput)
}

// Arguments for integration runtime.
func (o IntegrationRuntimeReferenceOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v IntegrationRuntimeReference) map[string]map[string]interface{} { return v.Parameters }).(pulumi.MapMapOutput)
}

// Reference integration runtime name.
func (o IntegrationRuntimeReferenceOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeReference) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeReference) string { return v.Type }).(pulumi.StringOutput)
}

type IntegrationRuntimeReferencePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeReference)(nil)).Elem()
}

func (o IntegrationRuntimeReferencePtrOutput) ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput {
	return o
}

func (o IntegrationRuntimeReferencePtrOutput) ToIntegrationRuntimeReferencePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferencePtrOutput {
	return o
}

func (o IntegrationRuntimeReferencePtrOutput) Elem() IntegrationRuntimeReferenceOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReference) IntegrationRuntimeReference { return *v }).(IntegrationRuntimeReferenceOutput)
}

// Arguments for integration runtime.
func (o IntegrationRuntimeReferencePtrOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReference) map[string]map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapMapOutput)
}

// Reference integration runtime name.
func (o IntegrationRuntimeReferencePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReference) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceResponse struct {
	// Arguments for integration runtime.
	Parameters map[string]map[string]interface{} `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName string `pulumi:"referenceName"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// IntegrationRuntimeReferenceResponseInput is an input type that accepts IntegrationRuntimeReferenceResponseArgs and IntegrationRuntimeReferenceResponseOutput values.
// You can construct a concrete instance of `IntegrationRuntimeReferenceResponseInput` via:
//
//          IntegrationRuntimeReferenceResponseArgs{...}
type IntegrationRuntimeReferenceResponseInput interface {
	pulumi.Input

	ToIntegrationRuntimeReferenceResponseOutput() IntegrationRuntimeReferenceResponseOutput
	ToIntegrationRuntimeReferenceResponseOutputWithContext(context.Context) IntegrationRuntimeReferenceResponseOutput
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceResponseArgs struct {
	// Arguments for integration runtime.
	Parameters pulumi.MapMapInput `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IntegrationRuntimeReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeReferenceResponse)(nil)).Elem()
}

func (i IntegrationRuntimeReferenceResponseArgs) ToIntegrationRuntimeReferenceResponseOutput() IntegrationRuntimeReferenceResponseOutput {
	return i.ToIntegrationRuntimeReferenceResponseOutputWithContext(context.Background())
}

func (i IntegrationRuntimeReferenceResponseArgs) ToIntegrationRuntimeReferenceResponseOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceResponseOutput)
}

func (i IntegrationRuntimeReferenceResponseArgs) ToIntegrationRuntimeReferenceResponsePtrOutput() IntegrationRuntimeReferenceResponsePtrOutput {
	return i.ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeReferenceResponseArgs) ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceResponseOutput).ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(ctx)
}

// IntegrationRuntimeReferenceResponsePtrInput is an input type that accepts IntegrationRuntimeReferenceResponseArgs, IntegrationRuntimeReferenceResponsePtr and IntegrationRuntimeReferenceResponsePtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeReferenceResponsePtrInput` via:
//
//          IntegrationRuntimeReferenceResponseArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeReferenceResponsePtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeReferenceResponsePtrOutput() IntegrationRuntimeReferenceResponsePtrOutput
	ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(context.Context) IntegrationRuntimeReferenceResponsePtrOutput
}

type integrationRuntimeReferenceResponsePtrType IntegrationRuntimeReferenceResponseArgs

func IntegrationRuntimeReferenceResponsePtr(v *IntegrationRuntimeReferenceResponseArgs) IntegrationRuntimeReferenceResponsePtrInput {
	return (*integrationRuntimeReferenceResponsePtrType)(v)
}

func (*integrationRuntimeReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeReferenceResponse)(nil)).Elem()
}

func (i *integrationRuntimeReferenceResponsePtrType) ToIntegrationRuntimeReferenceResponsePtrOutput() IntegrationRuntimeReferenceResponsePtrOutput {
	return i.ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeReferenceResponsePtrType) ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeReferenceResponse)(nil)).Elem()
}

func (o IntegrationRuntimeReferenceResponseOutput) ToIntegrationRuntimeReferenceResponseOutput() IntegrationRuntimeReferenceResponseOutput {
	return o
}

func (o IntegrationRuntimeReferenceResponseOutput) ToIntegrationRuntimeReferenceResponseOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponseOutput {
	return o
}

func (o IntegrationRuntimeReferenceResponseOutput) ToIntegrationRuntimeReferenceResponsePtrOutput() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeReferenceResponseOutput) ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeReferenceResponse) *IntegrationRuntimeReferenceResponse {
		return &v
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Arguments for integration runtime.
func (o IntegrationRuntimeReferenceResponseOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v IntegrationRuntimeReferenceResponse) map[string]map[string]interface{} { return v.Parameters }).(pulumi.MapMapOutput)
}

// Reference integration runtime name.
func (o IntegrationRuntimeReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type IntegrationRuntimeReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeReferenceResponse)(nil)).Elem()
}

func (o IntegrationRuntimeReferenceResponsePtrOutput) ToIntegrationRuntimeReferenceResponsePtrOutput() IntegrationRuntimeReferenceResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeReferenceResponsePtrOutput) ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeReferenceResponsePtrOutput) Elem() IntegrationRuntimeReferenceResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) IntegrationRuntimeReferenceResponse { return *v }).(IntegrationRuntimeReferenceResponseOutput)
}

// Arguments for integration runtime.
func (o IntegrationRuntimeReferenceResponsePtrOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) map[string]map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapMapOutput)
}

// Reference integration runtime name.
func (o IntegrationRuntimeReferenceResponsePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure Data Factory nested object which serves as a compute resource for activities.
type IntegrationRuntimeResponse struct {
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// IntegrationRuntimeResponseInput is an input type that accepts IntegrationRuntimeResponseArgs and IntegrationRuntimeResponseOutput values.
// You can construct a concrete instance of `IntegrationRuntimeResponseInput` via:
//
//          IntegrationRuntimeResponseArgs{...}
type IntegrationRuntimeResponseInput interface {
	pulumi.Input

	ToIntegrationRuntimeResponseOutput() IntegrationRuntimeResponseOutput
	ToIntegrationRuntimeResponseOutputWithContext(context.Context) IntegrationRuntimeResponseOutput
}

// Azure Data Factory nested object which serves as a compute resource for activities.
type IntegrationRuntimeResponseArgs struct {
	// Integration runtime description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IntegrationRuntimeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeResponse)(nil)).Elem()
}

func (i IntegrationRuntimeResponseArgs) ToIntegrationRuntimeResponseOutput() IntegrationRuntimeResponseOutput {
	return i.ToIntegrationRuntimeResponseOutputWithContext(context.Background())
}

func (i IntegrationRuntimeResponseArgs) ToIntegrationRuntimeResponseOutputWithContext(ctx context.Context) IntegrationRuntimeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeResponseOutput)
}

func (i IntegrationRuntimeResponseArgs) ToIntegrationRuntimeResponsePtrOutput() IntegrationRuntimeResponsePtrOutput {
	return i.ToIntegrationRuntimeResponsePtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeResponseArgs) ToIntegrationRuntimeResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeResponseOutput).ToIntegrationRuntimeResponsePtrOutputWithContext(ctx)
}

// IntegrationRuntimeResponsePtrInput is an input type that accepts IntegrationRuntimeResponseArgs, IntegrationRuntimeResponsePtr and IntegrationRuntimeResponsePtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeResponsePtrInput` via:
//
//          IntegrationRuntimeResponseArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeResponsePtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeResponsePtrOutput() IntegrationRuntimeResponsePtrOutput
	ToIntegrationRuntimeResponsePtrOutputWithContext(context.Context) IntegrationRuntimeResponsePtrOutput
}

type integrationRuntimeResponsePtrType IntegrationRuntimeResponseArgs

func IntegrationRuntimeResponsePtr(v *IntegrationRuntimeResponseArgs) IntegrationRuntimeResponsePtrInput {
	return (*integrationRuntimeResponsePtrType)(v)
}

func (*integrationRuntimeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeResponse)(nil)).Elem()
}

func (i *integrationRuntimeResponsePtrType) ToIntegrationRuntimeResponsePtrOutput() IntegrationRuntimeResponsePtrOutput {
	return i.ToIntegrationRuntimeResponsePtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeResponsePtrType) ToIntegrationRuntimeResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeResponsePtrOutput)
}

// Azure Data Factory nested object which serves as a compute resource for activities.
type IntegrationRuntimeResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeResponse)(nil)).Elem()
}

func (o IntegrationRuntimeResponseOutput) ToIntegrationRuntimeResponseOutput() IntegrationRuntimeResponseOutput {
	return o
}

func (o IntegrationRuntimeResponseOutput) ToIntegrationRuntimeResponseOutputWithContext(ctx context.Context) IntegrationRuntimeResponseOutput {
	return o
}

func (o IntegrationRuntimeResponseOutput) ToIntegrationRuntimeResponsePtrOutput() IntegrationRuntimeResponsePtrOutput {
	return o.ToIntegrationRuntimeResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeResponseOutput) ToIntegrationRuntimeResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeResponse) *IntegrationRuntimeResponse {
		return &v
	}).(IntegrationRuntimeResponsePtrOutput)
}

// Integration runtime description.
func (o IntegrationRuntimeResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeResponse) string { return v.Type }).(pulumi.StringOutput)
}

type IntegrationRuntimeResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeResponse)(nil)).Elem()
}

func (o IntegrationRuntimeResponsePtrOutput) ToIntegrationRuntimeResponsePtrOutput() IntegrationRuntimeResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeResponsePtrOutput) ToIntegrationRuntimeResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeResponsePtrOutput) Elem() IntegrationRuntimeResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeResponse) IntegrationRuntimeResponse { return *v }).(IntegrationRuntimeResponseOutput)
}

// Integration runtime description.
func (o IntegrationRuntimeResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The Azure Data Factory nested object which contains the information and credential which can be used to connect with related store or compute resource.
type LinkedServiceType struct {
	// List of tags that can be used for describing the linked service.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// LinkedServiceTypeInput is an input type that accepts LinkedServiceTypeArgs and LinkedServiceTypeOutput values.
// You can construct a concrete instance of `LinkedServiceTypeInput` via:
//
//          LinkedServiceTypeArgs{...}
type LinkedServiceTypeInput interface {
	pulumi.Input

	ToLinkedServiceTypeOutput() LinkedServiceTypeOutput
	ToLinkedServiceTypeOutputWithContext(context.Context) LinkedServiceTypeOutput
}

// The Azure Data Factory nested object which contains the information and credential which can be used to connect with related store or compute resource.
type LinkedServiceTypeArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LinkedServiceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceType)(nil)).Elem()
}

func (i LinkedServiceTypeArgs) ToLinkedServiceTypeOutput() LinkedServiceTypeOutput {
	return i.ToLinkedServiceTypeOutputWithContext(context.Background())
}

func (i LinkedServiceTypeArgs) ToLinkedServiceTypeOutputWithContext(ctx context.Context) LinkedServiceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceTypeOutput)
}

func (i LinkedServiceTypeArgs) ToLinkedServiceTypePtrOutput() LinkedServiceTypePtrOutput {
	return i.ToLinkedServiceTypePtrOutputWithContext(context.Background())
}

func (i LinkedServiceTypeArgs) ToLinkedServiceTypePtrOutputWithContext(ctx context.Context) LinkedServiceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceTypeOutput).ToLinkedServiceTypePtrOutputWithContext(ctx)
}

// LinkedServiceTypePtrInput is an input type that accepts LinkedServiceTypeArgs, LinkedServiceTypePtr and LinkedServiceTypePtrOutput values.
// You can construct a concrete instance of `LinkedServiceTypePtrInput` via:
//
//          LinkedServiceTypeArgs{...}
//
//  or:
//
//          nil
type LinkedServiceTypePtrInput interface {
	pulumi.Input

	ToLinkedServiceTypePtrOutput() LinkedServiceTypePtrOutput
	ToLinkedServiceTypePtrOutputWithContext(context.Context) LinkedServiceTypePtrOutput
}

type linkedServiceTypePtrType LinkedServiceTypeArgs

func LinkedServiceTypePtr(v *LinkedServiceTypeArgs) LinkedServiceTypePtrInput {
	return (*linkedServiceTypePtrType)(v)
}

func (*linkedServiceTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceType)(nil)).Elem()
}

func (i *linkedServiceTypePtrType) ToLinkedServiceTypePtrOutput() LinkedServiceTypePtrOutput {
	return i.ToLinkedServiceTypePtrOutputWithContext(context.Background())
}

func (i *linkedServiceTypePtrType) ToLinkedServiceTypePtrOutputWithContext(ctx context.Context) LinkedServiceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceTypePtrOutput)
}

// The Azure Data Factory nested object which contains the information and credential which can be used to connect with related store or compute resource.
type LinkedServiceTypeOutput struct{ *pulumi.OutputState }

func (LinkedServiceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceType)(nil)).Elem()
}

func (o LinkedServiceTypeOutput) ToLinkedServiceTypeOutput() LinkedServiceTypeOutput {
	return o
}

func (o LinkedServiceTypeOutput) ToLinkedServiceTypeOutputWithContext(ctx context.Context) LinkedServiceTypeOutput {
	return o
}

func (o LinkedServiceTypeOutput) ToLinkedServiceTypePtrOutput() LinkedServiceTypePtrOutput {
	return o.ToLinkedServiceTypePtrOutputWithContext(context.Background())
}

func (o LinkedServiceTypeOutput) ToLinkedServiceTypePtrOutputWithContext(ctx context.Context) LinkedServiceTypePtrOutput {
	return o.ApplyT(func(v LinkedServiceType) *LinkedServiceType {
		return &v
	}).(LinkedServiceTypePtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o LinkedServiceTypeOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v LinkedServiceType) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o LinkedServiceTypeOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v LinkedServiceType) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o LinkedServiceTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedServiceType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o LinkedServiceTypeOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v LinkedServiceType) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o LinkedServiceTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceType) string { return v.Type }).(pulumi.StringOutput)
}

type LinkedServiceTypePtrOutput struct{ *pulumi.OutputState }

func (LinkedServiceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceType)(nil)).Elem()
}

func (o LinkedServiceTypePtrOutput) ToLinkedServiceTypePtrOutput() LinkedServiceTypePtrOutput {
	return o
}

func (o LinkedServiceTypePtrOutput) ToLinkedServiceTypePtrOutputWithContext(ctx context.Context) LinkedServiceTypePtrOutput {
	return o
}

func (o LinkedServiceTypePtrOutput) Elem() LinkedServiceTypeOutput {
	return o.ApplyT(func(v *LinkedServiceType) LinkedServiceType { return *v }).(LinkedServiceTypeOutput)
}

// List of tags that can be used for describing the linked service.
func (o LinkedServiceTypePtrOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *LinkedServiceType) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o LinkedServiceTypePtrOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v *LinkedServiceType) *IntegrationRuntimeReference {
		if v == nil {
			return nil
		}
		return v.ConnectVia
	}).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o LinkedServiceTypePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceType) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o LinkedServiceTypePtrOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v *LinkedServiceType) map[string]ParameterSpecification {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterSpecificationMapOutput)
}

// Type of linked service.
func (o LinkedServiceTypePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceType) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Linked service reference type.
type LinkedServiceReference struct {
	// Arguments for LinkedService.
	Parameters map[string]map[string]interface{} `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName string `pulumi:"referenceName"`
	// Linked service reference type.
	Type string `pulumi:"type"`
}

// LinkedServiceReferenceInput is an input type that accepts LinkedServiceReferenceArgs and LinkedServiceReferenceOutput values.
// You can construct a concrete instance of `LinkedServiceReferenceInput` via:
//
//          LinkedServiceReferenceArgs{...}
type LinkedServiceReferenceInput interface {
	pulumi.Input

	ToLinkedServiceReferenceOutput() LinkedServiceReferenceOutput
	ToLinkedServiceReferenceOutputWithContext(context.Context) LinkedServiceReferenceOutput
}

// Linked service reference type.
type LinkedServiceReferenceArgs struct {
	// Arguments for LinkedService.
	Parameters pulumi.MapMapInput `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Linked service reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LinkedServiceReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceReference)(nil)).Elem()
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferenceOutput() LinkedServiceReferenceOutput {
	return i.ToLinkedServiceReferenceOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferenceOutputWithContext(ctx context.Context) LinkedServiceReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceOutput)
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput {
	return i.ToLinkedServiceReferencePtrOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferencePtrOutputWithContext(ctx context.Context) LinkedServiceReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceOutput).ToLinkedServiceReferencePtrOutputWithContext(ctx)
}

// LinkedServiceReferencePtrInput is an input type that accepts LinkedServiceReferenceArgs, LinkedServiceReferencePtr and LinkedServiceReferencePtrOutput values.
// You can construct a concrete instance of `LinkedServiceReferencePtrInput` via:
//
//          LinkedServiceReferenceArgs{...}
//
//  or:
//
//          nil
type LinkedServiceReferencePtrInput interface {
	pulumi.Input

	ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput
	ToLinkedServiceReferencePtrOutputWithContext(context.Context) LinkedServiceReferencePtrOutput
}

type linkedServiceReferencePtrType LinkedServiceReferenceArgs

func LinkedServiceReferencePtr(v *LinkedServiceReferenceArgs) LinkedServiceReferencePtrInput {
	return (*linkedServiceReferencePtrType)(v)
}

func (*linkedServiceReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceReference)(nil)).Elem()
}

func (i *linkedServiceReferencePtrType) ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput {
	return i.ToLinkedServiceReferencePtrOutputWithContext(context.Background())
}

func (i *linkedServiceReferencePtrType) ToLinkedServiceReferencePtrOutputWithContext(ctx context.Context) LinkedServiceReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferencePtrOutput)
}

// Linked service reference type.
type LinkedServiceReferenceOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceReference)(nil)).Elem()
}

func (o LinkedServiceReferenceOutput) ToLinkedServiceReferenceOutput() LinkedServiceReferenceOutput {
	return o
}

func (o LinkedServiceReferenceOutput) ToLinkedServiceReferenceOutputWithContext(ctx context.Context) LinkedServiceReferenceOutput {
	return o
}

func (o LinkedServiceReferenceOutput) ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput {
	return o.ToLinkedServiceReferencePtrOutputWithContext(context.Background())
}

func (o LinkedServiceReferenceOutput) ToLinkedServiceReferencePtrOutputWithContext(ctx context.Context) LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v LinkedServiceReference) *LinkedServiceReference {
		return &v
	}).(LinkedServiceReferencePtrOutput)
}

// Arguments for LinkedService.
func (o LinkedServiceReferenceOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v LinkedServiceReference) map[string]map[string]interface{} { return v.Parameters }).(pulumi.MapMapOutput)
}

// Reference LinkedService name.
func (o LinkedServiceReferenceOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceReference) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Linked service reference type.
func (o LinkedServiceReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceReference) string { return v.Type }).(pulumi.StringOutput)
}

type LinkedServiceReferencePtrOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceReference)(nil)).Elem()
}

func (o LinkedServiceReferencePtrOutput) ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput {
	return o
}

func (o LinkedServiceReferencePtrOutput) ToLinkedServiceReferencePtrOutputWithContext(ctx context.Context) LinkedServiceReferencePtrOutput {
	return o
}

func (o LinkedServiceReferencePtrOutput) Elem() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v *LinkedServiceReference) LinkedServiceReference { return *v }).(LinkedServiceReferenceOutput)
}

// Arguments for LinkedService.
func (o LinkedServiceReferencePtrOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v *LinkedServiceReference) map[string]map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapMapOutput)
}

// Reference LinkedService name.
func (o LinkedServiceReferencePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Linked service reference type.
func (o LinkedServiceReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceReference) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Linked service reference type.
type LinkedServiceReferenceResponse struct {
	// Arguments for LinkedService.
	Parameters map[string]map[string]interface{} `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName string `pulumi:"referenceName"`
	// Linked service reference type.
	Type string `pulumi:"type"`
}

// LinkedServiceReferenceResponseInput is an input type that accepts LinkedServiceReferenceResponseArgs and LinkedServiceReferenceResponseOutput values.
// You can construct a concrete instance of `LinkedServiceReferenceResponseInput` via:
//
//          LinkedServiceReferenceResponseArgs{...}
type LinkedServiceReferenceResponseInput interface {
	pulumi.Input

	ToLinkedServiceReferenceResponseOutput() LinkedServiceReferenceResponseOutput
	ToLinkedServiceReferenceResponseOutputWithContext(context.Context) LinkedServiceReferenceResponseOutput
}

// Linked service reference type.
type LinkedServiceReferenceResponseArgs struct {
	// Arguments for LinkedService.
	Parameters pulumi.MapMapInput `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Linked service reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LinkedServiceReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceReferenceResponse)(nil)).Elem()
}

func (i LinkedServiceReferenceResponseArgs) ToLinkedServiceReferenceResponseOutput() LinkedServiceReferenceResponseOutput {
	return i.ToLinkedServiceReferenceResponseOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceResponseArgs) ToLinkedServiceReferenceResponseOutputWithContext(ctx context.Context) LinkedServiceReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceResponseOutput)
}

func (i LinkedServiceReferenceResponseArgs) ToLinkedServiceReferenceResponsePtrOutput() LinkedServiceReferenceResponsePtrOutput {
	return i.ToLinkedServiceReferenceResponsePtrOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceResponseArgs) ToLinkedServiceReferenceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceResponseOutput).ToLinkedServiceReferenceResponsePtrOutputWithContext(ctx)
}

// LinkedServiceReferenceResponsePtrInput is an input type that accepts LinkedServiceReferenceResponseArgs, LinkedServiceReferenceResponsePtr and LinkedServiceReferenceResponsePtrOutput values.
// You can construct a concrete instance of `LinkedServiceReferenceResponsePtrInput` via:
//
//          LinkedServiceReferenceResponseArgs{...}
//
//  or:
//
//          nil
type LinkedServiceReferenceResponsePtrInput interface {
	pulumi.Input

	ToLinkedServiceReferenceResponsePtrOutput() LinkedServiceReferenceResponsePtrOutput
	ToLinkedServiceReferenceResponsePtrOutputWithContext(context.Context) LinkedServiceReferenceResponsePtrOutput
}

type linkedServiceReferenceResponsePtrType LinkedServiceReferenceResponseArgs

func LinkedServiceReferenceResponsePtr(v *LinkedServiceReferenceResponseArgs) LinkedServiceReferenceResponsePtrInput {
	return (*linkedServiceReferenceResponsePtrType)(v)
}

func (*linkedServiceReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceReferenceResponse)(nil)).Elem()
}

func (i *linkedServiceReferenceResponsePtrType) ToLinkedServiceReferenceResponsePtrOutput() LinkedServiceReferenceResponsePtrOutput {
	return i.ToLinkedServiceReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *linkedServiceReferenceResponsePtrType) ToLinkedServiceReferenceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceResponsePtrOutput)
}

// Linked service reference type.
type LinkedServiceReferenceResponseOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceReferenceResponse)(nil)).Elem()
}

func (o LinkedServiceReferenceResponseOutput) ToLinkedServiceReferenceResponseOutput() LinkedServiceReferenceResponseOutput {
	return o
}

func (o LinkedServiceReferenceResponseOutput) ToLinkedServiceReferenceResponseOutputWithContext(ctx context.Context) LinkedServiceReferenceResponseOutput {
	return o
}

func (o LinkedServiceReferenceResponseOutput) ToLinkedServiceReferenceResponsePtrOutput() LinkedServiceReferenceResponsePtrOutput {
	return o.ToLinkedServiceReferenceResponsePtrOutputWithContext(context.Background())
}

func (o LinkedServiceReferenceResponseOutput) ToLinkedServiceReferenceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v LinkedServiceReferenceResponse) *LinkedServiceReferenceResponse {
		return &v
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Arguments for LinkedService.
func (o LinkedServiceReferenceResponseOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v LinkedServiceReferenceResponse) map[string]map[string]interface{} { return v.Parameters }).(pulumi.MapMapOutput)
}

// Reference LinkedService name.
func (o LinkedServiceReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Linked service reference type.
func (o LinkedServiceReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type LinkedServiceReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceReferenceResponse)(nil)).Elem()
}

func (o LinkedServiceReferenceResponsePtrOutput) ToLinkedServiceReferenceResponsePtrOutput() LinkedServiceReferenceResponsePtrOutput {
	return o
}

func (o LinkedServiceReferenceResponsePtrOutput) ToLinkedServiceReferenceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceReferenceResponsePtrOutput {
	return o
}

func (o LinkedServiceReferenceResponsePtrOutput) Elem() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) LinkedServiceReferenceResponse { return *v }).(LinkedServiceReferenceResponseOutput)
}

// Arguments for LinkedService.
func (o LinkedServiceReferenceResponsePtrOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) map[string]map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapMapOutput)
}

// Reference LinkedService name.
func (o LinkedServiceReferenceResponsePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Linked service reference type.
func (o LinkedServiceReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The Azure Data Factory nested object which contains the information and credential which can be used to connect with related store or compute resource.
type LinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// LinkedServiceResponseInput is an input type that accepts LinkedServiceResponseArgs and LinkedServiceResponseOutput values.
// You can construct a concrete instance of `LinkedServiceResponseInput` via:
//
//          LinkedServiceResponseArgs{...}
type LinkedServiceResponseInput interface {
	pulumi.Input

	ToLinkedServiceResponseOutput() LinkedServiceResponseOutput
	ToLinkedServiceResponseOutputWithContext(context.Context) LinkedServiceResponseOutput
}

// The Azure Data Factory nested object which contains the information and credential which can be used to connect with related store or compute resource.
type LinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationResponseMapInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceResponse)(nil)).Elem()
}

func (i LinkedServiceResponseArgs) ToLinkedServiceResponseOutput() LinkedServiceResponseOutput {
	return i.ToLinkedServiceResponseOutputWithContext(context.Background())
}

func (i LinkedServiceResponseArgs) ToLinkedServiceResponseOutputWithContext(ctx context.Context) LinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceResponseOutput)
}

func (i LinkedServiceResponseArgs) ToLinkedServiceResponsePtrOutput() LinkedServiceResponsePtrOutput {
	return i.ToLinkedServiceResponsePtrOutputWithContext(context.Background())
}

func (i LinkedServiceResponseArgs) ToLinkedServiceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceResponseOutput).ToLinkedServiceResponsePtrOutputWithContext(ctx)
}

// LinkedServiceResponsePtrInput is an input type that accepts LinkedServiceResponseArgs, LinkedServiceResponsePtr and LinkedServiceResponsePtrOutput values.
// You can construct a concrete instance of `LinkedServiceResponsePtrInput` via:
//
//          LinkedServiceResponseArgs{...}
//
//  or:
//
//          nil
type LinkedServiceResponsePtrInput interface {
	pulumi.Input

	ToLinkedServiceResponsePtrOutput() LinkedServiceResponsePtrOutput
	ToLinkedServiceResponsePtrOutputWithContext(context.Context) LinkedServiceResponsePtrOutput
}

type linkedServiceResponsePtrType LinkedServiceResponseArgs

func LinkedServiceResponsePtr(v *LinkedServiceResponseArgs) LinkedServiceResponsePtrInput {
	return (*linkedServiceResponsePtrType)(v)
}

func (*linkedServiceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceResponse)(nil)).Elem()
}

func (i *linkedServiceResponsePtrType) ToLinkedServiceResponsePtrOutput() LinkedServiceResponsePtrOutput {
	return i.ToLinkedServiceResponsePtrOutputWithContext(context.Background())
}

func (i *linkedServiceResponsePtrType) ToLinkedServiceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceResponsePtrOutput)
}

// The Azure Data Factory nested object which contains the information and credential which can be used to connect with related store or compute resource.
type LinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (LinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceResponse)(nil)).Elem()
}

func (o LinkedServiceResponseOutput) ToLinkedServiceResponseOutput() LinkedServiceResponseOutput {
	return o
}

func (o LinkedServiceResponseOutput) ToLinkedServiceResponseOutputWithContext(ctx context.Context) LinkedServiceResponseOutput {
	return o
}

func (o LinkedServiceResponseOutput) ToLinkedServiceResponsePtrOutput() LinkedServiceResponsePtrOutput {
	return o.ToLinkedServiceResponsePtrOutputWithContext(context.Background())
}

func (o LinkedServiceResponseOutput) ToLinkedServiceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceResponsePtrOutput {
	return o.ApplyT(func(v LinkedServiceResponse) *LinkedServiceResponse {
		return &v
	}).(LinkedServiceResponsePtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o LinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v LinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o LinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v LinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o LinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o LinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v LinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o LinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type LinkedServiceResponsePtrOutput struct{ *pulumi.OutputState }

func (LinkedServiceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceResponse)(nil)).Elem()
}

func (o LinkedServiceResponsePtrOutput) ToLinkedServiceResponsePtrOutput() LinkedServiceResponsePtrOutput {
	return o
}

func (o LinkedServiceResponsePtrOutput) ToLinkedServiceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceResponsePtrOutput {
	return o
}

func (o LinkedServiceResponsePtrOutput) Elem() LinkedServiceResponseOutput {
	return o.ApplyT(func(v *LinkedServiceResponse) LinkedServiceResponse { return *v }).(LinkedServiceResponseOutput)
}

// List of tags that can be used for describing the linked service.
func (o LinkedServiceResponsePtrOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *LinkedServiceResponse) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o LinkedServiceResponsePtrOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v *LinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		if v == nil {
			return nil
		}
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o LinkedServiceResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o LinkedServiceResponsePtrOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v *LinkedServiceResponse) map[string]ParameterSpecificationResponse {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
func (o LinkedServiceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointType struct {
	// Fully qualified domain names
	Fqdns []string `pulumi:"fqdns"`
	// The groupId to which the managed private endpoint is created
	GroupId *string `pulumi:"groupId"`
	// The ARM resource ID of the resource to which the managed private endpoint is created
	PrivateLinkResourceId *string `pulumi:"privateLinkResourceId"`
}

// ManagedPrivateEndpointTypeInput is an input type that accepts ManagedPrivateEndpointTypeArgs and ManagedPrivateEndpointTypeOutput values.
// You can construct a concrete instance of `ManagedPrivateEndpointTypeInput` via:
//
//          ManagedPrivateEndpointTypeArgs{...}
type ManagedPrivateEndpointTypeInput interface {
	pulumi.Input

	ToManagedPrivateEndpointTypeOutput() ManagedPrivateEndpointTypeOutput
	ToManagedPrivateEndpointTypeOutputWithContext(context.Context) ManagedPrivateEndpointTypeOutput
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointTypeArgs struct {
	// Fully qualified domain names
	Fqdns pulumi.StringArrayInput `pulumi:"fqdns"`
	// The groupId to which the managed private endpoint is created
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// The ARM resource ID of the resource to which the managed private endpoint is created
	PrivateLinkResourceId pulumi.StringPtrInput `pulumi:"privateLinkResourceId"`
}

func (ManagedPrivateEndpointTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedPrivateEndpointType)(nil)).Elem()
}

func (i ManagedPrivateEndpointTypeArgs) ToManagedPrivateEndpointTypeOutput() ManagedPrivateEndpointTypeOutput {
	return i.ToManagedPrivateEndpointTypeOutputWithContext(context.Background())
}

func (i ManagedPrivateEndpointTypeArgs) ToManagedPrivateEndpointTypeOutputWithContext(ctx context.Context) ManagedPrivateEndpointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrivateEndpointTypeOutput)
}

func (i ManagedPrivateEndpointTypeArgs) ToManagedPrivateEndpointTypePtrOutput() ManagedPrivateEndpointTypePtrOutput {
	return i.ToManagedPrivateEndpointTypePtrOutputWithContext(context.Background())
}

func (i ManagedPrivateEndpointTypeArgs) ToManagedPrivateEndpointTypePtrOutputWithContext(ctx context.Context) ManagedPrivateEndpointTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrivateEndpointTypeOutput).ToManagedPrivateEndpointTypePtrOutputWithContext(ctx)
}

// ManagedPrivateEndpointTypePtrInput is an input type that accepts ManagedPrivateEndpointTypeArgs, ManagedPrivateEndpointTypePtr and ManagedPrivateEndpointTypePtrOutput values.
// You can construct a concrete instance of `ManagedPrivateEndpointTypePtrInput` via:
//
//          ManagedPrivateEndpointTypeArgs{...}
//
//  or:
//
//          nil
type ManagedPrivateEndpointTypePtrInput interface {
	pulumi.Input

	ToManagedPrivateEndpointTypePtrOutput() ManagedPrivateEndpointTypePtrOutput
	ToManagedPrivateEndpointTypePtrOutputWithContext(context.Context) ManagedPrivateEndpointTypePtrOutput
}

type managedPrivateEndpointTypePtrType ManagedPrivateEndpointTypeArgs

func ManagedPrivateEndpointTypePtr(v *ManagedPrivateEndpointTypeArgs) ManagedPrivateEndpointTypePtrInput {
	return (*managedPrivateEndpointTypePtrType)(v)
}

func (*managedPrivateEndpointTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedPrivateEndpointType)(nil)).Elem()
}

func (i *managedPrivateEndpointTypePtrType) ToManagedPrivateEndpointTypePtrOutput() ManagedPrivateEndpointTypePtrOutput {
	return i.ToManagedPrivateEndpointTypePtrOutputWithContext(context.Background())
}

func (i *managedPrivateEndpointTypePtrType) ToManagedPrivateEndpointTypePtrOutputWithContext(ctx context.Context) ManagedPrivateEndpointTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrivateEndpointTypePtrOutput)
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointTypeOutput struct{ *pulumi.OutputState }

func (ManagedPrivateEndpointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedPrivateEndpointType)(nil)).Elem()
}

func (o ManagedPrivateEndpointTypeOutput) ToManagedPrivateEndpointTypeOutput() ManagedPrivateEndpointTypeOutput {
	return o
}

func (o ManagedPrivateEndpointTypeOutput) ToManagedPrivateEndpointTypeOutputWithContext(ctx context.Context) ManagedPrivateEndpointTypeOutput {
	return o
}

func (o ManagedPrivateEndpointTypeOutput) ToManagedPrivateEndpointTypePtrOutput() ManagedPrivateEndpointTypePtrOutput {
	return o.ToManagedPrivateEndpointTypePtrOutputWithContext(context.Background())
}

func (o ManagedPrivateEndpointTypeOutput) ToManagedPrivateEndpointTypePtrOutputWithContext(ctx context.Context) ManagedPrivateEndpointTypePtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointType) *ManagedPrivateEndpointType {
		return &v
	}).(ManagedPrivateEndpointTypePtrOutput)
}

// Fully qualified domain names
func (o ManagedPrivateEndpointTypeOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointType) []string { return v.Fqdns }).(pulumi.StringArrayOutput)
}

// The groupId to which the managed private endpoint is created
func (o ManagedPrivateEndpointTypeOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointType) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// The ARM resource ID of the resource to which the managed private endpoint is created
func (o ManagedPrivateEndpointTypeOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointType) *string { return v.PrivateLinkResourceId }).(pulumi.StringPtrOutput)
}

type ManagedPrivateEndpointTypePtrOutput struct{ *pulumi.OutputState }

func (ManagedPrivateEndpointTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedPrivateEndpointType)(nil)).Elem()
}

func (o ManagedPrivateEndpointTypePtrOutput) ToManagedPrivateEndpointTypePtrOutput() ManagedPrivateEndpointTypePtrOutput {
	return o
}

func (o ManagedPrivateEndpointTypePtrOutput) ToManagedPrivateEndpointTypePtrOutputWithContext(ctx context.Context) ManagedPrivateEndpointTypePtrOutput {
	return o
}

func (o ManagedPrivateEndpointTypePtrOutput) Elem() ManagedPrivateEndpointTypeOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpointType) ManagedPrivateEndpointType { return *v }).(ManagedPrivateEndpointTypeOutput)
}

// Fully qualified domain names
func (o ManagedPrivateEndpointTypePtrOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpointType) []string {
		if v == nil {
			return nil
		}
		return v.Fqdns
	}).(pulumi.StringArrayOutput)
}

// The groupId to which the managed private endpoint is created
func (o ManagedPrivateEndpointTypePtrOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpointType) *string {
		if v == nil {
			return nil
		}
		return v.GroupId
	}).(pulumi.StringPtrOutput)
}

// The ARM resource ID of the resource to which the managed private endpoint is created
func (o ManagedPrivateEndpointTypePtrOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpointType) *string {
		if v == nil {
			return nil
		}
		return v.PrivateLinkResourceId
	}).(pulumi.StringPtrOutput)
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointResponse struct {
	// The managed private endpoint connection state
	ConnectionState *ConnectionStatePropertiesResponse `pulumi:"connectionState"`
	// Fully qualified domain names
	Fqdns []string `pulumi:"fqdns"`
	// The groupId to which the managed private endpoint is created
	GroupId *string `pulumi:"groupId"`
	// Denotes whether the managed private endpoint is reserved
	IsReserved bool `pulumi:"isReserved"`
	// The ARM resource ID of the resource to which the managed private endpoint is created
	PrivateLinkResourceId *string `pulumi:"privateLinkResourceId"`
	// The managed private endpoint provisioning state
	ProvisioningState string `pulumi:"provisioningState"`
}

// ManagedPrivateEndpointResponseInput is an input type that accepts ManagedPrivateEndpointResponseArgs and ManagedPrivateEndpointResponseOutput values.
// You can construct a concrete instance of `ManagedPrivateEndpointResponseInput` via:
//
//          ManagedPrivateEndpointResponseArgs{...}
type ManagedPrivateEndpointResponseInput interface {
	pulumi.Input

	ToManagedPrivateEndpointResponseOutput() ManagedPrivateEndpointResponseOutput
	ToManagedPrivateEndpointResponseOutputWithContext(context.Context) ManagedPrivateEndpointResponseOutput
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointResponseArgs struct {
	// The managed private endpoint connection state
	ConnectionState ConnectionStatePropertiesResponsePtrInput `pulumi:"connectionState"`
	// Fully qualified domain names
	Fqdns pulumi.StringArrayInput `pulumi:"fqdns"`
	// The groupId to which the managed private endpoint is created
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// Denotes whether the managed private endpoint is reserved
	IsReserved pulumi.BoolInput `pulumi:"isReserved"`
	// The ARM resource ID of the resource to which the managed private endpoint is created
	PrivateLinkResourceId pulumi.StringPtrInput `pulumi:"privateLinkResourceId"`
	// The managed private endpoint provisioning state
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
}

func (ManagedPrivateEndpointResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedPrivateEndpointResponse)(nil)).Elem()
}

func (i ManagedPrivateEndpointResponseArgs) ToManagedPrivateEndpointResponseOutput() ManagedPrivateEndpointResponseOutput {
	return i.ToManagedPrivateEndpointResponseOutputWithContext(context.Background())
}

func (i ManagedPrivateEndpointResponseArgs) ToManagedPrivateEndpointResponseOutputWithContext(ctx context.Context) ManagedPrivateEndpointResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrivateEndpointResponseOutput)
}

func (i ManagedPrivateEndpointResponseArgs) ToManagedPrivateEndpointResponsePtrOutput() ManagedPrivateEndpointResponsePtrOutput {
	return i.ToManagedPrivateEndpointResponsePtrOutputWithContext(context.Background())
}

func (i ManagedPrivateEndpointResponseArgs) ToManagedPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) ManagedPrivateEndpointResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrivateEndpointResponseOutput).ToManagedPrivateEndpointResponsePtrOutputWithContext(ctx)
}

// ManagedPrivateEndpointResponsePtrInput is an input type that accepts ManagedPrivateEndpointResponseArgs, ManagedPrivateEndpointResponsePtr and ManagedPrivateEndpointResponsePtrOutput values.
// You can construct a concrete instance of `ManagedPrivateEndpointResponsePtrInput` via:
//
//          ManagedPrivateEndpointResponseArgs{...}
//
//  or:
//
//          nil
type ManagedPrivateEndpointResponsePtrInput interface {
	pulumi.Input

	ToManagedPrivateEndpointResponsePtrOutput() ManagedPrivateEndpointResponsePtrOutput
	ToManagedPrivateEndpointResponsePtrOutputWithContext(context.Context) ManagedPrivateEndpointResponsePtrOutput
}

type managedPrivateEndpointResponsePtrType ManagedPrivateEndpointResponseArgs

func ManagedPrivateEndpointResponsePtr(v *ManagedPrivateEndpointResponseArgs) ManagedPrivateEndpointResponsePtrInput {
	return (*managedPrivateEndpointResponsePtrType)(v)
}

func (*managedPrivateEndpointResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedPrivateEndpointResponse)(nil)).Elem()
}

func (i *managedPrivateEndpointResponsePtrType) ToManagedPrivateEndpointResponsePtrOutput() ManagedPrivateEndpointResponsePtrOutput {
	return i.ToManagedPrivateEndpointResponsePtrOutputWithContext(context.Background())
}

func (i *managedPrivateEndpointResponsePtrType) ToManagedPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) ManagedPrivateEndpointResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrivateEndpointResponsePtrOutput)
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (ManagedPrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedPrivateEndpointResponse)(nil)).Elem()
}

func (o ManagedPrivateEndpointResponseOutput) ToManagedPrivateEndpointResponseOutput() ManagedPrivateEndpointResponseOutput {
	return o
}

func (o ManagedPrivateEndpointResponseOutput) ToManagedPrivateEndpointResponseOutputWithContext(ctx context.Context) ManagedPrivateEndpointResponseOutput {
	return o
}

func (o ManagedPrivateEndpointResponseOutput) ToManagedPrivateEndpointResponsePtrOutput() ManagedPrivateEndpointResponsePtrOutput {
	return o.ToManagedPrivateEndpointResponsePtrOutputWithContext(context.Background())
}

func (o ManagedPrivateEndpointResponseOutput) ToManagedPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) ManagedPrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) *ManagedPrivateEndpointResponse {
		return &v
	}).(ManagedPrivateEndpointResponsePtrOutput)
}

// The managed private endpoint connection state
func (o ManagedPrivateEndpointResponseOutput) ConnectionState() ConnectionStatePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) *ConnectionStatePropertiesResponse { return v.ConnectionState }).(ConnectionStatePropertiesResponsePtrOutput)
}

// Fully qualified domain names
func (o ManagedPrivateEndpointResponseOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) []string { return v.Fqdns }).(pulumi.StringArrayOutput)
}

// The groupId to which the managed private endpoint is created
func (o ManagedPrivateEndpointResponseOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Denotes whether the managed private endpoint is reserved
func (o ManagedPrivateEndpointResponseOutput) IsReserved() pulumi.BoolOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) bool { return v.IsReserved }).(pulumi.BoolOutput)
}

// The ARM resource ID of the resource to which the managed private endpoint is created
func (o ManagedPrivateEndpointResponseOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) *string { return v.PrivateLinkResourceId }).(pulumi.StringPtrOutput)
}

// The managed private endpoint provisioning state
func (o ManagedPrivateEndpointResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type ManagedPrivateEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedPrivateEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedPrivateEndpointResponse)(nil)).Elem()
}

func (o ManagedPrivateEndpointResponsePtrOutput) ToManagedPrivateEndpointResponsePtrOutput() ManagedPrivateEndpointResponsePtrOutput {
	return o
}

func (o ManagedPrivateEndpointResponsePtrOutput) ToManagedPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) ManagedPrivateEndpointResponsePtrOutput {
	return o
}

func (o ManagedPrivateEndpointResponsePtrOutput) Elem() ManagedPrivateEndpointResponseOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpointResponse) ManagedPrivateEndpointResponse { return *v }).(ManagedPrivateEndpointResponseOutput)
}

// The managed private endpoint connection state
func (o ManagedPrivateEndpointResponsePtrOutput) ConnectionState() ConnectionStatePropertiesResponsePtrOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpointResponse) *ConnectionStatePropertiesResponse {
		if v == nil {
			return nil
		}
		return v.ConnectionState
	}).(ConnectionStatePropertiesResponsePtrOutput)
}

// Fully qualified domain names
func (o ManagedPrivateEndpointResponsePtrOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpointResponse) []string {
		if v == nil {
			return nil
		}
		return v.Fqdns
	}).(pulumi.StringArrayOutput)
}

// The groupId to which the managed private endpoint is created
func (o ManagedPrivateEndpointResponsePtrOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupId
	}).(pulumi.StringPtrOutput)
}

// Denotes whether the managed private endpoint is reserved
func (o ManagedPrivateEndpointResponsePtrOutput) IsReserved() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpointResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IsReserved
	}).(pulumi.BoolPtrOutput)
}

// The ARM resource ID of the resource to which the managed private endpoint is created
func (o ManagedPrivateEndpointResponsePtrOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrivateLinkResourceId
	}).(pulumi.StringPtrOutput)
}

// The managed private endpoint provisioning state
func (o ManagedPrivateEndpointResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Definition of a single parameter for an entity.
type ParameterSpecification struct {
	// Default value of parameter.
	DefaultValue map[string]interface{} `pulumi:"defaultValue"`
	// Parameter type.
	Type string `pulumi:"type"`
}

// ParameterSpecificationInput is an input type that accepts ParameterSpecificationArgs and ParameterSpecificationOutput values.
// You can construct a concrete instance of `ParameterSpecificationInput` via:
//
//          ParameterSpecificationArgs{...}
type ParameterSpecificationInput interface {
	pulumi.Input

	ToParameterSpecificationOutput() ParameterSpecificationOutput
	ToParameterSpecificationOutputWithContext(context.Context) ParameterSpecificationOutput
}

// Definition of a single parameter for an entity.
type ParameterSpecificationArgs struct {
	// Default value of parameter.
	DefaultValue pulumi.MapInput `pulumi:"defaultValue"`
	// Parameter type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ParameterSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterSpecification)(nil)).Elem()
}

func (i ParameterSpecificationArgs) ToParameterSpecificationOutput() ParameterSpecificationOutput {
	return i.ToParameterSpecificationOutputWithContext(context.Background())
}

func (i ParameterSpecificationArgs) ToParameterSpecificationOutputWithContext(ctx context.Context) ParameterSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterSpecificationOutput)
}

// ParameterSpecificationMapInput is an input type that accepts ParameterSpecificationMap and ParameterSpecificationMapOutput values.
// You can construct a concrete instance of `ParameterSpecificationMapInput` via:
//
//          ParameterSpecificationMap{ "key": ParameterSpecificationArgs{...} }
type ParameterSpecificationMapInput interface {
	pulumi.Input

	ToParameterSpecificationMapOutput() ParameterSpecificationMapOutput
	ToParameterSpecificationMapOutputWithContext(context.Context) ParameterSpecificationMapOutput
}

type ParameterSpecificationMap map[string]ParameterSpecificationInput

func (ParameterSpecificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterSpecification)(nil)).Elem()
}

func (i ParameterSpecificationMap) ToParameterSpecificationMapOutput() ParameterSpecificationMapOutput {
	return i.ToParameterSpecificationMapOutputWithContext(context.Background())
}

func (i ParameterSpecificationMap) ToParameterSpecificationMapOutputWithContext(ctx context.Context) ParameterSpecificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterSpecificationMapOutput)
}

// Definition of a single parameter for an entity.
type ParameterSpecificationOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterSpecification)(nil)).Elem()
}

func (o ParameterSpecificationOutput) ToParameterSpecificationOutput() ParameterSpecificationOutput {
	return o
}

func (o ParameterSpecificationOutput) ToParameterSpecificationOutputWithContext(ctx context.Context) ParameterSpecificationOutput {
	return o
}

// Default value of parameter.
func (o ParameterSpecificationOutput) DefaultValue() pulumi.MapOutput {
	return o.ApplyT(func(v ParameterSpecification) map[string]interface{} { return v.DefaultValue }).(pulumi.MapOutput)
}

// Parameter type.
func (o ParameterSpecificationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterSpecification) string { return v.Type }).(pulumi.StringOutput)
}

type ParameterSpecificationMapOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterSpecification)(nil)).Elem()
}

func (o ParameterSpecificationMapOutput) ToParameterSpecificationMapOutput() ParameterSpecificationMapOutput {
	return o
}

func (o ParameterSpecificationMapOutput) ToParameterSpecificationMapOutputWithContext(ctx context.Context) ParameterSpecificationMapOutput {
	return o
}

func (o ParameterSpecificationMapOutput) MapIndex(k pulumi.StringInput) ParameterSpecificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterSpecification {
		return vs[0].(map[string]ParameterSpecification)[vs[1].(string)]
	}).(ParameterSpecificationOutput)
}

// Definition of a single parameter for an entity.
type ParameterSpecificationResponse struct {
	// Default value of parameter.
	DefaultValue map[string]interface{} `pulumi:"defaultValue"`
	// Parameter type.
	Type string `pulumi:"type"`
}

// ParameterSpecificationResponseInput is an input type that accepts ParameterSpecificationResponseArgs and ParameterSpecificationResponseOutput values.
// You can construct a concrete instance of `ParameterSpecificationResponseInput` via:
//
//          ParameterSpecificationResponseArgs{...}
type ParameterSpecificationResponseInput interface {
	pulumi.Input

	ToParameterSpecificationResponseOutput() ParameterSpecificationResponseOutput
	ToParameterSpecificationResponseOutputWithContext(context.Context) ParameterSpecificationResponseOutput
}

// Definition of a single parameter for an entity.
type ParameterSpecificationResponseArgs struct {
	// Default value of parameter.
	DefaultValue pulumi.MapInput `pulumi:"defaultValue"`
	// Parameter type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ParameterSpecificationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterSpecificationResponse)(nil)).Elem()
}

func (i ParameterSpecificationResponseArgs) ToParameterSpecificationResponseOutput() ParameterSpecificationResponseOutput {
	return i.ToParameterSpecificationResponseOutputWithContext(context.Background())
}

func (i ParameterSpecificationResponseArgs) ToParameterSpecificationResponseOutputWithContext(ctx context.Context) ParameterSpecificationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterSpecificationResponseOutput)
}

// ParameterSpecificationResponseMapInput is an input type that accepts ParameterSpecificationResponseMap and ParameterSpecificationResponseMapOutput values.
// You can construct a concrete instance of `ParameterSpecificationResponseMapInput` via:
//
//          ParameterSpecificationResponseMap{ "key": ParameterSpecificationResponseArgs{...} }
type ParameterSpecificationResponseMapInput interface {
	pulumi.Input

	ToParameterSpecificationResponseMapOutput() ParameterSpecificationResponseMapOutput
	ToParameterSpecificationResponseMapOutputWithContext(context.Context) ParameterSpecificationResponseMapOutput
}

type ParameterSpecificationResponseMap map[string]ParameterSpecificationResponseInput

func (ParameterSpecificationResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterSpecificationResponse)(nil)).Elem()
}

func (i ParameterSpecificationResponseMap) ToParameterSpecificationResponseMapOutput() ParameterSpecificationResponseMapOutput {
	return i.ToParameterSpecificationResponseMapOutputWithContext(context.Background())
}

func (i ParameterSpecificationResponseMap) ToParameterSpecificationResponseMapOutputWithContext(ctx context.Context) ParameterSpecificationResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterSpecificationResponseMapOutput)
}

// Definition of a single parameter for an entity.
type ParameterSpecificationResponseOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterSpecificationResponse)(nil)).Elem()
}

func (o ParameterSpecificationResponseOutput) ToParameterSpecificationResponseOutput() ParameterSpecificationResponseOutput {
	return o
}

func (o ParameterSpecificationResponseOutput) ToParameterSpecificationResponseOutputWithContext(ctx context.Context) ParameterSpecificationResponseOutput {
	return o
}

// Default value of parameter.
func (o ParameterSpecificationResponseOutput) DefaultValue() pulumi.MapOutput {
	return o.ApplyT(func(v ParameterSpecificationResponse) map[string]interface{} { return v.DefaultValue }).(pulumi.MapOutput)
}

// Parameter type.
func (o ParameterSpecificationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterSpecificationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ParameterSpecificationResponseMapOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterSpecificationResponse)(nil)).Elem()
}

func (o ParameterSpecificationResponseMapOutput) ToParameterSpecificationResponseMapOutput() ParameterSpecificationResponseMapOutput {
	return o
}

func (o ParameterSpecificationResponseMapOutput) ToParameterSpecificationResponseMapOutputWithContext(ctx context.Context) ParameterSpecificationResponseMapOutput {
	return o
}

func (o ParameterSpecificationResponseMapOutput) MapIndex(k pulumi.StringInput) ParameterSpecificationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterSpecificationResponse {
		return vs[0].(map[string]ParameterSpecificationResponse)[vs[1].(string)]
	}).(ParameterSpecificationResponseOutput)
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineFolder struct {
	// The name of the folder that this Pipeline is in.
	Name *string `pulumi:"name"`
}

// PipelineFolderInput is an input type that accepts PipelineFolderArgs and PipelineFolderOutput values.
// You can construct a concrete instance of `PipelineFolderInput` via:
//
//          PipelineFolderArgs{...}
type PipelineFolderInput interface {
	pulumi.Input

	ToPipelineFolderOutput() PipelineFolderOutput
	ToPipelineFolderOutputWithContext(context.Context) PipelineFolderOutput
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineFolderArgs struct {
	// The name of the folder that this Pipeline is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PipelineFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineFolder)(nil)).Elem()
}

func (i PipelineFolderArgs) ToPipelineFolderOutput() PipelineFolderOutput {
	return i.ToPipelineFolderOutputWithContext(context.Background())
}

func (i PipelineFolderArgs) ToPipelineFolderOutputWithContext(ctx context.Context) PipelineFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineFolderOutput)
}

func (i PipelineFolderArgs) ToPipelineFolderPtrOutput() PipelineFolderPtrOutput {
	return i.ToPipelineFolderPtrOutputWithContext(context.Background())
}

func (i PipelineFolderArgs) ToPipelineFolderPtrOutputWithContext(ctx context.Context) PipelineFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineFolderOutput).ToPipelineFolderPtrOutputWithContext(ctx)
}

// PipelineFolderPtrInput is an input type that accepts PipelineFolderArgs, PipelineFolderPtr and PipelineFolderPtrOutput values.
// You can construct a concrete instance of `PipelineFolderPtrInput` via:
//
//          PipelineFolderArgs{...}
//
//  or:
//
//          nil
type PipelineFolderPtrInput interface {
	pulumi.Input

	ToPipelineFolderPtrOutput() PipelineFolderPtrOutput
	ToPipelineFolderPtrOutputWithContext(context.Context) PipelineFolderPtrOutput
}

type pipelineFolderPtrType PipelineFolderArgs

func PipelineFolderPtr(v *PipelineFolderArgs) PipelineFolderPtrInput {
	return (*pipelineFolderPtrType)(v)
}

func (*pipelineFolderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineFolder)(nil)).Elem()
}

func (i *pipelineFolderPtrType) ToPipelineFolderPtrOutput() PipelineFolderPtrOutput {
	return i.ToPipelineFolderPtrOutputWithContext(context.Background())
}

func (i *pipelineFolderPtrType) ToPipelineFolderPtrOutputWithContext(ctx context.Context) PipelineFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineFolderPtrOutput)
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineFolderOutput struct{ *pulumi.OutputState }

func (PipelineFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineFolder)(nil)).Elem()
}

func (o PipelineFolderOutput) ToPipelineFolderOutput() PipelineFolderOutput {
	return o
}

func (o PipelineFolderOutput) ToPipelineFolderOutputWithContext(ctx context.Context) PipelineFolderOutput {
	return o
}

func (o PipelineFolderOutput) ToPipelineFolderPtrOutput() PipelineFolderPtrOutput {
	return o.ToPipelineFolderPtrOutputWithContext(context.Background())
}

func (o PipelineFolderOutput) ToPipelineFolderPtrOutputWithContext(ctx context.Context) PipelineFolderPtrOutput {
	return o.ApplyT(func(v PipelineFolder) *PipelineFolder {
		return &v
	}).(PipelineFolderPtrOutput)
}

// The name of the folder that this Pipeline is in.
func (o PipelineFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PipelineFolderPtrOutput struct{ *pulumi.OutputState }

func (PipelineFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineFolder)(nil)).Elem()
}

func (o PipelineFolderPtrOutput) ToPipelineFolderPtrOutput() PipelineFolderPtrOutput {
	return o
}

func (o PipelineFolderPtrOutput) ToPipelineFolderPtrOutputWithContext(ctx context.Context) PipelineFolderPtrOutput {
	return o
}

func (o PipelineFolderPtrOutput) Elem() PipelineFolderOutput {
	return o.ApplyT(func(v *PipelineFolder) PipelineFolder { return *v }).(PipelineFolderOutput)
}

// The name of the folder that this Pipeline is in.
func (o PipelineFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineResponseFolder struct {
	// The name of the folder that this Pipeline is in.
	Name *string `pulumi:"name"`
}

// PipelineResponseFolderInput is an input type that accepts PipelineResponseFolderArgs and PipelineResponseFolderOutput values.
// You can construct a concrete instance of `PipelineResponseFolderInput` via:
//
//          PipelineResponseFolderArgs{...}
type PipelineResponseFolderInput interface {
	pulumi.Input

	ToPipelineResponseFolderOutput() PipelineResponseFolderOutput
	ToPipelineResponseFolderOutputWithContext(context.Context) PipelineResponseFolderOutput
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineResponseFolderArgs struct {
	// The name of the folder that this Pipeline is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PipelineResponseFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineResponseFolder)(nil)).Elem()
}

func (i PipelineResponseFolderArgs) ToPipelineResponseFolderOutput() PipelineResponseFolderOutput {
	return i.ToPipelineResponseFolderOutputWithContext(context.Background())
}

func (i PipelineResponseFolderArgs) ToPipelineResponseFolderOutputWithContext(ctx context.Context) PipelineResponseFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineResponseFolderOutput)
}

func (i PipelineResponseFolderArgs) ToPipelineResponseFolderPtrOutput() PipelineResponseFolderPtrOutput {
	return i.ToPipelineResponseFolderPtrOutputWithContext(context.Background())
}

func (i PipelineResponseFolderArgs) ToPipelineResponseFolderPtrOutputWithContext(ctx context.Context) PipelineResponseFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineResponseFolderOutput).ToPipelineResponseFolderPtrOutputWithContext(ctx)
}

// PipelineResponseFolderPtrInput is an input type that accepts PipelineResponseFolderArgs, PipelineResponseFolderPtr and PipelineResponseFolderPtrOutput values.
// You can construct a concrete instance of `PipelineResponseFolderPtrInput` via:
//
//          PipelineResponseFolderArgs{...}
//
//  or:
//
//          nil
type PipelineResponseFolderPtrInput interface {
	pulumi.Input

	ToPipelineResponseFolderPtrOutput() PipelineResponseFolderPtrOutput
	ToPipelineResponseFolderPtrOutputWithContext(context.Context) PipelineResponseFolderPtrOutput
}

type pipelineResponseFolderPtrType PipelineResponseFolderArgs

func PipelineResponseFolderPtr(v *PipelineResponseFolderArgs) PipelineResponseFolderPtrInput {
	return (*pipelineResponseFolderPtrType)(v)
}

func (*pipelineResponseFolderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineResponseFolder)(nil)).Elem()
}

func (i *pipelineResponseFolderPtrType) ToPipelineResponseFolderPtrOutput() PipelineResponseFolderPtrOutput {
	return i.ToPipelineResponseFolderPtrOutputWithContext(context.Background())
}

func (i *pipelineResponseFolderPtrType) ToPipelineResponseFolderPtrOutputWithContext(ctx context.Context) PipelineResponseFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineResponseFolderPtrOutput)
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineResponseFolderOutput struct{ *pulumi.OutputState }

func (PipelineResponseFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineResponseFolder)(nil)).Elem()
}

func (o PipelineResponseFolderOutput) ToPipelineResponseFolderOutput() PipelineResponseFolderOutput {
	return o
}

func (o PipelineResponseFolderOutput) ToPipelineResponseFolderOutputWithContext(ctx context.Context) PipelineResponseFolderOutput {
	return o
}

func (o PipelineResponseFolderOutput) ToPipelineResponseFolderPtrOutput() PipelineResponseFolderPtrOutput {
	return o.ToPipelineResponseFolderPtrOutputWithContext(context.Background())
}

func (o PipelineResponseFolderOutput) ToPipelineResponseFolderPtrOutputWithContext(ctx context.Context) PipelineResponseFolderPtrOutput {
	return o.ApplyT(func(v PipelineResponseFolder) *PipelineResponseFolder {
		return &v
	}).(PipelineResponseFolderPtrOutput)
}

// The name of the folder that this Pipeline is in.
func (o PipelineResponseFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineResponseFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PipelineResponseFolderPtrOutput struct{ *pulumi.OutputState }

func (PipelineResponseFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineResponseFolder)(nil)).Elem()
}

func (o PipelineResponseFolderPtrOutput) ToPipelineResponseFolderPtrOutput() PipelineResponseFolderPtrOutput {
	return o
}

func (o PipelineResponseFolderPtrOutput) ToPipelineResponseFolderPtrOutputWithContext(ctx context.Context) PipelineResponseFolderPtrOutput {
	return o
}

func (o PipelineResponseFolderPtrOutput) Elem() PipelineResponseFolderOutput {
	return o.ApplyT(func(v *PipelineResponseFolder) PipelineResponseFolder { return *v }).(PipelineResponseFolderOutput)
}

// The name of the folder that this Pipeline is in.
func (o PipelineResponseFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineResponseFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Azure data factory nested object which contains information about creating pipeline run
type TriggerType struct {
	// List of tags that can be used for describing the trigger.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Trigger type.
	Type string `pulumi:"type"`
}

// TriggerTypeInput is an input type that accepts TriggerTypeArgs and TriggerTypeOutput values.
// You can construct a concrete instance of `TriggerTypeInput` via:
//
//          TriggerTypeArgs{...}
type TriggerTypeInput interface {
	pulumi.Input

	ToTriggerTypeOutput() TriggerTypeOutput
	ToTriggerTypeOutputWithContext(context.Context) TriggerTypeOutput
}

// Azure data factory nested object which contains information about creating pipeline run
type TriggerTypeArgs struct {
	// List of tags that can be used for describing the trigger.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Trigger type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TriggerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerType)(nil)).Elem()
}

func (i TriggerTypeArgs) ToTriggerTypeOutput() TriggerTypeOutput {
	return i.ToTriggerTypeOutputWithContext(context.Background())
}

func (i TriggerTypeArgs) ToTriggerTypeOutputWithContext(ctx context.Context) TriggerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTypeOutput)
}

func (i TriggerTypeArgs) ToTriggerTypePtrOutput() TriggerTypePtrOutput {
	return i.ToTriggerTypePtrOutputWithContext(context.Background())
}

func (i TriggerTypeArgs) ToTriggerTypePtrOutputWithContext(ctx context.Context) TriggerTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTypeOutput).ToTriggerTypePtrOutputWithContext(ctx)
}

// TriggerTypePtrInput is an input type that accepts TriggerTypeArgs, TriggerTypePtr and TriggerTypePtrOutput values.
// You can construct a concrete instance of `TriggerTypePtrInput` via:
//
//          TriggerTypeArgs{...}
//
//  or:
//
//          nil
type TriggerTypePtrInput interface {
	pulumi.Input

	ToTriggerTypePtrOutput() TriggerTypePtrOutput
	ToTriggerTypePtrOutputWithContext(context.Context) TriggerTypePtrOutput
}

type triggerTypePtrType TriggerTypeArgs

func TriggerTypePtr(v *TriggerTypeArgs) TriggerTypePtrInput {
	return (*triggerTypePtrType)(v)
}

func (*triggerTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerType)(nil)).Elem()
}

func (i *triggerTypePtrType) ToTriggerTypePtrOutput() TriggerTypePtrOutput {
	return i.ToTriggerTypePtrOutputWithContext(context.Background())
}

func (i *triggerTypePtrType) ToTriggerTypePtrOutputWithContext(ctx context.Context) TriggerTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTypePtrOutput)
}

// Azure data factory nested object which contains information about creating pipeline run
type TriggerTypeOutput struct{ *pulumi.OutputState }

func (TriggerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerType)(nil)).Elem()
}

func (o TriggerTypeOutput) ToTriggerTypeOutput() TriggerTypeOutput {
	return o
}

func (o TriggerTypeOutput) ToTriggerTypeOutputWithContext(ctx context.Context) TriggerTypeOutput {
	return o
}

func (o TriggerTypeOutput) ToTriggerTypePtrOutput() TriggerTypePtrOutput {
	return o.ToTriggerTypePtrOutputWithContext(context.Background())
}

func (o TriggerTypeOutput) ToTriggerTypePtrOutputWithContext(ctx context.Context) TriggerTypePtrOutput {
	return o.ApplyT(func(v TriggerType) *TriggerType {
		return &v
	}).(TriggerTypePtrOutput)
}

// List of tags that can be used for describing the trigger.
func (o TriggerTypeOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v TriggerType) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Trigger description.
func (o TriggerTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Trigger type.
func (o TriggerTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerType) string { return v.Type }).(pulumi.StringOutput)
}

type TriggerTypePtrOutput struct{ *pulumi.OutputState }

func (TriggerTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerType)(nil)).Elem()
}

func (o TriggerTypePtrOutput) ToTriggerTypePtrOutput() TriggerTypePtrOutput {
	return o
}

func (o TriggerTypePtrOutput) ToTriggerTypePtrOutputWithContext(ctx context.Context) TriggerTypePtrOutput {
	return o
}

func (o TriggerTypePtrOutput) Elem() TriggerTypeOutput {
	return o.ApplyT(func(v *TriggerType) TriggerType { return *v }).(TriggerTypeOutput)
}

// List of tags that can be used for describing the trigger.
func (o TriggerTypePtrOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *TriggerType) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.MapArrayOutput)
}

// Trigger description.
func (o TriggerTypePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerType) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Trigger type.
func (o TriggerTypePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerType) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure data factory nested object which contains information about creating pipeline run
type TriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// Trigger type.
	Type string `pulumi:"type"`
}

// TriggerResponseInput is an input type that accepts TriggerResponseArgs and TriggerResponseOutput values.
// You can construct a concrete instance of `TriggerResponseInput` via:
//
//          TriggerResponseArgs{...}
type TriggerResponseInput interface {
	pulumi.Input

	ToTriggerResponseOutput() TriggerResponseOutput
	ToTriggerResponseOutputWithContext(context.Context) TriggerResponseOutput
}

// Azure data factory nested object which contains information about creating pipeline run
type TriggerResponseArgs struct {
	// List of tags that can be used for describing the trigger.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState pulumi.StringInput `pulumi:"runtimeState"`
	// Trigger type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TriggerResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerResponse)(nil)).Elem()
}

func (i TriggerResponseArgs) ToTriggerResponseOutput() TriggerResponseOutput {
	return i.ToTriggerResponseOutputWithContext(context.Background())
}

func (i TriggerResponseArgs) ToTriggerResponseOutputWithContext(ctx context.Context) TriggerResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerResponseOutput)
}

func (i TriggerResponseArgs) ToTriggerResponsePtrOutput() TriggerResponsePtrOutput {
	return i.ToTriggerResponsePtrOutputWithContext(context.Background())
}

func (i TriggerResponseArgs) ToTriggerResponsePtrOutputWithContext(ctx context.Context) TriggerResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerResponseOutput).ToTriggerResponsePtrOutputWithContext(ctx)
}

// TriggerResponsePtrInput is an input type that accepts TriggerResponseArgs, TriggerResponsePtr and TriggerResponsePtrOutput values.
// You can construct a concrete instance of `TriggerResponsePtrInput` via:
//
//          TriggerResponseArgs{...}
//
//  or:
//
//          nil
type TriggerResponsePtrInput interface {
	pulumi.Input

	ToTriggerResponsePtrOutput() TriggerResponsePtrOutput
	ToTriggerResponsePtrOutputWithContext(context.Context) TriggerResponsePtrOutput
}

type triggerResponsePtrType TriggerResponseArgs

func TriggerResponsePtr(v *TriggerResponseArgs) TriggerResponsePtrInput {
	return (*triggerResponsePtrType)(v)
}

func (*triggerResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerResponse)(nil)).Elem()
}

func (i *triggerResponsePtrType) ToTriggerResponsePtrOutput() TriggerResponsePtrOutput {
	return i.ToTriggerResponsePtrOutputWithContext(context.Background())
}

func (i *triggerResponsePtrType) ToTriggerResponsePtrOutputWithContext(ctx context.Context) TriggerResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerResponsePtrOutput)
}

// Azure data factory nested object which contains information about creating pipeline run
type TriggerResponseOutput struct{ *pulumi.OutputState }

func (TriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerResponse)(nil)).Elem()
}

func (o TriggerResponseOutput) ToTriggerResponseOutput() TriggerResponseOutput {
	return o
}

func (o TriggerResponseOutput) ToTriggerResponseOutputWithContext(ctx context.Context) TriggerResponseOutput {
	return o
}

func (o TriggerResponseOutput) ToTriggerResponsePtrOutput() TriggerResponsePtrOutput {
	return o.ToTriggerResponsePtrOutputWithContext(context.Background())
}

func (o TriggerResponseOutput) ToTriggerResponsePtrOutputWithContext(ctx context.Context) TriggerResponsePtrOutput {
	return o.ApplyT(func(v TriggerResponse) *TriggerResponse {
		return &v
	}).(TriggerResponsePtrOutput)
}

// List of tags that can be used for describing the trigger.
func (o TriggerResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v TriggerResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Trigger description.
func (o TriggerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
func (o TriggerResponseOutput) RuntimeState() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerResponse) string { return v.RuntimeState }).(pulumi.StringOutput)
}

// Trigger type.
func (o TriggerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerResponse) string { return v.Type }).(pulumi.StringOutput)
}

type TriggerResponsePtrOutput struct{ *pulumi.OutputState }

func (TriggerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerResponse)(nil)).Elem()
}

func (o TriggerResponsePtrOutput) ToTriggerResponsePtrOutput() TriggerResponsePtrOutput {
	return o
}

func (o TriggerResponsePtrOutput) ToTriggerResponsePtrOutputWithContext(ctx context.Context) TriggerResponsePtrOutput {
	return o
}

func (o TriggerResponsePtrOutput) Elem() TriggerResponseOutput {
	return o.ApplyT(func(v *TriggerResponse) TriggerResponse { return *v }).(TriggerResponseOutput)
}

// List of tags that can be used for describing the trigger.
func (o TriggerResponsePtrOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *TriggerResponse) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.MapArrayOutput)
}

// Trigger description.
func (o TriggerResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
func (o TriggerResponsePtrOutput) RuntimeState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RuntimeState
	}).(pulumi.StringPtrOutput)
}

// Trigger type.
func (o TriggerResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User property.
type UserProperty struct {
	// User property name.
	Name string `pulumi:"name"`
	// User property value. Type: string (or Expression with resultType string).
	Value map[string]interface{} `pulumi:"value"`
}

// UserPropertyInput is an input type that accepts UserPropertyArgs and UserPropertyOutput values.
// You can construct a concrete instance of `UserPropertyInput` via:
//
//          UserPropertyArgs{...}
type UserPropertyInput interface {
	pulumi.Input

	ToUserPropertyOutput() UserPropertyOutput
	ToUserPropertyOutputWithContext(context.Context) UserPropertyOutput
}

// User property.
type UserPropertyArgs struct {
	// User property name.
	Name pulumi.StringInput `pulumi:"name"`
	// User property value. Type: string (or Expression with resultType string).
	Value pulumi.MapInput `pulumi:"value"`
}

func (UserPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserProperty)(nil)).Elem()
}

func (i UserPropertyArgs) ToUserPropertyOutput() UserPropertyOutput {
	return i.ToUserPropertyOutputWithContext(context.Background())
}

func (i UserPropertyArgs) ToUserPropertyOutputWithContext(ctx context.Context) UserPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPropertyOutput)
}

// UserPropertyArrayInput is an input type that accepts UserPropertyArray and UserPropertyArrayOutput values.
// You can construct a concrete instance of `UserPropertyArrayInput` via:
//
//          UserPropertyArray{ UserPropertyArgs{...} }
type UserPropertyArrayInput interface {
	pulumi.Input

	ToUserPropertyArrayOutput() UserPropertyArrayOutput
	ToUserPropertyArrayOutputWithContext(context.Context) UserPropertyArrayOutput
}

type UserPropertyArray []UserPropertyInput

func (UserPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserProperty)(nil)).Elem()
}

func (i UserPropertyArray) ToUserPropertyArrayOutput() UserPropertyArrayOutput {
	return i.ToUserPropertyArrayOutputWithContext(context.Background())
}

func (i UserPropertyArray) ToUserPropertyArrayOutputWithContext(ctx context.Context) UserPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPropertyArrayOutput)
}

// User property.
type UserPropertyOutput struct{ *pulumi.OutputState }

func (UserPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserProperty)(nil)).Elem()
}

func (o UserPropertyOutput) ToUserPropertyOutput() UserPropertyOutput {
	return o
}

func (o UserPropertyOutput) ToUserPropertyOutputWithContext(ctx context.Context) UserPropertyOutput {
	return o
}

// User property name.
func (o UserPropertyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UserProperty) string { return v.Name }).(pulumi.StringOutput)
}

// User property value. Type: string (or Expression with resultType string).
func (o UserPropertyOutput) Value() pulumi.MapOutput {
	return o.ApplyT(func(v UserProperty) map[string]interface{} { return v.Value }).(pulumi.MapOutput)
}

type UserPropertyArrayOutput struct{ *pulumi.OutputState }

func (UserPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserProperty)(nil)).Elem()
}

func (o UserPropertyArrayOutput) ToUserPropertyArrayOutput() UserPropertyArrayOutput {
	return o
}

func (o UserPropertyArrayOutput) ToUserPropertyArrayOutputWithContext(ctx context.Context) UserPropertyArrayOutput {
	return o
}

func (o UserPropertyArrayOutput) Index(i pulumi.IntInput) UserPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserProperty {
		return vs[0].([]UserProperty)[vs[1].(int)]
	}).(UserPropertyOutput)
}

// User property.
type UserPropertyResponse struct {
	// User property name.
	Name string `pulumi:"name"`
	// User property value. Type: string (or Expression with resultType string).
	Value map[string]interface{} `pulumi:"value"`
}

// UserPropertyResponseInput is an input type that accepts UserPropertyResponseArgs and UserPropertyResponseOutput values.
// You can construct a concrete instance of `UserPropertyResponseInput` via:
//
//          UserPropertyResponseArgs{...}
type UserPropertyResponseInput interface {
	pulumi.Input

	ToUserPropertyResponseOutput() UserPropertyResponseOutput
	ToUserPropertyResponseOutputWithContext(context.Context) UserPropertyResponseOutput
}

// User property.
type UserPropertyResponseArgs struct {
	// User property name.
	Name pulumi.StringInput `pulumi:"name"`
	// User property value. Type: string (or Expression with resultType string).
	Value pulumi.MapInput `pulumi:"value"`
}

func (UserPropertyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPropertyResponse)(nil)).Elem()
}

func (i UserPropertyResponseArgs) ToUserPropertyResponseOutput() UserPropertyResponseOutput {
	return i.ToUserPropertyResponseOutputWithContext(context.Background())
}

func (i UserPropertyResponseArgs) ToUserPropertyResponseOutputWithContext(ctx context.Context) UserPropertyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPropertyResponseOutput)
}

// UserPropertyResponseArrayInput is an input type that accepts UserPropertyResponseArray and UserPropertyResponseArrayOutput values.
// You can construct a concrete instance of `UserPropertyResponseArrayInput` via:
//
//          UserPropertyResponseArray{ UserPropertyResponseArgs{...} }
type UserPropertyResponseArrayInput interface {
	pulumi.Input

	ToUserPropertyResponseArrayOutput() UserPropertyResponseArrayOutput
	ToUserPropertyResponseArrayOutputWithContext(context.Context) UserPropertyResponseArrayOutput
}

type UserPropertyResponseArray []UserPropertyResponseInput

func (UserPropertyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserPropertyResponse)(nil)).Elem()
}

func (i UserPropertyResponseArray) ToUserPropertyResponseArrayOutput() UserPropertyResponseArrayOutput {
	return i.ToUserPropertyResponseArrayOutputWithContext(context.Background())
}

func (i UserPropertyResponseArray) ToUserPropertyResponseArrayOutputWithContext(ctx context.Context) UserPropertyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPropertyResponseArrayOutput)
}

// User property.
type UserPropertyResponseOutput struct{ *pulumi.OutputState }

func (UserPropertyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPropertyResponse)(nil)).Elem()
}

func (o UserPropertyResponseOutput) ToUserPropertyResponseOutput() UserPropertyResponseOutput {
	return o
}

func (o UserPropertyResponseOutput) ToUserPropertyResponseOutputWithContext(ctx context.Context) UserPropertyResponseOutput {
	return o
}

// User property name.
func (o UserPropertyResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UserPropertyResponse) string { return v.Name }).(pulumi.StringOutput)
}

// User property value. Type: string (or Expression with resultType string).
func (o UserPropertyResponseOutput) Value() pulumi.MapOutput {
	return o.ApplyT(func(v UserPropertyResponse) map[string]interface{} { return v.Value }).(pulumi.MapOutput)
}

type UserPropertyResponseArrayOutput struct{ *pulumi.OutputState }

func (UserPropertyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserPropertyResponse)(nil)).Elem()
}

func (o UserPropertyResponseArrayOutput) ToUserPropertyResponseArrayOutput() UserPropertyResponseArrayOutput {
	return o
}

func (o UserPropertyResponseArrayOutput) ToUserPropertyResponseArrayOutputWithContext(ctx context.Context) UserPropertyResponseArrayOutput {
	return o
}

func (o UserPropertyResponseArrayOutput) Index(i pulumi.IntInput) UserPropertyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserPropertyResponse {
		return vs[0].([]UserPropertyResponse)[vs[1].(int)]
	}).(UserPropertyResponseOutput)
}

// Definition of a single variable for a Pipeline.
type VariableSpecification struct {
	// Default value of variable.
	DefaultValue map[string]interface{} `pulumi:"defaultValue"`
	// Variable type.
	Type string `pulumi:"type"`
}

// VariableSpecificationInput is an input type that accepts VariableSpecificationArgs and VariableSpecificationOutput values.
// You can construct a concrete instance of `VariableSpecificationInput` via:
//
//          VariableSpecificationArgs{...}
type VariableSpecificationInput interface {
	pulumi.Input

	ToVariableSpecificationOutput() VariableSpecificationOutput
	ToVariableSpecificationOutputWithContext(context.Context) VariableSpecificationOutput
}

// Definition of a single variable for a Pipeline.
type VariableSpecificationArgs struct {
	// Default value of variable.
	DefaultValue pulumi.MapInput `pulumi:"defaultValue"`
	// Variable type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (VariableSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableSpecification)(nil)).Elem()
}

func (i VariableSpecificationArgs) ToVariableSpecificationOutput() VariableSpecificationOutput {
	return i.ToVariableSpecificationOutputWithContext(context.Background())
}

func (i VariableSpecificationArgs) ToVariableSpecificationOutputWithContext(ctx context.Context) VariableSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableSpecificationOutput)
}

// VariableSpecificationMapInput is an input type that accepts VariableSpecificationMap and VariableSpecificationMapOutput values.
// You can construct a concrete instance of `VariableSpecificationMapInput` via:
//
//          VariableSpecificationMap{ "key": VariableSpecificationArgs{...} }
type VariableSpecificationMapInput interface {
	pulumi.Input

	ToVariableSpecificationMapOutput() VariableSpecificationMapOutput
	ToVariableSpecificationMapOutputWithContext(context.Context) VariableSpecificationMapOutput
}

type VariableSpecificationMap map[string]VariableSpecificationInput

func (VariableSpecificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VariableSpecification)(nil)).Elem()
}

func (i VariableSpecificationMap) ToVariableSpecificationMapOutput() VariableSpecificationMapOutput {
	return i.ToVariableSpecificationMapOutputWithContext(context.Background())
}

func (i VariableSpecificationMap) ToVariableSpecificationMapOutputWithContext(ctx context.Context) VariableSpecificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableSpecificationMapOutput)
}

// Definition of a single variable for a Pipeline.
type VariableSpecificationOutput struct{ *pulumi.OutputState }

func (VariableSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableSpecification)(nil)).Elem()
}

func (o VariableSpecificationOutput) ToVariableSpecificationOutput() VariableSpecificationOutput {
	return o
}

func (o VariableSpecificationOutput) ToVariableSpecificationOutputWithContext(ctx context.Context) VariableSpecificationOutput {
	return o
}

// Default value of variable.
func (o VariableSpecificationOutput) DefaultValue() pulumi.MapOutput {
	return o.ApplyT(func(v VariableSpecification) map[string]interface{} { return v.DefaultValue }).(pulumi.MapOutput)
}

// Variable type.
func (o VariableSpecificationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VariableSpecification) string { return v.Type }).(pulumi.StringOutput)
}

type VariableSpecificationMapOutput struct{ *pulumi.OutputState }

func (VariableSpecificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VariableSpecification)(nil)).Elem()
}

func (o VariableSpecificationMapOutput) ToVariableSpecificationMapOutput() VariableSpecificationMapOutput {
	return o
}

func (o VariableSpecificationMapOutput) ToVariableSpecificationMapOutputWithContext(ctx context.Context) VariableSpecificationMapOutput {
	return o
}

func (o VariableSpecificationMapOutput) MapIndex(k pulumi.StringInput) VariableSpecificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VariableSpecification {
		return vs[0].(map[string]VariableSpecification)[vs[1].(string)]
	}).(VariableSpecificationOutput)
}

// Definition of a single variable for a Pipeline.
type VariableSpecificationResponse struct {
	// Default value of variable.
	DefaultValue map[string]interface{} `pulumi:"defaultValue"`
	// Variable type.
	Type string `pulumi:"type"`
}

// VariableSpecificationResponseInput is an input type that accepts VariableSpecificationResponseArgs and VariableSpecificationResponseOutput values.
// You can construct a concrete instance of `VariableSpecificationResponseInput` via:
//
//          VariableSpecificationResponseArgs{...}
type VariableSpecificationResponseInput interface {
	pulumi.Input

	ToVariableSpecificationResponseOutput() VariableSpecificationResponseOutput
	ToVariableSpecificationResponseOutputWithContext(context.Context) VariableSpecificationResponseOutput
}

// Definition of a single variable for a Pipeline.
type VariableSpecificationResponseArgs struct {
	// Default value of variable.
	DefaultValue pulumi.MapInput `pulumi:"defaultValue"`
	// Variable type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (VariableSpecificationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableSpecificationResponse)(nil)).Elem()
}

func (i VariableSpecificationResponseArgs) ToVariableSpecificationResponseOutput() VariableSpecificationResponseOutput {
	return i.ToVariableSpecificationResponseOutputWithContext(context.Background())
}

func (i VariableSpecificationResponseArgs) ToVariableSpecificationResponseOutputWithContext(ctx context.Context) VariableSpecificationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableSpecificationResponseOutput)
}

// VariableSpecificationResponseMapInput is an input type that accepts VariableSpecificationResponseMap and VariableSpecificationResponseMapOutput values.
// You can construct a concrete instance of `VariableSpecificationResponseMapInput` via:
//
//          VariableSpecificationResponseMap{ "key": VariableSpecificationResponseArgs{...} }
type VariableSpecificationResponseMapInput interface {
	pulumi.Input

	ToVariableSpecificationResponseMapOutput() VariableSpecificationResponseMapOutput
	ToVariableSpecificationResponseMapOutputWithContext(context.Context) VariableSpecificationResponseMapOutput
}

type VariableSpecificationResponseMap map[string]VariableSpecificationResponseInput

func (VariableSpecificationResponseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VariableSpecificationResponse)(nil)).Elem()
}

func (i VariableSpecificationResponseMap) ToVariableSpecificationResponseMapOutput() VariableSpecificationResponseMapOutput {
	return i.ToVariableSpecificationResponseMapOutputWithContext(context.Background())
}

func (i VariableSpecificationResponseMap) ToVariableSpecificationResponseMapOutputWithContext(ctx context.Context) VariableSpecificationResponseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableSpecificationResponseMapOutput)
}

// Definition of a single variable for a Pipeline.
type VariableSpecificationResponseOutput struct{ *pulumi.OutputState }

func (VariableSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableSpecificationResponse)(nil)).Elem()
}

func (o VariableSpecificationResponseOutput) ToVariableSpecificationResponseOutput() VariableSpecificationResponseOutput {
	return o
}

func (o VariableSpecificationResponseOutput) ToVariableSpecificationResponseOutputWithContext(ctx context.Context) VariableSpecificationResponseOutput {
	return o
}

// Default value of variable.
func (o VariableSpecificationResponseOutput) DefaultValue() pulumi.MapOutput {
	return o.ApplyT(func(v VariableSpecificationResponse) map[string]interface{} { return v.DefaultValue }).(pulumi.MapOutput)
}

// Variable type.
func (o VariableSpecificationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VariableSpecificationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type VariableSpecificationResponseMapOutput struct{ *pulumi.OutputState }

func (VariableSpecificationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VariableSpecificationResponse)(nil)).Elem()
}

func (o VariableSpecificationResponseMapOutput) ToVariableSpecificationResponseMapOutput() VariableSpecificationResponseMapOutput {
	return o
}

func (o VariableSpecificationResponseMapOutput) ToVariableSpecificationResponseMapOutputWithContext(ctx context.Context) VariableSpecificationResponseMapOutput {
	return o
}

func (o VariableSpecificationResponseMapOutput) MapIndex(k pulumi.StringInput) VariableSpecificationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VariableSpecificationResponse {
		return vs[0].(map[string]VariableSpecificationResponse)[vs[1].(string)]
	}).(VariableSpecificationResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(ActivityOutput{})
	pulumi.RegisterOutputType(ActivityArrayOutput{})
	pulumi.RegisterOutputType(ActivityDependencyOutput{})
	pulumi.RegisterOutputType(ActivityDependencyArrayOutput{})
	pulumi.RegisterOutputType(ActivityDependencyResponseOutput{})
	pulumi.RegisterOutputType(ActivityDependencyResponseArrayOutput{})
	pulumi.RegisterOutputType(ActivityResponseOutput{})
	pulumi.RegisterOutputType(ActivityResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectionStatePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectionStatePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(DataFlowTypeOutput{})
	pulumi.RegisterOutputType(DataFlowTypePtrOutput{})
	pulumi.RegisterOutputType(DataFlowFolderOutput{})
	pulumi.RegisterOutputType(DataFlowFolderPtrOutput{})
	pulumi.RegisterOutputType(DataFlowResponseOutput{})
	pulumi.RegisterOutputType(DataFlowResponsePtrOutput{})
	pulumi.RegisterOutputType(DataFlowResponseFolderOutput{})
	pulumi.RegisterOutputType(DataFlowResponseFolderPtrOutput{})
	pulumi.RegisterOutputType(DatasetTypeOutput{})
	pulumi.RegisterOutputType(DatasetTypePtrOutput{})
	pulumi.RegisterOutputType(DatasetFolderOutput{})
	pulumi.RegisterOutputType(DatasetFolderPtrOutput{})
	pulumi.RegisterOutputType(DatasetResponseOutput{})
	pulumi.RegisterOutputType(DatasetResponsePtrOutput{})
	pulumi.RegisterOutputType(DatasetResponseFolderOutput{})
	pulumi.RegisterOutputType(DatasetResponseFolderPtrOutput{})
	pulumi.RegisterOutputType(FactoryIdentityOutput{})
	pulumi.RegisterOutputType(FactoryIdentityPtrOutput{})
	pulumi.RegisterOutputType(FactoryIdentityResponseOutput{})
	pulumi.RegisterOutputType(FactoryIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(FactoryRepoConfigurationOutput{})
	pulumi.RegisterOutputType(FactoryRepoConfigurationPtrOutput{})
	pulumi.RegisterOutputType(FactoryRepoConfigurationResponseOutput{})
	pulumi.RegisterOutputType(FactoryRepoConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(GlobalParameterSpecificationOutput{})
	pulumi.RegisterOutputType(GlobalParameterSpecificationMapOutput{})
	pulumi.RegisterOutputType(GlobalParameterSpecificationResponseOutput{})
	pulumi.RegisterOutputType(GlobalParameterSpecificationResponseMapOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeTypeOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeTypePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferenceOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferencePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferenceResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeResponsePtrOutput{})
	pulumi.RegisterOutputType(LinkedServiceTypeOutput{})
	pulumi.RegisterOutputType(LinkedServiceTypePtrOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferencePtrOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceResponseOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(LinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(LinkedServiceResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedPrivateEndpointTypeOutput{})
	pulumi.RegisterOutputType(ManagedPrivateEndpointTypePtrOutput{})
	pulumi.RegisterOutputType(ManagedPrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(ManagedPrivateEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationMapOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationResponseOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationResponseMapOutput{})
	pulumi.RegisterOutputType(PipelineFolderOutput{})
	pulumi.RegisterOutputType(PipelineFolderPtrOutput{})
	pulumi.RegisterOutputType(PipelineResponseFolderOutput{})
	pulumi.RegisterOutputType(PipelineResponseFolderPtrOutput{})
	pulumi.RegisterOutputType(TriggerTypeOutput{})
	pulumi.RegisterOutputType(TriggerTypePtrOutput{})
	pulumi.RegisterOutputType(TriggerResponseOutput{})
	pulumi.RegisterOutputType(TriggerResponsePtrOutput{})
	pulumi.RegisterOutputType(UserPropertyOutput{})
	pulumi.RegisterOutputType(UserPropertyArrayOutput{})
	pulumi.RegisterOutputType(UserPropertyResponseOutput{})
	pulumi.RegisterOutputType(UserPropertyResponseArrayOutput{})
	pulumi.RegisterOutputType(VariableSpecificationOutput{})
	pulumi.RegisterOutputType(VariableSpecificationMapOutput{})
	pulumi.RegisterOutputType(VariableSpecificationResponseOutput{})
	pulumi.RegisterOutputType(VariableSpecificationResponseMapOutput{})
}
