// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180601

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A pipeline activity.
type Activity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// ActivityInput is an input type that accepts ActivityArgs and ActivityOutput values.
// You can construct a concrete instance of `ActivityInput` via:
//
//          ActivityArgs{...}
type ActivityInput interface {
	pulumi.Input

	ToActivityOutput() ActivityOutput
	ToActivityOutputWithContext(context.Context) ActivityOutput
}

// A pipeline activity.
type ActivityArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of activity.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (ActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Activity)(nil)).Elem()
}

func (i ActivityArgs) ToActivityOutput() ActivityOutput {
	return i.ToActivityOutputWithContext(context.Background())
}

func (i ActivityArgs) ToActivityOutputWithContext(ctx context.Context) ActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityOutput)
}

// ActivityArrayInput is an input type that accepts ActivityArray and ActivityArrayOutput values.
// You can construct a concrete instance of `ActivityArrayInput` via:
//
//          ActivityArray{ ActivityArgs{...} }
type ActivityArrayInput interface {
	pulumi.Input

	ToActivityArrayOutput() ActivityArrayOutput
	ToActivityArrayOutputWithContext(context.Context) ActivityArrayOutput
}

type ActivityArray []ActivityInput

func (ActivityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Activity)(nil)).Elem()
}

func (i ActivityArray) ToActivityArrayOutput() ActivityArrayOutput {
	return i.ToActivityArrayOutputWithContext(context.Background())
}

func (i ActivityArray) ToActivityArrayOutputWithContext(ctx context.Context) ActivityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityArrayOutput)
}

// A pipeline activity.
type ActivityOutput struct{ *pulumi.OutputState }

func (ActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Activity)(nil)).Elem()
}

func (o ActivityOutput) ToActivityOutput() ActivityOutput {
	return o
}

func (o ActivityOutput) ToActivityOutputWithContext(ctx context.Context) ActivityOutput {
	return o
}

// Activity depends on condition.
func (o ActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v Activity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o ActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Activity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Activity name.
func (o ActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Activity) string { return v.Name }).(pulumi.StringOutput)
}

// Type of activity.
func (o ActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Activity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v Activity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

type ActivityArrayOutput struct{ *pulumi.OutputState }

func (ActivityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Activity)(nil)).Elem()
}

func (o ActivityArrayOutput) ToActivityArrayOutput() ActivityArrayOutput {
	return o
}

func (o ActivityArrayOutput) ToActivityArrayOutputWithContext(ctx context.Context) ActivityArrayOutput {
	return o
}

func (o ActivityArrayOutput) Index(i pulumi.IntInput) ActivityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Activity {
		return vs[0].([]Activity)[vs[1].(int)]
	}).(ActivityOutput)
}

// Activity dependency information.
type ActivityDependency struct {
	// Activity name.
	Activity string `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions []string `pulumi:"dependencyConditions"`
}

// ActivityDependencyInput is an input type that accepts ActivityDependencyArgs and ActivityDependencyOutput values.
// You can construct a concrete instance of `ActivityDependencyInput` via:
//
//          ActivityDependencyArgs{...}
type ActivityDependencyInput interface {
	pulumi.Input

	ToActivityDependencyOutput() ActivityDependencyOutput
	ToActivityDependencyOutputWithContext(context.Context) ActivityDependencyOutput
}

// Activity dependency information.
type ActivityDependencyArgs struct {
	// Activity name.
	Activity pulumi.StringInput `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions pulumi.StringArrayInput `pulumi:"dependencyConditions"`
}

func (ActivityDependencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityDependency)(nil)).Elem()
}

func (i ActivityDependencyArgs) ToActivityDependencyOutput() ActivityDependencyOutput {
	return i.ToActivityDependencyOutputWithContext(context.Background())
}

func (i ActivityDependencyArgs) ToActivityDependencyOutputWithContext(ctx context.Context) ActivityDependencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityDependencyOutput)
}

// ActivityDependencyArrayInput is an input type that accepts ActivityDependencyArray and ActivityDependencyArrayOutput values.
// You can construct a concrete instance of `ActivityDependencyArrayInput` via:
//
//          ActivityDependencyArray{ ActivityDependencyArgs{...} }
type ActivityDependencyArrayInput interface {
	pulumi.Input

	ToActivityDependencyArrayOutput() ActivityDependencyArrayOutput
	ToActivityDependencyArrayOutputWithContext(context.Context) ActivityDependencyArrayOutput
}

type ActivityDependencyArray []ActivityDependencyInput

func (ActivityDependencyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityDependency)(nil)).Elem()
}

func (i ActivityDependencyArray) ToActivityDependencyArrayOutput() ActivityDependencyArrayOutput {
	return i.ToActivityDependencyArrayOutputWithContext(context.Background())
}

func (i ActivityDependencyArray) ToActivityDependencyArrayOutputWithContext(ctx context.Context) ActivityDependencyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityDependencyArrayOutput)
}

// Activity dependency information.
type ActivityDependencyOutput struct{ *pulumi.OutputState }

func (ActivityDependencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityDependency)(nil)).Elem()
}

func (o ActivityDependencyOutput) ToActivityDependencyOutput() ActivityDependencyOutput {
	return o
}

func (o ActivityDependencyOutput) ToActivityDependencyOutputWithContext(ctx context.Context) ActivityDependencyOutput {
	return o
}

// Activity name.
func (o ActivityDependencyOutput) Activity() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityDependency) string { return v.Activity }).(pulumi.StringOutput)
}

// Match-Condition for the dependency.
func (o ActivityDependencyOutput) DependencyConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityDependency) []string { return v.DependencyConditions }).(pulumi.StringArrayOutput)
}

type ActivityDependencyArrayOutput struct{ *pulumi.OutputState }

func (ActivityDependencyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityDependency)(nil)).Elem()
}

func (o ActivityDependencyArrayOutput) ToActivityDependencyArrayOutput() ActivityDependencyArrayOutput {
	return o
}

func (o ActivityDependencyArrayOutput) ToActivityDependencyArrayOutputWithContext(ctx context.Context) ActivityDependencyArrayOutput {
	return o
}

func (o ActivityDependencyArrayOutput) Index(i pulumi.IntInput) ActivityDependencyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActivityDependency {
		return vs[0].([]ActivityDependency)[vs[1].(int)]
	}).(ActivityDependencyOutput)
}

// Activity dependency information.
type ActivityDependencyResponse struct {
	// Activity name.
	Activity string `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions []string `pulumi:"dependencyConditions"`
}

// ActivityDependencyResponseInput is an input type that accepts ActivityDependencyResponseArgs and ActivityDependencyResponseOutput values.
// You can construct a concrete instance of `ActivityDependencyResponseInput` via:
//
//          ActivityDependencyResponseArgs{...}
type ActivityDependencyResponseInput interface {
	pulumi.Input

	ToActivityDependencyResponseOutput() ActivityDependencyResponseOutput
	ToActivityDependencyResponseOutputWithContext(context.Context) ActivityDependencyResponseOutput
}

// Activity dependency information.
type ActivityDependencyResponseArgs struct {
	// Activity name.
	Activity pulumi.StringInput `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions pulumi.StringArrayInput `pulumi:"dependencyConditions"`
}

func (ActivityDependencyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityDependencyResponse)(nil)).Elem()
}

func (i ActivityDependencyResponseArgs) ToActivityDependencyResponseOutput() ActivityDependencyResponseOutput {
	return i.ToActivityDependencyResponseOutputWithContext(context.Background())
}

func (i ActivityDependencyResponseArgs) ToActivityDependencyResponseOutputWithContext(ctx context.Context) ActivityDependencyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityDependencyResponseOutput)
}

// ActivityDependencyResponseArrayInput is an input type that accepts ActivityDependencyResponseArray and ActivityDependencyResponseArrayOutput values.
// You can construct a concrete instance of `ActivityDependencyResponseArrayInput` via:
//
//          ActivityDependencyResponseArray{ ActivityDependencyResponseArgs{...} }
type ActivityDependencyResponseArrayInput interface {
	pulumi.Input

	ToActivityDependencyResponseArrayOutput() ActivityDependencyResponseArrayOutput
	ToActivityDependencyResponseArrayOutputWithContext(context.Context) ActivityDependencyResponseArrayOutput
}

type ActivityDependencyResponseArray []ActivityDependencyResponseInput

func (ActivityDependencyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityDependencyResponse)(nil)).Elem()
}

func (i ActivityDependencyResponseArray) ToActivityDependencyResponseArrayOutput() ActivityDependencyResponseArrayOutput {
	return i.ToActivityDependencyResponseArrayOutputWithContext(context.Background())
}

func (i ActivityDependencyResponseArray) ToActivityDependencyResponseArrayOutputWithContext(ctx context.Context) ActivityDependencyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityDependencyResponseArrayOutput)
}

// Activity dependency information.
type ActivityDependencyResponseOutput struct{ *pulumi.OutputState }

func (ActivityDependencyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityDependencyResponse)(nil)).Elem()
}

func (o ActivityDependencyResponseOutput) ToActivityDependencyResponseOutput() ActivityDependencyResponseOutput {
	return o
}

func (o ActivityDependencyResponseOutput) ToActivityDependencyResponseOutputWithContext(ctx context.Context) ActivityDependencyResponseOutput {
	return o
}

// Activity name.
func (o ActivityDependencyResponseOutput) Activity() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityDependencyResponse) string { return v.Activity }).(pulumi.StringOutput)
}

// Match-Condition for the dependency.
func (o ActivityDependencyResponseOutput) DependencyConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityDependencyResponse) []string { return v.DependencyConditions }).(pulumi.StringArrayOutput)
}

type ActivityDependencyResponseArrayOutput struct{ *pulumi.OutputState }

func (ActivityDependencyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityDependencyResponse)(nil)).Elem()
}

func (o ActivityDependencyResponseArrayOutput) ToActivityDependencyResponseArrayOutput() ActivityDependencyResponseArrayOutput {
	return o
}

func (o ActivityDependencyResponseArrayOutput) ToActivityDependencyResponseArrayOutputWithContext(ctx context.Context) ActivityDependencyResponseArrayOutput {
	return o
}

func (o ActivityDependencyResponseArrayOutput) Index(i pulumi.IntInput) ActivityDependencyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActivityDependencyResponse {
		return vs[0].([]ActivityDependencyResponse)[vs[1].(int)]
	}).(ActivityDependencyResponseOutput)
}

// A pipeline activity.
type ActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// ActivityResponseInput is an input type that accepts ActivityResponseArgs and ActivityResponseOutput values.
// You can construct a concrete instance of `ActivityResponseInput` via:
//
//          ActivityResponseArgs{...}
type ActivityResponseInput interface {
	pulumi.Input

	ToActivityResponseOutput() ActivityResponseOutput
	ToActivityResponseOutputWithContext(context.Context) ActivityResponseOutput
}

// A pipeline activity.
type ActivityResponseArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyResponseArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of activity.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyResponseArrayInput `pulumi:"userProperties"`
}

func (ActivityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityResponse)(nil)).Elem()
}

func (i ActivityResponseArgs) ToActivityResponseOutput() ActivityResponseOutput {
	return i.ToActivityResponseOutputWithContext(context.Background())
}

func (i ActivityResponseArgs) ToActivityResponseOutputWithContext(ctx context.Context) ActivityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityResponseOutput)
}

// ActivityResponseArrayInput is an input type that accepts ActivityResponseArray and ActivityResponseArrayOutput values.
// You can construct a concrete instance of `ActivityResponseArrayInput` via:
//
//          ActivityResponseArray{ ActivityResponseArgs{...} }
type ActivityResponseArrayInput interface {
	pulumi.Input

	ToActivityResponseArrayOutput() ActivityResponseArrayOutput
	ToActivityResponseArrayOutputWithContext(context.Context) ActivityResponseArrayOutput
}

type ActivityResponseArray []ActivityResponseInput

func (ActivityResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityResponse)(nil)).Elem()
}

func (i ActivityResponseArray) ToActivityResponseArrayOutput() ActivityResponseArrayOutput {
	return i.ToActivityResponseArrayOutputWithContext(context.Background())
}

func (i ActivityResponseArray) ToActivityResponseArrayOutputWithContext(ctx context.Context) ActivityResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityResponseArrayOutput)
}

// A pipeline activity.
type ActivityResponseOutput struct{ *pulumi.OutputState }

func (ActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityResponse)(nil)).Elem()
}

func (o ActivityResponseOutput) ToActivityResponseOutput() ActivityResponseOutput {
	return o
}

func (o ActivityResponseOutput) ToActivityResponseOutputWithContext(ctx context.Context) ActivityResponseOutput {
	return o
}

// Activity depends on condition.
func (o ActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v ActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o ActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Activity name.
func (o ActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of activity.
func (o ActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v ActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

type ActivityResponseArrayOutput struct{ *pulumi.OutputState }

func (ActivityResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityResponse)(nil)).Elem()
}

func (o ActivityResponseArrayOutput) ToActivityResponseArrayOutput() ActivityResponseArrayOutput {
	return o
}

func (o ActivityResponseArrayOutput) ToActivityResponseArrayOutputWithContext(ctx context.Context) ActivityResponseArrayOutput {
	return o
}

func (o ActivityResponseArrayOutput) Index(i pulumi.IntInput) ActivityResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActivityResponse {
		return vs[0].([]ActivityResponse)[vs[1].(int)]
	}).(ActivityResponseOutput)
}

// Data flow resource type.
type DataFlowType struct {
	// Etag identifies change in the resource.
	Etag string `pulumi:"etag"`
	// The resource name.
	Name string `pulumi:"name"`
	// Data flow properties.
	Properties DataFlowResponse `pulumi:"properties"`
	// The resource type.
	Type string `pulumi:"type"`
}

// DataFlowTypeInput is an input type that accepts DataFlowTypeArgs and DataFlowTypeOutput values.
// You can construct a concrete instance of `DataFlowTypeInput` via:
//
//          DataFlowTypeArgs{...}
type DataFlowTypeInput interface {
	pulumi.Input

	ToDataFlowTypeOutput() DataFlowTypeOutput
	ToDataFlowTypeOutputWithContext(context.Context) DataFlowTypeOutput
}

// Data flow resource type.
type DataFlowTypeArgs struct {
	// Etag identifies change in the resource.
	Etag pulumi.StringInput `pulumi:"etag"`
	// The resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// Data flow properties.
	Properties DataFlowResponseInput `pulumi:"properties"`
	// The resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DataFlowTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowType)(nil)).Elem()
}

func (i DataFlowTypeArgs) ToDataFlowTypeOutput() DataFlowTypeOutput {
	return i.ToDataFlowTypeOutputWithContext(context.Background())
}

func (i DataFlowTypeArgs) ToDataFlowTypeOutputWithContext(ctx context.Context) DataFlowTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowTypeOutput)
}

// Data flow resource type.
type DataFlowTypeOutput struct{ *pulumi.OutputState }

func (DataFlowTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowType)(nil)).Elem()
}

func (o DataFlowTypeOutput) ToDataFlowTypeOutput() DataFlowTypeOutput {
	return o
}

func (o DataFlowTypeOutput) ToDataFlowTypeOutputWithContext(ctx context.Context) DataFlowTypeOutput {
	return o
}

// Etag identifies change in the resource.
func (o DataFlowTypeOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v DataFlowType) string { return v.Etag }).(pulumi.StringOutput)
}

// The resource name.
func (o DataFlowTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataFlowType) string { return v.Name }).(pulumi.StringOutput)
}

// Data flow properties.
func (o DataFlowTypeOutput) Properties() DataFlowResponseOutput {
	return o.ApplyT(func(v DataFlowType) DataFlowResponse { return v.Properties }).(DataFlowResponseOutput)
}

// The resource type.
func (o DataFlowTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DataFlowType) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Data Factory nested object which contains a flow with data movements and transformations.
type DataFlowDefinition struct {
	// List of tags that can be used for describing the data flow.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The description of the data flow.
	Description *string `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowProperties `pulumi:"folder"`
	// Type of data flow.
	Type *string `pulumi:"type"`
}

// DataFlowDefinitionInput is an input type that accepts DataFlowDefinitionArgs and DataFlowDefinitionOutput values.
// You can construct a concrete instance of `DataFlowDefinitionInput` via:
//
//          DataFlowDefinitionArgs{...}
type DataFlowDefinitionInput interface {
	pulumi.Input

	ToDataFlowDefinitionOutput() DataFlowDefinitionOutput
	ToDataFlowDefinitionOutputWithContext(context.Context) DataFlowDefinitionOutput
}

// Azure Data Factory nested object which contains a flow with data movements and transformations.
type DataFlowDefinitionArgs struct {
	// List of tags that can be used for describing the data flow.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The description of the data flow.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder DataFlowPropertiesPtrInput `pulumi:"folder"`
	// Type of data flow.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DataFlowDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowDefinition)(nil)).Elem()
}

func (i DataFlowDefinitionArgs) ToDataFlowDefinitionOutput() DataFlowDefinitionOutput {
	return i.ToDataFlowDefinitionOutputWithContext(context.Background())
}

func (i DataFlowDefinitionArgs) ToDataFlowDefinitionOutputWithContext(ctx context.Context) DataFlowDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowDefinitionOutput)
}

func (i DataFlowDefinitionArgs) ToDataFlowDefinitionPtrOutput() DataFlowDefinitionPtrOutput {
	return i.ToDataFlowDefinitionPtrOutputWithContext(context.Background())
}

func (i DataFlowDefinitionArgs) ToDataFlowDefinitionPtrOutputWithContext(ctx context.Context) DataFlowDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowDefinitionOutput).ToDataFlowDefinitionPtrOutputWithContext(ctx)
}

// DataFlowDefinitionPtrInput is an input type that accepts DataFlowDefinitionArgs, DataFlowDefinitionPtr and DataFlowDefinitionPtrOutput values.
// You can construct a concrete instance of `DataFlowDefinitionPtrInput` via:
//
//          DataFlowDefinitionArgs{...}
//
//  or:
//
//          nil
type DataFlowDefinitionPtrInput interface {
	pulumi.Input

	ToDataFlowDefinitionPtrOutput() DataFlowDefinitionPtrOutput
	ToDataFlowDefinitionPtrOutputWithContext(context.Context) DataFlowDefinitionPtrOutput
}

type dataFlowDefinitionPtrType DataFlowDefinitionArgs

func DataFlowDefinitionPtr(v *DataFlowDefinitionArgs) DataFlowDefinitionPtrInput {
	return (*dataFlowDefinitionPtrType)(v)
}

func (*dataFlowDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowDefinition)(nil)).Elem()
}

func (i *dataFlowDefinitionPtrType) ToDataFlowDefinitionPtrOutput() DataFlowDefinitionPtrOutput {
	return i.ToDataFlowDefinitionPtrOutputWithContext(context.Background())
}

func (i *dataFlowDefinitionPtrType) ToDataFlowDefinitionPtrOutputWithContext(ctx context.Context) DataFlowDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowDefinitionPtrOutput)
}

// Azure Data Factory nested object which contains a flow with data movements and transformations.
type DataFlowDefinitionOutput struct{ *pulumi.OutputState }

func (DataFlowDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowDefinition)(nil)).Elem()
}

func (o DataFlowDefinitionOutput) ToDataFlowDefinitionOutput() DataFlowDefinitionOutput {
	return o
}

func (o DataFlowDefinitionOutput) ToDataFlowDefinitionOutputWithContext(ctx context.Context) DataFlowDefinitionOutput {
	return o
}

func (o DataFlowDefinitionOutput) ToDataFlowDefinitionPtrOutput() DataFlowDefinitionPtrOutput {
	return o.ToDataFlowDefinitionPtrOutputWithContext(context.Background())
}

func (o DataFlowDefinitionOutput) ToDataFlowDefinitionPtrOutputWithContext(ctx context.Context) DataFlowDefinitionPtrOutput {
	return o.ApplyT(func(v DataFlowDefinition) *DataFlowDefinition {
		return &v
	}).(DataFlowDefinitionPtrOutput)
}

// List of tags that can be used for describing the data flow.
func (o DataFlowDefinitionOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v DataFlowDefinition) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The description of the data flow.
func (o DataFlowDefinitionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowDefinition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
func (o DataFlowDefinitionOutput) Folder() DataFlowPropertiesPtrOutput {
	return o.ApplyT(func(v DataFlowDefinition) *DataFlowProperties { return v.Folder }).(DataFlowPropertiesPtrOutput)
}

// Type of data flow.
func (o DataFlowDefinitionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowDefinition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DataFlowDefinitionPtrOutput struct{ *pulumi.OutputState }

func (DataFlowDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowDefinition)(nil)).Elem()
}

func (o DataFlowDefinitionPtrOutput) ToDataFlowDefinitionPtrOutput() DataFlowDefinitionPtrOutput {
	return o
}

func (o DataFlowDefinitionPtrOutput) ToDataFlowDefinitionPtrOutputWithContext(ctx context.Context) DataFlowDefinitionPtrOutput {
	return o
}

func (o DataFlowDefinitionPtrOutput) Elem() DataFlowDefinitionOutput {
	return o.ApplyT(func(v *DataFlowDefinition) DataFlowDefinition { return *v }).(DataFlowDefinitionOutput)
}

// List of tags that can be used for describing the data flow.
func (o DataFlowDefinitionPtrOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *DataFlowDefinition) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.MapArrayOutput)
}

// The description of the data flow.
func (o DataFlowDefinitionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFlowDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
func (o DataFlowDefinitionPtrOutput) Folder() DataFlowPropertiesPtrOutput {
	return o.ApplyT(func(v *DataFlowDefinition) *DataFlowProperties {
		if v == nil {
			return nil
		}
		return v.Folder
	}).(DataFlowPropertiesPtrOutput)
}

// Type of data flow.
func (o DataFlowDefinitionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFlowDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowProperties struct {
	// The name of the folder that this data flow is in.
	Name *string `pulumi:"name"`
}

// DataFlowPropertiesInput is an input type that accepts DataFlowPropertiesArgs and DataFlowPropertiesOutput values.
// You can construct a concrete instance of `DataFlowPropertiesInput` via:
//
//          DataFlowPropertiesArgs{...}
type DataFlowPropertiesInput interface {
	pulumi.Input

	ToDataFlowPropertiesOutput() DataFlowPropertiesOutput
	ToDataFlowPropertiesOutputWithContext(context.Context) DataFlowPropertiesOutput
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowPropertiesArgs struct {
	// The name of the folder that this data flow is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DataFlowPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowProperties)(nil)).Elem()
}

func (i DataFlowPropertiesArgs) ToDataFlowPropertiesOutput() DataFlowPropertiesOutput {
	return i.ToDataFlowPropertiesOutputWithContext(context.Background())
}

func (i DataFlowPropertiesArgs) ToDataFlowPropertiesOutputWithContext(ctx context.Context) DataFlowPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowPropertiesOutput)
}

func (i DataFlowPropertiesArgs) ToDataFlowPropertiesPtrOutput() DataFlowPropertiesPtrOutput {
	return i.ToDataFlowPropertiesPtrOutputWithContext(context.Background())
}

func (i DataFlowPropertiesArgs) ToDataFlowPropertiesPtrOutputWithContext(ctx context.Context) DataFlowPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowPropertiesOutput).ToDataFlowPropertiesPtrOutputWithContext(ctx)
}

// DataFlowPropertiesPtrInput is an input type that accepts DataFlowPropertiesArgs, DataFlowPropertiesPtr and DataFlowPropertiesPtrOutput values.
// You can construct a concrete instance of `DataFlowPropertiesPtrInput` via:
//
//          DataFlowPropertiesArgs{...}
//
//  or:
//
//          nil
type DataFlowPropertiesPtrInput interface {
	pulumi.Input

	ToDataFlowPropertiesPtrOutput() DataFlowPropertiesPtrOutput
	ToDataFlowPropertiesPtrOutputWithContext(context.Context) DataFlowPropertiesPtrOutput
}

type dataFlowPropertiesPtrType DataFlowPropertiesArgs

func DataFlowPropertiesPtr(v *DataFlowPropertiesArgs) DataFlowPropertiesPtrInput {
	return (*dataFlowPropertiesPtrType)(v)
}

func (*dataFlowPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowProperties)(nil)).Elem()
}

func (i *dataFlowPropertiesPtrType) ToDataFlowPropertiesPtrOutput() DataFlowPropertiesPtrOutput {
	return i.ToDataFlowPropertiesPtrOutputWithContext(context.Background())
}

func (i *dataFlowPropertiesPtrType) ToDataFlowPropertiesPtrOutputWithContext(ctx context.Context) DataFlowPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowPropertiesPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowPropertiesOutput struct{ *pulumi.OutputState }

func (DataFlowPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowProperties)(nil)).Elem()
}

func (o DataFlowPropertiesOutput) ToDataFlowPropertiesOutput() DataFlowPropertiesOutput {
	return o
}

func (o DataFlowPropertiesOutput) ToDataFlowPropertiesOutputWithContext(ctx context.Context) DataFlowPropertiesOutput {
	return o
}

func (o DataFlowPropertiesOutput) ToDataFlowPropertiesPtrOutput() DataFlowPropertiesPtrOutput {
	return o.ToDataFlowPropertiesPtrOutputWithContext(context.Background())
}

func (o DataFlowPropertiesOutput) ToDataFlowPropertiesPtrOutputWithContext(ctx context.Context) DataFlowPropertiesPtrOutput {
	return o.ApplyT(func(v DataFlowProperties) *DataFlowProperties {
		return &v
	}).(DataFlowPropertiesPtrOutput)
}

// The name of the folder that this data flow is in.
func (o DataFlowPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DataFlowPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DataFlowPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowProperties)(nil)).Elem()
}

func (o DataFlowPropertiesPtrOutput) ToDataFlowPropertiesPtrOutput() DataFlowPropertiesPtrOutput {
	return o
}

func (o DataFlowPropertiesPtrOutput) ToDataFlowPropertiesPtrOutputWithContext(ctx context.Context) DataFlowPropertiesPtrOutput {
	return o
}

func (o DataFlowPropertiesPtrOutput) Elem() DataFlowPropertiesOutput {
	return o.ApplyT(func(v *DataFlowProperties) DataFlowProperties { return *v }).(DataFlowPropertiesOutput)
}

// The name of the folder that this data flow is in.
func (o DataFlowPropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFlowProperties) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Azure Data Factory nested object which contains a flow with data movements and transformations.
type DataFlowResponse struct {
	// List of tags that can be used for describing the data flow.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The description of the data flow.
	Description *string `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowResponseProperties `pulumi:"folder"`
	// Type of data flow.
	Type *string `pulumi:"type"`
}

// DataFlowResponseInput is an input type that accepts DataFlowResponseArgs and DataFlowResponseOutput values.
// You can construct a concrete instance of `DataFlowResponseInput` via:
//
//          DataFlowResponseArgs{...}
type DataFlowResponseInput interface {
	pulumi.Input

	ToDataFlowResponseOutput() DataFlowResponseOutput
	ToDataFlowResponseOutputWithContext(context.Context) DataFlowResponseOutput
}

// Azure Data Factory nested object which contains a flow with data movements and transformations.
type DataFlowResponseArgs struct {
	// List of tags that can be used for describing the data flow.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The description of the data flow.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder DataFlowResponsePropertiesPtrInput `pulumi:"folder"`
	// Type of data flow.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DataFlowResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowResponse)(nil)).Elem()
}

func (i DataFlowResponseArgs) ToDataFlowResponseOutput() DataFlowResponseOutput {
	return i.ToDataFlowResponseOutputWithContext(context.Background())
}

func (i DataFlowResponseArgs) ToDataFlowResponseOutputWithContext(ctx context.Context) DataFlowResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowResponseOutput)
}

func (i DataFlowResponseArgs) ToDataFlowResponsePtrOutput() DataFlowResponsePtrOutput {
	return i.ToDataFlowResponsePtrOutputWithContext(context.Background())
}

func (i DataFlowResponseArgs) ToDataFlowResponsePtrOutputWithContext(ctx context.Context) DataFlowResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowResponseOutput).ToDataFlowResponsePtrOutputWithContext(ctx)
}

// DataFlowResponsePtrInput is an input type that accepts DataFlowResponseArgs, DataFlowResponsePtr and DataFlowResponsePtrOutput values.
// You can construct a concrete instance of `DataFlowResponsePtrInput` via:
//
//          DataFlowResponseArgs{...}
//
//  or:
//
//          nil
type DataFlowResponsePtrInput interface {
	pulumi.Input

	ToDataFlowResponsePtrOutput() DataFlowResponsePtrOutput
	ToDataFlowResponsePtrOutputWithContext(context.Context) DataFlowResponsePtrOutput
}

type dataFlowResponsePtrType DataFlowResponseArgs

func DataFlowResponsePtr(v *DataFlowResponseArgs) DataFlowResponsePtrInput {
	return (*dataFlowResponsePtrType)(v)
}

func (*dataFlowResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowResponse)(nil)).Elem()
}

func (i *dataFlowResponsePtrType) ToDataFlowResponsePtrOutput() DataFlowResponsePtrOutput {
	return i.ToDataFlowResponsePtrOutputWithContext(context.Background())
}

func (i *dataFlowResponsePtrType) ToDataFlowResponsePtrOutputWithContext(ctx context.Context) DataFlowResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowResponsePtrOutput)
}

// Azure Data Factory nested object which contains a flow with data movements and transformations.
type DataFlowResponseOutput struct{ *pulumi.OutputState }

func (DataFlowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowResponse)(nil)).Elem()
}

func (o DataFlowResponseOutput) ToDataFlowResponseOutput() DataFlowResponseOutput {
	return o
}

func (o DataFlowResponseOutput) ToDataFlowResponseOutputWithContext(ctx context.Context) DataFlowResponseOutput {
	return o
}

func (o DataFlowResponseOutput) ToDataFlowResponsePtrOutput() DataFlowResponsePtrOutput {
	return o.ToDataFlowResponsePtrOutputWithContext(context.Background())
}

func (o DataFlowResponseOutput) ToDataFlowResponsePtrOutputWithContext(ctx context.Context) DataFlowResponsePtrOutput {
	return o.ApplyT(func(v DataFlowResponse) *DataFlowResponse {
		return &v
	}).(DataFlowResponsePtrOutput)
}

// List of tags that can be used for describing the data flow.
func (o DataFlowResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v DataFlowResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The description of the data flow.
func (o DataFlowResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
func (o DataFlowResponseOutput) Folder() DataFlowResponsePropertiesPtrOutput {
	return o.ApplyT(func(v DataFlowResponse) *DataFlowResponseProperties { return v.Folder }).(DataFlowResponsePropertiesPtrOutput)
}

// Type of data flow.
func (o DataFlowResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DataFlowResponsePtrOutput struct{ *pulumi.OutputState }

func (DataFlowResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowResponse)(nil)).Elem()
}

func (o DataFlowResponsePtrOutput) ToDataFlowResponsePtrOutput() DataFlowResponsePtrOutput {
	return o
}

func (o DataFlowResponsePtrOutput) ToDataFlowResponsePtrOutputWithContext(ctx context.Context) DataFlowResponsePtrOutput {
	return o
}

func (o DataFlowResponsePtrOutput) Elem() DataFlowResponseOutput {
	return o.ApplyT(func(v *DataFlowResponse) DataFlowResponse { return *v }).(DataFlowResponseOutput)
}

// List of tags that can be used for describing the data flow.
func (o DataFlowResponsePtrOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *DataFlowResponse) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.MapArrayOutput)
}

// The description of the data flow.
func (o DataFlowResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFlowResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
func (o DataFlowResponsePtrOutput) Folder() DataFlowResponsePropertiesPtrOutput {
	return o.ApplyT(func(v *DataFlowResponse) *DataFlowResponseProperties {
		if v == nil {
			return nil
		}
		return v.Folder
	}).(DataFlowResponsePropertiesPtrOutput)
}

// Type of data flow.
func (o DataFlowResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFlowResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowResponseProperties struct {
	// The name of the folder that this data flow is in.
	Name *string `pulumi:"name"`
}

// DataFlowResponsePropertiesInput is an input type that accepts DataFlowResponsePropertiesArgs and DataFlowResponsePropertiesOutput values.
// You can construct a concrete instance of `DataFlowResponsePropertiesInput` via:
//
//          DataFlowResponsePropertiesArgs{...}
type DataFlowResponsePropertiesInput interface {
	pulumi.Input

	ToDataFlowResponsePropertiesOutput() DataFlowResponsePropertiesOutput
	ToDataFlowResponsePropertiesOutputWithContext(context.Context) DataFlowResponsePropertiesOutput
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowResponsePropertiesArgs struct {
	// The name of the folder that this data flow is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DataFlowResponsePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowResponseProperties)(nil)).Elem()
}

func (i DataFlowResponsePropertiesArgs) ToDataFlowResponsePropertiesOutput() DataFlowResponsePropertiesOutput {
	return i.ToDataFlowResponsePropertiesOutputWithContext(context.Background())
}

func (i DataFlowResponsePropertiesArgs) ToDataFlowResponsePropertiesOutputWithContext(ctx context.Context) DataFlowResponsePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowResponsePropertiesOutput)
}

func (i DataFlowResponsePropertiesArgs) ToDataFlowResponsePropertiesPtrOutput() DataFlowResponsePropertiesPtrOutput {
	return i.ToDataFlowResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i DataFlowResponsePropertiesArgs) ToDataFlowResponsePropertiesPtrOutputWithContext(ctx context.Context) DataFlowResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowResponsePropertiesOutput).ToDataFlowResponsePropertiesPtrOutputWithContext(ctx)
}

// DataFlowResponsePropertiesPtrInput is an input type that accepts DataFlowResponsePropertiesArgs, DataFlowResponsePropertiesPtr and DataFlowResponsePropertiesPtrOutput values.
// You can construct a concrete instance of `DataFlowResponsePropertiesPtrInput` via:
//
//          DataFlowResponsePropertiesArgs{...}
//
//  or:
//
//          nil
type DataFlowResponsePropertiesPtrInput interface {
	pulumi.Input

	ToDataFlowResponsePropertiesPtrOutput() DataFlowResponsePropertiesPtrOutput
	ToDataFlowResponsePropertiesPtrOutputWithContext(context.Context) DataFlowResponsePropertiesPtrOutput
}

type dataFlowResponsePropertiesPtrType DataFlowResponsePropertiesArgs

func DataFlowResponsePropertiesPtr(v *DataFlowResponsePropertiesArgs) DataFlowResponsePropertiesPtrInput {
	return (*dataFlowResponsePropertiesPtrType)(v)
}

func (*dataFlowResponsePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowResponseProperties)(nil)).Elem()
}

func (i *dataFlowResponsePropertiesPtrType) ToDataFlowResponsePropertiesPtrOutput() DataFlowResponsePropertiesPtrOutput {
	return i.ToDataFlowResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i *dataFlowResponsePropertiesPtrType) ToDataFlowResponsePropertiesPtrOutputWithContext(ctx context.Context) DataFlowResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowResponsePropertiesPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowResponsePropertiesOutput struct{ *pulumi.OutputState }

func (DataFlowResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowResponseProperties)(nil)).Elem()
}

func (o DataFlowResponsePropertiesOutput) ToDataFlowResponsePropertiesOutput() DataFlowResponsePropertiesOutput {
	return o
}

func (o DataFlowResponsePropertiesOutput) ToDataFlowResponsePropertiesOutputWithContext(ctx context.Context) DataFlowResponsePropertiesOutput {
	return o
}

func (o DataFlowResponsePropertiesOutput) ToDataFlowResponsePropertiesPtrOutput() DataFlowResponsePropertiesPtrOutput {
	return o.ToDataFlowResponsePropertiesPtrOutputWithContext(context.Background())
}

func (o DataFlowResponsePropertiesOutput) ToDataFlowResponsePropertiesPtrOutputWithContext(ctx context.Context) DataFlowResponsePropertiesPtrOutput {
	return o.ApplyT(func(v DataFlowResponseProperties) *DataFlowResponseProperties {
		return &v
	}).(DataFlowResponsePropertiesPtrOutput)
}

// The name of the folder that this data flow is in.
func (o DataFlowResponsePropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowResponseProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DataFlowResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (DataFlowResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowResponseProperties)(nil)).Elem()
}

func (o DataFlowResponsePropertiesPtrOutput) ToDataFlowResponsePropertiesPtrOutput() DataFlowResponsePropertiesPtrOutput {
	return o
}

func (o DataFlowResponsePropertiesPtrOutput) ToDataFlowResponsePropertiesPtrOutputWithContext(ctx context.Context) DataFlowResponsePropertiesPtrOutput {
	return o
}

func (o DataFlowResponsePropertiesPtrOutput) Elem() DataFlowResponsePropertiesOutput {
	return o.ApplyT(func(v *DataFlowResponseProperties) DataFlowResponseProperties { return *v }).(DataFlowResponsePropertiesOutput)
}

// The name of the folder that this data flow is in.
func (o DataFlowResponsePropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFlowResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Dataset resource type.
type DatasetType struct {
	// Etag identifies change in the resource.
	Etag string `pulumi:"etag"`
	// The resource name.
	Name string `pulumi:"name"`
	// Dataset properties.
	Properties DatasetResponse `pulumi:"properties"`
	// The resource type.
	Type string `pulumi:"type"`
}

// DatasetTypeInput is an input type that accepts DatasetTypeArgs and DatasetTypeOutput values.
// You can construct a concrete instance of `DatasetTypeInput` via:
//
//          DatasetTypeArgs{...}
type DatasetTypeInput interface {
	pulumi.Input

	ToDatasetTypeOutput() DatasetTypeOutput
	ToDatasetTypeOutputWithContext(context.Context) DatasetTypeOutput
}

// Dataset resource type.
type DatasetTypeArgs struct {
	// Etag identifies change in the resource.
	Etag pulumi.StringInput `pulumi:"etag"`
	// The resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// Dataset properties.
	Properties DatasetResponseInput `pulumi:"properties"`
	// The resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetType)(nil)).Elem()
}

func (i DatasetTypeArgs) ToDatasetTypeOutput() DatasetTypeOutput {
	return i.ToDatasetTypeOutputWithContext(context.Background())
}

func (i DatasetTypeArgs) ToDatasetTypeOutputWithContext(ctx context.Context) DatasetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetTypeOutput)
}

// Dataset resource type.
type DatasetTypeOutput struct{ *pulumi.OutputState }

func (DatasetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetType)(nil)).Elem()
}

func (o DatasetTypeOutput) ToDatasetTypeOutput() DatasetTypeOutput {
	return o
}

func (o DatasetTypeOutput) ToDatasetTypeOutputWithContext(ctx context.Context) DatasetTypeOutput {
	return o
}

// Etag identifies change in the resource.
func (o DatasetTypeOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetType) string { return v.Etag }).(pulumi.StringOutput)
}

// The resource name.
func (o DatasetTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetType) string { return v.Name }).(pulumi.StringOutput)
}

// Dataset properties.
func (o DatasetTypeOutput) Properties() DatasetResponseOutput {
	return o.ApplyT(func(v DatasetType) DatasetResponse { return v.Properties }).(DatasetResponseOutput)
}

// The resource type.
func (o DatasetTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetType) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure Data Factory nested object which identifies data within different data stores, such as tables, files, folders, and documents.
type DatasetDefinition struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetProperties `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters *ParameterDefinitionSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema map[string]interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// DatasetDefinitionInput is an input type that accepts DatasetDefinitionArgs and DatasetDefinitionOutput values.
// You can construct a concrete instance of `DatasetDefinitionInput` via:
//
//          DatasetDefinitionArgs{...}
type DatasetDefinitionInput interface {
	pulumi.Input

	ToDatasetDefinitionOutput() DatasetDefinitionOutput
	ToDatasetDefinitionOutputWithContext(context.Context) DatasetDefinitionOutput
}

// The Azure Data Factory nested object which identifies data within different data stores, such as tables, files, folders, and documents.
type DatasetDefinitionArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetPropertiesPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterDefinitionSpecificationPtrInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.MapInput `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDefinition)(nil)).Elem()
}

func (i DatasetDefinitionArgs) ToDatasetDefinitionOutput() DatasetDefinitionOutput {
	return i.ToDatasetDefinitionOutputWithContext(context.Background())
}

func (i DatasetDefinitionArgs) ToDatasetDefinitionOutputWithContext(ctx context.Context) DatasetDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDefinitionOutput)
}

func (i DatasetDefinitionArgs) ToDatasetDefinitionPtrOutput() DatasetDefinitionPtrOutput {
	return i.ToDatasetDefinitionPtrOutputWithContext(context.Background())
}

func (i DatasetDefinitionArgs) ToDatasetDefinitionPtrOutputWithContext(ctx context.Context) DatasetDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDefinitionOutput).ToDatasetDefinitionPtrOutputWithContext(ctx)
}

// DatasetDefinitionPtrInput is an input type that accepts DatasetDefinitionArgs, DatasetDefinitionPtr and DatasetDefinitionPtrOutput values.
// You can construct a concrete instance of `DatasetDefinitionPtrInput` via:
//
//          DatasetDefinitionArgs{...}
//
//  or:
//
//          nil
type DatasetDefinitionPtrInput interface {
	pulumi.Input

	ToDatasetDefinitionPtrOutput() DatasetDefinitionPtrOutput
	ToDatasetDefinitionPtrOutputWithContext(context.Context) DatasetDefinitionPtrOutput
}

type datasetDefinitionPtrType DatasetDefinitionArgs

func DatasetDefinitionPtr(v *DatasetDefinitionArgs) DatasetDefinitionPtrInput {
	return (*datasetDefinitionPtrType)(v)
}

func (*datasetDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDefinition)(nil)).Elem()
}

func (i *datasetDefinitionPtrType) ToDatasetDefinitionPtrOutput() DatasetDefinitionPtrOutput {
	return i.ToDatasetDefinitionPtrOutputWithContext(context.Background())
}

func (i *datasetDefinitionPtrType) ToDatasetDefinitionPtrOutputWithContext(ctx context.Context) DatasetDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDefinitionPtrOutput)
}

// The Azure Data Factory nested object which identifies data within different data stores, such as tables, files, folders, and documents.
type DatasetDefinitionOutput struct{ *pulumi.OutputState }

func (DatasetDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDefinition)(nil)).Elem()
}

func (o DatasetDefinitionOutput) ToDatasetDefinitionOutput() DatasetDefinitionOutput {
	return o
}

func (o DatasetDefinitionOutput) ToDatasetDefinitionOutputWithContext(ctx context.Context) DatasetDefinitionOutput {
	return o
}

func (o DatasetDefinitionOutput) ToDatasetDefinitionPtrOutput() DatasetDefinitionPtrOutput {
	return o.ToDatasetDefinitionPtrOutputWithContext(context.Background())
}

func (o DatasetDefinitionOutput) ToDatasetDefinitionPtrOutputWithContext(ctx context.Context) DatasetDefinitionPtrOutput {
	return o.ApplyT(func(v DatasetDefinition) *DatasetDefinition {
		return &v
	}).(DatasetDefinitionPtrOutput)
}

// List of tags that can be used for describing the Dataset.
func (o DatasetDefinitionOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v DatasetDefinition) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o DatasetDefinitionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetDefinition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DatasetDefinitionOutput) Folder() DatasetPropertiesPtrOutput {
	return o.ApplyT(func(v DatasetDefinition) *DatasetProperties { return v.Folder }).(DatasetPropertiesPtrOutput)
}

// Linked service reference.
func (o DatasetDefinitionOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v DatasetDefinition) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o DatasetDefinitionOutput) Parameters() ParameterDefinitionSpecificationPtrOutput {
	return o.ApplyT(func(v DatasetDefinition) *ParameterDefinitionSpecification { return v.Parameters }).(ParameterDefinitionSpecificationPtrOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DatasetDefinitionOutput) Schema() pulumi.MapOutput {
	return o.ApplyT(func(v DatasetDefinition) map[string]interface{} { return v.Schema }).(pulumi.MapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DatasetDefinitionOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v DatasetDefinition) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o DatasetDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetDefinition) string { return v.Type }).(pulumi.StringOutput)
}

type DatasetDefinitionPtrOutput struct{ *pulumi.OutputState }

func (DatasetDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDefinition)(nil)).Elem()
}

func (o DatasetDefinitionPtrOutput) ToDatasetDefinitionPtrOutput() DatasetDefinitionPtrOutput {
	return o
}

func (o DatasetDefinitionPtrOutput) ToDatasetDefinitionPtrOutputWithContext(ctx context.Context) DatasetDefinitionPtrOutput {
	return o
}

func (o DatasetDefinitionPtrOutput) Elem() DatasetDefinitionOutput {
	return o.ApplyT(func(v *DatasetDefinition) DatasetDefinition { return *v }).(DatasetDefinitionOutput)
}

// List of tags that can be used for describing the Dataset.
func (o DatasetDefinitionPtrOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *DatasetDefinition) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o DatasetDefinitionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DatasetDefinitionPtrOutput) Folder() DatasetPropertiesPtrOutput {
	return o.ApplyT(func(v *DatasetDefinition) *DatasetProperties {
		if v == nil {
			return nil
		}
		return v.Folder
	}).(DatasetPropertiesPtrOutput)
}

// Linked service reference.
func (o DatasetDefinitionPtrOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v *DatasetDefinition) *LinkedServiceReference {
		if v == nil {
			return nil
		}
		return &v.LinkedServiceName
	}).(LinkedServiceReferencePtrOutput)
}

// Parameters for dataset.
func (o DatasetDefinitionPtrOutput) Parameters() ParameterDefinitionSpecificationPtrOutput {
	return o.ApplyT(func(v *DatasetDefinition) *ParameterDefinitionSpecification {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterDefinitionSpecificationPtrOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DatasetDefinitionPtrOutput) Schema() pulumi.MapOutput {
	return o.ApplyT(func(v *DatasetDefinition) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(pulumi.MapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DatasetDefinitionPtrOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v *DatasetDefinition) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Structure
	}).(pulumi.MapOutput)
}

// Type of dataset.
func (o DatasetDefinitionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetProperties struct {
	// The name of the folder that this Dataset is in.
	Name *string `pulumi:"name"`
}

// DatasetPropertiesInput is an input type that accepts DatasetPropertiesArgs and DatasetPropertiesOutput values.
// You can construct a concrete instance of `DatasetPropertiesInput` via:
//
//          DatasetPropertiesArgs{...}
type DatasetPropertiesInput interface {
	pulumi.Input

	ToDatasetPropertiesOutput() DatasetPropertiesOutput
	ToDatasetPropertiesOutputWithContext(context.Context) DatasetPropertiesOutput
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetPropertiesArgs struct {
	// The name of the folder that this Dataset is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DatasetPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetProperties)(nil)).Elem()
}

func (i DatasetPropertiesArgs) ToDatasetPropertiesOutput() DatasetPropertiesOutput {
	return i.ToDatasetPropertiesOutputWithContext(context.Background())
}

func (i DatasetPropertiesArgs) ToDatasetPropertiesOutputWithContext(ctx context.Context) DatasetPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetPropertiesOutput)
}

func (i DatasetPropertiesArgs) ToDatasetPropertiesPtrOutput() DatasetPropertiesPtrOutput {
	return i.ToDatasetPropertiesPtrOutputWithContext(context.Background())
}

func (i DatasetPropertiesArgs) ToDatasetPropertiesPtrOutputWithContext(ctx context.Context) DatasetPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetPropertiesOutput).ToDatasetPropertiesPtrOutputWithContext(ctx)
}

// DatasetPropertiesPtrInput is an input type that accepts DatasetPropertiesArgs, DatasetPropertiesPtr and DatasetPropertiesPtrOutput values.
// You can construct a concrete instance of `DatasetPropertiesPtrInput` via:
//
//          DatasetPropertiesArgs{...}
//
//  or:
//
//          nil
type DatasetPropertiesPtrInput interface {
	pulumi.Input

	ToDatasetPropertiesPtrOutput() DatasetPropertiesPtrOutput
	ToDatasetPropertiesPtrOutputWithContext(context.Context) DatasetPropertiesPtrOutput
}

type datasetPropertiesPtrType DatasetPropertiesArgs

func DatasetPropertiesPtr(v *DatasetPropertiesArgs) DatasetPropertiesPtrInput {
	return (*datasetPropertiesPtrType)(v)
}

func (*datasetPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetProperties)(nil)).Elem()
}

func (i *datasetPropertiesPtrType) ToDatasetPropertiesPtrOutput() DatasetPropertiesPtrOutput {
	return i.ToDatasetPropertiesPtrOutputWithContext(context.Background())
}

func (i *datasetPropertiesPtrType) ToDatasetPropertiesPtrOutputWithContext(ctx context.Context) DatasetPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetPropertiesPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetPropertiesOutput struct{ *pulumi.OutputState }

func (DatasetPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetProperties)(nil)).Elem()
}

func (o DatasetPropertiesOutput) ToDatasetPropertiesOutput() DatasetPropertiesOutput {
	return o
}

func (o DatasetPropertiesOutput) ToDatasetPropertiesOutputWithContext(ctx context.Context) DatasetPropertiesOutput {
	return o
}

func (o DatasetPropertiesOutput) ToDatasetPropertiesPtrOutput() DatasetPropertiesPtrOutput {
	return o.ToDatasetPropertiesPtrOutputWithContext(context.Background())
}

func (o DatasetPropertiesOutput) ToDatasetPropertiesPtrOutputWithContext(ctx context.Context) DatasetPropertiesPtrOutput {
	return o.ApplyT(func(v DatasetProperties) *DatasetProperties {
		return &v
	}).(DatasetPropertiesPtrOutput)
}

// The name of the folder that this Dataset is in.
func (o DatasetPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DatasetPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DatasetPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetProperties)(nil)).Elem()
}

func (o DatasetPropertiesPtrOutput) ToDatasetPropertiesPtrOutput() DatasetPropertiesPtrOutput {
	return o
}

func (o DatasetPropertiesPtrOutput) ToDatasetPropertiesPtrOutputWithContext(ctx context.Context) DatasetPropertiesPtrOutput {
	return o
}

func (o DatasetPropertiesPtrOutput) Elem() DatasetPropertiesOutput {
	return o.ApplyT(func(v *DatasetProperties) DatasetProperties { return *v }).(DatasetPropertiesOutput)
}

// The name of the folder that this Dataset is in.
func (o DatasetPropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetProperties) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The Azure Data Factory nested object which identifies data within different data stores, such as tables, files, folders, and documents.
type DatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseProperties `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters *ParameterDefinitionSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema map[string]interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure map[string]interface{} `pulumi:"structure"`
	// Type of dataset.
	Type string `pulumi:"type"`
}

// DatasetResponseInput is an input type that accepts DatasetResponseArgs and DatasetResponseOutput values.
// You can construct a concrete instance of `DatasetResponseInput` via:
//
//          DatasetResponseArgs{...}
type DatasetResponseInput interface {
	pulumi.Input

	ToDatasetResponseOutput() DatasetResponseOutput
	ToDatasetResponseOutputWithContext(context.Context) DatasetResponseOutput
}

// The Azure Data Factory nested object which identifies data within different data stores, such as tables, files, folders, and documents.
type DatasetResponseArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetResponsePropertiesPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponseInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterDefinitionSpecificationResponsePtrInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.MapInput `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.MapInput `pulumi:"structure"`
	// Type of dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetResponse)(nil)).Elem()
}

func (i DatasetResponseArgs) ToDatasetResponseOutput() DatasetResponseOutput {
	return i.ToDatasetResponseOutputWithContext(context.Background())
}

func (i DatasetResponseArgs) ToDatasetResponseOutputWithContext(ctx context.Context) DatasetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetResponseOutput)
}

func (i DatasetResponseArgs) ToDatasetResponsePtrOutput() DatasetResponsePtrOutput {
	return i.ToDatasetResponsePtrOutputWithContext(context.Background())
}

func (i DatasetResponseArgs) ToDatasetResponsePtrOutputWithContext(ctx context.Context) DatasetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetResponseOutput).ToDatasetResponsePtrOutputWithContext(ctx)
}

// DatasetResponsePtrInput is an input type that accepts DatasetResponseArgs, DatasetResponsePtr and DatasetResponsePtrOutput values.
// You can construct a concrete instance of `DatasetResponsePtrInput` via:
//
//          DatasetResponseArgs{...}
//
//  or:
//
//          nil
type DatasetResponsePtrInput interface {
	pulumi.Input

	ToDatasetResponsePtrOutput() DatasetResponsePtrOutput
	ToDatasetResponsePtrOutputWithContext(context.Context) DatasetResponsePtrOutput
}

type datasetResponsePtrType DatasetResponseArgs

func DatasetResponsePtr(v *DatasetResponseArgs) DatasetResponsePtrInput {
	return (*datasetResponsePtrType)(v)
}

func (*datasetResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetResponse)(nil)).Elem()
}

func (i *datasetResponsePtrType) ToDatasetResponsePtrOutput() DatasetResponsePtrOutput {
	return i.ToDatasetResponsePtrOutputWithContext(context.Background())
}

func (i *datasetResponsePtrType) ToDatasetResponsePtrOutputWithContext(ctx context.Context) DatasetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetResponsePtrOutput)
}

// The Azure Data Factory nested object which identifies data within different data stores, such as tables, files, folders, and documents.
type DatasetResponseOutput struct{ *pulumi.OutputState }

func (DatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetResponse)(nil)).Elem()
}

func (o DatasetResponseOutput) ToDatasetResponseOutput() DatasetResponseOutput {
	return o
}

func (o DatasetResponseOutput) ToDatasetResponseOutputWithContext(ctx context.Context) DatasetResponseOutput {
	return o
}

func (o DatasetResponseOutput) ToDatasetResponsePtrOutput() DatasetResponsePtrOutput {
	return o.ToDatasetResponsePtrOutputWithContext(context.Background())
}

func (o DatasetResponseOutput) ToDatasetResponsePtrOutputWithContext(ctx context.Context) DatasetResponsePtrOutput {
	return o.ApplyT(func(v DatasetResponse) *DatasetResponse {
		return &v
	}).(DatasetResponsePtrOutput)
}

// List of tags that can be used for describing the Dataset.
func (o DatasetResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v DatasetResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o DatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DatasetResponseOutput) Folder() DatasetResponsePropertiesPtrOutput {
	return o.ApplyT(func(v DatasetResponse) *DatasetResponseProperties { return v.Folder }).(DatasetResponsePropertiesPtrOutput)
}

// Linked service reference.
func (o DatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v DatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o DatasetResponseOutput) Parameters() ParameterDefinitionSpecificationResponsePtrOutput {
	return o.ApplyT(func(v DatasetResponse) *ParameterDefinitionSpecificationResponse { return v.Parameters }).(ParameterDefinitionSpecificationResponsePtrOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DatasetResponseOutput) Schema() pulumi.MapOutput {
	return o.ApplyT(func(v DatasetResponse) map[string]interface{} { return v.Schema }).(pulumi.MapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DatasetResponseOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v DatasetResponse) map[string]interface{} { return v.Structure }).(pulumi.MapOutput)
}

// Type of dataset.
func (o DatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

type DatasetResponsePtrOutput struct{ *pulumi.OutputState }

func (DatasetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetResponse)(nil)).Elem()
}

func (o DatasetResponsePtrOutput) ToDatasetResponsePtrOutput() DatasetResponsePtrOutput {
	return o
}

func (o DatasetResponsePtrOutput) ToDatasetResponsePtrOutputWithContext(ctx context.Context) DatasetResponsePtrOutput {
	return o
}

func (o DatasetResponsePtrOutput) Elem() DatasetResponseOutput {
	return o.ApplyT(func(v *DatasetResponse) DatasetResponse { return *v }).(DatasetResponseOutput)
}

// List of tags that can be used for describing the Dataset.
func (o DatasetResponsePtrOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *DatasetResponse) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.MapArrayOutput)
}

// Dataset description.
func (o DatasetResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DatasetResponsePtrOutput) Folder() DatasetResponsePropertiesPtrOutput {
	return o.ApplyT(func(v *DatasetResponse) *DatasetResponseProperties {
		if v == nil {
			return nil
		}
		return v.Folder
	}).(DatasetResponsePropertiesPtrOutput)
}

// Linked service reference.
func (o DatasetResponsePtrOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v *DatasetResponse) *LinkedServiceReferenceResponse {
		if v == nil {
			return nil
		}
		return &v.LinkedServiceName
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Parameters for dataset.
func (o DatasetResponsePtrOutput) Parameters() ParameterDefinitionSpecificationResponsePtrOutput {
	return o.ApplyT(func(v *DatasetResponse) *ParameterDefinitionSpecificationResponse {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterDefinitionSpecificationResponsePtrOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DatasetResponsePtrOutput) Schema() pulumi.MapOutput {
	return o.ApplyT(func(v *DatasetResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(pulumi.MapOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DatasetResponsePtrOutput) Structure() pulumi.MapOutput {
	return o.ApplyT(func(v *DatasetResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Structure
	}).(pulumi.MapOutput)
}

// Type of dataset.
func (o DatasetResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetResponseProperties struct {
	// The name of the folder that this Dataset is in.
	Name *string `pulumi:"name"`
}

// DatasetResponsePropertiesInput is an input type that accepts DatasetResponsePropertiesArgs and DatasetResponsePropertiesOutput values.
// You can construct a concrete instance of `DatasetResponsePropertiesInput` via:
//
//          DatasetResponsePropertiesArgs{...}
type DatasetResponsePropertiesInput interface {
	pulumi.Input

	ToDatasetResponsePropertiesOutput() DatasetResponsePropertiesOutput
	ToDatasetResponsePropertiesOutputWithContext(context.Context) DatasetResponsePropertiesOutput
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetResponsePropertiesArgs struct {
	// The name of the folder that this Dataset is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DatasetResponsePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetResponseProperties)(nil)).Elem()
}

func (i DatasetResponsePropertiesArgs) ToDatasetResponsePropertiesOutput() DatasetResponsePropertiesOutput {
	return i.ToDatasetResponsePropertiesOutputWithContext(context.Background())
}

func (i DatasetResponsePropertiesArgs) ToDatasetResponsePropertiesOutputWithContext(ctx context.Context) DatasetResponsePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetResponsePropertiesOutput)
}

func (i DatasetResponsePropertiesArgs) ToDatasetResponsePropertiesPtrOutput() DatasetResponsePropertiesPtrOutput {
	return i.ToDatasetResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i DatasetResponsePropertiesArgs) ToDatasetResponsePropertiesPtrOutputWithContext(ctx context.Context) DatasetResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetResponsePropertiesOutput).ToDatasetResponsePropertiesPtrOutputWithContext(ctx)
}

// DatasetResponsePropertiesPtrInput is an input type that accepts DatasetResponsePropertiesArgs, DatasetResponsePropertiesPtr and DatasetResponsePropertiesPtrOutput values.
// You can construct a concrete instance of `DatasetResponsePropertiesPtrInput` via:
//
//          DatasetResponsePropertiesArgs{...}
//
//  or:
//
//          nil
type DatasetResponsePropertiesPtrInput interface {
	pulumi.Input

	ToDatasetResponsePropertiesPtrOutput() DatasetResponsePropertiesPtrOutput
	ToDatasetResponsePropertiesPtrOutputWithContext(context.Context) DatasetResponsePropertiesPtrOutput
}

type datasetResponsePropertiesPtrType DatasetResponsePropertiesArgs

func DatasetResponsePropertiesPtr(v *DatasetResponsePropertiesArgs) DatasetResponsePropertiesPtrInput {
	return (*datasetResponsePropertiesPtrType)(v)
}

func (*datasetResponsePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetResponseProperties)(nil)).Elem()
}

func (i *datasetResponsePropertiesPtrType) ToDatasetResponsePropertiesPtrOutput() DatasetResponsePropertiesPtrOutput {
	return i.ToDatasetResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i *datasetResponsePropertiesPtrType) ToDatasetResponsePropertiesPtrOutputWithContext(ctx context.Context) DatasetResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetResponsePropertiesPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetResponsePropertiesOutput struct{ *pulumi.OutputState }

func (DatasetResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetResponseProperties)(nil)).Elem()
}

func (o DatasetResponsePropertiesOutput) ToDatasetResponsePropertiesOutput() DatasetResponsePropertiesOutput {
	return o
}

func (o DatasetResponsePropertiesOutput) ToDatasetResponsePropertiesOutputWithContext(ctx context.Context) DatasetResponsePropertiesOutput {
	return o
}

func (o DatasetResponsePropertiesOutput) ToDatasetResponsePropertiesPtrOutput() DatasetResponsePropertiesPtrOutput {
	return o.ToDatasetResponsePropertiesPtrOutputWithContext(context.Background())
}

func (o DatasetResponsePropertiesOutput) ToDatasetResponsePropertiesPtrOutputWithContext(ctx context.Context) DatasetResponsePropertiesPtrOutput {
	return o.ApplyT(func(v DatasetResponseProperties) *DatasetResponseProperties {
		return &v
	}).(DatasetResponsePropertiesPtrOutput)
}

// The name of the folder that this Dataset is in.
func (o DatasetResponsePropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetResponseProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DatasetResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (DatasetResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetResponseProperties)(nil)).Elem()
}

func (o DatasetResponsePropertiesPtrOutput) ToDatasetResponsePropertiesPtrOutput() DatasetResponsePropertiesPtrOutput {
	return o
}

func (o DatasetResponsePropertiesPtrOutput) ToDatasetResponsePropertiesPtrOutputWithContext(ctx context.Context) DatasetResponsePropertiesPtrOutput {
	return o
}

func (o DatasetResponsePropertiesPtrOutput) Elem() DatasetResponsePropertiesOutput {
	return o.ApplyT(func(v *DatasetResponseProperties) DatasetResponseProperties { return *v }).(DatasetResponsePropertiesOutput)
}

// The name of the folder that this Dataset is in.
func (o DatasetResponsePropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Factory resource type.
type FactoryType struct {
	// Etag identifies change in the resource.
	ETag string `pulumi:"eTag"`
	// Managed service identity of the factory.
	Identity *FactoryIdentityResponse `pulumi:"identity"`
	// The resource location.
	Location *string `pulumi:"location"`
	// The resource name.
	Name string `pulumi:"name"`
	// Properties of the factory.
	Properties FactoryPropertiesResponse `pulumi:"properties"`
	// The resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The resource type.
	Type string `pulumi:"type"`
}

// FactoryTypeInput is an input type that accepts FactoryTypeArgs and FactoryTypeOutput values.
// You can construct a concrete instance of `FactoryTypeInput` via:
//
//          FactoryTypeArgs{...}
type FactoryTypeInput interface {
	pulumi.Input

	ToFactoryTypeOutput() FactoryTypeOutput
	ToFactoryTypeOutputWithContext(context.Context) FactoryTypeOutput
}

// Factory resource type.
type FactoryTypeArgs struct {
	// Etag identifies change in the resource.
	ETag pulumi.StringInput `pulumi:"eTag"`
	// Managed service identity of the factory.
	Identity FactoryIdentityResponsePtrInput `pulumi:"identity"`
	// The resource location.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// Properties of the factory.
	Properties FactoryPropertiesResponseInput `pulumi:"properties"`
	// The resource tags.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FactoryTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryType)(nil)).Elem()
}

func (i FactoryTypeArgs) ToFactoryTypeOutput() FactoryTypeOutput {
	return i.ToFactoryTypeOutputWithContext(context.Background())
}

func (i FactoryTypeArgs) ToFactoryTypeOutputWithContext(ctx context.Context) FactoryTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryTypeOutput)
}

// Factory resource type.
type FactoryTypeOutput struct{ *pulumi.OutputState }

func (FactoryTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryType)(nil)).Elem()
}

func (o FactoryTypeOutput) ToFactoryTypeOutput() FactoryTypeOutput {
	return o
}

func (o FactoryTypeOutput) ToFactoryTypeOutputWithContext(ctx context.Context) FactoryTypeOutput {
	return o
}

// Etag identifies change in the resource.
func (o FactoryTypeOutput) ETag() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryType) string { return v.ETag }).(pulumi.StringOutput)
}

// Managed service identity of the factory.
func (o FactoryTypeOutput) Identity() FactoryIdentityResponsePtrOutput {
	return o.ApplyT(func(v FactoryType) *FactoryIdentityResponse { return v.Identity }).(FactoryIdentityResponsePtrOutput)
}

// The resource location.
func (o FactoryTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The resource name.
func (o FactoryTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of the factory.
func (o FactoryTypeOutput) Properties() FactoryPropertiesResponseOutput {
	return o.ApplyT(func(v FactoryType) FactoryPropertiesResponse { return v.Properties }).(FactoryPropertiesResponseOutput)
}

// The resource tags.
func (o FactoryTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FactoryType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The resource type.
func (o FactoryTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryType) string { return v.Type }).(pulumi.StringOutput)
}

// Identity properties of the factory resource.
type FactoryIdentity struct {
	// The identity type. Currently the only supported type is 'SystemAssigned'.
	Type string `pulumi:"type"`
}

// FactoryIdentityInput is an input type that accepts FactoryIdentityArgs and FactoryIdentityOutput values.
// You can construct a concrete instance of `FactoryIdentityInput` via:
//
//          FactoryIdentityArgs{...}
type FactoryIdentityInput interface {
	pulumi.Input

	ToFactoryIdentityOutput() FactoryIdentityOutput
	ToFactoryIdentityOutputWithContext(context.Context) FactoryIdentityOutput
}

// Identity properties of the factory resource.
type FactoryIdentityArgs struct {
	// The identity type. Currently the only supported type is 'SystemAssigned'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FactoryIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentity)(nil)).Elem()
}

func (i FactoryIdentityArgs) ToFactoryIdentityOutput() FactoryIdentityOutput {
	return i.ToFactoryIdentityOutputWithContext(context.Background())
}

func (i FactoryIdentityArgs) ToFactoryIdentityOutputWithContext(ctx context.Context) FactoryIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityOutput)
}

func (i FactoryIdentityArgs) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return i.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (i FactoryIdentityArgs) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityOutput).ToFactoryIdentityPtrOutputWithContext(ctx)
}

// FactoryIdentityPtrInput is an input type that accepts FactoryIdentityArgs, FactoryIdentityPtr and FactoryIdentityPtrOutput values.
// You can construct a concrete instance of `FactoryIdentityPtrInput` via:
//
//          FactoryIdentityArgs{...}
//
//  or:
//
//          nil
type FactoryIdentityPtrInput interface {
	pulumi.Input

	ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput
	ToFactoryIdentityPtrOutputWithContext(context.Context) FactoryIdentityPtrOutput
}

type factoryIdentityPtrType FactoryIdentityArgs

func FactoryIdentityPtr(v *FactoryIdentityArgs) FactoryIdentityPtrInput {
	return (*factoryIdentityPtrType)(v)
}

func (*factoryIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentity)(nil)).Elem()
}

func (i *factoryIdentityPtrType) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return i.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (i *factoryIdentityPtrType) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityPtrOutput)
}

// Identity properties of the factory resource.
type FactoryIdentityOutput struct{ *pulumi.OutputState }

func (FactoryIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentity)(nil)).Elem()
}

func (o FactoryIdentityOutput) ToFactoryIdentityOutput() FactoryIdentityOutput {
	return o
}

func (o FactoryIdentityOutput) ToFactoryIdentityOutputWithContext(ctx context.Context) FactoryIdentityOutput {
	return o
}

func (o FactoryIdentityOutput) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return o.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (o FactoryIdentityOutput) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return o.ApplyT(func(v FactoryIdentity) *FactoryIdentity {
		return &v
	}).(FactoryIdentityPtrOutput)
}

// The identity type. Currently the only supported type is 'SystemAssigned'.
func (o FactoryIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type FactoryIdentityPtrOutput struct{ *pulumi.OutputState }

func (FactoryIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentity)(nil)).Elem()
}

func (o FactoryIdentityPtrOutput) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return o
}

func (o FactoryIdentityPtrOutput) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return o
}

func (o FactoryIdentityPtrOutput) Elem() FactoryIdentityOutput {
	return o.ApplyT(func(v *FactoryIdentity) FactoryIdentity { return *v }).(FactoryIdentityOutput)
}

// The identity type. Currently the only supported type is 'SystemAssigned'.
func (o FactoryIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Identity properties of the factory resource.
type FactoryIdentityResponse struct {
	// The principal id of the identity.
	PrincipalId string `pulumi:"principalId"`
	// The client tenant id of the identity.
	TenantId string `pulumi:"tenantId"`
	// The identity type. Currently the only supported type is 'SystemAssigned'.
	Type string `pulumi:"type"`
}

// FactoryIdentityResponseInput is an input type that accepts FactoryIdentityResponseArgs and FactoryIdentityResponseOutput values.
// You can construct a concrete instance of `FactoryIdentityResponseInput` via:
//
//          FactoryIdentityResponseArgs{...}
type FactoryIdentityResponseInput interface {
	pulumi.Input

	ToFactoryIdentityResponseOutput() FactoryIdentityResponseOutput
	ToFactoryIdentityResponseOutputWithContext(context.Context) FactoryIdentityResponseOutput
}

// Identity properties of the factory resource.
type FactoryIdentityResponseArgs struct {
	// The principal id of the identity.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The client tenant id of the identity.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The identity type. Currently the only supported type is 'SystemAssigned'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FactoryIdentityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentityResponse)(nil)).Elem()
}

func (i FactoryIdentityResponseArgs) ToFactoryIdentityResponseOutput() FactoryIdentityResponseOutput {
	return i.ToFactoryIdentityResponseOutputWithContext(context.Background())
}

func (i FactoryIdentityResponseArgs) ToFactoryIdentityResponseOutputWithContext(ctx context.Context) FactoryIdentityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityResponseOutput)
}

func (i FactoryIdentityResponseArgs) ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput {
	return i.ToFactoryIdentityResponsePtrOutputWithContext(context.Background())
}

func (i FactoryIdentityResponseArgs) ToFactoryIdentityResponsePtrOutputWithContext(ctx context.Context) FactoryIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityResponseOutput).ToFactoryIdentityResponsePtrOutputWithContext(ctx)
}

// FactoryIdentityResponsePtrInput is an input type that accepts FactoryIdentityResponseArgs, FactoryIdentityResponsePtr and FactoryIdentityResponsePtrOutput values.
// You can construct a concrete instance of `FactoryIdentityResponsePtrInput` via:
//
//          FactoryIdentityResponseArgs{...}
//
//  or:
//
//          nil
type FactoryIdentityResponsePtrInput interface {
	pulumi.Input

	ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput
	ToFactoryIdentityResponsePtrOutputWithContext(context.Context) FactoryIdentityResponsePtrOutput
}

type factoryIdentityResponsePtrType FactoryIdentityResponseArgs

func FactoryIdentityResponsePtr(v *FactoryIdentityResponseArgs) FactoryIdentityResponsePtrInput {
	return (*factoryIdentityResponsePtrType)(v)
}

func (*factoryIdentityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentityResponse)(nil)).Elem()
}

func (i *factoryIdentityResponsePtrType) ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput {
	return i.ToFactoryIdentityResponsePtrOutputWithContext(context.Background())
}

func (i *factoryIdentityResponsePtrType) ToFactoryIdentityResponsePtrOutputWithContext(ctx context.Context) FactoryIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityResponsePtrOutput)
}

// Identity properties of the factory resource.
type FactoryIdentityResponseOutput struct{ *pulumi.OutputState }

func (FactoryIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentityResponse)(nil)).Elem()
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponseOutput() FactoryIdentityResponseOutput {
	return o
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponseOutputWithContext(ctx context.Context) FactoryIdentityResponseOutput {
	return o
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput {
	return o.ToFactoryIdentityResponsePtrOutputWithContext(context.Background())
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponsePtrOutputWithContext(ctx context.Context) FactoryIdentityResponsePtrOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) *FactoryIdentityResponse {
		return &v
	}).(FactoryIdentityResponsePtrOutput)
}

// The principal id of the identity.
func (o FactoryIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The client tenant id of the identity.
func (o FactoryIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type. Currently the only supported type is 'SystemAssigned'.
func (o FactoryIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

type FactoryIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (FactoryIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentityResponse)(nil)).Elem()
}

func (o FactoryIdentityResponsePtrOutput) ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput {
	return o
}

func (o FactoryIdentityResponsePtrOutput) ToFactoryIdentityResponsePtrOutputWithContext(ctx context.Context) FactoryIdentityResponsePtrOutput {
	return o
}

func (o FactoryIdentityResponsePtrOutput) Elem() FactoryIdentityResponseOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) FactoryIdentityResponse { return *v }).(FactoryIdentityResponseOutput)
}

// The principal id of the identity.
func (o FactoryIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The client tenant id of the identity.
func (o FactoryIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type. Currently the only supported type is 'SystemAssigned'.
func (o FactoryIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Factory resource properties.
type FactoryPropertiesResponse struct {
	// Time the factory was created in ISO8601 format.
	CreateTime string `pulumi:"createTime"`
	// List of parameters for factory.
	GlobalParameters *GlobalParameterDefinitionSpecificationResponse `pulumi:"globalParameters"`
	// Factory provisioning state, example Succeeded.
	ProvisioningState string `pulumi:"provisioningState"`
	// Git repo information of the factory.
	RepoConfiguration *FactoryRepoConfigurationResponse `pulumi:"repoConfiguration"`
	// Version of the factory.
	Version string `pulumi:"version"`
}

// FactoryPropertiesResponseInput is an input type that accepts FactoryPropertiesResponseArgs and FactoryPropertiesResponseOutput values.
// You can construct a concrete instance of `FactoryPropertiesResponseInput` via:
//
//          FactoryPropertiesResponseArgs{...}
type FactoryPropertiesResponseInput interface {
	pulumi.Input

	ToFactoryPropertiesResponseOutput() FactoryPropertiesResponseOutput
	ToFactoryPropertiesResponseOutputWithContext(context.Context) FactoryPropertiesResponseOutput
}

// Factory resource properties.
type FactoryPropertiesResponseArgs struct {
	// Time the factory was created in ISO8601 format.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// List of parameters for factory.
	GlobalParameters GlobalParameterDefinitionSpecificationResponsePtrInput `pulumi:"globalParameters"`
	// Factory provisioning state, example Succeeded.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// Git repo information of the factory.
	RepoConfiguration FactoryRepoConfigurationResponsePtrInput `pulumi:"repoConfiguration"`
	// Version of the factory.
	Version pulumi.StringInput `pulumi:"version"`
}

func (FactoryPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryPropertiesResponse)(nil)).Elem()
}

func (i FactoryPropertiesResponseArgs) ToFactoryPropertiesResponseOutput() FactoryPropertiesResponseOutput {
	return i.ToFactoryPropertiesResponseOutputWithContext(context.Background())
}

func (i FactoryPropertiesResponseArgs) ToFactoryPropertiesResponseOutputWithContext(ctx context.Context) FactoryPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryPropertiesResponseOutput)
}

func (i FactoryPropertiesResponseArgs) ToFactoryPropertiesResponsePtrOutput() FactoryPropertiesResponsePtrOutput {
	return i.ToFactoryPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i FactoryPropertiesResponseArgs) ToFactoryPropertiesResponsePtrOutputWithContext(ctx context.Context) FactoryPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryPropertiesResponseOutput).ToFactoryPropertiesResponsePtrOutputWithContext(ctx)
}

// FactoryPropertiesResponsePtrInput is an input type that accepts FactoryPropertiesResponseArgs, FactoryPropertiesResponsePtr and FactoryPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `FactoryPropertiesResponsePtrInput` via:
//
//          FactoryPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type FactoryPropertiesResponsePtrInput interface {
	pulumi.Input

	ToFactoryPropertiesResponsePtrOutput() FactoryPropertiesResponsePtrOutput
	ToFactoryPropertiesResponsePtrOutputWithContext(context.Context) FactoryPropertiesResponsePtrOutput
}

type factoryPropertiesResponsePtrType FactoryPropertiesResponseArgs

func FactoryPropertiesResponsePtr(v *FactoryPropertiesResponseArgs) FactoryPropertiesResponsePtrInput {
	return (*factoryPropertiesResponsePtrType)(v)
}

func (*factoryPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryPropertiesResponse)(nil)).Elem()
}

func (i *factoryPropertiesResponsePtrType) ToFactoryPropertiesResponsePtrOutput() FactoryPropertiesResponsePtrOutput {
	return i.ToFactoryPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *factoryPropertiesResponsePtrType) ToFactoryPropertiesResponsePtrOutputWithContext(ctx context.Context) FactoryPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryPropertiesResponsePtrOutput)
}

// Factory resource properties.
type FactoryPropertiesResponseOutput struct{ *pulumi.OutputState }

func (FactoryPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryPropertiesResponse)(nil)).Elem()
}

func (o FactoryPropertiesResponseOutput) ToFactoryPropertiesResponseOutput() FactoryPropertiesResponseOutput {
	return o
}

func (o FactoryPropertiesResponseOutput) ToFactoryPropertiesResponseOutputWithContext(ctx context.Context) FactoryPropertiesResponseOutput {
	return o
}

func (o FactoryPropertiesResponseOutput) ToFactoryPropertiesResponsePtrOutput() FactoryPropertiesResponsePtrOutput {
	return o.ToFactoryPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o FactoryPropertiesResponseOutput) ToFactoryPropertiesResponsePtrOutputWithContext(ctx context.Context) FactoryPropertiesResponsePtrOutput {
	return o.ApplyT(func(v FactoryPropertiesResponse) *FactoryPropertiesResponse {
		return &v
	}).(FactoryPropertiesResponsePtrOutput)
}

// Time the factory was created in ISO8601 format.
func (o FactoryPropertiesResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryPropertiesResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// List of parameters for factory.
func (o FactoryPropertiesResponseOutput) GlobalParameters() GlobalParameterDefinitionSpecificationResponsePtrOutput {
	return o.ApplyT(func(v FactoryPropertiesResponse) *GlobalParameterDefinitionSpecificationResponse {
		return v.GlobalParameters
	}).(GlobalParameterDefinitionSpecificationResponsePtrOutput)
}

// Factory provisioning state, example Succeeded.
func (o FactoryPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Git repo information of the factory.
func (o FactoryPropertiesResponseOutput) RepoConfiguration() FactoryRepoConfigurationResponsePtrOutput {
	return o.ApplyT(func(v FactoryPropertiesResponse) *FactoryRepoConfigurationResponse { return v.RepoConfiguration }).(FactoryRepoConfigurationResponsePtrOutput)
}

// Version of the factory.
func (o FactoryPropertiesResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryPropertiesResponse) string { return v.Version }).(pulumi.StringOutput)
}

type FactoryPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (FactoryPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryPropertiesResponse)(nil)).Elem()
}

func (o FactoryPropertiesResponsePtrOutput) ToFactoryPropertiesResponsePtrOutput() FactoryPropertiesResponsePtrOutput {
	return o
}

func (o FactoryPropertiesResponsePtrOutput) ToFactoryPropertiesResponsePtrOutputWithContext(ctx context.Context) FactoryPropertiesResponsePtrOutput {
	return o
}

func (o FactoryPropertiesResponsePtrOutput) Elem() FactoryPropertiesResponseOutput {
	return o.ApplyT(func(v *FactoryPropertiesResponse) FactoryPropertiesResponse { return *v }).(FactoryPropertiesResponseOutput)
}

// Time the factory was created in ISO8601 format.
func (o FactoryPropertiesResponsePtrOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreateTime
	}).(pulumi.StringPtrOutput)
}

// List of parameters for factory.
func (o FactoryPropertiesResponsePtrOutput) GlobalParameters() GlobalParameterDefinitionSpecificationResponsePtrOutput {
	return o.ApplyT(func(v *FactoryPropertiesResponse) *GlobalParameterDefinitionSpecificationResponse {
		if v == nil {
			return nil
		}
		return v.GlobalParameters
	}).(GlobalParameterDefinitionSpecificationResponsePtrOutput)
}

// Factory provisioning state, example Succeeded.
func (o FactoryPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Git repo information of the factory.
func (o FactoryPropertiesResponsePtrOutput) RepoConfiguration() FactoryRepoConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *FactoryPropertiesResponse) *FactoryRepoConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.RepoConfiguration
	}).(FactoryRepoConfigurationResponsePtrOutput)
}

// Version of the factory.
func (o FactoryPropertiesResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// Factory's git repo information.
type FactoryRepoConfiguration struct {
	// Account name.
	AccountName string `pulumi:"accountName"`
	// Collaboration branch.
	CollaborationBranch string `pulumi:"collaborationBranch"`
	// Last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// Repository name.
	RepositoryName string `pulumi:"repositoryName"`
	// Root folder.
	RootFolder string `pulumi:"rootFolder"`
	// Type of repo configuration.
	Type string `pulumi:"type"`
}

// FactoryRepoConfigurationInput is an input type that accepts FactoryRepoConfigurationArgs and FactoryRepoConfigurationOutput values.
// You can construct a concrete instance of `FactoryRepoConfigurationInput` via:
//
//          FactoryRepoConfigurationArgs{...}
type FactoryRepoConfigurationInput interface {
	pulumi.Input

	ToFactoryRepoConfigurationOutput() FactoryRepoConfigurationOutput
	ToFactoryRepoConfigurationOutputWithContext(context.Context) FactoryRepoConfigurationOutput
}

// Factory's git repo information.
type FactoryRepoConfigurationArgs struct {
	// Account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Collaboration branch.
	CollaborationBranch pulumi.StringInput `pulumi:"collaborationBranch"`
	// Last commit id.
	LastCommitId pulumi.StringPtrInput `pulumi:"lastCommitId"`
	// Repository name.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
	// Root folder.
	RootFolder pulumi.StringInput `pulumi:"rootFolder"`
	// Type of repo configuration.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FactoryRepoConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryRepoConfiguration)(nil)).Elem()
}

func (i FactoryRepoConfigurationArgs) ToFactoryRepoConfigurationOutput() FactoryRepoConfigurationOutput {
	return i.ToFactoryRepoConfigurationOutputWithContext(context.Background())
}

func (i FactoryRepoConfigurationArgs) ToFactoryRepoConfigurationOutputWithContext(ctx context.Context) FactoryRepoConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryRepoConfigurationOutput)
}

func (i FactoryRepoConfigurationArgs) ToFactoryRepoConfigurationPtrOutput() FactoryRepoConfigurationPtrOutput {
	return i.ToFactoryRepoConfigurationPtrOutputWithContext(context.Background())
}

func (i FactoryRepoConfigurationArgs) ToFactoryRepoConfigurationPtrOutputWithContext(ctx context.Context) FactoryRepoConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryRepoConfigurationOutput).ToFactoryRepoConfigurationPtrOutputWithContext(ctx)
}

// FactoryRepoConfigurationPtrInput is an input type that accepts FactoryRepoConfigurationArgs, FactoryRepoConfigurationPtr and FactoryRepoConfigurationPtrOutput values.
// You can construct a concrete instance of `FactoryRepoConfigurationPtrInput` via:
//
//          FactoryRepoConfigurationArgs{...}
//
//  or:
//
//          nil
type FactoryRepoConfigurationPtrInput interface {
	pulumi.Input

	ToFactoryRepoConfigurationPtrOutput() FactoryRepoConfigurationPtrOutput
	ToFactoryRepoConfigurationPtrOutputWithContext(context.Context) FactoryRepoConfigurationPtrOutput
}

type factoryRepoConfigurationPtrType FactoryRepoConfigurationArgs

func FactoryRepoConfigurationPtr(v *FactoryRepoConfigurationArgs) FactoryRepoConfigurationPtrInput {
	return (*factoryRepoConfigurationPtrType)(v)
}

func (*factoryRepoConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryRepoConfiguration)(nil)).Elem()
}

func (i *factoryRepoConfigurationPtrType) ToFactoryRepoConfigurationPtrOutput() FactoryRepoConfigurationPtrOutput {
	return i.ToFactoryRepoConfigurationPtrOutputWithContext(context.Background())
}

func (i *factoryRepoConfigurationPtrType) ToFactoryRepoConfigurationPtrOutputWithContext(ctx context.Context) FactoryRepoConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryRepoConfigurationPtrOutput)
}

// Factory's git repo information.
type FactoryRepoConfigurationOutput struct{ *pulumi.OutputState }

func (FactoryRepoConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryRepoConfiguration)(nil)).Elem()
}

func (o FactoryRepoConfigurationOutput) ToFactoryRepoConfigurationOutput() FactoryRepoConfigurationOutput {
	return o
}

func (o FactoryRepoConfigurationOutput) ToFactoryRepoConfigurationOutputWithContext(ctx context.Context) FactoryRepoConfigurationOutput {
	return o
}

func (o FactoryRepoConfigurationOutput) ToFactoryRepoConfigurationPtrOutput() FactoryRepoConfigurationPtrOutput {
	return o.ToFactoryRepoConfigurationPtrOutputWithContext(context.Background())
}

func (o FactoryRepoConfigurationOutput) ToFactoryRepoConfigurationPtrOutputWithContext(ctx context.Context) FactoryRepoConfigurationPtrOutput {
	return o.ApplyT(func(v FactoryRepoConfiguration) *FactoryRepoConfiguration {
		return &v
	}).(FactoryRepoConfigurationPtrOutput)
}

// Account name.
func (o FactoryRepoConfigurationOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryRepoConfiguration) string { return v.AccountName }).(pulumi.StringOutput)
}

// Collaboration branch.
func (o FactoryRepoConfigurationOutput) CollaborationBranch() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryRepoConfiguration) string { return v.CollaborationBranch }).(pulumi.StringOutput)
}

// Last commit id.
func (o FactoryRepoConfigurationOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryRepoConfiguration) *string { return v.LastCommitId }).(pulumi.StringPtrOutput)
}

// Repository name.
func (o FactoryRepoConfigurationOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryRepoConfiguration) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// Root folder.
func (o FactoryRepoConfigurationOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryRepoConfiguration) string { return v.RootFolder }).(pulumi.StringOutput)
}

// Type of repo configuration.
func (o FactoryRepoConfigurationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryRepoConfiguration) string { return v.Type }).(pulumi.StringOutput)
}

type FactoryRepoConfigurationPtrOutput struct{ *pulumi.OutputState }

func (FactoryRepoConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryRepoConfiguration)(nil)).Elem()
}

func (o FactoryRepoConfigurationPtrOutput) ToFactoryRepoConfigurationPtrOutput() FactoryRepoConfigurationPtrOutput {
	return o
}

func (o FactoryRepoConfigurationPtrOutput) ToFactoryRepoConfigurationPtrOutputWithContext(ctx context.Context) FactoryRepoConfigurationPtrOutput {
	return o
}

func (o FactoryRepoConfigurationPtrOutput) Elem() FactoryRepoConfigurationOutput {
	return o.ApplyT(func(v *FactoryRepoConfiguration) FactoryRepoConfiguration { return *v }).(FactoryRepoConfigurationOutput)
}

// Account name.
func (o FactoryRepoConfigurationPtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.AccountName
	}).(pulumi.StringPtrOutput)
}

// Collaboration branch.
func (o FactoryRepoConfigurationPtrOutput) CollaborationBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.CollaborationBranch
	}).(pulumi.StringPtrOutput)
}

// Last commit id.
func (o FactoryRepoConfigurationPtrOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.LastCommitId
	}).(pulumi.StringPtrOutput)
}

// Repository name.
func (o FactoryRepoConfigurationPtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// Root folder.
func (o FactoryRepoConfigurationPtrOutput) RootFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.RootFolder
	}).(pulumi.StringPtrOutput)
}

// Type of repo configuration.
func (o FactoryRepoConfigurationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Factory's git repo information.
type FactoryRepoConfigurationResponse struct {
	// Account name.
	AccountName string `pulumi:"accountName"`
	// Collaboration branch.
	CollaborationBranch string `pulumi:"collaborationBranch"`
	// Last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// Repository name.
	RepositoryName string `pulumi:"repositoryName"`
	// Root folder.
	RootFolder string `pulumi:"rootFolder"`
	// Type of repo configuration.
	Type string `pulumi:"type"`
}

// FactoryRepoConfigurationResponseInput is an input type that accepts FactoryRepoConfigurationResponseArgs and FactoryRepoConfigurationResponseOutput values.
// You can construct a concrete instance of `FactoryRepoConfigurationResponseInput` via:
//
//          FactoryRepoConfigurationResponseArgs{...}
type FactoryRepoConfigurationResponseInput interface {
	pulumi.Input

	ToFactoryRepoConfigurationResponseOutput() FactoryRepoConfigurationResponseOutput
	ToFactoryRepoConfigurationResponseOutputWithContext(context.Context) FactoryRepoConfigurationResponseOutput
}

// Factory's git repo information.
type FactoryRepoConfigurationResponseArgs struct {
	// Account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Collaboration branch.
	CollaborationBranch pulumi.StringInput `pulumi:"collaborationBranch"`
	// Last commit id.
	LastCommitId pulumi.StringPtrInput `pulumi:"lastCommitId"`
	// Repository name.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
	// Root folder.
	RootFolder pulumi.StringInput `pulumi:"rootFolder"`
	// Type of repo configuration.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FactoryRepoConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryRepoConfigurationResponse)(nil)).Elem()
}

func (i FactoryRepoConfigurationResponseArgs) ToFactoryRepoConfigurationResponseOutput() FactoryRepoConfigurationResponseOutput {
	return i.ToFactoryRepoConfigurationResponseOutputWithContext(context.Background())
}

func (i FactoryRepoConfigurationResponseArgs) ToFactoryRepoConfigurationResponseOutputWithContext(ctx context.Context) FactoryRepoConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryRepoConfigurationResponseOutput)
}

func (i FactoryRepoConfigurationResponseArgs) ToFactoryRepoConfigurationResponsePtrOutput() FactoryRepoConfigurationResponsePtrOutput {
	return i.ToFactoryRepoConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i FactoryRepoConfigurationResponseArgs) ToFactoryRepoConfigurationResponsePtrOutputWithContext(ctx context.Context) FactoryRepoConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryRepoConfigurationResponseOutput).ToFactoryRepoConfigurationResponsePtrOutputWithContext(ctx)
}

// FactoryRepoConfigurationResponsePtrInput is an input type that accepts FactoryRepoConfigurationResponseArgs, FactoryRepoConfigurationResponsePtr and FactoryRepoConfigurationResponsePtrOutput values.
// You can construct a concrete instance of `FactoryRepoConfigurationResponsePtrInput` via:
//
//          FactoryRepoConfigurationResponseArgs{...}
//
//  or:
//
//          nil
type FactoryRepoConfigurationResponsePtrInput interface {
	pulumi.Input

	ToFactoryRepoConfigurationResponsePtrOutput() FactoryRepoConfigurationResponsePtrOutput
	ToFactoryRepoConfigurationResponsePtrOutputWithContext(context.Context) FactoryRepoConfigurationResponsePtrOutput
}

type factoryRepoConfigurationResponsePtrType FactoryRepoConfigurationResponseArgs

func FactoryRepoConfigurationResponsePtr(v *FactoryRepoConfigurationResponseArgs) FactoryRepoConfigurationResponsePtrInput {
	return (*factoryRepoConfigurationResponsePtrType)(v)
}

func (*factoryRepoConfigurationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryRepoConfigurationResponse)(nil)).Elem()
}

func (i *factoryRepoConfigurationResponsePtrType) ToFactoryRepoConfigurationResponsePtrOutput() FactoryRepoConfigurationResponsePtrOutput {
	return i.ToFactoryRepoConfigurationResponsePtrOutputWithContext(context.Background())
}

func (i *factoryRepoConfigurationResponsePtrType) ToFactoryRepoConfigurationResponsePtrOutputWithContext(ctx context.Context) FactoryRepoConfigurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryRepoConfigurationResponsePtrOutput)
}

// Factory's git repo information.
type FactoryRepoConfigurationResponseOutput struct{ *pulumi.OutputState }

func (FactoryRepoConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryRepoConfigurationResponse)(nil)).Elem()
}

func (o FactoryRepoConfigurationResponseOutput) ToFactoryRepoConfigurationResponseOutput() FactoryRepoConfigurationResponseOutput {
	return o
}

func (o FactoryRepoConfigurationResponseOutput) ToFactoryRepoConfigurationResponseOutputWithContext(ctx context.Context) FactoryRepoConfigurationResponseOutput {
	return o
}

func (o FactoryRepoConfigurationResponseOutput) ToFactoryRepoConfigurationResponsePtrOutput() FactoryRepoConfigurationResponsePtrOutput {
	return o.ToFactoryRepoConfigurationResponsePtrOutputWithContext(context.Background())
}

func (o FactoryRepoConfigurationResponseOutput) ToFactoryRepoConfigurationResponsePtrOutputWithContext(ctx context.Context) FactoryRepoConfigurationResponsePtrOutput {
	return o.ApplyT(func(v FactoryRepoConfigurationResponse) *FactoryRepoConfigurationResponse {
		return &v
	}).(FactoryRepoConfigurationResponsePtrOutput)
}

// Account name.
func (o FactoryRepoConfigurationResponseOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryRepoConfigurationResponse) string { return v.AccountName }).(pulumi.StringOutput)
}

// Collaboration branch.
func (o FactoryRepoConfigurationResponseOutput) CollaborationBranch() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryRepoConfigurationResponse) string { return v.CollaborationBranch }).(pulumi.StringOutput)
}

// Last commit id.
func (o FactoryRepoConfigurationResponseOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryRepoConfigurationResponse) *string { return v.LastCommitId }).(pulumi.StringPtrOutput)
}

// Repository name.
func (o FactoryRepoConfigurationResponseOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryRepoConfigurationResponse) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// Root folder.
func (o FactoryRepoConfigurationResponseOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryRepoConfigurationResponse) string { return v.RootFolder }).(pulumi.StringOutput)
}

// Type of repo configuration.
func (o FactoryRepoConfigurationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryRepoConfigurationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type FactoryRepoConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (FactoryRepoConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryRepoConfigurationResponse)(nil)).Elem()
}

func (o FactoryRepoConfigurationResponsePtrOutput) ToFactoryRepoConfigurationResponsePtrOutput() FactoryRepoConfigurationResponsePtrOutput {
	return o
}

func (o FactoryRepoConfigurationResponsePtrOutput) ToFactoryRepoConfigurationResponsePtrOutputWithContext(ctx context.Context) FactoryRepoConfigurationResponsePtrOutput {
	return o
}

func (o FactoryRepoConfigurationResponsePtrOutput) Elem() FactoryRepoConfigurationResponseOutput {
	return o.ApplyT(func(v *FactoryRepoConfigurationResponse) FactoryRepoConfigurationResponse { return *v }).(FactoryRepoConfigurationResponseOutput)
}

// Account name.
func (o FactoryRepoConfigurationResponsePtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AccountName
	}).(pulumi.StringPtrOutput)
}

// Collaboration branch.
func (o FactoryRepoConfigurationResponsePtrOutput) CollaborationBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CollaborationBranch
	}).(pulumi.StringPtrOutput)
}

// Last commit id.
func (o FactoryRepoConfigurationResponsePtrOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastCommitId
	}).(pulumi.StringPtrOutput)
}

// Repository name.
func (o FactoryRepoConfigurationResponsePtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// Root folder.
func (o FactoryRepoConfigurationResponsePtrOutput) RootFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RootFolder
	}).(pulumi.StringPtrOutput)
}

// Type of repo configuration.
func (o FactoryRepoConfigurationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryRepoConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Definition of all parameters for an entity.
type GlobalParameterDefinitionSpecification struct {
}

// GlobalParameterDefinitionSpecificationInput is an input type that accepts GlobalParameterDefinitionSpecificationArgs and GlobalParameterDefinitionSpecificationOutput values.
// You can construct a concrete instance of `GlobalParameterDefinitionSpecificationInput` via:
//
//          GlobalParameterDefinitionSpecificationArgs{...}
type GlobalParameterDefinitionSpecificationInput interface {
	pulumi.Input

	ToGlobalParameterDefinitionSpecificationOutput() GlobalParameterDefinitionSpecificationOutput
	ToGlobalParameterDefinitionSpecificationOutputWithContext(context.Context) GlobalParameterDefinitionSpecificationOutput
}

// Definition of all parameters for an entity.
type GlobalParameterDefinitionSpecificationArgs struct {
}

func (GlobalParameterDefinitionSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalParameterDefinitionSpecification)(nil)).Elem()
}

func (i GlobalParameterDefinitionSpecificationArgs) ToGlobalParameterDefinitionSpecificationOutput() GlobalParameterDefinitionSpecificationOutput {
	return i.ToGlobalParameterDefinitionSpecificationOutputWithContext(context.Background())
}

func (i GlobalParameterDefinitionSpecificationArgs) ToGlobalParameterDefinitionSpecificationOutputWithContext(ctx context.Context) GlobalParameterDefinitionSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalParameterDefinitionSpecificationOutput)
}

func (i GlobalParameterDefinitionSpecificationArgs) ToGlobalParameterDefinitionSpecificationPtrOutput() GlobalParameterDefinitionSpecificationPtrOutput {
	return i.ToGlobalParameterDefinitionSpecificationPtrOutputWithContext(context.Background())
}

func (i GlobalParameterDefinitionSpecificationArgs) ToGlobalParameterDefinitionSpecificationPtrOutputWithContext(ctx context.Context) GlobalParameterDefinitionSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalParameterDefinitionSpecificationOutput).ToGlobalParameterDefinitionSpecificationPtrOutputWithContext(ctx)
}

// GlobalParameterDefinitionSpecificationPtrInput is an input type that accepts GlobalParameterDefinitionSpecificationArgs, GlobalParameterDefinitionSpecificationPtr and GlobalParameterDefinitionSpecificationPtrOutput values.
// You can construct a concrete instance of `GlobalParameterDefinitionSpecificationPtrInput` via:
//
//          GlobalParameterDefinitionSpecificationArgs{...}
//
//  or:
//
//          nil
type GlobalParameterDefinitionSpecificationPtrInput interface {
	pulumi.Input

	ToGlobalParameterDefinitionSpecificationPtrOutput() GlobalParameterDefinitionSpecificationPtrOutput
	ToGlobalParameterDefinitionSpecificationPtrOutputWithContext(context.Context) GlobalParameterDefinitionSpecificationPtrOutput
}

type globalParameterDefinitionSpecificationPtrType GlobalParameterDefinitionSpecificationArgs

func GlobalParameterDefinitionSpecificationPtr(v *GlobalParameterDefinitionSpecificationArgs) GlobalParameterDefinitionSpecificationPtrInput {
	return (*globalParameterDefinitionSpecificationPtrType)(v)
}

func (*globalParameterDefinitionSpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalParameterDefinitionSpecification)(nil)).Elem()
}

func (i *globalParameterDefinitionSpecificationPtrType) ToGlobalParameterDefinitionSpecificationPtrOutput() GlobalParameterDefinitionSpecificationPtrOutput {
	return i.ToGlobalParameterDefinitionSpecificationPtrOutputWithContext(context.Background())
}

func (i *globalParameterDefinitionSpecificationPtrType) ToGlobalParameterDefinitionSpecificationPtrOutputWithContext(ctx context.Context) GlobalParameterDefinitionSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalParameterDefinitionSpecificationPtrOutput)
}

// Definition of all parameters for an entity.
type GlobalParameterDefinitionSpecificationOutput struct{ *pulumi.OutputState }

func (GlobalParameterDefinitionSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalParameterDefinitionSpecification)(nil)).Elem()
}

func (o GlobalParameterDefinitionSpecificationOutput) ToGlobalParameterDefinitionSpecificationOutput() GlobalParameterDefinitionSpecificationOutput {
	return o
}

func (o GlobalParameterDefinitionSpecificationOutput) ToGlobalParameterDefinitionSpecificationOutputWithContext(ctx context.Context) GlobalParameterDefinitionSpecificationOutput {
	return o
}

func (o GlobalParameterDefinitionSpecificationOutput) ToGlobalParameterDefinitionSpecificationPtrOutput() GlobalParameterDefinitionSpecificationPtrOutput {
	return o.ToGlobalParameterDefinitionSpecificationPtrOutputWithContext(context.Background())
}

func (o GlobalParameterDefinitionSpecificationOutput) ToGlobalParameterDefinitionSpecificationPtrOutputWithContext(ctx context.Context) GlobalParameterDefinitionSpecificationPtrOutput {
	return o.ApplyT(func(v GlobalParameterDefinitionSpecification) *GlobalParameterDefinitionSpecification {
		return &v
	}).(GlobalParameterDefinitionSpecificationPtrOutput)
}

type GlobalParameterDefinitionSpecificationPtrOutput struct{ *pulumi.OutputState }

func (GlobalParameterDefinitionSpecificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalParameterDefinitionSpecification)(nil)).Elem()
}

func (o GlobalParameterDefinitionSpecificationPtrOutput) ToGlobalParameterDefinitionSpecificationPtrOutput() GlobalParameterDefinitionSpecificationPtrOutput {
	return o
}

func (o GlobalParameterDefinitionSpecificationPtrOutput) ToGlobalParameterDefinitionSpecificationPtrOutputWithContext(ctx context.Context) GlobalParameterDefinitionSpecificationPtrOutput {
	return o
}

func (o GlobalParameterDefinitionSpecificationPtrOutput) Elem() GlobalParameterDefinitionSpecificationOutput {
	return o.ApplyT(func(v *GlobalParameterDefinitionSpecification) GlobalParameterDefinitionSpecification { return *v }).(GlobalParameterDefinitionSpecificationOutput)
}

// Definition of all parameters for an entity.
type GlobalParameterDefinitionSpecificationResponse struct {
}

// GlobalParameterDefinitionSpecificationResponseInput is an input type that accepts GlobalParameterDefinitionSpecificationResponseArgs and GlobalParameterDefinitionSpecificationResponseOutput values.
// You can construct a concrete instance of `GlobalParameterDefinitionSpecificationResponseInput` via:
//
//          GlobalParameterDefinitionSpecificationResponseArgs{...}
type GlobalParameterDefinitionSpecificationResponseInput interface {
	pulumi.Input

	ToGlobalParameterDefinitionSpecificationResponseOutput() GlobalParameterDefinitionSpecificationResponseOutput
	ToGlobalParameterDefinitionSpecificationResponseOutputWithContext(context.Context) GlobalParameterDefinitionSpecificationResponseOutput
}

// Definition of all parameters for an entity.
type GlobalParameterDefinitionSpecificationResponseArgs struct {
}

func (GlobalParameterDefinitionSpecificationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalParameterDefinitionSpecificationResponse)(nil)).Elem()
}

func (i GlobalParameterDefinitionSpecificationResponseArgs) ToGlobalParameterDefinitionSpecificationResponseOutput() GlobalParameterDefinitionSpecificationResponseOutput {
	return i.ToGlobalParameterDefinitionSpecificationResponseOutputWithContext(context.Background())
}

func (i GlobalParameterDefinitionSpecificationResponseArgs) ToGlobalParameterDefinitionSpecificationResponseOutputWithContext(ctx context.Context) GlobalParameterDefinitionSpecificationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalParameterDefinitionSpecificationResponseOutput)
}

func (i GlobalParameterDefinitionSpecificationResponseArgs) ToGlobalParameterDefinitionSpecificationResponsePtrOutput() GlobalParameterDefinitionSpecificationResponsePtrOutput {
	return i.ToGlobalParameterDefinitionSpecificationResponsePtrOutputWithContext(context.Background())
}

func (i GlobalParameterDefinitionSpecificationResponseArgs) ToGlobalParameterDefinitionSpecificationResponsePtrOutputWithContext(ctx context.Context) GlobalParameterDefinitionSpecificationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalParameterDefinitionSpecificationResponseOutput).ToGlobalParameterDefinitionSpecificationResponsePtrOutputWithContext(ctx)
}

// GlobalParameterDefinitionSpecificationResponsePtrInput is an input type that accepts GlobalParameterDefinitionSpecificationResponseArgs, GlobalParameterDefinitionSpecificationResponsePtr and GlobalParameterDefinitionSpecificationResponsePtrOutput values.
// You can construct a concrete instance of `GlobalParameterDefinitionSpecificationResponsePtrInput` via:
//
//          GlobalParameterDefinitionSpecificationResponseArgs{...}
//
//  or:
//
//          nil
type GlobalParameterDefinitionSpecificationResponsePtrInput interface {
	pulumi.Input

	ToGlobalParameterDefinitionSpecificationResponsePtrOutput() GlobalParameterDefinitionSpecificationResponsePtrOutput
	ToGlobalParameterDefinitionSpecificationResponsePtrOutputWithContext(context.Context) GlobalParameterDefinitionSpecificationResponsePtrOutput
}

type globalParameterDefinitionSpecificationResponsePtrType GlobalParameterDefinitionSpecificationResponseArgs

func GlobalParameterDefinitionSpecificationResponsePtr(v *GlobalParameterDefinitionSpecificationResponseArgs) GlobalParameterDefinitionSpecificationResponsePtrInput {
	return (*globalParameterDefinitionSpecificationResponsePtrType)(v)
}

func (*globalParameterDefinitionSpecificationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalParameterDefinitionSpecificationResponse)(nil)).Elem()
}

func (i *globalParameterDefinitionSpecificationResponsePtrType) ToGlobalParameterDefinitionSpecificationResponsePtrOutput() GlobalParameterDefinitionSpecificationResponsePtrOutput {
	return i.ToGlobalParameterDefinitionSpecificationResponsePtrOutputWithContext(context.Background())
}

func (i *globalParameterDefinitionSpecificationResponsePtrType) ToGlobalParameterDefinitionSpecificationResponsePtrOutputWithContext(ctx context.Context) GlobalParameterDefinitionSpecificationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalParameterDefinitionSpecificationResponsePtrOutput)
}

// Definition of all parameters for an entity.
type GlobalParameterDefinitionSpecificationResponseOutput struct{ *pulumi.OutputState }

func (GlobalParameterDefinitionSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalParameterDefinitionSpecificationResponse)(nil)).Elem()
}

func (o GlobalParameterDefinitionSpecificationResponseOutput) ToGlobalParameterDefinitionSpecificationResponseOutput() GlobalParameterDefinitionSpecificationResponseOutput {
	return o
}

func (o GlobalParameterDefinitionSpecificationResponseOutput) ToGlobalParameterDefinitionSpecificationResponseOutputWithContext(ctx context.Context) GlobalParameterDefinitionSpecificationResponseOutput {
	return o
}

func (o GlobalParameterDefinitionSpecificationResponseOutput) ToGlobalParameterDefinitionSpecificationResponsePtrOutput() GlobalParameterDefinitionSpecificationResponsePtrOutput {
	return o.ToGlobalParameterDefinitionSpecificationResponsePtrOutputWithContext(context.Background())
}

func (o GlobalParameterDefinitionSpecificationResponseOutput) ToGlobalParameterDefinitionSpecificationResponsePtrOutputWithContext(ctx context.Context) GlobalParameterDefinitionSpecificationResponsePtrOutput {
	return o.ApplyT(func(v GlobalParameterDefinitionSpecificationResponse) *GlobalParameterDefinitionSpecificationResponse {
		return &v
	}).(GlobalParameterDefinitionSpecificationResponsePtrOutput)
}

type GlobalParameterDefinitionSpecificationResponsePtrOutput struct{ *pulumi.OutputState }

func (GlobalParameterDefinitionSpecificationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalParameterDefinitionSpecificationResponse)(nil)).Elem()
}

func (o GlobalParameterDefinitionSpecificationResponsePtrOutput) ToGlobalParameterDefinitionSpecificationResponsePtrOutput() GlobalParameterDefinitionSpecificationResponsePtrOutput {
	return o
}

func (o GlobalParameterDefinitionSpecificationResponsePtrOutput) ToGlobalParameterDefinitionSpecificationResponsePtrOutputWithContext(ctx context.Context) GlobalParameterDefinitionSpecificationResponsePtrOutput {
	return o
}

func (o GlobalParameterDefinitionSpecificationResponsePtrOutput) Elem() GlobalParameterDefinitionSpecificationResponseOutput {
	return o.ApplyT(func(v *GlobalParameterDefinitionSpecificationResponse) GlobalParameterDefinitionSpecificationResponse {
		return *v
	}).(GlobalParameterDefinitionSpecificationResponseOutput)
}

// Integration runtime resource type.
type IntegrationRuntimeType struct {
	// Etag identifies change in the resource.
	Etag string `pulumi:"etag"`
	// The resource name.
	Name string `pulumi:"name"`
	// Integration runtime properties.
	Properties IntegrationRuntimeResponse `pulumi:"properties"`
	// The resource type.
	Type string `pulumi:"type"`
}

// IntegrationRuntimeTypeInput is an input type that accepts IntegrationRuntimeTypeArgs and IntegrationRuntimeTypeOutput values.
// You can construct a concrete instance of `IntegrationRuntimeTypeInput` via:
//
//          IntegrationRuntimeTypeArgs{...}
type IntegrationRuntimeTypeInput interface {
	pulumi.Input

	ToIntegrationRuntimeTypeOutput() IntegrationRuntimeTypeOutput
	ToIntegrationRuntimeTypeOutputWithContext(context.Context) IntegrationRuntimeTypeOutput
}

// Integration runtime resource type.
type IntegrationRuntimeTypeArgs struct {
	// Etag identifies change in the resource.
	Etag pulumi.StringInput `pulumi:"etag"`
	// The resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// Integration runtime properties.
	Properties IntegrationRuntimeResponseInput `pulumi:"properties"`
	// The resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IntegrationRuntimeTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeType)(nil)).Elem()
}

func (i IntegrationRuntimeTypeArgs) ToIntegrationRuntimeTypeOutput() IntegrationRuntimeTypeOutput {
	return i.ToIntegrationRuntimeTypeOutputWithContext(context.Background())
}

func (i IntegrationRuntimeTypeArgs) ToIntegrationRuntimeTypeOutputWithContext(ctx context.Context) IntegrationRuntimeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeTypeOutput)
}

// Integration runtime resource type.
type IntegrationRuntimeTypeOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeType)(nil)).Elem()
}

func (o IntegrationRuntimeTypeOutput) ToIntegrationRuntimeTypeOutput() IntegrationRuntimeTypeOutput {
	return o
}

func (o IntegrationRuntimeTypeOutput) ToIntegrationRuntimeTypeOutputWithContext(ctx context.Context) IntegrationRuntimeTypeOutput {
	return o
}

// Etag identifies change in the resource.
func (o IntegrationRuntimeTypeOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeType) string { return v.Etag }).(pulumi.StringOutput)
}

// The resource name.
func (o IntegrationRuntimeTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeType) string { return v.Name }).(pulumi.StringOutput)
}

// Integration runtime properties.
func (o IntegrationRuntimeTypeOutput) Properties() IntegrationRuntimeResponseOutput {
	return o.ApplyT(func(v IntegrationRuntimeType) IntegrationRuntimeResponse { return v.Properties }).(IntegrationRuntimeResponseOutput)
}

// The resource type.
func (o IntegrationRuntimeTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeType) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Data Factory nested object which serves as a compute resource for activities.
type IntegrationRuntimeDefinition struct {
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// IntegrationRuntimeDefinitionInput is an input type that accepts IntegrationRuntimeDefinitionArgs and IntegrationRuntimeDefinitionOutput values.
// You can construct a concrete instance of `IntegrationRuntimeDefinitionInput` via:
//
//          IntegrationRuntimeDefinitionArgs{...}
type IntegrationRuntimeDefinitionInput interface {
	pulumi.Input

	ToIntegrationRuntimeDefinitionOutput() IntegrationRuntimeDefinitionOutput
	ToIntegrationRuntimeDefinitionOutputWithContext(context.Context) IntegrationRuntimeDefinitionOutput
}

// Azure Data Factory nested object which serves as a compute resource for activities.
type IntegrationRuntimeDefinitionArgs struct {
	// Integration runtime description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IntegrationRuntimeDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeDefinition)(nil)).Elem()
}

func (i IntegrationRuntimeDefinitionArgs) ToIntegrationRuntimeDefinitionOutput() IntegrationRuntimeDefinitionOutput {
	return i.ToIntegrationRuntimeDefinitionOutputWithContext(context.Background())
}

func (i IntegrationRuntimeDefinitionArgs) ToIntegrationRuntimeDefinitionOutputWithContext(ctx context.Context) IntegrationRuntimeDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDefinitionOutput)
}

func (i IntegrationRuntimeDefinitionArgs) ToIntegrationRuntimeDefinitionPtrOutput() IntegrationRuntimeDefinitionPtrOutput {
	return i.ToIntegrationRuntimeDefinitionPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeDefinitionArgs) ToIntegrationRuntimeDefinitionPtrOutputWithContext(ctx context.Context) IntegrationRuntimeDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDefinitionOutput).ToIntegrationRuntimeDefinitionPtrOutputWithContext(ctx)
}

// IntegrationRuntimeDefinitionPtrInput is an input type that accepts IntegrationRuntimeDefinitionArgs, IntegrationRuntimeDefinitionPtr and IntegrationRuntimeDefinitionPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeDefinitionPtrInput` via:
//
//          IntegrationRuntimeDefinitionArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeDefinitionPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeDefinitionPtrOutput() IntegrationRuntimeDefinitionPtrOutput
	ToIntegrationRuntimeDefinitionPtrOutputWithContext(context.Context) IntegrationRuntimeDefinitionPtrOutput
}

type integrationRuntimeDefinitionPtrType IntegrationRuntimeDefinitionArgs

func IntegrationRuntimeDefinitionPtr(v *IntegrationRuntimeDefinitionArgs) IntegrationRuntimeDefinitionPtrInput {
	return (*integrationRuntimeDefinitionPtrType)(v)
}

func (*integrationRuntimeDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeDefinition)(nil)).Elem()
}

func (i *integrationRuntimeDefinitionPtrType) ToIntegrationRuntimeDefinitionPtrOutput() IntegrationRuntimeDefinitionPtrOutput {
	return i.ToIntegrationRuntimeDefinitionPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeDefinitionPtrType) ToIntegrationRuntimeDefinitionPtrOutputWithContext(ctx context.Context) IntegrationRuntimeDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDefinitionPtrOutput)
}

// Azure Data Factory nested object which serves as a compute resource for activities.
type IntegrationRuntimeDefinitionOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeDefinition)(nil)).Elem()
}

func (o IntegrationRuntimeDefinitionOutput) ToIntegrationRuntimeDefinitionOutput() IntegrationRuntimeDefinitionOutput {
	return o
}

func (o IntegrationRuntimeDefinitionOutput) ToIntegrationRuntimeDefinitionOutputWithContext(ctx context.Context) IntegrationRuntimeDefinitionOutput {
	return o
}

func (o IntegrationRuntimeDefinitionOutput) ToIntegrationRuntimeDefinitionPtrOutput() IntegrationRuntimeDefinitionPtrOutput {
	return o.ToIntegrationRuntimeDefinitionPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeDefinitionOutput) ToIntegrationRuntimeDefinitionPtrOutputWithContext(ctx context.Context) IntegrationRuntimeDefinitionPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDefinition) *IntegrationRuntimeDefinition {
		return &v
	}).(IntegrationRuntimeDefinitionPtrOutput)
}

// Integration runtime description.
func (o IntegrationRuntimeDefinitionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDefinition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeDefinition) string { return v.Type }).(pulumi.StringOutput)
}

type IntegrationRuntimeDefinitionPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeDefinition)(nil)).Elem()
}

func (o IntegrationRuntimeDefinitionPtrOutput) ToIntegrationRuntimeDefinitionPtrOutput() IntegrationRuntimeDefinitionPtrOutput {
	return o
}

func (o IntegrationRuntimeDefinitionPtrOutput) ToIntegrationRuntimeDefinitionPtrOutputWithContext(ctx context.Context) IntegrationRuntimeDefinitionPtrOutput {
	return o
}

func (o IntegrationRuntimeDefinitionPtrOutput) Elem() IntegrationRuntimeDefinitionOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDefinition) IntegrationRuntimeDefinition { return *v }).(IntegrationRuntimeDefinitionOutput)
}

// Integration runtime description.
func (o IntegrationRuntimeDefinitionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeDefinitionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Integration runtime reference type.
type IntegrationRuntimeReference struct {
	// Arguments for integration runtime.
	Parameters *ParameterValueSpecification `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName string `pulumi:"referenceName"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// IntegrationRuntimeReferenceInput is an input type that accepts IntegrationRuntimeReferenceArgs and IntegrationRuntimeReferenceOutput values.
// You can construct a concrete instance of `IntegrationRuntimeReferenceInput` via:
//
//          IntegrationRuntimeReferenceArgs{...}
type IntegrationRuntimeReferenceInput interface {
	pulumi.Input

	ToIntegrationRuntimeReferenceOutput() IntegrationRuntimeReferenceOutput
	ToIntegrationRuntimeReferenceOutputWithContext(context.Context) IntegrationRuntimeReferenceOutput
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceArgs struct {
	// Arguments for integration runtime.
	Parameters ParameterValueSpecificationPtrInput `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IntegrationRuntimeReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeReference)(nil)).Elem()
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferenceOutput() IntegrationRuntimeReferenceOutput {
	return i.ToIntegrationRuntimeReferenceOutputWithContext(context.Background())
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferenceOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceOutput)
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput {
	return i.ToIntegrationRuntimeReferencePtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferencePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceOutput).ToIntegrationRuntimeReferencePtrOutputWithContext(ctx)
}

// IntegrationRuntimeReferencePtrInput is an input type that accepts IntegrationRuntimeReferenceArgs, IntegrationRuntimeReferencePtr and IntegrationRuntimeReferencePtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeReferencePtrInput` via:
//
//          IntegrationRuntimeReferenceArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeReferencePtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput
	ToIntegrationRuntimeReferencePtrOutputWithContext(context.Context) IntegrationRuntimeReferencePtrOutput
}

type integrationRuntimeReferencePtrType IntegrationRuntimeReferenceArgs

func IntegrationRuntimeReferencePtr(v *IntegrationRuntimeReferenceArgs) IntegrationRuntimeReferencePtrInput {
	return (*integrationRuntimeReferencePtrType)(v)
}

func (*integrationRuntimeReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeReference)(nil)).Elem()
}

func (i *integrationRuntimeReferencePtrType) ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput {
	return i.ToIntegrationRuntimeReferencePtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeReferencePtrType) ToIntegrationRuntimeReferencePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferencePtrOutput)
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeReference)(nil)).Elem()
}

func (o IntegrationRuntimeReferenceOutput) ToIntegrationRuntimeReferenceOutput() IntegrationRuntimeReferenceOutput {
	return o
}

func (o IntegrationRuntimeReferenceOutput) ToIntegrationRuntimeReferenceOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceOutput {
	return o
}

func (o IntegrationRuntimeReferenceOutput) ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput {
	return o.ToIntegrationRuntimeReferencePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeReferenceOutput) ToIntegrationRuntimeReferencePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeReference) *IntegrationRuntimeReference {
		return &v
	}).(IntegrationRuntimeReferencePtrOutput)
}

// Arguments for integration runtime.
func (o IntegrationRuntimeReferenceOutput) Parameters() ParameterValueSpecificationPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeReference) *ParameterValueSpecification { return v.Parameters }).(ParameterValueSpecificationPtrOutput)
}

// Reference integration runtime name.
func (o IntegrationRuntimeReferenceOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeReference) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeReference) string { return v.Type }).(pulumi.StringOutput)
}

type IntegrationRuntimeReferencePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeReference)(nil)).Elem()
}

func (o IntegrationRuntimeReferencePtrOutput) ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput {
	return o
}

func (o IntegrationRuntimeReferencePtrOutput) ToIntegrationRuntimeReferencePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferencePtrOutput {
	return o
}

func (o IntegrationRuntimeReferencePtrOutput) Elem() IntegrationRuntimeReferenceOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReference) IntegrationRuntimeReference { return *v }).(IntegrationRuntimeReferenceOutput)
}

// Arguments for integration runtime.
func (o IntegrationRuntimeReferencePtrOutput) Parameters() ParameterValueSpecificationPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReference) *ParameterValueSpecification {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterValueSpecificationPtrOutput)
}

// Reference integration runtime name.
func (o IntegrationRuntimeReferencePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReference) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceResponse struct {
	// Arguments for integration runtime.
	Parameters *ParameterValueSpecificationResponse `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName string `pulumi:"referenceName"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// IntegrationRuntimeReferenceResponseInput is an input type that accepts IntegrationRuntimeReferenceResponseArgs and IntegrationRuntimeReferenceResponseOutput values.
// You can construct a concrete instance of `IntegrationRuntimeReferenceResponseInput` via:
//
//          IntegrationRuntimeReferenceResponseArgs{...}
type IntegrationRuntimeReferenceResponseInput interface {
	pulumi.Input

	ToIntegrationRuntimeReferenceResponseOutput() IntegrationRuntimeReferenceResponseOutput
	ToIntegrationRuntimeReferenceResponseOutputWithContext(context.Context) IntegrationRuntimeReferenceResponseOutput
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceResponseArgs struct {
	// Arguments for integration runtime.
	Parameters ParameterValueSpecificationResponsePtrInput `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IntegrationRuntimeReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeReferenceResponse)(nil)).Elem()
}

func (i IntegrationRuntimeReferenceResponseArgs) ToIntegrationRuntimeReferenceResponseOutput() IntegrationRuntimeReferenceResponseOutput {
	return i.ToIntegrationRuntimeReferenceResponseOutputWithContext(context.Background())
}

func (i IntegrationRuntimeReferenceResponseArgs) ToIntegrationRuntimeReferenceResponseOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceResponseOutput)
}

func (i IntegrationRuntimeReferenceResponseArgs) ToIntegrationRuntimeReferenceResponsePtrOutput() IntegrationRuntimeReferenceResponsePtrOutput {
	return i.ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeReferenceResponseArgs) ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceResponseOutput).ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(ctx)
}

// IntegrationRuntimeReferenceResponsePtrInput is an input type that accepts IntegrationRuntimeReferenceResponseArgs, IntegrationRuntimeReferenceResponsePtr and IntegrationRuntimeReferenceResponsePtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeReferenceResponsePtrInput` via:
//
//          IntegrationRuntimeReferenceResponseArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeReferenceResponsePtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeReferenceResponsePtrOutput() IntegrationRuntimeReferenceResponsePtrOutput
	ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(context.Context) IntegrationRuntimeReferenceResponsePtrOutput
}

type integrationRuntimeReferenceResponsePtrType IntegrationRuntimeReferenceResponseArgs

func IntegrationRuntimeReferenceResponsePtr(v *IntegrationRuntimeReferenceResponseArgs) IntegrationRuntimeReferenceResponsePtrInput {
	return (*integrationRuntimeReferenceResponsePtrType)(v)
}

func (*integrationRuntimeReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeReferenceResponse)(nil)).Elem()
}

func (i *integrationRuntimeReferenceResponsePtrType) ToIntegrationRuntimeReferenceResponsePtrOutput() IntegrationRuntimeReferenceResponsePtrOutput {
	return i.ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeReferenceResponsePtrType) ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeReferenceResponse)(nil)).Elem()
}

func (o IntegrationRuntimeReferenceResponseOutput) ToIntegrationRuntimeReferenceResponseOutput() IntegrationRuntimeReferenceResponseOutput {
	return o
}

func (o IntegrationRuntimeReferenceResponseOutput) ToIntegrationRuntimeReferenceResponseOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponseOutput {
	return o
}

func (o IntegrationRuntimeReferenceResponseOutput) ToIntegrationRuntimeReferenceResponsePtrOutput() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeReferenceResponseOutput) ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeReferenceResponse) *IntegrationRuntimeReferenceResponse {
		return &v
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Arguments for integration runtime.
func (o IntegrationRuntimeReferenceResponseOutput) Parameters() ParameterValueSpecificationResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeReferenceResponse) *ParameterValueSpecificationResponse { return v.Parameters }).(ParameterValueSpecificationResponsePtrOutput)
}

// Reference integration runtime name.
func (o IntegrationRuntimeReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type IntegrationRuntimeReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeReferenceResponse)(nil)).Elem()
}

func (o IntegrationRuntimeReferenceResponsePtrOutput) ToIntegrationRuntimeReferenceResponsePtrOutput() IntegrationRuntimeReferenceResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeReferenceResponsePtrOutput) ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeReferenceResponsePtrOutput) Elem() IntegrationRuntimeReferenceResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) IntegrationRuntimeReferenceResponse { return *v }).(IntegrationRuntimeReferenceResponseOutput)
}

// Arguments for integration runtime.
func (o IntegrationRuntimeReferenceResponsePtrOutput) Parameters() ParameterValueSpecificationResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) *ParameterValueSpecificationResponse {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterValueSpecificationResponsePtrOutput)
}

// Reference integration runtime name.
func (o IntegrationRuntimeReferenceResponsePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure Data Factory nested object which serves as a compute resource for activities.
type IntegrationRuntimeResponse struct {
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// IntegrationRuntimeResponseInput is an input type that accepts IntegrationRuntimeResponseArgs and IntegrationRuntimeResponseOutput values.
// You can construct a concrete instance of `IntegrationRuntimeResponseInput` via:
//
//          IntegrationRuntimeResponseArgs{...}
type IntegrationRuntimeResponseInput interface {
	pulumi.Input

	ToIntegrationRuntimeResponseOutput() IntegrationRuntimeResponseOutput
	ToIntegrationRuntimeResponseOutputWithContext(context.Context) IntegrationRuntimeResponseOutput
}

// Azure Data Factory nested object which serves as a compute resource for activities.
type IntegrationRuntimeResponseArgs struct {
	// Integration runtime description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IntegrationRuntimeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeResponse)(nil)).Elem()
}

func (i IntegrationRuntimeResponseArgs) ToIntegrationRuntimeResponseOutput() IntegrationRuntimeResponseOutput {
	return i.ToIntegrationRuntimeResponseOutputWithContext(context.Background())
}

func (i IntegrationRuntimeResponseArgs) ToIntegrationRuntimeResponseOutputWithContext(ctx context.Context) IntegrationRuntimeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeResponseOutput)
}

func (i IntegrationRuntimeResponseArgs) ToIntegrationRuntimeResponsePtrOutput() IntegrationRuntimeResponsePtrOutput {
	return i.ToIntegrationRuntimeResponsePtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeResponseArgs) ToIntegrationRuntimeResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeResponseOutput).ToIntegrationRuntimeResponsePtrOutputWithContext(ctx)
}

// IntegrationRuntimeResponsePtrInput is an input type that accepts IntegrationRuntimeResponseArgs, IntegrationRuntimeResponsePtr and IntegrationRuntimeResponsePtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeResponsePtrInput` via:
//
//          IntegrationRuntimeResponseArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeResponsePtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeResponsePtrOutput() IntegrationRuntimeResponsePtrOutput
	ToIntegrationRuntimeResponsePtrOutputWithContext(context.Context) IntegrationRuntimeResponsePtrOutput
}

type integrationRuntimeResponsePtrType IntegrationRuntimeResponseArgs

func IntegrationRuntimeResponsePtr(v *IntegrationRuntimeResponseArgs) IntegrationRuntimeResponsePtrInput {
	return (*integrationRuntimeResponsePtrType)(v)
}

func (*integrationRuntimeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeResponse)(nil)).Elem()
}

func (i *integrationRuntimeResponsePtrType) ToIntegrationRuntimeResponsePtrOutput() IntegrationRuntimeResponsePtrOutput {
	return i.ToIntegrationRuntimeResponsePtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeResponsePtrType) ToIntegrationRuntimeResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeResponsePtrOutput)
}

// Azure Data Factory nested object which serves as a compute resource for activities.
type IntegrationRuntimeResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeResponse)(nil)).Elem()
}

func (o IntegrationRuntimeResponseOutput) ToIntegrationRuntimeResponseOutput() IntegrationRuntimeResponseOutput {
	return o
}

func (o IntegrationRuntimeResponseOutput) ToIntegrationRuntimeResponseOutputWithContext(ctx context.Context) IntegrationRuntimeResponseOutput {
	return o
}

func (o IntegrationRuntimeResponseOutput) ToIntegrationRuntimeResponsePtrOutput() IntegrationRuntimeResponsePtrOutput {
	return o.ToIntegrationRuntimeResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeResponseOutput) ToIntegrationRuntimeResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeResponse) *IntegrationRuntimeResponse {
		return &v
	}).(IntegrationRuntimeResponsePtrOutput)
}

// Integration runtime description.
func (o IntegrationRuntimeResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeResponse) string { return v.Type }).(pulumi.StringOutput)
}

type IntegrationRuntimeResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeResponse)(nil)).Elem()
}

func (o IntegrationRuntimeResponsePtrOutput) ToIntegrationRuntimeResponsePtrOutput() IntegrationRuntimeResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeResponsePtrOutput) ToIntegrationRuntimeResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeResponsePtrOutput) Elem() IntegrationRuntimeResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeResponse) IntegrationRuntimeResponse { return *v }).(IntegrationRuntimeResponseOutput)
}

// Integration runtime description.
func (o IntegrationRuntimeResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Linked service resource type.
type LinkedServiceType struct {
	// Etag identifies change in the resource.
	Etag string `pulumi:"etag"`
	// The resource name.
	Name string `pulumi:"name"`
	// Properties of linked service.
	Properties LinkedServiceResponse `pulumi:"properties"`
	// The resource type.
	Type string `pulumi:"type"`
}

// LinkedServiceTypeInput is an input type that accepts LinkedServiceTypeArgs and LinkedServiceTypeOutput values.
// You can construct a concrete instance of `LinkedServiceTypeInput` via:
//
//          LinkedServiceTypeArgs{...}
type LinkedServiceTypeInput interface {
	pulumi.Input

	ToLinkedServiceTypeOutput() LinkedServiceTypeOutput
	ToLinkedServiceTypeOutputWithContext(context.Context) LinkedServiceTypeOutput
}

// Linked service resource type.
type LinkedServiceTypeArgs struct {
	// Etag identifies change in the resource.
	Etag pulumi.StringInput `pulumi:"etag"`
	// The resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// Properties of linked service.
	Properties LinkedServiceResponseInput `pulumi:"properties"`
	// The resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LinkedServiceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceType)(nil)).Elem()
}

func (i LinkedServiceTypeArgs) ToLinkedServiceTypeOutput() LinkedServiceTypeOutput {
	return i.ToLinkedServiceTypeOutputWithContext(context.Background())
}

func (i LinkedServiceTypeArgs) ToLinkedServiceTypeOutputWithContext(ctx context.Context) LinkedServiceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceTypeOutput)
}

// Linked service resource type.
type LinkedServiceTypeOutput struct{ *pulumi.OutputState }

func (LinkedServiceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceType)(nil)).Elem()
}

func (o LinkedServiceTypeOutput) ToLinkedServiceTypeOutput() LinkedServiceTypeOutput {
	return o
}

func (o LinkedServiceTypeOutput) ToLinkedServiceTypeOutputWithContext(ctx context.Context) LinkedServiceTypeOutput {
	return o
}

// Etag identifies change in the resource.
func (o LinkedServiceTypeOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceType) string { return v.Etag }).(pulumi.StringOutput)
}

// The resource name.
func (o LinkedServiceTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of linked service.
func (o LinkedServiceTypeOutput) Properties() LinkedServiceResponseOutput {
	return o.ApplyT(func(v LinkedServiceType) LinkedServiceResponse { return v.Properties }).(LinkedServiceResponseOutput)
}

// The resource type.
func (o LinkedServiceTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceType) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure Data Factory nested object which contains the information and credential which can be used to connect with related store or compute resource.
type LinkedServiceDefinition struct {
	// List of tags that can be used for describing the linked service.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters *ParameterDefinitionSpecification `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// LinkedServiceDefinitionInput is an input type that accepts LinkedServiceDefinitionArgs and LinkedServiceDefinitionOutput values.
// You can construct a concrete instance of `LinkedServiceDefinitionInput` via:
//
//          LinkedServiceDefinitionArgs{...}
type LinkedServiceDefinitionInput interface {
	pulumi.Input

	ToLinkedServiceDefinitionOutput() LinkedServiceDefinitionOutput
	ToLinkedServiceDefinitionOutputWithContext(context.Context) LinkedServiceDefinitionOutput
}

// The Azure Data Factory nested object which contains the information and credential which can be used to connect with related store or compute resource.
type LinkedServiceDefinitionArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterDefinitionSpecificationPtrInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LinkedServiceDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceDefinition)(nil)).Elem()
}

func (i LinkedServiceDefinitionArgs) ToLinkedServiceDefinitionOutput() LinkedServiceDefinitionOutput {
	return i.ToLinkedServiceDefinitionOutputWithContext(context.Background())
}

func (i LinkedServiceDefinitionArgs) ToLinkedServiceDefinitionOutputWithContext(ctx context.Context) LinkedServiceDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceDefinitionOutput)
}

func (i LinkedServiceDefinitionArgs) ToLinkedServiceDefinitionPtrOutput() LinkedServiceDefinitionPtrOutput {
	return i.ToLinkedServiceDefinitionPtrOutputWithContext(context.Background())
}

func (i LinkedServiceDefinitionArgs) ToLinkedServiceDefinitionPtrOutputWithContext(ctx context.Context) LinkedServiceDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceDefinitionOutput).ToLinkedServiceDefinitionPtrOutputWithContext(ctx)
}

// LinkedServiceDefinitionPtrInput is an input type that accepts LinkedServiceDefinitionArgs, LinkedServiceDefinitionPtr and LinkedServiceDefinitionPtrOutput values.
// You can construct a concrete instance of `LinkedServiceDefinitionPtrInput` via:
//
//          LinkedServiceDefinitionArgs{...}
//
//  or:
//
//          nil
type LinkedServiceDefinitionPtrInput interface {
	pulumi.Input

	ToLinkedServiceDefinitionPtrOutput() LinkedServiceDefinitionPtrOutput
	ToLinkedServiceDefinitionPtrOutputWithContext(context.Context) LinkedServiceDefinitionPtrOutput
}

type linkedServiceDefinitionPtrType LinkedServiceDefinitionArgs

func LinkedServiceDefinitionPtr(v *LinkedServiceDefinitionArgs) LinkedServiceDefinitionPtrInput {
	return (*linkedServiceDefinitionPtrType)(v)
}

func (*linkedServiceDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceDefinition)(nil)).Elem()
}

func (i *linkedServiceDefinitionPtrType) ToLinkedServiceDefinitionPtrOutput() LinkedServiceDefinitionPtrOutput {
	return i.ToLinkedServiceDefinitionPtrOutputWithContext(context.Background())
}

func (i *linkedServiceDefinitionPtrType) ToLinkedServiceDefinitionPtrOutputWithContext(ctx context.Context) LinkedServiceDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceDefinitionPtrOutput)
}

// The Azure Data Factory nested object which contains the information and credential which can be used to connect with related store or compute resource.
type LinkedServiceDefinitionOutput struct{ *pulumi.OutputState }

func (LinkedServiceDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceDefinition)(nil)).Elem()
}

func (o LinkedServiceDefinitionOutput) ToLinkedServiceDefinitionOutput() LinkedServiceDefinitionOutput {
	return o
}

func (o LinkedServiceDefinitionOutput) ToLinkedServiceDefinitionOutputWithContext(ctx context.Context) LinkedServiceDefinitionOutput {
	return o
}

func (o LinkedServiceDefinitionOutput) ToLinkedServiceDefinitionPtrOutput() LinkedServiceDefinitionPtrOutput {
	return o.ToLinkedServiceDefinitionPtrOutputWithContext(context.Background())
}

func (o LinkedServiceDefinitionOutput) ToLinkedServiceDefinitionPtrOutputWithContext(ctx context.Context) LinkedServiceDefinitionPtrOutput {
	return o.ApplyT(func(v LinkedServiceDefinition) *LinkedServiceDefinition {
		return &v
	}).(LinkedServiceDefinitionPtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o LinkedServiceDefinitionOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v LinkedServiceDefinition) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o LinkedServiceDefinitionOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v LinkedServiceDefinition) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o LinkedServiceDefinitionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedServiceDefinition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o LinkedServiceDefinitionOutput) Parameters() ParameterDefinitionSpecificationPtrOutput {
	return o.ApplyT(func(v LinkedServiceDefinition) *ParameterDefinitionSpecification { return v.Parameters }).(ParameterDefinitionSpecificationPtrOutput)
}

// Type of linked service.
func (o LinkedServiceDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceDefinition) string { return v.Type }).(pulumi.StringOutput)
}

type LinkedServiceDefinitionPtrOutput struct{ *pulumi.OutputState }

func (LinkedServiceDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceDefinition)(nil)).Elem()
}

func (o LinkedServiceDefinitionPtrOutput) ToLinkedServiceDefinitionPtrOutput() LinkedServiceDefinitionPtrOutput {
	return o
}

func (o LinkedServiceDefinitionPtrOutput) ToLinkedServiceDefinitionPtrOutputWithContext(ctx context.Context) LinkedServiceDefinitionPtrOutput {
	return o
}

func (o LinkedServiceDefinitionPtrOutput) Elem() LinkedServiceDefinitionOutput {
	return o.ApplyT(func(v *LinkedServiceDefinition) LinkedServiceDefinition { return *v }).(LinkedServiceDefinitionOutput)
}

// List of tags that can be used for describing the linked service.
func (o LinkedServiceDefinitionPtrOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *LinkedServiceDefinition) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o LinkedServiceDefinitionPtrOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v *LinkedServiceDefinition) *IntegrationRuntimeReference {
		if v == nil {
			return nil
		}
		return v.ConnectVia
	}).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o LinkedServiceDefinitionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o LinkedServiceDefinitionPtrOutput) Parameters() ParameterDefinitionSpecificationPtrOutput {
	return o.ApplyT(func(v *LinkedServiceDefinition) *ParameterDefinitionSpecification {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterDefinitionSpecificationPtrOutput)
}

// Type of linked service.
func (o LinkedServiceDefinitionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Linked service reference type.
type LinkedServiceReference struct {
	// Arguments for LinkedService.
	Parameters *ParameterValueSpecification `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName string `pulumi:"referenceName"`
	// Linked service reference type.
	Type string `pulumi:"type"`
}

// LinkedServiceReferenceInput is an input type that accepts LinkedServiceReferenceArgs and LinkedServiceReferenceOutput values.
// You can construct a concrete instance of `LinkedServiceReferenceInput` via:
//
//          LinkedServiceReferenceArgs{...}
type LinkedServiceReferenceInput interface {
	pulumi.Input

	ToLinkedServiceReferenceOutput() LinkedServiceReferenceOutput
	ToLinkedServiceReferenceOutputWithContext(context.Context) LinkedServiceReferenceOutput
}

// Linked service reference type.
type LinkedServiceReferenceArgs struct {
	// Arguments for LinkedService.
	Parameters ParameterValueSpecificationPtrInput `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Linked service reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LinkedServiceReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceReference)(nil)).Elem()
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferenceOutput() LinkedServiceReferenceOutput {
	return i.ToLinkedServiceReferenceOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferenceOutputWithContext(ctx context.Context) LinkedServiceReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceOutput)
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput {
	return i.ToLinkedServiceReferencePtrOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferencePtrOutputWithContext(ctx context.Context) LinkedServiceReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceOutput).ToLinkedServiceReferencePtrOutputWithContext(ctx)
}

// LinkedServiceReferencePtrInput is an input type that accepts LinkedServiceReferenceArgs, LinkedServiceReferencePtr and LinkedServiceReferencePtrOutput values.
// You can construct a concrete instance of `LinkedServiceReferencePtrInput` via:
//
//          LinkedServiceReferenceArgs{...}
//
//  or:
//
//          nil
type LinkedServiceReferencePtrInput interface {
	pulumi.Input

	ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput
	ToLinkedServiceReferencePtrOutputWithContext(context.Context) LinkedServiceReferencePtrOutput
}

type linkedServiceReferencePtrType LinkedServiceReferenceArgs

func LinkedServiceReferencePtr(v *LinkedServiceReferenceArgs) LinkedServiceReferencePtrInput {
	return (*linkedServiceReferencePtrType)(v)
}

func (*linkedServiceReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceReference)(nil)).Elem()
}

func (i *linkedServiceReferencePtrType) ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput {
	return i.ToLinkedServiceReferencePtrOutputWithContext(context.Background())
}

func (i *linkedServiceReferencePtrType) ToLinkedServiceReferencePtrOutputWithContext(ctx context.Context) LinkedServiceReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferencePtrOutput)
}

// Linked service reference type.
type LinkedServiceReferenceOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceReference)(nil)).Elem()
}

func (o LinkedServiceReferenceOutput) ToLinkedServiceReferenceOutput() LinkedServiceReferenceOutput {
	return o
}

func (o LinkedServiceReferenceOutput) ToLinkedServiceReferenceOutputWithContext(ctx context.Context) LinkedServiceReferenceOutput {
	return o
}

func (o LinkedServiceReferenceOutput) ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput {
	return o.ToLinkedServiceReferencePtrOutputWithContext(context.Background())
}

func (o LinkedServiceReferenceOutput) ToLinkedServiceReferencePtrOutputWithContext(ctx context.Context) LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v LinkedServiceReference) *LinkedServiceReference {
		return &v
	}).(LinkedServiceReferencePtrOutput)
}

// Arguments for LinkedService.
func (o LinkedServiceReferenceOutput) Parameters() ParameterValueSpecificationPtrOutput {
	return o.ApplyT(func(v LinkedServiceReference) *ParameterValueSpecification { return v.Parameters }).(ParameterValueSpecificationPtrOutput)
}

// Reference LinkedService name.
func (o LinkedServiceReferenceOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceReference) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Linked service reference type.
func (o LinkedServiceReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceReference) string { return v.Type }).(pulumi.StringOutput)
}

type LinkedServiceReferencePtrOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceReference)(nil)).Elem()
}

func (o LinkedServiceReferencePtrOutput) ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput {
	return o
}

func (o LinkedServiceReferencePtrOutput) ToLinkedServiceReferencePtrOutputWithContext(ctx context.Context) LinkedServiceReferencePtrOutput {
	return o
}

func (o LinkedServiceReferencePtrOutput) Elem() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v *LinkedServiceReference) LinkedServiceReference { return *v }).(LinkedServiceReferenceOutput)
}

// Arguments for LinkedService.
func (o LinkedServiceReferencePtrOutput) Parameters() ParameterValueSpecificationPtrOutput {
	return o.ApplyT(func(v *LinkedServiceReference) *ParameterValueSpecification {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterValueSpecificationPtrOutput)
}

// Reference LinkedService name.
func (o LinkedServiceReferencePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Linked service reference type.
func (o LinkedServiceReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceReference) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Linked service reference type.
type LinkedServiceReferenceResponse struct {
	// Arguments for LinkedService.
	Parameters *ParameterValueSpecificationResponse `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName string `pulumi:"referenceName"`
	// Linked service reference type.
	Type string `pulumi:"type"`
}

// LinkedServiceReferenceResponseInput is an input type that accepts LinkedServiceReferenceResponseArgs and LinkedServiceReferenceResponseOutput values.
// You can construct a concrete instance of `LinkedServiceReferenceResponseInput` via:
//
//          LinkedServiceReferenceResponseArgs{...}
type LinkedServiceReferenceResponseInput interface {
	pulumi.Input

	ToLinkedServiceReferenceResponseOutput() LinkedServiceReferenceResponseOutput
	ToLinkedServiceReferenceResponseOutputWithContext(context.Context) LinkedServiceReferenceResponseOutput
}

// Linked service reference type.
type LinkedServiceReferenceResponseArgs struct {
	// Arguments for LinkedService.
	Parameters ParameterValueSpecificationResponsePtrInput `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Linked service reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LinkedServiceReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceReferenceResponse)(nil)).Elem()
}

func (i LinkedServiceReferenceResponseArgs) ToLinkedServiceReferenceResponseOutput() LinkedServiceReferenceResponseOutput {
	return i.ToLinkedServiceReferenceResponseOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceResponseArgs) ToLinkedServiceReferenceResponseOutputWithContext(ctx context.Context) LinkedServiceReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceResponseOutput)
}

func (i LinkedServiceReferenceResponseArgs) ToLinkedServiceReferenceResponsePtrOutput() LinkedServiceReferenceResponsePtrOutput {
	return i.ToLinkedServiceReferenceResponsePtrOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceResponseArgs) ToLinkedServiceReferenceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceResponseOutput).ToLinkedServiceReferenceResponsePtrOutputWithContext(ctx)
}

// LinkedServiceReferenceResponsePtrInput is an input type that accepts LinkedServiceReferenceResponseArgs, LinkedServiceReferenceResponsePtr and LinkedServiceReferenceResponsePtrOutput values.
// You can construct a concrete instance of `LinkedServiceReferenceResponsePtrInput` via:
//
//          LinkedServiceReferenceResponseArgs{...}
//
//  or:
//
//          nil
type LinkedServiceReferenceResponsePtrInput interface {
	pulumi.Input

	ToLinkedServiceReferenceResponsePtrOutput() LinkedServiceReferenceResponsePtrOutput
	ToLinkedServiceReferenceResponsePtrOutputWithContext(context.Context) LinkedServiceReferenceResponsePtrOutput
}

type linkedServiceReferenceResponsePtrType LinkedServiceReferenceResponseArgs

func LinkedServiceReferenceResponsePtr(v *LinkedServiceReferenceResponseArgs) LinkedServiceReferenceResponsePtrInput {
	return (*linkedServiceReferenceResponsePtrType)(v)
}

func (*linkedServiceReferenceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceReferenceResponse)(nil)).Elem()
}

func (i *linkedServiceReferenceResponsePtrType) ToLinkedServiceReferenceResponsePtrOutput() LinkedServiceReferenceResponsePtrOutput {
	return i.ToLinkedServiceReferenceResponsePtrOutputWithContext(context.Background())
}

func (i *linkedServiceReferenceResponsePtrType) ToLinkedServiceReferenceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceReferenceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceResponsePtrOutput)
}

// Linked service reference type.
type LinkedServiceReferenceResponseOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceReferenceResponse)(nil)).Elem()
}

func (o LinkedServiceReferenceResponseOutput) ToLinkedServiceReferenceResponseOutput() LinkedServiceReferenceResponseOutput {
	return o
}

func (o LinkedServiceReferenceResponseOutput) ToLinkedServiceReferenceResponseOutputWithContext(ctx context.Context) LinkedServiceReferenceResponseOutput {
	return o
}

func (o LinkedServiceReferenceResponseOutput) ToLinkedServiceReferenceResponsePtrOutput() LinkedServiceReferenceResponsePtrOutput {
	return o.ToLinkedServiceReferenceResponsePtrOutputWithContext(context.Background())
}

func (o LinkedServiceReferenceResponseOutput) ToLinkedServiceReferenceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v LinkedServiceReferenceResponse) *LinkedServiceReferenceResponse {
		return &v
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Arguments for LinkedService.
func (o LinkedServiceReferenceResponseOutput) Parameters() ParameterValueSpecificationResponsePtrOutput {
	return o.ApplyT(func(v LinkedServiceReferenceResponse) *ParameterValueSpecificationResponse { return v.Parameters }).(ParameterValueSpecificationResponsePtrOutput)
}

// Reference LinkedService name.
func (o LinkedServiceReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Linked service reference type.
func (o LinkedServiceReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type LinkedServiceReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceReferenceResponse)(nil)).Elem()
}

func (o LinkedServiceReferenceResponsePtrOutput) ToLinkedServiceReferenceResponsePtrOutput() LinkedServiceReferenceResponsePtrOutput {
	return o
}

func (o LinkedServiceReferenceResponsePtrOutput) ToLinkedServiceReferenceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceReferenceResponsePtrOutput {
	return o
}

func (o LinkedServiceReferenceResponsePtrOutput) Elem() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) LinkedServiceReferenceResponse { return *v }).(LinkedServiceReferenceResponseOutput)
}

// Arguments for LinkedService.
func (o LinkedServiceReferenceResponsePtrOutput) Parameters() ParameterValueSpecificationResponsePtrOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) *ParameterValueSpecificationResponse {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterValueSpecificationResponsePtrOutput)
}

// Reference LinkedService name.
func (o LinkedServiceReferenceResponsePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Linked service reference type.
func (o LinkedServiceReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The Azure Data Factory nested object which contains the information and credential which can be used to connect with related store or compute resource.
type LinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters *ParameterDefinitionSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	Type string `pulumi:"type"`
}

// LinkedServiceResponseInput is an input type that accepts LinkedServiceResponseArgs and LinkedServiceResponseOutput values.
// You can construct a concrete instance of `LinkedServiceResponseInput` via:
//
//          LinkedServiceResponseArgs{...}
type LinkedServiceResponseInput interface {
	pulumi.Input

	ToLinkedServiceResponseOutput() LinkedServiceResponseOutput
	ToLinkedServiceResponseOutputWithContext(context.Context) LinkedServiceResponseOutput
}

// The Azure Data Factory nested object which contains the information and credential which can be used to connect with related store or compute resource.
type LinkedServiceResponseArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponsePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterDefinitionSpecificationResponsePtrInput `pulumi:"parameters"`
	// Type of linked service.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LinkedServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceResponse)(nil)).Elem()
}

func (i LinkedServiceResponseArgs) ToLinkedServiceResponseOutput() LinkedServiceResponseOutput {
	return i.ToLinkedServiceResponseOutputWithContext(context.Background())
}

func (i LinkedServiceResponseArgs) ToLinkedServiceResponseOutputWithContext(ctx context.Context) LinkedServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceResponseOutput)
}

func (i LinkedServiceResponseArgs) ToLinkedServiceResponsePtrOutput() LinkedServiceResponsePtrOutput {
	return i.ToLinkedServiceResponsePtrOutputWithContext(context.Background())
}

func (i LinkedServiceResponseArgs) ToLinkedServiceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceResponseOutput).ToLinkedServiceResponsePtrOutputWithContext(ctx)
}

// LinkedServiceResponsePtrInput is an input type that accepts LinkedServiceResponseArgs, LinkedServiceResponsePtr and LinkedServiceResponsePtrOutput values.
// You can construct a concrete instance of `LinkedServiceResponsePtrInput` via:
//
//          LinkedServiceResponseArgs{...}
//
//  or:
//
//          nil
type LinkedServiceResponsePtrInput interface {
	pulumi.Input

	ToLinkedServiceResponsePtrOutput() LinkedServiceResponsePtrOutput
	ToLinkedServiceResponsePtrOutputWithContext(context.Context) LinkedServiceResponsePtrOutput
}

type linkedServiceResponsePtrType LinkedServiceResponseArgs

func LinkedServiceResponsePtr(v *LinkedServiceResponseArgs) LinkedServiceResponsePtrInput {
	return (*linkedServiceResponsePtrType)(v)
}

func (*linkedServiceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceResponse)(nil)).Elem()
}

func (i *linkedServiceResponsePtrType) ToLinkedServiceResponsePtrOutput() LinkedServiceResponsePtrOutput {
	return i.ToLinkedServiceResponsePtrOutputWithContext(context.Background())
}

func (i *linkedServiceResponsePtrType) ToLinkedServiceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceResponsePtrOutput)
}

// The Azure Data Factory nested object which contains the information and credential which can be used to connect with related store or compute resource.
type LinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (LinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceResponse)(nil)).Elem()
}

func (o LinkedServiceResponseOutput) ToLinkedServiceResponseOutput() LinkedServiceResponseOutput {
	return o
}

func (o LinkedServiceResponseOutput) ToLinkedServiceResponseOutputWithContext(ctx context.Context) LinkedServiceResponseOutput {
	return o
}

func (o LinkedServiceResponseOutput) ToLinkedServiceResponsePtrOutput() LinkedServiceResponsePtrOutput {
	return o.ToLinkedServiceResponsePtrOutputWithContext(context.Background())
}

func (o LinkedServiceResponseOutput) ToLinkedServiceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceResponsePtrOutput {
	return o.ApplyT(func(v LinkedServiceResponse) *LinkedServiceResponse {
		return &v
	}).(LinkedServiceResponsePtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o LinkedServiceResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v LinkedServiceResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o LinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v LinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o LinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o LinkedServiceResponseOutput) Parameters() ParameterDefinitionSpecificationResponsePtrOutput {
	return o.ApplyT(func(v LinkedServiceResponse) *ParameterDefinitionSpecificationResponse { return v.Parameters }).(ParameterDefinitionSpecificationResponsePtrOutput)
}

// Type of linked service.
func (o LinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type LinkedServiceResponsePtrOutput struct{ *pulumi.OutputState }

func (LinkedServiceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceResponse)(nil)).Elem()
}

func (o LinkedServiceResponsePtrOutput) ToLinkedServiceResponsePtrOutput() LinkedServiceResponsePtrOutput {
	return o
}

func (o LinkedServiceResponsePtrOutput) ToLinkedServiceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceResponsePtrOutput {
	return o
}

func (o LinkedServiceResponsePtrOutput) Elem() LinkedServiceResponseOutput {
	return o.ApplyT(func(v *LinkedServiceResponse) LinkedServiceResponse { return *v }).(LinkedServiceResponseOutput)
}

// List of tags that can be used for describing the linked service.
func (o LinkedServiceResponsePtrOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *LinkedServiceResponse) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.MapArrayOutput)
}

// The integration runtime reference.
func (o LinkedServiceResponsePtrOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v *LinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		if v == nil {
			return nil
		}
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o LinkedServiceResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o LinkedServiceResponsePtrOutput) Parameters() ParameterDefinitionSpecificationResponsePtrOutput {
	return o.ApplyT(func(v *LinkedServiceResponse) *ParameterDefinitionSpecificationResponse {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterDefinitionSpecificationResponsePtrOutput)
}

// Type of linked service.
func (o LinkedServiceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Definition of all parameters for an entity.
type ParameterDefinitionSpecification struct {
}

// ParameterDefinitionSpecificationInput is an input type that accepts ParameterDefinitionSpecificationArgs and ParameterDefinitionSpecificationOutput values.
// You can construct a concrete instance of `ParameterDefinitionSpecificationInput` via:
//
//          ParameterDefinitionSpecificationArgs{...}
type ParameterDefinitionSpecificationInput interface {
	pulumi.Input

	ToParameterDefinitionSpecificationOutput() ParameterDefinitionSpecificationOutput
	ToParameterDefinitionSpecificationOutputWithContext(context.Context) ParameterDefinitionSpecificationOutput
}

// Definition of all parameters for an entity.
type ParameterDefinitionSpecificationArgs struct {
}

func (ParameterDefinitionSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionSpecification)(nil)).Elem()
}

func (i ParameterDefinitionSpecificationArgs) ToParameterDefinitionSpecificationOutput() ParameterDefinitionSpecificationOutput {
	return i.ToParameterDefinitionSpecificationOutputWithContext(context.Background())
}

func (i ParameterDefinitionSpecificationArgs) ToParameterDefinitionSpecificationOutputWithContext(ctx context.Context) ParameterDefinitionSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionSpecificationOutput)
}

func (i ParameterDefinitionSpecificationArgs) ToParameterDefinitionSpecificationPtrOutput() ParameterDefinitionSpecificationPtrOutput {
	return i.ToParameterDefinitionSpecificationPtrOutputWithContext(context.Background())
}

func (i ParameterDefinitionSpecificationArgs) ToParameterDefinitionSpecificationPtrOutputWithContext(ctx context.Context) ParameterDefinitionSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionSpecificationOutput).ToParameterDefinitionSpecificationPtrOutputWithContext(ctx)
}

// ParameterDefinitionSpecificationPtrInput is an input type that accepts ParameterDefinitionSpecificationArgs, ParameterDefinitionSpecificationPtr and ParameterDefinitionSpecificationPtrOutput values.
// You can construct a concrete instance of `ParameterDefinitionSpecificationPtrInput` via:
//
//          ParameterDefinitionSpecificationArgs{...}
//
//  or:
//
//          nil
type ParameterDefinitionSpecificationPtrInput interface {
	pulumi.Input

	ToParameterDefinitionSpecificationPtrOutput() ParameterDefinitionSpecificationPtrOutput
	ToParameterDefinitionSpecificationPtrOutputWithContext(context.Context) ParameterDefinitionSpecificationPtrOutput
}

type parameterDefinitionSpecificationPtrType ParameterDefinitionSpecificationArgs

func ParameterDefinitionSpecificationPtr(v *ParameterDefinitionSpecificationArgs) ParameterDefinitionSpecificationPtrInput {
	return (*parameterDefinitionSpecificationPtrType)(v)
}

func (*parameterDefinitionSpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitionSpecification)(nil)).Elem()
}

func (i *parameterDefinitionSpecificationPtrType) ToParameterDefinitionSpecificationPtrOutput() ParameterDefinitionSpecificationPtrOutput {
	return i.ToParameterDefinitionSpecificationPtrOutputWithContext(context.Background())
}

func (i *parameterDefinitionSpecificationPtrType) ToParameterDefinitionSpecificationPtrOutputWithContext(ctx context.Context) ParameterDefinitionSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionSpecificationPtrOutput)
}

// Definition of all parameters for an entity.
type ParameterDefinitionSpecificationOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionSpecification)(nil)).Elem()
}

func (o ParameterDefinitionSpecificationOutput) ToParameterDefinitionSpecificationOutput() ParameterDefinitionSpecificationOutput {
	return o
}

func (o ParameterDefinitionSpecificationOutput) ToParameterDefinitionSpecificationOutputWithContext(ctx context.Context) ParameterDefinitionSpecificationOutput {
	return o
}

func (o ParameterDefinitionSpecificationOutput) ToParameterDefinitionSpecificationPtrOutput() ParameterDefinitionSpecificationPtrOutput {
	return o.ToParameterDefinitionSpecificationPtrOutputWithContext(context.Background())
}

func (o ParameterDefinitionSpecificationOutput) ToParameterDefinitionSpecificationPtrOutputWithContext(ctx context.Context) ParameterDefinitionSpecificationPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionSpecification) *ParameterDefinitionSpecification {
		return &v
	}).(ParameterDefinitionSpecificationPtrOutput)
}

type ParameterDefinitionSpecificationPtrOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionSpecificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitionSpecification)(nil)).Elem()
}

func (o ParameterDefinitionSpecificationPtrOutput) ToParameterDefinitionSpecificationPtrOutput() ParameterDefinitionSpecificationPtrOutput {
	return o
}

func (o ParameterDefinitionSpecificationPtrOutput) ToParameterDefinitionSpecificationPtrOutputWithContext(ctx context.Context) ParameterDefinitionSpecificationPtrOutput {
	return o
}

func (o ParameterDefinitionSpecificationPtrOutput) Elem() ParameterDefinitionSpecificationOutput {
	return o.ApplyT(func(v *ParameterDefinitionSpecification) ParameterDefinitionSpecification { return *v }).(ParameterDefinitionSpecificationOutput)
}

// Definition of all parameters for an entity.
type ParameterDefinitionSpecificationResponse struct {
}

// ParameterDefinitionSpecificationResponseInput is an input type that accepts ParameterDefinitionSpecificationResponseArgs and ParameterDefinitionSpecificationResponseOutput values.
// You can construct a concrete instance of `ParameterDefinitionSpecificationResponseInput` via:
//
//          ParameterDefinitionSpecificationResponseArgs{...}
type ParameterDefinitionSpecificationResponseInput interface {
	pulumi.Input

	ToParameterDefinitionSpecificationResponseOutput() ParameterDefinitionSpecificationResponseOutput
	ToParameterDefinitionSpecificationResponseOutputWithContext(context.Context) ParameterDefinitionSpecificationResponseOutput
}

// Definition of all parameters for an entity.
type ParameterDefinitionSpecificationResponseArgs struct {
}

func (ParameterDefinitionSpecificationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionSpecificationResponse)(nil)).Elem()
}

func (i ParameterDefinitionSpecificationResponseArgs) ToParameterDefinitionSpecificationResponseOutput() ParameterDefinitionSpecificationResponseOutput {
	return i.ToParameterDefinitionSpecificationResponseOutputWithContext(context.Background())
}

func (i ParameterDefinitionSpecificationResponseArgs) ToParameterDefinitionSpecificationResponseOutputWithContext(ctx context.Context) ParameterDefinitionSpecificationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionSpecificationResponseOutput)
}

func (i ParameterDefinitionSpecificationResponseArgs) ToParameterDefinitionSpecificationResponsePtrOutput() ParameterDefinitionSpecificationResponsePtrOutput {
	return i.ToParameterDefinitionSpecificationResponsePtrOutputWithContext(context.Background())
}

func (i ParameterDefinitionSpecificationResponseArgs) ToParameterDefinitionSpecificationResponsePtrOutputWithContext(ctx context.Context) ParameterDefinitionSpecificationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionSpecificationResponseOutput).ToParameterDefinitionSpecificationResponsePtrOutputWithContext(ctx)
}

// ParameterDefinitionSpecificationResponsePtrInput is an input type that accepts ParameterDefinitionSpecificationResponseArgs, ParameterDefinitionSpecificationResponsePtr and ParameterDefinitionSpecificationResponsePtrOutput values.
// You can construct a concrete instance of `ParameterDefinitionSpecificationResponsePtrInput` via:
//
//          ParameterDefinitionSpecificationResponseArgs{...}
//
//  or:
//
//          nil
type ParameterDefinitionSpecificationResponsePtrInput interface {
	pulumi.Input

	ToParameterDefinitionSpecificationResponsePtrOutput() ParameterDefinitionSpecificationResponsePtrOutput
	ToParameterDefinitionSpecificationResponsePtrOutputWithContext(context.Context) ParameterDefinitionSpecificationResponsePtrOutput
}

type parameterDefinitionSpecificationResponsePtrType ParameterDefinitionSpecificationResponseArgs

func ParameterDefinitionSpecificationResponsePtr(v *ParameterDefinitionSpecificationResponseArgs) ParameterDefinitionSpecificationResponsePtrInput {
	return (*parameterDefinitionSpecificationResponsePtrType)(v)
}

func (*parameterDefinitionSpecificationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitionSpecificationResponse)(nil)).Elem()
}

func (i *parameterDefinitionSpecificationResponsePtrType) ToParameterDefinitionSpecificationResponsePtrOutput() ParameterDefinitionSpecificationResponsePtrOutput {
	return i.ToParameterDefinitionSpecificationResponsePtrOutputWithContext(context.Background())
}

func (i *parameterDefinitionSpecificationResponsePtrType) ToParameterDefinitionSpecificationResponsePtrOutputWithContext(ctx context.Context) ParameterDefinitionSpecificationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionSpecificationResponsePtrOutput)
}

// Definition of all parameters for an entity.
type ParameterDefinitionSpecificationResponseOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionSpecificationResponse)(nil)).Elem()
}

func (o ParameterDefinitionSpecificationResponseOutput) ToParameterDefinitionSpecificationResponseOutput() ParameterDefinitionSpecificationResponseOutput {
	return o
}

func (o ParameterDefinitionSpecificationResponseOutput) ToParameterDefinitionSpecificationResponseOutputWithContext(ctx context.Context) ParameterDefinitionSpecificationResponseOutput {
	return o
}

func (o ParameterDefinitionSpecificationResponseOutput) ToParameterDefinitionSpecificationResponsePtrOutput() ParameterDefinitionSpecificationResponsePtrOutput {
	return o.ToParameterDefinitionSpecificationResponsePtrOutputWithContext(context.Background())
}

func (o ParameterDefinitionSpecificationResponseOutput) ToParameterDefinitionSpecificationResponsePtrOutputWithContext(ctx context.Context) ParameterDefinitionSpecificationResponsePtrOutput {
	return o.ApplyT(func(v ParameterDefinitionSpecificationResponse) *ParameterDefinitionSpecificationResponse {
		return &v
	}).(ParameterDefinitionSpecificationResponsePtrOutput)
}

type ParameterDefinitionSpecificationResponsePtrOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionSpecificationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitionSpecificationResponse)(nil)).Elem()
}

func (o ParameterDefinitionSpecificationResponsePtrOutput) ToParameterDefinitionSpecificationResponsePtrOutput() ParameterDefinitionSpecificationResponsePtrOutput {
	return o
}

func (o ParameterDefinitionSpecificationResponsePtrOutput) ToParameterDefinitionSpecificationResponsePtrOutputWithContext(ctx context.Context) ParameterDefinitionSpecificationResponsePtrOutput {
	return o
}

func (o ParameterDefinitionSpecificationResponsePtrOutput) Elem() ParameterDefinitionSpecificationResponseOutput {
	return o.ApplyT(func(v *ParameterDefinitionSpecificationResponse) ParameterDefinitionSpecificationResponse { return *v }).(ParameterDefinitionSpecificationResponseOutput)
}

// An object mapping parameter names to argument values.
type ParameterValueSpecification struct {
}

// ParameterValueSpecificationInput is an input type that accepts ParameterValueSpecificationArgs and ParameterValueSpecificationOutput values.
// You can construct a concrete instance of `ParameterValueSpecificationInput` via:
//
//          ParameterValueSpecificationArgs{...}
type ParameterValueSpecificationInput interface {
	pulumi.Input

	ToParameterValueSpecificationOutput() ParameterValueSpecificationOutput
	ToParameterValueSpecificationOutputWithContext(context.Context) ParameterValueSpecificationOutput
}

// An object mapping parameter names to argument values.
type ParameterValueSpecificationArgs struct {
}

func (ParameterValueSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValueSpecification)(nil)).Elem()
}

func (i ParameterValueSpecificationArgs) ToParameterValueSpecificationOutput() ParameterValueSpecificationOutput {
	return i.ToParameterValueSpecificationOutputWithContext(context.Background())
}

func (i ParameterValueSpecificationArgs) ToParameterValueSpecificationOutputWithContext(ctx context.Context) ParameterValueSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValueSpecificationOutput)
}

func (i ParameterValueSpecificationArgs) ToParameterValueSpecificationPtrOutput() ParameterValueSpecificationPtrOutput {
	return i.ToParameterValueSpecificationPtrOutputWithContext(context.Background())
}

func (i ParameterValueSpecificationArgs) ToParameterValueSpecificationPtrOutputWithContext(ctx context.Context) ParameterValueSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValueSpecificationOutput).ToParameterValueSpecificationPtrOutputWithContext(ctx)
}

// ParameterValueSpecificationPtrInput is an input type that accepts ParameterValueSpecificationArgs, ParameterValueSpecificationPtr and ParameterValueSpecificationPtrOutput values.
// You can construct a concrete instance of `ParameterValueSpecificationPtrInput` via:
//
//          ParameterValueSpecificationArgs{...}
//
//  or:
//
//          nil
type ParameterValueSpecificationPtrInput interface {
	pulumi.Input

	ToParameterValueSpecificationPtrOutput() ParameterValueSpecificationPtrOutput
	ToParameterValueSpecificationPtrOutputWithContext(context.Context) ParameterValueSpecificationPtrOutput
}

type parameterValueSpecificationPtrType ParameterValueSpecificationArgs

func ParameterValueSpecificationPtr(v *ParameterValueSpecificationArgs) ParameterValueSpecificationPtrInput {
	return (*parameterValueSpecificationPtrType)(v)
}

func (*parameterValueSpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterValueSpecification)(nil)).Elem()
}

func (i *parameterValueSpecificationPtrType) ToParameterValueSpecificationPtrOutput() ParameterValueSpecificationPtrOutput {
	return i.ToParameterValueSpecificationPtrOutputWithContext(context.Background())
}

func (i *parameterValueSpecificationPtrType) ToParameterValueSpecificationPtrOutputWithContext(ctx context.Context) ParameterValueSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValueSpecificationPtrOutput)
}

// An object mapping parameter names to argument values.
type ParameterValueSpecificationOutput struct{ *pulumi.OutputState }

func (ParameterValueSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValueSpecification)(nil)).Elem()
}

func (o ParameterValueSpecificationOutput) ToParameterValueSpecificationOutput() ParameterValueSpecificationOutput {
	return o
}

func (o ParameterValueSpecificationOutput) ToParameterValueSpecificationOutputWithContext(ctx context.Context) ParameterValueSpecificationOutput {
	return o
}

func (o ParameterValueSpecificationOutput) ToParameterValueSpecificationPtrOutput() ParameterValueSpecificationPtrOutput {
	return o.ToParameterValueSpecificationPtrOutputWithContext(context.Background())
}

func (o ParameterValueSpecificationOutput) ToParameterValueSpecificationPtrOutputWithContext(ctx context.Context) ParameterValueSpecificationPtrOutput {
	return o.ApplyT(func(v ParameterValueSpecification) *ParameterValueSpecification {
		return &v
	}).(ParameterValueSpecificationPtrOutput)
}

type ParameterValueSpecificationPtrOutput struct{ *pulumi.OutputState }

func (ParameterValueSpecificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterValueSpecification)(nil)).Elem()
}

func (o ParameterValueSpecificationPtrOutput) ToParameterValueSpecificationPtrOutput() ParameterValueSpecificationPtrOutput {
	return o
}

func (o ParameterValueSpecificationPtrOutput) ToParameterValueSpecificationPtrOutputWithContext(ctx context.Context) ParameterValueSpecificationPtrOutput {
	return o
}

func (o ParameterValueSpecificationPtrOutput) Elem() ParameterValueSpecificationOutput {
	return o.ApplyT(func(v *ParameterValueSpecification) ParameterValueSpecification { return *v }).(ParameterValueSpecificationOutput)
}

// An object mapping parameter names to argument values.
type ParameterValueSpecificationResponse struct {
}

// ParameterValueSpecificationResponseInput is an input type that accepts ParameterValueSpecificationResponseArgs and ParameterValueSpecificationResponseOutput values.
// You can construct a concrete instance of `ParameterValueSpecificationResponseInput` via:
//
//          ParameterValueSpecificationResponseArgs{...}
type ParameterValueSpecificationResponseInput interface {
	pulumi.Input

	ToParameterValueSpecificationResponseOutput() ParameterValueSpecificationResponseOutput
	ToParameterValueSpecificationResponseOutputWithContext(context.Context) ParameterValueSpecificationResponseOutput
}

// An object mapping parameter names to argument values.
type ParameterValueSpecificationResponseArgs struct {
}

func (ParameterValueSpecificationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValueSpecificationResponse)(nil)).Elem()
}

func (i ParameterValueSpecificationResponseArgs) ToParameterValueSpecificationResponseOutput() ParameterValueSpecificationResponseOutput {
	return i.ToParameterValueSpecificationResponseOutputWithContext(context.Background())
}

func (i ParameterValueSpecificationResponseArgs) ToParameterValueSpecificationResponseOutputWithContext(ctx context.Context) ParameterValueSpecificationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValueSpecificationResponseOutput)
}

func (i ParameterValueSpecificationResponseArgs) ToParameterValueSpecificationResponsePtrOutput() ParameterValueSpecificationResponsePtrOutput {
	return i.ToParameterValueSpecificationResponsePtrOutputWithContext(context.Background())
}

func (i ParameterValueSpecificationResponseArgs) ToParameterValueSpecificationResponsePtrOutputWithContext(ctx context.Context) ParameterValueSpecificationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValueSpecificationResponseOutput).ToParameterValueSpecificationResponsePtrOutputWithContext(ctx)
}

// ParameterValueSpecificationResponsePtrInput is an input type that accepts ParameterValueSpecificationResponseArgs, ParameterValueSpecificationResponsePtr and ParameterValueSpecificationResponsePtrOutput values.
// You can construct a concrete instance of `ParameterValueSpecificationResponsePtrInput` via:
//
//          ParameterValueSpecificationResponseArgs{...}
//
//  or:
//
//          nil
type ParameterValueSpecificationResponsePtrInput interface {
	pulumi.Input

	ToParameterValueSpecificationResponsePtrOutput() ParameterValueSpecificationResponsePtrOutput
	ToParameterValueSpecificationResponsePtrOutputWithContext(context.Context) ParameterValueSpecificationResponsePtrOutput
}

type parameterValueSpecificationResponsePtrType ParameterValueSpecificationResponseArgs

func ParameterValueSpecificationResponsePtr(v *ParameterValueSpecificationResponseArgs) ParameterValueSpecificationResponsePtrInput {
	return (*parameterValueSpecificationResponsePtrType)(v)
}

func (*parameterValueSpecificationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterValueSpecificationResponse)(nil)).Elem()
}

func (i *parameterValueSpecificationResponsePtrType) ToParameterValueSpecificationResponsePtrOutput() ParameterValueSpecificationResponsePtrOutput {
	return i.ToParameterValueSpecificationResponsePtrOutputWithContext(context.Background())
}

func (i *parameterValueSpecificationResponsePtrType) ToParameterValueSpecificationResponsePtrOutputWithContext(ctx context.Context) ParameterValueSpecificationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValueSpecificationResponsePtrOutput)
}

// An object mapping parameter names to argument values.
type ParameterValueSpecificationResponseOutput struct{ *pulumi.OutputState }

func (ParameterValueSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValueSpecificationResponse)(nil)).Elem()
}

func (o ParameterValueSpecificationResponseOutput) ToParameterValueSpecificationResponseOutput() ParameterValueSpecificationResponseOutput {
	return o
}

func (o ParameterValueSpecificationResponseOutput) ToParameterValueSpecificationResponseOutputWithContext(ctx context.Context) ParameterValueSpecificationResponseOutput {
	return o
}

func (o ParameterValueSpecificationResponseOutput) ToParameterValueSpecificationResponsePtrOutput() ParameterValueSpecificationResponsePtrOutput {
	return o.ToParameterValueSpecificationResponsePtrOutputWithContext(context.Background())
}

func (o ParameterValueSpecificationResponseOutput) ToParameterValueSpecificationResponsePtrOutputWithContext(ctx context.Context) ParameterValueSpecificationResponsePtrOutput {
	return o.ApplyT(func(v ParameterValueSpecificationResponse) *ParameterValueSpecificationResponse {
		return &v
	}).(ParameterValueSpecificationResponsePtrOutput)
}

type ParameterValueSpecificationResponsePtrOutput struct{ *pulumi.OutputState }

func (ParameterValueSpecificationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterValueSpecificationResponse)(nil)).Elem()
}

func (o ParameterValueSpecificationResponsePtrOutput) ToParameterValueSpecificationResponsePtrOutput() ParameterValueSpecificationResponsePtrOutput {
	return o
}

func (o ParameterValueSpecificationResponsePtrOutput) ToParameterValueSpecificationResponsePtrOutputWithContext(ctx context.Context) ParameterValueSpecificationResponsePtrOutput {
	return o
}

func (o ParameterValueSpecificationResponsePtrOutput) Elem() ParameterValueSpecificationResponseOutput {
	return o.ApplyT(func(v *ParameterValueSpecificationResponse) ParameterValueSpecificationResponse { return *v }).(ParameterValueSpecificationResponseOutput)
}

// Pipeline resource type.
type PipelineType struct {
	// Etag identifies change in the resource.
	Etag string `pulumi:"etag"`
	// The resource name.
	Name string `pulumi:"name"`
	// Properties of the pipeline.
	Properties PipelineResponse `pulumi:"properties"`
	// The resource type.
	Type string `pulumi:"type"`
}

// PipelineTypeInput is an input type that accepts PipelineTypeArgs and PipelineTypeOutput values.
// You can construct a concrete instance of `PipelineTypeInput` via:
//
//          PipelineTypeArgs{...}
type PipelineTypeInput interface {
	pulumi.Input

	ToPipelineTypeOutput() PipelineTypeOutput
	ToPipelineTypeOutputWithContext(context.Context) PipelineTypeOutput
}

// Pipeline resource type.
type PipelineTypeArgs struct {
	// Etag identifies change in the resource.
	Etag pulumi.StringInput `pulumi:"etag"`
	// The resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// Properties of the pipeline.
	Properties PipelineResponseInput `pulumi:"properties"`
	// The resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PipelineTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineType)(nil)).Elem()
}

func (i PipelineTypeArgs) ToPipelineTypeOutput() PipelineTypeOutput {
	return i.ToPipelineTypeOutputWithContext(context.Background())
}

func (i PipelineTypeArgs) ToPipelineTypeOutputWithContext(ctx context.Context) PipelineTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineTypeOutput)
}

// Pipeline resource type.
type PipelineTypeOutput struct{ *pulumi.OutputState }

func (PipelineTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineType)(nil)).Elem()
}

func (o PipelineTypeOutput) ToPipelineTypeOutput() PipelineTypeOutput {
	return o
}

func (o PipelineTypeOutput) ToPipelineTypeOutputWithContext(ctx context.Context) PipelineTypeOutput {
	return o
}

// Etag identifies change in the resource.
func (o PipelineTypeOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineType) string { return v.Etag }).(pulumi.StringOutput)
}

// The resource name.
func (o PipelineTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of the pipeline.
func (o PipelineTypeOutput) Properties() PipelineResponseOutput {
	return o.ApplyT(func(v PipelineType) PipelineResponse { return v.Properties }).(PipelineResponseOutput)
}

// The resource type.
func (o PipelineTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineType) string { return v.Type }).(pulumi.StringOutput)
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineProperties struct {
	// The name of the folder that this Pipeline is in.
	Name *string `pulumi:"name"`
}

// PipelinePropertiesInput is an input type that accepts PipelinePropertiesArgs and PipelinePropertiesOutput values.
// You can construct a concrete instance of `PipelinePropertiesInput` via:
//
//          PipelinePropertiesArgs{...}
type PipelinePropertiesInput interface {
	pulumi.Input

	ToPipelinePropertiesOutput() PipelinePropertiesOutput
	ToPipelinePropertiesOutputWithContext(context.Context) PipelinePropertiesOutput
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelinePropertiesArgs struct {
	// The name of the folder that this Pipeline is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PipelinePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineProperties)(nil)).Elem()
}

func (i PipelinePropertiesArgs) ToPipelinePropertiesOutput() PipelinePropertiesOutput {
	return i.ToPipelinePropertiesOutputWithContext(context.Background())
}

func (i PipelinePropertiesArgs) ToPipelinePropertiesOutputWithContext(ctx context.Context) PipelinePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelinePropertiesOutput)
}

func (i PipelinePropertiesArgs) ToPipelinePropertiesPtrOutput() PipelinePropertiesPtrOutput {
	return i.ToPipelinePropertiesPtrOutputWithContext(context.Background())
}

func (i PipelinePropertiesArgs) ToPipelinePropertiesPtrOutputWithContext(ctx context.Context) PipelinePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelinePropertiesOutput).ToPipelinePropertiesPtrOutputWithContext(ctx)
}

// PipelinePropertiesPtrInput is an input type that accepts PipelinePropertiesArgs, PipelinePropertiesPtr and PipelinePropertiesPtrOutput values.
// You can construct a concrete instance of `PipelinePropertiesPtrInput` via:
//
//          PipelinePropertiesArgs{...}
//
//  or:
//
//          nil
type PipelinePropertiesPtrInput interface {
	pulumi.Input

	ToPipelinePropertiesPtrOutput() PipelinePropertiesPtrOutput
	ToPipelinePropertiesPtrOutputWithContext(context.Context) PipelinePropertiesPtrOutput
}

type pipelinePropertiesPtrType PipelinePropertiesArgs

func PipelinePropertiesPtr(v *PipelinePropertiesArgs) PipelinePropertiesPtrInput {
	return (*pipelinePropertiesPtrType)(v)
}

func (*pipelinePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineProperties)(nil)).Elem()
}

func (i *pipelinePropertiesPtrType) ToPipelinePropertiesPtrOutput() PipelinePropertiesPtrOutput {
	return i.ToPipelinePropertiesPtrOutputWithContext(context.Background())
}

func (i *pipelinePropertiesPtrType) ToPipelinePropertiesPtrOutputWithContext(ctx context.Context) PipelinePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelinePropertiesPtrOutput)
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelinePropertiesOutput struct{ *pulumi.OutputState }

func (PipelinePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineProperties)(nil)).Elem()
}

func (o PipelinePropertiesOutput) ToPipelinePropertiesOutput() PipelinePropertiesOutput {
	return o
}

func (o PipelinePropertiesOutput) ToPipelinePropertiesOutputWithContext(ctx context.Context) PipelinePropertiesOutput {
	return o
}

func (o PipelinePropertiesOutput) ToPipelinePropertiesPtrOutput() PipelinePropertiesPtrOutput {
	return o.ToPipelinePropertiesPtrOutputWithContext(context.Background())
}

func (o PipelinePropertiesOutput) ToPipelinePropertiesPtrOutputWithContext(ctx context.Context) PipelinePropertiesPtrOutput {
	return o.ApplyT(func(v PipelineProperties) *PipelineProperties {
		return &v
	}).(PipelinePropertiesPtrOutput)
}

// The name of the folder that this Pipeline is in.
func (o PipelinePropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PipelinePropertiesPtrOutput struct{ *pulumi.OutputState }

func (PipelinePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineProperties)(nil)).Elem()
}

func (o PipelinePropertiesPtrOutput) ToPipelinePropertiesPtrOutput() PipelinePropertiesPtrOutput {
	return o
}

func (o PipelinePropertiesPtrOutput) ToPipelinePropertiesPtrOutputWithContext(ctx context.Context) PipelinePropertiesPtrOutput {
	return o
}

func (o PipelinePropertiesPtrOutput) Elem() PipelinePropertiesOutput {
	return o.ApplyT(func(v *PipelineProperties) PipelineProperties { return *v }).(PipelinePropertiesOutput)
}

// The name of the folder that this Pipeline is in.
func (o PipelinePropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineProperties) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// A data factory pipeline.
type PipelineResponse struct {
	// List of activities in pipeline.
	Activities []ActivityResponse `pulumi:"activities"`
	// List of tags that can be used for describing the Pipeline.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// The max number of concurrent runs for the pipeline.
	Concurrency *int `pulumi:"concurrency"`
	// The description of the pipeline.
	Description *string `pulumi:"description"`
	// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
	Folder *PipelineResponseProperties `pulumi:"folder"`
	// List of parameters for pipeline.
	Parameters *ParameterDefinitionSpecificationResponse `pulumi:"parameters"`
	// Dimensions emitted by Pipeline.
	RunDimensions map[string]map[string]interface{} `pulumi:"runDimensions"`
	// List of variables for pipeline.
	Variables *VariableDefinitionSpecificationResponse `pulumi:"variables"`
}

// PipelineResponseInput is an input type that accepts PipelineResponseArgs and PipelineResponseOutput values.
// You can construct a concrete instance of `PipelineResponseInput` via:
//
//          PipelineResponseArgs{...}
type PipelineResponseInput interface {
	pulumi.Input

	ToPipelineResponseOutput() PipelineResponseOutput
	ToPipelineResponseOutputWithContext(context.Context) PipelineResponseOutput
}

// A data factory pipeline.
type PipelineResponseArgs struct {
	// List of activities in pipeline.
	Activities ActivityResponseArrayInput `pulumi:"activities"`
	// List of tags that can be used for describing the Pipeline.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// The max number of concurrent runs for the pipeline.
	Concurrency pulumi.IntPtrInput `pulumi:"concurrency"`
	// The description of the pipeline.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
	Folder PipelineResponsePropertiesPtrInput `pulumi:"folder"`
	// List of parameters for pipeline.
	Parameters ParameterDefinitionSpecificationResponsePtrInput `pulumi:"parameters"`
	// Dimensions emitted by Pipeline.
	RunDimensions pulumi.MapMapInput `pulumi:"runDimensions"`
	// List of variables for pipeline.
	Variables VariableDefinitionSpecificationResponsePtrInput `pulumi:"variables"`
}

func (PipelineResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineResponse)(nil)).Elem()
}

func (i PipelineResponseArgs) ToPipelineResponseOutput() PipelineResponseOutput {
	return i.ToPipelineResponseOutputWithContext(context.Background())
}

func (i PipelineResponseArgs) ToPipelineResponseOutputWithContext(ctx context.Context) PipelineResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineResponseOutput)
}

func (i PipelineResponseArgs) ToPipelineResponsePtrOutput() PipelineResponsePtrOutput {
	return i.ToPipelineResponsePtrOutputWithContext(context.Background())
}

func (i PipelineResponseArgs) ToPipelineResponsePtrOutputWithContext(ctx context.Context) PipelineResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineResponseOutput).ToPipelineResponsePtrOutputWithContext(ctx)
}

// PipelineResponsePtrInput is an input type that accepts PipelineResponseArgs, PipelineResponsePtr and PipelineResponsePtrOutput values.
// You can construct a concrete instance of `PipelineResponsePtrInput` via:
//
//          PipelineResponseArgs{...}
//
//  or:
//
//          nil
type PipelineResponsePtrInput interface {
	pulumi.Input

	ToPipelineResponsePtrOutput() PipelineResponsePtrOutput
	ToPipelineResponsePtrOutputWithContext(context.Context) PipelineResponsePtrOutput
}

type pipelineResponsePtrType PipelineResponseArgs

func PipelineResponsePtr(v *PipelineResponseArgs) PipelineResponsePtrInput {
	return (*pipelineResponsePtrType)(v)
}

func (*pipelineResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineResponse)(nil)).Elem()
}

func (i *pipelineResponsePtrType) ToPipelineResponsePtrOutput() PipelineResponsePtrOutput {
	return i.ToPipelineResponsePtrOutputWithContext(context.Background())
}

func (i *pipelineResponsePtrType) ToPipelineResponsePtrOutputWithContext(ctx context.Context) PipelineResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineResponsePtrOutput)
}

// A data factory pipeline.
type PipelineResponseOutput struct{ *pulumi.OutputState }

func (PipelineResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineResponse)(nil)).Elem()
}

func (o PipelineResponseOutput) ToPipelineResponseOutput() PipelineResponseOutput {
	return o
}

func (o PipelineResponseOutput) ToPipelineResponseOutputWithContext(ctx context.Context) PipelineResponseOutput {
	return o
}

func (o PipelineResponseOutput) ToPipelineResponsePtrOutput() PipelineResponsePtrOutput {
	return o.ToPipelineResponsePtrOutputWithContext(context.Background())
}

func (o PipelineResponseOutput) ToPipelineResponsePtrOutputWithContext(ctx context.Context) PipelineResponsePtrOutput {
	return o.ApplyT(func(v PipelineResponse) *PipelineResponse {
		return &v
	}).(PipelineResponsePtrOutput)
}

// List of activities in pipeline.
func (o PipelineResponseOutput) Activities() ActivityResponseArrayOutput {
	return o.ApplyT(func(v PipelineResponse) []ActivityResponse { return v.Activities }).(ActivityResponseArrayOutput)
}

// List of tags that can be used for describing the Pipeline.
func (o PipelineResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v PipelineResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// The max number of concurrent runs for the pipeline.
func (o PipelineResponseOutput) Concurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipelineResponse) *int { return v.Concurrency }).(pulumi.IntPtrOutput)
}

// The description of the pipeline.
func (o PipelineResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
func (o PipelineResponseOutput) Folder() PipelineResponsePropertiesPtrOutput {
	return o.ApplyT(func(v PipelineResponse) *PipelineResponseProperties { return v.Folder }).(PipelineResponsePropertiesPtrOutput)
}

// List of parameters for pipeline.
func (o PipelineResponseOutput) Parameters() ParameterDefinitionSpecificationResponsePtrOutput {
	return o.ApplyT(func(v PipelineResponse) *ParameterDefinitionSpecificationResponse { return v.Parameters }).(ParameterDefinitionSpecificationResponsePtrOutput)
}

// Dimensions emitted by Pipeline.
func (o PipelineResponseOutput) RunDimensions() pulumi.MapMapOutput {
	return o.ApplyT(func(v PipelineResponse) map[string]map[string]interface{} { return v.RunDimensions }).(pulumi.MapMapOutput)
}

// List of variables for pipeline.
func (o PipelineResponseOutput) Variables() VariableDefinitionSpecificationResponsePtrOutput {
	return o.ApplyT(func(v PipelineResponse) *VariableDefinitionSpecificationResponse { return v.Variables }).(VariableDefinitionSpecificationResponsePtrOutput)
}

type PipelineResponsePtrOutput struct{ *pulumi.OutputState }

func (PipelineResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineResponse)(nil)).Elem()
}

func (o PipelineResponsePtrOutput) ToPipelineResponsePtrOutput() PipelineResponsePtrOutput {
	return o
}

func (o PipelineResponsePtrOutput) ToPipelineResponsePtrOutputWithContext(ctx context.Context) PipelineResponsePtrOutput {
	return o
}

func (o PipelineResponsePtrOutput) Elem() PipelineResponseOutput {
	return o.ApplyT(func(v *PipelineResponse) PipelineResponse { return *v }).(PipelineResponseOutput)
}

// List of activities in pipeline.
func (o PipelineResponsePtrOutput) Activities() ActivityResponseArrayOutput {
	return o.ApplyT(func(v *PipelineResponse) []ActivityResponse {
		if v == nil {
			return nil
		}
		return v.Activities
	}).(ActivityResponseArrayOutput)
}

// List of tags that can be used for describing the Pipeline.
func (o PipelineResponsePtrOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *PipelineResponse) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.MapArrayOutput)
}

// The max number of concurrent runs for the pipeline.
func (o PipelineResponsePtrOutput) Concurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipelineResponse) *int {
		if v == nil {
			return nil
		}
		return v.Concurrency
	}).(pulumi.IntPtrOutput)
}

// The description of the pipeline.
func (o PipelineResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
func (o PipelineResponsePtrOutput) Folder() PipelineResponsePropertiesPtrOutput {
	return o.ApplyT(func(v *PipelineResponse) *PipelineResponseProperties {
		if v == nil {
			return nil
		}
		return v.Folder
	}).(PipelineResponsePropertiesPtrOutput)
}

// List of parameters for pipeline.
func (o PipelineResponsePtrOutput) Parameters() ParameterDefinitionSpecificationResponsePtrOutput {
	return o.ApplyT(func(v *PipelineResponse) *ParameterDefinitionSpecificationResponse {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterDefinitionSpecificationResponsePtrOutput)
}

// Dimensions emitted by Pipeline.
func (o PipelineResponsePtrOutput) RunDimensions() pulumi.MapMapOutput {
	return o.ApplyT(func(v *PipelineResponse) map[string]map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.RunDimensions
	}).(pulumi.MapMapOutput)
}

// List of variables for pipeline.
func (o PipelineResponsePtrOutput) Variables() VariableDefinitionSpecificationResponsePtrOutput {
	return o.ApplyT(func(v *PipelineResponse) *VariableDefinitionSpecificationResponse {
		if v == nil {
			return nil
		}
		return v.Variables
	}).(VariableDefinitionSpecificationResponsePtrOutput)
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineResponseProperties struct {
	// The name of the folder that this Pipeline is in.
	Name *string `pulumi:"name"`
}

// PipelineResponsePropertiesInput is an input type that accepts PipelineResponsePropertiesArgs and PipelineResponsePropertiesOutput values.
// You can construct a concrete instance of `PipelineResponsePropertiesInput` via:
//
//          PipelineResponsePropertiesArgs{...}
type PipelineResponsePropertiesInput interface {
	pulumi.Input

	ToPipelineResponsePropertiesOutput() PipelineResponsePropertiesOutput
	ToPipelineResponsePropertiesOutputWithContext(context.Context) PipelineResponsePropertiesOutput
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineResponsePropertiesArgs struct {
	// The name of the folder that this Pipeline is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PipelineResponsePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineResponseProperties)(nil)).Elem()
}

func (i PipelineResponsePropertiesArgs) ToPipelineResponsePropertiesOutput() PipelineResponsePropertiesOutput {
	return i.ToPipelineResponsePropertiesOutputWithContext(context.Background())
}

func (i PipelineResponsePropertiesArgs) ToPipelineResponsePropertiesOutputWithContext(ctx context.Context) PipelineResponsePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineResponsePropertiesOutput)
}

func (i PipelineResponsePropertiesArgs) ToPipelineResponsePropertiesPtrOutput() PipelineResponsePropertiesPtrOutput {
	return i.ToPipelineResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i PipelineResponsePropertiesArgs) ToPipelineResponsePropertiesPtrOutputWithContext(ctx context.Context) PipelineResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineResponsePropertiesOutput).ToPipelineResponsePropertiesPtrOutputWithContext(ctx)
}

// PipelineResponsePropertiesPtrInput is an input type that accepts PipelineResponsePropertiesArgs, PipelineResponsePropertiesPtr and PipelineResponsePropertiesPtrOutput values.
// You can construct a concrete instance of `PipelineResponsePropertiesPtrInput` via:
//
//          PipelineResponsePropertiesArgs{...}
//
//  or:
//
//          nil
type PipelineResponsePropertiesPtrInput interface {
	pulumi.Input

	ToPipelineResponsePropertiesPtrOutput() PipelineResponsePropertiesPtrOutput
	ToPipelineResponsePropertiesPtrOutputWithContext(context.Context) PipelineResponsePropertiesPtrOutput
}

type pipelineResponsePropertiesPtrType PipelineResponsePropertiesArgs

func PipelineResponsePropertiesPtr(v *PipelineResponsePropertiesArgs) PipelineResponsePropertiesPtrInput {
	return (*pipelineResponsePropertiesPtrType)(v)
}

func (*pipelineResponsePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineResponseProperties)(nil)).Elem()
}

func (i *pipelineResponsePropertiesPtrType) ToPipelineResponsePropertiesPtrOutput() PipelineResponsePropertiesPtrOutput {
	return i.ToPipelineResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i *pipelineResponsePropertiesPtrType) ToPipelineResponsePropertiesPtrOutputWithContext(ctx context.Context) PipelineResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineResponsePropertiesPtrOutput)
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineResponsePropertiesOutput struct{ *pulumi.OutputState }

func (PipelineResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineResponseProperties)(nil)).Elem()
}

func (o PipelineResponsePropertiesOutput) ToPipelineResponsePropertiesOutput() PipelineResponsePropertiesOutput {
	return o
}

func (o PipelineResponsePropertiesOutput) ToPipelineResponsePropertiesOutputWithContext(ctx context.Context) PipelineResponsePropertiesOutput {
	return o
}

func (o PipelineResponsePropertiesOutput) ToPipelineResponsePropertiesPtrOutput() PipelineResponsePropertiesPtrOutput {
	return o.ToPipelineResponsePropertiesPtrOutputWithContext(context.Background())
}

func (o PipelineResponsePropertiesOutput) ToPipelineResponsePropertiesPtrOutputWithContext(ctx context.Context) PipelineResponsePropertiesPtrOutput {
	return o.ApplyT(func(v PipelineResponseProperties) *PipelineResponseProperties {
		return &v
	}).(PipelineResponsePropertiesPtrOutput)
}

// The name of the folder that this Pipeline is in.
func (o PipelineResponsePropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineResponseProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PipelineResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (PipelineResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineResponseProperties)(nil)).Elem()
}

func (o PipelineResponsePropertiesPtrOutput) ToPipelineResponsePropertiesPtrOutput() PipelineResponsePropertiesPtrOutput {
	return o
}

func (o PipelineResponsePropertiesPtrOutput) ToPipelineResponsePropertiesPtrOutputWithContext(ctx context.Context) PipelineResponsePropertiesPtrOutput {
	return o
}

func (o PipelineResponsePropertiesPtrOutput) Elem() PipelineResponsePropertiesOutput {
	return o.ApplyT(func(v *PipelineResponseProperties) PipelineResponseProperties { return *v }).(PipelineResponsePropertiesOutput)
}

// The name of the folder that this Pipeline is in.
func (o PipelineResponsePropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Trigger resource type.
type TriggerType struct {
	// Etag identifies change in the resource.
	Etag string `pulumi:"etag"`
	// The resource name.
	Name string `pulumi:"name"`
	// Properties of the trigger.
	Properties TriggerResponse `pulumi:"properties"`
	// The resource type.
	Type string `pulumi:"type"`
}

// TriggerTypeInput is an input type that accepts TriggerTypeArgs and TriggerTypeOutput values.
// You can construct a concrete instance of `TriggerTypeInput` via:
//
//          TriggerTypeArgs{...}
type TriggerTypeInput interface {
	pulumi.Input

	ToTriggerTypeOutput() TriggerTypeOutput
	ToTriggerTypeOutputWithContext(context.Context) TriggerTypeOutput
}

// Trigger resource type.
type TriggerTypeArgs struct {
	// Etag identifies change in the resource.
	Etag pulumi.StringInput `pulumi:"etag"`
	// The resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// Properties of the trigger.
	Properties TriggerResponseInput `pulumi:"properties"`
	// The resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TriggerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerType)(nil)).Elem()
}

func (i TriggerTypeArgs) ToTriggerTypeOutput() TriggerTypeOutput {
	return i.ToTriggerTypeOutputWithContext(context.Background())
}

func (i TriggerTypeArgs) ToTriggerTypeOutputWithContext(ctx context.Context) TriggerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTypeOutput)
}

// Trigger resource type.
type TriggerTypeOutput struct{ *pulumi.OutputState }

func (TriggerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerType)(nil)).Elem()
}

func (o TriggerTypeOutput) ToTriggerTypeOutput() TriggerTypeOutput {
	return o
}

func (o TriggerTypeOutput) ToTriggerTypeOutputWithContext(ctx context.Context) TriggerTypeOutput {
	return o
}

// Etag identifies change in the resource.
func (o TriggerTypeOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerType) string { return v.Etag }).(pulumi.StringOutput)
}

// The resource name.
func (o TriggerTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of the trigger.
func (o TriggerTypeOutput) Properties() TriggerResponseOutput {
	return o.ApplyT(func(v TriggerType) TriggerResponse { return v.Properties }).(TriggerResponseOutput)
}

// The resource type.
func (o TriggerTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerType) string { return v.Type }).(pulumi.StringOutput)
}

// Azure data factory nested object which contains information about creating pipeline run
type TriggerDefinition struct {
	// List of tags that can be used for describing the trigger.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Trigger type.
	Type string `pulumi:"type"`
}

// TriggerDefinitionInput is an input type that accepts TriggerDefinitionArgs and TriggerDefinitionOutput values.
// You can construct a concrete instance of `TriggerDefinitionInput` via:
//
//          TriggerDefinitionArgs{...}
type TriggerDefinitionInput interface {
	pulumi.Input

	ToTriggerDefinitionOutput() TriggerDefinitionOutput
	ToTriggerDefinitionOutputWithContext(context.Context) TriggerDefinitionOutput
}

// Azure data factory nested object which contains information about creating pipeline run
type TriggerDefinitionArgs struct {
	// List of tags that can be used for describing the trigger.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Trigger type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TriggerDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerDefinition)(nil)).Elem()
}

func (i TriggerDefinitionArgs) ToTriggerDefinitionOutput() TriggerDefinitionOutput {
	return i.ToTriggerDefinitionOutputWithContext(context.Background())
}

func (i TriggerDefinitionArgs) ToTriggerDefinitionOutputWithContext(ctx context.Context) TriggerDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerDefinitionOutput)
}

func (i TriggerDefinitionArgs) ToTriggerDefinitionPtrOutput() TriggerDefinitionPtrOutput {
	return i.ToTriggerDefinitionPtrOutputWithContext(context.Background())
}

func (i TriggerDefinitionArgs) ToTriggerDefinitionPtrOutputWithContext(ctx context.Context) TriggerDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerDefinitionOutput).ToTriggerDefinitionPtrOutputWithContext(ctx)
}

// TriggerDefinitionPtrInput is an input type that accepts TriggerDefinitionArgs, TriggerDefinitionPtr and TriggerDefinitionPtrOutput values.
// You can construct a concrete instance of `TriggerDefinitionPtrInput` via:
//
//          TriggerDefinitionArgs{...}
//
//  or:
//
//          nil
type TriggerDefinitionPtrInput interface {
	pulumi.Input

	ToTriggerDefinitionPtrOutput() TriggerDefinitionPtrOutput
	ToTriggerDefinitionPtrOutputWithContext(context.Context) TriggerDefinitionPtrOutput
}

type triggerDefinitionPtrType TriggerDefinitionArgs

func TriggerDefinitionPtr(v *TriggerDefinitionArgs) TriggerDefinitionPtrInput {
	return (*triggerDefinitionPtrType)(v)
}

func (*triggerDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerDefinition)(nil)).Elem()
}

func (i *triggerDefinitionPtrType) ToTriggerDefinitionPtrOutput() TriggerDefinitionPtrOutput {
	return i.ToTriggerDefinitionPtrOutputWithContext(context.Background())
}

func (i *triggerDefinitionPtrType) ToTriggerDefinitionPtrOutputWithContext(ctx context.Context) TriggerDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerDefinitionPtrOutput)
}

// Azure data factory nested object which contains information about creating pipeline run
type TriggerDefinitionOutput struct{ *pulumi.OutputState }

func (TriggerDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerDefinition)(nil)).Elem()
}

func (o TriggerDefinitionOutput) ToTriggerDefinitionOutput() TriggerDefinitionOutput {
	return o
}

func (o TriggerDefinitionOutput) ToTriggerDefinitionOutputWithContext(ctx context.Context) TriggerDefinitionOutput {
	return o
}

func (o TriggerDefinitionOutput) ToTriggerDefinitionPtrOutput() TriggerDefinitionPtrOutput {
	return o.ToTriggerDefinitionPtrOutputWithContext(context.Background())
}

func (o TriggerDefinitionOutput) ToTriggerDefinitionPtrOutputWithContext(ctx context.Context) TriggerDefinitionPtrOutput {
	return o.ApplyT(func(v TriggerDefinition) *TriggerDefinition {
		return &v
	}).(TriggerDefinitionPtrOutput)
}

// List of tags that can be used for describing the trigger.
func (o TriggerDefinitionOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v TriggerDefinition) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Trigger description.
func (o TriggerDefinitionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerDefinition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Trigger type.
func (o TriggerDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerDefinition) string { return v.Type }).(pulumi.StringOutput)
}

type TriggerDefinitionPtrOutput struct{ *pulumi.OutputState }

func (TriggerDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerDefinition)(nil)).Elem()
}

func (o TriggerDefinitionPtrOutput) ToTriggerDefinitionPtrOutput() TriggerDefinitionPtrOutput {
	return o
}

func (o TriggerDefinitionPtrOutput) ToTriggerDefinitionPtrOutputWithContext(ctx context.Context) TriggerDefinitionPtrOutput {
	return o
}

func (o TriggerDefinitionPtrOutput) Elem() TriggerDefinitionOutput {
	return o.ApplyT(func(v *TriggerDefinition) TriggerDefinition { return *v }).(TriggerDefinitionOutput)
}

// List of tags that can be used for describing the trigger.
func (o TriggerDefinitionPtrOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *TriggerDefinition) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.MapArrayOutput)
}

// Trigger description.
func (o TriggerDefinitionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Trigger type.
func (o TriggerDefinitionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure data factory nested object which contains information about creating pipeline run
type TriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []map[string]interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// Trigger type.
	Type string `pulumi:"type"`
}

// TriggerResponseInput is an input type that accepts TriggerResponseArgs and TriggerResponseOutput values.
// You can construct a concrete instance of `TriggerResponseInput` via:
//
//          TriggerResponseArgs{...}
type TriggerResponseInput interface {
	pulumi.Input

	ToTriggerResponseOutput() TriggerResponseOutput
	ToTriggerResponseOutputWithContext(context.Context) TriggerResponseOutput
}

// Azure data factory nested object which contains information about creating pipeline run
type TriggerResponseArgs struct {
	// List of tags that can be used for describing the trigger.
	Annotations pulumi.MapArrayInput `pulumi:"annotations"`
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState pulumi.StringInput `pulumi:"runtimeState"`
	// Trigger type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TriggerResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerResponse)(nil)).Elem()
}

func (i TriggerResponseArgs) ToTriggerResponseOutput() TriggerResponseOutput {
	return i.ToTriggerResponseOutputWithContext(context.Background())
}

func (i TriggerResponseArgs) ToTriggerResponseOutputWithContext(ctx context.Context) TriggerResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerResponseOutput)
}

func (i TriggerResponseArgs) ToTriggerResponsePtrOutput() TriggerResponsePtrOutput {
	return i.ToTriggerResponsePtrOutputWithContext(context.Background())
}

func (i TriggerResponseArgs) ToTriggerResponsePtrOutputWithContext(ctx context.Context) TriggerResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerResponseOutput).ToTriggerResponsePtrOutputWithContext(ctx)
}

// TriggerResponsePtrInput is an input type that accepts TriggerResponseArgs, TriggerResponsePtr and TriggerResponsePtrOutput values.
// You can construct a concrete instance of `TriggerResponsePtrInput` via:
//
//          TriggerResponseArgs{...}
//
//  or:
//
//          nil
type TriggerResponsePtrInput interface {
	pulumi.Input

	ToTriggerResponsePtrOutput() TriggerResponsePtrOutput
	ToTriggerResponsePtrOutputWithContext(context.Context) TriggerResponsePtrOutput
}

type triggerResponsePtrType TriggerResponseArgs

func TriggerResponsePtr(v *TriggerResponseArgs) TriggerResponsePtrInput {
	return (*triggerResponsePtrType)(v)
}

func (*triggerResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerResponse)(nil)).Elem()
}

func (i *triggerResponsePtrType) ToTriggerResponsePtrOutput() TriggerResponsePtrOutput {
	return i.ToTriggerResponsePtrOutputWithContext(context.Background())
}

func (i *triggerResponsePtrType) ToTriggerResponsePtrOutputWithContext(ctx context.Context) TriggerResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerResponsePtrOutput)
}

// Azure data factory nested object which contains information about creating pipeline run
type TriggerResponseOutput struct{ *pulumi.OutputState }

func (TriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerResponse)(nil)).Elem()
}

func (o TriggerResponseOutput) ToTriggerResponseOutput() TriggerResponseOutput {
	return o
}

func (o TriggerResponseOutput) ToTriggerResponseOutputWithContext(ctx context.Context) TriggerResponseOutput {
	return o
}

func (o TriggerResponseOutput) ToTriggerResponsePtrOutput() TriggerResponsePtrOutput {
	return o.ToTriggerResponsePtrOutputWithContext(context.Background())
}

func (o TriggerResponseOutput) ToTriggerResponsePtrOutputWithContext(ctx context.Context) TriggerResponsePtrOutput {
	return o.ApplyT(func(v TriggerResponse) *TriggerResponse {
		return &v
	}).(TriggerResponsePtrOutput)
}

// List of tags that can be used for describing the trigger.
func (o TriggerResponseOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v TriggerResponse) []map[string]interface{} { return v.Annotations }).(pulumi.MapArrayOutput)
}

// Trigger description.
func (o TriggerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
func (o TriggerResponseOutput) RuntimeState() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerResponse) string { return v.RuntimeState }).(pulumi.StringOutput)
}

// Trigger type.
func (o TriggerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerResponse) string { return v.Type }).(pulumi.StringOutput)
}

type TriggerResponsePtrOutput struct{ *pulumi.OutputState }

func (TriggerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerResponse)(nil)).Elem()
}

func (o TriggerResponsePtrOutput) ToTriggerResponsePtrOutput() TriggerResponsePtrOutput {
	return o
}

func (o TriggerResponsePtrOutput) ToTriggerResponsePtrOutputWithContext(ctx context.Context) TriggerResponsePtrOutput {
	return o
}

func (o TriggerResponsePtrOutput) Elem() TriggerResponseOutput {
	return o.ApplyT(func(v *TriggerResponse) TriggerResponse { return *v }).(TriggerResponseOutput)
}

// List of tags that can be used for describing the trigger.
func (o TriggerResponsePtrOutput) Annotations() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *TriggerResponse) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.MapArrayOutput)
}

// Trigger description.
func (o TriggerResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
func (o TriggerResponsePtrOutput) RuntimeState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RuntimeState
	}).(pulumi.StringPtrOutput)
}

// Trigger type.
func (o TriggerResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User property.
type UserProperty struct {
	// User property name.
	Name string `pulumi:"name"`
	// User property value. Type: string (or Expression with resultType string).
	Value map[string]interface{} `pulumi:"value"`
}

// UserPropertyInput is an input type that accepts UserPropertyArgs and UserPropertyOutput values.
// You can construct a concrete instance of `UserPropertyInput` via:
//
//          UserPropertyArgs{...}
type UserPropertyInput interface {
	pulumi.Input

	ToUserPropertyOutput() UserPropertyOutput
	ToUserPropertyOutputWithContext(context.Context) UserPropertyOutput
}

// User property.
type UserPropertyArgs struct {
	// User property name.
	Name pulumi.StringInput `pulumi:"name"`
	// User property value. Type: string (or Expression with resultType string).
	Value pulumi.MapInput `pulumi:"value"`
}

func (UserPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserProperty)(nil)).Elem()
}

func (i UserPropertyArgs) ToUserPropertyOutput() UserPropertyOutput {
	return i.ToUserPropertyOutputWithContext(context.Background())
}

func (i UserPropertyArgs) ToUserPropertyOutputWithContext(ctx context.Context) UserPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPropertyOutput)
}

// UserPropertyArrayInput is an input type that accepts UserPropertyArray and UserPropertyArrayOutput values.
// You can construct a concrete instance of `UserPropertyArrayInput` via:
//
//          UserPropertyArray{ UserPropertyArgs{...} }
type UserPropertyArrayInput interface {
	pulumi.Input

	ToUserPropertyArrayOutput() UserPropertyArrayOutput
	ToUserPropertyArrayOutputWithContext(context.Context) UserPropertyArrayOutput
}

type UserPropertyArray []UserPropertyInput

func (UserPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserProperty)(nil)).Elem()
}

func (i UserPropertyArray) ToUserPropertyArrayOutput() UserPropertyArrayOutput {
	return i.ToUserPropertyArrayOutputWithContext(context.Background())
}

func (i UserPropertyArray) ToUserPropertyArrayOutputWithContext(ctx context.Context) UserPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPropertyArrayOutput)
}

// User property.
type UserPropertyOutput struct{ *pulumi.OutputState }

func (UserPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserProperty)(nil)).Elem()
}

func (o UserPropertyOutput) ToUserPropertyOutput() UserPropertyOutput {
	return o
}

func (o UserPropertyOutput) ToUserPropertyOutputWithContext(ctx context.Context) UserPropertyOutput {
	return o
}

// User property name.
func (o UserPropertyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UserProperty) string { return v.Name }).(pulumi.StringOutput)
}

// User property value. Type: string (or Expression with resultType string).
func (o UserPropertyOutput) Value() pulumi.MapOutput {
	return o.ApplyT(func(v UserProperty) map[string]interface{} { return v.Value }).(pulumi.MapOutput)
}

type UserPropertyArrayOutput struct{ *pulumi.OutputState }

func (UserPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserProperty)(nil)).Elem()
}

func (o UserPropertyArrayOutput) ToUserPropertyArrayOutput() UserPropertyArrayOutput {
	return o
}

func (o UserPropertyArrayOutput) ToUserPropertyArrayOutputWithContext(ctx context.Context) UserPropertyArrayOutput {
	return o
}

func (o UserPropertyArrayOutput) Index(i pulumi.IntInput) UserPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserProperty {
		return vs[0].([]UserProperty)[vs[1].(int)]
	}).(UserPropertyOutput)
}

// User property.
type UserPropertyResponse struct {
	// User property name.
	Name string `pulumi:"name"`
	// User property value. Type: string (or Expression with resultType string).
	Value map[string]interface{} `pulumi:"value"`
}

// UserPropertyResponseInput is an input type that accepts UserPropertyResponseArgs and UserPropertyResponseOutput values.
// You can construct a concrete instance of `UserPropertyResponseInput` via:
//
//          UserPropertyResponseArgs{...}
type UserPropertyResponseInput interface {
	pulumi.Input

	ToUserPropertyResponseOutput() UserPropertyResponseOutput
	ToUserPropertyResponseOutputWithContext(context.Context) UserPropertyResponseOutput
}

// User property.
type UserPropertyResponseArgs struct {
	// User property name.
	Name pulumi.StringInput `pulumi:"name"`
	// User property value. Type: string (or Expression with resultType string).
	Value pulumi.MapInput `pulumi:"value"`
}

func (UserPropertyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPropertyResponse)(nil)).Elem()
}

func (i UserPropertyResponseArgs) ToUserPropertyResponseOutput() UserPropertyResponseOutput {
	return i.ToUserPropertyResponseOutputWithContext(context.Background())
}

func (i UserPropertyResponseArgs) ToUserPropertyResponseOutputWithContext(ctx context.Context) UserPropertyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPropertyResponseOutput)
}

// UserPropertyResponseArrayInput is an input type that accepts UserPropertyResponseArray and UserPropertyResponseArrayOutput values.
// You can construct a concrete instance of `UserPropertyResponseArrayInput` via:
//
//          UserPropertyResponseArray{ UserPropertyResponseArgs{...} }
type UserPropertyResponseArrayInput interface {
	pulumi.Input

	ToUserPropertyResponseArrayOutput() UserPropertyResponseArrayOutput
	ToUserPropertyResponseArrayOutputWithContext(context.Context) UserPropertyResponseArrayOutput
}

type UserPropertyResponseArray []UserPropertyResponseInput

func (UserPropertyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserPropertyResponse)(nil)).Elem()
}

func (i UserPropertyResponseArray) ToUserPropertyResponseArrayOutput() UserPropertyResponseArrayOutput {
	return i.ToUserPropertyResponseArrayOutputWithContext(context.Background())
}

func (i UserPropertyResponseArray) ToUserPropertyResponseArrayOutputWithContext(ctx context.Context) UserPropertyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPropertyResponseArrayOutput)
}

// User property.
type UserPropertyResponseOutput struct{ *pulumi.OutputState }

func (UserPropertyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPropertyResponse)(nil)).Elem()
}

func (o UserPropertyResponseOutput) ToUserPropertyResponseOutput() UserPropertyResponseOutput {
	return o
}

func (o UserPropertyResponseOutput) ToUserPropertyResponseOutputWithContext(ctx context.Context) UserPropertyResponseOutput {
	return o
}

// User property name.
func (o UserPropertyResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UserPropertyResponse) string { return v.Name }).(pulumi.StringOutput)
}

// User property value. Type: string (or Expression with resultType string).
func (o UserPropertyResponseOutput) Value() pulumi.MapOutput {
	return o.ApplyT(func(v UserPropertyResponse) map[string]interface{} { return v.Value }).(pulumi.MapOutput)
}

type UserPropertyResponseArrayOutput struct{ *pulumi.OutputState }

func (UserPropertyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserPropertyResponse)(nil)).Elem()
}

func (o UserPropertyResponseArrayOutput) ToUserPropertyResponseArrayOutput() UserPropertyResponseArrayOutput {
	return o
}

func (o UserPropertyResponseArrayOutput) ToUserPropertyResponseArrayOutputWithContext(ctx context.Context) UserPropertyResponseArrayOutput {
	return o
}

func (o UserPropertyResponseArrayOutput) Index(i pulumi.IntInput) UserPropertyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserPropertyResponse {
		return vs[0].([]UserPropertyResponse)[vs[1].(int)]
	}).(UserPropertyResponseOutput)
}

// Definition of variable for a Pipeline.
type VariableDefinitionSpecification struct {
}

// VariableDefinitionSpecificationInput is an input type that accepts VariableDefinitionSpecificationArgs and VariableDefinitionSpecificationOutput values.
// You can construct a concrete instance of `VariableDefinitionSpecificationInput` via:
//
//          VariableDefinitionSpecificationArgs{...}
type VariableDefinitionSpecificationInput interface {
	pulumi.Input

	ToVariableDefinitionSpecificationOutput() VariableDefinitionSpecificationOutput
	ToVariableDefinitionSpecificationOutputWithContext(context.Context) VariableDefinitionSpecificationOutput
}

// Definition of variable for a Pipeline.
type VariableDefinitionSpecificationArgs struct {
}

func (VariableDefinitionSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableDefinitionSpecification)(nil)).Elem()
}

func (i VariableDefinitionSpecificationArgs) ToVariableDefinitionSpecificationOutput() VariableDefinitionSpecificationOutput {
	return i.ToVariableDefinitionSpecificationOutputWithContext(context.Background())
}

func (i VariableDefinitionSpecificationArgs) ToVariableDefinitionSpecificationOutputWithContext(ctx context.Context) VariableDefinitionSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableDefinitionSpecificationOutput)
}

func (i VariableDefinitionSpecificationArgs) ToVariableDefinitionSpecificationPtrOutput() VariableDefinitionSpecificationPtrOutput {
	return i.ToVariableDefinitionSpecificationPtrOutputWithContext(context.Background())
}

func (i VariableDefinitionSpecificationArgs) ToVariableDefinitionSpecificationPtrOutputWithContext(ctx context.Context) VariableDefinitionSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableDefinitionSpecificationOutput).ToVariableDefinitionSpecificationPtrOutputWithContext(ctx)
}

// VariableDefinitionSpecificationPtrInput is an input type that accepts VariableDefinitionSpecificationArgs, VariableDefinitionSpecificationPtr and VariableDefinitionSpecificationPtrOutput values.
// You can construct a concrete instance of `VariableDefinitionSpecificationPtrInput` via:
//
//          VariableDefinitionSpecificationArgs{...}
//
//  or:
//
//          nil
type VariableDefinitionSpecificationPtrInput interface {
	pulumi.Input

	ToVariableDefinitionSpecificationPtrOutput() VariableDefinitionSpecificationPtrOutput
	ToVariableDefinitionSpecificationPtrOutputWithContext(context.Context) VariableDefinitionSpecificationPtrOutput
}

type variableDefinitionSpecificationPtrType VariableDefinitionSpecificationArgs

func VariableDefinitionSpecificationPtr(v *VariableDefinitionSpecificationArgs) VariableDefinitionSpecificationPtrInput {
	return (*variableDefinitionSpecificationPtrType)(v)
}

func (*variableDefinitionSpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VariableDefinitionSpecification)(nil)).Elem()
}

func (i *variableDefinitionSpecificationPtrType) ToVariableDefinitionSpecificationPtrOutput() VariableDefinitionSpecificationPtrOutput {
	return i.ToVariableDefinitionSpecificationPtrOutputWithContext(context.Background())
}

func (i *variableDefinitionSpecificationPtrType) ToVariableDefinitionSpecificationPtrOutputWithContext(ctx context.Context) VariableDefinitionSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableDefinitionSpecificationPtrOutput)
}

// Definition of variable for a Pipeline.
type VariableDefinitionSpecificationOutput struct{ *pulumi.OutputState }

func (VariableDefinitionSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableDefinitionSpecification)(nil)).Elem()
}

func (o VariableDefinitionSpecificationOutput) ToVariableDefinitionSpecificationOutput() VariableDefinitionSpecificationOutput {
	return o
}

func (o VariableDefinitionSpecificationOutput) ToVariableDefinitionSpecificationOutputWithContext(ctx context.Context) VariableDefinitionSpecificationOutput {
	return o
}

func (o VariableDefinitionSpecificationOutput) ToVariableDefinitionSpecificationPtrOutput() VariableDefinitionSpecificationPtrOutput {
	return o.ToVariableDefinitionSpecificationPtrOutputWithContext(context.Background())
}

func (o VariableDefinitionSpecificationOutput) ToVariableDefinitionSpecificationPtrOutputWithContext(ctx context.Context) VariableDefinitionSpecificationPtrOutput {
	return o.ApplyT(func(v VariableDefinitionSpecification) *VariableDefinitionSpecification {
		return &v
	}).(VariableDefinitionSpecificationPtrOutput)
}

type VariableDefinitionSpecificationPtrOutput struct{ *pulumi.OutputState }

func (VariableDefinitionSpecificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VariableDefinitionSpecification)(nil)).Elem()
}

func (o VariableDefinitionSpecificationPtrOutput) ToVariableDefinitionSpecificationPtrOutput() VariableDefinitionSpecificationPtrOutput {
	return o
}

func (o VariableDefinitionSpecificationPtrOutput) ToVariableDefinitionSpecificationPtrOutputWithContext(ctx context.Context) VariableDefinitionSpecificationPtrOutput {
	return o
}

func (o VariableDefinitionSpecificationPtrOutput) Elem() VariableDefinitionSpecificationOutput {
	return o.ApplyT(func(v *VariableDefinitionSpecification) VariableDefinitionSpecification { return *v }).(VariableDefinitionSpecificationOutput)
}

// Definition of variable for a Pipeline.
type VariableDefinitionSpecificationResponse struct {
}

// VariableDefinitionSpecificationResponseInput is an input type that accepts VariableDefinitionSpecificationResponseArgs and VariableDefinitionSpecificationResponseOutput values.
// You can construct a concrete instance of `VariableDefinitionSpecificationResponseInput` via:
//
//          VariableDefinitionSpecificationResponseArgs{...}
type VariableDefinitionSpecificationResponseInput interface {
	pulumi.Input

	ToVariableDefinitionSpecificationResponseOutput() VariableDefinitionSpecificationResponseOutput
	ToVariableDefinitionSpecificationResponseOutputWithContext(context.Context) VariableDefinitionSpecificationResponseOutput
}

// Definition of variable for a Pipeline.
type VariableDefinitionSpecificationResponseArgs struct {
}

func (VariableDefinitionSpecificationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableDefinitionSpecificationResponse)(nil)).Elem()
}

func (i VariableDefinitionSpecificationResponseArgs) ToVariableDefinitionSpecificationResponseOutput() VariableDefinitionSpecificationResponseOutput {
	return i.ToVariableDefinitionSpecificationResponseOutputWithContext(context.Background())
}

func (i VariableDefinitionSpecificationResponseArgs) ToVariableDefinitionSpecificationResponseOutputWithContext(ctx context.Context) VariableDefinitionSpecificationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableDefinitionSpecificationResponseOutput)
}

func (i VariableDefinitionSpecificationResponseArgs) ToVariableDefinitionSpecificationResponsePtrOutput() VariableDefinitionSpecificationResponsePtrOutput {
	return i.ToVariableDefinitionSpecificationResponsePtrOutputWithContext(context.Background())
}

func (i VariableDefinitionSpecificationResponseArgs) ToVariableDefinitionSpecificationResponsePtrOutputWithContext(ctx context.Context) VariableDefinitionSpecificationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableDefinitionSpecificationResponseOutput).ToVariableDefinitionSpecificationResponsePtrOutputWithContext(ctx)
}

// VariableDefinitionSpecificationResponsePtrInput is an input type that accepts VariableDefinitionSpecificationResponseArgs, VariableDefinitionSpecificationResponsePtr and VariableDefinitionSpecificationResponsePtrOutput values.
// You can construct a concrete instance of `VariableDefinitionSpecificationResponsePtrInput` via:
//
//          VariableDefinitionSpecificationResponseArgs{...}
//
//  or:
//
//          nil
type VariableDefinitionSpecificationResponsePtrInput interface {
	pulumi.Input

	ToVariableDefinitionSpecificationResponsePtrOutput() VariableDefinitionSpecificationResponsePtrOutput
	ToVariableDefinitionSpecificationResponsePtrOutputWithContext(context.Context) VariableDefinitionSpecificationResponsePtrOutput
}

type variableDefinitionSpecificationResponsePtrType VariableDefinitionSpecificationResponseArgs

func VariableDefinitionSpecificationResponsePtr(v *VariableDefinitionSpecificationResponseArgs) VariableDefinitionSpecificationResponsePtrInput {
	return (*variableDefinitionSpecificationResponsePtrType)(v)
}

func (*variableDefinitionSpecificationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VariableDefinitionSpecificationResponse)(nil)).Elem()
}

func (i *variableDefinitionSpecificationResponsePtrType) ToVariableDefinitionSpecificationResponsePtrOutput() VariableDefinitionSpecificationResponsePtrOutput {
	return i.ToVariableDefinitionSpecificationResponsePtrOutputWithContext(context.Background())
}

func (i *variableDefinitionSpecificationResponsePtrType) ToVariableDefinitionSpecificationResponsePtrOutputWithContext(ctx context.Context) VariableDefinitionSpecificationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableDefinitionSpecificationResponsePtrOutput)
}

// Definition of variable for a Pipeline.
type VariableDefinitionSpecificationResponseOutput struct{ *pulumi.OutputState }

func (VariableDefinitionSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableDefinitionSpecificationResponse)(nil)).Elem()
}

func (o VariableDefinitionSpecificationResponseOutput) ToVariableDefinitionSpecificationResponseOutput() VariableDefinitionSpecificationResponseOutput {
	return o
}

func (o VariableDefinitionSpecificationResponseOutput) ToVariableDefinitionSpecificationResponseOutputWithContext(ctx context.Context) VariableDefinitionSpecificationResponseOutput {
	return o
}

func (o VariableDefinitionSpecificationResponseOutput) ToVariableDefinitionSpecificationResponsePtrOutput() VariableDefinitionSpecificationResponsePtrOutput {
	return o.ToVariableDefinitionSpecificationResponsePtrOutputWithContext(context.Background())
}

func (o VariableDefinitionSpecificationResponseOutput) ToVariableDefinitionSpecificationResponsePtrOutputWithContext(ctx context.Context) VariableDefinitionSpecificationResponsePtrOutput {
	return o.ApplyT(func(v VariableDefinitionSpecificationResponse) *VariableDefinitionSpecificationResponse {
		return &v
	}).(VariableDefinitionSpecificationResponsePtrOutput)
}

type VariableDefinitionSpecificationResponsePtrOutput struct{ *pulumi.OutputState }

func (VariableDefinitionSpecificationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VariableDefinitionSpecificationResponse)(nil)).Elem()
}

func (o VariableDefinitionSpecificationResponsePtrOutput) ToVariableDefinitionSpecificationResponsePtrOutput() VariableDefinitionSpecificationResponsePtrOutput {
	return o
}

func (o VariableDefinitionSpecificationResponsePtrOutput) ToVariableDefinitionSpecificationResponsePtrOutputWithContext(ctx context.Context) VariableDefinitionSpecificationResponsePtrOutput {
	return o
}

func (o VariableDefinitionSpecificationResponsePtrOutput) Elem() VariableDefinitionSpecificationResponseOutput {
	return o.ApplyT(func(v *VariableDefinitionSpecificationResponse) VariableDefinitionSpecificationResponse { return *v }).(VariableDefinitionSpecificationResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(ActivityOutput{})
	pulumi.RegisterOutputType(ActivityArrayOutput{})
	pulumi.RegisterOutputType(ActivityDependencyOutput{})
	pulumi.RegisterOutputType(ActivityDependencyArrayOutput{})
	pulumi.RegisterOutputType(ActivityDependencyResponseOutput{})
	pulumi.RegisterOutputType(ActivityDependencyResponseArrayOutput{})
	pulumi.RegisterOutputType(ActivityResponseOutput{})
	pulumi.RegisterOutputType(ActivityResponseArrayOutput{})
	pulumi.RegisterOutputType(DataFlowTypeOutput{})
	pulumi.RegisterOutputType(DataFlowDefinitionOutput{})
	pulumi.RegisterOutputType(DataFlowDefinitionPtrOutput{})
	pulumi.RegisterOutputType(DataFlowPropertiesOutput{})
	pulumi.RegisterOutputType(DataFlowPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DataFlowResponseOutput{})
	pulumi.RegisterOutputType(DataFlowResponsePtrOutput{})
	pulumi.RegisterOutputType(DataFlowResponsePropertiesOutput{})
	pulumi.RegisterOutputType(DataFlowResponsePropertiesPtrOutput{})
	pulumi.RegisterOutputType(DatasetTypeOutput{})
	pulumi.RegisterOutputType(DatasetDefinitionOutput{})
	pulumi.RegisterOutputType(DatasetDefinitionPtrOutput{})
	pulumi.RegisterOutputType(DatasetPropertiesOutput{})
	pulumi.RegisterOutputType(DatasetPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DatasetResponseOutput{})
	pulumi.RegisterOutputType(DatasetResponsePtrOutput{})
	pulumi.RegisterOutputType(DatasetResponsePropertiesOutput{})
	pulumi.RegisterOutputType(DatasetResponsePropertiesPtrOutput{})
	pulumi.RegisterOutputType(FactoryTypeOutput{})
	pulumi.RegisterOutputType(FactoryIdentityOutput{})
	pulumi.RegisterOutputType(FactoryIdentityPtrOutput{})
	pulumi.RegisterOutputType(FactoryIdentityResponseOutput{})
	pulumi.RegisterOutputType(FactoryIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(FactoryPropertiesResponseOutput{})
	pulumi.RegisterOutputType(FactoryPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(FactoryRepoConfigurationOutput{})
	pulumi.RegisterOutputType(FactoryRepoConfigurationPtrOutput{})
	pulumi.RegisterOutputType(FactoryRepoConfigurationResponseOutput{})
	pulumi.RegisterOutputType(FactoryRepoConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(GlobalParameterDefinitionSpecificationOutput{})
	pulumi.RegisterOutputType(GlobalParameterDefinitionSpecificationPtrOutput{})
	pulumi.RegisterOutputType(GlobalParameterDefinitionSpecificationResponseOutput{})
	pulumi.RegisterOutputType(GlobalParameterDefinitionSpecificationResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeTypeOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDefinitionOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDefinitionPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferenceOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferencePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferenceResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeResponsePtrOutput{})
	pulumi.RegisterOutputType(LinkedServiceTypeOutput{})
	pulumi.RegisterOutputType(LinkedServiceDefinitionOutput{})
	pulumi.RegisterOutputType(LinkedServiceDefinitionPtrOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferencePtrOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceResponseOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(LinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(LinkedServiceResponsePtrOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionSpecificationOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionSpecificationPtrOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionSpecificationResponseOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionSpecificationResponsePtrOutput{})
	pulumi.RegisterOutputType(ParameterValueSpecificationOutput{})
	pulumi.RegisterOutputType(ParameterValueSpecificationPtrOutput{})
	pulumi.RegisterOutputType(ParameterValueSpecificationResponseOutput{})
	pulumi.RegisterOutputType(ParameterValueSpecificationResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineTypeOutput{})
	pulumi.RegisterOutputType(PipelinePropertiesOutput{})
	pulumi.RegisterOutputType(PipelinePropertiesPtrOutput{})
	pulumi.RegisterOutputType(PipelineResponseOutput{})
	pulumi.RegisterOutputType(PipelineResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineResponsePropertiesOutput{})
	pulumi.RegisterOutputType(PipelineResponsePropertiesPtrOutput{})
	pulumi.RegisterOutputType(TriggerTypeOutput{})
	pulumi.RegisterOutputType(TriggerDefinitionOutput{})
	pulumi.RegisterOutputType(TriggerDefinitionPtrOutput{})
	pulumi.RegisterOutputType(TriggerResponseOutput{})
	pulumi.RegisterOutputType(TriggerResponsePtrOutput{})
	pulumi.RegisterOutputType(UserPropertyOutput{})
	pulumi.RegisterOutputType(UserPropertyArrayOutput{})
	pulumi.RegisterOutputType(UserPropertyResponseOutput{})
	pulumi.RegisterOutputType(UserPropertyResponseArrayOutput{})
	pulumi.RegisterOutputType(VariableDefinitionSpecificationOutput{})
	pulumi.RegisterOutputType(VariableDefinitionSpecificationPtrOutput{})
	pulumi.RegisterOutputType(VariableDefinitionSpecificationResponseOutput{})
	pulumi.RegisterOutputType(VariableDefinitionSpecificationResponsePtrOutput{})
}
