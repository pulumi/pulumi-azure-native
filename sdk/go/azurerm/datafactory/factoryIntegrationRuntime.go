// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Integration runtime resource type.
type FactoryIntegrationRuntime struct {
	pulumi.CustomResourceState

	// Etag identifies change in the resource.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Integration runtime properties.
	Properties IntegrationRuntimeResponseOutput `pulumi:"properties"`
	// The resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewFactoryIntegrationRuntime registers a new resource with the given unique name, arguments, and options.
func NewFactoryIntegrationRuntime(ctx *pulumi.Context,
	name string, args *FactoryIntegrationRuntimeArgs, opts ...pulumi.ResourceOption) (*FactoryIntegrationRuntime, error) {
	if args == nil || args.FactoryName == nil {
		return nil, errors.New("missing required argument 'FactoryName'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.Properties == nil {
		return nil, errors.New("missing required argument 'Properties'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &FactoryIntegrationRuntimeArgs{}
	}
	var resource FactoryIntegrationRuntime
	err := ctx.RegisterResource("azurerm:datafactory:FactoryIntegrationRuntime", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFactoryIntegrationRuntime gets an existing FactoryIntegrationRuntime resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFactoryIntegrationRuntime(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FactoryIntegrationRuntimeState, opts ...pulumi.ResourceOption) (*FactoryIntegrationRuntime, error) {
	var resource FactoryIntegrationRuntime
	err := ctx.ReadResource("azurerm:datafactory:FactoryIntegrationRuntime", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FactoryIntegrationRuntime resources.
type factoryIntegrationRuntimeState struct {
	// Etag identifies change in the resource.
	Etag *string `pulumi:"etag"`
	// The resource name.
	Name *string `pulumi:"name"`
	// Integration runtime properties.
	Properties *IntegrationRuntimeResponse `pulumi:"properties"`
	// The resource type.
	Type *string `pulumi:"type"`
}

type FactoryIntegrationRuntimeState struct {
	// Etag identifies change in the resource.
	Etag pulumi.StringPtrInput
	// The resource name.
	Name pulumi.StringPtrInput
	// Integration runtime properties.
	Properties IntegrationRuntimeResponsePtrInput
	// The resource type.
	Type pulumi.StringPtrInput
}

func (FactoryIntegrationRuntimeState) ElementType() reflect.Type {
	return reflect.TypeOf((*factoryIntegrationRuntimeState)(nil)).Elem()
}

type factoryIntegrationRuntimeArgs struct {
	// The factory name.
	FactoryName string `pulumi:"factoryName"`
	// The integration runtime name.
	Name string `pulumi:"name"`
	// Integration runtime properties.
	Properties IntegrationRuntime `pulumi:"properties"`
	// The resource group name.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a FactoryIntegrationRuntime resource.
type FactoryIntegrationRuntimeArgs struct {
	// The factory name.
	FactoryName pulumi.StringInput
	// The integration runtime name.
	Name pulumi.StringInput
	// Integration runtime properties.
	Properties IntegrationRuntimeInput
	// The resource group name.
	ResourceGroupName pulumi.StringInput
}

func (FactoryIntegrationRuntimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*factoryIntegrationRuntimeArgs)(nil)).Elem()
}
