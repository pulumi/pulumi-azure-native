// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datashare

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A share subscription data transfer object.
type ShareSubscription struct {
	pulumi.CustomResourceState

	// Name of the azure resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties on the share subscription
	Properties ShareSubscriptionPropertiesResponseOutput `pulumi:"properties"`
	// Type of the azure resource
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewShareSubscription registers a new resource with the given unique name, arguments, and options.
func NewShareSubscription(ctx *pulumi.Context,
	name string, args *ShareSubscriptionArgs, opts ...pulumi.ResourceOption) (*ShareSubscription, error) {
	if args == nil || args.AccountName == nil {
		return nil, errors.New("missing required argument 'AccountName'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.Properties == nil {
		return nil, errors.New("missing required argument 'Properties'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &ShareSubscriptionArgs{}
	}
	var resource ShareSubscription
	err := ctx.RegisterResource("azurerm:datashare:ShareSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetShareSubscription gets an existing ShareSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetShareSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ShareSubscriptionState, opts ...pulumi.ResourceOption) (*ShareSubscription, error) {
	var resource ShareSubscription
	err := ctx.ReadResource("azurerm:datashare:ShareSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ShareSubscription resources.
type shareSubscriptionState struct {
	// Name of the azure resource
	Name *string `pulumi:"name"`
	// Properties on the share subscription
	Properties *ShareSubscriptionPropertiesResponse `pulumi:"properties"`
	// Type of the azure resource
	Type *string `pulumi:"type"`
}

type ShareSubscriptionState struct {
	// Name of the azure resource
	Name pulumi.StringPtrInput
	// Properties on the share subscription
	Properties ShareSubscriptionPropertiesResponsePtrInput
	// Type of the azure resource
	Type pulumi.StringPtrInput
}

func (ShareSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*shareSubscriptionState)(nil)).Elem()
}

type shareSubscriptionArgs struct {
	// The name of the share account.
	AccountName string `pulumi:"accountName"`
	// The name of the shareSubscription.
	Name string `pulumi:"name"`
	// Properties on the share subscription
	Properties ShareSubscriptionProperties `pulumi:"properties"`
	// The resource group name.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a ShareSubscription resource.
type ShareSubscriptionArgs struct {
	// The name of the share account.
	AccountName pulumi.StringInput
	// The name of the shareSubscription.
	Name pulumi.StringInput
	// Properties on the share subscription
	Properties ShareSubscriptionPropertiesInput
	// The resource group name.
	ResourceGroupName pulumi.StringInput
}

func (ShareSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*shareSubscriptionArgs)(nil)).Elem()
}
