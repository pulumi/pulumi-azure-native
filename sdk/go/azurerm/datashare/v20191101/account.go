// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20191101

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// An account data transfer object.
type Account struct {
	pulumi.CustomResourceState

	// Identity Info on the Account
	Identity IdentityResponseOutput `pulumi:"identity"`
	// Location of the azure resource.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Name of the azure resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties on the account
	Properties AccountPropertiesResponseOutput `pulumi:"properties"`
	// Tags on the azure resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Type of the azure resource
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAccount registers a new resource with the given unique name, arguments, and options.
func NewAccount(ctx *pulumi.Context,
	name string, args *AccountArgs, opts ...pulumi.ResourceOption) (*Account, error) {
	if args == nil || args.Identity == nil {
		return nil, errors.New("missing required argument 'Identity'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &AccountArgs{}
	}
	var resource Account
	err := ctx.RegisterResource("azurerm:datashare/v20191101:Account", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccount gets an existing Account resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountState, opts ...pulumi.ResourceOption) (*Account, error) {
	var resource Account
	err := ctx.ReadResource("azurerm:datashare/v20191101:Account", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Account resources.
type accountState struct {
	// Identity Info on the Account
	Identity *IdentityResponse `pulumi:"identity"`
	// Location of the azure resource.
	Location *string `pulumi:"location"`
	// Name of the azure resource
	Name *string `pulumi:"name"`
	// Properties on the account
	Properties *AccountPropertiesResponse `pulumi:"properties"`
	// Tags on the azure resource.
	Tags map[string]string `pulumi:"tags"`
	// Type of the azure resource
	Type *string `pulumi:"type"`
}

type AccountState struct {
	// Identity Info on the Account
	Identity IdentityResponsePtrInput
	// Location of the azure resource.
	Location pulumi.StringPtrInput
	// Name of the azure resource
	Name pulumi.StringPtrInput
	// Properties on the account
	Properties AccountPropertiesResponsePtrInput
	// Tags on the azure resource.
	Tags pulumi.StringMapInput
	// Type of the azure resource
	Type pulumi.StringPtrInput
}

func (AccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountState)(nil)).Elem()
}

type accountArgs struct {
	// Identity Info on the Account
	Identity Identity `pulumi:"identity"`
	// Location of the azure resource.
	Location *string `pulumi:"location"`
	// The name of the share account.
	Name string `pulumi:"name"`
	// The resource group name.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Tags on the azure resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Account resource.
type AccountArgs struct {
	// Identity Info on the Account
	Identity IdentityInput
	// Location of the azure resource.
	Location pulumi.StringPtrInput
	// The name of the share account.
	Name pulumi.StringInput
	// The resource group name.
	ResourceGroupName pulumi.StringInput
	// Tags on the azure resource.
	Tags pulumi.StringMapInput
}

func (AccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountArgs)(nil)).Elem()
}
