// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180301

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Contains information about the job.
type Job struct {
	pulumi.CustomResourceState

	// The location of the resource
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The properties associated with the job.
	Properties JobPropertiesResponseOutput `pulumi:"properties"`
	// The tags of the resource
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewJob registers a new resource with the given unique name, arguments, and options.
func NewJob(ctx *pulumi.Context,
	name string, args *JobArgs, opts ...pulumi.ResourceOption) (*Job, error) {
	if args == nil || args.Cluster == nil {
		return nil, errors.New("missing required argument 'Cluster'")
	}
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.NodeCount == nil {
		return nil, errors.New("missing required argument 'NodeCount'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.StdOutErrPathPrefix == nil {
		return nil, errors.New("missing required argument 'StdOutErrPathPrefix'")
	}
	if args == nil {
		args = &JobArgs{}
	}
	var resource Job
	err := ctx.RegisterResource("azurerm:batchai/v20180301:Job", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJob gets an existing Job resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobState, opts ...pulumi.ResourceOption) (*Job, error) {
	var resource Job
	err := ctx.ReadResource("azurerm:batchai/v20180301:Job", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Job resources.
type jobState struct {
	// The location of the resource
	Location *string `pulumi:"location"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// The properties associated with the job.
	Properties *JobPropertiesResponse `pulumi:"properties"`
	// The tags of the resource
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource
	Type *string `pulumi:"type"`
}

type JobState struct {
	// The location of the resource
	Location pulumi.StringPtrInput
	// The name of the resource
	Name pulumi.StringPtrInput
	// The properties associated with the job.
	Properties JobPropertiesResponsePtrInput
	// The tags of the resource
	Tags pulumi.StringMapInput
	// The type of the resource
	Type pulumi.StringPtrInput
}

func (JobState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobState)(nil)).Elem()
}

type jobArgs struct {
	// Specifies the settings for Caffe2 job.
	Caffe2Settings *Caffe2Settings `pulumi:"caffe2Settings"`
	// Specifies the settings for Caffe job.
	CaffeSettings *CaffeSettings `pulumi:"caffeSettings"`
	// Specifies the settings for Chainer job.
	ChainerSettings *ChainerSettings `pulumi:"chainerSettings"`
	// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
	Cluster ResourceId `pulumi:"cluster"`
	// Specifies the settings for CNTK (aka Microsoft Cognitive Toolkit) job.
	CntkSettings *CNTKsettings `pulumi:"cntkSettings"`
	// Constraints associated with the Job.
	Constraints *JobBasePropertiesProperties `pulumi:"constraints"`
	// If the container was downloaded as part of cluster setup then the same container image will be used. If not provided, the job will run on the VM.
	ContainerSettings *ContainerSettings `pulumi:"containerSettings"`
	// Specifies the settings for a custom tool kit job.
	CustomToolkitSettings *CustomToolkitSettings `pulumi:"customToolkitSettings"`
	// Batch AI will setup these additional environment variables for the job.
	EnvironmentVariables []EnvironmentVariable `pulumi:"environmentVariables"`
	// Describe the experiment information of the job
	ExperimentName   *string          `pulumi:"experimentName"`
	InputDirectories []InputDirectory `pulumi:"inputDirectories"`
	// The specified actions will run on all the nodes that are part of the job
	JobPreparation *JobPreparation `pulumi:"jobPreparation"`
	// The region in which to create the job.
	Location string `pulumi:"location"`
	// These volumes will be mounted before the job execution and will be unmounted after the job completion. The volumes will be mounted at location specified by $AZ_BATCHAI_JOB_MOUNT_ROOT environment variable.
	MountVolumes *MountVolumes `pulumi:"mountVolumes"`
	// The name of the job within the specified resource group. Job names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
	Name string `pulumi:"name"`
	// The job will be gang scheduled on that many compute nodes
	NodeCount         int               `pulumi:"nodeCount"`
	OutputDirectories []OutputDirectory `pulumi:"outputDirectories"`
	// Priority associated with the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.
	Priority *int `pulumi:"priority"`
	// Specifies the settings for pyTorch job.
	PyTorchSettings *PyTorchSettings `pulumi:"pyTorchSettings"`
	// Name of the resource group to which the resource belongs.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Batch AI will setup these additional environment variables for the job. Server will never report values of these variables back.
	Secrets []EnvironmentVariableWithSecretValue `pulumi:"secrets"`
	// The path where the Batch AI service will upload stdout and stderror of the job.
	StdOutErrPathPrefix string `pulumi:"stdOutErrPathPrefix"`
	// The user specified tags associated with the job.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the settings for TensorFlow job.
	TensorFlowSettings *TensorFlowSettings `pulumi:"tensorFlowSettings"`
}

// The set of arguments for constructing a Job resource.
type JobArgs struct {
	// Specifies the settings for Caffe2 job.
	Caffe2Settings Caffe2SettingsPtrInput
	// Specifies the settings for Caffe job.
	CaffeSettings CaffeSettingsPtrInput
	// Specifies the settings for Chainer job.
	ChainerSettings ChainerSettingsPtrInput
	// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
	Cluster ResourceIdInput
	// Specifies the settings for CNTK (aka Microsoft Cognitive Toolkit) job.
	CntkSettings CNTKsettingsPtrInput
	// Constraints associated with the Job.
	Constraints JobBasePropertiesPropertiesPtrInput
	// If the container was downloaded as part of cluster setup then the same container image will be used. If not provided, the job will run on the VM.
	ContainerSettings ContainerSettingsPtrInput
	// Specifies the settings for a custom tool kit job.
	CustomToolkitSettings CustomToolkitSettingsPtrInput
	// Batch AI will setup these additional environment variables for the job.
	EnvironmentVariables EnvironmentVariableArrayInput
	// Describe the experiment information of the job
	ExperimentName   pulumi.StringPtrInput
	InputDirectories InputDirectoryArrayInput
	// The specified actions will run on all the nodes that are part of the job
	JobPreparation JobPreparationPtrInput
	// The region in which to create the job.
	Location pulumi.StringInput
	// These volumes will be mounted before the job execution and will be unmounted after the job completion. The volumes will be mounted at location specified by $AZ_BATCHAI_JOB_MOUNT_ROOT environment variable.
	MountVolumes MountVolumesPtrInput
	// The name of the job within the specified resource group. Job names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long.
	Name pulumi.StringInput
	// The job will be gang scheduled on that many compute nodes
	NodeCount         pulumi.IntInput
	OutputDirectories OutputDirectoryArrayInput
	// Priority associated with the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.
	Priority pulumi.IntPtrInput
	// Specifies the settings for pyTorch job.
	PyTorchSettings PyTorchSettingsPtrInput
	// Name of the resource group to which the resource belongs.
	ResourceGroupName pulumi.StringInput
	// Batch AI will setup these additional environment variables for the job. Server will never report values of these variables back.
	Secrets EnvironmentVariableWithSecretValueArrayInput
	// The path where the Batch AI service will upload stdout and stderror of the job.
	StdOutErrPathPrefix pulumi.StringInput
	// The user specified tags associated with the job.
	Tags pulumi.StringMapInput
	// Specifies the settings for TensorFlow job.
	TensorFlowSettings TensorFlowSettingsPtrInput
}

func (JobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobArgs)(nil)).Elem()
}
