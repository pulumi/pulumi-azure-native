// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190505preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Action rule with action group configuration
type ActionGroup struct {
	// Action group to trigger if action rule matches
	ActionGroupId string `pulumi:"actionGroupId"`
	// conditions on which alerts will be filtered
	Conditions *Conditions `pulumi:"conditions"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// scope on which action rule will apply
	Scope *Scope `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// Indicates type of action rule
	Type string `pulumi:"type"`
}

// ActionGroupInput is an input type that accepts ActionGroupArgs and ActionGroupOutput values.
// You can construct a concrete instance of `ActionGroupInput` via:
//
//          ActionGroupArgs{...}
type ActionGroupInput interface {
	pulumi.Input

	ToActionGroupOutput() ActionGroupOutput
	ToActionGroupOutputWithContext(context.Context) ActionGroupOutput
}

// Action rule with action group configuration
type ActionGroupArgs struct {
	// Action group to trigger if action rule matches
	ActionGroupId pulumi.StringInput `pulumi:"actionGroupId"`
	// conditions on which alerts will be filtered
	Conditions ConditionsPtrInput `pulumi:"conditions"`
	// Description of action rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// scope on which action rule will apply
	Scope ScopePtrInput `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Indicates type of action rule
	Type pulumi.StringInput `pulumi:"type"`
}

func (ActionGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroup)(nil)).Elem()
}

func (i ActionGroupArgs) ToActionGroupOutput() ActionGroupOutput {
	return i.ToActionGroupOutputWithContext(context.Background())
}

func (i ActionGroupArgs) ToActionGroupOutputWithContext(ctx context.Context) ActionGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupOutput)
}

// Action rule with action group configuration
type ActionGroupResponse struct {
	// Action group to trigger if action rule matches
	ActionGroupId string `pulumi:"actionGroupId"`
	// conditions on which alerts will be filtered
	Conditions *ConditionsResponse `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt string `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy string `pulumi:"createdBy"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt string `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy string `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope *ScopeResponse `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// Indicates type of action rule
	Type string `pulumi:"type"`
}

// Action rule with action group configuration
type ActionGroupResponseOutput struct{ *pulumi.OutputState }

func (ActionGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupResponse)(nil)).Elem()
}

func (o ActionGroupResponseOutput) ToActionGroupResponseOutput() ActionGroupResponseOutput {
	return o
}

func (o ActionGroupResponseOutput) ToActionGroupResponseOutputWithContext(ctx context.Context) ActionGroupResponseOutput {
	return o
}

// Action group to trigger if action rule matches
func (o ActionGroupResponseOutput) ActionGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupResponse) string { return v.ActionGroupId }).(pulumi.StringOutput)
}

// conditions on which alerts will be filtered
func (o ActionGroupResponseOutput) Conditions() ConditionsResponsePtrOutput {
	return o.ApplyT(func(v ActionGroupResponse) *ConditionsResponse { return v.Conditions }).(ConditionsResponsePtrOutput)
}

// Creation time of action rule. Date-Time in ISO-8601 format.
func (o ActionGroupResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Created by user name.
func (o ActionGroupResponseOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupResponse) string { return v.CreatedBy }).(pulumi.StringOutput)
}

// Description of action rule
func (o ActionGroupResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Last updated time of action rule. Date-Time in ISO-8601 format.
func (o ActionGroupResponseOutput) LastModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupResponse) string { return v.LastModifiedAt }).(pulumi.StringOutput)
}

// Last modified by user name.
func (o ActionGroupResponseOutput) LastModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupResponse) string { return v.LastModifiedBy }).(pulumi.StringOutput)
}

// scope on which action rule will apply
func (o ActionGroupResponseOutput) Scope() ScopeResponsePtrOutput {
	return o.ApplyT(func(v ActionGroupResponse) *ScopeResponse { return v.Scope }).(ScopeResponsePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o ActionGroupResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Indicates type of action rule
func (o ActionGroupResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupResponse) string { return v.Type }).(pulumi.StringOutput)
}

// condition to trigger an action rule
type Condition struct {
	// operator for a given condition
	Operator *string `pulumi:"operator"`
	// list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// ConditionInput is an input type that accepts ConditionArgs and ConditionOutput values.
// You can construct a concrete instance of `ConditionInput` via:
//
//          ConditionArgs{...}
type ConditionInput interface {
	pulumi.Input

	ToConditionOutput() ConditionOutput
	ToConditionOutputWithContext(context.Context) ConditionOutput
}

// condition to trigger an action rule
type ConditionArgs struct {
	// operator for a given condition
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Condition)(nil)).Elem()
}

func (i ConditionArgs) ToConditionOutput() ConditionOutput {
	return i.ToConditionOutputWithContext(context.Background())
}

func (i ConditionArgs) ToConditionOutputWithContext(ctx context.Context) ConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionOutput)
}

func (i ConditionArgs) ToConditionPtrOutput() ConditionPtrOutput {
	return i.ToConditionPtrOutputWithContext(context.Background())
}

func (i ConditionArgs) ToConditionPtrOutputWithContext(ctx context.Context) ConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionOutput).ToConditionPtrOutputWithContext(ctx)
}

// ConditionPtrInput is an input type that accepts ConditionArgs, ConditionPtr and ConditionPtrOutput values.
// You can construct a concrete instance of `ConditionPtrInput` via:
//
//          ConditionArgs{...}
//
//  or:
//
//          nil
type ConditionPtrInput interface {
	pulumi.Input

	ToConditionPtrOutput() ConditionPtrOutput
	ToConditionPtrOutputWithContext(context.Context) ConditionPtrOutput
}

type conditionPtrType ConditionArgs

func ConditionPtr(v *ConditionArgs) ConditionPtrInput {
	return (*conditionPtrType)(v)
}

func (*conditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Condition)(nil)).Elem()
}

func (i *conditionPtrType) ToConditionPtrOutput() ConditionPtrOutput {
	return i.ToConditionPtrOutputWithContext(context.Background())
}

func (i *conditionPtrType) ToConditionPtrOutputWithContext(ctx context.Context) ConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionPtrOutput)
}

// condition to trigger an action rule
type ConditionResponse struct {
	// operator for a given condition
	Operator *string `pulumi:"operator"`
	// list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// condition to trigger an action rule
type ConditionResponseOutput struct{ *pulumi.OutputState }

func (ConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionResponse)(nil)).Elem()
}

func (o ConditionResponseOutput) ToConditionResponseOutput() ConditionResponseOutput {
	return o
}

func (o ConditionResponseOutput) ToConditionResponseOutputWithContext(ctx context.Context) ConditionResponseOutput {
	return o
}

func (o ConditionResponseOutput) ToConditionResponsePtrOutput() ConditionResponsePtrOutput {
	return o.ToConditionResponsePtrOutputWithContext(context.Background())
}

func (o ConditionResponseOutput) ToConditionResponsePtrOutputWithContext(ctx context.Context) ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionResponse) *ConditionResponse {
		return &v
	}).(ConditionResponsePtrOutput)
}

// operator for a given condition
func (o ConditionResponseOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// list of values to match for a given condition.
func (o ConditionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConditionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ConditionResponsePtrOutput struct{ *pulumi.OutputState }

func (ConditionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionResponse)(nil)).Elem()
}

func (o ConditionResponsePtrOutput) ToConditionResponsePtrOutput() ConditionResponsePtrOutput {
	return o
}

func (o ConditionResponsePtrOutput) ToConditionResponsePtrOutputWithContext(ctx context.Context) ConditionResponsePtrOutput {
	return o
}

func (o ConditionResponsePtrOutput) Elem() ConditionResponseOutput {
	return o.ApplyT(func(v *ConditionResponse) ConditionResponse { return *v }).(ConditionResponseOutput)
}

// operator for a given condition
func (o ConditionResponsePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConditionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// list of values to match for a given condition.
func (o ConditionResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConditionResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type Conditions struct {
	// filter alerts by alert context (payload)
	AlertContext *Condition `pulumi:"alertContext"`
	// filter alerts by alert rule id
	AlertRuleId *Condition `pulumi:"alertRuleId"`
	// filter alerts by alert rule description
	Description *Condition `pulumi:"description"`
	// filter alerts by monitor condition
	MonitorCondition *Condition `pulumi:"monitorCondition"`
	// filter alerts by monitor service
	MonitorService *Condition `pulumi:"monitorService"`
	// filter alerts by severity
	Severity *Condition `pulumi:"severity"`
	// filter alerts by target resource type
	TargetResourceType *Condition `pulumi:"targetResourceType"`
}

// ConditionsInput is an input type that accepts ConditionsArgs and ConditionsOutput values.
// You can construct a concrete instance of `ConditionsInput` via:
//
//          ConditionsArgs{...}
type ConditionsInput interface {
	pulumi.Input

	ToConditionsOutput() ConditionsOutput
	ToConditionsOutputWithContext(context.Context) ConditionsOutput
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsArgs struct {
	// filter alerts by alert context (payload)
	AlertContext ConditionPtrInput `pulumi:"alertContext"`
	// filter alerts by alert rule id
	AlertRuleId ConditionPtrInput `pulumi:"alertRuleId"`
	// filter alerts by alert rule description
	Description ConditionPtrInput `pulumi:"description"`
	// filter alerts by monitor condition
	MonitorCondition ConditionPtrInput `pulumi:"monitorCondition"`
	// filter alerts by monitor service
	MonitorService ConditionPtrInput `pulumi:"monitorService"`
	// filter alerts by severity
	Severity ConditionPtrInput `pulumi:"severity"`
	// filter alerts by target resource type
	TargetResourceType ConditionPtrInput `pulumi:"targetResourceType"`
}

func (ConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Conditions)(nil)).Elem()
}

func (i ConditionsArgs) ToConditionsOutput() ConditionsOutput {
	return i.ToConditionsOutputWithContext(context.Background())
}

func (i ConditionsArgs) ToConditionsOutputWithContext(ctx context.Context) ConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsOutput)
}

func (i ConditionsArgs) ToConditionsPtrOutput() ConditionsPtrOutput {
	return i.ToConditionsPtrOutputWithContext(context.Background())
}

func (i ConditionsArgs) ToConditionsPtrOutputWithContext(ctx context.Context) ConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsOutput).ToConditionsPtrOutputWithContext(ctx)
}

// ConditionsPtrInput is an input type that accepts ConditionsArgs, ConditionsPtr and ConditionsPtrOutput values.
// You can construct a concrete instance of `ConditionsPtrInput` via:
//
//          ConditionsArgs{...}
//
//  or:
//
//          nil
type ConditionsPtrInput interface {
	pulumi.Input

	ToConditionsPtrOutput() ConditionsPtrOutput
	ToConditionsPtrOutputWithContext(context.Context) ConditionsPtrOutput
}

type conditionsPtrType ConditionsArgs

func ConditionsPtr(v *ConditionsArgs) ConditionsPtrInput {
	return (*conditionsPtrType)(v)
}

func (*conditionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Conditions)(nil)).Elem()
}

func (i *conditionsPtrType) ToConditionsPtrOutput() ConditionsPtrOutput {
	return i.ToConditionsPtrOutputWithContext(context.Background())
}

func (i *conditionsPtrType) ToConditionsPtrOutputWithContext(ctx context.Context) ConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsPtrOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsResponse struct {
	// filter alerts by alert context (payload)
	AlertContext *ConditionResponse `pulumi:"alertContext"`
	// filter alerts by alert rule id
	AlertRuleId *ConditionResponse `pulumi:"alertRuleId"`
	// filter alerts by alert rule description
	Description *ConditionResponse `pulumi:"description"`
	// filter alerts by monitor condition
	MonitorCondition *ConditionResponse `pulumi:"monitorCondition"`
	// filter alerts by monitor service
	MonitorService *ConditionResponse `pulumi:"monitorService"`
	// filter alerts by severity
	Severity *ConditionResponse `pulumi:"severity"`
	// filter alerts by target resource type
	TargetResourceType *ConditionResponse `pulumi:"targetResourceType"`
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsResponseOutput struct{ *pulumi.OutputState }

func (ConditionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionsResponse)(nil)).Elem()
}

func (o ConditionsResponseOutput) ToConditionsResponseOutput() ConditionsResponseOutput {
	return o
}

func (o ConditionsResponseOutput) ToConditionsResponseOutputWithContext(ctx context.Context) ConditionsResponseOutput {
	return o
}

func (o ConditionsResponseOutput) ToConditionsResponsePtrOutput() ConditionsResponsePtrOutput {
	return o.ToConditionsResponsePtrOutputWithContext(context.Background())
}

func (o ConditionsResponseOutput) ToConditionsResponsePtrOutputWithContext(ctx context.Context) ConditionsResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionsResponse {
		return &v
	}).(ConditionsResponsePtrOutput)
}

// filter alerts by alert context (payload)
func (o ConditionsResponseOutput) AlertContext() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.AlertContext }).(ConditionResponsePtrOutput)
}

// filter alerts by alert rule id
func (o ConditionsResponseOutput) AlertRuleId() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.AlertRuleId }).(ConditionResponsePtrOutput)
}

// filter alerts by alert rule description
func (o ConditionsResponseOutput) Description() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.Description }).(ConditionResponsePtrOutput)
}

// filter alerts by monitor condition
func (o ConditionsResponseOutput) MonitorCondition() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.MonitorCondition }).(ConditionResponsePtrOutput)
}

// filter alerts by monitor service
func (o ConditionsResponseOutput) MonitorService() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.MonitorService }).(ConditionResponsePtrOutput)
}

// filter alerts by severity
func (o ConditionsResponseOutput) Severity() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.Severity }).(ConditionResponsePtrOutput)
}

// filter alerts by target resource type
func (o ConditionsResponseOutput) TargetResourceType() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.TargetResourceType }).(ConditionResponsePtrOutput)
}

type ConditionsResponsePtrOutput struct{ *pulumi.OutputState }

func (ConditionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionsResponse)(nil)).Elem()
}

func (o ConditionsResponsePtrOutput) ToConditionsResponsePtrOutput() ConditionsResponsePtrOutput {
	return o
}

func (o ConditionsResponsePtrOutput) ToConditionsResponsePtrOutputWithContext(ctx context.Context) ConditionsResponsePtrOutput {
	return o
}

func (o ConditionsResponsePtrOutput) Elem() ConditionsResponseOutput {
	return o.ApplyT(func(v *ConditionsResponse) ConditionsResponse { return *v }).(ConditionsResponseOutput)
}

// filter alerts by alert context (payload)
func (o ConditionsResponsePtrOutput) AlertContext() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.AlertContext
	}).(ConditionResponsePtrOutput)
}

// filter alerts by alert rule id
func (o ConditionsResponsePtrOutput) AlertRuleId() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.AlertRuleId
	}).(ConditionResponsePtrOutput)
}

// filter alerts by alert rule description
func (o ConditionsResponsePtrOutput) Description() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.Description
	}).(ConditionResponsePtrOutput)
}

// filter alerts by monitor condition
func (o ConditionsResponsePtrOutput) MonitorCondition() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.MonitorCondition
	}).(ConditionResponsePtrOutput)
}

// filter alerts by monitor service
func (o ConditionsResponsePtrOutput) MonitorService() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.MonitorService
	}).(ConditionResponsePtrOutput)
}

// filter alerts by severity
func (o ConditionsResponsePtrOutput) Severity() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(ConditionResponsePtrOutput)
}

// filter alerts by target resource type
func (o ConditionsResponsePtrOutput) TargetResourceType() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.TargetResourceType
	}).(ConditionResponsePtrOutput)
}

// Action rule with diagnostics configuration
type Diagnostics struct {
	// conditions on which alerts will be filtered
	Conditions *Conditions `pulumi:"conditions"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// scope on which action rule will apply
	Scope *Scope `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// Indicates type of action rule
	Type string `pulumi:"type"`
}

// DiagnosticsInput is an input type that accepts DiagnosticsArgs and DiagnosticsOutput values.
// You can construct a concrete instance of `DiagnosticsInput` via:
//
//          DiagnosticsArgs{...}
type DiagnosticsInput interface {
	pulumi.Input

	ToDiagnosticsOutput() DiagnosticsOutput
	ToDiagnosticsOutputWithContext(context.Context) DiagnosticsOutput
}

// Action rule with diagnostics configuration
type DiagnosticsArgs struct {
	// conditions on which alerts will be filtered
	Conditions ConditionsPtrInput `pulumi:"conditions"`
	// Description of action rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// scope on which action rule will apply
	Scope ScopePtrInput `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Indicates type of action rule
	Type pulumi.StringInput `pulumi:"type"`
}

func (DiagnosticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Diagnostics)(nil)).Elem()
}

func (i DiagnosticsArgs) ToDiagnosticsOutput() DiagnosticsOutput {
	return i.ToDiagnosticsOutputWithContext(context.Background())
}

func (i DiagnosticsArgs) ToDiagnosticsOutputWithContext(ctx context.Context) DiagnosticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsOutput)
}

// Action rule with diagnostics configuration
type DiagnosticsResponse struct {
	// conditions on which alerts will be filtered
	Conditions *ConditionsResponse `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt string `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy string `pulumi:"createdBy"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt string `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy string `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope *ScopeResponse `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// Indicates type of action rule
	Type string `pulumi:"type"`
}

// Action rule with diagnostics configuration
type DiagnosticsResponseOutput struct{ *pulumi.OutputState }

func (DiagnosticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsResponse)(nil)).Elem()
}

func (o DiagnosticsResponseOutput) ToDiagnosticsResponseOutput() DiagnosticsResponseOutput {
	return o
}

func (o DiagnosticsResponseOutput) ToDiagnosticsResponseOutputWithContext(ctx context.Context) DiagnosticsResponseOutput {
	return o
}

// conditions on which alerts will be filtered
func (o DiagnosticsResponseOutput) Conditions() ConditionsResponsePtrOutput {
	return o.ApplyT(func(v DiagnosticsResponse) *ConditionsResponse { return v.Conditions }).(ConditionsResponsePtrOutput)
}

// Creation time of action rule. Date-Time in ISO-8601 format.
func (o DiagnosticsResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Created by user name.
func (o DiagnosticsResponseOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsResponse) string { return v.CreatedBy }).(pulumi.StringOutput)
}

// Description of action rule
func (o DiagnosticsResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiagnosticsResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Last updated time of action rule. Date-Time in ISO-8601 format.
func (o DiagnosticsResponseOutput) LastModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsResponse) string { return v.LastModifiedAt }).(pulumi.StringOutput)
}

// Last modified by user name.
func (o DiagnosticsResponseOutput) LastModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsResponse) string { return v.LastModifiedBy }).(pulumi.StringOutput)
}

// scope on which action rule will apply
func (o DiagnosticsResponseOutput) Scope() ScopeResponsePtrOutput {
	return o.ApplyT(func(v DiagnosticsResponse) *ScopeResponse { return v.Scope }).(ScopeResponsePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o DiagnosticsResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiagnosticsResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Indicates type of action rule
func (o DiagnosticsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type Scope struct {
	// type of target scope
	ScopeType *string `pulumi:"scopeType"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values []string `pulumi:"values"`
}

// ScopeInput is an input type that accepts ScopeArgs and ScopeOutput values.
// You can construct a concrete instance of `ScopeInput` via:
//
//          ScopeArgs{...}
type ScopeInput interface {
	pulumi.Input

	ToScopeOutput() ScopeOutput
	ToScopeOutputWithContext(context.Context) ScopeOutput
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeArgs struct {
	// type of target scope
	ScopeType pulumi.StringPtrInput `pulumi:"scopeType"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Scope)(nil)).Elem()
}

func (i ScopeArgs) ToScopeOutput() ScopeOutput {
	return i.ToScopeOutputWithContext(context.Background())
}

func (i ScopeArgs) ToScopeOutputWithContext(ctx context.Context) ScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeOutput)
}

func (i ScopeArgs) ToScopePtrOutput() ScopePtrOutput {
	return i.ToScopePtrOutputWithContext(context.Background())
}

func (i ScopeArgs) ToScopePtrOutputWithContext(ctx context.Context) ScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeOutput).ToScopePtrOutputWithContext(ctx)
}

// ScopePtrInput is an input type that accepts ScopeArgs, ScopePtr and ScopePtrOutput values.
// You can construct a concrete instance of `ScopePtrInput` via:
//
//          ScopeArgs{...}
//
//  or:
//
//          nil
type ScopePtrInput interface {
	pulumi.Input

	ToScopePtrOutput() ScopePtrOutput
	ToScopePtrOutputWithContext(context.Context) ScopePtrOutput
}

type scopePtrType ScopeArgs

func ScopePtr(v *ScopeArgs) ScopePtrInput {
	return (*scopePtrType)(v)
}

func (*scopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Scope)(nil)).Elem()
}

func (i *scopePtrType) ToScopePtrOutput() ScopePtrOutput {
	return i.ToScopePtrOutputWithContext(context.Background())
}

func (i *scopePtrType) ToScopePtrOutputWithContext(ctx context.Context) ScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopePtrOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeResponse struct {
	// type of target scope
	ScopeType *string `pulumi:"scopeType"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values []string `pulumi:"values"`
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeResponseOutput struct{ *pulumi.OutputState }

func (ScopeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeResponse)(nil)).Elem()
}

func (o ScopeResponseOutput) ToScopeResponseOutput() ScopeResponseOutput {
	return o
}

func (o ScopeResponseOutput) ToScopeResponseOutputWithContext(ctx context.Context) ScopeResponseOutput {
	return o
}

func (o ScopeResponseOutput) ToScopeResponsePtrOutput() ScopeResponsePtrOutput {
	return o.ToScopeResponsePtrOutputWithContext(context.Background())
}

func (o ScopeResponseOutput) ToScopeResponsePtrOutputWithContext(ctx context.Context) ScopeResponsePtrOutput {
	return o.ApplyT(func(v ScopeResponse) *ScopeResponse {
		return &v
	}).(ScopeResponsePtrOutput)
}

// type of target scope
func (o ScopeResponseOutput) ScopeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScopeResponse) *string { return v.ScopeType }).(pulumi.StringPtrOutput)
}

// list of ARM IDs of the given scope type which will be the target of the given action rule.
func (o ScopeResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScopeResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ScopeResponsePtrOutput struct{ *pulumi.OutputState }

func (ScopeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeResponse)(nil)).Elem()
}

func (o ScopeResponsePtrOutput) ToScopeResponsePtrOutput() ScopeResponsePtrOutput {
	return o
}

func (o ScopeResponsePtrOutput) ToScopeResponsePtrOutputWithContext(ctx context.Context) ScopeResponsePtrOutput {
	return o
}

func (o ScopeResponsePtrOutput) Elem() ScopeResponseOutput {
	return o.ApplyT(func(v *ScopeResponse) ScopeResponse { return *v }).(ScopeResponseOutput)
}

// type of target scope
func (o ScopeResponsePtrOutput) ScopeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScopeResponse) *string {
		if v == nil {
			return nil
		}
		return v.ScopeType
	}).(pulumi.StringPtrOutput)
}

// list of ARM IDs of the given scope type which will be the target of the given action rule.
func (o ScopeResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScopeResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// Action rule with suppression configuration
type Suppression struct {
	// conditions on which alerts will be filtered
	Conditions *Conditions `pulumi:"conditions"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// scope on which action rule will apply
	Scope *Scope `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// suppression configuration for the action rule
	SuppressionConfig SuppressionConfig `pulumi:"suppressionConfig"`
	// Indicates type of action rule
	Type string `pulumi:"type"`
}

// SuppressionInput is an input type that accepts SuppressionArgs and SuppressionOutput values.
// You can construct a concrete instance of `SuppressionInput` via:
//
//          SuppressionArgs{...}
type SuppressionInput interface {
	pulumi.Input

	ToSuppressionOutput() SuppressionOutput
	ToSuppressionOutputWithContext(context.Context) SuppressionOutput
}

// Action rule with suppression configuration
type SuppressionArgs struct {
	// conditions on which alerts will be filtered
	Conditions ConditionsPtrInput `pulumi:"conditions"`
	// Description of action rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// scope on which action rule will apply
	Scope ScopePtrInput `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status pulumi.StringPtrInput `pulumi:"status"`
	// suppression configuration for the action rule
	SuppressionConfig SuppressionConfigInput `pulumi:"suppressionConfig"`
	// Indicates type of action rule
	Type pulumi.StringInput `pulumi:"type"`
}

func (SuppressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Suppression)(nil)).Elem()
}

func (i SuppressionArgs) ToSuppressionOutput() SuppressionOutput {
	return i.ToSuppressionOutputWithContext(context.Background())
}

func (i SuppressionArgs) ToSuppressionOutputWithContext(ctx context.Context) SuppressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionOutput)
}

// Suppression logic for a given action rule
type SuppressionConfig struct {
	// Specifies when the suppression should be applied
	RecurrenceType string `pulumi:"recurrenceType"`
	// suppression schedule configuration
	Schedule *SuppressionSchedule `pulumi:"schedule"`
}

// SuppressionConfigInput is an input type that accepts SuppressionConfigArgs and SuppressionConfigOutput values.
// You can construct a concrete instance of `SuppressionConfigInput` via:
//
//          SuppressionConfigArgs{...}
type SuppressionConfigInput interface {
	pulumi.Input

	ToSuppressionConfigOutput() SuppressionConfigOutput
	ToSuppressionConfigOutputWithContext(context.Context) SuppressionConfigOutput
}

// Suppression logic for a given action rule
type SuppressionConfigArgs struct {
	// Specifies when the suppression should be applied
	RecurrenceType pulumi.StringInput `pulumi:"recurrenceType"`
	// suppression schedule configuration
	Schedule SuppressionSchedulePtrInput `pulumi:"schedule"`
}

func (SuppressionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionConfig)(nil)).Elem()
}

func (i SuppressionConfigArgs) ToSuppressionConfigOutput() SuppressionConfigOutput {
	return i.ToSuppressionConfigOutputWithContext(context.Background())
}

func (i SuppressionConfigArgs) ToSuppressionConfigOutputWithContext(ctx context.Context) SuppressionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionConfigOutput)
}

// Suppression logic for a given action rule
type SuppressionConfigResponse struct {
	// Specifies when the suppression should be applied
	RecurrenceType string `pulumi:"recurrenceType"`
	// suppression schedule configuration
	Schedule *SuppressionScheduleResponse `pulumi:"schedule"`
}

// Suppression logic for a given action rule
type SuppressionConfigResponseOutput struct{ *pulumi.OutputState }

func (SuppressionConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionConfigResponse)(nil)).Elem()
}

func (o SuppressionConfigResponseOutput) ToSuppressionConfigResponseOutput() SuppressionConfigResponseOutput {
	return o
}

func (o SuppressionConfigResponseOutput) ToSuppressionConfigResponseOutputWithContext(ctx context.Context) SuppressionConfigResponseOutput {
	return o
}

// Specifies when the suppression should be applied
func (o SuppressionConfigResponseOutput) RecurrenceType() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionConfigResponse) string { return v.RecurrenceType }).(pulumi.StringOutput)
}

// suppression schedule configuration
func (o SuppressionConfigResponseOutput) Schedule() SuppressionScheduleResponsePtrOutput {
	return o.ApplyT(func(v SuppressionConfigResponse) *SuppressionScheduleResponse { return v.Schedule }).(SuppressionScheduleResponsePtrOutput)
}

// Action rule with suppression configuration
type SuppressionResponse struct {
	// conditions on which alerts will be filtered
	Conditions *ConditionsResponse `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt string `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy string `pulumi:"createdBy"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt string `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy string `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope *ScopeResponse `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// suppression configuration for the action rule
	SuppressionConfig SuppressionConfigResponse `pulumi:"suppressionConfig"`
	// Indicates type of action rule
	Type string `pulumi:"type"`
}

// Action rule with suppression configuration
type SuppressionResponseOutput struct{ *pulumi.OutputState }

func (SuppressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionResponse)(nil)).Elem()
}

func (o SuppressionResponseOutput) ToSuppressionResponseOutput() SuppressionResponseOutput {
	return o
}

func (o SuppressionResponseOutput) ToSuppressionResponseOutputWithContext(ctx context.Context) SuppressionResponseOutput {
	return o
}

// conditions on which alerts will be filtered
func (o SuppressionResponseOutput) Conditions() ConditionsResponsePtrOutput {
	return o.ApplyT(func(v SuppressionResponse) *ConditionsResponse { return v.Conditions }).(ConditionsResponsePtrOutput)
}

// Creation time of action rule. Date-Time in ISO-8601 format.
func (o SuppressionResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Created by user name.
func (o SuppressionResponseOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionResponse) string { return v.CreatedBy }).(pulumi.StringOutput)
}

// Description of action rule
func (o SuppressionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Last updated time of action rule. Date-Time in ISO-8601 format.
func (o SuppressionResponseOutput) LastModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionResponse) string { return v.LastModifiedAt }).(pulumi.StringOutput)
}

// Last modified by user name.
func (o SuppressionResponseOutput) LastModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionResponse) string { return v.LastModifiedBy }).(pulumi.StringOutput)
}

// scope on which action rule will apply
func (o SuppressionResponseOutput) Scope() ScopeResponsePtrOutput {
	return o.ApplyT(func(v SuppressionResponse) *ScopeResponse { return v.Scope }).(ScopeResponsePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o SuppressionResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// suppression configuration for the action rule
func (o SuppressionResponseOutput) SuppressionConfig() SuppressionConfigResponseOutput {
	return o.ApplyT(func(v SuppressionResponse) SuppressionConfigResponse { return v.SuppressionConfig }).(SuppressionConfigResponseOutput)
}

// Indicates type of action rule
func (o SuppressionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SuppressionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Schedule for a given suppression configuration.
type SuppressionSchedule struct {
	// End date for suppression
	EndDate *string `pulumi:"endDate"`
	// End date for suppression
	EndTime *string `pulumi:"endTime"`
	// Specifies the values for recurrence pattern
	RecurrenceValues []int `pulumi:"recurrenceValues"`
	// Start date for suppression
	StartDate *string `pulumi:"startDate"`
	// Start time for suppression
	StartTime *string `pulumi:"startTime"`
}

// SuppressionScheduleInput is an input type that accepts SuppressionScheduleArgs and SuppressionScheduleOutput values.
// You can construct a concrete instance of `SuppressionScheduleInput` via:
//
//          SuppressionScheduleArgs{...}
type SuppressionScheduleInput interface {
	pulumi.Input

	ToSuppressionScheduleOutput() SuppressionScheduleOutput
	ToSuppressionScheduleOutputWithContext(context.Context) SuppressionScheduleOutput
}

// Schedule for a given suppression configuration.
type SuppressionScheduleArgs struct {
	// End date for suppression
	EndDate pulumi.StringPtrInput `pulumi:"endDate"`
	// End date for suppression
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Specifies the values for recurrence pattern
	RecurrenceValues pulumi.IntArrayInput `pulumi:"recurrenceValues"`
	// Start date for suppression
	StartDate pulumi.StringPtrInput `pulumi:"startDate"`
	// Start time for suppression
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (SuppressionScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionSchedule)(nil)).Elem()
}

func (i SuppressionScheduleArgs) ToSuppressionScheduleOutput() SuppressionScheduleOutput {
	return i.ToSuppressionScheduleOutputWithContext(context.Background())
}

func (i SuppressionScheduleArgs) ToSuppressionScheduleOutputWithContext(ctx context.Context) SuppressionScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionScheduleOutput)
}

func (i SuppressionScheduleArgs) ToSuppressionSchedulePtrOutput() SuppressionSchedulePtrOutput {
	return i.ToSuppressionSchedulePtrOutputWithContext(context.Background())
}

func (i SuppressionScheduleArgs) ToSuppressionSchedulePtrOutputWithContext(ctx context.Context) SuppressionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionScheduleOutput).ToSuppressionSchedulePtrOutputWithContext(ctx)
}

// SuppressionSchedulePtrInput is an input type that accepts SuppressionScheduleArgs, SuppressionSchedulePtr and SuppressionSchedulePtrOutput values.
// You can construct a concrete instance of `SuppressionSchedulePtrInput` via:
//
//          SuppressionScheduleArgs{...}
//
//  or:
//
//          nil
type SuppressionSchedulePtrInput interface {
	pulumi.Input

	ToSuppressionSchedulePtrOutput() SuppressionSchedulePtrOutput
	ToSuppressionSchedulePtrOutputWithContext(context.Context) SuppressionSchedulePtrOutput
}

type suppressionSchedulePtrType SuppressionScheduleArgs

func SuppressionSchedulePtr(v *SuppressionScheduleArgs) SuppressionSchedulePtrInput {
	return (*suppressionSchedulePtrType)(v)
}

func (*suppressionSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionSchedule)(nil)).Elem()
}

func (i *suppressionSchedulePtrType) ToSuppressionSchedulePtrOutput() SuppressionSchedulePtrOutput {
	return i.ToSuppressionSchedulePtrOutputWithContext(context.Background())
}

func (i *suppressionSchedulePtrType) ToSuppressionSchedulePtrOutputWithContext(ctx context.Context) SuppressionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressionSchedulePtrOutput)
}

// Schedule for a given suppression configuration.
type SuppressionScheduleResponse struct {
	// End date for suppression
	EndDate *string `pulumi:"endDate"`
	// End date for suppression
	EndTime *string `pulumi:"endTime"`
	// Specifies the values for recurrence pattern
	RecurrenceValues []int `pulumi:"recurrenceValues"`
	// Start date for suppression
	StartDate *string `pulumi:"startDate"`
	// Start time for suppression
	StartTime *string `pulumi:"startTime"`
}

// Schedule for a given suppression configuration.
type SuppressionScheduleResponseOutput struct{ *pulumi.OutputState }

func (SuppressionScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuppressionScheduleResponse)(nil)).Elem()
}

func (o SuppressionScheduleResponseOutput) ToSuppressionScheduleResponseOutput() SuppressionScheduleResponseOutput {
	return o
}

func (o SuppressionScheduleResponseOutput) ToSuppressionScheduleResponseOutputWithContext(ctx context.Context) SuppressionScheduleResponseOutput {
	return o
}

func (o SuppressionScheduleResponseOutput) ToSuppressionScheduleResponsePtrOutput() SuppressionScheduleResponsePtrOutput {
	return o.ToSuppressionScheduleResponsePtrOutputWithContext(context.Background())
}

func (o SuppressionScheduleResponseOutput) ToSuppressionScheduleResponsePtrOutputWithContext(ctx context.Context) SuppressionScheduleResponsePtrOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) *SuppressionScheduleResponse {
		return &v
	}).(SuppressionScheduleResponsePtrOutput)
}

// End date for suppression
func (o SuppressionScheduleResponseOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// End date for suppression
func (o SuppressionScheduleResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Specifies the values for recurrence pattern
func (o SuppressionScheduleResponseOutput) RecurrenceValues() pulumi.IntArrayOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) []int { return v.RecurrenceValues }).(pulumi.IntArrayOutput)
}

// Start date for suppression
func (o SuppressionScheduleResponseOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) *string { return v.StartDate }).(pulumi.StringPtrOutput)
}

// Start time for suppression
func (o SuppressionScheduleResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuppressionScheduleResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type SuppressionScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (SuppressionScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressionScheduleResponse)(nil)).Elem()
}

func (o SuppressionScheduleResponsePtrOutput) ToSuppressionScheduleResponsePtrOutput() SuppressionScheduleResponsePtrOutput {
	return o
}

func (o SuppressionScheduleResponsePtrOutput) ToSuppressionScheduleResponsePtrOutputWithContext(ctx context.Context) SuppressionScheduleResponsePtrOutput {
	return o
}

func (o SuppressionScheduleResponsePtrOutput) Elem() SuppressionScheduleResponseOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) SuppressionScheduleResponse { return *v }).(SuppressionScheduleResponseOutput)
}

// End date for suppression
func (o SuppressionScheduleResponsePtrOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndDate
	}).(pulumi.StringPtrOutput)
}

// End date for suppression
func (o SuppressionScheduleResponsePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Specifies the values for recurrence pattern
func (o SuppressionScheduleResponsePtrOutput) RecurrenceValues() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.RecurrenceValues
	}).(pulumi.IntArrayOutput)
}

// Start date for suppression
func (o SuppressionScheduleResponsePtrOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartDate
	}).(pulumi.StringPtrOutput)
}

// Start time for suppression
func (o SuppressionScheduleResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuppressionScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ActionGroupOutput{})
	pulumi.RegisterOutputType(ActionGroupResponseOutput{})
	pulumi.RegisterOutputType(ConditionOutput{})
	pulumi.RegisterOutputType(ConditionPtrOutput{})
	pulumi.RegisterOutputType(ConditionResponseOutput{})
	pulumi.RegisterOutputType(ConditionResponsePtrOutput{})
	pulumi.RegisterOutputType(ConditionsOutput{})
	pulumi.RegisterOutputType(ConditionsPtrOutput{})
	pulumi.RegisterOutputType(ConditionsResponseOutput{})
	pulumi.RegisterOutputType(ConditionsResponsePtrOutput{})
	pulumi.RegisterOutputType(DiagnosticsOutput{})
	pulumi.RegisterOutputType(DiagnosticsResponseOutput{})
	pulumi.RegisterOutputType(ScopeOutput{})
	pulumi.RegisterOutputType(ScopePtrOutput{})
	pulumi.RegisterOutputType(ScopeResponseOutput{})
	pulumi.RegisterOutputType(ScopeResponsePtrOutput{})
	pulumi.RegisterOutputType(SuppressionOutput{})
	pulumi.RegisterOutputType(SuppressionConfigOutput{})
	pulumi.RegisterOutputType(SuppressionConfigResponseOutput{})
	pulumi.RegisterOutputType(SuppressionResponseOutput{})
	pulumi.RegisterOutputType(SuppressionScheduleOutput{})
	pulumi.RegisterOutputType(SuppressionSchedulePtrOutput{})
	pulumi.RegisterOutputType(SuppressionScheduleResponseOutput{})
	pulumi.RegisterOutputType(SuppressionScheduleResponsePtrOutput{})
}
