// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The Action Groups information, used by the alert rule.
type ActionGroupsInformation struct {
	// An optional custom email subject to use in email notifications.
	CustomEmailSubject *string `pulumi:"customEmailSubject"`
	// An optional custom web-hook payload to use in web-hook notifications.
	CustomWebhookPayload *string `pulumi:"customWebhookPayload"`
	// The Action Group resource IDs.
	GroupIds []string `pulumi:"groupIds"`
}

// ActionGroupsInformationInput is an input type that accepts ActionGroupsInformationArgs and ActionGroupsInformationOutput values.
// You can construct a concrete instance of `ActionGroupsInformationInput` via:
//
//          ActionGroupsInformationArgs{...}
type ActionGroupsInformationInput interface {
	pulumi.Input

	ToActionGroupsInformationOutput() ActionGroupsInformationOutput
	ToActionGroupsInformationOutputWithContext(context.Context) ActionGroupsInformationOutput
}

// The Action Groups information, used by the alert rule.
type ActionGroupsInformationArgs struct {
	// An optional custom email subject to use in email notifications.
	CustomEmailSubject pulumi.StringPtrInput `pulumi:"customEmailSubject"`
	// An optional custom web-hook payload to use in web-hook notifications.
	CustomWebhookPayload pulumi.StringPtrInput `pulumi:"customWebhookPayload"`
	// The Action Group resource IDs.
	GroupIds pulumi.StringArrayInput `pulumi:"groupIds"`
}

func (ActionGroupsInformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupsInformation)(nil)).Elem()
}

func (i ActionGroupsInformationArgs) ToActionGroupsInformationOutput() ActionGroupsInformationOutput {
	return i.ToActionGroupsInformationOutputWithContext(context.Background())
}

func (i ActionGroupsInformationArgs) ToActionGroupsInformationOutputWithContext(ctx context.Context) ActionGroupsInformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupsInformationOutput)
}

func (i ActionGroupsInformationArgs) ToActionGroupsInformationPtrOutput() ActionGroupsInformationPtrOutput {
	return i.ToActionGroupsInformationPtrOutputWithContext(context.Background())
}

func (i ActionGroupsInformationArgs) ToActionGroupsInformationPtrOutputWithContext(ctx context.Context) ActionGroupsInformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupsInformationOutput).ToActionGroupsInformationPtrOutputWithContext(ctx)
}

// ActionGroupsInformationPtrInput is an input type that accepts ActionGroupsInformationArgs, ActionGroupsInformationPtr and ActionGroupsInformationPtrOutput values.
// You can construct a concrete instance of `ActionGroupsInformationPtrInput` via:
//
//          ActionGroupsInformationArgs{...}
//
//  or:
//
//          nil
type ActionGroupsInformationPtrInput interface {
	pulumi.Input

	ToActionGroupsInformationPtrOutput() ActionGroupsInformationPtrOutput
	ToActionGroupsInformationPtrOutputWithContext(context.Context) ActionGroupsInformationPtrOutput
}

type actionGroupsInformationPtrType ActionGroupsInformationArgs

func ActionGroupsInformationPtr(v *ActionGroupsInformationArgs) ActionGroupsInformationPtrInput {
	return (*actionGroupsInformationPtrType)(v)
}

func (*actionGroupsInformationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionGroupsInformation)(nil)).Elem()
}

func (i *actionGroupsInformationPtrType) ToActionGroupsInformationPtrOutput() ActionGroupsInformationPtrOutput {
	return i.ToActionGroupsInformationPtrOutputWithContext(context.Background())
}

func (i *actionGroupsInformationPtrType) ToActionGroupsInformationPtrOutputWithContext(ctx context.Context) ActionGroupsInformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupsInformationPtrOutput)
}

// The Action Groups information, used by the alert rule.
type ActionGroupsInformationOutput struct{ *pulumi.OutputState }

func (ActionGroupsInformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupsInformation)(nil)).Elem()
}

func (o ActionGroupsInformationOutput) ToActionGroupsInformationOutput() ActionGroupsInformationOutput {
	return o
}

func (o ActionGroupsInformationOutput) ToActionGroupsInformationOutputWithContext(ctx context.Context) ActionGroupsInformationOutput {
	return o
}

func (o ActionGroupsInformationOutput) ToActionGroupsInformationPtrOutput() ActionGroupsInformationPtrOutput {
	return o.ToActionGroupsInformationPtrOutputWithContext(context.Background())
}

func (o ActionGroupsInformationOutput) ToActionGroupsInformationPtrOutputWithContext(ctx context.Context) ActionGroupsInformationPtrOutput {
	return o.ApplyT(func(v ActionGroupsInformation) *ActionGroupsInformation {
		return &v
	}).(ActionGroupsInformationPtrOutput)
}

// An optional custom email subject to use in email notifications.
func (o ActionGroupsInformationOutput) CustomEmailSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupsInformation) *string { return v.CustomEmailSubject }).(pulumi.StringPtrOutput)
}

// An optional custom web-hook payload to use in web-hook notifications.
func (o ActionGroupsInformationOutput) CustomWebhookPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupsInformation) *string { return v.CustomWebhookPayload }).(pulumi.StringPtrOutput)
}

// The Action Group resource IDs.
func (o ActionGroupsInformationOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionGroupsInformation) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

type ActionGroupsInformationPtrOutput struct{ *pulumi.OutputState }

func (ActionGroupsInformationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionGroupsInformation)(nil)).Elem()
}

func (o ActionGroupsInformationPtrOutput) ToActionGroupsInformationPtrOutput() ActionGroupsInformationPtrOutput {
	return o
}

func (o ActionGroupsInformationPtrOutput) ToActionGroupsInformationPtrOutputWithContext(ctx context.Context) ActionGroupsInformationPtrOutput {
	return o
}

func (o ActionGroupsInformationPtrOutput) Elem() ActionGroupsInformationOutput {
	return o.ApplyT(func(v *ActionGroupsInformation) ActionGroupsInformation { return *v }).(ActionGroupsInformationOutput)
}

// An optional custom email subject to use in email notifications.
func (o ActionGroupsInformationPtrOutput) CustomEmailSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionGroupsInformation) *string {
		if v == nil {
			return nil
		}
		return v.CustomEmailSubject
	}).(pulumi.StringPtrOutput)
}

// An optional custom web-hook payload to use in web-hook notifications.
func (o ActionGroupsInformationPtrOutput) CustomWebhookPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionGroupsInformation) *string {
		if v == nil {
			return nil
		}
		return v.CustomWebhookPayload
	}).(pulumi.StringPtrOutput)
}

// The Action Group resource IDs.
func (o ActionGroupsInformationPtrOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionGroupsInformation) []string {
		if v == nil {
			return nil
		}
		return v.GroupIds
	}).(pulumi.StringArrayOutput)
}

// The Action Groups information, used by the alert rule.
type ActionGroupsInformationResponse struct {
	// An optional custom email subject to use in email notifications.
	CustomEmailSubject *string `pulumi:"customEmailSubject"`
	// An optional custom web-hook payload to use in web-hook notifications.
	CustomWebhookPayload *string `pulumi:"customWebhookPayload"`
	// The Action Group resource IDs.
	GroupIds []string `pulumi:"groupIds"`
}

// ActionGroupsInformationResponseInput is an input type that accepts ActionGroupsInformationResponseArgs and ActionGroupsInformationResponseOutput values.
// You can construct a concrete instance of `ActionGroupsInformationResponseInput` via:
//
//          ActionGroupsInformationResponseArgs{...}
type ActionGroupsInformationResponseInput interface {
	pulumi.Input

	ToActionGroupsInformationResponseOutput() ActionGroupsInformationResponseOutput
	ToActionGroupsInformationResponseOutputWithContext(context.Context) ActionGroupsInformationResponseOutput
}

// The Action Groups information, used by the alert rule.
type ActionGroupsInformationResponseArgs struct {
	// An optional custom email subject to use in email notifications.
	CustomEmailSubject pulumi.StringPtrInput `pulumi:"customEmailSubject"`
	// An optional custom web-hook payload to use in web-hook notifications.
	CustomWebhookPayload pulumi.StringPtrInput `pulumi:"customWebhookPayload"`
	// The Action Group resource IDs.
	GroupIds pulumi.StringArrayInput `pulumi:"groupIds"`
}

func (ActionGroupsInformationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupsInformationResponse)(nil)).Elem()
}

func (i ActionGroupsInformationResponseArgs) ToActionGroupsInformationResponseOutput() ActionGroupsInformationResponseOutput {
	return i.ToActionGroupsInformationResponseOutputWithContext(context.Background())
}

func (i ActionGroupsInformationResponseArgs) ToActionGroupsInformationResponseOutputWithContext(ctx context.Context) ActionGroupsInformationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupsInformationResponseOutput)
}

func (i ActionGroupsInformationResponseArgs) ToActionGroupsInformationResponsePtrOutput() ActionGroupsInformationResponsePtrOutput {
	return i.ToActionGroupsInformationResponsePtrOutputWithContext(context.Background())
}

func (i ActionGroupsInformationResponseArgs) ToActionGroupsInformationResponsePtrOutputWithContext(ctx context.Context) ActionGroupsInformationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupsInformationResponseOutput).ToActionGroupsInformationResponsePtrOutputWithContext(ctx)
}

// ActionGroupsInformationResponsePtrInput is an input type that accepts ActionGroupsInformationResponseArgs, ActionGroupsInformationResponsePtr and ActionGroupsInformationResponsePtrOutput values.
// You can construct a concrete instance of `ActionGroupsInformationResponsePtrInput` via:
//
//          ActionGroupsInformationResponseArgs{...}
//
//  or:
//
//          nil
type ActionGroupsInformationResponsePtrInput interface {
	pulumi.Input

	ToActionGroupsInformationResponsePtrOutput() ActionGroupsInformationResponsePtrOutput
	ToActionGroupsInformationResponsePtrOutputWithContext(context.Context) ActionGroupsInformationResponsePtrOutput
}

type actionGroupsInformationResponsePtrType ActionGroupsInformationResponseArgs

func ActionGroupsInformationResponsePtr(v *ActionGroupsInformationResponseArgs) ActionGroupsInformationResponsePtrInput {
	return (*actionGroupsInformationResponsePtrType)(v)
}

func (*actionGroupsInformationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionGroupsInformationResponse)(nil)).Elem()
}

func (i *actionGroupsInformationResponsePtrType) ToActionGroupsInformationResponsePtrOutput() ActionGroupsInformationResponsePtrOutput {
	return i.ToActionGroupsInformationResponsePtrOutputWithContext(context.Background())
}

func (i *actionGroupsInformationResponsePtrType) ToActionGroupsInformationResponsePtrOutputWithContext(ctx context.Context) ActionGroupsInformationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupsInformationResponsePtrOutput)
}

// The Action Groups information, used by the alert rule.
type ActionGroupsInformationResponseOutput struct{ *pulumi.OutputState }

func (ActionGroupsInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupsInformationResponse)(nil)).Elem()
}

func (o ActionGroupsInformationResponseOutput) ToActionGroupsInformationResponseOutput() ActionGroupsInformationResponseOutput {
	return o
}

func (o ActionGroupsInformationResponseOutput) ToActionGroupsInformationResponseOutputWithContext(ctx context.Context) ActionGroupsInformationResponseOutput {
	return o
}

func (o ActionGroupsInformationResponseOutput) ToActionGroupsInformationResponsePtrOutput() ActionGroupsInformationResponsePtrOutput {
	return o.ToActionGroupsInformationResponsePtrOutputWithContext(context.Background())
}

func (o ActionGroupsInformationResponseOutput) ToActionGroupsInformationResponsePtrOutputWithContext(ctx context.Context) ActionGroupsInformationResponsePtrOutput {
	return o.ApplyT(func(v ActionGroupsInformationResponse) *ActionGroupsInformationResponse {
		return &v
	}).(ActionGroupsInformationResponsePtrOutput)
}

// An optional custom email subject to use in email notifications.
func (o ActionGroupsInformationResponseOutput) CustomEmailSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupsInformationResponse) *string { return v.CustomEmailSubject }).(pulumi.StringPtrOutput)
}

// An optional custom web-hook payload to use in web-hook notifications.
func (o ActionGroupsInformationResponseOutput) CustomWebhookPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupsInformationResponse) *string { return v.CustomWebhookPayload }).(pulumi.StringPtrOutput)
}

// The Action Group resource IDs.
func (o ActionGroupsInformationResponseOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionGroupsInformationResponse) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

type ActionGroupsInformationResponsePtrOutput struct{ *pulumi.OutputState }

func (ActionGroupsInformationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionGroupsInformationResponse)(nil)).Elem()
}

func (o ActionGroupsInformationResponsePtrOutput) ToActionGroupsInformationResponsePtrOutput() ActionGroupsInformationResponsePtrOutput {
	return o
}

func (o ActionGroupsInformationResponsePtrOutput) ToActionGroupsInformationResponsePtrOutputWithContext(ctx context.Context) ActionGroupsInformationResponsePtrOutput {
	return o
}

func (o ActionGroupsInformationResponsePtrOutput) Elem() ActionGroupsInformationResponseOutput {
	return o.ApplyT(func(v *ActionGroupsInformationResponse) ActionGroupsInformationResponse { return *v }).(ActionGroupsInformationResponseOutput)
}

// An optional custom email subject to use in email notifications.
func (o ActionGroupsInformationResponsePtrOutput) CustomEmailSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionGroupsInformationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomEmailSubject
	}).(pulumi.StringPtrOutput)
}

// An optional custom web-hook payload to use in web-hook notifications.
func (o ActionGroupsInformationResponsePtrOutput) CustomWebhookPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionGroupsInformationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomWebhookPayload
	}).(pulumi.StringPtrOutput)
}

// The Action Group resource IDs.
func (o ActionGroupsInformationResponsePtrOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionGroupsInformationResponse) []string {
		if v == nil {
			return nil
		}
		return v.GroupIds
	}).(pulumi.StringArrayOutput)
}

// Action rule properties defining scope, conditions, suppression logic for action rule
type ActionRuleProperties struct {
	// conditions on which alerts will be filtered
	Conditions *Conditions `pulumi:"conditions"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// scope on which action rule will apply
	Scope *Scope `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// Indicates type of action rule
	Type string `pulumi:"type"`
}

// ActionRulePropertiesInput is an input type that accepts ActionRulePropertiesArgs and ActionRulePropertiesOutput values.
// You can construct a concrete instance of `ActionRulePropertiesInput` via:
//
//          ActionRulePropertiesArgs{...}
type ActionRulePropertiesInput interface {
	pulumi.Input

	ToActionRulePropertiesOutput() ActionRulePropertiesOutput
	ToActionRulePropertiesOutputWithContext(context.Context) ActionRulePropertiesOutput
}

// Action rule properties defining scope, conditions, suppression logic for action rule
type ActionRulePropertiesArgs struct {
	// conditions on which alerts will be filtered
	Conditions ConditionsPtrInput `pulumi:"conditions"`
	// Description of action rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// scope on which action rule will apply
	Scope ScopePtrInput `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Indicates type of action rule
	Type pulumi.StringInput `pulumi:"type"`
}

func (ActionRulePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleProperties)(nil)).Elem()
}

func (i ActionRulePropertiesArgs) ToActionRulePropertiesOutput() ActionRulePropertiesOutput {
	return i.ToActionRulePropertiesOutputWithContext(context.Background())
}

func (i ActionRulePropertiesArgs) ToActionRulePropertiesOutputWithContext(ctx context.Context) ActionRulePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRulePropertiesOutput)
}

func (i ActionRulePropertiesArgs) ToActionRulePropertiesPtrOutput() ActionRulePropertiesPtrOutput {
	return i.ToActionRulePropertiesPtrOutputWithContext(context.Background())
}

func (i ActionRulePropertiesArgs) ToActionRulePropertiesPtrOutputWithContext(ctx context.Context) ActionRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRulePropertiesOutput).ToActionRulePropertiesPtrOutputWithContext(ctx)
}

// ActionRulePropertiesPtrInput is an input type that accepts ActionRulePropertiesArgs, ActionRulePropertiesPtr and ActionRulePropertiesPtrOutput values.
// You can construct a concrete instance of `ActionRulePropertiesPtrInput` via:
//
//          ActionRulePropertiesArgs{...}
//
//  or:
//
//          nil
type ActionRulePropertiesPtrInput interface {
	pulumi.Input

	ToActionRulePropertiesPtrOutput() ActionRulePropertiesPtrOutput
	ToActionRulePropertiesPtrOutputWithContext(context.Context) ActionRulePropertiesPtrOutput
}

type actionRulePropertiesPtrType ActionRulePropertiesArgs

func ActionRulePropertiesPtr(v *ActionRulePropertiesArgs) ActionRulePropertiesPtrInput {
	return (*actionRulePropertiesPtrType)(v)
}

func (*actionRulePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleProperties)(nil)).Elem()
}

func (i *actionRulePropertiesPtrType) ToActionRulePropertiesPtrOutput() ActionRulePropertiesPtrOutput {
	return i.ToActionRulePropertiesPtrOutputWithContext(context.Background())
}

func (i *actionRulePropertiesPtrType) ToActionRulePropertiesPtrOutputWithContext(ctx context.Context) ActionRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRulePropertiesPtrOutput)
}

// Action rule properties defining scope, conditions, suppression logic for action rule
type ActionRulePropertiesOutput struct{ *pulumi.OutputState }

func (ActionRulePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleProperties)(nil)).Elem()
}

func (o ActionRulePropertiesOutput) ToActionRulePropertiesOutput() ActionRulePropertiesOutput {
	return o
}

func (o ActionRulePropertiesOutput) ToActionRulePropertiesOutputWithContext(ctx context.Context) ActionRulePropertiesOutput {
	return o
}

func (o ActionRulePropertiesOutput) ToActionRulePropertiesPtrOutput() ActionRulePropertiesPtrOutput {
	return o.ToActionRulePropertiesPtrOutputWithContext(context.Background())
}

func (o ActionRulePropertiesOutput) ToActionRulePropertiesPtrOutputWithContext(ctx context.Context) ActionRulePropertiesPtrOutput {
	return o.ApplyT(func(v ActionRuleProperties) *ActionRuleProperties {
		return &v
	}).(ActionRulePropertiesPtrOutput)
}

// conditions on which alerts will be filtered
func (o ActionRulePropertiesOutput) Conditions() ConditionsPtrOutput {
	return o.ApplyT(func(v ActionRuleProperties) *Conditions { return v.Conditions }).(ConditionsPtrOutput)
}

// Description of action rule
func (o ActionRulePropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionRuleProperties) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// scope on which action rule will apply
func (o ActionRulePropertiesOutput) Scope() ScopePtrOutput {
	return o.ApplyT(func(v ActionRuleProperties) *Scope { return v.Scope }).(ScopePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o ActionRulePropertiesOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionRuleProperties) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Indicates type of action rule
func (o ActionRulePropertiesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRuleProperties) string { return v.Type }).(pulumi.StringOutput)
}

type ActionRulePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ActionRulePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleProperties)(nil)).Elem()
}

func (o ActionRulePropertiesPtrOutput) ToActionRulePropertiesPtrOutput() ActionRulePropertiesPtrOutput {
	return o
}

func (o ActionRulePropertiesPtrOutput) ToActionRulePropertiesPtrOutputWithContext(ctx context.Context) ActionRulePropertiesPtrOutput {
	return o
}

func (o ActionRulePropertiesPtrOutput) Elem() ActionRulePropertiesOutput {
	return o.ApplyT(func(v *ActionRuleProperties) ActionRuleProperties { return *v }).(ActionRulePropertiesOutput)
}

// conditions on which alerts will be filtered
func (o ActionRulePropertiesPtrOutput) Conditions() ConditionsPtrOutput {
	return o.ApplyT(func(v *ActionRuleProperties) *Conditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ConditionsPtrOutput)
}

// Description of action rule
func (o ActionRulePropertiesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleProperties) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// scope on which action rule will apply
func (o ActionRulePropertiesPtrOutput) Scope() ScopePtrOutput {
	return o.ApplyT(func(v *ActionRuleProperties) *Scope {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(ScopePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o ActionRulePropertiesPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleProperties) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Indicates type of action rule
func (o ActionRulePropertiesPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Action rule properties defining scope, conditions, suppression logic for action rule
type ActionRulePropertiesResponse struct {
	// conditions on which alerts will be filtered
	Conditions *ConditionsResponse `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt string `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy string `pulumi:"createdBy"`
	// Description of action rule
	Description *string `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt string `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy string `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope *ScopeResponse `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status *string `pulumi:"status"`
	// Indicates type of action rule
	Type string `pulumi:"type"`
}

// ActionRulePropertiesResponseInput is an input type that accepts ActionRulePropertiesResponseArgs and ActionRulePropertiesResponseOutput values.
// You can construct a concrete instance of `ActionRulePropertiesResponseInput` via:
//
//          ActionRulePropertiesResponseArgs{...}
type ActionRulePropertiesResponseInput interface {
	pulumi.Input

	ToActionRulePropertiesResponseOutput() ActionRulePropertiesResponseOutput
	ToActionRulePropertiesResponseOutputWithContext(context.Context) ActionRulePropertiesResponseOutput
}

// Action rule properties defining scope, conditions, suppression logic for action rule
type ActionRulePropertiesResponseArgs struct {
	// conditions on which alerts will be filtered
	Conditions ConditionsResponsePtrInput `pulumi:"conditions"`
	// Creation time of action rule. Date-Time in ISO-8601 format.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Created by user name.
	CreatedBy pulumi.StringInput `pulumi:"createdBy"`
	// Description of action rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Last updated time of action rule. Date-Time in ISO-8601 format.
	LastModifiedAt pulumi.StringInput `pulumi:"lastModifiedAt"`
	// Last modified by user name.
	LastModifiedBy pulumi.StringInput `pulumi:"lastModifiedBy"`
	// scope on which action rule will apply
	Scope ScopeResponsePtrInput `pulumi:"scope"`
	// Indicates if the given action rule is enabled or disabled
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Indicates type of action rule
	Type pulumi.StringInput `pulumi:"type"`
}

func (ActionRulePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRulePropertiesResponse)(nil)).Elem()
}

func (i ActionRulePropertiesResponseArgs) ToActionRulePropertiesResponseOutput() ActionRulePropertiesResponseOutput {
	return i.ToActionRulePropertiesResponseOutputWithContext(context.Background())
}

func (i ActionRulePropertiesResponseArgs) ToActionRulePropertiesResponseOutputWithContext(ctx context.Context) ActionRulePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRulePropertiesResponseOutput)
}

func (i ActionRulePropertiesResponseArgs) ToActionRulePropertiesResponsePtrOutput() ActionRulePropertiesResponsePtrOutput {
	return i.ToActionRulePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i ActionRulePropertiesResponseArgs) ToActionRulePropertiesResponsePtrOutputWithContext(ctx context.Context) ActionRulePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRulePropertiesResponseOutput).ToActionRulePropertiesResponsePtrOutputWithContext(ctx)
}

// ActionRulePropertiesResponsePtrInput is an input type that accepts ActionRulePropertiesResponseArgs, ActionRulePropertiesResponsePtr and ActionRulePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `ActionRulePropertiesResponsePtrInput` via:
//
//          ActionRulePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type ActionRulePropertiesResponsePtrInput interface {
	pulumi.Input

	ToActionRulePropertiesResponsePtrOutput() ActionRulePropertiesResponsePtrOutput
	ToActionRulePropertiesResponsePtrOutputWithContext(context.Context) ActionRulePropertiesResponsePtrOutput
}

type actionRulePropertiesResponsePtrType ActionRulePropertiesResponseArgs

func ActionRulePropertiesResponsePtr(v *ActionRulePropertiesResponseArgs) ActionRulePropertiesResponsePtrInput {
	return (*actionRulePropertiesResponsePtrType)(v)
}

func (*actionRulePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRulePropertiesResponse)(nil)).Elem()
}

func (i *actionRulePropertiesResponsePtrType) ToActionRulePropertiesResponsePtrOutput() ActionRulePropertiesResponsePtrOutput {
	return i.ToActionRulePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *actionRulePropertiesResponsePtrType) ToActionRulePropertiesResponsePtrOutputWithContext(ctx context.Context) ActionRulePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRulePropertiesResponsePtrOutput)
}

// Action rule properties defining scope, conditions, suppression logic for action rule
type ActionRulePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ActionRulePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRulePropertiesResponse)(nil)).Elem()
}

func (o ActionRulePropertiesResponseOutput) ToActionRulePropertiesResponseOutput() ActionRulePropertiesResponseOutput {
	return o
}

func (o ActionRulePropertiesResponseOutput) ToActionRulePropertiesResponseOutputWithContext(ctx context.Context) ActionRulePropertiesResponseOutput {
	return o
}

func (o ActionRulePropertiesResponseOutput) ToActionRulePropertiesResponsePtrOutput() ActionRulePropertiesResponsePtrOutput {
	return o.ToActionRulePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ActionRulePropertiesResponseOutput) ToActionRulePropertiesResponsePtrOutputWithContext(ctx context.Context) ActionRulePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ActionRulePropertiesResponse) *ActionRulePropertiesResponse {
		return &v
	}).(ActionRulePropertiesResponsePtrOutput)
}

// conditions on which alerts will be filtered
func (o ActionRulePropertiesResponseOutput) Conditions() ConditionsResponsePtrOutput {
	return o.ApplyT(func(v ActionRulePropertiesResponse) *ConditionsResponse { return v.Conditions }).(ConditionsResponsePtrOutput)
}

// Creation time of action rule. Date-Time in ISO-8601 format.
func (o ActionRulePropertiesResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRulePropertiesResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Created by user name.
func (o ActionRulePropertiesResponseOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRulePropertiesResponse) string { return v.CreatedBy }).(pulumi.StringOutput)
}

// Description of action rule
func (o ActionRulePropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionRulePropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Last updated time of action rule. Date-Time in ISO-8601 format.
func (o ActionRulePropertiesResponseOutput) LastModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRulePropertiesResponse) string { return v.LastModifiedAt }).(pulumi.StringOutput)
}

// Last modified by user name.
func (o ActionRulePropertiesResponseOutput) LastModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRulePropertiesResponse) string { return v.LastModifiedBy }).(pulumi.StringOutput)
}

// scope on which action rule will apply
func (o ActionRulePropertiesResponseOutput) Scope() ScopeResponsePtrOutput {
	return o.ApplyT(func(v ActionRulePropertiesResponse) *ScopeResponse { return v.Scope }).(ScopeResponsePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o ActionRulePropertiesResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionRulePropertiesResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Indicates type of action rule
func (o ActionRulePropertiesResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRulePropertiesResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ActionRulePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ActionRulePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRulePropertiesResponse)(nil)).Elem()
}

func (o ActionRulePropertiesResponsePtrOutput) ToActionRulePropertiesResponsePtrOutput() ActionRulePropertiesResponsePtrOutput {
	return o
}

func (o ActionRulePropertiesResponsePtrOutput) ToActionRulePropertiesResponsePtrOutputWithContext(ctx context.Context) ActionRulePropertiesResponsePtrOutput {
	return o
}

func (o ActionRulePropertiesResponsePtrOutput) Elem() ActionRulePropertiesResponseOutput {
	return o.ApplyT(func(v *ActionRulePropertiesResponse) ActionRulePropertiesResponse { return *v }).(ActionRulePropertiesResponseOutput)
}

// conditions on which alerts will be filtered
func (o ActionRulePropertiesResponsePtrOutput) Conditions() ConditionsResponsePtrOutput {
	return o.ApplyT(func(v *ActionRulePropertiesResponse) *ConditionsResponse {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ConditionsResponsePtrOutput)
}

// Creation time of action rule. Date-Time in ISO-8601 format.
func (o ActionRulePropertiesResponsePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// Created by user name.
func (o ActionRulePropertiesResponsePtrOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedBy
	}).(pulumi.StringPtrOutput)
}

// Description of action rule
func (o ActionRulePropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Last updated time of action rule. Date-Time in ISO-8601 format.
func (o ActionRulePropertiesResponsePtrOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastModifiedAt
	}).(pulumi.StringPtrOutput)
}

// Last modified by user name.
func (o ActionRulePropertiesResponsePtrOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastModifiedBy
	}).(pulumi.StringPtrOutput)
}

// scope on which action rule will apply
func (o ActionRulePropertiesResponsePtrOutput) Scope() ScopeResponsePtrOutput {
	return o.ApplyT(func(v *ActionRulePropertiesResponse) *ScopeResponse {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(ScopeResponsePtrOutput)
}

// Indicates if the given action rule is enabled or disabled
func (o ActionRulePropertiesResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Indicates type of action rule
func (o ActionRulePropertiesResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// condition to trigger an action rule
type Condition struct {
	// operator for a given condition
	Operator *string `pulumi:"operator"`
	// list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// ConditionInput is an input type that accepts ConditionArgs and ConditionOutput values.
// You can construct a concrete instance of `ConditionInput` via:
//
//          ConditionArgs{...}
type ConditionInput interface {
	pulumi.Input

	ToConditionOutput() ConditionOutput
	ToConditionOutputWithContext(context.Context) ConditionOutput
}

// condition to trigger an action rule
type ConditionArgs struct {
	// operator for a given condition
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Condition)(nil)).Elem()
}

func (i ConditionArgs) ToConditionOutput() ConditionOutput {
	return i.ToConditionOutputWithContext(context.Background())
}

func (i ConditionArgs) ToConditionOutputWithContext(ctx context.Context) ConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionOutput)
}

func (i ConditionArgs) ToConditionPtrOutput() ConditionPtrOutput {
	return i.ToConditionPtrOutputWithContext(context.Background())
}

func (i ConditionArgs) ToConditionPtrOutputWithContext(ctx context.Context) ConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionOutput).ToConditionPtrOutputWithContext(ctx)
}

// ConditionPtrInput is an input type that accepts ConditionArgs, ConditionPtr and ConditionPtrOutput values.
// You can construct a concrete instance of `ConditionPtrInput` via:
//
//          ConditionArgs{...}
//
//  or:
//
//          nil
type ConditionPtrInput interface {
	pulumi.Input

	ToConditionPtrOutput() ConditionPtrOutput
	ToConditionPtrOutputWithContext(context.Context) ConditionPtrOutput
}

type conditionPtrType ConditionArgs

func ConditionPtr(v *ConditionArgs) ConditionPtrInput {
	return (*conditionPtrType)(v)
}

func (*conditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Condition)(nil)).Elem()
}

func (i *conditionPtrType) ToConditionPtrOutput() ConditionPtrOutput {
	return i.ToConditionPtrOutputWithContext(context.Background())
}

func (i *conditionPtrType) ToConditionPtrOutputWithContext(ctx context.Context) ConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionPtrOutput)
}

// condition to trigger an action rule
type ConditionOutput struct{ *pulumi.OutputState }

func (ConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Condition)(nil)).Elem()
}

func (o ConditionOutput) ToConditionOutput() ConditionOutput {
	return o
}

func (o ConditionOutput) ToConditionOutputWithContext(ctx context.Context) ConditionOutput {
	return o
}

func (o ConditionOutput) ToConditionPtrOutput() ConditionPtrOutput {
	return o.ToConditionPtrOutputWithContext(context.Background())
}

func (o ConditionOutput) ToConditionPtrOutputWithContext(ctx context.Context) ConditionPtrOutput {
	return o.ApplyT(func(v Condition) *Condition {
		return &v
	}).(ConditionPtrOutput)
}

// operator for a given condition
func (o ConditionOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// list of values to match for a given condition.
func (o ConditionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Condition) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ConditionPtrOutput struct{ *pulumi.OutputState }

func (ConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Condition)(nil)).Elem()
}

func (o ConditionPtrOutput) ToConditionPtrOutput() ConditionPtrOutput {
	return o
}

func (o ConditionPtrOutput) ToConditionPtrOutputWithContext(ctx context.Context) ConditionPtrOutput {
	return o
}

func (o ConditionPtrOutput) Elem() ConditionOutput {
	return o.ApplyT(func(v *Condition) Condition { return *v }).(ConditionOutput)
}

// operator for a given condition
func (o ConditionPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Condition) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// list of values to match for a given condition.
func (o ConditionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Condition) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// condition to trigger an action rule
type ConditionResponse struct {
	// operator for a given condition
	Operator *string `pulumi:"operator"`
	// list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// ConditionResponseInput is an input type that accepts ConditionResponseArgs and ConditionResponseOutput values.
// You can construct a concrete instance of `ConditionResponseInput` via:
//
//          ConditionResponseArgs{...}
type ConditionResponseInput interface {
	pulumi.Input

	ToConditionResponseOutput() ConditionResponseOutput
	ToConditionResponseOutputWithContext(context.Context) ConditionResponseOutput
}

// condition to trigger an action rule
type ConditionResponseArgs struct {
	// operator for a given condition
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ConditionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionResponse)(nil)).Elem()
}

func (i ConditionResponseArgs) ToConditionResponseOutput() ConditionResponseOutput {
	return i.ToConditionResponseOutputWithContext(context.Background())
}

func (i ConditionResponseArgs) ToConditionResponseOutputWithContext(ctx context.Context) ConditionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionResponseOutput)
}

func (i ConditionResponseArgs) ToConditionResponsePtrOutput() ConditionResponsePtrOutput {
	return i.ToConditionResponsePtrOutputWithContext(context.Background())
}

func (i ConditionResponseArgs) ToConditionResponsePtrOutputWithContext(ctx context.Context) ConditionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionResponseOutput).ToConditionResponsePtrOutputWithContext(ctx)
}

// ConditionResponsePtrInput is an input type that accepts ConditionResponseArgs, ConditionResponsePtr and ConditionResponsePtrOutput values.
// You can construct a concrete instance of `ConditionResponsePtrInput` via:
//
//          ConditionResponseArgs{...}
//
//  or:
//
//          nil
type ConditionResponsePtrInput interface {
	pulumi.Input

	ToConditionResponsePtrOutput() ConditionResponsePtrOutput
	ToConditionResponsePtrOutputWithContext(context.Context) ConditionResponsePtrOutput
}

type conditionResponsePtrType ConditionResponseArgs

func ConditionResponsePtr(v *ConditionResponseArgs) ConditionResponsePtrInput {
	return (*conditionResponsePtrType)(v)
}

func (*conditionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionResponse)(nil)).Elem()
}

func (i *conditionResponsePtrType) ToConditionResponsePtrOutput() ConditionResponsePtrOutput {
	return i.ToConditionResponsePtrOutputWithContext(context.Background())
}

func (i *conditionResponsePtrType) ToConditionResponsePtrOutputWithContext(ctx context.Context) ConditionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionResponsePtrOutput)
}

// condition to trigger an action rule
type ConditionResponseOutput struct{ *pulumi.OutputState }

func (ConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionResponse)(nil)).Elem()
}

func (o ConditionResponseOutput) ToConditionResponseOutput() ConditionResponseOutput {
	return o
}

func (o ConditionResponseOutput) ToConditionResponseOutputWithContext(ctx context.Context) ConditionResponseOutput {
	return o
}

func (o ConditionResponseOutput) ToConditionResponsePtrOutput() ConditionResponsePtrOutput {
	return o.ToConditionResponsePtrOutputWithContext(context.Background())
}

func (o ConditionResponseOutput) ToConditionResponsePtrOutputWithContext(ctx context.Context) ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionResponse) *ConditionResponse {
		return &v
	}).(ConditionResponsePtrOutput)
}

// operator for a given condition
func (o ConditionResponseOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// list of values to match for a given condition.
func (o ConditionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConditionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ConditionResponsePtrOutput struct{ *pulumi.OutputState }

func (ConditionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionResponse)(nil)).Elem()
}

func (o ConditionResponsePtrOutput) ToConditionResponsePtrOutput() ConditionResponsePtrOutput {
	return o
}

func (o ConditionResponsePtrOutput) ToConditionResponsePtrOutputWithContext(ctx context.Context) ConditionResponsePtrOutput {
	return o
}

func (o ConditionResponsePtrOutput) Elem() ConditionResponseOutput {
	return o.ApplyT(func(v *ConditionResponse) ConditionResponse { return *v }).(ConditionResponseOutput)
}

// operator for a given condition
func (o ConditionResponsePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConditionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// list of values to match for a given condition.
func (o ConditionResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConditionResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type Conditions struct {
	// filter alerts by alert context (payload)
	AlertContext *Condition `pulumi:"alertContext"`
	// filter alerts by alert rule id
	AlertRuleId *Condition `pulumi:"alertRuleId"`
	// filter alerts by alert rule description
	Description *Condition `pulumi:"description"`
	// filter alerts by monitor condition
	MonitorCondition *Condition `pulumi:"monitorCondition"`
	// filter alerts by monitor service
	MonitorService *Condition `pulumi:"monitorService"`
	// filter alerts by severity
	Severity *Condition `pulumi:"severity"`
	// filter alerts by target resource type
	TargetResourceType *Condition `pulumi:"targetResourceType"`
}

// ConditionsInput is an input type that accepts ConditionsArgs and ConditionsOutput values.
// You can construct a concrete instance of `ConditionsInput` via:
//
//          ConditionsArgs{...}
type ConditionsInput interface {
	pulumi.Input

	ToConditionsOutput() ConditionsOutput
	ToConditionsOutputWithContext(context.Context) ConditionsOutput
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsArgs struct {
	// filter alerts by alert context (payload)
	AlertContext ConditionPtrInput `pulumi:"alertContext"`
	// filter alerts by alert rule id
	AlertRuleId ConditionPtrInput `pulumi:"alertRuleId"`
	// filter alerts by alert rule description
	Description ConditionPtrInput `pulumi:"description"`
	// filter alerts by monitor condition
	MonitorCondition ConditionPtrInput `pulumi:"monitorCondition"`
	// filter alerts by monitor service
	MonitorService ConditionPtrInput `pulumi:"monitorService"`
	// filter alerts by severity
	Severity ConditionPtrInput `pulumi:"severity"`
	// filter alerts by target resource type
	TargetResourceType ConditionPtrInput `pulumi:"targetResourceType"`
}

func (ConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Conditions)(nil)).Elem()
}

func (i ConditionsArgs) ToConditionsOutput() ConditionsOutput {
	return i.ToConditionsOutputWithContext(context.Background())
}

func (i ConditionsArgs) ToConditionsOutputWithContext(ctx context.Context) ConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsOutput)
}

func (i ConditionsArgs) ToConditionsPtrOutput() ConditionsPtrOutput {
	return i.ToConditionsPtrOutputWithContext(context.Background())
}

func (i ConditionsArgs) ToConditionsPtrOutputWithContext(ctx context.Context) ConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsOutput).ToConditionsPtrOutputWithContext(ctx)
}

// ConditionsPtrInput is an input type that accepts ConditionsArgs, ConditionsPtr and ConditionsPtrOutput values.
// You can construct a concrete instance of `ConditionsPtrInput` via:
//
//          ConditionsArgs{...}
//
//  or:
//
//          nil
type ConditionsPtrInput interface {
	pulumi.Input

	ToConditionsPtrOutput() ConditionsPtrOutput
	ToConditionsPtrOutputWithContext(context.Context) ConditionsPtrOutput
}

type conditionsPtrType ConditionsArgs

func ConditionsPtr(v *ConditionsArgs) ConditionsPtrInput {
	return (*conditionsPtrType)(v)
}

func (*conditionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Conditions)(nil)).Elem()
}

func (i *conditionsPtrType) ToConditionsPtrOutput() ConditionsPtrOutput {
	return i.ToConditionsPtrOutputWithContext(context.Background())
}

func (i *conditionsPtrType) ToConditionsPtrOutputWithContext(ctx context.Context) ConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsPtrOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsOutput struct{ *pulumi.OutputState }

func (ConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Conditions)(nil)).Elem()
}

func (o ConditionsOutput) ToConditionsOutput() ConditionsOutput {
	return o
}

func (o ConditionsOutput) ToConditionsOutputWithContext(ctx context.Context) ConditionsOutput {
	return o
}

func (o ConditionsOutput) ToConditionsPtrOutput() ConditionsPtrOutput {
	return o.ToConditionsPtrOutputWithContext(context.Background())
}

func (o ConditionsOutput) ToConditionsPtrOutputWithContext(ctx context.Context) ConditionsPtrOutput {
	return o.ApplyT(func(v Conditions) *Conditions {
		return &v
	}).(ConditionsPtrOutput)
}

// filter alerts by alert context (payload)
func (o ConditionsOutput) AlertContext() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.AlertContext }).(ConditionPtrOutput)
}

// filter alerts by alert rule id
func (o ConditionsOutput) AlertRuleId() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.AlertRuleId }).(ConditionPtrOutput)
}

// filter alerts by alert rule description
func (o ConditionsOutput) Description() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.Description }).(ConditionPtrOutput)
}

// filter alerts by monitor condition
func (o ConditionsOutput) MonitorCondition() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.MonitorCondition }).(ConditionPtrOutput)
}

// filter alerts by monitor service
func (o ConditionsOutput) MonitorService() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.MonitorService }).(ConditionPtrOutput)
}

// filter alerts by severity
func (o ConditionsOutput) Severity() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.Severity }).(ConditionPtrOutput)
}

// filter alerts by target resource type
func (o ConditionsOutput) TargetResourceType() ConditionPtrOutput {
	return o.ApplyT(func(v Conditions) *Condition { return v.TargetResourceType }).(ConditionPtrOutput)
}

type ConditionsPtrOutput struct{ *pulumi.OutputState }

func (ConditionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Conditions)(nil)).Elem()
}

func (o ConditionsPtrOutput) ToConditionsPtrOutput() ConditionsPtrOutput {
	return o
}

func (o ConditionsPtrOutput) ToConditionsPtrOutputWithContext(ctx context.Context) ConditionsPtrOutput {
	return o
}

func (o ConditionsPtrOutput) Elem() ConditionsOutput {
	return o.ApplyT(func(v *Conditions) Conditions { return *v }).(ConditionsOutput)
}

// filter alerts by alert context (payload)
func (o ConditionsPtrOutput) AlertContext() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.AlertContext
	}).(ConditionPtrOutput)
}

// filter alerts by alert rule id
func (o ConditionsPtrOutput) AlertRuleId() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.AlertRuleId
	}).(ConditionPtrOutput)
}

// filter alerts by alert rule description
func (o ConditionsPtrOutput) Description() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.Description
	}).(ConditionPtrOutput)
}

// filter alerts by monitor condition
func (o ConditionsPtrOutput) MonitorCondition() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.MonitorCondition
	}).(ConditionPtrOutput)
}

// filter alerts by monitor service
func (o ConditionsPtrOutput) MonitorService() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.MonitorService
	}).(ConditionPtrOutput)
}

// filter alerts by severity
func (o ConditionsPtrOutput) Severity() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(ConditionPtrOutput)
}

// filter alerts by target resource type
func (o ConditionsPtrOutput) TargetResourceType() ConditionPtrOutput {
	return o.ApplyT(func(v *Conditions) *Condition {
		if v == nil {
			return nil
		}
		return v.TargetResourceType
	}).(ConditionPtrOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsResponse struct {
	// filter alerts by alert context (payload)
	AlertContext *ConditionResponse `pulumi:"alertContext"`
	// filter alerts by alert rule id
	AlertRuleId *ConditionResponse `pulumi:"alertRuleId"`
	// filter alerts by alert rule description
	Description *ConditionResponse `pulumi:"description"`
	// filter alerts by monitor condition
	MonitorCondition *ConditionResponse `pulumi:"monitorCondition"`
	// filter alerts by monitor service
	MonitorService *ConditionResponse `pulumi:"monitorService"`
	// filter alerts by severity
	Severity *ConditionResponse `pulumi:"severity"`
	// filter alerts by target resource type
	TargetResourceType *ConditionResponse `pulumi:"targetResourceType"`
}

// ConditionsResponseInput is an input type that accepts ConditionsResponseArgs and ConditionsResponseOutput values.
// You can construct a concrete instance of `ConditionsResponseInput` via:
//
//          ConditionsResponseArgs{...}
type ConditionsResponseInput interface {
	pulumi.Input

	ToConditionsResponseOutput() ConditionsResponseOutput
	ToConditionsResponseOutputWithContext(context.Context) ConditionsResponseOutput
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsResponseArgs struct {
	// filter alerts by alert context (payload)
	AlertContext ConditionResponsePtrInput `pulumi:"alertContext"`
	// filter alerts by alert rule id
	AlertRuleId ConditionResponsePtrInput `pulumi:"alertRuleId"`
	// filter alerts by alert rule description
	Description ConditionResponsePtrInput `pulumi:"description"`
	// filter alerts by monitor condition
	MonitorCondition ConditionResponsePtrInput `pulumi:"monitorCondition"`
	// filter alerts by monitor service
	MonitorService ConditionResponsePtrInput `pulumi:"monitorService"`
	// filter alerts by severity
	Severity ConditionResponsePtrInput `pulumi:"severity"`
	// filter alerts by target resource type
	TargetResourceType ConditionResponsePtrInput `pulumi:"targetResourceType"`
}

func (ConditionsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionsResponse)(nil)).Elem()
}

func (i ConditionsResponseArgs) ToConditionsResponseOutput() ConditionsResponseOutput {
	return i.ToConditionsResponseOutputWithContext(context.Background())
}

func (i ConditionsResponseArgs) ToConditionsResponseOutputWithContext(ctx context.Context) ConditionsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsResponseOutput)
}

func (i ConditionsResponseArgs) ToConditionsResponsePtrOutput() ConditionsResponsePtrOutput {
	return i.ToConditionsResponsePtrOutputWithContext(context.Background())
}

func (i ConditionsResponseArgs) ToConditionsResponsePtrOutputWithContext(ctx context.Context) ConditionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsResponseOutput).ToConditionsResponsePtrOutputWithContext(ctx)
}

// ConditionsResponsePtrInput is an input type that accepts ConditionsResponseArgs, ConditionsResponsePtr and ConditionsResponsePtrOutput values.
// You can construct a concrete instance of `ConditionsResponsePtrInput` via:
//
//          ConditionsResponseArgs{...}
//
//  or:
//
//          nil
type ConditionsResponsePtrInput interface {
	pulumi.Input

	ToConditionsResponsePtrOutput() ConditionsResponsePtrOutput
	ToConditionsResponsePtrOutputWithContext(context.Context) ConditionsResponsePtrOutput
}

type conditionsResponsePtrType ConditionsResponseArgs

func ConditionsResponsePtr(v *ConditionsResponseArgs) ConditionsResponsePtrInput {
	return (*conditionsResponsePtrType)(v)
}

func (*conditionsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionsResponse)(nil)).Elem()
}

func (i *conditionsResponsePtrType) ToConditionsResponsePtrOutput() ConditionsResponsePtrOutput {
	return i.ToConditionsResponsePtrOutputWithContext(context.Background())
}

func (i *conditionsResponsePtrType) ToConditionsResponsePtrOutputWithContext(ctx context.Context) ConditionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionsResponsePtrOutput)
}

// Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
type ConditionsResponseOutput struct{ *pulumi.OutputState }

func (ConditionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionsResponse)(nil)).Elem()
}

func (o ConditionsResponseOutput) ToConditionsResponseOutput() ConditionsResponseOutput {
	return o
}

func (o ConditionsResponseOutput) ToConditionsResponseOutputWithContext(ctx context.Context) ConditionsResponseOutput {
	return o
}

func (o ConditionsResponseOutput) ToConditionsResponsePtrOutput() ConditionsResponsePtrOutput {
	return o.ToConditionsResponsePtrOutputWithContext(context.Background())
}

func (o ConditionsResponseOutput) ToConditionsResponsePtrOutputWithContext(ctx context.Context) ConditionsResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionsResponse {
		return &v
	}).(ConditionsResponsePtrOutput)
}

// filter alerts by alert context (payload)
func (o ConditionsResponseOutput) AlertContext() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.AlertContext }).(ConditionResponsePtrOutput)
}

// filter alerts by alert rule id
func (o ConditionsResponseOutput) AlertRuleId() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.AlertRuleId }).(ConditionResponsePtrOutput)
}

// filter alerts by alert rule description
func (o ConditionsResponseOutput) Description() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.Description }).(ConditionResponsePtrOutput)
}

// filter alerts by monitor condition
func (o ConditionsResponseOutput) MonitorCondition() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.MonitorCondition }).(ConditionResponsePtrOutput)
}

// filter alerts by monitor service
func (o ConditionsResponseOutput) MonitorService() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.MonitorService }).(ConditionResponsePtrOutput)
}

// filter alerts by severity
func (o ConditionsResponseOutput) Severity() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.Severity }).(ConditionResponsePtrOutput)
}

// filter alerts by target resource type
func (o ConditionsResponseOutput) TargetResourceType() ConditionResponsePtrOutput {
	return o.ApplyT(func(v ConditionsResponse) *ConditionResponse { return v.TargetResourceType }).(ConditionResponsePtrOutput)
}

type ConditionsResponsePtrOutput struct{ *pulumi.OutputState }

func (ConditionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionsResponse)(nil)).Elem()
}

func (o ConditionsResponsePtrOutput) ToConditionsResponsePtrOutput() ConditionsResponsePtrOutput {
	return o
}

func (o ConditionsResponsePtrOutput) ToConditionsResponsePtrOutputWithContext(ctx context.Context) ConditionsResponsePtrOutput {
	return o
}

func (o ConditionsResponsePtrOutput) Elem() ConditionsResponseOutput {
	return o.ApplyT(func(v *ConditionsResponse) ConditionsResponse { return *v }).(ConditionsResponseOutput)
}

// filter alerts by alert context (payload)
func (o ConditionsResponsePtrOutput) AlertContext() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.AlertContext
	}).(ConditionResponsePtrOutput)
}

// filter alerts by alert rule id
func (o ConditionsResponsePtrOutput) AlertRuleId() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.AlertRuleId
	}).(ConditionResponsePtrOutput)
}

// filter alerts by alert rule description
func (o ConditionsResponsePtrOutput) Description() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.Description
	}).(ConditionResponsePtrOutput)
}

// filter alerts by monitor condition
func (o ConditionsResponsePtrOutput) MonitorCondition() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.MonitorCondition
	}).(ConditionResponsePtrOutput)
}

// filter alerts by monitor service
func (o ConditionsResponsePtrOutput) MonitorService() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.MonitorService
	}).(ConditionResponsePtrOutput)
}

// filter alerts by severity
func (o ConditionsResponsePtrOutput) Severity() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(ConditionResponsePtrOutput)
}

// filter alerts by target resource type
func (o ConditionsResponsePtrOutput) TargetResourceType() ConditionResponsePtrOutput {
	return o.ApplyT(func(v *ConditionsResponse) *ConditionResponse {
		if v == nil {
			return nil
		}
		return v.TargetResourceType
	}).(ConditionResponsePtrOutput)
}

// The detector information. By default this is not populated, unless it's specified in expandDetector
type Detector struct {
	// The Smart Detector description. By default this is not populated, unless it's specified in expandDetector
	Description *string `pulumi:"description"`
	// The detector id.
	Id string `pulumi:"id"`
	// The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector
	ImagePaths []string `pulumi:"imagePaths"`
	// The Smart Detector name. By default this is not populated, unless it's specified in expandDetector
	Name *string `pulumi:"name"`
	// The detector's parameters.'
	Parameters map[string]map[string]interface{} `pulumi:"parameters"`
	// The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector
	SupportedResourceTypes []string `pulumi:"supportedResourceTypes"`
}

// DetectorInput is an input type that accepts DetectorArgs and DetectorOutput values.
// You can construct a concrete instance of `DetectorInput` via:
//
//          DetectorArgs{...}
type DetectorInput interface {
	pulumi.Input

	ToDetectorOutput() DetectorOutput
	ToDetectorOutputWithContext(context.Context) DetectorOutput
}

// The detector information. By default this is not populated, unless it's specified in expandDetector
type DetectorArgs struct {
	// The Smart Detector description. By default this is not populated, unless it's specified in expandDetector
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The detector id.
	Id pulumi.StringInput `pulumi:"id"`
	// The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector
	ImagePaths pulumi.StringArrayInput `pulumi:"imagePaths"`
	// The Smart Detector name. By default this is not populated, unless it's specified in expandDetector
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The detector's parameters.'
	Parameters pulumi.MapMapInput `pulumi:"parameters"`
	// The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector
	SupportedResourceTypes pulumi.StringArrayInput `pulumi:"supportedResourceTypes"`
}

func (DetectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Detector)(nil)).Elem()
}

func (i DetectorArgs) ToDetectorOutput() DetectorOutput {
	return i.ToDetectorOutputWithContext(context.Background())
}

func (i DetectorArgs) ToDetectorOutputWithContext(ctx context.Context) DetectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorOutput)
}

func (i DetectorArgs) ToDetectorPtrOutput() DetectorPtrOutput {
	return i.ToDetectorPtrOutputWithContext(context.Background())
}

func (i DetectorArgs) ToDetectorPtrOutputWithContext(ctx context.Context) DetectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorOutput).ToDetectorPtrOutputWithContext(ctx)
}

// DetectorPtrInput is an input type that accepts DetectorArgs, DetectorPtr and DetectorPtrOutput values.
// You can construct a concrete instance of `DetectorPtrInput` via:
//
//          DetectorArgs{...}
//
//  or:
//
//          nil
type DetectorPtrInput interface {
	pulumi.Input

	ToDetectorPtrOutput() DetectorPtrOutput
	ToDetectorPtrOutputWithContext(context.Context) DetectorPtrOutput
}

type detectorPtrType DetectorArgs

func DetectorPtr(v *DetectorArgs) DetectorPtrInput {
	return (*detectorPtrType)(v)
}

func (*detectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Detector)(nil)).Elem()
}

func (i *detectorPtrType) ToDetectorPtrOutput() DetectorPtrOutput {
	return i.ToDetectorPtrOutputWithContext(context.Background())
}

func (i *detectorPtrType) ToDetectorPtrOutputWithContext(ctx context.Context) DetectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorPtrOutput)
}

// The detector information. By default this is not populated, unless it's specified in expandDetector
type DetectorOutput struct{ *pulumi.OutputState }

func (DetectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Detector)(nil)).Elem()
}

func (o DetectorOutput) ToDetectorOutput() DetectorOutput {
	return o
}

func (o DetectorOutput) ToDetectorOutputWithContext(ctx context.Context) DetectorOutput {
	return o
}

func (o DetectorOutput) ToDetectorPtrOutput() DetectorPtrOutput {
	return o.ToDetectorPtrOutputWithContext(context.Background())
}

func (o DetectorOutput) ToDetectorPtrOutputWithContext(ctx context.Context) DetectorPtrOutput {
	return o.ApplyT(func(v Detector) *Detector {
		return &v
	}).(DetectorPtrOutput)
}

// The Smart Detector description. By default this is not populated, unless it's specified in expandDetector
func (o DetectorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detector) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The detector id.
func (o DetectorOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v Detector) string { return v.Id }).(pulumi.StringOutput)
}

// The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector
func (o DetectorOutput) ImagePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Detector) []string { return v.ImagePaths }).(pulumi.StringArrayOutput)
}

// The Smart Detector name. By default this is not populated, unless it's specified in expandDetector
func (o DetectorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Detector) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The detector's parameters.'
func (o DetectorOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v Detector) map[string]map[string]interface{} { return v.Parameters }).(pulumi.MapMapOutput)
}

// The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector
func (o DetectorOutput) SupportedResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Detector) []string { return v.SupportedResourceTypes }).(pulumi.StringArrayOutput)
}

type DetectorPtrOutput struct{ *pulumi.OutputState }

func (DetectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Detector)(nil)).Elem()
}

func (o DetectorPtrOutput) ToDetectorPtrOutput() DetectorPtrOutput {
	return o
}

func (o DetectorPtrOutput) ToDetectorPtrOutputWithContext(ctx context.Context) DetectorPtrOutput {
	return o
}

func (o DetectorPtrOutput) Elem() DetectorOutput {
	return o.ApplyT(func(v *Detector) Detector { return *v }).(DetectorOutput)
}

// The Smart Detector description. By default this is not populated, unless it's specified in expandDetector
func (o DetectorPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Detector) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The detector id.
func (o DetectorPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Detector) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector
func (o DetectorPtrOutput) ImagePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Detector) []string {
		if v == nil {
			return nil
		}
		return v.ImagePaths
	}).(pulumi.StringArrayOutput)
}

// The Smart Detector name. By default this is not populated, unless it's specified in expandDetector
func (o DetectorPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Detector) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The detector's parameters.'
func (o DetectorPtrOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v *Detector) map[string]map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapMapOutput)
}

// The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector
func (o DetectorPtrOutput) SupportedResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Detector) []string {
		if v == nil {
			return nil
		}
		return v.SupportedResourceTypes
	}).(pulumi.StringArrayOutput)
}

// The detector information. By default this is not populated, unless it's specified in expandDetector
type DetectorResponse struct {
	// The Smart Detector description. By default this is not populated, unless it's specified in expandDetector
	Description *string `pulumi:"description"`
	// The detector id.
	Id string `pulumi:"id"`
	// The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector
	ImagePaths []string `pulumi:"imagePaths"`
	// The Smart Detector name. By default this is not populated, unless it's specified in expandDetector
	Name *string `pulumi:"name"`
	// The detector's parameters.'
	Parameters map[string]map[string]interface{} `pulumi:"parameters"`
	// The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector
	SupportedResourceTypes []string `pulumi:"supportedResourceTypes"`
}

// DetectorResponseInput is an input type that accepts DetectorResponseArgs and DetectorResponseOutput values.
// You can construct a concrete instance of `DetectorResponseInput` via:
//
//          DetectorResponseArgs{...}
type DetectorResponseInput interface {
	pulumi.Input

	ToDetectorResponseOutput() DetectorResponseOutput
	ToDetectorResponseOutputWithContext(context.Context) DetectorResponseOutput
}

// The detector information. By default this is not populated, unless it's specified in expandDetector
type DetectorResponseArgs struct {
	// The Smart Detector description. By default this is not populated, unless it's specified in expandDetector
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The detector id.
	Id pulumi.StringInput `pulumi:"id"`
	// The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector
	ImagePaths pulumi.StringArrayInput `pulumi:"imagePaths"`
	// The Smart Detector name. By default this is not populated, unless it's specified in expandDetector
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The detector's parameters.'
	Parameters pulumi.MapMapInput `pulumi:"parameters"`
	// The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector
	SupportedResourceTypes pulumi.StringArrayInput `pulumi:"supportedResourceTypes"`
}

func (DetectorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorResponse)(nil)).Elem()
}

func (i DetectorResponseArgs) ToDetectorResponseOutput() DetectorResponseOutput {
	return i.ToDetectorResponseOutputWithContext(context.Background())
}

func (i DetectorResponseArgs) ToDetectorResponseOutputWithContext(ctx context.Context) DetectorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorResponseOutput)
}

func (i DetectorResponseArgs) ToDetectorResponsePtrOutput() DetectorResponsePtrOutput {
	return i.ToDetectorResponsePtrOutputWithContext(context.Background())
}

func (i DetectorResponseArgs) ToDetectorResponsePtrOutputWithContext(ctx context.Context) DetectorResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorResponseOutput).ToDetectorResponsePtrOutputWithContext(ctx)
}

// DetectorResponsePtrInput is an input type that accepts DetectorResponseArgs, DetectorResponsePtr and DetectorResponsePtrOutput values.
// You can construct a concrete instance of `DetectorResponsePtrInput` via:
//
//          DetectorResponseArgs{...}
//
//  or:
//
//          nil
type DetectorResponsePtrInput interface {
	pulumi.Input

	ToDetectorResponsePtrOutput() DetectorResponsePtrOutput
	ToDetectorResponsePtrOutputWithContext(context.Context) DetectorResponsePtrOutput
}

type detectorResponsePtrType DetectorResponseArgs

func DetectorResponsePtr(v *DetectorResponseArgs) DetectorResponsePtrInput {
	return (*detectorResponsePtrType)(v)
}

func (*detectorResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DetectorResponse)(nil)).Elem()
}

func (i *detectorResponsePtrType) ToDetectorResponsePtrOutput() DetectorResponsePtrOutput {
	return i.ToDetectorResponsePtrOutputWithContext(context.Background())
}

func (i *detectorResponsePtrType) ToDetectorResponsePtrOutputWithContext(ctx context.Context) DetectorResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DetectorResponsePtrOutput)
}

// The detector information. By default this is not populated, unless it's specified in expandDetector
type DetectorResponseOutput struct{ *pulumi.OutputState }

func (DetectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DetectorResponse)(nil)).Elem()
}

func (o DetectorResponseOutput) ToDetectorResponseOutput() DetectorResponseOutput {
	return o
}

func (o DetectorResponseOutput) ToDetectorResponseOutputWithContext(ctx context.Context) DetectorResponseOutput {
	return o
}

func (o DetectorResponseOutput) ToDetectorResponsePtrOutput() DetectorResponsePtrOutput {
	return o.ToDetectorResponsePtrOutputWithContext(context.Background())
}

func (o DetectorResponseOutput) ToDetectorResponsePtrOutputWithContext(ctx context.Context) DetectorResponsePtrOutput {
	return o.ApplyT(func(v DetectorResponse) *DetectorResponse {
		return &v
	}).(DetectorResponsePtrOutput)
}

// The Smart Detector description. By default this is not populated, unless it's specified in expandDetector
func (o DetectorResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The detector id.
func (o DetectorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v DetectorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector
func (o DetectorResponseOutput) ImagePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DetectorResponse) []string { return v.ImagePaths }).(pulumi.StringArrayOutput)
}

// The Smart Detector name. By default this is not populated, unless it's specified in expandDetector
func (o DetectorResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DetectorResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The detector's parameters.'
func (o DetectorResponseOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v DetectorResponse) map[string]map[string]interface{} { return v.Parameters }).(pulumi.MapMapOutput)
}

// The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector
func (o DetectorResponseOutput) SupportedResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DetectorResponse) []string { return v.SupportedResourceTypes }).(pulumi.StringArrayOutput)
}

type DetectorResponsePtrOutput struct{ *pulumi.OutputState }

func (DetectorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DetectorResponse)(nil)).Elem()
}

func (o DetectorResponsePtrOutput) ToDetectorResponsePtrOutput() DetectorResponsePtrOutput {
	return o
}

func (o DetectorResponsePtrOutput) ToDetectorResponsePtrOutputWithContext(ctx context.Context) DetectorResponsePtrOutput {
	return o
}

func (o DetectorResponsePtrOutput) Elem() DetectorResponseOutput {
	return o.ApplyT(func(v *DetectorResponse) DetectorResponse { return *v }).(DetectorResponseOutput)
}

// The Smart Detector description. By default this is not populated, unless it's specified in expandDetector
func (o DetectorResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DetectorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The detector id.
func (o DetectorResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DetectorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The Smart Detector image path. By default this is not populated, unless it's specified in expandDetector
func (o DetectorResponsePtrOutput) ImagePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DetectorResponse) []string {
		if v == nil {
			return nil
		}
		return v.ImagePaths
	}).(pulumi.StringArrayOutput)
}

// The Smart Detector name. By default this is not populated, unless it's specified in expandDetector
func (o DetectorResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DetectorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The detector's parameters.'
func (o DetectorResponsePtrOutput) Parameters() pulumi.MapMapOutput {
	return o.ApplyT(func(v *DetectorResponse) map[string]map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapMapOutput)
}

// The Smart Detector supported resource types. By default this is not populated, unless it's specified in expandDetector
func (o DetectorResponsePtrOutput) SupportedResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DetectorResponse) []string {
		if v == nil {
			return nil
		}
		return v.SupportedResourceTypes
	}).(pulumi.StringArrayOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type Scope struct {
	// type of target scope
	ScopeType *string `pulumi:"scopeType"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values []string `pulumi:"values"`
}

// ScopeInput is an input type that accepts ScopeArgs and ScopeOutput values.
// You can construct a concrete instance of `ScopeInput` via:
//
//          ScopeArgs{...}
type ScopeInput interface {
	pulumi.Input

	ToScopeOutput() ScopeOutput
	ToScopeOutputWithContext(context.Context) ScopeOutput
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeArgs struct {
	// type of target scope
	ScopeType pulumi.StringPtrInput `pulumi:"scopeType"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Scope)(nil)).Elem()
}

func (i ScopeArgs) ToScopeOutput() ScopeOutput {
	return i.ToScopeOutputWithContext(context.Background())
}

func (i ScopeArgs) ToScopeOutputWithContext(ctx context.Context) ScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeOutput)
}

func (i ScopeArgs) ToScopePtrOutput() ScopePtrOutput {
	return i.ToScopePtrOutputWithContext(context.Background())
}

func (i ScopeArgs) ToScopePtrOutputWithContext(ctx context.Context) ScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeOutput).ToScopePtrOutputWithContext(ctx)
}

// ScopePtrInput is an input type that accepts ScopeArgs, ScopePtr and ScopePtrOutput values.
// You can construct a concrete instance of `ScopePtrInput` via:
//
//          ScopeArgs{...}
//
//  or:
//
//          nil
type ScopePtrInput interface {
	pulumi.Input

	ToScopePtrOutput() ScopePtrOutput
	ToScopePtrOutputWithContext(context.Context) ScopePtrOutput
}

type scopePtrType ScopeArgs

func ScopePtr(v *ScopeArgs) ScopePtrInput {
	return (*scopePtrType)(v)
}

func (*scopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Scope)(nil)).Elem()
}

func (i *scopePtrType) ToScopePtrOutput() ScopePtrOutput {
	return i.ToScopePtrOutputWithContext(context.Background())
}

func (i *scopePtrType) ToScopePtrOutputWithContext(ctx context.Context) ScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopePtrOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeOutput struct{ *pulumi.OutputState }

func (ScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Scope)(nil)).Elem()
}

func (o ScopeOutput) ToScopeOutput() ScopeOutput {
	return o
}

func (o ScopeOutput) ToScopeOutputWithContext(ctx context.Context) ScopeOutput {
	return o
}

func (o ScopeOutput) ToScopePtrOutput() ScopePtrOutput {
	return o.ToScopePtrOutputWithContext(context.Background())
}

func (o ScopeOutput) ToScopePtrOutputWithContext(ctx context.Context) ScopePtrOutput {
	return o.ApplyT(func(v Scope) *Scope {
		return &v
	}).(ScopePtrOutput)
}

// type of target scope
func (o ScopeOutput) ScopeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Scope) *string { return v.ScopeType }).(pulumi.StringPtrOutput)
}

// list of ARM IDs of the given scope type which will be the target of the given action rule.
func (o ScopeOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Scope) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ScopePtrOutput struct{ *pulumi.OutputState }

func (ScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Scope)(nil)).Elem()
}

func (o ScopePtrOutput) ToScopePtrOutput() ScopePtrOutput {
	return o
}

func (o ScopePtrOutput) ToScopePtrOutputWithContext(ctx context.Context) ScopePtrOutput {
	return o
}

func (o ScopePtrOutput) Elem() ScopeOutput {
	return o.ApplyT(func(v *Scope) Scope { return *v }).(ScopeOutput)
}

// type of target scope
func (o ScopePtrOutput) ScopeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Scope) *string {
		if v == nil {
			return nil
		}
		return v.ScopeType
	}).(pulumi.StringPtrOutput)
}

// list of ARM IDs of the given scope type which will be the target of the given action rule.
func (o ScopePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Scope) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeResponse struct {
	// type of target scope
	ScopeType *string `pulumi:"scopeType"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values []string `pulumi:"values"`
}

// ScopeResponseInput is an input type that accepts ScopeResponseArgs and ScopeResponseOutput values.
// You can construct a concrete instance of `ScopeResponseInput` via:
//
//          ScopeResponseArgs{...}
type ScopeResponseInput interface {
	pulumi.Input

	ToScopeResponseOutput() ScopeResponseOutput
	ToScopeResponseOutputWithContext(context.Context) ScopeResponseOutput
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeResponseArgs struct {
	// type of target scope
	ScopeType pulumi.StringPtrInput `pulumi:"scopeType"`
	// list of ARM IDs of the given scope type which will be the target of the given action rule.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ScopeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeResponse)(nil)).Elem()
}

func (i ScopeResponseArgs) ToScopeResponseOutput() ScopeResponseOutput {
	return i.ToScopeResponseOutputWithContext(context.Background())
}

func (i ScopeResponseArgs) ToScopeResponseOutputWithContext(ctx context.Context) ScopeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeResponseOutput)
}

func (i ScopeResponseArgs) ToScopeResponsePtrOutput() ScopeResponsePtrOutput {
	return i.ToScopeResponsePtrOutputWithContext(context.Background())
}

func (i ScopeResponseArgs) ToScopeResponsePtrOutputWithContext(ctx context.Context) ScopeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeResponseOutput).ToScopeResponsePtrOutputWithContext(ctx)
}

// ScopeResponsePtrInput is an input type that accepts ScopeResponseArgs, ScopeResponsePtr and ScopeResponsePtrOutput values.
// You can construct a concrete instance of `ScopeResponsePtrInput` via:
//
//          ScopeResponseArgs{...}
//
//  or:
//
//          nil
type ScopeResponsePtrInput interface {
	pulumi.Input

	ToScopeResponsePtrOutput() ScopeResponsePtrOutput
	ToScopeResponsePtrOutputWithContext(context.Context) ScopeResponsePtrOutput
}

type scopeResponsePtrType ScopeResponseArgs

func ScopeResponsePtr(v *ScopeResponseArgs) ScopeResponsePtrInput {
	return (*scopeResponsePtrType)(v)
}

func (*scopeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeResponse)(nil)).Elem()
}

func (i *scopeResponsePtrType) ToScopeResponsePtrOutput() ScopeResponsePtrOutput {
	return i.ToScopeResponsePtrOutputWithContext(context.Background())
}

func (i *scopeResponsePtrType) ToScopeResponsePtrOutputWithContext(ctx context.Context) ScopeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeResponsePtrOutput)
}

// Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
type ScopeResponseOutput struct{ *pulumi.OutputState }

func (ScopeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeResponse)(nil)).Elem()
}

func (o ScopeResponseOutput) ToScopeResponseOutput() ScopeResponseOutput {
	return o
}

func (o ScopeResponseOutput) ToScopeResponseOutputWithContext(ctx context.Context) ScopeResponseOutput {
	return o
}

func (o ScopeResponseOutput) ToScopeResponsePtrOutput() ScopeResponsePtrOutput {
	return o.ToScopeResponsePtrOutputWithContext(context.Background())
}

func (o ScopeResponseOutput) ToScopeResponsePtrOutputWithContext(ctx context.Context) ScopeResponsePtrOutput {
	return o.ApplyT(func(v ScopeResponse) *ScopeResponse {
		return &v
	}).(ScopeResponsePtrOutput)
}

// type of target scope
func (o ScopeResponseOutput) ScopeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScopeResponse) *string { return v.ScopeType }).(pulumi.StringPtrOutput)
}

// list of ARM IDs of the given scope type which will be the target of the given action rule.
func (o ScopeResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScopeResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ScopeResponsePtrOutput struct{ *pulumi.OutputState }

func (ScopeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeResponse)(nil)).Elem()
}

func (o ScopeResponsePtrOutput) ToScopeResponsePtrOutput() ScopeResponsePtrOutput {
	return o
}

func (o ScopeResponsePtrOutput) ToScopeResponsePtrOutputWithContext(ctx context.Context) ScopeResponsePtrOutput {
	return o
}

func (o ScopeResponsePtrOutput) Elem() ScopeResponseOutput {
	return o.ApplyT(func(v *ScopeResponse) ScopeResponse { return *v }).(ScopeResponseOutput)
}

// type of target scope
func (o ScopeResponsePtrOutput) ScopeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScopeResponse) *string {
		if v == nil {
			return nil
		}
		return v.ScopeType
	}).(pulumi.StringPtrOutput)
}

// list of ARM IDs of the given scope type which will be the target of the given action rule.
func (o ScopeResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScopeResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// Optional throttling information for the alert rule.
type ThrottlingInformation struct {
	// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
	Duration *string `pulumi:"duration"`
}

// ThrottlingInformationInput is an input type that accepts ThrottlingInformationArgs and ThrottlingInformationOutput values.
// You can construct a concrete instance of `ThrottlingInformationInput` via:
//
//          ThrottlingInformationArgs{...}
type ThrottlingInformationInput interface {
	pulumi.Input

	ToThrottlingInformationOutput() ThrottlingInformationOutput
	ToThrottlingInformationOutputWithContext(context.Context) ThrottlingInformationOutput
}

// Optional throttling information for the alert rule.
type ThrottlingInformationArgs struct {
	// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
	Duration pulumi.StringPtrInput `pulumi:"duration"`
}

func (ThrottlingInformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThrottlingInformation)(nil)).Elem()
}

func (i ThrottlingInformationArgs) ToThrottlingInformationOutput() ThrottlingInformationOutput {
	return i.ToThrottlingInformationOutputWithContext(context.Background())
}

func (i ThrottlingInformationArgs) ToThrottlingInformationOutputWithContext(ctx context.Context) ThrottlingInformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThrottlingInformationOutput)
}

func (i ThrottlingInformationArgs) ToThrottlingInformationPtrOutput() ThrottlingInformationPtrOutput {
	return i.ToThrottlingInformationPtrOutputWithContext(context.Background())
}

func (i ThrottlingInformationArgs) ToThrottlingInformationPtrOutputWithContext(ctx context.Context) ThrottlingInformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThrottlingInformationOutput).ToThrottlingInformationPtrOutputWithContext(ctx)
}

// ThrottlingInformationPtrInput is an input type that accepts ThrottlingInformationArgs, ThrottlingInformationPtr and ThrottlingInformationPtrOutput values.
// You can construct a concrete instance of `ThrottlingInformationPtrInput` via:
//
//          ThrottlingInformationArgs{...}
//
//  or:
//
//          nil
type ThrottlingInformationPtrInput interface {
	pulumi.Input

	ToThrottlingInformationPtrOutput() ThrottlingInformationPtrOutput
	ToThrottlingInformationPtrOutputWithContext(context.Context) ThrottlingInformationPtrOutput
}

type throttlingInformationPtrType ThrottlingInformationArgs

func ThrottlingInformationPtr(v *ThrottlingInformationArgs) ThrottlingInformationPtrInput {
	return (*throttlingInformationPtrType)(v)
}

func (*throttlingInformationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThrottlingInformation)(nil)).Elem()
}

func (i *throttlingInformationPtrType) ToThrottlingInformationPtrOutput() ThrottlingInformationPtrOutput {
	return i.ToThrottlingInformationPtrOutputWithContext(context.Background())
}

func (i *throttlingInformationPtrType) ToThrottlingInformationPtrOutputWithContext(ctx context.Context) ThrottlingInformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThrottlingInformationPtrOutput)
}

// Optional throttling information for the alert rule.
type ThrottlingInformationOutput struct{ *pulumi.OutputState }

func (ThrottlingInformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThrottlingInformation)(nil)).Elem()
}

func (o ThrottlingInformationOutput) ToThrottlingInformationOutput() ThrottlingInformationOutput {
	return o
}

func (o ThrottlingInformationOutput) ToThrottlingInformationOutputWithContext(ctx context.Context) ThrottlingInformationOutput {
	return o
}

func (o ThrottlingInformationOutput) ToThrottlingInformationPtrOutput() ThrottlingInformationPtrOutput {
	return o.ToThrottlingInformationPtrOutputWithContext(context.Background())
}

func (o ThrottlingInformationOutput) ToThrottlingInformationPtrOutputWithContext(ctx context.Context) ThrottlingInformationPtrOutput {
	return o.ApplyT(func(v ThrottlingInformation) *ThrottlingInformation {
		return &v
	}).(ThrottlingInformationPtrOutput)
}

// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
func (o ThrottlingInformationOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThrottlingInformation) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

type ThrottlingInformationPtrOutput struct{ *pulumi.OutputState }

func (ThrottlingInformationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThrottlingInformation)(nil)).Elem()
}

func (o ThrottlingInformationPtrOutput) ToThrottlingInformationPtrOutput() ThrottlingInformationPtrOutput {
	return o
}

func (o ThrottlingInformationPtrOutput) ToThrottlingInformationPtrOutputWithContext(ctx context.Context) ThrottlingInformationPtrOutput {
	return o
}

func (o ThrottlingInformationPtrOutput) Elem() ThrottlingInformationOutput {
	return o.ApplyT(func(v *ThrottlingInformation) ThrottlingInformation { return *v }).(ThrottlingInformationOutput)
}

// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
func (o ThrottlingInformationPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThrottlingInformation) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

// Optional throttling information for the alert rule.
type ThrottlingInformationResponse struct {
	// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
	Duration *string `pulumi:"duration"`
}

// ThrottlingInformationResponseInput is an input type that accepts ThrottlingInformationResponseArgs and ThrottlingInformationResponseOutput values.
// You can construct a concrete instance of `ThrottlingInformationResponseInput` via:
//
//          ThrottlingInformationResponseArgs{...}
type ThrottlingInformationResponseInput interface {
	pulumi.Input

	ToThrottlingInformationResponseOutput() ThrottlingInformationResponseOutput
	ToThrottlingInformationResponseOutputWithContext(context.Context) ThrottlingInformationResponseOutput
}

// Optional throttling information for the alert rule.
type ThrottlingInformationResponseArgs struct {
	// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
	Duration pulumi.StringPtrInput `pulumi:"duration"`
}

func (ThrottlingInformationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThrottlingInformationResponse)(nil)).Elem()
}

func (i ThrottlingInformationResponseArgs) ToThrottlingInformationResponseOutput() ThrottlingInformationResponseOutput {
	return i.ToThrottlingInformationResponseOutputWithContext(context.Background())
}

func (i ThrottlingInformationResponseArgs) ToThrottlingInformationResponseOutputWithContext(ctx context.Context) ThrottlingInformationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThrottlingInformationResponseOutput)
}

func (i ThrottlingInformationResponseArgs) ToThrottlingInformationResponsePtrOutput() ThrottlingInformationResponsePtrOutput {
	return i.ToThrottlingInformationResponsePtrOutputWithContext(context.Background())
}

func (i ThrottlingInformationResponseArgs) ToThrottlingInformationResponsePtrOutputWithContext(ctx context.Context) ThrottlingInformationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThrottlingInformationResponseOutput).ToThrottlingInformationResponsePtrOutputWithContext(ctx)
}

// ThrottlingInformationResponsePtrInput is an input type that accepts ThrottlingInformationResponseArgs, ThrottlingInformationResponsePtr and ThrottlingInformationResponsePtrOutput values.
// You can construct a concrete instance of `ThrottlingInformationResponsePtrInput` via:
//
//          ThrottlingInformationResponseArgs{...}
//
//  or:
//
//          nil
type ThrottlingInformationResponsePtrInput interface {
	pulumi.Input

	ToThrottlingInformationResponsePtrOutput() ThrottlingInformationResponsePtrOutput
	ToThrottlingInformationResponsePtrOutputWithContext(context.Context) ThrottlingInformationResponsePtrOutput
}

type throttlingInformationResponsePtrType ThrottlingInformationResponseArgs

func ThrottlingInformationResponsePtr(v *ThrottlingInformationResponseArgs) ThrottlingInformationResponsePtrInput {
	return (*throttlingInformationResponsePtrType)(v)
}

func (*throttlingInformationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThrottlingInformationResponse)(nil)).Elem()
}

func (i *throttlingInformationResponsePtrType) ToThrottlingInformationResponsePtrOutput() ThrottlingInformationResponsePtrOutput {
	return i.ToThrottlingInformationResponsePtrOutputWithContext(context.Background())
}

func (i *throttlingInformationResponsePtrType) ToThrottlingInformationResponsePtrOutputWithContext(ctx context.Context) ThrottlingInformationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThrottlingInformationResponsePtrOutput)
}

// Optional throttling information for the alert rule.
type ThrottlingInformationResponseOutput struct{ *pulumi.OutputState }

func (ThrottlingInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThrottlingInformationResponse)(nil)).Elem()
}

func (o ThrottlingInformationResponseOutput) ToThrottlingInformationResponseOutput() ThrottlingInformationResponseOutput {
	return o
}

func (o ThrottlingInformationResponseOutput) ToThrottlingInformationResponseOutputWithContext(ctx context.Context) ThrottlingInformationResponseOutput {
	return o
}

func (o ThrottlingInformationResponseOutput) ToThrottlingInformationResponsePtrOutput() ThrottlingInformationResponsePtrOutput {
	return o.ToThrottlingInformationResponsePtrOutputWithContext(context.Background())
}

func (o ThrottlingInformationResponseOutput) ToThrottlingInformationResponsePtrOutputWithContext(ctx context.Context) ThrottlingInformationResponsePtrOutput {
	return o.ApplyT(func(v ThrottlingInformationResponse) *ThrottlingInformationResponse {
		return &v
	}).(ThrottlingInformationResponsePtrOutput)
}

// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
func (o ThrottlingInformationResponseOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThrottlingInformationResponse) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

type ThrottlingInformationResponsePtrOutput struct{ *pulumi.OutputState }

func (ThrottlingInformationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThrottlingInformationResponse)(nil)).Elem()
}

func (o ThrottlingInformationResponsePtrOutput) ToThrottlingInformationResponsePtrOutput() ThrottlingInformationResponsePtrOutput {
	return o
}

func (o ThrottlingInformationResponsePtrOutput) ToThrottlingInformationResponsePtrOutputWithContext(ctx context.Context) ThrottlingInformationResponsePtrOutput {
	return o
}

func (o ThrottlingInformationResponsePtrOutput) Elem() ThrottlingInformationResponseOutput {
	return o.ApplyT(func(v *ThrottlingInformationResponse) ThrottlingInformationResponse { return *v }).(ThrottlingInformationResponseOutput)
}

// The required duration (in ISO8601 format) to wait before notifying on the alert rule again. The time granularity must be in minutes and minimum value is 0 minutes
func (o ThrottlingInformationResponsePtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThrottlingInformationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ActionGroupsInformationOutput{})
	pulumi.RegisterOutputType(ActionGroupsInformationPtrOutput{})
	pulumi.RegisterOutputType(ActionGroupsInformationResponseOutput{})
	pulumi.RegisterOutputType(ActionGroupsInformationResponsePtrOutput{})
	pulumi.RegisterOutputType(ActionRulePropertiesOutput{})
	pulumi.RegisterOutputType(ActionRulePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ActionRulePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ActionRulePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ConditionOutput{})
	pulumi.RegisterOutputType(ConditionPtrOutput{})
	pulumi.RegisterOutputType(ConditionResponseOutput{})
	pulumi.RegisterOutputType(ConditionResponsePtrOutput{})
	pulumi.RegisterOutputType(ConditionsOutput{})
	pulumi.RegisterOutputType(ConditionsPtrOutput{})
	pulumi.RegisterOutputType(ConditionsResponseOutput{})
	pulumi.RegisterOutputType(ConditionsResponsePtrOutput{})
	pulumi.RegisterOutputType(DetectorOutput{})
	pulumi.RegisterOutputType(DetectorPtrOutput{})
	pulumi.RegisterOutputType(DetectorResponseOutput{})
	pulumi.RegisterOutputType(DetectorResponsePtrOutput{})
	pulumi.RegisterOutputType(ScopeOutput{})
	pulumi.RegisterOutputType(ScopePtrOutput{})
	pulumi.RegisterOutputType(ScopeResponseOutput{})
	pulumi.RegisterOutputType(ScopeResponsePtrOutput{})
	pulumi.RegisterOutputType(ThrottlingInformationOutput{})
	pulumi.RegisterOutputType(ThrottlingInformationPtrOutput{})
	pulumi.RegisterOutputType(ThrottlingInformationResponseOutput{})
	pulumi.RegisterOutputType(ThrottlingInformationResponsePtrOutput{})
}
