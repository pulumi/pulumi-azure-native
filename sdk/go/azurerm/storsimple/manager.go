// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storsimple

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The StorSimple Manager.
type Manager struct {
	pulumi.CustomResourceState

	// The etag of the manager.
	Etag pulumi.StringPtrOutput `pulumi:"etag"`
	// The geo location of the resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The properties of the StorSimple Manager.
	Properties ManagerPropertiesResponseOutput `pulumi:"properties"`
	// The tags attached to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewManager registers a new resource with the given unique name, arguments, and options.
func NewManager(ctx *pulumi.Context,
	name string, args *ManagerArgs, opts ...pulumi.ResourceOption) (*Manager, error) {
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &ManagerArgs{}
	}
	var resource Manager
	err := ctx.RegisterResource("azurerm:storsimple:Manager", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManager gets an existing Manager resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManager(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagerState, opts ...pulumi.ResourceOption) (*Manager, error) {
	var resource Manager
	err := ctx.ReadResource("azurerm:storsimple:Manager", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Manager resources.
type managerState struct {
	// The etag of the manager.
	Etag *string `pulumi:"etag"`
	// The geo location of the resource.
	Location *string `pulumi:"location"`
	// The resource name.
	Name *string `pulumi:"name"`
	// The properties of the StorSimple Manager.
	Properties *ManagerPropertiesResponse `pulumi:"properties"`
	// The tags attached to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The resource type.
	Type *string `pulumi:"type"`
}

type ManagerState struct {
	// The etag of the manager.
	Etag pulumi.StringPtrInput
	// The geo location of the resource.
	Location pulumi.StringPtrInput
	// The resource name.
	Name pulumi.StringPtrInput
	// The properties of the StorSimple Manager.
	Properties ManagerPropertiesResponsePtrInput
	// The tags attached to the resource.
	Tags pulumi.StringMapInput
	// The resource type.
	Type pulumi.StringPtrInput
}

func (ManagerState) ElementType() reflect.Type {
	return reflect.TypeOf((*managerState)(nil)).Elem()
}

type managerArgs struct {
	// The etag of the manager.
	Etag *string `pulumi:"etag"`
	// The geo location of the resource.
	Location string `pulumi:"location"`
	// The manager name
	Name string `pulumi:"name"`
	// The properties of the StorSimple Manager.
	Properties *ManagerProperties `pulumi:"properties"`
	// The resource group name
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The tags attached to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Manager resource.
type ManagerArgs struct {
	// The etag of the manager.
	Etag pulumi.StringPtrInput
	// The geo location of the resource.
	Location pulumi.StringInput
	// The manager name
	Name pulumi.StringInput
	// The properties of the StorSimple Manager.
	Properties ManagerPropertiesPtrInput
	// The resource group name
	ResourceGroupName pulumi.StringInput
	// The tags attached to the resource.
	Tags pulumi.StringMapInput
}

func (ManagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managerArgs)(nil)).Elem()
}
