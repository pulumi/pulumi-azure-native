// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storsimple

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The file server.
type ManagerDeviceFileserver struct {
	pulumi.CustomResourceState

	// The name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The properties.
	Properties FileServerPropertiesResponseOutput `pulumi:"properties"`
	// The type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewManagerDeviceFileserver registers a new resource with the given unique name, arguments, and options.
func NewManagerDeviceFileserver(ctx *pulumi.Context,
	name string, args *ManagerDeviceFileserverArgs, opts ...pulumi.ResourceOption) (*ManagerDeviceFileserver, error) {
	if args == nil || args.DeviceName == nil {
		return nil, errors.New("missing required argument 'DeviceName'")
	}
	if args == nil || args.ManagerName == nil {
		return nil, errors.New("missing required argument 'ManagerName'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.Properties == nil {
		return nil, errors.New("missing required argument 'Properties'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &ManagerDeviceFileserverArgs{}
	}
	var resource ManagerDeviceFileserver
	err := ctx.RegisterResource("azurerm:storsimple:ManagerDeviceFileserver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagerDeviceFileserver gets an existing ManagerDeviceFileserver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagerDeviceFileserver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagerDeviceFileserverState, opts ...pulumi.ResourceOption) (*ManagerDeviceFileserver, error) {
	var resource ManagerDeviceFileserver
	err := ctx.ReadResource("azurerm:storsimple:ManagerDeviceFileserver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagerDeviceFileserver resources.
type managerDeviceFileserverState struct {
	// The name.
	Name *string `pulumi:"name"`
	// The properties.
	Properties *FileServerPropertiesResponse `pulumi:"properties"`
	// The type.
	Type *string `pulumi:"type"`
}

type ManagerDeviceFileserverState struct {
	// The name.
	Name pulumi.StringPtrInput
	// The properties.
	Properties FileServerPropertiesResponsePtrInput
	// The type.
	Type pulumi.StringPtrInput
}

func (ManagerDeviceFileserverState) ElementType() reflect.Type {
	return reflect.TypeOf((*managerDeviceFileserverState)(nil)).Elem()
}

type managerDeviceFileserverArgs struct {
	// The device name.
	DeviceName string `pulumi:"deviceName"`
	// The manager name
	ManagerName string `pulumi:"managerName"`
	// The file server name.
	Name string `pulumi:"name"`
	// The properties.
	Properties FileServerProperties `pulumi:"properties"`
	// The resource group name
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a ManagerDeviceFileserver resource.
type ManagerDeviceFileserverArgs struct {
	// The device name.
	DeviceName pulumi.StringInput
	// The manager name
	ManagerName pulumi.StringInput
	// The file server name.
	Name pulumi.StringInput
	// The properties.
	Properties FileServerPropertiesInput
	// The resource group name
	ResourceGroupName pulumi.StringInput
}

func (ManagerDeviceFileserverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managerDeviceFileserverArgs)(nil)).Elem()
}
