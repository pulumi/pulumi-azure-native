// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storsimple

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The File Share.
type ManagerDeviceFileserverShare struct {
	pulumi.CustomResourceState

	// The name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The properties.
	Properties FileSharePropertiesResponseOutput `pulumi:"properties"`
	// The type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewManagerDeviceFileserverShare registers a new resource with the given unique name, arguments, and options.
func NewManagerDeviceFileserverShare(ctx *pulumi.Context,
	name string, args *ManagerDeviceFileserverShareArgs, opts ...pulumi.ResourceOption) (*ManagerDeviceFileserverShare, error) {
	if args == nil || args.DeviceName == nil {
		return nil, errors.New("missing required argument 'DeviceName'")
	}
	if args == nil || args.FileServerName == nil {
		return nil, errors.New("missing required argument 'FileServerName'")
	}
	if args == nil || args.ManagerName == nil {
		return nil, errors.New("missing required argument 'ManagerName'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.Properties == nil {
		return nil, errors.New("missing required argument 'Properties'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &ManagerDeviceFileserverShareArgs{}
	}
	var resource ManagerDeviceFileserverShare
	err := ctx.RegisterResource("azurerm:storsimple:ManagerDeviceFileserverShare", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagerDeviceFileserverShare gets an existing ManagerDeviceFileserverShare resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagerDeviceFileserverShare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagerDeviceFileserverShareState, opts ...pulumi.ResourceOption) (*ManagerDeviceFileserverShare, error) {
	var resource ManagerDeviceFileserverShare
	err := ctx.ReadResource("azurerm:storsimple:ManagerDeviceFileserverShare", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagerDeviceFileserverShare resources.
type managerDeviceFileserverShareState struct {
	// The name.
	Name *string `pulumi:"name"`
	// The properties.
	Properties *FileSharePropertiesResponse `pulumi:"properties"`
	// The type.
	Type *string `pulumi:"type"`
}

type ManagerDeviceFileserverShareState struct {
	// The name.
	Name pulumi.StringPtrInput
	// The properties.
	Properties FileSharePropertiesResponsePtrInput
	// The type.
	Type pulumi.StringPtrInput
}

func (ManagerDeviceFileserverShareState) ElementType() reflect.Type {
	return reflect.TypeOf((*managerDeviceFileserverShareState)(nil)).Elem()
}

type managerDeviceFileserverShareArgs struct {
	// The device name.
	DeviceName string `pulumi:"deviceName"`
	// The file server name.
	FileServerName string `pulumi:"fileServerName"`
	// The manager name
	ManagerName string `pulumi:"managerName"`
	// The file share name.
	Name string `pulumi:"name"`
	// The properties.
	Properties FileShareProperties `pulumi:"properties"`
	// The resource group name
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a ManagerDeviceFileserverShare resource.
type ManagerDeviceFileserverShareArgs struct {
	// The device name.
	DeviceName pulumi.StringInput
	// The file server name.
	FileServerName pulumi.StringInput
	// The manager name
	ManagerName pulumi.StringInput
	// The file share name.
	Name pulumi.StringInput
	// The properties.
	Properties FileSharePropertiesInput
	// The resource group name
	ResourceGroupName pulumi.StringInput
}

func (ManagerDeviceFileserverShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managerDeviceFileserverShareArgs)(nil)).Elem()
}
