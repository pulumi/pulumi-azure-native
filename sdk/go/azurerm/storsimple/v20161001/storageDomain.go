// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20161001

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The storage domain.
type StorageDomain struct {
	pulumi.CustomResourceState

	// The name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The properties.
	Properties StorageDomainPropertiesResponseOutput `pulumi:"properties"`
	// The type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewStorageDomain registers a new resource with the given unique name, arguments, and options.
func NewStorageDomain(ctx *pulumi.Context,
	name string, args *StorageDomainArgs, opts ...pulumi.ResourceOption) (*StorageDomain, error) {
	if args == nil || args.EncryptionStatus == nil {
		return nil, errors.New("missing required argument 'EncryptionStatus'")
	}
	if args == nil || args.ManagerName == nil {
		return nil, errors.New("missing required argument 'ManagerName'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.StorageAccountCredentialIds == nil {
		return nil, errors.New("missing required argument 'StorageAccountCredentialIds'")
	}
	if args == nil {
		args = &StorageDomainArgs{}
	}
	var resource StorageDomain
	err := ctx.RegisterResource("azurerm:storsimple/v20161001:StorageDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStorageDomain gets an existing StorageDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStorageDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StorageDomainState, opts ...pulumi.ResourceOption) (*StorageDomain, error) {
	var resource StorageDomain
	err := ctx.ReadResource("azurerm:storsimple/v20161001:StorageDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StorageDomain resources.
type storageDomainState struct {
	// The name.
	Name *string `pulumi:"name"`
	// The properties.
	Properties *StorageDomainPropertiesResponse `pulumi:"properties"`
	// The type.
	Type *string `pulumi:"type"`
}

type StorageDomainState struct {
	// The name.
	Name pulumi.StringPtrInput
	// The properties.
	Properties StorageDomainPropertiesResponsePtrInput
	// The type.
	Type pulumi.StringPtrInput
}

func (StorageDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*storageDomainState)(nil)).Elem()
}

type storageDomainArgs struct {
	// The encryption key used to encrypt the data. This is a user secret.
	EncryptionKey *AsymmetricEncryptedSecret `pulumi:"encryptionKey"`
	// The encryption status "Enabled | Disabled".
	EncryptionStatus string `pulumi:"encryptionStatus"`
	// The manager name
	ManagerName string `pulumi:"managerName"`
	// The storage domain name.
	Name string `pulumi:"name"`
	// The resource group name
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The storage account credentials.
	StorageAccountCredentialIds []string `pulumi:"storageAccountCredentialIds"`
}

// The set of arguments for constructing a StorageDomain resource.
type StorageDomainArgs struct {
	// The encryption key used to encrypt the data. This is a user secret.
	EncryptionKey AsymmetricEncryptedSecretPtrInput
	// The encryption status "Enabled | Disabled".
	EncryptionStatus pulumi.StringInput
	// The manager name
	ManagerName pulumi.StringInput
	// The storage domain name.
	Name pulumi.StringInput
	// The resource group name
	ResourceGroupName pulumi.StringInput
	// The storage account credentials.
	StorageAccountCredentialIds pulumi.StringArrayInput
}

func (StorageDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storageDomainArgs)(nil)).Elem()
}
