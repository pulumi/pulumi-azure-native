// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hybriddata

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The pair of customer secret.
type CustomerSecret struct {
	// The encryption algorithm used to encrypt data.
	Algorithm string `pulumi:"algorithm"`
	// The identifier to the data service input object which this secret corresponds to.
	KeyIdentifier string `pulumi:"keyIdentifier"`
	// It contains the encrypted customer secret.
	KeyValue string `pulumi:"keyValue"`
}

// CustomerSecretInput is an input type that accepts CustomerSecretArgs and CustomerSecretOutput values.
// You can construct a concrete instance of `CustomerSecretInput` via:
//
//          CustomerSecretArgs{...}
type CustomerSecretInput interface {
	pulumi.Input

	ToCustomerSecretOutput() CustomerSecretOutput
	ToCustomerSecretOutputWithContext(context.Context) CustomerSecretOutput
}

// The pair of customer secret.
type CustomerSecretArgs struct {
	// The encryption algorithm used to encrypt data.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// The identifier to the data service input object which this secret corresponds to.
	KeyIdentifier pulumi.StringInput `pulumi:"keyIdentifier"`
	// It contains the encrypted customer secret.
	KeyValue pulumi.StringInput `pulumi:"keyValue"`
}

func (CustomerSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerSecret)(nil)).Elem()
}

func (i CustomerSecretArgs) ToCustomerSecretOutput() CustomerSecretOutput {
	return i.ToCustomerSecretOutputWithContext(context.Background())
}

func (i CustomerSecretArgs) ToCustomerSecretOutputWithContext(ctx context.Context) CustomerSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerSecretOutput)
}

// CustomerSecretArrayInput is an input type that accepts CustomerSecretArray and CustomerSecretArrayOutput values.
// You can construct a concrete instance of `CustomerSecretArrayInput` via:
//
//          CustomerSecretArray{ CustomerSecretArgs{...} }
type CustomerSecretArrayInput interface {
	pulumi.Input

	ToCustomerSecretArrayOutput() CustomerSecretArrayOutput
	ToCustomerSecretArrayOutputWithContext(context.Context) CustomerSecretArrayOutput
}

type CustomerSecretArray []CustomerSecretInput

func (CustomerSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomerSecret)(nil)).Elem()
}

func (i CustomerSecretArray) ToCustomerSecretArrayOutput() CustomerSecretArrayOutput {
	return i.ToCustomerSecretArrayOutputWithContext(context.Background())
}

func (i CustomerSecretArray) ToCustomerSecretArrayOutputWithContext(ctx context.Context) CustomerSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerSecretArrayOutput)
}

// The pair of customer secret.
type CustomerSecretOutput struct{ *pulumi.OutputState }

func (CustomerSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerSecret)(nil)).Elem()
}

func (o CustomerSecretOutput) ToCustomerSecretOutput() CustomerSecretOutput {
	return o
}

func (o CustomerSecretOutput) ToCustomerSecretOutputWithContext(ctx context.Context) CustomerSecretOutput {
	return o
}

// The encryption algorithm used to encrypt data.
func (o CustomerSecretOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerSecret) string { return v.Algorithm }).(pulumi.StringOutput)
}

// The identifier to the data service input object which this secret corresponds to.
func (o CustomerSecretOutput) KeyIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerSecret) string { return v.KeyIdentifier }).(pulumi.StringOutput)
}

// It contains the encrypted customer secret.
func (o CustomerSecretOutput) KeyValue() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerSecret) string { return v.KeyValue }).(pulumi.StringOutput)
}

type CustomerSecretArrayOutput struct{ *pulumi.OutputState }

func (CustomerSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomerSecret)(nil)).Elem()
}

func (o CustomerSecretArrayOutput) ToCustomerSecretArrayOutput() CustomerSecretArrayOutput {
	return o
}

func (o CustomerSecretArrayOutput) ToCustomerSecretArrayOutputWithContext(ctx context.Context) CustomerSecretArrayOutput {
	return o
}

func (o CustomerSecretArrayOutput) Index(i pulumi.IntInput) CustomerSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomerSecret {
		return vs[0].([]CustomerSecret)[vs[1].(int)]
	}).(CustomerSecretOutput)
}

// The pair of customer secret.
type CustomerSecretResponse struct {
	// The encryption algorithm used to encrypt data.
	Algorithm string `pulumi:"algorithm"`
	// The identifier to the data service input object which this secret corresponds to.
	KeyIdentifier string `pulumi:"keyIdentifier"`
	// It contains the encrypted customer secret.
	KeyValue string `pulumi:"keyValue"`
}

// CustomerSecretResponseInput is an input type that accepts CustomerSecretResponseArgs and CustomerSecretResponseOutput values.
// You can construct a concrete instance of `CustomerSecretResponseInput` via:
//
//          CustomerSecretResponseArgs{...}
type CustomerSecretResponseInput interface {
	pulumi.Input

	ToCustomerSecretResponseOutput() CustomerSecretResponseOutput
	ToCustomerSecretResponseOutputWithContext(context.Context) CustomerSecretResponseOutput
}

// The pair of customer secret.
type CustomerSecretResponseArgs struct {
	// The encryption algorithm used to encrypt data.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// The identifier to the data service input object which this secret corresponds to.
	KeyIdentifier pulumi.StringInput `pulumi:"keyIdentifier"`
	// It contains the encrypted customer secret.
	KeyValue pulumi.StringInput `pulumi:"keyValue"`
}

func (CustomerSecretResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerSecretResponse)(nil)).Elem()
}

func (i CustomerSecretResponseArgs) ToCustomerSecretResponseOutput() CustomerSecretResponseOutput {
	return i.ToCustomerSecretResponseOutputWithContext(context.Background())
}

func (i CustomerSecretResponseArgs) ToCustomerSecretResponseOutputWithContext(ctx context.Context) CustomerSecretResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerSecretResponseOutput)
}

// CustomerSecretResponseArrayInput is an input type that accepts CustomerSecretResponseArray and CustomerSecretResponseArrayOutput values.
// You can construct a concrete instance of `CustomerSecretResponseArrayInput` via:
//
//          CustomerSecretResponseArray{ CustomerSecretResponseArgs{...} }
type CustomerSecretResponseArrayInput interface {
	pulumi.Input

	ToCustomerSecretResponseArrayOutput() CustomerSecretResponseArrayOutput
	ToCustomerSecretResponseArrayOutputWithContext(context.Context) CustomerSecretResponseArrayOutput
}

type CustomerSecretResponseArray []CustomerSecretResponseInput

func (CustomerSecretResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomerSecretResponse)(nil)).Elem()
}

func (i CustomerSecretResponseArray) ToCustomerSecretResponseArrayOutput() CustomerSecretResponseArrayOutput {
	return i.ToCustomerSecretResponseArrayOutputWithContext(context.Background())
}

func (i CustomerSecretResponseArray) ToCustomerSecretResponseArrayOutputWithContext(ctx context.Context) CustomerSecretResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerSecretResponseArrayOutput)
}

// The pair of customer secret.
type CustomerSecretResponseOutput struct{ *pulumi.OutputState }

func (CustomerSecretResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerSecretResponse)(nil)).Elem()
}

func (o CustomerSecretResponseOutput) ToCustomerSecretResponseOutput() CustomerSecretResponseOutput {
	return o
}

func (o CustomerSecretResponseOutput) ToCustomerSecretResponseOutputWithContext(ctx context.Context) CustomerSecretResponseOutput {
	return o
}

// The encryption algorithm used to encrypt data.
func (o CustomerSecretResponseOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerSecretResponse) string { return v.Algorithm }).(pulumi.StringOutput)
}

// The identifier to the data service input object which this secret corresponds to.
func (o CustomerSecretResponseOutput) KeyIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerSecretResponse) string { return v.KeyIdentifier }).(pulumi.StringOutput)
}

// It contains the encrypted customer secret.
func (o CustomerSecretResponseOutput) KeyValue() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerSecretResponse) string { return v.KeyValue }).(pulumi.StringOutput)
}

type CustomerSecretResponseArrayOutput struct{ *pulumi.OutputState }

func (CustomerSecretResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomerSecretResponse)(nil)).Elem()
}

func (o CustomerSecretResponseArrayOutput) ToCustomerSecretResponseArrayOutput() CustomerSecretResponseArrayOutput {
	return o
}

func (o CustomerSecretResponseArrayOutput) ToCustomerSecretResponseArrayOutputWithContext(ctx context.Context) CustomerSecretResponseArrayOutput {
	return o
}

func (o CustomerSecretResponseArrayOutput) Index(i pulumi.IntInput) CustomerSecretResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomerSecretResponse {
		return vs[0].([]CustomerSecretResponse)[vs[1].(int)]
	}).(CustomerSecretResponseOutput)
}

// The DataManager resource.
type DataManagerType struct {
	// Etag of the Resource.
	Etag *string `pulumi:"etag"`
	// The location of the resource. This will be one of the supported and registered Azure Geo Regions (e.g. West US, East
	// US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is created, but if an identical geo
	// region is specified on update the request will succeed.
	Location string `pulumi:"location"`
	// The Resource Name.
	Name string `pulumi:"name"`
	// The sku type.
	Sku *SkuResponse `pulumi:"sku"`
	// The list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource
	// (across resource groups).
	Tags map[string]string `pulumi:"tags"`
	// The Resource type.
	Type string `pulumi:"type"`
}

// DataManagerTypeInput is an input type that accepts DataManagerTypeArgs and DataManagerTypeOutput values.
// You can construct a concrete instance of `DataManagerTypeInput` via:
//
//          DataManagerTypeArgs{...}
type DataManagerTypeInput interface {
	pulumi.Input

	ToDataManagerTypeOutput() DataManagerTypeOutput
	ToDataManagerTypeOutputWithContext(context.Context) DataManagerTypeOutput
}

// The DataManager resource.
type DataManagerTypeArgs struct {
	// Etag of the Resource.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// The location of the resource. This will be one of the supported and registered Azure Geo Regions (e.g. West US, East
	// US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is created, but if an identical geo
	// region is specified on update the request will succeed.
	Location pulumi.StringInput `pulumi:"location"`
	// The Resource Name.
	Name pulumi.StringInput `pulumi:"name"`
	// The sku type.
	Sku SkuResponsePtrInput `pulumi:"sku"`
	// The list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource
	// (across resource groups).
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DataManagerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataManagerType)(nil)).Elem()
}

func (i DataManagerTypeArgs) ToDataManagerTypeOutput() DataManagerTypeOutput {
	return i.ToDataManagerTypeOutputWithContext(context.Background())
}

func (i DataManagerTypeArgs) ToDataManagerTypeOutputWithContext(ctx context.Context) DataManagerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataManagerTypeOutput)
}

// The DataManager resource.
type DataManagerTypeOutput struct{ *pulumi.OutputState }

func (DataManagerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataManagerType)(nil)).Elem()
}

func (o DataManagerTypeOutput) ToDataManagerTypeOutput() DataManagerTypeOutput {
	return o
}

func (o DataManagerTypeOutput) ToDataManagerTypeOutputWithContext(ctx context.Context) DataManagerTypeOutput {
	return o
}

// Etag of the Resource.
func (o DataManagerTypeOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataManagerType) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// The location of the resource. This will be one of the supported and registered Azure Geo Regions (e.g. West US, East
// US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is created, but if an identical geo
// region is specified on update the request will succeed.
func (o DataManagerTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v DataManagerType) string { return v.Location }).(pulumi.StringOutput)
}

// The Resource Name.
func (o DataManagerTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataManagerType) string { return v.Name }).(pulumi.StringOutput)
}

// The sku type.
func (o DataManagerTypeOutput) Sku() SkuResponsePtrOutput {
	return o.ApplyT(func(v DataManagerType) *SkuResponse { return v.Sku }).(SkuResponsePtrOutput)
}

// The list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource
// (across resource groups).
func (o DataManagerTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataManagerType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The Resource type.
func (o DataManagerTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DataManagerType) string { return v.Type }).(pulumi.StringOutput)
}

// Data store.
type DataStoreType struct {
	// Name of the object.
	Name string `pulumi:"name"`
	// DataStore properties.
	Properties DataStorePropertiesResponse `pulumi:"properties"`
	// Type of the object.
	Type string `pulumi:"type"`
}

// DataStoreTypeInput is an input type that accepts DataStoreTypeArgs and DataStoreTypeOutput values.
// You can construct a concrete instance of `DataStoreTypeInput` via:
//
//          DataStoreTypeArgs{...}
type DataStoreTypeInput interface {
	pulumi.Input

	ToDataStoreTypeOutput() DataStoreTypeOutput
	ToDataStoreTypeOutputWithContext(context.Context) DataStoreTypeOutput
}

// Data store.
type DataStoreTypeArgs struct {
	// Name of the object.
	Name pulumi.StringInput `pulumi:"name"`
	// DataStore properties.
	Properties DataStorePropertiesResponseInput `pulumi:"properties"`
	// Type of the object.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DataStoreTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataStoreType)(nil)).Elem()
}

func (i DataStoreTypeArgs) ToDataStoreTypeOutput() DataStoreTypeOutput {
	return i.ToDataStoreTypeOutputWithContext(context.Background())
}

func (i DataStoreTypeArgs) ToDataStoreTypeOutputWithContext(ctx context.Context) DataStoreTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataStoreTypeOutput)
}

// Data store.
type DataStoreTypeOutput struct{ *pulumi.OutputState }

func (DataStoreTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataStoreType)(nil)).Elem()
}

func (o DataStoreTypeOutput) ToDataStoreTypeOutput() DataStoreTypeOutput {
	return o
}

func (o DataStoreTypeOutput) ToDataStoreTypeOutputWithContext(ctx context.Context) DataStoreTypeOutput {
	return o
}

// Name of the object.
func (o DataStoreTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataStoreType) string { return v.Name }).(pulumi.StringOutput)
}

// DataStore properties.
func (o DataStoreTypeOutput) Properties() DataStorePropertiesResponseOutput {
	return o.ApplyT(func(v DataStoreType) DataStorePropertiesResponse { return v.Properties }).(DataStorePropertiesResponseOutput)
}

// Type of the object.
func (o DataStoreTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DataStoreType) string { return v.Type }).(pulumi.StringOutput)
}

// Data Store for sources and sinks
type DataStoreProperties struct {
	// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
	CustomerSecrets []CustomerSecret `pulumi:"customerSecrets"`
	// The arm id of the data store type.
	DataStoreTypeId string `pulumi:"dataStoreTypeId"`
	// A generic json used differently by each data source type.
	ExtendedProperties map[string]string `pulumi:"extendedProperties"`
	// Arm Id for the manager resource to which the data source is associated. This is optional.
	RepositoryId *string `pulumi:"repositoryId"`
	// State of the data source.
	State string `pulumi:"state"`
}

// DataStorePropertiesInput is an input type that accepts DataStorePropertiesArgs and DataStorePropertiesOutput values.
// You can construct a concrete instance of `DataStorePropertiesInput` via:
//
//          DataStorePropertiesArgs{...}
type DataStorePropertiesInput interface {
	pulumi.Input

	ToDataStorePropertiesOutput() DataStorePropertiesOutput
	ToDataStorePropertiesOutputWithContext(context.Context) DataStorePropertiesOutput
}

// Data Store for sources and sinks
type DataStorePropertiesArgs struct {
	// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
	CustomerSecrets CustomerSecretArrayInput `pulumi:"customerSecrets"`
	// The arm id of the data store type.
	DataStoreTypeId pulumi.StringInput `pulumi:"dataStoreTypeId"`
	// A generic json used differently by each data source type.
	ExtendedProperties pulumi.StringMapInput `pulumi:"extendedProperties"`
	// Arm Id for the manager resource to which the data source is associated. This is optional.
	RepositoryId pulumi.StringPtrInput `pulumi:"repositoryId"`
	// State of the data source.
	State pulumi.StringInput `pulumi:"state"`
}

func (DataStorePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataStoreProperties)(nil)).Elem()
}

func (i DataStorePropertiesArgs) ToDataStorePropertiesOutput() DataStorePropertiesOutput {
	return i.ToDataStorePropertiesOutputWithContext(context.Background())
}

func (i DataStorePropertiesArgs) ToDataStorePropertiesOutputWithContext(ctx context.Context) DataStorePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataStorePropertiesOutput)
}

func (i DataStorePropertiesArgs) ToDataStorePropertiesPtrOutput() DataStorePropertiesPtrOutput {
	return i.ToDataStorePropertiesPtrOutputWithContext(context.Background())
}

func (i DataStorePropertiesArgs) ToDataStorePropertiesPtrOutputWithContext(ctx context.Context) DataStorePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataStorePropertiesOutput).ToDataStorePropertiesPtrOutputWithContext(ctx)
}

// DataStorePropertiesPtrInput is an input type that accepts DataStorePropertiesArgs, DataStorePropertiesPtr and DataStorePropertiesPtrOutput values.
// You can construct a concrete instance of `DataStorePropertiesPtrInput` via:
//
//          DataStorePropertiesArgs{...}
//
//  or:
//
//          nil
type DataStorePropertiesPtrInput interface {
	pulumi.Input

	ToDataStorePropertiesPtrOutput() DataStorePropertiesPtrOutput
	ToDataStorePropertiesPtrOutputWithContext(context.Context) DataStorePropertiesPtrOutput
}

type dataStorePropertiesPtrType DataStorePropertiesArgs

func DataStorePropertiesPtr(v *DataStorePropertiesArgs) DataStorePropertiesPtrInput {
	return (*dataStorePropertiesPtrType)(v)
}

func (*dataStorePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataStoreProperties)(nil)).Elem()
}

func (i *dataStorePropertiesPtrType) ToDataStorePropertiesPtrOutput() DataStorePropertiesPtrOutput {
	return i.ToDataStorePropertiesPtrOutputWithContext(context.Background())
}

func (i *dataStorePropertiesPtrType) ToDataStorePropertiesPtrOutputWithContext(ctx context.Context) DataStorePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataStorePropertiesPtrOutput)
}

// Data Store for sources and sinks
type DataStorePropertiesOutput struct{ *pulumi.OutputState }

func (DataStorePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataStoreProperties)(nil)).Elem()
}

func (o DataStorePropertiesOutput) ToDataStorePropertiesOutput() DataStorePropertiesOutput {
	return o
}

func (o DataStorePropertiesOutput) ToDataStorePropertiesOutputWithContext(ctx context.Context) DataStorePropertiesOutput {
	return o
}

func (o DataStorePropertiesOutput) ToDataStorePropertiesPtrOutput() DataStorePropertiesPtrOutput {
	return o.ToDataStorePropertiesPtrOutputWithContext(context.Background())
}

func (o DataStorePropertiesOutput) ToDataStorePropertiesPtrOutputWithContext(ctx context.Context) DataStorePropertiesPtrOutput {
	return o.ApplyT(func(v DataStoreProperties) *DataStoreProperties {
		return &v
	}).(DataStorePropertiesPtrOutput)
}

// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
func (o DataStorePropertiesOutput) CustomerSecrets() CustomerSecretArrayOutput {
	return o.ApplyT(func(v DataStoreProperties) []CustomerSecret { return v.CustomerSecrets }).(CustomerSecretArrayOutput)
}

// The arm id of the data store type.
func (o DataStorePropertiesOutput) DataStoreTypeId() pulumi.StringOutput {
	return o.ApplyT(func(v DataStoreProperties) string { return v.DataStoreTypeId }).(pulumi.StringOutput)
}

// A generic json used differently by each data source type.
func (o DataStorePropertiesOutput) ExtendedProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataStoreProperties) map[string]string { return v.ExtendedProperties }).(pulumi.StringMapOutput)
}

// Arm Id for the manager resource to which the data source is associated. This is optional.
func (o DataStorePropertiesOutput) RepositoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataStoreProperties) *string { return v.RepositoryId }).(pulumi.StringPtrOutput)
}

// State of the data source.
func (o DataStorePropertiesOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v DataStoreProperties) string { return v.State }).(pulumi.StringOutput)
}

type DataStorePropertiesPtrOutput struct{ *pulumi.OutputState }

func (DataStorePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataStoreProperties)(nil)).Elem()
}

func (o DataStorePropertiesPtrOutput) ToDataStorePropertiesPtrOutput() DataStorePropertiesPtrOutput {
	return o
}

func (o DataStorePropertiesPtrOutput) ToDataStorePropertiesPtrOutputWithContext(ctx context.Context) DataStorePropertiesPtrOutput {
	return o
}

func (o DataStorePropertiesPtrOutput) Elem() DataStorePropertiesOutput {
	return o.ApplyT(func(v *DataStoreProperties) DataStoreProperties { return *v }).(DataStorePropertiesOutput)
}

// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
func (o DataStorePropertiesPtrOutput) CustomerSecrets() CustomerSecretArrayOutput {
	return o.ApplyT(func(v *DataStoreProperties) []CustomerSecret {
		if v == nil {
			return nil
		}
		return v.CustomerSecrets
	}).(CustomerSecretArrayOutput)
}

// The arm id of the data store type.
func (o DataStorePropertiesPtrOutput) DataStoreTypeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataStoreProperties) *string {
		if v == nil {
			return nil
		}
		return &v.DataStoreTypeId
	}).(pulumi.StringPtrOutput)
}

// A generic json used differently by each data source type.
func (o DataStorePropertiesPtrOutput) ExtendedProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataStoreProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ExtendedProperties
	}).(pulumi.StringMapOutput)
}

// Arm Id for the manager resource to which the data source is associated. This is optional.
func (o DataStorePropertiesPtrOutput) RepositoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataStoreProperties) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryId
	}).(pulumi.StringPtrOutput)
}

// State of the data source.
func (o DataStorePropertiesPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataStoreProperties) *string {
		if v == nil {
			return nil
		}
		return &v.State
	}).(pulumi.StringPtrOutput)
}

// Data Store for sources and sinks
type DataStorePropertiesResponse struct {
	// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
	CustomerSecrets []CustomerSecretResponse `pulumi:"customerSecrets"`
	// The arm id of the data store type.
	DataStoreTypeId string `pulumi:"dataStoreTypeId"`
	// A generic json used differently by each data source type.
	ExtendedProperties map[string]string `pulumi:"extendedProperties"`
	// Arm Id for the manager resource to which the data source is associated. This is optional.
	RepositoryId *string `pulumi:"repositoryId"`
	// State of the data source.
	State string `pulumi:"state"`
}

// DataStorePropertiesResponseInput is an input type that accepts DataStorePropertiesResponseArgs and DataStorePropertiesResponseOutput values.
// You can construct a concrete instance of `DataStorePropertiesResponseInput` via:
//
//          DataStorePropertiesResponseArgs{...}
type DataStorePropertiesResponseInput interface {
	pulumi.Input

	ToDataStorePropertiesResponseOutput() DataStorePropertiesResponseOutput
	ToDataStorePropertiesResponseOutputWithContext(context.Context) DataStorePropertiesResponseOutput
}

// Data Store for sources and sinks
type DataStorePropertiesResponseArgs struct {
	// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
	CustomerSecrets CustomerSecretResponseArrayInput `pulumi:"customerSecrets"`
	// The arm id of the data store type.
	DataStoreTypeId pulumi.StringInput `pulumi:"dataStoreTypeId"`
	// A generic json used differently by each data source type.
	ExtendedProperties pulumi.StringMapInput `pulumi:"extendedProperties"`
	// Arm Id for the manager resource to which the data source is associated. This is optional.
	RepositoryId pulumi.StringPtrInput `pulumi:"repositoryId"`
	// State of the data source.
	State pulumi.StringInput `pulumi:"state"`
}

func (DataStorePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataStorePropertiesResponse)(nil)).Elem()
}

func (i DataStorePropertiesResponseArgs) ToDataStorePropertiesResponseOutput() DataStorePropertiesResponseOutput {
	return i.ToDataStorePropertiesResponseOutputWithContext(context.Background())
}

func (i DataStorePropertiesResponseArgs) ToDataStorePropertiesResponseOutputWithContext(ctx context.Context) DataStorePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataStorePropertiesResponseOutput)
}

func (i DataStorePropertiesResponseArgs) ToDataStorePropertiesResponsePtrOutput() DataStorePropertiesResponsePtrOutput {
	return i.ToDataStorePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i DataStorePropertiesResponseArgs) ToDataStorePropertiesResponsePtrOutputWithContext(ctx context.Context) DataStorePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataStorePropertiesResponseOutput).ToDataStorePropertiesResponsePtrOutputWithContext(ctx)
}

// DataStorePropertiesResponsePtrInput is an input type that accepts DataStorePropertiesResponseArgs, DataStorePropertiesResponsePtr and DataStorePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `DataStorePropertiesResponsePtrInput` via:
//
//          DataStorePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type DataStorePropertiesResponsePtrInput interface {
	pulumi.Input

	ToDataStorePropertiesResponsePtrOutput() DataStorePropertiesResponsePtrOutput
	ToDataStorePropertiesResponsePtrOutputWithContext(context.Context) DataStorePropertiesResponsePtrOutput
}

type dataStorePropertiesResponsePtrType DataStorePropertiesResponseArgs

func DataStorePropertiesResponsePtr(v *DataStorePropertiesResponseArgs) DataStorePropertiesResponsePtrInput {
	return (*dataStorePropertiesResponsePtrType)(v)
}

func (*dataStorePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataStorePropertiesResponse)(nil)).Elem()
}

func (i *dataStorePropertiesResponsePtrType) ToDataStorePropertiesResponsePtrOutput() DataStorePropertiesResponsePtrOutput {
	return i.ToDataStorePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *dataStorePropertiesResponsePtrType) ToDataStorePropertiesResponsePtrOutputWithContext(ctx context.Context) DataStorePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataStorePropertiesResponsePtrOutput)
}

// Data Store for sources and sinks
type DataStorePropertiesResponseOutput struct{ *pulumi.OutputState }

func (DataStorePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataStorePropertiesResponse)(nil)).Elem()
}

func (o DataStorePropertiesResponseOutput) ToDataStorePropertiesResponseOutput() DataStorePropertiesResponseOutput {
	return o
}

func (o DataStorePropertiesResponseOutput) ToDataStorePropertiesResponseOutputWithContext(ctx context.Context) DataStorePropertiesResponseOutput {
	return o
}

func (o DataStorePropertiesResponseOutput) ToDataStorePropertiesResponsePtrOutput() DataStorePropertiesResponsePtrOutput {
	return o.ToDataStorePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o DataStorePropertiesResponseOutput) ToDataStorePropertiesResponsePtrOutputWithContext(ctx context.Context) DataStorePropertiesResponsePtrOutput {
	return o.ApplyT(func(v DataStorePropertiesResponse) *DataStorePropertiesResponse {
		return &v
	}).(DataStorePropertiesResponsePtrOutput)
}

// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
func (o DataStorePropertiesResponseOutput) CustomerSecrets() CustomerSecretResponseArrayOutput {
	return o.ApplyT(func(v DataStorePropertiesResponse) []CustomerSecretResponse { return v.CustomerSecrets }).(CustomerSecretResponseArrayOutput)
}

// The arm id of the data store type.
func (o DataStorePropertiesResponseOutput) DataStoreTypeId() pulumi.StringOutput {
	return o.ApplyT(func(v DataStorePropertiesResponse) string { return v.DataStoreTypeId }).(pulumi.StringOutput)
}

// A generic json used differently by each data source type.
func (o DataStorePropertiesResponseOutput) ExtendedProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataStorePropertiesResponse) map[string]string { return v.ExtendedProperties }).(pulumi.StringMapOutput)
}

// Arm Id for the manager resource to which the data source is associated. This is optional.
func (o DataStorePropertiesResponseOutput) RepositoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataStorePropertiesResponse) *string { return v.RepositoryId }).(pulumi.StringPtrOutput)
}

// State of the data source.
func (o DataStorePropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v DataStorePropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

type DataStorePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (DataStorePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataStorePropertiesResponse)(nil)).Elem()
}

func (o DataStorePropertiesResponsePtrOutput) ToDataStorePropertiesResponsePtrOutput() DataStorePropertiesResponsePtrOutput {
	return o
}

func (o DataStorePropertiesResponsePtrOutput) ToDataStorePropertiesResponsePtrOutputWithContext(ctx context.Context) DataStorePropertiesResponsePtrOutput {
	return o
}

func (o DataStorePropertiesResponsePtrOutput) Elem() DataStorePropertiesResponseOutput {
	return o.ApplyT(func(v *DataStorePropertiesResponse) DataStorePropertiesResponse { return *v }).(DataStorePropertiesResponseOutput)
}

// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
func (o DataStorePropertiesResponsePtrOutput) CustomerSecrets() CustomerSecretResponseArrayOutput {
	return o.ApplyT(func(v *DataStorePropertiesResponse) []CustomerSecretResponse {
		if v == nil {
			return nil
		}
		return v.CustomerSecrets
	}).(CustomerSecretResponseArrayOutput)
}

// The arm id of the data store type.
func (o DataStorePropertiesResponsePtrOutput) DataStoreTypeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataStorePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataStoreTypeId
	}).(pulumi.StringPtrOutput)
}

// A generic json used differently by each data source type.
func (o DataStorePropertiesResponsePtrOutput) ExtendedProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataStorePropertiesResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.ExtendedProperties
	}).(pulumi.StringMapOutput)
}

// Arm Id for the manager resource to which the data source is associated. This is optional.
func (o DataStorePropertiesResponsePtrOutput) RepositoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataStorePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryId
	}).(pulumi.StringPtrOutput)
}

// State of the data source.
func (o DataStorePropertiesResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataStorePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.State
	}).(pulumi.StringPtrOutput)
}

// Job Definition.
type JobDefinitionType struct {
	// Name of the object.
	Name string `pulumi:"name"`
	// JobDefinition properties.
	Properties JobDefinitionPropertiesResponse `pulumi:"properties"`
	// Type of the object.
	Type string `pulumi:"type"`
}

// JobDefinitionTypeInput is an input type that accepts JobDefinitionTypeArgs and JobDefinitionTypeOutput values.
// You can construct a concrete instance of `JobDefinitionTypeInput` via:
//
//          JobDefinitionTypeArgs{...}
type JobDefinitionTypeInput interface {
	pulumi.Input

	ToJobDefinitionTypeOutput() JobDefinitionTypeOutput
	ToJobDefinitionTypeOutputWithContext(context.Context) JobDefinitionTypeOutput
}

// Job Definition.
type JobDefinitionTypeArgs struct {
	// Name of the object.
	Name pulumi.StringInput `pulumi:"name"`
	// JobDefinition properties.
	Properties JobDefinitionPropertiesResponseInput `pulumi:"properties"`
	// Type of the object.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JobDefinitionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionType)(nil)).Elem()
}

func (i JobDefinitionTypeArgs) ToJobDefinitionTypeOutput() JobDefinitionTypeOutput {
	return i.ToJobDefinitionTypeOutputWithContext(context.Background())
}

func (i JobDefinitionTypeArgs) ToJobDefinitionTypeOutputWithContext(ctx context.Context) JobDefinitionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionTypeOutput)
}

// Job Definition.
type JobDefinitionTypeOutput struct{ *pulumi.OutputState }

func (JobDefinitionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionType)(nil)).Elem()
}

func (o JobDefinitionTypeOutput) ToJobDefinitionTypeOutput() JobDefinitionTypeOutput {
	return o
}

func (o JobDefinitionTypeOutput) ToJobDefinitionTypeOutputWithContext(ctx context.Context) JobDefinitionTypeOutput {
	return o
}

// Name of the object.
func (o JobDefinitionTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionType) string { return v.Name }).(pulumi.StringOutput)
}

// JobDefinition properties.
func (o JobDefinitionTypeOutput) Properties() JobDefinitionPropertiesResponseOutput {
	return o.ApplyT(func(v JobDefinitionType) JobDefinitionPropertiesResponse { return v.Properties }).(JobDefinitionPropertiesResponseOutput)
}

// Type of the object.
func (o JobDefinitionTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionType) string { return v.Type }).(pulumi.StringOutput)
}

// Job Definition
type JobDefinitionProperties struct {
	// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
	CustomerSecrets []CustomerSecret `pulumi:"customerSecrets"`
	// A generic json used differently by each data service type.
	DataServiceInput map[string]string `pulumi:"dataServiceInput"`
	// Data Sink Id associated to the job definition.
	DataSinkId string `pulumi:"dataSinkId"`
	// Data Source Id associated to the job definition.
	DataSourceId string `pulumi:"dataSourceId"`
	// Last modified time of the job definition.
	LastModifiedTime *string `pulumi:"lastModifiedTime"`
	// This is the preferred geo location for the job to run.
	RunLocation *string `pulumi:"runLocation"`
	// Schedule for running the job definition
	Schedules []Schedule `pulumi:"schedules"`
	// State of the job definition.
	State string `pulumi:"state"`
	// Enum to detect if user confirmation is required. If not passed will default to NotRequired.
	UserConfirmation *string `pulumi:"userConfirmation"`
}

// JobDefinitionPropertiesInput is an input type that accepts JobDefinitionPropertiesArgs and JobDefinitionPropertiesOutput values.
// You can construct a concrete instance of `JobDefinitionPropertiesInput` via:
//
//          JobDefinitionPropertiesArgs{...}
type JobDefinitionPropertiesInput interface {
	pulumi.Input

	ToJobDefinitionPropertiesOutput() JobDefinitionPropertiesOutput
	ToJobDefinitionPropertiesOutputWithContext(context.Context) JobDefinitionPropertiesOutput
}

// Job Definition
type JobDefinitionPropertiesArgs struct {
	// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
	CustomerSecrets CustomerSecretArrayInput `pulumi:"customerSecrets"`
	// A generic json used differently by each data service type.
	DataServiceInput pulumi.StringMapInput `pulumi:"dataServiceInput"`
	// Data Sink Id associated to the job definition.
	DataSinkId pulumi.StringInput `pulumi:"dataSinkId"`
	// Data Source Id associated to the job definition.
	DataSourceId pulumi.StringInput `pulumi:"dataSourceId"`
	// Last modified time of the job definition.
	LastModifiedTime pulumi.StringPtrInput `pulumi:"lastModifiedTime"`
	// This is the preferred geo location for the job to run.
	RunLocation pulumi.StringPtrInput `pulumi:"runLocation"`
	// Schedule for running the job definition
	Schedules ScheduleArrayInput `pulumi:"schedules"`
	// State of the job definition.
	State pulumi.StringInput `pulumi:"state"`
	// Enum to detect if user confirmation is required. If not passed will default to NotRequired.
	UserConfirmation pulumi.StringPtrInput `pulumi:"userConfirmation"`
}

func (JobDefinitionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionProperties)(nil)).Elem()
}

func (i JobDefinitionPropertiesArgs) ToJobDefinitionPropertiesOutput() JobDefinitionPropertiesOutput {
	return i.ToJobDefinitionPropertiesOutputWithContext(context.Background())
}

func (i JobDefinitionPropertiesArgs) ToJobDefinitionPropertiesOutputWithContext(ctx context.Context) JobDefinitionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionPropertiesOutput)
}

func (i JobDefinitionPropertiesArgs) ToJobDefinitionPropertiesPtrOutput() JobDefinitionPropertiesPtrOutput {
	return i.ToJobDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (i JobDefinitionPropertiesArgs) ToJobDefinitionPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionPropertiesOutput).ToJobDefinitionPropertiesPtrOutputWithContext(ctx)
}

// JobDefinitionPropertiesPtrInput is an input type that accepts JobDefinitionPropertiesArgs, JobDefinitionPropertiesPtr and JobDefinitionPropertiesPtrOutput values.
// You can construct a concrete instance of `JobDefinitionPropertiesPtrInput` via:
//
//          JobDefinitionPropertiesArgs{...}
//
//  or:
//
//          nil
type JobDefinitionPropertiesPtrInput interface {
	pulumi.Input

	ToJobDefinitionPropertiesPtrOutput() JobDefinitionPropertiesPtrOutput
	ToJobDefinitionPropertiesPtrOutputWithContext(context.Context) JobDefinitionPropertiesPtrOutput
}

type jobDefinitionPropertiesPtrType JobDefinitionPropertiesArgs

func JobDefinitionPropertiesPtr(v *JobDefinitionPropertiesArgs) JobDefinitionPropertiesPtrInput {
	return (*jobDefinitionPropertiesPtrType)(v)
}

func (*jobDefinitionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionProperties)(nil)).Elem()
}

func (i *jobDefinitionPropertiesPtrType) ToJobDefinitionPropertiesPtrOutput() JobDefinitionPropertiesPtrOutput {
	return i.ToJobDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (i *jobDefinitionPropertiesPtrType) ToJobDefinitionPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionPropertiesPtrOutput)
}

// Job Definition
type JobDefinitionPropertiesOutput struct{ *pulumi.OutputState }

func (JobDefinitionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionProperties)(nil)).Elem()
}

func (o JobDefinitionPropertiesOutput) ToJobDefinitionPropertiesOutput() JobDefinitionPropertiesOutput {
	return o
}

func (o JobDefinitionPropertiesOutput) ToJobDefinitionPropertiesOutputWithContext(ctx context.Context) JobDefinitionPropertiesOutput {
	return o
}

func (o JobDefinitionPropertiesOutput) ToJobDefinitionPropertiesPtrOutput() JobDefinitionPropertiesPtrOutput {
	return o.ToJobDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (o JobDefinitionPropertiesOutput) ToJobDefinitionPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionPropertiesPtrOutput {
	return o.ApplyT(func(v JobDefinitionProperties) *JobDefinitionProperties {
		return &v
	}).(JobDefinitionPropertiesPtrOutput)
}

// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
func (o JobDefinitionPropertiesOutput) CustomerSecrets() CustomerSecretArrayOutput {
	return o.ApplyT(func(v JobDefinitionProperties) []CustomerSecret { return v.CustomerSecrets }).(CustomerSecretArrayOutput)
}

// A generic json used differently by each data service type.
func (o JobDefinitionPropertiesOutput) DataServiceInput() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobDefinitionProperties) map[string]string { return v.DataServiceInput }).(pulumi.StringMapOutput)
}

// Data Sink Id associated to the job definition.
func (o JobDefinitionPropertiesOutput) DataSinkId() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionProperties) string { return v.DataSinkId }).(pulumi.StringOutput)
}

// Data Source Id associated to the job definition.
func (o JobDefinitionPropertiesOutput) DataSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionProperties) string { return v.DataSourceId }).(pulumi.StringOutput)
}

// Last modified time of the job definition.
func (o JobDefinitionPropertiesOutput) LastModifiedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionProperties) *string { return v.LastModifiedTime }).(pulumi.StringPtrOutput)
}

// This is the preferred geo location for the job to run.
func (o JobDefinitionPropertiesOutput) RunLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionProperties) *string { return v.RunLocation }).(pulumi.StringPtrOutput)
}

// Schedule for running the job definition
func (o JobDefinitionPropertiesOutput) Schedules() ScheduleArrayOutput {
	return o.ApplyT(func(v JobDefinitionProperties) []Schedule { return v.Schedules }).(ScheduleArrayOutput)
}

// State of the job definition.
func (o JobDefinitionPropertiesOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionProperties) string { return v.State }).(pulumi.StringOutput)
}

// Enum to detect if user confirmation is required. If not passed will default to NotRequired.
func (o JobDefinitionPropertiesOutput) UserConfirmation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionProperties) *string { return v.UserConfirmation }).(pulumi.StringPtrOutput)
}

type JobDefinitionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionProperties)(nil)).Elem()
}

func (o JobDefinitionPropertiesPtrOutput) ToJobDefinitionPropertiesPtrOutput() JobDefinitionPropertiesPtrOutput {
	return o
}

func (o JobDefinitionPropertiesPtrOutput) ToJobDefinitionPropertiesPtrOutputWithContext(ctx context.Context) JobDefinitionPropertiesPtrOutput {
	return o
}

func (o JobDefinitionPropertiesPtrOutput) Elem() JobDefinitionPropertiesOutput {
	return o.ApplyT(func(v *JobDefinitionProperties) JobDefinitionProperties { return *v }).(JobDefinitionPropertiesOutput)
}

// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
func (o JobDefinitionPropertiesPtrOutput) CustomerSecrets() CustomerSecretArrayOutput {
	return o.ApplyT(func(v *JobDefinitionProperties) []CustomerSecret {
		if v == nil {
			return nil
		}
		return v.CustomerSecrets
	}).(CustomerSecretArrayOutput)
}

// A generic json used differently by each data service type.
func (o JobDefinitionPropertiesPtrOutput) DataServiceInput() pulumi.StringMapOutput {
	return o.ApplyT(func(v *JobDefinitionProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.DataServiceInput
	}).(pulumi.StringMapOutput)
}

// Data Sink Id associated to the job definition.
func (o JobDefinitionPropertiesPtrOutput) DataSinkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.DataSinkId
	}).(pulumi.StringPtrOutput)
}

// Data Source Id associated to the job definition.
func (o JobDefinitionPropertiesPtrOutput) DataSourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.DataSourceId
	}).(pulumi.StringPtrOutput)
}

// Last modified time of the job definition.
func (o JobDefinitionPropertiesPtrOutput) LastModifiedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedTime
	}).(pulumi.StringPtrOutput)
}

// This is the preferred geo location for the job to run.
func (o JobDefinitionPropertiesPtrOutput) RunLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.RunLocation
	}).(pulumi.StringPtrOutput)
}

// Schedule for running the job definition
func (o JobDefinitionPropertiesPtrOutput) Schedules() ScheduleArrayOutput {
	return o.ApplyT(func(v *JobDefinitionProperties) []Schedule {
		if v == nil {
			return nil
		}
		return v.Schedules
	}).(ScheduleArrayOutput)
}

// State of the job definition.
func (o JobDefinitionPropertiesPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.State
	}).(pulumi.StringPtrOutput)
}

// Enum to detect if user confirmation is required. If not passed will default to NotRequired.
func (o JobDefinitionPropertiesPtrOutput) UserConfirmation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.UserConfirmation
	}).(pulumi.StringPtrOutput)
}

// Job Definition
type JobDefinitionPropertiesResponse struct {
	// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
	CustomerSecrets []CustomerSecretResponse `pulumi:"customerSecrets"`
	// A generic json used differently by each data service type.
	DataServiceInput map[string]string `pulumi:"dataServiceInput"`
	// Data Sink Id associated to the job definition.
	DataSinkId string `pulumi:"dataSinkId"`
	// Data Source Id associated to the job definition.
	DataSourceId string `pulumi:"dataSourceId"`
	// Last modified time of the job definition.
	LastModifiedTime *string `pulumi:"lastModifiedTime"`
	// This is the preferred geo location for the job to run.
	RunLocation *string `pulumi:"runLocation"`
	// Schedule for running the job definition
	Schedules []ScheduleResponse `pulumi:"schedules"`
	// State of the job definition.
	State string `pulumi:"state"`
	// Enum to detect if user confirmation is required. If not passed will default to NotRequired.
	UserConfirmation *string `pulumi:"userConfirmation"`
}

// JobDefinitionPropertiesResponseInput is an input type that accepts JobDefinitionPropertiesResponseArgs and JobDefinitionPropertiesResponseOutput values.
// You can construct a concrete instance of `JobDefinitionPropertiesResponseInput` via:
//
//          JobDefinitionPropertiesResponseArgs{...}
type JobDefinitionPropertiesResponseInput interface {
	pulumi.Input

	ToJobDefinitionPropertiesResponseOutput() JobDefinitionPropertiesResponseOutput
	ToJobDefinitionPropertiesResponseOutputWithContext(context.Context) JobDefinitionPropertiesResponseOutput
}

// Job Definition
type JobDefinitionPropertiesResponseArgs struct {
	// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
	CustomerSecrets CustomerSecretResponseArrayInput `pulumi:"customerSecrets"`
	// A generic json used differently by each data service type.
	DataServiceInput pulumi.StringMapInput `pulumi:"dataServiceInput"`
	// Data Sink Id associated to the job definition.
	DataSinkId pulumi.StringInput `pulumi:"dataSinkId"`
	// Data Source Id associated to the job definition.
	DataSourceId pulumi.StringInput `pulumi:"dataSourceId"`
	// Last modified time of the job definition.
	LastModifiedTime pulumi.StringPtrInput `pulumi:"lastModifiedTime"`
	// This is the preferred geo location for the job to run.
	RunLocation pulumi.StringPtrInput `pulumi:"runLocation"`
	// Schedule for running the job definition
	Schedules ScheduleResponseArrayInput `pulumi:"schedules"`
	// State of the job definition.
	State pulumi.StringInput `pulumi:"state"`
	// Enum to detect if user confirmation is required. If not passed will default to NotRequired.
	UserConfirmation pulumi.StringPtrInput `pulumi:"userConfirmation"`
}

func (JobDefinitionPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionPropertiesResponse)(nil)).Elem()
}

func (i JobDefinitionPropertiesResponseArgs) ToJobDefinitionPropertiesResponseOutput() JobDefinitionPropertiesResponseOutput {
	return i.ToJobDefinitionPropertiesResponseOutputWithContext(context.Background())
}

func (i JobDefinitionPropertiesResponseArgs) ToJobDefinitionPropertiesResponseOutputWithContext(ctx context.Context) JobDefinitionPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionPropertiesResponseOutput)
}

func (i JobDefinitionPropertiesResponseArgs) ToJobDefinitionPropertiesResponsePtrOutput() JobDefinitionPropertiesResponsePtrOutput {
	return i.ToJobDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i JobDefinitionPropertiesResponseArgs) ToJobDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) JobDefinitionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionPropertiesResponseOutput).ToJobDefinitionPropertiesResponsePtrOutputWithContext(ctx)
}

// JobDefinitionPropertiesResponsePtrInput is an input type that accepts JobDefinitionPropertiesResponseArgs, JobDefinitionPropertiesResponsePtr and JobDefinitionPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `JobDefinitionPropertiesResponsePtrInput` via:
//
//          JobDefinitionPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type JobDefinitionPropertiesResponsePtrInput interface {
	pulumi.Input

	ToJobDefinitionPropertiesResponsePtrOutput() JobDefinitionPropertiesResponsePtrOutput
	ToJobDefinitionPropertiesResponsePtrOutputWithContext(context.Context) JobDefinitionPropertiesResponsePtrOutput
}

type jobDefinitionPropertiesResponsePtrType JobDefinitionPropertiesResponseArgs

func JobDefinitionPropertiesResponsePtr(v *JobDefinitionPropertiesResponseArgs) JobDefinitionPropertiesResponsePtrInput {
	return (*jobDefinitionPropertiesResponsePtrType)(v)
}

func (*jobDefinitionPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionPropertiesResponse)(nil)).Elem()
}

func (i *jobDefinitionPropertiesResponsePtrType) ToJobDefinitionPropertiesResponsePtrOutput() JobDefinitionPropertiesResponsePtrOutput {
	return i.ToJobDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *jobDefinitionPropertiesResponsePtrType) ToJobDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) JobDefinitionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobDefinitionPropertiesResponsePtrOutput)
}

// Job Definition
type JobDefinitionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (JobDefinitionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobDefinitionPropertiesResponse)(nil)).Elem()
}

func (o JobDefinitionPropertiesResponseOutput) ToJobDefinitionPropertiesResponseOutput() JobDefinitionPropertiesResponseOutput {
	return o
}

func (o JobDefinitionPropertiesResponseOutput) ToJobDefinitionPropertiesResponseOutputWithContext(ctx context.Context) JobDefinitionPropertiesResponseOutput {
	return o
}

func (o JobDefinitionPropertiesResponseOutput) ToJobDefinitionPropertiesResponsePtrOutput() JobDefinitionPropertiesResponsePtrOutput {
	return o.ToJobDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o JobDefinitionPropertiesResponseOutput) ToJobDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) JobDefinitionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v JobDefinitionPropertiesResponse) *JobDefinitionPropertiesResponse {
		return &v
	}).(JobDefinitionPropertiesResponsePtrOutput)
}

// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
func (o JobDefinitionPropertiesResponseOutput) CustomerSecrets() CustomerSecretResponseArrayOutput {
	return o.ApplyT(func(v JobDefinitionPropertiesResponse) []CustomerSecretResponse { return v.CustomerSecrets }).(CustomerSecretResponseArrayOutput)
}

// A generic json used differently by each data service type.
func (o JobDefinitionPropertiesResponseOutput) DataServiceInput() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobDefinitionPropertiesResponse) map[string]string { return v.DataServiceInput }).(pulumi.StringMapOutput)
}

// Data Sink Id associated to the job definition.
func (o JobDefinitionPropertiesResponseOutput) DataSinkId() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionPropertiesResponse) string { return v.DataSinkId }).(pulumi.StringOutput)
}

// Data Source Id associated to the job definition.
func (o JobDefinitionPropertiesResponseOutput) DataSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionPropertiesResponse) string { return v.DataSourceId }).(pulumi.StringOutput)
}

// Last modified time of the job definition.
func (o JobDefinitionPropertiesResponseOutput) LastModifiedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionPropertiesResponse) *string { return v.LastModifiedTime }).(pulumi.StringPtrOutput)
}

// This is the preferred geo location for the job to run.
func (o JobDefinitionPropertiesResponseOutput) RunLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionPropertiesResponse) *string { return v.RunLocation }).(pulumi.StringPtrOutput)
}

// Schedule for running the job definition
func (o JobDefinitionPropertiesResponseOutput) Schedules() ScheduleResponseArrayOutput {
	return o.ApplyT(func(v JobDefinitionPropertiesResponse) []ScheduleResponse { return v.Schedules }).(ScheduleResponseArrayOutput)
}

// State of the job definition.
func (o JobDefinitionPropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v JobDefinitionPropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Enum to detect if user confirmation is required. If not passed will default to NotRequired.
func (o JobDefinitionPropertiesResponseOutput) UserConfirmation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobDefinitionPropertiesResponse) *string { return v.UserConfirmation }).(pulumi.StringPtrOutput)
}

type JobDefinitionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (JobDefinitionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobDefinitionPropertiesResponse)(nil)).Elem()
}

func (o JobDefinitionPropertiesResponsePtrOutput) ToJobDefinitionPropertiesResponsePtrOutput() JobDefinitionPropertiesResponsePtrOutput {
	return o
}

func (o JobDefinitionPropertiesResponsePtrOutput) ToJobDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) JobDefinitionPropertiesResponsePtrOutput {
	return o
}

func (o JobDefinitionPropertiesResponsePtrOutput) Elem() JobDefinitionPropertiesResponseOutput {
	return o.ApplyT(func(v *JobDefinitionPropertiesResponse) JobDefinitionPropertiesResponse { return *v }).(JobDefinitionPropertiesResponseOutput)
}

// List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
func (o JobDefinitionPropertiesResponsePtrOutput) CustomerSecrets() CustomerSecretResponseArrayOutput {
	return o.ApplyT(func(v *JobDefinitionPropertiesResponse) []CustomerSecretResponse {
		if v == nil {
			return nil
		}
		return v.CustomerSecrets
	}).(CustomerSecretResponseArrayOutput)
}

// A generic json used differently by each data service type.
func (o JobDefinitionPropertiesResponsePtrOutput) DataServiceInput() pulumi.StringMapOutput {
	return o.ApplyT(func(v *JobDefinitionPropertiesResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.DataServiceInput
	}).(pulumi.StringMapOutput)
}

// Data Sink Id associated to the job definition.
func (o JobDefinitionPropertiesResponsePtrOutput) DataSinkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataSinkId
	}).(pulumi.StringPtrOutput)
}

// Data Source Id associated to the job definition.
func (o JobDefinitionPropertiesResponsePtrOutput) DataSourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataSourceId
	}).(pulumi.StringPtrOutput)
}

// Last modified time of the job definition.
func (o JobDefinitionPropertiesResponsePtrOutput) LastModifiedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedTime
	}).(pulumi.StringPtrOutput)
}

// This is the preferred geo location for the job to run.
func (o JobDefinitionPropertiesResponsePtrOutput) RunLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.RunLocation
	}).(pulumi.StringPtrOutput)
}

// Schedule for running the job definition
func (o JobDefinitionPropertiesResponsePtrOutput) Schedules() ScheduleResponseArrayOutput {
	return o.ApplyT(func(v *JobDefinitionPropertiesResponse) []ScheduleResponse {
		if v == nil {
			return nil
		}
		return v.Schedules
	}).(ScheduleResponseArrayOutput)
}

// State of the job definition.
func (o JobDefinitionPropertiesResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.State
	}).(pulumi.StringPtrOutput)
}

// Enum to detect if user confirmation is required. If not passed will default to NotRequired.
func (o JobDefinitionPropertiesResponsePtrOutput) UserConfirmation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserConfirmation
	}).(pulumi.StringPtrOutput)
}

// Schedule for the job run.
type Schedule struct {
	// Name of the schedule.
	Name *string `pulumi:"name"`
	// A list of repetition intervals in ISO 8601 format.
	PolicyList []string `pulumi:"policyList"`
}

// ScheduleInput is an input type that accepts ScheduleArgs and ScheduleOutput values.
// You can construct a concrete instance of `ScheduleInput` via:
//
//          ScheduleArgs{...}
type ScheduleInput interface {
	pulumi.Input

	ToScheduleOutput() ScheduleOutput
	ToScheduleOutputWithContext(context.Context) ScheduleOutput
}

// Schedule for the job run.
type ScheduleArgs struct {
	// Name of the schedule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A list of repetition intervals in ISO 8601 format.
	PolicyList pulumi.StringArrayInput `pulumi:"policyList"`
}

func (ScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Schedule)(nil)).Elem()
}

func (i ScheduleArgs) ToScheduleOutput() ScheduleOutput {
	return i.ToScheduleOutputWithContext(context.Background())
}

func (i ScheduleArgs) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput)
}

// ScheduleArrayInput is an input type that accepts ScheduleArray and ScheduleArrayOutput values.
// You can construct a concrete instance of `ScheduleArrayInput` via:
//
//          ScheduleArray{ ScheduleArgs{...} }
type ScheduleArrayInput interface {
	pulumi.Input

	ToScheduleArrayOutput() ScheduleArrayOutput
	ToScheduleArrayOutputWithContext(context.Context) ScheduleArrayOutput
}

type ScheduleArray []ScheduleInput

func (ScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Schedule)(nil)).Elem()
}

func (i ScheduleArray) ToScheduleArrayOutput() ScheduleArrayOutput {
	return i.ToScheduleArrayOutputWithContext(context.Background())
}

func (i ScheduleArray) ToScheduleArrayOutputWithContext(ctx context.Context) ScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleArrayOutput)
}

// Schedule for the job run.
type ScheduleOutput struct{ *pulumi.OutputState }

func (ScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Schedule)(nil)).Elem()
}

func (o ScheduleOutput) ToScheduleOutput() ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return o
}

// Name of the schedule.
func (o ScheduleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Schedule) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A list of repetition intervals in ISO 8601 format.
func (o ScheduleOutput) PolicyList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Schedule) []string { return v.PolicyList }).(pulumi.StringArrayOutput)
}

type ScheduleArrayOutput struct{ *pulumi.OutputState }

func (ScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Schedule)(nil)).Elem()
}

func (o ScheduleArrayOutput) ToScheduleArrayOutput() ScheduleArrayOutput {
	return o
}

func (o ScheduleArrayOutput) ToScheduleArrayOutputWithContext(ctx context.Context) ScheduleArrayOutput {
	return o
}

func (o ScheduleArrayOutput) Index(i pulumi.IntInput) ScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Schedule {
		return vs[0].([]Schedule)[vs[1].(int)]
	}).(ScheduleOutput)
}

// Schedule for the job run.
type ScheduleResponse struct {
	// Name of the schedule.
	Name *string `pulumi:"name"`
	// A list of repetition intervals in ISO 8601 format.
	PolicyList []string `pulumi:"policyList"`
}

// ScheduleResponseInput is an input type that accepts ScheduleResponseArgs and ScheduleResponseOutput values.
// You can construct a concrete instance of `ScheduleResponseInput` via:
//
//          ScheduleResponseArgs{...}
type ScheduleResponseInput interface {
	pulumi.Input

	ToScheduleResponseOutput() ScheduleResponseOutput
	ToScheduleResponseOutputWithContext(context.Context) ScheduleResponseOutput
}

// Schedule for the job run.
type ScheduleResponseArgs struct {
	// Name of the schedule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A list of repetition intervals in ISO 8601 format.
	PolicyList pulumi.StringArrayInput `pulumi:"policyList"`
}

func (ScheduleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleResponse)(nil)).Elem()
}

func (i ScheduleResponseArgs) ToScheduleResponseOutput() ScheduleResponseOutput {
	return i.ToScheduleResponseOutputWithContext(context.Background())
}

func (i ScheduleResponseArgs) ToScheduleResponseOutputWithContext(ctx context.Context) ScheduleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleResponseOutput)
}

// ScheduleResponseArrayInput is an input type that accepts ScheduleResponseArray and ScheduleResponseArrayOutput values.
// You can construct a concrete instance of `ScheduleResponseArrayInput` via:
//
//          ScheduleResponseArray{ ScheduleResponseArgs{...} }
type ScheduleResponseArrayInput interface {
	pulumi.Input

	ToScheduleResponseArrayOutput() ScheduleResponseArrayOutput
	ToScheduleResponseArrayOutputWithContext(context.Context) ScheduleResponseArrayOutput
}

type ScheduleResponseArray []ScheduleResponseInput

func (ScheduleResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleResponse)(nil)).Elem()
}

func (i ScheduleResponseArray) ToScheduleResponseArrayOutput() ScheduleResponseArrayOutput {
	return i.ToScheduleResponseArrayOutputWithContext(context.Background())
}

func (i ScheduleResponseArray) ToScheduleResponseArrayOutputWithContext(ctx context.Context) ScheduleResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleResponseArrayOutput)
}

// Schedule for the job run.
type ScheduleResponseOutput struct{ *pulumi.OutputState }

func (ScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleResponse)(nil)).Elem()
}

func (o ScheduleResponseOutput) ToScheduleResponseOutput() ScheduleResponseOutput {
	return o
}

func (o ScheduleResponseOutput) ToScheduleResponseOutputWithContext(ctx context.Context) ScheduleResponseOutput {
	return o
}

// Name of the schedule.
func (o ScheduleResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A list of repetition intervals in ISO 8601 format.
func (o ScheduleResponseOutput) PolicyList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleResponse) []string { return v.PolicyList }).(pulumi.StringArrayOutput)
}

type ScheduleResponseArrayOutput struct{ *pulumi.OutputState }

func (ScheduleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleResponse)(nil)).Elem()
}

func (o ScheduleResponseArrayOutput) ToScheduleResponseArrayOutput() ScheduleResponseArrayOutput {
	return o
}

func (o ScheduleResponseArrayOutput) ToScheduleResponseArrayOutputWithContext(ctx context.Context) ScheduleResponseArrayOutput {
	return o
}

func (o ScheduleResponseArrayOutput) Index(i pulumi.IntInput) ScheduleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleResponse {
		return vs[0].([]ScheduleResponse)[vs[1].(int)]
	}).(ScheduleResponseOutput)
}

// The sku type.
type Sku struct {
	// The sku name. Required for data manager creation, optional for update.
	Name *string `pulumi:"name"`
	// The sku tier. This is based on the SKU name.
	Tier *string `pulumi:"tier"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//          SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// The sku type.
type SkuArgs struct {
	// The sku name. Required for data manager creation, optional for update.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The sku tier. This is based on the SKU name.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//          SkuArgs{...}
//
//  or:
//
//          nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// The sku type.
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyT(func(v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// The sku name. Required for data manager creation, optional for update.
func (o SkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The sku tier. This is based on the SKU name.
func (o SkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku { return *v }).(SkuOutput)
}

// The sku name. Required for data manager creation, optional for update.
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The sku tier. This is based on the SKU name.
func (o SkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// The sku type.
type SkuResponse struct {
	// The sku name. Required for data manager creation, optional for update.
	Name *string `pulumi:"name"`
	// The sku tier. This is based on the SKU name.
	Tier *string `pulumi:"tier"`
}

// SkuResponseInput is an input type that accepts SkuResponseArgs and SkuResponseOutput values.
// You can construct a concrete instance of `SkuResponseInput` via:
//
//          SkuResponseArgs{...}
type SkuResponseInput interface {
	pulumi.Input

	ToSkuResponseOutput() SkuResponseOutput
	ToSkuResponseOutputWithContext(context.Context) SkuResponseOutput
}

// The sku type.
type SkuResponseArgs struct {
	// The sku name. Required for data manager creation, optional for update.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The sku tier. This is based on the SKU name.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (SkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (i SkuResponseArgs) ToSkuResponseOutput() SkuResponseOutput {
	return i.ToSkuResponseOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput)
}

func (i SkuResponseArgs) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput).ToSkuResponsePtrOutputWithContext(ctx)
}

// SkuResponsePtrInput is an input type that accepts SkuResponseArgs, SkuResponsePtr and SkuResponsePtrOutput values.
// You can construct a concrete instance of `SkuResponsePtrInput` via:
//
//          SkuResponseArgs{...}
//
//  or:
//
//          nil
type SkuResponsePtrInput interface {
	pulumi.Input

	ToSkuResponsePtrOutput() SkuResponsePtrOutput
	ToSkuResponsePtrOutputWithContext(context.Context) SkuResponsePtrOutput
}

type skuResponsePtrType SkuResponseArgs

func SkuResponsePtr(v *SkuResponseArgs) SkuResponsePtrInput {
	return (*skuResponsePtrType)(v)
}

func (*skuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponsePtrOutput)
}

// The sku type.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (o SkuResponseOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o.ApplyT(func(v SkuResponse) *SkuResponse {
		return &v
	}).(SkuResponsePtrOutput)
}

// The sku name. Required for data manager creation, optional for update.
func (o SkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The sku tier. This is based on the SKU name.
func (o SkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse { return *v }).(SkuResponseOutput)
}

// The sku name. Required for data manager creation, optional for update.
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The sku tier. This is based on the SKU name.
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CustomerSecretOutput{})
	pulumi.RegisterOutputType(CustomerSecretArrayOutput{})
	pulumi.RegisterOutputType(CustomerSecretResponseOutput{})
	pulumi.RegisterOutputType(CustomerSecretResponseArrayOutput{})
	pulumi.RegisterOutputType(DataManagerTypeOutput{})
	pulumi.RegisterOutputType(DataStoreTypeOutput{})
	pulumi.RegisterOutputType(DataStorePropertiesOutput{})
	pulumi.RegisterOutputType(DataStorePropertiesPtrOutput{})
	pulumi.RegisterOutputType(DataStorePropertiesResponseOutput{})
	pulumi.RegisterOutputType(DataStorePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionTypeOutput{})
	pulumi.RegisterOutputType(JobDefinitionPropertiesOutput{})
	pulumi.RegisterOutputType(JobDefinitionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(JobDefinitionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(JobDefinitionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ScheduleOutput{})
	pulumi.RegisterOutputType(ScheduleArrayOutput{})
	pulumi.RegisterOutputType(ScheduleResponseOutput{})
	pulumi.RegisterOutputType(ScheduleResponseArrayOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
}
