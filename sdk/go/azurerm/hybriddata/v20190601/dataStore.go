// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190601

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Data store.
type DataStore struct {
	pulumi.CustomResourceState

	// Name of the object.
	Name pulumi.StringOutput `pulumi:"name"`
	// DataStore properties.
	Properties DataStorePropertiesResponseOutput `pulumi:"properties"`
	// Type of the object.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDataStore registers a new resource with the given unique name, arguments, and options.
func NewDataStore(ctx *pulumi.Context,
	name string, args *DataStoreArgs, opts ...pulumi.ResourceOption) (*DataStore, error) {
	if args == nil || args.DataManagerName == nil {
		return nil, errors.New("missing required argument 'DataManagerName'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.Properties == nil {
		return nil, errors.New("missing required argument 'Properties'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &DataStoreArgs{}
	}
	var resource DataStore
	err := ctx.RegisterResource("azurerm:hybriddata/v20190601:DataStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataStore gets an existing DataStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataStoreState, opts ...pulumi.ResourceOption) (*DataStore, error) {
	var resource DataStore
	err := ctx.ReadResource("azurerm:hybriddata/v20190601:DataStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataStore resources.
type dataStoreState struct {
	// Name of the object.
	Name *string `pulumi:"name"`
	// DataStore properties.
	Properties *DataStorePropertiesResponse `pulumi:"properties"`
	// Type of the object.
	Type *string `pulumi:"type"`
}

type DataStoreState struct {
	// Name of the object.
	Name pulumi.StringPtrInput
	// DataStore properties.
	Properties DataStorePropertiesResponsePtrInput
	// Type of the object.
	Type pulumi.StringPtrInput
}

func (DataStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataStoreState)(nil)).Elem()
}

type dataStoreArgs struct {
	// The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
	DataManagerName string `pulumi:"dataManagerName"`
	// The data store/repository name to be created or updated.
	Name string `pulumi:"name"`
	// DataStore properties.
	Properties DataStoreProperties `pulumi:"properties"`
	// The Resource Group Name
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a DataStore resource.
type DataStoreArgs struct {
	// The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
	DataManagerName pulumi.StringInput
	// The data store/repository name to be created or updated.
	Name pulumi.StringInput
	// DataStore properties.
	Properties DataStorePropertiesInput
	// The Resource Group Name
	ResourceGroupName pulumi.StringInput
}

func (DataStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataStoreArgs)(nil)).Elem()
}
