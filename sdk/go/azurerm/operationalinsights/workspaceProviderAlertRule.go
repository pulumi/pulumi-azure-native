// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package operationalinsights

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Alert rule.
type WorkspaceProviderAlertRule struct {
	pulumi.CustomResourceState

	// Etag of the azure resource
	Etag pulumi.StringPtrOutput `pulumi:"etag"`
	// The kind of the alert rule
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Azure resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// Azure resource type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewWorkspaceProviderAlertRule registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceProviderAlertRule(ctx *pulumi.Context,
	name string, args *WorkspaceProviderAlertRuleArgs, opts ...pulumi.ResourceOption) (*WorkspaceProviderAlertRule, error) {
	if args == nil || args.Kind == nil {
		return nil, errors.New("missing required argument 'Kind'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.WorkspaceName == nil {
		return nil, errors.New("missing required argument 'WorkspaceName'")
	}
	if args == nil {
		args = &WorkspaceProviderAlertRuleArgs{}
	}
	var resource WorkspaceProviderAlertRule
	err := ctx.RegisterResource("azurerm:operationalinsights:WorkspaceProviderAlertRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceProviderAlertRule gets an existing WorkspaceProviderAlertRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceProviderAlertRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceProviderAlertRuleState, opts ...pulumi.ResourceOption) (*WorkspaceProviderAlertRule, error) {
	var resource WorkspaceProviderAlertRule
	err := ctx.ReadResource("azurerm:operationalinsights:WorkspaceProviderAlertRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceProviderAlertRule resources.
type workspaceProviderAlertRuleState struct {
	// Etag of the azure resource
	Etag *string `pulumi:"etag"`
	// The kind of the alert rule
	Kind *string `pulumi:"kind"`
	// Azure resource name
	Name *string `pulumi:"name"`
	// Azure resource type
	Type *string `pulumi:"type"`
}

type WorkspaceProviderAlertRuleState struct {
	// Etag of the azure resource
	Etag pulumi.StringPtrInput
	// The kind of the alert rule
	Kind pulumi.StringPtrInput
	// Azure resource name
	Name pulumi.StringPtrInput
	// Azure resource type
	Type pulumi.StringPtrInput
}

func (WorkspaceProviderAlertRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceProviderAlertRuleState)(nil)).Elem()
}

type workspaceProviderAlertRuleArgs struct {
	// Etag of the azure resource
	Etag *string `pulumi:"etag"`
	// The kind of the alert rule
	Kind string `pulumi:"kind"`
	// Alert rule ID
	Name string `pulumi:"name"`
	// The name of the resource group within the user's subscription. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the workspace.
	WorkspaceName string `pulumi:"workspaceName"`
}

// The set of arguments for constructing a WorkspaceProviderAlertRule resource.
type WorkspaceProviderAlertRuleArgs struct {
	// Etag of the azure resource
	Etag pulumi.StringPtrInput
	// The kind of the alert rule
	Kind pulumi.StringInput
	// Alert rule ID
	Name pulumi.StringInput
	// The name of the resource group within the user's subscription. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the workspace.
	WorkspaceName pulumi.StringInput
}

func (WorkspaceProviderAlertRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceProviderAlertRuleArgs)(nil)).Elem()
}
