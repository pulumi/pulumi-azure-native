// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20150801

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Redis cache access keys.
type RedisAccessKeysResponse struct {
	// The current primary key that clients can use to authenticate with Redis cache.
	PrimaryKey *string `pulumi:"primaryKey"`
	// The current secondary key that clients can use to authenticate with Redis cache.
	SecondaryKey *string `pulumi:"secondaryKey"`
}

// RedisAccessKeysResponseInput is an input type that accepts RedisAccessKeysResponseArgs and RedisAccessKeysResponseOutput values.
// You can construct a concrete instance of `RedisAccessKeysResponseInput` via:
//
//          RedisAccessKeysResponseArgs{...}
type RedisAccessKeysResponseInput interface {
	pulumi.Input

	ToRedisAccessKeysResponseOutput() RedisAccessKeysResponseOutput
	ToRedisAccessKeysResponseOutputWithContext(context.Context) RedisAccessKeysResponseOutput
}

// Redis cache access keys.
type RedisAccessKeysResponseArgs struct {
	// The current primary key that clients can use to authenticate with Redis cache.
	PrimaryKey pulumi.StringPtrInput `pulumi:"primaryKey"`
	// The current secondary key that clients can use to authenticate with Redis cache.
	SecondaryKey pulumi.StringPtrInput `pulumi:"secondaryKey"`
}

func (RedisAccessKeysResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisAccessKeysResponse)(nil)).Elem()
}

func (i RedisAccessKeysResponseArgs) ToRedisAccessKeysResponseOutput() RedisAccessKeysResponseOutput {
	return i.ToRedisAccessKeysResponseOutputWithContext(context.Background())
}

func (i RedisAccessKeysResponseArgs) ToRedisAccessKeysResponseOutputWithContext(ctx context.Context) RedisAccessKeysResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisAccessKeysResponseOutput)
}

func (i RedisAccessKeysResponseArgs) ToRedisAccessKeysResponsePtrOutput() RedisAccessKeysResponsePtrOutput {
	return i.ToRedisAccessKeysResponsePtrOutputWithContext(context.Background())
}

func (i RedisAccessKeysResponseArgs) ToRedisAccessKeysResponsePtrOutputWithContext(ctx context.Context) RedisAccessKeysResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisAccessKeysResponseOutput).ToRedisAccessKeysResponsePtrOutputWithContext(ctx)
}

// RedisAccessKeysResponsePtrInput is an input type that accepts RedisAccessKeysResponseArgs, RedisAccessKeysResponsePtr and RedisAccessKeysResponsePtrOutput values.
// You can construct a concrete instance of `RedisAccessKeysResponsePtrInput` via:
//
//          RedisAccessKeysResponseArgs{...}
//
//  or:
//
//          nil
type RedisAccessKeysResponsePtrInput interface {
	pulumi.Input

	ToRedisAccessKeysResponsePtrOutput() RedisAccessKeysResponsePtrOutput
	ToRedisAccessKeysResponsePtrOutputWithContext(context.Context) RedisAccessKeysResponsePtrOutput
}

type redisAccessKeysResponsePtrType RedisAccessKeysResponseArgs

func RedisAccessKeysResponsePtr(v *RedisAccessKeysResponseArgs) RedisAccessKeysResponsePtrInput {
	return (*redisAccessKeysResponsePtrType)(v)
}

func (*redisAccessKeysResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisAccessKeysResponse)(nil)).Elem()
}

func (i *redisAccessKeysResponsePtrType) ToRedisAccessKeysResponsePtrOutput() RedisAccessKeysResponsePtrOutput {
	return i.ToRedisAccessKeysResponsePtrOutputWithContext(context.Background())
}

func (i *redisAccessKeysResponsePtrType) ToRedisAccessKeysResponsePtrOutputWithContext(ctx context.Context) RedisAccessKeysResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisAccessKeysResponsePtrOutput)
}

// Redis cache access keys.
type RedisAccessKeysResponseOutput struct{ *pulumi.OutputState }

func (RedisAccessKeysResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisAccessKeysResponse)(nil)).Elem()
}

func (o RedisAccessKeysResponseOutput) ToRedisAccessKeysResponseOutput() RedisAccessKeysResponseOutput {
	return o
}

func (o RedisAccessKeysResponseOutput) ToRedisAccessKeysResponseOutputWithContext(ctx context.Context) RedisAccessKeysResponseOutput {
	return o
}

func (o RedisAccessKeysResponseOutput) ToRedisAccessKeysResponsePtrOutput() RedisAccessKeysResponsePtrOutput {
	return o.ToRedisAccessKeysResponsePtrOutputWithContext(context.Background())
}

func (o RedisAccessKeysResponseOutput) ToRedisAccessKeysResponsePtrOutputWithContext(ctx context.Context) RedisAccessKeysResponsePtrOutput {
	return o.ApplyT(func(v RedisAccessKeysResponse) *RedisAccessKeysResponse {
		return &v
	}).(RedisAccessKeysResponsePtrOutput)
}

// The current primary key that clients can use to authenticate with Redis cache.
func (o RedisAccessKeysResponseOutput) PrimaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisAccessKeysResponse) *string { return v.PrimaryKey }).(pulumi.StringPtrOutput)
}

// The current secondary key that clients can use to authenticate with Redis cache.
func (o RedisAccessKeysResponseOutput) SecondaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisAccessKeysResponse) *string { return v.SecondaryKey }).(pulumi.StringPtrOutput)
}

type RedisAccessKeysResponsePtrOutput struct{ *pulumi.OutputState }

func (RedisAccessKeysResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisAccessKeysResponse)(nil)).Elem()
}

func (o RedisAccessKeysResponsePtrOutput) ToRedisAccessKeysResponsePtrOutput() RedisAccessKeysResponsePtrOutput {
	return o
}

func (o RedisAccessKeysResponsePtrOutput) ToRedisAccessKeysResponsePtrOutputWithContext(ctx context.Context) RedisAccessKeysResponsePtrOutput {
	return o
}

func (o RedisAccessKeysResponsePtrOutput) Elem() RedisAccessKeysResponseOutput {
	return o.ApplyT(func(v *RedisAccessKeysResponse) RedisAccessKeysResponse { return *v }).(RedisAccessKeysResponseOutput)
}

// The current primary key that clients can use to authenticate with Redis cache.
func (o RedisAccessKeysResponsePtrOutput) PrimaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisAccessKeysResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryKey
	}).(pulumi.StringPtrOutput)
}

// The current secondary key that clients can use to authenticate with Redis cache.
func (o RedisAccessKeysResponsePtrOutput) SecondaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisAccessKeysResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryKey
	}).(pulumi.StringPtrOutput)
}

// Parameters describing a Redis instance
type RedisReadablePropertiesResponse struct {
	// If the value is true, then the non-SLL Redis server port (6379) will be enabled.
	EnableNonSslPort *bool `pulumi:"enableNonSslPort"`
	// Redis host name.
	HostName *string `pulumi:"hostName"`
	// Redis non-SSL port.
	Port *int `pulumi:"port"`
	// Redis instance provisioning status.
	ProvisioningState *string `pulumi:"provisioningState"`
	// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
	RedisConfiguration map[string]string `pulumi:"redisConfiguration"`
	// RedisVersion parameter has been deprecated. As such, it is no longer necessary to provide this parameter and any value specified is ignored.
	RedisVersion *string `pulumi:"redisVersion"`
	// The number of shards to be created on a Premium Cluster Cache.
	ShardCount *int `pulumi:"shardCount"`
	// What SKU of Redis cache to deploy.
	Sku SkuResponse `pulumi:"sku"`
	// Redis SSL port.
	SslPort *int `pulumi:"sslPort"`
	// Required when deploying a Redis cache inside an existing Azure Virtual Network.
	StaticIP *string `pulumi:"staticIP"`
	// Required when deploying a Redis cache inside an existing Azure Virtual Network.
	Subnet *string `pulumi:"subnet"`
	// tenantSettings
	TenantSettings map[string]string `pulumi:"tenantSettings"`
	// The exact ARM resource ID of the virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.ClassicNetwork/VirtualNetworks/vnet1
	VirtualNetwork *string `pulumi:"virtualNetwork"`
}

// RedisReadablePropertiesResponseInput is an input type that accepts RedisReadablePropertiesResponseArgs and RedisReadablePropertiesResponseOutput values.
// You can construct a concrete instance of `RedisReadablePropertiesResponseInput` via:
//
//          RedisReadablePropertiesResponseArgs{...}
type RedisReadablePropertiesResponseInput interface {
	pulumi.Input

	ToRedisReadablePropertiesResponseOutput() RedisReadablePropertiesResponseOutput
	ToRedisReadablePropertiesResponseOutputWithContext(context.Context) RedisReadablePropertiesResponseOutput
}

// Parameters describing a Redis instance
type RedisReadablePropertiesResponseArgs struct {
	// If the value is true, then the non-SLL Redis server port (6379) will be enabled.
	EnableNonSslPort pulumi.BoolPtrInput `pulumi:"enableNonSslPort"`
	// Redis host name.
	HostName pulumi.StringPtrInput `pulumi:"hostName"`
	// Redis non-SSL port.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Redis instance provisioning status.
	ProvisioningState pulumi.StringPtrInput `pulumi:"provisioningState"`
	// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
	RedisConfiguration pulumi.StringMapInput `pulumi:"redisConfiguration"`
	// RedisVersion parameter has been deprecated. As such, it is no longer necessary to provide this parameter and any value specified is ignored.
	RedisVersion pulumi.StringPtrInput `pulumi:"redisVersion"`
	// The number of shards to be created on a Premium Cluster Cache.
	ShardCount pulumi.IntPtrInput `pulumi:"shardCount"`
	// What SKU of Redis cache to deploy.
	Sku SkuResponseInput `pulumi:"sku"`
	// Redis SSL port.
	SslPort pulumi.IntPtrInput `pulumi:"sslPort"`
	// Required when deploying a Redis cache inside an existing Azure Virtual Network.
	StaticIP pulumi.StringPtrInput `pulumi:"staticIP"`
	// Required when deploying a Redis cache inside an existing Azure Virtual Network.
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
	// tenantSettings
	TenantSettings pulumi.StringMapInput `pulumi:"tenantSettings"`
	// The exact ARM resource ID of the virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.ClassicNetwork/VirtualNetworks/vnet1
	VirtualNetwork pulumi.StringPtrInput `pulumi:"virtualNetwork"`
}

func (RedisReadablePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisReadablePropertiesResponse)(nil)).Elem()
}

func (i RedisReadablePropertiesResponseArgs) ToRedisReadablePropertiesResponseOutput() RedisReadablePropertiesResponseOutput {
	return i.ToRedisReadablePropertiesResponseOutputWithContext(context.Background())
}

func (i RedisReadablePropertiesResponseArgs) ToRedisReadablePropertiesResponseOutputWithContext(ctx context.Context) RedisReadablePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisReadablePropertiesResponseOutput)
}

// Parameters describing a Redis instance
type RedisReadablePropertiesResponseOutput struct{ *pulumi.OutputState }

func (RedisReadablePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisReadablePropertiesResponse)(nil)).Elem()
}

func (o RedisReadablePropertiesResponseOutput) ToRedisReadablePropertiesResponseOutput() RedisReadablePropertiesResponseOutput {
	return o
}

func (o RedisReadablePropertiesResponseOutput) ToRedisReadablePropertiesResponseOutputWithContext(ctx context.Context) RedisReadablePropertiesResponseOutput {
	return o
}

// If the value is true, then the non-SLL Redis server port (6379) will be enabled.
func (o RedisReadablePropertiesResponseOutput) EnableNonSslPort() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisReadablePropertiesResponse) *bool { return v.EnableNonSslPort }).(pulumi.BoolPtrOutput)
}

// Redis host name.
func (o RedisReadablePropertiesResponseOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisReadablePropertiesResponse) *string { return v.HostName }).(pulumi.StringPtrOutput)
}

// Redis non-SSL port.
func (o RedisReadablePropertiesResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisReadablePropertiesResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Redis instance provisioning status.
func (o RedisReadablePropertiesResponseOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisReadablePropertiesResponse) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
func (o RedisReadablePropertiesResponseOutput) RedisConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisReadablePropertiesResponse) map[string]string { return v.RedisConfiguration }).(pulumi.StringMapOutput)
}

// RedisVersion parameter has been deprecated. As such, it is no longer necessary to provide this parameter and any value specified is ignored.
func (o RedisReadablePropertiesResponseOutput) RedisVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisReadablePropertiesResponse) *string { return v.RedisVersion }).(pulumi.StringPtrOutput)
}

// The number of shards to be created on a Premium Cluster Cache.
func (o RedisReadablePropertiesResponseOutput) ShardCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisReadablePropertiesResponse) *int { return v.ShardCount }).(pulumi.IntPtrOutput)
}

// What SKU of Redis cache to deploy.
func (o RedisReadablePropertiesResponseOutput) Sku() SkuResponseOutput {
	return o.ApplyT(func(v RedisReadablePropertiesResponse) SkuResponse { return v.Sku }).(SkuResponseOutput)
}

// Redis SSL port.
func (o RedisReadablePropertiesResponseOutput) SslPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisReadablePropertiesResponse) *int { return v.SslPort }).(pulumi.IntPtrOutput)
}

// Required when deploying a Redis cache inside an existing Azure Virtual Network.
func (o RedisReadablePropertiesResponseOutput) StaticIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisReadablePropertiesResponse) *string { return v.StaticIP }).(pulumi.StringPtrOutput)
}

// Required when deploying a Redis cache inside an existing Azure Virtual Network.
func (o RedisReadablePropertiesResponseOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisReadablePropertiesResponse) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

// tenantSettings
func (o RedisReadablePropertiesResponseOutput) TenantSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisReadablePropertiesResponse) map[string]string { return v.TenantSettings }).(pulumi.StringMapOutput)
}

// The exact ARM resource ID of the virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.ClassicNetwork/VirtualNetworks/vnet1
func (o RedisReadablePropertiesResponseOutput) VirtualNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisReadablePropertiesResponse) *string { return v.VirtualNetwork }).(pulumi.StringPtrOutput)
}

// Properties generated only in response to CreateOrUpdate Redis operation.
type RedisReadablePropertiesWithAccessKeyResponse struct {
	// Redis cache access keys.
	AccessKeys *RedisAccessKeysResponse `pulumi:"accessKeys"`
	// If the value is true, then the non-SLL Redis server port (6379) will be enabled.
	EnableNonSslPort *bool `pulumi:"enableNonSslPort"`
	// Redis host name.
	HostName *string `pulumi:"hostName"`
	// Redis non-SSL port.
	Port *int `pulumi:"port"`
	// Redis instance provisioning status.
	ProvisioningState *string `pulumi:"provisioningState"`
	// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
	RedisConfiguration map[string]string `pulumi:"redisConfiguration"`
	// RedisVersion parameter has been deprecated. As such, it is no longer necessary to provide this parameter and any value specified is ignored.
	RedisVersion *string `pulumi:"redisVersion"`
	// The number of shards to be created on a Premium Cluster Cache.
	ShardCount *int `pulumi:"shardCount"`
	// What SKU of Redis cache to deploy.
	Sku SkuResponse `pulumi:"sku"`
	// Redis SSL port.
	SslPort *int `pulumi:"sslPort"`
	// Required when deploying a Redis cache inside an existing Azure Virtual Network.
	StaticIP *string `pulumi:"staticIP"`
	// Required when deploying a Redis cache inside an existing Azure Virtual Network.
	Subnet *string `pulumi:"subnet"`
	// tenantSettings
	TenantSettings map[string]string `pulumi:"tenantSettings"`
	// The exact ARM resource ID of the virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.ClassicNetwork/VirtualNetworks/vnet1
	VirtualNetwork *string `pulumi:"virtualNetwork"`
}

// RedisReadablePropertiesWithAccessKeyResponseInput is an input type that accepts RedisReadablePropertiesWithAccessKeyResponseArgs and RedisReadablePropertiesWithAccessKeyResponseOutput values.
// You can construct a concrete instance of `RedisReadablePropertiesWithAccessKeyResponseInput` via:
//
//          RedisReadablePropertiesWithAccessKeyResponseArgs{...}
type RedisReadablePropertiesWithAccessKeyResponseInput interface {
	pulumi.Input

	ToRedisReadablePropertiesWithAccessKeyResponseOutput() RedisReadablePropertiesWithAccessKeyResponseOutput
	ToRedisReadablePropertiesWithAccessKeyResponseOutputWithContext(context.Context) RedisReadablePropertiesWithAccessKeyResponseOutput
}

// Properties generated only in response to CreateOrUpdate Redis operation.
type RedisReadablePropertiesWithAccessKeyResponseArgs struct {
	// Redis cache access keys.
	AccessKeys RedisAccessKeysResponsePtrInput `pulumi:"accessKeys"`
	// If the value is true, then the non-SLL Redis server port (6379) will be enabled.
	EnableNonSslPort pulumi.BoolPtrInput `pulumi:"enableNonSslPort"`
	// Redis host name.
	HostName pulumi.StringPtrInput `pulumi:"hostName"`
	// Redis non-SSL port.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Redis instance provisioning status.
	ProvisioningState pulumi.StringPtrInput `pulumi:"provisioningState"`
	// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
	RedisConfiguration pulumi.StringMapInput `pulumi:"redisConfiguration"`
	// RedisVersion parameter has been deprecated. As such, it is no longer necessary to provide this parameter and any value specified is ignored.
	RedisVersion pulumi.StringPtrInput `pulumi:"redisVersion"`
	// The number of shards to be created on a Premium Cluster Cache.
	ShardCount pulumi.IntPtrInput `pulumi:"shardCount"`
	// What SKU of Redis cache to deploy.
	Sku SkuResponseInput `pulumi:"sku"`
	// Redis SSL port.
	SslPort pulumi.IntPtrInput `pulumi:"sslPort"`
	// Required when deploying a Redis cache inside an existing Azure Virtual Network.
	StaticIP pulumi.StringPtrInput `pulumi:"staticIP"`
	// Required when deploying a Redis cache inside an existing Azure Virtual Network.
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
	// tenantSettings
	TenantSettings pulumi.StringMapInput `pulumi:"tenantSettings"`
	// The exact ARM resource ID of the virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.ClassicNetwork/VirtualNetworks/vnet1
	VirtualNetwork pulumi.StringPtrInput `pulumi:"virtualNetwork"`
}

func (RedisReadablePropertiesWithAccessKeyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisReadablePropertiesWithAccessKeyResponse)(nil)).Elem()
}

func (i RedisReadablePropertiesWithAccessKeyResponseArgs) ToRedisReadablePropertiesWithAccessKeyResponseOutput() RedisReadablePropertiesWithAccessKeyResponseOutput {
	return i.ToRedisReadablePropertiesWithAccessKeyResponseOutputWithContext(context.Background())
}

func (i RedisReadablePropertiesWithAccessKeyResponseArgs) ToRedisReadablePropertiesWithAccessKeyResponseOutputWithContext(ctx context.Context) RedisReadablePropertiesWithAccessKeyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisReadablePropertiesWithAccessKeyResponseOutput)
}

func (i RedisReadablePropertiesWithAccessKeyResponseArgs) ToRedisReadablePropertiesWithAccessKeyResponsePtrOutput() RedisReadablePropertiesWithAccessKeyResponsePtrOutput {
	return i.ToRedisReadablePropertiesWithAccessKeyResponsePtrOutputWithContext(context.Background())
}

func (i RedisReadablePropertiesWithAccessKeyResponseArgs) ToRedisReadablePropertiesWithAccessKeyResponsePtrOutputWithContext(ctx context.Context) RedisReadablePropertiesWithAccessKeyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisReadablePropertiesWithAccessKeyResponseOutput).ToRedisReadablePropertiesWithAccessKeyResponsePtrOutputWithContext(ctx)
}

// RedisReadablePropertiesWithAccessKeyResponsePtrInput is an input type that accepts RedisReadablePropertiesWithAccessKeyResponseArgs, RedisReadablePropertiesWithAccessKeyResponsePtr and RedisReadablePropertiesWithAccessKeyResponsePtrOutput values.
// You can construct a concrete instance of `RedisReadablePropertiesWithAccessKeyResponsePtrInput` via:
//
//          RedisReadablePropertiesWithAccessKeyResponseArgs{...}
//
//  or:
//
//          nil
type RedisReadablePropertiesWithAccessKeyResponsePtrInput interface {
	pulumi.Input

	ToRedisReadablePropertiesWithAccessKeyResponsePtrOutput() RedisReadablePropertiesWithAccessKeyResponsePtrOutput
	ToRedisReadablePropertiesWithAccessKeyResponsePtrOutputWithContext(context.Context) RedisReadablePropertiesWithAccessKeyResponsePtrOutput
}

type redisReadablePropertiesWithAccessKeyResponsePtrType RedisReadablePropertiesWithAccessKeyResponseArgs

func RedisReadablePropertiesWithAccessKeyResponsePtr(v *RedisReadablePropertiesWithAccessKeyResponseArgs) RedisReadablePropertiesWithAccessKeyResponsePtrInput {
	return (*redisReadablePropertiesWithAccessKeyResponsePtrType)(v)
}

func (*redisReadablePropertiesWithAccessKeyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisReadablePropertiesWithAccessKeyResponse)(nil)).Elem()
}

func (i *redisReadablePropertiesWithAccessKeyResponsePtrType) ToRedisReadablePropertiesWithAccessKeyResponsePtrOutput() RedisReadablePropertiesWithAccessKeyResponsePtrOutput {
	return i.ToRedisReadablePropertiesWithAccessKeyResponsePtrOutputWithContext(context.Background())
}

func (i *redisReadablePropertiesWithAccessKeyResponsePtrType) ToRedisReadablePropertiesWithAccessKeyResponsePtrOutputWithContext(ctx context.Context) RedisReadablePropertiesWithAccessKeyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisReadablePropertiesWithAccessKeyResponsePtrOutput)
}

// Properties generated only in response to CreateOrUpdate Redis operation.
type RedisReadablePropertiesWithAccessKeyResponseOutput struct{ *pulumi.OutputState }

func (RedisReadablePropertiesWithAccessKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisReadablePropertiesWithAccessKeyResponse)(nil)).Elem()
}

func (o RedisReadablePropertiesWithAccessKeyResponseOutput) ToRedisReadablePropertiesWithAccessKeyResponseOutput() RedisReadablePropertiesWithAccessKeyResponseOutput {
	return o
}

func (o RedisReadablePropertiesWithAccessKeyResponseOutput) ToRedisReadablePropertiesWithAccessKeyResponseOutputWithContext(ctx context.Context) RedisReadablePropertiesWithAccessKeyResponseOutput {
	return o
}

func (o RedisReadablePropertiesWithAccessKeyResponseOutput) ToRedisReadablePropertiesWithAccessKeyResponsePtrOutput() RedisReadablePropertiesWithAccessKeyResponsePtrOutput {
	return o.ToRedisReadablePropertiesWithAccessKeyResponsePtrOutputWithContext(context.Background())
}

func (o RedisReadablePropertiesWithAccessKeyResponseOutput) ToRedisReadablePropertiesWithAccessKeyResponsePtrOutputWithContext(ctx context.Context) RedisReadablePropertiesWithAccessKeyResponsePtrOutput {
	return o.ApplyT(func(v RedisReadablePropertiesWithAccessKeyResponse) *RedisReadablePropertiesWithAccessKeyResponse {
		return &v
	}).(RedisReadablePropertiesWithAccessKeyResponsePtrOutput)
}

// Redis cache access keys.
func (o RedisReadablePropertiesWithAccessKeyResponseOutput) AccessKeys() RedisAccessKeysResponsePtrOutput {
	return o.ApplyT(func(v RedisReadablePropertiesWithAccessKeyResponse) *RedisAccessKeysResponse { return v.AccessKeys }).(RedisAccessKeysResponsePtrOutput)
}

// If the value is true, then the non-SLL Redis server port (6379) will be enabled.
func (o RedisReadablePropertiesWithAccessKeyResponseOutput) EnableNonSslPort() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisReadablePropertiesWithAccessKeyResponse) *bool { return v.EnableNonSslPort }).(pulumi.BoolPtrOutput)
}

// Redis host name.
func (o RedisReadablePropertiesWithAccessKeyResponseOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisReadablePropertiesWithAccessKeyResponse) *string { return v.HostName }).(pulumi.StringPtrOutput)
}

// Redis non-SSL port.
func (o RedisReadablePropertiesWithAccessKeyResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisReadablePropertiesWithAccessKeyResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Redis instance provisioning status.
func (o RedisReadablePropertiesWithAccessKeyResponseOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisReadablePropertiesWithAccessKeyResponse) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
func (o RedisReadablePropertiesWithAccessKeyResponseOutput) RedisConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisReadablePropertiesWithAccessKeyResponse) map[string]string { return v.RedisConfiguration }).(pulumi.StringMapOutput)
}

// RedisVersion parameter has been deprecated. As such, it is no longer necessary to provide this parameter and any value specified is ignored.
func (o RedisReadablePropertiesWithAccessKeyResponseOutput) RedisVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisReadablePropertiesWithAccessKeyResponse) *string { return v.RedisVersion }).(pulumi.StringPtrOutput)
}

// The number of shards to be created on a Premium Cluster Cache.
func (o RedisReadablePropertiesWithAccessKeyResponseOutput) ShardCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisReadablePropertiesWithAccessKeyResponse) *int { return v.ShardCount }).(pulumi.IntPtrOutput)
}

// What SKU of Redis cache to deploy.
func (o RedisReadablePropertiesWithAccessKeyResponseOutput) Sku() SkuResponseOutput {
	return o.ApplyT(func(v RedisReadablePropertiesWithAccessKeyResponse) SkuResponse { return v.Sku }).(SkuResponseOutput)
}

// Redis SSL port.
func (o RedisReadablePropertiesWithAccessKeyResponseOutput) SslPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisReadablePropertiesWithAccessKeyResponse) *int { return v.SslPort }).(pulumi.IntPtrOutput)
}

// Required when deploying a Redis cache inside an existing Azure Virtual Network.
func (o RedisReadablePropertiesWithAccessKeyResponseOutput) StaticIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisReadablePropertiesWithAccessKeyResponse) *string { return v.StaticIP }).(pulumi.StringPtrOutput)
}

// Required when deploying a Redis cache inside an existing Azure Virtual Network.
func (o RedisReadablePropertiesWithAccessKeyResponseOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisReadablePropertiesWithAccessKeyResponse) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

// tenantSettings
func (o RedisReadablePropertiesWithAccessKeyResponseOutput) TenantSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisReadablePropertiesWithAccessKeyResponse) map[string]string { return v.TenantSettings }).(pulumi.StringMapOutput)
}

// The exact ARM resource ID of the virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.ClassicNetwork/VirtualNetworks/vnet1
func (o RedisReadablePropertiesWithAccessKeyResponseOutput) VirtualNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisReadablePropertiesWithAccessKeyResponse) *string { return v.VirtualNetwork }).(pulumi.StringPtrOutput)
}

type RedisReadablePropertiesWithAccessKeyResponsePtrOutput struct{ *pulumi.OutputState }

func (RedisReadablePropertiesWithAccessKeyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisReadablePropertiesWithAccessKeyResponse)(nil)).Elem()
}

func (o RedisReadablePropertiesWithAccessKeyResponsePtrOutput) ToRedisReadablePropertiesWithAccessKeyResponsePtrOutput() RedisReadablePropertiesWithAccessKeyResponsePtrOutput {
	return o
}

func (o RedisReadablePropertiesWithAccessKeyResponsePtrOutput) ToRedisReadablePropertiesWithAccessKeyResponsePtrOutputWithContext(ctx context.Context) RedisReadablePropertiesWithAccessKeyResponsePtrOutput {
	return o
}

func (o RedisReadablePropertiesWithAccessKeyResponsePtrOutput) Elem() RedisReadablePropertiesWithAccessKeyResponseOutput {
	return o.ApplyT(func(v *RedisReadablePropertiesWithAccessKeyResponse) RedisReadablePropertiesWithAccessKeyResponse {
		return *v
	}).(RedisReadablePropertiesWithAccessKeyResponseOutput)
}

// Redis cache access keys.
func (o RedisReadablePropertiesWithAccessKeyResponsePtrOutput) AccessKeys() RedisAccessKeysResponsePtrOutput {
	return o.ApplyT(func(v *RedisReadablePropertiesWithAccessKeyResponse) *RedisAccessKeysResponse {
		if v == nil {
			return nil
		}
		return v.AccessKeys
	}).(RedisAccessKeysResponsePtrOutput)
}

// If the value is true, then the non-SLL Redis server port (6379) will be enabled.
func (o RedisReadablePropertiesWithAccessKeyResponsePtrOutput) EnableNonSslPort() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisReadablePropertiesWithAccessKeyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNonSslPort
	}).(pulumi.BoolPtrOutput)
}

// Redis host name.
func (o RedisReadablePropertiesWithAccessKeyResponsePtrOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisReadablePropertiesWithAccessKeyResponse) *string {
		if v == nil {
			return nil
		}
		return v.HostName
	}).(pulumi.StringPtrOutput)
}

// Redis non-SSL port.
func (o RedisReadablePropertiesWithAccessKeyResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisReadablePropertiesWithAccessKeyResponse) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Redis instance provisioning status.
func (o RedisReadablePropertiesWithAccessKeyResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisReadablePropertiesWithAccessKeyResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
func (o RedisReadablePropertiesWithAccessKeyResponsePtrOutput) RedisConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisReadablePropertiesWithAccessKeyResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.RedisConfiguration
	}).(pulumi.StringMapOutput)
}

// RedisVersion parameter has been deprecated. As such, it is no longer necessary to provide this parameter and any value specified is ignored.
func (o RedisReadablePropertiesWithAccessKeyResponsePtrOutput) RedisVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisReadablePropertiesWithAccessKeyResponse) *string {
		if v == nil {
			return nil
		}
		return v.RedisVersion
	}).(pulumi.StringPtrOutput)
}

// The number of shards to be created on a Premium Cluster Cache.
func (o RedisReadablePropertiesWithAccessKeyResponsePtrOutput) ShardCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisReadablePropertiesWithAccessKeyResponse) *int {
		if v == nil {
			return nil
		}
		return v.ShardCount
	}).(pulumi.IntPtrOutput)
}

// What SKU of Redis cache to deploy.
func (o RedisReadablePropertiesWithAccessKeyResponsePtrOutput) Sku() SkuResponsePtrOutput {
	return o.ApplyT(func(v *RedisReadablePropertiesWithAccessKeyResponse) *SkuResponse {
		if v == nil {
			return nil
		}
		return &v.Sku
	}).(SkuResponsePtrOutput)
}

// Redis SSL port.
func (o RedisReadablePropertiesWithAccessKeyResponsePtrOutput) SslPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisReadablePropertiesWithAccessKeyResponse) *int {
		if v == nil {
			return nil
		}
		return v.SslPort
	}).(pulumi.IntPtrOutput)
}

// Required when deploying a Redis cache inside an existing Azure Virtual Network.
func (o RedisReadablePropertiesWithAccessKeyResponsePtrOutput) StaticIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisReadablePropertiesWithAccessKeyResponse) *string {
		if v == nil {
			return nil
		}
		return v.StaticIP
	}).(pulumi.StringPtrOutput)
}

// Required when deploying a Redis cache inside an existing Azure Virtual Network.
func (o RedisReadablePropertiesWithAccessKeyResponsePtrOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisReadablePropertiesWithAccessKeyResponse) *string {
		if v == nil {
			return nil
		}
		return v.Subnet
	}).(pulumi.StringPtrOutput)
}

// tenantSettings
func (o RedisReadablePropertiesWithAccessKeyResponsePtrOutput) TenantSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisReadablePropertiesWithAccessKeyResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.TenantSettings
	}).(pulumi.StringMapOutput)
}

// The exact ARM resource ID of the virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.ClassicNetwork/VirtualNetworks/vnet1
func (o RedisReadablePropertiesWithAccessKeyResponsePtrOutput) VirtualNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisReadablePropertiesWithAccessKeyResponse) *string {
		if v == nil {
			return nil
		}
		return v.VirtualNetwork
	}).(pulumi.StringPtrOutput)
}

// SKU parameters supplied to the create Redis operation.
type Sku struct {
	// What size of Redis cache to deploy. Valid values: for C family (0, 1, 2, 3, 4, 5, 6), for P family (1, 2, 3, 4).
	Capacity int `pulumi:"capacity"`
	// Which family to use. Valid values: (C, P).
	Family string `pulumi:"family"`
	// What type of Redis cache to deploy. Valid values: (Basic, Standard, Premium).
	Name string `pulumi:"name"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//          SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// SKU parameters supplied to the create Redis operation.
type SkuArgs struct {
	// What size of Redis cache to deploy. Valid values: for C family (0, 1, 2, 3, 4, 5, 6), for P family (1, 2, 3, 4).
	Capacity pulumi.IntInput `pulumi:"capacity"`
	// Which family to use. Valid values: (C, P).
	Family pulumi.StringInput `pulumi:"family"`
	// What type of Redis cache to deploy. Valid values: (Basic, Standard, Premium).
	Name pulumi.StringInput `pulumi:"name"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//          SkuArgs{...}
//
//  or:
//
//          nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// SKU parameters supplied to the create Redis operation.
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyT(func(v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// What size of Redis cache to deploy. Valid values: for C family (0, 1, 2, 3, 4, 5, 6), for P family (1, 2, 3, 4).
func (o SkuOutput) Capacity() pulumi.IntOutput {
	return o.ApplyT(func(v Sku) int { return v.Capacity }).(pulumi.IntOutput)
}

// Which family to use. Valid values: (C, P).
func (o SkuOutput) Family() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Family }).(pulumi.StringOutput)
}

// What type of Redis cache to deploy. Valid values: (Basic, Standard, Premium).
func (o SkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Name }).(pulumi.StringOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku { return *v }).(SkuOutput)
}

// What size of Redis cache to deploy. Valid values: for C family (0, 1, 2, 3, 4, 5, 6), for P family (1, 2, 3, 4).
func (o SkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Sku) *int {
		if v == nil {
			return nil
		}
		return &v.Capacity
	}).(pulumi.IntPtrOutput)
}

// Which family to use. Valid values: (C, P).
func (o SkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Family
	}).(pulumi.StringPtrOutput)
}

// What type of Redis cache to deploy. Valid values: (Basic, Standard, Premium).
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// SKU parameters supplied to the create Redis operation.
type SkuResponse struct {
	// What size of Redis cache to deploy. Valid values: for C family (0, 1, 2, 3, 4, 5, 6), for P family (1, 2, 3, 4).
	Capacity int `pulumi:"capacity"`
	// Which family to use. Valid values: (C, P).
	Family string `pulumi:"family"`
	// What type of Redis cache to deploy. Valid values: (Basic, Standard, Premium).
	Name string `pulumi:"name"`
}

// SkuResponseInput is an input type that accepts SkuResponseArgs and SkuResponseOutput values.
// You can construct a concrete instance of `SkuResponseInput` via:
//
//          SkuResponseArgs{...}
type SkuResponseInput interface {
	pulumi.Input

	ToSkuResponseOutput() SkuResponseOutput
	ToSkuResponseOutputWithContext(context.Context) SkuResponseOutput
}

// SKU parameters supplied to the create Redis operation.
type SkuResponseArgs struct {
	// What size of Redis cache to deploy. Valid values: for C family (0, 1, 2, 3, 4, 5, 6), for P family (1, 2, 3, 4).
	Capacity pulumi.IntInput `pulumi:"capacity"`
	// Which family to use. Valid values: (C, P).
	Family pulumi.StringInput `pulumi:"family"`
	// What type of Redis cache to deploy. Valid values: (Basic, Standard, Premium).
	Name pulumi.StringInput `pulumi:"name"`
}

func (SkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (i SkuResponseArgs) ToSkuResponseOutput() SkuResponseOutput {
	return i.ToSkuResponseOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput)
}

func (i SkuResponseArgs) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput).ToSkuResponsePtrOutputWithContext(ctx)
}

// SkuResponsePtrInput is an input type that accepts SkuResponseArgs, SkuResponsePtr and SkuResponsePtrOutput values.
// You can construct a concrete instance of `SkuResponsePtrInput` via:
//
//          SkuResponseArgs{...}
//
//  or:
//
//          nil
type SkuResponsePtrInput interface {
	pulumi.Input

	ToSkuResponsePtrOutput() SkuResponsePtrOutput
	ToSkuResponsePtrOutputWithContext(context.Context) SkuResponsePtrOutput
}

type skuResponsePtrType SkuResponseArgs

func SkuResponsePtr(v *SkuResponseArgs) SkuResponsePtrInput {
	return (*skuResponsePtrType)(v)
}

func (*skuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponsePtrOutput)
}

// SKU parameters supplied to the create Redis operation.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (o SkuResponseOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o.ApplyT(func(v SkuResponse) *SkuResponse {
		return &v
	}).(SkuResponsePtrOutput)
}

// What size of Redis cache to deploy. Valid values: for C family (0, 1, 2, 3, 4, 5, 6), for P family (1, 2, 3, 4).
func (o SkuResponseOutput) Capacity() pulumi.IntOutput {
	return o.ApplyT(func(v SkuResponse) int { return v.Capacity }).(pulumi.IntOutput)
}

// Which family to use. Valid values: (C, P).
func (o SkuResponseOutput) Family() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Family }).(pulumi.StringOutput)
}

// What type of Redis cache to deploy. Valid values: (Basic, Standard, Premium).
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse { return *v }).(SkuResponseOutput)
}

// What size of Redis cache to deploy. Valid values: for C family (0, 1, 2, 3, 4, 5, 6), for P family (1, 2, 3, 4).
func (o SkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Capacity
	}).(pulumi.IntPtrOutput)
}

// Which family to use. Valid values: (C, P).
func (o SkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Family
	}).(pulumi.StringPtrOutput)
}

// What type of Redis cache to deploy. Valid values: (Basic, Standard, Premium).
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(RedisAccessKeysResponseOutput{})
	pulumi.RegisterOutputType(RedisAccessKeysResponsePtrOutput{})
	pulumi.RegisterOutputType(RedisReadablePropertiesResponseOutput{})
	pulumi.RegisterOutputType(RedisReadablePropertiesWithAccessKeyResponseOutput{})
	pulumi.RegisterOutputType(RedisReadablePropertiesWithAccessKeyResponsePtrOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
}
