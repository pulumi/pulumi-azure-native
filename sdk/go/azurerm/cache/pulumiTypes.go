// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cache

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A single Redis item in List or Get Operation.
type RedisType struct {
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// Resource name.
	Name string `pulumi:"name"`
	// Redis cache properties.
	Properties RedisPropertiesResponse `pulumi:"properties"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Resource type.
	Type string `pulumi:"type"`
	// A list of availability zones denoting where the resource needs to come from.
	Zones []string `pulumi:"zones"`
}

// RedisTypeInput is an input type that accepts RedisTypeArgs and RedisTypeOutput values.
// You can construct a concrete instance of `RedisTypeInput` via:
//
//          RedisTypeArgs{...}
type RedisTypeInput interface {
	pulumi.Input

	ToRedisTypeOutput() RedisTypeOutput
	ToRedisTypeOutputWithContext(context.Context) RedisTypeOutput
}

// A single Redis item in List or Get Operation.
type RedisTypeArgs struct {
	// The geo-location where the resource lives
	Location pulumi.StringInput `pulumi:"location"`
	// Resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// Redis cache properties.
	Properties RedisPropertiesResponseInput `pulumi:"properties"`
	// Resource tags.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
	// A list of availability zones denoting where the resource needs to come from.
	Zones pulumi.StringArrayInput `pulumi:"zones"`
}

func (RedisTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisType)(nil)).Elem()
}

func (i RedisTypeArgs) ToRedisTypeOutput() RedisTypeOutput {
	return i.ToRedisTypeOutputWithContext(context.Background())
}

func (i RedisTypeArgs) ToRedisTypeOutputWithContext(ctx context.Context) RedisTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisTypeOutput)
}

// A single Redis item in List or Get Operation.
type RedisTypeOutput struct{ *pulumi.OutputState }

func (RedisTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisType)(nil)).Elem()
}

func (o RedisTypeOutput) ToRedisTypeOutput() RedisTypeOutput {
	return o
}

func (o RedisTypeOutput) ToRedisTypeOutputWithContext(ctx context.Context) RedisTypeOutput {
	return o
}

// The geo-location where the resource lives
func (o RedisTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v RedisType) string { return v.Location }).(pulumi.StringOutput)
}

// Resource name.
func (o RedisTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisType) string { return v.Name }).(pulumi.StringOutput)
}

// Redis cache properties.
func (o RedisTypeOutput) Properties() RedisPropertiesResponseOutput {
	return o.ApplyT(func(v RedisType) RedisPropertiesResponse { return v.Properties }).(RedisPropertiesResponseOutput)
}

// Resource tags.
func (o RedisTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type.
func (o RedisTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RedisType) string { return v.Type }).(pulumi.StringOutput)
}

// A list of availability zones denoting where the resource needs to come from.
func (o RedisTypeOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RedisType) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

// Redis cache access keys.
type RedisAccessKeysResponse struct {
	// The current primary key that clients can use to authenticate with Redis cache.
	PrimaryKey string `pulumi:"primaryKey"`
	// The current secondary key that clients can use to authenticate with Redis cache.
	SecondaryKey string `pulumi:"secondaryKey"`
}

// RedisAccessKeysResponseInput is an input type that accepts RedisAccessKeysResponseArgs and RedisAccessKeysResponseOutput values.
// You can construct a concrete instance of `RedisAccessKeysResponseInput` via:
//
//          RedisAccessKeysResponseArgs{...}
type RedisAccessKeysResponseInput interface {
	pulumi.Input

	ToRedisAccessKeysResponseOutput() RedisAccessKeysResponseOutput
	ToRedisAccessKeysResponseOutputWithContext(context.Context) RedisAccessKeysResponseOutput
}

// Redis cache access keys.
type RedisAccessKeysResponseArgs struct {
	// The current primary key that clients can use to authenticate with Redis cache.
	PrimaryKey pulumi.StringInput `pulumi:"primaryKey"`
	// The current secondary key that clients can use to authenticate with Redis cache.
	SecondaryKey pulumi.StringInput `pulumi:"secondaryKey"`
}

func (RedisAccessKeysResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisAccessKeysResponse)(nil)).Elem()
}

func (i RedisAccessKeysResponseArgs) ToRedisAccessKeysResponseOutput() RedisAccessKeysResponseOutput {
	return i.ToRedisAccessKeysResponseOutputWithContext(context.Background())
}

func (i RedisAccessKeysResponseArgs) ToRedisAccessKeysResponseOutputWithContext(ctx context.Context) RedisAccessKeysResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisAccessKeysResponseOutput)
}

func (i RedisAccessKeysResponseArgs) ToRedisAccessKeysResponsePtrOutput() RedisAccessKeysResponsePtrOutput {
	return i.ToRedisAccessKeysResponsePtrOutputWithContext(context.Background())
}

func (i RedisAccessKeysResponseArgs) ToRedisAccessKeysResponsePtrOutputWithContext(ctx context.Context) RedisAccessKeysResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisAccessKeysResponseOutput).ToRedisAccessKeysResponsePtrOutputWithContext(ctx)
}

// RedisAccessKeysResponsePtrInput is an input type that accepts RedisAccessKeysResponseArgs, RedisAccessKeysResponsePtr and RedisAccessKeysResponsePtrOutput values.
// You can construct a concrete instance of `RedisAccessKeysResponsePtrInput` via:
//
//          RedisAccessKeysResponseArgs{...}
//
//  or:
//
//          nil
type RedisAccessKeysResponsePtrInput interface {
	pulumi.Input

	ToRedisAccessKeysResponsePtrOutput() RedisAccessKeysResponsePtrOutput
	ToRedisAccessKeysResponsePtrOutputWithContext(context.Context) RedisAccessKeysResponsePtrOutput
}

type redisAccessKeysResponsePtrType RedisAccessKeysResponseArgs

func RedisAccessKeysResponsePtr(v *RedisAccessKeysResponseArgs) RedisAccessKeysResponsePtrInput {
	return (*redisAccessKeysResponsePtrType)(v)
}

func (*redisAccessKeysResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisAccessKeysResponse)(nil)).Elem()
}

func (i *redisAccessKeysResponsePtrType) ToRedisAccessKeysResponsePtrOutput() RedisAccessKeysResponsePtrOutput {
	return i.ToRedisAccessKeysResponsePtrOutputWithContext(context.Background())
}

func (i *redisAccessKeysResponsePtrType) ToRedisAccessKeysResponsePtrOutputWithContext(ctx context.Context) RedisAccessKeysResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisAccessKeysResponsePtrOutput)
}

// Redis cache access keys.
type RedisAccessKeysResponseOutput struct{ *pulumi.OutputState }

func (RedisAccessKeysResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisAccessKeysResponse)(nil)).Elem()
}

func (o RedisAccessKeysResponseOutput) ToRedisAccessKeysResponseOutput() RedisAccessKeysResponseOutput {
	return o
}

func (o RedisAccessKeysResponseOutput) ToRedisAccessKeysResponseOutputWithContext(ctx context.Context) RedisAccessKeysResponseOutput {
	return o
}

func (o RedisAccessKeysResponseOutput) ToRedisAccessKeysResponsePtrOutput() RedisAccessKeysResponsePtrOutput {
	return o.ToRedisAccessKeysResponsePtrOutputWithContext(context.Background())
}

func (o RedisAccessKeysResponseOutput) ToRedisAccessKeysResponsePtrOutputWithContext(ctx context.Context) RedisAccessKeysResponsePtrOutput {
	return o.ApplyT(func(v RedisAccessKeysResponse) *RedisAccessKeysResponse {
		return &v
	}).(RedisAccessKeysResponsePtrOutput)
}

// The current primary key that clients can use to authenticate with Redis cache.
func (o RedisAccessKeysResponseOutput) PrimaryKey() pulumi.StringOutput {
	return o.ApplyT(func(v RedisAccessKeysResponse) string { return v.PrimaryKey }).(pulumi.StringOutput)
}

// The current secondary key that clients can use to authenticate with Redis cache.
func (o RedisAccessKeysResponseOutput) SecondaryKey() pulumi.StringOutput {
	return o.ApplyT(func(v RedisAccessKeysResponse) string { return v.SecondaryKey }).(pulumi.StringOutput)
}

type RedisAccessKeysResponsePtrOutput struct{ *pulumi.OutputState }

func (RedisAccessKeysResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisAccessKeysResponse)(nil)).Elem()
}

func (o RedisAccessKeysResponsePtrOutput) ToRedisAccessKeysResponsePtrOutput() RedisAccessKeysResponsePtrOutput {
	return o
}

func (o RedisAccessKeysResponsePtrOutput) ToRedisAccessKeysResponsePtrOutputWithContext(ctx context.Context) RedisAccessKeysResponsePtrOutput {
	return o
}

func (o RedisAccessKeysResponsePtrOutput) Elem() RedisAccessKeysResponseOutput {
	return o.ApplyT(func(v *RedisAccessKeysResponse) RedisAccessKeysResponse { return *v }).(RedisAccessKeysResponseOutput)
}

// The current primary key that clients can use to authenticate with Redis cache.
func (o RedisAccessKeysResponsePtrOutput) PrimaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisAccessKeysResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrimaryKey
	}).(pulumi.StringPtrOutput)
}

// The current secondary key that clients can use to authenticate with Redis cache.
func (o RedisAccessKeysResponsePtrOutput) SecondaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisAccessKeysResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SecondaryKey
	}).(pulumi.StringPtrOutput)
}

// Properties supplied to Create Redis operation.
type RedisCreateProperties struct {
	// Specifies whether the non-ssl Redis server port (6379) is enabled.
	EnableNonSslPort *bool `pulumi:"enableNonSslPort"`
	// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
	MinimumTlsVersion *string `pulumi:"minimumTlsVersion"`
	// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
	RedisConfiguration map[string]string `pulumi:"redisConfiguration"`
	// The number of shards to be created on a Premium Cluster Cache.
	ShardCount *int `pulumi:"shardCount"`
	// The SKU of the Redis cache to deploy.
	Sku Sku `pulumi:"sku"`
	// Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual Network.
	StaticIP *string `pulumi:"staticIP"`
	// The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
	SubnetId *string `pulumi:"subnetId"`
	// A dictionary of tenant settings
	TenantSettings map[string]string `pulumi:"tenantSettings"`
}

// RedisCreatePropertiesInput is an input type that accepts RedisCreatePropertiesArgs and RedisCreatePropertiesOutput values.
// You can construct a concrete instance of `RedisCreatePropertiesInput` via:
//
//          RedisCreatePropertiesArgs{...}
type RedisCreatePropertiesInput interface {
	pulumi.Input

	ToRedisCreatePropertiesOutput() RedisCreatePropertiesOutput
	ToRedisCreatePropertiesOutputWithContext(context.Context) RedisCreatePropertiesOutput
}

// Properties supplied to Create Redis operation.
type RedisCreatePropertiesArgs struct {
	// Specifies whether the non-ssl Redis server port (6379) is enabled.
	EnableNonSslPort pulumi.BoolPtrInput `pulumi:"enableNonSslPort"`
	// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
	MinimumTlsVersion pulumi.StringPtrInput `pulumi:"minimumTlsVersion"`
	// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
	RedisConfiguration pulumi.StringMapInput `pulumi:"redisConfiguration"`
	// The number of shards to be created on a Premium Cluster Cache.
	ShardCount pulumi.IntPtrInput `pulumi:"shardCount"`
	// The SKU of the Redis cache to deploy.
	Sku SkuInput `pulumi:"sku"`
	// Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual Network.
	StaticIP pulumi.StringPtrInput `pulumi:"staticIP"`
	// The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// A dictionary of tenant settings
	TenantSettings pulumi.StringMapInput `pulumi:"tenantSettings"`
}

func (RedisCreatePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisCreateProperties)(nil)).Elem()
}

func (i RedisCreatePropertiesArgs) ToRedisCreatePropertiesOutput() RedisCreatePropertiesOutput {
	return i.ToRedisCreatePropertiesOutputWithContext(context.Background())
}

func (i RedisCreatePropertiesArgs) ToRedisCreatePropertiesOutputWithContext(ctx context.Context) RedisCreatePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisCreatePropertiesOutput)
}

func (i RedisCreatePropertiesArgs) ToRedisCreatePropertiesPtrOutput() RedisCreatePropertiesPtrOutput {
	return i.ToRedisCreatePropertiesPtrOutputWithContext(context.Background())
}

func (i RedisCreatePropertiesArgs) ToRedisCreatePropertiesPtrOutputWithContext(ctx context.Context) RedisCreatePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisCreatePropertiesOutput).ToRedisCreatePropertiesPtrOutputWithContext(ctx)
}

// RedisCreatePropertiesPtrInput is an input type that accepts RedisCreatePropertiesArgs, RedisCreatePropertiesPtr and RedisCreatePropertiesPtrOutput values.
// You can construct a concrete instance of `RedisCreatePropertiesPtrInput` via:
//
//          RedisCreatePropertiesArgs{...}
//
//  or:
//
//          nil
type RedisCreatePropertiesPtrInput interface {
	pulumi.Input

	ToRedisCreatePropertiesPtrOutput() RedisCreatePropertiesPtrOutput
	ToRedisCreatePropertiesPtrOutputWithContext(context.Context) RedisCreatePropertiesPtrOutput
}

type redisCreatePropertiesPtrType RedisCreatePropertiesArgs

func RedisCreatePropertiesPtr(v *RedisCreatePropertiesArgs) RedisCreatePropertiesPtrInput {
	return (*redisCreatePropertiesPtrType)(v)
}

func (*redisCreatePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisCreateProperties)(nil)).Elem()
}

func (i *redisCreatePropertiesPtrType) ToRedisCreatePropertiesPtrOutput() RedisCreatePropertiesPtrOutput {
	return i.ToRedisCreatePropertiesPtrOutputWithContext(context.Background())
}

func (i *redisCreatePropertiesPtrType) ToRedisCreatePropertiesPtrOutputWithContext(ctx context.Context) RedisCreatePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisCreatePropertiesPtrOutput)
}

// Properties supplied to Create Redis operation.
type RedisCreatePropertiesOutput struct{ *pulumi.OutputState }

func (RedisCreatePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisCreateProperties)(nil)).Elem()
}

func (o RedisCreatePropertiesOutput) ToRedisCreatePropertiesOutput() RedisCreatePropertiesOutput {
	return o
}

func (o RedisCreatePropertiesOutput) ToRedisCreatePropertiesOutputWithContext(ctx context.Context) RedisCreatePropertiesOutput {
	return o
}

func (o RedisCreatePropertiesOutput) ToRedisCreatePropertiesPtrOutput() RedisCreatePropertiesPtrOutput {
	return o.ToRedisCreatePropertiesPtrOutputWithContext(context.Background())
}

func (o RedisCreatePropertiesOutput) ToRedisCreatePropertiesPtrOutputWithContext(ctx context.Context) RedisCreatePropertiesPtrOutput {
	return o.ApplyT(func(v RedisCreateProperties) *RedisCreateProperties {
		return &v
	}).(RedisCreatePropertiesPtrOutput)
}

// Specifies whether the non-ssl Redis server port (6379) is enabled.
func (o RedisCreatePropertiesOutput) EnableNonSslPort() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisCreateProperties) *bool { return v.EnableNonSslPort }).(pulumi.BoolPtrOutput)
}

// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
func (o RedisCreatePropertiesOutput) MinimumTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisCreateProperties) *string { return v.MinimumTlsVersion }).(pulumi.StringPtrOutput)
}

// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
func (o RedisCreatePropertiesOutput) RedisConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisCreateProperties) map[string]string { return v.RedisConfiguration }).(pulumi.StringMapOutput)
}

// The number of shards to be created on a Premium Cluster Cache.
func (o RedisCreatePropertiesOutput) ShardCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisCreateProperties) *int { return v.ShardCount }).(pulumi.IntPtrOutput)
}

// The SKU of the Redis cache to deploy.
func (o RedisCreatePropertiesOutput) Sku() SkuOutput {
	return o.ApplyT(func(v RedisCreateProperties) Sku { return v.Sku }).(SkuOutput)
}

// Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual Network.
func (o RedisCreatePropertiesOutput) StaticIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisCreateProperties) *string { return v.StaticIP }).(pulumi.StringPtrOutput)
}

// The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
func (o RedisCreatePropertiesOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisCreateProperties) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// A dictionary of tenant settings
func (o RedisCreatePropertiesOutput) TenantSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisCreateProperties) map[string]string { return v.TenantSettings }).(pulumi.StringMapOutput)
}

type RedisCreatePropertiesPtrOutput struct{ *pulumi.OutputState }

func (RedisCreatePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisCreateProperties)(nil)).Elem()
}

func (o RedisCreatePropertiesPtrOutput) ToRedisCreatePropertiesPtrOutput() RedisCreatePropertiesPtrOutput {
	return o
}

func (o RedisCreatePropertiesPtrOutput) ToRedisCreatePropertiesPtrOutputWithContext(ctx context.Context) RedisCreatePropertiesPtrOutput {
	return o
}

func (o RedisCreatePropertiesPtrOutput) Elem() RedisCreatePropertiesOutput {
	return o.ApplyT(func(v *RedisCreateProperties) RedisCreateProperties { return *v }).(RedisCreatePropertiesOutput)
}

// Specifies whether the non-ssl Redis server port (6379) is enabled.
func (o RedisCreatePropertiesPtrOutput) EnableNonSslPort() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisCreateProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNonSslPort
	}).(pulumi.BoolPtrOutput)
}

// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
func (o RedisCreatePropertiesPtrOutput) MinimumTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCreateProperties) *string {
		if v == nil {
			return nil
		}
		return v.MinimumTlsVersion
	}).(pulumi.StringPtrOutput)
}

// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
func (o RedisCreatePropertiesPtrOutput) RedisConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisCreateProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.RedisConfiguration
	}).(pulumi.StringMapOutput)
}

// The number of shards to be created on a Premium Cluster Cache.
func (o RedisCreatePropertiesPtrOutput) ShardCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisCreateProperties) *int {
		if v == nil {
			return nil
		}
		return v.ShardCount
	}).(pulumi.IntPtrOutput)
}

// The SKU of the Redis cache to deploy.
func (o RedisCreatePropertiesPtrOutput) Sku() SkuPtrOutput {
	return o.ApplyT(func(v *RedisCreateProperties) *Sku {
		if v == nil {
			return nil
		}
		return &v.Sku
	}).(SkuPtrOutput)
}

// Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual Network.
func (o RedisCreatePropertiesPtrOutput) StaticIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCreateProperties) *string {
		if v == nil {
			return nil
		}
		return v.StaticIP
	}).(pulumi.StringPtrOutput)
}

// The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
func (o RedisCreatePropertiesPtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisCreateProperties) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// A dictionary of tenant settings
func (o RedisCreatePropertiesPtrOutput) TenantSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisCreateProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.TenantSettings
	}).(pulumi.StringMapOutput)
}

// A firewall rule on a redis cache has a name, and describes a contiguous range of IP addresses permitted to connect
type RedisFirewallRuleType struct {
	// Resource name.
	Name string `pulumi:"name"`
	// redis cache firewall rule properties
	Properties RedisFirewallRulePropertiesResponse `pulumi:"properties"`
	// Resource type.
	Type string `pulumi:"type"`
}

// RedisFirewallRuleTypeInput is an input type that accepts RedisFirewallRuleTypeArgs and RedisFirewallRuleTypeOutput values.
// You can construct a concrete instance of `RedisFirewallRuleTypeInput` via:
//
//          RedisFirewallRuleTypeArgs{...}
type RedisFirewallRuleTypeInput interface {
	pulumi.Input

	ToRedisFirewallRuleTypeOutput() RedisFirewallRuleTypeOutput
	ToRedisFirewallRuleTypeOutputWithContext(context.Context) RedisFirewallRuleTypeOutput
}

// A firewall rule on a redis cache has a name, and describes a contiguous range of IP addresses permitted to connect
type RedisFirewallRuleTypeArgs struct {
	// Resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// redis cache firewall rule properties
	Properties RedisFirewallRulePropertiesResponseInput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RedisFirewallRuleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisFirewallRuleType)(nil)).Elem()
}

func (i RedisFirewallRuleTypeArgs) ToRedisFirewallRuleTypeOutput() RedisFirewallRuleTypeOutput {
	return i.ToRedisFirewallRuleTypeOutputWithContext(context.Background())
}

func (i RedisFirewallRuleTypeArgs) ToRedisFirewallRuleTypeOutputWithContext(ctx context.Context) RedisFirewallRuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisFirewallRuleTypeOutput)
}

// A firewall rule on a redis cache has a name, and describes a contiguous range of IP addresses permitted to connect
type RedisFirewallRuleTypeOutput struct{ *pulumi.OutputState }

func (RedisFirewallRuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisFirewallRuleType)(nil)).Elem()
}

func (o RedisFirewallRuleTypeOutput) ToRedisFirewallRuleTypeOutput() RedisFirewallRuleTypeOutput {
	return o
}

func (o RedisFirewallRuleTypeOutput) ToRedisFirewallRuleTypeOutputWithContext(ctx context.Context) RedisFirewallRuleTypeOutput {
	return o
}

// Resource name.
func (o RedisFirewallRuleTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisFirewallRuleType) string { return v.Name }).(pulumi.StringOutput)
}

// redis cache firewall rule properties
func (o RedisFirewallRuleTypeOutput) Properties() RedisFirewallRulePropertiesResponseOutput {
	return o.ApplyT(func(v RedisFirewallRuleType) RedisFirewallRulePropertiesResponse { return v.Properties }).(RedisFirewallRulePropertiesResponseOutput)
}

// Resource type.
func (o RedisFirewallRuleTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RedisFirewallRuleType) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies a range of IP addresses permitted to connect to the cache
type RedisFirewallRuleProperties struct {
	// highest IP address included in the range
	EndIP string `pulumi:"endIP"`
	// lowest IP address included in the range
	StartIP string `pulumi:"startIP"`
}

// RedisFirewallRulePropertiesInput is an input type that accepts RedisFirewallRulePropertiesArgs and RedisFirewallRulePropertiesOutput values.
// You can construct a concrete instance of `RedisFirewallRulePropertiesInput` via:
//
//          RedisFirewallRulePropertiesArgs{...}
type RedisFirewallRulePropertiesInput interface {
	pulumi.Input

	ToRedisFirewallRulePropertiesOutput() RedisFirewallRulePropertiesOutput
	ToRedisFirewallRulePropertiesOutputWithContext(context.Context) RedisFirewallRulePropertiesOutput
}

// Specifies a range of IP addresses permitted to connect to the cache
type RedisFirewallRulePropertiesArgs struct {
	// highest IP address included in the range
	EndIP pulumi.StringInput `pulumi:"endIP"`
	// lowest IP address included in the range
	StartIP pulumi.StringInput `pulumi:"startIP"`
}

func (RedisFirewallRulePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisFirewallRuleProperties)(nil)).Elem()
}

func (i RedisFirewallRulePropertiesArgs) ToRedisFirewallRulePropertiesOutput() RedisFirewallRulePropertiesOutput {
	return i.ToRedisFirewallRulePropertiesOutputWithContext(context.Background())
}

func (i RedisFirewallRulePropertiesArgs) ToRedisFirewallRulePropertiesOutputWithContext(ctx context.Context) RedisFirewallRulePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisFirewallRulePropertiesOutput)
}

func (i RedisFirewallRulePropertiesArgs) ToRedisFirewallRulePropertiesPtrOutput() RedisFirewallRulePropertiesPtrOutput {
	return i.ToRedisFirewallRulePropertiesPtrOutputWithContext(context.Background())
}

func (i RedisFirewallRulePropertiesArgs) ToRedisFirewallRulePropertiesPtrOutputWithContext(ctx context.Context) RedisFirewallRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisFirewallRulePropertiesOutput).ToRedisFirewallRulePropertiesPtrOutputWithContext(ctx)
}

// RedisFirewallRulePropertiesPtrInput is an input type that accepts RedisFirewallRulePropertiesArgs, RedisFirewallRulePropertiesPtr and RedisFirewallRulePropertiesPtrOutput values.
// You can construct a concrete instance of `RedisFirewallRulePropertiesPtrInput` via:
//
//          RedisFirewallRulePropertiesArgs{...}
//
//  or:
//
//          nil
type RedisFirewallRulePropertiesPtrInput interface {
	pulumi.Input

	ToRedisFirewallRulePropertiesPtrOutput() RedisFirewallRulePropertiesPtrOutput
	ToRedisFirewallRulePropertiesPtrOutputWithContext(context.Context) RedisFirewallRulePropertiesPtrOutput
}

type redisFirewallRulePropertiesPtrType RedisFirewallRulePropertiesArgs

func RedisFirewallRulePropertiesPtr(v *RedisFirewallRulePropertiesArgs) RedisFirewallRulePropertiesPtrInput {
	return (*redisFirewallRulePropertiesPtrType)(v)
}

func (*redisFirewallRulePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisFirewallRuleProperties)(nil)).Elem()
}

func (i *redisFirewallRulePropertiesPtrType) ToRedisFirewallRulePropertiesPtrOutput() RedisFirewallRulePropertiesPtrOutput {
	return i.ToRedisFirewallRulePropertiesPtrOutputWithContext(context.Background())
}

func (i *redisFirewallRulePropertiesPtrType) ToRedisFirewallRulePropertiesPtrOutputWithContext(ctx context.Context) RedisFirewallRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisFirewallRulePropertiesPtrOutput)
}

// Specifies a range of IP addresses permitted to connect to the cache
type RedisFirewallRulePropertiesOutput struct{ *pulumi.OutputState }

func (RedisFirewallRulePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisFirewallRuleProperties)(nil)).Elem()
}

func (o RedisFirewallRulePropertiesOutput) ToRedisFirewallRulePropertiesOutput() RedisFirewallRulePropertiesOutput {
	return o
}

func (o RedisFirewallRulePropertiesOutput) ToRedisFirewallRulePropertiesOutputWithContext(ctx context.Context) RedisFirewallRulePropertiesOutput {
	return o
}

func (o RedisFirewallRulePropertiesOutput) ToRedisFirewallRulePropertiesPtrOutput() RedisFirewallRulePropertiesPtrOutput {
	return o.ToRedisFirewallRulePropertiesPtrOutputWithContext(context.Background())
}

func (o RedisFirewallRulePropertiesOutput) ToRedisFirewallRulePropertiesPtrOutputWithContext(ctx context.Context) RedisFirewallRulePropertiesPtrOutput {
	return o.ApplyT(func(v RedisFirewallRuleProperties) *RedisFirewallRuleProperties {
		return &v
	}).(RedisFirewallRulePropertiesPtrOutput)
}

// highest IP address included in the range
func (o RedisFirewallRulePropertiesOutput) EndIP() pulumi.StringOutput {
	return o.ApplyT(func(v RedisFirewallRuleProperties) string { return v.EndIP }).(pulumi.StringOutput)
}

// lowest IP address included in the range
func (o RedisFirewallRulePropertiesOutput) StartIP() pulumi.StringOutput {
	return o.ApplyT(func(v RedisFirewallRuleProperties) string { return v.StartIP }).(pulumi.StringOutput)
}

type RedisFirewallRulePropertiesPtrOutput struct{ *pulumi.OutputState }

func (RedisFirewallRulePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisFirewallRuleProperties)(nil)).Elem()
}

func (o RedisFirewallRulePropertiesPtrOutput) ToRedisFirewallRulePropertiesPtrOutput() RedisFirewallRulePropertiesPtrOutput {
	return o
}

func (o RedisFirewallRulePropertiesPtrOutput) ToRedisFirewallRulePropertiesPtrOutputWithContext(ctx context.Context) RedisFirewallRulePropertiesPtrOutput {
	return o
}

func (o RedisFirewallRulePropertiesPtrOutput) Elem() RedisFirewallRulePropertiesOutput {
	return o.ApplyT(func(v *RedisFirewallRuleProperties) RedisFirewallRuleProperties { return *v }).(RedisFirewallRulePropertiesOutput)
}

// highest IP address included in the range
func (o RedisFirewallRulePropertiesPtrOutput) EndIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisFirewallRuleProperties) *string {
		if v == nil {
			return nil
		}
		return &v.EndIP
	}).(pulumi.StringPtrOutput)
}

// lowest IP address included in the range
func (o RedisFirewallRulePropertiesPtrOutput) StartIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisFirewallRuleProperties) *string {
		if v == nil {
			return nil
		}
		return &v.StartIP
	}).(pulumi.StringPtrOutput)
}

// Specifies a range of IP addresses permitted to connect to the cache
type RedisFirewallRulePropertiesResponse struct {
	// highest IP address included in the range
	EndIP string `pulumi:"endIP"`
	// lowest IP address included in the range
	StartIP string `pulumi:"startIP"`
}

// RedisFirewallRulePropertiesResponseInput is an input type that accepts RedisFirewallRulePropertiesResponseArgs and RedisFirewallRulePropertiesResponseOutput values.
// You can construct a concrete instance of `RedisFirewallRulePropertiesResponseInput` via:
//
//          RedisFirewallRulePropertiesResponseArgs{...}
type RedisFirewallRulePropertiesResponseInput interface {
	pulumi.Input

	ToRedisFirewallRulePropertiesResponseOutput() RedisFirewallRulePropertiesResponseOutput
	ToRedisFirewallRulePropertiesResponseOutputWithContext(context.Context) RedisFirewallRulePropertiesResponseOutput
}

// Specifies a range of IP addresses permitted to connect to the cache
type RedisFirewallRulePropertiesResponseArgs struct {
	// highest IP address included in the range
	EndIP pulumi.StringInput `pulumi:"endIP"`
	// lowest IP address included in the range
	StartIP pulumi.StringInput `pulumi:"startIP"`
}

func (RedisFirewallRulePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisFirewallRulePropertiesResponse)(nil)).Elem()
}

func (i RedisFirewallRulePropertiesResponseArgs) ToRedisFirewallRulePropertiesResponseOutput() RedisFirewallRulePropertiesResponseOutput {
	return i.ToRedisFirewallRulePropertiesResponseOutputWithContext(context.Background())
}

func (i RedisFirewallRulePropertiesResponseArgs) ToRedisFirewallRulePropertiesResponseOutputWithContext(ctx context.Context) RedisFirewallRulePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisFirewallRulePropertiesResponseOutput)
}

func (i RedisFirewallRulePropertiesResponseArgs) ToRedisFirewallRulePropertiesResponsePtrOutput() RedisFirewallRulePropertiesResponsePtrOutput {
	return i.ToRedisFirewallRulePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i RedisFirewallRulePropertiesResponseArgs) ToRedisFirewallRulePropertiesResponsePtrOutputWithContext(ctx context.Context) RedisFirewallRulePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisFirewallRulePropertiesResponseOutput).ToRedisFirewallRulePropertiesResponsePtrOutputWithContext(ctx)
}

// RedisFirewallRulePropertiesResponsePtrInput is an input type that accepts RedisFirewallRulePropertiesResponseArgs, RedisFirewallRulePropertiesResponsePtr and RedisFirewallRulePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `RedisFirewallRulePropertiesResponsePtrInput` via:
//
//          RedisFirewallRulePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type RedisFirewallRulePropertiesResponsePtrInput interface {
	pulumi.Input

	ToRedisFirewallRulePropertiesResponsePtrOutput() RedisFirewallRulePropertiesResponsePtrOutput
	ToRedisFirewallRulePropertiesResponsePtrOutputWithContext(context.Context) RedisFirewallRulePropertiesResponsePtrOutput
}

type redisFirewallRulePropertiesResponsePtrType RedisFirewallRulePropertiesResponseArgs

func RedisFirewallRulePropertiesResponsePtr(v *RedisFirewallRulePropertiesResponseArgs) RedisFirewallRulePropertiesResponsePtrInput {
	return (*redisFirewallRulePropertiesResponsePtrType)(v)
}

func (*redisFirewallRulePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisFirewallRulePropertiesResponse)(nil)).Elem()
}

func (i *redisFirewallRulePropertiesResponsePtrType) ToRedisFirewallRulePropertiesResponsePtrOutput() RedisFirewallRulePropertiesResponsePtrOutput {
	return i.ToRedisFirewallRulePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *redisFirewallRulePropertiesResponsePtrType) ToRedisFirewallRulePropertiesResponsePtrOutputWithContext(ctx context.Context) RedisFirewallRulePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisFirewallRulePropertiesResponsePtrOutput)
}

// Specifies a range of IP addresses permitted to connect to the cache
type RedisFirewallRulePropertiesResponseOutput struct{ *pulumi.OutputState }

func (RedisFirewallRulePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisFirewallRulePropertiesResponse)(nil)).Elem()
}

func (o RedisFirewallRulePropertiesResponseOutput) ToRedisFirewallRulePropertiesResponseOutput() RedisFirewallRulePropertiesResponseOutput {
	return o
}

func (o RedisFirewallRulePropertiesResponseOutput) ToRedisFirewallRulePropertiesResponseOutputWithContext(ctx context.Context) RedisFirewallRulePropertiesResponseOutput {
	return o
}

func (o RedisFirewallRulePropertiesResponseOutput) ToRedisFirewallRulePropertiesResponsePtrOutput() RedisFirewallRulePropertiesResponsePtrOutput {
	return o.ToRedisFirewallRulePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o RedisFirewallRulePropertiesResponseOutput) ToRedisFirewallRulePropertiesResponsePtrOutputWithContext(ctx context.Context) RedisFirewallRulePropertiesResponsePtrOutput {
	return o.ApplyT(func(v RedisFirewallRulePropertiesResponse) *RedisFirewallRulePropertiesResponse {
		return &v
	}).(RedisFirewallRulePropertiesResponsePtrOutput)
}

// highest IP address included in the range
func (o RedisFirewallRulePropertiesResponseOutput) EndIP() pulumi.StringOutput {
	return o.ApplyT(func(v RedisFirewallRulePropertiesResponse) string { return v.EndIP }).(pulumi.StringOutput)
}

// lowest IP address included in the range
func (o RedisFirewallRulePropertiesResponseOutput) StartIP() pulumi.StringOutput {
	return o.ApplyT(func(v RedisFirewallRulePropertiesResponse) string { return v.StartIP }).(pulumi.StringOutput)
}

type RedisFirewallRulePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (RedisFirewallRulePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisFirewallRulePropertiesResponse)(nil)).Elem()
}

func (o RedisFirewallRulePropertiesResponsePtrOutput) ToRedisFirewallRulePropertiesResponsePtrOutput() RedisFirewallRulePropertiesResponsePtrOutput {
	return o
}

func (o RedisFirewallRulePropertiesResponsePtrOutput) ToRedisFirewallRulePropertiesResponsePtrOutputWithContext(ctx context.Context) RedisFirewallRulePropertiesResponsePtrOutput {
	return o
}

func (o RedisFirewallRulePropertiesResponsePtrOutput) Elem() RedisFirewallRulePropertiesResponseOutput {
	return o.ApplyT(func(v *RedisFirewallRulePropertiesResponse) RedisFirewallRulePropertiesResponse { return *v }).(RedisFirewallRulePropertiesResponseOutput)
}

// highest IP address included in the range
func (o RedisFirewallRulePropertiesResponsePtrOutput) EndIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisFirewallRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EndIP
	}).(pulumi.StringPtrOutput)
}

// lowest IP address included in the range
func (o RedisFirewallRulePropertiesResponsePtrOutput) StartIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisFirewallRulePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartIP
	}).(pulumi.StringPtrOutput)
}

// Response to put/get linked server (with properties) for Redis cache.
type RedisLinkedServerType struct {
	// Resource name.
	Name string `pulumi:"name"`
	// Properties of the linked server.
	Properties RedisLinkedServerPropertiesResponse `pulumi:"properties"`
	// Resource type.
	Type string `pulumi:"type"`
}

// RedisLinkedServerTypeInput is an input type that accepts RedisLinkedServerTypeArgs and RedisLinkedServerTypeOutput values.
// You can construct a concrete instance of `RedisLinkedServerTypeInput` via:
//
//          RedisLinkedServerTypeArgs{...}
type RedisLinkedServerTypeInput interface {
	pulumi.Input

	ToRedisLinkedServerTypeOutput() RedisLinkedServerTypeOutput
	ToRedisLinkedServerTypeOutputWithContext(context.Context) RedisLinkedServerTypeOutput
}

// Response to put/get linked server (with properties) for Redis cache.
type RedisLinkedServerTypeArgs struct {
	// Resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// Properties of the linked server.
	Properties RedisLinkedServerPropertiesResponseInput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RedisLinkedServerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisLinkedServerType)(nil)).Elem()
}

func (i RedisLinkedServerTypeArgs) ToRedisLinkedServerTypeOutput() RedisLinkedServerTypeOutput {
	return i.ToRedisLinkedServerTypeOutputWithContext(context.Background())
}

func (i RedisLinkedServerTypeArgs) ToRedisLinkedServerTypeOutputWithContext(ctx context.Context) RedisLinkedServerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisLinkedServerTypeOutput)
}

// Response to put/get linked server (with properties) for Redis cache.
type RedisLinkedServerTypeOutput struct{ *pulumi.OutputState }

func (RedisLinkedServerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisLinkedServerType)(nil)).Elem()
}

func (o RedisLinkedServerTypeOutput) ToRedisLinkedServerTypeOutput() RedisLinkedServerTypeOutput {
	return o
}

func (o RedisLinkedServerTypeOutput) ToRedisLinkedServerTypeOutputWithContext(ctx context.Context) RedisLinkedServerTypeOutput {
	return o
}

// Resource name.
func (o RedisLinkedServerTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisLinkedServerType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of the linked server.
func (o RedisLinkedServerTypeOutput) Properties() RedisLinkedServerPropertiesResponseOutput {
	return o.ApplyT(func(v RedisLinkedServerType) RedisLinkedServerPropertiesResponse { return v.Properties }).(RedisLinkedServerPropertiesResponseOutput)
}

// Resource type.
func (o RedisLinkedServerTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RedisLinkedServerType) string { return v.Type }).(pulumi.StringOutput)
}

// Create properties for a linked server
type RedisLinkedServerCreateProperties struct {
	// Fully qualified resourceId of the linked redis cache.
	LinkedRedisCacheId string `pulumi:"linkedRedisCacheId"`
	// Location of the linked redis cache.
	LinkedRedisCacheLocation string `pulumi:"linkedRedisCacheLocation"`
	// Role of the linked server.
	ServerRole string `pulumi:"serverRole"`
}

// RedisLinkedServerCreatePropertiesInput is an input type that accepts RedisLinkedServerCreatePropertiesArgs and RedisLinkedServerCreatePropertiesOutput values.
// You can construct a concrete instance of `RedisLinkedServerCreatePropertiesInput` via:
//
//          RedisLinkedServerCreatePropertiesArgs{...}
type RedisLinkedServerCreatePropertiesInput interface {
	pulumi.Input

	ToRedisLinkedServerCreatePropertiesOutput() RedisLinkedServerCreatePropertiesOutput
	ToRedisLinkedServerCreatePropertiesOutputWithContext(context.Context) RedisLinkedServerCreatePropertiesOutput
}

// Create properties for a linked server
type RedisLinkedServerCreatePropertiesArgs struct {
	// Fully qualified resourceId of the linked redis cache.
	LinkedRedisCacheId pulumi.StringInput `pulumi:"linkedRedisCacheId"`
	// Location of the linked redis cache.
	LinkedRedisCacheLocation pulumi.StringInput `pulumi:"linkedRedisCacheLocation"`
	// Role of the linked server.
	ServerRole pulumi.StringInput `pulumi:"serverRole"`
}

func (RedisLinkedServerCreatePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisLinkedServerCreateProperties)(nil)).Elem()
}

func (i RedisLinkedServerCreatePropertiesArgs) ToRedisLinkedServerCreatePropertiesOutput() RedisLinkedServerCreatePropertiesOutput {
	return i.ToRedisLinkedServerCreatePropertiesOutputWithContext(context.Background())
}

func (i RedisLinkedServerCreatePropertiesArgs) ToRedisLinkedServerCreatePropertiesOutputWithContext(ctx context.Context) RedisLinkedServerCreatePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisLinkedServerCreatePropertiesOutput)
}

func (i RedisLinkedServerCreatePropertiesArgs) ToRedisLinkedServerCreatePropertiesPtrOutput() RedisLinkedServerCreatePropertiesPtrOutput {
	return i.ToRedisLinkedServerCreatePropertiesPtrOutputWithContext(context.Background())
}

func (i RedisLinkedServerCreatePropertiesArgs) ToRedisLinkedServerCreatePropertiesPtrOutputWithContext(ctx context.Context) RedisLinkedServerCreatePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisLinkedServerCreatePropertiesOutput).ToRedisLinkedServerCreatePropertiesPtrOutputWithContext(ctx)
}

// RedisLinkedServerCreatePropertiesPtrInput is an input type that accepts RedisLinkedServerCreatePropertiesArgs, RedisLinkedServerCreatePropertiesPtr and RedisLinkedServerCreatePropertiesPtrOutput values.
// You can construct a concrete instance of `RedisLinkedServerCreatePropertiesPtrInput` via:
//
//          RedisLinkedServerCreatePropertiesArgs{...}
//
//  or:
//
//          nil
type RedisLinkedServerCreatePropertiesPtrInput interface {
	pulumi.Input

	ToRedisLinkedServerCreatePropertiesPtrOutput() RedisLinkedServerCreatePropertiesPtrOutput
	ToRedisLinkedServerCreatePropertiesPtrOutputWithContext(context.Context) RedisLinkedServerCreatePropertiesPtrOutput
}

type redisLinkedServerCreatePropertiesPtrType RedisLinkedServerCreatePropertiesArgs

func RedisLinkedServerCreatePropertiesPtr(v *RedisLinkedServerCreatePropertiesArgs) RedisLinkedServerCreatePropertiesPtrInput {
	return (*redisLinkedServerCreatePropertiesPtrType)(v)
}

func (*redisLinkedServerCreatePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisLinkedServerCreateProperties)(nil)).Elem()
}

func (i *redisLinkedServerCreatePropertiesPtrType) ToRedisLinkedServerCreatePropertiesPtrOutput() RedisLinkedServerCreatePropertiesPtrOutput {
	return i.ToRedisLinkedServerCreatePropertiesPtrOutputWithContext(context.Background())
}

func (i *redisLinkedServerCreatePropertiesPtrType) ToRedisLinkedServerCreatePropertiesPtrOutputWithContext(ctx context.Context) RedisLinkedServerCreatePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisLinkedServerCreatePropertiesPtrOutput)
}

// Create properties for a linked server
type RedisLinkedServerCreatePropertiesOutput struct{ *pulumi.OutputState }

func (RedisLinkedServerCreatePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisLinkedServerCreateProperties)(nil)).Elem()
}

func (o RedisLinkedServerCreatePropertiesOutput) ToRedisLinkedServerCreatePropertiesOutput() RedisLinkedServerCreatePropertiesOutput {
	return o
}

func (o RedisLinkedServerCreatePropertiesOutput) ToRedisLinkedServerCreatePropertiesOutputWithContext(ctx context.Context) RedisLinkedServerCreatePropertiesOutput {
	return o
}

func (o RedisLinkedServerCreatePropertiesOutput) ToRedisLinkedServerCreatePropertiesPtrOutput() RedisLinkedServerCreatePropertiesPtrOutput {
	return o.ToRedisLinkedServerCreatePropertiesPtrOutputWithContext(context.Background())
}

func (o RedisLinkedServerCreatePropertiesOutput) ToRedisLinkedServerCreatePropertiesPtrOutputWithContext(ctx context.Context) RedisLinkedServerCreatePropertiesPtrOutput {
	return o.ApplyT(func(v RedisLinkedServerCreateProperties) *RedisLinkedServerCreateProperties {
		return &v
	}).(RedisLinkedServerCreatePropertiesPtrOutput)
}

// Fully qualified resourceId of the linked redis cache.
func (o RedisLinkedServerCreatePropertiesOutput) LinkedRedisCacheId() pulumi.StringOutput {
	return o.ApplyT(func(v RedisLinkedServerCreateProperties) string { return v.LinkedRedisCacheId }).(pulumi.StringOutput)
}

// Location of the linked redis cache.
func (o RedisLinkedServerCreatePropertiesOutput) LinkedRedisCacheLocation() pulumi.StringOutput {
	return o.ApplyT(func(v RedisLinkedServerCreateProperties) string { return v.LinkedRedisCacheLocation }).(pulumi.StringOutput)
}

// Role of the linked server.
func (o RedisLinkedServerCreatePropertiesOutput) ServerRole() pulumi.StringOutput {
	return o.ApplyT(func(v RedisLinkedServerCreateProperties) string { return v.ServerRole }).(pulumi.StringOutput)
}

type RedisLinkedServerCreatePropertiesPtrOutput struct{ *pulumi.OutputState }

func (RedisLinkedServerCreatePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisLinkedServerCreateProperties)(nil)).Elem()
}

func (o RedisLinkedServerCreatePropertiesPtrOutput) ToRedisLinkedServerCreatePropertiesPtrOutput() RedisLinkedServerCreatePropertiesPtrOutput {
	return o
}

func (o RedisLinkedServerCreatePropertiesPtrOutput) ToRedisLinkedServerCreatePropertiesPtrOutputWithContext(ctx context.Context) RedisLinkedServerCreatePropertiesPtrOutput {
	return o
}

func (o RedisLinkedServerCreatePropertiesPtrOutput) Elem() RedisLinkedServerCreatePropertiesOutput {
	return o.ApplyT(func(v *RedisLinkedServerCreateProperties) RedisLinkedServerCreateProperties { return *v }).(RedisLinkedServerCreatePropertiesOutput)
}

// Fully qualified resourceId of the linked redis cache.
func (o RedisLinkedServerCreatePropertiesPtrOutput) LinkedRedisCacheId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisLinkedServerCreateProperties) *string {
		if v == nil {
			return nil
		}
		return &v.LinkedRedisCacheId
	}).(pulumi.StringPtrOutput)
}

// Location of the linked redis cache.
func (o RedisLinkedServerCreatePropertiesPtrOutput) LinkedRedisCacheLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisLinkedServerCreateProperties) *string {
		if v == nil {
			return nil
		}
		return &v.LinkedRedisCacheLocation
	}).(pulumi.StringPtrOutput)
}

// Role of the linked server.
func (o RedisLinkedServerCreatePropertiesPtrOutput) ServerRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisLinkedServerCreateProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ServerRole
	}).(pulumi.StringPtrOutput)
}

// Properties of a linked server to be returned in get/put response
type RedisLinkedServerPropertiesResponse struct {
	// Fully qualified resourceId of the linked redis cache.
	LinkedRedisCacheId string `pulumi:"linkedRedisCacheId"`
	// Location of the linked redis cache.
	LinkedRedisCacheLocation string `pulumi:"linkedRedisCacheLocation"`
	// Terminal state of the link between primary and secondary redis cache.
	ProvisioningState string `pulumi:"provisioningState"`
	// Role of the linked server.
	ServerRole string `pulumi:"serverRole"`
}

// RedisLinkedServerPropertiesResponseInput is an input type that accepts RedisLinkedServerPropertiesResponseArgs and RedisLinkedServerPropertiesResponseOutput values.
// You can construct a concrete instance of `RedisLinkedServerPropertiesResponseInput` via:
//
//          RedisLinkedServerPropertiesResponseArgs{...}
type RedisLinkedServerPropertiesResponseInput interface {
	pulumi.Input

	ToRedisLinkedServerPropertiesResponseOutput() RedisLinkedServerPropertiesResponseOutput
	ToRedisLinkedServerPropertiesResponseOutputWithContext(context.Context) RedisLinkedServerPropertiesResponseOutput
}

// Properties of a linked server to be returned in get/put response
type RedisLinkedServerPropertiesResponseArgs struct {
	// Fully qualified resourceId of the linked redis cache.
	LinkedRedisCacheId pulumi.StringInput `pulumi:"linkedRedisCacheId"`
	// Location of the linked redis cache.
	LinkedRedisCacheLocation pulumi.StringInput `pulumi:"linkedRedisCacheLocation"`
	// Terminal state of the link between primary and secondary redis cache.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// Role of the linked server.
	ServerRole pulumi.StringInput `pulumi:"serverRole"`
}

func (RedisLinkedServerPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisLinkedServerPropertiesResponse)(nil)).Elem()
}

func (i RedisLinkedServerPropertiesResponseArgs) ToRedisLinkedServerPropertiesResponseOutput() RedisLinkedServerPropertiesResponseOutput {
	return i.ToRedisLinkedServerPropertiesResponseOutputWithContext(context.Background())
}

func (i RedisLinkedServerPropertiesResponseArgs) ToRedisLinkedServerPropertiesResponseOutputWithContext(ctx context.Context) RedisLinkedServerPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisLinkedServerPropertiesResponseOutput)
}

func (i RedisLinkedServerPropertiesResponseArgs) ToRedisLinkedServerPropertiesResponsePtrOutput() RedisLinkedServerPropertiesResponsePtrOutput {
	return i.ToRedisLinkedServerPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i RedisLinkedServerPropertiesResponseArgs) ToRedisLinkedServerPropertiesResponsePtrOutputWithContext(ctx context.Context) RedisLinkedServerPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisLinkedServerPropertiesResponseOutput).ToRedisLinkedServerPropertiesResponsePtrOutputWithContext(ctx)
}

// RedisLinkedServerPropertiesResponsePtrInput is an input type that accepts RedisLinkedServerPropertiesResponseArgs, RedisLinkedServerPropertiesResponsePtr and RedisLinkedServerPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `RedisLinkedServerPropertiesResponsePtrInput` via:
//
//          RedisLinkedServerPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type RedisLinkedServerPropertiesResponsePtrInput interface {
	pulumi.Input

	ToRedisLinkedServerPropertiesResponsePtrOutput() RedisLinkedServerPropertiesResponsePtrOutput
	ToRedisLinkedServerPropertiesResponsePtrOutputWithContext(context.Context) RedisLinkedServerPropertiesResponsePtrOutput
}

type redisLinkedServerPropertiesResponsePtrType RedisLinkedServerPropertiesResponseArgs

func RedisLinkedServerPropertiesResponsePtr(v *RedisLinkedServerPropertiesResponseArgs) RedisLinkedServerPropertiesResponsePtrInput {
	return (*redisLinkedServerPropertiesResponsePtrType)(v)
}

func (*redisLinkedServerPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisLinkedServerPropertiesResponse)(nil)).Elem()
}

func (i *redisLinkedServerPropertiesResponsePtrType) ToRedisLinkedServerPropertiesResponsePtrOutput() RedisLinkedServerPropertiesResponsePtrOutput {
	return i.ToRedisLinkedServerPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *redisLinkedServerPropertiesResponsePtrType) ToRedisLinkedServerPropertiesResponsePtrOutputWithContext(ctx context.Context) RedisLinkedServerPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisLinkedServerPropertiesResponsePtrOutput)
}

// Properties of a linked server to be returned in get/put response
type RedisLinkedServerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (RedisLinkedServerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisLinkedServerPropertiesResponse)(nil)).Elem()
}

func (o RedisLinkedServerPropertiesResponseOutput) ToRedisLinkedServerPropertiesResponseOutput() RedisLinkedServerPropertiesResponseOutput {
	return o
}

func (o RedisLinkedServerPropertiesResponseOutput) ToRedisLinkedServerPropertiesResponseOutputWithContext(ctx context.Context) RedisLinkedServerPropertiesResponseOutput {
	return o
}

func (o RedisLinkedServerPropertiesResponseOutput) ToRedisLinkedServerPropertiesResponsePtrOutput() RedisLinkedServerPropertiesResponsePtrOutput {
	return o.ToRedisLinkedServerPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o RedisLinkedServerPropertiesResponseOutput) ToRedisLinkedServerPropertiesResponsePtrOutputWithContext(ctx context.Context) RedisLinkedServerPropertiesResponsePtrOutput {
	return o.ApplyT(func(v RedisLinkedServerPropertiesResponse) *RedisLinkedServerPropertiesResponse {
		return &v
	}).(RedisLinkedServerPropertiesResponsePtrOutput)
}

// Fully qualified resourceId of the linked redis cache.
func (o RedisLinkedServerPropertiesResponseOutput) LinkedRedisCacheId() pulumi.StringOutput {
	return o.ApplyT(func(v RedisLinkedServerPropertiesResponse) string { return v.LinkedRedisCacheId }).(pulumi.StringOutput)
}

// Location of the linked redis cache.
func (o RedisLinkedServerPropertiesResponseOutput) LinkedRedisCacheLocation() pulumi.StringOutput {
	return o.ApplyT(func(v RedisLinkedServerPropertiesResponse) string { return v.LinkedRedisCacheLocation }).(pulumi.StringOutput)
}

// Terminal state of the link between primary and secondary redis cache.
func (o RedisLinkedServerPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v RedisLinkedServerPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Role of the linked server.
func (o RedisLinkedServerPropertiesResponseOutput) ServerRole() pulumi.StringOutput {
	return o.ApplyT(func(v RedisLinkedServerPropertiesResponse) string { return v.ServerRole }).(pulumi.StringOutput)
}

type RedisLinkedServerPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (RedisLinkedServerPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisLinkedServerPropertiesResponse)(nil)).Elem()
}

func (o RedisLinkedServerPropertiesResponsePtrOutput) ToRedisLinkedServerPropertiesResponsePtrOutput() RedisLinkedServerPropertiesResponsePtrOutput {
	return o
}

func (o RedisLinkedServerPropertiesResponsePtrOutput) ToRedisLinkedServerPropertiesResponsePtrOutputWithContext(ctx context.Context) RedisLinkedServerPropertiesResponsePtrOutput {
	return o
}

func (o RedisLinkedServerPropertiesResponsePtrOutput) Elem() RedisLinkedServerPropertiesResponseOutput {
	return o.ApplyT(func(v *RedisLinkedServerPropertiesResponse) RedisLinkedServerPropertiesResponse { return *v }).(RedisLinkedServerPropertiesResponseOutput)
}

// Fully qualified resourceId of the linked redis cache.
func (o RedisLinkedServerPropertiesResponsePtrOutput) LinkedRedisCacheId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisLinkedServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LinkedRedisCacheId
	}).(pulumi.StringPtrOutput)
}

// Location of the linked redis cache.
func (o RedisLinkedServerPropertiesResponsePtrOutput) LinkedRedisCacheLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisLinkedServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LinkedRedisCacheLocation
	}).(pulumi.StringPtrOutput)
}

// Terminal state of the link between primary and secondary redis cache.
func (o RedisLinkedServerPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisLinkedServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Role of the linked server.
func (o RedisLinkedServerPropertiesResponsePtrOutput) ServerRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisLinkedServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServerRole
	}).(pulumi.StringPtrOutput)
}

// Linked server Id
type RedisLinkedServerResponse struct {
	// Linked server Id.
	Id string `pulumi:"id"`
}

// RedisLinkedServerResponseInput is an input type that accepts RedisLinkedServerResponseArgs and RedisLinkedServerResponseOutput values.
// You can construct a concrete instance of `RedisLinkedServerResponseInput` via:
//
//          RedisLinkedServerResponseArgs{...}
type RedisLinkedServerResponseInput interface {
	pulumi.Input

	ToRedisLinkedServerResponseOutput() RedisLinkedServerResponseOutput
	ToRedisLinkedServerResponseOutputWithContext(context.Context) RedisLinkedServerResponseOutput
}

// Linked server Id
type RedisLinkedServerResponseArgs struct {
	// Linked server Id.
	Id pulumi.StringInput `pulumi:"id"`
}

func (RedisLinkedServerResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisLinkedServerResponse)(nil)).Elem()
}

func (i RedisLinkedServerResponseArgs) ToRedisLinkedServerResponseOutput() RedisLinkedServerResponseOutput {
	return i.ToRedisLinkedServerResponseOutputWithContext(context.Background())
}

func (i RedisLinkedServerResponseArgs) ToRedisLinkedServerResponseOutputWithContext(ctx context.Context) RedisLinkedServerResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisLinkedServerResponseOutput)
}

// RedisLinkedServerResponseArrayInput is an input type that accepts RedisLinkedServerResponseArray and RedisLinkedServerResponseArrayOutput values.
// You can construct a concrete instance of `RedisLinkedServerResponseArrayInput` via:
//
//          RedisLinkedServerResponseArray{ RedisLinkedServerResponseArgs{...} }
type RedisLinkedServerResponseArrayInput interface {
	pulumi.Input

	ToRedisLinkedServerResponseArrayOutput() RedisLinkedServerResponseArrayOutput
	ToRedisLinkedServerResponseArrayOutputWithContext(context.Context) RedisLinkedServerResponseArrayOutput
}

type RedisLinkedServerResponseArray []RedisLinkedServerResponseInput

func (RedisLinkedServerResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisLinkedServerResponse)(nil)).Elem()
}

func (i RedisLinkedServerResponseArray) ToRedisLinkedServerResponseArrayOutput() RedisLinkedServerResponseArrayOutput {
	return i.ToRedisLinkedServerResponseArrayOutputWithContext(context.Background())
}

func (i RedisLinkedServerResponseArray) ToRedisLinkedServerResponseArrayOutputWithContext(ctx context.Context) RedisLinkedServerResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisLinkedServerResponseArrayOutput)
}

// Linked server Id
type RedisLinkedServerResponseOutput struct{ *pulumi.OutputState }

func (RedisLinkedServerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisLinkedServerResponse)(nil)).Elem()
}

func (o RedisLinkedServerResponseOutput) ToRedisLinkedServerResponseOutput() RedisLinkedServerResponseOutput {
	return o
}

func (o RedisLinkedServerResponseOutput) ToRedisLinkedServerResponseOutputWithContext(ctx context.Context) RedisLinkedServerResponseOutput {
	return o
}

// Linked server Id.
func (o RedisLinkedServerResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RedisLinkedServerResponse) string { return v.Id }).(pulumi.StringOutput)
}

type RedisLinkedServerResponseArrayOutput struct{ *pulumi.OutputState }

func (RedisLinkedServerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisLinkedServerResponse)(nil)).Elem()
}

func (o RedisLinkedServerResponseArrayOutput) ToRedisLinkedServerResponseArrayOutput() RedisLinkedServerResponseArrayOutput {
	return o
}

func (o RedisLinkedServerResponseArrayOutput) ToRedisLinkedServerResponseArrayOutputWithContext(ctx context.Context) RedisLinkedServerResponseArrayOutput {
	return o
}

func (o RedisLinkedServerResponseArrayOutput) Index(i pulumi.IntInput) RedisLinkedServerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisLinkedServerResponse {
		return vs[0].([]RedisLinkedServerResponse)[vs[1].(int)]
	}).(RedisLinkedServerResponseOutput)
}

// Response to put/get patch schedules for Redis cache.
type RedisPatchScheduleType struct {
	// Resource name.
	Name string `pulumi:"name"`
	// List of patch schedules for a Redis cache.
	Properties ScheduleEntriesResponse `pulumi:"properties"`
	// Resource type.
	Type string `pulumi:"type"`
}

// RedisPatchScheduleTypeInput is an input type that accepts RedisPatchScheduleTypeArgs and RedisPatchScheduleTypeOutput values.
// You can construct a concrete instance of `RedisPatchScheduleTypeInput` via:
//
//          RedisPatchScheduleTypeArgs{...}
type RedisPatchScheduleTypeInput interface {
	pulumi.Input

	ToRedisPatchScheduleTypeOutput() RedisPatchScheduleTypeOutput
	ToRedisPatchScheduleTypeOutputWithContext(context.Context) RedisPatchScheduleTypeOutput
}

// Response to put/get patch schedules for Redis cache.
type RedisPatchScheduleTypeArgs struct {
	// Resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// List of patch schedules for a Redis cache.
	Properties ScheduleEntriesResponseInput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RedisPatchScheduleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisPatchScheduleType)(nil)).Elem()
}

func (i RedisPatchScheduleTypeArgs) ToRedisPatchScheduleTypeOutput() RedisPatchScheduleTypeOutput {
	return i.ToRedisPatchScheduleTypeOutputWithContext(context.Background())
}

func (i RedisPatchScheduleTypeArgs) ToRedisPatchScheduleTypeOutputWithContext(ctx context.Context) RedisPatchScheduleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisPatchScheduleTypeOutput)
}

// Response to put/get patch schedules for Redis cache.
type RedisPatchScheduleTypeOutput struct{ *pulumi.OutputState }

func (RedisPatchScheduleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisPatchScheduleType)(nil)).Elem()
}

func (o RedisPatchScheduleTypeOutput) ToRedisPatchScheduleTypeOutput() RedisPatchScheduleTypeOutput {
	return o
}

func (o RedisPatchScheduleTypeOutput) ToRedisPatchScheduleTypeOutputWithContext(ctx context.Context) RedisPatchScheduleTypeOutput {
	return o
}

// Resource name.
func (o RedisPatchScheduleTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisPatchScheduleType) string { return v.Name }).(pulumi.StringOutput)
}

// List of patch schedules for a Redis cache.
func (o RedisPatchScheduleTypeOutput) Properties() ScheduleEntriesResponseOutput {
	return o.ApplyT(func(v RedisPatchScheduleType) ScheduleEntriesResponse { return v.Properties }).(ScheduleEntriesResponseOutput)
}

// Resource type.
func (o RedisPatchScheduleTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RedisPatchScheduleType) string { return v.Type }).(pulumi.StringOutput)
}

// Properties of the redis cache.
type RedisPropertiesResponse struct {
	// The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache
	AccessKeys RedisAccessKeysResponse `pulumi:"accessKeys"`
	// Specifies whether the non-ssl Redis server port (6379) is enabled.
	EnableNonSslPort *bool `pulumi:"enableNonSslPort"`
	// Redis host name.
	HostName string `pulumi:"hostName"`
	// List of the linked servers associated with the cache
	LinkedServers []RedisLinkedServerResponse `pulumi:"linkedServers"`
	// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
	MinimumTlsVersion *string `pulumi:"minimumTlsVersion"`
	// Redis non-SSL port.
	Port int `pulumi:"port"`
	// Redis instance provisioning status.
	ProvisioningState string `pulumi:"provisioningState"`
	// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
	RedisConfiguration map[string]string `pulumi:"redisConfiguration"`
	// Redis version.
	RedisVersion string `pulumi:"redisVersion"`
	// The number of shards to be created on a Premium Cluster Cache.
	ShardCount *int `pulumi:"shardCount"`
	// The SKU of the Redis cache to deploy.
	Sku SkuResponse `pulumi:"sku"`
	// Redis SSL port.
	SslPort int `pulumi:"sslPort"`
	// Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual Network.
	StaticIP *string `pulumi:"staticIP"`
	// The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
	SubnetId *string `pulumi:"subnetId"`
	// A dictionary of tenant settings
	TenantSettings map[string]string `pulumi:"tenantSettings"`
}

// RedisPropertiesResponseInput is an input type that accepts RedisPropertiesResponseArgs and RedisPropertiesResponseOutput values.
// You can construct a concrete instance of `RedisPropertiesResponseInput` via:
//
//          RedisPropertiesResponseArgs{...}
type RedisPropertiesResponseInput interface {
	pulumi.Input

	ToRedisPropertiesResponseOutput() RedisPropertiesResponseOutput
	ToRedisPropertiesResponseOutputWithContext(context.Context) RedisPropertiesResponseOutput
}

// Properties of the redis cache.
type RedisPropertiesResponseArgs struct {
	// The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache
	AccessKeys RedisAccessKeysResponseInput `pulumi:"accessKeys"`
	// Specifies whether the non-ssl Redis server port (6379) is enabled.
	EnableNonSslPort pulumi.BoolPtrInput `pulumi:"enableNonSslPort"`
	// Redis host name.
	HostName pulumi.StringInput `pulumi:"hostName"`
	// List of the linked servers associated with the cache
	LinkedServers RedisLinkedServerResponseArrayInput `pulumi:"linkedServers"`
	// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
	MinimumTlsVersion pulumi.StringPtrInput `pulumi:"minimumTlsVersion"`
	// Redis non-SSL port.
	Port pulumi.IntInput `pulumi:"port"`
	// Redis instance provisioning status.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
	RedisConfiguration pulumi.StringMapInput `pulumi:"redisConfiguration"`
	// Redis version.
	RedisVersion pulumi.StringInput `pulumi:"redisVersion"`
	// The number of shards to be created on a Premium Cluster Cache.
	ShardCount pulumi.IntPtrInput `pulumi:"shardCount"`
	// The SKU of the Redis cache to deploy.
	Sku SkuResponseInput `pulumi:"sku"`
	// Redis SSL port.
	SslPort pulumi.IntInput `pulumi:"sslPort"`
	// Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual Network.
	StaticIP pulumi.StringPtrInput `pulumi:"staticIP"`
	// The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// A dictionary of tenant settings
	TenantSettings pulumi.StringMapInput `pulumi:"tenantSettings"`
}

func (RedisPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisPropertiesResponse)(nil)).Elem()
}

func (i RedisPropertiesResponseArgs) ToRedisPropertiesResponseOutput() RedisPropertiesResponseOutput {
	return i.ToRedisPropertiesResponseOutputWithContext(context.Background())
}

func (i RedisPropertiesResponseArgs) ToRedisPropertiesResponseOutputWithContext(ctx context.Context) RedisPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisPropertiesResponseOutput)
}

func (i RedisPropertiesResponseArgs) ToRedisPropertiesResponsePtrOutput() RedisPropertiesResponsePtrOutput {
	return i.ToRedisPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i RedisPropertiesResponseArgs) ToRedisPropertiesResponsePtrOutputWithContext(ctx context.Context) RedisPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisPropertiesResponseOutput).ToRedisPropertiesResponsePtrOutputWithContext(ctx)
}

// RedisPropertiesResponsePtrInput is an input type that accepts RedisPropertiesResponseArgs, RedisPropertiesResponsePtr and RedisPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `RedisPropertiesResponsePtrInput` via:
//
//          RedisPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type RedisPropertiesResponsePtrInput interface {
	pulumi.Input

	ToRedisPropertiesResponsePtrOutput() RedisPropertiesResponsePtrOutput
	ToRedisPropertiesResponsePtrOutputWithContext(context.Context) RedisPropertiesResponsePtrOutput
}

type redisPropertiesResponsePtrType RedisPropertiesResponseArgs

func RedisPropertiesResponsePtr(v *RedisPropertiesResponseArgs) RedisPropertiesResponsePtrInput {
	return (*redisPropertiesResponsePtrType)(v)
}

func (*redisPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisPropertiesResponse)(nil)).Elem()
}

func (i *redisPropertiesResponsePtrType) ToRedisPropertiesResponsePtrOutput() RedisPropertiesResponsePtrOutput {
	return i.ToRedisPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *redisPropertiesResponsePtrType) ToRedisPropertiesResponsePtrOutputWithContext(ctx context.Context) RedisPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedisPropertiesResponsePtrOutput)
}

// Properties of the redis cache.
type RedisPropertiesResponseOutput struct{ *pulumi.OutputState }

func (RedisPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisPropertiesResponse)(nil)).Elem()
}

func (o RedisPropertiesResponseOutput) ToRedisPropertiesResponseOutput() RedisPropertiesResponseOutput {
	return o
}

func (o RedisPropertiesResponseOutput) ToRedisPropertiesResponseOutputWithContext(ctx context.Context) RedisPropertiesResponseOutput {
	return o
}

func (o RedisPropertiesResponseOutput) ToRedisPropertiesResponsePtrOutput() RedisPropertiesResponsePtrOutput {
	return o.ToRedisPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o RedisPropertiesResponseOutput) ToRedisPropertiesResponsePtrOutputWithContext(ctx context.Context) RedisPropertiesResponsePtrOutput {
	return o.ApplyT(func(v RedisPropertiesResponse) *RedisPropertiesResponse {
		return &v
	}).(RedisPropertiesResponsePtrOutput)
}

// The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache
func (o RedisPropertiesResponseOutput) AccessKeys() RedisAccessKeysResponseOutput {
	return o.ApplyT(func(v RedisPropertiesResponse) RedisAccessKeysResponse { return v.AccessKeys }).(RedisAccessKeysResponseOutput)
}

// Specifies whether the non-ssl Redis server port (6379) is enabled.
func (o RedisPropertiesResponseOutput) EnableNonSslPort() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RedisPropertiesResponse) *bool { return v.EnableNonSslPort }).(pulumi.BoolPtrOutput)
}

// Redis host name.
func (o RedisPropertiesResponseOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v RedisPropertiesResponse) string { return v.HostName }).(pulumi.StringOutput)
}

// List of the linked servers associated with the cache
func (o RedisPropertiesResponseOutput) LinkedServers() RedisLinkedServerResponseArrayOutput {
	return o.ApplyT(func(v RedisPropertiesResponse) []RedisLinkedServerResponse { return v.LinkedServers }).(RedisLinkedServerResponseArrayOutput)
}

// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
func (o RedisPropertiesResponseOutput) MinimumTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisPropertiesResponse) *string { return v.MinimumTlsVersion }).(pulumi.StringPtrOutput)
}

// Redis non-SSL port.
func (o RedisPropertiesResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v RedisPropertiesResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Redis instance provisioning status.
func (o RedisPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v RedisPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
func (o RedisPropertiesResponseOutput) RedisConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisPropertiesResponse) map[string]string { return v.RedisConfiguration }).(pulumi.StringMapOutput)
}

// Redis version.
func (o RedisPropertiesResponseOutput) RedisVersion() pulumi.StringOutput {
	return o.ApplyT(func(v RedisPropertiesResponse) string { return v.RedisVersion }).(pulumi.StringOutput)
}

// The number of shards to be created on a Premium Cluster Cache.
func (o RedisPropertiesResponseOutput) ShardCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RedisPropertiesResponse) *int { return v.ShardCount }).(pulumi.IntPtrOutput)
}

// The SKU of the Redis cache to deploy.
func (o RedisPropertiesResponseOutput) Sku() SkuResponseOutput {
	return o.ApplyT(func(v RedisPropertiesResponse) SkuResponse { return v.Sku }).(SkuResponseOutput)
}

// Redis SSL port.
func (o RedisPropertiesResponseOutput) SslPort() pulumi.IntOutput {
	return o.ApplyT(func(v RedisPropertiesResponse) int { return v.SslPort }).(pulumi.IntOutput)
}

// Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual Network.
func (o RedisPropertiesResponseOutput) StaticIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisPropertiesResponse) *string { return v.StaticIP }).(pulumi.StringPtrOutput)
}

// The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
func (o RedisPropertiesResponseOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisPropertiesResponse) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// A dictionary of tenant settings
func (o RedisPropertiesResponseOutput) TenantSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v RedisPropertiesResponse) map[string]string { return v.TenantSettings }).(pulumi.StringMapOutput)
}

type RedisPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (RedisPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisPropertiesResponse)(nil)).Elem()
}

func (o RedisPropertiesResponsePtrOutput) ToRedisPropertiesResponsePtrOutput() RedisPropertiesResponsePtrOutput {
	return o
}

func (o RedisPropertiesResponsePtrOutput) ToRedisPropertiesResponsePtrOutputWithContext(ctx context.Context) RedisPropertiesResponsePtrOutput {
	return o
}

func (o RedisPropertiesResponsePtrOutput) Elem() RedisPropertiesResponseOutput {
	return o.ApplyT(func(v *RedisPropertiesResponse) RedisPropertiesResponse { return *v }).(RedisPropertiesResponseOutput)
}

// The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache
func (o RedisPropertiesResponsePtrOutput) AccessKeys() RedisAccessKeysResponsePtrOutput {
	return o.ApplyT(func(v *RedisPropertiesResponse) *RedisAccessKeysResponse {
		if v == nil {
			return nil
		}
		return &v.AccessKeys
	}).(RedisAccessKeysResponsePtrOutput)
}

// Specifies whether the non-ssl Redis server port (6379) is enabled.
func (o RedisPropertiesResponsePtrOutput) EnableNonSslPort() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RedisPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNonSslPort
	}).(pulumi.BoolPtrOutput)
}

// Redis host name.
func (o RedisPropertiesResponsePtrOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.HostName
	}).(pulumi.StringPtrOutput)
}

// List of the linked servers associated with the cache
func (o RedisPropertiesResponsePtrOutput) LinkedServers() RedisLinkedServerResponseArrayOutput {
	return o.ApplyT(func(v *RedisPropertiesResponse) []RedisLinkedServerResponse {
		if v == nil {
			return nil
		}
		return v.LinkedServers
	}).(RedisLinkedServerResponseArrayOutput)
}

// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
func (o RedisPropertiesResponsePtrOutput) MinimumTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.MinimumTlsVersion
	}).(pulumi.StringPtrOutput)
}

// Redis non-SSL port.
func (o RedisPropertiesResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Redis instance provisioning status.
func (o RedisPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
func (o RedisPropertiesResponsePtrOutput) RedisConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisPropertiesResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.RedisConfiguration
	}).(pulumi.StringMapOutput)
}

// Redis version.
func (o RedisPropertiesResponsePtrOutput) RedisVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RedisVersion
	}).(pulumi.StringPtrOutput)
}

// The number of shards to be created on a Premium Cluster Cache.
func (o RedisPropertiesResponsePtrOutput) ShardCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.ShardCount
	}).(pulumi.IntPtrOutput)
}

// The SKU of the Redis cache to deploy.
func (o RedisPropertiesResponsePtrOutput) Sku() SkuResponsePtrOutput {
	return o.ApplyT(func(v *RedisPropertiesResponse) *SkuResponse {
		if v == nil {
			return nil
		}
		return &v.Sku
	}).(SkuResponsePtrOutput)
}

// Redis SSL port.
func (o RedisPropertiesResponsePtrOutput) SslPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RedisPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.SslPort
	}).(pulumi.IntPtrOutput)
}

// Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual Network.
func (o RedisPropertiesResponsePtrOutput) StaticIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.StaticIP
	}).(pulumi.StringPtrOutput)
}

// The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
func (o RedisPropertiesResponsePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// A dictionary of tenant settings
func (o RedisPropertiesResponsePtrOutput) TenantSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RedisPropertiesResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.TenantSettings
	}).(pulumi.StringMapOutput)
}

// List of patch schedules for a Redis cache.
type ScheduleEntries struct {
	// List of patch schedules for a Redis cache.
	ScheduleEntries []ScheduleEntry `pulumi:"scheduleEntries"`
}

// ScheduleEntriesInput is an input type that accepts ScheduleEntriesArgs and ScheduleEntriesOutput values.
// You can construct a concrete instance of `ScheduleEntriesInput` via:
//
//          ScheduleEntriesArgs{...}
type ScheduleEntriesInput interface {
	pulumi.Input

	ToScheduleEntriesOutput() ScheduleEntriesOutput
	ToScheduleEntriesOutputWithContext(context.Context) ScheduleEntriesOutput
}

// List of patch schedules for a Redis cache.
type ScheduleEntriesArgs struct {
	// List of patch schedules for a Redis cache.
	ScheduleEntries ScheduleEntryArrayInput `pulumi:"scheduleEntries"`
}

func (ScheduleEntriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleEntries)(nil)).Elem()
}

func (i ScheduleEntriesArgs) ToScheduleEntriesOutput() ScheduleEntriesOutput {
	return i.ToScheduleEntriesOutputWithContext(context.Background())
}

func (i ScheduleEntriesArgs) ToScheduleEntriesOutputWithContext(ctx context.Context) ScheduleEntriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleEntriesOutput)
}

func (i ScheduleEntriesArgs) ToScheduleEntriesPtrOutput() ScheduleEntriesPtrOutput {
	return i.ToScheduleEntriesPtrOutputWithContext(context.Background())
}

func (i ScheduleEntriesArgs) ToScheduleEntriesPtrOutputWithContext(ctx context.Context) ScheduleEntriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleEntriesOutput).ToScheduleEntriesPtrOutputWithContext(ctx)
}

// ScheduleEntriesPtrInput is an input type that accepts ScheduleEntriesArgs, ScheduleEntriesPtr and ScheduleEntriesPtrOutput values.
// You can construct a concrete instance of `ScheduleEntriesPtrInput` via:
//
//          ScheduleEntriesArgs{...}
//
//  or:
//
//          nil
type ScheduleEntriesPtrInput interface {
	pulumi.Input

	ToScheduleEntriesPtrOutput() ScheduleEntriesPtrOutput
	ToScheduleEntriesPtrOutputWithContext(context.Context) ScheduleEntriesPtrOutput
}

type scheduleEntriesPtrType ScheduleEntriesArgs

func ScheduleEntriesPtr(v *ScheduleEntriesArgs) ScheduleEntriesPtrInput {
	return (*scheduleEntriesPtrType)(v)
}

func (*scheduleEntriesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleEntries)(nil)).Elem()
}

func (i *scheduleEntriesPtrType) ToScheduleEntriesPtrOutput() ScheduleEntriesPtrOutput {
	return i.ToScheduleEntriesPtrOutputWithContext(context.Background())
}

func (i *scheduleEntriesPtrType) ToScheduleEntriesPtrOutputWithContext(ctx context.Context) ScheduleEntriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleEntriesPtrOutput)
}

// List of patch schedules for a Redis cache.
type ScheduleEntriesOutput struct{ *pulumi.OutputState }

func (ScheduleEntriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleEntries)(nil)).Elem()
}

func (o ScheduleEntriesOutput) ToScheduleEntriesOutput() ScheduleEntriesOutput {
	return o
}

func (o ScheduleEntriesOutput) ToScheduleEntriesOutputWithContext(ctx context.Context) ScheduleEntriesOutput {
	return o
}

func (o ScheduleEntriesOutput) ToScheduleEntriesPtrOutput() ScheduleEntriesPtrOutput {
	return o.ToScheduleEntriesPtrOutputWithContext(context.Background())
}

func (o ScheduleEntriesOutput) ToScheduleEntriesPtrOutputWithContext(ctx context.Context) ScheduleEntriesPtrOutput {
	return o.ApplyT(func(v ScheduleEntries) *ScheduleEntries {
		return &v
	}).(ScheduleEntriesPtrOutput)
}

// List of patch schedules for a Redis cache.
func (o ScheduleEntriesOutput) ScheduleEntries() ScheduleEntryArrayOutput {
	return o.ApplyT(func(v ScheduleEntries) []ScheduleEntry { return v.ScheduleEntries }).(ScheduleEntryArrayOutput)
}

type ScheduleEntriesPtrOutput struct{ *pulumi.OutputState }

func (ScheduleEntriesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleEntries)(nil)).Elem()
}

func (o ScheduleEntriesPtrOutput) ToScheduleEntriesPtrOutput() ScheduleEntriesPtrOutput {
	return o
}

func (o ScheduleEntriesPtrOutput) ToScheduleEntriesPtrOutputWithContext(ctx context.Context) ScheduleEntriesPtrOutput {
	return o
}

func (o ScheduleEntriesPtrOutput) Elem() ScheduleEntriesOutput {
	return o.ApplyT(func(v *ScheduleEntries) ScheduleEntries { return *v }).(ScheduleEntriesOutput)
}

// List of patch schedules for a Redis cache.
func (o ScheduleEntriesPtrOutput) ScheduleEntries() ScheduleEntryArrayOutput {
	return o.ApplyT(func(v *ScheduleEntries) []ScheduleEntry {
		if v == nil {
			return nil
		}
		return v.ScheduleEntries
	}).(ScheduleEntryArrayOutput)
}

// List of patch schedules for a Redis cache.
type ScheduleEntriesResponse struct {
	// List of patch schedules for a Redis cache.
	ScheduleEntries []ScheduleEntryResponse `pulumi:"scheduleEntries"`
}

// ScheduleEntriesResponseInput is an input type that accepts ScheduleEntriesResponseArgs and ScheduleEntriesResponseOutput values.
// You can construct a concrete instance of `ScheduleEntriesResponseInput` via:
//
//          ScheduleEntriesResponseArgs{...}
type ScheduleEntriesResponseInput interface {
	pulumi.Input

	ToScheduleEntriesResponseOutput() ScheduleEntriesResponseOutput
	ToScheduleEntriesResponseOutputWithContext(context.Context) ScheduleEntriesResponseOutput
}

// List of patch schedules for a Redis cache.
type ScheduleEntriesResponseArgs struct {
	// List of patch schedules for a Redis cache.
	ScheduleEntries ScheduleEntryResponseArrayInput `pulumi:"scheduleEntries"`
}

func (ScheduleEntriesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleEntriesResponse)(nil)).Elem()
}

func (i ScheduleEntriesResponseArgs) ToScheduleEntriesResponseOutput() ScheduleEntriesResponseOutput {
	return i.ToScheduleEntriesResponseOutputWithContext(context.Background())
}

func (i ScheduleEntriesResponseArgs) ToScheduleEntriesResponseOutputWithContext(ctx context.Context) ScheduleEntriesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleEntriesResponseOutput)
}

func (i ScheduleEntriesResponseArgs) ToScheduleEntriesResponsePtrOutput() ScheduleEntriesResponsePtrOutput {
	return i.ToScheduleEntriesResponsePtrOutputWithContext(context.Background())
}

func (i ScheduleEntriesResponseArgs) ToScheduleEntriesResponsePtrOutputWithContext(ctx context.Context) ScheduleEntriesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleEntriesResponseOutput).ToScheduleEntriesResponsePtrOutputWithContext(ctx)
}

// ScheduleEntriesResponsePtrInput is an input type that accepts ScheduleEntriesResponseArgs, ScheduleEntriesResponsePtr and ScheduleEntriesResponsePtrOutput values.
// You can construct a concrete instance of `ScheduleEntriesResponsePtrInput` via:
//
//          ScheduleEntriesResponseArgs{...}
//
//  or:
//
//          nil
type ScheduleEntriesResponsePtrInput interface {
	pulumi.Input

	ToScheduleEntriesResponsePtrOutput() ScheduleEntriesResponsePtrOutput
	ToScheduleEntriesResponsePtrOutputWithContext(context.Context) ScheduleEntriesResponsePtrOutput
}

type scheduleEntriesResponsePtrType ScheduleEntriesResponseArgs

func ScheduleEntriesResponsePtr(v *ScheduleEntriesResponseArgs) ScheduleEntriesResponsePtrInput {
	return (*scheduleEntriesResponsePtrType)(v)
}

func (*scheduleEntriesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleEntriesResponse)(nil)).Elem()
}

func (i *scheduleEntriesResponsePtrType) ToScheduleEntriesResponsePtrOutput() ScheduleEntriesResponsePtrOutput {
	return i.ToScheduleEntriesResponsePtrOutputWithContext(context.Background())
}

func (i *scheduleEntriesResponsePtrType) ToScheduleEntriesResponsePtrOutputWithContext(ctx context.Context) ScheduleEntriesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleEntriesResponsePtrOutput)
}

// List of patch schedules for a Redis cache.
type ScheduleEntriesResponseOutput struct{ *pulumi.OutputState }

func (ScheduleEntriesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleEntriesResponse)(nil)).Elem()
}

func (o ScheduleEntriesResponseOutput) ToScheduleEntriesResponseOutput() ScheduleEntriesResponseOutput {
	return o
}

func (o ScheduleEntriesResponseOutput) ToScheduleEntriesResponseOutputWithContext(ctx context.Context) ScheduleEntriesResponseOutput {
	return o
}

func (o ScheduleEntriesResponseOutput) ToScheduleEntriesResponsePtrOutput() ScheduleEntriesResponsePtrOutput {
	return o.ToScheduleEntriesResponsePtrOutputWithContext(context.Background())
}

func (o ScheduleEntriesResponseOutput) ToScheduleEntriesResponsePtrOutputWithContext(ctx context.Context) ScheduleEntriesResponsePtrOutput {
	return o.ApplyT(func(v ScheduleEntriesResponse) *ScheduleEntriesResponse {
		return &v
	}).(ScheduleEntriesResponsePtrOutput)
}

// List of patch schedules for a Redis cache.
func (o ScheduleEntriesResponseOutput) ScheduleEntries() ScheduleEntryResponseArrayOutput {
	return o.ApplyT(func(v ScheduleEntriesResponse) []ScheduleEntryResponse { return v.ScheduleEntries }).(ScheduleEntryResponseArrayOutput)
}

type ScheduleEntriesResponsePtrOutput struct{ *pulumi.OutputState }

func (ScheduleEntriesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleEntriesResponse)(nil)).Elem()
}

func (o ScheduleEntriesResponsePtrOutput) ToScheduleEntriesResponsePtrOutput() ScheduleEntriesResponsePtrOutput {
	return o
}

func (o ScheduleEntriesResponsePtrOutput) ToScheduleEntriesResponsePtrOutputWithContext(ctx context.Context) ScheduleEntriesResponsePtrOutput {
	return o
}

func (o ScheduleEntriesResponsePtrOutput) Elem() ScheduleEntriesResponseOutput {
	return o.ApplyT(func(v *ScheduleEntriesResponse) ScheduleEntriesResponse { return *v }).(ScheduleEntriesResponseOutput)
}

// List of patch schedules for a Redis cache.
func (o ScheduleEntriesResponsePtrOutput) ScheduleEntries() ScheduleEntryResponseArrayOutput {
	return o.ApplyT(func(v *ScheduleEntriesResponse) []ScheduleEntryResponse {
		if v == nil {
			return nil
		}
		return v.ScheduleEntries
	}).(ScheduleEntryResponseArrayOutput)
}

// Patch schedule entry for a Premium Redis Cache.
type ScheduleEntry struct {
	// Day of the week when a cache can be patched.
	DayOfWeek string `pulumi:"dayOfWeek"`
	// ISO8601 timespan specifying how much time cache patching can take.
	MaintenanceWindow *string `pulumi:"maintenanceWindow"`
	// Start hour after which cache patching can start.
	StartHourUtc int `pulumi:"startHourUtc"`
}

// ScheduleEntryInput is an input type that accepts ScheduleEntryArgs and ScheduleEntryOutput values.
// You can construct a concrete instance of `ScheduleEntryInput` via:
//
//          ScheduleEntryArgs{...}
type ScheduleEntryInput interface {
	pulumi.Input

	ToScheduleEntryOutput() ScheduleEntryOutput
	ToScheduleEntryOutputWithContext(context.Context) ScheduleEntryOutput
}

// Patch schedule entry for a Premium Redis Cache.
type ScheduleEntryArgs struct {
	// Day of the week when a cache can be patched.
	DayOfWeek pulumi.StringInput `pulumi:"dayOfWeek"`
	// ISO8601 timespan specifying how much time cache patching can take.
	MaintenanceWindow pulumi.StringPtrInput `pulumi:"maintenanceWindow"`
	// Start hour after which cache patching can start.
	StartHourUtc pulumi.IntInput `pulumi:"startHourUtc"`
}

func (ScheduleEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleEntry)(nil)).Elem()
}

func (i ScheduleEntryArgs) ToScheduleEntryOutput() ScheduleEntryOutput {
	return i.ToScheduleEntryOutputWithContext(context.Background())
}

func (i ScheduleEntryArgs) ToScheduleEntryOutputWithContext(ctx context.Context) ScheduleEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleEntryOutput)
}

// ScheduleEntryArrayInput is an input type that accepts ScheduleEntryArray and ScheduleEntryArrayOutput values.
// You can construct a concrete instance of `ScheduleEntryArrayInput` via:
//
//          ScheduleEntryArray{ ScheduleEntryArgs{...} }
type ScheduleEntryArrayInput interface {
	pulumi.Input

	ToScheduleEntryArrayOutput() ScheduleEntryArrayOutput
	ToScheduleEntryArrayOutputWithContext(context.Context) ScheduleEntryArrayOutput
}

type ScheduleEntryArray []ScheduleEntryInput

func (ScheduleEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleEntry)(nil)).Elem()
}

func (i ScheduleEntryArray) ToScheduleEntryArrayOutput() ScheduleEntryArrayOutput {
	return i.ToScheduleEntryArrayOutputWithContext(context.Background())
}

func (i ScheduleEntryArray) ToScheduleEntryArrayOutputWithContext(ctx context.Context) ScheduleEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleEntryArrayOutput)
}

// Patch schedule entry for a Premium Redis Cache.
type ScheduleEntryOutput struct{ *pulumi.OutputState }

func (ScheduleEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleEntry)(nil)).Elem()
}

func (o ScheduleEntryOutput) ToScheduleEntryOutput() ScheduleEntryOutput {
	return o
}

func (o ScheduleEntryOutput) ToScheduleEntryOutputWithContext(ctx context.Context) ScheduleEntryOutput {
	return o
}

// Day of the week when a cache can be patched.
func (o ScheduleEntryOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleEntry) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// ISO8601 timespan specifying how much time cache patching can take.
func (o ScheduleEntryOutput) MaintenanceWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleEntry) *string { return v.MaintenanceWindow }).(pulumi.StringPtrOutput)
}

// Start hour after which cache patching can start.
func (o ScheduleEntryOutput) StartHourUtc() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleEntry) int { return v.StartHourUtc }).(pulumi.IntOutput)
}

type ScheduleEntryArrayOutput struct{ *pulumi.OutputState }

func (ScheduleEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleEntry)(nil)).Elem()
}

func (o ScheduleEntryArrayOutput) ToScheduleEntryArrayOutput() ScheduleEntryArrayOutput {
	return o
}

func (o ScheduleEntryArrayOutput) ToScheduleEntryArrayOutputWithContext(ctx context.Context) ScheduleEntryArrayOutput {
	return o
}

func (o ScheduleEntryArrayOutput) Index(i pulumi.IntInput) ScheduleEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleEntry {
		return vs[0].([]ScheduleEntry)[vs[1].(int)]
	}).(ScheduleEntryOutput)
}

// Patch schedule entry for a Premium Redis Cache.
type ScheduleEntryResponse struct {
	// Day of the week when a cache can be patched.
	DayOfWeek string `pulumi:"dayOfWeek"`
	// ISO8601 timespan specifying how much time cache patching can take.
	MaintenanceWindow *string `pulumi:"maintenanceWindow"`
	// Start hour after which cache patching can start.
	StartHourUtc int `pulumi:"startHourUtc"`
}

// ScheduleEntryResponseInput is an input type that accepts ScheduleEntryResponseArgs and ScheduleEntryResponseOutput values.
// You can construct a concrete instance of `ScheduleEntryResponseInput` via:
//
//          ScheduleEntryResponseArgs{...}
type ScheduleEntryResponseInput interface {
	pulumi.Input

	ToScheduleEntryResponseOutput() ScheduleEntryResponseOutput
	ToScheduleEntryResponseOutputWithContext(context.Context) ScheduleEntryResponseOutput
}

// Patch schedule entry for a Premium Redis Cache.
type ScheduleEntryResponseArgs struct {
	// Day of the week when a cache can be patched.
	DayOfWeek pulumi.StringInput `pulumi:"dayOfWeek"`
	// ISO8601 timespan specifying how much time cache patching can take.
	MaintenanceWindow pulumi.StringPtrInput `pulumi:"maintenanceWindow"`
	// Start hour after which cache patching can start.
	StartHourUtc pulumi.IntInput `pulumi:"startHourUtc"`
}

func (ScheduleEntryResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleEntryResponse)(nil)).Elem()
}

func (i ScheduleEntryResponseArgs) ToScheduleEntryResponseOutput() ScheduleEntryResponseOutput {
	return i.ToScheduleEntryResponseOutputWithContext(context.Background())
}

func (i ScheduleEntryResponseArgs) ToScheduleEntryResponseOutputWithContext(ctx context.Context) ScheduleEntryResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleEntryResponseOutput)
}

// ScheduleEntryResponseArrayInput is an input type that accepts ScheduleEntryResponseArray and ScheduleEntryResponseArrayOutput values.
// You can construct a concrete instance of `ScheduleEntryResponseArrayInput` via:
//
//          ScheduleEntryResponseArray{ ScheduleEntryResponseArgs{...} }
type ScheduleEntryResponseArrayInput interface {
	pulumi.Input

	ToScheduleEntryResponseArrayOutput() ScheduleEntryResponseArrayOutput
	ToScheduleEntryResponseArrayOutputWithContext(context.Context) ScheduleEntryResponseArrayOutput
}

type ScheduleEntryResponseArray []ScheduleEntryResponseInput

func (ScheduleEntryResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleEntryResponse)(nil)).Elem()
}

func (i ScheduleEntryResponseArray) ToScheduleEntryResponseArrayOutput() ScheduleEntryResponseArrayOutput {
	return i.ToScheduleEntryResponseArrayOutputWithContext(context.Background())
}

func (i ScheduleEntryResponseArray) ToScheduleEntryResponseArrayOutputWithContext(ctx context.Context) ScheduleEntryResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleEntryResponseArrayOutput)
}

// Patch schedule entry for a Premium Redis Cache.
type ScheduleEntryResponseOutput struct{ *pulumi.OutputState }

func (ScheduleEntryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleEntryResponse)(nil)).Elem()
}

func (o ScheduleEntryResponseOutput) ToScheduleEntryResponseOutput() ScheduleEntryResponseOutput {
	return o
}

func (o ScheduleEntryResponseOutput) ToScheduleEntryResponseOutputWithContext(ctx context.Context) ScheduleEntryResponseOutput {
	return o
}

// Day of the week when a cache can be patched.
func (o ScheduleEntryResponseOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleEntryResponse) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// ISO8601 timespan specifying how much time cache patching can take.
func (o ScheduleEntryResponseOutput) MaintenanceWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleEntryResponse) *string { return v.MaintenanceWindow }).(pulumi.StringPtrOutput)
}

// Start hour after which cache patching can start.
func (o ScheduleEntryResponseOutput) StartHourUtc() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleEntryResponse) int { return v.StartHourUtc }).(pulumi.IntOutput)
}

type ScheduleEntryResponseArrayOutput struct{ *pulumi.OutputState }

func (ScheduleEntryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleEntryResponse)(nil)).Elem()
}

func (o ScheduleEntryResponseArrayOutput) ToScheduleEntryResponseArrayOutput() ScheduleEntryResponseArrayOutput {
	return o
}

func (o ScheduleEntryResponseArrayOutput) ToScheduleEntryResponseArrayOutputWithContext(ctx context.Context) ScheduleEntryResponseArrayOutput {
	return o
}

func (o ScheduleEntryResponseArrayOutput) Index(i pulumi.IntInput) ScheduleEntryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleEntryResponse {
		return vs[0].([]ScheduleEntryResponse)[vs[1].(int)]
	}).(ScheduleEntryResponseOutput)
}

// SKU parameters supplied to the create Redis operation.
type Sku struct {
	// The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).
	Capacity int `pulumi:"capacity"`
	// The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
	Family string `pulumi:"family"`
	// The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
	Name string `pulumi:"name"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//          SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// SKU parameters supplied to the create Redis operation.
type SkuArgs struct {
	// The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).
	Capacity pulumi.IntInput `pulumi:"capacity"`
	// The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
	Family pulumi.StringInput `pulumi:"family"`
	// The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
	Name pulumi.StringInput `pulumi:"name"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//          SkuArgs{...}
//
//  or:
//
//          nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// SKU parameters supplied to the create Redis operation.
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyT(func(v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).
func (o SkuOutput) Capacity() pulumi.IntOutput {
	return o.ApplyT(func(v Sku) int { return v.Capacity }).(pulumi.IntOutput)
}

// The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
func (o SkuOutput) Family() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Family }).(pulumi.StringOutput)
}

// The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
func (o SkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Name }).(pulumi.StringOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku { return *v }).(SkuOutput)
}

// The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).
func (o SkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Sku) *int {
		if v == nil {
			return nil
		}
		return &v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
func (o SkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Family
	}).(pulumi.StringPtrOutput)
}

// The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// SKU parameters supplied to the create Redis operation.
type SkuResponse struct {
	// The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).
	Capacity int `pulumi:"capacity"`
	// The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
	Family string `pulumi:"family"`
	// The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
	Name string `pulumi:"name"`
}

// SkuResponseInput is an input type that accepts SkuResponseArgs and SkuResponseOutput values.
// You can construct a concrete instance of `SkuResponseInput` via:
//
//          SkuResponseArgs{...}
type SkuResponseInput interface {
	pulumi.Input

	ToSkuResponseOutput() SkuResponseOutput
	ToSkuResponseOutputWithContext(context.Context) SkuResponseOutput
}

// SKU parameters supplied to the create Redis operation.
type SkuResponseArgs struct {
	// The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).
	Capacity pulumi.IntInput `pulumi:"capacity"`
	// The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
	Family pulumi.StringInput `pulumi:"family"`
	// The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
	Name pulumi.StringInput `pulumi:"name"`
}

func (SkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (i SkuResponseArgs) ToSkuResponseOutput() SkuResponseOutput {
	return i.ToSkuResponseOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput)
}

func (i SkuResponseArgs) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i SkuResponseArgs) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponseOutput).ToSkuResponsePtrOutputWithContext(ctx)
}

// SkuResponsePtrInput is an input type that accepts SkuResponseArgs, SkuResponsePtr and SkuResponsePtrOutput values.
// You can construct a concrete instance of `SkuResponsePtrInput` via:
//
//          SkuResponseArgs{...}
//
//  or:
//
//          nil
type SkuResponsePtrInput interface {
	pulumi.Input

	ToSkuResponsePtrOutput() SkuResponsePtrOutput
	ToSkuResponsePtrOutputWithContext(context.Context) SkuResponsePtrOutput
}

type skuResponsePtrType SkuResponseArgs

func SkuResponsePtr(v *SkuResponseArgs) SkuResponsePtrInput {
	return (*skuResponsePtrType)(v)
}

func (*skuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return i.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (i *skuResponsePtrType) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuResponsePtrOutput)
}

// SKU parameters supplied to the create Redis operation.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o.ToSkuResponsePtrOutputWithContext(context.Background())
}

func (o SkuResponseOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o.ApplyT(func(v SkuResponse) *SkuResponse {
		return &v
	}).(SkuResponsePtrOutput)
}

// The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).
func (o SkuResponseOutput) Capacity() pulumi.IntOutput {
	return o.ApplyT(func(v SkuResponse) int { return v.Capacity }).(pulumi.IntOutput)
}

// The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
func (o SkuResponseOutput) Family() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Family }).(pulumi.StringOutput)
}

// The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse { return *v }).(SkuResponseOutput)
}

// The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).
func (o SkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
func (o SkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Family
	}).(pulumi.StringPtrOutput)
}

// The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(RedisTypeOutput{})
	pulumi.RegisterOutputType(RedisAccessKeysResponseOutput{})
	pulumi.RegisterOutputType(RedisAccessKeysResponsePtrOutput{})
	pulumi.RegisterOutputType(RedisCreatePropertiesOutput{})
	pulumi.RegisterOutputType(RedisCreatePropertiesPtrOutput{})
	pulumi.RegisterOutputType(RedisFirewallRuleTypeOutput{})
	pulumi.RegisterOutputType(RedisFirewallRulePropertiesOutput{})
	pulumi.RegisterOutputType(RedisFirewallRulePropertiesPtrOutput{})
	pulumi.RegisterOutputType(RedisFirewallRulePropertiesResponseOutput{})
	pulumi.RegisterOutputType(RedisFirewallRulePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(RedisLinkedServerTypeOutput{})
	pulumi.RegisterOutputType(RedisLinkedServerCreatePropertiesOutput{})
	pulumi.RegisterOutputType(RedisLinkedServerCreatePropertiesPtrOutput{})
	pulumi.RegisterOutputType(RedisLinkedServerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(RedisLinkedServerPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(RedisLinkedServerResponseOutput{})
	pulumi.RegisterOutputType(RedisLinkedServerResponseArrayOutput{})
	pulumi.RegisterOutputType(RedisPatchScheduleTypeOutput{})
	pulumi.RegisterOutputType(RedisPropertiesResponseOutput{})
	pulumi.RegisterOutputType(RedisPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ScheduleEntriesOutput{})
	pulumi.RegisterOutputType(ScheduleEntriesPtrOutput{})
	pulumi.RegisterOutputType(ScheduleEntriesResponseOutput{})
	pulumi.RegisterOutputType(ScheduleEntriesResponsePtrOutput{})
	pulumi.RegisterOutputType(ScheduleEntryOutput{})
	pulumi.RegisterOutputType(ScheduleEntryArrayOutput{})
	pulumi.RegisterOutputType(ScheduleEntryResponseOutput{})
	pulumi.RegisterOutputType(ScheduleEntryResponseArrayOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
}
