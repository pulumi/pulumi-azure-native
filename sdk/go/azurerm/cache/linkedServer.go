// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cache

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Response to put/get linked server (with properties) for Redis cache.
type LinkedServer struct {
	pulumi.CustomResourceState

	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties of the linked server.
	Properties RedisLinkedServerPropertiesResponseOutput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewLinkedServer registers a new resource with the given unique name, arguments, and options.
func NewLinkedServer(ctx *pulumi.Context,
	name string, args *LinkedServerArgs, opts ...pulumi.ResourceOption) (*LinkedServer, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.Properties == nil {
		return nil, errors.New("missing required argument 'Properties'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &LinkedServerArgs{}
	}
	var resource LinkedServer
	err := ctx.RegisterResource("azurerm:cache:LinkedServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkedServer gets an existing LinkedServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkedServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkedServerState, opts ...pulumi.ResourceOption) (*LinkedServer, error) {
	var resource LinkedServer
	err := ctx.ReadResource("azurerm:cache:LinkedServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinkedServer resources.
type linkedServerState struct {
	// Resource name.
	Name *string `pulumi:"name"`
	// Properties of the linked server.
	Properties *RedisLinkedServerPropertiesResponse `pulumi:"properties"`
	// Resource type.
	Type *string `pulumi:"type"`
}

type LinkedServerState struct {
	// Resource name.
	Name pulumi.StringPtrInput
	// Properties of the linked server.
	Properties RedisLinkedServerPropertiesResponsePtrInput
	// Resource type.
	Type pulumi.StringPtrInput
}

func (LinkedServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServerState)(nil)).Elem()
}

type linkedServerArgs struct {
	// The name of the linked server that is being added to the Redis cache.
	Name string `pulumi:"name"`
	// Properties required to create a linked server.
	Properties RedisLinkedServerCreateProperties `pulumi:"properties"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a LinkedServer resource.
type LinkedServerArgs struct {
	// The name of the linked server that is being added to the Redis cache.
	Name pulumi.StringInput
	// Properties required to create a linked server.
	Properties RedisLinkedServerCreatePropertiesInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
}

func (LinkedServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServerArgs)(nil)).Elem()
}
