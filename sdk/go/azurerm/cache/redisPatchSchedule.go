// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cache

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Response to put/get patch schedules for Redis cache.
type RedisPatchSchedule struct {
	pulumi.CustomResourceState

	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of patch schedules for a Redis cache.
	Properties ScheduleEntriesResponseOutput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewRedisPatchSchedule registers a new resource with the given unique name, arguments, and options.
func NewRedisPatchSchedule(ctx *pulumi.Context,
	name string, args *RedisPatchScheduleArgs, opts ...pulumi.ResourceOption) (*RedisPatchSchedule, error) {
	if args == nil || args.Default == nil {
		return nil, errors.New("missing required argument 'Default'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.Properties == nil {
		return nil, errors.New("missing required argument 'Properties'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &RedisPatchScheduleArgs{}
	}
	var resource RedisPatchSchedule
	err := ctx.RegisterResource("azurerm:cache:RedisPatchSchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRedisPatchSchedule gets an existing RedisPatchSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRedisPatchSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RedisPatchScheduleState, opts ...pulumi.ResourceOption) (*RedisPatchSchedule, error) {
	var resource RedisPatchSchedule
	err := ctx.ReadResource("azurerm:cache:RedisPatchSchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RedisPatchSchedule resources.
type redisPatchScheduleState struct {
	// Resource name.
	Name *string `pulumi:"name"`
	// List of patch schedules for a Redis cache.
	Properties *ScheduleEntriesResponse `pulumi:"properties"`
	// Resource type.
	Type *string `pulumi:"type"`
}

type RedisPatchScheduleState struct {
	// Resource name.
	Name pulumi.StringPtrInput
	// List of patch schedules for a Redis cache.
	Properties ScheduleEntriesResponsePtrInput
	// Resource type.
	Type pulumi.StringPtrInput
}

func (RedisPatchScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*redisPatchScheduleState)(nil)).Elem()
}

type redisPatchScheduleArgs struct {
	// Default string modeled as parameter for auto generation to work correctly.
	Default string `pulumi:"default"`
	// The name of the Redis cache.
	Name string `pulumi:"name"`
	// List of patch schedules for a Redis cache.
	Properties ScheduleEntries `pulumi:"properties"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a RedisPatchSchedule resource.
type RedisPatchScheduleArgs struct {
	// Default string modeled as parameter for auto generation to work correctly.
	Default pulumi.StringInput
	// The name of the Redis cache.
	Name pulumi.StringInput
	// List of patch schedules for a Redis cache.
	Properties ScheduleEntriesInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
}

func (RedisPatchScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*redisPatchScheduleArgs)(nil)).Elem()
}
