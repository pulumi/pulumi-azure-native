// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cache

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A firewall rule on a redis cache has a name, and describes a contiguous range of IP addresses permitted to connect
type RedisFirewallRule struct {
	pulumi.CustomResourceState

	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// redis cache firewall rule properties
	Properties RedisFirewallRulePropertiesResponseOutput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewRedisFirewallRule registers a new resource with the given unique name, arguments, and options.
func NewRedisFirewallRule(ctx *pulumi.Context,
	name string, args *RedisFirewallRuleArgs, opts ...pulumi.ResourceOption) (*RedisFirewallRule, error) {
	if args == nil || args.CacheName == nil {
		return nil, errors.New("missing required argument 'CacheName'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.Properties == nil {
		return nil, errors.New("missing required argument 'Properties'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &RedisFirewallRuleArgs{}
	}
	var resource RedisFirewallRule
	err := ctx.RegisterResource("azurerm:cache:RedisFirewallRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRedisFirewallRule gets an existing RedisFirewallRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRedisFirewallRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RedisFirewallRuleState, opts ...pulumi.ResourceOption) (*RedisFirewallRule, error) {
	var resource RedisFirewallRule
	err := ctx.ReadResource("azurerm:cache:RedisFirewallRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RedisFirewallRule resources.
type redisFirewallRuleState struct {
	// Resource name.
	Name *string `pulumi:"name"`
	// redis cache firewall rule properties
	Properties *RedisFirewallRulePropertiesResponse `pulumi:"properties"`
	// Resource type.
	Type *string `pulumi:"type"`
}

type RedisFirewallRuleState struct {
	// Resource name.
	Name pulumi.StringPtrInput
	// redis cache firewall rule properties
	Properties RedisFirewallRulePropertiesResponsePtrInput
	// Resource type.
	Type pulumi.StringPtrInput
}

func (RedisFirewallRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*redisFirewallRuleState)(nil)).Elem()
}

type redisFirewallRuleArgs struct {
	// The name of the Redis cache.
	CacheName string `pulumi:"cacheName"`
	// The name of the firewall rule.
	Name string `pulumi:"name"`
	// Properties required to create a firewall rule .
	Properties RedisFirewallRuleProperties `pulumi:"properties"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a RedisFirewallRule resource.
type RedisFirewallRuleArgs struct {
	// The name of the Redis cache.
	CacheName pulumi.StringInput
	// The name of the firewall rule.
	Name pulumi.StringInput
	// Properties required to create a firewall rule .
	Properties RedisFirewallRulePropertiesInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
}

func (RedisFirewallRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*redisFirewallRuleArgs)(nil)).Elem()
}
