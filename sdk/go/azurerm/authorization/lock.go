// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package authorization

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The lock information.
type Lock struct {
	pulumi.CustomResourceState

	// The name of the lock.
	Name pulumi.StringOutput `pulumi:"name"`
	// The properties of the lock.
	Properties ManagementLockPropertiesResponseOutput `pulumi:"properties"`
	// The resource type of the lock - Microsoft.Authorization/locks.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewLock registers a new resource with the given unique name, arguments, and options.
func NewLock(ctx *pulumi.Context,
	name string, args *LockArgs, opts ...pulumi.ResourceOption) (*Lock, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.Properties == nil {
		return nil, errors.New("missing required argument 'Properties'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &LockArgs{}
	}
	var resource Lock
	err := ctx.RegisterResource("azurerm:authorization:Lock", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLock gets an existing Lock resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLock(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LockState, opts ...pulumi.ResourceOption) (*Lock, error) {
	var resource Lock
	err := ctx.ReadResource("azurerm:authorization:Lock", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Lock resources.
type lockState struct {
	// The name of the lock.
	Name *string `pulumi:"name"`
	// The properties of the lock.
	Properties *ManagementLockPropertiesResponse `pulumi:"properties"`
	// The resource type of the lock - Microsoft.Authorization/locks.
	Type *string `pulumi:"type"`
}

type LockState struct {
	// The name of the lock.
	Name pulumi.StringPtrInput
	// The properties of the lock.
	Properties ManagementLockPropertiesResponsePtrInput
	// The resource type of the lock - Microsoft.Authorization/locks.
	Type pulumi.StringPtrInput
}

func (LockState) ElementType() reflect.Type {
	return reflect.TypeOf((*lockState)(nil)).Elem()
}

type lockArgs struct {
	// The lock name. The lock name can be a maximum of 260 characters. It cannot contain <, > %, &, :, \, ?, /, or any control characters.
	Name string `pulumi:"name"`
	// The properties of the lock.
	Properties ManagementLockProperties `pulumi:"properties"`
	// The name of the resource group to lock.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Lock resource.
type LockArgs struct {
	// The lock name. The lock name can be a maximum of 260 characters. It cannot contain <, > %, &, :, \, ?, /, or any control characters.
	Name pulumi.StringInput
	// The properties of the lock.
	Properties ManagementLockPropertiesInput
	// The name of the resource group to lock.
	ResourceGroupName pulumi.StringInput
}

func (LockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lockArgs)(nil)).Elem()
}
