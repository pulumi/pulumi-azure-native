// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20161201

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The policy assignment.
type PolicyAssignment struct {
	pulumi.CustomResourceState

	// The name of the policy assignment.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Properties for the policy assignment.
	Properties PolicyAssignmentPropertiesResponseOutput `pulumi:"properties"`
	// The type of the policy assignment.
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewPolicyAssignment registers a new resource with the given unique name, arguments, and options.
func NewPolicyAssignment(ctx *pulumi.Context,
	name string, args *PolicyAssignmentArgs, opts ...pulumi.ResourceOption) (*PolicyAssignment, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.Scope == nil {
		return nil, errors.New("missing required argument 'Scope'")
	}
	if args == nil {
		args = &PolicyAssignmentArgs{}
	}
	var resource PolicyAssignment
	err := ctx.RegisterResource("azurerm:authorization/v20161201:PolicyAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyAssignment gets an existing PolicyAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyAssignmentState, opts ...pulumi.ResourceOption) (*PolicyAssignment, error) {
	var resource PolicyAssignment
	err := ctx.ReadResource("azurerm:authorization/v20161201:PolicyAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyAssignment resources.
type policyAssignmentState struct {
	// The name of the policy assignment.
	Name *string `pulumi:"name"`
	// Properties for the policy assignment.
	Properties *PolicyAssignmentPropertiesResponse `pulumi:"properties"`
	// The type of the policy assignment.
	Type *string `pulumi:"type"`
}

type PolicyAssignmentState struct {
	// The name of the policy assignment.
	Name pulumi.StringPtrInput
	// Properties for the policy assignment.
	Properties PolicyAssignmentPropertiesResponsePtrInput
	// The type of the policy assignment.
	Type pulumi.StringPtrInput
}

func (PolicyAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyAssignmentState)(nil)).Elem()
}

type policyAssignmentArgs struct {
	// This message will be part of response in case of policy violation.
	Description *string `pulumi:"description"`
	// The display name of the policy assignment.
	DisplayName *string `pulumi:"displayName"`
	// The name of the policy assignment.
	Name string `pulumi:"name"`
	// Required if a parameter is used in policy rule.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// The ID of the policy definition.
	PolicyDefinitionId *string `pulumi:"policyDefinitionId"`
	// The scope for the policy assignment.
	Scope string `pulumi:"scope"`
	// The type of the policy assignment.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a PolicyAssignment resource.
type PolicyAssignmentArgs struct {
	// This message will be part of response in case of policy violation.
	Description pulumi.StringPtrInput
	// The display name of the policy assignment.
	DisplayName pulumi.StringPtrInput
	// The name of the policy assignment.
	Name pulumi.StringInput
	// Required if a parameter is used in policy rule.
	Parameters pulumi.MapInput
	// The ID of the policy definition.
	PolicyDefinitionId pulumi.StringPtrInput
	// The scope for the policy assignment.
	Scope pulumi.StringInput
	// The type of the policy assignment.
	Type pulumi.StringPtrInput
}

func (PolicyAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyAssignmentArgs)(nil)).Elem()
}
