// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20161201

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The policy assignment.
type PolicyAssignmentType struct {
	// The name of the policy assignment.
	Name *string `pulumi:"name"`
	// Properties for the policy assignment.
	Properties PolicyAssignmentPropertiesResponse `pulumi:"properties"`
	// The type of the policy assignment.
	Type *string `pulumi:"type"`
}

// PolicyAssignmentTypeInput is an input type that accepts PolicyAssignmentTypeArgs and PolicyAssignmentTypeOutput values.
// You can construct a concrete instance of `PolicyAssignmentTypeInput` via:
//
//          PolicyAssignmentTypeArgs{...}
type PolicyAssignmentTypeInput interface {
	pulumi.Input

	ToPolicyAssignmentTypeOutput() PolicyAssignmentTypeOutput
	ToPolicyAssignmentTypeOutputWithContext(context.Context) PolicyAssignmentTypeOutput
}

// The policy assignment.
type PolicyAssignmentTypeArgs struct {
	// The name of the policy assignment.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Properties for the policy assignment.
	Properties PolicyAssignmentPropertiesResponseInput `pulumi:"properties"`
	// The type of the policy assignment.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PolicyAssignmentTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAssignmentType)(nil)).Elem()
}

func (i PolicyAssignmentTypeArgs) ToPolicyAssignmentTypeOutput() PolicyAssignmentTypeOutput {
	return i.ToPolicyAssignmentTypeOutputWithContext(context.Background())
}

func (i PolicyAssignmentTypeArgs) ToPolicyAssignmentTypeOutputWithContext(ctx context.Context) PolicyAssignmentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAssignmentTypeOutput)
}

// The policy assignment.
type PolicyAssignmentTypeOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAssignmentType)(nil)).Elem()
}

func (o PolicyAssignmentTypeOutput) ToPolicyAssignmentTypeOutput() PolicyAssignmentTypeOutput {
	return o
}

func (o PolicyAssignmentTypeOutput) ToPolicyAssignmentTypeOutputWithContext(ctx context.Context) PolicyAssignmentTypeOutput {
	return o
}

// The name of the policy assignment.
func (o PolicyAssignmentTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Properties for the policy assignment.
func (o PolicyAssignmentTypeOutput) Properties() PolicyAssignmentPropertiesResponseOutput {
	return o.ApplyT(func(v PolicyAssignmentType) PolicyAssignmentPropertiesResponse { return v.Properties }).(PolicyAssignmentPropertiesResponseOutput)
}

// The type of the policy assignment.
func (o PolicyAssignmentTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The policy assignment properties.
type PolicyAssignmentPropertiesResponse struct {
	// This message will be part of response in case of policy violation.
	Description *string `pulumi:"description"`
	// The display name of the policy assignment.
	DisplayName *string `pulumi:"displayName"`
	// Required if a parameter is used in policy rule.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// The ID of the policy definition.
	PolicyDefinitionId *string `pulumi:"policyDefinitionId"`
	// The scope for the policy assignment.
	Scope *string `pulumi:"scope"`
}

// PolicyAssignmentPropertiesResponseInput is an input type that accepts PolicyAssignmentPropertiesResponseArgs and PolicyAssignmentPropertiesResponseOutput values.
// You can construct a concrete instance of `PolicyAssignmentPropertiesResponseInput` via:
//
//          PolicyAssignmentPropertiesResponseArgs{...}
type PolicyAssignmentPropertiesResponseInput interface {
	pulumi.Input

	ToPolicyAssignmentPropertiesResponseOutput() PolicyAssignmentPropertiesResponseOutput
	ToPolicyAssignmentPropertiesResponseOutputWithContext(context.Context) PolicyAssignmentPropertiesResponseOutput
}

// The policy assignment properties.
type PolicyAssignmentPropertiesResponseArgs struct {
	// This message will be part of response in case of policy violation.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The display name of the policy assignment.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Required if a parameter is used in policy rule.
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// The ID of the policy definition.
	PolicyDefinitionId pulumi.StringPtrInput `pulumi:"policyDefinitionId"`
	// The scope for the policy assignment.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (PolicyAssignmentPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAssignmentPropertiesResponse)(nil)).Elem()
}

func (i PolicyAssignmentPropertiesResponseArgs) ToPolicyAssignmentPropertiesResponseOutput() PolicyAssignmentPropertiesResponseOutput {
	return i.ToPolicyAssignmentPropertiesResponseOutputWithContext(context.Background())
}

func (i PolicyAssignmentPropertiesResponseArgs) ToPolicyAssignmentPropertiesResponseOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAssignmentPropertiesResponseOutput)
}

func (i PolicyAssignmentPropertiesResponseArgs) ToPolicyAssignmentPropertiesResponsePtrOutput() PolicyAssignmentPropertiesResponsePtrOutput {
	return i.ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i PolicyAssignmentPropertiesResponseArgs) ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAssignmentPropertiesResponseOutput).ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(ctx)
}

// PolicyAssignmentPropertiesResponsePtrInput is an input type that accepts PolicyAssignmentPropertiesResponseArgs, PolicyAssignmentPropertiesResponsePtr and PolicyAssignmentPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `PolicyAssignmentPropertiesResponsePtrInput` via:
//
//          PolicyAssignmentPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type PolicyAssignmentPropertiesResponsePtrInput interface {
	pulumi.Input

	ToPolicyAssignmentPropertiesResponsePtrOutput() PolicyAssignmentPropertiesResponsePtrOutput
	ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(context.Context) PolicyAssignmentPropertiesResponsePtrOutput
}

type policyAssignmentPropertiesResponsePtrType PolicyAssignmentPropertiesResponseArgs

func PolicyAssignmentPropertiesResponsePtr(v *PolicyAssignmentPropertiesResponseArgs) PolicyAssignmentPropertiesResponsePtrInput {
	return (*policyAssignmentPropertiesResponsePtrType)(v)
}

func (*policyAssignmentPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAssignmentPropertiesResponse)(nil)).Elem()
}

func (i *policyAssignmentPropertiesResponsePtrType) ToPolicyAssignmentPropertiesResponsePtrOutput() PolicyAssignmentPropertiesResponsePtrOutput {
	return i.ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *policyAssignmentPropertiesResponsePtrType) ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAssignmentPropertiesResponsePtrOutput)
}

// The policy assignment properties.
type PolicyAssignmentPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAssignmentPropertiesResponse)(nil)).Elem()
}

func (o PolicyAssignmentPropertiesResponseOutput) ToPolicyAssignmentPropertiesResponseOutput() PolicyAssignmentPropertiesResponseOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponseOutput) ToPolicyAssignmentPropertiesResponseOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponseOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponseOutput) ToPolicyAssignmentPropertiesResponsePtrOutput() PolicyAssignmentPropertiesResponsePtrOutput {
	return o.ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o PolicyAssignmentPropertiesResponseOutput) ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *PolicyAssignmentPropertiesResponse {
		return &v
	}).(PolicyAssignmentPropertiesResponsePtrOutput)
}

// This message will be part of response in case of policy violation.
func (o PolicyAssignmentPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the policy assignment.
func (o PolicyAssignmentPropertiesResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Required if a parameter is used in policy rule.
func (o PolicyAssignmentPropertiesResponseOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// The ID of the policy definition.
func (o PolicyAssignmentPropertiesResponseOutput) PolicyDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *string { return v.PolicyDefinitionId }).(pulumi.StringPtrOutput)
}

// The scope for the policy assignment.
func (o PolicyAssignmentPropertiesResponseOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type PolicyAssignmentPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAssignmentPropertiesResponse)(nil)).Elem()
}

func (o PolicyAssignmentPropertiesResponsePtrOutput) ToPolicyAssignmentPropertiesResponsePtrOutput() PolicyAssignmentPropertiesResponsePtrOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponsePtrOutput) ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponsePtrOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponsePtrOutput) Elem() PolicyAssignmentPropertiesResponseOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) PolicyAssignmentPropertiesResponse { return *v }).(PolicyAssignmentPropertiesResponseOutput)
}

// This message will be part of response in case of policy violation.
func (o PolicyAssignmentPropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The display name of the policy assignment.
func (o PolicyAssignmentPropertiesResponsePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Required if a parameter is used in policy rule.
func (o PolicyAssignmentPropertiesResponsePtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// The ID of the policy definition.
func (o PolicyAssignmentPropertiesResponsePtrOutput) PolicyDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PolicyDefinitionId
	}).(pulumi.StringPtrOutput)
}

// The scope for the policy assignment.
func (o PolicyAssignmentPropertiesResponsePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// The policy definition.
type PolicyDefinitionType struct {
	// The name of the policy definition.
	Name string `pulumi:"name"`
	// The policy definition properties.
	Properties PolicyDefinitionPropertiesResponse `pulumi:"properties"`
}

// PolicyDefinitionTypeInput is an input type that accepts PolicyDefinitionTypeArgs and PolicyDefinitionTypeOutput values.
// You can construct a concrete instance of `PolicyDefinitionTypeInput` via:
//
//          PolicyDefinitionTypeArgs{...}
type PolicyDefinitionTypeInput interface {
	pulumi.Input

	ToPolicyDefinitionTypeOutput() PolicyDefinitionTypeOutput
	ToPolicyDefinitionTypeOutputWithContext(context.Context) PolicyDefinitionTypeOutput
}

// The policy definition.
type PolicyDefinitionTypeArgs struct {
	// The name of the policy definition.
	Name pulumi.StringInput `pulumi:"name"`
	// The policy definition properties.
	Properties PolicyDefinitionPropertiesResponseInput `pulumi:"properties"`
}

func (PolicyDefinitionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionType)(nil)).Elem()
}

func (i PolicyDefinitionTypeArgs) ToPolicyDefinitionTypeOutput() PolicyDefinitionTypeOutput {
	return i.ToPolicyDefinitionTypeOutputWithContext(context.Background())
}

func (i PolicyDefinitionTypeArgs) ToPolicyDefinitionTypeOutputWithContext(ctx context.Context) PolicyDefinitionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionTypeOutput)
}

// The policy definition.
type PolicyDefinitionTypeOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionType)(nil)).Elem()
}

func (o PolicyDefinitionTypeOutput) ToPolicyDefinitionTypeOutput() PolicyDefinitionTypeOutput {
	return o
}

func (o PolicyDefinitionTypeOutput) ToPolicyDefinitionTypeOutputWithContext(ctx context.Context) PolicyDefinitionTypeOutput {
	return o
}

// The name of the policy definition.
func (o PolicyDefinitionTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionType) string { return v.Name }).(pulumi.StringOutput)
}

// The policy definition properties.
func (o PolicyDefinitionTypeOutput) Properties() PolicyDefinitionPropertiesResponseOutput {
	return o.ApplyT(func(v PolicyDefinitionType) PolicyDefinitionPropertiesResponse { return v.Properties }).(PolicyDefinitionPropertiesResponseOutput)
}

// The policy definition properties.
type PolicyDefinitionPropertiesResponse struct {
	// The policy definition description.
	Description *string `pulumi:"description"`
	// The display name of the policy definition.
	DisplayName *string `pulumi:"displayName"`
	// The policy definition metadata.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// The policy definition mode. Possible values are NotSpecified, Indexed, and All.
	Mode *string `pulumi:"mode"`
	// Required if a parameter is used in policy rule.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// The policy rule.
	PolicyRule map[string]interface{} `pulumi:"policyRule"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, and Custom.
	PolicyType *string `pulumi:"policyType"`
}

// PolicyDefinitionPropertiesResponseInput is an input type that accepts PolicyDefinitionPropertiesResponseArgs and PolicyDefinitionPropertiesResponseOutput values.
// You can construct a concrete instance of `PolicyDefinitionPropertiesResponseInput` via:
//
//          PolicyDefinitionPropertiesResponseArgs{...}
type PolicyDefinitionPropertiesResponseInput interface {
	pulumi.Input

	ToPolicyDefinitionPropertiesResponseOutput() PolicyDefinitionPropertiesResponseOutput
	ToPolicyDefinitionPropertiesResponseOutputWithContext(context.Context) PolicyDefinitionPropertiesResponseOutput
}

// The policy definition properties.
type PolicyDefinitionPropertiesResponseArgs struct {
	// The policy definition description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The display name of the policy definition.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The policy definition metadata.
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// The policy definition mode. Possible values are NotSpecified, Indexed, and All.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Required if a parameter is used in policy rule.
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// The policy rule.
	PolicyRule pulumi.MapInput `pulumi:"policyRule"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, and Custom.
	PolicyType pulumi.StringPtrInput `pulumi:"policyType"`
}

func (PolicyDefinitionPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionPropertiesResponse)(nil)).Elem()
}

func (i PolicyDefinitionPropertiesResponseArgs) ToPolicyDefinitionPropertiesResponseOutput() PolicyDefinitionPropertiesResponseOutput {
	return i.ToPolicyDefinitionPropertiesResponseOutputWithContext(context.Background())
}

func (i PolicyDefinitionPropertiesResponseArgs) ToPolicyDefinitionPropertiesResponseOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionPropertiesResponseOutput)
}

func (i PolicyDefinitionPropertiesResponseArgs) ToPolicyDefinitionPropertiesResponsePtrOutput() PolicyDefinitionPropertiesResponsePtrOutput {
	return i.ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i PolicyDefinitionPropertiesResponseArgs) ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionPropertiesResponseOutput).ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(ctx)
}

// PolicyDefinitionPropertiesResponsePtrInput is an input type that accepts PolicyDefinitionPropertiesResponseArgs, PolicyDefinitionPropertiesResponsePtr and PolicyDefinitionPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `PolicyDefinitionPropertiesResponsePtrInput` via:
//
//          PolicyDefinitionPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type PolicyDefinitionPropertiesResponsePtrInput interface {
	pulumi.Input

	ToPolicyDefinitionPropertiesResponsePtrOutput() PolicyDefinitionPropertiesResponsePtrOutput
	ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(context.Context) PolicyDefinitionPropertiesResponsePtrOutput
}

type policyDefinitionPropertiesResponsePtrType PolicyDefinitionPropertiesResponseArgs

func PolicyDefinitionPropertiesResponsePtr(v *PolicyDefinitionPropertiesResponseArgs) PolicyDefinitionPropertiesResponsePtrInput {
	return (*policyDefinitionPropertiesResponsePtrType)(v)
}

func (*policyDefinitionPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyDefinitionPropertiesResponse)(nil)).Elem()
}

func (i *policyDefinitionPropertiesResponsePtrType) ToPolicyDefinitionPropertiesResponsePtrOutput() PolicyDefinitionPropertiesResponsePtrOutput {
	return i.ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *policyDefinitionPropertiesResponsePtrType) ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionPropertiesResponsePtrOutput)
}

// The policy definition properties.
type PolicyDefinitionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionPropertiesResponse)(nil)).Elem()
}

func (o PolicyDefinitionPropertiesResponseOutput) ToPolicyDefinitionPropertiesResponseOutput() PolicyDefinitionPropertiesResponseOutput {
	return o
}

func (o PolicyDefinitionPropertiesResponseOutput) ToPolicyDefinitionPropertiesResponseOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponseOutput {
	return o
}

func (o PolicyDefinitionPropertiesResponseOutput) ToPolicyDefinitionPropertiesResponsePtrOutput() PolicyDefinitionPropertiesResponsePtrOutput {
	return o.ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o PolicyDefinitionPropertiesResponseOutput) ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) *PolicyDefinitionPropertiesResponse {
		return &v
	}).(PolicyDefinitionPropertiesResponsePtrOutput)
}

// The policy definition description.
func (o PolicyDefinitionPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the policy definition.
func (o PolicyDefinitionPropertiesResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The policy definition metadata.
func (o PolicyDefinitionPropertiesResponseOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

// The policy definition mode. Possible values are NotSpecified, Indexed, and All.
func (o PolicyDefinitionPropertiesResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Required if a parameter is used in policy rule.
func (o PolicyDefinitionPropertiesResponseOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// The policy rule.
func (o PolicyDefinitionPropertiesResponseOutput) PolicyRule() pulumi.MapOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) map[string]interface{} { return v.PolicyRule }).(pulumi.MapOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, and Custom.
func (o PolicyDefinitionPropertiesResponseOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) *string { return v.PolicyType }).(pulumi.StringPtrOutput)
}

type PolicyDefinitionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyDefinitionPropertiesResponse)(nil)).Elem()
}

func (o PolicyDefinitionPropertiesResponsePtrOutput) ToPolicyDefinitionPropertiesResponsePtrOutput() PolicyDefinitionPropertiesResponsePtrOutput {
	return o
}

func (o PolicyDefinitionPropertiesResponsePtrOutput) ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponsePtrOutput {
	return o
}

func (o PolicyDefinitionPropertiesResponsePtrOutput) Elem() PolicyDefinitionPropertiesResponseOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) PolicyDefinitionPropertiesResponse { return *v }).(PolicyDefinitionPropertiesResponseOutput)
}

// The policy definition description.
func (o PolicyDefinitionPropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The display name of the policy definition.
func (o PolicyDefinitionPropertiesResponsePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The policy definition metadata.
func (o PolicyDefinitionPropertiesResponsePtrOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.MapOutput)
}

// The policy definition mode. Possible values are NotSpecified, Indexed, and All.
func (o PolicyDefinitionPropertiesResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Required if a parameter is used in policy rule.
func (o PolicyDefinitionPropertiesResponsePtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// The policy rule.
func (o PolicyDefinitionPropertiesResponsePtrOutput) PolicyRule() pulumi.MapOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.PolicyRule
	}).(pulumi.MapOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, and Custom.
func (o PolicyDefinitionPropertiesResponsePtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PolicyType
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(PolicyAssignmentTypeOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionTypeOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionPropertiesResponsePtrOutput{})
}
