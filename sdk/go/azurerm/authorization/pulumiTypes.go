// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package authorization

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The lock information.
type LockType struct {
	// The name of the lock.
	Name string `pulumi:"name"`
	// The properties of the lock.
	Properties ManagementLockPropertiesResponse `pulumi:"properties"`
	// The resource type of the lock - Microsoft.Authorization/locks.
	Type string `pulumi:"type"`
}

// LockTypeInput is an input type that accepts LockTypeArgs and LockTypeOutput values.
// You can construct a concrete instance of `LockTypeInput` via:
//
//          LockTypeArgs{...}
type LockTypeInput interface {
	pulumi.Input

	ToLockTypeOutput() LockTypeOutput
	ToLockTypeOutputWithContext(context.Context) LockTypeOutput
}

// The lock information.
type LockTypeArgs struct {
	// The name of the lock.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of the lock.
	Properties ManagementLockPropertiesResponseInput `pulumi:"properties"`
	// The resource type of the lock - Microsoft.Authorization/locks.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LockTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LockType)(nil)).Elem()
}

func (i LockTypeArgs) ToLockTypeOutput() LockTypeOutput {
	return i.ToLockTypeOutputWithContext(context.Background())
}

func (i LockTypeArgs) ToLockTypeOutputWithContext(ctx context.Context) LockTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LockTypeOutput)
}

// The lock information.
type LockTypeOutput struct{ *pulumi.OutputState }

func (LockTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LockType)(nil)).Elem()
}

func (o LockTypeOutput) ToLockTypeOutput() LockTypeOutput {
	return o
}

func (o LockTypeOutput) ToLockTypeOutputWithContext(ctx context.Context) LockTypeOutput {
	return o
}

// The name of the lock.
func (o LockTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LockType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of the lock.
func (o LockTypeOutput) Properties() ManagementLockPropertiesResponseOutput {
	return o.ApplyT(func(v LockType) ManagementLockPropertiesResponse { return v.Properties }).(ManagementLockPropertiesResponseOutput)
}

// The resource type of the lock - Microsoft.Authorization/locks.
func (o LockTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LockType) string { return v.Type }).(pulumi.StringOutput)
}

// Lock owner properties.
type ManagementLockOwner struct {
	// The application ID of the lock owner.
	ApplicationId *string `pulumi:"applicationId"`
}

// ManagementLockOwnerInput is an input type that accepts ManagementLockOwnerArgs and ManagementLockOwnerOutput values.
// You can construct a concrete instance of `ManagementLockOwnerInput` via:
//
//          ManagementLockOwnerArgs{...}
type ManagementLockOwnerInput interface {
	pulumi.Input

	ToManagementLockOwnerOutput() ManagementLockOwnerOutput
	ToManagementLockOwnerOutputWithContext(context.Context) ManagementLockOwnerOutput
}

// Lock owner properties.
type ManagementLockOwnerArgs struct {
	// The application ID of the lock owner.
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
}

func (ManagementLockOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockOwner)(nil)).Elem()
}

func (i ManagementLockOwnerArgs) ToManagementLockOwnerOutput() ManagementLockOwnerOutput {
	return i.ToManagementLockOwnerOutputWithContext(context.Background())
}

func (i ManagementLockOwnerArgs) ToManagementLockOwnerOutputWithContext(ctx context.Context) ManagementLockOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockOwnerOutput)
}

// ManagementLockOwnerArrayInput is an input type that accepts ManagementLockOwnerArray and ManagementLockOwnerArrayOutput values.
// You can construct a concrete instance of `ManagementLockOwnerArrayInput` via:
//
//          ManagementLockOwnerArray{ ManagementLockOwnerArgs{...} }
type ManagementLockOwnerArrayInput interface {
	pulumi.Input

	ToManagementLockOwnerArrayOutput() ManagementLockOwnerArrayOutput
	ToManagementLockOwnerArrayOutputWithContext(context.Context) ManagementLockOwnerArrayOutput
}

type ManagementLockOwnerArray []ManagementLockOwnerInput

func (ManagementLockOwnerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagementLockOwner)(nil)).Elem()
}

func (i ManagementLockOwnerArray) ToManagementLockOwnerArrayOutput() ManagementLockOwnerArrayOutput {
	return i.ToManagementLockOwnerArrayOutputWithContext(context.Background())
}

func (i ManagementLockOwnerArray) ToManagementLockOwnerArrayOutputWithContext(ctx context.Context) ManagementLockOwnerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockOwnerArrayOutput)
}

// Lock owner properties.
type ManagementLockOwnerOutput struct{ *pulumi.OutputState }

func (ManagementLockOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockOwner)(nil)).Elem()
}

func (o ManagementLockOwnerOutput) ToManagementLockOwnerOutput() ManagementLockOwnerOutput {
	return o
}

func (o ManagementLockOwnerOutput) ToManagementLockOwnerOutputWithContext(ctx context.Context) ManagementLockOwnerOutput {
	return o
}

// The application ID of the lock owner.
func (o ManagementLockOwnerOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagementLockOwner) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

type ManagementLockOwnerArrayOutput struct{ *pulumi.OutputState }

func (ManagementLockOwnerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagementLockOwner)(nil)).Elem()
}

func (o ManagementLockOwnerArrayOutput) ToManagementLockOwnerArrayOutput() ManagementLockOwnerArrayOutput {
	return o
}

func (o ManagementLockOwnerArrayOutput) ToManagementLockOwnerArrayOutputWithContext(ctx context.Context) ManagementLockOwnerArrayOutput {
	return o
}

func (o ManagementLockOwnerArrayOutput) Index(i pulumi.IntInput) ManagementLockOwnerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagementLockOwner {
		return vs[0].([]ManagementLockOwner)[vs[1].(int)]
	}).(ManagementLockOwnerOutput)
}

// Lock owner properties.
type ManagementLockOwnerResponse struct {
	// The application ID of the lock owner.
	ApplicationId *string `pulumi:"applicationId"`
}

// ManagementLockOwnerResponseInput is an input type that accepts ManagementLockOwnerResponseArgs and ManagementLockOwnerResponseOutput values.
// You can construct a concrete instance of `ManagementLockOwnerResponseInput` via:
//
//          ManagementLockOwnerResponseArgs{...}
type ManagementLockOwnerResponseInput interface {
	pulumi.Input

	ToManagementLockOwnerResponseOutput() ManagementLockOwnerResponseOutput
	ToManagementLockOwnerResponseOutputWithContext(context.Context) ManagementLockOwnerResponseOutput
}

// Lock owner properties.
type ManagementLockOwnerResponseArgs struct {
	// The application ID of the lock owner.
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
}

func (ManagementLockOwnerResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockOwnerResponse)(nil)).Elem()
}

func (i ManagementLockOwnerResponseArgs) ToManagementLockOwnerResponseOutput() ManagementLockOwnerResponseOutput {
	return i.ToManagementLockOwnerResponseOutputWithContext(context.Background())
}

func (i ManagementLockOwnerResponseArgs) ToManagementLockOwnerResponseOutputWithContext(ctx context.Context) ManagementLockOwnerResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockOwnerResponseOutput)
}

// ManagementLockOwnerResponseArrayInput is an input type that accepts ManagementLockOwnerResponseArray and ManagementLockOwnerResponseArrayOutput values.
// You can construct a concrete instance of `ManagementLockOwnerResponseArrayInput` via:
//
//          ManagementLockOwnerResponseArray{ ManagementLockOwnerResponseArgs{...} }
type ManagementLockOwnerResponseArrayInput interface {
	pulumi.Input

	ToManagementLockOwnerResponseArrayOutput() ManagementLockOwnerResponseArrayOutput
	ToManagementLockOwnerResponseArrayOutputWithContext(context.Context) ManagementLockOwnerResponseArrayOutput
}

type ManagementLockOwnerResponseArray []ManagementLockOwnerResponseInput

func (ManagementLockOwnerResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagementLockOwnerResponse)(nil)).Elem()
}

func (i ManagementLockOwnerResponseArray) ToManagementLockOwnerResponseArrayOutput() ManagementLockOwnerResponseArrayOutput {
	return i.ToManagementLockOwnerResponseArrayOutputWithContext(context.Background())
}

func (i ManagementLockOwnerResponseArray) ToManagementLockOwnerResponseArrayOutputWithContext(ctx context.Context) ManagementLockOwnerResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockOwnerResponseArrayOutput)
}

// Lock owner properties.
type ManagementLockOwnerResponseOutput struct{ *pulumi.OutputState }

func (ManagementLockOwnerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockOwnerResponse)(nil)).Elem()
}

func (o ManagementLockOwnerResponseOutput) ToManagementLockOwnerResponseOutput() ManagementLockOwnerResponseOutput {
	return o
}

func (o ManagementLockOwnerResponseOutput) ToManagementLockOwnerResponseOutputWithContext(ctx context.Context) ManagementLockOwnerResponseOutput {
	return o
}

// The application ID of the lock owner.
func (o ManagementLockOwnerResponseOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagementLockOwnerResponse) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

type ManagementLockOwnerResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagementLockOwnerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagementLockOwnerResponse)(nil)).Elem()
}

func (o ManagementLockOwnerResponseArrayOutput) ToManagementLockOwnerResponseArrayOutput() ManagementLockOwnerResponseArrayOutput {
	return o
}

func (o ManagementLockOwnerResponseArrayOutput) ToManagementLockOwnerResponseArrayOutputWithContext(ctx context.Context) ManagementLockOwnerResponseArrayOutput {
	return o
}

func (o ManagementLockOwnerResponseArrayOutput) Index(i pulumi.IntInput) ManagementLockOwnerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagementLockOwnerResponse {
		return vs[0].([]ManagementLockOwnerResponse)[vs[1].(int)]
	}).(ManagementLockOwnerResponseOutput)
}

// The lock properties.
type ManagementLockProperties struct {
	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level string `pulumi:"level"`
	// Notes about the lock. Maximum of 512 characters.
	Notes *string `pulumi:"notes"`
	// The owners of the lock.
	Owners []ManagementLockOwner `pulumi:"owners"`
}

// ManagementLockPropertiesInput is an input type that accepts ManagementLockPropertiesArgs and ManagementLockPropertiesOutput values.
// You can construct a concrete instance of `ManagementLockPropertiesInput` via:
//
//          ManagementLockPropertiesArgs{...}
type ManagementLockPropertiesInput interface {
	pulumi.Input

	ToManagementLockPropertiesOutput() ManagementLockPropertiesOutput
	ToManagementLockPropertiesOutputWithContext(context.Context) ManagementLockPropertiesOutput
}

// The lock properties.
type ManagementLockPropertiesArgs struct {
	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level pulumi.StringInput `pulumi:"level"`
	// Notes about the lock. Maximum of 512 characters.
	Notes pulumi.StringPtrInput `pulumi:"notes"`
	// The owners of the lock.
	Owners ManagementLockOwnerArrayInput `pulumi:"owners"`
}

func (ManagementLockPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockProperties)(nil)).Elem()
}

func (i ManagementLockPropertiesArgs) ToManagementLockPropertiesOutput() ManagementLockPropertiesOutput {
	return i.ToManagementLockPropertiesOutputWithContext(context.Background())
}

func (i ManagementLockPropertiesArgs) ToManagementLockPropertiesOutputWithContext(ctx context.Context) ManagementLockPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockPropertiesOutput)
}

func (i ManagementLockPropertiesArgs) ToManagementLockPropertiesPtrOutput() ManagementLockPropertiesPtrOutput {
	return i.ToManagementLockPropertiesPtrOutputWithContext(context.Background())
}

func (i ManagementLockPropertiesArgs) ToManagementLockPropertiesPtrOutputWithContext(ctx context.Context) ManagementLockPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockPropertiesOutput).ToManagementLockPropertiesPtrOutputWithContext(ctx)
}

// ManagementLockPropertiesPtrInput is an input type that accepts ManagementLockPropertiesArgs, ManagementLockPropertiesPtr and ManagementLockPropertiesPtrOutput values.
// You can construct a concrete instance of `ManagementLockPropertiesPtrInput` via:
//
//          ManagementLockPropertiesArgs{...}
//
//  or:
//
//          nil
type ManagementLockPropertiesPtrInput interface {
	pulumi.Input

	ToManagementLockPropertiesPtrOutput() ManagementLockPropertiesPtrOutput
	ToManagementLockPropertiesPtrOutputWithContext(context.Context) ManagementLockPropertiesPtrOutput
}

type managementLockPropertiesPtrType ManagementLockPropertiesArgs

func ManagementLockPropertiesPtr(v *ManagementLockPropertiesArgs) ManagementLockPropertiesPtrInput {
	return (*managementLockPropertiesPtrType)(v)
}

func (*managementLockPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementLockProperties)(nil)).Elem()
}

func (i *managementLockPropertiesPtrType) ToManagementLockPropertiesPtrOutput() ManagementLockPropertiesPtrOutput {
	return i.ToManagementLockPropertiesPtrOutputWithContext(context.Background())
}

func (i *managementLockPropertiesPtrType) ToManagementLockPropertiesPtrOutputWithContext(ctx context.Context) ManagementLockPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockPropertiesPtrOutput)
}

// The lock properties.
type ManagementLockPropertiesOutput struct{ *pulumi.OutputState }

func (ManagementLockPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockProperties)(nil)).Elem()
}

func (o ManagementLockPropertiesOutput) ToManagementLockPropertiesOutput() ManagementLockPropertiesOutput {
	return o
}

func (o ManagementLockPropertiesOutput) ToManagementLockPropertiesOutputWithContext(ctx context.Context) ManagementLockPropertiesOutput {
	return o
}

func (o ManagementLockPropertiesOutput) ToManagementLockPropertiesPtrOutput() ManagementLockPropertiesPtrOutput {
	return o.ToManagementLockPropertiesPtrOutputWithContext(context.Background())
}

func (o ManagementLockPropertiesOutput) ToManagementLockPropertiesPtrOutputWithContext(ctx context.Context) ManagementLockPropertiesPtrOutput {
	return o.ApplyT(func(v ManagementLockProperties) *ManagementLockProperties {
		return &v
	}).(ManagementLockPropertiesPtrOutput)
}

// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
func (o ManagementLockPropertiesOutput) Level() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementLockProperties) string { return v.Level }).(pulumi.StringOutput)
}

// Notes about the lock. Maximum of 512 characters.
func (o ManagementLockPropertiesOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagementLockProperties) *string { return v.Notes }).(pulumi.StringPtrOutput)
}

// The owners of the lock.
func (o ManagementLockPropertiesOutput) Owners() ManagementLockOwnerArrayOutput {
	return o.ApplyT(func(v ManagementLockProperties) []ManagementLockOwner { return v.Owners }).(ManagementLockOwnerArrayOutput)
}

type ManagementLockPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ManagementLockPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementLockProperties)(nil)).Elem()
}

func (o ManagementLockPropertiesPtrOutput) ToManagementLockPropertiesPtrOutput() ManagementLockPropertiesPtrOutput {
	return o
}

func (o ManagementLockPropertiesPtrOutput) ToManagementLockPropertiesPtrOutputWithContext(ctx context.Context) ManagementLockPropertiesPtrOutput {
	return o
}

func (o ManagementLockPropertiesPtrOutput) Elem() ManagementLockPropertiesOutput {
	return o.ApplyT(func(v *ManagementLockProperties) ManagementLockProperties { return *v }).(ManagementLockPropertiesOutput)
}

// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
func (o ManagementLockPropertiesPtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagementLockProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Level
	}).(pulumi.StringPtrOutput)
}

// Notes about the lock. Maximum of 512 characters.
func (o ManagementLockPropertiesPtrOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagementLockProperties) *string {
		if v == nil {
			return nil
		}
		return v.Notes
	}).(pulumi.StringPtrOutput)
}

// The owners of the lock.
func (o ManagementLockPropertiesPtrOutput) Owners() ManagementLockOwnerArrayOutput {
	return o.ApplyT(func(v *ManagementLockProperties) []ManagementLockOwner {
		if v == nil {
			return nil
		}
		return v.Owners
	}).(ManagementLockOwnerArrayOutput)
}

// The lock properties.
type ManagementLockPropertiesResponse struct {
	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level string `pulumi:"level"`
	// Notes about the lock. Maximum of 512 characters.
	Notes *string `pulumi:"notes"`
	// The owners of the lock.
	Owners []ManagementLockOwnerResponse `pulumi:"owners"`
}

// ManagementLockPropertiesResponseInput is an input type that accepts ManagementLockPropertiesResponseArgs and ManagementLockPropertiesResponseOutput values.
// You can construct a concrete instance of `ManagementLockPropertiesResponseInput` via:
//
//          ManagementLockPropertiesResponseArgs{...}
type ManagementLockPropertiesResponseInput interface {
	pulumi.Input

	ToManagementLockPropertiesResponseOutput() ManagementLockPropertiesResponseOutput
	ToManagementLockPropertiesResponseOutputWithContext(context.Context) ManagementLockPropertiesResponseOutput
}

// The lock properties.
type ManagementLockPropertiesResponseArgs struct {
	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level pulumi.StringInput `pulumi:"level"`
	// Notes about the lock. Maximum of 512 characters.
	Notes pulumi.StringPtrInput `pulumi:"notes"`
	// The owners of the lock.
	Owners ManagementLockOwnerResponseArrayInput `pulumi:"owners"`
}

func (ManagementLockPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockPropertiesResponse)(nil)).Elem()
}

func (i ManagementLockPropertiesResponseArgs) ToManagementLockPropertiesResponseOutput() ManagementLockPropertiesResponseOutput {
	return i.ToManagementLockPropertiesResponseOutputWithContext(context.Background())
}

func (i ManagementLockPropertiesResponseArgs) ToManagementLockPropertiesResponseOutputWithContext(ctx context.Context) ManagementLockPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockPropertiesResponseOutput)
}

func (i ManagementLockPropertiesResponseArgs) ToManagementLockPropertiesResponsePtrOutput() ManagementLockPropertiesResponsePtrOutput {
	return i.ToManagementLockPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i ManagementLockPropertiesResponseArgs) ToManagementLockPropertiesResponsePtrOutputWithContext(ctx context.Context) ManagementLockPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockPropertiesResponseOutput).ToManagementLockPropertiesResponsePtrOutputWithContext(ctx)
}

// ManagementLockPropertiesResponsePtrInput is an input type that accepts ManagementLockPropertiesResponseArgs, ManagementLockPropertiesResponsePtr and ManagementLockPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `ManagementLockPropertiesResponsePtrInput` via:
//
//          ManagementLockPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type ManagementLockPropertiesResponsePtrInput interface {
	pulumi.Input

	ToManagementLockPropertiesResponsePtrOutput() ManagementLockPropertiesResponsePtrOutput
	ToManagementLockPropertiesResponsePtrOutputWithContext(context.Context) ManagementLockPropertiesResponsePtrOutput
}

type managementLockPropertiesResponsePtrType ManagementLockPropertiesResponseArgs

func ManagementLockPropertiesResponsePtr(v *ManagementLockPropertiesResponseArgs) ManagementLockPropertiesResponsePtrInput {
	return (*managementLockPropertiesResponsePtrType)(v)
}

func (*managementLockPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementLockPropertiesResponse)(nil)).Elem()
}

func (i *managementLockPropertiesResponsePtrType) ToManagementLockPropertiesResponsePtrOutput() ManagementLockPropertiesResponsePtrOutput {
	return i.ToManagementLockPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *managementLockPropertiesResponsePtrType) ToManagementLockPropertiesResponsePtrOutputWithContext(ctx context.Context) ManagementLockPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockPropertiesResponsePtrOutput)
}

// The lock properties.
type ManagementLockPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ManagementLockPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockPropertiesResponse)(nil)).Elem()
}

func (o ManagementLockPropertiesResponseOutput) ToManagementLockPropertiesResponseOutput() ManagementLockPropertiesResponseOutput {
	return o
}

func (o ManagementLockPropertiesResponseOutput) ToManagementLockPropertiesResponseOutputWithContext(ctx context.Context) ManagementLockPropertiesResponseOutput {
	return o
}

func (o ManagementLockPropertiesResponseOutput) ToManagementLockPropertiesResponsePtrOutput() ManagementLockPropertiesResponsePtrOutput {
	return o.ToManagementLockPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ManagementLockPropertiesResponseOutput) ToManagementLockPropertiesResponsePtrOutputWithContext(ctx context.Context) ManagementLockPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ManagementLockPropertiesResponse) *ManagementLockPropertiesResponse {
		return &v
	}).(ManagementLockPropertiesResponsePtrOutput)
}

// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
func (o ManagementLockPropertiesResponseOutput) Level() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementLockPropertiesResponse) string { return v.Level }).(pulumi.StringOutput)
}

// Notes about the lock. Maximum of 512 characters.
func (o ManagementLockPropertiesResponseOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagementLockPropertiesResponse) *string { return v.Notes }).(pulumi.StringPtrOutput)
}

// The owners of the lock.
func (o ManagementLockPropertiesResponseOutput) Owners() ManagementLockOwnerResponseArrayOutput {
	return o.ApplyT(func(v ManagementLockPropertiesResponse) []ManagementLockOwnerResponse { return v.Owners }).(ManagementLockOwnerResponseArrayOutput)
}

type ManagementLockPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagementLockPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementLockPropertiesResponse)(nil)).Elem()
}

func (o ManagementLockPropertiesResponsePtrOutput) ToManagementLockPropertiesResponsePtrOutput() ManagementLockPropertiesResponsePtrOutput {
	return o
}

func (o ManagementLockPropertiesResponsePtrOutput) ToManagementLockPropertiesResponsePtrOutputWithContext(ctx context.Context) ManagementLockPropertiesResponsePtrOutput {
	return o
}

func (o ManagementLockPropertiesResponsePtrOutput) Elem() ManagementLockPropertiesResponseOutput {
	return o.ApplyT(func(v *ManagementLockPropertiesResponse) ManagementLockPropertiesResponse { return *v }).(ManagementLockPropertiesResponseOutput)
}

// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
func (o ManagementLockPropertiesResponsePtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagementLockPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Level
	}).(pulumi.StringPtrOutput)
}

// Notes about the lock. Maximum of 512 characters.
func (o ManagementLockPropertiesResponsePtrOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagementLockPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Notes
	}).(pulumi.StringPtrOutput)
}

// The owners of the lock.
func (o ManagementLockPropertiesResponsePtrOutput) Owners() ManagementLockOwnerResponseArrayOutput {
	return o.ApplyT(func(v *ManagementLockPropertiesResponse) []ManagementLockOwnerResponse {
		if v == nil {
			return nil
		}
		return v.Owners
	}).(ManagementLockOwnerResponseArrayOutput)
}

// The parameter definitions for parameters used in the policy. The keys are the parameter names.
type ParameterDefinitions struct {
}

// ParameterDefinitionsInput is an input type that accepts ParameterDefinitionsArgs and ParameterDefinitionsOutput values.
// You can construct a concrete instance of `ParameterDefinitionsInput` via:
//
//          ParameterDefinitionsArgs{...}
type ParameterDefinitionsInput interface {
	pulumi.Input

	ToParameterDefinitionsOutput() ParameterDefinitionsOutput
	ToParameterDefinitionsOutputWithContext(context.Context) ParameterDefinitionsOutput
}

// The parameter definitions for parameters used in the policy. The keys are the parameter names.
type ParameterDefinitionsArgs struct {
}

func (ParameterDefinitionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitions)(nil)).Elem()
}

func (i ParameterDefinitionsArgs) ToParameterDefinitionsOutput() ParameterDefinitionsOutput {
	return i.ToParameterDefinitionsOutputWithContext(context.Background())
}

func (i ParameterDefinitionsArgs) ToParameterDefinitionsOutputWithContext(ctx context.Context) ParameterDefinitionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsOutput)
}

func (i ParameterDefinitionsArgs) ToParameterDefinitionsPtrOutput() ParameterDefinitionsPtrOutput {
	return i.ToParameterDefinitionsPtrOutputWithContext(context.Background())
}

func (i ParameterDefinitionsArgs) ToParameterDefinitionsPtrOutputWithContext(ctx context.Context) ParameterDefinitionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsOutput).ToParameterDefinitionsPtrOutputWithContext(ctx)
}

// ParameterDefinitionsPtrInput is an input type that accepts ParameterDefinitionsArgs, ParameterDefinitionsPtr and ParameterDefinitionsPtrOutput values.
// You can construct a concrete instance of `ParameterDefinitionsPtrInput` via:
//
//          ParameterDefinitionsArgs{...}
//
//  or:
//
//          nil
type ParameterDefinitionsPtrInput interface {
	pulumi.Input

	ToParameterDefinitionsPtrOutput() ParameterDefinitionsPtrOutput
	ToParameterDefinitionsPtrOutputWithContext(context.Context) ParameterDefinitionsPtrOutput
}

type parameterDefinitionsPtrType ParameterDefinitionsArgs

func ParameterDefinitionsPtr(v *ParameterDefinitionsArgs) ParameterDefinitionsPtrInput {
	return (*parameterDefinitionsPtrType)(v)
}

func (*parameterDefinitionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitions)(nil)).Elem()
}

func (i *parameterDefinitionsPtrType) ToParameterDefinitionsPtrOutput() ParameterDefinitionsPtrOutput {
	return i.ToParameterDefinitionsPtrOutputWithContext(context.Background())
}

func (i *parameterDefinitionsPtrType) ToParameterDefinitionsPtrOutputWithContext(ctx context.Context) ParameterDefinitionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsPtrOutput)
}

// The parameter definitions for parameters used in the policy. The keys are the parameter names.
type ParameterDefinitionsOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitions)(nil)).Elem()
}

func (o ParameterDefinitionsOutput) ToParameterDefinitionsOutput() ParameterDefinitionsOutput {
	return o
}

func (o ParameterDefinitionsOutput) ToParameterDefinitionsOutputWithContext(ctx context.Context) ParameterDefinitionsOutput {
	return o
}

func (o ParameterDefinitionsOutput) ToParameterDefinitionsPtrOutput() ParameterDefinitionsPtrOutput {
	return o.ToParameterDefinitionsPtrOutputWithContext(context.Background())
}

func (o ParameterDefinitionsOutput) ToParameterDefinitionsPtrOutputWithContext(ctx context.Context) ParameterDefinitionsPtrOutput {
	return o.ApplyT(func(v ParameterDefinitions) *ParameterDefinitions {
		return &v
	}).(ParameterDefinitionsPtrOutput)
}

type ParameterDefinitionsPtrOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitions)(nil)).Elem()
}

func (o ParameterDefinitionsPtrOutput) ToParameterDefinitionsPtrOutput() ParameterDefinitionsPtrOutput {
	return o
}

func (o ParameterDefinitionsPtrOutput) ToParameterDefinitionsPtrOutputWithContext(ctx context.Context) ParameterDefinitionsPtrOutput {
	return o
}

func (o ParameterDefinitionsPtrOutput) Elem() ParameterDefinitionsOutput {
	return o.ApplyT(func(v *ParameterDefinitions) ParameterDefinitions { return *v }).(ParameterDefinitionsOutput)
}

// The parameter definitions for parameters used in the policy. The keys are the parameter names.
type ParameterDefinitionsResponse struct {
}

// ParameterDefinitionsResponseInput is an input type that accepts ParameterDefinitionsResponseArgs and ParameterDefinitionsResponseOutput values.
// You can construct a concrete instance of `ParameterDefinitionsResponseInput` via:
//
//          ParameterDefinitionsResponseArgs{...}
type ParameterDefinitionsResponseInput interface {
	pulumi.Input

	ToParameterDefinitionsResponseOutput() ParameterDefinitionsResponseOutput
	ToParameterDefinitionsResponseOutputWithContext(context.Context) ParameterDefinitionsResponseOutput
}

// The parameter definitions for parameters used in the policy. The keys are the parameter names.
type ParameterDefinitionsResponseArgs struct {
}

func (ParameterDefinitionsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsResponse)(nil)).Elem()
}

func (i ParameterDefinitionsResponseArgs) ToParameterDefinitionsResponseOutput() ParameterDefinitionsResponseOutput {
	return i.ToParameterDefinitionsResponseOutputWithContext(context.Background())
}

func (i ParameterDefinitionsResponseArgs) ToParameterDefinitionsResponseOutputWithContext(ctx context.Context) ParameterDefinitionsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsResponseOutput)
}

func (i ParameterDefinitionsResponseArgs) ToParameterDefinitionsResponsePtrOutput() ParameterDefinitionsResponsePtrOutput {
	return i.ToParameterDefinitionsResponsePtrOutputWithContext(context.Background())
}

func (i ParameterDefinitionsResponseArgs) ToParameterDefinitionsResponsePtrOutputWithContext(ctx context.Context) ParameterDefinitionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsResponseOutput).ToParameterDefinitionsResponsePtrOutputWithContext(ctx)
}

// ParameterDefinitionsResponsePtrInput is an input type that accepts ParameterDefinitionsResponseArgs, ParameterDefinitionsResponsePtr and ParameterDefinitionsResponsePtrOutput values.
// You can construct a concrete instance of `ParameterDefinitionsResponsePtrInput` via:
//
//          ParameterDefinitionsResponseArgs{...}
//
//  or:
//
//          nil
type ParameterDefinitionsResponsePtrInput interface {
	pulumi.Input

	ToParameterDefinitionsResponsePtrOutput() ParameterDefinitionsResponsePtrOutput
	ToParameterDefinitionsResponsePtrOutputWithContext(context.Context) ParameterDefinitionsResponsePtrOutput
}

type parameterDefinitionsResponsePtrType ParameterDefinitionsResponseArgs

func ParameterDefinitionsResponsePtr(v *ParameterDefinitionsResponseArgs) ParameterDefinitionsResponsePtrInput {
	return (*parameterDefinitionsResponsePtrType)(v)
}

func (*parameterDefinitionsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitionsResponse)(nil)).Elem()
}

func (i *parameterDefinitionsResponsePtrType) ToParameterDefinitionsResponsePtrOutput() ParameterDefinitionsResponsePtrOutput {
	return i.ToParameterDefinitionsResponsePtrOutputWithContext(context.Background())
}

func (i *parameterDefinitionsResponsePtrType) ToParameterDefinitionsResponsePtrOutputWithContext(ctx context.Context) ParameterDefinitionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsResponsePtrOutput)
}

// The parameter definitions for parameters used in the policy. The keys are the parameter names.
type ParameterDefinitionsResponseOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsResponse)(nil)).Elem()
}

func (o ParameterDefinitionsResponseOutput) ToParameterDefinitionsResponseOutput() ParameterDefinitionsResponseOutput {
	return o
}

func (o ParameterDefinitionsResponseOutput) ToParameterDefinitionsResponseOutputWithContext(ctx context.Context) ParameterDefinitionsResponseOutput {
	return o
}

func (o ParameterDefinitionsResponseOutput) ToParameterDefinitionsResponsePtrOutput() ParameterDefinitionsResponsePtrOutput {
	return o.ToParameterDefinitionsResponsePtrOutputWithContext(context.Background())
}

func (o ParameterDefinitionsResponseOutput) ToParameterDefinitionsResponsePtrOutputWithContext(ctx context.Context) ParameterDefinitionsResponsePtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsResponse) *ParameterDefinitionsResponse {
		return &v
	}).(ParameterDefinitionsResponsePtrOutput)
}

type ParameterDefinitionsResponsePtrOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitionsResponse)(nil)).Elem()
}

func (o ParameterDefinitionsResponsePtrOutput) ToParameterDefinitionsResponsePtrOutput() ParameterDefinitionsResponsePtrOutput {
	return o
}

func (o ParameterDefinitionsResponsePtrOutput) ToParameterDefinitionsResponsePtrOutputWithContext(ctx context.Context) ParameterDefinitionsResponsePtrOutput {
	return o
}

func (o ParameterDefinitionsResponsePtrOutput) Elem() ParameterDefinitionsResponseOutput {
	return o.ApplyT(func(v *ParameterDefinitionsResponse) ParameterDefinitionsResponse { return *v }).(ParameterDefinitionsResponseOutput)
}

// The parameter values for the policy rule. The keys are the parameter names.
type ParameterValues struct {
}

// ParameterValuesInput is an input type that accepts ParameterValuesArgs and ParameterValuesOutput values.
// You can construct a concrete instance of `ParameterValuesInput` via:
//
//          ParameterValuesArgs{...}
type ParameterValuesInput interface {
	pulumi.Input

	ToParameterValuesOutput() ParameterValuesOutput
	ToParameterValuesOutputWithContext(context.Context) ParameterValuesOutput
}

// The parameter values for the policy rule. The keys are the parameter names.
type ParameterValuesArgs struct {
}

func (ParameterValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValues)(nil)).Elem()
}

func (i ParameterValuesArgs) ToParameterValuesOutput() ParameterValuesOutput {
	return i.ToParameterValuesOutputWithContext(context.Background())
}

func (i ParameterValuesArgs) ToParameterValuesOutputWithContext(ctx context.Context) ParameterValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesOutput)
}

func (i ParameterValuesArgs) ToParameterValuesPtrOutput() ParameterValuesPtrOutput {
	return i.ToParameterValuesPtrOutputWithContext(context.Background())
}

func (i ParameterValuesArgs) ToParameterValuesPtrOutputWithContext(ctx context.Context) ParameterValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesOutput).ToParameterValuesPtrOutputWithContext(ctx)
}

// ParameterValuesPtrInput is an input type that accepts ParameterValuesArgs, ParameterValuesPtr and ParameterValuesPtrOutput values.
// You can construct a concrete instance of `ParameterValuesPtrInput` via:
//
//          ParameterValuesArgs{...}
//
//  or:
//
//          nil
type ParameterValuesPtrInput interface {
	pulumi.Input

	ToParameterValuesPtrOutput() ParameterValuesPtrOutput
	ToParameterValuesPtrOutputWithContext(context.Context) ParameterValuesPtrOutput
}

type parameterValuesPtrType ParameterValuesArgs

func ParameterValuesPtr(v *ParameterValuesArgs) ParameterValuesPtrInput {
	return (*parameterValuesPtrType)(v)
}

func (*parameterValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterValues)(nil)).Elem()
}

func (i *parameterValuesPtrType) ToParameterValuesPtrOutput() ParameterValuesPtrOutput {
	return i.ToParameterValuesPtrOutputWithContext(context.Background())
}

func (i *parameterValuesPtrType) ToParameterValuesPtrOutputWithContext(ctx context.Context) ParameterValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesPtrOutput)
}

// The parameter values for the policy rule. The keys are the parameter names.
type ParameterValuesOutput struct{ *pulumi.OutputState }

func (ParameterValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValues)(nil)).Elem()
}

func (o ParameterValuesOutput) ToParameterValuesOutput() ParameterValuesOutput {
	return o
}

func (o ParameterValuesOutput) ToParameterValuesOutputWithContext(ctx context.Context) ParameterValuesOutput {
	return o
}

func (o ParameterValuesOutput) ToParameterValuesPtrOutput() ParameterValuesPtrOutput {
	return o.ToParameterValuesPtrOutputWithContext(context.Background())
}

func (o ParameterValuesOutput) ToParameterValuesPtrOutputWithContext(ctx context.Context) ParameterValuesPtrOutput {
	return o.ApplyT(func(v ParameterValues) *ParameterValues {
		return &v
	}).(ParameterValuesPtrOutput)
}

type ParameterValuesPtrOutput struct{ *pulumi.OutputState }

func (ParameterValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterValues)(nil)).Elem()
}

func (o ParameterValuesPtrOutput) ToParameterValuesPtrOutput() ParameterValuesPtrOutput {
	return o
}

func (o ParameterValuesPtrOutput) ToParameterValuesPtrOutputWithContext(ctx context.Context) ParameterValuesPtrOutput {
	return o
}

func (o ParameterValuesPtrOutput) Elem() ParameterValuesOutput {
	return o.ApplyT(func(v *ParameterValues) ParameterValues { return *v }).(ParameterValuesOutput)
}

// The parameter values for the policy rule. The keys are the parameter names.
type ParameterValuesResponse struct {
}

// ParameterValuesResponseInput is an input type that accepts ParameterValuesResponseArgs and ParameterValuesResponseOutput values.
// You can construct a concrete instance of `ParameterValuesResponseInput` via:
//
//          ParameterValuesResponseArgs{...}
type ParameterValuesResponseInput interface {
	pulumi.Input

	ToParameterValuesResponseOutput() ParameterValuesResponseOutput
	ToParameterValuesResponseOutputWithContext(context.Context) ParameterValuesResponseOutput
}

// The parameter values for the policy rule. The keys are the parameter names.
type ParameterValuesResponseArgs struct {
}

func (ParameterValuesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValuesResponse)(nil)).Elem()
}

func (i ParameterValuesResponseArgs) ToParameterValuesResponseOutput() ParameterValuesResponseOutput {
	return i.ToParameterValuesResponseOutputWithContext(context.Background())
}

func (i ParameterValuesResponseArgs) ToParameterValuesResponseOutputWithContext(ctx context.Context) ParameterValuesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesResponseOutput)
}

func (i ParameterValuesResponseArgs) ToParameterValuesResponsePtrOutput() ParameterValuesResponsePtrOutput {
	return i.ToParameterValuesResponsePtrOutputWithContext(context.Background())
}

func (i ParameterValuesResponseArgs) ToParameterValuesResponsePtrOutputWithContext(ctx context.Context) ParameterValuesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesResponseOutput).ToParameterValuesResponsePtrOutputWithContext(ctx)
}

// ParameterValuesResponsePtrInput is an input type that accepts ParameterValuesResponseArgs, ParameterValuesResponsePtr and ParameterValuesResponsePtrOutput values.
// You can construct a concrete instance of `ParameterValuesResponsePtrInput` via:
//
//          ParameterValuesResponseArgs{...}
//
//  or:
//
//          nil
type ParameterValuesResponsePtrInput interface {
	pulumi.Input

	ToParameterValuesResponsePtrOutput() ParameterValuesResponsePtrOutput
	ToParameterValuesResponsePtrOutputWithContext(context.Context) ParameterValuesResponsePtrOutput
}

type parameterValuesResponsePtrType ParameterValuesResponseArgs

func ParameterValuesResponsePtr(v *ParameterValuesResponseArgs) ParameterValuesResponsePtrInput {
	return (*parameterValuesResponsePtrType)(v)
}

func (*parameterValuesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterValuesResponse)(nil)).Elem()
}

func (i *parameterValuesResponsePtrType) ToParameterValuesResponsePtrOutput() ParameterValuesResponsePtrOutput {
	return i.ToParameterValuesResponsePtrOutputWithContext(context.Background())
}

func (i *parameterValuesResponsePtrType) ToParameterValuesResponsePtrOutputWithContext(ctx context.Context) ParameterValuesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesResponsePtrOutput)
}

// The parameter values for the policy rule. The keys are the parameter names.
type ParameterValuesResponseOutput struct{ *pulumi.OutputState }

func (ParameterValuesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValuesResponse)(nil)).Elem()
}

func (o ParameterValuesResponseOutput) ToParameterValuesResponseOutput() ParameterValuesResponseOutput {
	return o
}

func (o ParameterValuesResponseOutput) ToParameterValuesResponseOutputWithContext(ctx context.Context) ParameterValuesResponseOutput {
	return o
}

func (o ParameterValuesResponseOutput) ToParameterValuesResponsePtrOutput() ParameterValuesResponsePtrOutput {
	return o.ToParameterValuesResponsePtrOutputWithContext(context.Background())
}

func (o ParameterValuesResponseOutput) ToParameterValuesResponsePtrOutputWithContext(ctx context.Context) ParameterValuesResponsePtrOutput {
	return o.ApplyT(func(v ParameterValuesResponse) *ParameterValuesResponse {
		return &v
	}).(ParameterValuesResponsePtrOutput)
}

type ParameterValuesResponsePtrOutput struct{ *pulumi.OutputState }

func (ParameterValuesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterValuesResponse)(nil)).Elem()
}

func (o ParameterValuesResponsePtrOutput) ToParameterValuesResponsePtrOutput() ParameterValuesResponsePtrOutput {
	return o
}

func (o ParameterValuesResponsePtrOutput) ToParameterValuesResponsePtrOutputWithContext(ctx context.Context) ParameterValuesResponsePtrOutput {
	return o
}

func (o ParameterValuesResponsePtrOutput) Elem() ParameterValuesResponseOutput {
	return o.ApplyT(func(v *ParameterValuesResponse) ParameterValuesResponse { return *v }).(ParameterValuesResponseOutput)
}

// The policy definition.
type PolicyDefinitionType struct {
	// The name of the policy definition.
	Name string `pulumi:"name"`
	// The policy definition properties.
	Properties PolicyDefinitionPropertiesResponse `pulumi:"properties"`
	// The type of the resource (Microsoft.Authorization/policyDefinitions).
	Type string `pulumi:"type"`
}

// PolicyDefinitionTypeInput is an input type that accepts PolicyDefinitionTypeArgs and PolicyDefinitionTypeOutput values.
// You can construct a concrete instance of `PolicyDefinitionTypeInput` via:
//
//          PolicyDefinitionTypeArgs{...}
type PolicyDefinitionTypeInput interface {
	pulumi.Input

	ToPolicyDefinitionTypeOutput() PolicyDefinitionTypeOutput
	ToPolicyDefinitionTypeOutputWithContext(context.Context) PolicyDefinitionTypeOutput
}

// The policy definition.
type PolicyDefinitionTypeArgs struct {
	// The name of the policy definition.
	Name pulumi.StringInput `pulumi:"name"`
	// The policy definition properties.
	Properties PolicyDefinitionPropertiesResponseInput `pulumi:"properties"`
	// The type of the resource (Microsoft.Authorization/policyDefinitions).
	Type pulumi.StringInput `pulumi:"type"`
}

func (PolicyDefinitionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionType)(nil)).Elem()
}

func (i PolicyDefinitionTypeArgs) ToPolicyDefinitionTypeOutput() PolicyDefinitionTypeOutput {
	return i.ToPolicyDefinitionTypeOutputWithContext(context.Background())
}

func (i PolicyDefinitionTypeArgs) ToPolicyDefinitionTypeOutputWithContext(ctx context.Context) PolicyDefinitionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionTypeOutput)
}

// The policy definition.
type PolicyDefinitionTypeOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionType)(nil)).Elem()
}

func (o PolicyDefinitionTypeOutput) ToPolicyDefinitionTypeOutput() PolicyDefinitionTypeOutput {
	return o
}

func (o PolicyDefinitionTypeOutput) ToPolicyDefinitionTypeOutputWithContext(ctx context.Context) PolicyDefinitionTypeOutput {
	return o
}

// The name of the policy definition.
func (o PolicyDefinitionTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionType) string { return v.Name }).(pulumi.StringOutput)
}

// The policy definition properties.
func (o PolicyDefinitionTypeOutput) Properties() PolicyDefinitionPropertiesResponseOutput {
	return o.ApplyT(func(v PolicyDefinitionType) PolicyDefinitionPropertiesResponse { return v.Properties }).(PolicyDefinitionPropertiesResponseOutput)
}

// The type of the resource (Microsoft.Authorization/policyDefinitions).
func (o PolicyDefinitionTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionType) string { return v.Type }).(pulumi.StringOutput)
}

// The policy definition group.
type PolicyDefinitionGroup struct {
	// A resource ID of a resource that contains additional metadata about the group.
	AdditionalMetadataId *string `pulumi:"additionalMetadataId"`
	// The group's category.
	Category *string `pulumi:"category"`
	// The group's description.
	Description *string `pulumi:"description"`
	// The group's display name.
	DisplayName *string `pulumi:"displayName"`
	// The name of the group.
	Name string `pulumi:"name"`
}

// PolicyDefinitionGroupInput is an input type that accepts PolicyDefinitionGroupArgs and PolicyDefinitionGroupOutput values.
// You can construct a concrete instance of `PolicyDefinitionGroupInput` via:
//
//          PolicyDefinitionGroupArgs{...}
type PolicyDefinitionGroupInput interface {
	pulumi.Input

	ToPolicyDefinitionGroupOutput() PolicyDefinitionGroupOutput
	ToPolicyDefinitionGroupOutputWithContext(context.Context) PolicyDefinitionGroupOutput
}

// The policy definition group.
type PolicyDefinitionGroupArgs struct {
	// A resource ID of a resource that contains additional metadata about the group.
	AdditionalMetadataId pulumi.StringPtrInput `pulumi:"additionalMetadataId"`
	// The group's category.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// The group's description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The group's display name.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The name of the group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (PolicyDefinitionGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionGroup)(nil)).Elem()
}

func (i PolicyDefinitionGroupArgs) ToPolicyDefinitionGroupOutput() PolicyDefinitionGroupOutput {
	return i.ToPolicyDefinitionGroupOutputWithContext(context.Background())
}

func (i PolicyDefinitionGroupArgs) ToPolicyDefinitionGroupOutputWithContext(ctx context.Context) PolicyDefinitionGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionGroupOutput)
}

// PolicyDefinitionGroupArrayInput is an input type that accepts PolicyDefinitionGroupArray and PolicyDefinitionGroupArrayOutput values.
// You can construct a concrete instance of `PolicyDefinitionGroupArrayInput` via:
//
//          PolicyDefinitionGroupArray{ PolicyDefinitionGroupArgs{...} }
type PolicyDefinitionGroupArrayInput interface {
	pulumi.Input

	ToPolicyDefinitionGroupArrayOutput() PolicyDefinitionGroupArrayOutput
	ToPolicyDefinitionGroupArrayOutputWithContext(context.Context) PolicyDefinitionGroupArrayOutput
}

type PolicyDefinitionGroupArray []PolicyDefinitionGroupInput

func (PolicyDefinitionGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionGroup)(nil)).Elem()
}

func (i PolicyDefinitionGroupArray) ToPolicyDefinitionGroupArrayOutput() PolicyDefinitionGroupArrayOutput {
	return i.ToPolicyDefinitionGroupArrayOutputWithContext(context.Background())
}

func (i PolicyDefinitionGroupArray) ToPolicyDefinitionGroupArrayOutputWithContext(ctx context.Context) PolicyDefinitionGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionGroupArrayOutput)
}

// The policy definition group.
type PolicyDefinitionGroupOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionGroup)(nil)).Elem()
}

func (o PolicyDefinitionGroupOutput) ToPolicyDefinitionGroupOutput() PolicyDefinitionGroupOutput {
	return o
}

func (o PolicyDefinitionGroupOutput) ToPolicyDefinitionGroupOutputWithContext(ctx context.Context) PolicyDefinitionGroupOutput {
	return o
}

// A resource ID of a resource that contains additional metadata about the group.
func (o PolicyDefinitionGroupOutput) AdditionalMetadataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) *string { return v.AdditionalMetadataId }).(pulumi.StringPtrOutput)
}

// The group's category.
func (o PolicyDefinitionGroupOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// The group's description.
func (o PolicyDefinitionGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The group's display name.
func (o PolicyDefinitionGroupOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the group.
func (o PolicyDefinitionGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) string { return v.Name }).(pulumi.StringOutput)
}

type PolicyDefinitionGroupArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionGroup)(nil)).Elem()
}

func (o PolicyDefinitionGroupArrayOutput) ToPolicyDefinitionGroupArrayOutput() PolicyDefinitionGroupArrayOutput {
	return o
}

func (o PolicyDefinitionGroupArrayOutput) ToPolicyDefinitionGroupArrayOutputWithContext(ctx context.Context) PolicyDefinitionGroupArrayOutput {
	return o
}

func (o PolicyDefinitionGroupArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionGroup {
		return vs[0].([]PolicyDefinitionGroup)[vs[1].(int)]
	}).(PolicyDefinitionGroupOutput)
}

// The policy definition group.
type PolicyDefinitionGroupResponse struct {
	// A resource ID of a resource that contains additional metadata about the group.
	AdditionalMetadataId *string `pulumi:"additionalMetadataId"`
	// The group's category.
	Category *string `pulumi:"category"`
	// The group's description.
	Description *string `pulumi:"description"`
	// The group's display name.
	DisplayName *string `pulumi:"displayName"`
	// The name of the group.
	Name string `pulumi:"name"`
}

// PolicyDefinitionGroupResponseInput is an input type that accepts PolicyDefinitionGroupResponseArgs and PolicyDefinitionGroupResponseOutput values.
// You can construct a concrete instance of `PolicyDefinitionGroupResponseInput` via:
//
//          PolicyDefinitionGroupResponseArgs{...}
type PolicyDefinitionGroupResponseInput interface {
	pulumi.Input

	ToPolicyDefinitionGroupResponseOutput() PolicyDefinitionGroupResponseOutput
	ToPolicyDefinitionGroupResponseOutputWithContext(context.Context) PolicyDefinitionGroupResponseOutput
}

// The policy definition group.
type PolicyDefinitionGroupResponseArgs struct {
	// A resource ID of a resource that contains additional metadata about the group.
	AdditionalMetadataId pulumi.StringPtrInput `pulumi:"additionalMetadataId"`
	// The group's category.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// The group's description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The group's display name.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The name of the group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (PolicyDefinitionGroupResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionGroupResponse)(nil)).Elem()
}

func (i PolicyDefinitionGroupResponseArgs) ToPolicyDefinitionGroupResponseOutput() PolicyDefinitionGroupResponseOutput {
	return i.ToPolicyDefinitionGroupResponseOutputWithContext(context.Background())
}

func (i PolicyDefinitionGroupResponseArgs) ToPolicyDefinitionGroupResponseOutputWithContext(ctx context.Context) PolicyDefinitionGroupResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionGroupResponseOutput)
}

// PolicyDefinitionGroupResponseArrayInput is an input type that accepts PolicyDefinitionGroupResponseArray and PolicyDefinitionGroupResponseArrayOutput values.
// You can construct a concrete instance of `PolicyDefinitionGroupResponseArrayInput` via:
//
//          PolicyDefinitionGroupResponseArray{ PolicyDefinitionGroupResponseArgs{...} }
type PolicyDefinitionGroupResponseArrayInput interface {
	pulumi.Input

	ToPolicyDefinitionGroupResponseArrayOutput() PolicyDefinitionGroupResponseArrayOutput
	ToPolicyDefinitionGroupResponseArrayOutputWithContext(context.Context) PolicyDefinitionGroupResponseArrayOutput
}

type PolicyDefinitionGroupResponseArray []PolicyDefinitionGroupResponseInput

func (PolicyDefinitionGroupResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionGroupResponse)(nil)).Elem()
}

func (i PolicyDefinitionGroupResponseArray) ToPolicyDefinitionGroupResponseArrayOutput() PolicyDefinitionGroupResponseArrayOutput {
	return i.ToPolicyDefinitionGroupResponseArrayOutputWithContext(context.Background())
}

func (i PolicyDefinitionGroupResponseArray) ToPolicyDefinitionGroupResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionGroupResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionGroupResponseArrayOutput)
}

// The policy definition group.
type PolicyDefinitionGroupResponseOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionGroupResponse)(nil)).Elem()
}

func (o PolicyDefinitionGroupResponseOutput) ToPolicyDefinitionGroupResponseOutput() PolicyDefinitionGroupResponseOutput {
	return o
}

func (o PolicyDefinitionGroupResponseOutput) ToPolicyDefinitionGroupResponseOutputWithContext(ctx context.Context) PolicyDefinitionGroupResponseOutput {
	return o
}

// A resource ID of a resource that contains additional metadata about the group.
func (o PolicyDefinitionGroupResponseOutput) AdditionalMetadataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) *string { return v.AdditionalMetadataId }).(pulumi.StringPtrOutput)
}

// The group's category.
func (o PolicyDefinitionGroupResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// The group's description.
func (o PolicyDefinitionGroupResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The group's display name.
func (o PolicyDefinitionGroupResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the group.
func (o PolicyDefinitionGroupResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) string { return v.Name }).(pulumi.StringOutput)
}

type PolicyDefinitionGroupResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionGroupResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionGroupResponse)(nil)).Elem()
}

func (o PolicyDefinitionGroupResponseArrayOutput) ToPolicyDefinitionGroupResponseArrayOutput() PolicyDefinitionGroupResponseArrayOutput {
	return o
}

func (o PolicyDefinitionGroupResponseArrayOutput) ToPolicyDefinitionGroupResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionGroupResponseArrayOutput {
	return o
}

func (o PolicyDefinitionGroupResponseArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionGroupResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionGroupResponse {
		return vs[0].([]PolicyDefinitionGroupResponse)[vs[1].(int)]
	}).(PolicyDefinitionGroupResponseOutput)
}

// The policy definition properties.
type PolicyDefinitionProperties struct {
	// The policy definition description.
	Description *string `pulumi:"description"`
	// The display name of the policy definition.
	DisplayName *string `pulumi:"displayName"`
	// The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata map[string]string `pulumi:"metadata"`
	// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
	Mode *string `pulumi:"mode"`
	// The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
	Parameters *ParameterDefinitions `pulumi:"parameters"`
	// The policy rule.
	PolicyRule map[string]string `pulumi:"policyRule"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType *string `pulumi:"policyType"`
}

// PolicyDefinitionPropertiesInput is an input type that accepts PolicyDefinitionPropertiesArgs and PolicyDefinitionPropertiesOutput values.
// You can construct a concrete instance of `PolicyDefinitionPropertiesInput` via:
//
//          PolicyDefinitionPropertiesArgs{...}
type PolicyDefinitionPropertiesInput interface {
	pulumi.Input

	ToPolicyDefinitionPropertiesOutput() PolicyDefinitionPropertiesOutput
	ToPolicyDefinitionPropertiesOutputWithContext(context.Context) PolicyDefinitionPropertiesOutput
}

// The policy definition properties.
type PolicyDefinitionPropertiesArgs struct {
	// The policy definition description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The display name of the policy definition.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
	Parameters ParameterDefinitionsPtrInput `pulumi:"parameters"`
	// The policy rule.
	PolicyRule pulumi.StringMapInput `pulumi:"policyRule"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType pulumi.StringPtrInput `pulumi:"policyType"`
}

func (PolicyDefinitionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionProperties)(nil)).Elem()
}

func (i PolicyDefinitionPropertiesArgs) ToPolicyDefinitionPropertiesOutput() PolicyDefinitionPropertiesOutput {
	return i.ToPolicyDefinitionPropertiesOutputWithContext(context.Background())
}

func (i PolicyDefinitionPropertiesArgs) ToPolicyDefinitionPropertiesOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionPropertiesOutput)
}

func (i PolicyDefinitionPropertiesArgs) ToPolicyDefinitionPropertiesPtrOutput() PolicyDefinitionPropertiesPtrOutput {
	return i.ToPolicyDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (i PolicyDefinitionPropertiesArgs) ToPolicyDefinitionPropertiesPtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionPropertiesOutput).ToPolicyDefinitionPropertiesPtrOutputWithContext(ctx)
}

// PolicyDefinitionPropertiesPtrInput is an input type that accepts PolicyDefinitionPropertiesArgs, PolicyDefinitionPropertiesPtr and PolicyDefinitionPropertiesPtrOutput values.
// You can construct a concrete instance of `PolicyDefinitionPropertiesPtrInput` via:
//
//          PolicyDefinitionPropertiesArgs{...}
//
//  or:
//
//          nil
type PolicyDefinitionPropertiesPtrInput interface {
	pulumi.Input

	ToPolicyDefinitionPropertiesPtrOutput() PolicyDefinitionPropertiesPtrOutput
	ToPolicyDefinitionPropertiesPtrOutputWithContext(context.Context) PolicyDefinitionPropertiesPtrOutput
}

type policyDefinitionPropertiesPtrType PolicyDefinitionPropertiesArgs

func PolicyDefinitionPropertiesPtr(v *PolicyDefinitionPropertiesArgs) PolicyDefinitionPropertiesPtrInput {
	return (*policyDefinitionPropertiesPtrType)(v)
}

func (*policyDefinitionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyDefinitionProperties)(nil)).Elem()
}

func (i *policyDefinitionPropertiesPtrType) ToPolicyDefinitionPropertiesPtrOutput() PolicyDefinitionPropertiesPtrOutput {
	return i.ToPolicyDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (i *policyDefinitionPropertiesPtrType) ToPolicyDefinitionPropertiesPtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionPropertiesPtrOutput)
}

// The policy definition properties.
type PolicyDefinitionPropertiesOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionProperties)(nil)).Elem()
}

func (o PolicyDefinitionPropertiesOutput) ToPolicyDefinitionPropertiesOutput() PolicyDefinitionPropertiesOutput {
	return o
}

func (o PolicyDefinitionPropertiesOutput) ToPolicyDefinitionPropertiesOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesOutput {
	return o
}

func (o PolicyDefinitionPropertiesOutput) ToPolicyDefinitionPropertiesPtrOutput() PolicyDefinitionPropertiesPtrOutput {
	return o.ToPolicyDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (o PolicyDefinitionPropertiesOutput) ToPolicyDefinitionPropertiesPtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionProperties) *PolicyDefinitionProperties {
		return &v
	}).(PolicyDefinitionPropertiesPtrOutput)
}

// The policy definition description.
func (o PolicyDefinitionPropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionProperties) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the policy definition.
func (o PolicyDefinitionPropertiesOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionProperties) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
func (o PolicyDefinitionPropertiesOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v PolicyDefinitionProperties) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
func (o PolicyDefinitionPropertiesOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionProperties) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
func (o PolicyDefinitionPropertiesOutput) Parameters() ParameterDefinitionsPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionProperties) *ParameterDefinitions { return v.Parameters }).(ParameterDefinitionsPtrOutput)
}

// The policy rule.
func (o PolicyDefinitionPropertiesOutput) PolicyRule() pulumi.StringMapOutput {
	return o.ApplyT(func(v PolicyDefinitionProperties) map[string]string { return v.PolicyRule }).(pulumi.StringMapOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
func (o PolicyDefinitionPropertiesOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionProperties) *string { return v.PolicyType }).(pulumi.StringPtrOutput)
}

type PolicyDefinitionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyDefinitionProperties)(nil)).Elem()
}

func (o PolicyDefinitionPropertiesPtrOutput) ToPolicyDefinitionPropertiesPtrOutput() PolicyDefinitionPropertiesPtrOutput {
	return o
}

func (o PolicyDefinitionPropertiesPtrOutput) ToPolicyDefinitionPropertiesPtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesPtrOutput {
	return o
}

func (o PolicyDefinitionPropertiesPtrOutput) Elem() PolicyDefinitionPropertiesOutput {
	return o.ApplyT(func(v *PolicyDefinitionProperties) PolicyDefinitionProperties { return *v }).(PolicyDefinitionPropertiesOutput)
}

// The policy definition description.
func (o PolicyDefinitionPropertiesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The display name of the policy definition.
func (o PolicyDefinitionPropertiesPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
func (o PolicyDefinitionPropertiesPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyDefinitionProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
func (o PolicyDefinitionPropertiesPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
func (o PolicyDefinitionPropertiesPtrOutput) Parameters() ParameterDefinitionsPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionProperties) *ParameterDefinitions {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterDefinitionsPtrOutput)
}

// The policy rule.
func (o PolicyDefinitionPropertiesPtrOutput) PolicyRule() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyDefinitionProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.PolicyRule
	}).(pulumi.StringMapOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
func (o PolicyDefinitionPropertiesPtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// The policy definition properties.
type PolicyDefinitionPropertiesResponse struct {
	// The policy definition description.
	Description *string `pulumi:"description"`
	// The display name of the policy definition.
	DisplayName *string `pulumi:"displayName"`
	// The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata map[string]string `pulumi:"metadata"`
	// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
	Mode *string `pulumi:"mode"`
	// The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
	Parameters *ParameterDefinitionsResponse `pulumi:"parameters"`
	// The policy rule.
	PolicyRule map[string]string `pulumi:"policyRule"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType *string `pulumi:"policyType"`
}

// PolicyDefinitionPropertiesResponseInput is an input type that accepts PolicyDefinitionPropertiesResponseArgs and PolicyDefinitionPropertiesResponseOutput values.
// You can construct a concrete instance of `PolicyDefinitionPropertiesResponseInput` via:
//
//          PolicyDefinitionPropertiesResponseArgs{...}
type PolicyDefinitionPropertiesResponseInput interface {
	pulumi.Input

	ToPolicyDefinitionPropertiesResponseOutput() PolicyDefinitionPropertiesResponseOutput
	ToPolicyDefinitionPropertiesResponseOutputWithContext(context.Context) PolicyDefinitionPropertiesResponseOutput
}

// The policy definition properties.
type PolicyDefinitionPropertiesResponseArgs struct {
	// The policy definition description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The display name of the policy definition.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
	Parameters ParameterDefinitionsResponsePtrInput `pulumi:"parameters"`
	// The policy rule.
	PolicyRule pulumi.StringMapInput `pulumi:"policyRule"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType pulumi.StringPtrInput `pulumi:"policyType"`
}

func (PolicyDefinitionPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionPropertiesResponse)(nil)).Elem()
}

func (i PolicyDefinitionPropertiesResponseArgs) ToPolicyDefinitionPropertiesResponseOutput() PolicyDefinitionPropertiesResponseOutput {
	return i.ToPolicyDefinitionPropertiesResponseOutputWithContext(context.Background())
}

func (i PolicyDefinitionPropertiesResponseArgs) ToPolicyDefinitionPropertiesResponseOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionPropertiesResponseOutput)
}

func (i PolicyDefinitionPropertiesResponseArgs) ToPolicyDefinitionPropertiesResponsePtrOutput() PolicyDefinitionPropertiesResponsePtrOutput {
	return i.ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i PolicyDefinitionPropertiesResponseArgs) ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionPropertiesResponseOutput).ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(ctx)
}

// PolicyDefinitionPropertiesResponsePtrInput is an input type that accepts PolicyDefinitionPropertiesResponseArgs, PolicyDefinitionPropertiesResponsePtr and PolicyDefinitionPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `PolicyDefinitionPropertiesResponsePtrInput` via:
//
//          PolicyDefinitionPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type PolicyDefinitionPropertiesResponsePtrInput interface {
	pulumi.Input

	ToPolicyDefinitionPropertiesResponsePtrOutput() PolicyDefinitionPropertiesResponsePtrOutput
	ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(context.Context) PolicyDefinitionPropertiesResponsePtrOutput
}

type policyDefinitionPropertiesResponsePtrType PolicyDefinitionPropertiesResponseArgs

func PolicyDefinitionPropertiesResponsePtr(v *PolicyDefinitionPropertiesResponseArgs) PolicyDefinitionPropertiesResponsePtrInput {
	return (*policyDefinitionPropertiesResponsePtrType)(v)
}

func (*policyDefinitionPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyDefinitionPropertiesResponse)(nil)).Elem()
}

func (i *policyDefinitionPropertiesResponsePtrType) ToPolicyDefinitionPropertiesResponsePtrOutput() PolicyDefinitionPropertiesResponsePtrOutput {
	return i.ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *policyDefinitionPropertiesResponsePtrType) ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionPropertiesResponsePtrOutput)
}

// The policy definition properties.
type PolicyDefinitionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionPropertiesResponse)(nil)).Elem()
}

func (o PolicyDefinitionPropertiesResponseOutput) ToPolicyDefinitionPropertiesResponseOutput() PolicyDefinitionPropertiesResponseOutput {
	return o
}

func (o PolicyDefinitionPropertiesResponseOutput) ToPolicyDefinitionPropertiesResponseOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponseOutput {
	return o
}

func (o PolicyDefinitionPropertiesResponseOutput) ToPolicyDefinitionPropertiesResponsePtrOutput() PolicyDefinitionPropertiesResponsePtrOutput {
	return o.ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o PolicyDefinitionPropertiesResponseOutput) ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) *PolicyDefinitionPropertiesResponse {
		return &v
	}).(PolicyDefinitionPropertiesResponsePtrOutput)
}

// The policy definition description.
func (o PolicyDefinitionPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the policy definition.
func (o PolicyDefinitionPropertiesResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
func (o PolicyDefinitionPropertiesResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
func (o PolicyDefinitionPropertiesResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
func (o PolicyDefinitionPropertiesResponseOutput) Parameters() ParameterDefinitionsResponsePtrOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) *ParameterDefinitionsResponse { return v.Parameters }).(ParameterDefinitionsResponsePtrOutput)
}

// The policy rule.
func (o PolicyDefinitionPropertiesResponseOutput) PolicyRule() pulumi.StringMapOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) map[string]string { return v.PolicyRule }).(pulumi.StringMapOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
func (o PolicyDefinitionPropertiesResponseOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) *string { return v.PolicyType }).(pulumi.StringPtrOutput)
}

type PolicyDefinitionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyDefinitionPropertiesResponse)(nil)).Elem()
}

func (o PolicyDefinitionPropertiesResponsePtrOutput) ToPolicyDefinitionPropertiesResponsePtrOutput() PolicyDefinitionPropertiesResponsePtrOutput {
	return o
}

func (o PolicyDefinitionPropertiesResponsePtrOutput) ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponsePtrOutput {
	return o
}

func (o PolicyDefinitionPropertiesResponsePtrOutput) Elem() PolicyDefinitionPropertiesResponseOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) PolicyDefinitionPropertiesResponse { return *v }).(PolicyDefinitionPropertiesResponseOutput)
}

// The policy definition description.
func (o PolicyDefinitionPropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The display name of the policy definition.
func (o PolicyDefinitionPropertiesResponsePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
func (o PolicyDefinitionPropertiesResponsePtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
func (o PolicyDefinitionPropertiesResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
func (o PolicyDefinitionPropertiesResponsePtrOutput) Parameters() ParameterDefinitionsResponsePtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) *ParameterDefinitionsResponse {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterDefinitionsResponsePtrOutput)
}

// The policy rule.
func (o PolicyDefinitionPropertiesResponsePtrOutput) PolicyRule() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.PolicyRule
	}).(pulumi.StringMapOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
func (o PolicyDefinitionPropertiesResponsePtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// The policy definition reference.
type PolicyDefinitionReference struct {
	// The name of the groups that this policy definition reference belongs to.
	GroupNames []string `pulumi:"groupNames"`
	// The parameter values for the referenced policy rule. The keys are the parameter names.
	Parameters *ParameterValues `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId string `pulumi:"policyDefinitionId"`
	// A unique id (within the policy set definition) for this policy definition reference.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
}

// PolicyDefinitionReferenceInput is an input type that accepts PolicyDefinitionReferenceArgs and PolicyDefinitionReferenceOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceInput` via:
//
//          PolicyDefinitionReferenceArgs{...}
type PolicyDefinitionReferenceInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceOutput() PolicyDefinitionReferenceOutput
	ToPolicyDefinitionReferenceOutputWithContext(context.Context) PolicyDefinitionReferenceOutput
}

// The policy definition reference.
type PolicyDefinitionReferenceArgs struct {
	// The name of the groups that this policy definition reference belongs to.
	GroupNames pulumi.StringArrayInput `pulumi:"groupNames"`
	// The parameter values for the referenced policy rule. The keys are the parameter names.
	Parameters ParameterValuesPtrInput `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId pulumi.StringInput `pulumi:"policyDefinitionId"`
	// A unique id (within the policy set definition) for this policy definition reference.
	PolicyDefinitionReferenceId pulumi.StringPtrInput `pulumi:"policyDefinitionReferenceId"`
}

func (PolicyDefinitionReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReference)(nil)).Elem()
}

func (i PolicyDefinitionReferenceArgs) ToPolicyDefinitionReferenceOutput() PolicyDefinitionReferenceOutput {
	return i.ToPolicyDefinitionReferenceOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceArgs) ToPolicyDefinitionReferenceOutputWithContext(ctx context.Context) PolicyDefinitionReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceOutput)
}

// PolicyDefinitionReferenceArrayInput is an input type that accepts PolicyDefinitionReferenceArray and PolicyDefinitionReferenceArrayOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceArrayInput` via:
//
//          PolicyDefinitionReferenceArray{ PolicyDefinitionReferenceArgs{...} }
type PolicyDefinitionReferenceArrayInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceArrayOutput() PolicyDefinitionReferenceArrayOutput
	ToPolicyDefinitionReferenceArrayOutputWithContext(context.Context) PolicyDefinitionReferenceArrayOutput
}

type PolicyDefinitionReferenceArray []PolicyDefinitionReferenceInput

func (PolicyDefinitionReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReference)(nil)).Elem()
}

func (i PolicyDefinitionReferenceArray) ToPolicyDefinitionReferenceArrayOutput() PolicyDefinitionReferenceArrayOutput {
	return i.ToPolicyDefinitionReferenceArrayOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceArray) ToPolicyDefinitionReferenceArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceArrayOutput)
}

// The policy definition reference.
type PolicyDefinitionReferenceOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReference)(nil)).Elem()
}

func (o PolicyDefinitionReferenceOutput) ToPolicyDefinitionReferenceOutput() PolicyDefinitionReferenceOutput {
	return o
}

func (o PolicyDefinitionReferenceOutput) ToPolicyDefinitionReferenceOutputWithContext(ctx context.Context) PolicyDefinitionReferenceOutput {
	return o
}

// The name of the groups that this policy definition reference belongs to.
func (o PolicyDefinitionReferenceOutput) GroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyDefinitionReference) []string { return v.GroupNames }).(pulumi.StringArrayOutput)
}

// The parameter values for the referenced policy rule. The keys are the parameter names.
func (o PolicyDefinitionReferenceOutput) Parameters() ParameterValuesPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionReference) *ParameterValues { return v.Parameters }).(ParameterValuesPtrOutput)
}

// The ID of the policy definition or policy set definition.
func (o PolicyDefinitionReferenceOutput) PolicyDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionReference) string { return v.PolicyDefinitionId }).(pulumi.StringOutput)
}

// A unique id (within the policy set definition) for this policy definition reference.
func (o PolicyDefinitionReferenceOutput) PolicyDefinitionReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionReference) *string { return v.PolicyDefinitionReferenceId }).(pulumi.StringPtrOutput)
}

type PolicyDefinitionReferenceArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReference)(nil)).Elem()
}

func (o PolicyDefinitionReferenceArrayOutput) ToPolicyDefinitionReferenceArrayOutput() PolicyDefinitionReferenceArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceArrayOutput) ToPolicyDefinitionReferenceArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionReference {
		return vs[0].([]PolicyDefinitionReference)[vs[1].(int)]
	}).(PolicyDefinitionReferenceOutput)
}

// The policy definition reference.
type PolicyDefinitionReferenceResponse struct {
	// The name of the groups that this policy definition reference belongs to.
	GroupNames []string `pulumi:"groupNames"`
	// The parameter values for the referenced policy rule. The keys are the parameter names.
	Parameters *ParameterValuesResponse `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId string `pulumi:"policyDefinitionId"`
	// A unique id (within the policy set definition) for this policy definition reference.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
}

// PolicyDefinitionReferenceResponseInput is an input type that accepts PolicyDefinitionReferenceResponseArgs and PolicyDefinitionReferenceResponseOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceResponseInput` via:
//
//          PolicyDefinitionReferenceResponseArgs{...}
type PolicyDefinitionReferenceResponseInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceResponseOutput() PolicyDefinitionReferenceResponseOutput
	ToPolicyDefinitionReferenceResponseOutputWithContext(context.Context) PolicyDefinitionReferenceResponseOutput
}

// The policy definition reference.
type PolicyDefinitionReferenceResponseArgs struct {
	// The name of the groups that this policy definition reference belongs to.
	GroupNames pulumi.StringArrayInput `pulumi:"groupNames"`
	// The parameter values for the referenced policy rule. The keys are the parameter names.
	Parameters ParameterValuesResponsePtrInput `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId pulumi.StringInput `pulumi:"policyDefinitionId"`
	// A unique id (within the policy set definition) for this policy definition reference.
	PolicyDefinitionReferenceId pulumi.StringPtrInput `pulumi:"policyDefinitionReferenceId"`
}

func (PolicyDefinitionReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReferenceResponse)(nil)).Elem()
}

func (i PolicyDefinitionReferenceResponseArgs) ToPolicyDefinitionReferenceResponseOutput() PolicyDefinitionReferenceResponseOutput {
	return i.ToPolicyDefinitionReferenceResponseOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceResponseArgs) ToPolicyDefinitionReferenceResponseOutputWithContext(ctx context.Context) PolicyDefinitionReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceResponseOutput)
}

// PolicyDefinitionReferenceResponseArrayInput is an input type that accepts PolicyDefinitionReferenceResponseArray and PolicyDefinitionReferenceResponseArrayOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceResponseArrayInput` via:
//
//          PolicyDefinitionReferenceResponseArray{ PolicyDefinitionReferenceResponseArgs{...} }
type PolicyDefinitionReferenceResponseArrayInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceResponseArrayOutput() PolicyDefinitionReferenceResponseArrayOutput
	ToPolicyDefinitionReferenceResponseArrayOutputWithContext(context.Context) PolicyDefinitionReferenceResponseArrayOutput
}

type PolicyDefinitionReferenceResponseArray []PolicyDefinitionReferenceResponseInput

func (PolicyDefinitionReferenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReferenceResponse)(nil)).Elem()
}

func (i PolicyDefinitionReferenceResponseArray) ToPolicyDefinitionReferenceResponseArrayOutput() PolicyDefinitionReferenceResponseArrayOutput {
	return i.ToPolicyDefinitionReferenceResponseArrayOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceResponseArray) ToPolicyDefinitionReferenceResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceResponseArrayOutput)
}

// The policy definition reference.
type PolicyDefinitionReferenceResponseOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReferenceResponse)(nil)).Elem()
}

func (o PolicyDefinitionReferenceResponseOutput) ToPolicyDefinitionReferenceResponseOutput() PolicyDefinitionReferenceResponseOutput {
	return o
}

func (o PolicyDefinitionReferenceResponseOutput) ToPolicyDefinitionReferenceResponseOutputWithContext(ctx context.Context) PolicyDefinitionReferenceResponseOutput {
	return o
}

// The name of the groups that this policy definition reference belongs to.
func (o PolicyDefinitionReferenceResponseOutput) GroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) []string { return v.GroupNames }).(pulumi.StringArrayOutput)
}

// The parameter values for the referenced policy rule. The keys are the parameter names.
func (o PolicyDefinitionReferenceResponseOutput) Parameters() ParameterValuesResponsePtrOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) *ParameterValuesResponse { return v.Parameters }).(ParameterValuesResponsePtrOutput)
}

// The ID of the policy definition or policy set definition.
func (o PolicyDefinitionReferenceResponseOutput) PolicyDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) string { return v.PolicyDefinitionId }).(pulumi.StringOutput)
}

// A unique id (within the policy set definition) for this policy definition reference.
func (o PolicyDefinitionReferenceResponseOutput) PolicyDefinitionReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) *string { return v.PolicyDefinitionReferenceId }).(pulumi.StringPtrOutput)
}

type PolicyDefinitionReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReferenceResponse)(nil)).Elem()
}

func (o PolicyDefinitionReferenceResponseArrayOutput) ToPolicyDefinitionReferenceResponseArrayOutput() PolicyDefinitionReferenceResponseArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceResponseArrayOutput) ToPolicyDefinitionReferenceResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceResponseArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceResponseArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionReferenceResponse {
		return vs[0].([]PolicyDefinitionReferenceResponse)[vs[1].(int)]
	}).(PolicyDefinitionReferenceResponseOutput)
}

// The policy set definition.
type PolicySetDefinitionType struct {
	// The name of the policy set definition.
	Name string `pulumi:"name"`
	// The policy definition properties.
	Properties PolicySetDefinitionPropertiesResponse `pulumi:"properties"`
	// The type of the resource (Microsoft.Authorization/policySetDefinitions).
	Type string `pulumi:"type"`
}

// PolicySetDefinitionTypeInput is an input type that accepts PolicySetDefinitionTypeArgs and PolicySetDefinitionTypeOutput values.
// You can construct a concrete instance of `PolicySetDefinitionTypeInput` via:
//
//          PolicySetDefinitionTypeArgs{...}
type PolicySetDefinitionTypeInput interface {
	pulumi.Input

	ToPolicySetDefinitionTypeOutput() PolicySetDefinitionTypeOutput
	ToPolicySetDefinitionTypeOutputWithContext(context.Context) PolicySetDefinitionTypeOutput
}

// The policy set definition.
type PolicySetDefinitionTypeArgs struct {
	// The name of the policy set definition.
	Name pulumi.StringInput `pulumi:"name"`
	// The policy definition properties.
	Properties PolicySetDefinitionPropertiesResponseInput `pulumi:"properties"`
	// The type of the resource (Microsoft.Authorization/policySetDefinitions).
	Type pulumi.StringInput `pulumi:"type"`
}

func (PolicySetDefinitionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySetDefinitionType)(nil)).Elem()
}

func (i PolicySetDefinitionTypeArgs) ToPolicySetDefinitionTypeOutput() PolicySetDefinitionTypeOutput {
	return i.ToPolicySetDefinitionTypeOutputWithContext(context.Background())
}

func (i PolicySetDefinitionTypeArgs) ToPolicySetDefinitionTypeOutputWithContext(ctx context.Context) PolicySetDefinitionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetDefinitionTypeOutput)
}

// The policy set definition.
type PolicySetDefinitionTypeOutput struct{ *pulumi.OutputState }

func (PolicySetDefinitionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySetDefinitionType)(nil)).Elem()
}

func (o PolicySetDefinitionTypeOutput) ToPolicySetDefinitionTypeOutput() PolicySetDefinitionTypeOutput {
	return o
}

func (o PolicySetDefinitionTypeOutput) ToPolicySetDefinitionTypeOutputWithContext(ctx context.Context) PolicySetDefinitionTypeOutput {
	return o
}

// The name of the policy set definition.
func (o PolicySetDefinitionTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicySetDefinitionType) string { return v.Name }).(pulumi.StringOutput)
}

// The policy definition properties.
func (o PolicySetDefinitionTypeOutput) Properties() PolicySetDefinitionPropertiesResponseOutput {
	return o.ApplyT(func(v PolicySetDefinitionType) PolicySetDefinitionPropertiesResponse { return v.Properties }).(PolicySetDefinitionPropertiesResponseOutput)
}

// The type of the resource (Microsoft.Authorization/policySetDefinitions).
func (o PolicySetDefinitionTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PolicySetDefinitionType) string { return v.Type }).(pulumi.StringOutput)
}

// The policy set definition properties.
type PolicySetDefinitionProperties struct {
	// The policy set definition description.
	Description *string `pulumi:"description"`
	// The display name of the policy set definition.
	DisplayName *string `pulumi:"displayName"`
	// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata map[string]string `pulumi:"metadata"`
	// The policy set definition parameters that can be used in policy definition references.
	Parameters *ParameterDefinitions `pulumi:"parameters"`
	// The metadata describing groups of policy definition references within the policy set definition.
	PolicyDefinitionGroups []PolicyDefinitionGroup `pulumi:"policyDefinitionGroups"`
	// An array of policy definition references.
	PolicyDefinitions []PolicyDefinitionReference `pulumi:"policyDefinitions"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType *string `pulumi:"policyType"`
}

// PolicySetDefinitionPropertiesInput is an input type that accepts PolicySetDefinitionPropertiesArgs and PolicySetDefinitionPropertiesOutput values.
// You can construct a concrete instance of `PolicySetDefinitionPropertiesInput` via:
//
//          PolicySetDefinitionPropertiesArgs{...}
type PolicySetDefinitionPropertiesInput interface {
	pulumi.Input

	ToPolicySetDefinitionPropertiesOutput() PolicySetDefinitionPropertiesOutput
	ToPolicySetDefinitionPropertiesOutputWithContext(context.Context) PolicySetDefinitionPropertiesOutput
}

// The policy set definition properties.
type PolicySetDefinitionPropertiesArgs struct {
	// The policy set definition description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The display name of the policy set definition.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// The policy set definition parameters that can be used in policy definition references.
	Parameters ParameterDefinitionsPtrInput `pulumi:"parameters"`
	// The metadata describing groups of policy definition references within the policy set definition.
	PolicyDefinitionGroups PolicyDefinitionGroupArrayInput `pulumi:"policyDefinitionGroups"`
	// An array of policy definition references.
	PolicyDefinitions PolicyDefinitionReferenceArrayInput `pulumi:"policyDefinitions"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType pulumi.StringPtrInput `pulumi:"policyType"`
}

func (PolicySetDefinitionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySetDefinitionProperties)(nil)).Elem()
}

func (i PolicySetDefinitionPropertiesArgs) ToPolicySetDefinitionPropertiesOutput() PolicySetDefinitionPropertiesOutput {
	return i.ToPolicySetDefinitionPropertiesOutputWithContext(context.Background())
}

func (i PolicySetDefinitionPropertiesArgs) ToPolicySetDefinitionPropertiesOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetDefinitionPropertiesOutput)
}

func (i PolicySetDefinitionPropertiesArgs) ToPolicySetDefinitionPropertiesPtrOutput() PolicySetDefinitionPropertiesPtrOutput {
	return i.ToPolicySetDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (i PolicySetDefinitionPropertiesArgs) ToPolicySetDefinitionPropertiesPtrOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetDefinitionPropertiesOutput).ToPolicySetDefinitionPropertiesPtrOutputWithContext(ctx)
}

// PolicySetDefinitionPropertiesPtrInput is an input type that accepts PolicySetDefinitionPropertiesArgs, PolicySetDefinitionPropertiesPtr and PolicySetDefinitionPropertiesPtrOutput values.
// You can construct a concrete instance of `PolicySetDefinitionPropertiesPtrInput` via:
//
//          PolicySetDefinitionPropertiesArgs{...}
//
//  or:
//
//          nil
type PolicySetDefinitionPropertiesPtrInput interface {
	pulumi.Input

	ToPolicySetDefinitionPropertiesPtrOutput() PolicySetDefinitionPropertiesPtrOutput
	ToPolicySetDefinitionPropertiesPtrOutputWithContext(context.Context) PolicySetDefinitionPropertiesPtrOutput
}

type policySetDefinitionPropertiesPtrType PolicySetDefinitionPropertiesArgs

func PolicySetDefinitionPropertiesPtr(v *PolicySetDefinitionPropertiesArgs) PolicySetDefinitionPropertiesPtrInput {
	return (*policySetDefinitionPropertiesPtrType)(v)
}

func (*policySetDefinitionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySetDefinitionProperties)(nil)).Elem()
}

func (i *policySetDefinitionPropertiesPtrType) ToPolicySetDefinitionPropertiesPtrOutput() PolicySetDefinitionPropertiesPtrOutput {
	return i.ToPolicySetDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (i *policySetDefinitionPropertiesPtrType) ToPolicySetDefinitionPropertiesPtrOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetDefinitionPropertiesPtrOutput)
}

// The policy set definition properties.
type PolicySetDefinitionPropertiesOutput struct{ *pulumi.OutputState }

func (PolicySetDefinitionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySetDefinitionProperties)(nil)).Elem()
}

func (o PolicySetDefinitionPropertiesOutput) ToPolicySetDefinitionPropertiesOutput() PolicySetDefinitionPropertiesOutput {
	return o
}

func (o PolicySetDefinitionPropertiesOutput) ToPolicySetDefinitionPropertiesOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesOutput {
	return o
}

func (o PolicySetDefinitionPropertiesOutput) ToPolicySetDefinitionPropertiesPtrOutput() PolicySetDefinitionPropertiesPtrOutput {
	return o.ToPolicySetDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (o PolicySetDefinitionPropertiesOutput) ToPolicySetDefinitionPropertiesPtrOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesPtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionProperties) *PolicySetDefinitionProperties {
		return &v
	}).(PolicySetDefinitionPropertiesPtrOutput)
}

// The policy set definition description.
func (o PolicySetDefinitionPropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionProperties) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the policy set definition.
func (o PolicySetDefinitionPropertiesOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionProperties) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
func (o PolicySetDefinitionPropertiesOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v PolicySetDefinitionProperties) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// The policy set definition parameters that can be used in policy definition references.
func (o PolicySetDefinitionPropertiesOutput) Parameters() ParameterDefinitionsPtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionProperties) *ParameterDefinitions { return v.Parameters }).(ParameterDefinitionsPtrOutput)
}

// The metadata describing groups of policy definition references within the policy set definition.
func (o PolicySetDefinitionPropertiesOutput) PolicyDefinitionGroups() PolicyDefinitionGroupArrayOutput {
	return o.ApplyT(func(v PolicySetDefinitionProperties) []PolicyDefinitionGroup { return v.PolicyDefinitionGroups }).(PolicyDefinitionGroupArrayOutput)
}

// An array of policy definition references.
func (o PolicySetDefinitionPropertiesOutput) PolicyDefinitions() PolicyDefinitionReferenceArrayOutput {
	return o.ApplyT(func(v PolicySetDefinitionProperties) []PolicyDefinitionReference { return v.PolicyDefinitions }).(PolicyDefinitionReferenceArrayOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
func (o PolicySetDefinitionPropertiesOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionProperties) *string { return v.PolicyType }).(pulumi.StringPtrOutput)
}

type PolicySetDefinitionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PolicySetDefinitionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySetDefinitionProperties)(nil)).Elem()
}

func (o PolicySetDefinitionPropertiesPtrOutput) ToPolicySetDefinitionPropertiesPtrOutput() PolicySetDefinitionPropertiesPtrOutput {
	return o
}

func (o PolicySetDefinitionPropertiesPtrOutput) ToPolicySetDefinitionPropertiesPtrOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesPtrOutput {
	return o
}

func (o PolicySetDefinitionPropertiesPtrOutput) Elem() PolicySetDefinitionPropertiesOutput {
	return o.ApplyT(func(v *PolicySetDefinitionProperties) PolicySetDefinitionProperties { return *v }).(PolicySetDefinitionPropertiesOutput)
}

// The policy set definition description.
func (o PolicySetDefinitionPropertiesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySetDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The display name of the policy set definition.
func (o PolicySetDefinitionPropertiesPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySetDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
func (o PolicySetDefinitionPropertiesPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicySetDefinitionProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// The policy set definition parameters that can be used in policy definition references.
func (o PolicySetDefinitionPropertiesPtrOutput) Parameters() ParameterDefinitionsPtrOutput {
	return o.ApplyT(func(v *PolicySetDefinitionProperties) *ParameterDefinitions {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterDefinitionsPtrOutput)
}

// The metadata describing groups of policy definition references within the policy set definition.
func (o PolicySetDefinitionPropertiesPtrOutput) PolicyDefinitionGroups() PolicyDefinitionGroupArrayOutput {
	return o.ApplyT(func(v *PolicySetDefinitionProperties) []PolicyDefinitionGroup {
		if v == nil {
			return nil
		}
		return v.PolicyDefinitionGroups
	}).(PolicyDefinitionGroupArrayOutput)
}

// An array of policy definition references.
func (o PolicySetDefinitionPropertiesPtrOutput) PolicyDefinitions() PolicyDefinitionReferenceArrayOutput {
	return o.ApplyT(func(v *PolicySetDefinitionProperties) []PolicyDefinitionReference {
		if v == nil {
			return nil
		}
		return v.PolicyDefinitions
	}).(PolicyDefinitionReferenceArrayOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
func (o PolicySetDefinitionPropertiesPtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySetDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// The policy set definition properties.
type PolicySetDefinitionPropertiesResponse struct {
	// The policy set definition description.
	Description *string `pulumi:"description"`
	// The display name of the policy set definition.
	DisplayName *string `pulumi:"displayName"`
	// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata map[string]string `pulumi:"metadata"`
	// The policy set definition parameters that can be used in policy definition references.
	Parameters *ParameterDefinitionsResponse `pulumi:"parameters"`
	// The metadata describing groups of policy definition references within the policy set definition.
	PolicyDefinitionGroups []PolicyDefinitionGroupResponse `pulumi:"policyDefinitionGroups"`
	// An array of policy definition references.
	PolicyDefinitions []PolicyDefinitionReferenceResponse `pulumi:"policyDefinitions"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType *string `pulumi:"policyType"`
}

// PolicySetDefinitionPropertiesResponseInput is an input type that accepts PolicySetDefinitionPropertiesResponseArgs and PolicySetDefinitionPropertiesResponseOutput values.
// You can construct a concrete instance of `PolicySetDefinitionPropertiesResponseInput` via:
//
//          PolicySetDefinitionPropertiesResponseArgs{...}
type PolicySetDefinitionPropertiesResponseInput interface {
	pulumi.Input

	ToPolicySetDefinitionPropertiesResponseOutput() PolicySetDefinitionPropertiesResponseOutput
	ToPolicySetDefinitionPropertiesResponseOutputWithContext(context.Context) PolicySetDefinitionPropertiesResponseOutput
}

// The policy set definition properties.
type PolicySetDefinitionPropertiesResponseArgs struct {
	// The policy set definition description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The display name of the policy set definition.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// The policy set definition parameters that can be used in policy definition references.
	Parameters ParameterDefinitionsResponsePtrInput `pulumi:"parameters"`
	// The metadata describing groups of policy definition references within the policy set definition.
	PolicyDefinitionGroups PolicyDefinitionGroupResponseArrayInput `pulumi:"policyDefinitionGroups"`
	// An array of policy definition references.
	PolicyDefinitions PolicyDefinitionReferenceResponseArrayInput `pulumi:"policyDefinitions"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType pulumi.StringPtrInput `pulumi:"policyType"`
}

func (PolicySetDefinitionPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySetDefinitionPropertiesResponse)(nil)).Elem()
}

func (i PolicySetDefinitionPropertiesResponseArgs) ToPolicySetDefinitionPropertiesResponseOutput() PolicySetDefinitionPropertiesResponseOutput {
	return i.ToPolicySetDefinitionPropertiesResponseOutputWithContext(context.Background())
}

func (i PolicySetDefinitionPropertiesResponseArgs) ToPolicySetDefinitionPropertiesResponseOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetDefinitionPropertiesResponseOutput)
}

func (i PolicySetDefinitionPropertiesResponseArgs) ToPolicySetDefinitionPropertiesResponsePtrOutput() PolicySetDefinitionPropertiesResponsePtrOutput {
	return i.ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i PolicySetDefinitionPropertiesResponseArgs) ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetDefinitionPropertiesResponseOutput).ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(ctx)
}

// PolicySetDefinitionPropertiesResponsePtrInput is an input type that accepts PolicySetDefinitionPropertiesResponseArgs, PolicySetDefinitionPropertiesResponsePtr and PolicySetDefinitionPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `PolicySetDefinitionPropertiesResponsePtrInput` via:
//
//          PolicySetDefinitionPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type PolicySetDefinitionPropertiesResponsePtrInput interface {
	pulumi.Input

	ToPolicySetDefinitionPropertiesResponsePtrOutput() PolicySetDefinitionPropertiesResponsePtrOutput
	ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(context.Context) PolicySetDefinitionPropertiesResponsePtrOutput
}

type policySetDefinitionPropertiesResponsePtrType PolicySetDefinitionPropertiesResponseArgs

func PolicySetDefinitionPropertiesResponsePtr(v *PolicySetDefinitionPropertiesResponseArgs) PolicySetDefinitionPropertiesResponsePtrInput {
	return (*policySetDefinitionPropertiesResponsePtrType)(v)
}

func (*policySetDefinitionPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySetDefinitionPropertiesResponse)(nil)).Elem()
}

func (i *policySetDefinitionPropertiesResponsePtrType) ToPolicySetDefinitionPropertiesResponsePtrOutput() PolicySetDefinitionPropertiesResponsePtrOutput {
	return i.ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *policySetDefinitionPropertiesResponsePtrType) ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetDefinitionPropertiesResponsePtrOutput)
}

// The policy set definition properties.
type PolicySetDefinitionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PolicySetDefinitionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySetDefinitionPropertiesResponse)(nil)).Elem()
}

func (o PolicySetDefinitionPropertiesResponseOutput) ToPolicySetDefinitionPropertiesResponseOutput() PolicySetDefinitionPropertiesResponseOutput {
	return o
}

func (o PolicySetDefinitionPropertiesResponseOutput) ToPolicySetDefinitionPropertiesResponseOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesResponseOutput {
	return o
}

func (o PolicySetDefinitionPropertiesResponseOutput) ToPolicySetDefinitionPropertiesResponsePtrOutput() PolicySetDefinitionPropertiesResponsePtrOutput {
	return o.ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o PolicySetDefinitionPropertiesResponseOutput) ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionPropertiesResponse) *PolicySetDefinitionPropertiesResponse {
		return &v
	}).(PolicySetDefinitionPropertiesResponsePtrOutput)
}

// The policy set definition description.
func (o PolicySetDefinitionPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the policy set definition.
func (o PolicySetDefinitionPropertiesResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionPropertiesResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
func (o PolicySetDefinitionPropertiesResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v PolicySetDefinitionPropertiesResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// The policy set definition parameters that can be used in policy definition references.
func (o PolicySetDefinitionPropertiesResponseOutput) Parameters() ParameterDefinitionsResponsePtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionPropertiesResponse) *ParameterDefinitionsResponse { return v.Parameters }).(ParameterDefinitionsResponsePtrOutput)
}

// The metadata describing groups of policy definition references within the policy set definition.
func (o PolicySetDefinitionPropertiesResponseOutput) PolicyDefinitionGroups() PolicyDefinitionGroupResponseArrayOutput {
	return o.ApplyT(func(v PolicySetDefinitionPropertiesResponse) []PolicyDefinitionGroupResponse {
		return v.PolicyDefinitionGroups
	}).(PolicyDefinitionGroupResponseArrayOutput)
}

// An array of policy definition references.
func (o PolicySetDefinitionPropertiesResponseOutput) PolicyDefinitions() PolicyDefinitionReferenceResponseArrayOutput {
	return o.ApplyT(func(v PolicySetDefinitionPropertiesResponse) []PolicyDefinitionReferenceResponse {
		return v.PolicyDefinitions
	}).(PolicyDefinitionReferenceResponseArrayOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
func (o PolicySetDefinitionPropertiesResponseOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionPropertiesResponse) *string { return v.PolicyType }).(pulumi.StringPtrOutput)
}

type PolicySetDefinitionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PolicySetDefinitionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySetDefinitionPropertiesResponse)(nil)).Elem()
}

func (o PolicySetDefinitionPropertiesResponsePtrOutput) ToPolicySetDefinitionPropertiesResponsePtrOutput() PolicySetDefinitionPropertiesResponsePtrOutput {
	return o
}

func (o PolicySetDefinitionPropertiesResponsePtrOutput) ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesResponsePtrOutput {
	return o
}

func (o PolicySetDefinitionPropertiesResponsePtrOutput) Elem() PolicySetDefinitionPropertiesResponseOutput {
	return o.ApplyT(func(v *PolicySetDefinitionPropertiesResponse) PolicySetDefinitionPropertiesResponse { return *v }).(PolicySetDefinitionPropertiesResponseOutput)
}

// The policy set definition description.
func (o PolicySetDefinitionPropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySetDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The display name of the policy set definition.
func (o PolicySetDefinitionPropertiesResponsePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySetDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
func (o PolicySetDefinitionPropertiesResponsePtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicySetDefinitionPropertiesResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// The policy set definition parameters that can be used in policy definition references.
func (o PolicySetDefinitionPropertiesResponsePtrOutput) Parameters() ParameterDefinitionsResponsePtrOutput {
	return o.ApplyT(func(v *PolicySetDefinitionPropertiesResponse) *ParameterDefinitionsResponse {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterDefinitionsResponsePtrOutput)
}

// The metadata describing groups of policy definition references within the policy set definition.
func (o PolicySetDefinitionPropertiesResponsePtrOutput) PolicyDefinitionGroups() PolicyDefinitionGroupResponseArrayOutput {
	return o.ApplyT(func(v *PolicySetDefinitionPropertiesResponse) []PolicyDefinitionGroupResponse {
		if v == nil {
			return nil
		}
		return v.PolicyDefinitionGroups
	}).(PolicyDefinitionGroupResponseArrayOutput)
}

// An array of policy definition references.
func (o PolicySetDefinitionPropertiesResponsePtrOutput) PolicyDefinitions() PolicyDefinitionReferenceResponseArrayOutput {
	return o.ApplyT(func(v *PolicySetDefinitionPropertiesResponse) []PolicyDefinitionReferenceResponse {
		if v == nil {
			return nil
		}
		return v.PolicyDefinitions
	}).(PolicyDefinitionReferenceResponseArrayOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
func (o PolicySetDefinitionPropertiesResponsePtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySetDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PolicyType
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LockTypeOutput{})
	pulumi.RegisterOutputType(ManagementLockOwnerOutput{})
	pulumi.RegisterOutputType(ManagementLockOwnerArrayOutput{})
	pulumi.RegisterOutputType(ManagementLockOwnerResponseOutput{})
	pulumi.RegisterOutputType(ManagementLockOwnerResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagementLockPropertiesOutput{})
	pulumi.RegisterOutputType(ManagementLockPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ManagementLockPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ManagementLockPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsPtrOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsResponseOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsResponsePtrOutput{})
	pulumi.RegisterOutputType(ParameterValuesOutput{})
	pulumi.RegisterOutputType(ParameterValuesPtrOutput{})
	pulumi.RegisterOutputType(ParameterValuesResponseOutput{})
	pulumi.RegisterOutputType(ParameterValuesResponsePtrOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionTypeOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionGroupOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionGroupArrayOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionGroupResponseOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionGroupResponseArrayOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionPropertiesOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceArrayOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceResponseOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(PolicySetDefinitionTypeOutput{})
	pulumi.RegisterOutputType(PolicySetDefinitionPropertiesOutput{})
	pulumi.RegisterOutputType(PolicySetDefinitionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PolicySetDefinitionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PolicySetDefinitionPropertiesResponsePtrOutput{})
}
