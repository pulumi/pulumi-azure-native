// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package authorization

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Identity for the resource.
type Identity struct {
	// The identity type. This is the only required field when adding a system assigned identity to a resource.
	Type *string `pulumi:"type"`
}

// IdentityInput is an input type that accepts IdentityArgs and IdentityOutput values.
// You can construct a concrete instance of `IdentityInput` via:
//
//          IdentityArgs{...}
type IdentityInput interface {
	pulumi.Input

	ToIdentityOutput() IdentityOutput
	ToIdentityOutputWithContext(context.Context) IdentityOutput
}

// Identity for the resource.
type IdentityArgs struct {
	// The identity type. This is the only required field when adding a system assigned identity to a resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (IdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (i IdentityArgs) ToIdentityOutput() IdentityOutput {
	return i.ToIdentityOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput)
}

func (i IdentityArgs) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput).ToIdentityPtrOutputWithContext(ctx)
}

// IdentityPtrInput is an input type that accepts IdentityArgs, IdentityPtr and IdentityPtrOutput values.
// You can construct a concrete instance of `IdentityPtrInput` via:
//
//          IdentityArgs{...}
//
//  or:
//
//          nil
type IdentityPtrInput interface {
	pulumi.Input

	ToIdentityPtrOutput() IdentityPtrOutput
	ToIdentityPtrOutputWithContext(context.Context) IdentityPtrOutput
}

type identityPtrType IdentityArgs

func IdentityPtr(v *IdentityArgs) IdentityPtrInput {
	return (*identityPtrType)(v)
}

func (*identityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (i *identityPtrType) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i *identityPtrType) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPtrOutput)
}

// Identity for the resource.
type IdentityOutput struct{ *pulumi.OutputState }

func (IdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (o IdentityOutput) ToIdentityOutput() IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o.ToIdentityPtrOutputWithContext(context.Background())
}

func (o IdentityOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o.ApplyT(func(v Identity) *Identity {
		return &v
	}).(IdentityPtrOutput)
}

// The identity type. This is the only required field when adding a system assigned identity to a resource.
func (o IdentityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Identity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type IdentityPtrOutput struct{ *pulumi.OutputState }

func (IdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (o IdentityPtrOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) Elem() IdentityOutput {
	return o.ApplyT(func(v *Identity) Identity { return *v }).(IdentityOutput)
}

// The identity type. This is the only required field when adding a system assigned identity to a resource.
func (o IdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Identity) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Identity for the resource.
type IdentityResponse struct {
	// The principal ID of the resource identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the resource identity.
	TenantId string `pulumi:"tenantId"`
	// The identity type. This is the only required field when adding a system assigned identity to a resource.
	Type *string `pulumi:"type"`
}

// IdentityResponseInput is an input type that accepts IdentityResponseArgs and IdentityResponseOutput values.
// You can construct a concrete instance of `IdentityResponseInput` via:
//
//          IdentityResponseArgs{...}
type IdentityResponseInput interface {
	pulumi.Input

	ToIdentityResponseOutput() IdentityResponseOutput
	ToIdentityResponseOutputWithContext(context.Context) IdentityResponseOutput
}

// Identity for the resource.
type IdentityResponseArgs struct {
	// The principal ID of the resource identity.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The tenant ID of the resource identity.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The identity type. This is the only required field when adding a system assigned identity to a resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (IdentityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityResponse)(nil)).Elem()
}

func (i IdentityResponseArgs) ToIdentityResponseOutput() IdentityResponseOutput {
	return i.ToIdentityResponseOutputWithContext(context.Background())
}

func (i IdentityResponseArgs) ToIdentityResponseOutputWithContext(ctx context.Context) IdentityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityResponseOutput)
}

func (i IdentityResponseArgs) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return i.ToIdentityResponsePtrOutputWithContext(context.Background())
}

func (i IdentityResponseArgs) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityResponseOutput).ToIdentityResponsePtrOutputWithContext(ctx)
}

// IdentityResponsePtrInput is an input type that accepts IdentityResponseArgs, IdentityResponsePtr and IdentityResponsePtrOutput values.
// You can construct a concrete instance of `IdentityResponsePtrInput` via:
//
//          IdentityResponseArgs{...}
//
//  or:
//
//          nil
type IdentityResponsePtrInput interface {
	pulumi.Input

	ToIdentityResponsePtrOutput() IdentityResponsePtrOutput
	ToIdentityResponsePtrOutputWithContext(context.Context) IdentityResponsePtrOutput
}

type identityResponsePtrType IdentityResponseArgs

func IdentityResponsePtr(v *IdentityResponseArgs) IdentityResponsePtrInput {
	return (*identityResponsePtrType)(v)
}

func (*identityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityResponse)(nil)).Elem()
}

func (i *identityResponsePtrType) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return i.ToIdentityResponsePtrOutputWithContext(context.Background())
}

func (i *identityResponsePtrType) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityResponsePtrOutput)
}

// Identity for the resource.
type IdentityResponseOutput struct{ *pulumi.OutputState }

func (IdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityResponse)(nil)).Elem()
}

func (o IdentityResponseOutput) ToIdentityResponseOutput() IdentityResponseOutput {
	return o
}

func (o IdentityResponseOutput) ToIdentityResponseOutputWithContext(ctx context.Context) IdentityResponseOutput {
	return o
}

func (o IdentityResponseOutput) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return o.ToIdentityResponsePtrOutputWithContext(context.Background())
}

func (o IdentityResponseOutput) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return o.ApplyT(func(v IdentityResponse) *IdentityResponse {
		return &v
	}).(IdentityResponsePtrOutput)
}

// The principal ID of the resource identity.
func (o IdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the resource identity.
func (o IdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type. This is the only required field when adding a system assigned identity to a resource.
func (o IdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type IdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityResponse)(nil)).Elem()
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) Elem() IdentityResponseOutput {
	return o.ApplyT(func(v *IdentityResponse) IdentityResponse { return *v }).(IdentityResponseOutput)
}

// The principal ID of the resource identity.
func (o IdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the resource identity.
func (o IdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type. This is the only required field when adding a system assigned identity to a resource.
func (o IdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The lock information.
type ManagementLockAtResourceGroupLevelType struct {
	// The name of the lock.
	Name string `pulumi:"name"`
	// The properties of the lock.
	Properties ManagementLockPropertiesResponse `pulumi:"properties"`
	// The resource type of the lock - Microsoft.Authorization/locks.
	Type string `pulumi:"type"`
}

// ManagementLockAtResourceGroupLevelTypeInput is an input type that accepts ManagementLockAtResourceGroupLevelTypeArgs and ManagementLockAtResourceGroupLevelTypeOutput values.
// You can construct a concrete instance of `ManagementLockAtResourceGroupLevelTypeInput` via:
//
//          ManagementLockAtResourceGroupLevelTypeArgs{...}
type ManagementLockAtResourceGroupLevelTypeInput interface {
	pulumi.Input

	ToManagementLockAtResourceGroupLevelTypeOutput() ManagementLockAtResourceGroupLevelTypeOutput
	ToManagementLockAtResourceGroupLevelTypeOutputWithContext(context.Context) ManagementLockAtResourceGroupLevelTypeOutput
}

// The lock information.
type ManagementLockAtResourceGroupLevelTypeArgs struct {
	// The name of the lock.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of the lock.
	Properties ManagementLockPropertiesResponseInput `pulumi:"properties"`
	// The resource type of the lock - Microsoft.Authorization/locks.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ManagementLockAtResourceGroupLevelTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockAtResourceGroupLevelType)(nil)).Elem()
}

func (i ManagementLockAtResourceGroupLevelTypeArgs) ToManagementLockAtResourceGroupLevelTypeOutput() ManagementLockAtResourceGroupLevelTypeOutput {
	return i.ToManagementLockAtResourceGroupLevelTypeOutputWithContext(context.Background())
}

func (i ManagementLockAtResourceGroupLevelTypeArgs) ToManagementLockAtResourceGroupLevelTypeOutputWithContext(ctx context.Context) ManagementLockAtResourceGroupLevelTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockAtResourceGroupLevelTypeOutput)
}

// The lock information.
type ManagementLockAtResourceGroupLevelTypeOutput struct{ *pulumi.OutputState }

func (ManagementLockAtResourceGroupLevelTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockAtResourceGroupLevelType)(nil)).Elem()
}

func (o ManagementLockAtResourceGroupLevelTypeOutput) ToManagementLockAtResourceGroupLevelTypeOutput() ManagementLockAtResourceGroupLevelTypeOutput {
	return o
}

func (o ManagementLockAtResourceGroupLevelTypeOutput) ToManagementLockAtResourceGroupLevelTypeOutputWithContext(ctx context.Context) ManagementLockAtResourceGroupLevelTypeOutput {
	return o
}

// The name of the lock.
func (o ManagementLockAtResourceGroupLevelTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementLockAtResourceGroupLevelType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of the lock.
func (o ManagementLockAtResourceGroupLevelTypeOutput) Properties() ManagementLockPropertiesResponseOutput {
	return o.ApplyT(func(v ManagementLockAtResourceGroupLevelType) ManagementLockPropertiesResponse { return v.Properties }).(ManagementLockPropertiesResponseOutput)
}

// The resource type of the lock - Microsoft.Authorization/locks.
func (o ManagementLockAtResourceGroupLevelTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementLockAtResourceGroupLevelType) string { return v.Type }).(pulumi.StringOutput)
}

// The lock information.
type ManagementLockAtResourceLevelType struct {
	// The name of the lock.
	Name string `pulumi:"name"`
	// The properties of the lock.
	Properties ManagementLockPropertiesResponse `pulumi:"properties"`
	// The resource type of the lock - Microsoft.Authorization/locks.
	Type string `pulumi:"type"`
}

// ManagementLockAtResourceLevelTypeInput is an input type that accepts ManagementLockAtResourceLevelTypeArgs and ManagementLockAtResourceLevelTypeOutput values.
// You can construct a concrete instance of `ManagementLockAtResourceLevelTypeInput` via:
//
//          ManagementLockAtResourceLevelTypeArgs{...}
type ManagementLockAtResourceLevelTypeInput interface {
	pulumi.Input

	ToManagementLockAtResourceLevelTypeOutput() ManagementLockAtResourceLevelTypeOutput
	ToManagementLockAtResourceLevelTypeOutputWithContext(context.Context) ManagementLockAtResourceLevelTypeOutput
}

// The lock information.
type ManagementLockAtResourceLevelTypeArgs struct {
	// The name of the lock.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of the lock.
	Properties ManagementLockPropertiesResponseInput `pulumi:"properties"`
	// The resource type of the lock - Microsoft.Authorization/locks.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ManagementLockAtResourceLevelTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockAtResourceLevelType)(nil)).Elem()
}

func (i ManagementLockAtResourceLevelTypeArgs) ToManagementLockAtResourceLevelTypeOutput() ManagementLockAtResourceLevelTypeOutput {
	return i.ToManagementLockAtResourceLevelTypeOutputWithContext(context.Background())
}

func (i ManagementLockAtResourceLevelTypeArgs) ToManagementLockAtResourceLevelTypeOutputWithContext(ctx context.Context) ManagementLockAtResourceLevelTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockAtResourceLevelTypeOutput)
}

// The lock information.
type ManagementLockAtResourceLevelTypeOutput struct{ *pulumi.OutputState }

func (ManagementLockAtResourceLevelTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockAtResourceLevelType)(nil)).Elem()
}

func (o ManagementLockAtResourceLevelTypeOutput) ToManagementLockAtResourceLevelTypeOutput() ManagementLockAtResourceLevelTypeOutput {
	return o
}

func (o ManagementLockAtResourceLevelTypeOutput) ToManagementLockAtResourceLevelTypeOutputWithContext(ctx context.Context) ManagementLockAtResourceLevelTypeOutput {
	return o
}

// The name of the lock.
func (o ManagementLockAtResourceLevelTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementLockAtResourceLevelType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of the lock.
func (o ManagementLockAtResourceLevelTypeOutput) Properties() ManagementLockPropertiesResponseOutput {
	return o.ApplyT(func(v ManagementLockAtResourceLevelType) ManagementLockPropertiesResponse { return v.Properties }).(ManagementLockPropertiesResponseOutput)
}

// The resource type of the lock - Microsoft.Authorization/locks.
func (o ManagementLockAtResourceLevelTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementLockAtResourceLevelType) string { return v.Type }).(pulumi.StringOutput)
}

// The lock information.
type ManagementLockAtSubscriptionLevelType struct {
	// The name of the lock.
	Name string `pulumi:"name"`
	// The properties of the lock.
	Properties ManagementLockPropertiesResponse `pulumi:"properties"`
	// The resource type of the lock - Microsoft.Authorization/locks.
	Type string `pulumi:"type"`
}

// ManagementLockAtSubscriptionLevelTypeInput is an input type that accepts ManagementLockAtSubscriptionLevelTypeArgs and ManagementLockAtSubscriptionLevelTypeOutput values.
// You can construct a concrete instance of `ManagementLockAtSubscriptionLevelTypeInput` via:
//
//          ManagementLockAtSubscriptionLevelTypeArgs{...}
type ManagementLockAtSubscriptionLevelTypeInput interface {
	pulumi.Input

	ToManagementLockAtSubscriptionLevelTypeOutput() ManagementLockAtSubscriptionLevelTypeOutput
	ToManagementLockAtSubscriptionLevelTypeOutputWithContext(context.Context) ManagementLockAtSubscriptionLevelTypeOutput
}

// The lock information.
type ManagementLockAtSubscriptionLevelTypeArgs struct {
	// The name of the lock.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of the lock.
	Properties ManagementLockPropertiesResponseInput `pulumi:"properties"`
	// The resource type of the lock - Microsoft.Authorization/locks.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ManagementLockAtSubscriptionLevelTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockAtSubscriptionLevelType)(nil)).Elem()
}

func (i ManagementLockAtSubscriptionLevelTypeArgs) ToManagementLockAtSubscriptionLevelTypeOutput() ManagementLockAtSubscriptionLevelTypeOutput {
	return i.ToManagementLockAtSubscriptionLevelTypeOutputWithContext(context.Background())
}

func (i ManagementLockAtSubscriptionLevelTypeArgs) ToManagementLockAtSubscriptionLevelTypeOutputWithContext(ctx context.Context) ManagementLockAtSubscriptionLevelTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockAtSubscriptionLevelTypeOutput)
}

// The lock information.
type ManagementLockAtSubscriptionLevelTypeOutput struct{ *pulumi.OutputState }

func (ManagementLockAtSubscriptionLevelTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockAtSubscriptionLevelType)(nil)).Elem()
}

func (o ManagementLockAtSubscriptionLevelTypeOutput) ToManagementLockAtSubscriptionLevelTypeOutput() ManagementLockAtSubscriptionLevelTypeOutput {
	return o
}

func (o ManagementLockAtSubscriptionLevelTypeOutput) ToManagementLockAtSubscriptionLevelTypeOutputWithContext(ctx context.Context) ManagementLockAtSubscriptionLevelTypeOutput {
	return o
}

// The name of the lock.
func (o ManagementLockAtSubscriptionLevelTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementLockAtSubscriptionLevelType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of the lock.
func (o ManagementLockAtSubscriptionLevelTypeOutput) Properties() ManagementLockPropertiesResponseOutput {
	return o.ApplyT(func(v ManagementLockAtSubscriptionLevelType) ManagementLockPropertiesResponse { return v.Properties }).(ManagementLockPropertiesResponseOutput)
}

// The resource type of the lock - Microsoft.Authorization/locks.
func (o ManagementLockAtSubscriptionLevelTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementLockAtSubscriptionLevelType) string { return v.Type }).(pulumi.StringOutput)
}

// The lock information.
type ManagementLockByScopeType struct {
	// The name of the lock.
	Name string `pulumi:"name"`
	// The properties of the lock.
	Properties ManagementLockPropertiesResponse `pulumi:"properties"`
	// The resource type of the lock - Microsoft.Authorization/locks.
	Type string `pulumi:"type"`
}

// ManagementLockByScopeTypeInput is an input type that accepts ManagementLockByScopeTypeArgs and ManagementLockByScopeTypeOutput values.
// You can construct a concrete instance of `ManagementLockByScopeTypeInput` via:
//
//          ManagementLockByScopeTypeArgs{...}
type ManagementLockByScopeTypeInput interface {
	pulumi.Input

	ToManagementLockByScopeTypeOutput() ManagementLockByScopeTypeOutput
	ToManagementLockByScopeTypeOutputWithContext(context.Context) ManagementLockByScopeTypeOutput
}

// The lock information.
type ManagementLockByScopeTypeArgs struct {
	// The name of the lock.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of the lock.
	Properties ManagementLockPropertiesResponseInput `pulumi:"properties"`
	// The resource type of the lock - Microsoft.Authorization/locks.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ManagementLockByScopeTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockByScopeType)(nil)).Elem()
}

func (i ManagementLockByScopeTypeArgs) ToManagementLockByScopeTypeOutput() ManagementLockByScopeTypeOutput {
	return i.ToManagementLockByScopeTypeOutputWithContext(context.Background())
}

func (i ManagementLockByScopeTypeArgs) ToManagementLockByScopeTypeOutputWithContext(ctx context.Context) ManagementLockByScopeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockByScopeTypeOutput)
}

// The lock information.
type ManagementLockByScopeTypeOutput struct{ *pulumi.OutputState }

func (ManagementLockByScopeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockByScopeType)(nil)).Elem()
}

func (o ManagementLockByScopeTypeOutput) ToManagementLockByScopeTypeOutput() ManagementLockByScopeTypeOutput {
	return o
}

func (o ManagementLockByScopeTypeOutput) ToManagementLockByScopeTypeOutputWithContext(ctx context.Context) ManagementLockByScopeTypeOutput {
	return o
}

// The name of the lock.
func (o ManagementLockByScopeTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementLockByScopeType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of the lock.
func (o ManagementLockByScopeTypeOutput) Properties() ManagementLockPropertiesResponseOutput {
	return o.ApplyT(func(v ManagementLockByScopeType) ManagementLockPropertiesResponse { return v.Properties }).(ManagementLockPropertiesResponseOutput)
}

// The resource type of the lock - Microsoft.Authorization/locks.
func (o ManagementLockByScopeTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementLockByScopeType) string { return v.Type }).(pulumi.StringOutput)
}

// Lock owner properties.
type ManagementLockOwner struct {
	// The application ID of the lock owner.
	ApplicationId *string `pulumi:"applicationId"`
}

// ManagementLockOwnerInput is an input type that accepts ManagementLockOwnerArgs and ManagementLockOwnerOutput values.
// You can construct a concrete instance of `ManagementLockOwnerInput` via:
//
//          ManagementLockOwnerArgs{...}
type ManagementLockOwnerInput interface {
	pulumi.Input

	ToManagementLockOwnerOutput() ManagementLockOwnerOutput
	ToManagementLockOwnerOutputWithContext(context.Context) ManagementLockOwnerOutput
}

// Lock owner properties.
type ManagementLockOwnerArgs struct {
	// The application ID of the lock owner.
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
}

func (ManagementLockOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockOwner)(nil)).Elem()
}

func (i ManagementLockOwnerArgs) ToManagementLockOwnerOutput() ManagementLockOwnerOutput {
	return i.ToManagementLockOwnerOutputWithContext(context.Background())
}

func (i ManagementLockOwnerArgs) ToManagementLockOwnerOutputWithContext(ctx context.Context) ManagementLockOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockOwnerOutput)
}

// ManagementLockOwnerArrayInput is an input type that accepts ManagementLockOwnerArray and ManagementLockOwnerArrayOutput values.
// You can construct a concrete instance of `ManagementLockOwnerArrayInput` via:
//
//          ManagementLockOwnerArray{ ManagementLockOwnerArgs{...} }
type ManagementLockOwnerArrayInput interface {
	pulumi.Input

	ToManagementLockOwnerArrayOutput() ManagementLockOwnerArrayOutput
	ToManagementLockOwnerArrayOutputWithContext(context.Context) ManagementLockOwnerArrayOutput
}

type ManagementLockOwnerArray []ManagementLockOwnerInput

func (ManagementLockOwnerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagementLockOwner)(nil)).Elem()
}

func (i ManagementLockOwnerArray) ToManagementLockOwnerArrayOutput() ManagementLockOwnerArrayOutput {
	return i.ToManagementLockOwnerArrayOutputWithContext(context.Background())
}

func (i ManagementLockOwnerArray) ToManagementLockOwnerArrayOutputWithContext(ctx context.Context) ManagementLockOwnerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockOwnerArrayOutput)
}

// Lock owner properties.
type ManagementLockOwnerOutput struct{ *pulumi.OutputState }

func (ManagementLockOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockOwner)(nil)).Elem()
}

func (o ManagementLockOwnerOutput) ToManagementLockOwnerOutput() ManagementLockOwnerOutput {
	return o
}

func (o ManagementLockOwnerOutput) ToManagementLockOwnerOutputWithContext(ctx context.Context) ManagementLockOwnerOutput {
	return o
}

// The application ID of the lock owner.
func (o ManagementLockOwnerOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagementLockOwner) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

type ManagementLockOwnerArrayOutput struct{ *pulumi.OutputState }

func (ManagementLockOwnerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagementLockOwner)(nil)).Elem()
}

func (o ManagementLockOwnerArrayOutput) ToManagementLockOwnerArrayOutput() ManagementLockOwnerArrayOutput {
	return o
}

func (o ManagementLockOwnerArrayOutput) ToManagementLockOwnerArrayOutputWithContext(ctx context.Context) ManagementLockOwnerArrayOutput {
	return o
}

func (o ManagementLockOwnerArrayOutput) Index(i pulumi.IntInput) ManagementLockOwnerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagementLockOwner {
		return vs[0].([]ManagementLockOwner)[vs[1].(int)]
	}).(ManagementLockOwnerOutput)
}

// Lock owner properties.
type ManagementLockOwnerResponse struct {
	// The application ID of the lock owner.
	ApplicationId *string `pulumi:"applicationId"`
}

// ManagementLockOwnerResponseInput is an input type that accepts ManagementLockOwnerResponseArgs and ManagementLockOwnerResponseOutput values.
// You can construct a concrete instance of `ManagementLockOwnerResponseInput` via:
//
//          ManagementLockOwnerResponseArgs{...}
type ManagementLockOwnerResponseInput interface {
	pulumi.Input

	ToManagementLockOwnerResponseOutput() ManagementLockOwnerResponseOutput
	ToManagementLockOwnerResponseOutputWithContext(context.Context) ManagementLockOwnerResponseOutput
}

// Lock owner properties.
type ManagementLockOwnerResponseArgs struct {
	// The application ID of the lock owner.
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
}

func (ManagementLockOwnerResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockOwnerResponse)(nil)).Elem()
}

func (i ManagementLockOwnerResponseArgs) ToManagementLockOwnerResponseOutput() ManagementLockOwnerResponseOutput {
	return i.ToManagementLockOwnerResponseOutputWithContext(context.Background())
}

func (i ManagementLockOwnerResponseArgs) ToManagementLockOwnerResponseOutputWithContext(ctx context.Context) ManagementLockOwnerResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockOwnerResponseOutput)
}

// ManagementLockOwnerResponseArrayInput is an input type that accepts ManagementLockOwnerResponseArray and ManagementLockOwnerResponseArrayOutput values.
// You can construct a concrete instance of `ManagementLockOwnerResponseArrayInput` via:
//
//          ManagementLockOwnerResponseArray{ ManagementLockOwnerResponseArgs{...} }
type ManagementLockOwnerResponseArrayInput interface {
	pulumi.Input

	ToManagementLockOwnerResponseArrayOutput() ManagementLockOwnerResponseArrayOutput
	ToManagementLockOwnerResponseArrayOutputWithContext(context.Context) ManagementLockOwnerResponseArrayOutput
}

type ManagementLockOwnerResponseArray []ManagementLockOwnerResponseInput

func (ManagementLockOwnerResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagementLockOwnerResponse)(nil)).Elem()
}

func (i ManagementLockOwnerResponseArray) ToManagementLockOwnerResponseArrayOutput() ManagementLockOwnerResponseArrayOutput {
	return i.ToManagementLockOwnerResponseArrayOutputWithContext(context.Background())
}

func (i ManagementLockOwnerResponseArray) ToManagementLockOwnerResponseArrayOutputWithContext(ctx context.Context) ManagementLockOwnerResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockOwnerResponseArrayOutput)
}

// Lock owner properties.
type ManagementLockOwnerResponseOutput struct{ *pulumi.OutputState }

func (ManagementLockOwnerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockOwnerResponse)(nil)).Elem()
}

func (o ManagementLockOwnerResponseOutput) ToManagementLockOwnerResponseOutput() ManagementLockOwnerResponseOutput {
	return o
}

func (o ManagementLockOwnerResponseOutput) ToManagementLockOwnerResponseOutputWithContext(ctx context.Context) ManagementLockOwnerResponseOutput {
	return o
}

// The application ID of the lock owner.
func (o ManagementLockOwnerResponseOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagementLockOwnerResponse) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

type ManagementLockOwnerResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagementLockOwnerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagementLockOwnerResponse)(nil)).Elem()
}

func (o ManagementLockOwnerResponseArrayOutput) ToManagementLockOwnerResponseArrayOutput() ManagementLockOwnerResponseArrayOutput {
	return o
}

func (o ManagementLockOwnerResponseArrayOutput) ToManagementLockOwnerResponseArrayOutputWithContext(ctx context.Context) ManagementLockOwnerResponseArrayOutput {
	return o
}

func (o ManagementLockOwnerResponseArrayOutput) Index(i pulumi.IntInput) ManagementLockOwnerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagementLockOwnerResponse {
		return vs[0].([]ManagementLockOwnerResponse)[vs[1].(int)]
	}).(ManagementLockOwnerResponseOutput)
}

// The lock properties.
type ManagementLockProperties struct {
	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level string `pulumi:"level"`
	// Notes about the lock. Maximum of 512 characters.
	Notes *string `pulumi:"notes"`
	// The owners of the lock.
	Owners []ManagementLockOwner `pulumi:"owners"`
}

// ManagementLockPropertiesInput is an input type that accepts ManagementLockPropertiesArgs and ManagementLockPropertiesOutput values.
// You can construct a concrete instance of `ManagementLockPropertiesInput` via:
//
//          ManagementLockPropertiesArgs{...}
type ManagementLockPropertiesInput interface {
	pulumi.Input

	ToManagementLockPropertiesOutput() ManagementLockPropertiesOutput
	ToManagementLockPropertiesOutputWithContext(context.Context) ManagementLockPropertiesOutput
}

// The lock properties.
type ManagementLockPropertiesArgs struct {
	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level pulumi.StringInput `pulumi:"level"`
	// Notes about the lock. Maximum of 512 characters.
	Notes pulumi.StringPtrInput `pulumi:"notes"`
	// The owners of the lock.
	Owners ManagementLockOwnerArrayInput `pulumi:"owners"`
}

func (ManagementLockPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockProperties)(nil)).Elem()
}

func (i ManagementLockPropertiesArgs) ToManagementLockPropertiesOutput() ManagementLockPropertiesOutput {
	return i.ToManagementLockPropertiesOutputWithContext(context.Background())
}

func (i ManagementLockPropertiesArgs) ToManagementLockPropertiesOutputWithContext(ctx context.Context) ManagementLockPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockPropertiesOutput)
}

func (i ManagementLockPropertiesArgs) ToManagementLockPropertiesPtrOutput() ManagementLockPropertiesPtrOutput {
	return i.ToManagementLockPropertiesPtrOutputWithContext(context.Background())
}

func (i ManagementLockPropertiesArgs) ToManagementLockPropertiesPtrOutputWithContext(ctx context.Context) ManagementLockPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockPropertiesOutput).ToManagementLockPropertiesPtrOutputWithContext(ctx)
}

// ManagementLockPropertiesPtrInput is an input type that accepts ManagementLockPropertiesArgs, ManagementLockPropertiesPtr and ManagementLockPropertiesPtrOutput values.
// You can construct a concrete instance of `ManagementLockPropertiesPtrInput` via:
//
//          ManagementLockPropertiesArgs{...}
//
//  or:
//
//          nil
type ManagementLockPropertiesPtrInput interface {
	pulumi.Input

	ToManagementLockPropertiesPtrOutput() ManagementLockPropertiesPtrOutput
	ToManagementLockPropertiesPtrOutputWithContext(context.Context) ManagementLockPropertiesPtrOutput
}

type managementLockPropertiesPtrType ManagementLockPropertiesArgs

func ManagementLockPropertiesPtr(v *ManagementLockPropertiesArgs) ManagementLockPropertiesPtrInput {
	return (*managementLockPropertiesPtrType)(v)
}

func (*managementLockPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementLockProperties)(nil)).Elem()
}

func (i *managementLockPropertiesPtrType) ToManagementLockPropertiesPtrOutput() ManagementLockPropertiesPtrOutput {
	return i.ToManagementLockPropertiesPtrOutputWithContext(context.Background())
}

func (i *managementLockPropertiesPtrType) ToManagementLockPropertiesPtrOutputWithContext(ctx context.Context) ManagementLockPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockPropertiesPtrOutput)
}

// The lock properties.
type ManagementLockPropertiesOutput struct{ *pulumi.OutputState }

func (ManagementLockPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockProperties)(nil)).Elem()
}

func (o ManagementLockPropertiesOutput) ToManagementLockPropertiesOutput() ManagementLockPropertiesOutput {
	return o
}

func (o ManagementLockPropertiesOutput) ToManagementLockPropertiesOutputWithContext(ctx context.Context) ManagementLockPropertiesOutput {
	return o
}

func (o ManagementLockPropertiesOutput) ToManagementLockPropertiesPtrOutput() ManagementLockPropertiesPtrOutput {
	return o.ToManagementLockPropertiesPtrOutputWithContext(context.Background())
}

func (o ManagementLockPropertiesOutput) ToManagementLockPropertiesPtrOutputWithContext(ctx context.Context) ManagementLockPropertiesPtrOutput {
	return o.ApplyT(func(v ManagementLockProperties) *ManagementLockProperties {
		return &v
	}).(ManagementLockPropertiesPtrOutput)
}

// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
func (o ManagementLockPropertiesOutput) Level() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementLockProperties) string { return v.Level }).(pulumi.StringOutput)
}

// Notes about the lock. Maximum of 512 characters.
func (o ManagementLockPropertiesOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagementLockProperties) *string { return v.Notes }).(pulumi.StringPtrOutput)
}

// The owners of the lock.
func (o ManagementLockPropertiesOutput) Owners() ManagementLockOwnerArrayOutput {
	return o.ApplyT(func(v ManagementLockProperties) []ManagementLockOwner { return v.Owners }).(ManagementLockOwnerArrayOutput)
}

type ManagementLockPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ManagementLockPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementLockProperties)(nil)).Elem()
}

func (o ManagementLockPropertiesPtrOutput) ToManagementLockPropertiesPtrOutput() ManagementLockPropertiesPtrOutput {
	return o
}

func (o ManagementLockPropertiesPtrOutput) ToManagementLockPropertiesPtrOutputWithContext(ctx context.Context) ManagementLockPropertiesPtrOutput {
	return o
}

func (o ManagementLockPropertiesPtrOutput) Elem() ManagementLockPropertiesOutput {
	return o.ApplyT(func(v *ManagementLockProperties) ManagementLockProperties { return *v }).(ManagementLockPropertiesOutput)
}

// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
func (o ManagementLockPropertiesPtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagementLockProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Level
	}).(pulumi.StringPtrOutput)
}

// Notes about the lock. Maximum of 512 characters.
func (o ManagementLockPropertiesPtrOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagementLockProperties) *string {
		if v == nil {
			return nil
		}
		return v.Notes
	}).(pulumi.StringPtrOutput)
}

// The owners of the lock.
func (o ManagementLockPropertiesPtrOutput) Owners() ManagementLockOwnerArrayOutput {
	return o.ApplyT(func(v *ManagementLockProperties) []ManagementLockOwner {
		if v == nil {
			return nil
		}
		return v.Owners
	}).(ManagementLockOwnerArrayOutput)
}

// The lock properties.
type ManagementLockPropertiesResponse struct {
	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level string `pulumi:"level"`
	// Notes about the lock. Maximum of 512 characters.
	Notes *string `pulumi:"notes"`
	// The owners of the lock.
	Owners []ManagementLockOwnerResponse `pulumi:"owners"`
}

// ManagementLockPropertiesResponseInput is an input type that accepts ManagementLockPropertiesResponseArgs and ManagementLockPropertiesResponseOutput values.
// You can construct a concrete instance of `ManagementLockPropertiesResponseInput` via:
//
//          ManagementLockPropertiesResponseArgs{...}
type ManagementLockPropertiesResponseInput interface {
	pulumi.Input

	ToManagementLockPropertiesResponseOutput() ManagementLockPropertiesResponseOutput
	ToManagementLockPropertiesResponseOutputWithContext(context.Context) ManagementLockPropertiesResponseOutput
}

// The lock properties.
type ManagementLockPropertiesResponseArgs struct {
	// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
	Level pulumi.StringInput `pulumi:"level"`
	// Notes about the lock. Maximum of 512 characters.
	Notes pulumi.StringPtrInput `pulumi:"notes"`
	// The owners of the lock.
	Owners ManagementLockOwnerResponseArrayInput `pulumi:"owners"`
}

func (ManagementLockPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockPropertiesResponse)(nil)).Elem()
}

func (i ManagementLockPropertiesResponseArgs) ToManagementLockPropertiesResponseOutput() ManagementLockPropertiesResponseOutput {
	return i.ToManagementLockPropertiesResponseOutputWithContext(context.Background())
}

func (i ManagementLockPropertiesResponseArgs) ToManagementLockPropertiesResponseOutputWithContext(ctx context.Context) ManagementLockPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockPropertiesResponseOutput)
}

func (i ManagementLockPropertiesResponseArgs) ToManagementLockPropertiesResponsePtrOutput() ManagementLockPropertiesResponsePtrOutput {
	return i.ToManagementLockPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i ManagementLockPropertiesResponseArgs) ToManagementLockPropertiesResponsePtrOutputWithContext(ctx context.Context) ManagementLockPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockPropertiesResponseOutput).ToManagementLockPropertiesResponsePtrOutputWithContext(ctx)
}

// ManagementLockPropertiesResponsePtrInput is an input type that accepts ManagementLockPropertiesResponseArgs, ManagementLockPropertiesResponsePtr and ManagementLockPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `ManagementLockPropertiesResponsePtrInput` via:
//
//          ManagementLockPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type ManagementLockPropertiesResponsePtrInput interface {
	pulumi.Input

	ToManagementLockPropertiesResponsePtrOutput() ManagementLockPropertiesResponsePtrOutput
	ToManagementLockPropertiesResponsePtrOutputWithContext(context.Context) ManagementLockPropertiesResponsePtrOutput
}

type managementLockPropertiesResponsePtrType ManagementLockPropertiesResponseArgs

func ManagementLockPropertiesResponsePtr(v *ManagementLockPropertiesResponseArgs) ManagementLockPropertiesResponsePtrInput {
	return (*managementLockPropertiesResponsePtrType)(v)
}

func (*managementLockPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementLockPropertiesResponse)(nil)).Elem()
}

func (i *managementLockPropertiesResponsePtrType) ToManagementLockPropertiesResponsePtrOutput() ManagementLockPropertiesResponsePtrOutput {
	return i.ToManagementLockPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *managementLockPropertiesResponsePtrType) ToManagementLockPropertiesResponsePtrOutputWithContext(ctx context.Context) ManagementLockPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockPropertiesResponsePtrOutput)
}

// The lock properties.
type ManagementLockPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ManagementLockPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockPropertiesResponse)(nil)).Elem()
}

func (o ManagementLockPropertiesResponseOutput) ToManagementLockPropertiesResponseOutput() ManagementLockPropertiesResponseOutput {
	return o
}

func (o ManagementLockPropertiesResponseOutput) ToManagementLockPropertiesResponseOutputWithContext(ctx context.Context) ManagementLockPropertiesResponseOutput {
	return o
}

func (o ManagementLockPropertiesResponseOutput) ToManagementLockPropertiesResponsePtrOutput() ManagementLockPropertiesResponsePtrOutput {
	return o.ToManagementLockPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ManagementLockPropertiesResponseOutput) ToManagementLockPropertiesResponsePtrOutputWithContext(ctx context.Context) ManagementLockPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ManagementLockPropertiesResponse) *ManagementLockPropertiesResponse {
		return &v
	}).(ManagementLockPropertiesResponsePtrOutput)
}

// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
func (o ManagementLockPropertiesResponseOutput) Level() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementLockPropertiesResponse) string { return v.Level }).(pulumi.StringOutput)
}

// Notes about the lock. Maximum of 512 characters.
func (o ManagementLockPropertiesResponseOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagementLockPropertiesResponse) *string { return v.Notes }).(pulumi.StringPtrOutput)
}

// The owners of the lock.
func (o ManagementLockPropertiesResponseOutput) Owners() ManagementLockOwnerResponseArrayOutput {
	return o.ApplyT(func(v ManagementLockPropertiesResponse) []ManagementLockOwnerResponse { return v.Owners }).(ManagementLockOwnerResponseArrayOutput)
}

type ManagementLockPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagementLockPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementLockPropertiesResponse)(nil)).Elem()
}

func (o ManagementLockPropertiesResponsePtrOutput) ToManagementLockPropertiesResponsePtrOutput() ManagementLockPropertiesResponsePtrOutput {
	return o
}

func (o ManagementLockPropertiesResponsePtrOutput) ToManagementLockPropertiesResponsePtrOutputWithContext(ctx context.Context) ManagementLockPropertiesResponsePtrOutput {
	return o
}

func (o ManagementLockPropertiesResponsePtrOutput) Elem() ManagementLockPropertiesResponseOutput {
	return o.ApplyT(func(v *ManagementLockPropertiesResponse) ManagementLockPropertiesResponse { return *v }).(ManagementLockPropertiesResponseOutput)
}

// The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can't modify or delete it.
func (o ManagementLockPropertiesResponsePtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagementLockPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Level
	}).(pulumi.StringPtrOutput)
}

// Notes about the lock. Maximum of 512 characters.
func (o ManagementLockPropertiesResponsePtrOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagementLockPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Notes
	}).(pulumi.StringPtrOutput)
}

// The owners of the lock.
func (o ManagementLockPropertiesResponsePtrOutput) Owners() ManagementLockOwnerResponseArrayOutput {
	return o.ApplyT(func(v *ManagementLockPropertiesResponse) []ManagementLockOwnerResponse {
		if v == nil {
			return nil
		}
		return v.Owners
	}).(ManagementLockOwnerResponseArrayOutput)
}

// The parameter definitions for parameters used in the policy. The keys are the parameter names.
type ParameterDefinitions struct {
}

// ParameterDefinitionsInput is an input type that accepts ParameterDefinitionsArgs and ParameterDefinitionsOutput values.
// You can construct a concrete instance of `ParameterDefinitionsInput` via:
//
//          ParameterDefinitionsArgs{...}
type ParameterDefinitionsInput interface {
	pulumi.Input

	ToParameterDefinitionsOutput() ParameterDefinitionsOutput
	ToParameterDefinitionsOutputWithContext(context.Context) ParameterDefinitionsOutput
}

// The parameter definitions for parameters used in the policy. The keys are the parameter names.
type ParameterDefinitionsArgs struct {
}

func (ParameterDefinitionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitions)(nil)).Elem()
}

func (i ParameterDefinitionsArgs) ToParameterDefinitionsOutput() ParameterDefinitionsOutput {
	return i.ToParameterDefinitionsOutputWithContext(context.Background())
}

func (i ParameterDefinitionsArgs) ToParameterDefinitionsOutputWithContext(ctx context.Context) ParameterDefinitionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsOutput)
}

func (i ParameterDefinitionsArgs) ToParameterDefinitionsPtrOutput() ParameterDefinitionsPtrOutput {
	return i.ToParameterDefinitionsPtrOutputWithContext(context.Background())
}

func (i ParameterDefinitionsArgs) ToParameterDefinitionsPtrOutputWithContext(ctx context.Context) ParameterDefinitionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsOutput).ToParameterDefinitionsPtrOutputWithContext(ctx)
}

// ParameterDefinitionsPtrInput is an input type that accepts ParameterDefinitionsArgs, ParameterDefinitionsPtr and ParameterDefinitionsPtrOutput values.
// You can construct a concrete instance of `ParameterDefinitionsPtrInput` via:
//
//          ParameterDefinitionsArgs{...}
//
//  or:
//
//          nil
type ParameterDefinitionsPtrInput interface {
	pulumi.Input

	ToParameterDefinitionsPtrOutput() ParameterDefinitionsPtrOutput
	ToParameterDefinitionsPtrOutputWithContext(context.Context) ParameterDefinitionsPtrOutput
}

type parameterDefinitionsPtrType ParameterDefinitionsArgs

func ParameterDefinitionsPtr(v *ParameterDefinitionsArgs) ParameterDefinitionsPtrInput {
	return (*parameterDefinitionsPtrType)(v)
}

func (*parameterDefinitionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitions)(nil)).Elem()
}

func (i *parameterDefinitionsPtrType) ToParameterDefinitionsPtrOutput() ParameterDefinitionsPtrOutput {
	return i.ToParameterDefinitionsPtrOutputWithContext(context.Background())
}

func (i *parameterDefinitionsPtrType) ToParameterDefinitionsPtrOutputWithContext(ctx context.Context) ParameterDefinitionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsPtrOutput)
}

// The parameter definitions for parameters used in the policy. The keys are the parameter names.
type ParameterDefinitionsOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitions)(nil)).Elem()
}

func (o ParameterDefinitionsOutput) ToParameterDefinitionsOutput() ParameterDefinitionsOutput {
	return o
}

func (o ParameterDefinitionsOutput) ToParameterDefinitionsOutputWithContext(ctx context.Context) ParameterDefinitionsOutput {
	return o
}

func (o ParameterDefinitionsOutput) ToParameterDefinitionsPtrOutput() ParameterDefinitionsPtrOutput {
	return o.ToParameterDefinitionsPtrOutputWithContext(context.Background())
}

func (o ParameterDefinitionsOutput) ToParameterDefinitionsPtrOutputWithContext(ctx context.Context) ParameterDefinitionsPtrOutput {
	return o.ApplyT(func(v ParameterDefinitions) *ParameterDefinitions {
		return &v
	}).(ParameterDefinitionsPtrOutput)
}

type ParameterDefinitionsPtrOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitions)(nil)).Elem()
}

func (o ParameterDefinitionsPtrOutput) ToParameterDefinitionsPtrOutput() ParameterDefinitionsPtrOutput {
	return o
}

func (o ParameterDefinitionsPtrOutput) ToParameterDefinitionsPtrOutputWithContext(ctx context.Context) ParameterDefinitionsPtrOutput {
	return o
}

func (o ParameterDefinitionsPtrOutput) Elem() ParameterDefinitionsOutput {
	return o.ApplyT(func(v *ParameterDefinitions) ParameterDefinitions { return *v }).(ParameterDefinitionsOutput)
}

// The parameter definitions for parameters used in the policy. The keys are the parameter names.
type ParameterDefinitionsResponse struct {
}

// ParameterDefinitionsResponseInput is an input type that accepts ParameterDefinitionsResponseArgs and ParameterDefinitionsResponseOutput values.
// You can construct a concrete instance of `ParameterDefinitionsResponseInput` via:
//
//          ParameterDefinitionsResponseArgs{...}
type ParameterDefinitionsResponseInput interface {
	pulumi.Input

	ToParameterDefinitionsResponseOutput() ParameterDefinitionsResponseOutput
	ToParameterDefinitionsResponseOutputWithContext(context.Context) ParameterDefinitionsResponseOutput
}

// The parameter definitions for parameters used in the policy. The keys are the parameter names.
type ParameterDefinitionsResponseArgs struct {
}

func (ParameterDefinitionsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsResponse)(nil)).Elem()
}

func (i ParameterDefinitionsResponseArgs) ToParameterDefinitionsResponseOutput() ParameterDefinitionsResponseOutput {
	return i.ToParameterDefinitionsResponseOutputWithContext(context.Background())
}

func (i ParameterDefinitionsResponseArgs) ToParameterDefinitionsResponseOutputWithContext(ctx context.Context) ParameterDefinitionsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsResponseOutput)
}

func (i ParameterDefinitionsResponseArgs) ToParameterDefinitionsResponsePtrOutput() ParameterDefinitionsResponsePtrOutput {
	return i.ToParameterDefinitionsResponsePtrOutputWithContext(context.Background())
}

func (i ParameterDefinitionsResponseArgs) ToParameterDefinitionsResponsePtrOutputWithContext(ctx context.Context) ParameterDefinitionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsResponseOutput).ToParameterDefinitionsResponsePtrOutputWithContext(ctx)
}

// ParameterDefinitionsResponsePtrInput is an input type that accepts ParameterDefinitionsResponseArgs, ParameterDefinitionsResponsePtr and ParameterDefinitionsResponsePtrOutput values.
// You can construct a concrete instance of `ParameterDefinitionsResponsePtrInput` via:
//
//          ParameterDefinitionsResponseArgs{...}
//
//  or:
//
//          nil
type ParameterDefinitionsResponsePtrInput interface {
	pulumi.Input

	ToParameterDefinitionsResponsePtrOutput() ParameterDefinitionsResponsePtrOutput
	ToParameterDefinitionsResponsePtrOutputWithContext(context.Context) ParameterDefinitionsResponsePtrOutput
}

type parameterDefinitionsResponsePtrType ParameterDefinitionsResponseArgs

func ParameterDefinitionsResponsePtr(v *ParameterDefinitionsResponseArgs) ParameterDefinitionsResponsePtrInput {
	return (*parameterDefinitionsResponsePtrType)(v)
}

func (*parameterDefinitionsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitionsResponse)(nil)).Elem()
}

func (i *parameterDefinitionsResponsePtrType) ToParameterDefinitionsResponsePtrOutput() ParameterDefinitionsResponsePtrOutput {
	return i.ToParameterDefinitionsResponsePtrOutputWithContext(context.Background())
}

func (i *parameterDefinitionsResponsePtrType) ToParameterDefinitionsResponsePtrOutputWithContext(ctx context.Context) ParameterDefinitionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsResponsePtrOutput)
}

// The parameter definitions for parameters used in the policy. The keys are the parameter names.
type ParameterDefinitionsResponseOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsResponse)(nil)).Elem()
}

func (o ParameterDefinitionsResponseOutput) ToParameterDefinitionsResponseOutput() ParameterDefinitionsResponseOutput {
	return o
}

func (o ParameterDefinitionsResponseOutput) ToParameterDefinitionsResponseOutputWithContext(ctx context.Context) ParameterDefinitionsResponseOutput {
	return o
}

func (o ParameterDefinitionsResponseOutput) ToParameterDefinitionsResponsePtrOutput() ParameterDefinitionsResponsePtrOutput {
	return o.ToParameterDefinitionsResponsePtrOutputWithContext(context.Background())
}

func (o ParameterDefinitionsResponseOutput) ToParameterDefinitionsResponsePtrOutputWithContext(ctx context.Context) ParameterDefinitionsResponsePtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsResponse) *ParameterDefinitionsResponse {
		return &v
	}).(ParameterDefinitionsResponsePtrOutput)
}

type ParameterDefinitionsResponsePtrOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitionsResponse)(nil)).Elem()
}

func (o ParameterDefinitionsResponsePtrOutput) ToParameterDefinitionsResponsePtrOutput() ParameterDefinitionsResponsePtrOutput {
	return o
}

func (o ParameterDefinitionsResponsePtrOutput) ToParameterDefinitionsResponsePtrOutputWithContext(ctx context.Context) ParameterDefinitionsResponsePtrOutput {
	return o
}

func (o ParameterDefinitionsResponsePtrOutput) Elem() ParameterDefinitionsResponseOutput {
	return o.ApplyT(func(v *ParameterDefinitionsResponse) ParameterDefinitionsResponse { return *v }).(ParameterDefinitionsResponseOutput)
}

// The parameter values for the policy rule. The keys are the parameter names.
type ParameterValues struct {
}

// ParameterValuesInput is an input type that accepts ParameterValuesArgs and ParameterValuesOutput values.
// You can construct a concrete instance of `ParameterValuesInput` via:
//
//          ParameterValuesArgs{...}
type ParameterValuesInput interface {
	pulumi.Input

	ToParameterValuesOutput() ParameterValuesOutput
	ToParameterValuesOutputWithContext(context.Context) ParameterValuesOutput
}

// The parameter values for the policy rule. The keys are the parameter names.
type ParameterValuesArgs struct {
}

func (ParameterValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValues)(nil)).Elem()
}

func (i ParameterValuesArgs) ToParameterValuesOutput() ParameterValuesOutput {
	return i.ToParameterValuesOutputWithContext(context.Background())
}

func (i ParameterValuesArgs) ToParameterValuesOutputWithContext(ctx context.Context) ParameterValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesOutput)
}

func (i ParameterValuesArgs) ToParameterValuesPtrOutput() ParameterValuesPtrOutput {
	return i.ToParameterValuesPtrOutputWithContext(context.Background())
}

func (i ParameterValuesArgs) ToParameterValuesPtrOutputWithContext(ctx context.Context) ParameterValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesOutput).ToParameterValuesPtrOutputWithContext(ctx)
}

// ParameterValuesPtrInput is an input type that accepts ParameterValuesArgs, ParameterValuesPtr and ParameterValuesPtrOutput values.
// You can construct a concrete instance of `ParameterValuesPtrInput` via:
//
//          ParameterValuesArgs{...}
//
//  or:
//
//          nil
type ParameterValuesPtrInput interface {
	pulumi.Input

	ToParameterValuesPtrOutput() ParameterValuesPtrOutput
	ToParameterValuesPtrOutputWithContext(context.Context) ParameterValuesPtrOutput
}

type parameterValuesPtrType ParameterValuesArgs

func ParameterValuesPtr(v *ParameterValuesArgs) ParameterValuesPtrInput {
	return (*parameterValuesPtrType)(v)
}

func (*parameterValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterValues)(nil)).Elem()
}

func (i *parameterValuesPtrType) ToParameterValuesPtrOutput() ParameterValuesPtrOutput {
	return i.ToParameterValuesPtrOutputWithContext(context.Background())
}

func (i *parameterValuesPtrType) ToParameterValuesPtrOutputWithContext(ctx context.Context) ParameterValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesPtrOutput)
}

// The parameter values for the policy rule. The keys are the parameter names.
type ParameterValuesOutput struct{ *pulumi.OutputState }

func (ParameterValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValues)(nil)).Elem()
}

func (o ParameterValuesOutput) ToParameterValuesOutput() ParameterValuesOutput {
	return o
}

func (o ParameterValuesOutput) ToParameterValuesOutputWithContext(ctx context.Context) ParameterValuesOutput {
	return o
}

func (o ParameterValuesOutput) ToParameterValuesPtrOutput() ParameterValuesPtrOutput {
	return o.ToParameterValuesPtrOutputWithContext(context.Background())
}

func (o ParameterValuesOutput) ToParameterValuesPtrOutputWithContext(ctx context.Context) ParameterValuesPtrOutput {
	return o.ApplyT(func(v ParameterValues) *ParameterValues {
		return &v
	}).(ParameterValuesPtrOutput)
}

type ParameterValuesPtrOutput struct{ *pulumi.OutputState }

func (ParameterValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterValues)(nil)).Elem()
}

func (o ParameterValuesPtrOutput) ToParameterValuesPtrOutput() ParameterValuesPtrOutput {
	return o
}

func (o ParameterValuesPtrOutput) ToParameterValuesPtrOutputWithContext(ctx context.Context) ParameterValuesPtrOutput {
	return o
}

func (o ParameterValuesPtrOutput) Elem() ParameterValuesOutput {
	return o.ApplyT(func(v *ParameterValues) ParameterValues { return *v }).(ParameterValuesOutput)
}

// The parameter values for the policy rule. The keys are the parameter names.
type ParameterValuesResponse struct {
}

// ParameterValuesResponseInput is an input type that accepts ParameterValuesResponseArgs and ParameterValuesResponseOutput values.
// You can construct a concrete instance of `ParameterValuesResponseInput` via:
//
//          ParameterValuesResponseArgs{...}
type ParameterValuesResponseInput interface {
	pulumi.Input

	ToParameterValuesResponseOutput() ParameterValuesResponseOutput
	ToParameterValuesResponseOutputWithContext(context.Context) ParameterValuesResponseOutput
}

// The parameter values for the policy rule. The keys are the parameter names.
type ParameterValuesResponseArgs struct {
}

func (ParameterValuesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValuesResponse)(nil)).Elem()
}

func (i ParameterValuesResponseArgs) ToParameterValuesResponseOutput() ParameterValuesResponseOutput {
	return i.ToParameterValuesResponseOutputWithContext(context.Background())
}

func (i ParameterValuesResponseArgs) ToParameterValuesResponseOutputWithContext(ctx context.Context) ParameterValuesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesResponseOutput)
}

func (i ParameterValuesResponseArgs) ToParameterValuesResponsePtrOutput() ParameterValuesResponsePtrOutput {
	return i.ToParameterValuesResponsePtrOutputWithContext(context.Background())
}

func (i ParameterValuesResponseArgs) ToParameterValuesResponsePtrOutputWithContext(ctx context.Context) ParameterValuesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesResponseOutput).ToParameterValuesResponsePtrOutputWithContext(ctx)
}

// ParameterValuesResponsePtrInput is an input type that accepts ParameterValuesResponseArgs, ParameterValuesResponsePtr and ParameterValuesResponsePtrOutput values.
// You can construct a concrete instance of `ParameterValuesResponsePtrInput` via:
//
//          ParameterValuesResponseArgs{...}
//
//  or:
//
//          nil
type ParameterValuesResponsePtrInput interface {
	pulumi.Input

	ToParameterValuesResponsePtrOutput() ParameterValuesResponsePtrOutput
	ToParameterValuesResponsePtrOutputWithContext(context.Context) ParameterValuesResponsePtrOutput
}

type parameterValuesResponsePtrType ParameterValuesResponseArgs

func ParameterValuesResponsePtr(v *ParameterValuesResponseArgs) ParameterValuesResponsePtrInput {
	return (*parameterValuesResponsePtrType)(v)
}

func (*parameterValuesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterValuesResponse)(nil)).Elem()
}

func (i *parameterValuesResponsePtrType) ToParameterValuesResponsePtrOutput() ParameterValuesResponsePtrOutput {
	return i.ToParameterValuesResponsePtrOutputWithContext(context.Background())
}

func (i *parameterValuesResponsePtrType) ToParameterValuesResponsePtrOutputWithContext(ctx context.Context) ParameterValuesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesResponsePtrOutput)
}

// The parameter values for the policy rule. The keys are the parameter names.
type ParameterValuesResponseOutput struct{ *pulumi.OutputState }

func (ParameterValuesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValuesResponse)(nil)).Elem()
}

func (o ParameterValuesResponseOutput) ToParameterValuesResponseOutput() ParameterValuesResponseOutput {
	return o
}

func (o ParameterValuesResponseOutput) ToParameterValuesResponseOutputWithContext(ctx context.Context) ParameterValuesResponseOutput {
	return o
}

func (o ParameterValuesResponseOutput) ToParameterValuesResponsePtrOutput() ParameterValuesResponsePtrOutput {
	return o.ToParameterValuesResponsePtrOutputWithContext(context.Background())
}

func (o ParameterValuesResponseOutput) ToParameterValuesResponsePtrOutputWithContext(ctx context.Context) ParameterValuesResponsePtrOutput {
	return o.ApplyT(func(v ParameterValuesResponse) *ParameterValuesResponse {
		return &v
	}).(ParameterValuesResponsePtrOutput)
}

type ParameterValuesResponsePtrOutput struct{ *pulumi.OutputState }

func (ParameterValuesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterValuesResponse)(nil)).Elem()
}

func (o ParameterValuesResponsePtrOutput) ToParameterValuesResponsePtrOutput() ParameterValuesResponsePtrOutput {
	return o
}

func (o ParameterValuesResponsePtrOutput) ToParameterValuesResponsePtrOutputWithContext(ctx context.Context) ParameterValuesResponsePtrOutput {
	return o
}

func (o ParameterValuesResponsePtrOutput) Elem() ParameterValuesResponseOutput {
	return o.ApplyT(func(v *ParameterValuesResponse) ParameterValuesResponse { return *v }).(ParameterValuesResponseOutput)
}

// Role definition permissions.
type Permission struct {
	// Allowed actions.
	Actions []string `pulumi:"actions"`
	// Denied actions.
	NotActions []string `pulumi:"notActions"`
}

// PermissionInput is an input type that accepts PermissionArgs and PermissionOutput values.
// You can construct a concrete instance of `PermissionInput` via:
//
//          PermissionArgs{...}
type PermissionInput interface {
	pulumi.Input

	ToPermissionOutput() PermissionOutput
	ToPermissionOutputWithContext(context.Context) PermissionOutput
}

// Role definition permissions.
type PermissionArgs struct {
	// Allowed actions.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// Denied actions.
	NotActions pulumi.StringArrayInput `pulumi:"notActions"`
}

func (PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Permission)(nil)).Elem()
}

func (i PermissionArgs) ToPermissionOutput() PermissionOutput {
	return i.ToPermissionOutputWithContext(context.Background())
}

func (i PermissionArgs) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionOutput)
}

// PermissionArrayInput is an input type that accepts PermissionArray and PermissionArrayOutput values.
// You can construct a concrete instance of `PermissionArrayInput` via:
//
//          PermissionArray{ PermissionArgs{...} }
type PermissionArrayInput interface {
	pulumi.Input

	ToPermissionArrayOutput() PermissionArrayOutput
	ToPermissionArrayOutputWithContext(context.Context) PermissionArrayOutput
}

type PermissionArray []PermissionInput

func (PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Permission)(nil)).Elem()
}

func (i PermissionArray) ToPermissionArrayOutput() PermissionArrayOutput {
	return i.ToPermissionArrayOutputWithContext(context.Background())
}

func (i PermissionArray) ToPermissionArrayOutputWithContext(ctx context.Context) PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionArrayOutput)
}

// Role definition permissions.
type PermissionOutput struct{ *pulumi.OutputState }

func (PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Permission)(nil)).Elem()
}

func (o PermissionOutput) ToPermissionOutput() PermissionOutput {
	return o
}

func (o PermissionOutput) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return o
}

// Allowed actions.
func (o PermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Permission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Denied actions.
func (o PermissionOutput) NotActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Permission) []string { return v.NotActions }).(pulumi.StringArrayOutput)
}

type PermissionArrayOutput struct{ *pulumi.OutputState }

func (PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Permission)(nil)).Elem()
}

func (o PermissionArrayOutput) ToPermissionArrayOutput() PermissionArrayOutput {
	return o
}

func (o PermissionArrayOutput) ToPermissionArrayOutputWithContext(ctx context.Context) PermissionArrayOutput {
	return o
}

func (o PermissionArrayOutput) Index(i pulumi.IntInput) PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Permission {
		return vs[0].([]Permission)[vs[1].(int)]
	}).(PermissionOutput)
}

// Role definition permissions.
type PermissionResponse struct {
	// Allowed actions.
	Actions []string `pulumi:"actions"`
	// Denied actions.
	NotActions []string `pulumi:"notActions"`
}

// PermissionResponseInput is an input type that accepts PermissionResponseArgs and PermissionResponseOutput values.
// You can construct a concrete instance of `PermissionResponseInput` via:
//
//          PermissionResponseArgs{...}
type PermissionResponseInput interface {
	pulumi.Input

	ToPermissionResponseOutput() PermissionResponseOutput
	ToPermissionResponseOutputWithContext(context.Context) PermissionResponseOutput
}

// Role definition permissions.
type PermissionResponseArgs struct {
	// Allowed actions.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// Denied actions.
	NotActions pulumi.StringArrayInput `pulumi:"notActions"`
}

func (PermissionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionResponse)(nil)).Elem()
}

func (i PermissionResponseArgs) ToPermissionResponseOutput() PermissionResponseOutput {
	return i.ToPermissionResponseOutputWithContext(context.Background())
}

func (i PermissionResponseArgs) ToPermissionResponseOutputWithContext(ctx context.Context) PermissionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionResponseOutput)
}

// PermissionResponseArrayInput is an input type that accepts PermissionResponseArray and PermissionResponseArrayOutput values.
// You can construct a concrete instance of `PermissionResponseArrayInput` via:
//
//          PermissionResponseArray{ PermissionResponseArgs{...} }
type PermissionResponseArrayInput interface {
	pulumi.Input

	ToPermissionResponseArrayOutput() PermissionResponseArrayOutput
	ToPermissionResponseArrayOutputWithContext(context.Context) PermissionResponseArrayOutput
}

type PermissionResponseArray []PermissionResponseInput

func (PermissionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionResponse)(nil)).Elem()
}

func (i PermissionResponseArray) ToPermissionResponseArrayOutput() PermissionResponseArrayOutput {
	return i.ToPermissionResponseArrayOutputWithContext(context.Background())
}

func (i PermissionResponseArray) ToPermissionResponseArrayOutputWithContext(ctx context.Context) PermissionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionResponseArrayOutput)
}

// Role definition permissions.
type PermissionResponseOutput struct{ *pulumi.OutputState }

func (PermissionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionResponse)(nil)).Elem()
}

func (o PermissionResponseOutput) ToPermissionResponseOutput() PermissionResponseOutput {
	return o
}

func (o PermissionResponseOutput) ToPermissionResponseOutputWithContext(ctx context.Context) PermissionResponseOutput {
	return o
}

// Allowed actions.
func (o PermissionResponseOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionResponse) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Denied actions.
func (o PermissionResponseOutput) NotActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionResponse) []string { return v.NotActions }).(pulumi.StringArrayOutput)
}

type PermissionResponseArrayOutput struct{ *pulumi.OutputState }

func (PermissionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionResponse)(nil)).Elem()
}

func (o PermissionResponseArrayOutput) ToPermissionResponseArrayOutput() PermissionResponseArrayOutput {
	return o
}

func (o PermissionResponseArrayOutput) ToPermissionResponseArrayOutputWithContext(ctx context.Context) PermissionResponseArrayOutput {
	return o
}

func (o PermissionResponseArrayOutput) Index(i pulumi.IntInput) PermissionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionResponse {
		return vs[0].([]PermissionResponse)[vs[1].(int)]
	}).(PermissionResponseOutput)
}

// The policy assignment.
type PolicyAssignmentType struct {
	// The managed identity associated with the policy assignment.
	Identity *IdentityResponse `pulumi:"identity"`
	// The location of the policy assignment. Only required when utilizing managed identity.
	Location *string `pulumi:"location"`
	// The name of the policy assignment.
	Name string `pulumi:"name"`
	// Properties for the policy assignment.
	Properties PolicyAssignmentPropertiesResponse `pulumi:"properties"`
	// The policy sku. This property is optional, obsolete, and will be ignored.
	Sku *PolicySkuResponse `pulumi:"sku"`
	// The type of the policy assignment.
	Type string `pulumi:"type"`
}

// PolicyAssignmentTypeInput is an input type that accepts PolicyAssignmentTypeArgs and PolicyAssignmentTypeOutput values.
// You can construct a concrete instance of `PolicyAssignmentTypeInput` via:
//
//          PolicyAssignmentTypeArgs{...}
type PolicyAssignmentTypeInput interface {
	pulumi.Input

	ToPolicyAssignmentTypeOutput() PolicyAssignmentTypeOutput
	ToPolicyAssignmentTypeOutputWithContext(context.Context) PolicyAssignmentTypeOutput
}

// The policy assignment.
type PolicyAssignmentTypeArgs struct {
	// The managed identity associated with the policy assignment.
	Identity IdentityResponsePtrInput `pulumi:"identity"`
	// The location of the policy assignment. Only required when utilizing managed identity.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the policy assignment.
	Name pulumi.StringInput `pulumi:"name"`
	// Properties for the policy assignment.
	Properties PolicyAssignmentPropertiesResponseInput `pulumi:"properties"`
	// The policy sku. This property is optional, obsolete, and will be ignored.
	Sku PolicySkuResponsePtrInput `pulumi:"sku"`
	// The type of the policy assignment.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PolicyAssignmentTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAssignmentType)(nil)).Elem()
}

func (i PolicyAssignmentTypeArgs) ToPolicyAssignmentTypeOutput() PolicyAssignmentTypeOutput {
	return i.ToPolicyAssignmentTypeOutputWithContext(context.Background())
}

func (i PolicyAssignmentTypeArgs) ToPolicyAssignmentTypeOutputWithContext(ctx context.Context) PolicyAssignmentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAssignmentTypeOutput)
}

// The policy assignment.
type PolicyAssignmentTypeOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAssignmentType)(nil)).Elem()
}

func (o PolicyAssignmentTypeOutput) ToPolicyAssignmentTypeOutput() PolicyAssignmentTypeOutput {
	return o
}

func (o PolicyAssignmentTypeOutput) ToPolicyAssignmentTypeOutputWithContext(ctx context.Context) PolicyAssignmentTypeOutput {
	return o
}

// The managed identity associated with the policy assignment.
func (o PolicyAssignmentTypeOutput) Identity() IdentityResponsePtrOutput {
	return o.ApplyT(func(v PolicyAssignmentType) *IdentityResponse { return v.Identity }).(IdentityResponsePtrOutput)
}

// The location of the policy assignment. Only required when utilizing managed identity.
func (o PolicyAssignmentTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the policy assignment.
func (o PolicyAssignmentTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyAssignmentType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties for the policy assignment.
func (o PolicyAssignmentTypeOutput) Properties() PolicyAssignmentPropertiesResponseOutput {
	return o.ApplyT(func(v PolicyAssignmentType) PolicyAssignmentPropertiesResponse { return v.Properties }).(PolicyAssignmentPropertiesResponseOutput)
}

// The policy sku. This property is optional, obsolete, and will be ignored.
func (o PolicyAssignmentTypeOutput) Sku() PolicySkuResponsePtrOutput {
	return o.ApplyT(func(v PolicyAssignmentType) *PolicySkuResponse { return v.Sku }).(PolicySkuResponsePtrOutput)
}

// The type of the policy assignment.
func (o PolicyAssignmentTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyAssignmentType) string { return v.Type }).(pulumi.StringOutput)
}

// The policy assignment properties.
type PolicyAssignmentProperties struct {
	// This message will be part of response in case of policy violation.
	Description *string `pulumi:"description"`
	// The display name of the policy assignment.
	DisplayName *string `pulumi:"displayName"`
	// The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
	EnforcementMode *string `pulumi:"enforcementMode"`
	// The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata map[string]string `pulumi:"metadata"`
	// The policy's excluded scopes.
	NotScopes []string `pulumi:"notScopes"`
	// The parameter values for the assigned policy rule. The keys are the parameter names.
	Parameters *ParameterValues `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition being assigned.
	PolicyDefinitionId *string `pulumi:"policyDefinitionId"`
	// The scope for the policy assignment.
	Scope *string `pulumi:"scope"`
}

// PolicyAssignmentPropertiesInput is an input type that accepts PolicyAssignmentPropertiesArgs and PolicyAssignmentPropertiesOutput values.
// You can construct a concrete instance of `PolicyAssignmentPropertiesInput` via:
//
//          PolicyAssignmentPropertiesArgs{...}
type PolicyAssignmentPropertiesInput interface {
	pulumi.Input

	ToPolicyAssignmentPropertiesOutput() PolicyAssignmentPropertiesOutput
	ToPolicyAssignmentPropertiesOutputWithContext(context.Context) PolicyAssignmentPropertiesOutput
}

// The policy assignment properties.
type PolicyAssignmentPropertiesArgs struct {
	// This message will be part of response in case of policy violation.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The display name of the policy assignment.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
	EnforcementMode pulumi.StringPtrInput `pulumi:"enforcementMode"`
	// The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// The policy's excluded scopes.
	NotScopes pulumi.StringArrayInput `pulumi:"notScopes"`
	// The parameter values for the assigned policy rule. The keys are the parameter names.
	Parameters ParameterValuesPtrInput `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition being assigned.
	PolicyDefinitionId pulumi.StringPtrInput `pulumi:"policyDefinitionId"`
	// The scope for the policy assignment.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (PolicyAssignmentPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAssignmentProperties)(nil)).Elem()
}

func (i PolicyAssignmentPropertiesArgs) ToPolicyAssignmentPropertiesOutput() PolicyAssignmentPropertiesOutput {
	return i.ToPolicyAssignmentPropertiesOutputWithContext(context.Background())
}

func (i PolicyAssignmentPropertiesArgs) ToPolicyAssignmentPropertiesOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAssignmentPropertiesOutput)
}

func (i PolicyAssignmentPropertiesArgs) ToPolicyAssignmentPropertiesPtrOutput() PolicyAssignmentPropertiesPtrOutput {
	return i.ToPolicyAssignmentPropertiesPtrOutputWithContext(context.Background())
}

func (i PolicyAssignmentPropertiesArgs) ToPolicyAssignmentPropertiesPtrOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAssignmentPropertiesOutput).ToPolicyAssignmentPropertiesPtrOutputWithContext(ctx)
}

// PolicyAssignmentPropertiesPtrInput is an input type that accepts PolicyAssignmentPropertiesArgs, PolicyAssignmentPropertiesPtr and PolicyAssignmentPropertiesPtrOutput values.
// You can construct a concrete instance of `PolicyAssignmentPropertiesPtrInput` via:
//
//          PolicyAssignmentPropertiesArgs{...}
//
//  or:
//
//          nil
type PolicyAssignmentPropertiesPtrInput interface {
	pulumi.Input

	ToPolicyAssignmentPropertiesPtrOutput() PolicyAssignmentPropertiesPtrOutput
	ToPolicyAssignmentPropertiesPtrOutputWithContext(context.Context) PolicyAssignmentPropertiesPtrOutput
}

type policyAssignmentPropertiesPtrType PolicyAssignmentPropertiesArgs

func PolicyAssignmentPropertiesPtr(v *PolicyAssignmentPropertiesArgs) PolicyAssignmentPropertiesPtrInput {
	return (*policyAssignmentPropertiesPtrType)(v)
}

func (*policyAssignmentPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAssignmentProperties)(nil)).Elem()
}

func (i *policyAssignmentPropertiesPtrType) ToPolicyAssignmentPropertiesPtrOutput() PolicyAssignmentPropertiesPtrOutput {
	return i.ToPolicyAssignmentPropertiesPtrOutputWithContext(context.Background())
}

func (i *policyAssignmentPropertiesPtrType) ToPolicyAssignmentPropertiesPtrOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAssignmentPropertiesPtrOutput)
}

// The policy assignment properties.
type PolicyAssignmentPropertiesOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAssignmentProperties)(nil)).Elem()
}

func (o PolicyAssignmentPropertiesOutput) ToPolicyAssignmentPropertiesOutput() PolicyAssignmentPropertiesOutput {
	return o
}

func (o PolicyAssignmentPropertiesOutput) ToPolicyAssignmentPropertiesOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesOutput {
	return o
}

func (o PolicyAssignmentPropertiesOutput) ToPolicyAssignmentPropertiesPtrOutput() PolicyAssignmentPropertiesPtrOutput {
	return o.ToPolicyAssignmentPropertiesPtrOutputWithContext(context.Background())
}

func (o PolicyAssignmentPropertiesOutput) ToPolicyAssignmentPropertiesPtrOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentProperties) *PolicyAssignmentProperties {
		return &v
	}).(PolicyAssignmentPropertiesPtrOutput)
}

// This message will be part of response in case of policy violation.
func (o PolicyAssignmentPropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentProperties) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the policy assignment.
func (o PolicyAssignmentPropertiesOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentProperties) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
func (o PolicyAssignmentPropertiesOutput) EnforcementMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentProperties) *string { return v.EnforcementMode }).(pulumi.StringPtrOutput)
}

// The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
func (o PolicyAssignmentPropertiesOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v PolicyAssignmentProperties) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// The policy's excluded scopes.
func (o PolicyAssignmentPropertiesOutput) NotScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyAssignmentProperties) []string { return v.NotScopes }).(pulumi.StringArrayOutput)
}

// The parameter values for the assigned policy rule. The keys are the parameter names.
func (o PolicyAssignmentPropertiesOutput) Parameters() ParameterValuesPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentProperties) *ParameterValues { return v.Parameters }).(ParameterValuesPtrOutput)
}

// The ID of the policy definition or policy set definition being assigned.
func (o PolicyAssignmentPropertiesOutput) PolicyDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentProperties) *string { return v.PolicyDefinitionId }).(pulumi.StringPtrOutput)
}

// The scope for the policy assignment.
func (o PolicyAssignmentPropertiesOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentProperties) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type PolicyAssignmentPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAssignmentProperties)(nil)).Elem()
}

func (o PolicyAssignmentPropertiesPtrOutput) ToPolicyAssignmentPropertiesPtrOutput() PolicyAssignmentPropertiesPtrOutput {
	return o
}

func (o PolicyAssignmentPropertiesPtrOutput) ToPolicyAssignmentPropertiesPtrOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesPtrOutput {
	return o
}

func (o PolicyAssignmentPropertiesPtrOutput) Elem() PolicyAssignmentPropertiesOutput {
	return o.ApplyT(func(v *PolicyAssignmentProperties) PolicyAssignmentProperties { return *v }).(PolicyAssignmentPropertiesOutput)
}

// This message will be part of response in case of policy violation.
func (o PolicyAssignmentPropertiesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentProperties) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The display name of the policy assignment.
func (o PolicyAssignmentPropertiesPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentProperties) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
func (o PolicyAssignmentPropertiesPtrOutput) EnforcementMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentProperties) *string {
		if v == nil {
			return nil
		}
		return v.EnforcementMode
	}).(pulumi.StringPtrOutput)
}

// The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
func (o PolicyAssignmentPropertiesPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyAssignmentProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// The policy's excluded scopes.
func (o PolicyAssignmentPropertiesPtrOutput) NotScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyAssignmentProperties) []string {
		if v == nil {
			return nil
		}
		return v.NotScopes
	}).(pulumi.StringArrayOutput)
}

// The parameter values for the assigned policy rule. The keys are the parameter names.
func (o PolicyAssignmentPropertiesPtrOutput) Parameters() ParameterValuesPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentProperties) *ParameterValues {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterValuesPtrOutput)
}

// The ID of the policy definition or policy set definition being assigned.
func (o PolicyAssignmentPropertiesPtrOutput) PolicyDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentProperties) *string {
		if v == nil {
			return nil
		}
		return v.PolicyDefinitionId
	}).(pulumi.StringPtrOutput)
}

// The scope for the policy assignment.
func (o PolicyAssignmentPropertiesPtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentProperties) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// The policy assignment properties.
type PolicyAssignmentPropertiesResponse struct {
	// This message will be part of response in case of policy violation.
	Description *string `pulumi:"description"`
	// The display name of the policy assignment.
	DisplayName *string `pulumi:"displayName"`
	// The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
	EnforcementMode *string `pulumi:"enforcementMode"`
	// The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata map[string]string `pulumi:"metadata"`
	// The policy's excluded scopes.
	NotScopes []string `pulumi:"notScopes"`
	// The parameter values for the assigned policy rule. The keys are the parameter names.
	Parameters *ParameterValuesResponse `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition being assigned.
	PolicyDefinitionId *string `pulumi:"policyDefinitionId"`
	// The scope for the policy assignment.
	Scope *string `pulumi:"scope"`
}

// PolicyAssignmentPropertiesResponseInput is an input type that accepts PolicyAssignmentPropertiesResponseArgs and PolicyAssignmentPropertiesResponseOutput values.
// You can construct a concrete instance of `PolicyAssignmentPropertiesResponseInput` via:
//
//          PolicyAssignmentPropertiesResponseArgs{...}
type PolicyAssignmentPropertiesResponseInput interface {
	pulumi.Input

	ToPolicyAssignmentPropertiesResponseOutput() PolicyAssignmentPropertiesResponseOutput
	ToPolicyAssignmentPropertiesResponseOutputWithContext(context.Context) PolicyAssignmentPropertiesResponseOutput
}

// The policy assignment properties.
type PolicyAssignmentPropertiesResponseArgs struct {
	// This message will be part of response in case of policy violation.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The display name of the policy assignment.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
	EnforcementMode pulumi.StringPtrInput `pulumi:"enforcementMode"`
	// The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// The policy's excluded scopes.
	NotScopes pulumi.StringArrayInput `pulumi:"notScopes"`
	// The parameter values for the assigned policy rule. The keys are the parameter names.
	Parameters ParameterValuesResponsePtrInput `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition being assigned.
	PolicyDefinitionId pulumi.StringPtrInput `pulumi:"policyDefinitionId"`
	// The scope for the policy assignment.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (PolicyAssignmentPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAssignmentPropertiesResponse)(nil)).Elem()
}

func (i PolicyAssignmentPropertiesResponseArgs) ToPolicyAssignmentPropertiesResponseOutput() PolicyAssignmentPropertiesResponseOutput {
	return i.ToPolicyAssignmentPropertiesResponseOutputWithContext(context.Background())
}

func (i PolicyAssignmentPropertiesResponseArgs) ToPolicyAssignmentPropertiesResponseOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAssignmentPropertiesResponseOutput)
}

func (i PolicyAssignmentPropertiesResponseArgs) ToPolicyAssignmentPropertiesResponsePtrOutput() PolicyAssignmentPropertiesResponsePtrOutput {
	return i.ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i PolicyAssignmentPropertiesResponseArgs) ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAssignmentPropertiesResponseOutput).ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(ctx)
}

// PolicyAssignmentPropertiesResponsePtrInput is an input type that accepts PolicyAssignmentPropertiesResponseArgs, PolicyAssignmentPropertiesResponsePtr and PolicyAssignmentPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `PolicyAssignmentPropertiesResponsePtrInput` via:
//
//          PolicyAssignmentPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type PolicyAssignmentPropertiesResponsePtrInput interface {
	pulumi.Input

	ToPolicyAssignmentPropertiesResponsePtrOutput() PolicyAssignmentPropertiesResponsePtrOutput
	ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(context.Context) PolicyAssignmentPropertiesResponsePtrOutput
}

type policyAssignmentPropertiesResponsePtrType PolicyAssignmentPropertiesResponseArgs

func PolicyAssignmentPropertiesResponsePtr(v *PolicyAssignmentPropertiesResponseArgs) PolicyAssignmentPropertiesResponsePtrInput {
	return (*policyAssignmentPropertiesResponsePtrType)(v)
}

func (*policyAssignmentPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAssignmentPropertiesResponse)(nil)).Elem()
}

func (i *policyAssignmentPropertiesResponsePtrType) ToPolicyAssignmentPropertiesResponsePtrOutput() PolicyAssignmentPropertiesResponsePtrOutput {
	return i.ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *policyAssignmentPropertiesResponsePtrType) ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAssignmentPropertiesResponsePtrOutput)
}

// The policy assignment properties.
type PolicyAssignmentPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAssignmentPropertiesResponse)(nil)).Elem()
}

func (o PolicyAssignmentPropertiesResponseOutput) ToPolicyAssignmentPropertiesResponseOutput() PolicyAssignmentPropertiesResponseOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponseOutput) ToPolicyAssignmentPropertiesResponseOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponseOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponseOutput) ToPolicyAssignmentPropertiesResponsePtrOutput() PolicyAssignmentPropertiesResponsePtrOutput {
	return o.ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o PolicyAssignmentPropertiesResponseOutput) ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *PolicyAssignmentPropertiesResponse {
		return &v
	}).(PolicyAssignmentPropertiesResponsePtrOutput)
}

// This message will be part of response in case of policy violation.
func (o PolicyAssignmentPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the policy assignment.
func (o PolicyAssignmentPropertiesResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
func (o PolicyAssignmentPropertiesResponseOutput) EnforcementMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *string { return v.EnforcementMode }).(pulumi.StringPtrOutput)
}

// The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
func (o PolicyAssignmentPropertiesResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// The policy's excluded scopes.
func (o PolicyAssignmentPropertiesResponseOutput) NotScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) []string { return v.NotScopes }).(pulumi.StringArrayOutput)
}

// The parameter values for the assigned policy rule. The keys are the parameter names.
func (o PolicyAssignmentPropertiesResponseOutput) Parameters() ParameterValuesResponsePtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *ParameterValuesResponse { return v.Parameters }).(ParameterValuesResponsePtrOutput)
}

// The ID of the policy definition or policy set definition being assigned.
func (o PolicyAssignmentPropertiesResponseOutput) PolicyDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *string { return v.PolicyDefinitionId }).(pulumi.StringPtrOutput)
}

// The scope for the policy assignment.
func (o PolicyAssignmentPropertiesResponseOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type PolicyAssignmentPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAssignmentPropertiesResponse)(nil)).Elem()
}

func (o PolicyAssignmentPropertiesResponsePtrOutput) ToPolicyAssignmentPropertiesResponsePtrOutput() PolicyAssignmentPropertiesResponsePtrOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponsePtrOutput) ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponsePtrOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponsePtrOutput) Elem() PolicyAssignmentPropertiesResponseOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) PolicyAssignmentPropertiesResponse { return *v }).(PolicyAssignmentPropertiesResponseOutput)
}

// This message will be part of response in case of policy violation.
func (o PolicyAssignmentPropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The display name of the policy assignment.
func (o PolicyAssignmentPropertiesResponsePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
func (o PolicyAssignmentPropertiesResponsePtrOutput) EnforcementMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.EnforcementMode
	}).(pulumi.StringPtrOutput)
}

// The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
func (o PolicyAssignmentPropertiesResponsePtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// The policy's excluded scopes.
func (o PolicyAssignmentPropertiesResponsePtrOutput) NotScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.NotScopes
	}).(pulumi.StringArrayOutput)
}

// The parameter values for the assigned policy rule. The keys are the parameter names.
func (o PolicyAssignmentPropertiesResponsePtrOutput) Parameters() ParameterValuesResponsePtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) *ParameterValuesResponse {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterValuesResponsePtrOutput)
}

// The ID of the policy definition or policy set definition being assigned.
func (o PolicyAssignmentPropertiesResponsePtrOutput) PolicyDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PolicyDefinitionId
	}).(pulumi.StringPtrOutput)
}

// The scope for the policy assignment.
func (o PolicyAssignmentPropertiesResponsePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// The policy definition.
type PolicyDefinitionType struct {
	// The name of the policy definition.
	Name string `pulumi:"name"`
	// The policy definition properties.
	Properties PolicyDefinitionPropertiesResponse `pulumi:"properties"`
	// The type of the resource (Microsoft.Authorization/policyDefinitions).
	Type string `pulumi:"type"`
}

// PolicyDefinitionTypeInput is an input type that accepts PolicyDefinitionTypeArgs and PolicyDefinitionTypeOutput values.
// You can construct a concrete instance of `PolicyDefinitionTypeInput` via:
//
//          PolicyDefinitionTypeArgs{...}
type PolicyDefinitionTypeInput interface {
	pulumi.Input

	ToPolicyDefinitionTypeOutput() PolicyDefinitionTypeOutput
	ToPolicyDefinitionTypeOutputWithContext(context.Context) PolicyDefinitionTypeOutput
}

// The policy definition.
type PolicyDefinitionTypeArgs struct {
	// The name of the policy definition.
	Name pulumi.StringInput `pulumi:"name"`
	// The policy definition properties.
	Properties PolicyDefinitionPropertiesResponseInput `pulumi:"properties"`
	// The type of the resource (Microsoft.Authorization/policyDefinitions).
	Type pulumi.StringInput `pulumi:"type"`
}

func (PolicyDefinitionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionType)(nil)).Elem()
}

func (i PolicyDefinitionTypeArgs) ToPolicyDefinitionTypeOutput() PolicyDefinitionTypeOutput {
	return i.ToPolicyDefinitionTypeOutputWithContext(context.Background())
}

func (i PolicyDefinitionTypeArgs) ToPolicyDefinitionTypeOutputWithContext(ctx context.Context) PolicyDefinitionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionTypeOutput)
}

// The policy definition.
type PolicyDefinitionTypeOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionType)(nil)).Elem()
}

func (o PolicyDefinitionTypeOutput) ToPolicyDefinitionTypeOutput() PolicyDefinitionTypeOutput {
	return o
}

func (o PolicyDefinitionTypeOutput) ToPolicyDefinitionTypeOutputWithContext(ctx context.Context) PolicyDefinitionTypeOutput {
	return o
}

// The name of the policy definition.
func (o PolicyDefinitionTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionType) string { return v.Name }).(pulumi.StringOutput)
}

// The policy definition properties.
func (o PolicyDefinitionTypeOutput) Properties() PolicyDefinitionPropertiesResponseOutput {
	return o.ApplyT(func(v PolicyDefinitionType) PolicyDefinitionPropertiesResponse { return v.Properties }).(PolicyDefinitionPropertiesResponseOutput)
}

// The type of the resource (Microsoft.Authorization/policyDefinitions).
func (o PolicyDefinitionTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionType) string { return v.Type }).(pulumi.StringOutput)
}

// The policy definition group.
type PolicyDefinitionGroup struct {
	// A resource ID of a resource that contains additional metadata about the group.
	AdditionalMetadataId *string `pulumi:"additionalMetadataId"`
	// The group's category.
	Category *string `pulumi:"category"`
	// The group's description.
	Description *string `pulumi:"description"`
	// The group's display name.
	DisplayName *string `pulumi:"displayName"`
	// The name of the group.
	Name string `pulumi:"name"`
}

// PolicyDefinitionGroupInput is an input type that accepts PolicyDefinitionGroupArgs and PolicyDefinitionGroupOutput values.
// You can construct a concrete instance of `PolicyDefinitionGroupInput` via:
//
//          PolicyDefinitionGroupArgs{...}
type PolicyDefinitionGroupInput interface {
	pulumi.Input

	ToPolicyDefinitionGroupOutput() PolicyDefinitionGroupOutput
	ToPolicyDefinitionGroupOutputWithContext(context.Context) PolicyDefinitionGroupOutput
}

// The policy definition group.
type PolicyDefinitionGroupArgs struct {
	// A resource ID of a resource that contains additional metadata about the group.
	AdditionalMetadataId pulumi.StringPtrInput `pulumi:"additionalMetadataId"`
	// The group's category.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// The group's description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The group's display name.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The name of the group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (PolicyDefinitionGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionGroup)(nil)).Elem()
}

func (i PolicyDefinitionGroupArgs) ToPolicyDefinitionGroupOutput() PolicyDefinitionGroupOutput {
	return i.ToPolicyDefinitionGroupOutputWithContext(context.Background())
}

func (i PolicyDefinitionGroupArgs) ToPolicyDefinitionGroupOutputWithContext(ctx context.Context) PolicyDefinitionGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionGroupOutput)
}

// PolicyDefinitionGroupArrayInput is an input type that accepts PolicyDefinitionGroupArray and PolicyDefinitionGroupArrayOutput values.
// You can construct a concrete instance of `PolicyDefinitionGroupArrayInput` via:
//
//          PolicyDefinitionGroupArray{ PolicyDefinitionGroupArgs{...} }
type PolicyDefinitionGroupArrayInput interface {
	pulumi.Input

	ToPolicyDefinitionGroupArrayOutput() PolicyDefinitionGroupArrayOutput
	ToPolicyDefinitionGroupArrayOutputWithContext(context.Context) PolicyDefinitionGroupArrayOutput
}

type PolicyDefinitionGroupArray []PolicyDefinitionGroupInput

func (PolicyDefinitionGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionGroup)(nil)).Elem()
}

func (i PolicyDefinitionGroupArray) ToPolicyDefinitionGroupArrayOutput() PolicyDefinitionGroupArrayOutput {
	return i.ToPolicyDefinitionGroupArrayOutputWithContext(context.Background())
}

func (i PolicyDefinitionGroupArray) ToPolicyDefinitionGroupArrayOutputWithContext(ctx context.Context) PolicyDefinitionGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionGroupArrayOutput)
}

// The policy definition group.
type PolicyDefinitionGroupOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionGroup)(nil)).Elem()
}

func (o PolicyDefinitionGroupOutput) ToPolicyDefinitionGroupOutput() PolicyDefinitionGroupOutput {
	return o
}

func (o PolicyDefinitionGroupOutput) ToPolicyDefinitionGroupOutputWithContext(ctx context.Context) PolicyDefinitionGroupOutput {
	return o
}

// A resource ID of a resource that contains additional metadata about the group.
func (o PolicyDefinitionGroupOutput) AdditionalMetadataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) *string { return v.AdditionalMetadataId }).(pulumi.StringPtrOutput)
}

// The group's category.
func (o PolicyDefinitionGroupOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// The group's description.
func (o PolicyDefinitionGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The group's display name.
func (o PolicyDefinitionGroupOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the group.
func (o PolicyDefinitionGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) string { return v.Name }).(pulumi.StringOutput)
}

type PolicyDefinitionGroupArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionGroup)(nil)).Elem()
}

func (o PolicyDefinitionGroupArrayOutput) ToPolicyDefinitionGroupArrayOutput() PolicyDefinitionGroupArrayOutput {
	return o
}

func (o PolicyDefinitionGroupArrayOutput) ToPolicyDefinitionGroupArrayOutputWithContext(ctx context.Context) PolicyDefinitionGroupArrayOutput {
	return o
}

func (o PolicyDefinitionGroupArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionGroup {
		return vs[0].([]PolicyDefinitionGroup)[vs[1].(int)]
	}).(PolicyDefinitionGroupOutput)
}

// The policy definition group.
type PolicyDefinitionGroupResponse struct {
	// A resource ID of a resource that contains additional metadata about the group.
	AdditionalMetadataId *string `pulumi:"additionalMetadataId"`
	// The group's category.
	Category *string `pulumi:"category"`
	// The group's description.
	Description *string `pulumi:"description"`
	// The group's display name.
	DisplayName *string `pulumi:"displayName"`
	// The name of the group.
	Name string `pulumi:"name"`
}

// PolicyDefinitionGroupResponseInput is an input type that accepts PolicyDefinitionGroupResponseArgs and PolicyDefinitionGroupResponseOutput values.
// You can construct a concrete instance of `PolicyDefinitionGroupResponseInput` via:
//
//          PolicyDefinitionGroupResponseArgs{...}
type PolicyDefinitionGroupResponseInput interface {
	pulumi.Input

	ToPolicyDefinitionGroupResponseOutput() PolicyDefinitionGroupResponseOutput
	ToPolicyDefinitionGroupResponseOutputWithContext(context.Context) PolicyDefinitionGroupResponseOutput
}

// The policy definition group.
type PolicyDefinitionGroupResponseArgs struct {
	// A resource ID of a resource that contains additional metadata about the group.
	AdditionalMetadataId pulumi.StringPtrInput `pulumi:"additionalMetadataId"`
	// The group's category.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// The group's description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The group's display name.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The name of the group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (PolicyDefinitionGroupResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionGroupResponse)(nil)).Elem()
}

func (i PolicyDefinitionGroupResponseArgs) ToPolicyDefinitionGroupResponseOutput() PolicyDefinitionGroupResponseOutput {
	return i.ToPolicyDefinitionGroupResponseOutputWithContext(context.Background())
}

func (i PolicyDefinitionGroupResponseArgs) ToPolicyDefinitionGroupResponseOutputWithContext(ctx context.Context) PolicyDefinitionGroupResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionGroupResponseOutput)
}

// PolicyDefinitionGroupResponseArrayInput is an input type that accepts PolicyDefinitionGroupResponseArray and PolicyDefinitionGroupResponseArrayOutput values.
// You can construct a concrete instance of `PolicyDefinitionGroupResponseArrayInput` via:
//
//          PolicyDefinitionGroupResponseArray{ PolicyDefinitionGroupResponseArgs{...} }
type PolicyDefinitionGroupResponseArrayInput interface {
	pulumi.Input

	ToPolicyDefinitionGroupResponseArrayOutput() PolicyDefinitionGroupResponseArrayOutput
	ToPolicyDefinitionGroupResponseArrayOutputWithContext(context.Context) PolicyDefinitionGroupResponseArrayOutput
}

type PolicyDefinitionGroupResponseArray []PolicyDefinitionGroupResponseInput

func (PolicyDefinitionGroupResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionGroupResponse)(nil)).Elem()
}

func (i PolicyDefinitionGroupResponseArray) ToPolicyDefinitionGroupResponseArrayOutput() PolicyDefinitionGroupResponseArrayOutput {
	return i.ToPolicyDefinitionGroupResponseArrayOutputWithContext(context.Background())
}

func (i PolicyDefinitionGroupResponseArray) ToPolicyDefinitionGroupResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionGroupResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionGroupResponseArrayOutput)
}

// The policy definition group.
type PolicyDefinitionGroupResponseOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionGroupResponse)(nil)).Elem()
}

func (o PolicyDefinitionGroupResponseOutput) ToPolicyDefinitionGroupResponseOutput() PolicyDefinitionGroupResponseOutput {
	return o
}

func (o PolicyDefinitionGroupResponseOutput) ToPolicyDefinitionGroupResponseOutputWithContext(ctx context.Context) PolicyDefinitionGroupResponseOutput {
	return o
}

// A resource ID of a resource that contains additional metadata about the group.
func (o PolicyDefinitionGroupResponseOutput) AdditionalMetadataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) *string { return v.AdditionalMetadataId }).(pulumi.StringPtrOutput)
}

// The group's category.
func (o PolicyDefinitionGroupResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// The group's description.
func (o PolicyDefinitionGroupResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The group's display name.
func (o PolicyDefinitionGroupResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the group.
func (o PolicyDefinitionGroupResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) string { return v.Name }).(pulumi.StringOutput)
}

type PolicyDefinitionGroupResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionGroupResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionGroupResponse)(nil)).Elem()
}

func (o PolicyDefinitionGroupResponseArrayOutput) ToPolicyDefinitionGroupResponseArrayOutput() PolicyDefinitionGroupResponseArrayOutput {
	return o
}

func (o PolicyDefinitionGroupResponseArrayOutput) ToPolicyDefinitionGroupResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionGroupResponseArrayOutput {
	return o
}

func (o PolicyDefinitionGroupResponseArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionGroupResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionGroupResponse {
		return vs[0].([]PolicyDefinitionGroupResponse)[vs[1].(int)]
	}).(PolicyDefinitionGroupResponseOutput)
}

// The policy definition properties.
type PolicyDefinitionProperties struct {
	// The policy definition description.
	Description *string `pulumi:"description"`
	// The display name of the policy definition.
	DisplayName *string `pulumi:"displayName"`
	// The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata map[string]string `pulumi:"metadata"`
	// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
	Mode *string `pulumi:"mode"`
	// The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
	Parameters *ParameterDefinitions `pulumi:"parameters"`
	// The policy rule.
	PolicyRule map[string]string `pulumi:"policyRule"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType *string `pulumi:"policyType"`
}

// PolicyDefinitionPropertiesInput is an input type that accepts PolicyDefinitionPropertiesArgs and PolicyDefinitionPropertiesOutput values.
// You can construct a concrete instance of `PolicyDefinitionPropertiesInput` via:
//
//          PolicyDefinitionPropertiesArgs{...}
type PolicyDefinitionPropertiesInput interface {
	pulumi.Input

	ToPolicyDefinitionPropertiesOutput() PolicyDefinitionPropertiesOutput
	ToPolicyDefinitionPropertiesOutputWithContext(context.Context) PolicyDefinitionPropertiesOutput
}

// The policy definition properties.
type PolicyDefinitionPropertiesArgs struct {
	// The policy definition description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The display name of the policy definition.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
	Parameters ParameterDefinitionsPtrInput `pulumi:"parameters"`
	// The policy rule.
	PolicyRule pulumi.StringMapInput `pulumi:"policyRule"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType pulumi.StringPtrInput `pulumi:"policyType"`
}

func (PolicyDefinitionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionProperties)(nil)).Elem()
}

func (i PolicyDefinitionPropertiesArgs) ToPolicyDefinitionPropertiesOutput() PolicyDefinitionPropertiesOutput {
	return i.ToPolicyDefinitionPropertiesOutputWithContext(context.Background())
}

func (i PolicyDefinitionPropertiesArgs) ToPolicyDefinitionPropertiesOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionPropertiesOutput)
}

func (i PolicyDefinitionPropertiesArgs) ToPolicyDefinitionPropertiesPtrOutput() PolicyDefinitionPropertiesPtrOutput {
	return i.ToPolicyDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (i PolicyDefinitionPropertiesArgs) ToPolicyDefinitionPropertiesPtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionPropertiesOutput).ToPolicyDefinitionPropertiesPtrOutputWithContext(ctx)
}

// PolicyDefinitionPropertiesPtrInput is an input type that accepts PolicyDefinitionPropertiesArgs, PolicyDefinitionPropertiesPtr and PolicyDefinitionPropertiesPtrOutput values.
// You can construct a concrete instance of `PolicyDefinitionPropertiesPtrInput` via:
//
//          PolicyDefinitionPropertiesArgs{...}
//
//  or:
//
//          nil
type PolicyDefinitionPropertiesPtrInput interface {
	pulumi.Input

	ToPolicyDefinitionPropertiesPtrOutput() PolicyDefinitionPropertiesPtrOutput
	ToPolicyDefinitionPropertiesPtrOutputWithContext(context.Context) PolicyDefinitionPropertiesPtrOutput
}

type policyDefinitionPropertiesPtrType PolicyDefinitionPropertiesArgs

func PolicyDefinitionPropertiesPtr(v *PolicyDefinitionPropertiesArgs) PolicyDefinitionPropertiesPtrInput {
	return (*policyDefinitionPropertiesPtrType)(v)
}

func (*policyDefinitionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyDefinitionProperties)(nil)).Elem()
}

func (i *policyDefinitionPropertiesPtrType) ToPolicyDefinitionPropertiesPtrOutput() PolicyDefinitionPropertiesPtrOutput {
	return i.ToPolicyDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (i *policyDefinitionPropertiesPtrType) ToPolicyDefinitionPropertiesPtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionPropertiesPtrOutput)
}

// The policy definition properties.
type PolicyDefinitionPropertiesOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionProperties)(nil)).Elem()
}

func (o PolicyDefinitionPropertiesOutput) ToPolicyDefinitionPropertiesOutput() PolicyDefinitionPropertiesOutput {
	return o
}

func (o PolicyDefinitionPropertiesOutput) ToPolicyDefinitionPropertiesOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesOutput {
	return o
}

func (o PolicyDefinitionPropertiesOutput) ToPolicyDefinitionPropertiesPtrOutput() PolicyDefinitionPropertiesPtrOutput {
	return o.ToPolicyDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (o PolicyDefinitionPropertiesOutput) ToPolicyDefinitionPropertiesPtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionProperties) *PolicyDefinitionProperties {
		return &v
	}).(PolicyDefinitionPropertiesPtrOutput)
}

// The policy definition description.
func (o PolicyDefinitionPropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionProperties) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the policy definition.
func (o PolicyDefinitionPropertiesOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionProperties) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
func (o PolicyDefinitionPropertiesOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v PolicyDefinitionProperties) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
func (o PolicyDefinitionPropertiesOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionProperties) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
func (o PolicyDefinitionPropertiesOutput) Parameters() ParameterDefinitionsPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionProperties) *ParameterDefinitions { return v.Parameters }).(ParameterDefinitionsPtrOutput)
}

// The policy rule.
func (o PolicyDefinitionPropertiesOutput) PolicyRule() pulumi.StringMapOutput {
	return o.ApplyT(func(v PolicyDefinitionProperties) map[string]string { return v.PolicyRule }).(pulumi.StringMapOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
func (o PolicyDefinitionPropertiesOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionProperties) *string { return v.PolicyType }).(pulumi.StringPtrOutput)
}

type PolicyDefinitionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyDefinitionProperties)(nil)).Elem()
}

func (o PolicyDefinitionPropertiesPtrOutput) ToPolicyDefinitionPropertiesPtrOutput() PolicyDefinitionPropertiesPtrOutput {
	return o
}

func (o PolicyDefinitionPropertiesPtrOutput) ToPolicyDefinitionPropertiesPtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesPtrOutput {
	return o
}

func (o PolicyDefinitionPropertiesPtrOutput) Elem() PolicyDefinitionPropertiesOutput {
	return o.ApplyT(func(v *PolicyDefinitionProperties) PolicyDefinitionProperties { return *v }).(PolicyDefinitionPropertiesOutput)
}

// The policy definition description.
func (o PolicyDefinitionPropertiesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The display name of the policy definition.
func (o PolicyDefinitionPropertiesPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
func (o PolicyDefinitionPropertiesPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyDefinitionProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
func (o PolicyDefinitionPropertiesPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
func (o PolicyDefinitionPropertiesPtrOutput) Parameters() ParameterDefinitionsPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionProperties) *ParameterDefinitions {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterDefinitionsPtrOutput)
}

// The policy rule.
func (o PolicyDefinitionPropertiesPtrOutput) PolicyRule() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyDefinitionProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.PolicyRule
	}).(pulumi.StringMapOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
func (o PolicyDefinitionPropertiesPtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// The policy definition properties.
type PolicyDefinitionPropertiesResponse struct {
	// The policy definition description.
	Description *string `pulumi:"description"`
	// The display name of the policy definition.
	DisplayName *string `pulumi:"displayName"`
	// The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata map[string]string `pulumi:"metadata"`
	// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
	Mode *string `pulumi:"mode"`
	// The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
	Parameters *ParameterDefinitionsResponse `pulumi:"parameters"`
	// The policy rule.
	PolicyRule map[string]string `pulumi:"policyRule"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType *string `pulumi:"policyType"`
}

// PolicyDefinitionPropertiesResponseInput is an input type that accepts PolicyDefinitionPropertiesResponseArgs and PolicyDefinitionPropertiesResponseOutput values.
// You can construct a concrete instance of `PolicyDefinitionPropertiesResponseInput` via:
//
//          PolicyDefinitionPropertiesResponseArgs{...}
type PolicyDefinitionPropertiesResponseInput interface {
	pulumi.Input

	ToPolicyDefinitionPropertiesResponseOutput() PolicyDefinitionPropertiesResponseOutput
	ToPolicyDefinitionPropertiesResponseOutputWithContext(context.Context) PolicyDefinitionPropertiesResponseOutput
}

// The policy definition properties.
type PolicyDefinitionPropertiesResponseArgs struct {
	// The policy definition description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The display name of the policy definition.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
	Parameters ParameterDefinitionsResponsePtrInput `pulumi:"parameters"`
	// The policy rule.
	PolicyRule pulumi.StringMapInput `pulumi:"policyRule"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType pulumi.StringPtrInput `pulumi:"policyType"`
}

func (PolicyDefinitionPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionPropertiesResponse)(nil)).Elem()
}

func (i PolicyDefinitionPropertiesResponseArgs) ToPolicyDefinitionPropertiesResponseOutput() PolicyDefinitionPropertiesResponseOutput {
	return i.ToPolicyDefinitionPropertiesResponseOutputWithContext(context.Background())
}

func (i PolicyDefinitionPropertiesResponseArgs) ToPolicyDefinitionPropertiesResponseOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionPropertiesResponseOutput)
}

func (i PolicyDefinitionPropertiesResponseArgs) ToPolicyDefinitionPropertiesResponsePtrOutput() PolicyDefinitionPropertiesResponsePtrOutput {
	return i.ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i PolicyDefinitionPropertiesResponseArgs) ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionPropertiesResponseOutput).ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(ctx)
}

// PolicyDefinitionPropertiesResponsePtrInput is an input type that accepts PolicyDefinitionPropertiesResponseArgs, PolicyDefinitionPropertiesResponsePtr and PolicyDefinitionPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `PolicyDefinitionPropertiesResponsePtrInput` via:
//
//          PolicyDefinitionPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type PolicyDefinitionPropertiesResponsePtrInput interface {
	pulumi.Input

	ToPolicyDefinitionPropertiesResponsePtrOutput() PolicyDefinitionPropertiesResponsePtrOutput
	ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(context.Context) PolicyDefinitionPropertiesResponsePtrOutput
}

type policyDefinitionPropertiesResponsePtrType PolicyDefinitionPropertiesResponseArgs

func PolicyDefinitionPropertiesResponsePtr(v *PolicyDefinitionPropertiesResponseArgs) PolicyDefinitionPropertiesResponsePtrInput {
	return (*policyDefinitionPropertiesResponsePtrType)(v)
}

func (*policyDefinitionPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyDefinitionPropertiesResponse)(nil)).Elem()
}

func (i *policyDefinitionPropertiesResponsePtrType) ToPolicyDefinitionPropertiesResponsePtrOutput() PolicyDefinitionPropertiesResponsePtrOutput {
	return i.ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *policyDefinitionPropertiesResponsePtrType) ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionPropertiesResponsePtrOutput)
}

// The policy definition properties.
type PolicyDefinitionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionPropertiesResponse)(nil)).Elem()
}

func (o PolicyDefinitionPropertiesResponseOutput) ToPolicyDefinitionPropertiesResponseOutput() PolicyDefinitionPropertiesResponseOutput {
	return o
}

func (o PolicyDefinitionPropertiesResponseOutput) ToPolicyDefinitionPropertiesResponseOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponseOutput {
	return o
}

func (o PolicyDefinitionPropertiesResponseOutput) ToPolicyDefinitionPropertiesResponsePtrOutput() PolicyDefinitionPropertiesResponsePtrOutput {
	return o.ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o PolicyDefinitionPropertiesResponseOutput) ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) *PolicyDefinitionPropertiesResponse {
		return &v
	}).(PolicyDefinitionPropertiesResponsePtrOutput)
}

// The policy definition description.
func (o PolicyDefinitionPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the policy definition.
func (o PolicyDefinitionPropertiesResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
func (o PolicyDefinitionPropertiesResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
func (o PolicyDefinitionPropertiesResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
func (o PolicyDefinitionPropertiesResponseOutput) Parameters() ParameterDefinitionsResponsePtrOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) *ParameterDefinitionsResponse { return v.Parameters }).(ParameterDefinitionsResponsePtrOutput)
}

// The policy rule.
func (o PolicyDefinitionPropertiesResponseOutput) PolicyRule() pulumi.StringMapOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) map[string]string { return v.PolicyRule }).(pulumi.StringMapOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
func (o PolicyDefinitionPropertiesResponseOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) *string { return v.PolicyType }).(pulumi.StringPtrOutput)
}

type PolicyDefinitionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyDefinitionPropertiesResponse)(nil)).Elem()
}

func (o PolicyDefinitionPropertiesResponsePtrOutput) ToPolicyDefinitionPropertiesResponsePtrOutput() PolicyDefinitionPropertiesResponsePtrOutput {
	return o
}

func (o PolicyDefinitionPropertiesResponsePtrOutput) ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponsePtrOutput {
	return o
}

func (o PolicyDefinitionPropertiesResponsePtrOutput) Elem() PolicyDefinitionPropertiesResponseOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) PolicyDefinitionPropertiesResponse { return *v }).(PolicyDefinitionPropertiesResponseOutput)
}

// The policy definition description.
func (o PolicyDefinitionPropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The display name of the policy definition.
func (o PolicyDefinitionPropertiesResponsePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
func (o PolicyDefinitionPropertiesResponsePtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
func (o PolicyDefinitionPropertiesResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
func (o PolicyDefinitionPropertiesResponsePtrOutput) Parameters() ParameterDefinitionsResponsePtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) *ParameterDefinitionsResponse {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterDefinitionsResponsePtrOutput)
}

// The policy rule.
func (o PolicyDefinitionPropertiesResponsePtrOutput) PolicyRule() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.PolicyRule
	}).(pulumi.StringMapOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
func (o PolicyDefinitionPropertiesResponsePtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// The policy definition reference.
type PolicyDefinitionReference struct {
	// The name of the groups that this policy definition reference belongs to.
	GroupNames []string `pulumi:"groupNames"`
	// The parameter values for the referenced policy rule. The keys are the parameter names.
	Parameters *ParameterValues `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId string `pulumi:"policyDefinitionId"`
	// A unique id (within the policy set definition) for this policy definition reference.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
}

// PolicyDefinitionReferenceInput is an input type that accepts PolicyDefinitionReferenceArgs and PolicyDefinitionReferenceOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceInput` via:
//
//          PolicyDefinitionReferenceArgs{...}
type PolicyDefinitionReferenceInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceOutput() PolicyDefinitionReferenceOutput
	ToPolicyDefinitionReferenceOutputWithContext(context.Context) PolicyDefinitionReferenceOutput
}

// The policy definition reference.
type PolicyDefinitionReferenceArgs struct {
	// The name of the groups that this policy definition reference belongs to.
	GroupNames pulumi.StringArrayInput `pulumi:"groupNames"`
	// The parameter values for the referenced policy rule. The keys are the parameter names.
	Parameters ParameterValuesPtrInput `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId pulumi.StringInput `pulumi:"policyDefinitionId"`
	// A unique id (within the policy set definition) for this policy definition reference.
	PolicyDefinitionReferenceId pulumi.StringPtrInput `pulumi:"policyDefinitionReferenceId"`
}

func (PolicyDefinitionReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReference)(nil)).Elem()
}

func (i PolicyDefinitionReferenceArgs) ToPolicyDefinitionReferenceOutput() PolicyDefinitionReferenceOutput {
	return i.ToPolicyDefinitionReferenceOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceArgs) ToPolicyDefinitionReferenceOutputWithContext(ctx context.Context) PolicyDefinitionReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceOutput)
}

// PolicyDefinitionReferenceArrayInput is an input type that accepts PolicyDefinitionReferenceArray and PolicyDefinitionReferenceArrayOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceArrayInput` via:
//
//          PolicyDefinitionReferenceArray{ PolicyDefinitionReferenceArgs{...} }
type PolicyDefinitionReferenceArrayInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceArrayOutput() PolicyDefinitionReferenceArrayOutput
	ToPolicyDefinitionReferenceArrayOutputWithContext(context.Context) PolicyDefinitionReferenceArrayOutput
}

type PolicyDefinitionReferenceArray []PolicyDefinitionReferenceInput

func (PolicyDefinitionReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReference)(nil)).Elem()
}

func (i PolicyDefinitionReferenceArray) ToPolicyDefinitionReferenceArrayOutput() PolicyDefinitionReferenceArrayOutput {
	return i.ToPolicyDefinitionReferenceArrayOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceArray) ToPolicyDefinitionReferenceArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceArrayOutput)
}

// The policy definition reference.
type PolicyDefinitionReferenceOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReference)(nil)).Elem()
}

func (o PolicyDefinitionReferenceOutput) ToPolicyDefinitionReferenceOutput() PolicyDefinitionReferenceOutput {
	return o
}

func (o PolicyDefinitionReferenceOutput) ToPolicyDefinitionReferenceOutputWithContext(ctx context.Context) PolicyDefinitionReferenceOutput {
	return o
}

// The name of the groups that this policy definition reference belongs to.
func (o PolicyDefinitionReferenceOutput) GroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyDefinitionReference) []string { return v.GroupNames }).(pulumi.StringArrayOutput)
}

// The parameter values for the referenced policy rule. The keys are the parameter names.
func (o PolicyDefinitionReferenceOutput) Parameters() ParameterValuesPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionReference) *ParameterValues { return v.Parameters }).(ParameterValuesPtrOutput)
}

// The ID of the policy definition or policy set definition.
func (o PolicyDefinitionReferenceOutput) PolicyDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionReference) string { return v.PolicyDefinitionId }).(pulumi.StringOutput)
}

// A unique id (within the policy set definition) for this policy definition reference.
func (o PolicyDefinitionReferenceOutput) PolicyDefinitionReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionReference) *string { return v.PolicyDefinitionReferenceId }).(pulumi.StringPtrOutput)
}

type PolicyDefinitionReferenceArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReference)(nil)).Elem()
}

func (o PolicyDefinitionReferenceArrayOutput) ToPolicyDefinitionReferenceArrayOutput() PolicyDefinitionReferenceArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceArrayOutput) ToPolicyDefinitionReferenceArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionReference {
		return vs[0].([]PolicyDefinitionReference)[vs[1].(int)]
	}).(PolicyDefinitionReferenceOutput)
}

// The policy definition reference.
type PolicyDefinitionReferenceResponse struct {
	// The name of the groups that this policy definition reference belongs to.
	GroupNames []string `pulumi:"groupNames"`
	// The parameter values for the referenced policy rule. The keys are the parameter names.
	Parameters *ParameterValuesResponse `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId string `pulumi:"policyDefinitionId"`
	// A unique id (within the policy set definition) for this policy definition reference.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
}

// PolicyDefinitionReferenceResponseInput is an input type that accepts PolicyDefinitionReferenceResponseArgs and PolicyDefinitionReferenceResponseOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceResponseInput` via:
//
//          PolicyDefinitionReferenceResponseArgs{...}
type PolicyDefinitionReferenceResponseInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceResponseOutput() PolicyDefinitionReferenceResponseOutput
	ToPolicyDefinitionReferenceResponseOutputWithContext(context.Context) PolicyDefinitionReferenceResponseOutput
}

// The policy definition reference.
type PolicyDefinitionReferenceResponseArgs struct {
	// The name of the groups that this policy definition reference belongs to.
	GroupNames pulumi.StringArrayInput `pulumi:"groupNames"`
	// The parameter values for the referenced policy rule. The keys are the parameter names.
	Parameters ParameterValuesResponsePtrInput `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId pulumi.StringInput `pulumi:"policyDefinitionId"`
	// A unique id (within the policy set definition) for this policy definition reference.
	PolicyDefinitionReferenceId pulumi.StringPtrInput `pulumi:"policyDefinitionReferenceId"`
}

func (PolicyDefinitionReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReferenceResponse)(nil)).Elem()
}

func (i PolicyDefinitionReferenceResponseArgs) ToPolicyDefinitionReferenceResponseOutput() PolicyDefinitionReferenceResponseOutput {
	return i.ToPolicyDefinitionReferenceResponseOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceResponseArgs) ToPolicyDefinitionReferenceResponseOutputWithContext(ctx context.Context) PolicyDefinitionReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceResponseOutput)
}

// PolicyDefinitionReferenceResponseArrayInput is an input type that accepts PolicyDefinitionReferenceResponseArray and PolicyDefinitionReferenceResponseArrayOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceResponseArrayInput` via:
//
//          PolicyDefinitionReferenceResponseArray{ PolicyDefinitionReferenceResponseArgs{...} }
type PolicyDefinitionReferenceResponseArrayInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceResponseArrayOutput() PolicyDefinitionReferenceResponseArrayOutput
	ToPolicyDefinitionReferenceResponseArrayOutputWithContext(context.Context) PolicyDefinitionReferenceResponseArrayOutput
}

type PolicyDefinitionReferenceResponseArray []PolicyDefinitionReferenceResponseInput

func (PolicyDefinitionReferenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReferenceResponse)(nil)).Elem()
}

func (i PolicyDefinitionReferenceResponseArray) ToPolicyDefinitionReferenceResponseArrayOutput() PolicyDefinitionReferenceResponseArrayOutput {
	return i.ToPolicyDefinitionReferenceResponseArrayOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceResponseArray) ToPolicyDefinitionReferenceResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceResponseArrayOutput)
}

// The policy definition reference.
type PolicyDefinitionReferenceResponseOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReferenceResponse)(nil)).Elem()
}

func (o PolicyDefinitionReferenceResponseOutput) ToPolicyDefinitionReferenceResponseOutput() PolicyDefinitionReferenceResponseOutput {
	return o
}

func (o PolicyDefinitionReferenceResponseOutput) ToPolicyDefinitionReferenceResponseOutputWithContext(ctx context.Context) PolicyDefinitionReferenceResponseOutput {
	return o
}

// The name of the groups that this policy definition reference belongs to.
func (o PolicyDefinitionReferenceResponseOutput) GroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) []string { return v.GroupNames }).(pulumi.StringArrayOutput)
}

// The parameter values for the referenced policy rule. The keys are the parameter names.
func (o PolicyDefinitionReferenceResponseOutput) Parameters() ParameterValuesResponsePtrOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) *ParameterValuesResponse { return v.Parameters }).(ParameterValuesResponsePtrOutput)
}

// The ID of the policy definition or policy set definition.
func (o PolicyDefinitionReferenceResponseOutput) PolicyDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) string { return v.PolicyDefinitionId }).(pulumi.StringOutput)
}

// A unique id (within the policy set definition) for this policy definition reference.
func (o PolicyDefinitionReferenceResponseOutput) PolicyDefinitionReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) *string { return v.PolicyDefinitionReferenceId }).(pulumi.StringPtrOutput)
}

type PolicyDefinitionReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReferenceResponse)(nil)).Elem()
}

func (o PolicyDefinitionReferenceResponseArrayOutput) ToPolicyDefinitionReferenceResponseArrayOutput() PolicyDefinitionReferenceResponseArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceResponseArrayOutput) ToPolicyDefinitionReferenceResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceResponseArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceResponseArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionReferenceResponse {
		return vs[0].([]PolicyDefinitionReferenceResponse)[vs[1].(int)]
	}).(PolicyDefinitionReferenceResponseOutput)
}

// The policy set definition.
type PolicySetDefinitionType struct {
	// The name of the policy set definition.
	Name string `pulumi:"name"`
	// The policy definition properties.
	Properties PolicySetDefinitionPropertiesResponse `pulumi:"properties"`
	// The type of the resource (Microsoft.Authorization/policySetDefinitions).
	Type string `pulumi:"type"`
}

// PolicySetDefinitionTypeInput is an input type that accepts PolicySetDefinitionTypeArgs and PolicySetDefinitionTypeOutput values.
// You can construct a concrete instance of `PolicySetDefinitionTypeInput` via:
//
//          PolicySetDefinitionTypeArgs{...}
type PolicySetDefinitionTypeInput interface {
	pulumi.Input

	ToPolicySetDefinitionTypeOutput() PolicySetDefinitionTypeOutput
	ToPolicySetDefinitionTypeOutputWithContext(context.Context) PolicySetDefinitionTypeOutput
}

// The policy set definition.
type PolicySetDefinitionTypeArgs struct {
	// The name of the policy set definition.
	Name pulumi.StringInput `pulumi:"name"`
	// The policy definition properties.
	Properties PolicySetDefinitionPropertiesResponseInput `pulumi:"properties"`
	// The type of the resource (Microsoft.Authorization/policySetDefinitions).
	Type pulumi.StringInput `pulumi:"type"`
}

func (PolicySetDefinitionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySetDefinitionType)(nil)).Elem()
}

func (i PolicySetDefinitionTypeArgs) ToPolicySetDefinitionTypeOutput() PolicySetDefinitionTypeOutput {
	return i.ToPolicySetDefinitionTypeOutputWithContext(context.Background())
}

func (i PolicySetDefinitionTypeArgs) ToPolicySetDefinitionTypeOutputWithContext(ctx context.Context) PolicySetDefinitionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetDefinitionTypeOutput)
}

// The policy set definition.
type PolicySetDefinitionTypeOutput struct{ *pulumi.OutputState }

func (PolicySetDefinitionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySetDefinitionType)(nil)).Elem()
}

func (o PolicySetDefinitionTypeOutput) ToPolicySetDefinitionTypeOutput() PolicySetDefinitionTypeOutput {
	return o
}

func (o PolicySetDefinitionTypeOutput) ToPolicySetDefinitionTypeOutputWithContext(ctx context.Context) PolicySetDefinitionTypeOutput {
	return o
}

// The name of the policy set definition.
func (o PolicySetDefinitionTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicySetDefinitionType) string { return v.Name }).(pulumi.StringOutput)
}

// The policy definition properties.
func (o PolicySetDefinitionTypeOutput) Properties() PolicySetDefinitionPropertiesResponseOutput {
	return o.ApplyT(func(v PolicySetDefinitionType) PolicySetDefinitionPropertiesResponse { return v.Properties }).(PolicySetDefinitionPropertiesResponseOutput)
}

// The type of the resource (Microsoft.Authorization/policySetDefinitions).
func (o PolicySetDefinitionTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PolicySetDefinitionType) string { return v.Type }).(pulumi.StringOutput)
}

// The policy set definition properties.
type PolicySetDefinitionProperties struct {
	// The policy set definition description.
	Description *string `pulumi:"description"`
	// The display name of the policy set definition.
	DisplayName *string `pulumi:"displayName"`
	// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata map[string]string `pulumi:"metadata"`
	// The policy set definition parameters that can be used in policy definition references.
	Parameters *ParameterDefinitions `pulumi:"parameters"`
	// The metadata describing groups of policy definition references within the policy set definition.
	PolicyDefinitionGroups []PolicyDefinitionGroup `pulumi:"policyDefinitionGroups"`
	// An array of policy definition references.
	PolicyDefinitions []PolicyDefinitionReference `pulumi:"policyDefinitions"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType *string `pulumi:"policyType"`
}

// PolicySetDefinitionPropertiesInput is an input type that accepts PolicySetDefinitionPropertiesArgs and PolicySetDefinitionPropertiesOutput values.
// You can construct a concrete instance of `PolicySetDefinitionPropertiesInput` via:
//
//          PolicySetDefinitionPropertiesArgs{...}
type PolicySetDefinitionPropertiesInput interface {
	pulumi.Input

	ToPolicySetDefinitionPropertiesOutput() PolicySetDefinitionPropertiesOutput
	ToPolicySetDefinitionPropertiesOutputWithContext(context.Context) PolicySetDefinitionPropertiesOutput
}

// The policy set definition properties.
type PolicySetDefinitionPropertiesArgs struct {
	// The policy set definition description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The display name of the policy set definition.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// The policy set definition parameters that can be used in policy definition references.
	Parameters ParameterDefinitionsPtrInput `pulumi:"parameters"`
	// The metadata describing groups of policy definition references within the policy set definition.
	PolicyDefinitionGroups PolicyDefinitionGroupArrayInput `pulumi:"policyDefinitionGroups"`
	// An array of policy definition references.
	PolicyDefinitions PolicyDefinitionReferenceArrayInput `pulumi:"policyDefinitions"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType pulumi.StringPtrInput `pulumi:"policyType"`
}

func (PolicySetDefinitionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySetDefinitionProperties)(nil)).Elem()
}

func (i PolicySetDefinitionPropertiesArgs) ToPolicySetDefinitionPropertiesOutput() PolicySetDefinitionPropertiesOutput {
	return i.ToPolicySetDefinitionPropertiesOutputWithContext(context.Background())
}

func (i PolicySetDefinitionPropertiesArgs) ToPolicySetDefinitionPropertiesOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetDefinitionPropertiesOutput)
}

func (i PolicySetDefinitionPropertiesArgs) ToPolicySetDefinitionPropertiesPtrOutput() PolicySetDefinitionPropertiesPtrOutput {
	return i.ToPolicySetDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (i PolicySetDefinitionPropertiesArgs) ToPolicySetDefinitionPropertiesPtrOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetDefinitionPropertiesOutput).ToPolicySetDefinitionPropertiesPtrOutputWithContext(ctx)
}

// PolicySetDefinitionPropertiesPtrInput is an input type that accepts PolicySetDefinitionPropertiesArgs, PolicySetDefinitionPropertiesPtr and PolicySetDefinitionPropertiesPtrOutput values.
// You can construct a concrete instance of `PolicySetDefinitionPropertiesPtrInput` via:
//
//          PolicySetDefinitionPropertiesArgs{...}
//
//  or:
//
//          nil
type PolicySetDefinitionPropertiesPtrInput interface {
	pulumi.Input

	ToPolicySetDefinitionPropertiesPtrOutput() PolicySetDefinitionPropertiesPtrOutput
	ToPolicySetDefinitionPropertiesPtrOutputWithContext(context.Context) PolicySetDefinitionPropertiesPtrOutput
}

type policySetDefinitionPropertiesPtrType PolicySetDefinitionPropertiesArgs

func PolicySetDefinitionPropertiesPtr(v *PolicySetDefinitionPropertiesArgs) PolicySetDefinitionPropertiesPtrInput {
	return (*policySetDefinitionPropertiesPtrType)(v)
}

func (*policySetDefinitionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySetDefinitionProperties)(nil)).Elem()
}

func (i *policySetDefinitionPropertiesPtrType) ToPolicySetDefinitionPropertiesPtrOutput() PolicySetDefinitionPropertiesPtrOutput {
	return i.ToPolicySetDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (i *policySetDefinitionPropertiesPtrType) ToPolicySetDefinitionPropertiesPtrOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetDefinitionPropertiesPtrOutput)
}

// The policy set definition properties.
type PolicySetDefinitionPropertiesOutput struct{ *pulumi.OutputState }

func (PolicySetDefinitionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySetDefinitionProperties)(nil)).Elem()
}

func (o PolicySetDefinitionPropertiesOutput) ToPolicySetDefinitionPropertiesOutput() PolicySetDefinitionPropertiesOutput {
	return o
}

func (o PolicySetDefinitionPropertiesOutput) ToPolicySetDefinitionPropertiesOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesOutput {
	return o
}

func (o PolicySetDefinitionPropertiesOutput) ToPolicySetDefinitionPropertiesPtrOutput() PolicySetDefinitionPropertiesPtrOutput {
	return o.ToPolicySetDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (o PolicySetDefinitionPropertiesOutput) ToPolicySetDefinitionPropertiesPtrOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesPtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionProperties) *PolicySetDefinitionProperties {
		return &v
	}).(PolicySetDefinitionPropertiesPtrOutput)
}

// The policy set definition description.
func (o PolicySetDefinitionPropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionProperties) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the policy set definition.
func (o PolicySetDefinitionPropertiesOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionProperties) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
func (o PolicySetDefinitionPropertiesOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v PolicySetDefinitionProperties) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// The policy set definition parameters that can be used in policy definition references.
func (o PolicySetDefinitionPropertiesOutput) Parameters() ParameterDefinitionsPtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionProperties) *ParameterDefinitions { return v.Parameters }).(ParameterDefinitionsPtrOutput)
}

// The metadata describing groups of policy definition references within the policy set definition.
func (o PolicySetDefinitionPropertiesOutput) PolicyDefinitionGroups() PolicyDefinitionGroupArrayOutput {
	return o.ApplyT(func(v PolicySetDefinitionProperties) []PolicyDefinitionGroup { return v.PolicyDefinitionGroups }).(PolicyDefinitionGroupArrayOutput)
}

// An array of policy definition references.
func (o PolicySetDefinitionPropertiesOutput) PolicyDefinitions() PolicyDefinitionReferenceArrayOutput {
	return o.ApplyT(func(v PolicySetDefinitionProperties) []PolicyDefinitionReference { return v.PolicyDefinitions }).(PolicyDefinitionReferenceArrayOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
func (o PolicySetDefinitionPropertiesOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionProperties) *string { return v.PolicyType }).(pulumi.StringPtrOutput)
}

type PolicySetDefinitionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PolicySetDefinitionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySetDefinitionProperties)(nil)).Elem()
}

func (o PolicySetDefinitionPropertiesPtrOutput) ToPolicySetDefinitionPropertiesPtrOutput() PolicySetDefinitionPropertiesPtrOutput {
	return o
}

func (o PolicySetDefinitionPropertiesPtrOutput) ToPolicySetDefinitionPropertiesPtrOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesPtrOutput {
	return o
}

func (o PolicySetDefinitionPropertiesPtrOutput) Elem() PolicySetDefinitionPropertiesOutput {
	return o.ApplyT(func(v *PolicySetDefinitionProperties) PolicySetDefinitionProperties { return *v }).(PolicySetDefinitionPropertiesOutput)
}

// The policy set definition description.
func (o PolicySetDefinitionPropertiesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySetDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The display name of the policy set definition.
func (o PolicySetDefinitionPropertiesPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySetDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
func (o PolicySetDefinitionPropertiesPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicySetDefinitionProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// The policy set definition parameters that can be used in policy definition references.
func (o PolicySetDefinitionPropertiesPtrOutput) Parameters() ParameterDefinitionsPtrOutput {
	return o.ApplyT(func(v *PolicySetDefinitionProperties) *ParameterDefinitions {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterDefinitionsPtrOutput)
}

// The metadata describing groups of policy definition references within the policy set definition.
func (o PolicySetDefinitionPropertiesPtrOutput) PolicyDefinitionGroups() PolicyDefinitionGroupArrayOutput {
	return o.ApplyT(func(v *PolicySetDefinitionProperties) []PolicyDefinitionGroup {
		if v == nil {
			return nil
		}
		return v.PolicyDefinitionGroups
	}).(PolicyDefinitionGroupArrayOutput)
}

// An array of policy definition references.
func (o PolicySetDefinitionPropertiesPtrOutput) PolicyDefinitions() PolicyDefinitionReferenceArrayOutput {
	return o.ApplyT(func(v *PolicySetDefinitionProperties) []PolicyDefinitionReference {
		if v == nil {
			return nil
		}
		return v.PolicyDefinitions
	}).(PolicyDefinitionReferenceArrayOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
func (o PolicySetDefinitionPropertiesPtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySetDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// The policy set definition properties.
type PolicySetDefinitionPropertiesResponse struct {
	// The policy set definition description.
	Description *string `pulumi:"description"`
	// The display name of the policy set definition.
	DisplayName *string `pulumi:"displayName"`
	// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata map[string]string `pulumi:"metadata"`
	// The policy set definition parameters that can be used in policy definition references.
	Parameters *ParameterDefinitionsResponse `pulumi:"parameters"`
	// The metadata describing groups of policy definition references within the policy set definition.
	PolicyDefinitionGroups []PolicyDefinitionGroupResponse `pulumi:"policyDefinitionGroups"`
	// An array of policy definition references.
	PolicyDefinitions []PolicyDefinitionReferenceResponse `pulumi:"policyDefinitions"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType *string `pulumi:"policyType"`
}

// PolicySetDefinitionPropertiesResponseInput is an input type that accepts PolicySetDefinitionPropertiesResponseArgs and PolicySetDefinitionPropertiesResponseOutput values.
// You can construct a concrete instance of `PolicySetDefinitionPropertiesResponseInput` via:
//
//          PolicySetDefinitionPropertiesResponseArgs{...}
type PolicySetDefinitionPropertiesResponseInput interface {
	pulumi.Input

	ToPolicySetDefinitionPropertiesResponseOutput() PolicySetDefinitionPropertiesResponseOutput
	ToPolicySetDefinitionPropertiesResponseOutputWithContext(context.Context) PolicySetDefinitionPropertiesResponseOutput
}

// The policy set definition properties.
type PolicySetDefinitionPropertiesResponseArgs struct {
	// The policy set definition description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The display name of the policy set definition.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// The policy set definition parameters that can be used in policy definition references.
	Parameters ParameterDefinitionsResponsePtrInput `pulumi:"parameters"`
	// The metadata describing groups of policy definition references within the policy set definition.
	PolicyDefinitionGroups PolicyDefinitionGroupResponseArrayInput `pulumi:"policyDefinitionGroups"`
	// An array of policy definition references.
	PolicyDefinitions PolicyDefinitionReferenceResponseArrayInput `pulumi:"policyDefinitions"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType pulumi.StringPtrInput `pulumi:"policyType"`
}

func (PolicySetDefinitionPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySetDefinitionPropertiesResponse)(nil)).Elem()
}

func (i PolicySetDefinitionPropertiesResponseArgs) ToPolicySetDefinitionPropertiesResponseOutput() PolicySetDefinitionPropertiesResponseOutput {
	return i.ToPolicySetDefinitionPropertiesResponseOutputWithContext(context.Background())
}

func (i PolicySetDefinitionPropertiesResponseArgs) ToPolicySetDefinitionPropertiesResponseOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetDefinitionPropertiesResponseOutput)
}

func (i PolicySetDefinitionPropertiesResponseArgs) ToPolicySetDefinitionPropertiesResponsePtrOutput() PolicySetDefinitionPropertiesResponsePtrOutput {
	return i.ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i PolicySetDefinitionPropertiesResponseArgs) ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetDefinitionPropertiesResponseOutput).ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(ctx)
}

// PolicySetDefinitionPropertiesResponsePtrInput is an input type that accepts PolicySetDefinitionPropertiesResponseArgs, PolicySetDefinitionPropertiesResponsePtr and PolicySetDefinitionPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `PolicySetDefinitionPropertiesResponsePtrInput` via:
//
//          PolicySetDefinitionPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type PolicySetDefinitionPropertiesResponsePtrInput interface {
	pulumi.Input

	ToPolicySetDefinitionPropertiesResponsePtrOutput() PolicySetDefinitionPropertiesResponsePtrOutput
	ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(context.Context) PolicySetDefinitionPropertiesResponsePtrOutput
}

type policySetDefinitionPropertiesResponsePtrType PolicySetDefinitionPropertiesResponseArgs

func PolicySetDefinitionPropertiesResponsePtr(v *PolicySetDefinitionPropertiesResponseArgs) PolicySetDefinitionPropertiesResponsePtrInput {
	return (*policySetDefinitionPropertiesResponsePtrType)(v)
}

func (*policySetDefinitionPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySetDefinitionPropertiesResponse)(nil)).Elem()
}

func (i *policySetDefinitionPropertiesResponsePtrType) ToPolicySetDefinitionPropertiesResponsePtrOutput() PolicySetDefinitionPropertiesResponsePtrOutput {
	return i.ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *policySetDefinitionPropertiesResponsePtrType) ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetDefinitionPropertiesResponsePtrOutput)
}

// The policy set definition properties.
type PolicySetDefinitionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PolicySetDefinitionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySetDefinitionPropertiesResponse)(nil)).Elem()
}

func (o PolicySetDefinitionPropertiesResponseOutput) ToPolicySetDefinitionPropertiesResponseOutput() PolicySetDefinitionPropertiesResponseOutput {
	return o
}

func (o PolicySetDefinitionPropertiesResponseOutput) ToPolicySetDefinitionPropertiesResponseOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesResponseOutput {
	return o
}

func (o PolicySetDefinitionPropertiesResponseOutput) ToPolicySetDefinitionPropertiesResponsePtrOutput() PolicySetDefinitionPropertiesResponsePtrOutput {
	return o.ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o PolicySetDefinitionPropertiesResponseOutput) ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionPropertiesResponse) *PolicySetDefinitionPropertiesResponse {
		return &v
	}).(PolicySetDefinitionPropertiesResponsePtrOutput)
}

// The policy set definition description.
func (o PolicySetDefinitionPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the policy set definition.
func (o PolicySetDefinitionPropertiesResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionPropertiesResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
func (o PolicySetDefinitionPropertiesResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v PolicySetDefinitionPropertiesResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// The policy set definition parameters that can be used in policy definition references.
func (o PolicySetDefinitionPropertiesResponseOutput) Parameters() ParameterDefinitionsResponsePtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionPropertiesResponse) *ParameterDefinitionsResponse { return v.Parameters }).(ParameterDefinitionsResponsePtrOutput)
}

// The metadata describing groups of policy definition references within the policy set definition.
func (o PolicySetDefinitionPropertiesResponseOutput) PolicyDefinitionGroups() PolicyDefinitionGroupResponseArrayOutput {
	return o.ApplyT(func(v PolicySetDefinitionPropertiesResponse) []PolicyDefinitionGroupResponse {
		return v.PolicyDefinitionGroups
	}).(PolicyDefinitionGroupResponseArrayOutput)
}

// An array of policy definition references.
func (o PolicySetDefinitionPropertiesResponseOutput) PolicyDefinitions() PolicyDefinitionReferenceResponseArrayOutput {
	return o.ApplyT(func(v PolicySetDefinitionPropertiesResponse) []PolicyDefinitionReferenceResponse {
		return v.PolicyDefinitions
	}).(PolicyDefinitionReferenceResponseArrayOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
func (o PolicySetDefinitionPropertiesResponseOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionPropertiesResponse) *string { return v.PolicyType }).(pulumi.StringPtrOutput)
}

type PolicySetDefinitionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PolicySetDefinitionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySetDefinitionPropertiesResponse)(nil)).Elem()
}

func (o PolicySetDefinitionPropertiesResponsePtrOutput) ToPolicySetDefinitionPropertiesResponsePtrOutput() PolicySetDefinitionPropertiesResponsePtrOutput {
	return o
}

func (o PolicySetDefinitionPropertiesResponsePtrOutput) ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesResponsePtrOutput {
	return o
}

func (o PolicySetDefinitionPropertiesResponsePtrOutput) Elem() PolicySetDefinitionPropertiesResponseOutput {
	return o.ApplyT(func(v *PolicySetDefinitionPropertiesResponse) PolicySetDefinitionPropertiesResponse { return *v }).(PolicySetDefinitionPropertiesResponseOutput)
}

// The policy set definition description.
func (o PolicySetDefinitionPropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySetDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The display name of the policy set definition.
func (o PolicySetDefinitionPropertiesResponsePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySetDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
func (o PolicySetDefinitionPropertiesResponsePtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicySetDefinitionPropertiesResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// The policy set definition parameters that can be used in policy definition references.
func (o PolicySetDefinitionPropertiesResponsePtrOutput) Parameters() ParameterDefinitionsResponsePtrOutput {
	return o.ApplyT(func(v *PolicySetDefinitionPropertiesResponse) *ParameterDefinitionsResponse {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ParameterDefinitionsResponsePtrOutput)
}

// The metadata describing groups of policy definition references within the policy set definition.
func (o PolicySetDefinitionPropertiesResponsePtrOutput) PolicyDefinitionGroups() PolicyDefinitionGroupResponseArrayOutput {
	return o.ApplyT(func(v *PolicySetDefinitionPropertiesResponse) []PolicyDefinitionGroupResponse {
		if v == nil {
			return nil
		}
		return v.PolicyDefinitionGroups
	}).(PolicyDefinitionGroupResponseArrayOutput)
}

// An array of policy definition references.
func (o PolicySetDefinitionPropertiesResponsePtrOutput) PolicyDefinitions() PolicyDefinitionReferenceResponseArrayOutput {
	return o.ApplyT(func(v *PolicySetDefinitionPropertiesResponse) []PolicyDefinitionReferenceResponse {
		if v == nil {
			return nil
		}
		return v.PolicyDefinitions
	}).(PolicyDefinitionReferenceResponseArrayOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
func (o PolicySetDefinitionPropertiesResponsePtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySetDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// The policy sku. This property is optional, obsolete, and will be ignored.
type PolicySku struct {
	// The name of the policy sku. Possible values are A0 and A1.
	Name string `pulumi:"name"`
	// The policy sku tier. Possible values are Free and Standard.
	Tier *string `pulumi:"tier"`
}

// PolicySkuInput is an input type that accepts PolicySkuArgs and PolicySkuOutput values.
// You can construct a concrete instance of `PolicySkuInput` via:
//
//          PolicySkuArgs{...}
type PolicySkuInput interface {
	pulumi.Input

	ToPolicySkuOutput() PolicySkuOutput
	ToPolicySkuOutputWithContext(context.Context) PolicySkuOutput
}

// The policy sku. This property is optional, obsolete, and will be ignored.
type PolicySkuArgs struct {
	// The name of the policy sku. Possible values are A0 and A1.
	Name pulumi.StringInput `pulumi:"name"`
	// The policy sku tier. Possible values are Free and Standard.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (PolicySkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySku)(nil)).Elem()
}

func (i PolicySkuArgs) ToPolicySkuOutput() PolicySkuOutput {
	return i.ToPolicySkuOutputWithContext(context.Background())
}

func (i PolicySkuArgs) ToPolicySkuOutputWithContext(ctx context.Context) PolicySkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySkuOutput)
}

func (i PolicySkuArgs) ToPolicySkuPtrOutput() PolicySkuPtrOutput {
	return i.ToPolicySkuPtrOutputWithContext(context.Background())
}

func (i PolicySkuArgs) ToPolicySkuPtrOutputWithContext(ctx context.Context) PolicySkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySkuOutput).ToPolicySkuPtrOutputWithContext(ctx)
}

// PolicySkuPtrInput is an input type that accepts PolicySkuArgs, PolicySkuPtr and PolicySkuPtrOutput values.
// You can construct a concrete instance of `PolicySkuPtrInput` via:
//
//          PolicySkuArgs{...}
//
//  or:
//
//          nil
type PolicySkuPtrInput interface {
	pulumi.Input

	ToPolicySkuPtrOutput() PolicySkuPtrOutput
	ToPolicySkuPtrOutputWithContext(context.Context) PolicySkuPtrOutput
}

type policySkuPtrType PolicySkuArgs

func PolicySkuPtr(v *PolicySkuArgs) PolicySkuPtrInput {
	return (*policySkuPtrType)(v)
}

func (*policySkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySku)(nil)).Elem()
}

func (i *policySkuPtrType) ToPolicySkuPtrOutput() PolicySkuPtrOutput {
	return i.ToPolicySkuPtrOutputWithContext(context.Background())
}

func (i *policySkuPtrType) ToPolicySkuPtrOutputWithContext(ctx context.Context) PolicySkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySkuPtrOutput)
}

// The policy sku. This property is optional, obsolete, and will be ignored.
type PolicySkuOutput struct{ *pulumi.OutputState }

func (PolicySkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySku)(nil)).Elem()
}

func (o PolicySkuOutput) ToPolicySkuOutput() PolicySkuOutput {
	return o
}

func (o PolicySkuOutput) ToPolicySkuOutputWithContext(ctx context.Context) PolicySkuOutput {
	return o
}

func (o PolicySkuOutput) ToPolicySkuPtrOutput() PolicySkuPtrOutput {
	return o.ToPolicySkuPtrOutputWithContext(context.Background())
}

func (o PolicySkuOutput) ToPolicySkuPtrOutputWithContext(ctx context.Context) PolicySkuPtrOutput {
	return o.ApplyT(func(v PolicySku) *PolicySku {
		return &v
	}).(PolicySkuPtrOutput)
}

// The name of the policy sku. Possible values are A0 and A1.
func (o PolicySkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicySku) string { return v.Name }).(pulumi.StringOutput)
}

// The policy sku tier. Possible values are Free and Standard.
func (o PolicySkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type PolicySkuPtrOutput struct{ *pulumi.OutputState }

func (PolicySkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySku)(nil)).Elem()
}

func (o PolicySkuPtrOutput) ToPolicySkuPtrOutput() PolicySkuPtrOutput {
	return o
}

func (o PolicySkuPtrOutput) ToPolicySkuPtrOutputWithContext(ctx context.Context) PolicySkuPtrOutput {
	return o
}

func (o PolicySkuPtrOutput) Elem() PolicySkuOutput {
	return o.ApplyT(func(v *PolicySku) PolicySku { return *v }).(PolicySkuOutput)
}

// The name of the policy sku. Possible values are A0 and A1.
func (o PolicySkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The policy sku tier. Possible values are Free and Standard.
func (o PolicySkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// The policy sku. This property is optional, obsolete, and will be ignored.
type PolicySkuResponse struct {
	// The name of the policy sku. Possible values are A0 and A1.
	Name string `pulumi:"name"`
	// The policy sku tier. Possible values are Free and Standard.
	Tier *string `pulumi:"tier"`
}

// PolicySkuResponseInput is an input type that accepts PolicySkuResponseArgs and PolicySkuResponseOutput values.
// You can construct a concrete instance of `PolicySkuResponseInput` via:
//
//          PolicySkuResponseArgs{...}
type PolicySkuResponseInput interface {
	pulumi.Input

	ToPolicySkuResponseOutput() PolicySkuResponseOutput
	ToPolicySkuResponseOutputWithContext(context.Context) PolicySkuResponseOutput
}

// The policy sku. This property is optional, obsolete, and will be ignored.
type PolicySkuResponseArgs struct {
	// The name of the policy sku. Possible values are A0 and A1.
	Name pulumi.StringInput `pulumi:"name"`
	// The policy sku tier. Possible values are Free and Standard.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (PolicySkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySkuResponse)(nil)).Elem()
}

func (i PolicySkuResponseArgs) ToPolicySkuResponseOutput() PolicySkuResponseOutput {
	return i.ToPolicySkuResponseOutputWithContext(context.Background())
}

func (i PolicySkuResponseArgs) ToPolicySkuResponseOutputWithContext(ctx context.Context) PolicySkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySkuResponseOutput)
}

func (i PolicySkuResponseArgs) ToPolicySkuResponsePtrOutput() PolicySkuResponsePtrOutput {
	return i.ToPolicySkuResponsePtrOutputWithContext(context.Background())
}

func (i PolicySkuResponseArgs) ToPolicySkuResponsePtrOutputWithContext(ctx context.Context) PolicySkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySkuResponseOutput).ToPolicySkuResponsePtrOutputWithContext(ctx)
}

// PolicySkuResponsePtrInput is an input type that accepts PolicySkuResponseArgs, PolicySkuResponsePtr and PolicySkuResponsePtrOutput values.
// You can construct a concrete instance of `PolicySkuResponsePtrInput` via:
//
//          PolicySkuResponseArgs{...}
//
//  or:
//
//          nil
type PolicySkuResponsePtrInput interface {
	pulumi.Input

	ToPolicySkuResponsePtrOutput() PolicySkuResponsePtrOutput
	ToPolicySkuResponsePtrOutputWithContext(context.Context) PolicySkuResponsePtrOutput
}

type policySkuResponsePtrType PolicySkuResponseArgs

func PolicySkuResponsePtr(v *PolicySkuResponseArgs) PolicySkuResponsePtrInput {
	return (*policySkuResponsePtrType)(v)
}

func (*policySkuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySkuResponse)(nil)).Elem()
}

func (i *policySkuResponsePtrType) ToPolicySkuResponsePtrOutput() PolicySkuResponsePtrOutput {
	return i.ToPolicySkuResponsePtrOutputWithContext(context.Background())
}

func (i *policySkuResponsePtrType) ToPolicySkuResponsePtrOutputWithContext(ctx context.Context) PolicySkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySkuResponsePtrOutput)
}

// The policy sku. This property is optional, obsolete, and will be ignored.
type PolicySkuResponseOutput struct{ *pulumi.OutputState }

func (PolicySkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySkuResponse)(nil)).Elem()
}

func (o PolicySkuResponseOutput) ToPolicySkuResponseOutput() PolicySkuResponseOutput {
	return o
}

func (o PolicySkuResponseOutput) ToPolicySkuResponseOutputWithContext(ctx context.Context) PolicySkuResponseOutput {
	return o
}

func (o PolicySkuResponseOutput) ToPolicySkuResponsePtrOutput() PolicySkuResponsePtrOutput {
	return o.ToPolicySkuResponsePtrOutputWithContext(context.Background())
}

func (o PolicySkuResponseOutput) ToPolicySkuResponsePtrOutputWithContext(ctx context.Context) PolicySkuResponsePtrOutput {
	return o.ApplyT(func(v PolicySkuResponse) *PolicySkuResponse {
		return &v
	}).(PolicySkuResponsePtrOutput)
}

// The name of the policy sku. Possible values are A0 and A1.
func (o PolicySkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicySkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The policy sku tier. Possible values are Free and Standard.
func (o PolicySkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type PolicySkuResponsePtrOutput struct{ *pulumi.OutputState }

func (PolicySkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySkuResponse)(nil)).Elem()
}

func (o PolicySkuResponsePtrOutput) ToPolicySkuResponsePtrOutput() PolicySkuResponsePtrOutput {
	return o
}

func (o PolicySkuResponsePtrOutput) ToPolicySkuResponsePtrOutputWithContext(ctx context.Context) PolicySkuResponsePtrOutput {
	return o
}

func (o PolicySkuResponsePtrOutput) Elem() PolicySkuResponseOutput {
	return o.ApplyT(func(v *PolicySkuResponse) PolicySkuResponse { return *v }).(PolicySkuResponseOutput)
}

// The name of the policy sku. Possible values are A0 and A1.
func (o PolicySkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The policy sku tier. Possible values are Free and Standard.
func (o PolicySkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Role Assignments
type RoleAssignmentType struct {
	// The role assignment name.
	Name string `pulumi:"name"`
	// Role assignment properties.
	Properties RoleAssignmentPropertiesWithScopeResponse `pulumi:"properties"`
	// The role assignment type.
	Type string `pulumi:"type"`
}

// RoleAssignmentTypeInput is an input type that accepts RoleAssignmentTypeArgs and RoleAssignmentTypeOutput values.
// You can construct a concrete instance of `RoleAssignmentTypeInput` via:
//
//          RoleAssignmentTypeArgs{...}
type RoleAssignmentTypeInput interface {
	pulumi.Input

	ToRoleAssignmentTypeOutput() RoleAssignmentTypeOutput
	ToRoleAssignmentTypeOutputWithContext(context.Context) RoleAssignmentTypeOutput
}

// Role Assignments
type RoleAssignmentTypeArgs struct {
	// The role assignment name.
	Name pulumi.StringInput `pulumi:"name"`
	// Role assignment properties.
	Properties RoleAssignmentPropertiesWithScopeResponseInput `pulumi:"properties"`
	// The role assignment type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RoleAssignmentTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleAssignmentType)(nil)).Elem()
}

func (i RoleAssignmentTypeArgs) ToRoleAssignmentTypeOutput() RoleAssignmentTypeOutput {
	return i.ToRoleAssignmentTypeOutputWithContext(context.Background())
}

func (i RoleAssignmentTypeArgs) ToRoleAssignmentTypeOutputWithContext(ctx context.Context) RoleAssignmentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentTypeOutput)
}

// Role Assignments
type RoleAssignmentTypeOutput struct{ *pulumi.OutputState }

func (RoleAssignmentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleAssignmentType)(nil)).Elem()
}

func (o RoleAssignmentTypeOutput) ToRoleAssignmentTypeOutput() RoleAssignmentTypeOutput {
	return o
}

func (o RoleAssignmentTypeOutput) ToRoleAssignmentTypeOutputWithContext(ctx context.Context) RoleAssignmentTypeOutput {
	return o
}

// The role assignment name.
func (o RoleAssignmentTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RoleAssignmentType) string { return v.Name }).(pulumi.StringOutput)
}

// Role assignment properties.
func (o RoleAssignmentTypeOutput) Properties() RoleAssignmentPropertiesWithScopeResponseOutput {
	return o.ApplyT(func(v RoleAssignmentType) RoleAssignmentPropertiesWithScopeResponse { return v.Properties }).(RoleAssignmentPropertiesWithScopeResponseOutput)
}

// The role assignment type.
func (o RoleAssignmentTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RoleAssignmentType) string { return v.Type }).(pulumi.StringOutput)
}

// Role assignment properties.
type RoleAssignmentProperties struct {
	// The principal ID assigned to the role. This maps to the ID inside the Active Directory. It can point to a user, service principal, or security group.
	PrincipalId string `pulumi:"principalId"`
	// The role definition ID used in the role assignment.
	RoleDefinitionId string `pulumi:"roleDefinitionId"`
}

// RoleAssignmentPropertiesInput is an input type that accepts RoleAssignmentPropertiesArgs and RoleAssignmentPropertiesOutput values.
// You can construct a concrete instance of `RoleAssignmentPropertiesInput` via:
//
//          RoleAssignmentPropertiesArgs{...}
type RoleAssignmentPropertiesInput interface {
	pulumi.Input

	ToRoleAssignmentPropertiesOutput() RoleAssignmentPropertiesOutput
	ToRoleAssignmentPropertiesOutputWithContext(context.Context) RoleAssignmentPropertiesOutput
}

// Role assignment properties.
type RoleAssignmentPropertiesArgs struct {
	// The principal ID assigned to the role. This maps to the ID inside the Active Directory. It can point to a user, service principal, or security group.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The role definition ID used in the role assignment.
	RoleDefinitionId pulumi.StringInput `pulumi:"roleDefinitionId"`
}

func (RoleAssignmentPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleAssignmentProperties)(nil)).Elem()
}

func (i RoleAssignmentPropertiesArgs) ToRoleAssignmentPropertiesOutput() RoleAssignmentPropertiesOutput {
	return i.ToRoleAssignmentPropertiesOutputWithContext(context.Background())
}

func (i RoleAssignmentPropertiesArgs) ToRoleAssignmentPropertiesOutputWithContext(ctx context.Context) RoleAssignmentPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentPropertiesOutput)
}

func (i RoleAssignmentPropertiesArgs) ToRoleAssignmentPropertiesPtrOutput() RoleAssignmentPropertiesPtrOutput {
	return i.ToRoleAssignmentPropertiesPtrOutputWithContext(context.Background())
}

func (i RoleAssignmentPropertiesArgs) ToRoleAssignmentPropertiesPtrOutputWithContext(ctx context.Context) RoleAssignmentPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentPropertiesOutput).ToRoleAssignmentPropertiesPtrOutputWithContext(ctx)
}

// RoleAssignmentPropertiesPtrInput is an input type that accepts RoleAssignmentPropertiesArgs, RoleAssignmentPropertiesPtr and RoleAssignmentPropertiesPtrOutput values.
// You can construct a concrete instance of `RoleAssignmentPropertiesPtrInput` via:
//
//          RoleAssignmentPropertiesArgs{...}
//
//  or:
//
//          nil
type RoleAssignmentPropertiesPtrInput interface {
	pulumi.Input

	ToRoleAssignmentPropertiesPtrOutput() RoleAssignmentPropertiesPtrOutput
	ToRoleAssignmentPropertiesPtrOutputWithContext(context.Context) RoleAssignmentPropertiesPtrOutput
}

type roleAssignmentPropertiesPtrType RoleAssignmentPropertiesArgs

func RoleAssignmentPropertiesPtr(v *RoleAssignmentPropertiesArgs) RoleAssignmentPropertiesPtrInput {
	return (*roleAssignmentPropertiesPtrType)(v)
}

func (*roleAssignmentPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleAssignmentProperties)(nil)).Elem()
}

func (i *roleAssignmentPropertiesPtrType) ToRoleAssignmentPropertiesPtrOutput() RoleAssignmentPropertiesPtrOutput {
	return i.ToRoleAssignmentPropertiesPtrOutputWithContext(context.Background())
}

func (i *roleAssignmentPropertiesPtrType) ToRoleAssignmentPropertiesPtrOutputWithContext(ctx context.Context) RoleAssignmentPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentPropertiesPtrOutput)
}

// Role assignment properties.
type RoleAssignmentPropertiesOutput struct{ *pulumi.OutputState }

func (RoleAssignmentPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleAssignmentProperties)(nil)).Elem()
}

func (o RoleAssignmentPropertiesOutput) ToRoleAssignmentPropertiesOutput() RoleAssignmentPropertiesOutput {
	return o
}

func (o RoleAssignmentPropertiesOutput) ToRoleAssignmentPropertiesOutputWithContext(ctx context.Context) RoleAssignmentPropertiesOutput {
	return o
}

func (o RoleAssignmentPropertiesOutput) ToRoleAssignmentPropertiesPtrOutput() RoleAssignmentPropertiesPtrOutput {
	return o.ToRoleAssignmentPropertiesPtrOutputWithContext(context.Background())
}

func (o RoleAssignmentPropertiesOutput) ToRoleAssignmentPropertiesPtrOutputWithContext(ctx context.Context) RoleAssignmentPropertiesPtrOutput {
	return o.ApplyT(func(v RoleAssignmentProperties) *RoleAssignmentProperties {
		return &v
	}).(RoleAssignmentPropertiesPtrOutput)
}

// The principal ID assigned to the role. This maps to the ID inside the Active Directory. It can point to a user, service principal, or security group.
func (o RoleAssignmentPropertiesOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v RoleAssignmentProperties) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The role definition ID used in the role assignment.
func (o RoleAssignmentPropertiesOutput) RoleDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v RoleAssignmentProperties) string { return v.RoleDefinitionId }).(pulumi.StringOutput)
}

type RoleAssignmentPropertiesPtrOutput struct{ *pulumi.OutputState }

func (RoleAssignmentPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleAssignmentProperties)(nil)).Elem()
}

func (o RoleAssignmentPropertiesPtrOutput) ToRoleAssignmentPropertiesPtrOutput() RoleAssignmentPropertiesPtrOutput {
	return o
}

func (o RoleAssignmentPropertiesPtrOutput) ToRoleAssignmentPropertiesPtrOutputWithContext(ctx context.Context) RoleAssignmentPropertiesPtrOutput {
	return o
}

func (o RoleAssignmentPropertiesPtrOutput) Elem() RoleAssignmentPropertiesOutput {
	return o.ApplyT(func(v *RoleAssignmentProperties) RoleAssignmentProperties { return *v }).(RoleAssignmentPropertiesOutput)
}

// The principal ID assigned to the role. This maps to the ID inside the Active Directory. It can point to a user, service principal, or security group.
func (o RoleAssignmentPropertiesPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleAssignmentProperties) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The role definition ID used in the role assignment.
func (o RoleAssignmentPropertiesPtrOutput) RoleDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleAssignmentProperties) *string {
		if v == nil {
			return nil
		}
		return &v.RoleDefinitionId
	}).(pulumi.StringPtrOutput)
}

// Role assignment properties with scope.
type RoleAssignmentPropertiesWithScopeResponse struct {
	// The principal ID.
	PrincipalId *string `pulumi:"principalId"`
	// The role definition ID.
	RoleDefinitionId *string `pulumi:"roleDefinitionId"`
	// The role assignment scope.
	Scope *string `pulumi:"scope"`
}

// RoleAssignmentPropertiesWithScopeResponseInput is an input type that accepts RoleAssignmentPropertiesWithScopeResponseArgs and RoleAssignmentPropertiesWithScopeResponseOutput values.
// You can construct a concrete instance of `RoleAssignmentPropertiesWithScopeResponseInput` via:
//
//          RoleAssignmentPropertiesWithScopeResponseArgs{...}
type RoleAssignmentPropertiesWithScopeResponseInput interface {
	pulumi.Input

	ToRoleAssignmentPropertiesWithScopeResponseOutput() RoleAssignmentPropertiesWithScopeResponseOutput
	ToRoleAssignmentPropertiesWithScopeResponseOutputWithContext(context.Context) RoleAssignmentPropertiesWithScopeResponseOutput
}

// Role assignment properties with scope.
type RoleAssignmentPropertiesWithScopeResponseArgs struct {
	// The principal ID.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The role definition ID.
	RoleDefinitionId pulumi.StringPtrInput `pulumi:"roleDefinitionId"`
	// The role assignment scope.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (RoleAssignmentPropertiesWithScopeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleAssignmentPropertiesWithScopeResponse)(nil)).Elem()
}

func (i RoleAssignmentPropertiesWithScopeResponseArgs) ToRoleAssignmentPropertiesWithScopeResponseOutput() RoleAssignmentPropertiesWithScopeResponseOutput {
	return i.ToRoleAssignmentPropertiesWithScopeResponseOutputWithContext(context.Background())
}

func (i RoleAssignmentPropertiesWithScopeResponseArgs) ToRoleAssignmentPropertiesWithScopeResponseOutputWithContext(ctx context.Context) RoleAssignmentPropertiesWithScopeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentPropertiesWithScopeResponseOutput)
}

func (i RoleAssignmentPropertiesWithScopeResponseArgs) ToRoleAssignmentPropertiesWithScopeResponsePtrOutput() RoleAssignmentPropertiesWithScopeResponsePtrOutput {
	return i.ToRoleAssignmentPropertiesWithScopeResponsePtrOutputWithContext(context.Background())
}

func (i RoleAssignmentPropertiesWithScopeResponseArgs) ToRoleAssignmentPropertiesWithScopeResponsePtrOutputWithContext(ctx context.Context) RoleAssignmentPropertiesWithScopeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentPropertiesWithScopeResponseOutput).ToRoleAssignmentPropertiesWithScopeResponsePtrOutputWithContext(ctx)
}

// RoleAssignmentPropertiesWithScopeResponsePtrInput is an input type that accepts RoleAssignmentPropertiesWithScopeResponseArgs, RoleAssignmentPropertiesWithScopeResponsePtr and RoleAssignmentPropertiesWithScopeResponsePtrOutput values.
// You can construct a concrete instance of `RoleAssignmentPropertiesWithScopeResponsePtrInput` via:
//
//          RoleAssignmentPropertiesWithScopeResponseArgs{...}
//
//  or:
//
//          nil
type RoleAssignmentPropertiesWithScopeResponsePtrInput interface {
	pulumi.Input

	ToRoleAssignmentPropertiesWithScopeResponsePtrOutput() RoleAssignmentPropertiesWithScopeResponsePtrOutput
	ToRoleAssignmentPropertiesWithScopeResponsePtrOutputWithContext(context.Context) RoleAssignmentPropertiesWithScopeResponsePtrOutput
}

type roleAssignmentPropertiesWithScopeResponsePtrType RoleAssignmentPropertiesWithScopeResponseArgs

func RoleAssignmentPropertiesWithScopeResponsePtr(v *RoleAssignmentPropertiesWithScopeResponseArgs) RoleAssignmentPropertiesWithScopeResponsePtrInput {
	return (*roleAssignmentPropertiesWithScopeResponsePtrType)(v)
}

func (*roleAssignmentPropertiesWithScopeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleAssignmentPropertiesWithScopeResponse)(nil)).Elem()
}

func (i *roleAssignmentPropertiesWithScopeResponsePtrType) ToRoleAssignmentPropertiesWithScopeResponsePtrOutput() RoleAssignmentPropertiesWithScopeResponsePtrOutput {
	return i.ToRoleAssignmentPropertiesWithScopeResponsePtrOutputWithContext(context.Background())
}

func (i *roleAssignmentPropertiesWithScopeResponsePtrType) ToRoleAssignmentPropertiesWithScopeResponsePtrOutputWithContext(ctx context.Context) RoleAssignmentPropertiesWithScopeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentPropertiesWithScopeResponsePtrOutput)
}

// Role assignment properties with scope.
type RoleAssignmentPropertiesWithScopeResponseOutput struct{ *pulumi.OutputState }

func (RoleAssignmentPropertiesWithScopeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleAssignmentPropertiesWithScopeResponse)(nil)).Elem()
}

func (o RoleAssignmentPropertiesWithScopeResponseOutput) ToRoleAssignmentPropertiesWithScopeResponseOutput() RoleAssignmentPropertiesWithScopeResponseOutput {
	return o
}

func (o RoleAssignmentPropertiesWithScopeResponseOutput) ToRoleAssignmentPropertiesWithScopeResponseOutputWithContext(ctx context.Context) RoleAssignmentPropertiesWithScopeResponseOutput {
	return o
}

func (o RoleAssignmentPropertiesWithScopeResponseOutput) ToRoleAssignmentPropertiesWithScopeResponsePtrOutput() RoleAssignmentPropertiesWithScopeResponsePtrOutput {
	return o.ToRoleAssignmentPropertiesWithScopeResponsePtrOutputWithContext(context.Background())
}

func (o RoleAssignmentPropertiesWithScopeResponseOutput) ToRoleAssignmentPropertiesWithScopeResponsePtrOutputWithContext(ctx context.Context) RoleAssignmentPropertiesWithScopeResponsePtrOutput {
	return o.ApplyT(func(v RoleAssignmentPropertiesWithScopeResponse) *RoleAssignmentPropertiesWithScopeResponse {
		return &v
	}).(RoleAssignmentPropertiesWithScopeResponsePtrOutput)
}

// The principal ID.
func (o RoleAssignmentPropertiesWithScopeResponseOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleAssignmentPropertiesWithScopeResponse) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The role definition ID.
func (o RoleAssignmentPropertiesWithScopeResponseOutput) RoleDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleAssignmentPropertiesWithScopeResponse) *string { return v.RoleDefinitionId }).(pulumi.StringPtrOutput)
}

// The role assignment scope.
func (o RoleAssignmentPropertiesWithScopeResponseOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleAssignmentPropertiesWithScopeResponse) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type RoleAssignmentPropertiesWithScopeResponsePtrOutput struct{ *pulumi.OutputState }

func (RoleAssignmentPropertiesWithScopeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleAssignmentPropertiesWithScopeResponse)(nil)).Elem()
}

func (o RoleAssignmentPropertiesWithScopeResponsePtrOutput) ToRoleAssignmentPropertiesWithScopeResponsePtrOutput() RoleAssignmentPropertiesWithScopeResponsePtrOutput {
	return o
}

func (o RoleAssignmentPropertiesWithScopeResponsePtrOutput) ToRoleAssignmentPropertiesWithScopeResponsePtrOutputWithContext(ctx context.Context) RoleAssignmentPropertiesWithScopeResponsePtrOutput {
	return o
}

func (o RoleAssignmentPropertiesWithScopeResponsePtrOutput) Elem() RoleAssignmentPropertiesWithScopeResponseOutput {
	return o.ApplyT(func(v *RoleAssignmentPropertiesWithScopeResponse) RoleAssignmentPropertiesWithScopeResponse {
		return *v
	}).(RoleAssignmentPropertiesWithScopeResponseOutput)
}

// The principal ID.
func (o RoleAssignmentPropertiesWithScopeResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleAssignmentPropertiesWithScopeResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The role definition ID.
func (o RoleAssignmentPropertiesWithScopeResponsePtrOutput) RoleDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleAssignmentPropertiesWithScopeResponse) *string {
		if v == nil {
			return nil
		}
		return v.RoleDefinitionId
	}).(pulumi.StringPtrOutput)
}

// The role assignment scope.
func (o RoleAssignmentPropertiesWithScopeResponsePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleAssignmentPropertiesWithScopeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// Role definition.
type RoleDefinitionType struct {
	// The role definition name.
	Name string `pulumi:"name"`
	// Role definition properties.
	Properties RoleDefinitionPropertiesResponse `pulumi:"properties"`
	// The role definition type.
	Type string `pulumi:"type"`
}

// RoleDefinitionTypeInput is an input type that accepts RoleDefinitionTypeArgs and RoleDefinitionTypeOutput values.
// You can construct a concrete instance of `RoleDefinitionTypeInput` via:
//
//          RoleDefinitionTypeArgs{...}
type RoleDefinitionTypeInput interface {
	pulumi.Input

	ToRoleDefinitionTypeOutput() RoleDefinitionTypeOutput
	ToRoleDefinitionTypeOutputWithContext(context.Context) RoleDefinitionTypeOutput
}

// Role definition.
type RoleDefinitionTypeArgs struct {
	// The role definition name.
	Name pulumi.StringInput `pulumi:"name"`
	// Role definition properties.
	Properties RoleDefinitionPropertiesResponseInput `pulumi:"properties"`
	// The role definition type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RoleDefinitionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleDefinitionType)(nil)).Elem()
}

func (i RoleDefinitionTypeArgs) ToRoleDefinitionTypeOutput() RoleDefinitionTypeOutput {
	return i.ToRoleDefinitionTypeOutputWithContext(context.Background())
}

func (i RoleDefinitionTypeArgs) ToRoleDefinitionTypeOutputWithContext(ctx context.Context) RoleDefinitionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleDefinitionTypeOutput)
}

// Role definition.
type RoleDefinitionTypeOutput struct{ *pulumi.OutputState }

func (RoleDefinitionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleDefinitionType)(nil)).Elem()
}

func (o RoleDefinitionTypeOutput) ToRoleDefinitionTypeOutput() RoleDefinitionTypeOutput {
	return o
}

func (o RoleDefinitionTypeOutput) ToRoleDefinitionTypeOutputWithContext(ctx context.Context) RoleDefinitionTypeOutput {
	return o
}

// The role definition name.
func (o RoleDefinitionTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RoleDefinitionType) string { return v.Name }).(pulumi.StringOutput)
}

// Role definition properties.
func (o RoleDefinitionTypeOutput) Properties() RoleDefinitionPropertiesResponseOutput {
	return o.ApplyT(func(v RoleDefinitionType) RoleDefinitionPropertiesResponse { return v.Properties }).(RoleDefinitionPropertiesResponseOutput)
}

// The role definition type.
func (o RoleDefinitionTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RoleDefinitionType) string { return v.Type }).(pulumi.StringOutput)
}

// Role definition properties.
type RoleDefinitionProperties struct {
	// Role definition assignable scopes.
	AssignableScopes []string `pulumi:"assignableScopes"`
	// The role definition description.
	Description *string `pulumi:"description"`
	// Role definition permissions.
	Permissions []Permission `pulumi:"permissions"`
	// The role name.
	RoleName *string `pulumi:"roleName"`
	// The role type.
	Type *string `pulumi:"type"`
}

// RoleDefinitionPropertiesInput is an input type that accepts RoleDefinitionPropertiesArgs and RoleDefinitionPropertiesOutput values.
// You can construct a concrete instance of `RoleDefinitionPropertiesInput` via:
//
//          RoleDefinitionPropertiesArgs{...}
type RoleDefinitionPropertiesInput interface {
	pulumi.Input

	ToRoleDefinitionPropertiesOutput() RoleDefinitionPropertiesOutput
	ToRoleDefinitionPropertiesOutputWithContext(context.Context) RoleDefinitionPropertiesOutput
}

// Role definition properties.
type RoleDefinitionPropertiesArgs struct {
	// Role definition assignable scopes.
	AssignableScopes pulumi.StringArrayInput `pulumi:"assignableScopes"`
	// The role definition description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Role definition permissions.
	Permissions PermissionArrayInput `pulumi:"permissions"`
	// The role name.
	RoleName pulumi.StringPtrInput `pulumi:"roleName"`
	// The role type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (RoleDefinitionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleDefinitionProperties)(nil)).Elem()
}

func (i RoleDefinitionPropertiesArgs) ToRoleDefinitionPropertiesOutput() RoleDefinitionPropertiesOutput {
	return i.ToRoleDefinitionPropertiesOutputWithContext(context.Background())
}

func (i RoleDefinitionPropertiesArgs) ToRoleDefinitionPropertiesOutputWithContext(ctx context.Context) RoleDefinitionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleDefinitionPropertiesOutput)
}

func (i RoleDefinitionPropertiesArgs) ToRoleDefinitionPropertiesPtrOutput() RoleDefinitionPropertiesPtrOutput {
	return i.ToRoleDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (i RoleDefinitionPropertiesArgs) ToRoleDefinitionPropertiesPtrOutputWithContext(ctx context.Context) RoleDefinitionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleDefinitionPropertiesOutput).ToRoleDefinitionPropertiesPtrOutputWithContext(ctx)
}

// RoleDefinitionPropertiesPtrInput is an input type that accepts RoleDefinitionPropertiesArgs, RoleDefinitionPropertiesPtr and RoleDefinitionPropertiesPtrOutput values.
// You can construct a concrete instance of `RoleDefinitionPropertiesPtrInput` via:
//
//          RoleDefinitionPropertiesArgs{...}
//
//  or:
//
//          nil
type RoleDefinitionPropertiesPtrInput interface {
	pulumi.Input

	ToRoleDefinitionPropertiesPtrOutput() RoleDefinitionPropertiesPtrOutput
	ToRoleDefinitionPropertiesPtrOutputWithContext(context.Context) RoleDefinitionPropertiesPtrOutput
}

type roleDefinitionPropertiesPtrType RoleDefinitionPropertiesArgs

func RoleDefinitionPropertiesPtr(v *RoleDefinitionPropertiesArgs) RoleDefinitionPropertiesPtrInput {
	return (*roleDefinitionPropertiesPtrType)(v)
}

func (*roleDefinitionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleDefinitionProperties)(nil)).Elem()
}

func (i *roleDefinitionPropertiesPtrType) ToRoleDefinitionPropertiesPtrOutput() RoleDefinitionPropertiesPtrOutput {
	return i.ToRoleDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (i *roleDefinitionPropertiesPtrType) ToRoleDefinitionPropertiesPtrOutputWithContext(ctx context.Context) RoleDefinitionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleDefinitionPropertiesPtrOutput)
}

// Role definition properties.
type RoleDefinitionPropertiesOutput struct{ *pulumi.OutputState }

func (RoleDefinitionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleDefinitionProperties)(nil)).Elem()
}

func (o RoleDefinitionPropertiesOutput) ToRoleDefinitionPropertiesOutput() RoleDefinitionPropertiesOutput {
	return o
}

func (o RoleDefinitionPropertiesOutput) ToRoleDefinitionPropertiesOutputWithContext(ctx context.Context) RoleDefinitionPropertiesOutput {
	return o
}

func (o RoleDefinitionPropertiesOutput) ToRoleDefinitionPropertiesPtrOutput() RoleDefinitionPropertiesPtrOutput {
	return o.ToRoleDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (o RoleDefinitionPropertiesOutput) ToRoleDefinitionPropertiesPtrOutputWithContext(ctx context.Context) RoleDefinitionPropertiesPtrOutput {
	return o.ApplyT(func(v RoleDefinitionProperties) *RoleDefinitionProperties {
		return &v
	}).(RoleDefinitionPropertiesPtrOutput)
}

// Role definition assignable scopes.
func (o RoleDefinitionPropertiesOutput) AssignableScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleDefinitionProperties) []string { return v.AssignableScopes }).(pulumi.StringArrayOutput)
}

// The role definition description.
func (o RoleDefinitionPropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleDefinitionProperties) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Role definition permissions.
func (o RoleDefinitionPropertiesOutput) Permissions() PermissionArrayOutput {
	return o.ApplyT(func(v RoleDefinitionProperties) []Permission { return v.Permissions }).(PermissionArrayOutput)
}

// The role name.
func (o RoleDefinitionPropertiesOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleDefinitionProperties) *string { return v.RoleName }).(pulumi.StringPtrOutput)
}

// The role type.
func (o RoleDefinitionPropertiesOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleDefinitionProperties) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RoleDefinitionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (RoleDefinitionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleDefinitionProperties)(nil)).Elem()
}

func (o RoleDefinitionPropertiesPtrOutput) ToRoleDefinitionPropertiesPtrOutput() RoleDefinitionPropertiesPtrOutput {
	return o
}

func (o RoleDefinitionPropertiesPtrOutput) ToRoleDefinitionPropertiesPtrOutputWithContext(ctx context.Context) RoleDefinitionPropertiesPtrOutput {
	return o
}

func (o RoleDefinitionPropertiesPtrOutput) Elem() RoleDefinitionPropertiesOutput {
	return o.ApplyT(func(v *RoleDefinitionProperties) RoleDefinitionProperties { return *v }).(RoleDefinitionPropertiesOutput)
}

// Role definition assignable scopes.
func (o RoleDefinitionPropertiesPtrOutput) AssignableScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleDefinitionProperties) []string {
		if v == nil {
			return nil
		}
		return v.AssignableScopes
	}).(pulumi.StringArrayOutput)
}

// The role definition description.
func (o RoleDefinitionPropertiesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Role definition permissions.
func (o RoleDefinitionPropertiesPtrOutput) Permissions() PermissionArrayOutput {
	return o.ApplyT(func(v *RoleDefinitionProperties) []Permission {
		if v == nil {
			return nil
		}
		return v.Permissions
	}).(PermissionArrayOutput)
}

// The role name.
func (o RoleDefinitionPropertiesPtrOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.RoleName
	}).(pulumi.StringPtrOutput)
}

// The role type.
func (o RoleDefinitionPropertiesPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Role definition properties.
type RoleDefinitionPropertiesResponse struct {
	// Role definition assignable scopes.
	AssignableScopes []string `pulumi:"assignableScopes"`
	// The role definition description.
	Description *string `pulumi:"description"`
	// Role definition permissions.
	Permissions []PermissionResponse `pulumi:"permissions"`
	// The role name.
	RoleName *string `pulumi:"roleName"`
	// The role type.
	Type *string `pulumi:"type"`
}

// RoleDefinitionPropertiesResponseInput is an input type that accepts RoleDefinitionPropertiesResponseArgs and RoleDefinitionPropertiesResponseOutput values.
// You can construct a concrete instance of `RoleDefinitionPropertiesResponseInput` via:
//
//          RoleDefinitionPropertiesResponseArgs{...}
type RoleDefinitionPropertiesResponseInput interface {
	pulumi.Input

	ToRoleDefinitionPropertiesResponseOutput() RoleDefinitionPropertiesResponseOutput
	ToRoleDefinitionPropertiesResponseOutputWithContext(context.Context) RoleDefinitionPropertiesResponseOutput
}

// Role definition properties.
type RoleDefinitionPropertiesResponseArgs struct {
	// Role definition assignable scopes.
	AssignableScopes pulumi.StringArrayInput `pulumi:"assignableScopes"`
	// The role definition description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Role definition permissions.
	Permissions PermissionResponseArrayInput `pulumi:"permissions"`
	// The role name.
	RoleName pulumi.StringPtrInput `pulumi:"roleName"`
	// The role type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (RoleDefinitionPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleDefinitionPropertiesResponse)(nil)).Elem()
}

func (i RoleDefinitionPropertiesResponseArgs) ToRoleDefinitionPropertiesResponseOutput() RoleDefinitionPropertiesResponseOutput {
	return i.ToRoleDefinitionPropertiesResponseOutputWithContext(context.Background())
}

func (i RoleDefinitionPropertiesResponseArgs) ToRoleDefinitionPropertiesResponseOutputWithContext(ctx context.Context) RoleDefinitionPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleDefinitionPropertiesResponseOutput)
}

func (i RoleDefinitionPropertiesResponseArgs) ToRoleDefinitionPropertiesResponsePtrOutput() RoleDefinitionPropertiesResponsePtrOutput {
	return i.ToRoleDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i RoleDefinitionPropertiesResponseArgs) ToRoleDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) RoleDefinitionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleDefinitionPropertiesResponseOutput).ToRoleDefinitionPropertiesResponsePtrOutputWithContext(ctx)
}

// RoleDefinitionPropertiesResponsePtrInput is an input type that accepts RoleDefinitionPropertiesResponseArgs, RoleDefinitionPropertiesResponsePtr and RoleDefinitionPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `RoleDefinitionPropertiesResponsePtrInput` via:
//
//          RoleDefinitionPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type RoleDefinitionPropertiesResponsePtrInput interface {
	pulumi.Input

	ToRoleDefinitionPropertiesResponsePtrOutput() RoleDefinitionPropertiesResponsePtrOutput
	ToRoleDefinitionPropertiesResponsePtrOutputWithContext(context.Context) RoleDefinitionPropertiesResponsePtrOutput
}

type roleDefinitionPropertiesResponsePtrType RoleDefinitionPropertiesResponseArgs

func RoleDefinitionPropertiesResponsePtr(v *RoleDefinitionPropertiesResponseArgs) RoleDefinitionPropertiesResponsePtrInput {
	return (*roleDefinitionPropertiesResponsePtrType)(v)
}

func (*roleDefinitionPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleDefinitionPropertiesResponse)(nil)).Elem()
}

func (i *roleDefinitionPropertiesResponsePtrType) ToRoleDefinitionPropertiesResponsePtrOutput() RoleDefinitionPropertiesResponsePtrOutput {
	return i.ToRoleDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *roleDefinitionPropertiesResponsePtrType) ToRoleDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) RoleDefinitionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleDefinitionPropertiesResponsePtrOutput)
}

// Role definition properties.
type RoleDefinitionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (RoleDefinitionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleDefinitionPropertiesResponse)(nil)).Elem()
}

func (o RoleDefinitionPropertiesResponseOutput) ToRoleDefinitionPropertiesResponseOutput() RoleDefinitionPropertiesResponseOutput {
	return o
}

func (o RoleDefinitionPropertiesResponseOutput) ToRoleDefinitionPropertiesResponseOutputWithContext(ctx context.Context) RoleDefinitionPropertiesResponseOutput {
	return o
}

func (o RoleDefinitionPropertiesResponseOutput) ToRoleDefinitionPropertiesResponsePtrOutput() RoleDefinitionPropertiesResponsePtrOutput {
	return o.ToRoleDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o RoleDefinitionPropertiesResponseOutput) ToRoleDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) RoleDefinitionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v RoleDefinitionPropertiesResponse) *RoleDefinitionPropertiesResponse {
		return &v
	}).(RoleDefinitionPropertiesResponsePtrOutput)
}

// Role definition assignable scopes.
func (o RoleDefinitionPropertiesResponseOutput) AssignableScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleDefinitionPropertiesResponse) []string { return v.AssignableScopes }).(pulumi.StringArrayOutput)
}

// The role definition description.
func (o RoleDefinitionPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleDefinitionPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Role definition permissions.
func (o RoleDefinitionPropertiesResponseOutput) Permissions() PermissionResponseArrayOutput {
	return o.ApplyT(func(v RoleDefinitionPropertiesResponse) []PermissionResponse { return v.Permissions }).(PermissionResponseArrayOutput)
}

// The role name.
func (o RoleDefinitionPropertiesResponseOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleDefinitionPropertiesResponse) *string { return v.RoleName }).(pulumi.StringPtrOutput)
}

// The role type.
func (o RoleDefinitionPropertiesResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleDefinitionPropertiesResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RoleDefinitionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (RoleDefinitionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleDefinitionPropertiesResponse)(nil)).Elem()
}

func (o RoleDefinitionPropertiesResponsePtrOutput) ToRoleDefinitionPropertiesResponsePtrOutput() RoleDefinitionPropertiesResponsePtrOutput {
	return o
}

func (o RoleDefinitionPropertiesResponsePtrOutput) ToRoleDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) RoleDefinitionPropertiesResponsePtrOutput {
	return o
}

func (o RoleDefinitionPropertiesResponsePtrOutput) Elem() RoleDefinitionPropertiesResponseOutput {
	return o.ApplyT(func(v *RoleDefinitionPropertiesResponse) RoleDefinitionPropertiesResponse { return *v }).(RoleDefinitionPropertiesResponseOutput)
}

// Role definition assignable scopes.
func (o RoleDefinitionPropertiesResponsePtrOutput) AssignableScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleDefinitionPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.AssignableScopes
	}).(pulumi.StringArrayOutput)
}

// The role definition description.
func (o RoleDefinitionPropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Role definition permissions.
func (o RoleDefinitionPropertiesResponsePtrOutput) Permissions() PermissionResponseArrayOutput {
	return o.ApplyT(func(v *RoleDefinitionPropertiesResponse) []PermissionResponse {
		if v == nil {
			return nil
		}
		return v.Permissions
	}).(PermissionResponseArrayOutput)
}

// The role name.
func (o RoleDefinitionPropertiesResponsePtrOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.RoleName
	}).(pulumi.StringPtrOutput)
}

// The role type.
func (o RoleDefinitionPropertiesResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(IdentityOutput{})
	pulumi.RegisterOutputType(IdentityPtrOutput{})
	pulumi.RegisterOutputType(IdentityResponseOutput{})
	pulumi.RegisterOutputType(IdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagementLockAtResourceGroupLevelTypeOutput{})
	pulumi.RegisterOutputType(ManagementLockAtResourceLevelTypeOutput{})
	pulumi.RegisterOutputType(ManagementLockAtSubscriptionLevelTypeOutput{})
	pulumi.RegisterOutputType(ManagementLockByScopeTypeOutput{})
	pulumi.RegisterOutputType(ManagementLockOwnerOutput{})
	pulumi.RegisterOutputType(ManagementLockOwnerArrayOutput{})
	pulumi.RegisterOutputType(ManagementLockOwnerResponseOutput{})
	pulumi.RegisterOutputType(ManagementLockOwnerResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagementLockPropertiesOutput{})
	pulumi.RegisterOutputType(ManagementLockPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ManagementLockPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ManagementLockPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsPtrOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsResponseOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsResponsePtrOutput{})
	pulumi.RegisterOutputType(ParameterValuesOutput{})
	pulumi.RegisterOutputType(ParameterValuesPtrOutput{})
	pulumi.RegisterOutputType(ParameterValuesResponseOutput{})
	pulumi.RegisterOutputType(ParameterValuesResponsePtrOutput{})
	pulumi.RegisterOutputType(PermissionOutput{})
	pulumi.RegisterOutputType(PermissionArrayOutput{})
	pulumi.RegisterOutputType(PermissionResponseOutput{})
	pulumi.RegisterOutputType(PermissionResponseArrayOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentTypeOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentPropertiesOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionTypeOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionGroupOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionGroupArrayOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionGroupResponseOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionGroupResponseArrayOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionPropertiesOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceArrayOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceResponseOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(PolicySetDefinitionTypeOutput{})
	pulumi.RegisterOutputType(PolicySetDefinitionPropertiesOutput{})
	pulumi.RegisterOutputType(PolicySetDefinitionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PolicySetDefinitionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PolicySetDefinitionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PolicySkuOutput{})
	pulumi.RegisterOutputType(PolicySkuPtrOutput{})
	pulumi.RegisterOutputType(PolicySkuResponseOutput{})
	pulumi.RegisterOutputType(PolicySkuResponsePtrOutput{})
	pulumi.RegisterOutputType(RoleAssignmentTypeOutput{})
	pulumi.RegisterOutputType(RoleAssignmentPropertiesOutput{})
	pulumi.RegisterOutputType(RoleAssignmentPropertiesPtrOutput{})
	pulumi.RegisterOutputType(RoleAssignmentPropertiesWithScopeResponseOutput{})
	pulumi.RegisterOutputType(RoleAssignmentPropertiesWithScopeResponsePtrOutput{})
	pulumi.RegisterOutputType(RoleDefinitionTypeOutput{})
	pulumi.RegisterOutputType(RoleDefinitionPropertiesOutput{})
	pulumi.RegisterOutputType(RoleDefinitionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(RoleDefinitionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(RoleDefinitionPropertiesResponsePtrOutput{})
}
