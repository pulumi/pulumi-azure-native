// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190601

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Identity for the resource.
type Identity struct {
	// The identity type.
	Type *string `pulumi:"type"`
}

// IdentityInput is an input type that accepts IdentityArgs and IdentityOutput values.
// You can construct a concrete instance of `IdentityInput` via:
//
//          IdentityArgs{...}
type IdentityInput interface {
	pulumi.Input

	ToIdentityOutput() IdentityOutput
	ToIdentityOutputWithContext(context.Context) IdentityOutput
}

// Identity for the resource.
type IdentityArgs struct {
	// The identity type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (IdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (i IdentityArgs) ToIdentityOutput() IdentityOutput {
	return i.ToIdentityOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput)
}

func (i IdentityArgs) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput).ToIdentityPtrOutputWithContext(ctx)
}

// IdentityPtrInput is an input type that accepts IdentityArgs, IdentityPtr and IdentityPtrOutput values.
// You can construct a concrete instance of `IdentityPtrInput` via:
//
//          IdentityArgs{...}
//
//  or:
//
//          nil
type IdentityPtrInput interface {
	pulumi.Input

	ToIdentityPtrOutput() IdentityPtrOutput
	ToIdentityPtrOutputWithContext(context.Context) IdentityPtrOutput
}

type identityPtrType IdentityArgs

func IdentityPtr(v *IdentityArgs) IdentityPtrInput {
	return (*identityPtrType)(v)
}

func (*identityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (i *identityPtrType) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i *identityPtrType) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPtrOutput)
}

// Identity for the resource.
type IdentityOutput struct{ *pulumi.OutputState }

func (IdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (o IdentityOutput) ToIdentityOutput() IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o.ToIdentityPtrOutputWithContext(context.Background())
}

func (o IdentityOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o.ApplyT(func(v Identity) *Identity {
		return &v
	}).(IdentityPtrOutput)
}

// The identity type.
func (o IdentityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Identity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type IdentityPtrOutput struct{ *pulumi.OutputState }

func (IdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (o IdentityPtrOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) Elem() IdentityOutput {
	return o.ApplyT(func(v *Identity) Identity { return *v }).(IdentityOutput)
}

// The identity type.
func (o IdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Identity) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Identity for the resource.
type IdentityResponse struct {
	// The principal ID of the resource identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the resource identity.
	TenantId string `pulumi:"tenantId"`
	// The identity type.
	Type *string `pulumi:"type"`
}

// IdentityResponseInput is an input type that accepts IdentityResponseArgs and IdentityResponseOutput values.
// You can construct a concrete instance of `IdentityResponseInput` via:
//
//          IdentityResponseArgs{...}
type IdentityResponseInput interface {
	pulumi.Input

	ToIdentityResponseOutput() IdentityResponseOutput
	ToIdentityResponseOutputWithContext(context.Context) IdentityResponseOutput
}

// Identity for the resource.
type IdentityResponseArgs struct {
	// The principal ID of the resource identity.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The tenant ID of the resource identity.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The identity type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (IdentityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityResponse)(nil)).Elem()
}

func (i IdentityResponseArgs) ToIdentityResponseOutput() IdentityResponseOutput {
	return i.ToIdentityResponseOutputWithContext(context.Background())
}

func (i IdentityResponseArgs) ToIdentityResponseOutputWithContext(ctx context.Context) IdentityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityResponseOutput)
}

func (i IdentityResponseArgs) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return i.ToIdentityResponsePtrOutputWithContext(context.Background())
}

func (i IdentityResponseArgs) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityResponseOutput).ToIdentityResponsePtrOutputWithContext(ctx)
}

// IdentityResponsePtrInput is an input type that accepts IdentityResponseArgs, IdentityResponsePtr and IdentityResponsePtrOutput values.
// You can construct a concrete instance of `IdentityResponsePtrInput` via:
//
//          IdentityResponseArgs{...}
//
//  or:
//
//          nil
type IdentityResponsePtrInput interface {
	pulumi.Input

	ToIdentityResponsePtrOutput() IdentityResponsePtrOutput
	ToIdentityResponsePtrOutputWithContext(context.Context) IdentityResponsePtrOutput
}

type identityResponsePtrType IdentityResponseArgs

func IdentityResponsePtr(v *IdentityResponseArgs) IdentityResponsePtrInput {
	return (*identityResponsePtrType)(v)
}

func (*identityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityResponse)(nil)).Elem()
}

func (i *identityResponsePtrType) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return i.ToIdentityResponsePtrOutputWithContext(context.Background())
}

func (i *identityResponsePtrType) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityResponsePtrOutput)
}

// Identity for the resource.
type IdentityResponseOutput struct{ *pulumi.OutputState }

func (IdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityResponse)(nil)).Elem()
}

func (o IdentityResponseOutput) ToIdentityResponseOutput() IdentityResponseOutput {
	return o
}

func (o IdentityResponseOutput) ToIdentityResponseOutputWithContext(ctx context.Context) IdentityResponseOutput {
	return o
}

func (o IdentityResponseOutput) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return o.ToIdentityResponsePtrOutputWithContext(context.Background())
}

func (o IdentityResponseOutput) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return o.ApplyT(func(v IdentityResponse) *IdentityResponse {
		return &v
	}).(IdentityResponsePtrOutput)
}

// The principal ID of the resource identity.
func (o IdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the resource identity.
func (o IdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type.
func (o IdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type IdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityResponse)(nil)).Elem()
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) Elem() IdentityResponseOutput {
	return o.ApplyT(func(v *IdentityResponse) IdentityResponse { return *v }).(IdentityResponseOutput)
}

// The principal ID of the resource identity.
func (o IdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the resource identity.
func (o IdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type.
func (o IdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The policy assignment.
type PolicyAssignmentType struct {
	// The managed identity associated with the policy assignment.
	Identity *IdentityResponse `pulumi:"identity"`
	// The location of the policy assignment. Only required when utilizing managed identity.
	Location *string `pulumi:"location"`
	// The name of the policy assignment.
	Name string `pulumi:"name"`
	// Properties for the policy assignment.
	Properties PolicyAssignmentPropertiesResponse `pulumi:"properties"`
	// The policy sku. This property is optional, obsolete, and will be ignored.
	Sku *PolicySkuResponse `pulumi:"sku"`
	// The type of the policy assignment.
	Type string `pulumi:"type"`
}

// PolicyAssignmentTypeInput is an input type that accepts PolicyAssignmentTypeArgs and PolicyAssignmentTypeOutput values.
// You can construct a concrete instance of `PolicyAssignmentTypeInput` via:
//
//          PolicyAssignmentTypeArgs{...}
type PolicyAssignmentTypeInput interface {
	pulumi.Input

	ToPolicyAssignmentTypeOutput() PolicyAssignmentTypeOutput
	ToPolicyAssignmentTypeOutputWithContext(context.Context) PolicyAssignmentTypeOutput
}

// The policy assignment.
type PolicyAssignmentTypeArgs struct {
	// The managed identity associated with the policy assignment.
	Identity IdentityResponsePtrInput `pulumi:"identity"`
	// The location of the policy assignment. Only required when utilizing managed identity.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the policy assignment.
	Name pulumi.StringInput `pulumi:"name"`
	// Properties for the policy assignment.
	Properties PolicyAssignmentPropertiesResponseInput `pulumi:"properties"`
	// The policy sku. This property is optional, obsolete, and will be ignored.
	Sku PolicySkuResponsePtrInput `pulumi:"sku"`
	// The type of the policy assignment.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PolicyAssignmentTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAssignmentType)(nil)).Elem()
}

func (i PolicyAssignmentTypeArgs) ToPolicyAssignmentTypeOutput() PolicyAssignmentTypeOutput {
	return i.ToPolicyAssignmentTypeOutputWithContext(context.Background())
}

func (i PolicyAssignmentTypeArgs) ToPolicyAssignmentTypeOutputWithContext(ctx context.Context) PolicyAssignmentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAssignmentTypeOutput)
}

// The policy assignment.
type PolicyAssignmentTypeOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAssignmentType)(nil)).Elem()
}

func (o PolicyAssignmentTypeOutput) ToPolicyAssignmentTypeOutput() PolicyAssignmentTypeOutput {
	return o
}

func (o PolicyAssignmentTypeOutput) ToPolicyAssignmentTypeOutputWithContext(ctx context.Context) PolicyAssignmentTypeOutput {
	return o
}

// The managed identity associated with the policy assignment.
func (o PolicyAssignmentTypeOutput) Identity() IdentityResponsePtrOutput {
	return o.ApplyT(func(v PolicyAssignmentType) *IdentityResponse { return v.Identity }).(IdentityResponsePtrOutput)
}

// The location of the policy assignment. Only required when utilizing managed identity.
func (o PolicyAssignmentTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the policy assignment.
func (o PolicyAssignmentTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyAssignmentType) string { return v.Name }).(pulumi.StringOutput)
}

// Properties for the policy assignment.
func (o PolicyAssignmentTypeOutput) Properties() PolicyAssignmentPropertiesResponseOutput {
	return o.ApplyT(func(v PolicyAssignmentType) PolicyAssignmentPropertiesResponse { return v.Properties }).(PolicyAssignmentPropertiesResponseOutput)
}

// The policy sku. This property is optional, obsolete, and will be ignored.
func (o PolicyAssignmentTypeOutput) Sku() PolicySkuResponsePtrOutput {
	return o.ApplyT(func(v PolicyAssignmentType) *PolicySkuResponse { return v.Sku }).(PolicySkuResponsePtrOutput)
}

// The type of the policy assignment.
func (o PolicyAssignmentTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyAssignmentType) string { return v.Type }).(pulumi.StringOutput)
}

// The policy assignment properties.
type PolicyAssignmentPropertiesResponse struct {
	// This message will be part of response in case of policy violation.
	Description *string `pulumi:"description"`
	// The display name of the policy assignment.
	DisplayName *string `pulumi:"displayName"`
	// The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
	EnforcementMode *string `pulumi:"enforcementMode"`
	// The policy assignment metadata.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// The policy's excluded scopes.
	NotScopes []string `pulumi:"notScopes"`
	// Required if a parameter is used in policy rule.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition being assigned.
	PolicyDefinitionId *string `pulumi:"policyDefinitionId"`
	// The scope for the policy assignment.
	Scope *string `pulumi:"scope"`
}

// PolicyAssignmentPropertiesResponseInput is an input type that accepts PolicyAssignmentPropertiesResponseArgs and PolicyAssignmentPropertiesResponseOutput values.
// You can construct a concrete instance of `PolicyAssignmentPropertiesResponseInput` via:
//
//          PolicyAssignmentPropertiesResponseArgs{...}
type PolicyAssignmentPropertiesResponseInput interface {
	pulumi.Input

	ToPolicyAssignmentPropertiesResponseOutput() PolicyAssignmentPropertiesResponseOutput
	ToPolicyAssignmentPropertiesResponseOutputWithContext(context.Context) PolicyAssignmentPropertiesResponseOutput
}

// The policy assignment properties.
type PolicyAssignmentPropertiesResponseArgs struct {
	// This message will be part of response in case of policy violation.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The display name of the policy assignment.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
	EnforcementMode pulumi.StringPtrInput `pulumi:"enforcementMode"`
	// The policy assignment metadata.
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// The policy's excluded scopes.
	NotScopes pulumi.StringArrayInput `pulumi:"notScopes"`
	// Required if a parameter is used in policy rule.
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition being assigned.
	PolicyDefinitionId pulumi.StringPtrInput `pulumi:"policyDefinitionId"`
	// The scope for the policy assignment.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (PolicyAssignmentPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAssignmentPropertiesResponse)(nil)).Elem()
}

func (i PolicyAssignmentPropertiesResponseArgs) ToPolicyAssignmentPropertiesResponseOutput() PolicyAssignmentPropertiesResponseOutput {
	return i.ToPolicyAssignmentPropertiesResponseOutputWithContext(context.Background())
}

func (i PolicyAssignmentPropertiesResponseArgs) ToPolicyAssignmentPropertiesResponseOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAssignmentPropertiesResponseOutput)
}

func (i PolicyAssignmentPropertiesResponseArgs) ToPolicyAssignmentPropertiesResponsePtrOutput() PolicyAssignmentPropertiesResponsePtrOutput {
	return i.ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i PolicyAssignmentPropertiesResponseArgs) ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAssignmentPropertiesResponseOutput).ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(ctx)
}

// PolicyAssignmentPropertiesResponsePtrInput is an input type that accepts PolicyAssignmentPropertiesResponseArgs, PolicyAssignmentPropertiesResponsePtr and PolicyAssignmentPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `PolicyAssignmentPropertiesResponsePtrInput` via:
//
//          PolicyAssignmentPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type PolicyAssignmentPropertiesResponsePtrInput interface {
	pulumi.Input

	ToPolicyAssignmentPropertiesResponsePtrOutput() PolicyAssignmentPropertiesResponsePtrOutput
	ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(context.Context) PolicyAssignmentPropertiesResponsePtrOutput
}

type policyAssignmentPropertiesResponsePtrType PolicyAssignmentPropertiesResponseArgs

func PolicyAssignmentPropertiesResponsePtr(v *PolicyAssignmentPropertiesResponseArgs) PolicyAssignmentPropertiesResponsePtrInput {
	return (*policyAssignmentPropertiesResponsePtrType)(v)
}

func (*policyAssignmentPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAssignmentPropertiesResponse)(nil)).Elem()
}

func (i *policyAssignmentPropertiesResponsePtrType) ToPolicyAssignmentPropertiesResponsePtrOutput() PolicyAssignmentPropertiesResponsePtrOutput {
	return i.ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *policyAssignmentPropertiesResponsePtrType) ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAssignmentPropertiesResponsePtrOutput)
}

// The policy assignment properties.
type PolicyAssignmentPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAssignmentPropertiesResponse)(nil)).Elem()
}

func (o PolicyAssignmentPropertiesResponseOutput) ToPolicyAssignmentPropertiesResponseOutput() PolicyAssignmentPropertiesResponseOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponseOutput) ToPolicyAssignmentPropertiesResponseOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponseOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponseOutput) ToPolicyAssignmentPropertiesResponsePtrOutput() PolicyAssignmentPropertiesResponsePtrOutput {
	return o.ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o PolicyAssignmentPropertiesResponseOutput) ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *PolicyAssignmentPropertiesResponse {
		return &v
	}).(PolicyAssignmentPropertiesResponsePtrOutput)
}

// This message will be part of response in case of policy violation.
func (o PolicyAssignmentPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the policy assignment.
func (o PolicyAssignmentPropertiesResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
func (o PolicyAssignmentPropertiesResponseOutput) EnforcementMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *string { return v.EnforcementMode }).(pulumi.StringPtrOutput)
}

// The policy assignment metadata.
func (o PolicyAssignmentPropertiesResponseOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

// The policy's excluded scopes.
func (o PolicyAssignmentPropertiesResponseOutput) NotScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) []string { return v.NotScopes }).(pulumi.StringArrayOutput)
}

// Required if a parameter is used in policy rule.
func (o PolicyAssignmentPropertiesResponseOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// The ID of the policy definition or policy set definition being assigned.
func (o PolicyAssignmentPropertiesResponseOutput) PolicyDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *string { return v.PolicyDefinitionId }).(pulumi.StringPtrOutput)
}

// The scope for the policy assignment.
func (o PolicyAssignmentPropertiesResponseOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type PolicyAssignmentPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAssignmentPropertiesResponse)(nil)).Elem()
}

func (o PolicyAssignmentPropertiesResponsePtrOutput) ToPolicyAssignmentPropertiesResponsePtrOutput() PolicyAssignmentPropertiesResponsePtrOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponsePtrOutput) ToPolicyAssignmentPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponsePtrOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponsePtrOutput) Elem() PolicyAssignmentPropertiesResponseOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) PolicyAssignmentPropertiesResponse { return *v }).(PolicyAssignmentPropertiesResponseOutput)
}

// This message will be part of response in case of policy violation.
func (o PolicyAssignmentPropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The display name of the policy assignment.
func (o PolicyAssignmentPropertiesResponsePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
func (o PolicyAssignmentPropertiesResponsePtrOutput) EnforcementMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.EnforcementMode
	}).(pulumi.StringPtrOutput)
}

// The policy assignment metadata.
func (o PolicyAssignmentPropertiesResponsePtrOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.MapOutput)
}

// The policy's excluded scopes.
func (o PolicyAssignmentPropertiesResponsePtrOutput) NotScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.NotScopes
	}).(pulumi.StringArrayOutput)
}

// Required if a parameter is used in policy rule.
func (o PolicyAssignmentPropertiesResponsePtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// The ID of the policy definition or policy set definition being assigned.
func (o PolicyAssignmentPropertiesResponsePtrOutput) PolicyDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PolicyDefinitionId
	}).(pulumi.StringPtrOutput)
}

// The scope for the policy assignment.
func (o PolicyAssignmentPropertiesResponsePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// The policy definition.
type PolicyDefinitionType struct {
	// The name of the policy definition.
	Name string `pulumi:"name"`
	// The policy definition properties.
	Properties PolicyDefinitionPropertiesResponse `pulumi:"properties"`
	// The type of the resource (Microsoft.Authorization/policyDefinitions).
	Type string `pulumi:"type"`
}

// PolicyDefinitionTypeInput is an input type that accepts PolicyDefinitionTypeArgs and PolicyDefinitionTypeOutput values.
// You can construct a concrete instance of `PolicyDefinitionTypeInput` via:
//
//          PolicyDefinitionTypeArgs{...}
type PolicyDefinitionTypeInput interface {
	pulumi.Input

	ToPolicyDefinitionTypeOutput() PolicyDefinitionTypeOutput
	ToPolicyDefinitionTypeOutputWithContext(context.Context) PolicyDefinitionTypeOutput
}

// The policy definition.
type PolicyDefinitionTypeArgs struct {
	// The name of the policy definition.
	Name pulumi.StringInput `pulumi:"name"`
	// The policy definition properties.
	Properties PolicyDefinitionPropertiesResponseInput `pulumi:"properties"`
	// The type of the resource (Microsoft.Authorization/policyDefinitions).
	Type pulumi.StringInput `pulumi:"type"`
}

func (PolicyDefinitionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionType)(nil)).Elem()
}

func (i PolicyDefinitionTypeArgs) ToPolicyDefinitionTypeOutput() PolicyDefinitionTypeOutput {
	return i.ToPolicyDefinitionTypeOutputWithContext(context.Background())
}

func (i PolicyDefinitionTypeArgs) ToPolicyDefinitionTypeOutputWithContext(ctx context.Context) PolicyDefinitionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionTypeOutput)
}

// The policy definition.
type PolicyDefinitionTypeOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionType)(nil)).Elem()
}

func (o PolicyDefinitionTypeOutput) ToPolicyDefinitionTypeOutput() PolicyDefinitionTypeOutput {
	return o
}

func (o PolicyDefinitionTypeOutput) ToPolicyDefinitionTypeOutputWithContext(ctx context.Context) PolicyDefinitionTypeOutput {
	return o
}

// The name of the policy definition.
func (o PolicyDefinitionTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionType) string { return v.Name }).(pulumi.StringOutput)
}

// The policy definition properties.
func (o PolicyDefinitionTypeOutput) Properties() PolicyDefinitionPropertiesResponseOutput {
	return o.ApplyT(func(v PolicyDefinitionType) PolicyDefinitionPropertiesResponse { return v.Properties }).(PolicyDefinitionPropertiesResponseOutput)
}

// The type of the resource (Microsoft.Authorization/policyDefinitions).
func (o PolicyDefinitionTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionType) string { return v.Type }).(pulumi.StringOutput)
}

// The policy definition properties.
type PolicyDefinitionPropertiesResponse struct {
	// The policy definition description.
	Description *string `pulumi:"description"`
	// The display name of the policy definition.
	DisplayName *string `pulumi:"displayName"`
	// The policy definition metadata.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
	Mode *string `pulumi:"mode"`
	// Required if a parameter is used in policy rule.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// The policy rule.
	PolicyRule map[string]interface{} `pulumi:"policyRule"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, and Custom.
	PolicyType *string `pulumi:"policyType"`
}

// PolicyDefinitionPropertiesResponseInput is an input type that accepts PolicyDefinitionPropertiesResponseArgs and PolicyDefinitionPropertiesResponseOutput values.
// You can construct a concrete instance of `PolicyDefinitionPropertiesResponseInput` via:
//
//          PolicyDefinitionPropertiesResponseArgs{...}
type PolicyDefinitionPropertiesResponseInput interface {
	pulumi.Input

	ToPolicyDefinitionPropertiesResponseOutput() PolicyDefinitionPropertiesResponseOutput
	ToPolicyDefinitionPropertiesResponseOutputWithContext(context.Context) PolicyDefinitionPropertiesResponseOutput
}

// The policy definition properties.
type PolicyDefinitionPropertiesResponseArgs struct {
	// The policy definition description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The display name of the policy definition.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The policy definition metadata.
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Required if a parameter is used in policy rule.
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// The policy rule.
	PolicyRule pulumi.MapInput `pulumi:"policyRule"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, and Custom.
	PolicyType pulumi.StringPtrInput `pulumi:"policyType"`
}

func (PolicyDefinitionPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionPropertiesResponse)(nil)).Elem()
}

func (i PolicyDefinitionPropertiesResponseArgs) ToPolicyDefinitionPropertiesResponseOutput() PolicyDefinitionPropertiesResponseOutput {
	return i.ToPolicyDefinitionPropertiesResponseOutputWithContext(context.Background())
}

func (i PolicyDefinitionPropertiesResponseArgs) ToPolicyDefinitionPropertiesResponseOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionPropertiesResponseOutput)
}

func (i PolicyDefinitionPropertiesResponseArgs) ToPolicyDefinitionPropertiesResponsePtrOutput() PolicyDefinitionPropertiesResponsePtrOutput {
	return i.ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i PolicyDefinitionPropertiesResponseArgs) ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionPropertiesResponseOutput).ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(ctx)
}

// PolicyDefinitionPropertiesResponsePtrInput is an input type that accepts PolicyDefinitionPropertiesResponseArgs, PolicyDefinitionPropertiesResponsePtr and PolicyDefinitionPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `PolicyDefinitionPropertiesResponsePtrInput` via:
//
//          PolicyDefinitionPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type PolicyDefinitionPropertiesResponsePtrInput interface {
	pulumi.Input

	ToPolicyDefinitionPropertiesResponsePtrOutput() PolicyDefinitionPropertiesResponsePtrOutput
	ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(context.Context) PolicyDefinitionPropertiesResponsePtrOutput
}

type policyDefinitionPropertiesResponsePtrType PolicyDefinitionPropertiesResponseArgs

func PolicyDefinitionPropertiesResponsePtr(v *PolicyDefinitionPropertiesResponseArgs) PolicyDefinitionPropertiesResponsePtrInput {
	return (*policyDefinitionPropertiesResponsePtrType)(v)
}

func (*policyDefinitionPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyDefinitionPropertiesResponse)(nil)).Elem()
}

func (i *policyDefinitionPropertiesResponsePtrType) ToPolicyDefinitionPropertiesResponsePtrOutput() PolicyDefinitionPropertiesResponsePtrOutput {
	return i.ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *policyDefinitionPropertiesResponsePtrType) ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionPropertiesResponsePtrOutput)
}

// The policy definition properties.
type PolicyDefinitionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionPropertiesResponse)(nil)).Elem()
}

func (o PolicyDefinitionPropertiesResponseOutput) ToPolicyDefinitionPropertiesResponseOutput() PolicyDefinitionPropertiesResponseOutput {
	return o
}

func (o PolicyDefinitionPropertiesResponseOutput) ToPolicyDefinitionPropertiesResponseOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponseOutput {
	return o
}

func (o PolicyDefinitionPropertiesResponseOutput) ToPolicyDefinitionPropertiesResponsePtrOutput() PolicyDefinitionPropertiesResponsePtrOutput {
	return o.ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o PolicyDefinitionPropertiesResponseOutput) ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) *PolicyDefinitionPropertiesResponse {
		return &v
	}).(PolicyDefinitionPropertiesResponsePtrOutput)
}

// The policy definition description.
func (o PolicyDefinitionPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the policy definition.
func (o PolicyDefinitionPropertiesResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The policy definition metadata.
func (o PolicyDefinitionPropertiesResponseOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
func (o PolicyDefinitionPropertiesResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Required if a parameter is used in policy rule.
func (o PolicyDefinitionPropertiesResponseOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// The policy rule.
func (o PolicyDefinitionPropertiesResponseOutput) PolicyRule() pulumi.MapOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) map[string]interface{} { return v.PolicyRule }).(pulumi.MapOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, and Custom.
func (o PolicyDefinitionPropertiesResponseOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionPropertiesResponse) *string { return v.PolicyType }).(pulumi.StringPtrOutput)
}

type PolicyDefinitionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyDefinitionPropertiesResponse)(nil)).Elem()
}

func (o PolicyDefinitionPropertiesResponsePtrOutput) ToPolicyDefinitionPropertiesResponsePtrOutput() PolicyDefinitionPropertiesResponsePtrOutput {
	return o
}

func (o PolicyDefinitionPropertiesResponsePtrOutput) ToPolicyDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicyDefinitionPropertiesResponsePtrOutput {
	return o
}

func (o PolicyDefinitionPropertiesResponsePtrOutput) Elem() PolicyDefinitionPropertiesResponseOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) PolicyDefinitionPropertiesResponse { return *v }).(PolicyDefinitionPropertiesResponseOutput)
}

// The policy definition description.
func (o PolicyDefinitionPropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The display name of the policy definition.
func (o PolicyDefinitionPropertiesResponsePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The policy definition metadata.
func (o PolicyDefinitionPropertiesResponsePtrOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.MapOutput)
}

// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
func (o PolicyDefinitionPropertiesResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Required if a parameter is used in policy rule.
func (o PolicyDefinitionPropertiesResponsePtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// The policy rule.
func (o PolicyDefinitionPropertiesResponsePtrOutput) PolicyRule() pulumi.MapOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.PolicyRule
	}).(pulumi.MapOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, and Custom.
func (o PolicyDefinitionPropertiesResponsePtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// The policy definition reference.
type PolicyDefinitionReference struct {
	// Required if a parameter is used in policy rule.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId *string `pulumi:"policyDefinitionId"`
}

// PolicyDefinitionReferenceInput is an input type that accepts PolicyDefinitionReferenceArgs and PolicyDefinitionReferenceOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceInput` via:
//
//          PolicyDefinitionReferenceArgs{...}
type PolicyDefinitionReferenceInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceOutput() PolicyDefinitionReferenceOutput
	ToPolicyDefinitionReferenceOutputWithContext(context.Context) PolicyDefinitionReferenceOutput
}

// The policy definition reference.
type PolicyDefinitionReferenceArgs struct {
	// Required if a parameter is used in policy rule.
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId pulumi.StringPtrInput `pulumi:"policyDefinitionId"`
}

func (PolicyDefinitionReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReference)(nil)).Elem()
}

func (i PolicyDefinitionReferenceArgs) ToPolicyDefinitionReferenceOutput() PolicyDefinitionReferenceOutput {
	return i.ToPolicyDefinitionReferenceOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceArgs) ToPolicyDefinitionReferenceOutputWithContext(ctx context.Context) PolicyDefinitionReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceOutput)
}

// PolicyDefinitionReferenceArrayInput is an input type that accepts PolicyDefinitionReferenceArray and PolicyDefinitionReferenceArrayOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceArrayInput` via:
//
//          PolicyDefinitionReferenceArray{ PolicyDefinitionReferenceArgs{...} }
type PolicyDefinitionReferenceArrayInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceArrayOutput() PolicyDefinitionReferenceArrayOutput
	ToPolicyDefinitionReferenceArrayOutputWithContext(context.Context) PolicyDefinitionReferenceArrayOutput
}

type PolicyDefinitionReferenceArray []PolicyDefinitionReferenceInput

func (PolicyDefinitionReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReference)(nil)).Elem()
}

func (i PolicyDefinitionReferenceArray) ToPolicyDefinitionReferenceArrayOutput() PolicyDefinitionReferenceArrayOutput {
	return i.ToPolicyDefinitionReferenceArrayOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceArray) ToPolicyDefinitionReferenceArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceArrayOutput)
}

// The policy definition reference.
type PolicyDefinitionReferenceOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReference)(nil)).Elem()
}

func (o PolicyDefinitionReferenceOutput) ToPolicyDefinitionReferenceOutput() PolicyDefinitionReferenceOutput {
	return o
}

func (o PolicyDefinitionReferenceOutput) ToPolicyDefinitionReferenceOutputWithContext(ctx context.Context) PolicyDefinitionReferenceOutput {
	return o
}

// Required if a parameter is used in policy rule.
func (o PolicyDefinitionReferenceOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v PolicyDefinitionReference) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// The ID of the policy definition or policy set definition.
func (o PolicyDefinitionReferenceOutput) PolicyDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionReference) *string { return v.PolicyDefinitionId }).(pulumi.StringPtrOutput)
}

type PolicyDefinitionReferenceArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReference)(nil)).Elem()
}

func (o PolicyDefinitionReferenceArrayOutput) ToPolicyDefinitionReferenceArrayOutput() PolicyDefinitionReferenceArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceArrayOutput) ToPolicyDefinitionReferenceArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionReference {
		return vs[0].([]PolicyDefinitionReference)[vs[1].(int)]
	}).(PolicyDefinitionReferenceOutput)
}

// The policy definition reference.
type PolicyDefinitionReferenceResponse struct {
	// Required if a parameter is used in policy rule.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId *string `pulumi:"policyDefinitionId"`
}

// PolicyDefinitionReferenceResponseInput is an input type that accepts PolicyDefinitionReferenceResponseArgs and PolicyDefinitionReferenceResponseOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceResponseInput` via:
//
//          PolicyDefinitionReferenceResponseArgs{...}
type PolicyDefinitionReferenceResponseInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceResponseOutput() PolicyDefinitionReferenceResponseOutput
	ToPolicyDefinitionReferenceResponseOutputWithContext(context.Context) PolicyDefinitionReferenceResponseOutput
}

// The policy definition reference.
type PolicyDefinitionReferenceResponseArgs struct {
	// Required if a parameter is used in policy rule.
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId pulumi.StringPtrInput `pulumi:"policyDefinitionId"`
}

func (PolicyDefinitionReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReferenceResponse)(nil)).Elem()
}

func (i PolicyDefinitionReferenceResponseArgs) ToPolicyDefinitionReferenceResponseOutput() PolicyDefinitionReferenceResponseOutput {
	return i.ToPolicyDefinitionReferenceResponseOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceResponseArgs) ToPolicyDefinitionReferenceResponseOutputWithContext(ctx context.Context) PolicyDefinitionReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceResponseOutput)
}

// PolicyDefinitionReferenceResponseArrayInput is an input type that accepts PolicyDefinitionReferenceResponseArray and PolicyDefinitionReferenceResponseArrayOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceResponseArrayInput` via:
//
//          PolicyDefinitionReferenceResponseArray{ PolicyDefinitionReferenceResponseArgs{...} }
type PolicyDefinitionReferenceResponseArrayInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceResponseArrayOutput() PolicyDefinitionReferenceResponseArrayOutput
	ToPolicyDefinitionReferenceResponseArrayOutputWithContext(context.Context) PolicyDefinitionReferenceResponseArrayOutput
}

type PolicyDefinitionReferenceResponseArray []PolicyDefinitionReferenceResponseInput

func (PolicyDefinitionReferenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReferenceResponse)(nil)).Elem()
}

func (i PolicyDefinitionReferenceResponseArray) ToPolicyDefinitionReferenceResponseArrayOutput() PolicyDefinitionReferenceResponseArrayOutput {
	return i.ToPolicyDefinitionReferenceResponseArrayOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceResponseArray) ToPolicyDefinitionReferenceResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceResponseArrayOutput)
}

// The policy definition reference.
type PolicyDefinitionReferenceResponseOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReferenceResponse)(nil)).Elem()
}

func (o PolicyDefinitionReferenceResponseOutput) ToPolicyDefinitionReferenceResponseOutput() PolicyDefinitionReferenceResponseOutput {
	return o
}

func (o PolicyDefinitionReferenceResponseOutput) ToPolicyDefinitionReferenceResponseOutputWithContext(ctx context.Context) PolicyDefinitionReferenceResponseOutput {
	return o
}

// Required if a parameter is used in policy rule.
func (o PolicyDefinitionReferenceResponseOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// The ID of the policy definition or policy set definition.
func (o PolicyDefinitionReferenceResponseOutput) PolicyDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) *string { return v.PolicyDefinitionId }).(pulumi.StringPtrOutput)
}

type PolicyDefinitionReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReferenceResponse)(nil)).Elem()
}

func (o PolicyDefinitionReferenceResponseArrayOutput) ToPolicyDefinitionReferenceResponseArrayOutput() PolicyDefinitionReferenceResponseArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceResponseArrayOutput) ToPolicyDefinitionReferenceResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceResponseArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceResponseArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionReferenceResponse {
		return vs[0].([]PolicyDefinitionReferenceResponse)[vs[1].(int)]
	}).(PolicyDefinitionReferenceResponseOutput)
}

// The policy set definition.
type PolicySetDefinitionType struct {
	// The name of the policy set definition.
	Name string `pulumi:"name"`
	// The policy definition properties.
	Properties PolicySetDefinitionPropertiesResponse `pulumi:"properties"`
	// The type of the resource (Microsoft.Authorization/policySetDefinitions).
	Type string `pulumi:"type"`
}

// PolicySetDefinitionTypeInput is an input type that accepts PolicySetDefinitionTypeArgs and PolicySetDefinitionTypeOutput values.
// You can construct a concrete instance of `PolicySetDefinitionTypeInput` via:
//
//          PolicySetDefinitionTypeArgs{...}
type PolicySetDefinitionTypeInput interface {
	pulumi.Input

	ToPolicySetDefinitionTypeOutput() PolicySetDefinitionTypeOutput
	ToPolicySetDefinitionTypeOutputWithContext(context.Context) PolicySetDefinitionTypeOutput
}

// The policy set definition.
type PolicySetDefinitionTypeArgs struct {
	// The name of the policy set definition.
	Name pulumi.StringInput `pulumi:"name"`
	// The policy definition properties.
	Properties PolicySetDefinitionPropertiesResponseInput `pulumi:"properties"`
	// The type of the resource (Microsoft.Authorization/policySetDefinitions).
	Type pulumi.StringInput `pulumi:"type"`
}

func (PolicySetDefinitionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySetDefinitionType)(nil)).Elem()
}

func (i PolicySetDefinitionTypeArgs) ToPolicySetDefinitionTypeOutput() PolicySetDefinitionTypeOutput {
	return i.ToPolicySetDefinitionTypeOutputWithContext(context.Background())
}

func (i PolicySetDefinitionTypeArgs) ToPolicySetDefinitionTypeOutputWithContext(ctx context.Context) PolicySetDefinitionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetDefinitionTypeOutput)
}

// The policy set definition.
type PolicySetDefinitionTypeOutput struct{ *pulumi.OutputState }

func (PolicySetDefinitionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySetDefinitionType)(nil)).Elem()
}

func (o PolicySetDefinitionTypeOutput) ToPolicySetDefinitionTypeOutput() PolicySetDefinitionTypeOutput {
	return o
}

func (o PolicySetDefinitionTypeOutput) ToPolicySetDefinitionTypeOutputWithContext(ctx context.Context) PolicySetDefinitionTypeOutput {
	return o
}

// The name of the policy set definition.
func (o PolicySetDefinitionTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicySetDefinitionType) string { return v.Name }).(pulumi.StringOutput)
}

// The policy definition properties.
func (o PolicySetDefinitionTypeOutput) Properties() PolicySetDefinitionPropertiesResponseOutput {
	return o.ApplyT(func(v PolicySetDefinitionType) PolicySetDefinitionPropertiesResponse { return v.Properties }).(PolicySetDefinitionPropertiesResponseOutput)
}

// The type of the resource (Microsoft.Authorization/policySetDefinitions).
func (o PolicySetDefinitionTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PolicySetDefinitionType) string { return v.Type }).(pulumi.StringOutput)
}

// The policy set definition properties.
type PolicySetDefinitionPropertiesResponse struct {
	// The policy set definition description.
	Description *string `pulumi:"description"`
	// The display name of the policy set definition.
	DisplayName *string `pulumi:"displayName"`
	// The policy set definition metadata.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// The policy set definition parameters that can be used in policy definition references.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// An array of policy definition references.
	PolicyDefinitions []PolicyDefinitionReferenceResponse `pulumi:"policyDefinitions"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, and Custom.
	PolicyType *string `pulumi:"policyType"`
}

// PolicySetDefinitionPropertiesResponseInput is an input type that accepts PolicySetDefinitionPropertiesResponseArgs and PolicySetDefinitionPropertiesResponseOutput values.
// You can construct a concrete instance of `PolicySetDefinitionPropertiesResponseInput` via:
//
//          PolicySetDefinitionPropertiesResponseArgs{...}
type PolicySetDefinitionPropertiesResponseInput interface {
	pulumi.Input

	ToPolicySetDefinitionPropertiesResponseOutput() PolicySetDefinitionPropertiesResponseOutput
	ToPolicySetDefinitionPropertiesResponseOutputWithContext(context.Context) PolicySetDefinitionPropertiesResponseOutput
}

// The policy set definition properties.
type PolicySetDefinitionPropertiesResponseArgs struct {
	// The policy set definition description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The display name of the policy set definition.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The policy set definition metadata.
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// The policy set definition parameters that can be used in policy definition references.
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// An array of policy definition references.
	PolicyDefinitions PolicyDefinitionReferenceResponseArrayInput `pulumi:"policyDefinitions"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, and Custom.
	PolicyType pulumi.StringPtrInput `pulumi:"policyType"`
}

func (PolicySetDefinitionPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySetDefinitionPropertiesResponse)(nil)).Elem()
}

func (i PolicySetDefinitionPropertiesResponseArgs) ToPolicySetDefinitionPropertiesResponseOutput() PolicySetDefinitionPropertiesResponseOutput {
	return i.ToPolicySetDefinitionPropertiesResponseOutputWithContext(context.Background())
}

func (i PolicySetDefinitionPropertiesResponseArgs) ToPolicySetDefinitionPropertiesResponseOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetDefinitionPropertiesResponseOutput)
}

func (i PolicySetDefinitionPropertiesResponseArgs) ToPolicySetDefinitionPropertiesResponsePtrOutput() PolicySetDefinitionPropertiesResponsePtrOutput {
	return i.ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i PolicySetDefinitionPropertiesResponseArgs) ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetDefinitionPropertiesResponseOutput).ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(ctx)
}

// PolicySetDefinitionPropertiesResponsePtrInput is an input type that accepts PolicySetDefinitionPropertiesResponseArgs, PolicySetDefinitionPropertiesResponsePtr and PolicySetDefinitionPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `PolicySetDefinitionPropertiesResponsePtrInput` via:
//
//          PolicySetDefinitionPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type PolicySetDefinitionPropertiesResponsePtrInput interface {
	pulumi.Input

	ToPolicySetDefinitionPropertiesResponsePtrOutput() PolicySetDefinitionPropertiesResponsePtrOutput
	ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(context.Context) PolicySetDefinitionPropertiesResponsePtrOutput
}

type policySetDefinitionPropertiesResponsePtrType PolicySetDefinitionPropertiesResponseArgs

func PolicySetDefinitionPropertiesResponsePtr(v *PolicySetDefinitionPropertiesResponseArgs) PolicySetDefinitionPropertiesResponsePtrInput {
	return (*policySetDefinitionPropertiesResponsePtrType)(v)
}

func (*policySetDefinitionPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySetDefinitionPropertiesResponse)(nil)).Elem()
}

func (i *policySetDefinitionPropertiesResponsePtrType) ToPolicySetDefinitionPropertiesResponsePtrOutput() PolicySetDefinitionPropertiesResponsePtrOutput {
	return i.ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *policySetDefinitionPropertiesResponsePtrType) ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetDefinitionPropertiesResponsePtrOutput)
}

// The policy set definition properties.
type PolicySetDefinitionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PolicySetDefinitionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySetDefinitionPropertiesResponse)(nil)).Elem()
}

func (o PolicySetDefinitionPropertiesResponseOutput) ToPolicySetDefinitionPropertiesResponseOutput() PolicySetDefinitionPropertiesResponseOutput {
	return o
}

func (o PolicySetDefinitionPropertiesResponseOutput) ToPolicySetDefinitionPropertiesResponseOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesResponseOutput {
	return o
}

func (o PolicySetDefinitionPropertiesResponseOutput) ToPolicySetDefinitionPropertiesResponsePtrOutput() PolicySetDefinitionPropertiesResponsePtrOutput {
	return o.ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o PolicySetDefinitionPropertiesResponseOutput) ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionPropertiesResponse) *PolicySetDefinitionPropertiesResponse {
		return &v
	}).(PolicySetDefinitionPropertiesResponsePtrOutput)
}

// The policy set definition description.
func (o PolicySetDefinitionPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the policy set definition.
func (o PolicySetDefinitionPropertiesResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionPropertiesResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The policy set definition metadata.
func (o PolicySetDefinitionPropertiesResponseOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v PolicySetDefinitionPropertiesResponse) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

// The policy set definition parameters that can be used in policy definition references.
func (o PolicySetDefinitionPropertiesResponseOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v PolicySetDefinitionPropertiesResponse) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// An array of policy definition references.
func (o PolicySetDefinitionPropertiesResponseOutput) PolicyDefinitions() PolicyDefinitionReferenceResponseArrayOutput {
	return o.ApplyT(func(v PolicySetDefinitionPropertiesResponse) []PolicyDefinitionReferenceResponse {
		return v.PolicyDefinitions
	}).(PolicyDefinitionReferenceResponseArrayOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, and Custom.
func (o PolicySetDefinitionPropertiesResponseOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionPropertiesResponse) *string { return v.PolicyType }).(pulumi.StringPtrOutput)
}

type PolicySetDefinitionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PolicySetDefinitionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySetDefinitionPropertiesResponse)(nil)).Elem()
}

func (o PolicySetDefinitionPropertiesResponsePtrOutput) ToPolicySetDefinitionPropertiesResponsePtrOutput() PolicySetDefinitionPropertiesResponsePtrOutput {
	return o
}

func (o PolicySetDefinitionPropertiesResponsePtrOutput) ToPolicySetDefinitionPropertiesResponsePtrOutputWithContext(ctx context.Context) PolicySetDefinitionPropertiesResponsePtrOutput {
	return o
}

func (o PolicySetDefinitionPropertiesResponsePtrOutput) Elem() PolicySetDefinitionPropertiesResponseOutput {
	return o.ApplyT(func(v *PolicySetDefinitionPropertiesResponse) PolicySetDefinitionPropertiesResponse { return *v }).(PolicySetDefinitionPropertiesResponseOutput)
}

// The policy set definition description.
func (o PolicySetDefinitionPropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySetDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The display name of the policy set definition.
func (o PolicySetDefinitionPropertiesResponsePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySetDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The policy set definition metadata.
func (o PolicySetDefinitionPropertiesResponsePtrOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v *PolicySetDefinitionPropertiesResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.MapOutput)
}

// The policy set definition parameters that can be used in policy definition references.
func (o PolicySetDefinitionPropertiesResponsePtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *PolicySetDefinitionPropertiesResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// An array of policy definition references.
func (o PolicySetDefinitionPropertiesResponsePtrOutput) PolicyDefinitions() PolicyDefinitionReferenceResponseArrayOutput {
	return o.ApplyT(func(v *PolicySetDefinitionPropertiesResponse) []PolicyDefinitionReferenceResponse {
		if v == nil {
			return nil
		}
		return v.PolicyDefinitions
	}).(PolicyDefinitionReferenceResponseArrayOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, and Custom.
func (o PolicySetDefinitionPropertiesResponsePtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySetDefinitionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// The policy sku. This property is optional, obsolete, and will be ignored.
type PolicySku struct {
	// The name of the policy sku. Possible values are A0 and A1.
	Name string `pulumi:"name"`
	// The policy sku tier. Possible values are Free and Standard.
	Tier *string `pulumi:"tier"`
}

// PolicySkuInput is an input type that accepts PolicySkuArgs and PolicySkuOutput values.
// You can construct a concrete instance of `PolicySkuInput` via:
//
//          PolicySkuArgs{...}
type PolicySkuInput interface {
	pulumi.Input

	ToPolicySkuOutput() PolicySkuOutput
	ToPolicySkuOutputWithContext(context.Context) PolicySkuOutput
}

// The policy sku. This property is optional, obsolete, and will be ignored.
type PolicySkuArgs struct {
	// The name of the policy sku. Possible values are A0 and A1.
	Name pulumi.StringInput `pulumi:"name"`
	// The policy sku tier. Possible values are Free and Standard.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (PolicySkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySku)(nil)).Elem()
}

func (i PolicySkuArgs) ToPolicySkuOutput() PolicySkuOutput {
	return i.ToPolicySkuOutputWithContext(context.Background())
}

func (i PolicySkuArgs) ToPolicySkuOutputWithContext(ctx context.Context) PolicySkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySkuOutput)
}

func (i PolicySkuArgs) ToPolicySkuPtrOutput() PolicySkuPtrOutput {
	return i.ToPolicySkuPtrOutputWithContext(context.Background())
}

func (i PolicySkuArgs) ToPolicySkuPtrOutputWithContext(ctx context.Context) PolicySkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySkuOutput).ToPolicySkuPtrOutputWithContext(ctx)
}

// PolicySkuPtrInput is an input type that accepts PolicySkuArgs, PolicySkuPtr and PolicySkuPtrOutput values.
// You can construct a concrete instance of `PolicySkuPtrInput` via:
//
//          PolicySkuArgs{...}
//
//  or:
//
//          nil
type PolicySkuPtrInput interface {
	pulumi.Input

	ToPolicySkuPtrOutput() PolicySkuPtrOutput
	ToPolicySkuPtrOutputWithContext(context.Context) PolicySkuPtrOutput
}

type policySkuPtrType PolicySkuArgs

func PolicySkuPtr(v *PolicySkuArgs) PolicySkuPtrInput {
	return (*policySkuPtrType)(v)
}

func (*policySkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySku)(nil)).Elem()
}

func (i *policySkuPtrType) ToPolicySkuPtrOutput() PolicySkuPtrOutput {
	return i.ToPolicySkuPtrOutputWithContext(context.Background())
}

func (i *policySkuPtrType) ToPolicySkuPtrOutputWithContext(ctx context.Context) PolicySkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySkuPtrOutput)
}

// The policy sku. This property is optional, obsolete, and will be ignored.
type PolicySkuOutput struct{ *pulumi.OutputState }

func (PolicySkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySku)(nil)).Elem()
}

func (o PolicySkuOutput) ToPolicySkuOutput() PolicySkuOutput {
	return o
}

func (o PolicySkuOutput) ToPolicySkuOutputWithContext(ctx context.Context) PolicySkuOutput {
	return o
}

func (o PolicySkuOutput) ToPolicySkuPtrOutput() PolicySkuPtrOutput {
	return o.ToPolicySkuPtrOutputWithContext(context.Background())
}

func (o PolicySkuOutput) ToPolicySkuPtrOutputWithContext(ctx context.Context) PolicySkuPtrOutput {
	return o.ApplyT(func(v PolicySku) *PolicySku {
		return &v
	}).(PolicySkuPtrOutput)
}

// The name of the policy sku. Possible values are A0 and A1.
func (o PolicySkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicySku) string { return v.Name }).(pulumi.StringOutput)
}

// The policy sku tier. Possible values are Free and Standard.
func (o PolicySkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type PolicySkuPtrOutput struct{ *pulumi.OutputState }

func (PolicySkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySku)(nil)).Elem()
}

func (o PolicySkuPtrOutput) ToPolicySkuPtrOutput() PolicySkuPtrOutput {
	return o
}

func (o PolicySkuPtrOutput) ToPolicySkuPtrOutputWithContext(ctx context.Context) PolicySkuPtrOutput {
	return o
}

func (o PolicySkuPtrOutput) Elem() PolicySkuOutput {
	return o.ApplyT(func(v *PolicySku) PolicySku { return *v }).(PolicySkuOutput)
}

// The name of the policy sku. Possible values are A0 and A1.
func (o PolicySkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The policy sku tier. Possible values are Free and Standard.
func (o PolicySkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// The policy sku. This property is optional, obsolete, and will be ignored.
type PolicySkuResponse struct {
	// The name of the policy sku. Possible values are A0 and A1.
	Name string `pulumi:"name"`
	// The policy sku tier. Possible values are Free and Standard.
	Tier *string `pulumi:"tier"`
}

// PolicySkuResponseInput is an input type that accepts PolicySkuResponseArgs and PolicySkuResponseOutput values.
// You can construct a concrete instance of `PolicySkuResponseInput` via:
//
//          PolicySkuResponseArgs{...}
type PolicySkuResponseInput interface {
	pulumi.Input

	ToPolicySkuResponseOutput() PolicySkuResponseOutput
	ToPolicySkuResponseOutputWithContext(context.Context) PolicySkuResponseOutput
}

// The policy sku. This property is optional, obsolete, and will be ignored.
type PolicySkuResponseArgs struct {
	// The name of the policy sku. Possible values are A0 and A1.
	Name pulumi.StringInput `pulumi:"name"`
	// The policy sku tier. Possible values are Free and Standard.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (PolicySkuResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySkuResponse)(nil)).Elem()
}

func (i PolicySkuResponseArgs) ToPolicySkuResponseOutput() PolicySkuResponseOutput {
	return i.ToPolicySkuResponseOutputWithContext(context.Background())
}

func (i PolicySkuResponseArgs) ToPolicySkuResponseOutputWithContext(ctx context.Context) PolicySkuResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySkuResponseOutput)
}

func (i PolicySkuResponseArgs) ToPolicySkuResponsePtrOutput() PolicySkuResponsePtrOutput {
	return i.ToPolicySkuResponsePtrOutputWithContext(context.Background())
}

func (i PolicySkuResponseArgs) ToPolicySkuResponsePtrOutputWithContext(ctx context.Context) PolicySkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySkuResponseOutput).ToPolicySkuResponsePtrOutputWithContext(ctx)
}

// PolicySkuResponsePtrInput is an input type that accepts PolicySkuResponseArgs, PolicySkuResponsePtr and PolicySkuResponsePtrOutput values.
// You can construct a concrete instance of `PolicySkuResponsePtrInput` via:
//
//          PolicySkuResponseArgs{...}
//
//  or:
//
//          nil
type PolicySkuResponsePtrInput interface {
	pulumi.Input

	ToPolicySkuResponsePtrOutput() PolicySkuResponsePtrOutput
	ToPolicySkuResponsePtrOutputWithContext(context.Context) PolicySkuResponsePtrOutput
}

type policySkuResponsePtrType PolicySkuResponseArgs

func PolicySkuResponsePtr(v *PolicySkuResponseArgs) PolicySkuResponsePtrInput {
	return (*policySkuResponsePtrType)(v)
}

func (*policySkuResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySkuResponse)(nil)).Elem()
}

func (i *policySkuResponsePtrType) ToPolicySkuResponsePtrOutput() PolicySkuResponsePtrOutput {
	return i.ToPolicySkuResponsePtrOutputWithContext(context.Background())
}

func (i *policySkuResponsePtrType) ToPolicySkuResponsePtrOutputWithContext(ctx context.Context) PolicySkuResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySkuResponsePtrOutput)
}

// The policy sku. This property is optional, obsolete, and will be ignored.
type PolicySkuResponseOutput struct{ *pulumi.OutputState }

func (PolicySkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySkuResponse)(nil)).Elem()
}

func (o PolicySkuResponseOutput) ToPolicySkuResponseOutput() PolicySkuResponseOutput {
	return o
}

func (o PolicySkuResponseOutput) ToPolicySkuResponseOutputWithContext(ctx context.Context) PolicySkuResponseOutput {
	return o
}

func (o PolicySkuResponseOutput) ToPolicySkuResponsePtrOutput() PolicySkuResponsePtrOutput {
	return o.ToPolicySkuResponsePtrOutputWithContext(context.Background())
}

func (o PolicySkuResponseOutput) ToPolicySkuResponsePtrOutputWithContext(ctx context.Context) PolicySkuResponsePtrOutput {
	return o.ApplyT(func(v PolicySkuResponse) *PolicySkuResponse {
		return &v
	}).(PolicySkuResponsePtrOutput)
}

// The name of the policy sku. Possible values are A0 and A1.
func (o PolicySkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicySkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The policy sku tier. Possible values are Free and Standard.
func (o PolicySkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type PolicySkuResponsePtrOutput struct{ *pulumi.OutputState }

func (PolicySkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySkuResponse)(nil)).Elem()
}

func (o PolicySkuResponsePtrOutput) ToPolicySkuResponsePtrOutput() PolicySkuResponsePtrOutput {
	return o
}

func (o PolicySkuResponsePtrOutput) ToPolicySkuResponsePtrOutputWithContext(ctx context.Context) PolicySkuResponsePtrOutput {
	return o
}

func (o PolicySkuResponsePtrOutput) Elem() PolicySkuResponseOutput {
	return o.ApplyT(func(v *PolicySkuResponse) PolicySkuResponse { return *v }).(PolicySkuResponseOutput)
}

// The name of the policy sku. Possible values are A0 and A1.
func (o PolicySkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The policy sku tier. Possible values are Free and Standard.
func (o PolicySkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(IdentityOutput{})
	pulumi.RegisterOutputType(IdentityPtrOutput{})
	pulumi.RegisterOutputType(IdentityResponseOutput{})
	pulumi.RegisterOutputType(IdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentTypeOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionTypeOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceArrayOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceResponseOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(PolicySetDefinitionTypeOutput{})
	pulumi.RegisterOutputType(PolicySetDefinitionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PolicySetDefinitionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PolicySkuOutput{})
	pulumi.RegisterOutputType(PolicySkuPtrOutput{})
	pulumi.RegisterOutputType(PolicySkuResponseOutput{})
	pulumi.RegisterOutputType(PolicySkuResponsePtrOutput{})
}
