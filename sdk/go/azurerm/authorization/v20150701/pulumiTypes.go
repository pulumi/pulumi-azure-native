// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20150701

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Role definition permissions.
type Permission struct {
	// Allowed actions.
	Actions []string `pulumi:"actions"`
	// Denied actions.
	NotActions []string `pulumi:"notActions"`
}

// PermissionInput is an input type that accepts PermissionArgs and PermissionOutput values.
// You can construct a concrete instance of `PermissionInput` via:
//
//          PermissionArgs{...}
type PermissionInput interface {
	pulumi.Input

	ToPermissionOutput() PermissionOutput
	ToPermissionOutputWithContext(context.Context) PermissionOutput
}

// Role definition permissions.
type PermissionArgs struct {
	// Allowed actions.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// Denied actions.
	NotActions pulumi.StringArrayInput `pulumi:"notActions"`
}

func (PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Permission)(nil)).Elem()
}

func (i PermissionArgs) ToPermissionOutput() PermissionOutput {
	return i.ToPermissionOutputWithContext(context.Background())
}

func (i PermissionArgs) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionOutput)
}

// PermissionArrayInput is an input type that accepts PermissionArray and PermissionArrayOutput values.
// You can construct a concrete instance of `PermissionArrayInput` via:
//
//          PermissionArray{ PermissionArgs{...} }
type PermissionArrayInput interface {
	pulumi.Input

	ToPermissionArrayOutput() PermissionArrayOutput
	ToPermissionArrayOutputWithContext(context.Context) PermissionArrayOutput
}

type PermissionArray []PermissionInput

func (PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Permission)(nil)).Elem()
}

func (i PermissionArray) ToPermissionArrayOutput() PermissionArrayOutput {
	return i.ToPermissionArrayOutputWithContext(context.Background())
}

func (i PermissionArray) ToPermissionArrayOutputWithContext(ctx context.Context) PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionArrayOutput)
}

// Role definition permissions.
type PermissionOutput struct{ *pulumi.OutputState }

func (PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Permission)(nil)).Elem()
}

func (o PermissionOutput) ToPermissionOutput() PermissionOutput {
	return o
}

func (o PermissionOutput) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return o
}

// Allowed actions.
func (o PermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Permission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Denied actions.
func (o PermissionOutput) NotActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Permission) []string { return v.NotActions }).(pulumi.StringArrayOutput)
}

type PermissionArrayOutput struct{ *pulumi.OutputState }

func (PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Permission)(nil)).Elem()
}

func (o PermissionArrayOutput) ToPermissionArrayOutput() PermissionArrayOutput {
	return o
}

func (o PermissionArrayOutput) ToPermissionArrayOutputWithContext(ctx context.Context) PermissionArrayOutput {
	return o
}

func (o PermissionArrayOutput) Index(i pulumi.IntInput) PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Permission {
		return vs[0].([]Permission)[vs[1].(int)]
	}).(PermissionOutput)
}

// Role definition permissions.
type PermissionResponse struct {
	// Allowed actions.
	Actions []string `pulumi:"actions"`
	// Denied actions.
	NotActions []string `pulumi:"notActions"`
}

// PermissionResponseInput is an input type that accepts PermissionResponseArgs and PermissionResponseOutput values.
// You can construct a concrete instance of `PermissionResponseInput` via:
//
//          PermissionResponseArgs{...}
type PermissionResponseInput interface {
	pulumi.Input

	ToPermissionResponseOutput() PermissionResponseOutput
	ToPermissionResponseOutputWithContext(context.Context) PermissionResponseOutput
}

// Role definition permissions.
type PermissionResponseArgs struct {
	// Allowed actions.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// Denied actions.
	NotActions pulumi.StringArrayInput `pulumi:"notActions"`
}

func (PermissionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionResponse)(nil)).Elem()
}

func (i PermissionResponseArgs) ToPermissionResponseOutput() PermissionResponseOutput {
	return i.ToPermissionResponseOutputWithContext(context.Background())
}

func (i PermissionResponseArgs) ToPermissionResponseOutputWithContext(ctx context.Context) PermissionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionResponseOutput)
}

// PermissionResponseArrayInput is an input type that accepts PermissionResponseArray and PermissionResponseArrayOutput values.
// You can construct a concrete instance of `PermissionResponseArrayInput` via:
//
//          PermissionResponseArray{ PermissionResponseArgs{...} }
type PermissionResponseArrayInput interface {
	pulumi.Input

	ToPermissionResponseArrayOutput() PermissionResponseArrayOutput
	ToPermissionResponseArrayOutputWithContext(context.Context) PermissionResponseArrayOutput
}

type PermissionResponseArray []PermissionResponseInput

func (PermissionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionResponse)(nil)).Elem()
}

func (i PermissionResponseArray) ToPermissionResponseArrayOutput() PermissionResponseArrayOutput {
	return i.ToPermissionResponseArrayOutputWithContext(context.Background())
}

func (i PermissionResponseArray) ToPermissionResponseArrayOutputWithContext(ctx context.Context) PermissionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionResponseArrayOutput)
}

// Role definition permissions.
type PermissionResponseOutput struct{ *pulumi.OutputState }

func (PermissionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionResponse)(nil)).Elem()
}

func (o PermissionResponseOutput) ToPermissionResponseOutput() PermissionResponseOutput {
	return o
}

func (o PermissionResponseOutput) ToPermissionResponseOutputWithContext(ctx context.Context) PermissionResponseOutput {
	return o
}

// Allowed actions.
func (o PermissionResponseOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionResponse) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Denied actions.
func (o PermissionResponseOutput) NotActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionResponse) []string { return v.NotActions }).(pulumi.StringArrayOutput)
}

type PermissionResponseArrayOutput struct{ *pulumi.OutputState }

func (PermissionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionResponse)(nil)).Elem()
}

func (o PermissionResponseArrayOutput) ToPermissionResponseArrayOutput() PermissionResponseArrayOutput {
	return o
}

func (o PermissionResponseArrayOutput) ToPermissionResponseArrayOutputWithContext(ctx context.Context) PermissionResponseArrayOutput {
	return o
}

func (o PermissionResponseArrayOutput) Index(i pulumi.IntInput) PermissionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionResponse {
		return vs[0].([]PermissionResponse)[vs[1].(int)]
	}).(PermissionResponseOutput)
}

// Role assignment properties.
type RoleAssignmentProperties struct {
	// The principal ID assigned to the role. This maps to the ID inside the Active Directory. It can point to a user, service principal, or security group.
	PrincipalId string `pulumi:"principalId"`
	// The role definition ID used in the role assignment.
	RoleDefinitionId string `pulumi:"roleDefinitionId"`
}

// RoleAssignmentPropertiesInput is an input type that accepts RoleAssignmentPropertiesArgs and RoleAssignmentPropertiesOutput values.
// You can construct a concrete instance of `RoleAssignmentPropertiesInput` via:
//
//          RoleAssignmentPropertiesArgs{...}
type RoleAssignmentPropertiesInput interface {
	pulumi.Input

	ToRoleAssignmentPropertiesOutput() RoleAssignmentPropertiesOutput
	ToRoleAssignmentPropertiesOutputWithContext(context.Context) RoleAssignmentPropertiesOutput
}

// Role assignment properties.
type RoleAssignmentPropertiesArgs struct {
	// The principal ID assigned to the role. This maps to the ID inside the Active Directory. It can point to a user, service principal, or security group.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The role definition ID used in the role assignment.
	RoleDefinitionId pulumi.StringInput `pulumi:"roleDefinitionId"`
}

func (RoleAssignmentPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleAssignmentProperties)(nil)).Elem()
}

func (i RoleAssignmentPropertiesArgs) ToRoleAssignmentPropertiesOutput() RoleAssignmentPropertiesOutput {
	return i.ToRoleAssignmentPropertiesOutputWithContext(context.Background())
}

func (i RoleAssignmentPropertiesArgs) ToRoleAssignmentPropertiesOutputWithContext(ctx context.Context) RoleAssignmentPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentPropertiesOutput)
}

func (i RoleAssignmentPropertiesArgs) ToRoleAssignmentPropertiesPtrOutput() RoleAssignmentPropertiesPtrOutput {
	return i.ToRoleAssignmentPropertiesPtrOutputWithContext(context.Background())
}

func (i RoleAssignmentPropertiesArgs) ToRoleAssignmentPropertiesPtrOutputWithContext(ctx context.Context) RoleAssignmentPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentPropertiesOutput).ToRoleAssignmentPropertiesPtrOutputWithContext(ctx)
}

// RoleAssignmentPropertiesPtrInput is an input type that accepts RoleAssignmentPropertiesArgs, RoleAssignmentPropertiesPtr and RoleAssignmentPropertiesPtrOutput values.
// You can construct a concrete instance of `RoleAssignmentPropertiesPtrInput` via:
//
//          RoleAssignmentPropertiesArgs{...}
//
//  or:
//
//          nil
type RoleAssignmentPropertiesPtrInput interface {
	pulumi.Input

	ToRoleAssignmentPropertiesPtrOutput() RoleAssignmentPropertiesPtrOutput
	ToRoleAssignmentPropertiesPtrOutputWithContext(context.Context) RoleAssignmentPropertiesPtrOutput
}

type roleAssignmentPropertiesPtrType RoleAssignmentPropertiesArgs

func RoleAssignmentPropertiesPtr(v *RoleAssignmentPropertiesArgs) RoleAssignmentPropertiesPtrInput {
	return (*roleAssignmentPropertiesPtrType)(v)
}

func (*roleAssignmentPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleAssignmentProperties)(nil)).Elem()
}

func (i *roleAssignmentPropertiesPtrType) ToRoleAssignmentPropertiesPtrOutput() RoleAssignmentPropertiesPtrOutput {
	return i.ToRoleAssignmentPropertiesPtrOutputWithContext(context.Background())
}

func (i *roleAssignmentPropertiesPtrType) ToRoleAssignmentPropertiesPtrOutputWithContext(ctx context.Context) RoleAssignmentPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentPropertiesPtrOutput)
}

// Role assignment properties.
type RoleAssignmentPropertiesOutput struct{ *pulumi.OutputState }

func (RoleAssignmentPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleAssignmentProperties)(nil)).Elem()
}

func (o RoleAssignmentPropertiesOutput) ToRoleAssignmentPropertiesOutput() RoleAssignmentPropertiesOutput {
	return o
}

func (o RoleAssignmentPropertiesOutput) ToRoleAssignmentPropertiesOutputWithContext(ctx context.Context) RoleAssignmentPropertiesOutput {
	return o
}

func (o RoleAssignmentPropertiesOutput) ToRoleAssignmentPropertiesPtrOutput() RoleAssignmentPropertiesPtrOutput {
	return o.ToRoleAssignmentPropertiesPtrOutputWithContext(context.Background())
}

func (o RoleAssignmentPropertiesOutput) ToRoleAssignmentPropertiesPtrOutputWithContext(ctx context.Context) RoleAssignmentPropertiesPtrOutput {
	return o.ApplyT(func(v RoleAssignmentProperties) *RoleAssignmentProperties {
		return &v
	}).(RoleAssignmentPropertiesPtrOutput)
}

// The principal ID assigned to the role. This maps to the ID inside the Active Directory. It can point to a user, service principal, or security group.
func (o RoleAssignmentPropertiesOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v RoleAssignmentProperties) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The role definition ID used in the role assignment.
func (o RoleAssignmentPropertiesOutput) RoleDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v RoleAssignmentProperties) string { return v.RoleDefinitionId }).(pulumi.StringOutput)
}

type RoleAssignmentPropertiesPtrOutput struct{ *pulumi.OutputState }

func (RoleAssignmentPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleAssignmentProperties)(nil)).Elem()
}

func (o RoleAssignmentPropertiesPtrOutput) ToRoleAssignmentPropertiesPtrOutput() RoleAssignmentPropertiesPtrOutput {
	return o
}

func (o RoleAssignmentPropertiesPtrOutput) ToRoleAssignmentPropertiesPtrOutputWithContext(ctx context.Context) RoleAssignmentPropertiesPtrOutput {
	return o
}

func (o RoleAssignmentPropertiesPtrOutput) Elem() RoleAssignmentPropertiesOutput {
	return o.ApplyT(func(v *RoleAssignmentProperties) RoleAssignmentProperties { return *v }).(RoleAssignmentPropertiesOutput)
}

// The principal ID assigned to the role. This maps to the ID inside the Active Directory. It can point to a user, service principal, or security group.
func (o RoleAssignmentPropertiesPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleAssignmentProperties) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The role definition ID used in the role assignment.
func (o RoleAssignmentPropertiesPtrOutput) RoleDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleAssignmentProperties) *string {
		if v == nil {
			return nil
		}
		return &v.RoleDefinitionId
	}).(pulumi.StringPtrOutput)
}

// Role assignment properties with scope.
type RoleAssignmentPropertiesWithScopeResponse struct {
	// The principal ID.
	PrincipalId *string `pulumi:"principalId"`
	// The role definition ID.
	RoleDefinitionId *string `pulumi:"roleDefinitionId"`
	// The role assignment scope.
	Scope *string `pulumi:"scope"`
}

// RoleAssignmentPropertiesWithScopeResponseInput is an input type that accepts RoleAssignmentPropertiesWithScopeResponseArgs and RoleAssignmentPropertiesWithScopeResponseOutput values.
// You can construct a concrete instance of `RoleAssignmentPropertiesWithScopeResponseInput` via:
//
//          RoleAssignmentPropertiesWithScopeResponseArgs{...}
type RoleAssignmentPropertiesWithScopeResponseInput interface {
	pulumi.Input

	ToRoleAssignmentPropertiesWithScopeResponseOutput() RoleAssignmentPropertiesWithScopeResponseOutput
	ToRoleAssignmentPropertiesWithScopeResponseOutputWithContext(context.Context) RoleAssignmentPropertiesWithScopeResponseOutput
}

// Role assignment properties with scope.
type RoleAssignmentPropertiesWithScopeResponseArgs struct {
	// The principal ID.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The role definition ID.
	RoleDefinitionId pulumi.StringPtrInput `pulumi:"roleDefinitionId"`
	// The role assignment scope.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (RoleAssignmentPropertiesWithScopeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleAssignmentPropertiesWithScopeResponse)(nil)).Elem()
}

func (i RoleAssignmentPropertiesWithScopeResponseArgs) ToRoleAssignmentPropertiesWithScopeResponseOutput() RoleAssignmentPropertiesWithScopeResponseOutput {
	return i.ToRoleAssignmentPropertiesWithScopeResponseOutputWithContext(context.Background())
}

func (i RoleAssignmentPropertiesWithScopeResponseArgs) ToRoleAssignmentPropertiesWithScopeResponseOutputWithContext(ctx context.Context) RoleAssignmentPropertiesWithScopeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentPropertiesWithScopeResponseOutput)
}

func (i RoleAssignmentPropertiesWithScopeResponseArgs) ToRoleAssignmentPropertiesWithScopeResponsePtrOutput() RoleAssignmentPropertiesWithScopeResponsePtrOutput {
	return i.ToRoleAssignmentPropertiesWithScopeResponsePtrOutputWithContext(context.Background())
}

func (i RoleAssignmentPropertiesWithScopeResponseArgs) ToRoleAssignmentPropertiesWithScopeResponsePtrOutputWithContext(ctx context.Context) RoleAssignmentPropertiesWithScopeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentPropertiesWithScopeResponseOutput).ToRoleAssignmentPropertiesWithScopeResponsePtrOutputWithContext(ctx)
}

// RoleAssignmentPropertiesWithScopeResponsePtrInput is an input type that accepts RoleAssignmentPropertiesWithScopeResponseArgs, RoleAssignmentPropertiesWithScopeResponsePtr and RoleAssignmentPropertiesWithScopeResponsePtrOutput values.
// You can construct a concrete instance of `RoleAssignmentPropertiesWithScopeResponsePtrInput` via:
//
//          RoleAssignmentPropertiesWithScopeResponseArgs{...}
//
//  or:
//
//          nil
type RoleAssignmentPropertiesWithScopeResponsePtrInput interface {
	pulumi.Input

	ToRoleAssignmentPropertiesWithScopeResponsePtrOutput() RoleAssignmentPropertiesWithScopeResponsePtrOutput
	ToRoleAssignmentPropertiesWithScopeResponsePtrOutputWithContext(context.Context) RoleAssignmentPropertiesWithScopeResponsePtrOutput
}

type roleAssignmentPropertiesWithScopeResponsePtrType RoleAssignmentPropertiesWithScopeResponseArgs

func RoleAssignmentPropertiesWithScopeResponsePtr(v *RoleAssignmentPropertiesWithScopeResponseArgs) RoleAssignmentPropertiesWithScopeResponsePtrInput {
	return (*roleAssignmentPropertiesWithScopeResponsePtrType)(v)
}

func (*roleAssignmentPropertiesWithScopeResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleAssignmentPropertiesWithScopeResponse)(nil)).Elem()
}

func (i *roleAssignmentPropertiesWithScopeResponsePtrType) ToRoleAssignmentPropertiesWithScopeResponsePtrOutput() RoleAssignmentPropertiesWithScopeResponsePtrOutput {
	return i.ToRoleAssignmentPropertiesWithScopeResponsePtrOutputWithContext(context.Background())
}

func (i *roleAssignmentPropertiesWithScopeResponsePtrType) ToRoleAssignmentPropertiesWithScopeResponsePtrOutputWithContext(ctx context.Context) RoleAssignmentPropertiesWithScopeResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentPropertiesWithScopeResponsePtrOutput)
}

// Role assignment properties with scope.
type RoleAssignmentPropertiesWithScopeResponseOutput struct{ *pulumi.OutputState }

func (RoleAssignmentPropertiesWithScopeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleAssignmentPropertiesWithScopeResponse)(nil)).Elem()
}

func (o RoleAssignmentPropertiesWithScopeResponseOutput) ToRoleAssignmentPropertiesWithScopeResponseOutput() RoleAssignmentPropertiesWithScopeResponseOutput {
	return o
}

func (o RoleAssignmentPropertiesWithScopeResponseOutput) ToRoleAssignmentPropertiesWithScopeResponseOutputWithContext(ctx context.Context) RoleAssignmentPropertiesWithScopeResponseOutput {
	return o
}

func (o RoleAssignmentPropertiesWithScopeResponseOutput) ToRoleAssignmentPropertiesWithScopeResponsePtrOutput() RoleAssignmentPropertiesWithScopeResponsePtrOutput {
	return o.ToRoleAssignmentPropertiesWithScopeResponsePtrOutputWithContext(context.Background())
}

func (o RoleAssignmentPropertiesWithScopeResponseOutput) ToRoleAssignmentPropertiesWithScopeResponsePtrOutputWithContext(ctx context.Context) RoleAssignmentPropertiesWithScopeResponsePtrOutput {
	return o.ApplyT(func(v RoleAssignmentPropertiesWithScopeResponse) *RoleAssignmentPropertiesWithScopeResponse {
		return &v
	}).(RoleAssignmentPropertiesWithScopeResponsePtrOutput)
}

// The principal ID.
func (o RoleAssignmentPropertiesWithScopeResponseOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleAssignmentPropertiesWithScopeResponse) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The role definition ID.
func (o RoleAssignmentPropertiesWithScopeResponseOutput) RoleDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleAssignmentPropertiesWithScopeResponse) *string { return v.RoleDefinitionId }).(pulumi.StringPtrOutput)
}

// The role assignment scope.
func (o RoleAssignmentPropertiesWithScopeResponseOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleAssignmentPropertiesWithScopeResponse) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type RoleAssignmentPropertiesWithScopeResponsePtrOutput struct{ *pulumi.OutputState }

func (RoleAssignmentPropertiesWithScopeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleAssignmentPropertiesWithScopeResponse)(nil)).Elem()
}

func (o RoleAssignmentPropertiesWithScopeResponsePtrOutput) ToRoleAssignmentPropertiesWithScopeResponsePtrOutput() RoleAssignmentPropertiesWithScopeResponsePtrOutput {
	return o
}

func (o RoleAssignmentPropertiesWithScopeResponsePtrOutput) ToRoleAssignmentPropertiesWithScopeResponsePtrOutputWithContext(ctx context.Context) RoleAssignmentPropertiesWithScopeResponsePtrOutput {
	return o
}

func (o RoleAssignmentPropertiesWithScopeResponsePtrOutput) Elem() RoleAssignmentPropertiesWithScopeResponseOutput {
	return o.ApplyT(func(v *RoleAssignmentPropertiesWithScopeResponse) RoleAssignmentPropertiesWithScopeResponse {
		return *v
	}).(RoleAssignmentPropertiesWithScopeResponseOutput)
}

// The principal ID.
func (o RoleAssignmentPropertiesWithScopeResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleAssignmentPropertiesWithScopeResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The role definition ID.
func (o RoleAssignmentPropertiesWithScopeResponsePtrOutput) RoleDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleAssignmentPropertiesWithScopeResponse) *string {
		if v == nil {
			return nil
		}
		return v.RoleDefinitionId
	}).(pulumi.StringPtrOutput)
}

// The role assignment scope.
func (o RoleAssignmentPropertiesWithScopeResponsePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleAssignmentPropertiesWithScopeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(PermissionOutput{})
	pulumi.RegisterOutputType(PermissionArrayOutput{})
	pulumi.RegisterOutputType(PermissionResponseOutput{})
	pulumi.RegisterOutputType(PermissionResponseArrayOutput{})
	pulumi.RegisterOutputType(RoleAssignmentPropertiesOutput{})
	pulumi.RegisterOutputType(RoleAssignmentPropertiesPtrOutput{})
	pulumi.RegisterOutputType(RoleAssignmentPropertiesWithScopeResponseOutput{})
	pulumi.RegisterOutputType(RoleAssignmentPropertiesWithScopeResponsePtrOutput{})
}
