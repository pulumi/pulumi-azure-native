// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20191001

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A budget resource.
type BudgetType struct {
	// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
	ETag *string `pulumi:"eTag"`
	// Resource name.
	Name string `pulumi:"name"`
	// The properties of the budget.
	Properties BudgetPropertiesResponse `pulumi:"properties"`
	// Resource type.
	Type string `pulumi:"type"`
}

// BudgetTypeInput is an input type that accepts BudgetTypeArgs and BudgetTypeOutput values.
// You can construct a concrete instance of `BudgetTypeInput` via:
//
//          BudgetTypeArgs{...}
type BudgetTypeInput interface {
	pulumi.Input

	ToBudgetTypeOutput() BudgetTypeOutput
	ToBudgetTypeOutputWithContext(context.Context) BudgetTypeOutput
}

// A budget resource.
type BudgetTypeArgs struct {
	// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
	ETag pulumi.StringPtrInput `pulumi:"eTag"`
	// Resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of the budget.
	Properties BudgetPropertiesResponseInput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (BudgetTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetType)(nil)).Elem()
}

func (i BudgetTypeArgs) ToBudgetTypeOutput() BudgetTypeOutput {
	return i.ToBudgetTypeOutputWithContext(context.Background())
}

func (i BudgetTypeArgs) ToBudgetTypeOutputWithContext(ctx context.Context) BudgetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetTypeOutput)
}

// A budget resource.
type BudgetTypeOutput struct{ *pulumi.OutputState }

func (BudgetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetType)(nil)).Elem()
}

func (o BudgetTypeOutput) ToBudgetTypeOutput() BudgetTypeOutput {
	return o
}

func (o BudgetTypeOutput) ToBudgetTypeOutputWithContext(ctx context.Context) BudgetTypeOutput {
	return o
}

// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
func (o BudgetTypeOutput) ETag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetType) *string { return v.ETag }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o BudgetTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of the budget.
func (o BudgetTypeOutput) Properties() BudgetPropertiesResponseOutput {
	return o.ApplyT(func(v BudgetType) BudgetPropertiesResponse { return v.Properties }).(BudgetPropertiesResponseOutput)
}

// Resource type.
func (o BudgetTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetType) string { return v.Type }).(pulumi.StringOutput)
}

// The comparison expression to be used in the budgets.
type BudgetComparisonExpression struct {
	// The name of the column to use in comparison.
	Name string `pulumi:"name"`
	// The operator to use for comparison.
	Operator string `pulumi:"operator"`
	// Array of values to use for comparison
	Values []string `pulumi:"values"`
}

// BudgetComparisonExpressionInput is an input type that accepts BudgetComparisonExpressionArgs and BudgetComparisonExpressionOutput values.
// You can construct a concrete instance of `BudgetComparisonExpressionInput` via:
//
//          BudgetComparisonExpressionArgs{...}
type BudgetComparisonExpressionInput interface {
	pulumi.Input

	ToBudgetComparisonExpressionOutput() BudgetComparisonExpressionOutput
	ToBudgetComparisonExpressionOutputWithContext(context.Context) BudgetComparisonExpressionOutput
}

// The comparison expression to be used in the budgets.
type BudgetComparisonExpressionArgs struct {
	// The name of the column to use in comparison.
	Name pulumi.StringInput `pulumi:"name"`
	// The operator to use for comparison.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Array of values to use for comparison
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (BudgetComparisonExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetComparisonExpression)(nil)).Elem()
}

func (i BudgetComparisonExpressionArgs) ToBudgetComparisonExpressionOutput() BudgetComparisonExpressionOutput {
	return i.ToBudgetComparisonExpressionOutputWithContext(context.Background())
}

func (i BudgetComparisonExpressionArgs) ToBudgetComparisonExpressionOutputWithContext(ctx context.Context) BudgetComparisonExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetComparisonExpressionOutput)
}

func (i BudgetComparisonExpressionArgs) ToBudgetComparisonExpressionPtrOutput() BudgetComparisonExpressionPtrOutput {
	return i.ToBudgetComparisonExpressionPtrOutputWithContext(context.Background())
}

func (i BudgetComparisonExpressionArgs) ToBudgetComparisonExpressionPtrOutputWithContext(ctx context.Context) BudgetComparisonExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetComparisonExpressionOutput).ToBudgetComparisonExpressionPtrOutputWithContext(ctx)
}

// BudgetComparisonExpressionPtrInput is an input type that accepts BudgetComparisonExpressionArgs, BudgetComparisonExpressionPtr and BudgetComparisonExpressionPtrOutput values.
// You can construct a concrete instance of `BudgetComparisonExpressionPtrInput` via:
//
//          BudgetComparisonExpressionArgs{...}
//
//  or:
//
//          nil
type BudgetComparisonExpressionPtrInput interface {
	pulumi.Input

	ToBudgetComparisonExpressionPtrOutput() BudgetComparisonExpressionPtrOutput
	ToBudgetComparisonExpressionPtrOutputWithContext(context.Context) BudgetComparisonExpressionPtrOutput
}

type budgetComparisonExpressionPtrType BudgetComparisonExpressionArgs

func BudgetComparisonExpressionPtr(v *BudgetComparisonExpressionArgs) BudgetComparisonExpressionPtrInput {
	return (*budgetComparisonExpressionPtrType)(v)
}

func (*budgetComparisonExpressionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetComparisonExpression)(nil)).Elem()
}

func (i *budgetComparisonExpressionPtrType) ToBudgetComparisonExpressionPtrOutput() BudgetComparisonExpressionPtrOutput {
	return i.ToBudgetComparisonExpressionPtrOutputWithContext(context.Background())
}

func (i *budgetComparisonExpressionPtrType) ToBudgetComparisonExpressionPtrOutputWithContext(ctx context.Context) BudgetComparisonExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetComparisonExpressionPtrOutput)
}

// The comparison expression to be used in the budgets.
type BudgetComparisonExpressionOutput struct{ *pulumi.OutputState }

func (BudgetComparisonExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetComparisonExpression)(nil)).Elem()
}

func (o BudgetComparisonExpressionOutput) ToBudgetComparisonExpressionOutput() BudgetComparisonExpressionOutput {
	return o
}

func (o BudgetComparisonExpressionOutput) ToBudgetComparisonExpressionOutputWithContext(ctx context.Context) BudgetComparisonExpressionOutput {
	return o
}

func (o BudgetComparisonExpressionOutput) ToBudgetComparisonExpressionPtrOutput() BudgetComparisonExpressionPtrOutput {
	return o.ToBudgetComparisonExpressionPtrOutputWithContext(context.Background())
}

func (o BudgetComparisonExpressionOutput) ToBudgetComparisonExpressionPtrOutputWithContext(ctx context.Context) BudgetComparisonExpressionPtrOutput {
	return o.ApplyT(func(v BudgetComparisonExpression) *BudgetComparisonExpression {
		return &v
	}).(BudgetComparisonExpressionPtrOutput)
}

// The name of the column to use in comparison.
func (o BudgetComparisonExpressionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetComparisonExpression) string { return v.Name }).(pulumi.StringOutput)
}

// The operator to use for comparison.
func (o BudgetComparisonExpressionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetComparisonExpression) string { return v.Operator }).(pulumi.StringOutput)
}

// Array of values to use for comparison
func (o BudgetComparisonExpressionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BudgetComparisonExpression) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type BudgetComparisonExpressionPtrOutput struct{ *pulumi.OutputState }

func (BudgetComparisonExpressionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetComparisonExpression)(nil)).Elem()
}

func (o BudgetComparisonExpressionPtrOutput) ToBudgetComparisonExpressionPtrOutput() BudgetComparisonExpressionPtrOutput {
	return o
}

func (o BudgetComparisonExpressionPtrOutput) ToBudgetComparisonExpressionPtrOutputWithContext(ctx context.Context) BudgetComparisonExpressionPtrOutput {
	return o
}

func (o BudgetComparisonExpressionPtrOutput) Elem() BudgetComparisonExpressionOutput {
	return o.ApplyT(func(v *BudgetComparisonExpression) BudgetComparisonExpression { return *v }).(BudgetComparisonExpressionOutput)
}

// The name of the column to use in comparison.
func (o BudgetComparisonExpressionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetComparisonExpression) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The operator to use for comparison.
func (o BudgetComparisonExpressionPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetComparisonExpression) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Array of values to use for comparison
func (o BudgetComparisonExpressionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BudgetComparisonExpression) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// The comparison expression to be used in the budgets.
type BudgetComparisonExpressionResponse struct {
	// The name of the column to use in comparison.
	Name string `pulumi:"name"`
	// The operator to use for comparison.
	Operator string `pulumi:"operator"`
	// Array of values to use for comparison
	Values []string `pulumi:"values"`
}

// BudgetComparisonExpressionResponseInput is an input type that accepts BudgetComparisonExpressionResponseArgs and BudgetComparisonExpressionResponseOutput values.
// You can construct a concrete instance of `BudgetComparisonExpressionResponseInput` via:
//
//          BudgetComparisonExpressionResponseArgs{...}
type BudgetComparisonExpressionResponseInput interface {
	pulumi.Input

	ToBudgetComparisonExpressionResponseOutput() BudgetComparisonExpressionResponseOutput
	ToBudgetComparisonExpressionResponseOutputWithContext(context.Context) BudgetComparisonExpressionResponseOutput
}

// The comparison expression to be used in the budgets.
type BudgetComparisonExpressionResponseArgs struct {
	// The name of the column to use in comparison.
	Name pulumi.StringInput `pulumi:"name"`
	// The operator to use for comparison.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Array of values to use for comparison
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (BudgetComparisonExpressionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetComparisonExpressionResponse)(nil)).Elem()
}

func (i BudgetComparisonExpressionResponseArgs) ToBudgetComparisonExpressionResponseOutput() BudgetComparisonExpressionResponseOutput {
	return i.ToBudgetComparisonExpressionResponseOutputWithContext(context.Background())
}

func (i BudgetComparisonExpressionResponseArgs) ToBudgetComparisonExpressionResponseOutputWithContext(ctx context.Context) BudgetComparisonExpressionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetComparisonExpressionResponseOutput)
}

func (i BudgetComparisonExpressionResponseArgs) ToBudgetComparisonExpressionResponsePtrOutput() BudgetComparisonExpressionResponsePtrOutput {
	return i.ToBudgetComparisonExpressionResponsePtrOutputWithContext(context.Background())
}

func (i BudgetComparisonExpressionResponseArgs) ToBudgetComparisonExpressionResponsePtrOutputWithContext(ctx context.Context) BudgetComparisonExpressionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetComparisonExpressionResponseOutput).ToBudgetComparisonExpressionResponsePtrOutputWithContext(ctx)
}

// BudgetComparisonExpressionResponsePtrInput is an input type that accepts BudgetComparisonExpressionResponseArgs, BudgetComparisonExpressionResponsePtr and BudgetComparisonExpressionResponsePtrOutput values.
// You can construct a concrete instance of `BudgetComparisonExpressionResponsePtrInput` via:
//
//          BudgetComparisonExpressionResponseArgs{...}
//
//  or:
//
//          nil
type BudgetComparisonExpressionResponsePtrInput interface {
	pulumi.Input

	ToBudgetComparisonExpressionResponsePtrOutput() BudgetComparisonExpressionResponsePtrOutput
	ToBudgetComparisonExpressionResponsePtrOutputWithContext(context.Context) BudgetComparisonExpressionResponsePtrOutput
}

type budgetComparisonExpressionResponsePtrType BudgetComparisonExpressionResponseArgs

func BudgetComparisonExpressionResponsePtr(v *BudgetComparisonExpressionResponseArgs) BudgetComparisonExpressionResponsePtrInput {
	return (*budgetComparisonExpressionResponsePtrType)(v)
}

func (*budgetComparisonExpressionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetComparisonExpressionResponse)(nil)).Elem()
}

func (i *budgetComparisonExpressionResponsePtrType) ToBudgetComparisonExpressionResponsePtrOutput() BudgetComparisonExpressionResponsePtrOutput {
	return i.ToBudgetComparisonExpressionResponsePtrOutputWithContext(context.Background())
}

func (i *budgetComparisonExpressionResponsePtrType) ToBudgetComparisonExpressionResponsePtrOutputWithContext(ctx context.Context) BudgetComparisonExpressionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetComparisonExpressionResponsePtrOutput)
}

// The comparison expression to be used in the budgets.
type BudgetComparisonExpressionResponseOutput struct{ *pulumi.OutputState }

func (BudgetComparisonExpressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetComparisonExpressionResponse)(nil)).Elem()
}

func (o BudgetComparisonExpressionResponseOutput) ToBudgetComparisonExpressionResponseOutput() BudgetComparisonExpressionResponseOutput {
	return o
}

func (o BudgetComparisonExpressionResponseOutput) ToBudgetComparisonExpressionResponseOutputWithContext(ctx context.Context) BudgetComparisonExpressionResponseOutput {
	return o
}

func (o BudgetComparisonExpressionResponseOutput) ToBudgetComparisonExpressionResponsePtrOutput() BudgetComparisonExpressionResponsePtrOutput {
	return o.ToBudgetComparisonExpressionResponsePtrOutputWithContext(context.Background())
}

func (o BudgetComparisonExpressionResponseOutput) ToBudgetComparisonExpressionResponsePtrOutputWithContext(ctx context.Context) BudgetComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v BudgetComparisonExpressionResponse) *BudgetComparisonExpressionResponse {
		return &v
	}).(BudgetComparisonExpressionResponsePtrOutput)
}

// The name of the column to use in comparison.
func (o BudgetComparisonExpressionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetComparisonExpressionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The operator to use for comparison.
func (o BudgetComparisonExpressionResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetComparisonExpressionResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Array of values to use for comparison
func (o BudgetComparisonExpressionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BudgetComparisonExpressionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type BudgetComparisonExpressionResponsePtrOutput struct{ *pulumi.OutputState }

func (BudgetComparisonExpressionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetComparisonExpressionResponse)(nil)).Elem()
}

func (o BudgetComparisonExpressionResponsePtrOutput) ToBudgetComparisonExpressionResponsePtrOutput() BudgetComparisonExpressionResponsePtrOutput {
	return o
}

func (o BudgetComparisonExpressionResponsePtrOutput) ToBudgetComparisonExpressionResponsePtrOutputWithContext(ctx context.Context) BudgetComparisonExpressionResponsePtrOutput {
	return o
}

func (o BudgetComparisonExpressionResponsePtrOutput) Elem() BudgetComparisonExpressionResponseOutput {
	return o.ApplyT(func(v *BudgetComparisonExpressionResponse) BudgetComparisonExpressionResponse { return *v }).(BudgetComparisonExpressionResponseOutput)
}

// The name of the column to use in comparison.
func (o BudgetComparisonExpressionResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetComparisonExpressionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The operator to use for comparison.
func (o BudgetComparisonExpressionResponsePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetComparisonExpressionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Array of values to use for comparison
func (o BudgetComparisonExpressionResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BudgetComparisonExpressionResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// May be used to filter budgets by resource group, resource, or meter.
type BudgetFilter struct {
	// The logical "AND" expression. Must have at least 2 items.
	And []BudgetFilterProperties `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimensions *BudgetComparisonExpression `pulumi:"dimensions"`
	// The logical "NOT" expression.
	Not *BudgetFilterProperties `pulumi:"not"`
	// Has comparison expression for a tag
	Tags *BudgetComparisonExpression `pulumi:"tags"`
}

// BudgetFilterInput is an input type that accepts BudgetFilterArgs and BudgetFilterOutput values.
// You can construct a concrete instance of `BudgetFilterInput` via:
//
//          BudgetFilterArgs{...}
type BudgetFilterInput interface {
	pulumi.Input

	ToBudgetFilterOutput() BudgetFilterOutput
	ToBudgetFilterOutputWithContext(context.Context) BudgetFilterOutput
}

// May be used to filter budgets by resource group, resource, or meter.
type BudgetFilterArgs struct {
	// The logical "AND" expression. Must have at least 2 items.
	And BudgetFilterPropertiesArrayInput `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimensions BudgetComparisonExpressionPtrInput `pulumi:"dimensions"`
	// The logical "NOT" expression.
	Not BudgetFilterPropertiesPtrInput `pulumi:"not"`
	// Has comparison expression for a tag
	Tags BudgetComparisonExpressionPtrInput `pulumi:"tags"`
}

func (BudgetFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetFilter)(nil)).Elem()
}

func (i BudgetFilterArgs) ToBudgetFilterOutput() BudgetFilterOutput {
	return i.ToBudgetFilterOutputWithContext(context.Background())
}

func (i BudgetFilterArgs) ToBudgetFilterOutputWithContext(ctx context.Context) BudgetFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetFilterOutput)
}

func (i BudgetFilterArgs) ToBudgetFilterPtrOutput() BudgetFilterPtrOutput {
	return i.ToBudgetFilterPtrOutputWithContext(context.Background())
}

func (i BudgetFilterArgs) ToBudgetFilterPtrOutputWithContext(ctx context.Context) BudgetFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetFilterOutput).ToBudgetFilterPtrOutputWithContext(ctx)
}

// BudgetFilterPtrInput is an input type that accepts BudgetFilterArgs, BudgetFilterPtr and BudgetFilterPtrOutput values.
// You can construct a concrete instance of `BudgetFilterPtrInput` via:
//
//          BudgetFilterArgs{...}
//
//  or:
//
//          nil
type BudgetFilterPtrInput interface {
	pulumi.Input

	ToBudgetFilterPtrOutput() BudgetFilterPtrOutput
	ToBudgetFilterPtrOutputWithContext(context.Context) BudgetFilterPtrOutput
}

type budgetFilterPtrType BudgetFilterArgs

func BudgetFilterPtr(v *BudgetFilterArgs) BudgetFilterPtrInput {
	return (*budgetFilterPtrType)(v)
}

func (*budgetFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetFilter)(nil)).Elem()
}

func (i *budgetFilterPtrType) ToBudgetFilterPtrOutput() BudgetFilterPtrOutput {
	return i.ToBudgetFilterPtrOutputWithContext(context.Background())
}

func (i *budgetFilterPtrType) ToBudgetFilterPtrOutputWithContext(ctx context.Context) BudgetFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetFilterPtrOutput)
}

// May be used to filter budgets by resource group, resource, or meter.
type BudgetFilterOutput struct{ *pulumi.OutputState }

func (BudgetFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetFilter)(nil)).Elem()
}

func (o BudgetFilterOutput) ToBudgetFilterOutput() BudgetFilterOutput {
	return o
}

func (o BudgetFilterOutput) ToBudgetFilterOutputWithContext(ctx context.Context) BudgetFilterOutput {
	return o
}

func (o BudgetFilterOutput) ToBudgetFilterPtrOutput() BudgetFilterPtrOutput {
	return o.ToBudgetFilterPtrOutputWithContext(context.Background())
}

func (o BudgetFilterOutput) ToBudgetFilterPtrOutputWithContext(ctx context.Context) BudgetFilterPtrOutput {
	return o.ApplyT(func(v BudgetFilter) *BudgetFilter {
		return &v
	}).(BudgetFilterPtrOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o BudgetFilterOutput) And() BudgetFilterPropertiesArrayOutput {
	return o.ApplyT(func(v BudgetFilter) []BudgetFilterProperties { return v.And }).(BudgetFilterPropertiesArrayOutput)
}

// Has comparison expression for a dimension
func (o BudgetFilterOutput) Dimensions() BudgetComparisonExpressionPtrOutput {
	return o.ApplyT(func(v BudgetFilter) *BudgetComparisonExpression { return v.Dimensions }).(BudgetComparisonExpressionPtrOutput)
}

// The logical "NOT" expression.
func (o BudgetFilterOutput) Not() BudgetFilterPropertiesPtrOutput {
	return o.ApplyT(func(v BudgetFilter) *BudgetFilterProperties { return v.Not }).(BudgetFilterPropertiesPtrOutput)
}

// Has comparison expression for a tag
func (o BudgetFilterOutput) Tags() BudgetComparisonExpressionPtrOutput {
	return o.ApplyT(func(v BudgetFilter) *BudgetComparisonExpression { return v.Tags }).(BudgetComparisonExpressionPtrOutput)
}

type BudgetFilterPtrOutput struct{ *pulumi.OutputState }

func (BudgetFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetFilter)(nil)).Elem()
}

func (o BudgetFilterPtrOutput) ToBudgetFilterPtrOutput() BudgetFilterPtrOutput {
	return o
}

func (o BudgetFilterPtrOutput) ToBudgetFilterPtrOutputWithContext(ctx context.Context) BudgetFilterPtrOutput {
	return o
}

func (o BudgetFilterPtrOutput) Elem() BudgetFilterOutput {
	return o.ApplyT(func(v *BudgetFilter) BudgetFilter { return *v }).(BudgetFilterOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o BudgetFilterPtrOutput) And() BudgetFilterPropertiesArrayOutput {
	return o.ApplyT(func(v *BudgetFilter) []BudgetFilterProperties {
		if v == nil {
			return nil
		}
		return v.And
	}).(BudgetFilterPropertiesArrayOutput)
}

// Has comparison expression for a dimension
func (o BudgetFilterPtrOutput) Dimensions() BudgetComparisonExpressionPtrOutput {
	return o.ApplyT(func(v *BudgetFilter) *BudgetComparisonExpression {
		if v == nil {
			return nil
		}
		return v.Dimensions
	}).(BudgetComparisonExpressionPtrOutput)
}

// The logical "NOT" expression.
func (o BudgetFilterPtrOutput) Not() BudgetFilterPropertiesPtrOutput {
	return o.ApplyT(func(v *BudgetFilter) *BudgetFilterProperties {
		if v == nil {
			return nil
		}
		return v.Not
	}).(BudgetFilterPropertiesPtrOutput)
}

// Has comparison expression for a tag
func (o BudgetFilterPtrOutput) Tags() BudgetComparisonExpressionPtrOutput {
	return o.ApplyT(func(v *BudgetFilter) *BudgetComparisonExpression {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(BudgetComparisonExpressionPtrOutput)
}

// The Dimensions or Tags to filter a budget by.
type BudgetFilterProperties struct {
	// Has comparison expression for a dimension
	Dimensions *BudgetComparisonExpression `pulumi:"dimensions"`
	// Has comparison expression for a tag
	Tags *BudgetComparisonExpression `pulumi:"tags"`
}

// BudgetFilterPropertiesInput is an input type that accepts BudgetFilterPropertiesArgs and BudgetFilterPropertiesOutput values.
// You can construct a concrete instance of `BudgetFilterPropertiesInput` via:
//
//          BudgetFilterPropertiesArgs{...}
type BudgetFilterPropertiesInput interface {
	pulumi.Input

	ToBudgetFilterPropertiesOutput() BudgetFilterPropertiesOutput
	ToBudgetFilterPropertiesOutputWithContext(context.Context) BudgetFilterPropertiesOutput
}

// The Dimensions or Tags to filter a budget by.
type BudgetFilterPropertiesArgs struct {
	// Has comparison expression for a dimension
	Dimensions BudgetComparisonExpressionPtrInput `pulumi:"dimensions"`
	// Has comparison expression for a tag
	Tags BudgetComparisonExpressionPtrInput `pulumi:"tags"`
}

func (BudgetFilterPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetFilterProperties)(nil)).Elem()
}

func (i BudgetFilterPropertiesArgs) ToBudgetFilterPropertiesOutput() BudgetFilterPropertiesOutput {
	return i.ToBudgetFilterPropertiesOutputWithContext(context.Background())
}

func (i BudgetFilterPropertiesArgs) ToBudgetFilterPropertiesOutputWithContext(ctx context.Context) BudgetFilterPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetFilterPropertiesOutput)
}

func (i BudgetFilterPropertiesArgs) ToBudgetFilterPropertiesPtrOutput() BudgetFilterPropertiesPtrOutput {
	return i.ToBudgetFilterPropertiesPtrOutputWithContext(context.Background())
}

func (i BudgetFilterPropertiesArgs) ToBudgetFilterPropertiesPtrOutputWithContext(ctx context.Context) BudgetFilterPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetFilterPropertiesOutput).ToBudgetFilterPropertiesPtrOutputWithContext(ctx)
}

// BudgetFilterPropertiesPtrInput is an input type that accepts BudgetFilterPropertiesArgs, BudgetFilterPropertiesPtr and BudgetFilterPropertiesPtrOutput values.
// You can construct a concrete instance of `BudgetFilterPropertiesPtrInput` via:
//
//          BudgetFilterPropertiesArgs{...}
//
//  or:
//
//          nil
type BudgetFilterPropertiesPtrInput interface {
	pulumi.Input

	ToBudgetFilterPropertiesPtrOutput() BudgetFilterPropertiesPtrOutput
	ToBudgetFilterPropertiesPtrOutputWithContext(context.Context) BudgetFilterPropertiesPtrOutput
}

type budgetFilterPropertiesPtrType BudgetFilterPropertiesArgs

func BudgetFilterPropertiesPtr(v *BudgetFilterPropertiesArgs) BudgetFilterPropertiesPtrInput {
	return (*budgetFilterPropertiesPtrType)(v)
}

func (*budgetFilterPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetFilterProperties)(nil)).Elem()
}

func (i *budgetFilterPropertiesPtrType) ToBudgetFilterPropertiesPtrOutput() BudgetFilterPropertiesPtrOutput {
	return i.ToBudgetFilterPropertiesPtrOutputWithContext(context.Background())
}

func (i *budgetFilterPropertiesPtrType) ToBudgetFilterPropertiesPtrOutputWithContext(ctx context.Context) BudgetFilterPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetFilterPropertiesPtrOutput)
}

// BudgetFilterPropertiesArrayInput is an input type that accepts BudgetFilterPropertiesArray and BudgetFilterPropertiesArrayOutput values.
// You can construct a concrete instance of `BudgetFilterPropertiesArrayInput` via:
//
//          BudgetFilterPropertiesArray{ BudgetFilterPropertiesArgs{...} }
type BudgetFilterPropertiesArrayInput interface {
	pulumi.Input

	ToBudgetFilterPropertiesArrayOutput() BudgetFilterPropertiesArrayOutput
	ToBudgetFilterPropertiesArrayOutputWithContext(context.Context) BudgetFilterPropertiesArrayOutput
}

type BudgetFilterPropertiesArray []BudgetFilterPropertiesInput

func (BudgetFilterPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BudgetFilterProperties)(nil)).Elem()
}

func (i BudgetFilterPropertiesArray) ToBudgetFilterPropertiesArrayOutput() BudgetFilterPropertiesArrayOutput {
	return i.ToBudgetFilterPropertiesArrayOutputWithContext(context.Background())
}

func (i BudgetFilterPropertiesArray) ToBudgetFilterPropertiesArrayOutputWithContext(ctx context.Context) BudgetFilterPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetFilterPropertiesArrayOutput)
}

// The Dimensions or Tags to filter a budget by.
type BudgetFilterPropertiesOutput struct{ *pulumi.OutputState }

func (BudgetFilterPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetFilterProperties)(nil)).Elem()
}

func (o BudgetFilterPropertiesOutput) ToBudgetFilterPropertiesOutput() BudgetFilterPropertiesOutput {
	return o
}

func (o BudgetFilterPropertiesOutput) ToBudgetFilterPropertiesOutputWithContext(ctx context.Context) BudgetFilterPropertiesOutput {
	return o
}

func (o BudgetFilterPropertiesOutput) ToBudgetFilterPropertiesPtrOutput() BudgetFilterPropertiesPtrOutput {
	return o.ToBudgetFilterPropertiesPtrOutputWithContext(context.Background())
}

func (o BudgetFilterPropertiesOutput) ToBudgetFilterPropertiesPtrOutputWithContext(ctx context.Context) BudgetFilterPropertiesPtrOutput {
	return o.ApplyT(func(v BudgetFilterProperties) *BudgetFilterProperties {
		return &v
	}).(BudgetFilterPropertiesPtrOutput)
}

// Has comparison expression for a dimension
func (o BudgetFilterPropertiesOutput) Dimensions() BudgetComparisonExpressionPtrOutput {
	return o.ApplyT(func(v BudgetFilterProperties) *BudgetComparisonExpression { return v.Dimensions }).(BudgetComparisonExpressionPtrOutput)
}

// Has comparison expression for a tag
func (o BudgetFilterPropertiesOutput) Tags() BudgetComparisonExpressionPtrOutput {
	return o.ApplyT(func(v BudgetFilterProperties) *BudgetComparisonExpression { return v.Tags }).(BudgetComparisonExpressionPtrOutput)
}

type BudgetFilterPropertiesPtrOutput struct{ *pulumi.OutputState }

func (BudgetFilterPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetFilterProperties)(nil)).Elem()
}

func (o BudgetFilterPropertiesPtrOutput) ToBudgetFilterPropertiesPtrOutput() BudgetFilterPropertiesPtrOutput {
	return o
}

func (o BudgetFilterPropertiesPtrOutput) ToBudgetFilterPropertiesPtrOutputWithContext(ctx context.Context) BudgetFilterPropertiesPtrOutput {
	return o
}

func (o BudgetFilterPropertiesPtrOutput) Elem() BudgetFilterPropertiesOutput {
	return o.ApplyT(func(v *BudgetFilterProperties) BudgetFilterProperties { return *v }).(BudgetFilterPropertiesOutput)
}

// Has comparison expression for a dimension
func (o BudgetFilterPropertiesPtrOutput) Dimensions() BudgetComparisonExpressionPtrOutput {
	return o.ApplyT(func(v *BudgetFilterProperties) *BudgetComparisonExpression {
		if v == nil {
			return nil
		}
		return v.Dimensions
	}).(BudgetComparisonExpressionPtrOutput)
}

// Has comparison expression for a tag
func (o BudgetFilterPropertiesPtrOutput) Tags() BudgetComparisonExpressionPtrOutput {
	return o.ApplyT(func(v *BudgetFilterProperties) *BudgetComparisonExpression {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(BudgetComparisonExpressionPtrOutput)
}

type BudgetFilterPropertiesArrayOutput struct{ *pulumi.OutputState }

func (BudgetFilterPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BudgetFilterProperties)(nil)).Elem()
}

func (o BudgetFilterPropertiesArrayOutput) ToBudgetFilterPropertiesArrayOutput() BudgetFilterPropertiesArrayOutput {
	return o
}

func (o BudgetFilterPropertiesArrayOutput) ToBudgetFilterPropertiesArrayOutputWithContext(ctx context.Context) BudgetFilterPropertiesArrayOutput {
	return o
}

func (o BudgetFilterPropertiesArrayOutput) Index(i pulumi.IntInput) BudgetFilterPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BudgetFilterProperties {
		return vs[0].([]BudgetFilterProperties)[vs[1].(int)]
	}).(BudgetFilterPropertiesOutput)
}

// The Dimensions or Tags to filter a budget by.
type BudgetFilterPropertiesResponse struct {
	// Has comparison expression for a dimension
	Dimensions *BudgetComparisonExpressionResponse `pulumi:"dimensions"`
	// Has comparison expression for a tag
	Tags *BudgetComparisonExpressionResponse `pulumi:"tags"`
}

// BudgetFilterPropertiesResponseInput is an input type that accepts BudgetFilterPropertiesResponseArgs and BudgetFilterPropertiesResponseOutput values.
// You can construct a concrete instance of `BudgetFilterPropertiesResponseInput` via:
//
//          BudgetFilterPropertiesResponseArgs{...}
type BudgetFilterPropertiesResponseInput interface {
	pulumi.Input

	ToBudgetFilterPropertiesResponseOutput() BudgetFilterPropertiesResponseOutput
	ToBudgetFilterPropertiesResponseOutputWithContext(context.Context) BudgetFilterPropertiesResponseOutput
}

// The Dimensions or Tags to filter a budget by.
type BudgetFilterPropertiesResponseArgs struct {
	// Has comparison expression for a dimension
	Dimensions BudgetComparisonExpressionResponsePtrInput `pulumi:"dimensions"`
	// Has comparison expression for a tag
	Tags BudgetComparisonExpressionResponsePtrInput `pulumi:"tags"`
}

func (BudgetFilterPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetFilterPropertiesResponse)(nil)).Elem()
}

func (i BudgetFilterPropertiesResponseArgs) ToBudgetFilterPropertiesResponseOutput() BudgetFilterPropertiesResponseOutput {
	return i.ToBudgetFilterPropertiesResponseOutputWithContext(context.Background())
}

func (i BudgetFilterPropertiesResponseArgs) ToBudgetFilterPropertiesResponseOutputWithContext(ctx context.Context) BudgetFilterPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetFilterPropertiesResponseOutput)
}

func (i BudgetFilterPropertiesResponseArgs) ToBudgetFilterPropertiesResponsePtrOutput() BudgetFilterPropertiesResponsePtrOutput {
	return i.ToBudgetFilterPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i BudgetFilterPropertiesResponseArgs) ToBudgetFilterPropertiesResponsePtrOutputWithContext(ctx context.Context) BudgetFilterPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetFilterPropertiesResponseOutput).ToBudgetFilterPropertiesResponsePtrOutputWithContext(ctx)
}

// BudgetFilterPropertiesResponsePtrInput is an input type that accepts BudgetFilterPropertiesResponseArgs, BudgetFilterPropertiesResponsePtr and BudgetFilterPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `BudgetFilterPropertiesResponsePtrInput` via:
//
//          BudgetFilterPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type BudgetFilterPropertiesResponsePtrInput interface {
	pulumi.Input

	ToBudgetFilterPropertiesResponsePtrOutput() BudgetFilterPropertiesResponsePtrOutput
	ToBudgetFilterPropertiesResponsePtrOutputWithContext(context.Context) BudgetFilterPropertiesResponsePtrOutput
}

type budgetFilterPropertiesResponsePtrType BudgetFilterPropertiesResponseArgs

func BudgetFilterPropertiesResponsePtr(v *BudgetFilterPropertiesResponseArgs) BudgetFilterPropertiesResponsePtrInput {
	return (*budgetFilterPropertiesResponsePtrType)(v)
}

func (*budgetFilterPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetFilterPropertiesResponse)(nil)).Elem()
}

func (i *budgetFilterPropertiesResponsePtrType) ToBudgetFilterPropertiesResponsePtrOutput() BudgetFilterPropertiesResponsePtrOutput {
	return i.ToBudgetFilterPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *budgetFilterPropertiesResponsePtrType) ToBudgetFilterPropertiesResponsePtrOutputWithContext(ctx context.Context) BudgetFilterPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetFilterPropertiesResponsePtrOutput)
}

// BudgetFilterPropertiesResponseArrayInput is an input type that accepts BudgetFilterPropertiesResponseArray and BudgetFilterPropertiesResponseArrayOutput values.
// You can construct a concrete instance of `BudgetFilterPropertiesResponseArrayInput` via:
//
//          BudgetFilterPropertiesResponseArray{ BudgetFilterPropertiesResponseArgs{...} }
type BudgetFilterPropertiesResponseArrayInput interface {
	pulumi.Input

	ToBudgetFilterPropertiesResponseArrayOutput() BudgetFilterPropertiesResponseArrayOutput
	ToBudgetFilterPropertiesResponseArrayOutputWithContext(context.Context) BudgetFilterPropertiesResponseArrayOutput
}

type BudgetFilterPropertiesResponseArray []BudgetFilterPropertiesResponseInput

func (BudgetFilterPropertiesResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BudgetFilterPropertiesResponse)(nil)).Elem()
}

func (i BudgetFilterPropertiesResponseArray) ToBudgetFilterPropertiesResponseArrayOutput() BudgetFilterPropertiesResponseArrayOutput {
	return i.ToBudgetFilterPropertiesResponseArrayOutputWithContext(context.Background())
}

func (i BudgetFilterPropertiesResponseArray) ToBudgetFilterPropertiesResponseArrayOutputWithContext(ctx context.Context) BudgetFilterPropertiesResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetFilterPropertiesResponseArrayOutput)
}

// The Dimensions or Tags to filter a budget by.
type BudgetFilterPropertiesResponseOutput struct{ *pulumi.OutputState }

func (BudgetFilterPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetFilterPropertiesResponse)(nil)).Elem()
}

func (o BudgetFilterPropertiesResponseOutput) ToBudgetFilterPropertiesResponseOutput() BudgetFilterPropertiesResponseOutput {
	return o
}

func (o BudgetFilterPropertiesResponseOutput) ToBudgetFilterPropertiesResponseOutputWithContext(ctx context.Context) BudgetFilterPropertiesResponseOutput {
	return o
}

func (o BudgetFilterPropertiesResponseOutput) ToBudgetFilterPropertiesResponsePtrOutput() BudgetFilterPropertiesResponsePtrOutput {
	return o.ToBudgetFilterPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o BudgetFilterPropertiesResponseOutput) ToBudgetFilterPropertiesResponsePtrOutputWithContext(ctx context.Context) BudgetFilterPropertiesResponsePtrOutput {
	return o.ApplyT(func(v BudgetFilterPropertiesResponse) *BudgetFilterPropertiesResponse {
		return &v
	}).(BudgetFilterPropertiesResponsePtrOutput)
}

// Has comparison expression for a dimension
func (o BudgetFilterPropertiesResponseOutput) Dimensions() BudgetComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v BudgetFilterPropertiesResponse) *BudgetComparisonExpressionResponse { return v.Dimensions }).(BudgetComparisonExpressionResponsePtrOutput)
}

// Has comparison expression for a tag
func (o BudgetFilterPropertiesResponseOutput) Tags() BudgetComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v BudgetFilterPropertiesResponse) *BudgetComparisonExpressionResponse { return v.Tags }).(BudgetComparisonExpressionResponsePtrOutput)
}

type BudgetFilterPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (BudgetFilterPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetFilterPropertiesResponse)(nil)).Elem()
}

func (o BudgetFilterPropertiesResponsePtrOutput) ToBudgetFilterPropertiesResponsePtrOutput() BudgetFilterPropertiesResponsePtrOutput {
	return o
}

func (o BudgetFilterPropertiesResponsePtrOutput) ToBudgetFilterPropertiesResponsePtrOutputWithContext(ctx context.Context) BudgetFilterPropertiesResponsePtrOutput {
	return o
}

func (o BudgetFilterPropertiesResponsePtrOutput) Elem() BudgetFilterPropertiesResponseOutput {
	return o.ApplyT(func(v *BudgetFilterPropertiesResponse) BudgetFilterPropertiesResponse { return *v }).(BudgetFilterPropertiesResponseOutput)
}

// Has comparison expression for a dimension
func (o BudgetFilterPropertiesResponsePtrOutput) Dimensions() BudgetComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *BudgetFilterPropertiesResponse) *BudgetComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.Dimensions
	}).(BudgetComparisonExpressionResponsePtrOutput)
}

// Has comparison expression for a tag
func (o BudgetFilterPropertiesResponsePtrOutput) Tags() BudgetComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *BudgetFilterPropertiesResponse) *BudgetComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(BudgetComparisonExpressionResponsePtrOutput)
}

type BudgetFilterPropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (BudgetFilterPropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BudgetFilterPropertiesResponse)(nil)).Elem()
}

func (o BudgetFilterPropertiesResponseArrayOutput) ToBudgetFilterPropertiesResponseArrayOutput() BudgetFilterPropertiesResponseArrayOutput {
	return o
}

func (o BudgetFilterPropertiesResponseArrayOutput) ToBudgetFilterPropertiesResponseArrayOutputWithContext(ctx context.Context) BudgetFilterPropertiesResponseArrayOutput {
	return o
}

func (o BudgetFilterPropertiesResponseArrayOutput) Index(i pulumi.IntInput) BudgetFilterPropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BudgetFilterPropertiesResponse {
		return vs[0].([]BudgetFilterPropertiesResponse)[vs[1].(int)]
	}).(BudgetFilterPropertiesResponseOutput)
}

// May be used to filter budgets by resource group, resource, or meter.
type BudgetFilterResponse struct {
	// The logical "AND" expression. Must have at least 2 items.
	And []BudgetFilterPropertiesResponse `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimensions *BudgetComparisonExpressionResponse `pulumi:"dimensions"`
	// The logical "NOT" expression.
	Not *BudgetFilterPropertiesResponse `pulumi:"not"`
	// Has comparison expression for a tag
	Tags *BudgetComparisonExpressionResponse `pulumi:"tags"`
}

// BudgetFilterResponseInput is an input type that accepts BudgetFilterResponseArgs and BudgetFilterResponseOutput values.
// You can construct a concrete instance of `BudgetFilterResponseInput` via:
//
//          BudgetFilterResponseArgs{...}
type BudgetFilterResponseInput interface {
	pulumi.Input

	ToBudgetFilterResponseOutput() BudgetFilterResponseOutput
	ToBudgetFilterResponseOutputWithContext(context.Context) BudgetFilterResponseOutput
}

// May be used to filter budgets by resource group, resource, or meter.
type BudgetFilterResponseArgs struct {
	// The logical "AND" expression. Must have at least 2 items.
	And BudgetFilterPropertiesResponseArrayInput `pulumi:"and"`
	// Has comparison expression for a dimension
	Dimensions BudgetComparisonExpressionResponsePtrInput `pulumi:"dimensions"`
	// The logical "NOT" expression.
	Not BudgetFilterPropertiesResponsePtrInput `pulumi:"not"`
	// Has comparison expression for a tag
	Tags BudgetComparisonExpressionResponsePtrInput `pulumi:"tags"`
}

func (BudgetFilterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetFilterResponse)(nil)).Elem()
}

func (i BudgetFilterResponseArgs) ToBudgetFilterResponseOutput() BudgetFilterResponseOutput {
	return i.ToBudgetFilterResponseOutputWithContext(context.Background())
}

func (i BudgetFilterResponseArgs) ToBudgetFilterResponseOutputWithContext(ctx context.Context) BudgetFilterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetFilterResponseOutput)
}

func (i BudgetFilterResponseArgs) ToBudgetFilterResponsePtrOutput() BudgetFilterResponsePtrOutput {
	return i.ToBudgetFilterResponsePtrOutputWithContext(context.Background())
}

func (i BudgetFilterResponseArgs) ToBudgetFilterResponsePtrOutputWithContext(ctx context.Context) BudgetFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetFilterResponseOutput).ToBudgetFilterResponsePtrOutputWithContext(ctx)
}

// BudgetFilterResponsePtrInput is an input type that accepts BudgetFilterResponseArgs, BudgetFilterResponsePtr and BudgetFilterResponsePtrOutput values.
// You can construct a concrete instance of `BudgetFilterResponsePtrInput` via:
//
//          BudgetFilterResponseArgs{...}
//
//  or:
//
//          nil
type BudgetFilterResponsePtrInput interface {
	pulumi.Input

	ToBudgetFilterResponsePtrOutput() BudgetFilterResponsePtrOutput
	ToBudgetFilterResponsePtrOutputWithContext(context.Context) BudgetFilterResponsePtrOutput
}

type budgetFilterResponsePtrType BudgetFilterResponseArgs

func BudgetFilterResponsePtr(v *BudgetFilterResponseArgs) BudgetFilterResponsePtrInput {
	return (*budgetFilterResponsePtrType)(v)
}

func (*budgetFilterResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetFilterResponse)(nil)).Elem()
}

func (i *budgetFilterResponsePtrType) ToBudgetFilterResponsePtrOutput() BudgetFilterResponsePtrOutput {
	return i.ToBudgetFilterResponsePtrOutputWithContext(context.Background())
}

func (i *budgetFilterResponsePtrType) ToBudgetFilterResponsePtrOutputWithContext(ctx context.Context) BudgetFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetFilterResponsePtrOutput)
}

// May be used to filter budgets by resource group, resource, or meter.
type BudgetFilterResponseOutput struct{ *pulumi.OutputState }

func (BudgetFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetFilterResponse)(nil)).Elem()
}

func (o BudgetFilterResponseOutput) ToBudgetFilterResponseOutput() BudgetFilterResponseOutput {
	return o
}

func (o BudgetFilterResponseOutput) ToBudgetFilterResponseOutputWithContext(ctx context.Context) BudgetFilterResponseOutput {
	return o
}

func (o BudgetFilterResponseOutput) ToBudgetFilterResponsePtrOutput() BudgetFilterResponsePtrOutput {
	return o.ToBudgetFilterResponsePtrOutputWithContext(context.Background())
}

func (o BudgetFilterResponseOutput) ToBudgetFilterResponsePtrOutputWithContext(ctx context.Context) BudgetFilterResponsePtrOutput {
	return o.ApplyT(func(v BudgetFilterResponse) *BudgetFilterResponse {
		return &v
	}).(BudgetFilterResponsePtrOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o BudgetFilterResponseOutput) And() BudgetFilterPropertiesResponseArrayOutput {
	return o.ApplyT(func(v BudgetFilterResponse) []BudgetFilterPropertiesResponse { return v.And }).(BudgetFilterPropertiesResponseArrayOutput)
}

// Has comparison expression for a dimension
func (o BudgetFilterResponseOutput) Dimensions() BudgetComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v BudgetFilterResponse) *BudgetComparisonExpressionResponse { return v.Dimensions }).(BudgetComparisonExpressionResponsePtrOutput)
}

// The logical "NOT" expression.
func (o BudgetFilterResponseOutput) Not() BudgetFilterPropertiesResponsePtrOutput {
	return o.ApplyT(func(v BudgetFilterResponse) *BudgetFilterPropertiesResponse { return v.Not }).(BudgetFilterPropertiesResponsePtrOutput)
}

// Has comparison expression for a tag
func (o BudgetFilterResponseOutput) Tags() BudgetComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v BudgetFilterResponse) *BudgetComparisonExpressionResponse { return v.Tags }).(BudgetComparisonExpressionResponsePtrOutput)
}

type BudgetFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (BudgetFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetFilterResponse)(nil)).Elem()
}

func (o BudgetFilterResponsePtrOutput) ToBudgetFilterResponsePtrOutput() BudgetFilterResponsePtrOutput {
	return o
}

func (o BudgetFilterResponsePtrOutput) ToBudgetFilterResponsePtrOutputWithContext(ctx context.Context) BudgetFilterResponsePtrOutput {
	return o
}

func (o BudgetFilterResponsePtrOutput) Elem() BudgetFilterResponseOutput {
	return o.ApplyT(func(v *BudgetFilterResponse) BudgetFilterResponse { return *v }).(BudgetFilterResponseOutput)
}

// The logical "AND" expression. Must have at least 2 items.
func (o BudgetFilterResponsePtrOutput) And() BudgetFilterPropertiesResponseArrayOutput {
	return o.ApplyT(func(v *BudgetFilterResponse) []BudgetFilterPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.And
	}).(BudgetFilterPropertiesResponseArrayOutput)
}

// Has comparison expression for a dimension
func (o BudgetFilterResponsePtrOutput) Dimensions() BudgetComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *BudgetFilterResponse) *BudgetComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.Dimensions
	}).(BudgetComparisonExpressionResponsePtrOutput)
}

// The logical "NOT" expression.
func (o BudgetFilterResponsePtrOutput) Not() BudgetFilterPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *BudgetFilterResponse) *BudgetFilterPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.Not
	}).(BudgetFilterPropertiesResponsePtrOutput)
}

// Has comparison expression for a tag
func (o BudgetFilterResponsePtrOutput) Tags() BudgetComparisonExpressionResponsePtrOutput {
	return o.ApplyT(func(v *BudgetFilterResponse) *BudgetComparisonExpressionResponse {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(BudgetComparisonExpressionResponsePtrOutput)
}

// The properties of the budget.
type BudgetProperties struct {
	// The total amount of cost to track with the budget
	Amount float64 `pulumi:"amount"`
	// The category of the budget, whether the budget tracks cost or usage.
	Category string `pulumi:"category"`
	// May be used to filter budgets by resource group, resource, or meter.
	Filter *BudgetFilter `pulumi:"filter"`
	// Dictionary of notifications associated with the budget. Budget can have up to five notifications.
	Notifications map[string]string `pulumi:"notifications"`
	// The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter, and BillingAnnual are only supported by WD customers
	TimeGrain string `pulumi:"timeGrain"`
	// Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than twelve months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
	TimePeriod BudgetTimePeriod `pulumi:"timePeriod"`
}

// BudgetPropertiesInput is an input type that accepts BudgetPropertiesArgs and BudgetPropertiesOutput values.
// You can construct a concrete instance of `BudgetPropertiesInput` via:
//
//          BudgetPropertiesArgs{...}
type BudgetPropertiesInput interface {
	pulumi.Input

	ToBudgetPropertiesOutput() BudgetPropertiesOutput
	ToBudgetPropertiesOutputWithContext(context.Context) BudgetPropertiesOutput
}

// The properties of the budget.
type BudgetPropertiesArgs struct {
	// The total amount of cost to track with the budget
	Amount pulumi.Float64Input `pulumi:"amount"`
	// The category of the budget, whether the budget tracks cost or usage.
	Category pulumi.StringInput `pulumi:"category"`
	// May be used to filter budgets by resource group, resource, or meter.
	Filter BudgetFilterPtrInput `pulumi:"filter"`
	// Dictionary of notifications associated with the budget. Budget can have up to five notifications.
	Notifications pulumi.StringMapInput `pulumi:"notifications"`
	// The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter, and BillingAnnual are only supported by WD customers
	TimeGrain pulumi.StringInput `pulumi:"timeGrain"`
	// Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than twelve months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
	TimePeriod BudgetTimePeriodInput `pulumi:"timePeriod"`
}

func (BudgetPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetProperties)(nil)).Elem()
}

func (i BudgetPropertiesArgs) ToBudgetPropertiesOutput() BudgetPropertiesOutput {
	return i.ToBudgetPropertiesOutputWithContext(context.Background())
}

func (i BudgetPropertiesArgs) ToBudgetPropertiesOutputWithContext(ctx context.Context) BudgetPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetPropertiesOutput)
}

func (i BudgetPropertiesArgs) ToBudgetPropertiesPtrOutput() BudgetPropertiesPtrOutput {
	return i.ToBudgetPropertiesPtrOutputWithContext(context.Background())
}

func (i BudgetPropertiesArgs) ToBudgetPropertiesPtrOutputWithContext(ctx context.Context) BudgetPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetPropertiesOutput).ToBudgetPropertiesPtrOutputWithContext(ctx)
}

// BudgetPropertiesPtrInput is an input type that accepts BudgetPropertiesArgs, BudgetPropertiesPtr and BudgetPropertiesPtrOutput values.
// You can construct a concrete instance of `BudgetPropertiesPtrInput` via:
//
//          BudgetPropertiesArgs{...}
//
//  or:
//
//          nil
type BudgetPropertiesPtrInput interface {
	pulumi.Input

	ToBudgetPropertiesPtrOutput() BudgetPropertiesPtrOutput
	ToBudgetPropertiesPtrOutputWithContext(context.Context) BudgetPropertiesPtrOutput
}

type budgetPropertiesPtrType BudgetPropertiesArgs

func BudgetPropertiesPtr(v *BudgetPropertiesArgs) BudgetPropertiesPtrInput {
	return (*budgetPropertiesPtrType)(v)
}

func (*budgetPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetProperties)(nil)).Elem()
}

func (i *budgetPropertiesPtrType) ToBudgetPropertiesPtrOutput() BudgetPropertiesPtrOutput {
	return i.ToBudgetPropertiesPtrOutputWithContext(context.Background())
}

func (i *budgetPropertiesPtrType) ToBudgetPropertiesPtrOutputWithContext(ctx context.Context) BudgetPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetPropertiesPtrOutput)
}

// The properties of the budget.
type BudgetPropertiesOutput struct{ *pulumi.OutputState }

func (BudgetPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetProperties)(nil)).Elem()
}

func (o BudgetPropertiesOutput) ToBudgetPropertiesOutput() BudgetPropertiesOutput {
	return o
}

func (o BudgetPropertiesOutput) ToBudgetPropertiesOutputWithContext(ctx context.Context) BudgetPropertiesOutput {
	return o
}

func (o BudgetPropertiesOutput) ToBudgetPropertiesPtrOutput() BudgetPropertiesPtrOutput {
	return o.ToBudgetPropertiesPtrOutputWithContext(context.Background())
}

func (o BudgetPropertiesOutput) ToBudgetPropertiesPtrOutputWithContext(ctx context.Context) BudgetPropertiesPtrOutput {
	return o.ApplyT(func(v BudgetProperties) *BudgetProperties {
		return &v
	}).(BudgetPropertiesPtrOutput)
}

// The total amount of cost to track with the budget
func (o BudgetPropertiesOutput) Amount() pulumi.Float64Output {
	return o.ApplyT(func(v BudgetProperties) float64 { return v.Amount }).(pulumi.Float64Output)
}

// The category of the budget, whether the budget tracks cost or usage.
func (o BudgetPropertiesOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetProperties) string { return v.Category }).(pulumi.StringOutput)
}

// May be used to filter budgets by resource group, resource, or meter.
func (o BudgetPropertiesOutput) Filter() BudgetFilterPtrOutput {
	return o.ApplyT(func(v BudgetProperties) *BudgetFilter { return v.Filter }).(BudgetFilterPtrOutput)
}

// Dictionary of notifications associated with the budget. Budget can have up to five notifications.
func (o BudgetPropertiesOutput) Notifications() pulumi.StringMapOutput {
	return o.ApplyT(func(v BudgetProperties) map[string]string { return v.Notifications }).(pulumi.StringMapOutput)
}

// The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter, and BillingAnnual are only supported by WD customers
func (o BudgetPropertiesOutput) TimeGrain() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetProperties) string { return v.TimeGrain }).(pulumi.StringOutput)
}

// Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than twelve months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
func (o BudgetPropertiesOutput) TimePeriod() BudgetTimePeriodOutput {
	return o.ApplyT(func(v BudgetProperties) BudgetTimePeriod { return v.TimePeriod }).(BudgetTimePeriodOutput)
}

type BudgetPropertiesPtrOutput struct{ *pulumi.OutputState }

func (BudgetPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetProperties)(nil)).Elem()
}

func (o BudgetPropertiesPtrOutput) ToBudgetPropertiesPtrOutput() BudgetPropertiesPtrOutput {
	return o
}

func (o BudgetPropertiesPtrOutput) ToBudgetPropertiesPtrOutputWithContext(ctx context.Context) BudgetPropertiesPtrOutput {
	return o
}

func (o BudgetPropertiesPtrOutput) Elem() BudgetPropertiesOutput {
	return o.ApplyT(func(v *BudgetProperties) BudgetProperties { return *v }).(BudgetPropertiesOutput)
}

// The total amount of cost to track with the budget
func (o BudgetPropertiesPtrOutput) Amount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BudgetProperties) *float64 {
		if v == nil {
			return nil
		}
		return &v.Amount
	}).(pulumi.Float64PtrOutput)
}

// The category of the budget, whether the budget tracks cost or usage.
func (o BudgetPropertiesPtrOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Category
	}).(pulumi.StringPtrOutput)
}

// May be used to filter budgets by resource group, resource, or meter.
func (o BudgetPropertiesPtrOutput) Filter() BudgetFilterPtrOutput {
	return o.ApplyT(func(v *BudgetProperties) *BudgetFilter {
		if v == nil {
			return nil
		}
		return v.Filter
	}).(BudgetFilterPtrOutput)
}

// Dictionary of notifications associated with the budget. Budget can have up to five notifications.
func (o BudgetPropertiesPtrOutput) Notifications() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BudgetProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Notifications
	}).(pulumi.StringMapOutput)
}

// The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter, and BillingAnnual are only supported by WD customers
func (o BudgetPropertiesPtrOutput) TimeGrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TimeGrain
	}).(pulumi.StringPtrOutput)
}

// Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than twelve months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
func (o BudgetPropertiesPtrOutput) TimePeriod() BudgetTimePeriodPtrOutput {
	return o.ApplyT(func(v *BudgetProperties) *BudgetTimePeriod {
		if v == nil {
			return nil
		}
		return &v.TimePeriod
	}).(BudgetTimePeriodPtrOutput)
}

// The properties of the budget.
type BudgetPropertiesResponse struct {
	// The total amount of cost to track with the budget
	Amount float64 `pulumi:"amount"`
	// The category of the budget, whether the budget tracks cost or usage.
	Category string `pulumi:"category"`
	// The current amount of cost which is being tracked for a budget.
	CurrentSpend CurrentSpendResponse `pulumi:"currentSpend"`
	// May be used to filter budgets by resource group, resource, or meter.
	Filter *BudgetFilterResponse `pulumi:"filter"`
	// Dictionary of notifications associated with the budget. Budget can have up to five notifications.
	Notifications map[string]string `pulumi:"notifications"`
	// The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter, and BillingAnnual are only supported by WD customers
	TimeGrain string `pulumi:"timeGrain"`
	// Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than twelve months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
	TimePeriod BudgetTimePeriodResponse `pulumi:"timePeriod"`
}

// BudgetPropertiesResponseInput is an input type that accepts BudgetPropertiesResponseArgs and BudgetPropertiesResponseOutput values.
// You can construct a concrete instance of `BudgetPropertiesResponseInput` via:
//
//          BudgetPropertiesResponseArgs{...}
type BudgetPropertiesResponseInput interface {
	pulumi.Input

	ToBudgetPropertiesResponseOutput() BudgetPropertiesResponseOutput
	ToBudgetPropertiesResponseOutputWithContext(context.Context) BudgetPropertiesResponseOutput
}

// The properties of the budget.
type BudgetPropertiesResponseArgs struct {
	// The total amount of cost to track with the budget
	Amount pulumi.Float64Input `pulumi:"amount"`
	// The category of the budget, whether the budget tracks cost or usage.
	Category pulumi.StringInput `pulumi:"category"`
	// The current amount of cost which is being tracked for a budget.
	CurrentSpend CurrentSpendResponseInput `pulumi:"currentSpend"`
	// May be used to filter budgets by resource group, resource, or meter.
	Filter BudgetFilterResponsePtrInput `pulumi:"filter"`
	// Dictionary of notifications associated with the budget. Budget can have up to five notifications.
	Notifications pulumi.StringMapInput `pulumi:"notifications"`
	// The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter, and BillingAnnual are only supported by WD customers
	TimeGrain pulumi.StringInput `pulumi:"timeGrain"`
	// Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than twelve months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
	TimePeriod BudgetTimePeriodResponseInput `pulumi:"timePeriod"`
}

func (BudgetPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetPropertiesResponse)(nil)).Elem()
}

func (i BudgetPropertiesResponseArgs) ToBudgetPropertiesResponseOutput() BudgetPropertiesResponseOutput {
	return i.ToBudgetPropertiesResponseOutputWithContext(context.Background())
}

func (i BudgetPropertiesResponseArgs) ToBudgetPropertiesResponseOutputWithContext(ctx context.Context) BudgetPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetPropertiesResponseOutput)
}

func (i BudgetPropertiesResponseArgs) ToBudgetPropertiesResponsePtrOutput() BudgetPropertiesResponsePtrOutput {
	return i.ToBudgetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i BudgetPropertiesResponseArgs) ToBudgetPropertiesResponsePtrOutputWithContext(ctx context.Context) BudgetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetPropertiesResponseOutput).ToBudgetPropertiesResponsePtrOutputWithContext(ctx)
}

// BudgetPropertiesResponsePtrInput is an input type that accepts BudgetPropertiesResponseArgs, BudgetPropertiesResponsePtr and BudgetPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `BudgetPropertiesResponsePtrInput` via:
//
//          BudgetPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type BudgetPropertiesResponsePtrInput interface {
	pulumi.Input

	ToBudgetPropertiesResponsePtrOutput() BudgetPropertiesResponsePtrOutput
	ToBudgetPropertiesResponsePtrOutputWithContext(context.Context) BudgetPropertiesResponsePtrOutput
}

type budgetPropertiesResponsePtrType BudgetPropertiesResponseArgs

func BudgetPropertiesResponsePtr(v *BudgetPropertiesResponseArgs) BudgetPropertiesResponsePtrInput {
	return (*budgetPropertiesResponsePtrType)(v)
}

func (*budgetPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetPropertiesResponse)(nil)).Elem()
}

func (i *budgetPropertiesResponsePtrType) ToBudgetPropertiesResponsePtrOutput() BudgetPropertiesResponsePtrOutput {
	return i.ToBudgetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *budgetPropertiesResponsePtrType) ToBudgetPropertiesResponsePtrOutputWithContext(ctx context.Context) BudgetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetPropertiesResponsePtrOutput)
}

// The properties of the budget.
type BudgetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (BudgetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetPropertiesResponse)(nil)).Elem()
}

func (o BudgetPropertiesResponseOutput) ToBudgetPropertiesResponseOutput() BudgetPropertiesResponseOutput {
	return o
}

func (o BudgetPropertiesResponseOutput) ToBudgetPropertiesResponseOutputWithContext(ctx context.Context) BudgetPropertiesResponseOutput {
	return o
}

func (o BudgetPropertiesResponseOutput) ToBudgetPropertiesResponsePtrOutput() BudgetPropertiesResponsePtrOutput {
	return o.ToBudgetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o BudgetPropertiesResponseOutput) ToBudgetPropertiesResponsePtrOutputWithContext(ctx context.Context) BudgetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v BudgetPropertiesResponse) *BudgetPropertiesResponse {
		return &v
	}).(BudgetPropertiesResponsePtrOutput)
}

// The total amount of cost to track with the budget
func (o BudgetPropertiesResponseOutput) Amount() pulumi.Float64Output {
	return o.ApplyT(func(v BudgetPropertiesResponse) float64 { return v.Amount }).(pulumi.Float64Output)
}

// The category of the budget, whether the budget tracks cost or usage.
func (o BudgetPropertiesResponseOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetPropertiesResponse) string { return v.Category }).(pulumi.StringOutput)
}

// The current amount of cost which is being tracked for a budget.
func (o BudgetPropertiesResponseOutput) CurrentSpend() CurrentSpendResponseOutput {
	return o.ApplyT(func(v BudgetPropertiesResponse) CurrentSpendResponse { return v.CurrentSpend }).(CurrentSpendResponseOutput)
}

// May be used to filter budgets by resource group, resource, or meter.
func (o BudgetPropertiesResponseOutput) Filter() BudgetFilterResponsePtrOutput {
	return o.ApplyT(func(v BudgetPropertiesResponse) *BudgetFilterResponse { return v.Filter }).(BudgetFilterResponsePtrOutput)
}

// Dictionary of notifications associated with the budget. Budget can have up to five notifications.
func (o BudgetPropertiesResponseOutput) Notifications() pulumi.StringMapOutput {
	return o.ApplyT(func(v BudgetPropertiesResponse) map[string]string { return v.Notifications }).(pulumi.StringMapOutput)
}

// The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter, and BillingAnnual are only supported by WD customers
func (o BudgetPropertiesResponseOutput) TimeGrain() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetPropertiesResponse) string { return v.TimeGrain }).(pulumi.StringOutput)
}

// Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than twelve months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
func (o BudgetPropertiesResponseOutput) TimePeriod() BudgetTimePeriodResponseOutput {
	return o.ApplyT(func(v BudgetPropertiesResponse) BudgetTimePeriodResponse { return v.TimePeriod }).(BudgetTimePeriodResponseOutput)
}

type BudgetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (BudgetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetPropertiesResponse)(nil)).Elem()
}

func (o BudgetPropertiesResponsePtrOutput) ToBudgetPropertiesResponsePtrOutput() BudgetPropertiesResponsePtrOutput {
	return o
}

func (o BudgetPropertiesResponsePtrOutput) ToBudgetPropertiesResponsePtrOutputWithContext(ctx context.Context) BudgetPropertiesResponsePtrOutput {
	return o
}

func (o BudgetPropertiesResponsePtrOutput) Elem() BudgetPropertiesResponseOutput {
	return o.ApplyT(func(v *BudgetPropertiesResponse) BudgetPropertiesResponse { return *v }).(BudgetPropertiesResponseOutput)
}

// The total amount of cost to track with the budget
func (o BudgetPropertiesResponsePtrOutput) Amount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BudgetPropertiesResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Amount
	}).(pulumi.Float64PtrOutput)
}

// The category of the budget, whether the budget tracks cost or usage.
func (o BudgetPropertiesResponsePtrOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Category
	}).(pulumi.StringPtrOutput)
}

// The current amount of cost which is being tracked for a budget.
func (o BudgetPropertiesResponsePtrOutput) CurrentSpend() CurrentSpendResponsePtrOutput {
	return o.ApplyT(func(v *BudgetPropertiesResponse) *CurrentSpendResponse {
		if v == nil {
			return nil
		}
		return &v.CurrentSpend
	}).(CurrentSpendResponsePtrOutput)
}

// May be used to filter budgets by resource group, resource, or meter.
func (o BudgetPropertiesResponsePtrOutput) Filter() BudgetFilterResponsePtrOutput {
	return o.ApplyT(func(v *BudgetPropertiesResponse) *BudgetFilterResponse {
		if v == nil {
			return nil
		}
		return v.Filter
	}).(BudgetFilterResponsePtrOutput)
}

// Dictionary of notifications associated with the budget. Budget can have up to five notifications.
func (o BudgetPropertiesResponsePtrOutput) Notifications() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BudgetPropertiesResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Notifications
	}).(pulumi.StringMapOutput)
}

// The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter, and BillingAnnual are only supported by WD customers
func (o BudgetPropertiesResponsePtrOutput) TimeGrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TimeGrain
	}).(pulumi.StringPtrOutput)
}

// Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than twelve months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
func (o BudgetPropertiesResponsePtrOutput) TimePeriod() BudgetTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v *BudgetPropertiesResponse) *BudgetTimePeriodResponse {
		if v == nil {
			return nil
		}
		return &v.TimePeriod
	}).(BudgetTimePeriodResponsePtrOutput)
}

// The start and end date for a budget.
type BudgetTimePeriod struct {
	// The end date for the budget. If not provided, we default this to 10 years from the start date.
	EndDate *string `pulumi:"endDate"`
	// The start date for the budget.
	StartDate string `pulumi:"startDate"`
}

// BudgetTimePeriodInput is an input type that accepts BudgetTimePeriodArgs and BudgetTimePeriodOutput values.
// You can construct a concrete instance of `BudgetTimePeriodInput` via:
//
//          BudgetTimePeriodArgs{...}
type BudgetTimePeriodInput interface {
	pulumi.Input

	ToBudgetTimePeriodOutput() BudgetTimePeriodOutput
	ToBudgetTimePeriodOutputWithContext(context.Context) BudgetTimePeriodOutput
}

// The start and end date for a budget.
type BudgetTimePeriodArgs struct {
	// The end date for the budget. If not provided, we default this to 10 years from the start date.
	EndDate pulumi.StringPtrInput `pulumi:"endDate"`
	// The start date for the budget.
	StartDate pulumi.StringInput `pulumi:"startDate"`
}

func (BudgetTimePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetTimePeriod)(nil)).Elem()
}

func (i BudgetTimePeriodArgs) ToBudgetTimePeriodOutput() BudgetTimePeriodOutput {
	return i.ToBudgetTimePeriodOutputWithContext(context.Background())
}

func (i BudgetTimePeriodArgs) ToBudgetTimePeriodOutputWithContext(ctx context.Context) BudgetTimePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetTimePeriodOutput)
}

func (i BudgetTimePeriodArgs) ToBudgetTimePeriodPtrOutput() BudgetTimePeriodPtrOutput {
	return i.ToBudgetTimePeriodPtrOutputWithContext(context.Background())
}

func (i BudgetTimePeriodArgs) ToBudgetTimePeriodPtrOutputWithContext(ctx context.Context) BudgetTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetTimePeriodOutput).ToBudgetTimePeriodPtrOutputWithContext(ctx)
}

// BudgetTimePeriodPtrInput is an input type that accepts BudgetTimePeriodArgs, BudgetTimePeriodPtr and BudgetTimePeriodPtrOutput values.
// You can construct a concrete instance of `BudgetTimePeriodPtrInput` via:
//
//          BudgetTimePeriodArgs{...}
//
//  or:
//
//          nil
type BudgetTimePeriodPtrInput interface {
	pulumi.Input

	ToBudgetTimePeriodPtrOutput() BudgetTimePeriodPtrOutput
	ToBudgetTimePeriodPtrOutputWithContext(context.Context) BudgetTimePeriodPtrOutput
}

type budgetTimePeriodPtrType BudgetTimePeriodArgs

func BudgetTimePeriodPtr(v *BudgetTimePeriodArgs) BudgetTimePeriodPtrInput {
	return (*budgetTimePeriodPtrType)(v)
}

func (*budgetTimePeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetTimePeriod)(nil)).Elem()
}

func (i *budgetTimePeriodPtrType) ToBudgetTimePeriodPtrOutput() BudgetTimePeriodPtrOutput {
	return i.ToBudgetTimePeriodPtrOutputWithContext(context.Background())
}

func (i *budgetTimePeriodPtrType) ToBudgetTimePeriodPtrOutputWithContext(ctx context.Context) BudgetTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetTimePeriodPtrOutput)
}

// The start and end date for a budget.
type BudgetTimePeriodOutput struct{ *pulumi.OutputState }

func (BudgetTimePeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetTimePeriod)(nil)).Elem()
}

func (o BudgetTimePeriodOutput) ToBudgetTimePeriodOutput() BudgetTimePeriodOutput {
	return o
}

func (o BudgetTimePeriodOutput) ToBudgetTimePeriodOutputWithContext(ctx context.Context) BudgetTimePeriodOutput {
	return o
}

func (o BudgetTimePeriodOutput) ToBudgetTimePeriodPtrOutput() BudgetTimePeriodPtrOutput {
	return o.ToBudgetTimePeriodPtrOutputWithContext(context.Background())
}

func (o BudgetTimePeriodOutput) ToBudgetTimePeriodPtrOutputWithContext(ctx context.Context) BudgetTimePeriodPtrOutput {
	return o.ApplyT(func(v BudgetTimePeriod) *BudgetTimePeriod {
		return &v
	}).(BudgetTimePeriodPtrOutput)
}

// The end date for the budget. If not provided, we default this to 10 years from the start date.
func (o BudgetTimePeriodOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetTimePeriod) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// The start date for the budget.
func (o BudgetTimePeriodOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetTimePeriod) string { return v.StartDate }).(pulumi.StringOutput)
}

type BudgetTimePeriodPtrOutput struct{ *pulumi.OutputState }

func (BudgetTimePeriodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetTimePeriod)(nil)).Elem()
}

func (o BudgetTimePeriodPtrOutput) ToBudgetTimePeriodPtrOutput() BudgetTimePeriodPtrOutput {
	return o
}

func (o BudgetTimePeriodPtrOutput) ToBudgetTimePeriodPtrOutputWithContext(ctx context.Context) BudgetTimePeriodPtrOutput {
	return o
}

func (o BudgetTimePeriodPtrOutput) Elem() BudgetTimePeriodOutput {
	return o.ApplyT(func(v *BudgetTimePeriod) BudgetTimePeriod { return *v }).(BudgetTimePeriodOutput)
}

// The end date for the budget. If not provided, we default this to 10 years from the start date.
func (o BudgetTimePeriodPtrOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetTimePeriod) *string {
		if v == nil {
			return nil
		}
		return v.EndDate
	}).(pulumi.StringPtrOutput)
}

// The start date for the budget.
func (o BudgetTimePeriodPtrOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetTimePeriod) *string {
		if v == nil {
			return nil
		}
		return &v.StartDate
	}).(pulumi.StringPtrOutput)
}

// The start and end date for a budget.
type BudgetTimePeriodResponse struct {
	// The end date for the budget. If not provided, we default this to 10 years from the start date.
	EndDate *string `pulumi:"endDate"`
	// The start date for the budget.
	StartDate string `pulumi:"startDate"`
}

// BudgetTimePeriodResponseInput is an input type that accepts BudgetTimePeriodResponseArgs and BudgetTimePeriodResponseOutput values.
// You can construct a concrete instance of `BudgetTimePeriodResponseInput` via:
//
//          BudgetTimePeriodResponseArgs{...}
type BudgetTimePeriodResponseInput interface {
	pulumi.Input

	ToBudgetTimePeriodResponseOutput() BudgetTimePeriodResponseOutput
	ToBudgetTimePeriodResponseOutputWithContext(context.Context) BudgetTimePeriodResponseOutput
}

// The start and end date for a budget.
type BudgetTimePeriodResponseArgs struct {
	// The end date for the budget. If not provided, we default this to 10 years from the start date.
	EndDate pulumi.StringPtrInput `pulumi:"endDate"`
	// The start date for the budget.
	StartDate pulumi.StringInput `pulumi:"startDate"`
}

func (BudgetTimePeriodResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetTimePeriodResponse)(nil)).Elem()
}

func (i BudgetTimePeriodResponseArgs) ToBudgetTimePeriodResponseOutput() BudgetTimePeriodResponseOutput {
	return i.ToBudgetTimePeriodResponseOutputWithContext(context.Background())
}

func (i BudgetTimePeriodResponseArgs) ToBudgetTimePeriodResponseOutputWithContext(ctx context.Context) BudgetTimePeriodResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetTimePeriodResponseOutput)
}

func (i BudgetTimePeriodResponseArgs) ToBudgetTimePeriodResponsePtrOutput() BudgetTimePeriodResponsePtrOutput {
	return i.ToBudgetTimePeriodResponsePtrOutputWithContext(context.Background())
}

func (i BudgetTimePeriodResponseArgs) ToBudgetTimePeriodResponsePtrOutputWithContext(ctx context.Context) BudgetTimePeriodResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetTimePeriodResponseOutput).ToBudgetTimePeriodResponsePtrOutputWithContext(ctx)
}

// BudgetTimePeriodResponsePtrInput is an input type that accepts BudgetTimePeriodResponseArgs, BudgetTimePeriodResponsePtr and BudgetTimePeriodResponsePtrOutput values.
// You can construct a concrete instance of `BudgetTimePeriodResponsePtrInput` via:
//
//          BudgetTimePeriodResponseArgs{...}
//
//  or:
//
//          nil
type BudgetTimePeriodResponsePtrInput interface {
	pulumi.Input

	ToBudgetTimePeriodResponsePtrOutput() BudgetTimePeriodResponsePtrOutput
	ToBudgetTimePeriodResponsePtrOutputWithContext(context.Context) BudgetTimePeriodResponsePtrOutput
}

type budgetTimePeriodResponsePtrType BudgetTimePeriodResponseArgs

func BudgetTimePeriodResponsePtr(v *BudgetTimePeriodResponseArgs) BudgetTimePeriodResponsePtrInput {
	return (*budgetTimePeriodResponsePtrType)(v)
}

func (*budgetTimePeriodResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetTimePeriodResponse)(nil)).Elem()
}

func (i *budgetTimePeriodResponsePtrType) ToBudgetTimePeriodResponsePtrOutput() BudgetTimePeriodResponsePtrOutput {
	return i.ToBudgetTimePeriodResponsePtrOutputWithContext(context.Background())
}

func (i *budgetTimePeriodResponsePtrType) ToBudgetTimePeriodResponsePtrOutputWithContext(ctx context.Context) BudgetTimePeriodResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetTimePeriodResponsePtrOutput)
}

// The start and end date for a budget.
type BudgetTimePeriodResponseOutput struct{ *pulumi.OutputState }

func (BudgetTimePeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetTimePeriodResponse)(nil)).Elem()
}

func (o BudgetTimePeriodResponseOutput) ToBudgetTimePeriodResponseOutput() BudgetTimePeriodResponseOutput {
	return o
}

func (o BudgetTimePeriodResponseOutput) ToBudgetTimePeriodResponseOutputWithContext(ctx context.Context) BudgetTimePeriodResponseOutput {
	return o
}

func (o BudgetTimePeriodResponseOutput) ToBudgetTimePeriodResponsePtrOutput() BudgetTimePeriodResponsePtrOutput {
	return o.ToBudgetTimePeriodResponsePtrOutputWithContext(context.Background())
}

func (o BudgetTimePeriodResponseOutput) ToBudgetTimePeriodResponsePtrOutputWithContext(ctx context.Context) BudgetTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v BudgetTimePeriodResponse) *BudgetTimePeriodResponse {
		return &v
	}).(BudgetTimePeriodResponsePtrOutput)
}

// The end date for the budget. If not provided, we default this to 10 years from the start date.
func (o BudgetTimePeriodResponseOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetTimePeriodResponse) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// The start date for the budget.
func (o BudgetTimePeriodResponseOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetTimePeriodResponse) string { return v.StartDate }).(pulumi.StringOutput)
}

type BudgetTimePeriodResponsePtrOutput struct{ *pulumi.OutputState }

func (BudgetTimePeriodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetTimePeriodResponse)(nil)).Elem()
}

func (o BudgetTimePeriodResponsePtrOutput) ToBudgetTimePeriodResponsePtrOutput() BudgetTimePeriodResponsePtrOutput {
	return o
}

func (o BudgetTimePeriodResponsePtrOutput) ToBudgetTimePeriodResponsePtrOutputWithContext(ctx context.Context) BudgetTimePeriodResponsePtrOutput {
	return o
}

func (o BudgetTimePeriodResponsePtrOutput) Elem() BudgetTimePeriodResponseOutput {
	return o.ApplyT(func(v *BudgetTimePeriodResponse) BudgetTimePeriodResponse { return *v }).(BudgetTimePeriodResponseOutput)
}

// The end date for the budget. If not provided, we default this to 10 years from the start date.
func (o BudgetTimePeriodResponsePtrOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndDate
	}).(pulumi.StringPtrOutput)
}

// The start date for the budget.
func (o BudgetTimePeriodResponsePtrOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartDate
	}).(pulumi.StringPtrOutput)
}

// The current amount of cost which is being tracked for a budget.
type CurrentSpend struct {
}

// CurrentSpendInput is an input type that accepts CurrentSpendArgs and CurrentSpendOutput values.
// You can construct a concrete instance of `CurrentSpendInput` via:
//
//          CurrentSpendArgs{...}
type CurrentSpendInput interface {
	pulumi.Input

	ToCurrentSpendOutput() CurrentSpendOutput
	ToCurrentSpendOutputWithContext(context.Context) CurrentSpendOutput
}

// The current amount of cost which is being tracked for a budget.
type CurrentSpendArgs struct {
}

func (CurrentSpendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CurrentSpend)(nil)).Elem()
}

func (i CurrentSpendArgs) ToCurrentSpendOutput() CurrentSpendOutput {
	return i.ToCurrentSpendOutputWithContext(context.Background())
}

func (i CurrentSpendArgs) ToCurrentSpendOutputWithContext(ctx context.Context) CurrentSpendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CurrentSpendOutput)
}

// The current amount of cost which is being tracked for a budget.
type CurrentSpendOutput struct{ *pulumi.OutputState }

func (CurrentSpendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CurrentSpend)(nil)).Elem()
}

func (o CurrentSpendOutput) ToCurrentSpendOutput() CurrentSpendOutput {
	return o
}

func (o CurrentSpendOutput) ToCurrentSpendOutputWithContext(ctx context.Context) CurrentSpendOutput {
	return o
}

// The current amount of cost which is being tracked for a budget.
type CurrentSpendResponse struct {
	// The total amount of cost which is being tracked by the budget.
	Amount float64 `pulumi:"amount"`
	// The unit of measure for the budget amount.
	Unit string `pulumi:"unit"`
}

// CurrentSpendResponseInput is an input type that accepts CurrentSpendResponseArgs and CurrentSpendResponseOutput values.
// You can construct a concrete instance of `CurrentSpendResponseInput` via:
//
//          CurrentSpendResponseArgs{...}
type CurrentSpendResponseInput interface {
	pulumi.Input

	ToCurrentSpendResponseOutput() CurrentSpendResponseOutput
	ToCurrentSpendResponseOutputWithContext(context.Context) CurrentSpendResponseOutput
}

// The current amount of cost which is being tracked for a budget.
type CurrentSpendResponseArgs struct {
	// The total amount of cost which is being tracked by the budget.
	Amount pulumi.Float64Input `pulumi:"amount"`
	// The unit of measure for the budget amount.
	Unit pulumi.StringInput `pulumi:"unit"`
}

func (CurrentSpendResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CurrentSpendResponse)(nil)).Elem()
}

func (i CurrentSpendResponseArgs) ToCurrentSpendResponseOutput() CurrentSpendResponseOutput {
	return i.ToCurrentSpendResponseOutputWithContext(context.Background())
}

func (i CurrentSpendResponseArgs) ToCurrentSpendResponseOutputWithContext(ctx context.Context) CurrentSpendResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CurrentSpendResponseOutput)
}

func (i CurrentSpendResponseArgs) ToCurrentSpendResponsePtrOutput() CurrentSpendResponsePtrOutput {
	return i.ToCurrentSpendResponsePtrOutputWithContext(context.Background())
}

func (i CurrentSpendResponseArgs) ToCurrentSpendResponsePtrOutputWithContext(ctx context.Context) CurrentSpendResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CurrentSpendResponseOutput).ToCurrentSpendResponsePtrOutputWithContext(ctx)
}

// CurrentSpendResponsePtrInput is an input type that accepts CurrentSpendResponseArgs, CurrentSpendResponsePtr and CurrentSpendResponsePtrOutput values.
// You can construct a concrete instance of `CurrentSpendResponsePtrInput` via:
//
//          CurrentSpendResponseArgs{...}
//
//  or:
//
//          nil
type CurrentSpendResponsePtrInput interface {
	pulumi.Input

	ToCurrentSpendResponsePtrOutput() CurrentSpendResponsePtrOutput
	ToCurrentSpendResponsePtrOutputWithContext(context.Context) CurrentSpendResponsePtrOutput
}

type currentSpendResponsePtrType CurrentSpendResponseArgs

func CurrentSpendResponsePtr(v *CurrentSpendResponseArgs) CurrentSpendResponsePtrInput {
	return (*currentSpendResponsePtrType)(v)
}

func (*currentSpendResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CurrentSpendResponse)(nil)).Elem()
}

func (i *currentSpendResponsePtrType) ToCurrentSpendResponsePtrOutput() CurrentSpendResponsePtrOutput {
	return i.ToCurrentSpendResponsePtrOutputWithContext(context.Background())
}

func (i *currentSpendResponsePtrType) ToCurrentSpendResponsePtrOutputWithContext(ctx context.Context) CurrentSpendResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CurrentSpendResponsePtrOutput)
}

// The current amount of cost which is being tracked for a budget.
type CurrentSpendResponseOutput struct{ *pulumi.OutputState }

func (CurrentSpendResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CurrentSpendResponse)(nil)).Elem()
}

func (o CurrentSpendResponseOutput) ToCurrentSpendResponseOutput() CurrentSpendResponseOutput {
	return o
}

func (o CurrentSpendResponseOutput) ToCurrentSpendResponseOutputWithContext(ctx context.Context) CurrentSpendResponseOutput {
	return o
}

func (o CurrentSpendResponseOutput) ToCurrentSpendResponsePtrOutput() CurrentSpendResponsePtrOutput {
	return o.ToCurrentSpendResponsePtrOutputWithContext(context.Background())
}

func (o CurrentSpendResponseOutput) ToCurrentSpendResponsePtrOutputWithContext(ctx context.Context) CurrentSpendResponsePtrOutput {
	return o.ApplyT(func(v CurrentSpendResponse) *CurrentSpendResponse {
		return &v
	}).(CurrentSpendResponsePtrOutput)
}

// The total amount of cost which is being tracked by the budget.
func (o CurrentSpendResponseOutput) Amount() pulumi.Float64Output {
	return o.ApplyT(func(v CurrentSpendResponse) float64 { return v.Amount }).(pulumi.Float64Output)
}

// The unit of measure for the budget amount.
func (o CurrentSpendResponseOutput) Unit() pulumi.StringOutput {
	return o.ApplyT(func(v CurrentSpendResponse) string { return v.Unit }).(pulumi.StringOutput)
}

type CurrentSpendResponsePtrOutput struct{ *pulumi.OutputState }

func (CurrentSpendResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CurrentSpendResponse)(nil)).Elem()
}

func (o CurrentSpendResponsePtrOutput) ToCurrentSpendResponsePtrOutput() CurrentSpendResponsePtrOutput {
	return o
}

func (o CurrentSpendResponsePtrOutput) ToCurrentSpendResponsePtrOutputWithContext(ctx context.Context) CurrentSpendResponsePtrOutput {
	return o
}

func (o CurrentSpendResponsePtrOutput) Elem() CurrentSpendResponseOutput {
	return o.ApplyT(func(v *CurrentSpendResponse) CurrentSpendResponse { return *v }).(CurrentSpendResponseOutput)
}

// The total amount of cost which is being tracked by the budget.
func (o CurrentSpendResponsePtrOutput) Amount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CurrentSpendResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Amount
	}).(pulumi.Float64PtrOutput)
}

// The unit of measure for the budget amount.
func (o CurrentSpendResponsePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CurrentSpendResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Unit
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(BudgetTypeOutput{})
	pulumi.RegisterOutputType(BudgetComparisonExpressionOutput{})
	pulumi.RegisterOutputType(BudgetComparisonExpressionPtrOutput{})
	pulumi.RegisterOutputType(BudgetComparisonExpressionResponseOutput{})
	pulumi.RegisterOutputType(BudgetComparisonExpressionResponsePtrOutput{})
	pulumi.RegisterOutputType(BudgetFilterOutput{})
	pulumi.RegisterOutputType(BudgetFilterPtrOutput{})
	pulumi.RegisterOutputType(BudgetFilterPropertiesOutput{})
	pulumi.RegisterOutputType(BudgetFilterPropertiesPtrOutput{})
	pulumi.RegisterOutputType(BudgetFilterPropertiesArrayOutput{})
	pulumi.RegisterOutputType(BudgetFilterPropertiesResponseOutput{})
	pulumi.RegisterOutputType(BudgetFilterPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(BudgetFilterPropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(BudgetFilterResponseOutput{})
	pulumi.RegisterOutputType(BudgetFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(BudgetPropertiesOutput{})
	pulumi.RegisterOutputType(BudgetPropertiesPtrOutput{})
	pulumi.RegisterOutputType(BudgetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(BudgetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(BudgetTimePeriodOutput{})
	pulumi.RegisterOutputType(BudgetTimePeriodPtrOutput{})
	pulumi.RegisterOutputType(BudgetTimePeriodResponseOutput{})
	pulumi.RegisterOutputType(BudgetTimePeriodResponsePtrOutput{})
	pulumi.RegisterOutputType(CurrentSpendOutput{})
	pulumi.RegisterOutputType(CurrentSpendResponseOutput{})
	pulumi.RegisterOutputType(CurrentSpendResponsePtrOutput{})
}
