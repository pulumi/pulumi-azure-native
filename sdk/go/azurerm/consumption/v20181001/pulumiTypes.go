// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20181001

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A budget resource.
type BudgetType struct {
	// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
	ETag *string `pulumi:"eTag"`
	// Resource name.
	Name string `pulumi:"name"`
	// The properties of the budget.
	Properties BudgetPropertiesResponse `pulumi:"properties"`
	// Resource type.
	Type string `pulumi:"type"`
}

// BudgetTypeInput is an input type that accepts BudgetTypeArgs and BudgetTypeOutput values.
// You can construct a concrete instance of `BudgetTypeInput` via:
//
//          BudgetTypeArgs{...}
type BudgetTypeInput interface {
	pulumi.Input

	ToBudgetTypeOutput() BudgetTypeOutput
	ToBudgetTypeOutputWithContext(context.Context) BudgetTypeOutput
}

// A budget resource.
type BudgetTypeArgs struct {
	// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
	ETag pulumi.StringPtrInput `pulumi:"eTag"`
	// Resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of the budget.
	Properties BudgetPropertiesResponseInput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (BudgetTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetType)(nil)).Elem()
}

func (i BudgetTypeArgs) ToBudgetTypeOutput() BudgetTypeOutput {
	return i.ToBudgetTypeOutputWithContext(context.Background())
}

func (i BudgetTypeArgs) ToBudgetTypeOutputWithContext(ctx context.Context) BudgetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetTypeOutput)
}

// A budget resource.
type BudgetTypeOutput struct{ *pulumi.OutputState }

func (BudgetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetType)(nil)).Elem()
}

func (o BudgetTypeOutput) ToBudgetTypeOutput() BudgetTypeOutput {
	return o
}

func (o BudgetTypeOutput) ToBudgetTypeOutputWithContext(ctx context.Context) BudgetTypeOutput {
	return o
}

// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
func (o BudgetTypeOutput) ETag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetType) *string { return v.ETag }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o BudgetTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of the budget.
func (o BudgetTypeOutput) Properties() BudgetPropertiesResponseOutput {
	return o.ApplyT(func(v BudgetType) BudgetPropertiesResponse { return v.Properties }).(BudgetPropertiesResponseOutput)
}

// Resource type.
func (o BudgetTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetType) string { return v.Type }).(pulumi.StringOutput)
}

// A budget resource.
type BudgetByResourceGroupNameType struct {
	// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
	ETag *string `pulumi:"eTag"`
	// Resource name.
	Name string `pulumi:"name"`
	// The properties of the budget.
	Properties BudgetPropertiesResponse `pulumi:"properties"`
	// Resource type.
	Type string `pulumi:"type"`
}

// BudgetByResourceGroupNameTypeInput is an input type that accepts BudgetByResourceGroupNameTypeArgs and BudgetByResourceGroupNameTypeOutput values.
// You can construct a concrete instance of `BudgetByResourceGroupNameTypeInput` via:
//
//          BudgetByResourceGroupNameTypeArgs{...}
type BudgetByResourceGroupNameTypeInput interface {
	pulumi.Input

	ToBudgetByResourceGroupNameTypeOutput() BudgetByResourceGroupNameTypeOutput
	ToBudgetByResourceGroupNameTypeOutputWithContext(context.Context) BudgetByResourceGroupNameTypeOutput
}

// A budget resource.
type BudgetByResourceGroupNameTypeArgs struct {
	// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
	ETag pulumi.StringPtrInput `pulumi:"eTag"`
	// Resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of the budget.
	Properties BudgetPropertiesResponseInput `pulumi:"properties"`
	// Resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (BudgetByResourceGroupNameTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetByResourceGroupNameType)(nil)).Elem()
}

func (i BudgetByResourceGroupNameTypeArgs) ToBudgetByResourceGroupNameTypeOutput() BudgetByResourceGroupNameTypeOutput {
	return i.ToBudgetByResourceGroupNameTypeOutputWithContext(context.Background())
}

func (i BudgetByResourceGroupNameTypeArgs) ToBudgetByResourceGroupNameTypeOutputWithContext(ctx context.Context) BudgetByResourceGroupNameTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetByResourceGroupNameTypeOutput)
}

// A budget resource.
type BudgetByResourceGroupNameTypeOutput struct{ *pulumi.OutputState }

func (BudgetByResourceGroupNameTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetByResourceGroupNameType)(nil)).Elem()
}

func (o BudgetByResourceGroupNameTypeOutput) ToBudgetByResourceGroupNameTypeOutput() BudgetByResourceGroupNameTypeOutput {
	return o
}

func (o BudgetByResourceGroupNameTypeOutput) ToBudgetByResourceGroupNameTypeOutputWithContext(ctx context.Context) BudgetByResourceGroupNameTypeOutput {
	return o
}

// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
func (o BudgetByResourceGroupNameTypeOutput) ETag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetByResourceGroupNameType) *string { return v.ETag }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o BudgetByResourceGroupNameTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetByResourceGroupNameType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of the budget.
func (o BudgetByResourceGroupNameTypeOutput) Properties() BudgetPropertiesResponseOutput {
	return o.ApplyT(func(v BudgetByResourceGroupNameType) BudgetPropertiesResponse { return v.Properties }).(BudgetPropertiesResponseOutput)
}

// Resource type.
func (o BudgetByResourceGroupNameTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetByResourceGroupNameType) string { return v.Type }).(pulumi.StringOutput)
}

// The properties of the budget.
type BudgetProperties struct {
	// The total amount of cost to track with the budget
	Amount float64 `pulumi:"amount"`
	// The category of the budget, whether the budget tracks cost or usage.
	Category string `pulumi:"category"`
	// May be used to filter budgets by resource group, resource, or meter.
	Filters *Filters `pulumi:"filters"`
	// Dictionary of notifications associated with the budget. Budget can have up to five notifications.
	Notifications map[string]string `pulumi:"notifications"`
	// The time covered by a budget. Tracking of the amount will be reset based on the time grain.
	TimeGrain string `pulumi:"timeGrain"`
	// Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than three months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
	TimePeriod BudgetTimePeriod `pulumi:"timePeriod"`
}

// BudgetPropertiesInput is an input type that accepts BudgetPropertiesArgs and BudgetPropertiesOutput values.
// You can construct a concrete instance of `BudgetPropertiesInput` via:
//
//          BudgetPropertiesArgs{...}
type BudgetPropertiesInput interface {
	pulumi.Input

	ToBudgetPropertiesOutput() BudgetPropertiesOutput
	ToBudgetPropertiesOutputWithContext(context.Context) BudgetPropertiesOutput
}

// The properties of the budget.
type BudgetPropertiesArgs struct {
	// The total amount of cost to track with the budget
	Amount pulumi.Float64Input `pulumi:"amount"`
	// The category of the budget, whether the budget tracks cost or usage.
	Category pulumi.StringInput `pulumi:"category"`
	// May be used to filter budgets by resource group, resource, or meter.
	Filters FiltersPtrInput `pulumi:"filters"`
	// Dictionary of notifications associated with the budget. Budget can have up to five notifications.
	Notifications pulumi.StringMapInput `pulumi:"notifications"`
	// The time covered by a budget. Tracking of the amount will be reset based on the time grain.
	TimeGrain pulumi.StringInput `pulumi:"timeGrain"`
	// Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than three months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
	TimePeriod BudgetTimePeriodInput `pulumi:"timePeriod"`
}

func (BudgetPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetProperties)(nil)).Elem()
}

func (i BudgetPropertiesArgs) ToBudgetPropertiesOutput() BudgetPropertiesOutput {
	return i.ToBudgetPropertiesOutputWithContext(context.Background())
}

func (i BudgetPropertiesArgs) ToBudgetPropertiesOutputWithContext(ctx context.Context) BudgetPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetPropertiesOutput)
}

func (i BudgetPropertiesArgs) ToBudgetPropertiesPtrOutput() BudgetPropertiesPtrOutput {
	return i.ToBudgetPropertiesPtrOutputWithContext(context.Background())
}

func (i BudgetPropertiesArgs) ToBudgetPropertiesPtrOutputWithContext(ctx context.Context) BudgetPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetPropertiesOutput).ToBudgetPropertiesPtrOutputWithContext(ctx)
}

// BudgetPropertiesPtrInput is an input type that accepts BudgetPropertiesArgs, BudgetPropertiesPtr and BudgetPropertiesPtrOutput values.
// You can construct a concrete instance of `BudgetPropertiesPtrInput` via:
//
//          BudgetPropertiesArgs{...}
//
//  or:
//
//          nil
type BudgetPropertiesPtrInput interface {
	pulumi.Input

	ToBudgetPropertiesPtrOutput() BudgetPropertiesPtrOutput
	ToBudgetPropertiesPtrOutputWithContext(context.Context) BudgetPropertiesPtrOutput
}

type budgetPropertiesPtrType BudgetPropertiesArgs

func BudgetPropertiesPtr(v *BudgetPropertiesArgs) BudgetPropertiesPtrInput {
	return (*budgetPropertiesPtrType)(v)
}

func (*budgetPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetProperties)(nil)).Elem()
}

func (i *budgetPropertiesPtrType) ToBudgetPropertiesPtrOutput() BudgetPropertiesPtrOutput {
	return i.ToBudgetPropertiesPtrOutputWithContext(context.Background())
}

func (i *budgetPropertiesPtrType) ToBudgetPropertiesPtrOutputWithContext(ctx context.Context) BudgetPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetPropertiesPtrOutput)
}

// The properties of the budget.
type BudgetPropertiesOutput struct{ *pulumi.OutputState }

func (BudgetPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetProperties)(nil)).Elem()
}

func (o BudgetPropertiesOutput) ToBudgetPropertiesOutput() BudgetPropertiesOutput {
	return o
}

func (o BudgetPropertiesOutput) ToBudgetPropertiesOutputWithContext(ctx context.Context) BudgetPropertiesOutput {
	return o
}

func (o BudgetPropertiesOutput) ToBudgetPropertiesPtrOutput() BudgetPropertiesPtrOutput {
	return o.ToBudgetPropertiesPtrOutputWithContext(context.Background())
}

func (o BudgetPropertiesOutput) ToBudgetPropertiesPtrOutputWithContext(ctx context.Context) BudgetPropertiesPtrOutput {
	return o.ApplyT(func(v BudgetProperties) *BudgetProperties {
		return &v
	}).(BudgetPropertiesPtrOutput)
}

// The total amount of cost to track with the budget
func (o BudgetPropertiesOutput) Amount() pulumi.Float64Output {
	return o.ApplyT(func(v BudgetProperties) float64 { return v.Amount }).(pulumi.Float64Output)
}

// The category of the budget, whether the budget tracks cost or usage.
func (o BudgetPropertiesOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetProperties) string { return v.Category }).(pulumi.StringOutput)
}

// May be used to filter budgets by resource group, resource, or meter.
func (o BudgetPropertiesOutput) Filters() FiltersPtrOutput {
	return o.ApplyT(func(v BudgetProperties) *Filters { return v.Filters }).(FiltersPtrOutput)
}

// Dictionary of notifications associated with the budget. Budget can have up to five notifications.
func (o BudgetPropertiesOutput) Notifications() pulumi.StringMapOutput {
	return o.ApplyT(func(v BudgetProperties) map[string]string { return v.Notifications }).(pulumi.StringMapOutput)
}

// The time covered by a budget. Tracking of the amount will be reset based on the time grain.
func (o BudgetPropertiesOutput) TimeGrain() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetProperties) string { return v.TimeGrain }).(pulumi.StringOutput)
}

// Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than three months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
func (o BudgetPropertiesOutput) TimePeriod() BudgetTimePeriodOutput {
	return o.ApplyT(func(v BudgetProperties) BudgetTimePeriod { return v.TimePeriod }).(BudgetTimePeriodOutput)
}

type BudgetPropertiesPtrOutput struct{ *pulumi.OutputState }

func (BudgetPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetProperties)(nil)).Elem()
}

func (o BudgetPropertiesPtrOutput) ToBudgetPropertiesPtrOutput() BudgetPropertiesPtrOutput {
	return o
}

func (o BudgetPropertiesPtrOutput) ToBudgetPropertiesPtrOutputWithContext(ctx context.Context) BudgetPropertiesPtrOutput {
	return o
}

func (o BudgetPropertiesPtrOutput) Elem() BudgetPropertiesOutput {
	return o.ApplyT(func(v *BudgetProperties) BudgetProperties { return *v }).(BudgetPropertiesOutput)
}

// The total amount of cost to track with the budget
func (o BudgetPropertiesPtrOutput) Amount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BudgetProperties) *float64 {
		if v == nil {
			return nil
		}
		return &v.Amount
	}).(pulumi.Float64PtrOutput)
}

// The category of the budget, whether the budget tracks cost or usage.
func (o BudgetPropertiesPtrOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Category
	}).(pulumi.StringPtrOutput)
}

// May be used to filter budgets by resource group, resource, or meter.
func (o BudgetPropertiesPtrOutput) Filters() FiltersPtrOutput {
	return o.ApplyT(func(v *BudgetProperties) *Filters {
		if v == nil {
			return nil
		}
		return v.Filters
	}).(FiltersPtrOutput)
}

// Dictionary of notifications associated with the budget. Budget can have up to five notifications.
func (o BudgetPropertiesPtrOutput) Notifications() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BudgetProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Notifications
	}).(pulumi.StringMapOutput)
}

// The time covered by a budget. Tracking of the amount will be reset based on the time grain.
func (o BudgetPropertiesPtrOutput) TimeGrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TimeGrain
	}).(pulumi.StringPtrOutput)
}

// Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than three months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
func (o BudgetPropertiesPtrOutput) TimePeriod() BudgetTimePeriodPtrOutput {
	return o.ApplyT(func(v *BudgetProperties) *BudgetTimePeriod {
		if v == nil {
			return nil
		}
		return &v.TimePeriod
	}).(BudgetTimePeriodPtrOutput)
}

// The properties of the budget.
type BudgetPropertiesResponse struct {
	// The total amount of cost to track with the budget
	Amount float64 `pulumi:"amount"`
	// The category of the budget, whether the budget tracks cost or usage.
	Category string `pulumi:"category"`
	// The current amount of cost which is being tracked for a budget.
	CurrentSpend CurrentSpendResponse `pulumi:"currentSpend"`
	// May be used to filter budgets by resource group, resource, or meter.
	Filters *FiltersResponse `pulumi:"filters"`
	// Dictionary of notifications associated with the budget. Budget can have up to five notifications.
	Notifications map[string]string `pulumi:"notifications"`
	// The time covered by a budget. Tracking of the amount will be reset based on the time grain.
	TimeGrain string `pulumi:"timeGrain"`
	// Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than three months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
	TimePeriod BudgetTimePeriodResponse `pulumi:"timePeriod"`
}

// BudgetPropertiesResponseInput is an input type that accepts BudgetPropertiesResponseArgs and BudgetPropertiesResponseOutput values.
// You can construct a concrete instance of `BudgetPropertiesResponseInput` via:
//
//          BudgetPropertiesResponseArgs{...}
type BudgetPropertiesResponseInput interface {
	pulumi.Input

	ToBudgetPropertiesResponseOutput() BudgetPropertiesResponseOutput
	ToBudgetPropertiesResponseOutputWithContext(context.Context) BudgetPropertiesResponseOutput
}

// The properties of the budget.
type BudgetPropertiesResponseArgs struct {
	// The total amount of cost to track with the budget
	Amount pulumi.Float64Input `pulumi:"amount"`
	// The category of the budget, whether the budget tracks cost or usage.
	Category pulumi.StringInput `pulumi:"category"`
	// The current amount of cost which is being tracked for a budget.
	CurrentSpend CurrentSpendResponseInput `pulumi:"currentSpend"`
	// May be used to filter budgets by resource group, resource, or meter.
	Filters FiltersResponsePtrInput `pulumi:"filters"`
	// Dictionary of notifications associated with the budget. Budget can have up to five notifications.
	Notifications pulumi.StringMapInput `pulumi:"notifications"`
	// The time covered by a budget. Tracking of the amount will be reset based on the time grain.
	TimeGrain pulumi.StringInput `pulumi:"timeGrain"`
	// Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than three months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
	TimePeriod BudgetTimePeriodResponseInput `pulumi:"timePeriod"`
}

func (BudgetPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetPropertiesResponse)(nil)).Elem()
}

func (i BudgetPropertiesResponseArgs) ToBudgetPropertiesResponseOutput() BudgetPropertiesResponseOutput {
	return i.ToBudgetPropertiesResponseOutputWithContext(context.Background())
}

func (i BudgetPropertiesResponseArgs) ToBudgetPropertiesResponseOutputWithContext(ctx context.Context) BudgetPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetPropertiesResponseOutput)
}

func (i BudgetPropertiesResponseArgs) ToBudgetPropertiesResponsePtrOutput() BudgetPropertiesResponsePtrOutput {
	return i.ToBudgetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i BudgetPropertiesResponseArgs) ToBudgetPropertiesResponsePtrOutputWithContext(ctx context.Context) BudgetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetPropertiesResponseOutput).ToBudgetPropertiesResponsePtrOutputWithContext(ctx)
}

// BudgetPropertiesResponsePtrInput is an input type that accepts BudgetPropertiesResponseArgs, BudgetPropertiesResponsePtr and BudgetPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `BudgetPropertiesResponsePtrInput` via:
//
//          BudgetPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type BudgetPropertiesResponsePtrInput interface {
	pulumi.Input

	ToBudgetPropertiesResponsePtrOutput() BudgetPropertiesResponsePtrOutput
	ToBudgetPropertiesResponsePtrOutputWithContext(context.Context) BudgetPropertiesResponsePtrOutput
}

type budgetPropertiesResponsePtrType BudgetPropertiesResponseArgs

func BudgetPropertiesResponsePtr(v *BudgetPropertiesResponseArgs) BudgetPropertiesResponsePtrInput {
	return (*budgetPropertiesResponsePtrType)(v)
}

func (*budgetPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetPropertiesResponse)(nil)).Elem()
}

func (i *budgetPropertiesResponsePtrType) ToBudgetPropertiesResponsePtrOutput() BudgetPropertiesResponsePtrOutput {
	return i.ToBudgetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *budgetPropertiesResponsePtrType) ToBudgetPropertiesResponsePtrOutputWithContext(ctx context.Context) BudgetPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetPropertiesResponsePtrOutput)
}

// The properties of the budget.
type BudgetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (BudgetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetPropertiesResponse)(nil)).Elem()
}

func (o BudgetPropertiesResponseOutput) ToBudgetPropertiesResponseOutput() BudgetPropertiesResponseOutput {
	return o
}

func (o BudgetPropertiesResponseOutput) ToBudgetPropertiesResponseOutputWithContext(ctx context.Context) BudgetPropertiesResponseOutput {
	return o
}

func (o BudgetPropertiesResponseOutput) ToBudgetPropertiesResponsePtrOutput() BudgetPropertiesResponsePtrOutput {
	return o.ToBudgetPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o BudgetPropertiesResponseOutput) ToBudgetPropertiesResponsePtrOutputWithContext(ctx context.Context) BudgetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v BudgetPropertiesResponse) *BudgetPropertiesResponse {
		return &v
	}).(BudgetPropertiesResponsePtrOutput)
}

// The total amount of cost to track with the budget
func (o BudgetPropertiesResponseOutput) Amount() pulumi.Float64Output {
	return o.ApplyT(func(v BudgetPropertiesResponse) float64 { return v.Amount }).(pulumi.Float64Output)
}

// The category of the budget, whether the budget tracks cost or usage.
func (o BudgetPropertiesResponseOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetPropertiesResponse) string { return v.Category }).(pulumi.StringOutput)
}

// The current amount of cost which is being tracked for a budget.
func (o BudgetPropertiesResponseOutput) CurrentSpend() CurrentSpendResponseOutput {
	return o.ApplyT(func(v BudgetPropertiesResponse) CurrentSpendResponse { return v.CurrentSpend }).(CurrentSpendResponseOutput)
}

// May be used to filter budgets by resource group, resource, or meter.
func (o BudgetPropertiesResponseOutput) Filters() FiltersResponsePtrOutput {
	return o.ApplyT(func(v BudgetPropertiesResponse) *FiltersResponse { return v.Filters }).(FiltersResponsePtrOutput)
}

// Dictionary of notifications associated with the budget. Budget can have up to five notifications.
func (o BudgetPropertiesResponseOutput) Notifications() pulumi.StringMapOutput {
	return o.ApplyT(func(v BudgetPropertiesResponse) map[string]string { return v.Notifications }).(pulumi.StringMapOutput)
}

// The time covered by a budget. Tracking of the amount will be reset based on the time grain.
func (o BudgetPropertiesResponseOutput) TimeGrain() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetPropertiesResponse) string { return v.TimeGrain }).(pulumi.StringOutput)
}

// Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than three months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
func (o BudgetPropertiesResponseOutput) TimePeriod() BudgetTimePeriodResponseOutput {
	return o.ApplyT(func(v BudgetPropertiesResponse) BudgetTimePeriodResponse { return v.TimePeriod }).(BudgetTimePeriodResponseOutput)
}

type BudgetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (BudgetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetPropertiesResponse)(nil)).Elem()
}

func (o BudgetPropertiesResponsePtrOutput) ToBudgetPropertiesResponsePtrOutput() BudgetPropertiesResponsePtrOutput {
	return o
}

func (o BudgetPropertiesResponsePtrOutput) ToBudgetPropertiesResponsePtrOutputWithContext(ctx context.Context) BudgetPropertiesResponsePtrOutput {
	return o
}

func (o BudgetPropertiesResponsePtrOutput) Elem() BudgetPropertiesResponseOutput {
	return o.ApplyT(func(v *BudgetPropertiesResponse) BudgetPropertiesResponse { return *v }).(BudgetPropertiesResponseOutput)
}

// The total amount of cost to track with the budget
func (o BudgetPropertiesResponsePtrOutput) Amount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BudgetPropertiesResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Amount
	}).(pulumi.Float64PtrOutput)
}

// The category of the budget, whether the budget tracks cost or usage.
func (o BudgetPropertiesResponsePtrOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Category
	}).(pulumi.StringPtrOutput)
}

// The current amount of cost which is being tracked for a budget.
func (o BudgetPropertiesResponsePtrOutput) CurrentSpend() CurrentSpendResponsePtrOutput {
	return o.ApplyT(func(v *BudgetPropertiesResponse) *CurrentSpendResponse {
		if v == nil {
			return nil
		}
		return &v.CurrentSpend
	}).(CurrentSpendResponsePtrOutput)
}

// May be used to filter budgets by resource group, resource, or meter.
func (o BudgetPropertiesResponsePtrOutput) Filters() FiltersResponsePtrOutput {
	return o.ApplyT(func(v *BudgetPropertiesResponse) *FiltersResponse {
		if v == nil {
			return nil
		}
		return v.Filters
	}).(FiltersResponsePtrOutput)
}

// Dictionary of notifications associated with the budget. Budget can have up to five notifications.
func (o BudgetPropertiesResponsePtrOutput) Notifications() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BudgetPropertiesResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Notifications
	}).(pulumi.StringMapOutput)
}

// The time covered by a budget. Tracking of the amount will be reset based on the time grain.
func (o BudgetPropertiesResponsePtrOutput) TimeGrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TimeGrain
	}).(pulumi.StringPtrOutput)
}

// Has start and end date of the budget. The start date must be first of the month and should be less than the end date. Budget start date must be on or after June 1, 2017. Future start date should not be more than three months. Past start date should  be selected within the timegrain period. There are no restrictions on the end date.
func (o BudgetPropertiesResponsePtrOutput) TimePeriod() BudgetTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v *BudgetPropertiesResponse) *BudgetTimePeriodResponse {
		if v == nil {
			return nil
		}
		return &v.TimePeriod
	}).(BudgetTimePeriodResponsePtrOutput)
}

// The start and end date for a budget.
type BudgetTimePeriod struct {
	// The end date for the budget. If not provided, we default this to 10 years from the start date.
	EndDate *string `pulumi:"endDate"`
	// The start date for the budget.
	StartDate string `pulumi:"startDate"`
}

// BudgetTimePeriodInput is an input type that accepts BudgetTimePeriodArgs and BudgetTimePeriodOutput values.
// You can construct a concrete instance of `BudgetTimePeriodInput` via:
//
//          BudgetTimePeriodArgs{...}
type BudgetTimePeriodInput interface {
	pulumi.Input

	ToBudgetTimePeriodOutput() BudgetTimePeriodOutput
	ToBudgetTimePeriodOutputWithContext(context.Context) BudgetTimePeriodOutput
}

// The start and end date for a budget.
type BudgetTimePeriodArgs struct {
	// The end date for the budget. If not provided, we default this to 10 years from the start date.
	EndDate pulumi.StringPtrInput `pulumi:"endDate"`
	// The start date for the budget.
	StartDate pulumi.StringInput `pulumi:"startDate"`
}

func (BudgetTimePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetTimePeriod)(nil)).Elem()
}

func (i BudgetTimePeriodArgs) ToBudgetTimePeriodOutput() BudgetTimePeriodOutput {
	return i.ToBudgetTimePeriodOutputWithContext(context.Background())
}

func (i BudgetTimePeriodArgs) ToBudgetTimePeriodOutputWithContext(ctx context.Context) BudgetTimePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetTimePeriodOutput)
}

func (i BudgetTimePeriodArgs) ToBudgetTimePeriodPtrOutput() BudgetTimePeriodPtrOutput {
	return i.ToBudgetTimePeriodPtrOutputWithContext(context.Background())
}

func (i BudgetTimePeriodArgs) ToBudgetTimePeriodPtrOutputWithContext(ctx context.Context) BudgetTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetTimePeriodOutput).ToBudgetTimePeriodPtrOutputWithContext(ctx)
}

// BudgetTimePeriodPtrInput is an input type that accepts BudgetTimePeriodArgs, BudgetTimePeriodPtr and BudgetTimePeriodPtrOutput values.
// You can construct a concrete instance of `BudgetTimePeriodPtrInput` via:
//
//          BudgetTimePeriodArgs{...}
//
//  or:
//
//          nil
type BudgetTimePeriodPtrInput interface {
	pulumi.Input

	ToBudgetTimePeriodPtrOutput() BudgetTimePeriodPtrOutput
	ToBudgetTimePeriodPtrOutputWithContext(context.Context) BudgetTimePeriodPtrOutput
}

type budgetTimePeriodPtrType BudgetTimePeriodArgs

func BudgetTimePeriodPtr(v *BudgetTimePeriodArgs) BudgetTimePeriodPtrInput {
	return (*budgetTimePeriodPtrType)(v)
}

func (*budgetTimePeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetTimePeriod)(nil)).Elem()
}

func (i *budgetTimePeriodPtrType) ToBudgetTimePeriodPtrOutput() BudgetTimePeriodPtrOutput {
	return i.ToBudgetTimePeriodPtrOutputWithContext(context.Background())
}

func (i *budgetTimePeriodPtrType) ToBudgetTimePeriodPtrOutputWithContext(ctx context.Context) BudgetTimePeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetTimePeriodPtrOutput)
}

// The start and end date for a budget.
type BudgetTimePeriodOutput struct{ *pulumi.OutputState }

func (BudgetTimePeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetTimePeriod)(nil)).Elem()
}

func (o BudgetTimePeriodOutput) ToBudgetTimePeriodOutput() BudgetTimePeriodOutput {
	return o
}

func (o BudgetTimePeriodOutput) ToBudgetTimePeriodOutputWithContext(ctx context.Context) BudgetTimePeriodOutput {
	return o
}

func (o BudgetTimePeriodOutput) ToBudgetTimePeriodPtrOutput() BudgetTimePeriodPtrOutput {
	return o.ToBudgetTimePeriodPtrOutputWithContext(context.Background())
}

func (o BudgetTimePeriodOutput) ToBudgetTimePeriodPtrOutputWithContext(ctx context.Context) BudgetTimePeriodPtrOutput {
	return o.ApplyT(func(v BudgetTimePeriod) *BudgetTimePeriod {
		return &v
	}).(BudgetTimePeriodPtrOutput)
}

// The end date for the budget. If not provided, we default this to 10 years from the start date.
func (o BudgetTimePeriodOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetTimePeriod) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// The start date for the budget.
func (o BudgetTimePeriodOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetTimePeriod) string { return v.StartDate }).(pulumi.StringOutput)
}

type BudgetTimePeriodPtrOutput struct{ *pulumi.OutputState }

func (BudgetTimePeriodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetTimePeriod)(nil)).Elem()
}

func (o BudgetTimePeriodPtrOutput) ToBudgetTimePeriodPtrOutput() BudgetTimePeriodPtrOutput {
	return o
}

func (o BudgetTimePeriodPtrOutput) ToBudgetTimePeriodPtrOutputWithContext(ctx context.Context) BudgetTimePeriodPtrOutput {
	return o
}

func (o BudgetTimePeriodPtrOutput) Elem() BudgetTimePeriodOutput {
	return o.ApplyT(func(v *BudgetTimePeriod) BudgetTimePeriod { return *v }).(BudgetTimePeriodOutput)
}

// The end date for the budget. If not provided, we default this to 10 years from the start date.
func (o BudgetTimePeriodPtrOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetTimePeriod) *string {
		if v == nil {
			return nil
		}
		return v.EndDate
	}).(pulumi.StringPtrOutput)
}

// The start date for the budget.
func (o BudgetTimePeriodPtrOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetTimePeriod) *string {
		if v == nil {
			return nil
		}
		return &v.StartDate
	}).(pulumi.StringPtrOutput)
}

// The start and end date for a budget.
type BudgetTimePeriodResponse struct {
	// The end date for the budget. If not provided, we default this to 10 years from the start date.
	EndDate *string `pulumi:"endDate"`
	// The start date for the budget.
	StartDate string `pulumi:"startDate"`
}

// BudgetTimePeriodResponseInput is an input type that accepts BudgetTimePeriodResponseArgs and BudgetTimePeriodResponseOutput values.
// You can construct a concrete instance of `BudgetTimePeriodResponseInput` via:
//
//          BudgetTimePeriodResponseArgs{...}
type BudgetTimePeriodResponseInput interface {
	pulumi.Input

	ToBudgetTimePeriodResponseOutput() BudgetTimePeriodResponseOutput
	ToBudgetTimePeriodResponseOutputWithContext(context.Context) BudgetTimePeriodResponseOutput
}

// The start and end date for a budget.
type BudgetTimePeriodResponseArgs struct {
	// The end date for the budget. If not provided, we default this to 10 years from the start date.
	EndDate pulumi.StringPtrInput `pulumi:"endDate"`
	// The start date for the budget.
	StartDate pulumi.StringInput `pulumi:"startDate"`
}

func (BudgetTimePeriodResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetTimePeriodResponse)(nil)).Elem()
}

func (i BudgetTimePeriodResponseArgs) ToBudgetTimePeriodResponseOutput() BudgetTimePeriodResponseOutput {
	return i.ToBudgetTimePeriodResponseOutputWithContext(context.Background())
}

func (i BudgetTimePeriodResponseArgs) ToBudgetTimePeriodResponseOutputWithContext(ctx context.Context) BudgetTimePeriodResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetTimePeriodResponseOutput)
}

func (i BudgetTimePeriodResponseArgs) ToBudgetTimePeriodResponsePtrOutput() BudgetTimePeriodResponsePtrOutput {
	return i.ToBudgetTimePeriodResponsePtrOutputWithContext(context.Background())
}

func (i BudgetTimePeriodResponseArgs) ToBudgetTimePeriodResponsePtrOutputWithContext(ctx context.Context) BudgetTimePeriodResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetTimePeriodResponseOutput).ToBudgetTimePeriodResponsePtrOutputWithContext(ctx)
}

// BudgetTimePeriodResponsePtrInput is an input type that accepts BudgetTimePeriodResponseArgs, BudgetTimePeriodResponsePtr and BudgetTimePeriodResponsePtrOutput values.
// You can construct a concrete instance of `BudgetTimePeriodResponsePtrInput` via:
//
//          BudgetTimePeriodResponseArgs{...}
//
//  or:
//
//          nil
type BudgetTimePeriodResponsePtrInput interface {
	pulumi.Input

	ToBudgetTimePeriodResponsePtrOutput() BudgetTimePeriodResponsePtrOutput
	ToBudgetTimePeriodResponsePtrOutputWithContext(context.Context) BudgetTimePeriodResponsePtrOutput
}

type budgetTimePeriodResponsePtrType BudgetTimePeriodResponseArgs

func BudgetTimePeriodResponsePtr(v *BudgetTimePeriodResponseArgs) BudgetTimePeriodResponsePtrInput {
	return (*budgetTimePeriodResponsePtrType)(v)
}

func (*budgetTimePeriodResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetTimePeriodResponse)(nil)).Elem()
}

func (i *budgetTimePeriodResponsePtrType) ToBudgetTimePeriodResponsePtrOutput() BudgetTimePeriodResponsePtrOutput {
	return i.ToBudgetTimePeriodResponsePtrOutputWithContext(context.Background())
}

func (i *budgetTimePeriodResponsePtrType) ToBudgetTimePeriodResponsePtrOutputWithContext(ctx context.Context) BudgetTimePeriodResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BudgetTimePeriodResponsePtrOutput)
}

// The start and end date for a budget.
type BudgetTimePeriodResponseOutput struct{ *pulumi.OutputState }

func (BudgetTimePeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BudgetTimePeriodResponse)(nil)).Elem()
}

func (o BudgetTimePeriodResponseOutput) ToBudgetTimePeriodResponseOutput() BudgetTimePeriodResponseOutput {
	return o
}

func (o BudgetTimePeriodResponseOutput) ToBudgetTimePeriodResponseOutputWithContext(ctx context.Context) BudgetTimePeriodResponseOutput {
	return o
}

func (o BudgetTimePeriodResponseOutput) ToBudgetTimePeriodResponsePtrOutput() BudgetTimePeriodResponsePtrOutput {
	return o.ToBudgetTimePeriodResponsePtrOutputWithContext(context.Background())
}

func (o BudgetTimePeriodResponseOutput) ToBudgetTimePeriodResponsePtrOutputWithContext(ctx context.Context) BudgetTimePeriodResponsePtrOutput {
	return o.ApplyT(func(v BudgetTimePeriodResponse) *BudgetTimePeriodResponse {
		return &v
	}).(BudgetTimePeriodResponsePtrOutput)
}

// The end date for the budget. If not provided, we default this to 10 years from the start date.
func (o BudgetTimePeriodResponseOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BudgetTimePeriodResponse) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// The start date for the budget.
func (o BudgetTimePeriodResponseOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v BudgetTimePeriodResponse) string { return v.StartDate }).(pulumi.StringOutput)
}

type BudgetTimePeriodResponsePtrOutput struct{ *pulumi.OutputState }

func (BudgetTimePeriodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BudgetTimePeriodResponse)(nil)).Elem()
}

func (o BudgetTimePeriodResponsePtrOutput) ToBudgetTimePeriodResponsePtrOutput() BudgetTimePeriodResponsePtrOutput {
	return o
}

func (o BudgetTimePeriodResponsePtrOutput) ToBudgetTimePeriodResponsePtrOutputWithContext(ctx context.Context) BudgetTimePeriodResponsePtrOutput {
	return o
}

func (o BudgetTimePeriodResponsePtrOutput) Elem() BudgetTimePeriodResponseOutput {
	return o.ApplyT(func(v *BudgetTimePeriodResponse) BudgetTimePeriodResponse { return *v }).(BudgetTimePeriodResponseOutput)
}

// The end date for the budget. If not provided, we default this to 10 years from the start date.
func (o BudgetTimePeriodResponsePtrOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndDate
	}).(pulumi.StringPtrOutput)
}

// The start date for the budget.
func (o BudgetTimePeriodResponsePtrOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BudgetTimePeriodResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartDate
	}).(pulumi.StringPtrOutput)
}

// The current amount of cost which is being tracked for a budget.
type CurrentSpend struct {
}

// CurrentSpendInput is an input type that accepts CurrentSpendArgs and CurrentSpendOutput values.
// You can construct a concrete instance of `CurrentSpendInput` via:
//
//          CurrentSpendArgs{...}
type CurrentSpendInput interface {
	pulumi.Input

	ToCurrentSpendOutput() CurrentSpendOutput
	ToCurrentSpendOutputWithContext(context.Context) CurrentSpendOutput
}

// The current amount of cost which is being tracked for a budget.
type CurrentSpendArgs struct {
}

func (CurrentSpendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CurrentSpend)(nil)).Elem()
}

func (i CurrentSpendArgs) ToCurrentSpendOutput() CurrentSpendOutput {
	return i.ToCurrentSpendOutputWithContext(context.Background())
}

func (i CurrentSpendArgs) ToCurrentSpendOutputWithContext(ctx context.Context) CurrentSpendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CurrentSpendOutput)
}

// The current amount of cost which is being tracked for a budget.
type CurrentSpendOutput struct{ *pulumi.OutputState }

func (CurrentSpendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CurrentSpend)(nil)).Elem()
}

func (o CurrentSpendOutput) ToCurrentSpendOutput() CurrentSpendOutput {
	return o
}

func (o CurrentSpendOutput) ToCurrentSpendOutputWithContext(ctx context.Context) CurrentSpendOutput {
	return o
}

// The current amount of cost which is being tracked for a budget.
type CurrentSpendResponse struct {
	// The total amount of cost which is being tracked by the budget.
	Amount float64 `pulumi:"amount"`
	// The unit of measure for the budget amount.
	Unit string `pulumi:"unit"`
}

// CurrentSpendResponseInput is an input type that accepts CurrentSpendResponseArgs and CurrentSpendResponseOutput values.
// You can construct a concrete instance of `CurrentSpendResponseInput` via:
//
//          CurrentSpendResponseArgs{...}
type CurrentSpendResponseInput interface {
	pulumi.Input

	ToCurrentSpendResponseOutput() CurrentSpendResponseOutput
	ToCurrentSpendResponseOutputWithContext(context.Context) CurrentSpendResponseOutput
}

// The current amount of cost which is being tracked for a budget.
type CurrentSpendResponseArgs struct {
	// The total amount of cost which is being tracked by the budget.
	Amount pulumi.Float64Input `pulumi:"amount"`
	// The unit of measure for the budget amount.
	Unit pulumi.StringInput `pulumi:"unit"`
}

func (CurrentSpendResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CurrentSpendResponse)(nil)).Elem()
}

func (i CurrentSpendResponseArgs) ToCurrentSpendResponseOutput() CurrentSpendResponseOutput {
	return i.ToCurrentSpendResponseOutputWithContext(context.Background())
}

func (i CurrentSpendResponseArgs) ToCurrentSpendResponseOutputWithContext(ctx context.Context) CurrentSpendResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CurrentSpendResponseOutput)
}

func (i CurrentSpendResponseArgs) ToCurrentSpendResponsePtrOutput() CurrentSpendResponsePtrOutput {
	return i.ToCurrentSpendResponsePtrOutputWithContext(context.Background())
}

func (i CurrentSpendResponseArgs) ToCurrentSpendResponsePtrOutputWithContext(ctx context.Context) CurrentSpendResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CurrentSpendResponseOutput).ToCurrentSpendResponsePtrOutputWithContext(ctx)
}

// CurrentSpendResponsePtrInput is an input type that accepts CurrentSpendResponseArgs, CurrentSpendResponsePtr and CurrentSpendResponsePtrOutput values.
// You can construct a concrete instance of `CurrentSpendResponsePtrInput` via:
//
//          CurrentSpendResponseArgs{...}
//
//  or:
//
//          nil
type CurrentSpendResponsePtrInput interface {
	pulumi.Input

	ToCurrentSpendResponsePtrOutput() CurrentSpendResponsePtrOutput
	ToCurrentSpendResponsePtrOutputWithContext(context.Context) CurrentSpendResponsePtrOutput
}

type currentSpendResponsePtrType CurrentSpendResponseArgs

func CurrentSpendResponsePtr(v *CurrentSpendResponseArgs) CurrentSpendResponsePtrInput {
	return (*currentSpendResponsePtrType)(v)
}

func (*currentSpendResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CurrentSpendResponse)(nil)).Elem()
}

func (i *currentSpendResponsePtrType) ToCurrentSpendResponsePtrOutput() CurrentSpendResponsePtrOutput {
	return i.ToCurrentSpendResponsePtrOutputWithContext(context.Background())
}

func (i *currentSpendResponsePtrType) ToCurrentSpendResponsePtrOutputWithContext(ctx context.Context) CurrentSpendResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CurrentSpendResponsePtrOutput)
}

// The current amount of cost which is being tracked for a budget.
type CurrentSpendResponseOutput struct{ *pulumi.OutputState }

func (CurrentSpendResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CurrentSpendResponse)(nil)).Elem()
}

func (o CurrentSpendResponseOutput) ToCurrentSpendResponseOutput() CurrentSpendResponseOutput {
	return o
}

func (o CurrentSpendResponseOutput) ToCurrentSpendResponseOutputWithContext(ctx context.Context) CurrentSpendResponseOutput {
	return o
}

func (o CurrentSpendResponseOutput) ToCurrentSpendResponsePtrOutput() CurrentSpendResponsePtrOutput {
	return o.ToCurrentSpendResponsePtrOutputWithContext(context.Background())
}

func (o CurrentSpendResponseOutput) ToCurrentSpendResponsePtrOutputWithContext(ctx context.Context) CurrentSpendResponsePtrOutput {
	return o.ApplyT(func(v CurrentSpendResponse) *CurrentSpendResponse {
		return &v
	}).(CurrentSpendResponsePtrOutput)
}

// The total amount of cost which is being tracked by the budget.
func (o CurrentSpendResponseOutput) Amount() pulumi.Float64Output {
	return o.ApplyT(func(v CurrentSpendResponse) float64 { return v.Amount }).(pulumi.Float64Output)
}

// The unit of measure for the budget amount.
func (o CurrentSpendResponseOutput) Unit() pulumi.StringOutput {
	return o.ApplyT(func(v CurrentSpendResponse) string { return v.Unit }).(pulumi.StringOutput)
}

type CurrentSpendResponsePtrOutput struct{ *pulumi.OutputState }

func (CurrentSpendResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CurrentSpendResponse)(nil)).Elem()
}

func (o CurrentSpendResponsePtrOutput) ToCurrentSpendResponsePtrOutput() CurrentSpendResponsePtrOutput {
	return o
}

func (o CurrentSpendResponsePtrOutput) ToCurrentSpendResponsePtrOutputWithContext(ctx context.Context) CurrentSpendResponsePtrOutput {
	return o
}

func (o CurrentSpendResponsePtrOutput) Elem() CurrentSpendResponseOutput {
	return o.ApplyT(func(v *CurrentSpendResponse) CurrentSpendResponse { return *v }).(CurrentSpendResponseOutput)
}

// The total amount of cost which is being tracked by the budget.
func (o CurrentSpendResponsePtrOutput) Amount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CurrentSpendResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Amount
	}).(pulumi.Float64PtrOutput)
}

// The unit of measure for the budget amount.
func (o CurrentSpendResponsePtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CurrentSpendResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Unit
	}).(pulumi.StringPtrOutput)
}

// May be used to filter budgets by resource group, resource, or meter.
type Filters struct {
	// The list of filters on meters (GUID), mandatory for budgets of usage category.
	Meters []string `pulumi:"meters"`
	// The list of filters on resource groups, allowed at subscription level only.
	ResourceGroups []string `pulumi:"resourceGroups"`
	// The list of filters on resources.
	Resources []string `pulumi:"resources"`
	// The dictionary of filters on tags.
	Tags map[string]string `pulumi:"tags"`
}

// FiltersInput is an input type that accepts FiltersArgs and FiltersOutput values.
// You can construct a concrete instance of `FiltersInput` via:
//
//          FiltersArgs{...}
type FiltersInput interface {
	pulumi.Input

	ToFiltersOutput() FiltersOutput
	ToFiltersOutputWithContext(context.Context) FiltersOutput
}

// May be used to filter budgets by resource group, resource, or meter.
type FiltersArgs struct {
	// The list of filters on meters (GUID), mandatory for budgets of usage category.
	Meters pulumi.StringArrayInput `pulumi:"meters"`
	// The list of filters on resource groups, allowed at subscription level only.
	ResourceGroups pulumi.StringArrayInput `pulumi:"resourceGroups"`
	// The list of filters on resources.
	Resources pulumi.StringArrayInput `pulumi:"resources"`
	// The dictionary of filters on tags.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (FiltersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Filters)(nil)).Elem()
}

func (i FiltersArgs) ToFiltersOutput() FiltersOutput {
	return i.ToFiltersOutputWithContext(context.Background())
}

func (i FiltersArgs) ToFiltersOutputWithContext(ctx context.Context) FiltersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FiltersOutput)
}

func (i FiltersArgs) ToFiltersPtrOutput() FiltersPtrOutput {
	return i.ToFiltersPtrOutputWithContext(context.Background())
}

func (i FiltersArgs) ToFiltersPtrOutputWithContext(ctx context.Context) FiltersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FiltersOutput).ToFiltersPtrOutputWithContext(ctx)
}

// FiltersPtrInput is an input type that accepts FiltersArgs, FiltersPtr and FiltersPtrOutput values.
// You can construct a concrete instance of `FiltersPtrInput` via:
//
//          FiltersArgs{...}
//
//  or:
//
//          nil
type FiltersPtrInput interface {
	pulumi.Input

	ToFiltersPtrOutput() FiltersPtrOutput
	ToFiltersPtrOutputWithContext(context.Context) FiltersPtrOutput
}

type filtersPtrType FiltersArgs

func FiltersPtr(v *FiltersArgs) FiltersPtrInput {
	return (*filtersPtrType)(v)
}

func (*filtersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Filters)(nil)).Elem()
}

func (i *filtersPtrType) ToFiltersPtrOutput() FiltersPtrOutput {
	return i.ToFiltersPtrOutputWithContext(context.Background())
}

func (i *filtersPtrType) ToFiltersPtrOutputWithContext(ctx context.Context) FiltersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FiltersPtrOutput)
}

// May be used to filter budgets by resource group, resource, or meter.
type FiltersOutput struct{ *pulumi.OutputState }

func (FiltersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Filters)(nil)).Elem()
}

func (o FiltersOutput) ToFiltersOutput() FiltersOutput {
	return o
}

func (o FiltersOutput) ToFiltersOutputWithContext(ctx context.Context) FiltersOutput {
	return o
}

func (o FiltersOutput) ToFiltersPtrOutput() FiltersPtrOutput {
	return o.ToFiltersPtrOutputWithContext(context.Background())
}

func (o FiltersOutput) ToFiltersPtrOutputWithContext(ctx context.Context) FiltersPtrOutput {
	return o.ApplyT(func(v Filters) *Filters {
		return &v
	}).(FiltersPtrOutput)
}

// The list of filters on meters (GUID), mandatory for budgets of usage category.
func (o FiltersOutput) Meters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Filters) []string { return v.Meters }).(pulumi.StringArrayOutput)
}

// The list of filters on resource groups, allowed at subscription level only.
func (o FiltersOutput) ResourceGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Filters) []string { return v.ResourceGroups }).(pulumi.StringArrayOutput)
}

// The list of filters on resources.
func (o FiltersOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Filters) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

// The dictionary of filters on tags.
func (o FiltersOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v Filters) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type FiltersPtrOutput struct{ *pulumi.OutputState }

func (FiltersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Filters)(nil)).Elem()
}

func (o FiltersPtrOutput) ToFiltersPtrOutput() FiltersPtrOutput {
	return o
}

func (o FiltersPtrOutput) ToFiltersPtrOutputWithContext(ctx context.Context) FiltersPtrOutput {
	return o
}

func (o FiltersPtrOutput) Elem() FiltersOutput {
	return o.ApplyT(func(v *Filters) Filters { return *v }).(FiltersOutput)
}

// The list of filters on meters (GUID), mandatory for budgets of usage category.
func (o FiltersPtrOutput) Meters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Filters) []string {
		if v == nil {
			return nil
		}
		return v.Meters
	}).(pulumi.StringArrayOutput)
}

// The list of filters on resource groups, allowed at subscription level only.
func (o FiltersPtrOutput) ResourceGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Filters) []string {
		if v == nil {
			return nil
		}
		return v.ResourceGroups
	}).(pulumi.StringArrayOutput)
}

// The list of filters on resources.
func (o FiltersPtrOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Filters) []string {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(pulumi.StringArrayOutput)
}

// The dictionary of filters on tags.
func (o FiltersPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Filters) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// May be used to filter budgets by resource group, resource, or meter.
type FiltersResponse struct {
	// The list of filters on meters (GUID), mandatory for budgets of usage category.
	Meters []string `pulumi:"meters"`
	// The list of filters on resource groups, allowed at subscription level only.
	ResourceGroups []string `pulumi:"resourceGroups"`
	// The list of filters on resources.
	Resources []string `pulumi:"resources"`
	// The dictionary of filters on tags.
	Tags map[string]string `pulumi:"tags"`
}

// FiltersResponseInput is an input type that accepts FiltersResponseArgs and FiltersResponseOutput values.
// You can construct a concrete instance of `FiltersResponseInput` via:
//
//          FiltersResponseArgs{...}
type FiltersResponseInput interface {
	pulumi.Input

	ToFiltersResponseOutput() FiltersResponseOutput
	ToFiltersResponseOutputWithContext(context.Context) FiltersResponseOutput
}

// May be used to filter budgets by resource group, resource, or meter.
type FiltersResponseArgs struct {
	// The list of filters on meters (GUID), mandatory for budgets of usage category.
	Meters pulumi.StringArrayInput `pulumi:"meters"`
	// The list of filters on resource groups, allowed at subscription level only.
	ResourceGroups pulumi.StringArrayInput `pulumi:"resourceGroups"`
	// The list of filters on resources.
	Resources pulumi.StringArrayInput `pulumi:"resources"`
	// The dictionary of filters on tags.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (FiltersResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FiltersResponse)(nil)).Elem()
}

func (i FiltersResponseArgs) ToFiltersResponseOutput() FiltersResponseOutput {
	return i.ToFiltersResponseOutputWithContext(context.Background())
}

func (i FiltersResponseArgs) ToFiltersResponseOutputWithContext(ctx context.Context) FiltersResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FiltersResponseOutput)
}

func (i FiltersResponseArgs) ToFiltersResponsePtrOutput() FiltersResponsePtrOutput {
	return i.ToFiltersResponsePtrOutputWithContext(context.Background())
}

func (i FiltersResponseArgs) ToFiltersResponsePtrOutputWithContext(ctx context.Context) FiltersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FiltersResponseOutput).ToFiltersResponsePtrOutputWithContext(ctx)
}

// FiltersResponsePtrInput is an input type that accepts FiltersResponseArgs, FiltersResponsePtr and FiltersResponsePtrOutput values.
// You can construct a concrete instance of `FiltersResponsePtrInput` via:
//
//          FiltersResponseArgs{...}
//
//  or:
//
//          nil
type FiltersResponsePtrInput interface {
	pulumi.Input

	ToFiltersResponsePtrOutput() FiltersResponsePtrOutput
	ToFiltersResponsePtrOutputWithContext(context.Context) FiltersResponsePtrOutput
}

type filtersResponsePtrType FiltersResponseArgs

func FiltersResponsePtr(v *FiltersResponseArgs) FiltersResponsePtrInput {
	return (*filtersResponsePtrType)(v)
}

func (*filtersResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FiltersResponse)(nil)).Elem()
}

func (i *filtersResponsePtrType) ToFiltersResponsePtrOutput() FiltersResponsePtrOutput {
	return i.ToFiltersResponsePtrOutputWithContext(context.Background())
}

func (i *filtersResponsePtrType) ToFiltersResponsePtrOutputWithContext(ctx context.Context) FiltersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FiltersResponsePtrOutput)
}

// May be used to filter budgets by resource group, resource, or meter.
type FiltersResponseOutput struct{ *pulumi.OutputState }

func (FiltersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FiltersResponse)(nil)).Elem()
}

func (o FiltersResponseOutput) ToFiltersResponseOutput() FiltersResponseOutput {
	return o
}

func (o FiltersResponseOutput) ToFiltersResponseOutputWithContext(ctx context.Context) FiltersResponseOutput {
	return o
}

func (o FiltersResponseOutput) ToFiltersResponsePtrOutput() FiltersResponsePtrOutput {
	return o.ToFiltersResponsePtrOutputWithContext(context.Background())
}

func (o FiltersResponseOutput) ToFiltersResponsePtrOutputWithContext(ctx context.Context) FiltersResponsePtrOutput {
	return o.ApplyT(func(v FiltersResponse) *FiltersResponse {
		return &v
	}).(FiltersResponsePtrOutput)
}

// The list of filters on meters (GUID), mandatory for budgets of usage category.
func (o FiltersResponseOutput) Meters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FiltersResponse) []string { return v.Meters }).(pulumi.StringArrayOutput)
}

// The list of filters on resource groups, allowed at subscription level only.
func (o FiltersResponseOutput) ResourceGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FiltersResponse) []string { return v.ResourceGroups }).(pulumi.StringArrayOutput)
}

// The list of filters on resources.
func (o FiltersResponseOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FiltersResponse) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

// The dictionary of filters on tags.
func (o FiltersResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FiltersResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type FiltersResponsePtrOutput struct{ *pulumi.OutputState }

func (FiltersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FiltersResponse)(nil)).Elem()
}

func (o FiltersResponsePtrOutput) ToFiltersResponsePtrOutput() FiltersResponsePtrOutput {
	return o
}

func (o FiltersResponsePtrOutput) ToFiltersResponsePtrOutputWithContext(ctx context.Context) FiltersResponsePtrOutput {
	return o
}

func (o FiltersResponsePtrOutput) Elem() FiltersResponseOutput {
	return o.ApplyT(func(v *FiltersResponse) FiltersResponse { return *v }).(FiltersResponseOutput)
}

// The list of filters on meters (GUID), mandatory for budgets of usage category.
func (o FiltersResponsePtrOutput) Meters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FiltersResponse) []string {
		if v == nil {
			return nil
		}
		return v.Meters
	}).(pulumi.StringArrayOutput)
}

// The list of filters on resource groups, allowed at subscription level only.
func (o FiltersResponsePtrOutput) ResourceGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FiltersResponse) []string {
		if v == nil {
			return nil
		}
		return v.ResourceGroups
	}).(pulumi.StringArrayOutput)
}

// The list of filters on resources.
func (o FiltersResponsePtrOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FiltersResponse) []string {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(pulumi.StringArrayOutput)
}

// The dictionary of filters on tags.
func (o FiltersResponsePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FiltersResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(BudgetTypeOutput{})
	pulumi.RegisterOutputType(BudgetByResourceGroupNameTypeOutput{})
	pulumi.RegisterOutputType(BudgetPropertiesOutput{})
	pulumi.RegisterOutputType(BudgetPropertiesPtrOutput{})
	pulumi.RegisterOutputType(BudgetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(BudgetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(BudgetTimePeriodOutput{})
	pulumi.RegisterOutputType(BudgetTimePeriodPtrOutput{})
	pulumi.RegisterOutputType(BudgetTimePeriodResponseOutput{})
	pulumi.RegisterOutputType(BudgetTimePeriodResponsePtrOutput{})
	pulumi.RegisterOutputType(CurrentSpendOutput{})
	pulumi.RegisterOutputType(CurrentSpendResponseOutput{})
	pulumi.RegisterOutputType(CurrentSpendResponsePtrOutput{})
	pulumi.RegisterOutputType(FiltersOutput{})
	pulumi.RegisterOutputType(FiltersPtrOutput{})
	pulumi.RegisterOutputType(FiltersResponseOutput{})
	pulumi.RegisterOutputType(FiltersResponsePtrOutput{})
}
