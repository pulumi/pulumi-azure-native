// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package servicefabric

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The application resource.
type ApplicationType struct {
	// Azure resource etag.
	Etag string `pulumi:"etag"`
	// Describes the managed identities for an Azure resource.
	Identity *ManagedIdentityResponse `pulumi:"identity"`
	// It will be deprecated in New API, resource location depends on the parent resource.
	Location *string `pulumi:"location"`
	// Azure resource name.
	Name string `pulumi:"name"`
	// The application resource properties.
	Properties ApplicationResourcePropertiesResponse `pulumi:"properties"`
	// Azure resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Azure resource type.
	Type string `pulumi:"type"`
}

// ApplicationTypeInput is an input type that accepts ApplicationTypeArgs and ApplicationTypeOutput values.
// You can construct a concrete instance of `ApplicationTypeInput` via:
//
//          ApplicationTypeArgs{...}
type ApplicationTypeInput interface {
	pulumi.Input

	ToApplicationTypeOutput() ApplicationTypeOutput
	ToApplicationTypeOutputWithContext(context.Context) ApplicationTypeOutput
}

// The application resource.
type ApplicationTypeArgs struct {
	// Azure resource etag.
	Etag pulumi.StringInput `pulumi:"etag"`
	// Describes the managed identities for an Azure resource.
	Identity ManagedIdentityResponsePtrInput `pulumi:"identity"`
	// It will be deprecated in New API, resource location depends on the parent resource.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Azure resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// The application resource properties.
	Properties ApplicationResourcePropertiesResponseInput `pulumi:"properties"`
	// Azure resource tags.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Azure resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ApplicationTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationType)(nil)).Elem()
}

func (i ApplicationTypeArgs) ToApplicationTypeOutput() ApplicationTypeOutput {
	return i.ToApplicationTypeOutputWithContext(context.Background())
}

func (i ApplicationTypeArgs) ToApplicationTypeOutputWithContext(ctx context.Context) ApplicationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeOutput)
}

// The application resource.
type ApplicationTypeOutput struct{ *pulumi.OutputState }

func (ApplicationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationType)(nil)).Elem()
}

func (o ApplicationTypeOutput) ToApplicationTypeOutput() ApplicationTypeOutput {
	return o
}

func (o ApplicationTypeOutput) ToApplicationTypeOutputWithContext(ctx context.Context) ApplicationTypeOutput {
	return o
}

// Azure resource etag.
func (o ApplicationTypeOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationType) string { return v.Etag }).(pulumi.StringOutput)
}

// Describes the managed identities for an Azure resource.
func (o ApplicationTypeOutput) Identity() ManagedIdentityResponsePtrOutput {
	return o.ApplyT(func(v ApplicationType) *ManagedIdentityResponse { return v.Identity }).(ManagedIdentityResponsePtrOutput)
}

// It will be deprecated in New API, resource location depends on the parent resource.
func (o ApplicationTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Azure resource name.
func (o ApplicationTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationType) string { return v.Name }).(pulumi.StringOutput)
}

// The application resource properties.
func (o ApplicationTypeOutput) Properties() ApplicationResourcePropertiesResponseOutput {
	return o.ApplyT(func(v ApplicationType) ApplicationResourcePropertiesResponse { return v.Properties }).(ApplicationResourcePropertiesResponseOutput)
}

// Azure resource tags.
func (o ApplicationTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ApplicationType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure resource type.
func (o ApplicationTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationType) string { return v.Type }).(pulumi.StringOutput)
}

// Defines a map that contains specific application delta health policies for different applications.
// Each entry specifies as key the application name and as value an ApplicationDeltaHealthPolicy used to evaluate the application health when upgrading the cluster.
// The application name should include the 'fabric:' URI scheme.
// The map is empty by default.
type ApplicationDeltaHealthPolicyMap struct {
}

// ApplicationDeltaHealthPolicyMapInput is an input type that accepts ApplicationDeltaHealthPolicyMap and ApplicationDeltaHealthPolicyMapOutput values.
// You can construct a concrete instance of `ApplicationDeltaHealthPolicyMapInput` via:
//
//          ApplicationDeltaHealthPolicyMap{ "key": ApplicationDeltaHealthPolicyArgs{...} }
type ApplicationDeltaHealthPolicyMapInput interface {
	pulumi.Input

	ToApplicationDeltaHealthPolicyMapOutput() ApplicationDeltaHealthPolicyMapOutput
	ToApplicationDeltaHealthPolicyMapOutputWithContext(context.Context) ApplicationDeltaHealthPolicyMapOutput
}

// Defines a map that contains specific application delta health policies for different applications.
// Each entry specifies as key the application name and as value an ApplicationDeltaHealthPolicy used to evaluate the application health when upgrading the cluster.
// The application name should include the 'fabric:' URI scheme.
// The map is empty by default.
type ApplicationDeltaHealthPolicyMapArgs struct {
}

func (ApplicationDeltaHealthPolicyMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationDeltaHealthPolicyMap)(nil)).Elem()
}

func (i ApplicationDeltaHealthPolicyMapArgs) ToApplicationDeltaHealthPolicyMapOutput() ApplicationDeltaHealthPolicyMapOutput {
	return i.ToApplicationDeltaHealthPolicyMapOutputWithContext(context.Background())
}

func (i ApplicationDeltaHealthPolicyMapArgs) ToApplicationDeltaHealthPolicyMapOutputWithContext(ctx context.Context) ApplicationDeltaHealthPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationDeltaHealthPolicyMapOutput)
}

func (i ApplicationDeltaHealthPolicyMapArgs) ToApplicationDeltaHealthPolicyMapPtrOutput() ApplicationDeltaHealthPolicyMapPtrOutput {
	return i.ToApplicationDeltaHealthPolicyMapPtrOutputWithContext(context.Background())
}

func (i ApplicationDeltaHealthPolicyMapArgs) ToApplicationDeltaHealthPolicyMapPtrOutputWithContext(ctx context.Context) ApplicationDeltaHealthPolicyMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationDeltaHealthPolicyMapOutput).ToApplicationDeltaHealthPolicyMapPtrOutputWithContext(ctx)
}

// ApplicationDeltaHealthPolicyMapPtrInput is an input type that accepts ApplicationDeltaHealthPolicyMapArgs, ApplicationDeltaHealthPolicyMapPtr and ApplicationDeltaHealthPolicyMapPtrOutput values.
// You can construct a concrete instance of `ApplicationDeltaHealthPolicyMapPtrInput` via:
//
//          ApplicationDeltaHealthPolicyMapArgs{...}
//
//  or:
//
//          nil
type ApplicationDeltaHealthPolicyMapPtrInput interface {
	pulumi.Input

	ToApplicationDeltaHealthPolicyMapPtrOutput() ApplicationDeltaHealthPolicyMapPtrOutput
	ToApplicationDeltaHealthPolicyMapPtrOutputWithContext(context.Context) ApplicationDeltaHealthPolicyMapPtrOutput
}

type applicationDeltaHealthPolicyMapPtrType ApplicationDeltaHealthPolicyMapArgs

func ApplicationDeltaHealthPolicyMapPtr(v *ApplicationDeltaHealthPolicyMapArgs) ApplicationDeltaHealthPolicyMapPtrInput {
	return (*applicationDeltaHealthPolicyMapPtrType)(v)
}

func (*applicationDeltaHealthPolicyMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationDeltaHealthPolicyMap)(nil)).Elem()
}

func (i *applicationDeltaHealthPolicyMapPtrType) ToApplicationDeltaHealthPolicyMapPtrOutput() ApplicationDeltaHealthPolicyMapPtrOutput {
	return i.ToApplicationDeltaHealthPolicyMapPtrOutputWithContext(context.Background())
}

func (i *applicationDeltaHealthPolicyMapPtrType) ToApplicationDeltaHealthPolicyMapPtrOutputWithContext(ctx context.Context) ApplicationDeltaHealthPolicyMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationDeltaHealthPolicyMapPtrOutput)
}

// Defines a map that contains specific application delta health policies for different applications.
// Each entry specifies as key the application name and as value an ApplicationDeltaHealthPolicy used to evaluate the application health when upgrading the cluster.
// The application name should include the 'fabric:' URI scheme.
// The map is empty by default.
type ApplicationDeltaHealthPolicyMapOutput struct{ *pulumi.OutputState }

func (ApplicationDeltaHealthPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationDeltaHealthPolicyMap)(nil)).Elem()
}

func (o ApplicationDeltaHealthPolicyMapOutput) ToApplicationDeltaHealthPolicyMapOutput() ApplicationDeltaHealthPolicyMapOutput {
	return o
}

func (o ApplicationDeltaHealthPolicyMapOutput) ToApplicationDeltaHealthPolicyMapOutputWithContext(ctx context.Context) ApplicationDeltaHealthPolicyMapOutput {
	return o
}

func (o ApplicationDeltaHealthPolicyMapOutput) ToApplicationDeltaHealthPolicyMapPtrOutput() ApplicationDeltaHealthPolicyMapPtrOutput {
	return o.ToApplicationDeltaHealthPolicyMapPtrOutputWithContext(context.Background())
}

func (o ApplicationDeltaHealthPolicyMapOutput) ToApplicationDeltaHealthPolicyMapPtrOutputWithContext(ctx context.Context) ApplicationDeltaHealthPolicyMapPtrOutput {
	return o.ApplyT(func(v ApplicationDeltaHealthPolicyMap) *ApplicationDeltaHealthPolicyMap {
		return &v
	}).(ApplicationDeltaHealthPolicyMapPtrOutput)
}

type ApplicationDeltaHealthPolicyMapPtrOutput struct{ *pulumi.OutputState }

func (ApplicationDeltaHealthPolicyMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationDeltaHealthPolicyMap)(nil)).Elem()
}

func (o ApplicationDeltaHealthPolicyMapPtrOutput) ToApplicationDeltaHealthPolicyMapPtrOutput() ApplicationDeltaHealthPolicyMapPtrOutput {
	return o
}

func (o ApplicationDeltaHealthPolicyMapPtrOutput) ToApplicationDeltaHealthPolicyMapPtrOutputWithContext(ctx context.Context) ApplicationDeltaHealthPolicyMapPtrOutput {
	return o
}

func (o ApplicationDeltaHealthPolicyMapPtrOutput) Elem() ApplicationDeltaHealthPolicyMapOutput {
	return o.ApplyT(func(v *ApplicationDeltaHealthPolicyMap) ApplicationDeltaHealthPolicyMap { return *v }).(ApplicationDeltaHealthPolicyMapOutput)
}

// Defines a map that contains specific application delta health policies for different applications.
// Each entry specifies as key the application name and as value an ApplicationDeltaHealthPolicy used to evaluate the application health when upgrading the cluster.
// The application name should include the 'fabric:' URI scheme.
// The map is empty by default.
type ApplicationDeltaHealthPolicyMapResponse struct {
}

// ApplicationDeltaHealthPolicyMapResponseInput is an input type that accepts ApplicationDeltaHealthPolicyMapResponseArgs and ApplicationDeltaHealthPolicyMapResponseOutput values.
// You can construct a concrete instance of `ApplicationDeltaHealthPolicyMapResponseInput` via:
//
//          ApplicationDeltaHealthPolicyMapResponseArgs{...}
type ApplicationDeltaHealthPolicyMapResponseInput interface {
	pulumi.Input

	ToApplicationDeltaHealthPolicyMapResponseOutput() ApplicationDeltaHealthPolicyMapResponseOutput
	ToApplicationDeltaHealthPolicyMapResponseOutputWithContext(context.Context) ApplicationDeltaHealthPolicyMapResponseOutput
}

// Defines a map that contains specific application delta health policies for different applications.
// Each entry specifies as key the application name and as value an ApplicationDeltaHealthPolicy used to evaluate the application health when upgrading the cluster.
// The application name should include the 'fabric:' URI scheme.
// The map is empty by default.
type ApplicationDeltaHealthPolicyMapResponseArgs struct {
}

func (ApplicationDeltaHealthPolicyMapResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationDeltaHealthPolicyMapResponse)(nil)).Elem()
}

func (i ApplicationDeltaHealthPolicyMapResponseArgs) ToApplicationDeltaHealthPolicyMapResponseOutput() ApplicationDeltaHealthPolicyMapResponseOutput {
	return i.ToApplicationDeltaHealthPolicyMapResponseOutputWithContext(context.Background())
}

func (i ApplicationDeltaHealthPolicyMapResponseArgs) ToApplicationDeltaHealthPolicyMapResponseOutputWithContext(ctx context.Context) ApplicationDeltaHealthPolicyMapResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationDeltaHealthPolicyMapResponseOutput)
}

func (i ApplicationDeltaHealthPolicyMapResponseArgs) ToApplicationDeltaHealthPolicyMapResponsePtrOutput() ApplicationDeltaHealthPolicyMapResponsePtrOutput {
	return i.ToApplicationDeltaHealthPolicyMapResponsePtrOutputWithContext(context.Background())
}

func (i ApplicationDeltaHealthPolicyMapResponseArgs) ToApplicationDeltaHealthPolicyMapResponsePtrOutputWithContext(ctx context.Context) ApplicationDeltaHealthPolicyMapResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationDeltaHealthPolicyMapResponseOutput).ToApplicationDeltaHealthPolicyMapResponsePtrOutputWithContext(ctx)
}

// ApplicationDeltaHealthPolicyMapResponsePtrInput is an input type that accepts ApplicationDeltaHealthPolicyMapResponseArgs, ApplicationDeltaHealthPolicyMapResponsePtr and ApplicationDeltaHealthPolicyMapResponsePtrOutput values.
// You can construct a concrete instance of `ApplicationDeltaHealthPolicyMapResponsePtrInput` via:
//
//          ApplicationDeltaHealthPolicyMapResponseArgs{...}
//
//  or:
//
//          nil
type ApplicationDeltaHealthPolicyMapResponsePtrInput interface {
	pulumi.Input

	ToApplicationDeltaHealthPolicyMapResponsePtrOutput() ApplicationDeltaHealthPolicyMapResponsePtrOutput
	ToApplicationDeltaHealthPolicyMapResponsePtrOutputWithContext(context.Context) ApplicationDeltaHealthPolicyMapResponsePtrOutput
}

type applicationDeltaHealthPolicyMapResponsePtrType ApplicationDeltaHealthPolicyMapResponseArgs

func ApplicationDeltaHealthPolicyMapResponsePtr(v *ApplicationDeltaHealthPolicyMapResponseArgs) ApplicationDeltaHealthPolicyMapResponsePtrInput {
	return (*applicationDeltaHealthPolicyMapResponsePtrType)(v)
}

func (*applicationDeltaHealthPolicyMapResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationDeltaHealthPolicyMapResponse)(nil)).Elem()
}

func (i *applicationDeltaHealthPolicyMapResponsePtrType) ToApplicationDeltaHealthPolicyMapResponsePtrOutput() ApplicationDeltaHealthPolicyMapResponsePtrOutput {
	return i.ToApplicationDeltaHealthPolicyMapResponsePtrOutputWithContext(context.Background())
}

func (i *applicationDeltaHealthPolicyMapResponsePtrType) ToApplicationDeltaHealthPolicyMapResponsePtrOutputWithContext(ctx context.Context) ApplicationDeltaHealthPolicyMapResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationDeltaHealthPolicyMapResponsePtrOutput)
}

// Defines a map that contains specific application delta health policies for different applications.
// Each entry specifies as key the application name and as value an ApplicationDeltaHealthPolicy used to evaluate the application health when upgrading the cluster.
// The application name should include the 'fabric:' URI scheme.
// The map is empty by default.
type ApplicationDeltaHealthPolicyMapResponseOutput struct{ *pulumi.OutputState }

func (ApplicationDeltaHealthPolicyMapResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationDeltaHealthPolicyMapResponse)(nil)).Elem()
}

func (o ApplicationDeltaHealthPolicyMapResponseOutput) ToApplicationDeltaHealthPolicyMapResponseOutput() ApplicationDeltaHealthPolicyMapResponseOutput {
	return o
}

func (o ApplicationDeltaHealthPolicyMapResponseOutput) ToApplicationDeltaHealthPolicyMapResponseOutputWithContext(ctx context.Context) ApplicationDeltaHealthPolicyMapResponseOutput {
	return o
}

func (o ApplicationDeltaHealthPolicyMapResponseOutput) ToApplicationDeltaHealthPolicyMapResponsePtrOutput() ApplicationDeltaHealthPolicyMapResponsePtrOutput {
	return o.ToApplicationDeltaHealthPolicyMapResponsePtrOutputWithContext(context.Background())
}

func (o ApplicationDeltaHealthPolicyMapResponseOutput) ToApplicationDeltaHealthPolicyMapResponsePtrOutputWithContext(ctx context.Context) ApplicationDeltaHealthPolicyMapResponsePtrOutput {
	return o.ApplyT(func(v ApplicationDeltaHealthPolicyMapResponse) *ApplicationDeltaHealthPolicyMapResponse {
		return &v
	}).(ApplicationDeltaHealthPolicyMapResponsePtrOutput)
}

type ApplicationDeltaHealthPolicyMapResponsePtrOutput struct{ *pulumi.OutputState }

func (ApplicationDeltaHealthPolicyMapResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationDeltaHealthPolicyMapResponse)(nil)).Elem()
}

func (o ApplicationDeltaHealthPolicyMapResponsePtrOutput) ToApplicationDeltaHealthPolicyMapResponsePtrOutput() ApplicationDeltaHealthPolicyMapResponsePtrOutput {
	return o
}

func (o ApplicationDeltaHealthPolicyMapResponsePtrOutput) ToApplicationDeltaHealthPolicyMapResponsePtrOutputWithContext(ctx context.Context) ApplicationDeltaHealthPolicyMapResponsePtrOutput {
	return o
}

func (o ApplicationDeltaHealthPolicyMapResponsePtrOutput) Elem() ApplicationDeltaHealthPolicyMapResponseOutput {
	return o.ApplyT(func(v *ApplicationDeltaHealthPolicyMapResponse) ApplicationDeltaHealthPolicyMapResponse { return *v }).(ApplicationDeltaHealthPolicyMapResponseOutput)
}

// Defines a map that contains specific application health policies for different applications.
// Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health.
// The application name should include the 'fabric:' URI scheme.
// The map is empty by default.
type ApplicationHealthPolicyMap struct {
}

// ApplicationHealthPolicyMapInput is an input type that accepts ApplicationHealthPolicyMap and ApplicationHealthPolicyMapOutput values.
// You can construct a concrete instance of `ApplicationHealthPolicyMapInput` via:
//
//          ApplicationHealthPolicyMap{ "key": ApplicationHealthPolicyArgs{...} }
type ApplicationHealthPolicyMapInput interface {
	pulumi.Input

	ToApplicationHealthPolicyMapOutput() ApplicationHealthPolicyMapOutput
	ToApplicationHealthPolicyMapOutputWithContext(context.Context) ApplicationHealthPolicyMapOutput
}

// Defines a map that contains specific application health policies for different applications.
// Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health.
// The application name should include the 'fabric:' URI scheme.
// The map is empty by default.
type ApplicationHealthPolicyMapArgs struct {
}

func (ApplicationHealthPolicyMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationHealthPolicyMap)(nil)).Elem()
}

func (i ApplicationHealthPolicyMapArgs) ToApplicationHealthPolicyMapOutput() ApplicationHealthPolicyMapOutput {
	return i.ToApplicationHealthPolicyMapOutputWithContext(context.Background())
}

func (i ApplicationHealthPolicyMapArgs) ToApplicationHealthPolicyMapOutputWithContext(ctx context.Context) ApplicationHealthPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationHealthPolicyMapOutput)
}

func (i ApplicationHealthPolicyMapArgs) ToApplicationHealthPolicyMapPtrOutput() ApplicationHealthPolicyMapPtrOutput {
	return i.ToApplicationHealthPolicyMapPtrOutputWithContext(context.Background())
}

func (i ApplicationHealthPolicyMapArgs) ToApplicationHealthPolicyMapPtrOutputWithContext(ctx context.Context) ApplicationHealthPolicyMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationHealthPolicyMapOutput).ToApplicationHealthPolicyMapPtrOutputWithContext(ctx)
}

// ApplicationHealthPolicyMapPtrInput is an input type that accepts ApplicationHealthPolicyMapArgs, ApplicationHealthPolicyMapPtr and ApplicationHealthPolicyMapPtrOutput values.
// You can construct a concrete instance of `ApplicationHealthPolicyMapPtrInput` via:
//
//          ApplicationHealthPolicyMapArgs{...}
//
//  or:
//
//          nil
type ApplicationHealthPolicyMapPtrInput interface {
	pulumi.Input

	ToApplicationHealthPolicyMapPtrOutput() ApplicationHealthPolicyMapPtrOutput
	ToApplicationHealthPolicyMapPtrOutputWithContext(context.Context) ApplicationHealthPolicyMapPtrOutput
}

type applicationHealthPolicyMapPtrType ApplicationHealthPolicyMapArgs

func ApplicationHealthPolicyMapPtr(v *ApplicationHealthPolicyMapArgs) ApplicationHealthPolicyMapPtrInput {
	return (*applicationHealthPolicyMapPtrType)(v)
}

func (*applicationHealthPolicyMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationHealthPolicyMap)(nil)).Elem()
}

func (i *applicationHealthPolicyMapPtrType) ToApplicationHealthPolicyMapPtrOutput() ApplicationHealthPolicyMapPtrOutput {
	return i.ToApplicationHealthPolicyMapPtrOutputWithContext(context.Background())
}

func (i *applicationHealthPolicyMapPtrType) ToApplicationHealthPolicyMapPtrOutputWithContext(ctx context.Context) ApplicationHealthPolicyMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationHealthPolicyMapPtrOutput)
}

// Defines a map that contains specific application health policies for different applications.
// Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health.
// The application name should include the 'fabric:' URI scheme.
// The map is empty by default.
type ApplicationHealthPolicyMapOutput struct{ *pulumi.OutputState }

func (ApplicationHealthPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationHealthPolicyMap)(nil)).Elem()
}

func (o ApplicationHealthPolicyMapOutput) ToApplicationHealthPolicyMapOutput() ApplicationHealthPolicyMapOutput {
	return o
}

func (o ApplicationHealthPolicyMapOutput) ToApplicationHealthPolicyMapOutputWithContext(ctx context.Context) ApplicationHealthPolicyMapOutput {
	return o
}

func (o ApplicationHealthPolicyMapOutput) ToApplicationHealthPolicyMapPtrOutput() ApplicationHealthPolicyMapPtrOutput {
	return o.ToApplicationHealthPolicyMapPtrOutputWithContext(context.Background())
}

func (o ApplicationHealthPolicyMapOutput) ToApplicationHealthPolicyMapPtrOutputWithContext(ctx context.Context) ApplicationHealthPolicyMapPtrOutput {
	return o.ApplyT(func(v ApplicationHealthPolicyMap) *ApplicationHealthPolicyMap {
		return &v
	}).(ApplicationHealthPolicyMapPtrOutput)
}

type ApplicationHealthPolicyMapPtrOutput struct{ *pulumi.OutputState }

func (ApplicationHealthPolicyMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationHealthPolicyMap)(nil)).Elem()
}

func (o ApplicationHealthPolicyMapPtrOutput) ToApplicationHealthPolicyMapPtrOutput() ApplicationHealthPolicyMapPtrOutput {
	return o
}

func (o ApplicationHealthPolicyMapPtrOutput) ToApplicationHealthPolicyMapPtrOutputWithContext(ctx context.Context) ApplicationHealthPolicyMapPtrOutput {
	return o
}

func (o ApplicationHealthPolicyMapPtrOutput) Elem() ApplicationHealthPolicyMapOutput {
	return o.ApplyT(func(v *ApplicationHealthPolicyMap) ApplicationHealthPolicyMap { return *v }).(ApplicationHealthPolicyMapOutput)
}

// Defines a map that contains specific application health policies for different applications.
// Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health.
// The application name should include the 'fabric:' URI scheme.
// The map is empty by default.
type ApplicationHealthPolicyMapResponse struct {
}

// ApplicationHealthPolicyMapResponseInput is an input type that accepts ApplicationHealthPolicyMapResponseArgs and ApplicationHealthPolicyMapResponseOutput values.
// You can construct a concrete instance of `ApplicationHealthPolicyMapResponseInput` via:
//
//          ApplicationHealthPolicyMapResponseArgs{...}
type ApplicationHealthPolicyMapResponseInput interface {
	pulumi.Input

	ToApplicationHealthPolicyMapResponseOutput() ApplicationHealthPolicyMapResponseOutput
	ToApplicationHealthPolicyMapResponseOutputWithContext(context.Context) ApplicationHealthPolicyMapResponseOutput
}

// Defines a map that contains specific application health policies for different applications.
// Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health.
// The application name should include the 'fabric:' URI scheme.
// The map is empty by default.
type ApplicationHealthPolicyMapResponseArgs struct {
}

func (ApplicationHealthPolicyMapResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationHealthPolicyMapResponse)(nil)).Elem()
}

func (i ApplicationHealthPolicyMapResponseArgs) ToApplicationHealthPolicyMapResponseOutput() ApplicationHealthPolicyMapResponseOutput {
	return i.ToApplicationHealthPolicyMapResponseOutputWithContext(context.Background())
}

func (i ApplicationHealthPolicyMapResponseArgs) ToApplicationHealthPolicyMapResponseOutputWithContext(ctx context.Context) ApplicationHealthPolicyMapResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationHealthPolicyMapResponseOutput)
}

func (i ApplicationHealthPolicyMapResponseArgs) ToApplicationHealthPolicyMapResponsePtrOutput() ApplicationHealthPolicyMapResponsePtrOutput {
	return i.ToApplicationHealthPolicyMapResponsePtrOutputWithContext(context.Background())
}

func (i ApplicationHealthPolicyMapResponseArgs) ToApplicationHealthPolicyMapResponsePtrOutputWithContext(ctx context.Context) ApplicationHealthPolicyMapResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationHealthPolicyMapResponseOutput).ToApplicationHealthPolicyMapResponsePtrOutputWithContext(ctx)
}

// ApplicationHealthPolicyMapResponsePtrInput is an input type that accepts ApplicationHealthPolicyMapResponseArgs, ApplicationHealthPolicyMapResponsePtr and ApplicationHealthPolicyMapResponsePtrOutput values.
// You can construct a concrete instance of `ApplicationHealthPolicyMapResponsePtrInput` via:
//
//          ApplicationHealthPolicyMapResponseArgs{...}
//
//  or:
//
//          nil
type ApplicationHealthPolicyMapResponsePtrInput interface {
	pulumi.Input

	ToApplicationHealthPolicyMapResponsePtrOutput() ApplicationHealthPolicyMapResponsePtrOutput
	ToApplicationHealthPolicyMapResponsePtrOutputWithContext(context.Context) ApplicationHealthPolicyMapResponsePtrOutput
}

type applicationHealthPolicyMapResponsePtrType ApplicationHealthPolicyMapResponseArgs

func ApplicationHealthPolicyMapResponsePtr(v *ApplicationHealthPolicyMapResponseArgs) ApplicationHealthPolicyMapResponsePtrInput {
	return (*applicationHealthPolicyMapResponsePtrType)(v)
}

func (*applicationHealthPolicyMapResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationHealthPolicyMapResponse)(nil)).Elem()
}

func (i *applicationHealthPolicyMapResponsePtrType) ToApplicationHealthPolicyMapResponsePtrOutput() ApplicationHealthPolicyMapResponsePtrOutput {
	return i.ToApplicationHealthPolicyMapResponsePtrOutputWithContext(context.Background())
}

func (i *applicationHealthPolicyMapResponsePtrType) ToApplicationHealthPolicyMapResponsePtrOutputWithContext(ctx context.Context) ApplicationHealthPolicyMapResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationHealthPolicyMapResponsePtrOutput)
}

// Defines a map that contains specific application health policies for different applications.
// Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health.
// The application name should include the 'fabric:' URI scheme.
// The map is empty by default.
type ApplicationHealthPolicyMapResponseOutput struct{ *pulumi.OutputState }

func (ApplicationHealthPolicyMapResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationHealthPolicyMapResponse)(nil)).Elem()
}

func (o ApplicationHealthPolicyMapResponseOutput) ToApplicationHealthPolicyMapResponseOutput() ApplicationHealthPolicyMapResponseOutput {
	return o
}

func (o ApplicationHealthPolicyMapResponseOutput) ToApplicationHealthPolicyMapResponseOutputWithContext(ctx context.Context) ApplicationHealthPolicyMapResponseOutput {
	return o
}

func (o ApplicationHealthPolicyMapResponseOutput) ToApplicationHealthPolicyMapResponsePtrOutput() ApplicationHealthPolicyMapResponsePtrOutput {
	return o.ToApplicationHealthPolicyMapResponsePtrOutputWithContext(context.Background())
}

func (o ApplicationHealthPolicyMapResponseOutput) ToApplicationHealthPolicyMapResponsePtrOutputWithContext(ctx context.Context) ApplicationHealthPolicyMapResponsePtrOutput {
	return o.ApplyT(func(v ApplicationHealthPolicyMapResponse) *ApplicationHealthPolicyMapResponse {
		return &v
	}).(ApplicationHealthPolicyMapResponsePtrOutput)
}

type ApplicationHealthPolicyMapResponsePtrOutput struct{ *pulumi.OutputState }

func (ApplicationHealthPolicyMapResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationHealthPolicyMapResponse)(nil)).Elem()
}

func (o ApplicationHealthPolicyMapResponsePtrOutput) ToApplicationHealthPolicyMapResponsePtrOutput() ApplicationHealthPolicyMapResponsePtrOutput {
	return o
}

func (o ApplicationHealthPolicyMapResponsePtrOutput) ToApplicationHealthPolicyMapResponsePtrOutputWithContext(ctx context.Context) ApplicationHealthPolicyMapResponsePtrOutput {
	return o
}

func (o ApplicationHealthPolicyMapResponsePtrOutput) Elem() ApplicationHealthPolicyMapResponseOutput {
	return o.ApplyT(func(v *ApplicationHealthPolicyMapResponse) ApplicationHealthPolicyMapResponse { return *v }).(ApplicationHealthPolicyMapResponseOutput)
}

// List of application capacity metric description.
type ApplicationMetricDescriptionList struct {
}

// ApplicationMetricDescriptionListInput is an input type that accepts ApplicationMetricDescriptionListArgs and ApplicationMetricDescriptionListOutput values.
// You can construct a concrete instance of `ApplicationMetricDescriptionListInput` via:
//
//          ApplicationMetricDescriptionListArgs{...}
type ApplicationMetricDescriptionListInput interface {
	pulumi.Input

	ToApplicationMetricDescriptionListOutput() ApplicationMetricDescriptionListOutput
	ToApplicationMetricDescriptionListOutputWithContext(context.Context) ApplicationMetricDescriptionListOutput
}

// List of application capacity metric description.
type ApplicationMetricDescriptionListArgs struct {
}

func (ApplicationMetricDescriptionListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationMetricDescriptionList)(nil)).Elem()
}

func (i ApplicationMetricDescriptionListArgs) ToApplicationMetricDescriptionListOutput() ApplicationMetricDescriptionListOutput {
	return i.ToApplicationMetricDescriptionListOutputWithContext(context.Background())
}

func (i ApplicationMetricDescriptionListArgs) ToApplicationMetricDescriptionListOutputWithContext(ctx context.Context) ApplicationMetricDescriptionListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMetricDescriptionListOutput)
}

func (i ApplicationMetricDescriptionListArgs) ToApplicationMetricDescriptionListPtrOutput() ApplicationMetricDescriptionListPtrOutput {
	return i.ToApplicationMetricDescriptionListPtrOutputWithContext(context.Background())
}

func (i ApplicationMetricDescriptionListArgs) ToApplicationMetricDescriptionListPtrOutputWithContext(ctx context.Context) ApplicationMetricDescriptionListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMetricDescriptionListOutput).ToApplicationMetricDescriptionListPtrOutputWithContext(ctx)
}

// ApplicationMetricDescriptionListPtrInput is an input type that accepts ApplicationMetricDescriptionListArgs, ApplicationMetricDescriptionListPtr and ApplicationMetricDescriptionListPtrOutput values.
// You can construct a concrete instance of `ApplicationMetricDescriptionListPtrInput` via:
//
//          ApplicationMetricDescriptionListArgs{...}
//
//  or:
//
//          nil
type ApplicationMetricDescriptionListPtrInput interface {
	pulumi.Input

	ToApplicationMetricDescriptionListPtrOutput() ApplicationMetricDescriptionListPtrOutput
	ToApplicationMetricDescriptionListPtrOutputWithContext(context.Context) ApplicationMetricDescriptionListPtrOutput
}

type applicationMetricDescriptionListPtrType ApplicationMetricDescriptionListArgs

func ApplicationMetricDescriptionListPtr(v *ApplicationMetricDescriptionListArgs) ApplicationMetricDescriptionListPtrInput {
	return (*applicationMetricDescriptionListPtrType)(v)
}

func (*applicationMetricDescriptionListPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationMetricDescriptionList)(nil)).Elem()
}

func (i *applicationMetricDescriptionListPtrType) ToApplicationMetricDescriptionListPtrOutput() ApplicationMetricDescriptionListPtrOutput {
	return i.ToApplicationMetricDescriptionListPtrOutputWithContext(context.Background())
}

func (i *applicationMetricDescriptionListPtrType) ToApplicationMetricDescriptionListPtrOutputWithContext(ctx context.Context) ApplicationMetricDescriptionListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMetricDescriptionListPtrOutput)
}

// List of application capacity metric description.
type ApplicationMetricDescriptionListOutput struct{ *pulumi.OutputState }

func (ApplicationMetricDescriptionListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationMetricDescriptionList)(nil)).Elem()
}

func (o ApplicationMetricDescriptionListOutput) ToApplicationMetricDescriptionListOutput() ApplicationMetricDescriptionListOutput {
	return o
}

func (o ApplicationMetricDescriptionListOutput) ToApplicationMetricDescriptionListOutputWithContext(ctx context.Context) ApplicationMetricDescriptionListOutput {
	return o
}

func (o ApplicationMetricDescriptionListOutput) ToApplicationMetricDescriptionListPtrOutput() ApplicationMetricDescriptionListPtrOutput {
	return o.ToApplicationMetricDescriptionListPtrOutputWithContext(context.Background())
}

func (o ApplicationMetricDescriptionListOutput) ToApplicationMetricDescriptionListPtrOutputWithContext(ctx context.Context) ApplicationMetricDescriptionListPtrOutput {
	return o.ApplyT(func(v ApplicationMetricDescriptionList) *ApplicationMetricDescriptionList {
		return &v
	}).(ApplicationMetricDescriptionListPtrOutput)
}

type ApplicationMetricDescriptionListPtrOutput struct{ *pulumi.OutputState }

func (ApplicationMetricDescriptionListPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationMetricDescriptionList)(nil)).Elem()
}

func (o ApplicationMetricDescriptionListPtrOutput) ToApplicationMetricDescriptionListPtrOutput() ApplicationMetricDescriptionListPtrOutput {
	return o
}

func (o ApplicationMetricDescriptionListPtrOutput) ToApplicationMetricDescriptionListPtrOutputWithContext(ctx context.Context) ApplicationMetricDescriptionListPtrOutput {
	return o
}

func (o ApplicationMetricDescriptionListPtrOutput) Elem() ApplicationMetricDescriptionListOutput {
	return o.ApplyT(func(v *ApplicationMetricDescriptionList) ApplicationMetricDescriptionList { return *v }).(ApplicationMetricDescriptionListOutput)
}

// List of application capacity metric description.
type ApplicationMetricDescriptionListResponse struct {
}

// ApplicationMetricDescriptionListResponseInput is an input type that accepts ApplicationMetricDescriptionListResponseArgs and ApplicationMetricDescriptionListResponseOutput values.
// You can construct a concrete instance of `ApplicationMetricDescriptionListResponseInput` via:
//
//          ApplicationMetricDescriptionListResponseArgs{...}
type ApplicationMetricDescriptionListResponseInput interface {
	pulumi.Input

	ToApplicationMetricDescriptionListResponseOutput() ApplicationMetricDescriptionListResponseOutput
	ToApplicationMetricDescriptionListResponseOutputWithContext(context.Context) ApplicationMetricDescriptionListResponseOutput
}

// List of application capacity metric description.
type ApplicationMetricDescriptionListResponseArgs struct {
}

func (ApplicationMetricDescriptionListResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationMetricDescriptionListResponse)(nil)).Elem()
}

func (i ApplicationMetricDescriptionListResponseArgs) ToApplicationMetricDescriptionListResponseOutput() ApplicationMetricDescriptionListResponseOutput {
	return i.ToApplicationMetricDescriptionListResponseOutputWithContext(context.Background())
}

func (i ApplicationMetricDescriptionListResponseArgs) ToApplicationMetricDescriptionListResponseOutputWithContext(ctx context.Context) ApplicationMetricDescriptionListResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMetricDescriptionListResponseOutput)
}

func (i ApplicationMetricDescriptionListResponseArgs) ToApplicationMetricDescriptionListResponsePtrOutput() ApplicationMetricDescriptionListResponsePtrOutput {
	return i.ToApplicationMetricDescriptionListResponsePtrOutputWithContext(context.Background())
}

func (i ApplicationMetricDescriptionListResponseArgs) ToApplicationMetricDescriptionListResponsePtrOutputWithContext(ctx context.Context) ApplicationMetricDescriptionListResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMetricDescriptionListResponseOutput).ToApplicationMetricDescriptionListResponsePtrOutputWithContext(ctx)
}

// ApplicationMetricDescriptionListResponsePtrInput is an input type that accepts ApplicationMetricDescriptionListResponseArgs, ApplicationMetricDescriptionListResponsePtr and ApplicationMetricDescriptionListResponsePtrOutput values.
// You can construct a concrete instance of `ApplicationMetricDescriptionListResponsePtrInput` via:
//
//          ApplicationMetricDescriptionListResponseArgs{...}
//
//  or:
//
//          nil
type ApplicationMetricDescriptionListResponsePtrInput interface {
	pulumi.Input

	ToApplicationMetricDescriptionListResponsePtrOutput() ApplicationMetricDescriptionListResponsePtrOutput
	ToApplicationMetricDescriptionListResponsePtrOutputWithContext(context.Context) ApplicationMetricDescriptionListResponsePtrOutput
}

type applicationMetricDescriptionListResponsePtrType ApplicationMetricDescriptionListResponseArgs

func ApplicationMetricDescriptionListResponsePtr(v *ApplicationMetricDescriptionListResponseArgs) ApplicationMetricDescriptionListResponsePtrInput {
	return (*applicationMetricDescriptionListResponsePtrType)(v)
}

func (*applicationMetricDescriptionListResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationMetricDescriptionListResponse)(nil)).Elem()
}

func (i *applicationMetricDescriptionListResponsePtrType) ToApplicationMetricDescriptionListResponsePtrOutput() ApplicationMetricDescriptionListResponsePtrOutput {
	return i.ToApplicationMetricDescriptionListResponsePtrOutputWithContext(context.Background())
}

func (i *applicationMetricDescriptionListResponsePtrType) ToApplicationMetricDescriptionListResponsePtrOutputWithContext(ctx context.Context) ApplicationMetricDescriptionListResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMetricDescriptionListResponsePtrOutput)
}

// List of application capacity metric description.
type ApplicationMetricDescriptionListResponseOutput struct{ *pulumi.OutputState }

func (ApplicationMetricDescriptionListResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationMetricDescriptionListResponse)(nil)).Elem()
}

func (o ApplicationMetricDescriptionListResponseOutput) ToApplicationMetricDescriptionListResponseOutput() ApplicationMetricDescriptionListResponseOutput {
	return o
}

func (o ApplicationMetricDescriptionListResponseOutput) ToApplicationMetricDescriptionListResponseOutputWithContext(ctx context.Context) ApplicationMetricDescriptionListResponseOutput {
	return o
}

func (o ApplicationMetricDescriptionListResponseOutput) ToApplicationMetricDescriptionListResponsePtrOutput() ApplicationMetricDescriptionListResponsePtrOutput {
	return o.ToApplicationMetricDescriptionListResponsePtrOutputWithContext(context.Background())
}

func (o ApplicationMetricDescriptionListResponseOutput) ToApplicationMetricDescriptionListResponsePtrOutputWithContext(ctx context.Context) ApplicationMetricDescriptionListResponsePtrOutput {
	return o.ApplyT(func(v ApplicationMetricDescriptionListResponse) *ApplicationMetricDescriptionListResponse {
		return &v
	}).(ApplicationMetricDescriptionListResponsePtrOutput)
}

type ApplicationMetricDescriptionListResponsePtrOutput struct{ *pulumi.OutputState }

func (ApplicationMetricDescriptionListResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationMetricDescriptionListResponse)(nil)).Elem()
}

func (o ApplicationMetricDescriptionListResponsePtrOutput) ToApplicationMetricDescriptionListResponsePtrOutput() ApplicationMetricDescriptionListResponsePtrOutput {
	return o
}

func (o ApplicationMetricDescriptionListResponsePtrOutput) ToApplicationMetricDescriptionListResponsePtrOutputWithContext(ctx context.Context) ApplicationMetricDescriptionListResponsePtrOutput {
	return o
}

func (o ApplicationMetricDescriptionListResponsePtrOutput) Elem() ApplicationMetricDescriptionListResponseOutput {
	return o.ApplyT(func(v *ApplicationMetricDescriptionListResponse) ApplicationMetricDescriptionListResponse { return *v }).(ApplicationMetricDescriptionListResponseOutput)
}

// List of application parameters with overridden values from their default values specified in the application manifest.
type ApplicationParameterList struct {
}

// ApplicationParameterListInput is an input type that accepts ApplicationParameterListArgs and ApplicationParameterListOutput values.
// You can construct a concrete instance of `ApplicationParameterListInput` via:
//
//          ApplicationParameterListArgs{...}
type ApplicationParameterListInput interface {
	pulumi.Input

	ToApplicationParameterListOutput() ApplicationParameterListOutput
	ToApplicationParameterListOutputWithContext(context.Context) ApplicationParameterListOutput
}

// List of application parameters with overridden values from their default values specified in the application manifest.
type ApplicationParameterListArgs struct {
}

func (ApplicationParameterListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationParameterList)(nil)).Elem()
}

func (i ApplicationParameterListArgs) ToApplicationParameterListOutput() ApplicationParameterListOutput {
	return i.ToApplicationParameterListOutputWithContext(context.Background())
}

func (i ApplicationParameterListArgs) ToApplicationParameterListOutputWithContext(ctx context.Context) ApplicationParameterListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationParameterListOutput)
}

func (i ApplicationParameterListArgs) ToApplicationParameterListPtrOutput() ApplicationParameterListPtrOutput {
	return i.ToApplicationParameterListPtrOutputWithContext(context.Background())
}

func (i ApplicationParameterListArgs) ToApplicationParameterListPtrOutputWithContext(ctx context.Context) ApplicationParameterListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationParameterListOutput).ToApplicationParameterListPtrOutputWithContext(ctx)
}

// ApplicationParameterListPtrInput is an input type that accepts ApplicationParameterListArgs, ApplicationParameterListPtr and ApplicationParameterListPtrOutput values.
// You can construct a concrete instance of `ApplicationParameterListPtrInput` via:
//
//          ApplicationParameterListArgs{...}
//
//  or:
//
//          nil
type ApplicationParameterListPtrInput interface {
	pulumi.Input

	ToApplicationParameterListPtrOutput() ApplicationParameterListPtrOutput
	ToApplicationParameterListPtrOutputWithContext(context.Context) ApplicationParameterListPtrOutput
}

type applicationParameterListPtrType ApplicationParameterListArgs

func ApplicationParameterListPtr(v *ApplicationParameterListArgs) ApplicationParameterListPtrInput {
	return (*applicationParameterListPtrType)(v)
}

func (*applicationParameterListPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationParameterList)(nil)).Elem()
}

func (i *applicationParameterListPtrType) ToApplicationParameterListPtrOutput() ApplicationParameterListPtrOutput {
	return i.ToApplicationParameterListPtrOutputWithContext(context.Background())
}

func (i *applicationParameterListPtrType) ToApplicationParameterListPtrOutputWithContext(ctx context.Context) ApplicationParameterListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationParameterListPtrOutput)
}

// List of application parameters with overridden values from their default values specified in the application manifest.
type ApplicationParameterListOutput struct{ *pulumi.OutputState }

func (ApplicationParameterListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationParameterList)(nil)).Elem()
}

func (o ApplicationParameterListOutput) ToApplicationParameterListOutput() ApplicationParameterListOutput {
	return o
}

func (o ApplicationParameterListOutput) ToApplicationParameterListOutputWithContext(ctx context.Context) ApplicationParameterListOutput {
	return o
}

func (o ApplicationParameterListOutput) ToApplicationParameterListPtrOutput() ApplicationParameterListPtrOutput {
	return o.ToApplicationParameterListPtrOutputWithContext(context.Background())
}

func (o ApplicationParameterListOutput) ToApplicationParameterListPtrOutputWithContext(ctx context.Context) ApplicationParameterListPtrOutput {
	return o.ApplyT(func(v ApplicationParameterList) *ApplicationParameterList {
		return &v
	}).(ApplicationParameterListPtrOutput)
}

type ApplicationParameterListPtrOutput struct{ *pulumi.OutputState }

func (ApplicationParameterListPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationParameterList)(nil)).Elem()
}

func (o ApplicationParameterListPtrOutput) ToApplicationParameterListPtrOutput() ApplicationParameterListPtrOutput {
	return o
}

func (o ApplicationParameterListPtrOutput) ToApplicationParameterListPtrOutputWithContext(ctx context.Context) ApplicationParameterListPtrOutput {
	return o
}

func (o ApplicationParameterListPtrOutput) Elem() ApplicationParameterListOutput {
	return o.ApplyT(func(v *ApplicationParameterList) ApplicationParameterList { return *v }).(ApplicationParameterListOutput)
}

// List of application parameters with overridden values from their default values specified in the application manifest.
type ApplicationParameterListResponse struct {
}

// ApplicationParameterListResponseInput is an input type that accepts ApplicationParameterListResponseArgs and ApplicationParameterListResponseOutput values.
// You can construct a concrete instance of `ApplicationParameterListResponseInput` via:
//
//          ApplicationParameterListResponseArgs{...}
type ApplicationParameterListResponseInput interface {
	pulumi.Input

	ToApplicationParameterListResponseOutput() ApplicationParameterListResponseOutput
	ToApplicationParameterListResponseOutputWithContext(context.Context) ApplicationParameterListResponseOutput
}

// List of application parameters with overridden values from their default values specified in the application manifest.
type ApplicationParameterListResponseArgs struct {
}

func (ApplicationParameterListResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationParameterListResponse)(nil)).Elem()
}

func (i ApplicationParameterListResponseArgs) ToApplicationParameterListResponseOutput() ApplicationParameterListResponseOutput {
	return i.ToApplicationParameterListResponseOutputWithContext(context.Background())
}

func (i ApplicationParameterListResponseArgs) ToApplicationParameterListResponseOutputWithContext(ctx context.Context) ApplicationParameterListResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationParameterListResponseOutput)
}

func (i ApplicationParameterListResponseArgs) ToApplicationParameterListResponsePtrOutput() ApplicationParameterListResponsePtrOutput {
	return i.ToApplicationParameterListResponsePtrOutputWithContext(context.Background())
}

func (i ApplicationParameterListResponseArgs) ToApplicationParameterListResponsePtrOutputWithContext(ctx context.Context) ApplicationParameterListResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationParameterListResponseOutput).ToApplicationParameterListResponsePtrOutputWithContext(ctx)
}

// ApplicationParameterListResponsePtrInput is an input type that accepts ApplicationParameterListResponseArgs, ApplicationParameterListResponsePtr and ApplicationParameterListResponsePtrOutput values.
// You can construct a concrete instance of `ApplicationParameterListResponsePtrInput` via:
//
//          ApplicationParameterListResponseArgs{...}
//
//  or:
//
//          nil
type ApplicationParameterListResponsePtrInput interface {
	pulumi.Input

	ToApplicationParameterListResponsePtrOutput() ApplicationParameterListResponsePtrOutput
	ToApplicationParameterListResponsePtrOutputWithContext(context.Context) ApplicationParameterListResponsePtrOutput
}

type applicationParameterListResponsePtrType ApplicationParameterListResponseArgs

func ApplicationParameterListResponsePtr(v *ApplicationParameterListResponseArgs) ApplicationParameterListResponsePtrInput {
	return (*applicationParameterListResponsePtrType)(v)
}

func (*applicationParameterListResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationParameterListResponse)(nil)).Elem()
}

func (i *applicationParameterListResponsePtrType) ToApplicationParameterListResponsePtrOutput() ApplicationParameterListResponsePtrOutput {
	return i.ToApplicationParameterListResponsePtrOutputWithContext(context.Background())
}

func (i *applicationParameterListResponsePtrType) ToApplicationParameterListResponsePtrOutputWithContext(ctx context.Context) ApplicationParameterListResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationParameterListResponsePtrOutput)
}

// List of application parameters with overridden values from their default values specified in the application manifest.
type ApplicationParameterListResponseOutput struct{ *pulumi.OutputState }

func (ApplicationParameterListResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationParameterListResponse)(nil)).Elem()
}

func (o ApplicationParameterListResponseOutput) ToApplicationParameterListResponseOutput() ApplicationParameterListResponseOutput {
	return o
}

func (o ApplicationParameterListResponseOutput) ToApplicationParameterListResponseOutputWithContext(ctx context.Context) ApplicationParameterListResponseOutput {
	return o
}

func (o ApplicationParameterListResponseOutput) ToApplicationParameterListResponsePtrOutput() ApplicationParameterListResponsePtrOutput {
	return o.ToApplicationParameterListResponsePtrOutputWithContext(context.Background())
}

func (o ApplicationParameterListResponseOutput) ToApplicationParameterListResponsePtrOutputWithContext(ctx context.Context) ApplicationParameterListResponsePtrOutput {
	return o.ApplyT(func(v ApplicationParameterListResponse) *ApplicationParameterListResponse {
		return &v
	}).(ApplicationParameterListResponsePtrOutput)
}

type ApplicationParameterListResponsePtrOutput struct{ *pulumi.OutputState }

func (ApplicationParameterListResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationParameterListResponse)(nil)).Elem()
}

func (o ApplicationParameterListResponsePtrOutput) ToApplicationParameterListResponsePtrOutput() ApplicationParameterListResponsePtrOutput {
	return o
}

func (o ApplicationParameterListResponsePtrOutput) ToApplicationParameterListResponsePtrOutputWithContext(ctx context.Context) ApplicationParameterListResponsePtrOutput {
	return o
}

func (o ApplicationParameterListResponsePtrOutput) Elem() ApplicationParameterListResponseOutput {
	return o.ApplyT(func(v *ApplicationParameterListResponse) ApplicationParameterListResponse { return *v }).(ApplicationParameterListResponseOutput)
}

// The application resource properties.
type ApplicationResourceProperties struct {
	// List of user assigned identities for the application, each mapped to a friendly name.
	ManagedIdentities []ApplicationUserAssignedIdentity `pulumi:"managedIdentities"`
	// The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.
	MaximumNodes *int `pulumi:"maximumNodes"`
	// List of application capacity metric description.
	Metrics *ApplicationMetricDescriptionList `pulumi:"metrics"`
	// The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.
	MinimumNodes *int `pulumi:"minimumNodes"`
	// List of application parameters with overridden values from their default values specified in the application manifest.
	Parameters *ApplicationParameterList `pulumi:"parameters"`
	// Remove the current application capacity settings.
	RemoveApplicationCapacity *bool `pulumi:"removeApplicationCapacity"`
	// The application type name as defined in the application manifest.
	TypeName *string `pulumi:"typeName"`
	// The version of the application type as defined in the application manifest.
	TypeVersion *string `pulumi:"typeVersion"`
	// Describes the policy for a monitored application upgrade.
	UpgradePolicy *ApplicationUpgradePolicy `pulumi:"upgradePolicy"`
}

// ApplicationResourcePropertiesInput is an input type that accepts ApplicationResourcePropertiesArgs and ApplicationResourcePropertiesOutput values.
// You can construct a concrete instance of `ApplicationResourcePropertiesInput` via:
//
//          ApplicationResourcePropertiesArgs{...}
type ApplicationResourcePropertiesInput interface {
	pulumi.Input

	ToApplicationResourcePropertiesOutput() ApplicationResourcePropertiesOutput
	ToApplicationResourcePropertiesOutputWithContext(context.Context) ApplicationResourcePropertiesOutput
}

// The application resource properties.
type ApplicationResourcePropertiesArgs struct {
	// List of user assigned identities for the application, each mapped to a friendly name.
	ManagedIdentities ApplicationUserAssignedIdentityArrayInput `pulumi:"managedIdentities"`
	// The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.
	MaximumNodes pulumi.IntPtrInput `pulumi:"maximumNodes"`
	// List of application capacity metric description.
	Metrics ApplicationMetricDescriptionListPtrInput `pulumi:"metrics"`
	// The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.
	MinimumNodes pulumi.IntPtrInput `pulumi:"minimumNodes"`
	// List of application parameters with overridden values from their default values specified in the application manifest.
	Parameters ApplicationParameterListPtrInput `pulumi:"parameters"`
	// Remove the current application capacity settings.
	RemoveApplicationCapacity pulumi.BoolPtrInput `pulumi:"removeApplicationCapacity"`
	// The application type name as defined in the application manifest.
	TypeName pulumi.StringPtrInput `pulumi:"typeName"`
	// The version of the application type as defined in the application manifest.
	TypeVersion pulumi.StringPtrInput `pulumi:"typeVersion"`
	// Describes the policy for a monitored application upgrade.
	UpgradePolicy ApplicationUpgradePolicyPtrInput `pulumi:"upgradePolicy"`
}

func (ApplicationResourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationResourceProperties)(nil)).Elem()
}

func (i ApplicationResourcePropertiesArgs) ToApplicationResourcePropertiesOutput() ApplicationResourcePropertiesOutput {
	return i.ToApplicationResourcePropertiesOutputWithContext(context.Background())
}

func (i ApplicationResourcePropertiesArgs) ToApplicationResourcePropertiesOutputWithContext(ctx context.Context) ApplicationResourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationResourcePropertiesOutput)
}

func (i ApplicationResourcePropertiesArgs) ToApplicationResourcePropertiesPtrOutput() ApplicationResourcePropertiesPtrOutput {
	return i.ToApplicationResourcePropertiesPtrOutputWithContext(context.Background())
}

func (i ApplicationResourcePropertiesArgs) ToApplicationResourcePropertiesPtrOutputWithContext(ctx context.Context) ApplicationResourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationResourcePropertiesOutput).ToApplicationResourcePropertiesPtrOutputWithContext(ctx)
}

// ApplicationResourcePropertiesPtrInput is an input type that accepts ApplicationResourcePropertiesArgs, ApplicationResourcePropertiesPtr and ApplicationResourcePropertiesPtrOutput values.
// You can construct a concrete instance of `ApplicationResourcePropertiesPtrInput` via:
//
//          ApplicationResourcePropertiesArgs{...}
//
//  or:
//
//          nil
type ApplicationResourcePropertiesPtrInput interface {
	pulumi.Input

	ToApplicationResourcePropertiesPtrOutput() ApplicationResourcePropertiesPtrOutput
	ToApplicationResourcePropertiesPtrOutputWithContext(context.Context) ApplicationResourcePropertiesPtrOutput
}

type applicationResourcePropertiesPtrType ApplicationResourcePropertiesArgs

func ApplicationResourcePropertiesPtr(v *ApplicationResourcePropertiesArgs) ApplicationResourcePropertiesPtrInput {
	return (*applicationResourcePropertiesPtrType)(v)
}

func (*applicationResourcePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationResourceProperties)(nil)).Elem()
}

func (i *applicationResourcePropertiesPtrType) ToApplicationResourcePropertiesPtrOutput() ApplicationResourcePropertiesPtrOutput {
	return i.ToApplicationResourcePropertiesPtrOutputWithContext(context.Background())
}

func (i *applicationResourcePropertiesPtrType) ToApplicationResourcePropertiesPtrOutputWithContext(ctx context.Context) ApplicationResourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationResourcePropertiesPtrOutput)
}

// The application resource properties.
type ApplicationResourcePropertiesOutput struct{ *pulumi.OutputState }

func (ApplicationResourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationResourceProperties)(nil)).Elem()
}

func (o ApplicationResourcePropertiesOutput) ToApplicationResourcePropertiesOutput() ApplicationResourcePropertiesOutput {
	return o
}

func (o ApplicationResourcePropertiesOutput) ToApplicationResourcePropertiesOutputWithContext(ctx context.Context) ApplicationResourcePropertiesOutput {
	return o
}

func (o ApplicationResourcePropertiesOutput) ToApplicationResourcePropertiesPtrOutput() ApplicationResourcePropertiesPtrOutput {
	return o.ToApplicationResourcePropertiesPtrOutputWithContext(context.Background())
}

func (o ApplicationResourcePropertiesOutput) ToApplicationResourcePropertiesPtrOutputWithContext(ctx context.Context) ApplicationResourcePropertiesPtrOutput {
	return o.ApplyT(func(v ApplicationResourceProperties) *ApplicationResourceProperties {
		return &v
	}).(ApplicationResourcePropertiesPtrOutput)
}

// List of user assigned identities for the application, each mapped to a friendly name.
func (o ApplicationResourcePropertiesOutput) ManagedIdentities() ApplicationUserAssignedIdentityArrayOutput {
	return o.ApplyT(func(v ApplicationResourceProperties) []ApplicationUserAssignedIdentity { return v.ManagedIdentities }).(ApplicationUserAssignedIdentityArrayOutput)
}

// The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.
func (o ApplicationResourcePropertiesOutput) MaximumNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationResourceProperties) *int { return v.MaximumNodes }).(pulumi.IntPtrOutput)
}

// List of application capacity metric description.
func (o ApplicationResourcePropertiesOutput) Metrics() ApplicationMetricDescriptionListPtrOutput {
	return o.ApplyT(func(v ApplicationResourceProperties) *ApplicationMetricDescriptionList { return v.Metrics }).(ApplicationMetricDescriptionListPtrOutput)
}

// The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.
func (o ApplicationResourcePropertiesOutput) MinimumNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationResourceProperties) *int { return v.MinimumNodes }).(pulumi.IntPtrOutput)
}

// List of application parameters with overridden values from their default values specified in the application manifest.
func (o ApplicationResourcePropertiesOutput) Parameters() ApplicationParameterListPtrOutput {
	return o.ApplyT(func(v ApplicationResourceProperties) *ApplicationParameterList { return v.Parameters }).(ApplicationParameterListPtrOutput)
}

// Remove the current application capacity settings.
func (o ApplicationResourcePropertiesOutput) RemoveApplicationCapacity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationResourceProperties) *bool { return v.RemoveApplicationCapacity }).(pulumi.BoolPtrOutput)
}

// The application type name as defined in the application manifest.
func (o ApplicationResourcePropertiesOutput) TypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationResourceProperties) *string { return v.TypeName }).(pulumi.StringPtrOutput)
}

// The version of the application type as defined in the application manifest.
func (o ApplicationResourcePropertiesOutput) TypeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationResourceProperties) *string { return v.TypeVersion }).(pulumi.StringPtrOutput)
}

// Describes the policy for a monitored application upgrade.
func (o ApplicationResourcePropertiesOutput) UpgradePolicy() ApplicationUpgradePolicyPtrOutput {
	return o.ApplyT(func(v ApplicationResourceProperties) *ApplicationUpgradePolicy { return v.UpgradePolicy }).(ApplicationUpgradePolicyPtrOutput)
}

type ApplicationResourcePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ApplicationResourcePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationResourceProperties)(nil)).Elem()
}

func (o ApplicationResourcePropertiesPtrOutput) ToApplicationResourcePropertiesPtrOutput() ApplicationResourcePropertiesPtrOutput {
	return o
}

func (o ApplicationResourcePropertiesPtrOutput) ToApplicationResourcePropertiesPtrOutputWithContext(ctx context.Context) ApplicationResourcePropertiesPtrOutput {
	return o
}

func (o ApplicationResourcePropertiesPtrOutput) Elem() ApplicationResourcePropertiesOutput {
	return o.ApplyT(func(v *ApplicationResourceProperties) ApplicationResourceProperties { return *v }).(ApplicationResourcePropertiesOutput)
}

// List of user assigned identities for the application, each mapped to a friendly name.
func (o ApplicationResourcePropertiesPtrOutput) ManagedIdentities() ApplicationUserAssignedIdentityArrayOutput {
	return o.ApplyT(func(v *ApplicationResourceProperties) []ApplicationUserAssignedIdentity {
		if v == nil {
			return nil
		}
		return v.ManagedIdentities
	}).(ApplicationUserAssignedIdentityArrayOutput)
}

// The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.
func (o ApplicationResourcePropertiesPtrOutput) MaximumNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationResourceProperties) *int {
		if v == nil {
			return nil
		}
		return v.MaximumNodes
	}).(pulumi.IntPtrOutput)
}

// List of application capacity metric description.
func (o ApplicationResourcePropertiesPtrOutput) Metrics() ApplicationMetricDescriptionListPtrOutput {
	return o.ApplyT(func(v *ApplicationResourceProperties) *ApplicationMetricDescriptionList {
		if v == nil {
			return nil
		}
		return v.Metrics
	}).(ApplicationMetricDescriptionListPtrOutput)
}

// The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.
func (o ApplicationResourcePropertiesPtrOutput) MinimumNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationResourceProperties) *int {
		if v == nil {
			return nil
		}
		return v.MinimumNodes
	}).(pulumi.IntPtrOutput)
}

// List of application parameters with overridden values from their default values specified in the application manifest.
func (o ApplicationResourcePropertiesPtrOutput) Parameters() ApplicationParameterListPtrOutput {
	return o.ApplyT(func(v *ApplicationResourceProperties) *ApplicationParameterList {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ApplicationParameterListPtrOutput)
}

// Remove the current application capacity settings.
func (o ApplicationResourcePropertiesPtrOutput) RemoveApplicationCapacity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationResourceProperties) *bool {
		if v == nil {
			return nil
		}
		return v.RemoveApplicationCapacity
	}).(pulumi.BoolPtrOutput)
}

// The application type name as defined in the application manifest.
func (o ApplicationResourcePropertiesPtrOutput) TypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationResourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.TypeName
	}).(pulumi.StringPtrOutput)
}

// The version of the application type as defined in the application manifest.
func (o ApplicationResourcePropertiesPtrOutput) TypeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationResourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.TypeVersion
	}).(pulumi.StringPtrOutput)
}

// Describes the policy for a monitored application upgrade.
func (o ApplicationResourcePropertiesPtrOutput) UpgradePolicy() ApplicationUpgradePolicyPtrOutput {
	return o.ApplyT(func(v *ApplicationResourceProperties) *ApplicationUpgradePolicy {
		if v == nil {
			return nil
		}
		return v.UpgradePolicy
	}).(ApplicationUpgradePolicyPtrOutput)
}

// The application resource properties.
type ApplicationResourcePropertiesResponse struct {
	// List of user assigned identities for the application, each mapped to a friendly name.
	ManagedIdentities []ApplicationUserAssignedIdentityResponse `pulumi:"managedIdentities"`
	// The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.
	MaximumNodes *int `pulumi:"maximumNodes"`
	// List of application capacity metric description.
	Metrics *ApplicationMetricDescriptionListResponse `pulumi:"metrics"`
	// The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.
	MinimumNodes *int `pulumi:"minimumNodes"`
	// List of application parameters with overridden values from their default values specified in the application manifest.
	Parameters *ApplicationParameterListResponse `pulumi:"parameters"`
	// The current deployment or provisioning state, which only appears in the response
	ProvisioningState string `pulumi:"provisioningState"`
	// Remove the current application capacity settings.
	RemoveApplicationCapacity *bool `pulumi:"removeApplicationCapacity"`
	// The application type name as defined in the application manifest.
	TypeName *string `pulumi:"typeName"`
	// The version of the application type as defined in the application manifest.
	TypeVersion *string `pulumi:"typeVersion"`
	// Describes the policy for a monitored application upgrade.
	UpgradePolicy *ApplicationUpgradePolicyResponse `pulumi:"upgradePolicy"`
}

// ApplicationResourcePropertiesResponseInput is an input type that accepts ApplicationResourcePropertiesResponseArgs and ApplicationResourcePropertiesResponseOutput values.
// You can construct a concrete instance of `ApplicationResourcePropertiesResponseInput` via:
//
//          ApplicationResourcePropertiesResponseArgs{...}
type ApplicationResourcePropertiesResponseInput interface {
	pulumi.Input

	ToApplicationResourcePropertiesResponseOutput() ApplicationResourcePropertiesResponseOutput
	ToApplicationResourcePropertiesResponseOutputWithContext(context.Context) ApplicationResourcePropertiesResponseOutput
}

// The application resource properties.
type ApplicationResourcePropertiesResponseArgs struct {
	// List of user assigned identities for the application, each mapped to a friendly name.
	ManagedIdentities ApplicationUserAssignedIdentityResponseArrayInput `pulumi:"managedIdentities"`
	// The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.
	MaximumNodes pulumi.IntPtrInput `pulumi:"maximumNodes"`
	// List of application capacity metric description.
	Metrics ApplicationMetricDescriptionListResponsePtrInput `pulumi:"metrics"`
	// The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.
	MinimumNodes pulumi.IntPtrInput `pulumi:"minimumNodes"`
	// List of application parameters with overridden values from their default values specified in the application manifest.
	Parameters ApplicationParameterListResponsePtrInput `pulumi:"parameters"`
	// The current deployment or provisioning state, which only appears in the response
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// Remove the current application capacity settings.
	RemoveApplicationCapacity pulumi.BoolPtrInput `pulumi:"removeApplicationCapacity"`
	// The application type name as defined in the application manifest.
	TypeName pulumi.StringPtrInput `pulumi:"typeName"`
	// The version of the application type as defined in the application manifest.
	TypeVersion pulumi.StringPtrInput `pulumi:"typeVersion"`
	// Describes the policy for a monitored application upgrade.
	UpgradePolicy ApplicationUpgradePolicyResponsePtrInput `pulumi:"upgradePolicy"`
}

func (ApplicationResourcePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationResourcePropertiesResponse)(nil)).Elem()
}

func (i ApplicationResourcePropertiesResponseArgs) ToApplicationResourcePropertiesResponseOutput() ApplicationResourcePropertiesResponseOutput {
	return i.ToApplicationResourcePropertiesResponseOutputWithContext(context.Background())
}

func (i ApplicationResourcePropertiesResponseArgs) ToApplicationResourcePropertiesResponseOutputWithContext(ctx context.Context) ApplicationResourcePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationResourcePropertiesResponseOutput)
}

func (i ApplicationResourcePropertiesResponseArgs) ToApplicationResourcePropertiesResponsePtrOutput() ApplicationResourcePropertiesResponsePtrOutput {
	return i.ToApplicationResourcePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i ApplicationResourcePropertiesResponseArgs) ToApplicationResourcePropertiesResponsePtrOutputWithContext(ctx context.Context) ApplicationResourcePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationResourcePropertiesResponseOutput).ToApplicationResourcePropertiesResponsePtrOutputWithContext(ctx)
}

// ApplicationResourcePropertiesResponsePtrInput is an input type that accepts ApplicationResourcePropertiesResponseArgs, ApplicationResourcePropertiesResponsePtr and ApplicationResourcePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `ApplicationResourcePropertiesResponsePtrInput` via:
//
//          ApplicationResourcePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type ApplicationResourcePropertiesResponsePtrInput interface {
	pulumi.Input

	ToApplicationResourcePropertiesResponsePtrOutput() ApplicationResourcePropertiesResponsePtrOutput
	ToApplicationResourcePropertiesResponsePtrOutputWithContext(context.Context) ApplicationResourcePropertiesResponsePtrOutput
}

type applicationResourcePropertiesResponsePtrType ApplicationResourcePropertiesResponseArgs

func ApplicationResourcePropertiesResponsePtr(v *ApplicationResourcePropertiesResponseArgs) ApplicationResourcePropertiesResponsePtrInput {
	return (*applicationResourcePropertiesResponsePtrType)(v)
}

func (*applicationResourcePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationResourcePropertiesResponse)(nil)).Elem()
}

func (i *applicationResourcePropertiesResponsePtrType) ToApplicationResourcePropertiesResponsePtrOutput() ApplicationResourcePropertiesResponsePtrOutput {
	return i.ToApplicationResourcePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *applicationResourcePropertiesResponsePtrType) ToApplicationResourcePropertiesResponsePtrOutputWithContext(ctx context.Context) ApplicationResourcePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationResourcePropertiesResponsePtrOutput)
}

// The application resource properties.
type ApplicationResourcePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ApplicationResourcePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationResourcePropertiesResponse)(nil)).Elem()
}

func (o ApplicationResourcePropertiesResponseOutput) ToApplicationResourcePropertiesResponseOutput() ApplicationResourcePropertiesResponseOutput {
	return o
}

func (o ApplicationResourcePropertiesResponseOutput) ToApplicationResourcePropertiesResponseOutputWithContext(ctx context.Context) ApplicationResourcePropertiesResponseOutput {
	return o
}

func (o ApplicationResourcePropertiesResponseOutput) ToApplicationResourcePropertiesResponsePtrOutput() ApplicationResourcePropertiesResponsePtrOutput {
	return o.ToApplicationResourcePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ApplicationResourcePropertiesResponseOutput) ToApplicationResourcePropertiesResponsePtrOutputWithContext(ctx context.Context) ApplicationResourcePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ApplicationResourcePropertiesResponse) *ApplicationResourcePropertiesResponse {
		return &v
	}).(ApplicationResourcePropertiesResponsePtrOutput)
}

// List of user assigned identities for the application, each mapped to a friendly name.
func (o ApplicationResourcePropertiesResponseOutput) ManagedIdentities() ApplicationUserAssignedIdentityResponseArrayOutput {
	return o.ApplyT(func(v ApplicationResourcePropertiesResponse) []ApplicationUserAssignedIdentityResponse {
		return v.ManagedIdentities
	}).(ApplicationUserAssignedIdentityResponseArrayOutput)
}

// The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.
func (o ApplicationResourcePropertiesResponseOutput) MaximumNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationResourcePropertiesResponse) *int { return v.MaximumNodes }).(pulumi.IntPtrOutput)
}

// List of application capacity metric description.
func (o ApplicationResourcePropertiesResponseOutput) Metrics() ApplicationMetricDescriptionListResponsePtrOutput {
	return o.ApplyT(func(v ApplicationResourcePropertiesResponse) *ApplicationMetricDescriptionListResponse {
		return v.Metrics
	}).(ApplicationMetricDescriptionListResponsePtrOutput)
}

// The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.
func (o ApplicationResourcePropertiesResponseOutput) MinimumNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationResourcePropertiesResponse) *int { return v.MinimumNodes }).(pulumi.IntPtrOutput)
}

// List of application parameters with overridden values from their default values specified in the application manifest.
func (o ApplicationResourcePropertiesResponseOutput) Parameters() ApplicationParameterListResponsePtrOutput {
	return o.ApplyT(func(v ApplicationResourcePropertiesResponse) *ApplicationParameterListResponse { return v.Parameters }).(ApplicationParameterListResponsePtrOutput)
}

// The current deployment or provisioning state, which only appears in the response
func (o ApplicationResourcePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationResourcePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Remove the current application capacity settings.
func (o ApplicationResourcePropertiesResponseOutput) RemoveApplicationCapacity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationResourcePropertiesResponse) *bool { return v.RemoveApplicationCapacity }).(pulumi.BoolPtrOutput)
}

// The application type name as defined in the application manifest.
func (o ApplicationResourcePropertiesResponseOutput) TypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationResourcePropertiesResponse) *string { return v.TypeName }).(pulumi.StringPtrOutput)
}

// The version of the application type as defined in the application manifest.
func (o ApplicationResourcePropertiesResponseOutput) TypeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationResourcePropertiesResponse) *string { return v.TypeVersion }).(pulumi.StringPtrOutput)
}

// Describes the policy for a monitored application upgrade.
func (o ApplicationResourcePropertiesResponseOutput) UpgradePolicy() ApplicationUpgradePolicyResponsePtrOutput {
	return o.ApplyT(func(v ApplicationResourcePropertiesResponse) *ApplicationUpgradePolicyResponse {
		return v.UpgradePolicy
	}).(ApplicationUpgradePolicyResponsePtrOutput)
}

type ApplicationResourcePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ApplicationResourcePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationResourcePropertiesResponse)(nil)).Elem()
}

func (o ApplicationResourcePropertiesResponsePtrOutput) ToApplicationResourcePropertiesResponsePtrOutput() ApplicationResourcePropertiesResponsePtrOutput {
	return o
}

func (o ApplicationResourcePropertiesResponsePtrOutput) ToApplicationResourcePropertiesResponsePtrOutputWithContext(ctx context.Context) ApplicationResourcePropertiesResponsePtrOutput {
	return o
}

func (o ApplicationResourcePropertiesResponsePtrOutput) Elem() ApplicationResourcePropertiesResponseOutput {
	return o.ApplyT(func(v *ApplicationResourcePropertiesResponse) ApplicationResourcePropertiesResponse { return *v }).(ApplicationResourcePropertiesResponseOutput)
}

// List of user assigned identities for the application, each mapped to a friendly name.
func (o ApplicationResourcePropertiesResponsePtrOutput) ManagedIdentities() ApplicationUserAssignedIdentityResponseArrayOutput {
	return o.ApplyT(func(v *ApplicationResourcePropertiesResponse) []ApplicationUserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.ManagedIdentities
	}).(ApplicationUserAssignedIdentityResponseArrayOutput)
}

// The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.
func (o ApplicationResourcePropertiesResponsePtrOutput) MaximumNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationResourcePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaximumNodes
	}).(pulumi.IntPtrOutput)
}

// List of application capacity metric description.
func (o ApplicationResourcePropertiesResponsePtrOutput) Metrics() ApplicationMetricDescriptionListResponsePtrOutput {
	return o.ApplyT(func(v *ApplicationResourcePropertiesResponse) *ApplicationMetricDescriptionListResponse {
		if v == nil {
			return nil
		}
		return v.Metrics
	}).(ApplicationMetricDescriptionListResponsePtrOutput)
}

// The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.
func (o ApplicationResourcePropertiesResponsePtrOutput) MinimumNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationResourcePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinimumNodes
	}).(pulumi.IntPtrOutput)
}

// List of application parameters with overridden values from their default values specified in the application manifest.
func (o ApplicationResourcePropertiesResponsePtrOutput) Parameters() ApplicationParameterListResponsePtrOutput {
	return o.ApplyT(func(v *ApplicationResourcePropertiesResponse) *ApplicationParameterListResponse {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ApplicationParameterListResponsePtrOutput)
}

// The current deployment or provisioning state, which only appears in the response
func (o ApplicationResourcePropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationResourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Remove the current application capacity settings.
func (o ApplicationResourcePropertiesResponsePtrOutput) RemoveApplicationCapacity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationResourcePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RemoveApplicationCapacity
	}).(pulumi.BoolPtrOutput)
}

// The application type name as defined in the application manifest.
func (o ApplicationResourcePropertiesResponsePtrOutput) TypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationResourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.TypeName
	}).(pulumi.StringPtrOutput)
}

// The version of the application type as defined in the application manifest.
func (o ApplicationResourcePropertiesResponsePtrOutput) TypeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationResourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.TypeVersion
	}).(pulumi.StringPtrOutput)
}

// Describes the policy for a monitored application upgrade.
func (o ApplicationResourcePropertiesResponsePtrOutput) UpgradePolicy() ApplicationUpgradePolicyResponsePtrOutput {
	return o.ApplyT(func(v *ApplicationResourcePropertiesResponse) *ApplicationUpgradePolicyResponse {
		if v == nil {
			return nil
		}
		return v.UpgradePolicy
	}).(ApplicationUpgradePolicyResponsePtrOutput)
}

// The application type name resource
type ApplicationTypeType struct {
	// Azure resource etag.
	Etag string `pulumi:"etag"`
	// It will be deprecated in New API, resource location depends on the parent resource.
	Location *string `pulumi:"location"`
	// Azure resource name.
	Name string `pulumi:"name"`
	// The application type name properties
	Properties ApplicationTypeResourcePropertiesResponse `pulumi:"properties"`
	// Azure resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Azure resource type.
	Type string `pulumi:"type"`
}

// ApplicationTypeTypeInput is an input type that accepts ApplicationTypeTypeArgs and ApplicationTypeTypeOutput values.
// You can construct a concrete instance of `ApplicationTypeTypeInput` via:
//
//          ApplicationTypeTypeArgs{...}
type ApplicationTypeTypeInput interface {
	pulumi.Input

	ToApplicationTypeTypeOutput() ApplicationTypeTypeOutput
	ToApplicationTypeTypeOutputWithContext(context.Context) ApplicationTypeTypeOutput
}

// The application type name resource
type ApplicationTypeTypeArgs struct {
	// Azure resource etag.
	Etag pulumi.StringInput `pulumi:"etag"`
	// It will be deprecated in New API, resource location depends on the parent resource.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Azure resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// The application type name properties
	Properties ApplicationTypeResourcePropertiesResponseInput `pulumi:"properties"`
	// Azure resource tags.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Azure resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ApplicationTypeTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTypeType)(nil)).Elem()
}

func (i ApplicationTypeTypeArgs) ToApplicationTypeTypeOutput() ApplicationTypeTypeOutput {
	return i.ToApplicationTypeTypeOutputWithContext(context.Background())
}

func (i ApplicationTypeTypeArgs) ToApplicationTypeTypeOutputWithContext(ctx context.Context) ApplicationTypeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeTypeOutput)
}

// The application type name resource
type ApplicationTypeTypeOutput struct{ *pulumi.OutputState }

func (ApplicationTypeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTypeType)(nil)).Elem()
}

func (o ApplicationTypeTypeOutput) ToApplicationTypeTypeOutput() ApplicationTypeTypeOutput {
	return o
}

func (o ApplicationTypeTypeOutput) ToApplicationTypeTypeOutputWithContext(ctx context.Context) ApplicationTypeTypeOutput {
	return o
}

// Azure resource etag.
func (o ApplicationTypeTypeOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationTypeType) string { return v.Etag }).(pulumi.StringOutput)
}

// It will be deprecated in New API, resource location depends on the parent resource.
func (o ApplicationTypeTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationTypeType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Azure resource name.
func (o ApplicationTypeTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationTypeType) string { return v.Name }).(pulumi.StringOutput)
}

// The application type name properties
func (o ApplicationTypeTypeOutput) Properties() ApplicationTypeResourcePropertiesResponseOutput {
	return o.ApplyT(func(v ApplicationTypeType) ApplicationTypeResourcePropertiesResponse { return v.Properties }).(ApplicationTypeResourcePropertiesResponseOutput)
}

// Azure resource tags.
func (o ApplicationTypeTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ApplicationTypeType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure resource type.
func (o ApplicationTypeTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationTypeType) string { return v.Type }).(pulumi.StringOutput)
}

// List of application type parameters that can be overridden when creating or updating the application.
type ApplicationTypeParameterList struct {
}

// ApplicationTypeParameterListInput is an input type that accepts ApplicationTypeParameterListArgs and ApplicationTypeParameterListOutput values.
// You can construct a concrete instance of `ApplicationTypeParameterListInput` via:
//
//          ApplicationTypeParameterListArgs{...}
type ApplicationTypeParameterListInput interface {
	pulumi.Input

	ToApplicationTypeParameterListOutput() ApplicationTypeParameterListOutput
	ToApplicationTypeParameterListOutputWithContext(context.Context) ApplicationTypeParameterListOutput
}

// List of application type parameters that can be overridden when creating or updating the application.
type ApplicationTypeParameterListArgs struct {
}

func (ApplicationTypeParameterListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTypeParameterList)(nil)).Elem()
}

func (i ApplicationTypeParameterListArgs) ToApplicationTypeParameterListOutput() ApplicationTypeParameterListOutput {
	return i.ToApplicationTypeParameterListOutputWithContext(context.Background())
}

func (i ApplicationTypeParameterListArgs) ToApplicationTypeParameterListOutputWithContext(ctx context.Context) ApplicationTypeParameterListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeParameterListOutput)
}

// List of application type parameters that can be overridden when creating or updating the application.
type ApplicationTypeParameterListOutput struct{ *pulumi.OutputState }

func (ApplicationTypeParameterListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTypeParameterList)(nil)).Elem()
}

func (o ApplicationTypeParameterListOutput) ToApplicationTypeParameterListOutput() ApplicationTypeParameterListOutput {
	return o
}

func (o ApplicationTypeParameterListOutput) ToApplicationTypeParameterListOutputWithContext(ctx context.Context) ApplicationTypeParameterListOutput {
	return o
}

// List of application type parameters that can be overridden when creating or updating the application.
type ApplicationTypeParameterListResponse struct {
}

// ApplicationTypeParameterListResponseInput is an input type that accepts ApplicationTypeParameterListResponseArgs and ApplicationTypeParameterListResponseOutput values.
// You can construct a concrete instance of `ApplicationTypeParameterListResponseInput` via:
//
//          ApplicationTypeParameterListResponseArgs{...}
type ApplicationTypeParameterListResponseInput interface {
	pulumi.Input

	ToApplicationTypeParameterListResponseOutput() ApplicationTypeParameterListResponseOutput
	ToApplicationTypeParameterListResponseOutputWithContext(context.Context) ApplicationTypeParameterListResponseOutput
}

// List of application type parameters that can be overridden when creating or updating the application.
type ApplicationTypeParameterListResponseArgs struct {
}

func (ApplicationTypeParameterListResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTypeParameterListResponse)(nil)).Elem()
}

func (i ApplicationTypeParameterListResponseArgs) ToApplicationTypeParameterListResponseOutput() ApplicationTypeParameterListResponseOutput {
	return i.ToApplicationTypeParameterListResponseOutputWithContext(context.Background())
}

func (i ApplicationTypeParameterListResponseArgs) ToApplicationTypeParameterListResponseOutputWithContext(ctx context.Context) ApplicationTypeParameterListResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeParameterListResponseOutput)
}

func (i ApplicationTypeParameterListResponseArgs) ToApplicationTypeParameterListResponsePtrOutput() ApplicationTypeParameterListResponsePtrOutput {
	return i.ToApplicationTypeParameterListResponsePtrOutputWithContext(context.Background())
}

func (i ApplicationTypeParameterListResponseArgs) ToApplicationTypeParameterListResponsePtrOutputWithContext(ctx context.Context) ApplicationTypeParameterListResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeParameterListResponseOutput).ToApplicationTypeParameterListResponsePtrOutputWithContext(ctx)
}

// ApplicationTypeParameterListResponsePtrInput is an input type that accepts ApplicationTypeParameterListResponseArgs, ApplicationTypeParameterListResponsePtr and ApplicationTypeParameterListResponsePtrOutput values.
// You can construct a concrete instance of `ApplicationTypeParameterListResponsePtrInput` via:
//
//          ApplicationTypeParameterListResponseArgs{...}
//
//  or:
//
//          nil
type ApplicationTypeParameterListResponsePtrInput interface {
	pulumi.Input

	ToApplicationTypeParameterListResponsePtrOutput() ApplicationTypeParameterListResponsePtrOutput
	ToApplicationTypeParameterListResponsePtrOutputWithContext(context.Context) ApplicationTypeParameterListResponsePtrOutput
}

type applicationTypeParameterListResponsePtrType ApplicationTypeParameterListResponseArgs

func ApplicationTypeParameterListResponsePtr(v *ApplicationTypeParameterListResponseArgs) ApplicationTypeParameterListResponsePtrInput {
	return (*applicationTypeParameterListResponsePtrType)(v)
}

func (*applicationTypeParameterListResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationTypeParameterListResponse)(nil)).Elem()
}

func (i *applicationTypeParameterListResponsePtrType) ToApplicationTypeParameterListResponsePtrOutput() ApplicationTypeParameterListResponsePtrOutput {
	return i.ToApplicationTypeParameterListResponsePtrOutputWithContext(context.Background())
}

func (i *applicationTypeParameterListResponsePtrType) ToApplicationTypeParameterListResponsePtrOutputWithContext(ctx context.Context) ApplicationTypeParameterListResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeParameterListResponsePtrOutput)
}

// List of application type parameters that can be overridden when creating or updating the application.
type ApplicationTypeParameterListResponseOutput struct{ *pulumi.OutputState }

func (ApplicationTypeParameterListResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTypeParameterListResponse)(nil)).Elem()
}

func (o ApplicationTypeParameterListResponseOutput) ToApplicationTypeParameterListResponseOutput() ApplicationTypeParameterListResponseOutput {
	return o
}

func (o ApplicationTypeParameterListResponseOutput) ToApplicationTypeParameterListResponseOutputWithContext(ctx context.Context) ApplicationTypeParameterListResponseOutput {
	return o
}

func (o ApplicationTypeParameterListResponseOutput) ToApplicationTypeParameterListResponsePtrOutput() ApplicationTypeParameterListResponsePtrOutput {
	return o.ToApplicationTypeParameterListResponsePtrOutputWithContext(context.Background())
}

func (o ApplicationTypeParameterListResponseOutput) ToApplicationTypeParameterListResponsePtrOutputWithContext(ctx context.Context) ApplicationTypeParameterListResponsePtrOutput {
	return o.ApplyT(func(v ApplicationTypeParameterListResponse) *ApplicationTypeParameterListResponse {
		return &v
	}).(ApplicationTypeParameterListResponsePtrOutput)
}

type ApplicationTypeParameterListResponsePtrOutput struct{ *pulumi.OutputState }

func (ApplicationTypeParameterListResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationTypeParameterListResponse)(nil)).Elem()
}

func (o ApplicationTypeParameterListResponsePtrOutput) ToApplicationTypeParameterListResponsePtrOutput() ApplicationTypeParameterListResponsePtrOutput {
	return o
}

func (o ApplicationTypeParameterListResponsePtrOutput) ToApplicationTypeParameterListResponsePtrOutputWithContext(ctx context.Context) ApplicationTypeParameterListResponsePtrOutput {
	return o
}

func (o ApplicationTypeParameterListResponsePtrOutput) Elem() ApplicationTypeParameterListResponseOutput {
	return o.ApplyT(func(v *ApplicationTypeParameterListResponse) ApplicationTypeParameterListResponse { return *v }).(ApplicationTypeParameterListResponseOutput)
}

// The application type name properties
type ApplicationTypeResourceProperties struct {
}

// ApplicationTypeResourcePropertiesInput is an input type that accepts ApplicationTypeResourcePropertiesArgs and ApplicationTypeResourcePropertiesOutput values.
// You can construct a concrete instance of `ApplicationTypeResourcePropertiesInput` via:
//
//          ApplicationTypeResourcePropertiesArgs{...}
type ApplicationTypeResourcePropertiesInput interface {
	pulumi.Input

	ToApplicationTypeResourcePropertiesOutput() ApplicationTypeResourcePropertiesOutput
	ToApplicationTypeResourcePropertiesOutputWithContext(context.Context) ApplicationTypeResourcePropertiesOutput
}

// The application type name properties
type ApplicationTypeResourcePropertiesArgs struct {
}

func (ApplicationTypeResourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTypeResourceProperties)(nil)).Elem()
}

func (i ApplicationTypeResourcePropertiesArgs) ToApplicationTypeResourcePropertiesOutput() ApplicationTypeResourcePropertiesOutput {
	return i.ToApplicationTypeResourcePropertiesOutputWithContext(context.Background())
}

func (i ApplicationTypeResourcePropertiesArgs) ToApplicationTypeResourcePropertiesOutputWithContext(ctx context.Context) ApplicationTypeResourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeResourcePropertiesOutput)
}

func (i ApplicationTypeResourcePropertiesArgs) ToApplicationTypeResourcePropertiesPtrOutput() ApplicationTypeResourcePropertiesPtrOutput {
	return i.ToApplicationTypeResourcePropertiesPtrOutputWithContext(context.Background())
}

func (i ApplicationTypeResourcePropertiesArgs) ToApplicationTypeResourcePropertiesPtrOutputWithContext(ctx context.Context) ApplicationTypeResourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeResourcePropertiesOutput).ToApplicationTypeResourcePropertiesPtrOutputWithContext(ctx)
}

// ApplicationTypeResourcePropertiesPtrInput is an input type that accepts ApplicationTypeResourcePropertiesArgs, ApplicationTypeResourcePropertiesPtr and ApplicationTypeResourcePropertiesPtrOutput values.
// You can construct a concrete instance of `ApplicationTypeResourcePropertiesPtrInput` via:
//
//          ApplicationTypeResourcePropertiesArgs{...}
//
//  or:
//
//          nil
type ApplicationTypeResourcePropertiesPtrInput interface {
	pulumi.Input

	ToApplicationTypeResourcePropertiesPtrOutput() ApplicationTypeResourcePropertiesPtrOutput
	ToApplicationTypeResourcePropertiesPtrOutputWithContext(context.Context) ApplicationTypeResourcePropertiesPtrOutput
}

type applicationTypeResourcePropertiesPtrType ApplicationTypeResourcePropertiesArgs

func ApplicationTypeResourcePropertiesPtr(v *ApplicationTypeResourcePropertiesArgs) ApplicationTypeResourcePropertiesPtrInput {
	return (*applicationTypeResourcePropertiesPtrType)(v)
}

func (*applicationTypeResourcePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationTypeResourceProperties)(nil)).Elem()
}

func (i *applicationTypeResourcePropertiesPtrType) ToApplicationTypeResourcePropertiesPtrOutput() ApplicationTypeResourcePropertiesPtrOutput {
	return i.ToApplicationTypeResourcePropertiesPtrOutputWithContext(context.Background())
}

func (i *applicationTypeResourcePropertiesPtrType) ToApplicationTypeResourcePropertiesPtrOutputWithContext(ctx context.Context) ApplicationTypeResourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeResourcePropertiesPtrOutput)
}

// The application type name properties
type ApplicationTypeResourcePropertiesOutput struct{ *pulumi.OutputState }

func (ApplicationTypeResourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTypeResourceProperties)(nil)).Elem()
}

func (o ApplicationTypeResourcePropertiesOutput) ToApplicationTypeResourcePropertiesOutput() ApplicationTypeResourcePropertiesOutput {
	return o
}

func (o ApplicationTypeResourcePropertiesOutput) ToApplicationTypeResourcePropertiesOutputWithContext(ctx context.Context) ApplicationTypeResourcePropertiesOutput {
	return o
}

func (o ApplicationTypeResourcePropertiesOutput) ToApplicationTypeResourcePropertiesPtrOutput() ApplicationTypeResourcePropertiesPtrOutput {
	return o.ToApplicationTypeResourcePropertiesPtrOutputWithContext(context.Background())
}

func (o ApplicationTypeResourcePropertiesOutput) ToApplicationTypeResourcePropertiesPtrOutputWithContext(ctx context.Context) ApplicationTypeResourcePropertiesPtrOutput {
	return o.ApplyT(func(v ApplicationTypeResourceProperties) *ApplicationTypeResourceProperties {
		return &v
	}).(ApplicationTypeResourcePropertiesPtrOutput)
}

type ApplicationTypeResourcePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ApplicationTypeResourcePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationTypeResourceProperties)(nil)).Elem()
}

func (o ApplicationTypeResourcePropertiesPtrOutput) ToApplicationTypeResourcePropertiesPtrOutput() ApplicationTypeResourcePropertiesPtrOutput {
	return o
}

func (o ApplicationTypeResourcePropertiesPtrOutput) ToApplicationTypeResourcePropertiesPtrOutputWithContext(ctx context.Context) ApplicationTypeResourcePropertiesPtrOutput {
	return o
}

func (o ApplicationTypeResourcePropertiesPtrOutput) Elem() ApplicationTypeResourcePropertiesOutput {
	return o.ApplyT(func(v *ApplicationTypeResourceProperties) ApplicationTypeResourceProperties { return *v }).(ApplicationTypeResourcePropertiesOutput)
}

// The application type name properties
type ApplicationTypeResourcePropertiesResponse struct {
	// The current deployment or provisioning state, which only appears in the response.
	ProvisioningState string `pulumi:"provisioningState"`
}

// ApplicationTypeResourcePropertiesResponseInput is an input type that accepts ApplicationTypeResourcePropertiesResponseArgs and ApplicationTypeResourcePropertiesResponseOutput values.
// You can construct a concrete instance of `ApplicationTypeResourcePropertiesResponseInput` via:
//
//          ApplicationTypeResourcePropertiesResponseArgs{...}
type ApplicationTypeResourcePropertiesResponseInput interface {
	pulumi.Input

	ToApplicationTypeResourcePropertiesResponseOutput() ApplicationTypeResourcePropertiesResponseOutput
	ToApplicationTypeResourcePropertiesResponseOutputWithContext(context.Context) ApplicationTypeResourcePropertiesResponseOutput
}

// The application type name properties
type ApplicationTypeResourcePropertiesResponseArgs struct {
	// The current deployment or provisioning state, which only appears in the response.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
}

func (ApplicationTypeResourcePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTypeResourcePropertiesResponse)(nil)).Elem()
}

func (i ApplicationTypeResourcePropertiesResponseArgs) ToApplicationTypeResourcePropertiesResponseOutput() ApplicationTypeResourcePropertiesResponseOutput {
	return i.ToApplicationTypeResourcePropertiesResponseOutputWithContext(context.Background())
}

func (i ApplicationTypeResourcePropertiesResponseArgs) ToApplicationTypeResourcePropertiesResponseOutputWithContext(ctx context.Context) ApplicationTypeResourcePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeResourcePropertiesResponseOutput)
}

func (i ApplicationTypeResourcePropertiesResponseArgs) ToApplicationTypeResourcePropertiesResponsePtrOutput() ApplicationTypeResourcePropertiesResponsePtrOutput {
	return i.ToApplicationTypeResourcePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i ApplicationTypeResourcePropertiesResponseArgs) ToApplicationTypeResourcePropertiesResponsePtrOutputWithContext(ctx context.Context) ApplicationTypeResourcePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeResourcePropertiesResponseOutput).ToApplicationTypeResourcePropertiesResponsePtrOutputWithContext(ctx)
}

// ApplicationTypeResourcePropertiesResponsePtrInput is an input type that accepts ApplicationTypeResourcePropertiesResponseArgs, ApplicationTypeResourcePropertiesResponsePtr and ApplicationTypeResourcePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `ApplicationTypeResourcePropertiesResponsePtrInput` via:
//
//          ApplicationTypeResourcePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type ApplicationTypeResourcePropertiesResponsePtrInput interface {
	pulumi.Input

	ToApplicationTypeResourcePropertiesResponsePtrOutput() ApplicationTypeResourcePropertiesResponsePtrOutput
	ToApplicationTypeResourcePropertiesResponsePtrOutputWithContext(context.Context) ApplicationTypeResourcePropertiesResponsePtrOutput
}

type applicationTypeResourcePropertiesResponsePtrType ApplicationTypeResourcePropertiesResponseArgs

func ApplicationTypeResourcePropertiesResponsePtr(v *ApplicationTypeResourcePropertiesResponseArgs) ApplicationTypeResourcePropertiesResponsePtrInput {
	return (*applicationTypeResourcePropertiesResponsePtrType)(v)
}

func (*applicationTypeResourcePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationTypeResourcePropertiesResponse)(nil)).Elem()
}

func (i *applicationTypeResourcePropertiesResponsePtrType) ToApplicationTypeResourcePropertiesResponsePtrOutput() ApplicationTypeResourcePropertiesResponsePtrOutput {
	return i.ToApplicationTypeResourcePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *applicationTypeResourcePropertiesResponsePtrType) ToApplicationTypeResourcePropertiesResponsePtrOutputWithContext(ctx context.Context) ApplicationTypeResourcePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeResourcePropertiesResponsePtrOutput)
}

// The application type name properties
type ApplicationTypeResourcePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ApplicationTypeResourcePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTypeResourcePropertiesResponse)(nil)).Elem()
}

func (o ApplicationTypeResourcePropertiesResponseOutput) ToApplicationTypeResourcePropertiesResponseOutput() ApplicationTypeResourcePropertiesResponseOutput {
	return o
}

func (o ApplicationTypeResourcePropertiesResponseOutput) ToApplicationTypeResourcePropertiesResponseOutputWithContext(ctx context.Context) ApplicationTypeResourcePropertiesResponseOutput {
	return o
}

func (o ApplicationTypeResourcePropertiesResponseOutput) ToApplicationTypeResourcePropertiesResponsePtrOutput() ApplicationTypeResourcePropertiesResponsePtrOutput {
	return o.ToApplicationTypeResourcePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ApplicationTypeResourcePropertiesResponseOutput) ToApplicationTypeResourcePropertiesResponsePtrOutputWithContext(ctx context.Context) ApplicationTypeResourcePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ApplicationTypeResourcePropertiesResponse) *ApplicationTypeResourcePropertiesResponse {
		return &v
	}).(ApplicationTypeResourcePropertiesResponsePtrOutput)
}

// The current deployment or provisioning state, which only appears in the response.
func (o ApplicationTypeResourcePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationTypeResourcePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type ApplicationTypeResourcePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ApplicationTypeResourcePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationTypeResourcePropertiesResponse)(nil)).Elem()
}

func (o ApplicationTypeResourcePropertiesResponsePtrOutput) ToApplicationTypeResourcePropertiesResponsePtrOutput() ApplicationTypeResourcePropertiesResponsePtrOutput {
	return o
}

func (o ApplicationTypeResourcePropertiesResponsePtrOutput) ToApplicationTypeResourcePropertiesResponsePtrOutputWithContext(ctx context.Context) ApplicationTypeResourcePropertiesResponsePtrOutput {
	return o
}

func (o ApplicationTypeResourcePropertiesResponsePtrOutput) Elem() ApplicationTypeResourcePropertiesResponseOutput {
	return o.ApplyT(func(v *ApplicationTypeResourcePropertiesResponse) ApplicationTypeResourcePropertiesResponse {
		return *v
	}).(ApplicationTypeResourcePropertiesResponseOutput)
}

// The current deployment or provisioning state, which only appears in the response.
func (o ApplicationTypeResourcePropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationTypeResourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// An application type version resource for the specified application type name resource.
type ApplicationTypeVersionType struct {
	// Azure resource etag.
	Etag string `pulumi:"etag"`
	// It will be deprecated in New API, resource location depends on the parent resource.
	Location *string `pulumi:"location"`
	// Azure resource name.
	Name string `pulumi:"name"`
	// The properties of the application type version resource.
	Properties ApplicationTypeVersionResourcePropertiesResponse `pulumi:"properties"`
	// Azure resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Azure resource type.
	Type string `pulumi:"type"`
}

// ApplicationTypeVersionTypeInput is an input type that accepts ApplicationTypeVersionTypeArgs and ApplicationTypeVersionTypeOutput values.
// You can construct a concrete instance of `ApplicationTypeVersionTypeInput` via:
//
//          ApplicationTypeVersionTypeArgs{...}
type ApplicationTypeVersionTypeInput interface {
	pulumi.Input

	ToApplicationTypeVersionTypeOutput() ApplicationTypeVersionTypeOutput
	ToApplicationTypeVersionTypeOutputWithContext(context.Context) ApplicationTypeVersionTypeOutput
}

// An application type version resource for the specified application type name resource.
type ApplicationTypeVersionTypeArgs struct {
	// Azure resource etag.
	Etag pulumi.StringInput `pulumi:"etag"`
	// It will be deprecated in New API, resource location depends on the parent resource.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Azure resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// The properties of the application type version resource.
	Properties ApplicationTypeVersionResourcePropertiesResponseInput `pulumi:"properties"`
	// Azure resource tags.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Azure resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ApplicationTypeVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTypeVersionType)(nil)).Elem()
}

func (i ApplicationTypeVersionTypeArgs) ToApplicationTypeVersionTypeOutput() ApplicationTypeVersionTypeOutput {
	return i.ToApplicationTypeVersionTypeOutputWithContext(context.Background())
}

func (i ApplicationTypeVersionTypeArgs) ToApplicationTypeVersionTypeOutputWithContext(ctx context.Context) ApplicationTypeVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeVersionTypeOutput)
}

// An application type version resource for the specified application type name resource.
type ApplicationTypeVersionTypeOutput struct{ *pulumi.OutputState }

func (ApplicationTypeVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTypeVersionType)(nil)).Elem()
}

func (o ApplicationTypeVersionTypeOutput) ToApplicationTypeVersionTypeOutput() ApplicationTypeVersionTypeOutput {
	return o
}

func (o ApplicationTypeVersionTypeOutput) ToApplicationTypeVersionTypeOutputWithContext(ctx context.Context) ApplicationTypeVersionTypeOutput {
	return o
}

// Azure resource etag.
func (o ApplicationTypeVersionTypeOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationTypeVersionType) string { return v.Etag }).(pulumi.StringOutput)
}

// It will be deprecated in New API, resource location depends on the parent resource.
func (o ApplicationTypeVersionTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationTypeVersionType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Azure resource name.
func (o ApplicationTypeVersionTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationTypeVersionType) string { return v.Name }).(pulumi.StringOutput)
}

// The properties of the application type version resource.
func (o ApplicationTypeVersionTypeOutput) Properties() ApplicationTypeVersionResourcePropertiesResponseOutput {
	return o.ApplyT(func(v ApplicationTypeVersionType) ApplicationTypeVersionResourcePropertiesResponse {
		return v.Properties
	}).(ApplicationTypeVersionResourcePropertiesResponseOutput)
}

// Azure resource tags.
func (o ApplicationTypeVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ApplicationTypeVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure resource type.
func (o ApplicationTypeVersionTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationTypeVersionType) string { return v.Type }).(pulumi.StringOutput)
}

// The properties of the application type version resource.
type ApplicationTypeVersionResourceProperties struct {
	// The URL to the application package
	AppPackageUrl string `pulumi:"appPackageUrl"`
}

// ApplicationTypeVersionResourcePropertiesInput is an input type that accepts ApplicationTypeVersionResourcePropertiesArgs and ApplicationTypeVersionResourcePropertiesOutput values.
// You can construct a concrete instance of `ApplicationTypeVersionResourcePropertiesInput` via:
//
//          ApplicationTypeVersionResourcePropertiesArgs{...}
type ApplicationTypeVersionResourcePropertiesInput interface {
	pulumi.Input

	ToApplicationTypeVersionResourcePropertiesOutput() ApplicationTypeVersionResourcePropertiesOutput
	ToApplicationTypeVersionResourcePropertiesOutputWithContext(context.Context) ApplicationTypeVersionResourcePropertiesOutput
}

// The properties of the application type version resource.
type ApplicationTypeVersionResourcePropertiesArgs struct {
	// The URL to the application package
	AppPackageUrl pulumi.StringInput `pulumi:"appPackageUrl"`
}

func (ApplicationTypeVersionResourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTypeVersionResourceProperties)(nil)).Elem()
}

func (i ApplicationTypeVersionResourcePropertiesArgs) ToApplicationTypeVersionResourcePropertiesOutput() ApplicationTypeVersionResourcePropertiesOutput {
	return i.ToApplicationTypeVersionResourcePropertiesOutputWithContext(context.Background())
}

func (i ApplicationTypeVersionResourcePropertiesArgs) ToApplicationTypeVersionResourcePropertiesOutputWithContext(ctx context.Context) ApplicationTypeVersionResourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeVersionResourcePropertiesOutput)
}

func (i ApplicationTypeVersionResourcePropertiesArgs) ToApplicationTypeVersionResourcePropertiesPtrOutput() ApplicationTypeVersionResourcePropertiesPtrOutput {
	return i.ToApplicationTypeVersionResourcePropertiesPtrOutputWithContext(context.Background())
}

func (i ApplicationTypeVersionResourcePropertiesArgs) ToApplicationTypeVersionResourcePropertiesPtrOutputWithContext(ctx context.Context) ApplicationTypeVersionResourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeVersionResourcePropertiesOutput).ToApplicationTypeVersionResourcePropertiesPtrOutputWithContext(ctx)
}

// ApplicationTypeVersionResourcePropertiesPtrInput is an input type that accepts ApplicationTypeVersionResourcePropertiesArgs, ApplicationTypeVersionResourcePropertiesPtr and ApplicationTypeVersionResourcePropertiesPtrOutput values.
// You can construct a concrete instance of `ApplicationTypeVersionResourcePropertiesPtrInput` via:
//
//          ApplicationTypeVersionResourcePropertiesArgs{...}
//
//  or:
//
//          nil
type ApplicationTypeVersionResourcePropertiesPtrInput interface {
	pulumi.Input

	ToApplicationTypeVersionResourcePropertiesPtrOutput() ApplicationTypeVersionResourcePropertiesPtrOutput
	ToApplicationTypeVersionResourcePropertiesPtrOutputWithContext(context.Context) ApplicationTypeVersionResourcePropertiesPtrOutput
}

type applicationTypeVersionResourcePropertiesPtrType ApplicationTypeVersionResourcePropertiesArgs

func ApplicationTypeVersionResourcePropertiesPtr(v *ApplicationTypeVersionResourcePropertiesArgs) ApplicationTypeVersionResourcePropertiesPtrInput {
	return (*applicationTypeVersionResourcePropertiesPtrType)(v)
}

func (*applicationTypeVersionResourcePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationTypeVersionResourceProperties)(nil)).Elem()
}

func (i *applicationTypeVersionResourcePropertiesPtrType) ToApplicationTypeVersionResourcePropertiesPtrOutput() ApplicationTypeVersionResourcePropertiesPtrOutput {
	return i.ToApplicationTypeVersionResourcePropertiesPtrOutputWithContext(context.Background())
}

func (i *applicationTypeVersionResourcePropertiesPtrType) ToApplicationTypeVersionResourcePropertiesPtrOutputWithContext(ctx context.Context) ApplicationTypeVersionResourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeVersionResourcePropertiesPtrOutput)
}

// The properties of the application type version resource.
type ApplicationTypeVersionResourcePropertiesOutput struct{ *pulumi.OutputState }

func (ApplicationTypeVersionResourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTypeVersionResourceProperties)(nil)).Elem()
}

func (o ApplicationTypeVersionResourcePropertiesOutput) ToApplicationTypeVersionResourcePropertiesOutput() ApplicationTypeVersionResourcePropertiesOutput {
	return o
}

func (o ApplicationTypeVersionResourcePropertiesOutput) ToApplicationTypeVersionResourcePropertiesOutputWithContext(ctx context.Context) ApplicationTypeVersionResourcePropertiesOutput {
	return o
}

func (o ApplicationTypeVersionResourcePropertiesOutput) ToApplicationTypeVersionResourcePropertiesPtrOutput() ApplicationTypeVersionResourcePropertiesPtrOutput {
	return o.ToApplicationTypeVersionResourcePropertiesPtrOutputWithContext(context.Background())
}

func (o ApplicationTypeVersionResourcePropertiesOutput) ToApplicationTypeVersionResourcePropertiesPtrOutputWithContext(ctx context.Context) ApplicationTypeVersionResourcePropertiesPtrOutput {
	return o.ApplyT(func(v ApplicationTypeVersionResourceProperties) *ApplicationTypeVersionResourceProperties {
		return &v
	}).(ApplicationTypeVersionResourcePropertiesPtrOutput)
}

// The URL to the application package
func (o ApplicationTypeVersionResourcePropertiesOutput) AppPackageUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationTypeVersionResourceProperties) string { return v.AppPackageUrl }).(pulumi.StringOutput)
}

type ApplicationTypeVersionResourcePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ApplicationTypeVersionResourcePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationTypeVersionResourceProperties)(nil)).Elem()
}

func (o ApplicationTypeVersionResourcePropertiesPtrOutput) ToApplicationTypeVersionResourcePropertiesPtrOutput() ApplicationTypeVersionResourcePropertiesPtrOutput {
	return o
}

func (o ApplicationTypeVersionResourcePropertiesPtrOutput) ToApplicationTypeVersionResourcePropertiesPtrOutputWithContext(ctx context.Context) ApplicationTypeVersionResourcePropertiesPtrOutput {
	return o
}

func (o ApplicationTypeVersionResourcePropertiesPtrOutput) Elem() ApplicationTypeVersionResourcePropertiesOutput {
	return o.ApplyT(func(v *ApplicationTypeVersionResourceProperties) ApplicationTypeVersionResourceProperties { return *v }).(ApplicationTypeVersionResourcePropertiesOutput)
}

// The URL to the application package
func (o ApplicationTypeVersionResourcePropertiesPtrOutput) AppPackageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationTypeVersionResourceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.AppPackageUrl
	}).(pulumi.StringPtrOutput)
}

// The properties of the application type version resource.
type ApplicationTypeVersionResourcePropertiesResponse struct {
	// The URL to the application package
	AppPackageUrl string `pulumi:"appPackageUrl"`
	// List of application type parameters that can be overridden when creating or updating the application.
	DefaultParameterList ApplicationTypeParameterListResponse `pulumi:"defaultParameterList"`
	// The current deployment or provisioning state, which only appears in the response
	ProvisioningState string `pulumi:"provisioningState"`
}

// ApplicationTypeVersionResourcePropertiesResponseInput is an input type that accepts ApplicationTypeVersionResourcePropertiesResponseArgs and ApplicationTypeVersionResourcePropertiesResponseOutput values.
// You can construct a concrete instance of `ApplicationTypeVersionResourcePropertiesResponseInput` via:
//
//          ApplicationTypeVersionResourcePropertiesResponseArgs{...}
type ApplicationTypeVersionResourcePropertiesResponseInput interface {
	pulumi.Input

	ToApplicationTypeVersionResourcePropertiesResponseOutput() ApplicationTypeVersionResourcePropertiesResponseOutput
	ToApplicationTypeVersionResourcePropertiesResponseOutputWithContext(context.Context) ApplicationTypeVersionResourcePropertiesResponseOutput
}

// The properties of the application type version resource.
type ApplicationTypeVersionResourcePropertiesResponseArgs struct {
	// The URL to the application package
	AppPackageUrl pulumi.StringInput `pulumi:"appPackageUrl"`
	// List of application type parameters that can be overridden when creating or updating the application.
	DefaultParameterList ApplicationTypeParameterListResponseInput `pulumi:"defaultParameterList"`
	// The current deployment or provisioning state, which only appears in the response
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
}

func (ApplicationTypeVersionResourcePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTypeVersionResourcePropertiesResponse)(nil)).Elem()
}

func (i ApplicationTypeVersionResourcePropertiesResponseArgs) ToApplicationTypeVersionResourcePropertiesResponseOutput() ApplicationTypeVersionResourcePropertiesResponseOutput {
	return i.ToApplicationTypeVersionResourcePropertiesResponseOutputWithContext(context.Background())
}

func (i ApplicationTypeVersionResourcePropertiesResponseArgs) ToApplicationTypeVersionResourcePropertiesResponseOutputWithContext(ctx context.Context) ApplicationTypeVersionResourcePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeVersionResourcePropertiesResponseOutput)
}

func (i ApplicationTypeVersionResourcePropertiesResponseArgs) ToApplicationTypeVersionResourcePropertiesResponsePtrOutput() ApplicationTypeVersionResourcePropertiesResponsePtrOutput {
	return i.ToApplicationTypeVersionResourcePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i ApplicationTypeVersionResourcePropertiesResponseArgs) ToApplicationTypeVersionResourcePropertiesResponsePtrOutputWithContext(ctx context.Context) ApplicationTypeVersionResourcePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeVersionResourcePropertiesResponseOutput).ToApplicationTypeVersionResourcePropertiesResponsePtrOutputWithContext(ctx)
}

// ApplicationTypeVersionResourcePropertiesResponsePtrInput is an input type that accepts ApplicationTypeVersionResourcePropertiesResponseArgs, ApplicationTypeVersionResourcePropertiesResponsePtr and ApplicationTypeVersionResourcePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `ApplicationTypeVersionResourcePropertiesResponsePtrInput` via:
//
//          ApplicationTypeVersionResourcePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type ApplicationTypeVersionResourcePropertiesResponsePtrInput interface {
	pulumi.Input

	ToApplicationTypeVersionResourcePropertiesResponsePtrOutput() ApplicationTypeVersionResourcePropertiesResponsePtrOutput
	ToApplicationTypeVersionResourcePropertiesResponsePtrOutputWithContext(context.Context) ApplicationTypeVersionResourcePropertiesResponsePtrOutput
}

type applicationTypeVersionResourcePropertiesResponsePtrType ApplicationTypeVersionResourcePropertiesResponseArgs

func ApplicationTypeVersionResourcePropertiesResponsePtr(v *ApplicationTypeVersionResourcePropertiesResponseArgs) ApplicationTypeVersionResourcePropertiesResponsePtrInput {
	return (*applicationTypeVersionResourcePropertiesResponsePtrType)(v)
}

func (*applicationTypeVersionResourcePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationTypeVersionResourcePropertiesResponse)(nil)).Elem()
}

func (i *applicationTypeVersionResourcePropertiesResponsePtrType) ToApplicationTypeVersionResourcePropertiesResponsePtrOutput() ApplicationTypeVersionResourcePropertiesResponsePtrOutput {
	return i.ToApplicationTypeVersionResourcePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *applicationTypeVersionResourcePropertiesResponsePtrType) ToApplicationTypeVersionResourcePropertiesResponsePtrOutputWithContext(ctx context.Context) ApplicationTypeVersionResourcePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeVersionResourcePropertiesResponsePtrOutput)
}

// The properties of the application type version resource.
type ApplicationTypeVersionResourcePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ApplicationTypeVersionResourcePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTypeVersionResourcePropertiesResponse)(nil)).Elem()
}

func (o ApplicationTypeVersionResourcePropertiesResponseOutput) ToApplicationTypeVersionResourcePropertiesResponseOutput() ApplicationTypeVersionResourcePropertiesResponseOutput {
	return o
}

func (o ApplicationTypeVersionResourcePropertiesResponseOutput) ToApplicationTypeVersionResourcePropertiesResponseOutputWithContext(ctx context.Context) ApplicationTypeVersionResourcePropertiesResponseOutput {
	return o
}

func (o ApplicationTypeVersionResourcePropertiesResponseOutput) ToApplicationTypeVersionResourcePropertiesResponsePtrOutput() ApplicationTypeVersionResourcePropertiesResponsePtrOutput {
	return o.ToApplicationTypeVersionResourcePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ApplicationTypeVersionResourcePropertiesResponseOutput) ToApplicationTypeVersionResourcePropertiesResponsePtrOutputWithContext(ctx context.Context) ApplicationTypeVersionResourcePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ApplicationTypeVersionResourcePropertiesResponse) *ApplicationTypeVersionResourcePropertiesResponse {
		return &v
	}).(ApplicationTypeVersionResourcePropertiesResponsePtrOutput)
}

// The URL to the application package
func (o ApplicationTypeVersionResourcePropertiesResponseOutput) AppPackageUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationTypeVersionResourcePropertiesResponse) string { return v.AppPackageUrl }).(pulumi.StringOutput)
}

// List of application type parameters that can be overridden when creating or updating the application.
func (o ApplicationTypeVersionResourcePropertiesResponseOutput) DefaultParameterList() ApplicationTypeParameterListResponseOutput {
	return o.ApplyT(func(v ApplicationTypeVersionResourcePropertiesResponse) ApplicationTypeParameterListResponse {
		return v.DefaultParameterList
	}).(ApplicationTypeParameterListResponseOutput)
}

// The current deployment or provisioning state, which only appears in the response
func (o ApplicationTypeVersionResourcePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationTypeVersionResourcePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type ApplicationTypeVersionResourcePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ApplicationTypeVersionResourcePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationTypeVersionResourcePropertiesResponse)(nil)).Elem()
}

func (o ApplicationTypeVersionResourcePropertiesResponsePtrOutput) ToApplicationTypeVersionResourcePropertiesResponsePtrOutput() ApplicationTypeVersionResourcePropertiesResponsePtrOutput {
	return o
}

func (o ApplicationTypeVersionResourcePropertiesResponsePtrOutput) ToApplicationTypeVersionResourcePropertiesResponsePtrOutputWithContext(ctx context.Context) ApplicationTypeVersionResourcePropertiesResponsePtrOutput {
	return o
}

func (o ApplicationTypeVersionResourcePropertiesResponsePtrOutput) Elem() ApplicationTypeVersionResourcePropertiesResponseOutput {
	return o.ApplyT(func(v *ApplicationTypeVersionResourcePropertiesResponse) ApplicationTypeVersionResourcePropertiesResponse {
		return *v
	}).(ApplicationTypeVersionResourcePropertiesResponseOutput)
}

// The URL to the application package
func (o ApplicationTypeVersionResourcePropertiesResponsePtrOutput) AppPackageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationTypeVersionResourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AppPackageUrl
	}).(pulumi.StringPtrOutput)
}

// List of application type parameters that can be overridden when creating or updating the application.
func (o ApplicationTypeVersionResourcePropertiesResponsePtrOutput) DefaultParameterList() ApplicationTypeParameterListResponsePtrOutput {
	return o.ApplyT(func(v *ApplicationTypeVersionResourcePropertiesResponse) *ApplicationTypeParameterListResponse {
		if v == nil {
			return nil
		}
		return &v.DefaultParameterList
	}).(ApplicationTypeParameterListResponsePtrOutput)
}

// The current deployment or provisioning state, which only appears in the response
func (o ApplicationTypeVersionResourcePropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationTypeVersionResourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

type ApplicationTypeVersionsCleanupPolicy struct {
	// Number of unused versions per application type to keep.
	MaxUnusedVersionsToKeep int `pulumi:"maxUnusedVersionsToKeep"`
}

// ApplicationTypeVersionsCleanupPolicyInput is an input type that accepts ApplicationTypeVersionsCleanupPolicyArgs and ApplicationTypeVersionsCleanupPolicyOutput values.
// You can construct a concrete instance of `ApplicationTypeVersionsCleanupPolicyInput` via:
//
//          ApplicationTypeVersionsCleanupPolicyArgs{...}
type ApplicationTypeVersionsCleanupPolicyInput interface {
	pulumi.Input

	ToApplicationTypeVersionsCleanupPolicyOutput() ApplicationTypeVersionsCleanupPolicyOutput
	ToApplicationTypeVersionsCleanupPolicyOutputWithContext(context.Context) ApplicationTypeVersionsCleanupPolicyOutput
}

type ApplicationTypeVersionsCleanupPolicyArgs struct {
	// Number of unused versions per application type to keep.
	MaxUnusedVersionsToKeep pulumi.IntInput `pulumi:"maxUnusedVersionsToKeep"`
}

func (ApplicationTypeVersionsCleanupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTypeVersionsCleanupPolicy)(nil)).Elem()
}

func (i ApplicationTypeVersionsCleanupPolicyArgs) ToApplicationTypeVersionsCleanupPolicyOutput() ApplicationTypeVersionsCleanupPolicyOutput {
	return i.ToApplicationTypeVersionsCleanupPolicyOutputWithContext(context.Background())
}

func (i ApplicationTypeVersionsCleanupPolicyArgs) ToApplicationTypeVersionsCleanupPolicyOutputWithContext(ctx context.Context) ApplicationTypeVersionsCleanupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeVersionsCleanupPolicyOutput)
}

func (i ApplicationTypeVersionsCleanupPolicyArgs) ToApplicationTypeVersionsCleanupPolicyPtrOutput() ApplicationTypeVersionsCleanupPolicyPtrOutput {
	return i.ToApplicationTypeVersionsCleanupPolicyPtrOutputWithContext(context.Background())
}

func (i ApplicationTypeVersionsCleanupPolicyArgs) ToApplicationTypeVersionsCleanupPolicyPtrOutputWithContext(ctx context.Context) ApplicationTypeVersionsCleanupPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeVersionsCleanupPolicyOutput).ToApplicationTypeVersionsCleanupPolicyPtrOutputWithContext(ctx)
}

// ApplicationTypeVersionsCleanupPolicyPtrInput is an input type that accepts ApplicationTypeVersionsCleanupPolicyArgs, ApplicationTypeVersionsCleanupPolicyPtr and ApplicationTypeVersionsCleanupPolicyPtrOutput values.
// You can construct a concrete instance of `ApplicationTypeVersionsCleanupPolicyPtrInput` via:
//
//          ApplicationTypeVersionsCleanupPolicyArgs{...}
//
//  or:
//
//          nil
type ApplicationTypeVersionsCleanupPolicyPtrInput interface {
	pulumi.Input

	ToApplicationTypeVersionsCleanupPolicyPtrOutput() ApplicationTypeVersionsCleanupPolicyPtrOutput
	ToApplicationTypeVersionsCleanupPolicyPtrOutputWithContext(context.Context) ApplicationTypeVersionsCleanupPolicyPtrOutput
}

type applicationTypeVersionsCleanupPolicyPtrType ApplicationTypeVersionsCleanupPolicyArgs

func ApplicationTypeVersionsCleanupPolicyPtr(v *ApplicationTypeVersionsCleanupPolicyArgs) ApplicationTypeVersionsCleanupPolicyPtrInput {
	return (*applicationTypeVersionsCleanupPolicyPtrType)(v)
}

func (*applicationTypeVersionsCleanupPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationTypeVersionsCleanupPolicy)(nil)).Elem()
}

func (i *applicationTypeVersionsCleanupPolicyPtrType) ToApplicationTypeVersionsCleanupPolicyPtrOutput() ApplicationTypeVersionsCleanupPolicyPtrOutput {
	return i.ToApplicationTypeVersionsCleanupPolicyPtrOutputWithContext(context.Background())
}

func (i *applicationTypeVersionsCleanupPolicyPtrType) ToApplicationTypeVersionsCleanupPolicyPtrOutputWithContext(ctx context.Context) ApplicationTypeVersionsCleanupPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeVersionsCleanupPolicyPtrOutput)
}

type ApplicationTypeVersionsCleanupPolicyOutput struct{ *pulumi.OutputState }

func (ApplicationTypeVersionsCleanupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTypeVersionsCleanupPolicy)(nil)).Elem()
}

func (o ApplicationTypeVersionsCleanupPolicyOutput) ToApplicationTypeVersionsCleanupPolicyOutput() ApplicationTypeVersionsCleanupPolicyOutput {
	return o
}

func (o ApplicationTypeVersionsCleanupPolicyOutput) ToApplicationTypeVersionsCleanupPolicyOutputWithContext(ctx context.Context) ApplicationTypeVersionsCleanupPolicyOutput {
	return o
}

func (o ApplicationTypeVersionsCleanupPolicyOutput) ToApplicationTypeVersionsCleanupPolicyPtrOutput() ApplicationTypeVersionsCleanupPolicyPtrOutput {
	return o.ToApplicationTypeVersionsCleanupPolicyPtrOutputWithContext(context.Background())
}

func (o ApplicationTypeVersionsCleanupPolicyOutput) ToApplicationTypeVersionsCleanupPolicyPtrOutputWithContext(ctx context.Context) ApplicationTypeVersionsCleanupPolicyPtrOutput {
	return o.ApplyT(func(v ApplicationTypeVersionsCleanupPolicy) *ApplicationTypeVersionsCleanupPolicy {
		return &v
	}).(ApplicationTypeVersionsCleanupPolicyPtrOutput)
}

// Number of unused versions per application type to keep.
func (o ApplicationTypeVersionsCleanupPolicyOutput) MaxUnusedVersionsToKeep() pulumi.IntOutput {
	return o.ApplyT(func(v ApplicationTypeVersionsCleanupPolicy) int { return v.MaxUnusedVersionsToKeep }).(pulumi.IntOutput)
}

type ApplicationTypeVersionsCleanupPolicyPtrOutput struct{ *pulumi.OutputState }

func (ApplicationTypeVersionsCleanupPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationTypeVersionsCleanupPolicy)(nil)).Elem()
}

func (o ApplicationTypeVersionsCleanupPolicyPtrOutput) ToApplicationTypeVersionsCleanupPolicyPtrOutput() ApplicationTypeVersionsCleanupPolicyPtrOutput {
	return o
}

func (o ApplicationTypeVersionsCleanupPolicyPtrOutput) ToApplicationTypeVersionsCleanupPolicyPtrOutputWithContext(ctx context.Context) ApplicationTypeVersionsCleanupPolicyPtrOutput {
	return o
}

func (o ApplicationTypeVersionsCleanupPolicyPtrOutput) Elem() ApplicationTypeVersionsCleanupPolicyOutput {
	return o.ApplyT(func(v *ApplicationTypeVersionsCleanupPolicy) ApplicationTypeVersionsCleanupPolicy { return *v }).(ApplicationTypeVersionsCleanupPolicyOutput)
}

// Number of unused versions per application type to keep.
func (o ApplicationTypeVersionsCleanupPolicyPtrOutput) MaxUnusedVersionsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationTypeVersionsCleanupPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.MaxUnusedVersionsToKeep
	}).(pulumi.IntPtrOutput)
}

type ApplicationTypeVersionsCleanupPolicyResponse struct {
	// Number of unused versions per application type to keep.
	MaxUnusedVersionsToKeep int `pulumi:"maxUnusedVersionsToKeep"`
}

// ApplicationTypeVersionsCleanupPolicyResponseInput is an input type that accepts ApplicationTypeVersionsCleanupPolicyResponseArgs and ApplicationTypeVersionsCleanupPolicyResponseOutput values.
// You can construct a concrete instance of `ApplicationTypeVersionsCleanupPolicyResponseInput` via:
//
//          ApplicationTypeVersionsCleanupPolicyResponseArgs{...}
type ApplicationTypeVersionsCleanupPolicyResponseInput interface {
	pulumi.Input

	ToApplicationTypeVersionsCleanupPolicyResponseOutput() ApplicationTypeVersionsCleanupPolicyResponseOutput
	ToApplicationTypeVersionsCleanupPolicyResponseOutputWithContext(context.Context) ApplicationTypeVersionsCleanupPolicyResponseOutput
}

type ApplicationTypeVersionsCleanupPolicyResponseArgs struct {
	// Number of unused versions per application type to keep.
	MaxUnusedVersionsToKeep pulumi.IntInput `pulumi:"maxUnusedVersionsToKeep"`
}

func (ApplicationTypeVersionsCleanupPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTypeVersionsCleanupPolicyResponse)(nil)).Elem()
}

func (i ApplicationTypeVersionsCleanupPolicyResponseArgs) ToApplicationTypeVersionsCleanupPolicyResponseOutput() ApplicationTypeVersionsCleanupPolicyResponseOutput {
	return i.ToApplicationTypeVersionsCleanupPolicyResponseOutputWithContext(context.Background())
}

func (i ApplicationTypeVersionsCleanupPolicyResponseArgs) ToApplicationTypeVersionsCleanupPolicyResponseOutputWithContext(ctx context.Context) ApplicationTypeVersionsCleanupPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeVersionsCleanupPolicyResponseOutput)
}

func (i ApplicationTypeVersionsCleanupPolicyResponseArgs) ToApplicationTypeVersionsCleanupPolicyResponsePtrOutput() ApplicationTypeVersionsCleanupPolicyResponsePtrOutput {
	return i.ToApplicationTypeVersionsCleanupPolicyResponsePtrOutputWithContext(context.Background())
}

func (i ApplicationTypeVersionsCleanupPolicyResponseArgs) ToApplicationTypeVersionsCleanupPolicyResponsePtrOutputWithContext(ctx context.Context) ApplicationTypeVersionsCleanupPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeVersionsCleanupPolicyResponseOutput).ToApplicationTypeVersionsCleanupPolicyResponsePtrOutputWithContext(ctx)
}

// ApplicationTypeVersionsCleanupPolicyResponsePtrInput is an input type that accepts ApplicationTypeVersionsCleanupPolicyResponseArgs, ApplicationTypeVersionsCleanupPolicyResponsePtr and ApplicationTypeVersionsCleanupPolicyResponsePtrOutput values.
// You can construct a concrete instance of `ApplicationTypeVersionsCleanupPolicyResponsePtrInput` via:
//
//          ApplicationTypeVersionsCleanupPolicyResponseArgs{...}
//
//  or:
//
//          nil
type ApplicationTypeVersionsCleanupPolicyResponsePtrInput interface {
	pulumi.Input

	ToApplicationTypeVersionsCleanupPolicyResponsePtrOutput() ApplicationTypeVersionsCleanupPolicyResponsePtrOutput
	ToApplicationTypeVersionsCleanupPolicyResponsePtrOutputWithContext(context.Context) ApplicationTypeVersionsCleanupPolicyResponsePtrOutput
}

type applicationTypeVersionsCleanupPolicyResponsePtrType ApplicationTypeVersionsCleanupPolicyResponseArgs

func ApplicationTypeVersionsCleanupPolicyResponsePtr(v *ApplicationTypeVersionsCleanupPolicyResponseArgs) ApplicationTypeVersionsCleanupPolicyResponsePtrInput {
	return (*applicationTypeVersionsCleanupPolicyResponsePtrType)(v)
}

func (*applicationTypeVersionsCleanupPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationTypeVersionsCleanupPolicyResponse)(nil)).Elem()
}

func (i *applicationTypeVersionsCleanupPolicyResponsePtrType) ToApplicationTypeVersionsCleanupPolicyResponsePtrOutput() ApplicationTypeVersionsCleanupPolicyResponsePtrOutput {
	return i.ToApplicationTypeVersionsCleanupPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *applicationTypeVersionsCleanupPolicyResponsePtrType) ToApplicationTypeVersionsCleanupPolicyResponsePtrOutputWithContext(ctx context.Context) ApplicationTypeVersionsCleanupPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeVersionsCleanupPolicyResponsePtrOutput)
}

type ApplicationTypeVersionsCleanupPolicyResponseOutput struct{ *pulumi.OutputState }

func (ApplicationTypeVersionsCleanupPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationTypeVersionsCleanupPolicyResponse)(nil)).Elem()
}

func (o ApplicationTypeVersionsCleanupPolicyResponseOutput) ToApplicationTypeVersionsCleanupPolicyResponseOutput() ApplicationTypeVersionsCleanupPolicyResponseOutput {
	return o
}

func (o ApplicationTypeVersionsCleanupPolicyResponseOutput) ToApplicationTypeVersionsCleanupPolicyResponseOutputWithContext(ctx context.Context) ApplicationTypeVersionsCleanupPolicyResponseOutput {
	return o
}

func (o ApplicationTypeVersionsCleanupPolicyResponseOutput) ToApplicationTypeVersionsCleanupPolicyResponsePtrOutput() ApplicationTypeVersionsCleanupPolicyResponsePtrOutput {
	return o.ToApplicationTypeVersionsCleanupPolicyResponsePtrOutputWithContext(context.Background())
}

func (o ApplicationTypeVersionsCleanupPolicyResponseOutput) ToApplicationTypeVersionsCleanupPolicyResponsePtrOutputWithContext(ctx context.Context) ApplicationTypeVersionsCleanupPolicyResponsePtrOutput {
	return o.ApplyT(func(v ApplicationTypeVersionsCleanupPolicyResponse) *ApplicationTypeVersionsCleanupPolicyResponse {
		return &v
	}).(ApplicationTypeVersionsCleanupPolicyResponsePtrOutput)
}

// Number of unused versions per application type to keep.
func (o ApplicationTypeVersionsCleanupPolicyResponseOutput) MaxUnusedVersionsToKeep() pulumi.IntOutput {
	return o.ApplyT(func(v ApplicationTypeVersionsCleanupPolicyResponse) int { return v.MaxUnusedVersionsToKeep }).(pulumi.IntOutput)
}

type ApplicationTypeVersionsCleanupPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ApplicationTypeVersionsCleanupPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationTypeVersionsCleanupPolicyResponse)(nil)).Elem()
}

func (o ApplicationTypeVersionsCleanupPolicyResponsePtrOutput) ToApplicationTypeVersionsCleanupPolicyResponsePtrOutput() ApplicationTypeVersionsCleanupPolicyResponsePtrOutput {
	return o
}

func (o ApplicationTypeVersionsCleanupPolicyResponsePtrOutput) ToApplicationTypeVersionsCleanupPolicyResponsePtrOutputWithContext(ctx context.Context) ApplicationTypeVersionsCleanupPolicyResponsePtrOutput {
	return o
}

func (o ApplicationTypeVersionsCleanupPolicyResponsePtrOutput) Elem() ApplicationTypeVersionsCleanupPolicyResponseOutput {
	return o.ApplyT(func(v *ApplicationTypeVersionsCleanupPolicyResponse) ApplicationTypeVersionsCleanupPolicyResponse {
		return *v
	}).(ApplicationTypeVersionsCleanupPolicyResponseOutput)
}

// Number of unused versions per application type to keep.
func (o ApplicationTypeVersionsCleanupPolicyResponsePtrOutput) MaxUnusedVersionsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApplicationTypeVersionsCleanupPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxUnusedVersionsToKeep
	}).(pulumi.IntPtrOutput)
}

// Describes the policy for a monitored application upgrade.
type ApplicationUpgradePolicy struct {
	// Defines a health policy used to evaluate the health of an application or one of its children entities.
	ApplicationHealthPolicy *ArmApplicationHealthPolicy `pulumi:"applicationHealthPolicy"`
	// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
	ForceRestart *ForceRestart `pulumi:"forceRestart"`
	// The policy used for monitoring the application upgrade
	RollingUpgradeMonitoringPolicy *ArmRollingUpgradeMonitoringPolicy `pulumi:"rollingUpgradeMonitoringPolicy"`
	// The mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored.
	UpgradeMode *string `pulumi:"upgradeMode"`
	// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
	UpgradeReplicaSetCheckTimeout *string `pulumi:"upgradeReplicaSetCheckTimeout"`
}

// ApplicationUpgradePolicyInput is an input type that accepts ApplicationUpgradePolicyArgs and ApplicationUpgradePolicyOutput values.
// You can construct a concrete instance of `ApplicationUpgradePolicyInput` via:
//
//          ApplicationUpgradePolicyArgs{...}
type ApplicationUpgradePolicyInput interface {
	pulumi.Input

	ToApplicationUpgradePolicyOutput() ApplicationUpgradePolicyOutput
	ToApplicationUpgradePolicyOutputWithContext(context.Context) ApplicationUpgradePolicyOutput
}

// Describes the policy for a monitored application upgrade.
type ApplicationUpgradePolicyArgs struct {
	// Defines a health policy used to evaluate the health of an application or one of its children entities.
	ApplicationHealthPolicy ArmApplicationHealthPolicyPtrInput `pulumi:"applicationHealthPolicy"`
	// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
	ForceRestart ForceRestartPtrInput `pulumi:"forceRestart"`
	// The policy used for monitoring the application upgrade
	RollingUpgradeMonitoringPolicy ArmRollingUpgradeMonitoringPolicyPtrInput `pulumi:"rollingUpgradeMonitoringPolicy"`
	// The mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored.
	UpgradeMode pulumi.StringPtrInput `pulumi:"upgradeMode"`
	// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
	UpgradeReplicaSetCheckTimeout pulumi.StringPtrInput `pulumi:"upgradeReplicaSetCheckTimeout"`
}

func (ApplicationUpgradePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationUpgradePolicy)(nil)).Elem()
}

func (i ApplicationUpgradePolicyArgs) ToApplicationUpgradePolicyOutput() ApplicationUpgradePolicyOutput {
	return i.ToApplicationUpgradePolicyOutputWithContext(context.Background())
}

func (i ApplicationUpgradePolicyArgs) ToApplicationUpgradePolicyOutputWithContext(ctx context.Context) ApplicationUpgradePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationUpgradePolicyOutput)
}

func (i ApplicationUpgradePolicyArgs) ToApplicationUpgradePolicyPtrOutput() ApplicationUpgradePolicyPtrOutput {
	return i.ToApplicationUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i ApplicationUpgradePolicyArgs) ToApplicationUpgradePolicyPtrOutputWithContext(ctx context.Context) ApplicationUpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationUpgradePolicyOutput).ToApplicationUpgradePolicyPtrOutputWithContext(ctx)
}

// ApplicationUpgradePolicyPtrInput is an input type that accepts ApplicationUpgradePolicyArgs, ApplicationUpgradePolicyPtr and ApplicationUpgradePolicyPtrOutput values.
// You can construct a concrete instance of `ApplicationUpgradePolicyPtrInput` via:
//
//          ApplicationUpgradePolicyArgs{...}
//
//  or:
//
//          nil
type ApplicationUpgradePolicyPtrInput interface {
	pulumi.Input

	ToApplicationUpgradePolicyPtrOutput() ApplicationUpgradePolicyPtrOutput
	ToApplicationUpgradePolicyPtrOutputWithContext(context.Context) ApplicationUpgradePolicyPtrOutput
}

type applicationUpgradePolicyPtrType ApplicationUpgradePolicyArgs

func ApplicationUpgradePolicyPtr(v *ApplicationUpgradePolicyArgs) ApplicationUpgradePolicyPtrInput {
	return (*applicationUpgradePolicyPtrType)(v)
}

func (*applicationUpgradePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationUpgradePolicy)(nil)).Elem()
}

func (i *applicationUpgradePolicyPtrType) ToApplicationUpgradePolicyPtrOutput() ApplicationUpgradePolicyPtrOutput {
	return i.ToApplicationUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i *applicationUpgradePolicyPtrType) ToApplicationUpgradePolicyPtrOutputWithContext(ctx context.Context) ApplicationUpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationUpgradePolicyPtrOutput)
}

// Describes the policy for a monitored application upgrade.
type ApplicationUpgradePolicyOutput struct{ *pulumi.OutputState }

func (ApplicationUpgradePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationUpgradePolicy)(nil)).Elem()
}

func (o ApplicationUpgradePolicyOutput) ToApplicationUpgradePolicyOutput() ApplicationUpgradePolicyOutput {
	return o
}

func (o ApplicationUpgradePolicyOutput) ToApplicationUpgradePolicyOutputWithContext(ctx context.Context) ApplicationUpgradePolicyOutput {
	return o
}

func (o ApplicationUpgradePolicyOutput) ToApplicationUpgradePolicyPtrOutput() ApplicationUpgradePolicyPtrOutput {
	return o.ToApplicationUpgradePolicyPtrOutputWithContext(context.Background())
}

func (o ApplicationUpgradePolicyOutput) ToApplicationUpgradePolicyPtrOutputWithContext(ctx context.Context) ApplicationUpgradePolicyPtrOutput {
	return o.ApplyT(func(v ApplicationUpgradePolicy) *ApplicationUpgradePolicy {
		return &v
	}).(ApplicationUpgradePolicyPtrOutput)
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
func (o ApplicationUpgradePolicyOutput) ApplicationHealthPolicy() ArmApplicationHealthPolicyPtrOutput {
	return o.ApplyT(func(v ApplicationUpgradePolicy) *ArmApplicationHealthPolicy { return v.ApplicationHealthPolicy }).(ArmApplicationHealthPolicyPtrOutput)
}

// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
func (o ApplicationUpgradePolicyOutput) ForceRestart() ForceRestartPtrOutput {
	return o.ApplyT(func(v ApplicationUpgradePolicy) *ForceRestart { return v.ForceRestart }).(ForceRestartPtrOutput)
}

// The policy used for monitoring the application upgrade
func (o ApplicationUpgradePolicyOutput) RollingUpgradeMonitoringPolicy() ArmRollingUpgradeMonitoringPolicyPtrOutput {
	return o.ApplyT(func(v ApplicationUpgradePolicy) *ArmRollingUpgradeMonitoringPolicy {
		return v.RollingUpgradeMonitoringPolicy
	}).(ArmRollingUpgradeMonitoringPolicyPtrOutput)
}

// The mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored.
func (o ApplicationUpgradePolicyOutput) UpgradeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationUpgradePolicy) *string { return v.UpgradeMode }).(pulumi.StringPtrOutput)
}

// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
func (o ApplicationUpgradePolicyOutput) UpgradeReplicaSetCheckTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationUpgradePolicy) *string { return v.UpgradeReplicaSetCheckTimeout }).(pulumi.StringPtrOutput)
}

type ApplicationUpgradePolicyPtrOutput struct{ *pulumi.OutputState }

func (ApplicationUpgradePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationUpgradePolicy)(nil)).Elem()
}

func (o ApplicationUpgradePolicyPtrOutput) ToApplicationUpgradePolicyPtrOutput() ApplicationUpgradePolicyPtrOutput {
	return o
}

func (o ApplicationUpgradePolicyPtrOutput) ToApplicationUpgradePolicyPtrOutputWithContext(ctx context.Context) ApplicationUpgradePolicyPtrOutput {
	return o
}

func (o ApplicationUpgradePolicyPtrOutput) Elem() ApplicationUpgradePolicyOutput {
	return o.ApplyT(func(v *ApplicationUpgradePolicy) ApplicationUpgradePolicy { return *v }).(ApplicationUpgradePolicyOutput)
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
func (o ApplicationUpgradePolicyPtrOutput) ApplicationHealthPolicy() ArmApplicationHealthPolicyPtrOutput {
	return o.ApplyT(func(v *ApplicationUpgradePolicy) *ArmApplicationHealthPolicy {
		if v == nil {
			return nil
		}
		return v.ApplicationHealthPolicy
	}).(ArmApplicationHealthPolicyPtrOutput)
}

// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
func (o ApplicationUpgradePolicyPtrOutput) ForceRestart() ForceRestartPtrOutput {
	return o.ApplyT(func(v *ApplicationUpgradePolicy) *ForceRestart {
		if v == nil {
			return nil
		}
		return v.ForceRestart
	}).(ForceRestartPtrOutput)
}

// The policy used for monitoring the application upgrade
func (o ApplicationUpgradePolicyPtrOutput) RollingUpgradeMonitoringPolicy() ArmRollingUpgradeMonitoringPolicyPtrOutput {
	return o.ApplyT(func(v *ApplicationUpgradePolicy) *ArmRollingUpgradeMonitoringPolicy {
		if v == nil {
			return nil
		}
		return v.RollingUpgradeMonitoringPolicy
	}).(ArmRollingUpgradeMonitoringPolicyPtrOutput)
}

// The mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored.
func (o ApplicationUpgradePolicyPtrOutput) UpgradeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationUpgradePolicy) *string {
		if v == nil {
			return nil
		}
		return v.UpgradeMode
	}).(pulumi.StringPtrOutput)
}

// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
func (o ApplicationUpgradePolicyPtrOutput) UpgradeReplicaSetCheckTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationUpgradePolicy) *string {
		if v == nil {
			return nil
		}
		return v.UpgradeReplicaSetCheckTimeout
	}).(pulumi.StringPtrOutput)
}

// Describes the policy for a monitored application upgrade.
type ApplicationUpgradePolicyResponse struct {
	// Defines a health policy used to evaluate the health of an application or one of its children entities.
	ApplicationHealthPolicy *ArmApplicationHealthPolicyResponse `pulumi:"applicationHealthPolicy"`
	// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
	ForceRestart *ForceRestartResponse `pulumi:"forceRestart"`
	// The policy used for monitoring the application upgrade
	RollingUpgradeMonitoringPolicy *ArmRollingUpgradeMonitoringPolicyResponse `pulumi:"rollingUpgradeMonitoringPolicy"`
	// The mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored.
	UpgradeMode *string `pulumi:"upgradeMode"`
	// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
	UpgradeReplicaSetCheckTimeout *string `pulumi:"upgradeReplicaSetCheckTimeout"`
}

// ApplicationUpgradePolicyResponseInput is an input type that accepts ApplicationUpgradePolicyResponseArgs and ApplicationUpgradePolicyResponseOutput values.
// You can construct a concrete instance of `ApplicationUpgradePolicyResponseInput` via:
//
//          ApplicationUpgradePolicyResponseArgs{...}
type ApplicationUpgradePolicyResponseInput interface {
	pulumi.Input

	ToApplicationUpgradePolicyResponseOutput() ApplicationUpgradePolicyResponseOutput
	ToApplicationUpgradePolicyResponseOutputWithContext(context.Context) ApplicationUpgradePolicyResponseOutput
}

// Describes the policy for a monitored application upgrade.
type ApplicationUpgradePolicyResponseArgs struct {
	// Defines a health policy used to evaluate the health of an application or one of its children entities.
	ApplicationHealthPolicy ArmApplicationHealthPolicyResponsePtrInput `pulumi:"applicationHealthPolicy"`
	// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
	ForceRestart ForceRestartResponsePtrInput `pulumi:"forceRestart"`
	// The policy used for monitoring the application upgrade
	RollingUpgradeMonitoringPolicy ArmRollingUpgradeMonitoringPolicyResponsePtrInput `pulumi:"rollingUpgradeMonitoringPolicy"`
	// The mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored.
	UpgradeMode pulumi.StringPtrInput `pulumi:"upgradeMode"`
	// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
	UpgradeReplicaSetCheckTimeout pulumi.StringPtrInput `pulumi:"upgradeReplicaSetCheckTimeout"`
}

func (ApplicationUpgradePolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationUpgradePolicyResponse)(nil)).Elem()
}

func (i ApplicationUpgradePolicyResponseArgs) ToApplicationUpgradePolicyResponseOutput() ApplicationUpgradePolicyResponseOutput {
	return i.ToApplicationUpgradePolicyResponseOutputWithContext(context.Background())
}

func (i ApplicationUpgradePolicyResponseArgs) ToApplicationUpgradePolicyResponseOutputWithContext(ctx context.Context) ApplicationUpgradePolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationUpgradePolicyResponseOutput)
}

func (i ApplicationUpgradePolicyResponseArgs) ToApplicationUpgradePolicyResponsePtrOutput() ApplicationUpgradePolicyResponsePtrOutput {
	return i.ToApplicationUpgradePolicyResponsePtrOutputWithContext(context.Background())
}

func (i ApplicationUpgradePolicyResponseArgs) ToApplicationUpgradePolicyResponsePtrOutputWithContext(ctx context.Context) ApplicationUpgradePolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationUpgradePolicyResponseOutput).ToApplicationUpgradePolicyResponsePtrOutputWithContext(ctx)
}

// ApplicationUpgradePolicyResponsePtrInput is an input type that accepts ApplicationUpgradePolicyResponseArgs, ApplicationUpgradePolicyResponsePtr and ApplicationUpgradePolicyResponsePtrOutput values.
// You can construct a concrete instance of `ApplicationUpgradePolicyResponsePtrInput` via:
//
//          ApplicationUpgradePolicyResponseArgs{...}
//
//  or:
//
//          nil
type ApplicationUpgradePolicyResponsePtrInput interface {
	pulumi.Input

	ToApplicationUpgradePolicyResponsePtrOutput() ApplicationUpgradePolicyResponsePtrOutput
	ToApplicationUpgradePolicyResponsePtrOutputWithContext(context.Context) ApplicationUpgradePolicyResponsePtrOutput
}

type applicationUpgradePolicyResponsePtrType ApplicationUpgradePolicyResponseArgs

func ApplicationUpgradePolicyResponsePtr(v *ApplicationUpgradePolicyResponseArgs) ApplicationUpgradePolicyResponsePtrInput {
	return (*applicationUpgradePolicyResponsePtrType)(v)
}

func (*applicationUpgradePolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationUpgradePolicyResponse)(nil)).Elem()
}

func (i *applicationUpgradePolicyResponsePtrType) ToApplicationUpgradePolicyResponsePtrOutput() ApplicationUpgradePolicyResponsePtrOutput {
	return i.ToApplicationUpgradePolicyResponsePtrOutputWithContext(context.Background())
}

func (i *applicationUpgradePolicyResponsePtrType) ToApplicationUpgradePolicyResponsePtrOutputWithContext(ctx context.Context) ApplicationUpgradePolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationUpgradePolicyResponsePtrOutput)
}

// Describes the policy for a monitored application upgrade.
type ApplicationUpgradePolicyResponseOutput struct{ *pulumi.OutputState }

func (ApplicationUpgradePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationUpgradePolicyResponse)(nil)).Elem()
}

func (o ApplicationUpgradePolicyResponseOutput) ToApplicationUpgradePolicyResponseOutput() ApplicationUpgradePolicyResponseOutput {
	return o
}

func (o ApplicationUpgradePolicyResponseOutput) ToApplicationUpgradePolicyResponseOutputWithContext(ctx context.Context) ApplicationUpgradePolicyResponseOutput {
	return o
}

func (o ApplicationUpgradePolicyResponseOutput) ToApplicationUpgradePolicyResponsePtrOutput() ApplicationUpgradePolicyResponsePtrOutput {
	return o.ToApplicationUpgradePolicyResponsePtrOutputWithContext(context.Background())
}

func (o ApplicationUpgradePolicyResponseOutput) ToApplicationUpgradePolicyResponsePtrOutputWithContext(ctx context.Context) ApplicationUpgradePolicyResponsePtrOutput {
	return o.ApplyT(func(v ApplicationUpgradePolicyResponse) *ApplicationUpgradePolicyResponse {
		return &v
	}).(ApplicationUpgradePolicyResponsePtrOutput)
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
func (o ApplicationUpgradePolicyResponseOutput) ApplicationHealthPolicy() ArmApplicationHealthPolicyResponsePtrOutput {
	return o.ApplyT(func(v ApplicationUpgradePolicyResponse) *ArmApplicationHealthPolicyResponse {
		return v.ApplicationHealthPolicy
	}).(ArmApplicationHealthPolicyResponsePtrOutput)
}

// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
func (o ApplicationUpgradePolicyResponseOutput) ForceRestart() ForceRestartResponsePtrOutput {
	return o.ApplyT(func(v ApplicationUpgradePolicyResponse) *ForceRestartResponse { return v.ForceRestart }).(ForceRestartResponsePtrOutput)
}

// The policy used for monitoring the application upgrade
func (o ApplicationUpgradePolicyResponseOutput) RollingUpgradeMonitoringPolicy() ArmRollingUpgradeMonitoringPolicyResponsePtrOutput {
	return o.ApplyT(func(v ApplicationUpgradePolicyResponse) *ArmRollingUpgradeMonitoringPolicyResponse {
		return v.RollingUpgradeMonitoringPolicy
	}).(ArmRollingUpgradeMonitoringPolicyResponsePtrOutput)
}

// The mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored.
func (o ApplicationUpgradePolicyResponseOutput) UpgradeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationUpgradePolicyResponse) *string { return v.UpgradeMode }).(pulumi.StringPtrOutput)
}

// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
func (o ApplicationUpgradePolicyResponseOutput) UpgradeReplicaSetCheckTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationUpgradePolicyResponse) *string { return v.UpgradeReplicaSetCheckTimeout }).(pulumi.StringPtrOutput)
}

type ApplicationUpgradePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ApplicationUpgradePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationUpgradePolicyResponse)(nil)).Elem()
}

func (o ApplicationUpgradePolicyResponsePtrOutput) ToApplicationUpgradePolicyResponsePtrOutput() ApplicationUpgradePolicyResponsePtrOutput {
	return o
}

func (o ApplicationUpgradePolicyResponsePtrOutput) ToApplicationUpgradePolicyResponsePtrOutputWithContext(ctx context.Context) ApplicationUpgradePolicyResponsePtrOutput {
	return o
}

func (o ApplicationUpgradePolicyResponsePtrOutput) Elem() ApplicationUpgradePolicyResponseOutput {
	return o.ApplyT(func(v *ApplicationUpgradePolicyResponse) ApplicationUpgradePolicyResponse { return *v }).(ApplicationUpgradePolicyResponseOutput)
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
func (o ApplicationUpgradePolicyResponsePtrOutput) ApplicationHealthPolicy() ArmApplicationHealthPolicyResponsePtrOutput {
	return o.ApplyT(func(v *ApplicationUpgradePolicyResponse) *ArmApplicationHealthPolicyResponse {
		if v == nil {
			return nil
		}
		return v.ApplicationHealthPolicy
	}).(ArmApplicationHealthPolicyResponsePtrOutput)
}

// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
func (o ApplicationUpgradePolicyResponsePtrOutput) ForceRestart() ForceRestartResponsePtrOutput {
	return o.ApplyT(func(v *ApplicationUpgradePolicyResponse) *ForceRestartResponse {
		if v == nil {
			return nil
		}
		return v.ForceRestart
	}).(ForceRestartResponsePtrOutput)
}

// The policy used for monitoring the application upgrade
func (o ApplicationUpgradePolicyResponsePtrOutput) RollingUpgradeMonitoringPolicy() ArmRollingUpgradeMonitoringPolicyResponsePtrOutput {
	return o.ApplyT(func(v *ApplicationUpgradePolicyResponse) *ArmRollingUpgradeMonitoringPolicyResponse {
		if v == nil {
			return nil
		}
		return v.RollingUpgradeMonitoringPolicy
	}).(ArmRollingUpgradeMonitoringPolicyResponsePtrOutput)
}

// The mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored.
func (o ApplicationUpgradePolicyResponsePtrOutput) UpgradeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationUpgradePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.UpgradeMode
	}).(pulumi.StringPtrOutput)
}

// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
func (o ApplicationUpgradePolicyResponsePtrOutput) UpgradeReplicaSetCheckTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationUpgradePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.UpgradeReplicaSetCheckTimeout
	}).(pulumi.StringPtrOutput)
}

type ApplicationUserAssignedIdentity struct {
	// The friendly name of user assigned identity.
	Name string `pulumi:"name"`
	// The principal id of user assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// ApplicationUserAssignedIdentityInput is an input type that accepts ApplicationUserAssignedIdentityArgs and ApplicationUserAssignedIdentityOutput values.
// You can construct a concrete instance of `ApplicationUserAssignedIdentityInput` via:
//
//          ApplicationUserAssignedIdentityArgs{...}
type ApplicationUserAssignedIdentityInput interface {
	pulumi.Input

	ToApplicationUserAssignedIdentityOutput() ApplicationUserAssignedIdentityOutput
	ToApplicationUserAssignedIdentityOutputWithContext(context.Context) ApplicationUserAssignedIdentityOutput
}

type ApplicationUserAssignedIdentityArgs struct {
	// The friendly name of user assigned identity.
	Name pulumi.StringInput `pulumi:"name"`
	// The principal id of user assigned identity.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
}

func (ApplicationUserAssignedIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationUserAssignedIdentity)(nil)).Elem()
}

func (i ApplicationUserAssignedIdentityArgs) ToApplicationUserAssignedIdentityOutput() ApplicationUserAssignedIdentityOutput {
	return i.ToApplicationUserAssignedIdentityOutputWithContext(context.Background())
}

func (i ApplicationUserAssignedIdentityArgs) ToApplicationUserAssignedIdentityOutputWithContext(ctx context.Context) ApplicationUserAssignedIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationUserAssignedIdentityOutput)
}

// ApplicationUserAssignedIdentityArrayInput is an input type that accepts ApplicationUserAssignedIdentityArray and ApplicationUserAssignedIdentityArrayOutput values.
// You can construct a concrete instance of `ApplicationUserAssignedIdentityArrayInput` via:
//
//          ApplicationUserAssignedIdentityArray{ ApplicationUserAssignedIdentityArgs{...} }
type ApplicationUserAssignedIdentityArrayInput interface {
	pulumi.Input

	ToApplicationUserAssignedIdentityArrayOutput() ApplicationUserAssignedIdentityArrayOutput
	ToApplicationUserAssignedIdentityArrayOutputWithContext(context.Context) ApplicationUserAssignedIdentityArrayOutput
}

type ApplicationUserAssignedIdentityArray []ApplicationUserAssignedIdentityInput

func (ApplicationUserAssignedIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationUserAssignedIdentity)(nil)).Elem()
}

func (i ApplicationUserAssignedIdentityArray) ToApplicationUserAssignedIdentityArrayOutput() ApplicationUserAssignedIdentityArrayOutput {
	return i.ToApplicationUserAssignedIdentityArrayOutputWithContext(context.Background())
}

func (i ApplicationUserAssignedIdentityArray) ToApplicationUserAssignedIdentityArrayOutputWithContext(ctx context.Context) ApplicationUserAssignedIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationUserAssignedIdentityArrayOutput)
}

type ApplicationUserAssignedIdentityOutput struct{ *pulumi.OutputState }

func (ApplicationUserAssignedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationUserAssignedIdentity)(nil)).Elem()
}

func (o ApplicationUserAssignedIdentityOutput) ToApplicationUserAssignedIdentityOutput() ApplicationUserAssignedIdentityOutput {
	return o
}

func (o ApplicationUserAssignedIdentityOutput) ToApplicationUserAssignedIdentityOutputWithContext(ctx context.Context) ApplicationUserAssignedIdentityOutput {
	return o
}

// The friendly name of user assigned identity.
func (o ApplicationUserAssignedIdentityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationUserAssignedIdentity) string { return v.Name }).(pulumi.StringOutput)
}

// The principal id of user assigned identity.
func (o ApplicationUserAssignedIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationUserAssignedIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type ApplicationUserAssignedIdentityArrayOutput struct{ *pulumi.OutputState }

func (ApplicationUserAssignedIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationUserAssignedIdentity)(nil)).Elem()
}

func (o ApplicationUserAssignedIdentityArrayOutput) ToApplicationUserAssignedIdentityArrayOutput() ApplicationUserAssignedIdentityArrayOutput {
	return o
}

func (o ApplicationUserAssignedIdentityArrayOutput) ToApplicationUserAssignedIdentityArrayOutputWithContext(ctx context.Context) ApplicationUserAssignedIdentityArrayOutput {
	return o
}

func (o ApplicationUserAssignedIdentityArrayOutput) Index(i pulumi.IntInput) ApplicationUserAssignedIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationUserAssignedIdentity {
		return vs[0].([]ApplicationUserAssignedIdentity)[vs[1].(int)]
	}).(ApplicationUserAssignedIdentityOutput)
}

type ApplicationUserAssignedIdentityResponse struct {
	// The friendly name of user assigned identity.
	Name string `pulumi:"name"`
	// The principal id of user assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// ApplicationUserAssignedIdentityResponseInput is an input type that accepts ApplicationUserAssignedIdentityResponseArgs and ApplicationUserAssignedIdentityResponseOutput values.
// You can construct a concrete instance of `ApplicationUserAssignedIdentityResponseInput` via:
//
//          ApplicationUserAssignedIdentityResponseArgs{...}
type ApplicationUserAssignedIdentityResponseInput interface {
	pulumi.Input

	ToApplicationUserAssignedIdentityResponseOutput() ApplicationUserAssignedIdentityResponseOutput
	ToApplicationUserAssignedIdentityResponseOutputWithContext(context.Context) ApplicationUserAssignedIdentityResponseOutput
}

type ApplicationUserAssignedIdentityResponseArgs struct {
	// The friendly name of user assigned identity.
	Name pulumi.StringInput `pulumi:"name"`
	// The principal id of user assigned identity.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
}

func (ApplicationUserAssignedIdentityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationUserAssignedIdentityResponse)(nil)).Elem()
}

func (i ApplicationUserAssignedIdentityResponseArgs) ToApplicationUserAssignedIdentityResponseOutput() ApplicationUserAssignedIdentityResponseOutput {
	return i.ToApplicationUserAssignedIdentityResponseOutputWithContext(context.Background())
}

func (i ApplicationUserAssignedIdentityResponseArgs) ToApplicationUserAssignedIdentityResponseOutputWithContext(ctx context.Context) ApplicationUserAssignedIdentityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationUserAssignedIdentityResponseOutput)
}

// ApplicationUserAssignedIdentityResponseArrayInput is an input type that accepts ApplicationUserAssignedIdentityResponseArray and ApplicationUserAssignedIdentityResponseArrayOutput values.
// You can construct a concrete instance of `ApplicationUserAssignedIdentityResponseArrayInput` via:
//
//          ApplicationUserAssignedIdentityResponseArray{ ApplicationUserAssignedIdentityResponseArgs{...} }
type ApplicationUserAssignedIdentityResponseArrayInput interface {
	pulumi.Input

	ToApplicationUserAssignedIdentityResponseArrayOutput() ApplicationUserAssignedIdentityResponseArrayOutput
	ToApplicationUserAssignedIdentityResponseArrayOutputWithContext(context.Context) ApplicationUserAssignedIdentityResponseArrayOutput
}

type ApplicationUserAssignedIdentityResponseArray []ApplicationUserAssignedIdentityResponseInput

func (ApplicationUserAssignedIdentityResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationUserAssignedIdentityResponse)(nil)).Elem()
}

func (i ApplicationUserAssignedIdentityResponseArray) ToApplicationUserAssignedIdentityResponseArrayOutput() ApplicationUserAssignedIdentityResponseArrayOutput {
	return i.ToApplicationUserAssignedIdentityResponseArrayOutputWithContext(context.Background())
}

func (i ApplicationUserAssignedIdentityResponseArray) ToApplicationUserAssignedIdentityResponseArrayOutputWithContext(ctx context.Context) ApplicationUserAssignedIdentityResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationUserAssignedIdentityResponseArrayOutput)
}

type ApplicationUserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (ApplicationUserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationUserAssignedIdentityResponse)(nil)).Elem()
}

func (o ApplicationUserAssignedIdentityResponseOutput) ToApplicationUserAssignedIdentityResponseOutput() ApplicationUserAssignedIdentityResponseOutput {
	return o
}

func (o ApplicationUserAssignedIdentityResponseOutput) ToApplicationUserAssignedIdentityResponseOutputWithContext(ctx context.Context) ApplicationUserAssignedIdentityResponseOutput {
	return o
}

// The friendly name of user assigned identity.
func (o ApplicationUserAssignedIdentityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationUserAssignedIdentityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The principal id of user assigned identity.
func (o ApplicationUserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationUserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type ApplicationUserAssignedIdentityResponseArrayOutput struct{ *pulumi.OutputState }

func (ApplicationUserAssignedIdentityResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationUserAssignedIdentityResponse)(nil)).Elem()
}

func (o ApplicationUserAssignedIdentityResponseArrayOutput) ToApplicationUserAssignedIdentityResponseArrayOutput() ApplicationUserAssignedIdentityResponseArrayOutput {
	return o
}

func (o ApplicationUserAssignedIdentityResponseArrayOutput) ToApplicationUserAssignedIdentityResponseArrayOutputWithContext(ctx context.Context) ApplicationUserAssignedIdentityResponseArrayOutput {
	return o
}

func (o ApplicationUserAssignedIdentityResponseArrayOutput) Index(i pulumi.IntInput) ApplicationUserAssignedIdentityResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationUserAssignedIdentityResponse {
		return vs[0].([]ApplicationUserAssignedIdentityResponse)[vs[1].(int)]
	}).(ApplicationUserAssignedIdentityResponseOutput)
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
type ArmApplicationHealthPolicy struct {
	// Indicates whether warnings are treated with the same severity as errors.
	ConsiderWarningAsError *bool `pulumi:"considerWarningAsError"`
	// The health policy used by default to evaluate the health of a service type.
	DefaultServiceTypeHealthPolicy *ArmServiceTypeHealthPolicy `pulumi:"defaultServiceTypeHealthPolicy"`
	// The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
	// The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
	// This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
	// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
	MaxPercentUnhealthyDeployedApplications *int `pulumi:"maxPercentUnhealthyDeployedApplications"`
	// The map with service type health policy per service type name. The map is empty by default.
	ServiceTypeHealthPolicyMap *ArmServiceTypeHealthPolicyMap `pulumi:"serviceTypeHealthPolicyMap"`
}

// ArmApplicationHealthPolicyInput is an input type that accepts ArmApplicationHealthPolicyArgs and ArmApplicationHealthPolicyOutput values.
// You can construct a concrete instance of `ArmApplicationHealthPolicyInput` via:
//
//          ArmApplicationHealthPolicyArgs{...}
type ArmApplicationHealthPolicyInput interface {
	pulumi.Input

	ToArmApplicationHealthPolicyOutput() ArmApplicationHealthPolicyOutput
	ToArmApplicationHealthPolicyOutputWithContext(context.Context) ArmApplicationHealthPolicyOutput
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
type ArmApplicationHealthPolicyArgs struct {
	// Indicates whether warnings are treated with the same severity as errors.
	ConsiderWarningAsError pulumi.BoolPtrInput `pulumi:"considerWarningAsError"`
	// The health policy used by default to evaluate the health of a service type.
	DefaultServiceTypeHealthPolicy ArmServiceTypeHealthPolicyPtrInput `pulumi:"defaultServiceTypeHealthPolicy"`
	// The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
	// The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
	// This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
	// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
	MaxPercentUnhealthyDeployedApplications pulumi.IntPtrInput `pulumi:"maxPercentUnhealthyDeployedApplications"`
	// The map with service type health policy per service type name. The map is empty by default.
	ServiceTypeHealthPolicyMap ArmServiceTypeHealthPolicyMapPtrInput `pulumi:"serviceTypeHealthPolicyMap"`
}

func (ArmApplicationHealthPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmApplicationHealthPolicy)(nil)).Elem()
}

func (i ArmApplicationHealthPolicyArgs) ToArmApplicationHealthPolicyOutput() ArmApplicationHealthPolicyOutput {
	return i.ToArmApplicationHealthPolicyOutputWithContext(context.Background())
}

func (i ArmApplicationHealthPolicyArgs) ToArmApplicationHealthPolicyOutputWithContext(ctx context.Context) ArmApplicationHealthPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmApplicationHealthPolicyOutput)
}

func (i ArmApplicationHealthPolicyArgs) ToArmApplicationHealthPolicyPtrOutput() ArmApplicationHealthPolicyPtrOutput {
	return i.ToArmApplicationHealthPolicyPtrOutputWithContext(context.Background())
}

func (i ArmApplicationHealthPolicyArgs) ToArmApplicationHealthPolicyPtrOutputWithContext(ctx context.Context) ArmApplicationHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmApplicationHealthPolicyOutput).ToArmApplicationHealthPolicyPtrOutputWithContext(ctx)
}

// ArmApplicationHealthPolicyPtrInput is an input type that accepts ArmApplicationHealthPolicyArgs, ArmApplicationHealthPolicyPtr and ArmApplicationHealthPolicyPtrOutput values.
// You can construct a concrete instance of `ArmApplicationHealthPolicyPtrInput` via:
//
//          ArmApplicationHealthPolicyArgs{...}
//
//  or:
//
//          nil
type ArmApplicationHealthPolicyPtrInput interface {
	pulumi.Input

	ToArmApplicationHealthPolicyPtrOutput() ArmApplicationHealthPolicyPtrOutput
	ToArmApplicationHealthPolicyPtrOutputWithContext(context.Context) ArmApplicationHealthPolicyPtrOutput
}

type armApplicationHealthPolicyPtrType ArmApplicationHealthPolicyArgs

func ArmApplicationHealthPolicyPtr(v *ArmApplicationHealthPolicyArgs) ArmApplicationHealthPolicyPtrInput {
	return (*armApplicationHealthPolicyPtrType)(v)
}

func (*armApplicationHealthPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmApplicationHealthPolicy)(nil)).Elem()
}

func (i *armApplicationHealthPolicyPtrType) ToArmApplicationHealthPolicyPtrOutput() ArmApplicationHealthPolicyPtrOutput {
	return i.ToArmApplicationHealthPolicyPtrOutputWithContext(context.Background())
}

func (i *armApplicationHealthPolicyPtrType) ToArmApplicationHealthPolicyPtrOutputWithContext(ctx context.Context) ArmApplicationHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmApplicationHealthPolicyPtrOutput)
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
type ArmApplicationHealthPolicyOutput struct{ *pulumi.OutputState }

func (ArmApplicationHealthPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmApplicationHealthPolicy)(nil)).Elem()
}

func (o ArmApplicationHealthPolicyOutput) ToArmApplicationHealthPolicyOutput() ArmApplicationHealthPolicyOutput {
	return o
}

func (o ArmApplicationHealthPolicyOutput) ToArmApplicationHealthPolicyOutputWithContext(ctx context.Context) ArmApplicationHealthPolicyOutput {
	return o
}

func (o ArmApplicationHealthPolicyOutput) ToArmApplicationHealthPolicyPtrOutput() ArmApplicationHealthPolicyPtrOutput {
	return o.ToArmApplicationHealthPolicyPtrOutputWithContext(context.Background())
}

func (o ArmApplicationHealthPolicyOutput) ToArmApplicationHealthPolicyPtrOutputWithContext(ctx context.Context) ArmApplicationHealthPolicyPtrOutput {
	return o.ApplyT(func(v ArmApplicationHealthPolicy) *ArmApplicationHealthPolicy {
		return &v
	}).(ArmApplicationHealthPolicyPtrOutput)
}

// Indicates whether warnings are treated with the same severity as errors.
func (o ArmApplicationHealthPolicyOutput) ConsiderWarningAsError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ArmApplicationHealthPolicy) *bool { return v.ConsiderWarningAsError }).(pulumi.BoolPtrOutput)
}

// The health policy used by default to evaluate the health of a service type.
func (o ArmApplicationHealthPolicyOutput) DefaultServiceTypeHealthPolicy() ArmServiceTypeHealthPolicyPtrOutput {
	return o.ApplyT(func(v ArmApplicationHealthPolicy) *ArmServiceTypeHealthPolicy {
		return v.DefaultServiceTypeHealthPolicy
	}).(ArmServiceTypeHealthPolicyPtrOutput)
}

// The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
// The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
// This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
func (o ArmApplicationHealthPolicyOutput) MaxPercentUnhealthyDeployedApplications() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArmApplicationHealthPolicy) *int { return v.MaxPercentUnhealthyDeployedApplications }).(pulumi.IntPtrOutput)
}

// The map with service type health policy per service type name. The map is empty by default.
func (o ArmApplicationHealthPolicyOutput) ServiceTypeHealthPolicyMap() ArmServiceTypeHealthPolicyMapPtrOutput {
	return o.ApplyT(func(v ArmApplicationHealthPolicy) *ArmServiceTypeHealthPolicyMap { return v.ServiceTypeHealthPolicyMap }).(ArmServiceTypeHealthPolicyMapPtrOutput)
}

type ArmApplicationHealthPolicyPtrOutput struct{ *pulumi.OutputState }

func (ArmApplicationHealthPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmApplicationHealthPolicy)(nil)).Elem()
}

func (o ArmApplicationHealthPolicyPtrOutput) ToArmApplicationHealthPolicyPtrOutput() ArmApplicationHealthPolicyPtrOutput {
	return o
}

func (o ArmApplicationHealthPolicyPtrOutput) ToArmApplicationHealthPolicyPtrOutputWithContext(ctx context.Context) ArmApplicationHealthPolicyPtrOutput {
	return o
}

func (o ArmApplicationHealthPolicyPtrOutput) Elem() ArmApplicationHealthPolicyOutput {
	return o.ApplyT(func(v *ArmApplicationHealthPolicy) ArmApplicationHealthPolicy { return *v }).(ArmApplicationHealthPolicyOutput)
}

// Indicates whether warnings are treated with the same severity as errors.
func (o ArmApplicationHealthPolicyPtrOutput) ConsiderWarningAsError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArmApplicationHealthPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.ConsiderWarningAsError
	}).(pulumi.BoolPtrOutput)
}

// The health policy used by default to evaluate the health of a service type.
func (o ArmApplicationHealthPolicyPtrOutput) DefaultServiceTypeHealthPolicy() ArmServiceTypeHealthPolicyPtrOutput {
	return o.ApplyT(func(v *ArmApplicationHealthPolicy) *ArmServiceTypeHealthPolicy {
		if v == nil {
			return nil
		}
		return v.DefaultServiceTypeHealthPolicy
	}).(ArmServiceTypeHealthPolicyPtrOutput)
}

// The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
// The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
// This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
func (o ArmApplicationHealthPolicyPtrOutput) MaxPercentUnhealthyDeployedApplications() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArmApplicationHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyDeployedApplications
	}).(pulumi.IntPtrOutput)
}

// The map with service type health policy per service type name. The map is empty by default.
func (o ArmApplicationHealthPolicyPtrOutput) ServiceTypeHealthPolicyMap() ArmServiceTypeHealthPolicyMapPtrOutput {
	return o.ApplyT(func(v *ArmApplicationHealthPolicy) *ArmServiceTypeHealthPolicyMap {
		if v == nil {
			return nil
		}
		return v.ServiceTypeHealthPolicyMap
	}).(ArmServiceTypeHealthPolicyMapPtrOutput)
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
type ArmApplicationHealthPolicyResponse struct {
	// Indicates whether warnings are treated with the same severity as errors.
	ConsiderWarningAsError *bool `pulumi:"considerWarningAsError"`
	// The health policy used by default to evaluate the health of a service type.
	DefaultServiceTypeHealthPolicy *ArmServiceTypeHealthPolicyResponse `pulumi:"defaultServiceTypeHealthPolicy"`
	// The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
	// The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
	// This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
	// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
	MaxPercentUnhealthyDeployedApplications *int `pulumi:"maxPercentUnhealthyDeployedApplications"`
	// The map with service type health policy per service type name. The map is empty by default.
	ServiceTypeHealthPolicyMap *ArmServiceTypeHealthPolicyMapResponse `pulumi:"serviceTypeHealthPolicyMap"`
}

// ArmApplicationHealthPolicyResponseInput is an input type that accepts ArmApplicationHealthPolicyResponseArgs and ArmApplicationHealthPolicyResponseOutput values.
// You can construct a concrete instance of `ArmApplicationHealthPolicyResponseInput` via:
//
//          ArmApplicationHealthPolicyResponseArgs{...}
type ArmApplicationHealthPolicyResponseInput interface {
	pulumi.Input

	ToArmApplicationHealthPolicyResponseOutput() ArmApplicationHealthPolicyResponseOutput
	ToArmApplicationHealthPolicyResponseOutputWithContext(context.Context) ArmApplicationHealthPolicyResponseOutput
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
type ArmApplicationHealthPolicyResponseArgs struct {
	// Indicates whether warnings are treated with the same severity as errors.
	ConsiderWarningAsError pulumi.BoolPtrInput `pulumi:"considerWarningAsError"`
	// The health policy used by default to evaluate the health of a service type.
	DefaultServiceTypeHealthPolicy ArmServiceTypeHealthPolicyResponsePtrInput `pulumi:"defaultServiceTypeHealthPolicy"`
	// The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
	// The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
	// This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
	// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
	MaxPercentUnhealthyDeployedApplications pulumi.IntPtrInput `pulumi:"maxPercentUnhealthyDeployedApplications"`
	// The map with service type health policy per service type name. The map is empty by default.
	ServiceTypeHealthPolicyMap ArmServiceTypeHealthPolicyMapResponsePtrInput `pulumi:"serviceTypeHealthPolicyMap"`
}

func (ArmApplicationHealthPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmApplicationHealthPolicyResponse)(nil)).Elem()
}

func (i ArmApplicationHealthPolicyResponseArgs) ToArmApplicationHealthPolicyResponseOutput() ArmApplicationHealthPolicyResponseOutput {
	return i.ToArmApplicationHealthPolicyResponseOutputWithContext(context.Background())
}

func (i ArmApplicationHealthPolicyResponseArgs) ToArmApplicationHealthPolicyResponseOutputWithContext(ctx context.Context) ArmApplicationHealthPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmApplicationHealthPolicyResponseOutput)
}

func (i ArmApplicationHealthPolicyResponseArgs) ToArmApplicationHealthPolicyResponsePtrOutput() ArmApplicationHealthPolicyResponsePtrOutput {
	return i.ToArmApplicationHealthPolicyResponsePtrOutputWithContext(context.Background())
}

func (i ArmApplicationHealthPolicyResponseArgs) ToArmApplicationHealthPolicyResponsePtrOutputWithContext(ctx context.Context) ArmApplicationHealthPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmApplicationHealthPolicyResponseOutput).ToArmApplicationHealthPolicyResponsePtrOutputWithContext(ctx)
}

// ArmApplicationHealthPolicyResponsePtrInput is an input type that accepts ArmApplicationHealthPolicyResponseArgs, ArmApplicationHealthPolicyResponsePtr and ArmApplicationHealthPolicyResponsePtrOutput values.
// You can construct a concrete instance of `ArmApplicationHealthPolicyResponsePtrInput` via:
//
//          ArmApplicationHealthPolicyResponseArgs{...}
//
//  or:
//
//          nil
type ArmApplicationHealthPolicyResponsePtrInput interface {
	pulumi.Input

	ToArmApplicationHealthPolicyResponsePtrOutput() ArmApplicationHealthPolicyResponsePtrOutput
	ToArmApplicationHealthPolicyResponsePtrOutputWithContext(context.Context) ArmApplicationHealthPolicyResponsePtrOutput
}

type armApplicationHealthPolicyResponsePtrType ArmApplicationHealthPolicyResponseArgs

func ArmApplicationHealthPolicyResponsePtr(v *ArmApplicationHealthPolicyResponseArgs) ArmApplicationHealthPolicyResponsePtrInput {
	return (*armApplicationHealthPolicyResponsePtrType)(v)
}

func (*armApplicationHealthPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmApplicationHealthPolicyResponse)(nil)).Elem()
}

func (i *armApplicationHealthPolicyResponsePtrType) ToArmApplicationHealthPolicyResponsePtrOutput() ArmApplicationHealthPolicyResponsePtrOutput {
	return i.ToArmApplicationHealthPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *armApplicationHealthPolicyResponsePtrType) ToArmApplicationHealthPolicyResponsePtrOutputWithContext(ctx context.Context) ArmApplicationHealthPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmApplicationHealthPolicyResponsePtrOutput)
}

// Defines a health policy used to evaluate the health of an application or one of its children entities.
type ArmApplicationHealthPolicyResponseOutput struct{ *pulumi.OutputState }

func (ArmApplicationHealthPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmApplicationHealthPolicyResponse)(nil)).Elem()
}

func (o ArmApplicationHealthPolicyResponseOutput) ToArmApplicationHealthPolicyResponseOutput() ArmApplicationHealthPolicyResponseOutput {
	return o
}

func (o ArmApplicationHealthPolicyResponseOutput) ToArmApplicationHealthPolicyResponseOutputWithContext(ctx context.Context) ArmApplicationHealthPolicyResponseOutput {
	return o
}

func (o ArmApplicationHealthPolicyResponseOutput) ToArmApplicationHealthPolicyResponsePtrOutput() ArmApplicationHealthPolicyResponsePtrOutput {
	return o.ToArmApplicationHealthPolicyResponsePtrOutputWithContext(context.Background())
}

func (o ArmApplicationHealthPolicyResponseOutput) ToArmApplicationHealthPolicyResponsePtrOutputWithContext(ctx context.Context) ArmApplicationHealthPolicyResponsePtrOutput {
	return o.ApplyT(func(v ArmApplicationHealthPolicyResponse) *ArmApplicationHealthPolicyResponse {
		return &v
	}).(ArmApplicationHealthPolicyResponsePtrOutput)
}

// Indicates whether warnings are treated with the same severity as errors.
func (o ArmApplicationHealthPolicyResponseOutput) ConsiderWarningAsError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ArmApplicationHealthPolicyResponse) *bool { return v.ConsiderWarningAsError }).(pulumi.BoolPtrOutput)
}

// The health policy used by default to evaluate the health of a service type.
func (o ArmApplicationHealthPolicyResponseOutput) DefaultServiceTypeHealthPolicy() ArmServiceTypeHealthPolicyResponsePtrOutput {
	return o.ApplyT(func(v ArmApplicationHealthPolicyResponse) *ArmServiceTypeHealthPolicyResponse {
		return v.DefaultServiceTypeHealthPolicy
	}).(ArmServiceTypeHealthPolicyResponsePtrOutput)
}

// The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
// The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
// This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
func (o ArmApplicationHealthPolicyResponseOutput) MaxPercentUnhealthyDeployedApplications() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArmApplicationHealthPolicyResponse) *int { return v.MaxPercentUnhealthyDeployedApplications }).(pulumi.IntPtrOutput)
}

// The map with service type health policy per service type name. The map is empty by default.
func (o ArmApplicationHealthPolicyResponseOutput) ServiceTypeHealthPolicyMap() ArmServiceTypeHealthPolicyMapResponsePtrOutput {
	return o.ApplyT(func(v ArmApplicationHealthPolicyResponse) *ArmServiceTypeHealthPolicyMapResponse {
		return v.ServiceTypeHealthPolicyMap
	}).(ArmServiceTypeHealthPolicyMapResponsePtrOutput)
}

type ArmApplicationHealthPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ArmApplicationHealthPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmApplicationHealthPolicyResponse)(nil)).Elem()
}

func (o ArmApplicationHealthPolicyResponsePtrOutput) ToArmApplicationHealthPolicyResponsePtrOutput() ArmApplicationHealthPolicyResponsePtrOutput {
	return o
}

func (o ArmApplicationHealthPolicyResponsePtrOutput) ToArmApplicationHealthPolicyResponsePtrOutputWithContext(ctx context.Context) ArmApplicationHealthPolicyResponsePtrOutput {
	return o
}

func (o ArmApplicationHealthPolicyResponsePtrOutput) Elem() ArmApplicationHealthPolicyResponseOutput {
	return o.ApplyT(func(v *ArmApplicationHealthPolicyResponse) ArmApplicationHealthPolicyResponse { return *v }).(ArmApplicationHealthPolicyResponseOutput)
}

// Indicates whether warnings are treated with the same severity as errors.
func (o ArmApplicationHealthPolicyResponsePtrOutput) ConsiderWarningAsError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ArmApplicationHealthPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ConsiderWarningAsError
	}).(pulumi.BoolPtrOutput)
}

// The health policy used by default to evaluate the health of a service type.
func (o ArmApplicationHealthPolicyResponsePtrOutput) DefaultServiceTypeHealthPolicy() ArmServiceTypeHealthPolicyResponsePtrOutput {
	return o.ApplyT(func(v *ArmApplicationHealthPolicyResponse) *ArmServiceTypeHealthPolicyResponse {
		if v == nil {
			return nil
		}
		return v.DefaultServiceTypeHealthPolicy
	}).(ArmServiceTypeHealthPolicyResponsePtrOutput)
}

// The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
// The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
// This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
func (o ArmApplicationHealthPolicyResponsePtrOutput) MaxPercentUnhealthyDeployedApplications() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArmApplicationHealthPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyDeployedApplications
	}).(pulumi.IntPtrOutput)
}

// The map with service type health policy per service type name. The map is empty by default.
func (o ArmApplicationHealthPolicyResponsePtrOutput) ServiceTypeHealthPolicyMap() ArmServiceTypeHealthPolicyMapResponsePtrOutput {
	return o.ApplyT(func(v *ArmApplicationHealthPolicyResponse) *ArmServiceTypeHealthPolicyMapResponse {
		if v == nil {
			return nil
		}
		return v.ServiceTypeHealthPolicyMap
	}).(ArmServiceTypeHealthPolicyMapResponsePtrOutput)
}

// The policy used for monitoring the application upgrade
type ArmRollingUpgradeMonitoringPolicy struct {
	// The activation Mode of the service package
	FailureAction *string `pulumi:"failureAction"`
	// The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	HealthCheckRetryTimeout *string `pulumi:"healthCheckRetryTimeout"`
	// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	HealthCheckStableDuration *string `pulumi:"healthCheckStableDuration"`
	// The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	HealthCheckWaitDuration *string `pulumi:"healthCheckWaitDuration"`
	// The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	UpgradeDomainTimeout *string `pulumi:"upgradeDomainTimeout"`
	// The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	UpgradeTimeout *string `pulumi:"upgradeTimeout"`
}

// ArmRollingUpgradeMonitoringPolicyInput is an input type that accepts ArmRollingUpgradeMonitoringPolicyArgs and ArmRollingUpgradeMonitoringPolicyOutput values.
// You can construct a concrete instance of `ArmRollingUpgradeMonitoringPolicyInput` via:
//
//          ArmRollingUpgradeMonitoringPolicyArgs{...}
type ArmRollingUpgradeMonitoringPolicyInput interface {
	pulumi.Input

	ToArmRollingUpgradeMonitoringPolicyOutput() ArmRollingUpgradeMonitoringPolicyOutput
	ToArmRollingUpgradeMonitoringPolicyOutputWithContext(context.Context) ArmRollingUpgradeMonitoringPolicyOutput
}

// The policy used for monitoring the application upgrade
type ArmRollingUpgradeMonitoringPolicyArgs struct {
	// The activation Mode of the service package
	FailureAction pulumi.StringPtrInput `pulumi:"failureAction"`
	// The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	HealthCheckRetryTimeout pulumi.StringPtrInput `pulumi:"healthCheckRetryTimeout"`
	// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	HealthCheckStableDuration pulumi.StringPtrInput `pulumi:"healthCheckStableDuration"`
	// The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	HealthCheckWaitDuration pulumi.StringPtrInput `pulumi:"healthCheckWaitDuration"`
	// The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	UpgradeDomainTimeout pulumi.StringPtrInput `pulumi:"upgradeDomainTimeout"`
	// The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	UpgradeTimeout pulumi.StringPtrInput `pulumi:"upgradeTimeout"`
}

func (ArmRollingUpgradeMonitoringPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmRollingUpgradeMonitoringPolicy)(nil)).Elem()
}

func (i ArmRollingUpgradeMonitoringPolicyArgs) ToArmRollingUpgradeMonitoringPolicyOutput() ArmRollingUpgradeMonitoringPolicyOutput {
	return i.ToArmRollingUpgradeMonitoringPolicyOutputWithContext(context.Background())
}

func (i ArmRollingUpgradeMonitoringPolicyArgs) ToArmRollingUpgradeMonitoringPolicyOutputWithContext(ctx context.Context) ArmRollingUpgradeMonitoringPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmRollingUpgradeMonitoringPolicyOutput)
}

func (i ArmRollingUpgradeMonitoringPolicyArgs) ToArmRollingUpgradeMonitoringPolicyPtrOutput() ArmRollingUpgradeMonitoringPolicyPtrOutput {
	return i.ToArmRollingUpgradeMonitoringPolicyPtrOutputWithContext(context.Background())
}

func (i ArmRollingUpgradeMonitoringPolicyArgs) ToArmRollingUpgradeMonitoringPolicyPtrOutputWithContext(ctx context.Context) ArmRollingUpgradeMonitoringPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmRollingUpgradeMonitoringPolicyOutput).ToArmRollingUpgradeMonitoringPolicyPtrOutputWithContext(ctx)
}

// ArmRollingUpgradeMonitoringPolicyPtrInput is an input type that accepts ArmRollingUpgradeMonitoringPolicyArgs, ArmRollingUpgradeMonitoringPolicyPtr and ArmRollingUpgradeMonitoringPolicyPtrOutput values.
// You can construct a concrete instance of `ArmRollingUpgradeMonitoringPolicyPtrInput` via:
//
//          ArmRollingUpgradeMonitoringPolicyArgs{...}
//
//  or:
//
//          nil
type ArmRollingUpgradeMonitoringPolicyPtrInput interface {
	pulumi.Input

	ToArmRollingUpgradeMonitoringPolicyPtrOutput() ArmRollingUpgradeMonitoringPolicyPtrOutput
	ToArmRollingUpgradeMonitoringPolicyPtrOutputWithContext(context.Context) ArmRollingUpgradeMonitoringPolicyPtrOutput
}

type armRollingUpgradeMonitoringPolicyPtrType ArmRollingUpgradeMonitoringPolicyArgs

func ArmRollingUpgradeMonitoringPolicyPtr(v *ArmRollingUpgradeMonitoringPolicyArgs) ArmRollingUpgradeMonitoringPolicyPtrInput {
	return (*armRollingUpgradeMonitoringPolicyPtrType)(v)
}

func (*armRollingUpgradeMonitoringPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmRollingUpgradeMonitoringPolicy)(nil)).Elem()
}

func (i *armRollingUpgradeMonitoringPolicyPtrType) ToArmRollingUpgradeMonitoringPolicyPtrOutput() ArmRollingUpgradeMonitoringPolicyPtrOutput {
	return i.ToArmRollingUpgradeMonitoringPolicyPtrOutputWithContext(context.Background())
}

func (i *armRollingUpgradeMonitoringPolicyPtrType) ToArmRollingUpgradeMonitoringPolicyPtrOutputWithContext(ctx context.Context) ArmRollingUpgradeMonitoringPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmRollingUpgradeMonitoringPolicyPtrOutput)
}

// The policy used for monitoring the application upgrade
type ArmRollingUpgradeMonitoringPolicyOutput struct{ *pulumi.OutputState }

func (ArmRollingUpgradeMonitoringPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmRollingUpgradeMonitoringPolicy)(nil)).Elem()
}

func (o ArmRollingUpgradeMonitoringPolicyOutput) ToArmRollingUpgradeMonitoringPolicyOutput() ArmRollingUpgradeMonitoringPolicyOutput {
	return o
}

func (o ArmRollingUpgradeMonitoringPolicyOutput) ToArmRollingUpgradeMonitoringPolicyOutputWithContext(ctx context.Context) ArmRollingUpgradeMonitoringPolicyOutput {
	return o
}

func (o ArmRollingUpgradeMonitoringPolicyOutput) ToArmRollingUpgradeMonitoringPolicyPtrOutput() ArmRollingUpgradeMonitoringPolicyPtrOutput {
	return o.ToArmRollingUpgradeMonitoringPolicyPtrOutputWithContext(context.Background())
}

func (o ArmRollingUpgradeMonitoringPolicyOutput) ToArmRollingUpgradeMonitoringPolicyPtrOutputWithContext(ctx context.Context) ArmRollingUpgradeMonitoringPolicyPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicy) *ArmRollingUpgradeMonitoringPolicy {
		return &v
	}).(ArmRollingUpgradeMonitoringPolicyPtrOutput)
}

// The activation Mode of the service package
func (o ArmRollingUpgradeMonitoringPolicyOutput) FailureAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicy) *string { return v.FailureAction }).(pulumi.StringPtrOutput)
}

// The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyOutput) HealthCheckRetryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicy) *string { return v.HealthCheckRetryTimeout }).(pulumi.StringPtrOutput)
}

// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyOutput) HealthCheckStableDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicy) *string { return v.HealthCheckStableDuration }).(pulumi.StringPtrOutput)
}

// The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyOutput) HealthCheckWaitDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicy) *string { return v.HealthCheckWaitDuration }).(pulumi.StringPtrOutput)
}

// The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyOutput) UpgradeDomainTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicy) *string { return v.UpgradeDomainTimeout }).(pulumi.StringPtrOutput)
}

// The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyOutput) UpgradeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicy) *string { return v.UpgradeTimeout }).(pulumi.StringPtrOutput)
}

type ArmRollingUpgradeMonitoringPolicyPtrOutput struct{ *pulumi.OutputState }

func (ArmRollingUpgradeMonitoringPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmRollingUpgradeMonitoringPolicy)(nil)).Elem()
}

func (o ArmRollingUpgradeMonitoringPolicyPtrOutput) ToArmRollingUpgradeMonitoringPolicyPtrOutput() ArmRollingUpgradeMonitoringPolicyPtrOutput {
	return o
}

func (o ArmRollingUpgradeMonitoringPolicyPtrOutput) ToArmRollingUpgradeMonitoringPolicyPtrOutputWithContext(ctx context.Context) ArmRollingUpgradeMonitoringPolicyPtrOutput {
	return o
}

func (o ArmRollingUpgradeMonitoringPolicyPtrOutput) Elem() ArmRollingUpgradeMonitoringPolicyOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicy) ArmRollingUpgradeMonitoringPolicy { return *v }).(ArmRollingUpgradeMonitoringPolicyOutput)
}

// The activation Mode of the service package
func (o ArmRollingUpgradeMonitoringPolicyPtrOutput) FailureAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicy) *string {
		if v == nil {
			return nil
		}
		return v.FailureAction
	}).(pulumi.StringPtrOutput)
}

// The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyPtrOutput) HealthCheckRetryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicy) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckRetryTimeout
	}).(pulumi.StringPtrOutput)
}

// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyPtrOutput) HealthCheckStableDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicy) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckStableDuration
	}).(pulumi.StringPtrOutput)
}

// The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyPtrOutput) HealthCheckWaitDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicy) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckWaitDuration
	}).(pulumi.StringPtrOutput)
}

// The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyPtrOutput) UpgradeDomainTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicy) *string {
		if v == nil {
			return nil
		}
		return v.UpgradeDomainTimeout
	}).(pulumi.StringPtrOutput)
}

// The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyPtrOutput) UpgradeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicy) *string {
		if v == nil {
			return nil
		}
		return v.UpgradeTimeout
	}).(pulumi.StringPtrOutput)
}

// The policy used for monitoring the application upgrade
type ArmRollingUpgradeMonitoringPolicyResponse struct {
	// The activation Mode of the service package
	FailureAction *string `pulumi:"failureAction"`
	// The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	HealthCheckRetryTimeout *string `pulumi:"healthCheckRetryTimeout"`
	// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	HealthCheckStableDuration *string `pulumi:"healthCheckStableDuration"`
	// The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	HealthCheckWaitDuration *string `pulumi:"healthCheckWaitDuration"`
	// The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	UpgradeDomainTimeout *string `pulumi:"upgradeDomainTimeout"`
	// The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	UpgradeTimeout *string `pulumi:"upgradeTimeout"`
}

// ArmRollingUpgradeMonitoringPolicyResponseInput is an input type that accepts ArmRollingUpgradeMonitoringPolicyResponseArgs and ArmRollingUpgradeMonitoringPolicyResponseOutput values.
// You can construct a concrete instance of `ArmRollingUpgradeMonitoringPolicyResponseInput` via:
//
//          ArmRollingUpgradeMonitoringPolicyResponseArgs{...}
type ArmRollingUpgradeMonitoringPolicyResponseInput interface {
	pulumi.Input

	ToArmRollingUpgradeMonitoringPolicyResponseOutput() ArmRollingUpgradeMonitoringPolicyResponseOutput
	ToArmRollingUpgradeMonitoringPolicyResponseOutputWithContext(context.Context) ArmRollingUpgradeMonitoringPolicyResponseOutput
}

// The policy used for monitoring the application upgrade
type ArmRollingUpgradeMonitoringPolicyResponseArgs struct {
	// The activation Mode of the service package
	FailureAction pulumi.StringPtrInput `pulumi:"failureAction"`
	// The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	HealthCheckRetryTimeout pulumi.StringPtrInput `pulumi:"healthCheckRetryTimeout"`
	// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	HealthCheckStableDuration pulumi.StringPtrInput `pulumi:"healthCheckStableDuration"`
	// The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	HealthCheckWaitDuration pulumi.StringPtrInput `pulumi:"healthCheckWaitDuration"`
	// The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	UpgradeDomainTimeout pulumi.StringPtrInput `pulumi:"upgradeDomainTimeout"`
	// The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
	UpgradeTimeout pulumi.StringPtrInput `pulumi:"upgradeTimeout"`
}

func (ArmRollingUpgradeMonitoringPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmRollingUpgradeMonitoringPolicyResponse)(nil)).Elem()
}

func (i ArmRollingUpgradeMonitoringPolicyResponseArgs) ToArmRollingUpgradeMonitoringPolicyResponseOutput() ArmRollingUpgradeMonitoringPolicyResponseOutput {
	return i.ToArmRollingUpgradeMonitoringPolicyResponseOutputWithContext(context.Background())
}

func (i ArmRollingUpgradeMonitoringPolicyResponseArgs) ToArmRollingUpgradeMonitoringPolicyResponseOutputWithContext(ctx context.Context) ArmRollingUpgradeMonitoringPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmRollingUpgradeMonitoringPolicyResponseOutput)
}

func (i ArmRollingUpgradeMonitoringPolicyResponseArgs) ToArmRollingUpgradeMonitoringPolicyResponsePtrOutput() ArmRollingUpgradeMonitoringPolicyResponsePtrOutput {
	return i.ToArmRollingUpgradeMonitoringPolicyResponsePtrOutputWithContext(context.Background())
}

func (i ArmRollingUpgradeMonitoringPolicyResponseArgs) ToArmRollingUpgradeMonitoringPolicyResponsePtrOutputWithContext(ctx context.Context) ArmRollingUpgradeMonitoringPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmRollingUpgradeMonitoringPolicyResponseOutput).ToArmRollingUpgradeMonitoringPolicyResponsePtrOutputWithContext(ctx)
}

// ArmRollingUpgradeMonitoringPolicyResponsePtrInput is an input type that accepts ArmRollingUpgradeMonitoringPolicyResponseArgs, ArmRollingUpgradeMonitoringPolicyResponsePtr and ArmRollingUpgradeMonitoringPolicyResponsePtrOutput values.
// You can construct a concrete instance of `ArmRollingUpgradeMonitoringPolicyResponsePtrInput` via:
//
//          ArmRollingUpgradeMonitoringPolicyResponseArgs{...}
//
//  or:
//
//          nil
type ArmRollingUpgradeMonitoringPolicyResponsePtrInput interface {
	pulumi.Input

	ToArmRollingUpgradeMonitoringPolicyResponsePtrOutput() ArmRollingUpgradeMonitoringPolicyResponsePtrOutput
	ToArmRollingUpgradeMonitoringPolicyResponsePtrOutputWithContext(context.Context) ArmRollingUpgradeMonitoringPolicyResponsePtrOutput
}

type armRollingUpgradeMonitoringPolicyResponsePtrType ArmRollingUpgradeMonitoringPolicyResponseArgs

func ArmRollingUpgradeMonitoringPolicyResponsePtr(v *ArmRollingUpgradeMonitoringPolicyResponseArgs) ArmRollingUpgradeMonitoringPolicyResponsePtrInput {
	return (*armRollingUpgradeMonitoringPolicyResponsePtrType)(v)
}

func (*armRollingUpgradeMonitoringPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmRollingUpgradeMonitoringPolicyResponse)(nil)).Elem()
}

func (i *armRollingUpgradeMonitoringPolicyResponsePtrType) ToArmRollingUpgradeMonitoringPolicyResponsePtrOutput() ArmRollingUpgradeMonitoringPolicyResponsePtrOutput {
	return i.ToArmRollingUpgradeMonitoringPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *armRollingUpgradeMonitoringPolicyResponsePtrType) ToArmRollingUpgradeMonitoringPolicyResponsePtrOutputWithContext(ctx context.Context) ArmRollingUpgradeMonitoringPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmRollingUpgradeMonitoringPolicyResponsePtrOutput)
}

// The policy used for monitoring the application upgrade
type ArmRollingUpgradeMonitoringPolicyResponseOutput struct{ *pulumi.OutputState }

func (ArmRollingUpgradeMonitoringPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmRollingUpgradeMonitoringPolicyResponse)(nil)).Elem()
}

func (o ArmRollingUpgradeMonitoringPolicyResponseOutput) ToArmRollingUpgradeMonitoringPolicyResponseOutput() ArmRollingUpgradeMonitoringPolicyResponseOutput {
	return o
}

func (o ArmRollingUpgradeMonitoringPolicyResponseOutput) ToArmRollingUpgradeMonitoringPolicyResponseOutputWithContext(ctx context.Context) ArmRollingUpgradeMonitoringPolicyResponseOutput {
	return o
}

func (o ArmRollingUpgradeMonitoringPolicyResponseOutput) ToArmRollingUpgradeMonitoringPolicyResponsePtrOutput() ArmRollingUpgradeMonitoringPolicyResponsePtrOutput {
	return o.ToArmRollingUpgradeMonitoringPolicyResponsePtrOutputWithContext(context.Background())
}

func (o ArmRollingUpgradeMonitoringPolicyResponseOutput) ToArmRollingUpgradeMonitoringPolicyResponsePtrOutputWithContext(ctx context.Context) ArmRollingUpgradeMonitoringPolicyResponsePtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicyResponse) *ArmRollingUpgradeMonitoringPolicyResponse {
		return &v
	}).(ArmRollingUpgradeMonitoringPolicyResponsePtrOutput)
}

// The activation Mode of the service package
func (o ArmRollingUpgradeMonitoringPolicyResponseOutput) FailureAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicyResponse) *string { return v.FailureAction }).(pulumi.StringPtrOutput)
}

// The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyResponseOutput) HealthCheckRetryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicyResponse) *string { return v.HealthCheckRetryTimeout }).(pulumi.StringPtrOutput)
}

// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyResponseOutput) HealthCheckStableDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicyResponse) *string { return v.HealthCheckStableDuration }).(pulumi.StringPtrOutput)
}

// The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyResponseOutput) HealthCheckWaitDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicyResponse) *string { return v.HealthCheckWaitDuration }).(pulumi.StringPtrOutput)
}

// The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyResponseOutput) UpgradeDomainTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicyResponse) *string { return v.UpgradeDomainTimeout }).(pulumi.StringPtrOutput)
}

// The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyResponseOutput) UpgradeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmRollingUpgradeMonitoringPolicyResponse) *string { return v.UpgradeTimeout }).(pulumi.StringPtrOutput)
}

type ArmRollingUpgradeMonitoringPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ArmRollingUpgradeMonitoringPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmRollingUpgradeMonitoringPolicyResponse)(nil)).Elem()
}

func (o ArmRollingUpgradeMonitoringPolicyResponsePtrOutput) ToArmRollingUpgradeMonitoringPolicyResponsePtrOutput() ArmRollingUpgradeMonitoringPolicyResponsePtrOutput {
	return o
}

func (o ArmRollingUpgradeMonitoringPolicyResponsePtrOutput) ToArmRollingUpgradeMonitoringPolicyResponsePtrOutputWithContext(ctx context.Context) ArmRollingUpgradeMonitoringPolicyResponsePtrOutput {
	return o
}

func (o ArmRollingUpgradeMonitoringPolicyResponsePtrOutput) Elem() ArmRollingUpgradeMonitoringPolicyResponseOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicyResponse) ArmRollingUpgradeMonitoringPolicyResponse {
		return *v
	}).(ArmRollingUpgradeMonitoringPolicyResponseOutput)
}

// The activation Mode of the service package
func (o ArmRollingUpgradeMonitoringPolicyResponsePtrOutput) FailureAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.FailureAction
	}).(pulumi.StringPtrOutput)
}

// The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyResponsePtrOutput) HealthCheckRetryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckRetryTimeout
	}).(pulumi.StringPtrOutput)
}

// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyResponsePtrOutput) HealthCheckStableDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckStableDuration
	}).(pulumi.StringPtrOutput)
}

// The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyResponsePtrOutput) HealthCheckWaitDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckWaitDuration
	}).(pulumi.StringPtrOutput)
}

// The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyResponsePtrOutput) UpgradeDomainTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.UpgradeDomainTimeout
	}).(pulumi.StringPtrOutput)
}

// The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
func (o ArmRollingUpgradeMonitoringPolicyResponsePtrOutput) UpgradeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmRollingUpgradeMonitoringPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.UpgradeTimeout
	}).(pulumi.StringPtrOutput)
}

// Represents the health policy used to evaluate the health of services belonging to a service type.
type ArmServiceTypeHealthPolicy struct {
	// The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyPartitionsPerService *int `pulumi:"maxPercentUnhealthyPartitionsPerService"`
	// The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyReplicasPerPartition *int `pulumi:"maxPercentUnhealthyReplicasPerPartition"`
	// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyServices *int `pulumi:"maxPercentUnhealthyServices"`
}

// ArmServiceTypeHealthPolicyInput is an input type that accepts ArmServiceTypeHealthPolicyArgs and ArmServiceTypeHealthPolicyOutput values.
// You can construct a concrete instance of `ArmServiceTypeHealthPolicyInput` via:
//
//          ArmServiceTypeHealthPolicyArgs{...}
type ArmServiceTypeHealthPolicyInput interface {
	pulumi.Input

	ToArmServiceTypeHealthPolicyOutput() ArmServiceTypeHealthPolicyOutput
	ToArmServiceTypeHealthPolicyOutputWithContext(context.Context) ArmServiceTypeHealthPolicyOutput
}

// Represents the health policy used to evaluate the health of services belonging to a service type.
type ArmServiceTypeHealthPolicyArgs struct {
	// The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyPartitionsPerService pulumi.IntPtrInput `pulumi:"maxPercentUnhealthyPartitionsPerService"`
	// The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyReplicasPerPartition pulumi.IntPtrInput `pulumi:"maxPercentUnhealthyReplicasPerPartition"`
	// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyServices pulumi.IntPtrInput `pulumi:"maxPercentUnhealthyServices"`
}

func (ArmServiceTypeHealthPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmServiceTypeHealthPolicy)(nil)).Elem()
}

func (i ArmServiceTypeHealthPolicyArgs) ToArmServiceTypeHealthPolicyOutput() ArmServiceTypeHealthPolicyOutput {
	return i.ToArmServiceTypeHealthPolicyOutputWithContext(context.Background())
}

func (i ArmServiceTypeHealthPolicyArgs) ToArmServiceTypeHealthPolicyOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmServiceTypeHealthPolicyOutput)
}

func (i ArmServiceTypeHealthPolicyArgs) ToArmServiceTypeHealthPolicyPtrOutput() ArmServiceTypeHealthPolicyPtrOutput {
	return i.ToArmServiceTypeHealthPolicyPtrOutputWithContext(context.Background())
}

func (i ArmServiceTypeHealthPolicyArgs) ToArmServiceTypeHealthPolicyPtrOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmServiceTypeHealthPolicyOutput).ToArmServiceTypeHealthPolicyPtrOutputWithContext(ctx)
}

// ArmServiceTypeHealthPolicyPtrInput is an input type that accepts ArmServiceTypeHealthPolicyArgs, ArmServiceTypeHealthPolicyPtr and ArmServiceTypeHealthPolicyPtrOutput values.
// You can construct a concrete instance of `ArmServiceTypeHealthPolicyPtrInput` via:
//
//          ArmServiceTypeHealthPolicyArgs{...}
//
//  or:
//
//          nil
type ArmServiceTypeHealthPolicyPtrInput interface {
	pulumi.Input

	ToArmServiceTypeHealthPolicyPtrOutput() ArmServiceTypeHealthPolicyPtrOutput
	ToArmServiceTypeHealthPolicyPtrOutputWithContext(context.Context) ArmServiceTypeHealthPolicyPtrOutput
}

type armServiceTypeHealthPolicyPtrType ArmServiceTypeHealthPolicyArgs

func ArmServiceTypeHealthPolicyPtr(v *ArmServiceTypeHealthPolicyArgs) ArmServiceTypeHealthPolicyPtrInput {
	return (*armServiceTypeHealthPolicyPtrType)(v)
}

func (*armServiceTypeHealthPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmServiceTypeHealthPolicy)(nil)).Elem()
}

func (i *armServiceTypeHealthPolicyPtrType) ToArmServiceTypeHealthPolicyPtrOutput() ArmServiceTypeHealthPolicyPtrOutput {
	return i.ToArmServiceTypeHealthPolicyPtrOutputWithContext(context.Background())
}

func (i *armServiceTypeHealthPolicyPtrType) ToArmServiceTypeHealthPolicyPtrOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmServiceTypeHealthPolicyPtrOutput)
}

// Represents the health policy used to evaluate the health of services belonging to a service type.
type ArmServiceTypeHealthPolicyOutput struct{ *pulumi.OutputState }

func (ArmServiceTypeHealthPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmServiceTypeHealthPolicy)(nil)).Elem()
}

func (o ArmServiceTypeHealthPolicyOutput) ToArmServiceTypeHealthPolicyOutput() ArmServiceTypeHealthPolicyOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyOutput) ToArmServiceTypeHealthPolicyOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyOutput) ToArmServiceTypeHealthPolicyPtrOutput() ArmServiceTypeHealthPolicyPtrOutput {
	return o.ToArmServiceTypeHealthPolicyPtrOutputWithContext(context.Background())
}

func (o ArmServiceTypeHealthPolicyOutput) ToArmServiceTypeHealthPolicyPtrOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyPtrOutput {
	return o.ApplyT(func(v ArmServiceTypeHealthPolicy) *ArmServiceTypeHealthPolicy {
		return &v
	}).(ArmServiceTypeHealthPolicyPtrOutput)
}

// The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyOutput) MaxPercentUnhealthyPartitionsPerService() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArmServiceTypeHealthPolicy) *int { return v.MaxPercentUnhealthyPartitionsPerService }).(pulumi.IntPtrOutput)
}

// The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyOutput) MaxPercentUnhealthyReplicasPerPartition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArmServiceTypeHealthPolicy) *int { return v.MaxPercentUnhealthyReplicasPerPartition }).(pulumi.IntPtrOutput)
}

// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyOutput) MaxPercentUnhealthyServices() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArmServiceTypeHealthPolicy) *int { return v.MaxPercentUnhealthyServices }).(pulumi.IntPtrOutput)
}

type ArmServiceTypeHealthPolicyPtrOutput struct{ *pulumi.OutputState }

func (ArmServiceTypeHealthPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmServiceTypeHealthPolicy)(nil)).Elem()
}

func (o ArmServiceTypeHealthPolicyPtrOutput) ToArmServiceTypeHealthPolicyPtrOutput() ArmServiceTypeHealthPolicyPtrOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyPtrOutput) ToArmServiceTypeHealthPolicyPtrOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyPtrOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyPtrOutput) Elem() ArmServiceTypeHealthPolicyOutput {
	return o.ApplyT(func(v *ArmServiceTypeHealthPolicy) ArmServiceTypeHealthPolicy { return *v }).(ArmServiceTypeHealthPolicyOutput)
}

// The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyPtrOutput) MaxPercentUnhealthyPartitionsPerService() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArmServiceTypeHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyPartitionsPerService
	}).(pulumi.IntPtrOutput)
}

// The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyPtrOutput) MaxPercentUnhealthyReplicasPerPartition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArmServiceTypeHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyReplicasPerPartition
	}).(pulumi.IntPtrOutput)
}

// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyPtrOutput) MaxPercentUnhealthyServices() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArmServiceTypeHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyServices
	}).(pulumi.IntPtrOutput)
}

// Defines a ServiceTypeHealthPolicy per service type name.
//
// The entries in the map replace the default service type health policy for each specified service type.
// For example, in an application that contains both a stateless gateway service type and a stateful engine service type, the health policies for the stateless and stateful services can be configured differently.
// With policy per service type, there's more granular control of the health of the service.
//
// If no policy is specified for a service type name, the DefaultServiceTypeHealthPolicy is used for evaluation.
type ArmServiceTypeHealthPolicyMap struct {
}

// ArmServiceTypeHealthPolicyMapInput is an input type that accepts ArmServiceTypeHealthPolicyMap and ArmServiceTypeHealthPolicyMapOutput values.
// You can construct a concrete instance of `ArmServiceTypeHealthPolicyMapInput` via:
//
//          ArmServiceTypeHealthPolicyMap{ "key": ArmServiceTypeHealthPolicyArgs{...} }
type ArmServiceTypeHealthPolicyMapInput interface {
	pulumi.Input

	ToArmServiceTypeHealthPolicyMapOutput() ArmServiceTypeHealthPolicyMapOutput
	ToArmServiceTypeHealthPolicyMapOutputWithContext(context.Context) ArmServiceTypeHealthPolicyMapOutput
}

// Defines a ServiceTypeHealthPolicy per service type name.
//
// The entries in the map replace the default service type health policy for each specified service type.
// For example, in an application that contains both a stateless gateway service type and a stateful engine service type, the health policies for the stateless and stateful services can be configured differently.
// With policy per service type, there's more granular control of the health of the service.
//
// If no policy is specified for a service type name, the DefaultServiceTypeHealthPolicy is used for evaluation.
type ArmServiceTypeHealthPolicyMapArgs struct {
}

func (ArmServiceTypeHealthPolicyMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmServiceTypeHealthPolicyMap)(nil)).Elem()
}

func (i ArmServiceTypeHealthPolicyMapArgs) ToArmServiceTypeHealthPolicyMapOutput() ArmServiceTypeHealthPolicyMapOutput {
	return i.ToArmServiceTypeHealthPolicyMapOutputWithContext(context.Background())
}

func (i ArmServiceTypeHealthPolicyMapArgs) ToArmServiceTypeHealthPolicyMapOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmServiceTypeHealthPolicyMapOutput)
}

func (i ArmServiceTypeHealthPolicyMapArgs) ToArmServiceTypeHealthPolicyMapPtrOutput() ArmServiceTypeHealthPolicyMapPtrOutput {
	return i.ToArmServiceTypeHealthPolicyMapPtrOutputWithContext(context.Background())
}

func (i ArmServiceTypeHealthPolicyMapArgs) ToArmServiceTypeHealthPolicyMapPtrOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmServiceTypeHealthPolicyMapOutput).ToArmServiceTypeHealthPolicyMapPtrOutputWithContext(ctx)
}

// ArmServiceTypeHealthPolicyMapPtrInput is an input type that accepts ArmServiceTypeHealthPolicyMapArgs, ArmServiceTypeHealthPolicyMapPtr and ArmServiceTypeHealthPolicyMapPtrOutput values.
// You can construct a concrete instance of `ArmServiceTypeHealthPolicyMapPtrInput` via:
//
//          ArmServiceTypeHealthPolicyMapArgs{...}
//
//  or:
//
//          nil
type ArmServiceTypeHealthPolicyMapPtrInput interface {
	pulumi.Input

	ToArmServiceTypeHealthPolicyMapPtrOutput() ArmServiceTypeHealthPolicyMapPtrOutput
	ToArmServiceTypeHealthPolicyMapPtrOutputWithContext(context.Context) ArmServiceTypeHealthPolicyMapPtrOutput
}

type armServiceTypeHealthPolicyMapPtrType ArmServiceTypeHealthPolicyMapArgs

func ArmServiceTypeHealthPolicyMapPtr(v *ArmServiceTypeHealthPolicyMapArgs) ArmServiceTypeHealthPolicyMapPtrInput {
	return (*armServiceTypeHealthPolicyMapPtrType)(v)
}

func (*armServiceTypeHealthPolicyMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmServiceTypeHealthPolicyMap)(nil)).Elem()
}

func (i *armServiceTypeHealthPolicyMapPtrType) ToArmServiceTypeHealthPolicyMapPtrOutput() ArmServiceTypeHealthPolicyMapPtrOutput {
	return i.ToArmServiceTypeHealthPolicyMapPtrOutputWithContext(context.Background())
}

func (i *armServiceTypeHealthPolicyMapPtrType) ToArmServiceTypeHealthPolicyMapPtrOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmServiceTypeHealthPolicyMapPtrOutput)
}

// Defines a ServiceTypeHealthPolicy per service type name.
//
// The entries in the map replace the default service type health policy for each specified service type.
// For example, in an application that contains both a stateless gateway service type and a stateful engine service type, the health policies for the stateless and stateful services can be configured differently.
// With policy per service type, there's more granular control of the health of the service.
//
// If no policy is specified for a service type name, the DefaultServiceTypeHealthPolicy is used for evaluation.
type ArmServiceTypeHealthPolicyMapOutput struct{ *pulumi.OutputState }

func (ArmServiceTypeHealthPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmServiceTypeHealthPolicyMap)(nil)).Elem()
}

func (o ArmServiceTypeHealthPolicyMapOutput) ToArmServiceTypeHealthPolicyMapOutput() ArmServiceTypeHealthPolicyMapOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyMapOutput) ToArmServiceTypeHealthPolicyMapOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyMapOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyMapOutput) ToArmServiceTypeHealthPolicyMapPtrOutput() ArmServiceTypeHealthPolicyMapPtrOutput {
	return o.ToArmServiceTypeHealthPolicyMapPtrOutputWithContext(context.Background())
}

func (o ArmServiceTypeHealthPolicyMapOutput) ToArmServiceTypeHealthPolicyMapPtrOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyMapPtrOutput {
	return o.ApplyT(func(v ArmServiceTypeHealthPolicyMap) *ArmServiceTypeHealthPolicyMap {
		return &v
	}).(ArmServiceTypeHealthPolicyMapPtrOutput)
}

type ArmServiceTypeHealthPolicyMapPtrOutput struct{ *pulumi.OutputState }

func (ArmServiceTypeHealthPolicyMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmServiceTypeHealthPolicyMap)(nil)).Elem()
}

func (o ArmServiceTypeHealthPolicyMapPtrOutput) ToArmServiceTypeHealthPolicyMapPtrOutput() ArmServiceTypeHealthPolicyMapPtrOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyMapPtrOutput) ToArmServiceTypeHealthPolicyMapPtrOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyMapPtrOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyMapPtrOutput) Elem() ArmServiceTypeHealthPolicyMapOutput {
	return o.ApplyT(func(v *ArmServiceTypeHealthPolicyMap) ArmServiceTypeHealthPolicyMap { return *v }).(ArmServiceTypeHealthPolicyMapOutput)
}

// Defines a ServiceTypeHealthPolicy per service type name.
//
// The entries in the map replace the default service type health policy for each specified service type.
// For example, in an application that contains both a stateless gateway service type and a stateful engine service type, the health policies for the stateless and stateful services can be configured differently.
// With policy per service type, there's more granular control of the health of the service.
//
// If no policy is specified for a service type name, the DefaultServiceTypeHealthPolicy is used for evaluation.
type ArmServiceTypeHealthPolicyMapResponse struct {
}

// ArmServiceTypeHealthPolicyMapResponseInput is an input type that accepts ArmServiceTypeHealthPolicyMapResponseArgs and ArmServiceTypeHealthPolicyMapResponseOutput values.
// You can construct a concrete instance of `ArmServiceTypeHealthPolicyMapResponseInput` via:
//
//          ArmServiceTypeHealthPolicyMapResponseArgs{...}
type ArmServiceTypeHealthPolicyMapResponseInput interface {
	pulumi.Input

	ToArmServiceTypeHealthPolicyMapResponseOutput() ArmServiceTypeHealthPolicyMapResponseOutput
	ToArmServiceTypeHealthPolicyMapResponseOutputWithContext(context.Context) ArmServiceTypeHealthPolicyMapResponseOutput
}

// Defines a ServiceTypeHealthPolicy per service type name.
//
// The entries in the map replace the default service type health policy for each specified service type.
// For example, in an application that contains both a stateless gateway service type and a stateful engine service type, the health policies for the stateless and stateful services can be configured differently.
// With policy per service type, there's more granular control of the health of the service.
//
// If no policy is specified for a service type name, the DefaultServiceTypeHealthPolicy is used for evaluation.
type ArmServiceTypeHealthPolicyMapResponseArgs struct {
}

func (ArmServiceTypeHealthPolicyMapResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmServiceTypeHealthPolicyMapResponse)(nil)).Elem()
}

func (i ArmServiceTypeHealthPolicyMapResponseArgs) ToArmServiceTypeHealthPolicyMapResponseOutput() ArmServiceTypeHealthPolicyMapResponseOutput {
	return i.ToArmServiceTypeHealthPolicyMapResponseOutputWithContext(context.Background())
}

func (i ArmServiceTypeHealthPolicyMapResponseArgs) ToArmServiceTypeHealthPolicyMapResponseOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyMapResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmServiceTypeHealthPolicyMapResponseOutput)
}

func (i ArmServiceTypeHealthPolicyMapResponseArgs) ToArmServiceTypeHealthPolicyMapResponsePtrOutput() ArmServiceTypeHealthPolicyMapResponsePtrOutput {
	return i.ToArmServiceTypeHealthPolicyMapResponsePtrOutputWithContext(context.Background())
}

func (i ArmServiceTypeHealthPolicyMapResponseArgs) ToArmServiceTypeHealthPolicyMapResponsePtrOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyMapResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmServiceTypeHealthPolicyMapResponseOutput).ToArmServiceTypeHealthPolicyMapResponsePtrOutputWithContext(ctx)
}

// ArmServiceTypeHealthPolicyMapResponsePtrInput is an input type that accepts ArmServiceTypeHealthPolicyMapResponseArgs, ArmServiceTypeHealthPolicyMapResponsePtr and ArmServiceTypeHealthPolicyMapResponsePtrOutput values.
// You can construct a concrete instance of `ArmServiceTypeHealthPolicyMapResponsePtrInput` via:
//
//          ArmServiceTypeHealthPolicyMapResponseArgs{...}
//
//  or:
//
//          nil
type ArmServiceTypeHealthPolicyMapResponsePtrInput interface {
	pulumi.Input

	ToArmServiceTypeHealthPolicyMapResponsePtrOutput() ArmServiceTypeHealthPolicyMapResponsePtrOutput
	ToArmServiceTypeHealthPolicyMapResponsePtrOutputWithContext(context.Context) ArmServiceTypeHealthPolicyMapResponsePtrOutput
}

type armServiceTypeHealthPolicyMapResponsePtrType ArmServiceTypeHealthPolicyMapResponseArgs

func ArmServiceTypeHealthPolicyMapResponsePtr(v *ArmServiceTypeHealthPolicyMapResponseArgs) ArmServiceTypeHealthPolicyMapResponsePtrInput {
	return (*armServiceTypeHealthPolicyMapResponsePtrType)(v)
}

func (*armServiceTypeHealthPolicyMapResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmServiceTypeHealthPolicyMapResponse)(nil)).Elem()
}

func (i *armServiceTypeHealthPolicyMapResponsePtrType) ToArmServiceTypeHealthPolicyMapResponsePtrOutput() ArmServiceTypeHealthPolicyMapResponsePtrOutput {
	return i.ToArmServiceTypeHealthPolicyMapResponsePtrOutputWithContext(context.Background())
}

func (i *armServiceTypeHealthPolicyMapResponsePtrType) ToArmServiceTypeHealthPolicyMapResponsePtrOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyMapResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmServiceTypeHealthPolicyMapResponsePtrOutput)
}

// Defines a ServiceTypeHealthPolicy per service type name.
//
// The entries in the map replace the default service type health policy for each specified service type.
// For example, in an application that contains both a stateless gateway service type and a stateful engine service type, the health policies for the stateless and stateful services can be configured differently.
// With policy per service type, there's more granular control of the health of the service.
//
// If no policy is specified for a service type name, the DefaultServiceTypeHealthPolicy is used for evaluation.
type ArmServiceTypeHealthPolicyMapResponseOutput struct{ *pulumi.OutputState }

func (ArmServiceTypeHealthPolicyMapResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmServiceTypeHealthPolicyMapResponse)(nil)).Elem()
}

func (o ArmServiceTypeHealthPolicyMapResponseOutput) ToArmServiceTypeHealthPolicyMapResponseOutput() ArmServiceTypeHealthPolicyMapResponseOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyMapResponseOutput) ToArmServiceTypeHealthPolicyMapResponseOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyMapResponseOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyMapResponseOutput) ToArmServiceTypeHealthPolicyMapResponsePtrOutput() ArmServiceTypeHealthPolicyMapResponsePtrOutput {
	return o.ToArmServiceTypeHealthPolicyMapResponsePtrOutputWithContext(context.Background())
}

func (o ArmServiceTypeHealthPolicyMapResponseOutput) ToArmServiceTypeHealthPolicyMapResponsePtrOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyMapResponsePtrOutput {
	return o.ApplyT(func(v ArmServiceTypeHealthPolicyMapResponse) *ArmServiceTypeHealthPolicyMapResponse {
		return &v
	}).(ArmServiceTypeHealthPolicyMapResponsePtrOutput)
}

type ArmServiceTypeHealthPolicyMapResponsePtrOutput struct{ *pulumi.OutputState }

func (ArmServiceTypeHealthPolicyMapResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmServiceTypeHealthPolicyMapResponse)(nil)).Elem()
}

func (o ArmServiceTypeHealthPolicyMapResponsePtrOutput) ToArmServiceTypeHealthPolicyMapResponsePtrOutput() ArmServiceTypeHealthPolicyMapResponsePtrOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyMapResponsePtrOutput) ToArmServiceTypeHealthPolicyMapResponsePtrOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyMapResponsePtrOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyMapResponsePtrOutput) Elem() ArmServiceTypeHealthPolicyMapResponseOutput {
	return o.ApplyT(func(v *ArmServiceTypeHealthPolicyMapResponse) ArmServiceTypeHealthPolicyMapResponse { return *v }).(ArmServiceTypeHealthPolicyMapResponseOutput)
}

// Represents the health policy used to evaluate the health of services belonging to a service type.
type ArmServiceTypeHealthPolicyResponse struct {
	// The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyPartitionsPerService *int `pulumi:"maxPercentUnhealthyPartitionsPerService"`
	// The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyReplicasPerPartition *int `pulumi:"maxPercentUnhealthyReplicasPerPartition"`
	// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyServices *int `pulumi:"maxPercentUnhealthyServices"`
}

// ArmServiceTypeHealthPolicyResponseInput is an input type that accepts ArmServiceTypeHealthPolicyResponseArgs and ArmServiceTypeHealthPolicyResponseOutput values.
// You can construct a concrete instance of `ArmServiceTypeHealthPolicyResponseInput` via:
//
//          ArmServiceTypeHealthPolicyResponseArgs{...}
type ArmServiceTypeHealthPolicyResponseInput interface {
	pulumi.Input

	ToArmServiceTypeHealthPolicyResponseOutput() ArmServiceTypeHealthPolicyResponseOutput
	ToArmServiceTypeHealthPolicyResponseOutputWithContext(context.Context) ArmServiceTypeHealthPolicyResponseOutput
}

// Represents the health policy used to evaluate the health of services belonging to a service type.
type ArmServiceTypeHealthPolicyResponseArgs struct {
	// The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyPartitionsPerService pulumi.IntPtrInput `pulumi:"maxPercentUnhealthyPartitionsPerService"`
	// The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyReplicasPerPartition pulumi.IntPtrInput `pulumi:"maxPercentUnhealthyReplicasPerPartition"`
	// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
	MaxPercentUnhealthyServices pulumi.IntPtrInput `pulumi:"maxPercentUnhealthyServices"`
}

func (ArmServiceTypeHealthPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmServiceTypeHealthPolicyResponse)(nil)).Elem()
}

func (i ArmServiceTypeHealthPolicyResponseArgs) ToArmServiceTypeHealthPolicyResponseOutput() ArmServiceTypeHealthPolicyResponseOutput {
	return i.ToArmServiceTypeHealthPolicyResponseOutputWithContext(context.Background())
}

func (i ArmServiceTypeHealthPolicyResponseArgs) ToArmServiceTypeHealthPolicyResponseOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmServiceTypeHealthPolicyResponseOutput)
}

func (i ArmServiceTypeHealthPolicyResponseArgs) ToArmServiceTypeHealthPolicyResponsePtrOutput() ArmServiceTypeHealthPolicyResponsePtrOutput {
	return i.ToArmServiceTypeHealthPolicyResponsePtrOutputWithContext(context.Background())
}

func (i ArmServiceTypeHealthPolicyResponseArgs) ToArmServiceTypeHealthPolicyResponsePtrOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmServiceTypeHealthPolicyResponseOutput).ToArmServiceTypeHealthPolicyResponsePtrOutputWithContext(ctx)
}

// ArmServiceTypeHealthPolicyResponsePtrInput is an input type that accepts ArmServiceTypeHealthPolicyResponseArgs, ArmServiceTypeHealthPolicyResponsePtr and ArmServiceTypeHealthPolicyResponsePtrOutput values.
// You can construct a concrete instance of `ArmServiceTypeHealthPolicyResponsePtrInput` via:
//
//          ArmServiceTypeHealthPolicyResponseArgs{...}
//
//  or:
//
//          nil
type ArmServiceTypeHealthPolicyResponsePtrInput interface {
	pulumi.Input

	ToArmServiceTypeHealthPolicyResponsePtrOutput() ArmServiceTypeHealthPolicyResponsePtrOutput
	ToArmServiceTypeHealthPolicyResponsePtrOutputWithContext(context.Context) ArmServiceTypeHealthPolicyResponsePtrOutput
}

type armServiceTypeHealthPolicyResponsePtrType ArmServiceTypeHealthPolicyResponseArgs

func ArmServiceTypeHealthPolicyResponsePtr(v *ArmServiceTypeHealthPolicyResponseArgs) ArmServiceTypeHealthPolicyResponsePtrInput {
	return (*armServiceTypeHealthPolicyResponsePtrType)(v)
}

func (*armServiceTypeHealthPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmServiceTypeHealthPolicyResponse)(nil)).Elem()
}

func (i *armServiceTypeHealthPolicyResponsePtrType) ToArmServiceTypeHealthPolicyResponsePtrOutput() ArmServiceTypeHealthPolicyResponsePtrOutput {
	return i.ToArmServiceTypeHealthPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *armServiceTypeHealthPolicyResponsePtrType) ToArmServiceTypeHealthPolicyResponsePtrOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmServiceTypeHealthPolicyResponsePtrOutput)
}

// Represents the health policy used to evaluate the health of services belonging to a service type.
type ArmServiceTypeHealthPolicyResponseOutput struct{ *pulumi.OutputState }

func (ArmServiceTypeHealthPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmServiceTypeHealthPolicyResponse)(nil)).Elem()
}

func (o ArmServiceTypeHealthPolicyResponseOutput) ToArmServiceTypeHealthPolicyResponseOutput() ArmServiceTypeHealthPolicyResponseOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyResponseOutput) ToArmServiceTypeHealthPolicyResponseOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyResponseOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyResponseOutput) ToArmServiceTypeHealthPolicyResponsePtrOutput() ArmServiceTypeHealthPolicyResponsePtrOutput {
	return o.ToArmServiceTypeHealthPolicyResponsePtrOutputWithContext(context.Background())
}

func (o ArmServiceTypeHealthPolicyResponseOutput) ToArmServiceTypeHealthPolicyResponsePtrOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyResponsePtrOutput {
	return o.ApplyT(func(v ArmServiceTypeHealthPolicyResponse) *ArmServiceTypeHealthPolicyResponse {
		return &v
	}).(ArmServiceTypeHealthPolicyResponsePtrOutput)
}

// The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyResponseOutput) MaxPercentUnhealthyPartitionsPerService() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArmServiceTypeHealthPolicyResponse) *int { return v.MaxPercentUnhealthyPartitionsPerService }).(pulumi.IntPtrOutput)
}

// The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyResponseOutput) MaxPercentUnhealthyReplicasPerPartition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArmServiceTypeHealthPolicyResponse) *int { return v.MaxPercentUnhealthyReplicasPerPartition }).(pulumi.IntPtrOutput)
}

// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyResponseOutput) MaxPercentUnhealthyServices() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ArmServiceTypeHealthPolicyResponse) *int { return v.MaxPercentUnhealthyServices }).(pulumi.IntPtrOutput)
}

type ArmServiceTypeHealthPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ArmServiceTypeHealthPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmServiceTypeHealthPolicyResponse)(nil)).Elem()
}

func (o ArmServiceTypeHealthPolicyResponsePtrOutput) ToArmServiceTypeHealthPolicyResponsePtrOutput() ArmServiceTypeHealthPolicyResponsePtrOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyResponsePtrOutput) ToArmServiceTypeHealthPolicyResponsePtrOutputWithContext(ctx context.Context) ArmServiceTypeHealthPolicyResponsePtrOutput {
	return o
}

func (o ArmServiceTypeHealthPolicyResponsePtrOutput) Elem() ArmServiceTypeHealthPolicyResponseOutput {
	return o.ApplyT(func(v *ArmServiceTypeHealthPolicyResponse) ArmServiceTypeHealthPolicyResponse { return *v }).(ArmServiceTypeHealthPolicyResponseOutput)
}

// The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyResponsePtrOutput) MaxPercentUnhealthyPartitionsPerService() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArmServiceTypeHealthPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyPartitionsPerService
	}).(pulumi.IntPtrOutput)
}

// The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyResponsePtrOutput) MaxPercentUnhealthyReplicasPerPartition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArmServiceTypeHealthPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyReplicasPerPartition
	}).(pulumi.IntPtrOutput)
}

// The maximum percentage of services allowed to be unhealthy before your application is considered in error.
func (o ArmServiceTypeHealthPolicyResponsePtrOutput) MaxPercentUnhealthyServices() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ArmServiceTypeHealthPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyServices
	}).(pulumi.IntPtrOutput)
}

// The settings to enable AAD authentication on the cluster.
type AzureActiveDirectory struct {
	// Azure active directory client application id.
	ClientApplication *string `pulumi:"clientApplication"`
	// Azure active directory cluster application id.
	ClusterApplication *string `pulumi:"clusterApplication"`
	// Azure active directory tenant id.
	TenantId *string `pulumi:"tenantId"`
}

// AzureActiveDirectoryInput is an input type that accepts AzureActiveDirectoryArgs and AzureActiveDirectoryOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryInput` via:
//
//          AzureActiveDirectoryArgs{...}
type AzureActiveDirectoryInput interface {
	pulumi.Input

	ToAzureActiveDirectoryOutput() AzureActiveDirectoryOutput
	ToAzureActiveDirectoryOutputWithContext(context.Context) AzureActiveDirectoryOutput
}

// The settings to enable AAD authentication on the cluster.
type AzureActiveDirectoryArgs struct {
	// Azure active directory client application id.
	ClientApplication pulumi.StringPtrInput `pulumi:"clientApplication"`
	// Azure active directory cluster application id.
	ClusterApplication pulumi.StringPtrInput `pulumi:"clusterApplication"`
	// Azure active directory tenant id.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (AzureActiveDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectory)(nil)).Elem()
}

func (i AzureActiveDirectoryArgs) ToAzureActiveDirectoryOutput() AzureActiveDirectoryOutput {
	return i.ToAzureActiveDirectoryOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryArgs) ToAzureActiveDirectoryOutputWithContext(ctx context.Context) AzureActiveDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryOutput)
}

func (i AzureActiveDirectoryArgs) ToAzureActiveDirectoryPtrOutput() AzureActiveDirectoryPtrOutput {
	return i.ToAzureActiveDirectoryPtrOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryArgs) ToAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryOutput).ToAzureActiveDirectoryPtrOutputWithContext(ctx)
}

// AzureActiveDirectoryPtrInput is an input type that accepts AzureActiveDirectoryArgs, AzureActiveDirectoryPtr and AzureActiveDirectoryPtrOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryPtrInput` via:
//
//          AzureActiveDirectoryArgs{...}
//
//  or:
//
//          nil
type AzureActiveDirectoryPtrInput interface {
	pulumi.Input

	ToAzureActiveDirectoryPtrOutput() AzureActiveDirectoryPtrOutput
	ToAzureActiveDirectoryPtrOutputWithContext(context.Context) AzureActiveDirectoryPtrOutput
}

type azureActiveDirectoryPtrType AzureActiveDirectoryArgs

func AzureActiveDirectoryPtr(v *AzureActiveDirectoryArgs) AzureActiveDirectoryPtrInput {
	return (*azureActiveDirectoryPtrType)(v)
}

func (*azureActiveDirectoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectory)(nil)).Elem()
}

func (i *azureActiveDirectoryPtrType) ToAzureActiveDirectoryPtrOutput() AzureActiveDirectoryPtrOutput {
	return i.ToAzureActiveDirectoryPtrOutputWithContext(context.Background())
}

func (i *azureActiveDirectoryPtrType) ToAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryPtrOutput)
}

// The settings to enable AAD authentication on the cluster.
type AzureActiveDirectoryOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectory)(nil)).Elem()
}

func (o AzureActiveDirectoryOutput) ToAzureActiveDirectoryOutput() AzureActiveDirectoryOutput {
	return o
}

func (o AzureActiveDirectoryOutput) ToAzureActiveDirectoryOutputWithContext(ctx context.Context) AzureActiveDirectoryOutput {
	return o
}

func (o AzureActiveDirectoryOutput) ToAzureActiveDirectoryPtrOutput() AzureActiveDirectoryPtrOutput {
	return o.ToAzureActiveDirectoryPtrOutputWithContext(context.Background())
}

func (o AzureActiveDirectoryOutput) ToAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectory) *AzureActiveDirectory {
		return &v
	}).(AzureActiveDirectoryPtrOutput)
}

// Azure active directory client application id.
func (o AzureActiveDirectoryOutput) ClientApplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectory) *string { return v.ClientApplication }).(pulumi.StringPtrOutput)
}

// Azure active directory cluster application id.
func (o AzureActiveDirectoryOutput) ClusterApplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectory) *string { return v.ClusterApplication }).(pulumi.StringPtrOutput)
}

// Azure active directory tenant id.
func (o AzureActiveDirectoryOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectory) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type AzureActiveDirectoryPtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectory)(nil)).Elem()
}

func (o AzureActiveDirectoryPtrOutput) ToAzureActiveDirectoryPtrOutput() AzureActiveDirectoryPtrOutput {
	return o
}

func (o AzureActiveDirectoryPtrOutput) ToAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryPtrOutput {
	return o
}

func (o AzureActiveDirectoryPtrOutput) Elem() AzureActiveDirectoryOutput {
	return o.ApplyT(func(v *AzureActiveDirectory) AzureActiveDirectory { return *v }).(AzureActiveDirectoryOutput)
}

// Azure active directory client application id.
func (o AzureActiveDirectoryPtrOutput) ClientApplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectory) *string {
		if v == nil {
			return nil
		}
		return v.ClientApplication
	}).(pulumi.StringPtrOutput)
}

// Azure active directory cluster application id.
func (o AzureActiveDirectoryPtrOutput) ClusterApplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectory) *string {
		if v == nil {
			return nil
		}
		return v.ClusterApplication
	}).(pulumi.StringPtrOutput)
}

// Azure active directory tenant id.
func (o AzureActiveDirectoryPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectory) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The settings to enable AAD authentication on the cluster.
type AzureActiveDirectoryResponse struct {
	// Azure active directory client application id.
	ClientApplication *string `pulumi:"clientApplication"`
	// Azure active directory cluster application id.
	ClusterApplication *string `pulumi:"clusterApplication"`
	// Azure active directory tenant id.
	TenantId *string `pulumi:"tenantId"`
}

// AzureActiveDirectoryResponseInput is an input type that accepts AzureActiveDirectoryResponseArgs and AzureActiveDirectoryResponseOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryResponseInput` via:
//
//          AzureActiveDirectoryResponseArgs{...}
type AzureActiveDirectoryResponseInput interface {
	pulumi.Input

	ToAzureActiveDirectoryResponseOutput() AzureActiveDirectoryResponseOutput
	ToAzureActiveDirectoryResponseOutputWithContext(context.Context) AzureActiveDirectoryResponseOutput
}

// The settings to enable AAD authentication on the cluster.
type AzureActiveDirectoryResponseArgs struct {
	// Azure active directory client application id.
	ClientApplication pulumi.StringPtrInput `pulumi:"clientApplication"`
	// Azure active directory cluster application id.
	ClusterApplication pulumi.StringPtrInput `pulumi:"clusterApplication"`
	// Azure active directory tenant id.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (AzureActiveDirectoryResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryResponse)(nil)).Elem()
}

func (i AzureActiveDirectoryResponseArgs) ToAzureActiveDirectoryResponseOutput() AzureActiveDirectoryResponseOutput {
	return i.ToAzureActiveDirectoryResponseOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryResponseArgs) ToAzureActiveDirectoryResponseOutputWithContext(ctx context.Context) AzureActiveDirectoryResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryResponseOutput)
}

func (i AzureActiveDirectoryResponseArgs) ToAzureActiveDirectoryResponsePtrOutput() AzureActiveDirectoryResponsePtrOutput {
	return i.ToAzureActiveDirectoryResponsePtrOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryResponseArgs) ToAzureActiveDirectoryResponsePtrOutputWithContext(ctx context.Context) AzureActiveDirectoryResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryResponseOutput).ToAzureActiveDirectoryResponsePtrOutputWithContext(ctx)
}

// AzureActiveDirectoryResponsePtrInput is an input type that accepts AzureActiveDirectoryResponseArgs, AzureActiveDirectoryResponsePtr and AzureActiveDirectoryResponsePtrOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryResponsePtrInput` via:
//
//          AzureActiveDirectoryResponseArgs{...}
//
//  or:
//
//          nil
type AzureActiveDirectoryResponsePtrInput interface {
	pulumi.Input

	ToAzureActiveDirectoryResponsePtrOutput() AzureActiveDirectoryResponsePtrOutput
	ToAzureActiveDirectoryResponsePtrOutputWithContext(context.Context) AzureActiveDirectoryResponsePtrOutput
}

type azureActiveDirectoryResponsePtrType AzureActiveDirectoryResponseArgs

func AzureActiveDirectoryResponsePtr(v *AzureActiveDirectoryResponseArgs) AzureActiveDirectoryResponsePtrInput {
	return (*azureActiveDirectoryResponsePtrType)(v)
}

func (*azureActiveDirectoryResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryResponse)(nil)).Elem()
}

func (i *azureActiveDirectoryResponsePtrType) ToAzureActiveDirectoryResponsePtrOutput() AzureActiveDirectoryResponsePtrOutput {
	return i.ToAzureActiveDirectoryResponsePtrOutputWithContext(context.Background())
}

func (i *azureActiveDirectoryResponsePtrType) ToAzureActiveDirectoryResponsePtrOutputWithContext(ctx context.Context) AzureActiveDirectoryResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryResponsePtrOutput)
}

// The settings to enable AAD authentication on the cluster.
type AzureActiveDirectoryResponseOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryResponseOutput) ToAzureActiveDirectoryResponseOutput() AzureActiveDirectoryResponseOutput {
	return o
}

func (o AzureActiveDirectoryResponseOutput) ToAzureActiveDirectoryResponseOutputWithContext(ctx context.Context) AzureActiveDirectoryResponseOutput {
	return o
}

func (o AzureActiveDirectoryResponseOutput) ToAzureActiveDirectoryResponsePtrOutput() AzureActiveDirectoryResponsePtrOutput {
	return o.ToAzureActiveDirectoryResponsePtrOutputWithContext(context.Background())
}

func (o AzureActiveDirectoryResponseOutput) ToAzureActiveDirectoryResponsePtrOutputWithContext(ctx context.Context) AzureActiveDirectoryResponsePtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryResponse) *AzureActiveDirectoryResponse {
		return &v
	}).(AzureActiveDirectoryResponsePtrOutput)
}

// Azure active directory client application id.
func (o AzureActiveDirectoryResponseOutput) ClientApplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryResponse) *string { return v.ClientApplication }).(pulumi.StringPtrOutput)
}

// Azure active directory cluster application id.
func (o AzureActiveDirectoryResponseOutput) ClusterApplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryResponse) *string { return v.ClusterApplication }).(pulumi.StringPtrOutput)
}

// Azure active directory tenant id.
func (o AzureActiveDirectoryResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type AzureActiveDirectoryResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryResponsePtrOutput) ToAzureActiveDirectoryResponsePtrOutput() AzureActiveDirectoryResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryResponsePtrOutput) ToAzureActiveDirectoryResponsePtrOutputWithContext(ctx context.Context) AzureActiveDirectoryResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryResponsePtrOutput) Elem() AzureActiveDirectoryResponseOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryResponse) AzureActiveDirectoryResponse { return *v }).(AzureActiveDirectoryResponseOutput)
}

// Azure active directory client application id.
func (o AzureActiveDirectoryResponsePtrOutput) ClientApplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientApplication
	}).(pulumi.StringPtrOutput)
}

// Azure active directory cluster application id.
func (o AzureActiveDirectoryResponsePtrOutput) ClusterApplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClusterApplication
	}).(pulumi.StringPtrOutput)
}

// Azure active directory tenant id.
func (o AzureActiveDirectoryResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Describes the certificate details.
type CertificateDescription struct {
	// Thumbprint of the primary certificate.
	Thumbprint string `pulumi:"thumbprint"`
	// Thumbprint of the secondary certificate.
	ThumbprintSecondary *string `pulumi:"thumbprintSecondary"`
	// The local certificate store location.
	X509StoreName *string `pulumi:"x509StoreName"`
}

// CertificateDescriptionInput is an input type that accepts CertificateDescriptionArgs and CertificateDescriptionOutput values.
// You can construct a concrete instance of `CertificateDescriptionInput` via:
//
//          CertificateDescriptionArgs{...}
type CertificateDescriptionInput interface {
	pulumi.Input

	ToCertificateDescriptionOutput() CertificateDescriptionOutput
	ToCertificateDescriptionOutputWithContext(context.Context) CertificateDescriptionOutput
}

// Describes the certificate details.
type CertificateDescriptionArgs struct {
	// Thumbprint of the primary certificate.
	Thumbprint pulumi.StringInput `pulumi:"thumbprint"`
	// Thumbprint of the secondary certificate.
	ThumbprintSecondary pulumi.StringPtrInput `pulumi:"thumbprintSecondary"`
	// The local certificate store location.
	X509StoreName pulumi.StringPtrInput `pulumi:"x509StoreName"`
}

func (CertificateDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDescription)(nil)).Elem()
}

func (i CertificateDescriptionArgs) ToCertificateDescriptionOutput() CertificateDescriptionOutput {
	return i.ToCertificateDescriptionOutputWithContext(context.Background())
}

func (i CertificateDescriptionArgs) ToCertificateDescriptionOutputWithContext(ctx context.Context) CertificateDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDescriptionOutput)
}

func (i CertificateDescriptionArgs) ToCertificateDescriptionPtrOutput() CertificateDescriptionPtrOutput {
	return i.ToCertificateDescriptionPtrOutputWithContext(context.Background())
}

func (i CertificateDescriptionArgs) ToCertificateDescriptionPtrOutputWithContext(ctx context.Context) CertificateDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDescriptionOutput).ToCertificateDescriptionPtrOutputWithContext(ctx)
}

// CertificateDescriptionPtrInput is an input type that accepts CertificateDescriptionArgs, CertificateDescriptionPtr and CertificateDescriptionPtrOutput values.
// You can construct a concrete instance of `CertificateDescriptionPtrInput` via:
//
//          CertificateDescriptionArgs{...}
//
//  or:
//
//          nil
type CertificateDescriptionPtrInput interface {
	pulumi.Input

	ToCertificateDescriptionPtrOutput() CertificateDescriptionPtrOutput
	ToCertificateDescriptionPtrOutputWithContext(context.Context) CertificateDescriptionPtrOutput
}

type certificateDescriptionPtrType CertificateDescriptionArgs

func CertificateDescriptionPtr(v *CertificateDescriptionArgs) CertificateDescriptionPtrInput {
	return (*certificateDescriptionPtrType)(v)
}

func (*certificateDescriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateDescription)(nil)).Elem()
}

func (i *certificateDescriptionPtrType) ToCertificateDescriptionPtrOutput() CertificateDescriptionPtrOutput {
	return i.ToCertificateDescriptionPtrOutputWithContext(context.Background())
}

func (i *certificateDescriptionPtrType) ToCertificateDescriptionPtrOutputWithContext(ctx context.Context) CertificateDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDescriptionPtrOutput)
}

// Describes the certificate details.
type CertificateDescriptionOutput struct{ *pulumi.OutputState }

func (CertificateDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDescription)(nil)).Elem()
}

func (o CertificateDescriptionOutput) ToCertificateDescriptionOutput() CertificateDescriptionOutput {
	return o
}

func (o CertificateDescriptionOutput) ToCertificateDescriptionOutputWithContext(ctx context.Context) CertificateDescriptionOutput {
	return o
}

func (o CertificateDescriptionOutput) ToCertificateDescriptionPtrOutput() CertificateDescriptionPtrOutput {
	return o.ToCertificateDescriptionPtrOutputWithContext(context.Background())
}

func (o CertificateDescriptionOutput) ToCertificateDescriptionPtrOutputWithContext(ctx context.Context) CertificateDescriptionPtrOutput {
	return o.ApplyT(func(v CertificateDescription) *CertificateDescription {
		return &v
	}).(CertificateDescriptionPtrOutput)
}

// Thumbprint of the primary certificate.
func (o CertificateDescriptionOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDescription) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// Thumbprint of the secondary certificate.
func (o CertificateDescriptionOutput) ThumbprintSecondary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDescription) *string { return v.ThumbprintSecondary }).(pulumi.StringPtrOutput)
}

// The local certificate store location.
func (o CertificateDescriptionOutput) X509StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDescription) *string { return v.X509StoreName }).(pulumi.StringPtrOutput)
}

type CertificateDescriptionPtrOutput struct{ *pulumi.OutputState }

func (CertificateDescriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateDescription)(nil)).Elem()
}

func (o CertificateDescriptionPtrOutput) ToCertificateDescriptionPtrOutput() CertificateDescriptionPtrOutput {
	return o
}

func (o CertificateDescriptionPtrOutput) ToCertificateDescriptionPtrOutputWithContext(ctx context.Context) CertificateDescriptionPtrOutput {
	return o
}

func (o CertificateDescriptionPtrOutput) Elem() CertificateDescriptionOutput {
	return o.ApplyT(func(v *CertificateDescription) CertificateDescription { return *v }).(CertificateDescriptionOutput)
}

// Thumbprint of the primary certificate.
func (o CertificateDescriptionPtrOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateDescription) *string {
		if v == nil {
			return nil
		}
		return &v.Thumbprint
	}).(pulumi.StringPtrOutput)
}

// Thumbprint of the secondary certificate.
func (o CertificateDescriptionPtrOutput) ThumbprintSecondary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateDescription) *string {
		if v == nil {
			return nil
		}
		return v.ThumbprintSecondary
	}).(pulumi.StringPtrOutput)
}

// The local certificate store location.
func (o CertificateDescriptionPtrOutput) X509StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateDescription) *string {
		if v == nil {
			return nil
		}
		return v.X509StoreName
	}).(pulumi.StringPtrOutput)
}

// Describes the certificate details.
type CertificateDescriptionResponse struct {
	// Thumbprint of the primary certificate.
	Thumbprint string `pulumi:"thumbprint"`
	// Thumbprint of the secondary certificate.
	ThumbprintSecondary *string `pulumi:"thumbprintSecondary"`
	// The local certificate store location.
	X509StoreName *string `pulumi:"x509StoreName"`
}

// CertificateDescriptionResponseInput is an input type that accepts CertificateDescriptionResponseArgs and CertificateDescriptionResponseOutput values.
// You can construct a concrete instance of `CertificateDescriptionResponseInput` via:
//
//          CertificateDescriptionResponseArgs{...}
type CertificateDescriptionResponseInput interface {
	pulumi.Input

	ToCertificateDescriptionResponseOutput() CertificateDescriptionResponseOutput
	ToCertificateDescriptionResponseOutputWithContext(context.Context) CertificateDescriptionResponseOutput
}

// Describes the certificate details.
type CertificateDescriptionResponseArgs struct {
	// Thumbprint of the primary certificate.
	Thumbprint pulumi.StringInput `pulumi:"thumbprint"`
	// Thumbprint of the secondary certificate.
	ThumbprintSecondary pulumi.StringPtrInput `pulumi:"thumbprintSecondary"`
	// The local certificate store location.
	X509StoreName pulumi.StringPtrInput `pulumi:"x509StoreName"`
}

func (CertificateDescriptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDescriptionResponse)(nil)).Elem()
}

func (i CertificateDescriptionResponseArgs) ToCertificateDescriptionResponseOutput() CertificateDescriptionResponseOutput {
	return i.ToCertificateDescriptionResponseOutputWithContext(context.Background())
}

func (i CertificateDescriptionResponseArgs) ToCertificateDescriptionResponseOutputWithContext(ctx context.Context) CertificateDescriptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDescriptionResponseOutput)
}

func (i CertificateDescriptionResponseArgs) ToCertificateDescriptionResponsePtrOutput() CertificateDescriptionResponsePtrOutput {
	return i.ToCertificateDescriptionResponsePtrOutputWithContext(context.Background())
}

func (i CertificateDescriptionResponseArgs) ToCertificateDescriptionResponsePtrOutputWithContext(ctx context.Context) CertificateDescriptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDescriptionResponseOutput).ToCertificateDescriptionResponsePtrOutputWithContext(ctx)
}

// CertificateDescriptionResponsePtrInput is an input type that accepts CertificateDescriptionResponseArgs, CertificateDescriptionResponsePtr and CertificateDescriptionResponsePtrOutput values.
// You can construct a concrete instance of `CertificateDescriptionResponsePtrInput` via:
//
//          CertificateDescriptionResponseArgs{...}
//
//  or:
//
//          nil
type CertificateDescriptionResponsePtrInput interface {
	pulumi.Input

	ToCertificateDescriptionResponsePtrOutput() CertificateDescriptionResponsePtrOutput
	ToCertificateDescriptionResponsePtrOutputWithContext(context.Context) CertificateDescriptionResponsePtrOutput
}

type certificateDescriptionResponsePtrType CertificateDescriptionResponseArgs

func CertificateDescriptionResponsePtr(v *CertificateDescriptionResponseArgs) CertificateDescriptionResponsePtrInput {
	return (*certificateDescriptionResponsePtrType)(v)
}

func (*certificateDescriptionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateDescriptionResponse)(nil)).Elem()
}

func (i *certificateDescriptionResponsePtrType) ToCertificateDescriptionResponsePtrOutput() CertificateDescriptionResponsePtrOutput {
	return i.ToCertificateDescriptionResponsePtrOutputWithContext(context.Background())
}

func (i *certificateDescriptionResponsePtrType) ToCertificateDescriptionResponsePtrOutputWithContext(ctx context.Context) CertificateDescriptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDescriptionResponsePtrOutput)
}

// Describes the certificate details.
type CertificateDescriptionResponseOutput struct{ *pulumi.OutputState }

func (CertificateDescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDescriptionResponse)(nil)).Elem()
}

func (o CertificateDescriptionResponseOutput) ToCertificateDescriptionResponseOutput() CertificateDescriptionResponseOutput {
	return o
}

func (o CertificateDescriptionResponseOutput) ToCertificateDescriptionResponseOutputWithContext(ctx context.Context) CertificateDescriptionResponseOutput {
	return o
}

func (o CertificateDescriptionResponseOutput) ToCertificateDescriptionResponsePtrOutput() CertificateDescriptionResponsePtrOutput {
	return o.ToCertificateDescriptionResponsePtrOutputWithContext(context.Background())
}

func (o CertificateDescriptionResponseOutput) ToCertificateDescriptionResponsePtrOutputWithContext(ctx context.Context) CertificateDescriptionResponsePtrOutput {
	return o.ApplyT(func(v CertificateDescriptionResponse) *CertificateDescriptionResponse {
		return &v
	}).(CertificateDescriptionResponsePtrOutput)
}

// Thumbprint of the primary certificate.
func (o CertificateDescriptionResponseOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDescriptionResponse) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// Thumbprint of the secondary certificate.
func (o CertificateDescriptionResponseOutput) ThumbprintSecondary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDescriptionResponse) *string { return v.ThumbprintSecondary }).(pulumi.StringPtrOutput)
}

// The local certificate store location.
func (o CertificateDescriptionResponseOutput) X509StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDescriptionResponse) *string { return v.X509StoreName }).(pulumi.StringPtrOutput)
}

type CertificateDescriptionResponsePtrOutput struct{ *pulumi.OutputState }

func (CertificateDescriptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateDescriptionResponse)(nil)).Elem()
}

func (o CertificateDescriptionResponsePtrOutput) ToCertificateDescriptionResponsePtrOutput() CertificateDescriptionResponsePtrOutput {
	return o
}

func (o CertificateDescriptionResponsePtrOutput) ToCertificateDescriptionResponsePtrOutputWithContext(ctx context.Context) CertificateDescriptionResponsePtrOutput {
	return o
}

func (o CertificateDescriptionResponsePtrOutput) Elem() CertificateDescriptionResponseOutput {
	return o.ApplyT(func(v *CertificateDescriptionResponse) CertificateDescriptionResponse { return *v }).(CertificateDescriptionResponseOutput)
}

// Thumbprint of the primary certificate.
func (o CertificateDescriptionResponsePtrOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateDescriptionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Thumbprint
	}).(pulumi.StringPtrOutput)
}

// Thumbprint of the secondary certificate.
func (o CertificateDescriptionResponsePtrOutput) ThumbprintSecondary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateDescriptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ThumbprintSecondary
	}).(pulumi.StringPtrOutput)
}

// The local certificate store location.
func (o CertificateDescriptionResponsePtrOutput) X509StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateDescriptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.X509StoreName
	}).(pulumi.StringPtrOutput)
}

// Describes the client certificate details using common name.
type ClientCertificateCommonName struct {
	// The common name of the client certificate.
	CertificateCommonName string `pulumi:"certificateCommonName"`
	// The issuer thumbprint of the client certificate.
	CertificateIssuerThumbprint string `pulumi:"certificateIssuerThumbprint"`
	// Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
	IsAdmin bool `pulumi:"isAdmin"`
}

// ClientCertificateCommonNameInput is an input type that accepts ClientCertificateCommonNameArgs and ClientCertificateCommonNameOutput values.
// You can construct a concrete instance of `ClientCertificateCommonNameInput` via:
//
//          ClientCertificateCommonNameArgs{...}
type ClientCertificateCommonNameInput interface {
	pulumi.Input

	ToClientCertificateCommonNameOutput() ClientCertificateCommonNameOutput
	ToClientCertificateCommonNameOutputWithContext(context.Context) ClientCertificateCommonNameOutput
}

// Describes the client certificate details using common name.
type ClientCertificateCommonNameArgs struct {
	// The common name of the client certificate.
	CertificateCommonName pulumi.StringInput `pulumi:"certificateCommonName"`
	// The issuer thumbprint of the client certificate.
	CertificateIssuerThumbprint pulumi.StringInput `pulumi:"certificateIssuerThumbprint"`
	// Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
	IsAdmin pulumi.BoolInput `pulumi:"isAdmin"`
}

func (ClientCertificateCommonNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateCommonName)(nil)).Elem()
}

func (i ClientCertificateCommonNameArgs) ToClientCertificateCommonNameOutput() ClientCertificateCommonNameOutput {
	return i.ToClientCertificateCommonNameOutputWithContext(context.Background())
}

func (i ClientCertificateCommonNameArgs) ToClientCertificateCommonNameOutputWithContext(ctx context.Context) ClientCertificateCommonNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateCommonNameOutput)
}

// ClientCertificateCommonNameArrayInput is an input type that accepts ClientCertificateCommonNameArray and ClientCertificateCommonNameArrayOutput values.
// You can construct a concrete instance of `ClientCertificateCommonNameArrayInput` via:
//
//          ClientCertificateCommonNameArray{ ClientCertificateCommonNameArgs{...} }
type ClientCertificateCommonNameArrayInput interface {
	pulumi.Input

	ToClientCertificateCommonNameArrayOutput() ClientCertificateCommonNameArrayOutput
	ToClientCertificateCommonNameArrayOutputWithContext(context.Context) ClientCertificateCommonNameArrayOutput
}

type ClientCertificateCommonNameArray []ClientCertificateCommonNameInput

func (ClientCertificateCommonNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClientCertificateCommonName)(nil)).Elem()
}

func (i ClientCertificateCommonNameArray) ToClientCertificateCommonNameArrayOutput() ClientCertificateCommonNameArrayOutput {
	return i.ToClientCertificateCommonNameArrayOutputWithContext(context.Background())
}

func (i ClientCertificateCommonNameArray) ToClientCertificateCommonNameArrayOutputWithContext(ctx context.Context) ClientCertificateCommonNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateCommonNameArrayOutput)
}

// Describes the client certificate details using common name.
type ClientCertificateCommonNameOutput struct{ *pulumi.OutputState }

func (ClientCertificateCommonNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateCommonName)(nil)).Elem()
}

func (o ClientCertificateCommonNameOutput) ToClientCertificateCommonNameOutput() ClientCertificateCommonNameOutput {
	return o
}

func (o ClientCertificateCommonNameOutput) ToClientCertificateCommonNameOutputWithContext(ctx context.Context) ClientCertificateCommonNameOutput {
	return o
}

// The common name of the client certificate.
func (o ClientCertificateCommonNameOutput) CertificateCommonName() pulumi.StringOutput {
	return o.ApplyT(func(v ClientCertificateCommonName) string { return v.CertificateCommonName }).(pulumi.StringOutput)
}

// The issuer thumbprint of the client certificate.
func (o ClientCertificateCommonNameOutput) CertificateIssuerThumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v ClientCertificateCommonName) string { return v.CertificateIssuerThumbprint }).(pulumi.StringOutput)
}

// Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
func (o ClientCertificateCommonNameOutput) IsAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v ClientCertificateCommonName) bool { return v.IsAdmin }).(pulumi.BoolOutput)
}

type ClientCertificateCommonNameArrayOutput struct{ *pulumi.OutputState }

func (ClientCertificateCommonNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClientCertificateCommonName)(nil)).Elem()
}

func (o ClientCertificateCommonNameArrayOutput) ToClientCertificateCommonNameArrayOutput() ClientCertificateCommonNameArrayOutput {
	return o
}

func (o ClientCertificateCommonNameArrayOutput) ToClientCertificateCommonNameArrayOutputWithContext(ctx context.Context) ClientCertificateCommonNameArrayOutput {
	return o
}

func (o ClientCertificateCommonNameArrayOutput) Index(i pulumi.IntInput) ClientCertificateCommonNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClientCertificateCommonName {
		return vs[0].([]ClientCertificateCommonName)[vs[1].(int)]
	}).(ClientCertificateCommonNameOutput)
}

// Describes the client certificate details using common name.
type ClientCertificateCommonNameResponse struct {
	// The common name of the client certificate.
	CertificateCommonName string `pulumi:"certificateCommonName"`
	// The issuer thumbprint of the client certificate.
	CertificateIssuerThumbprint string `pulumi:"certificateIssuerThumbprint"`
	// Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
	IsAdmin bool `pulumi:"isAdmin"`
}

// ClientCertificateCommonNameResponseInput is an input type that accepts ClientCertificateCommonNameResponseArgs and ClientCertificateCommonNameResponseOutput values.
// You can construct a concrete instance of `ClientCertificateCommonNameResponseInput` via:
//
//          ClientCertificateCommonNameResponseArgs{...}
type ClientCertificateCommonNameResponseInput interface {
	pulumi.Input

	ToClientCertificateCommonNameResponseOutput() ClientCertificateCommonNameResponseOutput
	ToClientCertificateCommonNameResponseOutputWithContext(context.Context) ClientCertificateCommonNameResponseOutput
}

// Describes the client certificate details using common name.
type ClientCertificateCommonNameResponseArgs struct {
	// The common name of the client certificate.
	CertificateCommonName pulumi.StringInput `pulumi:"certificateCommonName"`
	// The issuer thumbprint of the client certificate.
	CertificateIssuerThumbprint pulumi.StringInput `pulumi:"certificateIssuerThumbprint"`
	// Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
	IsAdmin pulumi.BoolInput `pulumi:"isAdmin"`
}

func (ClientCertificateCommonNameResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateCommonNameResponse)(nil)).Elem()
}

func (i ClientCertificateCommonNameResponseArgs) ToClientCertificateCommonNameResponseOutput() ClientCertificateCommonNameResponseOutput {
	return i.ToClientCertificateCommonNameResponseOutputWithContext(context.Background())
}

func (i ClientCertificateCommonNameResponseArgs) ToClientCertificateCommonNameResponseOutputWithContext(ctx context.Context) ClientCertificateCommonNameResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateCommonNameResponseOutput)
}

// ClientCertificateCommonNameResponseArrayInput is an input type that accepts ClientCertificateCommonNameResponseArray and ClientCertificateCommonNameResponseArrayOutput values.
// You can construct a concrete instance of `ClientCertificateCommonNameResponseArrayInput` via:
//
//          ClientCertificateCommonNameResponseArray{ ClientCertificateCommonNameResponseArgs{...} }
type ClientCertificateCommonNameResponseArrayInput interface {
	pulumi.Input

	ToClientCertificateCommonNameResponseArrayOutput() ClientCertificateCommonNameResponseArrayOutput
	ToClientCertificateCommonNameResponseArrayOutputWithContext(context.Context) ClientCertificateCommonNameResponseArrayOutput
}

type ClientCertificateCommonNameResponseArray []ClientCertificateCommonNameResponseInput

func (ClientCertificateCommonNameResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClientCertificateCommonNameResponse)(nil)).Elem()
}

func (i ClientCertificateCommonNameResponseArray) ToClientCertificateCommonNameResponseArrayOutput() ClientCertificateCommonNameResponseArrayOutput {
	return i.ToClientCertificateCommonNameResponseArrayOutputWithContext(context.Background())
}

func (i ClientCertificateCommonNameResponseArray) ToClientCertificateCommonNameResponseArrayOutputWithContext(ctx context.Context) ClientCertificateCommonNameResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateCommonNameResponseArrayOutput)
}

// Describes the client certificate details using common name.
type ClientCertificateCommonNameResponseOutput struct{ *pulumi.OutputState }

func (ClientCertificateCommonNameResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateCommonNameResponse)(nil)).Elem()
}

func (o ClientCertificateCommonNameResponseOutput) ToClientCertificateCommonNameResponseOutput() ClientCertificateCommonNameResponseOutput {
	return o
}

func (o ClientCertificateCommonNameResponseOutput) ToClientCertificateCommonNameResponseOutputWithContext(ctx context.Context) ClientCertificateCommonNameResponseOutput {
	return o
}

// The common name of the client certificate.
func (o ClientCertificateCommonNameResponseOutput) CertificateCommonName() pulumi.StringOutput {
	return o.ApplyT(func(v ClientCertificateCommonNameResponse) string { return v.CertificateCommonName }).(pulumi.StringOutput)
}

// The issuer thumbprint of the client certificate.
func (o ClientCertificateCommonNameResponseOutput) CertificateIssuerThumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v ClientCertificateCommonNameResponse) string { return v.CertificateIssuerThumbprint }).(pulumi.StringOutput)
}

// Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
func (o ClientCertificateCommonNameResponseOutput) IsAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v ClientCertificateCommonNameResponse) bool { return v.IsAdmin }).(pulumi.BoolOutput)
}

type ClientCertificateCommonNameResponseArrayOutput struct{ *pulumi.OutputState }

func (ClientCertificateCommonNameResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClientCertificateCommonNameResponse)(nil)).Elem()
}

func (o ClientCertificateCommonNameResponseArrayOutput) ToClientCertificateCommonNameResponseArrayOutput() ClientCertificateCommonNameResponseArrayOutput {
	return o
}

func (o ClientCertificateCommonNameResponseArrayOutput) ToClientCertificateCommonNameResponseArrayOutputWithContext(ctx context.Context) ClientCertificateCommonNameResponseArrayOutput {
	return o
}

func (o ClientCertificateCommonNameResponseArrayOutput) Index(i pulumi.IntInput) ClientCertificateCommonNameResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClientCertificateCommonNameResponse {
		return vs[0].([]ClientCertificateCommonNameResponse)[vs[1].(int)]
	}).(ClientCertificateCommonNameResponseOutput)
}

// Describes the client certificate details using thumbprint.
type ClientCertificateThumbprint struct {
	// The thumbprint of the client certificate.
	CertificateThumbprint string `pulumi:"certificateThumbprint"`
	// Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
	IsAdmin bool `pulumi:"isAdmin"`
}

// ClientCertificateThumbprintInput is an input type that accepts ClientCertificateThumbprintArgs and ClientCertificateThumbprintOutput values.
// You can construct a concrete instance of `ClientCertificateThumbprintInput` via:
//
//          ClientCertificateThumbprintArgs{...}
type ClientCertificateThumbprintInput interface {
	pulumi.Input

	ToClientCertificateThumbprintOutput() ClientCertificateThumbprintOutput
	ToClientCertificateThumbprintOutputWithContext(context.Context) ClientCertificateThumbprintOutput
}

// Describes the client certificate details using thumbprint.
type ClientCertificateThumbprintArgs struct {
	// The thumbprint of the client certificate.
	CertificateThumbprint pulumi.StringInput `pulumi:"certificateThumbprint"`
	// Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
	IsAdmin pulumi.BoolInput `pulumi:"isAdmin"`
}

func (ClientCertificateThumbprintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateThumbprint)(nil)).Elem()
}

func (i ClientCertificateThumbprintArgs) ToClientCertificateThumbprintOutput() ClientCertificateThumbprintOutput {
	return i.ToClientCertificateThumbprintOutputWithContext(context.Background())
}

func (i ClientCertificateThumbprintArgs) ToClientCertificateThumbprintOutputWithContext(ctx context.Context) ClientCertificateThumbprintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateThumbprintOutput)
}

// ClientCertificateThumbprintArrayInput is an input type that accepts ClientCertificateThumbprintArray and ClientCertificateThumbprintArrayOutput values.
// You can construct a concrete instance of `ClientCertificateThumbprintArrayInput` via:
//
//          ClientCertificateThumbprintArray{ ClientCertificateThumbprintArgs{...} }
type ClientCertificateThumbprintArrayInput interface {
	pulumi.Input

	ToClientCertificateThumbprintArrayOutput() ClientCertificateThumbprintArrayOutput
	ToClientCertificateThumbprintArrayOutputWithContext(context.Context) ClientCertificateThumbprintArrayOutput
}

type ClientCertificateThumbprintArray []ClientCertificateThumbprintInput

func (ClientCertificateThumbprintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClientCertificateThumbprint)(nil)).Elem()
}

func (i ClientCertificateThumbprintArray) ToClientCertificateThumbprintArrayOutput() ClientCertificateThumbprintArrayOutput {
	return i.ToClientCertificateThumbprintArrayOutputWithContext(context.Background())
}

func (i ClientCertificateThumbprintArray) ToClientCertificateThumbprintArrayOutputWithContext(ctx context.Context) ClientCertificateThumbprintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateThumbprintArrayOutput)
}

// Describes the client certificate details using thumbprint.
type ClientCertificateThumbprintOutput struct{ *pulumi.OutputState }

func (ClientCertificateThumbprintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateThumbprint)(nil)).Elem()
}

func (o ClientCertificateThumbprintOutput) ToClientCertificateThumbprintOutput() ClientCertificateThumbprintOutput {
	return o
}

func (o ClientCertificateThumbprintOutput) ToClientCertificateThumbprintOutputWithContext(ctx context.Context) ClientCertificateThumbprintOutput {
	return o
}

// The thumbprint of the client certificate.
func (o ClientCertificateThumbprintOutput) CertificateThumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v ClientCertificateThumbprint) string { return v.CertificateThumbprint }).(pulumi.StringOutput)
}

// Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
func (o ClientCertificateThumbprintOutput) IsAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v ClientCertificateThumbprint) bool { return v.IsAdmin }).(pulumi.BoolOutput)
}

type ClientCertificateThumbprintArrayOutput struct{ *pulumi.OutputState }

func (ClientCertificateThumbprintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClientCertificateThumbprint)(nil)).Elem()
}

func (o ClientCertificateThumbprintArrayOutput) ToClientCertificateThumbprintArrayOutput() ClientCertificateThumbprintArrayOutput {
	return o
}

func (o ClientCertificateThumbprintArrayOutput) ToClientCertificateThumbprintArrayOutputWithContext(ctx context.Context) ClientCertificateThumbprintArrayOutput {
	return o
}

func (o ClientCertificateThumbprintArrayOutput) Index(i pulumi.IntInput) ClientCertificateThumbprintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClientCertificateThumbprint {
		return vs[0].([]ClientCertificateThumbprint)[vs[1].(int)]
	}).(ClientCertificateThumbprintOutput)
}

// Describes the client certificate details using thumbprint.
type ClientCertificateThumbprintResponse struct {
	// The thumbprint of the client certificate.
	CertificateThumbprint string `pulumi:"certificateThumbprint"`
	// Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
	IsAdmin bool `pulumi:"isAdmin"`
}

// ClientCertificateThumbprintResponseInput is an input type that accepts ClientCertificateThumbprintResponseArgs and ClientCertificateThumbprintResponseOutput values.
// You can construct a concrete instance of `ClientCertificateThumbprintResponseInput` via:
//
//          ClientCertificateThumbprintResponseArgs{...}
type ClientCertificateThumbprintResponseInput interface {
	pulumi.Input

	ToClientCertificateThumbprintResponseOutput() ClientCertificateThumbprintResponseOutput
	ToClientCertificateThumbprintResponseOutputWithContext(context.Context) ClientCertificateThumbprintResponseOutput
}

// Describes the client certificate details using thumbprint.
type ClientCertificateThumbprintResponseArgs struct {
	// The thumbprint of the client certificate.
	CertificateThumbprint pulumi.StringInput `pulumi:"certificateThumbprint"`
	// Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
	IsAdmin pulumi.BoolInput `pulumi:"isAdmin"`
}

func (ClientCertificateThumbprintResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateThumbprintResponse)(nil)).Elem()
}

func (i ClientCertificateThumbprintResponseArgs) ToClientCertificateThumbprintResponseOutput() ClientCertificateThumbprintResponseOutput {
	return i.ToClientCertificateThumbprintResponseOutputWithContext(context.Background())
}

func (i ClientCertificateThumbprintResponseArgs) ToClientCertificateThumbprintResponseOutputWithContext(ctx context.Context) ClientCertificateThumbprintResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateThumbprintResponseOutput)
}

// ClientCertificateThumbprintResponseArrayInput is an input type that accepts ClientCertificateThumbprintResponseArray and ClientCertificateThumbprintResponseArrayOutput values.
// You can construct a concrete instance of `ClientCertificateThumbprintResponseArrayInput` via:
//
//          ClientCertificateThumbprintResponseArray{ ClientCertificateThumbprintResponseArgs{...} }
type ClientCertificateThumbprintResponseArrayInput interface {
	pulumi.Input

	ToClientCertificateThumbprintResponseArrayOutput() ClientCertificateThumbprintResponseArrayOutput
	ToClientCertificateThumbprintResponseArrayOutputWithContext(context.Context) ClientCertificateThumbprintResponseArrayOutput
}

type ClientCertificateThumbprintResponseArray []ClientCertificateThumbprintResponseInput

func (ClientCertificateThumbprintResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClientCertificateThumbprintResponse)(nil)).Elem()
}

func (i ClientCertificateThumbprintResponseArray) ToClientCertificateThumbprintResponseArrayOutput() ClientCertificateThumbprintResponseArrayOutput {
	return i.ToClientCertificateThumbprintResponseArrayOutputWithContext(context.Background())
}

func (i ClientCertificateThumbprintResponseArray) ToClientCertificateThumbprintResponseArrayOutputWithContext(ctx context.Context) ClientCertificateThumbprintResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateThumbprintResponseArrayOutput)
}

// Describes the client certificate details using thumbprint.
type ClientCertificateThumbprintResponseOutput struct{ *pulumi.OutputState }

func (ClientCertificateThumbprintResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateThumbprintResponse)(nil)).Elem()
}

func (o ClientCertificateThumbprintResponseOutput) ToClientCertificateThumbprintResponseOutput() ClientCertificateThumbprintResponseOutput {
	return o
}

func (o ClientCertificateThumbprintResponseOutput) ToClientCertificateThumbprintResponseOutputWithContext(ctx context.Context) ClientCertificateThumbprintResponseOutput {
	return o
}

// The thumbprint of the client certificate.
func (o ClientCertificateThumbprintResponseOutput) CertificateThumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v ClientCertificateThumbprintResponse) string { return v.CertificateThumbprint }).(pulumi.StringOutput)
}

// Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
func (o ClientCertificateThumbprintResponseOutput) IsAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v ClientCertificateThumbprintResponse) bool { return v.IsAdmin }).(pulumi.BoolOutput)
}

type ClientCertificateThumbprintResponseArrayOutput struct{ *pulumi.OutputState }

func (ClientCertificateThumbprintResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClientCertificateThumbprintResponse)(nil)).Elem()
}

func (o ClientCertificateThumbprintResponseArrayOutput) ToClientCertificateThumbprintResponseArrayOutput() ClientCertificateThumbprintResponseArrayOutput {
	return o
}

func (o ClientCertificateThumbprintResponseArrayOutput) ToClientCertificateThumbprintResponseArrayOutputWithContext(ctx context.Context) ClientCertificateThumbprintResponseArrayOutput {
	return o
}

func (o ClientCertificateThumbprintResponseArrayOutput) Index(i pulumi.IntInput) ClientCertificateThumbprintResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClientCertificateThumbprintResponse {
		return vs[0].([]ClientCertificateThumbprintResponse)[vs[1].(int)]
	}).(ClientCertificateThumbprintResponseOutput)
}

// The cluster resource
type ClusterType struct {
	// Azure resource etag.
	Etag string `pulumi:"etag"`
	// Azure resource location.
	Location string `pulumi:"location"`
	// Azure resource name.
	Name string `pulumi:"name"`
	// The cluster resource properties
	Properties ClusterPropertiesResponse `pulumi:"properties"`
	// Azure resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Azure resource type.
	Type string `pulumi:"type"`
}

// ClusterTypeInput is an input type that accepts ClusterTypeArgs and ClusterTypeOutput values.
// You can construct a concrete instance of `ClusterTypeInput` via:
//
//          ClusterTypeArgs{...}
type ClusterTypeInput interface {
	pulumi.Input

	ToClusterTypeOutput() ClusterTypeOutput
	ToClusterTypeOutputWithContext(context.Context) ClusterTypeOutput
}

// The cluster resource
type ClusterTypeArgs struct {
	// Azure resource etag.
	Etag pulumi.StringInput `pulumi:"etag"`
	// Azure resource location.
	Location pulumi.StringInput `pulumi:"location"`
	// Azure resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// The cluster resource properties
	Properties ClusterPropertiesResponseInput `pulumi:"properties"`
	// Azure resource tags.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Azure resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ClusterTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterType)(nil)).Elem()
}

func (i ClusterTypeArgs) ToClusterTypeOutput() ClusterTypeOutput {
	return i.ToClusterTypeOutputWithContext(context.Background())
}

func (i ClusterTypeArgs) ToClusterTypeOutputWithContext(ctx context.Context) ClusterTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTypeOutput)
}

// The cluster resource
type ClusterTypeOutput struct{ *pulumi.OutputState }

func (ClusterTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterType)(nil)).Elem()
}

func (o ClusterTypeOutput) ToClusterTypeOutput() ClusterTypeOutput {
	return o
}

func (o ClusterTypeOutput) ToClusterTypeOutputWithContext(ctx context.Context) ClusterTypeOutput {
	return o
}

// Azure resource etag.
func (o ClusterTypeOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterType) string { return v.Etag }).(pulumi.StringOutput)
}

// Azure resource location.
func (o ClusterTypeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterType) string { return v.Location }).(pulumi.StringOutput)
}

// Azure resource name.
func (o ClusterTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterType) string { return v.Name }).(pulumi.StringOutput)
}

// The cluster resource properties
func (o ClusterTypeOutput) Properties() ClusterPropertiesResponseOutput {
	return o.ApplyT(func(v ClusterType) ClusterPropertiesResponse { return v.Properties }).(ClusterPropertiesResponseOutput)
}

// Azure resource tags.
func (o ClusterTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ClusterType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure resource type.
func (o ClusterTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterType) string { return v.Type }).(pulumi.StringOutput)
}

// Defines a health policy used to evaluate the health of the cluster or of a cluster node.
type ClusterHealthPolicy struct {
	// Defines the application health policy map used to evaluate the health of an application or one of its children entities.
	ApplicationHealthPolicies *ApplicationHealthPolicyMap `pulumi:"applicationHealthPolicies"`
	// The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.
	//
	// The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.
	// If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.
	// This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.
	// The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.
	MaxPercentUnhealthyApplications *int `pulumi:"maxPercentUnhealthyApplications"`
	// The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.
	//
	// The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.
	// If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.
	// The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.
	// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
	//
	// In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.
	MaxPercentUnhealthyNodes *int `pulumi:"maxPercentUnhealthyNodes"`
}

// ClusterHealthPolicyInput is an input type that accepts ClusterHealthPolicyArgs and ClusterHealthPolicyOutput values.
// You can construct a concrete instance of `ClusterHealthPolicyInput` via:
//
//          ClusterHealthPolicyArgs{...}
type ClusterHealthPolicyInput interface {
	pulumi.Input

	ToClusterHealthPolicyOutput() ClusterHealthPolicyOutput
	ToClusterHealthPolicyOutputWithContext(context.Context) ClusterHealthPolicyOutput
}

// Defines a health policy used to evaluate the health of the cluster or of a cluster node.
type ClusterHealthPolicyArgs struct {
	// Defines the application health policy map used to evaluate the health of an application or one of its children entities.
	ApplicationHealthPolicies ApplicationHealthPolicyMapPtrInput `pulumi:"applicationHealthPolicies"`
	// The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.
	//
	// The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.
	// If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.
	// This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.
	// The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.
	MaxPercentUnhealthyApplications pulumi.IntPtrInput `pulumi:"maxPercentUnhealthyApplications"`
	// The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.
	//
	// The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.
	// If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.
	// The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.
	// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
	//
	// In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.
	MaxPercentUnhealthyNodes pulumi.IntPtrInput `pulumi:"maxPercentUnhealthyNodes"`
}

func (ClusterHealthPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterHealthPolicy)(nil)).Elem()
}

func (i ClusterHealthPolicyArgs) ToClusterHealthPolicyOutput() ClusterHealthPolicyOutput {
	return i.ToClusterHealthPolicyOutputWithContext(context.Background())
}

func (i ClusterHealthPolicyArgs) ToClusterHealthPolicyOutputWithContext(ctx context.Context) ClusterHealthPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterHealthPolicyOutput)
}

func (i ClusterHealthPolicyArgs) ToClusterHealthPolicyPtrOutput() ClusterHealthPolicyPtrOutput {
	return i.ToClusterHealthPolicyPtrOutputWithContext(context.Background())
}

func (i ClusterHealthPolicyArgs) ToClusterHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterHealthPolicyOutput).ToClusterHealthPolicyPtrOutputWithContext(ctx)
}

// ClusterHealthPolicyPtrInput is an input type that accepts ClusterHealthPolicyArgs, ClusterHealthPolicyPtr and ClusterHealthPolicyPtrOutput values.
// You can construct a concrete instance of `ClusterHealthPolicyPtrInput` via:
//
//          ClusterHealthPolicyArgs{...}
//
//  or:
//
//          nil
type ClusterHealthPolicyPtrInput interface {
	pulumi.Input

	ToClusterHealthPolicyPtrOutput() ClusterHealthPolicyPtrOutput
	ToClusterHealthPolicyPtrOutputWithContext(context.Context) ClusterHealthPolicyPtrOutput
}

type clusterHealthPolicyPtrType ClusterHealthPolicyArgs

func ClusterHealthPolicyPtr(v *ClusterHealthPolicyArgs) ClusterHealthPolicyPtrInput {
	return (*clusterHealthPolicyPtrType)(v)
}

func (*clusterHealthPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterHealthPolicy)(nil)).Elem()
}

func (i *clusterHealthPolicyPtrType) ToClusterHealthPolicyPtrOutput() ClusterHealthPolicyPtrOutput {
	return i.ToClusterHealthPolicyPtrOutputWithContext(context.Background())
}

func (i *clusterHealthPolicyPtrType) ToClusterHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterHealthPolicyPtrOutput)
}

// Defines a health policy used to evaluate the health of the cluster or of a cluster node.
type ClusterHealthPolicyOutput struct{ *pulumi.OutputState }

func (ClusterHealthPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterHealthPolicy)(nil)).Elem()
}

func (o ClusterHealthPolicyOutput) ToClusterHealthPolicyOutput() ClusterHealthPolicyOutput {
	return o
}

func (o ClusterHealthPolicyOutput) ToClusterHealthPolicyOutputWithContext(ctx context.Context) ClusterHealthPolicyOutput {
	return o
}

func (o ClusterHealthPolicyOutput) ToClusterHealthPolicyPtrOutput() ClusterHealthPolicyPtrOutput {
	return o.ToClusterHealthPolicyPtrOutputWithContext(context.Background())
}

func (o ClusterHealthPolicyOutput) ToClusterHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterHealthPolicyPtrOutput {
	return o.ApplyT(func(v ClusterHealthPolicy) *ClusterHealthPolicy {
		return &v
	}).(ClusterHealthPolicyPtrOutput)
}

// Defines the application health policy map used to evaluate the health of an application or one of its children entities.
func (o ClusterHealthPolicyOutput) ApplicationHealthPolicies() ApplicationHealthPolicyMapPtrOutput {
	return o.ApplyT(func(v ClusterHealthPolicy) *ApplicationHealthPolicyMap { return v.ApplicationHealthPolicies }).(ApplicationHealthPolicyMapPtrOutput)
}

// The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.
//
// The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.
// If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.
// This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.
// The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.
func (o ClusterHealthPolicyOutput) MaxPercentUnhealthyApplications() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterHealthPolicy) *int { return v.MaxPercentUnhealthyApplications }).(pulumi.IntPtrOutput)
}

// The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.
//
// The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.
// If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.
// The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.
// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
//
// In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.
func (o ClusterHealthPolicyOutput) MaxPercentUnhealthyNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterHealthPolicy) *int { return v.MaxPercentUnhealthyNodes }).(pulumi.IntPtrOutput)
}

type ClusterHealthPolicyPtrOutput struct{ *pulumi.OutputState }

func (ClusterHealthPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterHealthPolicy)(nil)).Elem()
}

func (o ClusterHealthPolicyPtrOutput) ToClusterHealthPolicyPtrOutput() ClusterHealthPolicyPtrOutput {
	return o
}

func (o ClusterHealthPolicyPtrOutput) ToClusterHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterHealthPolicyPtrOutput {
	return o
}

func (o ClusterHealthPolicyPtrOutput) Elem() ClusterHealthPolicyOutput {
	return o.ApplyT(func(v *ClusterHealthPolicy) ClusterHealthPolicy { return *v }).(ClusterHealthPolicyOutput)
}

// Defines the application health policy map used to evaluate the health of an application or one of its children entities.
func (o ClusterHealthPolicyPtrOutput) ApplicationHealthPolicies() ApplicationHealthPolicyMapPtrOutput {
	return o.ApplyT(func(v *ClusterHealthPolicy) *ApplicationHealthPolicyMap {
		if v == nil {
			return nil
		}
		return v.ApplicationHealthPolicies
	}).(ApplicationHealthPolicyMapPtrOutput)
}

// The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.
//
// The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.
// If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.
// This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.
// The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.
func (o ClusterHealthPolicyPtrOutput) MaxPercentUnhealthyApplications() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyApplications
	}).(pulumi.IntPtrOutput)
}

// The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.
//
// The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.
// If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.
// The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.
// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
//
// In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.
func (o ClusterHealthPolicyPtrOutput) MaxPercentUnhealthyNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyNodes
	}).(pulumi.IntPtrOutput)
}

// Defines a health policy used to evaluate the health of the cluster or of a cluster node.
type ClusterHealthPolicyResponse struct {
	// Defines the application health policy map used to evaluate the health of an application or one of its children entities.
	ApplicationHealthPolicies *ApplicationHealthPolicyMapResponse `pulumi:"applicationHealthPolicies"`
	// The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.
	//
	// The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.
	// If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.
	// This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.
	// The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.
	MaxPercentUnhealthyApplications *int `pulumi:"maxPercentUnhealthyApplications"`
	// The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.
	//
	// The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.
	// If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.
	// The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.
	// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
	//
	// In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.
	MaxPercentUnhealthyNodes *int `pulumi:"maxPercentUnhealthyNodes"`
}

// ClusterHealthPolicyResponseInput is an input type that accepts ClusterHealthPolicyResponseArgs and ClusterHealthPolicyResponseOutput values.
// You can construct a concrete instance of `ClusterHealthPolicyResponseInput` via:
//
//          ClusterHealthPolicyResponseArgs{...}
type ClusterHealthPolicyResponseInput interface {
	pulumi.Input

	ToClusterHealthPolicyResponseOutput() ClusterHealthPolicyResponseOutput
	ToClusterHealthPolicyResponseOutputWithContext(context.Context) ClusterHealthPolicyResponseOutput
}

// Defines a health policy used to evaluate the health of the cluster or of a cluster node.
type ClusterHealthPolicyResponseArgs struct {
	// Defines the application health policy map used to evaluate the health of an application or one of its children entities.
	ApplicationHealthPolicies ApplicationHealthPolicyMapResponsePtrInput `pulumi:"applicationHealthPolicies"`
	// The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.
	//
	// The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.
	// If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.
	// This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.
	// The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.
	MaxPercentUnhealthyApplications pulumi.IntPtrInput `pulumi:"maxPercentUnhealthyApplications"`
	// The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.
	//
	// The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.
	// If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.
	// The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.
	// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
	//
	// In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.
	MaxPercentUnhealthyNodes pulumi.IntPtrInput `pulumi:"maxPercentUnhealthyNodes"`
}

func (ClusterHealthPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterHealthPolicyResponse)(nil)).Elem()
}

func (i ClusterHealthPolicyResponseArgs) ToClusterHealthPolicyResponseOutput() ClusterHealthPolicyResponseOutput {
	return i.ToClusterHealthPolicyResponseOutputWithContext(context.Background())
}

func (i ClusterHealthPolicyResponseArgs) ToClusterHealthPolicyResponseOutputWithContext(ctx context.Context) ClusterHealthPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterHealthPolicyResponseOutput)
}

func (i ClusterHealthPolicyResponseArgs) ToClusterHealthPolicyResponsePtrOutput() ClusterHealthPolicyResponsePtrOutput {
	return i.ToClusterHealthPolicyResponsePtrOutputWithContext(context.Background())
}

func (i ClusterHealthPolicyResponseArgs) ToClusterHealthPolicyResponsePtrOutputWithContext(ctx context.Context) ClusterHealthPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterHealthPolicyResponseOutput).ToClusterHealthPolicyResponsePtrOutputWithContext(ctx)
}

// ClusterHealthPolicyResponsePtrInput is an input type that accepts ClusterHealthPolicyResponseArgs, ClusterHealthPolicyResponsePtr and ClusterHealthPolicyResponsePtrOutput values.
// You can construct a concrete instance of `ClusterHealthPolicyResponsePtrInput` via:
//
//          ClusterHealthPolicyResponseArgs{...}
//
//  or:
//
//          nil
type ClusterHealthPolicyResponsePtrInput interface {
	pulumi.Input

	ToClusterHealthPolicyResponsePtrOutput() ClusterHealthPolicyResponsePtrOutput
	ToClusterHealthPolicyResponsePtrOutputWithContext(context.Context) ClusterHealthPolicyResponsePtrOutput
}

type clusterHealthPolicyResponsePtrType ClusterHealthPolicyResponseArgs

func ClusterHealthPolicyResponsePtr(v *ClusterHealthPolicyResponseArgs) ClusterHealthPolicyResponsePtrInput {
	return (*clusterHealthPolicyResponsePtrType)(v)
}

func (*clusterHealthPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterHealthPolicyResponse)(nil)).Elem()
}

func (i *clusterHealthPolicyResponsePtrType) ToClusterHealthPolicyResponsePtrOutput() ClusterHealthPolicyResponsePtrOutput {
	return i.ToClusterHealthPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *clusterHealthPolicyResponsePtrType) ToClusterHealthPolicyResponsePtrOutputWithContext(ctx context.Context) ClusterHealthPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterHealthPolicyResponsePtrOutput)
}

// Defines a health policy used to evaluate the health of the cluster or of a cluster node.
type ClusterHealthPolicyResponseOutput struct{ *pulumi.OutputState }

func (ClusterHealthPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterHealthPolicyResponse)(nil)).Elem()
}

func (o ClusterHealthPolicyResponseOutput) ToClusterHealthPolicyResponseOutput() ClusterHealthPolicyResponseOutput {
	return o
}

func (o ClusterHealthPolicyResponseOutput) ToClusterHealthPolicyResponseOutputWithContext(ctx context.Context) ClusterHealthPolicyResponseOutput {
	return o
}

func (o ClusterHealthPolicyResponseOutput) ToClusterHealthPolicyResponsePtrOutput() ClusterHealthPolicyResponsePtrOutput {
	return o.ToClusterHealthPolicyResponsePtrOutputWithContext(context.Background())
}

func (o ClusterHealthPolicyResponseOutput) ToClusterHealthPolicyResponsePtrOutputWithContext(ctx context.Context) ClusterHealthPolicyResponsePtrOutput {
	return o.ApplyT(func(v ClusterHealthPolicyResponse) *ClusterHealthPolicyResponse {
		return &v
	}).(ClusterHealthPolicyResponsePtrOutput)
}

// Defines the application health policy map used to evaluate the health of an application or one of its children entities.
func (o ClusterHealthPolicyResponseOutput) ApplicationHealthPolicies() ApplicationHealthPolicyMapResponsePtrOutput {
	return o.ApplyT(func(v ClusterHealthPolicyResponse) *ApplicationHealthPolicyMapResponse {
		return v.ApplicationHealthPolicies
	}).(ApplicationHealthPolicyMapResponsePtrOutput)
}

// The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.
//
// The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.
// If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.
// This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.
// The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.
func (o ClusterHealthPolicyResponseOutput) MaxPercentUnhealthyApplications() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterHealthPolicyResponse) *int { return v.MaxPercentUnhealthyApplications }).(pulumi.IntPtrOutput)
}

// The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.
//
// The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.
// If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.
// The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.
// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
//
// In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.
func (o ClusterHealthPolicyResponseOutput) MaxPercentUnhealthyNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterHealthPolicyResponse) *int { return v.MaxPercentUnhealthyNodes }).(pulumi.IntPtrOutput)
}

type ClusterHealthPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterHealthPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterHealthPolicyResponse)(nil)).Elem()
}

func (o ClusterHealthPolicyResponsePtrOutput) ToClusterHealthPolicyResponsePtrOutput() ClusterHealthPolicyResponsePtrOutput {
	return o
}

func (o ClusterHealthPolicyResponsePtrOutput) ToClusterHealthPolicyResponsePtrOutputWithContext(ctx context.Context) ClusterHealthPolicyResponsePtrOutput {
	return o
}

func (o ClusterHealthPolicyResponsePtrOutput) Elem() ClusterHealthPolicyResponseOutput {
	return o.ApplyT(func(v *ClusterHealthPolicyResponse) ClusterHealthPolicyResponse { return *v }).(ClusterHealthPolicyResponseOutput)
}

// Defines the application health policy map used to evaluate the health of an application or one of its children entities.
func (o ClusterHealthPolicyResponsePtrOutput) ApplicationHealthPolicies() ApplicationHealthPolicyMapResponsePtrOutput {
	return o.ApplyT(func(v *ClusterHealthPolicyResponse) *ApplicationHealthPolicyMapResponse {
		if v == nil {
			return nil
		}
		return v.ApplicationHealthPolicies
	}).(ApplicationHealthPolicyMapResponsePtrOutput)
}

// The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.
//
// The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.
// If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.
// This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.
// The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.
func (o ClusterHealthPolicyResponsePtrOutput) MaxPercentUnhealthyApplications() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterHealthPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyApplications
	}).(pulumi.IntPtrOutput)
}

// The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.
//
// The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.
// If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.
// The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.
// The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.
//
// In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.
func (o ClusterHealthPolicyResponsePtrOutput) MaxPercentUnhealthyNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterHealthPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxPercentUnhealthyNodes
	}).(pulumi.IntPtrOutput)
}

// Describes the cluster resource properties.
type ClusterProperties struct {
	// The list of add-on features to enable in the cluster.
	AddOnFeatures []string `pulumi:"addOnFeatures"`
	// The policy used to clean up unused versions.
	ApplicationTypeVersionsCleanupPolicy *ApplicationTypeVersionsCleanupPolicy `pulumi:"applicationTypeVersionsCleanupPolicy"`
	// The AAD authentication settings of the cluster.
	AzureActiveDirectory *AzureActiveDirectory `pulumi:"azureActiveDirectory"`
	// The certificate to use for securing the cluster. The certificate provided will be used for node to node security within the cluster, SSL certificate for cluster management endpoint and default admin client.
	Certificate *CertificateDescription `pulumi:"certificate"`
	// Describes a list of server certificates referenced by common name that are used to secure the cluster.
	CertificateCommonNames *ServerCertificateCommonNames `pulumi:"certificateCommonNames"`
	// The list of client certificates referenced by common name that are allowed to manage the cluster.
	ClientCertificateCommonNames []ClientCertificateCommonName `pulumi:"clientCertificateCommonNames"`
	// The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
	ClientCertificateThumbprints []ClientCertificateThumbprint `pulumi:"clientCertificateThumbprints"`
	// The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
	ClusterCodeVersion *string `pulumi:"clusterCodeVersion"`
	// The storage account information for storing Service Fabric diagnostic logs.
	DiagnosticsStorageAccountConfig *DiagnosticsStorageAccountConfig `pulumi:"diagnosticsStorageAccountConfig"`
	// Indicates if the event store service is enabled.
	EventStoreServiceEnabled *bool `pulumi:"eventStoreServiceEnabled"`
	// The list of custom fabric settings to configure the cluster.
	FabricSettings []SettingsSectionDescription `pulumi:"fabricSettings"`
	// The http management endpoint of the cluster.
	ManagementEndpoint string `pulumi:"managementEndpoint"`
	// The list of node types in the cluster.
	NodeTypes []NodeTypeDescription `pulumi:"nodeTypes"`
	// The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
	//
	//   - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
	//   - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
	//   - Silver - Run the System services with a target replica set count of 5.
	//   - Gold - Run the System services with a target replica set count of 7.
	//   - Platinum - Run the System services with a target replica set count of 9.
	ReliabilityLevel *string `pulumi:"reliabilityLevel"`
	// The server certificate used by reverse proxy.
	ReverseProxyCertificate *CertificateDescription `pulumi:"reverseProxyCertificate"`
	// Describes a list of server certificates referenced by common name that are used to secure the cluster.
	ReverseProxyCertificateCommonNames *ServerCertificateCommonNames `pulumi:"reverseProxyCertificateCommonNames"`
	// The policy to use when upgrading the cluster.
	UpgradeDescription *ClusterUpgradePolicy `pulumi:"upgradeDescription"`
	// The upgrade mode of the cluster when new Service Fabric runtime version is available.
	//
	//   - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.
	//   - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.
	UpgradeMode *string `pulumi:"upgradeMode"`
	// The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
	VmImage *string `pulumi:"vmImage"`
}

// ClusterPropertiesInput is an input type that accepts ClusterPropertiesArgs and ClusterPropertiesOutput values.
// You can construct a concrete instance of `ClusterPropertiesInput` via:
//
//          ClusterPropertiesArgs{...}
type ClusterPropertiesInput interface {
	pulumi.Input

	ToClusterPropertiesOutput() ClusterPropertiesOutput
	ToClusterPropertiesOutputWithContext(context.Context) ClusterPropertiesOutput
}

// Describes the cluster resource properties.
type ClusterPropertiesArgs struct {
	// The list of add-on features to enable in the cluster.
	AddOnFeatures pulumi.StringArrayInput `pulumi:"addOnFeatures"`
	// The policy used to clean up unused versions.
	ApplicationTypeVersionsCleanupPolicy ApplicationTypeVersionsCleanupPolicyPtrInput `pulumi:"applicationTypeVersionsCleanupPolicy"`
	// The AAD authentication settings of the cluster.
	AzureActiveDirectory AzureActiveDirectoryPtrInput `pulumi:"azureActiveDirectory"`
	// The certificate to use for securing the cluster. The certificate provided will be used for node to node security within the cluster, SSL certificate for cluster management endpoint and default admin client.
	Certificate CertificateDescriptionPtrInput `pulumi:"certificate"`
	// Describes a list of server certificates referenced by common name that are used to secure the cluster.
	CertificateCommonNames ServerCertificateCommonNamesPtrInput `pulumi:"certificateCommonNames"`
	// The list of client certificates referenced by common name that are allowed to manage the cluster.
	ClientCertificateCommonNames ClientCertificateCommonNameArrayInput `pulumi:"clientCertificateCommonNames"`
	// The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
	ClientCertificateThumbprints ClientCertificateThumbprintArrayInput `pulumi:"clientCertificateThumbprints"`
	// The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
	ClusterCodeVersion pulumi.StringPtrInput `pulumi:"clusterCodeVersion"`
	// The storage account information for storing Service Fabric diagnostic logs.
	DiagnosticsStorageAccountConfig DiagnosticsStorageAccountConfigPtrInput `pulumi:"diagnosticsStorageAccountConfig"`
	// Indicates if the event store service is enabled.
	EventStoreServiceEnabled pulumi.BoolPtrInput `pulumi:"eventStoreServiceEnabled"`
	// The list of custom fabric settings to configure the cluster.
	FabricSettings SettingsSectionDescriptionArrayInput `pulumi:"fabricSettings"`
	// The http management endpoint of the cluster.
	ManagementEndpoint pulumi.StringInput `pulumi:"managementEndpoint"`
	// The list of node types in the cluster.
	NodeTypes NodeTypeDescriptionArrayInput `pulumi:"nodeTypes"`
	// The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
	//
	//   - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
	//   - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
	//   - Silver - Run the System services with a target replica set count of 5.
	//   - Gold - Run the System services with a target replica set count of 7.
	//   - Platinum - Run the System services with a target replica set count of 9.
	ReliabilityLevel pulumi.StringPtrInput `pulumi:"reliabilityLevel"`
	// The server certificate used by reverse proxy.
	ReverseProxyCertificate CertificateDescriptionPtrInput `pulumi:"reverseProxyCertificate"`
	// Describes a list of server certificates referenced by common name that are used to secure the cluster.
	ReverseProxyCertificateCommonNames ServerCertificateCommonNamesPtrInput `pulumi:"reverseProxyCertificateCommonNames"`
	// The policy to use when upgrading the cluster.
	UpgradeDescription ClusterUpgradePolicyPtrInput `pulumi:"upgradeDescription"`
	// The upgrade mode of the cluster when new Service Fabric runtime version is available.
	//
	//   - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.
	//   - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.
	UpgradeMode pulumi.StringPtrInput `pulumi:"upgradeMode"`
	// The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
	VmImage pulumi.StringPtrInput `pulumi:"vmImage"`
}

func (ClusterPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterProperties)(nil)).Elem()
}

func (i ClusterPropertiesArgs) ToClusterPropertiesOutput() ClusterPropertiesOutput {
	return i.ToClusterPropertiesOutputWithContext(context.Background())
}

func (i ClusterPropertiesArgs) ToClusterPropertiesOutputWithContext(ctx context.Context) ClusterPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPropertiesOutput)
}

func (i ClusterPropertiesArgs) ToClusterPropertiesPtrOutput() ClusterPropertiesPtrOutput {
	return i.ToClusterPropertiesPtrOutputWithContext(context.Background())
}

func (i ClusterPropertiesArgs) ToClusterPropertiesPtrOutputWithContext(ctx context.Context) ClusterPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPropertiesOutput).ToClusterPropertiesPtrOutputWithContext(ctx)
}

// ClusterPropertiesPtrInput is an input type that accepts ClusterPropertiesArgs, ClusterPropertiesPtr and ClusterPropertiesPtrOutput values.
// You can construct a concrete instance of `ClusterPropertiesPtrInput` via:
//
//          ClusterPropertiesArgs{...}
//
//  or:
//
//          nil
type ClusterPropertiesPtrInput interface {
	pulumi.Input

	ToClusterPropertiesPtrOutput() ClusterPropertiesPtrOutput
	ToClusterPropertiesPtrOutputWithContext(context.Context) ClusterPropertiesPtrOutput
}

type clusterPropertiesPtrType ClusterPropertiesArgs

func ClusterPropertiesPtr(v *ClusterPropertiesArgs) ClusterPropertiesPtrInput {
	return (*clusterPropertiesPtrType)(v)
}

func (*clusterPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterProperties)(nil)).Elem()
}

func (i *clusterPropertiesPtrType) ToClusterPropertiesPtrOutput() ClusterPropertiesPtrOutput {
	return i.ToClusterPropertiesPtrOutputWithContext(context.Background())
}

func (i *clusterPropertiesPtrType) ToClusterPropertiesPtrOutputWithContext(ctx context.Context) ClusterPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPropertiesPtrOutput)
}

// Describes the cluster resource properties.
type ClusterPropertiesOutput struct{ *pulumi.OutputState }

func (ClusterPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterProperties)(nil)).Elem()
}

func (o ClusterPropertiesOutput) ToClusterPropertiesOutput() ClusterPropertiesOutput {
	return o
}

func (o ClusterPropertiesOutput) ToClusterPropertiesOutputWithContext(ctx context.Context) ClusterPropertiesOutput {
	return o
}

func (o ClusterPropertiesOutput) ToClusterPropertiesPtrOutput() ClusterPropertiesPtrOutput {
	return o.ToClusterPropertiesPtrOutputWithContext(context.Background())
}

func (o ClusterPropertiesOutput) ToClusterPropertiesPtrOutputWithContext(ctx context.Context) ClusterPropertiesPtrOutput {
	return o.ApplyT(func(v ClusterProperties) *ClusterProperties {
		return &v
	}).(ClusterPropertiesPtrOutput)
}

// The list of add-on features to enable in the cluster.
func (o ClusterPropertiesOutput) AddOnFeatures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterProperties) []string { return v.AddOnFeatures }).(pulumi.StringArrayOutput)
}

// The policy used to clean up unused versions.
func (o ClusterPropertiesOutput) ApplicationTypeVersionsCleanupPolicy() ApplicationTypeVersionsCleanupPolicyPtrOutput {
	return o.ApplyT(func(v ClusterProperties) *ApplicationTypeVersionsCleanupPolicy {
		return v.ApplicationTypeVersionsCleanupPolicy
	}).(ApplicationTypeVersionsCleanupPolicyPtrOutput)
}

// The AAD authentication settings of the cluster.
func (o ClusterPropertiesOutput) AzureActiveDirectory() AzureActiveDirectoryPtrOutput {
	return o.ApplyT(func(v ClusterProperties) *AzureActiveDirectory { return v.AzureActiveDirectory }).(AzureActiveDirectoryPtrOutput)
}

// The certificate to use for securing the cluster. The certificate provided will be used for node to node security within the cluster, SSL certificate for cluster management endpoint and default admin client.
func (o ClusterPropertiesOutput) Certificate() CertificateDescriptionPtrOutput {
	return o.ApplyT(func(v ClusterProperties) *CertificateDescription { return v.Certificate }).(CertificateDescriptionPtrOutput)
}

// Describes a list of server certificates referenced by common name that are used to secure the cluster.
func (o ClusterPropertiesOutput) CertificateCommonNames() ServerCertificateCommonNamesPtrOutput {
	return o.ApplyT(func(v ClusterProperties) *ServerCertificateCommonNames { return v.CertificateCommonNames }).(ServerCertificateCommonNamesPtrOutput)
}

// The list of client certificates referenced by common name that are allowed to manage the cluster.
func (o ClusterPropertiesOutput) ClientCertificateCommonNames() ClientCertificateCommonNameArrayOutput {
	return o.ApplyT(func(v ClusterProperties) []ClientCertificateCommonName { return v.ClientCertificateCommonNames }).(ClientCertificateCommonNameArrayOutput)
}

// The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
func (o ClusterPropertiesOutput) ClientCertificateThumbprints() ClientCertificateThumbprintArrayOutput {
	return o.ApplyT(func(v ClusterProperties) []ClientCertificateThumbprint { return v.ClientCertificateThumbprints }).(ClientCertificateThumbprintArrayOutput)
}

// The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
func (o ClusterPropertiesOutput) ClusterCodeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterProperties) *string { return v.ClusterCodeVersion }).(pulumi.StringPtrOutput)
}

// The storage account information for storing Service Fabric diagnostic logs.
func (o ClusterPropertiesOutput) DiagnosticsStorageAccountConfig() DiagnosticsStorageAccountConfigPtrOutput {
	return o.ApplyT(func(v ClusterProperties) *DiagnosticsStorageAccountConfig { return v.DiagnosticsStorageAccountConfig }).(DiagnosticsStorageAccountConfigPtrOutput)
}

// Indicates if the event store service is enabled.
func (o ClusterPropertiesOutput) EventStoreServiceEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterProperties) *bool { return v.EventStoreServiceEnabled }).(pulumi.BoolPtrOutput)
}

// The list of custom fabric settings to configure the cluster.
func (o ClusterPropertiesOutput) FabricSettings() SettingsSectionDescriptionArrayOutput {
	return o.ApplyT(func(v ClusterProperties) []SettingsSectionDescription { return v.FabricSettings }).(SettingsSectionDescriptionArrayOutput)
}

// The http management endpoint of the cluster.
func (o ClusterPropertiesOutput) ManagementEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterProperties) string { return v.ManagementEndpoint }).(pulumi.StringOutput)
}

// The list of node types in the cluster.
func (o ClusterPropertiesOutput) NodeTypes() NodeTypeDescriptionArrayOutput {
	return o.ApplyT(func(v ClusterProperties) []NodeTypeDescription { return v.NodeTypes }).(NodeTypeDescriptionArrayOutput)
}

// The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
//
//   - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
//   - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
//   - Silver - Run the System services with a target replica set count of 5.
//   - Gold - Run the System services with a target replica set count of 7.
//   - Platinum - Run the System services with a target replica set count of 9.
func (o ClusterPropertiesOutput) ReliabilityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterProperties) *string { return v.ReliabilityLevel }).(pulumi.StringPtrOutput)
}

// The server certificate used by reverse proxy.
func (o ClusterPropertiesOutput) ReverseProxyCertificate() CertificateDescriptionPtrOutput {
	return o.ApplyT(func(v ClusterProperties) *CertificateDescription { return v.ReverseProxyCertificate }).(CertificateDescriptionPtrOutput)
}

// Describes a list of server certificates referenced by common name that are used to secure the cluster.
func (o ClusterPropertiesOutput) ReverseProxyCertificateCommonNames() ServerCertificateCommonNamesPtrOutput {
	return o.ApplyT(func(v ClusterProperties) *ServerCertificateCommonNames { return v.ReverseProxyCertificateCommonNames }).(ServerCertificateCommonNamesPtrOutput)
}

// The policy to use when upgrading the cluster.
func (o ClusterPropertiesOutput) UpgradeDescription() ClusterUpgradePolicyPtrOutput {
	return o.ApplyT(func(v ClusterProperties) *ClusterUpgradePolicy { return v.UpgradeDescription }).(ClusterUpgradePolicyPtrOutput)
}

// The upgrade mode of the cluster when new Service Fabric runtime version is available.
//
//   - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.
//   - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.
func (o ClusterPropertiesOutput) UpgradeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterProperties) *string { return v.UpgradeMode }).(pulumi.StringPtrOutput)
}

// The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
func (o ClusterPropertiesOutput) VmImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterProperties) *string { return v.VmImage }).(pulumi.StringPtrOutput)
}

type ClusterPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ClusterPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterProperties)(nil)).Elem()
}

func (o ClusterPropertiesPtrOutput) ToClusterPropertiesPtrOutput() ClusterPropertiesPtrOutput {
	return o
}

func (o ClusterPropertiesPtrOutput) ToClusterPropertiesPtrOutputWithContext(ctx context.Context) ClusterPropertiesPtrOutput {
	return o
}

func (o ClusterPropertiesPtrOutput) Elem() ClusterPropertiesOutput {
	return o.ApplyT(func(v *ClusterProperties) ClusterProperties { return *v }).(ClusterPropertiesOutput)
}

// The list of add-on features to enable in the cluster.
func (o ClusterPropertiesPtrOutput) AddOnFeatures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterProperties) []string {
		if v == nil {
			return nil
		}
		return v.AddOnFeatures
	}).(pulumi.StringArrayOutput)
}

// The policy used to clean up unused versions.
func (o ClusterPropertiesPtrOutput) ApplicationTypeVersionsCleanupPolicy() ApplicationTypeVersionsCleanupPolicyPtrOutput {
	return o.ApplyT(func(v *ClusterProperties) *ApplicationTypeVersionsCleanupPolicy {
		if v == nil {
			return nil
		}
		return v.ApplicationTypeVersionsCleanupPolicy
	}).(ApplicationTypeVersionsCleanupPolicyPtrOutput)
}

// The AAD authentication settings of the cluster.
func (o ClusterPropertiesPtrOutput) AzureActiveDirectory() AzureActiveDirectoryPtrOutput {
	return o.ApplyT(func(v *ClusterProperties) *AzureActiveDirectory {
		if v == nil {
			return nil
		}
		return v.AzureActiveDirectory
	}).(AzureActiveDirectoryPtrOutput)
}

// The certificate to use for securing the cluster. The certificate provided will be used for node to node security within the cluster, SSL certificate for cluster management endpoint and default admin client.
func (o ClusterPropertiesPtrOutput) Certificate() CertificateDescriptionPtrOutput {
	return o.ApplyT(func(v *ClusterProperties) *CertificateDescription {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(CertificateDescriptionPtrOutput)
}

// Describes a list of server certificates referenced by common name that are used to secure the cluster.
func (o ClusterPropertiesPtrOutput) CertificateCommonNames() ServerCertificateCommonNamesPtrOutput {
	return o.ApplyT(func(v *ClusterProperties) *ServerCertificateCommonNames {
		if v == nil {
			return nil
		}
		return v.CertificateCommonNames
	}).(ServerCertificateCommonNamesPtrOutput)
}

// The list of client certificates referenced by common name that are allowed to manage the cluster.
func (o ClusterPropertiesPtrOutput) ClientCertificateCommonNames() ClientCertificateCommonNameArrayOutput {
	return o.ApplyT(func(v *ClusterProperties) []ClientCertificateCommonName {
		if v == nil {
			return nil
		}
		return v.ClientCertificateCommonNames
	}).(ClientCertificateCommonNameArrayOutput)
}

// The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
func (o ClusterPropertiesPtrOutput) ClientCertificateThumbprints() ClientCertificateThumbprintArrayOutput {
	return o.ApplyT(func(v *ClusterProperties) []ClientCertificateThumbprint {
		if v == nil {
			return nil
		}
		return v.ClientCertificateThumbprints
	}).(ClientCertificateThumbprintArrayOutput)
}

// The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
func (o ClusterPropertiesPtrOutput) ClusterCodeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterProperties) *string {
		if v == nil {
			return nil
		}
		return v.ClusterCodeVersion
	}).(pulumi.StringPtrOutput)
}

// The storage account information for storing Service Fabric diagnostic logs.
func (o ClusterPropertiesPtrOutput) DiagnosticsStorageAccountConfig() DiagnosticsStorageAccountConfigPtrOutput {
	return o.ApplyT(func(v *ClusterProperties) *DiagnosticsStorageAccountConfig {
		if v == nil {
			return nil
		}
		return v.DiagnosticsStorageAccountConfig
	}).(DiagnosticsStorageAccountConfigPtrOutput)
}

// Indicates if the event store service is enabled.
func (o ClusterPropertiesPtrOutput) EventStoreServiceEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EventStoreServiceEnabled
	}).(pulumi.BoolPtrOutput)
}

// The list of custom fabric settings to configure the cluster.
func (o ClusterPropertiesPtrOutput) FabricSettings() SettingsSectionDescriptionArrayOutput {
	return o.ApplyT(func(v *ClusterProperties) []SettingsSectionDescription {
		if v == nil {
			return nil
		}
		return v.FabricSettings
	}).(SettingsSectionDescriptionArrayOutput)
}

// The http management endpoint of the cluster.
func (o ClusterPropertiesPtrOutput) ManagementEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ManagementEndpoint
	}).(pulumi.StringPtrOutput)
}

// The list of node types in the cluster.
func (o ClusterPropertiesPtrOutput) NodeTypes() NodeTypeDescriptionArrayOutput {
	return o.ApplyT(func(v *ClusterProperties) []NodeTypeDescription {
		if v == nil {
			return nil
		}
		return v.NodeTypes
	}).(NodeTypeDescriptionArrayOutput)
}

// The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
//
//   - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
//   - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
//   - Silver - Run the System services with a target replica set count of 5.
//   - Gold - Run the System services with a target replica set count of 7.
//   - Platinum - Run the System services with a target replica set count of 9.
func (o ClusterPropertiesPtrOutput) ReliabilityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterProperties) *string {
		if v == nil {
			return nil
		}
		return v.ReliabilityLevel
	}).(pulumi.StringPtrOutput)
}

// The server certificate used by reverse proxy.
func (o ClusterPropertiesPtrOutput) ReverseProxyCertificate() CertificateDescriptionPtrOutput {
	return o.ApplyT(func(v *ClusterProperties) *CertificateDescription {
		if v == nil {
			return nil
		}
		return v.ReverseProxyCertificate
	}).(CertificateDescriptionPtrOutput)
}

// Describes a list of server certificates referenced by common name that are used to secure the cluster.
func (o ClusterPropertiesPtrOutput) ReverseProxyCertificateCommonNames() ServerCertificateCommonNamesPtrOutput {
	return o.ApplyT(func(v *ClusterProperties) *ServerCertificateCommonNames {
		if v == nil {
			return nil
		}
		return v.ReverseProxyCertificateCommonNames
	}).(ServerCertificateCommonNamesPtrOutput)
}

// The policy to use when upgrading the cluster.
func (o ClusterPropertiesPtrOutput) UpgradeDescription() ClusterUpgradePolicyPtrOutput {
	return o.ApplyT(func(v *ClusterProperties) *ClusterUpgradePolicy {
		if v == nil {
			return nil
		}
		return v.UpgradeDescription
	}).(ClusterUpgradePolicyPtrOutput)
}

// The upgrade mode of the cluster when new Service Fabric runtime version is available.
//
//   - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.
//   - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.
func (o ClusterPropertiesPtrOutput) UpgradeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterProperties) *string {
		if v == nil {
			return nil
		}
		return v.UpgradeMode
	}).(pulumi.StringPtrOutput)
}

// The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
func (o ClusterPropertiesPtrOutput) VmImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterProperties) *string {
		if v == nil {
			return nil
		}
		return v.VmImage
	}).(pulumi.StringPtrOutput)
}

// Describes the cluster resource properties.
type ClusterPropertiesResponse struct {
	// The list of add-on features to enable in the cluster.
	AddOnFeatures []string `pulumi:"addOnFeatures"`
	// The policy used to clean up unused versions.
	ApplicationTypeVersionsCleanupPolicy *ApplicationTypeVersionsCleanupPolicyResponse `pulumi:"applicationTypeVersionsCleanupPolicy"`
	// The Service Fabric runtime versions available for this cluster.
	AvailableClusterVersions []ClusterVersionDetailsResponse `pulumi:"availableClusterVersions"`
	// The AAD authentication settings of the cluster.
	AzureActiveDirectory *AzureActiveDirectoryResponse `pulumi:"azureActiveDirectory"`
	// The certificate to use for securing the cluster. The certificate provided will be used for node to node security within the cluster, SSL certificate for cluster management endpoint and default admin client.
	Certificate *CertificateDescriptionResponse `pulumi:"certificate"`
	// Describes a list of server certificates referenced by common name that are used to secure the cluster.
	CertificateCommonNames *ServerCertificateCommonNamesResponse `pulumi:"certificateCommonNames"`
	// The list of client certificates referenced by common name that are allowed to manage the cluster.
	ClientCertificateCommonNames []ClientCertificateCommonNameResponse `pulumi:"clientCertificateCommonNames"`
	// The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
	ClientCertificateThumbprints []ClientCertificateThumbprintResponse `pulumi:"clientCertificateThumbprints"`
	// The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
	ClusterCodeVersion *string `pulumi:"clusterCodeVersion"`
	// The Azure Resource Provider endpoint. A system service in the cluster connects to this  endpoint.
	ClusterEndpoint string `pulumi:"clusterEndpoint"`
	// A service generated unique identifier for the cluster resource.
	ClusterId string `pulumi:"clusterId"`
	// The current state of the cluster.
	//
	//   - WaitingForNodes - Indicates that the cluster resource is created and the resource provider is waiting for Service Fabric VM extension to boot up and report to it.
	//   - Deploying - Indicates that the Service Fabric runtime is being installed on the VMs. Cluster resource will be in this state until the cluster boots up and system services are up.
	//   - BaselineUpgrade - Indicates that the cluster is upgrading to establishes the cluster version. This upgrade is automatically initiated when the cluster boots up for the first time.
	//   - UpdatingUserConfiguration - Indicates that the cluster is being upgraded with the user provided configuration.
	//   - UpdatingUserCertificate - Indicates that the cluster is being upgraded with the user provided certificate.
	//   - UpdatingInfrastructure - Indicates that the cluster is being upgraded with the latest Service Fabric runtime version. This happens only when the **upgradeMode** is set to 'Automatic'.
	//   - EnforcingClusterVersion - Indicates that cluster is on a different version than expected and the cluster is being upgraded to the expected version.
	//   - UpgradeServiceUnreachable - Indicates that the system service in the cluster is no longer polling the Resource Provider. Clusters in this state cannot be managed by the Resource Provider.
	//   - AutoScale - Indicates that the ReliabilityLevel of the cluster is being adjusted.
	//   - Ready - Indicates that the cluster is in a stable state.
	ClusterState string `pulumi:"clusterState"`
	// The storage account information for storing Service Fabric diagnostic logs.
	DiagnosticsStorageAccountConfig *DiagnosticsStorageAccountConfigResponse `pulumi:"diagnosticsStorageAccountConfig"`
	// Indicates if the event store service is enabled.
	EventStoreServiceEnabled *bool `pulumi:"eventStoreServiceEnabled"`
	// The list of custom fabric settings to configure the cluster.
	FabricSettings []SettingsSectionDescriptionResponse `pulumi:"fabricSettings"`
	// The http management endpoint of the cluster.
	ManagementEndpoint string `pulumi:"managementEndpoint"`
	// The list of node types in the cluster.
	NodeTypes []NodeTypeDescriptionResponse `pulumi:"nodeTypes"`
	// The provisioning state of the cluster resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
	//
	//   - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
	//   - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
	//   - Silver - Run the System services with a target replica set count of 5.
	//   - Gold - Run the System services with a target replica set count of 7.
	//   - Platinum - Run the System services with a target replica set count of 9.
	ReliabilityLevel *string `pulumi:"reliabilityLevel"`
	// The server certificate used by reverse proxy.
	ReverseProxyCertificate *CertificateDescriptionResponse `pulumi:"reverseProxyCertificate"`
	// Describes a list of server certificates referenced by common name that are used to secure the cluster.
	ReverseProxyCertificateCommonNames *ServerCertificateCommonNamesResponse `pulumi:"reverseProxyCertificateCommonNames"`
	// The policy to use when upgrading the cluster.
	UpgradeDescription *ClusterUpgradePolicyResponse `pulumi:"upgradeDescription"`
	// The upgrade mode of the cluster when new Service Fabric runtime version is available.
	//
	//   - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.
	//   - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.
	UpgradeMode *string `pulumi:"upgradeMode"`
	// The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
	VmImage *string `pulumi:"vmImage"`
}

// ClusterPropertiesResponseInput is an input type that accepts ClusterPropertiesResponseArgs and ClusterPropertiesResponseOutput values.
// You can construct a concrete instance of `ClusterPropertiesResponseInput` via:
//
//          ClusterPropertiesResponseArgs{...}
type ClusterPropertiesResponseInput interface {
	pulumi.Input

	ToClusterPropertiesResponseOutput() ClusterPropertiesResponseOutput
	ToClusterPropertiesResponseOutputWithContext(context.Context) ClusterPropertiesResponseOutput
}

// Describes the cluster resource properties.
type ClusterPropertiesResponseArgs struct {
	// The list of add-on features to enable in the cluster.
	AddOnFeatures pulumi.StringArrayInput `pulumi:"addOnFeatures"`
	// The policy used to clean up unused versions.
	ApplicationTypeVersionsCleanupPolicy ApplicationTypeVersionsCleanupPolicyResponsePtrInput `pulumi:"applicationTypeVersionsCleanupPolicy"`
	// The Service Fabric runtime versions available for this cluster.
	AvailableClusterVersions ClusterVersionDetailsResponseArrayInput `pulumi:"availableClusterVersions"`
	// The AAD authentication settings of the cluster.
	AzureActiveDirectory AzureActiveDirectoryResponsePtrInput `pulumi:"azureActiveDirectory"`
	// The certificate to use for securing the cluster. The certificate provided will be used for node to node security within the cluster, SSL certificate for cluster management endpoint and default admin client.
	Certificate CertificateDescriptionResponsePtrInput `pulumi:"certificate"`
	// Describes a list of server certificates referenced by common name that are used to secure the cluster.
	CertificateCommonNames ServerCertificateCommonNamesResponsePtrInput `pulumi:"certificateCommonNames"`
	// The list of client certificates referenced by common name that are allowed to manage the cluster.
	ClientCertificateCommonNames ClientCertificateCommonNameResponseArrayInput `pulumi:"clientCertificateCommonNames"`
	// The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
	ClientCertificateThumbprints ClientCertificateThumbprintResponseArrayInput `pulumi:"clientCertificateThumbprints"`
	// The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
	ClusterCodeVersion pulumi.StringPtrInput `pulumi:"clusterCodeVersion"`
	// The Azure Resource Provider endpoint. A system service in the cluster connects to this  endpoint.
	ClusterEndpoint pulumi.StringInput `pulumi:"clusterEndpoint"`
	// A service generated unique identifier for the cluster resource.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The current state of the cluster.
	//
	//   - WaitingForNodes - Indicates that the cluster resource is created and the resource provider is waiting for Service Fabric VM extension to boot up and report to it.
	//   - Deploying - Indicates that the Service Fabric runtime is being installed on the VMs. Cluster resource will be in this state until the cluster boots up and system services are up.
	//   - BaselineUpgrade - Indicates that the cluster is upgrading to establishes the cluster version. This upgrade is automatically initiated when the cluster boots up for the first time.
	//   - UpdatingUserConfiguration - Indicates that the cluster is being upgraded with the user provided configuration.
	//   - UpdatingUserCertificate - Indicates that the cluster is being upgraded with the user provided certificate.
	//   - UpdatingInfrastructure - Indicates that the cluster is being upgraded with the latest Service Fabric runtime version. This happens only when the **upgradeMode** is set to 'Automatic'.
	//   - EnforcingClusterVersion - Indicates that cluster is on a different version than expected and the cluster is being upgraded to the expected version.
	//   - UpgradeServiceUnreachable - Indicates that the system service in the cluster is no longer polling the Resource Provider. Clusters in this state cannot be managed by the Resource Provider.
	//   - AutoScale - Indicates that the ReliabilityLevel of the cluster is being adjusted.
	//   - Ready - Indicates that the cluster is in a stable state.
	ClusterState pulumi.StringInput `pulumi:"clusterState"`
	// The storage account information for storing Service Fabric diagnostic logs.
	DiagnosticsStorageAccountConfig DiagnosticsStorageAccountConfigResponsePtrInput `pulumi:"diagnosticsStorageAccountConfig"`
	// Indicates if the event store service is enabled.
	EventStoreServiceEnabled pulumi.BoolPtrInput `pulumi:"eventStoreServiceEnabled"`
	// The list of custom fabric settings to configure the cluster.
	FabricSettings SettingsSectionDescriptionResponseArrayInput `pulumi:"fabricSettings"`
	// The http management endpoint of the cluster.
	ManagementEndpoint pulumi.StringInput `pulumi:"managementEndpoint"`
	// The list of node types in the cluster.
	NodeTypes NodeTypeDescriptionResponseArrayInput `pulumi:"nodeTypes"`
	// The provisioning state of the cluster resource.
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
	//
	//   - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
	//   - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
	//   - Silver - Run the System services with a target replica set count of 5.
	//   - Gold - Run the System services with a target replica set count of 7.
	//   - Platinum - Run the System services with a target replica set count of 9.
	ReliabilityLevel pulumi.StringPtrInput `pulumi:"reliabilityLevel"`
	// The server certificate used by reverse proxy.
	ReverseProxyCertificate CertificateDescriptionResponsePtrInput `pulumi:"reverseProxyCertificate"`
	// Describes a list of server certificates referenced by common name that are used to secure the cluster.
	ReverseProxyCertificateCommonNames ServerCertificateCommonNamesResponsePtrInput `pulumi:"reverseProxyCertificateCommonNames"`
	// The policy to use when upgrading the cluster.
	UpgradeDescription ClusterUpgradePolicyResponsePtrInput `pulumi:"upgradeDescription"`
	// The upgrade mode of the cluster when new Service Fabric runtime version is available.
	//
	//   - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.
	//   - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.
	UpgradeMode pulumi.StringPtrInput `pulumi:"upgradeMode"`
	// The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
	VmImage pulumi.StringPtrInput `pulumi:"vmImage"`
}

func (ClusterPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPropertiesResponse)(nil)).Elem()
}

func (i ClusterPropertiesResponseArgs) ToClusterPropertiesResponseOutput() ClusterPropertiesResponseOutput {
	return i.ToClusterPropertiesResponseOutputWithContext(context.Background())
}

func (i ClusterPropertiesResponseArgs) ToClusterPropertiesResponseOutputWithContext(ctx context.Context) ClusterPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPropertiesResponseOutput)
}

func (i ClusterPropertiesResponseArgs) ToClusterPropertiesResponsePtrOutput() ClusterPropertiesResponsePtrOutput {
	return i.ToClusterPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i ClusterPropertiesResponseArgs) ToClusterPropertiesResponsePtrOutputWithContext(ctx context.Context) ClusterPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPropertiesResponseOutput).ToClusterPropertiesResponsePtrOutputWithContext(ctx)
}

// ClusterPropertiesResponsePtrInput is an input type that accepts ClusterPropertiesResponseArgs, ClusterPropertiesResponsePtr and ClusterPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `ClusterPropertiesResponsePtrInput` via:
//
//          ClusterPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type ClusterPropertiesResponsePtrInput interface {
	pulumi.Input

	ToClusterPropertiesResponsePtrOutput() ClusterPropertiesResponsePtrOutput
	ToClusterPropertiesResponsePtrOutputWithContext(context.Context) ClusterPropertiesResponsePtrOutput
}

type clusterPropertiesResponsePtrType ClusterPropertiesResponseArgs

func ClusterPropertiesResponsePtr(v *ClusterPropertiesResponseArgs) ClusterPropertiesResponsePtrInput {
	return (*clusterPropertiesResponsePtrType)(v)
}

func (*clusterPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPropertiesResponse)(nil)).Elem()
}

func (i *clusterPropertiesResponsePtrType) ToClusterPropertiesResponsePtrOutput() ClusterPropertiesResponsePtrOutput {
	return i.ToClusterPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *clusterPropertiesResponsePtrType) ToClusterPropertiesResponsePtrOutputWithContext(ctx context.Context) ClusterPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPropertiesResponsePtrOutput)
}

// Describes the cluster resource properties.
type ClusterPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ClusterPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPropertiesResponse)(nil)).Elem()
}

func (o ClusterPropertiesResponseOutput) ToClusterPropertiesResponseOutput() ClusterPropertiesResponseOutput {
	return o
}

func (o ClusterPropertiesResponseOutput) ToClusterPropertiesResponseOutputWithContext(ctx context.Context) ClusterPropertiesResponseOutput {
	return o
}

func (o ClusterPropertiesResponseOutput) ToClusterPropertiesResponsePtrOutput() ClusterPropertiesResponsePtrOutput {
	return o.ToClusterPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ClusterPropertiesResponseOutput) ToClusterPropertiesResponsePtrOutputWithContext(ctx context.Context) ClusterPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) *ClusterPropertiesResponse {
		return &v
	}).(ClusterPropertiesResponsePtrOutput)
}

// The list of add-on features to enable in the cluster.
func (o ClusterPropertiesResponseOutput) AddOnFeatures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) []string { return v.AddOnFeatures }).(pulumi.StringArrayOutput)
}

// The policy used to clean up unused versions.
func (o ClusterPropertiesResponseOutput) ApplicationTypeVersionsCleanupPolicy() ApplicationTypeVersionsCleanupPolicyResponsePtrOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) *ApplicationTypeVersionsCleanupPolicyResponse {
		return v.ApplicationTypeVersionsCleanupPolicy
	}).(ApplicationTypeVersionsCleanupPolicyResponsePtrOutput)
}

// The Service Fabric runtime versions available for this cluster.
func (o ClusterPropertiesResponseOutput) AvailableClusterVersions() ClusterVersionDetailsResponseArrayOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) []ClusterVersionDetailsResponse { return v.AvailableClusterVersions }).(ClusterVersionDetailsResponseArrayOutput)
}

// The AAD authentication settings of the cluster.
func (o ClusterPropertiesResponseOutput) AzureActiveDirectory() AzureActiveDirectoryResponsePtrOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) *AzureActiveDirectoryResponse { return v.AzureActiveDirectory }).(AzureActiveDirectoryResponsePtrOutput)
}

// The certificate to use for securing the cluster. The certificate provided will be used for node to node security within the cluster, SSL certificate for cluster management endpoint and default admin client.
func (o ClusterPropertiesResponseOutput) Certificate() CertificateDescriptionResponsePtrOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) *CertificateDescriptionResponse { return v.Certificate }).(CertificateDescriptionResponsePtrOutput)
}

// Describes a list of server certificates referenced by common name that are used to secure the cluster.
func (o ClusterPropertiesResponseOutput) CertificateCommonNames() ServerCertificateCommonNamesResponsePtrOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) *ServerCertificateCommonNamesResponse {
		return v.CertificateCommonNames
	}).(ServerCertificateCommonNamesResponsePtrOutput)
}

// The list of client certificates referenced by common name that are allowed to manage the cluster.
func (o ClusterPropertiesResponseOutput) ClientCertificateCommonNames() ClientCertificateCommonNameResponseArrayOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) []ClientCertificateCommonNameResponse {
		return v.ClientCertificateCommonNames
	}).(ClientCertificateCommonNameResponseArrayOutput)
}

// The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
func (o ClusterPropertiesResponseOutput) ClientCertificateThumbprints() ClientCertificateThumbprintResponseArrayOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) []ClientCertificateThumbprintResponse {
		return v.ClientCertificateThumbprints
	}).(ClientCertificateThumbprintResponseArrayOutput)
}

// The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
func (o ClusterPropertiesResponseOutput) ClusterCodeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) *string { return v.ClusterCodeVersion }).(pulumi.StringPtrOutput)
}

// The Azure Resource Provider endpoint. A system service in the cluster connects to this  endpoint.
func (o ClusterPropertiesResponseOutput) ClusterEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) string { return v.ClusterEndpoint }).(pulumi.StringOutput)
}

// A service generated unique identifier for the cluster resource.
func (o ClusterPropertiesResponseOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The current state of the cluster.
//
//   - WaitingForNodes - Indicates that the cluster resource is created and the resource provider is waiting for Service Fabric VM extension to boot up and report to it.
//   - Deploying - Indicates that the Service Fabric runtime is being installed on the VMs. Cluster resource will be in this state until the cluster boots up and system services are up.
//   - BaselineUpgrade - Indicates that the cluster is upgrading to establishes the cluster version. This upgrade is automatically initiated when the cluster boots up for the first time.
//   - UpdatingUserConfiguration - Indicates that the cluster is being upgraded with the user provided configuration.
//   - UpdatingUserCertificate - Indicates that the cluster is being upgraded with the user provided certificate.
//   - UpdatingInfrastructure - Indicates that the cluster is being upgraded with the latest Service Fabric runtime version. This happens only when the **upgradeMode** is set to 'Automatic'.
//   - EnforcingClusterVersion - Indicates that cluster is on a different version than expected and the cluster is being upgraded to the expected version.
//   - UpgradeServiceUnreachable - Indicates that the system service in the cluster is no longer polling the Resource Provider. Clusters in this state cannot be managed by the Resource Provider.
//   - AutoScale - Indicates that the ReliabilityLevel of the cluster is being adjusted.
//   - Ready - Indicates that the cluster is in a stable state.
func (o ClusterPropertiesResponseOutput) ClusterState() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) string { return v.ClusterState }).(pulumi.StringOutput)
}

// The storage account information for storing Service Fabric diagnostic logs.
func (o ClusterPropertiesResponseOutput) DiagnosticsStorageAccountConfig() DiagnosticsStorageAccountConfigResponsePtrOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) *DiagnosticsStorageAccountConfigResponse {
		return v.DiagnosticsStorageAccountConfig
	}).(DiagnosticsStorageAccountConfigResponsePtrOutput)
}

// Indicates if the event store service is enabled.
func (o ClusterPropertiesResponseOutput) EventStoreServiceEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) *bool { return v.EventStoreServiceEnabled }).(pulumi.BoolPtrOutput)
}

// The list of custom fabric settings to configure the cluster.
func (o ClusterPropertiesResponseOutput) FabricSettings() SettingsSectionDescriptionResponseArrayOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) []SettingsSectionDescriptionResponse { return v.FabricSettings }).(SettingsSectionDescriptionResponseArrayOutput)
}

// The http management endpoint of the cluster.
func (o ClusterPropertiesResponseOutput) ManagementEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) string { return v.ManagementEndpoint }).(pulumi.StringOutput)
}

// The list of node types in the cluster.
func (o ClusterPropertiesResponseOutput) NodeTypes() NodeTypeDescriptionResponseArrayOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) []NodeTypeDescriptionResponse { return v.NodeTypes }).(NodeTypeDescriptionResponseArrayOutput)
}

// The provisioning state of the cluster resource.
func (o ClusterPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
//
//   - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
//   - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
//   - Silver - Run the System services with a target replica set count of 5.
//   - Gold - Run the System services with a target replica set count of 7.
//   - Platinum - Run the System services with a target replica set count of 9.
func (o ClusterPropertiesResponseOutput) ReliabilityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) *string { return v.ReliabilityLevel }).(pulumi.StringPtrOutput)
}

// The server certificate used by reverse proxy.
func (o ClusterPropertiesResponseOutput) ReverseProxyCertificate() CertificateDescriptionResponsePtrOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) *CertificateDescriptionResponse { return v.ReverseProxyCertificate }).(CertificateDescriptionResponsePtrOutput)
}

// Describes a list of server certificates referenced by common name that are used to secure the cluster.
func (o ClusterPropertiesResponseOutput) ReverseProxyCertificateCommonNames() ServerCertificateCommonNamesResponsePtrOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) *ServerCertificateCommonNamesResponse {
		return v.ReverseProxyCertificateCommonNames
	}).(ServerCertificateCommonNamesResponsePtrOutput)
}

// The policy to use when upgrading the cluster.
func (o ClusterPropertiesResponseOutput) UpgradeDescription() ClusterUpgradePolicyResponsePtrOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) *ClusterUpgradePolicyResponse { return v.UpgradeDescription }).(ClusterUpgradePolicyResponsePtrOutput)
}

// The upgrade mode of the cluster when new Service Fabric runtime version is available.
//
//   - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.
//   - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.
func (o ClusterPropertiesResponseOutput) UpgradeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) *string { return v.UpgradeMode }).(pulumi.StringPtrOutput)
}

// The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
func (o ClusterPropertiesResponseOutput) VmImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPropertiesResponse) *string { return v.VmImage }).(pulumi.StringPtrOutput)
}

type ClusterPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPropertiesResponse)(nil)).Elem()
}

func (o ClusterPropertiesResponsePtrOutput) ToClusterPropertiesResponsePtrOutput() ClusterPropertiesResponsePtrOutput {
	return o
}

func (o ClusterPropertiesResponsePtrOutput) ToClusterPropertiesResponsePtrOutputWithContext(ctx context.Context) ClusterPropertiesResponsePtrOutput {
	return o
}

func (o ClusterPropertiesResponsePtrOutput) Elem() ClusterPropertiesResponseOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) ClusterPropertiesResponse { return *v }).(ClusterPropertiesResponseOutput)
}

// The list of add-on features to enable in the cluster.
func (o ClusterPropertiesResponsePtrOutput) AddOnFeatures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.AddOnFeatures
	}).(pulumi.StringArrayOutput)
}

// The policy used to clean up unused versions.
func (o ClusterPropertiesResponsePtrOutput) ApplicationTypeVersionsCleanupPolicy() ApplicationTypeVersionsCleanupPolicyResponsePtrOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) *ApplicationTypeVersionsCleanupPolicyResponse {
		if v == nil {
			return nil
		}
		return v.ApplicationTypeVersionsCleanupPolicy
	}).(ApplicationTypeVersionsCleanupPolicyResponsePtrOutput)
}

// The Service Fabric runtime versions available for this cluster.
func (o ClusterPropertiesResponsePtrOutput) AvailableClusterVersions() ClusterVersionDetailsResponseArrayOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) []ClusterVersionDetailsResponse {
		if v == nil {
			return nil
		}
		return v.AvailableClusterVersions
	}).(ClusterVersionDetailsResponseArrayOutput)
}

// The AAD authentication settings of the cluster.
func (o ClusterPropertiesResponsePtrOutput) AzureActiveDirectory() AzureActiveDirectoryResponsePtrOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) *AzureActiveDirectoryResponse {
		if v == nil {
			return nil
		}
		return v.AzureActiveDirectory
	}).(AzureActiveDirectoryResponsePtrOutput)
}

// The certificate to use for securing the cluster. The certificate provided will be used for node to node security within the cluster, SSL certificate for cluster management endpoint and default admin client.
func (o ClusterPropertiesResponsePtrOutput) Certificate() CertificateDescriptionResponsePtrOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) *CertificateDescriptionResponse {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(CertificateDescriptionResponsePtrOutput)
}

// Describes a list of server certificates referenced by common name that are used to secure the cluster.
func (o ClusterPropertiesResponsePtrOutput) CertificateCommonNames() ServerCertificateCommonNamesResponsePtrOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) *ServerCertificateCommonNamesResponse {
		if v == nil {
			return nil
		}
		return v.CertificateCommonNames
	}).(ServerCertificateCommonNamesResponsePtrOutput)
}

// The list of client certificates referenced by common name that are allowed to manage the cluster.
func (o ClusterPropertiesResponsePtrOutput) ClientCertificateCommonNames() ClientCertificateCommonNameResponseArrayOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) []ClientCertificateCommonNameResponse {
		if v == nil {
			return nil
		}
		return v.ClientCertificateCommonNames
	}).(ClientCertificateCommonNameResponseArrayOutput)
}

// The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
func (o ClusterPropertiesResponsePtrOutput) ClientCertificateThumbprints() ClientCertificateThumbprintResponseArrayOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) []ClientCertificateThumbprintResponse {
		if v == nil {
			return nil
		}
		return v.ClientCertificateThumbprints
	}).(ClientCertificateThumbprintResponseArrayOutput)
}

// The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
func (o ClusterPropertiesResponsePtrOutput) ClusterCodeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClusterCodeVersion
	}).(pulumi.StringPtrOutput)
}

// The Azure Resource Provider endpoint. A system service in the cluster connects to this  endpoint.
func (o ClusterPropertiesResponsePtrOutput) ClusterEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterEndpoint
	}).(pulumi.StringPtrOutput)
}

// A service generated unique identifier for the cluster resource.
func (o ClusterPropertiesResponsePtrOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterId
	}).(pulumi.StringPtrOutput)
}

// The current state of the cluster.
//
//   - WaitingForNodes - Indicates that the cluster resource is created and the resource provider is waiting for Service Fabric VM extension to boot up and report to it.
//   - Deploying - Indicates that the Service Fabric runtime is being installed on the VMs. Cluster resource will be in this state until the cluster boots up and system services are up.
//   - BaselineUpgrade - Indicates that the cluster is upgrading to establishes the cluster version. This upgrade is automatically initiated when the cluster boots up for the first time.
//   - UpdatingUserConfiguration - Indicates that the cluster is being upgraded with the user provided configuration.
//   - UpdatingUserCertificate - Indicates that the cluster is being upgraded with the user provided certificate.
//   - UpdatingInfrastructure - Indicates that the cluster is being upgraded with the latest Service Fabric runtime version. This happens only when the **upgradeMode** is set to 'Automatic'.
//   - EnforcingClusterVersion - Indicates that cluster is on a different version than expected and the cluster is being upgraded to the expected version.
//   - UpgradeServiceUnreachable - Indicates that the system service in the cluster is no longer polling the Resource Provider. Clusters in this state cannot be managed by the Resource Provider.
//   - AutoScale - Indicates that the ReliabilityLevel of the cluster is being adjusted.
//   - Ready - Indicates that the cluster is in a stable state.
func (o ClusterPropertiesResponsePtrOutput) ClusterState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterState
	}).(pulumi.StringPtrOutput)
}

// The storage account information for storing Service Fabric diagnostic logs.
func (o ClusterPropertiesResponsePtrOutput) DiagnosticsStorageAccountConfig() DiagnosticsStorageAccountConfigResponsePtrOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) *DiagnosticsStorageAccountConfigResponse {
		if v == nil {
			return nil
		}
		return v.DiagnosticsStorageAccountConfig
	}).(DiagnosticsStorageAccountConfigResponsePtrOutput)
}

// Indicates if the event store service is enabled.
func (o ClusterPropertiesResponsePtrOutput) EventStoreServiceEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EventStoreServiceEnabled
	}).(pulumi.BoolPtrOutput)
}

// The list of custom fabric settings to configure the cluster.
func (o ClusterPropertiesResponsePtrOutput) FabricSettings() SettingsSectionDescriptionResponseArrayOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) []SettingsSectionDescriptionResponse {
		if v == nil {
			return nil
		}
		return v.FabricSettings
	}).(SettingsSectionDescriptionResponseArrayOutput)
}

// The http management endpoint of the cluster.
func (o ClusterPropertiesResponsePtrOutput) ManagementEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ManagementEndpoint
	}).(pulumi.StringPtrOutput)
}

// The list of node types in the cluster.
func (o ClusterPropertiesResponsePtrOutput) NodeTypes() NodeTypeDescriptionResponseArrayOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) []NodeTypeDescriptionResponse {
		if v == nil {
			return nil
		}
		return v.NodeTypes
	}).(NodeTypeDescriptionResponseArrayOutput)
}

// The provisioning state of the cluster resource.
func (o ClusterPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
//
//   - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
//   - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
//   - Silver - Run the System services with a target replica set count of 5.
//   - Gold - Run the System services with a target replica set count of 7.
//   - Platinum - Run the System services with a target replica set count of 9.
func (o ClusterPropertiesResponsePtrOutput) ReliabilityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReliabilityLevel
	}).(pulumi.StringPtrOutput)
}

// The server certificate used by reverse proxy.
func (o ClusterPropertiesResponsePtrOutput) ReverseProxyCertificate() CertificateDescriptionResponsePtrOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) *CertificateDescriptionResponse {
		if v == nil {
			return nil
		}
		return v.ReverseProxyCertificate
	}).(CertificateDescriptionResponsePtrOutput)
}

// Describes a list of server certificates referenced by common name that are used to secure the cluster.
func (o ClusterPropertiesResponsePtrOutput) ReverseProxyCertificateCommonNames() ServerCertificateCommonNamesResponsePtrOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) *ServerCertificateCommonNamesResponse {
		if v == nil {
			return nil
		}
		return v.ReverseProxyCertificateCommonNames
	}).(ServerCertificateCommonNamesResponsePtrOutput)
}

// The policy to use when upgrading the cluster.
func (o ClusterPropertiesResponsePtrOutput) UpgradeDescription() ClusterUpgradePolicyResponsePtrOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) *ClusterUpgradePolicyResponse {
		if v == nil {
			return nil
		}
		return v.UpgradeDescription
	}).(ClusterUpgradePolicyResponsePtrOutput)
}

// The upgrade mode of the cluster when new Service Fabric runtime version is available.
//
//   - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.
//   - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.
func (o ClusterPropertiesResponsePtrOutput) UpgradeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.UpgradeMode
	}).(pulumi.StringPtrOutput)
}

// The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
func (o ClusterPropertiesResponsePtrOutput) VmImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.VmImage
	}).(pulumi.StringPtrOutput)
}

// Describes the delta health policies for the cluster upgrade.
type ClusterUpgradeDeltaHealthPolicy struct {
	// Defines the application delta health policy map used to evaluate the health of an application or one of its child entities when upgrading the cluster.
	ApplicationDeltaHealthPolicies *ApplicationDeltaHealthPolicyMap `pulumi:"applicationDeltaHealthPolicies"`
	// The maximum allowed percentage of applications health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.
	MaxPercentDeltaUnhealthyApplications int `pulumi:"maxPercentDeltaUnhealthyApplications"`
	// The maximum allowed percentage of nodes health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
	MaxPercentDeltaUnhealthyNodes int `pulumi:"maxPercentDeltaUnhealthyNodes"`
	// The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits.
	MaxPercentUpgradeDomainDeltaUnhealthyNodes int `pulumi:"maxPercentUpgradeDomainDeltaUnhealthyNodes"`
}

// ClusterUpgradeDeltaHealthPolicyInput is an input type that accepts ClusterUpgradeDeltaHealthPolicyArgs and ClusterUpgradeDeltaHealthPolicyOutput values.
// You can construct a concrete instance of `ClusterUpgradeDeltaHealthPolicyInput` via:
//
//          ClusterUpgradeDeltaHealthPolicyArgs{...}
type ClusterUpgradeDeltaHealthPolicyInput interface {
	pulumi.Input

	ToClusterUpgradeDeltaHealthPolicyOutput() ClusterUpgradeDeltaHealthPolicyOutput
	ToClusterUpgradeDeltaHealthPolicyOutputWithContext(context.Context) ClusterUpgradeDeltaHealthPolicyOutput
}

// Describes the delta health policies for the cluster upgrade.
type ClusterUpgradeDeltaHealthPolicyArgs struct {
	// Defines the application delta health policy map used to evaluate the health of an application or one of its child entities when upgrading the cluster.
	ApplicationDeltaHealthPolicies ApplicationDeltaHealthPolicyMapPtrInput `pulumi:"applicationDeltaHealthPolicies"`
	// The maximum allowed percentage of applications health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.
	MaxPercentDeltaUnhealthyApplications pulumi.IntInput `pulumi:"maxPercentDeltaUnhealthyApplications"`
	// The maximum allowed percentage of nodes health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
	MaxPercentDeltaUnhealthyNodes pulumi.IntInput `pulumi:"maxPercentDeltaUnhealthyNodes"`
	// The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits.
	MaxPercentUpgradeDomainDeltaUnhealthyNodes pulumi.IntInput `pulumi:"maxPercentUpgradeDomainDeltaUnhealthyNodes"`
}

func (ClusterUpgradeDeltaHealthPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeDeltaHealthPolicy)(nil)).Elem()
}

func (i ClusterUpgradeDeltaHealthPolicyArgs) ToClusterUpgradeDeltaHealthPolicyOutput() ClusterUpgradeDeltaHealthPolicyOutput {
	return i.ToClusterUpgradeDeltaHealthPolicyOutputWithContext(context.Background())
}

func (i ClusterUpgradeDeltaHealthPolicyArgs) ToClusterUpgradeDeltaHealthPolicyOutputWithContext(ctx context.Context) ClusterUpgradeDeltaHealthPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradeDeltaHealthPolicyOutput)
}

func (i ClusterUpgradeDeltaHealthPolicyArgs) ToClusterUpgradeDeltaHealthPolicyPtrOutput() ClusterUpgradeDeltaHealthPolicyPtrOutput {
	return i.ToClusterUpgradeDeltaHealthPolicyPtrOutputWithContext(context.Background())
}

func (i ClusterUpgradeDeltaHealthPolicyArgs) ToClusterUpgradeDeltaHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradeDeltaHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradeDeltaHealthPolicyOutput).ToClusterUpgradeDeltaHealthPolicyPtrOutputWithContext(ctx)
}

// ClusterUpgradeDeltaHealthPolicyPtrInput is an input type that accepts ClusterUpgradeDeltaHealthPolicyArgs, ClusterUpgradeDeltaHealthPolicyPtr and ClusterUpgradeDeltaHealthPolicyPtrOutput values.
// You can construct a concrete instance of `ClusterUpgradeDeltaHealthPolicyPtrInput` via:
//
//          ClusterUpgradeDeltaHealthPolicyArgs{...}
//
//  or:
//
//          nil
type ClusterUpgradeDeltaHealthPolicyPtrInput interface {
	pulumi.Input

	ToClusterUpgradeDeltaHealthPolicyPtrOutput() ClusterUpgradeDeltaHealthPolicyPtrOutput
	ToClusterUpgradeDeltaHealthPolicyPtrOutputWithContext(context.Context) ClusterUpgradeDeltaHealthPolicyPtrOutput
}

type clusterUpgradeDeltaHealthPolicyPtrType ClusterUpgradeDeltaHealthPolicyArgs

func ClusterUpgradeDeltaHealthPolicyPtr(v *ClusterUpgradeDeltaHealthPolicyArgs) ClusterUpgradeDeltaHealthPolicyPtrInput {
	return (*clusterUpgradeDeltaHealthPolicyPtrType)(v)
}

func (*clusterUpgradeDeltaHealthPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradeDeltaHealthPolicy)(nil)).Elem()
}

func (i *clusterUpgradeDeltaHealthPolicyPtrType) ToClusterUpgradeDeltaHealthPolicyPtrOutput() ClusterUpgradeDeltaHealthPolicyPtrOutput {
	return i.ToClusterUpgradeDeltaHealthPolicyPtrOutputWithContext(context.Background())
}

func (i *clusterUpgradeDeltaHealthPolicyPtrType) ToClusterUpgradeDeltaHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradeDeltaHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradeDeltaHealthPolicyPtrOutput)
}

// Describes the delta health policies for the cluster upgrade.
type ClusterUpgradeDeltaHealthPolicyOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeDeltaHealthPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeDeltaHealthPolicy)(nil)).Elem()
}

func (o ClusterUpgradeDeltaHealthPolicyOutput) ToClusterUpgradeDeltaHealthPolicyOutput() ClusterUpgradeDeltaHealthPolicyOutput {
	return o
}

func (o ClusterUpgradeDeltaHealthPolicyOutput) ToClusterUpgradeDeltaHealthPolicyOutputWithContext(ctx context.Context) ClusterUpgradeDeltaHealthPolicyOutput {
	return o
}

func (o ClusterUpgradeDeltaHealthPolicyOutput) ToClusterUpgradeDeltaHealthPolicyPtrOutput() ClusterUpgradeDeltaHealthPolicyPtrOutput {
	return o.ToClusterUpgradeDeltaHealthPolicyPtrOutputWithContext(context.Background())
}

func (o ClusterUpgradeDeltaHealthPolicyOutput) ToClusterUpgradeDeltaHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradeDeltaHealthPolicyPtrOutput {
	return o.ApplyT(func(v ClusterUpgradeDeltaHealthPolicy) *ClusterUpgradeDeltaHealthPolicy {
		return &v
	}).(ClusterUpgradeDeltaHealthPolicyPtrOutput)
}

// Defines the application delta health policy map used to evaluate the health of an application or one of its child entities when upgrading the cluster.
func (o ClusterUpgradeDeltaHealthPolicyOutput) ApplicationDeltaHealthPolicies() ApplicationDeltaHealthPolicyMapPtrOutput {
	return o.ApplyT(func(v ClusterUpgradeDeltaHealthPolicy) *ApplicationDeltaHealthPolicyMap {
		return v.ApplicationDeltaHealthPolicies
	}).(ApplicationDeltaHealthPolicyMapPtrOutput)
}

// The maximum allowed percentage of applications health degradation allowed during cluster upgrades.
// The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.
func (o ClusterUpgradeDeltaHealthPolicyOutput) MaxPercentDeltaUnhealthyApplications() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterUpgradeDeltaHealthPolicy) int { return v.MaxPercentDeltaUnhealthyApplications }).(pulumi.IntOutput)
}

// The maximum allowed percentage of nodes health degradation allowed during cluster upgrades.
// The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
func (o ClusterUpgradeDeltaHealthPolicyOutput) MaxPercentDeltaUnhealthyNodes() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterUpgradeDeltaHealthPolicy) int { return v.MaxPercentDeltaUnhealthyNodes }).(pulumi.IntOutput)
}

// The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades.
// The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits.
func (o ClusterUpgradeDeltaHealthPolicyOutput) MaxPercentUpgradeDomainDeltaUnhealthyNodes() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterUpgradeDeltaHealthPolicy) int { return v.MaxPercentUpgradeDomainDeltaUnhealthyNodes }).(pulumi.IntOutput)
}

type ClusterUpgradeDeltaHealthPolicyPtrOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeDeltaHealthPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradeDeltaHealthPolicy)(nil)).Elem()
}

func (o ClusterUpgradeDeltaHealthPolicyPtrOutput) ToClusterUpgradeDeltaHealthPolicyPtrOutput() ClusterUpgradeDeltaHealthPolicyPtrOutput {
	return o
}

func (o ClusterUpgradeDeltaHealthPolicyPtrOutput) ToClusterUpgradeDeltaHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradeDeltaHealthPolicyPtrOutput {
	return o
}

func (o ClusterUpgradeDeltaHealthPolicyPtrOutput) Elem() ClusterUpgradeDeltaHealthPolicyOutput {
	return o.ApplyT(func(v *ClusterUpgradeDeltaHealthPolicy) ClusterUpgradeDeltaHealthPolicy { return *v }).(ClusterUpgradeDeltaHealthPolicyOutput)
}

// Defines the application delta health policy map used to evaluate the health of an application or one of its child entities when upgrading the cluster.
func (o ClusterUpgradeDeltaHealthPolicyPtrOutput) ApplicationDeltaHealthPolicies() ApplicationDeltaHealthPolicyMapPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradeDeltaHealthPolicy) *ApplicationDeltaHealthPolicyMap {
		if v == nil {
			return nil
		}
		return v.ApplicationDeltaHealthPolicies
	}).(ApplicationDeltaHealthPolicyMapPtrOutput)
}

// The maximum allowed percentage of applications health degradation allowed during cluster upgrades.
// The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.
func (o ClusterUpgradeDeltaHealthPolicyPtrOutput) MaxPercentDeltaUnhealthyApplications() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradeDeltaHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.MaxPercentDeltaUnhealthyApplications
	}).(pulumi.IntPtrOutput)
}

// The maximum allowed percentage of nodes health degradation allowed during cluster upgrades.
// The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
func (o ClusterUpgradeDeltaHealthPolicyPtrOutput) MaxPercentDeltaUnhealthyNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradeDeltaHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.MaxPercentDeltaUnhealthyNodes
	}).(pulumi.IntPtrOutput)
}

// The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades.
// The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits.
func (o ClusterUpgradeDeltaHealthPolicyPtrOutput) MaxPercentUpgradeDomainDeltaUnhealthyNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradeDeltaHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.MaxPercentUpgradeDomainDeltaUnhealthyNodes
	}).(pulumi.IntPtrOutput)
}

// Describes the delta health policies for the cluster upgrade.
type ClusterUpgradeDeltaHealthPolicyResponse struct {
	// Defines the application delta health policy map used to evaluate the health of an application or one of its child entities when upgrading the cluster.
	ApplicationDeltaHealthPolicies *ApplicationDeltaHealthPolicyMapResponse `pulumi:"applicationDeltaHealthPolicies"`
	// The maximum allowed percentage of applications health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.
	MaxPercentDeltaUnhealthyApplications int `pulumi:"maxPercentDeltaUnhealthyApplications"`
	// The maximum allowed percentage of nodes health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
	MaxPercentDeltaUnhealthyNodes int `pulumi:"maxPercentDeltaUnhealthyNodes"`
	// The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits.
	MaxPercentUpgradeDomainDeltaUnhealthyNodes int `pulumi:"maxPercentUpgradeDomainDeltaUnhealthyNodes"`
}

// ClusterUpgradeDeltaHealthPolicyResponseInput is an input type that accepts ClusterUpgradeDeltaHealthPolicyResponseArgs and ClusterUpgradeDeltaHealthPolicyResponseOutput values.
// You can construct a concrete instance of `ClusterUpgradeDeltaHealthPolicyResponseInput` via:
//
//          ClusterUpgradeDeltaHealthPolicyResponseArgs{...}
type ClusterUpgradeDeltaHealthPolicyResponseInput interface {
	pulumi.Input

	ToClusterUpgradeDeltaHealthPolicyResponseOutput() ClusterUpgradeDeltaHealthPolicyResponseOutput
	ToClusterUpgradeDeltaHealthPolicyResponseOutputWithContext(context.Context) ClusterUpgradeDeltaHealthPolicyResponseOutput
}

// Describes the delta health policies for the cluster upgrade.
type ClusterUpgradeDeltaHealthPolicyResponseArgs struct {
	// Defines the application delta health policy map used to evaluate the health of an application or one of its child entities when upgrading the cluster.
	ApplicationDeltaHealthPolicies ApplicationDeltaHealthPolicyMapResponsePtrInput `pulumi:"applicationDeltaHealthPolicies"`
	// The maximum allowed percentage of applications health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.
	MaxPercentDeltaUnhealthyApplications pulumi.IntInput `pulumi:"maxPercentDeltaUnhealthyApplications"`
	// The maximum allowed percentage of nodes health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
	MaxPercentDeltaUnhealthyNodes pulumi.IntInput `pulumi:"maxPercentDeltaUnhealthyNodes"`
	// The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades.
	// The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation.
	// The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits.
	MaxPercentUpgradeDomainDeltaUnhealthyNodes pulumi.IntInput `pulumi:"maxPercentUpgradeDomainDeltaUnhealthyNodes"`
}

func (ClusterUpgradeDeltaHealthPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeDeltaHealthPolicyResponse)(nil)).Elem()
}

func (i ClusterUpgradeDeltaHealthPolicyResponseArgs) ToClusterUpgradeDeltaHealthPolicyResponseOutput() ClusterUpgradeDeltaHealthPolicyResponseOutput {
	return i.ToClusterUpgradeDeltaHealthPolicyResponseOutputWithContext(context.Background())
}

func (i ClusterUpgradeDeltaHealthPolicyResponseArgs) ToClusterUpgradeDeltaHealthPolicyResponseOutputWithContext(ctx context.Context) ClusterUpgradeDeltaHealthPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradeDeltaHealthPolicyResponseOutput)
}

func (i ClusterUpgradeDeltaHealthPolicyResponseArgs) ToClusterUpgradeDeltaHealthPolicyResponsePtrOutput() ClusterUpgradeDeltaHealthPolicyResponsePtrOutput {
	return i.ToClusterUpgradeDeltaHealthPolicyResponsePtrOutputWithContext(context.Background())
}

func (i ClusterUpgradeDeltaHealthPolicyResponseArgs) ToClusterUpgradeDeltaHealthPolicyResponsePtrOutputWithContext(ctx context.Context) ClusterUpgradeDeltaHealthPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradeDeltaHealthPolicyResponseOutput).ToClusterUpgradeDeltaHealthPolicyResponsePtrOutputWithContext(ctx)
}

// ClusterUpgradeDeltaHealthPolicyResponsePtrInput is an input type that accepts ClusterUpgradeDeltaHealthPolicyResponseArgs, ClusterUpgradeDeltaHealthPolicyResponsePtr and ClusterUpgradeDeltaHealthPolicyResponsePtrOutput values.
// You can construct a concrete instance of `ClusterUpgradeDeltaHealthPolicyResponsePtrInput` via:
//
//          ClusterUpgradeDeltaHealthPolicyResponseArgs{...}
//
//  or:
//
//          nil
type ClusterUpgradeDeltaHealthPolicyResponsePtrInput interface {
	pulumi.Input

	ToClusterUpgradeDeltaHealthPolicyResponsePtrOutput() ClusterUpgradeDeltaHealthPolicyResponsePtrOutput
	ToClusterUpgradeDeltaHealthPolicyResponsePtrOutputWithContext(context.Context) ClusterUpgradeDeltaHealthPolicyResponsePtrOutput
}

type clusterUpgradeDeltaHealthPolicyResponsePtrType ClusterUpgradeDeltaHealthPolicyResponseArgs

func ClusterUpgradeDeltaHealthPolicyResponsePtr(v *ClusterUpgradeDeltaHealthPolicyResponseArgs) ClusterUpgradeDeltaHealthPolicyResponsePtrInput {
	return (*clusterUpgradeDeltaHealthPolicyResponsePtrType)(v)
}

func (*clusterUpgradeDeltaHealthPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradeDeltaHealthPolicyResponse)(nil)).Elem()
}

func (i *clusterUpgradeDeltaHealthPolicyResponsePtrType) ToClusterUpgradeDeltaHealthPolicyResponsePtrOutput() ClusterUpgradeDeltaHealthPolicyResponsePtrOutput {
	return i.ToClusterUpgradeDeltaHealthPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *clusterUpgradeDeltaHealthPolicyResponsePtrType) ToClusterUpgradeDeltaHealthPolicyResponsePtrOutputWithContext(ctx context.Context) ClusterUpgradeDeltaHealthPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradeDeltaHealthPolicyResponsePtrOutput)
}

// Describes the delta health policies for the cluster upgrade.
type ClusterUpgradeDeltaHealthPolicyResponseOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeDeltaHealthPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeDeltaHealthPolicyResponse)(nil)).Elem()
}

func (o ClusterUpgradeDeltaHealthPolicyResponseOutput) ToClusterUpgradeDeltaHealthPolicyResponseOutput() ClusterUpgradeDeltaHealthPolicyResponseOutput {
	return o
}

func (o ClusterUpgradeDeltaHealthPolicyResponseOutput) ToClusterUpgradeDeltaHealthPolicyResponseOutputWithContext(ctx context.Context) ClusterUpgradeDeltaHealthPolicyResponseOutput {
	return o
}

func (o ClusterUpgradeDeltaHealthPolicyResponseOutput) ToClusterUpgradeDeltaHealthPolicyResponsePtrOutput() ClusterUpgradeDeltaHealthPolicyResponsePtrOutput {
	return o.ToClusterUpgradeDeltaHealthPolicyResponsePtrOutputWithContext(context.Background())
}

func (o ClusterUpgradeDeltaHealthPolicyResponseOutput) ToClusterUpgradeDeltaHealthPolicyResponsePtrOutputWithContext(ctx context.Context) ClusterUpgradeDeltaHealthPolicyResponsePtrOutput {
	return o.ApplyT(func(v ClusterUpgradeDeltaHealthPolicyResponse) *ClusterUpgradeDeltaHealthPolicyResponse {
		return &v
	}).(ClusterUpgradeDeltaHealthPolicyResponsePtrOutput)
}

// Defines the application delta health policy map used to evaluate the health of an application or one of its child entities when upgrading the cluster.
func (o ClusterUpgradeDeltaHealthPolicyResponseOutput) ApplicationDeltaHealthPolicies() ApplicationDeltaHealthPolicyMapResponsePtrOutput {
	return o.ApplyT(func(v ClusterUpgradeDeltaHealthPolicyResponse) *ApplicationDeltaHealthPolicyMapResponse {
		return v.ApplicationDeltaHealthPolicies
	}).(ApplicationDeltaHealthPolicyMapResponsePtrOutput)
}

// The maximum allowed percentage of applications health degradation allowed during cluster upgrades.
// The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.
func (o ClusterUpgradeDeltaHealthPolicyResponseOutput) MaxPercentDeltaUnhealthyApplications() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterUpgradeDeltaHealthPolicyResponse) int { return v.MaxPercentDeltaUnhealthyApplications }).(pulumi.IntOutput)
}

// The maximum allowed percentage of nodes health degradation allowed during cluster upgrades.
// The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
func (o ClusterUpgradeDeltaHealthPolicyResponseOutput) MaxPercentDeltaUnhealthyNodes() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterUpgradeDeltaHealthPolicyResponse) int { return v.MaxPercentDeltaUnhealthyNodes }).(pulumi.IntOutput)
}

// The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades.
// The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits.
func (o ClusterUpgradeDeltaHealthPolicyResponseOutput) MaxPercentUpgradeDomainDeltaUnhealthyNodes() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterUpgradeDeltaHealthPolicyResponse) int {
		return v.MaxPercentUpgradeDomainDeltaUnhealthyNodes
	}).(pulumi.IntOutput)
}

type ClusterUpgradeDeltaHealthPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeDeltaHealthPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradeDeltaHealthPolicyResponse)(nil)).Elem()
}

func (o ClusterUpgradeDeltaHealthPolicyResponsePtrOutput) ToClusterUpgradeDeltaHealthPolicyResponsePtrOutput() ClusterUpgradeDeltaHealthPolicyResponsePtrOutput {
	return o
}

func (o ClusterUpgradeDeltaHealthPolicyResponsePtrOutput) ToClusterUpgradeDeltaHealthPolicyResponsePtrOutputWithContext(ctx context.Context) ClusterUpgradeDeltaHealthPolicyResponsePtrOutput {
	return o
}

func (o ClusterUpgradeDeltaHealthPolicyResponsePtrOutput) Elem() ClusterUpgradeDeltaHealthPolicyResponseOutput {
	return o.ApplyT(func(v *ClusterUpgradeDeltaHealthPolicyResponse) ClusterUpgradeDeltaHealthPolicyResponse { return *v }).(ClusterUpgradeDeltaHealthPolicyResponseOutput)
}

// Defines the application delta health policy map used to evaluate the health of an application or one of its child entities when upgrading the cluster.
func (o ClusterUpgradeDeltaHealthPolicyResponsePtrOutput) ApplicationDeltaHealthPolicies() ApplicationDeltaHealthPolicyMapResponsePtrOutput {
	return o.ApplyT(func(v *ClusterUpgradeDeltaHealthPolicyResponse) *ApplicationDeltaHealthPolicyMapResponse {
		if v == nil {
			return nil
		}
		return v.ApplicationDeltaHealthPolicies
	}).(ApplicationDeltaHealthPolicyMapResponsePtrOutput)
}

// The maximum allowed percentage of applications health degradation allowed during cluster upgrades.
// The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.
func (o ClusterUpgradeDeltaHealthPolicyResponsePtrOutput) MaxPercentDeltaUnhealthyApplications() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradeDeltaHealthPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxPercentDeltaUnhealthyApplications
	}).(pulumi.IntPtrOutput)
}

// The maximum allowed percentage of nodes health degradation allowed during cluster upgrades.
// The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.
func (o ClusterUpgradeDeltaHealthPolicyResponsePtrOutput) MaxPercentDeltaUnhealthyNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradeDeltaHealthPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxPercentDeltaUnhealthyNodes
	}).(pulumi.IntPtrOutput)
}

// The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades.
// The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation.
// The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits.
func (o ClusterUpgradeDeltaHealthPolicyResponsePtrOutput) MaxPercentUpgradeDomainDeltaUnhealthyNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradeDeltaHealthPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxPercentUpgradeDomainDeltaUnhealthyNodes
	}).(pulumi.IntPtrOutput)
}

// Describes the policy used when upgrading the cluster.
type ClusterUpgradePolicy struct {
	// The cluster delta health policy used when upgrading the cluster.
	DeltaHealthPolicy *ClusterUpgradeDeltaHealthPolicy `pulumi:"deltaHealthPolicy"`
	// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
	ForceRestart *bool `pulumi:"forceRestart"`
	// The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	HealthCheckRetryTimeout string `pulumi:"healthCheckRetryTimeout"`
	// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	HealthCheckStableDuration string `pulumi:"healthCheckStableDuration"`
	// The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	HealthCheckWaitDuration string `pulumi:"healthCheckWaitDuration"`
	// The cluster health policy used when upgrading the cluster.
	HealthPolicy ClusterHealthPolicy `pulumi:"healthPolicy"`
	// The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	UpgradeDomainTimeout string `pulumi:"upgradeDomainTimeout"`
	// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	UpgradeReplicaSetCheckTimeout string `pulumi:"upgradeReplicaSetCheckTimeout"`
	// The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	UpgradeTimeout string `pulumi:"upgradeTimeout"`
}

// ClusterUpgradePolicyInput is an input type that accepts ClusterUpgradePolicyArgs and ClusterUpgradePolicyOutput values.
// You can construct a concrete instance of `ClusterUpgradePolicyInput` via:
//
//          ClusterUpgradePolicyArgs{...}
type ClusterUpgradePolicyInput interface {
	pulumi.Input

	ToClusterUpgradePolicyOutput() ClusterUpgradePolicyOutput
	ToClusterUpgradePolicyOutputWithContext(context.Context) ClusterUpgradePolicyOutput
}

// Describes the policy used when upgrading the cluster.
type ClusterUpgradePolicyArgs struct {
	// The cluster delta health policy used when upgrading the cluster.
	DeltaHealthPolicy ClusterUpgradeDeltaHealthPolicyPtrInput `pulumi:"deltaHealthPolicy"`
	// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
	ForceRestart pulumi.BoolPtrInput `pulumi:"forceRestart"`
	// The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	HealthCheckRetryTimeout pulumi.StringInput `pulumi:"healthCheckRetryTimeout"`
	// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	HealthCheckStableDuration pulumi.StringInput `pulumi:"healthCheckStableDuration"`
	// The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	HealthCheckWaitDuration pulumi.StringInput `pulumi:"healthCheckWaitDuration"`
	// The cluster health policy used when upgrading the cluster.
	HealthPolicy ClusterHealthPolicyInput `pulumi:"healthPolicy"`
	// The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	UpgradeDomainTimeout pulumi.StringInput `pulumi:"upgradeDomainTimeout"`
	// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	UpgradeReplicaSetCheckTimeout pulumi.StringInput `pulumi:"upgradeReplicaSetCheckTimeout"`
	// The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	UpgradeTimeout pulumi.StringInput `pulumi:"upgradeTimeout"`
}

func (ClusterUpgradePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradePolicy)(nil)).Elem()
}

func (i ClusterUpgradePolicyArgs) ToClusterUpgradePolicyOutput() ClusterUpgradePolicyOutput {
	return i.ToClusterUpgradePolicyOutputWithContext(context.Background())
}

func (i ClusterUpgradePolicyArgs) ToClusterUpgradePolicyOutputWithContext(ctx context.Context) ClusterUpgradePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePolicyOutput)
}

func (i ClusterUpgradePolicyArgs) ToClusterUpgradePolicyPtrOutput() ClusterUpgradePolicyPtrOutput {
	return i.ToClusterUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i ClusterUpgradePolicyArgs) ToClusterUpgradePolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePolicyOutput).ToClusterUpgradePolicyPtrOutputWithContext(ctx)
}

// ClusterUpgradePolicyPtrInput is an input type that accepts ClusterUpgradePolicyArgs, ClusterUpgradePolicyPtr and ClusterUpgradePolicyPtrOutput values.
// You can construct a concrete instance of `ClusterUpgradePolicyPtrInput` via:
//
//          ClusterUpgradePolicyArgs{...}
//
//  or:
//
//          nil
type ClusterUpgradePolicyPtrInput interface {
	pulumi.Input

	ToClusterUpgradePolicyPtrOutput() ClusterUpgradePolicyPtrOutput
	ToClusterUpgradePolicyPtrOutputWithContext(context.Context) ClusterUpgradePolicyPtrOutput
}

type clusterUpgradePolicyPtrType ClusterUpgradePolicyArgs

func ClusterUpgradePolicyPtr(v *ClusterUpgradePolicyArgs) ClusterUpgradePolicyPtrInput {
	return (*clusterUpgradePolicyPtrType)(v)
}

func (*clusterUpgradePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradePolicy)(nil)).Elem()
}

func (i *clusterUpgradePolicyPtrType) ToClusterUpgradePolicyPtrOutput() ClusterUpgradePolicyPtrOutput {
	return i.ToClusterUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i *clusterUpgradePolicyPtrType) ToClusterUpgradePolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePolicyPtrOutput)
}

// Describes the policy used when upgrading the cluster.
type ClusterUpgradePolicyOutput struct{ *pulumi.OutputState }

func (ClusterUpgradePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradePolicy)(nil)).Elem()
}

func (o ClusterUpgradePolicyOutput) ToClusterUpgradePolicyOutput() ClusterUpgradePolicyOutput {
	return o
}

func (o ClusterUpgradePolicyOutput) ToClusterUpgradePolicyOutputWithContext(ctx context.Context) ClusterUpgradePolicyOutput {
	return o
}

func (o ClusterUpgradePolicyOutput) ToClusterUpgradePolicyPtrOutput() ClusterUpgradePolicyPtrOutput {
	return o.ToClusterUpgradePolicyPtrOutputWithContext(context.Background())
}

func (o ClusterUpgradePolicyOutput) ToClusterUpgradePolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) *ClusterUpgradePolicy {
		return &v
	}).(ClusterUpgradePolicyPtrOutput)
}

// The cluster delta health policy used when upgrading the cluster.
func (o ClusterUpgradePolicyOutput) DeltaHealthPolicy() ClusterUpgradeDeltaHealthPolicyPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) *ClusterUpgradeDeltaHealthPolicy { return v.DeltaHealthPolicy }).(ClusterUpgradeDeltaHealthPolicyPtrOutput)
}

// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
func (o ClusterUpgradePolicyOutput) ForceRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) *bool { return v.ForceRestart }).(pulumi.BoolPtrOutput)
}

// The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyOutput) HealthCheckRetryTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) string { return v.HealthCheckRetryTimeout }).(pulumi.StringOutput)
}

// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyOutput) HealthCheckStableDuration() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) string { return v.HealthCheckStableDuration }).(pulumi.StringOutput)
}

// The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyOutput) HealthCheckWaitDuration() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) string { return v.HealthCheckWaitDuration }).(pulumi.StringOutput)
}

// The cluster health policy used when upgrading the cluster.
func (o ClusterUpgradePolicyOutput) HealthPolicy() ClusterHealthPolicyOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) ClusterHealthPolicy { return v.HealthPolicy }).(ClusterHealthPolicyOutput)
}

// The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyOutput) UpgradeDomainTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) string { return v.UpgradeDomainTimeout }).(pulumi.StringOutput)
}

// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyOutput) UpgradeReplicaSetCheckTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) string { return v.UpgradeReplicaSetCheckTimeout }).(pulumi.StringOutput)
}

// The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyOutput) UpgradeTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) string { return v.UpgradeTimeout }).(pulumi.StringOutput)
}

type ClusterUpgradePolicyPtrOutput struct{ *pulumi.OutputState }

func (ClusterUpgradePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradePolicy)(nil)).Elem()
}

func (o ClusterUpgradePolicyPtrOutput) ToClusterUpgradePolicyPtrOutput() ClusterUpgradePolicyPtrOutput {
	return o
}

func (o ClusterUpgradePolicyPtrOutput) ToClusterUpgradePolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyPtrOutput {
	return o
}

func (o ClusterUpgradePolicyPtrOutput) Elem() ClusterUpgradePolicyOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) ClusterUpgradePolicy { return *v }).(ClusterUpgradePolicyOutput)
}

// The cluster delta health policy used when upgrading the cluster.
func (o ClusterUpgradePolicyPtrOutput) DeltaHealthPolicy() ClusterUpgradeDeltaHealthPolicyPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *ClusterUpgradeDeltaHealthPolicy {
		if v == nil {
			return nil
		}
		return v.DeltaHealthPolicy
	}).(ClusterUpgradeDeltaHealthPolicyPtrOutput)
}

// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
func (o ClusterUpgradePolicyPtrOutput) ForceRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *bool {
		if v == nil {
			return nil
		}
		return v.ForceRestart
	}).(pulumi.BoolPtrOutput)
}

// The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyPtrOutput) HealthCheckRetryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *string {
		if v == nil {
			return nil
		}
		return &v.HealthCheckRetryTimeout
	}).(pulumi.StringPtrOutput)
}

// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyPtrOutput) HealthCheckStableDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *string {
		if v == nil {
			return nil
		}
		return &v.HealthCheckStableDuration
	}).(pulumi.StringPtrOutput)
}

// The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyPtrOutput) HealthCheckWaitDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *string {
		if v == nil {
			return nil
		}
		return &v.HealthCheckWaitDuration
	}).(pulumi.StringPtrOutput)
}

// The cluster health policy used when upgrading the cluster.
func (o ClusterUpgradePolicyPtrOutput) HealthPolicy() ClusterHealthPolicyPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *ClusterHealthPolicy {
		if v == nil {
			return nil
		}
		return &v.HealthPolicy
	}).(ClusterHealthPolicyPtrOutput)
}

// The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyPtrOutput) UpgradeDomainTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *string {
		if v == nil {
			return nil
		}
		return &v.UpgradeDomainTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyPtrOutput) UpgradeReplicaSetCheckTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *string {
		if v == nil {
			return nil
		}
		return &v.UpgradeReplicaSetCheckTimeout
	}).(pulumi.StringPtrOutput)
}

// The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyPtrOutput) UpgradeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *string {
		if v == nil {
			return nil
		}
		return &v.UpgradeTimeout
	}).(pulumi.StringPtrOutput)
}

// Describes the policy used when upgrading the cluster.
type ClusterUpgradePolicyResponse struct {
	// The cluster delta health policy used when upgrading the cluster.
	DeltaHealthPolicy *ClusterUpgradeDeltaHealthPolicyResponse `pulumi:"deltaHealthPolicy"`
	// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
	ForceRestart *bool `pulumi:"forceRestart"`
	// The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	HealthCheckRetryTimeout string `pulumi:"healthCheckRetryTimeout"`
	// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	HealthCheckStableDuration string `pulumi:"healthCheckStableDuration"`
	// The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	HealthCheckWaitDuration string `pulumi:"healthCheckWaitDuration"`
	// The cluster health policy used when upgrading the cluster.
	HealthPolicy ClusterHealthPolicyResponse `pulumi:"healthPolicy"`
	// The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	UpgradeDomainTimeout string `pulumi:"upgradeDomainTimeout"`
	// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	UpgradeReplicaSetCheckTimeout string `pulumi:"upgradeReplicaSetCheckTimeout"`
	// The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	UpgradeTimeout string `pulumi:"upgradeTimeout"`
}

// ClusterUpgradePolicyResponseInput is an input type that accepts ClusterUpgradePolicyResponseArgs and ClusterUpgradePolicyResponseOutput values.
// You can construct a concrete instance of `ClusterUpgradePolicyResponseInput` via:
//
//          ClusterUpgradePolicyResponseArgs{...}
type ClusterUpgradePolicyResponseInput interface {
	pulumi.Input

	ToClusterUpgradePolicyResponseOutput() ClusterUpgradePolicyResponseOutput
	ToClusterUpgradePolicyResponseOutputWithContext(context.Context) ClusterUpgradePolicyResponseOutput
}

// Describes the policy used when upgrading the cluster.
type ClusterUpgradePolicyResponseArgs struct {
	// The cluster delta health policy used when upgrading the cluster.
	DeltaHealthPolicy ClusterUpgradeDeltaHealthPolicyResponsePtrInput `pulumi:"deltaHealthPolicy"`
	// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
	ForceRestart pulumi.BoolPtrInput `pulumi:"forceRestart"`
	// The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	HealthCheckRetryTimeout pulumi.StringInput `pulumi:"healthCheckRetryTimeout"`
	// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	HealthCheckStableDuration pulumi.StringInput `pulumi:"healthCheckStableDuration"`
	// The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	HealthCheckWaitDuration pulumi.StringInput `pulumi:"healthCheckWaitDuration"`
	// The cluster health policy used when upgrading the cluster.
	HealthPolicy ClusterHealthPolicyResponseInput `pulumi:"healthPolicy"`
	// The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	UpgradeDomainTimeout pulumi.StringInput `pulumi:"upgradeDomainTimeout"`
	// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	UpgradeReplicaSetCheckTimeout pulumi.StringInput `pulumi:"upgradeReplicaSetCheckTimeout"`
	// The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
	UpgradeTimeout pulumi.StringInput `pulumi:"upgradeTimeout"`
}

func (ClusterUpgradePolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradePolicyResponse)(nil)).Elem()
}

func (i ClusterUpgradePolicyResponseArgs) ToClusterUpgradePolicyResponseOutput() ClusterUpgradePolicyResponseOutput {
	return i.ToClusterUpgradePolicyResponseOutputWithContext(context.Background())
}

func (i ClusterUpgradePolicyResponseArgs) ToClusterUpgradePolicyResponseOutputWithContext(ctx context.Context) ClusterUpgradePolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePolicyResponseOutput)
}

func (i ClusterUpgradePolicyResponseArgs) ToClusterUpgradePolicyResponsePtrOutput() ClusterUpgradePolicyResponsePtrOutput {
	return i.ToClusterUpgradePolicyResponsePtrOutputWithContext(context.Background())
}

func (i ClusterUpgradePolicyResponseArgs) ToClusterUpgradePolicyResponsePtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePolicyResponseOutput).ToClusterUpgradePolicyResponsePtrOutputWithContext(ctx)
}

// ClusterUpgradePolicyResponsePtrInput is an input type that accepts ClusterUpgradePolicyResponseArgs, ClusterUpgradePolicyResponsePtr and ClusterUpgradePolicyResponsePtrOutput values.
// You can construct a concrete instance of `ClusterUpgradePolicyResponsePtrInput` via:
//
//          ClusterUpgradePolicyResponseArgs{...}
//
//  or:
//
//          nil
type ClusterUpgradePolicyResponsePtrInput interface {
	pulumi.Input

	ToClusterUpgradePolicyResponsePtrOutput() ClusterUpgradePolicyResponsePtrOutput
	ToClusterUpgradePolicyResponsePtrOutputWithContext(context.Context) ClusterUpgradePolicyResponsePtrOutput
}

type clusterUpgradePolicyResponsePtrType ClusterUpgradePolicyResponseArgs

func ClusterUpgradePolicyResponsePtr(v *ClusterUpgradePolicyResponseArgs) ClusterUpgradePolicyResponsePtrInput {
	return (*clusterUpgradePolicyResponsePtrType)(v)
}

func (*clusterUpgradePolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradePolicyResponse)(nil)).Elem()
}

func (i *clusterUpgradePolicyResponsePtrType) ToClusterUpgradePolicyResponsePtrOutput() ClusterUpgradePolicyResponsePtrOutput {
	return i.ToClusterUpgradePolicyResponsePtrOutputWithContext(context.Background())
}

func (i *clusterUpgradePolicyResponsePtrType) ToClusterUpgradePolicyResponsePtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePolicyResponsePtrOutput)
}

// Describes the policy used when upgrading the cluster.
type ClusterUpgradePolicyResponseOutput struct{ *pulumi.OutputState }

func (ClusterUpgradePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradePolicyResponse)(nil)).Elem()
}

func (o ClusterUpgradePolicyResponseOutput) ToClusterUpgradePolicyResponseOutput() ClusterUpgradePolicyResponseOutput {
	return o
}

func (o ClusterUpgradePolicyResponseOutput) ToClusterUpgradePolicyResponseOutputWithContext(ctx context.Context) ClusterUpgradePolicyResponseOutput {
	return o
}

func (o ClusterUpgradePolicyResponseOutput) ToClusterUpgradePolicyResponsePtrOutput() ClusterUpgradePolicyResponsePtrOutput {
	return o.ToClusterUpgradePolicyResponsePtrOutputWithContext(context.Background())
}

func (o ClusterUpgradePolicyResponseOutput) ToClusterUpgradePolicyResponsePtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyResponsePtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyResponse) *ClusterUpgradePolicyResponse {
		return &v
	}).(ClusterUpgradePolicyResponsePtrOutput)
}

// The cluster delta health policy used when upgrading the cluster.
func (o ClusterUpgradePolicyResponseOutput) DeltaHealthPolicy() ClusterUpgradeDeltaHealthPolicyResponsePtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyResponse) *ClusterUpgradeDeltaHealthPolicyResponse {
		return v.DeltaHealthPolicy
	}).(ClusterUpgradeDeltaHealthPolicyResponsePtrOutput)
}

// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
func (o ClusterUpgradePolicyResponseOutput) ForceRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyResponse) *bool { return v.ForceRestart }).(pulumi.BoolPtrOutput)
}

// The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponseOutput) HealthCheckRetryTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyResponse) string { return v.HealthCheckRetryTimeout }).(pulumi.StringOutput)
}

// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponseOutput) HealthCheckStableDuration() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyResponse) string { return v.HealthCheckStableDuration }).(pulumi.StringOutput)
}

// The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponseOutput) HealthCheckWaitDuration() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyResponse) string { return v.HealthCheckWaitDuration }).(pulumi.StringOutput)
}

// The cluster health policy used when upgrading the cluster.
func (o ClusterUpgradePolicyResponseOutput) HealthPolicy() ClusterHealthPolicyResponseOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyResponse) ClusterHealthPolicyResponse { return v.HealthPolicy }).(ClusterHealthPolicyResponseOutput)
}

// The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponseOutput) UpgradeDomainTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyResponse) string { return v.UpgradeDomainTimeout }).(pulumi.StringOutput)
}

// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponseOutput) UpgradeReplicaSetCheckTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyResponse) string { return v.UpgradeReplicaSetCheckTimeout }).(pulumi.StringOutput)
}

// The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponseOutput) UpgradeTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyResponse) string { return v.UpgradeTimeout }).(pulumi.StringOutput)
}

type ClusterUpgradePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterUpgradePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradePolicyResponse)(nil)).Elem()
}

func (o ClusterUpgradePolicyResponsePtrOutput) ToClusterUpgradePolicyResponsePtrOutput() ClusterUpgradePolicyResponsePtrOutput {
	return o
}

func (o ClusterUpgradePolicyResponsePtrOutput) ToClusterUpgradePolicyResponsePtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyResponsePtrOutput {
	return o
}

func (o ClusterUpgradePolicyResponsePtrOutput) Elem() ClusterUpgradePolicyResponseOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyResponse) ClusterUpgradePolicyResponse { return *v }).(ClusterUpgradePolicyResponseOutput)
}

// The cluster delta health policy used when upgrading the cluster.
func (o ClusterUpgradePolicyResponsePtrOutput) DeltaHealthPolicy() ClusterUpgradeDeltaHealthPolicyResponsePtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyResponse) *ClusterUpgradeDeltaHealthPolicyResponse {
		if v == nil {
			return nil
		}
		return v.DeltaHealthPolicy
	}).(ClusterUpgradeDeltaHealthPolicyResponsePtrOutput)
}

// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
func (o ClusterUpgradePolicyResponsePtrOutput) ForceRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ForceRestart
	}).(pulumi.BoolPtrOutput)
}

// The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponsePtrOutput) HealthCheckRetryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.HealthCheckRetryTimeout
	}).(pulumi.StringPtrOutput)
}

// The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponsePtrOutput) HealthCheckStableDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.HealthCheckStableDuration
	}).(pulumi.StringPtrOutput)
}

// The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponsePtrOutput) HealthCheckWaitDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.HealthCheckWaitDuration
	}).(pulumi.StringPtrOutput)
}

// The cluster health policy used when upgrading the cluster.
func (o ClusterUpgradePolicyResponsePtrOutput) HealthPolicy() ClusterHealthPolicyResponsePtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyResponse) *ClusterHealthPolicyResponse {
		if v == nil {
			return nil
		}
		return &v.HealthPolicy
	}).(ClusterHealthPolicyResponsePtrOutput)
}

// The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponsePtrOutput) UpgradeDomainTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpgradeDomainTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponsePtrOutput) UpgradeReplicaSetCheckTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpgradeReplicaSetCheckTimeout
	}).(pulumi.StringPtrOutput)
}

// The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
func (o ClusterUpgradePolicyResponsePtrOutput) UpgradeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpgradeTimeout
	}).(pulumi.StringPtrOutput)
}

// The detail of the Service Fabric runtime version result
type ClusterVersionDetails struct {
	// The Service Fabric runtime version of the cluster.
	CodeVersion *string `pulumi:"codeVersion"`
	// Indicates if this version is for Windows or Linux operating system.
	Environment *string `pulumi:"environment"`
	// The date of expiry of support of the version.
	SupportExpiryUtc *string `pulumi:"supportExpiryUtc"`
}

// ClusterVersionDetailsInput is an input type that accepts ClusterVersionDetailsArgs and ClusterVersionDetailsOutput values.
// You can construct a concrete instance of `ClusterVersionDetailsInput` via:
//
//          ClusterVersionDetailsArgs{...}
type ClusterVersionDetailsInput interface {
	pulumi.Input

	ToClusterVersionDetailsOutput() ClusterVersionDetailsOutput
	ToClusterVersionDetailsOutputWithContext(context.Context) ClusterVersionDetailsOutput
}

// The detail of the Service Fabric runtime version result
type ClusterVersionDetailsArgs struct {
	// The Service Fabric runtime version of the cluster.
	CodeVersion pulumi.StringPtrInput `pulumi:"codeVersion"`
	// Indicates if this version is for Windows or Linux operating system.
	Environment pulumi.StringPtrInput `pulumi:"environment"`
	// The date of expiry of support of the version.
	SupportExpiryUtc pulumi.StringPtrInput `pulumi:"supportExpiryUtc"`
}

func (ClusterVersionDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVersionDetails)(nil)).Elem()
}

func (i ClusterVersionDetailsArgs) ToClusterVersionDetailsOutput() ClusterVersionDetailsOutput {
	return i.ToClusterVersionDetailsOutputWithContext(context.Background())
}

func (i ClusterVersionDetailsArgs) ToClusterVersionDetailsOutputWithContext(ctx context.Context) ClusterVersionDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVersionDetailsOutput)
}

// The detail of the Service Fabric runtime version result
type ClusterVersionDetailsOutput struct{ *pulumi.OutputState }

func (ClusterVersionDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVersionDetails)(nil)).Elem()
}

func (o ClusterVersionDetailsOutput) ToClusterVersionDetailsOutput() ClusterVersionDetailsOutput {
	return o
}

func (o ClusterVersionDetailsOutput) ToClusterVersionDetailsOutputWithContext(ctx context.Context) ClusterVersionDetailsOutput {
	return o
}

// The Service Fabric runtime version of the cluster.
func (o ClusterVersionDetailsOutput) CodeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterVersionDetails) *string { return v.CodeVersion }).(pulumi.StringPtrOutput)
}

// Indicates if this version is for Windows or Linux operating system.
func (o ClusterVersionDetailsOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterVersionDetails) *string { return v.Environment }).(pulumi.StringPtrOutput)
}

// The date of expiry of support of the version.
func (o ClusterVersionDetailsOutput) SupportExpiryUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterVersionDetails) *string { return v.SupportExpiryUtc }).(pulumi.StringPtrOutput)
}

// The detail of the Service Fabric runtime version result
type ClusterVersionDetailsResponse struct {
	// The Service Fabric runtime version of the cluster.
	CodeVersion *string `pulumi:"codeVersion"`
	// Indicates if this version is for Windows or Linux operating system.
	Environment *string `pulumi:"environment"`
	// The date of expiry of support of the version.
	SupportExpiryUtc *string `pulumi:"supportExpiryUtc"`
}

// ClusterVersionDetailsResponseInput is an input type that accepts ClusterVersionDetailsResponseArgs and ClusterVersionDetailsResponseOutput values.
// You can construct a concrete instance of `ClusterVersionDetailsResponseInput` via:
//
//          ClusterVersionDetailsResponseArgs{...}
type ClusterVersionDetailsResponseInput interface {
	pulumi.Input

	ToClusterVersionDetailsResponseOutput() ClusterVersionDetailsResponseOutput
	ToClusterVersionDetailsResponseOutputWithContext(context.Context) ClusterVersionDetailsResponseOutput
}

// The detail of the Service Fabric runtime version result
type ClusterVersionDetailsResponseArgs struct {
	// The Service Fabric runtime version of the cluster.
	CodeVersion pulumi.StringPtrInput `pulumi:"codeVersion"`
	// Indicates if this version is for Windows or Linux operating system.
	Environment pulumi.StringPtrInput `pulumi:"environment"`
	// The date of expiry of support of the version.
	SupportExpiryUtc pulumi.StringPtrInput `pulumi:"supportExpiryUtc"`
}

func (ClusterVersionDetailsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVersionDetailsResponse)(nil)).Elem()
}

func (i ClusterVersionDetailsResponseArgs) ToClusterVersionDetailsResponseOutput() ClusterVersionDetailsResponseOutput {
	return i.ToClusterVersionDetailsResponseOutputWithContext(context.Background())
}

func (i ClusterVersionDetailsResponseArgs) ToClusterVersionDetailsResponseOutputWithContext(ctx context.Context) ClusterVersionDetailsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVersionDetailsResponseOutput)
}

// ClusterVersionDetailsResponseArrayInput is an input type that accepts ClusterVersionDetailsResponseArray and ClusterVersionDetailsResponseArrayOutput values.
// You can construct a concrete instance of `ClusterVersionDetailsResponseArrayInput` via:
//
//          ClusterVersionDetailsResponseArray{ ClusterVersionDetailsResponseArgs{...} }
type ClusterVersionDetailsResponseArrayInput interface {
	pulumi.Input

	ToClusterVersionDetailsResponseArrayOutput() ClusterVersionDetailsResponseArrayOutput
	ToClusterVersionDetailsResponseArrayOutputWithContext(context.Context) ClusterVersionDetailsResponseArrayOutput
}

type ClusterVersionDetailsResponseArray []ClusterVersionDetailsResponseInput

func (ClusterVersionDetailsResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterVersionDetailsResponse)(nil)).Elem()
}

func (i ClusterVersionDetailsResponseArray) ToClusterVersionDetailsResponseArrayOutput() ClusterVersionDetailsResponseArrayOutput {
	return i.ToClusterVersionDetailsResponseArrayOutputWithContext(context.Background())
}

func (i ClusterVersionDetailsResponseArray) ToClusterVersionDetailsResponseArrayOutputWithContext(ctx context.Context) ClusterVersionDetailsResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVersionDetailsResponseArrayOutput)
}

// The detail of the Service Fabric runtime version result
type ClusterVersionDetailsResponseOutput struct{ *pulumi.OutputState }

func (ClusterVersionDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVersionDetailsResponse)(nil)).Elem()
}

func (o ClusterVersionDetailsResponseOutput) ToClusterVersionDetailsResponseOutput() ClusterVersionDetailsResponseOutput {
	return o
}

func (o ClusterVersionDetailsResponseOutput) ToClusterVersionDetailsResponseOutputWithContext(ctx context.Context) ClusterVersionDetailsResponseOutput {
	return o
}

// The Service Fabric runtime version of the cluster.
func (o ClusterVersionDetailsResponseOutput) CodeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterVersionDetailsResponse) *string { return v.CodeVersion }).(pulumi.StringPtrOutput)
}

// Indicates if this version is for Windows or Linux operating system.
func (o ClusterVersionDetailsResponseOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterVersionDetailsResponse) *string { return v.Environment }).(pulumi.StringPtrOutput)
}

// The date of expiry of support of the version.
func (o ClusterVersionDetailsResponseOutput) SupportExpiryUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterVersionDetailsResponse) *string { return v.SupportExpiryUtc }).(pulumi.StringPtrOutput)
}

type ClusterVersionDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (ClusterVersionDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterVersionDetailsResponse)(nil)).Elem()
}

func (o ClusterVersionDetailsResponseArrayOutput) ToClusterVersionDetailsResponseArrayOutput() ClusterVersionDetailsResponseArrayOutput {
	return o
}

func (o ClusterVersionDetailsResponseArrayOutput) ToClusterVersionDetailsResponseArrayOutputWithContext(ctx context.Context) ClusterVersionDetailsResponseArrayOutput {
	return o
}

func (o ClusterVersionDetailsResponseArrayOutput) Index(i pulumi.IntInput) ClusterVersionDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterVersionDetailsResponse {
		return vs[0].([]ClusterVersionDetailsResponse)[vs[1].(int)]
	}).(ClusterVersionDetailsResponseOutput)
}

// A list that describes the correlation of the service with other services.
type CorrelationSchemeList struct {
}

// CorrelationSchemeListInput is an input type that accepts CorrelationSchemeListArgs and CorrelationSchemeListOutput values.
// You can construct a concrete instance of `CorrelationSchemeListInput` via:
//
//          CorrelationSchemeListArgs{...}
type CorrelationSchemeListInput interface {
	pulumi.Input

	ToCorrelationSchemeListOutput() CorrelationSchemeListOutput
	ToCorrelationSchemeListOutputWithContext(context.Context) CorrelationSchemeListOutput
}

// A list that describes the correlation of the service with other services.
type CorrelationSchemeListArgs struct {
}

func (CorrelationSchemeListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CorrelationSchemeList)(nil)).Elem()
}

func (i CorrelationSchemeListArgs) ToCorrelationSchemeListOutput() CorrelationSchemeListOutput {
	return i.ToCorrelationSchemeListOutputWithContext(context.Background())
}

func (i CorrelationSchemeListArgs) ToCorrelationSchemeListOutputWithContext(ctx context.Context) CorrelationSchemeListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorrelationSchemeListOutput)
}

func (i CorrelationSchemeListArgs) ToCorrelationSchemeListPtrOutput() CorrelationSchemeListPtrOutput {
	return i.ToCorrelationSchemeListPtrOutputWithContext(context.Background())
}

func (i CorrelationSchemeListArgs) ToCorrelationSchemeListPtrOutputWithContext(ctx context.Context) CorrelationSchemeListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorrelationSchemeListOutput).ToCorrelationSchemeListPtrOutputWithContext(ctx)
}

// CorrelationSchemeListPtrInput is an input type that accepts CorrelationSchemeListArgs, CorrelationSchemeListPtr and CorrelationSchemeListPtrOutput values.
// You can construct a concrete instance of `CorrelationSchemeListPtrInput` via:
//
//          CorrelationSchemeListArgs{...}
//
//  or:
//
//          nil
type CorrelationSchemeListPtrInput interface {
	pulumi.Input

	ToCorrelationSchemeListPtrOutput() CorrelationSchemeListPtrOutput
	ToCorrelationSchemeListPtrOutputWithContext(context.Context) CorrelationSchemeListPtrOutput
}

type correlationSchemeListPtrType CorrelationSchemeListArgs

func CorrelationSchemeListPtr(v *CorrelationSchemeListArgs) CorrelationSchemeListPtrInput {
	return (*correlationSchemeListPtrType)(v)
}

func (*correlationSchemeListPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CorrelationSchemeList)(nil)).Elem()
}

func (i *correlationSchemeListPtrType) ToCorrelationSchemeListPtrOutput() CorrelationSchemeListPtrOutput {
	return i.ToCorrelationSchemeListPtrOutputWithContext(context.Background())
}

func (i *correlationSchemeListPtrType) ToCorrelationSchemeListPtrOutputWithContext(ctx context.Context) CorrelationSchemeListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorrelationSchemeListPtrOutput)
}

// A list that describes the correlation of the service with other services.
type CorrelationSchemeListOutput struct{ *pulumi.OutputState }

func (CorrelationSchemeListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CorrelationSchemeList)(nil)).Elem()
}

func (o CorrelationSchemeListOutput) ToCorrelationSchemeListOutput() CorrelationSchemeListOutput {
	return o
}

func (o CorrelationSchemeListOutput) ToCorrelationSchemeListOutputWithContext(ctx context.Context) CorrelationSchemeListOutput {
	return o
}

func (o CorrelationSchemeListOutput) ToCorrelationSchemeListPtrOutput() CorrelationSchemeListPtrOutput {
	return o.ToCorrelationSchemeListPtrOutputWithContext(context.Background())
}

func (o CorrelationSchemeListOutput) ToCorrelationSchemeListPtrOutputWithContext(ctx context.Context) CorrelationSchemeListPtrOutput {
	return o.ApplyT(func(v CorrelationSchemeList) *CorrelationSchemeList {
		return &v
	}).(CorrelationSchemeListPtrOutput)
}

type CorrelationSchemeListPtrOutput struct{ *pulumi.OutputState }

func (CorrelationSchemeListPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CorrelationSchemeList)(nil)).Elem()
}

func (o CorrelationSchemeListPtrOutput) ToCorrelationSchemeListPtrOutput() CorrelationSchemeListPtrOutput {
	return o
}

func (o CorrelationSchemeListPtrOutput) ToCorrelationSchemeListPtrOutputWithContext(ctx context.Context) CorrelationSchemeListPtrOutput {
	return o
}

func (o CorrelationSchemeListPtrOutput) Elem() CorrelationSchemeListOutput {
	return o.ApplyT(func(v *CorrelationSchemeList) CorrelationSchemeList { return *v }).(CorrelationSchemeListOutput)
}

// A list that describes the correlation of the service with other services.
type CorrelationSchemeListResponse struct {
}

// CorrelationSchemeListResponseInput is an input type that accepts CorrelationSchemeListResponseArgs and CorrelationSchemeListResponseOutput values.
// You can construct a concrete instance of `CorrelationSchemeListResponseInput` via:
//
//          CorrelationSchemeListResponseArgs{...}
type CorrelationSchemeListResponseInput interface {
	pulumi.Input

	ToCorrelationSchemeListResponseOutput() CorrelationSchemeListResponseOutput
	ToCorrelationSchemeListResponseOutputWithContext(context.Context) CorrelationSchemeListResponseOutput
}

// A list that describes the correlation of the service with other services.
type CorrelationSchemeListResponseArgs struct {
}

func (CorrelationSchemeListResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CorrelationSchemeListResponse)(nil)).Elem()
}

func (i CorrelationSchemeListResponseArgs) ToCorrelationSchemeListResponseOutput() CorrelationSchemeListResponseOutput {
	return i.ToCorrelationSchemeListResponseOutputWithContext(context.Background())
}

func (i CorrelationSchemeListResponseArgs) ToCorrelationSchemeListResponseOutputWithContext(ctx context.Context) CorrelationSchemeListResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorrelationSchemeListResponseOutput)
}

func (i CorrelationSchemeListResponseArgs) ToCorrelationSchemeListResponsePtrOutput() CorrelationSchemeListResponsePtrOutput {
	return i.ToCorrelationSchemeListResponsePtrOutputWithContext(context.Background())
}

func (i CorrelationSchemeListResponseArgs) ToCorrelationSchemeListResponsePtrOutputWithContext(ctx context.Context) CorrelationSchemeListResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorrelationSchemeListResponseOutput).ToCorrelationSchemeListResponsePtrOutputWithContext(ctx)
}

// CorrelationSchemeListResponsePtrInput is an input type that accepts CorrelationSchemeListResponseArgs, CorrelationSchemeListResponsePtr and CorrelationSchemeListResponsePtrOutput values.
// You can construct a concrete instance of `CorrelationSchemeListResponsePtrInput` via:
//
//          CorrelationSchemeListResponseArgs{...}
//
//  or:
//
//          nil
type CorrelationSchemeListResponsePtrInput interface {
	pulumi.Input

	ToCorrelationSchemeListResponsePtrOutput() CorrelationSchemeListResponsePtrOutput
	ToCorrelationSchemeListResponsePtrOutputWithContext(context.Context) CorrelationSchemeListResponsePtrOutput
}

type correlationSchemeListResponsePtrType CorrelationSchemeListResponseArgs

func CorrelationSchemeListResponsePtr(v *CorrelationSchemeListResponseArgs) CorrelationSchemeListResponsePtrInput {
	return (*correlationSchemeListResponsePtrType)(v)
}

func (*correlationSchemeListResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CorrelationSchemeListResponse)(nil)).Elem()
}

func (i *correlationSchemeListResponsePtrType) ToCorrelationSchemeListResponsePtrOutput() CorrelationSchemeListResponsePtrOutput {
	return i.ToCorrelationSchemeListResponsePtrOutputWithContext(context.Background())
}

func (i *correlationSchemeListResponsePtrType) ToCorrelationSchemeListResponsePtrOutputWithContext(ctx context.Context) CorrelationSchemeListResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorrelationSchemeListResponsePtrOutput)
}

// A list that describes the correlation of the service with other services.
type CorrelationSchemeListResponseOutput struct{ *pulumi.OutputState }

func (CorrelationSchemeListResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CorrelationSchemeListResponse)(nil)).Elem()
}

func (o CorrelationSchemeListResponseOutput) ToCorrelationSchemeListResponseOutput() CorrelationSchemeListResponseOutput {
	return o
}

func (o CorrelationSchemeListResponseOutput) ToCorrelationSchemeListResponseOutputWithContext(ctx context.Context) CorrelationSchemeListResponseOutput {
	return o
}

func (o CorrelationSchemeListResponseOutput) ToCorrelationSchemeListResponsePtrOutput() CorrelationSchemeListResponsePtrOutput {
	return o.ToCorrelationSchemeListResponsePtrOutputWithContext(context.Background())
}

func (o CorrelationSchemeListResponseOutput) ToCorrelationSchemeListResponsePtrOutputWithContext(ctx context.Context) CorrelationSchemeListResponsePtrOutput {
	return o.ApplyT(func(v CorrelationSchemeListResponse) *CorrelationSchemeListResponse {
		return &v
	}).(CorrelationSchemeListResponsePtrOutput)
}

type CorrelationSchemeListResponsePtrOutput struct{ *pulumi.OutputState }

func (CorrelationSchemeListResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CorrelationSchemeListResponse)(nil)).Elem()
}

func (o CorrelationSchemeListResponsePtrOutput) ToCorrelationSchemeListResponsePtrOutput() CorrelationSchemeListResponsePtrOutput {
	return o
}

func (o CorrelationSchemeListResponsePtrOutput) ToCorrelationSchemeListResponsePtrOutputWithContext(ctx context.Context) CorrelationSchemeListResponsePtrOutput {
	return o
}

func (o CorrelationSchemeListResponsePtrOutput) Elem() CorrelationSchemeListResponseOutput {
	return o.ApplyT(func(v *CorrelationSchemeListResponse) CorrelationSchemeListResponse { return *v }).(CorrelationSchemeListResponseOutput)
}

// The storage account information for storing Service Fabric diagnostic logs.
type DiagnosticsStorageAccountConfig struct {
	// The blob endpoint of the azure storage account.
	BlobEndpoint string `pulumi:"blobEndpoint"`
	// The protected diagnostics storage key name.
	ProtectedAccountKeyName string `pulumi:"protectedAccountKeyName"`
	// The secondary protected diagnostics storage key name. If one of the storage account keys is rotated the cluster will fallback to using the other.
	ProtectedAccountKeyName2 *string `pulumi:"protectedAccountKeyName2"`
	// The queue endpoint of the azure storage account.
	QueueEndpoint string `pulumi:"queueEndpoint"`
	// The Azure storage account name.
	StorageAccountName string `pulumi:"storageAccountName"`
	// The table endpoint of the azure storage account.
	TableEndpoint string `pulumi:"tableEndpoint"`
}

// DiagnosticsStorageAccountConfigInput is an input type that accepts DiagnosticsStorageAccountConfigArgs and DiagnosticsStorageAccountConfigOutput values.
// You can construct a concrete instance of `DiagnosticsStorageAccountConfigInput` via:
//
//          DiagnosticsStorageAccountConfigArgs{...}
type DiagnosticsStorageAccountConfigInput interface {
	pulumi.Input

	ToDiagnosticsStorageAccountConfigOutput() DiagnosticsStorageAccountConfigOutput
	ToDiagnosticsStorageAccountConfigOutputWithContext(context.Context) DiagnosticsStorageAccountConfigOutput
}

// The storage account information for storing Service Fabric diagnostic logs.
type DiagnosticsStorageAccountConfigArgs struct {
	// The blob endpoint of the azure storage account.
	BlobEndpoint pulumi.StringInput `pulumi:"blobEndpoint"`
	// The protected diagnostics storage key name.
	ProtectedAccountKeyName pulumi.StringInput `pulumi:"protectedAccountKeyName"`
	// The secondary protected diagnostics storage key name. If one of the storage account keys is rotated the cluster will fallback to using the other.
	ProtectedAccountKeyName2 pulumi.StringPtrInput `pulumi:"protectedAccountKeyName2"`
	// The queue endpoint of the azure storage account.
	QueueEndpoint pulumi.StringInput `pulumi:"queueEndpoint"`
	// The Azure storage account name.
	StorageAccountName pulumi.StringInput `pulumi:"storageAccountName"`
	// The table endpoint of the azure storage account.
	TableEndpoint pulumi.StringInput `pulumi:"tableEndpoint"`
}

func (DiagnosticsStorageAccountConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsStorageAccountConfig)(nil)).Elem()
}

func (i DiagnosticsStorageAccountConfigArgs) ToDiagnosticsStorageAccountConfigOutput() DiagnosticsStorageAccountConfigOutput {
	return i.ToDiagnosticsStorageAccountConfigOutputWithContext(context.Background())
}

func (i DiagnosticsStorageAccountConfigArgs) ToDiagnosticsStorageAccountConfigOutputWithContext(ctx context.Context) DiagnosticsStorageAccountConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsStorageAccountConfigOutput)
}

func (i DiagnosticsStorageAccountConfigArgs) ToDiagnosticsStorageAccountConfigPtrOutput() DiagnosticsStorageAccountConfigPtrOutput {
	return i.ToDiagnosticsStorageAccountConfigPtrOutputWithContext(context.Background())
}

func (i DiagnosticsStorageAccountConfigArgs) ToDiagnosticsStorageAccountConfigPtrOutputWithContext(ctx context.Context) DiagnosticsStorageAccountConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsStorageAccountConfigOutput).ToDiagnosticsStorageAccountConfigPtrOutputWithContext(ctx)
}

// DiagnosticsStorageAccountConfigPtrInput is an input type that accepts DiagnosticsStorageAccountConfigArgs, DiagnosticsStorageAccountConfigPtr and DiagnosticsStorageAccountConfigPtrOutput values.
// You can construct a concrete instance of `DiagnosticsStorageAccountConfigPtrInput` via:
//
//          DiagnosticsStorageAccountConfigArgs{...}
//
//  or:
//
//          nil
type DiagnosticsStorageAccountConfigPtrInput interface {
	pulumi.Input

	ToDiagnosticsStorageAccountConfigPtrOutput() DiagnosticsStorageAccountConfigPtrOutput
	ToDiagnosticsStorageAccountConfigPtrOutputWithContext(context.Context) DiagnosticsStorageAccountConfigPtrOutput
}

type diagnosticsStorageAccountConfigPtrType DiagnosticsStorageAccountConfigArgs

func DiagnosticsStorageAccountConfigPtr(v *DiagnosticsStorageAccountConfigArgs) DiagnosticsStorageAccountConfigPtrInput {
	return (*diagnosticsStorageAccountConfigPtrType)(v)
}

func (*diagnosticsStorageAccountConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticsStorageAccountConfig)(nil)).Elem()
}

func (i *diagnosticsStorageAccountConfigPtrType) ToDiagnosticsStorageAccountConfigPtrOutput() DiagnosticsStorageAccountConfigPtrOutput {
	return i.ToDiagnosticsStorageAccountConfigPtrOutputWithContext(context.Background())
}

func (i *diagnosticsStorageAccountConfigPtrType) ToDiagnosticsStorageAccountConfigPtrOutputWithContext(ctx context.Context) DiagnosticsStorageAccountConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsStorageAccountConfigPtrOutput)
}

// The storage account information for storing Service Fabric diagnostic logs.
type DiagnosticsStorageAccountConfigOutput struct{ *pulumi.OutputState }

func (DiagnosticsStorageAccountConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsStorageAccountConfig)(nil)).Elem()
}

func (o DiagnosticsStorageAccountConfigOutput) ToDiagnosticsStorageAccountConfigOutput() DiagnosticsStorageAccountConfigOutput {
	return o
}

func (o DiagnosticsStorageAccountConfigOutput) ToDiagnosticsStorageAccountConfigOutputWithContext(ctx context.Context) DiagnosticsStorageAccountConfigOutput {
	return o
}

func (o DiagnosticsStorageAccountConfigOutput) ToDiagnosticsStorageAccountConfigPtrOutput() DiagnosticsStorageAccountConfigPtrOutput {
	return o.ToDiagnosticsStorageAccountConfigPtrOutputWithContext(context.Background())
}

func (o DiagnosticsStorageAccountConfigOutput) ToDiagnosticsStorageAccountConfigPtrOutputWithContext(ctx context.Context) DiagnosticsStorageAccountConfigPtrOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfig) *DiagnosticsStorageAccountConfig {
		return &v
	}).(DiagnosticsStorageAccountConfigPtrOutput)
}

// The blob endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigOutput) BlobEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfig) string { return v.BlobEndpoint }).(pulumi.StringOutput)
}

// The protected diagnostics storage key name.
func (o DiagnosticsStorageAccountConfigOutput) ProtectedAccountKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfig) string { return v.ProtectedAccountKeyName }).(pulumi.StringOutput)
}

// The secondary protected diagnostics storage key name. If one of the storage account keys is rotated the cluster will fallback to using the other.
func (o DiagnosticsStorageAccountConfigOutput) ProtectedAccountKeyName2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfig) *string { return v.ProtectedAccountKeyName2 }).(pulumi.StringPtrOutput)
}

// The queue endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigOutput) QueueEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfig) string { return v.QueueEndpoint }).(pulumi.StringOutput)
}

// The Azure storage account name.
func (o DiagnosticsStorageAccountConfigOutput) StorageAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfig) string { return v.StorageAccountName }).(pulumi.StringOutput)
}

// The table endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigOutput) TableEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfig) string { return v.TableEndpoint }).(pulumi.StringOutput)
}

type DiagnosticsStorageAccountConfigPtrOutput struct{ *pulumi.OutputState }

func (DiagnosticsStorageAccountConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticsStorageAccountConfig)(nil)).Elem()
}

func (o DiagnosticsStorageAccountConfigPtrOutput) ToDiagnosticsStorageAccountConfigPtrOutput() DiagnosticsStorageAccountConfigPtrOutput {
	return o
}

func (o DiagnosticsStorageAccountConfigPtrOutput) ToDiagnosticsStorageAccountConfigPtrOutputWithContext(ctx context.Context) DiagnosticsStorageAccountConfigPtrOutput {
	return o
}

func (o DiagnosticsStorageAccountConfigPtrOutput) Elem() DiagnosticsStorageAccountConfigOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfig) DiagnosticsStorageAccountConfig { return *v }).(DiagnosticsStorageAccountConfigOutput)
}

// The blob endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigPtrOutput) BlobEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfig) *string {
		if v == nil {
			return nil
		}
		return &v.BlobEndpoint
	}).(pulumi.StringPtrOutput)
}

// The protected diagnostics storage key name.
func (o DiagnosticsStorageAccountConfigPtrOutput) ProtectedAccountKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfig) *string {
		if v == nil {
			return nil
		}
		return &v.ProtectedAccountKeyName
	}).(pulumi.StringPtrOutput)
}

// The secondary protected diagnostics storage key name. If one of the storage account keys is rotated the cluster will fallback to using the other.
func (o DiagnosticsStorageAccountConfigPtrOutput) ProtectedAccountKeyName2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfig) *string {
		if v == nil {
			return nil
		}
		return v.ProtectedAccountKeyName2
	}).(pulumi.StringPtrOutput)
}

// The queue endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigPtrOutput) QueueEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfig) *string {
		if v == nil {
			return nil
		}
		return &v.QueueEndpoint
	}).(pulumi.StringPtrOutput)
}

// The Azure storage account name.
func (o DiagnosticsStorageAccountConfigPtrOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfig) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountName
	}).(pulumi.StringPtrOutput)
}

// The table endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigPtrOutput) TableEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfig) *string {
		if v == nil {
			return nil
		}
		return &v.TableEndpoint
	}).(pulumi.StringPtrOutput)
}

// The storage account information for storing Service Fabric diagnostic logs.
type DiagnosticsStorageAccountConfigResponse struct {
	// The blob endpoint of the azure storage account.
	BlobEndpoint string `pulumi:"blobEndpoint"`
	// The protected diagnostics storage key name.
	ProtectedAccountKeyName string `pulumi:"protectedAccountKeyName"`
	// The secondary protected diagnostics storage key name. If one of the storage account keys is rotated the cluster will fallback to using the other.
	ProtectedAccountKeyName2 *string `pulumi:"protectedAccountKeyName2"`
	// The queue endpoint of the azure storage account.
	QueueEndpoint string `pulumi:"queueEndpoint"`
	// The Azure storage account name.
	StorageAccountName string `pulumi:"storageAccountName"`
	// The table endpoint of the azure storage account.
	TableEndpoint string `pulumi:"tableEndpoint"`
}

// DiagnosticsStorageAccountConfigResponseInput is an input type that accepts DiagnosticsStorageAccountConfigResponseArgs and DiagnosticsStorageAccountConfigResponseOutput values.
// You can construct a concrete instance of `DiagnosticsStorageAccountConfigResponseInput` via:
//
//          DiagnosticsStorageAccountConfigResponseArgs{...}
type DiagnosticsStorageAccountConfigResponseInput interface {
	pulumi.Input

	ToDiagnosticsStorageAccountConfigResponseOutput() DiagnosticsStorageAccountConfigResponseOutput
	ToDiagnosticsStorageAccountConfigResponseOutputWithContext(context.Context) DiagnosticsStorageAccountConfigResponseOutput
}

// The storage account information for storing Service Fabric diagnostic logs.
type DiagnosticsStorageAccountConfigResponseArgs struct {
	// The blob endpoint of the azure storage account.
	BlobEndpoint pulumi.StringInput `pulumi:"blobEndpoint"`
	// The protected diagnostics storage key name.
	ProtectedAccountKeyName pulumi.StringInput `pulumi:"protectedAccountKeyName"`
	// The secondary protected diagnostics storage key name. If one of the storage account keys is rotated the cluster will fallback to using the other.
	ProtectedAccountKeyName2 pulumi.StringPtrInput `pulumi:"protectedAccountKeyName2"`
	// The queue endpoint of the azure storage account.
	QueueEndpoint pulumi.StringInput `pulumi:"queueEndpoint"`
	// The Azure storage account name.
	StorageAccountName pulumi.StringInput `pulumi:"storageAccountName"`
	// The table endpoint of the azure storage account.
	TableEndpoint pulumi.StringInput `pulumi:"tableEndpoint"`
}

func (DiagnosticsStorageAccountConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsStorageAccountConfigResponse)(nil)).Elem()
}

func (i DiagnosticsStorageAccountConfigResponseArgs) ToDiagnosticsStorageAccountConfigResponseOutput() DiagnosticsStorageAccountConfigResponseOutput {
	return i.ToDiagnosticsStorageAccountConfigResponseOutputWithContext(context.Background())
}

func (i DiagnosticsStorageAccountConfigResponseArgs) ToDiagnosticsStorageAccountConfigResponseOutputWithContext(ctx context.Context) DiagnosticsStorageAccountConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsStorageAccountConfigResponseOutput)
}

func (i DiagnosticsStorageAccountConfigResponseArgs) ToDiagnosticsStorageAccountConfigResponsePtrOutput() DiagnosticsStorageAccountConfigResponsePtrOutput {
	return i.ToDiagnosticsStorageAccountConfigResponsePtrOutputWithContext(context.Background())
}

func (i DiagnosticsStorageAccountConfigResponseArgs) ToDiagnosticsStorageAccountConfigResponsePtrOutputWithContext(ctx context.Context) DiagnosticsStorageAccountConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsStorageAccountConfigResponseOutput).ToDiagnosticsStorageAccountConfigResponsePtrOutputWithContext(ctx)
}

// DiagnosticsStorageAccountConfigResponsePtrInput is an input type that accepts DiagnosticsStorageAccountConfigResponseArgs, DiagnosticsStorageAccountConfigResponsePtr and DiagnosticsStorageAccountConfigResponsePtrOutput values.
// You can construct a concrete instance of `DiagnosticsStorageAccountConfigResponsePtrInput` via:
//
//          DiagnosticsStorageAccountConfigResponseArgs{...}
//
//  or:
//
//          nil
type DiagnosticsStorageAccountConfigResponsePtrInput interface {
	pulumi.Input

	ToDiagnosticsStorageAccountConfigResponsePtrOutput() DiagnosticsStorageAccountConfigResponsePtrOutput
	ToDiagnosticsStorageAccountConfigResponsePtrOutputWithContext(context.Context) DiagnosticsStorageAccountConfigResponsePtrOutput
}

type diagnosticsStorageAccountConfigResponsePtrType DiagnosticsStorageAccountConfigResponseArgs

func DiagnosticsStorageAccountConfigResponsePtr(v *DiagnosticsStorageAccountConfigResponseArgs) DiagnosticsStorageAccountConfigResponsePtrInput {
	return (*diagnosticsStorageAccountConfigResponsePtrType)(v)
}

func (*diagnosticsStorageAccountConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticsStorageAccountConfigResponse)(nil)).Elem()
}

func (i *diagnosticsStorageAccountConfigResponsePtrType) ToDiagnosticsStorageAccountConfigResponsePtrOutput() DiagnosticsStorageAccountConfigResponsePtrOutput {
	return i.ToDiagnosticsStorageAccountConfigResponsePtrOutputWithContext(context.Background())
}

func (i *diagnosticsStorageAccountConfigResponsePtrType) ToDiagnosticsStorageAccountConfigResponsePtrOutputWithContext(ctx context.Context) DiagnosticsStorageAccountConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsStorageAccountConfigResponsePtrOutput)
}

// The storage account information for storing Service Fabric diagnostic logs.
type DiagnosticsStorageAccountConfigResponseOutput struct{ *pulumi.OutputState }

func (DiagnosticsStorageAccountConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsStorageAccountConfigResponse)(nil)).Elem()
}

func (o DiagnosticsStorageAccountConfigResponseOutput) ToDiagnosticsStorageAccountConfigResponseOutput() DiagnosticsStorageAccountConfigResponseOutput {
	return o
}

func (o DiagnosticsStorageAccountConfigResponseOutput) ToDiagnosticsStorageAccountConfigResponseOutputWithContext(ctx context.Context) DiagnosticsStorageAccountConfigResponseOutput {
	return o
}

func (o DiagnosticsStorageAccountConfigResponseOutput) ToDiagnosticsStorageAccountConfigResponsePtrOutput() DiagnosticsStorageAccountConfigResponsePtrOutput {
	return o.ToDiagnosticsStorageAccountConfigResponsePtrOutputWithContext(context.Background())
}

func (o DiagnosticsStorageAccountConfigResponseOutput) ToDiagnosticsStorageAccountConfigResponsePtrOutputWithContext(ctx context.Context) DiagnosticsStorageAccountConfigResponsePtrOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfigResponse) *DiagnosticsStorageAccountConfigResponse {
		return &v
	}).(DiagnosticsStorageAccountConfigResponsePtrOutput)
}

// The blob endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigResponseOutput) BlobEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfigResponse) string { return v.BlobEndpoint }).(pulumi.StringOutput)
}

// The protected diagnostics storage key name.
func (o DiagnosticsStorageAccountConfigResponseOutput) ProtectedAccountKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfigResponse) string { return v.ProtectedAccountKeyName }).(pulumi.StringOutput)
}

// The secondary protected diagnostics storage key name. If one of the storage account keys is rotated the cluster will fallback to using the other.
func (o DiagnosticsStorageAccountConfigResponseOutput) ProtectedAccountKeyName2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfigResponse) *string { return v.ProtectedAccountKeyName2 }).(pulumi.StringPtrOutput)
}

// The queue endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigResponseOutput) QueueEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfigResponse) string { return v.QueueEndpoint }).(pulumi.StringOutput)
}

// The Azure storage account name.
func (o DiagnosticsStorageAccountConfigResponseOutput) StorageAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfigResponse) string { return v.StorageAccountName }).(pulumi.StringOutput)
}

// The table endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigResponseOutput) TableEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticsStorageAccountConfigResponse) string { return v.TableEndpoint }).(pulumi.StringOutput)
}

type DiagnosticsStorageAccountConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (DiagnosticsStorageAccountConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticsStorageAccountConfigResponse)(nil)).Elem()
}

func (o DiagnosticsStorageAccountConfigResponsePtrOutput) ToDiagnosticsStorageAccountConfigResponsePtrOutput() DiagnosticsStorageAccountConfigResponsePtrOutput {
	return o
}

func (o DiagnosticsStorageAccountConfigResponsePtrOutput) ToDiagnosticsStorageAccountConfigResponsePtrOutputWithContext(ctx context.Context) DiagnosticsStorageAccountConfigResponsePtrOutput {
	return o
}

func (o DiagnosticsStorageAccountConfigResponsePtrOutput) Elem() DiagnosticsStorageAccountConfigResponseOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfigResponse) DiagnosticsStorageAccountConfigResponse { return *v }).(DiagnosticsStorageAccountConfigResponseOutput)
}

// The blob endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigResponsePtrOutput) BlobEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BlobEndpoint
	}).(pulumi.StringPtrOutput)
}

// The protected diagnostics storage key name.
func (o DiagnosticsStorageAccountConfigResponsePtrOutput) ProtectedAccountKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProtectedAccountKeyName
	}).(pulumi.StringPtrOutput)
}

// The secondary protected diagnostics storage key name. If one of the storage account keys is rotated the cluster will fallback to using the other.
func (o DiagnosticsStorageAccountConfigResponsePtrOutput) ProtectedAccountKeyName2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProtectedAccountKeyName2
	}).(pulumi.StringPtrOutput)
}

// The queue endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigResponsePtrOutput) QueueEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.QueueEndpoint
	}).(pulumi.StringPtrOutput)
}

// The Azure storage account name.
func (o DiagnosticsStorageAccountConfigResponsePtrOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountName
	}).(pulumi.StringPtrOutput)
}

// The table endpoint of the azure storage account.
func (o DiagnosticsStorageAccountConfigResponsePtrOutput) TableEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticsStorageAccountConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TableEndpoint
	}).(pulumi.StringPtrOutput)
}

// Port range details
type EndpointRangeDescription struct {
	// End port of a range of ports
	EndPort int `pulumi:"endPort"`
	// Starting port of a range of ports
	StartPort int `pulumi:"startPort"`
}

// EndpointRangeDescriptionInput is an input type that accepts EndpointRangeDescriptionArgs and EndpointRangeDescriptionOutput values.
// You can construct a concrete instance of `EndpointRangeDescriptionInput` via:
//
//          EndpointRangeDescriptionArgs{...}
type EndpointRangeDescriptionInput interface {
	pulumi.Input

	ToEndpointRangeDescriptionOutput() EndpointRangeDescriptionOutput
	ToEndpointRangeDescriptionOutputWithContext(context.Context) EndpointRangeDescriptionOutput
}

// Port range details
type EndpointRangeDescriptionArgs struct {
	// End port of a range of ports
	EndPort pulumi.IntInput `pulumi:"endPort"`
	// Starting port of a range of ports
	StartPort pulumi.IntInput `pulumi:"startPort"`
}

func (EndpointRangeDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointRangeDescription)(nil)).Elem()
}

func (i EndpointRangeDescriptionArgs) ToEndpointRangeDescriptionOutput() EndpointRangeDescriptionOutput {
	return i.ToEndpointRangeDescriptionOutputWithContext(context.Background())
}

func (i EndpointRangeDescriptionArgs) ToEndpointRangeDescriptionOutputWithContext(ctx context.Context) EndpointRangeDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointRangeDescriptionOutput)
}

func (i EndpointRangeDescriptionArgs) ToEndpointRangeDescriptionPtrOutput() EndpointRangeDescriptionPtrOutput {
	return i.ToEndpointRangeDescriptionPtrOutputWithContext(context.Background())
}

func (i EndpointRangeDescriptionArgs) ToEndpointRangeDescriptionPtrOutputWithContext(ctx context.Context) EndpointRangeDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointRangeDescriptionOutput).ToEndpointRangeDescriptionPtrOutputWithContext(ctx)
}

// EndpointRangeDescriptionPtrInput is an input type that accepts EndpointRangeDescriptionArgs, EndpointRangeDescriptionPtr and EndpointRangeDescriptionPtrOutput values.
// You can construct a concrete instance of `EndpointRangeDescriptionPtrInput` via:
//
//          EndpointRangeDescriptionArgs{...}
//
//  or:
//
//          nil
type EndpointRangeDescriptionPtrInput interface {
	pulumi.Input

	ToEndpointRangeDescriptionPtrOutput() EndpointRangeDescriptionPtrOutput
	ToEndpointRangeDescriptionPtrOutputWithContext(context.Context) EndpointRangeDescriptionPtrOutput
}

type endpointRangeDescriptionPtrType EndpointRangeDescriptionArgs

func EndpointRangeDescriptionPtr(v *EndpointRangeDescriptionArgs) EndpointRangeDescriptionPtrInput {
	return (*endpointRangeDescriptionPtrType)(v)
}

func (*endpointRangeDescriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointRangeDescription)(nil)).Elem()
}

func (i *endpointRangeDescriptionPtrType) ToEndpointRangeDescriptionPtrOutput() EndpointRangeDescriptionPtrOutput {
	return i.ToEndpointRangeDescriptionPtrOutputWithContext(context.Background())
}

func (i *endpointRangeDescriptionPtrType) ToEndpointRangeDescriptionPtrOutputWithContext(ctx context.Context) EndpointRangeDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointRangeDescriptionPtrOutput)
}

// Port range details
type EndpointRangeDescriptionOutput struct{ *pulumi.OutputState }

func (EndpointRangeDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointRangeDescription)(nil)).Elem()
}

func (o EndpointRangeDescriptionOutput) ToEndpointRangeDescriptionOutput() EndpointRangeDescriptionOutput {
	return o
}

func (o EndpointRangeDescriptionOutput) ToEndpointRangeDescriptionOutputWithContext(ctx context.Context) EndpointRangeDescriptionOutput {
	return o
}

func (o EndpointRangeDescriptionOutput) ToEndpointRangeDescriptionPtrOutput() EndpointRangeDescriptionPtrOutput {
	return o.ToEndpointRangeDescriptionPtrOutputWithContext(context.Background())
}

func (o EndpointRangeDescriptionOutput) ToEndpointRangeDescriptionPtrOutputWithContext(ctx context.Context) EndpointRangeDescriptionPtrOutput {
	return o.ApplyT(func(v EndpointRangeDescription) *EndpointRangeDescription {
		return &v
	}).(EndpointRangeDescriptionPtrOutput)
}

// End port of a range of ports
func (o EndpointRangeDescriptionOutput) EndPort() pulumi.IntOutput {
	return o.ApplyT(func(v EndpointRangeDescription) int { return v.EndPort }).(pulumi.IntOutput)
}

// Starting port of a range of ports
func (o EndpointRangeDescriptionOutput) StartPort() pulumi.IntOutput {
	return o.ApplyT(func(v EndpointRangeDescription) int { return v.StartPort }).(pulumi.IntOutput)
}

type EndpointRangeDescriptionPtrOutput struct{ *pulumi.OutputState }

func (EndpointRangeDescriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointRangeDescription)(nil)).Elem()
}

func (o EndpointRangeDescriptionPtrOutput) ToEndpointRangeDescriptionPtrOutput() EndpointRangeDescriptionPtrOutput {
	return o
}

func (o EndpointRangeDescriptionPtrOutput) ToEndpointRangeDescriptionPtrOutputWithContext(ctx context.Context) EndpointRangeDescriptionPtrOutput {
	return o
}

func (o EndpointRangeDescriptionPtrOutput) Elem() EndpointRangeDescriptionOutput {
	return o.ApplyT(func(v *EndpointRangeDescription) EndpointRangeDescription { return *v }).(EndpointRangeDescriptionOutput)
}

// End port of a range of ports
func (o EndpointRangeDescriptionPtrOutput) EndPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointRangeDescription) *int {
		if v == nil {
			return nil
		}
		return &v.EndPort
	}).(pulumi.IntPtrOutput)
}

// Starting port of a range of ports
func (o EndpointRangeDescriptionPtrOutput) StartPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointRangeDescription) *int {
		if v == nil {
			return nil
		}
		return &v.StartPort
	}).(pulumi.IntPtrOutput)
}

// Port range details
type EndpointRangeDescriptionResponse struct {
	// End port of a range of ports
	EndPort int `pulumi:"endPort"`
	// Starting port of a range of ports
	StartPort int `pulumi:"startPort"`
}

// EndpointRangeDescriptionResponseInput is an input type that accepts EndpointRangeDescriptionResponseArgs and EndpointRangeDescriptionResponseOutput values.
// You can construct a concrete instance of `EndpointRangeDescriptionResponseInput` via:
//
//          EndpointRangeDescriptionResponseArgs{...}
type EndpointRangeDescriptionResponseInput interface {
	pulumi.Input

	ToEndpointRangeDescriptionResponseOutput() EndpointRangeDescriptionResponseOutput
	ToEndpointRangeDescriptionResponseOutputWithContext(context.Context) EndpointRangeDescriptionResponseOutput
}

// Port range details
type EndpointRangeDescriptionResponseArgs struct {
	// End port of a range of ports
	EndPort pulumi.IntInput `pulumi:"endPort"`
	// Starting port of a range of ports
	StartPort pulumi.IntInput `pulumi:"startPort"`
}

func (EndpointRangeDescriptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointRangeDescriptionResponse)(nil)).Elem()
}

func (i EndpointRangeDescriptionResponseArgs) ToEndpointRangeDescriptionResponseOutput() EndpointRangeDescriptionResponseOutput {
	return i.ToEndpointRangeDescriptionResponseOutputWithContext(context.Background())
}

func (i EndpointRangeDescriptionResponseArgs) ToEndpointRangeDescriptionResponseOutputWithContext(ctx context.Context) EndpointRangeDescriptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointRangeDescriptionResponseOutput)
}

func (i EndpointRangeDescriptionResponseArgs) ToEndpointRangeDescriptionResponsePtrOutput() EndpointRangeDescriptionResponsePtrOutput {
	return i.ToEndpointRangeDescriptionResponsePtrOutputWithContext(context.Background())
}

func (i EndpointRangeDescriptionResponseArgs) ToEndpointRangeDescriptionResponsePtrOutputWithContext(ctx context.Context) EndpointRangeDescriptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointRangeDescriptionResponseOutput).ToEndpointRangeDescriptionResponsePtrOutputWithContext(ctx)
}

// EndpointRangeDescriptionResponsePtrInput is an input type that accepts EndpointRangeDescriptionResponseArgs, EndpointRangeDescriptionResponsePtr and EndpointRangeDescriptionResponsePtrOutput values.
// You can construct a concrete instance of `EndpointRangeDescriptionResponsePtrInput` via:
//
//          EndpointRangeDescriptionResponseArgs{...}
//
//  or:
//
//          nil
type EndpointRangeDescriptionResponsePtrInput interface {
	pulumi.Input

	ToEndpointRangeDescriptionResponsePtrOutput() EndpointRangeDescriptionResponsePtrOutput
	ToEndpointRangeDescriptionResponsePtrOutputWithContext(context.Context) EndpointRangeDescriptionResponsePtrOutput
}

type endpointRangeDescriptionResponsePtrType EndpointRangeDescriptionResponseArgs

func EndpointRangeDescriptionResponsePtr(v *EndpointRangeDescriptionResponseArgs) EndpointRangeDescriptionResponsePtrInput {
	return (*endpointRangeDescriptionResponsePtrType)(v)
}

func (*endpointRangeDescriptionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointRangeDescriptionResponse)(nil)).Elem()
}

func (i *endpointRangeDescriptionResponsePtrType) ToEndpointRangeDescriptionResponsePtrOutput() EndpointRangeDescriptionResponsePtrOutput {
	return i.ToEndpointRangeDescriptionResponsePtrOutputWithContext(context.Background())
}

func (i *endpointRangeDescriptionResponsePtrType) ToEndpointRangeDescriptionResponsePtrOutputWithContext(ctx context.Context) EndpointRangeDescriptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointRangeDescriptionResponsePtrOutput)
}

// Port range details
type EndpointRangeDescriptionResponseOutput struct{ *pulumi.OutputState }

func (EndpointRangeDescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointRangeDescriptionResponse)(nil)).Elem()
}

func (o EndpointRangeDescriptionResponseOutput) ToEndpointRangeDescriptionResponseOutput() EndpointRangeDescriptionResponseOutput {
	return o
}

func (o EndpointRangeDescriptionResponseOutput) ToEndpointRangeDescriptionResponseOutputWithContext(ctx context.Context) EndpointRangeDescriptionResponseOutput {
	return o
}

func (o EndpointRangeDescriptionResponseOutput) ToEndpointRangeDescriptionResponsePtrOutput() EndpointRangeDescriptionResponsePtrOutput {
	return o.ToEndpointRangeDescriptionResponsePtrOutputWithContext(context.Background())
}

func (o EndpointRangeDescriptionResponseOutput) ToEndpointRangeDescriptionResponsePtrOutputWithContext(ctx context.Context) EndpointRangeDescriptionResponsePtrOutput {
	return o.ApplyT(func(v EndpointRangeDescriptionResponse) *EndpointRangeDescriptionResponse {
		return &v
	}).(EndpointRangeDescriptionResponsePtrOutput)
}

// End port of a range of ports
func (o EndpointRangeDescriptionResponseOutput) EndPort() pulumi.IntOutput {
	return o.ApplyT(func(v EndpointRangeDescriptionResponse) int { return v.EndPort }).(pulumi.IntOutput)
}

// Starting port of a range of ports
func (o EndpointRangeDescriptionResponseOutput) StartPort() pulumi.IntOutput {
	return o.ApplyT(func(v EndpointRangeDescriptionResponse) int { return v.StartPort }).(pulumi.IntOutput)
}

type EndpointRangeDescriptionResponsePtrOutput struct{ *pulumi.OutputState }

func (EndpointRangeDescriptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointRangeDescriptionResponse)(nil)).Elem()
}

func (o EndpointRangeDescriptionResponsePtrOutput) ToEndpointRangeDescriptionResponsePtrOutput() EndpointRangeDescriptionResponsePtrOutput {
	return o
}

func (o EndpointRangeDescriptionResponsePtrOutput) ToEndpointRangeDescriptionResponsePtrOutputWithContext(ctx context.Context) EndpointRangeDescriptionResponsePtrOutput {
	return o
}

func (o EndpointRangeDescriptionResponsePtrOutput) Elem() EndpointRangeDescriptionResponseOutput {
	return o.ApplyT(func(v *EndpointRangeDescriptionResponse) EndpointRangeDescriptionResponse { return *v }).(EndpointRangeDescriptionResponseOutput)
}

// End port of a range of ports
func (o EndpointRangeDescriptionResponsePtrOutput) EndPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointRangeDescriptionResponse) *int {
		if v == nil {
			return nil
		}
		return &v.EndPort
	}).(pulumi.IntPtrOutput)
}

// Starting port of a range of ports
func (o EndpointRangeDescriptionResponsePtrOutput) StartPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointRangeDescriptionResponse) *int {
		if v == nil {
			return nil
		}
		return &v.StartPort
	}).(pulumi.IntPtrOutput)
}

// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
type ForceRestart struct {
}

// ForceRestartInput is an input type that accepts ForceRestartArgs and ForceRestartOutput values.
// You can construct a concrete instance of `ForceRestartInput` via:
//
//          ForceRestartArgs{...}
type ForceRestartInput interface {
	pulumi.Input

	ToForceRestartOutput() ForceRestartOutput
	ToForceRestartOutputWithContext(context.Context) ForceRestartOutput
}

// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
type ForceRestartArgs struct {
}

func (ForceRestartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForceRestart)(nil)).Elem()
}

func (i ForceRestartArgs) ToForceRestartOutput() ForceRestartOutput {
	return i.ToForceRestartOutputWithContext(context.Background())
}

func (i ForceRestartArgs) ToForceRestartOutputWithContext(ctx context.Context) ForceRestartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForceRestartOutput)
}

func (i ForceRestartArgs) ToForceRestartPtrOutput() ForceRestartPtrOutput {
	return i.ToForceRestartPtrOutputWithContext(context.Background())
}

func (i ForceRestartArgs) ToForceRestartPtrOutputWithContext(ctx context.Context) ForceRestartPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForceRestartOutput).ToForceRestartPtrOutputWithContext(ctx)
}

// ForceRestartPtrInput is an input type that accepts ForceRestartArgs, ForceRestartPtr and ForceRestartPtrOutput values.
// You can construct a concrete instance of `ForceRestartPtrInput` via:
//
//          ForceRestartArgs{...}
//
//  or:
//
//          nil
type ForceRestartPtrInput interface {
	pulumi.Input

	ToForceRestartPtrOutput() ForceRestartPtrOutput
	ToForceRestartPtrOutputWithContext(context.Context) ForceRestartPtrOutput
}

type forceRestartPtrType ForceRestartArgs

func ForceRestartPtr(v *ForceRestartArgs) ForceRestartPtrInput {
	return (*forceRestartPtrType)(v)
}

func (*forceRestartPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ForceRestart)(nil)).Elem()
}

func (i *forceRestartPtrType) ToForceRestartPtrOutput() ForceRestartPtrOutput {
	return i.ToForceRestartPtrOutputWithContext(context.Background())
}

func (i *forceRestartPtrType) ToForceRestartPtrOutputWithContext(ctx context.Context) ForceRestartPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForceRestartPtrOutput)
}

// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
type ForceRestartOutput struct{ *pulumi.OutputState }

func (ForceRestartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForceRestart)(nil)).Elem()
}

func (o ForceRestartOutput) ToForceRestartOutput() ForceRestartOutput {
	return o
}

func (o ForceRestartOutput) ToForceRestartOutputWithContext(ctx context.Context) ForceRestartOutput {
	return o
}

func (o ForceRestartOutput) ToForceRestartPtrOutput() ForceRestartPtrOutput {
	return o.ToForceRestartPtrOutputWithContext(context.Background())
}

func (o ForceRestartOutput) ToForceRestartPtrOutputWithContext(ctx context.Context) ForceRestartPtrOutput {
	return o.ApplyT(func(v ForceRestart) *ForceRestart {
		return &v
	}).(ForceRestartPtrOutput)
}

type ForceRestartPtrOutput struct{ *pulumi.OutputState }

func (ForceRestartPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForceRestart)(nil)).Elem()
}

func (o ForceRestartPtrOutput) ToForceRestartPtrOutput() ForceRestartPtrOutput {
	return o
}

func (o ForceRestartPtrOutput) ToForceRestartPtrOutputWithContext(ctx context.Context) ForceRestartPtrOutput {
	return o
}

func (o ForceRestartPtrOutput) Elem() ForceRestartOutput {
	return o.ApplyT(func(v *ForceRestart) ForceRestart { return *v }).(ForceRestartOutput)
}

// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
type ForceRestartResponse struct {
}

// ForceRestartResponseInput is an input type that accepts ForceRestartResponseArgs and ForceRestartResponseOutput values.
// You can construct a concrete instance of `ForceRestartResponseInput` via:
//
//          ForceRestartResponseArgs{...}
type ForceRestartResponseInput interface {
	pulumi.Input

	ToForceRestartResponseOutput() ForceRestartResponseOutput
	ToForceRestartResponseOutputWithContext(context.Context) ForceRestartResponseOutput
}

// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
type ForceRestartResponseArgs struct {
}

func (ForceRestartResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForceRestartResponse)(nil)).Elem()
}

func (i ForceRestartResponseArgs) ToForceRestartResponseOutput() ForceRestartResponseOutput {
	return i.ToForceRestartResponseOutputWithContext(context.Background())
}

func (i ForceRestartResponseArgs) ToForceRestartResponseOutputWithContext(ctx context.Context) ForceRestartResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForceRestartResponseOutput)
}

func (i ForceRestartResponseArgs) ToForceRestartResponsePtrOutput() ForceRestartResponsePtrOutput {
	return i.ToForceRestartResponsePtrOutputWithContext(context.Background())
}

func (i ForceRestartResponseArgs) ToForceRestartResponsePtrOutputWithContext(ctx context.Context) ForceRestartResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForceRestartResponseOutput).ToForceRestartResponsePtrOutputWithContext(ctx)
}

// ForceRestartResponsePtrInput is an input type that accepts ForceRestartResponseArgs, ForceRestartResponsePtr and ForceRestartResponsePtrOutput values.
// You can construct a concrete instance of `ForceRestartResponsePtrInput` via:
//
//          ForceRestartResponseArgs{...}
//
//  or:
//
//          nil
type ForceRestartResponsePtrInput interface {
	pulumi.Input

	ToForceRestartResponsePtrOutput() ForceRestartResponsePtrOutput
	ToForceRestartResponsePtrOutputWithContext(context.Context) ForceRestartResponsePtrOutput
}

type forceRestartResponsePtrType ForceRestartResponseArgs

func ForceRestartResponsePtr(v *ForceRestartResponseArgs) ForceRestartResponsePtrInput {
	return (*forceRestartResponsePtrType)(v)
}

func (*forceRestartResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ForceRestartResponse)(nil)).Elem()
}

func (i *forceRestartResponsePtrType) ToForceRestartResponsePtrOutput() ForceRestartResponsePtrOutput {
	return i.ToForceRestartResponsePtrOutputWithContext(context.Background())
}

func (i *forceRestartResponsePtrType) ToForceRestartResponsePtrOutputWithContext(ctx context.Context) ForceRestartResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForceRestartResponsePtrOutput)
}

// If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
type ForceRestartResponseOutput struct{ *pulumi.OutputState }

func (ForceRestartResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForceRestartResponse)(nil)).Elem()
}

func (o ForceRestartResponseOutput) ToForceRestartResponseOutput() ForceRestartResponseOutput {
	return o
}

func (o ForceRestartResponseOutput) ToForceRestartResponseOutputWithContext(ctx context.Context) ForceRestartResponseOutput {
	return o
}

func (o ForceRestartResponseOutput) ToForceRestartResponsePtrOutput() ForceRestartResponsePtrOutput {
	return o.ToForceRestartResponsePtrOutputWithContext(context.Background())
}

func (o ForceRestartResponseOutput) ToForceRestartResponsePtrOutputWithContext(ctx context.Context) ForceRestartResponsePtrOutput {
	return o.ApplyT(func(v ForceRestartResponse) *ForceRestartResponse {
		return &v
	}).(ForceRestartResponsePtrOutput)
}

type ForceRestartResponsePtrOutput struct{ *pulumi.OutputState }

func (ForceRestartResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForceRestartResponse)(nil)).Elem()
}

func (o ForceRestartResponsePtrOutput) ToForceRestartResponsePtrOutput() ForceRestartResponsePtrOutput {
	return o
}

func (o ForceRestartResponsePtrOutput) ToForceRestartResponsePtrOutputWithContext(ctx context.Context) ForceRestartResponsePtrOutput {
	return o
}

func (o ForceRestartResponsePtrOutput) Elem() ForceRestartResponseOutput {
	return o.ApplyT(func(v *ForceRestartResponse) ForceRestartResponse { return *v }).(ForceRestartResponseOutput)
}

// Describes the managed identities for an Azure resource.
type ManagedIdentity struct {
	// The type of managed identity for the resource.
	Type *string `pulumi:"type"`
	// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities *UserAssignedIdentityMap `pulumi:"userAssignedIdentities"`
}

// ManagedIdentityInput is an input type that accepts ManagedIdentityArgs and ManagedIdentityOutput values.
// You can construct a concrete instance of `ManagedIdentityInput` via:
//
//          ManagedIdentityArgs{...}
type ManagedIdentityInput interface {
	pulumi.Input

	ToManagedIdentityOutput() ManagedIdentityOutput
	ToManagedIdentityOutputWithContext(context.Context) ManagedIdentityOutput
}

// Describes the managed identities for an Azure resource.
type ManagedIdentityArgs struct {
	// The type of managed identity for the resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities UserAssignedIdentityMapPtrInput `pulumi:"userAssignedIdentities"`
}

func (ManagedIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentity)(nil)).Elem()
}

func (i ManagedIdentityArgs) ToManagedIdentityOutput() ManagedIdentityOutput {
	return i.ToManagedIdentityOutputWithContext(context.Background())
}

func (i ManagedIdentityArgs) ToManagedIdentityOutputWithContext(ctx context.Context) ManagedIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityOutput)
}

func (i ManagedIdentityArgs) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return i.ToManagedIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedIdentityArgs) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityOutput).ToManagedIdentityPtrOutputWithContext(ctx)
}

// ManagedIdentityPtrInput is an input type that accepts ManagedIdentityArgs, ManagedIdentityPtr and ManagedIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedIdentityPtrInput` via:
//
//          ManagedIdentityArgs{...}
//
//  or:
//
//          nil
type ManagedIdentityPtrInput interface {
	pulumi.Input

	ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput
	ToManagedIdentityPtrOutputWithContext(context.Context) ManagedIdentityPtrOutput
}

type managedIdentityPtrType ManagedIdentityArgs

func ManagedIdentityPtr(v *ManagedIdentityArgs) ManagedIdentityPtrInput {
	return (*managedIdentityPtrType)(v)
}

func (*managedIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentity)(nil)).Elem()
}

func (i *managedIdentityPtrType) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return i.ToManagedIdentityPtrOutputWithContext(context.Background())
}

func (i *managedIdentityPtrType) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityPtrOutput)
}

// Describes the managed identities for an Azure resource.
type ManagedIdentityOutput struct{ *pulumi.OutputState }

func (ManagedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentity)(nil)).Elem()
}

func (o ManagedIdentityOutput) ToManagedIdentityOutput() ManagedIdentityOutput {
	return o
}

func (o ManagedIdentityOutput) ToManagedIdentityOutputWithContext(ctx context.Context) ManagedIdentityOutput {
	return o
}

func (o ManagedIdentityOutput) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return o.ToManagedIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedIdentityOutput) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return o.ApplyT(func(v ManagedIdentity) *ManagedIdentity {
		return &v
	}).(ManagedIdentityPtrOutput)
}

// The type of managed identity for the resource.
func (o ManagedIdentityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ManagedIdentityOutput) UserAssignedIdentities() UserAssignedIdentityMapPtrOutput {
	return o.ApplyT(func(v ManagedIdentity) *UserAssignedIdentityMap { return v.UserAssignedIdentities }).(UserAssignedIdentityMapPtrOutput)
}

type ManagedIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentity)(nil)).Elem()
}

func (o ManagedIdentityPtrOutput) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return o
}

func (o ManagedIdentityPtrOutput) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return o
}

func (o ManagedIdentityPtrOutput) Elem() ManagedIdentityOutput {
	return o.ApplyT(func(v *ManagedIdentity) ManagedIdentity { return *v }).(ManagedIdentityOutput)
}

// The type of managed identity for the resource.
func (o ManagedIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ManagedIdentityPtrOutput) UserAssignedIdentities() UserAssignedIdentityMapPtrOutput {
	return o.ApplyT(func(v *ManagedIdentity) *UserAssignedIdentityMap {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityMapPtrOutput)
}

// Describes the managed identities for an Azure resource.
type ManagedIdentityResponse struct {
	// The principal id of the managed identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant id of the managed identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// The type of managed identity for the resource.
	Type *string `pulumi:"type"`
	// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities *UserAssignedIdentityMapResponse `pulumi:"userAssignedIdentities"`
}

// ManagedIdentityResponseInput is an input type that accepts ManagedIdentityResponseArgs and ManagedIdentityResponseOutput values.
// You can construct a concrete instance of `ManagedIdentityResponseInput` via:
//
//          ManagedIdentityResponseArgs{...}
type ManagedIdentityResponseInput interface {
	pulumi.Input

	ToManagedIdentityResponseOutput() ManagedIdentityResponseOutput
	ToManagedIdentityResponseOutputWithContext(context.Context) ManagedIdentityResponseOutput
}

// Describes the managed identities for an Azure resource.
type ManagedIdentityResponseArgs struct {
	// The principal id of the managed identity. This property will only be provided for a system assigned identity.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The tenant id of the managed identity. This property will only be provided for a system assigned identity.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The type of managed identity for the resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities UserAssignedIdentityMapResponsePtrInput `pulumi:"userAssignedIdentities"`
}

func (ManagedIdentityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityResponse)(nil)).Elem()
}

func (i ManagedIdentityResponseArgs) ToManagedIdentityResponseOutput() ManagedIdentityResponseOutput {
	return i.ToManagedIdentityResponseOutputWithContext(context.Background())
}

func (i ManagedIdentityResponseArgs) ToManagedIdentityResponseOutputWithContext(ctx context.Context) ManagedIdentityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityResponseOutput)
}

func (i ManagedIdentityResponseArgs) ToManagedIdentityResponsePtrOutput() ManagedIdentityResponsePtrOutput {
	return i.ToManagedIdentityResponsePtrOutputWithContext(context.Background())
}

func (i ManagedIdentityResponseArgs) ToManagedIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityResponseOutput).ToManagedIdentityResponsePtrOutputWithContext(ctx)
}

// ManagedIdentityResponsePtrInput is an input type that accepts ManagedIdentityResponseArgs, ManagedIdentityResponsePtr and ManagedIdentityResponsePtrOutput values.
// You can construct a concrete instance of `ManagedIdentityResponsePtrInput` via:
//
//          ManagedIdentityResponseArgs{...}
//
//  or:
//
//          nil
type ManagedIdentityResponsePtrInput interface {
	pulumi.Input

	ToManagedIdentityResponsePtrOutput() ManagedIdentityResponsePtrOutput
	ToManagedIdentityResponsePtrOutputWithContext(context.Context) ManagedIdentityResponsePtrOutput
}

type managedIdentityResponsePtrType ManagedIdentityResponseArgs

func ManagedIdentityResponsePtr(v *ManagedIdentityResponseArgs) ManagedIdentityResponsePtrInput {
	return (*managedIdentityResponsePtrType)(v)
}

func (*managedIdentityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentityResponse)(nil)).Elem()
}

func (i *managedIdentityResponsePtrType) ToManagedIdentityResponsePtrOutput() ManagedIdentityResponsePtrOutput {
	return i.ToManagedIdentityResponsePtrOutputWithContext(context.Background())
}

func (i *managedIdentityResponsePtrType) ToManagedIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedIdentityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityResponsePtrOutput)
}

// Describes the managed identities for an Azure resource.
type ManagedIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityResponse)(nil)).Elem()
}

func (o ManagedIdentityResponseOutput) ToManagedIdentityResponseOutput() ManagedIdentityResponseOutput {
	return o
}

func (o ManagedIdentityResponseOutput) ToManagedIdentityResponseOutputWithContext(ctx context.Context) ManagedIdentityResponseOutput {
	return o
}

func (o ManagedIdentityResponseOutput) ToManagedIdentityResponsePtrOutput() ManagedIdentityResponsePtrOutput {
	return o.ToManagedIdentityResponsePtrOutputWithContext(context.Background())
}

func (o ManagedIdentityResponseOutput) ToManagedIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedIdentityResponsePtrOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) *ManagedIdentityResponse {
		return &v
	}).(ManagedIdentityResponsePtrOutput)
}

// The principal id of the managed identity. This property will only be provided for a system assigned identity.
func (o ManagedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant id of the managed identity. This property will only be provided for a system assigned identity.
func (o ManagedIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of managed identity for the resource.
func (o ManagedIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ManagedIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityMapResponsePtrOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) *UserAssignedIdentityMapResponse { return v.UserAssignedIdentities }).(UserAssignedIdentityMapResponsePtrOutput)
}

type ManagedIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentityResponse)(nil)).Elem()
}

func (o ManagedIdentityResponsePtrOutput) ToManagedIdentityResponsePtrOutput() ManagedIdentityResponsePtrOutput {
	return o
}

func (o ManagedIdentityResponsePtrOutput) ToManagedIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedIdentityResponsePtrOutput {
	return o
}

func (o ManagedIdentityResponsePtrOutput) Elem() ManagedIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) ManagedIdentityResponse { return *v }).(ManagedIdentityResponseOutput)
}

// The principal id of the managed identity. This property will only be provided for a system assigned identity.
func (o ManagedIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant id of the managed identity. This property will only be provided for a system assigned identity.
func (o ManagedIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of managed identity for the resource.
func (o ManagedIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ManagedIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityMapResponsePtrOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) *UserAssignedIdentityMapResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityMapResponsePtrOutput)
}

// Describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
type NodeTypeDescription struct {
	// The range of ports from which cluster assigned port to Service Fabric applications.
	ApplicationPorts *EndpointRangeDescription `pulumi:"applicationPorts"`
	// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
	Capacities map[string]string `pulumi:"capacities"`
	// The TCP cluster management endpoint port.
	ClientConnectionEndpointPort int `pulumi:"clientConnectionEndpointPort"`
	// The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
	//
	//   - Bronze - No privileges. This is the default.
	//   - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.
	//   - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
	DurabilityLevel *string `pulumi:"durabilityLevel"`
	// The range of ephemeral ports that nodes in this node type should be configured with.
	EphemeralPorts *EndpointRangeDescription `pulumi:"ephemeralPorts"`
	// The HTTP cluster management endpoint port.
	HttpGatewayEndpointPort int `pulumi:"httpGatewayEndpointPort"`
	// The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
	IsPrimary bool `pulumi:"isPrimary"`
	// The name of the node type.
	Name string `pulumi:"name"`
	// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
	PlacementProperties map[string]string `pulumi:"placementProperties"`
	// The endpoint used by reverse proxy.
	ReverseProxyEndpointPort *int `pulumi:"reverseProxyEndpointPort"`
	// The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
	VmInstanceCount int `pulumi:"vmInstanceCount"`
}

// NodeTypeDescriptionInput is an input type that accepts NodeTypeDescriptionArgs and NodeTypeDescriptionOutput values.
// You can construct a concrete instance of `NodeTypeDescriptionInput` via:
//
//          NodeTypeDescriptionArgs{...}
type NodeTypeDescriptionInput interface {
	pulumi.Input

	ToNodeTypeDescriptionOutput() NodeTypeDescriptionOutput
	ToNodeTypeDescriptionOutputWithContext(context.Context) NodeTypeDescriptionOutput
}

// Describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
type NodeTypeDescriptionArgs struct {
	// The range of ports from which cluster assigned port to Service Fabric applications.
	ApplicationPorts EndpointRangeDescriptionPtrInput `pulumi:"applicationPorts"`
	// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
	Capacities pulumi.StringMapInput `pulumi:"capacities"`
	// The TCP cluster management endpoint port.
	ClientConnectionEndpointPort pulumi.IntInput `pulumi:"clientConnectionEndpointPort"`
	// The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
	//
	//   - Bronze - No privileges. This is the default.
	//   - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.
	//   - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
	DurabilityLevel pulumi.StringPtrInput `pulumi:"durabilityLevel"`
	// The range of ephemeral ports that nodes in this node type should be configured with.
	EphemeralPorts EndpointRangeDescriptionPtrInput `pulumi:"ephemeralPorts"`
	// The HTTP cluster management endpoint port.
	HttpGatewayEndpointPort pulumi.IntInput `pulumi:"httpGatewayEndpointPort"`
	// The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
	IsPrimary pulumi.BoolInput `pulumi:"isPrimary"`
	// The name of the node type.
	Name pulumi.StringInput `pulumi:"name"`
	// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
	PlacementProperties pulumi.StringMapInput `pulumi:"placementProperties"`
	// The endpoint used by reverse proxy.
	ReverseProxyEndpointPort pulumi.IntPtrInput `pulumi:"reverseProxyEndpointPort"`
	// The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
	VmInstanceCount pulumi.IntInput `pulumi:"vmInstanceCount"`
}

func (NodeTypeDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTypeDescription)(nil)).Elem()
}

func (i NodeTypeDescriptionArgs) ToNodeTypeDescriptionOutput() NodeTypeDescriptionOutput {
	return i.ToNodeTypeDescriptionOutputWithContext(context.Background())
}

func (i NodeTypeDescriptionArgs) ToNodeTypeDescriptionOutputWithContext(ctx context.Context) NodeTypeDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTypeDescriptionOutput)
}

// NodeTypeDescriptionArrayInput is an input type that accepts NodeTypeDescriptionArray and NodeTypeDescriptionArrayOutput values.
// You can construct a concrete instance of `NodeTypeDescriptionArrayInput` via:
//
//          NodeTypeDescriptionArray{ NodeTypeDescriptionArgs{...} }
type NodeTypeDescriptionArrayInput interface {
	pulumi.Input

	ToNodeTypeDescriptionArrayOutput() NodeTypeDescriptionArrayOutput
	ToNodeTypeDescriptionArrayOutputWithContext(context.Context) NodeTypeDescriptionArrayOutput
}

type NodeTypeDescriptionArray []NodeTypeDescriptionInput

func (NodeTypeDescriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeTypeDescription)(nil)).Elem()
}

func (i NodeTypeDescriptionArray) ToNodeTypeDescriptionArrayOutput() NodeTypeDescriptionArrayOutput {
	return i.ToNodeTypeDescriptionArrayOutputWithContext(context.Background())
}

func (i NodeTypeDescriptionArray) ToNodeTypeDescriptionArrayOutputWithContext(ctx context.Context) NodeTypeDescriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTypeDescriptionArrayOutput)
}

// Describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
type NodeTypeDescriptionOutput struct{ *pulumi.OutputState }

func (NodeTypeDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTypeDescription)(nil)).Elem()
}

func (o NodeTypeDescriptionOutput) ToNodeTypeDescriptionOutput() NodeTypeDescriptionOutput {
	return o
}

func (o NodeTypeDescriptionOutput) ToNodeTypeDescriptionOutputWithContext(ctx context.Context) NodeTypeDescriptionOutput {
	return o
}

// The range of ports from which cluster assigned port to Service Fabric applications.
func (o NodeTypeDescriptionOutput) ApplicationPorts() EndpointRangeDescriptionPtrOutput {
	return o.ApplyT(func(v NodeTypeDescription) *EndpointRangeDescription { return v.ApplicationPorts }).(EndpointRangeDescriptionPtrOutput)
}

// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
func (o NodeTypeDescriptionOutput) Capacities() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeTypeDescription) map[string]string { return v.Capacities }).(pulumi.StringMapOutput)
}

// The TCP cluster management endpoint port.
func (o NodeTypeDescriptionOutput) ClientConnectionEndpointPort() pulumi.IntOutput {
	return o.ApplyT(func(v NodeTypeDescription) int { return v.ClientConnectionEndpointPort }).(pulumi.IntOutput)
}

// The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
//
//   - Bronze - No privileges. This is the default.
//   - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.
//   - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
func (o NodeTypeDescriptionOutput) DurabilityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeTypeDescription) *string { return v.DurabilityLevel }).(pulumi.StringPtrOutput)
}

// The range of ephemeral ports that nodes in this node type should be configured with.
func (o NodeTypeDescriptionOutput) EphemeralPorts() EndpointRangeDescriptionPtrOutput {
	return o.ApplyT(func(v NodeTypeDescription) *EndpointRangeDescription { return v.EphemeralPorts }).(EndpointRangeDescriptionPtrOutput)
}

// The HTTP cluster management endpoint port.
func (o NodeTypeDescriptionOutput) HttpGatewayEndpointPort() pulumi.IntOutput {
	return o.ApplyT(func(v NodeTypeDescription) int { return v.HttpGatewayEndpointPort }).(pulumi.IntOutput)
}

// The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
func (o NodeTypeDescriptionOutput) IsPrimary() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeTypeDescription) bool { return v.IsPrimary }).(pulumi.BoolOutput)
}

// The name of the node type.
func (o NodeTypeDescriptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTypeDescription) string { return v.Name }).(pulumi.StringOutput)
}

// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
func (o NodeTypeDescriptionOutput) PlacementProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeTypeDescription) map[string]string { return v.PlacementProperties }).(pulumi.StringMapOutput)
}

// The endpoint used by reverse proxy.
func (o NodeTypeDescriptionOutput) ReverseProxyEndpointPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeTypeDescription) *int { return v.ReverseProxyEndpointPort }).(pulumi.IntPtrOutput)
}

// The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
func (o NodeTypeDescriptionOutput) VmInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeTypeDescription) int { return v.VmInstanceCount }).(pulumi.IntOutput)
}

type NodeTypeDescriptionArrayOutput struct{ *pulumi.OutputState }

func (NodeTypeDescriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeTypeDescription)(nil)).Elem()
}

func (o NodeTypeDescriptionArrayOutput) ToNodeTypeDescriptionArrayOutput() NodeTypeDescriptionArrayOutput {
	return o
}

func (o NodeTypeDescriptionArrayOutput) ToNodeTypeDescriptionArrayOutputWithContext(ctx context.Context) NodeTypeDescriptionArrayOutput {
	return o
}

func (o NodeTypeDescriptionArrayOutput) Index(i pulumi.IntInput) NodeTypeDescriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeTypeDescription {
		return vs[0].([]NodeTypeDescription)[vs[1].(int)]
	}).(NodeTypeDescriptionOutput)
}

// Describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
type NodeTypeDescriptionResponse struct {
	// The range of ports from which cluster assigned port to Service Fabric applications.
	ApplicationPorts *EndpointRangeDescriptionResponse `pulumi:"applicationPorts"`
	// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
	Capacities map[string]string `pulumi:"capacities"`
	// The TCP cluster management endpoint port.
	ClientConnectionEndpointPort int `pulumi:"clientConnectionEndpointPort"`
	// The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
	//
	//   - Bronze - No privileges. This is the default.
	//   - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.
	//   - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
	DurabilityLevel *string `pulumi:"durabilityLevel"`
	// The range of ephemeral ports that nodes in this node type should be configured with.
	EphemeralPorts *EndpointRangeDescriptionResponse `pulumi:"ephemeralPorts"`
	// The HTTP cluster management endpoint port.
	HttpGatewayEndpointPort int `pulumi:"httpGatewayEndpointPort"`
	// The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
	IsPrimary bool `pulumi:"isPrimary"`
	// The name of the node type.
	Name string `pulumi:"name"`
	// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
	PlacementProperties map[string]string `pulumi:"placementProperties"`
	// The endpoint used by reverse proxy.
	ReverseProxyEndpointPort *int `pulumi:"reverseProxyEndpointPort"`
	// The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
	VmInstanceCount int `pulumi:"vmInstanceCount"`
}

// NodeTypeDescriptionResponseInput is an input type that accepts NodeTypeDescriptionResponseArgs and NodeTypeDescriptionResponseOutput values.
// You can construct a concrete instance of `NodeTypeDescriptionResponseInput` via:
//
//          NodeTypeDescriptionResponseArgs{...}
type NodeTypeDescriptionResponseInput interface {
	pulumi.Input

	ToNodeTypeDescriptionResponseOutput() NodeTypeDescriptionResponseOutput
	ToNodeTypeDescriptionResponseOutputWithContext(context.Context) NodeTypeDescriptionResponseOutput
}

// Describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
type NodeTypeDescriptionResponseArgs struct {
	// The range of ports from which cluster assigned port to Service Fabric applications.
	ApplicationPorts EndpointRangeDescriptionResponsePtrInput `pulumi:"applicationPorts"`
	// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
	Capacities pulumi.StringMapInput `pulumi:"capacities"`
	// The TCP cluster management endpoint port.
	ClientConnectionEndpointPort pulumi.IntInput `pulumi:"clientConnectionEndpointPort"`
	// The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
	//
	//   - Bronze - No privileges. This is the default.
	//   - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.
	//   - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
	DurabilityLevel pulumi.StringPtrInput `pulumi:"durabilityLevel"`
	// The range of ephemeral ports that nodes in this node type should be configured with.
	EphemeralPorts EndpointRangeDescriptionResponsePtrInput `pulumi:"ephemeralPorts"`
	// The HTTP cluster management endpoint port.
	HttpGatewayEndpointPort pulumi.IntInput `pulumi:"httpGatewayEndpointPort"`
	// The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
	IsPrimary pulumi.BoolInput `pulumi:"isPrimary"`
	// The name of the node type.
	Name pulumi.StringInput `pulumi:"name"`
	// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
	PlacementProperties pulumi.StringMapInput `pulumi:"placementProperties"`
	// The endpoint used by reverse proxy.
	ReverseProxyEndpointPort pulumi.IntPtrInput `pulumi:"reverseProxyEndpointPort"`
	// The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
	VmInstanceCount pulumi.IntInput `pulumi:"vmInstanceCount"`
}

func (NodeTypeDescriptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTypeDescriptionResponse)(nil)).Elem()
}

func (i NodeTypeDescriptionResponseArgs) ToNodeTypeDescriptionResponseOutput() NodeTypeDescriptionResponseOutput {
	return i.ToNodeTypeDescriptionResponseOutputWithContext(context.Background())
}

func (i NodeTypeDescriptionResponseArgs) ToNodeTypeDescriptionResponseOutputWithContext(ctx context.Context) NodeTypeDescriptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTypeDescriptionResponseOutput)
}

// NodeTypeDescriptionResponseArrayInput is an input type that accepts NodeTypeDescriptionResponseArray and NodeTypeDescriptionResponseArrayOutput values.
// You can construct a concrete instance of `NodeTypeDescriptionResponseArrayInput` via:
//
//          NodeTypeDescriptionResponseArray{ NodeTypeDescriptionResponseArgs{...} }
type NodeTypeDescriptionResponseArrayInput interface {
	pulumi.Input

	ToNodeTypeDescriptionResponseArrayOutput() NodeTypeDescriptionResponseArrayOutput
	ToNodeTypeDescriptionResponseArrayOutputWithContext(context.Context) NodeTypeDescriptionResponseArrayOutput
}

type NodeTypeDescriptionResponseArray []NodeTypeDescriptionResponseInput

func (NodeTypeDescriptionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeTypeDescriptionResponse)(nil)).Elem()
}

func (i NodeTypeDescriptionResponseArray) ToNodeTypeDescriptionResponseArrayOutput() NodeTypeDescriptionResponseArrayOutput {
	return i.ToNodeTypeDescriptionResponseArrayOutputWithContext(context.Background())
}

func (i NodeTypeDescriptionResponseArray) ToNodeTypeDescriptionResponseArrayOutputWithContext(ctx context.Context) NodeTypeDescriptionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTypeDescriptionResponseArrayOutput)
}

// Describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
type NodeTypeDescriptionResponseOutput struct{ *pulumi.OutputState }

func (NodeTypeDescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTypeDescriptionResponse)(nil)).Elem()
}

func (o NodeTypeDescriptionResponseOutput) ToNodeTypeDescriptionResponseOutput() NodeTypeDescriptionResponseOutput {
	return o
}

func (o NodeTypeDescriptionResponseOutput) ToNodeTypeDescriptionResponseOutputWithContext(ctx context.Context) NodeTypeDescriptionResponseOutput {
	return o
}

// The range of ports from which cluster assigned port to Service Fabric applications.
func (o NodeTypeDescriptionResponseOutput) ApplicationPorts() EndpointRangeDescriptionResponsePtrOutput {
	return o.ApplyT(func(v NodeTypeDescriptionResponse) *EndpointRangeDescriptionResponse { return v.ApplicationPorts }).(EndpointRangeDescriptionResponsePtrOutput)
}

// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
func (o NodeTypeDescriptionResponseOutput) Capacities() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeTypeDescriptionResponse) map[string]string { return v.Capacities }).(pulumi.StringMapOutput)
}

// The TCP cluster management endpoint port.
func (o NodeTypeDescriptionResponseOutput) ClientConnectionEndpointPort() pulumi.IntOutput {
	return o.ApplyT(func(v NodeTypeDescriptionResponse) int { return v.ClientConnectionEndpointPort }).(pulumi.IntOutput)
}

// The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
//
//   - Bronze - No privileges. This is the default.
//   - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.
//   - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
func (o NodeTypeDescriptionResponseOutput) DurabilityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeTypeDescriptionResponse) *string { return v.DurabilityLevel }).(pulumi.StringPtrOutput)
}

// The range of ephemeral ports that nodes in this node type should be configured with.
func (o NodeTypeDescriptionResponseOutput) EphemeralPorts() EndpointRangeDescriptionResponsePtrOutput {
	return o.ApplyT(func(v NodeTypeDescriptionResponse) *EndpointRangeDescriptionResponse { return v.EphemeralPorts }).(EndpointRangeDescriptionResponsePtrOutput)
}

// The HTTP cluster management endpoint port.
func (o NodeTypeDescriptionResponseOutput) HttpGatewayEndpointPort() pulumi.IntOutput {
	return o.ApplyT(func(v NodeTypeDescriptionResponse) int { return v.HttpGatewayEndpointPort }).(pulumi.IntOutput)
}

// The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
func (o NodeTypeDescriptionResponseOutput) IsPrimary() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeTypeDescriptionResponse) bool { return v.IsPrimary }).(pulumi.BoolOutput)
}

// The name of the node type.
func (o NodeTypeDescriptionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTypeDescriptionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
func (o NodeTypeDescriptionResponseOutput) PlacementProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeTypeDescriptionResponse) map[string]string { return v.PlacementProperties }).(pulumi.StringMapOutput)
}

// The endpoint used by reverse proxy.
func (o NodeTypeDescriptionResponseOutput) ReverseProxyEndpointPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeTypeDescriptionResponse) *int { return v.ReverseProxyEndpointPort }).(pulumi.IntPtrOutput)
}

// The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
func (o NodeTypeDescriptionResponseOutput) VmInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeTypeDescriptionResponse) int { return v.VmInstanceCount }).(pulumi.IntOutput)
}

type NodeTypeDescriptionResponseArrayOutput struct{ *pulumi.OutputState }

func (NodeTypeDescriptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeTypeDescriptionResponse)(nil)).Elem()
}

func (o NodeTypeDescriptionResponseArrayOutput) ToNodeTypeDescriptionResponseArrayOutput() NodeTypeDescriptionResponseArrayOutput {
	return o
}

func (o NodeTypeDescriptionResponseArrayOutput) ToNodeTypeDescriptionResponseArrayOutputWithContext(ctx context.Context) NodeTypeDescriptionResponseArrayOutput {
	return o
}

func (o NodeTypeDescriptionResponseArrayOutput) Index(i pulumi.IntInput) NodeTypeDescriptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeTypeDescriptionResponse {
		return vs[0].([]NodeTypeDescriptionResponse)[vs[1].(int)]
	}).(NodeTypeDescriptionResponseOutput)
}

// Describes how the service is partitioned.
type PartitionSchemeDescription struct {
	// Specifies how the service is partitioned.
	PartitionScheme string `pulumi:"partitionScheme"`
}

// PartitionSchemeDescriptionInput is an input type that accepts PartitionSchemeDescriptionArgs and PartitionSchemeDescriptionOutput values.
// You can construct a concrete instance of `PartitionSchemeDescriptionInput` via:
//
//          PartitionSchemeDescriptionArgs{...}
type PartitionSchemeDescriptionInput interface {
	pulumi.Input

	ToPartitionSchemeDescriptionOutput() PartitionSchemeDescriptionOutput
	ToPartitionSchemeDescriptionOutputWithContext(context.Context) PartitionSchemeDescriptionOutput
}

// Describes how the service is partitioned.
type PartitionSchemeDescriptionArgs struct {
	// Specifies how the service is partitioned.
	PartitionScheme pulumi.StringInput `pulumi:"partitionScheme"`
}

func (PartitionSchemeDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionSchemeDescription)(nil)).Elem()
}

func (i PartitionSchemeDescriptionArgs) ToPartitionSchemeDescriptionOutput() PartitionSchemeDescriptionOutput {
	return i.ToPartitionSchemeDescriptionOutputWithContext(context.Background())
}

func (i PartitionSchemeDescriptionArgs) ToPartitionSchemeDescriptionOutputWithContext(ctx context.Context) PartitionSchemeDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionSchemeDescriptionOutput)
}

func (i PartitionSchemeDescriptionArgs) ToPartitionSchemeDescriptionPtrOutput() PartitionSchemeDescriptionPtrOutput {
	return i.ToPartitionSchemeDescriptionPtrOutputWithContext(context.Background())
}

func (i PartitionSchemeDescriptionArgs) ToPartitionSchemeDescriptionPtrOutputWithContext(ctx context.Context) PartitionSchemeDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionSchemeDescriptionOutput).ToPartitionSchemeDescriptionPtrOutputWithContext(ctx)
}

// PartitionSchemeDescriptionPtrInput is an input type that accepts PartitionSchemeDescriptionArgs, PartitionSchemeDescriptionPtr and PartitionSchemeDescriptionPtrOutput values.
// You can construct a concrete instance of `PartitionSchemeDescriptionPtrInput` via:
//
//          PartitionSchemeDescriptionArgs{...}
//
//  or:
//
//          nil
type PartitionSchemeDescriptionPtrInput interface {
	pulumi.Input

	ToPartitionSchemeDescriptionPtrOutput() PartitionSchemeDescriptionPtrOutput
	ToPartitionSchemeDescriptionPtrOutputWithContext(context.Context) PartitionSchemeDescriptionPtrOutput
}

type partitionSchemeDescriptionPtrType PartitionSchemeDescriptionArgs

func PartitionSchemeDescriptionPtr(v *PartitionSchemeDescriptionArgs) PartitionSchemeDescriptionPtrInput {
	return (*partitionSchemeDescriptionPtrType)(v)
}

func (*partitionSchemeDescriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionSchemeDescription)(nil)).Elem()
}

func (i *partitionSchemeDescriptionPtrType) ToPartitionSchemeDescriptionPtrOutput() PartitionSchemeDescriptionPtrOutput {
	return i.ToPartitionSchemeDescriptionPtrOutputWithContext(context.Background())
}

func (i *partitionSchemeDescriptionPtrType) ToPartitionSchemeDescriptionPtrOutputWithContext(ctx context.Context) PartitionSchemeDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionSchemeDescriptionPtrOutput)
}

// Describes how the service is partitioned.
type PartitionSchemeDescriptionOutput struct{ *pulumi.OutputState }

func (PartitionSchemeDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionSchemeDescription)(nil)).Elem()
}

func (o PartitionSchemeDescriptionOutput) ToPartitionSchemeDescriptionOutput() PartitionSchemeDescriptionOutput {
	return o
}

func (o PartitionSchemeDescriptionOutput) ToPartitionSchemeDescriptionOutputWithContext(ctx context.Context) PartitionSchemeDescriptionOutput {
	return o
}

func (o PartitionSchemeDescriptionOutput) ToPartitionSchemeDescriptionPtrOutput() PartitionSchemeDescriptionPtrOutput {
	return o.ToPartitionSchemeDescriptionPtrOutputWithContext(context.Background())
}

func (o PartitionSchemeDescriptionOutput) ToPartitionSchemeDescriptionPtrOutputWithContext(ctx context.Context) PartitionSchemeDescriptionPtrOutput {
	return o.ApplyT(func(v PartitionSchemeDescription) *PartitionSchemeDescription {
		return &v
	}).(PartitionSchemeDescriptionPtrOutput)
}

// Specifies how the service is partitioned.
func (o PartitionSchemeDescriptionOutput) PartitionScheme() pulumi.StringOutput {
	return o.ApplyT(func(v PartitionSchemeDescription) string { return v.PartitionScheme }).(pulumi.StringOutput)
}

type PartitionSchemeDescriptionPtrOutput struct{ *pulumi.OutputState }

func (PartitionSchemeDescriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionSchemeDescription)(nil)).Elem()
}

func (o PartitionSchemeDescriptionPtrOutput) ToPartitionSchemeDescriptionPtrOutput() PartitionSchemeDescriptionPtrOutput {
	return o
}

func (o PartitionSchemeDescriptionPtrOutput) ToPartitionSchemeDescriptionPtrOutputWithContext(ctx context.Context) PartitionSchemeDescriptionPtrOutput {
	return o
}

func (o PartitionSchemeDescriptionPtrOutput) Elem() PartitionSchemeDescriptionOutput {
	return o.ApplyT(func(v *PartitionSchemeDescription) PartitionSchemeDescription { return *v }).(PartitionSchemeDescriptionOutput)
}

// Specifies how the service is partitioned.
func (o PartitionSchemeDescriptionPtrOutput) PartitionScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartitionSchemeDescription) *string {
		if v == nil {
			return nil
		}
		return &v.PartitionScheme
	}).(pulumi.StringPtrOutput)
}

// Describes how the service is partitioned.
type PartitionSchemeDescriptionResponse struct {
	// Specifies how the service is partitioned.
	PartitionScheme string `pulumi:"partitionScheme"`
}

// PartitionSchemeDescriptionResponseInput is an input type that accepts PartitionSchemeDescriptionResponseArgs and PartitionSchemeDescriptionResponseOutput values.
// You can construct a concrete instance of `PartitionSchemeDescriptionResponseInput` via:
//
//          PartitionSchemeDescriptionResponseArgs{...}
type PartitionSchemeDescriptionResponseInput interface {
	pulumi.Input

	ToPartitionSchemeDescriptionResponseOutput() PartitionSchemeDescriptionResponseOutput
	ToPartitionSchemeDescriptionResponseOutputWithContext(context.Context) PartitionSchemeDescriptionResponseOutput
}

// Describes how the service is partitioned.
type PartitionSchemeDescriptionResponseArgs struct {
	// Specifies how the service is partitioned.
	PartitionScheme pulumi.StringInput `pulumi:"partitionScheme"`
}

func (PartitionSchemeDescriptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionSchemeDescriptionResponse)(nil)).Elem()
}

func (i PartitionSchemeDescriptionResponseArgs) ToPartitionSchemeDescriptionResponseOutput() PartitionSchemeDescriptionResponseOutput {
	return i.ToPartitionSchemeDescriptionResponseOutputWithContext(context.Background())
}

func (i PartitionSchemeDescriptionResponseArgs) ToPartitionSchemeDescriptionResponseOutputWithContext(ctx context.Context) PartitionSchemeDescriptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionSchemeDescriptionResponseOutput)
}

func (i PartitionSchemeDescriptionResponseArgs) ToPartitionSchemeDescriptionResponsePtrOutput() PartitionSchemeDescriptionResponsePtrOutput {
	return i.ToPartitionSchemeDescriptionResponsePtrOutputWithContext(context.Background())
}

func (i PartitionSchemeDescriptionResponseArgs) ToPartitionSchemeDescriptionResponsePtrOutputWithContext(ctx context.Context) PartitionSchemeDescriptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionSchemeDescriptionResponseOutput).ToPartitionSchemeDescriptionResponsePtrOutputWithContext(ctx)
}

// PartitionSchemeDescriptionResponsePtrInput is an input type that accepts PartitionSchemeDescriptionResponseArgs, PartitionSchemeDescriptionResponsePtr and PartitionSchemeDescriptionResponsePtrOutput values.
// You can construct a concrete instance of `PartitionSchemeDescriptionResponsePtrInput` via:
//
//          PartitionSchemeDescriptionResponseArgs{...}
//
//  or:
//
//          nil
type PartitionSchemeDescriptionResponsePtrInput interface {
	pulumi.Input

	ToPartitionSchemeDescriptionResponsePtrOutput() PartitionSchemeDescriptionResponsePtrOutput
	ToPartitionSchemeDescriptionResponsePtrOutputWithContext(context.Context) PartitionSchemeDescriptionResponsePtrOutput
}

type partitionSchemeDescriptionResponsePtrType PartitionSchemeDescriptionResponseArgs

func PartitionSchemeDescriptionResponsePtr(v *PartitionSchemeDescriptionResponseArgs) PartitionSchemeDescriptionResponsePtrInput {
	return (*partitionSchemeDescriptionResponsePtrType)(v)
}

func (*partitionSchemeDescriptionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionSchemeDescriptionResponse)(nil)).Elem()
}

func (i *partitionSchemeDescriptionResponsePtrType) ToPartitionSchemeDescriptionResponsePtrOutput() PartitionSchemeDescriptionResponsePtrOutput {
	return i.ToPartitionSchemeDescriptionResponsePtrOutputWithContext(context.Background())
}

func (i *partitionSchemeDescriptionResponsePtrType) ToPartitionSchemeDescriptionResponsePtrOutputWithContext(ctx context.Context) PartitionSchemeDescriptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitionSchemeDescriptionResponsePtrOutput)
}

// Describes how the service is partitioned.
type PartitionSchemeDescriptionResponseOutput struct{ *pulumi.OutputState }

func (PartitionSchemeDescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionSchemeDescriptionResponse)(nil)).Elem()
}

func (o PartitionSchemeDescriptionResponseOutput) ToPartitionSchemeDescriptionResponseOutput() PartitionSchemeDescriptionResponseOutput {
	return o
}

func (o PartitionSchemeDescriptionResponseOutput) ToPartitionSchemeDescriptionResponseOutputWithContext(ctx context.Context) PartitionSchemeDescriptionResponseOutput {
	return o
}

func (o PartitionSchemeDescriptionResponseOutput) ToPartitionSchemeDescriptionResponsePtrOutput() PartitionSchemeDescriptionResponsePtrOutput {
	return o.ToPartitionSchemeDescriptionResponsePtrOutputWithContext(context.Background())
}

func (o PartitionSchemeDescriptionResponseOutput) ToPartitionSchemeDescriptionResponsePtrOutputWithContext(ctx context.Context) PartitionSchemeDescriptionResponsePtrOutput {
	return o.ApplyT(func(v PartitionSchemeDescriptionResponse) *PartitionSchemeDescriptionResponse {
		return &v
	}).(PartitionSchemeDescriptionResponsePtrOutput)
}

// Specifies how the service is partitioned.
func (o PartitionSchemeDescriptionResponseOutput) PartitionScheme() pulumi.StringOutput {
	return o.ApplyT(func(v PartitionSchemeDescriptionResponse) string { return v.PartitionScheme }).(pulumi.StringOutput)
}

type PartitionSchemeDescriptionResponsePtrOutput struct{ *pulumi.OutputState }

func (PartitionSchemeDescriptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartitionSchemeDescriptionResponse)(nil)).Elem()
}

func (o PartitionSchemeDescriptionResponsePtrOutput) ToPartitionSchemeDescriptionResponsePtrOutput() PartitionSchemeDescriptionResponsePtrOutput {
	return o
}

func (o PartitionSchemeDescriptionResponsePtrOutput) ToPartitionSchemeDescriptionResponsePtrOutputWithContext(ctx context.Context) PartitionSchemeDescriptionResponsePtrOutput {
	return o
}

func (o PartitionSchemeDescriptionResponsePtrOutput) Elem() PartitionSchemeDescriptionResponseOutput {
	return o.ApplyT(func(v *PartitionSchemeDescriptionResponse) PartitionSchemeDescriptionResponse { return *v }).(PartitionSchemeDescriptionResponseOutput)
}

// Specifies how the service is partitioned.
func (o PartitionSchemeDescriptionResponsePtrOutput) PartitionScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartitionSchemeDescriptionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PartitionScheme
	}).(pulumi.StringPtrOutput)
}

// Describes the server certificate details using common name.
type ServerCertificateCommonName struct {
	// The common name of the server certificate.
	CertificateCommonName string `pulumi:"certificateCommonName"`
	// The issuer thumbprint of the server certificate.
	CertificateIssuerThumbprint string `pulumi:"certificateIssuerThumbprint"`
}

// ServerCertificateCommonNameInput is an input type that accepts ServerCertificateCommonNameArgs and ServerCertificateCommonNameOutput values.
// You can construct a concrete instance of `ServerCertificateCommonNameInput` via:
//
//          ServerCertificateCommonNameArgs{...}
type ServerCertificateCommonNameInput interface {
	pulumi.Input

	ToServerCertificateCommonNameOutput() ServerCertificateCommonNameOutput
	ToServerCertificateCommonNameOutputWithContext(context.Context) ServerCertificateCommonNameOutput
}

// Describes the server certificate details using common name.
type ServerCertificateCommonNameArgs struct {
	// The common name of the server certificate.
	CertificateCommonName pulumi.StringInput `pulumi:"certificateCommonName"`
	// The issuer thumbprint of the server certificate.
	CertificateIssuerThumbprint pulumi.StringInput `pulumi:"certificateIssuerThumbprint"`
}

func (ServerCertificateCommonNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerCertificateCommonName)(nil)).Elem()
}

func (i ServerCertificateCommonNameArgs) ToServerCertificateCommonNameOutput() ServerCertificateCommonNameOutput {
	return i.ToServerCertificateCommonNameOutputWithContext(context.Background())
}

func (i ServerCertificateCommonNameArgs) ToServerCertificateCommonNameOutputWithContext(ctx context.Context) ServerCertificateCommonNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateCommonNameOutput)
}

// ServerCertificateCommonNameArrayInput is an input type that accepts ServerCertificateCommonNameArray and ServerCertificateCommonNameArrayOutput values.
// You can construct a concrete instance of `ServerCertificateCommonNameArrayInput` via:
//
//          ServerCertificateCommonNameArray{ ServerCertificateCommonNameArgs{...} }
type ServerCertificateCommonNameArrayInput interface {
	pulumi.Input

	ToServerCertificateCommonNameArrayOutput() ServerCertificateCommonNameArrayOutput
	ToServerCertificateCommonNameArrayOutputWithContext(context.Context) ServerCertificateCommonNameArrayOutput
}

type ServerCertificateCommonNameArray []ServerCertificateCommonNameInput

func (ServerCertificateCommonNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerCertificateCommonName)(nil)).Elem()
}

func (i ServerCertificateCommonNameArray) ToServerCertificateCommonNameArrayOutput() ServerCertificateCommonNameArrayOutput {
	return i.ToServerCertificateCommonNameArrayOutputWithContext(context.Background())
}

func (i ServerCertificateCommonNameArray) ToServerCertificateCommonNameArrayOutputWithContext(ctx context.Context) ServerCertificateCommonNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateCommonNameArrayOutput)
}

// Describes the server certificate details using common name.
type ServerCertificateCommonNameOutput struct{ *pulumi.OutputState }

func (ServerCertificateCommonNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerCertificateCommonName)(nil)).Elem()
}

func (o ServerCertificateCommonNameOutput) ToServerCertificateCommonNameOutput() ServerCertificateCommonNameOutput {
	return o
}

func (o ServerCertificateCommonNameOutput) ToServerCertificateCommonNameOutputWithContext(ctx context.Context) ServerCertificateCommonNameOutput {
	return o
}

// The common name of the server certificate.
func (o ServerCertificateCommonNameOutput) CertificateCommonName() pulumi.StringOutput {
	return o.ApplyT(func(v ServerCertificateCommonName) string { return v.CertificateCommonName }).(pulumi.StringOutput)
}

// The issuer thumbprint of the server certificate.
func (o ServerCertificateCommonNameOutput) CertificateIssuerThumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v ServerCertificateCommonName) string { return v.CertificateIssuerThumbprint }).(pulumi.StringOutput)
}

type ServerCertificateCommonNameArrayOutput struct{ *pulumi.OutputState }

func (ServerCertificateCommonNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerCertificateCommonName)(nil)).Elem()
}

func (o ServerCertificateCommonNameArrayOutput) ToServerCertificateCommonNameArrayOutput() ServerCertificateCommonNameArrayOutput {
	return o
}

func (o ServerCertificateCommonNameArrayOutput) ToServerCertificateCommonNameArrayOutputWithContext(ctx context.Context) ServerCertificateCommonNameArrayOutput {
	return o
}

func (o ServerCertificateCommonNameArrayOutput) Index(i pulumi.IntInput) ServerCertificateCommonNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerCertificateCommonName {
		return vs[0].([]ServerCertificateCommonName)[vs[1].(int)]
	}).(ServerCertificateCommonNameOutput)
}

// Describes the server certificate details using common name.
type ServerCertificateCommonNameResponse struct {
	// The common name of the server certificate.
	CertificateCommonName string `pulumi:"certificateCommonName"`
	// The issuer thumbprint of the server certificate.
	CertificateIssuerThumbprint string `pulumi:"certificateIssuerThumbprint"`
}

// ServerCertificateCommonNameResponseInput is an input type that accepts ServerCertificateCommonNameResponseArgs and ServerCertificateCommonNameResponseOutput values.
// You can construct a concrete instance of `ServerCertificateCommonNameResponseInput` via:
//
//          ServerCertificateCommonNameResponseArgs{...}
type ServerCertificateCommonNameResponseInput interface {
	pulumi.Input

	ToServerCertificateCommonNameResponseOutput() ServerCertificateCommonNameResponseOutput
	ToServerCertificateCommonNameResponseOutputWithContext(context.Context) ServerCertificateCommonNameResponseOutput
}

// Describes the server certificate details using common name.
type ServerCertificateCommonNameResponseArgs struct {
	// The common name of the server certificate.
	CertificateCommonName pulumi.StringInput `pulumi:"certificateCommonName"`
	// The issuer thumbprint of the server certificate.
	CertificateIssuerThumbprint pulumi.StringInput `pulumi:"certificateIssuerThumbprint"`
}

func (ServerCertificateCommonNameResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerCertificateCommonNameResponse)(nil)).Elem()
}

func (i ServerCertificateCommonNameResponseArgs) ToServerCertificateCommonNameResponseOutput() ServerCertificateCommonNameResponseOutput {
	return i.ToServerCertificateCommonNameResponseOutputWithContext(context.Background())
}

func (i ServerCertificateCommonNameResponseArgs) ToServerCertificateCommonNameResponseOutputWithContext(ctx context.Context) ServerCertificateCommonNameResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateCommonNameResponseOutput)
}

// ServerCertificateCommonNameResponseArrayInput is an input type that accepts ServerCertificateCommonNameResponseArray and ServerCertificateCommonNameResponseArrayOutput values.
// You can construct a concrete instance of `ServerCertificateCommonNameResponseArrayInput` via:
//
//          ServerCertificateCommonNameResponseArray{ ServerCertificateCommonNameResponseArgs{...} }
type ServerCertificateCommonNameResponseArrayInput interface {
	pulumi.Input

	ToServerCertificateCommonNameResponseArrayOutput() ServerCertificateCommonNameResponseArrayOutput
	ToServerCertificateCommonNameResponseArrayOutputWithContext(context.Context) ServerCertificateCommonNameResponseArrayOutput
}

type ServerCertificateCommonNameResponseArray []ServerCertificateCommonNameResponseInput

func (ServerCertificateCommonNameResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerCertificateCommonNameResponse)(nil)).Elem()
}

func (i ServerCertificateCommonNameResponseArray) ToServerCertificateCommonNameResponseArrayOutput() ServerCertificateCommonNameResponseArrayOutput {
	return i.ToServerCertificateCommonNameResponseArrayOutputWithContext(context.Background())
}

func (i ServerCertificateCommonNameResponseArray) ToServerCertificateCommonNameResponseArrayOutputWithContext(ctx context.Context) ServerCertificateCommonNameResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateCommonNameResponseArrayOutput)
}

// Describes the server certificate details using common name.
type ServerCertificateCommonNameResponseOutput struct{ *pulumi.OutputState }

func (ServerCertificateCommonNameResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerCertificateCommonNameResponse)(nil)).Elem()
}

func (o ServerCertificateCommonNameResponseOutput) ToServerCertificateCommonNameResponseOutput() ServerCertificateCommonNameResponseOutput {
	return o
}

func (o ServerCertificateCommonNameResponseOutput) ToServerCertificateCommonNameResponseOutputWithContext(ctx context.Context) ServerCertificateCommonNameResponseOutput {
	return o
}

// The common name of the server certificate.
func (o ServerCertificateCommonNameResponseOutput) CertificateCommonName() pulumi.StringOutput {
	return o.ApplyT(func(v ServerCertificateCommonNameResponse) string { return v.CertificateCommonName }).(pulumi.StringOutput)
}

// The issuer thumbprint of the server certificate.
func (o ServerCertificateCommonNameResponseOutput) CertificateIssuerThumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v ServerCertificateCommonNameResponse) string { return v.CertificateIssuerThumbprint }).(pulumi.StringOutput)
}

type ServerCertificateCommonNameResponseArrayOutput struct{ *pulumi.OutputState }

func (ServerCertificateCommonNameResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerCertificateCommonNameResponse)(nil)).Elem()
}

func (o ServerCertificateCommonNameResponseArrayOutput) ToServerCertificateCommonNameResponseArrayOutput() ServerCertificateCommonNameResponseArrayOutput {
	return o
}

func (o ServerCertificateCommonNameResponseArrayOutput) ToServerCertificateCommonNameResponseArrayOutputWithContext(ctx context.Context) ServerCertificateCommonNameResponseArrayOutput {
	return o
}

func (o ServerCertificateCommonNameResponseArrayOutput) Index(i pulumi.IntInput) ServerCertificateCommonNameResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerCertificateCommonNameResponse {
		return vs[0].([]ServerCertificateCommonNameResponse)[vs[1].(int)]
	}).(ServerCertificateCommonNameResponseOutput)
}

// Describes a list of server certificates referenced by common name that are used to secure the cluster.
type ServerCertificateCommonNames struct {
	// The list of server certificates referenced by common name that are used to secure the cluster.
	CommonNames []ServerCertificateCommonName `pulumi:"commonNames"`
	// The local certificate store location.
	X509StoreName *string `pulumi:"x509StoreName"`
}

// ServerCertificateCommonNamesInput is an input type that accepts ServerCertificateCommonNamesArgs and ServerCertificateCommonNamesOutput values.
// You can construct a concrete instance of `ServerCertificateCommonNamesInput` via:
//
//          ServerCertificateCommonNamesArgs{...}
type ServerCertificateCommonNamesInput interface {
	pulumi.Input

	ToServerCertificateCommonNamesOutput() ServerCertificateCommonNamesOutput
	ToServerCertificateCommonNamesOutputWithContext(context.Context) ServerCertificateCommonNamesOutput
}

// Describes a list of server certificates referenced by common name that are used to secure the cluster.
type ServerCertificateCommonNamesArgs struct {
	// The list of server certificates referenced by common name that are used to secure the cluster.
	CommonNames ServerCertificateCommonNameArrayInput `pulumi:"commonNames"`
	// The local certificate store location.
	X509StoreName pulumi.StringPtrInput `pulumi:"x509StoreName"`
}

func (ServerCertificateCommonNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerCertificateCommonNames)(nil)).Elem()
}

func (i ServerCertificateCommonNamesArgs) ToServerCertificateCommonNamesOutput() ServerCertificateCommonNamesOutput {
	return i.ToServerCertificateCommonNamesOutputWithContext(context.Background())
}

func (i ServerCertificateCommonNamesArgs) ToServerCertificateCommonNamesOutputWithContext(ctx context.Context) ServerCertificateCommonNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateCommonNamesOutput)
}

func (i ServerCertificateCommonNamesArgs) ToServerCertificateCommonNamesPtrOutput() ServerCertificateCommonNamesPtrOutput {
	return i.ToServerCertificateCommonNamesPtrOutputWithContext(context.Background())
}

func (i ServerCertificateCommonNamesArgs) ToServerCertificateCommonNamesPtrOutputWithContext(ctx context.Context) ServerCertificateCommonNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateCommonNamesOutput).ToServerCertificateCommonNamesPtrOutputWithContext(ctx)
}

// ServerCertificateCommonNamesPtrInput is an input type that accepts ServerCertificateCommonNamesArgs, ServerCertificateCommonNamesPtr and ServerCertificateCommonNamesPtrOutput values.
// You can construct a concrete instance of `ServerCertificateCommonNamesPtrInput` via:
//
//          ServerCertificateCommonNamesArgs{...}
//
//  or:
//
//          nil
type ServerCertificateCommonNamesPtrInput interface {
	pulumi.Input

	ToServerCertificateCommonNamesPtrOutput() ServerCertificateCommonNamesPtrOutput
	ToServerCertificateCommonNamesPtrOutputWithContext(context.Context) ServerCertificateCommonNamesPtrOutput
}

type serverCertificateCommonNamesPtrType ServerCertificateCommonNamesArgs

func ServerCertificateCommonNamesPtr(v *ServerCertificateCommonNamesArgs) ServerCertificateCommonNamesPtrInput {
	return (*serverCertificateCommonNamesPtrType)(v)
}

func (*serverCertificateCommonNamesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerCertificateCommonNames)(nil)).Elem()
}

func (i *serverCertificateCommonNamesPtrType) ToServerCertificateCommonNamesPtrOutput() ServerCertificateCommonNamesPtrOutput {
	return i.ToServerCertificateCommonNamesPtrOutputWithContext(context.Background())
}

func (i *serverCertificateCommonNamesPtrType) ToServerCertificateCommonNamesPtrOutputWithContext(ctx context.Context) ServerCertificateCommonNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateCommonNamesPtrOutput)
}

// Describes a list of server certificates referenced by common name that are used to secure the cluster.
type ServerCertificateCommonNamesOutput struct{ *pulumi.OutputState }

func (ServerCertificateCommonNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerCertificateCommonNames)(nil)).Elem()
}

func (o ServerCertificateCommonNamesOutput) ToServerCertificateCommonNamesOutput() ServerCertificateCommonNamesOutput {
	return o
}

func (o ServerCertificateCommonNamesOutput) ToServerCertificateCommonNamesOutputWithContext(ctx context.Context) ServerCertificateCommonNamesOutput {
	return o
}

func (o ServerCertificateCommonNamesOutput) ToServerCertificateCommonNamesPtrOutput() ServerCertificateCommonNamesPtrOutput {
	return o.ToServerCertificateCommonNamesPtrOutputWithContext(context.Background())
}

func (o ServerCertificateCommonNamesOutput) ToServerCertificateCommonNamesPtrOutputWithContext(ctx context.Context) ServerCertificateCommonNamesPtrOutput {
	return o.ApplyT(func(v ServerCertificateCommonNames) *ServerCertificateCommonNames {
		return &v
	}).(ServerCertificateCommonNamesPtrOutput)
}

// The list of server certificates referenced by common name that are used to secure the cluster.
func (o ServerCertificateCommonNamesOutput) CommonNames() ServerCertificateCommonNameArrayOutput {
	return o.ApplyT(func(v ServerCertificateCommonNames) []ServerCertificateCommonName { return v.CommonNames }).(ServerCertificateCommonNameArrayOutput)
}

// The local certificate store location.
func (o ServerCertificateCommonNamesOutput) X509StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerCertificateCommonNames) *string { return v.X509StoreName }).(pulumi.StringPtrOutput)
}

type ServerCertificateCommonNamesPtrOutput struct{ *pulumi.OutputState }

func (ServerCertificateCommonNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerCertificateCommonNames)(nil)).Elem()
}

func (o ServerCertificateCommonNamesPtrOutput) ToServerCertificateCommonNamesPtrOutput() ServerCertificateCommonNamesPtrOutput {
	return o
}

func (o ServerCertificateCommonNamesPtrOutput) ToServerCertificateCommonNamesPtrOutputWithContext(ctx context.Context) ServerCertificateCommonNamesPtrOutput {
	return o
}

func (o ServerCertificateCommonNamesPtrOutput) Elem() ServerCertificateCommonNamesOutput {
	return o.ApplyT(func(v *ServerCertificateCommonNames) ServerCertificateCommonNames { return *v }).(ServerCertificateCommonNamesOutput)
}

// The list of server certificates referenced by common name that are used to secure the cluster.
func (o ServerCertificateCommonNamesPtrOutput) CommonNames() ServerCertificateCommonNameArrayOutput {
	return o.ApplyT(func(v *ServerCertificateCommonNames) []ServerCertificateCommonName {
		if v == nil {
			return nil
		}
		return v.CommonNames
	}).(ServerCertificateCommonNameArrayOutput)
}

// The local certificate store location.
func (o ServerCertificateCommonNamesPtrOutput) X509StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerCertificateCommonNames) *string {
		if v == nil {
			return nil
		}
		return v.X509StoreName
	}).(pulumi.StringPtrOutput)
}

// Describes a list of server certificates referenced by common name that are used to secure the cluster.
type ServerCertificateCommonNamesResponse struct {
	// The list of server certificates referenced by common name that are used to secure the cluster.
	CommonNames []ServerCertificateCommonNameResponse `pulumi:"commonNames"`
	// The local certificate store location.
	X509StoreName *string `pulumi:"x509StoreName"`
}

// ServerCertificateCommonNamesResponseInput is an input type that accepts ServerCertificateCommonNamesResponseArgs and ServerCertificateCommonNamesResponseOutput values.
// You can construct a concrete instance of `ServerCertificateCommonNamesResponseInput` via:
//
//          ServerCertificateCommonNamesResponseArgs{...}
type ServerCertificateCommonNamesResponseInput interface {
	pulumi.Input

	ToServerCertificateCommonNamesResponseOutput() ServerCertificateCommonNamesResponseOutput
	ToServerCertificateCommonNamesResponseOutputWithContext(context.Context) ServerCertificateCommonNamesResponseOutput
}

// Describes a list of server certificates referenced by common name that are used to secure the cluster.
type ServerCertificateCommonNamesResponseArgs struct {
	// The list of server certificates referenced by common name that are used to secure the cluster.
	CommonNames ServerCertificateCommonNameResponseArrayInput `pulumi:"commonNames"`
	// The local certificate store location.
	X509StoreName pulumi.StringPtrInput `pulumi:"x509StoreName"`
}

func (ServerCertificateCommonNamesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerCertificateCommonNamesResponse)(nil)).Elem()
}

func (i ServerCertificateCommonNamesResponseArgs) ToServerCertificateCommonNamesResponseOutput() ServerCertificateCommonNamesResponseOutput {
	return i.ToServerCertificateCommonNamesResponseOutputWithContext(context.Background())
}

func (i ServerCertificateCommonNamesResponseArgs) ToServerCertificateCommonNamesResponseOutputWithContext(ctx context.Context) ServerCertificateCommonNamesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateCommonNamesResponseOutput)
}

func (i ServerCertificateCommonNamesResponseArgs) ToServerCertificateCommonNamesResponsePtrOutput() ServerCertificateCommonNamesResponsePtrOutput {
	return i.ToServerCertificateCommonNamesResponsePtrOutputWithContext(context.Background())
}

func (i ServerCertificateCommonNamesResponseArgs) ToServerCertificateCommonNamesResponsePtrOutputWithContext(ctx context.Context) ServerCertificateCommonNamesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateCommonNamesResponseOutput).ToServerCertificateCommonNamesResponsePtrOutputWithContext(ctx)
}

// ServerCertificateCommonNamesResponsePtrInput is an input type that accepts ServerCertificateCommonNamesResponseArgs, ServerCertificateCommonNamesResponsePtr and ServerCertificateCommonNamesResponsePtrOutput values.
// You can construct a concrete instance of `ServerCertificateCommonNamesResponsePtrInput` via:
//
//          ServerCertificateCommonNamesResponseArgs{...}
//
//  or:
//
//          nil
type ServerCertificateCommonNamesResponsePtrInput interface {
	pulumi.Input

	ToServerCertificateCommonNamesResponsePtrOutput() ServerCertificateCommonNamesResponsePtrOutput
	ToServerCertificateCommonNamesResponsePtrOutputWithContext(context.Context) ServerCertificateCommonNamesResponsePtrOutput
}

type serverCertificateCommonNamesResponsePtrType ServerCertificateCommonNamesResponseArgs

func ServerCertificateCommonNamesResponsePtr(v *ServerCertificateCommonNamesResponseArgs) ServerCertificateCommonNamesResponsePtrInput {
	return (*serverCertificateCommonNamesResponsePtrType)(v)
}

func (*serverCertificateCommonNamesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerCertificateCommonNamesResponse)(nil)).Elem()
}

func (i *serverCertificateCommonNamesResponsePtrType) ToServerCertificateCommonNamesResponsePtrOutput() ServerCertificateCommonNamesResponsePtrOutput {
	return i.ToServerCertificateCommonNamesResponsePtrOutputWithContext(context.Background())
}

func (i *serverCertificateCommonNamesResponsePtrType) ToServerCertificateCommonNamesResponsePtrOutputWithContext(ctx context.Context) ServerCertificateCommonNamesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateCommonNamesResponsePtrOutput)
}

// Describes a list of server certificates referenced by common name that are used to secure the cluster.
type ServerCertificateCommonNamesResponseOutput struct{ *pulumi.OutputState }

func (ServerCertificateCommonNamesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerCertificateCommonNamesResponse)(nil)).Elem()
}

func (o ServerCertificateCommonNamesResponseOutput) ToServerCertificateCommonNamesResponseOutput() ServerCertificateCommonNamesResponseOutput {
	return o
}

func (o ServerCertificateCommonNamesResponseOutput) ToServerCertificateCommonNamesResponseOutputWithContext(ctx context.Context) ServerCertificateCommonNamesResponseOutput {
	return o
}

func (o ServerCertificateCommonNamesResponseOutput) ToServerCertificateCommonNamesResponsePtrOutput() ServerCertificateCommonNamesResponsePtrOutput {
	return o.ToServerCertificateCommonNamesResponsePtrOutputWithContext(context.Background())
}

func (o ServerCertificateCommonNamesResponseOutput) ToServerCertificateCommonNamesResponsePtrOutputWithContext(ctx context.Context) ServerCertificateCommonNamesResponsePtrOutput {
	return o.ApplyT(func(v ServerCertificateCommonNamesResponse) *ServerCertificateCommonNamesResponse {
		return &v
	}).(ServerCertificateCommonNamesResponsePtrOutput)
}

// The list of server certificates referenced by common name that are used to secure the cluster.
func (o ServerCertificateCommonNamesResponseOutput) CommonNames() ServerCertificateCommonNameResponseArrayOutput {
	return o.ApplyT(func(v ServerCertificateCommonNamesResponse) []ServerCertificateCommonNameResponse {
		return v.CommonNames
	}).(ServerCertificateCommonNameResponseArrayOutput)
}

// The local certificate store location.
func (o ServerCertificateCommonNamesResponseOutput) X509StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerCertificateCommonNamesResponse) *string { return v.X509StoreName }).(pulumi.StringPtrOutput)
}

type ServerCertificateCommonNamesResponsePtrOutput struct{ *pulumi.OutputState }

func (ServerCertificateCommonNamesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerCertificateCommonNamesResponse)(nil)).Elem()
}

func (o ServerCertificateCommonNamesResponsePtrOutput) ToServerCertificateCommonNamesResponsePtrOutput() ServerCertificateCommonNamesResponsePtrOutput {
	return o
}

func (o ServerCertificateCommonNamesResponsePtrOutput) ToServerCertificateCommonNamesResponsePtrOutputWithContext(ctx context.Context) ServerCertificateCommonNamesResponsePtrOutput {
	return o
}

func (o ServerCertificateCommonNamesResponsePtrOutput) Elem() ServerCertificateCommonNamesResponseOutput {
	return o.ApplyT(func(v *ServerCertificateCommonNamesResponse) ServerCertificateCommonNamesResponse { return *v }).(ServerCertificateCommonNamesResponseOutput)
}

// The list of server certificates referenced by common name that are used to secure the cluster.
func (o ServerCertificateCommonNamesResponsePtrOutput) CommonNames() ServerCertificateCommonNameResponseArrayOutput {
	return o.ApplyT(func(v *ServerCertificateCommonNamesResponse) []ServerCertificateCommonNameResponse {
		if v == nil {
			return nil
		}
		return v.CommonNames
	}).(ServerCertificateCommonNameResponseArrayOutput)
}

// The local certificate store location.
func (o ServerCertificateCommonNamesResponsePtrOutput) X509StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerCertificateCommonNamesResponse) *string {
		if v == nil {
			return nil
		}
		return v.X509StoreName
	}).(pulumi.StringPtrOutput)
}

// The service resource.
type ServiceType struct {
	// Azure resource etag.
	Etag string `pulumi:"etag"`
	// It will be deprecated in New API, resource location depends on the parent resource.
	Location *string `pulumi:"location"`
	// Azure resource name.
	Name string `pulumi:"name"`
	// The service resource properties.
	Properties ServiceResourcePropertiesResponse `pulumi:"properties"`
	// Azure resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Azure resource type.
	Type string `pulumi:"type"`
}

// ServiceTypeInput is an input type that accepts ServiceTypeArgs and ServiceTypeOutput values.
// You can construct a concrete instance of `ServiceTypeInput` via:
//
//          ServiceTypeArgs{...}
type ServiceTypeInput interface {
	pulumi.Input

	ToServiceTypeOutput() ServiceTypeOutput
	ToServiceTypeOutputWithContext(context.Context) ServiceTypeOutput
}

// The service resource.
type ServiceTypeArgs struct {
	// Azure resource etag.
	Etag pulumi.StringInput `pulumi:"etag"`
	// It will be deprecated in New API, resource location depends on the parent resource.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Azure resource name.
	Name pulumi.StringInput `pulumi:"name"`
	// The service resource properties.
	Properties ServiceResourcePropertiesResponseInput `pulumi:"properties"`
	// Azure resource tags.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Azure resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceType)(nil)).Elem()
}

func (i ServiceTypeArgs) ToServiceTypeOutput() ServiceTypeOutput {
	return i.ToServiceTypeOutputWithContext(context.Background())
}

func (i ServiceTypeArgs) ToServiceTypeOutputWithContext(ctx context.Context) ServiceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTypeOutput)
}

// The service resource.
type ServiceTypeOutput struct{ *pulumi.OutputState }

func (ServiceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceType)(nil)).Elem()
}

func (o ServiceTypeOutput) ToServiceTypeOutput() ServiceTypeOutput {
	return o
}

func (o ServiceTypeOutput) ToServiceTypeOutputWithContext(ctx context.Context) ServiceTypeOutput {
	return o
}

// Azure resource etag.
func (o ServiceTypeOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceType) string { return v.Etag }).(pulumi.StringOutput)
}

// It will be deprecated in New API, resource location depends on the parent resource.
func (o ServiceTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceType) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Azure resource name.
func (o ServiceTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceType) string { return v.Name }).(pulumi.StringOutput)
}

// The service resource properties.
func (o ServiceTypeOutput) Properties() ServiceResourcePropertiesResponseOutput {
	return o.ApplyT(func(v ServiceType) ServiceResourcePropertiesResponse { return v.Properties }).(ServiceResourcePropertiesResponseOutput)
}

// Azure resource tags.
func (o ServiceTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure resource type.
func (o ServiceTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceType) string { return v.Type }).(pulumi.StringOutput)
}

// The service load metrics is given as an array of ServiceLoadMetricDescription objects.
type ServiceLoadMetricsList struct {
}

// ServiceLoadMetricsListInput is an input type that accepts ServiceLoadMetricsListArgs and ServiceLoadMetricsListOutput values.
// You can construct a concrete instance of `ServiceLoadMetricsListInput` via:
//
//          ServiceLoadMetricsListArgs{...}
type ServiceLoadMetricsListInput interface {
	pulumi.Input

	ToServiceLoadMetricsListOutput() ServiceLoadMetricsListOutput
	ToServiceLoadMetricsListOutputWithContext(context.Context) ServiceLoadMetricsListOutput
}

// The service load metrics is given as an array of ServiceLoadMetricDescription objects.
type ServiceLoadMetricsListArgs struct {
}

func (ServiceLoadMetricsListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLoadMetricsList)(nil)).Elem()
}

func (i ServiceLoadMetricsListArgs) ToServiceLoadMetricsListOutput() ServiceLoadMetricsListOutput {
	return i.ToServiceLoadMetricsListOutputWithContext(context.Background())
}

func (i ServiceLoadMetricsListArgs) ToServiceLoadMetricsListOutputWithContext(ctx context.Context) ServiceLoadMetricsListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLoadMetricsListOutput)
}

func (i ServiceLoadMetricsListArgs) ToServiceLoadMetricsListPtrOutput() ServiceLoadMetricsListPtrOutput {
	return i.ToServiceLoadMetricsListPtrOutputWithContext(context.Background())
}

func (i ServiceLoadMetricsListArgs) ToServiceLoadMetricsListPtrOutputWithContext(ctx context.Context) ServiceLoadMetricsListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLoadMetricsListOutput).ToServiceLoadMetricsListPtrOutputWithContext(ctx)
}

// ServiceLoadMetricsListPtrInput is an input type that accepts ServiceLoadMetricsListArgs, ServiceLoadMetricsListPtr and ServiceLoadMetricsListPtrOutput values.
// You can construct a concrete instance of `ServiceLoadMetricsListPtrInput` via:
//
//          ServiceLoadMetricsListArgs{...}
//
//  or:
//
//          nil
type ServiceLoadMetricsListPtrInput interface {
	pulumi.Input

	ToServiceLoadMetricsListPtrOutput() ServiceLoadMetricsListPtrOutput
	ToServiceLoadMetricsListPtrOutputWithContext(context.Context) ServiceLoadMetricsListPtrOutput
}

type serviceLoadMetricsListPtrType ServiceLoadMetricsListArgs

func ServiceLoadMetricsListPtr(v *ServiceLoadMetricsListArgs) ServiceLoadMetricsListPtrInput {
	return (*serviceLoadMetricsListPtrType)(v)
}

func (*serviceLoadMetricsListPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLoadMetricsList)(nil)).Elem()
}

func (i *serviceLoadMetricsListPtrType) ToServiceLoadMetricsListPtrOutput() ServiceLoadMetricsListPtrOutput {
	return i.ToServiceLoadMetricsListPtrOutputWithContext(context.Background())
}

func (i *serviceLoadMetricsListPtrType) ToServiceLoadMetricsListPtrOutputWithContext(ctx context.Context) ServiceLoadMetricsListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLoadMetricsListPtrOutput)
}

// The service load metrics is given as an array of ServiceLoadMetricDescription objects.
type ServiceLoadMetricsListOutput struct{ *pulumi.OutputState }

func (ServiceLoadMetricsListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLoadMetricsList)(nil)).Elem()
}

func (o ServiceLoadMetricsListOutput) ToServiceLoadMetricsListOutput() ServiceLoadMetricsListOutput {
	return o
}

func (o ServiceLoadMetricsListOutput) ToServiceLoadMetricsListOutputWithContext(ctx context.Context) ServiceLoadMetricsListOutput {
	return o
}

func (o ServiceLoadMetricsListOutput) ToServiceLoadMetricsListPtrOutput() ServiceLoadMetricsListPtrOutput {
	return o.ToServiceLoadMetricsListPtrOutputWithContext(context.Background())
}

func (o ServiceLoadMetricsListOutput) ToServiceLoadMetricsListPtrOutputWithContext(ctx context.Context) ServiceLoadMetricsListPtrOutput {
	return o.ApplyT(func(v ServiceLoadMetricsList) *ServiceLoadMetricsList {
		return &v
	}).(ServiceLoadMetricsListPtrOutput)
}

type ServiceLoadMetricsListPtrOutput struct{ *pulumi.OutputState }

func (ServiceLoadMetricsListPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLoadMetricsList)(nil)).Elem()
}

func (o ServiceLoadMetricsListPtrOutput) ToServiceLoadMetricsListPtrOutput() ServiceLoadMetricsListPtrOutput {
	return o
}

func (o ServiceLoadMetricsListPtrOutput) ToServiceLoadMetricsListPtrOutputWithContext(ctx context.Context) ServiceLoadMetricsListPtrOutput {
	return o
}

func (o ServiceLoadMetricsListPtrOutput) Elem() ServiceLoadMetricsListOutput {
	return o.ApplyT(func(v *ServiceLoadMetricsList) ServiceLoadMetricsList { return *v }).(ServiceLoadMetricsListOutput)
}

// The service load metrics is given as an array of ServiceLoadMetricDescription objects.
type ServiceLoadMetricsListResponse struct {
}

// ServiceLoadMetricsListResponseInput is an input type that accepts ServiceLoadMetricsListResponseArgs and ServiceLoadMetricsListResponseOutput values.
// You can construct a concrete instance of `ServiceLoadMetricsListResponseInput` via:
//
//          ServiceLoadMetricsListResponseArgs{...}
type ServiceLoadMetricsListResponseInput interface {
	pulumi.Input

	ToServiceLoadMetricsListResponseOutput() ServiceLoadMetricsListResponseOutput
	ToServiceLoadMetricsListResponseOutputWithContext(context.Context) ServiceLoadMetricsListResponseOutput
}

// The service load metrics is given as an array of ServiceLoadMetricDescription objects.
type ServiceLoadMetricsListResponseArgs struct {
}

func (ServiceLoadMetricsListResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLoadMetricsListResponse)(nil)).Elem()
}

func (i ServiceLoadMetricsListResponseArgs) ToServiceLoadMetricsListResponseOutput() ServiceLoadMetricsListResponseOutput {
	return i.ToServiceLoadMetricsListResponseOutputWithContext(context.Background())
}

func (i ServiceLoadMetricsListResponseArgs) ToServiceLoadMetricsListResponseOutputWithContext(ctx context.Context) ServiceLoadMetricsListResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLoadMetricsListResponseOutput)
}

func (i ServiceLoadMetricsListResponseArgs) ToServiceLoadMetricsListResponsePtrOutput() ServiceLoadMetricsListResponsePtrOutput {
	return i.ToServiceLoadMetricsListResponsePtrOutputWithContext(context.Background())
}

func (i ServiceLoadMetricsListResponseArgs) ToServiceLoadMetricsListResponsePtrOutputWithContext(ctx context.Context) ServiceLoadMetricsListResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLoadMetricsListResponseOutput).ToServiceLoadMetricsListResponsePtrOutputWithContext(ctx)
}

// ServiceLoadMetricsListResponsePtrInput is an input type that accepts ServiceLoadMetricsListResponseArgs, ServiceLoadMetricsListResponsePtr and ServiceLoadMetricsListResponsePtrOutput values.
// You can construct a concrete instance of `ServiceLoadMetricsListResponsePtrInput` via:
//
//          ServiceLoadMetricsListResponseArgs{...}
//
//  or:
//
//          nil
type ServiceLoadMetricsListResponsePtrInput interface {
	pulumi.Input

	ToServiceLoadMetricsListResponsePtrOutput() ServiceLoadMetricsListResponsePtrOutput
	ToServiceLoadMetricsListResponsePtrOutputWithContext(context.Context) ServiceLoadMetricsListResponsePtrOutput
}

type serviceLoadMetricsListResponsePtrType ServiceLoadMetricsListResponseArgs

func ServiceLoadMetricsListResponsePtr(v *ServiceLoadMetricsListResponseArgs) ServiceLoadMetricsListResponsePtrInput {
	return (*serviceLoadMetricsListResponsePtrType)(v)
}

func (*serviceLoadMetricsListResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLoadMetricsListResponse)(nil)).Elem()
}

func (i *serviceLoadMetricsListResponsePtrType) ToServiceLoadMetricsListResponsePtrOutput() ServiceLoadMetricsListResponsePtrOutput {
	return i.ToServiceLoadMetricsListResponsePtrOutputWithContext(context.Background())
}

func (i *serviceLoadMetricsListResponsePtrType) ToServiceLoadMetricsListResponsePtrOutputWithContext(ctx context.Context) ServiceLoadMetricsListResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLoadMetricsListResponsePtrOutput)
}

// The service load metrics is given as an array of ServiceLoadMetricDescription objects.
type ServiceLoadMetricsListResponseOutput struct{ *pulumi.OutputState }

func (ServiceLoadMetricsListResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLoadMetricsListResponse)(nil)).Elem()
}

func (o ServiceLoadMetricsListResponseOutput) ToServiceLoadMetricsListResponseOutput() ServiceLoadMetricsListResponseOutput {
	return o
}

func (o ServiceLoadMetricsListResponseOutput) ToServiceLoadMetricsListResponseOutputWithContext(ctx context.Context) ServiceLoadMetricsListResponseOutput {
	return o
}

func (o ServiceLoadMetricsListResponseOutput) ToServiceLoadMetricsListResponsePtrOutput() ServiceLoadMetricsListResponsePtrOutput {
	return o.ToServiceLoadMetricsListResponsePtrOutputWithContext(context.Background())
}

func (o ServiceLoadMetricsListResponseOutput) ToServiceLoadMetricsListResponsePtrOutputWithContext(ctx context.Context) ServiceLoadMetricsListResponsePtrOutput {
	return o.ApplyT(func(v ServiceLoadMetricsListResponse) *ServiceLoadMetricsListResponse {
		return &v
	}).(ServiceLoadMetricsListResponsePtrOutput)
}

type ServiceLoadMetricsListResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceLoadMetricsListResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLoadMetricsListResponse)(nil)).Elem()
}

func (o ServiceLoadMetricsListResponsePtrOutput) ToServiceLoadMetricsListResponsePtrOutput() ServiceLoadMetricsListResponsePtrOutput {
	return o
}

func (o ServiceLoadMetricsListResponsePtrOutput) ToServiceLoadMetricsListResponsePtrOutputWithContext(ctx context.Context) ServiceLoadMetricsListResponsePtrOutput {
	return o
}

func (o ServiceLoadMetricsListResponsePtrOutput) Elem() ServiceLoadMetricsListResponseOutput {
	return o.ApplyT(func(v *ServiceLoadMetricsListResponse) ServiceLoadMetricsListResponse { return *v }).(ServiceLoadMetricsListResponseOutput)
}

// A list that describes the correlation of the service with other services.
type ServicePlacementPoliciesList struct {
}

// ServicePlacementPoliciesListInput is an input type that accepts ServicePlacementPoliciesListArgs and ServicePlacementPoliciesListOutput values.
// You can construct a concrete instance of `ServicePlacementPoliciesListInput` via:
//
//          ServicePlacementPoliciesListArgs{...}
type ServicePlacementPoliciesListInput interface {
	pulumi.Input

	ToServicePlacementPoliciesListOutput() ServicePlacementPoliciesListOutput
	ToServicePlacementPoliciesListOutputWithContext(context.Context) ServicePlacementPoliciesListOutput
}

// A list that describes the correlation of the service with other services.
type ServicePlacementPoliciesListArgs struct {
}

func (ServicePlacementPoliciesListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePlacementPoliciesList)(nil)).Elem()
}

func (i ServicePlacementPoliciesListArgs) ToServicePlacementPoliciesListOutput() ServicePlacementPoliciesListOutput {
	return i.ToServicePlacementPoliciesListOutputWithContext(context.Background())
}

func (i ServicePlacementPoliciesListArgs) ToServicePlacementPoliciesListOutputWithContext(ctx context.Context) ServicePlacementPoliciesListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePlacementPoliciesListOutput)
}

func (i ServicePlacementPoliciesListArgs) ToServicePlacementPoliciesListPtrOutput() ServicePlacementPoliciesListPtrOutput {
	return i.ToServicePlacementPoliciesListPtrOutputWithContext(context.Background())
}

func (i ServicePlacementPoliciesListArgs) ToServicePlacementPoliciesListPtrOutputWithContext(ctx context.Context) ServicePlacementPoliciesListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePlacementPoliciesListOutput).ToServicePlacementPoliciesListPtrOutputWithContext(ctx)
}

// ServicePlacementPoliciesListPtrInput is an input type that accepts ServicePlacementPoliciesListArgs, ServicePlacementPoliciesListPtr and ServicePlacementPoliciesListPtrOutput values.
// You can construct a concrete instance of `ServicePlacementPoliciesListPtrInput` via:
//
//          ServicePlacementPoliciesListArgs{...}
//
//  or:
//
//          nil
type ServicePlacementPoliciesListPtrInput interface {
	pulumi.Input

	ToServicePlacementPoliciesListPtrOutput() ServicePlacementPoliciesListPtrOutput
	ToServicePlacementPoliciesListPtrOutputWithContext(context.Context) ServicePlacementPoliciesListPtrOutput
}

type servicePlacementPoliciesListPtrType ServicePlacementPoliciesListArgs

func ServicePlacementPoliciesListPtr(v *ServicePlacementPoliciesListArgs) ServicePlacementPoliciesListPtrInput {
	return (*servicePlacementPoliciesListPtrType)(v)
}

func (*servicePlacementPoliciesListPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePlacementPoliciesList)(nil)).Elem()
}

func (i *servicePlacementPoliciesListPtrType) ToServicePlacementPoliciesListPtrOutput() ServicePlacementPoliciesListPtrOutput {
	return i.ToServicePlacementPoliciesListPtrOutputWithContext(context.Background())
}

func (i *servicePlacementPoliciesListPtrType) ToServicePlacementPoliciesListPtrOutputWithContext(ctx context.Context) ServicePlacementPoliciesListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePlacementPoliciesListPtrOutput)
}

// A list that describes the correlation of the service with other services.
type ServicePlacementPoliciesListOutput struct{ *pulumi.OutputState }

func (ServicePlacementPoliciesListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePlacementPoliciesList)(nil)).Elem()
}

func (o ServicePlacementPoliciesListOutput) ToServicePlacementPoliciesListOutput() ServicePlacementPoliciesListOutput {
	return o
}

func (o ServicePlacementPoliciesListOutput) ToServicePlacementPoliciesListOutputWithContext(ctx context.Context) ServicePlacementPoliciesListOutput {
	return o
}

func (o ServicePlacementPoliciesListOutput) ToServicePlacementPoliciesListPtrOutput() ServicePlacementPoliciesListPtrOutput {
	return o.ToServicePlacementPoliciesListPtrOutputWithContext(context.Background())
}

func (o ServicePlacementPoliciesListOutput) ToServicePlacementPoliciesListPtrOutputWithContext(ctx context.Context) ServicePlacementPoliciesListPtrOutput {
	return o.ApplyT(func(v ServicePlacementPoliciesList) *ServicePlacementPoliciesList {
		return &v
	}).(ServicePlacementPoliciesListPtrOutput)
}

type ServicePlacementPoliciesListPtrOutput struct{ *pulumi.OutputState }

func (ServicePlacementPoliciesListPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePlacementPoliciesList)(nil)).Elem()
}

func (o ServicePlacementPoliciesListPtrOutput) ToServicePlacementPoliciesListPtrOutput() ServicePlacementPoliciesListPtrOutput {
	return o
}

func (o ServicePlacementPoliciesListPtrOutput) ToServicePlacementPoliciesListPtrOutputWithContext(ctx context.Context) ServicePlacementPoliciesListPtrOutput {
	return o
}

func (o ServicePlacementPoliciesListPtrOutput) Elem() ServicePlacementPoliciesListOutput {
	return o.ApplyT(func(v *ServicePlacementPoliciesList) ServicePlacementPoliciesList { return *v }).(ServicePlacementPoliciesListOutput)
}

// A list that describes the correlation of the service with other services.
type ServicePlacementPoliciesListResponse struct {
}

// ServicePlacementPoliciesListResponseInput is an input type that accepts ServicePlacementPoliciesListResponseArgs and ServicePlacementPoliciesListResponseOutput values.
// You can construct a concrete instance of `ServicePlacementPoliciesListResponseInput` via:
//
//          ServicePlacementPoliciesListResponseArgs{...}
type ServicePlacementPoliciesListResponseInput interface {
	pulumi.Input

	ToServicePlacementPoliciesListResponseOutput() ServicePlacementPoliciesListResponseOutput
	ToServicePlacementPoliciesListResponseOutputWithContext(context.Context) ServicePlacementPoliciesListResponseOutput
}

// A list that describes the correlation of the service with other services.
type ServicePlacementPoliciesListResponseArgs struct {
}

func (ServicePlacementPoliciesListResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePlacementPoliciesListResponse)(nil)).Elem()
}

func (i ServicePlacementPoliciesListResponseArgs) ToServicePlacementPoliciesListResponseOutput() ServicePlacementPoliciesListResponseOutput {
	return i.ToServicePlacementPoliciesListResponseOutputWithContext(context.Background())
}

func (i ServicePlacementPoliciesListResponseArgs) ToServicePlacementPoliciesListResponseOutputWithContext(ctx context.Context) ServicePlacementPoliciesListResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePlacementPoliciesListResponseOutput)
}

func (i ServicePlacementPoliciesListResponseArgs) ToServicePlacementPoliciesListResponsePtrOutput() ServicePlacementPoliciesListResponsePtrOutput {
	return i.ToServicePlacementPoliciesListResponsePtrOutputWithContext(context.Background())
}

func (i ServicePlacementPoliciesListResponseArgs) ToServicePlacementPoliciesListResponsePtrOutputWithContext(ctx context.Context) ServicePlacementPoliciesListResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePlacementPoliciesListResponseOutput).ToServicePlacementPoliciesListResponsePtrOutputWithContext(ctx)
}

// ServicePlacementPoliciesListResponsePtrInput is an input type that accepts ServicePlacementPoliciesListResponseArgs, ServicePlacementPoliciesListResponsePtr and ServicePlacementPoliciesListResponsePtrOutput values.
// You can construct a concrete instance of `ServicePlacementPoliciesListResponsePtrInput` via:
//
//          ServicePlacementPoliciesListResponseArgs{...}
//
//  or:
//
//          nil
type ServicePlacementPoliciesListResponsePtrInput interface {
	pulumi.Input

	ToServicePlacementPoliciesListResponsePtrOutput() ServicePlacementPoliciesListResponsePtrOutput
	ToServicePlacementPoliciesListResponsePtrOutputWithContext(context.Context) ServicePlacementPoliciesListResponsePtrOutput
}

type servicePlacementPoliciesListResponsePtrType ServicePlacementPoliciesListResponseArgs

func ServicePlacementPoliciesListResponsePtr(v *ServicePlacementPoliciesListResponseArgs) ServicePlacementPoliciesListResponsePtrInput {
	return (*servicePlacementPoliciesListResponsePtrType)(v)
}

func (*servicePlacementPoliciesListResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePlacementPoliciesListResponse)(nil)).Elem()
}

func (i *servicePlacementPoliciesListResponsePtrType) ToServicePlacementPoliciesListResponsePtrOutput() ServicePlacementPoliciesListResponsePtrOutput {
	return i.ToServicePlacementPoliciesListResponsePtrOutputWithContext(context.Background())
}

func (i *servicePlacementPoliciesListResponsePtrType) ToServicePlacementPoliciesListResponsePtrOutputWithContext(ctx context.Context) ServicePlacementPoliciesListResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePlacementPoliciesListResponsePtrOutput)
}

// A list that describes the correlation of the service with other services.
type ServicePlacementPoliciesListResponseOutput struct{ *pulumi.OutputState }

func (ServicePlacementPoliciesListResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePlacementPoliciesListResponse)(nil)).Elem()
}

func (o ServicePlacementPoliciesListResponseOutput) ToServicePlacementPoliciesListResponseOutput() ServicePlacementPoliciesListResponseOutput {
	return o
}

func (o ServicePlacementPoliciesListResponseOutput) ToServicePlacementPoliciesListResponseOutputWithContext(ctx context.Context) ServicePlacementPoliciesListResponseOutput {
	return o
}

func (o ServicePlacementPoliciesListResponseOutput) ToServicePlacementPoliciesListResponsePtrOutput() ServicePlacementPoliciesListResponsePtrOutput {
	return o.ToServicePlacementPoliciesListResponsePtrOutputWithContext(context.Background())
}

func (o ServicePlacementPoliciesListResponseOutput) ToServicePlacementPoliciesListResponsePtrOutputWithContext(ctx context.Context) ServicePlacementPoliciesListResponsePtrOutput {
	return o.ApplyT(func(v ServicePlacementPoliciesListResponse) *ServicePlacementPoliciesListResponse {
		return &v
	}).(ServicePlacementPoliciesListResponsePtrOutput)
}

type ServicePlacementPoliciesListResponsePtrOutput struct{ *pulumi.OutputState }

func (ServicePlacementPoliciesListResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePlacementPoliciesListResponse)(nil)).Elem()
}

func (o ServicePlacementPoliciesListResponsePtrOutput) ToServicePlacementPoliciesListResponsePtrOutput() ServicePlacementPoliciesListResponsePtrOutput {
	return o
}

func (o ServicePlacementPoliciesListResponsePtrOutput) ToServicePlacementPoliciesListResponsePtrOutputWithContext(ctx context.Context) ServicePlacementPoliciesListResponsePtrOutput {
	return o
}

func (o ServicePlacementPoliciesListResponsePtrOutput) Elem() ServicePlacementPoliciesListResponseOutput {
	return o.ApplyT(func(v *ServicePlacementPoliciesListResponse) ServicePlacementPoliciesListResponse { return *v }).(ServicePlacementPoliciesListResponseOutput)
}

// The service resource properties.
type ServiceResourceProperties struct {
	// A list that describes the correlation of the service with other services.
	CorrelationScheme *CorrelationSchemeList `pulumi:"correlationScheme"`
	// Specifies the move cost for the service.
	DefaultMoveCost *string `pulumi:"defaultMoveCost"`
	// Describes how the service is partitioned.
	PartitionDescription *PartitionSchemeDescription `pulumi:"partitionDescription"`
	// The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)".
	PlacementConstraints *string `pulumi:"placementConstraints"`
	// Dns name used for the service. If this is specified, then the service can be accessed via its DNS name instead of service name.
	ServiceDnsName *string `pulumi:"serviceDnsName"`
	// The kind of service (Stateless or Stateful).
	ServiceKind string `pulumi:"serviceKind"`
	// The service load metrics is given as an array of ServiceLoadMetricDescription objects.
	ServiceLoadMetrics *ServiceLoadMetricsList `pulumi:"serviceLoadMetrics"`
	// The activation Mode of the service package
	ServicePackageActivationMode *string `pulumi:"servicePackageActivationMode"`
	// A list that describes the correlation of the service with other services.
	ServicePlacementPolicies *ServicePlacementPoliciesList `pulumi:"servicePlacementPolicies"`
	// The name of the service type
	ServiceTypeName *string `pulumi:"serviceTypeName"`
}

// ServiceResourcePropertiesInput is an input type that accepts ServiceResourcePropertiesArgs and ServiceResourcePropertiesOutput values.
// You can construct a concrete instance of `ServiceResourcePropertiesInput` via:
//
//          ServiceResourcePropertiesArgs{...}
type ServiceResourcePropertiesInput interface {
	pulumi.Input

	ToServiceResourcePropertiesOutput() ServiceResourcePropertiesOutput
	ToServiceResourcePropertiesOutputWithContext(context.Context) ServiceResourcePropertiesOutput
}

// The service resource properties.
type ServiceResourcePropertiesArgs struct {
	// A list that describes the correlation of the service with other services.
	CorrelationScheme CorrelationSchemeListPtrInput `pulumi:"correlationScheme"`
	// Specifies the move cost for the service.
	DefaultMoveCost pulumi.StringPtrInput `pulumi:"defaultMoveCost"`
	// Describes how the service is partitioned.
	PartitionDescription PartitionSchemeDescriptionPtrInput `pulumi:"partitionDescription"`
	// The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)".
	PlacementConstraints pulumi.StringPtrInput `pulumi:"placementConstraints"`
	// Dns name used for the service. If this is specified, then the service can be accessed via its DNS name instead of service name.
	ServiceDnsName pulumi.StringPtrInput `pulumi:"serviceDnsName"`
	// The kind of service (Stateless or Stateful).
	ServiceKind pulumi.StringInput `pulumi:"serviceKind"`
	// The service load metrics is given as an array of ServiceLoadMetricDescription objects.
	ServiceLoadMetrics ServiceLoadMetricsListPtrInput `pulumi:"serviceLoadMetrics"`
	// The activation Mode of the service package
	ServicePackageActivationMode pulumi.StringPtrInput `pulumi:"servicePackageActivationMode"`
	// A list that describes the correlation of the service with other services.
	ServicePlacementPolicies ServicePlacementPoliciesListPtrInput `pulumi:"servicePlacementPolicies"`
	// The name of the service type
	ServiceTypeName pulumi.StringPtrInput `pulumi:"serviceTypeName"`
}

func (ServiceResourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceResourceProperties)(nil)).Elem()
}

func (i ServiceResourcePropertiesArgs) ToServiceResourcePropertiesOutput() ServiceResourcePropertiesOutput {
	return i.ToServiceResourcePropertiesOutputWithContext(context.Background())
}

func (i ServiceResourcePropertiesArgs) ToServiceResourcePropertiesOutputWithContext(ctx context.Context) ServiceResourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceResourcePropertiesOutput)
}

func (i ServiceResourcePropertiesArgs) ToServiceResourcePropertiesPtrOutput() ServiceResourcePropertiesPtrOutput {
	return i.ToServiceResourcePropertiesPtrOutputWithContext(context.Background())
}

func (i ServiceResourcePropertiesArgs) ToServiceResourcePropertiesPtrOutputWithContext(ctx context.Context) ServiceResourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceResourcePropertiesOutput).ToServiceResourcePropertiesPtrOutputWithContext(ctx)
}

// ServiceResourcePropertiesPtrInput is an input type that accepts ServiceResourcePropertiesArgs, ServiceResourcePropertiesPtr and ServiceResourcePropertiesPtrOutput values.
// You can construct a concrete instance of `ServiceResourcePropertiesPtrInput` via:
//
//          ServiceResourcePropertiesArgs{...}
//
//  or:
//
//          nil
type ServiceResourcePropertiesPtrInput interface {
	pulumi.Input

	ToServiceResourcePropertiesPtrOutput() ServiceResourcePropertiesPtrOutput
	ToServiceResourcePropertiesPtrOutputWithContext(context.Context) ServiceResourcePropertiesPtrOutput
}

type serviceResourcePropertiesPtrType ServiceResourcePropertiesArgs

func ServiceResourcePropertiesPtr(v *ServiceResourcePropertiesArgs) ServiceResourcePropertiesPtrInput {
	return (*serviceResourcePropertiesPtrType)(v)
}

func (*serviceResourcePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceResourceProperties)(nil)).Elem()
}

func (i *serviceResourcePropertiesPtrType) ToServiceResourcePropertiesPtrOutput() ServiceResourcePropertiesPtrOutput {
	return i.ToServiceResourcePropertiesPtrOutputWithContext(context.Background())
}

func (i *serviceResourcePropertiesPtrType) ToServiceResourcePropertiesPtrOutputWithContext(ctx context.Context) ServiceResourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceResourcePropertiesPtrOutput)
}

// The service resource properties.
type ServiceResourcePropertiesOutput struct{ *pulumi.OutputState }

func (ServiceResourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceResourceProperties)(nil)).Elem()
}

func (o ServiceResourcePropertiesOutput) ToServiceResourcePropertiesOutput() ServiceResourcePropertiesOutput {
	return o
}

func (o ServiceResourcePropertiesOutput) ToServiceResourcePropertiesOutputWithContext(ctx context.Context) ServiceResourcePropertiesOutput {
	return o
}

func (o ServiceResourcePropertiesOutput) ToServiceResourcePropertiesPtrOutput() ServiceResourcePropertiesPtrOutput {
	return o.ToServiceResourcePropertiesPtrOutputWithContext(context.Background())
}

func (o ServiceResourcePropertiesOutput) ToServiceResourcePropertiesPtrOutputWithContext(ctx context.Context) ServiceResourcePropertiesPtrOutput {
	return o.ApplyT(func(v ServiceResourceProperties) *ServiceResourceProperties {
		return &v
	}).(ServiceResourcePropertiesPtrOutput)
}

// A list that describes the correlation of the service with other services.
func (o ServiceResourcePropertiesOutput) CorrelationScheme() CorrelationSchemeListPtrOutput {
	return o.ApplyT(func(v ServiceResourceProperties) *CorrelationSchemeList { return v.CorrelationScheme }).(CorrelationSchemeListPtrOutput)
}

// Specifies the move cost for the service.
func (o ServiceResourcePropertiesOutput) DefaultMoveCost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceResourceProperties) *string { return v.DefaultMoveCost }).(pulumi.StringPtrOutput)
}

// Describes how the service is partitioned.
func (o ServiceResourcePropertiesOutput) PartitionDescription() PartitionSchemeDescriptionPtrOutput {
	return o.ApplyT(func(v ServiceResourceProperties) *PartitionSchemeDescription { return v.PartitionDescription }).(PartitionSchemeDescriptionPtrOutput)
}

// The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)".
func (o ServiceResourcePropertiesOutput) PlacementConstraints() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceResourceProperties) *string { return v.PlacementConstraints }).(pulumi.StringPtrOutput)
}

// Dns name used for the service. If this is specified, then the service can be accessed via its DNS name instead of service name.
func (o ServiceResourcePropertiesOutput) ServiceDnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceResourceProperties) *string { return v.ServiceDnsName }).(pulumi.StringPtrOutput)
}

// The kind of service (Stateless or Stateful).
func (o ServiceResourcePropertiesOutput) ServiceKind() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceResourceProperties) string { return v.ServiceKind }).(pulumi.StringOutput)
}

// The service load metrics is given as an array of ServiceLoadMetricDescription objects.
func (o ServiceResourcePropertiesOutput) ServiceLoadMetrics() ServiceLoadMetricsListPtrOutput {
	return o.ApplyT(func(v ServiceResourceProperties) *ServiceLoadMetricsList { return v.ServiceLoadMetrics }).(ServiceLoadMetricsListPtrOutput)
}

// The activation Mode of the service package
func (o ServiceResourcePropertiesOutput) ServicePackageActivationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceResourceProperties) *string { return v.ServicePackageActivationMode }).(pulumi.StringPtrOutput)
}

// A list that describes the correlation of the service with other services.
func (o ServiceResourcePropertiesOutput) ServicePlacementPolicies() ServicePlacementPoliciesListPtrOutput {
	return o.ApplyT(func(v ServiceResourceProperties) *ServicePlacementPoliciesList { return v.ServicePlacementPolicies }).(ServicePlacementPoliciesListPtrOutput)
}

// The name of the service type
func (o ServiceResourcePropertiesOutput) ServiceTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceResourceProperties) *string { return v.ServiceTypeName }).(pulumi.StringPtrOutput)
}

type ServiceResourcePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ServiceResourcePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceResourceProperties)(nil)).Elem()
}

func (o ServiceResourcePropertiesPtrOutput) ToServiceResourcePropertiesPtrOutput() ServiceResourcePropertiesPtrOutput {
	return o
}

func (o ServiceResourcePropertiesPtrOutput) ToServiceResourcePropertiesPtrOutputWithContext(ctx context.Context) ServiceResourcePropertiesPtrOutput {
	return o
}

func (o ServiceResourcePropertiesPtrOutput) Elem() ServiceResourcePropertiesOutput {
	return o.ApplyT(func(v *ServiceResourceProperties) ServiceResourceProperties { return *v }).(ServiceResourcePropertiesOutput)
}

// A list that describes the correlation of the service with other services.
func (o ServiceResourcePropertiesPtrOutput) CorrelationScheme() CorrelationSchemeListPtrOutput {
	return o.ApplyT(func(v *ServiceResourceProperties) *CorrelationSchemeList {
		if v == nil {
			return nil
		}
		return v.CorrelationScheme
	}).(CorrelationSchemeListPtrOutput)
}

// Specifies the move cost for the service.
func (o ServiceResourcePropertiesPtrOutput) DefaultMoveCost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceResourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DefaultMoveCost
	}).(pulumi.StringPtrOutput)
}

// Describes how the service is partitioned.
func (o ServiceResourcePropertiesPtrOutput) PartitionDescription() PartitionSchemeDescriptionPtrOutput {
	return o.ApplyT(func(v *ServiceResourceProperties) *PartitionSchemeDescription {
		if v == nil {
			return nil
		}
		return v.PartitionDescription
	}).(PartitionSchemeDescriptionPtrOutput)
}

// The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)".
func (o ServiceResourcePropertiesPtrOutput) PlacementConstraints() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceResourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.PlacementConstraints
	}).(pulumi.StringPtrOutput)
}

// Dns name used for the service. If this is specified, then the service can be accessed via its DNS name instead of service name.
func (o ServiceResourcePropertiesPtrOutput) ServiceDnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceResourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.ServiceDnsName
	}).(pulumi.StringPtrOutput)
}

// The kind of service (Stateless or Stateful).
func (o ServiceResourcePropertiesPtrOutput) ServiceKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceResourceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceKind
	}).(pulumi.StringPtrOutput)
}

// The service load metrics is given as an array of ServiceLoadMetricDescription objects.
func (o ServiceResourcePropertiesPtrOutput) ServiceLoadMetrics() ServiceLoadMetricsListPtrOutput {
	return o.ApplyT(func(v *ServiceResourceProperties) *ServiceLoadMetricsList {
		if v == nil {
			return nil
		}
		return v.ServiceLoadMetrics
	}).(ServiceLoadMetricsListPtrOutput)
}

// The activation Mode of the service package
func (o ServiceResourcePropertiesPtrOutput) ServicePackageActivationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceResourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.ServicePackageActivationMode
	}).(pulumi.StringPtrOutput)
}

// A list that describes the correlation of the service with other services.
func (o ServiceResourcePropertiesPtrOutput) ServicePlacementPolicies() ServicePlacementPoliciesListPtrOutput {
	return o.ApplyT(func(v *ServiceResourceProperties) *ServicePlacementPoliciesList {
		if v == nil {
			return nil
		}
		return v.ServicePlacementPolicies
	}).(ServicePlacementPoliciesListPtrOutput)
}

// The name of the service type
func (o ServiceResourcePropertiesPtrOutput) ServiceTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceResourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTypeName
	}).(pulumi.StringPtrOutput)
}

// The service resource properties.
type ServiceResourcePropertiesResponse struct {
	// A list that describes the correlation of the service with other services.
	CorrelationScheme *CorrelationSchemeListResponse `pulumi:"correlationScheme"`
	// Specifies the move cost for the service.
	DefaultMoveCost *string `pulumi:"defaultMoveCost"`
	// Describes how the service is partitioned.
	PartitionDescription *PartitionSchemeDescriptionResponse `pulumi:"partitionDescription"`
	// The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)".
	PlacementConstraints *string `pulumi:"placementConstraints"`
	// The current deployment or provisioning state, which only appears in the response
	ProvisioningState string `pulumi:"provisioningState"`
	// Dns name used for the service. If this is specified, then the service can be accessed via its DNS name instead of service name.
	ServiceDnsName *string `pulumi:"serviceDnsName"`
	// The kind of service (Stateless or Stateful).
	ServiceKind string `pulumi:"serviceKind"`
	// The service load metrics is given as an array of ServiceLoadMetricDescription objects.
	ServiceLoadMetrics *ServiceLoadMetricsListResponse `pulumi:"serviceLoadMetrics"`
	// The activation Mode of the service package
	ServicePackageActivationMode *string `pulumi:"servicePackageActivationMode"`
	// A list that describes the correlation of the service with other services.
	ServicePlacementPolicies *ServicePlacementPoliciesListResponse `pulumi:"servicePlacementPolicies"`
	// The name of the service type
	ServiceTypeName *string `pulumi:"serviceTypeName"`
}

// ServiceResourcePropertiesResponseInput is an input type that accepts ServiceResourcePropertiesResponseArgs and ServiceResourcePropertiesResponseOutput values.
// You can construct a concrete instance of `ServiceResourcePropertiesResponseInput` via:
//
//          ServiceResourcePropertiesResponseArgs{...}
type ServiceResourcePropertiesResponseInput interface {
	pulumi.Input

	ToServiceResourcePropertiesResponseOutput() ServiceResourcePropertiesResponseOutput
	ToServiceResourcePropertiesResponseOutputWithContext(context.Context) ServiceResourcePropertiesResponseOutput
}

// The service resource properties.
type ServiceResourcePropertiesResponseArgs struct {
	// A list that describes the correlation of the service with other services.
	CorrelationScheme CorrelationSchemeListResponsePtrInput `pulumi:"correlationScheme"`
	// Specifies the move cost for the service.
	DefaultMoveCost pulumi.StringPtrInput `pulumi:"defaultMoveCost"`
	// Describes how the service is partitioned.
	PartitionDescription PartitionSchemeDescriptionResponsePtrInput `pulumi:"partitionDescription"`
	// The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)".
	PlacementConstraints pulumi.StringPtrInput `pulumi:"placementConstraints"`
	// The current deployment or provisioning state, which only appears in the response
	ProvisioningState pulumi.StringInput `pulumi:"provisioningState"`
	// Dns name used for the service. If this is specified, then the service can be accessed via its DNS name instead of service name.
	ServiceDnsName pulumi.StringPtrInput `pulumi:"serviceDnsName"`
	// The kind of service (Stateless or Stateful).
	ServiceKind pulumi.StringInput `pulumi:"serviceKind"`
	// The service load metrics is given as an array of ServiceLoadMetricDescription objects.
	ServiceLoadMetrics ServiceLoadMetricsListResponsePtrInput `pulumi:"serviceLoadMetrics"`
	// The activation Mode of the service package
	ServicePackageActivationMode pulumi.StringPtrInput `pulumi:"servicePackageActivationMode"`
	// A list that describes the correlation of the service with other services.
	ServicePlacementPolicies ServicePlacementPoliciesListResponsePtrInput `pulumi:"servicePlacementPolicies"`
	// The name of the service type
	ServiceTypeName pulumi.StringPtrInput `pulumi:"serviceTypeName"`
}

func (ServiceResourcePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceResourcePropertiesResponse)(nil)).Elem()
}

func (i ServiceResourcePropertiesResponseArgs) ToServiceResourcePropertiesResponseOutput() ServiceResourcePropertiesResponseOutput {
	return i.ToServiceResourcePropertiesResponseOutputWithContext(context.Background())
}

func (i ServiceResourcePropertiesResponseArgs) ToServiceResourcePropertiesResponseOutputWithContext(ctx context.Context) ServiceResourcePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceResourcePropertiesResponseOutput)
}

func (i ServiceResourcePropertiesResponseArgs) ToServiceResourcePropertiesResponsePtrOutput() ServiceResourcePropertiesResponsePtrOutput {
	return i.ToServiceResourcePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i ServiceResourcePropertiesResponseArgs) ToServiceResourcePropertiesResponsePtrOutputWithContext(ctx context.Context) ServiceResourcePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceResourcePropertiesResponseOutput).ToServiceResourcePropertiesResponsePtrOutputWithContext(ctx)
}

// ServiceResourcePropertiesResponsePtrInput is an input type that accepts ServiceResourcePropertiesResponseArgs, ServiceResourcePropertiesResponsePtr and ServiceResourcePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `ServiceResourcePropertiesResponsePtrInput` via:
//
//          ServiceResourcePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type ServiceResourcePropertiesResponsePtrInput interface {
	pulumi.Input

	ToServiceResourcePropertiesResponsePtrOutput() ServiceResourcePropertiesResponsePtrOutput
	ToServiceResourcePropertiesResponsePtrOutputWithContext(context.Context) ServiceResourcePropertiesResponsePtrOutput
}

type serviceResourcePropertiesResponsePtrType ServiceResourcePropertiesResponseArgs

func ServiceResourcePropertiesResponsePtr(v *ServiceResourcePropertiesResponseArgs) ServiceResourcePropertiesResponsePtrInput {
	return (*serviceResourcePropertiesResponsePtrType)(v)
}

func (*serviceResourcePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceResourcePropertiesResponse)(nil)).Elem()
}

func (i *serviceResourcePropertiesResponsePtrType) ToServiceResourcePropertiesResponsePtrOutput() ServiceResourcePropertiesResponsePtrOutput {
	return i.ToServiceResourcePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *serviceResourcePropertiesResponsePtrType) ToServiceResourcePropertiesResponsePtrOutputWithContext(ctx context.Context) ServiceResourcePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceResourcePropertiesResponsePtrOutput)
}

// The service resource properties.
type ServiceResourcePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ServiceResourcePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceResourcePropertiesResponse)(nil)).Elem()
}

func (o ServiceResourcePropertiesResponseOutput) ToServiceResourcePropertiesResponseOutput() ServiceResourcePropertiesResponseOutput {
	return o
}

func (o ServiceResourcePropertiesResponseOutput) ToServiceResourcePropertiesResponseOutputWithContext(ctx context.Context) ServiceResourcePropertiesResponseOutput {
	return o
}

func (o ServiceResourcePropertiesResponseOutput) ToServiceResourcePropertiesResponsePtrOutput() ServiceResourcePropertiesResponsePtrOutput {
	return o.ToServiceResourcePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ServiceResourcePropertiesResponseOutput) ToServiceResourcePropertiesResponsePtrOutputWithContext(ctx context.Context) ServiceResourcePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ServiceResourcePropertiesResponse) *ServiceResourcePropertiesResponse {
		return &v
	}).(ServiceResourcePropertiesResponsePtrOutput)
}

// A list that describes the correlation of the service with other services.
func (o ServiceResourcePropertiesResponseOutput) CorrelationScheme() CorrelationSchemeListResponsePtrOutput {
	return o.ApplyT(func(v ServiceResourcePropertiesResponse) *CorrelationSchemeListResponse { return v.CorrelationScheme }).(CorrelationSchemeListResponsePtrOutput)
}

// Specifies the move cost for the service.
func (o ServiceResourcePropertiesResponseOutput) DefaultMoveCost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceResourcePropertiesResponse) *string { return v.DefaultMoveCost }).(pulumi.StringPtrOutput)
}

// Describes how the service is partitioned.
func (o ServiceResourcePropertiesResponseOutput) PartitionDescription() PartitionSchemeDescriptionResponsePtrOutput {
	return o.ApplyT(func(v ServiceResourcePropertiesResponse) *PartitionSchemeDescriptionResponse {
		return v.PartitionDescription
	}).(PartitionSchemeDescriptionResponsePtrOutput)
}

// The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)".
func (o ServiceResourcePropertiesResponseOutput) PlacementConstraints() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceResourcePropertiesResponse) *string { return v.PlacementConstraints }).(pulumi.StringPtrOutput)
}

// The current deployment or provisioning state, which only appears in the response
func (o ServiceResourcePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceResourcePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Dns name used for the service. If this is specified, then the service can be accessed via its DNS name instead of service name.
func (o ServiceResourcePropertiesResponseOutput) ServiceDnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceResourcePropertiesResponse) *string { return v.ServiceDnsName }).(pulumi.StringPtrOutput)
}

// The kind of service (Stateless or Stateful).
func (o ServiceResourcePropertiesResponseOutput) ServiceKind() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceResourcePropertiesResponse) string { return v.ServiceKind }).(pulumi.StringOutput)
}

// The service load metrics is given as an array of ServiceLoadMetricDescription objects.
func (o ServiceResourcePropertiesResponseOutput) ServiceLoadMetrics() ServiceLoadMetricsListResponsePtrOutput {
	return o.ApplyT(func(v ServiceResourcePropertiesResponse) *ServiceLoadMetricsListResponse { return v.ServiceLoadMetrics }).(ServiceLoadMetricsListResponsePtrOutput)
}

// The activation Mode of the service package
func (o ServiceResourcePropertiesResponseOutput) ServicePackageActivationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceResourcePropertiesResponse) *string { return v.ServicePackageActivationMode }).(pulumi.StringPtrOutput)
}

// A list that describes the correlation of the service with other services.
func (o ServiceResourcePropertiesResponseOutput) ServicePlacementPolicies() ServicePlacementPoliciesListResponsePtrOutput {
	return o.ApplyT(func(v ServiceResourcePropertiesResponse) *ServicePlacementPoliciesListResponse {
		return v.ServicePlacementPolicies
	}).(ServicePlacementPoliciesListResponsePtrOutput)
}

// The name of the service type
func (o ServiceResourcePropertiesResponseOutput) ServiceTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceResourcePropertiesResponse) *string { return v.ServiceTypeName }).(pulumi.StringPtrOutput)
}

type ServiceResourcePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceResourcePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceResourcePropertiesResponse)(nil)).Elem()
}

func (o ServiceResourcePropertiesResponsePtrOutput) ToServiceResourcePropertiesResponsePtrOutput() ServiceResourcePropertiesResponsePtrOutput {
	return o
}

func (o ServiceResourcePropertiesResponsePtrOutput) ToServiceResourcePropertiesResponsePtrOutputWithContext(ctx context.Context) ServiceResourcePropertiesResponsePtrOutput {
	return o
}

func (o ServiceResourcePropertiesResponsePtrOutput) Elem() ServiceResourcePropertiesResponseOutput {
	return o.ApplyT(func(v *ServiceResourcePropertiesResponse) ServiceResourcePropertiesResponse { return *v }).(ServiceResourcePropertiesResponseOutput)
}

// A list that describes the correlation of the service with other services.
func (o ServiceResourcePropertiesResponsePtrOutput) CorrelationScheme() CorrelationSchemeListResponsePtrOutput {
	return o.ApplyT(func(v *ServiceResourcePropertiesResponse) *CorrelationSchemeListResponse {
		if v == nil {
			return nil
		}
		return v.CorrelationScheme
	}).(CorrelationSchemeListResponsePtrOutput)
}

// Specifies the move cost for the service.
func (o ServiceResourcePropertiesResponsePtrOutput) DefaultMoveCost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceResourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DefaultMoveCost
	}).(pulumi.StringPtrOutput)
}

// Describes how the service is partitioned.
func (o ServiceResourcePropertiesResponsePtrOutput) PartitionDescription() PartitionSchemeDescriptionResponsePtrOutput {
	return o.ApplyT(func(v *ServiceResourcePropertiesResponse) *PartitionSchemeDescriptionResponse {
		if v == nil {
			return nil
		}
		return v.PartitionDescription
	}).(PartitionSchemeDescriptionResponsePtrOutput)
}

// The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor == blue)".
func (o ServiceResourcePropertiesResponsePtrOutput) PlacementConstraints() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceResourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PlacementConstraints
	}).(pulumi.StringPtrOutput)
}

// The current deployment or provisioning state, which only appears in the response
func (o ServiceResourcePropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceResourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Dns name used for the service. If this is specified, then the service can be accessed via its DNS name instead of service name.
func (o ServiceResourcePropertiesResponsePtrOutput) ServiceDnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceResourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceDnsName
	}).(pulumi.StringPtrOutput)
}

// The kind of service (Stateless or Stateful).
func (o ServiceResourcePropertiesResponsePtrOutput) ServiceKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceResourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceKind
	}).(pulumi.StringPtrOutput)
}

// The service load metrics is given as an array of ServiceLoadMetricDescription objects.
func (o ServiceResourcePropertiesResponsePtrOutput) ServiceLoadMetrics() ServiceLoadMetricsListResponsePtrOutput {
	return o.ApplyT(func(v *ServiceResourcePropertiesResponse) *ServiceLoadMetricsListResponse {
		if v == nil {
			return nil
		}
		return v.ServiceLoadMetrics
	}).(ServiceLoadMetricsListResponsePtrOutput)
}

// The activation Mode of the service package
func (o ServiceResourcePropertiesResponsePtrOutput) ServicePackageActivationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceResourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServicePackageActivationMode
	}).(pulumi.StringPtrOutput)
}

// A list that describes the correlation of the service with other services.
func (o ServiceResourcePropertiesResponsePtrOutput) ServicePlacementPolicies() ServicePlacementPoliciesListResponsePtrOutput {
	return o.ApplyT(func(v *ServiceResourcePropertiesResponse) *ServicePlacementPoliciesListResponse {
		if v == nil {
			return nil
		}
		return v.ServicePlacementPolicies
	}).(ServicePlacementPoliciesListResponsePtrOutput)
}

// The name of the service type
func (o ServiceResourcePropertiesResponsePtrOutput) ServiceTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceResourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTypeName
	}).(pulumi.StringPtrOutput)
}

// Describes a parameter in fabric settings of the cluster.
type SettingsParameterDescription struct {
	// The parameter name of fabric setting.
	Name string `pulumi:"name"`
	// The parameter value of fabric setting.
	Value string `pulumi:"value"`
}

// SettingsParameterDescriptionInput is an input type that accepts SettingsParameterDescriptionArgs and SettingsParameterDescriptionOutput values.
// You can construct a concrete instance of `SettingsParameterDescriptionInput` via:
//
//          SettingsParameterDescriptionArgs{...}
type SettingsParameterDescriptionInput interface {
	pulumi.Input

	ToSettingsParameterDescriptionOutput() SettingsParameterDescriptionOutput
	ToSettingsParameterDescriptionOutputWithContext(context.Context) SettingsParameterDescriptionOutput
}

// Describes a parameter in fabric settings of the cluster.
type SettingsParameterDescriptionArgs struct {
	// The parameter name of fabric setting.
	Name pulumi.StringInput `pulumi:"name"`
	// The parameter value of fabric setting.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SettingsParameterDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingsParameterDescription)(nil)).Elem()
}

func (i SettingsParameterDescriptionArgs) ToSettingsParameterDescriptionOutput() SettingsParameterDescriptionOutput {
	return i.ToSettingsParameterDescriptionOutputWithContext(context.Background())
}

func (i SettingsParameterDescriptionArgs) ToSettingsParameterDescriptionOutputWithContext(ctx context.Context) SettingsParameterDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsParameterDescriptionOutput)
}

// SettingsParameterDescriptionArrayInput is an input type that accepts SettingsParameterDescriptionArray and SettingsParameterDescriptionArrayOutput values.
// You can construct a concrete instance of `SettingsParameterDescriptionArrayInput` via:
//
//          SettingsParameterDescriptionArray{ SettingsParameterDescriptionArgs{...} }
type SettingsParameterDescriptionArrayInput interface {
	pulumi.Input

	ToSettingsParameterDescriptionArrayOutput() SettingsParameterDescriptionArrayOutput
	ToSettingsParameterDescriptionArrayOutputWithContext(context.Context) SettingsParameterDescriptionArrayOutput
}

type SettingsParameterDescriptionArray []SettingsParameterDescriptionInput

func (SettingsParameterDescriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingsParameterDescription)(nil)).Elem()
}

func (i SettingsParameterDescriptionArray) ToSettingsParameterDescriptionArrayOutput() SettingsParameterDescriptionArrayOutput {
	return i.ToSettingsParameterDescriptionArrayOutputWithContext(context.Background())
}

func (i SettingsParameterDescriptionArray) ToSettingsParameterDescriptionArrayOutputWithContext(ctx context.Context) SettingsParameterDescriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsParameterDescriptionArrayOutput)
}

// Describes a parameter in fabric settings of the cluster.
type SettingsParameterDescriptionOutput struct{ *pulumi.OutputState }

func (SettingsParameterDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingsParameterDescription)(nil)).Elem()
}

func (o SettingsParameterDescriptionOutput) ToSettingsParameterDescriptionOutput() SettingsParameterDescriptionOutput {
	return o
}

func (o SettingsParameterDescriptionOutput) ToSettingsParameterDescriptionOutputWithContext(ctx context.Context) SettingsParameterDescriptionOutput {
	return o
}

// The parameter name of fabric setting.
func (o SettingsParameterDescriptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsParameterDescription) string { return v.Name }).(pulumi.StringOutput)
}

// The parameter value of fabric setting.
func (o SettingsParameterDescriptionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsParameterDescription) string { return v.Value }).(pulumi.StringOutput)
}

type SettingsParameterDescriptionArrayOutput struct{ *pulumi.OutputState }

func (SettingsParameterDescriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingsParameterDescription)(nil)).Elem()
}

func (o SettingsParameterDescriptionArrayOutput) ToSettingsParameterDescriptionArrayOutput() SettingsParameterDescriptionArrayOutput {
	return o
}

func (o SettingsParameterDescriptionArrayOutput) ToSettingsParameterDescriptionArrayOutputWithContext(ctx context.Context) SettingsParameterDescriptionArrayOutput {
	return o
}

func (o SettingsParameterDescriptionArrayOutput) Index(i pulumi.IntInput) SettingsParameterDescriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SettingsParameterDescription {
		return vs[0].([]SettingsParameterDescription)[vs[1].(int)]
	}).(SettingsParameterDescriptionOutput)
}

// Describes a parameter in fabric settings of the cluster.
type SettingsParameterDescriptionResponse struct {
	// The parameter name of fabric setting.
	Name string `pulumi:"name"`
	// The parameter value of fabric setting.
	Value string `pulumi:"value"`
}

// SettingsParameterDescriptionResponseInput is an input type that accepts SettingsParameterDescriptionResponseArgs and SettingsParameterDescriptionResponseOutput values.
// You can construct a concrete instance of `SettingsParameterDescriptionResponseInput` via:
//
//          SettingsParameterDescriptionResponseArgs{...}
type SettingsParameterDescriptionResponseInput interface {
	pulumi.Input

	ToSettingsParameterDescriptionResponseOutput() SettingsParameterDescriptionResponseOutput
	ToSettingsParameterDescriptionResponseOutputWithContext(context.Context) SettingsParameterDescriptionResponseOutput
}

// Describes a parameter in fabric settings of the cluster.
type SettingsParameterDescriptionResponseArgs struct {
	// The parameter name of fabric setting.
	Name pulumi.StringInput `pulumi:"name"`
	// The parameter value of fabric setting.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SettingsParameterDescriptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingsParameterDescriptionResponse)(nil)).Elem()
}

func (i SettingsParameterDescriptionResponseArgs) ToSettingsParameterDescriptionResponseOutput() SettingsParameterDescriptionResponseOutput {
	return i.ToSettingsParameterDescriptionResponseOutputWithContext(context.Background())
}

func (i SettingsParameterDescriptionResponseArgs) ToSettingsParameterDescriptionResponseOutputWithContext(ctx context.Context) SettingsParameterDescriptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsParameterDescriptionResponseOutput)
}

// SettingsParameterDescriptionResponseArrayInput is an input type that accepts SettingsParameterDescriptionResponseArray and SettingsParameterDescriptionResponseArrayOutput values.
// You can construct a concrete instance of `SettingsParameterDescriptionResponseArrayInput` via:
//
//          SettingsParameterDescriptionResponseArray{ SettingsParameterDescriptionResponseArgs{...} }
type SettingsParameterDescriptionResponseArrayInput interface {
	pulumi.Input

	ToSettingsParameterDescriptionResponseArrayOutput() SettingsParameterDescriptionResponseArrayOutput
	ToSettingsParameterDescriptionResponseArrayOutputWithContext(context.Context) SettingsParameterDescriptionResponseArrayOutput
}

type SettingsParameterDescriptionResponseArray []SettingsParameterDescriptionResponseInput

func (SettingsParameterDescriptionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingsParameterDescriptionResponse)(nil)).Elem()
}

func (i SettingsParameterDescriptionResponseArray) ToSettingsParameterDescriptionResponseArrayOutput() SettingsParameterDescriptionResponseArrayOutput {
	return i.ToSettingsParameterDescriptionResponseArrayOutputWithContext(context.Background())
}

func (i SettingsParameterDescriptionResponseArray) ToSettingsParameterDescriptionResponseArrayOutputWithContext(ctx context.Context) SettingsParameterDescriptionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsParameterDescriptionResponseArrayOutput)
}

// Describes a parameter in fabric settings of the cluster.
type SettingsParameterDescriptionResponseOutput struct{ *pulumi.OutputState }

func (SettingsParameterDescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingsParameterDescriptionResponse)(nil)).Elem()
}

func (o SettingsParameterDescriptionResponseOutput) ToSettingsParameterDescriptionResponseOutput() SettingsParameterDescriptionResponseOutput {
	return o
}

func (o SettingsParameterDescriptionResponseOutput) ToSettingsParameterDescriptionResponseOutputWithContext(ctx context.Context) SettingsParameterDescriptionResponseOutput {
	return o
}

// The parameter name of fabric setting.
func (o SettingsParameterDescriptionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsParameterDescriptionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The parameter value of fabric setting.
func (o SettingsParameterDescriptionResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsParameterDescriptionResponse) string { return v.Value }).(pulumi.StringOutput)
}

type SettingsParameterDescriptionResponseArrayOutput struct{ *pulumi.OutputState }

func (SettingsParameterDescriptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingsParameterDescriptionResponse)(nil)).Elem()
}

func (o SettingsParameterDescriptionResponseArrayOutput) ToSettingsParameterDescriptionResponseArrayOutput() SettingsParameterDescriptionResponseArrayOutput {
	return o
}

func (o SettingsParameterDescriptionResponseArrayOutput) ToSettingsParameterDescriptionResponseArrayOutputWithContext(ctx context.Context) SettingsParameterDescriptionResponseArrayOutput {
	return o
}

func (o SettingsParameterDescriptionResponseArrayOutput) Index(i pulumi.IntInput) SettingsParameterDescriptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SettingsParameterDescriptionResponse {
		return vs[0].([]SettingsParameterDescriptionResponse)[vs[1].(int)]
	}).(SettingsParameterDescriptionResponseOutput)
}

// Describes a section in the fabric settings of the cluster.
type SettingsSectionDescription struct {
	// The section name of the fabric settings.
	Name string `pulumi:"name"`
	// The collection of parameters in the section.
	Parameters []SettingsParameterDescription `pulumi:"parameters"`
}

// SettingsSectionDescriptionInput is an input type that accepts SettingsSectionDescriptionArgs and SettingsSectionDescriptionOutput values.
// You can construct a concrete instance of `SettingsSectionDescriptionInput` via:
//
//          SettingsSectionDescriptionArgs{...}
type SettingsSectionDescriptionInput interface {
	pulumi.Input

	ToSettingsSectionDescriptionOutput() SettingsSectionDescriptionOutput
	ToSettingsSectionDescriptionOutputWithContext(context.Context) SettingsSectionDescriptionOutput
}

// Describes a section in the fabric settings of the cluster.
type SettingsSectionDescriptionArgs struct {
	// The section name of the fabric settings.
	Name pulumi.StringInput `pulumi:"name"`
	// The collection of parameters in the section.
	Parameters SettingsParameterDescriptionArrayInput `pulumi:"parameters"`
}

func (SettingsSectionDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingsSectionDescription)(nil)).Elem()
}

func (i SettingsSectionDescriptionArgs) ToSettingsSectionDescriptionOutput() SettingsSectionDescriptionOutput {
	return i.ToSettingsSectionDescriptionOutputWithContext(context.Background())
}

func (i SettingsSectionDescriptionArgs) ToSettingsSectionDescriptionOutputWithContext(ctx context.Context) SettingsSectionDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsSectionDescriptionOutput)
}

// SettingsSectionDescriptionArrayInput is an input type that accepts SettingsSectionDescriptionArray and SettingsSectionDescriptionArrayOutput values.
// You can construct a concrete instance of `SettingsSectionDescriptionArrayInput` via:
//
//          SettingsSectionDescriptionArray{ SettingsSectionDescriptionArgs{...} }
type SettingsSectionDescriptionArrayInput interface {
	pulumi.Input

	ToSettingsSectionDescriptionArrayOutput() SettingsSectionDescriptionArrayOutput
	ToSettingsSectionDescriptionArrayOutputWithContext(context.Context) SettingsSectionDescriptionArrayOutput
}

type SettingsSectionDescriptionArray []SettingsSectionDescriptionInput

func (SettingsSectionDescriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingsSectionDescription)(nil)).Elem()
}

func (i SettingsSectionDescriptionArray) ToSettingsSectionDescriptionArrayOutput() SettingsSectionDescriptionArrayOutput {
	return i.ToSettingsSectionDescriptionArrayOutputWithContext(context.Background())
}

func (i SettingsSectionDescriptionArray) ToSettingsSectionDescriptionArrayOutputWithContext(ctx context.Context) SettingsSectionDescriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsSectionDescriptionArrayOutput)
}

// Describes a section in the fabric settings of the cluster.
type SettingsSectionDescriptionOutput struct{ *pulumi.OutputState }

func (SettingsSectionDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingsSectionDescription)(nil)).Elem()
}

func (o SettingsSectionDescriptionOutput) ToSettingsSectionDescriptionOutput() SettingsSectionDescriptionOutput {
	return o
}

func (o SettingsSectionDescriptionOutput) ToSettingsSectionDescriptionOutputWithContext(ctx context.Context) SettingsSectionDescriptionOutput {
	return o
}

// The section name of the fabric settings.
func (o SettingsSectionDescriptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsSectionDescription) string { return v.Name }).(pulumi.StringOutput)
}

// The collection of parameters in the section.
func (o SettingsSectionDescriptionOutput) Parameters() SettingsParameterDescriptionArrayOutput {
	return o.ApplyT(func(v SettingsSectionDescription) []SettingsParameterDescription { return v.Parameters }).(SettingsParameterDescriptionArrayOutput)
}

type SettingsSectionDescriptionArrayOutput struct{ *pulumi.OutputState }

func (SettingsSectionDescriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingsSectionDescription)(nil)).Elem()
}

func (o SettingsSectionDescriptionArrayOutput) ToSettingsSectionDescriptionArrayOutput() SettingsSectionDescriptionArrayOutput {
	return o
}

func (o SettingsSectionDescriptionArrayOutput) ToSettingsSectionDescriptionArrayOutputWithContext(ctx context.Context) SettingsSectionDescriptionArrayOutput {
	return o
}

func (o SettingsSectionDescriptionArrayOutput) Index(i pulumi.IntInput) SettingsSectionDescriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SettingsSectionDescription {
		return vs[0].([]SettingsSectionDescription)[vs[1].(int)]
	}).(SettingsSectionDescriptionOutput)
}

// Describes a section in the fabric settings of the cluster.
type SettingsSectionDescriptionResponse struct {
	// The section name of the fabric settings.
	Name string `pulumi:"name"`
	// The collection of parameters in the section.
	Parameters []SettingsParameterDescriptionResponse `pulumi:"parameters"`
}

// SettingsSectionDescriptionResponseInput is an input type that accepts SettingsSectionDescriptionResponseArgs and SettingsSectionDescriptionResponseOutput values.
// You can construct a concrete instance of `SettingsSectionDescriptionResponseInput` via:
//
//          SettingsSectionDescriptionResponseArgs{...}
type SettingsSectionDescriptionResponseInput interface {
	pulumi.Input

	ToSettingsSectionDescriptionResponseOutput() SettingsSectionDescriptionResponseOutput
	ToSettingsSectionDescriptionResponseOutputWithContext(context.Context) SettingsSectionDescriptionResponseOutput
}

// Describes a section in the fabric settings of the cluster.
type SettingsSectionDescriptionResponseArgs struct {
	// The section name of the fabric settings.
	Name pulumi.StringInput `pulumi:"name"`
	// The collection of parameters in the section.
	Parameters SettingsParameterDescriptionResponseArrayInput `pulumi:"parameters"`
}

func (SettingsSectionDescriptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingsSectionDescriptionResponse)(nil)).Elem()
}

func (i SettingsSectionDescriptionResponseArgs) ToSettingsSectionDescriptionResponseOutput() SettingsSectionDescriptionResponseOutput {
	return i.ToSettingsSectionDescriptionResponseOutputWithContext(context.Background())
}

func (i SettingsSectionDescriptionResponseArgs) ToSettingsSectionDescriptionResponseOutputWithContext(ctx context.Context) SettingsSectionDescriptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsSectionDescriptionResponseOutput)
}

// SettingsSectionDescriptionResponseArrayInput is an input type that accepts SettingsSectionDescriptionResponseArray and SettingsSectionDescriptionResponseArrayOutput values.
// You can construct a concrete instance of `SettingsSectionDescriptionResponseArrayInput` via:
//
//          SettingsSectionDescriptionResponseArray{ SettingsSectionDescriptionResponseArgs{...} }
type SettingsSectionDescriptionResponseArrayInput interface {
	pulumi.Input

	ToSettingsSectionDescriptionResponseArrayOutput() SettingsSectionDescriptionResponseArrayOutput
	ToSettingsSectionDescriptionResponseArrayOutputWithContext(context.Context) SettingsSectionDescriptionResponseArrayOutput
}

type SettingsSectionDescriptionResponseArray []SettingsSectionDescriptionResponseInput

func (SettingsSectionDescriptionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingsSectionDescriptionResponse)(nil)).Elem()
}

func (i SettingsSectionDescriptionResponseArray) ToSettingsSectionDescriptionResponseArrayOutput() SettingsSectionDescriptionResponseArrayOutput {
	return i.ToSettingsSectionDescriptionResponseArrayOutputWithContext(context.Background())
}

func (i SettingsSectionDescriptionResponseArray) ToSettingsSectionDescriptionResponseArrayOutputWithContext(ctx context.Context) SettingsSectionDescriptionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsSectionDescriptionResponseArrayOutput)
}

// Describes a section in the fabric settings of the cluster.
type SettingsSectionDescriptionResponseOutput struct{ *pulumi.OutputState }

func (SettingsSectionDescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingsSectionDescriptionResponse)(nil)).Elem()
}

func (o SettingsSectionDescriptionResponseOutput) ToSettingsSectionDescriptionResponseOutput() SettingsSectionDescriptionResponseOutput {
	return o
}

func (o SettingsSectionDescriptionResponseOutput) ToSettingsSectionDescriptionResponseOutputWithContext(ctx context.Context) SettingsSectionDescriptionResponseOutput {
	return o
}

// The section name of the fabric settings.
func (o SettingsSectionDescriptionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsSectionDescriptionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The collection of parameters in the section.
func (o SettingsSectionDescriptionResponseOutput) Parameters() SettingsParameterDescriptionResponseArrayOutput {
	return o.ApplyT(func(v SettingsSectionDescriptionResponse) []SettingsParameterDescriptionResponse { return v.Parameters }).(SettingsParameterDescriptionResponseArrayOutput)
}

type SettingsSectionDescriptionResponseArrayOutput struct{ *pulumi.OutputState }

func (SettingsSectionDescriptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingsSectionDescriptionResponse)(nil)).Elem()
}

func (o SettingsSectionDescriptionResponseArrayOutput) ToSettingsSectionDescriptionResponseArrayOutput() SettingsSectionDescriptionResponseArrayOutput {
	return o
}

func (o SettingsSectionDescriptionResponseArrayOutput) ToSettingsSectionDescriptionResponseArrayOutputWithContext(ctx context.Context) SettingsSectionDescriptionResponseArrayOutput {
	return o
}

func (o SettingsSectionDescriptionResponseArrayOutput) Index(i pulumi.IntInput) SettingsSectionDescriptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SettingsSectionDescriptionResponse {
		return vs[0].([]SettingsSectionDescriptionResponse)[vs[1].(int)]
	}).(SettingsSectionDescriptionResponseOutput)
}

// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
type UserAssignedIdentityMap struct {
}

// UserAssignedIdentityMapInput is an input type that accepts UserAssignedIdentityMap and UserAssignedIdentityMapOutput values.
// You can construct a concrete instance of `UserAssignedIdentityMapInput` via:
//
//          UserAssignedIdentityMap{ "key": UserAssignedIdentityArgs{...} }
type UserAssignedIdentityMapInput interface {
	pulumi.Input

	ToUserAssignedIdentityMapOutput() UserAssignedIdentityMapOutput
	ToUserAssignedIdentityMapOutputWithContext(context.Context) UserAssignedIdentityMapOutput
}

// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
type UserAssignedIdentityMapArgs struct {
}

func (UserAssignedIdentityMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityMap)(nil)).Elem()
}

func (i UserAssignedIdentityMapArgs) ToUserAssignedIdentityMapOutput() UserAssignedIdentityMapOutput {
	return i.ToUserAssignedIdentityMapOutputWithContext(context.Background())
}

func (i UserAssignedIdentityMapArgs) ToUserAssignedIdentityMapOutputWithContext(ctx context.Context) UserAssignedIdentityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityMapOutput)
}

func (i UserAssignedIdentityMapArgs) ToUserAssignedIdentityMapPtrOutput() UserAssignedIdentityMapPtrOutput {
	return i.ToUserAssignedIdentityMapPtrOutputWithContext(context.Background())
}

func (i UserAssignedIdentityMapArgs) ToUserAssignedIdentityMapPtrOutputWithContext(ctx context.Context) UserAssignedIdentityMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityMapOutput).ToUserAssignedIdentityMapPtrOutputWithContext(ctx)
}

// UserAssignedIdentityMapPtrInput is an input type that accepts UserAssignedIdentityMapArgs, UserAssignedIdentityMapPtr and UserAssignedIdentityMapPtrOutput values.
// You can construct a concrete instance of `UserAssignedIdentityMapPtrInput` via:
//
//          UserAssignedIdentityMapArgs{...}
//
//  or:
//
//          nil
type UserAssignedIdentityMapPtrInput interface {
	pulumi.Input

	ToUserAssignedIdentityMapPtrOutput() UserAssignedIdentityMapPtrOutput
	ToUserAssignedIdentityMapPtrOutputWithContext(context.Context) UserAssignedIdentityMapPtrOutput
}

type userAssignedIdentityMapPtrType UserAssignedIdentityMapArgs

func UserAssignedIdentityMapPtr(v *UserAssignedIdentityMapArgs) UserAssignedIdentityMapPtrInput {
	return (*userAssignedIdentityMapPtrType)(v)
}

func (*userAssignedIdentityMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedIdentityMap)(nil)).Elem()
}

func (i *userAssignedIdentityMapPtrType) ToUserAssignedIdentityMapPtrOutput() UserAssignedIdentityMapPtrOutput {
	return i.ToUserAssignedIdentityMapPtrOutputWithContext(context.Background())
}

func (i *userAssignedIdentityMapPtrType) ToUserAssignedIdentityMapPtrOutputWithContext(ctx context.Context) UserAssignedIdentityMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityMapPtrOutput)
}

// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
type UserAssignedIdentityMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityMap)(nil)).Elem()
}

func (o UserAssignedIdentityMapOutput) ToUserAssignedIdentityMapOutput() UserAssignedIdentityMapOutput {
	return o
}

func (o UserAssignedIdentityMapOutput) ToUserAssignedIdentityMapOutputWithContext(ctx context.Context) UserAssignedIdentityMapOutput {
	return o
}

func (o UserAssignedIdentityMapOutput) ToUserAssignedIdentityMapPtrOutput() UserAssignedIdentityMapPtrOutput {
	return o.ToUserAssignedIdentityMapPtrOutputWithContext(context.Background())
}

func (o UserAssignedIdentityMapOutput) ToUserAssignedIdentityMapPtrOutputWithContext(ctx context.Context) UserAssignedIdentityMapPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentityMap) *UserAssignedIdentityMap {
		return &v
	}).(UserAssignedIdentityMapPtrOutput)
}

type UserAssignedIdentityMapPtrOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedIdentityMap)(nil)).Elem()
}

func (o UserAssignedIdentityMapPtrOutput) ToUserAssignedIdentityMapPtrOutput() UserAssignedIdentityMapPtrOutput {
	return o
}

func (o UserAssignedIdentityMapPtrOutput) ToUserAssignedIdentityMapPtrOutputWithContext(ctx context.Context) UserAssignedIdentityMapPtrOutput {
	return o
}

func (o UserAssignedIdentityMapPtrOutput) Elem() UserAssignedIdentityMapOutput {
	return o.ApplyT(func(v *UserAssignedIdentityMap) UserAssignedIdentityMap { return *v }).(UserAssignedIdentityMapOutput)
}

// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
type UserAssignedIdentityMapResponse struct {
}

// UserAssignedIdentityMapResponseInput is an input type that accepts UserAssignedIdentityMapResponseArgs and UserAssignedIdentityMapResponseOutput values.
// You can construct a concrete instance of `UserAssignedIdentityMapResponseInput` via:
//
//          UserAssignedIdentityMapResponseArgs{...}
type UserAssignedIdentityMapResponseInput interface {
	pulumi.Input

	ToUserAssignedIdentityMapResponseOutput() UserAssignedIdentityMapResponseOutput
	ToUserAssignedIdentityMapResponseOutputWithContext(context.Context) UserAssignedIdentityMapResponseOutput
}

// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
type UserAssignedIdentityMapResponseArgs struct {
}

func (UserAssignedIdentityMapResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityMapResponse)(nil)).Elem()
}

func (i UserAssignedIdentityMapResponseArgs) ToUserAssignedIdentityMapResponseOutput() UserAssignedIdentityMapResponseOutput {
	return i.ToUserAssignedIdentityMapResponseOutputWithContext(context.Background())
}

func (i UserAssignedIdentityMapResponseArgs) ToUserAssignedIdentityMapResponseOutputWithContext(ctx context.Context) UserAssignedIdentityMapResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityMapResponseOutput)
}

func (i UserAssignedIdentityMapResponseArgs) ToUserAssignedIdentityMapResponsePtrOutput() UserAssignedIdentityMapResponsePtrOutput {
	return i.ToUserAssignedIdentityMapResponsePtrOutputWithContext(context.Background())
}

func (i UserAssignedIdentityMapResponseArgs) ToUserAssignedIdentityMapResponsePtrOutputWithContext(ctx context.Context) UserAssignedIdentityMapResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityMapResponseOutput).ToUserAssignedIdentityMapResponsePtrOutputWithContext(ctx)
}

// UserAssignedIdentityMapResponsePtrInput is an input type that accepts UserAssignedIdentityMapResponseArgs, UserAssignedIdentityMapResponsePtr and UserAssignedIdentityMapResponsePtrOutput values.
// You can construct a concrete instance of `UserAssignedIdentityMapResponsePtrInput` via:
//
//          UserAssignedIdentityMapResponseArgs{...}
//
//  or:
//
//          nil
type UserAssignedIdentityMapResponsePtrInput interface {
	pulumi.Input

	ToUserAssignedIdentityMapResponsePtrOutput() UserAssignedIdentityMapResponsePtrOutput
	ToUserAssignedIdentityMapResponsePtrOutputWithContext(context.Context) UserAssignedIdentityMapResponsePtrOutput
}

type userAssignedIdentityMapResponsePtrType UserAssignedIdentityMapResponseArgs

func UserAssignedIdentityMapResponsePtr(v *UserAssignedIdentityMapResponseArgs) UserAssignedIdentityMapResponsePtrInput {
	return (*userAssignedIdentityMapResponsePtrType)(v)
}

func (*userAssignedIdentityMapResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedIdentityMapResponse)(nil)).Elem()
}

func (i *userAssignedIdentityMapResponsePtrType) ToUserAssignedIdentityMapResponsePtrOutput() UserAssignedIdentityMapResponsePtrOutput {
	return i.ToUserAssignedIdentityMapResponsePtrOutputWithContext(context.Background())
}

func (i *userAssignedIdentityMapResponsePtrType) ToUserAssignedIdentityMapResponsePtrOutputWithContext(ctx context.Context) UserAssignedIdentityMapResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityMapResponsePtrOutput)
}

// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
type UserAssignedIdentityMapResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityMapResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityMapResponse)(nil)).Elem()
}

func (o UserAssignedIdentityMapResponseOutput) ToUserAssignedIdentityMapResponseOutput() UserAssignedIdentityMapResponseOutput {
	return o
}

func (o UserAssignedIdentityMapResponseOutput) ToUserAssignedIdentityMapResponseOutputWithContext(ctx context.Context) UserAssignedIdentityMapResponseOutput {
	return o
}

func (o UserAssignedIdentityMapResponseOutput) ToUserAssignedIdentityMapResponsePtrOutput() UserAssignedIdentityMapResponsePtrOutput {
	return o.ToUserAssignedIdentityMapResponsePtrOutputWithContext(context.Background())
}

func (o UserAssignedIdentityMapResponseOutput) ToUserAssignedIdentityMapResponsePtrOutputWithContext(ctx context.Context) UserAssignedIdentityMapResponsePtrOutput {
	return o.ApplyT(func(v UserAssignedIdentityMapResponse) *UserAssignedIdentityMapResponse {
		return &v
	}).(UserAssignedIdentityMapResponsePtrOutput)
}

type UserAssignedIdentityMapResponsePtrOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityMapResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedIdentityMapResponse)(nil)).Elem()
}

func (o UserAssignedIdentityMapResponsePtrOutput) ToUserAssignedIdentityMapResponsePtrOutput() UserAssignedIdentityMapResponsePtrOutput {
	return o
}

func (o UserAssignedIdentityMapResponsePtrOutput) ToUserAssignedIdentityMapResponsePtrOutputWithContext(ctx context.Context) UserAssignedIdentityMapResponsePtrOutput {
	return o
}

func (o UserAssignedIdentityMapResponsePtrOutput) Elem() UserAssignedIdentityMapResponseOutput {
	return o.ApplyT(func(v *UserAssignedIdentityMapResponse) UserAssignedIdentityMapResponse { return *v }).(UserAssignedIdentityMapResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(ApplicationTypeOutput{})
	pulumi.RegisterOutputType(ApplicationDeltaHealthPolicyMapOutput{})
	pulumi.RegisterOutputType(ApplicationDeltaHealthPolicyMapPtrOutput{})
	pulumi.RegisterOutputType(ApplicationDeltaHealthPolicyMapResponseOutput{})
	pulumi.RegisterOutputType(ApplicationDeltaHealthPolicyMapResponsePtrOutput{})
	pulumi.RegisterOutputType(ApplicationHealthPolicyMapOutput{})
	pulumi.RegisterOutputType(ApplicationHealthPolicyMapPtrOutput{})
	pulumi.RegisterOutputType(ApplicationHealthPolicyMapResponseOutput{})
	pulumi.RegisterOutputType(ApplicationHealthPolicyMapResponsePtrOutput{})
	pulumi.RegisterOutputType(ApplicationMetricDescriptionListOutput{})
	pulumi.RegisterOutputType(ApplicationMetricDescriptionListPtrOutput{})
	pulumi.RegisterOutputType(ApplicationMetricDescriptionListResponseOutput{})
	pulumi.RegisterOutputType(ApplicationMetricDescriptionListResponsePtrOutput{})
	pulumi.RegisterOutputType(ApplicationParameterListOutput{})
	pulumi.RegisterOutputType(ApplicationParameterListPtrOutput{})
	pulumi.RegisterOutputType(ApplicationParameterListResponseOutput{})
	pulumi.RegisterOutputType(ApplicationParameterListResponsePtrOutput{})
	pulumi.RegisterOutputType(ApplicationResourcePropertiesOutput{})
	pulumi.RegisterOutputType(ApplicationResourcePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ApplicationResourcePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ApplicationResourcePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ApplicationTypeTypeOutput{})
	pulumi.RegisterOutputType(ApplicationTypeParameterListOutput{})
	pulumi.RegisterOutputType(ApplicationTypeParameterListResponseOutput{})
	pulumi.RegisterOutputType(ApplicationTypeParameterListResponsePtrOutput{})
	pulumi.RegisterOutputType(ApplicationTypeResourcePropertiesOutput{})
	pulumi.RegisterOutputType(ApplicationTypeResourcePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ApplicationTypeResourcePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ApplicationTypeResourcePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ApplicationTypeVersionTypeOutput{})
	pulumi.RegisterOutputType(ApplicationTypeVersionResourcePropertiesOutput{})
	pulumi.RegisterOutputType(ApplicationTypeVersionResourcePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ApplicationTypeVersionResourcePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ApplicationTypeVersionResourcePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ApplicationTypeVersionsCleanupPolicyOutput{})
	pulumi.RegisterOutputType(ApplicationTypeVersionsCleanupPolicyPtrOutput{})
	pulumi.RegisterOutputType(ApplicationTypeVersionsCleanupPolicyResponseOutput{})
	pulumi.RegisterOutputType(ApplicationTypeVersionsCleanupPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ApplicationUpgradePolicyOutput{})
	pulumi.RegisterOutputType(ApplicationUpgradePolicyPtrOutput{})
	pulumi.RegisterOutputType(ApplicationUpgradePolicyResponseOutput{})
	pulumi.RegisterOutputType(ApplicationUpgradePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ApplicationUserAssignedIdentityOutput{})
	pulumi.RegisterOutputType(ApplicationUserAssignedIdentityArrayOutput{})
	pulumi.RegisterOutputType(ApplicationUserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(ApplicationUserAssignedIdentityResponseArrayOutput{})
	pulumi.RegisterOutputType(ArmApplicationHealthPolicyOutput{})
	pulumi.RegisterOutputType(ArmApplicationHealthPolicyPtrOutput{})
	pulumi.RegisterOutputType(ArmApplicationHealthPolicyResponseOutput{})
	pulumi.RegisterOutputType(ArmApplicationHealthPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ArmRollingUpgradeMonitoringPolicyOutput{})
	pulumi.RegisterOutputType(ArmRollingUpgradeMonitoringPolicyPtrOutput{})
	pulumi.RegisterOutputType(ArmRollingUpgradeMonitoringPolicyResponseOutput{})
	pulumi.RegisterOutputType(ArmRollingUpgradeMonitoringPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ArmServiceTypeHealthPolicyOutput{})
	pulumi.RegisterOutputType(ArmServiceTypeHealthPolicyPtrOutput{})
	pulumi.RegisterOutputType(ArmServiceTypeHealthPolicyMapOutput{})
	pulumi.RegisterOutputType(ArmServiceTypeHealthPolicyMapPtrOutput{})
	pulumi.RegisterOutputType(ArmServiceTypeHealthPolicyMapResponseOutput{})
	pulumi.RegisterOutputType(ArmServiceTypeHealthPolicyMapResponsePtrOutput{})
	pulumi.RegisterOutputType(ArmServiceTypeHealthPolicyResponseOutput{})
	pulumi.RegisterOutputType(ArmServiceTypeHealthPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryPtrOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryResponseOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryResponsePtrOutput{})
	pulumi.RegisterOutputType(CertificateDescriptionOutput{})
	pulumi.RegisterOutputType(CertificateDescriptionPtrOutput{})
	pulumi.RegisterOutputType(CertificateDescriptionResponseOutput{})
	pulumi.RegisterOutputType(CertificateDescriptionResponsePtrOutput{})
	pulumi.RegisterOutputType(ClientCertificateCommonNameOutput{})
	pulumi.RegisterOutputType(ClientCertificateCommonNameArrayOutput{})
	pulumi.RegisterOutputType(ClientCertificateCommonNameResponseOutput{})
	pulumi.RegisterOutputType(ClientCertificateCommonNameResponseArrayOutput{})
	pulumi.RegisterOutputType(ClientCertificateThumbprintOutput{})
	pulumi.RegisterOutputType(ClientCertificateThumbprintArrayOutput{})
	pulumi.RegisterOutputType(ClientCertificateThumbprintResponseOutput{})
	pulumi.RegisterOutputType(ClientCertificateThumbprintResponseArrayOutput{})
	pulumi.RegisterOutputType(ClusterTypeOutput{})
	pulumi.RegisterOutputType(ClusterHealthPolicyOutput{})
	pulumi.RegisterOutputType(ClusterHealthPolicyPtrOutput{})
	pulumi.RegisterOutputType(ClusterHealthPolicyResponseOutput{})
	pulumi.RegisterOutputType(ClusterHealthPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterPropertiesOutput{})
	pulumi.RegisterOutputType(ClusterPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ClusterPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ClusterPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeDeltaHealthPolicyOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeDeltaHealthPolicyPtrOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeDeltaHealthPolicyResponseOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeDeltaHealthPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterUpgradePolicyOutput{})
	pulumi.RegisterOutputType(ClusterUpgradePolicyPtrOutput{})
	pulumi.RegisterOutputType(ClusterUpgradePolicyResponseOutput{})
	pulumi.RegisterOutputType(ClusterUpgradePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterVersionDetailsOutput{})
	pulumi.RegisterOutputType(ClusterVersionDetailsResponseOutput{})
	pulumi.RegisterOutputType(ClusterVersionDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(CorrelationSchemeListOutput{})
	pulumi.RegisterOutputType(CorrelationSchemeListPtrOutput{})
	pulumi.RegisterOutputType(CorrelationSchemeListResponseOutput{})
	pulumi.RegisterOutputType(CorrelationSchemeListResponsePtrOutput{})
	pulumi.RegisterOutputType(DiagnosticsStorageAccountConfigOutput{})
	pulumi.RegisterOutputType(DiagnosticsStorageAccountConfigPtrOutput{})
	pulumi.RegisterOutputType(DiagnosticsStorageAccountConfigResponseOutput{})
	pulumi.RegisterOutputType(DiagnosticsStorageAccountConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(EndpointRangeDescriptionOutput{})
	pulumi.RegisterOutputType(EndpointRangeDescriptionPtrOutput{})
	pulumi.RegisterOutputType(EndpointRangeDescriptionResponseOutput{})
	pulumi.RegisterOutputType(EndpointRangeDescriptionResponsePtrOutput{})
	pulumi.RegisterOutputType(ForceRestartOutput{})
	pulumi.RegisterOutputType(ForceRestartPtrOutput{})
	pulumi.RegisterOutputType(ForceRestartResponseOutput{})
	pulumi.RegisterOutputType(ForceRestartResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedIdentityOutput{})
	pulumi.RegisterOutputType(ManagedIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(NodeTypeDescriptionOutput{})
	pulumi.RegisterOutputType(NodeTypeDescriptionArrayOutput{})
	pulumi.RegisterOutputType(NodeTypeDescriptionResponseOutput{})
	pulumi.RegisterOutputType(NodeTypeDescriptionResponseArrayOutput{})
	pulumi.RegisterOutputType(PartitionSchemeDescriptionOutput{})
	pulumi.RegisterOutputType(PartitionSchemeDescriptionPtrOutput{})
	pulumi.RegisterOutputType(PartitionSchemeDescriptionResponseOutput{})
	pulumi.RegisterOutputType(PartitionSchemeDescriptionResponsePtrOutput{})
	pulumi.RegisterOutputType(ServerCertificateCommonNameOutput{})
	pulumi.RegisterOutputType(ServerCertificateCommonNameArrayOutput{})
	pulumi.RegisterOutputType(ServerCertificateCommonNameResponseOutput{})
	pulumi.RegisterOutputType(ServerCertificateCommonNameResponseArrayOutput{})
	pulumi.RegisterOutputType(ServerCertificateCommonNamesOutput{})
	pulumi.RegisterOutputType(ServerCertificateCommonNamesPtrOutput{})
	pulumi.RegisterOutputType(ServerCertificateCommonNamesResponseOutput{})
	pulumi.RegisterOutputType(ServerCertificateCommonNamesResponsePtrOutput{})
	pulumi.RegisterOutputType(ServiceTypeOutput{})
	pulumi.RegisterOutputType(ServiceLoadMetricsListOutput{})
	pulumi.RegisterOutputType(ServiceLoadMetricsListPtrOutput{})
	pulumi.RegisterOutputType(ServiceLoadMetricsListResponseOutput{})
	pulumi.RegisterOutputType(ServiceLoadMetricsListResponsePtrOutput{})
	pulumi.RegisterOutputType(ServicePlacementPoliciesListOutput{})
	pulumi.RegisterOutputType(ServicePlacementPoliciesListPtrOutput{})
	pulumi.RegisterOutputType(ServicePlacementPoliciesListResponseOutput{})
	pulumi.RegisterOutputType(ServicePlacementPoliciesListResponsePtrOutput{})
	pulumi.RegisterOutputType(ServiceResourcePropertiesOutput{})
	pulumi.RegisterOutputType(ServiceResourcePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ServiceResourcePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ServiceResourcePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SettingsParameterDescriptionOutput{})
	pulumi.RegisterOutputType(SettingsParameterDescriptionArrayOutput{})
	pulumi.RegisterOutputType(SettingsParameterDescriptionResponseOutput{})
	pulumi.RegisterOutputType(SettingsParameterDescriptionResponseArrayOutput{})
	pulumi.RegisterOutputType(SettingsSectionDescriptionOutput{})
	pulumi.RegisterOutputType(SettingsSectionDescriptionArrayOutput{})
	pulumi.RegisterOutputType(SettingsSectionDescriptionResponseOutput{})
	pulumi.RegisterOutputType(SettingsSectionDescriptionResponseArrayOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityMapOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityMapPtrOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityMapResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityMapResponsePtrOutput{})
}
