// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180201preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Properties that describe a base image dependency.
type BaseImageDependencyResponse struct {
	// The sha256-based digest of the image manifest.
	Digest *string `pulumi:"digest"`
	// The registry login server.
	Registry *string `pulumi:"registry"`
	// The repository name.
	Repository *string `pulumi:"repository"`
	// The tag name.
	Tag *string `pulumi:"tag"`
	// The type of the base image dependency.
	Type *string `pulumi:"type"`
}

// Properties that describe a base image dependency.
type BaseImageDependencyResponseOutput struct{ *pulumi.OutputState }

func (BaseImageDependencyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BaseImageDependencyResponse)(nil)).Elem()
}

func (o BaseImageDependencyResponseOutput) ToBaseImageDependencyResponseOutput() BaseImageDependencyResponseOutput {
	return o
}

func (o BaseImageDependencyResponseOutput) ToBaseImageDependencyResponseOutputWithContext(ctx context.Context) BaseImageDependencyResponseOutput {
	return o
}

// The sha256-based digest of the image manifest.
func (o BaseImageDependencyResponseOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageDependencyResponse) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// The registry login server.
func (o BaseImageDependencyResponseOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageDependencyResponse) *string { return v.Registry }).(pulumi.StringPtrOutput)
}

// The repository name.
func (o BaseImageDependencyResponseOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageDependencyResponse) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

// The tag name.
func (o BaseImageDependencyResponseOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageDependencyResponse) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The type of the base image dependency.
func (o BaseImageDependencyResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BaseImageDependencyResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type BaseImageDependencyResponseArrayOutput struct{ *pulumi.OutputState }

func (BaseImageDependencyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BaseImageDependencyResponse)(nil)).Elem()
}

func (o BaseImageDependencyResponseArrayOutput) ToBaseImageDependencyResponseArrayOutput() BaseImageDependencyResponseArrayOutput {
	return o
}

func (o BaseImageDependencyResponseArrayOutput) ToBaseImageDependencyResponseArrayOutputWithContext(ctx context.Context) BaseImageDependencyResponseArrayOutput {
	return o
}

func (o BaseImageDependencyResponseArrayOutput) Index(i pulumi.IntInput) BaseImageDependencyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BaseImageDependencyResponse {
		return vs[0].([]BaseImageDependencyResponse)[vs[1].(int)]
	}).(BaseImageDependencyResponseOutput)
}

// Properties of a build argument.
type BuildArgumentResponse struct {
	// Flag to indicate whether the argument represents a secret and want to be removed from build logs.
	IsSecret *bool `pulumi:"isSecret"`
	// The name of the argument.
	Name string `pulumi:"name"`
	// The type of the argument.
	Type string `pulumi:"type"`
	// The value of the argument.
	Value string `pulumi:"value"`
}

// Properties of a build argument.
type BuildArgumentResponseOutput struct{ *pulumi.OutputState }

func (BuildArgumentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildArgumentResponse)(nil)).Elem()
}

func (o BuildArgumentResponseOutput) ToBuildArgumentResponseOutput() BuildArgumentResponseOutput {
	return o
}

func (o BuildArgumentResponseOutput) ToBuildArgumentResponseOutputWithContext(ctx context.Context) BuildArgumentResponseOutput {
	return o
}

// Flag to indicate whether the argument represents a secret and want to be removed from build logs.
func (o BuildArgumentResponseOutput) IsSecret() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BuildArgumentResponse) *bool { return v.IsSecret }).(pulumi.BoolPtrOutput)
}

// The name of the argument.
func (o BuildArgumentResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BuildArgumentResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The type of the argument.
func (o BuildArgumentResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BuildArgumentResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The value of the argument.
func (o BuildArgumentResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v BuildArgumentResponse) string { return v.Value }).(pulumi.StringOutput)
}

type BuildArgumentResponseArrayOutput struct{ *pulumi.OutputState }

func (BuildArgumentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildArgumentResponse)(nil)).Elem()
}

func (o BuildArgumentResponseArrayOutput) ToBuildArgumentResponseArrayOutput() BuildArgumentResponseArrayOutput {
	return o
}

func (o BuildArgumentResponseArrayOutput) ToBuildArgumentResponseArrayOutputWithContext(ctx context.Context) BuildArgumentResponseArrayOutput {
	return o
}

func (o BuildArgumentResponseArrayOutput) Index(i pulumi.IntInput) BuildArgumentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BuildArgumentResponse {
		return vs[0].([]BuildArgumentResponse)[vs[1].(int)]
	}).(BuildArgumentResponseOutput)
}

// The Docker build step.
type DockerBuildStepResponse struct {
	// List of base image dependencies for a step.
	BaseImageDependencies []BaseImageDependencyResponse `pulumi:"baseImageDependencies"`
	// The type of the auto trigger for base image dependency updates.
	BaseImageTrigger *string `pulumi:"baseImageTrigger"`
	// The repository branch name.
	Branch *string `pulumi:"branch"`
	// The custom arguments for building this build step.
	BuildArguments []BuildArgumentResponse `pulumi:"buildArguments"`
	// The relative context path for a docker build in the source.
	ContextPath *string `pulumi:"contextPath"`
	// The Docker file path relative to the source control root.
	DockerFilePath *string `pulumi:"dockerFilePath"`
	// The fully qualified image names including the repository and tag.
	ImageNames []string `pulumi:"imageNames"`
	// The value of this property indicates whether the image built should be pushed to the registry or not.
	IsPushEnabled *bool `pulumi:"isPushEnabled"`
	// The value of this property indicates whether the image cache is enabled or not.
	NoCache *bool `pulumi:"noCache"`
	// The provisioning state of the build step.
	ProvisioningState string `pulumi:"provisioningState"`
	// The type of the step.
	Type string `pulumi:"type"`
}

// The Docker build step.
type DockerBuildStepResponseOutput struct{ *pulumi.OutputState }

func (DockerBuildStepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerBuildStepResponse)(nil)).Elem()
}

func (o DockerBuildStepResponseOutput) ToDockerBuildStepResponseOutput() DockerBuildStepResponseOutput {
	return o
}

func (o DockerBuildStepResponseOutput) ToDockerBuildStepResponseOutputWithContext(ctx context.Context) DockerBuildStepResponseOutput {
	return o
}

func (o DockerBuildStepResponseOutput) ToDockerBuildStepResponsePtrOutput() DockerBuildStepResponsePtrOutput {
	return o.ToDockerBuildStepResponsePtrOutputWithContext(context.Background())
}

func (o DockerBuildStepResponseOutput) ToDockerBuildStepResponsePtrOutputWithContext(ctx context.Context) DockerBuildStepResponsePtrOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) *DockerBuildStepResponse {
		return &v
	}).(DockerBuildStepResponsePtrOutput)
}

// List of base image dependencies for a step.
func (o DockerBuildStepResponseOutput) BaseImageDependencies() BaseImageDependencyResponseArrayOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) []BaseImageDependencyResponse { return v.BaseImageDependencies }).(BaseImageDependencyResponseArrayOutput)
}

// The type of the auto trigger for base image dependency updates.
func (o DockerBuildStepResponseOutput) BaseImageTrigger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) *string { return v.BaseImageTrigger }).(pulumi.StringPtrOutput)
}

// The repository branch name.
func (o DockerBuildStepResponseOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// The custom arguments for building this build step.
func (o DockerBuildStepResponseOutput) BuildArguments() BuildArgumentResponseArrayOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) []BuildArgumentResponse { return v.BuildArguments }).(BuildArgumentResponseArrayOutput)
}

// The relative context path for a docker build in the source.
func (o DockerBuildStepResponseOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) *string { return v.ContextPath }).(pulumi.StringPtrOutput)
}

// The Docker file path relative to the source control root.
func (o DockerBuildStepResponseOutput) DockerFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) *string { return v.DockerFilePath }).(pulumi.StringPtrOutput)
}

// The fully qualified image names including the repository and tag.
func (o DockerBuildStepResponseOutput) ImageNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) []string { return v.ImageNames }).(pulumi.StringArrayOutput)
}

// The value of this property indicates whether the image built should be pushed to the registry or not.
func (o DockerBuildStepResponseOutput) IsPushEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) *bool { return v.IsPushEnabled }).(pulumi.BoolPtrOutput)
}

// The value of this property indicates whether the image cache is enabled or not.
func (o DockerBuildStepResponseOutput) NoCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) *bool { return v.NoCache }).(pulumi.BoolPtrOutput)
}

// The provisioning state of the build step.
func (o DockerBuildStepResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The type of the step.
func (o DockerBuildStepResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DockerBuildStepResponse) string { return v.Type }).(pulumi.StringOutput)
}

type DockerBuildStepResponsePtrOutput struct{ *pulumi.OutputState }

func (DockerBuildStepResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerBuildStepResponse)(nil)).Elem()
}

func (o DockerBuildStepResponsePtrOutput) ToDockerBuildStepResponsePtrOutput() DockerBuildStepResponsePtrOutput {
	return o
}

func (o DockerBuildStepResponsePtrOutput) ToDockerBuildStepResponsePtrOutputWithContext(ctx context.Context) DockerBuildStepResponsePtrOutput {
	return o
}

func (o DockerBuildStepResponsePtrOutput) Elem() DockerBuildStepResponseOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) DockerBuildStepResponse { return *v }).(DockerBuildStepResponseOutput)
}

// List of base image dependencies for a step.
func (o DockerBuildStepResponsePtrOutput) BaseImageDependencies() BaseImageDependencyResponseArrayOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) []BaseImageDependencyResponse {
		if v == nil {
			return nil
		}
		return v.BaseImageDependencies
	}).(BaseImageDependencyResponseArrayOutput)
}

// The type of the auto trigger for base image dependency updates.
func (o DockerBuildStepResponsePtrOutput) BaseImageTrigger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) *string {
		if v == nil {
			return nil
		}
		return v.BaseImageTrigger
	}).(pulumi.StringPtrOutput)
}

// The repository branch name.
func (o DockerBuildStepResponsePtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// The custom arguments for building this build step.
func (o DockerBuildStepResponsePtrOutput) BuildArguments() BuildArgumentResponseArrayOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) []BuildArgumentResponse {
		if v == nil {
			return nil
		}
		return v.BuildArguments
	}).(BuildArgumentResponseArrayOutput)
}

// The relative context path for a docker build in the source.
func (o DockerBuildStepResponsePtrOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContextPath
	}).(pulumi.StringPtrOutput)
}

// The Docker file path relative to the source control root.
func (o DockerBuildStepResponsePtrOutput) DockerFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) *string {
		if v == nil {
			return nil
		}
		return v.DockerFilePath
	}).(pulumi.StringPtrOutput)
}

// The fully qualified image names including the repository and tag.
func (o DockerBuildStepResponsePtrOutput) ImageNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) []string {
		if v == nil {
			return nil
		}
		return v.ImageNames
	}).(pulumi.StringArrayOutput)
}

// The value of this property indicates whether the image built should be pushed to the registry or not.
func (o DockerBuildStepResponsePtrOutput) IsPushEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsPushEnabled
	}).(pulumi.BoolPtrOutput)
}

// The value of this property indicates whether the image cache is enabled or not.
func (o DockerBuildStepResponsePtrOutput) NoCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) *bool {
		if v == nil {
			return nil
		}
		return v.NoCache
	}).(pulumi.BoolPtrOutput)
}

// The provisioning state of the build step.
func (o DockerBuildStepResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The type of the step.
func (o DockerBuildStepResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildStepResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The platform properties against which the build has to happen.
type PlatformProperties struct {
	// The CPU configuration in terms of number of cores required for the build.
	Cpu *int `pulumi:"cpu"`
	// The operating system type required for the build.
	OsType string `pulumi:"osType"`
}

// PlatformPropertiesInput is an input type that accepts PlatformPropertiesArgs and PlatformPropertiesOutput values.
// You can construct a concrete instance of `PlatformPropertiesInput` via:
//
//          PlatformPropertiesArgs{...}
type PlatformPropertiesInput interface {
	pulumi.Input

	ToPlatformPropertiesOutput() PlatformPropertiesOutput
	ToPlatformPropertiesOutputWithContext(context.Context) PlatformPropertiesOutput
}

// The platform properties against which the build has to happen.
type PlatformPropertiesArgs struct {
	// The CPU configuration in terms of number of cores required for the build.
	Cpu pulumi.IntPtrInput `pulumi:"cpu"`
	// The operating system type required for the build.
	OsType pulumi.StringInput `pulumi:"osType"`
}

func (PlatformPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlatformProperties)(nil)).Elem()
}

func (i PlatformPropertiesArgs) ToPlatformPropertiesOutput() PlatformPropertiesOutput {
	return i.ToPlatformPropertiesOutputWithContext(context.Background())
}

func (i PlatformPropertiesArgs) ToPlatformPropertiesOutputWithContext(ctx context.Context) PlatformPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformPropertiesOutput)
}

func (i PlatformPropertiesArgs) ToPlatformPropertiesPtrOutput() PlatformPropertiesPtrOutput {
	return i.ToPlatformPropertiesPtrOutputWithContext(context.Background())
}

func (i PlatformPropertiesArgs) ToPlatformPropertiesPtrOutputWithContext(ctx context.Context) PlatformPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformPropertiesOutput).ToPlatformPropertiesPtrOutputWithContext(ctx)
}

// PlatformPropertiesPtrInput is an input type that accepts PlatformPropertiesArgs, PlatformPropertiesPtr and PlatformPropertiesPtrOutput values.
// You can construct a concrete instance of `PlatformPropertiesPtrInput` via:
//
//          PlatformPropertiesArgs{...}
//
//  or:
//
//          nil
type PlatformPropertiesPtrInput interface {
	pulumi.Input

	ToPlatformPropertiesPtrOutput() PlatformPropertiesPtrOutput
	ToPlatformPropertiesPtrOutputWithContext(context.Context) PlatformPropertiesPtrOutput
}

type platformPropertiesPtrType PlatformPropertiesArgs

func PlatformPropertiesPtr(v *PlatformPropertiesArgs) PlatformPropertiesPtrInput {
	return (*platformPropertiesPtrType)(v)
}

func (*platformPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlatformProperties)(nil)).Elem()
}

func (i *platformPropertiesPtrType) ToPlatformPropertiesPtrOutput() PlatformPropertiesPtrOutput {
	return i.ToPlatformPropertiesPtrOutputWithContext(context.Background())
}

func (i *platformPropertiesPtrType) ToPlatformPropertiesPtrOutputWithContext(ctx context.Context) PlatformPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformPropertiesPtrOutput)
}

// The platform properties against which the build has to happen.
type PlatformPropertiesResponse struct {
	// The CPU configuration in terms of number of cores required for the build.
	Cpu *int `pulumi:"cpu"`
	// The operating system type required for the build.
	OsType string `pulumi:"osType"`
}

// The platform properties against which the build has to happen.
type PlatformPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PlatformPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlatformPropertiesResponse)(nil)).Elem()
}

func (o PlatformPropertiesResponseOutput) ToPlatformPropertiesResponseOutput() PlatformPropertiesResponseOutput {
	return o
}

func (o PlatformPropertiesResponseOutput) ToPlatformPropertiesResponseOutputWithContext(ctx context.Context) PlatformPropertiesResponseOutput {
	return o
}

func (o PlatformPropertiesResponseOutput) ToPlatformPropertiesResponsePtrOutput() PlatformPropertiesResponsePtrOutput {
	return o.ToPlatformPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o PlatformPropertiesResponseOutput) ToPlatformPropertiesResponsePtrOutputWithContext(ctx context.Context) PlatformPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PlatformPropertiesResponse) *PlatformPropertiesResponse {
		return &v
	}).(PlatformPropertiesResponsePtrOutput)
}

// The CPU configuration in terms of number of cores required for the build.
func (o PlatformPropertiesResponseOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PlatformPropertiesResponse) *int { return v.Cpu }).(pulumi.IntPtrOutput)
}

// The operating system type required for the build.
func (o PlatformPropertiesResponseOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v PlatformPropertiesResponse) string { return v.OsType }).(pulumi.StringOutput)
}

type PlatformPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PlatformPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlatformPropertiesResponse)(nil)).Elem()
}

func (o PlatformPropertiesResponsePtrOutput) ToPlatformPropertiesResponsePtrOutput() PlatformPropertiesResponsePtrOutput {
	return o
}

func (o PlatformPropertiesResponsePtrOutput) ToPlatformPropertiesResponsePtrOutputWithContext(ctx context.Context) PlatformPropertiesResponsePtrOutput {
	return o
}

func (o PlatformPropertiesResponsePtrOutput) Elem() PlatformPropertiesResponseOutput {
	return o.ApplyT(func(v *PlatformPropertiesResponse) PlatformPropertiesResponse { return *v }).(PlatformPropertiesResponseOutput)
}

// The CPU configuration in terms of number of cores required for the build.
func (o PlatformPropertiesResponsePtrOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PlatformPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.IntPtrOutput)
}

// The operating system type required for the build.
func (o PlatformPropertiesResponsePtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlatformPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.OsType
	}).(pulumi.StringPtrOutput)
}

// The authorization properties for accessing the source code repository.
type SourceControlAuthInfo struct {
	// Time in seconds that the token remains valid
	ExpiresIn *int `pulumi:"expiresIn"`
	// The refresh token used to refresh the access token.
	RefreshToken *string `pulumi:"refreshToken"`
	// The scope of the access token.
	Scope *string `pulumi:"scope"`
	// The access token used to access the source control provider.
	Token string `pulumi:"token"`
	// The type of Auth token.
	TokenType *string `pulumi:"tokenType"`
}

// SourceControlAuthInfoInput is an input type that accepts SourceControlAuthInfoArgs and SourceControlAuthInfoOutput values.
// You can construct a concrete instance of `SourceControlAuthInfoInput` via:
//
//          SourceControlAuthInfoArgs{...}
type SourceControlAuthInfoInput interface {
	pulumi.Input

	ToSourceControlAuthInfoOutput() SourceControlAuthInfoOutput
	ToSourceControlAuthInfoOutputWithContext(context.Context) SourceControlAuthInfoOutput
}

// The authorization properties for accessing the source code repository.
type SourceControlAuthInfoArgs struct {
	// Time in seconds that the token remains valid
	ExpiresIn pulumi.IntPtrInput `pulumi:"expiresIn"`
	// The refresh token used to refresh the access token.
	RefreshToken pulumi.StringPtrInput `pulumi:"refreshToken"`
	// The scope of the access token.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// The access token used to access the source control provider.
	Token pulumi.StringInput `pulumi:"token"`
	// The type of Auth token.
	TokenType pulumi.StringPtrInput `pulumi:"tokenType"`
}

func (SourceControlAuthInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceControlAuthInfo)(nil)).Elem()
}

func (i SourceControlAuthInfoArgs) ToSourceControlAuthInfoOutput() SourceControlAuthInfoOutput {
	return i.ToSourceControlAuthInfoOutputWithContext(context.Background())
}

func (i SourceControlAuthInfoArgs) ToSourceControlAuthInfoOutputWithContext(ctx context.Context) SourceControlAuthInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceControlAuthInfoOutput)
}

func (i SourceControlAuthInfoArgs) ToSourceControlAuthInfoPtrOutput() SourceControlAuthInfoPtrOutput {
	return i.ToSourceControlAuthInfoPtrOutputWithContext(context.Background())
}

func (i SourceControlAuthInfoArgs) ToSourceControlAuthInfoPtrOutputWithContext(ctx context.Context) SourceControlAuthInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceControlAuthInfoOutput).ToSourceControlAuthInfoPtrOutputWithContext(ctx)
}

// SourceControlAuthInfoPtrInput is an input type that accepts SourceControlAuthInfoArgs, SourceControlAuthInfoPtr and SourceControlAuthInfoPtrOutput values.
// You can construct a concrete instance of `SourceControlAuthInfoPtrInput` via:
//
//          SourceControlAuthInfoArgs{...}
//
//  or:
//
//          nil
type SourceControlAuthInfoPtrInput interface {
	pulumi.Input

	ToSourceControlAuthInfoPtrOutput() SourceControlAuthInfoPtrOutput
	ToSourceControlAuthInfoPtrOutputWithContext(context.Context) SourceControlAuthInfoPtrOutput
}

type sourceControlAuthInfoPtrType SourceControlAuthInfoArgs

func SourceControlAuthInfoPtr(v *SourceControlAuthInfoArgs) SourceControlAuthInfoPtrInput {
	return (*sourceControlAuthInfoPtrType)(v)
}

func (*sourceControlAuthInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceControlAuthInfo)(nil)).Elem()
}

func (i *sourceControlAuthInfoPtrType) ToSourceControlAuthInfoPtrOutput() SourceControlAuthInfoPtrOutput {
	return i.ToSourceControlAuthInfoPtrOutputWithContext(context.Background())
}

func (i *sourceControlAuthInfoPtrType) ToSourceControlAuthInfoPtrOutputWithContext(ctx context.Context) SourceControlAuthInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceControlAuthInfoPtrOutput)
}

// The authorization properties for accessing the source code repository.
type SourceControlAuthInfoResponse struct {
	// Time in seconds that the token remains valid
	ExpiresIn *int `pulumi:"expiresIn"`
	// The refresh token used to refresh the access token.
	RefreshToken *string `pulumi:"refreshToken"`
	// The scope of the access token.
	Scope *string `pulumi:"scope"`
	// The access token used to access the source control provider.
	Token string `pulumi:"token"`
	// The type of Auth token.
	TokenType *string `pulumi:"tokenType"`
}

// The authorization properties for accessing the source code repository.
type SourceControlAuthInfoResponseOutput struct{ *pulumi.OutputState }

func (SourceControlAuthInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceControlAuthInfoResponse)(nil)).Elem()
}

func (o SourceControlAuthInfoResponseOutput) ToSourceControlAuthInfoResponseOutput() SourceControlAuthInfoResponseOutput {
	return o
}

func (o SourceControlAuthInfoResponseOutput) ToSourceControlAuthInfoResponseOutputWithContext(ctx context.Context) SourceControlAuthInfoResponseOutput {
	return o
}

func (o SourceControlAuthInfoResponseOutput) ToSourceControlAuthInfoResponsePtrOutput() SourceControlAuthInfoResponsePtrOutput {
	return o.ToSourceControlAuthInfoResponsePtrOutputWithContext(context.Background())
}

func (o SourceControlAuthInfoResponseOutput) ToSourceControlAuthInfoResponsePtrOutputWithContext(ctx context.Context) SourceControlAuthInfoResponsePtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfoResponse) *SourceControlAuthInfoResponse {
		return &v
	}).(SourceControlAuthInfoResponsePtrOutput)
}

// Time in seconds that the token remains valid
func (o SourceControlAuthInfoResponseOutput) ExpiresIn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfoResponse) *int { return v.ExpiresIn }).(pulumi.IntPtrOutput)
}

// The refresh token used to refresh the access token.
func (o SourceControlAuthInfoResponseOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfoResponse) *string { return v.RefreshToken }).(pulumi.StringPtrOutput)
}

// The scope of the access token.
func (o SourceControlAuthInfoResponseOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfoResponse) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The access token used to access the source control provider.
func (o SourceControlAuthInfoResponseOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v SourceControlAuthInfoResponse) string { return v.Token }).(pulumi.StringOutput)
}

// The type of Auth token.
func (o SourceControlAuthInfoResponseOutput) TokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceControlAuthInfoResponse) *string { return v.TokenType }).(pulumi.StringPtrOutput)
}

type SourceControlAuthInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceControlAuthInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceControlAuthInfoResponse)(nil)).Elem()
}

func (o SourceControlAuthInfoResponsePtrOutput) ToSourceControlAuthInfoResponsePtrOutput() SourceControlAuthInfoResponsePtrOutput {
	return o
}

func (o SourceControlAuthInfoResponsePtrOutput) ToSourceControlAuthInfoResponsePtrOutputWithContext(ctx context.Context) SourceControlAuthInfoResponsePtrOutput {
	return o
}

func (o SourceControlAuthInfoResponsePtrOutput) Elem() SourceControlAuthInfoResponseOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoResponse) SourceControlAuthInfoResponse { return *v }).(SourceControlAuthInfoResponseOutput)
}

// Time in seconds that the token remains valid
func (o SourceControlAuthInfoResponsePtrOutput) ExpiresIn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoResponse) *int {
		if v == nil {
			return nil
		}
		return v.ExpiresIn
	}).(pulumi.IntPtrOutput)
}

// The refresh token used to refresh the access token.
func (o SourceControlAuthInfoResponsePtrOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.RefreshToken
	}).(pulumi.StringPtrOutput)
}

// The scope of the access token.
func (o SourceControlAuthInfoResponsePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// The access token used to access the source control provider.
func (o SourceControlAuthInfoResponsePtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Token
	}).(pulumi.StringPtrOutput)
}

// The type of Auth token.
func (o SourceControlAuthInfoResponsePtrOutput) TokenType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceControlAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.TokenType
	}).(pulumi.StringPtrOutput)
}

// The properties of the source code repository.
type SourceRepositoryProperties struct {
	// The value of this property indicates whether the source control commit trigger is enabled or not.
	IsCommitTriggerEnabled *bool `pulumi:"isCommitTriggerEnabled"`
	// The full URL to the source code repository
	RepositoryUrl string `pulumi:"repositoryUrl"`
	// The authorization properties for accessing the source code repository.
	SourceControlAuthProperties *SourceControlAuthInfo `pulumi:"sourceControlAuthProperties"`
	// The type of source control service.
	SourceControlType string `pulumi:"sourceControlType"`
}

// SourceRepositoryPropertiesInput is an input type that accepts SourceRepositoryPropertiesArgs and SourceRepositoryPropertiesOutput values.
// You can construct a concrete instance of `SourceRepositoryPropertiesInput` via:
//
//          SourceRepositoryPropertiesArgs{...}
type SourceRepositoryPropertiesInput interface {
	pulumi.Input

	ToSourceRepositoryPropertiesOutput() SourceRepositoryPropertiesOutput
	ToSourceRepositoryPropertiesOutputWithContext(context.Context) SourceRepositoryPropertiesOutput
}

// The properties of the source code repository.
type SourceRepositoryPropertiesArgs struct {
	// The value of this property indicates whether the source control commit trigger is enabled or not.
	IsCommitTriggerEnabled pulumi.BoolPtrInput `pulumi:"isCommitTriggerEnabled"`
	// The full URL to the source code repository
	RepositoryUrl pulumi.StringInput `pulumi:"repositoryUrl"`
	// The authorization properties for accessing the source code repository.
	SourceControlAuthProperties SourceControlAuthInfoPtrInput `pulumi:"sourceControlAuthProperties"`
	// The type of source control service.
	SourceControlType pulumi.StringInput `pulumi:"sourceControlType"`
}

func (SourceRepositoryPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRepositoryProperties)(nil)).Elem()
}

func (i SourceRepositoryPropertiesArgs) ToSourceRepositoryPropertiesOutput() SourceRepositoryPropertiesOutput {
	return i.ToSourceRepositoryPropertiesOutputWithContext(context.Background())
}

func (i SourceRepositoryPropertiesArgs) ToSourceRepositoryPropertiesOutputWithContext(ctx context.Context) SourceRepositoryPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRepositoryPropertiesOutput)
}

func (i SourceRepositoryPropertiesArgs) ToSourceRepositoryPropertiesPtrOutput() SourceRepositoryPropertiesPtrOutput {
	return i.ToSourceRepositoryPropertiesPtrOutputWithContext(context.Background())
}

func (i SourceRepositoryPropertiesArgs) ToSourceRepositoryPropertiesPtrOutputWithContext(ctx context.Context) SourceRepositoryPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRepositoryPropertiesOutput).ToSourceRepositoryPropertiesPtrOutputWithContext(ctx)
}

// SourceRepositoryPropertiesPtrInput is an input type that accepts SourceRepositoryPropertiesArgs, SourceRepositoryPropertiesPtr and SourceRepositoryPropertiesPtrOutput values.
// You can construct a concrete instance of `SourceRepositoryPropertiesPtrInput` via:
//
//          SourceRepositoryPropertiesArgs{...}
//
//  or:
//
//          nil
type SourceRepositoryPropertiesPtrInput interface {
	pulumi.Input

	ToSourceRepositoryPropertiesPtrOutput() SourceRepositoryPropertiesPtrOutput
	ToSourceRepositoryPropertiesPtrOutputWithContext(context.Context) SourceRepositoryPropertiesPtrOutput
}

type sourceRepositoryPropertiesPtrType SourceRepositoryPropertiesArgs

func SourceRepositoryPropertiesPtr(v *SourceRepositoryPropertiesArgs) SourceRepositoryPropertiesPtrInput {
	return (*sourceRepositoryPropertiesPtrType)(v)
}

func (*sourceRepositoryPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceRepositoryProperties)(nil)).Elem()
}

func (i *sourceRepositoryPropertiesPtrType) ToSourceRepositoryPropertiesPtrOutput() SourceRepositoryPropertiesPtrOutput {
	return i.ToSourceRepositoryPropertiesPtrOutputWithContext(context.Background())
}

func (i *sourceRepositoryPropertiesPtrType) ToSourceRepositoryPropertiesPtrOutputWithContext(ctx context.Context) SourceRepositoryPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceRepositoryPropertiesPtrOutput)
}

// The properties of the source code repository.
type SourceRepositoryPropertiesResponse struct {
	// The value of this property indicates whether the source control commit trigger is enabled or not.
	IsCommitTriggerEnabled *bool `pulumi:"isCommitTriggerEnabled"`
	// The full URL to the source code repository
	RepositoryUrl string `pulumi:"repositoryUrl"`
	// The authorization properties for accessing the source code repository.
	SourceControlAuthProperties *SourceControlAuthInfoResponse `pulumi:"sourceControlAuthProperties"`
	// The type of source control service.
	SourceControlType string `pulumi:"sourceControlType"`
}

// The properties of the source code repository.
type SourceRepositoryPropertiesResponseOutput struct{ *pulumi.OutputState }

func (SourceRepositoryPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceRepositoryPropertiesResponse)(nil)).Elem()
}

func (o SourceRepositoryPropertiesResponseOutput) ToSourceRepositoryPropertiesResponseOutput() SourceRepositoryPropertiesResponseOutput {
	return o
}

func (o SourceRepositoryPropertiesResponseOutput) ToSourceRepositoryPropertiesResponseOutputWithContext(ctx context.Context) SourceRepositoryPropertiesResponseOutput {
	return o
}

func (o SourceRepositoryPropertiesResponseOutput) ToSourceRepositoryPropertiesResponsePtrOutput() SourceRepositoryPropertiesResponsePtrOutput {
	return o.ToSourceRepositoryPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o SourceRepositoryPropertiesResponseOutput) ToSourceRepositoryPropertiesResponsePtrOutputWithContext(ctx context.Context) SourceRepositoryPropertiesResponsePtrOutput {
	return o.ApplyT(func(v SourceRepositoryPropertiesResponse) *SourceRepositoryPropertiesResponse {
		return &v
	}).(SourceRepositoryPropertiesResponsePtrOutput)
}

// The value of this property indicates whether the source control commit trigger is enabled or not.
func (o SourceRepositoryPropertiesResponseOutput) IsCommitTriggerEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SourceRepositoryPropertiesResponse) *bool { return v.IsCommitTriggerEnabled }).(pulumi.BoolPtrOutput)
}

// The full URL to the source code repository
func (o SourceRepositoryPropertiesResponseOutput) RepositoryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SourceRepositoryPropertiesResponse) string { return v.RepositoryUrl }).(pulumi.StringOutput)
}

// The authorization properties for accessing the source code repository.
func (o SourceRepositoryPropertiesResponseOutput) SourceControlAuthProperties() SourceControlAuthInfoResponsePtrOutput {
	return o.ApplyT(func(v SourceRepositoryPropertiesResponse) *SourceControlAuthInfoResponse {
		return v.SourceControlAuthProperties
	}).(SourceControlAuthInfoResponsePtrOutput)
}

// The type of source control service.
func (o SourceRepositoryPropertiesResponseOutput) SourceControlType() pulumi.StringOutput {
	return o.ApplyT(func(v SourceRepositoryPropertiesResponse) string { return v.SourceControlType }).(pulumi.StringOutput)
}

type SourceRepositoryPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceRepositoryPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceRepositoryPropertiesResponse)(nil)).Elem()
}

func (o SourceRepositoryPropertiesResponsePtrOutput) ToSourceRepositoryPropertiesResponsePtrOutput() SourceRepositoryPropertiesResponsePtrOutput {
	return o
}

func (o SourceRepositoryPropertiesResponsePtrOutput) ToSourceRepositoryPropertiesResponsePtrOutputWithContext(ctx context.Context) SourceRepositoryPropertiesResponsePtrOutput {
	return o
}

func (o SourceRepositoryPropertiesResponsePtrOutput) Elem() SourceRepositoryPropertiesResponseOutput {
	return o.ApplyT(func(v *SourceRepositoryPropertiesResponse) SourceRepositoryPropertiesResponse { return *v }).(SourceRepositoryPropertiesResponseOutput)
}

// The value of this property indicates whether the source control commit trigger is enabled or not.
func (o SourceRepositoryPropertiesResponsePtrOutput) IsCommitTriggerEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SourceRepositoryPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsCommitTriggerEnabled
	}).(pulumi.BoolPtrOutput)
}

// The full URL to the source code repository
func (o SourceRepositoryPropertiesResponsePtrOutput) RepositoryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceRepositoryPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RepositoryUrl
	}).(pulumi.StringPtrOutput)
}

// The authorization properties for accessing the source code repository.
func (o SourceRepositoryPropertiesResponsePtrOutput) SourceControlAuthProperties() SourceControlAuthInfoResponsePtrOutput {
	return o.ApplyT(func(v *SourceRepositoryPropertiesResponse) *SourceControlAuthInfoResponse {
		if v == nil {
			return nil
		}
		return v.SourceControlAuthProperties
	}).(SourceControlAuthInfoResponsePtrOutput)
}

// The type of source control service.
func (o SourceRepositoryPropertiesResponsePtrOutput) SourceControlType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceRepositoryPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SourceControlType
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(BaseImageDependencyResponseOutput{})
	pulumi.RegisterOutputType(BaseImageDependencyResponseArrayOutput{})
	pulumi.RegisterOutputType(BuildArgumentResponseOutput{})
	pulumi.RegisterOutputType(BuildArgumentResponseArrayOutput{})
	pulumi.RegisterOutputType(DockerBuildStepResponseOutput{})
	pulumi.RegisterOutputType(DockerBuildStepResponsePtrOutput{})
	pulumi.RegisterOutputType(PlatformPropertiesOutput{})
	pulumi.RegisterOutputType(PlatformPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PlatformPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PlatformPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceControlAuthInfoOutput{})
	pulumi.RegisterOutputType(SourceControlAuthInfoPtrOutput{})
	pulumi.RegisterOutputType(SourceControlAuthInfoResponseOutput{})
	pulumi.RegisterOutputType(SourceControlAuthInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceRepositoryPropertiesOutput{})
	pulumi.RegisterOutputType(SourceRepositoryPropertiesPtrOutput{})
	pulumi.RegisterOutputType(SourceRepositoryPropertiesResponseOutput{})
	pulumi.RegisterOutputType(SourceRepositoryPropertiesResponsePtrOutput{})
}
