// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20150801preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type AS2AcknowledgementConnectionSettings struct {
	// The value indicating whether to ignore mismatch in certificate name.
	IgnoreCertificateNameMismatch *bool `pulumi:"ignoreCertificateNameMismatch"`
	// The value indicating whether to keep the connection alive.
	KeepHttpConnectionAlive *bool `pulumi:"keepHttpConnectionAlive"`
	// The value indicating whether to support HTTP status code 'CONTINUE'.
	SupportHttpStatusCodeContinue *bool `pulumi:"supportHttpStatusCodeContinue"`
	// The value indicating whether to unfold the HTTP headers.
	UnfoldHttpHeaders *bool `pulumi:"unfoldHttpHeaders"`
}

// AS2AcknowledgementConnectionSettingsInput is an input type that accepts AS2AcknowledgementConnectionSettingsArgs and AS2AcknowledgementConnectionSettingsOutput values.
// You can construct a concrete instance of `AS2AcknowledgementConnectionSettingsInput` via:
//
//          AS2AcknowledgementConnectionSettingsArgs{...}
type AS2AcknowledgementConnectionSettingsInput interface {
	pulumi.Input

	ToAS2AcknowledgementConnectionSettingsOutput() AS2AcknowledgementConnectionSettingsOutput
	ToAS2AcknowledgementConnectionSettingsOutputWithContext(context.Context) AS2AcknowledgementConnectionSettingsOutput
}

type AS2AcknowledgementConnectionSettingsArgs struct {
	// The value indicating whether to ignore mismatch in certificate name.
	IgnoreCertificateNameMismatch pulumi.BoolPtrInput `pulumi:"ignoreCertificateNameMismatch"`
	// The value indicating whether to keep the connection alive.
	KeepHttpConnectionAlive pulumi.BoolPtrInput `pulumi:"keepHttpConnectionAlive"`
	// The value indicating whether to support HTTP status code 'CONTINUE'.
	SupportHttpStatusCodeContinue pulumi.BoolPtrInput `pulumi:"supportHttpStatusCodeContinue"`
	// The value indicating whether to unfold the HTTP headers.
	UnfoldHttpHeaders pulumi.BoolPtrInput `pulumi:"unfoldHttpHeaders"`
}

func (AS2AcknowledgementConnectionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2AcknowledgementConnectionSettings)(nil)).Elem()
}

func (i AS2AcknowledgementConnectionSettingsArgs) ToAS2AcknowledgementConnectionSettingsOutput() AS2AcknowledgementConnectionSettingsOutput {
	return i.ToAS2AcknowledgementConnectionSettingsOutputWithContext(context.Background())
}

func (i AS2AcknowledgementConnectionSettingsArgs) ToAS2AcknowledgementConnectionSettingsOutputWithContext(ctx context.Context) AS2AcknowledgementConnectionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2AcknowledgementConnectionSettingsOutput)
}

func (i AS2AcknowledgementConnectionSettingsArgs) ToAS2AcknowledgementConnectionSettingsPtrOutput() AS2AcknowledgementConnectionSettingsPtrOutput {
	return i.ToAS2AcknowledgementConnectionSettingsPtrOutputWithContext(context.Background())
}

func (i AS2AcknowledgementConnectionSettingsArgs) ToAS2AcknowledgementConnectionSettingsPtrOutputWithContext(ctx context.Context) AS2AcknowledgementConnectionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2AcknowledgementConnectionSettingsOutput).ToAS2AcknowledgementConnectionSettingsPtrOutputWithContext(ctx)
}

// AS2AcknowledgementConnectionSettingsPtrInput is an input type that accepts AS2AcknowledgementConnectionSettingsArgs, AS2AcknowledgementConnectionSettingsPtr and AS2AcknowledgementConnectionSettingsPtrOutput values.
// You can construct a concrete instance of `AS2AcknowledgementConnectionSettingsPtrInput` via:
//
//          AS2AcknowledgementConnectionSettingsArgs{...}
//
//  or:
//
//          nil
type AS2AcknowledgementConnectionSettingsPtrInput interface {
	pulumi.Input

	ToAS2AcknowledgementConnectionSettingsPtrOutput() AS2AcknowledgementConnectionSettingsPtrOutput
	ToAS2AcknowledgementConnectionSettingsPtrOutputWithContext(context.Context) AS2AcknowledgementConnectionSettingsPtrOutput
}

type as2acknowledgementConnectionSettingsPtrType AS2AcknowledgementConnectionSettingsArgs

func AS2AcknowledgementConnectionSettingsPtr(v *AS2AcknowledgementConnectionSettingsArgs) AS2AcknowledgementConnectionSettingsPtrInput {
	return (*as2acknowledgementConnectionSettingsPtrType)(v)
}

func (*as2acknowledgementConnectionSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2AcknowledgementConnectionSettings)(nil)).Elem()
}

func (i *as2acknowledgementConnectionSettingsPtrType) ToAS2AcknowledgementConnectionSettingsPtrOutput() AS2AcknowledgementConnectionSettingsPtrOutput {
	return i.ToAS2AcknowledgementConnectionSettingsPtrOutputWithContext(context.Background())
}

func (i *as2acknowledgementConnectionSettingsPtrType) ToAS2AcknowledgementConnectionSettingsPtrOutputWithContext(ctx context.Context) AS2AcknowledgementConnectionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2AcknowledgementConnectionSettingsPtrOutput)
}

type AS2AcknowledgementConnectionSettingsResponse struct {
	// The value indicating whether to ignore mismatch in certificate name.
	IgnoreCertificateNameMismatch *bool `pulumi:"ignoreCertificateNameMismatch"`
	// The value indicating whether to keep the connection alive.
	KeepHttpConnectionAlive *bool `pulumi:"keepHttpConnectionAlive"`
	// The value indicating whether to support HTTP status code 'CONTINUE'.
	SupportHttpStatusCodeContinue *bool `pulumi:"supportHttpStatusCodeContinue"`
	// The value indicating whether to unfold the HTTP headers.
	UnfoldHttpHeaders *bool `pulumi:"unfoldHttpHeaders"`
}

type AS2AcknowledgementConnectionSettingsResponseOutput struct{ *pulumi.OutputState }

func (AS2AcknowledgementConnectionSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2AcknowledgementConnectionSettingsResponse)(nil)).Elem()
}

func (o AS2AcknowledgementConnectionSettingsResponseOutput) ToAS2AcknowledgementConnectionSettingsResponseOutput() AS2AcknowledgementConnectionSettingsResponseOutput {
	return o
}

func (o AS2AcknowledgementConnectionSettingsResponseOutput) ToAS2AcknowledgementConnectionSettingsResponseOutputWithContext(ctx context.Context) AS2AcknowledgementConnectionSettingsResponseOutput {
	return o
}

func (o AS2AcknowledgementConnectionSettingsResponseOutput) ToAS2AcknowledgementConnectionSettingsResponsePtrOutput() AS2AcknowledgementConnectionSettingsResponsePtrOutput {
	return o.ToAS2AcknowledgementConnectionSettingsResponsePtrOutputWithContext(context.Background())
}

func (o AS2AcknowledgementConnectionSettingsResponseOutput) ToAS2AcknowledgementConnectionSettingsResponsePtrOutputWithContext(ctx context.Context) AS2AcknowledgementConnectionSettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2AcknowledgementConnectionSettingsResponse) *AS2AcknowledgementConnectionSettingsResponse {
		return &v
	}).(AS2AcknowledgementConnectionSettingsResponsePtrOutput)
}

// The value indicating whether to ignore mismatch in certificate name.
func (o AS2AcknowledgementConnectionSettingsResponseOutput) IgnoreCertificateNameMismatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2AcknowledgementConnectionSettingsResponse) *bool { return v.IgnoreCertificateNameMismatch }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to keep the connection alive.
func (o AS2AcknowledgementConnectionSettingsResponseOutput) KeepHttpConnectionAlive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2AcknowledgementConnectionSettingsResponse) *bool { return v.KeepHttpConnectionAlive }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to support HTTP status code 'CONTINUE'.
func (o AS2AcknowledgementConnectionSettingsResponseOutput) SupportHttpStatusCodeContinue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2AcknowledgementConnectionSettingsResponse) *bool { return v.SupportHttpStatusCodeContinue }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to unfold the HTTP headers.
func (o AS2AcknowledgementConnectionSettingsResponseOutput) UnfoldHttpHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2AcknowledgementConnectionSettingsResponse) *bool { return v.UnfoldHttpHeaders }).(pulumi.BoolPtrOutput)
}

type AS2AcknowledgementConnectionSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AS2AcknowledgementConnectionSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2AcknowledgementConnectionSettingsResponse)(nil)).Elem()
}

func (o AS2AcknowledgementConnectionSettingsResponsePtrOutput) ToAS2AcknowledgementConnectionSettingsResponsePtrOutput() AS2AcknowledgementConnectionSettingsResponsePtrOutput {
	return o
}

func (o AS2AcknowledgementConnectionSettingsResponsePtrOutput) ToAS2AcknowledgementConnectionSettingsResponsePtrOutputWithContext(ctx context.Context) AS2AcknowledgementConnectionSettingsResponsePtrOutput {
	return o
}

func (o AS2AcknowledgementConnectionSettingsResponsePtrOutput) Elem() AS2AcknowledgementConnectionSettingsResponseOutput {
	return o.ApplyT(func(v *AS2AcknowledgementConnectionSettingsResponse) AS2AcknowledgementConnectionSettingsResponse {
		return *v
	}).(AS2AcknowledgementConnectionSettingsResponseOutput)
}

// The value indicating whether to ignore mismatch in certificate name.
func (o AS2AcknowledgementConnectionSettingsResponsePtrOutput) IgnoreCertificateNameMismatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2AcknowledgementConnectionSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreCertificateNameMismatch
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to keep the connection alive.
func (o AS2AcknowledgementConnectionSettingsResponsePtrOutput) KeepHttpConnectionAlive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2AcknowledgementConnectionSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.KeepHttpConnectionAlive
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to support HTTP status code 'CONTINUE'.
func (o AS2AcknowledgementConnectionSettingsResponsePtrOutput) SupportHttpStatusCodeContinue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2AcknowledgementConnectionSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SupportHttpStatusCodeContinue
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to unfold the HTTP headers.
func (o AS2AcknowledgementConnectionSettingsResponsePtrOutput) UnfoldHttpHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2AcknowledgementConnectionSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.UnfoldHttpHeaders
	}).(pulumi.BoolPtrOutput)
}

type AS2AgreementContent struct {
	// The AS2 one-way receive agreement.
	ReceiveAgreement *AS2OneWayAgreement `pulumi:"receiveAgreement"`
	// The AS2 one-way send agreement.
	SendAgreement *AS2OneWayAgreement `pulumi:"sendAgreement"`
}

// AS2AgreementContentInput is an input type that accepts AS2AgreementContentArgs and AS2AgreementContentOutput values.
// You can construct a concrete instance of `AS2AgreementContentInput` via:
//
//          AS2AgreementContentArgs{...}
type AS2AgreementContentInput interface {
	pulumi.Input

	ToAS2AgreementContentOutput() AS2AgreementContentOutput
	ToAS2AgreementContentOutputWithContext(context.Context) AS2AgreementContentOutput
}

type AS2AgreementContentArgs struct {
	// The AS2 one-way receive agreement.
	ReceiveAgreement AS2OneWayAgreementPtrInput `pulumi:"receiveAgreement"`
	// The AS2 one-way send agreement.
	SendAgreement AS2OneWayAgreementPtrInput `pulumi:"sendAgreement"`
}

func (AS2AgreementContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2AgreementContent)(nil)).Elem()
}

func (i AS2AgreementContentArgs) ToAS2AgreementContentOutput() AS2AgreementContentOutput {
	return i.ToAS2AgreementContentOutputWithContext(context.Background())
}

func (i AS2AgreementContentArgs) ToAS2AgreementContentOutputWithContext(ctx context.Context) AS2AgreementContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2AgreementContentOutput)
}

func (i AS2AgreementContentArgs) ToAS2AgreementContentPtrOutput() AS2AgreementContentPtrOutput {
	return i.ToAS2AgreementContentPtrOutputWithContext(context.Background())
}

func (i AS2AgreementContentArgs) ToAS2AgreementContentPtrOutputWithContext(ctx context.Context) AS2AgreementContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2AgreementContentOutput).ToAS2AgreementContentPtrOutputWithContext(ctx)
}

// AS2AgreementContentPtrInput is an input type that accepts AS2AgreementContentArgs, AS2AgreementContentPtr and AS2AgreementContentPtrOutput values.
// You can construct a concrete instance of `AS2AgreementContentPtrInput` via:
//
//          AS2AgreementContentArgs{...}
//
//  or:
//
//          nil
type AS2AgreementContentPtrInput interface {
	pulumi.Input

	ToAS2AgreementContentPtrOutput() AS2AgreementContentPtrOutput
	ToAS2AgreementContentPtrOutputWithContext(context.Context) AS2AgreementContentPtrOutput
}

type as2agreementContentPtrType AS2AgreementContentArgs

func AS2AgreementContentPtr(v *AS2AgreementContentArgs) AS2AgreementContentPtrInput {
	return (*as2agreementContentPtrType)(v)
}

func (*as2agreementContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2AgreementContent)(nil)).Elem()
}

func (i *as2agreementContentPtrType) ToAS2AgreementContentPtrOutput() AS2AgreementContentPtrOutput {
	return i.ToAS2AgreementContentPtrOutputWithContext(context.Background())
}

func (i *as2agreementContentPtrType) ToAS2AgreementContentPtrOutputWithContext(ctx context.Context) AS2AgreementContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2AgreementContentPtrOutput)
}

type AS2AgreementContentResponse struct {
	// The AS2 one-way receive agreement.
	ReceiveAgreement *AS2OneWayAgreementResponse `pulumi:"receiveAgreement"`
	// The AS2 one-way send agreement.
	SendAgreement *AS2OneWayAgreementResponse `pulumi:"sendAgreement"`
}

type AS2AgreementContentResponseOutput struct{ *pulumi.OutputState }

func (AS2AgreementContentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2AgreementContentResponse)(nil)).Elem()
}

func (o AS2AgreementContentResponseOutput) ToAS2AgreementContentResponseOutput() AS2AgreementContentResponseOutput {
	return o
}

func (o AS2AgreementContentResponseOutput) ToAS2AgreementContentResponseOutputWithContext(ctx context.Context) AS2AgreementContentResponseOutput {
	return o
}

func (o AS2AgreementContentResponseOutput) ToAS2AgreementContentResponsePtrOutput() AS2AgreementContentResponsePtrOutput {
	return o.ToAS2AgreementContentResponsePtrOutputWithContext(context.Background())
}

func (o AS2AgreementContentResponseOutput) ToAS2AgreementContentResponsePtrOutputWithContext(ctx context.Context) AS2AgreementContentResponsePtrOutput {
	return o.ApplyT(func(v AS2AgreementContentResponse) *AS2AgreementContentResponse {
		return &v
	}).(AS2AgreementContentResponsePtrOutput)
}

// The AS2 one-way receive agreement.
func (o AS2AgreementContentResponseOutput) ReceiveAgreement() AS2OneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v AS2AgreementContentResponse) *AS2OneWayAgreementResponse { return v.ReceiveAgreement }).(AS2OneWayAgreementResponsePtrOutput)
}

// The AS2 one-way send agreement.
func (o AS2AgreementContentResponseOutput) SendAgreement() AS2OneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v AS2AgreementContentResponse) *AS2OneWayAgreementResponse { return v.SendAgreement }).(AS2OneWayAgreementResponsePtrOutput)
}

type AS2AgreementContentResponsePtrOutput struct{ *pulumi.OutputState }

func (AS2AgreementContentResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2AgreementContentResponse)(nil)).Elem()
}

func (o AS2AgreementContentResponsePtrOutput) ToAS2AgreementContentResponsePtrOutput() AS2AgreementContentResponsePtrOutput {
	return o
}

func (o AS2AgreementContentResponsePtrOutput) ToAS2AgreementContentResponsePtrOutputWithContext(ctx context.Context) AS2AgreementContentResponsePtrOutput {
	return o
}

func (o AS2AgreementContentResponsePtrOutput) Elem() AS2AgreementContentResponseOutput {
	return o.ApplyT(func(v *AS2AgreementContentResponse) AS2AgreementContentResponse { return *v }).(AS2AgreementContentResponseOutput)
}

// The AS2 one-way receive agreement.
func (o AS2AgreementContentResponsePtrOutput) ReceiveAgreement() AS2OneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v *AS2AgreementContentResponse) *AS2OneWayAgreementResponse {
		if v == nil {
			return nil
		}
		return v.ReceiveAgreement
	}).(AS2OneWayAgreementResponsePtrOutput)
}

// The AS2 one-way send agreement.
func (o AS2AgreementContentResponsePtrOutput) SendAgreement() AS2OneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v *AS2AgreementContentResponse) *AS2OneWayAgreementResponse {
		if v == nil {
			return nil
		}
		return v.SendAgreement
	}).(AS2OneWayAgreementResponsePtrOutput)
}

type AS2EnvelopeSettings struct {
	// The value indicating whether to auto generate file name.
	AutogenerateFileName *bool `pulumi:"autogenerateFileName"`
	// The template for file name.
	FileNameTemplate *string `pulumi:"fileNameTemplate"`
	// The message content type.
	MessageContentType *string `pulumi:"messageContentType"`
	// The value indicating whether to suspend message on file name generation error.
	SuspendMessageOnFileNameGenerationError *bool `pulumi:"suspendMessageOnFileNameGenerationError"`
	// The value indicating whether to transmit file name in mime header.
	TransmitFileNameInMimeHeader *bool `pulumi:"transmitFileNameInMimeHeader"`
}

// AS2EnvelopeSettingsInput is an input type that accepts AS2EnvelopeSettingsArgs and AS2EnvelopeSettingsOutput values.
// You can construct a concrete instance of `AS2EnvelopeSettingsInput` via:
//
//          AS2EnvelopeSettingsArgs{...}
type AS2EnvelopeSettingsInput interface {
	pulumi.Input

	ToAS2EnvelopeSettingsOutput() AS2EnvelopeSettingsOutput
	ToAS2EnvelopeSettingsOutputWithContext(context.Context) AS2EnvelopeSettingsOutput
}

type AS2EnvelopeSettingsArgs struct {
	// The value indicating whether to auto generate file name.
	AutogenerateFileName pulumi.BoolPtrInput `pulumi:"autogenerateFileName"`
	// The template for file name.
	FileNameTemplate pulumi.StringPtrInput `pulumi:"fileNameTemplate"`
	// The message content type.
	MessageContentType pulumi.StringPtrInput `pulumi:"messageContentType"`
	// The value indicating whether to suspend message on file name generation error.
	SuspendMessageOnFileNameGenerationError pulumi.BoolPtrInput `pulumi:"suspendMessageOnFileNameGenerationError"`
	// The value indicating whether to transmit file name in mime header.
	TransmitFileNameInMimeHeader pulumi.BoolPtrInput `pulumi:"transmitFileNameInMimeHeader"`
}

func (AS2EnvelopeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2EnvelopeSettings)(nil)).Elem()
}

func (i AS2EnvelopeSettingsArgs) ToAS2EnvelopeSettingsOutput() AS2EnvelopeSettingsOutput {
	return i.ToAS2EnvelopeSettingsOutputWithContext(context.Background())
}

func (i AS2EnvelopeSettingsArgs) ToAS2EnvelopeSettingsOutputWithContext(ctx context.Context) AS2EnvelopeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2EnvelopeSettingsOutput)
}

func (i AS2EnvelopeSettingsArgs) ToAS2EnvelopeSettingsPtrOutput() AS2EnvelopeSettingsPtrOutput {
	return i.ToAS2EnvelopeSettingsPtrOutputWithContext(context.Background())
}

func (i AS2EnvelopeSettingsArgs) ToAS2EnvelopeSettingsPtrOutputWithContext(ctx context.Context) AS2EnvelopeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2EnvelopeSettingsOutput).ToAS2EnvelopeSettingsPtrOutputWithContext(ctx)
}

// AS2EnvelopeSettingsPtrInput is an input type that accepts AS2EnvelopeSettingsArgs, AS2EnvelopeSettingsPtr and AS2EnvelopeSettingsPtrOutput values.
// You can construct a concrete instance of `AS2EnvelopeSettingsPtrInput` via:
//
//          AS2EnvelopeSettingsArgs{...}
//
//  or:
//
//          nil
type AS2EnvelopeSettingsPtrInput interface {
	pulumi.Input

	ToAS2EnvelopeSettingsPtrOutput() AS2EnvelopeSettingsPtrOutput
	ToAS2EnvelopeSettingsPtrOutputWithContext(context.Context) AS2EnvelopeSettingsPtrOutput
}

type as2envelopeSettingsPtrType AS2EnvelopeSettingsArgs

func AS2EnvelopeSettingsPtr(v *AS2EnvelopeSettingsArgs) AS2EnvelopeSettingsPtrInput {
	return (*as2envelopeSettingsPtrType)(v)
}

func (*as2envelopeSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2EnvelopeSettings)(nil)).Elem()
}

func (i *as2envelopeSettingsPtrType) ToAS2EnvelopeSettingsPtrOutput() AS2EnvelopeSettingsPtrOutput {
	return i.ToAS2EnvelopeSettingsPtrOutputWithContext(context.Background())
}

func (i *as2envelopeSettingsPtrType) ToAS2EnvelopeSettingsPtrOutputWithContext(ctx context.Context) AS2EnvelopeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2EnvelopeSettingsPtrOutput)
}

type AS2EnvelopeSettingsResponse struct {
	// The value indicating whether to auto generate file name.
	AutogenerateFileName *bool `pulumi:"autogenerateFileName"`
	// The template for file name.
	FileNameTemplate *string `pulumi:"fileNameTemplate"`
	// The message content type.
	MessageContentType *string `pulumi:"messageContentType"`
	// The value indicating whether to suspend message on file name generation error.
	SuspendMessageOnFileNameGenerationError *bool `pulumi:"suspendMessageOnFileNameGenerationError"`
	// The value indicating whether to transmit file name in mime header.
	TransmitFileNameInMimeHeader *bool `pulumi:"transmitFileNameInMimeHeader"`
}

type AS2EnvelopeSettingsResponseOutput struct{ *pulumi.OutputState }

func (AS2EnvelopeSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2EnvelopeSettingsResponse)(nil)).Elem()
}

func (o AS2EnvelopeSettingsResponseOutput) ToAS2EnvelopeSettingsResponseOutput() AS2EnvelopeSettingsResponseOutput {
	return o
}

func (o AS2EnvelopeSettingsResponseOutput) ToAS2EnvelopeSettingsResponseOutputWithContext(ctx context.Context) AS2EnvelopeSettingsResponseOutput {
	return o
}

func (o AS2EnvelopeSettingsResponseOutput) ToAS2EnvelopeSettingsResponsePtrOutput() AS2EnvelopeSettingsResponsePtrOutput {
	return o.ToAS2EnvelopeSettingsResponsePtrOutputWithContext(context.Background())
}

func (o AS2EnvelopeSettingsResponseOutput) ToAS2EnvelopeSettingsResponsePtrOutputWithContext(ctx context.Context) AS2EnvelopeSettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2EnvelopeSettingsResponse) *AS2EnvelopeSettingsResponse {
		return &v
	}).(AS2EnvelopeSettingsResponsePtrOutput)
}

// The value indicating whether to auto generate file name.
func (o AS2EnvelopeSettingsResponseOutput) AutogenerateFileName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2EnvelopeSettingsResponse) *bool { return v.AutogenerateFileName }).(pulumi.BoolPtrOutput)
}

// The template for file name.
func (o AS2EnvelopeSettingsResponseOutput) FileNameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AS2EnvelopeSettingsResponse) *string { return v.FileNameTemplate }).(pulumi.StringPtrOutput)
}

// The message content type.
func (o AS2EnvelopeSettingsResponseOutput) MessageContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AS2EnvelopeSettingsResponse) *string { return v.MessageContentType }).(pulumi.StringPtrOutput)
}

// The value indicating whether to suspend message on file name generation error.
func (o AS2EnvelopeSettingsResponseOutput) SuspendMessageOnFileNameGenerationError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2EnvelopeSettingsResponse) *bool { return v.SuspendMessageOnFileNameGenerationError }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to transmit file name in mime header.
func (o AS2EnvelopeSettingsResponseOutput) TransmitFileNameInMimeHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2EnvelopeSettingsResponse) *bool { return v.TransmitFileNameInMimeHeader }).(pulumi.BoolPtrOutput)
}

type AS2EnvelopeSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AS2EnvelopeSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2EnvelopeSettingsResponse)(nil)).Elem()
}

func (o AS2EnvelopeSettingsResponsePtrOutput) ToAS2EnvelopeSettingsResponsePtrOutput() AS2EnvelopeSettingsResponsePtrOutput {
	return o
}

func (o AS2EnvelopeSettingsResponsePtrOutput) ToAS2EnvelopeSettingsResponsePtrOutputWithContext(ctx context.Context) AS2EnvelopeSettingsResponsePtrOutput {
	return o
}

func (o AS2EnvelopeSettingsResponsePtrOutput) Elem() AS2EnvelopeSettingsResponseOutput {
	return o.ApplyT(func(v *AS2EnvelopeSettingsResponse) AS2EnvelopeSettingsResponse { return *v }).(AS2EnvelopeSettingsResponseOutput)
}

// The value indicating whether to auto generate file name.
func (o AS2EnvelopeSettingsResponsePtrOutput) AutogenerateFileName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2EnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AutogenerateFileName
	}).(pulumi.BoolPtrOutput)
}

// The template for file name.
func (o AS2EnvelopeSettingsResponsePtrOutput) FileNameTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.FileNameTemplate
	}).(pulumi.StringPtrOutput)
}

// The message content type.
func (o AS2EnvelopeSettingsResponsePtrOutput) MessageContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.MessageContentType
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to suspend message on file name generation error.
func (o AS2EnvelopeSettingsResponsePtrOutput) SuspendMessageOnFileNameGenerationError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2EnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SuspendMessageOnFileNameGenerationError
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to transmit file name in mime header.
func (o AS2EnvelopeSettingsResponsePtrOutput) TransmitFileNameInMimeHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2EnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.TransmitFileNameInMimeHeader
	}).(pulumi.BoolPtrOutput)
}

type AS2ErrorSettings struct {
	// The value indicating whether to resend message If MDN is not received.
	ResendIfMdnNotReceived *bool `pulumi:"resendIfMdnNotReceived"`
	// The value indicating whether to suspend duplicate message.
	SuspendDuplicateMessage *bool `pulumi:"suspendDuplicateMessage"`
}

// AS2ErrorSettingsInput is an input type that accepts AS2ErrorSettingsArgs and AS2ErrorSettingsOutput values.
// You can construct a concrete instance of `AS2ErrorSettingsInput` via:
//
//          AS2ErrorSettingsArgs{...}
type AS2ErrorSettingsInput interface {
	pulumi.Input

	ToAS2ErrorSettingsOutput() AS2ErrorSettingsOutput
	ToAS2ErrorSettingsOutputWithContext(context.Context) AS2ErrorSettingsOutput
}

type AS2ErrorSettingsArgs struct {
	// The value indicating whether to resend message If MDN is not received.
	ResendIfMdnNotReceived pulumi.BoolPtrInput `pulumi:"resendIfMdnNotReceived"`
	// The value indicating whether to suspend duplicate message.
	SuspendDuplicateMessage pulumi.BoolPtrInput `pulumi:"suspendDuplicateMessage"`
}

func (AS2ErrorSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2ErrorSettings)(nil)).Elem()
}

func (i AS2ErrorSettingsArgs) ToAS2ErrorSettingsOutput() AS2ErrorSettingsOutput {
	return i.ToAS2ErrorSettingsOutputWithContext(context.Background())
}

func (i AS2ErrorSettingsArgs) ToAS2ErrorSettingsOutputWithContext(ctx context.Context) AS2ErrorSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ErrorSettingsOutput)
}

func (i AS2ErrorSettingsArgs) ToAS2ErrorSettingsPtrOutput() AS2ErrorSettingsPtrOutput {
	return i.ToAS2ErrorSettingsPtrOutputWithContext(context.Background())
}

func (i AS2ErrorSettingsArgs) ToAS2ErrorSettingsPtrOutputWithContext(ctx context.Context) AS2ErrorSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ErrorSettingsOutput).ToAS2ErrorSettingsPtrOutputWithContext(ctx)
}

// AS2ErrorSettingsPtrInput is an input type that accepts AS2ErrorSettingsArgs, AS2ErrorSettingsPtr and AS2ErrorSettingsPtrOutput values.
// You can construct a concrete instance of `AS2ErrorSettingsPtrInput` via:
//
//          AS2ErrorSettingsArgs{...}
//
//  or:
//
//          nil
type AS2ErrorSettingsPtrInput interface {
	pulumi.Input

	ToAS2ErrorSettingsPtrOutput() AS2ErrorSettingsPtrOutput
	ToAS2ErrorSettingsPtrOutputWithContext(context.Context) AS2ErrorSettingsPtrOutput
}

type as2errorSettingsPtrType AS2ErrorSettingsArgs

func AS2ErrorSettingsPtr(v *AS2ErrorSettingsArgs) AS2ErrorSettingsPtrInput {
	return (*as2errorSettingsPtrType)(v)
}

func (*as2errorSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2ErrorSettings)(nil)).Elem()
}

func (i *as2errorSettingsPtrType) ToAS2ErrorSettingsPtrOutput() AS2ErrorSettingsPtrOutput {
	return i.ToAS2ErrorSettingsPtrOutputWithContext(context.Background())
}

func (i *as2errorSettingsPtrType) ToAS2ErrorSettingsPtrOutputWithContext(ctx context.Context) AS2ErrorSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ErrorSettingsPtrOutput)
}

type AS2ErrorSettingsResponse struct {
	// The value indicating whether to resend message If MDN is not received.
	ResendIfMdnNotReceived *bool `pulumi:"resendIfMdnNotReceived"`
	// The value indicating whether to suspend duplicate message.
	SuspendDuplicateMessage *bool `pulumi:"suspendDuplicateMessage"`
}

type AS2ErrorSettingsResponseOutput struct{ *pulumi.OutputState }

func (AS2ErrorSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2ErrorSettingsResponse)(nil)).Elem()
}

func (o AS2ErrorSettingsResponseOutput) ToAS2ErrorSettingsResponseOutput() AS2ErrorSettingsResponseOutput {
	return o
}

func (o AS2ErrorSettingsResponseOutput) ToAS2ErrorSettingsResponseOutputWithContext(ctx context.Context) AS2ErrorSettingsResponseOutput {
	return o
}

func (o AS2ErrorSettingsResponseOutput) ToAS2ErrorSettingsResponsePtrOutput() AS2ErrorSettingsResponsePtrOutput {
	return o.ToAS2ErrorSettingsResponsePtrOutputWithContext(context.Background())
}

func (o AS2ErrorSettingsResponseOutput) ToAS2ErrorSettingsResponsePtrOutputWithContext(ctx context.Context) AS2ErrorSettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2ErrorSettingsResponse) *AS2ErrorSettingsResponse {
		return &v
	}).(AS2ErrorSettingsResponsePtrOutput)
}

// The value indicating whether to resend message If MDN is not received.
func (o AS2ErrorSettingsResponseOutput) ResendIfMdnNotReceived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2ErrorSettingsResponse) *bool { return v.ResendIfMdnNotReceived }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to suspend duplicate message.
func (o AS2ErrorSettingsResponseOutput) SuspendDuplicateMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2ErrorSettingsResponse) *bool { return v.SuspendDuplicateMessage }).(pulumi.BoolPtrOutput)
}

type AS2ErrorSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AS2ErrorSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2ErrorSettingsResponse)(nil)).Elem()
}

func (o AS2ErrorSettingsResponsePtrOutput) ToAS2ErrorSettingsResponsePtrOutput() AS2ErrorSettingsResponsePtrOutput {
	return o
}

func (o AS2ErrorSettingsResponsePtrOutput) ToAS2ErrorSettingsResponsePtrOutputWithContext(ctx context.Context) AS2ErrorSettingsResponsePtrOutput {
	return o
}

func (o AS2ErrorSettingsResponsePtrOutput) Elem() AS2ErrorSettingsResponseOutput {
	return o.ApplyT(func(v *AS2ErrorSettingsResponse) AS2ErrorSettingsResponse { return *v }).(AS2ErrorSettingsResponseOutput)
}

// The value indicating whether to resend message If MDN is not received.
func (o AS2ErrorSettingsResponsePtrOutput) ResendIfMdnNotReceived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ErrorSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ResendIfMdnNotReceived
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to suspend duplicate message.
func (o AS2ErrorSettingsResponsePtrOutput) SuspendDuplicateMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ErrorSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SuspendDuplicateMessage
	}).(pulumi.BoolPtrOutput)
}

type AS2MdnSettings struct {
	// The disposition notification to header value.
	DispositionNotificationTo *string `pulumi:"dispositionNotificationTo"`
	// The MDN text.
	MdnText *string `pulumi:"mdnText"`
	// The signing or hashing algorithm.
	MicHashingAlgorithm *string `pulumi:"micHashingAlgorithm"`
	// The value indicating whether to send or request a MDN.
	NeedMdn *bool `pulumi:"needMdn"`
	// The receipt delivery URL.
	ReceiptDeliveryUrl *string `pulumi:"receiptDeliveryUrl"`
	// The value indicating whether to send inbound MDN to message box.
	SendInboundMdnToMessageBox *bool `pulumi:"sendInboundMdnToMessageBox"`
	// The value indicating whether to send the asynchronous MDN.
	SendMdnAsynchronously *bool `pulumi:"sendMdnAsynchronously"`
	// The value indicating whether the MDN needs to be signed or not.
	SignMdn *bool `pulumi:"signMdn"`
	// The value indicating whether to sign the outbound MDN if optional.
	SignOutboundMdnIfOptional *bool `pulumi:"signOutboundMdnIfOptional"`
}

// AS2MdnSettingsInput is an input type that accepts AS2MdnSettingsArgs and AS2MdnSettingsOutput values.
// You can construct a concrete instance of `AS2MdnSettingsInput` via:
//
//          AS2MdnSettingsArgs{...}
type AS2MdnSettingsInput interface {
	pulumi.Input

	ToAS2MdnSettingsOutput() AS2MdnSettingsOutput
	ToAS2MdnSettingsOutputWithContext(context.Context) AS2MdnSettingsOutput
}

type AS2MdnSettingsArgs struct {
	// The disposition notification to header value.
	DispositionNotificationTo pulumi.StringPtrInput `pulumi:"dispositionNotificationTo"`
	// The MDN text.
	MdnText pulumi.StringPtrInput `pulumi:"mdnText"`
	// The signing or hashing algorithm.
	MicHashingAlgorithm pulumi.StringPtrInput `pulumi:"micHashingAlgorithm"`
	// The value indicating whether to send or request a MDN.
	NeedMdn pulumi.BoolPtrInput `pulumi:"needMdn"`
	// The receipt delivery URL.
	ReceiptDeliveryUrl pulumi.StringPtrInput `pulumi:"receiptDeliveryUrl"`
	// The value indicating whether to send inbound MDN to message box.
	SendInboundMdnToMessageBox pulumi.BoolPtrInput `pulumi:"sendInboundMdnToMessageBox"`
	// The value indicating whether to send the asynchronous MDN.
	SendMdnAsynchronously pulumi.BoolPtrInput `pulumi:"sendMdnAsynchronously"`
	// The value indicating whether the MDN needs to be signed or not.
	SignMdn pulumi.BoolPtrInput `pulumi:"signMdn"`
	// The value indicating whether to sign the outbound MDN if optional.
	SignOutboundMdnIfOptional pulumi.BoolPtrInput `pulumi:"signOutboundMdnIfOptional"`
}

func (AS2MdnSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2MdnSettings)(nil)).Elem()
}

func (i AS2MdnSettingsArgs) ToAS2MdnSettingsOutput() AS2MdnSettingsOutput {
	return i.ToAS2MdnSettingsOutputWithContext(context.Background())
}

func (i AS2MdnSettingsArgs) ToAS2MdnSettingsOutputWithContext(ctx context.Context) AS2MdnSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2MdnSettingsOutput)
}

func (i AS2MdnSettingsArgs) ToAS2MdnSettingsPtrOutput() AS2MdnSettingsPtrOutput {
	return i.ToAS2MdnSettingsPtrOutputWithContext(context.Background())
}

func (i AS2MdnSettingsArgs) ToAS2MdnSettingsPtrOutputWithContext(ctx context.Context) AS2MdnSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2MdnSettingsOutput).ToAS2MdnSettingsPtrOutputWithContext(ctx)
}

// AS2MdnSettingsPtrInput is an input type that accepts AS2MdnSettingsArgs, AS2MdnSettingsPtr and AS2MdnSettingsPtrOutput values.
// You can construct a concrete instance of `AS2MdnSettingsPtrInput` via:
//
//          AS2MdnSettingsArgs{...}
//
//  or:
//
//          nil
type AS2MdnSettingsPtrInput interface {
	pulumi.Input

	ToAS2MdnSettingsPtrOutput() AS2MdnSettingsPtrOutput
	ToAS2MdnSettingsPtrOutputWithContext(context.Context) AS2MdnSettingsPtrOutput
}

type as2mdnSettingsPtrType AS2MdnSettingsArgs

func AS2MdnSettingsPtr(v *AS2MdnSettingsArgs) AS2MdnSettingsPtrInput {
	return (*as2mdnSettingsPtrType)(v)
}

func (*as2mdnSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2MdnSettings)(nil)).Elem()
}

func (i *as2mdnSettingsPtrType) ToAS2MdnSettingsPtrOutput() AS2MdnSettingsPtrOutput {
	return i.ToAS2MdnSettingsPtrOutputWithContext(context.Background())
}

func (i *as2mdnSettingsPtrType) ToAS2MdnSettingsPtrOutputWithContext(ctx context.Context) AS2MdnSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2MdnSettingsPtrOutput)
}

type AS2MdnSettingsResponse struct {
	// The disposition notification to header value.
	DispositionNotificationTo *string `pulumi:"dispositionNotificationTo"`
	// The MDN text.
	MdnText *string `pulumi:"mdnText"`
	// The signing or hashing algorithm.
	MicHashingAlgorithm *string `pulumi:"micHashingAlgorithm"`
	// The value indicating whether to send or request a MDN.
	NeedMdn *bool `pulumi:"needMdn"`
	// The receipt delivery URL.
	ReceiptDeliveryUrl *string `pulumi:"receiptDeliveryUrl"`
	// The value indicating whether to send inbound MDN to message box.
	SendInboundMdnToMessageBox *bool `pulumi:"sendInboundMdnToMessageBox"`
	// The value indicating whether to send the asynchronous MDN.
	SendMdnAsynchronously *bool `pulumi:"sendMdnAsynchronously"`
	// The value indicating whether the MDN needs to be signed or not.
	SignMdn *bool `pulumi:"signMdn"`
	// The value indicating whether to sign the outbound MDN if optional.
	SignOutboundMdnIfOptional *bool `pulumi:"signOutboundMdnIfOptional"`
}

type AS2MdnSettingsResponseOutput struct{ *pulumi.OutputState }

func (AS2MdnSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2MdnSettingsResponse)(nil)).Elem()
}

func (o AS2MdnSettingsResponseOutput) ToAS2MdnSettingsResponseOutput() AS2MdnSettingsResponseOutput {
	return o
}

func (o AS2MdnSettingsResponseOutput) ToAS2MdnSettingsResponseOutputWithContext(ctx context.Context) AS2MdnSettingsResponseOutput {
	return o
}

func (o AS2MdnSettingsResponseOutput) ToAS2MdnSettingsResponsePtrOutput() AS2MdnSettingsResponsePtrOutput {
	return o.ToAS2MdnSettingsResponsePtrOutputWithContext(context.Background())
}

func (o AS2MdnSettingsResponseOutput) ToAS2MdnSettingsResponsePtrOutputWithContext(ctx context.Context) AS2MdnSettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2MdnSettingsResponse) *AS2MdnSettingsResponse {
		return &v
	}).(AS2MdnSettingsResponsePtrOutput)
}

// The disposition notification to header value.
func (o AS2MdnSettingsResponseOutput) DispositionNotificationTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AS2MdnSettingsResponse) *string { return v.DispositionNotificationTo }).(pulumi.StringPtrOutput)
}

// The MDN text.
func (o AS2MdnSettingsResponseOutput) MdnText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AS2MdnSettingsResponse) *string { return v.MdnText }).(pulumi.StringPtrOutput)
}

// The signing or hashing algorithm.
func (o AS2MdnSettingsResponseOutput) MicHashingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AS2MdnSettingsResponse) *string { return v.MicHashingAlgorithm }).(pulumi.StringPtrOutput)
}

// The value indicating whether to send or request a MDN.
func (o AS2MdnSettingsResponseOutput) NeedMdn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2MdnSettingsResponse) *bool { return v.NeedMdn }).(pulumi.BoolPtrOutput)
}

// The receipt delivery URL.
func (o AS2MdnSettingsResponseOutput) ReceiptDeliveryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AS2MdnSettingsResponse) *string { return v.ReceiptDeliveryUrl }).(pulumi.StringPtrOutput)
}

// The value indicating whether to send inbound MDN to message box.
func (o AS2MdnSettingsResponseOutput) SendInboundMdnToMessageBox() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2MdnSettingsResponse) *bool { return v.SendInboundMdnToMessageBox }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to send the asynchronous MDN.
func (o AS2MdnSettingsResponseOutput) SendMdnAsynchronously() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2MdnSettingsResponse) *bool { return v.SendMdnAsynchronously }).(pulumi.BoolPtrOutput)
}

// The value indicating whether the MDN needs to be signed or not.
func (o AS2MdnSettingsResponseOutput) SignMdn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2MdnSettingsResponse) *bool { return v.SignMdn }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to sign the outbound MDN if optional.
func (o AS2MdnSettingsResponseOutput) SignOutboundMdnIfOptional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2MdnSettingsResponse) *bool { return v.SignOutboundMdnIfOptional }).(pulumi.BoolPtrOutput)
}

type AS2MdnSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AS2MdnSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2MdnSettingsResponse)(nil)).Elem()
}

func (o AS2MdnSettingsResponsePtrOutput) ToAS2MdnSettingsResponsePtrOutput() AS2MdnSettingsResponsePtrOutput {
	return o
}

func (o AS2MdnSettingsResponsePtrOutput) ToAS2MdnSettingsResponsePtrOutputWithContext(ctx context.Context) AS2MdnSettingsResponsePtrOutput {
	return o
}

func (o AS2MdnSettingsResponsePtrOutput) Elem() AS2MdnSettingsResponseOutput {
	return o.ApplyT(func(v *AS2MdnSettingsResponse) AS2MdnSettingsResponse { return *v }).(AS2MdnSettingsResponseOutput)
}

// The disposition notification to header value.
func (o AS2MdnSettingsResponsePtrOutput) DispositionNotificationTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.DispositionNotificationTo
	}).(pulumi.StringPtrOutput)
}

// The MDN text.
func (o AS2MdnSettingsResponsePtrOutput) MdnText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.MdnText
	}).(pulumi.StringPtrOutput)
}

// The signing or hashing algorithm.
func (o AS2MdnSettingsResponsePtrOutput) MicHashingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.MicHashingAlgorithm
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to send or request a MDN.
func (o AS2MdnSettingsResponsePtrOutput) NeedMdn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.NeedMdn
	}).(pulumi.BoolPtrOutput)
}

// The receipt delivery URL.
func (o AS2MdnSettingsResponsePtrOutput) ReceiptDeliveryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReceiptDeliveryUrl
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to send inbound MDN to message box.
func (o AS2MdnSettingsResponsePtrOutput) SendInboundMdnToMessageBox() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SendInboundMdnToMessageBox
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to send the asynchronous MDN.
func (o AS2MdnSettingsResponsePtrOutput) SendMdnAsynchronously() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SendMdnAsynchronously
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether the MDN needs to be signed or not.
func (o AS2MdnSettingsResponsePtrOutput) SignMdn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SignMdn
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to sign the outbound MDN if optional.
func (o AS2MdnSettingsResponsePtrOutput) SignOutboundMdnIfOptional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MdnSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SignOutboundMdnIfOptional
	}).(pulumi.BoolPtrOutput)
}

type AS2MessageConnectionSettings struct {
	// The value indicating whether to ignore mismatch in certificate name.
	IgnoreCertificateNameMismatch *bool `pulumi:"ignoreCertificateNameMismatch"`
	// The value indicating whether to keep the connection alive.
	KeepHttpConnectionAlive *bool `pulumi:"keepHttpConnectionAlive"`
	// The value indicating whether to support HTTP status code 'CONTINUE'.
	SupportHttpStatusCodeContinue *bool `pulumi:"supportHttpStatusCodeContinue"`
	// The value indicating whether to unfold the HTTP headers.
	UnfoldHttpHeaders *bool `pulumi:"unfoldHttpHeaders"`
}

// AS2MessageConnectionSettingsInput is an input type that accepts AS2MessageConnectionSettingsArgs and AS2MessageConnectionSettingsOutput values.
// You can construct a concrete instance of `AS2MessageConnectionSettingsInput` via:
//
//          AS2MessageConnectionSettingsArgs{...}
type AS2MessageConnectionSettingsInput interface {
	pulumi.Input

	ToAS2MessageConnectionSettingsOutput() AS2MessageConnectionSettingsOutput
	ToAS2MessageConnectionSettingsOutputWithContext(context.Context) AS2MessageConnectionSettingsOutput
}

type AS2MessageConnectionSettingsArgs struct {
	// The value indicating whether to ignore mismatch in certificate name.
	IgnoreCertificateNameMismatch pulumi.BoolPtrInput `pulumi:"ignoreCertificateNameMismatch"`
	// The value indicating whether to keep the connection alive.
	KeepHttpConnectionAlive pulumi.BoolPtrInput `pulumi:"keepHttpConnectionAlive"`
	// The value indicating whether to support HTTP status code 'CONTINUE'.
	SupportHttpStatusCodeContinue pulumi.BoolPtrInput `pulumi:"supportHttpStatusCodeContinue"`
	// The value indicating whether to unfold the HTTP headers.
	UnfoldHttpHeaders pulumi.BoolPtrInput `pulumi:"unfoldHttpHeaders"`
}

func (AS2MessageConnectionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2MessageConnectionSettings)(nil)).Elem()
}

func (i AS2MessageConnectionSettingsArgs) ToAS2MessageConnectionSettingsOutput() AS2MessageConnectionSettingsOutput {
	return i.ToAS2MessageConnectionSettingsOutputWithContext(context.Background())
}

func (i AS2MessageConnectionSettingsArgs) ToAS2MessageConnectionSettingsOutputWithContext(ctx context.Context) AS2MessageConnectionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2MessageConnectionSettingsOutput)
}

func (i AS2MessageConnectionSettingsArgs) ToAS2MessageConnectionSettingsPtrOutput() AS2MessageConnectionSettingsPtrOutput {
	return i.ToAS2MessageConnectionSettingsPtrOutputWithContext(context.Background())
}

func (i AS2MessageConnectionSettingsArgs) ToAS2MessageConnectionSettingsPtrOutputWithContext(ctx context.Context) AS2MessageConnectionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2MessageConnectionSettingsOutput).ToAS2MessageConnectionSettingsPtrOutputWithContext(ctx)
}

// AS2MessageConnectionSettingsPtrInput is an input type that accepts AS2MessageConnectionSettingsArgs, AS2MessageConnectionSettingsPtr and AS2MessageConnectionSettingsPtrOutput values.
// You can construct a concrete instance of `AS2MessageConnectionSettingsPtrInput` via:
//
//          AS2MessageConnectionSettingsArgs{...}
//
//  or:
//
//          nil
type AS2MessageConnectionSettingsPtrInput interface {
	pulumi.Input

	ToAS2MessageConnectionSettingsPtrOutput() AS2MessageConnectionSettingsPtrOutput
	ToAS2MessageConnectionSettingsPtrOutputWithContext(context.Context) AS2MessageConnectionSettingsPtrOutput
}

type as2messageConnectionSettingsPtrType AS2MessageConnectionSettingsArgs

func AS2MessageConnectionSettingsPtr(v *AS2MessageConnectionSettingsArgs) AS2MessageConnectionSettingsPtrInput {
	return (*as2messageConnectionSettingsPtrType)(v)
}

func (*as2messageConnectionSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2MessageConnectionSettings)(nil)).Elem()
}

func (i *as2messageConnectionSettingsPtrType) ToAS2MessageConnectionSettingsPtrOutput() AS2MessageConnectionSettingsPtrOutput {
	return i.ToAS2MessageConnectionSettingsPtrOutputWithContext(context.Background())
}

func (i *as2messageConnectionSettingsPtrType) ToAS2MessageConnectionSettingsPtrOutputWithContext(ctx context.Context) AS2MessageConnectionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2MessageConnectionSettingsPtrOutput)
}

type AS2MessageConnectionSettingsResponse struct {
	// The value indicating whether to ignore mismatch in certificate name.
	IgnoreCertificateNameMismatch *bool `pulumi:"ignoreCertificateNameMismatch"`
	// The value indicating whether to keep the connection alive.
	KeepHttpConnectionAlive *bool `pulumi:"keepHttpConnectionAlive"`
	// The value indicating whether to support HTTP status code 'CONTINUE'.
	SupportHttpStatusCodeContinue *bool `pulumi:"supportHttpStatusCodeContinue"`
	// The value indicating whether to unfold the HTTP headers.
	UnfoldHttpHeaders *bool `pulumi:"unfoldHttpHeaders"`
}

type AS2MessageConnectionSettingsResponseOutput struct{ *pulumi.OutputState }

func (AS2MessageConnectionSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2MessageConnectionSettingsResponse)(nil)).Elem()
}

func (o AS2MessageConnectionSettingsResponseOutput) ToAS2MessageConnectionSettingsResponseOutput() AS2MessageConnectionSettingsResponseOutput {
	return o
}

func (o AS2MessageConnectionSettingsResponseOutput) ToAS2MessageConnectionSettingsResponseOutputWithContext(ctx context.Context) AS2MessageConnectionSettingsResponseOutput {
	return o
}

func (o AS2MessageConnectionSettingsResponseOutput) ToAS2MessageConnectionSettingsResponsePtrOutput() AS2MessageConnectionSettingsResponsePtrOutput {
	return o.ToAS2MessageConnectionSettingsResponsePtrOutputWithContext(context.Background())
}

func (o AS2MessageConnectionSettingsResponseOutput) ToAS2MessageConnectionSettingsResponsePtrOutputWithContext(ctx context.Context) AS2MessageConnectionSettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2MessageConnectionSettingsResponse) *AS2MessageConnectionSettingsResponse {
		return &v
	}).(AS2MessageConnectionSettingsResponsePtrOutput)
}

// The value indicating whether to ignore mismatch in certificate name.
func (o AS2MessageConnectionSettingsResponseOutput) IgnoreCertificateNameMismatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2MessageConnectionSettingsResponse) *bool { return v.IgnoreCertificateNameMismatch }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to keep the connection alive.
func (o AS2MessageConnectionSettingsResponseOutput) KeepHttpConnectionAlive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2MessageConnectionSettingsResponse) *bool { return v.KeepHttpConnectionAlive }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to support HTTP status code 'CONTINUE'.
func (o AS2MessageConnectionSettingsResponseOutput) SupportHttpStatusCodeContinue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2MessageConnectionSettingsResponse) *bool { return v.SupportHttpStatusCodeContinue }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to unfold the HTTP headers.
func (o AS2MessageConnectionSettingsResponseOutput) UnfoldHttpHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2MessageConnectionSettingsResponse) *bool { return v.UnfoldHttpHeaders }).(pulumi.BoolPtrOutput)
}

type AS2MessageConnectionSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AS2MessageConnectionSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2MessageConnectionSettingsResponse)(nil)).Elem()
}

func (o AS2MessageConnectionSettingsResponsePtrOutput) ToAS2MessageConnectionSettingsResponsePtrOutput() AS2MessageConnectionSettingsResponsePtrOutput {
	return o
}

func (o AS2MessageConnectionSettingsResponsePtrOutput) ToAS2MessageConnectionSettingsResponsePtrOutputWithContext(ctx context.Context) AS2MessageConnectionSettingsResponsePtrOutput {
	return o
}

func (o AS2MessageConnectionSettingsResponsePtrOutput) Elem() AS2MessageConnectionSettingsResponseOutput {
	return o.ApplyT(func(v *AS2MessageConnectionSettingsResponse) AS2MessageConnectionSettingsResponse { return *v }).(AS2MessageConnectionSettingsResponseOutput)
}

// The value indicating whether to ignore mismatch in certificate name.
func (o AS2MessageConnectionSettingsResponsePtrOutput) IgnoreCertificateNameMismatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MessageConnectionSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreCertificateNameMismatch
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to keep the connection alive.
func (o AS2MessageConnectionSettingsResponsePtrOutput) KeepHttpConnectionAlive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MessageConnectionSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.KeepHttpConnectionAlive
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to support HTTP status code 'CONTINUE'.
func (o AS2MessageConnectionSettingsResponsePtrOutput) SupportHttpStatusCodeContinue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MessageConnectionSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SupportHttpStatusCodeContinue
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to unfold the HTTP headers.
func (o AS2MessageConnectionSettingsResponsePtrOutput) UnfoldHttpHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2MessageConnectionSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.UnfoldHttpHeaders
	}).(pulumi.BoolPtrOutput)
}

type AS2OneWayAgreement struct {
	// The AS2 protocol settings.
	ProtocolSettings *AS2ProtocolSettings `pulumi:"protocolSettings"`
	// The receiver business identity
	ReceiverBusinessIdentity *BusinessIdentity `pulumi:"receiverBusinessIdentity"`
	// The sender business identity
	SenderBusinessIdentity *BusinessIdentity `pulumi:"senderBusinessIdentity"`
}

// AS2OneWayAgreementInput is an input type that accepts AS2OneWayAgreementArgs and AS2OneWayAgreementOutput values.
// You can construct a concrete instance of `AS2OneWayAgreementInput` via:
//
//          AS2OneWayAgreementArgs{...}
type AS2OneWayAgreementInput interface {
	pulumi.Input

	ToAS2OneWayAgreementOutput() AS2OneWayAgreementOutput
	ToAS2OneWayAgreementOutputWithContext(context.Context) AS2OneWayAgreementOutput
}

type AS2OneWayAgreementArgs struct {
	// The AS2 protocol settings.
	ProtocolSettings AS2ProtocolSettingsPtrInput `pulumi:"protocolSettings"`
	// The receiver business identity
	ReceiverBusinessIdentity BusinessIdentityPtrInput `pulumi:"receiverBusinessIdentity"`
	// The sender business identity
	SenderBusinessIdentity BusinessIdentityPtrInput `pulumi:"senderBusinessIdentity"`
}

func (AS2OneWayAgreementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2OneWayAgreement)(nil)).Elem()
}

func (i AS2OneWayAgreementArgs) ToAS2OneWayAgreementOutput() AS2OneWayAgreementOutput {
	return i.ToAS2OneWayAgreementOutputWithContext(context.Background())
}

func (i AS2OneWayAgreementArgs) ToAS2OneWayAgreementOutputWithContext(ctx context.Context) AS2OneWayAgreementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2OneWayAgreementOutput)
}

func (i AS2OneWayAgreementArgs) ToAS2OneWayAgreementPtrOutput() AS2OneWayAgreementPtrOutput {
	return i.ToAS2OneWayAgreementPtrOutputWithContext(context.Background())
}

func (i AS2OneWayAgreementArgs) ToAS2OneWayAgreementPtrOutputWithContext(ctx context.Context) AS2OneWayAgreementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2OneWayAgreementOutput).ToAS2OneWayAgreementPtrOutputWithContext(ctx)
}

// AS2OneWayAgreementPtrInput is an input type that accepts AS2OneWayAgreementArgs, AS2OneWayAgreementPtr and AS2OneWayAgreementPtrOutput values.
// You can construct a concrete instance of `AS2OneWayAgreementPtrInput` via:
//
//          AS2OneWayAgreementArgs{...}
//
//  or:
//
//          nil
type AS2OneWayAgreementPtrInput interface {
	pulumi.Input

	ToAS2OneWayAgreementPtrOutput() AS2OneWayAgreementPtrOutput
	ToAS2OneWayAgreementPtrOutputWithContext(context.Context) AS2OneWayAgreementPtrOutput
}

type as2oneWayAgreementPtrType AS2OneWayAgreementArgs

func AS2OneWayAgreementPtr(v *AS2OneWayAgreementArgs) AS2OneWayAgreementPtrInput {
	return (*as2oneWayAgreementPtrType)(v)
}

func (*as2oneWayAgreementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2OneWayAgreement)(nil)).Elem()
}

func (i *as2oneWayAgreementPtrType) ToAS2OneWayAgreementPtrOutput() AS2OneWayAgreementPtrOutput {
	return i.ToAS2OneWayAgreementPtrOutputWithContext(context.Background())
}

func (i *as2oneWayAgreementPtrType) ToAS2OneWayAgreementPtrOutputWithContext(ctx context.Context) AS2OneWayAgreementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2OneWayAgreementPtrOutput)
}

type AS2OneWayAgreementResponse struct {
	// The AS2 protocol settings.
	ProtocolSettings *AS2ProtocolSettingsResponse `pulumi:"protocolSettings"`
	// The receiver business identity
	ReceiverBusinessIdentity *BusinessIdentityResponse `pulumi:"receiverBusinessIdentity"`
	// The sender business identity
	SenderBusinessIdentity *BusinessIdentityResponse `pulumi:"senderBusinessIdentity"`
}

type AS2OneWayAgreementResponseOutput struct{ *pulumi.OutputState }

func (AS2OneWayAgreementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2OneWayAgreementResponse)(nil)).Elem()
}

func (o AS2OneWayAgreementResponseOutput) ToAS2OneWayAgreementResponseOutput() AS2OneWayAgreementResponseOutput {
	return o
}

func (o AS2OneWayAgreementResponseOutput) ToAS2OneWayAgreementResponseOutputWithContext(ctx context.Context) AS2OneWayAgreementResponseOutput {
	return o
}

func (o AS2OneWayAgreementResponseOutput) ToAS2OneWayAgreementResponsePtrOutput() AS2OneWayAgreementResponsePtrOutput {
	return o.ToAS2OneWayAgreementResponsePtrOutputWithContext(context.Background())
}

func (o AS2OneWayAgreementResponseOutput) ToAS2OneWayAgreementResponsePtrOutputWithContext(ctx context.Context) AS2OneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v AS2OneWayAgreementResponse) *AS2OneWayAgreementResponse {
		return &v
	}).(AS2OneWayAgreementResponsePtrOutput)
}

// The AS2 protocol settings.
func (o AS2OneWayAgreementResponseOutput) ProtocolSettings() AS2ProtocolSettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2OneWayAgreementResponse) *AS2ProtocolSettingsResponse { return v.ProtocolSettings }).(AS2ProtocolSettingsResponsePtrOutput)
}

// The receiver business identity
func (o AS2OneWayAgreementResponseOutput) ReceiverBusinessIdentity() BusinessIdentityResponsePtrOutput {
	return o.ApplyT(func(v AS2OneWayAgreementResponse) *BusinessIdentityResponse { return v.ReceiverBusinessIdentity }).(BusinessIdentityResponsePtrOutput)
}

// The sender business identity
func (o AS2OneWayAgreementResponseOutput) SenderBusinessIdentity() BusinessIdentityResponsePtrOutput {
	return o.ApplyT(func(v AS2OneWayAgreementResponse) *BusinessIdentityResponse { return v.SenderBusinessIdentity }).(BusinessIdentityResponsePtrOutput)
}

type AS2OneWayAgreementResponsePtrOutput struct{ *pulumi.OutputState }

func (AS2OneWayAgreementResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2OneWayAgreementResponse)(nil)).Elem()
}

func (o AS2OneWayAgreementResponsePtrOutput) ToAS2OneWayAgreementResponsePtrOutput() AS2OneWayAgreementResponsePtrOutput {
	return o
}

func (o AS2OneWayAgreementResponsePtrOutput) ToAS2OneWayAgreementResponsePtrOutputWithContext(ctx context.Context) AS2OneWayAgreementResponsePtrOutput {
	return o
}

func (o AS2OneWayAgreementResponsePtrOutput) Elem() AS2OneWayAgreementResponseOutput {
	return o.ApplyT(func(v *AS2OneWayAgreementResponse) AS2OneWayAgreementResponse { return *v }).(AS2OneWayAgreementResponseOutput)
}

// The AS2 protocol settings.
func (o AS2OneWayAgreementResponsePtrOutput) ProtocolSettings() AS2ProtocolSettingsResponsePtrOutput {
	return o.ApplyT(func(v *AS2OneWayAgreementResponse) *AS2ProtocolSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ProtocolSettings
	}).(AS2ProtocolSettingsResponsePtrOutput)
}

// The receiver business identity
func (o AS2OneWayAgreementResponsePtrOutput) ReceiverBusinessIdentity() BusinessIdentityResponsePtrOutput {
	return o.ApplyT(func(v *AS2OneWayAgreementResponse) *BusinessIdentityResponse {
		if v == nil {
			return nil
		}
		return v.ReceiverBusinessIdentity
	}).(BusinessIdentityResponsePtrOutput)
}

// The sender business identity
func (o AS2OneWayAgreementResponsePtrOutput) SenderBusinessIdentity() BusinessIdentityResponsePtrOutput {
	return o.ApplyT(func(v *AS2OneWayAgreementResponse) *BusinessIdentityResponse {
		if v == nil {
			return nil
		}
		return v.SenderBusinessIdentity
	}).(BusinessIdentityResponsePtrOutput)
}

type AS2ProtocolSettings struct {
	// The acknowledgement connection settings.
	AcknowledgementConnectionSettings *AS2AcknowledgementConnectionSettings `pulumi:"acknowledgementConnectionSettings"`
	// The envelope settings.
	EnvelopeSettings *AS2EnvelopeSettings `pulumi:"envelopeSettings"`
	// The error settings.
	ErrorSettings *AS2ErrorSettings `pulumi:"errorSettings"`
	// The MDN settings.
	MdnSettings *AS2MdnSettings `pulumi:"mdnSettings"`
	// The message connection settings.
	MessageConnectionSettings *AS2MessageConnectionSettings `pulumi:"messageConnectionSettings"`
	// The security settings.
	SecuritySettings *AS2SecuritySettings `pulumi:"securitySettings"`
	// The validation settings.
	ValidationSettings *AS2ValidationSettings `pulumi:"validationSettings"`
}

// AS2ProtocolSettingsInput is an input type that accepts AS2ProtocolSettingsArgs and AS2ProtocolSettingsOutput values.
// You can construct a concrete instance of `AS2ProtocolSettingsInput` via:
//
//          AS2ProtocolSettingsArgs{...}
type AS2ProtocolSettingsInput interface {
	pulumi.Input

	ToAS2ProtocolSettingsOutput() AS2ProtocolSettingsOutput
	ToAS2ProtocolSettingsOutputWithContext(context.Context) AS2ProtocolSettingsOutput
}

type AS2ProtocolSettingsArgs struct {
	// The acknowledgement connection settings.
	AcknowledgementConnectionSettings AS2AcknowledgementConnectionSettingsPtrInput `pulumi:"acknowledgementConnectionSettings"`
	// The envelope settings.
	EnvelopeSettings AS2EnvelopeSettingsPtrInput `pulumi:"envelopeSettings"`
	// The error settings.
	ErrorSettings AS2ErrorSettingsPtrInput `pulumi:"errorSettings"`
	// The MDN settings.
	MdnSettings AS2MdnSettingsPtrInput `pulumi:"mdnSettings"`
	// The message connection settings.
	MessageConnectionSettings AS2MessageConnectionSettingsPtrInput `pulumi:"messageConnectionSettings"`
	// The security settings.
	SecuritySettings AS2SecuritySettingsPtrInput `pulumi:"securitySettings"`
	// The validation settings.
	ValidationSettings AS2ValidationSettingsPtrInput `pulumi:"validationSettings"`
}

func (AS2ProtocolSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2ProtocolSettings)(nil)).Elem()
}

func (i AS2ProtocolSettingsArgs) ToAS2ProtocolSettingsOutput() AS2ProtocolSettingsOutput {
	return i.ToAS2ProtocolSettingsOutputWithContext(context.Background())
}

func (i AS2ProtocolSettingsArgs) ToAS2ProtocolSettingsOutputWithContext(ctx context.Context) AS2ProtocolSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ProtocolSettingsOutput)
}

func (i AS2ProtocolSettingsArgs) ToAS2ProtocolSettingsPtrOutput() AS2ProtocolSettingsPtrOutput {
	return i.ToAS2ProtocolSettingsPtrOutputWithContext(context.Background())
}

func (i AS2ProtocolSettingsArgs) ToAS2ProtocolSettingsPtrOutputWithContext(ctx context.Context) AS2ProtocolSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ProtocolSettingsOutput).ToAS2ProtocolSettingsPtrOutputWithContext(ctx)
}

// AS2ProtocolSettingsPtrInput is an input type that accepts AS2ProtocolSettingsArgs, AS2ProtocolSettingsPtr and AS2ProtocolSettingsPtrOutput values.
// You can construct a concrete instance of `AS2ProtocolSettingsPtrInput` via:
//
//          AS2ProtocolSettingsArgs{...}
//
//  or:
//
//          nil
type AS2ProtocolSettingsPtrInput interface {
	pulumi.Input

	ToAS2ProtocolSettingsPtrOutput() AS2ProtocolSettingsPtrOutput
	ToAS2ProtocolSettingsPtrOutputWithContext(context.Context) AS2ProtocolSettingsPtrOutput
}

type as2protocolSettingsPtrType AS2ProtocolSettingsArgs

func AS2ProtocolSettingsPtr(v *AS2ProtocolSettingsArgs) AS2ProtocolSettingsPtrInput {
	return (*as2protocolSettingsPtrType)(v)
}

func (*as2protocolSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2ProtocolSettings)(nil)).Elem()
}

func (i *as2protocolSettingsPtrType) ToAS2ProtocolSettingsPtrOutput() AS2ProtocolSettingsPtrOutput {
	return i.ToAS2ProtocolSettingsPtrOutputWithContext(context.Background())
}

func (i *as2protocolSettingsPtrType) ToAS2ProtocolSettingsPtrOutputWithContext(ctx context.Context) AS2ProtocolSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ProtocolSettingsPtrOutput)
}

type AS2ProtocolSettingsResponse struct {
	// The acknowledgement connection settings.
	AcknowledgementConnectionSettings *AS2AcknowledgementConnectionSettingsResponse `pulumi:"acknowledgementConnectionSettings"`
	// The envelope settings.
	EnvelopeSettings *AS2EnvelopeSettingsResponse `pulumi:"envelopeSettings"`
	// The error settings.
	ErrorSettings *AS2ErrorSettingsResponse `pulumi:"errorSettings"`
	// The MDN settings.
	MdnSettings *AS2MdnSettingsResponse `pulumi:"mdnSettings"`
	// The message connection settings.
	MessageConnectionSettings *AS2MessageConnectionSettingsResponse `pulumi:"messageConnectionSettings"`
	// The security settings.
	SecuritySettings *AS2SecuritySettingsResponse `pulumi:"securitySettings"`
	// The validation settings.
	ValidationSettings *AS2ValidationSettingsResponse `pulumi:"validationSettings"`
}

type AS2ProtocolSettingsResponseOutput struct{ *pulumi.OutputState }

func (AS2ProtocolSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2ProtocolSettingsResponse)(nil)).Elem()
}

func (o AS2ProtocolSettingsResponseOutput) ToAS2ProtocolSettingsResponseOutput() AS2ProtocolSettingsResponseOutput {
	return o
}

func (o AS2ProtocolSettingsResponseOutput) ToAS2ProtocolSettingsResponseOutputWithContext(ctx context.Context) AS2ProtocolSettingsResponseOutput {
	return o
}

func (o AS2ProtocolSettingsResponseOutput) ToAS2ProtocolSettingsResponsePtrOutput() AS2ProtocolSettingsResponsePtrOutput {
	return o.ToAS2ProtocolSettingsResponsePtrOutputWithContext(context.Background())
}

func (o AS2ProtocolSettingsResponseOutput) ToAS2ProtocolSettingsResponsePtrOutputWithContext(ctx context.Context) AS2ProtocolSettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2ProtocolSettingsResponse) *AS2ProtocolSettingsResponse {
		return &v
	}).(AS2ProtocolSettingsResponsePtrOutput)
}

// The acknowledgement connection settings.
func (o AS2ProtocolSettingsResponseOutput) AcknowledgementConnectionSettings() AS2AcknowledgementConnectionSettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2ProtocolSettingsResponse) *AS2AcknowledgementConnectionSettingsResponse {
		return v.AcknowledgementConnectionSettings
	}).(AS2AcknowledgementConnectionSettingsResponsePtrOutput)
}

// The envelope settings.
func (o AS2ProtocolSettingsResponseOutput) EnvelopeSettings() AS2EnvelopeSettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2ProtocolSettingsResponse) *AS2EnvelopeSettingsResponse { return v.EnvelopeSettings }).(AS2EnvelopeSettingsResponsePtrOutput)
}

// The error settings.
func (o AS2ProtocolSettingsResponseOutput) ErrorSettings() AS2ErrorSettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2ProtocolSettingsResponse) *AS2ErrorSettingsResponse { return v.ErrorSettings }).(AS2ErrorSettingsResponsePtrOutput)
}

// The MDN settings.
func (o AS2ProtocolSettingsResponseOutput) MdnSettings() AS2MdnSettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2ProtocolSettingsResponse) *AS2MdnSettingsResponse { return v.MdnSettings }).(AS2MdnSettingsResponsePtrOutput)
}

// The message connection settings.
func (o AS2ProtocolSettingsResponseOutput) MessageConnectionSettings() AS2MessageConnectionSettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2ProtocolSettingsResponse) *AS2MessageConnectionSettingsResponse {
		return v.MessageConnectionSettings
	}).(AS2MessageConnectionSettingsResponsePtrOutput)
}

// The security settings.
func (o AS2ProtocolSettingsResponseOutput) SecuritySettings() AS2SecuritySettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2ProtocolSettingsResponse) *AS2SecuritySettingsResponse { return v.SecuritySettings }).(AS2SecuritySettingsResponsePtrOutput)
}

// The validation settings.
func (o AS2ProtocolSettingsResponseOutput) ValidationSettings() AS2ValidationSettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2ProtocolSettingsResponse) *AS2ValidationSettingsResponse { return v.ValidationSettings }).(AS2ValidationSettingsResponsePtrOutput)
}

type AS2ProtocolSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AS2ProtocolSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2ProtocolSettingsResponse)(nil)).Elem()
}

func (o AS2ProtocolSettingsResponsePtrOutput) ToAS2ProtocolSettingsResponsePtrOutput() AS2ProtocolSettingsResponsePtrOutput {
	return o
}

func (o AS2ProtocolSettingsResponsePtrOutput) ToAS2ProtocolSettingsResponsePtrOutputWithContext(ctx context.Context) AS2ProtocolSettingsResponsePtrOutput {
	return o
}

func (o AS2ProtocolSettingsResponsePtrOutput) Elem() AS2ProtocolSettingsResponseOutput {
	return o.ApplyT(func(v *AS2ProtocolSettingsResponse) AS2ProtocolSettingsResponse { return *v }).(AS2ProtocolSettingsResponseOutput)
}

// The acknowledgement connection settings.
func (o AS2ProtocolSettingsResponsePtrOutput) AcknowledgementConnectionSettings() AS2AcknowledgementConnectionSettingsResponsePtrOutput {
	return o.ApplyT(func(v *AS2ProtocolSettingsResponse) *AS2AcknowledgementConnectionSettingsResponse {
		if v == nil {
			return nil
		}
		return v.AcknowledgementConnectionSettings
	}).(AS2AcknowledgementConnectionSettingsResponsePtrOutput)
}

// The envelope settings.
func (o AS2ProtocolSettingsResponsePtrOutput) EnvelopeSettings() AS2EnvelopeSettingsResponsePtrOutput {
	return o.ApplyT(func(v *AS2ProtocolSettingsResponse) *AS2EnvelopeSettingsResponse {
		if v == nil {
			return nil
		}
		return v.EnvelopeSettings
	}).(AS2EnvelopeSettingsResponsePtrOutput)
}

// The error settings.
func (o AS2ProtocolSettingsResponsePtrOutput) ErrorSettings() AS2ErrorSettingsResponsePtrOutput {
	return o.ApplyT(func(v *AS2ProtocolSettingsResponse) *AS2ErrorSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ErrorSettings
	}).(AS2ErrorSettingsResponsePtrOutput)
}

// The MDN settings.
func (o AS2ProtocolSettingsResponsePtrOutput) MdnSettings() AS2MdnSettingsResponsePtrOutput {
	return o.ApplyT(func(v *AS2ProtocolSettingsResponse) *AS2MdnSettingsResponse {
		if v == nil {
			return nil
		}
		return v.MdnSettings
	}).(AS2MdnSettingsResponsePtrOutput)
}

// The message connection settings.
func (o AS2ProtocolSettingsResponsePtrOutput) MessageConnectionSettings() AS2MessageConnectionSettingsResponsePtrOutput {
	return o.ApplyT(func(v *AS2ProtocolSettingsResponse) *AS2MessageConnectionSettingsResponse {
		if v == nil {
			return nil
		}
		return v.MessageConnectionSettings
	}).(AS2MessageConnectionSettingsResponsePtrOutput)
}

// The security settings.
func (o AS2ProtocolSettingsResponsePtrOutput) SecuritySettings() AS2SecuritySettingsResponsePtrOutput {
	return o.ApplyT(func(v *AS2ProtocolSettingsResponse) *AS2SecuritySettingsResponse {
		if v == nil {
			return nil
		}
		return v.SecuritySettings
	}).(AS2SecuritySettingsResponsePtrOutput)
}

// The validation settings.
func (o AS2ProtocolSettingsResponsePtrOutput) ValidationSettings() AS2ValidationSettingsResponsePtrOutput {
	return o.ApplyT(func(v *AS2ProtocolSettingsResponse) *AS2ValidationSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ValidationSettings
	}).(AS2ValidationSettingsResponsePtrOutput)
}

type AS2SecuritySettings struct {
	// The value indicating whether to enable NRR for inbound decoded messages.
	EnableNrrForInboundDecodedMessages *bool `pulumi:"enableNrrForInboundDecodedMessages"`
	// The value indicating whether to enable NRR for inbound encoded messages.
	EnableNrrForInboundEncodedMessages *bool `pulumi:"enableNrrForInboundEncodedMessages"`
	// The value indicating whether to enable NRR for inbound MDN.
	EnableNrrForInboundMdn *bool `pulumi:"enableNrrForInboundMdn"`
	// The value indicating whether to enable NRR for outbound decoded messages.
	EnableNrrForOutboundDecodedMessages *bool `pulumi:"enableNrrForOutboundDecodedMessages"`
	// The value indicating whether to enable NRR for outbound encoded messages.
	EnableNrrForOutboundEncodedMessages *bool `pulumi:"enableNrrForOutboundEncodedMessages"`
	// The value indicating whether to enable NRR for outbound MDN.
	EnableNrrForOutboundMdn *bool `pulumi:"enableNrrForOutboundMdn"`
	// The name of the encryption certificate.
	EncryptionCertificateName *string `pulumi:"encryptionCertificateName"`
	// The value indicating whether to send or request a MDN.
	OverrideGroupSigningCertificate *bool `pulumi:"overrideGroupSigningCertificate"`
	// The name of the signing certificate.
	SigningCertificateName *string `pulumi:"signingCertificateName"`
}

// AS2SecuritySettingsInput is an input type that accepts AS2SecuritySettingsArgs and AS2SecuritySettingsOutput values.
// You can construct a concrete instance of `AS2SecuritySettingsInput` via:
//
//          AS2SecuritySettingsArgs{...}
type AS2SecuritySettingsInput interface {
	pulumi.Input

	ToAS2SecuritySettingsOutput() AS2SecuritySettingsOutput
	ToAS2SecuritySettingsOutputWithContext(context.Context) AS2SecuritySettingsOutput
}

type AS2SecuritySettingsArgs struct {
	// The value indicating whether to enable NRR for inbound decoded messages.
	EnableNrrForInboundDecodedMessages pulumi.BoolPtrInput `pulumi:"enableNrrForInboundDecodedMessages"`
	// The value indicating whether to enable NRR for inbound encoded messages.
	EnableNrrForInboundEncodedMessages pulumi.BoolPtrInput `pulumi:"enableNrrForInboundEncodedMessages"`
	// The value indicating whether to enable NRR for inbound MDN.
	EnableNrrForInboundMdn pulumi.BoolPtrInput `pulumi:"enableNrrForInboundMdn"`
	// The value indicating whether to enable NRR for outbound decoded messages.
	EnableNrrForOutboundDecodedMessages pulumi.BoolPtrInput `pulumi:"enableNrrForOutboundDecodedMessages"`
	// The value indicating whether to enable NRR for outbound encoded messages.
	EnableNrrForOutboundEncodedMessages pulumi.BoolPtrInput `pulumi:"enableNrrForOutboundEncodedMessages"`
	// The value indicating whether to enable NRR for outbound MDN.
	EnableNrrForOutboundMdn pulumi.BoolPtrInput `pulumi:"enableNrrForOutboundMdn"`
	// The name of the encryption certificate.
	EncryptionCertificateName pulumi.StringPtrInput `pulumi:"encryptionCertificateName"`
	// The value indicating whether to send or request a MDN.
	OverrideGroupSigningCertificate pulumi.BoolPtrInput `pulumi:"overrideGroupSigningCertificate"`
	// The name of the signing certificate.
	SigningCertificateName pulumi.StringPtrInput `pulumi:"signingCertificateName"`
}

func (AS2SecuritySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2SecuritySettings)(nil)).Elem()
}

func (i AS2SecuritySettingsArgs) ToAS2SecuritySettingsOutput() AS2SecuritySettingsOutput {
	return i.ToAS2SecuritySettingsOutputWithContext(context.Background())
}

func (i AS2SecuritySettingsArgs) ToAS2SecuritySettingsOutputWithContext(ctx context.Context) AS2SecuritySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2SecuritySettingsOutput)
}

func (i AS2SecuritySettingsArgs) ToAS2SecuritySettingsPtrOutput() AS2SecuritySettingsPtrOutput {
	return i.ToAS2SecuritySettingsPtrOutputWithContext(context.Background())
}

func (i AS2SecuritySettingsArgs) ToAS2SecuritySettingsPtrOutputWithContext(ctx context.Context) AS2SecuritySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2SecuritySettingsOutput).ToAS2SecuritySettingsPtrOutputWithContext(ctx)
}

// AS2SecuritySettingsPtrInput is an input type that accepts AS2SecuritySettingsArgs, AS2SecuritySettingsPtr and AS2SecuritySettingsPtrOutput values.
// You can construct a concrete instance of `AS2SecuritySettingsPtrInput` via:
//
//          AS2SecuritySettingsArgs{...}
//
//  or:
//
//          nil
type AS2SecuritySettingsPtrInput interface {
	pulumi.Input

	ToAS2SecuritySettingsPtrOutput() AS2SecuritySettingsPtrOutput
	ToAS2SecuritySettingsPtrOutputWithContext(context.Context) AS2SecuritySettingsPtrOutput
}

type as2securitySettingsPtrType AS2SecuritySettingsArgs

func AS2SecuritySettingsPtr(v *AS2SecuritySettingsArgs) AS2SecuritySettingsPtrInput {
	return (*as2securitySettingsPtrType)(v)
}

func (*as2securitySettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2SecuritySettings)(nil)).Elem()
}

func (i *as2securitySettingsPtrType) ToAS2SecuritySettingsPtrOutput() AS2SecuritySettingsPtrOutput {
	return i.ToAS2SecuritySettingsPtrOutputWithContext(context.Background())
}

func (i *as2securitySettingsPtrType) ToAS2SecuritySettingsPtrOutputWithContext(ctx context.Context) AS2SecuritySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2SecuritySettingsPtrOutput)
}

type AS2SecuritySettingsResponse struct {
	// The value indicating whether to enable NRR for inbound decoded messages.
	EnableNrrForInboundDecodedMessages *bool `pulumi:"enableNrrForInboundDecodedMessages"`
	// The value indicating whether to enable NRR for inbound encoded messages.
	EnableNrrForInboundEncodedMessages *bool `pulumi:"enableNrrForInboundEncodedMessages"`
	// The value indicating whether to enable NRR for inbound MDN.
	EnableNrrForInboundMdn *bool `pulumi:"enableNrrForInboundMdn"`
	// The value indicating whether to enable NRR for outbound decoded messages.
	EnableNrrForOutboundDecodedMessages *bool `pulumi:"enableNrrForOutboundDecodedMessages"`
	// The value indicating whether to enable NRR for outbound encoded messages.
	EnableNrrForOutboundEncodedMessages *bool `pulumi:"enableNrrForOutboundEncodedMessages"`
	// The value indicating whether to enable NRR for outbound MDN.
	EnableNrrForOutboundMdn *bool `pulumi:"enableNrrForOutboundMdn"`
	// The name of the encryption certificate.
	EncryptionCertificateName *string `pulumi:"encryptionCertificateName"`
	// The value indicating whether to send or request a MDN.
	OverrideGroupSigningCertificate *bool `pulumi:"overrideGroupSigningCertificate"`
	// The name of the signing certificate.
	SigningCertificateName *string `pulumi:"signingCertificateName"`
}

type AS2SecuritySettingsResponseOutput struct{ *pulumi.OutputState }

func (AS2SecuritySettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2SecuritySettingsResponse)(nil)).Elem()
}

func (o AS2SecuritySettingsResponseOutput) ToAS2SecuritySettingsResponseOutput() AS2SecuritySettingsResponseOutput {
	return o
}

func (o AS2SecuritySettingsResponseOutput) ToAS2SecuritySettingsResponseOutputWithContext(ctx context.Context) AS2SecuritySettingsResponseOutput {
	return o
}

func (o AS2SecuritySettingsResponseOutput) ToAS2SecuritySettingsResponsePtrOutput() AS2SecuritySettingsResponsePtrOutput {
	return o.ToAS2SecuritySettingsResponsePtrOutputWithContext(context.Background())
}

func (o AS2SecuritySettingsResponseOutput) ToAS2SecuritySettingsResponsePtrOutputWithContext(ctx context.Context) AS2SecuritySettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2SecuritySettingsResponse) *AS2SecuritySettingsResponse {
		return &v
	}).(AS2SecuritySettingsResponsePtrOutput)
}

// The value indicating whether to enable NRR for inbound decoded messages.
func (o AS2SecuritySettingsResponseOutput) EnableNrrForInboundDecodedMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2SecuritySettingsResponse) *bool { return v.EnableNrrForInboundDecodedMessages }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable NRR for inbound encoded messages.
func (o AS2SecuritySettingsResponseOutput) EnableNrrForInboundEncodedMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2SecuritySettingsResponse) *bool { return v.EnableNrrForInboundEncodedMessages }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable NRR for inbound MDN.
func (o AS2SecuritySettingsResponseOutput) EnableNrrForInboundMdn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2SecuritySettingsResponse) *bool { return v.EnableNrrForInboundMdn }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable NRR for outbound decoded messages.
func (o AS2SecuritySettingsResponseOutput) EnableNrrForOutboundDecodedMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2SecuritySettingsResponse) *bool { return v.EnableNrrForOutboundDecodedMessages }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable NRR for outbound encoded messages.
func (o AS2SecuritySettingsResponseOutput) EnableNrrForOutboundEncodedMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2SecuritySettingsResponse) *bool { return v.EnableNrrForOutboundEncodedMessages }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable NRR for outbound MDN.
func (o AS2SecuritySettingsResponseOutput) EnableNrrForOutboundMdn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2SecuritySettingsResponse) *bool { return v.EnableNrrForOutboundMdn }).(pulumi.BoolPtrOutput)
}

// The name of the encryption certificate.
func (o AS2SecuritySettingsResponseOutput) EncryptionCertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AS2SecuritySettingsResponse) *string { return v.EncryptionCertificateName }).(pulumi.StringPtrOutput)
}

// The value indicating whether to send or request a MDN.
func (o AS2SecuritySettingsResponseOutput) OverrideGroupSigningCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2SecuritySettingsResponse) *bool { return v.OverrideGroupSigningCertificate }).(pulumi.BoolPtrOutput)
}

// The name of the signing certificate.
func (o AS2SecuritySettingsResponseOutput) SigningCertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AS2SecuritySettingsResponse) *string { return v.SigningCertificateName }).(pulumi.StringPtrOutput)
}

type AS2SecuritySettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AS2SecuritySettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2SecuritySettingsResponse)(nil)).Elem()
}

func (o AS2SecuritySettingsResponsePtrOutput) ToAS2SecuritySettingsResponsePtrOutput() AS2SecuritySettingsResponsePtrOutput {
	return o
}

func (o AS2SecuritySettingsResponsePtrOutput) ToAS2SecuritySettingsResponsePtrOutputWithContext(ctx context.Context) AS2SecuritySettingsResponsePtrOutput {
	return o
}

func (o AS2SecuritySettingsResponsePtrOutput) Elem() AS2SecuritySettingsResponseOutput {
	return o.ApplyT(func(v *AS2SecuritySettingsResponse) AS2SecuritySettingsResponse { return *v }).(AS2SecuritySettingsResponseOutput)
}

// The value indicating whether to enable NRR for inbound decoded messages.
func (o AS2SecuritySettingsResponsePtrOutput) EnableNrrForInboundDecodedMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNrrForInboundDecodedMessages
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable NRR for inbound encoded messages.
func (o AS2SecuritySettingsResponsePtrOutput) EnableNrrForInboundEncodedMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNrrForInboundEncodedMessages
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable NRR for inbound MDN.
func (o AS2SecuritySettingsResponsePtrOutput) EnableNrrForInboundMdn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNrrForInboundMdn
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable NRR for outbound decoded messages.
func (o AS2SecuritySettingsResponsePtrOutput) EnableNrrForOutboundDecodedMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNrrForOutboundDecodedMessages
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable NRR for outbound encoded messages.
func (o AS2SecuritySettingsResponsePtrOutput) EnableNrrForOutboundEncodedMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNrrForOutboundEncodedMessages
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable NRR for outbound MDN.
func (o AS2SecuritySettingsResponsePtrOutput) EnableNrrForOutboundMdn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNrrForOutboundMdn
	}).(pulumi.BoolPtrOutput)
}

// The name of the encryption certificate.
func (o AS2SecuritySettingsResponsePtrOutput) EncryptionCertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionCertificateName
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to send or request a MDN.
func (o AS2SecuritySettingsResponsePtrOutput) OverrideGroupSigningCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.OverrideGroupSigningCertificate
	}).(pulumi.BoolPtrOutput)
}

// The name of the signing certificate.
func (o AS2SecuritySettingsResponsePtrOutput) SigningCertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2SecuritySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.SigningCertificateName
	}).(pulumi.StringPtrOutput)
}

type AS2ValidationSettings struct {
	// The value indicating whether to check for certificate revocation list on receive.
	CheckCertificateRevocationListOnReceive *bool `pulumi:"checkCertificateRevocationListOnReceive"`
	// The value indicating whether to check for certificate revocation list on send.
	CheckCertificateRevocationListOnSend *bool `pulumi:"checkCertificateRevocationListOnSend"`
	// The value indicating whether to check for duplicate message.
	CheckDuplicateMessage *bool `pulumi:"checkDuplicateMessage"`
	// The value indicating whether the message has to be compressed.
	CompressMessage *bool `pulumi:"compressMessage"`
	// The value indicating whether the message has to be encrypted.
	EncryptMessage *bool `pulumi:"encryptMessage"`
	// The encryption algorithm.
	EncryptionAlgorithm *string `pulumi:"encryptionAlgorithm"`
	// The number of days to look back for duplicate interchange.
	InterchangeDuplicatesValidityDays *int `pulumi:"interchangeDuplicatesValidityDays"`
	// The value indicating whether to override incoming message properties with those in agreement.
	OverrideMessageProperties *bool `pulumi:"overrideMessageProperties"`
	// The value indicating whether the message has to be signed.
	SignMessage *bool `pulumi:"signMessage"`
}

// AS2ValidationSettingsInput is an input type that accepts AS2ValidationSettingsArgs and AS2ValidationSettingsOutput values.
// You can construct a concrete instance of `AS2ValidationSettingsInput` via:
//
//          AS2ValidationSettingsArgs{...}
type AS2ValidationSettingsInput interface {
	pulumi.Input

	ToAS2ValidationSettingsOutput() AS2ValidationSettingsOutput
	ToAS2ValidationSettingsOutputWithContext(context.Context) AS2ValidationSettingsOutput
}

type AS2ValidationSettingsArgs struct {
	// The value indicating whether to check for certificate revocation list on receive.
	CheckCertificateRevocationListOnReceive pulumi.BoolPtrInput `pulumi:"checkCertificateRevocationListOnReceive"`
	// The value indicating whether to check for certificate revocation list on send.
	CheckCertificateRevocationListOnSend pulumi.BoolPtrInput `pulumi:"checkCertificateRevocationListOnSend"`
	// The value indicating whether to check for duplicate message.
	CheckDuplicateMessage pulumi.BoolPtrInput `pulumi:"checkDuplicateMessage"`
	// The value indicating whether the message has to be compressed.
	CompressMessage pulumi.BoolPtrInput `pulumi:"compressMessage"`
	// The value indicating whether the message has to be encrypted.
	EncryptMessage pulumi.BoolPtrInput `pulumi:"encryptMessage"`
	// The encryption algorithm.
	EncryptionAlgorithm pulumi.StringPtrInput `pulumi:"encryptionAlgorithm"`
	// The number of days to look back for duplicate interchange.
	InterchangeDuplicatesValidityDays pulumi.IntPtrInput `pulumi:"interchangeDuplicatesValidityDays"`
	// The value indicating whether to override incoming message properties with those in agreement.
	OverrideMessageProperties pulumi.BoolPtrInput `pulumi:"overrideMessageProperties"`
	// The value indicating whether the message has to be signed.
	SignMessage pulumi.BoolPtrInput `pulumi:"signMessage"`
}

func (AS2ValidationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2ValidationSettings)(nil)).Elem()
}

func (i AS2ValidationSettingsArgs) ToAS2ValidationSettingsOutput() AS2ValidationSettingsOutput {
	return i.ToAS2ValidationSettingsOutputWithContext(context.Background())
}

func (i AS2ValidationSettingsArgs) ToAS2ValidationSettingsOutputWithContext(ctx context.Context) AS2ValidationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ValidationSettingsOutput)
}

func (i AS2ValidationSettingsArgs) ToAS2ValidationSettingsPtrOutput() AS2ValidationSettingsPtrOutput {
	return i.ToAS2ValidationSettingsPtrOutputWithContext(context.Background())
}

func (i AS2ValidationSettingsArgs) ToAS2ValidationSettingsPtrOutputWithContext(ctx context.Context) AS2ValidationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ValidationSettingsOutput).ToAS2ValidationSettingsPtrOutputWithContext(ctx)
}

// AS2ValidationSettingsPtrInput is an input type that accepts AS2ValidationSettingsArgs, AS2ValidationSettingsPtr and AS2ValidationSettingsPtrOutput values.
// You can construct a concrete instance of `AS2ValidationSettingsPtrInput` via:
//
//          AS2ValidationSettingsArgs{...}
//
//  or:
//
//          nil
type AS2ValidationSettingsPtrInput interface {
	pulumi.Input

	ToAS2ValidationSettingsPtrOutput() AS2ValidationSettingsPtrOutput
	ToAS2ValidationSettingsPtrOutputWithContext(context.Context) AS2ValidationSettingsPtrOutput
}

type as2validationSettingsPtrType AS2ValidationSettingsArgs

func AS2ValidationSettingsPtr(v *AS2ValidationSettingsArgs) AS2ValidationSettingsPtrInput {
	return (*as2validationSettingsPtrType)(v)
}

func (*as2validationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2ValidationSettings)(nil)).Elem()
}

func (i *as2validationSettingsPtrType) ToAS2ValidationSettingsPtrOutput() AS2ValidationSettingsPtrOutput {
	return i.ToAS2ValidationSettingsPtrOutputWithContext(context.Background())
}

func (i *as2validationSettingsPtrType) ToAS2ValidationSettingsPtrOutputWithContext(ctx context.Context) AS2ValidationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AS2ValidationSettingsPtrOutput)
}

type AS2ValidationSettingsResponse struct {
	// The value indicating whether to check for certificate revocation list on receive.
	CheckCertificateRevocationListOnReceive *bool `pulumi:"checkCertificateRevocationListOnReceive"`
	// The value indicating whether to check for certificate revocation list on send.
	CheckCertificateRevocationListOnSend *bool `pulumi:"checkCertificateRevocationListOnSend"`
	// The value indicating whether to check for duplicate message.
	CheckDuplicateMessage *bool `pulumi:"checkDuplicateMessage"`
	// The value indicating whether the message has to be compressed.
	CompressMessage *bool `pulumi:"compressMessage"`
	// The value indicating whether the message has to be encrypted.
	EncryptMessage *bool `pulumi:"encryptMessage"`
	// The encryption algorithm.
	EncryptionAlgorithm *string `pulumi:"encryptionAlgorithm"`
	// The number of days to look back for duplicate interchange.
	InterchangeDuplicatesValidityDays *int `pulumi:"interchangeDuplicatesValidityDays"`
	// The value indicating whether to override incoming message properties with those in agreement.
	OverrideMessageProperties *bool `pulumi:"overrideMessageProperties"`
	// The value indicating whether the message has to be signed.
	SignMessage *bool `pulumi:"signMessage"`
}

type AS2ValidationSettingsResponseOutput struct{ *pulumi.OutputState }

func (AS2ValidationSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AS2ValidationSettingsResponse)(nil)).Elem()
}

func (o AS2ValidationSettingsResponseOutput) ToAS2ValidationSettingsResponseOutput() AS2ValidationSettingsResponseOutput {
	return o
}

func (o AS2ValidationSettingsResponseOutput) ToAS2ValidationSettingsResponseOutputWithContext(ctx context.Context) AS2ValidationSettingsResponseOutput {
	return o
}

func (o AS2ValidationSettingsResponseOutput) ToAS2ValidationSettingsResponsePtrOutput() AS2ValidationSettingsResponsePtrOutput {
	return o.ToAS2ValidationSettingsResponsePtrOutputWithContext(context.Background())
}

func (o AS2ValidationSettingsResponseOutput) ToAS2ValidationSettingsResponsePtrOutputWithContext(ctx context.Context) AS2ValidationSettingsResponsePtrOutput {
	return o.ApplyT(func(v AS2ValidationSettingsResponse) *AS2ValidationSettingsResponse {
		return &v
	}).(AS2ValidationSettingsResponsePtrOutput)
}

// The value indicating whether to check for certificate revocation list on receive.
func (o AS2ValidationSettingsResponseOutput) CheckCertificateRevocationListOnReceive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2ValidationSettingsResponse) *bool { return v.CheckCertificateRevocationListOnReceive }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for certificate revocation list on send.
func (o AS2ValidationSettingsResponseOutput) CheckCertificateRevocationListOnSend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2ValidationSettingsResponse) *bool { return v.CheckCertificateRevocationListOnSend }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate message.
func (o AS2ValidationSettingsResponseOutput) CheckDuplicateMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2ValidationSettingsResponse) *bool { return v.CheckDuplicateMessage }).(pulumi.BoolPtrOutput)
}

// The value indicating whether the message has to be compressed.
func (o AS2ValidationSettingsResponseOutput) CompressMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2ValidationSettingsResponse) *bool { return v.CompressMessage }).(pulumi.BoolPtrOutput)
}

// The value indicating whether the message has to be encrypted.
func (o AS2ValidationSettingsResponseOutput) EncryptMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2ValidationSettingsResponse) *bool { return v.EncryptMessage }).(pulumi.BoolPtrOutput)
}

// The encryption algorithm.
func (o AS2ValidationSettingsResponseOutput) EncryptionAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AS2ValidationSettingsResponse) *string { return v.EncryptionAlgorithm }).(pulumi.StringPtrOutput)
}

// The number of days to look back for duplicate interchange.
func (o AS2ValidationSettingsResponseOutput) InterchangeDuplicatesValidityDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AS2ValidationSettingsResponse) *int { return v.InterchangeDuplicatesValidityDays }).(pulumi.IntPtrOutput)
}

// The value indicating whether to override incoming message properties with those in agreement.
func (o AS2ValidationSettingsResponseOutput) OverrideMessageProperties() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2ValidationSettingsResponse) *bool { return v.OverrideMessageProperties }).(pulumi.BoolPtrOutput)
}

// The value indicating whether the message has to be signed.
func (o AS2ValidationSettingsResponseOutput) SignMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AS2ValidationSettingsResponse) *bool { return v.SignMessage }).(pulumi.BoolPtrOutput)
}

type AS2ValidationSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AS2ValidationSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AS2ValidationSettingsResponse)(nil)).Elem()
}

func (o AS2ValidationSettingsResponsePtrOutput) ToAS2ValidationSettingsResponsePtrOutput() AS2ValidationSettingsResponsePtrOutput {
	return o
}

func (o AS2ValidationSettingsResponsePtrOutput) ToAS2ValidationSettingsResponsePtrOutputWithContext(ctx context.Context) AS2ValidationSettingsResponsePtrOutput {
	return o
}

func (o AS2ValidationSettingsResponsePtrOutput) Elem() AS2ValidationSettingsResponseOutput {
	return o.ApplyT(func(v *AS2ValidationSettingsResponse) AS2ValidationSettingsResponse { return *v }).(AS2ValidationSettingsResponseOutput)
}

// The value indicating whether to check for certificate revocation list on receive.
func (o AS2ValidationSettingsResponsePtrOutput) CheckCertificateRevocationListOnReceive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CheckCertificateRevocationListOnReceive
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for certificate revocation list on send.
func (o AS2ValidationSettingsResponsePtrOutput) CheckCertificateRevocationListOnSend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CheckCertificateRevocationListOnSend
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate message.
func (o AS2ValidationSettingsResponsePtrOutput) CheckDuplicateMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CheckDuplicateMessage
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether the message has to be compressed.
func (o AS2ValidationSettingsResponsePtrOutput) CompressMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CompressMessage
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether the message has to be encrypted.
func (o AS2ValidationSettingsResponsePtrOutput) EncryptMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptMessage
	}).(pulumi.BoolPtrOutput)
}

// The encryption algorithm.
func (o AS2ValidationSettingsResponsePtrOutput) EncryptionAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionAlgorithm
	}).(pulumi.StringPtrOutput)
}

// The number of days to look back for duplicate interchange.
func (o AS2ValidationSettingsResponsePtrOutput) InterchangeDuplicatesValidityDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.InterchangeDuplicatesValidityDays
	}).(pulumi.IntPtrOutput)
}

// The value indicating whether to override incoming message properties with those in agreement.
func (o AS2ValidationSettingsResponsePtrOutput) OverrideMessageProperties() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.OverrideMessageProperties
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether the message has to be signed.
func (o AS2ValidationSettingsResponsePtrOutput) SignMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AS2ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SignMessage
	}).(pulumi.BoolPtrOutput)
}

type AgreementContent struct {
	// The AS2 agreement content.
	AS2 *AS2AgreementContent `pulumi:"aS2"`
	// The EDIFACT agreement content.
	Edifact *EdifactAgreementContent `pulumi:"edifact"`
	// The X12 agreement content.
	X12 *X12AgreementContent `pulumi:"x12"`
}

// AgreementContentInput is an input type that accepts AgreementContentArgs and AgreementContentOutput values.
// You can construct a concrete instance of `AgreementContentInput` via:
//
//          AgreementContentArgs{...}
type AgreementContentInput interface {
	pulumi.Input

	ToAgreementContentOutput() AgreementContentOutput
	ToAgreementContentOutputWithContext(context.Context) AgreementContentOutput
}

type AgreementContentArgs struct {
	// The AS2 agreement content.
	AS2 AS2AgreementContentPtrInput `pulumi:"aS2"`
	// The EDIFACT agreement content.
	Edifact EdifactAgreementContentPtrInput `pulumi:"edifact"`
	// The X12 agreement content.
	X12 X12AgreementContentPtrInput `pulumi:"x12"`
}

func (AgreementContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgreementContent)(nil)).Elem()
}

func (i AgreementContentArgs) ToAgreementContentOutput() AgreementContentOutput {
	return i.ToAgreementContentOutputWithContext(context.Background())
}

func (i AgreementContentArgs) ToAgreementContentOutputWithContext(ctx context.Context) AgreementContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgreementContentOutput)
}

func (i AgreementContentArgs) ToAgreementContentPtrOutput() AgreementContentPtrOutput {
	return i.ToAgreementContentPtrOutputWithContext(context.Background())
}

func (i AgreementContentArgs) ToAgreementContentPtrOutputWithContext(ctx context.Context) AgreementContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgreementContentOutput).ToAgreementContentPtrOutputWithContext(ctx)
}

// AgreementContentPtrInput is an input type that accepts AgreementContentArgs, AgreementContentPtr and AgreementContentPtrOutput values.
// You can construct a concrete instance of `AgreementContentPtrInput` via:
//
//          AgreementContentArgs{...}
//
//  or:
//
//          nil
type AgreementContentPtrInput interface {
	pulumi.Input

	ToAgreementContentPtrOutput() AgreementContentPtrOutput
	ToAgreementContentPtrOutputWithContext(context.Context) AgreementContentPtrOutput
}

type agreementContentPtrType AgreementContentArgs

func AgreementContentPtr(v *AgreementContentArgs) AgreementContentPtrInput {
	return (*agreementContentPtrType)(v)
}

func (*agreementContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AgreementContent)(nil)).Elem()
}

func (i *agreementContentPtrType) ToAgreementContentPtrOutput() AgreementContentPtrOutput {
	return i.ToAgreementContentPtrOutputWithContext(context.Background())
}

func (i *agreementContentPtrType) ToAgreementContentPtrOutputWithContext(ctx context.Context) AgreementContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgreementContentPtrOutput)
}

type AgreementContentResponse struct {
	// The AS2 agreement content.
	AS2 *AS2AgreementContentResponse `pulumi:"aS2"`
	// The EDIFACT agreement content.
	Edifact *EdifactAgreementContentResponse `pulumi:"edifact"`
	// The X12 agreement content.
	X12 *X12AgreementContentResponse `pulumi:"x12"`
}

type AgreementContentResponseOutput struct{ *pulumi.OutputState }

func (AgreementContentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgreementContentResponse)(nil)).Elem()
}

func (o AgreementContentResponseOutput) ToAgreementContentResponseOutput() AgreementContentResponseOutput {
	return o
}

func (o AgreementContentResponseOutput) ToAgreementContentResponseOutputWithContext(ctx context.Context) AgreementContentResponseOutput {
	return o
}

func (o AgreementContentResponseOutput) ToAgreementContentResponsePtrOutput() AgreementContentResponsePtrOutput {
	return o.ToAgreementContentResponsePtrOutputWithContext(context.Background())
}

func (o AgreementContentResponseOutput) ToAgreementContentResponsePtrOutputWithContext(ctx context.Context) AgreementContentResponsePtrOutput {
	return o.ApplyT(func(v AgreementContentResponse) *AgreementContentResponse {
		return &v
	}).(AgreementContentResponsePtrOutput)
}

// The AS2 agreement content.
func (o AgreementContentResponseOutput) AS2() AS2AgreementContentResponsePtrOutput {
	return o.ApplyT(func(v AgreementContentResponse) *AS2AgreementContentResponse { return v.AS2 }).(AS2AgreementContentResponsePtrOutput)
}

// The EDIFACT agreement content.
func (o AgreementContentResponseOutput) Edifact() EdifactAgreementContentResponsePtrOutput {
	return o.ApplyT(func(v AgreementContentResponse) *EdifactAgreementContentResponse { return v.Edifact }).(EdifactAgreementContentResponsePtrOutput)
}

// The X12 agreement content.
func (o AgreementContentResponseOutput) X12() X12AgreementContentResponsePtrOutput {
	return o.ApplyT(func(v AgreementContentResponse) *X12AgreementContentResponse { return v.X12 }).(X12AgreementContentResponsePtrOutput)
}

type AgreementContentResponsePtrOutput struct{ *pulumi.OutputState }

func (AgreementContentResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgreementContentResponse)(nil)).Elem()
}

func (o AgreementContentResponsePtrOutput) ToAgreementContentResponsePtrOutput() AgreementContentResponsePtrOutput {
	return o
}

func (o AgreementContentResponsePtrOutput) ToAgreementContentResponsePtrOutputWithContext(ctx context.Context) AgreementContentResponsePtrOutput {
	return o
}

func (o AgreementContentResponsePtrOutput) Elem() AgreementContentResponseOutput {
	return o.ApplyT(func(v *AgreementContentResponse) AgreementContentResponse { return *v }).(AgreementContentResponseOutput)
}

// The AS2 agreement content.
func (o AgreementContentResponsePtrOutput) AS2() AS2AgreementContentResponsePtrOutput {
	return o.ApplyT(func(v *AgreementContentResponse) *AS2AgreementContentResponse {
		if v == nil {
			return nil
		}
		return v.AS2
	}).(AS2AgreementContentResponsePtrOutput)
}

// The EDIFACT agreement content.
func (o AgreementContentResponsePtrOutput) Edifact() EdifactAgreementContentResponsePtrOutput {
	return o.ApplyT(func(v *AgreementContentResponse) *EdifactAgreementContentResponse {
		if v == nil {
			return nil
		}
		return v.Edifact
	}).(EdifactAgreementContentResponsePtrOutput)
}

// The X12 agreement content.
func (o AgreementContentResponsePtrOutput) X12() X12AgreementContentResponsePtrOutput {
	return o.ApplyT(func(v *AgreementContentResponse) *X12AgreementContentResponse {
		if v == nil {
			return nil
		}
		return v.X12
	}).(X12AgreementContentResponsePtrOutput)
}

type B2BPartnerContent struct {
	// The list of partner business identities.
	BusinessIdentities []BusinessIdentity `pulumi:"businessIdentities"`
}

// B2BPartnerContentInput is an input type that accepts B2BPartnerContentArgs and B2BPartnerContentOutput values.
// You can construct a concrete instance of `B2BPartnerContentInput` via:
//
//          B2BPartnerContentArgs{...}
type B2BPartnerContentInput interface {
	pulumi.Input

	ToB2BPartnerContentOutput() B2BPartnerContentOutput
	ToB2BPartnerContentOutputWithContext(context.Context) B2BPartnerContentOutput
}

type B2BPartnerContentArgs struct {
	// The list of partner business identities.
	BusinessIdentities BusinessIdentityArrayInput `pulumi:"businessIdentities"`
}

func (B2BPartnerContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*B2BPartnerContent)(nil)).Elem()
}

func (i B2BPartnerContentArgs) ToB2BPartnerContentOutput() B2BPartnerContentOutput {
	return i.ToB2BPartnerContentOutputWithContext(context.Background())
}

func (i B2BPartnerContentArgs) ToB2BPartnerContentOutputWithContext(ctx context.Context) B2BPartnerContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(B2BPartnerContentOutput)
}

func (i B2BPartnerContentArgs) ToB2BPartnerContentPtrOutput() B2BPartnerContentPtrOutput {
	return i.ToB2BPartnerContentPtrOutputWithContext(context.Background())
}

func (i B2BPartnerContentArgs) ToB2BPartnerContentPtrOutputWithContext(ctx context.Context) B2BPartnerContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(B2BPartnerContentOutput).ToB2BPartnerContentPtrOutputWithContext(ctx)
}

// B2BPartnerContentPtrInput is an input type that accepts B2BPartnerContentArgs, B2BPartnerContentPtr and B2BPartnerContentPtrOutput values.
// You can construct a concrete instance of `B2BPartnerContentPtrInput` via:
//
//          B2BPartnerContentArgs{...}
//
//  or:
//
//          nil
type B2BPartnerContentPtrInput interface {
	pulumi.Input

	ToB2BPartnerContentPtrOutput() B2BPartnerContentPtrOutput
	ToB2BPartnerContentPtrOutputWithContext(context.Context) B2BPartnerContentPtrOutput
}

type b2bpartnerContentPtrType B2BPartnerContentArgs

func B2BPartnerContentPtr(v *B2BPartnerContentArgs) B2BPartnerContentPtrInput {
	return (*b2bpartnerContentPtrType)(v)
}

func (*b2bpartnerContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**B2BPartnerContent)(nil)).Elem()
}

func (i *b2bpartnerContentPtrType) ToB2BPartnerContentPtrOutput() B2BPartnerContentPtrOutput {
	return i.ToB2BPartnerContentPtrOutputWithContext(context.Background())
}

func (i *b2bpartnerContentPtrType) ToB2BPartnerContentPtrOutputWithContext(ctx context.Context) B2BPartnerContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(B2BPartnerContentPtrOutput)
}

type B2BPartnerContentResponse struct {
	// The list of partner business identities.
	BusinessIdentities []BusinessIdentityResponse `pulumi:"businessIdentities"`
}

type B2BPartnerContentResponseOutput struct{ *pulumi.OutputState }

func (B2BPartnerContentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*B2BPartnerContentResponse)(nil)).Elem()
}

func (o B2BPartnerContentResponseOutput) ToB2BPartnerContentResponseOutput() B2BPartnerContentResponseOutput {
	return o
}

func (o B2BPartnerContentResponseOutput) ToB2BPartnerContentResponseOutputWithContext(ctx context.Context) B2BPartnerContentResponseOutput {
	return o
}

func (o B2BPartnerContentResponseOutput) ToB2BPartnerContentResponsePtrOutput() B2BPartnerContentResponsePtrOutput {
	return o.ToB2BPartnerContentResponsePtrOutputWithContext(context.Background())
}

func (o B2BPartnerContentResponseOutput) ToB2BPartnerContentResponsePtrOutputWithContext(ctx context.Context) B2BPartnerContentResponsePtrOutput {
	return o.ApplyT(func(v B2BPartnerContentResponse) *B2BPartnerContentResponse {
		return &v
	}).(B2BPartnerContentResponsePtrOutput)
}

// The list of partner business identities.
func (o B2BPartnerContentResponseOutput) BusinessIdentities() BusinessIdentityResponseArrayOutput {
	return o.ApplyT(func(v B2BPartnerContentResponse) []BusinessIdentityResponse { return v.BusinessIdentities }).(BusinessIdentityResponseArrayOutput)
}

type B2BPartnerContentResponsePtrOutput struct{ *pulumi.OutputState }

func (B2BPartnerContentResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**B2BPartnerContentResponse)(nil)).Elem()
}

func (o B2BPartnerContentResponsePtrOutput) ToB2BPartnerContentResponsePtrOutput() B2BPartnerContentResponsePtrOutput {
	return o
}

func (o B2BPartnerContentResponsePtrOutput) ToB2BPartnerContentResponsePtrOutputWithContext(ctx context.Context) B2BPartnerContentResponsePtrOutput {
	return o
}

func (o B2BPartnerContentResponsePtrOutput) Elem() B2BPartnerContentResponseOutput {
	return o.ApplyT(func(v *B2BPartnerContentResponse) B2BPartnerContentResponse { return *v }).(B2BPartnerContentResponseOutput)
}

// The list of partner business identities.
func (o B2BPartnerContentResponsePtrOutput) BusinessIdentities() BusinessIdentityResponseArrayOutput {
	return o.ApplyT(func(v *B2BPartnerContentResponse) []BusinessIdentityResponse {
		if v == nil {
			return nil
		}
		return v.BusinessIdentities
	}).(BusinessIdentityResponseArrayOutput)
}

type BusinessIdentity struct {
	// The business identity qualifier.
	Qualifier *string `pulumi:"qualifier"`
	// The business identity value.
	Value *string `pulumi:"value"`
}

// BusinessIdentityInput is an input type that accepts BusinessIdentityArgs and BusinessIdentityOutput values.
// You can construct a concrete instance of `BusinessIdentityInput` via:
//
//          BusinessIdentityArgs{...}
type BusinessIdentityInput interface {
	pulumi.Input

	ToBusinessIdentityOutput() BusinessIdentityOutput
	ToBusinessIdentityOutputWithContext(context.Context) BusinessIdentityOutput
}

type BusinessIdentityArgs struct {
	// The business identity qualifier.
	Qualifier pulumi.StringPtrInput `pulumi:"qualifier"`
	// The business identity value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (BusinessIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessIdentity)(nil)).Elem()
}

func (i BusinessIdentityArgs) ToBusinessIdentityOutput() BusinessIdentityOutput {
	return i.ToBusinessIdentityOutputWithContext(context.Background())
}

func (i BusinessIdentityArgs) ToBusinessIdentityOutputWithContext(ctx context.Context) BusinessIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessIdentityOutput)
}

func (i BusinessIdentityArgs) ToBusinessIdentityPtrOutput() BusinessIdentityPtrOutput {
	return i.ToBusinessIdentityPtrOutputWithContext(context.Background())
}

func (i BusinessIdentityArgs) ToBusinessIdentityPtrOutputWithContext(ctx context.Context) BusinessIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessIdentityOutput).ToBusinessIdentityPtrOutputWithContext(ctx)
}

// BusinessIdentityPtrInput is an input type that accepts BusinessIdentityArgs, BusinessIdentityPtr and BusinessIdentityPtrOutput values.
// You can construct a concrete instance of `BusinessIdentityPtrInput` via:
//
//          BusinessIdentityArgs{...}
//
//  or:
//
//          nil
type BusinessIdentityPtrInput interface {
	pulumi.Input

	ToBusinessIdentityPtrOutput() BusinessIdentityPtrOutput
	ToBusinessIdentityPtrOutputWithContext(context.Context) BusinessIdentityPtrOutput
}

type businessIdentityPtrType BusinessIdentityArgs

func BusinessIdentityPtr(v *BusinessIdentityArgs) BusinessIdentityPtrInput {
	return (*businessIdentityPtrType)(v)
}

func (*businessIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessIdentity)(nil)).Elem()
}

func (i *businessIdentityPtrType) ToBusinessIdentityPtrOutput() BusinessIdentityPtrOutput {
	return i.ToBusinessIdentityPtrOutputWithContext(context.Background())
}

func (i *businessIdentityPtrType) ToBusinessIdentityPtrOutputWithContext(ctx context.Context) BusinessIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessIdentityPtrOutput)
}

// BusinessIdentityArrayInput is an input type that accepts BusinessIdentityArray and BusinessIdentityArrayOutput values.
// You can construct a concrete instance of `BusinessIdentityArrayInput` via:
//
//          BusinessIdentityArray{ BusinessIdentityArgs{...} }
type BusinessIdentityArrayInput interface {
	pulumi.Input

	ToBusinessIdentityArrayOutput() BusinessIdentityArrayOutput
	ToBusinessIdentityArrayOutputWithContext(context.Context) BusinessIdentityArrayOutput
}

type BusinessIdentityArray []BusinessIdentityInput

func (BusinessIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BusinessIdentity)(nil)).Elem()
}

func (i BusinessIdentityArray) ToBusinessIdentityArrayOutput() BusinessIdentityArrayOutput {
	return i.ToBusinessIdentityArrayOutputWithContext(context.Background())
}

func (i BusinessIdentityArray) ToBusinessIdentityArrayOutputWithContext(ctx context.Context) BusinessIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BusinessIdentityArrayOutput)
}

type BusinessIdentityResponse struct {
	// The business identity qualifier.
	Qualifier *string `pulumi:"qualifier"`
	// The business identity value.
	Value *string `pulumi:"value"`
}

type BusinessIdentityResponseOutput struct{ *pulumi.OutputState }

func (BusinessIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BusinessIdentityResponse)(nil)).Elem()
}

func (o BusinessIdentityResponseOutput) ToBusinessIdentityResponseOutput() BusinessIdentityResponseOutput {
	return o
}

func (o BusinessIdentityResponseOutput) ToBusinessIdentityResponseOutputWithContext(ctx context.Context) BusinessIdentityResponseOutput {
	return o
}

func (o BusinessIdentityResponseOutput) ToBusinessIdentityResponsePtrOutput() BusinessIdentityResponsePtrOutput {
	return o.ToBusinessIdentityResponsePtrOutputWithContext(context.Background())
}

func (o BusinessIdentityResponseOutput) ToBusinessIdentityResponsePtrOutputWithContext(ctx context.Context) BusinessIdentityResponsePtrOutput {
	return o.ApplyT(func(v BusinessIdentityResponse) *BusinessIdentityResponse {
		return &v
	}).(BusinessIdentityResponsePtrOutput)
}

// The business identity qualifier.
func (o BusinessIdentityResponseOutput) Qualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusinessIdentityResponse) *string { return v.Qualifier }).(pulumi.StringPtrOutput)
}

// The business identity value.
func (o BusinessIdentityResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BusinessIdentityResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type BusinessIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (BusinessIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BusinessIdentityResponse)(nil)).Elem()
}

func (o BusinessIdentityResponsePtrOutput) ToBusinessIdentityResponsePtrOutput() BusinessIdentityResponsePtrOutput {
	return o
}

func (o BusinessIdentityResponsePtrOutput) ToBusinessIdentityResponsePtrOutputWithContext(ctx context.Context) BusinessIdentityResponsePtrOutput {
	return o
}

func (o BusinessIdentityResponsePtrOutput) Elem() BusinessIdentityResponseOutput {
	return o.ApplyT(func(v *BusinessIdentityResponse) BusinessIdentityResponse { return *v }).(BusinessIdentityResponseOutput)
}

// The business identity qualifier.
func (o BusinessIdentityResponsePtrOutput) Qualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusinessIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Qualifier
	}).(pulumi.StringPtrOutput)
}

// The business identity value.
func (o BusinessIdentityResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BusinessIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type BusinessIdentityResponseArrayOutput struct{ *pulumi.OutputState }

func (BusinessIdentityResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BusinessIdentityResponse)(nil)).Elem()
}

func (o BusinessIdentityResponseArrayOutput) ToBusinessIdentityResponseArrayOutput() BusinessIdentityResponseArrayOutput {
	return o
}

func (o BusinessIdentityResponseArrayOutput) ToBusinessIdentityResponseArrayOutputWithContext(ctx context.Context) BusinessIdentityResponseArrayOutput {
	return o
}

func (o BusinessIdentityResponseArrayOutput) Index(i pulumi.IntInput) BusinessIdentityResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BusinessIdentityResponse {
		return vs[0].([]BusinessIdentityResponse)[vs[1].(int)]
	}).(BusinessIdentityResponseOutput)
}

type EdifactAcknowledgementSettings struct {
	// The acknowledgement control number lower bound.
	AcknowledgementControlNumberLowerBound *int `pulumi:"acknowledgementControlNumberLowerBound"`
	// The acknowledgement control number prefix.
	AcknowledgementControlNumberPrefix *string `pulumi:"acknowledgementControlNumberPrefix"`
	// The acknowledgement control number suffix.
	AcknowledgementControlNumberSuffix *string `pulumi:"acknowledgementControlNumberSuffix"`
	// The acknowledgement control number upper bound.
	AcknowledgementControlNumberUpperBound *int `pulumi:"acknowledgementControlNumberUpperBound"`
	// The value indicating whether to batch functional acknowledgements.
	BatchFunctionalAcknowledgements *bool `pulumi:"batchFunctionalAcknowledgements"`
	// The value indicating whether to batch the technical acknowledgements.
	BatchTechnicalAcknowledgements *bool `pulumi:"batchTechnicalAcknowledgements"`
	// The value indicating whether functional acknowledgement is needed.
	NeedFunctionalAcknowledgement *bool `pulumi:"needFunctionalAcknowledgement"`
	// The value indicating whether a loop is needed for valid messages.
	NeedLoopForValidMessages *bool `pulumi:"needLoopForValidMessages"`
	// The value indicating whether technical acknowledgement is needed.
	NeedTechnicalAcknowledgement *bool `pulumi:"needTechnicalAcknowledgement"`
	// The value indicating whether to rollover acknowledgement control number.
	RolloverAcknowledgementControlNumber *bool `pulumi:"rolloverAcknowledgementControlNumber"`
	// The value indicating whether to send synchronous acknowledgement.
	SendSynchronousAcknowledgement *bool `pulumi:"sendSynchronousAcknowledgement"`
}

// EdifactAcknowledgementSettingsInput is an input type that accepts EdifactAcknowledgementSettingsArgs and EdifactAcknowledgementSettingsOutput values.
// You can construct a concrete instance of `EdifactAcknowledgementSettingsInput` via:
//
//          EdifactAcknowledgementSettingsArgs{...}
type EdifactAcknowledgementSettingsInput interface {
	pulumi.Input

	ToEdifactAcknowledgementSettingsOutput() EdifactAcknowledgementSettingsOutput
	ToEdifactAcknowledgementSettingsOutputWithContext(context.Context) EdifactAcknowledgementSettingsOutput
}

type EdifactAcknowledgementSettingsArgs struct {
	// The acknowledgement control number lower bound.
	AcknowledgementControlNumberLowerBound pulumi.IntPtrInput `pulumi:"acknowledgementControlNumberLowerBound"`
	// The acknowledgement control number prefix.
	AcknowledgementControlNumberPrefix pulumi.StringPtrInput `pulumi:"acknowledgementControlNumberPrefix"`
	// The acknowledgement control number suffix.
	AcknowledgementControlNumberSuffix pulumi.StringPtrInput `pulumi:"acknowledgementControlNumberSuffix"`
	// The acknowledgement control number upper bound.
	AcknowledgementControlNumberUpperBound pulumi.IntPtrInput `pulumi:"acknowledgementControlNumberUpperBound"`
	// The value indicating whether to batch functional acknowledgements.
	BatchFunctionalAcknowledgements pulumi.BoolPtrInput `pulumi:"batchFunctionalAcknowledgements"`
	// The value indicating whether to batch the technical acknowledgements.
	BatchTechnicalAcknowledgements pulumi.BoolPtrInput `pulumi:"batchTechnicalAcknowledgements"`
	// The value indicating whether functional acknowledgement is needed.
	NeedFunctionalAcknowledgement pulumi.BoolPtrInput `pulumi:"needFunctionalAcknowledgement"`
	// The value indicating whether a loop is needed for valid messages.
	NeedLoopForValidMessages pulumi.BoolPtrInput `pulumi:"needLoopForValidMessages"`
	// The value indicating whether technical acknowledgement is needed.
	NeedTechnicalAcknowledgement pulumi.BoolPtrInput `pulumi:"needTechnicalAcknowledgement"`
	// The value indicating whether to rollover acknowledgement control number.
	RolloverAcknowledgementControlNumber pulumi.BoolPtrInput `pulumi:"rolloverAcknowledgementControlNumber"`
	// The value indicating whether to send synchronous acknowledgement.
	SendSynchronousAcknowledgement pulumi.BoolPtrInput `pulumi:"sendSynchronousAcknowledgement"`
}

func (EdifactAcknowledgementSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactAcknowledgementSettings)(nil)).Elem()
}

func (i EdifactAcknowledgementSettingsArgs) ToEdifactAcknowledgementSettingsOutput() EdifactAcknowledgementSettingsOutput {
	return i.ToEdifactAcknowledgementSettingsOutputWithContext(context.Background())
}

func (i EdifactAcknowledgementSettingsArgs) ToEdifactAcknowledgementSettingsOutputWithContext(ctx context.Context) EdifactAcknowledgementSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactAcknowledgementSettingsOutput)
}

func (i EdifactAcknowledgementSettingsArgs) ToEdifactAcknowledgementSettingsPtrOutput() EdifactAcknowledgementSettingsPtrOutput {
	return i.ToEdifactAcknowledgementSettingsPtrOutputWithContext(context.Background())
}

func (i EdifactAcknowledgementSettingsArgs) ToEdifactAcknowledgementSettingsPtrOutputWithContext(ctx context.Context) EdifactAcknowledgementSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactAcknowledgementSettingsOutput).ToEdifactAcknowledgementSettingsPtrOutputWithContext(ctx)
}

// EdifactAcknowledgementSettingsPtrInput is an input type that accepts EdifactAcknowledgementSettingsArgs, EdifactAcknowledgementSettingsPtr and EdifactAcknowledgementSettingsPtrOutput values.
// You can construct a concrete instance of `EdifactAcknowledgementSettingsPtrInput` via:
//
//          EdifactAcknowledgementSettingsArgs{...}
//
//  or:
//
//          nil
type EdifactAcknowledgementSettingsPtrInput interface {
	pulumi.Input

	ToEdifactAcknowledgementSettingsPtrOutput() EdifactAcknowledgementSettingsPtrOutput
	ToEdifactAcknowledgementSettingsPtrOutputWithContext(context.Context) EdifactAcknowledgementSettingsPtrOutput
}

type edifactAcknowledgementSettingsPtrType EdifactAcknowledgementSettingsArgs

func EdifactAcknowledgementSettingsPtr(v *EdifactAcknowledgementSettingsArgs) EdifactAcknowledgementSettingsPtrInput {
	return (*edifactAcknowledgementSettingsPtrType)(v)
}

func (*edifactAcknowledgementSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactAcknowledgementSettings)(nil)).Elem()
}

func (i *edifactAcknowledgementSettingsPtrType) ToEdifactAcknowledgementSettingsPtrOutput() EdifactAcknowledgementSettingsPtrOutput {
	return i.ToEdifactAcknowledgementSettingsPtrOutputWithContext(context.Background())
}

func (i *edifactAcknowledgementSettingsPtrType) ToEdifactAcknowledgementSettingsPtrOutputWithContext(ctx context.Context) EdifactAcknowledgementSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactAcknowledgementSettingsPtrOutput)
}

type EdifactAcknowledgementSettingsResponse struct {
	// The acknowledgement control number lower bound.
	AcknowledgementControlNumberLowerBound *int `pulumi:"acknowledgementControlNumberLowerBound"`
	// The acknowledgement control number prefix.
	AcknowledgementControlNumberPrefix *string `pulumi:"acknowledgementControlNumberPrefix"`
	// The acknowledgement control number suffix.
	AcknowledgementControlNumberSuffix *string `pulumi:"acknowledgementControlNumberSuffix"`
	// The acknowledgement control number upper bound.
	AcknowledgementControlNumberUpperBound *int `pulumi:"acknowledgementControlNumberUpperBound"`
	// The value indicating whether to batch functional acknowledgements.
	BatchFunctionalAcknowledgements *bool `pulumi:"batchFunctionalAcknowledgements"`
	// The value indicating whether to batch the technical acknowledgements.
	BatchTechnicalAcknowledgements *bool `pulumi:"batchTechnicalAcknowledgements"`
	// The value indicating whether functional acknowledgement is needed.
	NeedFunctionalAcknowledgement *bool `pulumi:"needFunctionalAcknowledgement"`
	// The value indicating whether a loop is needed for valid messages.
	NeedLoopForValidMessages *bool `pulumi:"needLoopForValidMessages"`
	// The value indicating whether technical acknowledgement is needed.
	NeedTechnicalAcknowledgement *bool `pulumi:"needTechnicalAcknowledgement"`
	// The value indicating whether to rollover acknowledgement control number.
	RolloverAcknowledgementControlNumber *bool `pulumi:"rolloverAcknowledgementControlNumber"`
	// The value indicating whether to send synchronous acknowledgement.
	SendSynchronousAcknowledgement *bool `pulumi:"sendSynchronousAcknowledgement"`
}

type EdifactAcknowledgementSettingsResponseOutput struct{ *pulumi.OutputState }

func (EdifactAcknowledgementSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactAcknowledgementSettingsResponse)(nil)).Elem()
}

func (o EdifactAcknowledgementSettingsResponseOutput) ToEdifactAcknowledgementSettingsResponseOutput() EdifactAcknowledgementSettingsResponseOutput {
	return o
}

func (o EdifactAcknowledgementSettingsResponseOutput) ToEdifactAcknowledgementSettingsResponseOutputWithContext(ctx context.Context) EdifactAcknowledgementSettingsResponseOutput {
	return o
}

func (o EdifactAcknowledgementSettingsResponseOutput) ToEdifactAcknowledgementSettingsResponsePtrOutput() EdifactAcknowledgementSettingsResponsePtrOutput {
	return o.ToEdifactAcknowledgementSettingsResponsePtrOutputWithContext(context.Background())
}

func (o EdifactAcknowledgementSettingsResponseOutput) ToEdifactAcknowledgementSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactAcknowledgementSettingsResponsePtrOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) *EdifactAcknowledgementSettingsResponse {
		return &v
	}).(EdifactAcknowledgementSettingsResponsePtrOutput)
}

// The acknowledgement control number lower bound.
func (o EdifactAcknowledgementSettingsResponseOutput) AcknowledgementControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) *int { return v.AcknowledgementControlNumberLowerBound }).(pulumi.IntPtrOutput)
}

// The acknowledgement control number prefix.
func (o EdifactAcknowledgementSettingsResponseOutput) AcknowledgementControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) *string { return v.AcknowledgementControlNumberPrefix }).(pulumi.StringPtrOutput)
}

// The acknowledgement control number suffix.
func (o EdifactAcknowledgementSettingsResponseOutput) AcknowledgementControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) *string { return v.AcknowledgementControlNumberSuffix }).(pulumi.StringPtrOutput)
}

// The acknowledgement control number upper bound.
func (o EdifactAcknowledgementSettingsResponseOutput) AcknowledgementControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) *int { return v.AcknowledgementControlNumberUpperBound }).(pulumi.IntPtrOutput)
}

// The value indicating whether to batch functional acknowledgements.
func (o EdifactAcknowledgementSettingsResponseOutput) BatchFunctionalAcknowledgements() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) *bool { return v.BatchFunctionalAcknowledgements }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to batch the technical acknowledgements.
func (o EdifactAcknowledgementSettingsResponseOutput) BatchTechnicalAcknowledgements() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) *bool { return v.BatchTechnicalAcknowledgements }).(pulumi.BoolPtrOutput)
}

// The value indicating whether functional acknowledgement is needed.
func (o EdifactAcknowledgementSettingsResponseOutput) NeedFunctionalAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) *bool { return v.NeedFunctionalAcknowledgement }).(pulumi.BoolPtrOutput)
}

// The value indicating whether a loop is needed for valid messages.
func (o EdifactAcknowledgementSettingsResponseOutput) NeedLoopForValidMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) *bool { return v.NeedLoopForValidMessages }).(pulumi.BoolPtrOutput)
}

// The value indicating whether technical acknowledgement is needed.
func (o EdifactAcknowledgementSettingsResponseOutput) NeedTechnicalAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) *bool { return v.NeedTechnicalAcknowledgement }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover acknowledgement control number.
func (o EdifactAcknowledgementSettingsResponseOutput) RolloverAcknowledgementControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) *bool { return v.RolloverAcknowledgementControlNumber }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to send synchronous acknowledgement.
func (o EdifactAcknowledgementSettingsResponseOutput) SendSynchronousAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactAcknowledgementSettingsResponse) *bool { return v.SendSynchronousAcknowledgement }).(pulumi.BoolPtrOutput)
}

type EdifactAcknowledgementSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (EdifactAcknowledgementSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactAcknowledgementSettingsResponse)(nil)).Elem()
}

func (o EdifactAcknowledgementSettingsResponsePtrOutput) ToEdifactAcknowledgementSettingsResponsePtrOutput() EdifactAcknowledgementSettingsResponsePtrOutput {
	return o
}

func (o EdifactAcknowledgementSettingsResponsePtrOutput) ToEdifactAcknowledgementSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactAcknowledgementSettingsResponsePtrOutput {
	return o
}

func (o EdifactAcknowledgementSettingsResponsePtrOutput) Elem() EdifactAcknowledgementSettingsResponseOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) EdifactAcknowledgementSettingsResponse { return *v }).(EdifactAcknowledgementSettingsResponseOutput)
}

// The acknowledgement control number lower bound.
func (o EdifactAcknowledgementSettingsResponsePtrOutput) AcknowledgementControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.AcknowledgementControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The acknowledgement control number prefix.
func (o EdifactAcknowledgementSettingsResponsePtrOutput) AcknowledgementControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AcknowledgementControlNumberPrefix
	}).(pulumi.StringPtrOutput)
}

// The acknowledgement control number suffix.
func (o EdifactAcknowledgementSettingsResponsePtrOutput) AcknowledgementControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AcknowledgementControlNumberSuffix
	}).(pulumi.StringPtrOutput)
}

// The acknowledgement control number upper bound.
func (o EdifactAcknowledgementSettingsResponsePtrOutput) AcknowledgementControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.AcknowledgementControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

// The value indicating whether to batch functional acknowledgements.
func (o EdifactAcknowledgementSettingsResponsePtrOutput) BatchFunctionalAcknowledgements() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.BatchFunctionalAcknowledgements
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to batch the technical acknowledgements.
func (o EdifactAcknowledgementSettingsResponsePtrOutput) BatchTechnicalAcknowledgements() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.BatchTechnicalAcknowledgements
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether functional acknowledgement is needed.
func (o EdifactAcknowledgementSettingsResponsePtrOutput) NeedFunctionalAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.NeedFunctionalAcknowledgement
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether a loop is needed for valid messages.
func (o EdifactAcknowledgementSettingsResponsePtrOutput) NeedLoopForValidMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.NeedLoopForValidMessages
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether technical acknowledgement is needed.
func (o EdifactAcknowledgementSettingsResponsePtrOutput) NeedTechnicalAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.NeedTechnicalAcknowledgement
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover acknowledgement control number.
func (o EdifactAcknowledgementSettingsResponsePtrOutput) RolloverAcknowledgementControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RolloverAcknowledgementControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to send synchronous acknowledgement.
func (o EdifactAcknowledgementSettingsResponsePtrOutput) SendSynchronousAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactAcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SendSynchronousAcknowledgement
	}).(pulumi.BoolPtrOutput)
}

type EdifactAgreementContent struct {
	// The EDIFACT one-way receive agreement.
	ReceiveAgreement *EdifactOneWayAgreement `pulumi:"receiveAgreement"`
	// The EDIFACT one-way send agreement.
	SendAgreement *EdifactOneWayAgreement `pulumi:"sendAgreement"`
}

// EdifactAgreementContentInput is an input type that accepts EdifactAgreementContentArgs and EdifactAgreementContentOutput values.
// You can construct a concrete instance of `EdifactAgreementContentInput` via:
//
//          EdifactAgreementContentArgs{...}
type EdifactAgreementContentInput interface {
	pulumi.Input

	ToEdifactAgreementContentOutput() EdifactAgreementContentOutput
	ToEdifactAgreementContentOutputWithContext(context.Context) EdifactAgreementContentOutput
}

type EdifactAgreementContentArgs struct {
	// The EDIFACT one-way receive agreement.
	ReceiveAgreement EdifactOneWayAgreementPtrInput `pulumi:"receiveAgreement"`
	// The EDIFACT one-way send agreement.
	SendAgreement EdifactOneWayAgreementPtrInput `pulumi:"sendAgreement"`
}

func (EdifactAgreementContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactAgreementContent)(nil)).Elem()
}

func (i EdifactAgreementContentArgs) ToEdifactAgreementContentOutput() EdifactAgreementContentOutput {
	return i.ToEdifactAgreementContentOutputWithContext(context.Background())
}

func (i EdifactAgreementContentArgs) ToEdifactAgreementContentOutputWithContext(ctx context.Context) EdifactAgreementContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactAgreementContentOutput)
}

func (i EdifactAgreementContentArgs) ToEdifactAgreementContentPtrOutput() EdifactAgreementContentPtrOutput {
	return i.ToEdifactAgreementContentPtrOutputWithContext(context.Background())
}

func (i EdifactAgreementContentArgs) ToEdifactAgreementContentPtrOutputWithContext(ctx context.Context) EdifactAgreementContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactAgreementContentOutput).ToEdifactAgreementContentPtrOutputWithContext(ctx)
}

// EdifactAgreementContentPtrInput is an input type that accepts EdifactAgreementContentArgs, EdifactAgreementContentPtr and EdifactAgreementContentPtrOutput values.
// You can construct a concrete instance of `EdifactAgreementContentPtrInput` via:
//
//          EdifactAgreementContentArgs{...}
//
//  or:
//
//          nil
type EdifactAgreementContentPtrInput interface {
	pulumi.Input

	ToEdifactAgreementContentPtrOutput() EdifactAgreementContentPtrOutput
	ToEdifactAgreementContentPtrOutputWithContext(context.Context) EdifactAgreementContentPtrOutput
}

type edifactAgreementContentPtrType EdifactAgreementContentArgs

func EdifactAgreementContentPtr(v *EdifactAgreementContentArgs) EdifactAgreementContentPtrInput {
	return (*edifactAgreementContentPtrType)(v)
}

func (*edifactAgreementContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactAgreementContent)(nil)).Elem()
}

func (i *edifactAgreementContentPtrType) ToEdifactAgreementContentPtrOutput() EdifactAgreementContentPtrOutput {
	return i.ToEdifactAgreementContentPtrOutputWithContext(context.Background())
}

func (i *edifactAgreementContentPtrType) ToEdifactAgreementContentPtrOutputWithContext(ctx context.Context) EdifactAgreementContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactAgreementContentPtrOutput)
}

type EdifactAgreementContentResponse struct {
	// The EDIFACT one-way receive agreement.
	ReceiveAgreement *EdifactOneWayAgreementResponse `pulumi:"receiveAgreement"`
	// The EDIFACT one-way send agreement.
	SendAgreement *EdifactOneWayAgreementResponse `pulumi:"sendAgreement"`
}

type EdifactAgreementContentResponseOutput struct{ *pulumi.OutputState }

func (EdifactAgreementContentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactAgreementContentResponse)(nil)).Elem()
}

func (o EdifactAgreementContentResponseOutput) ToEdifactAgreementContentResponseOutput() EdifactAgreementContentResponseOutput {
	return o
}

func (o EdifactAgreementContentResponseOutput) ToEdifactAgreementContentResponseOutputWithContext(ctx context.Context) EdifactAgreementContentResponseOutput {
	return o
}

func (o EdifactAgreementContentResponseOutput) ToEdifactAgreementContentResponsePtrOutput() EdifactAgreementContentResponsePtrOutput {
	return o.ToEdifactAgreementContentResponsePtrOutputWithContext(context.Background())
}

func (o EdifactAgreementContentResponseOutput) ToEdifactAgreementContentResponsePtrOutputWithContext(ctx context.Context) EdifactAgreementContentResponsePtrOutput {
	return o.ApplyT(func(v EdifactAgreementContentResponse) *EdifactAgreementContentResponse {
		return &v
	}).(EdifactAgreementContentResponsePtrOutput)
}

// The EDIFACT one-way receive agreement.
func (o EdifactAgreementContentResponseOutput) ReceiveAgreement() EdifactOneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v EdifactAgreementContentResponse) *EdifactOneWayAgreementResponse { return v.ReceiveAgreement }).(EdifactOneWayAgreementResponsePtrOutput)
}

// The EDIFACT one-way send agreement.
func (o EdifactAgreementContentResponseOutput) SendAgreement() EdifactOneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v EdifactAgreementContentResponse) *EdifactOneWayAgreementResponse { return v.SendAgreement }).(EdifactOneWayAgreementResponsePtrOutput)
}

type EdifactAgreementContentResponsePtrOutput struct{ *pulumi.OutputState }

func (EdifactAgreementContentResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactAgreementContentResponse)(nil)).Elem()
}

func (o EdifactAgreementContentResponsePtrOutput) ToEdifactAgreementContentResponsePtrOutput() EdifactAgreementContentResponsePtrOutput {
	return o
}

func (o EdifactAgreementContentResponsePtrOutput) ToEdifactAgreementContentResponsePtrOutputWithContext(ctx context.Context) EdifactAgreementContentResponsePtrOutput {
	return o
}

func (o EdifactAgreementContentResponsePtrOutput) Elem() EdifactAgreementContentResponseOutput {
	return o.ApplyT(func(v *EdifactAgreementContentResponse) EdifactAgreementContentResponse { return *v }).(EdifactAgreementContentResponseOutput)
}

// The EDIFACT one-way receive agreement.
func (o EdifactAgreementContentResponsePtrOutput) ReceiveAgreement() EdifactOneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v *EdifactAgreementContentResponse) *EdifactOneWayAgreementResponse {
		if v == nil {
			return nil
		}
		return v.ReceiveAgreement
	}).(EdifactOneWayAgreementResponsePtrOutput)
}

// The EDIFACT one-way send agreement.
func (o EdifactAgreementContentResponsePtrOutput) SendAgreement() EdifactOneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v *EdifactAgreementContentResponse) *EdifactOneWayAgreementResponse {
		if v == nil {
			return nil
		}
		return v.SendAgreement
	}).(EdifactOneWayAgreementResponsePtrOutput)
}

type EdifactDelimiterOverride struct {
	// The component separator.
	ComponentSeparator *int `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator *int `pulumi:"dataElementSeparator"`
	// The decimal point indicator.
	DecimalPointIndicator *string `pulumi:"decimalPointIndicator"`
	// The message association assigned code.
	MessageAssociationAssignedCode *string `pulumi:"messageAssociationAssignedCode"`
	// The message id.
	MessageId *string `pulumi:"messageId"`
	// The message release version.
	MessageRelease *string `pulumi:"messageRelease"`
	// The message version.
	MessageVersion *string `pulumi:"messageVersion"`
	// The release indicator.
	ReleaseIndicator *int `pulumi:"releaseIndicator"`
	// The repetition separator.
	RepetitionSeparator *int `pulumi:"repetitionSeparator"`
	// The segment terminator.
	SegmentTerminator *int `pulumi:"segmentTerminator"`
	// The segment terminator suffix.
	SegmentTerminatorSuffix *string `pulumi:"segmentTerminatorSuffix"`
	// The target namespace on which this delimiter settings has to be applied.
	TargetNamespace *string `pulumi:"targetNamespace"`
}

// EdifactDelimiterOverrideInput is an input type that accepts EdifactDelimiterOverrideArgs and EdifactDelimiterOverrideOutput values.
// You can construct a concrete instance of `EdifactDelimiterOverrideInput` via:
//
//          EdifactDelimiterOverrideArgs{...}
type EdifactDelimiterOverrideInput interface {
	pulumi.Input

	ToEdifactDelimiterOverrideOutput() EdifactDelimiterOverrideOutput
	ToEdifactDelimiterOverrideOutputWithContext(context.Context) EdifactDelimiterOverrideOutput
}

type EdifactDelimiterOverrideArgs struct {
	// The component separator.
	ComponentSeparator pulumi.IntPtrInput `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator pulumi.IntPtrInput `pulumi:"dataElementSeparator"`
	// The decimal point indicator.
	DecimalPointIndicator pulumi.StringPtrInput `pulumi:"decimalPointIndicator"`
	// The message association assigned code.
	MessageAssociationAssignedCode pulumi.StringPtrInput `pulumi:"messageAssociationAssignedCode"`
	// The message id.
	MessageId pulumi.StringPtrInput `pulumi:"messageId"`
	// The message release version.
	MessageRelease pulumi.StringPtrInput `pulumi:"messageRelease"`
	// The message version.
	MessageVersion pulumi.StringPtrInput `pulumi:"messageVersion"`
	// The release indicator.
	ReleaseIndicator pulumi.IntPtrInput `pulumi:"releaseIndicator"`
	// The repetition separator.
	RepetitionSeparator pulumi.IntPtrInput `pulumi:"repetitionSeparator"`
	// The segment terminator.
	SegmentTerminator pulumi.IntPtrInput `pulumi:"segmentTerminator"`
	// The segment terminator suffix.
	SegmentTerminatorSuffix pulumi.StringPtrInput `pulumi:"segmentTerminatorSuffix"`
	// The target namespace on which this delimiter settings has to be applied.
	TargetNamespace pulumi.StringPtrInput `pulumi:"targetNamespace"`
}

func (EdifactDelimiterOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactDelimiterOverride)(nil)).Elem()
}

func (i EdifactDelimiterOverrideArgs) ToEdifactDelimiterOverrideOutput() EdifactDelimiterOverrideOutput {
	return i.ToEdifactDelimiterOverrideOutputWithContext(context.Background())
}

func (i EdifactDelimiterOverrideArgs) ToEdifactDelimiterOverrideOutputWithContext(ctx context.Context) EdifactDelimiterOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactDelimiterOverrideOutput)
}

// EdifactDelimiterOverrideArrayInput is an input type that accepts EdifactDelimiterOverrideArray and EdifactDelimiterOverrideArrayOutput values.
// You can construct a concrete instance of `EdifactDelimiterOverrideArrayInput` via:
//
//          EdifactDelimiterOverrideArray{ EdifactDelimiterOverrideArgs{...} }
type EdifactDelimiterOverrideArrayInput interface {
	pulumi.Input

	ToEdifactDelimiterOverrideArrayOutput() EdifactDelimiterOverrideArrayOutput
	ToEdifactDelimiterOverrideArrayOutputWithContext(context.Context) EdifactDelimiterOverrideArrayOutput
}

type EdifactDelimiterOverrideArray []EdifactDelimiterOverrideInput

func (EdifactDelimiterOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactDelimiterOverride)(nil)).Elem()
}

func (i EdifactDelimiterOverrideArray) ToEdifactDelimiterOverrideArrayOutput() EdifactDelimiterOverrideArrayOutput {
	return i.ToEdifactDelimiterOverrideArrayOutputWithContext(context.Background())
}

func (i EdifactDelimiterOverrideArray) ToEdifactDelimiterOverrideArrayOutputWithContext(ctx context.Context) EdifactDelimiterOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactDelimiterOverrideArrayOutput)
}

type EdifactDelimiterOverrideResponse struct {
	// The component separator.
	ComponentSeparator *int `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator *int `pulumi:"dataElementSeparator"`
	// The decimal point indicator.
	DecimalPointIndicator *string `pulumi:"decimalPointIndicator"`
	// The message association assigned code.
	MessageAssociationAssignedCode *string `pulumi:"messageAssociationAssignedCode"`
	// The message id.
	MessageId *string `pulumi:"messageId"`
	// The message release version.
	MessageRelease *string `pulumi:"messageRelease"`
	// The message version.
	MessageVersion *string `pulumi:"messageVersion"`
	// The release indicator.
	ReleaseIndicator *int `pulumi:"releaseIndicator"`
	// The repetition separator.
	RepetitionSeparator *int `pulumi:"repetitionSeparator"`
	// The segment terminator.
	SegmentTerminator *int `pulumi:"segmentTerminator"`
	// The segment terminator suffix.
	SegmentTerminatorSuffix *string `pulumi:"segmentTerminatorSuffix"`
	// The target namespace on which this delimiter settings has to be applied.
	TargetNamespace *string `pulumi:"targetNamespace"`
}

type EdifactDelimiterOverrideResponseOutput struct{ *pulumi.OutputState }

func (EdifactDelimiterOverrideResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactDelimiterOverrideResponse)(nil)).Elem()
}

func (o EdifactDelimiterOverrideResponseOutput) ToEdifactDelimiterOverrideResponseOutput() EdifactDelimiterOverrideResponseOutput {
	return o
}

func (o EdifactDelimiterOverrideResponseOutput) ToEdifactDelimiterOverrideResponseOutputWithContext(ctx context.Context) EdifactDelimiterOverrideResponseOutput {
	return o
}

// The component separator.
func (o EdifactDelimiterOverrideResponseOutput) ComponentSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) *int { return v.ComponentSeparator }).(pulumi.IntPtrOutput)
}

// The data element separator.
func (o EdifactDelimiterOverrideResponseOutput) DataElementSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) *int { return v.DataElementSeparator }).(pulumi.IntPtrOutput)
}

// The decimal point indicator.
func (o EdifactDelimiterOverrideResponseOutput) DecimalPointIndicator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) *string { return v.DecimalPointIndicator }).(pulumi.StringPtrOutput)
}

// The message association assigned code.
func (o EdifactDelimiterOverrideResponseOutput) MessageAssociationAssignedCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) *string { return v.MessageAssociationAssignedCode }).(pulumi.StringPtrOutput)
}

// The message id.
func (o EdifactDelimiterOverrideResponseOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) *string { return v.MessageId }).(pulumi.StringPtrOutput)
}

// The message release version.
func (o EdifactDelimiterOverrideResponseOutput) MessageRelease() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) *string { return v.MessageRelease }).(pulumi.StringPtrOutput)
}

// The message version.
func (o EdifactDelimiterOverrideResponseOutput) MessageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) *string { return v.MessageVersion }).(pulumi.StringPtrOutput)
}

// The release indicator.
func (o EdifactDelimiterOverrideResponseOutput) ReleaseIndicator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) *int { return v.ReleaseIndicator }).(pulumi.IntPtrOutput)
}

// The repetition separator.
func (o EdifactDelimiterOverrideResponseOutput) RepetitionSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) *int { return v.RepetitionSeparator }).(pulumi.IntPtrOutput)
}

// The segment terminator.
func (o EdifactDelimiterOverrideResponseOutput) SegmentTerminator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) *int { return v.SegmentTerminator }).(pulumi.IntPtrOutput)
}

// The segment terminator suffix.
func (o EdifactDelimiterOverrideResponseOutput) SegmentTerminatorSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) *string { return v.SegmentTerminatorSuffix }).(pulumi.StringPtrOutput)
}

// The target namespace on which this delimiter settings has to be applied.
func (o EdifactDelimiterOverrideResponseOutput) TargetNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactDelimiterOverrideResponse) *string { return v.TargetNamespace }).(pulumi.StringPtrOutput)
}

type EdifactDelimiterOverrideResponseArrayOutput struct{ *pulumi.OutputState }

func (EdifactDelimiterOverrideResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactDelimiterOverrideResponse)(nil)).Elem()
}

func (o EdifactDelimiterOverrideResponseArrayOutput) ToEdifactDelimiterOverrideResponseArrayOutput() EdifactDelimiterOverrideResponseArrayOutput {
	return o
}

func (o EdifactDelimiterOverrideResponseArrayOutput) ToEdifactDelimiterOverrideResponseArrayOutputWithContext(ctx context.Context) EdifactDelimiterOverrideResponseArrayOutput {
	return o
}

func (o EdifactDelimiterOverrideResponseArrayOutput) Index(i pulumi.IntInput) EdifactDelimiterOverrideResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdifactDelimiterOverrideResponse {
		return vs[0].([]EdifactDelimiterOverrideResponse)[vs[1].(int)]
	}).(EdifactDelimiterOverrideResponseOutput)
}

type EdifactEnvelopeOverride struct {
	// The application password.
	ApplicationPassword *string `pulumi:"applicationPassword"`
	// The association assigned code.
	AssociationAssignedCode *string `pulumi:"associationAssignedCode"`
	// The controlling agency code.
	ControllingAgencyCode *string `pulumi:"controllingAgencyCode"`
	// The functional group id.
	FunctionalGroupId *string `pulumi:"functionalGroupId"`
	// The group header message release.
	GroupHeaderMessageRelease *string `pulumi:"groupHeaderMessageRelease"`
	// The group header message version.
	GroupHeaderMessageVersion *string `pulumi:"groupHeaderMessageVersion"`
	// The message association assigned code.
	MessageAssociationAssignedCode *string `pulumi:"messageAssociationAssignedCode"`
	// The message id on which this envelope settings has to be applied.
	MessageId *string `pulumi:"messageId"`
	// The message release version on which this envelope settings has to be applied.
	MessageRelease *string `pulumi:"messageRelease"`
	// The message version on which this envelope settings has to be applied.
	MessageVersion *string `pulumi:"messageVersion"`
	// The receiver application id.
	ReceiverApplicationId *string `pulumi:"receiverApplicationId"`
	// The receiver application qualifier.
	ReceiverApplicationQualifier *string `pulumi:"receiverApplicationQualifier"`
	// The sender application id.
	SenderApplicationId *string `pulumi:"senderApplicationId"`
	// The sender application qualifier.
	SenderApplicationQualifier *string `pulumi:"senderApplicationQualifier"`
	// The target namespace on which this envelope settings has to be applied.
	TargetNamespace *string `pulumi:"targetNamespace"`
}

// EdifactEnvelopeOverrideInput is an input type that accepts EdifactEnvelopeOverrideArgs and EdifactEnvelopeOverrideOutput values.
// You can construct a concrete instance of `EdifactEnvelopeOverrideInput` via:
//
//          EdifactEnvelopeOverrideArgs{...}
type EdifactEnvelopeOverrideInput interface {
	pulumi.Input

	ToEdifactEnvelopeOverrideOutput() EdifactEnvelopeOverrideOutput
	ToEdifactEnvelopeOverrideOutputWithContext(context.Context) EdifactEnvelopeOverrideOutput
}

type EdifactEnvelopeOverrideArgs struct {
	// The application password.
	ApplicationPassword pulumi.StringPtrInput `pulumi:"applicationPassword"`
	// The association assigned code.
	AssociationAssignedCode pulumi.StringPtrInput `pulumi:"associationAssignedCode"`
	// The controlling agency code.
	ControllingAgencyCode pulumi.StringPtrInput `pulumi:"controllingAgencyCode"`
	// The functional group id.
	FunctionalGroupId pulumi.StringPtrInput `pulumi:"functionalGroupId"`
	// The group header message release.
	GroupHeaderMessageRelease pulumi.StringPtrInput `pulumi:"groupHeaderMessageRelease"`
	// The group header message version.
	GroupHeaderMessageVersion pulumi.StringPtrInput `pulumi:"groupHeaderMessageVersion"`
	// The message association assigned code.
	MessageAssociationAssignedCode pulumi.StringPtrInput `pulumi:"messageAssociationAssignedCode"`
	// The message id on which this envelope settings has to be applied.
	MessageId pulumi.StringPtrInput `pulumi:"messageId"`
	// The message release version on which this envelope settings has to be applied.
	MessageRelease pulumi.StringPtrInput `pulumi:"messageRelease"`
	// The message version on which this envelope settings has to be applied.
	MessageVersion pulumi.StringPtrInput `pulumi:"messageVersion"`
	// The receiver application id.
	ReceiverApplicationId pulumi.StringPtrInput `pulumi:"receiverApplicationId"`
	// The receiver application qualifier.
	ReceiverApplicationQualifier pulumi.StringPtrInput `pulumi:"receiverApplicationQualifier"`
	// The sender application id.
	SenderApplicationId pulumi.StringPtrInput `pulumi:"senderApplicationId"`
	// The sender application qualifier.
	SenderApplicationQualifier pulumi.StringPtrInput `pulumi:"senderApplicationQualifier"`
	// The target namespace on which this envelope settings has to be applied.
	TargetNamespace pulumi.StringPtrInput `pulumi:"targetNamespace"`
}

func (EdifactEnvelopeOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactEnvelopeOverride)(nil)).Elem()
}

func (i EdifactEnvelopeOverrideArgs) ToEdifactEnvelopeOverrideOutput() EdifactEnvelopeOverrideOutput {
	return i.ToEdifactEnvelopeOverrideOutputWithContext(context.Background())
}

func (i EdifactEnvelopeOverrideArgs) ToEdifactEnvelopeOverrideOutputWithContext(ctx context.Context) EdifactEnvelopeOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactEnvelopeOverrideOutput)
}

// EdifactEnvelopeOverrideArrayInput is an input type that accepts EdifactEnvelopeOverrideArray and EdifactEnvelopeOverrideArrayOutput values.
// You can construct a concrete instance of `EdifactEnvelopeOverrideArrayInput` via:
//
//          EdifactEnvelopeOverrideArray{ EdifactEnvelopeOverrideArgs{...} }
type EdifactEnvelopeOverrideArrayInput interface {
	pulumi.Input

	ToEdifactEnvelopeOverrideArrayOutput() EdifactEnvelopeOverrideArrayOutput
	ToEdifactEnvelopeOverrideArrayOutputWithContext(context.Context) EdifactEnvelopeOverrideArrayOutput
}

type EdifactEnvelopeOverrideArray []EdifactEnvelopeOverrideInput

func (EdifactEnvelopeOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactEnvelopeOverride)(nil)).Elem()
}

func (i EdifactEnvelopeOverrideArray) ToEdifactEnvelopeOverrideArrayOutput() EdifactEnvelopeOverrideArrayOutput {
	return i.ToEdifactEnvelopeOverrideArrayOutputWithContext(context.Background())
}

func (i EdifactEnvelopeOverrideArray) ToEdifactEnvelopeOverrideArrayOutputWithContext(ctx context.Context) EdifactEnvelopeOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactEnvelopeOverrideArrayOutput)
}

type EdifactEnvelopeOverrideResponse struct {
	// The application password.
	ApplicationPassword *string `pulumi:"applicationPassword"`
	// The association assigned code.
	AssociationAssignedCode *string `pulumi:"associationAssignedCode"`
	// The controlling agency code.
	ControllingAgencyCode *string `pulumi:"controllingAgencyCode"`
	// The functional group id.
	FunctionalGroupId *string `pulumi:"functionalGroupId"`
	// The group header message release.
	GroupHeaderMessageRelease *string `pulumi:"groupHeaderMessageRelease"`
	// The group header message version.
	GroupHeaderMessageVersion *string `pulumi:"groupHeaderMessageVersion"`
	// The message association assigned code.
	MessageAssociationAssignedCode *string `pulumi:"messageAssociationAssignedCode"`
	// The message id on which this envelope settings has to be applied.
	MessageId *string `pulumi:"messageId"`
	// The message release version on which this envelope settings has to be applied.
	MessageRelease *string `pulumi:"messageRelease"`
	// The message version on which this envelope settings has to be applied.
	MessageVersion *string `pulumi:"messageVersion"`
	// The receiver application id.
	ReceiverApplicationId *string `pulumi:"receiverApplicationId"`
	// The receiver application qualifier.
	ReceiverApplicationQualifier *string `pulumi:"receiverApplicationQualifier"`
	// The sender application id.
	SenderApplicationId *string `pulumi:"senderApplicationId"`
	// The sender application qualifier.
	SenderApplicationQualifier *string `pulumi:"senderApplicationQualifier"`
	// The target namespace on which this envelope settings has to be applied.
	TargetNamespace *string `pulumi:"targetNamespace"`
}

type EdifactEnvelopeOverrideResponseOutput struct{ *pulumi.OutputState }

func (EdifactEnvelopeOverrideResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactEnvelopeOverrideResponse)(nil)).Elem()
}

func (o EdifactEnvelopeOverrideResponseOutput) ToEdifactEnvelopeOverrideResponseOutput() EdifactEnvelopeOverrideResponseOutput {
	return o
}

func (o EdifactEnvelopeOverrideResponseOutput) ToEdifactEnvelopeOverrideResponseOutputWithContext(ctx context.Context) EdifactEnvelopeOverrideResponseOutput {
	return o
}

// The application password.
func (o EdifactEnvelopeOverrideResponseOutput) ApplicationPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.ApplicationPassword }).(pulumi.StringPtrOutput)
}

// The association assigned code.
func (o EdifactEnvelopeOverrideResponseOutput) AssociationAssignedCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.AssociationAssignedCode }).(pulumi.StringPtrOutput)
}

// The controlling agency code.
func (o EdifactEnvelopeOverrideResponseOutput) ControllingAgencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.ControllingAgencyCode }).(pulumi.StringPtrOutput)
}

// The functional group id.
func (o EdifactEnvelopeOverrideResponseOutput) FunctionalGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.FunctionalGroupId }).(pulumi.StringPtrOutput)
}

// The group header message release.
func (o EdifactEnvelopeOverrideResponseOutput) GroupHeaderMessageRelease() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.GroupHeaderMessageRelease }).(pulumi.StringPtrOutput)
}

// The group header message version.
func (o EdifactEnvelopeOverrideResponseOutput) GroupHeaderMessageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.GroupHeaderMessageVersion }).(pulumi.StringPtrOutput)
}

// The message association assigned code.
func (o EdifactEnvelopeOverrideResponseOutput) MessageAssociationAssignedCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.MessageAssociationAssignedCode }).(pulumi.StringPtrOutput)
}

// The message id on which this envelope settings has to be applied.
func (o EdifactEnvelopeOverrideResponseOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.MessageId }).(pulumi.StringPtrOutput)
}

// The message release version on which this envelope settings has to be applied.
func (o EdifactEnvelopeOverrideResponseOutput) MessageRelease() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.MessageRelease }).(pulumi.StringPtrOutput)
}

// The message version on which this envelope settings has to be applied.
func (o EdifactEnvelopeOverrideResponseOutput) MessageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.MessageVersion }).(pulumi.StringPtrOutput)
}

// The receiver application id.
func (o EdifactEnvelopeOverrideResponseOutput) ReceiverApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.ReceiverApplicationId }).(pulumi.StringPtrOutput)
}

// The receiver application qualifier.
func (o EdifactEnvelopeOverrideResponseOutput) ReceiverApplicationQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.ReceiverApplicationQualifier }).(pulumi.StringPtrOutput)
}

// The sender application id.
func (o EdifactEnvelopeOverrideResponseOutput) SenderApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.SenderApplicationId }).(pulumi.StringPtrOutput)
}

// The sender application qualifier.
func (o EdifactEnvelopeOverrideResponseOutput) SenderApplicationQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.SenderApplicationQualifier }).(pulumi.StringPtrOutput)
}

// The target namespace on which this envelope settings has to be applied.
func (o EdifactEnvelopeOverrideResponseOutput) TargetNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeOverrideResponse) *string { return v.TargetNamespace }).(pulumi.StringPtrOutput)
}

type EdifactEnvelopeOverrideResponseArrayOutput struct{ *pulumi.OutputState }

func (EdifactEnvelopeOverrideResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactEnvelopeOverrideResponse)(nil)).Elem()
}

func (o EdifactEnvelopeOverrideResponseArrayOutput) ToEdifactEnvelopeOverrideResponseArrayOutput() EdifactEnvelopeOverrideResponseArrayOutput {
	return o
}

func (o EdifactEnvelopeOverrideResponseArrayOutput) ToEdifactEnvelopeOverrideResponseArrayOutputWithContext(ctx context.Context) EdifactEnvelopeOverrideResponseArrayOutput {
	return o
}

func (o EdifactEnvelopeOverrideResponseArrayOutput) Index(i pulumi.IntInput) EdifactEnvelopeOverrideResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdifactEnvelopeOverrideResponse {
		return vs[0].([]EdifactEnvelopeOverrideResponse)[vs[1].(int)]
	}).(EdifactEnvelopeOverrideResponseOutput)
}

type EdifactEnvelopeSettings struct {
	// The application reference id.
	ApplicationReferenceId *string `pulumi:"applicationReferenceId"`
	// The value indicating whether to apply delimiter string advice.
	ApplyDelimiterStringAdvice *bool `pulumi:"applyDelimiterStringAdvice"`
	// The communication agreement id.
	CommunicationAgreementId *string `pulumi:"communicationAgreementId"`
	// The value indicating whether to create grouping segments.
	CreateGroupingSegments *bool `pulumi:"createGroupingSegments"`
	// The value indicating whether to enable default group headers.
	EnableDefaultGroupHeaders *bool `pulumi:"enableDefaultGroupHeaders"`
	// The functional group id.
	FunctionalGroupId *string `pulumi:"functionalGroupId"`
	// The group application password.
	GroupApplicationPassword *string `pulumi:"groupApplicationPassword"`
	// The group application receiver id.
	GroupApplicationReceiverId *string `pulumi:"groupApplicationReceiverId"`
	// The group application receiver qualifier.
	GroupApplicationReceiverQualifier *string `pulumi:"groupApplicationReceiverQualifier"`
	// The group application sender id.
	GroupApplicationSenderId *string `pulumi:"groupApplicationSenderId"`
	// The group application sender qualifier.
	GroupApplicationSenderQualifier *string `pulumi:"groupApplicationSenderQualifier"`
	// The group association assigned code.
	GroupAssociationAssignedCode *string `pulumi:"groupAssociationAssignedCode"`
	// The group control number lower bound.
	GroupControlNumberLowerBound *int `pulumi:"groupControlNumberLowerBound"`
	// The group control number prefix.
	GroupControlNumberPrefix *string `pulumi:"groupControlNumberPrefix"`
	// The group control number suffix.
	GroupControlNumberSuffix *string `pulumi:"groupControlNumberSuffix"`
	// The group control number upper bound.
	GroupControlNumberUpperBound *int `pulumi:"groupControlNumberUpperBound"`
	// The group controlling agency code.
	GroupControllingAgencyCode *string `pulumi:"groupControllingAgencyCode"`
	// The group message release.
	GroupMessageRelease *string `pulumi:"groupMessageRelease"`
	// The group message version.
	GroupMessageVersion *string `pulumi:"groupMessageVersion"`
	// The interchange control number lower bound.
	InterchangeControlNumberLowerBound *int `pulumi:"interchangeControlNumberLowerBound"`
	// The interchange control number prefix.
	InterchangeControlNumberPrefix *string `pulumi:"interchangeControlNumberPrefix"`
	// The interchange control number suffix.
	InterchangeControlNumberSuffix *string `pulumi:"interchangeControlNumberSuffix"`
	// The interchange control number upper bound.
	InterchangeControlNumberUpperBound *int `pulumi:"interchangeControlNumberUpperBound"`
	// The value indicating whether the message is a test interchange.
	IsTestInterchange *bool `pulumi:"isTestInterchange"`
	// The value indicating whether to overwrite existing transaction set control number.
	OverwriteExistingTransactionSetControlNumber *bool `pulumi:"overwriteExistingTransactionSetControlNumber"`
	// The processing priority code.
	ProcessingPriorityCode *string `pulumi:"processingPriorityCode"`
	// The receiver internal identification.
	ReceiverInternalIdentification *string `pulumi:"receiverInternalIdentification"`
	// The receiver internal sub identification.
	ReceiverInternalSubIdentification *string `pulumi:"receiverInternalSubIdentification"`
	// The receiver reverse routing address.
	ReceiverReverseRoutingAddress *string `pulumi:"receiverReverseRoutingAddress"`
	// The recipient reference password qualifier.
	RecipientReferencePasswordQualifier *string `pulumi:"recipientReferencePasswordQualifier"`
	// The recipient reference password value.
	RecipientReferencePasswordValue *string `pulumi:"recipientReferencePasswordValue"`
	// The value indicating whether to rollover group control number.
	RolloverGroupControlNumber *bool `pulumi:"rolloverGroupControlNumber"`
	// The value indicating whether to rollover interchange control number.
	RolloverInterchangeControlNumber *bool `pulumi:"rolloverInterchangeControlNumber"`
	// The value indicating whether to rollover transaction set control number.
	RolloverTransactionSetControlNumber *bool `pulumi:"rolloverTransactionSetControlNumber"`
	// The sender internal identification.
	SenderInternalIdentification *string `pulumi:"senderInternalIdentification"`
	// The sender internal sub identification.
	SenderInternalSubIdentification *string `pulumi:"senderInternalSubIdentification"`
	// The sender reverse routing address.
	SenderReverseRoutingAddress *string `pulumi:"senderReverseRoutingAddress"`
	// The transaction set control number lower bound.
	TransactionSetControlNumberLowerBound *int `pulumi:"transactionSetControlNumberLowerBound"`
	// The transaction set control number prefix.
	TransactionSetControlNumberPrefix *string `pulumi:"transactionSetControlNumberPrefix"`
	// The transaction set control number suffix.
	TransactionSetControlNumberSuffix *string `pulumi:"transactionSetControlNumberSuffix"`
	// The transaction set control number upper bound.
	TransactionSetControlNumberUpperBound *int `pulumi:"transactionSetControlNumberUpperBound"`
}

// EdifactEnvelopeSettingsInput is an input type that accepts EdifactEnvelopeSettingsArgs and EdifactEnvelopeSettingsOutput values.
// You can construct a concrete instance of `EdifactEnvelopeSettingsInput` via:
//
//          EdifactEnvelopeSettingsArgs{...}
type EdifactEnvelopeSettingsInput interface {
	pulumi.Input

	ToEdifactEnvelopeSettingsOutput() EdifactEnvelopeSettingsOutput
	ToEdifactEnvelopeSettingsOutputWithContext(context.Context) EdifactEnvelopeSettingsOutput
}

type EdifactEnvelopeSettingsArgs struct {
	// The application reference id.
	ApplicationReferenceId pulumi.StringPtrInput `pulumi:"applicationReferenceId"`
	// The value indicating whether to apply delimiter string advice.
	ApplyDelimiterStringAdvice pulumi.BoolPtrInput `pulumi:"applyDelimiterStringAdvice"`
	// The communication agreement id.
	CommunicationAgreementId pulumi.StringPtrInput `pulumi:"communicationAgreementId"`
	// The value indicating whether to create grouping segments.
	CreateGroupingSegments pulumi.BoolPtrInput `pulumi:"createGroupingSegments"`
	// The value indicating whether to enable default group headers.
	EnableDefaultGroupHeaders pulumi.BoolPtrInput `pulumi:"enableDefaultGroupHeaders"`
	// The functional group id.
	FunctionalGroupId pulumi.StringPtrInput `pulumi:"functionalGroupId"`
	// The group application password.
	GroupApplicationPassword pulumi.StringPtrInput `pulumi:"groupApplicationPassword"`
	// The group application receiver id.
	GroupApplicationReceiverId pulumi.StringPtrInput `pulumi:"groupApplicationReceiverId"`
	// The group application receiver qualifier.
	GroupApplicationReceiverQualifier pulumi.StringPtrInput `pulumi:"groupApplicationReceiverQualifier"`
	// The group application sender id.
	GroupApplicationSenderId pulumi.StringPtrInput `pulumi:"groupApplicationSenderId"`
	// The group application sender qualifier.
	GroupApplicationSenderQualifier pulumi.StringPtrInput `pulumi:"groupApplicationSenderQualifier"`
	// The group association assigned code.
	GroupAssociationAssignedCode pulumi.StringPtrInput `pulumi:"groupAssociationAssignedCode"`
	// The group control number lower bound.
	GroupControlNumberLowerBound pulumi.IntPtrInput `pulumi:"groupControlNumberLowerBound"`
	// The group control number prefix.
	GroupControlNumberPrefix pulumi.StringPtrInput `pulumi:"groupControlNumberPrefix"`
	// The group control number suffix.
	GroupControlNumberSuffix pulumi.StringPtrInput `pulumi:"groupControlNumberSuffix"`
	// The group control number upper bound.
	GroupControlNumberUpperBound pulumi.IntPtrInput `pulumi:"groupControlNumberUpperBound"`
	// The group controlling agency code.
	GroupControllingAgencyCode pulumi.StringPtrInput `pulumi:"groupControllingAgencyCode"`
	// The group message release.
	GroupMessageRelease pulumi.StringPtrInput `pulumi:"groupMessageRelease"`
	// The group message version.
	GroupMessageVersion pulumi.StringPtrInput `pulumi:"groupMessageVersion"`
	// The interchange control number lower bound.
	InterchangeControlNumberLowerBound pulumi.IntPtrInput `pulumi:"interchangeControlNumberLowerBound"`
	// The interchange control number prefix.
	InterchangeControlNumberPrefix pulumi.StringPtrInput `pulumi:"interchangeControlNumberPrefix"`
	// The interchange control number suffix.
	InterchangeControlNumberSuffix pulumi.StringPtrInput `pulumi:"interchangeControlNumberSuffix"`
	// The interchange control number upper bound.
	InterchangeControlNumberUpperBound pulumi.IntPtrInput `pulumi:"interchangeControlNumberUpperBound"`
	// The value indicating whether the message is a test interchange.
	IsTestInterchange pulumi.BoolPtrInput `pulumi:"isTestInterchange"`
	// The value indicating whether to overwrite existing transaction set control number.
	OverwriteExistingTransactionSetControlNumber pulumi.BoolPtrInput `pulumi:"overwriteExistingTransactionSetControlNumber"`
	// The processing priority code.
	ProcessingPriorityCode pulumi.StringPtrInput `pulumi:"processingPriorityCode"`
	// The receiver internal identification.
	ReceiverInternalIdentification pulumi.StringPtrInput `pulumi:"receiverInternalIdentification"`
	// The receiver internal sub identification.
	ReceiverInternalSubIdentification pulumi.StringPtrInput `pulumi:"receiverInternalSubIdentification"`
	// The receiver reverse routing address.
	ReceiverReverseRoutingAddress pulumi.StringPtrInput `pulumi:"receiverReverseRoutingAddress"`
	// The recipient reference password qualifier.
	RecipientReferencePasswordQualifier pulumi.StringPtrInput `pulumi:"recipientReferencePasswordQualifier"`
	// The recipient reference password value.
	RecipientReferencePasswordValue pulumi.StringPtrInput `pulumi:"recipientReferencePasswordValue"`
	// The value indicating whether to rollover group control number.
	RolloverGroupControlNumber pulumi.BoolPtrInput `pulumi:"rolloverGroupControlNumber"`
	// The value indicating whether to rollover interchange control number.
	RolloverInterchangeControlNumber pulumi.BoolPtrInput `pulumi:"rolloverInterchangeControlNumber"`
	// The value indicating whether to rollover transaction set control number.
	RolloverTransactionSetControlNumber pulumi.BoolPtrInput `pulumi:"rolloverTransactionSetControlNumber"`
	// The sender internal identification.
	SenderInternalIdentification pulumi.StringPtrInput `pulumi:"senderInternalIdentification"`
	// The sender internal sub identification.
	SenderInternalSubIdentification pulumi.StringPtrInput `pulumi:"senderInternalSubIdentification"`
	// The sender reverse routing address.
	SenderReverseRoutingAddress pulumi.StringPtrInput `pulumi:"senderReverseRoutingAddress"`
	// The transaction set control number lower bound.
	TransactionSetControlNumberLowerBound pulumi.IntPtrInput `pulumi:"transactionSetControlNumberLowerBound"`
	// The transaction set control number prefix.
	TransactionSetControlNumberPrefix pulumi.StringPtrInput `pulumi:"transactionSetControlNumberPrefix"`
	// The transaction set control number suffix.
	TransactionSetControlNumberSuffix pulumi.StringPtrInput `pulumi:"transactionSetControlNumberSuffix"`
	// The transaction set control number upper bound.
	TransactionSetControlNumberUpperBound pulumi.IntPtrInput `pulumi:"transactionSetControlNumberUpperBound"`
}

func (EdifactEnvelopeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactEnvelopeSettings)(nil)).Elem()
}

func (i EdifactEnvelopeSettingsArgs) ToEdifactEnvelopeSettingsOutput() EdifactEnvelopeSettingsOutput {
	return i.ToEdifactEnvelopeSettingsOutputWithContext(context.Background())
}

func (i EdifactEnvelopeSettingsArgs) ToEdifactEnvelopeSettingsOutputWithContext(ctx context.Context) EdifactEnvelopeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactEnvelopeSettingsOutput)
}

func (i EdifactEnvelopeSettingsArgs) ToEdifactEnvelopeSettingsPtrOutput() EdifactEnvelopeSettingsPtrOutput {
	return i.ToEdifactEnvelopeSettingsPtrOutputWithContext(context.Background())
}

func (i EdifactEnvelopeSettingsArgs) ToEdifactEnvelopeSettingsPtrOutputWithContext(ctx context.Context) EdifactEnvelopeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactEnvelopeSettingsOutput).ToEdifactEnvelopeSettingsPtrOutputWithContext(ctx)
}

// EdifactEnvelopeSettingsPtrInput is an input type that accepts EdifactEnvelopeSettingsArgs, EdifactEnvelopeSettingsPtr and EdifactEnvelopeSettingsPtrOutput values.
// You can construct a concrete instance of `EdifactEnvelopeSettingsPtrInput` via:
//
//          EdifactEnvelopeSettingsArgs{...}
//
//  or:
//
//          nil
type EdifactEnvelopeSettingsPtrInput interface {
	pulumi.Input

	ToEdifactEnvelopeSettingsPtrOutput() EdifactEnvelopeSettingsPtrOutput
	ToEdifactEnvelopeSettingsPtrOutputWithContext(context.Context) EdifactEnvelopeSettingsPtrOutput
}

type edifactEnvelopeSettingsPtrType EdifactEnvelopeSettingsArgs

func EdifactEnvelopeSettingsPtr(v *EdifactEnvelopeSettingsArgs) EdifactEnvelopeSettingsPtrInput {
	return (*edifactEnvelopeSettingsPtrType)(v)
}

func (*edifactEnvelopeSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactEnvelopeSettings)(nil)).Elem()
}

func (i *edifactEnvelopeSettingsPtrType) ToEdifactEnvelopeSettingsPtrOutput() EdifactEnvelopeSettingsPtrOutput {
	return i.ToEdifactEnvelopeSettingsPtrOutputWithContext(context.Background())
}

func (i *edifactEnvelopeSettingsPtrType) ToEdifactEnvelopeSettingsPtrOutputWithContext(ctx context.Context) EdifactEnvelopeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactEnvelopeSettingsPtrOutput)
}

type EdifactEnvelopeSettingsResponse struct {
	// The application reference id.
	ApplicationReferenceId *string `pulumi:"applicationReferenceId"`
	// The value indicating whether to apply delimiter string advice.
	ApplyDelimiterStringAdvice *bool `pulumi:"applyDelimiterStringAdvice"`
	// The communication agreement id.
	CommunicationAgreementId *string `pulumi:"communicationAgreementId"`
	// The value indicating whether to create grouping segments.
	CreateGroupingSegments *bool `pulumi:"createGroupingSegments"`
	// The value indicating whether to enable default group headers.
	EnableDefaultGroupHeaders *bool `pulumi:"enableDefaultGroupHeaders"`
	// The functional group id.
	FunctionalGroupId *string `pulumi:"functionalGroupId"`
	// The group application password.
	GroupApplicationPassword *string `pulumi:"groupApplicationPassword"`
	// The group application receiver id.
	GroupApplicationReceiverId *string `pulumi:"groupApplicationReceiverId"`
	// The group application receiver qualifier.
	GroupApplicationReceiverQualifier *string `pulumi:"groupApplicationReceiverQualifier"`
	// The group application sender id.
	GroupApplicationSenderId *string `pulumi:"groupApplicationSenderId"`
	// The group application sender qualifier.
	GroupApplicationSenderQualifier *string `pulumi:"groupApplicationSenderQualifier"`
	// The group association assigned code.
	GroupAssociationAssignedCode *string `pulumi:"groupAssociationAssignedCode"`
	// The group control number lower bound.
	GroupControlNumberLowerBound *int `pulumi:"groupControlNumberLowerBound"`
	// The group control number prefix.
	GroupControlNumberPrefix *string `pulumi:"groupControlNumberPrefix"`
	// The group control number suffix.
	GroupControlNumberSuffix *string `pulumi:"groupControlNumberSuffix"`
	// The group control number upper bound.
	GroupControlNumberUpperBound *int `pulumi:"groupControlNumberUpperBound"`
	// The group controlling agency code.
	GroupControllingAgencyCode *string `pulumi:"groupControllingAgencyCode"`
	// The group message release.
	GroupMessageRelease *string `pulumi:"groupMessageRelease"`
	// The group message version.
	GroupMessageVersion *string `pulumi:"groupMessageVersion"`
	// The interchange control number lower bound.
	InterchangeControlNumberLowerBound *int `pulumi:"interchangeControlNumberLowerBound"`
	// The interchange control number prefix.
	InterchangeControlNumberPrefix *string `pulumi:"interchangeControlNumberPrefix"`
	// The interchange control number suffix.
	InterchangeControlNumberSuffix *string `pulumi:"interchangeControlNumberSuffix"`
	// The interchange control number upper bound.
	InterchangeControlNumberUpperBound *int `pulumi:"interchangeControlNumberUpperBound"`
	// The value indicating whether the message is a test interchange.
	IsTestInterchange *bool `pulumi:"isTestInterchange"`
	// The value indicating whether to overwrite existing transaction set control number.
	OverwriteExistingTransactionSetControlNumber *bool `pulumi:"overwriteExistingTransactionSetControlNumber"`
	// The processing priority code.
	ProcessingPriorityCode *string `pulumi:"processingPriorityCode"`
	// The receiver internal identification.
	ReceiverInternalIdentification *string `pulumi:"receiverInternalIdentification"`
	// The receiver internal sub identification.
	ReceiverInternalSubIdentification *string `pulumi:"receiverInternalSubIdentification"`
	// The receiver reverse routing address.
	ReceiverReverseRoutingAddress *string `pulumi:"receiverReverseRoutingAddress"`
	// The recipient reference password qualifier.
	RecipientReferencePasswordQualifier *string `pulumi:"recipientReferencePasswordQualifier"`
	// The recipient reference password value.
	RecipientReferencePasswordValue *string `pulumi:"recipientReferencePasswordValue"`
	// The value indicating whether to rollover group control number.
	RolloverGroupControlNumber *bool `pulumi:"rolloverGroupControlNumber"`
	// The value indicating whether to rollover interchange control number.
	RolloverInterchangeControlNumber *bool `pulumi:"rolloverInterchangeControlNumber"`
	// The value indicating whether to rollover transaction set control number.
	RolloverTransactionSetControlNumber *bool `pulumi:"rolloverTransactionSetControlNumber"`
	// The sender internal identification.
	SenderInternalIdentification *string `pulumi:"senderInternalIdentification"`
	// The sender internal sub identification.
	SenderInternalSubIdentification *string `pulumi:"senderInternalSubIdentification"`
	// The sender reverse routing address.
	SenderReverseRoutingAddress *string `pulumi:"senderReverseRoutingAddress"`
	// The transaction set control number lower bound.
	TransactionSetControlNumberLowerBound *int `pulumi:"transactionSetControlNumberLowerBound"`
	// The transaction set control number prefix.
	TransactionSetControlNumberPrefix *string `pulumi:"transactionSetControlNumberPrefix"`
	// The transaction set control number suffix.
	TransactionSetControlNumberSuffix *string `pulumi:"transactionSetControlNumberSuffix"`
	// The transaction set control number upper bound.
	TransactionSetControlNumberUpperBound *int `pulumi:"transactionSetControlNumberUpperBound"`
}

type EdifactEnvelopeSettingsResponseOutput struct{ *pulumi.OutputState }

func (EdifactEnvelopeSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactEnvelopeSettingsResponse)(nil)).Elem()
}

func (o EdifactEnvelopeSettingsResponseOutput) ToEdifactEnvelopeSettingsResponseOutput() EdifactEnvelopeSettingsResponseOutput {
	return o
}

func (o EdifactEnvelopeSettingsResponseOutput) ToEdifactEnvelopeSettingsResponseOutputWithContext(ctx context.Context) EdifactEnvelopeSettingsResponseOutput {
	return o
}

func (o EdifactEnvelopeSettingsResponseOutput) ToEdifactEnvelopeSettingsResponsePtrOutput() EdifactEnvelopeSettingsResponsePtrOutput {
	return o.ToEdifactEnvelopeSettingsResponsePtrOutputWithContext(context.Background())
}

func (o EdifactEnvelopeSettingsResponseOutput) ToEdifactEnvelopeSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactEnvelopeSettingsResponsePtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *EdifactEnvelopeSettingsResponse {
		return &v
	}).(EdifactEnvelopeSettingsResponsePtrOutput)
}

// The application reference id.
func (o EdifactEnvelopeSettingsResponseOutput) ApplicationReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.ApplicationReferenceId }).(pulumi.StringPtrOutput)
}

// The value indicating whether to apply delimiter string advice.
func (o EdifactEnvelopeSettingsResponseOutput) ApplyDelimiterStringAdvice() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *bool { return v.ApplyDelimiterStringAdvice }).(pulumi.BoolPtrOutput)
}

// The communication agreement id.
func (o EdifactEnvelopeSettingsResponseOutput) CommunicationAgreementId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.CommunicationAgreementId }).(pulumi.StringPtrOutput)
}

// The value indicating whether to create grouping segments.
func (o EdifactEnvelopeSettingsResponseOutput) CreateGroupingSegments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *bool { return v.CreateGroupingSegments }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable default group headers.
func (o EdifactEnvelopeSettingsResponseOutput) EnableDefaultGroupHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *bool { return v.EnableDefaultGroupHeaders }).(pulumi.BoolPtrOutput)
}

// The functional group id.
func (o EdifactEnvelopeSettingsResponseOutput) FunctionalGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.FunctionalGroupId }).(pulumi.StringPtrOutput)
}

// The group application password.
func (o EdifactEnvelopeSettingsResponseOutput) GroupApplicationPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.GroupApplicationPassword }).(pulumi.StringPtrOutput)
}

// The group application receiver id.
func (o EdifactEnvelopeSettingsResponseOutput) GroupApplicationReceiverId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.GroupApplicationReceiverId }).(pulumi.StringPtrOutput)
}

// The group application receiver qualifier.
func (o EdifactEnvelopeSettingsResponseOutput) GroupApplicationReceiverQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.GroupApplicationReceiverQualifier }).(pulumi.StringPtrOutput)
}

// The group application sender id.
func (o EdifactEnvelopeSettingsResponseOutput) GroupApplicationSenderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.GroupApplicationSenderId }).(pulumi.StringPtrOutput)
}

// The group application sender qualifier.
func (o EdifactEnvelopeSettingsResponseOutput) GroupApplicationSenderQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.GroupApplicationSenderQualifier }).(pulumi.StringPtrOutput)
}

// The group association assigned code.
func (o EdifactEnvelopeSettingsResponseOutput) GroupAssociationAssignedCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.GroupAssociationAssignedCode }).(pulumi.StringPtrOutput)
}

// The group control number lower bound.
func (o EdifactEnvelopeSettingsResponseOutput) GroupControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *int { return v.GroupControlNumberLowerBound }).(pulumi.IntPtrOutput)
}

// The group control number prefix.
func (o EdifactEnvelopeSettingsResponseOutput) GroupControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.GroupControlNumberPrefix }).(pulumi.StringPtrOutput)
}

// The group control number suffix.
func (o EdifactEnvelopeSettingsResponseOutput) GroupControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.GroupControlNumberSuffix }).(pulumi.StringPtrOutput)
}

// The group control number upper bound.
func (o EdifactEnvelopeSettingsResponseOutput) GroupControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *int { return v.GroupControlNumberUpperBound }).(pulumi.IntPtrOutput)
}

// The group controlling agency code.
func (o EdifactEnvelopeSettingsResponseOutput) GroupControllingAgencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.GroupControllingAgencyCode }).(pulumi.StringPtrOutput)
}

// The group message release.
func (o EdifactEnvelopeSettingsResponseOutput) GroupMessageRelease() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.GroupMessageRelease }).(pulumi.StringPtrOutput)
}

// The group message version.
func (o EdifactEnvelopeSettingsResponseOutput) GroupMessageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.GroupMessageVersion }).(pulumi.StringPtrOutput)
}

// The interchange control number lower bound.
func (o EdifactEnvelopeSettingsResponseOutput) InterchangeControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *int { return v.InterchangeControlNumberLowerBound }).(pulumi.IntPtrOutput)
}

// The interchange control number prefix.
func (o EdifactEnvelopeSettingsResponseOutput) InterchangeControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.InterchangeControlNumberPrefix }).(pulumi.StringPtrOutput)
}

// The interchange control number suffix.
func (o EdifactEnvelopeSettingsResponseOutput) InterchangeControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.InterchangeControlNumberSuffix }).(pulumi.StringPtrOutput)
}

// The interchange control number upper bound.
func (o EdifactEnvelopeSettingsResponseOutput) InterchangeControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *int { return v.InterchangeControlNumberUpperBound }).(pulumi.IntPtrOutput)
}

// The value indicating whether the message is a test interchange.
func (o EdifactEnvelopeSettingsResponseOutput) IsTestInterchange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *bool { return v.IsTestInterchange }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to overwrite existing transaction set control number.
func (o EdifactEnvelopeSettingsResponseOutput) OverwriteExistingTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *bool { return v.OverwriteExistingTransactionSetControlNumber }).(pulumi.BoolPtrOutput)
}

// The processing priority code.
func (o EdifactEnvelopeSettingsResponseOutput) ProcessingPriorityCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.ProcessingPriorityCode }).(pulumi.StringPtrOutput)
}

// The receiver internal identification.
func (o EdifactEnvelopeSettingsResponseOutput) ReceiverInternalIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.ReceiverInternalIdentification }).(pulumi.StringPtrOutput)
}

// The receiver internal sub identification.
func (o EdifactEnvelopeSettingsResponseOutput) ReceiverInternalSubIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.ReceiverInternalSubIdentification }).(pulumi.StringPtrOutput)
}

// The receiver reverse routing address.
func (o EdifactEnvelopeSettingsResponseOutput) ReceiverReverseRoutingAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.ReceiverReverseRoutingAddress }).(pulumi.StringPtrOutput)
}

// The recipient reference password qualifier.
func (o EdifactEnvelopeSettingsResponseOutput) RecipientReferencePasswordQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.RecipientReferencePasswordQualifier }).(pulumi.StringPtrOutput)
}

// The recipient reference password value.
func (o EdifactEnvelopeSettingsResponseOutput) RecipientReferencePasswordValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.RecipientReferencePasswordValue }).(pulumi.StringPtrOutput)
}

// The value indicating whether to rollover group control number.
func (o EdifactEnvelopeSettingsResponseOutput) RolloverGroupControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *bool { return v.RolloverGroupControlNumber }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover interchange control number.
func (o EdifactEnvelopeSettingsResponseOutput) RolloverInterchangeControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *bool { return v.RolloverInterchangeControlNumber }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover transaction set control number.
func (o EdifactEnvelopeSettingsResponseOutput) RolloverTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *bool { return v.RolloverTransactionSetControlNumber }).(pulumi.BoolPtrOutput)
}

// The sender internal identification.
func (o EdifactEnvelopeSettingsResponseOutput) SenderInternalIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.SenderInternalIdentification }).(pulumi.StringPtrOutput)
}

// The sender internal sub identification.
func (o EdifactEnvelopeSettingsResponseOutput) SenderInternalSubIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.SenderInternalSubIdentification }).(pulumi.StringPtrOutput)
}

// The sender reverse routing address.
func (o EdifactEnvelopeSettingsResponseOutput) SenderReverseRoutingAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.SenderReverseRoutingAddress }).(pulumi.StringPtrOutput)
}

// The transaction set control number lower bound.
func (o EdifactEnvelopeSettingsResponseOutput) TransactionSetControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *int { return v.TransactionSetControlNumberLowerBound }).(pulumi.IntPtrOutput)
}

// The transaction set control number prefix.
func (o EdifactEnvelopeSettingsResponseOutput) TransactionSetControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.TransactionSetControlNumberPrefix }).(pulumi.StringPtrOutput)
}

// The transaction set control number suffix.
func (o EdifactEnvelopeSettingsResponseOutput) TransactionSetControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *string { return v.TransactionSetControlNumberSuffix }).(pulumi.StringPtrOutput)
}

// The transaction set control number upper bound.
func (o EdifactEnvelopeSettingsResponseOutput) TransactionSetControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EdifactEnvelopeSettingsResponse) *int { return v.TransactionSetControlNumberUpperBound }).(pulumi.IntPtrOutput)
}

type EdifactEnvelopeSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (EdifactEnvelopeSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactEnvelopeSettingsResponse)(nil)).Elem()
}

func (o EdifactEnvelopeSettingsResponsePtrOutput) ToEdifactEnvelopeSettingsResponsePtrOutput() EdifactEnvelopeSettingsResponsePtrOutput {
	return o
}

func (o EdifactEnvelopeSettingsResponsePtrOutput) ToEdifactEnvelopeSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactEnvelopeSettingsResponsePtrOutput {
	return o
}

func (o EdifactEnvelopeSettingsResponsePtrOutput) Elem() EdifactEnvelopeSettingsResponseOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) EdifactEnvelopeSettingsResponse { return *v }).(EdifactEnvelopeSettingsResponseOutput)
}

// The application reference id.
func (o EdifactEnvelopeSettingsResponsePtrOutput) ApplicationReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationReferenceId
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to apply delimiter string advice.
func (o EdifactEnvelopeSettingsResponsePtrOutput) ApplyDelimiterStringAdvice() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ApplyDelimiterStringAdvice
	}).(pulumi.BoolPtrOutput)
}

// The communication agreement id.
func (o EdifactEnvelopeSettingsResponsePtrOutput) CommunicationAgreementId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.CommunicationAgreementId
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to create grouping segments.
func (o EdifactEnvelopeSettingsResponsePtrOutput) CreateGroupingSegments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CreateGroupingSegments
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to enable default group headers.
func (o EdifactEnvelopeSettingsResponsePtrOutput) EnableDefaultGroupHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDefaultGroupHeaders
	}).(pulumi.BoolPtrOutput)
}

// The functional group id.
func (o EdifactEnvelopeSettingsResponsePtrOutput) FunctionalGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.FunctionalGroupId
	}).(pulumi.StringPtrOutput)
}

// The group application password.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupApplicationPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupApplicationPassword
	}).(pulumi.StringPtrOutput)
}

// The group application receiver id.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupApplicationReceiverId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupApplicationReceiverId
	}).(pulumi.StringPtrOutput)
}

// The group application receiver qualifier.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupApplicationReceiverQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupApplicationReceiverQualifier
	}).(pulumi.StringPtrOutput)
}

// The group application sender id.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupApplicationSenderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupApplicationSenderId
	}).(pulumi.StringPtrOutput)
}

// The group application sender qualifier.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupApplicationSenderQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupApplicationSenderQualifier
	}).(pulumi.StringPtrOutput)
}

// The group association assigned code.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupAssociationAssignedCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupAssociationAssignedCode
	}).(pulumi.StringPtrOutput)
}

// The group control number lower bound.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.GroupControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The group control number prefix.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupControlNumberPrefix
	}).(pulumi.StringPtrOutput)
}

// The group control number suffix.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupControlNumberSuffix
	}).(pulumi.StringPtrOutput)
}

// The group control number upper bound.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.GroupControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

// The group controlling agency code.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupControllingAgencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupControllingAgencyCode
	}).(pulumi.StringPtrOutput)
}

// The group message release.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupMessageRelease() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupMessageRelease
	}).(pulumi.StringPtrOutput)
}

// The group message version.
func (o EdifactEnvelopeSettingsResponsePtrOutput) GroupMessageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupMessageVersion
	}).(pulumi.StringPtrOutput)
}

// The interchange control number lower bound.
func (o EdifactEnvelopeSettingsResponsePtrOutput) InterchangeControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.InterchangeControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The interchange control number prefix.
func (o EdifactEnvelopeSettingsResponsePtrOutput) InterchangeControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.InterchangeControlNumberPrefix
	}).(pulumi.StringPtrOutput)
}

// The interchange control number suffix.
func (o EdifactEnvelopeSettingsResponsePtrOutput) InterchangeControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.InterchangeControlNumberSuffix
	}).(pulumi.StringPtrOutput)
}

// The interchange control number upper bound.
func (o EdifactEnvelopeSettingsResponsePtrOutput) InterchangeControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.InterchangeControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

// The value indicating whether the message is a test interchange.
func (o EdifactEnvelopeSettingsResponsePtrOutput) IsTestInterchange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsTestInterchange
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to overwrite existing transaction set control number.
func (o EdifactEnvelopeSettingsResponsePtrOutput) OverwriteExistingTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.OverwriteExistingTransactionSetControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The processing priority code.
func (o EdifactEnvelopeSettingsResponsePtrOutput) ProcessingPriorityCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProcessingPriorityCode
	}).(pulumi.StringPtrOutput)
}

// The receiver internal identification.
func (o EdifactEnvelopeSettingsResponsePtrOutput) ReceiverInternalIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReceiverInternalIdentification
	}).(pulumi.StringPtrOutput)
}

// The receiver internal sub identification.
func (o EdifactEnvelopeSettingsResponsePtrOutput) ReceiverInternalSubIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReceiverInternalSubIdentification
	}).(pulumi.StringPtrOutput)
}

// The receiver reverse routing address.
func (o EdifactEnvelopeSettingsResponsePtrOutput) ReceiverReverseRoutingAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReceiverReverseRoutingAddress
	}).(pulumi.StringPtrOutput)
}

// The recipient reference password qualifier.
func (o EdifactEnvelopeSettingsResponsePtrOutput) RecipientReferencePasswordQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.RecipientReferencePasswordQualifier
	}).(pulumi.StringPtrOutput)
}

// The recipient reference password value.
func (o EdifactEnvelopeSettingsResponsePtrOutput) RecipientReferencePasswordValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.RecipientReferencePasswordValue
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to rollover group control number.
func (o EdifactEnvelopeSettingsResponsePtrOutput) RolloverGroupControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RolloverGroupControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover interchange control number.
func (o EdifactEnvelopeSettingsResponsePtrOutput) RolloverInterchangeControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RolloverInterchangeControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover transaction set control number.
func (o EdifactEnvelopeSettingsResponsePtrOutput) RolloverTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RolloverTransactionSetControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The sender internal identification.
func (o EdifactEnvelopeSettingsResponsePtrOutput) SenderInternalIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.SenderInternalIdentification
	}).(pulumi.StringPtrOutput)
}

// The sender internal sub identification.
func (o EdifactEnvelopeSettingsResponsePtrOutput) SenderInternalSubIdentification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.SenderInternalSubIdentification
	}).(pulumi.StringPtrOutput)
}

// The sender reverse routing address.
func (o EdifactEnvelopeSettingsResponsePtrOutput) SenderReverseRoutingAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.SenderReverseRoutingAddress
	}).(pulumi.StringPtrOutput)
}

// The transaction set control number lower bound.
func (o EdifactEnvelopeSettingsResponsePtrOutput) TransactionSetControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.TransactionSetControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The transaction set control number prefix.
func (o EdifactEnvelopeSettingsResponsePtrOutput) TransactionSetControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TransactionSetControlNumberPrefix
	}).(pulumi.StringPtrOutput)
}

// The transaction set control number suffix.
func (o EdifactEnvelopeSettingsResponsePtrOutput) TransactionSetControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TransactionSetControlNumberSuffix
	}).(pulumi.StringPtrOutput)
}

// The transaction set control number upper bound.
func (o EdifactEnvelopeSettingsResponsePtrOutput) TransactionSetControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactEnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.TransactionSetControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

type EdifactFramingSettings struct {
	// The character encoding.
	CharacterEncoding *string `pulumi:"characterEncoding"`
	// The EDIFACT frame setting characterSet.
	CharacterSet *string `pulumi:"characterSet"`
	// The component separator.
	ComponentSeparator *int `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator *int `pulumi:"dataElementSeparator"`
	// The EDIFACT frame setting decimal indicator.
	DecimalPointIndicator *string `pulumi:"decimalPointIndicator"`
	// The protocol version.
	ProtocolVersion *int `pulumi:"protocolVersion"`
	// The release indicator.
	ReleaseIndicator *int `pulumi:"releaseIndicator"`
	// The repetition separator.
	RepetitionSeparator *int `pulumi:"repetitionSeparator"`
	// The segment terminator.
	SegmentTerminator *int `pulumi:"segmentTerminator"`
	// The EDIFACT frame setting segment terminator suffix.
	SegmentTerminatorSuffix *string `pulumi:"segmentTerminatorSuffix"`
	// The service code list directory version.
	ServiceCodeListDirectoryVersion *string `pulumi:"serviceCodeListDirectoryVersion"`
}

// EdifactFramingSettingsInput is an input type that accepts EdifactFramingSettingsArgs and EdifactFramingSettingsOutput values.
// You can construct a concrete instance of `EdifactFramingSettingsInput` via:
//
//          EdifactFramingSettingsArgs{...}
type EdifactFramingSettingsInput interface {
	pulumi.Input

	ToEdifactFramingSettingsOutput() EdifactFramingSettingsOutput
	ToEdifactFramingSettingsOutputWithContext(context.Context) EdifactFramingSettingsOutput
}

type EdifactFramingSettingsArgs struct {
	// The character encoding.
	CharacterEncoding pulumi.StringPtrInput `pulumi:"characterEncoding"`
	// The EDIFACT frame setting characterSet.
	CharacterSet pulumi.StringPtrInput `pulumi:"characterSet"`
	// The component separator.
	ComponentSeparator pulumi.IntPtrInput `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator pulumi.IntPtrInput `pulumi:"dataElementSeparator"`
	// The EDIFACT frame setting decimal indicator.
	DecimalPointIndicator pulumi.StringPtrInput `pulumi:"decimalPointIndicator"`
	// The protocol version.
	ProtocolVersion pulumi.IntPtrInput `pulumi:"protocolVersion"`
	// The release indicator.
	ReleaseIndicator pulumi.IntPtrInput `pulumi:"releaseIndicator"`
	// The repetition separator.
	RepetitionSeparator pulumi.IntPtrInput `pulumi:"repetitionSeparator"`
	// The segment terminator.
	SegmentTerminator pulumi.IntPtrInput `pulumi:"segmentTerminator"`
	// The EDIFACT frame setting segment terminator suffix.
	SegmentTerminatorSuffix pulumi.StringPtrInput `pulumi:"segmentTerminatorSuffix"`
	// The service code list directory version.
	ServiceCodeListDirectoryVersion pulumi.StringPtrInput `pulumi:"serviceCodeListDirectoryVersion"`
}

func (EdifactFramingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactFramingSettings)(nil)).Elem()
}

func (i EdifactFramingSettingsArgs) ToEdifactFramingSettingsOutput() EdifactFramingSettingsOutput {
	return i.ToEdifactFramingSettingsOutputWithContext(context.Background())
}

func (i EdifactFramingSettingsArgs) ToEdifactFramingSettingsOutputWithContext(ctx context.Context) EdifactFramingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactFramingSettingsOutput)
}

func (i EdifactFramingSettingsArgs) ToEdifactFramingSettingsPtrOutput() EdifactFramingSettingsPtrOutput {
	return i.ToEdifactFramingSettingsPtrOutputWithContext(context.Background())
}

func (i EdifactFramingSettingsArgs) ToEdifactFramingSettingsPtrOutputWithContext(ctx context.Context) EdifactFramingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactFramingSettingsOutput).ToEdifactFramingSettingsPtrOutputWithContext(ctx)
}

// EdifactFramingSettingsPtrInput is an input type that accepts EdifactFramingSettingsArgs, EdifactFramingSettingsPtr and EdifactFramingSettingsPtrOutput values.
// You can construct a concrete instance of `EdifactFramingSettingsPtrInput` via:
//
//          EdifactFramingSettingsArgs{...}
//
//  or:
//
//          nil
type EdifactFramingSettingsPtrInput interface {
	pulumi.Input

	ToEdifactFramingSettingsPtrOutput() EdifactFramingSettingsPtrOutput
	ToEdifactFramingSettingsPtrOutputWithContext(context.Context) EdifactFramingSettingsPtrOutput
}

type edifactFramingSettingsPtrType EdifactFramingSettingsArgs

func EdifactFramingSettingsPtr(v *EdifactFramingSettingsArgs) EdifactFramingSettingsPtrInput {
	return (*edifactFramingSettingsPtrType)(v)
}

func (*edifactFramingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactFramingSettings)(nil)).Elem()
}

func (i *edifactFramingSettingsPtrType) ToEdifactFramingSettingsPtrOutput() EdifactFramingSettingsPtrOutput {
	return i.ToEdifactFramingSettingsPtrOutputWithContext(context.Background())
}

func (i *edifactFramingSettingsPtrType) ToEdifactFramingSettingsPtrOutputWithContext(ctx context.Context) EdifactFramingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactFramingSettingsPtrOutput)
}

type EdifactFramingSettingsResponse struct {
	// The character encoding.
	CharacterEncoding *string `pulumi:"characterEncoding"`
	// The EDIFACT frame setting characterSet.
	CharacterSet *string `pulumi:"characterSet"`
	// The component separator.
	ComponentSeparator *int `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator *int `pulumi:"dataElementSeparator"`
	// The EDIFACT frame setting decimal indicator.
	DecimalPointIndicator *string `pulumi:"decimalPointIndicator"`
	// The protocol version.
	ProtocolVersion *int `pulumi:"protocolVersion"`
	// The release indicator.
	ReleaseIndicator *int `pulumi:"releaseIndicator"`
	// The repetition separator.
	RepetitionSeparator *int `pulumi:"repetitionSeparator"`
	// The segment terminator.
	SegmentTerminator *int `pulumi:"segmentTerminator"`
	// The EDIFACT frame setting segment terminator suffix.
	SegmentTerminatorSuffix *string `pulumi:"segmentTerminatorSuffix"`
	// The service code list directory version.
	ServiceCodeListDirectoryVersion *string `pulumi:"serviceCodeListDirectoryVersion"`
}

type EdifactFramingSettingsResponseOutput struct{ *pulumi.OutputState }

func (EdifactFramingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactFramingSettingsResponse)(nil)).Elem()
}

func (o EdifactFramingSettingsResponseOutput) ToEdifactFramingSettingsResponseOutput() EdifactFramingSettingsResponseOutput {
	return o
}

func (o EdifactFramingSettingsResponseOutput) ToEdifactFramingSettingsResponseOutputWithContext(ctx context.Context) EdifactFramingSettingsResponseOutput {
	return o
}

func (o EdifactFramingSettingsResponseOutput) ToEdifactFramingSettingsResponsePtrOutput() EdifactFramingSettingsResponsePtrOutput {
	return o.ToEdifactFramingSettingsResponsePtrOutputWithContext(context.Background())
}

func (o EdifactFramingSettingsResponseOutput) ToEdifactFramingSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactFramingSettingsResponsePtrOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) *EdifactFramingSettingsResponse {
		return &v
	}).(EdifactFramingSettingsResponsePtrOutput)
}

// The character encoding.
func (o EdifactFramingSettingsResponseOutput) CharacterEncoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) *string { return v.CharacterEncoding }).(pulumi.StringPtrOutput)
}

// The EDIFACT frame setting characterSet.
func (o EdifactFramingSettingsResponseOutput) CharacterSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) *string { return v.CharacterSet }).(pulumi.StringPtrOutput)
}

// The component separator.
func (o EdifactFramingSettingsResponseOutput) ComponentSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) *int { return v.ComponentSeparator }).(pulumi.IntPtrOutput)
}

// The data element separator.
func (o EdifactFramingSettingsResponseOutput) DataElementSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) *int { return v.DataElementSeparator }).(pulumi.IntPtrOutput)
}

// The EDIFACT frame setting decimal indicator.
func (o EdifactFramingSettingsResponseOutput) DecimalPointIndicator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) *string { return v.DecimalPointIndicator }).(pulumi.StringPtrOutput)
}

// The protocol version.
func (o EdifactFramingSettingsResponseOutput) ProtocolVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) *int { return v.ProtocolVersion }).(pulumi.IntPtrOutput)
}

// The release indicator.
func (o EdifactFramingSettingsResponseOutput) ReleaseIndicator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) *int { return v.ReleaseIndicator }).(pulumi.IntPtrOutput)
}

// The repetition separator.
func (o EdifactFramingSettingsResponseOutput) RepetitionSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) *int { return v.RepetitionSeparator }).(pulumi.IntPtrOutput)
}

// The segment terminator.
func (o EdifactFramingSettingsResponseOutput) SegmentTerminator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) *int { return v.SegmentTerminator }).(pulumi.IntPtrOutput)
}

// The EDIFACT frame setting segment terminator suffix.
func (o EdifactFramingSettingsResponseOutput) SegmentTerminatorSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) *string { return v.SegmentTerminatorSuffix }).(pulumi.StringPtrOutput)
}

// The service code list directory version.
func (o EdifactFramingSettingsResponseOutput) ServiceCodeListDirectoryVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactFramingSettingsResponse) *string { return v.ServiceCodeListDirectoryVersion }).(pulumi.StringPtrOutput)
}

type EdifactFramingSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (EdifactFramingSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactFramingSettingsResponse)(nil)).Elem()
}

func (o EdifactFramingSettingsResponsePtrOutput) ToEdifactFramingSettingsResponsePtrOutput() EdifactFramingSettingsResponsePtrOutput {
	return o
}

func (o EdifactFramingSettingsResponsePtrOutput) ToEdifactFramingSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactFramingSettingsResponsePtrOutput {
	return o
}

func (o EdifactFramingSettingsResponsePtrOutput) Elem() EdifactFramingSettingsResponseOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) EdifactFramingSettingsResponse { return *v }).(EdifactFramingSettingsResponseOutput)
}

// The character encoding.
func (o EdifactFramingSettingsResponsePtrOutput) CharacterEncoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.CharacterEncoding
	}).(pulumi.StringPtrOutput)
}

// The EDIFACT frame setting characterSet.
func (o EdifactFramingSettingsResponsePtrOutput) CharacterSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.CharacterSet
	}).(pulumi.StringPtrOutput)
}

// The component separator.
func (o EdifactFramingSettingsResponsePtrOutput) ComponentSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.ComponentSeparator
	}).(pulumi.IntPtrOutput)
}

// The data element separator.
func (o EdifactFramingSettingsResponsePtrOutput) DataElementSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.DataElementSeparator
	}).(pulumi.IntPtrOutput)
}

// The EDIFACT frame setting decimal indicator.
func (o EdifactFramingSettingsResponsePtrOutput) DecimalPointIndicator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.DecimalPointIndicator
	}).(pulumi.StringPtrOutput)
}

// The protocol version.
func (o EdifactFramingSettingsResponsePtrOutput) ProtocolVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.ProtocolVersion
	}).(pulumi.IntPtrOutput)
}

// The release indicator.
func (o EdifactFramingSettingsResponsePtrOutput) ReleaseIndicator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.ReleaseIndicator
	}).(pulumi.IntPtrOutput)
}

// The repetition separator.
func (o EdifactFramingSettingsResponsePtrOutput) RepetitionSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.RepetitionSeparator
	}).(pulumi.IntPtrOutput)
}

// The segment terminator.
func (o EdifactFramingSettingsResponsePtrOutput) SegmentTerminator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.SegmentTerminator
	}).(pulumi.IntPtrOutput)
}

// The EDIFACT frame setting segment terminator suffix.
func (o EdifactFramingSettingsResponsePtrOutput) SegmentTerminatorSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.SegmentTerminatorSuffix
	}).(pulumi.StringPtrOutput)
}

// The service code list directory version.
func (o EdifactFramingSettingsResponsePtrOutput) ServiceCodeListDirectoryVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactFramingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceCodeListDirectoryVersion
	}).(pulumi.StringPtrOutput)
}

type EdifactMessageFilter struct {
	// The message filter type.
	MessageFilterType *string `pulumi:"messageFilterType"`
}

// EdifactMessageFilterInput is an input type that accepts EdifactMessageFilterArgs and EdifactMessageFilterOutput values.
// You can construct a concrete instance of `EdifactMessageFilterInput` via:
//
//          EdifactMessageFilterArgs{...}
type EdifactMessageFilterInput interface {
	pulumi.Input

	ToEdifactMessageFilterOutput() EdifactMessageFilterOutput
	ToEdifactMessageFilterOutputWithContext(context.Context) EdifactMessageFilterOutput
}

type EdifactMessageFilterArgs struct {
	// The message filter type.
	MessageFilterType pulumi.StringPtrInput `pulumi:"messageFilterType"`
}

func (EdifactMessageFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactMessageFilter)(nil)).Elem()
}

func (i EdifactMessageFilterArgs) ToEdifactMessageFilterOutput() EdifactMessageFilterOutput {
	return i.ToEdifactMessageFilterOutputWithContext(context.Background())
}

func (i EdifactMessageFilterArgs) ToEdifactMessageFilterOutputWithContext(ctx context.Context) EdifactMessageFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactMessageFilterOutput)
}

func (i EdifactMessageFilterArgs) ToEdifactMessageFilterPtrOutput() EdifactMessageFilterPtrOutput {
	return i.ToEdifactMessageFilterPtrOutputWithContext(context.Background())
}

func (i EdifactMessageFilterArgs) ToEdifactMessageFilterPtrOutputWithContext(ctx context.Context) EdifactMessageFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactMessageFilterOutput).ToEdifactMessageFilterPtrOutputWithContext(ctx)
}

// EdifactMessageFilterPtrInput is an input type that accepts EdifactMessageFilterArgs, EdifactMessageFilterPtr and EdifactMessageFilterPtrOutput values.
// You can construct a concrete instance of `EdifactMessageFilterPtrInput` via:
//
//          EdifactMessageFilterArgs{...}
//
//  or:
//
//          nil
type EdifactMessageFilterPtrInput interface {
	pulumi.Input

	ToEdifactMessageFilterPtrOutput() EdifactMessageFilterPtrOutput
	ToEdifactMessageFilterPtrOutputWithContext(context.Context) EdifactMessageFilterPtrOutput
}

type edifactMessageFilterPtrType EdifactMessageFilterArgs

func EdifactMessageFilterPtr(v *EdifactMessageFilterArgs) EdifactMessageFilterPtrInput {
	return (*edifactMessageFilterPtrType)(v)
}

func (*edifactMessageFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactMessageFilter)(nil)).Elem()
}

func (i *edifactMessageFilterPtrType) ToEdifactMessageFilterPtrOutput() EdifactMessageFilterPtrOutput {
	return i.ToEdifactMessageFilterPtrOutputWithContext(context.Background())
}

func (i *edifactMessageFilterPtrType) ToEdifactMessageFilterPtrOutputWithContext(ctx context.Context) EdifactMessageFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactMessageFilterPtrOutput)
}

type EdifactMessageFilterResponse struct {
	// The message filter type.
	MessageFilterType *string `pulumi:"messageFilterType"`
}

type EdifactMessageFilterResponseOutput struct{ *pulumi.OutputState }

func (EdifactMessageFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactMessageFilterResponse)(nil)).Elem()
}

func (o EdifactMessageFilterResponseOutput) ToEdifactMessageFilterResponseOutput() EdifactMessageFilterResponseOutput {
	return o
}

func (o EdifactMessageFilterResponseOutput) ToEdifactMessageFilterResponseOutputWithContext(ctx context.Context) EdifactMessageFilterResponseOutput {
	return o
}

func (o EdifactMessageFilterResponseOutput) ToEdifactMessageFilterResponsePtrOutput() EdifactMessageFilterResponsePtrOutput {
	return o.ToEdifactMessageFilterResponsePtrOutputWithContext(context.Background())
}

func (o EdifactMessageFilterResponseOutput) ToEdifactMessageFilterResponsePtrOutputWithContext(ctx context.Context) EdifactMessageFilterResponsePtrOutput {
	return o.ApplyT(func(v EdifactMessageFilterResponse) *EdifactMessageFilterResponse {
		return &v
	}).(EdifactMessageFilterResponsePtrOutput)
}

// The message filter type.
func (o EdifactMessageFilterResponseOutput) MessageFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactMessageFilterResponse) *string { return v.MessageFilterType }).(pulumi.StringPtrOutput)
}

type EdifactMessageFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (EdifactMessageFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactMessageFilterResponse)(nil)).Elem()
}

func (o EdifactMessageFilterResponsePtrOutput) ToEdifactMessageFilterResponsePtrOutput() EdifactMessageFilterResponsePtrOutput {
	return o
}

func (o EdifactMessageFilterResponsePtrOutput) ToEdifactMessageFilterResponsePtrOutputWithContext(ctx context.Context) EdifactMessageFilterResponsePtrOutput {
	return o
}

func (o EdifactMessageFilterResponsePtrOutput) Elem() EdifactMessageFilterResponseOutput {
	return o.ApplyT(func(v *EdifactMessageFilterResponse) EdifactMessageFilterResponse { return *v }).(EdifactMessageFilterResponseOutput)
}

// The message filter type.
func (o EdifactMessageFilterResponsePtrOutput) MessageFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactMessageFilterResponse) *string {
		if v == nil {
			return nil
		}
		return v.MessageFilterType
	}).(pulumi.StringPtrOutput)
}

type EdifactMessageIdentifier struct {
	// The message id on which this envelope settings has to be applied.
	MessageId *string `pulumi:"messageId"`
}

// EdifactMessageIdentifierInput is an input type that accepts EdifactMessageIdentifierArgs and EdifactMessageIdentifierOutput values.
// You can construct a concrete instance of `EdifactMessageIdentifierInput` via:
//
//          EdifactMessageIdentifierArgs{...}
type EdifactMessageIdentifierInput interface {
	pulumi.Input

	ToEdifactMessageIdentifierOutput() EdifactMessageIdentifierOutput
	ToEdifactMessageIdentifierOutputWithContext(context.Context) EdifactMessageIdentifierOutput
}

type EdifactMessageIdentifierArgs struct {
	// The message id on which this envelope settings has to be applied.
	MessageId pulumi.StringPtrInput `pulumi:"messageId"`
}

func (EdifactMessageIdentifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactMessageIdentifier)(nil)).Elem()
}

func (i EdifactMessageIdentifierArgs) ToEdifactMessageIdentifierOutput() EdifactMessageIdentifierOutput {
	return i.ToEdifactMessageIdentifierOutputWithContext(context.Background())
}

func (i EdifactMessageIdentifierArgs) ToEdifactMessageIdentifierOutputWithContext(ctx context.Context) EdifactMessageIdentifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactMessageIdentifierOutput)
}

// EdifactMessageIdentifierArrayInput is an input type that accepts EdifactMessageIdentifierArray and EdifactMessageIdentifierArrayOutput values.
// You can construct a concrete instance of `EdifactMessageIdentifierArrayInput` via:
//
//          EdifactMessageIdentifierArray{ EdifactMessageIdentifierArgs{...} }
type EdifactMessageIdentifierArrayInput interface {
	pulumi.Input

	ToEdifactMessageIdentifierArrayOutput() EdifactMessageIdentifierArrayOutput
	ToEdifactMessageIdentifierArrayOutputWithContext(context.Context) EdifactMessageIdentifierArrayOutput
}

type EdifactMessageIdentifierArray []EdifactMessageIdentifierInput

func (EdifactMessageIdentifierArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactMessageIdentifier)(nil)).Elem()
}

func (i EdifactMessageIdentifierArray) ToEdifactMessageIdentifierArrayOutput() EdifactMessageIdentifierArrayOutput {
	return i.ToEdifactMessageIdentifierArrayOutputWithContext(context.Background())
}

func (i EdifactMessageIdentifierArray) ToEdifactMessageIdentifierArrayOutputWithContext(ctx context.Context) EdifactMessageIdentifierArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactMessageIdentifierArrayOutput)
}

type EdifactMessageIdentifierResponse struct {
	// The message id on which this envelope settings has to be applied.
	MessageId *string `pulumi:"messageId"`
}

type EdifactMessageIdentifierResponseOutput struct{ *pulumi.OutputState }

func (EdifactMessageIdentifierResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactMessageIdentifierResponse)(nil)).Elem()
}

func (o EdifactMessageIdentifierResponseOutput) ToEdifactMessageIdentifierResponseOutput() EdifactMessageIdentifierResponseOutput {
	return o
}

func (o EdifactMessageIdentifierResponseOutput) ToEdifactMessageIdentifierResponseOutputWithContext(ctx context.Context) EdifactMessageIdentifierResponseOutput {
	return o
}

// The message id on which this envelope settings has to be applied.
func (o EdifactMessageIdentifierResponseOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactMessageIdentifierResponse) *string { return v.MessageId }).(pulumi.StringPtrOutput)
}

type EdifactMessageIdentifierResponseArrayOutput struct{ *pulumi.OutputState }

func (EdifactMessageIdentifierResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactMessageIdentifierResponse)(nil)).Elem()
}

func (o EdifactMessageIdentifierResponseArrayOutput) ToEdifactMessageIdentifierResponseArrayOutput() EdifactMessageIdentifierResponseArrayOutput {
	return o
}

func (o EdifactMessageIdentifierResponseArrayOutput) ToEdifactMessageIdentifierResponseArrayOutputWithContext(ctx context.Context) EdifactMessageIdentifierResponseArrayOutput {
	return o
}

func (o EdifactMessageIdentifierResponseArrayOutput) Index(i pulumi.IntInput) EdifactMessageIdentifierResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdifactMessageIdentifierResponse {
		return vs[0].([]EdifactMessageIdentifierResponse)[vs[1].(int)]
	}).(EdifactMessageIdentifierResponseOutput)
}

type EdifactOneWayAgreement struct {
	// The EDIFACT protocol settings.
	ProtocolSettings *EdifactProtocolSettings `pulumi:"protocolSettings"`
	// The receiver business identity
	ReceiverBusinessIdentity *BusinessIdentity `pulumi:"receiverBusinessIdentity"`
	// The sender business identity
	SenderBusinessIdentity *BusinessIdentity `pulumi:"senderBusinessIdentity"`
}

// EdifactOneWayAgreementInput is an input type that accepts EdifactOneWayAgreementArgs and EdifactOneWayAgreementOutput values.
// You can construct a concrete instance of `EdifactOneWayAgreementInput` via:
//
//          EdifactOneWayAgreementArgs{...}
type EdifactOneWayAgreementInput interface {
	pulumi.Input

	ToEdifactOneWayAgreementOutput() EdifactOneWayAgreementOutput
	ToEdifactOneWayAgreementOutputWithContext(context.Context) EdifactOneWayAgreementOutput
}

type EdifactOneWayAgreementArgs struct {
	// The EDIFACT protocol settings.
	ProtocolSettings EdifactProtocolSettingsPtrInput `pulumi:"protocolSettings"`
	// The receiver business identity
	ReceiverBusinessIdentity BusinessIdentityPtrInput `pulumi:"receiverBusinessIdentity"`
	// The sender business identity
	SenderBusinessIdentity BusinessIdentityPtrInput `pulumi:"senderBusinessIdentity"`
}

func (EdifactOneWayAgreementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactOneWayAgreement)(nil)).Elem()
}

func (i EdifactOneWayAgreementArgs) ToEdifactOneWayAgreementOutput() EdifactOneWayAgreementOutput {
	return i.ToEdifactOneWayAgreementOutputWithContext(context.Background())
}

func (i EdifactOneWayAgreementArgs) ToEdifactOneWayAgreementOutputWithContext(ctx context.Context) EdifactOneWayAgreementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactOneWayAgreementOutput)
}

func (i EdifactOneWayAgreementArgs) ToEdifactOneWayAgreementPtrOutput() EdifactOneWayAgreementPtrOutput {
	return i.ToEdifactOneWayAgreementPtrOutputWithContext(context.Background())
}

func (i EdifactOneWayAgreementArgs) ToEdifactOneWayAgreementPtrOutputWithContext(ctx context.Context) EdifactOneWayAgreementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactOneWayAgreementOutput).ToEdifactOneWayAgreementPtrOutputWithContext(ctx)
}

// EdifactOneWayAgreementPtrInput is an input type that accepts EdifactOneWayAgreementArgs, EdifactOneWayAgreementPtr and EdifactOneWayAgreementPtrOutput values.
// You can construct a concrete instance of `EdifactOneWayAgreementPtrInput` via:
//
//          EdifactOneWayAgreementArgs{...}
//
//  or:
//
//          nil
type EdifactOneWayAgreementPtrInput interface {
	pulumi.Input

	ToEdifactOneWayAgreementPtrOutput() EdifactOneWayAgreementPtrOutput
	ToEdifactOneWayAgreementPtrOutputWithContext(context.Context) EdifactOneWayAgreementPtrOutput
}

type edifactOneWayAgreementPtrType EdifactOneWayAgreementArgs

func EdifactOneWayAgreementPtr(v *EdifactOneWayAgreementArgs) EdifactOneWayAgreementPtrInput {
	return (*edifactOneWayAgreementPtrType)(v)
}

func (*edifactOneWayAgreementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactOneWayAgreement)(nil)).Elem()
}

func (i *edifactOneWayAgreementPtrType) ToEdifactOneWayAgreementPtrOutput() EdifactOneWayAgreementPtrOutput {
	return i.ToEdifactOneWayAgreementPtrOutputWithContext(context.Background())
}

func (i *edifactOneWayAgreementPtrType) ToEdifactOneWayAgreementPtrOutputWithContext(ctx context.Context) EdifactOneWayAgreementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactOneWayAgreementPtrOutput)
}

type EdifactOneWayAgreementResponse struct {
	// The EDIFACT protocol settings.
	ProtocolSettings *EdifactProtocolSettingsResponse `pulumi:"protocolSettings"`
	// The receiver business identity
	ReceiverBusinessIdentity *BusinessIdentityResponse `pulumi:"receiverBusinessIdentity"`
	// The sender business identity
	SenderBusinessIdentity *BusinessIdentityResponse `pulumi:"senderBusinessIdentity"`
}

type EdifactOneWayAgreementResponseOutput struct{ *pulumi.OutputState }

func (EdifactOneWayAgreementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactOneWayAgreementResponse)(nil)).Elem()
}

func (o EdifactOneWayAgreementResponseOutput) ToEdifactOneWayAgreementResponseOutput() EdifactOneWayAgreementResponseOutput {
	return o
}

func (o EdifactOneWayAgreementResponseOutput) ToEdifactOneWayAgreementResponseOutputWithContext(ctx context.Context) EdifactOneWayAgreementResponseOutput {
	return o
}

func (o EdifactOneWayAgreementResponseOutput) ToEdifactOneWayAgreementResponsePtrOutput() EdifactOneWayAgreementResponsePtrOutput {
	return o.ToEdifactOneWayAgreementResponsePtrOutputWithContext(context.Background())
}

func (o EdifactOneWayAgreementResponseOutput) ToEdifactOneWayAgreementResponsePtrOutputWithContext(ctx context.Context) EdifactOneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v EdifactOneWayAgreementResponse) *EdifactOneWayAgreementResponse {
		return &v
	}).(EdifactOneWayAgreementResponsePtrOutput)
}

// The EDIFACT protocol settings.
func (o EdifactOneWayAgreementResponseOutput) ProtocolSettings() EdifactProtocolSettingsResponsePtrOutput {
	return o.ApplyT(func(v EdifactOneWayAgreementResponse) *EdifactProtocolSettingsResponse { return v.ProtocolSettings }).(EdifactProtocolSettingsResponsePtrOutput)
}

// The receiver business identity
func (o EdifactOneWayAgreementResponseOutput) ReceiverBusinessIdentity() BusinessIdentityResponsePtrOutput {
	return o.ApplyT(func(v EdifactOneWayAgreementResponse) *BusinessIdentityResponse { return v.ReceiverBusinessIdentity }).(BusinessIdentityResponsePtrOutput)
}

// The sender business identity
func (o EdifactOneWayAgreementResponseOutput) SenderBusinessIdentity() BusinessIdentityResponsePtrOutput {
	return o.ApplyT(func(v EdifactOneWayAgreementResponse) *BusinessIdentityResponse { return v.SenderBusinessIdentity }).(BusinessIdentityResponsePtrOutput)
}

type EdifactOneWayAgreementResponsePtrOutput struct{ *pulumi.OutputState }

func (EdifactOneWayAgreementResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactOneWayAgreementResponse)(nil)).Elem()
}

func (o EdifactOneWayAgreementResponsePtrOutput) ToEdifactOneWayAgreementResponsePtrOutput() EdifactOneWayAgreementResponsePtrOutput {
	return o
}

func (o EdifactOneWayAgreementResponsePtrOutput) ToEdifactOneWayAgreementResponsePtrOutputWithContext(ctx context.Context) EdifactOneWayAgreementResponsePtrOutput {
	return o
}

func (o EdifactOneWayAgreementResponsePtrOutput) Elem() EdifactOneWayAgreementResponseOutput {
	return o.ApplyT(func(v *EdifactOneWayAgreementResponse) EdifactOneWayAgreementResponse { return *v }).(EdifactOneWayAgreementResponseOutput)
}

// The EDIFACT protocol settings.
func (o EdifactOneWayAgreementResponsePtrOutput) ProtocolSettings() EdifactProtocolSettingsResponsePtrOutput {
	return o.ApplyT(func(v *EdifactOneWayAgreementResponse) *EdifactProtocolSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ProtocolSettings
	}).(EdifactProtocolSettingsResponsePtrOutput)
}

// The receiver business identity
func (o EdifactOneWayAgreementResponsePtrOutput) ReceiverBusinessIdentity() BusinessIdentityResponsePtrOutput {
	return o.ApplyT(func(v *EdifactOneWayAgreementResponse) *BusinessIdentityResponse {
		if v == nil {
			return nil
		}
		return v.ReceiverBusinessIdentity
	}).(BusinessIdentityResponsePtrOutput)
}

// The sender business identity
func (o EdifactOneWayAgreementResponsePtrOutput) SenderBusinessIdentity() BusinessIdentityResponsePtrOutput {
	return o.ApplyT(func(v *EdifactOneWayAgreementResponse) *BusinessIdentityResponse {
		if v == nil {
			return nil
		}
		return v.SenderBusinessIdentity
	}).(BusinessIdentityResponsePtrOutput)
}

type EdifactProcessingSettings struct {
	// The value indicating whether to create empty xml tags for trailing separators.
	CreateEmptyXmlTagsForTrailingSeparators *bool `pulumi:"createEmptyXmlTagsForTrailingSeparators"`
	// The value indicating whether to mask security information.
	MaskSecurityInfo *bool `pulumi:"maskSecurityInfo"`
	// The value indicating whether to preserve interchange.
	PreserveInterchange *bool `pulumi:"preserveInterchange"`
	// The value indicating whether to suspend interchange on error.
	SuspendInterchangeOnError *bool `pulumi:"suspendInterchangeOnError"`
	// The value indicating whether to use dot as decimal separator.
	UseDotAsDecimalSeparator *bool `pulumi:"useDotAsDecimalSeparator"`
}

// EdifactProcessingSettingsInput is an input type that accepts EdifactProcessingSettingsArgs and EdifactProcessingSettingsOutput values.
// You can construct a concrete instance of `EdifactProcessingSettingsInput` via:
//
//          EdifactProcessingSettingsArgs{...}
type EdifactProcessingSettingsInput interface {
	pulumi.Input

	ToEdifactProcessingSettingsOutput() EdifactProcessingSettingsOutput
	ToEdifactProcessingSettingsOutputWithContext(context.Context) EdifactProcessingSettingsOutput
}

type EdifactProcessingSettingsArgs struct {
	// The value indicating whether to create empty xml tags for trailing separators.
	CreateEmptyXmlTagsForTrailingSeparators pulumi.BoolPtrInput `pulumi:"createEmptyXmlTagsForTrailingSeparators"`
	// The value indicating whether to mask security information.
	MaskSecurityInfo pulumi.BoolPtrInput `pulumi:"maskSecurityInfo"`
	// The value indicating whether to preserve interchange.
	PreserveInterchange pulumi.BoolPtrInput `pulumi:"preserveInterchange"`
	// The value indicating whether to suspend interchange on error.
	SuspendInterchangeOnError pulumi.BoolPtrInput `pulumi:"suspendInterchangeOnError"`
	// The value indicating whether to use dot as decimal separator.
	UseDotAsDecimalSeparator pulumi.BoolPtrInput `pulumi:"useDotAsDecimalSeparator"`
}

func (EdifactProcessingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactProcessingSettings)(nil)).Elem()
}

func (i EdifactProcessingSettingsArgs) ToEdifactProcessingSettingsOutput() EdifactProcessingSettingsOutput {
	return i.ToEdifactProcessingSettingsOutputWithContext(context.Background())
}

func (i EdifactProcessingSettingsArgs) ToEdifactProcessingSettingsOutputWithContext(ctx context.Context) EdifactProcessingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactProcessingSettingsOutput)
}

func (i EdifactProcessingSettingsArgs) ToEdifactProcessingSettingsPtrOutput() EdifactProcessingSettingsPtrOutput {
	return i.ToEdifactProcessingSettingsPtrOutputWithContext(context.Background())
}

func (i EdifactProcessingSettingsArgs) ToEdifactProcessingSettingsPtrOutputWithContext(ctx context.Context) EdifactProcessingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactProcessingSettingsOutput).ToEdifactProcessingSettingsPtrOutputWithContext(ctx)
}

// EdifactProcessingSettingsPtrInput is an input type that accepts EdifactProcessingSettingsArgs, EdifactProcessingSettingsPtr and EdifactProcessingSettingsPtrOutput values.
// You can construct a concrete instance of `EdifactProcessingSettingsPtrInput` via:
//
//          EdifactProcessingSettingsArgs{...}
//
//  or:
//
//          nil
type EdifactProcessingSettingsPtrInput interface {
	pulumi.Input

	ToEdifactProcessingSettingsPtrOutput() EdifactProcessingSettingsPtrOutput
	ToEdifactProcessingSettingsPtrOutputWithContext(context.Context) EdifactProcessingSettingsPtrOutput
}

type edifactProcessingSettingsPtrType EdifactProcessingSettingsArgs

func EdifactProcessingSettingsPtr(v *EdifactProcessingSettingsArgs) EdifactProcessingSettingsPtrInput {
	return (*edifactProcessingSettingsPtrType)(v)
}

func (*edifactProcessingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactProcessingSettings)(nil)).Elem()
}

func (i *edifactProcessingSettingsPtrType) ToEdifactProcessingSettingsPtrOutput() EdifactProcessingSettingsPtrOutput {
	return i.ToEdifactProcessingSettingsPtrOutputWithContext(context.Background())
}

func (i *edifactProcessingSettingsPtrType) ToEdifactProcessingSettingsPtrOutputWithContext(ctx context.Context) EdifactProcessingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactProcessingSettingsPtrOutput)
}

type EdifactProcessingSettingsResponse struct {
	// The value indicating whether to create empty xml tags for trailing separators.
	CreateEmptyXmlTagsForTrailingSeparators *bool `pulumi:"createEmptyXmlTagsForTrailingSeparators"`
	// The value indicating whether to mask security information.
	MaskSecurityInfo *bool `pulumi:"maskSecurityInfo"`
	// The value indicating whether to preserve interchange.
	PreserveInterchange *bool `pulumi:"preserveInterchange"`
	// The value indicating whether to suspend interchange on error.
	SuspendInterchangeOnError *bool `pulumi:"suspendInterchangeOnError"`
	// The value indicating whether to use dot as decimal separator.
	UseDotAsDecimalSeparator *bool `pulumi:"useDotAsDecimalSeparator"`
}

type EdifactProcessingSettingsResponseOutput struct{ *pulumi.OutputState }

func (EdifactProcessingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactProcessingSettingsResponse)(nil)).Elem()
}

func (o EdifactProcessingSettingsResponseOutput) ToEdifactProcessingSettingsResponseOutput() EdifactProcessingSettingsResponseOutput {
	return o
}

func (o EdifactProcessingSettingsResponseOutput) ToEdifactProcessingSettingsResponseOutputWithContext(ctx context.Context) EdifactProcessingSettingsResponseOutput {
	return o
}

func (o EdifactProcessingSettingsResponseOutput) ToEdifactProcessingSettingsResponsePtrOutput() EdifactProcessingSettingsResponsePtrOutput {
	return o.ToEdifactProcessingSettingsResponsePtrOutputWithContext(context.Background())
}

func (o EdifactProcessingSettingsResponseOutput) ToEdifactProcessingSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactProcessingSettingsResponsePtrOutput {
	return o.ApplyT(func(v EdifactProcessingSettingsResponse) *EdifactProcessingSettingsResponse {
		return &v
	}).(EdifactProcessingSettingsResponsePtrOutput)
}

// The value indicating whether to create empty xml tags for trailing separators.
func (o EdifactProcessingSettingsResponseOutput) CreateEmptyXmlTagsForTrailingSeparators() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactProcessingSettingsResponse) *bool { return v.CreateEmptyXmlTagsForTrailingSeparators }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to mask security information.
func (o EdifactProcessingSettingsResponseOutput) MaskSecurityInfo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactProcessingSettingsResponse) *bool { return v.MaskSecurityInfo }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to preserve interchange.
func (o EdifactProcessingSettingsResponseOutput) PreserveInterchange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactProcessingSettingsResponse) *bool { return v.PreserveInterchange }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to suspend interchange on error.
func (o EdifactProcessingSettingsResponseOutput) SuspendInterchangeOnError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactProcessingSettingsResponse) *bool { return v.SuspendInterchangeOnError }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to use dot as decimal separator.
func (o EdifactProcessingSettingsResponseOutput) UseDotAsDecimalSeparator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactProcessingSettingsResponse) *bool { return v.UseDotAsDecimalSeparator }).(pulumi.BoolPtrOutput)
}

type EdifactProcessingSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (EdifactProcessingSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactProcessingSettingsResponse)(nil)).Elem()
}

func (o EdifactProcessingSettingsResponsePtrOutput) ToEdifactProcessingSettingsResponsePtrOutput() EdifactProcessingSettingsResponsePtrOutput {
	return o
}

func (o EdifactProcessingSettingsResponsePtrOutput) ToEdifactProcessingSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactProcessingSettingsResponsePtrOutput {
	return o
}

func (o EdifactProcessingSettingsResponsePtrOutput) Elem() EdifactProcessingSettingsResponseOutput {
	return o.ApplyT(func(v *EdifactProcessingSettingsResponse) EdifactProcessingSettingsResponse { return *v }).(EdifactProcessingSettingsResponseOutput)
}

// The value indicating whether to create empty xml tags for trailing separators.
func (o EdifactProcessingSettingsResponsePtrOutput) CreateEmptyXmlTagsForTrailingSeparators() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactProcessingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CreateEmptyXmlTagsForTrailingSeparators
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to mask security information.
func (o EdifactProcessingSettingsResponsePtrOutput) MaskSecurityInfo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactProcessingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.MaskSecurityInfo
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to preserve interchange.
func (o EdifactProcessingSettingsResponsePtrOutput) PreserveInterchange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactProcessingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.PreserveInterchange
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to suspend interchange on error.
func (o EdifactProcessingSettingsResponsePtrOutput) SuspendInterchangeOnError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactProcessingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SuspendInterchangeOnError
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to use dot as decimal separator.
func (o EdifactProcessingSettingsResponsePtrOutput) UseDotAsDecimalSeparator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactProcessingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.UseDotAsDecimalSeparator
	}).(pulumi.BoolPtrOutput)
}

type EdifactProtocolSettings struct {
	// The EDIFACT acknowledgement settings.
	AcknowledgementSettings *EdifactAcknowledgementSettings `pulumi:"acknowledgementSettings"`
	// The EDIFACT delimiter override settings.
	EdifactDelimiterOverrides []EdifactDelimiterOverride `pulumi:"edifactDelimiterOverrides"`
	// The EDIFACT envelope override settings.
	EnvelopeOverrides []EdifactEnvelopeOverride `pulumi:"envelopeOverrides"`
	// The EDIFACT envelope settings.
	EnvelopeSettings *EdifactEnvelopeSettings `pulumi:"envelopeSettings"`
	// The EDIFACT framing settings.
	FramingSettings *EdifactFramingSettings `pulumi:"framingSettings"`
	// The EDIFACT message filter.
	MessageFilter *EdifactMessageFilter `pulumi:"messageFilter"`
	// The EDIFACT message filter list.
	MessageFilterList []EdifactMessageIdentifier `pulumi:"messageFilterList"`
	// The EDIFACT processing Settings.
	ProcessingSettings *EdifactProcessingSettings `pulumi:"processingSettings"`
	// The EDIFACT schema references.
	SchemaReferences []EdifactSchemaReference `pulumi:"schemaReferences"`
	// The EDIFACT validation override settings.
	ValidationOverrides []EdifactValidationOverride `pulumi:"validationOverrides"`
	// The EDIFACT validation settings.
	ValidationSettings *EdifactValidationSettings `pulumi:"validationSettings"`
}

// EdifactProtocolSettingsInput is an input type that accepts EdifactProtocolSettingsArgs and EdifactProtocolSettingsOutput values.
// You can construct a concrete instance of `EdifactProtocolSettingsInput` via:
//
//          EdifactProtocolSettingsArgs{...}
type EdifactProtocolSettingsInput interface {
	pulumi.Input

	ToEdifactProtocolSettingsOutput() EdifactProtocolSettingsOutput
	ToEdifactProtocolSettingsOutputWithContext(context.Context) EdifactProtocolSettingsOutput
}

type EdifactProtocolSettingsArgs struct {
	// The EDIFACT acknowledgement settings.
	AcknowledgementSettings EdifactAcknowledgementSettingsPtrInput `pulumi:"acknowledgementSettings"`
	// The EDIFACT delimiter override settings.
	EdifactDelimiterOverrides EdifactDelimiterOverrideArrayInput `pulumi:"edifactDelimiterOverrides"`
	// The EDIFACT envelope override settings.
	EnvelopeOverrides EdifactEnvelopeOverrideArrayInput `pulumi:"envelopeOverrides"`
	// The EDIFACT envelope settings.
	EnvelopeSettings EdifactEnvelopeSettingsPtrInput `pulumi:"envelopeSettings"`
	// The EDIFACT framing settings.
	FramingSettings EdifactFramingSettingsPtrInput `pulumi:"framingSettings"`
	// The EDIFACT message filter.
	MessageFilter EdifactMessageFilterPtrInput `pulumi:"messageFilter"`
	// The EDIFACT message filter list.
	MessageFilterList EdifactMessageIdentifierArrayInput `pulumi:"messageFilterList"`
	// The EDIFACT processing Settings.
	ProcessingSettings EdifactProcessingSettingsPtrInput `pulumi:"processingSettings"`
	// The EDIFACT schema references.
	SchemaReferences EdifactSchemaReferenceArrayInput `pulumi:"schemaReferences"`
	// The EDIFACT validation override settings.
	ValidationOverrides EdifactValidationOverrideArrayInput `pulumi:"validationOverrides"`
	// The EDIFACT validation settings.
	ValidationSettings EdifactValidationSettingsPtrInput `pulumi:"validationSettings"`
}

func (EdifactProtocolSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactProtocolSettings)(nil)).Elem()
}

func (i EdifactProtocolSettingsArgs) ToEdifactProtocolSettingsOutput() EdifactProtocolSettingsOutput {
	return i.ToEdifactProtocolSettingsOutputWithContext(context.Background())
}

func (i EdifactProtocolSettingsArgs) ToEdifactProtocolSettingsOutputWithContext(ctx context.Context) EdifactProtocolSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactProtocolSettingsOutput)
}

func (i EdifactProtocolSettingsArgs) ToEdifactProtocolSettingsPtrOutput() EdifactProtocolSettingsPtrOutput {
	return i.ToEdifactProtocolSettingsPtrOutputWithContext(context.Background())
}

func (i EdifactProtocolSettingsArgs) ToEdifactProtocolSettingsPtrOutputWithContext(ctx context.Context) EdifactProtocolSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactProtocolSettingsOutput).ToEdifactProtocolSettingsPtrOutputWithContext(ctx)
}

// EdifactProtocolSettingsPtrInput is an input type that accepts EdifactProtocolSettingsArgs, EdifactProtocolSettingsPtr and EdifactProtocolSettingsPtrOutput values.
// You can construct a concrete instance of `EdifactProtocolSettingsPtrInput` via:
//
//          EdifactProtocolSettingsArgs{...}
//
//  or:
//
//          nil
type EdifactProtocolSettingsPtrInput interface {
	pulumi.Input

	ToEdifactProtocolSettingsPtrOutput() EdifactProtocolSettingsPtrOutput
	ToEdifactProtocolSettingsPtrOutputWithContext(context.Context) EdifactProtocolSettingsPtrOutput
}

type edifactProtocolSettingsPtrType EdifactProtocolSettingsArgs

func EdifactProtocolSettingsPtr(v *EdifactProtocolSettingsArgs) EdifactProtocolSettingsPtrInput {
	return (*edifactProtocolSettingsPtrType)(v)
}

func (*edifactProtocolSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactProtocolSettings)(nil)).Elem()
}

func (i *edifactProtocolSettingsPtrType) ToEdifactProtocolSettingsPtrOutput() EdifactProtocolSettingsPtrOutput {
	return i.ToEdifactProtocolSettingsPtrOutputWithContext(context.Background())
}

func (i *edifactProtocolSettingsPtrType) ToEdifactProtocolSettingsPtrOutputWithContext(ctx context.Context) EdifactProtocolSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactProtocolSettingsPtrOutput)
}

type EdifactProtocolSettingsResponse struct {
	// The EDIFACT acknowledgement settings.
	AcknowledgementSettings *EdifactAcknowledgementSettingsResponse `pulumi:"acknowledgementSettings"`
	// The EDIFACT delimiter override settings.
	EdifactDelimiterOverrides []EdifactDelimiterOverrideResponse `pulumi:"edifactDelimiterOverrides"`
	// The EDIFACT envelope override settings.
	EnvelopeOverrides []EdifactEnvelopeOverrideResponse `pulumi:"envelopeOverrides"`
	// The EDIFACT envelope settings.
	EnvelopeSettings *EdifactEnvelopeSettingsResponse `pulumi:"envelopeSettings"`
	// The EDIFACT framing settings.
	FramingSettings *EdifactFramingSettingsResponse `pulumi:"framingSettings"`
	// The EDIFACT message filter.
	MessageFilter *EdifactMessageFilterResponse `pulumi:"messageFilter"`
	// The EDIFACT message filter list.
	MessageFilterList []EdifactMessageIdentifierResponse `pulumi:"messageFilterList"`
	// The EDIFACT processing Settings.
	ProcessingSettings *EdifactProcessingSettingsResponse `pulumi:"processingSettings"`
	// The EDIFACT schema references.
	SchemaReferences []EdifactSchemaReferenceResponse `pulumi:"schemaReferences"`
	// The EDIFACT validation override settings.
	ValidationOverrides []EdifactValidationOverrideResponse `pulumi:"validationOverrides"`
	// The EDIFACT validation settings.
	ValidationSettings *EdifactValidationSettingsResponse `pulumi:"validationSettings"`
}

type EdifactProtocolSettingsResponseOutput struct{ *pulumi.OutputState }

func (EdifactProtocolSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactProtocolSettingsResponse)(nil)).Elem()
}

func (o EdifactProtocolSettingsResponseOutput) ToEdifactProtocolSettingsResponseOutput() EdifactProtocolSettingsResponseOutput {
	return o
}

func (o EdifactProtocolSettingsResponseOutput) ToEdifactProtocolSettingsResponseOutputWithContext(ctx context.Context) EdifactProtocolSettingsResponseOutput {
	return o
}

func (o EdifactProtocolSettingsResponseOutput) ToEdifactProtocolSettingsResponsePtrOutput() EdifactProtocolSettingsResponsePtrOutput {
	return o.ToEdifactProtocolSettingsResponsePtrOutputWithContext(context.Background())
}

func (o EdifactProtocolSettingsResponseOutput) ToEdifactProtocolSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactProtocolSettingsResponsePtrOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) *EdifactProtocolSettingsResponse {
		return &v
	}).(EdifactProtocolSettingsResponsePtrOutput)
}

// The EDIFACT acknowledgement settings.
func (o EdifactProtocolSettingsResponseOutput) AcknowledgementSettings() EdifactAcknowledgementSettingsResponsePtrOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) *EdifactAcknowledgementSettingsResponse {
		return v.AcknowledgementSettings
	}).(EdifactAcknowledgementSettingsResponsePtrOutput)
}

// The EDIFACT delimiter override settings.
func (o EdifactProtocolSettingsResponseOutput) EdifactDelimiterOverrides() EdifactDelimiterOverrideResponseArrayOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) []EdifactDelimiterOverrideResponse {
		return v.EdifactDelimiterOverrides
	}).(EdifactDelimiterOverrideResponseArrayOutput)
}

// The EDIFACT envelope override settings.
func (o EdifactProtocolSettingsResponseOutput) EnvelopeOverrides() EdifactEnvelopeOverrideResponseArrayOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) []EdifactEnvelopeOverrideResponse { return v.EnvelopeOverrides }).(EdifactEnvelopeOverrideResponseArrayOutput)
}

// The EDIFACT envelope settings.
func (o EdifactProtocolSettingsResponseOutput) EnvelopeSettings() EdifactEnvelopeSettingsResponsePtrOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) *EdifactEnvelopeSettingsResponse { return v.EnvelopeSettings }).(EdifactEnvelopeSettingsResponsePtrOutput)
}

// The EDIFACT framing settings.
func (o EdifactProtocolSettingsResponseOutput) FramingSettings() EdifactFramingSettingsResponsePtrOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) *EdifactFramingSettingsResponse { return v.FramingSettings }).(EdifactFramingSettingsResponsePtrOutput)
}

// The EDIFACT message filter.
func (o EdifactProtocolSettingsResponseOutput) MessageFilter() EdifactMessageFilterResponsePtrOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) *EdifactMessageFilterResponse { return v.MessageFilter }).(EdifactMessageFilterResponsePtrOutput)
}

// The EDIFACT message filter list.
func (o EdifactProtocolSettingsResponseOutput) MessageFilterList() EdifactMessageIdentifierResponseArrayOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) []EdifactMessageIdentifierResponse { return v.MessageFilterList }).(EdifactMessageIdentifierResponseArrayOutput)
}

// The EDIFACT processing Settings.
func (o EdifactProtocolSettingsResponseOutput) ProcessingSettings() EdifactProcessingSettingsResponsePtrOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) *EdifactProcessingSettingsResponse {
		return v.ProcessingSettings
	}).(EdifactProcessingSettingsResponsePtrOutput)
}

// The EDIFACT schema references.
func (o EdifactProtocolSettingsResponseOutput) SchemaReferences() EdifactSchemaReferenceResponseArrayOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) []EdifactSchemaReferenceResponse { return v.SchemaReferences }).(EdifactSchemaReferenceResponseArrayOutput)
}

// The EDIFACT validation override settings.
func (o EdifactProtocolSettingsResponseOutput) ValidationOverrides() EdifactValidationOverrideResponseArrayOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) []EdifactValidationOverrideResponse {
		return v.ValidationOverrides
	}).(EdifactValidationOverrideResponseArrayOutput)
}

// The EDIFACT validation settings.
func (o EdifactProtocolSettingsResponseOutput) ValidationSettings() EdifactValidationSettingsResponsePtrOutput {
	return o.ApplyT(func(v EdifactProtocolSettingsResponse) *EdifactValidationSettingsResponse {
		return v.ValidationSettings
	}).(EdifactValidationSettingsResponsePtrOutput)
}

type EdifactProtocolSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (EdifactProtocolSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactProtocolSettingsResponse)(nil)).Elem()
}

func (o EdifactProtocolSettingsResponsePtrOutput) ToEdifactProtocolSettingsResponsePtrOutput() EdifactProtocolSettingsResponsePtrOutput {
	return o
}

func (o EdifactProtocolSettingsResponsePtrOutput) ToEdifactProtocolSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactProtocolSettingsResponsePtrOutput {
	return o
}

func (o EdifactProtocolSettingsResponsePtrOutput) Elem() EdifactProtocolSettingsResponseOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) EdifactProtocolSettingsResponse { return *v }).(EdifactProtocolSettingsResponseOutput)
}

// The EDIFACT acknowledgement settings.
func (o EdifactProtocolSettingsResponsePtrOutput) AcknowledgementSettings() EdifactAcknowledgementSettingsResponsePtrOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) *EdifactAcknowledgementSettingsResponse {
		if v == nil {
			return nil
		}
		return v.AcknowledgementSettings
	}).(EdifactAcknowledgementSettingsResponsePtrOutput)
}

// The EDIFACT delimiter override settings.
func (o EdifactProtocolSettingsResponsePtrOutput) EdifactDelimiterOverrides() EdifactDelimiterOverrideResponseArrayOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) []EdifactDelimiterOverrideResponse {
		if v == nil {
			return nil
		}
		return v.EdifactDelimiterOverrides
	}).(EdifactDelimiterOverrideResponseArrayOutput)
}

// The EDIFACT envelope override settings.
func (o EdifactProtocolSettingsResponsePtrOutput) EnvelopeOverrides() EdifactEnvelopeOverrideResponseArrayOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) []EdifactEnvelopeOverrideResponse {
		if v == nil {
			return nil
		}
		return v.EnvelopeOverrides
	}).(EdifactEnvelopeOverrideResponseArrayOutput)
}

// The EDIFACT envelope settings.
func (o EdifactProtocolSettingsResponsePtrOutput) EnvelopeSettings() EdifactEnvelopeSettingsResponsePtrOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) *EdifactEnvelopeSettingsResponse {
		if v == nil {
			return nil
		}
		return v.EnvelopeSettings
	}).(EdifactEnvelopeSettingsResponsePtrOutput)
}

// The EDIFACT framing settings.
func (o EdifactProtocolSettingsResponsePtrOutput) FramingSettings() EdifactFramingSettingsResponsePtrOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) *EdifactFramingSettingsResponse {
		if v == nil {
			return nil
		}
		return v.FramingSettings
	}).(EdifactFramingSettingsResponsePtrOutput)
}

// The EDIFACT message filter.
func (o EdifactProtocolSettingsResponsePtrOutput) MessageFilter() EdifactMessageFilterResponsePtrOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) *EdifactMessageFilterResponse {
		if v == nil {
			return nil
		}
		return v.MessageFilter
	}).(EdifactMessageFilterResponsePtrOutput)
}

// The EDIFACT message filter list.
func (o EdifactProtocolSettingsResponsePtrOutput) MessageFilterList() EdifactMessageIdentifierResponseArrayOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) []EdifactMessageIdentifierResponse {
		if v == nil {
			return nil
		}
		return v.MessageFilterList
	}).(EdifactMessageIdentifierResponseArrayOutput)
}

// The EDIFACT processing Settings.
func (o EdifactProtocolSettingsResponsePtrOutput) ProcessingSettings() EdifactProcessingSettingsResponsePtrOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) *EdifactProcessingSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ProcessingSettings
	}).(EdifactProcessingSettingsResponsePtrOutput)
}

// The EDIFACT schema references.
func (o EdifactProtocolSettingsResponsePtrOutput) SchemaReferences() EdifactSchemaReferenceResponseArrayOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) []EdifactSchemaReferenceResponse {
		if v == nil {
			return nil
		}
		return v.SchemaReferences
	}).(EdifactSchemaReferenceResponseArrayOutput)
}

// The EDIFACT validation override settings.
func (o EdifactProtocolSettingsResponsePtrOutput) ValidationOverrides() EdifactValidationOverrideResponseArrayOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) []EdifactValidationOverrideResponse {
		if v == nil {
			return nil
		}
		return v.ValidationOverrides
	}).(EdifactValidationOverrideResponseArrayOutput)
}

// The EDIFACT validation settings.
func (o EdifactProtocolSettingsResponsePtrOutput) ValidationSettings() EdifactValidationSettingsResponsePtrOutput {
	return o.ApplyT(func(v *EdifactProtocolSettingsResponse) *EdifactValidationSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ValidationSettings
	}).(EdifactValidationSettingsResponsePtrOutput)
}

type EdifactSchemaReference struct {
	// The association assigned code.
	AssociationAssignedCode *string `pulumi:"associationAssignedCode"`
	// The message id.
	MessageId *string `pulumi:"messageId"`
	// The message release version.
	MessageRelease *string `pulumi:"messageRelease"`
	// The message version.
	MessageVersion *string `pulumi:"messageVersion"`
	// The schema name.
	SchemaName *string `pulumi:"schemaName"`
	// The sender application id.
	SenderApplicationId *string `pulumi:"senderApplicationId"`
	// The sender application qualifier.
	SenderApplicationQualifier *string `pulumi:"senderApplicationQualifier"`
}

// EdifactSchemaReferenceInput is an input type that accepts EdifactSchemaReferenceArgs and EdifactSchemaReferenceOutput values.
// You can construct a concrete instance of `EdifactSchemaReferenceInput` via:
//
//          EdifactSchemaReferenceArgs{...}
type EdifactSchemaReferenceInput interface {
	pulumi.Input

	ToEdifactSchemaReferenceOutput() EdifactSchemaReferenceOutput
	ToEdifactSchemaReferenceOutputWithContext(context.Context) EdifactSchemaReferenceOutput
}

type EdifactSchemaReferenceArgs struct {
	// The association assigned code.
	AssociationAssignedCode pulumi.StringPtrInput `pulumi:"associationAssignedCode"`
	// The message id.
	MessageId pulumi.StringPtrInput `pulumi:"messageId"`
	// The message release version.
	MessageRelease pulumi.StringPtrInput `pulumi:"messageRelease"`
	// The message version.
	MessageVersion pulumi.StringPtrInput `pulumi:"messageVersion"`
	// The schema name.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
	// The sender application id.
	SenderApplicationId pulumi.StringPtrInput `pulumi:"senderApplicationId"`
	// The sender application qualifier.
	SenderApplicationQualifier pulumi.StringPtrInput `pulumi:"senderApplicationQualifier"`
}

func (EdifactSchemaReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactSchemaReference)(nil)).Elem()
}

func (i EdifactSchemaReferenceArgs) ToEdifactSchemaReferenceOutput() EdifactSchemaReferenceOutput {
	return i.ToEdifactSchemaReferenceOutputWithContext(context.Background())
}

func (i EdifactSchemaReferenceArgs) ToEdifactSchemaReferenceOutputWithContext(ctx context.Context) EdifactSchemaReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactSchemaReferenceOutput)
}

// EdifactSchemaReferenceArrayInput is an input type that accepts EdifactSchemaReferenceArray and EdifactSchemaReferenceArrayOutput values.
// You can construct a concrete instance of `EdifactSchemaReferenceArrayInput` via:
//
//          EdifactSchemaReferenceArray{ EdifactSchemaReferenceArgs{...} }
type EdifactSchemaReferenceArrayInput interface {
	pulumi.Input

	ToEdifactSchemaReferenceArrayOutput() EdifactSchemaReferenceArrayOutput
	ToEdifactSchemaReferenceArrayOutputWithContext(context.Context) EdifactSchemaReferenceArrayOutput
}

type EdifactSchemaReferenceArray []EdifactSchemaReferenceInput

func (EdifactSchemaReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactSchemaReference)(nil)).Elem()
}

func (i EdifactSchemaReferenceArray) ToEdifactSchemaReferenceArrayOutput() EdifactSchemaReferenceArrayOutput {
	return i.ToEdifactSchemaReferenceArrayOutputWithContext(context.Background())
}

func (i EdifactSchemaReferenceArray) ToEdifactSchemaReferenceArrayOutputWithContext(ctx context.Context) EdifactSchemaReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactSchemaReferenceArrayOutput)
}

type EdifactSchemaReferenceResponse struct {
	// The association assigned code.
	AssociationAssignedCode *string `pulumi:"associationAssignedCode"`
	// The message id.
	MessageId *string `pulumi:"messageId"`
	// The message release version.
	MessageRelease *string `pulumi:"messageRelease"`
	// The message version.
	MessageVersion *string `pulumi:"messageVersion"`
	// The schema name.
	SchemaName *string `pulumi:"schemaName"`
	// The sender application id.
	SenderApplicationId *string `pulumi:"senderApplicationId"`
	// The sender application qualifier.
	SenderApplicationQualifier *string `pulumi:"senderApplicationQualifier"`
}

type EdifactSchemaReferenceResponseOutput struct{ *pulumi.OutputState }

func (EdifactSchemaReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactSchemaReferenceResponse)(nil)).Elem()
}

func (o EdifactSchemaReferenceResponseOutput) ToEdifactSchemaReferenceResponseOutput() EdifactSchemaReferenceResponseOutput {
	return o
}

func (o EdifactSchemaReferenceResponseOutput) ToEdifactSchemaReferenceResponseOutputWithContext(ctx context.Context) EdifactSchemaReferenceResponseOutput {
	return o
}

// The association assigned code.
func (o EdifactSchemaReferenceResponseOutput) AssociationAssignedCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactSchemaReferenceResponse) *string { return v.AssociationAssignedCode }).(pulumi.StringPtrOutput)
}

// The message id.
func (o EdifactSchemaReferenceResponseOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactSchemaReferenceResponse) *string { return v.MessageId }).(pulumi.StringPtrOutput)
}

// The message release version.
func (o EdifactSchemaReferenceResponseOutput) MessageRelease() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactSchemaReferenceResponse) *string { return v.MessageRelease }).(pulumi.StringPtrOutput)
}

// The message version.
func (o EdifactSchemaReferenceResponseOutput) MessageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactSchemaReferenceResponse) *string { return v.MessageVersion }).(pulumi.StringPtrOutput)
}

// The schema name.
func (o EdifactSchemaReferenceResponseOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactSchemaReferenceResponse) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

// The sender application id.
func (o EdifactSchemaReferenceResponseOutput) SenderApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactSchemaReferenceResponse) *string { return v.SenderApplicationId }).(pulumi.StringPtrOutput)
}

// The sender application qualifier.
func (o EdifactSchemaReferenceResponseOutput) SenderApplicationQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactSchemaReferenceResponse) *string { return v.SenderApplicationQualifier }).(pulumi.StringPtrOutput)
}

type EdifactSchemaReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (EdifactSchemaReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactSchemaReferenceResponse)(nil)).Elem()
}

func (o EdifactSchemaReferenceResponseArrayOutput) ToEdifactSchemaReferenceResponseArrayOutput() EdifactSchemaReferenceResponseArrayOutput {
	return o
}

func (o EdifactSchemaReferenceResponseArrayOutput) ToEdifactSchemaReferenceResponseArrayOutputWithContext(ctx context.Context) EdifactSchemaReferenceResponseArrayOutput {
	return o
}

func (o EdifactSchemaReferenceResponseArrayOutput) Index(i pulumi.IntInput) EdifactSchemaReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdifactSchemaReferenceResponse {
		return vs[0].([]EdifactSchemaReferenceResponse)[vs[1].(int)]
	}).(EdifactSchemaReferenceResponseOutput)
}

type EdifactValidationOverride struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes *bool `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character Set.
	EnforceCharacterSet *bool `pulumi:"enforceCharacterSet"`
	// The message id on which the validation settings has to be applied.
	MessageId *string `pulumi:"messageId"`
	// The trailing separator policy.
	TrailingSeparatorPolicy *string `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes *bool `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate EDI types.
	ValidateEDITypes *bool `pulumi:"validateEDITypes"`
	// The value indicating whether to validate XSD types.
	ValidateXSDTypes *bool `pulumi:"validateXSDTypes"`
}

// EdifactValidationOverrideInput is an input type that accepts EdifactValidationOverrideArgs and EdifactValidationOverrideOutput values.
// You can construct a concrete instance of `EdifactValidationOverrideInput` via:
//
//          EdifactValidationOverrideArgs{...}
type EdifactValidationOverrideInput interface {
	pulumi.Input

	ToEdifactValidationOverrideOutput() EdifactValidationOverrideOutput
	ToEdifactValidationOverrideOutputWithContext(context.Context) EdifactValidationOverrideOutput
}

type EdifactValidationOverrideArgs struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes pulumi.BoolPtrInput `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character Set.
	EnforceCharacterSet pulumi.BoolPtrInput `pulumi:"enforceCharacterSet"`
	// The message id on which the validation settings has to be applied.
	MessageId pulumi.StringPtrInput `pulumi:"messageId"`
	// The trailing separator policy.
	TrailingSeparatorPolicy pulumi.StringPtrInput `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes pulumi.BoolPtrInput `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate EDI types.
	ValidateEDITypes pulumi.BoolPtrInput `pulumi:"validateEDITypes"`
	// The value indicating whether to validate XSD types.
	ValidateXSDTypes pulumi.BoolPtrInput `pulumi:"validateXSDTypes"`
}

func (EdifactValidationOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactValidationOverride)(nil)).Elem()
}

func (i EdifactValidationOverrideArgs) ToEdifactValidationOverrideOutput() EdifactValidationOverrideOutput {
	return i.ToEdifactValidationOverrideOutputWithContext(context.Background())
}

func (i EdifactValidationOverrideArgs) ToEdifactValidationOverrideOutputWithContext(ctx context.Context) EdifactValidationOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactValidationOverrideOutput)
}

// EdifactValidationOverrideArrayInput is an input type that accepts EdifactValidationOverrideArray and EdifactValidationOverrideArrayOutput values.
// You can construct a concrete instance of `EdifactValidationOverrideArrayInput` via:
//
//          EdifactValidationOverrideArray{ EdifactValidationOverrideArgs{...} }
type EdifactValidationOverrideArrayInput interface {
	pulumi.Input

	ToEdifactValidationOverrideArrayOutput() EdifactValidationOverrideArrayOutput
	ToEdifactValidationOverrideArrayOutputWithContext(context.Context) EdifactValidationOverrideArrayOutput
}

type EdifactValidationOverrideArray []EdifactValidationOverrideInput

func (EdifactValidationOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactValidationOverride)(nil)).Elem()
}

func (i EdifactValidationOverrideArray) ToEdifactValidationOverrideArrayOutput() EdifactValidationOverrideArrayOutput {
	return i.ToEdifactValidationOverrideArrayOutputWithContext(context.Background())
}

func (i EdifactValidationOverrideArray) ToEdifactValidationOverrideArrayOutputWithContext(ctx context.Context) EdifactValidationOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactValidationOverrideArrayOutput)
}

type EdifactValidationOverrideResponse struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes *bool `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character Set.
	EnforceCharacterSet *bool `pulumi:"enforceCharacterSet"`
	// The message id on which the validation settings has to be applied.
	MessageId *string `pulumi:"messageId"`
	// The trailing separator policy.
	TrailingSeparatorPolicy *string `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes *bool `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate EDI types.
	ValidateEDITypes *bool `pulumi:"validateEDITypes"`
	// The value indicating whether to validate XSD types.
	ValidateXSDTypes *bool `pulumi:"validateXSDTypes"`
}

type EdifactValidationOverrideResponseOutput struct{ *pulumi.OutputState }

func (EdifactValidationOverrideResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactValidationOverrideResponse)(nil)).Elem()
}

func (o EdifactValidationOverrideResponseOutput) ToEdifactValidationOverrideResponseOutput() EdifactValidationOverrideResponseOutput {
	return o
}

func (o EdifactValidationOverrideResponseOutput) ToEdifactValidationOverrideResponseOutputWithContext(ctx context.Context) EdifactValidationOverrideResponseOutput {
	return o
}

// The value indicating whether to allow leading and trailing spaces and zeroes.
func (o EdifactValidationOverrideResponseOutput) AllowLeadingAndTrailingSpacesAndZeroes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactValidationOverrideResponse) *bool { return v.AllowLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to validate character Set.
func (o EdifactValidationOverrideResponseOutput) EnforceCharacterSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactValidationOverrideResponse) *bool { return v.EnforceCharacterSet }).(pulumi.BoolPtrOutput)
}

// The message id on which the validation settings has to be applied.
func (o EdifactValidationOverrideResponseOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactValidationOverrideResponse) *string { return v.MessageId }).(pulumi.StringPtrOutput)
}

// The trailing separator policy.
func (o EdifactValidationOverrideResponseOutput) TrailingSeparatorPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactValidationOverrideResponse) *string { return v.TrailingSeparatorPolicy }).(pulumi.StringPtrOutput)
}

// The value indicating whether to trim leading and trailing spaces and zeroes.
func (o EdifactValidationOverrideResponseOutput) TrimLeadingAndTrailingSpacesAndZeroes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactValidationOverrideResponse) *bool { return v.TrimLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to validate EDI types.
func (o EdifactValidationOverrideResponseOutput) ValidateEDITypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactValidationOverrideResponse) *bool { return v.ValidateEDITypes }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to validate XSD types.
func (o EdifactValidationOverrideResponseOutput) ValidateXSDTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactValidationOverrideResponse) *bool { return v.ValidateXSDTypes }).(pulumi.BoolPtrOutput)
}

type EdifactValidationOverrideResponseArrayOutput struct{ *pulumi.OutputState }

func (EdifactValidationOverrideResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EdifactValidationOverrideResponse)(nil)).Elem()
}

func (o EdifactValidationOverrideResponseArrayOutput) ToEdifactValidationOverrideResponseArrayOutput() EdifactValidationOverrideResponseArrayOutput {
	return o
}

func (o EdifactValidationOverrideResponseArrayOutput) ToEdifactValidationOverrideResponseArrayOutputWithContext(ctx context.Context) EdifactValidationOverrideResponseArrayOutput {
	return o
}

func (o EdifactValidationOverrideResponseArrayOutput) Index(i pulumi.IntInput) EdifactValidationOverrideResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EdifactValidationOverrideResponse {
		return vs[0].([]EdifactValidationOverrideResponse)[vs[1].(int)]
	}).(EdifactValidationOverrideResponseOutput)
}

type EdifactValidationSettings struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes *bool `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to check for duplicate group control number.
	CheckDuplicateGroupControlNumber *bool `pulumi:"checkDuplicateGroupControlNumber"`
	// The value indicating whether to check for duplicate interchange control number.
	CheckDuplicateInterchangeControlNumber *bool `pulumi:"checkDuplicateInterchangeControlNumber"`
	// The value indicating whether to check for duplicate transaction set control number.
	CheckDuplicateTransactionSetControlNumber *bool `pulumi:"checkDuplicateTransactionSetControlNumber"`
	// The validity period of interchange control number.
	InterchangeControlNumberValidityDays *int `pulumi:"interchangeControlNumberValidityDays"`
	// The trailing separator policy.
	TrailingSeparatorPolicy *string `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes *bool `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character set in the message.
	ValidateCharacterSet *bool `pulumi:"validateCharacterSet"`
	// The value indicating whether to Whether to validate EDI types.
	ValidateEDITypes *bool `pulumi:"validateEDITypes"`
	// The value indicating whether to Whether to validate XSD types.
	ValidateXSDTypes *bool `pulumi:"validateXSDTypes"`
}

// EdifactValidationSettingsInput is an input type that accepts EdifactValidationSettingsArgs and EdifactValidationSettingsOutput values.
// You can construct a concrete instance of `EdifactValidationSettingsInput` via:
//
//          EdifactValidationSettingsArgs{...}
type EdifactValidationSettingsInput interface {
	pulumi.Input

	ToEdifactValidationSettingsOutput() EdifactValidationSettingsOutput
	ToEdifactValidationSettingsOutputWithContext(context.Context) EdifactValidationSettingsOutput
}

type EdifactValidationSettingsArgs struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes pulumi.BoolPtrInput `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to check for duplicate group control number.
	CheckDuplicateGroupControlNumber pulumi.BoolPtrInput `pulumi:"checkDuplicateGroupControlNumber"`
	// The value indicating whether to check for duplicate interchange control number.
	CheckDuplicateInterchangeControlNumber pulumi.BoolPtrInput `pulumi:"checkDuplicateInterchangeControlNumber"`
	// The value indicating whether to check for duplicate transaction set control number.
	CheckDuplicateTransactionSetControlNumber pulumi.BoolPtrInput `pulumi:"checkDuplicateTransactionSetControlNumber"`
	// The validity period of interchange control number.
	InterchangeControlNumberValidityDays pulumi.IntPtrInput `pulumi:"interchangeControlNumberValidityDays"`
	// The trailing separator policy.
	TrailingSeparatorPolicy pulumi.StringPtrInput `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes pulumi.BoolPtrInput `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character set in the message.
	ValidateCharacterSet pulumi.BoolPtrInput `pulumi:"validateCharacterSet"`
	// The value indicating whether to Whether to validate EDI types.
	ValidateEDITypes pulumi.BoolPtrInput `pulumi:"validateEDITypes"`
	// The value indicating whether to Whether to validate XSD types.
	ValidateXSDTypes pulumi.BoolPtrInput `pulumi:"validateXSDTypes"`
}

func (EdifactValidationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactValidationSettings)(nil)).Elem()
}

func (i EdifactValidationSettingsArgs) ToEdifactValidationSettingsOutput() EdifactValidationSettingsOutput {
	return i.ToEdifactValidationSettingsOutputWithContext(context.Background())
}

func (i EdifactValidationSettingsArgs) ToEdifactValidationSettingsOutputWithContext(ctx context.Context) EdifactValidationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactValidationSettingsOutput)
}

func (i EdifactValidationSettingsArgs) ToEdifactValidationSettingsPtrOutput() EdifactValidationSettingsPtrOutput {
	return i.ToEdifactValidationSettingsPtrOutputWithContext(context.Background())
}

func (i EdifactValidationSettingsArgs) ToEdifactValidationSettingsPtrOutputWithContext(ctx context.Context) EdifactValidationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactValidationSettingsOutput).ToEdifactValidationSettingsPtrOutputWithContext(ctx)
}

// EdifactValidationSettingsPtrInput is an input type that accepts EdifactValidationSettingsArgs, EdifactValidationSettingsPtr and EdifactValidationSettingsPtrOutput values.
// You can construct a concrete instance of `EdifactValidationSettingsPtrInput` via:
//
//          EdifactValidationSettingsArgs{...}
//
//  or:
//
//          nil
type EdifactValidationSettingsPtrInput interface {
	pulumi.Input

	ToEdifactValidationSettingsPtrOutput() EdifactValidationSettingsPtrOutput
	ToEdifactValidationSettingsPtrOutputWithContext(context.Context) EdifactValidationSettingsPtrOutput
}

type edifactValidationSettingsPtrType EdifactValidationSettingsArgs

func EdifactValidationSettingsPtr(v *EdifactValidationSettingsArgs) EdifactValidationSettingsPtrInput {
	return (*edifactValidationSettingsPtrType)(v)
}

func (*edifactValidationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactValidationSettings)(nil)).Elem()
}

func (i *edifactValidationSettingsPtrType) ToEdifactValidationSettingsPtrOutput() EdifactValidationSettingsPtrOutput {
	return i.ToEdifactValidationSettingsPtrOutputWithContext(context.Background())
}

func (i *edifactValidationSettingsPtrType) ToEdifactValidationSettingsPtrOutputWithContext(ctx context.Context) EdifactValidationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdifactValidationSettingsPtrOutput)
}

type EdifactValidationSettingsResponse struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes *bool `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to check for duplicate group control number.
	CheckDuplicateGroupControlNumber *bool `pulumi:"checkDuplicateGroupControlNumber"`
	// The value indicating whether to check for duplicate interchange control number.
	CheckDuplicateInterchangeControlNumber *bool `pulumi:"checkDuplicateInterchangeControlNumber"`
	// The value indicating whether to check for duplicate transaction set control number.
	CheckDuplicateTransactionSetControlNumber *bool `pulumi:"checkDuplicateTransactionSetControlNumber"`
	// The validity period of interchange control number.
	InterchangeControlNumberValidityDays *int `pulumi:"interchangeControlNumberValidityDays"`
	// The trailing separator policy.
	TrailingSeparatorPolicy *string `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes *bool `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character set in the message.
	ValidateCharacterSet *bool `pulumi:"validateCharacterSet"`
	// The value indicating whether to Whether to validate EDI types.
	ValidateEDITypes *bool `pulumi:"validateEDITypes"`
	// The value indicating whether to Whether to validate XSD types.
	ValidateXSDTypes *bool `pulumi:"validateXSDTypes"`
}

type EdifactValidationSettingsResponseOutput struct{ *pulumi.OutputState }

func (EdifactValidationSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdifactValidationSettingsResponse)(nil)).Elem()
}

func (o EdifactValidationSettingsResponseOutput) ToEdifactValidationSettingsResponseOutput() EdifactValidationSettingsResponseOutput {
	return o
}

func (o EdifactValidationSettingsResponseOutput) ToEdifactValidationSettingsResponseOutputWithContext(ctx context.Context) EdifactValidationSettingsResponseOutput {
	return o
}

func (o EdifactValidationSettingsResponseOutput) ToEdifactValidationSettingsResponsePtrOutput() EdifactValidationSettingsResponsePtrOutput {
	return o.ToEdifactValidationSettingsResponsePtrOutputWithContext(context.Background())
}

func (o EdifactValidationSettingsResponseOutput) ToEdifactValidationSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactValidationSettingsResponsePtrOutput {
	return o.ApplyT(func(v EdifactValidationSettingsResponse) *EdifactValidationSettingsResponse {
		return &v
	}).(EdifactValidationSettingsResponsePtrOutput)
}

// The value indicating whether to allow leading and trailing spaces and zeroes.
func (o EdifactValidationSettingsResponseOutput) AllowLeadingAndTrailingSpacesAndZeroes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactValidationSettingsResponse) *bool { return v.AllowLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate group control number.
func (o EdifactValidationSettingsResponseOutput) CheckDuplicateGroupControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactValidationSettingsResponse) *bool { return v.CheckDuplicateGroupControlNumber }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate interchange control number.
func (o EdifactValidationSettingsResponseOutput) CheckDuplicateInterchangeControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactValidationSettingsResponse) *bool { return v.CheckDuplicateInterchangeControlNumber }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate transaction set control number.
func (o EdifactValidationSettingsResponseOutput) CheckDuplicateTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactValidationSettingsResponse) *bool { return v.CheckDuplicateTransactionSetControlNumber }).(pulumi.BoolPtrOutput)
}

// The validity period of interchange control number.
func (o EdifactValidationSettingsResponseOutput) InterchangeControlNumberValidityDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EdifactValidationSettingsResponse) *int { return v.InterchangeControlNumberValidityDays }).(pulumi.IntPtrOutput)
}

// The trailing separator policy.
func (o EdifactValidationSettingsResponseOutput) TrailingSeparatorPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdifactValidationSettingsResponse) *string { return v.TrailingSeparatorPolicy }).(pulumi.StringPtrOutput)
}

// The value indicating whether to trim leading and trailing spaces and zeroes.
func (o EdifactValidationSettingsResponseOutput) TrimLeadingAndTrailingSpacesAndZeroes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactValidationSettingsResponse) *bool { return v.TrimLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to validate character set in the message.
func (o EdifactValidationSettingsResponseOutput) ValidateCharacterSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactValidationSettingsResponse) *bool { return v.ValidateCharacterSet }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to Whether to validate EDI types.
func (o EdifactValidationSettingsResponseOutput) ValidateEDITypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactValidationSettingsResponse) *bool { return v.ValidateEDITypes }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to Whether to validate XSD types.
func (o EdifactValidationSettingsResponseOutput) ValidateXSDTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EdifactValidationSettingsResponse) *bool { return v.ValidateXSDTypes }).(pulumi.BoolPtrOutput)
}

type EdifactValidationSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (EdifactValidationSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdifactValidationSettingsResponse)(nil)).Elem()
}

func (o EdifactValidationSettingsResponsePtrOutput) ToEdifactValidationSettingsResponsePtrOutput() EdifactValidationSettingsResponsePtrOutput {
	return o
}

func (o EdifactValidationSettingsResponsePtrOutput) ToEdifactValidationSettingsResponsePtrOutputWithContext(ctx context.Context) EdifactValidationSettingsResponsePtrOutput {
	return o
}

func (o EdifactValidationSettingsResponsePtrOutput) Elem() EdifactValidationSettingsResponseOutput {
	return o.ApplyT(func(v *EdifactValidationSettingsResponse) EdifactValidationSettingsResponse { return *v }).(EdifactValidationSettingsResponseOutput)
}

// The value indicating whether to allow leading and trailing spaces and zeroes.
func (o EdifactValidationSettingsResponsePtrOutput) AllowLeadingAndTrailingSpacesAndZeroes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AllowLeadingAndTrailingSpacesAndZeroes
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate group control number.
func (o EdifactValidationSettingsResponsePtrOutput) CheckDuplicateGroupControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CheckDuplicateGroupControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate interchange control number.
func (o EdifactValidationSettingsResponsePtrOutput) CheckDuplicateInterchangeControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CheckDuplicateInterchangeControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate transaction set control number.
func (o EdifactValidationSettingsResponsePtrOutput) CheckDuplicateTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CheckDuplicateTransactionSetControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The validity period of interchange control number.
func (o EdifactValidationSettingsResponsePtrOutput) InterchangeControlNumberValidityDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.InterchangeControlNumberValidityDays
	}).(pulumi.IntPtrOutput)
}

// The trailing separator policy.
func (o EdifactValidationSettingsResponsePtrOutput) TrailingSeparatorPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TrailingSeparatorPolicy
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to trim leading and trailing spaces and zeroes.
func (o EdifactValidationSettingsResponsePtrOutput) TrimLeadingAndTrailingSpacesAndZeroes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.TrimLeadingAndTrailingSpacesAndZeroes
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to validate character set in the message.
func (o EdifactValidationSettingsResponsePtrOutput) ValidateCharacterSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateCharacterSet
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to Whether to validate EDI types.
func (o EdifactValidationSettingsResponsePtrOutput) ValidateEDITypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateEDITypes
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to Whether to validate XSD types.
func (o EdifactValidationSettingsResponsePtrOutput) ValidateXSDTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EdifactValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateXSDTypes
	}).(pulumi.BoolPtrOutput)
}

type IntegrationAccountContentHashResponse struct {
	// The content hash algorithm.
	Algorithm *string `pulumi:"algorithm"`
	// The content hash value.
	Value *string `pulumi:"value"`
}

type IntegrationAccountContentHashResponseOutput struct{ *pulumi.OutputState }

func (IntegrationAccountContentHashResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationAccountContentHashResponse)(nil)).Elem()
}

func (o IntegrationAccountContentHashResponseOutput) ToIntegrationAccountContentHashResponseOutput() IntegrationAccountContentHashResponseOutput {
	return o
}

func (o IntegrationAccountContentHashResponseOutput) ToIntegrationAccountContentHashResponseOutputWithContext(ctx context.Context) IntegrationAccountContentHashResponseOutput {
	return o
}

func (o IntegrationAccountContentHashResponseOutput) ToIntegrationAccountContentHashResponsePtrOutput() IntegrationAccountContentHashResponsePtrOutput {
	return o.ToIntegrationAccountContentHashResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationAccountContentHashResponseOutput) ToIntegrationAccountContentHashResponsePtrOutputWithContext(ctx context.Context) IntegrationAccountContentHashResponsePtrOutput {
	return o.ApplyT(func(v IntegrationAccountContentHashResponse) *IntegrationAccountContentHashResponse {
		return &v
	}).(IntegrationAccountContentHashResponsePtrOutput)
}

// The content hash algorithm.
func (o IntegrationAccountContentHashResponseOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationAccountContentHashResponse) *string { return v.Algorithm }).(pulumi.StringPtrOutput)
}

// The content hash value.
func (o IntegrationAccountContentHashResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationAccountContentHashResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type IntegrationAccountContentHashResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationAccountContentHashResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccountContentHashResponse)(nil)).Elem()
}

func (o IntegrationAccountContentHashResponsePtrOutput) ToIntegrationAccountContentHashResponsePtrOutput() IntegrationAccountContentHashResponsePtrOutput {
	return o
}

func (o IntegrationAccountContentHashResponsePtrOutput) ToIntegrationAccountContentHashResponsePtrOutputWithContext(ctx context.Context) IntegrationAccountContentHashResponsePtrOutput {
	return o
}

func (o IntegrationAccountContentHashResponsePtrOutput) Elem() IntegrationAccountContentHashResponseOutput {
	return o.ApplyT(func(v *IntegrationAccountContentHashResponse) IntegrationAccountContentHashResponse { return *v }).(IntegrationAccountContentHashResponseOutput)
}

// The content hash algorithm.
func (o IntegrationAccountContentHashResponsePtrOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationAccountContentHashResponse) *string {
		if v == nil {
			return nil
		}
		return v.Algorithm
	}).(pulumi.StringPtrOutput)
}

// The content hash value.
func (o IntegrationAccountContentHashResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationAccountContentHashResponse) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type IntegrationAccountContentLinkResponse struct {
	// The content hash.
	ContentHash *IntegrationAccountContentHashResponse `pulumi:"contentHash"`
	// The content size.
	ContentSize *int `pulumi:"contentSize"`
	// The content version.
	ContentVersion *string `pulumi:"contentVersion"`
	// The metadata.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// The content link URI.
	Uri *string `pulumi:"uri"`
}

type IntegrationAccountContentLinkResponseOutput struct{ *pulumi.OutputState }

func (IntegrationAccountContentLinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationAccountContentLinkResponse)(nil)).Elem()
}

func (o IntegrationAccountContentLinkResponseOutput) ToIntegrationAccountContentLinkResponseOutput() IntegrationAccountContentLinkResponseOutput {
	return o
}

func (o IntegrationAccountContentLinkResponseOutput) ToIntegrationAccountContentLinkResponseOutputWithContext(ctx context.Context) IntegrationAccountContentLinkResponseOutput {
	return o
}

func (o IntegrationAccountContentLinkResponseOutput) ToIntegrationAccountContentLinkResponsePtrOutput() IntegrationAccountContentLinkResponsePtrOutput {
	return o.ToIntegrationAccountContentLinkResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationAccountContentLinkResponseOutput) ToIntegrationAccountContentLinkResponsePtrOutputWithContext(ctx context.Context) IntegrationAccountContentLinkResponsePtrOutput {
	return o.ApplyT(func(v IntegrationAccountContentLinkResponse) *IntegrationAccountContentLinkResponse {
		return &v
	}).(IntegrationAccountContentLinkResponsePtrOutput)
}

// The content hash.
func (o IntegrationAccountContentLinkResponseOutput) ContentHash() IntegrationAccountContentHashResponsePtrOutput {
	return o.ApplyT(func(v IntegrationAccountContentLinkResponse) *IntegrationAccountContentHashResponse {
		return v.ContentHash
	}).(IntegrationAccountContentHashResponsePtrOutput)
}

// The content size.
func (o IntegrationAccountContentLinkResponseOutput) ContentSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationAccountContentLinkResponse) *int { return v.ContentSize }).(pulumi.IntPtrOutput)
}

// The content version.
func (o IntegrationAccountContentLinkResponseOutput) ContentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationAccountContentLinkResponse) *string { return v.ContentVersion }).(pulumi.StringPtrOutput)
}

// The metadata.
func (o IntegrationAccountContentLinkResponseOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v IntegrationAccountContentLinkResponse) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

// The content link URI.
func (o IntegrationAccountContentLinkResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationAccountContentLinkResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type IntegrationAccountContentLinkResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationAccountContentLinkResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccountContentLinkResponse)(nil)).Elem()
}

func (o IntegrationAccountContentLinkResponsePtrOutput) ToIntegrationAccountContentLinkResponsePtrOutput() IntegrationAccountContentLinkResponsePtrOutput {
	return o
}

func (o IntegrationAccountContentLinkResponsePtrOutput) ToIntegrationAccountContentLinkResponsePtrOutputWithContext(ctx context.Context) IntegrationAccountContentLinkResponsePtrOutput {
	return o
}

func (o IntegrationAccountContentLinkResponsePtrOutput) Elem() IntegrationAccountContentLinkResponseOutput {
	return o.ApplyT(func(v *IntegrationAccountContentLinkResponse) IntegrationAccountContentLinkResponse { return *v }).(IntegrationAccountContentLinkResponseOutput)
}

// The content hash.
func (o IntegrationAccountContentLinkResponsePtrOutput) ContentHash() IntegrationAccountContentHashResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationAccountContentLinkResponse) *IntegrationAccountContentHashResponse {
		if v == nil {
			return nil
		}
		return v.ContentHash
	}).(IntegrationAccountContentHashResponsePtrOutput)
}

// The content size.
func (o IntegrationAccountContentLinkResponsePtrOutput) ContentSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IntegrationAccountContentLinkResponse) *int {
		if v == nil {
			return nil
		}
		return v.ContentSize
	}).(pulumi.IntPtrOutput)
}

// The content version.
func (o IntegrationAccountContentLinkResponsePtrOutput) ContentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationAccountContentLinkResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContentVersion
	}).(pulumi.StringPtrOutput)
}

// The metadata.
func (o IntegrationAccountContentLinkResponsePtrOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v *IntegrationAccountContentLinkResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.MapOutput)
}

// The content link URI.
func (o IntegrationAccountContentLinkResponsePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationAccountContentLinkResponse) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

type IntegrationAccountSku struct {
	// The sku name.
	Name *string `pulumi:"name"`
}

// IntegrationAccountSkuInput is an input type that accepts IntegrationAccountSkuArgs and IntegrationAccountSkuOutput values.
// You can construct a concrete instance of `IntegrationAccountSkuInput` via:
//
//          IntegrationAccountSkuArgs{...}
type IntegrationAccountSkuInput interface {
	pulumi.Input

	ToIntegrationAccountSkuOutput() IntegrationAccountSkuOutput
	ToIntegrationAccountSkuOutputWithContext(context.Context) IntegrationAccountSkuOutput
}

type IntegrationAccountSkuArgs struct {
	// The sku name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (IntegrationAccountSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationAccountSku)(nil)).Elem()
}

func (i IntegrationAccountSkuArgs) ToIntegrationAccountSkuOutput() IntegrationAccountSkuOutput {
	return i.ToIntegrationAccountSkuOutputWithContext(context.Background())
}

func (i IntegrationAccountSkuArgs) ToIntegrationAccountSkuOutputWithContext(ctx context.Context) IntegrationAccountSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountSkuOutput)
}

func (i IntegrationAccountSkuArgs) ToIntegrationAccountSkuPtrOutput() IntegrationAccountSkuPtrOutput {
	return i.ToIntegrationAccountSkuPtrOutputWithContext(context.Background())
}

func (i IntegrationAccountSkuArgs) ToIntegrationAccountSkuPtrOutputWithContext(ctx context.Context) IntegrationAccountSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountSkuOutput).ToIntegrationAccountSkuPtrOutputWithContext(ctx)
}

// IntegrationAccountSkuPtrInput is an input type that accepts IntegrationAccountSkuArgs, IntegrationAccountSkuPtr and IntegrationAccountSkuPtrOutput values.
// You can construct a concrete instance of `IntegrationAccountSkuPtrInput` via:
//
//          IntegrationAccountSkuArgs{...}
//
//  or:
//
//          nil
type IntegrationAccountSkuPtrInput interface {
	pulumi.Input

	ToIntegrationAccountSkuPtrOutput() IntegrationAccountSkuPtrOutput
	ToIntegrationAccountSkuPtrOutputWithContext(context.Context) IntegrationAccountSkuPtrOutput
}

type integrationAccountSkuPtrType IntegrationAccountSkuArgs

func IntegrationAccountSkuPtr(v *IntegrationAccountSkuArgs) IntegrationAccountSkuPtrInput {
	return (*integrationAccountSkuPtrType)(v)
}

func (*integrationAccountSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccountSku)(nil)).Elem()
}

func (i *integrationAccountSkuPtrType) ToIntegrationAccountSkuPtrOutput() IntegrationAccountSkuPtrOutput {
	return i.ToIntegrationAccountSkuPtrOutputWithContext(context.Background())
}

func (i *integrationAccountSkuPtrType) ToIntegrationAccountSkuPtrOutputWithContext(ctx context.Context) IntegrationAccountSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationAccountSkuPtrOutput)
}

type IntegrationAccountSkuResponse struct {
	// The sku name.
	Name *string `pulumi:"name"`
}

type IntegrationAccountSkuResponseOutput struct{ *pulumi.OutputState }

func (IntegrationAccountSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationAccountSkuResponse)(nil)).Elem()
}

func (o IntegrationAccountSkuResponseOutput) ToIntegrationAccountSkuResponseOutput() IntegrationAccountSkuResponseOutput {
	return o
}

func (o IntegrationAccountSkuResponseOutput) ToIntegrationAccountSkuResponseOutputWithContext(ctx context.Context) IntegrationAccountSkuResponseOutput {
	return o
}

func (o IntegrationAccountSkuResponseOutput) ToIntegrationAccountSkuResponsePtrOutput() IntegrationAccountSkuResponsePtrOutput {
	return o.ToIntegrationAccountSkuResponsePtrOutputWithContext(context.Background())
}

func (o IntegrationAccountSkuResponseOutput) ToIntegrationAccountSkuResponsePtrOutputWithContext(ctx context.Context) IntegrationAccountSkuResponsePtrOutput {
	return o.ApplyT(func(v IntegrationAccountSkuResponse) *IntegrationAccountSkuResponse {
		return &v
	}).(IntegrationAccountSkuResponsePtrOutput)
}

// The sku name.
func (o IntegrationAccountSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationAccountSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type IntegrationAccountSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationAccountSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationAccountSkuResponse)(nil)).Elem()
}

func (o IntegrationAccountSkuResponsePtrOutput) ToIntegrationAccountSkuResponsePtrOutput() IntegrationAccountSkuResponsePtrOutput {
	return o
}

func (o IntegrationAccountSkuResponsePtrOutput) ToIntegrationAccountSkuResponsePtrOutputWithContext(ctx context.Context) IntegrationAccountSkuResponsePtrOutput {
	return o
}

func (o IntegrationAccountSkuResponsePtrOutput) Elem() IntegrationAccountSkuResponseOutput {
	return o.ApplyT(func(v *IntegrationAccountSkuResponse) IntegrationAccountSkuResponse { return *v }).(IntegrationAccountSkuResponseOutput)
}

// The sku name.
func (o IntegrationAccountSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationAccountSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type KeyVaultKeyReference struct {
	// The private key name in key vault.
	KeyName *string `pulumi:"keyName"`
	// The key vault reference.
	KeyVault *KeyVaultKeyReferenceKeyVault `pulumi:"keyVault"`
	// The private key version in key vault.
	KeyVersion *string `pulumi:"keyVersion"`
}

// KeyVaultKeyReferenceInput is an input type that accepts KeyVaultKeyReferenceArgs and KeyVaultKeyReferenceOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceInput` via:
//
//          KeyVaultKeyReferenceArgs{...}
type KeyVaultKeyReferenceInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceOutput() KeyVaultKeyReferenceOutput
	ToKeyVaultKeyReferenceOutputWithContext(context.Context) KeyVaultKeyReferenceOutput
}

type KeyVaultKeyReferenceArgs struct {
	// The private key name in key vault.
	KeyName pulumi.StringPtrInput `pulumi:"keyName"`
	// The key vault reference.
	KeyVault KeyVaultKeyReferenceKeyVaultPtrInput `pulumi:"keyVault"`
	// The private key version in key vault.
	KeyVersion pulumi.StringPtrInput `pulumi:"keyVersion"`
}

func (KeyVaultKeyReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReference)(nil)).Elem()
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferenceOutput() KeyVaultKeyReferenceOutput {
	return i.ToKeyVaultKeyReferenceOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferenceOutputWithContext(ctx context.Context) KeyVaultKeyReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceOutput)
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput {
	return i.ToKeyVaultKeyReferencePtrOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceOutput).ToKeyVaultKeyReferencePtrOutputWithContext(ctx)
}

// KeyVaultKeyReferencePtrInput is an input type that accepts KeyVaultKeyReferenceArgs, KeyVaultKeyReferencePtr and KeyVaultKeyReferencePtrOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferencePtrInput` via:
//
//          KeyVaultKeyReferenceArgs{...}
//
//  or:
//
//          nil
type KeyVaultKeyReferencePtrInput interface {
	pulumi.Input

	ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput
	ToKeyVaultKeyReferencePtrOutputWithContext(context.Context) KeyVaultKeyReferencePtrOutput
}

type keyVaultKeyReferencePtrType KeyVaultKeyReferenceArgs

func KeyVaultKeyReferencePtr(v *KeyVaultKeyReferenceArgs) KeyVaultKeyReferencePtrInput {
	return (*keyVaultKeyReferencePtrType)(v)
}

func (*keyVaultKeyReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReference)(nil)).Elem()
}

func (i *keyVaultKeyReferencePtrType) ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput {
	return i.ToKeyVaultKeyReferencePtrOutputWithContext(context.Background())
}

func (i *keyVaultKeyReferencePtrType) ToKeyVaultKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferencePtrOutput)
}

// The key vault reference.
type KeyVaultKeyReferenceKeyVault struct {
	// The resource id.
	Id *string `pulumi:"id"`
}

// KeyVaultKeyReferenceKeyVaultInput is an input type that accepts KeyVaultKeyReferenceKeyVaultArgs and KeyVaultKeyReferenceKeyVaultOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceKeyVaultInput` via:
//
//          KeyVaultKeyReferenceKeyVaultArgs{...}
type KeyVaultKeyReferenceKeyVaultInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceKeyVaultOutput() KeyVaultKeyReferenceKeyVaultOutput
	ToKeyVaultKeyReferenceKeyVaultOutputWithContext(context.Context) KeyVaultKeyReferenceKeyVaultOutput
}

// The key vault reference.
type KeyVaultKeyReferenceKeyVaultArgs struct {
	// The resource id.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (KeyVaultKeyReferenceKeyVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceKeyVault)(nil)).Elem()
}

func (i KeyVaultKeyReferenceKeyVaultArgs) ToKeyVaultKeyReferenceKeyVaultOutput() KeyVaultKeyReferenceKeyVaultOutput {
	return i.ToKeyVaultKeyReferenceKeyVaultOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceKeyVaultArgs) ToKeyVaultKeyReferenceKeyVaultOutputWithContext(ctx context.Context) KeyVaultKeyReferenceKeyVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceKeyVaultOutput)
}

func (i KeyVaultKeyReferenceKeyVaultArgs) ToKeyVaultKeyReferenceKeyVaultPtrOutput() KeyVaultKeyReferenceKeyVaultPtrOutput {
	return i.ToKeyVaultKeyReferenceKeyVaultPtrOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceKeyVaultArgs) ToKeyVaultKeyReferenceKeyVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceKeyVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceKeyVaultOutput).ToKeyVaultKeyReferenceKeyVaultPtrOutputWithContext(ctx)
}

// KeyVaultKeyReferenceKeyVaultPtrInput is an input type that accepts KeyVaultKeyReferenceKeyVaultArgs, KeyVaultKeyReferenceKeyVaultPtr and KeyVaultKeyReferenceKeyVaultPtrOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceKeyVaultPtrInput` via:
//
//          KeyVaultKeyReferenceKeyVaultArgs{...}
//
//  or:
//
//          nil
type KeyVaultKeyReferenceKeyVaultPtrInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceKeyVaultPtrOutput() KeyVaultKeyReferenceKeyVaultPtrOutput
	ToKeyVaultKeyReferenceKeyVaultPtrOutputWithContext(context.Context) KeyVaultKeyReferenceKeyVaultPtrOutput
}

type keyVaultKeyReferenceKeyVaultPtrType KeyVaultKeyReferenceKeyVaultArgs

func KeyVaultKeyReferenceKeyVaultPtr(v *KeyVaultKeyReferenceKeyVaultArgs) KeyVaultKeyReferenceKeyVaultPtrInput {
	return (*keyVaultKeyReferenceKeyVaultPtrType)(v)
}

func (*keyVaultKeyReferenceKeyVaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceKeyVault)(nil)).Elem()
}

func (i *keyVaultKeyReferenceKeyVaultPtrType) ToKeyVaultKeyReferenceKeyVaultPtrOutput() KeyVaultKeyReferenceKeyVaultPtrOutput {
	return i.ToKeyVaultKeyReferenceKeyVaultPtrOutputWithContext(context.Background())
}

func (i *keyVaultKeyReferenceKeyVaultPtrType) ToKeyVaultKeyReferenceKeyVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceKeyVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceKeyVaultPtrOutput)
}

type KeyVaultKeyReferenceResponse struct {
	// The private key name in key vault.
	KeyName *string `pulumi:"keyName"`
	// The key vault reference.
	KeyVault *KeyVaultKeyReferenceResponseKeyVault `pulumi:"keyVault"`
	// The private key version in key vault.
	KeyVersion *string `pulumi:"keyVersion"`
}

type KeyVaultKeyReferenceResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceResponse)(nil)).Elem()
}

func (o KeyVaultKeyReferenceResponseOutput) ToKeyVaultKeyReferenceResponseOutput() KeyVaultKeyReferenceResponseOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseOutput) ToKeyVaultKeyReferenceResponseOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseOutput) ToKeyVaultKeyReferenceResponsePtrOutput() KeyVaultKeyReferenceResponsePtrOutput {
	return o.ToKeyVaultKeyReferenceResponsePtrOutputWithContext(context.Background())
}

func (o KeyVaultKeyReferenceResponseOutput) ToKeyVaultKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponsePtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponse) *KeyVaultKeyReferenceResponse {
		return &v
	}).(KeyVaultKeyReferenceResponsePtrOutput)
}

// The private key name in key vault.
func (o KeyVaultKeyReferenceResponseOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponse) *string { return v.KeyName }).(pulumi.StringPtrOutput)
}

// The key vault reference.
func (o KeyVaultKeyReferenceResponseOutput) KeyVault() KeyVaultKeyReferenceResponseKeyVaultPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponse) *KeyVaultKeyReferenceResponseKeyVault { return v.KeyVault }).(KeyVaultKeyReferenceResponseKeyVaultPtrOutput)
}

// The private key version in key vault.
func (o KeyVaultKeyReferenceResponseOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponse) *string { return v.KeyVersion }).(pulumi.StringPtrOutput)
}

type KeyVaultKeyReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceResponse)(nil)).Elem()
}

func (o KeyVaultKeyReferenceResponsePtrOutput) ToKeyVaultKeyReferenceResponsePtrOutput() KeyVaultKeyReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultKeyReferenceResponsePtrOutput) ToKeyVaultKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultKeyReferenceResponsePtrOutput) Elem() KeyVaultKeyReferenceResponseOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponse) KeyVaultKeyReferenceResponse { return *v }).(KeyVaultKeyReferenceResponseOutput)
}

// The private key name in key vault.
func (o KeyVaultKeyReferenceResponsePtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyName
	}).(pulumi.StringPtrOutput)
}

// The key vault reference.
func (o KeyVaultKeyReferenceResponsePtrOutput) KeyVault() KeyVaultKeyReferenceResponseKeyVaultPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponse) *KeyVaultKeyReferenceResponseKeyVault {
		if v == nil {
			return nil
		}
		return v.KeyVault
	}).(KeyVaultKeyReferenceResponseKeyVaultPtrOutput)
}

// The private key version in key vault.
func (o KeyVaultKeyReferenceResponsePtrOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyVersion
	}).(pulumi.StringPtrOutput)
}

// The key vault reference.
type KeyVaultKeyReferenceResponseKeyVault struct {
	// The resource id.
	Id *string `pulumi:"id"`
	// The resource name.
	Name string `pulumi:"name"`
	// The resource type.
	Type string `pulumi:"type"`
}

// The key vault reference.
type KeyVaultKeyReferenceResponseKeyVaultOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceResponseKeyVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceResponseKeyVault)(nil)).Elem()
}

func (o KeyVaultKeyReferenceResponseKeyVaultOutput) ToKeyVaultKeyReferenceResponseKeyVaultOutput() KeyVaultKeyReferenceResponseKeyVaultOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseKeyVaultOutput) ToKeyVaultKeyReferenceResponseKeyVaultOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseKeyVaultOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseKeyVaultOutput) ToKeyVaultKeyReferenceResponseKeyVaultPtrOutput() KeyVaultKeyReferenceResponseKeyVaultPtrOutput {
	return o.ToKeyVaultKeyReferenceResponseKeyVaultPtrOutputWithContext(context.Background())
}

func (o KeyVaultKeyReferenceResponseKeyVaultOutput) ToKeyVaultKeyReferenceResponseKeyVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseKeyVaultPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponseKeyVault) *KeyVaultKeyReferenceResponseKeyVault {
		return &v
	}).(KeyVaultKeyReferenceResponseKeyVaultPtrOutput)
}

// The resource id.
func (o KeyVaultKeyReferenceResponseKeyVaultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponseKeyVault) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The resource name.
func (o KeyVaultKeyReferenceResponseKeyVaultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponseKeyVault) string { return v.Name }).(pulumi.StringOutput)
}

// The resource type.
func (o KeyVaultKeyReferenceResponseKeyVaultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponseKeyVault) string { return v.Type }).(pulumi.StringOutput)
}

type KeyVaultKeyReferenceResponseKeyVaultPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceResponseKeyVaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceResponseKeyVault)(nil)).Elem()
}

func (o KeyVaultKeyReferenceResponseKeyVaultPtrOutput) ToKeyVaultKeyReferenceResponseKeyVaultPtrOutput() KeyVaultKeyReferenceResponseKeyVaultPtrOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseKeyVaultPtrOutput) ToKeyVaultKeyReferenceResponseKeyVaultPtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseKeyVaultPtrOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseKeyVaultPtrOutput) Elem() KeyVaultKeyReferenceResponseKeyVaultOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponseKeyVault) KeyVaultKeyReferenceResponseKeyVault { return *v }).(KeyVaultKeyReferenceResponseKeyVaultOutput)
}

// The resource id.
func (o KeyVaultKeyReferenceResponseKeyVaultPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponseKeyVault) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The resource name.
func (o KeyVaultKeyReferenceResponseKeyVaultPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponseKeyVault) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The resource type.
func (o KeyVaultKeyReferenceResponseKeyVaultPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponseKeyVault) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type PartnerContent struct {
	// The B2B partner content.
	B2b *B2BPartnerContent `pulumi:"b2b"`
}

// PartnerContentInput is an input type that accepts PartnerContentArgs and PartnerContentOutput values.
// You can construct a concrete instance of `PartnerContentInput` via:
//
//          PartnerContentArgs{...}
type PartnerContentInput interface {
	pulumi.Input

	ToPartnerContentOutput() PartnerContentOutput
	ToPartnerContentOutputWithContext(context.Context) PartnerContentOutput
}

type PartnerContentArgs struct {
	// The B2B partner content.
	B2b B2BPartnerContentPtrInput `pulumi:"b2b"`
}

func (PartnerContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnerContent)(nil)).Elem()
}

func (i PartnerContentArgs) ToPartnerContentOutput() PartnerContentOutput {
	return i.ToPartnerContentOutputWithContext(context.Background())
}

func (i PartnerContentArgs) ToPartnerContentOutputWithContext(ctx context.Context) PartnerContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerContentOutput)
}

func (i PartnerContentArgs) ToPartnerContentPtrOutput() PartnerContentPtrOutput {
	return i.ToPartnerContentPtrOutputWithContext(context.Background())
}

func (i PartnerContentArgs) ToPartnerContentPtrOutputWithContext(ctx context.Context) PartnerContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerContentOutput).ToPartnerContentPtrOutputWithContext(ctx)
}

// PartnerContentPtrInput is an input type that accepts PartnerContentArgs, PartnerContentPtr and PartnerContentPtrOutput values.
// You can construct a concrete instance of `PartnerContentPtrInput` via:
//
//          PartnerContentArgs{...}
//
//  or:
//
//          nil
type PartnerContentPtrInput interface {
	pulumi.Input

	ToPartnerContentPtrOutput() PartnerContentPtrOutput
	ToPartnerContentPtrOutputWithContext(context.Context) PartnerContentPtrOutput
}

type partnerContentPtrType PartnerContentArgs

func PartnerContentPtr(v *PartnerContentArgs) PartnerContentPtrInput {
	return (*partnerContentPtrType)(v)
}

func (*partnerContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerContent)(nil)).Elem()
}

func (i *partnerContentPtrType) ToPartnerContentPtrOutput() PartnerContentPtrOutput {
	return i.ToPartnerContentPtrOutputWithContext(context.Background())
}

func (i *partnerContentPtrType) ToPartnerContentPtrOutputWithContext(ctx context.Context) PartnerContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerContentPtrOutput)
}

type PartnerContentResponse struct {
	// The B2B partner content.
	B2b *B2BPartnerContentResponse `pulumi:"b2b"`
}

type PartnerContentResponseOutput struct{ *pulumi.OutputState }

func (PartnerContentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartnerContentResponse)(nil)).Elem()
}

func (o PartnerContentResponseOutput) ToPartnerContentResponseOutput() PartnerContentResponseOutput {
	return o
}

func (o PartnerContentResponseOutput) ToPartnerContentResponseOutputWithContext(ctx context.Context) PartnerContentResponseOutput {
	return o
}

func (o PartnerContentResponseOutput) ToPartnerContentResponsePtrOutput() PartnerContentResponsePtrOutput {
	return o.ToPartnerContentResponsePtrOutputWithContext(context.Background())
}

func (o PartnerContentResponseOutput) ToPartnerContentResponsePtrOutputWithContext(ctx context.Context) PartnerContentResponsePtrOutput {
	return o.ApplyT(func(v PartnerContentResponse) *PartnerContentResponse {
		return &v
	}).(PartnerContentResponsePtrOutput)
}

// The B2B partner content.
func (o PartnerContentResponseOutput) B2b() B2BPartnerContentResponsePtrOutput {
	return o.ApplyT(func(v PartnerContentResponse) *B2BPartnerContentResponse { return v.B2b }).(B2BPartnerContentResponsePtrOutput)
}

type PartnerContentResponsePtrOutput struct{ *pulumi.OutputState }

func (PartnerContentResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerContentResponse)(nil)).Elem()
}

func (o PartnerContentResponsePtrOutput) ToPartnerContentResponsePtrOutput() PartnerContentResponsePtrOutput {
	return o
}

func (o PartnerContentResponsePtrOutput) ToPartnerContentResponsePtrOutputWithContext(ctx context.Context) PartnerContentResponsePtrOutput {
	return o
}

func (o PartnerContentResponsePtrOutput) Elem() PartnerContentResponseOutput {
	return o.ApplyT(func(v *PartnerContentResponse) PartnerContentResponse { return *v }).(PartnerContentResponseOutput)
}

// The B2B partner content.
func (o PartnerContentResponsePtrOutput) B2b() B2BPartnerContentResponsePtrOutput {
	return o.ApplyT(func(v *PartnerContentResponse) *B2BPartnerContentResponse {
		if v == nil {
			return nil
		}
		return v.B2b
	}).(B2BPartnerContentResponsePtrOutput)
}

type X12AcknowledgementSettings struct {
	// The acknowledgement control number lower bound.
	AcknowledgementControlNumberLowerBound *int `pulumi:"acknowledgementControlNumberLowerBound"`
	// The acknowledgement control number prefix.
	AcknowledgementControlNumberPrefix *string `pulumi:"acknowledgementControlNumberPrefix"`
	// The acknowledgement control number suffix.
	AcknowledgementControlNumberSuffix *string `pulumi:"acknowledgementControlNumberSuffix"`
	// The acknowledgement control number upper bound.
	AcknowledgementControlNumberUpperBound *int `pulumi:"acknowledgementControlNumberUpperBound"`
	// The value indicating whether to batch functional acknowledgements.
	BatchFunctionalAcknowledgements *bool `pulumi:"batchFunctionalAcknowledgements"`
	// The value indicating whether to batch implementation acknowledgements.
	BatchImplementationAcknowledgements *bool `pulumi:"batchImplementationAcknowledgements"`
	// The value indicating whether to batch the technical acknowledgements.
	BatchTechnicalAcknowledgements *bool `pulumi:"batchTechnicalAcknowledgements"`
	// The functional acknowledgement version.
	FunctionalAcknowledgementVersion *string `pulumi:"functionalAcknowledgementVersion"`
	// The implementation acknowledgement version.
	ImplementationAcknowledgementVersion *string `pulumi:"implementationAcknowledgementVersion"`
	// The value indicating whether functional acknowledgement is needed.
	NeedFunctionalAcknowledgement *bool `pulumi:"needFunctionalAcknowledgement"`
	// The value indicating whether implementation acknowledgement is needed.
	NeedImplementationAcknowledgement *bool `pulumi:"needImplementationAcknowledgement"`
	// The value indicating whether a loop is needed for valid messages.
	NeedLoopForValidMessages *bool `pulumi:"needLoopForValidMessages"`
	// The value indicating whether technical acknowledgement is needed.
	NeedTechnicalAcknowledgement *bool `pulumi:"needTechnicalAcknowledgement"`
	// The value indicating whether to rollover acknowledgement control number.
	RolloverAcknowledgementControlNumber *bool `pulumi:"rolloverAcknowledgementControlNumber"`
	// The value indicating whether to send synchronous acknowledgement.
	SendSynchronousAcknowledgement *bool `pulumi:"sendSynchronousAcknowledgement"`
}

// X12AcknowledgementSettingsInput is an input type that accepts X12AcknowledgementSettingsArgs and X12AcknowledgementSettingsOutput values.
// You can construct a concrete instance of `X12AcknowledgementSettingsInput` via:
//
//          X12AcknowledgementSettingsArgs{...}
type X12AcknowledgementSettingsInput interface {
	pulumi.Input

	ToX12AcknowledgementSettingsOutput() X12AcknowledgementSettingsOutput
	ToX12AcknowledgementSettingsOutputWithContext(context.Context) X12AcknowledgementSettingsOutput
}

type X12AcknowledgementSettingsArgs struct {
	// The acknowledgement control number lower bound.
	AcknowledgementControlNumberLowerBound pulumi.IntPtrInput `pulumi:"acknowledgementControlNumberLowerBound"`
	// The acknowledgement control number prefix.
	AcknowledgementControlNumberPrefix pulumi.StringPtrInput `pulumi:"acknowledgementControlNumberPrefix"`
	// The acknowledgement control number suffix.
	AcknowledgementControlNumberSuffix pulumi.StringPtrInput `pulumi:"acknowledgementControlNumberSuffix"`
	// The acknowledgement control number upper bound.
	AcknowledgementControlNumberUpperBound pulumi.IntPtrInput `pulumi:"acknowledgementControlNumberUpperBound"`
	// The value indicating whether to batch functional acknowledgements.
	BatchFunctionalAcknowledgements pulumi.BoolPtrInput `pulumi:"batchFunctionalAcknowledgements"`
	// The value indicating whether to batch implementation acknowledgements.
	BatchImplementationAcknowledgements pulumi.BoolPtrInput `pulumi:"batchImplementationAcknowledgements"`
	// The value indicating whether to batch the technical acknowledgements.
	BatchTechnicalAcknowledgements pulumi.BoolPtrInput `pulumi:"batchTechnicalAcknowledgements"`
	// The functional acknowledgement version.
	FunctionalAcknowledgementVersion pulumi.StringPtrInput `pulumi:"functionalAcknowledgementVersion"`
	// The implementation acknowledgement version.
	ImplementationAcknowledgementVersion pulumi.StringPtrInput `pulumi:"implementationAcknowledgementVersion"`
	// The value indicating whether functional acknowledgement is needed.
	NeedFunctionalAcknowledgement pulumi.BoolPtrInput `pulumi:"needFunctionalAcknowledgement"`
	// The value indicating whether implementation acknowledgement is needed.
	NeedImplementationAcknowledgement pulumi.BoolPtrInput `pulumi:"needImplementationAcknowledgement"`
	// The value indicating whether a loop is needed for valid messages.
	NeedLoopForValidMessages pulumi.BoolPtrInput `pulumi:"needLoopForValidMessages"`
	// The value indicating whether technical acknowledgement is needed.
	NeedTechnicalAcknowledgement pulumi.BoolPtrInput `pulumi:"needTechnicalAcknowledgement"`
	// The value indicating whether to rollover acknowledgement control number.
	RolloverAcknowledgementControlNumber pulumi.BoolPtrInput `pulumi:"rolloverAcknowledgementControlNumber"`
	// The value indicating whether to send synchronous acknowledgement.
	SendSynchronousAcknowledgement pulumi.BoolPtrInput `pulumi:"sendSynchronousAcknowledgement"`
}

func (X12AcknowledgementSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12AcknowledgementSettings)(nil)).Elem()
}

func (i X12AcknowledgementSettingsArgs) ToX12AcknowledgementSettingsOutput() X12AcknowledgementSettingsOutput {
	return i.ToX12AcknowledgementSettingsOutputWithContext(context.Background())
}

func (i X12AcknowledgementSettingsArgs) ToX12AcknowledgementSettingsOutputWithContext(ctx context.Context) X12AcknowledgementSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12AcknowledgementSettingsOutput)
}

func (i X12AcknowledgementSettingsArgs) ToX12AcknowledgementSettingsPtrOutput() X12AcknowledgementSettingsPtrOutput {
	return i.ToX12AcknowledgementSettingsPtrOutputWithContext(context.Background())
}

func (i X12AcknowledgementSettingsArgs) ToX12AcknowledgementSettingsPtrOutputWithContext(ctx context.Context) X12AcknowledgementSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12AcknowledgementSettingsOutput).ToX12AcknowledgementSettingsPtrOutputWithContext(ctx)
}

// X12AcknowledgementSettingsPtrInput is an input type that accepts X12AcknowledgementSettingsArgs, X12AcknowledgementSettingsPtr and X12AcknowledgementSettingsPtrOutput values.
// You can construct a concrete instance of `X12AcknowledgementSettingsPtrInput` via:
//
//          X12AcknowledgementSettingsArgs{...}
//
//  or:
//
//          nil
type X12AcknowledgementSettingsPtrInput interface {
	pulumi.Input

	ToX12AcknowledgementSettingsPtrOutput() X12AcknowledgementSettingsPtrOutput
	ToX12AcknowledgementSettingsPtrOutputWithContext(context.Context) X12AcknowledgementSettingsPtrOutput
}

type x12acknowledgementSettingsPtrType X12AcknowledgementSettingsArgs

func X12AcknowledgementSettingsPtr(v *X12AcknowledgementSettingsArgs) X12AcknowledgementSettingsPtrInput {
	return (*x12acknowledgementSettingsPtrType)(v)
}

func (*x12acknowledgementSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12AcknowledgementSettings)(nil)).Elem()
}

func (i *x12acknowledgementSettingsPtrType) ToX12AcknowledgementSettingsPtrOutput() X12AcknowledgementSettingsPtrOutput {
	return i.ToX12AcknowledgementSettingsPtrOutputWithContext(context.Background())
}

func (i *x12acknowledgementSettingsPtrType) ToX12AcknowledgementSettingsPtrOutputWithContext(ctx context.Context) X12AcknowledgementSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12AcknowledgementSettingsPtrOutput)
}

type X12AcknowledgementSettingsResponse struct {
	// The acknowledgement control number lower bound.
	AcknowledgementControlNumberLowerBound *int `pulumi:"acknowledgementControlNumberLowerBound"`
	// The acknowledgement control number prefix.
	AcknowledgementControlNumberPrefix *string `pulumi:"acknowledgementControlNumberPrefix"`
	// The acknowledgement control number suffix.
	AcknowledgementControlNumberSuffix *string `pulumi:"acknowledgementControlNumberSuffix"`
	// The acknowledgement control number upper bound.
	AcknowledgementControlNumberUpperBound *int `pulumi:"acknowledgementControlNumberUpperBound"`
	// The value indicating whether to batch functional acknowledgements.
	BatchFunctionalAcknowledgements *bool `pulumi:"batchFunctionalAcknowledgements"`
	// The value indicating whether to batch implementation acknowledgements.
	BatchImplementationAcknowledgements *bool `pulumi:"batchImplementationAcknowledgements"`
	// The value indicating whether to batch the technical acknowledgements.
	BatchTechnicalAcknowledgements *bool `pulumi:"batchTechnicalAcknowledgements"`
	// The functional acknowledgement version.
	FunctionalAcknowledgementVersion *string `pulumi:"functionalAcknowledgementVersion"`
	// The implementation acknowledgement version.
	ImplementationAcknowledgementVersion *string `pulumi:"implementationAcknowledgementVersion"`
	// The value indicating whether functional acknowledgement is needed.
	NeedFunctionalAcknowledgement *bool `pulumi:"needFunctionalAcknowledgement"`
	// The value indicating whether implementation acknowledgement is needed.
	NeedImplementationAcknowledgement *bool `pulumi:"needImplementationAcknowledgement"`
	// The value indicating whether a loop is needed for valid messages.
	NeedLoopForValidMessages *bool `pulumi:"needLoopForValidMessages"`
	// The value indicating whether technical acknowledgement is needed.
	NeedTechnicalAcknowledgement *bool `pulumi:"needTechnicalAcknowledgement"`
	// The value indicating whether to rollover acknowledgement control number.
	RolloverAcknowledgementControlNumber *bool `pulumi:"rolloverAcknowledgementControlNumber"`
	// The value indicating whether to send synchronous acknowledgement.
	SendSynchronousAcknowledgement *bool `pulumi:"sendSynchronousAcknowledgement"`
}

type X12AcknowledgementSettingsResponseOutput struct{ *pulumi.OutputState }

func (X12AcknowledgementSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12AcknowledgementSettingsResponse)(nil)).Elem()
}

func (o X12AcknowledgementSettingsResponseOutput) ToX12AcknowledgementSettingsResponseOutput() X12AcknowledgementSettingsResponseOutput {
	return o
}

func (o X12AcknowledgementSettingsResponseOutput) ToX12AcknowledgementSettingsResponseOutputWithContext(ctx context.Context) X12AcknowledgementSettingsResponseOutput {
	return o
}

func (o X12AcknowledgementSettingsResponseOutput) ToX12AcknowledgementSettingsResponsePtrOutput() X12AcknowledgementSettingsResponsePtrOutput {
	return o.ToX12AcknowledgementSettingsResponsePtrOutputWithContext(context.Background())
}

func (o X12AcknowledgementSettingsResponseOutput) ToX12AcknowledgementSettingsResponsePtrOutputWithContext(ctx context.Context) X12AcknowledgementSettingsResponsePtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) *X12AcknowledgementSettingsResponse {
		return &v
	}).(X12AcknowledgementSettingsResponsePtrOutput)
}

// The acknowledgement control number lower bound.
func (o X12AcknowledgementSettingsResponseOutput) AcknowledgementControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) *int { return v.AcknowledgementControlNumberLowerBound }).(pulumi.IntPtrOutput)
}

// The acknowledgement control number prefix.
func (o X12AcknowledgementSettingsResponseOutput) AcknowledgementControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) *string { return v.AcknowledgementControlNumberPrefix }).(pulumi.StringPtrOutput)
}

// The acknowledgement control number suffix.
func (o X12AcknowledgementSettingsResponseOutput) AcknowledgementControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) *string { return v.AcknowledgementControlNumberSuffix }).(pulumi.StringPtrOutput)
}

// The acknowledgement control number upper bound.
func (o X12AcknowledgementSettingsResponseOutput) AcknowledgementControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) *int { return v.AcknowledgementControlNumberUpperBound }).(pulumi.IntPtrOutput)
}

// The value indicating whether to batch functional acknowledgements.
func (o X12AcknowledgementSettingsResponseOutput) BatchFunctionalAcknowledgements() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) *bool { return v.BatchFunctionalAcknowledgements }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to batch implementation acknowledgements.
func (o X12AcknowledgementSettingsResponseOutput) BatchImplementationAcknowledgements() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) *bool { return v.BatchImplementationAcknowledgements }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to batch the technical acknowledgements.
func (o X12AcknowledgementSettingsResponseOutput) BatchTechnicalAcknowledgements() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) *bool { return v.BatchTechnicalAcknowledgements }).(pulumi.BoolPtrOutput)
}

// The functional acknowledgement version.
func (o X12AcknowledgementSettingsResponseOutput) FunctionalAcknowledgementVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) *string { return v.FunctionalAcknowledgementVersion }).(pulumi.StringPtrOutput)
}

// The implementation acknowledgement version.
func (o X12AcknowledgementSettingsResponseOutput) ImplementationAcknowledgementVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) *string { return v.ImplementationAcknowledgementVersion }).(pulumi.StringPtrOutput)
}

// The value indicating whether functional acknowledgement is needed.
func (o X12AcknowledgementSettingsResponseOutput) NeedFunctionalAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) *bool { return v.NeedFunctionalAcknowledgement }).(pulumi.BoolPtrOutput)
}

// The value indicating whether implementation acknowledgement is needed.
func (o X12AcknowledgementSettingsResponseOutput) NeedImplementationAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) *bool { return v.NeedImplementationAcknowledgement }).(pulumi.BoolPtrOutput)
}

// The value indicating whether a loop is needed for valid messages.
func (o X12AcknowledgementSettingsResponseOutput) NeedLoopForValidMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) *bool { return v.NeedLoopForValidMessages }).(pulumi.BoolPtrOutput)
}

// The value indicating whether technical acknowledgement is needed.
func (o X12AcknowledgementSettingsResponseOutput) NeedTechnicalAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) *bool { return v.NeedTechnicalAcknowledgement }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover acknowledgement control number.
func (o X12AcknowledgementSettingsResponseOutput) RolloverAcknowledgementControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) *bool { return v.RolloverAcknowledgementControlNumber }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to send synchronous acknowledgement.
func (o X12AcknowledgementSettingsResponseOutput) SendSynchronousAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12AcknowledgementSettingsResponse) *bool { return v.SendSynchronousAcknowledgement }).(pulumi.BoolPtrOutput)
}

type X12AcknowledgementSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (X12AcknowledgementSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12AcknowledgementSettingsResponse)(nil)).Elem()
}

func (o X12AcknowledgementSettingsResponsePtrOutput) ToX12AcknowledgementSettingsResponsePtrOutput() X12AcknowledgementSettingsResponsePtrOutput {
	return o
}

func (o X12AcknowledgementSettingsResponsePtrOutput) ToX12AcknowledgementSettingsResponsePtrOutputWithContext(ctx context.Context) X12AcknowledgementSettingsResponsePtrOutput {
	return o
}

func (o X12AcknowledgementSettingsResponsePtrOutput) Elem() X12AcknowledgementSettingsResponseOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) X12AcknowledgementSettingsResponse { return *v }).(X12AcknowledgementSettingsResponseOutput)
}

// The acknowledgement control number lower bound.
func (o X12AcknowledgementSettingsResponsePtrOutput) AcknowledgementControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.AcknowledgementControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The acknowledgement control number prefix.
func (o X12AcknowledgementSettingsResponsePtrOutput) AcknowledgementControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AcknowledgementControlNumberPrefix
	}).(pulumi.StringPtrOutput)
}

// The acknowledgement control number suffix.
func (o X12AcknowledgementSettingsResponsePtrOutput) AcknowledgementControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AcknowledgementControlNumberSuffix
	}).(pulumi.StringPtrOutput)
}

// The acknowledgement control number upper bound.
func (o X12AcknowledgementSettingsResponsePtrOutput) AcknowledgementControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.AcknowledgementControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

// The value indicating whether to batch functional acknowledgements.
func (o X12AcknowledgementSettingsResponsePtrOutput) BatchFunctionalAcknowledgements() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.BatchFunctionalAcknowledgements
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to batch implementation acknowledgements.
func (o X12AcknowledgementSettingsResponsePtrOutput) BatchImplementationAcknowledgements() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.BatchImplementationAcknowledgements
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to batch the technical acknowledgements.
func (o X12AcknowledgementSettingsResponsePtrOutput) BatchTechnicalAcknowledgements() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.BatchTechnicalAcknowledgements
	}).(pulumi.BoolPtrOutput)
}

// The functional acknowledgement version.
func (o X12AcknowledgementSettingsResponsePtrOutput) FunctionalAcknowledgementVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.FunctionalAcknowledgementVersion
	}).(pulumi.StringPtrOutput)
}

// The implementation acknowledgement version.
func (o X12AcknowledgementSettingsResponsePtrOutput) ImplementationAcknowledgementVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ImplementationAcknowledgementVersion
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether functional acknowledgement is needed.
func (o X12AcknowledgementSettingsResponsePtrOutput) NeedFunctionalAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.NeedFunctionalAcknowledgement
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether implementation acknowledgement is needed.
func (o X12AcknowledgementSettingsResponsePtrOutput) NeedImplementationAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.NeedImplementationAcknowledgement
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether a loop is needed for valid messages.
func (o X12AcknowledgementSettingsResponsePtrOutput) NeedLoopForValidMessages() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.NeedLoopForValidMessages
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether technical acknowledgement is needed.
func (o X12AcknowledgementSettingsResponsePtrOutput) NeedTechnicalAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.NeedTechnicalAcknowledgement
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover acknowledgement control number.
func (o X12AcknowledgementSettingsResponsePtrOutput) RolloverAcknowledgementControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RolloverAcknowledgementControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to send synchronous acknowledgement.
func (o X12AcknowledgementSettingsResponsePtrOutput) SendSynchronousAcknowledgement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12AcknowledgementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SendSynchronousAcknowledgement
	}).(pulumi.BoolPtrOutput)
}

type X12AgreementContent struct {
	// The X12 one-way receive agreement.
	ReceiveAgreement *X12OneWayAgreement `pulumi:"receiveAgreement"`
	// The X12 one-way send agreement.
	SendAgreement *X12OneWayAgreement `pulumi:"sendAgreement"`
}

// X12AgreementContentInput is an input type that accepts X12AgreementContentArgs and X12AgreementContentOutput values.
// You can construct a concrete instance of `X12AgreementContentInput` via:
//
//          X12AgreementContentArgs{...}
type X12AgreementContentInput interface {
	pulumi.Input

	ToX12AgreementContentOutput() X12AgreementContentOutput
	ToX12AgreementContentOutputWithContext(context.Context) X12AgreementContentOutput
}

type X12AgreementContentArgs struct {
	// The X12 one-way receive agreement.
	ReceiveAgreement X12OneWayAgreementPtrInput `pulumi:"receiveAgreement"`
	// The X12 one-way send agreement.
	SendAgreement X12OneWayAgreementPtrInput `pulumi:"sendAgreement"`
}

func (X12AgreementContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12AgreementContent)(nil)).Elem()
}

func (i X12AgreementContentArgs) ToX12AgreementContentOutput() X12AgreementContentOutput {
	return i.ToX12AgreementContentOutputWithContext(context.Background())
}

func (i X12AgreementContentArgs) ToX12AgreementContentOutputWithContext(ctx context.Context) X12AgreementContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12AgreementContentOutput)
}

func (i X12AgreementContentArgs) ToX12AgreementContentPtrOutput() X12AgreementContentPtrOutput {
	return i.ToX12AgreementContentPtrOutputWithContext(context.Background())
}

func (i X12AgreementContentArgs) ToX12AgreementContentPtrOutputWithContext(ctx context.Context) X12AgreementContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12AgreementContentOutput).ToX12AgreementContentPtrOutputWithContext(ctx)
}

// X12AgreementContentPtrInput is an input type that accepts X12AgreementContentArgs, X12AgreementContentPtr and X12AgreementContentPtrOutput values.
// You can construct a concrete instance of `X12AgreementContentPtrInput` via:
//
//          X12AgreementContentArgs{...}
//
//  or:
//
//          nil
type X12AgreementContentPtrInput interface {
	pulumi.Input

	ToX12AgreementContentPtrOutput() X12AgreementContentPtrOutput
	ToX12AgreementContentPtrOutputWithContext(context.Context) X12AgreementContentPtrOutput
}

type x12agreementContentPtrType X12AgreementContentArgs

func X12AgreementContentPtr(v *X12AgreementContentArgs) X12AgreementContentPtrInput {
	return (*x12agreementContentPtrType)(v)
}

func (*x12agreementContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12AgreementContent)(nil)).Elem()
}

func (i *x12agreementContentPtrType) ToX12AgreementContentPtrOutput() X12AgreementContentPtrOutput {
	return i.ToX12AgreementContentPtrOutputWithContext(context.Background())
}

func (i *x12agreementContentPtrType) ToX12AgreementContentPtrOutputWithContext(ctx context.Context) X12AgreementContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12AgreementContentPtrOutput)
}

type X12AgreementContentResponse struct {
	// The X12 one-way receive agreement.
	ReceiveAgreement *X12OneWayAgreementResponse `pulumi:"receiveAgreement"`
	// The X12 one-way send agreement.
	SendAgreement *X12OneWayAgreementResponse `pulumi:"sendAgreement"`
}

type X12AgreementContentResponseOutput struct{ *pulumi.OutputState }

func (X12AgreementContentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12AgreementContentResponse)(nil)).Elem()
}

func (o X12AgreementContentResponseOutput) ToX12AgreementContentResponseOutput() X12AgreementContentResponseOutput {
	return o
}

func (o X12AgreementContentResponseOutput) ToX12AgreementContentResponseOutputWithContext(ctx context.Context) X12AgreementContentResponseOutput {
	return o
}

func (o X12AgreementContentResponseOutput) ToX12AgreementContentResponsePtrOutput() X12AgreementContentResponsePtrOutput {
	return o.ToX12AgreementContentResponsePtrOutputWithContext(context.Background())
}

func (o X12AgreementContentResponseOutput) ToX12AgreementContentResponsePtrOutputWithContext(ctx context.Context) X12AgreementContentResponsePtrOutput {
	return o.ApplyT(func(v X12AgreementContentResponse) *X12AgreementContentResponse {
		return &v
	}).(X12AgreementContentResponsePtrOutput)
}

// The X12 one-way receive agreement.
func (o X12AgreementContentResponseOutput) ReceiveAgreement() X12OneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v X12AgreementContentResponse) *X12OneWayAgreementResponse { return v.ReceiveAgreement }).(X12OneWayAgreementResponsePtrOutput)
}

// The X12 one-way send agreement.
func (o X12AgreementContentResponseOutput) SendAgreement() X12OneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v X12AgreementContentResponse) *X12OneWayAgreementResponse { return v.SendAgreement }).(X12OneWayAgreementResponsePtrOutput)
}

type X12AgreementContentResponsePtrOutput struct{ *pulumi.OutputState }

func (X12AgreementContentResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12AgreementContentResponse)(nil)).Elem()
}

func (o X12AgreementContentResponsePtrOutput) ToX12AgreementContentResponsePtrOutput() X12AgreementContentResponsePtrOutput {
	return o
}

func (o X12AgreementContentResponsePtrOutput) ToX12AgreementContentResponsePtrOutputWithContext(ctx context.Context) X12AgreementContentResponsePtrOutput {
	return o
}

func (o X12AgreementContentResponsePtrOutput) Elem() X12AgreementContentResponseOutput {
	return o.ApplyT(func(v *X12AgreementContentResponse) X12AgreementContentResponse { return *v }).(X12AgreementContentResponseOutput)
}

// The X12 one-way receive agreement.
func (o X12AgreementContentResponsePtrOutput) ReceiveAgreement() X12OneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v *X12AgreementContentResponse) *X12OneWayAgreementResponse {
		if v == nil {
			return nil
		}
		return v.ReceiveAgreement
	}).(X12OneWayAgreementResponsePtrOutput)
}

// The X12 one-way send agreement.
func (o X12AgreementContentResponsePtrOutput) SendAgreement() X12OneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v *X12AgreementContentResponse) *X12OneWayAgreementResponse {
		if v == nil {
			return nil
		}
		return v.SendAgreement
	}).(X12OneWayAgreementResponsePtrOutput)
}

type X12DelimiterOverrides struct {
	// The component separator.
	ComponentSeparator *int `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator *int `pulumi:"dataElementSeparator"`
	// The message id.
	MessageId *string `pulumi:"messageId"`
	// The protocol version.
	ProtocolVersion *string `pulumi:"protocolVersion"`
	// The replacement character.
	ReplaceCharacter *int `pulumi:"replaceCharacter"`
	// The value indicating whether to replace separators in payload.
	ReplaceSeparatorsInPayload *bool `pulumi:"replaceSeparatorsInPayload"`
	// The segment terminator.
	SegmentTerminator *int `pulumi:"segmentTerminator"`
	// The segment terminator suffix.
	SegmentTerminatorSuffix *string `pulumi:"segmentTerminatorSuffix"`
	// The target namespace on which this delimiter settings has to be applied.
	TargetNamespace *string `pulumi:"targetNamespace"`
}

// X12DelimiterOverridesInput is an input type that accepts X12DelimiterOverridesArgs and X12DelimiterOverridesOutput values.
// You can construct a concrete instance of `X12DelimiterOverridesInput` via:
//
//          X12DelimiterOverridesArgs{...}
type X12DelimiterOverridesInput interface {
	pulumi.Input

	ToX12DelimiterOverridesOutput() X12DelimiterOverridesOutput
	ToX12DelimiterOverridesOutputWithContext(context.Context) X12DelimiterOverridesOutput
}

type X12DelimiterOverridesArgs struct {
	// The component separator.
	ComponentSeparator pulumi.IntPtrInput `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator pulumi.IntPtrInput `pulumi:"dataElementSeparator"`
	// The message id.
	MessageId pulumi.StringPtrInput `pulumi:"messageId"`
	// The protocol version.
	ProtocolVersion pulumi.StringPtrInput `pulumi:"protocolVersion"`
	// The replacement character.
	ReplaceCharacter pulumi.IntPtrInput `pulumi:"replaceCharacter"`
	// The value indicating whether to replace separators in payload.
	ReplaceSeparatorsInPayload pulumi.BoolPtrInput `pulumi:"replaceSeparatorsInPayload"`
	// The segment terminator.
	SegmentTerminator pulumi.IntPtrInput `pulumi:"segmentTerminator"`
	// The segment terminator suffix.
	SegmentTerminatorSuffix pulumi.StringPtrInput `pulumi:"segmentTerminatorSuffix"`
	// The target namespace on which this delimiter settings has to be applied.
	TargetNamespace pulumi.StringPtrInput `pulumi:"targetNamespace"`
}

func (X12DelimiterOverridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12DelimiterOverrides)(nil)).Elem()
}

func (i X12DelimiterOverridesArgs) ToX12DelimiterOverridesOutput() X12DelimiterOverridesOutput {
	return i.ToX12DelimiterOverridesOutputWithContext(context.Background())
}

func (i X12DelimiterOverridesArgs) ToX12DelimiterOverridesOutputWithContext(ctx context.Context) X12DelimiterOverridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12DelimiterOverridesOutput)
}

// X12DelimiterOverridesArrayInput is an input type that accepts X12DelimiterOverridesArray and X12DelimiterOverridesArrayOutput values.
// You can construct a concrete instance of `X12DelimiterOverridesArrayInput` via:
//
//          X12DelimiterOverridesArray{ X12DelimiterOverridesArgs{...} }
type X12DelimiterOverridesArrayInput interface {
	pulumi.Input

	ToX12DelimiterOverridesArrayOutput() X12DelimiterOverridesArrayOutput
	ToX12DelimiterOverridesArrayOutputWithContext(context.Context) X12DelimiterOverridesArrayOutput
}

type X12DelimiterOverridesArray []X12DelimiterOverridesInput

func (X12DelimiterOverridesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12DelimiterOverrides)(nil)).Elem()
}

func (i X12DelimiterOverridesArray) ToX12DelimiterOverridesArrayOutput() X12DelimiterOverridesArrayOutput {
	return i.ToX12DelimiterOverridesArrayOutputWithContext(context.Background())
}

func (i X12DelimiterOverridesArray) ToX12DelimiterOverridesArrayOutputWithContext(ctx context.Context) X12DelimiterOverridesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12DelimiterOverridesArrayOutput)
}

type X12DelimiterOverridesResponse struct {
	// The component separator.
	ComponentSeparator *int `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator *int `pulumi:"dataElementSeparator"`
	// The message id.
	MessageId *string `pulumi:"messageId"`
	// The protocol version.
	ProtocolVersion *string `pulumi:"protocolVersion"`
	// The replacement character.
	ReplaceCharacter *int `pulumi:"replaceCharacter"`
	// The value indicating whether to replace separators in payload.
	ReplaceSeparatorsInPayload *bool `pulumi:"replaceSeparatorsInPayload"`
	// The segment terminator.
	SegmentTerminator *int `pulumi:"segmentTerminator"`
	// The segment terminator suffix.
	SegmentTerminatorSuffix *string `pulumi:"segmentTerminatorSuffix"`
	// The target namespace on which this delimiter settings has to be applied.
	TargetNamespace *string `pulumi:"targetNamespace"`
}

type X12DelimiterOverridesResponseOutput struct{ *pulumi.OutputState }

func (X12DelimiterOverridesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12DelimiterOverridesResponse)(nil)).Elem()
}

func (o X12DelimiterOverridesResponseOutput) ToX12DelimiterOverridesResponseOutput() X12DelimiterOverridesResponseOutput {
	return o
}

func (o X12DelimiterOverridesResponseOutput) ToX12DelimiterOverridesResponseOutputWithContext(ctx context.Context) X12DelimiterOverridesResponseOutput {
	return o
}

// The component separator.
func (o X12DelimiterOverridesResponseOutput) ComponentSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v X12DelimiterOverridesResponse) *int { return v.ComponentSeparator }).(pulumi.IntPtrOutput)
}

// The data element separator.
func (o X12DelimiterOverridesResponseOutput) DataElementSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v X12DelimiterOverridesResponse) *int { return v.DataElementSeparator }).(pulumi.IntPtrOutput)
}

// The message id.
func (o X12DelimiterOverridesResponseOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12DelimiterOverridesResponse) *string { return v.MessageId }).(pulumi.StringPtrOutput)
}

// The protocol version.
func (o X12DelimiterOverridesResponseOutput) ProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12DelimiterOverridesResponse) *string { return v.ProtocolVersion }).(pulumi.StringPtrOutput)
}

// The replacement character.
func (o X12DelimiterOverridesResponseOutput) ReplaceCharacter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v X12DelimiterOverridesResponse) *int { return v.ReplaceCharacter }).(pulumi.IntPtrOutput)
}

// The value indicating whether to replace separators in payload.
func (o X12DelimiterOverridesResponseOutput) ReplaceSeparatorsInPayload() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12DelimiterOverridesResponse) *bool { return v.ReplaceSeparatorsInPayload }).(pulumi.BoolPtrOutput)
}

// The segment terminator.
func (o X12DelimiterOverridesResponseOutput) SegmentTerminator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v X12DelimiterOverridesResponse) *int { return v.SegmentTerminator }).(pulumi.IntPtrOutput)
}

// The segment terminator suffix.
func (o X12DelimiterOverridesResponseOutput) SegmentTerminatorSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12DelimiterOverridesResponse) *string { return v.SegmentTerminatorSuffix }).(pulumi.StringPtrOutput)
}

// The target namespace on which this delimiter settings has to be applied.
func (o X12DelimiterOverridesResponseOutput) TargetNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12DelimiterOverridesResponse) *string { return v.TargetNamespace }).(pulumi.StringPtrOutput)
}

type X12DelimiterOverridesResponseArrayOutput struct{ *pulumi.OutputState }

func (X12DelimiterOverridesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12DelimiterOverridesResponse)(nil)).Elem()
}

func (o X12DelimiterOverridesResponseArrayOutput) ToX12DelimiterOverridesResponseArrayOutput() X12DelimiterOverridesResponseArrayOutput {
	return o
}

func (o X12DelimiterOverridesResponseArrayOutput) ToX12DelimiterOverridesResponseArrayOutputWithContext(ctx context.Context) X12DelimiterOverridesResponseArrayOutput {
	return o
}

func (o X12DelimiterOverridesResponseArrayOutput) Index(i pulumi.IntInput) X12DelimiterOverridesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) X12DelimiterOverridesResponse {
		return vs[0].([]X12DelimiterOverridesResponse)[vs[1].(int)]
	}).(X12DelimiterOverridesResponseOutput)
}

type X12EnvelopeOverride struct {
	// The date format.
	DateFormat *string `pulumi:"dateFormat"`
	// The functional identifier code.
	FunctionalIdentifierCode *string `pulumi:"functionalIdentifierCode"`
	// The header version.
	HeaderVersion *string `pulumi:"headerVersion"`
	// The message id on which this envelope settings has to be applied.
	MessageId *string `pulumi:"messageId"`
	// The protocol version on which this envelope settings has to be applied.
	ProtocolVersion *string `pulumi:"protocolVersion"`
	// The receiver application id.
	ReceiverApplicationId *string `pulumi:"receiverApplicationId"`
	// The responsible agency code.
	ResponsibleAgencyCode *int `pulumi:"responsibleAgencyCode"`
	// The sender application id.
	SenderApplicationId *string `pulumi:"senderApplicationId"`
	// The target namespace on which this envelope settings has to be applied.
	TargetNamespace *string `pulumi:"targetNamespace"`
	// The time format.
	TimeFormat *string `pulumi:"timeFormat"`
}

// X12EnvelopeOverrideInput is an input type that accepts X12EnvelopeOverrideArgs and X12EnvelopeOverrideOutput values.
// You can construct a concrete instance of `X12EnvelopeOverrideInput` via:
//
//          X12EnvelopeOverrideArgs{...}
type X12EnvelopeOverrideInput interface {
	pulumi.Input

	ToX12EnvelopeOverrideOutput() X12EnvelopeOverrideOutput
	ToX12EnvelopeOverrideOutputWithContext(context.Context) X12EnvelopeOverrideOutput
}

type X12EnvelopeOverrideArgs struct {
	// The date format.
	DateFormat pulumi.StringPtrInput `pulumi:"dateFormat"`
	// The functional identifier code.
	FunctionalIdentifierCode pulumi.StringPtrInput `pulumi:"functionalIdentifierCode"`
	// The header version.
	HeaderVersion pulumi.StringPtrInput `pulumi:"headerVersion"`
	// The message id on which this envelope settings has to be applied.
	MessageId pulumi.StringPtrInput `pulumi:"messageId"`
	// The protocol version on which this envelope settings has to be applied.
	ProtocolVersion pulumi.StringPtrInput `pulumi:"protocolVersion"`
	// The receiver application id.
	ReceiverApplicationId pulumi.StringPtrInput `pulumi:"receiverApplicationId"`
	// The responsible agency code.
	ResponsibleAgencyCode pulumi.IntPtrInput `pulumi:"responsibleAgencyCode"`
	// The sender application id.
	SenderApplicationId pulumi.StringPtrInput `pulumi:"senderApplicationId"`
	// The target namespace on which this envelope settings has to be applied.
	TargetNamespace pulumi.StringPtrInput `pulumi:"targetNamespace"`
	// The time format.
	TimeFormat pulumi.StringPtrInput `pulumi:"timeFormat"`
}

func (X12EnvelopeOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12EnvelopeOverride)(nil)).Elem()
}

func (i X12EnvelopeOverrideArgs) ToX12EnvelopeOverrideOutput() X12EnvelopeOverrideOutput {
	return i.ToX12EnvelopeOverrideOutputWithContext(context.Background())
}

func (i X12EnvelopeOverrideArgs) ToX12EnvelopeOverrideOutputWithContext(ctx context.Context) X12EnvelopeOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12EnvelopeOverrideOutput)
}

// X12EnvelopeOverrideArrayInput is an input type that accepts X12EnvelopeOverrideArray and X12EnvelopeOverrideArrayOutput values.
// You can construct a concrete instance of `X12EnvelopeOverrideArrayInput` via:
//
//          X12EnvelopeOverrideArray{ X12EnvelopeOverrideArgs{...} }
type X12EnvelopeOverrideArrayInput interface {
	pulumi.Input

	ToX12EnvelopeOverrideArrayOutput() X12EnvelopeOverrideArrayOutput
	ToX12EnvelopeOverrideArrayOutputWithContext(context.Context) X12EnvelopeOverrideArrayOutput
}

type X12EnvelopeOverrideArray []X12EnvelopeOverrideInput

func (X12EnvelopeOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12EnvelopeOverride)(nil)).Elem()
}

func (i X12EnvelopeOverrideArray) ToX12EnvelopeOverrideArrayOutput() X12EnvelopeOverrideArrayOutput {
	return i.ToX12EnvelopeOverrideArrayOutputWithContext(context.Background())
}

func (i X12EnvelopeOverrideArray) ToX12EnvelopeOverrideArrayOutputWithContext(ctx context.Context) X12EnvelopeOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12EnvelopeOverrideArrayOutput)
}

type X12EnvelopeOverrideResponse struct {
	// The date format.
	DateFormat *string `pulumi:"dateFormat"`
	// The functional identifier code.
	FunctionalIdentifierCode *string `pulumi:"functionalIdentifierCode"`
	// The header version.
	HeaderVersion *string `pulumi:"headerVersion"`
	// The message id on which this envelope settings has to be applied.
	MessageId *string `pulumi:"messageId"`
	// The protocol version on which this envelope settings has to be applied.
	ProtocolVersion *string `pulumi:"protocolVersion"`
	// The receiver application id.
	ReceiverApplicationId *string `pulumi:"receiverApplicationId"`
	// The responsible agency code.
	ResponsibleAgencyCode *int `pulumi:"responsibleAgencyCode"`
	// The sender application id.
	SenderApplicationId *string `pulumi:"senderApplicationId"`
	// The target namespace on which this envelope settings has to be applied.
	TargetNamespace *string `pulumi:"targetNamespace"`
	// The time format.
	TimeFormat *string `pulumi:"timeFormat"`
}

type X12EnvelopeOverrideResponseOutput struct{ *pulumi.OutputState }

func (X12EnvelopeOverrideResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12EnvelopeOverrideResponse)(nil)).Elem()
}

func (o X12EnvelopeOverrideResponseOutput) ToX12EnvelopeOverrideResponseOutput() X12EnvelopeOverrideResponseOutput {
	return o
}

func (o X12EnvelopeOverrideResponseOutput) ToX12EnvelopeOverrideResponseOutputWithContext(ctx context.Context) X12EnvelopeOverrideResponseOutput {
	return o
}

// The date format.
func (o X12EnvelopeOverrideResponseOutput) DateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeOverrideResponse) *string { return v.DateFormat }).(pulumi.StringPtrOutput)
}

// The functional identifier code.
func (o X12EnvelopeOverrideResponseOutput) FunctionalIdentifierCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeOverrideResponse) *string { return v.FunctionalIdentifierCode }).(pulumi.StringPtrOutput)
}

// The header version.
func (o X12EnvelopeOverrideResponseOutput) HeaderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeOverrideResponse) *string { return v.HeaderVersion }).(pulumi.StringPtrOutput)
}

// The message id on which this envelope settings has to be applied.
func (o X12EnvelopeOverrideResponseOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeOverrideResponse) *string { return v.MessageId }).(pulumi.StringPtrOutput)
}

// The protocol version on which this envelope settings has to be applied.
func (o X12EnvelopeOverrideResponseOutput) ProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeOverrideResponse) *string { return v.ProtocolVersion }).(pulumi.StringPtrOutput)
}

// The receiver application id.
func (o X12EnvelopeOverrideResponseOutput) ReceiverApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeOverrideResponse) *string { return v.ReceiverApplicationId }).(pulumi.StringPtrOutput)
}

// The responsible agency code.
func (o X12EnvelopeOverrideResponseOutput) ResponsibleAgencyCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v X12EnvelopeOverrideResponse) *int { return v.ResponsibleAgencyCode }).(pulumi.IntPtrOutput)
}

// The sender application id.
func (o X12EnvelopeOverrideResponseOutput) SenderApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeOverrideResponse) *string { return v.SenderApplicationId }).(pulumi.StringPtrOutput)
}

// The target namespace on which this envelope settings has to be applied.
func (o X12EnvelopeOverrideResponseOutput) TargetNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeOverrideResponse) *string { return v.TargetNamespace }).(pulumi.StringPtrOutput)
}

// The time format.
func (o X12EnvelopeOverrideResponseOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeOverrideResponse) *string { return v.TimeFormat }).(pulumi.StringPtrOutput)
}

type X12EnvelopeOverrideResponseArrayOutput struct{ *pulumi.OutputState }

func (X12EnvelopeOverrideResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12EnvelopeOverrideResponse)(nil)).Elem()
}

func (o X12EnvelopeOverrideResponseArrayOutput) ToX12EnvelopeOverrideResponseArrayOutput() X12EnvelopeOverrideResponseArrayOutput {
	return o
}

func (o X12EnvelopeOverrideResponseArrayOutput) ToX12EnvelopeOverrideResponseArrayOutputWithContext(ctx context.Context) X12EnvelopeOverrideResponseArrayOutput {
	return o
}

func (o X12EnvelopeOverrideResponseArrayOutput) Index(i pulumi.IntInput) X12EnvelopeOverrideResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) X12EnvelopeOverrideResponse {
		return vs[0].([]X12EnvelopeOverrideResponse)[vs[1].(int)]
	}).(X12EnvelopeOverrideResponseOutput)
}

type X12EnvelopeSettings struct {
	// The controls standards id.
	ControlStandardsId *int `pulumi:"controlStandardsId"`
	// The control version number.
	ControlVersionNumber *string `pulumi:"controlVersionNumber"`
	// The value indicating whether to enable default group headers.
	EnableDefaultGroupHeaders *bool `pulumi:"enableDefaultGroupHeaders"`
	// The functional group id.
	FunctionalGroupId *string `pulumi:"functionalGroupId"`
	// The group control number lower bound.
	GroupControlNumberLowerBound *int `pulumi:"groupControlNumberLowerBound"`
	// The group control number upper bound.
	GroupControlNumberUpperBound *int `pulumi:"groupControlNumberUpperBound"`
	// The group header agency code.
	GroupHeaderAgencyCode *string `pulumi:"groupHeaderAgencyCode"`
	// The group header date format.
	GroupHeaderDateFormat *string `pulumi:"groupHeaderDateFormat"`
	// The group header time format.
	GroupHeaderTimeFormat *string `pulumi:"groupHeaderTimeFormat"`
	// The group header version.
	GroupHeaderVersion *string `pulumi:"groupHeaderVersion"`
	// The interchange  control number lower bound.
	InterchangeControlNumberLowerBound *int `pulumi:"interchangeControlNumberLowerBound"`
	// The interchange  control number upper bound.
	InterchangeControlNumberUpperBound *int `pulumi:"interchangeControlNumberUpperBound"`
	// The value indicating whether to overwrite existing transaction set control number.
	OverwriteExistingTransactionSetControlNumber *bool `pulumi:"overwriteExistingTransactionSetControlNumber"`
	// The receiver application id.
	ReceiverApplicationId *string `pulumi:"receiverApplicationId"`
	// The value indicating whether to rollover group control number.
	RolloverGroupControlNumber *bool `pulumi:"rolloverGroupControlNumber"`
	// The value indicating whether to rollover interchange control number.
	RolloverInterchangeControlNumber *bool `pulumi:"rolloverInterchangeControlNumber"`
	// The value indicating whether to rollover transaction set control number.
	RolloverTransactionSetControlNumber *bool `pulumi:"rolloverTransactionSetControlNumber"`
	// The sender application id.
	SenderApplicationId *string `pulumi:"senderApplicationId"`
	// The transaction set control number lower bound.
	TransactionSetControlNumberLowerBound *int `pulumi:"transactionSetControlNumberLowerBound"`
	// The transaction set control number prefix.
	TransactionSetControlNumberPrefix *string `pulumi:"transactionSetControlNumberPrefix"`
	// The transaction set control number suffix.
	TransactionSetControlNumberSuffix *string `pulumi:"transactionSetControlNumberSuffix"`
	// The transaction set control number upper bound.
	TransactionSetControlNumberUpperBound *int `pulumi:"transactionSetControlNumberUpperBound"`
	// The usage indicator.
	UsageIndicator *string `pulumi:"usageIndicator"`
	// The value indicating whether to use control standards id as repetition character.
	UseControlStandardsIdAsRepetitionCharacter *bool `pulumi:"useControlStandardsIdAsRepetitionCharacter"`
}

// X12EnvelopeSettingsInput is an input type that accepts X12EnvelopeSettingsArgs and X12EnvelopeSettingsOutput values.
// You can construct a concrete instance of `X12EnvelopeSettingsInput` via:
//
//          X12EnvelopeSettingsArgs{...}
type X12EnvelopeSettingsInput interface {
	pulumi.Input

	ToX12EnvelopeSettingsOutput() X12EnvelopeSettingsOutput
	ToX12EnvelopeSettingsOutputWithContext(context.Context) X12EnvelopeSettingsOutput
}

type X12EnvelopeSettingsArgs struct {
	// The controls standards id.
	ControlStandardsId pulumi.IntPtrInput `pulumi:"controlStandardsId"`
	// The control version number.
	ControlVersionNumber pulumi.StringPtrInput `pulumi:"controlVersionNumber"`
	// The value indicating whether to enable default group headers.
	EnableDefaultGroupHeaders pulumi.BoolPtrInput `pulumi:"enableDefaultGroupHeaders"`
	// The functional group id.
	FunctionalGroupId pulumi.StringPtrInput `pulumi:"functionalGroupId"`
	// The group control number lower bound.
	GroupControlNumberLowerBound pulumi.IntPtrInput `pulumi:"groupControlNumberLowerBound"`
	// The group control number upper bound.
	GroupControlNumberUpperBound pulumi.IntPtrInput `pulumi:"groupControlNumberUpperBound"`
	// The group header agency code.
	GroupHeaderAgencyCode pulumi.StringPtrInput `pulumi:"groupHeaderAgencyCode"`
	// The group header date format.
	GroupHeaderDateFormat pulumi.StringPtrInput `pulumi:"groupHeaderDateFormat"`
	// The group header time format.
	GroupHeaderTimeFormat pulumi.StringPtrInput `pulumi:"groupHeaderTimeFormat"`
	// The group header version.
	GroupHeaderVersion pulumi.StringPtrInput `pulumi:"groupHeaderVersion"`
	// The interchange  control number lower bound.
	InterchangeControlNumberLowerBound pulumi.IntPtrInput `pulumi:"interchangeControlNumberLowerBound"`
	// The interchange  control number upper bound.
	InterchangeControlNumberUpperBound pulumi.IntPtrInput `pulumi:"interchangeControlNumberUpperBound"`
	// The value indicating whether to overwrite existing transaction set control number.
	OverwriteExistingTransactionSetControlNumber pulumi.BoolPtrInput `pulumi:"overwriteExistingTransactionSetControlNumber"`
	// The receiver application id.
	ReceiverApplicationId pulumi.StringPtrInput `pulumi:"receiverApplicationId"`
	// The value indicating whether to rollover group control number.
	RolloverGroupControlNumber pulumi.BoolPtrInput `pulumi:"rolloverGroupControlNumber"`
	// The value indicating whether to rollover interchange control number.
	RolloverInterchangeControlNumber pulumi.BoolPtrInput `pulumi:"rolloverInterchangeControlNumber"`
	// The value indicating whether to rollover transaction set control number.
	RolloverTransactionSetControlNumber pulumi.BoolPtrInput `pulumi:"rolloverTransactionSetControlNumber"`
	// The sender application id.
	SenderApplicationId pulumi.StringPtrInput `pulumi:"senderApplicationId"`
	// The transaction set control number lower bound.
	TransactionSetControlNumberLowerBound pulumi.IntPtrInput `pulumi:"transactionSetControlNumberLowerBound"`
	// The transaction set control number prefix.
	TransactionSetControlNumberPrefix pulumi.StringPtrInput `pulumi:"transactionSetControlNumberPrefix"`
	// The transaction set control number suffix.
	TransactionSetControlNumberSuffix pulumi.StringPtrInput `pulumi:"transactionSetControlNumberSuffix"`
	// The transaction set control number upper bound.
	TransactionSetControlNumberUpperBound pulumi.IntPtrInput `pulumi:"transactionSetControlNumberUpperBound"`
	// The usage indicator.
	UsageIndicator pulumi.StringPtrInput `pulumi:"usageIndicator"`
	// The value indicating whether to use control standards id as repetition character.
	UseControlStandardsIdAsRepetitionCharacter pulumi.BoolPtrInput `pulumi:"useControlStandardsIdAsRepetitionCharacter"`
}

func (X12EnvelopeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12EnvelopeSettings)(nil)).Elem()
}

func (i X12EnvelopeSettingsArgs) ToX12EnvelopeSettingsOutput() X12EnvelopeSettingsOutput {
	return i.ToX12EnvelopeSettingsOutputWithContext(context.Background())
}

func (i X12EnvelopeSettingsArgs) ToX12EnvelopeSettingsOutputWithContext(ctx context.Context) X12EnvelopeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12EnvelopeSettingsOutput)
}

func (i X12EnvelopeSettingsArgs) ToX12EnvelopeSettingsPtrOutput() X12EnvelopeSettingsPtrOutput {
	return i.ToX12EnvelopeSettingsPtrOutputWithContext(context.Background())
}

func (i X12EnvelopeSettingsArgs) ToX12EnvelopeSettingsPtrOutputWithContext(ctx context.Context) X12EnvelopeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12EnvelopeSettingsOutput).ToX12EnvelopeSettingsPtrOutputWithContext(ctx)
}

// X12EnvelopeSettingsPtrInput is an input type that accepts X12EnvelopeSettingsArgs, X12EnvelopeSettingsPtr and X12EnvelopeSettingsPtrOutput values.
// You can construct a concrete instance of `X12EnvelopeSettingsPtrInput` via:
//
//          X12EnvelopeSettingsArgs{...}
//
//  or:
//
//          nil
type X12EnvelopeSettingsPtrInput interface {
	pulumi.Input

	ToX12EnvelopeSettingsPtrOutput() X12EnvelopeSettingsPtrOutput
	ToX12EnvelopeSettingsPtrOutputWithContext(context.Context) X12EnvelopeSettingsPtrOutput
}

type x12envelopeSettingsPtrType X12EnvelopeSettingsArgs

func X12EnvelopeSettingsPtr(v *X12EnvelopeSettingsArgs) X12EnvelopeSettingsPtrInput {
	return (*x12envelopeSettingsPtrType)(v)
}

func (*x12envelopeSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12EnvelopeSettings)(nil)).Elem()
}

func (i *x12envelopeSettingsPtrType) ToX12EnvelopeSettingsPtrOutput() X12EnvelopeSettingsPtrOutput {
	return i.ToX12EnvelopeSettingsPtrOutputWithContext(context.Background())
}

func (i *x12envelopeSettingsPtrType) ToX12EnvelopeSettingsPtrOutputWithContext(ctx context.Context) X12EnvelopeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12EnvelopeSettingsPtrOutput)
}

type X12EnvelopeSettingsResponse struct {
	// The controls standards id.
	ControlStandardsId *int `pulumi:"controlStandardsId"`
	// The control version number.
	ControlVersionNumber *string `pulumi:"controlVersionNumber"`
	// The value indicating whether to enable default group headers.
	EnableDefaultGroupHeaders *bool `pulumi:"enableDefaultGroupHeaders"`
	// The functional group id.
	FunctionalGroupId *string `pulumi:"functionalGroupId"`
	// The group control number lower bound.
	GroupControlNumberLowerBound *int `pulumi:"groupControlNumberLowerBound"`
	// The group control number upper bound.
	GroupControlNumberUpperBound *int `pulumi:"groupControlNumberUpperBound"`
	// The group header agency code.
	GroupHeaderAgencyCode *string `pulumi:"groupHeaderAgencyCode"`
	// The group header date format.
	GroupHeaderDateFormat *string `pulumi:"groupHeaderDateFormat"`
	// The group header time format.
	GroupHeaderTimeFormat *string `pulumi:"groupHeaderTimeFormat"`
	// The group header version.
	GroupHeaderVersion *string `pulumi:"groupHeaderVersion"`
	// The interchange  control number lower bound.
	InterchangeControlNumberLowerBound *int `pulumi:"interchangeControlNumberLowerBound"`
	// The interchange  control number upper bound.
	InterchangeControlNumberUpperBound *int `pulumi:"interchangeControlNumberUpperBound"`
	// The value indicating whether to overwrite existing transaction set control number.
	OverwriteExistingTransactionSetControlNumber *bool `pulumi:"overwriteExistingTransactionSetControlNumber"`
	// The receiver application id.
	ReceiverApplicationId *string `pulumi:"receiverApplicationId"`
	// The value indicating whether to rollover group control number.
	RolloverGroupControlNumber *bool `pulumi:"rolloverGroupControlNumber"`
	// The value indicating whether to rollover interchange control number.
	RolloverInterchangeControlNumber *bool `pulumi:"rolloverInterchangeControlNumber"`
	// The value indicating whether to rollover transaction set control number.
	RolloverTransactionSetControlNumber *bool `pulumi:"rolloverTransactionSetControlNumber"`
	// The sender application id.
	SenderApplicationId *string `pulumi:"senderApplicationId"`
	// The transaction set control number lower bound.
	TransactionSetControlNumberLowerBound *int `pulumi:"transactionSetControlNumberLowerBound"`
	// The transaction set control number prefix.
	TransactionSetControlNumberPrefix *string `pulumi:"transactionSetControlNumberPrefix"`
	// The transaction set control number suffix.
	TransactionSetControlNumberSuffix *string `pulumi:"transactionSetControlNumberSuffix"`
	// The transaction set control number upper bound.
	TransactionSetControlNumberUpperBound *int `pulumi:"transactionSetControlNumberUpperBound"`
	// The usage indicator.
	UsageIndicator *string `pulumi:"usageIndicator"`
	// The value indicating whether to use control standards id as repetition character.
	UseControlStandardsIdAsRepetitionCharacter *bool `pulumi:"useControlStandardsIdAsRepetitionCharacter"`
}

type X12EnvelopeSettingsResponseOutput struct{ *pulumi.OutputState }

func (X12EnvelopeSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12EnvelopeSettingsResponse)(nil)).Elem()
}

func (o X12EnvelopeSettingsResponseOutput) ToX12EnvelopeSettingsResponseOutput() X12EnvelopeSettingsResponseOutput {
	return o
}

func (o X12EnvelopeSettingsResponseOutput) ToX12EnvelopeSettingsResponseOutputWithContext(ctx context.Context) X12EnvelopeSettingsResponseOutput {
	return o
}

func (o X12EnvelopeSettingsResponseOutput) ToX12EnvelopeSettingsResponsePtrOutput() X12EnvelopeSettingsResponsePtrOutput {
	return o.ToX12EnvelopeSettingsResponsePtrOutputWithContext(context.Background())
}

func (o X12EnvelopeSettingsResponseOutput) ToX12EnvelopeSettingsResponsePtrOutputWithContext(ctx context.Context) X12EnvelopeSettingsResponsePtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *X12EnvelopeSettingsResponse {
		return &v
	}).(X12EnvelopeSettingsResponsePtrOutput)
}

// The controls standards id.
func (o X12EnvelopeSettingsResponseOutput) ControlStandardsId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *int { return v.ControlStandardsId }).(pulumi.IntPtrOutput)
}

// The control version number.
func (o X12EnvelopeSettingsResponseOutput) ControlVersionNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *string { return v.ControlVersionNumber }).(pulumi.StringPtrOutput)
}

// The value indicating whether to enable default group headers.
func (o X12EnvelopeSettingsResponseOutput) EnableDefaultGroupHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *bool { return v.EnableDefaultGroupHeaders }).(pulumi.BoolPtrOutput)
}

// The functional group id.
func (o X12EnvelopeSettingsResponseOutput) FunctionalGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *string { return v.FunctionalGroupId }).(pulumi.StringPtrOutput)
}

// The group control number lower bound.
func (o X12EnvelopeSettingsResponseOutput) GroupControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *int { return v.GroupControlNumberLowerBound }).(pulumi.IntPtrOutput)
}

// The group control number upper bound.
func (o X12EnvelopeSettingsResponseOutput) GroupControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *int { return v.GroupControlNumberUpperBound }).(pulumi.IntPtrOutput)
}

// The group header agency code.
func (o X12EnvelopeSettingsResponseOutput) GroupHeaderAgencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *string { return v.GroupHeaderAgencyCode }).(pulumi.StringPtrOutput)
}

// The group header date format.
func (o X12EnvelopeSettingsResponseOutput) GroupHeaderDateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *string { return v.GroupHeaderDateFormat }).(pulumi.StringPtrOutput)
}

// The group header time format.
func (o X12EnvelopeSettingsResponseOutput) GroupHeaderTimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *string { return v.GroupHeaderTimeFormat }).(pulumi.StringPtrOutput)
}

// The group header version.
func (o X12EnvelopeSettingsResponseOutput) GroupHeaderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *string { return v.GroupHeaderVersion }).(pulumi.StringPtrOutput)
}

// The interchange  control number lower bound.
func (o X12EnvelopeSettingsResponseOutput) InterchangeControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *int { return v.InterchangeControlNumberLowerBound }).(pulumi.IntPtrOutput)
}

// The interchange  control number upper bound.
func (o X12EnvelopeSettingsResponseOutput) InterchangeControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *int { return v.InterchangeControlNumberUpperBound }).(pulumi.IntPtrOutput)
}

// The value indicating whether to overwrite existing transaction set control number.
func (o X12EnvelopeSettingsResponseOutput) OverwriteExistingTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *bool { return v.OverwriteExistingTransactionSetControlNumber }).(pulumi.BoolPtrOutput)
}

// The receiver application id.
func (o X12EnvelopeSettingsResponseOutput) ReceiverApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *string { return v.ReceiverApplicationId }).(pulumi.StringPtrOutput)
}

// The value indicating whether to rollover group control number.
func (o X12EnvelopeSettingsResponseOutput) RolloverGroupControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *bool { return v.RolloverGroupControlNumber }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover interchange control number.
func (o X12EnvelopeSettingsResponseOutput) RolloverInterchangeControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *bool { return v.RolloverInterchangeControlNumber }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover transaction set control number.
func (o X12EnvelopeSettingsResponseOutput) RolloverTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *bool { return v.RolloverTransactionSetControlNumber }).(pulumi.BoolPtrOutput)
}

// The sender application id.
func (o X12EnvelopeSettingsResponseOutput) SenderApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *string { return v.SenderApplicationId }).(pulumi.StringPtrOutput)
}

// The transaction set control number lower bound.
func (o X12EnvelopeSettingsResponseOutput) TransactionSetControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *int { return v.TransactionSetControlNumberLowerBound }).(pulumi.IntPtrOutput)
}

// The transaction set control number prefix.
func (o X12EnvelopeSettingsResponseOutput) TransactionSetControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *string { return v.TransactionSetControlNumberPrefix }).(pulumi.StringPtrOutput)
}

// The transaction set control number suffix.
func (o X12EnvelopeSettingsResponseOutput) TransactionSetControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *string { return v.TransactionSetControlNumberSuffix }).(pulumi.StringPtrOutput)
}

// The transaction set control number upper bound.
func (o X12EnvelopeSettingsResponseOutput) TransactionSetControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *int { return v.TransactionSetControlNumberUpperBound }).(pulumi.IntPtrOutput)
}

// The usage indicator.
func (o X12EnvelopeSettingsResponseOutput) UsageIndicator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *string { return v.UsageIndicator }).(pulumi.StringPtrOutput)
}

// The value indicating whether to use control standards id as repetition character.
func (o X12EnvelopeSettingsResponseOutput) UseControlStandardsIdAsRepetitionCharacter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12EnvelopeSettingsResponse) *bool { return v.UseControlStandardsIdAsRepetitionCharacter }).(pulumi.BoolPtrOutput)
}

type X12EnvelopeSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (X12EnvelopeSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12EnvelopeSettingsResponse)(nil)).Elem()
}

func (o X12EnvelopeSettingsResponsePtrOutput) ToX12EnvelopeSettingsResponsePtrOutput() X12EnvelopeSettingsResponsePtrOutput {
	return o
}

func (o X12EnvelopeSettingsResponsePtrOutput) ToX12EnvelopeSettingsResponsePtrOutputWithContext(ctx context.Context) X12EnvelopeSettingsResponsePtrOutput {
	return o
}

func (o X12EnvelopeSettingsResponsePtrOutput) Elem() X12EnvelopeSettingsResponseOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) X12EnvelopeSettingsResponse { return *v }).(X12EnvelopeSettingsResponseOutput)
}

// The controls standards id.
func (o X12EnvelopeSettingsResponsePtrOutput) ControlStandardsId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.ControlStandardsId
	}).(pulumi.IntPtrOutput)
}

// The control version number.
func (o X12EnvelopeSettingsResponsePtrOutput) ControlVersionNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ControlVersionNumber
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to enable default group headers.
func (o X12EnvelopeSettingsResponsePtrOutput) EnableDefaultGroupHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDefaultGroupHeaders
	}).(pulumi.BoolPtrOutput)
}

// The functional group id.
func (o X12EnvelopeSettingsResponsePtrOutput) FunctionalGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.FunctionalGroupId
	}).(pulumi.StringPtrOutput)
}

// The group control number lower bound.
func (o X12EnvelopeSettingsResponsePtrOutput) GroupControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.GroupControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The group control number upper bound.
func (o X12EnvelopeSettingsResponsePtrOutput) GroupControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.GroupControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

// The group header agency code.
func (o X12EnvelopeSettingsResponsePtrOutput) GroupHeaderAgencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupHeaderAgencyCode
	}).(pulumi.StringPtrOutput)
}

// The group header date format.
func (o X12EnvelopeSettingsResponsePtrOutput) GroupHeaderDateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupHeaderDateFormat
	}).(pulumi.StringPtrOutput)
}

// The group header time format.
func (o X12EnvelopeSettingsResponsePtrOutput) GroupHeaderTimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupHeaderTimeFormat
	}).(pulumi.StringPtrOutput)
}

// The group header version.
func (o X12EnvelopeSettingsResponsePtrOutput) GroupHeaderVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupHeaderVersion
	}).(pulumi.StringPtrOutput)
}

// The interchange  control number lower bound.
func (o X12EnvelopeSettingsResponsePtrOutput) InterchangeControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.InterchangeControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The interchange  control number upper bound.
func (o X12EnvelopeSettingsResponsePtrOutput) InterchangeControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.InterchangeControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

// The value indicating whether to overwrite existing transaction set control number.
func (o X12EnvelopeSettingsResponsePtrOutput) OverwriteExistingTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.OverwriteExistingTransactionSetControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The receiver application id.
func (o X12EnvelopeSettingsResponsePtrOutput) ReceiverApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReceiverApplicationId
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to rollover group control number.
func (o X12EnvelopeSettingsResponsePtrOutput) RolloverGroupControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RolloverGroupControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover interchange control number.
func (o X12EnvelopeSettingsResponsePtrOutput) RolloverInterchangeControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RolloverInterchangeControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to rollover transaction set control number.
func (o X12EnvelopeSettingsResponsePtrOutput) RolloverTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RolloverTransactionSetControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The sender application id.
func (o X12EnvelopeSettingsResponsePtrOutput) SenderApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.SenderApplicationId
	}).(pulumi.StringPtrOutput)
}

// The transaction set control number lower bound.
func (o X12EnvelopeSettingsResponsePtrOutput) TransactionSetControlNumberLowerBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.TransactionSetControlNumberLowerBound
	}).(pulumi.IntPtrOutput)
}

// The transaction set control number prefix.
func (o X12EnvelopeSettingsResponsePtrOutput) TransactionSetControlNumberPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TransactionSetControlNumberPrefix
	}).(pulumi.StringPtrOutput)
}

// The transaction set control number suffix.
func (o X12EnvelopeSettingsResponsePtrOutput) TransactionSetControlNumberSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TransactionSetControlNumberSuffix
	}).(pulumi.StringPtrOutput)
}

// The transaction set control number upper bound.
func (o X12EnvelopeSettingsResponsePtrOutput) TransactionSetControlNumberUpperBound() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.TransactionSetControlNumberUpperBound
	}).(pulumi.IntPtrOutput)
}

// The usage indicator.
func (o X12EnvelopeSettingsResponsePtrOutput) UsageIndicator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.UsageIndicator
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to use control standards id as repetition character.
func (o X12EnvelopeSettingsResponsePtrOutput) UseControlStandardsIdAsRepetitionCharacter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12EnvelopeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.UseControlStandardsIdAsRepetitionCharacter
	}).(pulumi.BoolPtrOutput)
}

type X12FramingSettings struct {
	// The X12 character set.
	CharacterSet *string `pulumi:"characterSet"`
	// The component separator.
	ComponentSeparator *int `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator *int `pulumi:"dataElementSeparator"`
	// The replacement character.
	ReplaceCharacter *int `pulumi:"replaceCharacter"`
	// The value indicating whether to replace separators in payload.
	ReplaceSeparatorsInPayload *bool `pulumi:"replaceSeparatorsInPayload"`
	// The segment terminator.
	SegmentTerminator *int `pulumi:"segmentTerminator"`
	// The segment terminator suffix.
	SegmentTerminatorSuffix *string `pulumi:"segmentTerminatorSuffix"`
}

// X12FramingSettingsInput is an input type that accepts X12FramingSettingsArgs and X12FramingSettingsOutput values.
// You can construct a concrete instance of `X12FramingSettingsInput` via:
//
//          X12FramingSettingsArgs{...}
type X12FramingSettingsInput interface {
	pulumi.Input

	ToX12FramingSettingsOutput() X12FramingSettingsOutput
	ToX12FramingSettingsOutputWithContext(context.Context) X12FramingSettingsOutput
}

type X12FramingSettingsArgs struct {
	// The X12 character set.
	CharacterSet pulumi.StringPtrInput `pulumi:"characterSet"`
	// The component separator.
	ComponentSeparator pulumi.IntPtrInput `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator pulumi.IntPtrInput `pulumi:"dataElementSeparator"`
	// The replacement character.
	ReplaceCharacter pulumi.IntPtrInput `pulumi:"replaceCharacter"`
	// The value indicating whether to replace separators in payload.
	ReplaceSeparatorsInPayload pulumi.BoolPtrInput `pulumi:"replaceSeparatorsInPayload"`
	// The segment terminator.
	SegmentTerminator pulumi.IntPtrInput `pulumi:"segmentTerminator"`
	// The segment terminator suffix.
	SegmentTerminatorSuffix pulumi.StringPtrInput `pulumi:"segmentTerminatorSuffix"`
}

func (X12FramingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12FramingSettings)(nil)).Elem()
}

func (i X12FramingSettingsArgs) ToX12FramingSettingsOutput() X12FramingSettingsOutput {
	return i.ToX12FramingSettingsOutputWithContext(context.Background())
}

func (i X12FramingSettingsArgs) ToX12FramingSettingsOutputWithContext(ctx context.Context) X12FramingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12FramingSettingsOutput)
}

func (i X12FramingSettingsArgs) ToX12FramingSettingsPtrOutput() X12FramingSettingsPtrOutput {
	return i.ToX12FramingSettingsPtrOutputWithContext(context.Background())
}

func (i X12FramingSettingsArgs) ToX12FramingSettingsPtrOutputWithContext(ctx context.Context) X12FramingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12FramingSettingsOutput).ToX12FramingSettingsPtrOutputWithContext(ctx)
}

// X12FramingSettingsPtrInput is an input type that accepts X12FramingSettingsArgs, X12FramingSettingsPtr and X12FramingSettingsPtrOutput values.
// You can construct a concrete instance of `X12FramingSettingsPtrInput` via:
//
//          X12FramingSettingsArgs{...}
//
//  or:
//
//          nil
type X12FramingSettingsPtrInput interface {
	pulumi.Input

	ToX12FramingSettingsPtrOutput() X12FramingSettingsPtrOutput
	ToX12FramingSettingsPtrOutputWithContext(context.Context) X12FramingSettingsPtrOutput
}

type x12framingSettingsPtrType X12FramingSettingsArgs

func X12FramingSettingsPtr(v *X12FramingSettingsArgs) X12FramingSettingsPtrInput {
	return (*x12framingSettingsPtrType)(v)
}

func (*x12framingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12FramingSettings)(nil)).Elem()
}

func (i *x12framingSettingsPtrType) ToX12FramingSettingsPtrOutput() X12FramingSettingsPtrOutput {
	return i.ToX12FramingSettingsPtrOutputWithContext(context.Background())
}

func (i *x12framingSettingsPtrType) ToX12FramingSettingsPtrOutputWithContext(ctx context.Context) X12FramingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12FramingSettingsPtrOutput)
}

type X12FramingSettingsResponse struct {
	// The X12 character set.
	CharacterSet *string `pulumi:"characterSet"`
	// The component separator.
	ComponentSeparator *int `pulumi:"componentSeparator"`
	// The data element separator.
	DataElementSeparator *int `pulumi:"dataElementSeparator"`
	// The replacement character.
	ReplaceCharacter *int `pulumi:"replaceCharacter"`
	// The value indicating whether to replace separators in payload.
	ReplaceSeparatorsInPayload *bool `pulumi:"replaceSeparatorsInPayload"`
	// The segment terminator.
	SegmentTerminator *int `pulumi:"segmentTerminator"`
	// The segment terminator suffix.
	SegmentTerminatorSuffix *string `pulumi:"segmentTerminatorSuffix"`
}

type X12FramingSettingsResponseOutput struct{ *pulumi.OutputState }

func (X12FramingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12FramingSettingsResponse)(nil)).Elem()
}

func (o X12FramingSettingsResponseOutput) ToX12FramingSettingsResponseOutput() X12FramingSettingsResponseOutput {
	return o
}

func (o X12FramingSettingsResponseOutput) ToX12FramingSettingsResponseOutputWithContext(ctx context.Context) X12FramingSettingsResponseOutput {
	return o
}

func (o X12FramingSettingsResponseOutput) ToX12FramingSettingsResponsePtrOutput() X12FramingSettingsResponsePtrOutput {
	return o.ToX12FramingSettingsResponsePtrOutputWithContext(context.Background())
}

func (o X12FramingSettingsResponseOutput) ToX12FramingSettingsResponsePtrOutputWithContext(ctx context.Context) X12FramingSettingsResponsePtrOutput {
	return o.ApplyT(func(v X12FramingSettingsResponse) *X12FramingSettingsResponse {
		return &v
	}).(X12FramingSettingsResponsePtrOutput)
}

// The X12 character set.
func (o X12FramingSettingsResponseOutput) CharacterSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12FramingSettingsResponse) *string { return v.CharacterSet }).(pulumi.StringPtrOutput)
}

// The component separator.
func (o X12FramingSettingsResponseOutput) ComponentSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v X12FramingSettingsResponse) *int { return v.ComponentSeparator }).(pulumi.IntPtrOutput)
}

// The data element separator.
func (o X12FramingSettingsResponseOutput) DataElementSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v X12FramingSettingsResponse) *int { return v.DataElementSeparator }).(pulumi.IntPtrOutput)
}

// The replacement character.
func (o X12FramingSettingsResponseOutput) ReplaceCharacter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v X12FramingSettingsResponse) *int { return v.ReplaceCharacter }).(pulumi.IntPtrOutput)
}

// The value indicating whether to replace separators in payload.
func (o X12FramingSettingsResponseOutput) ReplaceSeparatorsInPayload() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12FramingSettingsResponse) *bool { return v.ReplaceSeparatorsInPayload }).(pulumi.BoolPtrOutput)
}

// The segment terminator.
func (o X12FramingSettingsResponseOutput) SegmentTerminator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v X12FramingSettingsResponse) *int { return v.SegmentTerminator }).(pulumi.IntPtrOutput)
}

// The segment terminator suffix.
func (o X12FramingSettingsResponseOutput) SegmentTerminatorSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12FramingSettingsResponse) *string { return v.SegmentTerminatorSuffix }).(pulumi.StringPtrOutput)
}

type X12FramingSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (X12FramingSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12FramingSettingsResponse)(nil)).Elem()
}

func (o X12FramingSettingsResponsePtrOutput) ToX12FramingSettingsResponsePtrOutput() X12FramingSettingsResponsePtrOutput {
	return o
}

func (o X12FramingSettingsResponsePtrOutput) ToX12FramingSettingsResponsePtrOutputWithContext(ctx context.Context) X12FramingSettingsResponsePtrOutput {
	return o
}

func (o X12FramingSettingsResponsePtrOutput) Elem() X12FramingSettingsResponseOutput {
	return o.ApplyT(func(v *X12FramingSettingsResponse) X12FramingSettingsResponse { return *v }).(X12FramingSettingsResponseOutput)
}

// The X12 character set.
func (o X12FramingSettingsResponsePtrOutput) CharacterSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12FramingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.CharacterSet
	}).(pulumi.StringPtrOutput)
}

// The component separator.
func (o X12FramingSettingsResponsePtrOutput) ComponentSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12FramingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.ComponentSeparator
	}).(pulumi.IntPtrOutput)
}

// The data element separator.
func (o X12FramingSettingsResponsePtrOutput) DataElementSeparator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12FramingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.DataElementSeparator
	}).(pulumi.IntPtrOutput)
}

// The replacement character.
func (o X12FramingSettingsResponsePtrOutput) ReplaceCharacter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12FramingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.ReplaceCharacter
	}).(pulumi.IntPtrOutput)
}

// The value indicating whether to replace separators in payload.
func (o X12FramingSettingsResponsePtrOutput) ReplaceSeparatorsInPayload() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12FramingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ReplaceSeparatorsInPayload
	}).(pulumi.BoolPtrOutput)
}

// The segment terminator.
func (o X12FramingSettingsResponsePtrOutput) SegmentTerminator() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12FramingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.SegmentTerminator
	}).(pulumi.IntPtrOutput)
}

// The segment terminator suffix.
func (o X12FramingSettingsResponsePtrOutput) SegmentTerminatorSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12FramingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.SegmentTerminatorSuffix
	}).(pulumi.StringPtrOutput)
}

type X12MessageFilter struct {
	// The message filter type.
	MessageFilterType *string `pulumi:"messageFilterType"`
}

// X12MessageFilterInput is an input type that accepts X12MessageFilterArgs and X12MessageFilterOutput values.
// You can construct a concrete instance of `X12MessageFilterInput` via:
//
//          X12MessageFilterArgs{...}
type X12MessageFilterInput interface {
	pulumi.Input

	ToX12MessageFilterOutput() X12MessageFilterOutput
	ToX12MessageFilterOutputWithContext(context.Context) X12MessageFilterOutput
}

type X12MessageFilterArgs struct {
	// The message filter type.
	MessageFilterType pulumi.StringPtrInput `pulumi:"messageFilterType"`
}

func (X12MessageFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12MessageFilter)(nil)).Elem()
}

func (i X12MessageFilterArgs) ToX12MessageFilterOutput() X12MessageFilterOutput {
	return i.ToX12MessageFilterOutputWithContext(context.Background())
}

func (i X12MessageFilterArgs) ToX12MessageFilterOutputWithContext(ctx context.Context) X12MessageFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12MessageFilterOutput)
}

func (i X12MessageFilterArgs) ToX12MessageFilterPtrOutput() X12MessageFilterPtrOutput {
	return i.ToX12MessageFilterPtrOutputWithContext(context.Background())
}

func (i X12MessageFilterArgs) ToX12MessageFilterPtrOutputWithContext(ctx context.Context) X12MessageFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12MessageFilterOutput).ToX12MessageFilterPtrOutputWithContext(ctx)
}

// X12MessageFilterPtrInput is an input type that accepts X12MessageFilterArgs, X12MessageFilterPtr and X12MessageFilterPtrOutput values.
// You can construct a concrete instance of `X12MessageFilterPtrInput` via:
//
//          X12MessageFilterArgs{...}
//
//  or:
//
//          nil
type X12MessageFilterPtrInput interface {
	pulumi.Input

	ToX12MessageFilterPtrOutput() X12MessageFilterPtrOutput
	ToX12MessageFilterPtrOutputWithContext(context.Context) X12MessageFilterPtrOutput
}

type x12messageFilterPtrType X12MessageFilterArgs

func X12MessageFilterPtr(v *X12MessageFilterArgs) X12MessageFilterPtrInput {
	return (*x12messageFilterPtrType)(v)
}

func (*x12messageFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12MessageFilter)(nil)).Elem()
}

func (i *x12messageFilterPtrType) ToX12MessageFilterPtrOutput() X12MessageFilterPtrOutput {
	return i.ToX12MessageFilterPtrOutputWithContext(context.Background())
}

func (i *x12messageFilterPtrType) ToX12MessageFilterPtrOutputWithContext(ctx context.Context) X12MessageFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12MessageFilterPtrOutput)
}

type X12MessageFilterResponse struct {
	// The message filter type.
	MessageFilterType *string `pulumi:"messageFilterType"`
}

type X12MessageFilterResponseOutput struct{ *pulumi.OutputState }

func (X12MessageFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12MessageFilterResponse)(nil)).Elem()
}

func (o X12MessageFilterResponseOutput) ToX12MessageFilterResponseOutput() X12MessageFilterResponseOutput {
	return o
}

func (o X12MessageFilterResponseOutput) ToX12MessageFilterResponseOutputWithContext(ctx context.Context) X12MessageFilterResponseOutput {
	return o
}

func (o X12MessageFilterResponseOutput) ToX12MessageFilterResponsePtrOutput() X12MessageFilterResponsePtrOutput {
	return o.ToX12MessageFilterResponsePtrOutputWithContext(context.Background())
}

func (o X12MessageFilterResponseOutput) ToX12MessageFilterResponsePtrOutputWithContext(ctx context.Context) X12MessageFilterResponsePtrOutput {
	return o.ApplyT(func(v X12MessageFilterResponse) *X12MessageFilterResponse {
		return &v
	}).(X12MessageFilterResponsePtrOutput)
}

// The message filter type.
func (o X12MessageFilterResponseOutput) MessageFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12MessageFilterResponse) *string { return v.MessageFilterType }).(pulumi.StringPtrOutput)
}

type X12MessageFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (X12MessageFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12MessageFilterResponse)(nil)).Elem()
}

func (o X12MessageFilterResponsePtrOutput) ToX12MessageFilterResponsePtrOutput() X12MessageFilterResponsePtrOutput {
	return o
}

func (o X12MessageFilterResponsePtrOutput) ToX12MessageFilterResponsePtrOutputWithContext(ctx context.Context) X12MessageFilterResponsePtrOutput {
	return o
}

func (o X12MessageFilterResponsePtrOutput) Elem() X12MessageFilterResponseOutput {
	return o.ApplyT(func(v *X12MessageFilterResponse) X12MessageFilterResponse { return *v }).(X12MessageFilterResponseOutput)
}

// The message filter type.
func (o X12MessageFilterResponsePtrOutput) MessageFilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12MessageFilterResponse) *string {
		if v == nil {
			return nil
		}
		return v.MessageFilterType
	}).(pulumi.StringPtrOutput)
}

type X12MessageIdentifier struct {
	// The message id.
	MessageId *string `pulumi:"messageId"`
}

// X12MessageIdentifierInput is an input type that accepts X12MessageIdentifierArgs and X12MessageIdentifierOutput values.
// You can construct a concrete instance of `X12MessageIdentifierInput` via:
//
//          X12MessageIdentifierArgs{...}
type X12MessageIdentifierInput interface {
	pulumi.Input

	ToX12MessageIdentifierOutput() X12MessageIdentifierOutput
	ToX12MessageIdentifierOutputWithContext(context.Context) X12MessageIdentifierOutput
}

type X12MessageIdentifierArgs struct {
	// The message id.
	MessageId pulumi.StringPtrInput `pulumi:"messageId"`
}

func (X12MessageIdentifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12MessageIdentifier)(nil)).Elem()
}

func (i X12MessageIdentifierArgs) ToX12MessageIdentifierOutput() X12MessageIdentifierOutput {
	return i.ToX12MessageIdentifierOutputWithContext(context.Background())
}

func (i X12MessageIdentifierArgs) ToX12MessageIdentifierOutputWithContext(ctx context.Context) X12MessageIdentifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12MessageIdentifierOutput)
}

// X12MessageIdentifierArrayInput is an input type that accepts X12MessageIdentifierArray and X12MessageIdentifierArrayOutput values.
// You can construct a concrete instance of `X12MessageIdentifierArrayInput` via:
//
//          X12MessageIdentifierArray{ X12MessageIdentifierArgs{...} }
type X12MessageIdentifierArrayInput interface {
	pulumi.Input

	ToX12MessageIdentifierArrayOutput() X12MessageIdentifierArrayOutput
	ToX12MessageIdentifierArrayOutputWithContext(context.Context) X12MessageIdentifierArrayOutput
}

type X12MessageIdentifierArray []X12MessageIdentifierInput

func (X12MessageIdentifierArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12MessageIdentifier)(nil)).Elem()
}

func (i X12MessageIdentifierArray) ToX12MessageIdentifierArrayOutput() X12MessageIdentifierArrayOutput {
	return i.ToX12MessageIdentifierArrayOutputWithContext(context.Background())
}

func (i X12MessageIdentifierArray) ToX12MessageIdentifierArrayOutputWithContext(ctx context.Context) X12MessageIdentifierArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12MessageIdentifierArrayOutput)
}

type X12MessageIdentifierResponse struct {
	// The message id.
	MessageId *string `pulumi:"messageId"`
}

type X12MessageIdentifierResponseOutput struct{ *pulumi.OutputState }

func (X12MessageIdentifierResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12MessageIdentifierResponse)(nil)).Elem()
}

func (o X12MessageIdentifierResponseOutput) ToX12MessageIdentifierResponseOutput() X12MessageIdentifierResponseOutput {
	return o
}

func (o X12MessageIdentifierResponseOutput) ToX12MessageIdentifierResponseOutputWithContext(ctx context.Context) X12MessageIdentifierResponseOutput {
	return o
}

// The message id.
func (o X12MessageIdentifierResponseOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12MessageIdentifierResponse) *string { return v.MessageId }).(pulumi.StringPtrOutput)
}

type X12MessageIdentifierResponseArrayOutput struct{ *pulumi.OutputState }

func (X12MessageIdentifierResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12MessageIdentifierResponse)(nil)).Elem()
}

func (o X12MessageIdentifierResponseArrayOutput) ToX12MessageIdentifierResponseArrayOutput() X12MessageIdentifierResponseArrayOutput {
	return o
}

func (o X12MessageIdentifierResponseArrayOutput) ToX12MessageIdentifierResponseArrayOutputWithContext(ctx context.Context) X12MessageIdentifierResponseArrayOutput {
	return o
}

func (o X12MessageIdentifierResponseArrayOutput) Index(i pulumi.IntInput) X12MessageIdentifierResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) X12MessageIdentifierResponse {
		return vs[0].([]X12MessageIdentifierResponse)[vs[1].(int)]
	}).(X12MessageIdentifierResponseOutput)
}

type X12OneWayAgreement struct {
	// The X12 protocol settings.
	ProtocolSettings *X12ProtocolSettings `pulumi:"protocolSettings"`
	// The receiver business identity
	ReceiverBusinessIdentity *BusinessIdentity `pulumi:"receiverBusinessIdentity"`
	// The sender business identity
	SenderBusinessIdentity *BusinessIdentity `pulumi:"senderBusinessIdentity"`
}

// X12OneWayAgreementInput is an input type that accepts X12OneWayAgreementArgs and X12OneWayAgreementOutput values.
// You can construct a concrete instance of `X12OneWayAgreementInput` via:
//
//          X12OneWayAgreementArgs{...}
type X12OneWayAgreementInput interface {
	pulumi.Input

	ToX12OneWayAgreementOutput() X12OneWayAgreementOutput
	ToX12OneWayAgreementOutputWithContext(context.Context) X12OneWayAgreementOutput
}

type X12OneWayAgreementArgs struct {
	// The X12 protocol settings.
	ProtocolSettings X12ProtocolSettingsPtrInput `pulumi:"protocolSettings"`
	// The receiver business identity
	ReceiverBusinessIdentity BusinessIdentityPtrInput `pulumi:"receiverBusinessIdentity"`
	// The sender business identity
	SenderBusinessIdentity BusinessIdentityPtrInput `pulumi:"senderBusinessIdentity"`
}

func (X12OneWayAgreementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12OneWayAgreement)(nil)).Elem()
}

func (i X12OneWayAgreementArgs) ToX12OneWayAgreementOutput() X12OneWayAgreementOutput {
	return i.ToX12OneWayAgreementOutputWithContext(context.Background())
}

func (i X12OneWayAgreementArgs) ToX12OneWayAgreementOutputWithContext(ctx context.Context) X12OneWayAgreementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12OneWayAgreementOutput)
}

func (i X12OneWayAgreementArgs) ToX12OneWayAgreementPtrOutput() X12OneWayAgreementPtrOutput {
	return i.ToX12OneWayAgreementPtrOutputWithContext(context.Background())
}

func (i X12OneWayAgreementArgs) ToX12OneWayAgreementPtrOutputWithContext(ctx context.Context) X12OneWayAgreementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12OneWayAgreementOutput).ToX12OneWayAgreementPtrOutputWithContext(ctx)
}

// X12OneWayAgreementPtrInput is an input type that accepts X12OneWayAgreementArgs, X12OneWayAgreementPtr and X12OneWayAgreementPtrOutput values.
// You can construct a concrete instance of `X12OneWayAgreementPtrInput` via:
//
//          X12OneWayAgreementArgs{...}
//
//  or:
//
//          nil
type X12OneWayAgreementPtrInput interface {
	pulumi.Input

	ToX12OneWayAgreementPtrOutput() X12OneWayAgreementPtrOutput
	ToX12OneWayAgreementPtrOutputWithContext(context.Context) X12OneWayAgreementPtrOutput
}

type x12oneWayAgreementPtrType X12OneWayAgreementArgs

func X12OneWayAgreementPtr(v *X12OneWayAgreementArgs) X12OneWayAgreementPtrInput {
	return (*x12oneWayAgreementPtrType)(v)
}

func (*x12oneWayAgreementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12OneWayAgreement)(nil)).Elem()
}

func (i *x12oneWayAgreementPtrType) ToX12OneWayAgreementPtrOutput() X12OneWayAgreementPtrOutput {
	return i.ToX12OneWayAgreementPtrOutputWithContext(context.Background())
}

func (i *x12oneWayAgreementPtrType) ToX12OneWayAgreementPtrOutputWithContext(ctx context.Context) X12OneWayAgreementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12OneWayAgreementPtrOutput)
}

type X12OneWayAgreementResponse struct {
	// The X12 protocol settings.
	ProtocolSettings *X12ProtocolSettingsResponse `pulumi:"protocolSettings"`
	// The receiver business identity
	ReceiverBusinessIdentity *BusinessIdentityResponse `pulumi:"receiverBusinessIdentity"`
	// The sender business identity
	SenderBusinessIdentity *BusinessIdentityResponse `pulumi:"senderBusinessIdentity"`
}

type X12OneWayAgreementResponseOutput struct{ *pulumi.OutputState }

func (X12OneWayAgreementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12OneWayAgreementResponse)(nil)).Elem()
}

func (o X12OneWayAgreementResponseOutput) ToX12OneWayAgreementResponseOutput() X12OneWayAgreementResponseOutput {
	return o
}

func (o X12OneWayAgreementResponseOutput) ToX12OneWayAgreementResponseOutputWithContext(ctx context.Context) X12OneWayAgreementResponseOutput {
	return o
}

func (o X12OneWayAgreementResponseOutput) ToX12OneWayAgreementResponsePtrOutput() X12OneWayAgreementResponsePtrOutput {
	return o.ToX12OneWayAgreementResponsePtrOutputWithContext(context.Background())
}

func (o X12OneWayAgreementResponseOutput) ToX12OneWayAgreementResponsePtrOutputWithContext(ctx context.Context) X12OneWayAgreementResponsePtrOutput {
	return o.ApplyT(func(v X12OneWayAgreementResponse) *X12OneWayAgreementResponse {
		return &v
	}).(X12OneWayAgreementResponsePtrOutput)
}

// The X12 protocol settings.
func (o X12OneWayAgreementResponseOutput) ProtocolSettings() X12ProtocolSettingsResponsePtrOutput {
	return o.ApplyT(func(v X12OneWayAgreementResponse) *X12ProtocolSettingsResponse { return v.ProtocolSettings }).(X12ProtocolSettingsResponsePtrOutput)
}

// The receiver business identity
func (o X12OneWayAgreementResponseOutput) ReceiverBusinessIdentity() BusinessIdentityResponsePtrOutput {
	return o.ApplyT(func(v X12OneWayAgreementResponse) *BusinessIdentityResponse { return v.ReceiverBusinessIdentity }).(BusinessIdentityResponsePtrOutput)
}

// The sender business identity
func (o X12OneWayAgreementResponseOutput) SenderBusinessIdentity() BusinessIdentityResponsePtrOutput {
	return o.ApplyT(func(v X12OneWayAgreementResponse) *BusinessIdentityResponse { return v.SenderBusinessIdentity }).(BusinessIdentityResponsePtrOutput)
}

type X12OneWayAgreementResponsePtrOutput struct{ *pulumi.OutputState }

func (X12OneWayAgreementResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12OneWayAgreementResponse)(nil)).Elem()
}

func (o X12OneWayAgreementResponsePtrOutput) ToX12OneWayAgreementResponsePtrOutput() X12OneWayAgreementResponsePtrOutput {
	return o
}

func (o X12OneWayAgreementResponsePtrOutput) ToX12OneWayAgreementResponsePtrOutputWithContext(ctx context.Context) X12OneWayAgreementResponsePtrOutput {
	return o
}

func (o X12OneWayAgreementResponsePtrOutput) Elem() X12OneWayAgreementResponseOutput {
	return o.ApplyT(func(v *X12OneWayAgreementResponse) X12OneWayAgreementResponse { return *v }).(X12OneWayAgreementResponseOutput)
}

// The X12 protocol settings.
func (o X12OneWayAgreementResponsePtrOutput) ProtocolSettings() X12ProtocolSettingsResponsePtrOutput {
	return o.ApplyT(func(v *X12OneWayAgreementResponse) *X12ProtocolSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ProtocolSettings
	}).(X12ProtocolSettingsResponsePtrOutput)
}

// The receiver business identity
func (o X12OneWayAgreementResponsePtrOutput) ReceiverBusinessIdentity() BusinessIdentityResponsePtrOutput {
	return o.ApplyT(func(v *X12OneWayAgreementResponse) *BusinessIdentityResponse {
		if v == nil {
			return nil
		}
		return v.ReceiverBusinessIdentity
	}).(BusinessIdentityResponsePtrOutput)
}

// The sender business identity
func (o X12OneWayAgreementResponsePtrOutput) SenderBusinessIdentity() BusinessIdentityResponsePtrOutput {
	return o.ApplyT(func(v *X12OneWayAgreementResponse) *BusinessIdentityResponse {
		if v == nil {
			return nil
		}
		return v.SenderBusinessIdentity
	}).(BusinessIdentityResponsePtrOutput)
}

type X12ProcessingSettings struct {
	// The value indicating whether to convert numerical type to implied decimal.
	ConvertImpliedDecimal *bool `pulumi:"convertImpliedDecimal"`
	// The value indicating whether to create empty xml tags for trailing separators.
	CreateEmptyXmlTagsForTrailingSeparators *bool `pulumi:"createEmptyXmlTagsForTrailingSeparators"`
	// The value indicating whether to mask security information.
	MaskSecurityInfo *bool `pulumi:"maskSecurityInfo"`
	// The value indicating whether to preserve interchange.
	PreserveInterchange *bool `pulumi:"preserveInterchange"`
	// The value indicating whether to suspend interchange on error.
	SuspendInterchangeOnError *bool `pulumi:"suspendInterchangeOnError"`
	// The value indicating whether to use dot as decimal separator.
	UseDotAsDecimalSeparator *bool `pulumi:"useDotAsDecimalSeparator"`
}

// X12ProcessingSettingsInput is an input type that accepts X12ProcessingSettingsArgs and X12ProcessingSettingsOutput values.
// You can construct a concrete instance of `X12ProcessingSettingsInput` via:
//
//          X12ProcessingSettingsArgs{...}
type X12ProcessingSettingsInput interface {
	pulumi.Input

	ToX12ProcessingSettingsOutput() X12ProcessingSettingsOutput
	ToX12ProcessingSettingsOutputWithContext(context.Context) X12ProcessingSettingsOutput
}

type X12ProcessingSettingsArgs struct {
	// The value indicating whether to convert numerical type to implied decimal.
	ConvertImpliedDecimal pulumi.BoolPtrInput `pulumi:"convertImpliedDecimal"`
	// The value indicating whether to create empty xml tags for trailing separators.
	CreateEmptyXmlTagsForTrailingSeparators pulumi.BoolPtrInput `pulumi:"createEmptyXmlTagsForTrailingSeparators"`
	// The value indicating whether to mask security information.
	MaskSecurityInfo pulumi.BoolPtrInput `pulumi:"maskSecurityInfo"`
	// The value indicating whether to preserve interchange.
	PreserveInterchange pulumi.BoolPtrInput `pulumi:"preserveInterchange"`
	// The value indicating whether to suspend interchange on error.
	SuspendInterchangeOnError pulumi.BoolPtrInput `pulumi:"suspendInterchangeOnError"`
	// The value indicating whether to use dot as decimal separator.
	UseDotAsDecimalSeparator pulumi.BoolPtrInput `pulumi:"useDotAsDecimalSeparator"`
}

func (X12ProcessingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ProcessingSettings)(nil)).Elem()
}

func (i X12ProcessingSettingsArgs) ToX12ProcessingSettingsOutput() X12ProcessingSettingsOutput {
	return i.ToX12ProcessingSettingsOutputWithContext(context.Background())
}

func (i X12ProcessingSettingsArgs) ToX12ProcessingSettingsOutputWithContext(ctx context.Context) X12ProcessingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ProcessingSettingsOutput)
}

func (i X12ProcessingSettingsArgs) ToX12ProcessingSettingsPtrOutput() X12ProcessingSettingsPtrOutput {
	return i.ToX12ProcessingSettingsPtrOutputWithContext(context.Background())
}

func (i X12ProcessingSettingsArgs) ToX12ProcessingSettingsPtrOutputWithContext(ctx context.Context) X12ProcessingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ProcessingSettingsOutput).ToX12ProcessingSettingsPtrOutputWithContext(ctx)
}

// X12ProcessingSettingsPtrInput is an input type that accepts X12ProcessingSettingsArgs, X12ProcessingSettingsPtr and X12ProcessingSettingsPtrOutput values.
// You can construct a concrete instance of `X12ProcessingSettingsPtrInput` via:
//
//          X12ProcessingSettingsArgs{...}
//
//  or:
//
//          nil
type X12ProcessingSettingsPtrInput interface {
	pulumi.Input

	ToX12ProcessingSettingsPtrOutput() X12ProcessingSettingsPtrOutput
	ToX12ProcessingSettingsPtrOutputWithContext(context.Context) X12ProcessingSettingsPtrOutput
}

type x12processingSettingsPtrType X12ProcessingSettingsArgs

func X12ProcessingSettingsPtr(v *X12ProcessingSettingsArgs) X12ProcessingSettingsPtrInput {
	return (*x12processingSettingsPtrType)(v)
}

func (*x12processingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12ProcessingSettings)(nil)).Elem()
}

func (i *x12processingSettingsPtrType) ToX12ProcessingSettingsPtrOutput() X12ProcessingSettingsPtrOutput {
	return i.ToX12ProcessingSettingsPtrOutputWithContext(context.Background())
}

func (i *x12processingSettingsPtrType) ToX12ProcessingSettingsPtrOutputWithContext(ctx context.Context) X12ProcessingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ProcessingSettingsPtrOutput)
}

type X12ProcessingSettingsResponse struct {
	// The value indicating whether to convert numerical type to implied decimal.
	ConvertImpliedDecimal *bool `pulumi:"convertImpliedDecimal"`
	// The value indicating whether to create empty xml tags for trailing separators.
	CreateEmptyXmlTagsForTrailingSeparators *bool `pulumi:"createEmptyXmlTagsForTrailingSeparators"`
	// The value indicating whether to mask security information.
	MaskSecurityInfo *bool `pulumi:"maskSecurityInfo"`
	// The value indicating whether to preserve interchange.
	PreserveInterchange *bool `pulumi:"preserveInterchange"`
	// The value indicating whether to suspend interchange on error.
	SuspendInterchangeOnError *bool `pulumi:"suspendInterchangeOnError"`
	// The value indicating whether to use dot as decimal separator.
	UseDotAsDecimalSeparator *bool `pulumi:"useDotAsDecimalSeparator"`
}

type X12ProcessingSettingsResponseOutput struct{ *pulumi.OutputState }

func (X12ProcessingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ProcessingSettingsResponse)(nil)).Elem()
}

func (o X12ProcessingSettingsResponseOutput) ToX12ProcessingSettingsResponseOutput() X12ProcessingSettingsResponseOutput {
	return o
}

func (o X12ProcessingSettingsResponseOutput) ToX12ProcessingSettingsResponseOutputWithContext(ctx context.Context) X12ProcessingSettingsResponseOutput {
	return o
}

func (o X12ProcessingSettingsResponseOutput) ToX12ProcessingSettingsResponsePtrOutput() X12ProcessingSettingsResponsePtrOutput {
	return o.ToX12ProcessingSettingsResponsePtrOutputWithContext(context.Background())
}

func (o X12ProcessingSettingsResponseOutput) ToX12ProcessingSettingsResponsePtrOutputWithContext(ctx context.Context) X12ProcessingSettingsResponsePtrOutput {
	return o.ApplyT(func(v X12ProcessingSettingsResponse) *X12ProcessingSettingsResponse {
		return &v
	}).(X12ProcessingSettingsResponsePtrOutput)
}

// The value indicating whether to convert numerical type to implied decimal.
func (o X12ProcessingSettingsResponseOutput) ConvertImpliedDecimal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12ProcessingSettingsResponse) *bool { return v.ConvertImpliedDecimal }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to create empty xml tags for trailing separators.
func (o X12ProcessingSettingsResponseOutput) CreateEmptyXmlTagsForTrailingSeparators() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12ProcessingSettingsResponse) *bool { return v.CreateEmptyXmlTagsForTrailingSeparators }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to mask security information.
func (o X12ProcessingSettingsResponseOutput) MaskSecurityInfo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12ProcessingSettingsResponse) *bool { return v.MaskSecurityInfo }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to preserve interchange.
func (o X12ProcessingSettingsResponseOutput) PreserveInterchange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12ProcessingSettingsResponse) *bool { return v.PreserveInterchange }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to suspend interchange on error.
func (o X12ProcessingSettingsResponseOutput) SuspendInterchangeOnError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12ProcessingSettingsResponse) *bool { return v.SuspendInterchangeOnError }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to use dot as decimal separator.
func (o X12ProcessingSettingsResponseOutput) UseDotAsDecimalSeparator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12ProcessingSettingsResponse) *bool { return v.UseDotAsDecimalSeparator }).(pulumi.BoolPtrOutput)
}

type X12ProcessingSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (X12ProcessingSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12ProcessingSettingsResponse)(nil)).Elem()
}

func (o X12ProcessingSettingsResponsePtrOutput) ToX12ProcessingSettingsResponsePtrOutput() X12ProcessingSettingsResponsePtrOutput {
	return o
}

func (o X12ProcessingSettingsResponsePtrOutput) ToX12ProcessingSettingsResponsePtrOutputWithContext(ctx context.Context) X12ProcessingSettingsResponsePtrOutput {
	return o
}

func (o X12ProcessingSettingsResponsePtrOutput) Elem() X12ProcessingSettingsResponseOutput {
	return o.ApplyT(func(v *X12ProcessingSettingsResponse) X12ProcessingSettingsResponse { return *v }).(X12ProcessingSettingsResponseOutput)
}

// The value indicating whether to convert numerical type to implied decimal.
func (o X12ProcessingSettingsResponsePtrOutput) ConvertImpliedDecimal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ProcessingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ConvertImpliedDecimal
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to create empty xml tags for trailing separators.
func (o X12ProcessingSettingsResponsePtrOutput) CreateEmptyXmlTagsForTrailingSeparators() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ProcessingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CreateEmptyXmlTagsForTrailingSeparators
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to mask security information.
func (o X12ProcessingSettingsResponsePtrOutput) MaskSecurityInfo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ProcessingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.MaskSecurityInfo
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to preserve interchange.
func (o X12ProcessingSettingsResponsePtrOutput) PreserveInterchange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ProcessingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.PreserveInterchange
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to suspend interchange on error.
func (o X12ProcessingSettingsResponsePtrOutput) SuspendInterchangeOnError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ProcessingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SuspendInterchangeOnError
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to use dot as decimal separator.
func (o X12ProcessingSettingsResponsePtrOutput) UseDotAsDecimalSeparator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ProcessingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.UseDotAsDecimalSeparator
	}).(pulumi.BoolPtrOutput)
}

type X12ProtocolSettings struct {
	// The X12 acknowledgment settings.
	AcknowledgementSettings *X12AcknowledgementSettings `pulumi:"acknowledgementSettings"`
	// The X12 envelope override settings.
	EnvelopeOverrides []X12EnvelopeOverride `pulumi:"envelopeOverrides"`
	// The X12 envelope settings.
	EnvelopeSettings *X12EnvelopeSettings `pulumi:"envelopeSettings"`
	// The X12 framing settings.
	FramingSettings *X12FramingSettings `pulumi:"framingSettings"`
	// The X12 message filter.
	MessageFilter *X12MessageFilter `pulumi:"messageFilter"`
	// The X12 message filter list.
	MessageFilterList []X12MessageIdentifier `pulumi:"messageFilterList"`
	// The X12 processing settings.
	ProcessingSettings *X12ProcessingSettings `pulumi:"processingSettings"`
	// The X12 schema references.
	SchemaReferences []X12SchemaReference `pulumi:"schemaReferences"`
	// The X12 security settings.
	SecuritySettings *X12SecuritySettings `pulumi:"securitySettings"`
	// The X12 validation override settings.
	ValidationOverrides []X12ValidationOverride `pulumi:"validationOverrides"`
	// The X12 validation settings.
	ValidationSettings *X12ValidationSettings `pulumi:"validationSettings"`
	// The X12 delimiter override settings.
	X12DelimiterOverrides []X12DelimiterOverrides `pulumi:"x12DelimiterOverrides"`
}

// X12ProtocolSettingsInput is an input type that accepts X12ProtocolSettingsArgs and X12ProtocolSettingsOutput values.
// You can construct a concrete instance of `X12ProtocolSettingsInput` via:
//
//          X12ProtocolSettingsArgs{...}
type X12ProtocolSettingsInput interface {
	pulumi.Input

	ToX12ProtocolSettingsOutput() X12ProtocolSettingsOutput
	ToX12ProtocolSettingsOutputWithContext(context.Context) X12ProtocolSettingsOutput
}

type X12ProtocolSettingsArgs struct {
	// The X12 acknowledgment settings.
	AcknowledgementSettings X12AcknowledgementSettingsPtrInput `pulumi:"acknowledgementSettings"`
	// The X12 envelope override settings.
	EnvelopeOverrides X12EnvelopeOverrideArrayInput `pulumi:"envelopeOverrides"`
	// The X12 envelope settings.
	EnvelopeSettings X12EnvelopeSettingsPtrInput `pulumi:"envelopeSettings"`
	// The X12 framing settings.
	FramingSettings X12FramingSettingsPtrInput `pulumi:"framingSettings"`
	// The X12 message filter.
	MessageFilter X12MessageFilterPtrInput `pulumi:"messageFilter"`
	// The X12 message filter list.
	MessageFilterList X12MessageIdentifierArrayInput `pulumi:"messageFilterList"`
	// The X12 processing settings.
	ProcessingSettings X12ProcessingSettingsPtrInput `pulumi:"processingSettings"`
	// The X12 schema references.
	SchemaReferences X12SchemaReferenceArrayInput `pulumi:"schemaReferences"`
	// The X12 security settings.
	SecuritySettings X12SecuritySettingsPtrInput `pulumi:"securitySettings"`
	// The X12 validation override settings.
	ValidationOverrides X12ValidationOverrideArrayInput `pulumi:"validationOverrides"`
	// The X12 validation settings.
	ValidationSettings X12ValidationSettingsPtrInput `pulumi:"validationSettings"`
	// The X12 delimiter override settings.
	X12DelimiterOverrides X12DelimiterOverridesArrayInput `pulumi:"x12DelimiterOverrides"`
}

func (X12ProtocolSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ProtocolSettings)(nil)).Elem()
}

func (i X12ProtocolSettingsArgs) ToX12ProtocolSettingsOutput() X12ProtocolSettingsOutput {
	return i.ToX12ProtocolSettingsOutputWithContext(context.Background())
}

func (i X12ProtocolSettingsArgs) ToX12ProtocolSettingsOutputWithContext(ctx context.Context) X12ProtocolSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ProtocolSettingsOutput)
}

func (i X12ProtocolSettingsArgs) ToX12ProtocolSettingsPtrOutput() X12ProtocolSettingsPtrOutput {
	return i.ToX12ProtocolSettingsPtrOutputWithContext(context.Background())
}

func (i X12ProtocolSettingsArgs) ToX12ProtocolSettingsPtrOutputWithContext(ctx context.Context) X12ProtocolSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ProtocolSettingsOutput).ToX12ProtocolSettingsPtrOutputWithContext(ctx)
}

// X12ProtocolSettingsPtrInput is an input type that accepts X12ProtocolSettingsArgs, X12ProtocolSettingsPtr and X12ProtocolSettingsPtrOutput values.
// You can construct a concrete instance of `X12ProtocolSettingsPtrInput` via:
//
//          X12ProtocolSettingsArgs{...}
//
//  or:
//
//          nil
type X12ProtocolSettingsPtrInput interface {
	pulumi.Input

	ToX12ProtocolSettingsPtrOutput() X12ProtocolSettingsPtrOutput
	ToX12ProtocolSettingsPtrOutputWithContext(context.Context) X12ProtocolSettingsPtrOutput
}

type x12protocolSettingsPtrType X12ProtocolSettingsArgs

func X12ProtocolSettingsPtr(v *X12ProtocolSettingsArgs) X12ProtocolSettingsPtrInput {
	return (*x12protocolSettingsPtrType)(v)
}

func (*x12protocolSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12ProtocolSettings)(nil)).Elem()
}

func (i *x12protocolSettingsPtrType) ToX12ProtocolSettingsPtrOutput() X12ProtocolSettingsPtrOutput {
	return i.ToX12ProtocolSettingsPtrOutputWithContext(context.Background())
}

func (i *x12protocolSettingsPtrType) ToX12ProtocolSettingsPtrOutputWithContext(ctx context.Context) X12ProtocolSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ProtocolSettingsPtrOutput)
}

type X12ProtocolSettingsResponse struct {
	// The X12 acknowledgment settings.
	AcknowledgementSettings *X12AcknowledgementSettingsResponse `pulumi:"acknowledgementSettings"`
	// The X12 envelope override settings.
	EnvelopeOverrides []X12EnvelopeOverrideResponse `pulumi:"envelopeOverrides"`
	// The X12 envelope settings.
	EnvelopeSettings *X12EnvelopeSettingsResponse `pulumi:"envelopeSettings"`
	// The X12 framing settings.
	FramingSettings *X12FramingSettingsResponse `pulumi:"framingSettings"`
	// The X12 message filter.
	MessageFilter *X12MessageFilterResponse `pulumi:"messageFilter"`
	// The X12 message filter list.
	MessageFilterList []X12MessageIdentifierResponse `pulumi:"messageFilterList"`
	// The X12 processing settings.
	ProcessingSettings *X12ProcessingSettingsResponse `pulumi:"processingSettings"`
	// The X12 schema references.
	SchemaReferences []X12SchemaReferenceResponse `pulumi:"schemaReferences"`
	// The X12 security settings.
	SecuritySettings *X12SecuritySettingsResponse `pulumi:"securitySettings"`
	// The X12 validation override settings.
	ValidationOverrides []X12ValidationOverrideResponse `pulumi:"validationOverrides"`
	// The X12 validation settings.
	ValidationSettings *X12ValidationSettingsResponse `pulumi:"validationSettings"`
	// The X12 delimiter override settings.
	X12DelimiterOverrides []X12DelimiterOverridesResponse `pulumi:"x12DelimiterOverrides"`
}

type X12ProtocolSettingsResponseOutput struct{ *pulumi.OutputState }

func (X12ProtocolSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ProtocolSettingsResponse)(nil)).Elem()
}

func (o X12ProtocolSettingsResponseOutput) ToX12ProtocolSettingsResponseOutput() X12ProtocolSettingsResponseOutput {
	return o
}

func (o X12ProtocolSettingsResponseOutput) ToX12ProtocolSettingsResponseOutputWithContext(ctx context.Context) X12ProtocolSettingsResponseOutput {
	return o
}

func (o X12ProtocolSettingsResponseOutput) ToX12ProtocolSettingsResponsePtrOutput() X12ProtocolSettingsResponsePtrOutput {
	return o.ToX12ProtocolSettingsResponsePtrOutputWithContext(context.Background())
}

func (o X12ProtocolSettingsResponseOutput) ToX12ProtocolSettingsResponsePtrOutputWithContext(ctx context.Context) X12ProtocolSettingsResponsePtrOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) *X12ProtocolSettingsResponse {
		return &v
	}).(X12ProtocolSettingsResponsePtrOutput)
}

// The X12 acknowledgment settings.
func (o X12ProtocolSettingsResponseOutput) AcknowledgementSettings() X12AcknowledgementSettingsResponsePtrOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) *X12AcknowledgementSettingsResponse {
		return v.AcknowledgementSettings
	}).(X12AcknowledgementSettingsResponsePtrOutput)
}

// The X12 envelope override settings.
func (o X12ProtocolSettingsResponseOutput) EnvelopeOverrides() X12EnvelopeOverrideResponseArrayOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) []X12EnvelopeOverrideResponse { return v.EnvelopeOverrides }).(X12EnvelopeOverrideResponseArrayOutput)
}

// The X12 envelope settings.
func (o X12ProtocolSettingsResponseOutput) EnvelopeSettings() X12EnvelopeSettingsResponsePtrOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) *X12EnvelopeSettingsResponse { return v.EnvelopeSettings }).(X12EnvelopeSettingsResponsePtrOutput)
}

// The X12 framing settings.
func (o X12ProtocolSettingsResponseOutput) FramingSettings() X12FramingSettingsResponsePtrOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) *X12FramingSettingsResponse { return v.FramingSettings }).(X12FramingSettingsResponsePtrOutput)
}

// The X12 message filter.
func (o X12ProtocolSettingsResponseOutput) MessageFilter() X12MessageFilterResponsePtrOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) *X12MessageFilterResponse { return v.MessageFilter }).(X12MessageFilterResponsePtrOutput)
}

// The X12 message filter list.
func (o X12ProtocolSettingsResponseOutput) MessageFilterList() X12MessageIdentifierResponseArrayOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) []X12MessageIdentifierResponse { return v.MessageFilterList }).(X12MessageIdentifierResponseArrayOutput)
}

// The X12 processing settings.
func (o X12ProtocolSettingsResponseOutput) ProcessingSettings() X12ProcessingSettingsResponsePtrOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) *X12ProcessingSettingsResponse { return v.ProcessingSettings }).(X12ProcessingSettingsResponsePtrOutput)
}

// The X12 schema references.
func (o X12ProtocolSettingsResponseOutput) SchemaReferences() X12SchemaReferenceResponseArrayOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) []X12SchemaReferenceResponse { return v.SchemaReferences }).(X12SchemaReferenceResponseArrayOutput)
}

// The X12 security settings.
func (o X12ProtocolSettingsResponseOutput) SecuritySettings() X12SecuritySettingsResponsePtrOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) *X12SecuritySettingsResponse { return v.SecuritySettings }).(X12SecuritySettingsResponsePtrOutput)
}

// The X12 validation override settings.
func (o X12ProtocolSettingsResponseOutput) ValidationOverrides() X12ValidationOverrideResponseArrayOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) []X12ValidationOverrideResponse { return v.ValidationOverrides }).(X12ValidationOverrideResponseArrayOutput)
}

// The X12 validation settings.
func (o X12ProtocolSettingsResponseOutput) ValidationSettings() X12ValidationSettingsResponsePtrOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) *X12ValidationSettingsResponse { return v.ValidationSettings }).(X12ValidationSettingsResponsePtrOutput)
}

// The X12 delimiter override settings.
func (o X12ProtocolSettingsResponseOutput) X12DelimiterOverrides() X12DelimiterOverridesResponseArrayOutput {
	return o.ApplyT(func(v X12ProtocolSettingsResponse) []X12DelimiterOverridesResponse { return v.X12DelimiterOverrides }).(X12DelimiterOverridesResponseArrayOutput)
}

type X12ProtocolSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (X12ProtocolSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12ProtocolSettingsResponse)(nil)).Elem()
}

func (o X12ProtocolSettingsResponsePtrOutput) ToX12ProtocolSettingsResponsePtrOutput() X12ProtocolSettingsResponsePtrOutput {
	return o
}

func (o X12ProtocolSettingsResponsePtrOutput) ToX12ProtocolSettingsResponsePtrOutputWithContext(ctx context.Context) X12ProtocolSettingsResponsePtrOutput {
	return o
}

func (o X12ProtocolSettingsResponsePtrOutput) Elem() X12ProtocolSettingsResponseOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) X12ProtocolSettingsResponse { return *v }).(X12ProtocolSettingsResponseOutput)
}

// The X12 acknowledgment settings.
func (o X12ProtocolSettingsResponsePtrOutput) AcknowledgementSettings() X12AcknowledgementSettingsResponsePtrOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) *X12AcknowledgementSettingsResponse {
		if v == nil {
			return nil
		}
		return v.AcknowledgementSettings
	}).(X12AcknowledgementSettingsResponsePtrOutput)
}

// The X12 envelope override settings.
func (o X12ProtocolSettingsResponsePtrOutput) EnvelopeOverrides() X12EnvelopeOverrideResponseArrayOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) []X12EnvelopeOverrideResponse {
		if v == nil {
			return nil
		}
		return v.EnvelopeOverrides
	}).(X12EnvelopeOverrideResponseArrayOutput)
}

// The X12 envelope settings.
func (o X12ProtocolSettingsResponsePtrOutput) EnvelopeSettings() X12EnvelopeSettingsResponsePtrOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) *X12EnvelopeSettingsResponse {
		if v == nil {
			return nil
		}
		return v.EnvelopeSettings
	}).(X12EnvelopeSettingsResponsePtrOutput)
}

// The X12 framing settings.
func (o X12ProtocolSettingsResponsePtrOutput) FramingSettings() X12FramingSettingsResponsePtrOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) *X12FramingSettingsResponse {
		if v == nil {
			return nil
		}
		return v.FramingSettings
	}).(X12FramingSettingsResponsePtrOutput)
}

// The X12 message filter.
func (o X12ProtocolSettingsResponsePtrOutput) MessageFilter() X12MessageFilterResponsePtrOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) *X12MessageFilterResponse {
		if v == nil {
			return nil
		}
		return v.MessageFilter
	}).(X12MessageFilterResponsePtrOutput)
}

// The X12 message filter list.
func (o X12ProtocolSettingsResponsePtrOutput) MessageFilterList() X12MessageIdentifierResponseArrayOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) []X12MessageIdentifierResponse {
		if v == nil {
			return nil
		}
		return v.MessageFilterList
	}).(X12MessageIdentifierResponseArrayOutput)
}

// The X12 processing settings.
func (o X12ProtocolSettingsResponsePtrOutput) ProcessingSettings() X12ProcessingSettingsResponsePtrOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) *X12ProcessingSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ProcessingSettings
	}).(X12ProcessingSettingsResponsePtrOutput)
}

// The X12 schema references.
func (o X12ProtocolSettingsResponsePtrOutput) SchemaReferences() X12SchemaReferenceResponseArrayOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) []X12SchemaReferenceResponse {
		if v == nil {
			return nil
		}
		return v.SchemaReferences
	}).(X12SchemaReferenceResponseArrayOutput)
}

// The X12 security settings.
func (o X12ProtocolSettingsResponsePtrOutput) SecuritySettings() X12SecuritySettingsResponsePtrOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) *X12SecuritySettingsResponse {
		if v == nil {
			return nil
		}
		return v.SecuritySettings
	}).(X12SecuritySettingsResponsePtrOutput)
}

// The X12 validation override settings.
func (o X12ProtocolSettingsResponsePtrOutput) ValidationOverrides() X12ValidationOverrideResponseArrayOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) []X12ValidationOverrideResponse {
		if v == nil {
			return nil
		}
		return v.ValidationOverrides
	}).(X12ValidationOverrideResponseArrayOutput)
}

// The X12 validation settings.
func (o X12ProtocolSettingsResponsePtrOutput) ValidationSettings() X12ValidationSettingsResponsePtrOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) *X12ValidationSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ValidationSettings
	}).(X12ValidationSettingsResponsePtrOutput)
}

// The X12 delimiter override settings.
func (o X12ProtocolSettingsResponsePtrOutput) X12DelimiterOverrides() X12DelimiterOverridesResponseArrayOutput {
	return o.ApplyT(func(v *X12ProtocolSettingsResponse) []X12DelimiterOverridesResponse {
		if v == nil {
			return nil
		}
		return v.X12DelimiterOverrides
	}).(X12DelimiterOverridesResponseArrayOutput)
}

type X12SchemaReference struct {
	// The message id.
	MessageId *string `pulumi:"messageId"`
	// The schema name.
	SchemaName *string `pulumi:"schemaName"`
	// The schema version.
	SchemaVersion *string `pulumi:"schemaVersion"`
	// The sender application id.
	SenderApplicationId *string `pulumi:"senderApplicationId"`
}

// X12SchemaReferenceInput is an input type that accepts X12SchemaReferenceArgs and X12SchemaReferenceOutput values.
// You can construct a concrete instance of `X12SchemaReferenceInput` via:
//
//          X12SchemaReferenceArgs{...}
type X12SchemaReferenceInput interface {
	pulumi.Input

	ToX12SchemaReferenceOutput() X12SchemaReferenceOutput
	ToX12SchemaReferenceOutputWithContext(context.Context) X12SchemaReferenceOutput
}

type X12SchemaReferenceArgs struct {
	// The message id.
	MessageId pulumi.StringPtrInput `pulumi:"messageId"`
	// The schema name.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
	// The schema version.
	SchemaVersion pulumi.StringPtrInput `pulumi:"schemaVersion"`
	// The sender application id.
	SenderApplicationId pulumi.StringPtrInput `pulumi:"senderApplicationId"`
}

func (X12SchemaReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12SchemaReference)(nil)).Elem()
}

func (i X12SchemaReferenceArgs) ToX12SchemaReferenceOutput() X12SchemaReferenceOutput {
	return i.ToX12SchemaReferenceOutputWithContext(context.Background())
}

func (i X12SchemaReferenceArgs) ToX12SchemaReferenceOutputWithContext(ctx context.Context) X12SchemaReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12SchemaReferenceOutput)
}

// X12SchemaReferenceArrayInput is an input type that accepts X12SchemaReferenceArray and X12SchemaReferenceArrayOutput values.
// You can construct a concrete instance of `X12SchemaReferenceArrayInput` via:
//
//          X12SchemaReferenceArray{ X12SchemaReferenceArgs{...} }
type X12SchemaReferenceArrayInput interface {
	pulumi.Input

	ToX12SchemaReferenceArrayOutput() X12SchemaReferenceArrayOutput
	ToX12SchemaReferenceArrayOutputWithContext(context.Context) X12SchemaReferenceArrayOutput
}

type X12SchemaReferenceArray []X12SchemaReferenceInput

func (X12SchemaReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12SchemaReference)(nil)).Elem()
}

func (i X12SchemaReferenceArray) ToX12SchemaReferenceArrayOutput() X12SchemaReferenceArrayOutput {
	return i.ToX12SchemaReferenceArrayOutputWithContext(context.Background())
}

func (i X12SchemaReferenceArray) ToX12SchemaReferenceArrayOutputWithContext(ctx context.Context) X12SchemaReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12SchemaReferenceArrayOutput)
}

type X12SchemaReferenceResponse struct {
	// The message id.
	MessageId *string `pulumi:"messageId"`
	// The schema name.
	SchemaName *string `pulumi:"schemaName"`
	// The schema version.
	SchemaVersion *string `pulumi:"schemaVersion"`
	// The sender application id.
	SenderApplicationId *string `pulumi:"senderApplicationId"`
}

type X12SchemaReferenceResponseOutput struct{ *pulumi.OutputState }

func (X12SchemaReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12SchemaReferenceResponse)(nil)).Elem()
}

func (o X12SchemaReferenceResponseOutput) ToX12SchemaReferenceResponseOutput() X12SchemaReferenceResponseOutput {
	return o
}

func (o X12SchemaReferenceResponseOutput) ToX12SchemaReferenceResponseOutputWithContext(ctx context.Context) X12SchemaReferenceResponseOutput {
	return o
}

// The message id.
func (o X12SchemaReferenceResponseOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12SchemaReferenceResponse) *string { return v.MessageId }).(pulumi.StringPtrOutput)
}

// The schema name.
func (o X12SchemaReferenceResponseOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12SchemaReferenceResponse) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

// The schema version.
func (o X12SchemaReferenceResponseOutput) SchemaVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12SchemaReferenceResponse) *string { return v.SchemaVersion }).(pulumi.StringPtrOutput)
}

// The sender application id.
func (o X12SchemaReferenceResponseOutput) SenderApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12SchemaReferenceResponse) *string { return v.SenderApplicationId }).(pulumi.StringPtrOutput)
}

type X12SchemaReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (X12SchemaReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12SchemaReferenceResponse)(nil)).Elem()
}

func (o X12SchemaReferenceResponseArrayOutput) ToX12SchemaReferenceResponseArrayOutput() X12SchemaReferenceResponseArrayOutput {
	return o
}

func (o X12SchemaReferenceResponseArrayOutput) ToX12SchemaReferenceResponseArrayOutputWithContext(ctx context.Context) X12SchemaReferenceResponseArrayOutput {
	return o
}

func (o X12SchemaReferenceResponseArrayOutput) Index(i pulumi.IntInput) X12SchemaReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) X12SchemaReferenceResponse {
		return vs[0].([]X12SchemaReferenceResponse)[vs[1].(int)]
	}).(X12SchemaReferenceResponseOutput)
}

type X12SecuritySettings struct {
	// The authorization qualifier.
	AuthorizationQualifier *string `pulumi:"authorizationQualifier"`
	// The authorization value.
	AuthorizationValue *string `pulumi:"authorizationValue"`
	// The password value.
	PasswordValue *string `pulumi:"passwordValue"`
	// The security qualifier.
	SecurityQualifier *string `pulumi:"securityQualifier"`
}

// X12SecuritySettingsInput is an input type that accepts X12SecuritySettingsArgs and X12SecuritySettingsOutput values.
// You can construct a concrete instance of `X12SecuritySettingsInput` via:
//
//          X12SecuritySettingsArgs{...}
type X12SecuritySettingsInput interface {
	pulumi.Input

	ToX12SecuritySettingsOutput() X12SecuritySettingsOutput
	ToX12SecuritySettingsOutputWithContext(context.Context) X12SecuritySettingsOutput
}

type X12SecuritySettingsArgs struct {
	// The authorization qualifier.
	AuthorizationQualifier pulumi.StringPtrInput `pulumi:"authorizationQualifier"`
	// The authorization value.
	AuthorizationValue pulumi.StringPtrInput `pulumi:"authorizationValue"`
	// The password value.
	PasswordValue pulumi.StringPtrInput `pulumi:"passwordValue"`
	// The security qualifier.
	SecurityQualifier pulumi.StringPtrInput `pulumi:"securityQualifier"`
}

func (X12SecuritySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12SecuritySettings)(nil)).Elem()
}

func (i X12SecuritySettingsArgs) ToX12SecuritySettingsOutput() X12SecuritySettingsOutput {
	return i.ToX12SecuritySettingsOutputWithContext(context.Background())
}

func (i X12SecuritySettingsArgs) ToX12SecuritySettingsOutputWithContext(ctx context.Context) X12SecuritySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12SecuritySettingsOutput)
}

func (i X12SecuritySettingsArgs) ToX12SecuritySettingsPtrOutput() X12SecuritySettingsPtrOutput {
	return i.ToX12SecuritySettingsPtrOutputWithContext(context.Background())
}

func (i X12SecuritySettingsArgs) ToX12SecuritySettingsPtrOutputWithContext(ctx context.Context) X12SecuritySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12SecuritySettingsOutput).ToX12SecuritySettingsPtrOutputWithContext(ctx)
}

// X12SecuritySettingsPtrInput is an input type that accepts X12SecuritySettingsArgs, X12SecuritySettingsPtr and X12SecuritySettingsPtrOutput values.
// You can construct a concrete instance of `X12SecuritySettingsPtrInput` via:
//
//          X12SecuritySettingsArgs{...}
//
//  or:
//
//          nil
type X12SecuritySettingsPtrInput interface {
	pulumi.Input

	ToX12SecuritySettingsPtrOutput() X12SecuritySettingsPtrOutput
	ToX12SecuritySettingsPtrOutputWithContext(context.Context) X12SecuritySettingsPtrOutput
}

type x12securitySettingsPtrType X12SecuritySettingsArgs

func X12SecuritySettingsPtr(v *X12SecuritySettingsArgs) X12SecuritySettingsPtrInput {
	return (*x12securitySettingsPtrType)(v)
}

func (*x12securitySettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12SecuritySettings)(nil)).Elem()
}

func (i *x12securitySettingsPtrType) ToX12SecuritySettingsPtrOutput() X12SecuritySettingsPtrOutput {
	return i.ToX12SecuritySettingsPtrOutputWithContext(context.Background())
}

func (i *x12securitySettingsPtrType) ToX12SecuritySettingsPtrOutputWithContext(ctx context.Context) X12SecuritySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12SecuritySettingsPtrOutput)
}

type X12SecuritySettingsResponse struct {
	// The authorization qualifier.
	AuthorizationQualifier *string `pulumi:"authorizationQualifier"`
	// The authorization value.
	AuthorizationValue *string `pulumi:"authorizationValue"`
	// The password value.
	PasswordValue *string `pulumi:"passwordValue"`
	// The security qualifier.
	SecurityQualifier *string `pulumi:"securityQualifier"`
}

type X12SecuritySettingsResponseOutput struct{ *pulumi.OutputState }

func (X12SecuritySettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12SecuritySettingsResponse)(nil)).Elem()
}

func (o X12SecuritySettingsResponseOutput) ToX12SecuritySettingsResponseOutput() X12SecuritySettingsResponseOutput {
	return o
}

func (o X12SecuritySettingsResponseOutput) ToX12SecuritySettingsResponseOutputWithContext(ctx context.Context) X12SecuritySettingsResponseOutput {
	return o
}

func (o X12SecuritySettingsResponseOutput) ToX12SecuritySettingsResponsePtrOutput() X12SecuritySettingsResponsePtrOutput {
	return o.ToX12SecuritySettingsResponsePtrOutputWithContext(context.Background())
}

func (o X12SecuritySettingsResponseOutput) ToX12SecuritySettingsResponsePtrOutputWithContext(ctx context.Context) X12SecuritySettingsResponsePtrOutput {
	return o.ApplyT(func(v X12SecuritySettingsResponse) *X12SecuritySettingsResponse {
		return &v
	}).(X12SecuritySettingsResponsePtrOutput)
}

// The authorization qualifier.
func (o X12SecuritySettingsResponseOutput) AuthorizationQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12SecuritySettingsResponse) *string { return v.AuthorizationQualifier }).(pulumi.StringPtrOutput)
}

// The authorization value.
func (o X12SecuritySettingsResponseOutput) AuthorizationValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12SecuritySettingsResponse) *string { return v.AuthorizationValue }).(pulumi.StringPtrOutput)
}

// The password value.
func (o X12SecuritySettingsResponseOutput) PasswordValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12SecuritySettingsResponse) *string { return v.PasswordValue }).(pulumi.StringPtrOutput)
}

// The security qualifier.
func (o X12SecuritySettingsResponseOutput) SecurityQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12SecuritySettingsResponse) *string { return v.SecurityQualifier }).(pulumi.StringPtrOutput)
}

type X12SecuritySettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (X12SecuritySettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12SecuritySettingsResponse)(nil)).Elem()
}

func (o X12SecuritySettingsResponsePtrOutput) ToX12SecuritySettingsResponsePtrOutput() X12SecuritySettingsResponsePtrOutput {
	return o
}

func (o X12SecuritySettingsResponsePtrOutput) ToX12SecuritySettingsResponsePtrOutputWithContext(ctx context.Context) X12SecuritySettingsResponsePtrOutput {
	return o
}

func (o X12SecuritySettingsResponsePtrOutput) Elem() X12SecuritySettingsResponseOutput {
	return o.ApplyT(func(v *X12SecuritySettingsResponse) X12SecuritySettingsResponse { return *v }).(X12SecuritySettingsResponseOutput)
}

// The authorization qualifier.
func (o X12SecuritySettingsResponsePtrOutput) AuthorizationQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12SecuritySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizationQualifier
	}).(pulumi.StringPtrOutput)
}

// The authorization value.
func (o X12SecuritySettingsResponsePtrOutput) AuthorizationValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12SecuritySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizationValue
	}).(pulumi.StringPtrOutput)
}

// The password value.
func (o X12SecuritySettingsResponsePtrOutput) PasswordValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12SecuritySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PasswordValue
	}).(pulumi.StringPtrOutput)
}

// The security qualifier.
func (o X12SecuritySettingsResponsePtrOutput) SecurityQualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12SecuritySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecurityQualifier
	}).(pulumi.StringPtrOutput)
}

type X12ValidationOverride struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes *bool `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The message id on which the validation settings has to be applied.
	MessageId *string `pulumi:"messageId"`
	// The trailing separator policy.
	TrailingSeparatorPolicy *string `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes *bool `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character Set.
	ValidateCharacterSet *bool `pulumi:"validateCharacterSet"`
	// The value indicating whether to validate EDI types.
	ValidateEDITypes *bool `pulumi:"validateEDITypes"`
	// The value indicating whether to validate XSD types.
	ValidateXSDTypes *bool `pulumi:"validateXSDTypes"`
}

// X12ValidationOverrideInput is an input type that accepts X12ValidationOverrideArgs and X12ValidationOverrideOutput values.
// You can construct a concrete instance of `X12ValidationOverrideInput` via:
//
//          X12ValidationOverrideArgs{...}
type X12ValidationOverrideInput interface {
	pulumi.Input

	ToX12ValidationOverrideOutput() X12ValidationOverrideOutput
	ToX12ValidationOverrideOutputWithContext(context.Context) X12ValidationOverrideOutput
}

type X12ValidationOverrideArgs struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes pulumi.BoolPtrInput `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The message id on which the validation settings has to be applied.
	MessageId pulumi.StringPtrInput `pulumi:"messageId"`
	// The trailing separator policy.
	TrailingSeparatorPolicy pulumi.StringPtrInput `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes pulumi.BoolPtrInput `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character Set.
	ValidateCharacterSet pulumi.BoolPtrInput `pulumi:"validateCharacterSet"`
	// The value indicating whether to validate EDI types.
	ValidateEDITypes pulumi.BoolPtrInput `pulumi:"validateEDITypes"`
	// The value indicating whether to validate XSD types.
	ValidateXSDTypes pulumi.BoolPtrInput `pulumi:"validateXSDTypes"`
}

func (X12ValidationOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ValidationOverride)(nil)).Elem()
}

func (i X12ValidationOverrideArgs) ToX12ValidationOverrideOutput() X12ValidationOverrideOutput {
	return i.ToX12ValidationOverrideOutputWithContext(context.Background())
}

func (i X12ValidationOverrideArgs) ToX12ValidationOverrideOutputWithContext(ctx context.Context) X12ValidationOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ValidationOverrideOutput)
}

// X12ValidationOverrideArrayInput is an input type that accepts X12ValidationOverrideArray and X12ValidationOverrideArrayOutput values.
// You can construct a concrete instance of `X12ValidationOverrideArrayInput` via:
//
//          X12ValidationOverrideArray{ X12ValidationOverrideArgs{...} }
type X12ValidationOverrideArrayInput interface {
	pulumi.Input

	ToX12ValidationOverrideArrayOutput() X12ValidationOverrideArrayOutput
	ToX12ValidationOverrideArrayOutputWithContext(context.Context) X12ValidationOverrideArrayOutput
}

type X12ValidationOverrideArray []X12ValidationOverrideInput

func (X12ValidationOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12ValidationOverride)(nil)).Elem()
}

func (i X12ValidationOverrideArray) ToX12ValidationOverrideArrayOutput() X12ValidationOverrideArrayOutput {
	return i.ToX12ValidationOverrideArrayOutputWithContext(context.Background())
}

func (i X12ValidationOverrideArray) ToX12ValidationOverrideArrayOutputWithContext(ctx context.Context) X12ValidationOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ValidationOverrideArrayOutput)
}

type X12ValidationOverrideResponse struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes *bool `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The message id on which the validation settings has to be applied.
	MessageId *string `pulumi:"messageId"`
	// The trailing separator policy.
	TrailingSeparatorPolicy *string `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes *bool `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character Set.
	ValidateCharacterSet *bool `pulumi:"validateCharacterSet"`
	// The value indicating whether to validate EDI types.
	ValidateEDITypes *bool `pulumi:"validateEDITypes"`
	// The value indicating whether to validate XSD types.
	ValidateXSDTypes *bool `pulumi:"validateXSDTypes"`
}

type X12ValidationOverrideResponseOutput struct{ *pulumi.OutputState }

func (X12ValidationOverrideResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ValidationOverrideResponse)(nil)).Elem()
}

func (o X12ValidationOverrideResponseOutput) ToX12ValidationOverrideResponseOutput() X12ValidationOverrideResponseOutput {
	return o
}

func (o X12ValidationOverrideResponseOutput) ToX12ValidationOverrideResponseOutputWithContext(ctx context.Context) X12ValidationOverrideResponseOutput {
	return o
}

// The value indicating whether to allow leading and trailing spaces and zeroes.
func (o X12ValidationOverrideResponseOutput) AllowLeadingAndTrailingSpacesAndZeroes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12ValidationOverrideResponse) *bool { return v.AllowLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolPtrOutput)
}

// The message id on which the validation settings has to be applied.
func (o X12ValidationOverrideResponseOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12ValidationOverrideResponse) *string { return v.MessageId }).(pulumi.StringPtrOutput)
}

// The trailing separator policy.
func (o X12ValidationOverrideResponseOutput) TrailingSeparatorPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12ValidationOverrideResponse) *string { return v.TrailingSeparatorPolicy }).(pulumi.StringPtrOutput)
}

// The value indicating whether to trim leading and trailing spaces and zeroes.
func (o X12ValidationOverrideResponseOutput) TrimLeadingAndTrailingSpacesAndZeroes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12ValidationOverrideResponse) *bool { return v.TrimLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to validate character Set.
func (o X12ValidationOverrideResponseOutput) ValidateCharacterSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12ValidationOverrideResponse) *bool { return v.ValidateCharacterSet }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to validate EDI types.
func (o X12ValidationOverrideResponseOutput) ValidateEDITypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12ValidationOverrideResponse) *bool { return v.ValidateEDITypes }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to validate XSD types.
func (o X12ValidationOverrideResponseOutput) ValidateXSDTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12ValidationOverrideResponse) *bool { return v.ValidateXSDTypes }).(pulumi.BoolPtrOutput)
}

type X12ValidationOverrideResponseArrayOutput struct{ *pulumi.OutputState }

func (X12ValidationOverrideResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X12ValidationOverrideResponse)(nil)).Elem()
}

func (o X12ValidationOverrideResponseArrayOutput) ToX12ValidationOverrideResponseArrayOutput() X12ValidationOverrideResponseArrayOutput {
	return o
}

func (o X12ValidationOverrideResponseArrayOutput) ToX12ValidationOverrideResponseArrayOutputWithContext(ctx context.Context) X12ValidationOverrideResponseArrayOutput {
	return o
}

func (o X12ValidationOverrideResponseArrayOutput) Index(i pulumi.IntInput) X12ValidationOverrideResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) X12ValidationOverrideResponse {
		return vs[0].([]X12ValidationOverrideResponse)[vs[1].(int)]
	}).(X12ValidationOverrideResponseOutput)
}

type X12ValidationSettings struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes *bool `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to check for duplicate group control number.
	CheckDuplicateGroupControlNumber *bool `pulumi:"checkDuplicateGroupControlNumber"`
	// The value indicating whether to check for duplicate interchange control number.
	CheckDuplicateInterchangeControlNumber *bool `pulumi:"checkDuplicateInterchangeControlNumber"`
	// The value indicating whether to check for duplicate transaction set control number.
	CheckDuplicateTransactionSetControlNumber *bool `pulumi:"checkDuplicateTransactionSetControlNumber"`
	// The validity period of interchange control number.
	InterchangeControlNumberValidityDays *int `pulumi:"interchangeControlNumberValidityDays"`
	// The trailing separator policy.
	TrailingSeparatorPolicy *string `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes *bool `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character set in the message.
	ValidateCharacterSet *bool `pulumi:"validateCharacterSet"`
	// The value indicating whether to Whether to validate EDI types.
	ValidateEDITypes *bool `pulumi:"validateEDITypes"`
	// The value indicating whether to Whether to validate XSD types.
	ValidateXSDTypes *bool `pulumi:"validateXSDTypes"`
}

// X12ValidationSettingsInput is an input type that accepts X12ValidationSettingsArgs and X12ValidationSettingsOutput values.
// You can construct a concrete instance of `X12ValidationSettingsInput` via:
//
//          X12ValidationSettingsArgs{...}
type X12ValidationSettingsInput interface {
	pulumi.Input

	ToX12ValidationSettingsOutput() X12ValidationSettingsOutput
	ToX12ValidationSettingsOutputWithContext(context.Context) X12ValidationSettingsOutput
}

type X12ValidationSettingsArgs struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes pulumi.BoolPtrInput `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to check for duplicate group control number.
	CheckDuplicateGroupControlNumber pulumi.BoolPtrInput `pulumi:"checkDuplicateGroupControlNumber"`
	// The value indicating whether to check for duplicate interchange control number.
	CheckDuplicateInterchangeControlNumber pulumi.BoolPtrInput `pulumi:"checkDuplicateInterchangeControlNumber"`
	// The value indicating whether to check for duplicate transaction set control number.
	CheckDuplicateTransactionSetControlNumber pulumi.BoolPtrInput `pulumi:"checkDuplicateTransactionSetControlNumber"`
	// The validity period of interchange control number.
	InterchangeControlNumberValidityDays pulumi.IntPtrInput `pulumi:"interchangeControlNumberValidityDays"`
	// The trailing separator policy.
	TrailingSeparatorPolicy pulumi.StringPtrInput `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes pulumi.BoolPtrInput `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character set in the message.
	ValidateCharacterSet pulumi.BoolPtrInput `pulumi:"validateCharacterSet"`
	// The value indicating whether to Whether to validate EDI types.
	ValidateEDITypes pulumi.BoolPtrInput `pulumi:"validateEDITypes"`
	// The value indicating whether to Whether to validate XSD types.
	ValidateXSDTypes pulumi.BoolPtrInput `pulumi:"validateXSDTypes"`
}

func (X12ValidationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ValidationSettings)(nil)).Elem()
}

func (i X12ValidationSettingsArgs) ToX12ValidationSettingsOutput() X12ValidationSettingsOutput {
	return i.ToX12ValidationSettingsOutputWithContext(context.Background())
}

func (i X12ValidationSettingsArgs) ToX12ValidationSettingsOutputWithContext(ctx context.Context) X12ValidationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ValidationSettingsOutput)
}

func (i X12ValidationSettingsArgs) ToX12ValidationSettingsPtrOutput() X12ValidationSettingsPtrOutput {
	return i.ToX12ValidationSettingsPtrOutputWithContext(context.Background())
}

func (i X12ValidationSettingsArgs) ToX12ValidationSettingsPtrOutputWithContext(ctx context.Context) X12ValidationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ValidationSettingsOutput).ToX12ValidationSettingsPtrOutputWithContext(ctx)
}

// X12ValidationSettingsPtrInput is an input type that accepts X12ValidationSettingsArgs, X12ValidationSettingsPtr and X12ValidationSettingsPtrOutput values.
// You can construct a concrete instance of `X12ValidationSettingsPtrInput` via:
//
//          X12ValidationSettingsArgs{...}
//
//  or:
//
//          nil
type X12ValidationSettingsPtrInput interface {
	pulumi.Input

	ToX12ValidationSettingsPtrOutput() X12ValidationSettingsPtrOutput
	ToX12ValidationSettingsPtrOutputWithContext(context.Context) X12ValidationSettingsPtrOutput
}

type x12validationSettingsPtrType X12ValidationSettingsArgs

func X12ValidationSettingsPtr(v *X12ValidationSettingsArgs) X12ValidationSettingsPtrInput {
	return (*x12validationSettingsPtrType)(v)
}

func (*x12validationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X12ValidationSettings)(nil)).Elem()
}

func (i *x12validationSettingsPtrType) ToX12ValidationSettingsPtrOutput() X12ValidationSettingsPtrOutput {
	return i.ToX12ValidationSettingsPtrOutputWithContext(context.Background())
}

func (i *x12validationSettingsPtrType) ToX12ValidationSettingsPtrOutputWithContext(ctx context.Context) X12ValidationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X12ValidationSettingsPtrOutput)
}

type X12ValidationSettingsResponse struct {
	// The value indicating whether to allow leading and trailing spaces and zeroes.
	AllowLeadingAndTrailingSpacesAndZeroes *bool `pulumi:"allowLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to check for duplicate group control number.
	CheckDuplicateGroupControlNumber *bool `pulumi:"checkDuplicateGroupControlNumber"`
	// The value indicating whether to check for duplicate interchange control number.
	CheckDuplicateInterchangeControlNumber *bool `pulumi:"checkDuplicateInterchangeControlNumber"`
	// The value indicating whether to check for duplicate transaction set control number.
	CheckDuplicateTransactionSetControlNumber *bool `pulumi:"checkDuplicateTransactionSetControlNumber"`
	// The validity period of interchange control number.
	InterchangeControlNumberValidityDays *int `pulumi:"interchangeControlNumberValidityDays"`
	// The trailing separator policy.
	TrailingSeparatorPolicy *string `pulumi:"trailingSeparatorPolicy"`
	// The value indicating whether to trim leading and trailing spaces and zeroes.
	TrimLeadingAndTrailingSpacesAndZeroes *bool `pulumi:"trimLeadingAndTrailingSpacesAndZeroes"`
	// The value indicating whether to validate character set in the message.
	ValidateCharacterSet *bool `pulumi:"validateCharacterSet"`
	// The value indicating whether to Whether to validate EDI types.
	ValidateEDITypes *bool `pulumi:"validateEDITypes"`
	// The value indicating whether to Whether to validate XSD types.
	ValidateXSDTypes *bool `pulumi:"validateXSDTypes"`
}

type X12ValidationSettingsResponseOutput struct{ *pulumi.OutputState }

func (X12ValidationSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X12ValidationSettingsResponse)(nil)).Elem()
}

func (o X12ValidationSettingsResponseOutput) ToX12ValidationSettingsResponseOutput() X12ValidationSettingsResponseOutput {
	return o
}

func (o X12ValidationSettingsResponseOutput) ToX12ValidationSettingsResponseOutputWithContext(ctx context.Context) X12ValidationSettingsResponseOutput {
	return o
}

func (o X12ValidationSettingsResponseOutput) ToX12ValidationSettingsResponsePtrOutput() X12ValidationSettingsResponsePtrOutput {
	return o.ToX12ValidationSettingsResponsePtrOutputWithContext(context.Background())
}

func (o X12ValidationSettingsResponseOutput) ToX12ValidationSettingsResponsePtrOutputWithContext(ctx context.Context) X12ValidationSettingsResponsePtrOutput {
	return o.ApplyT(func(v X12ValidationSettingsResponse) *X12ValidationSettingsResponse {
		return &v
	}).(X12ValidationSettingsResponsePtrOutput)
}

// The value indicating whether to allow leading and trailing spaces and zeroes.
func (o X12ValidationSettingsResponseOutput) AllowLeadingAndTrailingSpacesAndZeroes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12ValidationSettingsResponse) *bool { return v.AllowLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate group control number.
func (o X12ValidationSettingsResponseOutput) CheckDuplicateGroupControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12ValidationSettingsResponse) *bool { return v.CheckDuplicateGroupControlNumber }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate interchange control number.
func (o X12ValidationSettingsResponseOutput) CheckDuplicateInterchangeControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12ValidationSettingsResponse) *bool { return v.CheckDuplicateInterchangeControlNumber }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate transaction set control number.
func (o X12ValidationSettingsResponseOutput) CheckDuplicateTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12ValidationSettingsResponse) *bool { return v.CheckDuplicateTransactionSetControlNumber }).(pulumi.BoolPtrOutput)
}

// The validity period of interchange control number.
func (o X12ValidationSettingsResponseOutput) InterchangeControlNumberValidityDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v X12ValidationSettingsResponse) *int { return v.InterchangeControlNumberValidityDays }).(pulumi.IntPtrOutput)
}

// The trailing separator policy.
func (o X12ValidationSettingsResponseOutput) TrailingSeparatorPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X12ValidationSettingsResponse) *string { return v.TrailingSeparatorPolicy }).(pulumi.StringPtrOutput)
}

// The value indicating whether to trim leading and trailing spaces and zeroes.
func (o X12ValidationSettingsResponseOutput) TrimLeadingAndTrailingSpacesAndZeroes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12ValidationSettingsResponse) *bool { return v.TrimLeadingAndTrailingSpacesAndZeroes }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to validate character set in the message.
func (o X12ValidationSettingsResponseOutput) ValidateCharacterSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12ValidationSettingsResponse) *bool { return v.ValidateCharacterSet }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to Whether to validate EDI types.
func (o X12ValidationSettingsResponseOutput) ValidateEDITypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12ValidationSettingsResponse) *bool { return v.ValidateEDITypes }).(pulumi.BoolPtrOutput)
}

// The value indicating whether to Whether to validate XSD types.
func (o X12ValidationSettingsResponseOutput) ValidateXSDTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X12ValidationSettingsResponse) *bool { return v.ValidateXSDTypes }).(pulumi.BoolPtrOutput)
}

type X12ValidationSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (X12ValidationSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X12ValidationSettingsResponse)(nil)).Elem()
}

func (o X12ValidationSettingsResponsePtrOutput) ToX12ValidationSettingsResponsePtrOutput() X12ValidationSettingsResponsePtrOutput {
	return o
}

func (o X12ValidationSettingsResponsePtrOutput) ToX12ValidationSettingsResponsePtrOutputWithContext(ctx context.Context) X12ValidationSettingsResponsePtrOutput {
	return o
}

func (o X12ValidationSettingsResponsePtrOutput) Elem() X12ValidationSettingsResponseOutput {
	return o.ApplyT(func(v *X12ValidationSettingsResponse) X12ValidationSettingsResponse { return *v }).(X12ValidationSettingsResponseOutput)
}

// The value indicating whether to allow leading and trailing spaces and zeroes.
func (o X12ValidationSettingsResponsePtrOutput) AllowLeadingAndTrailingSpacesAndZeroes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AllowLeadingAndTrailingSpacesAndZeroes
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate group control number.
func (o X12ValidationSettingsResponsePtrOutput) CheckDuplicateGroupControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CheckDuplicateGroupControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate interchange control number.
func (o X12ValidationSettingsResponsePtrOutput) CheckDuplicateInterchangeControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CheckDuplicateInterchangeControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to check for duplicate transaction set control number.
func (o X12ValidationSettingsResponsePtrOutput) CheckDuplicateTransactionSetControlNumber() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CheckDuplicateTransactionSetControlNumber
	}).(pulumi.BoolPtrOutput)
}

// The validity period of interchange control number.
func (o X12ValidationSettingsResponsePtrOutput) InterchangeControlNumberValidityDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.InterchangeControlNumberValidityDays
	}).(pulumi.IntPtrOutput)
}

// The trailing separator policy.
func (o X12ValidationSettingsResponsePtrOutput) TrailingSeparatorPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TrailingSeparatorPolicy
	}).(pulumi.StringPtrOutput)
}

// The value indicating whether to trim leading and trailing spaces and zeroes.
func (o X12ValidationSettingsResponsePtrOutput) TrimLeadingAndTrailingSpacesAndZeroes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.TrimLeadingAndTrailingSpacesAndZeroes
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to validate character set in the message.
func (o X12ValidationSettingsResponsePtrOutput) ValidateCharacterSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateCharacterSet
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to Whether to validate EDI types.
func (o X12ValidationSettingsResponsePtrOutput) ValidateEDITypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateEDITypes
	}).(pulumi.BoolPtrOutput)
}

// The value indicating whether to Whether to validate XSD types.
func (o X12ValidationSettingsResponsePtrOutput) ValidateXSDTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *X12ValidationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateXSDTypes
	}).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AS2AcknowledgementConnectionSettingsOutput{})
	pulumi.RegisterOutputType(AS2AcknowledgementConnectionSettingsPtrOutput{})
	pulumi.RegisterOutputType(AS2AcknowledgementConnectionSettingsResponseOutput{})
	pulumi.RegisterOutputType(AS2AcknowledgementConnectionSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AS2AgreementContentOutput{})
	pulumi.RegisterOutputType(AS2AgreementContentPtrOutput{})
	pulumi.RegisterOutputType(AS2AgreementContentResponseOutput{})
	pulumi.RegisterOutputType(AS2AgreementContentResponsePtrOutput{})
	pulumi.RegisterOutputType(AS2EnvelopeSettingsOutput{})
	pulumi.RegisterOutputType(AS2EnvelopeSettingsPtrOutput{})
	pulumi.RegisterOutputType(AS2EnvelopeSettingsResponseOutput{})
	pulumi.RegisterOutputType(AS2EnvelopeSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AS2ErrorSettingsOutput{})
	pulumi.RegisterOutputType(AS2ErrorSettingsPtrOutput{})
	pulumi.RegisterOutputType(AS2ErrorSettingsResponseOutput{})
	pulumi.RegisterOutputType(AS2ErrorSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AS2MdnSettingsOutput{})
	pulumi.RegisterOutputType(AS2MdnSettingsPtrOutput{})
	pulumi.RegisterOutputType(AS2MdnSettingsResponseOutput{})
	pulumi.RegisterOutputType(AS2MdnSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AS2MessageConnectionSettingsOutput{})
	pulumi.RegisterOutputType(AS2MessageConnectionSettingsPtrOutput{})
	pulumi.RegisterOutputType(AS2MessageConnectionSettingsResponseOutput{})
	pulumi.RegisterOutputType(AS2MessageConnectionSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AS2OneWayAgreementOutput{})
	pulumi.RegisterOutputType(AS2OneWayAgreementPtrOutput{})
	pulumi.RegisterOutputType(AS2OneWayAgreementResponseOutput{})
	pulumi.RegisterOutputType(AS2OneWayAgreementResponsePtrOutput{})
	pulumi.RegisterOutputType(AS2ProtocolSettingsOutput{})
	pulumi.RegisterOutputType(AS2ProtocolSettingsPtrOutput{})
	pulumi.RegisterOutputType(AS2ProtocolSettingsResponseOutput{})
	pulumi.RegisterOutputType(AS2ProtocolSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AS2SecuritySettingsOutput{})
	pulumi.RegisterOutputType(AS2SecuritySettingsPtrOutput{})
	pulumi.RegisterOutputType(AS2SecuritySettingsResponseOutput{})
	pulumi.RegisterOutputType(AS2SecuritySettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AS2ValidationSettingsOutput{})
	pulumi.RegisterOutputType(AS2ValidationSettingsPtrOutput{})
	pulumi.RegisterOutputType(AS2ValidationSettingsResponseOutput{})
	pulumi.RegisterOutputType(AS2ValidationSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AgreementContentOutput{})
	pulumi.RegisterOutputType(AgreementContentPtrOutput{})
	pulumi.RegisterOutputType(AgreementContentResponseOutput{})
	pulumi.RegisterOutputType(AgreementContentResponsePtrOutput{})
	pulumi.RegisterOutputType(B2BPartnerContentOutput{})
	pulumi.RegisterOutputType(B2BPartnerContentPtrOutput{})
	pulumi.RegisterOutputType(B2BPartnerContentResponseOutput{})
	pulumi.RegisterOutputType(B2BPartnerContentResponsePtrOutput{})
	pulumi.RegisterOutputType(BusinessIdentityOutput{})
	pulumi.RegisterOutputType(BusinessIdentityPtrOutput{})
	pulumi.RegisterOutputType(BusinessIdentityArrayOutput{})
	pulumi.RegisterOutputType(BusinessIdentityResponseOutput{})
	pulumi.RegisterOutputType(BusinessIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(BusinessIdentityResponseArrayOutput{})
	pulumi.RegisterOutputType(EdifactAcknowledgementSettingsOutput{})
	pulumi.RegisterOutputType(EdifactAcknowledgementSettingsPtrOutput{})
	pulumi.RegisterOutputType(EdifactAcknowledgementSettingsResponseOutput{})
	pulumi.RegisterOutputType(EdifactAcknowledgementSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(EdifactAgreementContentOutput{})
	pulumi.RegisterOutputType(EdifactAgreementContentPtrOutput{})
	pulumi.RegisterOutputType(EdifactAgreementContentResponseOutput{})
	pulumi.RegisterOutputType(EdifactAgreementContentResponsePtrOutput{})
	pulumi.RegisterOutputType(EdifactDelimiterOverrideOutput{})
	pulumi.RegisterOutputType(EdifactDelimiterOverrideArrayOutput{})
	pulumi.RegisterOutputType(EdifactDelimiterOverrideResponseOutput{})
	pulumi.RegisterOutputType(EdifactDelimiterOverrideResponseArrayOutput{})
	pulumi.RegisterOutputType(EdifactEnvelopeOverrideOutput{})
	pulumi.RegisterOutputType(EdifactEnvelopeOverrideArrayOutput{})
	pulumi.RegisterOutputType(EdifactEnvelopeOverrideResponseOutput{})
	pulumi.RegisterOutputType(EdifactEnvelopeOverrideResponseArrayOutput{})
	pulumi.RegisterOutputType(EdifactEnvelopeSettingsOutput{})
	pulumi.RegisterOutputType(EdifactEnvelopeSettingsPtrOutput{})
	pulumi.RegisterOutputType(EdifactEnvelopeSettingsResponseOutput{})
	pulumi.RegisterOutputType(EdifactEnvelopeSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(EdifactFramingSettingsOutput{})
	pulumi.RegisterOutputType(EdifactFramingSettingsPtrOutput{})
	pulumi.RegisterOutputType(EdifactFramingSettingsResponseOutput{})
	pulumi.RegisterOutputType(EdifactFramingSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(EdifactMessageFilterOutput{})
	pulumi.RegisterOutputType(EdifactMessageFilterPtrOutput{})
	pulumi.RegisterOutputType(EdifactMessageFilterResponseOutput{})
	pulumi.RegisterOutputType(EdifactMessageFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(EdifactMessageIdentifierOutput{})
	pulumi.RegisterOutputType(EdifactMessageIdentifierArrayOutput{})
	pulumi.RegisterOutputType(EdifactMessageIdentifierResponseOutput{})
	pulumi.RegisterOutputType(EdifactMessageIdentifierResponseArrayOutput{})
	pulumi.RegisterOutputType(EdifactOneWayAgreementOutput{})
	pulumi.RegisterOutputType(EdifactOneWayAgreementPtrOutput{})
	pulumi.RegisterOutputType(EdifactOneWayAgreementResponseOutput{})
	pulumi.RegisterOutputType(EdifactOneWayAgreementResponsePtrOutput{})
	pulumi.RegisterOutputType(EdifactProcessingSettingsOutput{})
	pulumi.RegisterOutputType(EdifactProcessingSettingsPtrOutput{})
	pulumi.RegisterOutputType(EdifactProcessingSettingsResponseOutput{})
	pulumi.RegisterOutputType(EdifactProcessingSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(EdifactProtocolSettingsOutput{})
	pulumi.RegisterOutputType(EdifactProtocolSettingsPtrOutput{})
	pulumi.RegisterOutputType(EdifactProtocolSettingsResponseOutput{})
	pulumi.RegisterOutputType(EdifactProtocolSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(EdifactSchemaReferenceOutput{})
	pulumi.RegisterOutputType(EdifactSchemaReferenceArrayOutput{})
	pulumi.RegisterOutputType(EdifactSchemaReferenceResponseOutput{})
	pulumi.RegisterOutputType(EdifactSchemaReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(EdifactValidationOverrideOutput{})
	pulumi.RegisterOutputType(EdifactValidationOverrideArrayOutput{})
	pulumi.RegisterOutputType(EdifactValidationOverrideResponseOutput{})
	pulumi.RegisterOutputType(EdifactValidationOverrideResponseArrayOutput{})
	pulumi.RegisterOutputType(EdifactValidationSettingsOutput{})
	pulumi.RegisterOutputType(EdifactValidationSettingsPtrOutput{})
	pulumi.RegisterOutputType(EdifactValidationSettingsResponseOutput{})
	pulumi.RegisterOutputType(EdifactValidationSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationAccountContentHashResponseOutput{})
	pulumi.RegisterOutputType(IntegrationAccountContentHashResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationAccountContentLinkResponseOutput{})
	pulumi.RegisterOutputType(IntegrationAccountContentLinkResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationAccountSkuOutput{})
	pulumi.RegisterOutputType(IntegrationAccountSkuPtrOutput{})
	pulumi.RegisterOutputType(IntegrationAccountSkuResponseOutput{})
	pulumi.RegisterOutputType(IntegrationAccountSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferencePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceKeyVaultOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceKeyVaultPtrOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceResponseKeyVaultOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceResponseKeyVaultPtrOutput{})
	pulumi.RegisterOutputType(PartnerContentOutput{})
	pulumi.RegisterOutputType(PartnerContentPtrOutput{})
	pulumi.RegisterOutputType(PartnerContentResponseOutput{})
	pulumi.RegisterOutputType(PartnerContentResponsePtrOutput{})
	pulumi.RegisterOutputType(X12AcknowledgementSettingsOutput{})
	pulumi.RegisterOutputType(X12AcknowledgementSettingsPtrOutput{})
	pulumi.RegisterOutputType(X12AcknowledgementSettingsResponseOutput{})
	pulumi.RegisterOutputType(X12AcknowledgementSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(X12AgreementContentOutput{})
	pulumi.RegisterOutputType(X12AgreementContentPtrOutput{})
	pulumi.RegisterOutputType(X12AgreementContentResponseOutput{})
	pulumi.RegisterOutputType(X12AgreementContentResponsePtrOutput{})
	pulumi.RegisterOutputType(X12DelimiterOverridesOutput{})
	pulumi.RegisterOutputType(X12DelimiterOverridesArrayOutput{})
	pulumi.RegisterOutputType(X12DelimiterOverridesResponseOutput{})
	pulumi.RegisterOutputType(X12DelimiterOverridesResponseArrayOutput{})
	pulumi.RegisterOutputType(X12EnvelopeOverrideOutput{})
	pulumi.RegisterOutputType(X12EnvelopeOverrideArrayOutput{})
	pulumi.RegisterOutputType(X12EnvelopeOverrideResponseOutput{})
	pulumi.RegisterOutputType(X12EnvelopeOverrideResponseArrayOutput{})
	pulumi.RegisterOutputType(X12EnvelopeSettingsOutput{})
	pulumi.RegisterOutputType(X12EnvelopeSettingsPtrOutput{})
	pulumi.RegisterOutputType(X12EnvelopeSettingsResponseOutput{})
	pulumi.RegisterOutputType(X12EnvelopeSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(X12FramingSettingsOutput{})
	pulumi.RegisterOutputType(X12FramingSettingsPtrOutput{})
	pulumi.RegisterOutputType(X12FramingSettingsResponseOutput{})
	pulumi.RegisterOutputType(X12FramingSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(X12MessageFilterOutput{})
	pulumi.RegisterOutputType(X12MessageFilterPtrOutput{})
	pulumi.RegisterOutputType(X12MessageFilterResponseOutput{})
	pulumi.RegisterOutputType(X12MessageFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(X12MessageIdentifierOutput{})
	pulumi.RegisterOutputType(X12MessageIdentifierArrayOutput{})
	pulumi.RegisterOutputType(X12MessageIdentifierResponseOutput{})
	pulumi.RegisterOutputType(X12MessageIdentifierResponseArrayOutput{})
	pulumi.RegisterOutputType(X12OneWayAgreementOutput{})
	pulumi.RegisterOutputType(X12OneWayAgreementPtrOutput{})
	pulumi.RegisterOutputType(X12OneWayAgreementResponseOutput{})
	pulumi.RegisterOutputType(X12OneWayAgreementResponsePtrOutput{})
	pulumi.RegisterOutputType(X12ProcessingSettingsOutput{})
	pulumi.RegisterOutputType(X12ProcessingSettingsPtrOutput{})
	pulumi.RegisterOutputType(X12ProcessingSettingsResponseOutput{})
	pulumi.RegisterOutputType(X12ProcessingSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(X12ProtocolSettingsOutput{})
	pulumi.RegisterOutputType(X12ProtocolSettingsPtrOutput{})
	pulumi.RegisterOutputType(X12ProtocolSettingsResponseOutput{})
	pulumi.RegisterOutputType(X12ProtocolSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(X12SchemaReferenceOutput{})
	pulumi.RegisterOutputType(X12SchemaReferenceArrayOutput{})
	pulumi.RegisterOutputType(X12SchemaReferenceResponseOutput{})
	pulumi.RegisterOutputType(X12SchemaReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(X12SecuritySettingsOutput{})
	pulumi.RegisterOutputType(X12SecuritySettingsPtrOutput{})
	pulumi.RegisterOutputType(X12SecuritySettingsResponseOutput{})
	pulumi.RegisterOutputType(X12SecuritySettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(X12ValidationOverrideOutput{})
	pulumi.RegisterOutputType(X12ValidationOverrideArrayOutput{})
	pulumi.RegisterOutputType(X12ValidationOverrideResponseOutput{})
	pulumi.RegisterOutputType(X12ValidationOverrideResponseArrayOutput{})
	pulumi.RegisterOutputType(X12ValidationSettingsOutput{})
	pulumi.RegisterOutputType(X12ValidationSettingsPtrOutput{})
	pulumi.RegisterOutputType(X12ValidationSettingsResponseOutput{})
	pulumi.RegisterOutputType(X12ValidationSettingsResponsePtrOutput{})
}
