// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package signalrservice

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A class represent a SignalR service resource.
type SignalR struct {
	pulumi.CustomResourceState

	// The kind of the service - e.g. "SignalR", or "RawWebSockets" for "Microsoft.SignalRService/SignalR"
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// The GEO location of the SignalR service. e.g. West US | East US | North Central US | South Central US.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Settings used to provision or configure the resource
	Properties SignalRPropertiesResponseOutput `pulumi:"properties"`
	// The billing information of the resource.(e.g. Free, Standard)
	Sku ResourceSkuResponsePtrOutput `pulumi:"sku"`
	// Tags of the service which is a list of key value pairs that describe the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource - e.g. "Microsoft.SignalRService/SignalR"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSignalR registers a new resource with the given unique name, arguments, and options.
func NewSignalR(ctx *pulumi.Context,
	name string, args *SignalRArgs, opts ...pulumi.ResourceOption) (*SignalR, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &SignalRArgs{}
	}
	var resource SignalR
	err := ctx.RegisterResource("azurerm:signalrservice:SignalR", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSignalR gets an existing SignalR resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSignalR(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SignalRState, opts ...pulumi.ResourceOption) (*SignalR, error) {
	var resource SignalR
	err := ctx.ReadResource("azurerm:signalrservice:SignalR", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SignalR resources.
type signalRState struct {
	// The kind of the service - e.g. "SignalR", or "RawWebSockets" for "Microsoft.SignalRService/SignalR"
	Kind *string `pulumi:"kind"`
	// The GEO location of the SignalR service. e.g. West US | East US | North Central US | South Central US.
	Location *string `pulumi:"location"`
	// The name of the resource.
	Name *string `pulumi:"name"`
	// Settings used to provision or configure the resource
	Properties *SignalRPropertiesResponse `pulumi:"properties"`
	// The billing information of the resource.(e.g. Free, Standard)
	Sku *ResourceSkuResponse `pulumi:"sku"`
	// Tags of the service which is a list of key value pairs that describe the resource.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource - e.g. "Microsoft.SignalRService/SignalR"
	Type *string `pulumi:"type"`
}

type SignalRState struct {
	// The kind of the service - e.g. "SignalR", or "RawWebSockets" for "Microsoft.SignalRService/SignalR"
	Kind pulumi.StringPtrInput
	// The GEO location of the SignalR service. e.g. West US | East US | North Central US | South Central US.
	Location pulumi.StringPtrInput
	// The name of the resource.
	Name pulumi.StringPtrInput
	// Settings used to provision or configure the resource
	Properties SignalRPropertiesResponsePtrInput
	// The billing information of the resource.(e.g. Free, Standard)
	Sku ResourceSkuResponsePtrInput
	// Tags of the service which is a list of key value pairs that describe the resource.
	Tags pulumi.StringMapInput
	// The type of the resource - e.g. "Microsoft.SignalRService/SignalR"
	Type pulumi.StringPtrInput
}

func (SignalRState) ElementType() reflect.Type {
	return reflect.TypeOf((*signalRState)(nil)).Elem()
}

type signalRArgs struct {
	// The kind of the service - e.g. "SignalR", or "RawWebSockets" for "Microsoft.SignalRService/SignalR"
	Kind *string `pulumi:"kind"`
	// The GEO location of the SignalR service. e.g. West US | East US | North Central US | South Central US.
	Location *string `pulumi:"location"`
	// The name of the SignalR resource.
	Name string `pulumi:"name"`
	// Settings used to provision or configure the resource
	Properties *SignalRProperties `pulumi:"properties"`
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The billing information of the resource.(e.g. Free, Standard)
	Sku *ResourceSku `pulumi:"sku"`
	// Tags of the service which is a list of key value pairs that describe the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a SignalR resource.
type SignalRArgs struct {
	// The kind of the service - e.g. "SignalR", or "RawWebSockets" for "Microsoft.SignalRService/SignalR"
	Kind pulumi.StringPtrInput
	// The GEO location of the SignalR service. e.g. West US | East US | North Central US | South Central US.
	Location pulumi.StringPtrInput
	// The name of the SignalR resource.
	Name pulumi.StringInput
	// Settings used to provision or configure the resource
	Properties SignalRPropertiesPtrInput
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput
	// The billing information of the resource.(e.g. Free, Standard)
	Sku ResourceSkuPtrInput
	// Tags of the service which is a list of key value pairs that describe the resource.
	Tags pulumi.StringMapInput
}

func (SignalRArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*signalRArgs)(nil)).Elem()
}
