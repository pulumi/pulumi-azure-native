// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20140901

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Single item in List or Get Event Hub operation
type EventHub struct {
	pulumi.CustomResourceState

	// Resource location
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties supplied to the Create Or Update Event Hub operation.
	Properties EventHubPropertiesResponseOutput `pulumi:"properties"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewEventHub registers a new resource with the given unique name, arguments, and options.
func NewEventHub(ctx *pulumi.Context,
	name string, args *EventHubArgs, opts ...pulumi.ResourceOption) (*EventHub, error) {
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.NamespaceName == nil {
		return nil, errors.New("missing required argument 'NamespaceName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &EventHubArgs{}
	}
	var resource EventHub
	err := ctx.RegisterResource("azurerm:eventhub/v20140901:EventHub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventHub gets an existing EventHub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventHub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventHubState, opts ...pulumi.ResourceOption) (*EventHub, error) {
	var resource EventHub
	err := ctx.ReadResource("azurerm:eventhub/v20140901:EventHub", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventHub resources.
type eventHubState struct {
	// Resource location
	Location *string `pulumi:"location"`
	// Resource name
	Name *string `pulumi:"name"`
	// Properties supplied to the Create Or Update Event Hub operation.
	Properties *EventHubPropertiesResponse `pulumi:"properties"`
	// Resource type
	Type *string `pulumi:"type"`
}

type EventHubState struct {
	// Resource location
	Location pulumi.StringPtrInput
	// Resource name
	Name pulumi.StringPtrInput
	// Properties supplied to the Create Or Update Event Hub operation.
	Properties EventHubPropertiesResponsePtrInput
	// Resource type
	Type pulumi.StringPtrInput
}

func (EventHubState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventHubState)(nil)).Elem()
}

type eventHubArgs struct {
	// Location of the resource.
	Location string `pulumi:"location"`
	// Number of days to retain the events for this Event Hub.
	MessageRetentionInDays *int `pulumi:"messageRetentionInDays"`
	// The Event Hub name
	Name string `pulumi:"name"`
	// The Namespace name
	NamespaceName string `pulumi:"namespaceName"`
	// Number of partitions created for the Event Hub.
	PartitionCount *int `pulumi:"partitionCount"`
	// Name of the resource group within the azure subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Enumerates the possible values for the status of the Event Hub.
	Status *string `pulumi:"status"`
	// ARM type of the Namespace.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a EventHub resource.
type EventHubArgs struct {
	// Location of the resource.
	Location pulumi.StringInput
	// Number of days to retain the events for this Event Hub.
	MessageRetentionInDays pulumi.IntPtrInput
	// The Event Hub name
	Name pulumi.StringInput
	// The Namespace name
	NamespaceName pulumi.StringInput
	// Number of partitions created for the Event Hub.
	PartitionCount pulumi.IntPtrInput
	// Name of the resource group within the azure subscription.
	ResourceGroupName pulumi.StringInput
	// Enumerates the possible values for the status of the Event Hub.
	Status pulumi.StringPtrInput
	// ARM type of the Namespace.
	Type pulumi.StringPtrInput
}

func (EventHubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventHubArgs)(nil)).Elem()
}
